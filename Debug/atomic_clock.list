
atomic_clock.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .itcm         00001c88  00000000  08000298  00020000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         0001b6d8  08001f20  08001f20  00021f20  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .user_flash   00000000  08100000  08100000  0005033c  2**0
                  CONTENTS
  4 .rodata       00003c00  0801d5f8  0801d5f8  0003d5f8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .ARM          00000008  080211f8  080211f8  000411f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .init_array   00000004  08021200  08021200  00041200  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08021204  08021204  00041204  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000033c  20000000  08021208  00050000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00007124  20000340  08021544  00050340  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20007464  08021544  00057464  2**0
                  ALLOC
 11 .lwip_sec     00044b83  30000000  30000000  00060000  2**2
                  ALLOC
 12 .ARM.attributes 0000002e  00000000  00000000  0005033c  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  0005036a  2**0
                  CONTENTS, READONLY
 14 .debug_info   0003af48  00000000  00000000  000503ad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 0000780f  00000000  00000000  0008b2f5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00002a30  00000000  00000000  00092b08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 000021a8  00000000  00000000  00095538  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  000126ed  00000000  00000000  000976e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   000418e4  00000000  00000000  000a9dcd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    001a9949  00000000  00000000  000eb6b1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  0000c394  00000000  00000000  00294ffc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000052  00000000  00000000  002a1390  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .itcm:

00000000 <telnet_client_init>:
 * @return ERR_VAL if invalid arguments are given
 *         ERR_OK if connect request has been sent
 *         other err_t values if connect request couldn't be sent
 */
bool telnet_client_init(void)
{
       0:	b580      	push	{r7, lr}
       2:	b084      	sub	sp, #16
       4:	af00      	add	r7, sp, #0
	/* create new tcp pcb */
	struct tcp_pcb *tpcb;
	tpcb = tcp_new();
       6:	f001 fe0b 	bl	1c20 <__tcp_new_veneer>
       a:	60f8      	str	r0, [r7, #12]

	/* Connect to the server */
	ip_addr_t destIPADDR;
	IP_ADDR4(&destIPADDR, LDC_ADDR1, LDC_ADDR2, LDC_ADDR3, LDC_ADDR4);
       c:	4b20      	ldr	r3, [pc, #128]	; (90 <telnet_client_init+0x90>)
       e:	607b      	str	r3, [r7, #4]
	#ifdef TELNET_DEBUG
		printf("[Telnet Client] Beginning TCP connection.\n\r");
		printf("[Telnet Client] Connecting to %s on port %d.\n\r", ipaddr_ntoa(&destIPADDR), LDC_PORT);
	#endif //TELNET_DEBUG
	err_t ret = tcp_connect(tpcb, &destIPADDR, LDC_PORT, telnet_client_connected);
      10:	1d39      	adds	r1, r7, #4
      12:	4b20      	ldr	r3, [pc, #128]	; (94 <telnet_client_init+0x94>)
      14:	f242 22b6 	movw	r2, #8886	; 0x22b6
      18:	68f8      	ldr	r0, [r7, #12]
      1a:	f001 fdd1 	bl	1bc0 <__tcp_connect_veneer>
      1e:	4603      	mov	r3, r0
      20:	72fb      	strb	r3, [r7, #11]
	#ifdef TELNET_DEBUG
		printf("[Telnet Client] Called tcp_connect, awaiting callback.\n\r");
		printf("[Telnet Client] tcp_connect returned %i\n\r", ret);
	#endif //TELNET_DEBUG
	if(ret == ERR_OK) {//if the TCP connection request worked
      22:	f997 300b 	ldrsb.w	r3, [r7, #11]
      26:	2b00      	cmp	r3, #0
      28:	d127      	bne.n	7a <telnet_client_init+0x7a>
		ldc_comms_state = LDC_CONNECTED_IDLE;
      2a:	4b1b      	ldr	r3, [pc, #108]	; (98 <telnet_client_init+0x98>)
      2c:	2201      	movs	r2, #1
      2e:	701a      	strb	r2, [r3, #0]
		start_timer(ETHERNET_TIMER);
      30:	4b1a      	ldr	r3, [pc, #104]	; (9c <telnet_client_init+0x9c>)
      32:	681b      	ldr	r3, [r3, #0]
      34:	4618      	mov	r0, r3
      36:	f001 fc79 	bl	192c <start_timer>
		while ((ldc_comms_state == LDC_CONNECTED_IDLE) && (check_timer(ETHERNET_TIMER) < TELNET_TIMEOUT)) {//loop here until timeout or response is received
      3a:	bf00      	nop
      3c:	4b16      	ldr	r3, [pc, #88]	; (98 <telnet_client_init+0x98>)
      3e:	781b      	ldrb	r3, [r3, #0]
      40:	2b01      	cmp	r3, #1
      42:	d108      	bne.n	56 <telnet_client_init+0x56>
      44:	4b15      	ldr	r3, [pc, #84]	; (9c <telnet_client_init+0x9c>)
      46:	681b      	ldr	r3, [r3, #0]
      48:	4618      	mov	r0, r3
      4a:	f001 fc9f 	bl	198c <check_timer>
      4e:	4603      	mov	r3, r0
      50:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
      54:	d3f2      	bcc.n	3c <telnet_client_init+0x3c>
		}
		stop_timer(ETHERNET_TIMER);
      56:	4b11      	ldr	r3, [pc, #68]	; (9c <telnet_client_init+0x9c>)
      58:	681b      	ldr	r3, [r3, #0]
      5a:	4618      	mov	r0, r3
      5c:	f001 fc84 	bl	1968 <stop_timer>
		if(strncmp(ldc_comms_message, DEBUG_CONNECTED_MESSAGE, strlen(DEBUG_CONNECTED_MESSAGE)) == 0) {
      60:	2217      	movs	r2, #23
      62:	490f      	ldr	r1, [pc, #60]	; (a0 <telnet_client_init+0xa0>)
      64:	480f      	ldr	r0, [pc, #60]	; (a4 <telnet_client_init+0xa4>)
      66:	f001 fdeb 	bl	1c40 <__strncmp_veneer>
      6a:	4603      	mov	r3, r0
      6c:	2b00      	cmp	r3, #0
      6e:	d10a      	bne.n	86 <telnet_client_init+0x86>
			#ifdef LDC_DEBUG
				printf("Confirmation received - Connected to debug port");
      70:	480d      	ldr	r0, [pc, #52]	; (a8 <telnet_client_init+0xa8>)
      72:	f001 fd81 	bl	1b78 <__printf_veneer>
			#endif //LDC_DEBUG
			return (true);
      76:	2301      	movs	r3, #1
      78:	e006      	b.n	88 <telnet_client_init+0x88>
		}
	} else {
		printf("[Telnet Client] ERROR: tcp_connect returned %i\n\r", ret);
      7a:	f997 300b 	ldrsb.w	r3, [r7, #11]
      7e:	4619      	mov	r1, r3
      80:	480a      	ldr	r0, [pc, #40]	; (ac <telnet_client_init+0xac>)
      82:	f001 fd79 	bl	1b78 <__printf_veneer>
	}
	return (false);
      86:	2300      	movs	r3, #0
}
      88:	4618      	mov	r0, r3
      8a:	3710      	adds	r7, #16
      8c:	46bd      	mov	sp, r7
      8e:	bd80      	pop	{r7, pc}
      90:	0b01a8c0 	.word	0x0b01a8c0
      94:	000002f1 	.word	0x000002f1
      98:	20000364 	.word	0x20000364
      9c:	20000130 	.word	0x20000130
      a0:	0801d5f8 	.word	0x0801d5f8
      a4:	20000000 	.word	0x20000000
      a8:	0801d610 	.word	0x0801d610
      ac:	0801d640 	.word	0x0801d640

000000b0 <init_ldc_comms>:
/**
 * Initialise Ethernet comms with LDC501 and check ID
 * @return TRUE if expected ID confirmed
 */
bool init_ldc_comms(void)
{
      b0:	b580      	push	{r7, lr}
      b2:	af00      	add	r7, sp, #0
	ldc_tx("\r\n"); //return character
      b4:	480d      	ldr	r0, [pc, #52]	; (ec <init_ldc_comms+0x3c>)
      b6:	f000 f867 	bl	188 <ldc_tx>
	ldc_tx("uloc1\r\n"); //unlock comms
      ba:	480d      	ldr	r0, [pc, #52]	; (f0 <init_ldc_comms+0x40>)
      bc:	f000 f864 	bl	188 <ldc_tx>
//	ldc_tx("TEON1\r\n"); //Turn TEC on
//	ldc_tx("SILD159.90\r\n"); //Set laser current to 159.9mA
	if(ldc_query("*idn?\r\n")){; //request ID
      c0:	480c      	ldr	r0, [pc, #48]	; (f4 <init_ldc_comms+0x44>)
      c2:	f000 f8ab 	bl	21c <ldc_query>
      c6:	4603      	mov	r3, r0
      c8:	2b00      	cmp	r3, #0
      ca:	d00c      	beq.n	e6 <init_ldc_comms+0x36>
//		printf("Successful command response\r\n");
		if(strncmp(ldc_comms_message, CONTROLLER_ID, strlen(CONTROLLER_ID)) == 0) {
      cc:	2232      	movs	r2, #50	; 0x32
      ce:	490a      	ldr	r1, [pc, #40]	; (f8 <init_ldc_comms+0x48>)
      d0:	480a      	ldr	r0, [pc, #40]	; (fc <init_ldc_comms+0x4c>)
      d2:	f001 fdb5 	bl	1c40 <__strncmp_veneer>
      d6:	4603      	mov	r3, r0
      d8:	2b00      	cmp	r3, #0
      da:	d104      	bne.n	e6 <init_ldc_comms+0x36>
			#ifdef LDC_DEBUG
		    	printf("[LDC] Expected controller ID received\r\n");
      dc:	4808      	ldr	r0, [pc, #32]	; (100 <init_ldc_comms+0x50>)
      de:	f001 fdcb 	bl	1c78 <__puts_veneer>
			#endif //LDC_DEBUG
		    return(true);
      e2:	2301      	movs	r3, #1
      e4:	e000      	b.n	e8 <init_ldc_comms+0x38>
		}
	}
	return(false);
      e6:	2300      	movs	r3, #0
}
      e8:	4618      	mov	r0, r3
      ea:	bd80      	pop	{r7, pc}
      ec:	0801d674 	.word	0x0801d674
      f0:	0801d678 	.word	0x0801d678
      f4:	0801d680 	.word	0x0801d680
      f8:	0801d688 	.word	0x0801d688
      fc:	20000000 	.word	0x20000000
     100:	0801d6bc 	.word	0x0801d6bc

00000104 <init_ldc_tec>:
/**
 * Initialise Ethernet comms with LDC501 and check ID
 * @return TRUE if expected ID confirmed
 */
bool init_ldc_tec(void)
{
     104:	b580      	push	{r7, lr}
     106:	af00      	add	r7, sp, #0
	ldc_tx("TMOD1\r\n"); //Constant temperature mode
     108:	4817      	ldr	r0, [pc, #92]	; (168 <init_ldc_tec+0x64>)
     10a:	f000 f83d 	bl	188 <ldc_tx>
	ldc_tx("TEMP21.15\r\n"); //Set operating point of 21.15C
     10e:	4817      	ldr	r0, [pc, #92]	; (16c <init_ldc_tec+0x68>)
     110:	f000 f83a 	bl	188 <ldc_tx>
	ldc_tx("TEON1\r\n"); //Turn TEC on
     114:	4816      	ldr	r0, [pc, #88]	; (170 <init_ldc_tec+0x6c>)
     116:	f000 f837 	bl	188 <ldc_tx>
	printf ("[LDC] TEC powered up - allowing 5s for TEC to stabilise");
     11a:	4816      	ldr	r0, [pc, #88]	; (174 <init_ldc_tec+0x70>)
     11c:	f001 fd2c 	bl	1b78 <__printf_veneer>
	start_timer(ETHERNET_TIMER);
     120:	4b15      	ldr	r3, [pc, #84]	; (178 <init_ldc_tec+0x74>)
     122:	681b      	ldr	r3, [r3, #0]
     124:	4618      	mov	r0, r3
     126:	f001 fc01 	bl	192c <start_timer>
	while (check_timer(ETHERNET_TIMER) < TEC_STABILISE_TIME) {//loop here for a few seconds
     12a:	bf00      	nop
     12c:	4b12      	ldr	r3, [pc, #72]	; (178 <init_ldc_tec+0x74>)
     12e:	681b      	ldr	r3, [r3, #0]
     130:	4618      	mov	r0, r3
     132:	f001 fc2b 	bl	198c <check_timer>
     136:	4603      	mov	r3, r0
     138:	f242 720f 	movw	r2, #9999	; 0x270f
     13c:	4293      	cmp	r3, r2
     13e:	d9f5      	bls.n	12c <init_ldc_tec+0x28>
//			printf ("Spinning round loop waiting for a response");
	}
	stop_timer(ETHERNET_TIMER);
     140:	4b0d      	ldr	r3, [pc, #52]	; (178 <init_ldc_tec+0x74>)
     142:	681b      	ldr	r3, [r3, #0]
     144:	4618      	mov	r0, r3
     146:	f001 fc0f 	bl	1968 <stop_timer>
	if(ldc_query("TTRD?\r\n")){; //read laser temperature
     14a:	480c      	ldr	r0, [pc, #48]	; (17c <init_ldc_tec+0x78>)
     14c:	f000 f866 	bl	21c <ldc_query>
     150:	4603      	mov	r3, r0
     152:	2b00      	cmp	r3, #0
     154:	d005      	beq.n	162 <init_ldc_tec+0x5e>
		printf ("[LDC] Measured temperature: %s\r\n", ldc_comms_message);
     156:	490a      	ldr	r1, [pc, #40]	; (180 <init_ldc_tec+0x7c>)
     158:	480a      	ldr	r0, [pc, #40]	; (184 <init_ldc_tec+0x80>)
     15a:	f001 fd0d 	bl	1b78 <__printf_veneer>
		    return(true);
     15e:	2301      	movs	r3, #1
     160:	e000      	b.n	164 <init_ldc_tec+0x60>
	}
	return(false);
     162:	2300      	movs	r3, #0
}
     164:	4618      	mov	r0, r3
     166:	bd80      	pop	{r7, pc}
     168:	0801d6e4 	.word	0x0801d6e4
     16c:	0801d6ec 	.word	0x0801d6ec
     170:	0801d6f8 	.word	0x0801d6f8
     174:	0801d700 	.word	0x0801d700
     178:	20000130 	.word	0x20000130
     17c:	0801d738 	.word	0x0801d738
     180:	20000000 	.word	0x20000000
     184:	0801d740 	.word	0x0801d740

00000188 <ldc_tx>:


/* Send a string to the LDC501 over telnet */
//void ldc_tx(const char *str, size_t lengthofstring)
void ldc_tx(const char str[])
{
     188:	b590      	push	{r4, r7, lr}
     18a:	b085      	sub	sp, #20
     18c:	af00      	add	r7, sp, #0
     18e:	6078      	str	r0, [r7, #4]
	uint16_t len = strlen(str);
     190:	6878      	ldr	r0, [r7, #4]
     192:	f001 fd1d 	bl	1bd0 <__strlen_veneer>
     196:	4603      	mov	r3, r0
     198:	81fb      	strh	r3, [r7, #14]
	tcTx->p = pbuf_alloc(PBUF_TRANSPORT, len , PBUF_POOL); //allocate pbuf
     19a:	4b11      	ldr	r3, [pc, #68]	; (1e0 <ldc_tx+0x58>)
     19c:	681c      	ldr	r4, [r3, #0]
     19e:	89fb      	ldrh	r3, [r7, #14]
     1a0:	f44f 72c1 	mov.w	r2, #386	; 0x182
     1a4:	4619      	mov	r1, r3
     1a6:	2036      	movs	r0, #54	; 0x36
     1a8:	f001 fcf2 	bl	1b90 <__pbuf_alloc_veneer>
     1ac:	4603      	mov	r3, r0
     1ae:	60a3      	str	r3, [r4, #8]
	pbuf_take(tcTx->p, (char*)str, len); // copy data to pbuf
     1b0:	4b0b      	ldr	r3, [pc, #44]	; (1e0 <ldc_tx+0x58>)
     1b2:	681b      	ldr	r3, [r3, #0]
     1b4:	689b      	ldr	r3, [r3, #8]
     1b6:	89fa      	ldrh	r2, [r7, #14]
     1b8:	6879      	ldr	r1, [r7, #4]
     1ba:	4618      	mov	r0, r3
     1bc:	f001 fd54 	bl	1c68 <__pbuf_take_veneer>
	telnet_client_send(pcbTx, tcTx); //send it
     1c0:	4b08      	ldr	r3, [pc, #32]	; (1e4 <ldc_tx+0x5c>)
     1c2:	681b      	ldr	r3, [r3, #0]
     1c4:	4a06      	ldr	r2, [pc, #24]	; (1e0 <ldc_tx+0x58>)
     1c6:	6812      	ldr	r2, [r2, #0]
     1c8:	4611      	mov	r1, r2
     1ca:	4618      	mov	r0, r3
     1cc:	f000 f98b 	bl	4e6 <telnet_client_send>
	#ifdef LDC_DEBUG
//		printf("[LDC] Sent over Ethernet: %s\r\n", str);
		printf("[LDC] Sent over Ethernet: %s", str); //no newline as one is included with the telnet message
     1d0:	6879      	ldr	r1, [r7, #4]
     1d2:	4805      	ldr	r0, [pc, #20]	; (1e8 <ldc_tx+0x60>)
     1d4:	f001 fcd0 	bl	1b78 <__printf_veneer>
	#endif //LDC_DEBUG
	/*disabled as the pbuf is already null.
	 * This causes assertion errors but worried as this could overflow
	 */
	//pbuf_free(tcTx->p); //free up the pbuf
}
     1d8:	bf00      	nop
     1da:	3714      	adds	r7, #20
     1dc:	46bd      	mov	sp, r7
     1de:	bd90      	pop	{r4, r7, pc}
     1e0:	2000035c 	.word	0x2000035c
     1e4:	20000360 	.word	0x20000360
     1e8:	0801d764 	.word	0x0801d764

000001ec <set_laser_current>:

/* Set laser current */
void set_laser_current(const double i)
{
     1ec:	b580      	push	{r7, lr}
     1ee:	b086      	sub	sp, #24
     1f0:	af00      	add	r7, sp, #0
     1f2:	ed87 0b00 	vstr	d0, [r7]
	char string[12];
//	uint8_t len = sprintf (string, "SILD%.2f\n", i);
	sprintf (string, "SILD%.2f\n", i);
     1f6:	f107 000c 	add.w	r0, r7, #12
     1fa:	e9d7 2300 	ldrd	r2, r3, [r7]
     1fe:	4906      	ldr	r1, [pc, #24]	; (218 <_Min_Heap_Size+0x18>)
     200:	f001 fd0a 	bl	1c18 <__sprintf_veneer>
	ldc_tx(string); //send command
     204:	f107 030c 	add.w	r3, r7, #12
     208:	4618      	mov	r0, r3
     20a:	f7ff ffbd 	bl	188 <ldc_tx>
}
     20e:	bf00      	nop
     210:	3718      	adds	r7, #24
     212:	46bd      	mov	sp, r7
     214:	bd80      	pop	{r7, pc}
     216:	bf00      	nop
     218:	0801d784 	.word	0x0801d784

0000021c <ldc_query>:

/* Send a command to the LDC501 over telnet and await response */
bool ldc_query(const char str[])
{
     21c:	b580      	push	{r7, lr}
     21e:	b082      	sub	sp, #8
     220:	af00      	add	r7, sp, #0
     222:	6078      	str	r0, [r7, #4]
	ldc_comms_retries = 0;
     224:	4b29      	ldr	r3, [pc, #164]	; (2cc <ldc_query+0xb0>)
     226:	2200      	movs	r2, #0
     228:	701a      	strb	r2, [r3, #0]
	while (ldc_comms_retries < TELNET_RETRIES) {
     22a:	e03e      	b.n	2aa <ldc_query+0x8e>
#ifdef LDC_DEBUG
		printf ("[LDC] Entered command while loop\r\n");
     22c:	4828      	ldr	r0, [pc, #160]	; (2d0 <ldc_query+0xb4>)
     22e:	f001 fd23 	bl	1c78 <__puts_veneer>
		printf ("[LDC] Started Ethernet timer\r\n");
     232:	4828      	ldr	r0, [pc, #160]	; (2d4 <ldc_query+0xb8>)
     234:	f001 fd20 	bl	1c78 <__puts_veneer>
#endif //LDC_DEBUG
		start_timer(ETHERNET_TIMER);
     238:	4b27      	ldr	r3, [pc, #156]	; (2d8 <ldc_query+0xbc>)
     23a:	681b      	ldr	r3, [r3, #0]
     23c:	4618      	mov	r0, r3
     23e:	f001 fb75 	bl	192c <start_timer>
		ldc_tx(str); //Send string
     242:	6878      	ldr	r0, [r7, #4]
     244:	f7ff ffa0 	bl	188 <ldc_tx>
		ldc_comms_state = LDC_AWAITING_RESPONSE; //set state to flag that a response is needed before sending anything further
     248:	4b24      	ldr	r3, [pc, #144]	; (2dc <ldc_query+0xc0>)
     24a:	2202      	movs	r2, #2
     24c:	701a      	strb	r2, [r3, #0]
		while ((ldc_comms_state == LDC_AWAITING_RESPONSE) && (check_timer(ETHERNET_TIMER) < TELNET_TIMEOUT)) {//loop here until timeout or response is received
     24e:	e004      	b.n	25a <ldc_query+0x3e>
//			printf ("Spinning round loop waiting for a response");
			/* Ethernet handling */
			ethernetif_input(&gnetif);
     250:	4823      	ldr	r0, [pc, #140]	; (2e0 <ldc_query+0xc4>)
     252:	f001 fcc5 	bl	1be0 <__ethernetif_input_veneer>
			sys_check_timeouts();
     256:	f001 fcef 	bl	1c38 <__sys_check_timeouts_veneer>
		while ((ldc_comms_state == LDC_AWAITING_RESPONSE) && (check_timer(ETHERNET_TIMER) < TELNET_TIMEOUT)) {//loop here until timeout or response is received
     25a:	4b20      	ldr	r3, [pc, #128]	; (2dc <ldc_query+0xc0>)
     25c:	781b      	ldrb	r3, [r3, #0]
     25e:	2b02      	cmp	r3, #2
     260:	d108      	bne.n	274 <ldc_query+0x58>
     262:	4b1d      	ldr	r3, [pc, #116]	; (2d8 <ldc_query+0xbc>)
     264:	681b      	ldr	r3, [r3, #0]
     266:	4618      	mov	r0, r3
     268:	f001 fb90 	bl	198c <check_timer>
     26c:	4603      	mov	r3, r0
     26e:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
     272:	d3ed      	bcc.n	250 <ldc_query+0x34>
		}
		stop_timer(ETHERNET_TIMER);
     274:	4b18      	ldr	r3, [pc, #96]	; (2d8 <ldc_query+0xbc>)
     276:	681b      	ldr	r3, [r3, #0]
     278:	4618      	mov	r0, r3
     27a:	f001 fb75 	bl	1968 <stop_timer>
		if (ldc_comms_state == LDC_RESPONSE_RECEIVED) {
     27e:	4b17      	ldr	r3, [pc, #92]	; (2dc <ldc_query+0xc0>)
     280:	781b      	ldrb	r3, [r3, #0]
     282:	2b03      	cmp	r3, #3
     284:	d104      	bne.n	290 <ldc_query+0x74>
			#ifdef LDC_DEBUG
				printf ("[LDC] Response to query received\r\n");
     286:	4817      	ldr	r0, [pc, #92]	; (2e4 <ldc_query+0xc8>)
     288:	f001 fcf6 	bl	1c78 <__puts_veneer>
			#endif //LDC_DEBUG
			return (true); //success
     28c:	2301      	movs	r3, #1
     28e:	e018      	b.n	2c2 <ldc_query+0xa6>
		}
		ldc_comms_retries++; //increase retry count
     290:	4b0e      	ldr	r3, [pc, #56]	; (2cc <ldc_query+0xb0>)
     292:	781b      	ldrb	r3, [r3, #0]
     294:	3301      	adds	r3, #1
     296:	b2da      	uxtb	r2, r3
     298:	4b0c      	ldr	r3, [pc, #48]	; (2cc <ldc_query+0xb0>)
     29a:	701a      	strb	r2, [r3, #0]
		#ifdef LDC_DEBUG
			printf ("[LDC] Issued command %s but no response. Retry %u\r\n", str, ldc_comms_retries);
     29c:	4b0b      	ldr	r3, [pc, #44]	; (2cc <ldc_query+0xb0>)
     29e:	781b      	ldrb	r3, [r3, #0]
     2a0:	461a      	mov	r2, r3
     2a2:	6879      	ldr	r1, [r7, #4]
     2a4:	4810      	ldr	r0, [pc, #64]	; (2e8 <ldc_query+0xcc>)
     2a6:	f001 fc67 	bl	1b78 <__printf_veneer>
	while (ldc_comms_retries < TELNET_RETRIES) {
     2aa:	4b08      	ldr	r3, [pc, #32]	; (2cc <ldc_query+0xb0>)
     2ac:	781b      	ldrb	r3, [r3, #0]
     2ae:	2b02      	cmp	r3, #2
     2b0:	d9bc      	bls.n	22c <ldc_query+0x10>
		#endif //LDC_DEBUG
	}
	#ifdef LDC_DEBUG
		printf ("[LDC] Command %s failed after %u attempts\r\n", str, ldc_comms_retries);
     2b2:	4b06      	ldr	r3, [pc, #24]	; (2cc <ldc_query+0xb0>)
     2b4:	781b      	ldrb	r3, [r3, #0]
     2b6:	461a      	mov	r2, r3
     2b8:	6879      	ldr	r1, [r7, #4]
     2ba:	480c      	ldr	r0, [pc, #48]	; (2ec <ldc_query+0xd0>)
     2bc:	f001 fc5c 	bl	1b78 <__printf_veneer>
	#endif //LDC_DEBUG
	return (false); //failure after timeout
     2c0:	2300      	movs	r3, #0
}
     2c2:	4618      	mov	r0, r3
     2c4:	3708      	adds	r7, #8
     2c6:	46bd      	mov	sp, r7
     2c8:	bd80      	pop	{r7, pc}
     2ca:	bf00      	nop
     2cc:	20000365 	.word	0x20000365
     2d0:	0801d790 	.word	0x0801d790
     2d4:	0801d7b4 	.word	0x0801d7b4
     2d8:	20000130 	.word	0x20000130
     2dc:	20000364 	.word	0x20000364
     2e0:	20000774 	.word	0x20000774
     2e4:	0801d7d4 	.word	0x0801d7d4
     2e8:	0801d7f8 	.word	0x0801d7f8
     2ec:	0801d82c 	.word	0x0801d82c

000002f0 <telnet_client_connected>:
/** This callback is called, when the client is connected to the server
 * Here we will initialise few other callbacks
 * and in the end, call the client handle function
  */
static err_t telnet_client_connected(void *arg, struct tcp_pcb *newpcb, err_t err)
{
     2f0:	b580      	push	{r7, lr}
     2f2:	b086      	sub	sp, #24
     2f4:	af00      	add	r7, sp, #0
     2f6:	60f8      	str	r0, [r7, #12]
     2f8:	60b9      	str	r1, [r7, #8]
     2fa:	4613      	mov	r3, r2
     2fc:	71fb      	strb	r3, [r7, #7]

  LWIP_UNUSED_ARG(arg);
  LWIP_UNUSED_ARG(err);

  /* allocate structure tc to maintain tcp connection information */
  tc = (struct telnet_client_struct *)mem_malloc(sizeof(struct telnet_client_struct));
     2fe:	200c      	movs	r0, #12
     300:	f001 fc96 	bl	1c30 <__mem_malloc_veneer>
     304:	6138      	str	r0, [r7, #16]
  if (tc != NULL)
     306:	693b      	ldr	r3, [r7, #16]
     308:	2b00      	cmp	r3, #0
     30a:	d01f      	beq.n	34c <telnet_client_connected+0x5c>
  {
    tc->state = TC_CONNECTED;
     30c:	693b      	ldr	r3, [r7, #16]
     30e:	2201      	movs	r2, #1
     310:	701a      	strb	r2, [r3, #0]
    tc->pcb = newpcb;
     312:	693b      	ldr	r3, [r7, #16]
     314:	68ba      	ldr	r2, [r7, #8]
     316:	605a      	str	r2, [r3, #4]
    tc->retries = 0;
     318:	693b      	ldr	r3, [r7, #16]
     31a:	2200      	movs	r2, #0
     31c:	705a      	strb	r2, [r3, #1]
    tc->p = NULL;
     31e:	693b      	ldr	r3, [r7, #16]
     320:	2200      	movs	r2, #0
     322:	609a      	str	r2, [r3, #8]

    /* pass newly allocated tc structure as argument to newpcb */
    tcp_arg(newpcb, tc);
     324:	6939      	ldr	r1, [r7, #16]
     326:	68b8      	ldr	r0, [r7, #8]
     328:	f001 fc22 	bl	1b70 <__tcp_arg_veneer>

    /* initialize lwip tcp_recv callback function for newpcb  */
    tcp_recv(newpcb, telnet_client_recv);
     32c:	490d      	ldr	r1, [pc, #52]	; (364 <telnet_client_connected+0x74>)
     32e:	68b8      	ldr	r0, [r7, #8]
     330:	f001 fc3e 	bl	1bb0 <__tcp_recv_veneer>

    /* initialize lwip tcp_poll callback function for newpcb */
    tcp_poll(newpcb, telnet_client_poll, 0);
     334:	2200      	movs	r2, #0
     336:	490c      	ldr	r1, [pc, #48]	; (368 <telnet_client_connected+0x78>)
     338:	68b8      	ldr	r0, [r7, #8]
     33a:	f001 fc91 	bl	1c60 <__tcp_poll_veneer>

    /* initialize LwIP tcp_sent callback function */
    tcp_sent(newpcb, telnet_client_sent);
     33e:	490b      	ldr	r1, [pc, #44]	; (36c <telnet_client_connected+0x7c>)
     340:	68b8      	ldr	r0, [r7, #8]
     342:	f001 fc9d 	bl	1c80 <__tcp_sent_veneer>
    #ifdef TELNET_DEBUG
		printf("[Telnet Client] Successful connection.\n\r");
	#endif //TELNET_DEBUG

//	telnet_initialised = 1;
    ret_err = ERR_OK;
     346:	2300      	movs	r3, #0
     348:	75fb      	strb	r3, [r7, #23]
     34a:	e005      	b.n	358 <telnet_client_connected+0x68>
  }
  else
  {
    /*  close tcp connection */
    telnet_client_connection_close(newpcb, tc);
     34c:	6939      	ldr	r1, [r7, #16]
     34e:	68b8      	ldr	r0, [r7, #8]
     350:	f000 f917 	bl	582 <telnet_client_connection_close>
	#ifdef TELNET_DEBUG
		printf("[Telnet Client] Connection closed due to memory error.\n\r");
	#endif //TELNET_DEBUG
    /* return memory error */
    ret_err = ERR_MEM;
     354:	23ff      	movs	r3, #255	; 0xff
     356:	75fb      	strb	r3, [r7, #23]
  }
  return ret_err;
     358:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
     35c:	4618      	mov	r0, r3
     35e:	3718      	adds	r7, #24
     360:	46bd      	mov	sp, r7
     362:	bd80      	pop	{r7, pc}
     364:	00000371 	.word	0x00000371
     368:	00000465 	.word	0x00000465
     36c:	000004ad 	.word	0x000004ad

00000370 <telnet_client_recv>:

/** This callback is called, when the client receives some data from the server
 * if the data received is valid, we will handle the data in the client handle function
  */
static err_t telnet_client_recv(void *arg, struct tcp_pcb *tpcb, struct pbuf *p, err_t err)
{
     370:	b580      	push	{r7, lr}
     372:	b086      	sub	sp, #24
     374:	af00      	add	r7, sp, #0
     376:	60f8      	str	r0, [r7, #12]
     378:	60b9      	str	r1, [r7, #8]
     37a:	607a      	str	r2, [r7, #4]
     37c:	70fb      	strb	r3, [r7, #3]
    printf("[Telnet Client] Received data from server.\n\r");
  #endif //TELNET_DEBUG
  struct telnet_client_struct *tc;
  err_t ret_err;

  LWIP_ASSERT("arg != NULL",arg != NULL);
     37e:	68fb      	ldr	r3, [r7, #12]
     380:	2b00      	cmp	r3, #0
     382:	d106      	bne.n	392 <telnet_client_recv+0x22>
     384:	4b34      	ldr	r3, [pc, #208]	; (458 <_Min_Stack_Size+0x58>)
     386:	f240 12e5 	movw	r2, #485	; 0x1e5
     38a:	4934      	ldr	r1, [pc, #208]	; (45c <_Min_Stack_Size+0x5c>)
     38c:	4834      	ldr	r0, [pc, #208]	; (460 <_Min_Stack_Size+0x60>)
     38e:	f001 fbf3 	bl	1b78 <__printf_veneer>

  tc = (struct telnet_client_struct *)arg;
     392:	68fb      	ldr	r3, [r7, #12]
     394:	613b      	str	r3, [r7, #16]

  /* if we receive an empty tcp frame from server => close connection */
  if (p == NULL)
     396:	687b      	ldr	r3, [r7, #4]
     398:	2b00      	cmp	r3, #0
     39a:	d10d      	bne.n	3b8 <telnet_client_recv+0x48>
  {
    /* remote host closed connection */
    tc->state = TC_CLOSING;
     39c:	693b      	ldr	r3, [r7, #16]
     39e:	2203      	movs	r2, #3
     3a0:	701a      	strb	r2, [r3, #0]
    if(tc->p == NULL)
     3a2:	693b      	ldr	r3, [r7, #16]
     3a4:	689b      	ldr	r3, [r3, #8]
     3a6:	2b00      	cmp	r3, #0
     3a8:	d103      	bne.n	3b2 <telnet_client_recv+0x42>
    {
       /* we're done sending, close connection */
       telnet_client_connection_close(tpcb, tc);
     3aa:	6939      	ldr	r1, [r7, #16]
     3ac:	68b8      	ldr	r0, [r7, #8]
     3ae:	f000 f8e8 	bl	582 <telnet_client_connection_close>
//      tcp_sent(tpcb, telnet_client_sent);

      /* send remaining data*/
//      telnet_client_send(tpcb, tc);
    }
    ret_err = ERR_OK;
     3b2:	2300      	movs	r3, #0
     3b4:	75fb      	strb	r3, [r7, #23]
     3b6:	e048      	b.n	44a <_Min_Stack_Size+0x4a>
  }
  /* else : a non empty frame was received from server but for some reason err != ERR_OK */
  else if(err != ERR_OK)
     3b8:	f997 3003 	ldrsb.w	r3, [r7, #3]
     3bc:	2b00      	cmp	r3, #0
     3be:	d00b      	beq.n	3d8 <telnet_client_recv+0x68>
  {
    /* free received pbuf*/
    if (p != NULL)
     3c0:	687b      	ldr	r3, [r7, #4]
     3c2:	2b00      	cmp	r3, #0
     3c4:	d005      	beq.n	3d2 <telnet_client_recv+0x62>
    {
      tc->p = NULL;
     3c6:	693b      	ldr	r3, [r7, #16]
     3c8:	2200      	movs	r2, #0
     3ca:	609a      	str	r2, [r3, #8]
      pbuf_free(p);
     3cc:	6878      	ldr	r0, [r7, #4]
     3ce:	f001 fbeb 	bl	1ba8 <__pbuf_free_veneer>
    }
    ret_err = err;
     3d2:	78fb      	ldrb	r3, [r7, #3]
     3d4:	75fb      	strb	r3, [r7, #23]
     3d6:	e038      	b.n	44a <_Min_Stack_Size+0x4a>
  }
  else if(tc->state == TC_CONNECTED)
     3d8:	693b      	ldr	r3, [r7, #16]
     3da:	781b      	ldrb	r3, [r3, #0]
     3dc:	2b01      	cmp	r3, #1
     3de:	d113      	bne.n	408 <_Min_Stack_Size+0x8>
  {
   /* store reference to incoming pbuf (chain) */
    tc->p = p;
     3e0:	693b      	ldr	r3, [r7, #16]
     3e2:	687a      	ldr	r2, [r7, #4]
     3e4:	609a      	str	r2, [r3, #8]
    // tcp_sent has already been initialized in the beginning.
//    /* initialize LwIP tcp_sent callback function */
//    tcp_sent(tpcb, telnet_client_sent);

    /* Acknowledge the received data */
    tcp_recved(tpcb, p->tot_len);
     3e6:	687b      	ldr	r3, [r7, #4]
     3e8:	891b      	ldrh	r3, [r3, #8]
     3ea:	4619      	mov	r1, r3
     3ec:	68b8      	ldr	r0, [r7, #8]
     3ee:	f001 fbcb 	bl	1b88 <__tcp_recved_veneer>
      printf("[Telnet Client] Acknowledging received data.\n\r");
    #endif //TELNET_DEBUG

    /* handle the received data */
//    example_client_handle(tpcb, tc);
    telnet_client_handle(tpcb, tc, p);
     3f2:	687a      	ldr	r2, [r7, #4]
     3f4:	6939      	ldr	r1, [r7, #16]
     3f6:	68b8      	ldr	r0, [r7, #8]
     3f8:	f000 f8ea 	bl	5d0 <telnet_client_handle>

    pbuf_free(p);
     3fc:	6878      	ldr	r0, [r7, #4]
     3fe:	f001 fbd3 	bl	1ba8 <__pbuf_free_veneer>

    ret_err = ERR_OK;
     402:	2300      	movs	r3, #0
     404:	75fb      	strb	r3, [r7, #23]
     406:	e020      	b.n	44a <_Min_Stack_Size+0x4a>
  }
  else if(tc->state == TC_CLOSING)
     408:	693b      	ldr	r3, [r7, #16]
     40a:	781b      	ldrb	r3, [r3, #0]
     40c:	2b03      	cmp	r3, #3
     40e:	d10e      	bne.n	42e <_Min_Stack_Size+0x2e>
  {
    /* odd case, remote side closing twice, trash data */
    tcp_recved(tpcb, p->tot_len);
     410:	687b      	ldr	r3, [r7, #4]
     412:	891b      	ldrh	r3, [r3, #8]
     414:	4619      	mov	r1, r3
     416:	68b8      	ldr	r0, [r7, #8]
     418:	f001 fbb6 	bl	1b88 <__tcp_recved_veneer>
    tc->p = NULL;
     41c:	693b      	ldr	r3, [r7, #16]
     41e:	2200      	movs	r2, #0
     420:	609a      	str	r2, [r3, #8]
    pbuf_free(p);
     422:	6878      	ldr	r0, [r7, #4]
     424:	f001 fbc0 	bl	1ba8 <__pbuf_free_veneer>
    ret_err = ERR_OK;
     428:	2300      	movs	r3, #0
     42a:	75fb      	strb	r3, [r7, #23]
     42c:	e00d      	b.n	44a <_Min_Stack_Size+0x4a>
  }
  else
  {
    /* unknown tc->state, trash data  */
    tcp_recved(tpcb, p->tot_len);
     42e:	687b      	ldr	r3, [r7, #4]
     430:	891b      	ldrh	r3, [r3, #8]
     432:	4619      	mov	r1, r3
     434:	68b8      	ldr	r0, [r7, #8]
     436:	f001 fba7 	bl	1b88 <__tcp_recved_veneer>
    tc->p = NULL;
     43a:	693b      	ldr	r3, [r7, #16]
     43c:	2200      	movs	r2, #0
     43e:	609a      	str	r2, [r3, #8]
    pbuf_free(p);
     440:	6878      	ldr	r0, [r7, #4]
     442:	f001 fbb1 	bl	1ba8 <__pbuf_free_veneer>
    ret_err = ERR_OK;
     446:	2300      	movs	r3, #0
     448:	75fb      	strb	r3, [r7, #23]
  }
  return ret_err;
     44a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
     44e:	4618      	mov	r0, r3
     450:	3718      	adds	r7, #24
     452:	46bd      	mov	sp, r7
     454:	bd80      	pop	{r7, pc}
     456:	bf00      	nop
     458:	0801d858 	.word	0x0801d858
     45c:	0801d870 	.word	0x0801d870
     460:	0801d87c 	.word	0x0801d87c

00000464 <telnet_client_poll>:


static err_t telnet_client_poll(void *arg, struct tcp_pcb *tpcb)
{
     464:	b580      	push	{r7, lr}
     466:	b084      	sub	sp, #16
     468:	af00      	add	r7, sp, #0
     46a:	6078      	str	r0, [r7, #4]
     46c:	6039      	str	r1, [r7, #0]
  err_t ret_err;
  struct telnet_client_struct *tc;

  tc = (struct telnet_client_struct *)arg;
     46e:	687b      	ldr	r3, [r7, #4]
     470:	60bb      	str	r3, [r7, #8]
  if (tc != NULL)
     472:	68bb      	ldr	r3, [r7, #8]
     474:	2b00      	cmp	r3, #0
     476:	d00e      	beq.n	496 <telnet_client_poll+0x32>
  {
    if (tc->p != NULL)
     478:	68bb      	ldr	r3, [r7, #8]
     47a:	689b      	ldr	r3, [r3, #8]
     47c:	2b00      	cmp	r3, #0
     47e:	d107      	bne.n	490 <telnet_client_poll+0x2c>
//      telnet_client_send(tpcb, tc);
    }
    else
    {
      /* no remaining pbuf (chain)  */
      if(tc->state == TC_CLOSING)
     480:	68bb      	ldr	r3, [r7, #8]
     482:	781b      	ldrb	r3, [r3, #0]
     484:	2b03      	cmp	r3, #3
     486:	d103      	bne.n	490 <telnet_client_poll+0x2c>
      {
        /*  close tcp connection */
        telnet_client_connection_close(tpcb, tc);
     488:	68b9      	ldr	r1, [r7, #8]
     48a:	6838      	ldr	r0, [r7, #0]
     48c:	f000 f879 	bl	582 <telnet_client_connection_close>
      }
    }
    ret_err = ERR_OK;
     490:	2300      	movs	r3, #0
     492:	73fb      	strb	r3, [r7, #15]
     494:	e004      	b.n	4a0 <telnet_client_poll+0x3c>
  }
  else
  {
    /* nothing to be done */
    tcp_abort(tpcb);
     496:	6838      	ldr	r0, [r7, #0]
     498:	f001 fbaa 	bl	1bf0 <__tcp_abort_veneer>
    ret_err = ERR_ABRT;
     49c:	23f3      	movs	r3, #243	; 0xf3
     49e:	73fb      	strb	r3, [r7, #15]
  }
  return ret_err;
     4a0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
     4a4:	4618      	mov	r0, r3
     4a6:	3710      	adds	r7, #16
     4a8:	46bd      	mov	sp, r7
     4aa:	bd80      	pop	{r7, pc}

000004ac <telnet_client_sent>:

/** This callback is called, when the server acknowledges the data sent by the client
 * If there is no more data left to sent, we will simply close the connection
  */
static err_t telnet_client_sent(void *arg, struct tcp_pcb *tpcb, u16_t len)
{
     4ac:	b580      	push	{r7, lr}
     4ae:	b086      	sub	sp, #24
     4b0:	af00      	add	r7, sp, #0
     4b2:	60f8      	str	r0, [r7, #12]
     4b4:	60b9      	str	r1, [r7, #8]
     4b6:	4613      	mov	r3, r2
     4b8:	80fb      	strh	r3, [r7, #6]
	#endif //TELNET_DEBUG
  struct telnet_client_struct *tc;

  LWIP_UNUSED_ARG(len);

  tc = (struct telnet_client_struct *)arg;
     4ba:	68fb      	ldr	r3, [r7, #12]
     4bc:	617b      	str	r3, [r7, #20]
  tc->retries = 0;
     4be:	697b      	ldr	r3, [r7, #20]
     4c0:	2200      	movs	r2, #0
     4c2:	705a      	strb	r2, [r3, #1]

  if(tc->p != NULL)
     4c4:	697b      	ldr	r3, [r7, #20]
     4c6:	689b      	ldr	r3, [r3, #8]
     4c8:	2b00      	cmp	r3, #0
     4ca:	d107      	bne.n	4dc <telnet_client_sent+0x30>
//    telnet_client_send(tpcb, tc);
  }
  else
  {
    /* if no more data to send and client closed connection*/
    if(tc->state == TC_CLOSING)
     4cc:	697b      	ldr	r3, [r7, #20]
     4ce:	781b      	ldrb	r3, [r3, #0]
     4d0:	2b03      	cmp	r3, #3
     4d2:	d103      	bne.n	4dc <telnet_client_sent+0x30>
      telnet_client_connection_close(tpcb, tc);
     4d4:	6979      	ldr	r1, [r7, #20]
     4d6:	68b8      	ldr	r0, [r7, #8]
     4d8:	f000 f853 	bl	582 <telnet_client_connection_close>
  }
  return ERR_OK;
     4dc:	2300      	movs	r3, #0
}
     4de:	4618      	mov	r0, r3
     4e0:	3718      	adds	r7, #24
     4e2:	46bd      	mov	sp, r7
     4e4:	bd80      	pop	{r7, pc}

000004e6 <telnet_client_send>:


/** A function to send the data to the server
  */
static void telnet_client_send(struct tcp_pcb *tpcb, struct telnet_client_struct *tc)
{
     4e6:	b580      	push	{r7, lr}
     4e8:	b086      	sub	sp, #24
     4ea:	af00      	add	r7, sp, #0
     4ec:	6078      	str	r0, [r7, #4]
     4ee:	6039      	str	r1, [r7, #0]
  #ifdef TELNET_DEBUG
    printf("[Telnet Client] Sending data to server.\n\r");
  #endif //TELNET_DEBUG
  struct pbuf *ptr;
  err_t wr_err = ERR_OK;
     4f0:	2300      	movs	r3, #0
     4f2:	75fb      	strb	r3, [r7, #23]

  while ((wr_err == ERR_OK) &&
     4f4:	e031      	b.n	55a <telnet_client_send+0x74>
         (tc->p != NULL) &&
         (tc->p->len <= tcp_sndbuf(tpcb)))
  {

    /* get pointer on pbuf from tc structure */
    ptr = tc->p;
     4f6:	683b      	ldr	r3, [r7, #0]
     4f8:	689b      	ldr	r3, [r3, #8]
     4fa:	613b      	str	r3, [r7, #16]

    /* enqueue data for transmission */
    wr_err = tcp_write(tpcb, ptr->payload, ptr->len, 1);
     4fc:	693b      	ldr	r3, [r7, #16]
     4fe:	6859      	ldr	r1, [r3, #4]
     500:	693b      	ldr	r3, [r7, #16]
     502:	895a      	ldrh	r2, [r3, #10]
     504:	2301      	movs	r3, #1
     506:	6878      	ldr	r0, [r7, #4]
     508:	f001 fb66 	bl	1bd8 <__tcp_write_veneer>
     50c:	4603      	mov	r3, r0
     50e:	75fb      	strb	r3, [r7, #23]

    if (wr_err == ERR_OK)
     510:	f997 3017 	ldrsb.w	r3, [r7, #23]
     514:	2b00      	cmp	r3, #0
     516:	d118      	bne.n	54a <telnet_client_send+0x64>
    {
      u16_t plen;
      u8_t freed;

      plen = ptr->len;
     518:	693b      	ldr	r3, [r7, #16]
     51a:	895b      	ldrh	r3, [r3, #10]
     51c:	81fb      	strh	r3, [r7, #14]

      /* continue with next pbuf in chain (if any) */
      tc->p = ptr->next;
     51e:	693b      	ldr	r3, [r7, #16]
     520:	681a      	ldr	r2, [r3, #0]
     522:	683b      	ldr	r3, [r7, #0]
     524:	609a      	str	r2, [r3, #8]

      if(tc->p != NULL)
     526:	683b      	ldr	r3, [r7, #0]
     528:	689b      	ldr	r3, [r3, #8]
     52a:	2b00      	cmp	r3, #0
     52c:	d004      	beq.n	538 <telnet_client_send+0x52>
      {
        /* increment reference count for tc->p */
        pbuf_ref(tc->p);
     52e:	683b      	ldr	r3, [r7, #0]
     530:	689b      	ldr	r3, [r3, #8]
     532:	4618      	mov	r0, r3
     534:	f001 fb6c 	bl	1c10 <__pbuf_ref_veneer>

     /* chop first pbuf from chain */
      do
      {
        /* try hard to free pbuf */
        freed = pbuf_free(ptr);
     538:	6938      	ldr	r0, [r7, #16]
     53a:	f001 fb35 	bl	1ba8 <__pbuf_free_veneer>
     53e:	4603      	mov	r3, r0
     540:	737b      	strb	r3, [r7, #13]
      }
      while(freed == 0);
     542:	7b7b      	ldrb	r3, [r7, #13]
     544:	2b00      	cmp	r3, #0
     546:	d0f7      	beq.n	538 <telnet_client_send+0x52>
     548:	e007      	b.n	55a <telnet_client_send+0x74>
     /* we can read more data now */
//     tcp_recved(tpcb, plen);
   }
   else if(wr_err == ERR_MEM)
     54a:	f997 3017 	ldrsb.w	r3, [r7, #23]
     54e:	f1b3 3fff 	cmp.w	r3, #4294967295
     552:	d102      	bne.n	55a <telnet_client_send+0x74>
   {
      /* we are low on memory, try later / harder, defer to poll */
     tc->p = ptr;
     554:	683b      	ldr	r3, [r7, #0]
     556:	693a      	ldr	r2, [r7, #16]
     558:	609a      	str	r2, [r3, #8]
         (tc->p != NULL) &&
     55a:	f997 3017 	ldrsb.w	r3, [r7, #23]
     55e:	2b00      	cmp	r3, #0
     560:	d10b      	bne.n	57a <telnet_client_send+0x94>
     562:	683b      	ldr	r3, [r7, #0]
     564:	689b      	ldr	r3, [r3, #8]
  while ((wr_err == ERR_OK) &&
     566:	2b00      	cmp	r3, #0
     568:	d007      	beq.n	57a <telnet_client_send+0x94>
         (tc->p->len <= tcp_sndbuf(tpcb)))
     56a:	683b      	ldr	r3, [r7, #0]
     56c:	689b      	ldr	r3, [r3, #8]
     56e:	895a      	ldrh	r2, [r3, #10]
     570:	687b      	ldr	r3, [r7, #4]
     572:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
         (tc->p != NULL) &&
     576:	429a      	cmp	r2, r3
     578:	d9bd      	bls.n	4f6 <telnet_client_send+0x10>
   else
   {
     /* other problem ?? */
   }
  }
}
     57a:	bf00      	nop
     57c:	3718      	adds	r7, #24
     57e:	46bd      	mov	sp, r7
     580:	bd80      	pop	{r7, pc}

00000582 <telnet_client_connection_close>:


static void telnet_client_connection_close(struct tcp_pcb *tpcb, struct telnet_client_struct *tc)
{
     582:	b580      	push	{r7, lr}
     584:	b082      	sub	sp, #8
     586:	af00      	add	r7, sp, #0
     588:	6078      	str	r0, [r7, #4]
     58a:	6039      	str	r1, [r7, #0]
  #ifdef TELNET_DEBUG
    printf("[Telnet Client] Closing connection.\n\r");
  #endif //TELNET_DEBUG
  /* remove all callbacks */
  tcp_arg(tpcb, NULL);
     58c:	2100      	movs	r1, #0
     58e:	6878      	ldr	r0, [r7, #4]
     590:	f001 faee 	bl	1b70 <__tcp_arg_veneer>
  tcp_sent(tpcb, NULL);
     594:	2100      	movs	r1, #0
     596:	6878      	ldr	r0, [r7, #4]
     598:	f001 fb72 	bl	1c80 <__tcp_sent_veneer>
  tcp_recv(tpcb, NULL);
     59c:	2100      	movs	r1, #0
     59e:	6878      	ldr	r0, [r7, #4]
     5a0:	f001 fb06 	bl	1bb0 <__tcp_recv_veneer>
  tcp_err(tpcb, NULL);
     5a4:	2100      	movs	r1, #0
     5a6:	6878      	ldr	r0, [r7, #4]
     5a8:	f001 fb62 	bl	1c70 <__tcp_err_veneer>
  tcp_poll(tpcb, NULL, 0);
     5ac:	2200      	movs	r2, #0
     5ae:	2100      	movs	r1, #0
     5b0:	6878      	ldr	r0, [r7, #4]
     5b2:	f001 fb55 	bl	1c60 <__tcp_poll_veneer>

  /* delete tc structure */
  if (tc != NULL)
     5b6:	683b      	ldr	r3, [r7, #0]
     5b8:	2b00      	cmp	r3, #0
     5ba:	d002      	beq.n	5c2 <telnet_client_connection_close+0x40>
  {
    mem_free(tc);
     5bc:	6838      	ldr	r0, [r7, #0]
     5be:	f001 fafb 	bl	1bb8 <__mem_free_veneer>
  }

  /* close tcp connection */
  tcp_close(tpcb);
     5c2:	6878      	ldr	r0, [r7, #4]
     5c4:	f001 fb18 	bl	1bf8 <__tcp_close_veneer>

//  telnet_initialised = 0;
}
     5c8:	bf00      	nop
     5ca:	3708      	adds	r7, #8
     5cc:	46bd      	mov	sp, r7
     5ce:	bd80      	pop	{r7, pc}

000005d0 <telnet_client_handle>:

/* Function to handle the incoming TCP Data */

static void telnet_client_handle (struct tcp_pcb *tpcb, struct telnet_client_struct *tc, struct pbuf *p)
{
     5d0:	b580      	push	{r7, lr}
     5d2:	b088      	sub	sp, #32
     5d4:	af00      	add	r7, sp, #0
     5d6:	60f8      	str	r0, [r7, #12]
     5d8:	60b9      	str	r1, [r7, #8]
     5da:	607a      	str	r2, [r7, #4]
	//function has been called as telnet_client_handle(tpcb, tc, p);
  #ifdef TELNET_DEBUG
    printf("[Telnet Client] Handling incoming data.\n\r");
  #endif //TELNET_DEBUG
    /* get the Remote IP */
	ip4_addr_t inIP = tpcb->remote_ip;
     5dc:	68fb      	ldr	r3, [r7, #12]
     5de:	685b      	ldr	r3, [r3, #4]
     5e0:	613b      	str	r3, [r7, #16]
	uint16_t inPort = tpcb->remote_port;
     5e2:	68fb      	ldr	r3, [r7, #12]
     5e4:	8b1b      	ldrh	r3, [r3, #24]
     5e6:	83fb      	strh	r3, [r7, #30]

	/* Extract the IP */
	char *remIP = ipaddr_ntoa(&inIP);
     5e8:	f107 0310 	add.w	r3, r7, #16
     5ec:	4618      	mov	r0, r3
     5ee:	f001 fb2f 	bl	1c50 <__ip4addr_ntoa_veneer>
     5f2:	61b8      	str	r0, [r7, #24]

//	tcTx->state = tc->state;
//	tcTx->pcb = tc->pcb;
//	tcTx->p = tc->p;

	tcTx = tc;
     5f4:	4a14      	ldr	r2, [pc, #80]	; (648 <telnet_client_handle+0x78>)
     5f6:	68bb      	ldr	r3, [r7, #8]
     5f8:	6013      	str	r3, [r2, #0]
	pcbTx = tpcb;
     5fa:	4a14      	ldr	r2, [pc, #80]	; (64c <telnet_client_handle+0x7c>)
     5fc:	68fb      	ldr	r3, [r7, #12]
     5fe:	6013      	str	r3, [r2, #0]

	if (p -> len != p -> tot_len) {//spans more that one buffer and I haven't allowed for this yet
     600:	687b      	ldr	r3, [r7, #4]
     602:	895a      	ldrh	r2, [r3, #10]
     604:	687b      	ldr	r3, [r7, #4]
     606:	891b      	ldrh	r3, [r3, #8]
     608:	429a      	cmp	r2, r3
     60a:	d002      	beq.n	612 <telnet_client_handle+0x42>
		printf("[Telnet Client] ERROR - Received data spans more than one pbuf.\n\r");
     60c:	4810      	ldr	r0, [pc, #64]	; (650 <telnet_client_handle+0x80>)
     60e:	f001 fab3 	bl	1b78 <__printf_veneer>
	}

	/* Copy payload into a string */
	uint16_t len = p -> len; //length of the payload
     612:	687b      	ldr	r3, [r7, #4]
     614:	895b      	ldrh	r3, [r3, #10]
     616:	82fb      	strh	r3, [r7, #22]
//	char str[len+1]; //holds the payload, with capacity for terminating character
//	memcpy(str, p -> payload, p -> len); //copy the payload across
	memcpy(ldc_comms_message, p -> payload, p -> len); //copy the payload across
     618:	687b      	ldr	r3, [r7, #4]
     61a:	6859      	ldr	r1, [r3, #4]
     61c:	687b      	ldr	r3, [r7, #4]
     61e:	895b      	ldrh	r3, [r3, #10]
     620:	461a      	mov	r2, r3
     622:	480c      	ldr	r0, [pc, #48]	; (654 <telnet_client_handle+0x84>)
     624:	f001 faac 	bl	1b80 <__memcpy_veneer>
	ldc_comms_message[len] = '\0'; //assigns null character to terminate string
     628:	8afb      	ldrh	r3, [r7, #22]
     62a:	4a0a      	ldr	r2, [pc, #40]	; (654 <telnet_client_handle+0x84>)
     62c:	2100      	movs	r1, #0
     62e:	54d1      	strb	r1, [r2, r3]
	ldc_comms_state = LDC_RESPONSE_RECEIVED;
     630:	4b09      	ldr	r3, [pc, #36]	; (658 <telnet_client_handle+0x88>)
     632:	2203      	movs	r2, #3
     634:	701a      	strb	r2, [r3, #0]
	#ifdef LDC_DEBUG
//		printf("[LDC] Message: %s\n\r",str);
//		printf("[LDC] Message received: %s",str); //no newline as one is included with the telnet message received
		printf("[LDC] Message received: %s",ldc_comms_message); //no newline as one is included with the telnet message received
     636:	4907      	ldr	r1, [pc, #28]	; (654 <telnet_client_handle+0x84>)
     638:	4808      	ldr	r0, [pc, #32]	; (65c <telnet_client_handle+0x8c>)
     63a:	f001 fa9d 	bl	1b78 <__printf_veneer>
//    	printf("String length: %u\n\r",sizeof(str));
//    	printf("p -> len: %u\n\r",p -> len);
//    	printf("p -> tot_len: %u\n\r",p -> tot_len);
	#endif //LDC_DEBUG
}
     63e:	bf00      	nop
     640:	3720      	adds	r7, #32
     642:	46bd      	mov	sp, r7
     644:	bd80      	pop	{r7, pc}
     646:	bf00      	nop
     648:	2000035c 	.word	0x2000035c
     64c:	20000360 	.word	0x20000360
     650:	0801d8a4 	.word	0x0801d8a4
     654:	20000000 	.word	0x20000000
     658:	20000364 	.word	0x20000364
     65c:	0801d8e8 	.word	0x0801d8e8

00000660 <synth_writereg>:
  * @param  Address
  * @param  Chip address
  * @param  Verify
  * @retval Contents read back from register
  */
static uint32_t synth_writereg(const uint32_t data, const uint32_t reg_address, const uint32_t chip_address, const bool verify) {
     660:	b580      	push	{r7, lr}
     662:	b08a      	sub	sp, #40	; 0x28
     664:	af00      	add	r7, sp, #0
     666:	60f8      	str	r0, [r7, #12]
     668:	60b9      	str	r1, [r7, #8]
     66a:	607a      	str	r2, [r7, #4]
     66c:	70fb      	strb	r3, [r7, #3]

	uint32_t read_data = 0;
     66e:	2300      	movs	r3, #0
     670:	627b      	str	r3, [r7, #36]	; 0x24
	const uint32_t write_data = (data << 8) | (reg_address << 3) | chip_address; // This is what we will write, 32 bits in total.
     672:	68fb      	ldr	r3, [r7, #12]
     674:	021a      	lsls	r2, r3, #8
     676:	68bb      	ldr	r3, [r7, #8]
     678:	00db      	lsls	r3, r3, #3
     67a:	4313      	orrs	r3, r2
     67c:	687a      	ldr	r2, [r7, #4]
     67e:	4313      	orrs	r3, r2
     680:	61fb      	str	r3, [r7, #28]
	#ifdef SPI_DEBUG
		printf("SPI BYTES WRITTEN: 0x%X \r\n", write_data);
	#endif //SPI_DEBUG
	HAL_GPIO_WritePin(SCLK_GPIO_Port, SCLK_Pin, 0);
     682:	2200      	movs	r2, #0
     684:	f44f 7180 	mov.w	r1, #256	; 0x100
     688:	4830      	ldr	r0, [pc, #192]	; (74c <synth_writereg+0xec>)
     68a:	f001 fa89 	bl	1ba0 <__HAL_GPIO_WritePin_veneer>
	HAL_GPIO_WritePin(SEN_GPIO_Port, SEN_Pin, 0); // Take SEN low to indicate we are sending data
     68e:	2200      	movs	r2, #0
     690:	f44f 6100 	mov.w	r1, #2048	; 0x800
     694:	482d      	ldr	r0, [pc, #180]	; (74c <synth_writereg+0xec>)
     696:	f001 fa83 	bl	1ba0 <__HAL_GPIO_WritePin_veneer>

	/* Clock in the data */
	for (uint32_t i = 0; i < SYNTH_SPI_BITS; i++) {
     69a:	2300      	movs	r3, #0
     69c:	623b      	str	r3, [r7, #32]
     69e:	e036      	b.n	70e <synth_writereg+0xae>

		/* Data written on the rising edge */
		uint32_t bit = (SYNTH_SPI_BITS - 1 - i);
     6a0:	2220      	movs	r2, #32
     6a2:	6a3b      	ldr	r3, [r7, #32]
     6a4:	1ad3      	subs	r3, r2, r3
     6a6:	3b01      	subs	r3, #1
     6a8:	617b      	str	r3, [r7, #20]
		HAL_GPIO_WritePin(MOSI_GPIO_Port, MOSI_Pin, !!(write_data & (1 << bit)));
     6aa:	2201      	movs	r2, #1
     6ac:	697b      	ldr	r3, [r7, #20]
     6ae:	fa02 f303 	lsl.w	r3, r2, r3
     6b2:	461a      	mov	r2, r3
     6b4:	69fb      	ldr	r3, [r7, #28]
     6b6:	4013      	ands	r3, r2
     6b8:	2b00      	cmp	r3, #0
     6ba:	bf14      	ite	ne
     6bc:	2301      	movne	r3, #1
     6be:	2300      	moveq	r3, #0
     6c0:	b2db      	uxtb	r3, r3
     6c2:	461a      	mov	r2, r3
     6c4:	f44f 7100 	mov.w	r1, #512	; 0x200
     6c8:	4820      	ldr	r0, [pc, #128]	; (74c <synth_writereg+0xec>)
     6ca:	f001 fa69 	bl	1ba0 <__HAL_GPIO_WritePin_veneer>
		HAL_GPIO_WritePin(SCLK_GPIO_Port, SCLK_Pin, 1);
     6ce:	2201      	movs	r2, #1
     6d0:	f44f 7180 	mov.w	r1, #256	; 0x100
     6d4:	481d      	ldr	r0, [pc, #116]	; (74c <synth_writereg+0xec>)
     6d6:	f001 fa63 	bl	1ba0 <__HAL_GPIO_WritePin_veneer>
		HAL_GPIO_WritePin(SCLK_GPIO_Port, SCLK_Pin, 0);
     6da:	2200      	movs	r2, #0
     6dc:	f44f 7180 	mov.w	r1, #256	; 0x100
     6e0:	481a      	ldr	r0, [pc, #104]	; (74c <synth_writereg+0xec>)
     6e2:	f001 fa5d 	bl	1ba0 <__HAL_GPIO_WritePin_veneer>

		/* Data read on the falling edge */
		read_data = read_data
				| (HAL_GPIO_ReadPin(MISO_GPIO_Port, MISO_Pin)
     6e6:	f44f 6180 	mov.w	r1, #1024	; 0x400
     6ea:	4818      	ldr	r0, [pc, #96]	; (74c <synth_writereg+0xec>)
     6ec:	f001 fa54 	bl	1b98 <__HAL_GPIO_ReadPin_veneer>
     6f0:	4603      	mov	r3, r0
     6f2:	4619      	mov	r1, r3
						<< (SYNTH_SPI_BITS - 1 - i));
     6f4:	2220      	movs	r2, #32
     6f6:	6a3b      	ldr	r3, [r7, #32]
     6f8:	1ad3      	subs	r3, r2, r3
     6fa:	3b01      	subs	r3, #1
     6fc:	fa01 f303 	lsl.w	r3, r1, r3
     700:	461a      	mov	r2, r3
		read_data = read_data
     702:	6a7b      	ldr	r3, [r7, #36]	; 0x24
     704:	4313      	orrs	r3, r2
     706:	627b      	str	r3, [r7, #36]	; 0x24
	for (uint32_t i = 0; i < SYNTH_SPI_BITS; i++) {
     708:	6a3b      	ldr	r3, [r7, #32]
     70a:	3301      	adds	r3, #1
     70c:	623b      	str	r3, [r7, #32]
     70e:	2220      	movs	r2, #32
     710:	6a3b      	ldr	r3, [r7, #32]
     712:	4293      	cmp	r3, r2
     714:	d3c4      	bcc.n	6a0 <synth_writereg+0x40>
	}

	HAL_GPIO_WritePin(SEN_GPIO_Port, SEN_Pin, 1); // Assert the SEN line to register the transmitted data
     716:	2201      	movs	r2, #1
     718:	f44f 6100 	mov.w	r1, #2048	; 0x800
     71c:	480b      	ldr	r0, [pc, #44]	; (74c <synth_writereg+0xec>)
     71e:	f001 fa3f 	bl	1ba0 <__HAL_GPIO_WritePin_veneer>

	if (verify) {
     722:	78fb      	ldrb	r3, [r7, #3]
     724:	2b00      	cmp	r3, #0
     726:	d00c      	beq.n	742 <synth_writereg+0xe2>
		const uint32_t verify_data = synth_readreg(reg_address); // Data returned on the second cycle
     728:	68b8      	ldr	r0, [r7, #8]
     72a:	f000 f813 	bl	754 <synth_readreg>
     72e:	61b8      	str	r0, [r7, #24]
		if (verify_data != data) {
     730:	69ba      	ldr	r2, [r7, #24]
     732:	68fb      	ldr	r3, [r7, #12]
     734:	429a      	cmp	r2, r3
     736:	d004      	beq.n	742 <synth_writereg+0xe2>
			printf("SPI transmission error!\n");
     738:	4805      	ldr	r0, [pc, #20]	; (750 <synth_writereg+0xf0>)
     73a:	f001 fa9d 	bl	1c78 <__puts_veneer>
			Error_Handler(); // We enter an infinite loop here
     73e:	f001 fa63 	bl	1c08 <__Error_Handler_veneer>
		}
	}

	return read_data;
     742:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
     744:	4618      	mov	r0, r3
     746:	3728      	adds	r7, #40	; 0x28
     748:	46bd      	mov	sp, r7
     74a:	bd80      	pop	{r7, pc}
     74c:	58020800 	.word	0x58020800
     750:	0801dc0c 	.word	0x0801dc0c

00000754 <synth_readreg>:
/**
  * @brief  Reads a register.
  * @param  Address
  * @retval Register contents
  */
static uint32_t synth_readreg(const uint32_t reg_address){
     754:	b580      	push	{r7, lr}
     756:	b084      	sub	sp, #16
     758:	af00      	add	r7, sp, #0
     75a:	6078      	str	r0, [r7, #4]

    synth_writereg(reg_address, 0x0, 0x0, DONT_VERIFY); // First cycle to send the read address
     75c:	2300      	movs	r3, #0
     75e:	2200      	movs	r2, #0
     760:	2100      	movs	r1, #0
     762:	6878      	ldr	r0, [r7, #4]
     764:	f7ff ff7c 	bl	660 <synth_writereg>
    const uint32_t read_data = synth_writereg(reg_address, 0x0, 0x0, DONT_VERIFY);  // Data returned on the second cycle
     768:	2300      	movs	r3, #0
     76a:	2200      	movs	r2, #0
     76c:	2100      	movs	r1, #0
     76e:	6878      	ldr	r0, [r7, #4]
     770:	f7ff ff76 	bl	660 <synth_writereg>
     774:	60f8      	str	r0, [r7, #12]

    return (read_data >> 8); // We only care about the first 24 bits returned.
     776:	68fb      	ldr	r3, [r7, #12]
     778:	0a1b      	lsrs	r3, r3, #8

}
     77a:	4618      	mov	r0, r3
     77c:	3710      	adds	r7, #16
     77e:	46bd      	mov	sp, r7
     780:	bd80      	pop	{r7, pc}

00000782 <set_MW_power>:
/**
  * @brief  Program LO2 output gain.
  * @param  MW power setting
  * @retval Success/fail
  */
uint32_t set_MW_power (const uint8_t mw_power) {
     782:	b580      	push	{r7, lr}
     784:	b084      	sub	sp, #16
     786:	af00      	add	r7, sp, #0
     788:	4603      	mov	r3, r0
     78a:	71fb      	strb	r3, [r7, #7]
	if (mw_power > 3) {//check that LO2GAIN is an integer from 0 to 3 inclusive
     78c:	79fb      	ldrb	r3, [r7, #7]
     78e:	2b03      	cmp	r3, #3
     790:	d904      	bls.n	79c <set_MW_power+0x1a>
		printf("illegal mw_power - must be an integer from 0 to 3!\n");
     792:	4811      	ldr	r0, [pc, #68]	; (7d8 <set_MW_power+0x56>)
     794:	f001 fa70 	bl	1c78 <__puts_veneer>
		Error_Handler(); // We enter an infinite loop here
     798:	f001 fa36 	bl	1c08 <__Error_Handler_veneer>
	}
	uint32_t read_data = synth_readreg(GAIN_DIVIDER_REGISTER); // Get the current value.
     79c:	2016      	movs	r0, #22
     79e:	f7ff ffd9 	bl	754 <synth_readreg>
     7a2:	60f8      	str	r0, [r7, #12]
	read_data &= 0xFFFFFCFF; 		// Zero bits 8:9.
     7a4:	68fb      	ldr	r3, [r7, #12]
     7a6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
     7aa:	60fb      	str	r3, [r7, #12]
	read_data |= (mw_power << 8);	// Set LO2GAIN value.
     7ac:	79fb      	ldrb	r3, [r7, #7]
     7ae:	021b      	lsls	r3, r3, #8
     7b0:	461a      	mov	r2, r3
     7b2:	68fb      	ldr	r3, [r7, #12]
     7b4:	4313      	orrs	r3, r2
     7b6:	60fb      	str	r3, [r7, #12]
	synth_writereg(read_data, GAIN_DIVIDER_REGISTER, 0x0, VERIFY); // Update the VCO divide register.
     7b8:	2301      	movs	r3, #1
     7ba:	2200      	movs	r2, #0
     7bc:	2116      	movs	r1, #22
     7be:	68f8      	ldr	r0, [r7, #12]
     7c0:	f7ff ff4e 	bl	660 <synth_writereg>
	#ifdef MW_VERBOSE
		printf("PROGRAMMED GAIN DIVIDER REGISTER: 0x%lX \r\n", read_data);
	#endif
	printf("LO2 gain setting: %u \r\n", mw_power);
     7c4:	79fb      	ldrb	r3, [r7, #7]
     7c6:	4619      	mov	r1, r3
     7c8:	4804      	ldr	r0, [pc, #16]	; (7dc <set_MW_power+0x5a>)
     7ca:	f001 f9d5 	bl	1b78 <__printf_veneer>
	return SUCCESS;
     7ce:	2300      	movs	r3, #0
}
     7d0:	4618      	mov	r0, r3
     7d2:	3710      	adds	r7, #16
     7d4:	46bd      	mov	sp, r7
     7d6:	bd80      	pop	{r7, pc}
     7d8:	0801dc24 	.word	0x0801dc24
     7dc:	0801dc58 	.word	0x0801dc58

000007e0 <init_synthesiser>:
/**
  * @brief  Initialises HMC835 synthesiser.
  * @param  MW power setting
  * @retval Success/fail
  */
uint32_t init_synthesiser(const uint8_t mw_power) {
     7e0:	b580      	push	{r7, lr}
     7e2:	b084      	sub	sp, #16
     7e4:	af00      	add	r7, sp, #0
     7e6:	4603      	mov	r3, r0
     7e8:	71fb      	strb	r3, [r7, #7]

	//Set pins to required initial conditions
	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET); // Turn off the amber lock LED
     7ea:	2200      	movs	r2, #0
     7ec:	2102      	movs	r1, #2
     7ee:	4856      	ldr	r0, [pc, #344]	; (948 <init_synthesiser+0x168>)
     7f0:	f001 f9d6 	bl	1ba0 <__HAL_GPIO_WritePin_veneer>
	HAL_GPIO_WritePin(SCOPE_TRIG_OUT_GPIO_Port, SCOPE_TRIG_OUT_Pin, GPIO_PIN_SET); // Sets trigger output high
     7f4:	2201      	movs	r2, #1
     7f6:	2101      	movs	r1, #1
     7f8:	4854      	ldr	r0, [pc, #336]	; (94c <init_synthesiser+0x16c>)
     7fa:	f001 f9d1 	bl	1ba0 <__HAL_GPIO_WritePin_veneer>
	HAL_GPIO_WritePin(SCLK_GPIO_Port, SCLK_Pin, 0);
     7fe:	2200      	movs	r2, #0
     800:	f44f 7180 	mov.w	r1, #256	; 0x100
     804:	4852      	ldr	r0, [pc, #328]	; (950 <init_synthesiser+0x170>)
     806:	f001 f9cb 	bl	1ba0 <__HAL_GPIO_WritePin_veneer>
	HAL_GPIO_WritePin(SEN_GPIO_Port, SEN_Pin, 1);
     80a:	2201      	movs	r2, #1
     80c:	f44f 6100 	mov.w	r1, #2048	; 0x800
     810:	484f      	ldr	r0, [pc, #316]	; (950 <init_synthesiser+0x170>)
     812:	f001 f9c5 	bl	1ba0 <__HAL_GPIO_WritePin_veneer>
	HAL_GPIO_WritePin(REG_EN_GPIO_Port, REG_EN_Pin, 1); // Enable the main regulator.
     816:	2201      	movs	r2, #1
     818:	f44f 5180 	mov.w	r1, #4096	; 0x1000
     81c:	484c      	ldr	r0, [pc, #304]	; (950 <init_synthesiser+0x170>)
     81e:	f001 f9bf 	bl	1ba0 <__HAL_GPIO_WritePin_veneer>

	HAL_Delay(100); // Wait 100 ms for the supply to stabilise.
     822:	2064      	movs	r0, #100	; 0x64
     824:	f001 f9d0 	bl	1bc8 <__HAL_Delay_veneer>

	synth_writereg(0x1UL << 5, OPEN_MODE_READ_ADDRESS, 0x0, DONT_VERIFY); // Soft reset.
     828:	2300      	movs	r3, #0
     82a:	2200      	movs	r2, #0
     82c:	2100      	movs	r1, #0
     82e:	2020      	movs	r0, #32
     830:	f7ff ff16 	bl	660 <synth_writereg>
	synth_writereg(0x41BFFF, ANALOG_EN_REGISTER, 0x0, VERIFY); // Set the SDO output level to 3.3 Volts
     834:	2301      	movs	r3, #1
     836:	2200      	movs	r2, #0
     838:	2108      	movs	r1, #8
     83a:	4846      	ldr	r0, [pc, #280]	; (954 <init_synthesiser+0x174>)
     83c:	f7ff ff10 	bl	660 <synth_writereg>

	uint32_t read_data = synth_readreg(ID_REGISTER); // Read the ID register to check the chip is communicating
     840:	2000      	movs	r0, #0
     842:	f7ff ff87 	bl	754 <synth_readreg>
     846:	60f8      	str	r0, [r7, #12]
	/* Check we have the correct ID */
	if (read_data != SYNTH_ID) {
     848:	4a43      	ldr	r2, [pc, #268]	; (958 <init_synthesiser+0x178>)
     84a:	68fb      	ldr	r3, [r7, #12]
     84c:	4293      	cmp	r3, r2
     84e:	d00a      	beq.n	866 <init_synthesiser+0x86>
		HAL_GPIO_WritePin(REG_EN_GPIO_Port, REG_EN_Pin, 0); // Disable the main regulator.
     850:	2200      	movs	r2, #0
     852:	f44f 5180 	mov.w	r1, #4096	; 0x1000
     856:	483e      	ldr	r0, [pc, #248]	; (950 <init_synthesiser+0x170>)
     858:	f001 f9a2 	bl	1ba0 <__HAL_GPIO_WritePin_veneer>
		printf("Incorrect synthesiser ID!\r\n");
     85c:	483f      	ldr	r0, [pc, #252]	; (95c <init_synthesiser+0x17c>)
     85e:	f001 fa0b 	bl	1c78 <__puts_veneer>
		return ERROR;
     862:	2301      	movs	r3, #1
     864:	e06b      	b.n	93e <init_synthesiser+0x15e>
	}

	/* Everything looks good, we can communicate with the chip :-) */
	printf("HMC835 Detected.\r\n");
     866:	483e      	ldr	r0, [pc, #248]	; (960 <init_synthesiser+0x180>)
     868:	f001 fa06 	bl	1c78 <__puts_veneer>

	/* Enables Single-Ended output mode for LO2 output */
	read_data = synth_readreg(MODES_REGISTER); // Get the current value of the modes register
     86c:	2017      	movs	r0, #23
     86e:	f7ff ff71 	bl	754 <synth_readreg>
     872:	60f8      	str	r0, [r7, #12]
#ifdef MW_VERBOSE
	printf("READ MODES REGISTER: 0x%lX \r\n", read_data);
#endif
	read_data |= (0x1UL << 9);     // Enable single ended output for LO2 (LO2_P)
     874:	68fb      	ldr	r3, [r7, #12]
     876:	f443 7300 	orr.w	r3, r3, #512	; 0x200
     87a:	60fb      	str	r3, [r7, #12]
	read_data  &= ~(!AUTO_MUTE << 7); //can disable auto_mute - see variable declarations
     87c:	2301      	movs	r3, #1
     87e:	f083 0301 	eor.w	r3, r3, #1
     882:	b2db      	uxtb	r3, r3
     884:	01db      	lsls	r3, r3, #7
     886:	43db      	mvns	r3, r3
     888:	461a      	mov	r2, r3
     88a:	68fb      	ldr	r3, [r7, #12]
     88c:	4013      	ands	r3, r2
     88e:	60fb      	str	r3, [r7, #12]
	synth_writereg(read_data, MODES_REGISTER, 0x0, VERIFY); // Send
     890:	2301      	movs	r3, #1
     892:	2200      	movs	r2, #0
     894:	2117      	movs	r1, #23
     896:	68f8      	ldr	r0, [r7, #12]
     898:	f7ff fee2 	bl	660 <synth_writereg>
	//read_data = synth_readreg(LOCK_DETECT_REGISTER); // Get the current value.
	//read_data &= 0xFFFFFFF8; // Zero the first 3 LSBs.
	//read_data |= 0x07;
	//synth_writereg(read_data, LOCK_DETECT_REGISTER, 0x0, VERIFY); // Update the VCO divide register.

	synth_writereg(1, REFDIV_REGISTER, 0x0, VERIFY); // Reference divider setting.
     89c:	2301      	movs	r3, #1
     89e:	2200      	movs	r2, #0
     8a0:	2102      	movs	r1, #2
     8a2:	2001      	movs	r0, #1
     8a4:	f7ff fedc 	bl	660 <synth_writereg>
	printf("PROGRAMMED DIVIDER REGISTER: 0x01 \r\n");
#endif

	/* Lock detect training: This must be done after any change to the PD
	 * reference frequency or after power cycle. */
	read_data = synth_readreg(LOCK_DETECT_REGISTER); // Get contents of lock detect register
     8a8:	2007      	movs	r0, #7
     8aa:	f7ff ff53 	bl	754 <synth_readreg>
     8ae:	60f8      	str	r0, [r7, #12]
#ifdef MW_VERBOSE
	printf("READ LOCK_DETECT_REGISTER: 0x%lX \r\n", read_data);
#endif
	read_data |= (0x1UL << 11);      // Enable lock-detect counters.
     8b0:	68fb      	ldr	r3, [r7, #12]
     8b2:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
     8b6:	60fb      	str	r3, [r7, #12]
	read_data |= (0x1UL << 14);      // Enable the lock-detect timer.
     8b8:	68fb      	ldr	r3, [r7, #12]
     8ba:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
     8be:	60fb      	str	r3, [r7, #12]
	read_data |= (0x1UL << 20);      // Train the lock-detect timer.
     8c0:	68fb      	ldr	r3, [r7, #12]
     8c2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
     8c6:	60fb      	str	r3, [r7, #12]
	synth_writereg(read_data, LOCK_DETECT_REGISTER, 0x0, VERIFY); // Send
     8c8:	2301      	movs	r3, #1
     8ca:	2200      	movs	r2, #0
     8cc:	2107      	movs	r1, #7
     8ce:	68f8      	ldr	r0, [r7, #12]
     8d0:	f7ff fec6 	bl	660 <synth_writereg>
#ifdef MW_VERBOSE
	printf("PROGRAMMED LOCK DETECT REGISTER: 0x%lX \r\n", read_data);
#endif
	HAL_Delay(10); // Wait 10 ms for training to complete, not sure if we really need to do this.
     8d4:	200a      	movs	r0, #10
     8d6:	f001 f977 	bl	1bc8 <__HAL_Delay_veneer>

	/* Program LO2 output gain */
	if (mw_power > 3) {//check that LO2GAIN is an integer from 0 to 3 inclusive
     8da:	79fb      	ldrb	r3, [r7, #7]
     8dc:	2b03      	cmp	r3, #3
     8de:	d904      	bls.n	8ea <init_synthesiser+0x10a>
		printf("illegal mw_power - must be an integer from 0 to 3!\n");
     8e0:	4820      	ldr	r0, [pc, #128]	; (964 <init_synthesiser+0x184>)
     8e2:	f001 f9c9 	bl	1c78 <__puts_veneer>
		Error_Handler();
     8e6:	f001 f98f 	bl	1c08 <__Error_Handler_veneer>
	}
	read_data = synth_readreg(GAIN_DIVIDER_REGISTER); // Get the current value.
     8ea:	2016      	movs	r0, #22
     8ec:	f7ff ff32 	bl	754 <synth_readreg>
     8f0:	60f8      	str	r0, [r7, #12]
	read_data &= 0xFFFFFCFF; 		// Zero bits 8:9.
     8f2:	68fb      	ldr	r3, [r7, #12]
     8f4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
     8f8:	60fb      	str	r3, [r7, #12]
	read_data |= (mw_power << 8);	// Set LO2GAIN value.
     8fa:	79fb      	ldrb	r3, [r7, #7]
     8fc:	021b      	lsls	r3, r3, #8
     8fe:	461a      	mov	r2, r3
     900:	68fb      	ldr	r3, [r7, #12]
     902:	4313      	orrs	r3, r2
     904:	60fb      	str	r3, [r7, #12]
	synth_writereg(read_data, GAIN_DIVIDER_REGISTER, 0x0, VERIFY); // Update the VCO divide register.
     906:	2301      	movs	r3, #1
     908:	2200      	movs	r2, #0
     90a:	2116      	movs	r1, #22
     90c:	68f8      	ldr	r0, [r7, #12]
     90e:	f7ff fea7 	bl	660 <synth_writereg>
	printf("PROGRAMMED GAIN DIVIDER REGISTER: 0x%lX \r\n", read_data);
	printf("LO2 gain setting: %u \r\n", mw_power);
#endif

	/* Sets output frequency to the hyperfine value */
	set_frequency_hz(HYPERFINE);
     912:	4b15      	ldr	r3, [pc, #84]	; (968 <init_synthesiser+0x188>)
     914:	ed93 7b00 	vldr	d7, [r3]
     918:	eeb0 0b47 	vmov.f64	d0, d7
     91c:	f000 f83f 	bl	99e <set_frequency_hz>
	//printf("Single frequency output: %f Hz \r\n", HYPERFINE);
	printf("Single frequency output: %.10g Hz \r\n", HYPERFINE);
     920:	4b11      	ldr	r3, [pc, #68]	; (968 <init_synthesiser+0x188>)
     922:	e9d3 2300 	ldrd	r2, r3, [r3]
     926:	4811      	ldr	r0, [pc, #68]	; (96c <init_synthesiser+0x18c>)
     928:	f001 f926 	bl	1b78 <__printf_veneer>
//	struct MW_struct *mw_sweep_settings = 0;  //create a structure to store the sweep settings
	mw_sweep_settings.state = MW_FIXED_FREQ;
     92c:	4b10      	ldr	r3, [pc, #64]	; (970 <init_synthesiser+0x190>)
     92e:	2201      	movs	r2, #1
     930:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(MW_INVALID_GPIO_Port, MW_INVALID_Pin, GPIO_PIN_RESET); // MW_invalid output low
     932:	2200      	movs	r2, #0
     934:	2102      	movs	r1, #2
     936:	480f      	ldr	r0, [pc, #60]	; (974 <init_synthesiser+0x194>)
     938:	f001 f932 	bl	1ba0 <__HAL_GPIO_WritePin_veneer>
	return SUCCESS;
     93c:	2300      	movs	r3, #0
}
     93e:	4618      	mov	r0, r3
     940:	3710      	adds	r7, #16
     942:	46bd      	mov	sp, r7
     944:	bd80      	pop	{r7, pc}
     946:	bf00      	nop
     948:	58021000 	.word	0x58021000
     94c:	58021800 	.word	0x58021800
     950:	58020800 	.word	0x58020800
     954:	0041bfff 	.word	0x0041bfff
     958:	00c7701a 	.word	0x00c7701a
     95c:	0801dc70 	.word	0x0801dc70
     960:	0801dc8c 	.word	0x0801dc8c
     964:	0801dc24 	.word	0x0801dc24
     968:	08020ce8 	.word	0x08020ce8
     96c:	0801dca0 	.word	0x0801dca0
     970:	20000718 	.word	0x20000718
     974:	58020400 	.word	0x58020400

00000978 <lock_status>:
/**
  * @brief  Checks for MW frequency lock
  * @param  None
  * @retval Lock status
  */
static const bool lock_status(void) {
     978:	b580      	push	{r7, lr}
     97a:	b082      	sub	sp, #8
     97c:	af00      	add	r7, sp, #0

	bool locked = synth_readreg(GPOLD_REGISTER) & (1UL << 1);
     97e:	2012      	movs	r0, #18
     980:	f7ff fee8 	bl	754 <synth_readreg>
     984:	4603      	mov	r3, r0
     986:	f003 0302 	and.w	r3, r3, #2
     98a:	2b00      	cmp	r3, #0
     98c:	bf14      	ite	ne
     98e:	2301      	movne	r3, #1
     990:	2300      	moveq	r3, #0
     992:	71fb      	strb	r3, [r7, #7]
	return locked;
     994:	79fb      	ldrb	r3, [r7, #7]

}
     996:	4618      	mov	r0, r3
     998:	3708      	adds	r7, #8
     99a:	46bd      	mov	sp, r7
     99c:	bd80      	pop	{r7, pc}

0000099e <set_frequency_hz>:
/**
  * @brief  Translate a frequency into register values for programming to HMC835
  * @param  Frequency
  * @retval None
  */
void set_frequency_hz(const double fo) {
     99e:	b580      	push	{r7, lr}
     9a0:	b088      	sub	sp, #32
     9a2:	af00      	add	r7, sp, #0
     9a4:	ed87 0b00 	vstr	d0, [r7]

#ifdef OPTIMISED_FOR_3_035GHZ_GENERATION
	/* Code optimisation for Generation of frequencies close to 3.035GHz
	 * k always equals 1
	 */
	uint32_t k = 1;
     9a8:	2301      	movs	r3, #1
     9aa:	61fb      	str	r3, [r7, #28]
		}
	}
#endif //OPTIMISED_FOR_3_035GHZ_GENERATION

	/* Calculate the N division ratio */
	const double N = ((fo * k) / REF_FREQ);
     9ac:	69fb      	ldr	r3, [r7, #28]
     9ae:	ee07 3a90 	vmov	s15, r3
     9b2:	eeb8 6b67 	vcvt.f64.u32	d6, s15
     9b6:	ed97 7b00 	vldr	d7, [r7]
     9ba:	ee26 6b07 	vmul.f64	d6, d6, d7
     9be:	ed9f 5b2a 	vldr	d5, [pc, #168]	; a68 <set_frequency_hz+0xca>
     9c2:	ee86 7b05 	vdiv.f64	d7, d6, d5
     9c6:	ed87 7b04 	vstr	d7, [r7, #16]

	/* Extract the fractional and integer parts */
	const uint32_t NINT = N;
     9ca:	ed97 7b04 	vldr	d7, [r7, #16]
     9ce:	eefc 7bc7 	vcvt.u32.f64	s15, d7
     9d2:	ee17 3a90 	vmov	r3, s15
     9d6:	60fb      	str	r3, [r7, #12]
	const uint32_t NFRAC = ((N - NINT) * (1 << 24)) + 0.5;
     9d8:	68fb      	ldr	r3, [r7, #12]
     9da:	ee07 3a90 	vmov	s15, r3
     9de:	eeb8 7b67 	vcvt.f64.u32	d7, s15
     9e2:	ed97 6b04 	vldr	d6, [r7, #16]
     9e6:	ee36 7b47 	vsub.f64	d7, d6, d7
     9ea:	ed9f 6b21 	vldr	d6, [pc, #132]	; a70 <set_frequency_hz+0xd2>
     9ee:	ee27 7b06 	vmul.f64	d7, d7, d6
     9f2:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
     9f6:	ee37 7b06 	vadd.f64	d7, d7, d6
     9fa:	eefc 7bc7 	vcvt.u32.f64	s15, d7
     9fe:	ee17 3a90 	vmov	r3, s15
     a02:	60bb      	str	r3, [r7, #8]
		printf("Failed to establish synthesiser frequency accurately\r\n");
		Error_Handler();
	}
#endif

	HAL_GPIO_WritePin(MW_INVALID_GPIO_Port, MW_INVALID_Pin, GPIO_PIN_SET); //Sets MW_invalid pin high
     a04:	2201      	movs	r2, #1
     a06:	2102      	movs	r1, #2
     a08:	481b      	ldr	r0, [pc, #108]	; (a78 <set_frequency_hz+0xda>)
     a0a:	f001 f8c9 	bl	1ba0 <__HAL_GPIO_WritePin_veneer>
	//set_frequency(NINT, NFRAC, k, MANUAL_MUTE); //Sets only the necessary Hittite registers
	set_freq_regs(NINT, NFRAC, k); //Sets only the necessary Hittite registers
     a0e:	69fa      	ldr	r2, [r7, #28]
     a10:	68b9      	ldr	r1, [r7, #8]
     a12:	68f8      	ldr	r0, [r7, #12]
     a14:	f000 f838 	bl	a88 <set_freq_regs>

	//MW stabilisation delay and check for lock
	timer_delay(MW_TIMER, MW_STABILISE_TIME_US);
     a18:	4b18      	ldr	r3, [pc, #96]	; (a7c <set_frequency_hz+0xde>)
     a1a:	681b      	ldr	r3, [r3, #0]
     a1c:	f241 3288 	movw	r2, #5000	; 0x1388
     a20:	4611      	mov	r1, r2
     a22:	4618      	mov	r0, r3
     a24:	f000 ffbe 	bl	19a4 <timer_delay>
	//if (!poll_until_locked(LOCK_WAIT_US)) {
	if (!lock_status()) {
     a28:	f7ff ffa6 	bl	978 <lock_status>
     a2c:	4603      	mov	r3, r0
     a2e:	f083 0301 	eor.w	r3, r3, #1
     a32:	b2db      	uxtb	r3, r3
     a34:	2b00      	cmp	r3, #0
     a36:	d011      	beq.n	a5c <set_frequency_hz+0xbe>
		HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET); //turn off amber LED
     a38:	2200      	movs	r2, #0
     a3a:	2102      	movs	r1, #2
     a3c:	4810      	ldr	r0, [pc, #64]	; (a80 <set_frequency_hz+0xe2>)
     a3e:	f001 f8af 	bl	1ba0 <__HAL_GPIO_WritePin_veneer>
		printf("Failed to establish MW Lock within %ld us of setting frequency!\r\n", MW_STABILISE_TIME_US);
     a42:	f241 3388 	movw	r3, #5000	; 0x1388
     a46:	4619      	mov	r1, r3
     a48:	480e      	ldr	r0, [pc, #56]	; (a84 <set_frequency_hz+0xe6>)
     a4a:	f001 f895 	bl	1b78 <__printf_veneer>
#ifdef HALT_ON_LOSS_OF_LOCK
		Error_Handler();
     a4e:	f001 f8db 	bl	1c08 <__Error_Handler_veneer>
#endif //HALT_ON_LOSS_OF_LOCK
		HAL_GPIO_WritePin(MW_INVALID_GPIO_Port, MW_INVALID_Pin, GPIO_PIN_RESET); //Sets MW_invalid pin low
     a52:	2200      	movs	r2, #0
     a54:	2102      	movs	r1, #2
     a56:	4808      	ldr	r0, [pc, #32]	; (a78 <set_frequency_hz+0xda>)
     a58:	f001 f8a2 	bl	1ba0 <__HAL_GPIO_WritePin_veneer>
	}

}
     a5c:	bf00      	nop
     a5e:	3720      	adds	r7, #32
     a60:	46bd      	mov	sp, r7
     a62:	bd80      	pop	{r7, pc}
     a64:	f3af 8000 	nop.w
     a68:	00000000 	.word	0x00000000
     a6c:	4187d784 	.word	0x4187d784
     a70:	00000000 	.word	0x00000000
     a74:	41700000 	.word	0x41700000
     a78:	58020400 	.word	0x58020400
     a7c:	20000128 	.word	0x20000128
     a80:	58021000 	.word	0x58021000
     a84:	0801dcc8 	.word	0x0801dcc8

00000a88 <set_freq_regs>:
static void set_freq_regs(const uint32_t integer, const uint32_t fraction, const uint32_t vco_divider) {
     a88:	b580      	push	{r7, lr}
     a8a:	b086      	sub	sp, #24
     a8c:	af00      	add	r7, sp, #0
     a8e:	60f8      	str	r0, [r7, #12]
     a90:	60b9      	str	r1, [r7, #8]
     a92:	607a      	str	r2, [r7, #4]
	uint32_t read_data = 0x0;
     a94:	2300      	movs	r3, #0
     a96:	617b      	str	r3, [r7, #20]
	if (last_vcodiv == -1 || (last_vcodiv != vco_divider)) {
     a98:	4b24      	ldr	r3, [pc, #144]	; (b2c <set_freq_regs+0xa4>)
     a9a:	681b      	ldr	r3, [r3, #0]
     a9c:	f1b3 3fff 	cmp.w	r3, #4294967295
     aa0:	d004      	beq.n	aac <set_freq_regs+0x24>
     aa2:	4b22      	ldr	r3, [pc, #136]	; (b2c <set_freq_regs+0xa4>)
     aa4:	681b      	ldr	r3, [r3, #0]
     aa6:	687a      	ldr	r2, [r7, #4]
     aa8:	429a      	cmp	r2, r3
     aaa:	d014      	beq.n	ad6 <set_freq_regs+0x4e>
		read_data = synth_readreg(GAIN_DIVIDER_REGISTER); // Get the current value.
     aac:	2016      	movs	r0, #22
     aae:	f7ff fe51 	bl	754 <synth_readreg>
     ab2:	6178      	str	r0, [r7, #20]
		read_data &= 0xFFFFFFC0; // Zero the first 6 LSBs (VCO division value - mute).
     ab4:	697b      	ldr	r3, [r7, #20]
     ab6:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
     aba:	617b      	str	r3, [r7, #20]
		read_data |= vco_divider; // This will set k which will un-mute the outputs */
     abc:	697a      	ldr	r2, [r7, #20]
     abe:	687b      	ldr	r3, [r7, #4]
     ac0:	4313      	orrs	r3, r2
     ac2:	617b      	str	r3, [r7, #20]
		synth_writereg(read_data, GAIN_DIVIDER_REGISTER, 0x0, VERIFY); // Update the VCO divide register.
     ac4:	2301      	movs	r3, #1
     ac6:	2200      	movs	r2, #0
     ac8:	2116      	movs	r1, #22
     aca:	6978      	ldr	r0, [r7, #20]
     acc:	f7ff fdc8 	bl	660 <synth_writereg>
		last_vcodiv = vco_divider;
     ad0:	4a16      	ldr	r2, [pc, #88]	; (b2c <set_freq_regs+0xa4>)
     ad2:	687b      	ldr	r3, [r7, #4]
     ad4:	6013      	str	r3, [r2, #0]
	if (last_integer == -1 || (last_integer != integer)) {
     ad6:	4b16      	ldr	r3, [pc, #88]	; (b30 <set_freq_regs+0xa8>)
     ad8:	681b      	ldr	r3, [r3, #0]
     ada:	f1b3 3fff 	cmp.w	r3, #4294967295
     ade:	d004      	beq.n	aea <set_freq_regs+0x62>
     ae0:	4b13      	ldr	r3, [pc, #76]	; (b30 <set_freq_regs+0xa8>)
     ae2:	681b      	ldr	r3, [r3, #0]
     ae4:	68fa      	ldr	r2, [r7, #12]
     ae6:	429a      	cmp	r2, r3
     ae8:	d008      	beq.n	afc <set_freq_regs+0x74>
		synth_writereg(integer, INTEGER_FREQUENCY_REGISTER, 0x0, VERIFY);   // Integer register.
     aea:	2301      	movs	r3, #1
     aec:	2200      	movs	r2, #0
     aee:	2103      	movs	r1, #3
     af0:	68f8      	ldr	r0, [r7, #12]
     af2:	f7ff fdb5 	bl	660 <synth_writereg>
		last_integer = integer;
     af6:	4a0e      	ldr	r2, [pc, #56]	; (b30 <set_freq_regs+0xa8>)
     af8:	68fb      	ldr	r3, [r7, #12]
     afa:	6013      	str	r3, [r2, #0]
	if (last_fraction == -1 || (last_fraction != fraction)) {
     afc:	4b0d      	ldr	r3, [pc, #52]	; (b34 <set_freq_regs+0xac>)
     afe:	681b      	ldr	r3, [r3, #0]
     b00:	f1b3 3fff 	cmp.w	r3, #4294967295
     b04:	d004      	beq.n	b10 <set_freq_regs+0x88>
     b06:	4b0b      	ldr	r3, [pc, #44]	; (b34 <set_freq_regs+0xac>)
     b08:	681b      	ldr	r3, [r3, #0]
     b0a:	68ba      	ldr	r2, [r7, #8]
     b0c:	429a      	cmp	r2, r3
     b0e:	d008      	beq.n	b22 <set_freq_regs+0x9a>
		synth_writereg(fraction, FRACTIONAL_FREQUENCY_REGISTER, 0x0, VERIFY);  // Fractional register.
     b10:	2301      	movs	r3, #1
     b12:	2200      	movs	r2, #0
     b14:	2104      	movs	r1, #4
     b16:	68b8      	ldr	r0, [r7, #8]
     b18:	f7ff fda2 	bl	660 <synth_writereg>
		last_fraction = fraction;
     b1c:	4a05      	ldr	r2, [pc, #20]	; (b34 <set_freq_regs+0xac>)
     b1e:	68bb      	ldr	r3, [r7, #8]
     b20:	6013      	str	r3, [r2, #0]
}
     b22:	bf00      	nop
     b24:	3718      	adds	r7, #24
     b26:	46bd      	mov	sp, r7
     b28:	bd80      	pop	{r7, pc}
     b2a:	bf00      	nop
     b2c:	20000110 	.word	0x20000110
     b30:	20000114 	.word	0x20000114
     b34:	20000118 	.word	0x20000118

00000b38 <print_mw_sweep_settings>:
/**
  * @brief  Print out the contents of the mw_sweep_settings structure
  * @param  None
  * @retval None
  */
  static void print_mw_sweep_settings (void) {
     b38:	b580      	push	{r7, lr}
     b3a:	af00      	add	r7, sp, #0
  	// Check that I've populated everything
    printf("state: %u \r\n", mw_sweep_settings.state);
     b3c:	4b34      	ldr	r3, [pc, #208]	; (c10 <print_mw_sweep_settings+0xd8>)
     b3e:	781b      	ldrb	r3, [r3, #0]
     b40:	4619      	mov	r1, r3
     b42:	4834      	ldr	r0, [pc, #208]	; (c14 <print_mw_sweep_settings+0xdc>)
     b44:	f001 f818 	bl	1b78 <__printf_veneer>
  	printf("k: %u \r\n", mw_sweep_settings.k);
     b48:	4b31      	ldr	r3, [pc, #196]	; (c10 <print_mw_sweep_settings+0xd8>)
     b4a:	785b      	ldrb	r3, [r3, #1]
     b4c:	4619      	mov	r1, r3
     b4e:	4832      	ldr	r0, [pc, #200]	; (c18 <print_mw_sweep_settings+0xe0>)
     b50:	f001 f812 	bl	1b78 <__printf_veneer>
  	printf("NINT: %lu \r\n", mw_sweep_settings.NINT);
     b54:	4b2e      	ldr	r3, [pc, #184]	; (c10 <print_mw_sweep_settings+0xd8>)
     b56:	685b      	ldr	r3, [r3, #4]
     b58:	4619      	mov	r1, r3
     b5a:	4830      	ldr	r0, [pc, #192]	; (c1c <print_mw_sweep_settings+0xe4>)
     b5c:	f001 f80c 	bl	1b78 <__printf_veneer>
  	printf("NFRAC_start: %lu \r\n", mw_sweep_settings.NFRAC_start);
     b60:	4b2b      	ldr	r3, [pc, #172]	; (c10 <print_mw_sweep_settings+0xd8>)
     b62:	689b      	ldr	r3, [r3, #8]
     b64:	4619      	mov	r1, r3
     b66:	482e      	ldr	r0, [pc, #184]	; (c20 <print_mw_sweep_settings+0xe8>)
     b68:	f001 f806 	bl	1b78 <__printf_veneer>
  	printf("num_steps: %lu \r\n", mw_sweep_settings.num_steps);
     b6c:	4b28      	ldr	r3, [pc, #160]	; (c10 <print_mw_sweep_settings+0xd8>)
     b6e:	68db      	ldr	r3, [r3, #12]
     b70:	4619      	mov	r1, r3
     b72:	482c      	ldr	r0, [pc, #176]	; (c24 <print_mw_sweep_settings+0xec>)
     b74:	f001 f800 	bl	1b78 <__printf_veneer>
  	printf("step_size: %lu \r\n", mw_sweep_settings.step_size);
     b78:	4b25      	ldr	r3, [pc, #148]	; (c10 <print_mw_sweep_settings+0xd8>)
     b7a:	691b      	ldr	r3, [r3, #16]
     b7c:	4619      	mov	r1, r3
     b7e:	482a      	ldr	r0, [pc, #168]	; (c28 <print_mw_sweep_settings+0xf0>)
     b80:	f000 fffa 	bl	1b78 <__printf_veneer>
  	printf("pop_cycles_per_point: %lu \r\n", mw_sweep_settings.pop_cycles_per_point);
     b84:	4b22      	ldr	r3, [pc, #136]	; (c10 <print_mw_sweep_settings+0xd8>)
     b86:	695b      	ldr	r3, [r3, #20]
     b88:	4619      	mov	r1, r3
     b8a:	4828      	ldr	r0, [pc, #160]	; (c2c <print_mw_sweep_settings+0xf4>)
     b8c:	f000 fff4 	bl	1b78 <__printf_veneer>
  	printf("stabilise_time: %lu us\r\n", mw_sweep_settings.stabilise_time);
     b90:	4b1f      	ldr	r3, [pc, #124]	; (c10 <print_mw_sweep_settings+0xd8>)
     b92:	699b      	ldr	r3, [r3, #24]
     b94:	4619      	mov	r1, r3
     b96:	4826      	ldr	r0, [pc, #152]	; (c30 <print_mw_sweep_settings+0xf8>)
     b98:	f000 ffee 	bl	1b78 <__printf_veneer>
  	printf("dwell_time: %lu us\r\n", mw_sweep_settings.dwell_time);
     b9c:	4b1c      	ldr	r3, [pc, #112]	; (c10 <print_mw_sweep_settings+0xd8>)
     b9e:	69db      	ldr	r3, [r3, #28]
     ba0:	4619      	mov	r1, r3
     ba2:	4824      	ldr	r0, [pc, #144]	; (c34 <print_mw_sweep_settings+0xfc>)
     ba4:	f000 ffe8 	bl	1b78 <__printf_veneer>
  	printf("MW_processing_time: %lu us\r\n", mw_sweep_settings.MW_processing_time);
     ba8:	4b19      	ldr	r3, [pc, #100]	; (c10 <print_mw_sweep_settings+0xd8>)
     baa:	6a1b      	ldr	r3, [r3, #32]
     bac:	4619      	mov	r1, r3
     bae:	4822      	ldr	r0, [pc, #136]	; (c38 <print_mw_sweep_settings+0x100>)
     bb0:	f000 ffe2 	bl	1b78 <__printf_veneer>
  	printf("current_point: %lu\r\n", mw_sweep_settings.current_point);
     bb4:	4b16      	ldr	r3, [pc, #88]	; (c10 <print_mw_sweep_settings+0xd8>)
     bb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
     bb8:	4619      	mov	r1, r3
     bba:	4820      	ldr	r0, [pc, #128]	; (c3c <print_mw_sweep_settings+0x104>)
     bbc:	f000 ffdc 	bl	1b78 <__printf_veneer>
  	printf("centre_freq: %f Hz\r\n", mw_sweep_settings.centre_freq);
     bc0:	4b13      	ldr	r3, [pc, #76]	; (c10 <print_mw_sweep_settings+0xd8>)
     bc2:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
     bc6:	481e      	ldr	r0, [pc, #120]	; (c40 <print_mw_sweep_settings+0x108>)
     bc8:	f000 ffd6 	bl	1b78 <__printf_veneer>
  	printf("span: %f Hz\r\n", mw_sweep_settings.span);
     bcc:	4b10      	ldr	r3, [pc, #64]	; (c10 <print_mw_sweep_settings+0xd8>)
     bce:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
     bd2:	481c      	ldr	r0, [pc, #112]	; (c44 <print_mw_sweep_settings+0x10c>)
     bd4:	f000 ffd0 	bl	1b78 <__printf_veneer>
  	printf("sweep_period: %f s\r\n", mw_sweep_settings.sweep_period);
     bd8:	4b0d      	ldr	r3, [pc, #52]	; (c10 <print_mw_sweep_settings+0xd8>)
     bda:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
     bde:	481a      	ldr	r0, [pc, #104]	; (c48 <print_mw_sweep_settings+0x110>)
     be0:	f000 ffca 	bl	1b78 <__printf_veneer>
    printf("sweep_type: %s \r\n", mw_sweep_settings.sweep_type ? "FIXED_TIME" : "FIXED_STEPS");
     be4:	4b0a      	ldr	r3, [pc, #40]	; (c10 <print_mw_sweep_settings+0xd8>)
     be6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
     bea:	2b00      	cmp	r3, #0
     bec:	d001      	beq.n	bf2 <print_mw_sweep_settings+0xba>
     bee:	4b17      	ldr	r3, [pc, #92]	; (c4c <print_mw_sweep_settings+0x114>)
     bf0:	e000      	b.n	bf4 <print_mw_sweep_settings+0xbc>
     bf2:	4b17      	ldr	r3, [pc, #92]	; (c50 <print_mw_sweep_settings+0x118>)
     bf4:	4619      	mov	r1, r3
     bf6:	4817      	ldr	r0, [pc, #92]	; (c54 <print_mw_sweep_settings+0x11c>)
     bf8:	f000 ffbe 	bl	1b78 <__printf_veneer>
    printf("sweep_mode: %d\r\n", mw_sweep_settings.sweep_mode);
     bfc:	4b04      	ldr	r3, [pc, #16]	; (c10 <print_mw_sweep_settings+0xd8>)
     bfe:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
     c02:	4619      	mov	r1, r3
     c04:	4814      	ldr	r0, [pc, #80]	; (c58 <print_mw_sweep_settings+0x120>)
     c06:	f000 ffb7 	bl	1b78 <__printf_veneer>
}
     c0a:	bf00      	nop
     c0c:	bd80      	pop	{r7, pc}
     c0e:	bf00      	nop
     c10:	20000718 	.word	0x20000718
     c14:	0801dd0c 	.word	0x0801dd0c
     c18:	0801dd1c 	.word	0x0801dd1c
     c1c:	0801dd28 	.word	0x0801dd28
     c20:	0801dd38 	.word	0x0801dd38
     c24:	0801dd4c 	.word	0x0801dd4c
     c28:	0801dd60 	.word	0x0801dd60
     c2c:	0801dd74 	.word	0x0801dd74
     c30:	0801dd94 	.word	0x0801dd94
     c34:	0801ddb0 	.word	0x0801ddb0
     c38:	0801ddc8 	.word	0x0801ddc8
     c3c:	0801dde8 	.word	0x0801dde8
     c40:	0801de00 	.word	0x0801de00
     c44:	0801de18 	.word	0x0801de18
     c48:	0801de28 	.word	0x0801de28
     c4c:	0801de40 	.word	0x0801de40
     c50:	0801de4c 	.word	0x0801de4c
     c54:	0801de58 	.word	0x0801de58
     c58:	0801de6c 	.word	0x0801de6c

00000c5c <calc_defined_step_MW_sweep>:
  * @param  POP cycles per point
  * @param  Number of points
  * @param	POP_period in us
  * @retval Success/failure or early termination
  */
bool calc_defined_step_MW_sweep(const double centre_freq, const double span, const uint32_t pop_cycles_per_point, const uint32_t num_points_req) {
     c5c:	b580      	push	{r7, lr}
     c5e:	b094      	sub	sp, #80	; 0x50
     c60:	af02      	add	r7, sp, #8
     c62:	ed87 0b04 	vstr	d0, [r7, #16]
     c66:	ed87 1b02 	vstr	d1, [r7, #8]
     c6a:	6078      	str	r0, [r7, #4]
     c6c:	6039      	str	r1, [r7, #0]
	printf("MW sweep will have %.10g GHz centre frequency with %.5g Hz span\r\n", centre_freq/1000000000, span);
     c6e:	ed97 7b04 	vldr	d7, [r7, #16]
     c72:	ed9f 6b8d 	vldr	d6, [pc, #564]	; ea8 <calc_defined_step_MW_sweep+0x24c>
     c76:	ee87 5b06 	vdiv.f64	d5, d7, d6
     c7a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
     c7e:	e9cd 2300 	strd	r2, r3, [sp]
     c82:	ec53 2b15 	vmov	r2, r3, d5
     c86:	4892      	ldr	r0, [pc, #584]	; (ed0 <calc_defined_step_MW_sweep+0x274>)
     c88:	f000 ff76 	bl	1b78 <__printf_veneer>
	printf("and %ld POP cycles per point\r\n", pop_cycles_per_point);
     c8c:	6879      	ldr	r1, [r7, #4]
     c8e:	4891      	ldr	r0, [pc, #580]	; (ed4 <calc_defined_step_MW_sweep+0x278>)
     c90:	f000 ff72 	bl	1b78 <__printf_veneer>
	mw_sweep_settings.sweep_type = FIXED_STEPS;
     c94:	4b90      	ldr	r3, [pc, #576]	; (ed8 <calc_defined_step_MW_sweep+0x27c>)
     c96:	2200      	movs	r2, #0
     c98:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
	mw_sweep_settings.pop_cycles_per_point = pop_cycles_per_point;
     c9c:	4a8e      	ldr	r2, [pc, #568]	; (ed8 <calc_defined_step_MW_sweep+0x27c>)
     c9e:	687b      	ldr	r3, [r7, #4]
     ca0:	6153      	str	r3, [r2, #20]
	mw_sweep_settings.centre_freq = centre_freq;
     ca2:	498d      	ldr	r1, [pc, #564]	; (ed8 <calc_defined_step_MW_sweep+0x27c>)
     ca4:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
     ca8:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
	mw_sweep_settings.span = span;
     cac:	498a      	ldr	r1, [pc, #552]	; (ed8 <calc_defined_step_MW_sweep+0x27c>)
     cae:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
     cb2:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30

	/* Calculate start frequency */
	double start_freq = centre_freq - 0.5* span;
     cb6:	ed97 7b02 	vldr	d7, [r7, #8]
     cba:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
     cbe:	ee27 7b06 	vmul.f64	d7, d7, d6
     cc2:	ed97 6b04 	vldr	d6, [r7, #16]
     cc6:	ee36 7b47 	vsub.f64	d7, d6, d7
     cca:	ed87 7b10 	vstr	d7, [r7, #64]	; 0x40
	mw_sweep_settings.k = calculate_k(start_freq);
     cce:	ed97 0b10 	vldr	d0, [r7, #64]	; 0x40
     cd2:	f000 fb1f 	bl	1314 <calculate_k>
     cd6:	4603      	mov	r3, r0
     cd8:	b2da      	uxtb	r2, r3
     cda:	4b7f      	ldr	r3, [pc, #508]	; (ed8 <calc_defined_step_MW_sweep+0x27c>)
     cdc:	705a      	strb	r2, [r3, #1]

	/* Extrapolate step size requested versus achievable  */
	const double step_size_Hz = span / (num_points_req - 1);
     cde:	683b      	ldr	r3, [r7, #0]
     ce0:	3b01      	subs	r3, #1
     ce2:	ee07 3a90 	vmov	s15, r3
     ce6:	eeb8 6b67 	vcvt.f64.u32	d6, s15
     cea:	ed97 5b02 	vldr	d5, [r7, #8]
     cee:	ee85 7b06 	vdiv.f64	d7, d5, d6
     cf2:	ed87 7b0e 	vstr	d7, [r7, #56]	; 0x38
	printf("Requested %ld steps, therefore step size of %.3g Hz\r\n", num_points_req, step_size_Hz);
     cf6:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
     cfa:	6839      	ldr	r1, [r7, #0]
     cfc:	4877      	ldr	r0, [pc, #476]	; (edc <calc_defined_step_MW_sweep+0x280>)
     cfe:	f000 ff3b 	bl	1b78 <__printf_veneer>
	const double unit_step_size_Hz = REF_FREQ / (double) (mw_sweep_settings.k * (1 << 24)); //minimum step size possible
     d02:	ed9f 5b6b 	vldr	d5, [pc, #428]	; eb0 <calc_defined_step_MW_sweep+0x254>
     d06:	4b74      	ldr	r3, [pc, #464]	; (ed8 <calc_defined_step_MW_sweep+0x27c>)
     d08:	785b      	ldrb	r3, [r3, #1]
     d0a:	061b      	lsls	r3, r3, #24
     d0c:	ee07 3a90 	vmov	s15, r3
     d10:	eeb8 6be7 	vcvt.f64.s32	d6, s15
     d14:	ee85 7b06 	vdiv.f64	d7, d5, d6
     d18:	ed87 7b0c 	vstr	d7, [r7, #48]	; 0x30
	//printf("Unit step size: %.3g Hz\r\n", unit_step_size_Hz);
	mw_sweep_settings.step_size = (step_size_Hz / unit_step_size_Hz + 0.5);
     d1c:	ed97 5b0e 	vldr	d5, [r7, #56]	; 0x38
     d20:	ed97 6b0c 	vldr	d6, [r7, #48]	; 0x30
     d24:	ee85 7b06 	vdiv.f64	d7, d5, d6
     d28:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
     d2c:	ee37 7b06 	vadd.f64	d7, d7, d6
     d30:	eefc 7bc7 	vcvt.u32.f64	s15, d7
     d34:	ee17 2a90 	vmov	r2, s15
     d38:	4b67      	ldr	r3, [pc, #412]	; (ed8 <calc_defined_step_MW_sweep+0x27c>)
     d3a:	611a      	str	r2, [r3, #16]
	if (!mw_sweep_settings.step_size) { //step_size must be a positive non-zero integer
     d3c:	4b66      	ldr	r3, [pc, #408]	; (ed8 <calc_defined_step_MW_sweep+0x27c>)
     d3e:	691b      	ldr	r3, [r3, #16]
     d40:	2b00      	cmp	r3, #0
     d42:	d104      	bne.n	d4e <calc_defined_step_MW_sweep+0xf2>
		mw_sweep_settings.step_size++;
     d44:	4b64      	ldr	r3, [pc, #400]	; (ed8 <calc_defined_step_MW_sweep+0x27c>)
     d46:	691b      	ldr	r3, [r3, #16]
     d48:	3301      	adds	r3, #1
     d4a:	4a63      	ldr	r2, [pc, #396]	; (ed8 <calc_defined_step_MW_sweep+0x27c>)
     d4c:	6113      	str	r3, [r2, #16]
	}
	const double achieved_step_size = (double) (mw_sweep_settings.step_size * unit_step_size_Hz);
     d4e:	4b62      	ldr	r3, [pc, #392]	; (ed8 <calc_defined_step_MW_sweep+0x27c>)
     d50:	691b      	ldr	r3, [r3, #16]
     d52:	ee07 3a90 	vmov	s15, r3
     d56:	eeb8 7b67 	vcvt.f64.u32	d7, s15
     d5a:	ed97 6b0c 	vldr	d6, [r7, #48]	; 0x30
     d5e:	ee26 7b07 	vmul.f64	d7, d6, d7
     d62:	ed87 7b0a 	vstr	d7, [r7, #40]	; 0x28
	printf("Step size achieved: %.3g Hz\r\n", achieved_step_size);
     d66:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
     d6a:	485d      	ldr	r0, [pc, #372]	; (ee0 <calc_defined_step_MW_sweep+0x284>)
     d6c:	f000 ff04 	bl	1b78 <__printf_veneer>
	mw_sweep_settings.num_steps = span / achieved_step_size;
     d70:	ed97 5b02 	vldr	d5, [r7, #8]
     d74:	ed97 6b0a 	vldr	d6, [r7, #40]	; 0x28
     d78:	ee85 7b06 	vdiv.f64	d7, d5, d6
     d7c:	eefc 7bc7 	vcvt.u32.f64	s15, d7
     d80:	ee17 2a90 	vmov	r2, s15
     d84:	4b54      	ldr	r3, [pc, #336]	; (ed8 <calc_defined_step_MW_sweep+0x27c>)
     d86:	60da      	str	r2, [r3, #12]

	/* Can avoid spurs if frequency requested can be encoded exactly  */
	start_freq = ((long)(start_freq/unit_step_size_Hz)) * unit_step_size_Hz;
     d88:	ed97 5b10 	vldr	d5, [r7, #64]	; 0x40
     d8c:	ed97 6b0c 	vldr	d6, [r7, #48]	; 0x30
     d90:	ee85 7b06 	vdiv.f64	d7, d5, d6
     d94:	eefd 7bc7 	vcvt.s32.f64	s15, d7
     d98:	eeb8 7be7 	vcvt.f64.s32	d7, s15
     d9c:	ed97 6b0c 	vldr	d6, [r7, #48]	; 0x30
     da0:	ee26 7b07 	vmul.f64	d7, d6, d7
     da4:	ed87 7b10 	vstr	d7, [r7, #64]	; 0x40

	/* Calculate the N division ratio, extracting the fractional and integer parts */
	const double N = ((start_freq * mw_sweep_settings.k) / REF_FREQ);
     da8:	4b4b      	ldr	r3, [pc, #300]	; (ed8 <calc_defined_step_MW_sweep+0x27c>)
     daa:	785b      	ldrb	r3, [r3, #1]
     dac:	ee07 3a90 	vmov	s15, r3
     db0:	eeb8 6be7 	vcvt.f64.s32	d6, s15
     db4:	ed97 7b10 	vldr	d7, [r7, #64]	; 0x40
     db8:	ee26 6b07 	vmul.f64	d6, d6, d7
     dbc:	ed9f 5b3c 	vldr	d5, [pc, #240]	; eb0 <calc_defined_step_MW_sweep+0x254>
     dc0:	ee86 7b05 	vdiv.f64	d7, d6, d5
     dc4:	ed87 7b08 	vstr	d7, [r7, #32]
	mw_sweep_settings.NINT = N;
     dc8:	ed97 7b08 	vldr	d7, [r7, #32]
     dcc:	eefc 7bc7 	vcvt.u32.f64	s15, d7
     dd0:	ee17 2a90 	vmov	r2, s15
     dd4:	4b40      	ldr	r3, [pc, #256]	; (ed8 <calc_defined_step_MW_sweep+0x27c>)
     dd6:	605a      	str	r2, [r3, #4]
	mw_sweep_settings.NFRAC_start = ((N - mw_sweep_settings.NINT) * (1 << 24)) + 0.5;
     dd8:	4b3f      	ldr	r3, [pc, #252]	; (ed8 <calc_defined_step_MW_sweep+0x27c>)
     dda:	685b      	ldr	r3, [r3, #4]
     ddc:	ee07 3a90 	vmov	s15, r3
     de0:	eeb8 7b67 	vcvt.f64.u32	d7, s15
     de4:	ed97 6b08 	vldr	d6, [r7, #32]
     de8:	ee36 7b47 	vsub.f64	d7, d6, d7
     dec:	ed9f 6b32 	vldr	d6, [pc, #200]	; eb8 <calc_defined_step_MW_sweep+0x25c>
     df0:	ee27 7b06 	vmul.f64	d7, d7, d6
     df4:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
     df8:	ee37 7b06 	vadd.f64	d7, d7, d6
     dfc:	eefc 7bc7 	vcvt.u32.f64	s15, d7
     e00:	ee17 2a90 	vmov	r2, s15
     e04:	4b34      	ldr	r3, [pc, #208]	; (ed8 <calc_defined_step_MW_sweep+0x27c>)
     e06:	609a      	str	r2, [r3, #8]

	/* Calculate dwell time at each MW frequency */
	mw_sweep_settings.stabilise_time = MW_STABILISE_TIME_US; //Global MW stabilisation time
     e08:	f241 3288 	movw	r2, #5000	; 0x1388
     e0c:	4b32      	ldr	r3, [pc, #200]	; (ed8 <calc_defined_step_MW_sweep+0x27c>)
     e0e:	619a      	str	r2, [r3, #24]
	mw_sweep_settings.dwell_time = pop_cycles_per_point * POP_period_us + TIMING_MARGIN_US;
     e10:	4b34      	ldr	r3, [pc, #208]	; (ee4 <calc_defined_step_MW_sweep+0x288>)
     e12:	681b      	ldr	r3, [r3, #0]
     e14:	687a      	ldr	r2, [r7, #4]
     e16:	fb02 f303 	mul.w	r3, r2, r3
     e1a:	2264      	movs	r2, #100	; 0x64
     e1c:	4413      	add	r3, r2
     e1e:	4a2e      	ldr	r2, [pc, #184]	; (ed8 <calc_defined_step_MW_sweep+0x27c>)
     e20:	61d3      	str	r3, [r2, #28]

	/* Calculate the period of a sweep */
	const double calc_sweep_time = (double)(MW_STABILISE_TIME_US + MW_PROCESSING_TIME_US + mw_sweep_settings.dwell_time) * (double)(mw_sweep_settings.num_steps+1)/1000000;
     e22:	f241 3288 	movw	r2, #5000	; 0x1388
     e26:	2301      	movs	r3, #1
     e28:	441a      	add	r2, r3
     e2a:	4b2b      	ldr	r3, [pc, #172]	; (ed8 <calc_defined_step_MW_sweep+0x27c>)
     e2c:	69db      	ldr	r3, [r3, #28]
     e2e:	4413      	add	r3, r2
     e30:	ee07 3a90 	vmov	s15, r3
     e34:	eeb8 6b67 	vcvt.f64.u32	d6, s15
     e38:	4b27      	ldr	r3, [pc, #156]	; (ed8 <calc_defined_step_MW_sweep+0x27c>)
     e3a:	68db      	ldr	r3, [r3, #12]
     e3c:	3301      	adds	r3, #1
     e3e:	ee07 3a90 	vmov	s15, r3
     e42:	eeb8 7b67 	vcvt.f64.u32	d7, s15
     e46:	ee26 6b07 	vmul.f64	d6, d6, d7
     e4a:	ed9f 5b1d 	vldr	d5, [pc, #116]	; ec0 <calc_defined_step_MW_sweep+0x264>
     e4e:	ee86 7b05 	vdiv.f64	d7, d6, d5
     e52:	ed87 7b06 	vstr	d7, [r7, #24]
	printf("Sweep period: %.3g s\r\n", calc_sweep_time);
     e56:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
     e5a:	4823      	ldr	r0, [pc, #140]	; (ee8 <calc_defined_step_MW_sweep+0x28c>)
     e5c:	f000 fe8c 	bl	1b78 <__printf_veneer>
	printf("%ld points, %.3g ms each\r\n", mw_sweep_settings.num_steps, 1000 * calc_sweep_time / (mw_sweep_settings.num_steps + 1));
     e60:	4b1d      	ldr	r3, [pc, #116]	; (ed8 <calc_defined_step_MW_sweep+0x27c>)
     e62:	68d9      	ldr	r1, [r3, #12]
     e64:	ed97 7b06 	vldr	d7, [r7, #24]
     e68:	ed9f 6b17 	vldr	d6, [pc, #92]	; ec8 <calc_defined_step_MW_sweep+0x26c>
     e6c:	ee27 6b06 	vmul.f64	d6, d7, d6
     e70:	4b19      	ldr	r3, [pc, #100]	; (ed8 <calc_defined_step_MW_sweep+0x27c>)
     e72:	68db      	ldr	r3, [r3, #12]
     e74:	3301      	adds	r3, #1
     e76:	ee07 3a90 	vmov	s15, r3
     e7a:	eeb8 7b67 	vcvt.f64.u32	d7, s15
     e7e:	ee86 5b07 	vdiv.f64	d5, d6, d7
     e82:	ec53 2b15 	vmov	r2, r3, d5
     e86:	4819      	ldr	r0, [pc, #100]	; (eec <calc_defined_step_MW_sweep+0x290>)
     e88:	f000 fe76 	bl	1b78 <__printf_veneer>

	mw_sweep_settings.current_point = 0;
     e8c:	4b12      	ldr	r3, [pc, #72]	; (ed8 <calc_defined_step_MW_sweep+0x27c>)
     e8e:	2200      	movs	r2, #0
     e90:	625a      	str	r2, [r3, #36]	; 0x24
	mw_sweep_settings.sweep_period = calc_sweep_time;
     e92:	4911      	ldr	r1, [pc, #68]	; (ed8 <calc_defined_step_MW_sweep+0x27c>)
     e94:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
     e98:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38

	//print_mw_sweep_settings();
	return(true);
     e9c:	2301      	movs	r3, #1
}
     e9e:	4618      	mov	r0, r3
     ea0:	3748      	adds	r7, #72	; 0x48
     ea2:	46bd      	mov	sp, r7
     ea4:	bd80      	pop	{r7, pc}
     ea6:	bf00      	nop
     ea8:	00000000 	.word	0x00000000
     eac:	41cdcd65 	.word	0x41cdcd65
     eb0:	00000000 	.word	0x00000000
     eb4:	4187d784 	.word	0x4187d784
     eb8:	00000000 	.word	0x00000000
     ebc:	41700000 	.word	0x41700000
     ec0:	00000000 	.word	0x00000000
     ec4:	412e8480 	.word	0x412e8480
     ec8:	00000000 	.word	0x00000000
     ecc:	408f4000 	.word	0x408f4000
     ed0:	0801de80 	.word	0x0801de80
     ed4:	0801dec4 	.word	0x0801dec4
     ed8:	20000718 	.word	0x20000718
     edc:	0801dee4 	.word	0x0801dee4
     ee0:	0801df1c 	.word	0x0801df1c
     ee4:	20000708 	.word	0x20000708
     ee8:	0801df3c 	.word	0x0801df3c
     eec:	0801df54 	.word	0x0801df54

00000ef0 <calc_fixed_time_MW_sweep>:
  * @param  Span in Hz
  * @param  Sweep period in s
  * @param  Additional time for scope sync
  * @retval Success/failure or early termination
  */
bool calc_fixed_time_MW_sweep(const double centre_freq, const double span, const double requested_sweep_period, const bool scope_sync_time) {
     ef0:	b580      	push	{r7, lr}
     ef2:	b09e      	sub	sp, #120	; 0x78
     ef4:	af04      	add	r7, sp, #16
     ef6:	ed87 0b06 	vstr	d0, [r7, #24]
     efa:	ed87 1b04 	vstr	d1, [r7, #16]
     efe:	ed87 2b02 	vstr	d2, [r7, #8]
     f02:	4603      	mov	r3, r0
     f04:	71fb      	strb	r3, [r7, #7]
	//Dwell time must be a minimum of one POP cycle
	//Overall dwell time should be at least 50% of sweep time
	//Number of points shall be maximised within the available time

	printf("MW sweep will have %.10g GHz centre frequency with %.5g Hz span, over %.3g s\r\n", centre_freq/1000000000, span, requested_sweep_period);
     f06:	ed97 7b06 	vldr	d7, [r7, #24]
     f0a:	ed9f 6b97 	vldr	d6, [pc, #604]	; 1168 <calc_fixed_time_MW_sweep+0x278>
     f0e:	ee87 5b06 	vdiv.f64	d5, d7, d6
     f12:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
     f16:	e9cd 2302 	strd	r2, r3, [sp, #8]
     f1a:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
     f1e:	e9cd 2300 	strd	r2, r3, [sp]
     f22:	ec53 2b15 	vmov	r2, r3, d5
     f26:	4898      	ldr	r0, [pc, #608]	; (1188 <calc_fixed_time_MW_sweep+0x298>)
     f28:	f000 fe26 	bl	1b78 <__printf_veneer>
	mw_sweep_settings.sweep_type = FIXED_TIME;
     f2c:	4b97      	ldr	r3, [pc, #604]	; (118c <calc_fixed_time_MW_sweep+0x29c>)
     f2e:	2201      	movs	r2, #1
     f30:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
	mw_sweep_settings.centre_freq = centre_freq;
     f34:	4995      	ldr	r1, [pc, #596]	; (118c <calc_fixed_time_MW_sweep+0x29c>)
     f36:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
     f3a:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
	mw_sweep_settings.span = span;
     f3e:	4993      	ldr	r1, [pc, #588]	; (118c <calc_fixed_time_MW_sweep+0x29c>)
     f40:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
     f44:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30

	mw_sweep_settings.dwell_time = POP_period_us + TIMING_MARGIN_US; //minimum possible value of dwell_time in us
     f48:	4b91      	ldr	r3, [pc, #580]	; (1190 <calc_fixed_time_MW_sweep+0x2a0>)
     f4a:	681b      	ldr	r3, [r3, #0]
     f4c:	2264      	movs	r2, #100	; 0x64
     f4e:	4413      	add	r3, r2
     f50:	4a8e      	ldr	r2, [pc, #568]	; (118c <calc_fixed_time_MW_sweep+0x29c>)
     f52:	61d3      	str	r3, [r2, #28]
	uint32_t point_time = MW_STABILISE_TIME_US + MW_PROCESSING_TIME_US + mw_sweep_settings.dwell_time; //minimum possible value in us
     f54:	f241 3288 	movw	r2, #5000	; 0x1388
     f58:	2301      	movs	r3, #1
     f5a:	441a      	add	r2, r3
     f5c:	4b8b      	ldr	r3, [pc, #556]	; (118c <calc_fixed_time_MW_sweep+0x29c>)
     f5e:	69db      	ldr	r3, [r3, #28]
     f60:	4413      	add	r3, r2
     f62:	65fb      	str	r3, [r7, #92]	; 0x5c
	uint32_t points_in_sweep = requested_sweep_period * (double)(1000000 / point_time); //maximum possible number of steps in sweep, rounded down to an integer
     f64:	4a8b      	ldr	r2, [pc, #556]	; (1194 <calc_fixed_time_MW_sweep+0x2a4>)
     f66:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
     f68:	fbb2 f3f3 	udiv	r3, r2, r3
     f6c:	ee07 3a90 	vmov	s15, r3
     f70:	eeb8 6b67 	vcvt.f64.u32	d6, s15
     f74:	ed97 7b02 	vldr	d7, [r7, #8]
     f78:	ee26 7b07 	vmul.f64	d7, d6, d7
     f7c:	eefc 7bc7 	vcvt.u32.f64	s15, d7
     f80:	ee17 3a90 	vmov	r3, s15
     f84:	65bb      	str	r3, [r7, #88]	; 0x58
	//printf("%lu points in sweep, maximum\r\n", points_in_sweep);

	/* now figure out the unit_step_size and how many steps will be taken in the span */

	/* Calculate start frequency */
	double start_freq = centre_freq - 0.5* span;
     f86:	ed97 7b04 	vldr	d7, [r7, #16]
     f8a:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
     f8e:	ee27 7b06 	vmul.f64	d7, d7, d6
     f92:	ed97 6b06 	vldr	d6, [r7, #24]
     f96:	ee36 7b47 	vsub.f64	d7, d6, d7
     f9a:	ed87 7b14 	vstr	d7, [r7, #80]	; 0x50
	mw_sweep_settings.k = calculate_k(start_freq);
     f9e:	ed97 0b14 	vldr	d0, [r7, #80]	; 0x50
     fa2:	f000 f9b7 	bl	1314 <calculate_k>
     fa6:	4603      	mov	r3, r0
     fa8:	b2da      	uxtb	r2, r3
     faa:	4b78      	ldr	r3, [pc, #480]	; (118c <calc_fixed_time_MW_sweep+0x29c>)
     fac:	705a      	strb	r2, [r3, #1]

	//steps should be evenly sized
	//selected step size should be an integer multiple of the unit step size
	//increase the step_size value until the sweep fits into the available period
	const double unit_step_size_Hz = REF_FREQ / (double) (mw_sweep_settings.k * (1 << 24)); //minimum step size possible
     fae:	ed9f 5b70 	vldr	d5, [pc, #448]	; 1170 <calc_fixed_time_MW_sweep+0x280>
     fb2:	4b76      	ldr	r3, [pc, #472]	; (118c <calc_fixed_time_MW_sweep+0x29c>)
     fb4:	785b      	ldrb	r3, [r3, #1]
     fb6:	061b      	lsls	r3, r3, #24
     fb8:	ee07 3a90 	vmov	s15, r3
     fbc:	eeb8 6be7 	vcvt.f64.s32	d6, s15
     fc0:	ee85 7b06 	vdiv.f64	d7, d5, d6
     fc4:	ed87 7b12 	vstr	d7, [r7, #72]	; 0x48
	//printf("Unit step size: %.3g Hz\r\n", unit_step_size_Hz);
	mw_sweep_settings.step_size = 1;
     fc8:	4b70      	ldr	r3, [pc, #448]	; (118c <calc_fixed_time_MW_sweep+0x29c>)
     fca:	2201      	movs	r2, #1
     fcc:	611a      	str	r2, [r3, #16]
	while ((mw_sweep_settings.step_size * points_in_sweep) < (span / unit_step_size_Hz)) {
     fce:	e004      	b.n	fda <calc_fixed_time_MW_sweep+0xea>
		mw_sweep_settings.step_size++;
     fd0:	4b6e      	ldr	r3, [pc, #440]	; (118c <calc_fixed_time_MW_sweep+0x29c>)
     fd2:	691b      	ldr	r3, [r3, #16]
     fd4:	3301      	adds	r3, #1
     fd6:	4a6d      	ldr	r2, [pc, #436]	; (118c <calc_fixed_time_MW_sweep+0x29c>)
     fd8:	6113      	str	r3, [r2, #16]
	while ((mw_sweep_settings.step_size * points_in_sweep) < (span / unit_step_size_Hz)) {
     fda:	4b6c      	ldr	r3, [pc, #432]	; (118c <calc_fixed_time_MW_sweep+0x29c>)
     fdc:	691b      	ldr	r3, [r3, #16]
     fde:	6dba      	ldr	r2, [r7, #88]	; 0x58
     fe0:	fb02 f303 	mul.w	r3, r2, r3
     fe4:	ee07 3a90 	vmov	s15, r3
     fe8:	eeb8 6b67 	vcvt.f64.u32	d6, s15
     fec:	ed97 4b04 	vldr	d4, [r7, #16]
     ff0:	ed97 5b12 	vldr	d5, [r7, #72]	; 0x48
     ff4:	ee84 7b05 	vdiv.f64	d7, d4, d5
     ff8:	eeb4 6bc7 	vcmpe.f64	d6, d7
     ffc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    1000:	d4e6      	bmi.n	fd0 <calc_fixed_time_MW_sweep+0xe0>
	}
	const double achieved_step_size = (double) (mw_sweep_settings.step_size * unit_step_size_Hz);
    1002:	4b62      	ldr	r3, [pc, #392]	; (118c <calc_fixed_time_MW_sweep+0x29c>)
    1004:	691b      	ldr	r3, [r3, #16]
    1006:	ee07 3a90 	vmov	s15, r3
    100a:	eeb8 7b67 	vcvt.f64.u32	d7, s15
    100e:	ed97 6b12 	vldr	d6, [r7, #72]	; 0x48
    1012:	ee26 7b07 	vmul.f64	d7, d6, d7
    1016:	ed87 7b10 	vstr	d7, [r7, #64]	; 0x40
	printf("Step size: %lu x unit step i.e. %.3g Hz\r\n", mw_sweep_settings.step_size, achieved_step_size);
    101a:	4b5c      	ldr	r3, [pc, #368]	; (118c <calc_fixed_time_MW_sweep+0x29c>)
    101c:	6919      	ldr	r1, [r3, #16]
    101e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
    1022:	485d      	ldr	r0, [pc, #372]	; (1198 <calc_fixed_time_MW_sweep+0x2a8>)
    1024:	f000 fda8 	bl	1b78 <__printf_veneer>

	//calculate number of steps in sweep and round down to an integer (must fit in time available)
	mw_sweep_settings.num_steps = (span / achieved_step_size);
    1028:	ed97 5b04 	vldr	d5, [r7, #16]
    102c:	ed97 6b10 	vldr	d6, [r7, #64]	; 0x40
    1030:	ee85 7b06 	vdiv.f64	d7, d5, d6
    1034:	eefc 7bc7 	vcvt.u32.f64	s15, d7
    1038:	ee17 2a90 	vmov	r2, s15
    103c:	4b53      	ldr	r3, [pc, #332]	; (118c <calc_fixed_time_MW_sweep+0x29c>)
    103e:	60da      	str	r2, [r3, #12]

	const uint32_t point_time_us = 1000000 * requested_sweep_period / (mw_sweep_settings.num_steps + 1); //period of each point in us
    1040:	ed97 7b02 	vldr	d7, [r7, #8]
    1044:	ed9f 6b4c 	vldr	d6, [pc, #304]	; 1178 <calc_fixed_time_MW_sweep+0x288>
    1048:	ee27 5b06 	vmul.f64	d5, d7, d6
    104c:	4b4f      	ldr	r3, [pc, #316]	; (118c <calc_fixed_time_MW_sweep+0x29c>)
    104e:	68db      	ldr	r3, [r3, #12]
    1050:	3301      	adds	r3, #1
    1052:	ee07 3a90 	vmov	s15, r3
    1056:	eeb8 6b67 	vcvt.f64.u32	d6, s15
    105a:	ee85 7b06 	vdiv.f64	d7, d5, d6
    105e:	eefc 7bc7 	vcvt.u32.f64	s15, d7
    1062:	ee17 3a90 	vmov	r3, s15
    1066:	63fb      	str	r3, [r7, #60]	; 0x3c
//	printf("DEBUG point_time_us: %lu \r\n", point_time_us);
//	printf("DEBUG sweep time in us: %lu \r\n", point_time_us * (mw_sweep_settings.num_steps + 1));
	mw_sweep_settings.pop_cycles_per_point = (point_time_us - MW_STABILISE_TIME_US - TIMING_MARGIN_US - MW_PROCESSING_TIME_US)/POP_period_us;
    1068:	f241 3288 	movw	r2, #5000	; 0x1388
    106c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    106e:	1a9b      	subs	r3, r3, r2
    1070:	2264      	movs	r2, #100	; 0x64
    1072:	1a9b      	subs	r3, r3, r2
    1074:	2201      	movs	r2, #1
    1076:	1a9a      	subs	r2, r3, r2
    1078:	4b45      	ldr	r3, [pc, #276]	; (1190 <calc_fixed_time_MW_sweep+0x2a0>)
    107a:	681b      	ldr	r3, [r3, #0]
    107c:	fbb2 f3f3 	udiv	r3, r2, r3
    1080:	4a42      	ldr	r2, [pc, #264]	; (118c <calc_fixed_time_MW_sweep+0x29c>)
    1082:	6153      	str	r3, [r2, #20]
	printf("%lu points in sweep, %lu ms and %lu POP cycles each\r\n", mw_sweep_settings.num_steps + 1, point_time_us / 1000, mw_sweep_settings.pop_cycles_per_point);
    1084:	4b41      	ldr	r3, [pc, #260]	; (118c <calc_fixed_time_MW_sweep+0x29c>)
    1086:	68db      	ldr	r3, [r3, #12]
    1088:	1c59      	adds	r1, r3, #1
    108a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    108c:	4a43      	ldr	r2, [pc, #268]	; (119c <calc_fixed_time_MW_sweep+0x2ac>)
    108e:	fba2 2303 	umull	r2, r3, r2, r3
    1092:	099a      	lsrs	r2, r3, #6
    1094:	4b3d      	ldr	r3, [pc, #244]	; (118c <calc_fixed_time_MW_sweep+0x29c>)
    1096:	695b      	ldr	r3, [r3, #20]
    1098:	4841      	ldr	r0, [pc, #260]	; (11a0 <calc_fixed_time_MW_sweep+0x2b0>)
    109a:	f000 fd6d 	bl	1b78 <__printf_veneer>
	uint32_t min_dwell_required_us = mw_sweep_settings.pop_cycles_per_point * POP_period_us + TIMING_MARGIN_US; //minimum dwell_time to achieve above
    109e:	4b3b      	ldr	r3, [pc, #236]	; (118c <calc_fixed_time_MW_sweep+0x29c>)
    10a0:	695b      	ldr	r3, [r3, #20]
    10a2:	4a3b      	ldr	r2, [pc, #236]	; (1190 <calc_fixed_time_MW_sweep+0x2a0>)
    10a4:	6812      	ldr	r2, [r2, #0]
    10a6:	fb02 f303 	mul.w	r3, r2, r3
    10aa:	2264      	movs	r2, #100	; 0x64
    10ac:	4413      	add	r3, r2
    10ae:	63bb      	str	r3, [r7, #56]	; 0x38
	mw_sweep_settings.dwell_time = point_time_us - MW_STABILISE_TIME_US - MW_PROCESSING_TIME_US; //actual programmed dwell time
    10b0:	f241 3288 	movw	r2, #5000	; 0x1388
    10b4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    10b6:	1a9b      	subs	r3, r3, r2
    10b8:	2201      	movs	r2, #1
    10ba:	1a9b      	subs	r3, r3, r2
    10bc:	4a33      	ldr	r2, [pc, #204]	; (118c <calc_fixed_time_MW_sweep+0x29c>)
    10be:	61d3      	str	r3, [r2, #28]
	if (mw_sweep_settings.dwell_time < min_dwell_required_us) {
    10c0:	4b32      	ldr	r3, [pc, #200]	; (118c <calc_fixed_time_MW_sweep+0x29c>)
    10c2:	69db      	ldr	r3, [r3, #28]
    10c4:	6bba      	ldr	r2, [r7, #56]	; 0x38
    10c6:	429a      	cmp	r2, r3
    10c8:	d902      	bls.n	10d0 <calc_fixed_time_MW_sweep+0x1e0>
		mw_sweep_settings.dwell_time = min_dwell_required_us;
    10ca:	4a30      	ldr	r2, [pc, #192]	; (118c <calc_fixed_time_MW_sweep+0x29c>)
    10cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    10ce:	61d3      	str	r3, [r2, #28]
	}
//	printf("DEBUG dwell_time: %lu \r\n", mw_sweep_settings.dwell_time);
//	printf("DEBUG sweep time in us: %lu \r\n", (mw_sweep_settings.dwell_time + MW_STABILISE_TIME_US + MW_PROCESSING_TIME_US) * (mw_sweep_settings.num_steps + 1));

	/* Double check - calculate the period of a sweep */
	double point_period = (double)(MW_STABILISE_TIME_US + MW_PROCESSING_TIME_US + mw_sweep_settings.dwell_time)/1000000;
    10d0:	f241 3288 	movw	r2, #5000	; 0x1388
    10d4:	2301      	movs	r3, #1
    10d6:	441a      	add	r2, r3
    10d8:	4b2c      	ldr	r3, [pc, #176]	; (118c <calc_fixed_time_MW_sweep+0x29c>)
    10da:	69db      	ldr	r3, [r3, #28]
    10dc:	4413      	add	r3, r2
    10de:	ee07 3a90 	vmov	s15, r3
    10e2:	eeb8 6b67 	vcvt.f64.u32	d6, s15
    10e6:	ed9f 5b24 	vldr	d5, [pc, #144]	; 1178 <calc_fixed_time_MW_sweep+0x288>
    10ea:	ee86 7b05 	vdiv.f64	d7, d6, d5
    10ee:	ed87 7b0c 	vstr	d7, [r7, #48]	; 0x30
//	printf("Point period %f\r\n", point_period);
	double calc_sweep_time = point_period * (mw_sweep_settings.num_steps + 1);
    10f2:	4b26      	ldr	r3, [pc, #152]	; (118c <calc_fixed_time_MW_sweep+0x29c>)
    10f4:	68db      	ldr	r3, [r3, #12]
    10f6:	3301      	adds	r3, #1
    10f8:	ee07 3a90 	vmov	s15, r3
    10fc:	eeb8 7b67 	vcvt.f64.u32	d7, s15
    1100:	ed97 6b0c 	vldr	d6, [r7, #48]	; 0x30
    1104:	ee26 7b07 	vmul.f64	d7, d6, d7
    1108:	ed87 7b18 	vstr	d7, [r7, #96]	; 0x60
//	printf("calc_sweep_time %f\r\n", calc_sweep_time);
	double min_sweep_time = (double)((min_dwell_required_us + MW_STABILISE_TIME_US + MW_PROCESSING_TIME_US) * (mw_sweep_settings.num_steps + 1)) / 1000000;
    110c:	f241 3288 	movw	r2, #5000	; 0x1388
    1110:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    1112:	4413      	add	r3, r2
    1114:	2201      	movs	r2, #1
    1116:	4413      	add	r3, r2
    1118:	4a1c      	ldr	r2, [pc, #112]	; (118c <calc_fixed_time_MW_sweep+0x29c>)
    111a:	68d2      	ldr	r2, [r2, #12]
    111c:	3201      	adds	r2, #1
    111e:	fb02 f303 	mul.w	r3, r2, r3
    1122:	ee07 3a90 	vmov	s15, r3
    1126:	eeb8 6b67 	vcvt.f64.u32	d6, s15
    112a:	ed9f 5b13 	vldr	d5, [pc, #76]	; 1178 <calc_fixed_time_MW_sweep+0x288>
    112e:	ee86 7b05 	vdiv.f64	d7, d6, d5
    1132:	ed87 7b0a 	vstr	d7, [r7, #40]	; 0x28
	if (calc_sweep_time/min_sweep_time > 1.02) {
    1136:	ed97 5b18 	vldr	d5, [r7, #96]	; 0x60
    113a:	ed97 6b0a 	vldr	d6, [r7, #40]	; 0x28
    113e:	ee85 7b06 	vdiv.f64	d7, d5, d6
    1142:	ed9f 6b0f 	vldr	d6, [pc, #60]	; 1180 <calc_fixed_time_MW_sweep+0x290>
    1146:	eeb4 7bc6 	vcmpe.f64	d7, d6
    114a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    114e:	dd2b      	ble.n	11a8 <calc_fixed_time_MW_sweep+0x2b8>
		printf("Sweep period %.4g s but could be reduced to %.4g s\r\n", calc_sweep_time, min_sweep_time);
    1150:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
    1154:	e9cd 2300 	strd	r2, r3, [sp]
    1158:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
    115c:	4811      	ldr	r0, [pc, #68]	; (11a4 <calc_fixed_time_MW_sweep+0x2b4>)
    115e:	f000 fd0b 	bl	1b78 <__printf_veneer>
    1162:	e029      	b.n	11b8 <calc_fixed_time_MW_sweep+0x2c8>
    1164:	f3af 8000 	nop.w
    1168:	00000000 	.word	0x00000000
    116c:	41cdcd65 	.word	0x41cdcd65
    1170:	00000000 	.word	0x00000000
    1174:	4187d784 	.word	0x4187d784
    1178:	00000000 	.word	0x00000000
    117c:	412e8480 	.word	0x412e8480
    1180:	851eb852 	.word	0x851eb852
    1184:	3ff051eb 	.word	0x3ff051eb
    1188:	0801df70 	.word	0x0801df70
    118c:	20000718 	.word	0x20000718
    1190:	20000708 	.word	0x20000708
    1194:	000f4240 	.word	0x000f4240
    1198:	0801dfc0 	.word	0x0801dfc0
    119c:	10624dd3 	.word	0x10624dd3
    11a0:	0801dfec 	.word	0x0801dfec
    11a4:	0801e024 	.word	0x0801e024
	} else {
		printf("Sweep period %.4g s is pretty much optimal for %lu POP samples per point\r\n", calc_sweep_time, mw_sweep_settings.pop_cycles_per_point);
    11a8:	4b57      	ldr	r3, [pc, #348]	; (1308 <calc_fixed_time_MW_sweep+0x418>)
    11aa:	695b      	ldr	r3, [r3, #20]
    11ac:	9300      	str	r3, [sp, #0]
    11ae:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
    11b2:	4856      	ldr	r0, [pc, #344]	; (130c <calc_fixed_time_MW_sweep+0x41c>)
    11b4:	f000 fce0 	bl	1b78 <__printf_veneer>

	//Period of MW sweep isn't precise as it's based on measured average processing time
	//Steps are increased by up to 10% to increase the sweep period to guarantee horizontal scope sync
	//These are added to the end of the sweep so that the centre frequency is still central
	//Sweep period will be increased by a maximum of 1s
	if (scope_sync_time) {
    11b8:	79fb      	ldrb	r3, [r7, #7]
    11ba:	2b00      	cmp	r3, #0
    11bc:	d044      	beq.n	1248 <calc_fixed_time_MW_sweep+0x358>

		mw_sweep_settings.num_steps = mw_sweep_settings.num_steps * 1.1 + 0.5;
    11be:	4b52      	ldr	r3, [pc, #328]	; (1308 <calc_fixed_time_MW_sweep+0x418>)
    11c0:	68db      	ldr	r3, [r3, #12]
    11c2:	ee07 3a90 	vmov	s15, r3
    11c6:	eeb8 7b67 	vcvt.f64.u32	d7, s15
    11ca:	ed9f 6b49 	vldr	d6, [pc, #292]	; 12f0 <calc_fixed_time_MW_sweep+0x400>
    11ce:	ee27 7b06 	vmul.f64	d7, d7, d6
    11d2:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
    11d6:	ee37 7b06 	vadd.f64	d7, d7, d6
    11da:	eefc 7bc7 	vcvt.u32.f64	s15, d7
    11de:	ee17 2a90 	vmov	r2, s15
    11e2:	4b49      	ldr	r3, [pc, #292]	; (1308 <calc_fixed_time_MW_sweep+0x418>)
    11e4:	60da      	str	r2, [r3, #12]
//		printf("DEBUG #steps: %lu \r\n", mw_sweep_settings.num_steps);
		calc_sweep_time = point_period * (mw_sweep_settings.num_steps + 1);
    11e6:	4b48      	ldr	r3, [pc, #288]	; (1308 <calc_fixed_time_MW_sweep+0x418>)
    11e8:	68db      	ldr	r3, [r3, #12]
    11ea:	3301      	adds	r3, #1
    11ec:	ee07 3a90 	vmov	s15, r3
    11f0:	eeb8 7b67 	vcvt.f64.u32	d7, s15
    11f4:	ed97 6b0c 	vldr	d6, [r7, #48]	; 0x30
    11f8:	ee26 7b07 	vmul.f64	d7, d6, d7
    11fc:	ed87 7b18 	vstr	d7, [r7, #96]	; 0x60

		/* Decrease number of steps if additional 10% is >1s */
//		printf("DEBUG calc_sweep_time - requested_sweep_period: %f \r\n", calc_sweep_time - requested_sweep_period);
		if ((calc_sweep_time - requested_sweep_period) > 1){
    1200:	ed97 6b18 	vldr	d6, [r7, #96]	; 0x60
    1204:	ed97 7b02 	vldr	d7, [r7, #8]
    1208:	ee36 7b47 	vsub.f64	d7, d6, d7
    120c:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
    1210:	eeb4 7bc6 	vcmpe.f64	d7, d6
    1214:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    1218:	dd11      	ble.n	123e <calc_fixed_time_MW_sweep+0x34e>
			mw_sweep_settings.num_steps--;
    121a:	4b3b      	ldr	r3, [pc, #236]	; (1308 <calc_fixed_time_MW_sweep+0x418>)
    121c:	68db      	ldr	r3, [r3, #12]
    121e:	3b01      	subs	r3, #1
    1220:	4a39      	ldr	r2, [pc, #228]	; (1308 <calc_fixed_time_MW_sweep+0x418>)
    1222:	60d3      	str	r3, [r2, #12]
			calc_sweep_time = point_period * (mw_sweep_settings.num_steps + 1);
    1224:	4b38      	ldr	r3, [pc, #224]	; (1308 <calc_fixed_time_MW_sweep+0x418>)
    1226:	68db      	ldr	r3, [r3, #12]
    1228:	3301      	adds	r3, #1
    122a:	ee07 3a90 	vmov	s15, r3
    122e:	eeb8 7b67 	vcvt.f64.u32	d7, s15
    1232:	ed97 6b0c 	vldr	d6, [r7, #48]	; 0x30
    1236:	ee26 7b07 	vmul.f64	d7, d6, d7
    123a:	ed87 7b18 	vstr	d7, [r7, #96]	; 0x60
		}
//		printf("DEBUG #steps: %lu \r\n", mw_sweep_settings.num_steps);

		//Double check of the sweep period selected
		printf("Final calculated sweep period, including scope sync: %.3g s\r\n", calc_sweep_time);
    123e:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
    1242:	4833      	ldr	r0, [pc, #204]	; (1310 <calc_fixed_time_MW_sweep+0x420>)
    1244:	f000 fc98 	bl	1b78 <__printf_veneer>
	}

	/* Can avoid spurs if frequency requested can be encoded exactly  */
	start_freq = ((long)(start_freq/unit_step_size_Hz)) * unit_step_size_Hz;
    1248:	ed97 5b14 	vldr	d5, [r7, #80]	; 0x50
    124c:	ed97 6b12 	vldr	d6, [r7, #72]	; 0x48
    1250:	ee85 7b06 	vdiv.f64	d7, d5, d6
    1254:	eefd 7bc7 	vcvt.s32.f64	s15, d7
    1258:	eeb8 7be7 	vcvt.f64.s32	d7, s15
    125c:	ed97 6b12 	vldr	d6, [r7, #72]	; 0x48
    1260:	ee26 7b07 	vmul.f64	d7, d6, d7
    1264:	ed87 7b14 	vstr	d7, [r7, #80]	; 0x50

	/* Calculate the N division ratio, extracting the fractional and integer parts */
	const double N = ((start_freq * mw_sweep_settings.k) / REF_FREQ);
    1268:	4b27      	ldr	r3, [pc, #156]	; (1308 <calc_fixed_time_MW_sweep+0x418>)
    126a:	785b      	ldrb	r3, [r3, #1]
    126c:	ee07 3a90 	vmov	s15, r3
    1270:	eeb8 6be7 	vcvt.f64.s32	d6, s15
    1274:	ed97 7b14 	vldr	d7, [r7, #80]	; 0x50
    1278:	ee26 6b07 	vmul.f64	d6, d6, d7
    127c:	ed9f 5b1e 	vldr	d5, [pc, #120]	; 12f8 <calc_fixed_time_MW_sweep+0x408>
    1280:	ee86 7b05 	vdiv.f64	d7, d6, d5
    1284:	ed87 7b08 	vstr	d7, [r7, #32]
	mw_sweep_settings.NINT = N;
    1288:	ed97 7b08 	vldr	d7, [r7, #32]
    128c:	eefc 7bc7 	vcvt.u32.f64	s15, d7
    1290:	ee17 2a90 	vmov	r2, s15
    1294:	4b1c      	ldr	r3, [pc, #112]	; (1308 <calc_fixed_time_MW_sweep+0x418>)
    1296:	605a      	str	r2, [r3, #4]
	mw_sweep_settings.NFRAC_start = ((N - mw_sweep_settings.NINT) * (1 << 24)) + 0.5;
    1298:	4b1b      	ldr	r3, [pc, #108]	; (1308 <calc_fixed_time_MW_sweep+0x418>)
    129a:	685b      	ldr	r3, [r3, #4]
    129c:	ee07 3a90 	vmov	s15, r3
    12a0:	eeb8 7b67 	vcvt.f64.u32	d7, s15
    12a4:	ed97 6b08 	vldr	d6, [r7, #32]
    12a8:	ee36 7b47 	vsub.f64	d7, d6, d7
    12ac:	ed9f 6b14 	vldr	d6, [pc, #80]	; 1300 <calc_fixed_time_MW_sweep+0x410>
    12b0:	ee27 7b06 	vmul.f64	d7, d7, d6
    12b4:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
    12b8:	ee37 7b06 	vadd.f64	d7, d7, d6
    12bc:	eefc 7bc7 	vcvt.u32.f64	s15, d7
    12c0:	ee17 2a90 	vmov	r2, s15
    12c4:	4b10      	ldr	r3, [pc, #64]	; (1308 <calc_fixed_time_MW_sweep+0x418>)
    12c6:	609a      	str	r2, [r3, #8]
	mw_sweep_settings.current_point = 0;
    12c8:	4b0f      	ldr	r3, [pc, #60]	; (1308 <calc_fixed_time_MW_sweep+0x418>)
    12ca:	2200      	movs	r2, #0
    12cc:	625a      	str	r2, [r3, #36]	; 0x24
	mw_sweep_settings.sweep_period = calc_sweep_time;
    12ce:	490e      	ldr	r1, [pc, #56]	; (1308 <calc_fixed_time_MW_sweep+0x418>)
    12d0:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
    12d4:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
	mw_sweep_settings.stabilise_time = MW_STABILISE_TIME_US; //Global MW stabilisation time
    12d8:	f241 3288 	movw	r2, #5000	; 0x1388
    12dc:	4b0a      	ldr	r3, [pc, #40]	; (1308 <calc_fixed_time_MW_sweep+0x418>)
    12de:	619a      	str	r2, [r3, #24]
//	print_mw_sweep_settings();
	return(true);
    12e0:	2301      	movs	r3, #1
}
    12e2:	4618      	mov	r0, r3
    12e4:	3768      	adds	r7, #104	; 0x68
    12e6:	46bd      	mov	sp, r7
    12e8:	bd80      	pop	{r7, pc}
    12ea:	bf00      	nop
    12ec:	f3af 8000 	nop.w
    12f0:	9999999a 	.word	0x9999999a
    12f4:	3ff19999 	.word	0x3ff19999
    12f8:	00000000 	.word	0x00000000
    12fc:	4187d784 	.word	0x4187d784
    1300:	00000000 	.word	0x00000000
    1304:	41700000 	.word	0x41700000
    1308:	20000718 	.word	0x20000718
    130c:	0801e05c 	.word	0x0801e05c
    1310:	0801e0a8 	.word	0x0801e0a8

00001314 <calculate_k>:

/**
  * @brief  Calculates k value
  * @retval k
  */
static const uint32_t calculate_k(const double frequency) {
    1314:	b480      	push	{r7}
    1316:	b085      	sub	sp, #20
    1318:	af00      	add	r7, sp, #0
    131a:	ed87 0b00 	vstr	d0, [r7]
	uint32_t k = VCO_MAX_FREQ / frequency;
    131e:	ed9f 5b10 	vldr	d5, [pc, #64]	; 1360 <calculate_k+0x4c>
    1322:	ed97 6b00 	vldr	d6, [r7]
    1326:	ee85 7b06 	vdiv.f64	d7, d5, d6
    132a:	eefc 7bc7 	vcvt.u32.f64	s15, d7
    132e:	ee17 3a90 	vmov	r3, s15
    1332:	60fb      	str	r3, [r7, #12]

	if (k != 1) {
    1334:	68fb      	ldr	r3, [r7, #12]
    1336:	2b01      	cmp	r3, #1
    1338:	d00b      	beq.n	1352 <calculate_k+0x3e>
		while (k > 62 || k % 2) {
    133a:	e002      	b.n	1342 <calculate_k+0x2e>
			k --;
    133c:	68fb      	ldr	r3, [r7, #12]
    133e:	3b01      	subs	r3, #1
    1340:	60fb      	str	r3, [r7, #12]
		while (k > 62 || k % 2) {
    1342:	68fb      	ldr	r3, [r7, #12]
    1344:	2b3e      	cmp	r3, #62	; 0x3e
    1346:	d8f9      	bhi.n	133c <calculate_k+0x28>
    1348:	68fb      	ldr	r3, [r7, #12]
    134a:	f003 0301 	and.w	r3, r3, #1
    134e:	2b00      	cmp	r3, #0
    1350:	d1f4      	bne.n	133c <calculate_k+0x28>
		}
	}
	return (k);
    1352:	68fb      	ldr	r3, [r7, #12]
}
    1354:	4618      	mov	r0, r3
    1356:	3714      	adds	r7, #20
    1358:	46bd      	mov	sp, r7
    135a:	f85d 7b04 	ldr.w	r7, [sp], #4
    135e:	4770      	bx	lr
    1360:	20000000 	.word	0x20000000
    1364:	41ee8c21 	.word	0x41ee8c21

00001368 <start_POP_calibration>:

/**
  * @brief  Starts the process of measuring the POP period
  * @retval None
  */
void start_POP_calibration(const bool cal_only) {
    1368:	b580      	push	{r7, lr}
    136a:	b082      	sub	sp, #8
    136c:	af00      	add	r7, sp, #0
    136e:	4603      	mov	r3, r0
    1370:	71fb      	strb	r3, [r7, #7]
	/* Requires ADC to be initialised and for HAL_ADC_ConvCpltCallback to be active */
	if (cal_only == true) {
    1372:	79fb      	ldrb	r3, [r7, #7]
    1374:	2b00      	cmp	r3, #0
    1376:	d003      	beq.n	1380 <start_POP_calibration+0x18>
		mw_sweep_settings.sweep_mode = POP_CAL_ONLY;
    1378:	4b0f      	ldr	r3, [pc, #60]	; (13b8 <start_POP_calibration+0x50>)
    137a:	2201      	movs	r2, #1
    137c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
	}
	HAL_GPIO_WritePin(MW_INVALID_GPIO_Port, MW_INVALID_Pin, GPIO_PIN_SET); 	//Sets MW_invalid pin high to reset POP cycle
    1380:	2201      	movs	r2, #1
    1382:	2102      	movs	r1, #2
    1384:	480d      	ldr	r0, [pc, #52]	; (13bc <start_POP_calibration+0x54>)
    1386:	f000 fc0b 	bl	1ba0 <__HAL_GPIO_WritePin_veneer>
	HAL_Delay(10); // 10ms in case ADC was part-way through a conversion
    138a:	200a      	movs	r0, #10
    138c:	f000 fc1c 	bl	1bc8 <__HAL_Delay_veneer>
	sample_count = 0; //reset sample count
    1390:	4b0b      	ldr	r3, [pc, #44]	; (13c0 <start_POP_calibration+0x58>)
    1392:	2200      	movs	r2, #0
    1394:	801a      	strh	r2, [r3, #0]
	mw_sweep_settings.state = MW_CALIBRATE;
    1396:	4b08      	ldr	r3, [pc, #32]	; (13b8 <start_POP_calibration+0x50>)
    1398:	2204      	movs	r2, #4
    139a:	701a      	strb	r2, [r3, #0]
	start_timer(MW_TIMER); //reset MW_timer and start counting
    139c:	4b09      	ldr	r3, [pc, #36]	; (13c4 <start_POP_calibration+0x5c>)
    139e:	681b      	ldr	r3, [r3, #0]
    13a0:	4618      	mov	r0, r3
    13a2:	f000 fac3 	bl	192c <start_timer>
	HAL_GPIO_WritePin(MW_INVALID_GPIO_Port, MW_INVALID_Pin, GPIO_PIN_RESET); //Restart POP cycle
    13a6:	2200      	movs	r2, #0
    13a8:	2102      	movs	r1, #2
    13aa:	4804      	ldr	r0, [pc, #16]	; (13bc <start_POP_calibration+0x54>)
    13ac:	f000 fbf8 	bl	1ba0 <__HAL_GPIO_WritePin_veneer>
	#ifdef MW_VERBOSE
		printf("POP calibration started\r\n");
	#endif //MW_VERBOSE
}
    13b0:	bf00      	nop
    13b2:	3708      	adds	r7, #8
    13b4:	46bd      	mov	sp, r7
    13b6:	bd80      	pop	{r7, pc}
    13b8:	20000718 	.word	0x20000718
    13bc:	58020400 	.word	0x58020400
    13c0:	20000706 	.word	0x20000706
    13c4:	20000128 	.word	0x20000128

000013c8 <start_MW_sweep>:

/**
  * @brief  Starts a MW sweep
  * @retval Success/failure
  */
static const bool start_MW_sweep(const bool single_sweep) {
    13c8:	b580      	push	{r7, lr}
    13ca:	b082      	sub	sp, #8
    13cc:	af00      	add	r7, sp, #0
    13ce:	4603      	mov	r3, r0
    13d0:	71fb      	strb	r3, [r7, #7]
	//uses settings from the mw_sweep_settings structure
	if (single_sweep == true) {
    13d2:	79fb      	ldrb	r3, [r7, #7]
    13d4:	2b00      	cmp	r3, #0
    13d6:	d003      	beq.n	13e0 <start_MW_sweep+0x18>
		mw_sweep_settings.sweep_mode = SWEEP_ONCE;
    13d8:	4b1c      	ldr	r3, [pc, #112]	; (144c <start_MW_sweep+0x84>)
    13da:	2202      	movs	r2, #2
    13dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
	}
	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET); // Assume MW lock, the LED will be disabled if lock fails.
    13e0:	2201      	movs	r2, #1
    13e2:	2102      	movs	r1, #2
    13e4:	481a      	ldr	r0, [pc, #104]	; (1450 <start_MW_sweep+0x88>)
    13e6:	f000 fbdb 	bl	1ba0 <__HAL_GPIO_WritePin_veneer>

	#ifdef MW_VERBOSE
		printf("Setting trigger output low \r\n");
	#endif //MW_VERBOSE

	HAL_GPIO_WritePin(MW_INVALID_GPIO_Port, MW_INVALID_Pin, GPIO_PIN_SET); //Sets MW_invalid pin high
    13ea:	2201      	movs	r2, #1
    13ec:	2102      	movs	r1, #2
    13ee:	4819      	ldr	r0, [pc, #100]	; (1454 <start_MW_sweep+0x8c>)
    13f0:	f000 fbd6 	bl	1ba0 <__HAL_GPIO_WritePin_veneer>
//	set_frequency(mw_sweep_settings.NINT, mw_sweep_settings.NFRAC_start, mw_sweep_settings.k, MANUAL_MUTE); //program initial MW frequency
	set_freq_regs(mw_sweep_settings.NINT, mw_sweep_settings.NFRAC_start, mw_sweep_settings.k); //program initial MW frequency
    13f4:	4b15      	ldr	r3, [pc, #84]	; (144c <start_MW_sweep+0x84>)
    13f6:	685b      	ldr	r3, [r3, #4]
    13f8:	4a14      	ldr	r2, [pc, #80]	; (144c <start_MW_sweep+0x84>)
    13fa:	6891      	ldr	r1, [r2, #8]
    13fc:	4a13      	ldr	r2, [pc, #76]	; (144c <start_MW_sweep+0x84>)
    13fe:	7852      	ldrb	r2, [r2, #1]
    1400:	4618      	mov	r0, r3
    1402:	f7ff fb41 	bl	a88 <set_freq_regs>
	mw_sweep_settings.state = MW_STABILISING; //waiting for MW output to stabilise
    1406:	4b11      	ldr	r3, [pc, #68]	; (144c <start_MW_sweep+0x84>)
    1408:	2202      	movs	r2, #2
    140a:	701a      	strb	r2, [r3, #0]
	mw_sweep_settings.current_point = 0; //currently on at start of ramp i.e. point 0
    140c:	4b0f      	ldr	r3, [pc, #60]	; (144c <start_MW_sweep+0x84>)
    140e:	2200      	movs	r2, #0
    1410:	625a      	str	r2, [r3, #36]	; 0x24
	HAL_Delay(10); // 10ms in case ADC was part-way through a conversion
    1412:	200a      	movs	r0, #10
    1414:	f000 fbd8 	bl	1bc8 <__HAL_Delay_veneer>
	sample_count = 0; //reset sample count
    1418:	4b0f      	ldr	r3, [pc, #60]	; (1458 <start_MW_sweep+0x90>)
    141a:	2200      	movs	r2, #0
    141c:	801a      	strh	r2, [r3, #0]
	/* Output used for triggering external scope */
	HAL_GPIO_WritePin(SCOPE_TRIG_OUT_GPIO_Port, SCOPE_TRIG_OUT_Pin, GPIO_PIN_RESET); // Sets trigger output low
    141e:	2200      	movs	r2, #0
    1420:	2101      	movs	r1, #1
    1422:	480e      	ldr	r0, [pc, #56]	; (145c <start_MW_sweep+0x94>)
    1424:	f000 fbbc 	bl	1ba0 <__HAL_GPIO_WritePin_veneer>
	start_timer(MW_TIMER); //reset MW_timer (MW step timer) and start counting
    1428:	4b0d      	ldr	r3, [pc, #52]	; (1460 <start_MW_sweep+0x98>)
    142a:	681b      	ldr	r3, [r3, #0]
    142c:	4618      	mov	r0, r3
    142e:	f000 fa7d 	bl	192c <start_timer>
	start_timer(SWEEP_TIMER); //reset general (sweep) timer and start counting
    1432:	4b0c      	ldr	r3, [pc, #48]	; (1464 <start_MW_sweep+0x9c>)
    1434:	681b      	ldr	r3, [r3, #0]
    1436:	4618      	mov	r0, r3
    1438:	f000 fa78 	bl	192c <start_timer>
	sample_count = 0; //reset sample count
    143c:	4b06      	ldr	r3, [pc, #24]	; (1458 <start_MW_sweep+0x90>)
    143e:	2200      	movs	r2, #0
    1440:	801a      	strh	r2, [r3, #0]
	//known limitation - if the ADC has been recently triggered and HAL_ADC_ConvCpltCallback will increment sample_count by 1
	return(true);
    1442:	2301      	movs	r3, #1
}
    1444:	4618      	mov	r0, r3
    1446:	3708      	adds	r7, #8
    1448:	46bd      	mov	sp, r7
    144a:	bd80      	pop	{r7, pc}
    144c:	20000718 	.word	0x20000718
    1450:	58021000 	.word	0x58021000
    1454:	58020400 	.word	0x58020400
    1458:	20000706 	.word	0x20000706
    145c:	58021800 	.word	0x58021800
    1460:	20000128 	.word	0x20000128
    1464:	2000012c 	.word	0x2000012c

00001468 <start_continuous_MW_sweep>:

/**
  * @brief  Starts a continuous MW calibrate/sweep cycle
  * @retval Success/failure
  */
void start_continuous_MW_sweep(void) {
    1468:	b580      	push	{r7, lr}
    146a:	af00      	add	r7, sp, #0
	mw_sweep_settings.sweep_mode = CONTINUOUS_SWEEP;
    146c:	4b04      	ldr	r3, [pc, #16]	; (1480 <start_continuous_MW_sweep+0x18>)
    146e:	2200      	movs	r2, #0
    1470:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
	start_POP_calibration(false);
    1474:	2000      	movs	r0, #0
    1476:	f7ff ff77 	bl	1368 <start_POP_calibration>
}
    147a:	bf00      	nop
    147c:	bd80      	pop	{r7, pc}
    147e:	bf00      	nop
    1480:	20000718 	.word	0x20000718

00001484 <MW_update>:

/**
  * @brief  Checks MW status to see if a timer has elapsed and if frequency needs changing.
  * @retval True if an action was taken
  */
const bool MW_update(void) {
    1484:	b580      	push	{r7, lr}
    1486:	b08a      	sub	sp, #40	; 0x28
    1488:	af04      	add	r7, sp, #16
	uint8_t local_copy_of_MW_state = mw_sweep_settings.state; //hack to make switch statement behave
    148a:	4b95      	ldr	r3, [pc, #596]	; (16e0 <MW_update+0x25c>)
    148c:	781b      	ldrb	r3, [r3, #0]
    148e:	75bb      	strb	r3, [r7, #22]
	//switch (mw_sweep_settings.state)
	bool action_taken = false;
    1490:	2300      	movs	r3, #0
    1492:	75fb      	strb	r3, [r7, #23]
	uint32_t sweep_period_us;
	switch (local_copy_of_MW_state)
    1494:	7dbb      	ldrb	r3, [r7, #22]
    1496:	2b04      	cmp	r3, #4
    1498:	f200 8109 	bhi.w	16ae <MW_update+0x22a>
    149c:	a201      	add	r2, pc, #4	; (adr r2, 14a4 <MW_update+0x20>)
    149e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    14a2:	bf00      	nop
    14a4:	000016c7 	.word	0x000016c7
    14a8:	000016c7 	.word	0x000016c7
    14ac:	000014b9 	.word	0x000014b9
    14b0:	000014fb 	.word	0x000014fb
    14b4:	0000163b 	.word	0x0000163b
		case MW_STOPPED:
		case MW_FIXED_FREQ:
			break; //no action to take

		case MW_STABILISING: //waiting for MW output to stabilise
			if (check_timer(MW_TIMER) < MW_STABILISE_TIME_US) return(false); //Still waiting, no action taken
    14b8:	4b8a      	ldr	r3, [pc, #552]	; (16e4 <MW_update+0x260>)
    14ba:	681b      	ldr	r3, [r3, #0]
    14bc:	4618      	mov	r0, r3
    14be:	f000 fa65 	bl	198c <check_timer>
    14c2:	4603      	mov	r3, r0
    14c4:	f241 3288 	movw	r2, #5000	; 0x1388
    14c8:	4293      	cmp	r3, r2
    14ca:	d201      	bcs.n	14d0 <MW_update+0x4c>
    14cc:	2300      	movs	r3, #0
    14ce:	e0fe      	b.n	16ce <MW_update+0x24a>
			//Otherwise MW stabilisation timer has elapsed
			stop_timer(MW_TIMER);
    14d0:	4b84      	ldr	r3, [pc, #528]	; (16e4 <MW_update+0x260>)
    14d2:	681b      	ldr	r3, [r3, #0]
    14d4:	4618      	mov	r0, r3
    14d6:	f000 fa47 	bl	1968 <stop_timer>
			HAL_GPIO_WritePin(MW_INVALID_GPIO_Port, MW_INVALID_Pin, GPIO_PIN_RESET); //Sets MW_invalid pin low as MW now stable
    14da:	2200      	movs	r2, #0
    14dc:	2102      	movs	r1, #2
    14de:	4882      	ldr	r0, [pc, #520]	; (16e8 <MW_update+0x264>)
    14e0:	f000 fb5e 	bl	1ba0 <__HAL_GPIO_WritePin_veneer>
			mw_sweep_settings.state = MW_DWELL;
    14e4:	4b7e      	ldr	r3, [pc, #504]	; (16e0 <MW_update+0x25c>)
    14e6:	2203      	movs	r2, #3
    14e8:	701a      	strb	r2, [r3, #0]
			start_timer(MW_TIMER); //Restart timer for DWELL time
    14ea:	4b7e      	ldr	r3, [pc, #504]	; (16e4 <MW_update+0x260>)
    14ec:	681b      	ldr	r3, [r3, #0]
    14ee:	4618      	mov	r0, r3
    14f0:	f000 fa1c 	bl	192c <start_timer>
			action_taken = true;
    14f4:	2301      	movs	r3, #1
    14f6:	75fb      	strb	r3, [r7, #23]
			break;
    14f8:	e0e8      	b.n	16cc <MW_update+0x248>

		case MW_DWELL: //valid MW output waiting for end of dwell time
			if (check_timer(MW_TIMER) < mw_sweep_settings.dwell_time) return(false); //Still waiting
    14fa:	4b7a      	ldr	r3, [pc, #488]	; (16e4 <MW_update+0x260>)
    14fc:	681b      	ldr	r3, [r3, #0]
    14fe:	4618      	mov	r0, r3
    1500:	f000 fa44 	bl	198c <check_timer>
    1504:	4602      	mov	r2, r0
    1506:	4b76      	ldr	r3, [pc, #472]	; (16e0 <MW_update+0x25c>)
    1508:	69db      	ldr	r3, [r3, #28]
    150a:	429a      	cmp	r2, r3
    150c:	d201      	bcs.n	1512 <MW_update+0x8e>
    150e:	2300      	movs	r3, #0
    1510:	e0dd      	b.n	16ce <MW_update+0x24a>
			//Otherwise dwell timer has elapsed
			action_taken = true;
    1512:	2301      	movs	r3, #1
    1514:	75fb      	strb	r3, [r7, #23]
			stop_timer(MW_TIMER);
    1516:	4b73      	ldr	r3, [pc, #460]	; (16e4 <MW_update+0x260>)
    1518:	681b      	ldr	r3, [r3, #0]
    151a:	4618      	mov	r0, r3
    151c:	f000 fa24 	bl	1968 <stop_timer>
			HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin); //toggles red LED
    1520:	f44f 4180 	mov.w	r1, #16384	; 0x4000
    1524:	4870      	ldr	r0, [pc, #448]	; (16e8 <MW_update+0x264>)
    1526:	f000 fb6b 	bl	1c00 <__HAL_GPIO_TogglePin_veneer>
			HAL_GPIO_WritePin(MW_INVALID_GPIO_Port, MW_INVALID_Pin, GPIO_PIN_SET); //Sets MW_invalid pin high as about to change frequency
    152a:	2201      	movs	r2, #1
    152c:	2102      	movs	r1, #2
    152e:	486e      	ldr	r0, [pc, #440]	; (16e8 <MW_update+0x264>)
    1530:	f000 fb36 	bl	1ba0 <__HAL_GPIO_WritePin_veneer>
			mw_sweep_settings.state = MW_STABILISING;
    1534:	4b6a      	ldr	r3, [pc, #424]	; (16e0 <MW_update+0x25c>)
    1536:	2202      	movs	r2, #2
    1538:	701a      	strb	r2, [r3, #0]
			if (mw_sweep_settings.current_point == mw_sweep_settings.num_steps) { // All steps completed, tidy up and restart next sweep
    153a:	4b69      	ldr	r3, [pc, #420]	; (16e0 <MW_update+0x25c>)
    153c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    153e:	4b68      	ldr	r3, [pc, #416]	; (16e0 <MW_update+0x25c>)
    1540:	68db      	ldr	r3, [r3, #12]
    1542:	429a      	cmp	r2, r3
    1544:	d15c      	bne.n	1600 <MW_update+0x17c>
				HAL_GPIO_WritePin(SCOPE_TRIG_OUT_GPIO_Port, SCOPE_TRIG_OUT_Pin, GPIO_PIN_SET); // Sets trigger output high
    1546:	2201      	movs	r2, #1
    1548:	2101      	movs	r1, #1
    154a:	4868      	ldr	r0, [pc, #416]	; (16ec <MW_update+0x268>)
    154c:	f000 fb28 	bl	1ba0 <__HAL_GPIO_WritePin_veneer>
				sweep_period_us=check_timer(SWEEP_TIMER);
    1550:	4b67      	ldr	r3, [pc, #412]	; (16f0 <MW_update+0x26c>)
    1552:	681b      	ldr	r3, [r3, #0]
    1554:	4618      	mov	r0, r3
    1556:	f000 fa19 	bl	198c <check_timer>
    155a:	60b8      	str	r0, [r7, #8]
				stop_timer(SWEEP_TIMER);
    155c:	4b64      	ldr	r3, [pc, #400]	; (16f0 <MW_update+0x26c>)
    155e:	681b      	ldr	r3, [r3, #0]
    1560:	4618      	mov	r0, r3
    1562:	f000 fa01 	bl	1968 <stop_timer>
				printf("Sweep complete in %.4g s. Expected %.4g s. %u samples\r\n", (double)(sweep_period_us)/1000000, mw_sweep_settings.sweep_period, sample_count);
    1566:	68bb      	ldr	r3, [r7, #8]
    1568:	ee07 3a90 	vmov	s15, r3
    156c:	eeb8 7b67 	vcvt.f64.u32	d7, s15
    1570:	ed9f 6b59 	vldr	d6, [pc, #356]	; 16d8 <MW_update+0x254>
    1574:	ee87 5b06 	vdiv.f64	d5, d7, d6
    1578:	4b59      	ldr	r3, [pc, #356]	; (16e0 <MW_update+0x25c>)
    157a:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
    157e:	495d      	ldr	r1, [pc, #372]	; (16f4 <MW_update+0x270>)
    1580:	8809      	ldrh	r1, [r1, #0]
    1582:	b289      	uxth	r1, r1
    1584:	9102      	str	r1, [sp, #8]
    1586:	e9cd 2300 	strd	r2, r3, [sp]
    158a:	ec53 2b15 	vmov	r2, r3, d5
    158e:	485a      	ldr	r0, [pc, #360]	; (16f8 <MW_update+0x274>)
    1590:	f000 faf2 	bl	1b78 <__printf_veneer>
				/* Check if the ADC registered the correct number of samples */
				uint16_t expected_samples = mw_sweep_settings.pop_cycles_per_point * (mw_sweep_settings.num_steps + 1);
    1594:	4b52      	ldr	r3, [pc, #328]	; (16e0 <MW_update+0x25c>)
    1596:	695b      	ldr	r3, [r3, #20]
    1598:	b29a      	uxth	r2, r3
    159a:	4b51      	ldr	r3, [pc, #324]	; (16e0 <MW_update+0x25c>)
    159c:	68db      	ldr	r3, [r3, #12]
    159e:	3301      	adds	r3, #1
    15a0:	b29b      	uxth	r3, r3
    15a2:	fb12 f303 	smulbb	r3, r2, r3
    15a6:	80fb      	strh	r3, [r7, #6]
				uint16_t possible_samples = expected_samples + mw_sweep_settings.num_steps + 1;
    15a8:	4b4d      	ldr	r3, [pc, #308]	; (16e0 <MW_update+0x25c>)
    15aa:	68db      	ldr	r3, [r3, #12]
    15ac:	b29a      	uxth	r2, r3
    15ae:	88fb      	ldrh	r3, [r7, #6]
    15b0:	4413      	add	r3, r2
    15b2:	b29b      	uxth	r3, r3
    15b4:	3301      	adds	r3, #1
    15b6:	80bb      	strh	r3, [r7, #4]
//				printf("Sweep generated %u full POP cycles and registered %u samples\r\n", expected_samples, sample_count);
				if ((sample_count == expected_samples) || (sample_count == possible_samples)) {
    15b8:	4b4e      	ldr	r3, [pc, #312]	; (16f4 <MW_update+0x270>)
    15ba:	881b      	ldrh	r3, [r3, #0]
    15bc:	b29b      	uxth	r3, r3
    15be:	88fa      	ldrh	r2, [r7, #6]
    15c0:	429a      	cmp	r2, r3
    15c2:	d010      	beq.n	15e6 <MW_update+0x162>
    15c4:	4b4b      	ldr	r3, [pc, #300]	; (16f4 <MW_update+0x270>)
    15c6:	881b      	ldrh	r3, [r3, #0]
    15c8:	b29b      	uxth	r3, r3
    15ca:	88ba      	ldrh	r2, [r7, #4]
    15cc:	429a      	cmp	r2, r3
    15ce:	d00a      	beq.n	15e6 <MW_update+0x162>
					#ifdef MW_VERBOSE
					printf("Sweep generated and successfully registered %u samples\r\n", sample_count);
					#endif //MW_VERBOSE
				} else {
					printf("Warning - sweep generated %u samples but %u registered\r\n", expected_samples, sample_count);
    15d0:	88fb      	ldrh	r3, [r7, #6]
    15d2:	4a48      	ldr	r2, [pc, #288]	; (16f4 <MW_update+0x270>)
    15d4:	8812      	ldrh	r2, [r2, #0]
    15d6:	b292      	uxth	r2, r2
    15d8:	4619      	mov	r1, r3
    15da:	4848      	ldr	r0, [pc, #288]	; (16fc <MW_update+0x278>)
    15dc:	f000 facc 	bl	1b78 <__printf_veneer>
					printf("Timing of last sample is marginal\r\n");
    15e0:	4847      	ldr	r0, [pc, #284]	; (1700 <MW_update+0x27c>)
    15e2:	f000 fb49 	bl	1c78 <__puts_veneer>
//				printf("MW processing time: %lu us\r\n", measured_processing_time_us);
//				if ((double)(measured_processing_time_us)/MW_PROCESSING_TIME_US > 1.1) {
//					printf("Warning - measured MW processing time (%lu us)is larger than the %lu us expected\r\n", measured_processing_time_us, MW_PROCESSING_TIME_US);
//				}
				#endif //MW_VERBOSE
				if (mw_sweep_settings.sweep_mode == SWEEP_ONCE) {//have reached the end of a single sweep and should stop
    15e6:	4b3e      	ldr	r3, [pc, #248]	; (16e0 <MW_update+0x25c>)
    15e8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
    15ec:	2b02      	cmp	r3, #2
    15ee:	d103      	bne.n	15f8 <MW_update+0x174>
					mw_sweep_settings.state = MW_STOPPED;
    15f0:	4b3b      	ldr	r3, [pc, #236]	; (16e0 <MW_update+0x25c>)
    15f2:	2200      	movs	r2, #0
    15f4:	701a      	strb	r2, [r3, #0]
						printf("Failure to program value to DAC \r\n");
						Error_Handler();
					}
				#endif //RAMP_DAC
			}
			break;
    15f6:	e069      	b.n	16cc <MW_update+0x248>
					start_MW_sweep(false); //restart the next MW sweep without updating mw_sweep_settings.sweep_mode
    15f8:	2000      	movs	r0, #0
    15fa:	f7ff fee5 	bl	13c8 <start_MW_sweep>
			break;
    15fe:	e065      	b.n	16cc <MW_update+0x248>
				mw_sweep_settings.current_point++; //increment point counter
    1600:	4b37      	ldr	r3, [pc, #220]	; (16e0 <MW_update+0x25c>)
    1602:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    1604:	3301      	adds	r3, #1
    1606:	4a36      	ldr	r2, [pc, #216]	; (16e0 <MW_update+0x25c>)
    1608:	6253      	str	r3, [r2, #36]	; 0x24
				uint32_t local_NFRAC = mw_sweep_settings.NFRAC_start + mw_sweep_settings.step_size * mw_sweep_settings.current_point;
    160a:	4b35      	ldr	r3, [pc, #212]	; (16e0 <MW_update+0x25c>)
    160c:	689a      	ldr	r2, [r3, #8]
    160e:	4b34      	ldr	r3, [pc, #208]	; (16e0 <MW_update+0x25c>)
    1610:	691b      	ldr	r3, [r3, #16]
    1612:	4933      	ldr	r1, [pc, #204]	; (16e0 <MW_update+0x25c>)
    1614:	6a49      	ldr	r1, [r1, #36]	; 0x24
    1616:	fb01 f303 	mul.w	r3, r1, r3
    161a:	4413      	add	r3, r2
    161c:	60fb      	str	r3, [r7, #12]
				set_freq_regs(mw_sweep_settings.NINT, local_NFRAC, mw_sweep_settings.k); //program new MW frequency
    161e:	4b30      	ldr	r3, [pc, #192]	; (16e0 <MW_update+0x25c>)
    1620:	685b      	ldr	r3, [r3, #4]
    1622:	4a2f      	ldr	r2, [pc, #188]	; (16e0 <MW_update+0x25c>)
    1624:	7852      	ldrb	r2, [r2, #1]
    1626:	68f9      	ldr	r1, [r7, #12]
    1628:	4618      	mov	r0, r3
    162a:	f7ff fa2d 	bl	a88 <set_freq_regs>
				start_timer(MW_TIMER); //Restart timer for MW stabilisation time
    162e:	4b2d      	ldr	r3, [pc, #180]	; (16e4 <MW_update+0x260>)
    1630:	681b      	ldr	r3, [r3, #0]
    1632:	4618      	mov	r0, r3
    1634:	f000 f97a 	bl	192c <start_timer>
			break;
    1638:	e048      	b.n	16cc <MW_update+0x248>

		case MW_CALIBRATE: //Measures the elapsed time taken for 101 samples (100 POP cycles)
			if (sample_count >= 100) {//100 or more POP cycles have elapsed
    163a:	4b2e      	ldr	r3, [pc, #184]	; (16f4 <MW_update+0x270>)
    163c:	881b      	ldrh	r3, [r3, #0]
    163e:	b29b      	uxth	r3, r3
    1640:	2b63      	cmp	r3, #99	; 0x63
    1642:	d942      	bls.n	16ca <MW_update+0x246>
				uint32_t total_POP_cal_period = check_timer(MW_TIMER);
    1644:	4b27      	ldr	r3, [pc, #156]	; (16e4 <MW_update+0x260>)
    1646:	681b      	ldr	r3, [r3, #0]
    1648:	4618      	mov	r0, r3
    164a:	f000 f99f 	bl	198c <check_timer>
    164e:	6138      	str	r0, [r7, #16]
				POP_period_us = (float)(total_POP_cal_period) / 100 + 0.5;
    1650:	693b      	ldr	r3, [r7, #16]
    1652:	ee07 3a90 	vmov	s15, r3
    1656:	eeb8 7a67 	vcvt.f32.u32	s14, s15
    165a:	eddf 6a2a 	vldr	s13, [pc, #168]	; 1704 <MW_update+0x280>
    165e:	eec7 7a26 	vdiv.f32	s15, s14, s13
    1662:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
    1666:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
    166a:	ee37 7b06 	vadd.f64	d7, d7, d6
    166e:	eefc 7bc7 	vcvt.u32.f64	s15, d7
    1672:	ee17 2a90 	vmov	r2, s15
    1676:	4b24      	ldr	r3, [pc, #144]	; (1708 <MW_update+0x284>)
    1678:	601a      	str	r2, [r3, #0]
				stop_timer(MW_TIMER);
    167a:	4b1a      	ldr	r3, [pc, #104]	; (16e4 <MW_update+0x260>)
    167c:	681b      	ldr	r3, [r3, #0]
    167e:	4618      	mov	r0, r3
    1680:	f000 f972 	bl	1968 <stop_timer>
				printf("POP period, averaged over 100 cycles: %lu us\r\n", POP_period_us);
    1684:	4b20      	ldr	r3, [pc, #128]	; (1708 <MW_update+0x284>)
    1686:	681b      	ldr	r3, [r3, #0]
    1688:	4619      	mov	r1, r3
    168a:	4820      	ldr	r0, [pc, #128]	; (170c <MW_update+0x288>)
    168c:	f000 fa74 	bl	1b78 <__printf_veneer>
				action_taken = true;
    1690:	2301      	movs	r3, #1
    1692:	75fb      	strb	r3, [r7, #23]
				if (mw_sweep_settings.sweep_mode == POP_CAL_ONLY) {//have reached the end of calibration and should stop
    1694:	4b12      	ldr	r3, [pc, #72]	; (16e0 <MW_update+0x25c>)
    1696:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
    169a:	2b01      	cmp	r3, #1
    169c:	d103      	bne.n	16a6 <MW_update+0x222>
					mw_sweep_settings.state = MW_STOPPED;
    169e:	4b10      	ldr	r3, [pc, #64]	; (16e0 <MW_update+0x25c>)
    16a0:	2200      	movs	r2, #0
    16a2:	701a      	strb	r2, [r3, #0]
				} else {
						start_MW_sweep(false); //start MW_sweep without updating mw_sweep_settings.sweep_mode
				}
			}
			break;
    16a4:	e011      	b.n	16ca <MW_update+0x246>
						start_MW_sweep(false); //start MW_sweep without updating mw_sweep_settings.sweep_mode
    16a6:	2000      	movs	r0, #0
    16a8:	f7ff fe8e 	bl	13c8 <start_MW_sweep>
			break;
    16ac:	e00d      	b.n	16ca <MW_update+0x246>

		default: // Other state
	       printf("MW_update has detected illegal state: %u \r\n", mw_sweep_settings.state);
    16ae:	4b0c      	ldr	r3, [pc, #48]	; (16e0 <MW_update+0x25c>)
    16b0:	781b      	ldrb	r3, [r3, #0]
    16b2:	4619      	mov	r1, r3
    16b4:	4816      	ldr	r0, [pc, #88]	; (1710 <MW_update+0x28c>)
    16b6:	f000 fa5f 	bl	1b78 <__printf_veneer>
	       printf("local version: %u \r\n", local_copy_of_MW_state);
    16ba:	7dbb      	ldrb	r3, [r7, #22]
    16bc:	4619      	mov	r1, r3
    16be:	4815      	ldr	r0, [pc, #84]	; (1714 <MW_update+0x290>)
    16c0:	f000 fa5a 	bl	1b78 <__printf_veneer>
    16c4:	e002      	b.n	16cc <MW_update+0x248>
			break; //no action to take
    16c6:	bf00      	nop
    16c8:	e000      	b.n	16cc <MW_update+0x248>
			break;
    16ca:	bf00      	nop
	}
    return(action_taken);
    16cc:	7dfb      	ldrb	r3, [r7, #23]
}
    16ce:	4618      	mov	r0, r3
    16d0:	3718      	adds	r7, #24
    16d2:	46bd      	mov	sp, r7
    16d4:	bd80      	pop	{r7, pc}
    16d6:	bf00      	nop
    16d8:	00000000 	.word	0x00000000
    16dc:	412e8480 	.word	0x412e8480
    16e0:	20000718 	.word	0x20000718
    16e4:	20000128 	.word	0x20000128
    16e8:	58020400 	.word	0x58020400
    16ec:	58021800 	.word	0x58021800
    16f0:	2000012c 	.word	0x2000012c
    16f4:	20000706 	.word	0x20000706
    16f8:	0801e0e8 	.word	0x0801e0e8
    16fc:	0801e120 	.word	0x0801e120
    1700:	0801e15c 	.word	0x0801e15c
    1704:	42c80000 	.word	0x42c80000
    1708:	20000708 	.word	0x20000708
    170c:	0801e180 	.word	0x0801e180
    1710:	0801e1b0 	.word	0x0801e1b0
    1714:	0801e1dc 	.word	0x0801e1dc

00001718 <MW_frequency_toggle>:
//}

/* Function to check MW settling time
 * Toggles between two MW frequencies
 */
void MW_frequency_toggle (const double f_one, const double f_two) {
    1718:	b580      	push	{r7, lr}
    171a:	b090      	sub	sp, #64	; 0x40
    171c:	af02      	add	r7, sp, #8
    171e:	ed87 0b02 	vstr	d0, [r7, #8]
    1722:	ed87 1b00 	vstr	d1, [r7]
	printf("MW frequency toggling experiment\r\n");
    1726:	486a      	ldr	r0, [pc, #424]	; (18d0 <MW_frequency_toggle+0x1b8>)
    1728:	f000 faa6 	bl	1c78 <__puts_veneer>
	printf("Toggling between %.10g and %.10g GHz\r\n", f_one/1000000000, f_two/1000000000);
    172c:	ed97 7b02 	vldr	d7, [r7, #8]
    1730:	ed9f 6b5f 	vldr	d6, [pc, #380]	; 18b0 <MW_frequency_toggle+0x198>
    1734:	ee87 4b06 	vdiv.f64	d4, d7, d6
    1738:	ed97 6b00 	vldr	d6, [r7]
    173c:	ed9f 5b5c 	vldr	d5, [pc, #368]	; 18b0 <MW_frequency_toggle+0x198>
    1740:	ee86 7b05 	vdiv.f64	d7, d6, d5
    1744:	ed8d 7b00 	vstr	d7, [sp]
    1748:	ec53 2b14 	vmov	r2, r3, d4
    174c:	4861      	ldr	r0, [pc, #388]	; (18d4 <MW_frequency_toggle+0x1bc>)
    174e:	f000 fa13 	bl	1b78 <__printf_veneer>

	/* For the k divider we need to find the smallest even integer or use a max of 62*/
	uint32_t k_one = VCO_MAX_FREQ / f_one;
    1752:	ed9f 5b59 	vldr	d5, [pc, #356]	; 18b8 <MW_frequency_toggle+0x1a0>
    1756:	ed97 6b02 	vldr	d6, [r7, #8]
    175a:	ee85 7b06 	vdiv.f64	d7, d5, d6
    175e:	eefc 7bc7 	vcvt.u32.f64	s15, d7
    1762:	ee17 3a90 	vmov	r3, s15
    1766:	637b      	str	r3, [r7, #52]	; 0x34
	if (k_one != 1) {
    1768:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    176a:	2b01      	cmp	r3, #1
    176c:	d00b      	beq.n	1786 <MW_frequency_toggle+0x6e>
		while (k_one > 62 || k_one % 2) {
    176e:	e002      	b.n	1776 <MW_frequency_toggle+0x5e>
			k_one--;
    1770:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    1772:	3b01      	subs	r3, #1
    1774:	637b      	str	r3, [r7, #52]	; 0x34
		while (k_one > 62 || k_one % 2) {
    1776:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    1778:	2b3e      	cmp	r3, #62	; 0x3e
    177a:	d8f9      	bhi.n	1770 <MW_frequency_toggle+0x58>
    177c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    177e:	f003 0301 	and.w	r3, r3, #1
    1782:	2b00      	cmp	r3, #0
    1784:	d1f4      	bne.n	1770 <MW_frequency_toggle+0x58>
		}
	}
	uint32_t k_two = VCO_MAX_FREQ / f_two;
    1786:	ed9f 5b4c 	vldr	d5, [pc, #304]	; 18b8 <MW_frequency_toggle+0x1a0>
    178a:	ed97 6b00 	vldr	d6, [r7]
    178e:	ee85 7b06 	vdiv.f64	d7, d5, d6
    1792:	eefc 7bc7 	vcvt.u32.f64	s15, d7
    1796:	ee17 3a90 	vmov	r3, s15
    179a:	633b      	str	r3, [r7, #48]	; 0x30
	if (k_two != 1) {
    179c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    179e:	2b01      	cmp	r3, #1
    17a0:	d00b      	beq.n	17ba <MW_frequency_toggle+0xa2>
		while (k_two > 62 || k_two % 2) {
    17a2:	e002      	b.n	17aa <MW_frequency_toggle+0x92>
			k_two--;
    17a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    17a6:	3b01      	subs	r3, #1
    17a8:	633b      	str	r3, [r7, #48]	; 0x30
		while (k_two > 62 || k_two % 2) {
    17aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    17ac:	2b3e      	cmp	r3, #62	; 0x3e
    17ae:	d8f9      	bhi.n	17a4 <MW_frequency_toggle+0x8c>
    17b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    17b2:	f003 0301 	and.w	r3, r3, #1
    17b6:	2b00      	cmp	r3, #0
    17b8:	d1f4      	bne.n	17a4 <MW_frequency_toggle+0x8c>
		}
	}

	const double N_one = ((f_one * k_one) / REF_FREQ);
    17ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    17bc:	ee07 3a90 	vmov	s15, r3
    17c0:	eeb8 6b67 	vcvt.f64.u32	d6, s15
    17c4:	ed97 7b02 	vldr	d7, [r7, #8]
    17c8:	ee26 6b07 	vmul.f64	d6, d6, d7
    17cc:	ed9f 5b3c 	vldr	d5, [pc, #240]	; 18c0 <MW_frequency_toggle+0x1a8>
    17d0:	ee86 7b05 	vdiv.f64	d7, d6, d5
    17d4:	ed87 7b0a 	vstr	d7, [r7, #40]	; 0x28
	const double N_two = ((f_two * k_two) / REF_FREQ);
    17d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    17da:	ee07 3a90 	vmov	s15, r3
    17de:	eeb8 6b67 	vcvt.f64.u32	d6, s15
    17e2:	ed97 7b00 	vldr	d7, [r7]
    17e6:	ee26 6b07 	vmul.f64	d6, d6, d7
    17ea:	ed9f 5b35 	vldr	d5, [pc, #212]	; 18c0 <MW_frequency_toggle+0x1a8>
    17ee:	ee86 7b05 	vdiv.f64	d7, d6, d5
    17f2:	ed87 7b08 	vstr	d7, [r7, #32]

	/* Extract the fractional and integer parts */
	const uint32_t N_one_INT = N_one;
    17f6:	ed97 7b0a 	vldr	d7, [r7, #40]	; 0x28
    17fa:	eefc 7bc7 	vcvt.u32.f64	s15, d7
    17fe:	ee17 3a90 	vmov	r3, s15
    1802:	61fb      	str	r3, [r7, #28]
	const uint32_t N_one_FRAC = ((N_one - N_one_INT) * (1 << 24)) + 0.5;
    1804:	69fb      	ldr	r3, [r7, #28]
    1806:	ee07 3a90 	vmov	s15, r3
    180a:	eeb8 7b67 	vcvt.f64.u32	d7, s15
    180e:	ed97 6b0a 	vldr	d6, [r7, #40]	; 0x28
    1812:	ee36 7b47 	vsub.f64	d7, d6, d7
    1816:	ed9f 6b2c 	vldr	d6, [pc, #176]	; 18c8 <MW_frequency_toggle+0x1b0>
    181a:	ee27 7b06 	vmul.f64	d7, d7, d6
    181e:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
    1822:	ee37 7b06 	vadd.f64	d7, d7, d6
    1826:	eefc 7bc7 	vcvt.u32.f64	s15, d7
    182a:	ee17 3a90 	vmov	r3, s15
    182e:	61bb      	str	r3, [r7, #24]
	const uint32_t N_two_INT = N_two;
    1830:	ed97 7b08 	vldr	d7, [r7, #32]
    1834:	eefc 7bc7 	vcvt.u32.f64	s15, d7
    1838:	ee17 3a90 	vmov	r3, s15
    183c:	617b      	str	r3, [r7, #20]
	const uint32_t N_two_FRAC = ((N_two - N_two_INT) * (1 << 24)) + 0.5;
    183e:	697b      	ldr	r3, [r7, #20]
    1840:	ee07 3a90 	vmov	s15, r3
    1844:	eeb8 7b67 	vcvt.f64.u32	d7, s15
    1848:	ed97 6b08 	vldr	d6, [r7, #32]
    184c:	ee36 7b47 	vsub.f64	d7, d6, d7
    1850:	ed9f 6b1d 	vldr	d6, [pc, #116]	; 18c8 <MW_frequency_toggle+0x1b0>
    1854:	ee27 7b06 	vmul.f64	d7, d7, d6
    1858:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
    185c:	ee37 7b06 	vadd.f64	d7, d7, d6
    1860:	eefc 7bc7 	vcvt.u32.f64	s15, d7
    1864:	ee17 3a90 	vmov	r3, s15
    1868:	613b      	str	r3, [r7, #16]

	while (1) {
	set_freq_regs(N_one_INT, N_one_FRAC, k_one); //Program necessary values for f_one
    186a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    186c:	69b9      	ldr	r1, [r7, #24]
    186e:	69f8      	ldr	r0, [r7, #28]
    1870:	f7ff f90a 	bl	a88 <set_freq_regs>
	HAL_GPIO_WritePin(SCOPE_TRIG_OUT_GPIO_Port, SCOPE_TRIG_OUT_Pin, GPIO_PIN_RESET); // Sets trigger output low
    1874:	2200      	movs	r2, #0
    1876:	2101      	movs	r1, #1
    1878:	4817      	ldr	r0, [pc, #92]	; (18d8 <MW_frequency_toggle+0x1c0>)
    187a:	f000 f991 	bl	1ba0 <__HAL_GPIO_WritePin_veneer>
	timer_delay(SLOW_TIMER, 100); //10ms delay
    187e:	4b17      	ldr	r3, [pc, #92]	; (18dc <MW_frequency_toggle+0x1c4>)
    1880:	681b      	ldr	r3, [r3, #0]
    1882:	2164      	movs	r1, #100	; 0x64
    1884:	4618      	mov	r0, r3
    1886:	f000 f88d 	bl	19a4 <timer_delay>
	set_freq_regs(N_two_INT, N_two_FRAC, k_two); //Program necessary values for f_two
    188a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    188c:	6939      	ldr	r1, [r7, #16]
    188e:	6978      	ldr	r0, [r7, #20]
    1890:	f7ff f8fa 	bl	a88 <set_freq_regs>
	HAL_GPIO_WritePin(SCOPE_TRIG_OUT_GPIO_Port, SCOPE_TRIG_OUT_Pin, GPIO_PIN_SET); // Sets trigger output high
    1894:	2201      	movs	r2, #1
    1896:	2101      	movs	r1, #1
    1898:	480f      	ldr	r0, [pc, #60]	; (18d8 <MW_frequency_toggle+0x1c0>)
    189a:	f000 f981 	bl	1ba0 <__HAL_GPIO_WritePin_veneer>
	timer_delay(SLOW_TIMER, 100); //10ms delay
    189e:	4b0f      	ldr	r3, [pc, #60]	; (18dc <MW_frequency_toggle+0x1c4>)
    18a0:	681b      	ldr	r3, [r3, #0]
    18a2:	2164      	movs	r1, #100	; 0x64
    18a4:	4618      	mov	r0, r3
    18a6:	f000 f87d 	bl	19a4 <timer_delay>
	set_freq_regs(N_one_INT, N_one_FRAC, k_one); //Program necessary values for f_one
    18aa:	e7de      	b.n	186a <MW_frequency_toggle+0x152>
    18ac:	f3af 8000 	nop.w
    18b0:	00000000 	.word	0x00000000
    18b4:	41cdcd65 	.word	0x41cdcd65
    18b8:	20000000 	.word	0x20000000
    18bc:	41ee8c21 	.word	0x41ee8c21
    18c0:	00000000 	.word	0x00000000
    18c4:	4187d784 	.word	0x4187d784
    18c8:	00000000 	.word	0x00000000
    18cc:	41700000 	.word	0x41700000
    18d0:	0801e1f4 	.word	0x0801e1f4
    18d4:	0801e218 	.word	0x0801e218
    18d8:	58021800 	.word	0x58021800
    18dc:	20000124 	.word	0x20000124

000018e0 <set_SDO_output>:
/* Selects SDO pin connectivity/functionality
 * By default, the SDO pin will output 'Lock detect' but can be connected
 * to other internal signals. See table 2.15 of HMC835 datasheet (v04.1113)
 * for more details all options
 */
 void set_SDO_output(const uint32_t GPO_setting) {
    18e0:	b580      	push	{r7, lr}
    18e2:	b084      	sub	sp, #16
    18e4:	af00      	add	r7, sp, #0
    18e6:	6078      	str	r0, [r7, #4]
	//Default output on SDO pin is 'Lock detect output', value 0x01
	//VCO divider is 0x0A
	//See table 2.15 of HMC835 datasheet for more details (v04.1113)
	uint32_t read_data = 0x0;
    18e8:	2300      	movs	r3, #0
    18ea:	60fb      	str	r3, [r7, #12]

	if (GPO_setting > 31) {
    18ec:	687b      	ldr	r3, [r7, #4]
    18ee:	2b1f      	cmp	r3, #31
    18f0:	d904      	bls.n	18fc <set_SDO_output+0x1c>
		printf("SDO pin value must be less that 32\r\n");
    18f2:	480d      	ldr	r0, [pc, #52]	; (1928 <set_SDO_output+0x48>)
    18f4:	f000 f9c0 	bl	1c78 <__puts_veneer>
		Error_Handler();
    18f8:	f000 f986 	bl	1c08 <__Error_Handler_veneer>
	}
	read_data = synth_readreg(GPO_REGISTER); // Get the current value.
    18fc:	200f      	movs	r0, #15
    18fe:	f7fe ff29 	bl	754 <synth_readreg>
    1902:	60f8      	str	r0, [r7, #12]
	read_data &= 0xFFFFFFE0; // Zero the first 5 LSBs.
    1904:	68fb      	ldr	r3, [r7, #12]
    1906:	f023 031f 	bic.w	r3, r3, #31
    190a:	60fb      	str	r3, [r7, #12]
	//read_data |= 0x0A; //Select VCO divider output
	read_data |= GPO_setting; //Select GPO output dependent on function input value
    190c:	68fa      	ldr	r2, [r7, #12]
    190e:	687b      	ldr	r3, [r7, #4]
    1910:	4313      	orrs	r3, r2
    1912:	60fb      	str	r3, [r7, #12]
	synth_writereg(read_data, GPO_REGISTER, 0x0, VERIFY); // Update the GPO register.
    1914:	2301      	movs	r3, #1
    1916:	2200      	movs	r2, #0
    1918:	210f      	movs	r1, #15
    191a:	68f8      	ldr	r0, [r7, #12]
    191c:	f7fe fea0 	bl	660 <synth_writereg>
}
    1920:	bf00      	nop
    1922:	3710      	adds	r7, #16
    1924:	46bd      	mov	sp, r7
    1926:	bd80      	pop	{r7, pc}
    1928:	0801e240 	.word	0x0801e240

0000192c <start_timer>:

/**
  * @brief  Starts a timer.
  * @retval uint32_t
  */
uint32_t start_timer(TIM_TypeDef * timer) {
    192c:	b480      	push	{r7}
    192e:	b083      	sub	sp, #12
    1930:	af00      	add	r7, sp, #0
    1932:	6078      	str	r0, [r7, #4]

	timer->CR1 &= ~(TIM_CR1_CEN);
    1934:	687b      	ldr	r3, [r7, #4]
    1936:	681b      	ldr	r3, [r3, #0]
    1938:	f023 0201 	bic.w	r2, r3, #1
    193c:	687b      	ldr	r3, [r7, #4]
    193e:	601a      	str	r2, [r3, #0]
	timer->EGR |= TIM_EGR_UG;  // Reset CNT and PSC
    1940:	687b      	ldr	r3, [r7, #4]
    1942:	695b      	ldr	r3, [r3, #20]
    1944:	f043 0201 	orr.w	r2, r3, #1
    1948:	687b      	ldr	r3, [r7, #4]
    194a:	615a      	str	r2, [r3, #20]
	timer->CR1 |= TIM_CR1_CEN;
    194c:	687b      	ldr	r3, [r7, #4]
    194e:	681b      	ldr	r3, [r3, #0]
    1950:	f043 0201 	orr.w	r2, r3, #1
    1954:	687b      	ldr	r3, [r7, #4]
    1956:	601a      	str	r2, [r3, #0]
	//printf("Started timer with returned CNT value: %ld \r\n", timer->CNT);
	return timer->CNT;
    1958:	687b      	ldr	r3, [r7, #4]
    195a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
    195c:	4618      	mov	r0, r3
    195e:	370c      	adds	r7, #12
    1960:	46bd      	mov	sp, r7
    1962:	f85d 7b04 	ldr.w	r7, [sp], #4
    1966:	4770      	bx	lr

00001968 <stop_timer>:

/**
  * @brief  Stops a timer.
  * @retval uint32_t
  */
uint32_t stop_timer(TIM_TypeDef *timer) {
    1968:	b480      	push	{r7}
    196a:	b083      	sub	sp, #12
    196c:	af00      	add	r7, sp, #0
    196e:	6078      	str	r0, [r7, #4]

	timer->CR1 &= ~(TIM_CR1_CEN);
    1970:	687b      	ldr	r3, [r7, #4]
    1972:	681b      	ldr	r3, [r3, #0]
    1974:	f023 0201 	bic.w	r2, r3, #1
    1978:	687b      	ldr	r3, [r7, #4]
    197a:	601a      	str	r2, [r3, #0]
	return timer->CNT;
    197c:	687b      	ldr	r3, [r7, #4]
    197e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
    1980:	4618      	mov	r0, r3
    1982:	370c      	adds	r7, #12
    1984:	46bd      	mov	sp, r7
    1986:	f85d 7b04 	ldr.w	r7, [sp], #4
    198a:	4770      	bx	lr

0000198c <check_timer>:
/**
  * @brief  Returns timer counter value
  * @param  Timer
  * @retval Counter value
  */
uint32_t check_timer(TIM_TypeDef *timer) {
    198c:	b480      	push	{r7}
    198e:	b083      	sub	sp, #12
    1990:	af00      	add	r7, sp, #0
    1992:	6078      	str	r0, [r7, #4]

	return timer->CNT;
    1994:	687b      	ldr	r3, [r7, #4]
    1996:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
    1998:	4618      	mov	r0, r3
    199a:	370c      	adds	r7, #12
    199c:	46bd      	mov	sp, r7
    199e:	f85d 7b04 	ldr.w	r7, [sp], #4
    19a2:	4770      	bx	lr

000019a4 <timer_delay>:

/**
  * @brief  Uses a H/W timer to loop for the cycle count requested.
  */
void timer_delay(TIM_TypeDef *timer, const uint32_t delay_count){
    19a4:	b580      	push	{r7, lr}
    19a6:	b084      	sub	sp, #16
    19a8:	af00      	add	r7, sp, #0
    19aa:	6078      	str	r0, [r7, #4]
    19ac:	6039      	str	r1, [r7, #0]
	/* Note that we don't consider overflow.
	 * FAST_TIMER will take approximately 65 ms to overflow.
	 * SLOW_TIMER will take 650ms
	 * MW_TIMER and SWEEP_TIMER will take 71 minutes */

	uint32_t start = start_timer(timer);
    19ae:	6878      	ldr	r0, [r7, #4]
    19b0:	f7ff ffbc 	bl	192c <start_timer>
    19b4:	60f8      	str	r0, [r7, #12]
//	timer->EGR |= TIM_EGR_UG;  // Reset CNT and PSC
//	timer->CR1 |= TIM_CR1_CEN; // Enable the timer
//	uint32_t start = timer->CNT; // Get the start value of the timer

//	while((timer->CNT - start) < delay_count){} // Loop until delay_us has expired
	while(timer->CNT < delay_count){} // Loop until delay_us has expired
    19b6:	bf00      	nop
    19b8:	687b      	ldr	r3, [r7, #4]
    19ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    19bc:	683a      	ldr	r2, [r7, #0]
    19be:	429a      	cmp	r2, r3
    19c0:	d8fa      	bhi.n	19b8 <timer_delay+0x14>

	stop_timer(timer);
    19c2:	6878      	ldr	r0, [r7, #4]
    19c4:	f7ff ffd0 	bl	1968 <stop_timer>
//	timer->CR1 &= ~(TIM_CR1_CEN); // Disable the timer

}
    19c8:	bf00      	nop
    19ca:	3710      	adds	r7, #16
    19cc:	46bd      	mov	sp, r7
    19ce:	bd80      	pop	{r7, pc}

000019d0 <measure_POP_cycle>:
/**
  * @brief  Returns the measured period of a POP cycle as averaged over 20 cycles
  * @param  None
  * @retval Period expressed as an integer number of microseconds
  */
uint32_t measure_POP_cycle(void){
    19d0:	b580      	push	{r7, lr}
    19d2:	b086      	sub	sp, #24
    19d4:	af00      	add	r7, sp, #0

	/* Measures the elapsed time taken for 20 POP cycles
	 * Relies on the ADC value changing every time a sample is taken
	 * ADC must be initialised before running
	 */
	uint32_t adc_value = 0;
    19d6:	2300      	movs	r3, #0
    19d8:	617b      	str	r3, [r7, #20]
	uint32_t last_adc_value = 9999;
    19da:	f242 730f 	movw	r3, #9999	; 0x270f
    19de:	613b      	str	r3, [r7, #16]
	uint8_t cycle_count = 0;
    19e0:	2300      	movs	r3, #0
    19e2:	73fb      	strb	r3, [r7, #15]
	uint32_t period;
	const uint8_t iterations = 20;
    19e4:	2314      	movs	r3, #20
    19e6:	73bb      	strb	r3, [r7, #14]

	HAL_GPIO_WritePin(MW_INVALID_GPIO_Port, MW_INVALID_Pin, GPIO_PIN_SET); 	//Sets MW_invalid pin high to reset POP cycle
    19e8:	2201      	movs	r2, #1
    19ea:	2102      	movs	r1, #2
    19ec:	4826      	ldr	r0, [pc, #152]	; (1a88 <measure_POP_cycle+0xb8>)
    19ee:	f000 f8d7 	bl	1ba0 <__HAL_GPIO_WritePin_veneer>
	start_timer(MW_TIMER); //reset MW_timer and start counting
    19f2:	4b26      	ldr	r3, [pc, #152]	; (1a8c <measure_POP_cycle+0xbc>)
    19f4:	681b      	ldr	r3, [r3, #0]
    19f6:	4618      	mov	r0, r3
    19f8:	f7ff ff98 	bl	192c <start_timer>
	HAL_GPIO_WritePin(MW_INVALID_GPIO_Port, MW_INVALID_Pin, GPIO_PIN_RESET); //Start POP cycle
    19fc:	2200      	movs	r2, #0
    19fe:	2102      	movs	r1, #2
    1a00:	4821      	ldr	r0, [pc, #132]	; (1a88 <measure_POP_cycle+0xb8>)
    1a02:	f000 f8cd 	bl	1ba0 <__HAL_GPIO_WritePin_veneer>

	// get the ADC conversion value
	adc_value = HAL_ADC_GetValue(&hadc3);
    1a06:	4822      	ldr	r0, [pc, #136]	; (1a90 <measure_POP_cycle+0xc0>)
    1a08:	f000 f8ae 	bl	1b68 <__HAL_ADC_GetValue_veneer>
    1a0c:	6178      	str	r0, [r7, #20]
	while (cycle_count < iterations) {
    1a0e:	e00c      	b.n	1a2a <measure_POP_cycle+0x5a>
		while (adc_value == last_adc_value) {
			adc_value = HAL_ADC_GetValue(&hadc3); //keep reading ADC until value changes
    1a10:	481f      	ldr	r0, [pc, #124]	; (1a90 <measure_POP_cycle+0xc0>)
    1a12:	f000 f8a9 	bl	1b68 <__HAL_ADC_GetValue_veneer>
    1a16:	6178      	str	r0, [r7, #20]
		while (adc_value == last_adc_value) {
    1a18:	697a      	ldr	r2, [r7, #20]
    1a1a:	693b      	ldr	r3, [r7, #16]
    1a1c:	429a      	cmp	r2, r3
    1a1e:	d0f7      	beq.n	1a10 <measure_POP_cycle+0x40>
		}
		last_adc_value = adc_value;
    1a20:	697b      	ldr	r3, [r7, #20]
    1a22:	613b      	str	r3, [r7, #16]
		cycle_count++;
    1a24:	7bfb      	ldrb	r3, [r7, #15]
    1a26:	3301      	adds	r3, #1
    1a28:	73fb      	strb	r3, [r7, #15]
	while (cycle_count < iterations) {
    1a2a:	7bfa      	ldrb	r2, [r7, #15]
    1a2c:	7bbb      	ldrb	r3, [r7, #14]
    1a2e:	429a      	cmp	r2, r3
    1a30:	d3f2      	bcc.n	1a18 <measure_POP_cycle+0x48>
	}

	uint32_t total_period = check_timer(MW_TIMER);
    1a32:	4b16      	ldr	r3, [pc, #88]	; (1a8c <measure_POP_cycle+0xbc>)
    1a34:	681b      	ldr	r3, [r3, #0]
    1a36:	4618      	mov	r0, r3
    1a38:	f7ff ffa8 	bl	198c <check_timer>
    1a3c:	60b8      	str	r0, [r7, #8]
	period = (float)(check_timer(MW_TIMER)) / iterations + 0.5;
    1a3e:	4b13      	ldr	r3, [pc, #76]	; (1a8c <measure_POP_cycle+0xbc>)
    1a40:	681b      	ldr	r3, [r3, #0]
    1a42:	4618      	mov	r0, r3
    1a44:	f7ff ffa2 	bl	198c <check_timer>
    1a48:	ee07 0a90 	vmov	s15, r0
    1a4c:	eef8 6a67 	vcvt.f32.u32	s13, s15
    1a50:	7bbb      	ldrb	r3, [r7, #14]
    1a52:	ee07 3a90 	vmov	s15, r3
    1a56:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
    1a5a:	eec6 7a87 	vdiv.f32	s15, s13, s14
    1a5e:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
    1a62:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
    1a66:	ee37 7b06 	vadd.f64	d7, d7, d6
    1a6a:	eefc 7bc7 	vcvt.u32.f64	s15, d7
    1a6e:	ee17 3a90 	vmov	r3, s15
    1a72:	607b      	str	r3, [r7, #4]
	stop_timer(MW_TIMER);
    1a74:	4b05      	ldr	r3, [pc, #20]	; (1a8c <measure_POP_cycle+0xbc>)
    1a76:	681b      	ldr	r3, [r3, #0]
    1a78:	4618      	mov	r0, r3
    1a7a:	f7ff ff75 	bl	1968 <stop_timer>
	#ifdef TIMER_VERBOSE
		printf("Time for %u POP cycles: %lu us\r\n", iterations, total_period);
		printf("POP period: %lu us\r\n", period);
	#endif //TIMER_VERBOSE
	return (period);
    1a7e:	687b      	ldr	r3, [r7, #4]

}
    1a80:	4618      	mov	r0, r3
    1a82:	3718      	adds	r7, #24
    1a84:	46bd      	mov	sp, r7
    1a86:	bd80      	pop	{r7, pc}
    1a88:	58020400 	.word	0x58020400
    1a8c:	20000128 	.word	0x20000128
    1a90:	20000368 	.word	0x20000368

00001a94 <start_pop>:

	printf("POP cycle stopped!\r\n");

}

void start_pop() {
    1a94:	b580      	push	{r7, lr}
    1a96:	af00      	add	r7, sp, #0

	/* Timer A is the LASER enable, Timer E is the microwave pulse */
	if (HAL_HRTIM_WaveformOutputStart(&hhrtim,
    1a98:	f240 1103 	movw	r1, #259	; 0x103
    1a9c:	480f      	ldr	r0, [pc, #60]	; (1adc <start_pop+0x48>)
    1a9e:	f000 f8db 	bl	1c58 <__HAL_HRTIM_WaveformOutputStart_veneer>
    1aa2:	4603      	mov	r3, r0
    1aa4:	2b00      	cmp	r3, #0
    1aa6:	d004      	beq.n	1ab2 <start_pop+0x1e>
	HRTIM_OUTPUT_TA1 | HRTIM_OUTPUT_TA2 | HRTIM_OUTPUT_TE1) != HAL_OK) {
		printf("Failed to start POP!\r\n");
    1aa8:	480d      	ldr	r0, [pc, #52]	; (1ae0 <start_pop+0x4c>)
    1aaa:	f000 f8e5 	bl	1c78 <__puts_veneer>
		Error_Handler();
    1aae:	f000 f8ab 	bl	1c08 <__Error_Handler_veneer>
		Error_Handler();
	}

#endif

	if (HAL_HRTIM_WaveformCounterStart_IT(&hhrtim,
    1ab2:	f44f 1108 	mov.w	r1, #2228224	; 0x220000
    1ab6:	4809      	ldr	r0, [pc, #36]	; (1adc <start_pop+0x48>)
    1ab8:	f000 f8b6 	bl	1c28 <__HAL_HRTIM_WaveformCountStart_IT_veneer>
    1abc:	4603      	mov	r3, r0
    1abe:	2b00      	cmp	r3, #0
    1ac0:	d004      	beq.n	1acc <start_pop+0x38>
	HRTIM_TIMERID_TIMER_A | HRTIM_TIMERID_TIMER_E) != HAL_OK) {
		printf("POP failure point E!\r\n");
    1ac2:	4808      	ldr	r0, [pc, #32]	; (1ae4 <start_pop+0x50>)
    1ac4:	f000 f8d8 	bl	1c78 <__puts_veneer>
		Error_Handler();
    1ac8:	f000 f89e 	bl	1c08 <__Error_Handler_veneer>
	}

	pop_running = true;
    1acc:	4b06      	ldr	r3, [pc, #24]	; (1ae8 <start_pop+0x54>)
    1ace:	2201      	movs	r2, #1
    1ad0:	701a      	strb	r2, [r3, #0]

	printf("POP cycle running!\r\n");
    1ad2:	4806      	ldr	r0, [pc, #24]	; (1aec <start_pop+0x58>)
    1ad4:	f000 f8d0 	bl	1c78 <__puts_veneer>

}
    1ad8:	bf00      	nop
    1ada:	bd80      	pop	{r7, pc}
    1adc:	200003e0 	.word	0x200003e0
    1ae0:	0801e264 	.word	0x0801e264
    1ae4:	0801e27c 	.word	0x0801e27c
    1ae8:	20000768 	.word	0x20000768
    1aec:	0801e294 	.word	0x0801e294

00001af0 <stop_pop>:
void stop_pop() {
    1af0:	b580      	push	{r7, lr}
    1af2:	af00      	add	r7, sp, #0
	if (HAL_HRTIM_WaveformOutputStop(&hhrtim,
    1af4:	f240 1103 	movw	r1, #259	; 0x103
    1af8:	4813      	ldr	r0, [pc, #76]	; (1b48 <stop_pop+0x58>)
    1afa:	f000 f875 	bl	1be8 <__HAL_HRTIM_WaveformOutputStop_veneer>
    1afe:	4603      	mov	r3, r0
    1b00:	2b00      	cmp	r3, #0
    1b02:	d004      	beq.n	1b0e <stop_pop+0x1e>
		printf("POP failure point A!\r\n");
    1b04:	4811      	ldr	r0, [pc, #68]	; (1b4c <stop_pop+0x5c>)
    1b06:	f000 f8b7 	bl	1c78 <__puts_veneer>
		Error_Handler();
    1b0a:	f000 f87d 	bl	1c08 <__Error_Handler_veneer>
	if (HAL_HRTIM_WaveformCounterStop_IT(&hhrtim,
    1b0e:	f44f 1108 	mov.w	r1, #2228224	; 0x220000
    1b12:	480d      	ldr	r0, [pc, #52]	; (1b48 <stop_pop+0x58>)
    1b14:	f000 f898 	bl	1c48 <__HAL_HRTIM_WaveformCountStop_IT_veneer>
    1b18:	4603      	mov	r3, r0
    1b1a:	2b00      	cmp	r3, #0
    1b1c:	d004      	beq.n	1b28 <stop_pop+0x38>
		printf("POP failure point B!\r\n");
    1b1e:	480c      	ldr	r0, [pc, #48]	; (1b50 <stop_pop+0x60>)
    1b20:	f000 f8aa 	bl	1c78 <__puts_veneer>
		Error_Handler();
    1b24:	f000 f870 	bl	1c08 <__Error_Handler_veneer>
	pop_cycle_count = 0;
    1b28:	4b0a      	ldr	r3, [pc, #40]	; (1b54 <stop_pop+0x64>)
    1b2a:	2200      	movs	r2, #0
    1b2c:	601a      	str	r2, [r3, #0]
	pop_running = false;
    1b2e:	4b0a      	ldr	r3, [pc, #40]	; (1b58 <stop_pop+0x68>)
    1b30:	2200      	movs	r2, #0
    1b32:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, 0); //turn off amber LED
    1b34:	2200      	movs	r2, #0
    1b36:	2102      	movs	r1, #2
    1b38:	4808      	ldr	r0, [pc, #32]	; (1b5c <stop_pop+0x6c>)
    1b3a:	f000 f831 	bl	1ba0 <__HAL_GPIO_WritePin_veneer>
	printf("POP cycle stopped!\r\n");
    1b3e:	4808      	ldr	r0, [pc, #32]	; (1b60 <stop_pop+0x70>)
    1b40:	f000 f89a 	bl	1c78 <__puts_veneer>
}
    1b44:	bf00      	nop
    1b46:	bd80      	pop	{r7, pc}
    1b48:	200003e0 	.word	0x200003e0
    1b4c:	0801e2a8 	.word	0x0801e2a8
    1b50:	0801e2c0 	.word	0x0801e2c0
    1b54:	20000764 	.word	0x20000764
    1b58:	20000768 	.word	0x20000768
    1b5c:	58021000 	.word	0x58021000
    1b60:	0801e2d8 	.word	0x0801e2d8
    1b64:	00000000 	.word	0x00000000

00001b68 <__HAL_ADC_GetValue_veneer>:
    1b68:	f85f f000 	ldr.w	pc, [pc]	; 1b6c <__HAL_ADC_GetValue_veneer+0x4>
    1b6c:	08004d7d 	.word	0x08004d7d

00001b70 <__tcp_arg_veneer>:
    1b70:	f85f f000 	ldr.w	pc, [pc]	; 1b74 <__tcp_arg_veneer+0x4>
    1b74:	0801322d 	.word	0x0801322d

00001b78 <__printf_veneer>:
    1b78:	f85f f000 	ldr.w	pc, [pc]	; 1b7c <__printf_veneer+0x4>
    1b7c:	0801b2b9 	.word	0x0801b2b9

00001b80 <__memcpy_veneer>:
    1b80:	f85f f000 	ldr.w	pc, [pc]	; 1b84 <__memcpy_veneer+0x4>
    1b84:	0801b6ef 	.word	0x0801b6ef

00001b88 <__tcp_recved_veneer>:
    1b88:	f85f f000 	ldr.w	pc, [pc]	; 1b8c <__tcp_recved_veneer+0x4>
    1b8c:	08012275 	.word	0x08012275

00001b90 <__pbuf_alloc_veneer>:
    1b90:	f85f f000 	ldr.w	pc, [pc]	; 1b94 <__pbuf_alloc_veneer+0x4>
    1b94:	08010fad 	.word	0x08010fad

00001b98 <__HAL_GPIO_ReadPin_veneer>:
    1b98:	f85f f000 	ldr.w	pc, [pc]	; 1b9c <__HAL_GPIO_ReadPin_veneer+0x4>
    1b9c:	08007ff9 	.word	0x08007ff9

00001ba0 <__HAL_GPIO_WritePin_veneer>:
    1ba0:	f85f f000 	ldr.w	pc, [pc]	; 1ba4 <__HAL_GPIO_WritePin_veneer+0x4>
    1ba4:	08008029 	.word	0x08008029

00001ba8 <__pbuf_free_veneer>:
    1ba8:	f85f f000 	ldr.w	pc, [pc]	; 1bac <__pbuf_free_veneer+0x4>
    1bac:	08011575 	.word	0x08011575

00001bb0 <__tcp_recv_veneer>:
    1bb0:	f85f f000 	ldr.w	pc, [pc]	; 1bb4 <__tcp_recv_veneer+0x4>
    1bb4:	08013251 	.word	0x08013251

00001bb8 <__mem_free_veneer>:
    1bb8:	f85f f000 	ldr.w	pc, [pc]	; 1bbc <__mem_free_veneer+0x4>
    1bbc:	080101dd 	.word	0x080101dd

00001bc0 <__tcp_connect_veneer>:
    1bc0:	f85f f000 	ldr.w	pc, [pc]	; 1bc4 <__tcp_connect_veneer+0x4>
    1bc4:	080123a5 	.word	0x080123a5

00001bc8 <__HAL_Delay_veneer>:
    1bc8:	f85f f000 	ldr.w	pc, [pc]	; 1bcc <__HAL_Delay_veneer+0x4>
    1bcc:	080042d1 	.word	0x080042d1

00001bd0 <__strlen_veneer>:
    1bd0:	f85f f000 	ldr.w	pc, [pc]	; 1bd4 <__strlen_veneer+0x4>
    1bd4:	08002001 	.word	0x08002001

00001bd8 <__tcp_write_veneer>:
    1bd8:	f85f f000 	ldr.w	pc, [pc]	; 1bdc <__tcp_write_veneer+0x4>
    1bdc:	08016081 	.word	0x08016081

00001be0 <__ethernetif_input_veneer>:
    1be0:	f85f f000 	ldr.w	pc, [pc]	; 1be4 <__ethernetif_input_veneer+0x4>
    1be4:	0800f80d 	.word	0x0800f80d

00001be8 <__HAL_HRTIM_WaveformOutputStop_veneer>:
    1be8:	f85f f000 	ldr.w	pc, [pc]	; 1bec <__HAL_HRTIM_WaveformOutputStop_veneer+0x4>
    1bec:	08008745 	.word	0x08008745

00001bf0 <__tcp_abort_veneer>:
    1bf0:	f85f f000 	ldr.w	pc, [pc]	; 1bf4 <__tcp_abort_veneer+0x4>
    1bf4:	080121a9 	.word	0x080121a9

00001bf8 <__tcp_close_veneer>:
    1bf8:	f85f f000 	ldr.w	pc, [pc]	; 1bfc <__tcp_close_veneer+0x4>
    1bfc:	08011fd5 	.word	0x08011fd5

00001c00 <__HAL_GPIO_TogglePin_veneer>:
    1c00:	f85f f000 	ldr.w	pc, [pc]	; 1c04 <__HAL_GPIO_TogglePin_veneer+0x4>
    1c04:	0800805b 	.word	0x0800805b

00001c08 <__Error_Handler_veneer>:
    1c08:	f85f f000 	ldr.w	pc, [pc]	; 1c0c <__Error_Handler_veneer+0x4>
    1c0c:	0800343d 	.word	0x0800343d

00001c10 <__pbuf_ref_veneer>:
    1c10:	f85f f000 	ldr.w	pc, [pc]	; 1c14 <__pbuf_ref_veneer+0x4>
    1c14:	080116b5 	.word	0x080116b5

00001c18 <__sprintf_veneer>:
    1c18:	f85f f000 	ldr.w	pc, [pc]	; 1c1c <__sprintf_veneer+0x4>
    1c1c:	0801b395 	.word	0x0801b395

00001c20 <__tcp_new_veneer>:
    1c20:	f85f f000 	ldr.w	pc, [pc]	; 1c24 <__tcp_new_veneer+0x4>
    1c24:	0801321d 	.word	0x0801321d

00001c28 <__HAL_HRTIM_WaveformCountStart_IT_veneer>:
    1c28:	f85f f000 	ldr.w	pc, [pc]	; 1c2c <__HAL_HRTIM_WaveformCountStart_IT_veneer+0x4>
    1c2c:	080087a1 	.word	0x080087a1

00001c30 <__mem_malloc_veneer>:
    1c30:	f85f f000 	ldr.w	pc, [pc]	; 1c34 <__mem_malloc_veneer+0x4>
    1c34:	08010499 	.word	0x08010499

00001c38 <__sys_check_timeouts_veneer>:
    1c38:	f85f f000 	ldr.w	pc, [pc]	; 1c3c <__sys_check_timeouts_veneer+0x4>
    1c3c:	08017d51 	.word	0x08017d51

00001c40 <__strncmp_veneer>:
    1c40:	f85f f000 	ldr.w	pc, [pc]	; 1c44 <__strncmp_veneer+0x4>
    1c44:	0801b5e9 	.word	0x0801b5e9

00001c48 <__HAL_HRTIM_WaveformCountStop_IT_veneer>:
    1c48:	f85f f000 	ldr.w	pc, [pc]	; 1c4c <__HAL_HRTIM_WaveformCountStop_IT_veneer+0x4>
    1c4c:	08008881 	.word	0x08008881

00001c50 <__ip4addr_ntoa_veneer>:
    1c50:	f85f f000 	ldr.w	pc, [pc]	; 1c54 <__ip4addr_ntoa_veneer+0x4>
    1c54:	080198f9 	.word	0x080198f9

00001c58 <__HAL_HRTIM_WaveformOutputStart_veneer>:
    1c58:	f85f f000 	ldr.w	pc, [pc]	; 1c5c <__HAL_HRTIM_WaveformOutputStart_veneer+0x4>
    1c5c:	080086eb 	.word	0x080086eb

00001c60 <__tcp_poll_veneer>:
    1c60:	f85f f000 	ldr.w	pc, [pc]	; 1c64 <__tcp_poll_veneer+0x4>
    1c64:	0801331d 	.word	0x0801331d

00001c68 <__pbuf_take_veneer>:
    1c68:	f85f f000 	ldr.w	pc, [pc]	; 1c6c <__pbuf_take_veneer+0x4>
    1c6c:	08011a2d 	.word	0x08011a2d

00001c70 <__tcp_err_veneer>:
    1c70:	f85f f000 	ldr.w	pc, [pc]	; 1c74 <__tcp_err_veneer+0x4>
    1c74:	080132d9 	.word	0x080132d9

00001c78 <__puts_veneer>:
    1c78:	f85f f000 	ldr.w	pc, [pc]	; 1c7c <__puts_veneer+0x4>
    1c7c:	0801b385 	.word	0x0801b385

00001c80 <__tcp_sent_veneer>:
    1c80:	f85f f000 	ldr.w	pc, [pc]	; 1c84 <__tcp_sent_veneer+0x4>
    1c84:	08013295 	.word	0x08013295

Disassembly of section .text:

08001f20 <__do_global_dtors_aux>:
 8001f20:	b510      	push	{r4, lr}
 8001f22:	4c05      	ldr	r4, [pc, #20]	; (8001f38 <__do_global_dtors_aux+0x18>)
 8001f24:	7823      	ldrb	r3, [r4, #0]
 8001f26:	b933      	cbnz	r3, 8001f36 <__do_global_dtors_aux+0x16>
 8001f28:	4b04      	ldr	r3, [pc, #16]	; (8001f3c <__do_global_dtors_aux+0x1c>)
 8001f2a:	b113      	cbz	r3, 8001f32 <__do_global_dtors_aux+0x12>
 8001f2c:	4804      	ldr	r0, [pc, #16]	; (8001f40 <__do_global_dtors_aux+0x20>)
 8001f2e:	f3af 8000 	nop.w
 8001f32:	2301      	movs	r3, #1
 8001f34:	7023      	strb	r3, [r4, #0]
 8001f36:	bd10      	pop	{r4, pc}
 8001f38:	20000340 	.word	0x20000340
 8001f3c:	00000000 	.word	0x00000000
 8001f40:	0801d578 	.word	0x0801d578

08001f44 <frame_dummy>:
 8001f44:	b508      	push	{r3, lr}
 8001f46:	4b03      	ldr	r3, [pc, #12]	; (8001f54 <frame_dummy+0x10>)
 8001f48:	b11b      	cbz	r3, 8001f52 <frame_dummy+0xe>
 8001f4a:	4903      	ldr	r1, [pc, #12]	; (8001f58 <frame_dummy+0x14>)
 8001f4c:	4803      	ldr	r0, [pc, #12]	; (8001f5c <frame_dummy+0x18>)
 8001f4e:	f3af 8000 	nop.w
 8001f52:	bd08      	pop	{r3, pc}
 8001f54:	00000000 	.word	0x00000000
 8001f58:	20000344 	.word	0x20000344
 8001f5c:	0801d578 	.word	0x0801d578

08001f60 <memchr>:
 8001f60:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8001f64:	2a10      	cmp	r2, #16
 8001f66:	db2b      	blt.n	8001fc0 <memchr+0x60>
 8001f68:	f010 0f07 	tst.w	r0, #7
 8001f6c:	d008      	beq.n	8001f80 <memchr+0x20>
 8001f6e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8001f72:	3a01      	subs	r2, #1
 8001f74:	428b      	cmp	r3, r1
 8001f76:	d02d      	beq.n	8001fd4 <memchr+0x74>
 8001f78:	f010 0f07 	tst.w	r0, #7
 8001f7c:	b342      	cbz	r2, 8001fd0 <memchr+0x70>
 8001f7e:	d1f6      	bne.n	8001f6e <memchr+0xe>
 8001f80:	b4f0      	push	{r4, r5, r6, r7}
 8001f82:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8001f86:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 8001f8a:	f022 0407 	bic.w	r4, r2, #7
 8001f8e:	f07f 0700 	mvns.w	r7, #0
 8001f92:	2300      	movs	r3, #0
 8001f94:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8001f98:	3c08      	subs	r4, #8
 8001f9a:	ea85 0501 	eor.w	r5, r5, r1
 8001f9e:	ea86 0601 	eor.w	r6, r6, r1
 8001fa2:	fa85 f547 	uadd8	r5, r5, r7
 8001fa6:	faa3 f587 	sel	r5, r3, r7
 8001faa:	fa86 f647 	uadd8	r6, r6, r7
 8001fae:	faa5 f687 	sel	r6, r5, r7
 8001fb2:	b98e      	cbnz	r6, 8001fd8 <memchr+0x78>
 8001fb4:	d1ee      	bne.n	8001f94 <memchr+0x34>
 8001fb6:	bcf0      	pop	{r4, r5, r6, r7}
 8001fb8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8001fbc:	f002 0207 	and.w	r2, r2, #7
 8001fc0:	b132      	cbz	r2, 8001fd0 <memchr+0x70>
 8001fc2:	f810 3b01 	ldrb.w	r3, [r0], #1
 8001fc6:	3a01      	subs	r2, #1
 8001fc8:	ea83 0301 	eor.w	r3, r3, r1
 8001fcc:	b113      	cbz	r3, 8001fd4 <memchr+0x74>
 8001fce:	d1f8      	bne.n	8001fc2 <memchr+0x62>
 8001fd0:	2000      	movs	r0, #0
 8001fd2:	4770      	bx	lr
 8001fd4:	3801      	subs	r0, #1
 8001fd6:	4770      	bx	lr
 8001fd8:	2d00      	cmp	r5, #0
 8001fda:	bf06      	itte	eq
 8001fdc:	4635      	moveq	r5, r6
 8001fde:	3803      	subeq	r0, #3
 8001fe0:	3807      	subne	r0, #7
 8001fe2:	f015 0f01 	tst.w	r5, #1
 8001fe6:	d107      	bne.n	8001ff8 <memchr+0x98>
 8001fe8:	3001      	adds	r0, #1
 8001fea:	f415 7f80 	tst.w	r5, #256	; 0x100
 8001fee:	bf02      	ittt	eq
 8001ff0:	3001      	addeq	r0, #1
 8001ff2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8001ff6:	3001      	addeq	r0, #1
 8001ff8:	bcf0      	pop	{r4, r5, r6, r7}
 8001ffa:	3801      	subs	r0, #1
 8001ffc:	4770      	bx	lr
 8001ffe:	bf00      	nop

08002000 <strlen>:
 8002000:	4603      	mov	r3, r0
 8002002:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002006:	2a00      	cmp	r2, #0
 8002008:	d1fb      	bne.n	8002002 <strlen+0x2>
 800200a:	1a18      	subs	r0, r3, r0
 800200c:	3801      	subs	r0, #1
 800200e:	4770      	bx	lr

08002010 <__aeabi_uldivmod>:
 8002010:	b953      	cbnz	r3, 8002028 <__aeabi_uldivmod+0x18>
 8002012:	b94a      	cbnz	r2, 8002028 <__aeabi_uldivmod+0x18>
 8002014:	2900      	cmp	r1, #0
 8002016:	bf08      	it	eq
 8002018:	2800      	cmpeq	r0, #0
 800201a:	bf1c      	itt	ne
 800201c:	f04f 31ff 	movne.w	r1, #4294967295
 8002020:	f04f 30ff 	movne.w	r0, #4294967295
 8002024:	f000 b970 	b.w	8002308 <__aeabi_idiv0>
 8002028:	f1ad 0c08 	sub.w	ip, sp, #8
 800202c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8002030:	f000 f806 	bl	8002040 <__udivmoddi4>
 8002034:	f8dd e004 	ldr.w	lr, [sp, #4]
 8002038:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800203c:	b004      	add	sp, #16
 800203e:	4770      	bx	lr

08002040 <__udivmoddi4>:
 8002040:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002044:	9e08      	ldr	r6, [sp, #32]
 8002046:	460d      	mov	r5, r1
 8002048:	4604      	mov	r4, r0
 800204a:	460f      	mov	r7, r1
 800204c:	2b00      	cmp	r3, #0
 800204e:	d14a      	bne.n	80020e6 <__udivmoddi4+0xa6>
 8002050:	428a      	cmp	r2, r1
 8002052:	4694      	mov	ip, r2
 8002054:	d965      	bls.n	8002122 <__udivmoddi4+0xe2>
 8002056:	fab2 f382 	clz	r3, r2
 800205a:	b143      	cbz	r3, 800206e <__udivmoddi4+0x2e>
 800205c:	fa02 fc03 	lsl.w	ip, r2, r3
 8002060:	f1c3 0220 	rsb	r2, r3, #32
 8002064:	409f      	lsls	r7, r3
 8002066:	fa20 f202 	lsr.w	r2, r0, r2
 800206a:	4317      	orrs	r7, r2
 800206c:	409c      	lsls	r4, r3
 800206e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8002072:	fa1f f58c 	uxth.w	r5, ip
 8002076:	fbb7 f1fe 	udiv	r1, r7, lr
 800207a:	0c22      	lsrs	r2, r4, #16
 800207c:	fb0e 7711 	mls	r7, lr, r1, r7
 8002080:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8002084:	fb01 f005 	mul.w	r0, r1, r5
 8002088:	4290      	cmp	r0, r2
 800208a:	d90a      	bls.n	80020a2 <__udivmoddi4+0x62>
 800208c:	eb1c 0202 	adds.w	r2, ip, r2
 8002090:	f101 37ff 	add.w	r7, r1, #4294967295
 8002094:	f080 811c 	bcs.w	80022d0 <__udivmoddi4+0x290>
 8002098:	4290      	cmp	r0, r2
 800209a:	f240 8119 	bls.w	80022d0 <__udivmoddi4+0x290>
 800209e:	3902      	subs	r1, #2
 80020a0:	4462      	add	r2, ip
 80020a2:	1a12      	subs	r2, r2, r0
 80020a4:	b2a4      	uxth	r4, r4
 80020a6:	fbb2 f0fe 	udiv	r0, r2, lr
 80020aa:	fb0e 2210 	mls	r2, lr, r0, r2
 80020ae:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80020b2:	fb00 f505 	mul.w	r5, r0, r5
 80020b6:	42a5      	cmp	r5, r4
 80020b8:	d90a      	bls.n	80020d0 <__udivmoddi4+0x90>
 80020ba:	eb1c 0404 	adds.w	r4, ip, r4
 80020be:	f100 32ff 	add.w	r2, r0, #4294967295
 80020c2:	f080 8107 	bcs.w	80022d4 <__udivmoddi4+0x294>
 80020c6:	42a5      	cmp	r5, r4
 80020c8:	f240 8104 	bls.w	80022d4 <__udivmoddi4+0x294>
 80020cc:	4464      	add	r4, ip
 80020ce:	3802      	subs	r0, #2
 80020d0:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80020d4:	1b64      	subs	r4, r4, r5
 80020d6:	2100      	movs	r1, #0
 80020d8:	b11e      	cbz	r6, 80020e2 <__udivmoddi4+0xa2>
 80020da:	40dc      	lsrs	r4, r3
 80020dc:	2300      	movs	r3, #0
 80020de:	e9c6 4300 	strd	r4, r3, [r6]
 80020e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80020e6:	428b      	cmp	r3, r1
 80020e8:	d908      	bls.n	80020fc <__udivmoddi4+0xbc>
 80020ea:	2e00      	cmp	r6, #0
 80020ec:	f000 80ed 	beq.w	80022ca <__udivmoddi4+0x28a>
 80020f0:	2100      	movs	r1, #0
 80020f2:	e9c6 0500 	strd	r0, r5, [r6]
 80020f6:	4608      	mov	r0, r1
 80020f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80020fc:	fab3 f183 	clz	r1, r3
 8002100:	2900      	cmp	r1, #0
 8002102:	d149      	bne.n	8002198 <__udivmoddi4+0x158>
 8002104:	42ab      	cmp	r3, r5
 8002106:	d302      	bcc.n	800210e <__udivmoddi4+0xce>
 8002108:	4282      	cmp	r2, r0
 800210a:	f200 80f8 	bhi.w	80022fe <__udivmoddi4+0x2be>
 800210e:	1a84      	subs	r4, r0, r2
 8002110:	eb65 0203 	sbc.w	r2, r5, r3
 8002114:	2001      	movs	r0, #1
 8002116:	4617      	mov	r7, r2
 8002118:	2e00      	cmp	r6, #0
 800211a:	d0e2      	beq.n	80020e2 <__udivmoddi4+0xa2>
 800211c:	e9c6 4700 	strd	r4, r7, [r6]
 8002120:	e7df      	b.n	80020e2 <__udivmoddi4+0xa2>
 8002122:	b902      	cbnz	r2, 8002126 <__udivmoddi4+0xe6>
 8002124:	deff      	udf	#255	; 0xff
 8002126:	fab2 f382 	clz	r3, r2
 800212a:	2b00      	cmp	r3, #0
 800212c:	f040 8090 	bne.w	8002250 <__udivmoddi4+0x210>
 8002130:	1a8a      	subs	r2, r1, r2
 8002132:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8002136:	fa1f fe8c 	uxth.w	lr, ip
 800213a:	2101      	movs	r1, #1
 800213c:	fbb2 f5f7 	udiv	r5, r2, r7
 8002140:	fb07 2015 	mls	r0, r7, r5, r2
 8002144:	0c22      	lsrs	r2, r4, #16
 8002146:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800214a:	fb0e f005 	mul.w	r0, lr, r5
 800214e:	4290      	cmp	r0, r2
 8002150:	d908      	bls.n	8002164 <__udivmoddi4+0x124>
 8002152:	eb1c 0202 	adds.w	r2, ip, r2
 8002156:	f105 38ff 	add.w	r8, r5, #4294967295
 800215a:	d202      	bcs.n	8002162 <__udivmoddi4+0x122>
 800215c:	4290      	cmp	r0, r2
 800215e:	f200 80cb 	bhi.w	80022f8 <__udivmoddi4+0x2b8>
 8002162:	4645      	mov	r5, r8
 8002164:	1a12      	subs	r2, r2, r0
 8002166:	b2a4      	uxth	r4, r4
 8002168:	fbb2 f0f7 	udiv	r0, r2, r7
 800216c:	fb07 2210 	mls	r2, r7, r0, r2
 8002170:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8002174:	fb0e fe00 	mul.w	lr, lr, r0
 8002178:	45a6      	cmp	lr, r4
 800217a:	d908      	bls.n	800218e <__udivmoddi4+0x14e>
 800217c:	eb1c 0404 	adds.w	r4, ip, r4
 8002180:	f100 32ff 	add.w	r2, r0, #4294967295
 8002184:	d202      	bcs.n	800218c <__udivmoddi4+0x14c>
 8002186:	45a6      	cmp	lr, r4
 8002188:	f200 80bb 	bhi.w	8002302 <__udivmoddi4+0x2c2>
 800218c:	4610      	mov	r0, r2
 800218e:	eba4 040e 	sub.w	r4, r4, lr
 8002192:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8002196:	e79f      	b.n	80020d8 <__udivmoddi4+0x98>
 8002198:	f1c1 0720 	rsb	r7, r1, #32
 800219c:	408b      	lsls	r3, r1
 800219e:	fa22 fc07 	lsr.w	ip, r2, r7
 80021a2:	ea4c 0c03 	orr.w	ip, ip, r3
 80021a6:	fa05 f401 	lsl.w	r4, r5, r1
 80021aa:	fa20 f307 	lsr.w	r3, r0, r7
 80021ae:	40fd      	lsrs	r5, r7
 80021b0:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80021b4:	4323      	orrs	r3, r4
 80021b6:	fbb5 f8f9 	udiv	r8, r5, r9
 80021ba:	fa1f fe8c 	uxth.w	lr, ip
 80021be:	fb09 5518 	mls	r5, r9, r8, r5
 80021c2:	0c1c      	lsrs	r4, r3, #16
 80021c4:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80021c8:	fb08 f50e 	mul.w	r5, r8, lr
 80021cc:	42a5      	cmp	r5, r4
 80021ce:	fa02 f201 	lsl.w	r2, r2, r1
 80021d2:	fa00 f001 	lsl.w	r0, r0, r1
 80021d6:	d90b      	bls.n	80021f0 <__udivmoddi4+0x1b0>
 80021d8:	eb1c 0404 	adds.w	r4, ip, r4
 80021dc:	f108 3aff 	add.w	sl, r8, #4294967295
 80021e0:	f080 8088 	bcs.w	80022f4 <__udivmoddi4+0x2b4>
 80021e4:	42a5      	cmp	r5, r4
 80021e6:	f240 8085 	bls.w	80022f4 <__udivmoddi4+0x2b4>
 80021ea:	f1a8 0802 	sub.w	r8, r8, #2
 80021ee:	4464      	add	r4, ip
 80021f0:	1b64      	subs	r4, r4, r5
 80021f2:	b29d      	uxth	r5, r3
 80021f4:	fbb4 f3f9 	udiv	r3, r4, r9
 80021f8:	fb09 4413 	mls	r4, r9, r3, r4
 80021fc:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8002200:	fb03 fe0e 	mul.w	lr, r3, lr
 8002204:	45a6      	cmp	lr, r4
 8002206:	d908      	bls.n	800221a <__udivmoddi4+0x1da>
 8002208:	eb1c 0404 	adds.w	r4, ip, r4
 800220c:	f103 35ff 	add.w	r5, r3, #4294967295
 8002210:	d26c      	bcs.n	80022ec <__udivmoddi4+0x2ac>
 8002212:	45a6      	cmp	lr, r4
 8002214:	d96a      	bls.n	80022ec <__udivmoddi4+0x2ac>
 8002216:	3b02      	subs	r3, #2
 8002218:	4464      	add	r4, ip
 800221a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800221e:	fba3 9502 	umull	r9, r5, r3, r2
 8002222:	eba4 040e 	sub.w	r4, r4, lr
 8002226:	42ac      	cmp	r4, r5
 8002228:	46c8      	mov	r8, r9
 800222a:	46ae      	mov	lr, r5
 800222c:	d356      	bcc.n	80022dc <__udivmoddi4+0x29c>
 800222e:	d053      	beq.n	80022d8 <__udivmoddi4+0x298>
 8002230:	b156      	cbz	r6, 8002248 <__udivmoddi4+0x208>
 8002232:	ebb0 0208 	subs.w	r2, r0, r8
 8002236:	eb64 040e 	sbc.w	r4, r4, lr
 800223a:	fa04 f707 	lsl.w	r7, r4, r7
 800223e:	40ca      	lsrs	r2, r1
 8002240:	40cc      	lsrs	r4, r1
 8002242:	4317      	orrs	r7, r2
 8002244:	e9c6 7400 	strd	r7, r4, [r6]
 8002248:	4618      	mov	r0, r3
 800224a:	2100      	movs	r1, #0
 800224c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002250:	f1c3 0120 	rsb	r1, r3, #32
 8002254:	fa02 fc03 	lsl.w	ip, r2, r3
 8002258:	fa20 f201 	lsr.w	r2, r0, r1
 800225c:	fa25 f101 	lsr.w	r1, r5, r1
 8002260:	409d      	lsls	r5, r3
 8002262:	432a      	orrs	r2, r5
 8002264:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8002268:	fa1f fe8c 	uxth.w	lr, ip
 800226c:	fbb1 f0f7 	udiv	r0, r1, r7
 8002270:	fb07 1510 	mls	r5, r7, r0, r1
 8002274:	0c11      	lsrs	r1, r2, #16
 8002276:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800227a:	fb00 f50e 	mul.w	r5, r0, lr
 800227e:	428d      	cmp	r5, r1
 8002280:	fa04 f403 	lsl.w	r4, r4, r3
 8002284:	d908      	bls.n	8002298 <__udivmoddi4+0x258>
 8002286:	eb1c 0101 	adds.w	r1, ip, r1
 800228a:	f100 38ff 	add.w	r8, r0, #4294967295
 800228e:	d22f      	bcs.n	80022f0 <__udivmoddi4+0x2b0>
 8002290:	428d      	cmp	r5, r1
 8002292:	d92d      	bls.n	80022f0 <__udivmoddi4+0x2b0>
 8002294:	3802      	subs	r0, #2
 8002296:	4461      	add	r1, ip
 8002298:	1b49      	subs	r1, r1, r5
 800229a:	b292      	uxth	r2, r2
 800229c:	fbb1 f5f7 	udiv	r5, r1, r7
 80022a0:	fb07 1115 	mls	r1, r7, r5, r1
 80022a4:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80022a8:	fb05 f10e 	mul.w	r1, r5, lr
 80022ac:	4291      	cmp	r1, r2
 80022ae:	d908      	bls.n	80022c2 <__udivmoddi4+0x282>
 80022b0:	eb1c 0202 	adds.w	r2, ip, r2
 80022b4:	f105 38ff 	add.w	r8, r5, #4294967295
 80022b8:	d216      	bcs.n	80022e8 <__udivmoddi4+0x2a8>
 80022ba:	4291      	cmp	r1, r2
 80022bc:	d914      	bls.n	80022e8 <__udivmoddi4+0x2a8>
 80022be:	3d02      	subs	r5, #2
 80022c0:	4462      	add	r2, ip
 80022c2:	1a52      	subs	r2, r2, r1
 80022c4:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80022c8:	e738      	b.n	800213c <__udivmoddi4+0xfc>
 80022ca:	4631      	mov	r1, r6
 80022cc:	4630      	mov	r0, r6
 80022ce:	e708      	b.n	80020e2 <__udivmoddi4+0xa2>
 80022d0:	4639      	mov	r1, r7
 80022d2:	e6e6      	b.n	80020a2 <__udivmoddi4+0x62>
 80022d4:	4610      	mov	r0, r2
 80022d6:	e6fb      	b.n	80020d0 <__udivmoddi4+0x90>
 80022d8:	4548      	cmp	r0, r9
 80022da:	d2a9      	bcs.n	8002230 <__udivmoddi4+0x1f0>
 80022dc:	ebb9 0802 	subs.w	r8, r9, r2
 80022e0:	eb65 0e0c 	sbc.w	lr, r5, ip
 80022e4:	3b01      	subs	r3, #1
 80022e6:	e7a3      	b.n	8002230 <__udivmoddi4+0x1f0>
 80022e8:	4645      	mov	r5, r8
 80022ea:	e7ea      	b.n	80022c2 <__udivmoddi4+0x282>
 80022ec:	462b      	mov	r3, r5
 80022ee:	e794      	b.n	800221a <__udivmoddi4+0x1da>
 80022f0:	4640      	mov	r0, r8
 80022f2:	e7d1      	b.n	8002298 <__udivmoddi4+0x258>
 80022f4:	46d0      	mov	r8, sl
 80022f6:	e77b      	b.n	80021f0 <__udivmoddi4+0x1b0>
 80022f8:	3d02      	subs	r5, #2
 80022fa:	4462      	add	r2, ip
 80022fc:	e732      	b.n	8002164 <__udivmoddi4+0x124>
 80022fe:	4608      	mov	r0, r1
 8002300:	e70a      	b.n	8002118 <__udivmoddi4+0xd8>
 8002302:	4464      	add	r4, ip
 8002304:	3802      	subs	r0, #2
 8002306:	e742      	b.n	800218e <__udivmoddi4+0x14e>

08002308 <__aeabi_idiv0>:
 8002308:	4770      	bx	lr
 800230a:	bf00      	nop

0800230c <__io_putchar>:
/**
  * @brief  Retargets the C library printf function to the USART.
  * @param  None
  * @retval None
  */
PUTCHAR_PROTOTYPE {
 800230c:	b580      	push	{r7, lr}
 800230e:	b082      	sub	sp, #8
 8002310:	af00      	add	r7, sp, #0
 8002312:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart3, (uint8_t*) &ch, 1, 0xFFFF);
 8002314:	1d39      	adds	r1, r7, #4
 8002316:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800231a:	2201      	movs	r2, #1
 800231c:	4803      	ldr	r0, [pc, #12]	; (800232c <__io_putchar+0x20>)
 800231e:	f00b fef3 	bl	800e108 <HAL_UART_Transmit>
	return ch;
 8002322:	687b      	ldr	r3, [r7, #4]
}
 8002324:	4618      	mov	r0, r3
 8002326:	3708      	adds	r7, #8
 8002328:	46bd      	mov	sp, r7
 800232a:	bd80      	pop	{r7, pc}
 800232c:	20000670 	.word	0x20000670

08002330 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002330:	b580      	push	{r7, lr}
 8002332:	b084      	sub	sp, #16
 8002334:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* Copy from FLASH to itcm */
  memcpy(&_sitcm, &_siitcm, ((void*) &_eitcm - (void*) &_sitcm));
 8002336:	4a74      	ldr	r2, [pc, #464]	; (8002508 <main+0x1d8>)
 8002338:	4b74      	ldr	r3, [pc, #464]	; (800250c <main+0x1dc>)
 800233a:	1ad3      	subs	r3, r2, r3
 800233c:	461a      	mov	r2, r3
 800233e:	4974      	ldr	r1, [pc, #464]	; (8002510 <main+0x1e0>)
 8002340:	4872      	ldr	r0, [pc, #456]	; (800250c <main+0x1dc>)
 8002342:	f019 f9d4 	bl	801b6ee <memcpy>
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8002346:	4b73      	ldr	r3, [pc, #460]	; (8002514 <main+0x1e4>)
 8002348:	695b      	ldr	r3, [r3, #20]
 800234a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800234e:	2b00      	cmp	r3, #0
 8002350:	d11b      	bne.n	800238a <main+0x5a>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8002352:	f3bf 8f4f 	dsb	sy
}
 8002356:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8002358:	f3bf 8f6f 	isb	sy
}
 800235c:	bf00      	nop

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 800235e:	4b6d      	ldr	r3, [pc, #436]	; (8002514 <main+0x1e4>)
 8002360:	2200      	movs	r2, #0
 8002362:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8002366:	f3bf 8f4f 	dsb	sy
}
 800236a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800236c:	f3bf 8f6f 	isb	sy
}
 8002370:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8002372:	4b68      	ldr	r3, [pc, #416]	; (8002514 <main+0x1e4>)
 8002374:	695b      	ldr	r3, [r3, #20]
 8002376:	4a67      	ldr	r2, [pc, #412]	; (8002514 <main+0x1e4>)
 8002378:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800237c:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 800237e:	f3bf 8f4f 	dsb	sy
}
 8002382:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8002384:	f3bf 8f6f 	isb	sy
}
 8002388:	e000      	b.n	800238c <main+0x5c>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 800238a:	bf00      	nop
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 800238c:	4b61      	ldr	r3, [pc, #388]	; (8002514 <main+0x1e4>)
 800238e:	695b      	ldr	r3, [r3, #20]
 8002390:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002394:	2b00      	cmp	r3, #0
 8002396:	d138      	bne.n	800240a <main+0xda>

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 8002398:	4b5e      	ldr	r3, [pc, #376]	; (8002514 <main+0x1e4>)
 800239a:	2200      	movs	r2, #0
 800239c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 80023a0:	f3bf 8f4f 	dsb	sy
}
 80023a4:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 80023a6:	4b5b      	ldr	r3, [pc, #364]	; (8002514 <main+0x1e4>)
 80023a8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80023ac:	60fb      	str	r3, [r7, #12]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	0b5b      	lsrs	r3, r3, #13
 80023b2:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80023b6:	60bb      	str	r3, [r7, #8]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	08db      	lsrs	r3, r3, #3
 80023bc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80023c0:	607b      	str	r3, [r7, #4]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80023c2:	68bb      	ldr	r3, [r7, #8]
 80023c4:	015a      	lsls	r2, r3, #5
 80023c6:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 80023ca:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 80023cc:	687a      	ldr	r2, [r7, #4]
 80023ce:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80023d0:	4950      	ldr	r1, [pc, #320]	; (8002514 <main+0x1e4>)
 80023d2:	4313      	orrs	r3, r2
 80023d4:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	1e5a      	subs	r2, r3, #1
 80023dc:	607a      	str	r2, [r7, #4]
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d1ef      	bne.n	80023c2 <main+0x92>
    } while(sets-- != 0U);
 80023e2:	68bb      	ldr	r3, [r7, #8]
 80023e4:	1e5a      	subs	r2, r3, #1
 80023e6:	60ba      	str	r2, [r7, #8]
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d1e5      	bne.n	80023b8 <main+0x88>
  __ASM volatile ("dsb 0xF":::"memory");
 80023ec:	f3bf 8f4f 	dsb	sy
}
 80023f0:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 80023f2:	4b48      	ldr	r3, [pc, #288]	; (8002514 <main+0x1e4>)
 80023f4:	695b      	ldr	r3, [r3, #20]
 80023f6:	4a47      	ldr	r2, [pc, #284]	; (8002514 <main+0x1e4>)
 80023f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80023fc:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80023fe:	f3bf 8f4f 	dsb	sy
}
 8002402:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8002404:	f3bf 8f6f 	isb	sy
}
 8002408:	e000      	b.n	800240c <main+0xdc>
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 800240a:	bf00      	nop
  SCB_EnableDCache();

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800240c:	f001 fece 	bl	80041ac <HAL_Init>

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 8002410:	f000 ffc2 	bl	8003398 <MPU_Config>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002414:	f000 f98a 	bl	800272c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002418:	f000 fe36 	bl	8003088 <MX_GPIO_Init>
  MX_LPTIM1_Init();
 800241c:	f000 fc2a 	bl	8002c74 <MX_LPTIM1_Init>
  MX_DAC1_Init();
 8002420:	f000 faa4 	bl	800296c <MX_DAC1_Init>
  MX_USART3_UART_Init();
 8002424:	f000 fde2 	bl	8002fec <MX_USART3_UART_Init>
  MX_TIM3_Init();
 8002428:	f000 fcf4 	bl	8002e14 <MX_TIM3_Init>
  MX_TIM1_Init();
 800242c:	f000 fc50 	bl	8002cd0 <MX_TIM1_Init>
  MX_HRTIM_Init();
 8002430:	f000 face 	bl	80029d0 <MX_HRTIM_Init>
  MX_ADC3_Init();
 8002434:	f000 fa38 	bl	80028a8 <MX_ADC3_Init>
  MX_LWIP_Init();
 8002438:	f00c ff7a 	bl	800f330 <MX_LWIP_Init>
  MX_TIM2_Init();
 800243c:	f000 fc9c 	bl	8002d78 <MX_TIM2_Init>
  MX_TIM5_Init();
 8002440:	f000 fd86 	bl	8002f50 <MX_TIM5_Init>
  MX_TIM4_Init();
 8002444:	f000 fd34 	bl	8002eb0 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
  printf("\033c"); //clears screen
 8002448:	4833      	ldr	r0, [pc, #204]	; (8002518 <main+0x1e8>)
 800244a:	f018 ff35 	bl	801b2b8 <iprintf>
  printf("Atomic Clock - Source __TIMESTAMP__: %s\r\n", __TIMESTAMP__);
 800244e:	4933      	ldr	r1, [pc, #204]	; (800251c <main+0x1ec>)
 8002450:	4833      	ldr	r0, [pc, #204]	; (8002520 <main+0x1f0>)
 8002452:	f018 ff31 	bl	801b2b8 <iprintf>
		}
		#ifdef MW_VERBOSE
			printf("MW power setting (LO2GAIN): 0x%x \r\n", MW_power);
		#endif	//MW_VERBOSE
	#else //SYNTH_ENABLE
		printf("WARNING - MW Synthesiser is disabled\r\n");
 8002456:	4833      	ldr	r0, [pc, #204]	; (8002524 <main+0x1f4>)
 8002458:	f018 ff94 	bl	801b384 <puts>
	#endif //SYNTH_ENABLE

	/* Start a low power timer to flash an LED approximately every second */
	if (HAL_LPTIM_Counter_Start_IT(&hlptim1, 1024) != HAL_OK) {
 800245c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002460:	4831      	ldr	r0, [pc, #196]	; (8002528 <main+0x1f8>)
 8002462:	f007 f9ed 	bl	8009840 <HAL_LPTIM_Counter_Start_IT>
 8002466:	4603      	mov	r3, r0
 8002468:	2b00      	cmp	r3, #0
 800246a:	d004      	beq.n	8002476 <main+0x146>
		printf("Failed to start slow flashing LED!\r\n");
 800246c:	482f      	ldr	r0, [pc, #188]	; (800252c <main+0x1fc>)
 800246e:	f018 ff89 	bl	801b384 <puts>
		Error_Handler();
 8002472:	f000 ffe3 	bl	800343c <Error_Handler>
	}

	/* Start the DAC and zero its output */
	if (HAL_DAC_Start(&hdac1, DAC_CHANNEL_1) != HAL_OK) {
 8002476:	2100      	movs	r1, #0
 8002478:	482d      	ldr	r0, [pc, #180]	; (8002530 <main+0x200>)
 800247a:	f003 fe97 	bl	80061ac <HAL_DAC_Start>
 800247e:	4603      	mov	r3, r0
 8002480:	2b00      	cmp	r3, #0
 8002482:	d004      	beq.n	800248e <main+0x15e>
		printf("Failure to initialise DAC \r\n");
 8002484:	482b      	ldr	r0, [pc, #172]	; (8002534 <main+0x204>)
 8002486:	f018 ff7d 	bl	801b384 <puts>
		Error_Handler();
 800248a:	f000 ffd7 	bl	800343c <Error_Handler>
	}
	printf("Setting DAC output to 1.00V \r\n");
 800248e:	482a      	ldr	r0, [pc, #168]	; (8002538 <main+0x208>)
 8002490:	f018 ff78 	bl	801b384 <puts>
	if(HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R, 1241) != HAL_OK){
 8002494:	f240 43d9 	movw	r3, #1241	; 0x4d9
 8002498:	2200      	movs	r2, #0
 800249a:	2100      	movs	r1, #0
 800249c:	4824      	ldr	r0, [pc, #144]	; (8002530 <main+0x200>)
 800249e:	f003 fed7 	bl	8006250 <HAL_DAC_SetValue>
 80024a2:	4603      	mov	r3, r0
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d004      	beq.n	80024b2 <main+0x182>
			printf("DAC setup failed!\r\n");
 80024a8:	4824      	ldr	r0, [pc, #144]	; (800253c <main+0x20c>)
 80024aa:	f018 ff6b 	bl	801b384 <puts>
		Error_Handler();
 80024ae:	f000 ffc5 	bl	800343c <Error_Handler>
	}

	HAL_GPIO_WritePin(LASER_TUNING_GPIO_Port, LASER_TUNING_Pin, GPIO_PIN_SET); // Laser_tuning output high
 80024b2:	2201      	movs	r2, #1
 80024b4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80024b8:	4821      	ldr	r0, [pc, #132]	; (8002540 <main+0x210>)
 80024ba:	f005 fdb5 	bl	8008028 <HAL_GPIO_WritePin>

	/* Fire up the ADC
	 * external trigger, single conversion selected in ioc file
	 * calibrate ADC for better accuracy and start it w/ interrupt
	 */
	if(HAL_ADCEx_Calibration_Start(&hadc3, ADC_CALIB_OFFSET, ADC_SINGLE_ENDED) != HAL_OK){
 80024be:	f240 72ff 	movw	r2, #2047	; 0x7ff
 80024c2:	2100      	movs	r1, #0
 80024c4:	481f      	ldr	r0, [pc, #124]	; (8002544 <main+0x214>)
 80024c6:	f003 fc2d 	bl	8005d24 <HAL_ADCEx_Calibration_Start>
 80024ca:	4603      	mov	r3, r0
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d004      	beq.n	80024da <main+0x1aa>
		printf("ADC calibration failure \r\n");
 80024d0:	481d      	ldr	r0, [pc, #116]	; (8002548 <main+0x218>)
 80024d2:	f018 ff57 	bl	801b384 <puts>
		Error_Handler();
 80024d6:	f000 ffb1 	bl	800343c <Error_Handler>
	}
	//Start the ADC with interrupts enabled
	if(HAL_ADC_Start_IT(&hadc3) != HAL_OK){
 80024da:	481a      	ldr	r0, [pc, #104]	; (8002544 <main+0x214>)
 80024dc:	f002 fb10 	bl	8004b00 <HAL_ADC_Start_IT>
 80024e0:	4603      	mov	r3, r0
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d004      	beq.n	80024f0 <main+0x1c0>
		printf("Failed to start ADC with interrupt capability \r\n");
 80024e6:	4819      	ldr	r0, [pc, #100]	; (800254c <main+0x21c>)
 80024e8:	f018 ff4c 	bl	801b384 <puts>
	                Error_Handler();
 80024ec:	f000 ffa6 	bl	800343c <Error_Handler>
	}
	printf("ADC calibrated successfully and interrupt callback enabled \r\n");
 80024f0:	4817      	ldr	r0, [pc, #92]	; (8002550 <main+0x220>)
 80024f2:	f018 ff47 	bl	801b384 <puts>
	/* Calculate the MW sweep settings
	 * Notes:
	 * Measure the period of a POP cycle *AFTER* the ADC has been initialised
	 * Calculate sweep settings after first POP calibration routine
	 */
	start_timer(SWEEP_TIMER); //reset SWEEP_TIMER and start counting
 80024f6:	4b17      	ldr	r3, [pc, #92]	; (8002554 <main+0x224>)
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	4618      	mov	r0, r3
 80024fc:	f01b f848 	bl	801d590 <__start_timer_veneer>
	start_POP_calibration(true);
 8002500:	2001      	movs	r0, #1
 8002502:	f01b f859 	bl	801d5b8 <__start_POP_calibration_veneer>
	//loop here until period of POP cycle has been measured or 3s has elapsed
	//When correctly connected, POP cycle measurement should take 1.3s
	while (!POP_period_us && (check_timer(SWEEP_TIMER) < 3000000)) {
 8002506:	e029      	b.n	800255c <main+0x22c>
 8002508:	00001c88 	.word	0x00001c88
 800250c:	00000000 	.word	0x00000000
 8002510:	08000298 	.word	0x08000298
 8002514:	e000ed00 	.word	0xe000ed00
 8002518:	0801d904 	.word	0x0801d904
 800251c:	0801d908 	.word	0x0801d908
 8002520:	0801d924 	.word	0x0801d924
 8002524:	0801d950 	.word	0x0801d950
 8002528:	200004bc 	.word	0x200004bc
 800252c:	0801d978 	.word	0x0801d978
 8002530:	200003cc 	.word	0x200003cc
 8002534:	0801d99c 	.word	0x0801d99c
 8002538:	0801d9b8 	.word	0x0801d9b8
 800253c:	0801d9d8 	.word	0x0801d9d8
 8002540:	58020400 	.word	0x58020400
 8002544:	20000368 	.word	0x20000368
 8002548:	0801d9ec 	.word	0x0801d9ec
 800254c:	0801da08 	.word	0x0801da08
 8002550:	0801da38 	.word	0x0801da38
 8002554:	2000012c 	.word	0x2000012c
		MW_update();
 8002558:	f01b f83a 	bl	801d5d0 <__MW_update_veneer>
	while (!POP_period_us && (check_timer(SWEEP_TIMER) < 3000000)) {
 800255c:	4b60      	ldr	r3, [pc, #384]	; (80026e0 <main+0x3b0>)
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	2b00      	cmp	r3, #0
 8002562:	d108      	bne.n	8002576 <main+0x246>
 8002564:	4b5f      	ldr	r3, [pc, #380]	; (80026e4 <main+0x3b4>)
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	4618      	mov	r0, r3
 800256a:	f01b f835 	bl	801d5d8 <__check_timer_veneer>
 800256e:	4603      	mov	r3, r0
 8002570:	4a5d      	ldr	r2, [pc, #372]	; (80026e8 <main+0x3b8>)
 8002572:	4293      	cmp	r3, r2
 8002574:	d9f0      	bls.n	8002558 <main+0x228>
//		printf("POP_period_us %lu, SWEEP_TIMER value %lu \r\n", POP_period_us, check_timer(SWEEP_TIMER));
	}
//	printf("Finished loop - POP_period_us %lu, SWEEP_TIMER value %lu \r\n", POP_period_us, check_timer(SWEEP_TIMER));
	stop_timer(SWEEP_TIMER); //stop SWEEP_TIMER
 8002576:	4b5b      	ldr	r3, [pc, #364]	; (80026e4 <main+0x3b4>)
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	4618      	mov	r0, r3
 800257c:	f01b f824 	bl	801d5c8 <__stop_timer_veneer>
	if (!POP_period_us) {//if the calibration loop timed out
 8002580:	4b57      	ldr	r3, [pc, #348]	; (80026e0 <main+0x3b0>)
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	2b00      	cmp	r3, #0
 8002586:	d102      	bne.n	800258e <main+0x25e>
		printf("WARNING - STM32 is not receiving a periodic sample from the FPGA \r\n");
 8002588:	4858      	ldr	r0, [pc, #352]	; (80026ec <main+0x3bc>)
 800258a:	f018 fefb 	bl	801b384 <puts>
	}

//	initiate_MW_calibration_sweep(POP_period);
//	calc_fixed_time_MW_sweep(3035735122, 1000, 20, ADD_SCOPE_SYNC_TIME); //1.5kHz sweep, 20s re-centred
//	calc_fixed_time_MW_sweep(HYPERFINE + MW_DELTA, 10, 3600, ADD_SCOPE_SYNC_TIME); //10Hz sweep, 1hr
	calc_fixed_time_MW_sweep(HYPERFINE + MW_DELTA, 10000, 50, ADD_SCOPE_SYNC_TIME); //10kHz sweep, 50s
 800258e:	ed9f 6b4a 	vldr	d6, [pc, #296]	; 80026b8 <main+0x388>
 8002592:	ed9f 7b4b 	vldr	d7, [pc, #300]	; 80026c0 <main+0x390>
 8002596:	ee36 7b07 	vadd.f64	d7, d6, d7
 800259a:	2000      	movs	r0, #0
 800259c:	ed9f 2b4a 	vldr	d2, [pc, #296]	; 80026c8 <main+0x398>
 80025a0:	ed9f 1b4b 	vldr	d1, [pc, #300]	; 80026d0 <main+0x3a0>
 80025a4:	eeb0 0b47 	vmov.f64	d0, d7
 80025a8:	f01b f81a 	bl	801d5e0 <__calc_fixed_time_MW_sweep_veneer>

//	telnet_client_init();
//	bool temp_bool;
//	temp_bool = telnet_client_init(); //initialise telnet client
//	if(!temp_bool) {
	if(telnet_client_init()) {
 80025ac:	f01a fffc 	bl	801d5a8 <__telnet_client_init_veneer>
 80025b0:	4603      	mov	r3, r0
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d004      	beq.n	80025c0 <main+0x290>
		printf("Failed to send telnet connection request \r\n");
 80025b6:	484e      	ldr	r0, [pc, #312]	; (80026f0 <main+0x3c0>)
 80025b8:	f018 fee4 	bl	801b384 <puts>
	                Error_Handler();
 80025bc:	f000 ff3e 	bl	800343c <Error_Handler>
	}
//	printf("Telnet_client_init returns: %i\r\n", temp_bool);
	printf("Telnet connection request sent and callbacks enabled\r\n");
 80025c0:	484c      	ldr	r0, [pc, #304]	; (80026f4 <main+0x3c4>)
 80025c2:	f018 fedf 	bl	801b384 <puts>

	init_ldc_comms();
 80025c6:	f01a ffeb 	bl	801d5a0 <__init_ldc_comms_veneer>
	if(!init_ldc_comms()) { //initialise comms with LDC501
 80025ca:	f01a ffe9 	bl	801d5a0 <__init_ldc_comms_veneer>
 80025ce:	4603      	mov	r3, r0
 80025d0:	f083 0301 	eor.w	r3, r3, #1
 80025d4:	b2db      	uxtb	r3, r3
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d004      	beq.n	80025e4 <main+0x2b4>
		printf("Failed to initialise comms with LDC501\r\n");
 80025da:	4847      	ldr	r0, [pc, #284]	; (80026f8 <main+0x3c8>)
 80025dc:	f018 fed2 	bl	801b384 <puts>
	                Error_Handler();
 80025e0:	f000 ff2c 	bl	800343c <Error_Handler>
	}
	printf("Comms established with LDC501\r\n");
 80025e4:	4845      	ldr	r0, [pc, #276]	; (80026fc <main+0x3cc>)
 80025e6:	f018 fecd 	bl	801b384 <puts>

	if(!init_ldc_tec() != ERR_OK) { //fire up TEC
 80025ea:	f01a ffe1 	bl	801d5b0 <__init_ldc_tec_veneer>
 80025ee:	4603      	mov	r3, r0
 80025f0:	f083 0301 	eor.w	r3, r3, #1
 80025f4:	b2db      	uxtb	r3, r3
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d004      	beq.n	8002604 <main+0x2d4>
		printf("Failed to turn on TEC\r\n");
 80025fa:	4841      	ldr	r0, [pc, #260]	; (8002700 <main+0x3d0>)
 80025fc:	f018 fec2 	bl	801b384 <puts>
	                Error_Handler();
 8002600:	f000 ff1c 	bl	800343c <Error_Handler>
	}
	printf("Laser TEC enabled\r\n");
 8002604:	483f      	ldr	r0, [pc, #252]	; (8002704 <main+0x3d4>)
 8002606:	f018 febd 	bl	801b384 <puts>

	set_laser_current(ild);
 800260a:	4b3f      	ldr	r3, [pc, #252]	; (8002708 <main+0x3d8>)
 800260c:	ed93 7b00 	vldr	d7, [r3]
 8002610:	eeb0 0b47 	vmov.f64	d0, d7
 8002614:	f01a ffe8 	bl	801d5e8 <__set_laser_current_veneer>
	ild = 171.45678;
 8002618:	493b      	ldr	r1, [pc, #236]	; (8002708 <main+0x3d8>)
 800261a:	a32f      	add	r3, pc, #188	; (adr r3, 80026d8 <main+0x3a8>)
 800261c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002620:	e9c1 2300 	strd	r2, r3, [r1]
	set_laser_current(ild);
 8002624:	4b38      	ldr	r3, [pc, #224]	; (8002708 <main+0x3d8>)
 8002626:	ed93 7b00 	vldr	d7, [r3]
 800262a:	eeb0 0b47 	vmov.f64	d0, d7
 800262e:	f01a ffdb 	bl	801d5e8 <__set_laser_current_veneer>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	printf("Entering main while loop\r\n");
 8002632:	4836      	ldr	r0, [pc, #216]	; (800270c <main+0x3dc>)
 8002634:	f018 fea6 	bl	801b384 <puts>
//		if (pin_status != last_pin_status) {
//			printf("Blue button status: %u \r\n", pin_status);
//			last_pin_status = pin_status;
//		}

		blue_button_status = HAL_GPIO_ReadPin(BLUE_BUTTON_GPIO_Port, BLUE_BUTTON_Pin);
 8002638:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800263c:	4834      	ldr	r0, [pc, #208]	; (8002710 <main+0x3e0>)
 800263e:	f005 fcdb 	bl	8007ff8 <HAL_GPIO_ReadPin>
 8002642:	4603      	mov	r3, r0
 8002644:	2b00      	cmp	r3, #0
 8002646:	bf14      	ite	ne
 8002648:	2301      	movne	r3, #1
 800264a:	2300      	moveq	r3, #0
 800264c:	b2da      	uxtb	r2, r3
 800264e:	4b31      	ldr	r3, [pc, #196]	; (8002714 <main+0x3e4>)
 8002650:	701a      	strb	r2, [r3, #0]
		if (blue_button_status) {// If blue button is pressed
 8002652:	4b30      	ldr	r3, [pc, #192]	; (8002714 <main+0x3e4>)
 8002654:	781b      	ldrb	r3, [r3, #0]
 8002656:	b2db      	uxtb	r3, r3
 8002658:	2b00      	cmp	r3, #0
 800265a:	d020      	beq.n	800269e <main+0x36e>
			printf("Blue button pressed....\r\n");
 800265c:	482e      	ldr	r0, [pc, #184]	; (8002718 <main+0x3e8>)
 800265e:	f018 fe91 	bl	801b384 <puts>
			printf("Initialising comms with LDC501\r\n");
 8002662:	482e      	ldr	r0, [pc, #184]	; (800271c <main+0x3ec>)
 8002664:	f018 fe8e 	bl	801b384 <puts>
			init_ldc_comms();
 8002668:	f01a ff9a 	bl	801d5a0 <__init_ldc_comms_veneer>
//			} else {
//				printf("Initiating sweep.\r\n");
//				mw_sweep_started = true;
//				start_continuous_MW_sweep();
//			}
			while(blue_button_status) {//remain here polling button until it is released
 800266c:	e012      	b.n	8002694 <main+0x364>
				timer_delay(SLOW_TIMER, 100); //10ms delay
 800266e:	4b2c      	ldr	r3, [pc, #176]	; (8002720 <main+0x3f0>)
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	2164      	movs	r1, #100	; 0x64
 8002674:	4618      	mov	r0, r3
 8002676:	f01a ff8f 	bl	801d598 <__timer_delay_veneer>
				blue_button_status = HAL_GPIO_ReadPin(BLUE_BUTTON_GPIO_Port, BLUE_BUTTON_Pin);
 800267a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800267e:	4824      	ldr	r0, [pc, #144]	; (8002710 <main+0x3e0>)
 8002680:	f005 fcba 	bl	8007ff8 <HAL_GPIO_ReadPin>
 8002684:	4603      	mov	r3, r0
 8002686:	2b00      	cmp	r3, #0
 8002688:	bf14      	ite	ne
 800268a:	2301      	movne	r3, #1
 800268c:	2300      	moveq	r3, #0
 800268e:	b2da      	uxtb	r2, r3
 8002690:	4b20      	ldr	r3, [pc, #128]	; (8002714 <main+0x3e4>)
 8002692:	701a      	strb	r2, [r3, #0]
			while(blue_button_status) {//remain here polling button until it is released
 8002694:	4b1f      	ldr	r3, [pc, #124]	; (8002714 <main+0x3e4>)
 8002696:	781b      	ldrb	r3, [r3, #0]
 8002698:	b2db      	uxtb	r3, r3
 800269a:	2b00      	cmp	r3, #0
 800269c:	d1e7      	bne.n	800266e <main+0x33e>
			}
		}

		if (mw_sweep_started) {//won't execute until the first time the blue button is pressed
 800269e:	4b21      	ldr	r3, [pc, #132]	; (8002724 <main+0x3f4>)
 80026a0:	781b      	ldrb	r3, [r3, #0]
//			run_sweep();
//			HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET); //turn off red LED
			//printf("Sweep complete.\r\n");
			//printf("LO2GAIN: 0x%x \r\n", MW_power);
		}
		MW_update();
 80026a2:	f01a ff95 	bl	801d5d0 <__MW_update_veneer>

	    /* Ethernet handling */
		ethernetif_input(&gnetif);
 80026a6:	4820      	ldr	r0, [pc, #128]	; (8002728 <main+0x3f8>)
 80026a8:	f00d f8b0 	bl	800f80c <ethernetif_input>
		sys_check_timeouts();
 80026ac:	f015 fb50 	bl	8017d50 <sys_check_timeouts>
		blue_button_status = HAL_GPIO_ReadPin(BLUE_BUTTON_GPIO_Port, BLUE_BUTTON_Pin);
 80026b0:	e7c2      	b.n	8002638 <main+0x308>
 80026b2:	bf00      	nop
 80026b4:	f3af 8000 	nop.w
 80026b8:	6d600000 	.word	0x6d600000
 80026bc:	41e69e35 	.word	0x41e69e35
 80026c0:	00000000 	.word	0x00000000
 80026c4:	408f4000 	.word	0x408f4000
 80026c8:	00000000 	.word	0x00000000
 80026cc:	40490000 	.word	0x40490000
 80026d0:	00000000 	.word	0x00000000
 80026d4:	40c38800 	.word	0x40c38800
 80026d8:	f1172ef1 	.word	0xf1172ef1
 80026dc:	40656e9d 	.word	0x40656e9d
 80026e0:	20000708 	.word	0x20000708
 80026e4:	2000012c 	.word	0x2000012c
 80026e8:	002dc6bf 	.word	0x002dc6bf
 80026ec:	0801da78 	.word	0x0801da78
 80026f0:	0801dabc 	.word	0x0801dabc
 80026f4:	0801dae8 	.word	0x0801dae8
 80026f8:	0801db20 	.word	0x0801db20
 80026fc:	0801db48 	.word	0x0801db48
 8002700:	0801db68 	.word	0x0801db68
 8002704:	0801db80 	.word	0x0801db80
 8002708:	20000108 	.word	0x20000108
 800270c:	0801db94 	.word	0x0801db94
 8002710:	58020800 	.word	0x58020800
 8002714:	20000705 	.word	0x20000705
 8002718:	0801dbb0 	.word	0x0801dbb0
 800271c:	0801dbcc 	.word	0x0801dbcc
 8002720:	20000124 	.word	0x20000124
 8002724:	20000704 	.word	0x20000704
 8002728:	20000774 	.word	0x20000774

0800272c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800272c:	b580      	push	{r7, lr}
 800272e:	b0a4      	sub	sp, #144	; 0x90
 8002730:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002732:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8002736:	224c      	movs	r2, #76	; 0x4c
 8002738:	2100      	movs	r1, #0
 800273a:	4618      	mov	r0, r3
 800273c:	f018 ff4c 	bl	801b5d8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002740:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002744:	2220      	movs	r2, #32
 8002746:	2100      	movs	r1, #0
 8002748:	4618      	mov	r0, r3
 800274a:	f018 ff45 	bl	801b5d8 <memset>
  RCC_CRSInitTypeDef RCC_CRSInitStruct = {0};
 800274e:	f107 030c 	add.w	r3, r7, #12
 8002752:	2200      	movs	r2, #0
 8002754:	601a      	str	r2, [r3, #0]
 8002756:	605a      	str	r2, [r3, #4]
 8002758:	609a      	str	r2, [r3, #8]
 800275a:	60da      	str	r2, [r3, #12]
 800275c:	611a      	str	r2, [r3, #16]
 800275e:	615a      	str	r2, [r3, #20]

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8002760:	2002      	movs	r0, #2
 8002762:	f007 fbcb 	bl	8009efc <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002766:	2300      	movs	r3, #0
 8002768:	60bb      	str	r3, [r7, #8]
 800276a:	4b4c      	ldr	r3, [pc, #304]	; (800289c <SystemClock_Config+0x170>)
 800276c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800276e:	4a4b      	ldr	r2, [pc, #300]	; (800289c <SystemClock_Config+0x170>)
 8002770:	f023 0301 	bic.w	r3, r3, #1
 8002774:	62d3      	str	r3, [r2, #44]	; 0x2c
 8002776:	4b49      	ldr	r3, [pc, #292]	; (800289c <SystemClock_Config+0x170>)
 8002778:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800277a:	f003 0301 	and.w	r3, r3, #1
 800277e:	60bb      	str	r3, [r7, #8]
 8002780:	4b47      	ldr	r3, [pc, #284]	; (80028a0 <SystemClock_Config+0x174>)
 8002782:	699b      	ldr	r3, [r3, #24]
 8002784:	4a46      	ldr	r2, [pc, #280]	; (80028a0 <SystemClock_Config+0x174>)
 8002786:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800278a:	6193      	str	r3, [r2, #24]
 800278c:	4b44      	ldr	r3, [pc, #272]	; (80028a0 <SystemClock_Config+0x174>)
 800278e:	699b      	ldr	r3, [r3, #24]
 8002790:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002794:	60bb      	str	r3, [r7, #8]
 8002796:	68bb      	ldr	r3, [r7, #8]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8002798:	bf00      	nop
 800279a:	4b41      	ldr	r3, [pc, #260]	; (80028a0 <SystemClock_Config+0x174>)
 800279c:	699b      	ldr	r3, [r3, #24]
 800279e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80027a2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80027a6:	d1f8      	bne.n	800279a <SystemClock_Config+0x6e>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80027a8:	f007 fb98 	bl	8009edc <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80027ac:	f001 fdb4 	bl	8004318 <HAL_GetREVID>
 80027b0:	4b3c      	ldr	r3, [pc, #240]	; (80028a4 <SystemClock_Config+0x178>)
 80027b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027b4:	4a3b      	ldr	r2, [pc, #236]	; (80028a4 <SystemClock_Config+0x178>)
 80027b6:	f023 0318 	bic.w	r3, r3, #24
 80027ba:	6713      	str	r3, [r2, #112]	; 0x70

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE
 80027bc:	2325      	movs	r3, #37	; 0x25
 80027be:	647b      	str	r3, [r7, #68]	; 0x44
                              |RCC_OSCILLATORTYPE_LSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80027c0:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80027c4:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80027c6:	2301      	movs	r3, #1
 80027c8:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80027ca:	2301      	movs	r3, #1
 80027cc:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80027ce:	2302      	movs	r3, #2
 80027d0:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80027d2:	2302      	movs	r3, #2
 80027d4:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLM = 1;
 80027d6:	2301      	movs	r3, #1
 80027d8:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLN = 80;
 80027da:	2350      	movs	r3, #80	; 0x50
 80027dc:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.PLL.PLLP = 2;
 80027de:	2302      	movs	r3, #2
 80027e0:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80027e2:	2304      	movs	r3, #4
 80027e4:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80027e6:	2302      	movs	r3, #2
 80027e8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 80027ec:	230c      	movs	r3, #12
 80027ee:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80027f2:	2300      	movs	r3, #0
 80027f4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80027f8:	2300      	movs	r3, #0
 80027fa:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80027fe:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8002802:	4618      	mov	r0, r3
 8002804:	f007 fbb4 	bl	8009f70 <HAL_RCC_OscConfig>
 8002808:	4603      	mov	r3, r0
 800280a:	2b00      	cmp	r3, #0
 800280c:	d001      	beq.n	8002812 <SystemClock_Config+0xe6>
  {
    Error_Handler();
 800280e:	f000 fe15 	bl	800343c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002812:	233f      	movs	r3, #63	; 0x3f
 8002814:	627b      	str	r3, [r7, #36]	; 0x24
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002816:	2303      	movs	r3, #3
 8002818:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800281a:	2300      	movs	r3, #0
 800281c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV4;
 800281e:	2309      	movs	r3, #9
 8002820:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8002822:	2300      	movs	r3, #0
 8002824:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 8002826:	2300      	movs	r3, #0
 8002828:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV16;
 800282a:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 800282e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8002830:	2300      	movs	r3, #0
 8002832:	643b      	str	r3, [r7, #64]	; 0x40

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8002834:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002838:	2101      	movs	r1, #1
 800283a:	4618      	mov	r0, r3
 800283c:	f007 fff2 	bl	800a824 <HAL_RCC_ClockConfig>
 8002840:	4603      	mov	r3, r0
 8002842:	2b00      	cmp	r3, #0
 8002844:	d001      	beq.n	800284a <SystemClock_Config+0x11e>
  {
    Error_Handler();
 8002846:	f000 fdf9 	bl	800343c <Error_Handler>
  }

  /** Enables the Clock Security System
  */
  HAL_RCC_EnableCSS();
 800284a:	f008 f9a1 	bl	800ab90 <HAL_RCC_EnableCSS>

  /** Enable the SYSCFG APB clock
  */
  __HAL_RCC_CRS_CLK_ENABLE();
 800284e:	4b15      	ldr	r3, [pc, #84]	; (80028a4 <SystemClock_Config+0x178>)
 8002850:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8002854:	4a13      	ldr	r2, [pc, #76]	; (80028a4 <SystemClock_Config+0x178>)
 8002856:	f043 0302 	orr.w	r3, r3, #2
 800285a:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 800285e:	4b11      	ldr	r3, [pc, #68]	; (80028a4 <SystemClock_Config+0x178>)
 8002860:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8002864:	f003 0302 	and.w	r3, r3, #2
 8002868:	607b      	str	r3, [r7, #4]
 800286a:	687b      	ldr	r3, [r7, #4]

  /** Configures CRS
  */
  RCC_CRSInitStruct.Prescaler = RCC_CRS_SYNC_DIV1;
 800286c:	2300      	movs	r3, #0
 800286e:	60fb      	str	r3, [r7, #12]
  RCC_CRSInitStruct.Source = RCC_CRS_SYNC_SOURCE_LSE;
 8002870:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8002874:	613b      	str	r3, [r7, #16]
  RCC_CRSInitStruct.Polarity = RCC_CRS_SYNC_POLARITY_RISING;
 8002876:	2300      	movs	r3, #0
 8002878:	617b      	str	r3, [r7, #20]
  RCC_CRSInitStruct.ReloadValue = __HAL_RCC_CRS_RELOADVALUE_CALCULATE(48000000,32768);
 800287a:	f240 53b7 	movw	r3, #1463	; 0x5b7
 800287e:	61bb      	str	r3, [r7, #24]
  RCC_CRSInitStruct.ErrorLimitValue = 34;
 8002880:	2322      	movs	r3, #34	; 0x22
 8002882:	61fb      	str	r3, [r7, #28]
  RCC_CRSInitStruct.HSI48CalibrationValue = 32;
 8002884:	2320      	movs	r3, #32
 8002886:	623b      	str	r3, [r7, #32]

  HAL_RCCEx_CRSConfig(&RCC_CRSInitStruct);
 8002888:	f107 030c 	add.w	r3, r7, #12
 800288c:	4618      	mov	r0, r3
 800288e:	f00a ff1b 	bl	800d6c8 <HAL_RCCEx_CRSConfig>
}
 8002892:	bf00      	nop
 8002894:	3790      	adds	r7, #144	; 0x90
 8002896:	46bd      	mov	sp, r7
 8002898:	bd80      	pop	{r7, pc}
 800289a:	bf00      	nop
 800289c:	58000400 	.word	0x58000400
 80028a0:	58024800 	.word	0x58024800
 80028a4:	58024400 	.word	0x58024400

080028a8 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 80028a8:	b580      	push	{r7, lr}
 80028aa:	b088      	sub	sp, #32
 80028ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80028ae:	1d3b      	adds	r3, r7, #4
 80028b0:	2200      	movs	r2, #0
 80028b2:	601a      	str	r2, [r3, #0]
 80028b4:	605a      	str	r2, [r3, #4]
 80028b6:	609a      	str	r2, [r3, #8]
 80028b8:	60da      	str	r2, [r3, #12]
 80028ba:	611a      	str	r2, [r3, #16]
 80028bc:	615a      	str	r2, [r3, #20]
 80028be:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 80028c0:	4b28      	ldr	r3, [pc, #160]	; (8002964 <MX_ADC3_Init+0xbc>)
 80028c2:	4a29      	ldr	r2, [pc, #164]	; (8002968 <MX_ADC3_Init+0xc0>)
 80028c4:	601a      	str	r2, [r3, #0]
  hadc3.Init.Resolution = ADC_RESOLUTION_16B;
 80028c6:	4b27      	ldr	r3, [pc, #156]	; (8002964 <MX_ADC3_Init+0xbc>)
 80028c8:	2200      	movs	r2, #0
 80028ca:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80028cc:	4b25      	ldr	r3, [pc, #148]	; (8002964 <MX_ADC3_Init+0xbc>)
 80028ce:	2200      	movs	r2, #0
 80028d0:	60da      	str	r2, [r3, #12]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80028d2:	4b24      	ldr	r3, [pc, #144]	; (8002964 <MX_ADC3_Init+0xbc>)
 80028d4:	2204      	movs	r2, #4
 80028d6:	611a      	str	r2, [r3, #16]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 80028d8:	4b22      	ldr	r3, [pc, #136]	; (8002964 <MX_ADC3_Init+0xbc>)
 80028da:	2200      	movs	r2, #0
 80028dc:	751a      	strb	r2, [r3, #20]
  hadc3.Init.ContinuousConvMode = DISABLE;
 80028de:	4b21      	ldr	r3, [pc, #132]	; (8002964 <MX_ADC3_Init+0xbc>)
 80028e0:	2200      	movs	r2, #0
 80028e2:	755a      	strb	r2, [r3, #21]
  hadc3.Init.NbrOfConversion = 1;
 80028e4:	4b1f      	ldr	r3, [pc, #124]	; (8002964 <MX_ADC3_Init+0xbc>)
 80028e6:	2201      	movs	r2, #1
 80028e8:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 80028ea:	4b1e      	ldr	r3, [pc, #120]	; (8002964 <MX_ADC3_Init+0xbc>)
 80028ec:	2200      	movs	r2, #0
 80028ee:	771a      	strb	r2, [r3, #28]
  hadc3.Init.ExternalTrigConv = ADC_EXTERNALTRIG_EXT_IT11;
 80028f0:	4b1c      	ldr	r3, [pc, #112]	; (8002964 <MX_ADC3_Init+0xbc>)
 80028f2:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 80028f6:	625a      	str	r2, [r3, #36]	; 0x24
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 80028f8:	4b1a      	ldr	r3, [pc, #104]	; (8002964 <MX_ADC3_Init+0xbc>)
 80028fa:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80028fe:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8002900:	4b18      	ldr	r3, [pc, #96]	; (8002964 <MX_ADC3_Init+0xbc>)
 8002902:	2200      	movs	r2, #0
 8002904:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8002906:	4b17      	ldr	r3, [pc, #92]	; (8002964 <MX_ADC3_Init+0xbc>)
 8002908:	2200      	movs	r2, #0
 800290a:	631a      	str	r2, [r3, #48]	; 0x30
  hadc3.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 800290c:	4b15      	ldr	r3, [pc, #84]	; (8002964 <MX_ADC3_Init+0xbc>)
 800290e:	2200      	movs	r2, #0
 8002910:	635a      	str	r2, [r3, #52]	; 0x34
  hadc3.Init.OversamplingMode = DISABLE;
 8002912:	4b14      	ldr	r3, [pc, #80]	; (8002964 <MX_ADC3_Init+0xbc>)
 8002914:	2200      	movs	r2, #0
 8002916:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 800291a:	4812      	ldr	r0, [pc, #72]	; (8002964 <MX_ADC3_Init+0xbc>)
 800291c:	f001 ff4e 	bl	80047bc <HAL_ADC_Init>
 8002920:	4603      	mov	r3, r0
 8002922:	2b00      	cmp	r3, #0
 8002924:	d001      	beq.n	800292a <MX_ADC3_Init+0x82>
  {
    Error_Handler();
 8002926:	f000 fd89 	bl	800343c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 800292a:	2301      	movs	r3, #1
 800292c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800292e:	2306      	movs	r3, #6
 8002930:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8002932:	2300      	movs	r3, #0
 8002934:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8002936:	f240 73ff 	movw	r3, #2047	; 0x7ff
 800293a:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800293c:	2304      	movs	r3, #4
 800293e:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8002940:	2300      	movs	r3, #0
 8002942:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 8002944:	2300      	movs	r3, #0
 8002946:	777b      	strb	r3, [r7, #29]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8002948:	1d3b      	adds	r3, r7, #4
 800294a:	4619      	mov	r1, r3
 800294c:	4805      	ldr	r0, [pc, #20]	; (8002964 <MX_ADC3_Init+0xbc>)
 800294e:	f002 fc71 	bl	8005234 <HAL_ADC_ConfigChannel>
 8002952:	4603      	mov	r3, r0
 8002954:	2b00      	cmp	r3, #0
 8002956:	d001      	beq.n	800295c <MX_ADC3_Init+0xb4>
  {
    Error_Handler();
 8002958:	f000 fd70 	bl	800343c <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 800295c:	bf00      	nop
 800295e:	3720      	adds	r7, #32
 8002960:	46bd      	mov	sp, r7
 8002962:	bd80      	pop	{r7, pc}
 8002964:	20000368 	.word	0x20000368
 8002968:	58026000 	.word	0x58026000

0800296c <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 800296c:	b580      	push	{r7, lr}
 800296e:	b08a      	sub	sp, #40	; 0x28
 8002970:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8002972:	1d3b      	adds	r3, r7, #4
 8002974:	2224      	movs	r2, #36	; 0x24
 8002976:	2100      	movs	r1, #0
 8002978:	4618      	mov	r0, r3
 800297a:	f018 fe2d 	bl	801b5d8 <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 800297e:	4b12      	ldr	r3, [pc, #72]	; (80029c8 <MX_DAC1_Init+0x5c>)
 8002980:	4a12      	ldr	r2, [pc, #72]	; (80029cc <MX_DAC1_Init+0x60>)
 8002982:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8002984:	4810      	ldr	r0, [pc, #64]	; (80029c8 <MX_DAC1_Init+0x5c>)
 8002986:	f003 fbef 	bl	8006168 <HAL_DAC_Init>
 800298a:	4603      	mov	r3, r0
 800298c:	2b00      	cmp	r3, #0
 800298e:	d001      	beq.n	8002994 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 8002990:	f000 fd54 	bl	800343c <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8002994:	2300      	movs	r3, #0
 8002996:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8002998:	2300      	movs	r3, #0
 800299a:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 800299c:	2300      	movs	r3, #0
 800299e:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 80029a0:	2301      	movs	r3, #1
 80029a2:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 80029a4:	2300      	movs	r3, #0
 80029a6:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 80029a8:	1d3b      	adds	r3, r7, #4
 80029aa:	2200      	movs	r2, #0
 80029ac:	4619      	mov	r1, r3
 80029ae:	4806      	ldr	r0, [pc, #24]	; (80029c8 <MX_DAC1_Init+0x5c>)
 80029b0:	f003 fc74 	bl	800629c <HAL_DAC_ConfigChannel>
 80029b4:	4603      	mov	r3, r0
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d001      	beq.n	80029be <MX_DAC1_Init+0x52>
  {
    Error_Handler();
 80029ba:	f000 fd3f 	bl	800343c <Error_Handler>
//    Error_Handler();
//  }

  /* USER CODE END DAC1_Init 2 */

}
 80029be:	bf00      	nop
 80029c0:	3728      	adds	r7, #40	; 0x28
 80029c2:	46bd      	mov	sp, r7
 80029c4:	bd80      	pop	{r7, pc}
 80029c6:	bf00      	nop
 80029c8:	200003cc 	.word	0x200003cc
 80029cc:	40007400 	.word	0x40007400

080029d0 <MX_HRTIM_Init>:
  * @brief HRTIM Initialization Function
  * @param None
  * @retval None
  */
static void MX_HRTIM_Init(void)
{
 80029d0:	b580      	push	{r7, lr}
 80029d2:	b0a4      	sub	sp, #144	; 0x90
 80029d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN HRTIM_Init 0 */

  /* USER CODE END HRTIM_Init 0 */

  HRTIM_TimeBaseCfgTypeDef pTimeBaseCfg = {0};
 80029d6:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80029da:	2200      	movs	r2, #0
 80029dc:	601a      	str	r2, [r3, #0]
 80029de:	605a      	str	r2, [r3, #4]
 80029e0:	609a      	str	r2, [r3, #8]
 80029e2:	60da      	str	r2, [r3, #12]
  HRTIM_TimerCfgTypeDef pTimerCfg = {0};
 80029e4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80029e8:	2254      	movs	r2, #84	; 0x54
 80029ea:	2100      	movs	r1, #0
 80029ec:	4618      	mov	r0, r3
 80029ee:	f018 fdf3 	bl	801b5d8 <memset>
  HRTIM_CompareCfgTypeDef pCompareCfg = {0};
 80029f2:	f107 0320 	add.w	r3, r7, #32
 80029f6:	2200      	movs	r2, #0
 80029f8:	601a      	str	r2, [r3, #0]
 80029fa:	605a      	str	r2, [r3, #4]
 80029fc:	609a      	str	r2, [r3, #8]
  HRTIM_OutputCfgTypeDef pOutputCfg = {0};
 80029fe:	463b      	mov	r3, r7
 8002a00:	2220      	movs	r2, #32
 8002a02:	2100      	movs	r1, #0
 8002a04:	4618      	mov	r0, r3
 8002a06:	f018 fde7 	bl	801b5d8 <memset>

  /* USER CODE BEGIN HRTIM_Init 1 */

  /* USER CODE END HRTIM_Init 1 */
  hhrtim.Instance = HRTIM1;
 8002a0a:	4b98      	ldr	r3, [pc, #608]	; (8002c6c <MX_HRTIM_Init+0x29c>)
 8002a0c:	4a98      	ldr	r2, [pc, #608]	; (8002c70 <MX_HRTIM_Init+0x2a0>)
 8002a0e:	601a      	str	r2, [r3, #0]
  hhrtim.Init.HRTIMInterruptResquests = HRTIM_IT_NONE;
 8002a10:	4b96      	ldr	r3, [pc, #600]	; (8002c6c <MX_HRTIM_Init+0x29c>)
 8002a12:	2200      	movs	r2, #0
 8002a14:	605a      	str	r2, [r3, #4]
  hhrtim.Init.SyncOptions = HRTIM_SYNCOPTION_NONE;
 8002a16:	4b95      	ldr	r3, [pc, #596]	; (8002c6c <MX_HRTIM_Init+0x29c>)
 8002a18:	2200      	movs	r2, #0
 8002a1a:	609a      	str	r2, [r3, #8]
  if (HAL_HRTIM_Init(&hhrtim) != HAL_OK)
 8002a1c:	4893      	ldr	r0, [pc, #588]	; (8002c6c <MX_HRTIM_Init+0x29c>)
 8002a1e:	f005 fb5b 	bl	80080d8 <HAL_HRTIM_Init>
 8002a22:	4603      	mov	r3, r0
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d001      	beq.n	8002a2c <MX_HRTIM_Init+0x5c>
  {
    Error_Handler();
 8002a28:	f000 fd08 	bl	800343c <Error_Handler>
  }
  pTimeBaseCfg.Period = PUMP_WIDTH+(2*MICROWAVE_DELAY)+(2*MICROWAVE_WIDTH)+RAMSEY_TIME+PROBE_WIDTH+POP_CYCLE_DELAY;
 8002a2c:	f24c 2318 	movw	r3, #49688	; 0xc218
 8002a30:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  pTimeBaseCfg.RepetitionCounter = 0x00;
 8002a34:	2300      	movs	r3, #0
 8002a36:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  pTimeBaseCfg.PrescalerRatio = HRTIM_PRESCALERRATIO_DIV4;
 8002a3a:	2307      	movs	r3, #7
 8002a3c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  pTimeBaseCfg.Mode = HRTIM_MODE_CONTINUOUS;
 8002a40:	2308      	movs	r3, #8
 8002a42:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (HAL_HRTIM_TimeBaseConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_A, &pTimeBaseCfg) != HAL_OK)
 8002a46:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8002a4a:	461a      	mov	r2, r3
 8002a4c:	2100      	movs	r1, #0
 8002a4e:	4887      	ldr	r0, [pc, #540]	; (8002c6c <MX_HRTIM_Init+0x29c>)
 8002a50:	f005 fc12 	bl	8008278 <HAL_HRTIM_TimeBaseConfig>
 8002a54:	4603      	mov	r3, r0
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d001      	beq.n	8002a5e <MX_HRTIM_Init+0x8e>
  {
    Error_Handler();
 8002a5a:	f000 fcef 	bl	800343c <Error_Handler>
  }
  pTimerCfg.InterruptRequests = HRTIM_TIM_IT_CMP3|HRTIM_TIM_IT_REP;
 8002a5e:	2314      	movs	r3, #20
 8002a60:	62fb      	str	r3, [r7, #44]	; 0x2c
  pTimerCfg.DMARequests = HRTIM_TIM_DMA_NONE;
 8002a62:	2300      	movs	r3, #0
 8002a64:	633b      	str	r3, [r7, #48]	; 0x30
  pTimerCfg.DMASrcAddress = 0x0000;
 8002a66:	2300      	movs	r3, #0
 8002a68:	637b      	str	r3, [r7, #52]	; 0x34
  pTimerCfg.DMADstAddress = 0x0000;
 8002a6a:	2300      	movs	r3, #0
 8002a6c:	63bb      	str	r3, [r7, #56]	; 0x38
  pTimerCfg.DMASize = 0x1;
 8002a6e:	2301      	movs	r3, #1
 8002a70:	63fb      	str	r3, [r7, #60]	; 0x3c
  pTimerCfg.HalfModeEnable = HRTIM_HALFMODE_DISABLED;
 8002a72:	2300      	movs	r3, #0
 8002a74:	643b      	str	r3, [r7, #64]	; 0x40
  pTimerCfg.StartOnSync = HRTIM_SYNCSTART_DISABLED;
 8002a76:	2300      	movs	r3, #0
 8002a78:	647b      	str	r3, [r7, #68]	; 0x44
  pTimerCfg.ResetOnSync = HRTIM_SYNCRESET_DISABLED;
 8002a7a:	2300      	movs	r3, #0
 8002a7c:	64bb      	str	r3, [r7, #72]	; 0x48
  pTimerCfg.DACSynchro = HRTIM_DACSYNC_NONE;
 8002a7e:	2300      	movs	r3, #0
 8002a80:	64fb      	str	r3, [r7, #76]	; 0x4c
  pTimerCfg.PreloadEnable = HRTIM_PRELOAD_DISABLED;
 8002a82:	2300      	movs	r3, #0
 8002a84:	653b      	str	r3, [r7, #80]	; 0x50
  pTimerCfg.UpdateGating = HRTIM_UPDATEGATING_INDEPENDENT;
 8002a86:	2300      	movs	r3, #0
 8002a88:	657b      	str	r3, [r7, #84]	; 0x54
  pTimerCfg.BurstMode = HRTIM_TIMERBURSTMODE_MAINTAINCLOCK;
 8002a8a:	2300      	movs	r3, #0
 8002a8c:	65bb      	str	r3, [r7, #88]	; 0x58
  pTimerCfg.RepetitionUpdate = HRTIM_UPDATEONREPETITION_DISABLED;
 8002a8e:	2300      	movs	r3, #0
 8002a90:	65fb      	str	r3, [r7, #92]	; 0x5c
  pTimerCfg.PushPull = HRTIM_TIMPUSHPULLMODE_DISABLED;
 8002a92:	2300      	movs	r3, #0
 8002a94:	663b      	str	r3, [r7, #96]	; 0x60
  pTimerCfg.FaultEnable = HRTIM_TIMFAULTENABLE_NONE;
 8002a96:	2300      	movs	r3, #0
 8002a98:	667b      	str	r3, [r7, #100]	; 0x64
  pTimerCfg.FaultLock = HRTIM_TIMFAULTLOCK_READWRITE;
 8002a9a:	2300      	movs	r3, #0
 8002a9c:	66bb      	str	r3, [r7, #104]	; 0x68
  pTimerCfg.DeadTimeInsertion = HRTIM_TIMDEADTIMEINSERTION_DISABLED;
 8002a9e:	2300      	movs	r3, #0
 8002aa0:	66fb      	str	r3, [r7, #108]	; 0x6c
  pTimerCfg.DelayedProtectionMode = HRTIM_TIMER_A_B_C_DELAYEDPROTECTION_DISABLED;
 8002aa2:	2300      	movs	r3, #0
 8002aa4:	673b      	str	r3, [r7, #112]	; 0x70
  pTimerCfg.UpdateTrigger = HRTIM_TIMUPDATETRIGGER_NONE;
 8002aa6:	2300      	movs	r3, #0
 8002aa8:	677b      	str	r3, [r7, #116]	; 0x74
  pTimerCfg.ResetTrigger = HRTIM_TIMRESETTRIGGER_NONE;
 8002aaa:	2300      	movs	r3, #0
 8002aac:	67bb      	str	r3, [r7, #120]	; 0x78
  pTimerCfg.ResetUpdate = HRTIM_TIMUPDATEONRESET_DISABLED;
 8002aae:	2300      	movs	r3, #0
 8002ab0:	67fb      	str	r3, [r7, #124]	; 0x7c
  if (HAL_HRTIM_WaveformTimerConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_A, &pTimerCfg) != HAL_OK)
 8002ab2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002ab6:	461a      	mov	r2, r3
 8002ab8:	2100      	movs	r1, #0
 8002aba:	486c      	ldr	r0, [pc, #432]	; (8002c6c <MX_HRTIM_Init+0x29c>)
 8002abc:	f005 fc04 	bl	80082c8 <HAL_HRTIM_WaveformTimerConfig>
 8002ac0:	4603      	mov	r3, r0
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d001      	beq.n	8002aca <MX_HRTIM_Init+0xfa>
  {
    Error_Handler();
 8002ac6:	f000 fcb9 	bl	800343c <Error_Handler>
  }
  pTimerCfg.InterruptRequests = HRTIM_TIM_IT_CMP2|HRTIM_TIM_IT_CMP3;
 8002aca:	2306      	movs	r3, #6
 8002acc:	62fb      	str	r3, [r7, #44]	; 0x2c
  pTimerCfg.DelayedProtectionMode = HRTIM_TIMER_D_E_DELAYEDPROTECTION_DISABLED;
 8002ace:	2300      	movs	r3, #0
 8002ad0:	673b      	str	r3, [r7, #112]	; 0x70
  if (HAL_HRTIM_WaveformTimerConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_E, &pTimerCfg) != HAL_OK)
 8002ad2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002ad6:	461a      	mov	r2, r3
 8002ad8:	2104      	movs	r1, #4
 8002ada:	4864      	ldr	r0, [pc, #400]	; (8002c6c <MX_HRTIM_Init+0x29c>)
 8002adc:	f005 fbf4 	bl	80082c8 <HAL_HRTIM_WaveformTimerConfig>
 8002ae0:	4603      	mov	r3, r0
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d001      	beq.n	8002aea <MX_HRTIM_Init+0x11a>
  {
    Error_Handler();
 8002ae6:	f000 fca9 	bl	800343c <Error_Handler>
  }
  pCompareCfg.CompareValue = PUMP_WIDTH;
 8002aea:	f240 631b 	movw	r3, #1563	; 0x61b
 8002aee:	623b      	str	r3, [r7, #32]
  if (HAL_HRTIM_WaveformCompareConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_A, HRTIM_COMPAREUNIT_1, &pCompareCfg) != HAL_OK)
 8002af0:	f107 0320 	add.w	r3, r7, #32
 8002af4:	2201      	movs	r2, #1
 8002af6:	2100      	movs	r1, #0
 8002af8:	485c      	ldr	r0, [pc, #368]	; (8002c6c <MX_HRTIM_Init+0x29c>)
 8002afa:	f005 fc57 	bl	80083ac <HAL_HRTIM_WaveformCompareConfig>
 8002afe:	4603      	mov	r3, r0
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d001      	beq.n	8002b08 <MX_HRTIM_Init+0x138>
  {
    Error_Handler();
 8002b04:	f000 fc9a 	bl	800343c <Error_Handler>
  }
  pCompareCfg.CompareValue = PUMP_WIDTH+(2*MICROWAVE_DELAY)+(2*MICROWAVE_WIDTH)+RAMSEY_TIME;
 8002b08:	f244 5395 	movw	r3, #17813	; 0x4595
 8002b0c:	623b      	str	r3, [r7, #32]
  pCompareCfg.AutoDelayedMode = HRTIM_AUTODELAYEDMODE_REGULAR;
 8002b0e:	2300      	movs	r3, #0
 8002b10:	627b      	str	r3, [r7, #36]	; 0x24
  pCompareCfg.AutoDelayedTimeout = 0x0000;
 8002b12:	2300      	movs	r3, #0
 8002b14:	62bb      	str	r3, [r7, #40]	; 0x28

  if (HAL_HRTIM_WaveformCompareConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_A, HRTIM_COMPAREUNIT_2, &pCompareCfg) != HAL_OK)
 8002b16:	f107 0320 	add.w	r3, r7, #32
 8002b1a:	2202      	movs	r2, #2
 8002b1c:	2100      	movs	r1, #0
 8002b1e:	4853      	ldr	r0, [pc, #332]	; (8002c6c <MX_HRTIM_Init+0x29c>)
 8002b20:	f005 fc44 	bl	80083ac <HAL_HRTIM_WaveformCompareConfig>
 8002b24:	4603      	mov	r3, r0
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d001      	beq.n	8002b2e <MX_HRTIM_Init+0x15e>
  {
    Error_Handler();
 8002b2a:	f000 fc87 	bl	800343c <Error_Handler>
  }
  pCompareCfg.CompareValue = PUMP_WIDTH+MICROWAVE_DELAY+MICROWAVE_WIDTH;
 8002b2e:	f640 536e 	movw	r3, #3438	; 0xd6e
 8002b32:	623b      	str	r3, [r7, #32]

  if (HAL_HRTIM_WaveformCompareConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_E, HRTIM_COMPAREUNIT_2, &pCompareCfg) != HAL_OK)
 8002b34:	f107 0320 	add.w	r3, r7, #32
 8002b38:	2202      	movs	r2, #2
 8002b3a:	2104      	movs	r1, #4
 8002b3c:	484b      	ldr	r0, [pc, #300]	; (8002c6c <MX_HRTIM_Init+0x29c>)
 8002b3e:	f005 fc35 	bl	80083ac <HAL_HRTIM_WaveformCompareConfig>
 8002b42:	4603      	mov	r3, r0
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d001      	beq.n	8002b4c <MX_HRTIM_Init+0x17c>
  {
    Error_Handler();
 8002b48:	f000 fc78 	bl	800343c <Error_Handler>
  }
  pCompareCfg.CompareValue = PUMP_WIDTH+(2*MICROWAVE_DELAY)+(2*MICROWAVE_WIDTH)+RAMSEY_TIME+PROBE_WIDTH;
 8002b4c:	f644 0306 	movw	r3, #18438	; 0x4806
 8002b50:	623b      	str	r3, [r7, #32]
  if (HAL_HRTIM_WaveformCompareConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_A, HRTIM_COMPAREUNIT_3, &pCompareCfg) != HAL_OK)
 8002b52:	f107 0320 	add.w	r3, r7, #32
 8002b56:	2204      	movs	r2, #4
 8002b58:	2100      	movs	r1, #0
 8002b5a:	4844      	ldr	r0, [pc, #272]	; (8002c6c <MX_HRTIM_Init+0x29c>)
 8002b5c:	f005 fc26 	bl	80083ac <HAL_HRTIM_WaveformCompareConfig>
 8002b60:	4603      	mov	r3, r0
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d001      	beq.n	8002b6a <MX_HRTIM_Init+0x19a>
  {
    Error_Handler();
 8002b66:	f000 fc69 	bl	800343c <Error_Handler>
  }
  pCompareCfg.CompareValue = PUMP_WIDTH+MICROWAVE_DELAY+MICROWAVE_WIDTH+RAMSEY_TIME+MICROWAVE_WIDTH;
 8002b6a:	f244 435d 	movw	r3, #17501	; 0x445d
 8002b6e:	623b      	str	r3, [r7, #32]

  if (HAL_HRTIM_WaveformCompareConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_E, HRTIM_COMPAREUNIT_4, &pCompareCfg) != HAL_OK)
 8002b70:	f107 0320 	add.w	r3, r7, #32
 8002b74:	2208      	movs	r2, #8
 8002b76:	2104      	movs	r1, #4
 8002b78:	483c      	ldr	r0, [pc, #240]	; (8002c6c <MX_HRTIM_Init+0x29c>)
 8002b7a:	f005 fc17 	bl	80083ac <HAL_HRTIM_WaveformCompareConfig>
 8002b7e:	4603      	mov	r3, r0
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d001      	beq.n	8002b88 <MX_HRTIM_Init+0x1b8>
  {
    Error_Handler();
 8002b84:	f000 fc5a 	bl	800343c <Error_Handler>
  }
  pOutputCfg.Polarity = HRTIM_OUTPUTPOLARITY_LOW;
 8002b88:	2302      	movs	r3, #2
 8002b8a:	603b      	str	r3, [r7, #0]
  pOutputCfg.SetSource = HRTIM_OUTPUTSET_TIMCMP1|HRTIM_OUTPUTSET_TIMCMP3;
 8002b8c:	2328      	movs	r3, #40	; 0x28
 8002b8e:	607b      	str	r3, [r7, #4]
  pOutputCfg.ResetSource = HRTIM_OUTPUTRESET_TIMCMP2|HRTIM_OUTPUTRESET_TIMPER;
 8002b90:	2314      	movs	r3, #20
 8002b92:	60bb      	str	r3, [r7, #8]
  pOutputCfg.IdleMode = HRTIM_OUTPUTIDLEMODE_NONE;
 8002b94:	2300      	movs	r3, #0
 8002b96:	60fb      	str	r3, [r7, #12]
  pOutputCfg.IdleLevel = HRTIM_OUTPUTIDLELEVEL_ACTIVE;
 8002b98:	2308      	movs	r3, #8
 8002b9a:	613b      	str	r3, [r7, #16]
  pOutputCfg.FaultLevel = HRTIM_OUTPUTFAULTLEVEL_NONE;
 8002b9c:	2300      	movs	r3, #0
 8002b9e:	617b      	str	r3, [r7, #20]
  pOutputCfg.ChopperModeEnable = HRTIM_OUTPUTCHOPPERMODE_DISABLED;
 8002ba0:	2300      	movs	r3, #0
 8002ba2:	61bb      	str	r3, [r7, #24]
  pOutputCfg.BurstModeEntryDelayed = HRTIM_OUTPUTBURSTMODEENTRY_REGULAR;
 8002ba4:	2300      	movs	r3, #0
 8002ba6:	61fb      	str	r3, [r7, #28]
  if (HAL_HRTIM_WaveformOutputConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_A, HRTIM_OUTPUT_TA1, &pOutputCfg) != HAL_OK)
 8002ba8:	463b      	mov	r3, r7
 8002baa:	2201      	movs	r2, #1
 8002bac:	2100      	movs	r1, #0
 8002bae:	482f      	ldr	r0, [pc, #188]	; (8002c6c <MX_HRTIM_Init+0x29c>)
 8002bb0:	f005 fd6a 	bl	8008688 <HAL_HRTIM_WaveformOutputConfig>
 8002bb4:	4603      	mov	r3, r0
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d001      	beq.n	8002bbe <MX_HRTIM_Init+0x1ee>
  {
    Error_Handler();
 8002bba:	f000 fc3f 	bl	800343c <Error_Handler>
  }
  pOutputCfg.Polarity = HRTIM_OUTPUTPOLARITY_HIGH;
 8002bbe:	2300      	movs	r3, #0
 8002bc0:	603b      	str	r3, [r7, #0]
  pOutputCfg.ResetSource = HRTIM_OUTPUTRESET_TIMCMP2|HRTIM_OUTPUTRESET_TIMCMP4;
 8002bc2:	2350      	movs	r3, #80	; 0x50
 8002bc4:	60bb      	str	r3, [r7, #8]
  pOutputCfg.IdleLevel = HRTIM_OUTPUTIDLELEVEL_INACTIVE;
 8002bc6:	2300      	movs	r3, #0
 8002bc8:	613b      	str	r3, [r7, #16]
  if (HAL_HRTIM_WaveformOutputConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_E, HRTIM_OUTPUT_TE1, &pOutputCfg) != HAL_OK)
 8002bca:	463b      	mov	r3, r7
 8002bcc:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002bd0:	2104      	movs	r1, #4
 8002bd2:	4826      	ldr	r0, [pc, #152]	; (8002c6c <MX_HRTIM_Init+0x29c>)
 8002bd4:	f005 fd58 	bl	8008688 <HAL_HRTIM_WaveformOutputConfig>
 8002bd8:	4603      	mov	r3, r0
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d001      	beq.n	8002be2 <MX_HRTIM_Init+0x212>
  {
    Error_Handler();
 8002bde:	f000 fc2d 	bl	800343c <Error_Handler>
  }
  pOutputCfg.Polarity = HRTIM_OUTPUTPOLARITY_LOW;
 8002be2:	2302      	movs	r3, #2
 8002be4:	603b      	str	r3, [r7, #0]
  pOutputCfg.SetSource = HRTIM_OUTPUTSET_TIMCMP3;
 8002be6:	2320      	movs	r3, #32
 8002be8:	607b      	str	r3, [r7, #4]
  pOutputCfg.ResetSource = HRTIM_OUTPUTRESET_TIMCMP2;
 8002bea:	2310      	movs	r3, #16
 8002bec:	60bb      	str	r3, [r7, #8]
  pOutputCfg.IdleLevel = HRTIM_OUTPUTIDLELEVEL_ACTIVE;
 8002bee:	2308      	movs	r3, #8
 8002bf0:	613b      	str	r3, [r7, #16]
  if (HAL_HRTIM_WaveformOutputConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_A, HRTIM_OUTPUT_TA2, &pOutputCfg) != HAL_OK)
 8002bf2:	463b      	mov	r3, r7
 8002bf4:	2202      	movs	r2, #2
 8002bf6:	2100      	movs	r1, #0
 8002bf8:	481c      	ldr	r0, [pc, #112]	; (8002c6c <MX_HRTIM_Init+0x29c>)
 8002bfa:	f005 fd45 	bl	8008688 <HAL_HRTIM_WaveformOutputConfig>
 8002bfe:	4603      	mov	r3, r0
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d001      	beq.n	8002c08 <MX_HRTIM_Init+0x238>
  {
    Error_Handler();
 8002c04:	f000 fc1a 	bl	800343c <Error_Handler>
  }
  if (HAL_HRTIM_TimeBaseConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_E, &pTimeBaseCfg) != HAL_OK)
 8002c08:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8002c0c:	461a      	mov	r2, r3
 8002c0e:	2104      	movs	r1, #4
 8002c10:	4816      	ldr	r0, [pc, #88]	; (8002c6c <MX_HRTIM_Init+0x29c>)
 8002c12:	f005 fb31 	bl	8008278 <HAL_HRTIM_TimeBaseConfig>
 8002c16:	4603      	mov	r3, r0
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d001      	beq.n	8002c20 <MX_HRTIM_Init+0x250>
  {
    Error_Handler();
 8002c1c:	f000 fc0e 	bl	800343c <Error_Handler>
  }
  pCompareCfg.CompareValue = PUMP_WIDTH+MICROWAVE_DELAY;
 8002c20:	f240 7353 	movw	r3, #1875	; 0x753
 8002c24:	623b      	str	r3, [r7, #32]
  if (HAL_HRTIM_WaveformCompareConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_E, HRTIM_COMPAREUNIT_1, &pCompareCfg) != HAL_OK)
 8002c26:	f107 0320 	add.w	r3, r7, #32
 8002c2a:	2201      	movs	r2, #1
 8002c2c:	2104      	movs	r1, #4
 8002c2e:	480f      	ldr	r0, [pc, #60]	; (8002c6c <MX_HRTIM_Init+0x29c>)
 8002c30:	f005 fbbc 	bl	80083ac <HAL_HRTIM_WaveformCompareConfig>
 8002c34:	4603      	mov	r3, r0
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d001      	beq.n	8002c3e <MX_HRTIM_Init+0x26e>
  {
    Error_Handler();
 8002c3a:	f000 fbff 	bl	800343c <Error_Handler>
  }
  pCompareCfg.CompareValue = PUMP_WIDTH+MICROWAVE_DELAY+MICROWAVE_WIDTH+RAMSEY_TIME;
 8002c3e:	f643 6342 	movw	r3, #15938	; 0x3e42
 8002c42:	623b      	str	r3, [r7, #32]
  if (HAL_HRTIM_WaveformCompareConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_E, HRTIM_COMPAREUNIT_3, &pCompareCfg) != HAL_OK)
 8002c44:	f107 0320 	add.w	r3, r7, #32
 8002c48:	2204      	movs	r2, #4
 8002c4a:	2104      	movs	r1, #4
 8002c4c:	4807      	ldr	r0, [pc, #28]	; (8002c6c <MX_HRTIM_Init+0x29c>)
 8002c4e:	f005 fbad 	bl	80083ac <HAL_HRTIM_WaveformCompareConfig>
 8002c52:	4603      	mov	r3, r0
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d001      	beq.n	8002c5c <MX_HRTIM_Init+0x28c>
  {
    Error_Handler();
 8002c58:	f000 fbf0 	bl	800343c <Error_Handler>
  }
  /* USER CODE BEGIN HRTIM_Init 2 */

  /* USER CODE END HRTIM_Init 2 */
  HAL_HRTIM_MspPostInit(&hhrtim);
 8002c5c:	4803      	ldr	r0, [pc, #12]	; (8002c6c <MX_HRTIM_Init+0x29c>)
 8002c5e:	f000 fd2f 	bl	80036c0 <HAL_HRTIM_MspPostInit>

}
 8002c62:	bf00      	nop
 8002c64:	3790      	adds	r7, #144	; 0x90
 8002c66:	46bd      	mov	sp, r7
 8002c68:	bd80      	pop	{r7, pc}
 8002c6a:	bf00      	nop
 8002c6c:	200003e0 	.word	0x200003e0
 8002c70:	40017400 	.word	0x40017400

08002c74 <MX_LPTIM1_Init>:
  * @brief LPTIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPTIM1_Init(void)
{
 8002c74:	b580      	push	{r7, lr}
 8002c76:	af00      	add	r7, sp, #0
  /* USER CODE END LPTIM1_Init 0 */

  /* USER CODE BEGIN LPTIM1_Init 1 */

  /* USER CODE END LPTIM1_Init 1 */
  hlptim1.Instance = LPTIM1;
 8002c78:	4b13      	ldr	r3, [pc, #76]	; (8002cc8 <MX_LPTIM1_Init+0x54>)
 8002c7a:	4a14      	ldr	r2, [pc, #80]	; (8002ccc <MX_LPTIM1_Init+0x58>)
 8002c7c:	601a      	str	r2, [r3, #0]
  hlptim1.Init.Clock.Source = LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC;
 8002c7e:	4b12      	ldr	r3, [pc, #72]	; (8002cc8 <MX_LPTIM1_Init+0x54>)
 8002c80:	2200      	movs	r2, #0
 8002c82:	605a      	str	r2, [r3, #4]
  hlptim1.Init.Clock.Prescaler = LPTIM_PRESCALER_DIV32;
 8002c84:	4b10      	ldr	r3, [pc, #64]	; (8002cc8 <MX_LPTIM1_Init+0x54>)
 8002c86:	f44f 6220 	mov.w	r2, #2560	; 0xa00
 8002c8a:	609a      	str	r2, [r3, #8]
  hlptim1.Init.Trigger.Source = LPTIM_TRIGSOURCE_SOFTWARE;
 8002c8c:	4b0e      	ldr	r3, [pc, #56]	; (8002cc8 <MX_LPTIM1_Init+0x54>)
 8002c8e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002c92:	615a      	str	r2, [r3, #20]
  hlptim1.Init.OutputPolarity = LPTIM_OUTPUTPOLARITY_HIGH;
 8002c94:	4b0c      	ldr	r3, [pc, #48]	; (8002cc8 <MX_LPTIM1_Init+0x54>)
 8002c96:	2200      	movs	r2, #0
 8002c98:	621a      	str	r2, [r3, #32]
  hlptim1.Init.UpdateMode = LPTIM_UPDATE_IMMEDIATE;
 8002c9a:	4b0b      	ldr	r3, [pc, #44]	; (8002cc8 <MX_LPTIM1_Init+0x54>)
 8002c9c:	2200      	movs	r2, #0
 8002c9e:	625a      	str	r2, [r3, #36]	; 0x24
  hlptim1.Init.CounterSource = LPTIM_COUNTERSOURCE_INTERNAL;
 8002ca0:	4b09      	ldr	r3, [pc, #36]	; (8002cc8 <MX_LPTIM1_Init+0x54>)
 8002ca2:	2200      	movs	r2, #0
 8002ca4:	629a      	str	r2, [r3, #40]	; 0x28
  hlptim1.Init.Input1Source = LPTIM_INPUT1SOURCE_GPIO;
 8002ca6:	4b08      	ldr	r3, [pc, #32]	; (8002cc8 <MX_LPTIM1_Init+0x54>)
 8002ca8:	2200      	movs	r2, #0
 8002caa:	62da      	str	r2, [r3, #44]	; 0x2c
  hlptim1.Init.Input2Source = LPTIM_INPUT2SOURCE_GPIO;
 8002cac:	4b06      	ldr	r3, [pc, #24]	; (8002cc8 <MX_LPTIM1_Init+0x54>)
 8002cae:	2200      	movs	r2, #0
 8002cb0:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_LPTIM_Init(&hlptim1) != HAL_OK)
 8002cb2:	4805      	ldr	r0, [pc, #20]	; (8002cc8 <MX_LPTIM1_Init+0x54>)
 8002cb4:	f006 fd14 	bl	80096e0 <HAL_LPTIM_Init>
 8002cb8:	4603      	mov	r3, r0
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d001      	beq.n	8002cc2 <MX_LPTIM1_Init+0x4e>
  {
    Error_Handler();
 8002cbe:	f000 fbbd 	bl	800343c <Error_Handler>
  }
  /* USER CODE BEGIN LPTIM1_Init 2 */

  /* USER CODE END LPTIM1_Init 2 */

}
 8002cc2:	bf00      	nop
 8002cc4:	bd80      	pop	{r7, pc}
 8002cc6:	bf00      	nop
 8002cc8:	200004bc 	.word	0x200004bc
 8002ccc:	40002400 	.word	0x40002400

08002cd0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8002cd0:	b580      	push	{r7, lr}
 8002cd2:	b088      	sub	sp, #32
 8002cd4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002cd6:	f107 0310 	add.w	r3, r7, #16
 8002cda:	2200      	movs	r2, #0
 8002cdc:	601a      	str	r2, [r3, #0]
 8002cde:	605a      	str	r2, [r3, #4]
 8002ce0:	609a      	str	r2, [r3, #8]
 8002ce2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002ce4:	1d3b      	adds	r3, r7, #4
 8002ce6:	2200      	movs	r2, #0
 8002ce8:	601a      	str	r2, [r3, #0]
 8002cea:	605a      	str	r2, [r3, #4]
 8002cec:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002cee:	4b20      	ldr	r3, [pc, #128]	; (8002d70 <MX_TIM1_Init+0xa0>)
 8002cf0:	4a20      	ldr	r2, [pc, #128]	; (8002d74 <MX_TIM1_Init+0xa4>)
 8002cf2:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 1249;
 8002cf4:	4b1e      	ldr	r3, [pc, #120]	; (8002d70 <MX_TIM1_Init+0xa0>)
 8002cf6:	f240 42e1 	movw	r2, #1249	; 0x4e1
 8002cfa:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002cfc:	4b1c      	ldr	r3, [pc, #112]	; (8002d70 <MX_TIM1_Init+0xa0>)
 8002cfe:	2200      	movs	r2, #0
 8002d00:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8002d02:	4b1b      	ldr	r3, [pc, #108]	; (8002d70 <MX_TIM1_Init+0xa0>)
 8002d04:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002d08:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002d0a:	4b19      	ldr	r3, [pc, #100]	; (8002d70 <MX_TIM1_Init+0xa0>)
 8002d0c:	2200      	movs	r2, #0
 8002d0e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002d10:	4b17      	ldr	r3, [pc, #92]	; (8002d70 <MX_TIM1_Init+0xa0>)
 8002d12:	2200      	movs	r2, #0
 8002d14:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002d16:	4b16      	ldr	r3, [pc, #88]	; (8002d70 <MX_TIM1_Init+0xa0>)
 8002d18:	2200      	movs	r2, #0
 8002d1a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8002d1c:	4814      	ldr	r0, [pc, #80]	; (8002d70 <MX_TIM1_Init+0xa0>)
 8002d1e:	f00a fe8d 	bl	800da3c <HAL_TIM_Base_Init>
 8002d22:	4603      	mov	r3, r0
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d001      	beq.n	8002d2c <MX_TIM1_Init+0x5c>
  {
    Error_Handler();
 8002d28:	f000 fb88 	bl	800343c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002d2c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002d30:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8002d32:	f107 0310 	add.w	r3, r7, #16
 8002d36:	4619      	mov	r1, r3
 8002d38:	480d      	ldr	r0, [pc, #52]	; (8002d70 <MX_TIM1_Init+0xa0>)
 8002d3a:	f00a fed7 	bl	800daec <HAL_TIM_ConfigClockSource>
 8002d3e:	4603      	mov	r3, r0
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d001      	beq.n	8002d48 <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 8002d44:	f000 fb7a 	bl	800343c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002d48:	2300      	movs	r3, #0
 8002d4a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8002d4c:	2300      	movs	r3, #0
 8002d4e:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002d50:	2300      	movs	r3, #0
 8002d52:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002d54:	1d3b      	adds	r3, r7, #4
 8002d56:	4619      	mov	r1, r3
 8002d58:	4805      	ldr	r0, [pc, #20]	; (8002d70 <MX_TIM1_Init+0xa0>)
 8002d5a:	f00b f8f7 	bl	800df4c <HAL_TIMEx_MasterConfigSynchronization>
 8002d5e:	4603      	mov	r3, r0
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d001      	beq.n	8002d68 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8002d64:	f000 fb6a 	bl	800343c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8002d68:	bf00      	nop
 8002d6a:	3720      	adds	r7, #32
 8002d6c:	46bd      	mov	sp, r7
 8002d6e:	bd80      	pop	{r7, pc}
 8002d70:	200004f4 	.word	0x200004f4
 8002d74:	40010000 	.word	0x40010000

08002d78 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002d78:	b580      	push	{r7, lr}
 8002d7a:	b088      	sub	sp, #32
 8002d7c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002d7e:	f107 0310 	add.w	r3, r7, #16
 8002d82:	2200      	movs	r2, #0
 8002d84:	601a      	str	r2, [r3, #0]
 8002d86:	605a      	str	r2, [r3, #4]
 8002d88:	609a      	str	r2, [r3, #8]
 8002d8a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002d8c:	1d3b      	adds	r3, r7, #4
 8002d8e:	2200      	movs	r2, #0
 8002d90:	601a      	str	r2, [r3, #0]
 8002d92:	605a      	str	r2, [r3, #4]
 8002d94:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002d96:	4b1e      	ldr	r3, [pc, #120]	; (8002e10 <MX_TIM2_Init+0x98>)
 8002d98:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002d9c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 124;
 8002d9e:	4b1c      	ldr	r3, [pc, #112]	; (8002e10 <MX_TIM2_Init+0x98>)
 8002da0:	227c      	movs	r2, #124	; 0x7c
 8002da2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002da4:	4b1a      	ldr	r3, [pc, #104]	; (8002e10 <MX_TIM2_Init+0x98>)
 8002da6:	2200      	movs	r2, #0
 8002da8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8002daa:	4b19      	ldr	r3, [pc, #100]	; (8002e10 <MX_TIM2_Init+0x98>)
 8002dac:	f04f 32ff 	mov.w	r2, #4294967295
 8002db0:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002db2:	4b17      	ldr	r3, [pc, #92]	; (8002e10 <MX_TIM2_Init+0x98>)
 8002db4:	2200      	movs	r2, #0
 8002db6:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002db8:	4b15      	ldr	r3, [pc, #84]	; (8002e10 <MX_TIM2_Init+0x98>)
 8002dba:	2200      	movs	r2, #0
 8002dbc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002dbe:	4814      	ldr	r0, [pc, #80]	; (8002e10 <MX_TIM2_Init+0x98>)
 8002dc0:	f00a fe3c 	bl	800da3c <HAL_TIM_Base_Init>
 8002dc4:	4603      	mov	r3, r0
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d001      	beq.n	8002dce <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8002dca:	f000 fb37 	bl	800343c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002dce:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002dd2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002dd4:	f107 0310 	add.w	r3, r7, #16
 8002dd8:	4619      	mov	r1, r3
 8002dda:	480d      	ldr	r0, [pc, #52]	; (8002e10 <MX_TIM2_Init+0x98>)
 8002ddc:	f00a fe86 	bl	800daec <HAL_TIM_ConfigClockSource>
 8002de0:	4603      	mov	r3, r0
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d001      	beq.n	8002dea <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8002de6:	f000 fb29 	bl	800343c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002dea:	2300      	movs	r3, #0
 8002dec:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002dee:	2300      	movs	r3, #0
 8002df0:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002df2:	1d3b      	adds	r3, r7, #4
 8002df4:	4619      	mov	r1, r3
 8002df6:	4806      	ldr	r0, [pc, #24]	; (8002e10 <MX_TIM2_Init+0x98>)
 8002df8:	f00b f8a8 	bl	800df4c <HAL_TIMEx_MasterConfigSynchronization>
 8002dfc:	4603      	mov	r3, r0
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d001      	beq.n	8002e06 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8002e02:	f000 fb1b 	bl	800343c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8002e06:	bf00      	nop
 8002e08:	3720      	adds	r7, #32
 8002e0a:	46bd      	mov	sp, r7
 8002e0c:	bd80      	pop	{r7, pc}
 8002e0e:	bf00      	nop
 8002e10:	20000540 	.word	0x20000540

08002e14 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8002e14:	b580      	push	{r7, lr}
 8002e16:	b088      	sub	sp, #32
 8002e18:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002e1a:	f107 0310 	add.w	r3, r7, #16
 8002e1e:	2200      	movs	r2, #0
 8002e20:	601a      	str	r2, [r3, #0]
 8002e22:	605a      	str	r2, [r3, #4]
 8002e24:	609a      	str	r2, [r3, #8]
 8002e26:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002e28:	1d3b      	adds	r3, r7, #4
 8002e2a:	2200      	movs	r2, #0
 8002e2c:	601a      	str	r2, [r3, #0]
 8002e2e:	605a      	str	r2, [r3, #4]
 8002e30:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002e32:	4b1d      	ldr	r3, [pc, #116]	; (8002ea8 <MX_TIM3_Init+0x94>)
 8002e34:	4a1d      	ldr	r2, [pc, #116]	; (8002eac <MX_TIM3_Init+0x98>)
 8002e36:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 124;
 8002e38:	4b1b      	ldr	r3, [pc, #108]	; (8002ea8 <MX_TIM3_Init+0x94>)
 8002e3a:	227c      	movs	r2, #124	; 0x7c
 8002e3c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002e3e:	4b1a      	ldr	r3, [pc, #104]	; (8002ea8 <MX_TIM3_Init+0x94>)
 8002e40:	2200      	movs	r2, #0
 8002e42:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8002e44:	4b18      	ldr	r3, [pc, #96]	; (8002ea8 <MX_TIM3_Init+0x94>)
 8002e46:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002e4a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002e4c:	4b16      	ldr	r3, [pc, #88]	; (8002ea8 <MX_TIM3_Init+0x94>)
 8002e4e:	2200      	movs	r2, #0
 8002e50:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002e52:	4b15      	ldr	r3, [pc, #84]	; (8002ea8 <MX_TIM3_Init+0x94>)
 8002e54:	2200      	movs	r2, #0
 8002e56:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002e58:	4813      	ldr	r0, [pc, #76]	; (8002ea8 <MX_TIM3_Init+0x94>)
 8002e5a:	f00a fdef 	bl	800da3c <HAL_TIM_Base_Init>
 8002e5e:	4603      	mov	r3, r0
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d001      	beq.n	8002e68 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8002e64:	f000 faea 	bl	800343c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002e68:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002e6c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002e6e:	f107 0310 	add.w	r3, r7, #16
 8002e72:	4619      	mov	r1, r3
 8002e74:	480c      	ldr	r0, [pc, #48]	; (8002ea8 <MX_TIM3_Init+0x94>)
 8002e76:	f00a fe39 	bl	800daec <HAL_TIM_ConfigClockSource>
 8002e7a:	4603      	mov	r3, r0
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d001      	beq.n	8002e84 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8002e80:	f000 fadc 	bl	800343c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002e84:	2300      	movs	r3, #0
 8002e86:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002e88:	2300      	movs	r3, #0
 8002e8a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002e8c:	1d3b      	adds	r3, r7, #4
 8002e8e:	4619      	mov	r1, r3
 8002e90:	4805      	ldr	r0, [pc, #20]	; (8002ea8 <MX_TIM3_Init+0x94>)
 8002e92:	f00b f85b 	bl	800df4c <HAL_TIMEx_MasterConfigSynchronization>
 8002e96:	4603      	mov	r3, r0
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d001      	beq.n	8002ea0 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8002e9c:	f000 face 	bl	800343c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8002ea0:	bf00      	nop
 8002ea2:	3720      	adds	r7, #32
 8002ea4:	46bd      	mov	sp, r7
 8002ea6:	bd80      	pop	{r7, pc}
 8002ea8:	2000058c 	.word	0x2000058c
 8002eac:	40000400 	.word	0x40000400

08002eb0 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8002eb0:	b580      	push	{r7, lr}
 8002eb2:	b088      	sub	sp, #32
 8002eb4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002eb6:	f107 0310 	add.w	r3, r7, #16
 8002eba:	2200      	movs	r2, #0
 8002ebc:	601a      	str	r2, [r3, #0]
 8002ebe:	605a      	str	r2, [r3, #4]
 8002ec0:	609a      	str	r2, [r3, #8]
 8002ec2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002ec4:	1d3b      	adds	r3, r7, #4
 8002ec6:	2200      	movs	r2, #0
 8002ec8:	601a      	str	r2, [r3, #0]
 8002eca:	605a      	str	r2, [r3, #4]
 8002ecc:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8002ece:	4b1e      	ldr	r3, [pc, #120]	; (8002f48 <MX_TIM4_Init+0x98>)
 8002ed0:	4a1e      	ldr	r2, [pc, #120]	; (8002f4c <MX_TIM4_Init+0x9c>)
 8002ed2:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 62499;
 8002ed4:	4b1c      	ldr	r3, [pc, #112]	; (8002f48 <MX_TIM4_Init+0x98>)
 8002ed6:	f24f 4223 	movw	r2, #62499	; 0xf423
 8002eda:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002edc:	4b1a      	ldr	r3, [pc, #104]	; (8002f48 <MX_TIM4_Init+0x98>)
 8002ede:	2200      	movs	r2, #0
 8002ee0:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8002ee2:	4b19      	ldr	r3, [pc, #100]	; (8002f48 <MX_TIM4_Init+0x98>)
 8002ee4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002ee8:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002eea:	4b17      	ldr	r3, [pc, #92]	; (8002f48 <MX_TIM4_Init+0x98>)
 8002eec:	2200      	movs	r2, #0
 8002eee:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002ef0:	4b15      	ldr	r3, [pc, #84]	; (8002f48 <MX_TIM4_Init+0x98>)
 8002ef2:	2200      	movs	r2, #0
 8002ef4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8002ef6:	4814      	ldr	r0, [pc, #80]	; (8002f48 <MX_TIM4_Init+0x98>)
 8002ef8:	f00a fda0 	bl	800da3c <HAL_TIM_Base_Init>
 8002efc:	4603      	mov	r3, r0
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d001      	beq.n	8002f06 <MX_TIM4_Init+0x56>
  {
    Error_Handler();
 8002f02:	f000 fa9b 	bl	800343c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002f06:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002f0a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8002f0c:	f107 0310 	add.w	r3, r7, #16
 8002f10:	4619      	mov	r1, r3
 8002f12:	480d      	ldr	r0, [pc, #52]	; (8002f48 <MX_TIM4_Init+0x98>)
 8002f14:	f00a fdea 	bl	800daec <HAL_TIM_ConfigClockSource>
 8002f18:	4603      	mov	r3, r0
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d001      	beq.n	8002f22 <MX_TIM4_Init+0x72>
  {
    Error_Handler();
 8002f1e:	f000 fa8d 	bl	800343c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002f22:	2300      	movs	r3, #0
 8002f24:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002f26:	2300      	movs	r3, #0
 8002f28:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002f2a:	1d3b      	adds	r3, r7, #4
 8002f2c:	4619      	mov	r1, r3
 8002f2e:	4806      	ldr	r0, [pc, #24]	; (8002f48 <MX_TIM4_Init+0x98>)
 8002f30:	f00b f80c 	bl	800df4c <HAL_TIMEx_MasterConfigSynchronization>
 8002f34:	4603      	mov	r3, r0
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d001      	beq.n	8002f3e <MX_TIM4_Init+0x8e>
  {
    Error_Handler();
 8002f3a:	f000 fa7f 	bl	800343c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8002f3e:	bf00      	nop
 8002f40:	3720      	adds	r7, #32
 8002f42:	46bd      	mov	sp, r7
 8002f44:	bd80      	pop	{r7, pc}
 8002f46:	bf00      	nop
 8002f48:	200005d8 	.word	0x200005d8
 8002f4c:	40000800 	.word	0x40000800

08002f50 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8002f50:	b580      	push	{r7, lr}
 8002f52:	b088      	sub	sp, #32
 8002f54:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002f56:	f107 0310 	add.w	r3, r7, #16
 8002f5a:	2200      	movs	r2, #0
 8002f5c:	601a      	str	r2, [r3, #0]
 8002f5e:	605a      	str	r2, [r3, #4]
 8002f60:	609a      	str	r2, [r3, #8]
 8002f62:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002f64:	1d3b      	adds	r3, r7, #4
 8002f66:	2200      	movs	r2, #0
 8002f68:	601a      	str	r2, [r3, #0]
 8002f6a:	605a      	str	r2, [r3, #4]
 8002f6c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8002f6e:	4b1d      	ldr	r3, [pc, #116]	; (8002fe4 <MX_TIM5_Init+0x94>)
 8002f70:	4a1d      	ldr	r2, [pc, #116]	; (8002fe8 <MX_TIM5_Init+0x98>)
 8002f72:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 124;
 8002f74:	4b1b      	ldr	r3, [pc, #108]	; (8002fe4 <MX_TIM5_Init+0x94>)
 8002f76:	227c      	movs	r2, #124	; 0x7c
 8002f78:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002f7a:	4b1a      	ldr	r3, [pc, #104]	; (8002fe4 <MX_TIM5_Init+0x94>)
 8002f7c:	2200      	movs	r2, #0
 8002f7e:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8002f80:	4b18      	ldr	r3, [pc, #96]	; (8002fe4 <MX_TIM5_Init+0x94>)
 8002f82:	f04f 32ff 	mov.w	r2, #4294967295
 8002f86:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002f88:	4b16      	ldr	r3, [pc, #88]	; (8002fe4 <MX_TIM5_Init+0x94>)
 8002f8a:	2200      	movs	r2, #0
 8002f8c:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002f8e:	4b15      	ldr	r3, [pc, #84]	; (8002fe4 <MX_TIM5_Init+0x94>)
 8002f90:	2200      	movs	r2, #0
 8002f92:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8002f94:	4813      	ldr	r0, [pc, #76]	; (8002fe4 <MX_TIM5_Init+0x94>)
 8002f96:	f00a fd51 	bl	800da3c <HAL_TIM_Base_Init>
 8002f9a:	4603      	mov	r3, r0
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d001      	beq.n	8002fa4 <MX_TIM5_Init+0x54>
  {
    Error_Handler();
 8002fa0:	f000 fa4c 	bl	800343c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002fa4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002fa8:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8002faa:	f107 0310 	add.w	r3, r7, #16
 8002fae:	4619      	mov	r1, r3
 8002fb0:	480c      	ldr	r0, [pc, #48]	; (8002fe4 <MX_TIM5_Init+0x94>)
 8002fb2:	f00a fd9b 	bl	800daec <HAL_TIM_ConfigClockSource>
 8002fb6:	4603      	mov	r3, r0
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d001      	beq.n	8002fc0 <MX_TIM5_Init+0x70>
  {
    Error_Handler();
 8002fbc:	f000 fa3e 	bl	800343c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002fc0:	2300      	movs	r3, #0
 8002fc2:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002fc4:	2300      	movs	r3, #0
 8002fc6:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8002fc8:	1d3b      	adds	r3, r7, #4
 8002fca:	4619      	mov	r1, r3
 8002fcc:	4805      	ldr	r0, [pc, #20]	; (8002fe4 <MX_TIM5_Init+0x94>)
 8002fce:	f00a ffbd 	bl	800df4c <HAL_TIMEx_MasterConfigSynchronization>
 8002fd2:	4603      	mov	r3, r0
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d001      	beq.n	8002fdc <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 8002fd8:	f000 fa30 	bl	800343c <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8002fdc:	bf00      	nop
 8002fde:	3720      	adds	r7, #32
 8002fe0:	46bd      	mov	sp, r7
 8002fe2:	bd80      	pop	{r7, pc}
 8002fe4:	20000624 	.word	0x20000624
 8002fe8:	40000c00 	.word	0x40000c00

08002fec <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8002fec:	b580      	push	{r7, lr}
 8002fee:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002ff0:	4b22      	ldr	r3, [pc, #136]	; (800307c <MX_USART3_UART_Init+0x90>)
 8002ff2:	4a23      	ldr	r2, [pc, #140]	; (8003080 <MX_USART3_UART_Init+0x94>)
 8002ff4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 1000000;
 8002ff6:	4b21      	ldr	r3, [pc, #132]	; (800307c <MX_USART3_UART_Init+0x90>)
 8002ff8:	4a22      	ldr	r2, [pc, #136]	; (8003084 <MX_USART3_UART_Init+0x98>)
 8002ffa:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002ffc:	4b1f      	ldr	r3, [pc, #124]	; (800307c <MX_USART3_UART_Init+0x90>)
 8002ffe:	2200      	movs	r2, #0
 8003000:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8003002:	4b1e      	ldr	r3, [pc, #120]	; (800307c <MX_USART3_UART_Init+0x90>)
 8003004:	2200      	movs	r2, #0
 8003006:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8003008:	4b1c      	ldr	r3, [pc, #112]	; (800307c <MX_USART3_UART_Init+0x90>)
 800300a:	2200      	movs	r2, #0
 800300c:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800300e:	4b1b      	ldr	r3, [pc, #108]	; (800307c <MX_USART3_UART_Init+0x90>)
 8003010:	220c      	movs	r2, #12
 8003012:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003014:	4b19      	ldr	r3, [pc, #100]	; (800307c <MX_USART3_UART_Init+0x90>)
 8003016:	2200      	movs	r2, #0
 8003018:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800301a:	4b18      	ldr	r3, [pc, #96]	; (800307c <MX_USART3_UART_Init+0x90>)
 800301c:	2200      	movs	r2, #0
 800301e:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003020:	4b16      	ldr	r3, [pc, #88]	; (800307c <MX_USART3_UART_Init+0x90>)
 8003022:	2200      	movs	r2, #0
 8003024:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8003026:	4b15      	ldr	r3, [pc, #84]	; (800307c <MX_USART3_UART_Init+0x90>)
 8003028:	2200      	movs	r2, #0
 800302a:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800302c:	4b13      	ldr	r3, [pc, #76]	; (800307c <MX_USART3_UART_Init+0x90>)
 800302e:	2200      	movs	r2, #0
 8003030:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8003032:	4812      	ldr	r0, [pc, #72]	; (800307c <MX_USART3_UART_Init+0x90>)
 8003034:	f00b f818 	bl	800e068 <HAL_UART_Init>
 8003038:	4603      	mov	r3, r0
 800303a:	2b00      	cmp	r3, #0
 800303c:	d001      	beq.n	8003042 <MX_USART3_UART_Init+0x56>
  {
    Error_Handler();
 800303e:	f000 f9fd 	bl	800343c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003042:	2100      	movs	r1, #0
 8003044:	480d      	ldr	r0, [pc, #52]	; (800307c <MX_USART3_UART_Init+0x90>)
 8003046:	f00c f8a8 	bl	800f19a <HAL_UARTEx_SetTxFifoThreshold>
 800304a:	4603      	mov	r3, r0
 800304c:	2b00      	cmp	r3, #0
 800304e:	d001      	beq.n	8003054 <MX_USART3_UART_Init+0x68>
  {
    Error_Handler();
 8003050:	f000 f9f4 	bl	800343c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003054:	2100      	movs	r1, #0
 8003056:	4809      	ldr	r0, [pc, #36]	; (800307c <MX_USART3_UART_Init+0x90>)
 8003058:	f00c f8dd 	bl	800f216 <HAL_UARTEx_SetRxFifoThreshold>
 800305c:	4603      	mov	r3, r0
 800305e:	2b00      	cmp	r3, #0
 8003060:	d001      	beq.n	8003066 <MX_USART3_UART_Init+0x7a>
  {
    Error_Handler();
 8003062:	f000 f9eb 	bl	800343c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8003066:	4805      	ldr	r0, [pc, #20]	; (800307c <MX_USART3_UART_Init+0x90>)
 8003068:	f00c f85e 	bl	800f128 <HAL_UARTEx_DisableFifoMode>
 800306c:	4603      	mov	r3, r0
 800306e:	2b00      	cmp	r3, #0
 8003070:	d001      	beq.n	8003076 <MX_USART3_UART_Init+0x8a>
  {
    Error_Handler();
 8003072:	f000 f9e3 	bl	800343c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8003076:	bf00      	nop
 8003078:	bd80      	pop	{r7, pc}
 800307a:	bf00      	nop
 800307c:	20000670 	.word	0x20000670
 8003080:	40004800 	.word	0x40004800
 8003084:	000f4240 	.word	0x000f4240

08003088 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003088:	b580      	push	{r7, lr}
 800308a:	b08e      	sub	sp, #56	; 0x38
 800308c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800308e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003092:	2200      	movs	r2, #0
 8003094:	601a      	str	r2, [r3, #0]
 8003096:	605a      	str	r2, [r3, #4]
 8003098:	609a      	str	r2, [r3, #8]
 800309a:	60da      	str	r2, [r3, #12]
 800309c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800309e:	4ba0      	ldr	r3, [pc, #640]	; (8003320 <MX_GPIO_Init+0x298>)
 80030a0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80030a4:	4a9e      	ldr	r2, [pc, #632]	; (8003320 <MX_GPIO_Init+0x298>)
 80030a6:	f043 0310 	orr.w	r3, r3, #16
 80030aa:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80030ae:	4b9c      	ldr	r3, [pc, #624]	; (8003320 <MX_GPIO_Init+0x298>)
 80030b0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80030b4:	f003 0310 	and.w	r3, r3, #16
 80030b8:	623b      	str	r3, [r7, #32]
 80030ba:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80030bc:	4b98      	ldr	r3, [pc, #608]	; (8003320 <MX_GPIO_Init+0x298>)
 80030be:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80030c2:	4a97      	ldr	r2, [pc, #604]	; (8003320 <MX_GPIO_Init+0x298>)
 80030c4:	f043 0304 	orr.w	r3, r3, #4
 80030c8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80030cc:	4b94      	ldr	r3, [pc, #592]	; (8003320 <MX_GPIO_Init+0x298>)
 80030ce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80030d2:	f003 0304 	and.w	r3, r3, #4
 80030d6:	61fb      	str	r3, [r7, #28]
 80030d8:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80030da:	4b91      	ldr	r3, [pc, #580]	; (8003320 <MX_GPIO_Init+0x298>)
 80030dc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80030e0:	4a8f      	ldr	r2, [pc, #572]	; (8003320 <MX_GPIO_Init+0x298>)
 80030e2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80030e6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80030ea:	4b8d      	ldr	r3, [pc, #564]	; (8003320 <MX_GPIO_Init+0x298>)
 80030ec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80030f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80030f4:	61bb      	str	r3, [r7, #24]
 80030f6:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80030f8:	4b89      	ldr	r3, [pc, #548]	; (8003320 <MX_GPIO_Init+0x298>)
 80030fa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80030fe:	4a88      	ldr	r2, [pc, #544]	; (8003320 <MX_GPIO_Init+0x298>)
 8003100:	f043 0301 	orr.w	r3, r3, #1
 8003104:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003108:	4b85      	ldr	r3, [pc, #532]	; (8003320 <MX_GPIO_Init+0x298>)
 800310a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800310e:	f003 0301 	and.w	r3, r3, #1
 8003112:	617b      	str	r3, [r7, #20]
 8003114:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003116:	4b82      	ldr	r3, [pc, #520]	; (8003320 <MX_GPIO_Init+0x298>)
 8003118:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800311c:	4a80      	ldr	r2, [pc, #512]	; (8003320 <MX_GPIO_Init+0x298>)
 800311e:	f043 0302 	orr.w	r3, r3, #2
 8003122:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003126:	4b7e      	ldr	r3, [pc, #504]	; (8003320 <MX_GPIO_Init+0x298>)
 8003128:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800312c:	f003 0302 	and.w	r3, r3, #2
 8003130:	613b      	str	r3, [r7, #16]
 8003132:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8003134:	4b7a      	ldr	r3, [pc, #488]	; (8003320 <MX_GPIO_Init+0x298>)
 8003136:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800313a:	4a79      	ldr	r2, [pc, #484]	; (8003320 <MX_GPIO_Init+0x298>)
 800313c:	f043 0320 	orr.w	r3, r3, #32
 8003140:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003144:	4b76      	ldr	r3, [pc, #472]	; (8003320 <MX_GPIO_Init+0x298>)
 8003146:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800314a:	f003 0320 	and.w	r3, r3, #32
 800314e:	60fb      	str	r3, [r7, #12]
 8003150:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8003152:	4b73      	ldr	r3, [pc, #460]	; (8003320 <MX_GPIO_Init+0x298>)
 8003154:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003158:	4a71      	ldr	r2, [pc, #452]	; (8003320 <MX_GPIO_Init+0x298>)
 800315a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800315e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003162:	4b6f      	ldr	r3, [pc, #444]	; (8003320 <MX_GPIO_Init+0x298>)
 8003164:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003168:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800316c:	60bb      	str	r3, [r7, #8]
 800316e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003170:	4b6b      	ldr	r3, [pc, #428]	; (8003320 <MX_GPIO_Init+0x298>)
 8003172:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003176:	4a6a      	ldr	r2, [pc, #424]	; (8003320 <MX_GPIO_Init+0x298>)
 8003178:	f043 0308 	orr.w	r3, r3, #8
 800317c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003180:	4b67      	ldr	r3, [pc, #412]	; (8003320 <MX_GPIO_Init+0x298>)
 8003182:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003186:	f003 0308 	and.w	r3, r3, #8
 800318a:	607b      	str	r3, [r7, #4]
 800318c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, ATT_4_Pin|ATT_8_Pin|ATT_16_Pin, GPIO_PIN_SET);
 800318e:	2201      	movs	r2, #1
 8003190:	2134      	movs	r1, #52	; 0x34
 8003192:	4864      	ldr	r0, [pc, #400]	; (8003324 <MX_GPIO_Init+0x29c>)
 8003194:	f004 ff48 	bl	8008028 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|MW_INVALID_Pin|LASER_TUNING_Pin|LD3_Pin
 8003198:	2200      	movs	r2, #0
 800319a:	f245 1103 	movw	r1, #20739	; 0x5103
 800319e:	4862      	ldr	r0, [pc, #392]	; (8003328 <MX_GPIO_Init+0x2a0>)
 80031a0:	f004 ff42 	bl	8008028 <HAL_GPIO_WritePin>
                          |SPARE_OUT_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SCOPE_TRIG_OUT_GPIO_Port, SCOPE_TRIG_OUT_Pin, GPIO_PIN_RESET);
 80031a4:	2200      	movs	r2, #0
 80031a6:	2101      	movs	r1, #1
 80031a8:	4860      	ldr	r0, [pc, #384]	; (800332c <MX_GPIO_Init+0x2a4>)
 80031aa:	f004 ff3d 	bl	8008028 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_OTG_FS_PWR_EN_GPIO_Port, USB_OTG_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 80031ae:	2200      	movs	r2, #0
 80031b0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80031b4:	485e      	ldr	r0, [pc, #376]	; (8003330 <MX_GPIO_Init+0x2a8>)
 80031b6:	f004 ff37 	bl	8008028 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, SCLK_Pin|MOSI_Pin|REG_EN_Pin, GPIO_PIN_RESET);
 80031ba:	2200      	movs	r2, #0
 80031bc:	f44f 5198 	mov.w	r1, #4864	; 0x1300
 80031c0:	485c      	ldr	r0, [pc, #368]	; (8003334 <MX_GPIO_Init+0x2ac>)
 80031c2:	f004 ff31 	bl	8008028 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SEN_GPIO_Port, SEN_Pin, GPIO_PIN_SET);
 80031c6:	2201      	movs	r2, #1
 80031c8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80031cc:	4859      	ldr	r0, [pc, #356]	; (8003334 <MX_GPIO_Init+0x2ac>)
 80031ce:	f004 ff2b 	bl	8008028 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, ATT_2_Pin|ATT_1_Pin|ATT_05_Pin|ATT_025_Pin
 80031d2:	2201      	movs	r2, #1
 80031d4:	21f8      	movs	r1, #248	; 0xf8
 80031d6:	4856      	ldr	r0, [pc, #344]	; (8003330 <MX_GPIO_Init+0x2a8>)
 80031d8:	f004 ff26 	bl	8008028 <HAL_GPIO_WritePin>
                          |ATT_LE_Pin, GPIO_PIN_SET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80031dc:	2200      	movs	r2, #0
 80031de:	2102      	movs	r1, #2
 80031e0:	4850      	ldr	r0, [pc, #320]	; (8003324 <MX_GPIO_Init+0x29c>)
 80031e2:	f004 ff21 	bl	8008028 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : ATT_4_Pin ATT_8_Pin ATT_16_Pin LD2_Pin */
  GPIO_InitStruct.Pin = ATT_4_Pin|ATT_8_Pin|ATT_16_Pin|LD2_Pin;
 80031e6:	2336      	movs	r3, #54	; 0x36
 80031e8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80031ea:	2301      	movs	r3, #1
 80031ec:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031ee:	2300      	movs	r3, #0
 80031f0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80031f2:	2300      	movs	r3, #0
 80031f4:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80031f6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80031fa:	4619      	mov	r1, r3
 80031fc:	4849      	ldr	r0, [pc, #292]	; (8003324 <MX_GPIO_Init+0x29c>)
 80031fe:	f004 fd4b 	bl	8007c98 <HAL_GPIO_Init>

  /*Configure GPIO pin : BLUE_BUTTON_Pin */
  GPIO_InitStruct.Pin = BLUE_BUTTON_Pin;
 8003202:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003206:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003208:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800320c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800320e:	2300      	movs	r3, #0
 8003210:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(BLUE_BUTTON_GPIO_Port, &GPIO_InitStruct);
 8003212:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003216:	4619      	mov	r1, r3
 8003218:	4846      	ldr	r0, [pc, #280]	; (8003334 <MX_GPIO_Init+0x2ac>)
 800321a:	f004 fd3d 	bl	8007c98 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin MW_INVALID_Pin LASER_TUNING_Pin LD3_Pin
                           SPARE_OUT_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|MW_INVALID_Pin|LASER_TUNING_Pin|LD3_Pin
 800321e:	f245 1303 	movw	r3, #20739	; 0x5103
 8003222:	627b      	str	r3, [r7, #36]	; 0x24
                          |SPARE_OUT_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003224:	2301      	movs	r3, #1
 8003226:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003228:	2300      	movs	r3, #0
 800322a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800322c:	2300      	movs	r3, #0
 800322e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003230:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003234:	4619      	mov	r1, r3
 8003236:	483c      	ldr	r0, [pc, #240]	; (8003328 <MX_GPIO_Init+0x2a0>)
 8003238:	f004 fd2e 	bl	8007c98 <HAL_GPIO_Init>

  /*Configure GPIO pin : PF11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 800323c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003240:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003242:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8003246:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003248:	2300      	movs	r3, #0
 800324a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800324c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003250:	4619      	mov	r1, r3
 8003252:	4839      	ldr	r0, [pc, #228]	; (8003338 <MX_GPIO_Init+0x2b0>)
 8003254:	f004 fd20 	bl	8007c98 <HAL_GPIO_Init>

  /*Configure GPIO pin : SCOPE_TRIG_OUT_Pin */
  GPIO_InitStruct.Pin = SCOPE_TRIG_OUT_Pin;
 8003258:	2301      	movs	r3, #1
 800325a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800325c:	2301      	movs	r3, #1
 800325e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003260:	2300      	movs	r3, #0
 8003262:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003264:	2300      	movs	r3, #0
 8003266:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(SCOPE_TRIG_OUT_GPIO_Port, &GPIO_InitStruct);
 8003268:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800326c:	4619      	mov	r1, r3
 800326e:	482f      	ldr	r0, [pc, #188]	; (800332c <MX_GPIO_Init+0x2a4>)
 8003270:	f004 fd12 	bl	8007c98 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_PWR_EN_Pin ATT_2_Pin ATT_1_Pin ATT_05_Pin
                           ATT_025_Pin ATT_LE_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin|ATT_2_Pin|ATT_1_Pin|ATT_05_Pin
 8003274:	f44f 639f 	mov.w	r3, #1272	; 0x4f8
 8003278:	627b      	str	r3, [r7, #36]	; 0x24
                          |ATT_025_Pin|ATT_LE_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800327a:	2301      	movs	r3, #1
 800327c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800327e:	2300      	movs	r3, #0
 8003280:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003282:	2300      	movs	r3, #0
 8003284:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003286:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800328a:	4619      	mov	r1, r3
 800328c:	4828      	ldr	r0, [pc, #160]	; (8003330 <MX_GPIO_Init+0x2a8>)
 800328e:	f004 fd03 	bl	8007c98 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS_OVCR_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVCR_Pin;
 8003292:	2380      	movs	r3, #128	; 0x80
 8003294:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003296:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800329a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800329c:	2300      	movs	r3, #0
 800329e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_OTG_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 80032a0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80032a4:	4619      	mov	r1, r3
 80032a6:	4821      	ldr	r0, [pc, #132]	; (800332c <MX_GPIO_Init+0x2a4>)
 80032a8:	f004 fcf6 	bl	8007c98 <HAL_GPIO_Init>

  /*Configure GPIO pins : SCLK_Pin MOSI_Pin SEN_Pin REG_EN_Pin */
  GPIO_InitStruct.Pin = SCLK_Pin|MOSI_Pin|SEN_Pin|REG_EN_Pin;
 80032ac:	f44f 53d8 	mov.w	r3, #6912	; 0x1b00
 80032b0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80032b2:	2301      	movs	r3, #1
 80032b4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80032b6:	2302      	movs	r3, #2
 80032b8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80032ba:	2300      	movs	r3, #0
 80032bc:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80032be:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80032c2:	4619      	mov	r1, r3
 80032c4:	481b      	ldr	r0, [pc, #108]	; (8003334 <MX_GPIO_Init+0x2ac>)
 80032c6:	f004 fce7 	bl	8007c98 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 80032ca:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 80032ce:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80032d0:	2302      	movs	r3, #2
 80032d2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032d4:	2300      	movs	r3, #0
 80032d6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80032d8:	2300      	movs	r3, #0
 80032da:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 80032dc:	230a      	movs	r3, #10
 80032de:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80032e0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80032e4:	4619      	mov	r1, r3
 80032e6:	4815      	ldr	r0, [pc, #84]	; (800333c <MX_GPIO_Init+0x2b4>)
 80032e8:	f004 fcd6 	bl	8007c98 <HAL_GPIO_Init>

  /*Configure GPIO pin : MISO_Pin */
  GPIO_InitStruct.Pin = MISO_Pin;
 80032ec:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80032f0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80032f2:	2300      	movs	r3, #0
 80032f4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032f6:	2300      	movs	r3, #0
 80032f8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(MISO_GPIO_Port, &GPIO_InitStruct);
 80032fa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80032fe:	4619      	mov	r1, r3
 8003300:	480c      	ldr	r0, [pc, #48]	; (8003334 <MX_GPIO_Init+0x2ac>)
 8003302:	f004 fcc9 	bl	8007c98 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8003306:	2200      	movs	r2, #0
 8003308:	2100      	movs	r1, #0
 800330a:	2028      	movs	r0, #40	; 0x28
 800330c:	f002 fe7b 	bl	8006006 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8003310:	2028      	movs	r0, #40	; 0x28
 8003312:	f002 fe92 	bl	800603a <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8003316:	bf00      	nop
 8003318:	3738      	adds	r7, #56	; 0x38
 800331a:	46bd      	mov	sp, r7
 800331c:	bd80      	pop	{r7, pc}
 800331e:	bf00      	nop
 8003320:	58024400 	.word	0x58024400
 8003324:	58021000 	.word	0x58021000
 8003328:	58020400 	.word	0x58020400
 800332c:	58021800 	.word	0x58021800
 8003330:	58020c00 	.word	0x58020c00
 8003334:	58020800 	.word	0x58020800
 8003338:	58021400 	.word	0x58021400
 800333c:	58020000 	.word	0x58020000

08003340 <HAL_ADC_ConvCpltCallback>:

/* USER CODE BEGIN 4 */

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003340:	b580      	push	{r7, lr}
 8003342:	b082      	sub	sp, #8
 8003344:	af00      	add	r7, sp, #0
 8003346:	6078      	str	r0, [r7, #4]
  adc_val = HAL_ADC_GetValue(&hadc3);
 8003348:	480e      	ldr	r0, [pc, #56]	; (8003384 <HAL_ADC_ConvCpltCallback+0x44>)
 800334a:	f001 fd17 	bl	8004d7c <HAL_ADC_GetValue>
 800334e:	4603      	mov	r3, r0
 8003350:	4a0d      	ldr	r2, [pc, #52]	; (8003388 <HAL_ADC_ConvCpltCallback+0x48>)
 8003352:	6013      	str	r3, [r2, #0]
  //printf("ADC value: %lu \r\n", adc_val);
  dac_val = adc_val >> 4;
 8003354:	4b0c      	ldr	r3, [pc, #48]	; (8003388 <HAL_ADC_ConvCpltCallback+0x48>)
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	091b      	lsrs	r3, r3, #4
 800335a:	4a0c      	ldr	r2, [pc, #48]	; (800338c <HAL_ADC_ConvCpltCallback+0x4c>)
 800335c:	6013      	str	r3, [r2, #0]
  sample_count++;
 800335e:	4b0c      	ldr	r3, [pc, #48]	; (8003390 <HAL_ADC_ConvCpltCallback+0x50>)
 8003360:	881b      	ldrh	r3, [r3, #0]
 8003362:	b29b      	uxth	r3, r3
 8003364:	3301      	adds	r3, #1
 8003366:	b29a      	uxth	r2, r3
 8003368:	4b09      	ldr	r3, [pc, #36]	; (8003390 <HAL_ADC_ConvCpltCallback+0x50>)
 800336a:	801a      	strh	r2, [r3, #0]
	  printf("ADC reading: %lu, max: %lu, min: %lu \r\n", adc_val, adc_max, adc_min);
  }
  //printf("ADC reading: %lu, max: %lu, min: %lu \r\n", adc_val, adc_max, adc_min);
#endif //QUANTIFY_ADC_NOISE
  //printf("ADC value: %lu, DAC value: %lu \r\n", adc_val, dac_val);
  HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R, dac_val);
 800336c:	4b07      	ldr	r3, [pc, #28]	; (800338c <HAL_ADC_ConvCpltCallback+0x4c>)
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	2200      	movs	r2, #0
 8003372:	2100      	movs	r1, #0
 8003374:	4807      	ldr	r0, [pc, #28]	; (8003394 <HAL_ADC_ConvCpltCallback+0x54>)
 8003376:	f002 ff6b 	bl	8006250 <HAL_DAC_SetValue>
  //HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R, 2048);
}
 800337a:	bf00      	nop
 800337c:	3708      	adds	r7, #8
 800337e:	46bd      	mov	sp, r7
 8003380:	bd80      	pop	{r7, pc}
 8003382:	bf00      	nop
 8003384:	20000368 	.word	0x20000368
 8003388:	2000070c 	.word	0x2000070c
 800338c:	20000710 	.word	0x20000710
 8003390:	20000706 	.word	0x20000706
 8003394:	200003cc 	.word	0x200003cc

08003398 <MPU_Config>:
/* USER CODE END 4 */

/* MPU Configuration */

void MPU_Config(void)
{
 8003398:	b580      	push	{r7, lr}
 800339a:	b084      	sub	sp, #16
 800339c:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 800339e:	463b      	mov	r3, r7
 80033a0:	2200      	movs	r2, #0
 80033a2:	601a      	str	r2, [r3, #0]
 80033a4:	605a      	str	r2, [r3, #4]
 80033a6:	609a      	str	r2, [r3, #8]
 80033a8:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 80033aa:	f002 fe61 	bl	8006070 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 80033ae:	2301      	movs	r3, #1
 80033b0:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 80033b2:	2300      	movs	r3, #0
 80033b4:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 80033b6:	2300      	movs	r3, #0
 80033b8:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 80033ba:	231f      	movs	r3, #31
 80033bc:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 80033be:	2387      	movs	r3, #135	; 0x87
 80033c0:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 80033c2:	2300      	movs	r3, #0
 80033c4:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 80033c6:	2300      	movs	r3, #0
 80033c8:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 80033ca:	2301      	movs	r3, #1
 80033cc:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 80033ce:	2301      	movs	r3, #1
 80033d0:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 80033d2:	2300      	movs	r3, #0
 80033d4:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 80033d6:	2300      	movs	r3, #0
 80033d8:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80033da:	463b      	mov	r3, r7
 80033dc:	4618      	mov	r0, r3
 80033de:	f002 fe7f 	bl	80060e0 <HAL_MPU_ConfigRegion>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER1;
 80033e2:	2301      	movs	r3, #1
 80033e4:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x30020000;
 80033e6:	4b13      	ldr	r3, [pc, #76]	; (8003434 <MPU_Config+0x9c>)
 80033e8:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_128KB;
 80033ea:	2310      	movs	r3, #16
 80033ec:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x0;
 80033ee:	2300      	movs	r3, #0
 80033f0:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL1;
 80033f2:	2301      	movs	r3, #1
 80033f4:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 80033f6:	2303      	movs	r3, #3
 80033f8:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.IsShareable = MPU_ACCESS_NOT_SHAREABLE;
 80033fa:	2300      	movs	r3, #0
 80033fc:	737b      	strb	r3, [r7, #13]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80033fe:	463b      	mov	r3, r7
 8003400:	4618      	mov	r0, r3
 8003402:	f002 fe6d 	bl	80060e0 <HAL_MPU_ConfigRegion>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER2;
 8003406:	2302      	movs	r3, #2
 8003408:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x30040000;
 800340a:	4b0b      	ldr	r3, [pc, #44]	; (8003438 <MPU_Config+0xa0>)
 800340c:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_512B;
 800340e:	2308      	movs	r3, #8
 8003410:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8003412:	2300      	movs	r3, #0
 8003414:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8003416:	2301      	movs	r3, #1
 8003418:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_BUFFERABLE;
 800341a:	2301      	movs	r3, #1
 800341c:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 800341e:	463b      	mov	r3, r7
 8003420:	4618      	mov	r0, r3
 8003422:	f002 fe5d 	bl	80060e0 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8003426:	2004      	movs	r0, #4
 8003428:	f002 fe3a 	bl	80060a0 <HAL_MPU_Enable>

}
 800342c:	bf00      	nop
 800342e:	3710      	adds	r7, #16
 8003430:	46bd      	mov	sp, r7
 8003432:	bd80      	pop	{r7, pc}
 8003434:	30020000 	.word	0x30020000
 8003438:	30040000 	.word	0x30040000

0800343c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800343c:	b580      	push	{r7, lr}
 800343e:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8003440:	b672      	cpsid	i
}
 8003442:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	__disable_irq();

	printf("Error handler routine called\r\n");
 8003444:	4810      	ldr	r0, [pc, #64]	; (8003488 <Error_Handler+0x4c>)
 8003446:	f017 ff9d 	bl	801b384 <puts>

	/* Disable the AOM */
	HAL_HRTIM_WaveformOutputStop(&hhrtim, HRTIM_OUTPUT_TA1 | HRTIM_OUTPUT_TA2 | HRTIM_OUTPUT_TE1);
 800344a:	f240 1103 	movw	r1, #259	; 0x103
 800344e:	480f      	ldr	r0, [pc, #60]	; (800348c <Error_Handler+0x50>)
 8003450:	f005 f978 	bl	8008744 <HAL_HRTIM_WaveformOutputStop>
	HAL_HRTIM_WaveformCounterStop_IT(&hhrtim, HRTIM_TIMERID_TIMER_A | HRTIM_TIMERID_TIMER_E);
 8003454:	f44f 1108 	mov.w	r1, #2228224	; 0x220000
 8003458:	480c      	ldr	r0, [pc, #48]	; (800348c <Error_Handler+0x50>)
 800345a:	f005 fa11 	bl	8008880 <HAL_HRTIM_WaveformCountStop_IT>

	/* Power down the synthesiser */
	HAL_GPIO_WritePin(REG_EN_GPIO_Port, REG_EN_Pin, 0);
 800345e:	2200      	movs	r2, #0
 8003460:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003464:	480a      	ldr	r0, [pc, #40]	; (8003490 <Error_Handler+0x54>)
 8003466:	f004 fddf 	bl	8008028 <HAL_GPIO_WritePin>

	while (1) {
		HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin); //toggle red LED
 800346a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800346e:	4809      	ldr	r0, [pc, #36]	; (8003494 <Error_Handler+0x58>)
 8003470:	f004 fdf3 	bl	800805a <HAL_GPIO_TogglePin>
		timer_delay(SLOW_TIMER, ERROR_LED_DELAY);
 8003474:	4b08      	ldr	r3, [pc, #32]	; (8003498 <Error_Handler+0x5c>)
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800347c:	4611      	mov	r1, r2
 800347e:	4618      	mov	r0, r3
 8003480:	f01a f88a 	bl	801d598 <__timer_delay_veneer>
		HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin); //toggle red LED
 8003484:	e7f1      	b.n	800346a <Error_Handler+0x2e>
 8003486:	bf00      	nop
 8003488:	0801dbec 	.word	0x0801dbec
 800348c:	200003e0 	.word	0x200003e0
 8003490:	58020800 	.word	0x58020800
 8003494:	58020400 	.word	0x58020400
 8003498:	20000124 	.word	0x20000124

0800349c <HAL_MspInit>:
void HAL_HRTIM_MspPostInit(HRTIM_HandleTypeDef *hhrtim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800349c:	b480      	push	{r7}
 800349e:	b083      	sub	sp, #12
 80034a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80034a2:	4b0a      	ldr	r3, [pc, #40]	; (80034cc <HAL_MspInit+0x30>)
 80034a4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80034a8:	4a08      	ldr	r2, [pc, #32]	; (80034cc <HAL_MspInit+0x30>)
 80034aa:	f043 0302 	orr.w	r3, r3, #2
 80034ae:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80034b2:	4b06      	ldr	r3, [pc, #24]	; (80034cc <HAL_MspInit+0x30>)
 80034b4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80034b8:	f003 0302 	and.w	r3, r3, #2
 80034bc:	607b      	str	r3, [r7, #4]
 80034be:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80034c0:	bf00      	nop
 80034c2:	370c      	adds	r7, #12
 80034c4:	46bd      	mov	sp, r7
 80034c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ca:	4770      	bx	lr
 80034cc:	58024400 	.word	0x58024400

080034d0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80034d0:	b580      	push	{r7, lr}
 80034d2:	b0b4      	sub	sp, #208	; 0xd0
 80034d4:	af00      	add	r7, sp, #0
 80034d6:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80034d8:	f107 0310 	add.w	r3, r7, #16
 80034dc:	22c0      	movs	r2, #192	; 0xc0
 80034de:	2100      	movs	r1, #0
 80034e0:	4618      	mov	r0, r3
 80034e2:	f018 f879 	bl	801b5d8 <memset>
  if(hadc->Instance==ADC3)
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	4a2b      	ldr	r2, [pc, #172]	; (8003598 <HAL_ADC_MspInit+0xc8>)
 80034ec:	4293      	cmp	r3, r2
 80034ee:	d14e      	bne.n	800358e <HAL_ADC_MspInit+0xbe>

  /* USER CODE END ADC3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80034f0:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80034f4:	f04f 0300 	mov.w	r3, #0
 80034f8:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.PLL2.PLL2M = 1;
 80034fc:	2301      	movs	r3, #1
 80034fe:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLL2.PLL2N = 19;
 8003500:	2313      	movs	r3, #19
 8003502:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLL2.PLL2P = 79;
 8003504:	234f      	movs	r3, #79	; 0x4f
 8003506:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8003508:	2302      	movs	r3, #2
 800350a:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.PLL2.PLL2R = 2;
 800350c:	2302      	movs	r3, #2
 800350e:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 8003510:	23c0      	movs	r3, #192	; 0xc0
 8003512:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 8003514:	2320      	movs	r3, #32
 8003516:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8003518:	2300      	movs	r3, #0
 800351a:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 800351c:	2300      	movs	r3, #0
 800351e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003522:	f107 0310 	add.w	r3, r7, #16
 8003526:	4618      	mov	r0, r3
 8003528:	f007 fd34 	bl	800af94 <HAL_RCCEx_PeriphCLKConfig>
 800352c:	4603      	mov	r3, r0
 800352e:	2b00      	cmp	r3, #0
 8003530:	d001      	beq.n	8003536 <HAL_ADC_MspInit+0x66>
    {
      Error_Handler();
 8003532:	f7ff ff83 	bl	800343c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC3_CLK_ENABLE();
 8003536:	4b19      	ldr	r3, [pc, #100]	; (800359c <HAL_ADC_MspInit+0xcc>)
 8003538:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800353c:	4a17      	ldr	r2, [pc, #92]	; (800359c <HAL_ADC_MspInit+0xcc>)
 800353e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003542:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003546:	4b15      	ldr	r3, [pc, #84]	; (800359c <HAL_ADC_MspInit+0xcc>)
 8003548:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800354c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003550:	60fb      	str	r3, [r7, #12]
 8003552:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003554:	4b11      	ldr	r3, [pc, #68]	; (800359c <HAL_ADC_MspInit+0xcc>)
 8003556:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800355a:	4a10      	ldr	r2, [pc, #64]	; (800359c <HAL_ADC_MspInit+0xcc>)
 800355c:	f043 0304 	orr.w	r3, r3, #4
 8003560:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003564:	4b0d      	ldr	r3, [pc, #52]	; (800359c <HAL_ADC_MspInit+0xcc>)
 8003566:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800356a:	f003 0304 	and.w	r3, r3, #4
 800356e:	60bb      	str	r3, [r7, #8]
 8003570:	68bb      	ldr	r3, [r7, #8]
    /**ADC3 GPIO Configuration
    PC2_C     ------> ADC3_INP0
    */
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC2, SYSCFG_SWITCH_PC2_OPEN);
 8003572:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
 8003576:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 800357a:	f000 feed 	bl	8004358 <HAL_SYSCFG_AnalogSwitchConfig>

    /* ADC3 interrupt Init */
    HAL_NVIC_SetPriority(ADC3_IRQn, 0, 0);
 800357e:	2200      	movs	r2, #0
 8003580:	2100      	movs	r1, #0
 8003582:	207f      	movs	r0, #127	; 0x7f
 8003584:	f002 fd3f 	bl	8006006 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC3_IRQn);
 8003588:	207f      	movs	r0, #127	; 0x7f
 800358a:	f002 fd56 	bl	800603a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 800358e:	bf00      	nop
 8003590:	37d0      	adds	r7, #208	; 0xd0
 8003592:	46bd      	mov	sp, r7
 8003594:	bd80      	pop	{r7, pc}
 8003596:	bf00      	nop
 8003598:	58026000 	.word	0x58026000
 800359c:	58024400 	.word	0x58024400

080035a0 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 80035a0:	b580      	push	{r7, lr}
 80035a2:	b08a      	sub	sp, #40	; 0x28
 80035a4:	af00      	add	r7, sp, #0
 80035a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80035a8:	f107 0314 	add.w	r3, r7, #20
 80035ac:	2200      	movs	r2, #0
 80035ae:	601a      	str	r2, [r3, #0]
 80035b0:	605a      	str	r2, [r3, #4]
 80035b2:	609a      	str	r2, [r3, #8]
 80035b4:	60da      	str	r2, [r3, #12]
 80035b6:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	4a18      	ldr	r2, [pc, #96]	; (8003620 <HAL_DAC_MspInit+0x80>)
 80035be:	4293      	cmp	r3, r2
 80035c0:	d129      	bne.n	8003616 <HAL_DAC_MspInit+0x76>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC12_CLK_ENABLE();
 80035c2:	4b18      	ldr	r3, [pc, #96]	; (8003624 <HAL_DAC_MspInit+0x84>)
 80035c4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80035c8:	4a16      	ldr	r2, [pc, #88]	; (8003624 <HAL_DAC_MspInit+0x84>)
 80035ca:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80035ce:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80035d2:	4b14      	ldr	r3, [pc, #80]	; (8003624 <HAL_DAC_MspInit+0x84>)
 80035d4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80035d8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80035dc:	613b      	str	r3, [r7, #16]
 80035de:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80035e0:	4b10      	ldr	r3, [pc, #64]	; (8003624 <HAL_DAC_MspInit+0x84>)
 80035e2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80035e6:	4a0f      	ldr	r2, [pc, #60]	; (8003624 <HAL_DAC_MspInit+0x84>)
 80035e8:	f043 0301 	orr.w	r3, r3, #1
 80035ec:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80035f0:	4b0c      	ldr	r3, [pc, #48]	; (8003624 <HAL_DAC_MspInit+0x84>)
 80035f2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80035f6:	f003 0301 	and.w	r3, r3, #1
 80035fa:	60fb      	str	r3, [r7, #12]
 80035fc:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80035fe:	2310      	movs	r3, #16
 8003600:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003602:	2303      	movs	r3, #3
 8003604:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003606:	2300      	movs	r3, #0
 8003608:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800360a:	f107 0314 	add.w	r3, r7, #20
 800360e:	4619      	mov	r1, r3
 8003610:	4805      	ldr	r0, [pc, #20]	; (8003628 <HAL_DAC_MspInit+0x88>)
 8003612:	f004 fb41 	bl	8007c98 <HAL_GPIO_Init>
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 8003616:	bf00      	nop
 8003618:	3728      	adds	r7, #40	; 0x28
 800361a:	46bd      	mov	sp, r7
 800361c:	bd80      	pop	{r7, pc}
 800361e:	bf00      	nop
 8003620:	40007400 	.word	0x40007400
 8003624:	58024400 	.word	0x58024400
 8003628:	58020000 	.word	0x58020000

0800362c <HAL_HRTIM_MspInit>:
* This function configures the hardware resources used in this example
* @param hhrtim: HRTIM handle pointer
* @retval None
*/
void HAL_HRTIM_MspInit(HRTIM_HandleTypeDef* hhrtim)
{
 800362c:	b580      	push	{r7, lr}
 800362e:	b0b4      	sub	sp, #208	; 0xd0
 8003630:	af00      	add	r7, sp, #0
 8003632:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003634:	f107 0310 	add.w	r3, r7, #16
 8003638:	22c0      	movs	r2, #192	; 0xc0
 800363a:	2100      	movs	r1, #0
 800363c:	4618      	mov	r0, r3
 800363e:	f017 ffcb 	bl	801b5d8 <memset>
  if(hhrtim->Instance==HRTIM1)
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	4a1c      	ldr	r2, [pc, #112]	; (80036b8 <HAL_HRTIM_MspInit+0x8c>)
 8003648:	4293      	cmp	r3, r2
 800364a:	d131      	bne.n	80036b0 <HAL_HRTIM_MspInit+0x84>

  /* USER CODE END HRTIM1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_HRTIM1;
 800364c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003650:	f04f 0300 	mov.w	r3, #0
 8003654:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Hrtim1ClockSelection = RCC_HRTIM1CLK_TIMCLK;
 8003658:	2300      	movs	r3, #0
 800365a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800365e:	f107 0310 	add.w	r3, r7, #16
 8003662:	4618      	mov	r0, r3
 8003664:	f007 fc96 	bl	800af94 <HAL_RCCEx_PeriphCLKConfig>
 8003668:	4603      	mov	r3, r0
 800366a:	2b00      	cmp	r3, #0
 800366c:	d001      	beq.n	8003672 <HAL_HRTIM_MspInit+0x46>
    {
      Error_Handler();
 800366e:	f7ff fee5 	bl	800343c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_HRTIM1_CLK_ENABLE();
 8003672:	4b12      	ldr	r3, [pc, #72]	; (80036bc <HAL_HRTIM_MspInit+0x90>)
 8003674:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003678:	4a10      	ldr	r2, [pc, #64]	; (80036bc <HAL_HRTIM_MspInit+0x90>)
 800367a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800367e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8003682:	4b0e      	ldr	r3, [pc, #56]	; (80036bc <HAL_HRTIM_MspInit+0x90>)
 8003684:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003688:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800368c:	60fb      	str	r3, [r7, #12]
 800368e:	68fb      	ldr	r3, [r7, #12]
    /* HRTIM1 interrupt Init */
    HAL_NVIC_SetPriority(HRTIM1_TIMA_IRQn, 0, 0);
 8003690:	2200      	movs	r2, #0
 8003692:	2100      	movs	r1, #0
 8003694:	2068      	movs	r0, #104	; 0x68
 8003696:	f002 fcb6 	bl	8006006 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(HRTIM1_TIMA_IRQn);
 800369a:	2068      	movs	r0, #104	; 0x68
 800369c:	f002 fccd 	bl	800603a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(HRTIM1_TIME_IRQn, 0, 0);
 80036a0:	2200      	movs	r2, #0
 80036a2:	2100      	movs	r1, #0
 80036a4:	206c      	movs	r0, #108	; 0x6c
 80036a6:	f002 fcae 	bl	8006006 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(HRTIM1_TIME_IRQn);
 80036aa:	206c      	movs	r0, #108	; 0x6c
 80036ac:	f002 fcc5 	bl	800603a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN HRTIM1_MspInit 1 */

  /* USER CODE END HRTIM1_MspInit 1 */
  }

}
 80036b0:	bf00      	nop
 80036b2:	37d0      	adds	r7, #208	; 0xd0
 80036b4:	46bd      	mov	sp, r7
 80036b6:	bd80      	pop	{r7, pc}
 80036b8:	40017400 	.word	0x40017400
 80036bc:	58024400 	.word	0x58024400

080036c0 <HAL_HRTIM_MspPostInit>:

void HAL_HRTIM_MspPostInit(HRTIM_HandleTypeDef* hhrtim)
{
 80036c0:	b580      	push	{r7, lr}
 80036c2:	b08a      	sub	sp, #40	; 0x28
 80036c4:	af00      	add	r7, sp, #0
 80036c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80036c8:	f107 0314 	add.w	r3, r7, #20
 80036cc:	2200      	movs	r2, #0
 80036ce:	601a      	str	r2, [r3, #0]
 80036d0:	605a      	str	r2, [r3, #4]
 80036d2:	609a      	str	r2, [r3, #8]
 80036d4:	60da      	str	r2, [r3, #12]
 80036d6:	611a      	str	r2, [r3, #16]
  if(hhrtim->Instance==HRTIM1)
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	4a22      	ldr	r2, [pc, #136]	; (8003768 <HAL_HRTIM_MspPostInit+0xa8>)
 80036de:	4293      	cmp	r3, r2
 80036e0:	d13d      	bne.n	800375e <HAL_HRTIM_MspPostInit+0x9e>
  {
  /* USER CODE BEGIN HRTIM1_MspPostInit 0 */

  /* USER CODE END HRTIM1_MspPostInit 0 */

    __HAL_RCC_GPIOG_CLK_ENABLE();
 80036e2:	4b22      	ldr	r3, [pc, #136]	; (800376c <HAL_HRTIM_MspPostInit+0xac>)
 80036e4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80036e8:	4a20      	ldr	r2, [pc, #128]	; (800376c <HAL_HRTIM_MspPostInit+0xac>)
 80036ea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80036ee:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80036f2:	4b1e      	ldr	r3, [pc, #120]	; (800376c <HAL_HRTIM_MspPostInit+0xac>)
 80036f4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80036f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036fc:	613b      	str	r3, [r7, #16]
 80036fe:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003700:	4b1a      	ldr	r3, [pc, #104]	; (800376c <HAL_HRTIM_MspPostInit+0xac>)
 8003702:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003706:	4a19      	ldr	r2, [pc, #100]	; (800376c <HAL_HRTIM_MspPostInit+0xac>)
 8003708:	f043 0304 	orr.w	r3, r3, #4
 800370c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003710:	4b16      	ldr	r3, [pc, #88]	; (800376c <HAL_HRTIM_MspPostInit+0xac>)
 8003712:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003716:	f003 0304 	and.w	r3, r3, #4
 800371a:	60fb      	str	r3, [r7, #12]
 800371c:	68fb      	ldr	r3, [r7, #12]
    /**HRTIM GPIO Configuration
    PG6     ------> HRTIM_CHE1
    PC6     ------> HRTIM_CHA1
    PC7     ------> HRTIM_CHA2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800371e:	2340      	movs	r3, #64	; 0x40
 8003720:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003722:	2302      	movs	r3, #2
 8003724:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003726:	2300      	movs	r3, #0
 8003728:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800372a:	2303      	movs	r3, #3
 800372c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_HRTIM1;
 800372e:	2302      	movs	r3, #2
 8003730:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8003732:	f107 0314 	add.w	r3, r7, #20
 8003736:	4619      	mov	r1, r3
 8003738:	480d      	ldr	r0, [pc, #52]	; (8003770 <HAL_HRTIM_MspPostInit+0xb0>)
 800373a:	f004 faad 	bl	8007c98 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800373e:	23c0      	movs	r3, #192	; 0xc0
 8003740:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003742:	2302      	movs	r3, #2
 8003744:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003746:	2300      	movs	r3, #0
 8003748:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800374a:	2303      	movs	r3, #3
 800374c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_HRTIM1;
 800374e:	2301      	movs	r3, #1
 8003750:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003752:	f107 0314 	add.w	r3, r7, #20
 8003756:	4619      	mov	r1, r3
 8003758:	4806      	ldr	r0, [pc, #24]	; (8003774 <HAL_HRTIM_MspPostInit+0xb4>)
 800375a:	f004 fa9d 	bl	8007c98 <HAL_GPIO_Init>
  /* USER CODE BEGIN HRTIM1_MspPostInit 1 */

  /* USER CODE END HRTIM1_MspPostInit 1 */
  }

}
 800375e:	bf00      	nop
 8003760:	3728      	adds	r7, #40	; 0x28
 8003762:	46bd      	mov	sp, r7
 8003764:	bd80      	pop	{r7, pc}
 8003766:	bf00      	nop
 8003768:	40017400 	.word	0x40017400
 800376c:	58024400 	.word	0x58024400
 8003770:	58021800 	.word	0x58021800
 8003774:	58020800 	.word	0x58020800

08003778 <HAL_LPTIM_MspInit>:
* This function configures the hardware resources used in this example
* @param hlptim: LPTIM handle pointer
* @retval None
*/
void HAL_LPTIM_MspInit(LPTIM_HandleTypeDef* hlptim)
{
 8003778:	b580      	push	{r7, lr}
 800377a:	b0b4      	sub	sp, #208	; 0xd0
 800377c:	af00      	add	r7, sp, #0
 800377e:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003780:	f107 0310 	add.w	r3, r7, #16
 8003784:	22c0      	movs	r2, #192	; 0xc0
 8003786:	2100      	movs	r1, #0
 8003788:	4618      	mov	r0, r3
 800378a:	f017 ff25 	bl	801b5d8 <memset>
  if(hlptim->Instance==LPTIM1)
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	4a19      	ldr	r2, [pc, #100]	; (80037f8 <HAL_LPTIM_MspInit+0x80>)
 8003794:	4293      	cmp	r3, r2
 8003796:	d12a      	bne.n	80037ee <HAL_LPTIM_MspInit+0x76>

  /* USER CODE END LPTIM1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LPTIM1;
 8003798:	f04f 0220 	mov.w	r2, #32
 800379c:	f04f 0300 	mov.w	r3, #0
 80037a0:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Lptim1ClockSelection = RCC_LPTIM1CLKSOURCE_LSE;
 80037a4:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 80037a8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80037ac:	f107 0310 	add.w	r3, r7, #16
 80037b0:	4618      	mov	r0, r3
 80037b2:	f007 fbef 	bl	800af94 <HAL_RCCEx_PeriphCLKConfig>
 80037b6:	4603      	mov	r3, r0
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d001      	beq.n	80037c0 <HAL_LPTIM_MspInit+0x48>
    {
      Error_Handler();
 80037bc:	f7ff fe3e 	bl	800343c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPTIM1_CLK_ENABLE();
 80037c0:	4b0e      	ldr	r3, [pc, #56]	; (80037fc <HAL_LPTIM_MspInit+0x84>)
 80037c2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80037c6:	4a0d      	ldr	r2, [pc, #52]	; (80037fc <HAL_LPTIM_MspInit+0x84>)
 80037c8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80037cc:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80037d0:	4b0a      	ldr	r3, [pc, #40]	; (80037fc <HAL_LPTIM_MspInit+0x84>)
 80037d2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80037d6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80037da:	60fb      	str	r3, [r7, #12]
 80037dc:	68fb      	ldr	r3, [r7, #12]
    /* LPTIM1 interrupt Init */
    HAL_NVIC_SetPriority(LPTIM1_IRQn, 0, 0);
 80037de:	2200      	movs	r2, #0
 80037e0:	2100      	movs	r1, #0
 80037e2:	205d      	movs	r0, #93	; 0x5d
 80037e4:	f002 fc0f 	bl	8006006 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPTIM1_IRQn);
 80037e8:	205d      	movs	r0, #93	; 0x5d
 80037ea:	f002 fc26 	bl	800603a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LPTIM1_MspInit 1 */

  /* USER CODE END LPTIM1_MspInit 1 */
  }

}
 80037ee:	bf00      	nop
 80037f0:	37d0      	adds	r7, #208	; 0xd0
 80037f2:	46bd      	mov	sp, r7
 80037f4:	bd80      	pop	{r7, pc}
 80037f6:	bf00      	nop
 80037f8:	40002400 	.word	0x40002400
 80037fc:	58024400 	.word	0x58024400

08003800 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003800:	b480      	push	{r7}
 8003802:	b089      	sub	sp, #36	; 0x24
 8003804:	af00      	add	r7, sp, #0
 8003806:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	4a35      	ldr	r2, [pc, #212]	; (80038e4 <HAL_TIM_Base_MspInit+0xe4>)
 800380e:	4293      	cmp	r3, r2
 8003810:	d10f      	bne.n	8003832 <HAL_TIM_Base_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003812:	4b35      	ldr	r3, [pc, #212]	; (80038e8 <HAL_TIM_Base_MspInit+0xe8>)
 8003814:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003818:	4a33      	ldr	r2, [pc, #204]	; (80038e8 <HAL_TIM_Base_MspInit+0xe8>)
 800381a:	f043 0301 	orr.w	r3, r3, #1
 800381e:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8003822:	4b31      	ldr	r3, [pc, #196]	; (80038e8 <HAL_TIM_Base_MspInit+0xe8>)
 8003824:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8003828:	f003 0301 	and.w	r3, r3, #1
 800382c:	61fb      	str	r3, [r7, #28]
 800382e:	69fb      	ldr	r3, [r7, #28]
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 8003830:	e052      	b.n	80038d8 <HAL_TIM_Base_MspInit+0xd8>
  else if(htim_base->Instance==TIM2)
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800383a:	d10f      	bne.n	800385c <HAL_TIM_Base_MspInit+0x5c>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800383c:	4b2a      	ldr	r3, [pc, #168]	; (80038e8 <HAL_TIM_Base_MspInit+0xe8>)
 800383e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003842:	4a29      	ldr	r2, [pc, #164]	; (80038e8 <HAL_TIM_Base_MspInit+0xe8>)
 8003844:	f043 0301 	orr.w	r3, r3, #1
 8003848:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800384c:	4b26      	ldr	r3, [pc, #152]	; (80038e8 <HAL_TIM_Base_MspInit+0xe8>)
 800384e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003852:	f003 0301 	and.w	r3, r3, #1
 8003856:	61bb      	str	r3, [r7, #24]
 8003858:	69bb      	ldr	r3, [r7, #24]
}
 800385a:	e03d      	b.n	80038d8 <HAL_TIM_Base_MspInit+0xd8>
  else if(htim_base->Instance==TIM3)
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	4a22      	ldr	r2, [pc, #136]	; (80038ec <HAL_TIM_Base_MspInit+0xec>)
 8003862:	4293      	cmp	r3, r2
 8003864:	d10f      	bne.n	8003886 <HAL_TIM_Base_MspInit+0x86>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003866:	4b20      	ldr	r3, [pc, #128]	; (80038e8 <HAL_TIM_Base_MspInit+0xe8>)
 8003868:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800386c:	4a1e      	ldr	r2, [pc, #120]	; (80038e8 <HAL_TIM_Base_MspInit+0xe8>)
 800386e:	f043 0302 	orr.w	r3, r3, #2
 8003872:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8003876:	4b1c      	ldr	r3, [pc, #112]	; (80038e8 <HAL_TIM_Base_MspInit+0xe8>)
 8003878:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800387c:	f003 0302 	and.w	r3, r3, #2
 8003880:	617b      	str	r3, [r7, #20]
 8003882:	697b      	ldr	r3, [r7, #20]
}
 8003884:	e028      	b.n	80038d8 <HAL_TIM_Base_MspInit+0xd8>
  else if(htim_base->Instance==TIM4)
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	4a19      	ldr	r2, [pc, #100]	; (80038f0 <HAL_TIM_Base_MspInit+0xf0>)
 800388c:	4293      	cmp	r3, r2
 800388e:	d10f      	bne.n	80038b0 <HAL_TIM_Base_MspInit+0xb0>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8003890:	4b15      	ldr	r3, [pc, #84]	; (80038e8 <HAL_TIM_Base_MspInit+0xe8>)
 8003892:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003896:	4a14      	ldr	r2, [pc, #80]	; (80038e8 <HAL_TIM_Base_MspInit+0xe8>)
 8003898:	f043 0304 	orr.w	r3, r3, #4
 800389c:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80038a0:	4b11      	ldr	r3, [pc, #68]	; (80038e8 <HAL_TIM_Base_MspInit+0xe8>)
 80038a2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80038a6:	f003 0304 	and.w	r3, r3, #4
 80038aa:	613b      	str	r3, [r7, #16]
 80038ac:	693b      	ldr	r3, [r7, #16]
}
 80038ae:	e013      	b.n	80038d8 <HAL_TIM_Base_MspInit+0xd8>
  else if(htim_base->Instance==TIM5)
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	4a0f      	ldr	r2, [pc, #60]	; (80038f4 <HAL_TIM_Base_MspInit+0xf4>)
 80038b6:	4293      	cmp	r3, r2
 80038b8:	d10e      	bne.n	80038d8 <HAL_TIM_Base_MspInit+0xd8>
    __HAL_RCC_TIM5_CLK_ENABLE();
 80038ba:	4b0b      	ldr	r3, [pc, #44]	; (80038e8 <HAL_TIM_Base_MspInit+0xe8>)
 80038bc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80038c0:	4a09      	ldr	r2, [pc, #36]	; (80038e8 <HAL_TIM_Base_MspInit+0xe8>)
 80038c2:	f043 0308 	orr.w	r3, r3, #8
 80038c6:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80038ca:	4b07      	ldr	r3, [pc, #28]	; (80038e8 <HAL_TIM_Base_MspInit+0xe8>)
 80038cc:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80038d0:	f003 0308 	and.w	r3, r3, #8
 80038d4:	60fb      	str	r3, [r7, #12]
 80038d6:	68fb      	ldr	r3, [r7, #12]
}
 80038d8:	bf00      	nop
 80038da:	3724      	adds	r7, #36	; 0x24
 80038dc:	46bd      	mov	sp, r7
 80038de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038e2:	4770      	bx	lr
 80038e4:	40010000 	.word	0x40010000
 80038e8:	58024400 	.word	0x58024400
 80038ec:	40000400 	.word	0x40000400
 80038f0:	40000800 	.word	0x40000800
 80038f4:	40000c00 	.word	0x40000c00

080038f8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80038f8:	b580      	push	{r7, lr}
 80038fa:	b0ba      	sub	sp, #232	; 0xe8
 80038fc:	af00      	add	r7, sp, #0
 80038fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003900:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8003904:	2200      	movs	r2, #0
 8003906:	601a      	str	r2, [r3, #0]
 8003908:	605a      	str	r2, [r3, #4]
 800390a:	609a      	str	r2, [r3, #8]
 800390c:	60da      	str	r2, [r3, #12]
 800390e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003910:	f107 0310 	add.w	r3, r7, #16
 8003914:	22c0      	movs	r2, #192	; 0xc0
 8003916:	2100      	movs	r1, #0
 8003918:	4618      	mov	r0, r3
 800391a:	f017 fe5d 	bl	801b5d8 <memset>
  if(huart->Instance==USART3)
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	4a27      	ldr	r2, [pc, #156]	; (80039c0 <HAL_UART_MspInit+0xc8>)
 8003924:	4293      	cmp	r3, r2
 8003926:	d146      	bne.n	80039b6 <HAL_UART_MspInit+0xbe>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8003928:	f04f 0202 	mov.w	r2, #2
 800392c:	f04f 0300 	mov.w	r3, #0
 8003930:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8003934:	2300      	movs	r3, #0
 8003936:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800393a:	f107 0310 	add.w	r3, r7, #16
 800393e:	4618      	mov	r0, r3
 8003940:	f007 fb28 	bl	800af94 <HAL_RCCEx_PeriphCLKConfig>
 8003944:	4603      	mov	r3, r0
 8003946:	2b00      	cmp	r3, #0
 8003948:	d001      	beq.n	800394e <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 800394a:	f7ff fd77 	bl	800343c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800394e:	4b1d      	ldr	r3, [pc, #116]	; (80039c4 <HAL_UART_MspInit+0xcc>)
 8003950:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003954:	4a1b      	ldr	r2, [pc, #108]	; (80039c4 <HAL_UART_MspInit+0xcc>)
 8003956:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800395a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800395e:	4b19      	ldr	r3, [pc, #100]	; (80039c4 <HAL_UART_MspInit+0xcc>)
 8003960:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003964:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003968:	60fb      	str	r3, [r7, #12]
 800396a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800396c:	4b15      	ldr	r3, [pc, #84]	; (80039c4 <HAL_UART_MspInit+0xcc>)
 800396e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003972:	4a14      	ldr	r2, [pc, #80]	; (80039c4 <HAL_UART_MspInit+0xcc>)
 8003974:	f043 0308 	orr.w	r3, r3, #8
 8003978:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800397c:	4b11      	ldr	r3, [pc, #68]	; (80039c4 <HAL_UART_MspInit+0xcc>)
 800397e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003982:	f003 0308 	and.w	r3, r3, #8
 8003986:	60bb      	str	r3, [r7, #8]
 8003988:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 800398a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800398e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003992:	2302      	movs	r3, #2
 8003994:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003998:	2300      	movs	r3, #0
 800399a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800399e:	2300      	movs	r3, #0
 80039a0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80039a4:	2307      	movs	r3, #7
 80039a6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80039aa:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80039ae:	4619      	mov	r1, r3
 80039b0:	4805      	ldr	r0, [pc, #20]	; (80039c8 <HAL_UART_MspInit+0xd0>)
 80039b2:	f004 f971 	bl	8007c98 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80039b6:	bf00      	nop
 80039b8:	37e8      	adds	r7, #232	; 0xe8
 80039ba:	46bd      	mov	sp, r7
 80039bc:	bd80      	pop	{r7, pc}
 80039be:	bf00      	nop
 80039c0:	40004800 	.word	0x40004800
 80039c4:	58024400 	.word	0x58024400
 80039c8:	58020c00 	.word	0x58020c00

080039cc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80039cc:	b580      	push	{r7, lr}
 80039ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */
  /* USER CODE END NonMaskableInt_IRQn 0 */
  HAL_RCC_NMI_IRQHandler();
 80039d0:	f007 fac4 	bl	800af5c <HAL_RCC_NMI_IRQHandler>
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1) {
		Error_Handler();
 80039d4:	f7ff fd32 	bl	800343c <Error_Handler>
 80039d8:	e7fc      	b.n	80039d4 <NMI_Handler+0x8>

080039da <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80039da:	b580      	push	{r7, lr}
 80039dc:	af00      	add	r7, sp, #0

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_HardFault_IRQn 0 */
	  Error_Handler();
 80039de:	f7ff fd2d 	bl	800343c <Error_Handler>
 80039e2:	e7fc      	b.n	80039de <HardFault_Handler+0x4>

080039e4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80039e4:	b580      	push	{r7, lr}
 80039e6:	af00      	add	r7, sp, #0

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_MemoryManagement_IRQn 0 */
	  Error_Handler();
 80039e8:	f7ff fd28 	bl	800343c <Error_Handler>
 80039ec:	e7fc      	b.n	80039e8 <MemManage_Handler+0x4>

080039ee <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80039ee:	b580      	push	{r7, lr}
 80039f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */
  /* USER CODE END BusFault_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_BusFault_IRQn 0 */
	  Error_Handler();
 80039f2:	f7ff fd23 	bl	800343c <Error_Handler>
 80039f6:	e7fc      	b.n	80039f2 <BusFault_Handler+0x4>

080039f8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80039f8:	b580      	push	{r7, lr}
 80039fa:	af00      	add	r7, sp, #0

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_UsageFault_IRQn 0 */
	  Error_Handler();
 80039fc:	f7ff fd1e 	bl	800343c <Error_Handler>
 8003a00:	e7fc      	b.n	80039fc <UsageFault_Handler+0x4>

08003a02 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003a02:	b480      	push	{r7}
 8003a04:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003a06:	bf00      	nop
 8003a08:	46bd      	mov	sp, r7
 8003a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a0e:	4770      	bx	lr

08003a10 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003a10:	b480      	push	{r7}
 8003a12:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003a14:	bf00      	nop
 8003a16:	46bd      	mov	sp, r7
 8003a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a1c:	4770      	bx	lr

08003a1e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003a1e:	b480      	push	{r7}
 8003a20:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003a22:	bf00      	nop
 8003a24:	46bd      	mov	sp, r7
 8003a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a2a:	4770      	bx	lr

08003a2c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003a2c:	b580      	push	{r7, lr}
 8003a2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003a30:	f000 fc2e 	bl	8004290 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003a34:	bf00      	nop
 8003a36:	bd80      	pop	{r7, pc}

08003a38 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8003a38:	b580      	push	{r7, lr}
 8003a3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 8003a3c:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8003a40:	f004 fb25 	bl	800808e <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BLUE_BUTTON_Pin);
 8003a44:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8003a48:	f004 fb21 	bl	800808e <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8003a4c:	bf00      	nop
 8003a4e:	bd80      	pop	{r7, pc}

08003a50 <LPTIM1_IRQHandler>:

/**
  * @brief This function handles LPTIM1 global interrupt.
  */
void LPTIM1_IRQHandler(void)
{
 8003a50:	b580      	push	{r7, lr}
 8003a52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPTIM1_IRQn 0 */
  /* USER CODE END LPTIM1_IRQn 0 */
  HAL_LPTIM_IRQHandler(&hlptim1);
 8003a54:	4802      	ldr	r0, [pc, #8]	; (8003a60 <LPTIM1_IRQHandler+0x10>)
 8003a56:	f005 ff5a 	bl	800990e <HAL_LPTIM_IRQHandler>
  /* USER CODE BEGIN LPTIM1_IRQn 1 */
  /* USER CODE END LPTIM1_IRQn 1 */
}
 8003a5a:	bf00      	nop
 8003a5c:	bd80      	pop	{r7, pc}
 8003a5e:	bf00      	nop
 8003a60:	200004bc 	.word	0x200004bc

08003a64 <HRTIM1_TIMA_IRQHandler>:

/**
  * @brief This function handles HRTIM timer A global interrupt.
  */
void HRTIM1_TIMA_IRQHandler(void)
{
 8003a64:	b580      	push	{r7, lr}
 8003a66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HRTIM1_TIMA_IRQn 0 */

  /* USER CODE END HRTIM1_TIMA_IRQn 0 */
  HAL_HRTIM_IRQHandler(&hhrtim,HRTIM_TIMERINDEX_TIMER_A);
 8003a68:	2100      	movs	r1, #0
 8003a6a:	4802      	ldr	r0, [pc, #8]	; (8003a74 <HRTIM1_TIMA_IRQHandler+0x10>)
 8003a6c:	f004 ff86 	bl	800897c <HAL_HRTIM_IRQHandler>
  /* USER CODE BEGIN HRTIM1_TIMA_IRQn 1 */

  /* USER CODE END HRTIM1_TIMA_IRQn 1 */
}
 8003a70:	bf00      	nop
 8003a72:	bd80      	pop	{r7, pc}
 8003a74:	200003e0 	.word	0x200003e0

08003a78 <HRTIM1_TIME_IRQHandler>:

/**
  * @brief This function handles HRTIM timer E global interrupt.
  */
void HRTIM1_TIME_IRQHandler(void)
{
 8003a78:	b580      	push	{r7, lr}
 8003a7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HRTIM1_TIME_IRQn 0 */

  /* USER CODE END HRTIM1_TIME_IRQn 0 */
  HAL_HRTIM_IRQHandler(&hhrtim,HRTIM_TIMERINDEX_TIMER_E);
 8003a7c:	2104      	movs	r1, #4
 8003a7e:	4802      	ldr	r0, [pc, #8]	; (8003a88 <HRTIM1_TIME_IRQHandler+0x10>)
 8003a80:	f004 ff7c 	bl	800897c <HAL_HRTIM_IRQHandler>
  /* USER CODE BEGIN HRTIM1_TIME_IRQn 1 */

  /* USER CODE END HRTIM1_TIME_IRQn 1 */
}
 8003a84:	bf00      	nop
 8003a86:	bd80      	pop	{r7, pc}
 8003a88:	200003e0 	.word	0x200003e0

08003a8c <ADC3_IRQHandler>:

/**
  * @brief This function handles ADC3 global interrupt.
  */
void ADC3_IRQHandler(void)
{
 8003a8c:	b580      	push	{r7, lr}
 8003a8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC3_IRQn 0 */

  /* USER CODE END ADC3_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc3);
 8003a90:	4802      	ldr	r0, [pc, #8]	; (8003a9c <ADC3_IRQHandler+0x10>)
 8003a92:	f001 f981 	bl	8004d98 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC3_IRQn 1 */

  /* USER CODE END ADC3_IRQn 1 */
}
 8003a96:	bf00      	nop
 8003a98:	bd80      	pop	{r7, pc}
 8003a9a:	bf00      	nop
 8003a9c:	20000368 	.word	0x20000368

08003aa0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003aa0:	b480      	push	{r7}
 8003aa2:	af00      	add	r7, sp, #0
	return 1;
 8003aa4:	2301      	movs	r3, #1
}
 8003aa6:	4618      	mov	r0, r3
 8003aa8:	46bd      	mov	sp, r7
 8003aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aae:	4770      	bx	lr

08003ab0 <_kill>:

int _kill(int pid, int sig)
{
 8003ab0:	b480      	push	{r7}
 8003ab2:	b083      	sub	sp, #12
 8003ab4:	af00      	add	r7, sp, #0
 8003ab6:	6078      	str	r0, [r7, #4]
 8003ab8:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8003aba:	4b05      	ldr	r3, [pc, #20]	; (8003ad0 <_kill+0x20>)
 8003abc:	2216      	movs	r2, #22
 8003abe:	601a      	str	r2, [r3, #0]
	return -1;
 8003ac0:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003ac4:	4618      	mov	r0, r3
 8003ac6:	370c      	adds	r7, #12
 8003ac8:	46bd      	mov	sp, r7
 8003aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ace:	4770      	bx	lr
 8003ad0:	20007454 	.word	0x20007454

08003ad4 <_exit>:

void _exit (int status)
{
 8003ad4:	b580      	push	{r7, lr}
 8003ad6:	b082      	sub	sp, #8
 8003ad8:	af00      	add	r7, sp, #0
 8003ada:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8003adc:	f04f 31ff 	mov.w	r1, #4294967295
 8003ae0:	6878      	ldr	r0, [r7, #4]
 8003ae2:	f7ff ffe5 	bl	8003ab0 <_kill>
	while (1) {}		/* Make sure we hang here */
 8003ae6:	e7fe      	b.n	8003ae6 <_exit+0x12>

08003ae8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003ae8:	b580      	push	{r7, lr}
 8003aea:	b086      	sub	sp, #24
 8003aec:	af00      	add	r7, sp, #0
 8003aee:	60f8      	str	r0, [r7, #12]
 8003af0:	60b9      	str	r1, [r7, #8]
 8003af2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003af4:	2300      	movs	r3, #0
 8003af6:	617b      	str	r3, [r7, #20]
 8003af8:	e00a      	b.n	8003b10 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8003afa:	f3af 8000 	nop.w
 8003afe:	4601      	mov	r1, r0
 8003b00:	68bb      	ldr	r3, [r7, #8]
 8003b02:	1c5a      	adds	r2, r3, #1
 8003b04:	60ba      	str	r2, [r7, #8]
 8003b06:	b2ca      	uxtb	r2, r1
 8003b08:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003b0a:	697b      	ldr	r3, [r7, #20]
 8003b0c:	3301      	adds	r3, #1
 8003b0e:	617b      	str	r3, [r7, #20]
 8003b10:	697a      	ldr	r2, [r7, #20]
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	429a      	cmp	r2, r3
 8003b16:	dbf0      	blt.n	8003afa <_read+0x12>
	}

return len;
 8003b18:	687b      	ldr	r3, [r7, #4]
}
 8003b1a:	4618      	mov	r0, r3
 8003b1c:	3718      	adds	r7, #24
 8003b1e:	46bd      	mov	sp, r7
 8003b20:	bd80      	pop	{r7, pc}

08003b22 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003b22:	b580      	push	{r7, lr}
 8003b24:	b086      	sub	sp, #24
 8003b26:	af00      	add	r7, sp, #0
 8003b28:	60f8      	str	r0, [r7, #12]
 8003b2a:	60b9      	str	r1, [r7, #8]
 8003b2c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003b2e:	2300      	movs	r3, #0
 8003b30:	617b      	str	r3, [r7, #20]
 8003b32:	e009      	b.n	8003b48 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8003b34:	68bb      	ldr	r3, [r7, #8]
 8003b36:	1c5a      	adds	r2, r3, #1
 8003b38:	60ba      	str	r2, [r7, #8]
 8003b3a:	781b      	ldrb	r3, [r3, #0]
 8003b3c:	4618      	mov	r0, r3
 8003b3e:	f7fe fbe5 	bl	800230c <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003b42:	697b      	ldr	r3, [r7, #20]
 8003b44:	3301      	adds	r3, #1
 8003b46:	617b      	str	r3, [r7, #20]
 8003b48:	697a      	ldr	r2, [r7, #20]
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	429a      	cmp	r2, r3
 8003b4e:	dbf1      	blt.n	8003b34 <_write+0x12>
	}
	return len;
 8003b50:	687b      	ldr	r3, [r7, #4]
}
 8003b52:	4618      	mov	r0, r3
 8003b54:	3718      	adds	r7, #24
 8003b56:	46bd      	mov	sp, r7
 8003b58:	bd80      	pop	{r7, pc}

08003b5a <_close>:

int _close(int file)
{
 8003b5a:	b480      	push	{r7}
 8003b5c:	b083      	sub	sp, #12
 8003b5e:	af00      	add	r7, sp, #0
 8003b60:	6078      	str	r0, [r7, #4]
	return -1;
 8003b62:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003b66:	4618      	mov	r0, r3
 8003b68:	370c      	adds	r7, #12
 8003b6a:	46bd      	mov	sp, r7
 8003b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b70:	4770      	bx	lr

08003b72 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003b72:	b480      	push	{r7}
 8003b74:	b083      	sub	sp, #12
 8003b76:	af00      	add	r7, sp, #0
 8003b78:	6078      	str	r0, [r7, #4]
 8003b7a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8003b7c:	683b      	ldr	r3, [r7, #0]
 8003b7e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003b82:	605a      	str	r2, [r3, #4]
	return 0;
 8003b84:	2300      	movs	r3, #0
}
 8003b86:	4618      	mov	r0, r3
 8003b88:	370c      	adds	r7, #12
 8003b8a:	46bd      	mov	sp, r7
 8003b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b90:	4770      	bx	lr

08003b92 <_isatty>:

int _isatty(int file)
{
 8003b92:	b480      	push	{r7}
 8003b94:	b083      	sub	sp, #12
 8003b96:	af00      	add	r7, sp, #0
 8003b98:	6078      	str	r0, [r7, #4]
	return 1;
 8003b9a:	2301      	movs	r3, #1
}
 8003b9c:	4618      	mov	r0, r3
 8003b9e:	370c      	adds	r7, #12
 8003ba0:	46bd      	mov	sp, r7
 8003ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ba6:	4770      	bx	lr

08003ba8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003ba8:	b480      	push	{r7}
 8003baa:	b085      	sub	sp, #20
 8003bac:	af00      	add	r7, sp, #0
 8003bae:	60f8      	str	r0, [r7, #12]
 8003bb0:	60b9      	str	r1, [r7, #8]
 8003bb2:	607a      	str	r2, [r7, #4]
	return 0;
 8003bb4:	2300      	movs	r3, #0
}
 8003bb6:	4618      	mov	r0, r3
 8003bb8:	3714      	adds	r7, #20
 8003bba:	46bd      	mov	sp, r7
 8003bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc0:	4770      	bx	lr
	...

08003bc4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003bc4:	b480      	push	{r7}
 8003bc6:	b087      	sub	sp, #28
 8003bc8:	af00      	add	r7, sp, #0
 8003bca:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003bcc:	4a14      	ldr	r2, [pc, #80]	; (8003c20 <_sbrk+0x5c>)
 8003bce:	4b15      	ldr	r3, [pc, #84]	; (8003c24 <_sbrk+0x60>)
 8003bd0:	1ad3      	subs	r3, r2, r3
 8003bd2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003bd4:	697b      	ldr	r3, [r7, #20]
 8003bd6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003bd8:	4b13      	ldr	r3, [pc, #76]	; (8003c28 <_sbrk+0x64>)
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d102      	bne.n	8003be6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003be0:	4b11      	ldr	r3, [pc, #68]	; (8003c28 <_sbrk+0x64>)
 8003be2:	4a12      	ldr	r2, [pc, #72]	; (8003c2c <_sbrk+0x68>)
 8003be4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003be6:	4b10      	ldr	r3, [pc, #64]	; (8003c28 <_sbrk+0x64>)
 8003be8:	681a      	ldr	r2, [r3, #0]
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	4413      	add	r3, r2
 8003bee:	693a      	ldr	r2, [r7, #16]
 8003bf0:	429a      	cmp	r2, r3
 8003bf2:	d205      	bcs.n	8003c00 <_sbrk+0x3c>
  {
    errno = ENOMEM;
 8003bf4:	4b0e      	ldr	r3, [pc, #56]	; (8003c30 <_sbrk+0x6c>)
 8003bf6:	220c      	movs	r2, #12
 8003bf8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003bfa:	f04f 33ff 	mov.w	r3, #4294967295
 8003bfe:	e009      	b.n	8003c14 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 8003c00:	4b09      	ldr	r3, [pc, #36]	; (8003c28 <_sbrk+0x64>)
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003c06:	4b08      	ldr	r3, [pc, #32]	; (8003c28 <_sbrk+0x64>)
 8003c08:	681a      	ldr	r2, [r3, #0]
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	4413      	add	r3, r2
 8003c0e:	4a06      	ldr	r2, [pc, #24]	; (8003c28 <_sbrk+0x64>)
 8003c10:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003c12:	68fb      	ldr	r3, [r7, #12]
}
 8003c14:	4618      	mov	r0, r3
 8003c16:	371c      	adds	r7, #28
 8003c18:	46bd      	mov	sp, r7
 8003c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c1e:	4770      	bx	lr
 8003c20:	20020000 	.word	0x20020000
 8003c24:	00000400 	.word	0x00000400
 8003c28:	20000760 	.word	0x20000760
 8003c2c:	20007468 	.word	0x20007468
 8003c30:	20007454 	.word	0x20007454

08003c34 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8003c34:	b480      	push	{r7}
 8003c36:	b083      	sub	sp, #12
 8003c38:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8003c3a:	4b3f      	ldr	r3, [pc, #252]	; (8003d38 <SystemInit+0x104>)
 8003c3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c40:	4a3d      	ldr	r2, [pc, #244]	; (8003d38 <SystemInit+0x104>)
 8003c42:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003c46:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8003c4a:	4b3c      	ldr	r3, [pc, #240]	; (8003d3c <SystemInit+0x108>)
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	f003 030f 	and.w	r3, r3, #15
 8003c52:	2b06      	cmp	r3, #6
 8003c54:	d807      	bhi.n	8003c66 <SystemInit+0x32>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */

	  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8003c56:	4b39      	ldr	r3, [pc, #228]	; (8003d3c <SystemInit+0x108>)
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	f023 030f 	bic.w	r3, r3, #15
 8003c5e:	4a37      	ldr	r2, [pc, #220]	; (8003d3c <SystemInit+0x108>)
 8003c60:	f043 0307 	orr.w	r3, r3, #7
 8003c64:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8003c66:	4b36      	ldr	r3, [pc, #216]	; (8003d40 <SystemInit+0x10c>)
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	4a35      	ldr	r2, [pc, #212]	; (8003d40 <SystemInit+0x10c>)
 8003c6c:	f043 0301 	orr.w	r3, r3, #1
 8003c70:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8003c72:	4b33      	ldr	r3, [pc, #204]	; (8003d40 <SystemInit+0x10c>)
 8003c74:	2200      	movs	r2, #0
 8003c76:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8003c78:	4b31      	ldr	r3, [pc, #196]	; (8003d40 <SystemInit+0x10c>)
 8003c7a:	681a      	ldr	r2, [r3, #0]
 8003c7c:	4930      	ldr	r1, [pc, #192]	; (8003d40 <SystemInit+0x10c>)
 8003c7e:	4b31      	ldr	r3, [pc, #196]	; (8003d44 <SystemInit+0x110>)
 8003c80:	4013      	ands	r3, r2
 8003c82:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8003c84:	4b2d      	ldr	r3, [pc, #180]	; (8003d3c <SystemInit+0x108>)
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	f003 0308 	and.w	r3, r3, #8
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d007      	beq.n	8003ca0 <SystemInit+0x6c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8003c90:	4b2a      	ldr	r3, [pc, #168]	; (8003d3c <SystemInit+0x108>)
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	f023 030f 	bic.w	r3, r3, #15
 8003c98:	4a28      	ldr	r2, [pc, #160]	; (8003d3c <SystemInit+0x108>)
 8003c9a:	f043 0307 	orr.w	r3, r3, #7
 8003c9e:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8003ca0:	4b27      	ldr	r3, [pc, #156]	; (8003d40 <SystemInit+0x10c>)
 8003ca2:	2200      	movs	r2, #0
 8003ca4:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8003ca6:	4b26      	ldr	r3, [pc, #152]	; (8003d40 <SystemInit+0x10c>)
 8003ca8:	2200      	movs	r2, #0
 8003caa:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8003cac:	4b24      	ldr	r3, [pc, #144]	; (8003d40 <SystemInit+0x10c>)
 8003cae:	2200      	movs	r2, #0
 8003cb0:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8003cb2:	4b23      	ldr	r3, [pc, #140]	; (8003d40 <SystemInit+0x10c>)
 8003cb4:	4a24      	ldr	r2, [pc, #144]	; (8003d48 <SystemInit+0x114>)
 8003cb6:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8003cb8:	4b21      	ldr	r3, [pc, #132]	; (8003d40 <SystemInit+0x10c>)
 8003cba:	4a24      	ldr	r2, [pc, #144]	; (8003d4c <SystemInit+0x118>)
 8003cbc:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8003cbe:	4b20      	ldr	r3, [pc, #128]	; (8003d40 <SystemInit+0x10c>)
 8003cc0:	4a23      	ldr	r2, [pc, #140]	; (8003d50 <SystemInit+0x11c>)
 8003cc2:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8003cc4:	4b1e      	ldr	r3, [pc, #120]	; (8003d40 <SystemInit+0x10c>)
 8003cc6:	2200      	movs	r2, #0
 8003cc8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8003cca:	4b1d      	ldr	r3, [pc, #116]	; (8003d40 <SystemInit+0x10c>)
 8003ccc:	4a20      	ldr	r2, [pc, #128]	; (8003d50 <SystemInit+0x11c>)
 8003cce:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8003cd0:	4b1b      	ldr	r3, [pc, #108]	; (8003d40 <SystemInit+0x10c>)
 8003cd2:	2200      	movs	r2, #0
 8003cd4:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8003cd6:	4b1a      	ldr	r3, [pc, #104]	; (8003d40 <SystemInit+0x10c>)
 8003cd8:	4a1d      	ldr	r2, [pc, #116]	; (8003d50 <SystemInit+0x11c>)
 8003cda:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8003cdc:	4b18      	ldr	r3, [pc, #96]	; (8003d40 <SystemInit+0x10c>)
 8003cde:	2200      	movs	r2, #0
 8003ce0:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8003ce2:	4b17      	ldr	r3, [pc, #92]	; (8003d40 <SystemInit+0x10c>)
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	4a16      	ldr	r2, [pc, #88]	; (8003d40 <SystemInit+0x10c>)
 8003ce8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003cec:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8003cee:	4b14      	ldr	r3, [pc, #80]	; (8003d40 <SystemInit+0x10c>)
 8003cf0:	2200      	movs	r2, #0
 8003cf2:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8003cf4:	4b17      	ldr	r3, [pc, #92]	; (8003d54 <SystemInit+0x120>)
 8003cf6:	681a      	ldr	r2, [r3, #0]
 8003cf8:	4b17      	ldr	r3, [pc, #92]	; (8003d58 <SystemInit+0x124>)
 8003cfa:	4013      	ands	r3, r2
 8003cfc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003d00:	d202      	bcs.n	8003d08 <SystemInit+0xd4>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8003d02:	4b16      	ldr	r3, [pc, #88]	; (8003d5c <SystemInit+0x128>)
 8003d04:	2201      	movs	r2, #1
 8003d06:	601a      	str	r2, [r3, #0]
#endif /* STM32H7_DEV_ID */

#if defined(DATA_IN_D2_SRAM)
  /* in case of initialized data in D2 SRAM (AHB SRAM), enable the D2 SRAM clock (AHB SRAM clock) */
#if defined(RCC_AHB2ENR_D2SRAM3EN)
  RCC->AHB2ENR |= (RCC_AHB2ENR_D2SRAM1EN | RCC_AHB2ENR_D2SRAM2EN | RCC_AHB2ENR_D2SRAM3EN);
 8003d08:	4b0d      	ldr	r3, [pc, #52]	; (8003d40 <SystemInit+0x10c>)
 8003d0a:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8003d0e:	4a0c      	ldr	r2, [pc, #48]	; (8003d40 <SystemInit+0x10c>)
 8003d10:	f043 4360 	orr.w	r3, r3, #3758096384	; 0xe0000000
 8003d14:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
  RCC->AHB2ENR |= (RCC_AHB2ENR_D2SRAM1EN | RCC_AHB2ENR_D2SRAM2EN);
#else
  RCC->AHB2ENR |= (RCC_AHB2ENR_AHBSRAM1EN | RCC_AHB2ENR_AHBSRAM2EN);
#endif /* RCC_AHB2ENR_D2SRAM3EN */

  tmpreg = RCC->AHB2ENR;
 8003d18:	4b09      	ldr	r3, [pc, #36]	; (8003d40 <SystemInit+0x10c>)
 8003d1a:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8003d1e:	607b      	str	r3, [r7, #4]
  (void) tmpreg;
 8003d20:	687b      	ldr	r3, [r7, #4]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8003d22:	4b0f      	ldr	r3, [pc, #60]	; (8003d60 <SystemInit+0x12c>)
 8003d24:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8003d28:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8003d2a:	bf00      	nop
 8003d2c:	370c      	adds	r7, #12
 8003d2e:	46bd      	mov	sp, r7
 8003d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d34:	4770      	bx	lr
 8003d36:	bf00      	nop
 8003d38:	e000ed00 	.word	0xe000ed00
 8003d3c:	52002000 	.word	0x52002000
 8003d40:	58024400 	.word	0x58024400
 8003d44:	eaf6ed7f 	.word	0xeaf6ed7f
 8003d48:	02020200 	.word	0x02020200
 8003d4c:	01ff0000 	.word	0x01ff0000
 8003d50:	01010280 	.word	0x01010280
 8003d54:	5c001000 	.word	0x5c001000
 8003d58:	ffff0000 	.word	0xffff0000
 8003d5c:	51008108 	.word	0x51008108
 8003d60:	52004000 	.word	0x52004000

08003d64 <HAL_LPTIM_AutoReloadMatchCallback>:
//		}
//
//	}
//}

void HAL_LPTIM_AutoReloadMatchCallback(LPTIM_HandleTypeDef *hlptim){
 8003d64:	b580      	push	{r7, lr}
 8003d66:	b082      	sub	sp, #8
 8003d68:	af00      	add	r7, sp, #0
 8003d6a:	6078      	str	r0, [r7, #4]
	HAL_GPIO_TogglePin(LD1_GPIO_Port, LD1_Pin); //toggle green LED
 8003d6c:	2101      	movs	r1, #1
 8003d6e:	4803      	ldr	r0, [pc, #12]	; (8003d7c <HAL_LPTIM_AutoReloadMatchCallback+0x18>)
 8003d70:	f004 f973 	bl	800805a <HAL_GPIO_TogglePin>
}
 8003d74:	bf00      	nop
 8003d76:	3708      	adds	r7, #8
 8003d78:	46bd      	mov	sp, r7
 8003d7a:	bd80      	pop	{r7, pc}
 8003d7c:	58020400 	.word	0x58020400

08003d80 <HAL_HRTIM_Compare2EventCallback>:

void HAL_HRTIM_Compare2EventCallback(HRTIM_HandleTypeDef *hhrtim, uint32_t TimerIdx) {
 8003d80:	b480      	push	{r7}
 8003d82:	b083      	sub	sp, #12
 8003d84:	af00      	add	r7, sp, #0
 8003d86:	6078      	str	r0, [r7, #4]
 8003d88:	6039      	str	r1, [r7, #0]
		const struct AttenuatorSettings a = {0,0,0,0,0,1,0}; // 8 dB
		set_aom_atten(a);
#endif //ATTENUATOR_CODE
	}

}
 8003d8a:	bf00      	nop
 8003d8c:	370c      	adds	r7, #12
 8003d8e:	46bd      	mov	sp, r7
 8003d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d94:	4770      	bx	lr
	...

08003d98 <HAL_HRTIM_Compare3EventCallback>:

void HAL_HRTIM_Compare3EventCallback(HRTIM_HandleTypeDef *hhrtim, uint32_t TimerIdx) {
 8003d98:	b580      	push	{r7, lr}
 8003d9a:	b088      	sub	sp, #32
 8003d9c:	af00      	add	r7, sp, #0
 8003d9e:	6078      	str	r0, [r7, #4]
 8003da0:	6039      	str	r1, [r7, #0]

	/* Called at the end of a POP cycle */
	if (TimerIdx == HRTIM_TIMERINDEX_TIMER_A) {
 8003da2:	683b      	ldr	r3, [r7, #0]
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d15d      	bne.n	8003e64 <HAL_HRTIM_Compare3EventCallback+0xcc>
		/* Reset the attenuator to 0 dB */
		const struct AttenuatorSettings a = { 0, 0, 0, 0, 0, 0, 0 }; // 0 dB
		set_aom_atten(a);
#endif //ATTENUATOR_CODE

		const double start_freq = ((long)(sweep_settings.req_start_freq/sweep_settings.step_size)) * sweep_settings.step_size;
 8003da8:	4b30      	ldr	r3, [pc, #192]	; (8003e6c <HAL_HRTIM_Compare3EventCallback+0xd4>)
 8003daa:	ed93 5b00 	vldr	d5, [r3]
 8003dae:	4b2f      	ldr	r3, [pc, #188]	; (8003e6c <HAL_HRTIM_Compare3EventCallback+0xd4>)
 8003db0:	ed93 6b04 	vldr	d6, [r3, #16]
 8003db4:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8003db8:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8003dbc:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8003dc0:	4b2a      	ldr	r3, [pc, #168]	; (8003e6c <HAL_HRTIM_Compare3EventCallback+0xd4>)
 8003dc2:	ed93 7b04 	vldr	d7, [r3, #16]
 8003dc6:	ee26 7b07 	vmul.f64	d7, d6, d7
 8003dca:	ed87 7b06 	vstr	d7, [r7, #24]
		const double stop_freq = ((long)((sweep_settings.req_stop_freq/sweep_settings.step_size) + 0.5)) * sweep_settings.step_size;
 8003dce:	4b27      	ldr	r3, [pc, #156]	; (8003e6c <HAL_HRTIM_Compare3EventCallback+0xd4>)
 8003dd0:	ed93 5b02 	vldr	d5, [r3, #8]
 8003dd4:	4b25      	ldr	r3, [pc, #148]	; (8003e6c <HAL_HRTIM_Compare3EventCallback+0xd4>)
 8003dd6:	ed93 6b04 	vldr	d6, [r3, #16]
 8003dda:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8003dde:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
 8003de2:	ee37 7b06 	vadd.f64	d7, d7, d6
 8003de6:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8003dea:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8003dee:	4b1f      	ldr	r3, [pc, #124]	; (8003e6c <HAL_HRTIM_Compare3EventCallback+0xd4>)
 8003df0:	ed93 7b04 	vldr	d7, [r3, #16]
 8003df4:	ee26 7b07 	vmul.f64	d7, d6, d7
 8003df8:	ed87 7b04 	vstr	d7, [r7, #16]
		const uint32_t num_points = ((stop_freq - start_freq)/sweep_settings.step_size) + 1;
 8003dfc:	ed97 6b04 	vldr	d6, [r7, #16]
 8003e00:	ed97 7b06 	vldr	d7, [r7, #24]
 8003e04:	ee36 5b47 	vsub.f64	d5, d6, d7
 8003e08:	4b18      	ldr	r3, [pc, #96]	; (8003e6c <HAL_HRTIM_Compare3EventCallback+0xd4>)
 8003e0a:	ed93 6b04 	vldr	d6, [r3, #16]
 8003e0e:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8003e12:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8003e16:	ee37 7b06 	vadd.f64	d7, d7, d6
 8003e1a:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8003e1e:	ee17 3a90 	vmov	r3, s15
 8003e22:	60fb      	str	r3, [r7, #12]
		static uint32_t i = 0;

		/* Configure the Microwave frequency */
		if (i == num_points) {
 8003e24:	4b12      	ldr	r3, [pc, #72]	; (8003e70 <HAL_HRTIM_Compare3EventCallback+0xd8>)
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	68fa      	ldr	r2, [r7, #12]
 8003e2a:	429a      	cmp	r2, r3
 8003e2c:	d106      	bne.n	8003e3c <HAL_HRTIM_Compare3EventCallback+0xa4>
			stop_pop();
 8003e2e:	f019 fbc7 	bl	801d5c0 <__stop_pop_veneer>
			i = 0;
 8003e32:	4b0f      	ldr	r3, [pc, #60]	; (8003e70 <HAL_HRTIM_Compare3EventCallback+0xd8>)
 8003e34:	2200      	movs	r2, #0
 8003e36:	601a      	str	r2, [r3, #0]
			start_pop();
 8003e38:	f019 fbda 	bl	801d5f0 <__start_pop_veneer>

#ifdef SYNTH_ENABLE
		set_frequency_hz(start_freq + (i * sweep_settings.step_size));
#endif

		i = i + 1;
 8003e3c:	4b0c      	ldr	r3, [pc, #48]	; (8003e70 <HAL_HRTIM_Compare3EventCallback+0xd8>)
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	3301      	adds	r3, #1
 8003e42:	4a0b      	ldr	r2, [pc, #44]	; (8003e70 <HAL_HRTIM_Compare3EventCallback+0xd8>)
 8003e44:	6013      	str	r3, [r2, #0]

		pop_cycle_count = pop_cycle_count + 1;
 8003e46:	4b0b      	ldr	r3, [pc, #44]	; (8003e74 <HAL_HRTIM_Compare3EventCallback+0xdc>)
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	3301      	adds	r3, #1
 8003e4c:	4a09      	ldr	r2, [pc, #36]	; (8003e74 <HAL_HRTIM_Compare3EventCallback+0xdc>)
 8003e4e:	6013      	str	r3, [r2, #0]
		HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin); //toggle amber LED
 8003e50:	2102      	movs	r1, #2
 8003e52:	4809      	ldr	r0, [pc, #36]	; (8003e78 <HAL_HRTIM_Compare3EventCallback+0xe0>)
 8003e54:	f004 f901 	bl	800805a <HAL_GPIO_TogglePin>
		printf("POP Cycle %lu done.\r\n", pop_cycle_count);
 8003e58:	4b06      	ldr	r3, [pc, #24]	; (8003e74 <HAL_HRTIM_Compare3EventCallback+0xdc>)
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	4619      	mov	r1, r3
 8003e5e:	4807      	ldr	r0, [pc, #28]	; (8003e7c <HAL_HRTIM_Compare3EventCallback+0xe4>)
 8003e60:	f017 fa2a 	bl	801b2b8 <iprintf>

	/* Called when the second microwave pulse goes high */
	if (TimerIdx == HRTIM_TIMERINDEX_TIMER_E) {
	}

}
 8003e64:	bf00      	nop
 8003e66:	3720      	adds	r7, #32
 8003e68:	46bd      	mov	sp, r7
 8003e6a:	bd80      	pop	{r7, pc}
 8003e6c:	08020cf0 	.word	0x08020cf0
 8003e70:	2000076c 	.word	0x2000076c
 8003e74:	20000764 	.word	0x20000764
 8003e78:	58021000 	.word	0x58021000
 8003e7c:	0801e2ec 	.word	0x0801e2ec

08003e80 <HAL_HRTIM_RepetitionEventCallback>:

void HAL_HRTIM_RepetitionEventCallback(HRTIM_HandleTypeDef *hhrtim,
		uint32_t TimerIdx) {
 8003e80:	b480      	push	{r7}
 8003e82:	b083      	sub	sp, #12
 8003e84:	af00      	add	r7, sp, #0
 8003e86:	6078      	str	r0, [r7, #4]
 8003e88:	6039      	str	r1, [r7, #0]

	/* Called at the start of the next POP cycle */
	if (TimerIdx == HRTIM_TIMERINDEX_TIMER_A) {
	}
}
 8003e8a:	bf00      	nop
 8003e8c:	370c      	adds	r7, #12
 8003e8e:	46bd      	mov	sp, r7
 8003e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e94:	4770      	bx	lr
	...

08003e98 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8003e98:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003ed0 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8003e9c:	f7ff feca 	bl	8003c34 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003ea0:	480c      	ldr	r0, [pc, #48]	; (8003ed4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8003ea2:	490d      	ldr	r1, [pc, #52]	; (8003ed8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8003ea4:	4a0d      	ldr	r2, [pc, #52]	; (8003edc <LoopFillZerobss+0x1a>)
  movs r3, #0
 8003ea6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003ea8:	e002      	b.n	8003eb0 <LoopCopyDataInit>

08003eaa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003eaa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003eac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003eae:	3304      	adds	r3, #4

08003eb0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003eb0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003eb2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003eb4:	d3f9      	bcc.n	8003eaa <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003eb6:	4a0a      	ldr	r2, [pc, #40]	; (8003ee0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8003eb8:	4c0a      	ldr	r4, [pc, #40]	; (8003ee4 <LoopFillZerobss+0x22>)
  movs r3, #0
 8003eba:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003ebc:	e001      	b.n	8003ec2 <LoopFillZerobss>

08003ebe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003ebe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003ec0:	3204      	adds	r2, #4

08003ec2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003ec2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003ec4:	d3fb      	bcc.n	8003ebe <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003ec6:	f017 fbeb 	bl	801b6a0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003eca:	f7fe fa31 	bl	8002330 <main>
  bx  lr
 8003ece:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8003ed0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003ed4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003ed8:	2000033c 	.word	0x2000033c
  ldr r2, =_sidata
 8003edc:	08021208 	.word	0x08021208
  ldr r2, =_sbss
 8003ee0:	20000340 	.word	0x20000340
  ldr r4, =_ebss
 8003ee4:	20007464 	.word	0x20007464

08003ee8 <ADC_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003ee8:	e7fe      	b.n	8003ee8 <ADC_IRQHandler>

08003eea <LAN8742_RegisterBusIO>:
  * @param  ioctx: holds device IO functions.  
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ERROR if missing mandatory function
  */
int32_t  LAN8742_RegisterBusIO(lan8742_Object_t *pObj, lan8742_IOCtx_t *ioctx)
{
 8003eea:	b480      	push	{r7}
 8003eec:	b083      	sub	sp, #12
 8003eee:	af00      	add	r7, sp, #0
 8003ef0:	6078      	str	r0, [r7, #4]
 8003ef2:	6039      	str	r1, [r7, #0]
  if(!pObj || !ioctx->ReadReg || !ioctx->WriteReg || !ioctx->GetTick)
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d00b      	beq.n	8003f12 <LAN8742_RegisterBusIO+0x28>
 8003efa:	683b      	ldr	r3, [r7, #0]
 8003efc:	68db      	ldr	r3, [r3, #12]
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d007      	beq.n	8003f12 <LAN8742_RegisterBusIO+0x28>
 8003f02:	683b      	ldr	r3, [r7, #0]
 8003f04:	689b      	ldr	r3, [r3, #8]
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d003      	beq.n	8003f12 <LAN8742_RegisterBusIO+0x28>
 8003f0a:	683b      	ldr	r3, [r7, #0]
 8003f0c:	691b      	ldr	r3, [r3, #16]
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d102      	bne.n	8003f18 <LAN8742_RegisterBusIO+0x2e>
  {
    return LAN8742_STATUS_ERROR;
 8003f12:	f04f 33ff 	mov.w	r3, #4294967295
 8003f16:	e014      	b.n	8003f42 <LAN8742_RegisterBusIO+0x58>
  }
  
  pObj->IO.Init = ioctx->Init;
 8003f18:	683b      	ldr	r3, [r7, #0]
 8003f1a:	681a      	ldr	r2, [r3, #0]
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	609a      	str	r2, [r3, #8]
  pObj->IO.DeInit = ioctx->DeInit;
 8003f20:	683b      	ldr	r3, [r7, #0]
 8003f22:	685a      	ldr	r2, [r3, #4]
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	60da      	str	r2, [r3, #12]
  pObj->IO.ReadReg = ioctx->ReadReg;
 8003f28:	683b      	ldr	r3, [r7, #0]
 8003f2a:	68da      	ldr	r2, [r3, #12]
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	615a      	str	r2, [r3, #20]
  pObj->IO.WriteReg = ioctx->WriteReg;
 8003f30:	683b      	ldr	r3, [r7, #0]
 8003f32:	689a      	ldr	r2, [r3, #8]
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	611a      	str	r2, [r3, #16]
  pObj->IO.GetTick = ioctx->GetTick;
 8003f38:	683b      	ldr	r3, [r7, #0]
 8003f3a:	691a      	ldr	r2, [r3, #16]
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	619a      	str	r2, [r3, #24]
  
  return LAN8742_STATUS_OK;
 8003f40:	2300      	movs	r3, #0
}
 8003f42:	4618      	mov	r0, r3
 8003f44:	370c      	adds	r7, #12
 8003f46:	46bd      	mov	sp, r7
 8003f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f4c:	4770      	bx	lr

08003f4e <LAN8742_Init>:
  *         LAN8742_STATUS_READ_ERROR if connot read register
  *         LAN8742_STATUS_WRITE_ERROR if connot write to register
  *         LAN8742_STATUS_RESET_TIMEOUT if cannot perform a software reset
  */
 int32_t LAN8742_Init(lan8742_Object_t *pObj)
 {
 8003f4e:	b580      	push	{r7, lr}
 8003f50:	b086      	sub	sp, #24
 8003f52:	af00      	add	r7, sp, #0
 8003f54:	6078      	str	r0, [r7, #4]
   uint32_t tickstart = 0, regvalue = 0, addr = 0;
 8003f56:	2300      	movs	r3, #0
 8003f58:	60fb      	str	r3, [r7, #12]
 8003f5a:	2300      	movs	r3, #0
 8003f5c:	60bb      	str	r3, [r7, #8]
 8003f5e:	2300      	movs	r3, #0
 8003f60:	617b      	str	r3, [r7, #20]
   int32_t status = LAN8742_STATUS_OK;
 8003f62:	2300      	movs	r3, #0
 8003f64:	613b      	str	r3, [r7, #16]
   
   if(pObj->Is_Initialized == 0)
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	685b      	ldr	r3, [r3, #4]
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d17c      	bne.n	8004068 <LAN8742_Init+0x11a>
   {
     if(pObj->IO.Init != 0)
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	689b      	ldr	r3, [r3, #8]
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d002      	beq.n	8003f7c <LAN8742_Init+0x2e>
     {
       /* GPIO and Clocks initialization */
       pObj->IO.Init();
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	689b      	ldr	r3, [r3, #8]
 8003f7a:	4798      	blx	r3
     }
   
     /* for later check */
     pObj->DevAddr = LAN8742_MAX_DEV_ADDR + 1;
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	2220      	movs	r2, #32
 8003f80:	601a      	str	r2, [r3, #0]
   
     /* Get the device address from special mode register */  
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8003f82:	2300      	movs	r3, #0
 8003f84:	617b      	str	r3, [r7, #20]
 8003f86:	e01c      	b.n	8003fc2 <LAN8742_Init+0x74>
     {
       if(pObj->IO.ReadReg(addr, LAN8742_SMR, &regvalue) < 0)
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	695b      	ldr	r3, [r3, #20]
 8003f8c:	f107 0208 	add.w	r2, r7, #8
 8003f90:	2112      	movs	r1, #18
 8003f92:	6978      	ldr	r0, [r7, #20]
 8003f94:	4798      	blx	r3
 8003f96:	4603      	mov	r3, r0
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	da03      	bge.n	8003fa4 <LAN8742_Init+0x56>
       { 
         status = LAN8742_STATUS_READ_ERROR;
 8003f9c:	f06f 0304 	mvn.w	r3, #4
 8003fa0:	613b      	str	r3, [r7, #16]
         /* Can't read from this device address 
            continue with next address */
         continue;
 8003fa2:	e00b      	b.n	8003fbc <LAN8742_Init+0x6e>
       }
     
       if((regvalue & LAN8742_SMR_PHY_ADDR) == addr)
 8003fa4:	68bb      	ldr	r3, [r7, #8]
 8003fa6:	f003 031f 	and.w	r3, r3, #31
 8003faa:	697a      	ldr	r2, [r7, #20]
 8003fac:	429a      	cmp	r2, r3
 8003fae:	d105      	bne.n	8003fbc <LAN8742_Init+0x6e>
       {
         pObj->DevAddr = addr;
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	697a      	ldr	r2, [r7, #20]
 8003fb4:	601a      	str	r2, [r3, #0]
         status = LAN8742_STATUS_OK;
 8003fb6:	2300      	movs	r3, #0
 8003fb8:	613b      	str	r3, [r7, #16]
         break;
 8003fba:	e005      	b.n	8003fc8 <LAN8742_Init+0x7a>
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8003fbc:	697b      	ldr	r3, [r7, #20]
 8003fbe:	3301      	adds	r3, #1
 8003fc0:	617b      	str	r3, [r7, #20]
 8003fc2:	697b      	ldr	r3, [r7, #20]
 8003fc4:	2b1f      	cmp	r3, #31
 8003fc6:	d9df      	bls.n	8003f88 <LAN8742_Init+0x3a>
       }
     }
   
     if(pObj->DevAddr > LAN8742_MAX_DEV_ADDR)
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	2b1f      	cmp	r3, #31
 8003fce:	d902      	bls.n	8003fd6 <LAN8742_Init+0x88>
     {
       status = LAN8742_STATUS_ADDRESS_ERROR;
 8003fd0:	f06f 0302 	mvn.w	r3, #2
 8003fd4:	613b      	str	r3, [r7, #16]
     }
     
     /* if device address is matched */
     if(status == LAN8742_STATUS_OK)
 8003fd6:	693b      	ldr	r3, [r7, #16]
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d145      	bne.n	8004068 <LAN8742_Init+0x11a>
     {
       /* set a software reset  */
       if(pObj->IO.WriteReg(pObj->DevAddr, LAN8742_BCR, LAN8742_BCR_SOFT_RESET) >= 0)
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	691b      	ldr	r3, [r3, #16]
 8003fe0:	687a      	ldr	r2, [r7, #4]
 8003fe2:	6810      	ldr	r0, [r2, #0]
 8003fe4:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8003fe8:	2100      	movs	r1, #0
 8003fea:	4798      	blx	r3
 8003fec:	4603      	mov	r3, r0
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	db37      	blt.n	8004062 <LAN8742_Init+0x114>
       { 
         /* get software reset status */
         if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) >= 0)
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	695b      	ldr	r3, [r3, #20]
 8003ff6:	687a      	ldr	r2, [r7, #4]
 8003ff8:	6810      	ldr	r0, [r2, #0]
 8003ffa:	f107 0208 	add.w	r2, r7, #8
 8003ffe:	2100      	movs	r1, #0
 8004000:	4798      	blx	r3
 8004002:	4603      	mov	r3, r0
 8004004:	2b00      	cmp	r3, #0
 8004006:	db28      	blt.n	800405a <LAN8742_Init+0x10c>
         { 
           tickstart = pObj->IO.GetTick();
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	699b      	ldr	r3, [r3, #24]
 800400c:	4798      	blx	r3
 800400e:	4603      	mov	r3, r0
 8004010:	60fb      	str	r3, [r7, #12]
           
           /* wait until software reset is done or timeout occured  */
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 8004012:	e01c      	b.n	800404e <LAN8742_Init+0x100>
           {
             if((pObj->IO.GetTick() - tickstart) <= LAN8742_SW_RESET_TO)
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	699b      	ldr	r3, [r3, #24]
 8004018:	4798      	blx	r3
 800401a:	4603      	mov	r3, r0
 800401c:	461a      	mov	r2, r3
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	1ad3      	subs	r3, r2, r3
 8004022:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8004026:	d80e      	bhi.n	8004046 <LAN8742_Init+0xf8>
             {
               if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) < 0)
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	695b      	ldr	r3, [r3, #20]
 800402c:	687a      	ldr	r2, [r7, #4]
 800402e:	6810      	ldr	r0, [r2, #0]
 8004030:	f107 0208 	add.w	r2, r7, #8
 8004034:	2100      	movs	r1, #0
 8004036:	4798      	blx	r3
 8004038:	4603      	mov	r3, r0
 800403a:	2b00      	cmp	r3, #0
 800403c:	da07      	bge.n	800404e <LAN8742_Init+0x100>
               { 
                 status = LAN8742_STATUS_READ_ERROR;
 800403e:	f06f 0304 	mvn.w	r3, #4
 8004042:	613b      	str	r3, [r7, #16]
                 break;
 8004044:	e010      	b.n	8004068 <LAN8742_Init+0x11a>
               }
             }
             else
             {
               status = LAN8742_STATUS_RESET_TIMEOUT;
 8004046:	f06f 0301 	mvn.w	r3, #1
 800404a:	613b      	str	r3, [r7, #16]
               break;
 800404c:	e00c      	b.n	8004068 <LAN8742_Init+0x11a>
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 800404e:	68bb      	ldr	r3, [r7, #8]
 8004050:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004054:	2b00      	cmp	r3, #0
 8004056:	d1dd      	bne.n	8004014 <LAN8742_Init+0xc6>
 8004058:	e006      	b.n	8004068 <LAN8742_Init+0x11a>
             }
           } 
         }
         else
         {
           status = LAN8742_STATUS_READ_ERROR;
 800405a:	f06f 0304 	mvn.w	r3, #4
 800405e:	613b      	str	r3, [r7, #16]
 8004060:	e002      	b.n	8004068 <LAN8742_Init+0x11a>
         }
       }
       else
       {
         status = LAN8742_STATUS_WRITE_ERROR;
 8004062:	f06f 0303 	mvn.w	r3, #3
 8004066:	613b      	str	r3, [r7, #16]
       }
     }
   }
      
   if(status == LAN8742_STATUS_OK)
 8004068:	693b      	ldr	r3, [r7, #16]
 800406a:	2b00      	cmp	r3, #0
 800406c:	d112      	bne.n	8004094 <LAN8742_Init+0x146>
   {
     tickstart =  pObj->IO.GetTick();
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	699b      	ldr	r3, [r3, #24]
 8004072:	4798      	blx	r3
 8004074:	4603      	mov	r3, r0
 8004076:	60fb      	str	r3, [r7, #12]
     
     /* Wait for 2s to perform initialization */
     while((pObj->IO.GetTick() - tickstart) <= LAN8742_INIT_TO)
 8004078:	bf00      	nop
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	699b      	ldr	r3, [r3, #24]
 800407e:	4798      	blx	r3
 8004080:	4603      	mov	r3, r0
 8004082:	461a      	mov	r2, r3
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	1ad3      	subs	r3, r2, r3
 8004088:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800408c:	d9f5      	bls.n	800407a <LAN8742_Init+0x12c>
     {
     }
     pObj->Is_Initialized = 1;
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	2201      	movs	r2, #1
 8004092:	605a      	str	r2, [r3, #4]
   }
   
   return status;
 8004094:	693b      	ldr	r3, [r7, #16]
 }
 8004096:	4618      	mov	r0, r3
 8004098:	3718      	adds	r7, #24
 800409a:	46bd      	mov	sp, r7
 800409c:	bd80      	pop	{r7, pc}

0800409e <LAN8742_GetLinkState>:
  *         LAN8742_STATUS_10MBITS_HALFDUPLEX  if 10Mb/s HD       
  *         LAN8742_STATUS_READ_ERROR if connot read register
  *         LAN8742_STATUS_WRITE_ERROR if connot write to register
  */
int32_t LAN8742_GetLinkState(lan8742_Object_t *pObj)
{
 800409e:	b580      	push	{r7, lr}
 80040a0:	b084      	sub	sp, #16
 80040a2:	af00      	add	r7, sp, #0
 80040a4:	6078      	str	r0, [r7, #4]
  uint32_t readval = 0;
 80040a6:	2300      	movs	r3, #0
 80040a8:	60fb      	str	r3, [r7, #12]
  
  /* Read Status register  */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	695b      	ldr	r3, [r3, #20]
 80040ae:	687a      	ldr	r2, [r7, #4]
 80040b0:	6810      	ldr	r0, [r2, #0]
 80040b2:	f107 020c 	add.w	r2, r7, #12
 80040b6:	2101      	movs	r1, #1
 80040b8:	4798      	blx	r3
 80040ba:	4603      	mov	r3, r0
 80040bc:	2b00      	cmp	r3, #0
 80040be:	da02      	bge.n	80040c6 <LAN8742_GetLinkState+0x28>
  {
    return LAN8742_STATUS_READ_ERROR;
 80040c0:	f06f 0304 	mvn.w	r3, #4
 80040c4:	e06e      	b.n	80041a4 <LAN8742_GetLinkState+0x106>
  }
  
  /* Read Status register again */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	695b      	ldr	r3, [r3, #20]
 80040ca:	687a      	ldr	r2, [r7, #4]
 80040cc:	6810      	ldr	r0, [r2, #0]
 80040ce:	f107 020c 	add.w	r2, r7, #12
 80040d2:	2101      	movs	r1, #1
 80040d4:	4798      	blx	r3
 80040d6:	4603      	mov	r3, r0
 80040d8:	2b00      	cmp	r3, #0
 80040da:	da02      	bge.n	80040e2 <LAN8742_GetLinkState+0x44>
  {
    return LAN8742_STATUS_READ_ERROR;
 80040dc:	f06f 0304 	mvn.w	r3, #4
 80040e0:	e060      	b.n	80041a4 <LAN8742_GetLinkState+0x106>
  }
  
  if((readval & LAN8742_BSR_LINK_STATUS) == 0)
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	f003 0304 	and.w	r3, r3, #4
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d101      	bne.n	80040f0 <LAN8742_GetLinkState+0x52>
  {
    /* Return Link Down status */
    return LAN8742_STATUS_LINK_DOWN;    
 80040ec:	2301      	movs	r3, #1
 80040ee:	e059      	b.n	80041a4 <LAN8742_GetLinkState+0x106>
  }
  
  /* Check Auto negotiaition */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &readval) < 0)
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	695b      	ldr	r3, [r3, #20]
 80040f4:	687a      	ldr	r2, [r7, #4]
 80040f6:	6810      	ldr	r0, [r2, #0]
 80040f8:	f107 020c 	add.w	r2, r7, #12
 80040fc:	2100      	movs	r1, #0
 80040fe:	4798      	blx	r3
 8004100:	4603      	mov	r3, r0
 8004102:	2b00      	cmp	r3, #0
 8004104:	da02      	bge.n	800410c <LAN8742_GetLinkState+0x6e>
  {
    return LAN8742_STATUS_READ_ERROR;
 8004106:	f06f 0304 	mvn.w	r3, #4
 800410a:	e04b      	b.n	80041a4 <LAN8742_GetLinkState+0x106>
  }
  
  if((readval & LAN8742_BCR_AUTONEGO_EN) != LAN8742_BCR_AUTONEGO_EN)
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004112:	2b00      	cmp	r3, #0
 8004114:	d11b      	bne.n	800414e <LAN8742_GetLinkState+0xb0>
  {
    if(((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT) && ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)) 
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800411c:	2b00      	cmp	r3, #0
 800411e:	d006      	beq.n	800412e <LAN8742_GetLinkState+0x90>
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004126:	2b00      	cmp	r3, #0
 8004128:	d001      	beq.n	800412e <LAN8742_GetLinkState+0x90>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 800412a:	2302      	movs	r3, #2
 800412c:	e03a      	b.n	80041a4 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT)
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004134:	2b00      	cmp	r3, #0
 8004136:	d001      	beq.n	800413c <LAN8742_GetLinkState+0x9e>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 8004138:	2303      	movs	r3, #3
 800413a:	e033      	b.n	80041a4 <LAN8742_GetLinkState+0x106>
    }        
    else if ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004142:	2b00      	cmp	r3, #0
 8004144:	d001      	beq.n	800414a <LAN8742_GetLinkState+0xac>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 8004146:	2304      	movs	r3, #4
 8004148:	e02c      	b.n	80041a4 <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 800414a:	2305      	movs	r3, #5
 800414c:	e02a      	b.n	80041a4 <LAN8742_GetLinkState+0x106>
    }  		
  }
  else /* Auto Nego enabled */
  {
    if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_PHYSCSR, &readval) < 0)
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	695b      	ldr	r3, [r3, #20]
 8004152:	687a      	ldr	r2, [r7, #4]
 8004154:	6810      	ldr	r0, [r2, #0]
 8004156:	f107 020c 	add.w	r2, r7, #12
 800415a:	211f      	movs	r1, #31
 800415c:	4798      	blx	r3
 800415e:	4603      	mov	r3, r0
 8004160:	2b00      	cmp	r3, #0
 8004162:	da02      	bge.n	800416a <LAN8742_GetLinkState+0xcc>
    {
      return LAN8742_STATUS_READ_ERROR;
 8004164:	f06f 0304 	mvn.w	r3, #4
 8004168:	e01c      	b.n	80041a4 <LAN8742_GetLinkState+0x106>
    }
    
    /* Check if auto nego not done */
    if((readval & LAN8742_PHYSCSR_AUTONEGO_DONE) == 0)
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004170:	2b00      	cmp	r3, #0
 8004172:	d101      	bne.n	8004178 <LAN8742_GetLinkState+0xda>
    {
      return LAN8742_STATUS_AUTONEGO_NOTDONE;
 8004174:	2306      	movs	r3, #6
 8004176:	e015      	b.n	80041a4 <LAN8742_GetLinkState+0x106>
    }
    
    if((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_FD)
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	f003 031c 	and.w	r3, r3, #28
 800417e:	2b18      	cmp	r3, #24
 8004180:	d101      	bne.n	8004186 <LAN8742_GetLinkState+0xe8>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 8004182:	2302      	movs	r3, #2
 8004184:	e00e      	b.n	80041a4 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_HD)
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	f003 031c 	and.w	r3, r3, #28
 800418c:	2b08      	cmp	r3, #8
 800418e:	d101      	bne.n	8004194 <LAN8742_GetLinkState+0xf6>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 8004190:	2303      	movs	r3, #3
 8004192:	e007      	b.n	80041a4 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_10BT_FD)
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	f003 031c 	and.w	r3, r3, #28
 800419a:	2b14      	cmp	r3, #20
 800419c:	d101      	bne.n	80041a2 <LAN8742_GetLinkState+0x104>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 800419e:	2304      	movs	r3, #4
 80041a0:	e000      	b.n	80041a4 <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 80041a2:	2305      	movs	r3, #5
    }				
  }
}
 80041a4:	4618      	mov	r0, r3
 80041a6:	3710      	adds	r7, #16
 80041a8:	46bd      	mov	sp, r7
 80041aa:	bd80      	pop	{r7, pc}

080041ac <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80041ac:	b580      	push	{r7, lr}
 80041ae:	b082      	sub	sp, #8
 80041b0:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80041b2:	2003      	movs	r0, #3
 80041b4:	f001 ff1c 	bl	8005ff0 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80041b8:	f006 fcfa 	bl	800abb0 <HAL_RCC_GetSysClockFreq>
 80041bc:	4602      	mov	r2, r0
 80041be:	4b15      	ldr	r3, [pc, #84]	; (8004214 <HAL_Init+0x68>)
 80041c0:	699b      	ldr	r3, [r3, #24]
 80041c2:	0a1b      	lsrs	r3, r3, #8
 80041c4:	f003 030f 	and.w	r3, r3, #15
 80041c8:	4913      	ldr	r1, [pc, #76]	; (8004218 <HAL_Init+0x6c>)
 80041ca:	5ccb      	ldrb	r3, [r1, r3]
 80041cc:	f003 031f 	and.w	r3, r3, #31
 80041d0:	fa22 f303 	lsr.w	r3, r2, r3
 80041d4:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80041d6:	4b0f      	ldr	r3, [pc, #60]	; (8004214 <HAL_Init+0x68>)
 80041d8:	699b      	ldr	r3, [r3, #24]
 80041da:	f003 030f 	and.w	r3, r3, #15
 80041de:	4a0e      	ldr	r2, [pc, #56]	; (8004218 <HAL_Init+0x6c>)
 80041e0:	5cd3      	ldrb	r3, [r2, r3]
 80041e2:	f003 031f 	and.w	r3, r3, #31
 80041e6:	687a      	ldr	r2, [r7, #4]
 80041e8:	fa22 f303 	lsr.w	r3, r2, r3
 80041ec:	4a0b      	ldr	r2, [pc, #44]	; (800421c <HAL_Init+0x70>)
 80041ee:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80041f0:	4a0b      	ldr	r2, [pc, #44]	; (8004220 <HAL_Init+0x74>)
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80041f6:	2000      	movs	r0, #0
 80041f8:	f000 f814 	bl	8004224 <HAL_InitTick>
 80041fc:	4603      	mov	r3, r0
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d001      	beq.n	8004206 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8004202:	2301      	movs	r3, #1
 8004204:	e002      	b.n	800420c <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8004206:	f7ff f949 	bl	800349c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800420a:	2300      	movs	r3, #0
}
 800420c:	4618      	mov	r0, r3
 800420e:	3708      	adds	r7, #8
 8004210:	46bd      	mov	sp, r7
 8004212:	bd80      	pop	{r7, pc}
 8004214:	58024400 	.word	0x58024400
 8004218:	08020d08 	.word	0x08020d08
 800421c:	20000120 	.word	0x20000120
 8004220:	2000011c 	.word	0x2000011c

08004224 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004224:	b580      	push	{r7, lr}
 8004226:	b082      	sub	sp, #8
 8004228:	af00      	add	r7, sp, #0
 800422a:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 800422c:	4b15      	ldr	r3, [pc, #84]	; (8004284 <HAL_InitTick+0x60>)
 800422e:	781b      	ldrb	r3, [r3, #0]
 8004230:	2b00      	cmp	r3, #0
 8004232:	d101      	bne.n	8004238 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8004234:	2301      	movs	r3, #1
 8004236:	e021      	b.n	800427c <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8004238:	4b13      	ldr	r3, [pc, #76]	; (8004288 <HAL_InitTick+0x64>)
 800423a:	681a      	ldr	r2, [r3, #0]
 800423c:	4b11      	ldr	r3, [pc, #68]	; (8004284 <HAL_InitTick+0x60>)
 800423e:	781b      	ldrb	r3, [r3, #0]
 8004240:	4619      	mov	r1, r3
 8004242:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004246:	fbb3 f3f1 	udiv	r3, r3, r1
 800424a:	fbb2 f3f3 	udiv	r3, r2, r3
 800424e:	4618      	mov	r0, r3
 8004250:	f001 ff01 	bl	8006056 <HAL_SYSTICK_Config>
 8004254:	4603      	mov	r3, r0
 8004256:	2b00      	cmp	r3, #0
 8004258:	d001      	beq.n	800425e <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 800425a:	2301      	movs	r3, #1
 800425c:	e00e      	b.n	800427c <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	2b0f      	cmp	r3, #15
 8004262:	d80a      	bhi.n	800427a <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004264:	2200      	movs	r2, #0
 8004266:	6879      	ldr	r1, [r7, #4]
 8004268:	f04f 30ff 	mov.w	r0, #4294967295
 800426c:	f001 fecb 	bl	8006006 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004270:	4a06      	ldr	r2, [pc, #24]	; (800428c <HAL_InitTick+0x68>)
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8004276:	2300      	movs	r3, #0
 8004278:	e000      	b.n	800427c <HAL_InitTick+0x58>
    return HAL_ERROR;
 800427a:	2301      	movs	r3, #1
}
 800427c:	4618      	mov	r0, r3
 800427e:	3708      	adds	r7, #8
 8004280:	46bd      	mov	sp, r7
 8004282:	bd80      	pop	{r7, pc}
 8004284:	20000138 	.word	0x20000138
 8004288:	2000011c 	.word	0x2000011c
 800428c:	20000134 	.word	0x20000134

08004290 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004290:	b480      	push	{r7}
 8004292:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8004294:	4b06      	ldr	r3, [pc, #24]	; (80042b0 <HAL_IncTick+0x20>)
 8004296:	781b      	ldrb	r3, [r3, #0]
 8004298:	461a      	mov	r2, r3
 800429a:	4b06      	ldr	r3, [pc, #24]	; (80042b4 <HAL_IncTick+0x24>)
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	4413      	add	r3, r2
 80042a0:	4a04      	ldr	r2, [pc, #16]	; (80042b4 <HAL_IncTick+0x24>)
 80042a2:	6013      	str	r3, [r2, #0]
}
 80042a4:	bf00      	nop
 80042a6:	46bd      	mov	sp, r7
 80042a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ac:	4770      	bx	lr
 80042ae:	bf00      	nop
 80042b0:	20000138 	.word	0x20000138
 80042b4:	20000770 	.word	0x20000770

080042b8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80042b8:	b480      	push	{r7}
 80042ba:	af00      	add	r7, sp, #0
  return uwTick;
 80042bc:	4b03      	ldr	r3, [pc, #12]	; (80042cc <HAL_GetTick+0x14>)
 80042be:	681b      	ldr	r3, [r3, #0]
}
 80042c0:	4618      	mov	r0, r3
 80042c2:	46bd      	mov	sp, r7
 80042c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c8:	4770      	bx	lr
 80042ca:	bf00      	nop
 80042cc:	20000770 	.word	0x20000770

080042d0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80042d0:	b580      	push	{r7, lr}
 80042d2:	b084      	sub	sp, #16
 80042d4:	af00      	add	r7, sp, #0
 80042d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80042d8:	f7ff ffee 	bl	80042b8 <HAL_GetTick>
 80042dc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80042e8:	d005      	beq.n	80042f6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80042ea:	4b0a      	ldr	r3, [pc, #40]	; (8004314 <HAL_Delay+0x44>)
 80042ec:	781b      	ldrb	r3, [r3, #0]
 80042ee:	461a      	mov	r2, r3
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	4413      	add	r3, r2
 80042f4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80042f6:	bf00      	nop
 80042f8:	f7ff ffde 	bl	80042b8 <HAL_GetTick>
 80042fc:	4602      	mov	r2, r0
 80042fe:	68bb      	ldr	r3, [r7, #8]
 8004300:	1ad3      	subs	r3, r2, r3
 8004302:	68fa      	ldr	r2, [r7, #12]
 8004304:	429a      	cmp	r2, r3
 8004306:	d8f7      	bhi.n	80042f8 <HAL_Delay+0x28>
  {
  }
}
 8004308:	bf00      	nop
 800430a:	bf00      	nop
 800430c:	3710      	adds	r7, #16
 800430e:	46bd      	mov	sp, r7
 8004310:	bd80      	pop	{r7, pc}
 8004312:	bf00      	nop
 8004314:	20000138 	.word	0x20000138

08004318 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8004318:	b480      	push	{r7}
 800431a:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 800431c:	4b03      	ldr	r3, [pc, #12]	; (800432c <HAL_GetREVID+0x14>)
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	0c1b      	lsrs	r3, r3, #16
}
 8004322:	4618      	mov	r0, r3
 8004324:	46bd      	mov	sp, r7
 8004326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800432a:	4770      	bx	lr
 800432c:	5c001000 	.word	0x5c001000

08004330 <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 8004330:	b480      	push	{r7}
 8004332:	b083      	sub	sp, #12
 8004334:	af00      	add	r7, sp, #0
 8004336:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 8004338:	4b06      	ldr	r3, [pc, #24]	; (8004354 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 800433a:	685b      	ldr	r3, [r3, #4]
 800433c:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8004340:	4904      	ldr	r1, [pc, #16]	; (8004354 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	4313      	orrs	r3, r2
 8004346:	604b      	str	r3, [r1, #4]
}
 8004348:	bf00      	nop
 800434a:	370c      	adds	r7, #12
 800434c:	46bd      	mov	sp, r7
 800434e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004352:	4770      	bx	lr
 8004354:	58000400 	.word	0x58000400

08004358 <HAL_SYSCFG_AnalogSwitchConfig>:
  *   @arg SYSCFG_SWITCH_PC3_CLOSE
  * @retval None
  */

void HAL_SYSCFG_AnalogSwitchConfig(uint32_t SYSCFG_AnalogSwitch , uint32_t SYSCFG_SwitchState )
{
 8004358:	b480      	push	{r7}
 800435a:	b083      	sub	sp, #12
 800435c:	af00      	add	r7, sp, #0
 800435e:	6078      	str	r0, [r7, #4]
 8004360:	6039      	str	r1, [r7, #0]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ANALOG_SWITCH(SYSCFG_AnalogSwitch));
  assert_param(IS_SYSCFG_SWITCH_STATE(SYSCFG_SwitchState));

  MODIFY_REG(SYSCFG->PMCR, (uint32_t) SYSCFG_AnalogSwitch, (uint32_t)(SYSCFG_SwitchState));
 8004362:	4b07      	ldr	r3, [pc, #28]	; (8004380 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 8004364:	685a      	ldr	r2, [r3, #4]
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	43db      	mvns	r3, r3
 800436a:	401a      	ands	r2, r3
 800436c:	4904      	ldr	r1, [pc, #16]	; (8004380 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 800436e:	683b      	ldr	r3, [r7, #0]
 8004370:	4313      	orrs	r3, r2
 8004372:	604b      	str	r3, [r1, #4]
}
 8004374:	bf00      	nop
 8004376:	370c      	adds	r7, #12
 8004378:	46bd      	mov	sp, r7
 800437a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800437e:	4770      	bx	lr
 8004380:	58000400 	.word	0x58000400

08004384 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8004384:	b480      	push	{r7}
 8004386:	b083      	sub	sp, #12
 8004388:	af00      	add	r7, sp, #0
 800438a:	6078      	str	r0, [r7, #4]
 800438c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	689b      	ldr	r3, [r3, #8]
 8004392:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8004396:	683b      	ldr	r3, [r7, #0]
 8004398:	431a      	orrs	r2, r3
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	609a      	str	r2, [r3, #8]
}
 800439e:	bf00      	nop
 80043a0:	370c      	adds	r7, #12
 80043a2:	46bd      	mov	sp, r7
 80043a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043a8:	4770      	bx	lr

080043aa <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80043aa:	b480      	push	{r7}
 80043ac:	b083      	sub	sp, #12
 80043ae:	af00      	add	r7, sp, #0
 80043b0:	6078      	str	r0, [r7, #4]
 80043b2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	689b      	ldr	r3, [r3, #8]
 80043b8:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80043bc:	683b      	ldr	r3, [r7, #0]
 80043be:	431a      	orrs	r2, r3
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	609a      	str	r2, [r3, #8]
}
 80043c4:	bf00      	nop
 80043c6:	370c      	adds	r7, #12
 80043c8:	46bd      	mov	sp, r7
 80043ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ce:	4770      	bx	lr

080043d0 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80043d0:	b480      	push	{r7}
 80043d2:	b083      	sub	sp, #12
 80043d4:	af00      	add	r7, sp, #0
 80043d6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	689b      	ldr	r3, [r3, #8]
 80043dc:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80043e0:	4618      	mov	r0, r3
 80043e2:	370c      	adds	r7, #12
 80043e4:	46bd      	mov	sp, r7
 80043e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ea:	4770      	bx	lr

080043ec <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80043ec:	b480      	push	{r7}
 80043ee:	b087      	sub	sp, #28
 80043f0:	af00      	add	r7, sp, #0
 80043f2:	60f8      	str	r0, [r7, #12]
 80043f4:	60b9      	str	r1, [r7, #8]
 80043f6:	607a      	str	r2, [r7, #4]
 80043f8:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	3360      	adds	r3, #96	; 0x60
 80043fe:	461a      	mov	r2, r3
 8004400:	68bb      	ldr	r3, [r7, #8]
 8004402:	009b      	lsls	r3, r3, #2
 8004404:	4413      	add	r3, r2
 8004406:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 8004408:	697b      	ldr	r3, [r7, #20]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 8004416:	683b      	ldr	r3, [r7, #0]
 8004418:	430b      	orrs	r3, r1
 800441a:	431a      	orrs	r2, r3
 800441c:	697b      	ldr	r3, [r7, #20]
 800441e:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8004420:	bf00      	nop
 8004422:	371c      	adds	r7, #28
 8004424:	46bd      	mov	sp, r7
 8004426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800442a:	4770      	bx	lr

0800442c <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 800442c:	b480      	push	{r7}
 800442e:	b085      	sub	sp, #20
 8004430:	af00      	add	r7, sp, #0
 8004432:	60f8      	str	r0, [r7, #12]
 8004434:	60b9      	str	r1, [r7, #8]
 8004436:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	691b      	ldr	r3, [r3, #16]
 800443c:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 8004440:	68bb      	ldr	r3, [r7, #8]
 8004442:	f003 031f 	and.w	r3, r3, #31
 8004446:	6879      	ldr	r1, [r7, #4]
 8004448:	fa01 f303 	lsl.w	r3, r1, r3
 800444c:	431a      	orrs	r2, r3
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	611a      	str	r2, [r3, #16]
}
 8004452:	bf00      	nop
 8004454:	3714      	adds	r7, #20
 8004456:	46bd      	mov	sp, r7
 8004458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800445c:	4770      	bx	lr

0800445e <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 800445e:	b480      	push	{r7}
 8004460:	b087      	sub	sp, #28
 8004462:	af00      	add	r7, sp, #0
 8004464:	60f8      	str	r0, [r7, #12]
 8004466:	60b9      	str	r1, [r7, #8]
 8004468:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	3360      	adds	r3, #96	; 0x60
 800446e:	461a      	mov	r2, r3
 8004470:	68bb      	ldr	r3, [r7, #8]
 8004472:	009b      	lsls	r3, r3, #2
 8004474:	4413      	add	r3, r2
 8004476:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8004478:	697b      	ldr	r3, [r7, #20]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	431a      	orrs	r2, r3
 8004484:	697b      	ldr	r3, [r7, #20]
 8004486:	601a      	str	r2, [r3, #0]
  }
}
 8004488:	bf00      	nop
 800448a:	371c      	adds	r7, #28
 800448c:	46bd      	mov	sp, r7
 800448e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004492:	4770      	bx	lr

08004494 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8004494:	b480      	push	{r7}
 8004496:	b083      	sub	sp, #12
 8004498:	af00      	add	r7, sp, #0
 800449a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	68db      	ldr	r3, [r3, #12]
 80044a0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d101      	bne.n	80044ac <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80044a8:	2301      	movs	r3, #1
 80044aa:	e000      	b.n	80044ae <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80044ac:	2300      	movs	r3, #0
}
 80044ae:	4618      	mov	r0, r3
 80044b0:	370c      	adds	r7, #12
 80044b2:	46bd      	mov	sp, r7
 80044b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044b8:	4770      	bx	lr

080044ba <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80044ba:	b480      	push	{r7}
 80044bc:	b087      	sub	sp, #28
 80044be:	af00      	add	r7, sp, #0
 80044c0:	60f8      	str	r0, [r7, #12]
 80044c2:	60b9      	str	r1, [r7, #8]
 80044c4:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	3330      	adds	r3, #48	; 0x30
 80044ca:	461a      	mov	r2, r3
 80044cc:	68bb      	ldr	r3, [r7, #8]
 80044ce:	0a1b      	lsrs	r3, r3, #8
 80044d0:	009b      	lsls	r3, r3, #2
 80044d2:	f003 030c 	and.w	r3, r3, #12
 80044d6:	4413      	add	r3, r2
 80044d8:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80044da:	697b      	ldr	r3, [r7, #20]
 80044dc:	681a      	ldr	r2, [r3, #0]
 80044de:	68bb      	ldr	r3, [r7, #8]
 80044e0:	f003 031f 	and.w	r3, r3, #31
 80044e4:	211f      	movs	r1, #31
 80044e6:	fa01 f303 	lsl.w	r3, r1, r3
 80044ea:	43db      	mvns	r3, r3
 80044ec:	401a      	ands	r2, r3
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	0e9b      	lsrs	r3, r3, #26
 80044f2:	f003 011f 	and.w	r1, r3, #31
 80044f6:	68bb      	ldr	r3, [r7, #8]
 80044f8:	f003 031f 	and.w	r3, r3, #31
 80044fc:	fa01 f303 	lsl.w	r3, r1, r3
 8004500:	431a      	orrs	r2, r3
 8004502:	697b      	ldr	r3, [r7, #20]
 8004504:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8004506:	bf00      	nop
 8004508:	371c      	adds	r7, #28
 800450a:	46bd      	mov	sp, r7
 800450c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004510:	4770      	bx	lr

08004512 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8004512:	b480      	push	{r7}
 8004514:	b083      	sub	sp, #12
 8004516:	af00      	add	r7, sp, #0
 8004518:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800451e:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 8004522:	2b00      	cmp	r3, #0
 8004524:	d101      	bne.n	800452a <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8004526:	2301      	movs	r3, #1
 8004528:	e000      	b.n	800452c <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 800452a:	2300      	movs	r3, #0
}
 800452c:	4618      	mov	r0, r3
 800452e:	370c      	adds	r7, #12
 8004530:	46bd      	mov	sp, r7
 8004532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004536:	4770      	bx	lr

08004538 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8004538:	b480      	push	{r7}
 800453a:	b087      	sub	sp, #28
 800453c:	af00      	add	r7, sp, #0
 800453e:	60f8      	str	r0, [r7, #12]
 8004540:	60b9      	str	r1, [r7, #8]
 8004542:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	3314      	adds	r3, #20
 8004548:	461a      	mov	r2, r3
 800454a:	68bb      	ldr	r3, [r7, #8]
 800454c:	0e5b      	lsrs	r3, r3, #25
 800454e:	009b      	lsls	r3, r3, #2
 8004550:	f003 0304 	and.w	r3, r3, #4
 8004554:	4413      	add	r3, r2
 8004556:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8004558:	697b      	ldr	r3, [r7, #20]
 800455a:	681a      	ldr	r2, [r3, #0]
 800455c:	68bb      	ldr	r3, [r7, #8]
 800455e:	0d1b      	lsrs	r3, r3, #20
 8004560:	f003 031f 	and.w	r3, r3, #31
 8004564:	2107      	movs	r1, #7
 8004566:	fa01 f303 	lsl.w	r3, r1, r3
 800456a:	43db      	mvns	r3, r3
 800456c:	401a      	ands	r2, r3
 800456e:	68bb      	ldr	r3, [r7, #8]
 8004570:	0d1b      	lsrs	r3, r3, #20
 8004572:	f003 031f 	and.w	r3, r3, #31
 8004576:	6879      	ldr	r1, [r7, #4]
 8004578:	fa01 f303 	lsl.w	r3, r1, r3
 800457c:	431a      	orrs	r2, r3
 800457e:	697b      	ldr	r3, [r7, #20]
 8004580:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8004582:	bf00      	nop
 8004584:	371c      	adds	r7, #28
 8004586:	46bd      	mov	sp, r7
 8004588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800458c:	4770      	bx	lr
	...

08004590 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8004590:	b480      	push	{r7}
 8004592:	b085      	sub	sp, #20
 8004594:	af00      	add	r7, sp, #0
 8004596:	60f8      	str	r0, [r7, #12]
 8004598:	60b9      	str	r1, [r7, #8]
 800459a:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 80045a2:	68bb      	ldr	r3, [r7, #8]
 80045a4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80045a8:	43db      	mvns	r3, r3
 80045aa:	401a      	ands	r2, r3
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	f003 0318 	and.w	r3, r3, #24
 80045b2:	4908      	ldr	r1, [pc, #32]	; (80045d4 <LL_ADC_SetChannelSingleDiff+0x44>)
 80045b4:	40d9      	lsrs	r1, r3
 80045b6:	68bb      	ldr	r3, [r7, #8]
 80045b8:	400b      	ands	r3, r1
 80045ba:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80045be:	431a      	orrs	r2, r3
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 80045c6:	bf00      	nop
 80045c8:	3714      	adds	r7, #20
 80045ca:	46bd      	mov	sp, r7
 80045cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045d0:	4770      	bx	lr
 80045d2:	bf00      	nop
 80045d4:	000fffff 	.word	0x000fffff

080045d8 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80045d8:	b480      	push	{r7}
 80045da:	b083      	sub	sp, #12
 80045dc:	af00      	add	r7, sp, #0
 80045de:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	689b      	ldr	r3, [r3, #8]
 80045e4:	f003 031f 	and.w	r3, r3, #31
}
 80045e8:	4618      	mov	r0, r3
 80045ea:	370c      	adds	r7, #12
 80045ec:	46bd      	mov	sp, r7
 80045ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045f2:	4770      	bx	lr

080045f4 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_EACH_ADC
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_32_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_8B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80045f4:	b480      	push	{r7}
 80045f6:	b083      	sub	sp, #12
 80045f8:	af00      	add	r7, sp, #0
 80045fa:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DAMDF));
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	689b      	ldr	r3, [r3, #8]
 8004600:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
}
 8004604:	4618      	mov	r0, r3
 8004606:	370c      	adds	r7, #12
 8004608:	46bd      	mov	sp, r7
 800460a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800460e:	4770      	bx	lr

08004610 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8004610:	b480      	push	{r7}
 8004612:	b083      	sub	sp, #12
 8004614:	af00      	add	r7, sp, #0
 8004616:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	689a      	ldr	r2, [r3, #8]
 800461c:	4b04      	ldr	r3, [pc, #16]	; (8004630 <LL_ADC_DisableDeepPowerDown+0x20>)
 800461e:	4013      	ands	r3, r2
 8004620:	687a      	ldr	r2, [r7, #4]
 8004622:	6093      	str	r3, [r2, #8]
}
 8004624:	bf00      	nop
 8004626:	370c      	adds	r7, #12
 8004628:	46bd      	mov	sp, r7
 800462a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800462e:	4770      	bx	lr
 8004630:	5fffffc0 	.word	0x5fffffc0

08004634 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8004634:	b480      	push	{r7}
 8004636:	b083      	sub	sp, #12
 8004638:	af00      	add	r7, sp, #0
 800463a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	689b      	ldr	r3, [r3, #8]
 8004640:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004644:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004648:	d101      	bne.n	800464e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800464a:	2301      	movs	r3, #1
 800464c:	e000      	b.n	8004650 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800464e:	2300      	movs	r3, #0
}
 8004650:	4618      	mov	r0, r3
 8004652:	370c      	adds	r7, #12
 8004654:	46bd      	mov	sp, r7
 8004656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800465a:	4770      	bx	lr

0800465c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 800465c:	b480      	push	{r7}
 800465e:	b083      	sub	sp, #12
 8004660:	af00      	add	r7, sp, #0
 8004662:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	689a      	ldr	r2, [r3, #8]
 8004668:	4b05      	ldr	r3, [pc, #20]	; (8004680 <LL_ADC_EnableInternalRegulator+0x24>)
 800466a:	4013      	ands	r3, r2
 800466c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8004674:	bf00      	nop
 8004676:	370c      	adds	r7, #12
 8004678:	46bd      	mov	sp, r7
 800467a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800467e:	4770      	bx	lr
 8004680:	6fffffc0 	.word	0x6fffffc0

08004684 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8004684:	b480      	push	{r7}
 8004686:	b083      	sub	sp, #12
 8004688:	af00      	add	r7, sp, #0
 800468a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	689b      	ldr	r3, [r3, #8]
 8004690:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004694:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004698:	d101      	bne.n	800469e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800469a:	2301      	movs	r3, #1
 800469c:	e000      	b.n	80046a0 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800469e:	2300      	movs	r3, #0
}
 80046a0:	4618      	mov	r0, r3
 80046a2:	370c      	adds	r7, #12
 80046a4:	46bd      	mov	sp, r7
 80046a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046aa:	4770      	bx	lr

080046ac <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80046ac:	b480      	push	{r7}
 80046ae:	b083      	sub	sp, #12
 80046b0:	af00      	add	r7, sp, #0
 80046b2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	689a      	ldr	r2, [r3, #8]
 80046b8:	4b05      	ldr	r3, [pc, #20]	; (80046d0 <LL_ADC_Enable+0x24>)
 80046ba:	4013      	ands	r3, r2
 80046bc:	f043 0201 	orr.w	r2, r3, #1
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80046c4:	bf00      	nop
 80046c6:	370c      	adds	r7, #12
 80046c8:	46bd      	mov	sp, r7
 80046ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ce:	4770      	bx	lr
 80046d0:	7fffffc0 	.word	0x7fffffc0

080046d4 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 80046d4:	b480      	push	{r7}
 80046d6:	b083      	sub	sp, #12
 80046d8:	af00      	add	r7, sp, #0
 80046da:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	689a      	ldr	r2, [r3, #8]
 80046e0:	4b05      	ldr	r3, [pc, #20]	; (80046f8 <LL_ADC_Disable+0x24>)
 80046e2:	4013      	ands	r3, r2
 80046e4:	f043 0202 	orr.w	r2, r3, #2
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 80046ec:	bf00      	nop
 80046ee:	370c      	adds	r7, #12
 80046f0:	46bd      	mov	sp, r7
 80046f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046f6:	4770      	bx	lr
 80046f8:	7fffffc0 	.word	0x7fffffc0

080046fc <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80046fc:	b480      	push	{r7}
 80046fe:	b083      	sub	sp, #12
 8004700:	af00      	add	r7, sp, #0
 8004702:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	689b      	ldr	r3, [r3, #8]
 8004708:	f003 0301 	and.w	r3, r3, #1
 800470c:	2b01      	cmp	r3, #1
 800470e:	d101      	bne.n	8004714 <LL_ADC_IsEnabled+0x18>
 8004710:	2301      	movs	r3, #1
 8004712:	e000      	b.n	8004716 <LL_ADC_IsEnabled+0x1a>
 8004714:	2300      	movs	r3, #0
}
 8004716:	4618      	mov	r0, r3
 8004718:	370c      	adds	r7, #12
 800471a:	46bd      	mov	sp, r7
 800471c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004720:	4770      	bx	lr

08004722 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8004722:	b480      	push	{r7}
 8004724:	b083      	sub	sp, #12
 8004726:	af00      	add	r7, sp, #0
 8004728:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	689b      	ldr	r3, [r3, #8]
 800472e:	f003 0302 	and.w	r3, r3, #2
 8004732:	2b02      	cmp	r3, #2
 8004734:	d101      	bne.n	800473a <LL_ADC_IsDisableOngoing+0x18>
 8004736:	2301      	movs	r3, #1
 8004738:	e000      	b.n	800473c <LL_ADC_IsDisableOngoing+0x1a>
 800473a:	2300      	movs	r3, #0
}
 800473c:	4618      	mov	r0, r3
 800473e:	370c      	adds	r7, #12
 8004740:	46bd      	mov	sp, r7
 8004742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004746:	4770      	bx	lr

08004748 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8004748:	b480      	push	{r7}
 800474a:	b083      	sub	sp, #12
 800474c:	af00      	add	r7, sp, #0
 800474e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	689a      	ldr	r2, [r3, #8]
 8004754:	4b05      	ldr	r3, [pc, #20]	; (800476c <LL_ADC_REG_StartConversion+0x24>)
 8004756:	4013      	ands	r3, r2
 8004758:	f043 0204 	orr.w	r2, r3, #4
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8004760:	bf00      	nop
 8004762:	370c      	adds	r7, #12
 8004764:	46bd      	mov	sp, r7
 8004766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800476a:	4770      	bx	lr
 800476c:	7fffffc0 	.word	0x7fffffc0

08004770 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8004770:	b480      	push	{r7}
 8004772:	b083      	sub	sp, #12
 8004774:	af00      	add	r7, sp, #0
 8004776:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	689b      	ldr	r3, [r3, #8]
 800477c:	f003 0304 	and.w	r3, r3, #4
 8004780:	2b04      	cmp	r3, #4
 8004782:	d101      	bne.n	8004788 <LL_ADC_REG_IsConversionOngoing+0x18>
 8004784:	2301      	movs	r3, #1
 8004786:	e000      	b.n	800478a <LL_ADC_REG_IsConversionOngoing+0x1a>
 8004788:	2300      	movs	r3, #0
}
 800478a:	4618      	mov	r0, r3
 800478c:	370c      	adds	r7, #12
 800478e:	46bd      	mov	sp, r7
 8004790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004794:	4770      	bx	lr

08004796 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8004796:	b480      	push	{r7}
 8004798:	b083      	sub	sp, #12
 800479a:	af00      	add	r7, sp, #0
 800479c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	689b      	ldr	r3, [r3, #8]
 80047a2:	f003 0308 	and.w	r3, r3, #8
 80047a6:	2b08      	cmp	r3, #8
 80047a8:	d101      	bne.n	80047ae <LL_ADC_INJ_IsConversionOngoing+0x18>
 80047aa:	2301      	movs	r3, #1
 80047ac:	e000      	b.n	80047b0 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80047ae:	2300      	movs	r3, #0
}
 80047b0:	4618      	mov	r0, r3
 80047b2:	370c      	adds	r7, #12
 80047b4:	46bd      	mov	sp, r7
 80047b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ba:	4770      	bx	lr

080047bc <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80047bc:	b590      	push	{r4, r7, lr}
 80047be:	b089      	sub	sp, #36	; 0x24
 80047c0:	af00      	add	r7, sp, #0
 80047c2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80047c4:	2300      	movs	r3, #0
 80047c6:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80047c8:	2300      	movs	r3, #0
 80047ca:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d101      	bne.n	80047d6 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80047d2:	2301      	movs	r3, #1
 80047d4:	e18f      	b.n	8004af6 <HAL_ADC_Init+0x33a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	68db      	ldr	r3, [r3, #12]
 80047da:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d109      	bne.n	80047f8 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80047e4:	6878      	ldr	r0, [r7, #4]
 80047e6:	f7fe fe73 	bl	80034d0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	2200      	movs	r2, #0
 80047ee:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	2200      	movs	r2, #0
 80047f4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	4618      	mov	r0, r3
 80047fe:	f7ff ff19 	bl	8004634 <LL_ADC_IsDeepPowerDownEnabled>
 8004802:	4603      	mov	r3, r0
 8004804:	2b00      	cmp	r3, #0
 8004806:	d004      	beq.n	8004812 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	4618      	mov	r0, r3
 800480e:	f7ff feff 	bl	8004610 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	4618      	mov	r0, r3
 8004818:	f7ff ff34 	bl	8004684 <LL_ADC_IsInternalRegulatorEnabled>
 800481c:	4603      	mov	r3, r0
 800481e:	2b00      	cmp	r3, #0
 8004820:	d114      	bne.n	800484c <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	4618      	mov	r0, r3
 8004828:	f7ff ff18 	bl	800465c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800482c:	4b87      	ldr	r3, [pc, #540]	; (8004a4c <HAL_ADC_Init+0x290>)
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	099b      	lsrs	r3, r3, #6
 8004832:	4a87      	ldr	r2, [pc, #540]	; (8004a50 <HAL_ADC_Init+0x294>)
 8004834:	fba2 2303 	umull	r2, r3, r2, r3
 8004838:	099b      	lsrs	r3, r3, #6
 800483a:	3301      	adds	r3, #1
 800483c:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800483e:	e002      	b.n	8004846 <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8004840:	68bb      	ldr	r3, [r7, #8]
 8004842:	3b01      	subs	r3, #1
 8004844:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8004846:	68bb      	ldr	r3, [r7, #8]
 8004848:	2b00      	cmp	r3, #0
 800484a:	d1f9      	bne.n	8004840 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	4618      	mov	r0, r3
 8004852:	f7ff ff17 	bl	8004684 <LL_ADC_IsInternalRegulatorEnabled>
 8004856:	4603      	mov	r3, r0
 8004858:	2b00      	cmp	r3, #0
 800485a:	d10d      	bne.n	8004878 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004860:	f043 0210 	orr.w	r2, r3, #16
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800486c:	f043 0201 	orr.w	r2, r3, #1
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8004874:	2301      	movs	r3, #1
 8004876:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	4618      	mov	r0, r3
 800487e:	f7ff ff77 	bl	8004770 <LL_ADC_REG_IsConversionOngoing>
 8004882:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004888:	f003 0310 	and.w	r3, r3, #16
 800488c:	2b00      	cmp	r3, #0
 800488e:	f040 8129 	bne.w	8004ae4 <HAL_ADC_Init+0x328>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8004892:	697b      	ldr	r3, [r7, #20]
 8004894:	2b00      	cmp	r3, #0
 8004896:	f040 8125 	bne.w	8004ae4 <HAL_ADC_Init+0x328>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800489e:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80048a2:	f043 0202 	orr.w	r2, r3, #2
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	4618      	mov	r0, r3
 80048b0:	f7ff ff24 	bl	80046fc <LL_ADC_IsEnabled>
 80048b4:	4603      	mov	r3, r0
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d136      	bne.n	8004928 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	4a65      	ldr	r2, [pc, #404]	; (8004a54 <HAL_ADC_Init+0x298>)
 80048c0:	4293      	cmp	r3, r2
 80048c2:	d004      	beq.n	80048ce <HAL_ADC_Init+0x112>
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	4a63      	ldr	r2, [pc, #396]	; (8004a58 <HAL_ADC_Init+0x29c>)
 80048ca:	4293      	cmp	r3, r2
 80048cc:	d10e      	bne.n	80048ec <HAL_ADC_Init+0x130>
 80048ce:	4861      	ldr	r0, [pc, #388]	; (8004a54 <HAL_ADC_Init+0x298>)
 80048d0:	f7ff ff14 	bl	80046fc <LL_ADC_IsEnabled>
 80048d4:	4604      	mov	r4, r0
 80048d6:	4860      	ldr	r0, [pc, #384]	; (8004a58 <HAL_ADC_Init+0x29c>)
 80048d8:	f7ff ff10 	bl	80046fc <LL_ADC_IsEnabled>
 80048dc:	4603      	mov	r3, r0
 80048de:	4323      	orrs	r3, r4
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	bf0c      	ite	eq
 80048e4:	2301      	moveq	r3, #1
 80048e6:	2300      	movne	r3, #0
 80048e8:	b2db      	uxtb	r3, r3
 80048ea:	e008      	b.n	80048fe <HAL_ADC_Init+0x142>
 80048ec:	485b      	ldr	r0, [pc, #364]	; (8004a5c <HAL_ADC_Init+0x2a0>)
 80048ee:	f7ff ff05 	bl	80046fc <LL_ADC_IsEnabled>
 80048f2:	4603      	mov	r3, r0
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	bf0c      	ite	eq
 80048f8:	2301      	moveq	r3, #1
 80048fa:	2300      	movne	r3, #0
 80048fc:	b2db      	uxtb	r3, r3
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d012      	beq.n	8004928 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	4a53      	ldr	r2, [pc, #332]	; (8004a54 <HAL_ADC_Init+0x298>)
 8004908:	4293      	cmp	r3, r2
 800490a:	d004      	beq.n	8004916 <HAL_ADC_Init+0x15a>
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	4a51      	ldr	r2, [pc, #324]	; (8004a58 <HAL_ADC_Init+0x29c>)
 8004912:	4293      	cmp	r3, r2
 8004914:	d101      	bne.n	800491a <HAL_ADC_Init+0x15e>
 8004916:	4a52      	ldr	r2, [pc, #328]	; (8004a60 <HAL_ADC_Init+0x2a4>)
 8004918:	e000      	b.n	800491c <HAL_ADC_Init+0x160>
 800491a:	4a52      	ldr	r2, [pc, #328]	; (8004a64 <HAL_ADC_Init+0x2a8>)
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	685b      	ldr	r3, [r3, #4]
 8004920:	4619      	mov	r1, r3
 8004922:	4610      	mov	r0, r2
 8004924:	f7ff fd2e 	bl	8004384 <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 8004928:	f7ff fcf6 	bl	8004318 <HAL_GetREVID>
 800492c:	4603      	mov	r3, r0
 800492e:	f241 0203 	movw	r2, #4099	; 0x1003
 8004932:	4293      	cmp	r3, r2
 8004934:	d914      	bls.n	8004960 <HAL_ADC_Init+0x1a4>
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	689b      	ldr	r3, [r3, #8]
 800493a:	2b10      	cmp	r3, #16
 800493c:	d110      	bne.n	8004960 <HAL_ADC_Init+0x1a4>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	7d5b      	ldrb	r3, [r3, #21]
 8004942:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8004948:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 800494e:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	7f1b      	ldrb	r3, [r3, #28]
 8004954:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8004956:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8004958:	f043 030c 	orr.w	r3, r3, #12
 800495c:	61bb      	str	r3, [r7, #24]
 800495e:	e00d      	b.n	800497c <HAL_ADC_Init+0x1c0>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	7d5b      	ldrb	r3, [r3, #21]
 8004964:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800496a:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8004970:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	7f1b      	ldrb	r3, [r3, #28]
 8004976:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8004978:	4313      	orrs	r3, r2
 800497a:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	7f1b      	ldrb	r3, [r3, #28]
 8004980:	2b01      	cmp	r3, #1
 8004982:	d106      	bne.n	8004992 <HAL_ADC_Init+0x1d6>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	6a1b      	ldr	r3, [r3, #32]
 8004988:	3b01      	subs	r3, #1
 800498a:	045b      	lsls	r3, r3, #17
 800498c:	69ba      	ldr	r2, [r7, #24]
 800498e:	4313      	orrs	r3, r2
 8004990:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004996:	2b00      	cmp	r3, #0
 8004998:	d009      	beq.n	80049ae <HAL_ADC_Init+0x1f2>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800499e:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049a6:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80049a8:	69ba      	ldr	r2, [r7, #24]
 80049aa:	4313      	orrs	r3, r2
 80049ac:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	68da      	ldr	r2, [r3, #12]
 80049b4:	4b2c      	ldr	r3, [pc, #176]	; (8004a68 <HAL_ADC_Init+0x2ac>)
 80049b6:	4013      	ands	r3, r2
 80049b8:	687a      	ldr	r2, [r7, #4]
 80049ba:	6812      	ldr	r2, [r2, #0]
 80049bc:	69b9      	ldr	r1, [r7, #24]
 80049be:	430b      	orrs	r3, r1
 80049c0:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	4618      	mov	r0, r3
 80049c8:	f7ff fed2 	bl	8004770 <LL_ADC_REG_IsConversionOngoing>
 80049cc:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	4618      	mov	r0, r3
 80049d4:	f7ff fedf 	bl	8004796 <LL_ADC_INJ_IsConversionOngoing>
 80049d8:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80049da:	693b      	ldr	r3, [r7, #16]
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d15f      	bne.n	8004aa0 <HAL_ADC_Init+0x2e4>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d15c      	bne.n	8004aa0 <HAL_ADC_Init+0x2e4>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	7d1b      	ldrb	r3, [r3, #20]
 80049ea:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      tmpCFGR = (
 80049f0:	4313      	orrs	r3, r2
 80049f2:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	68da      	ldr	r2, [r3, #12]
 80049fa:	4b1c      	ldr	r3, [pc, #112]	; (8004a6c <HAL_ADC_Init+0x2b0>)
 80049fc:	4013      	ands	r3, r2
 80049fe:	687a      	ldr	r2, [r7, #4]
 8004a00:	6812      	ldr	r2, [r2, #0]
 8004a02:	69b9      	ldr	r1, [r7, #24]
 8004a04:	430b      	orrs	r3, r1
 8004a06:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004a0e:	2b01      	cmp	r3, #1
 8004a10:	d130      	bne.n	8004a74 <HAL_ADC_Init+0x2b8>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a16:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	691a      	ldr	r2, [r3, #16]
 8004a1e:	4b14      	ldr	r3, [pc, #80]	; (8004a70 <HAL_ADC_Init+0x2b4>)
 8004a20:	4013      	ands	r3, r2
 8004a22:	687a      	ldr	r2, [r7, #4]
 8004a24:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004a26:	3a01      	subs	r2, #1
 8004a28:	0411      	lsls	r1, r2, #16
 8004a2a:	687a      	ldr	r2, [r7, #4]
 8004a2c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8004a2e:	4311      	orrs	r1, r2
 8004a30:	687a      	ldr	r2, [r7, #4]
 8004a32:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8004a34:	4311      	orrs	r1, r2
 8004a36:	687a      	ldr	r2, [r7, #4]
 8004a38:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8004a3a:	430a      	orrs	r2, r1
 8004a3c:	431a      	orrs	r2, r3
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	f042 0201 	orr.w	r2, r2, #1
 8004a46:	611a      	str	r2, [r3, #16]
 8004a48:	e01c      	b.n	8004a84 <HAL_ADC_Init+0x2c8>
 8004a4a:	bf00      	nop
 8004a4c:	2000011c 	.word	0x2000011c
 8004a50:	053e2d63 	.word	0x053e2d63
 8004a54:	40022000 	.word	0x40022000
 8004a58:	40022100 	.word	0x40022100
 8004a5c:	58026000 	.word	0x58026000
 8004a60:	40022300 	.word	0x40022300
 8004a64:	58026300 	.word	0x58026300
 8004a68:	fff0c003 	.word	0xfff0c003
 8004a6c:	ffffbffc 	.word	0xffffbffc
 8004a70:	fc00f81e 	.word	0xfc00f81e

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	691a      	ldr	r2, [r3, #16]
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	f022 0201 	bic.w	r2, r2, #1
 8004a82:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	691b      	ldr	r3, [r3, #16]
 8004a8a:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	430a      	orrs	r2, r1
 8004a98:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 8004a9a:	6878      	ldr	r0, [r7, #4]
 8004a9c:	f001 f804 	bl	8005aa8 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	68db      	ldr	r3, [r3, #12]
 8004aa4:	2b01      	cmp	r3, #1
 8004aa6:	d10c      	bne.n	8004ac2 <HAL_ADC_Init+0x306>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004aae:	f023 010f 	bic.w	r1, r3, #15
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	699b      	ldr	r3, [r3, #24]
 8004ab6:	1e5a      	subs	r2, r3, #1
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	430a      	orrs	r2, r1
 8004abe:	631a      	str	r2, [r3, #48]	; 0x30
 8004ac0:	e007      	b.n	8004ad2 <HAL_ADC_Init+0x316>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	f022 020f 	bic.w	r2, r2, #15
 8004ad0:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ad6:	f023 0303 	bic.w	r3, r3, #3
 8004ada:	f043 0201 	orr.w	r2, r3, #1
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	655a      	str	r2, [r3, #84]	; 0x54
 8004ae2:	e007      	b.n	8004af4 <HAL_ADC_Init+0x338>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ae8:	f043 0210 	orr.w	r2, r3, #16
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8004af0:	2301      	movs	r3, #1
 8004af2:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8004af4:	7ffb      	ldrb	r3, [r7, #31]
}
 8004af6:	4618      	mov	r0, r3
 8004af8:	3724      	adds	r7, #36	; 0x24
 8004afa:	46bd      	mov	sp, r7
 8004afc:	bd90      	pop	{r4, r7, pc}
 8004afe:	bf00      	nop

08004b00 <HAL_ADC_Start_IT>:
  *          before calling HAL_ADC_Start_IT().
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef *hadc)
{
 8004b00:	b580      	push	{r7, lr}
 8004b02:	b086      	sub	sp, #24
 8004b04:	af00      	add	r7, sp, #0
 8004b06:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	4a92      	ldr	r2, [pc, #584]	; (8004d58 <HAL_ADC_Start_IT+0x258>)
 8004b0e:	4293      	cmp	r3, r2
 8004b10:	d004      	beq.n	8004b1c <HAL_ADC_Start_IT+0x1c>
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	4a91      	ldr	r2, [pc, #580]	; (8004d5c <HAL_ADC_Start_IT+0x25c>)
 8004b18:	4293      	cmp	r3, r2
 8004b1a:	d101      	bne.n	8004b20 <HAL_ADC_Start_IT+0x20>
 8004b1c:	4b90      	ldr	r3, [pc, #576]	; (8004d60 <HAL_ADC_Start_IT+0x260>)
 8004b1e:	e000      	b.n	8004b22 <HAL_ADC_Start_IT+0x22>
 8004b20:	4b90      	ldr	r3, [pc, #576]	; (8004d64 <HAL_ADC_Start_IT+0x264>)
 8004b22:	4618      	mov	r0, r3
 8004b24:	f7ff fd58 	bl	80045d8 <LL_ADC_GetMultimode>
 8004b28:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	4618      	mov	r0, r3
 8004b30:	f7ff fe1e 	bl	8004770 <LL_ADC_REG_IsConversionOngoing>
 8004b34:	4603      	mov	r3, r0
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	f040 8118 	bne.w	8004d6c <HAL_ADC_Start_IT+0x26c>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004b42:	2b01      	cmp	r3, #1
 8004b44:	d101      	bne.n	8004b4a <HAL_ADC_Start_IT+0x4a>
 8004b46:	2302      	movs	r3, #2
 8004b48:	e113      	b.n	8004d72 <HAL_ADC_Start_IT+0x272>
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	2201      	movs	r2, #1
 8004b4e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8004b52:	6878      	ldr	r0, [r7, #4]
 8004b54:	f000 febe 	bl	80058d4 <ADC_Enable>
 8004b58:	4603      	mov	r3, r0
 8004b5a:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8004b5c:	7dfb      	ldrb	r3, [r7, #23]
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	f040 80f5 	bne.w	8004d4e <HAL_ADC_Start_IT+0x24e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004b68:	4b7f      	ldr	r3, [pc, #508]	; (8004d68 <HAL_ADC_Start_IT+0x268>)
 8004b6a:	4013      	ands	r3, r2
 8004b6c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	655a      	str	r2, [r3, #84]	; 0x54
                        HAL_ADC_STATE_REG_BUSY);

      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	4a78      	ldr	r2, [pc, #480]	; (8004d5c <HAL_ADC_Start_IT+0x25c>)
 8004b7a:	4293      	cmp	r3, r2
 8004b7c:	d002      	beq.n	8004b84 <HAL_ADC_Start_IT+0x84>
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	e000      	b.n	8004b86 <HAL_ADC_Start_IT+0x86>
 8004b84:	4b74      	ldr	r3, [pc, #464]	; (8004d58 <HAL_ADC_Start_IT+0x258>)
 8004b86:	687a      	ldr	r2, [r7, #4]
 8004b88:	6812      	ldr	r2, [r2, #0]
 8004b8a:	4293      	cmp	r3, r2
 8004b8c:	d002      	beq.n	8004b94 <HAL_ADC_Start_IT+0x94>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8004b8e:	693b      	ldr	r3, [r7, #16]
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d105      	bne.n	8004ba0 <HAL_ADC_Start_IT+0xa0>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b98:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	655a      	str	r2, [r3, #84]	; 0x54
      }

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ba4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d006      	beq.n	8004bba <HAL_ADC_Start_IT+0xba>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004bb0:	f023 0206 	bic.w	r2, r3, #6
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	659a      	str	r2, [r3, #88]	; 0x58
 8004bb8:	e002      	b.n	8004bc0 <HAL_ADC_Start_IT+0xc0>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	2200      	movs	r2, #0
 8004bbe:	659a      	str	r2, [r3, #88]	; 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	221c      	movs	r2, #28
 8004bc6:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	2200      	movs	r2, #0
 8004bcc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

      /* Disable all interruptions before enabling the desired ones */
      __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_EOS | ADC_IT_OVR));
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	685a      	ldr	r2, [r3, #4]
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	f022 021c 	bic.w	r2, r2, #28
 8004bde:	605a      	str	r2, [r3, #4]

      /* Enable ADC end of conversion interrupt */
      switch (hadc->Init.EOCSelection)
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	691b      	ldr	r3, [r3, #16]
 8004be4:	2b08      	cmp	r3, #8
 8004be6:	d108      	bne.n	8004bfa <HAL_ADC_Start_IT+0xfa>
      {
        case ADC_EOC_SEQ_CONV:
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOS);
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	685a      	ldr	r2, [r3, #4]
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	f042 0208 	orr.w	r2, r2, #8
 8004bf6:	605a      	str	r2, [r3, #4]
          break;
 8004bf8:	e008      	b.n	8004c0c <HAL_ADC_Start_IT+0x10c>
        /* case ADC_EOC_SINGLE_CONV */
        default:
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOC);
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	685a      	ldr	r2, [r3, #4]
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	f042 0204 	orr.w	r2, r2, #4
 8004c08:	605a      	str	r2, [r3, #4]
          break;
 8004c0a:	bf00      	nop

      /* Enable ADC overrun interrupt */
      /* If hadc->Init.Overrun is set to ADC_OVR_DATA_PRESERVED, only then is
         ADC_IT_OVR enabled; otherwise data overwrite is considered as normal
         behavior and no CPU time is lost for a non-processed interruption */
      if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d107      	bne.n	8004c24 <HAL_ADC_Start_IT+0x124>
      {
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	685a      	ldr	r2, [r3, #4]
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	f042 0210 	orr.w	r2, r2, #16
 8004c22:	605a      	str	r2, [r3, #4]
      /* trigger event.                                                       */
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	4a4c      	ldr	r2, [pc, #304]	; (8004d5c <HAL_ADC_Start_IT+0x25c>)
 8004c2a:	4293      	cmp	r3, r2
 8004c2c:	d002      	beq.n	8004c34 <HAL_ADC_Start_IT+0x134>
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	e000      	b.n	8004c36 <HAL_ADC_Start_IT+0x136>
 8004c34:	4b48      	ldr	r3, [pc, #288]	; (8004d58 <HAL_ADC_Start_IT+0x258>)
 8004c36:	687a      	ldr	r2, [r7, #4]
 8004c38:	6812      	ldr	r2, [r2, #0]
 8004c3a:	4293      	cmp	r3, r2
 8004c3c:	d008      	beq.n	8004c50 <HAL_ADC_Start_IT+0x150>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8004c3e:	693b      	ldr	r3, [r7, #16]
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d005      	beq.n	8004c50 <HAL_ADC_Start_IT+0x150>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8004c44:	693b      	ldr	r3, [r7, #16]
 8004c46:	2b05      	cmp	r3, #5
 8004c48:	d002      	beq.n	8004c50 <HAL_ADC_Start_IT+0x150>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8004c4a:	693b      	ldr	r3, [r7, #16]
 8004c4c:	2b09      	cmp	r3, #9
 8004c4e:	d13a      	bne.n	8004cc6 <HAL_ADC_Start_IT+0x1c6>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	68db      	ldr	r3, [r3, #12]
 8004c56:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d02d      	beq.n	8004cba <HAL_ADC_Start_IT+0x1ba>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c62:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8004c66:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	655a      	str	r2, [r3, #84]	; 0x54

          /* Enable as well injected interruptions in case
           HAL_ADCEx_InjectedStart_IT() has not been called beforehand. This
           allows to start regular and injected conversions when JAUTO is
           set with a single call to HAL_ADC_Start_IT() */
          switch (hadc->Init.EOCSelection)
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	691b      	ldr	r3, [r3, #16]
 8004c72:	2b08      	cmp	r3, #8
 8004c74:	d110      	bne.n	8004c98 <HAL_ADC_Start_IT+0x198>
          {
            case ADC_EOC_SEQ_CONV:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	685a      	ldr	r2, [r3, #4]
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	f022 0220 	bic.w	r2, r2, #32
 8004c84:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOS);
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	685a      	ldr	r2, [r3, #4]
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004c94:	605a      	str	r2, [r3, #4]
              break;
 8004c96:	e010      	b.n	8004cba <HAL_ADC_Start_IT+0x1ba>
            /* case ADC_EOC_SINGLE_CONV */
            default:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOS);
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	685a      	ldr	r2, [r3, #4]
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004ca6:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	685a      	ldr	r2, [r3, #4]
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	f042 0220 	orr.w	r2, r2, #32
 8004cb6:	605a      	str	r2, [r3, #4]
              break;
 8004cb8:	bf00      	nop
          }
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	4618      	mov	r0, r3
 8004cc0:	f7ff fd42 	bl	8004748 <LL_ADC_REG_StartConversion>
 8004cc4:	e054      	b.n	8004d70 <HAL_ADC_Start_IT+0x270>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004cca:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	655a      	str	r2, [r3, #84]	; 0x54
        /* if Master ADC JAUTO bit is set, Slave injected interruptions
           are enabled nevertheless (for same reason as above) */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	4a21      	ldr	r2, [pc, #132]	; (8004d5c <HAL_ADC_Start_IT+0x25c>)
 8004cd8:	4293      	cmp	r3, r2
 8004cda:	d002      	beq.n	8004ce2 <HAL_ADC_Start_IT+0x1e2>
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	e000      	b.n	8004ce4 <HAL_ADC_Start_IT+0x1e4>
 8004ce2:	4b1d      	ldr	r3, [pc, #116]	; (8004d58 <HAL_ADC_Start_IT+0x258>)
 8004ce4:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	68db      	ldr	r3, [r3, #12]
 8004cea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d03e      	beq.n	8004d70 <HAL_ADC_Start_IT+0x270>
        {
          /* First, update Slave State in setting HAL_ADC_STATE_INJ_BUSY bit
             and in resetting HAL_ADC_STATE_INJ_EOC bit */
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004cf6:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8004cfa:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	655a      	str	r2, [r3, #84]	; 0x54
          /* Next, set Slave injected interruptions */
          switch (hadc->Init.EOCSelection)
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	691b      	ldr	r3, [r3, #16]
 8004d06:	2b08      	cmp	r3, #8
 8004d08:	d110      	bne.n	8004d2c <HAL_ADC_Start_IT+0x22c>
          {
            case ADC_EOC_SEQ_CONV:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	685a      	ldr	r2, [r3, #4]
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	f022 0220 	bic.w	r2, r2, #32
 8004d18:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOS);
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	685a      	ldr	r2, [r3, #4]
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004d28:	605a      	str	r2, [r3, #4]
              break;
 8004d2a:	e021      	b.n	8004d70 <HAL_ADC_Start_IT+0x270>
            /* case ADC_EOC_SINGLE_CONV */
            default:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOS);
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	685a      	ldr	r2, [r3, #4]
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004d3a:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	685a      	ldr	r2, [r3, #4]
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	f042 0220 	orr.w	r2, r2, #32
 8004d4a:	605a      	str	r2, [r3, #4]
              break;
 8004d4c:	e010      	b.n	8004d70 <HAL_ADC_Start_IT+0x270>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	2200      	movs	r2, #0
 8004d52:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8004d56:	e00b      	b.n	8004d70 <HAL_ADC_Start_IT+0x270>
 8004d58:	40022000 	.word	0x40022000
 8004d5c:	40022100 	.word	0x40022100
 8004d60:	40022300 	.word	0x40022300
 8004d64:	58026300 	.word	0x58026300
 8004d68:	fffff0fe 	.word	0xfffff0fe
    }

  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8004d6c:	2302      	movs	r3, #2
 8004d6e:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8004d70:	7dfb      	ldrb	r3, [r7, #23]
}
 8004d72:	4618      	mov	r0, r3
 8004d74:	3718      	adds	r7, #24
 8004d76:	46bd      	mov	sp, r7
 8004d78:	bd80      	pop	{r7, pc}
 8004d7a:	bf00      	nop

08004d7c <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8004d7c:	b480      	push	{r7}
 8004d7e:	b083      	sub	sp, #12
 8004d80:	af00      	add	r7, sp, #0
 8004d82:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8004d8a:	4618      	mov	r0, r3
 8004d8c:	370c      	adds	r7, #12
 8004d8e:	46bd      	mov	sp, r7
 8004d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d94:	4770      	bx	lr
	...

08004d98 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8004d98:	b580      	push	{r7, lr}
 8004d9a:	b08a      	sub	sp, #40	; 0x28
 8004d9c:	af00      	add	r7, sp, #0
 8004d9e:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8004da0:	2300      	movs	r3, #0
 8004da2:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	685b      	ldr	r3, [r3, #4]
 8004db2:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	4a87      	ldr	r2, [pc, #540]	; (8004fd8 <HAL_ADC_IRQHandler+0x240>)
 8004dba:	4293      	cmp	r3, r2
 8004dbc:	d004      	beq.n	8004dc8 <HAL_ADC_IRQHandler+0x30>
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	4a86      	ldr	r2, [pc, #536]	; (8004fdc <HAL_ADC_IRQHandler+0x244>)
 8004dc4:	4293      	cmp	r3, r2
 8004dc6:	d101      	bne.n	8004dcc <HAL_ADC_IRQHandler+0x34>
 8004dc8:	4b85      	ldr	r3, [pc, #532]	; (8004fe0 <HAL_ADC_IRQHandler+0x248>)
 8004dca:	e000      	b.n	8004dce <HAL_ADC_IRQHandler+0x36>
 8004dcc:	4b85      	ldr	r3, [pc, #532]	; (8004fe4 <HAL_ADC_IRQHandler+0x24c>)
 8004dce:	4618      	mov	r0, r3
 8004dd0:	f7ff fc02 	bl	80045d8 <LL_ADC_GetMultimode>
 8004dd4:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8004dd6:	69fb      	ldr	r3, [r7, #28]
 8004dd8:	f003 0302 	and.w	r3, r3, #2
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d017      	beq.n	8004e10 <HAL_ADC_IRQHandler+0x78>
 8004de0:	69bb      	ldr	r3, [r7, #24]
 8004de2:	f003 0302 	and.w	r3, r3, #2
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d012      	beq.n	8004e10 <HAL_ADC_IRQHandler+0x78>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004dee:	f003 0310 	and.w	r3, r3, #16
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d105      	bne.n	8004e02 <HAL_ADC_IRQHandler+0x6a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004dfa:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	655a      	str	r2, [r3, #84]	; 0x54

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8004e02:	6878      	ldr	r0, [r7, #4]
 8004e04:	f001 f81a 	bl	8005e3c <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	2202      	movs	r2, #2
 8004e0e:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8004e10:	69fb      	ldr	r3, [r7, #28]
 8004e12:	f003 0304 	and.w	r3, r3, #4
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d004      	beq.n	8004e24 <HAL_ADC_IRQHandler+0x8c>
 8004e1a:	69bb      	ldr	r3, [r7, #24]
 8004e1c:	f003 0304 	and.w	r3, r3, #4
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d10a      	bne.n	8004e3a <HAL_ADC_IRQHandler+0xa2>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8004e24:	69fb      	ldr	r3, [r7, #28]
 8004e26:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	f000 8083 	beq.w	8004f36 <HAL_ADC_IRQHandler+0x19e>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8004e30:	69bb      	ldr	r3, [r7, #24]
 8004e32:	f003 0308 	and.w	r3, r3, #8
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d07d      	beq.n	8004f36 <HAL_ADC_IRQHandler+0x19e>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e3e:	f003 0310 	and.w	r3, r3, #16
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d105      	bne.n	8004e52 <HAL_ADC_IRQHandler+0xba>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e4a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	4618      	mov	r0, r3
 8004e58:	f7ff fb1c 	bl	8004494 <LL_ADC_REG_IsTriggerSourceSWStart>
 8004e5c:	4603      	mov	r3, r0
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d062      	beq.n	8004f28 <HAL_ADC_IRQHandler+0x190>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	4a5d      	ldr	r2, [pc, #372]	; (8004fdc <HAL_ADC_IRQHandler+0x244>)
 8004e68:	4293      	cmp	r3, r2
 8004e6a:	d002      	beq.n	8004e72 <HAL_ADC_IRQHandler+0xda>
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	e000      	b.n	8004e74 <HAL_ADC_IRQHandler+0xdc>
 8004e72:	4b59      	ldr	r3, [pc, #356]	; (8004fd8 <HAL_ADC_IRQHandler+0x240>)
 8004e74:	687a      	ldr	r2, [r7, #4]
 8004e76:	6812      	ldr	r2, [r2, #0]
 8004e78:	4293      	cmp	r3, r2
 8004e7a:	d008      	beq.n	8004e8e <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8004e7c:	697b      	ldr	r3, [r7, #20]
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d005      	beq.n	8004e8e <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8004e82:	697b      	ldr	r3, [r7, #20]
 8004e84:	2b05      	cmp	r3, #5
 8004e86:	d002      	beq.n	8004e8e <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8004e88:	697b      	ldr	r3, [r7, #20]
 8004e8a:	2b09      	cmp	r3, #9
 8004e8c:	d104      	bne.n	8004e98 <HAL_ADC_IRQHandler+0x100>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	68db      	ldr	r3, [r3, #12]
 8004e94:	623b      	str	r3, [r7, #32]
 8004e96:	e00c      	b.n	8004eb2 <HAL_ADC_IRQHandler+0x11a>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	4a4f      	ldr	r2, [pc, #316]	; (8004fdc <HAL_ADC_IRQHandler+0x244>)
 8004e9e:	4293      	cmp	r3, r2
 8004ea0:	d002      	beq.n	8004ea8 <HAL_ADC_IRQHandler+0x110>
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	e000      	b.n	8004eaa <HAL_ADC_IRQHandler+0x112>
 8004ea8:	4b4b      	ldr	r3, [pc, #300]	; (8004fd8 <HAL_ADC_IRQHandler+0x240>)
 8004eaa:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8004eac:	693b      	ldr	r3, [r7, #16]
 8004eae:	68db      	ldr	r3, [r3, #12]
 8004eb0:	623b      	str	r3, [r7, #32]
      }

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8004eb2:	6a3b      	ldr	r3, [r7, #32]
 8004eb4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d135      	bne.n	8004f28 <HAL_ADC_IRQHandler+0x190>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	f003 0308 	and.w	r3, r3, #8
 8004ec6:	2b08      	cmp	r3, #8
 8004ec8:	d12e      	bne.n	8004f28 <HAL_ADC_IRQHandler+0x190>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	4618      	mov	r0, r3
 8004ed0:	f7ff fc4e 	bl	8004770 <LL_ADC_REG_IsConversionOngoing>
 8004ed4:	4603      	mov	r3, r0
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d11a      	bne.n	8004f10 <HAL_ADC_IRQHandler+0x178>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	685a      	ldr	r2, [r3, #4]
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	f022 020c 	bic.w	r2, r2, #12
 8004ee8:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004eee:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	655a      	str	r2, [r3, #84]	; 0x54

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004efa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d112      	bne.n	8004f28 <HAL_ADC_IRQHandler+0x190>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f06:	f043 0201 	orr.w	r2, r3, #1
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	655a      	str	r2, [r3, #84]	; 0x54
 8004f0e:	e00b      	b.n	8004f28 <HAL_ADC_IRQHandler+0x190>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f14:	f043 0210 	orr.w	r2, r3, #16
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f20:	f043 0201 	orr.w	r2, r3, #1
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	659a      	str	r2, [r3, #88]	; 0x58
    /*       possibility to use:                                              */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8004f28:	6878      	ldr	r0, [r7, #4]
 8004f2a:	f7fe fa09 	bl	8003340 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	220c      	movs	r2, #12
 8004f34:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8004f36:	69fb      	ldr	r3, [r7, #28]
 8004f38:	f003 0320 	and.w	r3, r3, #32
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d004      	beq.n	8004f4a <HAL_ADC_IRQHandler+0x1b2>
 8004f40:	69bb      	ldr	r3, [r7, #24]
 8004f42:	f003 0320 	and.w	r3, r3, #32
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d10b      	bne.n	8004f62 <HAL_ADC_IRQHandler+0x1ca>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8004f4a:	69fb      	ldr	r3, [r7, #28]
 8004f4c:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	f000 80a0 	beq.w	8005096 <HAL_ADC_IRQHandler+0x2fe>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8004f56:	69bb      	ldr	r3, [r7, #24]
 8004f58:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	f000 809a 	beq.w	8005096 <HAL_ADC_IRQHandler+0x2fe>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f66:	f003 0310 	and.w	r3, r3, #16
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d105      	bne.n	8004f7a <HAL_ADC_IRQHandler+0x1e2>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f72:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	4618      	mov	r0, r3
 8004f80:	f7ff fac7 	bl	8004512 <LL_ADC_INJ_IsTriggerSourceSWStart>
 8004f84:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	4618      	mov	r0, r3
 8004f8c:	f7ff fa82 	bl	8004494 <LL_ADC_REG_IsTriggerSourceSWStart>
 8004f90:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	4a11      	ldr	r2, [pc, #68]	; (8004fdc <HAL_ADC_IRQHandler+0x244>)
 8004f98:	4293      	cmp	r3, r2
 8004f9a:	d002      	beq.n	8004fa2 <HAL_ADC_IRQHandler+0x20a>
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	e000      	b.n	8004fa4 <HAL_ADC_IRQHandler+0x20c>
 8004fa2:	4b0d      	ldr	r3, [pc, #52]	; (8004fd8 <HAL_ADC_IRQHandler+0x240>)
 8004fa4:	687a      	ldr	r2, [r7, #4]
 8004fa6:	6812      	ldr	r2, [r2, #0]
 8004fa8:	4293      	cmp	r3, r2
 8004faa:	d008      	beq.n	8004fbe <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8004fac:	697b      	ldr	r3, [r7, #20]
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d005      	beq.n	8004fbe <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 8004fb2:	697b      	ldr	r3, [r7, #20]
 8004fb4:	2b06      	cmp	r3, #6
 8004fb6:	d002      	beq.n	8004fbe <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8004fb8:	697b      	ldr	r3, [r7, #20]
 8004fba:	2b07      	cmp	r3, #7
 8004fbc:	d104      	bne.n	8004fc8 <HAL_ADC_IRQHandler+0x230>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	68db      	ldr	r3, [r3, #12]
 8004fc4:	623b      	str	r3, [r7, #32]
 8004fc6:	e014      	b.n	8004ff2 <HAL_ADC_IRQHandler+0x25a>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	4a03      	ldr	r2, [pc, #12]	; (8004fdc <HAL_ADC_IRQHandler+0x244>)
 8004fce:	4293      	cmp	r3, r2
 8004fd0:	d00a      	beq.n	8004fe8 <HAL_ADC_IRQHandler+0x250>
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	e008      	b.n	8004fea <HAL_ADC_IRQHandler+0x252>
 8004fd8:	40022000 	.word	0x40022000
 8004fdc:	40022100 	.word	0x40022100
 8004fe0:	40022300 	.word	0x40022300
 8004fe4:	58026300 	.word	0x58026300
 8004fe8:	4b84      	ldr	r3, [pc, #528]	; (80051fc <HAL_ADC_IRQHandler+0x464>)
 8004fea:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8004fec:	693b      	ldr	r3, [r7, #16]
 8004fee:	68db      	ldr	r3, [r3, #12]
 8004ff0:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d047      	beq.n	8005088 <HAL_ADC_IRQHandler+0x2f0>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8004ff8:	6a3b      	ldr	r3, [r7, #32]
 8004ffa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d007      	beq.n	8005012 <HAL_ADC_IRQHandler+0x27a>
 8005002:	68bb      	ldr	r3, [r7, #8]
 8005004:	2b00      	cmp	r3, #0
 8005006:	d03f      	beq.n	8005088 <HAL_ADC_IRQHandler+0x2f0>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8005008:	6a3b      	ldr	r3, [r7, #32]
 800500a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 800500e:	2b00      	cmp	r3, #0
 8005010:	d13a      	bne.n	8005088 <HAL_ADC_IRQHandler+0x2f0>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800501c:	2b40      	cmp	r3, #64	; 0x40
 800501e:	d133      	bne.n	8005088 <HAL_ADC_IRQHandler+0x2f0>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8005020:	6a3b      	ldr	r3, [r7, #32]
 8005022:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005026:	2b00      	cmp	r3, #0
 8005028:	d12e      	bne.n	8005088 <HAL_ADC_IRQHandler+0x2f0>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	4618      	mov	r0, r3
 8005030:	f7ff fbb1 	bl	8004796 <LL_ADC_INJ_IsConversionOngoing>
 8005034:	4603      	mov	r3, r0
 8005036:	2b00      	cmp	r3, #0
 8005038:	d11a      	bne.n	8005070 <HAL_ADC_IRQHandler+0x2d8>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	685a      	ldr	r2, [r3, #4]
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8005048:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800504e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	655a      	str	r2, [r3, #84]	; 0x54

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800505a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800505e:	2b00      	cmp	r3, #0
 8005060:	d112      	bne.n	8005088 <HAL_ADC_IRQHandler+0x2f0>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005066:	f043 0201 	orr.w	r2, r3, #1
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	655a      	str	r2, [r3, #84]	; 0x54
 800506e:	e00b      	b.n	8005088 <HAL_ADC_IRQHandler+0x2f0>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005074:	f043 0210 	orr.w	r2, r3, #16
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	655a      	str	r2, [r3, #84]	; 0x54

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005080:	f043 0201 	orr.w	r2, r3, #1
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	659a      	str	r2, [r3, #88]	; 0x58
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8005088:	6878      	ldr	r0, [r7, #4]
 800508a:	f000 feaf 	bl	8005dec <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	2260      	movs	r2, #96	; 0x60
 8005094:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8005096:	69fb      	ldr	r3, [r7, #28]
 8005098:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800509c:	2b00      	cmp	r3, #0
 800509e:	d011      	beq.n	80050c4 <HAL_ADC_IRQHandler+0x32c>
 80050a0:	69bb      	ldr	r3, [r7, #24]
 80050a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d00c      	beq.n	80050c4 <HAL_ADC_IRQHandler+0x32c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80050ae:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 80050b6:	6878      	ldr	r0, [r7, #4]
 80050b8:	f000 f8a8 	bl	800520c <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	2280      	movs	r2, #128	; 0x80
 80050c2:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 80050c4:	69fb      	ldr	r3, [r7, #28]
 80050c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d012      	beq.n	80050f4 <HAL_ADC_IRQHandler+0x35c>
 80050ce:	69bb      	ldr	r3, [r7, #24]
 80050d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d00d      	beq.n	80050f4 <HAL_ADC_IRQHandler+0x35c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80050dc:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 80050e4:	6878      	ldr	r0, [r7, #4]
 80050e6:	f000 fe95 	bl	8005e14 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	f44f 7280 	mov.w	r2, #256	; 0x100
 80050f2:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 80050f4:	69fb      	ldr	r3, [r7, #28]
 80050f6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d012      	beq.n	8005124 <HAL_ADC_IRQHandler+0x38c>
 80050fe:	69bb      	ldr	r3, [r7, #24]
 8005100:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005104:	2b00      	cmp	r3, #0
 8005106:	d00d      	beq.n	8005124 <HAL_ADC_IRQHandler+0x38c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800510c:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8005114:	6878      	ldr	r0, [r7, #4]
 8005116:	f000 fe87 	bl	8005e28 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005122:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8005124:	69fb      	ldr	r3, [r7, #28]
 8005126:	f003 0310 	and.w	r3, r3, #16
 800512a:	2b00      	cmp	r3, #0
 800512c:	d043      	beq.n	80051b6 <HAL_ADC_IRQHandler+0x41e>
 800512e:	69bb      	ldr	r3, [r7, #24]
 8005130:	f003 0310 	and.w	r3, r3, #16
 8005134:	2b00      	cmp	r3, #0
 8005136:	d03e      	beq.n	80051b6 <HAL_ADC_IRQHandler+0x41e>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800513c:	2b00      	cmp	r3, #0
 800513e:	d102      	bne.n	8005146 <HAL_ADC_IRQHandler+0x3ae>
    {
      overrun_error = 1UL;
 8005140:	2301      	movs	r3, #1
 8005142:	627b      	str	r3, [r7, #36]	; 0x24
 8005144:	e021      	b.n	800518a <HAL_ADC_IRQHandler+0x3f2>
    }
    else
    {
      /* Check DMA configuration */
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 8005146:	697b      	ldr	r3, [r7, #20]
 8005148:	2b00      	cmp	r3, #0
 800514a:	d015      	beq.n	8005178 <HAL_ADC_IRQHandler+0x3e0>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	4a2a      	ldr	r2, [pc, #168]	; (80051fc <HAL_ADC_IRQHandler+0x464>)
 8005152:	4293      	cmp	r3, r2
 8005154:	d004      	beq.n	8005160 <HAL_ADC_IRQHandler+0x3c8>
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	4a29      	ldr	r2, [pc, #164]	; (8005200 <HAL_ADC_IRQHandler+0x468>)
 800515c:	4293      	cmp	r3, r2
 800515e:	d101      	bne.n	8005164 <HAL_ADC_IRQHandler+0x3cc>
 8005160:	4b28      	ldr	r3, [pc, #160]	; (8005204 <HAL_ADC_IRQHandler+0x46c>)
 8005162:	e000      	b.n	8005166 <HAL_ADC_IRQHandler+0x3ce>
 8005164:	4b28      	ldr	r3, [pc, #160]	; (8005208 <HAL_ADC_IRQHandler+0x470>)
 8005166:	4618      	mov	r0, r3
 8005168:	f7ff fa44 	bl	80045f4 <LL_ADC_GetMultiDMATransfer>
 800516c:	4603      	mov	r3, r0
 800516e:	2b00      	cmp	r3, #0
 8005170:	d00b      	beq.n	800518a <HAL_ADC_IRQHandler+0x3f2>
        {
          overrun_error = 1UL;
 8005172:	2301      	movs	r3, #1
 8005174:	627b      	str	r3, [r7, #36]	; 0x24
 8005176:	e008      	b.n	800518a <HAL_ADC_IRQHandler+0x3f2>
        }
      }
      else
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMNGT) != 0UL)
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	68db      	ldr	r3, [r3, #12]
 800517e:	f003 0303 	and.w	r3, r3, #3
 8005182:	2b00      	cmp	r3, #0
 8005184:	d001      	beq.n	800518a <HAL_ADC_IRQHandler+0x3f2>
        {
          overrun_error = 1UL;
 8005186:	2301      	movs	r3, #1
 8005188:	627b      	str	r3, [r7, #36]	; 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 800518a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800518c:	2b01      	cmp	r3, #1
 800518e:	d10e      	bne.n	80051ae <HAL_ADC_IRQHandler+0x416>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005194:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80051a0:	f043 0202 	orr.w	r2, r3, #2
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	659a      	str	r2, [r3, #88]	; 0x58
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 80051a8:	6878      	ldr	r0, [r7, #4]
 80051aa:	f000 f839 	bl	8005220 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	2210      	movs	r2, #16
 80051b4:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 80051b6:	69fb      	ldr	r3, [r7, #28]
 80051b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80051bc:	2b00      	cmp	r3, #0
 80051be:	d018      	beq.n	80051f2 <HAL_ADC_IRQHandler+0x45a>
 80051c0:	69bb      	ldr	r3, [r7, #24]
 80051c2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d013      	beq.n	80051f2 <HAL_ADC_IRQHandler+0x45a>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80051ce:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80051da:	f043 0208 	orr.w	r2, r3, #8
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	659a      	str	r2, [r3, #88]	; 0x58

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80051ea:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 80051ec:	6878      	ldr	r0, [r7, #4]
 80051ee:	f000 fe07 	bl	8005e00 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 80051f2:	bf00      	nop
 80051f4:	3728      	adds	r7, #40	; 0x28
 80051f6:	46bd      	mov	sp, r7
 80051f8:	bd80      	pop	{r7, pc}
 80051fa:	bf00      	nop
 80051fc:	40022000 	.word	0x40022000
 8005200:	40022100 	.word	0x40022100
 8005204:	40022300 	.word	0x40022300
 8005208:	58026300 	.word	0x58026300

0800520c <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 800520c:	b480      	push	{r7}
 800520e:	b083      	sub	sp, #12
 8005210:	af00      	add	r7, sp, #0
 8005212:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8005214:	bf00      	nop
 8005216:	370c      	adds	r7, #12
 8005218:	46bd      	mov	sp, r7
 800521a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800521e:	4770      	bx	lr

08005220 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8005220:	b480      	push	{r7}
 8005222:	b083      	sub	sp, #12
 8005224:	af00      	add	r7, sp, #0
 8005226:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8005228:	bf00      	nop
 800522a:	370c      	adds	r7, #12
 800522c:	46bd      	mov	sp, r7
 800522e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005232:	4770      	bx	lr

08005234 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8005234:	b590      	push	{r4, r7, lr}
 8005236:	b0a1      	sub	sp, #132	; 0x84
 8005238:	af00      	add	r7, sp, #0
 800523a:	6078      	str	r0, [r7, #4]
 800523c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800523e:	2300      	movs	r3, #0
 8005240:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8005244:	2300      	movs	r3, #0
 8005246:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8005248:	683b      	ldr	r3, [r7, #0]
 800524a:	68db      	ldr	r3, [r3, #12]
 800524c:	4a9d      	ldr	r2, [pc, #628]	; (80054c4 <HAL_ADC_ConfigChannel+0x290>)
 800524e:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005256:	2b01      	cmp	r3, #1
 8005258:	d101      	bne.n	800525e <HAL_ADC_ConfigChannel+0x2a>
 800525a:	2302      	movs	r3, #2
 800525c:	e321      	b.n	80058a2 <HAL_ADC_ConfigChannel+0x66e>
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	2201      	movs	r2, #1
 8005262:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	4618      	mov	r0, r3
 800526c:	f7ff fa80 	bl	8004770 <LL_ADC_REG_IsConversionOngoing>
 8005270:	4603      	mov	r3, r0
 8005272:	2b00      	cmp	r3, #0
 8005274:	f040 8306 	bne.w	8005884 <HAL_ADC_ConfigChannel+0x650>
      /* ADC channels preselection */
      hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
    }
#else
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8005278:	683b      	ldr	r3, [r7, #0]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005280:	2b00      	cmp	r3, #0
 8005282:	d108      	bne.n	8005296 <HAL_ADC_ConfigChannel+0x62>
 8005284:	683b      	ldr	r3, [r7, #0]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	0e9b      	lsrs	r3, r3, #26
 800528a:	f003 031f 	and.w	r3, r3, #31
 800528e:	2201      	movs	r2, #1
 8005290:	fa02 f303 	lsl.w	r3, r2, r3
 8005294:	e016      	b.n	80052c4 <HAL_ADC_ConfigChannel+0x90>
 8005296:	683b      	ldr	r3, [r7, #0]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	667b      	str	r3, [r7, #100]	; 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800529c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800529e:	fa93 f3a3 	rbit	r3, r3
 80052a2:	663b      	str	r3, [r7, #96]	; 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80052a4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80052a6:	66bb      	str	r3, [r7, #104]	; 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80052a8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d101      	bne.n	80052b2 <HAL_ADC_ConfigChannel+0x7e>
  {
    return 32U;
 80052ae:	2320      	movs	r3, #32
 80052b0:	e003      	b.n	80052ba <HAL_ADC_ConfigChannel+0x86>
  }
  return __builtin_clz(value);
 80052b2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80052b4:	fab3 f383 	clz	r3, r3
 80052b8:	b2db      	uxtb	r3, r3
 80052ba:	f003 031f 	and.w	r3, r3, #31
 80052be:	2201      	movs	r2, #1
 80052c0:	fa02 f303 	lsl.w	r3, r2, r3
 80052c4:	687a      	ldr	r2, [r7, #4]
 80052c6:	6812      	ldr	r2, [r2, #0]
 80052c8:	69d1      	ldr	r1, [r2, #28]
 80052ca:	687a      	ldr	r2, [r7, #4]
 80052cc:	6812      	ldr	r2, [r2, #0]
 80052ce:	430b      	orrs	r3, r1
 80052d0:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	6818      	ldr	r0, [r3, #0]
 80052d6:	683b      	ldr	r3, [r7, #0]
 80052d8:	6859      	ldr	r1, [r3, #4]
 80052da:	683b      	ldr	r3, [r7, #0]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	461a      	mov	r2, r3
 80052e0:	f7ff f8eb 	bl	80044ba <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	4618      	mov	r0, r3
 80052ea:	f7ff fa41 	bl	8004770 <LL_ADC_REG_IsConversionOngoing>
 80052ee:	67b8      	str	r0, [r7, #120]	; 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	4618      	mov	r0, r3
 80052f6:	f7ff fa4e 	bl	8004796 <LL_ADC_INJ_IsConversionOngoing>
 80052fa:	6778      	str	r0, [r7, #116]	; 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80052fc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80052fe:	2b00      	cmp	r3, #0
 8005300:	f040 80b3 	bne.w	800546a <HAL_ADC_ConfigChannel+0x236>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8005304:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005306:	2b00      	cmp	r3, #0
 8005308:	f040 80af 	bne.w	800546a <HAL_ADC_ConfigChannel+0x236>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	6818      	ldr	r0, [r3, #0]
 8005310:	683b      	ldr	r3, [r7, #0]
 8005312:	6819      	ldr	r1, [r3, #0]
 8005314:	683b      	ldr	r3, [r7, #0]
 8005316:	689b      	ldr	r3, [r3, #8]
 8005318:	461a      	mov	r2, r3
 800531a:	f7ff f90d 	bl	8004538 <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 800531e:	4b6a      	ldr	r3, [pc, #424]	; (80054c8 <HAL_ADC_ConfigChannel+0x294>)
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8005326:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800532a:	d10b      	bne.n	8005344 <HAL_ADC_ConfigChannel+0x110>
 800532c:	683b      	ldr	r3, [r7, #0]
 800532e:	695a      	ldr	r2, [r3, #20]
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	68db      	ldr	r3, [r3, #12]
 8005336:	089b      	lsrs	r3, r3, #2
 8005338:	f003 0307 	and.w	r3, r3, #7
 800533c:	005b      	lsls	r3, r3, #1
 800533e:	fa02 f303 	lsl.w	r3, r2, r3
 8005342:	e01d      	b.n	8005380 <HAL_ADC_ConfigChannel+0x14c>
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	68db      	ldr	r3, [r3, #12]
 800534a:	f003 0310 	and.w	r3, r3, #16
 800534e:	2b00      	cmp	r3, #0
 8005350:	d10b      	bne.n	800536a <HAL_ADC_ConfigChannel+0x136>
 8005352:	683b      	ldr	r3, [r7, #0]
 8005354:	695a      	ldr	r2, [r3, #20]
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	68db      	ldr	r3, [r3, #12]
 800535c:	089b      	lsrs	r3, r3, #2
 800535e:	f003 0307 	and.w	r3, r3, #7
 8005362:	005b      	lsls	r3, r3, #1
 8005364:	fa02 f303 	lsl.w	r3, r2, r3
 8005368:	e00a      	b.n	8005380 <HAL_ADC_ConfigChannel+0x14c>
 800536a:	683b      	ldr	r3, [r7, #0]
 800536c:	695a      	ldr	r2, [r3, #20]
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	68db      	ldr	r3, [r3, #12]
 8005374:	089b      	lsrs	r3, r3, #2
 8005376:	f003 0304 	and.w	r3, r3, #4
 800537a:	005b      	lsls	r3, r3, #1
 800537c:	fa02 f303 	lsl.w	r3, r2, r3
 8005380:	673b      	str	r3, [r7, #112]	; 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8005382:	683b      	ldr	r3, [r7, #0]
 8005384:	691b      	ldr	r3, [r3, #16]
 8005386:	2b04      	cmp	r3, #4
 8005388:	d027      	beq.n	80053da <HAL_ADC_ConfigChannel+0x1a6>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	6818      	ldr	r0, [r3, #0]
 800538e:	683b      	ldr	r3, [r7, #0]
 8005390:	6919      	ldr	r1, [r3, #16]
 8005392:	683b      	ldr	r3, [r7, #0]
 8005394:	681a      	ldr	r2, [r3, #0]
 8005396:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005398:	f7ff f828 	bl	80043ec <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	6818      	ldr	r0, [r3, #0]
 80053a0:	683b      	ldr	r3, [r7, #0]
 80053a2:	6919      	ldr	r1, [r3, #16]
 80053a4:	683b      	ldr	r3, [r7, #0]
 80053a6:	7e5b      	ldrb	r3, [r3, #25]
 80053a8:	2b01      	cmp	r3, #1
 80053aa:	d102      	bne.n	80053b2 <HAL_ADC_ConfigChannel+0x17e>
 80053ac:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80053b0:	e000      	b.n	80053b4 <HAL_ADC_ConfigChannel+0x180>
 80053b2:	2300      	movs	r3, #0
 80053b4:	461a      	mov	r2, r3
 80053b6:	f7ff f852 	bl	800445e <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	6818      	ldr	r0, [r3, #0]
 80053be:	683b      	ldr	r3, [r7, #0]
 80053c0:	6919      	ldr	r1, [r3, #16]
 80053c2:	683b      	ldr	r3, [r7, #0]
 80053c4:	7e1b      	ldrb	r3, [r3, #24]
 80053c6:	2b01      	cmp	r3, #1
 80053c8:	d102      	bne.n	80053d0 <HAL_ADC_ConfigChannel+0x19c>
 80053ca:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80053ce:	e000      	b.n	80053d2 <HAL_ADC_ConfigChannel+0x19e>
 80053d0:	2300      	movs	r3, #0
 80053d2:	461a      	mov	r2, r3
 80053d4:	f7ff f82a 	bl	800442c <LL_ADC_SetDataRightShift>
 80053d8:	e047      	b.n	800546a <HAL_ADC_ConfigChannel+0x236>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80053e0:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80053e4:	683b      	ldr	r3, [r7, #0]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	069b      	lsls	r3, r3, #26
 80053ea:	429a      	cmp	r2, r3
 80053ec:	d107      	bne.n	80053fe <HAL_ADC_ConfigChannel+0x1ca>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80053fc:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005404:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8005408:	683b      	ldr	r3, [r7, #0]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	069b      	lsls	r3, r3, #26
 800540e:	429a      	cmp	r2, r3
 8005410:	d107      	bne.n	8005422 <HAL_ADC_ConfigChannel+0x1ee>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8005420:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005428:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800542c:	683b      	ldr	r3, [r7, #0]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	069b      	lsls	r3, r3, #26
 8005432:	429a      	cmp	r2, r3
 8005434:	d107      	bne.n	8005446 <HAL_ADC_ConfigChannel+0x212>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8005444:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800544c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8005450:	683b      	ldr	r3, [r7, #0]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	069b      	lsls	r3, r3, #26
 8005456:	429a      	cmp	r2, r3
 8005458:	d107      	bne.n	800546a <HAL_ADC_ConfigChannel+0x236>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8005468:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	4618      	mov	r0, r3
 8005470:	f7ff f944 	bl	80046fc <LL_ADC_IsEnabled>
 8005474:	4603      	mov	r3, r0
 8005476:	2b00      	cmp	r3, #0
 8005478:	f040 820d 	bne.w	8005896 <HAL_ADC_ConfigChannel+0x662>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	6818      	ldr	r0, [r3, #0]
 8005480:	683b      	ldr	r3, [r7, #0]
 8005482:	6819      	ldr	r1, [r3, #0]
 8005484:	683b      	ldr	r3, [r7, #0]
 8005486:	68db      	ldr	r3, [r3, #12]
 8005488:	461a      	mov	r2, r3
 800548a:	f7ff f881 	bl	8004590 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800548e:	683b      	ldr	r3, [r7, #0]
 8005490:	68db      	ldr	r3, [r3, #12]
 8005492:	4a0c      	ldr	r2, [pc, #48]	; (80054c4 <HAL_ADC_ConfigChannel+0x290>)
 8005494:	4293      	cmp	r3, r2
 8005496:	f040 8133 	bne.w	8005700 <HAL_ADC_ConfigChannel+0x4cc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800549e:	683b      	ldr	r3, [r7, #0]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d110      	bne.n	80054cc <HAL_ADC_ConfigChannel+0x298>
 80054aa:	683b      	ldr	r3, [r7, #0]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	0e9b      	lsrs	r3, r3, #26
 80054b0:	3301      	adds	r3, #1
 80054b2:	f003 031f 	and.w	r3, r3, #31
 80054b6:	2b09      	cmp	r3, #9
 80054b8:	bf94      	ite	ls
 80054ba:	2301      	movls	r3, #1
 80054bc:	2300      	movhi	r3, #0
 80054be:	b2db      	uxtb	r3, r3
 80054c0:	e01e      	b.n	8005500 <HAL_ADC_ConfigChannel+0x2cc>
 80054c2:	bf00      	nop
 80054c4:	47ff0000 	.word	0x47ff0000
 80054c8:	5c001000 	.word	0x5c001000
 80054cc:	683b      	ldr	r3, [r7, #0]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80054d2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80054d4:	fa93 f3a3 	rbit	r3, r3
 80054d8:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 80054da:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80054dc:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 80054de:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	d101      	bne.n	80054e8 <HAL_ADC_ConfigChannel+0x2b4>
    return 32U;
 80054e4:	2320      	movs	r3, #32
 80054e6:	e003      	b.n	80054f0 <HAL_ADC_ConfigChannel+0x2bc>
  return __builtin_clz(value);
 80054e8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80054ea:	fab3 f383 	clz	r3, r3
 80054ee:	b2db      	uxtb	r3, r3
 80054f0:	3301      	adds	r3, #1
 80054f2:	f003 031f 	and.w	r3, r3, #31
 80054f6:	2b09      	cmp	r3, #9
 80054f8:	bf94      	ite	ls
 80054fa:	2301      	movls	r3, #1
 80054fc:	2300      	movhi	r3, #0
 80054fe:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005500:	2b00      	cmp	r3, #0
 8005502:	d079      	beq.n	80055f8 <HAL_ADC_ConfigChannel+0x3c4>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8005504:	683b      	ldr	r3, [r7, #0]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800550c:	2b00      	cmp	r3, #0
 800550e:	d107      	bne.n	8005520 <HAL_ADC_ConfigChannel+0x2ec>
 8005510:	683b      	ldr	r3, [r7, #0]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	0e9b      	lsrs	r3, r3, #26
 8005516:	3301      	adds	r3, #1
 8005518:	069b      	lsls	r3, r3, #26
 800551a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800551e:	e015      	b.n	800554c <HAL_ADC_ConfigChannel+0x318>
 8005520:	683b      	ldr	r3, [r7, #0]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005526:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005528:	fa93 f3a3 	rbit	r3, r3
 800552c:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 800552e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005530:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 8005532:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005534:	2b00      	cmp	r3, #0
 8005536:	d101      	bne.n	800553c <HAL_ADC_ConfigChannel+0x308>
    return 32U;
 8005538:	2320      	movs	r3, #32
 800553a:	e003      	b.n	8005544 <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 800553c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800553e:	fab3 f383 	clz	r3, r3
 8005542:	b2db      	uxtb	r3, r3
 8005544:	3301      	adds	r3, #1
 8005546:	069b      	lsls	r3, r3, #26
 8005548:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800554c:	683b      	ldr	r3, [r7, #0]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005554:	2b00      	cmp	r3, #0
 8005556:	d109      	bne.n	800556c <HAL_ADC_ConfigChannel+0x338>
 8005558:	683b      	ldr	r3, [r7, #0]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	0e9b      	lsrs	r3, r3, #26
 800555e:	3301      	adds	r3, #1
 8005560:	f003 031f 	and.w	r3, r3, #31
 8005564:	2101      	movs	r1, #1
 8005566:	fa01 f303 	lsl.w	r3, r1, r3
 800556a:	e017      	b.n	800559c <HAL_ADC_ConfigChannel+0x368>
 800556c:	683b      	ldr	r3, [r7, #0]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005572:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005574:	fa93 f3a3 	rbit	r3, r3
 8005578:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 800557a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800557c:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 800557e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005580:	2b00      	cmp	r3, #0
 8005582:	d101      	bne.n	8005588 <HAL_ADC_ConfigChannel+0x354>
    return 32U;
 8005584:	2320      	movs	r3, #32
 8005586:	e003      	b.n	8005590 <HAL_ADC_ConfigChannel+0x35c>
  return __builtin_clz(value);
 8005588:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800558a:	fab3 f383 	clz	r3, r3
 800558e:	b2db      	uxtb	r3, r3
 8005590:	3301      	adds	r3, #1
 8005592:	f003 031f 	and.w	r3, r3, #31
 8005596:	2101      	movs	r1, #1
 8005598:	fa01 f303 	lsl.w	r3, r1, r3
 800559c:	ea42 0103 	orr.w	r1, r2, r3
 80055a0:	683b      	ldr	r3, [r7, #0]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	d10a      	bne.n	80055c2 <HAL_ADC_ConfigChannel+0x38e>
 80055ac:	683b      	ldr	r3, [r7, #0]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	0e9b      	lsrs	r3, r3, #26
 80055b2:	3301      	adds	r3, #1
 80055b4:	f003 021f 	and.w	r2, r3, #31
 80055b8:	4613      	mov	r3, r2
 80055ba:	005b      	lsls	r3, r3, #1
 80055bc:	4413      	add	r3, r2
 80055be:	051b      	lsls	r3, r3, #20
 80055c0:	e018      	b.n	80055f4 <HAL_ADC_ConfigChannel+0x3c0>
 80055c2:	683b      	ldr	r3, [r7, #0]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80055c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80055ca:	fa93 f3a3 	rbit	r3, r3
 80055ce:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 80055d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055d2:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 80055d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d101      	bne.n	80055de <HAL_ADC_ConfigChannel+0x3aa>
    return 32U;
 80055da:	2320      	movs	r3, #32
 80055dc:	e003      	b.n	80055e6 <HAL_ADC_ConfigChannel+0x3b2>
  return __builtin_clz(value);
 80055de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055e0:	fab3 f383 	clz	r3, r3
 80055e4:	b2db      	uxtb	r3, r3
 80055e6:	3301      	adds	r3, #1
 80055e8:	f003 021f 	and.w	r2, r3, #31
 80055ec:	4613      	mov	r3, r2
 80055ee:	005b      	lsls	r3, r3, #1
 80055f0:	4413      	add	r3, r2
 80055f2:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80055f4:	430b      	orrs	r3, r1
 80055f6:	e07e      	b.n	80056f6 <HAL_ADC_ConfigChannel+0x4c2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80055f8:	683b      	ldr	r3, [r7, #0]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005600:	2b00      	cmp	r3, #0
 8005602:	d107      	bne.n	8005614 <HAL_ADC_ConfigChannel+0x3e0>
 8005604:	683b      	ldr	r3, [r7, #0]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	0e9b      	lsrs	r3, r3, #26
 800560a:	3301      	adds	r3, #1
 800560c:	069b      	lsls	r3, r3, #26
 800560e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8005612:	e015      	b.n	8005640 <HAL_ADC_ConfigChannel+0x40c>
 8005614:	683b      	ldr	r3, [r7, #0]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800561a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800561c:	fa93 f3a3 	rbit	r3, r3
 8005620:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8005622:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005624:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 8005626:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005628:	2b00      	cmp	r3, #0
 800562a:	d101      	bne.n	8005630 <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 800562c:	2320      	movs	r3, #32
 800562e:	e003      	b.n	8005638 <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 8005630:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005632:	fab3 f383 	clz	r3, r3
 8005636:	b2db      	uxtb	r3, r3
 8005638:	3301      	adds	r3, #1
 800563a:	069b      	lsls	r3, r3, #26
 800563c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8005640:	683b      	ldr	r3, [r7, #0]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005648:	2b00      	cmp	r3, #0
 800564a:	d109      	bne.n	8005660 <HAL_ADC_ConfigChannel+0x42c>
 800564c:	683b      	ldr	r3, [r7, #0]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	0e9b      	lsrs	r3, r3, #26
 8005652:	3301      	adds	r3, #1
 8005654:	f003 031f 	and.w	r3, r3, #31
 8005658:	2101      	movs	r1, #1
 800565a:	fa01 f303 	lsl.w	r3, r1, r3
 800565e:	e017      	b.n	8005690 <HAL_ADC_ConfigChannel+0x45c>
 8005660:	683b      	ldr	r3, [r7, #0]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005666:	69fb      	ldr	r3, [r7, #28]
 8005668:	fa93 f3a3 	rbit	r3, r3
 800566c:	61bb      	str	r3, [r7, #24]
  return result;
 800566e:	69bb      	ldr	r3, [r7, #24]
 8005670:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8005672:	6a3b      	ldr	r3, [r7, #32]
 8005674:	2b00      	cmp	r3, #0
 8005676:	d101      	bne.n	800567c <HAL_ADC_ConfigChannel+0x448>
    return 32U;
 8005678:	2320      	movs	r3, #32
 800567a:	e003      	b.n	8005684 <HAL_ADC_ConfigChannel+0x450>
  return __builtin_clz(value);
 800567c:	6a3b      	ldr	r3, [r7, #32]
 800567e:	fab3 f383 	clz	r3, r3
 8005682:	b2db      	uxtb	r3, r3
 8005684:	3301      	adds	r3, #1
 8005686:	f003 031f 	and.w	r3, r3, #31
 800568a:	2101      	movs	r1, #1
 800568c:	fa01 f303 	lsl.w	r3, r1, r3
 8005690:	ea42 0103 	orr.w	r1, r2, r3
 8005694:	683b      	ldr	r3, [r7, #0]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800569c:	2b00      	cmp	r3, #0
 800569e:	d10d      	bne.n	80056bc <HAL_ADC_ConfigChannel+0x488>
 80056a0:	683b      	ldr	r3, [r7, #0]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	0e9b      	lsrs	r3, r3, #26
 80056a6:	3301      	adds	r3, #1
 80056a8:	f003 021f 	and.w	r2, r3, #31
 80056ac:	4613      	mov	r3, r2
 80056ae:	005b      	lsls	r3, r3, #1
 80056b0:	4413      	add	r3, r2
 80056b2:	3b1e      	subs	r3, #30
 80056b4:	051b      	lsls	r3, r3, #20
 80056b6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80056ba:	e01b      	b.n	80056f4 <HAL_ADC_ConfigChannel+0x4c0>
 80056bc:	683b      	ldr	r3, [r7, #0]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80056c2:	693b      	ldr	r3, [r7, #16]
 80056c4:	fa93 f3a3 	rbit	r3, r3
 80056c8:	60fb      	str	r3, [r7, #12]
  return result;
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 80056ce:	697b      	ldr	r3, [r7, #20]
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	d101      	bne.n	80056d8 <HAL_ADC_ConfigChannel+0x4a4>
    return 32U;
 80056d4:	2320      	movs	r3, #32
 80056d6:	e003      	b.n	80056e0 <HAL_ADC_ConfigChannel+0x4ac>
  return __builtin_clz(value);
 80056d8:	697b      	ldr	r3, [r7, #20]
 80056da:	fab3 f383 	clz	r3, r3
 80056de:	b2db      	uxtb	r3, r3
 80056e0:	3301      	adds	r3, #1
 80056e2:	f003 021f 	and.w	r2, r3, #31
 80056e6:	4613      	mov	r3, r2
 80056e8:	005b      	lsls	r3, r3, #1
 80056ea:	4413      	add	r3, r2
 80056ec:	3b1e      	subs	r3, #30
 80056ee:	051b      	lsls	r3, r3, #20
 80056f0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80056f4:	430b      	orrs	r3, r1
 80056f6:	683a      	ldr	r2, [r7, #0]
 80056f8:	6892      	ldr	r2, [r2, #8]
 80056fa:	4619      	mov	r1, r3
 80056fc:	f7fe ff1c 	bl	8004538 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8005700:	683b      	ldr	r3, [r7, #0]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	2b00      	cmp	r3, #0
 8005706:	f280 80c6 	bge.w	8005896 <HAL_ADC_ConfigChannel+0x662>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	4a67      	ldr	r2, [pc, #412]	; (80058ac <HAL_ADC_ConfigChannel+0x678>)
 8005710:	4293      	cmp	r3, r2
 8005712:	d004      	beq.n	800571e <HAL_ADC_ConfigChannel+0x4ea>
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	4a65      	ldr	r2, [pc, #404]	; (80058b0 <HAL_ADC_ConfigChannel+0x67c>)
 800571a:	4293      	cmp	r3, r2
 800571c:	d101      	bne.n	8005722 <HAL_ADC_ConfigChannel+0x4ee>
 800571e:	4b65      	ldr	r3, [pc, #404]	; (80058b4 <HAL_ADC_ConfigChannel+0x680>)
 8005720:	e000      	b.n	8005724 <HAL_ADC_ConfigChannel+0x4f0>
 8005722:	4b65      	ldr	r3, [pc, #404]	; (80058b8 <HAL_ADC_ConfigChannel+0x684>)
 8005724:	4618      	mov	r0, r3
 8005726:	f7fe fe53 	bl	80043d0 <LL_ADC_GetCommonPathInternalCh>
 800572a:	66f8      	str	r0, [r7, #108]	; 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	4a5e      	ldr	r2, [pc, #376]	; (80058ac <HAL_ADC_ConfigChannel+0x678>)
 8005732:	4293      	cmp	r3, r2
 8005734:	d004      	beq.n	8005740 <HAL_ADC_ConfigChannel+0x50c>
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	4a5d      	ldr	r2, [pc, #372]	; (80058b0 <HAL_ADC_ConfigChannel+0x67c>)
 800573c:	4293      	cmp	r3, r2
 800573e:	d10e      	bne.n	800575e <HAL_ADC_ConfigChannel+0x52a>
 8005740:	485a      	ldr	r0, [pc, #360]	; (80058ac <HAL_ADC_ConfigChannel+0x678>)
 8005742:	f7fe ffdb 	bl	80046fc <LL_ADC_IsEnabled>
 8005746:	4604      	mov	r4, r0
 8005748:	4859      	ldr	r0, [pc, #356]	; (80058b0 <HAL_ADC_ConfigChannel+0x67c>)
 800574a:	f7fe ffd7 	bl	80046fc <LL_ADC_IsEnabled>
 800574e:	4603      	mov	r3, r0
 8005750:	4323      	orrs	r3, r4
 8005752:	2b00      	cmp	r3, #0
 8005754:	bf0c      	ite	eq
 8005756:	2301      	moveq	r3, #1
 8005758:	2300      	movne	r3, #0
 800575a:	b2db      	uxtb	r3, r3
 800575c:	e008      	b.n	8005770 <HAL_ADC_ConfigChannel+0x53c>
 800575e:	4857      	ldr	r0, [pc, #348]	; (80058bc <HAL_ADC_ConfigChannel+0x688>)
 8005760:	f7fe ffcc 	bl	80046fc <LL_ADC_IsEnabled>
 8005764:	4603      	mov	r3, r0
 8005766:	2b00      	cmp	r3, #0
 8005768:	bf0c      	ite	eq
 800576a:	2301      	moveq	r3, #1
 800576c:	2300      	movne	r3, #0
 800576e:	b2db      	uxtb	r3, r3
 8005770:	2b00      	cmp	r3, #0
 8005772:	d07d      	beq.n	8005870 <HAL_ADC_ConfigChannel+0x63c>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8005774:	683b      	ldr	r3, [r7, #0]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	4a51      	ldr	r2, [pc, #324]	; (80058c0 <HAL_ADC_ConfigChannel+0x68c>)
 800577a:	4293      	cmp	r3, r2
 800577c:	d130      	bne.n	80057e0 <HAL_ADC_ConfigChannel+0x5ac>
 800577e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005780:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005784:	2b00      	cmp	r3, #0
 8005786:	d12b      	bne.n	80057e0 <HAL_ADC_ConfigChannel+0x5ac>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	4a4b      	ldr	r2, [pc, #300]	; (80058bc <HAL_ADC_ConfigChannel+0x688>)
 800578e:	4293      	cmp	r3, r2
 8005790:	f040 8081 	bne.w	8005896 <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	4a44      	ldr	r2, [pc, #272]	; (80058ac <HAL_ADC_ConfigChannel+0x678>)
 800579a:	4293      	cmp	r3, r2
 800579c:	d004      	beq.n	80057a8 <HAL_ADC_ConfigChannel+0x574>
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	4a43      	ldr	r2, [pc, #268]	; (80058b0 <HAL_ADC_ConfigChannel+0x67c>)
 80057a4:	4293      	cmp	r3, r2
 80057a6:	d101      	bne.n	80057ac <HAL_ADC_ConfigChannel+0x578>
 80057a8:	4a42      	ldr	r2, [pc, #264]	; (80058b4 <HAL_ADC_ConfigChannel+0x680>)
 80057aa:	e000      	b.n	80057ae <HAL_ADC_ConfigChannel+0x57a>
 80057ac:	4a42      	ldr	r2, [pc, #264]	; (80058b8 <HAL_ADC_ConfigChannel+0x684>)
 80057ae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80057b0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80057b4:	4619      	mov	r1, r3
 80057b6:	4610      	mov	r0, r2
 80057b8:	f7fe fdf7 	bl	80043aa <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80057bc:	4b41      	ldr	r3, [pc, #260]	; (80058c4 <HAL_ADC_ConfigChannel+0x690>)
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	099b      	lsrs	r3, r3, #6
 80057c2:	4a41      	ldr	r2, [pc, #260]	; (80058c8 <HAL_ADC_ConfigChannel+0x694>)
 80057c4:	fba2 2303 	umull	r2, r3, r2, r3
 80057c8:	099b      	lsrs	r3, r3, #6
 80057ca:	3301      	adds	r3, #1
 80057cc:	005b      	lsls	r3, r3, #1
 80057ce:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 80057d0:	e002      	b.n	80057d8 <HAL_ADC_ConfigChannel+0x5a4>
              {
                wait_loop_index--;
 80057d2:	68bb      	ldr	r3, [r7, #8]
 80057d4:	3b01      	subs	r3, #1
 80057d6:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 80057d8:	68bb      	ldr	r3, [r7, #8]
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d1f9      	bne.n	80057d2 <HAL_ADC_ConfigChannel+0x59e>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80057de:	e05a      	b.n	8005896 <HAL_ADC_ConfigChannel+0x662>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80057e0:	683b      	ldr	r3, [r7, #0]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	4a39      	ldr	r2, [pc, #228]	; (80058cc <HAL_ADC_ConfigChannel+0x698>)
 80057e6:	4293      	cmp	r3, r2
 80057e8:	d11e      	bne.n	8005828 <HAL_ADC_ConfigChannel+0x5f4>
 80057ea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80057ec:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	d119      	bne.n	8005828 <HAL_ADC_ConfigChannel+0x5f4>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	4a30      	ldr	r2, [pc, #192]	; (80058bc <HAL_ADC_ConfigChannel+0x688>)
 80057fa:	4293      	cmp	r3, r2
 80057fc:	d14b      	bne.n	8005896 <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	4a2a      	ldr	r2, [pc, #168]	; (80058ac <HAL_ADC_ConfigChannel+0x678>)
 8005804:	4293      	cmp	r3, r2
 8005806:	d004      	beq.n	8005812 <HAL_ADC_ConfigChannel+0x5de>
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	4a28      	ldr	r2, [pc, #160]	; (80058b0 <HAL_ADC_ConfigChannel+0x67c>)
 800580e:	4293      	cmp	r3, r2
 8005810:	d101      	bne.n	8005816 <HAL_ADC_ConfigChannel+0x5e2>
 8005812:	4a28      	ldr	r2, [pc, #160]	; (80058b4 <HAL_ADC_ConfigChannel+0x680>)
 8005814:	e000      	b.n	8005818 <HAL_ADC_ConfigChannel+0x5e4>
 8005816:	4a28      	ldr	r2, [pc, #160]	; (80058b8 <HAL_ADC_ConfigChannel+0x684>)
 8005818:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800581a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800581e:	4619      	mov	r1, r3
 8005820:	4610      	mov	r0, r2
 8005822:	f7fe fdc2 	bl	80043aa <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8005826:	e036      	b.n	8005896 <HAL_ADC_ConfigChannel+0x662>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8005828:	683b      	ldr	r3, [r7, #0]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	4a28      	ldr	r2, [pc, #160]	; (80058d0 <HAL_ADC_ConfigChannel+0x69c>)
 800582e:	4293      	cmp	r3, r2
 8005830:	d131      	bne.n	8005896 <HAL_ADC_ConfigChannel+0x662>
 8005832:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005834:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005838:	2b00      	cmp	r3, #0
 800583a:	d12c      	bne.n	8005896 <HAL_ADC_ConfigChannel+0x662>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	4a1e      	ldr	r2, [pc, #120]	; (80058bc <HAL_ADC_ConfigChannel+0x688>)
 8005842:	4293      	cmp	r3, r2
 8005844:	d127      	bne.n	8005896 <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	4a18      	ldr	r2, [pc, #96]	; (80058ac <HAL_ADC_ConfigChannel+0x678>)
 800584c:	4293      	cmp	r3, r2
 800584e:	d004      	beq.n	800585a <HAL_ADC_ConfigChannel+0x626>
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	4a16      	ldr	r2, [pc, #88]	; (80058b0 <HAL_ADC_ConfigChannel+0x67c>)
 8005856:	4293      	cmp	r3, r2
 8005858:	d101      	bne.n	800585e <HAL_ADC_ConfigChannel+0x62a>
 800585a:	4a16      	ldr	r2, [pc, #88]	; (80058b4 <HAL_ADC_ConfigChannel+0x680>)
 800585c:	e000      	b.n	8005860 <HAL_ADC_ConfigChannel+0x62c>
 800585e:	4a16      	ldr	r2, [pc, #88]	; (80058b8 <HAL_ADC_ConfigChannel+0x684>)
 8005860:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005862:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8005866:	4619      	mov	r1, r3
 8005868:	4610      	mov	r0, r2
 800586a:	f7fe fd9e 	bl	80043aa <LL_ADC_SetCommonPathInternalCh>
 800586e:	e012      	b.n	8005896 <HAL_ADC_ConfigChannel+0x662>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005874:	f043 0220 	orr.w	r2, r3, #32
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 800587c:	2301      	movs	r3, #1
 800587e:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8005882:	e008      	b.n	8005896 <HAL_ADC_ConfigChannel+0x662>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005888:	f043 0220 	orr.w	r2, r3, #32
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8005890:	2301      	movs	r3, #1
 8005892:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	2200      	movs	r2, #0
 800589a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 800589e:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 80058a2:	4618      	mov	r0, r3
 80058a4:	3784      	adds	r7, #132	; 0x84
 80058a6:	46bd      	mov	sp, r7
 80058a8:	bd90      	pop	{r4, r7, pc}
 80058aa:	bf00      	nop
 80058ac:	40022000 	.word	0x40022000
 80058b0:	40022100 	.word	0x40022100
 80058b4:	40022300 	.word	0x40022300
 80058b8:	58026300 	.word	0x58026300
 80058bc:	58026000 	.word	0x58026000
 80058c0:	cb840000 	.word	0xcb840000
 80058c4:	2000011c 	.word	0x2000011c
 80058c8:	053e2d63 	.word	0x053e2d63
 80058cc:	c7520000 	.word	0xc7520000
 80058d0:	cfb80000 	.word	0xcfb80000

080058d4 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80058d4:	b580      	push	{r7, lr}
 80058d6:	b084      	sub	sp, #16
 80058d8:	af00      	add	r7, sp, #0
 80058da:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	4618      	mov	r0, r3
 80058e2:	f7fe ff0b 	bl	80046fc <LL_ADC_IsEnabled>
 80058e6:	4603      	mov	r3, r0
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	d16e      	bne.n	80059ca <ADC_Enable+0xf6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	689a      	ldr	r2, [r3, #8]
 80058f2:	4b38      	ldr	r3, [pc, #224]	; (80059d4 <ADC_Enable+0x100>)
 80058f4:	4013      	ands	r3, r2
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d00d      	beq.n	8005916 <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80058fe:	f043 0210 	orr.w	r2, r3, #16
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800590a:	f043 0201 	orr.w	r2, r3, #1
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8005912:	2301      	movs	r3, #1
 8005914:	e05a      	b.n	80059cc <ADC_Enable+0xf8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	4618      	mov	r0, r3
 800591c:	f7fe fec6 	bl	80046ac <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8005920:	f7fe fcca 	bl	80042b8 <HAL_GetTick>
 8005924:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	4a2b      	ldr	r2, [pc, #172]	; (80059d8 <ADC_Enable+0x104>)
 800592c:	4293      	cmp	r3, r2
 800592e:	d004      	beq.n	800593a <ADC_Enable+0x66>
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	4a29      	ldr	r2, [pc, #164]	; (80059dc <ADC_Enable+0x108>)
 8005936:	4293      	cmp	r3, r2
 8005938:	d101      	bne.n	800593e <ADC_Enable+0x6a>
 800593a:	4b29      	ldr	r3, [pc, #164]	; (80059e0 <ADC_Enable+0x10c>)
 800593c:	e000      	b.n	8005940 <ADC_Enable+0x6c>
 800593e:	4b29      	ldr	r3, [pc, #164]	; (80059e4 <ADC_Enable+0x110>)
 8005940:	4618      	mov	r0, r3
 8005942:	f7fe fe49 	bl	80045d8 <LL_ADC_GetMultimode>
 8005946:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	4a23      	ldr	r2, [pc, #140]	; (80059dc <ADC_Enable+0x108>)
 800594e:	4293      	cmp	r3, r2
 8005950:	d002      	beq.n	8005958 <ADC_Enable+0x84>
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	e000      	b.n	800595a <ADC_Enable+0x86>
 8005958:	4b1f      	ldr	r3, [pc, #124]	; (80059d8 <ADC_Enable+0x104>)
 800595a:	687a      	ldr	r2, [r7, #4]
 800595c:	6812      	ldr	r2, [r2, #0]
 800595e:	4293      	cmp	r3, r2
 8005960:	d02c      	beq.n	80059bc <ADC_Enable+0xe8>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8005962:	68bb      	ldr	r3, [r7, #8]
 8005964:	2b00      	cmp	r3, #0
 8005966:	d130      	bne.n	80059ca <ADC_Enable+0xf6>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8005968:	e028      	b.n	80059bc <ADC_Enable+0xe8>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	4618      	mov	r0, r3
 8005970:	f7fe fec4 	bl	80046fc <LL_ADC_IsEnabled>
 8005974:	4603      	mov	r3, r0
 8005976:	2b00      	cmp	r3, #0
 8005978:	d104      	bne.n	8005984 <ADC_Enable+0xb0>
        {
          LL_ADC_Enable(hadc->Instance);
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	4618      	mov	r0, r3
 8005980:	f7fe fe94 	bl	80046ac <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8005984:	f7fe fc98 	bl	80042b8 <HAL_GetTick>
 8005988:	4602      	mov	r2, r0
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	1ad3      	subs	r3, r2, r3
 800598e:	2b02      	cmp	r3, #2
 8005990:	d914      	bls.n	80059bc <ADC_Enable+0xe8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	f003 0301 	and.w	r3, r3, #1
 800599c:	2b01      	cmp	r3, #1
 800599e:	d00d      	beq.n	80059bc <ADC_Enable+0xe8>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80059a4:	f043 0210 	orr.w	r2, r3, #16
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80059b0:	f043 0201 	orr.w	r2, r3, #1
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	659a      	str	r2, [r3, #88]	; 0x58

            return HAL_ERROR;
 80059b8:	2301      	movs	r3, #1
 80059ba:	e007      	b.n	80059cc <ADC_Enable+0xf8>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	f003 0301 	and.w	r3, r3, #1
 80059c6:	2b01      	cmp	r3, #1
 80059c8:	d1cf      	bne.n	800596a <ADC_Enable+0x96>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80059ca:	2300      	movs	r3, #0
}
 80059cc:	4618      	mov	r0, r3
 80059ce:	3710      	adds	r7, #16
 80059d0:	46bd      	mov	sp, r7
 80059d2:	bd80      	pop	{r7, pc}
 80059d4:	8000003f 	.word	0x8000003f
 80059d8:	40022000 	.word	0x40022000
 80059dc:	40022100 	.word	0x40022100
 80059e0:	40022300 	.word	0x40022300
 80059e4:	58026300 	.word	0x58026300

080059e8 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 80059e8:	b580      	push	{r7, lr}
 80059ea:	b084      	sub	sp, #16
 80059ec:	af00      	add	r7, sp, #0
 80059ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	4618      	mov	r0, r3
 80059f6:	f7fe fe94 	bl	8004722 <LL_ADC_IsDisableOngoing>
 80059fa:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	4618      	mov	r0, r3
 8005a02:	f7fe fe7b 	bl	80046fc <LL_ADC_IsEnabled>
 8005a06:	4603      	mov	r3, r0
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	d047      	beq.n	8005a9c <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d144      	bne.n	8005a9c <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	689b      	ldr	r3, [r3, #8]
 8005a18:	f003 030d 	and.w	r3, r3, #13
 8005a1c:	2b01      	cmp	r3, #1
 8005a1e:	d10c      	bne.n	8005a3a <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	4618      	mov	r0, r3
 8005a26:	f7fe fe55 	bl	80046d4 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	2203      	movs	r2, #3
 8005a30:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8005a32:	f7fe fc41 	bl	80042b8 <HAL_GetTick>
 8005a36:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8005a38:	e029      	b.n	8005a8e <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a3e:	f043 0210 	orr.w	r2, r3, #16
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	655a      	str	r2, [r3, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005a4a:	f043 0201 	orr.w	r2, r3, #1
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 8005a52:	2301      	movs	r3, #1
 8005a54:	e023      	b.n	8005a9e <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8005a56:	f7fe fc2f 	bl	80042b8 <HAL_GetTick>
 8005a5a:	4602      	mov	r2, r0
 8005a5c:	68bb      	ldr	r3, [r7, #8]
 8005a5e:	1ad3      	subs	r3, r2, r3
 8005a60:	2b02      	cmp	r3, #2
 8005a62:	d914      	bls.n	8005a8e <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	689b      	ldr	r3, [r3, #8]
 8005a6a:	f003 0301 	and.w	r3, r3, #1
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	d00d      	beq.n	8005a8e <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a76:	f043 0210 	orr.w	r2, r3, #16
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005a82:	f043 0201 	orr.w	r2, r3, #1
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8005a8a:	2301      	movs	r3, #1
 8005a8c:	e007      	b.n	8005a9e <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	689b      	ldr	r3, [r3, #8]
 8005a94:	f003 0301 	and.w	r3, r3, #1
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	d1dc      	bne.n	8005a56 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8005a9c:	2300      	movs	r3, #0
}
 8005a9e:	4618      	mov	r0, r3
 8005aa0:	3710      	adds	r7, #16
 8005aa2:	46bd      	mov	sp, r7
 8005aa4:	bd80      	pop	{r7, pc}
	...

08005aa8 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8005aa8:	b580      	push	{r7, lr}
 8005aaa:	b084      	sub	sp, #16
 8005aac:	af00      	add	r7, sp, #0
 8005aae:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	4a7a      	ldr	r2, [pc, #488]	; (8005ca0 <ADC_ConfigureBoostMode+0x1f8>)
 8005ab6:	4293      	cmp	r3, r2
 8005ab8:	d004      	beq.n	8005ac4 <ADC_ConfigureBoostMode+0x1c>
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	4a79      	ldr	r2, [pc, #484]	; (8005ca4 <ADC_ConfigureBoostMode+0x1fc>)
 8005ac0:	4293      	cmp	r3, r2
 8005ac2:	d109      	bne.n	8005ad8 <ADC_ConfigureBoostMode+0x30>
 8005ac4:	4b78      	ldr	r3, [pc, #480]	; (8005ca8 <ADC_ConfigureBoostMode+0x200>)
 8005ac6:	689b      	ldr	r3, [r3, #8]
 8005ac8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	bf14      	ite	ne
 8005ad0:	2301      	movne	r3, #1
 8005ad2:	2300      	moveq	r3, #0
 8005ad4:	b2db      	uxtb	r3, r3
 8005ad6:	e008      	b.n	8005aea <ADC_ConfigureBoostMode+0x42>
 8005ad8:	4b74      	ldr	r3, [pc, #464]	; (8005cac <ADC_ConfigureBoostMode+0x204>)
 8005ada:	689b      	ldr	r3, [r3, #8]
 8005adc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005ae0:	2b00      	cmp	r3, #0
 8005ae2:	bf14      	ite	ne
 8005ae4:	2301      	movne	r3, #1
 8005ae6:	2300      	moveq	r3, #0
 8005ae8:	b2db      	uxtb	r3, r3
 8005aea:	2b00      	cmp	r3, #0
 8005aec:	d01c      	beq.n	8005b28 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8005aee:	f005 f9d9 	bl	800aea4 <HAL_RCC_GetHCLKFreq>
 8005af2:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	685b      	ldr	r3, [r3, #4]
 8005af8:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005afc:	d010      	beq.n	8005b20 <ADC_ConfigureBoostMode+0x78>
 8005afe:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005b02:	d873      	bhi.n	8005bec <ADC_ConfigureBoostMode+0x144>
 8005b04:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005b08:	d002      	beq.n	8005b10 <ADC_ConfigureBoostMode+0x68>
 8005b0a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005b0e:	d16d      	bne.n	8005bec <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	685b      	ldr	r3, [r3, #4]
 8005b14:	0c1b      	lsrs	r3, r3, #16
 8005b16:	68fa      	ldr	r2, [r7, #12]
 8005b18:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b1c:	60fb      	str	r3, [r7, #12]
        break;
 8005b1e:	e068      	b.n	8005bf2 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	089b      	lsrs	r3, r3, #2
 8005b24:	60fb      	str	r3, [r7, #12]
        break;
 8005b26:	e064      	b.n	8005bf2 <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8005b28:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8005b2c:	f04f 0100 	mov.w	r1, #0
 8005b30:	f006 fc3a 	bl	800c3a8 <HAL_RCCEx_GetPeriphCLKFreq>
 8005b34:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	685b      	ldr	r3, [r3, #4]
 8005b3a:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8005b3e:	d051      	beq.n	8005be4 <ADC_ConfigureBoostMode+0x13c>
 8005b40:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8005b44:	d854      	bhi.n	8005bf0 <ADC_ConfigureBoostMode+0x148>
 8005b46:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8005b4a:	d047      	beq.n	8005bdc <ADC_ConfigureBoostMode+0x134>
 8005b4c:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8005b50:	d84e      	bhi.n	8005bf0 <ADC_ConfigureBoostMode+0x148>
 8005b52:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8005b56:	d03d      	beq.n	8005bd4 <ADC_ConfigureBoostMode+0x12c>
 8005b58:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8005b5c:	d848      	bhi.n	8005bf0 <ADC_ConfigureBoostMode+0x148>
 8005b5e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005b62:	d033      	beq.n	8005bcc <ADC_ConfigureBoostMode+0x124>
 8005b64:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005b68:	d842      	bhi.n	8005bf0 <ADC_ConfigureBoostMode+0x148>
 8005b6a:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8005b6e:	d029      	beq.n	8005bc4 <ADC_ConfigureBoostMode+0x11c>
 8005b70:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8005b74:	d83c      	bhi.n	8005bf0 <ADC_ConfigureBoostMode+0x148>
 8005b76:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8005b7a:	d01a      	beq.n	8005bb2 <ADC_ConfigureBoostMode+0x10a>
 8005b7c:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8005b80:	d836      	bhi.n	8005bf0 <ADC_ConfigureBoostMode+0x148>
 8005b82:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8005b86:	d014      	beq.n	8005bb2 <ADC_ConfigureBoostMode+0x10a>
 8005b88:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8005b8c:	d830      	bhi.n	8005bf0 <ADC_ConfigureBoostMode+0x148>
 8005b8e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005b92:	d00e      	beq.n	8005bb2 <ADC_ConfigureBoostMode+0x10a>
 8005b94:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005b98:	d82a      	bhi.n	8005bf0 <ADC_ConfigureBoostMode+0x148>
 8005b9a:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8005b9e:	d008      	beq.n	8005bb2 <ADC_ConfigureBoostMode+0x10a>
 8005ba0:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8005ba4:	d824      	bhi.n	8005bf0 <ADC_ConfigureBoostMode+0x148>
 8005ba6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005baa:	d002      	beq.n	8005bb2 <ADC_ConfigureBoostMode+0x10a>
 8005bac:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8005bb0:	d11e      	bne.n	8005bf0 <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	685b      	ldr	r3, [r3, #4]
 8005bb6:	0c9b      	lsrs	r3, r3, #18
 8005bb8:	005b      	lsls	r3, r3, #1
 8005bba:	68fa      	ldr	r2, [r7, #12]
 8005bbc:	fbb2 f3f3 	udiv	r3, r2, r3
 8005bc0:	60fb      	str	r3, [r7, #12]
        break;
 8005bc2:	e016      	b.n	8005bf2 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	091b      	lsrs	r3, r3, #4
 8005bc8:	60fb      	str	r3, [r7, #12]
        break;
 8005bca:	e012      	b.n	8005bf2 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	095b      	lsrs	r3, r3, #5
 8005bd0:	60fb      	str	r3, [r7, #12]
        break;
 8005bd2:	e00e      	b.n	8005bf2 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	099b      	lsrs	r3, r3, #6
 8005bd8:	60fb      	str	r3, [r7, #12]
        break;
 8005bda:	e00a      	b.n	8005bf2 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	09db      	lsrs	r3, r3, #7
 8005be0:	60fb      	str	r3, [r7, #12]
        break;
 8005be2:	e006      	b.n	8005bf2 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	0a1b      	lsrs	r3, r3, #8
 8005be8:	60fb      	str	r3, [r7, #12]
        break;
 8005bea:	e002      	b.n	8005bf2 <ADC_ConfigureBoostMode+0x14a>
        break;
 8005bec:	bf00      	nop
 8005bee:	e000      	b.n	8005bf2 <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 8005bf0:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 8005bf2:	f7fe fb91 	bl	8004318 <HAL_GetREVID>
 8005bf6:	4603      	mov	r3, r0
 8005bf8:	f241 0203 	movw	r2, #4099	; 0x1003
 8005bfc:	4293      	cmp	r3, r2
 8005bfe:	d815      	bhi.n	8005c2c <ADC_ConfigureBoostMode+0x184>
  {
    if (freq > 20000000UL)
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	4a2b      	ldr	r2, [pc, #172]	; (8005cb0 <ADC_ConfigureBoostMode+0x208>)
 8005c04:	4293      	cmp	r3, r2
 8005c06:	d908      	bls.n	8005c1a <ADC_ConfigureBoostMode+0x172>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	689a      	ldr	r2, [r3, #8]
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005c16:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8005c18:	e03e      	b.n	8005c98 <ADC_ConfigureBoostMode+0x1f0>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	689a      	ldr	r2, [r3, #8]
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005c28:	609a      	str	r2, [r3, #8]
}
 8005c2a:	e035      	b.n	8005c98 <ADC_ConfigureBoostMode+0x1f0>
    freq /= 2U; /* divider by 2 for Rev.V */
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	085b      	lsrs	r3, r3, #1
 8005c30:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	4a1f      	ldr	r2, [pc, #124]	; (8005cb4 <ADC_ConfigureBoostMode+0x20c>)
 8005c36:	4293      	cmp	r3, r2
 8005c38:	d808      	bhi.n	8005c4c <ADC_ConfigureBoostMode+0x1a4>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	689a      	ldr	r2, [r3, #8]
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8005c48:	609a      	str	r2, [r3, #8]
}
 8005c4a:	e025      	b.n	8005c98 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 12500000UL)
 8005c4c:	68fb      	ldr	r3, [r7, #12]
 8005c4e:	4a1a      	ldr	r2, [pc, #104]	; (8005cb8 <ADC_ConfigureBoostMode+0x210>)
 8005c50:	4293      	cmp	r3, r2
 8005c52:	d80a      	bhi.n	8005c6a <ADC_ConfigureBoostMode+0x1c2>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	689b      	ldr	r3, [r3, #8]
 8005c5a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005c66:	609a      	str	r2, [r3, #8]
}
 8005c68:	e016      	b.n	8005c98 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 25000000UL)
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	4a13      	ldr	r2, [pc, #76]	; (8005cbc <ADC_ConfigureBoostMode+0x214>)
 8005c6e:	4293      	cmp	r3, r2
 8005c70:	d80a      	bhi.n	8005c88 <ADC_ConfigureBoostMode+0x1e0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	689b      	ldr	r3, [r3, #8]
 8005c78:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005c84:	609a      	str	r2, [r3, #8]
}
 8005c86:	e007      	b.n	8005c98 <ADC_ConfigureBoostMode+0x1f0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	689a      	ldr	r2, [r3, #8]
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8005c96:	609a      	str	r2, [r3, #8]
}
 8005c98:	bf00      	nop
 8005c9a:	3710      	adds	r7, #16
 8005c9c:	46bd      	mov	sp, r7
 8005c9e:	bd80      	pop	{r7, pc}
 8005ca0:	40022000 	.word	0x40022000
 8005ca4:	40022100 	.word	0x40022100
 8005ca8:	40022300 	.word	0x40022300
 8005cac:	58026300 	.word	0x58026300
 8005cb0:	01312d00 	.word	0x01312d00
 8005cb4:	005f5e10 	.word	0x005f5e10
 8005cb8:	00bebc20 	.word	0x00bebc20
 8005cbc:	017d7840 	.word	0x017d7840

08005cc0 <LL_ADC_StartCalibration>:
{
 8005cc0:	b480      	push	{r7}
 8005cc2:	b085      	sub	sp, #20
 8005cc4:	af00      	add	r7, sp, #0
 8005cc6:	60f8      	str	r0, [r7, #12]
 8005cc8:	60b9      	str	r1, [r7, #8]
 8005cca:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	689a      	ldr	r2, [r3, #8]
 8005cd0:	4b09      	ldr	r3, [pc, #36]	; (8005cf8 <LL_ADC_StartCalibration+0x38>)
 8005cd2:	4013      	ands	r3, r2
 8005cd4:	68ba      	ldr	r2, [r7, #8]
 8005cd6:	f402 3180 	and.w	r1, r2, #65536	; 0x10000
 8005cda:	687a      	ldr	r2, [r7, #4]
 8005cdc:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8005ce0:	430a      	orrs	r2, r1
 8005ce2:	4313      	orrs	r3, r2
 8005ce4:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	609a      	str	r2, [r3, #8]
}
 8005cec:	bf00      	nop
 8005cee:	3714      	adds	r7, #20
 8005cf0:	46bd      	mov	sp, r7
 8005cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cf6:	4770      	bx	lr
 8005cf8:	3ffeffc0 	.word	0x3ffeffc0

08005cfc <LL_ADC_IsCalibrationOnGoing>:
{
 8005cfc:	b480      	push	{r7}
 8005cfe:	b083      	sub	sp, #12
 8005d00:	af00      	add	r7, sp, #0
 8005d02:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	689b      	ldr	r3, [r3, #8]
 8005d08:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005d0c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005d10:	d101      	bne.n	8005d16 <LL_ADC_IsCalibrationOnGoing+0x1a>
 8005d12:	2301      	movs	r3, #1
 8005d14:	e000      	b.n	8005d18 <LL_ADC_IsCalibrationOnGoing+0x1c>
 8005d16:	2300      	movs	r3, #0
}
 8005d18:	4618      	mov	r0, r3
 8005d1a:	370c      	adds	r7, #12
 8005d1c:	46bd      	mov	sp, r7
 8005d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d22:	4770      	bx	lr

08005d24 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t CalibrationMode, uint32_t SingleDiff)
{
 8005d24:	b580      	push	{r7, lr}
 8005d26:	b086      	sub	sp, #24
 8005d28:	af00      	add	r7, sp, #0
 8005d2a:	60f8      	str	r0, [r7, #12]
 8005d2c:	60b9      	str	r1, [r7, #8]
 8005d2e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8005d30:	2300      	movs	r3, #0
 8005d32:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005d3a:	2b01      	cmp	r3, #1
 8005d3c:	d101      	bne.n	8005d42 <HAL_ADCEx_Calibration_Start+0x1e>
 8005d3e:	2302      	movs	r3, #2
 8005d40:	e04c      	b.n	8005ddc <HAL_ADCEx_Calibration_Start+0xb8>
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	2201      	movs	r2, #1
 8005d46:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8005d4a:	68f8      	ldr	r0, [r7, #12]
 8005d4c:	f7ff fe4c 	bl	80059e8 <ADC_Disable>
 8005d50:	4603      	mov	r3, r0
 8005d52:	75fb      	strb	r3, [r7, #23]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8005d54:	7dfb      	ldrb	r3, [r7, #23]
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d135      	bne.n	8005dc6 <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005d5e:	4b21      	ldr	r3, [pc, #132]	; (8005de4 <HAL_ADCEx_Calibration_Start+0xc0>)
 8005d60:	4013      	ands	r3, r2
 8005d62:	f043 0202 	orr.w	r2, r3, #2
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	655a      	str	r2, [r3, #84]	; 0x54
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, CalibrationMode, SingleDiff);
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	687a      	ldr	r2, [r7, #4]
 8005d70:	68b9      	ldr	r1, [r7, #8]
 8005d72:	4618      	mov	r0, r3
 8005d74:	f7ff ffa4 	bl	8005cc0 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8005d78:	e014      	b.n	8005da4 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 8005d7a:	693b      	ldr	r3, [r7, #16]
 8005d7c:	3301      	adds	r3, #1
 8005d7e:	613b      	str	r3, [r7, #16]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8005d80:	693b      	ldr	r3, [r7, #16]
 8005d82:	4a19      	ldr	r2, [pc, #100]	; (8005de8 <HAL_ADCEx_Calibration_Start+0xc4>)
 8005d84:	4293      	cmp	r3, r2
 8005d86:	d30d      	bcc.n	8005da4 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005d8c:	f023 0312 	bic.w	r3, r3, #18
 8005d90:	f043 0210 	orr.w	r2, r3, #16
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	655a      	str	r2, [r3, #84]	; 0x54
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	2200      	movs	r2, #0
 8005d9c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_ERROR;
 8005da0:	2301      	movs	r3, #1
 8005da2:	e01b      	b.n	8005ddc <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	4618      	mov	r0, r3
 8005daa:	f7ff ffa7 	bl	8005cfc <LL_ADC_IsCalibrationOnGoing>
 8005dae:	4603      	mov	r3, r0
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	d1e2      	bne.n	8005d7a <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005db8:	f023 0303 	bic.w	r3, r3, #3
 8005dbc:	f043 0201 	orr.w	r2, r3, #1
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	655a      	str	r2, [r3, #84]	; 0x54
 8005dc4:	e005      	b.n	8005dd2 <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005dca:	f043 0210 	orr.w	r2, r3, #16
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	655a      	str	r2, [r3, #84]	; 0x54
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	2200      	movs	r2, #0
 8005dd6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8005dda:	7dfb      	ldrb	r3, [r7, #23]
}
 8005ddc:	4618      	mov	r0, r3
 8005dde:	3718      	adds	r7, #24
 8005de0:	46bd      	mov	sp, r7
 8005de2:	bd80      	pop	{r7, pc}
 8005de4:	ffffeefd 	.word	0xffffeefd
 8005de8:	25c3f800 	.word	0x25c3f800

08005dec <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8005dec:	b480      	push	{r7}
 8005dee:	b083      	sub	sp, #12
 8005df0:	af00      	add	r7, sp, #0
 8005df2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8005df4:	bf00      	nop
 8005df6:	370c      	adds	r7, #12
 8005df8:	46bd      	mov	sp, r7
 8005dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dfe:	4770      	bx	lr

08005e00 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8005e00:	b480      	push	{r7}
 8005e02:	b083      	sub	sp, #12
 8005e04:	af00      	add	r7, sp, #0
 8005e06:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8005e08:	bf00      	nop
 8005e0a:	370c      	adds	r7, #12
 8005e0c:	46bd      	mov	sp, r7
 8005e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e12:	4770      	bx	lr

08005e14 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8005e14:	b480      	push	{r7}
 8005e16:	b083      	sub	sp, #12
 8005e18:	af00      	add	r7, sp, #0
 8005e1a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8005e1c:	bf00      	nop
 8005e1e:	370c      	adds	r7, #12
 8005e20:	46bd      	mov	sp, r7
 8005e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e26:	4770      	bx	lr

08005e28 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8005e28:	b480      	push	{r7}
 8005e2a:	b083      	sub	sp, #12
 8005e2c:	af00      	add	r7, sp, #0
 8005e2e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8005e30:	bf00      	nop
 8005e32:	370c      	adds	r7, #12
 8005e34:	46bd      	mov	sp, r7
 8005e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e3a:	4770      	bx	lr

08005e3c <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8005e3c:	b480      	push	{r7}
 8005e3e:	b083      	sub	sp, #12
 8005e40:	af00      	add	r7, sp, #0
 8005e42:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8005e44:	bf00      	nop
 8005e46:	370c      	adds	r7, #12
 8005e48:	46bd      	mov	sp, r7
 8005e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e4e:	4770      	bx	lr

08005e50 <__NVIC_SetPriorityGrouping>:
{
 8005e50:	b480      	push	{r7}
 8005e52:	b085      	sub	sp, #20
 8005e54:	af00      	add	r7, sp, #0
 8005e56:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	f003 0307 	and.w	r3, r3, #7
 8005e5e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005e60:	4b0b      	ldr	r3, [pc, #44]	; (8005e90 <__NVIC_SetPriorityGrouping+0x40>)
 8005e62:	68db      	ldr	r3, [r3, #12]
 8005e64:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005e66:	68ba      	ldr	r2, [r7, #8]
 8005e68:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005e6c:	4013      	ands	r3, r2
 8005e6e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005e74:	68bb      	ldr	r3, [r7, #8]
 8005e76:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8005e78:	4b06      	ldr	r3, [pc, #24]	; (8005e94 <__NVIC_SetPriorityGrouping+0x44>)
 8005e7a:	4313      	orrs	r3, r2
 8005e7c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005e7e:	4a04      	ldr	r2, [pc, #16]	; (8005e90 <__NVIC_SetPriorityGrouping+0x40>)
 8005e80:	68bb      	ldr	r3, [r7, #8]
 8005e82:	60d3      	str	r3, [r2, #12]
}
 8005e84:	bf00      	nop
 8005e86:	3714      	adds	r7, #20
 8005e88:	46bd      	mov	sp, r7
 8005e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e8e:	4770      	bx	lr
 8005e90:	e000ed00 	.word	0xe000ed00
 8005e94:	05fa0000 	.word	0x05fa0000

08005e98 <__NVIC_GetPriorityGrouping>:
{
 8005e98:	b480      	push	{r7}
 8005e9a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005e9c:	4b04      	ldr	r3, [pc, #16]	; (8005eb0 <__NVIC_GetPriorityGrouping+0x18>)
 8005e9e:	68db      	ldr	r3, [r3, #12]
 8005ea0:	0a1b      	lsrs	r3, r3, #8
 8005ea2:	f003 0307 	and.w	r3, r3, #7
}
 8005ea6:	4618      	mov	r0, r3
 8005ea8:	46bd      	mov	sp, r7
 8005eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eae:	4770      	bx	lr
 8005eb0:	e000ed00 	.word	0xe000ed00

08005eb4 <__NVIC_EnableIRQ>:
{
 8005eb4:	b480      	push	{r7}
 8005eb6:	b083      	sub	sp, #12
 8005eb8:	af00      	add	r7, sp, #0
 8005eba:	4603      	mov	r3, r0
 8005ebc:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8005ebe:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	db0b      	blt.n	8005ede <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005ec6:	88fb      	ldrh	r3, [r7, #6]
 8005ec8:	f003 021f 	and.w	r2, r3, #31
 8005ecc:	4907      	ldr	r1, [pc, #28]	; (8005eec <__NVIC_EnableIRQ+0x38>)
 8005ece:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005ed2:	095b      	lsrs	r3, r3, #5
 8005ed4:	2001      	movs	r0, #1
 8005ed6:	fa00 f202 	lsl.w	r2, r0, r2
 8005eda:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8005ede:	bf00      	nop
 8005ee0:	370c      	adds	r7, #12
 8005ee2:	46bd      	mov	sp, r7
 8005ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ee8:	4770      	bx	lr
 8005eea:	bf00      	nop
 8005eec:	e000e100 	.word	0xe000e100

08005ef0 <__NVIC_SetPriority>:
{
 8005ef0:	b480      	push	{r7}
 8005ef2:	b083      	sub	sp, #12
 8005ef4:	af00      	add	r7, sp, #0
 8005ef6:	4603      	mov	r3, r0
 8005ef8:	6039      	str	r1, [r7, #0]
 8005efa:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8005efc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	db0a      	blt.n	8005f1a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005f04:	683b      	ldr	r3, [r7, #0]
 8005f06:	b2da      	uxtb	r2, r3
 8005f08:	490c      	ldr	r1, [pc, #48]	; (8005f3c <__NVIC_SetPriority+0x4c>)
 8005f0a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005f0e:	0112      	lsls	r2, r2, #4
 8005f10:	b2d2      	uxtb	r2, r2
 8005f12:	440b      	add	r3, r1
 8005f14:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8005f18:	e00a      	b.n	8005f30 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005f1a:	683b      	ldr	r3, [r7, #0]
 8005f1c:	b2da      	uxtb	r2, r3
 8005f1e:	4908      	ldr	r1, [pc, #32]	; (8005f40 <__NVIC_SetPriority+0x50>)
 8005f20:	88fb      	ldrh	r3, [r7, #6]
 8005f22:	f003 030f 	and.w	r3, r3, #15
 8005f26:	3b04      	subs	r3, #4
 8005f28:	0112      	lsls	r2, r2, #4
 8005f2a:	b2d2      	uxtb	r2, r2
 8005f2c:	440b      	add	r3, r1
 8005f2e:	761a      	strb	r2, [r3, #24]
}
 8005f30:	bf00      	nop
 8005f32:	370c      	adds	r7, #12
 8005f34:	46bd      	mov	sp, r7
 8005f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f3a:	4770      	bx	lr
 8005f3c:	e000e100 	.word	0xe000e100
 8005f40:	e000ed00 	.word	0xe000ed00

08005f44 <NVIC_EncodePriority>:
{
 8005f44:	b480      	push	{r7}
 8005f46:	b089      	sub	sp, #36	; 0x24
 8005f48:	af00      	add	r7, sp, #0
 8005f4a:	60f8      	str	r0, [r7, #12]
 8005f4c:	60b9      	str	r1, [r7, #8]
 8005f4e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	f003 0307 	and.w	r3, r3, #7
 8005f56:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005f58:	69fb      	ldr	r3, [r7, #28]
 8005f5a:	f1c3 0307 	rsb	r3, r3, #7
 8005f5e:	2b04      	cmp	r3, #4
 8005f60:	bf28      	it	cs
 8005f62:	2304      	movcs	r3, #4
 8005f64:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005f66:	69fb      	ldr	r3, [r7, #28]
 8005f68:	3304      	adds	r3, #4
 8005f6a:	2b06      	cmp	r3, #6
 8005f6c:	d902      	bls.n	8005f74 <NVIC_EncodePriority+0x30>
 8005f6e:	69fb      	ldr	r3, [r7, #28]
 8005f70:	3b03      	subs	r3, #3
 8005f72:	e000      	b.n	8005f76 <NVIC_EncodePriority+0x32>
 8005f74:	2300      	movs	r3, #0
 8005f76:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005f78:	f04f 32ff 	mov.w	r2, #4294967295
 8005f7c:	69bb      	ldr	r3, [r7, #24]
 8005f7e:	fa02 f303 	lsl.w	r3, r2, r3
 8005f82:	43da      	mvns	r2, r3
 8005f84:	68bb      	ldr	r3, [r7, #8]
 8005f86:	401a      	ands	r2, r3
 8005f88:	697b      	ldr	r3, [r7, #20]
 8005f8a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005f8c:	f04f 31ff 	mov.w	r1, #4294967295
 8005f90:	697b      	ldr	r3, [r7, #20]
 8005f92:	fa01 f303 	lsl.w	r3, r1, r3
 8005f96:	43d9      	mvns	r1, r3
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005f9c:	4313      	orrs	r3, r2
}
 8005f9e:	4618      	mov	r0, r3
 8005fa0:	3724      	adds	r7, #36	; 0x24
 8005fa2:	46bd      	mov	sp, r7
 8005fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fa8:	4770      	bx	lr
	...

08005fac <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005fac:	b580      	push	{r7, lr}
 8005fae:	b082      	sub	sp, #8
 8005fb0:	af00      	add	r7, sp, #0
 8005fb2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	3b01      	subs	r3, #1
 8005fb8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005fbc:	d301      	bcc.n	8005fc2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005fbe:	2301      	movs	r3, #1
 8005fc0:	e00f      	b.n	8005fe2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005fc2:	4a0a      	ldr	r2, [pc, #40]	; (8005fec <SysTick_Config+0x40>)
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	3b01      	subs	r3, #1
 8005fc8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005fca:	210f      	movs	r1, #15
 8005fcc:	f04f 30ff 	mov.w	r0, #4294967295
 8005fd0:	f7ff ff8e 	bl	8005ef0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005fd4:	4b05      	ldr	r3, [pc, #20]	; (8005fec <SysTick_Config+0x40>)
 8005fd6:	2200      	movs	r2, #0
 8005fd8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005fda:	4b04      	ldr	r3, [pc, #16]	; (8005fec <SysTick_Config+0x40>)
 8005fdc:	2207      	movs	r2, #7
 8005fde:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005fe0:	2300      	movs	r3, #0
}
 8005fe2:	4618      	mov	r0, r3
 8005fe4:	3708      	adds	r7, #8
 8005fe6:	46bd      	mov	sp, r7
 8005fe8:	bd80      	pop	{r7, pc}
 8005fea:	bf00      	nop
 8005fec:	e000e010 	.word	0xe000e010

08005ff0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005ff0:	b580      	push	{r7, lr}
 8005ff2:	b082      	sub	sp, #8
 8005ff4:	af00      	add	r7, sp, #0
 8005ff6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005ff8:	6878      	ldr	r0, [r7, #4]
 8005ffa:	f7ff ff29 	bl	8005e50 <__NVIC_SetPriorityGrouping>
}
 8005ffe:	bf00      	nop
 8006000:	3708      	adds	r7, #8
 8006002:	46bd      	mov	sp, r7
 8006004:	bd80      	pop	{r7, pc}

08006006 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006006:	b580      	push	{r7, lr}
 8006008:	b086      	sub	sp, #24
 800600a:	af00      	add	r7, sp, #0
 800600c:	4603      	mov	r3, r0
 800600e:	60b9      	str	r1, [r7, #8]
 8006010:	607a      	str	r2, [r7, #4]
 8006012:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8006014:	f7ff ff40 	bl	8005e98 <__NVIC_GetPriorityGrouping>
 8006018:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800601a:	687a      	ldr	r2, [r7, #4]
 800601c:	68b9      	ldr	r1, [r7, #8]
 800601e:	6978      	ldr	r0, [r7, #20]
 8006020:	f7ff ff90 	bl	8005f44 <NVIC_EncodePriority>
 8006024:	4602      	mov	r2, r0
 8006026:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800602a:	4611      	mov	r1, r2
 800602c:	4618      	mov	r0, r3
 800602e:	f7ff ff5f 	bl	8005ef0 <__NVIC_SetPriority>
}
 8006032:	bf00      	nop
 8006034:	3718      	adds	r7, #24
 8006036:	46bd      	mov	sp, r7
 8006038:	bd80      	pop	{r7, pc}

0800603a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800603a:	b580      	push	{r7, lr}
 800603c:	b082      	sub	sp, #8
 800603e:	af00      	add	r7, sp, #0
 8006040:	4603      	mov	r3, r0
 8006042:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8006044:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8006048:	4618      	mov	r0, r3
 800604a:	f7ff ff33 	bl	8005eb4 <__NVIC_EnableIRQ>
}
 800604e:	bf00      	nop
 8006050:	3708      	adds	r7, #8
 8006052:	46bd      	mov	sp, r7
 8006054:	bd80      	pop	{r7, pc}

08006056 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8006056:	b580      	push	{r7, lr}
 8006058:	b082      	sub	sp, #8
 800605a:	af00      	add	r7, sp, #0
 800605c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800605e:	6878      	ldr	r0, [r7, #4]
 8006060:	f7ff ffa4 	bl	8005fac <SysTick_Config>
 8006064:	4603      	mov	r3, r0
}
 8006066:	4618      	mov	r0, r3
 8006068:	3708      	adds	r7, #8
 800606a:	46bd      	mov	sp, r7
 800606c:	bd80      	pop	{r7, pc}
	...

08006070 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8006070:	b480      	push	{r7}
 8006072:	af00      	add	r7, sp, #0
  __ASM volatile ("dmb 0xF":::"memory");
 8006074:	f3bf 8f5f 	dmb	sy
}
 8006078:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 800607a:	4b07      	ldr	r3, [pc, #28]	; (8006098 <HAL_MPU_Disable+0x28>)
 800607c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800607e:	4a06      	ldr	r2, [pc, #24]	; (8006098 <HAL_MPU_Disable+0x28>)
 8006080:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006084:	6253      	str	r3, [r2, #36]	; 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8006086:	4b05      	ldr	r3, [pc, #20]	; (800609c <HAL_MPU_Disable+0x2c>)
 8006088:	2200      	movs	r2, #0
 800608a:	605a      	str	r2, [r3, #4]
}
 800608c:	bf00      	nop
 800608e:	46bd      	mov	sp, r7
 8006090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006094:	4770      	bx	lr
 8006096:	bf00      	nop
 8006098:	e000ed00 	.word	0xe000ed00
 800609c:	e000ed90 	.word	0xe000ed90

080060a0 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 80060a0:	b480      	push	{r7}
 80060a2:	b083      	sub	sp, #12
 80060a4:	af00      	add	r7, sp, #0
 80060a6:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 80060a8:	4a0b      	ldr	r2, [pc, #44]	; (80060d8 <HAL_MPU_Enable+0x38>)
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	f043 0301 	orr.w	r3, r3, #1
 80060b0:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 80060b2:	4b0a      	ldr	r3, [pc, #40]	; (80060dc <HAL_MPU_Enable+0x3c>)
 80060b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060b6:	4a09      	ldr	r2, [pc, #36]	; (80060dc <HAL_MPU_Enable+0x3c>)
 80060b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80060bc:	6253      	str	r3, [r2, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 80060be:	f3bf 8f4f 	dsb	sy
}
 80060c2:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80060c4:	f3bf 8f6f 	isb	sy
}
 80060c8:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 80060ca:	bf00      	nop
 80060cc:	370c      	adds	r7, #12
 80060ce:	46bd      	mov	sp, r7
 80060d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060d4:	4770      	bx	lr
 80060d6:	bf00      	nop
 80060d8:	e000ed90 	.word	0xe000ed90
 80060dc:	e000ed00 	.word	0xe000ed00

080060e0 <HAL_MPU_ConfigRegion>:
  * @param  MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                  the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 80060e0:	b480      	push	{r7}
 80060e2:	b083      	sub	sp, #12
 80060e4:	af00      	add	r7, sp, #0
 80060e6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	785a      	ldrb	r2, [r3, #1]
 80060ec:	4b1d      	ldr	r3, [pc, #116]	; (8006164 <HAL_MPU_ConfigRegion+0x84>)
 80060ee:	609a      	str	r2, [r3, #8]

  if ((MPU_Init->Enable) != 0UL)
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	781b      	ldrb	r3, [r3, #0]
 80060f4:	2b00      	cmp	r3, #0
 80060f6:	d029      	beq.n	800614c <HAL_MPU_ConfigRegion+0x6c>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

    MPU->RBAR = MPU_Init->BaseAddress;
 80060f8:	4a1a      	ldr	r2, [pc, #104]	; (8006164 <HAL_MPU_ConfigRegion+0x84>)
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	685b      	ldr	r3, [r3, #4]
 80060fe:	60d3      	str	r3, [r2, #12]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	7b1b      	ldrb	r3, [r3, #12]
 8006104:	071a      	lsls	r2, r3, #28
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	7adb      	ldrb	r3, [r3, #11]
 800610a:	061b      	lsls	r3, r3, #24
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800610c:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	7a9b      	ldrb	r3, [r3, #10]
 8006112:	04db      	lsls	r3, r3, #19
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8006114:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	7b5b      	ldrb	r3, [r3, #13]
 800611a:	049b      	lsls	r3, r3, #18
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 800611c:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	7b9b      	ldrb	r3, [r3, #14]
 8006122:	045b      	lsls	r3, r3, #17
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8006124:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	7bdb      	ldrb	r3, [r3, #15]
 800612a:	041b      	lsls	r3, r3, #16
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 800612c:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	7a5b      	ldrb	r3, [r3, #9]
 8006132:	021b      	lsls	r3, r3, #8
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8006134:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	7a1b      	ldrb	r3, [r3, #8]
 800613a:	005b      	lsls	r3, r3, #1
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 800613c:	4313      	orrs	r3, r2
                ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 800613e:	687a      	ldr	r2, [r7, #4]
 8006140:	7812      	ldrb	r2, [r2, #0]
 8006142:	4611      	mov	r1, r2
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8006144:	4a07      	ldr	r2, [pc, #28]	; (8006164 <HAL_MPU_ConfigRegion+0x84>)
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8006146:	430b      	orrs	r3, r1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8006148:	6113      	str	r3, [r2, #16]
  else
  {
    MPU->RBAR = 0x00;
    MPU->RASR = 0x00;
  }
}
 800614a:	e005      	b.n	8006158 <HAL_MPU_ConfigRegion+0x78>
    MPU->RBAR = 0x00;
 800614c:	4b05      	ldr	r3, [pc, #20]	; (8006164 <HAL_MPU_ConfigRegion+0x84>)
 800614e:	2200      	movs	r2, #0
 8006150:	60da      	str	r2, [r3, #12]
    MPU->RASR = 0x00;
 8006152:	4b04      	ldr	r3, [pc, #16]	; (8006164 <HAL_MPU_ConfigRegion+0x84>)
 8006154:	2200      	movs	r2, #0
 8006156:	611a      	str	r2, [r3, #16]
}
 8006158:	bf00      	nop
 800615a:	370c      	adds	r7, #12
 800615c:	46bd      	mov	sp, r7
 800615e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006162:	4770      	bx	lr
 8006164:	e000ed90 	.word	0xe000ed90

08006168 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8006168:	b580      	push	{r7, lr}
 800616a:	b082      	sub	sp, #8
 800616c:	af00      	add	r7, sp, #0
 800616e:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	2b00      	cmp	r3, #0
 8006174:	d101      	bne.n	800617a <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8006176:	2301      	movs	r3, #1
 8006178:	e014      	b.n	80061a4 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	791b      	ldrb	r3, [r3, #4]
 800617e:	b2db      	uxtb	r3, r3
 8006180:	2b00      	cmp	r3, #0
 8006182:	d105      	bne.n	8006190 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	2200      	movs	r2, #0
 8006188:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 800618a:	6878      	ldr	r0, [r7, #4]
 800618c:	f7fd fa08 	bl	80035a0 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	2202      	movs	r2, #2
 8006194:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	2200      	movs	r2, #0
 800619a:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	2201      	movs	r2, #1
 80061a0:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 80061a2:	2300      	movs	r3, #0
}
 80061a4:	4618      	mov	r0, r3
 80061a6:	3708      	adds	r7, #8
 80061a8:	46bd      	mov	sp, r7
 80061aa:	bd80      	pop	{r7, pc}

080061ac <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 80061ac:	b480      	push	{r7}
 80061ae:	b083      	sub	sp, #12
 80061b0:	af00      	add	r7, sp, #0
 80061b2:	6078      	str	r0, [r7, #4]
 80061b4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	795b      	ldrb	r3, [r3, #5]
 80061ba:	2b01      	cmp	r3, #1
 80061bc:	d101      	bne.n	80061c2 <HAL_DAC_Start+0x16>
 80061be:	2302      	movs	r3, #2
 80061c0:	e040      	b.n	8006244 <HAL_DAC_Start+0x98>
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	2201      	movs	r2, #1
 80061c6:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	2202      	movs	r2, #2
 80061cc:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	6819      	ldr	r1, [r3, #0]
 80061d4:	683b      	ldr	r3, [r7, #0]
 80061d6:	f003 0310 	and.w	r3, r3, #16
 80061da:	2201      	movs	r2, #1
 80061dc:	409a      	lsls	r2, r3
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	430a      	orrs	r2, r1
 80061e4:	601a      	str	r2, [r3, #0]

  if (Channel == DAC_CHANNEL_1)
 80061e6:	683b      	ldr	r3, [r7, #0]
 80061e8:	2b00      	cmp	r3, #0
 80061ea:	d10f      	bne.n	800620c <HAL_DAC_Start+0x60>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 80061f6:	2b02      	cmp	r3, #2
 80061f8:	d11d      	bne.n	8006236 <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	685a      	ldr	r2, [r3, #4]
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	f042 0201 	orr.w	r2, r2, #1
 8006208:	605a      	str	r2, [r3, #4]
 800620a:	e014      	b.n	8006236 <HAL_DAC_Start+0x8a>
  }

  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 8006216:	683b      	ldr	r3, [r7, #0]
 8006218:	f003 0310 	and.w	r3, r3, #16
 800621c:	2102      	movs	r1, #2
 800621e:	fa01 f303 	lsl.w	r3, r1, r3
 8006222:	429a      	cmp	r2, r3
 8006224:	d107      	bne.n	8006236 <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	685a      	ldr	r2, [r3, #4]
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	f042 0202 	orr.w	r2, r2, #2
 8006234:	605a      	str	r2, [r3, #4]
    }
  }


  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	2201      	movs	r2, #1
 800623a:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	2200      	movs	r2, #0
 8006240:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8006242:	2300      	movs	r3, #0
}
 8006244:	4618      	mov	r0, r3
 8006246:	370c      	adds	r7, #12
 8006248:	46bd      	mov	sp, r7
 800624a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800624e:	4770      	bx	lr

08006250 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 8006250:	b480      	push	{r7}
 8006252:	b087      	sub	sp, #28
 8006254:	af00      	add	r7, sp, #0
 8006256:	60f8      	str	r0, [r7, #12]
 8006258:	60b9      	str	r1, [r7, #8]
 800625a:	607a      	str	r2, [r7, #4]
 800625c:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0UL;
 800625e:	2300      	movs	r3, #0
 8006260:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 8006268:	68bb      	ldr	r3, [r7, #8]
 800626a:	2b00      	cmp	r3, #0
 800626c:	d105      	bne.n	800627a <HAL_DAC_SetValue+0x2a>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 800626e:	697a      	ldr	r2, [r7, #20]
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	4413      	add	r3, r2
 8006274:	3308      	adds	r3, #8
 8006276:	617b      	str	r3, [r7, #20]
 8006278:	e004      	b.n	8006284 <HAL_DAC_SetValue+0x34>
  }

  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 800627a:	697a      	ldr	r2, [r7, #20]
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	4413      	add	r3, r2
 8006280:	3314      	adds	r3, #20
 8006282:	617b      	str	r3, [r7, #20]
  }


  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8006284:	697b      	ldr	r3, [r7, #20]
 8006286:	461a      	mov	r2, r3
 8006288:	683b      	ldr	r3, [r7, #0]
 800628a:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 800628c:	2300      	movs	r3, #0
}
 800628e:	4618      	mov	r0, r3
 8006290:	371c      	adds	r7, #28
 8006292:	46bd      	mov	sp, r7
 8006294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006298:	4770      	bx	lr
	...

0800629c <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 800629c:	b580      	push	{r7, lr}
 800629e:	b088      	sub	sp, #32
 80062a0:	af00      	add	r7, sp, #0
 80062a2:	60f8      	str	r0, [r7, #12]
 80062a4:	60b9      	str	r1, [r7, #8]
 80062a6:	607a      	str	r2, [r7, #4]
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	795b      	ldrb	r3, [r3, #5]
 80062ac:	2b01      	cmp	r3, #1
 80062ae:	d101      	bne.n	80062b4 <HAL_DAC_ConfigChannel+0x18>
 80062b0:	2302      	movs	r3, #2
 80062b2:	e12a      	b.n	800650a <HAL_DAC_ConfigChannel+0x26e>
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	2201      	movs	r2, #1
 80062b8:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	2202      	movs	r2, #2
 80062be:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 80062c0:	68bb      	ldr	r3, [r7, #8]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	2b04      	cmp	r3, #4
 80062c6:	f040 8081 	bne.w	80063cc <HAL_DAC_ConfigChannel+0x130>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 80062ca:	f7fd fff5 	bl	80042b8 <HAL_GetTick>
 80062ce:	61b8      	str	r0, [r7, #24]

    if (Channel == DAC_CHANNEL_1)
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	d140      	bne.n	8006358 <HAL_DAC_ConfigChannel+0xbc>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80062d6:	e018      	b.n	800630a <HAL_DAC_ConfigChannel+0x6e>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 80062d8:	f7fd ffee 	bl	80042b8 <HAL_GetTick>
 80062dc:	4602      	mov	r2, r0
 80062de:	69bb      	ldr	r3, [r7, #24]
 80062e0:	1ad3      	subs	r3, r2, r3
 80062e2:	2b01      	cmp	r3, #1
 80062e4:	d911      	bls.n	800630a <HAL_DAC_ConfigChannel+0x6e>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80062ec:	4b89      	ldr	r3, [pc, #548]	; (8006514 <HAL_DAC_ConfigChannel+0x278>)
 80062ee:	4013      	ands	r3, r2
 80062f0:	2b00      	cmp	r3, #0
 80062f2:	d00a      	beq.n	800630a <HAL_DAC_ConfigChannel+0x6e>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	691b      	ldr	r3, [r3, #16]
 80062f8:	f043 0208 	orr.w	r2, r3, #8
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	2203      	movs	r2, #3
 8006304:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8006306:	2303      	movs	r3, #3
 8006308:	e0ff      	b.n	800650a <HAL_DAC_ConfigChannel+0x26e>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006310:	4b80      	ldr	r3, [pc, #512]	; (8006514 <HAL_DAC_ConfigChannel+0x278>)
 8006312:	4013      	ands	r3, r2
 8006314:	2b00      	cmp	r3, #0
 8006316:	d1df      	bne.n	80062d8 <HAL_DAC_ConfigChannel+0x3c>
          }
        }
      }
      HAL_Delay(1);
 8006318:	2001      	movs	r0, #1
 800631a:	f7fd ffd9 	bl	80042d0 <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	68ba      	ldr	r2, [r7, #8]
 8006324:	6992      	ldr	r2, [r2, #24]
 8006326:	641a      	str	r2, [r3, #64]	; 0x40
 8006328:	e023      	b.n	8006372 <HAL_DAC_ConfigChannel+0xd6>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 800632a:	f7fd ffc5 	bl	80042b8 <HAL_GetTick>
 800632e:	4602      	mov	r2, r0
 8006330:	69bb      	ldr	r3, [r7, #24]
 8006332:	1ad3      	subs	r3, r2, r3
 8006334:	2b01      	cmp	r3, #1
 8006336:	d90f      	bls.n	8006358 <HAL_DAC_ConfigChannel+0xbc>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800633e:	2b00      	cmp	r3, #0
 8006340:	da0a      	bge.n	8006358 <HAL_DAC_ConfigChannel+0xbc>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	691b      	ldr	r3, [r3, #16]
 8006346:	f043 0208 	orr.w	r2, r3, #8
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	2203      	movs	r2, #3
 8006352:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8006354:	2303      	movs	r3, #3
 8006356:	e0d8      	b.n	800650a <HAL_DAC_ConfigChannel+0x26e>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800635e:	2b00      	cmp	r3, #0
 8006360:	dbe3      	blt.n	800632a <HAL_DAC_ConfigChannel+0x8e>
          }
        }
      }
      HAL_Delay(1U);
 8006362:	2001      	movs	r0, #1
 8006364:	f7fd ffb4 	bl	80042d0 <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	68ba      	ldr	r2, [r7, #8]
 800636e:	6992      	ldr	r2, [r2, #24]
 8006370:	645a      	str	r2, [r3, #68]	; 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	f003 0310 	and.w	r3, r3, #16
 800637e:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8006382:	fa01 f303 	lsl.w	r3, r1, r3
 8006386:	43db      	mvns	r3, r3
 8006388:	ea02 0103 	and.w	r1, r2, r3
 800638c:	68bb      	ldr	r3, [r7, #8]
 800638e:	69da      	ldr	r2, [r3, #28]
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	f003 0310 	and.w	r3, r3, #16
 8006396:	409a      	lsls	r2, r3
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	430a      	orrs	r2, r1
 800639e:	649a      	str	r2, [r3, #72]	; 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	f003 0310 	and.w	r3, r3, #16
 80063ac:	21ff      	movs	r1, #255	; 0xff
 80063ae:	fa01 f303 	lsl.w	r3, r1, r3
 80063b2:	43db      	mvns	r3, r3
 80063b4:	ea02 0103 	and.w	r1, r2, r3
 80063b8:	68bb      	ldr	r3, [r7, #8]
 80063ba:	6a1a      	ldr	r2, [r3, #32]
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	f003 0310 	and.w	r3, r3, #16
 80063c2:	409a      	lsls	r2, r3
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	430a      	orrs	r2, r1
 80063ca:	64da      	str	r2, [r3, #76]	; 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 80063cc:	68bb      	ldr	r3, [r7, #8]
 80063ce:	691b      	ldr	r3, [r3, #16]
 80063d0:	2b01      	cmp	r3, #1
 80063d2:	d11d      	bne.n	8006410 <HAL_DAC_ConfigChannel+0x174>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063da:	617b      	str	r3, [r7, #20]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	f003 0310 	and.w	r3, r3, #16
 80063e2:	221f      	movs	r2, #31
 80063e4:	fa02 f303 	lsl.w	r3, r2, r3
 80063e8:	43db      	mvns	r3, r3
 80063ea:	697a      	ldr	r2, [r7, #20]
 80063ec:	4013      	ands	r3, r2
 80063ee:	617b      	str	r3, [r7, #20]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 80063f0:	68bb      	ldr	r3, [r7, #8]
 80063f2:	695b      	ldr	r3, [r3, #20]
 80063f4:	613b      	str	r3, [r7, #16]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	f003 0310 	and.w	r3, r3, #16
 80063fc:	693a      	ldr	r2, [r7, #16]
 80063fe:	fa02 f303 	lsl.w	r3, r2, r3
 8006402:	697a      	ldr	r2, [r7, #20]
 8006404:	4313      	orrs	r3, r2
 8006406:	617b      	str	r3, [r7, #20]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	697a      	ldr	r2, [r7, #20]
 800640e:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006416:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	f003 0310 	and.w	r3, r3, #16
 800641e:	2207      	movs	r2, #7
 8006420:	fa02 f303 	lsl.w	r3, r2, r3
 8006424:	43db      	mvns	r3, r3
 8006426:	697a      	ldr	r2, [r7, #20]
 8006428:	4013      	ands	r3, r2
 800642a:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 800642c:	68bb      	ldr	r3, [r7, #8]
 800642e:	68db      	ldr	r3, [r3, #12]
 8006430:	2b01      	cmp	r3, #1
 8006432:	d102      	bne.n	800643a <HAL_DAC_ConfigChannel+0x19e>
  {
    connectOnChip = 0x00000000UL;
 8006434:	2300      	movs	r3, #0
 8006436:	61fb      	str	r3, [r7, #28]
 8006438:	e00f      	b.n	800645a <HAL_DAC_ConfigChannel+0x1be>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 800643a:	68bb      	ldr	r3, [r7, #8]
 800643c:	68db      	ldr	r3, [r3, #12]
 800643e:	2b02      	cmp	r3, #2
 8006440:	d102      	bne.n	8006448 <HAL_DAC_ConfigChannel+0x1ac>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 8006442:	2301      	movs	r3, #1
 8006444:	61fb      	str	r3, [r7, #28]
 8006446:	e008      	b.n	800645a <HAL_DAC_ConfigChannel+0x1be>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 8006448:	68bb      	ldr	r3, [r7, #8]
 800644a:	689b      	ldr	r3, [r3, #8]
 800644c:	2b00      	cmp	r3, #0
 800644e:	d102      	bne.n	8006456 <HAL_DAC_ConfigChannel+0x1ba>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 8006450:	2301      	movs	r3, #1
 8006452:	61fb      	str	r3, [r7, #28]
 8006454:	e001      	b.n	800645a <HAL_DAC_ConfigChannel+0x1be>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 8006456:	2300      	movs	r3, #0
 8006458:	61fb      	str	r3, [r7, #28]
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 800645a:	68bb      	ldr	r3, [r7, #8]
 800645c:	681a      	ldr	r2, [r3, #0]
 800645e:	68bb      	ldr	r3, [r7, #8]
 8006460:	689b      	ldr	r3, [r3, #8]
 8006462:	4313      	orrs	r3, r2
 8006464:	69fa      	ldr	r2, [r7, #28]
 8006466:	4313      	orrs	r3, r2
 8006468:	613b      	str	r3, [r7, #16]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	f003 0310 	and.w	r3, r3, #16
 8006470:	693a      	ldr	r2, [r7, #16]
 8006472:	fa02 f303 	lsl.w	r3, r2, r3
 8006476:	697a      	ldr	r2, [r7, #20]
 8006478:	4313      	orrs	r3, r2
 800647a:	617b      	str	r3, [r7, #20]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	697a      	ldr	r2, [r7, #20]
 8006482:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	6819      	ldr	r1, [r3, #0]
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	f003 0310 	and.w	r3, r3, #16
 8006490:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8006494:	fa02 f303 	lsl.w	r3, r2, r3
 8006498:	43da      	mvns	r2, r3
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	400a      	ands	r2, r1
 80064a0:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	617b      	str	r3, [r7, #20]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	f003 0310 	and.w	r3, r3, #16
 80064b0:	f640 72fe 	movw	r2, #4094	; 0xffe
 80064b4:	fa02 f303 	lsl.w	r3, r2, r3
 80064b8:	43db      	mvns	r3, r3
 80064ba:	697a      	ldr	r2, [r7, #20]
 80064bc:	4013      	ands	r3, r2
 80064be:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 80064c0:	68bb      	ldr	r3, [r7, #8]
 80064c2:	685b      	ldr	r3, [r3, #4]
 80064c4:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	f003 0310 	and.w	r3, r3, #16
 80064cc:	693a      	ldr	r2, [r7, #16]
 80064ce:	fa02 f303 	lsl.w	r3, r2, r3
 80064d2:	697a      	ldr	r2, [r7, #20]
 80064d4:	4313      	orrs	r3, r2
 80064d6:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	697a      	ldr	r2, [r7, #20]
 80064de:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	6819      	ldr	r1, [r3, #0]
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	f003 0310 	and.w	r3, r3, #16
 80064ec:	22c0      	movs	r2, #192	; 0xc0
 80064ee:	fa02 f303 	lsl.w	r3, r2, r3
 80064f2:	43da      	mvns	r2, r3
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	400a      	ands	r2, r1
 80064fa:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	2201      	movs	r2, #1
 8006500:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	2200      	movs	r2, #0
 8006506:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8006508:	2300      	movs	r3, #0
}
 800650a:	4618      	mov	r0, r3
 800650c:	3720      	adds	r7, #32
 800650e:	46bd      	mov	sp, r7
 8006510:	bd80      	pop	{r7, pc}
 8006512:	bf00      	nop
 8006514:	20008000 	.word	0x20008000

08006518 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8006518:	b580      	push	{r7, lr}
 800651a:	b084      	sub	sp, #16
 800651c:	af00      	add	r7, sp, #0
 800651e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	2b00      	cmp	r3, #0
 8006524:	d101      	bne.n	800652a <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8006526:	2301      	movs	r3, #1
 8006528:	e0cf      	b.n	80066ca <HAL_ETH_Init+0x1b2>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006530:	2b00      	cmp	r3, #0
 8006532:	d106      	bne.n	8006542 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	2223      	movs	r2, #35	; 0x23
 8006538:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 800653c:	6878      	ldr	r0, [r7, #4]
 800653e:	f009 f9d5 	bl	800f8ec <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006542:	4b64      	ldr	r3, [pc, #400]	; (80066d4 <HAL_ETH_Init+0x1bc>)
 8006544:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8006548:	4a62      	ldr	r2, [pc, #392]	; (80066d4 <HAL_ETH_Init+0x1bc>)
 800654a:	f043 0302 	orr.w	r3, r3, #2
 800654e:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8006552:	4b60      	ldr	r3, [pc, #384]	; (80066d4 <HAL_ETH_Init+0x1bc>)
 8006554:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8006558:	f003 0302 	and.w	r3, r3, #2
 800655c:	60bb      	str	r3, [r7, #8]
 800655e:	68bb      	ldr	r3, [r7, #8]

  if (heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	7a1b      	ldrb	r3, [r3, #8]
 8006564:	2b00      	cmp	r3, #0
 8006566:	d103      	bne.n	8006570 <HAL_ETH_Init+0x58>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 8006568:	2000      	movs	r0, #0
 800656a:	f7fd fee1 	bl	8004330 <HAL_SYSCFG_ETHInterfaceSelect>
 800656e:	e003      	b.n	8006578 <HAL_ETH_Init+0x60>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 8006570:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8006574:	f7fd fedc 	bl	8004330 <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Dummy read to sync with ETH */
  (void)SYSCFG->PMCR;
 8006578:	4b57      	ldr	r3, [pc, #348]	; (80066d8 <HAL_ETH_Init+0x1c0>)
 800657a:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	687a      	ldr	r2, [r7, #4]
 8006588:	6812      	ldr	r2, [r2, #0]
 800658a:	f043 0301 	orr.w	r3, r3, #1
 800658e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8006592:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006594:	f7fd fe90 	bl	80042b8 <HAL_GetTick>
 8006598:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 800659a:	e011      	b.n	80065c0 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 800659c:	f7fd fe8c 	bl	80042b8 <HAL_GetTick>
 80065a0:	4602      	mov	r2, r0
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	1ad3      	subs	r3, r2, r3
 80065a6:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80065aa:	d909      	bls.n	80065c0 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	2204      	movs	r2, #4
 80065b0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	22e0      	movs	r2, #224	; 0xe0
 80065b8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 80065bc:	2301      	movs	r3, #1
 80065be:	e084      	b.n	80066ca <HAL_ETH_Init+0x1b2>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	f003 0301 	and.w	r3, r3, #1
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	d1e4      	bne.n	800659c <HAL_ETH_Init+0x84>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  HAL_ETH_SetMDIOClockRange(heth);
 80065d2:	6878      	ldr	r0, [r7, #4]
 80065d4:	f000 fd94 	bl	8007100 <HAL_ETH_SetMDIOClockRange>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 80065d8:	f004 fc64 	bl	800aea4 <HAL_RCC_GetHCLKFreq>
 80065dc:	4603      	mov	r3, r0
 80065de:	4a3f      	ldr	r2, [pc, #252]	; (80066dc <HAL_ETH_Init+0x1c4>)
 80065e0:	fba2 2303 	umull	r2, r3, r2, r3
 80065e4:	0c9a      	lsrs	r2, r3, #18
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	3a01      	subs	r2, #1
 80065ec:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 80065f0:	6878      	ldr	r0, [r7, #4]
 80065f2:	f000 ff7f 	bl	80074f4 <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80065fe:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8006602:	f423 13e0 	bic.w	r3, r3, #1835008	; 0x1c0000
 8006606:	687a      	ldr	r2, [r7, #4]
 8006608:	6812      	ldr	r2, [r2, #0]
 800660a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800660e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8006612:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	695b      	ldr	r3, [r3, #20]
 800661a:	f003 0303 	and.w	r3, r3, #3
 800661e:	2b00      	cmp	r3, #0
 8006620:	d009      	beq.n	8006636 <HAL_ETH_Init+0x11e>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	2201      	movs	r2, #1
 8006626:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	22e0      	movs	r2, #224	; 0xe0
 800662e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    /* Return Error */
    return HAL_ERROR;
 8006632:	2301      	movs	r3, #1
 8006634:	e049      	b.n	80066ca <HAL_ETH_Init+0x1b2>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800663e:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 8006642:	4b27      	ldr	r3, [pc, #156]	; (80066e0 <HAL_ETH_Init+0x1c8>)
 8006644:	4013      	ands	r3, r2
 8006646:	687a      	ldr	r2, [r7, #4]
 8006648:	6952      	ldr	r2, [r2, #20]
 800664a:	0051      	lsls	r1, r2, #1
 800664c:	687a      	ldr	r2, [r7, #4]
 800664e:	6812      	ldr	r2, [r2, #0]
 8006650:	430b      	orrs	r3, r1
 8006652:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8006656:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 800665a:	6878      	ldr	r0, [r7, #4]
 800665c:	f000 ffe7 	bl	800762e <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8006660:	6878      	ldr	r0, [r7, #4]
 8006662:	f001 f82d 	bl	80076c0 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	685b      	ldr	r3, [r3, #4]
 800666a:	3305      	adds	r3, #5
 800666c:	781b      	ldrb	r3, [r3, #0]
 800666e:	021a      	lsls	r2, r3, #8
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	685b      	ldr	r3, [r3, #4]
 8006674:	3304      	adds	r3, #4
 8006676:	781b      	ldrb	r3, [r3, #0]
 8006678:	4619      	mov	r1, r3
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	430a      	orrs	r2, r1
 8006680:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	685b      	ldr	r3, [r3, #4]
 8006688:	3303      	adds	r3, #3
 800668a:	781b      	ldrb	r3, [r3, #0]
 800668c:	061a      	lsls	r2, r3, #24
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	685b      	ldr	r3, [r3, #4]
 8006692:	3302      	adds	r3, #2
 8006694:	781b      	ldrb	r3, [r3, #0]
 8006696:	041b      	lsls	r3, r3, #16
 8006698:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	685b      	ldr	r3, [r3, #4]
 800669e:	3301      	adds	r3, #1
 80066a0:	781b      	ldrb	r3, [r3, #0]
 80066a2:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80066a4:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	685b      	ldr	r3, [r3, #4]
 80066aa:	781b      	ldrb	r3, [r3, #0]
 80066ac:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 80066b2:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80066b4:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	2200      	movs	r2, #0
 80066bc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	2210      	movs	r2, #16
 80066c4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80066c8:	2300      	movs	r3, #0
}
 80066ca:	4618      	mov	r0, r3
 80066cc:	3710      	adds	r7, #16
 80066ce:	46bd      	mov	sp, r7
 80066d0:	bd80      	pop	{r7, pc}
 80066d2:	bf00      	nop
 80066d4:	58024400 	.word	0x58024400
 80066d8:	58000400 	.word	0x58000400
 80066dc:	431bde83 	.word	0x431bde83
 80066e0:	ffff8001 	.word	0xffff8001

080066e4 <HAL_ETH_Start>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start(ETH_HandleTypeDef *heth)
{
 80066e4:	b580      	push	{r7, lr}
 80066e6:	b082      	sub	sp, #8
 80066e8:	af00      	add	r7, sp, #0
 80066ea:	6078      	str	r0, [r7, #4]
  if (heth->gState == HAL_ETH_STATE_READY)
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80066f2:	2b10      	cmp	r3, #16
 80066f4:	d153      	bne.n	800679e <HAL_ETH_Start+0xba>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	2223      	movs	r2, #35	; 0x23
 80066fa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Set nombre of descriptors to build */
    heth->RxDescList.RxBuildDescCnt = ETH_RX_DESC_CNT;
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	2204      	movs	r2, #4
 8006702:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Build all descriptors */
    ETH_UpdateDescriptor(heth);
 8006704:	6878      	ldr	r0, [r7, #4]
 8006706:	f000 f9f6 	bl	8006af6 <ETH_UpdateDescriptor>

    /* Enable the MAC transmission */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	681a      	ldr	r2, [r3, #0]
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	f042 0202 	orr.w	r2, r2, #2
 8006718:	601a      	str	r2, [r3, #0]

    /* Enable the MAC reception */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	681a      	ldr	r2, [r3, #0]
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	f042 0201 	orr.w	r2, r2, #1
 8006728:	601a      	str	r2, [r3, #0]

    /* Set the Flush Transmit FIFO bit */
    SET_BIT(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_FTQ);
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	; 0xd00
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	f042 0201 	orr.w	r2, r2, #1
 800673a:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

    /* Enable the DMA transmission */
    SET_BIT(heth->Instance->DMACTCR, ETH_DMACTCR_ST);
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006746:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 800674a:	687a      	ldr	r2, [r7, #4]
 800674c:	6812      	ldr	r2, [r2, #0]
 800674e:	f043 0301 	orr.w	r3, r3, #1
 8006752:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8006756:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104

    /* Enable the DMA reception */
    SET_BIT(heth->Instance->DMACRCR, ETH_DMACRCR_SR);
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006762:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8006766:	687a      	ldr	r2, [r7, #4]
 8006768:	6812      	ldr	r2, [r2, #0]
 800676a:	f043 0301 	orr.w	r3, r3, #1
 800676e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8006772:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108

    /* Clear Tx and Rx process stopped flags */
    heth->Instance->DMACSR |= (ETH_DMACSR_TPS | ETH_DMACSR_RPS);
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800677e:	f8d3 3160 	ldr.w	r3, [r3, #352]	; 0x160
 8006782:	687a      	ldr	r2, [r7, #4]
 8006784:	6812      	ldr	r2, [r2, #0]
 8006786:	f443 7381 	orr.w	r3, r3, #258	; 0x102
 800678a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800678e:	f8c2 3160 	str.w	r3, [r2, #352]	; 0x160

    heth->gState = HAL_ETH_STATE_STARTED;
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	2223      	movs	r2, #35	; 0x23
 8006796:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 800679a:	2300      	movs	r3, #0
 800679c:	e000      	b.n	80067a0 <HAL_ETH_Start+0xbc>
  }
  else
  {
    return HAL_ERROR;
 800679e:	2301      	movs	r3, #1
  }
}
 80067a0:	4618      	mov	r0, r3
 80067a2:	3708      	adds	r7, #8
 80067a4:	46bd      	mov	sp, r7
 80067a6:	bd80      	pop	{r7, pc}

080067a8 <HAL_ETH_Stop>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop(ETH_HandleTypeDef *heth)
{
 80067a8:	b480      	push	{r7}
 80067aa:	b083      	sub	sp, #12
 80067ac:	af00      	add	r7, sp, #0
 80067ae:	6078      	str	r0, [r7, #4]
  if (heth->gState == HAL_ETH_STATE_STARTED)
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80067b6:	2b23      	cmp	r3, #35	; 0x23
 80067b8:	d13f      	bne.n	800683a <HAL_ETH_Stop+0x92>
  {
    /* Set the ETH peripheral state to BUSY */
    heth->gState = HAL_ETH_STATE_BUSY;
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	2223      	movs	r2, #35	; 0x23
 80067be:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    /* Disable the DMA transmission */
    CLEAR_BIT(heth->Instance->DMACTCR, ETH_DMACTCR_ST);
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80067ca:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 80067ce:	687a      	ldr	r2, [r7, #4]
 80067d0:	6812      	ldr	r2, [r2, #0]
 80067d2:	f023 0301 	bic.w	r3, r3, #1
 80067d6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80067da:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104

    /* Disable the DMA reception */
    CLEAR_BIT(heth->Instance->DMACRCR, ETH_DMACRCR_SR);
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80067e6:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80067ea:	687a      	ldr	r2, [r7, #4]
 80067ec:	6812      	ldr	r2, [r2, #0]
 80067ee:	f023 0301 	bic.w	r3, r3, #1
 80067f2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80067f6:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108

    /* Disable the MAC reception */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	681a      	ldr	r2, [r3, #0]
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	f022 0201 	bic.w	r2, r2, #1
 8006808:	601a      	str	r2, [r3, #0]

    /* Set the Flush Transmit FIFO bit */
    SET_BIT(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_FTQ);
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	; 0xd00
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	f042 0201 	orr.w	r2, r2, #1
 800681a:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

    /* Disable the MAC transmission */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	681a      	ldr	r2, [r3, #0]
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	f022 0202 	bic.w	r2, r2, #2
 800682c:	601a      	str	r2, [r3, #0]

    heth->gState = HAL_ETH_STATE_READY;
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	2210      	movs	r2, #16
 8006832:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Return function status */
    return HAL_OK;
 8006836:	2300      	movs	r3, #0
 8006838:	e000      	b.n	800683c <HAL_ETH_Stop+0x94>
  }
  else
  {
    return HAL_ERROR;
 800683a:	2301      	movs	r3, #1
  }
}
 800683c:	4618      	mov	r0, r3
 800683e:	370c      	adds	r7, #12
 8006840:	46bd      	mov	sp, r7
 8006842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006846:	4770      	bx	lr

08006848 <HAL_ETH_Transmit>:
  * @param  pTxConfig: Hold the configuration of packet to be transmitted
  * @param  Timeout: timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Transmit(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig, uint32_t Timeout)
{
 8006848:	b580      	push	{r7, lr}
 800684a:	b086      	sub	sp, #24
 800684c:	af00      	add	r7, sp, #0
 800684e:	60f8      	str	r0, [r7, #12]
 8006850:	60b9      	str	r1, [r7, #8]
 8006852:	607a      	str	r2, [r7, #4]
  uint32_t tickstart;
  ETH_DMADescTypeDef *dmatxdesc;

  if (pTxConfig == NULL)
 8006854:	68bb      	ldr	r3, [r7, #8]
 8006856:	2b00      	cmp	r3, #0
 8006858:	d109      	bne.n	800686e <HAL_ETH_Transmit+0x26>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006860:	f043 0201 	orr.w	r2, r3, #1
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    return HAL_ERROR;
 800686a:	2301      	movs	r3, #1
 800686c:	e07f      	b.n	800696e <HAL_ETH_Transmit+0x126>
  }

  if (heth->gState == HAL_ETH_STATE_STARTED)
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006874:	2b23      	cmp	r3, #35	; 0x23
 8006876:	d179      	bne.n	800696c <HAL_ETH_Transmit+0x124>
  {
    /* Config DMA Tx descriptor by Tx Packet info */
    if (ETH_Prepare_Tx_Descriptors(heth, pTxConfig, 0) != HAL_ETH_ERROR_NONE)
 8006878:	2200      	movs	r2, #0
 800687a:	68b9      	ldr	r1, [r7, #8]
 800687c:	68f8      	ldr	r0, [r7, #12]
 800687e:	f000 ff7d 	bl	800777c <ETH_Prepare_Tx_Descriptors>
 8006882:	4603      	mov	r3, r0
 8006884:	2b00      	cmp	r3, #0
 8006886:	d009      	beq.n	800689c <HAL_ETH_Transmit+0x54>
    {
      /* Set the ETH error code */
      heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800688e:	f043 0202 	orr.w	r2, r3, #2
 8006892:	68fb      	ldr	r3, [r7, #12]
 8006894:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      return HAL_ERROR;
 8006898:	2301      	movs	r3, #1
 800689a:	e068      	b.n	800696e <HAL_ETH_Transmit+0x126>
  __ASM volatile ("dsb 0xF":::"memory");
 800689c:	f3bf 8f4f 	dsb	sy
}
 80068a0:	bf00      	nop
    }

    /* Ensure completion of descriptor preparation before transmission start */
    __DSB();

    dmatxdesc = (ETH_DMADescTypeDef *)(&heth->TxDescList)->TxDesc[heth->TxDescList.CurTxDesc];
 80068a2:	68fb      	ldr	r3, [r7, #12]
 80068a4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80068a6:	68fb      	ldr	r3, [r7, #12]
 80068a8:	3206      	adds	r2, #6
 80068aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80068ae:	617b      	str	r3, [r7, #20]

    /* Incr current tx desc index */
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80068b4:	1c5a      	adds	r2, r3, #1
 80068b6:	68fb      	ldr	r3, [r7, #12]
 80068b8:	629a      	str	r2, [r3, #40]	; 0x28
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80068be:	2b03      	cmp	r3, #3
 80068c0:	d904      	bls.n	80068cc <HAL_ETH_Transmit+0x84>
 80068c2:	68fb      	ldr	r3, [r7, #12]
 80068c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80068c6:	1f1a      	subs	r2, r3, #4
 80068c8:	68fb      	ldr	r3, [r7, #12]
 80068ca:	629a      	str	r2, [r3, #40]	; 0x28

    /* Start transmission */
    /* issue a poll command to Tx DMA by writing address of next immediate free descriptor */
    WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t)(heth->TxDescList.TxDesc[heth->TxDescList.CurTxDesc]));
 80068cc:	68fb      	ldr	r3, [r7, #12]
 80068ce:	6a99      	ldr	r1, [r3, #40]	; 0x28
 80068d0:	68fb      	ldr	r3, [r7, #12]
 80068d2:	681a      	ldr	r2, [r3, #0]
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	3106      	adds	r1, #6
 80068d8:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80068dc:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80068e0:	f8c2 3120 	str.w	r3, [r2, #288]	; 0x120

    tickstart = HAL_GetTick();
 80068e4:	f7fd fce8 	bl	80042b8 <HAL_GetTick>
 80068e8:	6138      	str	r0, [r7, #16]

    /* Wait for data to be transmitted or timeout occurred */
    while ((dmatxdesc->DESC3 & ETH_DMATXNDESCWBF_OWN) != (uint32_t)RESET)
 80068ea:	e039      	b.n	8006960 <HAL_ETH_Transmit+0x118>
    {
      if ((heth->Instance->DMACSR & ETH_DMACSR_FBE) != (uint32_t)RESET)
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80068f4:	f8d3 3160 	ldr.w	r3, [r3, #352]	; 0x160
 80068f8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80068fc:	2b00      	cmp	r3, #0
 80068fe:	d012      	beq.n	8006926 <HAL_ETH_Transmit+0xde>
      {
        heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006906:	f043 0208 	orr.w	r2, r3, #8
 800690a:	68fb      	ldr	r3, [r7, #12]
 800690c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        heth->DMAErrorCode = heth->Instance->DMACSR;
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006918:	f8d3 2160 	ldr.w	r2, [r3, #352]	; 0x160
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        /* Return function status */
        return HAL_ERROR;
 8006922:	2301      	movs	r3, #1
 8006924:	e023      	b.n	800696e <HAL_ETH_Transmit+0x126>
      }

      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	f1b3 3fff 	cmp.w	r3, #4294967295
 800692c:	d018      	beq.n	8006960 <HAL_ETH_Transmit+0x118>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800692e:	f7fd fcc3 	bl	80042b8 <HAL_GetTick>
 8006932:	4602      	mov	r2, r0
 8006934:	693b      	ldr	r3, [r7, #16]
 8006936:	1ad3      	subs	r3, r2, r3
 8006938:	687a      	ldr	r2, [r7, #4]
 800693a:	429a      	cmp	r2, r3
 800693c:	d302      	bcc.n	8006944 <HAL_ETH_Transmit+0xfc>
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	2b00      	cmp	r3, #0
 8006942:	d10d      	bne.n	8006960 <HAL_ETH_Transmit+0x118>
        {
          heth->ErrorCode |= HAL_ETH_ERROR_TIMEOUT;
 8006944:	68fb      	ldr	r3, [r7, #12]
 8006946:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800694a:	f043 0204 	orr.w	r2, r3, #4
 800694e:	68fb      	ldr	r3, [r7, #12]
 8006950:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          /* Clear TX descriptor so that we can proceed */
          dmatxdesc->DESC3 = (ETH_DMATXNDESCWBF_FD | ETH_DMATXNDESCWBF_LD);
 8006954:	697b      	ldr	r3, [r7, #20]
 8006956:	f04f 5240 	mov.w	r2, #805306368	; 0x30000000
 800695a:	60da      	str	r2, [r3, #12]
          return HAL_ERROR;
 800695c:	2301      	movs	r3, #1
 800695e:	e006      	b.n	800696e <HAL_ETH_Transmit+0x126>
    while ((dmatxdesc->DESC3 & ETH_DMATXNDESCWBF_OWN) != (uint32_t)RESET)
 8006960:	697b      	ldr	r3, [r7, #20]
 8006962:	68db      	ldr	r3, [r3, #12]
 8006964:	2b00      	cmp	r3, #0
 8006966:	dbc1      	blt.n	80068ec <HAL_ETH_Transmit+0xa4>
        }
      }
    }

    /* Return function status */
    return HAL_OK;
 8006968:	2300      	movs	r3, #0
 800696a:	e000      	b.n	800696e <HAL_ETH_Transmit+0x126>
  }
  else
  {
    return HAL_ERROR;
 800696c:	2301      	movs	r3, #1
  }
}
 800696e:	4618      	mov	r0, r3
 8006970:	3718      	adds	r7, #24
 8006972:	46bd      	mov	sp, r7
 8006974:	bd80      	pop	{r7, pc}

08006976 <HAL_ETH_ReadData>:
  *         the configuration information for ETHERNET module
  * @param  pAppBuff: Pointer to an application buffer to receive the packet.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadData(ETH_HandleTypeDef *heth, void **pAppBuff)
{
 8006976:	b580      	push	{r7, lr}
 8006978:	b088      	sub	sp, #32
 800697a:	af00      	add	r7, sp, #0
 800697c:	6078      	str	r0, [r7, #4]
 800697e:	6039      	str	r1, [r7, #0]
  uint32_t descidx;
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t desccnt = 0U;
 8006980:	2300      	movs	r3, #0
 8006982:	617b      	str	r3, [r7, #20]
  uint32_t desccntmax;
  uint32_t bufflength;
  uint8_t rxdataready = 0U;
 8006984:	2300      	movs	r3, #0
 8006986:	73fb      	strb	r3, [r7, #15]


  if (pAppBuff == NULL)
 8006988:	683b      	ldr	r3, [r7, #0]
 800698a:	2b00      	cmp	r3, #0
 800698c:	d109      	bne.n	80069a2 <HAL_ETH_ReadData+0x2c>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006994:	f043 0201 	orr.w	r2, r3, #1
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    return HAL_ERROR;
 800699e:	2301      	movs	r3, #1
 80069a0:	e0a5      	b.n	8006aee <HAL_ETH_ReadData+0x178>
  }

  if (heth->gState != HAL_ETH_STATE_STARTED)
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80069a8:	2b23      	cmp	r3, #35	; 0x23
 80069aa:	d001      	beq.n	80069b0 <HAL_ETH_ReadData+0x3a>
  {
    return HAL_ERROR;
 80069ac:	2301      	movs	r3, #1
 80069ae:	e09e      	b.n	8006aee <HAL_ETH_ReadData+0x178>
  }

  descidx = heth->RxDescList.RxDescIdx;
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80069b4:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	69fa      	ldr	r2, [r7, #28]
 80069ba:	3212      	adds	r2, #18
 80069bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80069c0:	61bb      	str	r3, [r7, #24]
  desccntmax = ETH_RX_DESC_CNT - heth->RxDescList.RxBuildDescCnt;
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80069c6:	f1c3 0304 	rsb	r3, r3, #4
 80069ca:	60bb      	str	r3, [r7, #8]

  /* Check if descriptor is not owned by DMA */
  while ((READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 80069cc:	e067      	b.n	8006a9e <HAL_ETH_ReadData+0x128>
         && (rxdataready == 0U))
  {
    if (READ_BIT(dmarxdesc->DESC3,  ETH_DMARXNDESCWBF_CTXT)  != (uint32_t)RESET)
 80069ce:	69bb      	ldr	r3, [r7, #24]
 80069d0:	68db      	ldr	r3, [r3, #12]
 80069d2:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80069d6:	2b00      	cmp	r3, #0
 80069d8:	d007      	beq.n	80069ea <HAL_ETH_ReadData+0x74>
    {
      /* Get timestamp high */
      heth->RxDescList.TimeStamp.TimeStampHigh = dmarxdesc->DESC1;
 80069da:	69bb      	ldr	r3, [r7, #24]
 80069dc:	685a      	ldr	r2, [r3, #4]
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	679a      	str	r2, [r3, #120]	; 0x78
      /* Get timestamp low */
      heth->RxDescList.TimeStamp.TimeStampLow  = dmarxdesc->DESC0;
 80069e2:	69bb      	ldr	r3, [r7, #24]
 80069e4:	681a      	ldr	r2, [r3, #0]
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	675a      	str	r2, [r3, #116]	; 0x74
    }
    if ((READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_FD) != (uint32_t)RESET) || (heth->RxDescList.pRxStart != NULL))
 80069ea:	69bb      	ldr	r3, [r7, #24]
 80069ec:	68db      	ldr	r3, [r3, #12]
 80069ee:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	d103      	bne.n	80069fe <HAL_ETH_ReadData+0x88>
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80069fa:	2b00      	cmp	r3, #0
 80069fc:	d03d      	beq.n	8006a7a <HAL_ETH_ReadData+0x104>
    {
      /* Check if first descriptor */
      if (READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_FD) != (uint32_t)RESET)
 80069fe:	69bb      	ldr	r3, [r7, #24]
 8006a00:	68db      	ldr	r3, [r3, #12]
 8006a02:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	d005      	beq.n	8006a16 <HAL_ETH_ReadData+0xa0>
      {
        heth->RxDescList.RxDescCnt = 0;
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	2200      	movs	r2, #0
 8006a0e:	661a      	str	r2, [r3, #96]	; 0x60
        heth->RxDescList.RxDataLength = 0;
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	2200      	movs	r2, #0
 8006a14:	665a      	str	r2, [r3, #100]	; 0x64
      }

      /* Check if last descriptor */
      bufflength = heth->Init.RxBuffLen;
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	695b      	ldr	r3, [r3, #20]
 8006a1a:	613b      	str	r3, [r7, #16]
      if (READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_LD) != (uint32_t)RESET)
 8006a1c:	69bb      	ldr	r3, [r7, #24]
 8006a1e:	68db      	ldr	r3, [r3, #12]
 8006a20:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006a24:	2b00      	cmp	r3, #0
 8006a26:	d00d      	beq.n	8006a44 <HAL_ETH_ReadData+0xce>
      {
        bufflength = READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_PL) - heth->RxDescList.RxDataLength;
 8006a28:	69bb      	ldr	r3, [r7, #24]
 8006a2a:	68db      	ldr	r3, [r3, #12]
 8006a2c:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006a34:	1ad3      	subs	r3, r2, r3
 8006a36:	613b      	str	r3, [r7, #16]

        /* Save Last descriptor index */
        heth->RxDescList.pRxLastRxDesc = dmarxdesc->DESC3;
 8006a38:	69bb      	ldr	r3, [r7, #24]
 8006a3a:	68da      	ldr	r2, [r3, #12]
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	671a      	str	r2, [r3, #112]	; 0x70

        /* Packet ready */
        rxdataready = 1;
 8006a40:	2301      	movs	r3, #1
 8006a42:	73fb      	strb	r3, [r7, #15]
      /*Call registered Link callback*/
      heth->rxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
                           (uint8_t *)dmarxdesc->BackupAddr0, bufflength);
#else
      /* Link callback */
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	f103 007c 	add.w	r0, r3, #124	; 0x7c
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	f103 0180 	add.w	r1, r3, #128	; 0x80
                             (uint8_t *)dmarxdesc->BackupAddr0, (uint16_t) bufflength);
 8006a50:	69bb      	ldr	r3, [r7, #24]
 8006a52:	691b      	ldr	r3, [r3, #16]
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 8006a54:	461a      	mov	r2, r3
 8006a56:	693b      	ldr	r3, [r7, #16]
 8006a58:	b29b      	uxth	r3, r3
 8006a5a:	f009 f91f 	bl	800fc9c <HAL_ETH_RxLinkCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      heth->RxDescList.RxDescCnt++;
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006a62:	1c5a      	adds	r2, r3, #1
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	661a      	str	r2, [r3, #96]	; 0x60
      heth->RxDescList.RxDataLength += bufflength;
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8006a6c:	693b      	ldr	r3, [r7, #16]
 8006a6e:	441a      	add	r2, r3
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	665a      	str	r2, [r3, #100]	; 0x64

      /* Clear buffer pointer */
      dmarxdesc->BackupAddr0 = 0;
 8006a74:	69bb      	ldr	r3, [r7, #24]
 8006a76:	2200      	movs	r2, #0
 8006a78:	611a      	str	r2, [r3, #16]
    }

    /* Increment current rx descriptor index */
    INCR_RX_DESC_INDEX(descidx, 1U);
 8006a7a:	69fb      	ldr	r3, [r7, #28]
 8006a7c:	3301      	adds	r3, #1
 8006a7e:	61fb      	str	r3, [r7, #28]
 8006a80:	69fb      	ldr	r3, [r7, #28]
 8006a82:	2b03      	cmp	r3, #3
 8006a84:	d902      	bls.n	8006a8c <HAL_ETH_ReadData+0x116>
 8006a86:	69fb      	ldr	r3, [r7, #28]
 8006a88:	3b04      	subs	r3, #4
 8006a8a:	61fb      	str	r3, [r7, #28]
    /* Get current descriptor address */
    dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	69fa      	ldr	r2, [r7, #28]
 8006a90:	3212      	adds	r2, #18
 8006a92:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006a96:	61bb      	str	r3, [r7, #24]
    desccnt++;
 8006a98:	697b      	ldr	r3, [r7, #20]
 8006a9a:	3301      	adds	r3, #1
 8006a9c:	617b      	str	r3, [r7, #20]
  while ((READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8006a9e:	69bb      	ldr	r3, [r7, #24]
 8006aa0:	68db      	ldr	r3, [r3, #12]
         && (rxdataready == 0U))
 8006aa2:	2b00      	cmp	r3, #0
 8006aa4:	db06      	blt.n	8006ab4 <HAL_ETH_ReadData+0x13e>
  while ((READ_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCWBF_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8006aa6:	697a      	ldr	r2, [r7, #20]
 8006aa8:	68bb      	ldr	r3, [r7, #8]
 8006aaa:	429a      	cmp	r2, r3
 8006aac:	d202      	bcs.n	8006ab4 <HAL_ETH_ReadData+0x13e>
         && (rxdataready == 0U))
 8006aae:	7bfb      	ldrb	r3, [r7, #15]
 8006ab0:	2b00      	cmp	r3, #0
 8006ab2:	d08c      	beq.n	80069ce <HAL_ETH_ReadData+0x58>
  }

  heth->RxDescList.RxBuildDescCnt += desccnt;
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8006ab8:	697b      	ldr	r3, [r7, #20]
 8006aba:	441a      	add	r2, r3
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	66da      	str	r2, [r3, #108]	; 0x6c
  if ((heth->RxDescList.RxBuildDescCnt) != 0U)
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006ac4:	2b00      	cmp	r3, #0
 8006ac6:	d002      	beq.n	8006ace <HAL_ETH_ReadData+0x158>
  {
    /* Update Descriptors */
    ETH_UpdateDescriptor(heth);
 8006ac8:	6878      	ldr	r0, [r7, #4]
 8006aca:	f000 f814 	bl	8006af6 <ETH_UpdateDescriptor>
  }

  heth->RxDescList.RxDescIdx = descidx;
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	69fa      	ldr	r2, [r7, #28]
 8006ad2:	65da      	str	r2, [r3, #92]	; 0x5c

  if (rxdataready == 1U)
 8006ad4:	7bfb      	ldrb	r3, [r7, #15]
 8006ad6:	2b01      	cmp	r3, #1
 8006ad8:	d108      	bne.n	8006aec <HAL_ETH_ReadData+0x176>
  {
    /* Return received packet */
    *pAppBuff = heth->RxDescList.pRxStart;
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8006ade:	683b      	ldr	r3, [r7, #0]
 8006ae0:	601a      	str	r2, [r3, #0]
    /* Reset first element */
    heth->RxDescList.pRxStart = NULL;
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	2200      	movs	r2, #0
 8006ae6:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8006ae8:	2300      	movs	r3, #0
 8006aea:	e000      	b.n	8006aee <HAL_ETH_ReadData+0x178>
  }

  /* Packet not ready */
  return HAL_ERROR;
 8006aec:	2301      	movs	r3, #1
}
 8006aee:	4618      	mov	r0, r3
 8006af0:	3720      	adds	r7, #32
 8006af2:	46bd      	mov	sp, r7
 8006af4:	bd80      	pop	{r7, pc}

08006af6 <ETH_UpdateDescriptor>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_UpdateDescriptor(ETH_HandleTypeDef *heth)
{
 8006af6:	b580      	push	{r7, lr}
 8006af8:	b088      	sub	sp, #32
 8006afa:	af00      	add	r7, sp, #0
 8006afc:	6078      	str	r0, [r7, #4]
  uint32_t descidx;
  uint32_t desccount;
  ETH_DMADescTypeDef *dmarxdesc;
  uint8_t *buff = NULL;
 8006afe:	2300      	movs	r3, #0
 8006b00:	60fb      	str	r3, [r7, #12]
  uint8_t allocStatus = 1U;
 8006b02:	2301      	movs	r3, #1
 8006b04:	74fb      	strb	r3, [r7, #19]

  descidx = heth->RxDescList.RxBuildDescIdx;
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006b0a:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	69fa      	ldr	r2, [r7, #28]
 8006b10:	3212      	adds	r2, #18
 8006b12:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006b16:	617b      	str	r3, [r7, #20]
  desccount = heth->RxDescList.RxBuildDescCnt;
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006b1c:	61bb      	str	r3, [r7, #24]

  while ((desccount > 0U) && (allocStatus != 0U))
 8006b1e:	e03b      	b.n	8006b98 <ETH_UpdateDescriptor+0xa2>
  {
    /* Check if a buffer's attached the descriptor */
    if (READ_REG(dmarxdesc->BackupAddr0) == 0U)
 8006b20:	697b      	ldr	r3, [r7, #20]
 8006b22:	691b      	ldr	r3, [r3, #16]
 8006b24:	2b00      	cmp	r3, #0
 8006b26:	d112      	bne.n	8006b4e <ETH_UpdateDescriptor+0x58>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Allocate callback*/
      heth->rxAllocateCallback(&buff);
#else
      /* Allocate callback */
      HAL_ETH_RxAllocateCallback(&buff);
 8006b28:	f107 030c 	add.w	r3, r7, #12
 8006b2c:	4618      	mov	r0, r3
 8006b2e:	f009 f885 	bl	800fc3c <HAL_ETH_RxAllocateCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      if (buff == NULL)
 8006b32:	68fb      	ldr	r3, [r7, #12]
 8006b34:	2b00      	cmp	r3, #0
 8006b36:	d102      	bne.n	8006b3e <ETH_UpdateDescriptor+0x48>
      {
        allocStatus = 0U;
 8006b38:	2300      	movs	r3, #0
 8006b3a:	74fb      	strb	r3, [r7, #19]
 8006b3c:	e007      	b.n	8006b4e <ETH_UpdateDescriptor+0x58>
      }
      else
      {
        WRITE_REG(dmarxdesc->BackupAddr0, (uint32_t)buff);
 8006b3e:	68fb      	ldr	r3, [r7, #12]
 8006b40:	461a      	mov	r2, r3
 8006b42:	697b      	ldr	r3, [r7, #20]
 8006b44:	611a      	str	r2, [r3, #16]
        WRITE_REG(dmarxdesc->DESC0, (uint32_t)buff);
 8006b46:	68fb      	ldr	r3, [r7, #12]
 8006b48:	461a      	mov	r2, r3
 8006b4a:	697b      	ldr	r3, [r7, #20]
 8006b4c:	601a      	str	r2, [r3, #0]
      }
    }

    if (allocStatus != 0U)
 8006b4e:	7cfb      	ldrb	r3, [r7, #19]
 8006b50:	2b00      	cmp	r3, #0
 8006b52:	d021      	beq.n	8006b98 <ETH_UpdateDescriptor+0xa2>
  __ASM volatile ("dmb 0xF":::"memory");
 8006b54:	f3bf 8f5f 	dmb	sy
}
 8006b58:	bf00      	nop
    {
      /* Ensure rest of descriptor is written to RAM before the OWN bit */
      __DMB();

      if (heth->RxDescList.ItMode != 0U)
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006b5e:	2b00      	cmp	r3, #0
 8006b60:	d004      	beq.n	8006b6c <ETH_UpdateDescriptor+0x76>
      {
        WRITE_REG(dmarxdesc->DESC3, ETH_DMARXNDESCRF_OWN | ETH_DMARXNDESCRF_BUF1V | ETH_DMARXNDESCRF_IOC);
 8006b62:	697b      	ldr	r3, [r7, #20]
 8006b64:	f04f 4241 	mov.w	r2, #3238002688	; 0xc1000000
 8006b68:	60da      	str	r2, [r3, #12]
 8006b6a:	e003      	b.n	8006b74 <ETH_UpdateDescriptor+0x7e>
      }
      else
      {
        WRITE_REG(dmarxdesc->DESC3, ETH_DMARXNDESCRF_OWN | ETH_DMARXNDESCRF_BUF1V);
 8006b6c:	697b      	ldr	r3, [r7, #20]
 8006b6e:	f04f 4201 	mov.w	r2, #2164260864	; 0x81000000
 8006b72:	60da      	str	r2, [r3, #12]
      }

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 8006b74:	69fb      	ldr	r3, [r7, #28]
 8006b76:	3301      	adds	r3, #1
 8006b78:	61fb      	str	r3, [r7, #28]
 8006b7a:	69fb      	ldr	r3, [r7, #28]
 8006b7c:	2b03      	cmp	r3, #3
 8006b7e:	d902      	bls.n	8006b86 <ETH_UpdateDescriptor+0x90>
 8006b80:	69fb      	ldr	r3, [r7, #28]
 8006b82:	3b04      	subs	r3, #4
 8006b84:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	69fa      	ldr	r2, [r7, #28]
 8006b8a:	3212      	adds	r2, #18
 8006b8c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006b90:	617b      	str	r3, [r7, #20]
      desccount--;
 8006b92:	69bb      	ldr	r3, [r7, #24]
 8006b94:	3b01      	subs	r3, #1
 8006b96:	61bb      	str	r3, [r7, #24]
  while ((desccount > 0U) && (allocStatus != 0U))
 8006b98:	69bb      	ldr	r3, [r7, #24]
 8006b9a:	2b00      	cmp	r3, #0
 8006b9c:	d002      	beq.n	8006ba4 <ETH_UpdateDescriptor+0xae>
 8006b9e:	7cfb      	ldrb	r3, [r7, #19]
 8006ba0:	2b00      	cmp	r3, #0
 8006ba2:	d1bd      	bne.n	8006b20 <ETH_UpdateDescriptor+0x2a>
    }
  }

  if (heth->RxDescList.RxBuildDescCnt != desccount)
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006ba8:	69ba      	ldr	r2, [r7, #24]
 8006baa:	429a      	cmp	r2, r3
 8006bac:	d00d      	beq.n	8006bca <ETH_UpdateDescriptor+0xd4>
  {
    /* Set the Tail pointer address */
    WRITE_REG(heth->Instance->DMACRDTPR, 0);
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006bb6:	461a      	mov	r2, r3
 8006bb8:	2300      	movs	r3, #0
 8006bba:	f8c2 3128 	str.w	r3, [r2, #296]	; 0x128

    heth->RxDescList.RxBuildDescIdx = descidx;
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	69fa      	ldr	r2, [r7, #28]
 8006bc2:	669a      	str	r2, [r3, #104]	; 0x68
    heth->RxDescList.RxBuildDescCnt = desccount;
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	69ba      	ldr	r2, [r7, #24]
 8006bc8:	66da      	str	r2, [r3, #108]	; 0x6c
  }
}
 8006bca:	bf00      	nop
 8006bcc:	3720      	adds	r7, #32
 8006bce:	46bd      	mov	sp, r7
 8006bd0:	bd80      	pop	{r7, pc}

08006bd2 <HAL_ETH_ReadPHYRegister>:
  * @param pRegValue: parameter to hold read value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                          uint32_t *pRegValue)
{
 8006bd2:	b580      	push	{r7, lr}
 8006bd4:	b086      	sub	sp, #24
 8006bd6:	af00      	add	r7, sp, #0
 8006bd8:	60f8      	str	r0, [r7, #12]
 8006bda:	60b9      	str	r1, [r7, #8]
 8006bdc:	607a      	str	r2, [r7, #4]
 8006bde:	603b      	str	r3, [r7, #0]
  uint32_t tickstart;
  uint32_t tmpreg;

  /* Check for the Busy flag */
  if (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) != (uint32_t)RESET)
 8006be0:	68fb      	ldr	r3, [r7, #12]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8006be8:	f003 0301 	and.w	r3, r3, #1
 8006bec:	2b00      	cmp	r3, #0
 8006bee:	d001      	beq.n	8006bf4 <HAL_ETH_ReadPHYRegister+0x22>
  {
    return HAL_ERROR;
 8006bf0:	2301      	movs	r3, #1
 8006bf2:	e03e      	b.n	8006c72 <HAL_ETH_ReadPHYRegister+0xa0>
  }

  /* Get the  MACMDIOAR value */
  WRITE_REG(tmpreg, heth->Instance->MACMDIOAR);
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8006bfc:	617b      	str	r3, [r7, #20]
     - Set the PHY device address
     - Set the PHY register address
     - Set the read mode
     - Set the MII Busy bit */

  MODIFY_REG(tmpreg, ETH_MACMDIOAR_PA, (PHYAddr << 21));
 8006bfe:	697b      	ldr	r3, [r7, #20]
 8006c00:	f023 7278 	bic.w	r2, r3, #65011712	; 0x3e00000
 8006c04:	68bb      	ldr	r3, [r7, #8]
 8006c06:	055b      	lsls	r3, r3, #21
 8006c08:	4313      	orrs	r3, r2
 8006c0a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_RDA, (PHYReg << 16));
 8006c0c:	697b      	ldr	r3, [r7, #20]
 8006c0e:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	041b      	lsls	r3, r3, #16
 8006c16:	4313      	orrs	r3, r2
 8006c18:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_MOC, ETH_MACMDIOAR_MOC_RD);
 8006c1a:	697b      	ldr	r3, [r7, #20]
 8006c1c:	f043 030c 	orr.w	r3, r3, #12
 8006c20:	617b      	str	r3, [r7, #20]
  SET_BIT(tmpreg, ETH_MACMDIOAR_MB);
 8006c22:	697b      	ldr	r3, [r7, #20]
 8006c24:	f043 0301 	orr.w	r3, r3, #1
 8006c28:	617b      	str	r3, [r7, #20]

  /* Write the result value into the MDII Address register */
  WRITE_REG(heth->Instance->MACMDIOAR, tmpreg);
 8006c2a:	68fb      	ldr	r3, [r7, #12]
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	697a      	ldr	r2, [r7, #20]
 8006c30:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

  tickstart = HAL_GetTick();
 8006c34:	f7fd fb40 	bl	80042b8 <HAL_GetTick>
 8006c38:	6138      	str	r0, [r7, #16]

  /* Wait for the Busy flag */
  while (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 8006c3a:	e009      	b.n	8006c50 <HAL_ETH_ReadPHYRegister+0x7e>
  {
    if (((HAL_GetTick() - tickstart) > ETH_MDIO_BUS_TIMEOUT))
 8006c3c:	f7fd fb3c 	bl	80042b8 <HAL_GetTick>
 8006c40:	4602      	mov	r2, r0
 8006c42:	693b      	ldr	r3, [r7, #16]
 8006c44:	1ad3      	subs	r3, r2, r3
 8006c46:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006c4a:	d901      	bls.n	8006c50 <HAL_ETH_ReadPHYRegister+0x7e>
    {
      return HAL_ERROR;
 8006c4c:	2301      	movs	r3, #1
 8006c4e:	e010      	b.n	8006c72 <HAL_ETH_ReadPHYRegister+0xa0>
  while (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 8006c50:	68fb      	ldr	r3, [r7, #12]
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8006c58:	f003 0301 	and.w	r3, r3, #1
 8006c5c:	2b00      	cmp	r3, #0
 8006c5e:	d1ed      	bne.n	8006c3c <HAL_ETH_ReadPHYRegister+0x6a>
    }
  }

  /* Get MACMIIDR value */
  WRITE_REG(*pRegValue, (uint16_t)heth->Instance->MACMDIODR);
 8006c60:	68fb      	ldr	r3, [r7, #12]
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8006c68:	b29b      	uxth	r3, r3
 8006c6a:	461a      	mov	r2, r3
 8006c6c:	683b      	ldr	r3, [r7, #0]
 8006c6e:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8006c70:	2300      	movs	r3, #0
}
 8006c72:	4618      	mov	r0, r3
 8006c74:	3718      	adds	r7, #24
 8006c76:	46bd      	mov	sp, r7
 8006c78:	bd80      	pop	{r7, pc}
	...

08006c7c <HAL_ETH_WritePHYRegister>:
  * @param  RegValue: the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                           uint32_t RegValue)
{
 8006c7c:	b580      	push	{r7, lr}
 8006c7e:	b086      	sub	sp, #24
 8006c80:	af00      	add	r7, sp, #0
 8006c82:	60f8      	str	r0, [r7, #12]
 8006c84:	60b9      	str	r1, [r7, #8]
 8006c86:	607a      	str	r2, [r7, #4]
 8006c88:	603b      	str	r3, [r7, #0]
  uint32_t tickstart;
  uint32_t tmpreg;

  /* Check for the Busy flag */
  if (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) != (uint32_t)RESET)
 8006c8a:	68fb      	ldr	r3, [r7, #12]
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8006c92:	f003 0301 	and.w	r3, r3, #1
 8006c96:	2b00      	cmp	r3, #0
 8006c98:	d001      	beq.n	8006c9e <HAL_ETH_WritePHYRegister+0x22>
  {
    return HAL_ERROR;
 8006c9a:	2301      	movs	r3, #1
 8006c9c:	e03c      	b.n	8006d18 <HAL_ETH_WritePHYRegister+0x9c>
  }

  /* Get the  MACMDIOAR value */
  WRITE_REG(tmpreg, heth->Instance->MACMDIOAR);
 8006c9e:	68fb      	ldr	r3, [r7, #12]
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8006ca6:	617b      	str	r3, [r7, #20]
     - Set the PHY device address
     - Set the PHY register address
     - Set the write mode
     - Set the MII Busy bit */

  MODIFY_REG(tmpreg, ETH_MACMDIOAR_PA, (PHYAddr << 21));
 8006ca8:	697b      	ldr	r3, [r7, #20]
 8006caa:	f023 7278 	bic.w	r2, r3, #65011712	; 0x3e00000
 8006cae:	68bb      	ldr	r3, [r7, #8]
 8006cb0:	055b      	lsls	r3, r3, #21
 8006cb2:	4313      	orrs	r3, r2
 8006cb4:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_RDA, (PHYReg << 16));
 8006cb6:	697b      	ldr	r3, [r7, #20]
 8006cb8:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	041b      	lsls	r3, r3, #16
 8006cc0:	4313      	orrs	r3, r2
 8006cc2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_MOC, ETH_MACMDIOAR_MOC_WR);
 8006cc4:	697b      	ldr	r3, [r7, #20]
 8006cc6:	f023 030c 	bic.w	r3, r3, #12
 8006cca:	f043 0304 	orr.w	r3, r3, #4
 8006cce:	617b      	str	r3, [r7, #20]
  SET_BIT(tmpreg, ETH_MACMDIOAR_MB);
 8006cd0:	697b      	ldr	r3, [r7, #20]
 8006cd2:	f043 0301 	orr.w	r3, r3, #1
 8006cd6:	617b      	str	r3, [r7, #20]


  /* Give the value to the MII data register */
  WRITE_REG(ETH->MACMDIODR, (uint16_t)RegValue);
 8006cd8:	683b      	ldr	r3, [r7, #0]
 8006cda:	b29a      	uxth	r2, r3
 8006cdc:	4b10      	ldr	r3, [pc, #64]	; (8006d20 <HAL_ETH_WritePHYRegister+0xa4>)
 8006cde:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Write the result value into the MII Address register */
  WRITE_REG(ETH->MACMDIOAR, tmpreg);
 8006ce2:	4a0f      	ldr	r2, [pc, #60]	; (8006d20 <HAL_ETH_WritePHYRegister+0xa4>)
 8006ce4:	697b      	ldr	r3, [r7, #20]
 8006ce6:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

  tickstart = HAL_GetTick();
 8006cea:	f7fd fae5 	bl	80042b8 <HAL_GetTick>
 8006cee:	6138      	str	r0, [r7, #16]

  /* Wait for the Busy flag */
  while (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 8006cf0:	e009      	b.n	8006d06 <HAL_ETH_WritePHYRegister+0x8a>
  {
    if (((HAL_GetTick() - tickstart) > ETH_MDIO_BUS_TIMEOUT))
 8006cf2:	f7fd fae1 	bl	80042b8 <HAL_GetTick>
 8006cf6:	4602      	mov	r2, r0
 8006cf8:	693b      	ldr	r3, [r7, #16]
 8006cfa:	1ad3      	subs	r3, r2, r3
 8006cfc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006d00:	d901      	bls.n	8006d06 <HAL_ETH_WritePHYRegister+0x8a>
    {
      return HAL_ERROR;
 8006d02:	2301      	movs	r3, #1
 8006d04:	e008      	b.n	8006d18 <HAL_ETH_WritePHYRegister+0x9c>
  while (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 8006d06:	68fb      	ldr	r3, [r7, #12]
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8006d0e:	f003 0301 	and.w	r3, r3, #1
 8006d12:	2b00      	cmp	r3, #0
 8006d14:	d1ed      	bne.n	8006cf2 <HAL_ETH_WritePHYRegister+0x76>
    }
  }

  return HAL_OK;
 8006d16:	2300      	movs	r3, #0
}
 8006d18:	4618      	mov	r0, r3
 8006d1a:	3718      	adds	r7, #24
 8006d1c:	46bd      	mov	sp, r7
 8006d1e:	bd80      	pop	{r7, pc}
 8006d20:	40028000 	.word	0x40028000

08006d24 <HAL_ETH_GetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that will hold
  *         the configuration of the MAC.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_ETH_GetMACConfig(ETH_HandleTypeDef *heth, ETH_MACConfigTypeDef *macconf)
{
 8006d24:	b480      	push	{r7}
 8006d26:	b083      	sub	sp, #12
 8006d28:	af00      	add	r7, sp, #0
 8006d2a:	6078      	str	r0, [r7, #4]
 8006d2c:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 8006d2e:	683b      	ldr	r3, [r7, #0]
 8006d30:	2b00      	cmp	r3, #0
 8006d32:	d101      	bne.n	8006d38 <HAL_ETH_GetMACConfig+0x14>
  {
    return HAL_ERROR;
 8006d34:	2301      	movs	r3, #1
 8006d36:	e1c3      	b.n	80070c0 <HAL_ETH_GetMACConfig+0x39c>
  }

  /* Get MAC parameters */
  macconf->PreambleLength = READ_BIT(heth->Instance->MACCR, ETH_MACCR_PRELEN);
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	f003 020c 	and.w	r2, r3, #12
 8006d42:	683b      	ldr	r3, [r7, #0]
 8006d44:	62da      	str	r2, [r3, #44]	; 0x2c
  macconf->DeferralCheck = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DC) >> 4) > 0U) ? ENABLE : DISABLE;
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	f003 0310 	and.w	r3, r3, #16
 8006d50:	2b00      	cmp	r3, #0
 8006d52:	bf14      	ite	ne
 8006d54:	2301      	movne	r3, #1
 8006d56:	2300      	moveq	r3, #0
 8006d58:	b2db      	uxtb	r3, r3
 8006d5a:	461a      	mov	r2, r3
 8006d5c:	683b      	ldr	r3, [r7, #0]
 8006d5e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  macconf->BackOffLimit = READ_BIT(heth->Instance->MACCR, ETH_MACCR_BL);
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	f003 0260 	and.w	r2, r3, #96	; 0x60
 8006d6c:	683b      	ldr	r3, [r7, #0]
 8006d6e:	625a      	str	r2, [r3, #36]	; 0x24
  macconf->RetryTransmission = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DR) >> 8) == 0U) ? ENABLE : DISABLE;
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006d7a:	2b00      	cmp	r3, #0
 8006d7c:	bf0c      	ite	eq
 8006d7e:	2301      	moveq	r3, #1
 8006d80:	2300      	movne	r3, #0
 8006d82:	b2db      	uxtb	r3, r3
 8006d84:	461a      	mov	r2, r3
 8006d86:	683b      	ldr	r3, [r7, #0]
 8006d88:	f883 2020 	strb.w	r2, [r3, #32]
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DCRS) >> 9) > 0U)
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	f403 7300 	and.w	r3, r3, #512	; 0x200
                                        ? ENABLE : DISABLE;
 8006d96:	2b00      	cmp	r3, #0
 8006d98:	bf14      	ite	ne
 8006d9a:	2301      	movne	r3, #1
 8006d9c:	2300      	moveq	r3, #0
 8006d9e:	b2db      	uxtb	r3, r3
 8006da0:	461a      	mov	r2, r3
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DCRS) >> 9) > 0U)
 8006da2:	683b      	ldr	r3, [r7, #0]
 8006da4:	77da      	strb	r2, [r3, #31]
  macconf->ReceiveOwn = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DO) >> 10) == 0U) ? ENABLE : DISABLE;
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006db0:	2b00      	cmp	r3, #0
 8006db2:	bf0c      	ite	eq
 8006db4:	2301      	moveq	r3, #1
 8006db6:	2300      	movne	r3, #0
 8006db8:	b2db      	uxtb	r3, r3
 8006dba:	461a      	mov	r2, r3
 8006dbc:	683b      	ldr	r3, [r7, #0]
 8006dbe:	779a      	strb	r2, [r3, #30]
  macconf->CarrierSenseBeforeTransmit = ((READ_BIT(heth->Instance->MACCR,
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	681b      	ldr	r3, [r3, #0]
                                                   ETH_MACCR_ECRSFD) >> 11) > 0U) ? ENABLE : DISABLE;
 8006dc6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006dca:	2b00      	cmp	r3, #0
 8006dcc:	bf14      	ite	ne
 8006dce:	2301      	movne	r3, #1
 8006dd0:	2300      	moveq	r3, #0
 8006dd2:	b2db      	uxtb	r3, r3
 8006dd4:	461a      	mov	r2, r3
  macconf->CarrierSenseBeforeTransmit = ((READ_BIT(heth->Instance->MACCR,
 8006dd6:	683b      	ldr	r3, [r7, #0]
 8006dd8:	775a      	strb	r2, [r3, #29]
  macconf->LoopbackMode = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_LM) >> 12) > 0U) ? ENABLE : DISABLE;
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006de4:	2b00      	cmp	r3, #0
 8006de6:	bf14      	ite	ne
 8006de8:	2301      	movne	r3, #1
 8006dea:	2300      	moveq	r3, #0
 8006dec:	b2db      	uxtb	r3, r3
 8006dee:	461a      	mov	r2, r3
 8006df0:	683b      	ldr	r3, [r7, #0]
 8006df2:	771a      	strb	r2, [r3, #28]
  macconf->DuplexMode = READ_BIT(heth->Instance->MACCR, ETH_MACCR_DM);
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8006dfe:	683b      	ldr	r3, [r7, #0]
 8006e00:	619a      	str	r2, [r3, #24]
  macconf->Speed = READ_BIT(heth->Instance->MACCR, ETH_MACCR_FES);
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	f403 4280 	and.w	r2, r3, #16384	; 0x4000
 8006e0c:	683b      	ldr	r3, [r7, #0]
 8006e0e:	615a      	str	r2, [r3, #20]
  macconf->JumboPacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JE) >> 16) > 0U) ? ENABLE : DISABLE;
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006e1a:	2b00      	cmp	r3, #0
 8006e1c:	bf14      	ite	ne
 8006e1e:	2301      	movne	r3, #1
 8006e20:	2300      	moveq	r3, #0
 8006e22:	b2db      	uxtb	r3, r3
 8006e24:	461a      	mov	r2, r3
 8006e26:	683b      	ldr	r3, [r7, #0]
 8006e28:	749a      	strb	r2, [r3, #18]
  macconf->Jabber = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JD) >> 17) == 0U) ? ENABLE : DISABLE;
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	681b      	ldr	r3, [r3, #0]
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006e34:	2b00      	cmp	r3, #0
 8006e36:	bf0c      	ite	eq
 8006e38:	2301      	moveq	r3, #1
 8006e3a:	2300      	movne	r3, #0
 8006e3c:	b2db      	uxtb	r3, r3
 8006e3e:	461a      	mov	r2, r3
 8006e40:	683b      	ldr	r3, [r7, #0]
 8006e42:	745a      	strb	r2, [r3, #17]
  macconf->Watchdog = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_WD) >> 19) == 0U) ? ENABLE : DISABLE;
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006e4e:	2b00      	cmp	r3, #0
 8006e50:	bf0c      	ite	eq
 8006e52:	2301      	moveq	r3, #1
 8006e54:	2300      	movne	r3, #0
 8006e56:	b2db      	uxtb	r3, r3
 8006e58:	461a      	mov	r2, r3
 8006e5a:	683b      	ldr	r3, [r7, #0]
 8006e5c:	741a      	strb	r2, [r3, #16]
  macconf->AutomaticPadCRCStrip = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ACS) >> 20) > 0U) ? ENABLE : DISABLE;
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006e68:	2b00      	cmp	r3, #0
 8006e6a:	bf14      	ite	ne
 8006e6c:	2301      	movne	r3, #1
 8006e6e:	2300      	moveq	r3, #0
 8006e70:	b2db      	uxtb	r3, r3
 8006e72:	461a      	mov	r2, r3
 8006e74:	683b      	ldr	r3, [r7, #0]
 8006e76:	73da      	strb	r2, [r3, #15]
  macconf->CRCStripTypePacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CST) >> 21) > 0U) ? ENABLE : DISABLE;
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006e82:	2b00      	cmp	r3, #0
 8006e84:	bf14      	ite	ne
 8006e86:	2301      	movne	r3, #1
 8006e88:	2300      	moveq	r3, #0
 8006e8a:	b2db      	uxtb	r3, r3
 8006e8c:	461a      	mov	r2, r3
 8006e8e:	683b      	ldr	r3, [r7, #0]
 8006e90:	739a      	strb	r2, [r3, #14]
  macconf->Support2KPacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_S2KP) >> 22) > 0U) ? ENABLE : DISABLE;
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006e9c:	2b00      	cmp	r3, #0
 8006e9e:	bf14      	ite	ne
 8006ea0:	2301      	movne	r3, #1
 8006ea2:	2300      	moveq	r3, #0
 8006ea4:	b2db      	uxtb	r3, r3
 8006ea6:	461a      	mov	r2, r3
 8006ea8:	683b      	ldr	r3, [r7, #0]
 8006eaa:	735a      	strb	r2, [r3, #13]
  macconf->GiantPacketSizeLimitControl = ((READ_BIT(heth->Instance->MACCR,
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	681b      	ldr	r3, [r3, #0]
                                                    ETH_MACCR_GPSLCE) >> 23) > 0U) ? ENABLE : DISABLE;
 8006eb2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006eb6:	2b00      	cmp	r3, #0
 8006eb8:	bf14      	ite	ne
 8006eba:	2301      	movne	r3, #1
 8006ebc:	2300      	moveq	r3, #0
 8006ebe:	b2db      	uxtb	r3, r3
 8006ec0:	461a      	mov	r2, r3
  macconf->GiantPacketSizeLimitControl = ((READ_BIT(heth->Instance->MACCR,
 8006ec2:	683b      	ldr	r3, [r7, #0]
 8006ec4:	731a      	strb	r2, [r3, #12]
  macconf->InterPacketGapVal = READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPG);
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	f003 62e0 	and.w	r2, r3, #117440512	; 0x7000000
 8006ed0:	683b      	ldr	r3, [r7, #0]
 8006ed2:	609a      	str	r2, [r3, #8]
  macconf->ChecksumOffload = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPC) >> 27) > 0U) ? ENABLE : DISABLE;
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006ede:	2b00      	cmp	r3, #0
 8006ee0:	bf14      	ite	ne
 8006ee2:	2301      	movne	r3, #1
 8006ee4:	2300      	moveq	r3, #0
 8006ee6:	b2db      	uxtb	r3, r3
 8006ee8:	461a      	mov	r2, r3
 8006eea:	683b      	ldr	r3, [r7, #0]
 8006eec:	711a      	strb	r2, [r3, #4]
  macconf->SourceAddrControl = READ_BIT(heth->Instance->MACCR, ETH_MACCR_SARC);
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8006ef8:	683b      	ldr	r3, [r7, #0]
 8006efa:	601a      	str	r2, [r3, #0]

  macconf->GiantPacketSizeLimit = READ_BIT(heth->Instance->MACECR, ETH_MACECR_GPSL);
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	685b      	ldr	r3, [r3, #4]
 8006f02:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8006f06:	683b      	ldr	r3, [r7, #0]
 8006f08:	635a      	str	r2, [r3, #52]	; 0x34
  macconf->CRCCheckingRxPackets = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_DCRCC) >> 16) == 0U) ? ENABLE : DISABLE;
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	685b      	ldr	r3, [r3, #4]
 8006f10:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006f14:	2b00      	cmp	r3, #0
 8006f16:	bf0c      	ite	eq
 8006f18:	2301      	moveq	r3, #1
 8006f1a:	2300      	movne	r3, #0
 8006f1c:	b2db      	uxtb	r3, r3
 8006f1e:	461a      	mov	r2, r3
 8006f20:	683b      	ldr	r3, [r7, #0]
 8006f22:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
  macconf->SlowProtocolDetect = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_SPEN) >> 17) > 0U) ? ENABLE : DISABLE;
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	685b      	ldr	r3, [r3, #4]
 8006f2c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006f30:	2b00      	cmp	r3, #0
 8006f32:	bf14      	ite	ne
 8006f34:	2301      	movne	r3, #1
 8006f36:	2300      	moveq	r3, #0
 8006f38:	b2db      	uxtb	r3, r3
 8006f3a:	461a      	mov	r2, r3
 8006f3c:	683b      	ldr	r3, [r7, #0]
 8006f3e:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
  macconf->UnicastSlowProtocolPacketDetect = ((READ_BIT(heth->Instance->MACECR,
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	685b      	ldr	r3, [r3, #4]
                                                        ETH_MACECR_USP) >> 18) > 0U) ? ENABLE : DISABLE;
 8006f48:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006f4c:	2b00      	cmp	r3, #0
 8006f4e:	bf14      	ite	ne
 8006f50:	2301      	movne	r3, #1
 8006f52:	2300      	moveq	r3, #0
 8006f54:	b2db      	uxtb	r3, r3
 8006f56:	461a      	mov	r2, r3
  macconf->UnicastSlowProtocolPacketDetect = ((READ_BIT(heth->Instance->MACECR,
 8006f58:	683b      	ldr	r3, [r7, #0]
 8006f5a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  macconf->ExtendedInterPacketGap = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_EIPGEN) >> 24) > 0U)
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	685b      	ldr	r3, [r3, #4]
 8006f64:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
                                    ? ENABLE : DISABLE;
 8006f68:	2b00      	cmp	r3, #0
 8006f6a:	bf14      	ite	ne
 8006f6c:	2301      	movne	r3, #1
 8006f6e:	2300      	moveq	r3, #0
 8006f70:	b2db      	uxtb	r3, r3
 8006f72:	461a      	mov	r2, r3
  macconf->ExtendedInterPacketGap = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_EIPGEN) >> 24) > 0U)
 8006f74:	683b      	ldr	r3, [r7, #0]
 8006f76:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  macconf->ExtendedInterPacketGapVal = READ_BIT(heth->Instance->MACECR, ETH_MACECR_EIPG) >> 25;
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	685b      	ldr	r3, [r3, #4]
 8006f80:	0e5b      	lsrs	r3, r3, #25
 8006f82:	f003 021f 	and.w	r2, r3, #31
 8006f86:	683b      	ldr	r3, [r7, #0]
 8006f88:	63da      	str	r2, [r3, #60]	; 0x3c


  macconf->ProgrammableWatchdog = ((READ_BIT(heth->Instance->MACWTR, ETH_MACWTR_PWE) >> 8) > 0U) ? ENABLE : DISABLE;
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	68db      	ldr	r3, [r3, #12]
 8006f90:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006f94:	2b00      	cmp	r3, #0
 8006f96:	bf14      	ite	ne
 8006f98:	2301      	movne	r3, #1
 8006f9a:	2300      	moveq	r3, #0
 8006f9c:	b2db      	uxtb	r3, r3
 8006f9e:	461a      	mov	r2, r3
 8006fa0:	683b      	ldr	r3, [r7, #0]
 8006fa2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  macconf->WatchdogTimeout = READ_BIT(heth->Instance->MACWTR, ETH_MACWTR_WTO);
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	68db      	ldr	r3, [r3, #12]
 8006fac:	f003 020f 	and.w	r2, r3, #15
 8006fb0:	683b      	ldr	r3, [r7, #0]
 8006fb2:	645a      	str	r2, [r3, #68]	; 0x44

  macconf->TransmitFlowControl = ((READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_TFE) >> 1) > 0U) ? ENABLE : DISABLE;
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006fba:	f003 0302 	and.w	r3, r3, #2
 8006fbe:	2b00      	cmp	r3, #0
 8006fc0:	bf14      	ite	ne
 8006fc2:	2301      	movne	r3, #1
 8006fc4:	2300      	moveq	r3, #0
 8006fc6:	b2db      	uxtb	r3, r3
 8006fc8:	461a      	mov	r2, r3
 8006fca:	683b      	ldr	r3, [r7, #0]
 8006fcc:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  macconf->ZeroQuantaPause = ((READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_DZPQ) >> 7) == 0U) ? ENABLE : DISABLE;
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006fd6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006fda:	2b00      	cmp	r3, #0
 8006fdc:	bf0c      	ite	eq
 8006fde:	2301      	moveq	r3, #1
 8006fe0:	2300      	movne	r3, #0
 8006fe2:	b2db      	uxtb	r3, r3
 8006fe4:	461a      	mov	r2, r3
 8006fe6:	683b      	ldr	r3, [r7, #0]
 8006fe8:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
  macconf->PauseLowThreshold = READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_PLT);
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006ff2:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8006ff6:	683b      	ldr	r3, [r7, #0]
 8006ff8:	651a      	str	r2, [r3, #80]	; 0x50
  macconf->PauseTime = (READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_PT) >> 16);
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007000:	0c1b      	lsrs	r3, r3, #16
 8007002:	b29a      	uxth	r2, r3
 8007004:	683b      	ldr	r3, [r7, #0]
 8007006:	649a      	str	r2, [r3, #72]	; 0x48


  macconf->ReceiveFlowControl = (READ_BIT(heth->Instance->MACRFCR, ETH_MACRFCR_RFE) > 0U) ? ENABLE : DISABLE;
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007010:	f003 0301 	and.w	r3, r3, #1
 8007014:	2b00      	cmp	r3, #0
 8007016:	bf14      	ite	ne
 8007018:	2301      	movne	r3, #1
 800701a:	2300      	moveq	r3, #0
 800701c:	b2db      	uxtb	r3, r3
 800701e:	461a      	mov	r2, r3
 8007020:	683b      	ldr	r3, [r7, #0]
 8007022:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACRFCR, ETH_MACRFCR_UP) >> 1) > 0U)
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800702e:	f003 0302 	and.w	r3, r3, #2
                                      ? ENABLE : DISABLE;
 8007032:	2b00      	cmp	r3, #0
 8007034:	bf14      	ite	ne
 8007036:	2301      	movne	r3, #1
 8007038:	2300      	moveq	r3, #0
 800703a:	b2db      	uxtb	r3, r3
 800703c:	461a      	mov	r2, r3
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACRFCR, ETH_MACRFCR_UP) >> 1) > 0U)
 800703e:	683b      	ldr	r3, [r7, #0]
 8007040:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55

  macconf->TransmitQueueMode = READ_BIT(heth->Instance->MTLTQOMR, (ETH_MTLTQOMR_TTC | ETH_MTLTQOMR_TSF));
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 800704c:	f003 0272 	and.w	r2, r3, #114	; 0x72
 8007050:	683b      	ldr	r3, [r7, #0]
 8007052:	659a      	str	r2, [r3, #88]	; 0x58

  macconf->ReceiveQueueMode = READ_BIT(heth->Instance->MTLRQOMR, (ETH_MTLRQOMR_RTC | ETH_MTLRQOMR_RSF));
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 800705c:	f003 0223 	and.w	r2, r3, #35	; 0x23
 8007060:	683b      	ldr	r3, [r7, #0]
 8007062:	65da      	str	r2, [r3, #92]	; 0x5c
  macconf->ForwardRxUndersizedGoodPacket = ((READ_BIT(heth->Instance->MTLRQOMR,
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
                                                      ETH_MTLRQOMR_FUP) >> 3) > 0U) ? ENABLE : DISABLE;
 800706c:	f003 0308 	and.w	r3, r3, #8
 8007070:	2b00      	cmp	r3, #0
 8007072:	bf14      	ite	ne
 8007074:	2301      	movne	r3, #1
 8007076:	2300      	moveq	r3, #0
 8007078:	b2db      	uxtb	r3, r3
 800707a:	461a      	mov	r2, r3
  macconf->ForwardRxUndersizedGoodPacket = ((READ_BIT(heth->Instance->MTLRQOMR,
 800707c:	683b      	ldr	r3, [r7, #0]
 800707e:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
  macconf->ForwardRxErrorPacket = ((READ_BIT(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_FEP) >> 4) > 0U) ? ENABLE : DISABLE;
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 800708a:	f003 0310 	and.w	r3, r3, #16
 800708e:	2b00      	cmp	r3, #0
 8007090:	bf14      	ite	ne
 8007092:	2301      	movne	r3, #1
 8007094:	2300      	moveq	r3, #0
 8007096:	b2db      	uxtb	r3, r3
 8007098:	461a      	mov	r2, r3
 800709a:	683b      	ldr	r3, [r7, #0]
 800709c:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
  macconf->DropTCPIPChecksumErrorPacket = ((READ_BIT(heth->Instance->MTLRQOMR,
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
                                                     ETH_MTLRQOMR_DISTCPEF) >> 6) == 0U) ? ENABLE : DISABLE;
 80070a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80070ac:	2b00      	cmp	r3, #0
 80070ae:	bf0c      	ite	eq
 80070b0:	2301      	moveq	r3, #1
 80070b2:	2300      	movne	r3, #0
 80070b4:	b2db      	uxtb	r3, r3
 80070b6:	461a      	mov	r2, r3
  macconf->DropTCPIPChecksumErrorPacket = ((READ_BIT(heth->Instance->MTLRQOMR,
 80070b8:	683b      	ldr	r3, [r7, #0]
 80070ba:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

  return HAL_OK;
 80070be:	2300      	movs	r3, #0
}
 80070c0:	4618      	mov	r0, r3
 80070c2:	370c      	adds	r7, #12
 80070c4:	46bd      	mov	sp, r7
 80070c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ca:	4770      	bx	lr

080070cc <HAL_ETH_SetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that contains
  *         the configuration of the MAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 80070cc:	b580      	push	{r7, lr}
 80070ce:	b082      	sub	sp, #8
 80070d0:	af00      	add	r7, sp, #0
 80070d2:	6078      	str	r0, [r7, #4]
 80070d4:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 80070d6:	683b      	ldr	r3, [r7, #0]
 80070d8:	2b00      	cmp	r3, #0
 80070da:	d101      	bne.n	80070e0 <HAL_ETH_SetMACConfig+0x14>
  {
    return HAL_ERROR;
 80070dc:	2301      	movs	r3, #1
 80070de:	e00b      	b.n	80070f8 <HAL_ETH_SetMACConfig+0x2c>
  }

  if (heth->gState == HAL_ETH_STATE_READY)
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80070e6:	2b10      	cmp	r3, #16
 80070e8:	d105      	bne.n	80070f6 <HAL_ETH_SetMACConfig+0x2a>
  {
    ETH_SetMACConfig(heth, macconf);
 80070ea:	6839      	ldr	r1, [r7, #0]
 80070ec:	6878      	ldr	r0, [r7, #4]
 80070ee:	f000 f85f 	bl	80071b0 <ETH_SetMACConfig>

    return HAL_OK;
 80070f2:	2300      	movs	r3, #0
 80070f4:	e000      	b.n	80070f8 <HAL_ETH_SetMACConfig+0x2c>
  }
  else
  {
    return HAL_ERROR;
 80070f6:	2301      	movs	r3, #1
  }
}
 80070f8:	4618      	mov	r0, r3
 80070fa:	3708      	adds	r7, #8
 80070fc:	46bd      	mov	sp, r7
 80070fe:	bd80      	pop	{r7, pc}

08007100 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 8007100:	b580      	push	{r7, lr}
 8007102:	b084      	sub	sp, #16
 8007104:	af00      	add	r7, sp, #0
 8007106:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8007110:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 8007112:	68fb      	ldr	r3, [r7, #12]
 8007114:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8007118:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 800711a:	f003 fec3 	bl	800aea4 <HAL_RCC_GetHCLKFreq>
 800711e:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if ((hclk >= 20000000U) && (hclk < 35000000U))
 8007120:	68bb      	ldr	r3, [r7, #8]
 8007122:	4a1e      	ldr	r2, [pc, #120]	; (800719c <HAL_ETH_SetMDIOClockRange+0x9c>)
 8007124:	4293      	cmp	r3, r2
 8007126:	d908      	bls.n	800713a <HAL_ETH_SetMDIOClockRange+0x3a>
 8007128:	68bb      	ldr	r3, [r7, #8]
 800712a:	4a1d      	ldr	r2, [pc, #116]	; (80071a0 <HAL_ETH_SetMDIOClockRange+0xa0>)
 800712c:	4293      	cmp	r3, r2
 800712e:	d804      	bhi.n	800713a <HAL_ETH_SetMDIOClockRange+0x3a>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 8007130:	68fb      	ldr	r3, [r7, #12]
 8007132:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8007136:	60fb      	str	r3, [r7, #12]
 8007138:	e027      	b.n	800718a <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if ((hclk >= 35000000U) && (hclk < 60000000U))
 800713a:	68bb      	ldr	r3, [r7, #8]
 800713c:	4a18      	ldr	r2, [pc, #96]	; (80071a0 <HAL_ETH_SetMDIOClockRange+0xa0>)
 800713e:	4293      	cmp	r3, r2
 8007140:	d908      	bls.n	8007154 <HAL_ETH_SetMDIOClockRange+0x54>
 8007142:	68bb      	ldr	r3, [r7, #8]
 8007144:	4a17      	ldr	r2, [pc, #92]	; (80071a4 <HAL_ETH_SetMDIOClockRange+0xa4>)
 8007146:	4293      	cmp	r3, r2
 8007148:	d204      	bcs.n	8007154 <HAL_ETH_SetMDIOClockRange+0x54>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 800714a:	68fb      	ldr	r3, [r7, #12]
 800714c:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8007150:	60fb      	str	r3, [r7, #12]
 8007152:	e01a      	b.n	800718a <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if ((hclk >= 60000000U) && (hclk < 100000000U))
 8007154:	68bb      	ldr	r3, [r7, #8]
 8007156:	4a13      	ldr	r2, [pc, #76]	; (80071a4 <HAL_ETH_SetMDIOClockRange+0xa4>)
 8007158:	4293      	cmp	r3, r2
 800715a:	d303      	bcc.n	8007164 <HAL_ETH_SetMDIOClockRange+0x64>
 800715c:	68bb      	ldr	r3, [r7, #8]
 800715e:	4a12      	ldr	r2, [pc, #72]	; (80071a8 <HAL_ETH_SetMDIOClockRange+0xa8>)
 8007160:	4293      	cmp	r3, r2
 8007162:	d911      	bls.n	8007188 <HAL_ETH_SetMDIOClockRange+0x88>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if ((hclk >= 100000000U) && (hclk < 150000000U))
 8007164:	68bb      	ldr	r3, [r7, #8]
 8007166:	4a10      	ldr	r2, [pc, #64]	; (80071a8 <HAL_ETH_SetMDIOClockRange+0xa8>)
 8007168:	4293      	cmp	r3, r2
 800716a:	d908      	bls.n	800717e <HAL_ETH_SetMDIOClockRange+0x7e>
 800716c:	68bb      	ldr	r3, [r7, #8]
 800716e:	4a0f      	ldr	r2, [pc, #60]	; (80071ac <HAL_ETH_SetMDIOClockRange+0xac>)
 8007170:	4293      	cmp	r3, r2
 8007172:	d804      	bhi.n	800717e <HAL_ETH_SetMDIOClockRange+0x7e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 8007174:	68fb      	ldr	r3, [r7, #12]
 8007176:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800717a:	60fb      	str	r3, [r7, #12]
 800717c:	e005      	b.n	800718a <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else /* (hclk >= 150000000)&&(hclk <= 200000000) */
  {
    /* CSR Clock Range between 150-200 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 800717e:	68fb      	ldr	r3, [r7, #12]
 8007180:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8007184:	60fb      	str	r3, [r7, #12]
 8007186:	e000      	b.n	800718a <HAL_ETH_SetMDIOClockRange+0x8a>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
 8007188:	bf00      	nop
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	68fa      	ldr	r2, [r7, #12]
 8007190:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 8007194:	bf00      	nop
 8007196:	3710      	adds	r7, #16
 8007198:	46bd      	mov	sp, r7
 800719a:	bd80      	pop	{r7, pc}
 800719c:	01312cff 	.word	0x01312cff
 80071a0:	02160ebf 	.word	0x02160ebf
 80071a4:	03938700 	.word	0x03938700
 80071a8:	05f5e0ff 	.word	0x05f5e0ff
 80071ac:	08f0d17f 	.word	0x08f0d17f

080071b0 <ETH_SetMACConfig>:
  * @{
  */


static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 80071b0:	b480      	push	{r7}
 80071b2:	b085      	sub	sp, #20
 80071b4:	af00      	add	r7, sp, #0
 80071b6:	6078      	str	r0, [r7, #4]
 80071b8:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval = (macconf->InterPacketGapVal |
 80071ba:	683b      	ldr	r3, [r7, #0]
 80071bc:	689a      	ldr	r2, [r3, #8]
               macconf->SourceAddrControl |
 80071be:	683b      	ldr	r3, [r7, #0]
 80071c0:	681b      	ldr	r3, [r3, #0]
  macregval = (macconf->InterPacketGapVal |
 80071c2:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ChecksumOffload << 27) |
 80071c4:	683b      	ldr	r3, [r7, #0]
 80071c6:	791b      	ldrb	r3, [r3, #4]
 80071c8:	06db      	lsls	r3, r3, #27
               macconf->SourceAddrControl |
 80071ca:	431a      	orrs	r2, r3
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 80071cc:	683b      	ldr	r3, [r7, #0]
 80071ce:	7b1b      	ldrb	r3, [r3, #12]
 80071d0:	05db      	lsls	r3, r3, #23
               ((uint32_t)macconf->ChecksumOffload << 27) |
 80071d2:	431a      	orrs	r2, r3
               ((uint32_t)macconf->Support2KPacket  << 22) |
 80071d4:	683b      	ldr	r3, [r7, #0]
 80071d6:	7b5b      	ldrb	r3, [r3, #13]
 80071d8:	059b      	lsls	r3, r3, #22
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 80071da:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 80071dc:	683b      	ldr	r3, [r7, #0]
 80071de:	7b9b      	ldrb	r3, [r3, #14]
 80071e0:	055b      	lsls	r3, r3, #21
               ((uint32_t)macconf->Support2KPacket  << 22) |
 80071e2:	431a      	orrs	r2, r3
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 80071e4:	683b      	ldr	r3, [r7, #0]
 80071e6:	7bdb      	ldrb	r3, [r3, #15]
 80071e8:	051b      	lsls	r3, r3, #20
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 80071ea:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 80071ec:	683a      	ldr	r2, [r7, #0]
 80071ee:	7c12      	ldrb	r2, [r2, #16]
 80071f0:	2a00      	cmp	r2, #0
 80071f2:	d102      	bne.n	80071fa <ETH_SetMACConfig+0x4a>
 80071f4:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80071f8:	e000      	b.n	80071fc <ETH_SetMACConfig+0x4c>
 80071fa:	2200      	movs	r2, #0
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 80071fc:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 80071fe:	683a      	ldr	r2, [r7, #0]
 8007200:	7c52      	ldrb	r2, [r2, #17]
 8007202:	2a00      	cmp	r2, #0
 8007204:	d102      	bne.n	800720c <ETH_SetMACConfig+0x5c>
 8007206:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800720a:	e000      	b.n	800720e <ETH_SetMACConfig+0x5e>
 800720c:	2200      	movs	r2, #0
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 800720e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->JumboPacket << 16) |
 8007210:	683b      	ldr	r3, [r7, #0]
 8007212:	7c9b      	ldrb	r3, [r3, #18]
 8007214:	041b      	lsls	r3, r3, #16
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8007216:	431a      	orrs	r2, r3
               macconf->Speed |
 8007218:	683b      	ldr	r3, [r7, #0]
 800721a:	695b      	ldr	r3, [r3, #20]
               ((uint32_t)macconf->JumboPacket << 16) |
 800721c:	431a      	orrs	r2, r3
               macconf->DuplexMode |
 800721e:	683b      	ldr	r3, [r7, #0]
 8007220:	699b      	ldr	r3, [r3, #24]
               macconf->Speed |
 8007222:	431a      	orrs	r2, r3
               ((uint32_t)macconf->LoopbackMode << 12) |
 8007224:	683b      	ldr	r3, [r7, #0]
 8007226:	7f1b      	ldrb	r3, [r3, #28]
 8007228:	031b      	lsls	r3, r3, #12
               macconf->DuplexMode |
 800722a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 800722c:	683b      	ldr	r3, [r7, #0]
 800722e:	7f5b      	ldrb	r3, [r3, #29]
 8007230:	02db      	lsls	r3, r3, #11
               ((uint32_t)macconf->LoopbackMode << 12) |
 8007232:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8007234:	683a      	ldr	r2, [r7, #0]
 8007236:	7f92      	ldrb	r2, [r2, #30]
 8007238:	2a00      	cmp	r2, #0
 800723a:	d102      	bne.n	8007242 <ETH_SetMACConfig+0x92>
 800723c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8007240:	e000      	b.n	8007244 <ETH_SetMACConfig+0x94>
 8007242:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8007244:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 8007246:	683b      	ldr	r3, [r7, #0]
 8007248:	7fdb      	ldrb	r3, [r3, #31]
 800724a:	025b      	lsls	r3, r3, #9
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 800724c:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 800724e:	683a      	ldr	r2, [r7, #0]
 8007250:	f892 2020 	ldrb.w	r2, [r2, #32]
 8007254:	2a00      	cmp	r2, #0
 8007256:	d102      	bne.n	800725e <ETH_SetMACConfig+0xae>
 8007258:	f44f 7280 	mov.w	r2, #256	; 0x100
 800725c:	e000      	b.n	8007260 <ETH_SetMACConfig+0xb0>
 800725e:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 8007260:	431a      	orrs	r2, r3
               macconf->BackOffLimit |
 8007262:	683b      	ldr	r3, [r7, #0]
 8007264:	6a5b      	ldr	r3, [r3, #36]	; 0x24
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 8007266:	431a      	orrs	r2, r3
               ((uint32_t)macconf->DeferralCheck << 4) |
 8007268:	683b      	ldr	r3, [r7, #0]
 800726a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800726e:	011b      	lsls	r3, r3, #4
               macconf->BackOffLimit |
 8007270:	431a      	orrs	r2, r3
               macconf->PreambleLength);
 8007272:	683b      	ldr	r3, [r7, #0]
 8007274:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  macregval = (macconf->InterPacketGapVal |
 8007276:	4313      	orrs	r3, r2
 8007278:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	681a      	ldr	r2, [r3, #0]
 8007280:	4b56      	ldr	r3, [pc, #344]	; (80073dc <ETH_SetMACConfig+0x22c>)
 8007282:	4013      	ands	r3, r2
 8007284:	687a      	ldr	r2, [r7, #4]
 8007286:	6812      	ldr	r2, [r2, #0]
 8007288:	68f9      	ldr	r1, [r7, #12]
 800728a:	430b      	orrs	r3, r1
 800728c:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 800728e:	683b      	ldr	r3, [r7, #0]
 8007290:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007292:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 8007294:	683b      	ldr	r3, [r7, #0]
 8007296:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800729a:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 800729c:	431a      	orrs	r2, r3
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 800729e:	683b      	ldr	r3, [r7, #0]
 80072a0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80072a4:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 80072a6:	431a      	orrs	r2, r3
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 80072a8:	683b      	ldr	r3, [r7, #0]
 80072aa:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80072ae:	045b      	lsls	r3, r3, #17
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 80072b0:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U) << 16) |
 80072b2:	683a      	ldr	r2, [r7, #0]
 80072b4:	f892 2032 	ldrb.w	r2, [r2, #50]	; 0x32
 80072b8:	2a00      	cmp	r2, #0
 80072ba:	d102      	bne.n	80072c2 <ETH_SetMACConfig+0x112>
 80072bc:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80072c0:	e000      	b.n	80072c4 <ETH_SetMACConfig+0x114>
 80072c2:	2200      	movs	r2, #0
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 80072c4:	431a      	orrs	r2, r3
               macconf->GiantPacketSizeLimit);
 80072c6:	683b      	ldr	r3, [r7, #0]
 80072c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 80072ca:	4313      	orrs	r3, r2
 80072cc:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	685a      	ldr	r2, [r3, #4]
 80072d4:	4b42      	ldr	r3, [pc, #264]	; (80073e0 <ETH_SetMACConfig+0x230>)
 80072d6:	4013      	ands	r3, r2
 80072d8:	687a      	ldr	r2, [r7, #4]
 80072da:	6812      	ldr	r2, [r2, #0]
 80072dc:	68f9      	ldr	r1, [r7, #12]
 80072de:	430b      	orrs	r3, r1
 80072e0:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 80072e2:	683b      	ldr	r3, [r7, #0]
 80072e4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80072e8:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 80072ea:	683b      	ldr	r3, [r7, #0]
 80072ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 80072ee:	4313      	orrs	r3, r2
 80072f0:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	68da      	ldr	r2, [r3, #12]
 80072f8:	4b3a      	ldr	r3, [pc, #232]	; (80073e4 <ETH_SetMACConfig+0x234>)
 80072fa:	4013      	ands	r3, r2
 80072fc:	687a      	ldr	r2, [r7, #4]
 80072fe:	6812      	ldr	r2, [r2, #0]
 8007300:	68f9      	ldr	r1, [r7, #12]
 8007302:	430b      	orrs	r3, r1
 8007304:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8007306:	683b      	ldr	r3, [r7, #0]
 8007308:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 800730c:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 800730e:	683b      	ldr	r3, [r7, #0]
 8007310:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8007312:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7) |
 8007314:	683a      	ldr	r2, [r7, #0]
 8007316:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 800731a:	2a00      	cmp	r2, #0
 800731c:	d101      	bne.n	8007322 <ETH_SetMACConfig+0x172>
 800731e:	2280      	movs	r2, #128	; 0x80
 8007320:	e000      	b.n	8007324 <ETH_SetMACConfig+0x174>
 8007322:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 8007324:	431a      	orrs	r2, r3
               (macconf->PauseTime << 16));
 8007326:	683b      	ldr	r3, [r7, #0]
 8007328:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800732a:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 800732c:	4313      	orrs	r3, r2
 800732e:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8007336:	f64f 730d 	movw	r3, #65293	; 0xff0d
 800733a:	4013      	ands	r3, r2
 800733c:	687a      	ldr	r2, [r7, #4]
 800733e:	6812      	ldr	r2, [r2, #0]
 8007340:	68f9      	ldr	r1, [r7, #12]
 8007342:	430b      	orrs	r3, r1
 8007344:	6713      	str	r3, [r2, #112]	; 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8007346:	683b      	ldr	r3, [r7, #0]
 8007348:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 800734c:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 800734e:	683b      	ldr	r3, [r7, #0]
 8007350:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 8007354:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8007356:	4313      	orrs	r3, r2
 8007358:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007362:	f023 0103 	bic.w	r1, r3, #3
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	68fa      	ldr	r2, [r7, #12]
 800736c:	430a      	orrs	r2, r1
 800736e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 800737a:	f023 0172 	bic.w	r1, r3, #114	; 0x72
 800737e:	683b      	ldr	r3, [r7, #0]
 8007380:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	430a      	orrs	r2, r1
 8007388:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 800738c:	683b      	ldr	r3, [r7, #0]
 800738e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8007390:	683a      	ldr	r2, [r7, #0]
 8007392:	f892 2060 	ldrb.w	r2, [r2, #96]	; 0x60
 8007396:	2a00      	cmp	r2, #0
 8007398:	d101      	bne.n	800739e <ETH_SetMACConfig+0x1ee>
 800739a:	2240      	movs	r2, #64	; 0x40
 800739c:	e000      	b.n	80073a0 <ETH_SetMACConfig+0x1f0>
 800739e:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 80073a0:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 80073a2:	683b      	ldr	r3, [r7, #0]
 80073a4:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 80073a8:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 80073aa:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 80073ac:	683b      	ldr	r3, [r7, #0]
 80073ae:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 80073b2:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 80073b4:	4313      	orrs	r3, r2
 80073b6:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 80073c0:	f023 017b 	bic.w	r1, r3, #123	; 0x7b
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	68fa      	ldr	r2, [r7, #12]
 80073ca:	430a      	orrs	r2, r1
 80073cc:	f8c3 2d30 	str.w	r2, [r3, #3376]	; 0xd30
}
 80073d0:	bf00      	nop
 80073d2:	3714      	adds	r7, #20
 80073d4:	46bd      	mov	sp, r7
 80073d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073da:	4770      	bx	lr
 80073dc:	00048083 	.word	0x00048083
 80073e0:	c0f88000 	.word	0xc0f88000
 80073e4:	fffffef0 	.word	0xfffffef0

080073e8 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 80073e8:	b480      	push	{r7}
 80073ea:	b085      	sub	sp, #20
 80073ec:	af00      	add	r7, sp, #0
 80073ee:	6078      	str	r0, [r7, #4]
 80073f0:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80073fa:	681a      	ldr	r2, [r3, #0]
 80073fc:	4b38      	ldr	r3, [pc, #224]	; (80074e0 <ETH_SetDMAConfig+0xf8>)
 80073fe:	4013      	ands	r3, r2
 8007400:	683a      	ldr	r2, [r7, #0]
 8007402:	6811      	ldr	r1, [r2, #0]
 8007404:	687a      	ldr	r2, [r7, #4]
 8007406:	6812      	ldr	r2, [r2, #0]
 8007408:	430b      	orrs	r3, r1
 800740a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800740e:	6013      	str	r3, [r2, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8007410:	683b      	ldr	r3, [r7, #0]
 8007412:	791b      	ldrb	r3, [r3, #4]
 8007414:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 8007416:	683b      	ldr	r3, [r7, #0]
 8007418:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 800741a:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 800741c:	683b      	ldr	r3, [r7, #0]
 800741e:	7b1b      	ldrb	r3, [r3, #12]
 8007420:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8007422:	4313      	orrs	r3, r2
 8007424:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800742e:	685a      	ldr	r2, [r3, #4]
 8007430:	4b2c      	ldr	r3, [pc, #176]	; (80074e4 <ETH_SetDMAConfig+0xfc>)
 8007432:	4013      	ands	r3, r2
 8007434:	687a      	ldr	r2, [r7, #4]
 8007436:	6812      	ldr	r2, [r2, #0]
 8007438:	68f9      	ldr	r1, [r7, #12]
 800743a:	430b      	orrs	r3, r1
 800743c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8007440:	6053      	str	r3, [r2, #4]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8007442:	683b      	ldr	r3, [r7, #0]
 8007444:	7b5b      	ldrb	r3, [r3, #13]
 8007446:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 8007448:	683b      	ldr	r3, [r7, #0]
 800744a:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 800744c:	4313      	orrs	r3, r2
 800744e:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007458:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
 800745c:	4b22      	ldr	r3, [pc, #136]	; (80074e8 <ETH_SetDMAConfig+0x100>)
 800745e:	4013      	ands	r3, r2
 8007460:	687a      	ldr	r2, [r7, #4]
 8007462:	6812      	ldr	r2, [r2, #0]
 8007464:	68f9      	ldr	r1, [r7, #12]
 8007466:	430b      	orrs	r3, r1
 8007468:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800746c:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 8007470:	683b      	ldr	r3, [r7, #0]
 8007472:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4) |
 8007474:	683b      	ldr	r3, [r7, #0]
 8007476:	7d1b      	ldrb	r3, [r3, #20]
 8007478:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 800747a:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->TCPSegmentation << 12));
 800747c:	683b      	ldr	r3, [r7, #0]
 800747e:	7f5b      	ldrb	r3, [r3, #29]
 8007480:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 8007482:	4313      	orrs	r3, r2
 8007484:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800748e:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
 8007492:	4b16      	ldr	r3, [pc, #88]	; (80074ec <ETH_SetDMAConfig+0x104>)
 8007494:	4013      	ands	r3, r2
 8007496:	687a      	ldr	r2, [r7, #4]
 8007498:	6812      	ldr	r2, [r2, #0]
 800749a:	68f9      	ldr	r1, [r7, #12]
 800749c:	430b      	orrs	r3, r1
 800749e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80074a2:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 80074a6:	683b      	ldr	r3, [r7, #0]
 80074a8:	7f1b      	ldrb	r3, [r3, #28]
 80074aa:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 80074ac:	683b      	ldr	r3, [r7, #0]
 80074ae:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 80074b0:	4313      	orrs	r3, r2
 80074b2:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80074bc:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 80074c0:	4b0b      	ldr	r3, [pc, #44]	; (80074f0 <ETH_SetDMAConfig+0x108>)
 80074c2:	4013      	ands	r3, r2
 80074c4:	687a      	ldr	r2, [r7, #4]
 80074c6:	6812      	ldr	r2, [r2, #0]
 80074c8:	68f9      	ldr	r1, [r7, #12]
 80074ca:	430b      	orrs	r3, r1
 80074cc:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80074d0:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
}
 80074d4:	bf00      	nop
 80074d6:	3714      	adds	r7, #20
 80074d8:	46bd      	mov	sp, r7
 80074da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074de:	4770      	bx	lr
 80074e0:	ffff87fd 	.word	0xffff87fd
 80074e4:	ffff2ffe 	.word	0xffff2ffe
 80074e8:	fffec000 	.word	0xfffec000
 80074ec:	ffc0efef 	.word	0xffc0efef
 80074f0:	7fc0ffff 	.word	0x7fc0ffff

080074f4 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 80074f4:	b580      	push	{r7, lr}
 80074f6:	b0a4      	sub	sp, #144	; 0x90
 80074f8:	af00      	add	r7, sp, #0
 80074fa:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 80074fc:	2301      	movs	r3, #1
 80074fe:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8007502:	2300      	movs	r3, #0
 8007504:	653b      	str	r3, [r7, #80]	; 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 8007506:	2300      	movs	r3, #0
 8007508:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 800750c:	2300      	movs	r3, #0
 800750e:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 8007512:	2301      	movs	r3, #1
 8007514:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 8007518:	2301      	movs	r3, #1
 800751a:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 800751e:	2301      	movs	r3, #1
 8007520:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 8007524:	2300      	movs	r3, #0
 8007526:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 800752a:	2301      	movs	r3, #1
 800752c:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8007530:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8007534:	647b      	str	r3, [r7, #68]	; 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 8007536:	2300      	movs	r3, #0
 8007538:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0;
 800753c:	2300      	movs	r3, #0
 800753e:	66bb      	str	r3, [r7, #104]	; 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 8007540:	2300      	movs	r3, #0
 8007542:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 8007546:	2300      	movs	r3, #0
 8007548:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618;
 800754c:	f44f 63c3 	mov.w	r3, #1560	; 0x618
 8007550:	663b      	str	r3, [r7, #96]	; 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 8007552:	2300      	movs	r3, #0
 8007554:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 8007558:	2300      	movs	r3, #0
 800755a:	637b      	str	r3, [r7, #52]	; 0x34
  macDefaultConf.Jabber = ENABLE;
 800755c:	2301      	movs	r3, #1
 800755e:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 8007562:	2300      	movs	r3, #0
 8007564:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 8007568:	2300      	movs	r3, #0
 800756a:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 800756e:	2300      	movs	r3, #0
 8007570:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.PauseTime = 0x0;
 8007572:	2300      	movs	r3, #0
 8007574:	677b      	str	r3, [r7, #116]	; 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 8007576:	2300      	movs	r3, #0
 8007578:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 800757a:	2300      	movs	r3, #0
 800757c:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8007580:	2300      	movs	r3, #0
 8007582:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 8007586:	2301      	movs	r3, #1
 8007588:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 800758c:	2320      	movs	r3, #32
 800758e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 8007592:	2301      	movs	r3, #1
 8007594:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 8007598:	2300      	movs	r3, #0
 800759a:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 800759e:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 80075a2:	62fb      	str	r3, [r7, #44]	; 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 80075a4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80075a8:	643b      	str	r3, [r7, #64]	; 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 80075aa:	2300      	movs	r3, #0
 80075ac:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 80075b0:	2302      	movs	r3, #2
 80075b2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 80075b6:	2300      	movs	r3, #0
 80075b8:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 80075bc:	2300      	movs	r3, #0
 80075be:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 80075c2:	2300      	movs	r3, #0
 80075c4:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.Watchdog = ENABLE;
 80075c8:	2301      	movs	r3, #1
 80075ca:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 80075ce:	2300      	movs	r3, #0
 80075d0:	673b      	str	r3, [r7, #112]	; 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 80075d2:	2301      	movs	r3, #1
 80075d4:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 80075d8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80075dc:	4619      	mov	r1, r3
 80075de:	6878      	ldr	r0, [r7, #4]
 80075e0:	f7ff fde6 	bl	80071b0 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 80075e4:	2301      	movs	r3, #1
 80075e6:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 80075e8:	2301      	movs	r3, #1
 80075ea:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 80075ec:	2300      	movs	r3, #0
 80075ee:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 80075f0:	2300      	movs	r3, #0
 80075f2:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 80075f6:	2300      	movs	r3, #0
 80075f8:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 80075fa:	2300      	movs	r3, #0
 80075fc:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 80075fe:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8007602:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 8007604:	2300      	movs	r3, #0
 8007606:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8007608:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800760c:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 800760e:	2300      	movs	r3, #0
 8007610:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.MaximumSegmentSize = ETH_SEGMENT_SIZE_DEFAULT;
 8007614:	f44f 7306 	mov.w	r3, #536	; 0x218
 8007618:	62bb      	str	r3, [r7, #40]	; 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 800761a:	f107 0308 	add.w	r3, r7, #8
 800761e:	4619      	mov	r1, r3
 8007620:	6878      	ldr	r0, [r7, #4]
 8007622:	f7ff fee1 	bl	80073e8 <ETH_SetDMAConfig>
}
 8007626:	bf00      	nop
 8007628:	3790      	adds	r7, #144	; 0x90
 800762a:	46bd      	mov	sp, r7
 800762c:	bd80      	pop	{r7, pc}

0800762e <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 800762e:	b480      	push	{r7}
 8007630:	b085      	sub	sp, #20
 8007632:	af00      	add	r7, sp, #0
 8007634:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8007636:	2300      	movs	r3, #0
 8007638:	60fb      	str	r3, [r7, #12]
 800763a:	e01d      	b.n	8007678 <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	68d9      	ldr	r1, [r3, #12]
 8007640:	68fa      	ldr	r2, [r7, #12]
 8007642:	4613      	mov	r3, r2
 8007644:	005b      	lsls	r3, r3, #1
 8007646:	4413      	add	r3, r2
 8007648:	00db      	lsls	r3, r3, #3
 800764a:	440b      	add	r3, r1
 800764c:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 800764e:	68bb      	ldr	r3, [r7, #8]
 8007650:	2200      	movs	r2, #0
 8007652:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8007654:	68bb      	ldr	r3, [r7, #8]
 8007656:	2200      	movs	r2, #0
 8007658:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 800765a:	68bb      	ldr	r3, [r7, #8]
 800765c:	2200      	movs	r2, #0
 800765e:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8007660:	68bb      	ldr	r3, [r7, #8]
 8007662:	2200      	movs	r2, #0
 8007664:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8007666:	68b9      	ldr	r1, [r7, #8]
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	68fa      	ldr	r2, [r7, #12]
 800766c:	3206      	adds	r2, #6
 800766e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8007672:	68fb      	ldr	r3, [r7, #12]
 8007674:	3301      	adds	r3, #1
 8007676:	60fb      	str	r3, [r7, #12]
 8007678:	68fb      	ldr	r3, [r7, #12]
 800767a:	2b03      	cmp	r3, #3
 800767c:	d9de      	bls.n	800763c <ETH_DMATxDescListInit+0xe>

  }

  heth->TxDescList.CurTxDesc = 0;
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	2200      	movs	r2, #0
 8007682:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT - 1U));
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800768c:	461a      	mov	r2, r3
 800768e:	2303      	movs	r3, #3
 8007690:	f8c2 312c 	str.w	r3, [r2, #300]	; 0x12c

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	68da      	ldr	r2, [r3, #12]
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80076a0:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	68da      	ldr	r2, [r3, #12]
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80076b0:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
}
 80076b4:	bf00      	nop
 80076b6:	3714      	adds	r7, #20
 80076b8:	46bd      	mov	sp, r7
 80076ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076be:	4770      	bx	lr

080076c0 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 80076c0:	b480      	push	{r7}
 80076c2:	b085      	sub	sp, #20
 80076c4:	af00      	add	r7, sp, #0
 80076c6:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80076c8:	2300      	movs	r3, #0
 80076ca:	60fb      	str	r3, [r7, #12]
 80076cc:	e023      	b.n	8007716 <ETH_DMARxDescListInit+0x56>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	6919      	ldr	r1, [r3, #16]
 80076d2:	68fa      	ldr	r2, [r7, #12]
 80076d4:	4613      	mov	r3, r2
 80076d6:	005b      	lsls	r3, r3, #1
 80076d8:	4413      	add	r3, r2
 80076da:	00db      	lsls	r3, r3, #3
 80076dc:	440b      	add	r3, r1
 80076de:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 80076e0:	68bb      	ldr	r3, [r7, #8]
 80076e2:	2200      	movs	r2, #0
 80076e4:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 80076e6:	68bb      	ldr	r3, [r7, #8]
 80076e8:	2200      	movs	r2, #0
 80076ea:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 80076ec:	68bb      	ldr	r3, [r7, #8]
 80076ee:	2200      	movs	r2, #0
 80076f0:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 80076f2:	68bb      	ldr	r3, [r7, #8]
 80076f4:	2200      	movs	r2, #0
 80076f6:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 80076f8:	68bb      	ldr	r3, [r7, #8]
 80076fa:	2200      	movs	r2, #0
 80076fc:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 80076fe:	68bb      	ldr	r3, [r7, #8]
 8007700:	2200      	movs	r2, #0
 8007702:	615a      	str	r2, [r3, #20]


    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8007704:	68b9      	ldr	r1, [r7, #8]
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	68fa      	ldr	r2, [r7, #12]
 800770a:	3212      	adds	r2, #18
 800770c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8007710:	68fb      	ldr	r3, [r7, #12]
 8007712:	3301      	adds	r3, #1
 8007714:	60fb      	str	r3, [r7, #12]
 8007716:	68fb      	ldr	r3, [r7, #12]
 8007718:	2b03      	cmp	r3, #3
 800771a:	d9d8      	bls.n	80076ce <ETH_DMARxDescListInit+0xe>

  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	2200      	movs	r2, #0
 8007720:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	2200      	movs	r2, #0
 8007726:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	2200      	movs	r2, #0
 800772c:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	2200      	movs	r2, #0
 8007732:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	2200      	movs	r2, #0
 8007738:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1U)));
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007742:	461a      	mov	r2, r3
 8007744:	2303      	movs	r3, #3
 8007746:	f8c2 3130 	str.w	r3, [r2, #304]	; 0x130

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	691a      	ldr	r2, [r3, #16]
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	681b      	ldr	r3, [r3, #0]
 8007752:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007756:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1U))));
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	691b      	ldr	r3, [r3, #16]
 800775e:	f103 0248 	add.w	r2, r3, #72	; 0x48
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	681b      	ldr	r3, [r3, #0]
 8007766:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800776a:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
}
 800776e:	bf00      	nop
 8007770:	3714      	adds	r7, #20
 8007772:	46bd      	mov	sp, r7
 8007774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007778:	4770      	bx	lr
	...

0800777c <ETH_Prepare_Tx_Descriptors>:
  * @param  pTxConfig: Tx packet configuration
  * @param  ItMode: Enable or disable Tx EOT interrept
  * @retval Status
  */
static uint32_t ETH_Prepare_Tx_Descriptors(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig, uint32_t ItMode)
{
 800777c:	b480      	push	{r7}
 800777e:	b08d      	sub	sp, #52	; 0x34
 8007780:	af00      	add	r7, sp, #0
 8007782:	60f8      	str	r0, [r7, #12]
 8007784:	60b9      	str	r1, [r7, #8]
 8007786:	607a      	str	r2, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 8007788:	68fb      	ldr	r3, [r7, #12]
 800778a:	3318      	adds	r3, #24
 800778c:	617b      	str	r3, [r7, #20]
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 800778e:	697b      	ldr	r3, [r7, #20]
 8007790:	691b      	ldr	r3, [r3, #16]
 8007792:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t firstdescidx = dmatxdesclist->CurTxDesc;
 8007794:	697b      	ldr	r3, [r7, #20]
 8007796:	691b      	ldr	r3, [r3, #16]
 8007798:	613b      	str	r3, [r7, #16]
  uint32_t idx;
  uint32_t descnbr = 0;
 800779a:	2300      	movs	r3, #0
 800779c:	627b      	str	r3, [r7, #36]	; 0x24
  ETH_DMADescTypeDef *dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 800779e:	697b      	ldr	r3, [r7, #20]
 80077a0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80077a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80077a6:	623b      	str	r3, [r7, #32]

  ETH_BufferTypeDef  *txbuffer = pTxConfig->TxBuffer;
 80077a8:	68bb      	ldr	r3, [r7, #8]
 80077aa:	689b      	ldr	r3, [r3, #8]
 80077ac:	61fb      	str	r3, [r7, #28]
  uint32_t           bd_count = 0;
 80077ae:	2300      	movs	r3, #0
 80077b0:	61bb      	str	r3, [r7, #24]

  /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
  if ((READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCWBF_OWN) == ETH_DMATXNDESCWBF_OWN)
 80077b2:	6a3b      	ldr	r3, [r7, #32]
 80077b4:	68db      	ldr	r3, [r3, #12]
 80077b6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80077ba:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80077be:	d007      	beq.n	80077d0 <ETH_Prepare_Tx_Descriptors+0x54>
      || (dmatxdesclist->PacketAddress[descidx] != NULL))
 80077c0:	697a      	ldr	r2, [r7, #20]
 80077c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80077c4:	3304      	adds	r3, #4
 80077c6:	009b      	lsls	r3, r3, #2
 80077c8:	4413      	add	r3, r2
 80077ca:	685b      	ldr	r3, [r3, #4]
 80077cc:	2b00      	cmp	r3, #0
 80077ce:	d001      	beq.n	80077d4 <ETH_Prepare_Tx_Descriptors+0x58>
  {
    return HAL_ETH_ERROR_BUSY;
 80077d0:	2302      	movs	r3, #2
 80077d2:	e259      	b.n	8007c88 <ETH_Prepare_Tx_Descriptors+0x50c>

  /***************************************************************************/
  /*****************    Context descriptor configuration (Optional) **********/
  /***************************************************************************/
  /* If VLAN tag is enabled for this packet */
  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != (uint32_t)RESET)
 80077d4:	68bb      	ldr	r3, [r7, #8]
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	f003 0304 	and.w	r3, r3, #4
 80077dc:	2b00      	cmp	r3, #0
 80077de:	d044      	beq.n	800786a <ETH_Prepare_Tx_Descriptors+0xee>
  {
    /* Set vlan tag value */
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXCDESC_VT, pTxConfig->VlanTag);
 80077e0:	6a3b      	ldr	r3, [r7, #32]
 80077e2:	68da      	ldr	r2, [r3, #12]
 80077e4:	4b75      	ldr	r3, [pc, #468]	; (80079bc <ETH_Prepare_Tx_Descriptors+0x240>)
 80077e6:	4013      	ands	r3, r2
 80077e8:	68ba      	ldr	r2, [r7, #8]
 80077ea:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80077ec:	431a      	orrs	r2, r3
 80077ee:	6a3b      	ldr	r3, [r7, #32]
 80077f0:	60da      	str	r2, [r3, #12]
    /* Set vlan tag valid bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_VLTV);
 80077f2:	6a3b      	ldr	r3, [r7, #32]
 80077f4:	68db      	ldr	r3, [r3, #12]
 80077f6:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80077fa:	6a3b      	ldr	r3, [r7, #32]
 80077fc:	60da      	str	r2, [r3, #12]
    /* Set the descriptor as the vlan input source */
    SET_BIT(heth->Instance->MACVIR, ETH_MACVIR_VLTI);
 80077fe:	68fb      	ldr	r3, [r7, #12]
 8007800:	681b      	ldr	r3, [r3, #0]
 8007802:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8007804:	68fb      	ldr	r3, [r7, #12]
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800780c:	661a      	str	r2, [r3, #96]	; 0x60

    /* if inner VLAN is enabled */
    if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_INNERVLANTAG) != (uint32_t)RESET)
 800780e:	68bb      	ldr	r3, [r7, #8]
 8007810:	681b      	ldr	r3, [r3, #0]
 8007812:	f003 0308 	and.w	r3, r3, #8
 8007816:	2b00      	cmp	r3, #0
 8007818:	d027      	beq.n	800786a <ETH_Prepare_Tx_Descriptors+0xee>
    {
      /* Set inner vlan tag value */
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXCDESC_IVT, (pTxConfig->InnerVlanTag << 16));
 800781a:	6a3b      	ldr	r3, [r7, #32]
 800781c:	689b      	ldr	r3, [r3, #8]
 800781e:	b29a      	uxth	r2, r3
 8007820:	68bb      	ldr	r3, [r7, #8]
 8007822:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007824:	041b      	lsls	r3, r3, #16
 8007826:	431a      	orrs	r2, r3
 8007828:	6a3b      	ldr	r3, [r7, #32]
 800782a:	609a      	str	r2, [r3, #8]
      /* Set inner vlan tag valid bit */
      SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_IVLTV);
 800782c:	6a3b      	ldr	r3, [r7, #32]
 800782e:	68db      	ldr	r3, [r3, #12]
 8007830:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8007834:	6a3b      	ldr	r3, [r7, #32]
 8007836:	60da      	str	r2, [r3, #12]

      /* Set Vlan Tag control */
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXCDESC_IVTIR, pTxConfig->InnerVlanCtrl);
 8007838:	6a3b      	ldr	r3, [r7, #32]
 800783a:	68db      	ldr	r3, [r3, #12]
 800783c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8007840:	68bb      	ldr	r3, [r7, #8]
 8007842:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007844:	431a      	orrs	r2, r3
 8007846:	6a3b      	ldr	r3, [r7, #32]
 8007848:	60da      	str	r2, [r3, #12]

      /* Set the descriptor as the inner vlan input source */
      SET_BIT(heth->Instance->MACIVIR, ETH_MACIVIR_VLTI);
 800784a:	68fb      	ldr	r3, [r7, #12]
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8007850:	68fb      	ldr	r3, [r7, #12]
 8007852:	681b      	ldr	r3, [r3, #0]
 8007854:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8007858:	665a      	str	r2, [r3, #100]	; 0x64
      /* Enable double VLAN processing */
      SET_BIT(heth->Instance->MACVTR, ETH_MACVTR_EDVLP);
 800785a:	68fb      	ldr	r3, [r7, #12]
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007860:	68fb      	ldr	r3, [r7, #12]
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8007868:	651a      	str	r2, [r3, #80]	; 0x50
    }
  }

  /* if tcp segmentation is enabled for this packet */
  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != (uint32_t)RESET)
 800786a:	68bb      	ldr	r3, [r7, #8]
 800786c:	681b      	ldr	r3, [r3, #0]
 800786e:	f003 0310 	and.w	r3, r3, #16
 8007872:	2b00      	cmp	r3, #0
 8007874:	d00e      	beq.n	8007894 <ETH_Prepare_Tx_Descriptors+0x118>
  {
    /* Set MSS value */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXCDESC_MSS, pTxConfig->MaxSegmentSize);
 8007876:	6a3b      	ldr	r3, [r7, #32]
 8007878:	689a      	ldr	r2, [r3, #8]
 800787a:	4b51      	ldr	r3, [pc, #324]	; (80079c0 <ETH_Prepare_Tx_Descriptors+0x244>)
 800787c:	4013      	ands	r3, r2
 800787e:	68ba      	ldr	r2, [r7, #8]
 8007880:	6992      	ldr	r2, [r2, #24]
 8007882:	431a      	orrs	r2, r3
 8007884:	6a3b      	ldr	r3, [r7, #32]
 8007886:	609a      	str	r2, [r3, #8]
    /* Set MSS valid bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_TCMSSV);
 8007888:	6a3b      	ldr	r3, [r7, #32]
 800788a:	68db      	ldr	r3, [r3, #12]
 800788c:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 8007890:	6a3b      	ldr	r3, [r7, #32]
 8007892:	60da      	str	r2, [r3, #12]
  }

  if ((READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != (uint32_t)RESET)
 8007894:	68bb      	ldr	r3, [r7, #8]
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	f003 0304 	and.w	r3, r3, #4
 800789c:	2b00      	cmp	r3, #0
 800789e:	d105      	bne.n	80078ac <ETH_Prepare_Tx_Descriptors+0x130>
      || (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != (uint32_t)RESET))
 80078a0:	68bb      	ldr	r3, [r7, #8]
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	f003 0310 	and.w	r3, r3, #16
 80078a8:	2b00      	cmp	r3, #0
 80078aa:	d036      	beq.n	800791a <ETH_Prepare_Tx_Descriptors+0x19e>
  {
    /* Set as context descriptor */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_CTXT);
 80078ac:	6a3b      	ldr	r3, [r7, #32]
 80078ae:	68db      	ldr	r3, [r3, #12]
 80078b0:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80078b4:	6a3b      	ldr	r3, [r7, #32]
 80078b6:	60da      	str	r2, [r3, #12]
  __ASM volatile ("dmb 0xF":::"memory");
 80078b8:	f3bf 8f5f 	dmb	sy
}
 80078bc:	bf00      	nop
    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set own bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_OWN);
 80078be:	6a3b      	ldr	r3, [r7, #32]
 80078c0:	68db      	ldr	r3, [r3, #12]
 80078c2:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80078c6:	6a3b      	ldr	r3, [r7, #32]
 80078c8:	60da      	str	r2, [r3, #12]
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 80078ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80078cc:	3301      	adds	r3, #1
 80078ce:	62fb      	str	r3, [r7, #44]	; 0x2c
 80078d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80078d2:	2b03      	cmp	r3, #3
 80078d4:	d902      	bls.n	80078dc <ETH_Prepare_Tx_Descriptors+0x160>
 80078d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80078d8:	3b04      	subs	r3, #4
 80078da:	62fb      	str	r3, [r7, #44]	; 0x2c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 80078dc:	697b      	ldr	r3, [r7, #20]
 80078de:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80078e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80078e4:	623b      	str	r3, [r7, #32]

    descnbr += 1U;
 80078e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078e8:	3301      	adds	r3, #1
 80078ea:	627b      	str	r3, [r7, #36]	; 0x24

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if (READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCWBF_OWN) == ETH_DMATXNDESCWBF_OWN)
 80078ec:	6a3b      	ldr	r3, [r7, #32]
 80078ee:	68db      	ldr	r3, [r3, #12]
 80078f0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80078f4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80078f8:	d10f      	bne.n	800791a <ETH_Prepare_Tx_Descriptors+0x19e>
    {
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[firstdescidx];
 80078fa:	697b      	ldr	r3, [r7, #20]
 80078fc:	693a      	ldr	r2, [r7, #16]
 80078fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007902:	623b      	str	r3, [r7, #32]
  __ASM volatile ("dmb 0xF":::"memory");
 8007904:	f3bf 8f5f 	dmb	sy
}
 8007908:	bf00      	nop
      /* Ensure rest of descriptor is written to RAM before the OWN bit */
      __DMB();
      /* Clear own bit */
      CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_OWN);
 800790a:	6a3b      	ldr	r3, [r7, #32]
 800790c:	68db      	ldr	r3, [r3, #12]
 800790e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8007912:	6a3b      	ldr	r3, [r7, #32]
 8007914:	60da      	str	r2, [r3, #12]

      return HAL_ETH_ERROR_BUSY;
 8007916:	2302      	movs	r3, #2
 8007918:	e1b6      	b.n	8007c88 <ETH_Prepare_Tx_Descriptors+0x50c>

  /***************************************************************************/
  /*****************    Normal descriptors configuration     *****************/
  /***************************************************************************/

  descnbr += 1U;
 800791a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800791c:	3301      	adds	r3, #1
 800791e:	627b      	str	r3, [r7, #36]	; 0x24

  /* Set header or buffer 1 address */
  WRITE_REG(dmatxdesc->DESC0, (uint32_t)txbuffer->buffer);
 8007920:	69fb      	ldr	r3, [r7, #28]
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	461a      	mov	r2, r3
 8007926:	6a3b      	ldr	r3, [r7, #32]
 8007928:	601a      	str	r2, [r3, #0]
  /* Set header or buffer 1 Length */
  MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B1L, txbuffer->len);
 800792a:	6a3b      	ldr	r3, [r7, #32]
 800792c:	689a      	ldr	r2, [r3, #8]
 800792e:	4b24      	ldr	r3, [pc, #144]	; (80079c0 <ETH_Prepare_Tx_Descriptors+0x244>)
 8007930:	4013      	ands	r3, r2
 8007932:	69fa      	ldr	r2, [r7, #28]
 8007934:	6852      	ldr	r2, [r2, #4]
 8007936:	431a      	orrs	r2, r3
 8007938:	6a3b      	ldr	r3, [r7, #32]
 800793a:	609a      	str	r2, [r3, #8]

  if (txbuffer->next != NULL)
 800793c:	69fb      	ldr	r3, [r7, #28]
 800793e:	689b      	ldr	r3, [r3, #8]
 8007940:	2b00      	cmp	r3, #0
 8007942:	d012      	beq.n	800796a <ETH_Prepare_Tx_Descriptors+0x1ee>
  {
    txbuffer = txbuffer->next;
 8007944:	69fb      	ldr	r3, [r7, #28]
 8007946:	689b      	ldr	r3, [r3, #8]
 8007948:	61fb      	str	r3, [r7, #28]
    /* Set buffer 2 address */
    WRITE_REG(dmatxdesc->DESC1, (uint32_t)txbuffer->buffer);
 800794a:	69fb      	ldr	r3, [r7, #28]
 800794c:	681b      	ldr	r3, [r3, #0]
 800794e:	461a      	mov	r2, r3
 8007950:	6a3b      	ldr	r3, [r7, #32]
 8007952:	605a      	str	r2, [r3, #4]
    /* Set buffer 2 Length */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, (txbuffer->len << 16));
 8007954:	6a3b      	ldr	r3, [r7, #32]
 8007956:	689a      	ldr	r2, [r3, #8]
 8007958:	4b1a      	ldr	r3, [pc, #104]	; (80079c4 <ETH_Prepare_Tx_Descriptors+0x248>)
 800795a:	4013      	ands	r3, r2
 800795c:	69fa      	ldr	r2, [r7, #28]
 800795e:	6852      	ldr	r2, [r2, #4]
 8007960:	0412      	lsls	r2, r2, #16
 8007962:	431a      	orrs	r2, r3
 8007964:	6a3b      	ldr	r3, [r7, #32]
 8007966:	609a      	str	r2, [r3, #8]
 8007968:	e008      	b.n	800797c <ETH_Prepare_Tx_Descriptors+0x200>
  }
  else
  {
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 800796a:	6a3b      	ldr	r3, [r7, #32]
 800796c:	2200      	movs	r2, #0
 800796e:	605a      	str	r2, [r3, #4]
    /* Set buffer 2 Length */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, 0x0U);
 8007970:	6a3b      	ldr	r3, [r7, #32]
 8007972:	689a      	ldr	r2, [r3, #8]
 8007974:	4b13      	ldr	r3, [pc, #76]	; (80079c4 <ETH_Prepare_Tx_Descriptors+0x248>)
 8007976:	4013      	ands	r3, r2
 8007978:	6a3a      	ldr	r2, [r7, #32]
 800797a:	6093      	str	r3, [r2, #8]
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != (uint32_t)RESET)
 800797c:	68bb      	ldr	r3, [r7, #8]
 800797e:	681b      	ldr	r3, [r3, #0]
 8007980:	f003 0310 	and.w	r3, r3, #16
 8007984:	2b00      	cmp	r3, #0
 8007986:	d021      	beq.n	80079cc <ETH_Prepare_Tx_Descriptors+0x250>
  {
    /* Set TCP Header length */
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_THL, (pTxConfig->TCPHeaderLen << 19));
 8007988:	6a3b      	ldr	r3, [r7, #32]
 800798a:	68db      	ldr	r3, [r3, #12]
 800798c:	f423 02f0 	bic.w	r2, r3, #7864320	; 0x780000
 8007990:	68bb      	ldr	r3, [r7, #8]
 8007992:	6a1b      	ldr	r3, [r3, #32]
 8007994:	04db      	lsls	r3, r3, #19
 8007996:	431a      	orrs	r2, r3
 8007998:	6a3b      	ldr	r3, [r7, #32]
 800799a:	60da      	str	r2, [r3, #12]
    /* Set TCP payload length */
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TPL, pTxConfig->PayloadLen);
 800799c:	6a3b      	ldr	r3, [r7, #32]
 800799e:	68da      	ldr	r2, [r3, #12]
 80079a0:	4b09      	ldr	r3, [pc, #36]	; (80079c8 <ETH_Prepare_Tx_Descriptors+0x24c>)
 80079a2:	4013      	ands	r3, r2
 80079a4:	68ba      	ldr	r2, [r7, #8]
 80079a6:	69d2      	ldr	r2, [r2, #28]
 80079a8:	431a      	orrs	r2, r3
 80079aa:	6a3b      	ldr	r3, [r7, #32]
 80079ac:	60da      	str	r2, [r3, #12]
    /* Set TCP Segmentation Enabled bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TSE);
 80079ae:	6a3b      	ldr	r3, [r7, #32]
 80079b0:	68db      	ldr	r3, [r3, #12]
 80079b2:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80079b6:	6a3b      	ldr	r3, [r7, #32]
 80079b8:	60da      	str	r2, [r3, #12]
 80079ba:	e02e      	b.n	8007a1a <ETH_Prepare_Tx_Descriptors+0x29e>
 80079bc:	ffff0000 	.word	0xffff0000
 80079c0:	ffffc000 	.word	0xffffc000
 80079c4:	c000ffff 	.word	0xc000ffff
 80079c8:	fffc0000 	.word	0xfffc0000
  }
  else
  {
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FL, pTxConfig->Length);
 80079cc:	6a3b      	ldr	r3, [r7, #32]
 80079ce:	68da      	ldr	r2, [r3, #12]
 80079d0:	4b7b      	ldr	r3, [pc, #492]	; (8007bc0 <ETH_Prepare_Tx_Descriptors+0x444>)
 80079d2:	4013      	ands	r3, r2
 80079d4:	68ba      	ldr	r2, [r7, #8]
 80079d6:	6852      	ldr	r2, [r2, #4]
 80079d8:	431a      	orrs	r2, r3
 80079da:	6a3b      	ldr	r3, [r7, #32]
 80079dc:	60da      	str	r2, [r3, #12]

    if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != (uint32_t)RESET)
 80079de:	68bb      	ldr	r3, [r7, #8]
 80079e0:	681b      	ldr	r3, [r3, #0]
 80079e2:	f003 0301 	and.w	r3, r3, #1
 80079e6:	2b00      	cmp	r3, #0
 80079e8:	d008      	beq.n	80079fc <ETH_Prepare_Tx_Descriptors+0x280>
    {
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CIC, pTxConfig->ChecksumCtrl);
 80079ea:	6a3b      	ldr	r3, [r7, #32]
 80079ec:	68db      	ldr	r3, [r3, #12]
 80079ee:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80079f2:	68bb      	ldr	r3, [r7, #8]
 80079f4:	695b      	ldr	r3, [r3, #20]
 80079f6:	431a      	orrs	r2, r3
 80079f8:	6a3b      	ldr	r3, [r7, #32]
 80079fa:	60da      	str	r2, [r3, #12]
    }

    if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CRCPAD) != (uint32_t)RESET)
 80079fc:	68bb      	ldr	r3, [r7, #8]
 80079fe:	681b      	ldr	r3, [r3, #0]
 8007a00:	f003 0320 	and.w	r3, r3, #32
 8007a04:	2b00      	cmp	r3, #0
 8007a06:	d008      	beq.n	8007a1a <ETH_Prepare_Tx_Descriptors+0x29e>
    {
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CPC, pTxConfig->CRCPadCtrl);
 8007a08:	6a3b      	ldr	r3, [r7, #32]
 8007a0a:	68db      	ldr	r3, [r3, #12]
 8007a0c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8007a10:	68bb      	ldr	r3, [r7, #8]
 8007a12:	691b      	ldr	r3, [r3, #16]
 8007a14:	431a      	orrs	r2, r3
 8007a16:	6a3b      	ldr	r3, [r7, #32]
 8007a18:	60da      	str	r2, [r3, #12]
    }
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != (uint32_t)RESET)
 8007a1a:	68bb      	ldr	r3, [r7, #8]
 8007a1c:	681b      	ldr	r3, [r3, #0]
 8007a1e:	f003 0304 	and.w	r3, r3, #4
 8007a22:	2b00      	cmp	r3, #0
 8007a24:	d008      	beq.n	8007a38 <ETH_Prepare_Tx_Descriptors+0x2bc>
  {
    /* Set Vlan Tag control */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_VTIR, pTxConfig->VlanCtrl);
 8007a26:	6a3b      	ldr	r3, [r7, #32]
 8007a28:	689b      	ldr	r3, [r3, #8]
 8007a2a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8007a2e:	68bb      	ldr	r3, [r7, #8]
 8007a30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a32:	431a      	orrs	r2, r3
 8007a34:	6a3b      	ldr	r3, [r7, #32]
 8007a36:	609a      	str	r2, [r3, #8]
  }

  /* Mark it as First Descriptor */
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FD);
 8007a38:	6a3b      	ldr	r3, [r7, #32]
 8007a3a:	68db      	ldr	r3, [r3, #12]
 8007a3c:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8007a40:	6a3b      	ldr	r3, [r7, #32]
 8007a42:	60da      	str	r2, [r3, #12]
  /* Mark it as NORMAL descriptor */
  CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CTXT);
 8007a44:	6a3b      	ldr	r3, [r7, #32]
 8007a46:	68db      	ldr	r3, [r3, #12]
 8007a48:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8007a4c:	6a3b      	ldr	r3, [r7, #32]
 8007a4e:	60da      	str	r2, [r3, #12]
  __ASM volatile ("dmb 0xF":::"memory");
 8007a50:	f3bf 8f5f 	dmb	sy
}
 8007a54:	bf00      	nop
  /* Ensure rest of descriptor is written to RAM before the OWN bit */
  __DMB();
  /* set OWN bit of FIRST descriptor */
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 8007a56:	6a3b      	ldr	r3, [r7, #32]
 8007a58:	68db      	ldr	r3, [r3, #12]
 8007a5a:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8007a5e:	6a3b      	ldr	r3, [r7, #32]
 8007a60:	60da      	str	r2, [r3, #12]

  /* If source address insertion/replacement is enabled for this packet */
  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_SAIC) != (uint32_t)RESET)
 8007a62:	68bb      	ldr	r3, [r7, #8]
 8007a64:	681b      	ldr	r3, [r3, #0]
 8007a66:	f003 0302 	and.w	r3, r3, #2
 8007a6a:	2b00      	cmp	r3, #0
 8007a6c:	f000 80da 	beq.w	8007c24 <ETH_Prepare_Tx_Descriptors+0x4a8>
  {
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_SAIC, pTxConfig->SrcAddrCtrl);
 8007a70:	6a3b      	ldr	r3, [r7, #32]
 8007a72:	68db      	ldr	r3, [r3, #12]
 8007a74:	f023 7260 	bic.w	r2, r3, #58720256	; 0x3800000
 8007a78:	68bb      	ldr	r3, [r7, #8]
 8007a7a:	68db      	ldr	r3, [r3, #12]
 8007a7c:	431a      	orrs	r2, r3
 8007a7e:	6a3b      	ldr	r3, [r7, #32]
 8007a80:	60da      	str	r2, [r3, #12]
  }

  /* only if the packet is split into more than one descriptors > 1 */
  while (txbuffer->next != NULL)
 8007a82:	e0cf      	b.n	8007c24 <ETH_Prepare_Tx_Descriptors+0x4a8>
  {
    /* Clear the LD bit of previous descriptor */
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_LD);
 8007a84:	6a3b      	ldr	r3, [r7, #32]
 8007a86:	68db      	ldr	r3, [r3, #12]
 8007a88:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8007a8c:	6a3b      	ldr	r3, [r7, #32]
 8007a8e:	60da      	str	r2, [r3, #12]
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 8007a90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a92:	3301      	adds	r3, #1
 8007a94:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007a96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a98:	2b03      	cmp	r3, #3
 8007a9a:	d902      	bls.n	8007aa2 <ETH_Prepare_Tx_Descriptors+0x326>
 8007a9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a9e:	3b04      	subs	r3, #4
 8007aa0:	62fb      	str	r3, [r7, #44]	; 0x2c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8007aa2:	697b      	ldr	r3, [r7, #20]
 8007aa4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007aa6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007aaa:	623b      	str	r3, [r7, #32]

    /* Clear the FD bit of new Descriptor */
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FD);
 8007aac:	6a3b      	ldr	r3, [r7, #32]
 8007aae:	68db      	ldr	r3, [r3, #12]
 8007ab0:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8007ab4:	6a3b      	ldr	r3, [r7, #32]
 8007ab6:	60da      	str	r2, [r3, #12]

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if ((READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN) == ETH_DMATXNDESCRF_OWN)
 8007ab8:	6a3b      	ldr	r3, [r7, #32]
 8007aba:	68db      	ldr	r3, [r3, #12]
 8007abc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007ac0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007ac4:	d007      	beq.n	8007ad6 <ETH_Prepare_Tx_Descriptors+0x35a>
        || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8007ac6:	697a      	ldr	r2, [r7, #20]
 8007ac8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007aca:	3304      	adds	r3, #4
 8007acc:	009b      	lsls	r3, r3, #2
 8007ace:	4413      	add	r3, r2
 8007ad0:	685b      	ldr	r3, [r3, #4]
 8007ad2:	2b00      	cmp	r3, #0
 8007ad4:	d029      	beq.n	8007b2a <ETH_Prepare_Tx_Descriptors+0x3ae>
    {
      descidx = firstdescidx;
 8007ad6:	693b      	ldr	r3, [r7, #16]
 8007ad8:	62fb      	str	r3, [r7, #44]	; 0x2c
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8007ada:	697b      	ldr	r3, [r7, #20]
 8007adc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007ade:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007ae2:	623b      	str	r3, [r7, #32]

      /* clear previous desc own bit */
      for (idx = 0; idx < descnbr; idx ++)
 8007ae4:	2300      	movs	r3, #0
 8007ae6:	62bb      	str	r3, [r7, #40]	; 0x28
 8007ae8:	e019      	b.n	8007b1e <ETH_Prepare_Tx_Descriptors+0x3a2>
  __ASM volatile ("dmb 0xF":::"memory");
 8007aea:	f3bf 8f5f 	dmb	sy
}
 8007aee:	bf00      	nop
      {
        /* Ensure rest of descriptor is written to RAM before the OWN bit */
        __DMB();

        CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 8007af0:	6a3b      	ldr	r3, [r7, #32]
 8007af2:	68db      	ldr	r3, [r3, #12]
 8007af4:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8007af8:	6a3b      	ldr	r3, [r7, #32]
 8007afa:	60da      	str	r2, [r3, #12]

        /* Increment current tx descriptor index */
        INCR_TX_DESC_INDEX(descidx, 1U);
 8007afc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007afe:	3301      	adds	r3, #1
 8007b00:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007b02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b04:	2b03      	cmp	r3, #3
 8007b06:	d902      	bls.n	8007b0e <ETH_Prepare_Tx_Descriptors+0x392>
 8007b08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b0a:	3b04      	subs	r3, #4
 8007b0c:	62fb      	str	r3, [r7, #44]	; 0x2c
        /* Get current descriptor address */
        dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8007b0e:	697b      	ldr	r3, [r7, #20]
 8007b10:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007b12:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007b16:	623b      	str	r3, [r7, #32]
      for (idx = 0; idx < descnbr; idx ++)
 8007b18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b1a:	3301      	adds	r3, #1
 8007b1c:	62bb      	str	r3, [r7, #40]	; 0x28
 8007b1e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007b20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b22:	429a      	cmp	r2, r3
 8007b24:	d3e1      	bcc.n	8007aea <ETH_Prepare_Tx_Descriptors+0x36e>
      }

      return HAL_ETH_ERROR_BUSY;
 8007b26:	2302      	movs	r3, #2
 8007b28:	e0ae      	b.n	8007c88 <ETH_Prepare_Tx_Descriptors+0x50c>
    }

    descnbr += 1U;
 8007b2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b2c:	3301      	adds	r3, #1
 8007b2e:	627b      	str	r3, [r7, #36]	; 0x24

    /* Get the next Tx buffer in the list */
    txbuffer = txbuffer->next;
 8007b30:	69fb      	ldr	r3, [r7, #28]
 8007b32:	689b      	ldr	r3, [r3, #8]
 8007b34:	61fb      	str	r3, [r7, #28]

    /* Set header or buffer 1 address */
    WRITE_REG(dmatxdesc->DESC0, (uint32_t)txbuffer->buffer);
 8007b36:	69fb      	ldr	r3, [r7, #28]
 8007b38:	681b      	ldr	r3, [r3, #0]
 8007b3a:	461a      	mov	r2, r3
 8007b3c:	6a3b      	ldr	r3, [r7, #32]
 8007b3e:	601a      	str	r2, [r3, #0]
    /* Set header or buffer 1 Length */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B1L, txbuffer->len);
 8007b40:	6a3b      	ldr	r3, [r7, #32]
 8007b42:	689a      	ldr	r2, [r3, #8]
 8007b44:	4b1f      	ldr	r3, [pc, #124]	; (8007bc4 <ETH_Prepare_Tx_Descriptors+0x448>)
 8007b46:	4013      	ands	r3, r2
 8007b48:	69fa      	ldr	r2, [r7, #28]
 8007b4a:	6852      	ldr	r2, [r2, #4]
 8007b4c:	431a      	orrs	r2, r3
 8007b4e:	6a3b      	ldr	r3, [r7, #32]
 8007b50:	609a      	str	r2, [r3, #8]

    if (txbuffer->next != NULL)
 8007b52:	69fb      	ldr	r3, [r7, #28]
 8007b54:	689b      	ldr	r3, [r3, #8]
 8007b56:	2b00      	cmp	r3, #0
 8007b58:	d012      	beq.n	8007b80 <ETH_Prepare_Tx_Descriptors+0x404>
    {
      /* Get the next Tx buffer in the list */
      txbuffer = txbuffer->next;
 8007b5a:	69fb      	ldr	r3, [r7, #28]
 8007b5c:	689b      	ldr	r3, [r3, #8]
 8007b5e:	61fb      	str	r3, [r7, #28]
      /* Set buffer 2 address */
      WRITE_REG(dmatxdesc->DESC1, (uint32_t)txbuffer->buffer);
 8007b60:	69fb      	ldr	r3, [r7, #28]
 8007b62:	681b      	ldr	r3, [r3, #0]
 8007b64:	461a      	mov	r2, r3
 8007b66:	6a3b      	ldr	r3, [r7, #32]
 8007b68:	605a      	str	r2, [r3, #4]
      /* Set buffer 2 Length */
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, (txbuffer->len << 16));
 8007b6a:	6a3b      	ldr	r3, [r7, #32]
 8007b6c:	689a      	ldr	r2, [r3, #8]
 8007b6e:	4b16      	ldr	r3, [pc, #88]	; (8007bc8 <ETH_Prepare_Tx_Descriptors+0x44c>)
 8007b70:	4013      	ands	r3, r2
 8007b72:	69fa      	ldr	r2, [r7, #28]
 8007b74:	6852      	ldr	r2, [r2, #4]
 8007b76:	0412      	lsls	r2, r2, #16
 8007b78:	431a      	orrs	r2, r3
 8007b7a:	6a3b      	ldr	r3, [r7, #32]
 8007b7c:	609a      	str	r2, [r3, #8]
 8007b7e:	e008      	b.n	8007b92 <ETH_Prepare_Tx_Descriptors+0x416>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC1, 0x0);
 8007b80:	6a3b      	ldr	r3, [r7, #32]
 8007b82:	2200      	movs	r2, #0
 8007b84:	605a      	str	r2, [r3, #4]
      /* Set buffer 2 Length */
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, 0x0U);
 8007b86:	6a3b      	ldr	r3, [r7, #32]
 8007b88:	689a      	ldr	r2, [r3, #8]
 8007b8a:	4b0f      	ldr	r3, [pc, #60]	; (8007bc8 <ETH_Prepare_Tx_Descriptors+0x44c>)
 8007b8c:	4013      	ands	r3, r2
 8007b8e:	6a3a      	ldr	r2, [r7, #32]
 8007b90:	6093      	str	r3, [r2, #8]
    }

    if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != (uint32_t)RESET)
 8007b92:	68bb      	ldr	r3, [r7, #8]
 8007b94:	681b      	ldr	r3, [r3, #0]
 8007b96:	f003 0310 	and.w	r3, r3, #16
 8007b9a:	2b00      	cmp	r3, #0
 8007b9c:	d018      	beq.n	8007bd0 <ETH_Prepare_Tx_Descriptors+0x454>
    {
      /* Set TCP payload length */
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TPL, pTxConfig->PayloadLen);
 8007b9e:	6a3b      	ldr	r3, [r7, #32]
 8007ba0:	68da      	ldr	r2, [r3, #12]
 8007ba2:	4b0a      	ldr	r3, [pc, #40]	; (8007bcc <ETH_Prepare_Tx_Descriptors+0x450>)
 8007ba4:	4013      	ands	r3, r2
 8007ba6:	68ba      	ldr	r2, [r7, #8]
 8007ba8:	69d2      	ldr	r2, [r2, #28]
 8007baa:	431a      	orrs	r2, r3
 8007bac:	6a3b      	ldr	r3, [r7, #32]
 8007bae:	60da      	str	r2, [r3, #12]
      /* Set TCP Segmentation Enabled bit */
      SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TSE);
 8007bb0:	6a3b      	ldr	r3, [r7, #32]
 8007bb2:	68db      	ldr	r3, [r3, #12]
 8007bb4:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8007bb8:	6a3b      	ldr	r3, [r7, #32]
 8007bba:	60da      	str	r2, [r3, #12]
 8007bbc:	e020      	b.n	8007c00 <ETH_Prepare_Tx_Descriptors+0x484>
 8007bbe:	bf00      	nop
 8007bc0:	ffff8000 	.word	0xffff8000
 8007bc4:	ffffc000 	.word	0xffffc000
 8007bc8:	c000ffff 	.word	0xc000ffff
 8007bcc:	fffc0000 	.word	0xfffc0000
    }
    else
    {
      /* Set the packet length */
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FL, pTxConfig->Length);
 8007bd0:	6a3b      	ldr	r3, [r7, #32]
 8007bd2:	68da      	ldr	r2, [r3, #12]
 8007bd4:	4b2f      	ldr	r3, [pc, #188]	; (8007c94 <ETH_Prepare_Tx_Descriptors+0x518>)
 8007bd6:	4013      	ands	r3, r2
 8007bd8:	68ba      	ldr	r2, [r7, #8]
 8007bda:	6852      	ldr	r2, [r2, #4]
 8007bdc:	431a      	orrs	r2, r3
 8007bde:	6a3b      	ldr	r3, [r7, #32]
 8007be0:	60da      	str	r2, [r3, #12]

      if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != (uint32_t)RESET)
 8007be2:	68bb      	ldr	r3, [r7, #8]
 8007be4:	681b      	ldr	r3, [r3, #0]
 8007be6:	f003 0301 	and.w	r3, r3, #1
 8007bea:	2b00      	cmp	r3, #0
 8007bec:	d008      	beq.n	8007c00 <ETH_Prepare_Tx_Descriptors+0x484>
      {
        /* Checksum Insertion Control */
        MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CIC, pTxConfig->ChecksumCtrl);
 8007bee:	6a3b      	ldr	r3, [r7, #32]
 8007bf0:	68db      	ldr	r3, [r3, #12]
 8007bf2:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8007bf6:	68bb      	ldr	r3, [r7, #8]
 8007bf8:	695b      	ldr	r3, [r3, #20]
 8007bfa:	431a      	orrs	r2, r3
 8007bfc:	6a3b      	ldr	r3, [r7, #32]
 8007bfe:	60da      	str	r2, [r3, #12]
      }
    }

    bd_count += 1U;
 8007c00:	69bb      	ldr	r3, [r7, #24]
 8007c02:	3301      	adds	r3, #1
 8007c04:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("dmb 0xF":::"memory");
 8007c06:	f3bf 8f5f 	dmb	sy
}
 8007c0a:	bf00      	nop

    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set Own bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 8007c0c:	6a3b      	ldr	r3, [r7, #32]
 8007c0e:	68db      	ldr	r3, [r3, #12]
 8007c10:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8007c14:	6a3b      	ldr	r3, [r7, #32]
 8007c16:	60da      	str	r2, [r3, #12]
    /* Mark it as NORMAL descriptor */
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CTXT);
 8007c18:	6a3b      	ldr	r3, [r7, #32]
 8007c1a:	68db      	ldr	r3, [r3, #12]
 8007c1c:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8007c20:	6a3b      	ldr	r3, [r7, #32]
 8007c22:	60da      	str	r2, [r3, #12]
  while (txbuffer->next != NULL)
 8007c24:	69fb      	ldr	r3, [r7, #28]
 8007c26:	689b      	ldr	r3, [r3, #8]
 8007c28:	2b00      	cmp	r3, #0
 8007c2a:	f47f af2b 	bne.w	8007a84 <ETH_Prepare_Tx_Descriptors+0x308>
  }

  if (ItMode != ((uint32_t)RESET))
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	2b00      	cmp	r3, #0
 8007c32:	d006      	beq.n	8007c42 <ETH_Prepare_Tx_Descriptors+0x4c6>
  {
    /* Set Interrupt on completion bit */
    SET_BIT(dmatxdesc->DESC2, ETH_DMATXNDESCRF_IOC);
 8007c34:	6a3b      	ldr	r3, [r7, #32]
 8007c36:	689b      	ldr	r3, [r3, #8]
 8007c38:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8007c3c:	6a3b      	ldr	r3, [r7, #32]
 8007c3e:	609a      	str	r2, [r3, #8]
 8007c40:	e005      	b.n	8007c4e <ETH_Prepare_Tx_Descriptors+0x4d2>
  }
  else
  {
    /* Clear Interrupt on completion bit */
    CLEAR_BIT(dmatxdesc->DESC2, ETH_DMATXNDESCRF_IOC);
 8007c42:	6a3b      	ldr	r3, [r7, #32]
 8007c44:	689b      	ldr	r3, [r3, #8]
 8007c46:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8007c4a:	6a3b      	ldr	r3, [r7, #32]
 8007c4c:	609a      	str	r2, [r3, #8]
  }

  /* Mark it as LAST descriptor */
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_LD);
 8007c4e:	6a3b      	ldr	r3, [r7, #32]
 8007c50:	68db      	ldr	r3, [r3, #12]
 8007c52:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8007c56:	6a3b      	ldr	r3, [r7, #32]
 8007c58:	60da      	str	r2, [r3, #12]
  /* Save the current packet address to expose it to the application */
  dmatxdesclist->PacketAddress[descidx] = dmatxdesclist->CurrentPacketAddress;
 8007c5a:	697b      	ldr	r3, [r7, #20]
 8007c5c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007c5e:	6979      	ldr	r1, [r7, #20]
 8007c60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c62:	3304      	adds	r3, #4
 8007c64:	009b      	lsls	r3, r3, #2
 8007c66:	440b      	add	r3, r1
 8007c68:	605a      	str	r2, [r3, #4]

  dmatxdesclist->CurTxDesc = descidx;
 8007c6a:	697b      	ldr	r3, [r7, #20]
 8007c6c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007c6e:	611a      	str	r2, [r3, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8007c70:	b672      	cpsid	i
}
 8007c72:	bf00      	nop

  /* disable the interrupt */
  __disable_irq();

  dmatxdesclist->BuffersInUse += bd_count + 1U;
 8007c74:	697b      	ldr	r3, [r7, #20]
 8007c76:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007c78:	69bb      	ldr	r3, [r7, #24]
 8007c7a:	4413      	add	r3, r2
 8007c7c:	1c5a      	adds	r2, r3, #1
 8007c7e:	697b      	ldr	r3, [r7, #20]
 8007c80:	629a      	str	r2, [r3, #40]	; 0x28
  __ASM volatile ("cpsie i" : : : "memory");
 8007c82:	b662      	cpsie	i
}
 8007c84:	bf00      	nop
  /* Enable interrupts back */
  __enable_irq();


  /* Return function status */
  return HAL_ETH_ERROR_NONE;
 8007c86:	2300      	movs	r3, #0
}
 8007c88:	4618      	mov	r0, r3
 8007c8a:	3734      	adds	r7, #52	; 0x34
 8007c8c:	46bd      	mov	sp, r7
 8007c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c92:	4770      	bx	lr
 8007c94:	ffff8000 	.word	0xffff8000

08007c98 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8007c98:	b480      	push	{r7}
 8007c9a:	b089      	sub	sp, #36	; 0x24
 8007c9c:	af00      	add	r7, sp, #0
 8007c9e:	6078      	str	r0, [r7, #4]
 8007ca0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8007ca2:	2300      	movs	r3, #0
 8007ca4:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8007ca6:	4b89      	ldr	r3, [pc, #548]	; (8007ecc <HAL_GPIO_Init+0x234>)
 8007ca8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8007caa:	e194      	b.n	8007fd6 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8007cac:	683b      	ldr	r3, [r7, #0]
 8007cae:	681a      	ldr	r2, [r3, #0]
 8007cb0:	2101      	movs	r1, #1
 8007cb2:	69fb      	ldr	r3, [r7, #28]
 8007cb4:	fa01 f303 	lsl.w	r3, r1, r3
 8007cb8:	4013      	ands	r3, r2
 8007cba:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8007cbc:	693b      	ldr	r3, [r7, #16]
 8007cbe:	2b00      	cmp	r3, #0
 8007cc0:	f000 8186 	beq.w	8007fd0 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8007cc4:	683b      	ldr	r3, [r7, #0]
 8007cc6:	685b      	ldr	r3, [r3, #4]
 8007cc8:	f003 0303 	and.w	r3, r3, #3
 8007ccc:	2b01      	cmp	r3, #1
 8007cce:	d005      	beq.n	8007cdc <HAL_GPIO_Init+0x44>
 8007cd0:	683b      	ldr	r3, [r7, #0]
 8007cd2:	685b      	ldr	r3, [r3, #4]
 8007cd4:	f003 0303 	and.w	r3, r3, #3
 8007cd8:	2b02      	cmp	r3, #2
 8007cda:	d130      	bne.n	8007d3e <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	689b      	ldr	r3, [r3, #8]
 8007ce0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8007ce2:	69fb      	ldr	r3, [r7, #28]
 8007ce4:	005b      	lsls	r3, r3, #1
 8007ce6:	2203      	movs	r2, #3
 8007ce8:	fa02 f303 	lsl.w	r3, r2, r3
 8007cec:	43db      	mvns	r3, r3
 8007cee:	69ba      	ldr	r2, [r7, #24]
 8007cf0:	4013      	ands	r3, r2
 8007cf2:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8007cf4:	683b      	ldr	r3, [r7, #0]
 8007cf6:	68da      	ldr	r2, [r3, #12]
 8007cf8:	69fb      	ldr	r3, [r7, #28]
 8007cfa:	005b      	lsls	r3, r3, #1
 8007cfc:	fa02 f303 	lsl.w	r3, r2, r3
 8007d00:	69ba      	ldr	r2, [r7, #24]
 8007d02:	4313      	orrs	r3, r2
 8007d04:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	69ba      	ldr	r2, [r7, #24]
 8007d0a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	685b      	ldr	r3, [r3, #4]
 8007d10:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8007d12:	2201      	movs	r2, #1
 8007d14:	69fb      	ldr	r3, [r7, #28]
 8007d16:	fa02 f303 	lsl.w	r3, r2, r3
 8007d1a:	43db      	mvns	r3, r3
 8007d1c:	69ba      	ldr	r2, [r7, #24]
 8007d1e:	4013      	ands	r3, r2
 8007d20:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8007d22:	683b      	ldr	r3, [r7, #0]
 8007d24:	685b      	ldr	r3, [r3, #4]
 8007d26:	091b      	lsrs	r3, r3, #4
 8007d28:	f003 0201 	and.w	r2, r3, #1
 8007d2c:	69fb      	ldr	r3, [r7, #28]
 8007d2e:	fa02 f303 	lsl.w	r3, r2, r3
 8007d32:	69ba      	ldr	r2, [r7, #24]
 8007d34:	4313      	orrs	r3, r2
 8007d36:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	69ba      	ldr	r2, [r7, #24]
 8007d3c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8007d3e:	683b      	ldr	r3, [r7, #0]
 8007d40:	685b      	ldr	r3, [r3, #4]
 8007d42:	f003 0303 	and.w	r3, r3, #3
 8007d46:	2b03      	cmp	r3, #3
 8007d48:	d017      	beq.n	8007d7a <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	68db      	ldr	r3, [r3, #12]
 8007d4e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8007d50:	69fb      	ldr	r3, [r7, #28]
 8007d52:	005b      	lsls	r3, r3, #1
 8007d54:	2203      	movs	r2, #3
 8007d56:	fa02 f303 	lsl.w	r3, r2, r3
 8007d5a:	43db      	mvns	r3, r3
 8007d5c:	69ba      	ldr	r2, [r7, #24]
 8007d5e:	4013      	ands	r3, r2
 8007d60:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8007d62:	683b      	ldr	r3, [r7, #0]
 8007d64:	689a      	ldr	r2, [r3, #8]
 8007d66:	69fb      	ldr	r3, [r7, #28]
 8007d68:	005b      	lsls	r3, r3, #1
 8007d6a:	fa02 f303 	lsl.w	r3, r2, r3
 8007d6e:	69ba      	ldr	r2, [r7, #24]
 8007d70:	4313      	orrs	r3, r2
 8007d72:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	69ba      	ldr	r2, [r7, #24]
 8007d78:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8007d7a:	683b      	ldr	r3, [r7, #0]
 8007d7c:	685b      	ldr	r3, [r3, #4]
 8007d7e:	f003 0303 	and.w	r3, r3, #3
 8007d82:	2b02      	cmp	r3, #2
 8007d84:	d123      	bne.n	8007dce <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8007d86:	69fb      	ldr	r3, [r7, #28]
 8007d88:	08da      	lsrs	r2, r3, #3
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	3208      	adds	r2, #8
 8007d8e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007d92:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8007d94:	69fb      	ldr	r3, [r7, #28]
 8007d96:	f003 0307 	and.w	r3, r3, #7
 8007d9a:	009b      	lsls	r3, r3, #2
 8007d9c:	220f      	movs	r2, #15
 8007d9e:	fa02 f303 	lsl.w	r3, r2, r3
 8007da2:	43db      	mvns	r3, r3
 8007da4:	69ba      	ldr	r2, [r7, #24]
 8007da6:	4013      	ands	r3, r2
 8007da8:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8007daa:	683b      	ldr	r3, [r7, #0]
 8007dac:	691a      	ldr	r2, [r3, #16]
 8007dae:	69fb      	ldr	r3, [r7, #28]
 8007db0:	f003 0307 	and.w	r3, r3, #7
 8007db4:	009b      	lsls	r3, r3, #2
 8007db6:	fa02 f303 	lsl.w	r3, r2, r3
 8007dba:	69ba      	ldr	r2, [r7, #24]
 8007dbc:	4313      	orrs	r3, r2
 8007dbe:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8007dc0:	69fb      	ldr	r3, [r7, #28]
 8007dc2:	08da      	lsrs	r2, r3, #3
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	3208      	adds	r2, #8
 8007dc8:	69b9      	ldr	r1, [r7, #24]
 8007dca:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	681b      	ldr	r3, [r3, #0]
 8007dd2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8007dd4:	69fb      	ldr	r3, [r7, #28]
 8007dd6:	005b      	lsls	r3, r3, #1
 8007dd8:	2203      	movs	r2, #3
 8007dda:	fa02 f303 	lsl.w	r3, r2, r3
 8007dde:	43db      	mvns	r3, r3
 8007de0:	69ba      	ldr	r2, [r7, #24]
 8007de2:	4013      	ands	r3, r2
 8007de4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8007de6:	683b      	ldr	r3, [r7, #0]
 8007de8:	685b      	ldr	r3, [r3, #4]
 8007dea:	f003 0203 	and.w	r2, r3, #3
 8007dee:	69fb      	ldr	r3, [r7, #28]
 8007df0:	005b      	lsls	r3, r3, #1
 8007df2:	fa02 f303 	lsl.w	r3, r2, r3
 8007df6:	69ba      	ldr	r2, [r7, #24]
 8007df8:	4313      	orrs	r3, r2
 8007dfa:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	69ba      	ldr	r2, [r7, #24]
 8007e00:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8007e02:	683b      	ldr	r3, [r7, #0]
 8007e04:	685b      	ldr	r3, [r3, #4]
 8007e06:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8007e0a:	2b00      	cmp	r3, #0
 8007e0c:	f000 80e0 	beq.w	8007fd0 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007e10:	4b2f      	ldr	r3, [pc, #188]	; (8007ed0 <HAL_GPIO_Init+0x238>)
 8007e12:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8007e16:	4a2e      	ldr	r2, [pc, #184]	; (8007ed0 <HAL_GPIO_Init+0x238>)
 8007e18:	f043 0302 	orr.w	r3, r3, #2
 8007e1c:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8007e20:	4b2b      	ldr	r3, [pc, #172]	; (8007ed0 <HAL_GPIO_Init+0x238>)
 8007e22:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8007e26:	f003 0302 	and.w	r3, r3, #2
 8007e2a:	60fb      	str	r3, [r7, #12]
 8007e2c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8007e2e:	4a29      	ldr	r2, [pc, #164]	; (8007ed4 <HAL_GPIO_Init+0x23c>)
 8007e30:	69fb      	ldr	r3, [r7, #28]
 8007e32:	089b      	lsrs	r3, r3, #2
 8007e34:	3302      	adds	r3, #2
 8007e36:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007e3a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8007e3c:	69fb      	ldr	r3, [r7, #28]
 8007e3e:	f003 0303 	and.w	r3, r3, #3
 8007e42:	009b      	lsls	r3, r3, #2
 8007e44:	220f      	movs	r2, #15
 8007e46:	fa02 f303 	lsl.w	r3, r2, r3
 8007e4a:	43db      	mvns	r3, r3
 8007e4c:	69ba      	ldr	r2, [r7, #24]
 8007e4e:	4013      	ands	r3, r2
 8007e50:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	4a20      	ldr	r2, [pc, #128]	; (8007ed8 <HAL_GPIO_Init+0x240>)
 8007e56:	4293      	cmp	r3, r2
 8007e58:	d052      	beq.n	8007f00 <HAL_GPIO_Init+0x268>
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	4a1f      	ldr	r2, [pc, #124]	; (8007edc <HAL_GPIO_Init+0x244>)
 8007e5e:	4293      	cmp	r3, r2
 8007e60:	d031      	beq.n	8007ec6 <HAL_GPIO_Init+0x22e>
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	4a1e      	ldr	r2, [pc, #120]	; (8007ee0 <HAL_GPIO_Init+0x248>)
 8007e66:	4293      	cmp	r3, r2
 8007e68:	d02b      	beq.n	8007ec2 <HAL_GPIO_Init+0x22a>
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	4a1d      	ldr	r2, [pc, #116]	; (8007ee4 <HAL_GPIO_Init+0x24c>)
 8007e6e:	4293      	cmp	r3, r2
 8007e70:	d025      	beq.n	8007ebe <HAL_GPIO_Init+0x226>
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	4a1c      	ldr	r2, [pc, #112]	; (8007ee8 <HAL_GPIO_Init+0x250>)
 8007e76:	4293      	cmp	r3, r2
 8007e78:	d01f      	beq.n	8007eba <HAL_GPIO_Init+0x222>
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	4a1b      	ldr	r2, [pc, #108]	; (8007eec <HAL_GPIO_Init+0x254>)
 8007e7e:	4293      	cmp	r3, r2
 8007e80:	d019      	beq.n	8007eb6 <HAL_GPIO_Init+0x21e>
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	4a1a      	ldr	r2, [pc, #104]	; (8007ef0 <HAL_GPIO_Init+0x258>)
 8007e86:	4293      	cmp	r3, r2
 8007e88:	d013      	beq.n	8007eb2 <HAL_GPIO_Init+0x21a>
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	4a19      	ldr	r2, [pc, #100]	; (8007ef4 <HAL_GPIO_Init+0x25c>)
 8007e8e:	4293      	cmp	r3, r2
 8007e90:	d00d      	beq.n	8007eae <HAL_GPIO_Init+0x216>
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	4a18      	ldr	r2, [pc, #96]	; (8007ef8 <HAL_GPIO_Init+0x260>)
 8007e96:	4293      	cmp	r3, r2
 8007e98:	d007      	beq.n	8007eaa <HAL_GPIO_Init+0x212>
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	4a17      	ldr	r2, [pc, #92]	; (8007efc <HAL_GPIO_Init+0x264>)
 8007e9e:	4293      	cmp	r3, r2
 8007ea0:	d101      	bne.n	8007ea6 <HAL_GPIO_Init+0x20e>
 8007ea2:	2309      	movs	r3, #9
 8007ea4:	e02d      	b.n	8007f02 <HAL_GPIO_Init+0x26a>
 8007ea6:	230a      	movs	r3, #10
 8007ea8:	e02b      	b.n	8007f02 <HAL_GPIO_Init+0x26a>
 8007eaa:	2308      	movs	r3, #8
 8007eac:	e029      	b.n	8007f02 <HAL_GPIO_Init+0x26a>
 8007eae:	2307      	movs	r3, #7
 8007eb0:	e027      	b.n	8007f02 <HAL_GPIO_Init+0x26a>
 8007eb2:	2306      	movs	r3, #6
 8007eb4:	e025      	b.n	8007f02 <HAL_GPIO_Init+0x26a>
 8007eb6:	2305      	movs	r3, #5
 8007eb8:	e023      	b.n	8007f02 <HAL_GPIO_Init+0x26a>
 8007eba:	2304      	movs	r3, #4
 8007ebc:	e021      	b.n	8007f02 <HAL_GPIO_Init+0x26a>
 8007ebe:	2303      	movs	r3, #3
 8007ec0:	e01f      	b.n	8007f02 <HAL_GPIO_Init+0x26a>
 8007ec2:	2302      	movs	r3, #2
 8007ec4:	e01d      	b.n	8007f02 <HAL_GPIO_Init+0x26a>
 8007ec6:	2301      	movs	r3, #1
 8007ec8:	e01b      	b.n	8007f02 <HAL_GPIO_Init+0x26a>
 8007eca:	bf00      	nop
 8007ecc:	58000080 	.word	0x58000080
 8007ed0:	58024400 	.word	0x58024400
 8007ed4:	58000400 	.word	0x58000400
 8007ed8:	58020000 	.word	0x58020000
 8007edc:	58020400 	.word	0x58020400
 8007ee0:	58020800 	.word	0x58020800
 8007ee4:	58020c00 	.word	0x58020c00
 8007ee8:	58021000 	.word	0x58021000
 8007eec:	58021400 	.word	0x58021400
 8007ef0:	58021800 	.word	0x58021800
 8007ef4:	58021c00 	.word	0x58021c00
 8007ef8:	58022000 	.word	0x58022000
 8007efc:	58022400 	.word	0x58022400
 8007f00:	2300      	movs	r3, #0
 8007f02:	69fa      	ldr	r2, [r7, #28]
 8007f04:	f002 0203 	and.w	r2, r2, #3
 8007f08:	0092      	lsls	r2, r2, #2
 8007f0a:	4093      	lsls	r3, r2
 8007f0c:	69ba      	ldr	r2, [r7, #24]
 8007f0e:	4313      	orrs	r3, r2
 8007f10:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8007f12:	4938      	ldr	r1, [pc, #224]	; (8007ff4 <HAL_GPIO_Init+0x35c>)
 8007f14:	69fb      	ldr	r3, [r7, #28]
 8007f16:	089b      	lsrs	r3, r3, #2
 8007f18:	3302      	adds	r3, #2
 8007f1a:	69ba      	ldr	r2, [r7, #24]
 8007f1c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8007f20:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007f24:	681b      	ldr	r3, [r3, #0]
 8007f26:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007f28:	693b      	ldr	r3, [r7, #16]
 8007f2a:	43db      	mvns	r3, r3
 8007f2c:	69ba      	ldr	r2, [r7, #24]
 8007f2e:	4013      	ands	r3, r2
 8007f30:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8007f32:	683b      	ldr	r3, [r7, #0]
 8007f34:	685b      	ldr	r3, [r3, #4]
 8007f36:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007f3a:	2b00      	cmp	r3, #0
 8007f3c:	d003      	beq.n	8007f46 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8007f3e:	69ba      	ldr	r2, [r7, #24]
 8007f40:	693b      	ldr	r3, [r7, #16]
 8007f42:	4313      	orrs	r3, r2
 8007f44:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8007f46:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007f4a:	69bb      	ldr	r3, [r7, #24]
 8007f4c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8007f4e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007f52:	685b      	ldr	r3, [r3, #4]
 8007f54:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007f56:	693b      	ldr	r3, [r7, #16]
 8007f58:	43db      	mvns	r3, r3
 8007f5a:	69ba      	ldr	r2, [r7, #24]
 8007f5c:	4013      	ands	r3, r2
 8007f5e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8007f60:	683b      	ldr	r3, [r7, #0]
 8007f62:	685b      	ldr	r3, [r3, #4]
 8007f64:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007f68:	2b00      	cmp	r3, #0
 8007f6a:	d003      	beq.n	8007f74 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8007f6c:	69ba      	ldr	r2, [r7, #24]
 8007f6e:	693b      	ldr	r3, [r7, #16]
 8007f70:	4313      	orrs	r3, r2
 8007f72:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8007f74:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007f78:	69bb      	ldr	r3, [r7, #24]
 8007f7a:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8007f7c:	697b      	ldr	r3, [r7, #20]
 8007f7e:	685b      	ldr	r3, [r3, #4]
 8007f80:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007f82:	693b      	ldr	r3, [r7, #16]
 8007f84:	43db      	mvns	r3, r3
 8007f86:	69ba      	ldr	r2, [r7, #24]
 8007f88:	4013      	ands	r3, r2
 8007f8a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8007f8c:	683b      	ldr	r3, [r7, #0]
 8007f8e:	685b      	ldr	r3, [r3, #4]
 8007f90:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007f94:	2b00      	cmp	r3, #0
 8007f96:	d003      	beq.n	8007fa0 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8007f98:	69ba      	ldr	r2, [r7, #24]
 8007f9a:	693b      	ldr	r3, [r7, #16]
 8007f9c:	4313      	orrs	r3, r2
 8007f9e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8007fa0:	697b      	ldr	r3, [r7, #20]
 8007fa2:	69ba      	ldr	r2, [r7, #24]
 8007fa4:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8007fa6:	697b      	ldr	r3, [r7, #20]
 8007fa8:	681b      	ldr	r3, [r3, #0]
 8007faa:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007fac:	693b      	ldr	r3, [r7, #16]
 8007fae:	43db      	mvns	r3, r3
 8007fb0:	69ba      	ldr	r2, [r7, #24]
 8007fb2:	4013      	ands	r3, r2
 8007fb4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8007fb6:	683b      	ldr	r3, [r7, #0]
 8007fb8:	685b      	ldr	r3, [r3, #4]
 8007fba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007fbe:	2b00      	cmp	r3, #0
 8007fc0:	d003      	beq.n	8007fca <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8007fc2:	69ba      	ldr	r2, [r7, #24]
 8007fc4:	693b      	ldr	r3, [r7, #16]
 8007fc6:	4313      	orrs	r3, r2
 8007fc8:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8007fca:	697b      	ldr	r3, [r7, #20]
 8007fcc:	69ba      	ldr	r2, [r7, #24]
 8007fce:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8007fd0:	69fb      	ldr	r3, [r7, #28]
 8007fd2:	3301      	adds	r3, #1
 8007fd4:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8007fd6:	683b      	ldr	r3, [r7, #0]
 8007fd8:	681a      	ldr	r2, [r3, #0]
 8007fda:	69fb      	ldr	r3, [r7, #28]
 8007fdc:	fa22 f303 	lsr.w	r3, r2, r3
 8007fe0:	2b00      	cmp	r3, #0
 8007fe2:	f47f ae63 	bne.w	8007cac <HAL_GPIO_Init+0x14>
  }
}
 8007fe6:	bf00      	nop
 8007fe8:	bf00      	nop
 8007fea:	3724      	adds	r7, #36	; 0x24
 8007fec:	46bd      	mov	sp, r7
 8007fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ff2:	4770      	bx	lr
 8007ff4:	58000400 	.word	0x58000400

08007ff8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8007ff8:	b480      	push	{r7}
 8007ffa:	b085      	sub	sp, #20
 8007ffc:	af00      	add	r7, sp, #0
 8007ffe:	6078      	str	r0, [r7, #4]
 8008000:	460b      	mov	r3, r1
 8008002:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	691a      	ldr	r2, [r3, #16]
 8008008:	887b      	ldrh	r3, [r7, #2]
 800800a:	4013      	ands	r3, r2
 800800c:	2b00      	cmp	r3, #0
 800800e:	d002      	beq.n	8008016 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8008010:	2301      	movs	r3, #1
 8008012:	73fb      	strb	r3, [r7, #15]
 8008014:	e001      	b.n	800801a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8008016:	2300      	movs	r3, #0
 8008018:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800801a:	7bfb      	ldrb	r3, [r7, #15]
}
 800801c:	4618      	mov	r0, r3
 800801e:	3714      	adds	r7, #20
 8008020:	46bd      	mov	sp, r7
 8008022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008026:	4770      	bx	lr

08008028 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8008028:	b480      	push	{r7}
 800802a:	b083      	sub	sp, #12
 800802c:	af00      	add	r7, sp, #0
 800802e:	6078      	str	r0, [r7, #4]
 8008030:	460b      	mov	r3, r1
 8008032:	807b      	strh	r3, [r7, #2]
 8008034:	4613      	mov	r3, r2
 8008036:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8008038:	787b      	ldrb	r3, [r7, #1]
 800803a:	2b00      	cmp	r3, #0
 800803c:	d003      	beq.n	8008046 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800803e:	887a      	ldrh	r2, [r7, #2]
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8008044:	e003      	b.n	800804e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8008046:	887b      	ldrh	r3, [r7, #2]
 8008048:	041a      	lsls	r2, r3, #16
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	619a      	str	r2, [r3, #24]
}
 800804e:	bf00      	nop
 8008050:	370c      	adds	r7, #12
 8008052:	46bd      	mov	sp, r7
 8008054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008058:	4770      	bx	lr

0800805a <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800805a:	b480      	push	{r7}
 800805c:	b085      	sub	sp, #20
 800805e:	af00      	add	r7, sp, #0
 8008060:	6078      	str	r0, [r7, #4]
 8008062:	460b      	mov	r3, r1
 8008064:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	695b      	ldr	r3, [r3, #20]
 800806a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800806c:	887a      	ldrh	r2, [r7, #2]
 800806e:	68fb      	ldr	r3, [r7, #12]
 8008070:	4013      	ands	r3, r2
 8008072:	041a      	lsls	r2, r3, #16
 8008074:	68fb      	ldr	r3, [r7, #12]
 8008076:	43d9      	mvns	r1, r3
 8008078:	887b      	ldrh	r3, [r7, #2]
 800807a:	400b      	ands	r3, r1
 800807c:	431a      	orrs	r2, r3
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	619a      	str	r2, [r3, #24]
}
 8008082:	bf00      	nop
 8008084:	3714      	adds	r7, #20
 8008086:	46bd      	mov	sp, r7
 8008088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800808c:	4770      	bx	lr

0800808e <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800808e:	b580      	push	{r7, lr}
 8008090:	b082      	sub	sp, #8
 8008092:	af00      	add	r7, sp, #0
 8008094:	4603      	mov	r3, r0
 8008096:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 8008098:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800809c:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80080a0:	88fb      	ldrh	r3, [r7, #6]
 80080a2:	4013      	ands	r3, r2
 80080a4:	2b00      	cmp	r3, #0
 80080a6:	d008      	beq.n	80080ba <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80080a8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80080ac:	88fb      	ldrh	r3, [r7, #6]
 80080ae:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80080b2:	88fb      	ldrh	r3, [r7, #6]
 80080b4:	4618      	mov	r0, r3
 80080b6:	f000 f804 	bl	80080c2 <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 80080ba:	bf00      	nop
 80080bc:	3708      	adds	r7, #8
 80080be:	46bd      	mov	sp, r7
 80080c0:	bd80      	pop	{r7, pc}

080080c2 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80080c2:	b480      	push	{r7}
 80080c4:	b083      	sub	sp, #12
 80080c6:	af00      	add	r7, sp, #0
 80080c8:	4603      	mov	r3, r0
 80080ca:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80080cc:	bf00      	nop
 80080ce:	370c      	adds	r7, #12
 80080d0:	46bd      	mov	sp, r7
 80080d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080d6:	4770      	bx	lr

080080d8 <HAL_HRTIM_Init>:
  * @brief  Initialize a HRTIM instance
  * @param  hhrtim pointer to HAL HRTIM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HRTIM_Init(HRTIM_HandleTypeDef * hhrtim)
{
 80080d8:	b580      	push	{r7, lr}
 80080da:	b086      	sub	sp, #24
 80080dc:	af00      	add	r7, sp, #0
 80080de:	6078      	str	r0, [r7, #4]
  uint8_t timer_idx;
  uint32_t hrtim_mcr;

  /* Check the HRTIM handle allocation */
  if(hhrtim == NULL)
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	2b00      	cmp	r3, #0
 80080e4:	d101      	bne.n	80080ea <HAL_HRTIM_Init+0x12>
  {
    return HAL_ERROR;
 80080e6:	2301      	movs	r3, #1
 80080e8:	e0bd      	b.n	8008266 <HAL_HRTIM_Init+0x18e>
    }
  }
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */

  /* Set the HRTIM state */
  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	2202      	movs	r2, #2
 80080ee:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  /* Initialize the DMA handles */
  hhrtim->hdmaMaster = (DMA_HandleTypeDef *)NULL;
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	2200      	movs	r2, #0
 80080f6:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
  hhrtim->hdmaTimerA = (DMA_HandleTypeDef *)NULL;
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	2200      	movs	r2, #0
 80080fe:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  hhrtim->hdmaTimerB = (DMA_HandleTypeDef *)NULL;
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	2200      	movs	r2, #0
 8008106:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
  hhrtim->hdmaTimerC = (DMA_HandleTypeDef *)NULL;
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	2200      	movs	r2, #0
 800810e:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
  hhrtim->hdmaTimerD = (DMA_HandleTypeDef *)NULL;
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	2200      	movs	r2, #0
 8008116:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
  hhrtim->hdmaTimerE = (DMA_HandleTypeDef *)NULL;
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	2200      	movs	r2, #0
 800811e:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8

  /* HRTIM output synchronization configuration (if required) */
  if ((hhrtim->Init.SyncOptions & HRTIM_SYNCOPTION_MASTER) != (uint32_t)RESET)
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	689b      	ldr	r3, [r3, #8]
 8008126:	f003 0301 	and.w	r3, r3, #1
 800812a:	2b00      	cmp	r3, #0
 800812c:	d031      	beq.n	8008192 <HAL_HRTIM_Init+0xba>
    assert_param(IS_HRTIM_SYNCOUTPUTPOLARITY(hhrtim->Init.SyncOutputPolarity));

    /* The synchronization output initialization procedure must be done prior
       to the configuration of the MCU outputs (done within HAL_HRTIM_MspInit)
    */
    if (hhrtim->Instance == HRTIM1)
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	681b      	ldr	r3, [r3, #0]
 8008132:	4a4f      	ldr	r2, [pc, #316]	; (8008270 <HAL_HRTIM_Init+0x198>)
 8008134:	4293      	cmp	r3, r2
 8008136:	d10e      	bne.n	8008156 <HAL_HRTIM_Init+0x7e>
    {
      /* Enable the HRTIM peripheral clock */
      __HAL_RCC_HRTIM1_CLK_ENABLE();
 8008138:	4b4e      	ldr	r3, [pc, #312]	; (8008274 <HAL_HRTIM_Init+0x19c>)
 800813a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800813e:	4a4d      	ldr	r2, [pc, #308]	; (8008274 <HAL_HRTIM_Init+0x19c>)
 8008140:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8008144:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8008148:	4b4a      	ldr	r3, [pc, #296]	; (8008274 <HAL_HRTIM_Init+0x19c>)
 800814a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800814e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008152:	60fb      	str	r3, [r7, #12]
 8008154:	68fb      	ldr	r3, [r7, #12]
    }

    hrtim_mcr = hhrtim->Instance->sMasterRegs.MCR;
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	681b      	ldr	r3, [r3, #0]
 800815a:	681b      	ldr	r3, [r3, #0]
 800815c:	613b      	str	r3, [r7, #16]

    /* Set the event to be sent on the synchronization output */
    hrtim_mcr &= ~(HRTIM_MCR_SYNC_SRC);
 800815e:	693b      	ldr	r3, [r7, #16]
 8008160:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8008164:	613b      	str	r3, [r7, #16]
    hrtim_mcr |= (hhrtim->Init.SyncOutputSource & HRTIM_MCR_SYNC_SRC);
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	691b      	ldr	r3, [r3, #16]
 800816a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800816e:	693a      	ldr	r2, [r7, #16]
 8008170:	4313      	orrs	r3, r2
 8008172:	613b      	str	r3, [r7, #16]

    /* Set the polarity of the synchronization output */
    hrtim_mcr &= ~(HRTIM_MCR_SYNC_OUT);
 8008174:	693b      	ldr	r3, [r7, #16]
 8008176:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800817a:	613b      	str	r3, [r7, #16]
    hrtim_mcr |= (hhrtim->Init.SyncOutputPolarity & HRTIM_MCR_SYNC_OUT);
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	695b      	ldr	r3, [r3, #20]
 8008180:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8008184:	693a      	ldr	r2, [r7, #16]
 8008186:	4313      	orrs	r3, r2
 8008188:	613b      	str	r3, [r7, #16]

    /* Update the HRTIM registers */
    hhrtim->Instance->sMasterRegs.MCR = hrtim_mcr;
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	681b      	ldr	r3, [r3, #0]
 800818e:	693a      	ldr	r2, [r7, #16]
 8008190:	601a      	str	r2, [r3, #0]

  /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
  hhrtim->MspInitCallback(hhrtim);
#else
  HAL_HRTIM_MspInit(hhrtim);
 8008192:	6878      	ldr	r0, [r7, #4]
 8008194:	f7fb fa4a 	bl	800362c <HAL_HRTIM_MspInit>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */

  /* HRTIM input synchronization configuration (if required) */
  if ((hhrtim->Init.SyncOptions & HRTIM_SYNCOPTION_SLAVE) != (uint32_t)RESET)
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	689b      	ldr	r3, [r3, #8]
 800819c:	f003 0302 	and.w	r3, r3, #2
 80081a0:	2b00      	cmp	r3, #0
 80081a2:	d012      	beq.n	80081ca <HAL_HRTIM_Init+0xf2>
  {
    /* Check parameters */
    assert_param(IS_HRTIM_SYNCINPUTSOURCE(hhrtim->Init.SyncInputSource));

    hrtim_mcr = hhrtim->Instance->sMasterRegs.MCR;
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	681b      	ldr	r3, [r3, #0]
 80081a8:	681b      	ldr	r3, [r3, #0]
 80081aa:	613b      	str	r3, [r7, #16]

    /* Set the synchronization input source */
    hrtim_mcr &= ~(HRTIM_MCR_SYNC_IN);
 80081ac:	693b      	ldr	r3, [r7, #16]
 80081ae:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80081b2:	613b      	str	r3, [r7, #16]
    hrtim_mcr |= (hhrtim->Init.SyncInputSource & HRTIM_MCR_SYNC_IN);
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	68db      	ldr	r3, [r3, #12]
 80081b8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80081bc:	693a      	ldr	r2, [r7, #16]
 80081be:	4313      	orrs	r3, r2
 80081c0:	613b      	str	r3, [r7, #16]

    /* Update the HRTIM registers */
    hhrtim->Instance->sMasterRegs.MCR = hrtim_mcr;
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	681b      	ldr	r3, [r3, #0]
 80081c6:	693a      	ldr	r2, [r7, #16]
 80081c8:	601a      	str	r2, [r3, #0]
  }

  /* Initialize the HRTIM state*/
  hhrtim->State = HAL_HRTIM_STATE_READY;
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	2201      	movs	r2, #1
 80081ce:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  /* Initialize the lock status of the HRTIM HAL API */
  __HAL_UNLOCK(hhrtim);
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	2200      	movs	r2, #0
 80081d6:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

  /* Initialize timer related parameters */
  for (timer_idx = HRTIM_TIMERINDEX_TIMER_A ;
 80081da:	2300      	movs	r3, #0
 80081dc:	75fb      	strb	r3, [r7, #23]
 80081de:	e03e      	b.n	800825e <HAL_HRTIM_Init+0x186>
       timer_idx <= HRTIM_TIMERINDEX_MASTER ;
       timer_idx++)
  {
    hhrtim->TimerParam[timer_idx].CaptureTrigger1 = HRTIM_CAPTURETRIGGER_NONE;
 80081e0:	7dfa      	ldrb	r2, [r7, #23]
 80081e2:	6879      	ldr	r1, [r7, #4]
 80081e4:	4613      	mov	r3, r2
 80081e6:	00db      	lsls	r3, r3, #3
 80081e8:	1a9b      	subs	r3, r3, r2
 80081ea:	009b      	lsls	r3, r3, #2
 80081ec:	440b      	add	r3, r1
 80081ee:	3318      	adds	r3, #24
 80081f0:	2200      	movs	r2, #0
 80081f2:	601a      	str	r2, [r3, #0]
    hhrtim->TimerParam[timer_idx].CaptureTrigger2 = HRTIM_CAPTURETRIGGER_NONE;
 80081f4:	7dfa      	ldrb	r2, [r7, #23]
 80081f6:	6879      	ldr	r1, [r7, #4]
 80081f8:	4613      	mov	r3, r2
 80081fa:	00db      	lsls	r3, r3, #3
 80081fc:	1a9b      	subs	r3, r3, r2
 80081fe:	009b      	lsls	r3, r3, #2
 8008200:	440b      	add	r3, r1
 8008202:	331c      	adds	r3, #28
 8008204:	2200      	movs	r2, #0
 8008206:	601a      	str	r2, [r3, #0]
    hhrtim->TimerParam[timer_idx].InterruptRequests = HRTIM_IT_NONE;
 8008208:	7dfa      	ldrb	r2, [r7, #23]
 800820a:	6879      	ldr	r1, [r7, #4]
 800820c:	4613      	mov	r3, r2
 800820e:	00db      	lsls	r3, r3, #3
 8008210:	1a9b      	subs	r3, r3, r2
 8008212:	009b      	lsls	r3, r3, #2
 8008214:	440b      	add	r3, r1
 8008216:	3320      	adds	r3, #32
 8008218:	2200      	movs	r2, #0
 800821a:	601a      	str	r2, [r3, #0]
    hhrtim->TimerParam[timer_idx].DMARequests = HRTIM_IT_NONE;
 800821c:	7dfa      	ldrb	r2, [r7, #23]
 800821e:	6879      	ldr	r1, [r7, #4]
 8008220:	4613      	mov	r3, r2
 8008222:	00db      	lsls	r3, r3, #3
 8008224:	1a9b      	subs	r3, r3, r2
 8008226:	009b      	lsls	r3, r3, #2
 8008228:	440b      	add	r3, r1
 800822a:	3324      	adds	r3, #36	; 0x24
 800822c:	2200      	movs	r2, #0
 800822e:	601a      	str	r2, [r3, #0]
    hhrtim->TimerParam[timer_idx].DMASrcAddress = 0U;
 8008230:	7dfa      	ldrb	r2, [r7, #23]
 8008232:	6879      	ldr	r1, [r7, #4]
 8008234:	4613      	mov	r3, r2
 8008236:	00db      	lsls	r3, r3, #3
 8008238:	1a9b      	subs	r3, r3, r2
 800823a:	009b      	lsls	r3, r3, #2
 800823c:	440b      	add	r3, r1
 800823e:	3328      	adds	r3, #40	; 0x28
 8008240:	2200      	movs	r2, #0
 8008242:	601a      	str	r2, [r3, #0]
    hhrtim->TimerParam[timer_idx].DMASize = 0U;
 8008244:	7dfa      	ldrb	r2, [r7, #23]
 8008246:	6879      	ldr	r1, [r7, #4]
 8008248:	4613      	mov	r3, r2
 800824a:	00db      	lsls	r3, r3, #3
 800824c:	1a9b      	subs	r3, r3, r2
 800824e:	009b      	lsls	r3, r3, #2
 8008250:	440b      	add	r3, r1
 8008252:	3330      	adds	r3, #48	; 0x30
 8008254:	2200      	movs	r2, #0
 8008256:	601a      	str	r2, [r3, #0]
       timer_idx++)
 8008258:	7dfb      	ldrb	r3, [r7, #23]
 800825a:	3301      	adds	r3, #1
 800825c:	75fb      	strb	r3, [r7, #23]
       timer_idx <= HRTIM_TIMERINDEX_MASTER ;
 800825e:	7dfb      	ldrb	r3, [r7, #23]
 8008260:	2b05      	cmp	r3, #5
 8008262:	d9bd      	bls.n	80081e0 <HAL_HRTIM_Init+0x108>
  }

  return HAL_OK;
 8008264:	2300      	movs	r3, #0
}
 8008266:	4618      	mov	r0, r3
 8008268:	3718      	adds	r7, #24
 800826a:	46bd      	mov	sp, r7
 800826c:	bd80      	pop	{r7, pc}
 800826e:	bf00      	nop
 8008270:	40017400 	.word	0x40017400
 8008274:	58024400 	.word	0x58024400

08008278 <HAL_HRTIM_TimeBaseConfig>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HRTIM_TimeBaseConfig(HRTIM_HandleTypeDef *hhrtim,
                                           uint32_t TimerIdx,
                                           const HRTIM_TimeBaseCfgTypeDef * pTimeBaseCfg)
{
 8008278:	b580      	push	{r7, lr}
 800827a:	b084      	sub	sp, #16
 800827c:	af00      	add	r7, sp, #0
 800827e:	60f8      	str	r0, [r7, #12]
 8008280:	60b9      	str	r1, [r7, #8]
 8008282:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_HRTIM_TIMERINDEX(TimerIdx));
  assert_param(IS_HRTIM_PRESCALERRATIO(pTimeBaseCfg->PrescalerRatio));
  assert_param(IS_HRTIM_MODE(pTimeBaseCfg->Mode));

  if(hhrtim->State == HAL_HRTIM_STATE_BUSY)
 8008284:	68fb      	ldr	r3, [r7, #12]
 8008286:	f893 30c1 	ldrb.w	r3, [r3, #193]	; 0xc1
 800828a:	b2db      	uxtb	r3, r3
 800828c:	2b02      	cmp	r3, #2
 800828e:	d101      	bne.n	8008294 <HAL_HRTIM_TimeBaseConfig+0x1c>
  {
     return HAL_BUSY;
 8008290:	2302      	movs	r3, #2
 8008292:	e015      	b.n	80082c0 <HAL_HRTIM_TimeBaseConfig+0x48>
  }

  /* Set the HRTIM state */
  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8008294:	68fb      	ldr	r3, [r7, #12]
 8008296:	2202      	movs	r2, #2
 8008298:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  if (TimerIdx == HRTIM_TIMERINDEX_MASTER)
 800829c:	68bb      	ldr	r3, [r7, #8]
 800829e:	2b05      	cmp	r3, #5
 80082a0:	d104      	bne.n	80082ac <HAL_HRTIM_TimeBaseConfig+0x34>
  {
    /* Configure master timer time base unit */
    HRTIM_MasterBase_Config(hhrtim, pTimeBaseCfg);
 80082a2:	6879      	ldr	r1, [r7, #4]
 80082a4:	68f8      	ldr	r0, [r7, #12]
 80082a6:	f000 fc4d 	bl	8008b44 <HRTIM_MasterBase_Config>
 80082aa:	e004      	b.n	80082b6 <HAL_HRTIM_TimeBaseConfig+0x3e>
  }
  else
  {
    /* Configure timing unit time base unit */
    HRTIM_TimingUnitBase_Config(hhrtim, TimerIdx, pTimeBaseCfg);
 80082ac:	687a      	ldr	r2, [r7, #4]
 80082ae:	68b9      	ldr	r1, [r7, #8]
 80082b0:	68f8      	ldr	r0, [r7, #12]
 80082b2:	f000 fc76 	bl	8008ba2 <HRTIM_TimingUnitBase_Config>
  }

  /* Set HRTIM state */
  hhrtim->State = HAL_HRTIM_STATE_READY;
 80082b6:	68fb      	ldr	r3, [r7, #12]
 80082b8:	2201      	movs	r2, #1
 80082ba:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  return HAL_OK;
 80082be:	2300      	movs	r3, #0
}
 80082c0:	4618      	mov	r0, r3
 80082c2:	3710      	adds	r7, #16
 80082c4:	46bd      	mov	sp, r7
 80082c6:	bd80      	pop	{r7, pc}

080082c8 <HAL_HRTIM_WaveformTimerConfig>:
  * @note This function must be called before starting the timer
  */
HAL_StatusTypeDef HAL_HRTIM_WaveformTimerConfig(HRTIM_HandleTypeDef * hhrtim,
                                                uint32_t TimerIdx,
                                                const HRTIM_TimerCfgTypeDef * pTimerCfg)
{
 80082c8:	b580      	push	{r7, lr}
 80082ca:	b084      	sub	sp, #16
 80082cc:	af00      	add	r7, sp, #0
 80082ce:	60f8      	str	r0, [r7, #12]
 80082d0:	60b9      	str	r1, [r7, #8]
 80082d2:	607a      	str	r2, [r7, #4]
  assert_param(IS_HRTIM_DACSYNC(pTimerCfg->DACSynchro));
  assert_param(IS_HRTIM_PRELOAD(pTimerCfg->PreloadEnable));
  assert_param(IS_HRTIM_TIMERBURSTMODE(pTimerCfg->BurstMode));
  assert_param(IS_HRTIM_UPDATEONREPETITION(pTimerCfg->RepetitionUpdate));

  if(hhrtim->State == HAL_HRTIM_STATE_BUSY)
 80082d4:	68fb      	ldr	r3, [r7, #12]
 80082d6:	f893 30c1 	ldrb.w	r3, [r3, #193]	; 0xc1
 80082da:	b2db      	uxtb	r3, r3
 80082dc:	2b02      	cmp	r3, #2
 80082de:	d101      	bne.n	80082e4 <HAL_HRTIM_WaveformTimerConfig+0x1c>
  {
     return HAL_BUSY;
 80082e0:	2302      	movs	r3, #2
 80082e2:	e05f      	b.n	80083a4 <HAL_HRTIM_WaveformTimerConfig+0xdc>
  }

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 80082e4:	68fb      	ldr	r3, [r7, #12]
 80082e6:	f893 30c0 	ldrb.w	r3, [r3, #192]	; 0xc0
 80082ea:	2b01      	cmp	r3, #1
 80082ec:	d101      	bne.n	80082f2 <HAL_HRTIM_WaveformTimerConfig+0x2a>
 80082ee:	2302      	movs	r3, #2
 80082f0:	e058      	b.n	80083a4 <HAL_HRTIM_WaveformTimerConfig+0xdc>
 80082f2:	68fb      	ldr	r3, [r7, #12]
 80082f4:	2201      	movs	r2, #1
 80082f6:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 80082fa:	68fb      	ldr	r3, [r7, #12]
 80082fc:	2202      	movs	r2, #2
 80082fe:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  if (TimerIdx == HRTIM_TIMERINDEX_MASTER)
 8008302:	68bb      	ldr	r3, [r7, #8]
 8008304:	2b05      	cmp	r3, #5
 8008306:	d104      	bne.n	8008312 <HAL_HRTIM_WaveformTimerConfig+0x4a>
    assert_param(IS_HRTIM_UPDATEGATING_MASTER(pTimerCfg->UpdateGating));
    assert_param(IS_HRTIM_MASTER_IT(pTimerCfg->InterruptRequests));
    assert_param(IS_HRTIM_MASTER_DMA(pTimerCfg->DMARequests));

    /* Configure master timer */
    HRTIM_MasterWaveform_Config(hhrtim, pTimerCfg);
 8008308:	6879      	ldr	r1, [r7, #4]
 800830a:	68f8      	ldr	r0, [r7, #12]
 800830c:	f000 fc89 	bl	8008c22 <HRTIM_MasterWaveform_Config>
 8008310:	e004      	b.n	800831c <HAL_HRTIM_WaveformTimerConfig+0x54>
    assert_param(IS_HRTIM_TIMUPDATETRIGGER(pTimerCfg->UpdateTrigger));
    assert_param(IS_HRTIM_TIMRESETTRIGGER(pTimerCfg->ResetTrigger));
    assert_param(IS_HRTIM_TIMUPDATEONRESET(pTimerCfg->ResetUpdate));

    /* Configure timing unit */
    HRTIM_TimingUnitWaveform_Config(hhrtim, TimerIdx, pTimerCfg);
 8008312:	687a      	ldr	r2, [r7, #4]
 8008314:	68b9      	ldr	r1, [r7, #8]
 8008316:	68f8      	ldr	r0, [r7, #12]
 8008318:	f000 fcea 	bl	8008cf0 <HRTIM_TimingUnitWaveform_Config>
  }

  /* Update timer parameters */
  hhrtim->TimerParam[TimerIdx].InterruptRequests = pTimerCfg->InterruptRequests;
 800831c:	687b      	ldr	r3, [r7, #4]
 800831e:	6819      	ldr	r1, [r3, #0]
 8008320:	68f8      	ldr	r0, [r7, #12]
 8008322:	68ba      	ldr	r2, [r7, #8]
 8008324:	4613      	mov	r3, r2
 8008326:	00db      	lsls	r3, r3, #3
 8008328:	1a9b      	subs	r3, r3, r2
 800832a:	009b      	lsls	r3, r3, #2
 800832c:	4403      	add	r3, r0
 800832e:	3320      	adds	r3, #32
 8008330:	6019      	str	r1, [r3, #0]
  hhrtim->TimerParam[TimerIdx].DMARequests = pTimerCfg->DMARequests;
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	6859      	ldr	r1, [r3, #4]
 8008336:	68f8      	ldr	r0, [r7, #12]
 8008338:	68ba      	ldr	r2, [r7, #8]
 800833a:	4613      	mov	r3, r2
 800833c:	00db      	lsls	r3, r3, #3
 800833e:	1a9b      	subs	r3, r3, r2
 8008340:	009b      	lsls	r3, r3, #2
 8008342:	4403      	add	r3, r0
 8008344:	3324      	adds	r3, #36	; 0x24
 8008346:	6019      	str	r1, [r3, #0]
  hhrtim->TimerParam[TimerIdx].DMASrcAddress = pTimerCfg->DMASrcAddress;
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	6899      	ldr	r1, [r3, #8]
 800834c:	68f8      	ldr	r0, [r7, #12]
 800834e:	68ba      	ldr	r2, [r7, #8]
 8008350:	4613      	mov	r3, r2
 8008352:	00db      	lsls	r3, r3, #3
 8008354:	1a9b      	subs	r3, r3, r2
 8008356:	009b      	lsls	r3, r3, #2
 8008358:	4403      	add	r3, r0
 800835a:	3328      	adds	r3, #40	; 0x28
 800835c:	6019      	str	r1, [r3, #0]
  hhrtim->TimerParam[TimerIdx].DMADstAddress = pTimerCfg->DMADstAddress;
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	68d9      	ldr	r1, [r3, #12]
 8008362:	68f8      	ldr	r0, [r7, #12]
 8008364:	68ba      	ldr	r2, [r7, #8]
 8008366:	4613      	mov	r3, r2
 8008368:	00db      	lsls	r3, r3, #3
 800836a:	1a9b      	subs	r3, r3, r2
 800836c:	009b      	lsls	r3, r3, #2
 800836e:	4403      	add	r3, r0
 8008370:	332c      	adds	r3, #44	; 0x2c
 8008372:	6019      	str	r1, [r3, #0]
  hhrtim->TimerParam[TimerIdx].DMASize = pTimerCfg->DMASize;
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	6919      	ldr	r1, [r3, #16]
 8008378:	68f8      	ldr	r0, [r7, #12]
 800837a:	68ba      	ldr	r2, [r7, #8]
 800837c:	4613      	mov	r3, r2
 800837e:	00db      	lsls	r3, r3, #3
 8008380:	1a9b      	subs	r3, r3, r2
 8008382:	009b      	lsls	r3, r3, #2
 8008384:	4403      	add	r3, r0
 8008386:	3330      	adds	r3, #48	; 0x30
 8008388:	6019      	str	r1, [r3, #0]

  /* Force a software update */
  HRTIM_ForceRegistersUpdate(hhrtim, TimerIdx);
 800838a:	68b9      	ldr	r1, [r7, #8]
 800838c:	68f8      	ldr	r0, [r7, #12]
 800838e:	f000 fec7 	bl	8009120 <HRTIM_ForceRegistersUpdate>

  hhrtim->State = HAL_HRTIM_STATE_READY;
 8008392:	68fb      	ldr	r3, [r7, #12]
 8008394:	2201      	movs	r2, #1
 8008396:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 800839a:	68fb      	ldr	r3, [r7, #12]
 800839c:	2200      	movs	r2, #0
 800839e:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

  return HAL_OK;
 80083a2:	2300      	movs	r3, #0
}
 80083a4:	4618      	mov	r0, r3
 80083a6:	3710      	adds	r7, #16
 80083a8:	46bd      	mov	sp, r7
 80083aa:	bd80      	pop	{r7, pc}

080083ac <HAL_HRTIM_WaveformCompareConfig>:
  */
HAL_StatusTypeDef HAL_HRTIM_WaveformCompareConfig(HRTIM_HandleTypeDef * hhrtim,
                                                  uint32_t TimerIdx,
                                                  uint32_t CompareUnit,
                                                  const HRTIM_CompareCfgTypeDef* pCompareCfg)
{
 80083ac:	b480      	push	{r7}
 80083ae:	b085      	sub	sp, #20
 80083b0:	af00      	add	r7, sp, #0
 80083b2:	60f8      	str	r0, [r7, #12]
 80083b4:	60b9      	str	r1, [r7, #8]
 80083b6:	607a      	str	r2, [r7, #4]
 80083b8:	603b      	str	r3, [r7, #0]
  /* Check parameters */
  assert_param(IS_HRTIM_TIMERINDEX(TimerIdx));

  if(hhrtim->State == HAL_HRTIM_STATE_BUSY)
 80083ba:	68fb      	ldr	r3, [r7, #12]
 80083bc:	f893 30c1 	ldrb.w	r3, [r3, #193]	; 0xc1
 80083c0:	b2db      	uxtb	r3, r3
 80083c2:	2b02      	cmp	r3, #2
 80083c4:	d101      	bne.n	80083ca <HAL_HRTIM_WaveformCompareConfig+0x1e>
  {
     return HAL_BUSY;
 80083c6:	2302      	movs	r3, #2
 80083c8:	e157      	b.n	800867a <HAL_HRTIM_WaveformCompareConfig+0x2ce>
  }

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 80083ca:	68fb      	ldr	r3, [r7, #12]
 80083cc:	f893 30c0 	ldrb.w	r3, [r3, #192]	; 0xc0
 80083d0:	2b01      	cmp	r3, #1
 80083d2:	d101      	bne.n	80083d8 <HAL_HRTIM_WaveformCompareConfig+0x2c>
 80083d4:	2302      	movs	r3, #2
 80083d6:	e150      	b.n	800867a <HAL_HRTIM_WaveformCompareConfig+0x2ce>
 80083d8:	68fb      	ldr	r3, [r7, #12]
 80083da:	2201      	movs	r2, #1
 80083dc:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 80083e0:	68fb      	ldr	r3, [r7, #12]
 80083e2:	2202      	movs	r2, #2
 80083e4:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  /* Configure the compare unit */
  if (TimerIdx == HRTIM_TIMERINDEX_MASTER)
 80083e8:	68bb      	ldr	r3, [r7, #8]
 80083ea:	2b05      	cmp	r3, #5
 80083ec:	d140      	bne.n	8008470 <HAL_HRTIM_WaveformCompareConfig+0xc4>
  {
    switch (CompareUnit)
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	3b01      	subs	r3, #1
 80083f2:	2b07      	cmp	r3, #7
 80083f4:	d82a      	bhi.n	800844c <HAL_HRTIM_WaveformCompareConfig+0xa0>
 80083f6:	a201      	add	r2, pc, #4	; (adr r2, 80083fc <HAL_HRTIM_WaveformCompareConfig+0x50>)
 80083f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80083fc:	0800841d 	.word	0x0800841d
 8008400:	08008429 	.word	0x08008429
 8008404:	0800844d 	.word	0x0800844d
 8008408:	08008435 	.word	0x08008435
 800840c:	0800844d 	.word	0x0800844d
 8008410:	0800844d 	.word	0x0800844d
 8008414:	0800844d 	.word	0x0800844d
 8008418:	08008441 	.word	0x08008441
    {
      case HRTIM_COMPAREUNIT_1:
        {
        hhrtim->Instance->sMasterRegs.MCMP1R = pCompareCfg->CompareValue;
 800841c:	68fb      	ldr	r3, [r7, #12]
 800841e:	681b      	ldr	r3, [r3, #0]
 8008420:	683a      	ldr	r2, [r7, #0]
 8008422:	6812      	ldr	r2, [r2, #0]
 8008424:	61da      	str	r2, [r3, #28]
        break;
 8008426:	e01a      	b.n	800845e <HAL_HRTIM_WaveformCompareConfig+0xb2>
        }

      case HRTIM_COMPAREUNIT_2:
        {
        hhrtim->Instance->sMasterRegs.MCMP2R = pCompareCfg->CompareValue;
 8008428:	68fb      	ldr	r3, [r7, #12]
 800842a:	681b      	ldr	r3, [r3, #0]
 800842c:	683a      	ldr	r2, [r7, #0]
 800842e:	6812      	ldr	r2, [r2, #0]
 8008430:	625a      	str	r2, [r3, #36]	; 0x24
        break;
 8008432:	e014      	b.n	800845e <HAL_HRTIM_WaveformCompareConfig+0xb2>
        }

      case HRTIM_COMPAREUNIT_3:
        {
        hhrtim->Instance->sMasterRegs.MCMP3R = pCompareCfg->CompareValue;
 8008434:	68fb      	ldr	r3, [r7, #12]
 8008436:	681b      	ldr	r3, [r3, #0]
 8008438:	683a      	ldr	r2, [r7, #0]
 800843a:	6812      	ldr	r2, [r2, #0]
 800843c:	629a      	str	r2, [r3, #40]	; 0x28
        break;
 800843e:	e00e      	b.n	800845e <HAL_HRTIM_WaveformCompareConfig+0xb2>
        }

      case HRTIM_COMPAREUNIT_4:
        {
        hhrtim->Instance->sMasterRegs.MCMP4R = pCompareCfg->CompareValue;
 8008440:	68fb      	ldr	r3, [r7, #12]
 8008442:	681b      	ldr	r3, [r3, #0]
 8008444:	683a      	ldr	r2, [r7, #0]
 8008446:	6812      	ldr	r2, [r2, #0]
 8008448:	62da      	str	r2, [r3, #44]	; 0x2c
        break;
 800844a:	e008      	b.n	800845e <HAL_HRTIM_WaveformCompareConfig+0xb2>
        }

      default:
        {
        hhrtim->State = HAL_HRTIM_STATE_ERROR;
 800844c:	68fb      	ldr	r3, [r7, #12]
 800844e:	2207      	movs	r2, #7
 8008450:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

        /* Process Unlocked */
        __HAL_UNLOCK(hhrtim);
 8008454:	68fb      	ldr	r3, [r7, #12]
 8008456:	2200      	movs	r2, #0
 8008458:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

        break;
 800845c:	bf00      	nop
        }
    }

    if(hhrtim->State == HAL_HRTIM_STATE_ERROR)
 800845e:	68fb      	ldr	r3, [r7, #12]
 8008460:	f893 30c1 	ldrb.w	r3, [r3, #193]	; 0xc1
 8008464:	b2db      	uxtb	r3, r3
 8008466:	2b07      	cmp	r3, #7
 8008468:	f040 80fe 	bne.w	8008668 <HAL_HRTIM_WaveformCompareConfig+0x2bc>
    {
     return HAL_ERROR;
 800846c:	2301      	movs	r3, #1
 800846e:	e104      	b.n	800867a <HAL_HRTIM_WaveformCompareConfig+0x2ce>
    }

  }
  else
  {
    switch (CompareUnit)
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	3b01      	subs	r3, #1
 8008474:	2b07      	cmp	r3, #7
 8008476:	f200 80e3 	bhi.w	8008640 <HAL_HRTIM_WaveformCompareConfig+0x294>
 800847a:	a201      	add	r2, pc, #4	; (adr r2, 8008480 <HAL_HRTIM_WaveformCompareConfig+0xd4>)
 800847c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008480:	080084a1 	.word	0x080084a1
 8008484:	080084b5 	.word	0x080084b5
 8008488:	08008641 	.word	0x08008641
 800848c:	08008571 	.word	0x08008571
 8008490:	08008641 	.word	0x08008641
 8008494:	08008641 	.word	0x08008641
 8008498:	08008641 	.word	0x08008641
 800849c:	08008585 	.word	0x08008585
    {
    case HRTIM_COMPAREUNIT_1:
      {
        /* Set the compare value */
        hhrtim->Instance->sTimerxRegs[TimerIdx].CMP1xR = pCompareCfg->CompareValue;
 80084a0:	68fb      	ldr	r3, [r7, #12]
 80084a2:	6819      	ldr	r1, [r3, #0]
 80084a4:	683b      	ldr	r3, [r7, #0]
 80084a6:	681a      	ldr	r2, [r3, #0]
 80084a8:	68bb      	ldr	r3, [r7, #8]
 80084aa:	01db      	lsls	r3, r3, #7
 80084ac:	440b      	add	r3, r1
 80084ae:	339c      	adds	r3, #156	; 0x9c
 80084b0:	601a      	str	r2, [r3, #0]
        break;
 80084b2:	e0d1      	b.n	8008658 <HAL_HRTIM_WaveformCompareConfig+0x2ac>
      {
        /* Check parameters */
        assert_param(IS_HRTIM_COMPAREUNIT_AUTODELAYEDMODE(CompareUnit, pCompareCfg->AutoDelayedMode));

        /* Set the compare value */
        hhrtim->Instance->sTimerxRegs[TimerIdx].CMP2xR = pCompareCfg->CompareValue;
 80084b4:	68fb      	ldr	r3, [r7, #12]
 80084b6:	6819      	ldr	r1, [r3, #0]
 80084b8:	683b      	ldr	r3, [r7, #0]
 80084ba:	681a      	ldr	r2, [r3, #0]
 80084bc:	68bb      	ldr	r3, [r7, #8]
 80084be:	01db      	lsls	r3, r3, #7
 80084c0:	440b      	add	r3, r1
 80084c2:	33a4      	adds	r3, #164	; 0xa4
 80084c4:	601a      	str	r2, [r3, #0]

        if (pCompareCfg->AutoDelayedMode != HRTIM_AUTODELAYEDMODE_REGULAR)
 80084c6:	683b      	ldr	r3, [r7, #0]
 80084c8:	685b      	ldr	r3, [r3, #4]
 80084ca:	2b00      	cmp	r3, #0
 80084cc:	d03f      	beq.n	800854e <HAL_HRTIM_WaveformCompareConfig+0x1a2>
        {
          /* Configure auto-delayed mode */
          /* DELCMP2 bitfield must be reset when reprogrammed from one value */
          /* to the other to reinitialize properly the auto-delayed mechanism */
          hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR &= ~HRTIM_TIMCR_DELCMP2;
 80084ce:	68fb      	ldr	r3, [r7, #12]
 80084d0:	681a      	ldr	r2, [r3, #0]
 80084d2:	68bb      	ldr	r3, [r7, #8]
 80084d4:	3301      	adds	r3, #1
 80084d6:	01db      	lsls	r3, r3, #7
 80084d8:	4413      	add	r3, r2
 80084da:	681b      	ldr	r3, [r3, #0]
 80084dc:	68fa      	ldr	r2, [r7, #12]
 80084de:	6811      	ldr	r1, [r2, #0]
 80084e0:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80084e4:	68bb      	ldr	r3, [r7, #8]
 80084e6:	3301      	adds	r3, #1
 80084e8:	01db      	lsls	r3, r3, #7
 80084ea:	440b      	add	r3, r1
 80084ec:	601a      	str	r2, [r3, #0]
          hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR |= pCompareCfg->AutoDelayedMode;
 80084ee:	68fb      	ldr	r3, [r7, #12]
 80084f0:	681a      	ldr	r2, [r3, #0]
 80084f2:	68bb      	ldr	r3, [r7, #8]
 80084f4:	3301      	adds	r3, #1
 80084f6:	01db      	lsls	r3, r3, #7
 80084f8:	4413      	add	r3, r2
 80084fa:	681a      	ldr	r2, [r3, #0]
 80084fc:	683b      	ldr	r3, [r7, #0]
 80084fe:	685b      	ldr	r3, [r3, #4]
 8008500:	68f9      	ldr	r1, [r7, #12]
 8008502:	6809      	ldr	r1, [r1, #0]
 8008504:	431a      	orrs	r2, r3
 8008506:	68bb      	ldr	r3, [r7, #8]
 8008508:	3301      	adds	r3, #1
 800850a:	01db      	lsls	r3, r3, #7
 800850c:	440b      	add	r3, r1
 800850e:	601a      	str	r2, [r3, #0]

          /* Set the compare value for timeout compare unit (if any) */
          if (pCompareCfg->AutoDelayedMode == HRTIM_AUTODELAYEDMODE_AUTODELAYED_TIMEOUTCMP1)
 8008510:	683b      	ldr	r3, [r7, #0]
 8008512:	685b      	ldr	r3, [r3, #4]
 8008514:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008518:	d109      	bne.n	800852e <HAL_HRTIM_WaveformCompareConfig+0x182>
          {
            hhrtim->Instance->sTimerxRegs[TimerIdx].CMP1xR = pCompareCfg->AutoDelayedTimeout;
 800851a:	68fb      	ldr	r3, [r7, #12]
 800851c:	6819      	ldr	r1, [r3, #0]
 800851e:	683b      	ldr	r3, [r7, #0]
 8008520:	689a      	ldr	r2, [r3, #8]
 8008522:	68bb      	ldr	r3, [r7, #8]
 8008524:	01db      	lsls	r3, r3, #7
 8008526:	440b      	add	r3, r1
 8008528:	339c      	adds	r3, #156	; 0x9c
 800852a:	601a      	str	r2, [r3, #0]
        else
        {
          /* Clear HRTIM_TIMxCR.DELCMP2 bitfield */
          MODIFY_REG(hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR, HRTIM_TIMCR_DELCMP2, 0U);
        }
         break;
 800852c:	e091      	b.n	8008652 <HAL_HRTIM_WaveformCompareConfig+0x2a6>
          else if (pCompareCfg->AutoDelayedMode == HRTIM_AUTODELAYEDMODE_AUTODELAYED_TIMEOUTCMP3)
 800852e:	683b      	ldr	r3, [r7, #0]
 8008530:	685b      	ldr	r3, [r3, #4]
 8008532:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8008536:	f040 808c 	bne.w	8008652 <HAL_HRTIM_WaveformCompareConfig+0x2a6>
            hhrtim->Instance->sTimerxRegs[TimerIdx].CMP3xR = pCompareCfg->AutoDelayedTimeout;
 800853a:	68fb      	ldr	r3, [r7, #12]
 800853c:	6819      	ldr	r1, [r3, #0]
 800853e:	683b      	ldr	r3, [r7, #0]
 8008540:	689a      	ldr	r2, [r3, #8]
 8008542:	68bb      	ldr	r3, [r7, #8]
 8008544:	01db      	lsls	r3, r3, #7
 8008546:	440b      	add	r3, r1
 8008548:	33a8      	adds	r3, #168	; 0xa8
 800854a:	601a      	str	r2, [r3, #0]
         break;
 800854c:	e081      	b.n	8008652 <HAL_HRTIM_WaveformCompareConfig+0x2a6>
          MODIFY_REG(hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR, HRTIM_TIMCR_DELCMP2, 0U);
 800854e:	68fb      	ldr	r3, [r7, #12]
 8008550:	681a      	ldr	r2, [r3, #0]
 8008552:	68bb      	ldr	r3, [r7, #8]
 8008554:	3301      	adds	r3, #1
 8008556:	01db      	lsls	r3, r3, #7
 8008558:	4413      	add	r3, r2
 800855a:	681b      	ldr	r3, [r3, #0]
 800855c:	68fa      	ldr	r2, [r7, #12]
 800855e:	6811      	ldr	r1, [r2, #0]
 8008560:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8008564:	68bb      	ldr	r3, [r7, #8]
 8008566:	3301      	adds	r3, #1
 8008568:	01db      	lsls	r3, r3, #7
 800856a:	440b      	add	r3, r1
 800856c:	601a      	str	r2, [r3, #0]
         break;
 800856e:	e070      	b.n	8008652 <HAL_HRTIM_WaveformCompareConfig+0x2a6>
      }

    case HRTIM_COMPAREUNIT_3:
      {
        /* Set the compare value */
        hhrtim->Instance->sTimerxRegs[TimerIdx].CMP3xR = pCompareCfg->CompareValue;
 8008570:	68fb      	ldr	r3, [r7, #12]
 8008572:	6819      	ldr	r1, [r3, #0]
 8008574:	683b      	ldr	r3, [r7, #0]
 8008576:	681a      	ldr	r2, [r3, #0]
 8008578:	68bb      	ldr	r3, [r7, #8]
 800857a:	01db      	lsls	r3, r3, #7
 800857c:	440b      	add	r3, r1
 800857e:	33a8      	adds	r3, #168	; 0xa8
 8008580:	601a      	str	r2, [r3, #0]
        break;
 8008582:	e069      	b.n	8008658 <HAL_HRTIM_WaveformCompareConfig+0x2ac>
      {
        /* Check parameters */
        assert_param(IS_HRTIM_COMPAREUNIT_AUTODELAYEDMODE(CompareUnit, pCompareCfg->AutoDelayedMode));

        /* Set the compare value */
        hhrtim->Instance->sTimerxRegs[TimerIdx].CMP4xR = pCompareCfg->CompareValue;
 8008584:	68fb      	ldr	r3, [r7, #12]
 8008586:	6819      	ldr	r1, [r3, #0]
 8008588:	683b      	ldr	r3, [r7, #0]
 800858a:	681a      	ldr	r2, [r3, #0]
 800858c:	68bb      	ldr	r3, [r7, #8]
 800858e:	01db      	lsls	r3, r3, #7
 8008590:	440b      	add	r3, r1
 8008592:	33ac      	adds	r3, #172	; 0xac
 8008594:	601a      	str	r2, [r3, #0]

        if (pCompareCfg->AutoDelayedMode != HRTIM_AUTODELAYEDMODE_REGULAR)
 8008596:	683b      	ldr	r3, [r7, #0]
 8008598:	685b      	ldr	r3, [r3, #4]
 800859a:	2b00      	cmp	r3, #0
 800859c:	d03f      	beq.n	800861e <HAL_HRTIM_WaveformCompareConfig+0x272>
        {
          /* Configure auto-delayed mode */
          /* DELCMP4 bitfield must be reset when reprogrammed from one value */
          /* to the other to reinitialize properly the auto-delayed mechanism */
          hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR &= ~HRTIM_TIMCR_DELCMP4;
 800859e:	68fb      	ldr	r3, [r7, #12]
 80085a0:	681a      	ldr	r2, [r3, #0]
 80085a2:	68bb      	ldr	r3, [r7, #8]
 80085a4:	3301      	adds	r3, #1
 80085a6:	01db      	lsls	r3, r3, #7
 80085a8:	4413      	add	r3, r2
 80085aa:	681b      	ldr	r3, [r3, #0]
 80085ac:	68fa      	ldr	r2, [r7, #12]
 80085ae:	6811      	ldr	r1, [r2, #0]
 80085b0:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80085b4:	68bb      	ldr	r3, [r7, #8]
 80085b6:	3301      	adds	r3, #1
 80085b8:	01db      	lsls	r3, r3, #7
 80085ba:	440b      	add	r3, r1
 80085bc:	601a      	str	r2, [r3, #0]
          hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR |= (pCompareCfg->AutoDelayedMode << 2U);
 80085be:	68fb      	ldr	r3, [r7, #12]
 80085c0:	681a      	ldr	r2, [r3, #0]
 80085c2:	68bb      	ldr	r3, [r7, #8]
 80085c4:	3301      	adds	r3, #1
 80085c6:	01db      	lsls	r3, r3, #7
 80085c8:	4413      	add	r3, r2
 80085ca:	681a      	ldr	r2, [r3, #0]
 80085cc:	683b      	ldr	r3, [r7, #0]
 80085ce:	685b      	ldr	r3, [r3, #4]
 80085d0:	009b      	lsls	r3, r3, #2
 80085d2:	68f9      	ldr	r1, [r7, #12]
 80085d4:	6809      	ldr	r1, [r1, #0]
 80085d6:	431a      	orrs	r2, r3
 80085d8:	68bb      	ldr	r3, [r7, #8]
 80085da:	3301      	adds	r3, #1
 80085dc:	01db      	lsls	r3, r3, #7
 80085de:	440b      	add	r3, r1
 80085e0:	601a      	str	r2, [r3, #0]

          /* Set the compare value for timeout compare unit (if any) */
          if (pCompareCfg->AutoDelayedMode == HRTIM_AUTODELAYEDMODE_AUTODELAYED_TIMEOUTCMP1)
 80085e2:	683b      	ldr	r3, [r7, #0]
 80085e4:	685b      	ldr	r3, [r3, #4]
 80085e6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80085ea:	d109      	bne.n	8008600 <HAL_HRTIM_WaveformCompareConfig+0x254>
          {
            hhrtim->Instance->sTimerxRegs[TimerIdx].CMP1xR = pCompareCfg->AutoDelayedTimeout;
 80085ec:	68fb      	ldr	r3, [r7, #12]
 80085ee:	6819      	ldr	r1, [r3, #0]
 80085f0:	683b      	ldr	r3, [r7, #0]
 80085f2:	689a      	ldr	r2, [r3, #8]
 80085f4:	68bb      	ldr	r3, [r7, #8]
 80085f6:	01db      	lsls	r3, r3, #7
 80085f8:	440b      	add	r3, r1
 80085fa:	339c      	adds	r3, #156	; 0x9c
 80085fc:	601a      	str	r2, [r3, #0]
        else
        {
          /* Clear HRTIM_TIMxCR.DELCMP4 bitfield */
          MODIFY_REG(hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR, HRTIM_TIMCR_DELCMP4, 0U);
        }
         break;
 80085fe:	e02a      	b.n	8008656 <HAL_HRTIM_WaveformCompareConfig+0x2aa>
          else if (pCompareCfg->AutoDelayedMode == HRTIM_AUTODELAYEDMODE_AUTODELAYED_TIMEOUTCMP3)
 8008600:	683b      	ldr	r3, [r7, #0]
 8008602:	685b      	ldr	r3, [r3, #4]
 8008604:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8008608:	d125      	bne.n	8008656 <HAL_HRTIM_WaveformCompareConfig+0x2aa>
            hhrtim->Instance->sTimerxRegs[TimerIdx].CMP3xR = pCompareCfg->AutoDelayedTimeout;
 800860a:	68fb      	ldr	r3, [r7, #12]
 800860c:	6819      	ldr	r1, [r3, #0]
 800860e:	683b      	ldr	r3, [r7, #0]
 8008610:	689a      	ldr	r2, [r3, #8]
 8008612:	68bb      	ldr	r3, [r7, #8]
 8008614:	01db      	lsls	r3, r3, #7
 8008616:	440b      	add	r3, r1
 8008618:	33a8      	adds	r3, #168	; 0xa8
 800861a:	601a      	str	r2, [r3, #0]
         break;
 800861c:	e01b      	b.n	8008656 <HAL_HRTIM_WaveformCompareConfig+0x2aa>
          MODIFY_REG(hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR, HRTIM_TIMCR_DELCMP4, 0U);
 800861e:	68fb      	ldr	r3, [r7, #12]
 8008620:	681a      	ldr	r2, [r3, #0]
 8008622:	68bb      	ldr	r3, [r7, #8]
 8008624:	3301      	adds	r3, #1
 8008626:	01db      	lsls	r3, r3, #7
 8008628:	4413      	add	r3, r2
 800862a:	681b      	ldr	r3, [r3, #0]
 800862c:	68fa      	ldr	r2, [r7, #12]
 800862e:	6811      	ldr	r1, [r2, #0]
 8008630:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8008634:	68bb      	ldr	r3, [r7, #8]
 8008636:	3301      	adds	r3, #1
 8008638:	01db      	lsls	r3, r3, #7
 800863a:	440b      	add	r3, r1
 800863c:	601a      	str	r2, [r3, #0]
         break;
 800863e:	e00a      	b.n	8008656 <HAL_HRTIM_WaveformCompareConfig+0x2aa>
      }

  default:
     {
      hhrtim->State = HAL_HRTIM_STATE_ERROR;
 8008640:	68fb      	ldr	r3, [r7, #12]
 8008642:	2207      	movs	r2, #7
 8008644:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

      /* Process Unlocked */
      __HAL_UNLOCK(hhrtim);
 8008648:	68fb      	ldr	r3, [r7, #12]
 800864a:	2200      	movs	r2, #0
 800864c:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

      break;
 8008650:	e002      	b.n	8008658 <HAL_HRTIM_WaveformCompareConfig+0x2ac>
         break;
 8008652:	bf00      	nop
 8008654:	e000      	b.n	8008658 <HAL_HRTIM_WaveformCompareConfig+0x2ac>
         break;
 8008656:	bf00      	nop
     }
   }

   if(hhrtim->State == HAL_HRTIM_STATE_ERROR)
 8008658:	68fb      	ldr	r3, [r7, #12]
 800865a:	f893 30c1 	ldrb.w	r3, [r3, #193]	; 0xc1
 800865e:	b2db      	uxtb	r3, r3
 8008660:	2b07      	cmp	r3, #7
 8008662:	d101      	bne.n	8008668 <HAL_HRTIM_WaveformCompareConfig+0x2bc>
   {
     return HAL_ERROR;
 8008664:	2301      	movs	r3, #1
 8008666:	e008      	b.n	800867a <HAL_HRTIM_WaveformCompareConfig+0x2ce>
   }

  }
  hhrtim->State = HAL_HRTIM_STATE_READY;
 8008668:	68fb      	ldr	r3, [r7, #12]
 800866a:	2201      	movs	r2, #1
 800866c:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 8008670:	68fb      	ldr	r3, [r7, #12]
 8008672:	2200      	movs	r2, #0
 8008674:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

  return HAL_OK;
 8008678:	2300      	movs	r3, #0
}
 800867a:	4618      	mov	r0, r3
 800867c:	3714      	adds	r7, #20
 800867e:	46bd      	mov	sp, r7
 8008680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008684:	4770      	bx	lr
 8008686:	bf00      	nop

08008688 <HAL_HRTIM_WaveformOutputConfig>:
  */
HAL_StatusTypeDef HAL_HRTIM_WaveformOutputConfig(HRTIM_HandleTypeDef * hhrtim,
                                                uint32_t TimerIdx,
                                                uint32_t Output,
                                                const HRTIM_OutputCfgTypeDef * pOutputCfg)
{
 8008688:	b580      	push	{r7, lr}
 800868a:	b084      	sub	sp, #16
 800868c:	af00      	add	r7, sp, #0
 800868e:	60f8      	str	r0, [r7, #12]
 8008690:	60b9      	str	r1, [r7, #8]
 8008692:	607a      	str	r2, [r7, #4]
 8008694:	603b      	str	r3, [r7, #0]
  assert_param(IS_HRTIM_OUTPUTIDLEMODE(pOutputCfg->IdleMode));
  assert_param(IS_HRTIM_OUTPUTFAULTLEVEL(pOutputCfg->FaultLevel));
  assert_param(IS_HRTIM_OUTPUTCHOPPERMODE(pOutputCfg->ChopperModeEnable));
  assert_param(IS_HRTIM_OUTPUTBURSTMODEENTRY(pOutputCfg->BurstModeEntryDelayed));

  if(hhrtim->State == HAL_HRTIM_STATE_BUSY)
 8008696:	68fb      	ldr	r3, [r7, #12]
 8008698:	f893 30c1 	ldrb.w	r3, [r3, #193]	; 0xc1
 800869c:	b2db      	uxtb	r3, r3
 800869e:	2b02      	cmp	r3, #2
 80086a0:	d101      	bne.n	80086a6 <HAL_HRTIM_WaveformOutputConfig+0x1e>
  {
     return HAL_BUSY;
 80086a2:	2302      	movs	r3, #2
 80086a4:	e01d      	b.n	80086e2 <HAL_HRTIM_WaveformOutputConfig+0x5a>
  }

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 80086a6:	68fb      	ldr	r3, [r7, #12]
 80086a8:	f893 30c0 	ldrb.w	r3, [r3, #192]	; 0xc0
 80086ac:	2b01      	cmp	r3, #1
 80086ae:	d101      	bne.n	80086b4 <HAL_HRTIM_WaveformOutputConfig+0x2c>
 80086b0:	2302      	movs	r3, #2
 80086b2:	e016      	b.n	80086e2 <HAL_HRTIM_WaveformOutputConfig+0x5a>
 80086b4:	68fb      	ldr	r3, [r7, #12]
 80086b6:	2201      	movs	r2, #1
 80086b8:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 80086bc:	68fb      	ldr	r3, [r7, #12]
 80086be:	2202      	movs	r2, #2
 80086c0:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  /* Configure the timer output */
  HRTIM_OutputConfig(hhrtim,
 80086c4:	683b      	ldr	r3, [r7, #0]
 80086c6:	687a      	ldr	r2, [r7, #4]
 80086c8:	68b9      	ldr	r1, [r7, #8]
 80086ca:	68f8      	ldr	r0, [r7, #12]
 80086cc:	f000 fc50 	bl	8008f70 <HRTIM_OutputConfig>
                     TimerIdx,
                     Output,
                     pOutputCfg);

  hhrtim->State = HAL_HRTIM_STATE_READY;
 80086d0:	68fb      	ldr	r3, [r7, #12]
 80086d2:	2201      	movs	r2, #1
 80086d4:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 80086d8:	68fb      	ldr	r3, [r7, #12]
 80086da:	2200      	movs	r2, #0
 80086dc:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

  return HAL_OK;
 80086e0:	2300      	movs	r3, #0
}
 80086e2:	4618      	mov	r0, r3
 80086e4:	3710      	adds	r7, #16
 80086e6:	46bd      	mov	sp, r7
 80086e8:	bd80      	pop	{r7, pc}

080086ea <HAL_HRTIM_WaveformOutputStart>:
  *                    @arg HRTIM_OUTPUT_TE2: Timer E - Output 2
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HRTIM_WaveformOutputStart(HRTIM_HandleTypeDef * hhrtim,
                                                uint32_t OutputsToStart)
{
 80086ea:	b480      	push	{r7}
 80086ec:	b083      	sub	sp, #12
 80086ee:	af00      	add	r7, sp, #0
 80086f0:	6078      	str	r0, [r7, #4]
 80086f2:	6039      	str	r1, [r7, #0]
   /* Check the parameters */
  assert_param(IS_HRTIM_OUTPUT(OutputsToStart));

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	f893 30c0 	ldrb.w	r3, [r3, #192]	; 0xc0
 80086fa:	2b01      	cmp	r3, #1
 80086fc:	d101      	bne.n	8008702 <HAL_HRTIM_WaveformOutputStart+0x18>
 80086fe:	2302      	movs	r3, #2
 8008700:	e01a      	b.n	8008738 <HAL_HRTIM_WaveformOutputStart+0x4e>
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	2201      	movs	r2, #1
 8008706:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	2202      	movs	r2, #2
 800870e:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  /* Enable the HRTIM outputs */
  hhrtim->Instance->sCommonRegs.OENR |= (OutputsToStart);
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	681b      	ldr	r3, [r3, #0]
 8008716:	f8d3 1394 	ldr.w	r1, [r3, #916]	; 0x394
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	681b      	ldr	r3, [r3, #0]
 800871e:	683a      	ldr	r2, [r7, #0]
 8008720:	430a      	orrs	r2, r1
 8008722:	f8c3 2394 	str.w	r2, [r3, #916]	; 0x394

  hhrtim->State = HAL_HRTIM_STATE_READY;
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	2201      	movs	r2, #1
 800872a:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	2200      	movs	r2, #0
 8008732:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

  return HAL_OK;
 8008736:	2300      	movs	r3, #0
}
 8008738:	4618      	mov	r0, r3
 800873a:	370c      	adds	r7, #12
 800873c:	46bd      	mov	sp, r7
 800873e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008742:	4770      	bx	lr

08008744 <HAL_HRTIM_WaveformOutputStop>:
  *                    @arg HRTIM_OUTPUT_TE2: Timer E - Output 2
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HRTIM_WaveformOutputStop(HRTIM_HandleTypeDef * hhrtim,
                                               uint32_t OutputsToStop)
{
 8008744:	b480      	push	{r7}
 8008746:	b083      	sub	sp, #12
 8008748:	af00      	add	r7, sp, #0
 800874a:	6078      	str	r0, [r7, #4]
 800874c:	6039      	str	r1, [r7, #0]
   /* Check the parameters */
  assert_param(IS_HRTIM_OUTPUT(OutputsToStop));

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	f893 30c0 	ldrb.w	r3, [r3, #192]	; 0xc0
 8008754:	2b01      	cmp	r3, #1
 8008756:	d101      	bne.n	800875c <HAL_HRTIM_WaveformOutputStop+0x18>
 8008758:	2302      	movs	r3, #2
 800875a:	e01a      	b.n	8008792 <HAL_HRTIM_WaveformOutputStop+0x4e>
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	2201      	movs	r2, #1
 8008760:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	2202      	movs	r2, #2
 8008768:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  /* Enable the HRTIM outputs */
  hhrtim->Instance->sCommonRegs.ODISR |= (OutputsToStop);
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	681b      	ldr	r3, [r3, #0]
 8008770:	f8d3 1398 	ldr.w	r1, [r3, #920]	; 0x398
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	681b      	ldr	r3, [r3, #0]
 8008778:	683a      	ldr	r2, [r7, #0]
 800877a:	430a      	orrs	r2, r1
 800877c:	f8c3 2398 	str.w	r2, [r3, #920]	; 0x398

  hhrtim->State = HAL_HRTIM_STATE_READY;
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	2201      	movs	r2, #1
 8008784:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	2200      	movs	r2, #0
 800878c:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

  return HAL_OK;
 8008790:	2300      	movs	r3, #0
}
 8008792:	4618      	mov	r0, r3
 8008794:	370c      	adds	r7, #12
 8008796:	46bd      	mov	sp, r7
 8008798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800879c:	4770      	bx	lr
	...

080087a0 <HAL_HRTIM_WaveformCountStart_IT>:
  *       function.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HRTIM_WaveformCountStart_IT(HRTIM_HandleTypeDef * hhrtim,
                                                    uint32_t Timers)
{
 80087a0:	b480      	push	{r7}
 80087a2:	b085      	sub	sp, #20
 80087a4:	af00      	add	r7, sp, #0
 80087a6:	6078      	str	r0, [r7, #4]
 80087a8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_HRTIM_TIMERID(Timers));

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	f893 30c0 	ldrb.w	r3, [r3, #192]	; 0xc0
 80087b0:	2b01      	cmp	r3, #1
 80087b2:	d101      	bne.n	80087b8 <HAL_HRTIM_WaveformCountStart_IT+0x18>
 80087b4:	2302      	movs	r3, #2
 80087b6:	e05b      	b.n	8008870 <HAL_HRTIM_WaveformCountStart_IT+0xd0>
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	2201      	movs	r2, #1
 80087bc:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	2202      	movs	r2, #2
 80087c4:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  /* Enable HRTIM interrupts (if required) */
  __HAL_HRTIM_ENABLE_IT(hhrtim, hhrtim->Init.HRTIMInterruptResquests);
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	681b      	ldr	r3, [r3, #0]
 80087cc:	f8d3 1390 	ldr.w	r1, [r3, #912]	; 0x390
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	685a      	ldr	r2, [r3, #4]
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	681b      	ldr	r3, [r3, #0]
 80087d8:	430a      	orrs	r2, r1
 80087da:	f8c3 2390 	str.w	r2, [r3, #912]	; 0x390

  /* Enable master timer related interrupts (if required) */
  if ((Timers & HRTIM_TIMERID_MASTER) != 0U)
 80087de:	683b      	ldr	r3, [r7, #0]
 80087e0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80087e4:	2b00      	cmp	r3, #0
 80087e6:	d009      	beq.n	80087fc <HAL_HRTIM_WaveformCountStart_IT+0x5c>
  {
    __HAL_HRTIM_MASTER_ENABLE_IT(hhrtim,
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	681b      	ldr	r3, [r3, #0]
 80087ec:	68d9      	ldr	r1, [r3, #12]
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	681b      	ldr	r3, [r3, #0]
 80087f8:	430a      	orrs	r2, r1
 80087fa:	60da      	str	r2, [r3, #12]
                                 hhrtim->TimerParam[HRTIM_TIMERINDEX_MASTER].InterruptRequests);
  }

  /* Enable timing unit related interrupts (if required) */
  for (timer_idx = HRTIM_TIMERINDEX_TIMER_A ;
 80087fc:	2300      	movs	r3, #0
 80087fe:	73fb      	strb	r3, [r7, #15]
 8008800:	e022      	b.n	8008848 <HAL_HRTIM_WaveformCountStart_IT+0xa8>
       timer_idx < HRTIM_TIMERINDEX_MASTER ;
       timer_idx++)
  {
    if ((Timers & TimerIdxToTimerId[timer_idx]) != 0U)
 8008802:	7bfb      	ldrb	r3, [r7, #15]
 8008804:	4a1d      	ldr	r2, [pc, #116]	; (800887c <HAL_HRTIM_WaveformCountStart_IT+0xdc>)
 8008806:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800880a:	683b      	ldr	r3, [r7, #0]
 800880c:	4013      	ands	r3, r2
 800880e:	2b00      	cmp	r3, #0
 8008810:	d017      	beq.n	8008842 <HAL_HRTIM_WaveformCountStart_IT+0xa2>
    {
      __HAL_HRTIM_TIMER_ENABLE_IT(hhrtim,
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	681a      	ldr	r2, [r3, #0]
 8008816:	7bfb      	ldrb	r3, [r7, #15]
 8008818:	01db      	lsls	r3, r3, #7
 800881a:	4413      	add	r3, r2
 800881c:	338c      	adds	r3, #140	; 0x8c
 800881e:	6818      	ldr	r0, [r3, #0]
 8008820:	7bfa      	ldrb	r2, [r7, #15]
 8008822:	6879      	ldr	r1, [r7, #4]
 8008824:	4613      	mov	r3, r2
 8008826:	00db      	lsls	r3, r3, #3
 8008828:	1a9b      	subs	r3, r3, r2
 800882a:	009b      	lsls	r3, r3, #2
 800882c:	440b      	add	r3, r1
 800882e:	3320      	adds	r3, #32
 8008830:	681a      	ldr	r2, [r3, #0]
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	6819      	ldr	r1, [r3, #0]
 8008836:	7bfb      	ldrb	r3, [r7, #15]
 8008838:	4302      	orrs	r2, r0
 800883a:	01db      	lsls	r3, r3, #7
 800883c:	440b      	add	r3, r1
 800883e:	338c      	adds	r3, #140	; 0x8c
 8008840:	601a      	str	r2, [r3, #0]
       timer_idx++)
 8008842:	7bfb      	ldrb	r3, [r7, #15]
 8008844:	3301      	adds	r3, #1
 8008846:	73fb      	strb	r3, [r7, #15]
       timer_idx < HRTIM_TIMERINDEX_MASTER ;
 8008848:	7bfb      	ldrb	r3, [r7, #15]
 800884a:	2b04      	cmp	r3, #4
 800884c:	d9d9      	bls.n	8008802 <HAL_HRTIM_WaveformCountStart_IT+0x62>
                                  hhrtim->TimerParam[timer_idx].InterruptRequests);
    }
  }

  /* Enable timer(s) counter */
  hhrtim->Instance->sMasterRegs.MCR |= (Timers);
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	681b      	ldr	r3, [r3, #0]
 8008852:	6819      	ldr	r1, [r3, #0]
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	681b      	ldr	r3, [r3, #0]
 8008858:	683a      	ldr	r2, [r7, #0]
 800885a:	430a      	orrs	r2, r1
 800885c:	601a      	str	r2, [r3, #0]

  hhrtim->State = HAL_HRTIM_STATE_READY;
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	2201      	movs	r2, #1
 8008862:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	2200      	movs	r2, #0
 800886a:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

  return HAL_OK;}
 800886e:	2300      	movs	r3, #0
 8008870:	4618      	mov	r0, r3
 8008872:	3714      	adds	r7, #20
 8008874:	46bd      	mov	sp, r7
 8008876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800887a:	4770      	bx	lr
 800887c:	2000013c 	.word	0x2000013c

08008880 <HAL_HRTIM_WaveformCountStop_IT>:
  * @note The counter of a timer is stopped only if all timer outputs are disabled
  * @note All enabled timer related interrupts are disabled.
  */
HAL_StatusTypeDef HAL_HRTIM_WaveformCountStop_IT(HRTIM_HandleTypeDef * hhrtim,
                                                   uint32_t Timers)
{
 8008880:	b480      	push	{r7}
 8008882:	b085      	sub	sp, #20
 8008884:	af00      	add	r7, sp, #0
 8008886:	6078      	str	r0, [r7, #4]
 8008888:	6039      	str	r1, [r7, #0]
  /* ++ WA */
  __IO uint32_t delai = (uint32_t)(0x17FU);
 800888a:	f240 137f 	movw	r3, #383	; 0x17f
 800888e:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_HRTIM_TIMERID(Timers));

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	f893 30c0 	ldrb.w	r3, [r3, #192]	; 0xc0
 8008896:	2b01      	cmp	r3, #1
 8008898:	d101      	bne.n	800889e <HAL_HRTIM_WaveformCountStop_IT+0x1e>
 800889a:	2302      	movs	r3, #2
 800889c:	e065      	b.n	800896a <HAL_HRTIM_WaveformCountStop_IT+0xea>
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	2201      	movs	r2, #1
 80088a2:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	2202      	movs	r2, #2
 80088aa:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  /* Disable HRTIM interrupts (if required) */
  __HAL_HRTIM_DISABLE_IT(hhrtim, hhrtim->Init.HRTIMInterruptResquests);
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	681b      	ldr	r3, [r3, #0]
 80088b2:	f8d3 1390 	ldr.w	r1, [r3, #912]	; 0x390
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	685b      	ldr	r3, [r3, #4]
 80088ba:	43da      	mvns	r2, r3
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	681b      	ldr	r3, [r3, #0]
 80088c0:	400a      	ands	r2, r1
 80088c2:	f8c3 2390 	str.w	r2, [r3, #912]	; 0x390

  /* Disable master timer related interrupts (if required) */
  if ((Timers & HRTIM_TIMERID_MASTER) != 0U)
 80088c6:	683b      	ldr	r3, [r7, #0]
 80088c8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80088cc:	2b00      	cmp	r3, #0
 80088ce:	d00a      	beq.n	80088e6 <HAL_HRTIM_WaveformCountStop_IT+0x66>
  {
    /* Interrupts enable flag must be cleared one by one */
    __HAL_HRTIM_MASTER_DISABLE_IT(hhrtim, hhrtim->TimerParam[HRTIM_TIMERINDEX_MASTER].InterruptRequests);
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	681b      	ldr	r3, [r3, #0]
 80088d4:	68d9      	ldr	r1, [r3, #12]
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80088dc:	43da      	mvns	r2, r3
 80088de:	687b      	ldr	r3, [r7, #4]
 80088e0:	681b      	ldr	r3, [r3, #0]
 80088e2:	400a      	ands	r2, r1
 80088e4:	60da      	str	r2, [r3, #12]
  }

  /* Disable timing unit related interrupts (if required) */
  for (timer_idx = HRTIM_TIMERINDEX_TIMER_A ;
 80088e6:	2300      	movs	r3, #0
 80088e8:	73fb      	strb	r3, [r7, #15]
 80088ea:	e023      	b.n	8008934 <HAL_HRTIM_WaveformCountStop_IT+0xb4>
       timer_idx < HRTIM_TIMERINDEX_MASTER ;
       timer_idx++)
  {
    if ((Timers & TimerIdxToTimerId[timer_idx]) != 0U)
 80088ec:	7bfb      	ldrb	r3, [r7, #15]
 80088ee:	4a22      	ldr	r2, [pc, #136]	; (8008978 <HAL_HRTIM_WaveformCountStop_IT+0xf8>)
 80088f0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80088f4:	683b      	ldr	r3, [r7, #0]
 80088f6:	4013      	ands	r3, r2
 80088f8:	2b00      	cmp	r3, #0
 80088fa:	d018      	beq.n	800892e <HAL_HRTIM_WaveformCountStop_IT+0xae>
    {
      __HAL_HRTIM_TIMER_DISABLE_IT(hhrtim, timer_idx, hhrtim->TimerParam[timer_idx].InterruptRequests);
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	681a      	ldr	r2, [r3, #0]
 8008900:	7bfb      	ldrb	r3, [r7, #15]
 8008902:	01db      	lsls	r3, r3, #7
 8008904:	4413      	add	r3, r2
 8008906:	338c      	adds	r3, #140	; 0x8c
 8008908:	6818      	ldr	r0, [r3, #0]
 800890a:	7bfa      	ldrb	r2, [r7, #15]
 800890c:	6879      	ldr	r1, [r7, #4]
 800890e:	4613      	mov	r3, r2
 8008910:	00db      	lsls	r3, r3, #3
 8008912:	1a9b      	subs	r3, r3, r2
 8008914:	009b      	lsls	r3, r3, #2
 8008916:	440b      	add	r3, r1
 8008918:	3320      	adds	r3, #32
 800891a:	681b      	ldr	r3, [r3, #0]
 800891c:	43da      	mvns	r2, r3
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	6819      	ldr	r1, [r3, #0]
 8008922:	7bfb      	ldrb	r3, [r7, #15]
 8008924:	4002      	ands	r2, r0
 8008926:	01db      	lsls	r3, r3, #7
 8008928:	440b      	add	r3, r1
 800892a:	338c      	adds	r3, #140	; 0x8c
 800892c:	601a      	str	r2, [r3, #0]
       timer_idx++)
 800892e:	7bfb      	ldrb	r3, [r7, #15]
 8008930:	3301      	adds	r3, #1
 8008932:	73fb      	strb	r3, [r7, #15]
       timer_idx < HRTIM_TIMERINDEX_MASTER ;
 8008934:	7bfb      	ldrb	r3, [r7, #15]
 8008936:	2b04      	cmp	r3, #4
 8008938:	d9d8      	bls.n	80088ec <HAL_HRTIM_WaveformCountStop_IT+0x6c>
    }
  }

  /* ++ WA */
  do { delai--; } while (delai != 0U);
 800893a:	68bb      	ldr	r3, [r7, #8]
 800893c:	3b01      	subs	r3, #1
 800893e:	60bb      	str	r3, [r7, #8]
 8008940:	68bb      	ldr	r3, [r7, #8]
 8008942:	2b00      	cmp	r3, #0
 8008944:	d1f9      	bne.n	800893a <HAL_HRTIM_WaveformCountStop_IT+0xba>
  /* -- WA */

  /* Disable timer(s) counter */
  hhrtim->Instance->sMasterRegs.MCR &= ~(Timers);
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	681b      	ldr	r3, [r3, #0]
 800894a:	6819      	ldr	r1, [r3, #0]
 800894c:	683b      	ldr	r3, [r7, #0]
 800894e:	43da      	mvns	r2, r3
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	681b      	ldr	r3, [r3, #0]
 8008954:	400a      	ands	r2, r1
 8008956:	601a      	str	r2, [r3, #0]

  hhrtim->State = HAL_HRTIM_STATE_READY;
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	2201      	movs	r2, #1
 800895c:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	2200      	movs	r2, #0
 8008964:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

  return HAL_OK;
 8008968:	2300      	movs	r3, #0
}
 800896a:	4618      	mov	r0, r3
 800896c:	3714      	adds	r7, #20
 800896e:	46bd      	mov	sp, r7
 8008970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008974:	4770      	bx	lr
 8008976:	bf00      	nop
 8008978:	2000013c 	.word	0x2000013c

0800897c <HAL_HRTIM_IRQHandler>:
  *                   This parameter can be any value of HRTIM_Timer_Index
  * @retval None
  */
void HAL_HRTIM_IRQHandler(HRTIM_HandleTypeDef * hhrtim,
                          uint32_t TimerIdx)
{
 800897c:	b580      	push	{r7, lr}
 800897e:	b082      	sub	sp, #8
 8008980:	af00      	add	r7, sp, #0
 8008982:	6078      	str	r0, [r7, #4]
 8008984:	6039      	str	r1, [r7, #0]
  /* HRTIM interrupts handling */
  if (TimerIdx == HRTIM_TIMERINDEX_COMMON)
 8008986:	683b      	ldr	r3, [r7, #0]
 8008988:	2bff      	cmp	r3, #255	; 0xff
 800898a:	d103      	bne.n	8008994 <HAL_HRTIM_IRQHandler+0x18>
  {
    HRTIM_HRTIM_ISR(hhrtim);
 800898c:	6878      	ldr	r0, [r7, #4]
 800898e:	f000 fc29 	bl	80091e4 <HRTIM_HRTIM_ISR>
  {
    /* Timing unit related interrupts handling */
    HRTIM_Timer_ISR(hhrtim, TimerIdx);
  }

}
 8008992:	e00a      	b.n	80089aa <HAL_HRTIM_IRQHandler+0x2e>
  else if (TimerIdx == HRTIM_TIMERINDEX_MASTER)
 8008994:	683b      	ldr	r3, [r7, #0]
 8008996:	2b05      	cmp	r3, #5
 8008998:	d103      	bne.n	80089a2 <HAL_HRTIM_IRQHandler+0x26>
    HRTIM_Master_ISR(hhrtim);
 800899a:	6878      	ldr	r0, [r7, #4]
 800899c:	f000 fca0 	bl	80092e0 <HRTIM_Master_ISR>
}
 80089a0:	e003      	b.n	80089aa <HAL_HRTIM_IRQHandler+0x2e>
    HRTIM_Timer_ISR(hhrtim, TimerIdx);
 80089a2:	6839      	ldr	r1, [r7, #0]
 80089a4:	6878      	ldr	r0, [r7, #4]
 80089a6:	f000 fd45 	bl	8009434 <HRTIM_Timer_ISR>
}
 80089aa:	bf00      	nop
 80089ac:	3708      	adds	r7, #8
 80089ae:	46bd      	mov	sp, r7
 80089b0:	bd80      	pop	{r7, pc}

080089b2 <HAL_HRTIM_Fault1Callback>:
  * @brief  Callback function invoked when a fault 1 interrupt occurred
  * @param  hhrtim pointer to HAL HRTIM handle  * @retval None
  * @retval None
  */
__weak void HAL_HRTIM_Fault1Callback(HRTIM_HandleTypeDef * hhrtim)
{
 80089b2:	b480      	push	{r7}
 80089b4:	b083      	sub	sp, #12
 80089b6:	af00      	add	r7, sp, #0
 80089b8:	6078      	str	r0, [r7, #4]
  UNUSED(hhrtim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Fault1Callback could be implemented in the user file
   */
}
 80089ba:	bf00      	nop
 80089bc:	370c      	adds	r7, #12
 80089be:	46bd      	mov	sp, r7
 80089c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089c4:	4770      	bx	lr

080089c6 <HAL_HRTIM_Fault2Callback>:
  * @brief  Callback function invoked when a fault 2 interrupt occurred
  * @param  hhrtim pointer to HAL HRTIM handle
  * @retval None
  */
__weak void HAL_HRTIM_Fault2Callback(HRTIM_HandleTypeDef * hhrtim)
{
 80089c6:	b480      	push	{r7}
 80089c8:	b083      	sub	sp, #12
 80089ca:	af00      	add	r7, sp, #0
 80089cc:	6078      	str	r0, [r7, #4]
  UNUSED(hhrtim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Fault2Callback could be implemented in the user file
   */
}
 80089ce:	bf00      	nop
 80089d0:	370c      	adds	r7, #12
 80089d2:	46bd      	mov	sp, r7
 80089d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089d8:	4770      	bx	lr

080089da <HAL_HRTIM_Fault3Callback>:
  * @brief  Callback function invoked when a fault 3 interrupt occurred
  * @param  hhrtim pointer to HAL HRTIM handle
  * @retval None
  */
__weak void HAL_HRTIM_Fault3Callback(HRTIM_HandleTypeDef * hhrtim)
{
 80089da:	b480      	push	{r7}
 80089dc:	b083      	sub	sp, #12
 80089de:	af00      	add	r7, sp, #0
 80089e0:	6078      	str	r0, [r7, #4]
  UNUSED(hhrtim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Fault3Callback could be implemented in the user file
   */
}
 80089e2:	bf00      	nop
 80089e4:	370c      	adds	r7, #12
 80089e6:	46bd      	mov	sp, r7
 80089e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089ec:	4770      	bx	lr

080089ee <HAL_HRTIM_Fault4Callback>:
  * @brief  Callback function invoked when a fault 4 interrupt occurred
  * @param  hhrtim pointer to HAL HRTIM handle
  * @retval None
  */
__weak void HAL_HRTIM_Fault4Callback(HRTIM_HandleTypeDef * hhrtim)
{
 80089ee:	b480      	push	{r7}
 80089f0:	b083      	sub	sp, #12
 80089f2:	af00      	add	r7, sp, #0
 80089f4:	6078      	str	r0, [r7, #4]
  UNUSED(hhrtim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Fault4Callback could be implemented in the user file
   */
}
 80089f6:	bf00      	nop
 80089f8:	370c      	adds	r7, #12
 80089fa:	46bd      	mov	sp, r7
 80089fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a00:	4770      	bx	lr

08008a02 <HAL_HRTIM_Fault5Callback>:
  * @brief  Callback function invoked when a fault 5 interrupt occurred
  * @param  hhrtim pointer to HAL HRTIM handle
  * @retval None
  */
__weak void HAL_HRTIM_Fault5Callback(HRTIM_HandleTypeDef * hhrtim)
{
 8008a02:	b480      	push	{r7}
 8008a04:	b083      	sub	sp, #12
 8008a06:	af00      	add	r7, sp, #0
 8008a08:	6078      	str	r0, [r7, #4]
  UNUSED(hhrtim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Fault5Callback could be implemented in the user file
   */
}
 8008a0a:	bf00      	nop
 8008a0c:	370c      	adds	r7, #12
 8008a0e:	46bd      	mov	sp, r7
 8008a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a14:	4770      	bx	lr

08008a16 <HAL_HRTIM_SystemFaultCallback>:
  * @brief  Callback function invoked when a system fault interrupt occurred
  * @param  hhrtim pointer to HAL HRTIM handle
  * @retval None
  */
__weak void HAL_HRTIM_SystemFaultCallback(HRTIM_HandleTypeDef * hhrtim)
{
 8008a16:	b480      	push	{r7}
 8008a18:	b083      	sub	sp, #12
 8008a1a:	af00      	add	r7, sp, #0
 8008a1c:	6078      	str	r0, [r7, #4]
  UNUSED(hhrtim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_SystemFaultCallback could be implemented in the user file
   */
}
 8008a1e:	bf00      	nop
 8008a20:	370c      	adds	r7, #12
 8008a22:	46bd      	mov	sp, r7
 8008a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a28:	4770      	bx	lr

08008a2a <HAL_HRTIM_BurstModePeriodCallback>:
  * @brief  Callback function invoked when the end of the burst mode period is reached
  * @param  hhrtim pointer to HAL HRTIM handle
  * @retval None
  */
__weak void HAL_HRTIM_BurstModePeriodCallback(HRTIM_HandleTypeDef * hhrtim)
{
 8008a2a:	b480      	push	{r7}
 8008a2c:	b083      	sub	sp, #12
 8008a2e:	af00      	add	r7, sp, #0
 8008a30:	6078      	str	r0, [r7, #4]
  UNUSED(hhrtim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_BurstModeCallback could be implemented in the user file
   */
}
 8008a32:	bf00      	nop
 8008a34:	370c      	adds	r7, #12
 8008a36:	46bd      	mov	sp, r7
 8008a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a3c:	4770      	bx	lr

08008a3e <HAL_HRTIM_SynchronizationEventCallback>:
  * @brief  Callback function invoked when a synchronization input event is received
  * @param  hhrtim pointer to HAL HRTIM handle
  * @retval None
  */
__weak void HAL_HRTIM_SynchronizationEventCallback(HRTIM_HandleTypeDef * hhrtim)
{
 8008a3e:	b480      	push	{r7}
 8008a40:	b083      	sub	sp, #12
 8008a42:	af00      	add	r7, sp, #0
 8008a44:	6078      	str	r0, [r7, #4]
  UNUSED(hhrtim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_SynchronizationEventCallback could be implemented in the user file
   */
}
 8008a46:	bf00      	nop
 8008a48:	370c      	adds	r7, #12
 8008a4a:	46bd      	mov	sp, r7
 8008a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a50:	4770      	bx	lr

08008a52 <HAL_HRTIM_RegistersUpdateCallback>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_E for timer E
  * @retval None
  */
__weak void HAL_HRTIM_RegistersUpdateCallback(HRTIM_HandleTypeDef * hhrtim,
                                              uint32_t TimerIdx)
{
 8008a52:	b480      	push	{r7}
 8008a54:	b083      	sub	sp, #12
 8008a56:	af00      	add	r7, sp, #0
 8008a58:	6078      	str	r0, [r7, #4]
 8008a5a:	6039      	str	r1, [r7, #0]
  UNUSED(TimerIdx);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Master_RegistersUpdateCallback could be implemented in the user file
   */
}
 8008a5c:	bf00      	nop
 8008a5e:	370c      	adds	r7, #12
 8008a60:	46bd      	mov	sp, r7
 8008a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a66:	4770      	bx	lr

08008a68 <HAL_HRTIM_Compare1EventCallback>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_E for timer E
  * @retval None
  */
__weak void HAL_HRTIM_Compare1EventCallback(HRTIM_HandleTypeDef * hhrtim,
                                              uint32_t TimerIdx)
{
 8008a68:	b480      	push	{r7}
 8008a6a:	b083      	sub	sp, #12
 8008a6c:	af00      	add	r7, sp, #0
 8008a6e:	6078      	str	r0, [r7, #4]
 8008a70:	6039      	str	r1, [r7, #0]
  UNUSED(TimerIdx);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Master_Compare1EventCallback could be implemented in the user file
   */
}
 8008a72:	bf00      	nop
 8008a74:	370c      	adds	r7, #12
 8008a76:	46bd      	mov	sp, r7
 8008a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a7c:	4770      	bx	lr

08008a7e <HAL_HRTIM_Compare4EventCallback>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_E for timer E
  * @retval None
  */
__weak void HAL_HRTIM_Compare4EventCallback(HRTIM_HandleTypeDef * hhrtim,
                                              uint32_t TimerIdx)
{
 8008a7e:	b480      	push	{r7}
 8008a80:	b083      	sub	sp, #12
 8008a82:	af00      	add	r7, sp, #0
 8008a84:	6078      	str	r0, [r7, #4]
 8008a86:	6039      	str	r1, [r7, #0]
  UNUSED(TimerIdx);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Master_Compare4EventCallback could be implemented in the user file
   */
}
 8008a88:	bf00      	nop
 8008a8a:	370c      	adds	r7, #12
 8008a8c:	46bd      	mov	sp, r7
 8008a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a92:	4770      	bx	lr

08008a94 <HAL_HRTIM_Capture1EventCallback>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_E for timer E
  * @retval None
  */
__weak void HAL_HRTIM_Capture1EventCallback(HRTIM_HandleTypeDef * hhrtim,
                                              uint32_t TimerIdx)
{
 8008a94:	b480      	push	{r7}
 8008a96:	b083      	sub	sp, #12
 8008a98:	af00      	add	r7, sp, #0
 8008a9a:	6078      	str	r0, [r7, #4]
 8008a9c:	6039      	str	r1, [r7, #0]
  UNUSED(TimerIdx);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Timer_Capture1EventCallback could be implemented in the user file
   */
}
 8008a9e:	bf00      	nop
 8008aa0:	370c      	adds	r7, #12
 8008aa2:	46bd      	mov	sp, r7
 8008aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aa8:	4770      	bx	lr

08008aaa <HAL_HRTIM_Capture2EventCallback>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_E for timer E
  * @retval None
  */
__weak void HAL_HRTIM_Capture2EventCallback(HRTIM_HandleTypeDef * hhrtim,
                                              uint32_t TimerIdx)
{
 8008aaa:	b480      	push	{r7}
 8008aac:	b083      	sub	sp, #12
 8008aae:	af00      	add	r7, sp, #0
 8008ab0:	6078      	str	r0, [r7, #4]
 8008ab2:	6039      	str	r1, [r7, #0]
  UNUSED(TimerIdx);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Timer_Capture2EventCallback could be implemented in the user file
   */
}
 8008ab4:	bf00      	nop
 8008ab6:	370c      	adds	r7, #12
 8008ab8:	46bd      	mov	sp, r7
 8008aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008abe:	4770      	bx	lr

08008ac0 <HAL_HRTIM_DelayedProtectionCallback>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_E for timer E
  * @retval None
  */
__weak void HAL_HRTIM_DelayedProtectionCallback(HRTIM_HandleTypeDef * hhrtim,
                                              uint32_t TimerIdx)
{
 8008ac0:	b480      	push	{r7}
 8008ac2:	b083      	sub	sp, #12
 8008ac4:	af00      	add	r7, sp, #0
 8008ac6:	6078      	str	r0, [r7, #4]
 8008ac8:	6039      	str	r1, [r7, #0]
  UNUSED(TimerIdx);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Timer_DelayedProtectionCallback could be implemented in the user file
   */
}
 8008aca:	bf00      	nop
 8008acc:	370c      	adds	r7, #12
 8008ace:	46bd      	mov	sp, r7
 8008ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ad4:	4770      	bx	lr

08008ad6 <HAL_HRTIM_CounterResetCallback>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_E for timer E
  * @retval None
  */
__weak void HAL_HRTIM_CounterResetCallback(HRTIM_HandleTypeDef * hhrtim,
                                              uint32_t TimerIdx)
{
 8008ad6:	b480      	push	{r7}
 8008ad8:	b083      	sub	sp, #12
 8008ada:	af00      	add	r7, sp, #0
 8008adc:	6078      	str	r0, [r7, #4]
 8008ade:	6039      	str	r1, [r7, #0]
  UNUSED(TimerIdx);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Timer_CounterResetCallback could be implemented in the user file
   */
}
 8008ae0:	bf00      	nop
 8008ae2:	370c      	adds	r7, #12
 8008ae4:	46bd      	mov	sp, r7
 8008ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aea:	4770      	bx	lr

08008aec <HAL_HRTIM_Output1SetCallback>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_E for timer E
  * @retval None
  */
__weak void HAL_HRTIM_Output1SetCallback(HRTIM_HandleTypeDef * hhrtim,
                                              uint32_t TimerIdx)
{
 8008aec:	b480      	push	{r7}
 8008aee:	b083      	sub	sp, #12
 8008af0:	af00      	add	r7, sp, #0
 8008af2:	6078      	str	r0, [r7, #4]
 8008af4:	6039      	str	r1, [r7, #0]
  UNUSED(TimerIdx);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Timer_Output1SetCallback could be implemented in the user file
   */
}
 8008af6:	bf00      	nop
 8008af8:	370c      	adds	r7, #12
 8008afa:	46bd      	mov	sp, r7
 8008afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b00:	4770      	bx	lr

08008b02 <HAL_HRTIM_Output1ResetCallback>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_E for timer E
  * @retval None
  */
__weak void HAL_HRTIM_Output1ResetCallback(HRTIM_HandleTypeDef * hhrtim,
                                              uint32_t TimerIdx)
{
 8008b02:	b480      	push	{r7}
 8008b04:	b083      	sub	sp, #12
 8008b06:	af00      	add	r7, sp, #0
 8008b08:	6078      	str	r0, [r7, #4]
 8008b0a:	6039      	str	r1, [r7, #0]
  UNUSED(TimerIdx);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Timer_Output1ResetCallback could be implemented in the user file
   */
}
 8008b0c:	bf00      	nop
 8008b0e:	370c      	adds	r7, #12
 8008b10:	46bd      	mov	sp, r7
 8008b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b16:	4770      	bx	lr

08008b18 <HAL_HRTIM_Output2SetCallback>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_E for timer E
  * @retval None
  */
__weak void HAL_HRTIM_Output2SetCallback(HRTIM_HandleTypeDef * hhrtim,
                                              uint32_t TimerIdx)
{
 8008b18:	b480      	push	{r7}
 8008b1a:	b083      	sub	sp, #12
 8008b1c:	af00      	add	r7, sp, #0
 8008b1e:	6078      	str	r0, [r7, #4]
 8008b20:	6039      	str	r1, [r7, #0]
  UNUSED(TimerIdx);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Timer_Output2SetCallback could be implemented in the user file
   */
}
 8008b22:	bf00      	nop
 8008b24:	370c      	adds	r7, #12
 8008b26:	46bd      	mov	sp, r7
 8008b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b2c:	4770      	bx	lr

08008b2e <HAL_HRTIM_Output2ResetCallback>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_E for timer E
  * @retval None
  */
__weak void HAL_HRTIM_Output2ResetCallback(HRTIM_HandleTypeDef * hhrtim,
                                              uint32_t TimerIdx)
{
 8008b2e:	b480      	push	{r7}
 8008b30:	b083      	sub	sp, #12
 8008b32:	af00      	add	r7, sp, #0
 8008b34:	6078      	str	r0, [r7, #4]
 8008b36:	6039      	str	r1, [r7, #0]
  UNUSED(TimerIdx);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Timer_Output2ResetCallback could be implemented in the user file
   */
}
 8008b38:	bf00      	nop
 8008b3a:	370c      	adds	r7, #12
 8008b3c:	46bd      	mov	sp, r7
 8008b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b42:	4770      	bx	lr

08008b44 <HRTIM_MasterBase_Config>:
  * @param  pTimeBaseCfg pointer to the time base configuration structure
  * @retval None
  */
static void HRTIM_MasterBase_Config(HRTIM_HandleTypeDef * hhrtim,
                                    const HRTIM_TimeBaseCfgTypeDef * pTimeBaseCfg)
{
 8008b44:	b480      	push	{r7}
 8008b46:	b085      	sub	sp, #20
 8008b48:	af00      	add	r7, sp, #0
 8008b4a:	6078      	str	r0, [r7, #4]
 8008b4c:	6039      	str	r1, [r7, #0]
  uint32_t hrtim_mcr;

  /* Configure master timer */
  hrtim_mcr = hhrtim->Instance->sMasterRegs.MCR;
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	681b      	ldr	r3, [r3, #0]
 8008b52:	681b      	ldr	r3, [r3, #0]
 8008b54:	60fb      	str	r3, [r7, #12]

  /* Set the prescaler ratio */
  hrtim_mcr &= (uint32_t) ~(HRTIM_MCR_CK_PSC);
 8008b56:	68fb      	ldr	r3, [r7, #12]
 8008b58:	f023 0307 	bic.w	r3, r3, #7
 8008b5c:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= (uint32_t)pTimeBaseCfg->PrescalerRatio;
 8008b5e:	683b      	ldr	r3, [r7, #0]
 8008b60:	689b      	ldr	r3, [r3, #8]
 8008b62:	68fa      	ldr	r2, [r7, #12]
 8008b64:	4313      	orrs	r3, r2
 8008b66:	60fb      	str	r3, [r7, #12]

  /* Set the operating mode */
  hrtim_mcr &= (uint32_t) ~(HRTIM_MCR_CONT | HRTIM_MCR_RETRIG);
 8008b68:	68fb      	ldr	r3, [r7, #12]
 8008b6a:	f023 0318 	bic.w	r3, r3, #24
 8008b6e:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= (uint32_t)pTimeBaseCfg->Mode;
 8008b70:	683b      	ldr	r3, [r7, #0]
 8008b72:	68db      	ldr	r3, [r3, #12]
 8008b74:	68fa      	ldr	r2, [r7, #12]
 8008b76:	4313      	orrs	r3, r2
 8008b78:	60fb      	str	r3, [r7, #12]

  /* Update the HRTIM registers */
  hhrtim->Instance->sMasterRegs.MCR = hrtim_mcr;
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	681b      	ldr	r3, [r3, #0]
 8008b7e:	68fa      	ldr	r2, [r7, #12]
 8008b80:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sMasterRegs.MPER = pTimeBaseCfg->Period;
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	681b      	ldr	r3, [r3, #0]
 8008b86:	683a      	ldr	r2, [r7, #0]
 8008b88:	6812      	ldr	r2, [r2, #0]
 8008b8a:	615a      	str	r2, [r3, #20]
  hhrtim->Instance->sMasterRegs.MREP = pTimeBaseCfg->RepetitionCounter;
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	681b      	ldr	r3, [r3, #0]
 8008b90:	683a      	ldr	r2, [r7, #0]
 8008b92:	6852      	ldr	r2, [r2, #4]
 8008b94:	619a      	str	r2, [r3, #24]
}
 8008b96:	bf00      	nop
 8008b98:	3714      	adds	r7, #20
 8008b9a:	46bd      	mov	sp, r7
 8008b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ba0:	4770      	bx	lr

08008ba2 <HRTIM_TimingUnitBase_Config>:
  * @retval None
  */
static void HRTIM_TimingUnitBase_Config(HRTIM_HandleTypeDef * hhrtim,
                                        uint32_t TimerIdx ,
                                        const HRTIM_TimeBaseCfgTypeDef * pTimeBaseCfg)
{
 8008ba2:	b480      	push	{r7}
 8008ba4:	b087      	sub	sp, #28
 8008ba6:	af00      	add	r7, sp, #0
 8008ba8:	60f8      	str	r0, [r7, #12]
 8008baa:	60b9      	str	r1, [r7, #8]
 8008bac:	607a      	str	r2, [r7, #4]
  uint32_t hrtim_timcr;

  /* Configure master timing unit */
  hrtim_timcr = hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR;
 8008bae:	68fb      	ldr	r3, [r7, #12]
 8008bb0:	681a      	ldr	r2, [r3, #0]
 8008bb2:	68bb      	ldr	r3, [r7, #8]
 8008bb4:	3301      	adds	r3, #1
 8008bb6:	01db      	lsls	r3, r3, #7
 8008bb8:	4413      	add	r3, r2
 8008bba:	681b      	ldr	r3, [r3, #0]
 8008bbc:	617b      	str	r3, [r7, #20]

  /* Set the prescaler ratio */
  hrtim_timcr &= (uint32_t) ~(HRTIM_TIMCR_CK_PSC);
 8008bbe:	697b      	ldr	r3, [r7, #20]
 8008bc0:	f023 0307 	bic.w	r3, r3, #7
 8008bc4:	617b      	str	r3, [r7, #20]
  hrtim_timcr |= (uint32_t)pTimeBaseCfg->PrescalerRatio;
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	689b      	ldr	r3, [r3, #8]
 8008bca:	697a      	ldr	r2, [r7, #20]
 8008bcc:	4313      	orrs	r3, r2
 8008bce:	617b      	str	r3, [r7, #20]

  /* Set the operating mode */
  hrtim_timcr &= (uint32_t) ~(HRTIM_TIMCR_CONT | HRTIM_TIMCR_RETRIG);
 8008bd0:	697b      	ldr	r3, [r7, #20]
 8008bd2:	f023 0318 	bic.w	r3, r3, #24
 8008bd6:	617b      	str	r3, [r7, #20]
  hrtim_timcr |= (uint32_t)pTimeBaseCfg->Mode;
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	68db      	ldr	r3, [r3, #12]
 8008bdc:	697a      	ldr	r2, [r7, #20]
 8008bde:	4313      	orrs	r3, r2
 8008be0:	617b      	str	r3, [r7, #20]

  /* Update the HRTIM registers */
  hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR = hrtim_timcr;
 8008be2:	68fb      	ldr	r3, [r7, #12]
 8008be4:	681a      	ldr	r2, [r3, #0]
 8008be6:	68bb      	ldr	r3, [r7, #8]
 8008be8:	3301      	adds	r3, #1
 8008bea:	01db      	lsls	r3, r3, #7
 8008bec:	4413      	add	r3, r2
 8008bee:	697a      	ldr	r2, [r7, #20]
 8008bf0:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sTimerxRegs[TimerIdx].PERxR = pTimeBaseCfg->Period;
 8008bf2:	68fb      	ldr	r3, [r7, #12]
 8008bf4:	6819      	ldr	r1, [r3, #0]
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	681a      	ldr	r2, [r3, #0]
 8008bfa:	68bb      	ldr	r3, [r7, #8]
 8008bfc:	01db      	lsls	r3, r3, #7
 8008bfe:	440b      	add	r3, r1
 8008c00:	3394      	adds	r3, #148	; 0x94
 8008c02:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sTimerxRegs[TimerIdx].REPxR = pTimeBaseCfg->RepetitionCounter;
 8008c04:	68fb      	ldr	r3, [r7, #12]
 8008c06:	6819      	ldr	r1, [r3, #0]
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	685a      	ldr	r2, [r3, #4]
 8008c0c:	68bb      	ldr	r3, [r7, #8]
 8008c0e:	01db      	lsls	r3, r3, #7
 8008c10:	440b      	add	r3, r1
 8008c12:	3398      	adds	r3, #152	; 0x98
 8008c14:	601a      	str	r2, [r3, #0]
}
 8008c16:	bf00      	nop
 8008c18:	371c      	adds	r7, #28
 8008c1a:	46bd      	mov	sp, r7
 8008c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c20:	4770      	bx	lr

08008c22 <HRTIM_MasterWaveform_Config>:
  * @param  pTimerCfg pointer to the timer configuration data structure
  * @retval None
  */
static void HRTIM_MasterWaveform_Config(HRTIM_HandleTypeDef * hhrtim,
                                        const HRTIM_TimerCfgTypeDef * pTimerCfg)
{
 8008c22:	b480      	push	{r7}
 8008c24:	b085      	sub	sp, #20
 8008c26:	af00      	add	r7, sp, #0
 8008c28:	6078      	str	r0, [r7, #4]
 8008c2a:	6039      	str	r1, [r7, #0]
  uint32_t hrtim_mcr;
  uint32_t hrtim_bmcr;

  /* Configure master timer */
  hrtim_mcr = hhrtim->Instance->sMasterRegs.MCR;
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	681b      	ldr	r3, [r3, #0]
 8008c30:	681b      	ldr	r3, [r3, #0]
 8008c32:	60fb      	str	r3, [r7, #12]
  hrtim_bmcr = hhrtim->Instance->sCommonRegs.BMCR;
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	681b      	ldr	r3, [r3, #0]
 8008c38:	f8d3 33a0 	ldr.w	r3, [r3, #928]	; 0x3a0
 8008c3c:	60bb      	str	r3, [r7, #8]

  /* Enable/Disable the half mode */
  hrtim_mcr &= ~(HRTIM_MCR_HALF);
 8008c3e:	68fb      	ldr	r3, [r7, #12]
 8008c40:	f023 0320 	bic.w	r3, r3, #32
 8008c44:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->HalfModeEnable;
 8008c46:	683b      	ldr	r3, [r7, #0]
 8008c48:	695b      	ldr	r3, [r3, #20]
 8008c4a:	68fa      	ldr	r2, [r7, #12]
 8008c4c:	4313      	orrs	r3, r2
 8008c4e:	60fb      	str	r3, [r7, #12]

  /* Enable/Disable the timer start upon synchronization event reception */
  hrtim_mcr &= ~(HRTIM_MCR_SYNCSTRTM);
 8008c50:	68fb      	ldr	r3, [r7, #12]
 8008c52:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008c56:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->StartOnSync;
 8008c58:	683b      	ldr	r3, [r7, #0]
 8008c5a:	699b      	ldr	r3, [r3, #24]
 8008c5c:	68fa      	ldr	r2, [r7, #12]
 8008c5e:	4313      	orrs	r3, r2
 8008c60:	60fb      	str	r3, [r7, #12]

  /* Enable/Disable the timer reset upon synchronization event reception */
  hrtim_mcr &= ~(HRTIM_MCR_SYNCRSTM);
 8008c62:	68fb      	ldr	r3, [r7, #12]
 8008c64:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008c68:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->ResetOnSync;
 8008c6a:	683b      	ldr	r3, [r7, #0]
 8008c6c:	69db      	ldr	r3, [r3, #28]
 8008c6e:	68fa      	ldr	r2, [r7, #12]
 8008c70:	4313      	orrs	r3, r2
 8008c72:	60fb      	str	r3, [r7, #12]

  /* Enable/Disable the DAC synchronization event generation */
  hrtim_mcr &= ~(HRTIM_MCR_DACSYNC);
 8008c74:	68fb      	ldr	r3, [r7, #12]
 8008c76:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8008c7a:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->DACSynchro;
 8008c7c:	683b      	ldr	r3, [r7, #0]
 8008c7e:	6a1b      	ldr	r3, [r3, #32]
 8008c80:	68fa      	ldr	r2, [r7, #12]
 8008c82:	4313      	orrs	r3, r2
 8008c84:	60fb      	str	r3, [r7, #12]

  /* Enable/Disable preload mechanism for timer registers */
  hrtim_mcr &= ~(HRTIM_MCR_PREEN);
 8008c86:	68fb      	ldr	r3, [r7, #12]
 8008c88:	f023 6300 	bic.w	r3, r3, #134217728	; 0x8000000
 8008c8c:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->PreloadEnable;
 8008c8e:	683b      	ldr	r3, [r7, #0]
 8008c90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c92:	68fa      	ldr	r2, [r7, #12]
 8008c94:	4313      	orrs	r3, r2
 8008c96:	60fb      	str	r3, [r7, #12]

  /* Master timer registers update handling */
  hrtim_mcr &= ~(HRTIM_MCR_BRSTDMA);
 8008c98:	68fb      	ldr	r3, [r7, #12]
 8008c9a:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8008c9e:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= (pTimerCfg->UpdateGating << 2U);
 8008ca0:	683b      	ldr	r3, [r7, #0]
 8008ca2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008ca4:	009b      	lsls	r3, r3, #2
 8008ca6:	68fa      	ldr	r2, [r7, #12]
 8008ca8:	4313      	orrs	r3, r2
 8008caa:	60fb      	str	r3, [r7, #12]

  /* Enable/Disable registers update on repetition */
  hrtim_mcr &= ~(HRTIM_MCR_MREPU);
 8008cac:	68fb      	ldr	r3, [r7, #12]
 8008cae:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8008cb2:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->RepetitionUpdate;
 8008cb4:	683b      	ldr	r3, [r7, #0]
 8008cb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008cb8:	68fa      	ldr	r2, [r7, #12]
 8008cba:	4313      	orrs	r3, r2
 8008cbc:	60fb      	str	r3, [r7, #12]

  /* Set the timer burst mode */
  hrtim_bmcr &= ~(HRTIM_BMCR_MTBM);
 8008cbe:	68bb      	ldr	r3, [r7, #8]
 8008cc0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008cc4:	60bb      	str	r3, [r7, #8]
  hrtim_bmcr |= pTimerCfg->BurstMode;
 8008cc6:	683b      	ldr	r3, [r7, #0]
 8008cc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008cca:	68ba      	ldr	r2, [r7, #8]
 8008ccc:	4313      	orrs	r3, r2
 8008cce:	60bb      	str	r3, [r7, #8]

  /* Update the HRTIM registers */
  hhrtim->Instance->sMasterRegs.MCR = hrtim_mcr;
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	681b      	ldr	r3, [r3, #0]
 8008cd4:	68fa      	ldr	r2, [r7, #12]
 8008cd6:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sCommonRegs.BMCR = hrtim_bmcr;
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	681b      	ldr	r3, [r3, #0]
 8008cdc:	68ba      	ldr	r2, [r7, #8]
 8008cde:	f8c3 23a0 	str.w	r2, [r3, #928]	; 0x3a0
}
 8008ce2:	bf00      	nop
 8008ce4:	3714      	adds	r7, #20
 8008ce6:	46bd      	mov	sp, r7
 8008ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cec:	4770      	bx	lr
	...

08008cf0 <HRTIM_TimingUnitWaveform_Config>:
  * @retval None
  */
static void  HRTIM_TimingUnitWaveform_Config(HRTIM_HandleTypeDef * hhrtim,
                                             uint32_t TimerIdx,
                                             const HRTIM_TimerCfgTypeDef * pTimerCfg)
{
 8008cf0:	b480      	push	{r7}
 8008cf2:	b08b      	sub	sp, #44	; 0x2c
 8008cf4:	af00      	add	r7, sp, #0
 8008cf6:	60f8      	str	r0, [r7, #12]
 8008cf8:	60b9      	str	r1, [r7, #8]
 8008cfa:	607a      	str	r2, [r7, #4]
  uint32_t hrtim_timoutr;
  uint32_t hrtim_timrstr;
  uint32_t hrtim_bmcr;

  /* UPDGAT bitfield must be reset before programming a new value */
  hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR &= ~(HRTIM_TIMCR_UPDGAT);
 8008cfc:	68fb      	ldr	r3, [r7, #12]
 8008cfe:	681a      	ldr	r2, [r3, #0]
 8008d00:	68bb      	ldr	r3, [r7, #8]
 8008d02:	3301      	adds	r3, #1
 8008d04:	01db      	lsls	r3, r3, #7
 8008d06:	4413      	add	r3, r2
 8008d08:	681b      	ldr	r3, [r3, #0]
 8008d0a:	68fa      	ldr	r2, [r7, #12]
 8008d0c:	6811      	ldr	r1, [r2, #0]
 8008d0e:	f023 4270 	bic.w	r2, r3, #4026531840	; 0xf0000000
 8008d12:	68bb      	ldr	r3, [r7, #8]
 8008d14:	3301      	adds	r3, #1
 8008d16:	01db      	lsls	r3, r3, #7
 8008d18:	440b      	add	r3, r1
 8008d1a:	601a      	str	r2, [r3, #0]

  /* Configure timing unit (Timer A to Timer E) */
  hrtim_timcr = hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR;
 8008d1c:	68fb      	ldr	r3, [r7, #12]
 8008d1e:	681a      	ldr	r2, [r3, #0]
 8008d20:	68bb      	ldr	r3, [r7, #8]
 8008d22:	3301      	adds	r3, #1
 8008d24:	01db      	lsls	r3, r3, #7
 8008d26:	4413      	add	r3, r2
 8008d28:	681b      	ldr	r3, [r3, #0]
 8008d2a:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timfltr = hhrtim->Instance->sTimerxRegs[TimerIdx].FLTxR;
 8008d2c:	68fb      	ldr	r3, [r7, #12]
 8008d2e:	681a      	ldr	r2, [r3, #0]
 8008d30:	68bb      	ldr	r3, [r7, #8]
 8008d32:	01db      	lsls	r3, r3, #7
 8008d34:	4413      	add	r3, r2
 8008d36:	33e8      	adds	r3, #232	; 0xe8
 8008d38:	681b      	ldr	r3, [r3, #0]
 8008d3a:	61bb      	str	r3, [r7, #24]
  hrtim_timoutr = hhrtim->Instance->sTimerxRegs[TimerIdx].OUTxR;
 8008d3c:	68fb      	ldr	r3, [r7, #12]
 8008d3e:	681a      	ldr	r2, [r3, #0]
 8008d40:	68bb      	ldr	r3, [r7, #8]
 8008d42:	01db      	lsls	r3, r3, #7
 8008d44:	4413      	add	r3, r2
 8008d46:	33e4      	adds	r3, #228	; 0xe4
 8008d48:	681b      	ldr	r3, [r3, #0]
 8008d4a:	623b      	str	r3, [r7, #32]
  hrtim_bmcr = hhrtim->Instance->sCommonRegs.BMCR;
 8008d4c:	68fb      	ldr	r3, [r7, #12]
 8008d4e:	681b      	ldr	r3, [r3, #0]
 8008d50:	f8d3 33a0 	ldr.w	r3, [r3, #928]	; 0x3a0
 8008d54:	61fb      	str	r3, [r7, #28]

  /* Enable/Disable the half mode */
  hrtim_timcr &= ~(HRTIM_TIMCR_HALF);
 8008d56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d58:	f023 0320 	bic.w	r3, r3, #32
 8008d5c:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timcr |= pTimerCfg->HalfModeEnable;
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	695b      	ldr	r3, [r3, #20]
 8008d62:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008d64:	4313      	orrs	r3, r2
 8008d66:	627b      	str	r3, [r7, #36]	; 0x24

  /* Enable/Disable the timer start upon synchronization event reception */
  hrtim_timcr &= ~(HRTIM_TIMCR_SYNCSTRT);
 8008d68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d6a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008d6e:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timcr |= pTimerCfg->StartOnSync;
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	699b      	ldr	r3, [r3, #24]
 8008d74:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008d76:	4313      	orrs	r3, r2
 8008d78:	627b      	str	r3, [r7, #36]	; 0x24

  /* Enable/Disable the timer reset upon synchronization event reception */
  hrtim_timcr &= ~(HRTIM_TIMCR_SYNCRST);
 8008d7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d7c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008d80:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timcr |= pTimerCfg->ResetOnSync;
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	69db      	ldr	r3, [r3, #28]
 8008d86:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008d88:	4313      	orrs	r3, r2
 8008d8a:	627b      	str	r3, [r7, #36]	; 0x24

  /* Enable/Disable the DAC synchronization event generation */
  hrtim_timcr &= ~(HRTIM_TIMCR_DACSYNC);
 8008d8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d8e:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8008d92:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timcr |= pTimerCfg->DACSynchro;
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	6a1b      	ldr	r3, [r3, #32]
 8008d98:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008d9a:	4313      	orrs	r3, r2
 8008d9c:	627b      	str	r3, [r7, #36]	; 0x24

  /* Enable/Disable preload mechanism for timer registers */
  hrtim_timcr &= ~(HRTIM_TIMCR_PREEN);
 8008d9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008da0:	f023 6300 	bic.w	r3, r3, #134217728	; 0x8000000
 8008da4:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timcr |= pTimerCfg->PreloadEnable;
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008daa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008dac:	4313      	orrs	r3, r2
 8008dae:	627b      	str	r3, [r7, #36]	; 0x24

  /* Timing unit registers update handling */
  hrtim_timcr &= ~(HRTIM_TIMCR_UPDGAT);
 8008db0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008db2:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8008db6:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timcr |= pTimerCfg->UpdateGating;
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008dbc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008dbe:	4313      	orrs	r3, r2
 8008dc0:	627b      	str	r3, [r7, #36]	; 0x24

  /* Enable/Disable registers update on repetition */
  hrtim_timcr &= ~(HRTIM_TIMCR_TREPU);
 8008dc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008dc4:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8008dc8:	627b      	str	r3, [r7, #36]	; 0x24
  if (pTimerCfg->RepetitionUpdate == HRTIM_UPDATEONREPETITION_ENABLED)
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008dce:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008dd2:	d103      	bne.n	8008ddc <HRTIM_TimingUnitWaveform_Config+0xec>
  {
    hrtim_timcr |= HRTIM_TIMCR_TREPU;
 8008dd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008dd6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008dda:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Set the push-pull mode */
  hrtim_timcr &= ~(HRTIM_TIMCR_PSHPLL);
 8008ddc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008dde:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008de2:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timcr |= pTimerCfg->PushPull;
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008de8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008dea:	4313      	orrs	r3, r2
 8008dec:	627b      	str	r3, [r7, #36]	; 0x24

  /* Enable/Disable registers update on timer counter reset */
  hrtim_timcr &= ~(HRTIM_TIMCR_TRSTU);
 8008dee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008df0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008df4:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timcr |= pTimerCfg->ResetUpdate;
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008dfa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008dfc:	4313      	orrs	r3, r2
 8008dfe:	627b      	str	r3, [r7, #36]	; 0x24

  /* Set the timer update trigger */
  hrtim_timcr &= ~(HRTIM_TIMCR_TIMUPDATETRIGGER);
 8008e00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e02:	f023 73fc 	bic.w	r3, r3, #33030144	; 0x1f80000
 8008e06:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timcr |= pTimerCfg->UpdateTrigger;
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008e0c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008e0e:	4313      	orrs	r3, r2
 8008e10:	627b      	str	r3, [r7, #36]	; 0x24

  /* Enable/Disable the fault channel at timer level */
  hrtim_timfltr &= ~(HRTIM_FLTR_FLTxEN);
 8008e12:	69bb      	ldr	r3, [r7, #24]
 8008e14:	f023 031f 	bic.w	r3, r3, #31
 8008e18:	61bb      	str	r3, [r7, #24]
  hrtim_timfltr |= (pTimerCfg->FaultEnable & HRTIM_FLTR_FLTxEN);
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e1e:	f003 031f 	and.w	r3, r3, #31
 8008e22:	69ba      	ldr	r2, [r7, #24]
 8008e24:	4313      	orrs	r3, r2
 8008e26:	61bb      	str	r3, [r7, #24]

  /* Lock/Unlock fault sources at timer level */
  hrtim_timfltr &= ~(HRTIM_FLTR_FLTLCK);
 8008e28:	69bb      	ldr	r3, [r7, #24]
 8008e2a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008e2e:	61bb      	str	r3, [r7, #24]
  hrtim_timfltr |= pTimerCfg->FaultLock;
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008e34:	69ba      	ldr	r2, [r7, #24]
 8008e36:	4313      	orrs	r3, r2
 8008e38:	61bb      	str	r3, [r7, #24]

  /* The deadtime cannot be used simultaneously with the push-pull mode */
  if (pTimerCfg->PushPull == HRTIM_TIMPUSHPULLMODE_DISABLED)
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008e3e:	2b00      	cmp	r3, #0
 8008e40:	d108      	bne.n	8008e54 <HRTIM_TimingUnitWaveform_Config+0x164>
  {
    /* Enable/Disable dead time insertion at timer level */
    hrtim_timoutr &= ~(HRTIM_OUTR_DTEN);
 8008e42:	6a3b      	ldr	r3, [r7, #32]
 8008e44:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008e48:	623b      	str	r3, [r7, #32]
    hrtim_timoutr |= pTimerCfg->DeadTimeInsertion;
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008e4e:	6a3a      	ldr	r2, [r7, #32]
 8008e50:	4313      	orrs	r3, r2
 8008e52:	623b      	str	r3, [r7, #32]

  /* Enable/Disable delayed protection at timer level
     Delayed Idle is available whatever the timer operating mode (regular, push-pull)
     Balanced Idle is only available in push-pull mode
  */
  if ( ((pTimerCfg->DelayedProtectionMode != HRTIM_TIMER_A_B_C_DELAYEDPROTECTION_BALANCED_EEV6)
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008e58:	f5b3 6f60 	cmp.w	r3, #3584	; 0xe00
 8008e5c:	d004      	beq.n	8008e68 <HRTIM_TimingUnitWaveform_Config+0x178>
       && (pTimerCfg->DelayedProtectionMode != HRTIM_TIMER_A_B_C_DELAYEDPROTECTION_BALANCED_EEV7))
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008e62:	f5b3 5ff0 	cmp.w	r3, #7680	; 0x1e00
 8008e66:	d103      	bne.n	8008e70 <HRTIM_TimingUnitWaveform_Config+0x180>
       || (pTimerCfg->PushPull == HRTIM_TIMPUSHPULLMODE_ENABLED))
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008e6c:	2b40      	cmp	r3, #64	; 0x40
 8008e6e:	d108      	bne.n	8008e82 <HRTIM_TimingUnitWaveform_Config+0x192>
  {
    hrtim_timoutr &= ~(HRTIM_OUTR_DLYPRT| HRTIM_OUTR_DLYPRTEN);
 8008e70:	6a3b      	ldr	r3, [r7, #32]
 8008e72:	f423 53f0 	bic.w	r3, r3, #7680	; 0x1e00
 8008e76:	623b      	str	r3, [r7, #32]
    hrtim_timoutr |= pTimerCfg->DelayedProtectionMode;
 8008e78:	687b      	ldr	r3, [r7, #4]
 8008e7a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008e7c:	6a3a      	ldr	r2, [r7, #32]
 8008e7e:	4313      	orrs	r3, r2
 8008e80:	623b      	str	r3, [r7, #32]
  }

  /* Set the timer counter reset trigger */
  hrtim_timrstr = pTimerCfg->ResetTrigger;
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008e86:	617b      	str	r3, [r7, #20]

  /* Set the timer burst mode */
  switch (TimerIdx)
 8008e88:	68bb      	ldr	r3, [r7, #8]
 8008e8a:	2b04      	cmp	r3, #4
 8008e8c:	d843      	bhi.n	8008f16 <HRTIM_TimingUnitWaveform_Config+0x226>
 8008e8e:	a201      	add	r2, pc, #4	; (adr r2, 8008e94 <HRTIM_TimingUnitWaveform_Config+0x1a4>)
 8008e90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008e94:	08008ea9 	.word	0x08008ea9
 8008e98:	08008ebf 	.word	0x08008ebf
 8008e9c:	08008ed5 	.word	0x08008ed5
 8008ea0:	08008eeb 	.word	0x08008eeb
 8008ea4:	08008f01 	.word	0x08008f01
  {
  case HRTIM_TIMERINDEX_TIMER_A:
    {
      hrtim_bmcr &= ~(HRTIM_BMCR_TABM);
 8008ea8:	69fb      	ldr	r3, [r7, #28]
 8008eaa:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8008eae:	61fb      	str	r3, [r7, #28]
      hrtim_bmcr |= ( pTimerCfg->BurstMode << 1U);
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008eb4:	005b      	lsls	r3, r3, #1
 8008eb6:	69fa      	ldr	r2, [r7, #28]
 8008eb8:	4313      	orrs	r3, r2
 8008eba:	61fb      	str	r3, [r7, #28]
      break;
 8008ebc:	e02c      	b.n	8008f18 <HRTIM_TimingUnitWaveform_Config+0x228>
    }

  case HRTIM_TIMERINDEX_TIMER_B:
    {
      hrtim_bmcr &= ~(HRTIM_BMCR_TBBM);
 8008ebe:	69fb      	ldr	r3, [r7, #28]
 8008ec0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008ec4:	61fb      	str	r3, [r7, #28]
      hrtim_bmcr |= ( pTimerCfg->BurstMode << 2U);
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008eca:	009b      	lsls	r3, r3, #2
 8008ecc:	69fa      	ldr	r2, [r7, #28]
 8008ece:	4313      	orrs	r3, r2
 8008ed0:	61fb      	str	r3, [r7, #28]
      break;
 8008ed2:	e021      	b.n	8008f18 <HRTIM_TimingUnitWaveform_Config+0x228>
    }

  case HRTIM_TIMERINDEX_TIMER_C:
    {
      hrtim_bmcr &= ~(HRTIM_BMCR_TCBM);
 8008ed4:	69fb      	ldr	r3, [r7, #28]
 8008ed6:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8008eda:	61fb      	str	r3, [r7, #28]
      hrtim_bmcr |= ( pTimerCfg->BurstMode << 3U);
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ee0:	00db      	lsls	r3, r3, #3
 8008ee2:	69fa      	ldr	r2, [r7, #28]
 8008ee4:	4313      	orrs	r3, r2
 8008ee6:	61fb      	str	r3, [r7, #28]
      break;
 8008ee8:	e016      	b.n	8008f18 <HRTIM_TimingUnitWaveform_Config+0x228>
    }

  case HRTIM_TIMERINDEX_TIMER_D:
    {
      hrtim_bmcr &= ~(HRTIM_BMCR_TDBM);
 8008eea:	69fb      	ldr	r3, [r7, #28]
 8008eec:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8008ef0:	61fb      	str	r3, [r7, #28]
      hrtim_bmcr |= ( pTimerCfg->BurstMode << 4U);
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ef6:	011b      	lsls	r3, r3, #4
 8008ef8:	69fa      	ldr	r2, [r7, #28]
 8008efa:	4313      	orrs	r3, r2
 8008efc:	61fb      	str	r3, [r7, #28]
      break;
 8008efe:	e00b      	b.n	8008f18 <HRTIM_TimingUnitWaveform_Config+0x228>
    }

  case HRTIM_TIMERINDEX_TIMER_E:
    {
      hrtim_bmcr &= ~(HRTIM_BMCR_TEBM);
 8008f00:	69fb      	ldr	r3, [r7, #28]
 8008f02:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8008f06:	61fb      	str	r3, [r7, #28]
      hrtim_bmcr |= ( pTimerCfg->BurstMode << 5U);
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f0c:	015b      	lsls	r3, r3, #5
 8008f0e:	69fa      	ldr	r2, [r7, #28]
 8008f10:	4313      	orrs	r3, r2
 8008f12:	61fb      	str	r3, [r7, #28]
      break;
 8008f14:	e000      	b.n	8008f18 <HRTIM_TimingUnitWaveform_Config+0x228>
    }

  default:
    break;
 8008f16:	bf00      	nop
  }

  /* Update the HRTIM registers */
  hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR = hrtim_timcr;
 8008f18:	68fb      	ldr	r3, [r7, #12]
 8008f1a:	681a      	ldr	r2, [r3, #0]
 8008f1c:	68bb      	ldr	r3, [r7, #8]
 8008f1e:	3301      	adds	r3, #1
 8008f20:	01db      	lsls	r3, r3, #7
 8008f22:	4413      	add	r3, r2
 8008f24:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008f26:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sTimerxRegs[TimerIdx].FLTxR = hrtim_timfltr;
 8008f28:	68fb      	ldr	r3, [r7, #12]
 8008f2a:	681a      	ldr	r2, [r3, #0]
 8008f2c:	68bb      	ldr	r3, [r7, #8]
 8008f2e:	01db      	lsls	r3, r3, #7
 8008f30:	4413      	add	r3, r2
 8008f32:	33e8      	adds	r3, #232	; 0xe8
 8008f34:	69ba      	ldr	r2, [r7, #24]
 8008f36:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sTimerxRegs[TimerIdx].OUTxR = hrtim_timoutr;
 8008f38:	68fb      	ldr	r3, [r7, #12]
 8008f3a:	681a      	ldr	r2, [r3, #0]
 8008f3c:	68bb      	ldr	r3, [r7, #8]
 8008f3e:	01db      	lsls	r3, r3, #7
 8008f40:	4413      	add	r3, r2
 8008f42:	33e4      	adds	r3, #228	; 0xe4
 8008f44:	6a3a      	ldr	r2, [r7, #32]
 8008f46:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sTimerxRegs[TimerIdx].RSTxR = hrtim_timrstr;
 8008f48:	68fb      	ldr	r3, [r7, #12]
 8008f4a:	681a      	ldr	r2, [r3, #0]
 8008f4c:	68bb      	ldr	r3, [r7, #8]
 8008f4e:	01db      	lsls	r3, r3, #7
 8008f50:	4413      	add	r3, r2
 8008f52:	33d4      	adds	r3, #212	; 0xd4
 8008f54:	697a      	ldr	r2, [r7, #20]
 8008f56:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sCommonRegs.BMCR = hrtim_bmcr;
 8008f58:	68fb      	ldr	r3, [r7, #12]
 8008f5a:	681b      	ldr	r3, [r3, #0]
 8008f5c:	69fa      	ldr	r2, [r7, #28]
 8008f5e:	f8c3 23a0 	str.w	r2, [r3, #928]	; 0x3a0
}
 8008f62:	bf00      	nop
 8008f64:	372c      	adds	r7, #44	; 0x2c
 8008f66:	46bd      	mov	sp, r7
 8008f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f6c:	4770      	bx	lr
 8008f6e:	bf00      	nop

08008f70 <HRTIM_OutputConfig>:
  */
static void  HRTIM_OutputConfig(HRTIM_HandleTypeDef * hhrtim,
                                uint32_t TimerIdx,
                                uint32_t Output,
                                const HRTIM_OutputCfgTypeDef * pOutputCfg)
{
 8008f70:	b480      	push	{r7}
 8008f72:	b089      	sub	sp, #36	; 0x24
 8008f74:	af00      	add	r7, sp, #0
 8008f76:	60f8      	str	r0, [r7, #12]
 8008f78:	60b9      	str	r1, [r7, #8]
 8008f7a:	607a      	str	r2, [r7, #4]
 8008f7c:	603b      	str	r3, [r7, #0]
  uint32_t hrtim_outr;
  uint32_t hrtim_dtr;

  uint32_t shift = 0U;
 8008f7e:	2300      	movs	r3, #0
 8008f80:	61bb      	str	r3, [r7, #24]

  hrtim_outr = hhrtim->Instance->sTimerxRegs[TimerIdx].OUTxR;
 8008f82:	68fb      	ldr	r3, [r7, #12]
 8008f84:	681a      	ldr	r2, [r3, #0]
 8008f86:	68bb      	ldr	r3, [r7, #8]
 8008f88:	01db      	lsls	r3, r3, #7
 8008f8a:	4413      	add	r3, r2
 8008f8c:	33e4      	adds	r3, #228	; 0xe4
 8008f8e:	681b      	ldr	r3, [r3, #0]
 8008f90:	61fb      	str	r3, [r7, #28]
  hrtim_dtr = hhrtim->Instance->sTimerxRegs[TimerIdx].DTxR;
 8008f92:	68fb      	ldr	r3, [r7, #12]
 8008f94:	681a      	ldr	r2, [r3, #0]
 8008f96:	68bb      	ldr	r3, [r7, #8]
 8008f98:	01db      	lsls	r3, r3, #7
 8008f9a:	4413      	add	r3, r2
 8008f9c:	33b8      	adds	r3, #184	; 0xb8
 8008f9e:	681b      	ldr	r3, [r3, #0]
 8008fa0:	617b      	str	r3, [r7, #20]

  switch (Output)
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008fa8:	d04d      	beq.n	8009046 <HRTIM_OutputConfig+0xd6>
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008fb0:	d85e      	bhi.n	8009070 <HRTIM_OutputConfig+0x100>
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008fb8:	d032      	beq.n	8009020 <HRTIM_OutputConfig+0xb0>
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008fc0:	d856      	bhi.n	8009070 <HRTIM_OutputConfig+0x100>
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	2b80      	cmp	r3, #128	; 0x80
 8008fc6:	d03e      	beq.n	8009046 <HRTIM_OutputConfig+0xd6>
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	2b80      	cmp	r3, #128	; 0x80
 8008fcc:	d850      	bhi.n	8009070 <HRTIM_OutputConfig+0x100>
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	2b40      	cmp	r3, #64	; 0x40
 8008fd2:	d025      	beq.n	8009020 <HRTIM_OutputConfig+0xb0>
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	2b40      	cmp	r3, #64	; 0x40
 8008fd8:	d84a      	bhi.n	8009070 <HRTIM_OutputConfig+0x100>
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	2b01      	cmp	r3, #1
 8008fde:	d01f      	beq.n	8009020 <HRTIM_OutputConfig+0xb0>
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	2b00      	cmp	r3, #0
 8008fe4:	d044      	beq.n	8009070 <HRTIM_OutputConfig+0x100>
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	2b20      	cmp	r3, #32
 8008fea:	d841      	bhi.n	8009070 <HRTIM_OutputConfig+0x100>
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	2b02      	cmp	r3, #2
 8008ff0:	d33e      	bcc.n	8009070 <HRTIM_OutputConfig+0x100>
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	3b02      	subs	r3, #2
 8008ff6:	2201      	movs	r2, #1
 8008ff8:	409a      	lsls	r2, r3
 8008ffa:	4b48      	ldr	r3, [pc, #288]	; (800911c <HRTIM_OutputConfig+0x1ac>)
 8008ffc:	4013      	ands	r3, r2
 8008ffe:	2b00      	cmp	r3, #0
 8009000:	bf14      	ite	ne
 8009002:	2301      	movne	r3, #1
 8009004:	2300      	moveq	r3, #0
 8009006:	b2db      	uxtb	r3, r3
 8009008:	2b00      	cmp	r3, #0
 800900a:	d11c      	bne.n	8009046 <HRTIM_OutputConfig+0xd6>
 800900c:	f244 0304 	movw	r3, #16388	; 0x4004
 8009010:	4013      	ands	r3, r2
 8009012:	2b00      	cmp	r3, #0
 8009014:	bf14      	ite	ne
 8009016:	2301      	movne	r3, #1
 8009018:	2300      	moveq	r3, #0
 800901a:	b2db      	uxtb	r3, r3
 800901c:	2b00      	cmp	r3, #0
 800901e:	d027      	beq.n	8009070 <HRTIM_OutputConfig+0x100>
  case HRTIM_OUTPUT_TC1:
  case HRTIM_OUTPUT_TD1:
  case HRTIM_OUTPUT_TE1:
    {
      /* Set the output set/reset crossbar */
      hhrtim->Instance->sTimerxRegs[TimerIdx].SETx1R = pOutputCfg->SetSource;
 8009020:	68fb      	ldr	r3, [r7, #12]
 8009022:	6819      	ldr	r1, [r3, #0]
 8009024:	683b      	ldr	r3, [r7, #0]
 8009026:	685a      	ldr	r2, [r3, #4]
 8009028:	68bb      	ldr	r3, [r7, #8]
 800902a:	01db      	lsls	r3, r3, #7
 800902c:	440b      	add	r3, r1
 800902e:	33bc      	adds	r3, #188	; 0xbc
 8009030:	601a      	str	r2, [r3, #0]
      hhrtim->Instance->sTimerxRegs[TimerIdx].RSTx1R = pOutputCfg->ResetSource;
 8009032:	68fb      	ldr	r3, [r7, #12]
 8009034:	6819      	ldr	r1, [r3, #0]
 8009036:	683b      	ldr	r3, [r7, #0]
 8009038:	689a      	ldr	r2, [r3, #8]
 800903a:	68bb      	ldr	r3, [r7, #8]
 800903c:	01db      	lsls	r3, r3, #7
 800903e:	440b      	add	r3, r1
 8009040:	33c0      	adds	r3, #192	; 0xc0
 8009042:	601a      	str	r2, [r3, #0]
      break;
 8009044:	e015      	b.n	8009072 <HRTIM_OutputConfig+0x102>
  case HRTIM_OUTPUT_TC2:
  case HRTIM_OUTPUT_TD2:
  case HRTIM_OUTPUT_TE2:
    {
      /* Set the output set/reset crossbar */
      hhrtim->Instance->sTimerxRegs[TimerIdx].SETx2R = pOutputCfg->SetSource;
 8009046:	68fb      	ldr	r3, [r7, #12]
 8009048:	6819      	ldr	r1, [r3, #0]
 800904a:	683b      	ldr	r3, [r7, #0]
 800904c:	685a      	ldr	r2, [r3, #4]
 800904e:	68bb      	ldr	r3, [r7, #8]
 8009050:	01db      	lsls	r3, r3, #7
 8009052:	440b      	add	r3, r1
 8009054:	33c4      	adds	r3, #196	; 0xc4
 8009056:	601a      	str	r2, [r3, #0]
      hhrtim->Instance->sTimerxRegs[TimerIdx].RSTx2R = pOutputCfg->ResetSource;
 8009058:	68fb      	ldr	r3, [r7, #12]
 800905a:	6819      	ldr	r1, [r3, #0]
 800905c:	683b      	ldr	r3, [r7, #0]
 800905e:	689a      	ldr	r2, [r3, #8]
 8009060:	68bb      	ldr	r3, [r7, #8]
 8009062:	01db      	lsls	r3, r3, #7
 8009064:	440b      	add	r3, r1
 8009066:	33c8      	adds	r3, #200	; 0xc8
 8009068:	601a      	str	r2, [r3, #0]
      shift = 16U;
 800906a:	2310      	movs	r3, #16
 800906c:	61bb      	str	r3, [r7, #24]
      break;
 800906e:	e000      	b.n	8009072 <HRTIM_OutputConfig+0x102>
    }

  default:
    break;
 8009070:	bf00      	nop
  hrtim_outr &= ~((HRTIM_OUTR_POL1 |
                   HRTIM_OUTR_IDLM1 |
                   HRTIM_OUTR_IDLES1|
                   HRTIM_OUTR_FAULT1|
                   HRTIM_OUTR_CHP1 |
                   HRTIM_OUTR_DIDL1) << shift);
 8009072:	22fe      	movs	r2, #254	; 0xfe
 8009074:	69bb      	ldr	r3, [r7, #24]
 8009076:	fa02 f303 	lsl.w	r3, r2, r3
  hrtim_outr &= ~((HRTIM_OUTR_POL1 |
 800907a:	43db      	mvns	r3, r3
 800907c:	69fa      	ldr	r2, [r7, #28]
 800907e:	4013      	ands	r3, r2
 8009080:	61fb      	str	r3, [r7, #28]

  /* Set the polarity */
  hrtim_outr |= (pOutputCfg->Polarity << shift);
 8009082:	683b      	ldr	r3, [r7, #0]
 8009084:	681a      	ldr	r2, [r3, #0]
 8009086:	69bb      	ldr	r3, [r7, #24]
 8009088:	fa02 f303 	lsl.w	r3, r2, r3
 800908c:	69fa      	ldr	r2, [r7, #28]
 800908e:	4313      	orrs	r3, r2
 8009090:	61fb      	str	r3, [r7, #28]

  /* Set the IDLE mode */
  hrtim_outr |= (pOutputCfg->IdleMode << shift);
 8009092:	683b      	ldr	r3, [r7, #0]
 8009094:	68da      	ldr	r2, [r3, #12]
 8009096:	69bb      	ldr	r3, [r7, #24]
 8009098:	fa02 f303 	lsl.w	r3, r2, r3
 800909c:	69fa      	ldr	r2, [r7, #28]
 800909e:	4313      	orrs	r3, r2
 80090a0:	61fb      	str	r3, [r7, #28]

  /* Set the IDLE state */
  hrtim_outr |= (pOutputCfg->IdleLevel << shift);
 80090a2:	683b      	ldr	r3, [r7, #0]
 80090a4:	691a      	ldr	r2, [r3, #16]
 80090a6:	69bb      	ldr	r3, [r7, #24]
 80090a8:	fa02 f303 	lsl.w	r3, r2, r3
 80090ac:	69fa      	ldr	r2, [r7, #28]
 80090ae:	4313      	orrs	r3, r2
 80090b0:	61fb      	str	r3, [r7, #28]

  /* Set the FAULT state */
  hrtim_outr |= (pOutputCfg->FaultLevel << shift);
 80090b2:	683b      	ldr	r3, [r7, #0]
 80090b4:	695a      	ldr	r2, [r3, #20]
 80090b6:	69bb      	ldr	r3, [r7, #24]
 80090b8:	fa02 f303 	lsl.w	r3, r2, r3
 80090bc:	69fa      	ldr	r2, [r7, #28]
 80090be:	4313      	orrs	r3, r2
 80090c0:	61fb      	str	r3, [r7, #28]

  /* Set the chopper mode */
  hrtim_outr |= (pOutputCfg->ChopperModeEnable << shift);
 80090c2:	683b      	ldr	r3, [r7, #0]
 80090c4:	699a      	ldr	r2, [r3, #24]
 80090c6:	69bb      	ldr	r3, [r7, #24]
 80090c8:	fa02 f303 	lsl.w	r3, r2, r3
 80090cc:	69fa      	ldr	r2, [r7, #28]
 80090ce:	4313      	orrs	r3, r2
 80090d0:	61fb      	str	r3, [r7, #28]
     state during a burst mode operation is allowed only under the following
     conditions:
     - the outputs is active during the burst mode (IDLES=1U)
     - positive deadtimes (SDTR/SDTF set to 0U)
  */
  if ((pOutputCfg->IdleLevel == HRTIM_OUTPUTIDLELEVEL_ACTIVE) &&
 80090d2:	683b      	ldr	r3, [r7, #0]
 80090d4:	691b      	ldr	r3, [r3, #16]
 80090d6:	2b08      	cmp	r3, #8
 80090d8:	d111      	bne.n	80090fe <HRTIM_OutputConfig+0x18e>
      ((hrtim_dtr & HRTIM_DTR_SDTR) == (uint32_t)RESET) &&
 80090da:	697b      	ldr	r3, [r7, #20]
 80090dc:	f403 7300 	and.w	r3, r3, #512	; 0x200
  if ((pOutputCfg->IdleLevel == HRTIM_OUTPUTIDLELEVEL_ACTIVE) &&
 80090e0:	2b00      	cmp	r3, #0
 80090e2:	d10c      	bne.n	80090fe <HRTIM_OutputConfig+0x18e>
      ((hrtim_dtr & HRTIM_DTR_SDTF) == (uint32_t)RESET))
 80090e4:	697b      	ldr	r3, [r7, #20]
 80090e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
      ((hrtim_dtr & HRTIM_DTR_SDTR) == (uint32_t)RESET) &&
 80090ea:	2b00      	cmp	r3, #0
 80090ec:	d107      	bne.n	80090fe <HRTIM_OutputConfig+0x18e>
  {
    hrtim_outr |= (pOutputCfg->BurstModeEntryDelayed << shift);
 80090ee:	683b      	ldr	r3, [r7, #0]
 80090f0:	69da      	ldr	r2, [r3, #28]
 80090f2:	69bb      	ldr	r3, [r7, #24]
 80090f4:	fa02 f303 	lsl.w	r3, r2, r3
 80090f8:	69fa      	ldr	r2, [r7, #28]
 80090fa:	4313      	orrs	r3, r2
 80090fc:	61fb      	str	r3, [r7, #28]
  }

  /* Update HRTIM register */
  hhrtim->Instance->sTimerxRegs[TimerIdx].OUTxR = hrtim_outr;
 80090fe:	68fb      	ldr	r3, [r7, #12]
 8009100:	681a      	ldr	r2, [r3, #0]
 8009102:	68bb      	ldr	r3, [r7, #8]
 8009104:	01db      	lsls	r3, r3, #7
 8009106:	4413      	add	r3, r2
 8009108:	33e4      	adds	r3, #228	; 0xe4
 800910a:	69fa      	ldr	r2, [r7, #28]
 800910c:	601a      	str	r2, [r3, #0]
}
 800910e:	bf00      	nop
 8009110:	3724      	adds	r7, #36	; 0x24
 8009112:	46bd      	mov	sp, r7
 8009114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009118:	4770      	bx	lr
 800911a:	bf00      	nop
 800911c:	40000041 	.word	0x40000041

08009120 <HRTIM_ForceRegistersUpdate>:
  * @param  TimerIdx Timer index
  * @retval None
  */
static void HRTIM_ForceRegistersUpdate(HRTIM_HandleTypeDef * hhrtim,
                                       uint32_t TimerIdx)
{
 8009120:	b480      	push	{r7}
 8009122:	b083      	sub	sp, #12
 8009124:	af00      	add	r7, sp, #0
 8009126:	6078      	str	r0, [r7, #4]
 8009128:	6039      	str	r1, [r7, #0]
  switch (TimerIdx)
 800912a:	683b      	ldr	r3, [r7, #0]
 800912c:	2b05      	cmp	r3, #5
 800912e:	d851      	bhi.n	80091d4 <HRTIM_ForceRegistersUpdate+0xb4>
 8009130:	a201      	add	r2, pc, #4	; (adr r2, 8009138 <HRTIM_ForceRegistersUpdate+0x18>)
 8009132:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009136:	bf00      	nop
 8009138:	08009167 	.word	0x08009167
 800913c:	0800917d 	.word	0x0800917d
 8009140:	08009193 	.word	0x08009193
 8009144:	080091a9 	.word	0x080091a9
 8009148:	080091bf 	.word	0x080091bf
 800914c:	08009151 	.word	0x08009151
  {
  case HRTIM_TIMERINDEX_MASTER:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_MSWU;
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	681b      	ldr	r3, [r3, #0]
 8009154:	f8d3 2384 	ldr.w	r2, [r3, #900]	; 0x384
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	681b      	ldr	r3, [r3, #0]
 800915c:	f042 0201 	orr.w	r2, r2, #1
 8009160:	f8c3 2384 	str.w	r2, [r3, #900]	; 0x384
      break;
 8009164:	e037      	b.n	80091d6 <HRTIM_ForceRegistersUpdate+0xb6>
    }

  case HRTIM_TIMERINDEX_TIMER_A:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TASWU;
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	681b      	ldr	r3, [r3, #0]
 800916a:	f8d3 2384 	ldr.w	r2, [r3, #900]	; 0x384
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	681b      	ldr	r3, [r3, #0]
 8009172:	f042 0202 	orr.w	r2, r2, #2
 8009176:	f8c3 2384 	str.w	r2, [r3, #900]	; 0x384
      break;
 800917a:	e02c      	b.n	80091d6 <HRTIM_ForceRegistersUpdate+0xb6>
    }

  case HRTIM_TIMERINDEX_TIMER_B:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TBSWU;
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	681b      	ldr	r3, [r3, #0]
 8009180:	f8d3 2384 	ldr.w	r2, [r3, #900]	; 0x384
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	681b      	ldr	r3, [r3, #0]
 8009188:	f042 0204 	orr.w	r2, r2, #4
 800918c:	f8c3 2384 	str.w	r2, [r3, #900]	; 0x384
      break;
 8009190:	e021      	b.n	80091d6 <HRTIM_ForceRegistersUpdate+0xb6>
    }

  case HRTIM_TIMERINDEX_TIMER_C:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TCSWU;
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	681b      	ldr	r3, [r3, #0]
 8009196:	f8d3 2384 	ldr.w	r2, [r3, #900]	; 0x384
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	681b      	ldr	r3, [r3, #0]
 800919e:	f042 0208 	orr.w	r2, r2, #8
 80091a2:	f8c3 2384 	str.w	r2, [r3, #900]	; 0x384
      break;
 80091a6:	e016      	b.n	80091d6 <HRTIM_ForceRegistersUpdate+0xb6>
    }

  case HRTIM_TIMERINDEX_TIMER_D:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TDSWU;
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	681b      	ldr	r3, [r3, #0]
 80091ac:	f8d3 2384 	ldr.w	r2, [r3, #900]	; 0x384
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	681b      	ldr	r3, [r3, #0]
 80091b4:	f042 0210 	orr.w	r2, r2, #16
 80091b8:	f8c3 2384 	str.w	r2, [r3, #900]	; 0x384
      break;
 80091bc:	e00b      	b.n	80091d6 <HRTIM_ForceRegistersUpdate+0xb6>
    }

  case HRTIM_TIMERINDEX_TIMER_E:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TESWU;
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	681b      	ldr	r3, [r3, #0]
 80091c2:	f8d3 2384 	ldr.w	r2, [r3, #900]	; 0x384
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	681b      	ldr	r3, [r3, #0]
 80091ca:	f042 0220 	orr.w	r2, r2, #32
 80091ce:	f8c3 2384 	str.w	r2, [r3, #900]	; 0x384
      break;
 80091d2:	e000      	b.n	80091d6 <HRTIM_ForceRegistersUpdate+0xb6>
    }

  default:
    break;
 80091d4:	bf00      	nop
  }
}
 80091d6:	bf00      	nop
 80091d8:	370c      	adds	r7, #12
 80091da:	46bd      	mov	sp, r7
 80091dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091e0:	4770      	bx	lr
 80091e2:	bf00      	nop

080091e4 <HRTIM_HRTIM_ISR>:
  * @brief  HRTIM interrupts service routine
  * @param  hhrtim pointer to HAL HRTIM handle
  * @retval None
  */
static void HRTIM_HRTIM_ISR(HRTIM_HandleTypeDef * hhrtim)
{
 80091e4:	b580      	push	{r7, lr}
 80091e6:	b084      	sub	sp, #16
 80091e8:	af00      	add	r7, sp, #0
 80091ea:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hhrtim->Instance->sCommonRegs.ISR);
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	681b      	ldr	r3, [r3, #0]
 80091f0:	f8d3 3388 	ldr.w	r3, [r3, #904]	; 0x388
 80091f4:	60fb      	str	r3, [r7, #12]
  uint32_t ierits   = READ_REG(hhrtim->Instance->sCommonRegs.IER);
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	681b      	ldr	r3, [r3, #0]
 80091fa:	f8d3 3390 	ldr.w	r3, [r3, #912]	; 0x390
 80091fe:	60bb      	str	r3, [r7, #8]

  /* Fault 1 event */
  if((uint32_t)(isrflags & HRTIM_FLAG_FLT1) != (uint32_t)RESET)
 8009200:	68fb      	ldr	r3, [r7, #12]
 8009202:	f003 0301 	and.w	r3, r3, #1
 8009206:	2b00      	cmp	r3, #0
 8009208:	d00c      	beq.n	8009224 <HRTIM_HRTIM_ISR+0x40>
  {
    if((uint32_t)(ierits & HRTIM_IT_FLT1) != (uint32_t)RESET)
 800920a:	68bb      	ldr	r3, [r7, #8]
 800920c:	f003 0301 	and.w	r3, r3, #1
 8009210:	2b00      	cmp	r3, #0
 8009212:	d007      	beq.n	8009224 <HRTIM_HRTIM_ISR+0x40>
    {
      __HAL_HRTIM_CLEAR_IT(hhrtim, HRTIM_IT_FLT1);
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	681b      	ldr	r3, [r3, #0]
 8009218:	2201      	movs	r2, #1
 800921a:	f8c3 238c 	str.w	r2, [r3, #908]	; 0x38c

      /* Invoke Fault 1 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Fault1Callback(hhrtim);
#else
      HAL_HRTIM_Fault1Callback(hhrtim);
 800921e:	6878      	ldr	r0, [r7, #4]
 8009220:	f7ff fbc7 	bl	80089b2 <HAL_HRTIM_Fault1Callback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Fault 2 event */
  if((uint32_t)(isrflags & HRTIM_FLAG_FLT2) != (uint32_t)RESET)
 8009224:	68fb      	ldr	r3, [r7, #12]
 8009226:	f003 0302 	and.w	r3, r3, #2
 800922a:	2b00      	cmp	r3, #0
 800922c:	d00c      	beq.n	8009248 <HRTIM_HRTIM_ISR+0x64>
  {
    if((uint32_t)(ierits & HRTIM_IT_FLT2) != (uint32_t)RESET)
 800922e:	68bb      	ldr	r3, [r7, #8]
 8009230:	f003 0302 	and.w	r3, r3, #2
 8009234:	2b00      	cmp	r3, #0
 8009236:	d007      	beq.n	8009248 <HRTIM_HRTIM_ISR+0x64>
    {
      __HAL_HRTIM_CLEAR_IT(hhrtim, HRTIM_IT_FLT2);
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	681b      	ldr	r3, [r3, #0]
 800923c:	2202      	movs	r2, #2
 800923e:	f8c3 238c 	str.w	r2, [r3, #908]	; 0x38c

      /* Invoke Fault 2 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Fault2Callback(hhrtim);
#else
      HAL_HRTIM_Fault2Callback(hhrtim);
 8009242:	6878      	ldr	r0, [r7, #4]
 8009244:	f7ff fbbf 	bl	80089c6 <HAL_HRTIM_Fault2Callback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Fault 3 event */
  if((uint32_t)(isrflags & HRTIM_FLAG_FLT3) != (uint32_t)RESET)
 8009248:	68fb      	ldr	r3, [r7, #12]
 800924a:	f003 0304 	and.w	r3, r3, #4
 800924e:	2b00      	cmp	r3, #0
 8009250:	d00c      	beq.n	800926c <HRTIM_HRTIM_ISR+0x88>
  {
    if((uint32_t)(ierits & HRTIM_IT_FLT3) != (uint32_t)RESET)
 8009252:	68bb      	ldr	r3, [r7, #8]
 8009254:	f003 0304 	and.w	r3, r3, #4
 8009258:	2b00      	cmp	r3, #0
 800925a:	d007      	beq.n	800926c <HRTIM_HRTIM_ISR+0x88>
    {
      __HAL_HRTIM_CLEAR_IT(hhrtim, HRTIM_IT_FLT3);
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	681b      	ldr	r3, [r3, #0]
 8009260:	2204      	movs	r2, #4
 8009262:	f8c3 238c 	str.w	r2, [r3, #908]	; 0x38c

      /* Invoke Fault 3 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Fault3Callback(hhrtim);
#else
      HAL_HRTIM_Fault3Callback(hhrtim);
 8009266:	6878      	ldr	r0, [r7, #4]
 8009268:	f7ff fbb7 	bl	80089da <HAL_HRTIM_Fault3Callback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Fault 4 event */
  if((uint32_t)(isrflags & HRTIM_FLAG_FLT4) != (uint32_t)RESET)
 800926c:	68fb      	ldr	r3, [r7, #12]
 800926e:	f003 0308 	and.w	r3, r3, #8
 8009272:	2b00      	cmp	r3, #0
 8009274:	d00c      	beq.n	8009290 <HRTIM_HRTIM_ISR+0xac>
  {
    if((uint32_t)(ierits & HRTIM_IT_FLT4) != (uint32_t)RESET)
 8009276:	68bb      	ldr	r3, [r7, #8]
 8009278:	f003 0308 	and.w	r3, r3, #8
 800927c:	2b00      	cmp	r3, #0
 800927e:	d007      	beq.n	8009290 <HRTIM_HRTIM_ISR+0xac>
    {
      __HAL_HRTIM_CLEAR_IT(hhrtim, HRTIM_IT_FLT4);
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	681b      	ldr	r3, [r3, #0]
 8009284:	2208      	movs	r2, #8
 8009286:	f8c3 238c 	str.w	r2, [r3, #908]	; 0x38c

      /* Invoke Fault 4 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Fault4Callback(hhrtim);
#else
      HAL_HRTIM_Fault4Callback(hhrtim);
 800928a:	6878      	ldr	r0, [r7, #4]
 800928c:	f7ff fbaf 	bl	80089ee <HAL_HRTIM_Fault4Callback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Fault 5 event */
  if((uint32_t)(isrflags & HRTIM_FLAG_FLT5) != (uint32_t)RESET)
 8009290:	68fb      	ldr	r3, [r7, #12]
 8009292:	f003 0310 	and.w	r3, r3, #16
 8009296:	2b00      	cmp	r3, #0
 8009298:	d00c      	beq.n	80092b4 <HRTIM_HRTIM_ISR+0xd0>
  {
    if((uint32_t)(ierits & HRTIM_IT_FLT5) != (uint32_t)RESET)
 800929a:	68bb      	ldr	r3, [r7, #8]
 800929c:	f003 0310 	and.w	r3, r3, #16
 80092a0:	2b00      	cmp	r3, #0
 80092a2:	d007      	beq.n	80092b4 <HRTIM_HRTIM_ISR+0xd0>
    {
      __HAL_HRTIM_CLEAR_IT(hhrtim, HRTIM_IT_FLT5);
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	681b      	ldr	r3, [r3, #0]
 80092a8:	2210      	movs	r2, #16
 80092aa:	f8c3 238c 	str.w	r2, [r3, #908]	; 0x38c

      /* Invoke Fault 5 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Fault5Callback(hhrtim);
#else
      HAL_HRTIM_Fault5Callback(hhrtim);
 80092ae:	6878      	ldr	r0, [r7, #4]
 80092b0:	f7ff fba7 	bl	8008a02 <HAL_HRTIM_Fault5Callback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* System fault event */
  if((uint32_t)(isrflags & HRTIM_FLAG_SYSFLT) != (uint32_t)RESET)
 80092b4:	68fb      	ldr	r3, [r7, #12]
 80092b6:	f003 0320 	and.w	r3, r3, #32
 80092ba:	2b00      	cmp	r3, #0
 80092bc:	d00c      	beq.n	80092d8 <HRTIM_HRTIM_ISR+0xf4>
  {
    if((uint32_t)(ierits & HRTIM_IT_SYSFLT) != (uint32_t)RESET)
 80092be:	68bb      	ldr	r3, [r7, #8]
 80092c0:	f003 0320 	and.w	r3, r3, #32
 80092c4:	2b00      	cmp	r3, #0
 80092c6:	d007      	beq.n	80092d8 <HRTIM_HRTIM_ISR+0xf4>
    {
      __HAL_HRTIM_CLEAR_IT(hhrtim, HRTIM_IT_SYSFLT);
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	681b      	ldr	r3, [r3, #0]
 80092cc:	2220      	movs	r2, #32
 80092ce:	f8c3 238c 	str.w	r2, [r3, #908]	; 0x38c

      /* Invoke System fault event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->SystemFaultCallback(hhrtim);
#else
      HAL_HRTIM_SystemFaultCallback(hhrtim);
 80092d2:	6878      	ldr	r0, [r7, #4]
 80092d4:	f7ff fb9f 	bl	8008a16 <HAL_HRTIM_SystemFaultCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }
}
 80092d8:	bf00      	nop
 80092da:	3710      	adds	r7, #16
 80092dc:	46bd      	mov	sp, r7
 80092de:	bd80      	pop	{r7, pc}

080092e0 <HRTIM_Master_ISR>:
* @brief  Master timer interrupts service routine
* @param  hhrtim pointer to HAL HRTIM handle
* @retval None
*/
static void HRTIM_Master_ISR(HRTIM_HandleTypeDef * hhrtim)
{
 80092e0:	b580      	push	{r7, lr}
 80092e2:	b086      	sub	sp, #24
 80092e4:	af00      	add	r7, sp, #0
 80092e6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hhrtim->Instance->sCommonRegs.ISR);
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	681b      	ldr	r3, [r3, #0]
 80092ec:	f8d3 3388 	ldr.w	r3, [r3, #904]	; 0x388
 80092f0:	617b      	str	r3, [r7, #20]
  uint32_t ierits    = READ_REG(hhrtim->Instance->sCommonRegs.IER);
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	681b      	ldr	r3, [r3, #0]
 80092f6:	f8d3 3390 	ldr.w	r3, [r3, #912]	; 0x390
 80092fa:	613b      	str	r3, [r7, #16]
  uint32_t misrflags = READ_REG(hhrtim->Instance->sMasterRegs.MISR);
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	681b      	ldr	r3, [r3, #0]
 8009300:	685b      	ldr	r3, [r3, #4]
 8009302:	60fb      	str	r3, [r7, #12]
  uint32_t mdierits  = READ_REG(hhrtim->Instance->sMasterRegs.MDIER);
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	681b      	ldr	r3, [r3, #0]
 8009308:	68db      	ldr	r3, [r3, #12]
 800930a:	60bb      	str	r3, [r7, #8]

  /* Burst mode period event */
  if((uint32_t)(isrflags & HRTIM_FLAG_BMPER) != (uint32_t)RESET)
 800930c:	697b      	ldr	r3, [r7, #20]
 800930e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009312:	2b00      	cmp	r3, #0
 8009314:	d00d      	beq.n	8009332 <HRTIM_Master_ISR+0x52>
  {
    if((uint32_t)(ierits & HRTIM_IT_BMPER) != (uint32_t)RESET)
 8009316:	693b      	ldr	r3, [r7, #16]
 8009318:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800931c:	2b00      	cmp	r3, #0
 800931e:	d008      	beq.n	8009332 <HRTIM_Master_ISR+0x52>
    {
      __HAL_HRTIM_CLEAR_IT(hhrtim, HRTIM_IT_BMPER);
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	681b      	ldr	r3, [r3, #0]
 8009324:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8009328:	f8c3 238c 	str.w	r2, [r3, #908]	; 0x38c

      /* Invoke Burst mode period event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->BurstModePeriodCallback(hhrtim);
#else
      HAL_HRTIM_BurstModePeriodCallback(hhrtim);
 800932c:	6878      	ldr	r0, [r7, #4]
 800932e:	f7ff fb7c 	bl	8008a2a <HAL_HRTIM_BurstModePeriodCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Master timer compare 1 event */
  if((uint32_t)(misrflags & HRTIM_MASTER_FLAG_MCMP1) != (uint32_t)RESET)
 8009332:	68fb      	ldr	r3, [r7, #12]
 8009334:	f003 0301 	and.w	r3, r3, #1
 8009338:	2b00      	cmp	r3, #0
 800933a:	d00c      	beq.n	8009356 <HRTIM_Master_ISR+0x76>
  {
    if((uint32_t)(mdierits & HRTIM_MASTER_IT_MCMP1) != (uint32_t)RESET)
 800933c:	68bb      	ldr	r3, [r7, #8]
 800933e:	f003 0301 	and.w	r3, r3, #1
 8009342:	2b00      	cmp	r3, #0
 8009344:	d007      	beq.n	8009356 <HRTIM_Master_ISR+0x76>
    {
      __HAL_HRTIM_MASTER_CLEAR_IT(hhrtim, HRTIM_MASTER_IT_MCMP1);
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	681b      	ldr	r3, [r3, #0]
 800934a:	2201      	movs	r2, #1
 800934c:	609a      	str	r2, [r3, #8]

      /* Invoke compare 1 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Compare1EventCallback(hhrtim, HRTIM_TIMERINDEX_MASTER);
#else
      HAL_HRTIM_Compare1EventCallback(hhrtim, HRTIM_TIMERINDEX_MASTER);
 800934e:	2105      	movs	r1, #5
 8009350:	6878      	ldr	r0, [r7, #4]
 8009352:	f7ff fb89 	bl	8008a68 <HAL_HRTIM_Compare1EventCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Master timer compare 2 event */
  if((uint32_t)(misrflags & HRTIM_MASTER_FLAG_MCMP2) != (uint32_t)RESET)
 8009356:	68fb      	ldr	r3, [r7, #12]
 8009358:	f003 0302 	and.w	r3, r3, #2
 800935c:	2b00      	cmp	r3, #0
 800935e:	d00c      	beq.n	800937a <HRTIM_Master_ISR+0x9a>
  {
    if((uint32_t)(mdierits & HRTIM_MASTER_IT_MCMP2) != (uint32_t)RESET)
 8009360:	68bb      	ldr	r3, [r7, #8]
 8009362:	f003 0302 	and.w	r3, r3, #2
 8009366:	2b00      	cmp	r3, #0
 8009368:	d007      	beq.n	800937a <HRTIM_Master_ISR+0x9a>
    {
      __HAL_HRTIM_MASTER_CLEAR_IT(hhrtim, HRTIM_MASTER_IT_MCMP2);
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	681b      	ldr	r3, [r3, #0]
 800936e:	2202      	movs	r2, #2
 8009370:	609a      	str	r2, [r3, #8]

      /* Invoke compare 2 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Compare2EventCallback(hhrtim, HRTIM_TIMERINDEX_MASTER);
#else
      HAL_HRTIM_Compare2EventCallback(hhrtim, HRTIM_TIMERINDEX_MASTER);
 8009372:	2105      	movs	r1, #5
 8009374:	6878      	ldr	r0, [r7, #4]
 8009376:	f7fa fd03 	bl	8003d80 <HAL_HRTIM_Compare2EventCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Master timer compare 3 event */
  if((uint32_t)(misrflags & HRTIM_MASTER_FLAG_MCMP3) != (uint32_t)RESET)
 800937a:	68fb      	ldr	r3, [r7, #12]
 800937c:	f003 0304 	and.w	r3, r3, #4
 8009380:	2b00      	cmp	r3, #0
 8009382:	d00c      	beq.n	800939e <HRTIM_Master_ISR+0xbe>
  {
    if((uint32_t)(mdierits & HRTIM_MASTER_IT_MCMP3) != (uint32_t)RESET)
 8009384:	68bb      	ldr	r3, [r7, #8]
 8009386:	f003 0304 	and.w	r3, r3, #4
 800938a:	2b00      	cmp	r3, #0
 800938c:	d007      	beq.n	800939e <HRTIM_Master_ISR+0xbe>
    {
      __HAL_HRTIM_MASTER_CLEAR_IT(hhrtim, HRTIM_MASTER_IT_MCMP3);
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	681b      	ldr	r3, [r3, #0]
 8009392:	2204      	movs	r2, #4
 8009394:	609a      	str	r2, [r3, #8]

      /* Invoke compare 3 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Compare3EventCallback(hhrtim, HRTIM_TIMERINDEX_MASTER);
#else
      HAL_HRTIM_Compare3EventCallback(hhrtim, HRTIM_TIMERINDEX_MASTER);
 8009396:	2105      	movs	r1, #5
 8009398:	6878      	ldr	r0, [r7, #4]
 800939a:	f7fa fcfd 	bl	8003d98 <HAL_HRTIM_Compare3EventCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Master timer compare 4 event */
  if((uint32_t)(misrflags & HRTIM_MASTER_FLAG_MCMP4) != (uint32_t)RESET)
 800939e:	68fb      	ldr	r3, [r7, #12]
 80093a0:	f003 0308 	and.w	r3, r3, #8
 80093a4:	2b00      	cmp	r3, #0
 80093a6:	d00c      	beq.n	80093c2 <HRTIM_Master_ISR+0xe2>
  {
    if((uint32_t)(mdierits & HRTIM_MASTER_IT_MCMP4) != (uint32_t)RESET)
 80093a8:	68bb      	ldr	r3, [r7, #8]
 80093aa:	f003 0308 	and.w	r3, r3, #8
 80093ae:	2b00      	cmp	r3, #0
 80093b0:	d007      	beq.n	80093c2 <HRTIM_Master_ISR+0xe2>
    {
      __HAL_HRTIM_MASTER_CLEAR_IT(hhrtim, HRTIM_MASTER_IT_MCMP4);
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	681b      	ldr	r3, [r3, #0]
 80093b6:	2208      	movs	r2, #8
 80093b8:	609a      	str	r2, [r3, #8]

      /* Invoke compare 4 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Compare4EventCallback(hhrtim, HRTIM_TIMERINDEX_MASTER);
#else
      HAL_HRTIM_Compare4EventCallback(hhrtim, HRTIM_TIMERINDEX_MASTER);
 80093ba:	2105      	movs	r1, #5
 80093bc:	6878      	ldr	r0, [r7, #4]
 80093be:	f7ff fb5e 	bl	8008a7e <HAL_HRTIM_Compare4EventCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Master timer repetition event */
  if((uint32_t)(misrflags & HRTIM_MASTER_FLAG_MREP) != (uint32_t)RESET)
 80093c2:	68fb      	ldr	r3, [r7, #12]
 80093c4:	f003 0310 	and.w	r3, r3, #16
 80093c8:	2b00      	cmp	r3, #0
 80093ca:	d00c      	beq.n	80093e6 <HRTIM_Master_ISR+0x106>
  {
    if((uint32_t)(mdierits & HRTIM_MASTER_IT_MREP) != (uint32_t)RESET)
 80093cc:	68bb      	ldr	r3, [r7, #8]
 80093ce:	f003 0310 	and.w	r3, r3, #16
 80093d2:	2b00      	cmp	r3, #0
 80093d4:	d007      	beq.n	80093e6 <HRTIM_Master_ISR+0x106>
    {
      __HAL_HRTIM_MASTER_CLEAR_IT(hhrtim, HRTIM_MASTER_IT_MREP);
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	681b      	ldr	r3, [r3, #0]
 80093da:	2210      	movs	r2, #16
 80093dc:	609a      	str	r2, [r3, #8]

      /* Invoke repetition event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->RepetitionEventCallback(hhrtim, HRTIM_TIMERINDEX_MASTER);
#else
      HAL_HRTIM_RepetitionEventCallback(hhrtim, HRTIM_TIMERINDEX_MASTER);
 80093de:	2105      	movs	r1, #5
 80093e0:	6878      	ldr	r0, [r7, #4]
 80093e2:	f7fa fd4d 	bl	8003e80 <HAL_HRTIM_RepetitionEventCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Synchronization input event */
  if((uint32_t)(misrflags & HRTIM_MASTER_FLAG_SYNC) != (uint32_t)RESET)
 80093e6:	68fb      	ldr	r3, [r7, #12]
 80093e8:	f003 0320 	and.w	r3, r3, #32
 80093ec:	2b00      	cmp	r3, #0
 80093ee:	d00b      	beq.n	8009408 <HRTIM_Master_ISR+0x128>
  {
    if((uint32_t)(mdierits & HRTIM_MASTER_IT_SYNC) != (uint32_t)RESET)
 80093f0:	68bb      	ldr	r3, [r7, #8]
 80093f2:	f003 0320 	and.w	r3, r3, #32
 80093f6:	2b00      	cmp	r3, #0
 80093f8:	d006      	beq.n	8009408 <HRTIM_Master_ISR+0x128>
    {
      __HAL_HRTIM_MASTER_CLEAR_IT(hhrtim, HRTIM_MASTER_IT_SYNC);
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	681b      	ldr	r3, [r3, #0]
 80093fe:	2220      	movs	r2, #32
 8009400:	609a      	str	r2, [r3, #8]

      /* Invoke synchronization event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->SynchronizationEventCallback(hhrtim);
#else
      HAL_HRTIM_SynchronizationEventCallback(hhrtim);
 8009402:	6878      	ldr	r0, [r7, #4]
 8009404:	f7ff fb1b 	bl	8008a3e <HAL_HRTIM_SynchronizationEventCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Master timer registers update event */
  if((uint32_t)(misrflags & HRTIM_MASTER_FLAG_MUPD) != (uint32_t)RESET)
 8009408:	68fb      	ldr	r3, [r7, #12]
 800940a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800940e:	2b00      	cmp	r3, #0
 8009410:	d00c      	beq.n	800942c <HRTIM_Master_ISR+0x14c>
  {
    if((uint32_t)(mdierits & HRTIM_MASTER_IT_MUPD) != (uint32_t)RESET)
 8009412:	68bb      	ldr	r3, [r7, #8]
 8009414:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009418:	2b00      	cmp	r3, #0
 800941a:	d007      	beq.n	800942c <HRTIM_Master_ISR+0x14c>
    {
      __HAL_HRTIM_MASTER_CLEAR_IT(hhrtim, HRTIM_MASTER_IT_MUPD);
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	681b      	ldr	r3, [r3, #0]
 8009420:	2240      	movs	r2, #64	; 0x40
 8009422:	609a      	str	r2, [r3, #8]

      /* Invoke registers update event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->RegistersUpdateCallback(hhrtim, HRTIM_TIMERINDEX_MASTER);
#else
      HAL_HRTIM_RegistersUpdateCallback(hhrtim, HRTIM_TIMERINDEX_MASTER);
 8009424:	2105      	movs	r1, #5
 8009426:	6878      	ldr	r0, [r7, #4]
 8009428:	f7ff fb13 	bl	8008a52 <HAL_HRTIM_RegistersUpdateCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }
}
 800942c:	bf00      	nop
 800942e:	3718      	adds	r7, #24
 8009430:	46bd      	mov	sp, r7
 8009432:	bd80      	pop	{r7, pc}

08009434 <HRTIM_Timer_ISR>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_E for timer E
  * @retval None
*/
static void HRTIM_Timer_ISR(HRTIM_HandleTypeDef * hhrtim,
                     uint32_t TimerIdx)
{
 8009434:	b580      	push	{r7, lr}
 8009436:	b084      	sub	sp, #16
 8009438:	af00      	add	r7, sp, #0
 800943a:	6078      	str	r0, [r7, #4]
 800943c:	6039      	str	r1, [r7, #0]
  uint32_t tisrflags = READ_REG(hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxISR);
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	681a      	ldr	r2, [r3, #0]
 8009442:	683b      	ldr	r3, [r7, #0]
 8009444:	3301      	adds	r3, #1
 8009446:	01db      	lsls	r3, r3, #7
 8009448:	4413      	add	r3, r2
 800944a:	3304      	adds	r3, #4
 800944c:	681b      	ldr	r3, [r3, #0]
 800944e:	60fb      	str	r3, [r7, #12]
  uint32_t tdierits  = READ_REG(hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxDIER);
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	681a      	ldr	r2, [r3, #0]
 8009454:	683b      	ldr	r3, [r7, #0]
 8009456:	01db      	lsls	r3, r3, #7
 8009458:	4413      	add	r3, r2
 800945a:	338c      	adds	r3, #140	; 0x8c
 800945c:	681b      	ldr	r3, [r3, #0]
 800945e:	60bb      	str	r3, [r7, #8]

  /* Timer compare 1 event */
  if((uint32_t)(tisrflags & HRTIM_TIM_FLAG_CMP1) != (uint32_t)RESET)
 8009460:	68fb      	ldr	r3, [r7, #12]
 8009462:	f003 0301 	and.w	r3, r3, #1
 8009466:	2b00      	cmp	r3, #0
 8009468:	d010      	beq.n	800948c <HRTIM_Timer_ISR+0x58>
  {
    if((uint32_t)(tdierits & HRTIM_TIM_IT_CMP1) != (uint32_t)RESET)
 800946a:	68bb      	ldr	r3, [r7, #8]
 800946c:	f003 0301 	and.w	r3, r3, #1
 8009470:	2b00      	cmp	r3, #0
 8009472:	d00b      	beq.n	800948c <HRTIM_Timer_ISR+0x58>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_CMP1);
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	681a      	ldr	r2, [r3, #0]
 8009478:	683b      	ldr	r3, [r7, #0]
 800947a:	01db      	lsls	r3, r3, #7
 800947c:	4413      	add	r3, r2
 800947e:	3388      	adds	r3, #136	; 0x88
 8009480:	2201      	movs	r2, #1
 8009482:	601a      	str	r2, [r3, #0]

      /* Invoke compare 1 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Compare1EventCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_Compare1EventCallback(hhrtim, TimerIdx);
 8009484:	6839      	ldr	r1, [r7, #0]
 8009486:	6878      	ldr	r0, [r7, #4]
 8009488:	f7ff faee 	bl	8008a68 <HAL_HRTIM_Compare1EventCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Timer compare 2 event */
  if((uint32_t)(tisrflags & HRTIM_TIM_FLAG_CMP2) != (uint32_t)RESET)
 800948c:	68fb      	ldr	r3, [r7, #12]
 800948e:	f003 0302 	and.w	r3, r3, #2
 8009492:	2b00      	cmp	r3, #0
 8009494:	d010      	beq.n	80094b8 <HRTIM_Timer_ISR+0x84>
  {
    if((uint32_t)(tdierits & HRTIM_TIM_IT_CMP2) != (uint32_t)RESET)
 8009496:	68bb      	ldr	r3, [r7, #8]
 8009498:	f003 0302 	and.w	r3, r3, #2
 800949c:	2b00      	cmp	r3, #0
 800949e:	d00b      	beq.n	80094b8 <HRTIM_Timer_ISR+0x84>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_CMP2);
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	681a      	ldr	r2, [r3, #0]
 80094a4:	683b      	ldr	r3, [r7, #0]
 80094a6:	01db      	lsls	r3, r3, #7
 80094a8:	4413      	add	r3, r2
 80094aa:	3388      	adds	r3, #136	; 0x88
 80094ac:	2202      	movs	r2, #2
 80094ae:	601a      	str	r2, [r3, #0]

      /* Invoke compare 2 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Compare2EventCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_Compare2EventCallback(hhrtim, TimerIdx);
 80094b0:	6839      	ldr	r1, [r7, #0]
 80094b2:	6878      	ldr	r0, [r7, #4]
 80094b4:	f7fa fc64 	bl	8003d80 <HAL_HRTIM_Compare2EventCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Timer compare 3 event */
  if((uint32_t)(tisrflags & HRTIM_TIM_FLAG_CMP3) != (uint32_t)RESET)
 80094b8:	68fb      	ldr	r3, [r7, #12]
 80094ba:	f003 0304 	and.w	r3, r3, #4
 80094be:	2b00      	cmp	r3, #0
 80094c0:	d010      	beq.n	80094e4 <HRTIM_Timer_ISR+0xb0>
  {
    if((uint32_t)(tdierits & HRTIM_TIM_IT_CMP3) != (uint32_t)RESET)
 80094c2:	68bb      	ldr	r3, [r7, #8]
 80094c4:	f003 0304 	and.w	r3, r3, #4
 80094c8:	2b00      	cmp	r3, #0
 80094ca:	d00b      	beq.n	80094e4 <HRTIM_Timer_ISR+0xb0>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_CMP3);
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	681a      	ldr	r2, [r3, #0]
 80094d0:	683b      	ldr	r3, [r7, #0]
 80094d2:	01db      	lsls	r3, r3, #7
 80094d4:	4413      	add	r3, r2
 80094d6:	3388      	adds	r3, #136	; 0x88
 80094d8:	2204      	movs	r2, #4
 80094da:	601a      	str	r2, [r3, #0]

      /* Invoke compare 3 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Compare3EventCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_Compare3EventCallback(hhrtim, TimerIdx);
 80094dc:	6839      	ldr	r1, [r7, #0]
 80094de:	6878      	ldr	r0, [r7, #4]
 80094e0:	f7fa fc5a 	bl	8003d98 <HAL_HRTIM_Compare3EventCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Timer compare 4 event */
  if((uint32_t)(tisrflags & HRTIM_TIM_FLAG_CMP4) != (uint32_t)RESET)
 80094e4:	68fb      	ldr	r3, [r7, #12]
 80094e6:	f003 0308 	and.w	r3, r3, #8
 80094ea:	2b00      	cmp	r3, #0
 80094ec:	d010      	beq.n	8009510 <HRTIM_Timer_ISR+0xdc>
  {
    if((uint32_t)(tdierits & HRTIM_TIM_IT_CMP4) != (uint32_t)RESET)
 80094ee:	68bb      	ldr	r3, [r7, #8]
 80094f0:	f003 0308 	and.w	r3, r3, #8
 80094f4:	2b00      	cmp	r3, #0
 80094f6:	d00b      	beq.n	8009510 <HRTIM_Timer_ISR+0xdc>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_CMP4);
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	681a      	ldr	r2, [r3, #0]
 80094fc:	683b      	ldr	r3, [r7, #0]
 80094fe:	01db      	lsls	r3, r3, #7
 8009500:	4413      	add	r3, r2
 8009502:	3388      	adds	r3, #136	; 0x88
 8009504:	2208      	movs	r2, #8
 8009506:	601a      	str	r2, [r3, #0]

      /* Invoke compare 4 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Compare4EventCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_Compare4EventCallback(hhrtim, TimerIdx);
 8009508:	6839      	ldr	r1, [r7, #0]
 800950a:	6878      	ldr	r0, [r7, #4]
 800950c:	f7ff fab7 	bl	8008a7e <HAL_HRTIM_Compare4EventCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Timer repetition event */
  if((uint32_t)(tisrflags & HRTIM_TIM_FLAG_REP) != (uint32_t)RESET)
 8009510:	68fb      	ldr	r3, [r7, #12]
 8009512:	f003 0310 	and.w	r3, r3, #16
 8009516:	2b00      	cmp	r3, #0
 8009518:	d010      	beq.n	800953c <HRTIM_Timer_ISR+0x108>
  {
    if((uint32_t)(tdierits & HRTIM_TIM_IT_REP) != (uint32_t)RESET)
 800951a:	68bb      	ldr	r3, [r7, #8]
 800951c:	f003 0310 	and.w	r3, r3, #16
 8009520:	2b00      	cmp	r3, #0
 8009522:	d00b      	beq.n	800953c <HRTIM_Timer_ISR+0x108>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_REP);
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	681a      	ldr	r2, [r3, #0]
 8009528:	683b      	ldr	r3, [r7, #0]
 800952a:	01db      	lsls	r3, r3, #7
 800952c:	4413      	add	r3, r2
 800952e:	3388      	adds	r3, #136	; 0x88
 8009530:	2210      	movs	r2, #16
 8009532:	601a      	str	r2, [r3, #0]

      /* Invoke repetition event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->RepetitionEventCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_RepetitionEventCallback(hhrtim, TimerIdx);
 8009534:	6839      	ldr	r1, [r7, #0]
 8009536:	6878      	ldr	r0, [r7, #4]
 8009538:	f7fa fca2 	bl	8003e80 <HAL_HRTIM_RepetitionEventCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Timer registers update event */
  if((uint32_t)(tisrflags & HRTIM_TIM_FLAG_UPD) != (uint32_t)RESET)
 800953c:	68fb      	ldr	r3, [r7, #12]
 800953e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009542:	2b00      	cmp	r3, #0
 8009544:	d010      	beq.n	8009568 <HRTIM_Timer_ISR+0x134>
  {
    if((uint32_t)(tdierits & HRTIM_TIM_IT_UPD) != (uint32_t)RESET)
 8009546:	68bb      	ldr	r3, [r7, #8]
 8009548:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800954c:	2b00      	cmp	r3, #0
 800954e:	d00b      	beq.n	8009568 <HRTIM_Timer_ISR+0x134>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_UPD);
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	681a      	ldr	r2, [r3, #0]
 8009554:	683b      	ldr	r3, [r7, #0]
 8009556:	01db      	lsls	r3, r3, #7
 8009558:	4413      	add	r3, r2
 800955a:	3388      	adds	r3, #136	; 0x88
 800955c:	2240      	movs	r2, #64	; 0x40
 800955e:	601a      	str	r2, [r3, #0]

      /* Invoke registers update event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->RegistersUpdateCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_RegistersUpdateCallback(hhrtim, TimerIdx);
 8009560:	6839      	ldr	r1, [r7, #0]
 8009562:	6878      	ldr	r0, [r7, #4]
 8009564:	f7ff fa75 	bl	8008a52 <HAL_HRTIM_RegistersUpdateCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Timer capture 1 event */
  if((uint32_t)(tisrflags & HRTIM_TIM_FLAG_CPT1) != (uint32_t)RESET)
 8009568:	68fb      	ldr	r3, [r7, #12]
 800956a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800956e:	2b00      	cmp	r3, #0
 8009570:	d010      	beq.n	8009594 <HRTIM_Timer_ISR+0x160>
  {
    if((uint32_t)(tdierits & HRTIM_TIM_IT_CPT1) != (uint32_t)RESET)
 8009572:	68bb      	ldr	r3, [r7, #8]
 8009574:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009578:	2b00      	cmp	r3, #0
 800957a:	d00b      	beq.n	8009594 <HRTIM_Timer_ISR+0x160>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_CPT1);
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	681a      	ldr	r2, [r3, #0]
 8009580:	683b      	ldr	r3, [r7, #0]
 8009582:	01db      	lsls	r3, r3, #7
 8009584:	4413      	add	r3, r2
 8009586:	3388      	adds	r3, #136	; 0x88
 8009588:	2280      	movs	r2, #128	; 0x80
 800958a:	601a      	str	r2, [r3, #0]

      /* Invoke capture 1 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Capture1EventCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_Capture1EventCallback(hhrtim, TimerIdx);
 800958c:	6839      	ldr	r1, [r7, #0]
 800958e:	6878      	ldr	r0, [r7, #4]
 8009590:	f7ff fa80 	bl	8008a94 <HAL_HRTIM_Capture1EventCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Timer capture 2 event */
  if((uint32_t)(tisrflags & HRTIM_TIM_FLAG_CPT2) != (uint32_t)RESET)
 8009594:	68fb      	ldr	r3, [r7, #12]
 8009596:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800959a:	2b00      	cmp	r3, #0
 800959c:	d011      	beq.n	80095c2 <HRTIM_Timer_ISR+0x18e>
  {
    if((uint32_t)(tdierits & HRTIM_TIM_IT_CPT2) != (uint32_t)RESET)
 800959e:	68bb      	ldr	r3, [r7, #8]
 80095a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80095a4:	2b00      	cmp	r3, #0
 80095a6:	d00c      	beq.n	80095c2 <HRTIM_Timer_ISR+0x18e>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_CPT2);
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	681a      	ldr	r2, [r3, #0]
 80095ac:	683b      	ldr	r3, [r7, #0]
 80095ae:	01db      	lsls	r3, r3, #7
 80095b0:	4413      	add	r3, r2
 80095b2:	3388      	adds	r3, #136	; 0x88
 80095b4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80095b8:	601a      	str	r2, [r3, #0]

      /* Invoke capture 2 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Capture2EventCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_Capture2EventCallback(hhrtim, TimerIdx);
 80095ba:	6839      	ldr	r1, [r7, #0]
 80095bc:	6878      	ldr	r0, [r7, #4]
 80095be:	f7ff fa74 	bl	8008aaa <HAL_HRTIM_Capture2EventCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Timer output 1 set event */
  if((uint32_t)(tisrflags & HRTIM_TIM_FLAG_SET1) != (uint32_t)RESET)
 80095c2:	68fb      	ldr	r3, [r7, #12]
 80095c4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80095c8:	2b00      	cmp	r3, #0
 80095ca:	d011      	beq.n	80095f0 <HRTIM_Timer_ISR+0x1bc>
  {
    if((uint32_t)(tdierits & HRTIM_TIM_IT_SET1) != (uint32_t)RESET)
 80095cc:	68bb      	ldr	r3, [r7, #8]
 80095ce:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80095d2:	2b00      	cmp	r3, #0
 80095d4:	d00c      	beq.n	80095f0 <HRTIM_Timer_ISR+0x1bc>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_SET1);
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	681a      	ldr	r2, [r3, #0]
 80095da:	683b      	ldr	r3, [r7, #0]
 80095dc:	01db      	lsls	r3, r3, #7
 80095de:	4413      	add	r3, r2
 80095e0:	3388      	adds	r3, #136	; 0x88
 80095e2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80095e6:	601a      	str	r2, [r3, #0]

      /* Invoke output 1 set event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Output1SetCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_Output1SetCallback(hhrtim, TimerIdx);
 80095e8:	6839      	ldr	r1, [r7, #0]
 80095ea:	6878      	ldr	r0, [r7, #4]
 80095ec:	f7ff fa7e 	bl	8008aec <HAL_HRTIM_Output1SetCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Timer output 1 reset event */
  if((uint32_t)(tisrflags & HRTIM_TIM_FLAG_RST1) != (uint32_t)RESET)
 80095f0:	68fb      	ldr	r3, [r7, #12]
 80095f2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80095f6:	2b00      	cmp	r3, #0
 80095f8:	d011      	beq.n	800961e <HRTIM_Timer_ISR+0x1ea>
  {
    if((uint32_t)(tdierits & HRTIM_TIM_IT_RST1) != (uint32_t)RESET)
 80095fa:	68bb      	ldr	r3, [r7, #8]
 80095fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009600:	2b00      	cmp	r3, #0
 8009602:	d00c      	beq.n	800961e <HRTIM_Timer_ISR+0x1ea>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_RST1);
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	681a      	ldr	r2, [r3, #0]
 8009608:	683b      	ldr	r3, [r7, #0]
 800960a:	01db      	lsls	r3, r3, #7
 800960c:	4413      	add	r3, r2
 800960e:	3388      	adds	r3, #136	; 0x88
 8009610:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8009614:	601a      	str	r2, [r3, #0]

      /* Invoke output 1 reset event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Output1ResetCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_Output1ResetCallback(hhrtim, TimerIdx);
 8009616:	6839      	ldr	r1, [r7, #0]
 8009618:	6878      	ldr	r0, [r7, #4]
 800961a:	f7ff fa72 	bl	8008b02 <HAL_HRTIM_Output1ResetCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Timer output 2 set event */
  if((uint32_t)(tisrflags & HRTIM_TIM_FLAG_SET2) != (uint32_t)RESET)
 800961e:	68fb      	ldr	r3, [r7, #12]
 8009620:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009624:	2b00      	cmp	r3, #0
 8009626:	d011      	beq.n	800964c <HRTIM_Timer_ISR+0x218>
  {
    if((uint32_t)(tdierits & HRTIM_TIM_IT_SET2) != (uint32_t)RESET)
 8009628:	68bb      	ldr	r3, [r7, #8]
 800962a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800962e:	2b00      	cmp	r3, #0
 8009630:	d00c      	beq.n	800964c <HRTIM_Timer_ISR+0x218>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_SET2);
 8009632:	687b      	ldr	r3, [r7, #4]
 8009634:	681a      	ldr	r2, [r3, #0]
 8009636:	683b      	ldr	r3, [r7, #0]
 8009638:	01db      	lsls	r3, r3, #7
 800963a:	4413      	add	r3, r2
 800963c:	3388      	adds	r3, #136	; 0x88
 800963e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009642:	601a      	str	r2, [r3, #0]

      /* Invoke output 2 set event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Output2SetCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_Output2SetCallback(hhrtim, TimerIdx);
 8009644:	6839      	ldr	r1, [r7, #0]
 8009646:	6878      	ldr	r0, [r7, #4]
 8009648:	f7ff fa66 	bl	8008b18 <HAL_HRTIM_Output2SetCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Timer output 2 reset event */
  if((uint32_t)(tisrflags & HRTIM_TIM_FLAG_RST2) != (uint32_t)RESET)
 800964c:	68fb      	ldr	r3, [r7, #12]
 800964e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8009652:	2b00      	cmp	r3, #0
 8009654:	d011      	beq.n	800967a <HRTIM_Timer_ISR+0x246>
  {
    if((uint32_t)(tdierits & HRTIM_TIM_IT_RST2) != (uint32_t)RESET)
 8009656:	68bb      	ldr	r3, [r7, #8]
 8009658:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800965c:	2b00      	cmp	r3, #0
 800965e:	d00c      	beq.n	800967a <HRTIM_Timer_ISR+0x246>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_RST2);
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	681a      	ldr	r2, [r3, #0]
 8009664:	683b      	ldr	r3, [r7, #0]
 8009666:	01db      	lsls	r3, r3, #7
 8009668:	4413      	add	r3, r2
 800966a:	3388      	adds	r3, #136	; 0x88
 800966c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8009670:	601a      	str	r2, [r3, #0]

      /* Invoke output 2 reset event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Output2ResetCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_Output2ResetCallback(hhrtim, TimerIdx);
 8009672:	6839      	ldr	r1, [r7, #0]
 8009674:	6878      	ldr	r0, [r7, #4]
 8009676:	f7ff fa5a 	bl	8008b2e <HAL_HRTIM_Output2ResetCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Timer reset event */
  if((uint32_t)(tisrflags & HRTIM_TIM_FLAG_RST) != (uint32_t)RESET)
 800967a:	68fb      	ldr	r3, [r7, #12]
 800967c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009680:	2b00      	cmp	r3, #0
 8009682:	d011      	beq.n	80096a8 <HRTIM_Timer_ISR+0x274>
  {
    if((uint32_t)(tdierits & HRTIM_TIM_IT_RST) != (uint32_t)RESET)
 8009684:	68bb      	ldr	r3, [r7, #8]
 8009686:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800968a:	2b00      	cmp	r3, #0
 800968c:	d00c      	beq.n	80096a8 <HRTIM_Timer_ISR+0x274>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_RST);
 800968e:	687b      	ldr	r3, [r7, #4]
 8009690:	681a      	ldr	r2, [r3, #0]
 8009692:	683b      	ldr	r3, [r7, #0]
 8009694:	01db      	lsls	r3, r3, #7
 8009696:	4413      	add	r3, r2
 8009698:	3388      	adds	r3, #136	; 0x88
 800969a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800969e:	601a      	str	r2, [r3, #0]

      /* Invoke timer reset callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->CounterResetCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_CounterResetCallback(hhrtim, TimerIdx);
 80096a0:	6839      	ldr	r1, [r7, #0]
 80096a2:	6878      	ldr	r0, [r7, #4]
 80096a4:	f7ff fa17 	bl	8008ad6 <HAL_HRTIM_CounterResetCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Delayed protection event */
  if((uint32_t)(tisrflags & HRTIM_TIM_FLAG_DLYPRT) != (uint32_t)RESET)
 80096a8:	68fb      	ldr	r3, [r7, #12]
 80096aa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80096ae:	2b00      	cmp	r3, #0
 80096b0:	d011      	beq.n	80096d6 <HRTIM_Timer_ISR+0x2a2>
  {
    if((uint32_t)(tdierits & HRTIM_TIM_IT_DLYPRT) != (uint32_t)RESET)
 80096b2:	68bb      	ldr	r3, [r7, #8]
 80096b4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80096b8:	2b00      	cmp	r3, #0
 80096ba:	d00c      	beq.n	80096d6 <HRTIM_Timer_ISR+0x2a2>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_DLYPRT);
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	681a      	ldr	r2, [r3, #0]
 80096c0:	683b      	ldr	r3, [r7, #0]
 80096c2:	01db      	lsls	r3, r3, #7
 80096c4:	4413      	add	r3, r2
 80096c6:	3388      	adds	r3, #136	; 0x88
 80096c8:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80096cc:	601a      	str	r2, [r3, #0]

      /* Invoke delayed protection callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->DelayedProtectionCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_DelayedProtectionCallback(hhrtim, TimerIdx);
 80096ce:	6839      	ldr	r1, [r7, #0]
 80096d0:	6878      	ldr	r0, [r7, #4]
 80096d2:	f7ff f9f5 	bl	8008ac0 <HAL_HRTIM_DelayedProtectionCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }
}
 80096d6:	bf00      	nop
 80096d8:	3710      	adds	r7, #16
 80096da:	46bd      	mov	sp, r7
 80096dc:	bd80      	pop	{r7, pc}
	...

080096e0 <HAL_LPTIM_Init>:
  *         LPTIM_InitTypeDef and initialize the associated handle.
  * @param  hlptim LPTIM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LPTIM_Init(LPTIM_HandleTypeDef *hlptim)
{
 80096e0:	b580      	push	{r7, lr}
 80096e2:	b084      	sub	sp, #16
 80096e4:	af00      	add	r7, sp, #0
 80096e6:	6078      	str	r0, [r7, #4]
  uint32_t tmpcfgr;

  /* Check the LPTIM handle allocation */
  if (hlptim == NULL)
 80096e8:	687b      	ldr	r3, [r7, #4]
 80096ea:	2b00      	cmp	r3, #0
 80096ec:	d101      	bne.n	80096f2 <HAL_LPTIM_Init+0x12>
  {
    return HAL_ERROR;
 80096ee:	2301      	movs	r3, #1
 80096f0:	e097      	b.n	8009822 <HAL_LPTIM_Init+0x142>
  /* Check the parameters */
  assert_param(IS_LPTIM_INSTANCE(hlptim->Instance));

  assert_param(IS_LPTIM_CLOCK_SOURCE(hlptim->Init.Clock.Source));
  assert_param(IS_LPTIM_CLOCK_PRESCALER(hlptim->Init.Clock.Prescaler));
  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	685b      	ldr	r3, [r3, #4]
 80096f6:	2b01      	cmp	r3, #1
  }
  assert_param(IS_LPTIM_OUTPUT_POLARITY(hlptim->Init.OutputPolarity));
  assert_param(IS_LPTIM_UPDATE_MODE(hlptim->Init.UpdateMode));
  assert_param(IS_LPTIM_COUNTER_SOURCE(hlptim->Init.CounterSource));

  if (hlptim->State == HAL_LPTIM_STATE_RESET)
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 80096fe:	b2db      	uxtb	r3, r3
 8009700:	2b00      	cmp	r3, #0
 8009702:	d106      	bne.n	8009712 <HAL_LPTIM_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hlptim->Lock = HAL_UNLOCKED;
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	2200      	movs	r2, #0
 8009708:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hlptim->MspInitCallback(hlptim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_LPTIM_MspInit(hlptim);
 800970c:	6878      	ldr	r0, [r7, #4]
 800970e:	f7fa f833 	bl	8003778 <HAL_LPTIM_MspInit>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
  }

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 8009712:	687b      	ldr	r3, [r7, #4]
 8009714:	2202      	movs	r2, #2
 8009716:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36

  /* Get the LPTIMx CFGR value */
  tmpcfgr = hlptim->Instance->CFGR;
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	681b      	ldr	r3, [r3, #0]
 800971e:	68db      	ldr	r3, [r3, #12]
 8009720:	60fb      	str	r3, [r7, #12]

  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	685b      	ldr	r3, [r3, #4]
 8009726:	2b01      	cmp	r3, #1
 8009728:	d004      	beq.n	8009734 <HAL_LPTIM_Init+0x54>
      || (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800972e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8009732:	d103      	bne.n	800973c <HAL_LPTIM_Init+0x5c>
  {
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKPOL | LPTIM_CFGR_CKFLT));
 8009734:	68fb      	ldr	r3, [r7, #12]
 8009736:	f023 031e 	bic.w	r3, r3, #30
 800973a:	60fb      	str	r3, [r7, #12]
  }
  if (hlptim->Init.Trigger.Source != LPTIM_TRIGSOURCE_SOFTWARE)
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	695b      	ldr	r3, [r3, #20]
 8009740:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009744:	4293      	cmp	r3, r2
 8009746:	d003      	beq.n	8009750 <HAL_LPTIM_Init+0x70>
  {
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_TRGFLT | LPTIM_CFGR_TRIGSEL));
 8009748:	68fa      	ldr	r2, [r7, #12]
 800974a:	4b38      	ldr	r3, [pc, #224]	; (800982c <HAL_LPTIM_Init+0x14c>)
 800974c:	4013      	ands	r3, r2
 800974e:	60fb      	str	r3, [r7, #12]
  }

  /* Clear CKSEL, PRESC, TRIGEN, TRGFLT, WAVPOL, PRELOAD & COUNTMODE bits */
  tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKSEL | LPTIM_CFGR_TRIGEN | LPTIM_CFGR_PRELOAD |
 8009750:	68fa      	ldr	r2, [r7, #12]
 8009752:	4b37      	ldr	r3, [pc, #220]	; (8009830 <HAL_LPTIM_Init+0x150>)
 8009754:	4013      	ands	r3, r2
 8009756:	60fb      	str	r3, [r7, #12]
                          LPTIM_CFGR_WAVPOL | LPTIM_CFGR_PRESC | LPTIM_CFGR_COUNTMODE));

  /* Set initialization parameters */
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	685a      	ldr	r2, [r3, #4]
              hlptim->Init.Clock.Prescaler |
 800975c:	687b      	ldr	r3, [r7, #4]
 800975e:	689b      	ldr	r3, [r3, #8]
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 8009760:	431a      	orrs	r2, r3
              hlptim->Init.OutputPolarity  |
 8009762:	687b      	ldr	r3, [r7, #4]
 8009764:	6a1b      	ldr	r3, [r3, #32]
              hlptim->Init.Clock.Prescaler |
 8009766:	431a      	orrs	r2, r3
              hlptim->Init.UpdateMode      |
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
              hlptim->Init.OutputPolarity  |
 800976c:	431a      	orrs	r2, r3
              hlptim->Init.CounterSource);
 800976e:	687b      	ldr	r3, [r7, #4]
 8009770:	6a9b      	ldr	r3, [r3, #40]	; 0x28
              hlptim->Init.UpdateMode      |
 8009772:	4313      	orrs	r3, r2
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 8009774:	68fa      	ldr	r2, [r7, #12]
 8009776:	4313      	orrs	r3, r2
 8009778:	60fb      	str	r3, [r7, #12]

  /* Glitch filters for internal triggers and  external inputs are configured
   * only if an internal clock source is provided to the LPTIM
   */
  if (hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC)
 800977a:	687b      	ldr	r3, [r7, #4]
 800977c:	685b      	ldr	r3, [r3, #4]
 800977e:	2b00      	cmp	r3, #0
 8009780:	d107      	bne.n	8009792 <HAL_LPTIM_Init+0xb2>
  {
    tmpcfgr |= (hlptim->Init.Trigger.SampleTime |
 8009782:	687b      	ldr	r3, [r7, #4]
 8009784:	69da      	ldr	r2, [r3, #28]
                hlptim->Init.UltraLowPowerClock.SampleTime);
 8009786:	687b      	ldr	r3, [r7, #4]
 8009788:	691b      	ldr	r3, [r3, #16]
    tmpcfgr |= (hlptim->Init.Trigger.SampleTime |
 800978a:	4313      	orrs	r3, r2
 800978c:	68fa      	ldr	r2, [r7, #12]
 800978e:	4313      	orrs	r3, r2
 8009790:	60fb      	str	r3, [r7, #12]
  }

  /* Configure LPTIM external clock polarity and digital filter */
  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 8009792:	687b      	ldr	r3, [r7, #4]
 8009794:	685b      	ldr	r3, [r3, #4]
 8009796:	2b01      	cmp	r3, #1
 8009798:	d004      	beq.n	80097a4 <HAL_LPTIM_Init+0xc4>
      || (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800979e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80097a2:	d107      	bne.n	80097b4 <HAL_LPTIM_Init+0xd4>
  {
    tmpcfgr |= (hlptim->Init.UltraLowPowerClock.Polarity |
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	68da      	ldr	r2, [r3, #12]
                hlptim->Init.UltraLowPowerClock.SampleTime);
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	691b      	ldr	r3, [r3, #16]
    tmpcfgr |= (hlptim->Init.UltraLowPowerClock.Polarity |
 80097ac:	4313      	orrs	r3, r2
 80097ae:	68fa      	ldr	r2, [r7, #12]
 80097b0:	4313      	orrs	r3, r2
 80097b2:	60fb      	str	r3, [r7, #12]
  }

  /* Configure LPTIM external trigger */
  if (hlptim->Init.Trigger.Source != LPTIM_TRIGSOURCE_SOFTWARE)
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	695b      	ldr	r3, [r3, #20]
 80097b8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80097bc:	4293      	cmp	r3, r2
 80097be:	d00a      	beq.n	80097d6 <HAL_LPTIM_Init+0xf6>
  {
    /* Enable External trigger and set the trigger source */
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	695a      	ldr	r2, [r3, #20]
                hlptim->Init.Trigger.ActiveEdge |
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	699b      	ldr	r3, [r3, #24]
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 80097c8:	431a      	orrs	r2, r3
                hlptim->Init.Trigger.SampleTime);
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	69db      	ldr	r3, [r3, #28]
                hlptim->Init.Trigger.ActiveEdge |
 80097ce:	4313      	orrs	r3, r2
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 80097d0:	68fa      	ldr	r2, [r7, #12]
 80097d2:	4313      	orrs	r3, r2
 80097d4:	60fb      	str	r3, [r7, #12]
  }

  /* Write to LPTIMx CFGR */
  hlptim->Instance->CFGR = tmpcfgr;
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	681b      	ldr	r3, [r3, #0]
 80097da:	68fa      	ldr	r2, [r7, #12]
 80097dc:	60da      	str	r2, [r3, #12]

  /* Configure LPTIM input sources */
  if ((hlptim->Instance == LPTIM1) || (hlptim->Instance == LPTIM2))
 80097de:	687b      	ldr	r3, [r7, #4]
 80097e0:	681b      	ldr	r3, [r3, #0]
 80097e2:	4a14      	ldr	r2, [pc, #80]	; (8009834 <HAL_LPTIM_Init+0x154>)
 80097e4:	4293      	cmp	r3, r2
 80097e6:	d004      	beq.n	80097f2 <HAL_LPTIM_Init+0x112>
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	681b      	ldr	r3, [r3, #0]
 80097ec:	4a12      	ldr	r2, [pc, #72]	; (8009838 <HAL_LPTIM_Init+0x158>)
 80097ee:	4293      	cmp	r3, r2
 80097f0:	d108      	bne.n	8009804 <HAL_LPTIM_Init+0x124>
    /* Check LPTIM Input1 and Input2 sources */
    assert_param(IS_LPTIM_INPUT1_SOURCE(hlptim->Instance, hlptim->Init.Input1Source));
    assert_param(IS_LPTIM_INPUT2_SOURCE(hlptim->Instance, hlptim->Init.Input2Source));

    /* Configure LPTIM Input1 and Input2 sources */
    hlptim->Instance->CFGR2 = (hlptim->Init.Input1Source | hlptim->Init.Input2Source);
 80097f2:	687b      	ldr	r3, [r7, #4]
 80097f4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80097f6:	687b      	ldr	r3, [r7, #4]
 80097f8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	681b      	ldr	r3, [r3, #0]
 80097fe:	430a      	orrs	r2, r1
 8009800:	625a      	str	r2, [r3, #36]	; 0x24
 8009802:	e009      	b.n	8009818 <HAL_LPTIM_Init+0x138>
  }
  else
  {
    if (hlptim->Instance == LPTIM3)
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	681b      	ldr	r3, [r3, #0]
 8009808:	4a0c      	ldr	r2, [pc, #48]	; (800983c <HAL_LPTIM_Init+0x15c>)
 800980a:	4293      	cmp	r3, r2
 800980c:	d104      	bne.n	8009818 <HAL_LPTIM_Init+0x138>
    {
      /* Check LPTIM3 Input1 source */
      assert_param(IS_LPTIM_INPUT1_SOURCE(hlptim->Instance, hlptim->Init.Input1Source));

      /* Configure LPTIM3 Input1 source */
      hlptim->Instance->CFGR2 = hlptim->Init.Input1Source;
 800980e:	687b      	ldr	r3, [r7, #4]
 8009810:	681b      	ldr	r3, [r3, #0]
 8009812:	687a      	ldr	r2, [r7, #4]
 8009814:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8009816:	625a      	str	r2, [r3, #36]	; 0x24
    }
  }

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_READY;
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	2201      	movs	r2, #1
 800981c:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36

  /* Return function status */
  return HAL_OK;
 8009820:	2300      	movs	r3, #0
}
 8009822:	4618      	mov	r0, r3
 8009824:	3710      	adds	r7, #16
 8009826:	46bd      	mov	sp, r7
 8009828:	bd80      	pop	{r7, pc}
 800982a:	bf00      	nop
 800982c:	ffff1f3f 	.word	0xffff1f3f
 8009830:	ff19f1fe 	.word	0xff19f1fe
 8009834:	40002400 	.word	0x40002400
 8009838:	58002400 	.word	0x58002400
 800983c:	58002800 	.word	0x58002800

08009840 <HAL_LPTIM_Counter_Start_IT>:
  * @param  Period Specifies the Autoreload value.
  *         This parameter must be a value between 0x0001 and 0xFFFF.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LPTIM_Counter_Start_IT(LPTIM_HandleTypeDef *hlptim, uint32_t Period)
{
 8009840:	b580      	push	{r7, lr}
 8009842:	b082      	sub	sp, #8
 8009844:	af00      	add	r7, sp, #0
 8009846:	6078      	str	r0, [r7, #4]
 8009848:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_LPTIM_INSTANCE(hlptim->Instance));
  assert_param(IS_LPTIM_PERIOD(Period));

  /* Set the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 800984a:	687b      	ldr	r3, [r7, #4]
 800984c:	2202      	movs	r2, #2
 800984e:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36

  /* If clock source is not ULPTIM clock and counter source is external, then it must not be prescaled */
  if ((hlptim->Init.Clock.Source != LPTIM_CLOCKSOURCE_ULPTIM)
 8009852:	687b      	ldr	r3, [r7, #4]
 8009854:	685b      	ldr	r3, [r3, #4]
 8009856:	2b01      	cmp	r3, #1
 8009858:	d00c      	beq.n	8009874 <HAL_LPTIM_Counter_Start_IT+0x34>
      && (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
 800985a:	687b      	ldr	r3, [r7, #4]
 800985c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800985e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8009862:	d107      	bne.n	8009874 <HAL_LPTIM_Counter_Start_IT+0x34>
  {
    /* Check if clock is prescaled */
    assert_param(IS_LPTIM_CLOCK_PRESCALERDIV1(hlptim->Init.Clock.Prescaler));
    /* Set clock prescaler to 0 */
    hlptim->Instance->CFGR &= ~LPTIM_CFGR_PRESC;
 8009864:	687b      	ldr	r3, [r7, #4]
 8009866:	681b      	ldr	r3, [r3, #0]
 8009868:	68da      	ldr	r2, [r3, #12]
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	681b      	ldr	r3, [r3, #0]
 800986e:	f422 6260 	bic.w	r2, r2, #3584	; 0xe00
 8009872:	60da      	str	r2, [r3, #12]
  }

  /* Enable the Peripheral */
  __HAL_LPTIM_ENABLE(hlptim);
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	681b      	ldr	r3, [r3, #0]
 8009878:	691a      	ldr	r2, [r3, #16]
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	681b      	ldr	r3, [r3, #0]
 800987e:	f042 0201 	orr.w	r2, r2, #1
 8009882:	611a      	str	r2, [r3, #16]

  /* Clear flag */
  __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARROK);
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	681b      	ldr	r3, [r3, #0]
 8009888:	2210      	movs	r2, #16
 800988a:	605a      	str	r2, [r3, #4]

  /* Load the period value in the autoreload register */
  __HAL_LPTIM_AUTORELOAD_SET(hlptim, Period);
 800988c:	687b      	ldr	r3, [r7, #4]
 800988e:	681b      	ldr	r3, [r3, #0]
 8009890:	683a      	ldr	r2, [r7, #0]
 8009892:	619a      	str	r2, [r3, #24]

  /* Wait for the completion of the write operation to the LPTIM_ARR register */
  if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_ARROK) == HAL_TIMEOUT)
 8009894:	2110      	movs	r1, #16
 8009896:	6878      	ldr	r0, [r7, #4]
 8009898:	f000 f91e 	bl	8009ad8 <LPTIM_WaitForFlag>
 800989c:	4603      	mov	r3, r0
 800989e:	2b03      	cmp	r3, #3
 80098a0:	d101      	bne.n	80098a6 <HAL_LPTIM_Counter_Start_IT+0x66>
  {
    return HAL_TIMEOUT;
 80098a2:	2303      	movs	r3, #3
 80098a4:	e02f      	b.n	8009906 <HAL_LPTIM_Counter_Start_IT+0xc6>
  }

  /* Disable the Peripheral */
  __HAL_LPTIM_DISABLE(hlptim);
 80098a6:	6878      	ldr	r0, [r7, #4]
 80098a8:	f000 f946 	bl	8009b38 <LPTIM_Disable>

  if (HAL_LPTIM_GetState(hlptim) == HAL_LPTIM_STATE_TIMEOUT)
 80098ac:	6878      	ldr	r0, [r7, #4]
 80098ae:	f000 f905 	bl	8009abc <HAL_LPTIM_GetState>
 80098b2:	4603      	mov	r3, r0
 80098b4:	2b03      	cmp	r3, #3
 80098b6:	d101      	bne.n	80098bc <HAL_LPTIM_Counter_Start_IT+0x7c>
  {
    return HAL_TIMEOUT;
 80098b8:	2303      	movs	r3, #3
 80098ba:	e024      	b.n	8009906 <HAL_LPTIM_Counter_Start_IT+0xc6>
  }

  /* Enable Autoreload write complete interrupt */
  __HAL_LPTIM_ENABLE_IT(hlptim, LPTIM_IT_ARROK);
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	681b      	ldr	r3, [r3, #0]
 80098c0:	689a      	ldr	r2, [r3, #8]
 80098c2:	687b      	ldr	r3, [r7, #4]
 80098c4:	681b      	ldr	r3, [r3, #0]
 80098c6:	f042 0210 	orr.w	r2, r2, #16
 80098ca:	609a      	str	r2, [r3, #8]

  /* Enable Autoreload match interrupt */
  __HAL_LPTIM_ENABLE_IT(hlptim, LPTIM_IT_ARRM);
 80098cc:	687b      	ldr	r3, [r7, #4]
 80098ce:	681b      	ldr	r3, [r3, #0]
 80098d0:	689a      	ldr	r2, [r3, #8]
 80098d2:	687b      	ldr	r3, [r7, #4]
 80098d4:	681b      	ldr	r3, [r3, #0]
 80098d6:	f042 0202 	orr.w	r2, r2, #2
 80098da:	609a      	str	r2, [r3, #8]

  /* Enable the Peripheral */
  __HAL_LPTIM_ENABLE(hlptim);
 80098dc:	687b      	ldr	r3, [r7, #4]
 80098de:	681b      	ldr	r3, [r3, #0]
 80098e0:	691a      	ldr	r2, [r3, #16]
 80098e2:	687b      	ldr	r3, [r7, #4]
 80098e4:	681b      	ldr	r3, [r3, #0]
 80098e6:	f042 0201 	orr.w	r2, r2, #1
 80098ea:	611a      	str	r2, [r3, #16]

  /* Start timer in continuous mode */
  __HAL_LPTIM_START_CONTINUOUS(hlptim);
 80098ec:	687b      	ldr	r3, [r7, #4]
 80098ee:	681b      	ldr	r3, [r3, #0]
 80098f0:	691a      	ldr	r2, [r3, #16]
 80098f2:	687b      	ldr	r3, [r7, #4]
 80098f4:	681b      	ldr	r3, [r3, #0]
 80098f6:	f042 0204 	orr.w	r2, r2, #4
 80098fa:	611a      	str	r2, [r3, #16]

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_READY;
 80098fc:	687b      	ldr	r3, [r7, #4]
 80098fe:	2201      	movs	r2, #1
 8009900:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36

  /* Return function status */
  return HAL_OK;
 8009904:	2300      	movs	r3, #0
}
 8009906:	4618      	mov	r0, r3
 8009908:	3708      	adds	r7, #8
 800990a:	46bd      	mov	sp, r7
 800990c:	bd80      	pop	{r7, pc}

0800990e <HAL_LPTIM_IRQHandler>:
  * @brief  Handle LPTIM interrupt request.
  * @param  hlptim LPTIM handle
  * @retval None
  */
void HAL_LPTIM_IRQHandler(LPTIM_HandleTypeDef *hlptim)
{
 800990e:	b580      	push	{r7, lr}
 8009910:	b082      	sub	sp, #8
 8009912:	af00      	add	r7, sp, #0
 8009914:	6078      	str	r0, [r7, #4]
  /* Compare match interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_CMPM) != RESET)
 8009916:	687b      	ldr	r3, [r7, #4]
 8009918:	681b      	ldr	r3, [r3, #0]
 800991a:	681b      	ldr	r3, [r3, #0]
 800991c:	f003 0301 	and.w	r3, r3, #1
 8009920:	2b01      	cmp	r3, #1
 8009922:	d10d      	bne.n	8009940 <HAL_LPTIM_IRQHandler+0x32>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_CMPM) != RESET)
 8009924:	687b      	ldr	r3, [r7, #4]
 8009926:	681b      	ldr	r3, [r3, #0]
 8009928:	689b      	ldr	r3, [r3, #8]
 800992a:	f003 0301 	and.w	r3, r3, #1
 800992e:	2b01      	cmp	r3, #1
 8009930:	d106      	bne.n	8009940 <HAL_LPTIM_IRQHandler+0x32>
    {
      /* Clear Compare match flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMPM);
 8009932:	687b      	ldr	r3, [r7, #4]
 8009934:	681b      	ldr	r3, [r3, #0]
 8009936:	2201      	movs	r2, #1
 8009938:	605a      	str	r2, [r3, #4]

      /* Compare match Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->CompareMatchCallback(hlptim);
#else
      HAL_LPTIM_CompareMatchCallback(hlptim);
 800993a:	6878      	ldr	r0, [r7, #4]
 800993c:	f000 f882 	bl	8009a44 <HAL_LPTIM_CompareMatchCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Autoreload match interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_ARRM) != RESET)
 8009940:	687b      	ldr	r3, [r7, #4]
 8009942:	681b      	ldr	r3, [r3, #0]
 8009944:	681b      	ldr	r3, [r3, #0]
 8009946:	f003 0302 	and.w	r3, r3, #2
 800994a:	2b02      	cmp	r3, #2
 800994c:	d10d      	bne.n	800996a <HAL_LPTIM_IRQHandler+0x5c>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_ARRM) != RESET)
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	681b      	ldr	r3, [r3, #0]
 8009952:	689b      	ldr	r3, [r3, #8]
 8009954:	f003 0302 	and.w	r3, r3, #2
 8009958:	2b02      	cmp	r3, #2
 800995a:	d106      	bne.n	800996a <HAL_LPTIM_IRQHandler+0x5c>
    {
      /* Clear Autoreload match flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARRM);
 800995c:	687b      	ldr	r3, [r7, #4]
 800995e:	681b      	ldr	r3, [r3, #0]
 8009960:	2202      	movs	r2, #2
 8009962:	605a      	str	r2, [r3, #4]

      /* Autoreload match Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->AutoReloadMatchCallback(hlptim);
#else
      HAL_LPTIM_AutoReloadMatchCallback(hlptim);
 8009964:	6878      	ldr	r0, [r7, #4]
 8009966:	f7fa f9fd 	bl	8003d64 <HAL_LPTIM_AutoReloadMatchCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Trigger detected interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_EXTTRIG) != RESET)
 800996a:	687b      	ldr	r3, [r7, #4]
 800996c:	681b      	ldr	r3, [r3, #0]
 800996e:	681b      	ldr	r3, [r3, #0]
 8009970:	f003 0304 	and.w	r3, r3, #4
 8009974:	2b04      	cmp	r3, #4
 8009976:	d10d      	bne.n	8009994 <HAL_LPTIM_IRQHandler+0x86>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_EXTTRIG) != RESET)
 8009978:	687b      	ldr	r3, [r7, #4]
 800997a:	681b      	ldr	r3, [r3, #0]
 800997c:	689b      	ldr	r3, [r3, #8]
 800997e:	f003 0304 	and.w	r3, r3, #4
 8009982:	2b04      	cmp	r3, #4
 8009984:	d106      	bne.n	8009994 <HAL_LPTIM_IRQHandler+0x86>
    {
      /* Clear Trigger detected flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_EXTTRIG);
 8009986:	687b      	ldr	r3, [r7, #4]
 8009988:	681b      	ldr	r3, [r3, #0]
 800998a:	2204      	movs	r2, #4
 800998c:	605a      	str	r2, [r3, #4]

      /* Trigger detected callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->TriggerCallback(hlptim);
#else
      HAL_LPTIM_TriggerCallback(hlptim);
 800998e:	6878      	ldr	r0, [r7, #4]
 8009990:	f000 f862 	bl	8009a58 <HAL_LPTIM_TriggerCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Compare write interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_CMPOK) != RESET)
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	681b      	ldr	r3, [r3, #0]
 8009998:	681b      	ldr	r3, [r3, #0]
 800999a:	f003 0308 	and.w	r3, r3, #8
 800999e:	2b08      	cmp	r3, #8
 80099a0:	d10d      	bne.n	80099be <HAL_LPTIM_IRQHandler+0xb0>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_CMPOK) != RESET)
 80099a2:	687b      	ldr	r3, [r7, #4]
 80099a4:	681b      	ldr	r3, [r3, #0]
 80099a6:	689b      	ldr	r3, [r3, #8]
 80099a8:	f003 0308 	and.w	r3, r3, #8
 80099ac:	2b08      	cmp	r3, #8
 80099ae:	d106      	bne.n	80099be <HAL_LPTIM_IRQHandler+0xb0>
    {
      /* Clear Compare write flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMPOK);
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	681b      	ldr	r3, [r3, #0]
 80099b4:	2208      	movs	r2, #8
 80099b6:	605a      	str	r2, [r3, #4]

      /* Compare write Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->CompareWriteCallback(hlptim);
#else
      HAL_LPTIM_CompareWriteCallback(hlptim);
 80099b8:	6878      	ldr	r0, [r7, #4]
 80099ba:	f000 f857 	bl	8009a6c <HAL_LPTIM_CompareWriteCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Autoreload write interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_ARROK) != RESET)
 80099be:	687b      	ldr	r3, [r7, #4]
 80099c0:	681b      	ldr	r3, [r3, #0]
 80099c2:	681b      	ldr	r3, [r3, #0]
 80099c4:	f003 0310 	and.w	r3, r3, #16
 80099c8:	2b10      	cmp	r3, #16
 80099ca:	d10d      	bne.n	80099e8 <HAL_LPTIM_IRQHandler+0xda>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_ARROK) != RESET)
 80099cc:	687b      	ldr	r3, [r7, #4]
 80099ce:	681b      	ldr	r3, [r3, #0]
 80099d0:	689b      	ldr	r3, [r3, #8]
 80099d2:	f003 0310 	and.w	r3, r3, #16
 80099d6:	2b10      	cmp	r3, #16
 80099d8:	d106      	bne.n	80099e8 <HAL_LPTIM_IRQHandler+0xda>
    {
      /* Clear Autoreload write flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARROK);
 80099da:	687b      	ldr	r3, [r7, #4]
 80099dc:	681b      	ldr	r3, [r3, #0]
 80099de:	2210      	movs	r2, #16
 80099e0:	605a      	str	r2, [r3, #4]

      /* Autoreload write Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->AutoReloadWriteCallback(hlptim);
#else
      HAL_LPTIM_AutoReloadWriteCallback(hlptim);
 80099e2:	6878      	ldr	r0, [r7, #4]
 80099e4:	f000 f84c 	bl	8009a80 <HAL_LPTIM_AutoReloadWriteCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Direction counter changed from Down to Up interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_UP) != RESET)
 80099e8:	687b      	ldr	r3, [r7, #4]
 80099ea:	681b      	ldr	r3, [r3, #0]
 80099ec:	681b      	ldr	r3, [r3, #0]
 80099ee:	f003 0320 	and.w	r3, r3, #32
 80099f2:	2b20      	cmp	r3, #32
 80099f4:	d10d      	bne.n	8009a12 <HAL_LPTIM_IRQHandler+0x104>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_UP) != RESET)
 80099f6:	687b      	ldr	r3, [r7, #4]
 80099f8:	681b      	ldr	r3, [r3, #0]
 80099fa:	689b      	ldr	r3, [r3, #8]
 80099fc:	f003 0320 	and.w	r3, r3, #32
 8009a00:	2b20      	cmp	r3, #32
 8009a02:	d106      	bne.n	8009a12 <HAL_LPTIM_IRQHandler+0x104>
    {
      /* Clear Direction counter changed from Down to Up flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_UP);
 8009a04:	687b      	ldr	r3, [r7, #4]
 8009a06:	681b      	ldr	r3, [r3, #0]
 8009a08:	2220      	movs	r2, #32
 8009a0a:	605a      	str	r2, [r3, #4]

      /* Direction counter changed from Down to Up Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->DirectionUpCallback(hlptim);
#else
      HAL_LPTIM_DirectionUpCallback(hlptim);
 8009a0c:	6878      	ldr	r0, [r7, #4]
 8009a0e:	f000 f841 	bl	8009a94 <HAL_LPTIM_DirectionUpCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Direction counter changed from Up to Down interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_DOWN) != RESET)
 8009a12:	687b      	ldr	r3, [r7, #4]
 8009a14:	681b      	ldr	r3, [r3, #0]
 8009a16:	681b      	ldr	r3, [r3, #0]
 8009a18:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009a1c:	2b40      	cmp	r3, #64	; 0x40
 8009a1e:	d10d      	bne.n	8009a3c <HAL_LPTIM_IRQHandler+0x12e>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_DOWN) != RESET)
 8009a20:	687b      	ldr	r3, [r7, #4]
 8009a22:	681b      	ldr	r3, [r3, #0]
 8009a24:	689b      	ldr	r3, [r3, #8]
 8009a26:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009a2a:	2b40      	cmp	r3, #64	; 0x40
 8009a2c:	d106      	bne.n	8009a3c <HAL_LPTIM_IRQHandler+0x12e>
    {
      /* Clear Direction counter changed from Up to Down flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_DOWN);
 8009a2e:	687b      	ldr	r3, [r7, #4]
 8009a30:	681b      	ldr	r3, [r3, #0]
 8009a32:	2240      	movs	r2, #64	; 0x40
 8009a34:	605a      	str	r2, [r3, #4]

      /* Direction counter changed from Up to Down Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->DirectionDownCallback(hlptim);
#else
      HAL_LPTIM_DirectionDownCallback(hlptim);
 8009a36:	6878      	ldr	r0, [r7, #4]
 8009a38:	f000 f836 	bl	8009aa8 <HAL_LPTIM_DirectionDownCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }
}
 8009a3c:	bf00      	nop
 8009a3e:	3708      	adds	r7, #8
 8009a40:	46bd      	mov	sp, r7
 8009a42:	bd80      	pop	{r7, pc}

08009a44 <HAL_LPTIM_CompareMatchCallback>:
  * @brief  Compare match callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_CompareMatchCallback(LPTIM_HandleTypeDef *hlptim)
{
 8009a44:	b480      	push	{r7}
 8009a46:	b083      	sub	sp, #12
 8009a48:	af00      	add	r7, sp, #0
 8009a4a:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_CompareMatchCallback could be implemented in the user file
   */
}
 8009a4c:	bf00      	nop
 8009a4e:	370c      	adds	r7, #12
 8009a50:	46bd      	mov	sp, r7
 8009a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a56:	4770      	bx	lr

08009a58 <HAL_LPTIM_TriggerCallback>:
  * @brief  Trigger detected callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_TriggerCallback(LPTIM_HandleTypeDef *hlptim)
{
 8009a58:	b480      	push	{r7}
 8009a5a:	b083      	sub	sp, #12
 8009a5c:	af00      	add	r7, sp, #0
 8009a5e:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_TriggerCallback could be implemented in the user file
   */
}
 8009a60:	bf00      	nop
 8009a62:	370c      	adds	r7, #12
 8009a64:	46bd      	mov	sp, r7
 8009a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a6a:	4770      	bx	lr

08009a6c <HAL_LPTIM_CompareWriteCallback>:
  * @brief  Compare write callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_CompareWriteCallback(LPTIM_HandleTypeDef *hlptim)
{
 8009a6c:	b480      	push	{r7}
 8009a6e:	b083      	sub	sp, #12
 8009a70:	af00      	add	r7, sp, #0
 8009a72:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_CompareWriteCallback could be implemented in the user file
   */
}
 8009a74:	bf00      	nop
 8009a76:	370c      	adds	r7, #12
 8009a78:	46bd      	mov	sp, r7
 8009a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a7e:	4770      	bx	lr

08009a80 <HAL_LPTIM_AutoReloadWriteCallback>:
  * @brief  Autoreload write callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_AutoReloadWriteCallback(LPTIM_HandleTypeDef *hlptim)
{
 8009a80:	b480      	push	{r7}
 8009a82:	b083      	sub	sp, #12
 8009a84:	af00      	add	r7, sp, #0
 8009a86:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_AutoReloadWriteCallback could be implemented in the user file
   */
}
 8009a88:	bf00      	nop
 8009a8a:	370c      	adds	r7, #12
 8009a8c:	46bd      	mov	sp, r7
 8009a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a92:	4770      	bx	lr

08009a94 <HAL_LPTIM_DirectionUpCallback>:
  * @brief  Direction counter changed from Down to Up callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_DirectionUpCallback(LPTIM_HandleTypeDef *hlptim)
{
 8009a94:	b480      	push	{r7}
 8009a96:	b083      	sub	sp, #12
 8009a98:	af00      	add	r7, sp, #0
 8009a9a:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_DirectionUpCallback could be implemented in the user file
   */
}
 8009a9c:	bf00      	nop
 8009a9e:	370c      	adds	r7, #12
 8009aa0:	46bd      	mov	sp, r7
 8009aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009aa6:	4770      	bx	lr

08009aa8 <HAL_LPTIM_DirectionDownCallback>:
  * @brief  Direction counter changed from Up to Down callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_DirectionDownCallback(LPTIM_HandleTypeDef *hlptim)
{
 8009aa8:	b480      	push	{r7}
 8009aaa:	b083      	sub	sp, #12
 8009aac:	af00      	add	r7, sp, #0
 8009aae:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_DirectionDownCallback could be implemented in the user file
   */
}
 8009ab0:	bf00      	nop
 8009ab2:	370c      	adds	r7, #12
 8009ab4:	46bd      	mov	sp, r7
 8009ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009aba:	4770      	bx	lr

08009abc <HAL_LPTIM_GetState>:
  * @brief  Return the LPTIM handle state.
  * @param  hlptim LPTIM handle
  * @retval HAL state
  */
HAL_LPTIM_StateTypeDef HAL_LPTIM_GetState(LPTIM_HandleTypeDef *hlptim)
{
 8009abc:	b480      	push	{r7}
 8009abe:	b083      	sub	sp, #12
 8009ac0:	af00      	add	r7, sp, #0
 8009ac2:	6078      	str	r0, [r7, #4]
  /* Return LPTIM handle state */
  return hlptim->State;
 8009ac4:	687b      	ldr	r3, [r7, #4]
 8009ac6:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8009aca:	b2db      	uxtb	r3, r3
}
 8009acc:	4618      	mov	r0, r3
 8009ace:	370c      	adds	r7, #12
 8009ad0:	46bd      	mov	sp, r7
 8009ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ad6:	4770      	bx	lr

08009ad8 <LPTIM_WaitForFlag>:
  *                the configuration information for LPTIM module.
  * @param  flag   The lptim flag
  * @retval HAL status
  */
static HAL_StatusTypeDef LPTIM_WaitForFlag(LPTIM_HandleTypeDef *hlptim, uint32_t flag)
{
 8009ad8:	b480      	push	{r7}
 8009ada:	b085      	sub	sp, #20
 8009adc:	af00      	add	r7, sp, #0
 8009ade:	6078      	str	r0, [r7, #4]
 8009ae0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef result = HAL_OK;
 8009ae2:	2300      	movs	r3, #0
 8009ae4:	73fb      	strb	r3, [r7, #15]
  uint32_t count = TIMEOUT * (SystemCoreClock / 20UL / 1000UL);
 8009ae6:	4b12      	ldr	r3, [pc, #72]	; (8009b30 <LPTIM_WaitForFlag+0x58>)
 8009ae8:	681b      	ldr	r3, [r3, #0]
 8009aea:	4a12      	ldr	r2, [pc, #72]	; (8009b34 <LPTIM_WaitForFlag+0x5c>)
 8009aec:	fba2 2303 	umull	r2, r3, r2, r3
 8009af0:	0b9b      	lsrs	r3, r3, #14
 8009af2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8009af6:	fb02 f303 	mul.w	r3, r2, r3
 8009afa:	60bb      	str	r3, [r7, #8]
  do
  {
    count--;
 8009afc:	68bb      	ldr	r3, [r7, #8]
 8009afe:	3b01      	subs	r3, #1
 8009b00:	60bb      	str	r3, [r7, #8]
    if (count == 0UL)
 8009b02:	68bb      	ldr	r3, [r7, #8]
 8009b04:	2b00      	cmp	r3, #0
 8009b06:	d101      	bne.n	8009b0c <LPTIM_WaitForFlag+0x34>
    {
      result = HAL_TIMEOUT;
 8009b08:	2303      	movs	r3, #3
 8009b0a:	73fb      	strb	r3, [r7, #15]
    }
  } while ((!(__HAL_LPTIM_GET_FLAG((hlptim), (flag)))) && (count != 0UL));
 8009b0c:	687b      	ldr	r3, [r7, #4]
 8009b0e:	681b      	ldr	r3, [r3, #0]
 8009b10:	681a      	ldr	r2, [r3, #0]
 8009b12:	683b      	ldr	r3, [r7, #0]
 8009b14:	4013      	ands	r3, r2
 8009b16:	683a      	ldr	r2, [r7, #0]
 8009b18:	429a      	cmp	r2, r3
 8009b1a:	d002      	beq.n	8009b22 <LPTIM_WaitForFlag+0x4a>
 8009b1c:	68bb      	ldr	r3, [r7, #8]
 8009b1e:	2b00      	cmp	r3, #0
 8009b20:	d1ec      	bne.n	8009afc <LPTIM_WaitForFlag+0x24>

  return result;
 8009b22:	7bfb      	ldrb	r3, [r7, #15]
}
 8009b24:	4618      	mov	r0, r3
 8009b26:	3714      	adds	r7, #20
 8009b28:	46bd      	mov	sp, r7
 8009b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b2e:	4770      	bx	lr
 8009b30:	2000011c 	.word	0x2000011c
 8009b34:	d1b71759 	.word	0xd1b71759

08009b38 <LPTIM_Disable>:
  *         Please check Errata Sheet ES0335 for more details under "MCU may remain
  *         stuck in LPTIM interrupt when entering Stop mode" section.
  * @retval None
  */
void LPTIM_Disable(LPTIM_HandleTypeDef *hlptim)
{
 8009b38:	b580      	push	{r7, lr}
 8009b3a:	b08c      	sub	sp, #48	; 0x30
 8009b3c:	af00      	add	r7, sp, #0
 8009b3e:	6078      	str	r0, [r7, #4]
  uint32_t tmpclksource = 0;
 8009b40:	2300      	movs	r3, #0
 8009b42:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009b44:	f3ef 8310 	mrs	r3, PRIMASK
 8009b48:	60fb      	str	r3, [r7, #12]
  return(result);
 8009b4a:	68fb      	ldr	r3, [r7, #12]
  uint32_t tmpARR;
  uint32_t primask_bit;
  uint32_t tmpCFGR2;

  /* Enter critical section */
  primask_bit = __get_PRIMASK();
 8009b4c:	62bb      	str	r3, [r7, #40]	; 0x28
 8009b4e:	2301      	movs	r3, #1
 8009b50:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009b52:	693b      	ldr	r3, [r7, #16]
 8009b54:	f383 8810 	msr	PRIMASK, r3
}
 8009b58:	bf00      	nop
  __set_PRIMASK(1) ;

  /*********** Save LPTIM Config ***********/
  /* Save LPTIM source clock */
  switch ((uint32_t)hlptim->Instance)
 8009b5a:	687b      	ldr	r3, [r7, #4]
 8009b5c:	681b      	ldr	r3, [r3, #0]
 8009b5e:	4a81      	ldr	r2, [pc, #516]	; (8009d64 <LPTIM_Disable+0x22c>)
 8009b60:	4293      	cmp	r3, r2
 8009b62:	d02d      	beq.n	8009bc0 <LPTIM_Disable+0x88>
 8009b64:	4a7f      	ldr	r2, [pc, #508]	; (8009d64 <LPTIM_Disable+0x22c>)
 8009b66:	4293      	cmp	r3, r2
 8009b68:	d830      	bhi.n	8009bcc <LPTIM_Disable+0x94>
 8009b6a:	4a7f      	ldr	r2, [pc, #508]	; (8009d68 <LPTIM_Disable+0x230>)
 8009b6c:	4293      	cmp	r3, r2
 8009b6e:	d021      	beq.n	8009bb4 <LPTIM_Disable+0x7c>
 8009b70:	4a7d      	ldr	r2, [pc, #500]	; (8009d68 <LPTIM_Disable+0x230>)
 8009b72:	4293      	cmp	r3, r2
 8009b74:	d82a      	bhi.n	8009bcc <LPTIM_Disable+0x94>
 8009b76:	4a7d      	ldr	r2, [pc, #500]	; (8009d6c <LPTIM_Disable+0x234>)
 8009b78:	4293      	cmp	r3, r2
 8009b7a:	d015      	beq.n	8009ba8 <LPTIM_Disable+0x70>
 8009b7c:	4a7b      	ldr	r2, [pc, #492]	; (8009d6c <LPTIM_Disable+0x234>)
 8009b7e:	4293      	cmp	r3, r2
 8009b80:	d824      	bhi.n	8009bcc <LPTIM_Disable+0x94>
 8009b82:	4a7b      	ldr	r2, [pc, #492]	; (8009d70 <LPTIM_Disable+0x238>)
 8009b84:	4293      	cmp	r3, r2
 8009b86:	d003      	beq.n	8009b90 <LPTIM_Disable+0x58>
 8009b88:	4a7a      	ldr	r2, [pc, #488]	; (8009d74 <LPTIM_Disable+0x23c>)
 8009b8a:	4293      	cmp	r3, r2
 8009b8c:	d006      	beq.n	8009b9c <LPTIM_Disable+0x64>
    case LPTIM5_BASE:
      tmpclksource = __HAL_RCC_GET_LPTIM5_SOURCE();
      break;
#endif /* LPTIM5 */
    default:
      break;
 8009b8e:	e01d      	b.n	8009bcc <LPTIM_Disable+0x94>
      tmpclksource = __HAL_RCC_GET_LPTIM1_SOURCE();
 8009b90:	4b79      	ldr	r3, [pc, #484]	; (8009d78 <LPTIM_Disable+0x240>)
 8009b92:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009b94:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 8009b98:	62fb      	str	r3, [r7, #44]	; 0x2c
      break;
 8009b9a:	e018      	b.n	8009bce <LPTIM_Disable+0x96>
      tmpclksource = __HAL_RCC_GET_LPTIM2_SOURCE();
 8009b9c:	4b76      	ldr	r3, [pc, #472]	; (8009d78 <LPTIM_Disable+0x240>)
 8009b9e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009ba0:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 8009ba4:	62fb      	str	r3, [r7, #44]	; 0x2c
      break;
 8009ba6:	e012      	b.n	8009bce <LPTIM_Disable+0x96>
      tmpclksource = __HAL_RCC_GET_LPTIM3_SOURCE();
 8009ba8:	4b73      	ldr	r3, [pc, #460]	; (8009d78 <LPTIM_Disable+0x240>)
 8009baa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009bac:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8009bb0:	62fb      	str	r3, [r7, #44]	; 0x2c
      break;
 8009bb2:	e00c      	b.n	8009bce <LPTIM_Disable+0x96>
      tmpclksource = __HAL_RCC_GET_LPTIM4_SOURCE();
 8009bb4:	4b70      	ldr	r3, [pc, #448]	; (8009d78 <LPTIM_Disable+0x240>)
 8009bb6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009bb8:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8009bbc:	62fb      	str	r3, [r7, #44]	; 0x2c
      break;
 8009bbe:	e006      	b.n	8009bce <LPTIM_Disable+0x96>
      tmpclksource = __HAL_RCC_GET_LPTIM5_SOURCE();
 8009bc0:	4b6d      	ldr	r3, [pc, #436]	; (8009d78 <LPTIM_Disable+0x240>)
 8009bc2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009bc4:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8009bc8:	62fb      	str	r3, [r7, #44]	; 0x2c
      break;
 8009bca:	e000      	b.n	8009bce <LPTIM_Disable+0x96>
      break;
 8009bcc:	bf00      	nop
  }

  /* Save LPTIM configuration registers */
  tmpIER = hlptim->Instance->IER;
 8009bce:	687b      	ldr	r3, [r7, #4]
 8009bd0:	681b      	ldr	r3, [r3, #0]
 8009bd2:	689b      	ldr	r3, [r3, #8]
 8009bd4:	627b      	str	r3, [r7, #36]	; 0x24
  tmpCFGR = hlptim->Instance->CFGR;
 8009bd6:	687b      	ldr	r3, [r7, #4]
 8009bd8:	681b      	ldr	r3, [r3, #0]
 8009bda:	68db      	ldr	r3, [r3, #12]
 8009bdc:	623b      	str	r3, [r7, #32]
  tmpCMP = hlptim->Instance->CMP;
 8009bde:	687b      	ldr	r3, [r7, #4]
 8009be0:	681b      	ldr	r3, [r3, #0]
 8009be2:	695b      	ldr	r3, [r3, #20]
 8009be4:	61fb      	str	r3, [r7, #28]
  tmpARR = hlptim->Instance->ARR;
 8009be6:	687b      	ldr	r3, [r7, #4]
 8009be8:	681b      	ldr	r3, [r3, #0]
 8009bea:	699b      	ldr	r3, [r3, #24]
 8009bec:	61bb      	str	r3, [r7, #24]
  tmpCFGR2 = hlptim->Instance->CFGR2;
 8009bee:	687b      	ldr	r3, [r7, #4]
 8009bf0:	681b      	ldr	r3, [r3, #0]
 8009bf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009bf4:	617b      	str	r3, [r7, #20]

  /*********** Reset LPTIM ***********/
  switch ((uint32_t)hlptim->Instance)
 8009bf6:	687b      	ldr	r3, [r7, #4]
 8009bf8:	681b      	ldr	r3, [r3, #0]
 8009bfa:	4a5a      	ldr	r2, [pc, #360]	; (8009d64 <LPTIM_Disable+0x22c>)
 8009bfc:	4293      	cmp	r3, r2
 8009bfe:	d059      	beq.n	8009cb4 <LPTIM_Disable+0x17c>
 8009c00:	4a58      	ldr	r2, [pc, #352]	; (8009d64 <LPTIM_Disable+0x22c>)
 8009c02:	4293      	cmp	r3, r2
 8009c04:	d867      	bhi.n	8009cd6 <LPTIM_Disable+0x19e>
 8009c06:	4a58      	ldr	r2, [pc, #352]	; (8009d68 <LPTIM_Disable+0x230>)
 8009c08:	4293      	cmp	r3, r2
 8009c0a:	d042      	beq.n	8009c92 <LPTIM_Disable+0x15a>
 8009c0c:	4a56      	ldr	r2, [pc, #344]	; (8009d68 <LPTIM_Disable+0x230>)
 8009c0e:	4293      	cmp	r3, r2
 8009c10:	d861      	bhi.n	8009cd6 <LPTIM_Disable+0x19e>
 8009c12:	4a56      	ldr	r2, [pc, #344]	; (8009d6c <LPTIM_Disable+0x234>)
 8009c14:	4293      	cmp	r3, r2
 8009c16:	d02b      	beq.n	8009c70 <LPTIM_Disable+0x138>
 8009c18:	4a54      	ldr	r2, [pc, #336]	; (8009d6c <LPTIM_Disable+0x234>)
 8009c1a:	4293      	cmp	r3, r2
 8009c1c:	d85b      	bhi.n	8009cd6 <LPTIM_Disable+0x19e>
 8009c1e:	4a54      	ldr	r2, [pc, #336]	; (8009d70 <LPTIM_Disable+0x238>)
 8009c20:	4293      	cmp	r3, r2
 8009c22:	d003      	beq.n	8009c2c <LPTIM_Disable+0xf4>
 8009c24:	4a53      	ldr	r2, [pc, #332]	; (8009d74 <LPTIM_Disable+0x23c>)
 8009c26:	4293      	cmp	r3, r2
 8009c28:	d011      	beq.n	8009c4e <LPTIM_Disable+0x116>
      __HAL_RCC_LPTIM5_FORCE_RESET();
      __HAL_RCC_LPTIM5_RELEASE_RESET();
      break;
#endif /* LPTIM5 */
    default:
      break;
 8009c2a:	e054      	b.n	8009cd6 <LPTIM_Disable+0x19e>
      __HAL_RCC_LPTIM1_FORCE_RESET();
 8009c2c:	4b52      	ldr	r3, [pc, #328]	; (8009d78 <LPTIM_Disable+0x240>)
 8009c2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009c32:	4a51      	ldr	r2, [pc, #324]	; (8009d78 <LPTIM_Disable+0x240>)
 8009c34:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8009c38:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      __HAL_RCC_LPTIM1_RELEASE_RESET();
 8009c3c:	4b4e      	ldr	r3, [pc, #312]	; (8009d78 <LPTIM_Disable+0x240>)
 8009c3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009c42:	4a4d      	ldr	r2, [pc, #308]	; (8009d78 <LPTIM_Disable+0x240>)
 8009c44:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009c48:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      break;
 8009c4c:	e044      	b.n	8009cd8 <LPTIM_Disable+0x1a0>
      __HAL_RCC_LPTIM2_FORCE_RESET();
 8009c4e:	4b4a      	ldr	r3, [pc, #296]	; (8009d78 <LPTIM_Disable+0x240>)
 8009c50:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8009c54:	4a48      	ldr	r2, [pc, #288]	; (8009d78 <LPTIM_Disable+0x240>)
 8009c56:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8009c5a:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
      __HAL_RCC_LPTIM2_RELEASE_RESET();
 8009c5e:	4b46      	ldr	r3, [pc, #280]	; (8009d78 <LPTIM_Disable+0x240>)
 8009c60:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8009c64:	4a44      	ldr	r2, [pc, #272]	; (8009d78 <LPTIM_Disable+0x240>)
 8009c66:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009c6a:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
      break;
 8009c6e:	e033      	b.n	8009cd8 <LPTIM_Disable+0x1a0>
      __HAL_RCC_LPTIM3_FORCE_RESET();
 8009c70:	4b41      	ldr	r3, [pc, #260]	; (8009d78 <LPTIM_Disable+0x240>)
 8009c72:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8009c76:	4a40      	ldr	r2, [pc, #256]	; (8009d78 <LPTIM_Disable+0x240>)
 8009c78:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8009c7c:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
      __HAL_RCC_LPTIM3_RELEASE_RESET();
 8009c80:	4b3d      	ldr	r3, [pc, #244]	; (8009d78 <LPTIM_Disable+0x240>)
 8009c82:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8009c86:	4a3c      	ldr	r2, [pc, #240]	; (8009d78 <LPTIM_Disable+0x240>)
 8009c88:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009c8c:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
      break;
 8009c90:	e022      	b.n	8009cd8 <LPTIM_Disable+0x1a0>
      __HAL_RCC_LPTIM4_FORCE_RESET();
 8009c92:	4b39      	ldr	r3, [pc, #228]	; (8009d78 <LPTIM_Disable+0x240>)
 8009c94:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8009c98:	4a37      	ldr	r2, [pc, #220]	; (8009d78 <LPTIM_Disable+0x240>)
 8009c9a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8009c9e:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
      __HAL_RCC_LPTIM4_RELEASE_RESET();
 8009ca2:	4b35      	ldr	r3, [pc, #212]	; (8009d78 <LPTIM_Disable+0x240>)
 8009ca4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8009ca8:	4a33      	ldr	r2, [pc, #204]	; (8009d78 <LPTIM_Disable+0x240>)
 8009caa:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009cae:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
      break;
 8009cb2:	e011      	b.n	8009cd8 <LPTIM_Disable+0x1a0>
      __HAL_RCC_LPTIM5_FORCE_RESET();
 8009cb4:	4b30      	ldr	r3, [pc, #192]	; (8009d78 <LPTIM_Disable+0x240>)
 8009cb6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8009cba:	4a2f      	ldr	r2, [pc, #188]	; (8009d78 <LPTIM_Disable+0x240>)
 8009cbc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8009cc0:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
      __HAL_RCC_LPTIM5_RELEASE_RESET();
 8009cc4:	4b2c      	ldr	r3, [pc, #176]	; (8009d78 <LPTIM_Disable+0x240>)
 8009cc6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8009cca:	4a2b      	ldr	r2, [pc, #172]	; (8009d78 <LPTIM_Disable+0x240>)
 8009ccc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009cd0:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
      break;
 8009cd4:	e000      	b.n	8009cd8 <LPTIM_Disable+0x1a0>
      break;
 8009cd6:	bf00      	nop
  }

  /*********** Restore LPTIM Config ***********/
  if ((tmpCMP != 0UL) || (tmpARR != 0UL))
 8009cd8:	69fb      	ldr	r3, [r7, #28]
 8009cda:	2b00      	cmp	r3, #0
 8009cdc:	d103      	bne.n	8009ce6 <LPTIM_Disable+0x1ae>
 8009cde:	69bb      	ldr	r3, [r7, #24]
 8009ce0:	2b00      	cmp	r3, #0
 8009ce2:	f000 80d1 	beq.w	8009e88 <LPTIM_Disable+0x350>
  {
    /* Force LPTIM source kernel clock from APB */
    switch ((uint32_t)hlptim->Instance)
 8009ce6:	687b      	ldr	r3, [r7, #4]
 8009ce8:	681b      	ldr	r3, [r3, #0]
 8009cea:	4a1e      	ldr	r2, [pc, #120]	; (8009d64 <LPTIM_Disable+0x22c>)
 8009cec:	4293      	cmp	r3, r2
 8009cee:	d031      	beq.n	8009d54 <LPTIM_Disable+0x21c>
 8009cf0:	4a1c      	ldr	r2, [pc, #112]	; (8009d64 <LPTIM_Disable+0x22c>)
 8009cf2:	4293      	cmp	r3, r2
 8009cf4:	d842      	bhi.n	8009d7c <LPTIM_Disable+0x244>
 8009cf6:	4a1c      	ldr	r2, [pc, #112]	; (8009d68 <LPTIM_Disable+0x230>)
 8009cf8:	4293      	cmp	r3, r2
 8009cfa:	d024      	beq.n	8009d46 <LPTIM_Disable+0x20e>
 8009cfc:	4a1a      	ldr	r2, [pc, #104]	; (8009d68 <LPTIM_Disable+0x230>)
 8009cfe:	4293      	cmp	r3, r2
 8009d00:	d83c      	bhi.n	8009d7c <LPTIM_Disable+0x244>
 8009d02:	4a1a      	ldr	r2, [pc, #104]	; (8009d6c <LPTIM_Disable+0x234>)
 8009d04:	4293      	cmp	r3, r2
 8009d06:	d017      	beq.n	8009d38 <LPTIM_Disable+0x200>
 8009d08:	4a18      	ldr	r2, [pc, #96]	; (8009d6c <LPTIM_Disable+0x234>)
 8009d0a:	4293      	cmp	r3, r2
 8009d0c:	d836      	bhi.n	8009d7c <LPTIM_Disable+0x244>
 8009d0e:	4a18      	ldr	r2, [pc, #96]	; (8009d70 <LPTIM_Disable+0x238>)
 8009d10:	4293      	cmp	r3, r2
 8009d12:	d003      	beq.n	8009d1c <LPTIM_Disable+0x1e4>
 8009d14:	4a17      	ldr	r2, [pc, #92]	; (8009d74 <LPTIM_Disable+0x23c>)
 8009d16:	4293      	cmp	r3, r2
 8009d18:	d007      	beq.n	8009d2a <LPTIM_Disable+0x1f2>
      case LPTIM5_BASE:
        __HAL_RCC_LPTIM5_CONFIG(RCC_LPTIM5CLKSOURCE_D3PCLK1);
        break;
#endif /* LPTIM5 */
      default:
        break;
 8009d1a:	e02f      	b.n	8009d7c <LPTIM_Disable+0x244>
        __HAL_RCC_LPTIM1_CONFIG(RCC_LPTIM1CLKSOURCE_D2PCLK1);
 8009d1c:	4b16      	ldr	r3, [pc, #88]	; (8009d78 <LPTIM_Disable+0x240>)
 8009d1e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009d20:	4a15      	ldr	r2, [pc, #84]	; (8009d78 <LPTIM_Disable+0x240>)
 8009d22:	f023 43e0 	bic.w	r3, r3, #1879048192	; 0x70000000
 8009d26:	6553      	str	r3, [r2, #84]	; 0x54
        break;
 8009d28:	e029      	b.n	8009d7e <LPTIM_Disable+0x246>
        __HAL_RCC_LPTIM2_CONFIG(RCC_LPTIM2CLKSOURCE_D3PCLK1);
 8009d2a:	4b13      	ldr	r3, [pc, #76]	; (8009d78 <LPTIM_Disable+0x240>)
 8009d2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009d2e:	4a12      	ldr	r2, [pc, #72]	; (8009d78 <LPTIM_Disable+0x240>)
 8009d30:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8009d34:	6593      	str	r3, [r2, #88]	; 0x58
        break;
 8009d36:	e022      	b.n	8009d7e <LPTIM_Disable+0x246>
        __HAL_RCC_LPTIM3_CONFIG(RCC_LPTIM3CLKSOURCE_D3PCLK1);
 8009d38:	4b0f      	ldr	r3, [pc, #60]	; (8009d78 <LPTIM_Disable+0x240>)
 8009d3a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009d3c:	4a0e      	ldr	r2, [pc, #56]	; (8009d78 <LPTIM_Disable+0x240>)
 8009d3e:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8009d42:	6593      	str	r3, [r2, #88]	; 0x58
        break;
 8009d44:	e01b      	b.n	8009d7e <LPTIM_Disable+0x246>
        __HAL_RCC_LPTIM4_CONFIG(RCC_LPTIM4CLKSOURCE_D3PCLK1);
 8009d46:	4b0c      	ldr	r3, [pc, #48]	; (8009d78 <LPTIM_Disable+0x240>)
 8009d48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009d4a:	4a0b      	ldr	r2, [pc, #44]	; (8009d78 <LPTIM_Disable+0x240>)
 8009d4c:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8009d50:	6593      	str	r3, [r2, #88]	; 0x58
        break;
 8009d52:	e014      	b.n	8009d7e <LPTIM_Disable+0x246>
        __HAL_RCC_LPTIM5_CONFIG(RCC_LPTIM5CLKSOURCE_D3PCLK1);
 8009d54:	4b08      	ldr	r3, [pc, #32]	; (8009d78 <LPTIM_Disable+0x240>)
 8009d56:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009d58:	4a07      	ldr	r2, [pc, #28]	; (8009d78 <LPTIM_Disable+0x240>)
 8009d5a:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8009d5e:	6593      	str	r3, [r2, #88]	; 0x58
        break;
 8009d60:	e00d      	b.n	8009d7e <LPTIM_Disable+0x246>
 8009d62:	bf00      	nop
 8009d64:	58003000 	.word	0x58003000
 8009d68:	58002c00 	.word	0x58002c00
 8009d6c:	58002800 	.word	0x58002800
 8009d70:	40002400 	.word	0x40002400
 8009d74:	58002400 	.word	0x58002400
 8009d78:	58024400 	.word	0x58024400
        break;
 8009d7c:	bf00      	nop
    }

    if (tmpCMP != 0UL)
 8009d7e:	69fb      	ldr	r3, [r7, #28]
 8009d80:	2b00      	cmp	r3, #0
 8009d82:	d01a      	beq.n	8009dba <LPTIM_Disable+0x282>
    {
      /* Restore CMP register (LPTIM should be enabled first) */
      hlptim->Instance->CR |= LPTIM_CR_ENABLE;
 8009d84:	687b      	ldr	r3, [r7, #4]
 8009d86:	681b      	ldr	r3, [r3, #0]
 8009d88:	691a      	ldr	r2, [r3, #16]
 8009d8a:	687b      	ldr	r3, [r7, #4]
 8009d8c:	681b      	ldr	r3, [r3, #0]
 8009d8e:	f042 0201 	orr.w	r2, r2, #1
 8009d92:	611a      	str	r2, [r3, #16]
      hlptim->Instance->CMP = tmpCMP;
 8009d94:	687b      	ldr	r3, [r7, #4]
 8009d96:	681b      	ldr	r3, [r3, #0]
 8009d98:	69fa      	ldr	r2, [r7, #28]
 8009d9a:	615a      	str	r2, [r3, #20]

      /* Wait for the completion of the write operation to the LPTIM_CMP register */
      if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_CMPOK) == HAL_TIMEOUT)
 8009d9c:	2108      	movs	r1, #8
 8009d9e:	6878      	ldr	r0, [r7, #4]
 8009da0:	f7ff fe9a 	bl	8009ad8 <LPTIM_WaitForFlag>
 8009da4:	4603      	mov	r3, r0
 8009da6:	2b03      	cmp	r3, #3
 8009da8:	d103      	bne.n	8009db2 <LPTIM_Disable+0x27a>
      {
        hlptim->State = HAL_LPTIM_STATE_TIMEOUT;
 8009daa:	687b      	ldr	r3, [r7, #4]
 8009dac:	2203      	movs	r2, #3
 8009dae:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
      }
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMPOK);
 8009db2:	687b      	ldr	r3, [r7, #4]
 8009db4:	681b      	ldr	r3, [r3, #0]
 8009db6:	2208      	movs	r2, #8
 8009db8:	605a      	str	r2, [r3, #4]
    }

    if (tmpARR != 0UL)
 8009dba:	69bb      	ldr	r3, [r7, #24]
 8009dbc:	2b00      	cmp	r3, #0
 8009dbe:	d01a      	beq.n	8009df6 <LPTIM_Disable+0x2be>
    {
      /* Restore ARR register (LPTIM should be enabled first) */
      hlptim->Instance->CR |= LPTIM_CR_ENABLE;
 8009dc0:	687b      	ldr	r3, [r7, #4]
 8009dc2:	681b      	ldr	r3, [r3, #0]
 8009dc4:	691a      	ldr	r2, [r3, #16]
 8009dc6:	687b      	ldr	r3, [r7, #4]
 8009dc8:	681b      	ldr	r3, [r3, #0]
 8009dca:	f042 0201 	orr.w	r2, r2, #1
 8009dce:	611a      	str	r2, [r3, #16]
      hlptim->Instance->ARR = tmpARR;
 8009dd0:	687b      	ldr	r3, [r7, #4]
 8009dd2:	681b      	ldr	r3, [r3, #0]
 8009dd4:	69ba      	ldr	r2, [r7, #24]
 8009dd6:	619a      	str	r2, [r3, #24]

      /* Wait for the completion of the write operation to the LPTIM_ARR register */
      if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_ARROK) == HAL_TIMEOUT)
 8009dd8:	2110      	movs	r1, #16
 8009dda:	6878      	ldr	r0, [r7, #4]
 8009ddc:	f7ff fe7c 	bl	8009ad8 <LPTIM_WaitForFlag>
 8009de0:	4603      	mov	r3, r0
 8009de2:	2b03      	cmp	r3, #3
 8009de4:	d103      	bne.n	8009dee <LPTIM_Disable+0x2b6>
      {
        hlptim->State = HAL_LPTIM_STATE_TIMEOUT;
 8009de6:	687b      	ldr	r3, [r7, #4]
 8009de8:	2203      	movs	r2, #3
 8009dea:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
      }

      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARROK);
 8009dee:	687b      	ldr	r3, [r7, #4]
 8009df0:	681b      	ldr	r3, [r3, #0]
 8009df2:	2210      	movs	r2, #16
 8009df4:	605a      	str	r2, [r3, #4]
    }

    /* Restore LPTIM source kernel clock */
    switch ((uint32_t)hlptim->Instance)
 8009df6:	687b      	ldr	r3, [r7, #4]
 8009df8:	681b      	ldr	r3, [r3, #0]
 8009dfa:	4a32      	ldr	r2, [pc, #200]	; (8009ec4 <LPTIM_Disable+0x38c>)
 8009dfc:	4293      	cmp	r3, r2
 8009dfe:	d039      	beq.n	8009e74 <LPTIM_Disable+0x33c>
 8009e00:	4a30      	ldr	r2, [pc, #192]	; (8009ec4 <LPTIM_Disable+0x38c>)
 8009e02:	4293      	cmp	r3, r2
 8009e04:	d83f      	bhi.n	8009e86 <LPTIM_Disable+0x34e>
 8009e06:	4a30      	ldr	r2, [pc, #192]	; (8009ec8 <LPTIM_Disable+0x390>)
 8009e08:	4293      	cmp	r3, r2
 8009e0a:	d02a      	beq.n	8009e62 <LPTIM_Disable+0x32a>
 8009e0c:	4a2e      	ldr	r2, [pc, #184]	; (8009ec8 <LPTIM_Disable+0x390>)
 8009e0e:	4293      	cmp	r3, r2
 8009e10:	d839      	bhi.n	8009e86 <LPTIM_Disable+0x34e>
 8009e12:	4a2e      	ldr	r2, [pc, #184]	; (8009ecc <LPTIM_Disable+0x394>)
 8009e14:	4293      	cmp	r3, r2
 8009e16:	d01b      	beq.n	8009e50 <LPTIM_Disable+0x318>
 8009e18:	4a2c      	ldr	r2, [pc, #176]	; (8009ecc <LPTIM_Disable+0x394>)
 8009e1a:	4293      	cmp	r3, r2
 8009e1c:	d833      	bhi.n	8009e86 <LPTIM_Disable+0x34e>
 8009e1e:	4a2c      	ldr	r2, [pc, #176]	; (8009ed0 <LPTIM_Disable+0x398>)
 8009e20:	4293      	cmp	r3, r2
 8009e22:	d003      	beq.n	8009e2c <LPTIM_Disable+0x2f4>
 8009e24:	4a2b      	ldr	r2, [pc, #172]	; (8009ed4 <LPTIM_Disable+0x39c>)
 8009e26:	4293      	cmp	r3, r2
 8009e28:	d009      	beq.n	8009e3e <LPTIM_Disable+0x306>
      case LPTIM5_BASE:
        __HAL_RCC_LPTIM5_CONFIG(tmpclksource);
        break;
#endif /* LPTIM5 */
      default:
        break;
 8009e2a:	e02c      	b.n	8009e86 <LPTIM_Disable+0x34e>
        __HAL_RCC_LPTIM1_CONFIG(tmpclksource);
 8009e2c:	4b2a      	ldr	r3, [pc, #168]	; (8009ed8 <LPTIM_Disable+0x3a0>)
 8009e2e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009e30:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8009e34:	4928      	ldr	r1, [pc, #160]	; (8009ed8 <LPTIM_Disable+0x3a0>)
 8009e36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e38:	4313      	orrs	r3, r2
 8009e3a:	654b      	str	r3, [r1, #84]	; 0x54
        break;
 8009e3c:	e024      	b.n	8009e88 <LPTIM_Disable+0x350>
        __HAL_RCC_LPTIM2_CONFIG(tmpclksource);
 8009e3e:	4b26      	ldr	r3, [pc, #152]	; (8009ed8 <LPTIM_Disable+0x3a0>)
 8009e40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009e42:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8009e46:	4924      	ldr	r1, [pc, #144]	; (8009ed8 <LPTIM_Disable+0x3a0>)
 8009e48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e4a:	4313      	orrs	r3, r2
 8009e4c:	658b      	str	r3, [r1, #88]	; 0x58
        break;
 8009e4e:	e01b      	b.n	8009e88 <LPTIM_Disable+0x350>
        __HAL_RCC_LPTIM3_CONFIG(tmpclksource);
 8009e50:	4b21      	ldr	r3, [pc, #132]	; (8009ed8 <LPTIM_Disable+0x3a0>)
 8009e52:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009e54:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8009e58:	491f      	ldr	r1, [pc, #124]	; (8009ed8 <LPTIM_Disable+0x3a0>)
 8009e5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e5c:	4313      	orrs	r3, r2
 8009e5e:	658b      	str	r3, [r1, #88]	; 0x58
        break;
 8009e60:	e012      	b.n	8009e88 <LPTIM_Disable+0x350>
        __HAL_RCC_LPTIM4_CONFIG(tmpclksource);
 8009e62:	4b1d      	ldr	r3, [pc, #116]	; (8009ed8 <LPTIM_Disable+0x3a0>)
 8009e64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009e66:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8009e6a:	491b      	ldr	r1, [pc, #108]	; (8009ed8 <LPTIM_Disable+0x3a0>)
 8009e6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e6e:	4313      	orrs	r3, r2
 8009e70:	658b      	str	r3, [r1, #88]	; 0x58
        break;
 8009e72:	e009      	b.n	8009e88 <LPTIM_Disable+0x350>
        __HAL_RCC_LPTIM5_CONFIG(tmpclksource);
 8009e74:	4b18      	ldr	r3, [pc, #96]	; (8009ed8 <LPTIM_Disable+0x3a0>)
 8009e76:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009e78:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8009e7c:	4916      	ldr	r1, [pc, #88]	; (8009ed8 <LPTIM_Disable+0x3a0>)
 8009e7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e80:	4313      	orrs	r3, r2
 8009e82:	658b      	str	r3, [r1, #88]	; 0x58
        break;
 8009e84:	e000      	b.n	8009e88 <LPTIM_Disable+0x350>
        break;
 8009e86:	bf00      	nop
    }
  }

  /* Restore configuration registers (LPTIM should be disabled first) */
  hlptim->Instance->CR &= ~(LPTIM_CR_ENABLE);
 8009e88:	687b      	ldr	r3, [r7, #4]
 8009e8a:	681b      	ldr	r3, [r3, #0]
 8009e8c:	691a      	ldr	r2, [r3, #16]
 8009e8e:	687b      	ldr	r3, [r7, #4]
 8009e90:	681b      	ldr	r3, [r3, #0]
 8009e92:	f022 0201 	bic.w	r2, r2, #1
 8009e96:	611a      	str	r2, [r3, #16]
  hlptim->Instance->IER = tmpIER;
 8009e98:	687b      	ldr	r3, [r7, #4]
 8009e9a:	681b      	ldr	r3, [r3, #0]
 8009e9c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009e9e:	609a      	str	r2, [r3, #8]
  hlptim->Instance->CFGR = tmpCFGR;
 8009ea0:	687b      	ldr	r3, [r7, #4]
 8009ea2:	681b      	ldr	r3, [r3, #0]
 8009ea4:	6a3a      	ldr	r2, [r7, #32]
 8009ea6:	60da      	str	r2, [r3, #12]
  hlptim->Instance->CFGR2 = tmpCFGR2;
 8009ea8:	687b      	ldr	r3, [r7, #4]
 8009eaa:	681b      	ldr	r3, [r3, #0]
 8009eac:	697a      	ldr	r2, [r7, #20]
 8009eae:	625a      	str	r2, [r3, #36]	; 0x24
 8009eb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009eb2:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009eb4:	68bb      	ldr	r3, [r7, #8]
 8009eb6:	f383 8810 	msr	PRIMASK, r3
}
 8009eba:	bf00      	nop

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);
}
 8009ebc:	bf00      	nop
 8009ebe:	3730      	adds	r7, #48	; 0x30
 8009ec0:	46bd      	mov	sp, r7
 8009ec2:	bd80      	pop	{r7, pc}
 8009ec4:	58003000 	.word	0x58003000
 8009ec8:	58002c00 	.word	0x58002c00
 8009ecc:	58002800 	.word	0x58002800
 8009ed0:	40002400 	.word	0x40002400
 8009ed4:	58002400 	.word	0x58002400
 8009ed8:	58024400 	.word	0x58024400

08009edc <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 2, 3, ..31 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None.
  */
void HAL_PWR_EnableBkUpAccess (void)
{
 8009edc:	b480      	push	{r7}
 8009ede:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT (PWR->CR1, PWR_CR1_DBP);
 8009ee0:	4b05      	ldr	r3, [pc, #20]	; (8009ef8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8009ee2:	681b      	ldr	r3, [r3, #0]
 8009ee4:	4a04      	ldr	r2, [pc, #16]	; (8009ef8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8009ee6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009eea:	6013      	str	r3, [r2, #0]
}
 8009eec:	bf00      	nop
 8009eee:	46bd      	mov	sp, r7
 8009ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ef4:	4770      	bx	lr
 8009ef6:	bf00      	nop
 8009ef8:	58024800 	.word	0x58024800

08009efc <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8009efc:	b580      	push	{r7, lr}
 8009efe:	b084      	sub	sp, #16
 8009f00:	af00      	add	r7, sp, #0
 8009f02:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8009f04:	4b19      	ldr	r3, [pc, #100]	; (8009f6c <HAL_PWREx_ConfigSupply+0x70>)
 8009f06:	68db      	ldr	r3, [r3, #12]
 8009f08:	f003 0304 	and.w	r3, r3, #4
 8009f0c:	2b04      	cmp	r3, #4
 8009f0e:	d00a      	beq.n	8009f26 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8009f10:	4b16      	ldr	r3, [pc, #88]	; (8009f6c <HAL_PWREx_ConfigSupply+0x70>)
 8009f12:	68db      	ldr	r3, [r3, #12]
 8009f14:	f003 0307 	and.w	r3, r3, #7
 8009f18:	687a      	ldr	r2, [r7, #4]
 8009f1a:	429a      	cmp	r2, r3
 8009f1c:	d001      	beq.n	8009f22 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8009f1e:	2301      	movs	r3, #1
 8009f20:	e01f      	b.n	8009f62 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8009f22:	2300      	movs	r3, #0
 8009f24:	e01d      	b.n	8009f62 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8009f26:	4b11      	ldr	r3, [pc, #68]	; (8009f6c <HAL_PWREx_ConfigSupply+0x70>)
 8009f28:	68db      	ldr	r3, [r3, #12]
 8009f2a:	f023 0207 	bic.w	r2, r3, #7
 8009f2e:	490f      	ldr	r1, [pc, #60]	; (8009f6c <HAL_PWREx_ConfigSupply+0x70>)
 8009f30:	687b      	ldr	r3, [r7, #4]
 8009f32:	4313      	orrs	r3, r2
 8009f34:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8009f36:	f7fa f9bf 	bl	80042b8 <HAL_GetTick>
 8009f3a:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8009f3c:	e009      	b.n	8009f52 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8009f3e:	f7fa f9bb 	bl	80042b8 <HAL_GetTick>
 8009f42:	4602      	mov	r2, r0
 8009f44:	68fb      	ldr	r3, [r7, #12]
 8009f46:	1ad3      	subs	r3, r2, r3
 8009f48:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009f4c:	d901      	bls.n	8009f52 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8009f4e:	2301      	movs	r3, #1
 8009f50:	e007      	b.n	8009f62 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8009f52:	4b06      	ldr	r3, [pc, #24]	; (8009f6c <HAL_PWREx_ConfigSupply+0x70>)
 8009f54:	685b      	ldr	r3, [r3, #4]
 8009f56:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009f5a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009f5e:	d1ee      	bne.n	8009f3e <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8009f60:	2300      	movs	r3, #0
}
 8009f62:	4618      	mov	r0, r3
 8009f64:	3710      	adds	r7, #16
 8009f66:	46bd      	mov	sp, r7
 8009f68:	bd80      	pop	{r7, pc}
 8009f6a:	bf00      	nop
 8009f6c:	58024800 	.word	0x58024800

08009f70 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8009f70:	b580      	push	{r7, lr}
 8009f72:	b08c      	sub	sp, #48	; 0x30
 8009f74:	af00      	add	r7, sp, #0
 8009f76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8009f78:	687b      	ldr	r3, [r7, #4]
 8009f7a:	2b00      	cmp	r3, #0
 8009f7c:	d102      	bne.n	8009f84 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8009f7e:	2301      	movs	r3, #1
 8009f80:	f000 bc48 	b.w	800a814 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8009f84:	687b      	ldr	r3, [r7, #4]
 8009f86:	681b      	ldr	r3, [r3, #0]
 8009f88:	f003 0301 	and.w	r3, r3, #1
 8009f8c:	2b00      	cmp	r3, #0
 8009f8e:	f000 8088 	beq.w	800a0a2 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8009f92:	4b99      	ldr	r3, [pc, #612]	; (800a1f8 <HAL_RCC_OscConfig+0x288>)
 8009f94:	691b      	ldr	r3, [r3, #16]
 8009f96:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009f9a:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8009f9c:	4b96      	ldr	r3, [pc, #600]	; (800a1f8 <HAL_RCC_OscConfig+0x288>)
 8009f9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009fa0:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8009fa2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009fa4:	2b10      	cmp	r3, #16
 8009fa6:	d007      	beq.n	8009fb8 <HAL_RCC_OscConfig+0x48>
 8009fa8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009faa:	2b18      	cmp	r3, #24
 8009fac:	d111      	bne.n	8009fd2 <HAL_RCC_OscConfig+0x62>
 8009fae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009fb0:	f003 0303 	and.w	r3, r3, #3
 8009fb4:	2b02      	cmp	r3, #2
 8009fb6:	d10c      	bne.n	8009fd2 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009fb8:	4b8f      	ldr	r3, [pc, #572]	; (800a1f8 <HAL_RCC_OscConfig+0x288>)
 8009fba:	681b      	ldr	r3, [r3, #0]
 8009fbc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009fc0:	2b00      	cmp	r3, #0
 8009fc2:	d06d      	beq.n	800a0a0 <HAL_RCC_OscConfig+0x130>
 8009fc4:	687b      	ldr	r3, [r7, #4]
 8009fc6:	685b      	ldr	r3, [r3, #4]
 8009fc8:	2b00      	cmp	r3, #0
 8009fca:	d169      	bne.n	800a0a0 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8009fcc:	2301      	movs	r3, #1
 8009fce:	f000 bc21 	b.w	800a814 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8009fd2:	687b      	ldr	r3, [r7, #4]
 8009fd4:	685b      	ldr	r3, [r3, #4]
 8009fd6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009fda:	d106      	bne.n	8009fea <HAL_RCC_OscConfig+0x7a>
 8009fdc:	4b86      	ldr	r3, [pc, #536]	; (800a1f8 <HAL_RCC_OscConfig+0x288>)
 8009fde:	681b      	ldr	r3, [r3, #0]
 8009fe0:	4a85      	ldr	r2, [pc, #532]	; (800a1f8 <HAL_RCC_OscConfig+0x288>)
 8009fe2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009fe6:	6013      	str	r3, [r2, #0]
 8009fe8:	e02e      	b.n	800a048 <HAL_RCC_OscConfig+0xd8>
 8009fea:	687b      	ldr	r3, [r7, #4]
 8009fec:	685b      	ldr	r3, [r3, #4]
 8009fee:	2b00      	cmp	r3, #0
 8009ff0:	d10c      	bne.n	800a00c <HAL_RCC_OscConfig+0x9c>
 8009ff2:	4b81      	ldr	r3, [pc, #516]	; (800a1f8 <HAL_RCC_OscConfig+0x288>)
 8009ff4:	681b      	ldr	r3, [r3, #0]
 8009ff6:	4a80      	ldr	r2, [pc, #512]	; (800a1f8 <HAL_RCC_OscConfig+0x288>)
 8009ff8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009ffc:	6013      	str	r3, [r2, #0]
 8009ffe:	4b7e      	ldr	r3, [pc, #504]	; (800a1f8 <HAL_RCC_OscConfig+0x288>)
 800a000:	681b      	ldr	r3, [r3, #0]
 800a002:	4a7d      	ldr	r2, [pc, #500]	; (800a1f8 <HAL_RCC_OscConfig+0x288>)
 800a004:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800a008:	6013      	str	r3, [r2, #0]
 800a00a:	e01d      	b.n	800a048 <HAL_RCC_OscConfig+0xd8>
 800a00c:	687b      	ldr	r3, [r7, #4]
 800a00e:	685b      	ldr	r3, [r3, #4]
 800a010:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800a014:	d10c      	bne.n	800a030 <HAL_RCC_OscConfig+0xc0>
 800a016:	4b78      	ldr	r3, [pc, #480]	; (800a1f8 <HAL_RCC_OscConfig+0x288>)
 800a018:	681b      	ldr	r3, [r3, #0]
 800a01a:	4a77      	ldr	r2, [pc, #476]	; (800a1f8 <HAL_RCC_OscConfig+0x288>)
 800a01c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800a020:	6013      	str	r3, [r2, #0]
 800a022:	4b75      	ldr	r3, [pc, #468]	; (800a1f8 <HAL_RCC_OscConfig+0x288>)
 800a024:	681b      	ldr	r3, [r3, #0]
 800a026:	4a74      	ldr	r2, [pc, #464]	; (800a1f8 <HAL_RCC_OscConfig+0x288>)
 800a028:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a02c:	6013      	str	r3, [r2, #0]
 800a02e:	e00b      	b.n	800a048 <HAL_RCC_OscConfig+0xd8>
 800a030:	4b71      	ldr	r3, [pc, #452]	; (800a1f8 <HAL_RCC_OscConfig+0x288>)
 800a032:	681b      	ldr	r3, [r3, #0]
 800a034:	4a70      	ldr	r2, [pc, #448]	; (800a1f8 <HAL_RCC_OscConfig+0x288>)
 800a036:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a03a:	6013      	str	r3, [r2, #0]
 800a03c:	4b6e      	ldr	r3, [pc, #440]	; (800a1f8 <HAL_RCC_OscConfig+0x288>)
 800a03e:	681b      	ldr	r3, [r3, #0]
 800a040:	4a6d      	ldr	r2, [pc, #436]	; (800a1f8 <HAL_RCC_OscConfig+0x288>)
 800a042:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800a046:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800a048:	687b      	ldr	r3, [r7, #4]
 800a04a:	685b      	ldr	r3, [r3, #4]
 800a04c:	2b00      	cmp	r3, #0
 800a04e:	d013      	beq.n	800a078 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a050:	f7fa f932 	bl	80042b8 <HAL_GetTick>
 800a054:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800a056:	e008      	b.n	800a06a <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800a058:	f7fa f92e 	bl	80042b8 <HAL_GetTick>
 800a05c:	4602      	mov	r2, r0
 800a05e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a060:	1ad3      	subs	r3, r2, r3
 800a062:	2b64      	cmp	r3, #100	; 0x64
 800a064:	d901      	bls.n	800a06a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800a066:	2303      	movs	r3, #3
 800a068:	e3d4      	b.n	800a814 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800a06a:	4b63      	ldr	r3, [pc, #396]	; (800a1f8 <HAL_RCC_OscConfig+0x288>)
 800a06c:	681b      	ldr	r3, [r3, #0]
 800a06e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a072:	2b00      	cmp	r3, #0
 800a074:	d0f0      	beq.n	800a058 <HAL_RCC_OscConfig+0xe8>
 800a076:	e014      	b.n	800a0a2 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a078:	f7fa f91e 	bl	80042b8 <HAL_GetTick>
 800a07c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800a07e:	e008      	b.n	800a092 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800a080:	f7fa f91a 	bl	80042b8 <HAL_GetTick>
 800a084:	4602      	mov	r2, r0
 800a086:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a088:	1ad3      	subs	r3, r2, r3
 800a08a:	2b64      	cmp	r3, #100	; 0x64
 800a08c:	d901      	bls.n	800a092 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800a08e:	2303      	movs	r3, #3
 800a090:	e3c0      	b.n	800a814 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800a092:	4b59      	ldr	r3, [pc, #356]	; (800a1f8 <HAL_RCC_OscConfig+0x288>)
 800a094:	681b      	ldr	r3, [r3, #0]
 800a096:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a09a:	2b00      	cmp	r3, #0
 800a09c:	d1f0      	bne.n	800a080 <HAL_RCC_OscConfig+0x110>
 800a09e:	e000      	b.n	800a0a2 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a0a0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800a0a2:	687b      	ldr	r3, [r7, #4]
 800a0a4:	681b      	ldr	r3, [r3, #0]
 800a0a6:	f003 0302 	and.w	r3, r3, #2
 800a0aa:	2b00      	cmp	r3, #0
 800a0ac:	f000 80ca 	beq.w	800a244 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800a0b0:	4b51      	ldr	r3, [pc, #324]	; (800a1f8 <HAL_RCC_OscConfig+0x288>)
 800a0b2:	691b      	ldr	r3, [r3, #16]
 800a0b4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a0b8:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800a0ba:	4b4f      	ldr	r3, [pc, #316]	; (800a1f8 <HAL_RCC_OscConfig+0x288>)
 800a0bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a0be:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800a0c0:	6a3b      	ldr	r3, [r7, #32]
 800a0c2:	2b00      	cmp	r3, #0
 800a0c4:	d007      	beq.n	800a0d6 <HAL_RCC_OscConfig+0x166>
 800a0c6:	6a3b      	ldr	r3, [r7, #32]
 800a0c8:	2b18      	cmp	r3, #24
 800a0ca:	d156      	bne.n	800a17a <HAL_RCC_OscConfig+0x20a>
 800a0cc:	69fb      	ldr	r3, [r7, #28]
 800a0ce:	f003 0303 	and.w	r3, r3, #3
 800a0d2:	2b00      	cmp	r3, #0
 800a0d4:	d151      	bne.n	800a17a <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800a0d6:	4b48      	ldr	r3, [pc, #288]	; (800a1f8 <HAL_RCC_OscConfig+0x288>)
 800a0d8:	681b      	ldr	r3, [r3, #0]
 800a0da:	f003 0304 	and.w	r3, r3, #4
 800a0de:	2b00      	cmp	r3, #0
 800a0e0:	d005      	beq.n	800a0ee <HAL_RCC_OscConfig+0x17e>
 800a0e2:	687b      	ldr	r3, [r7, #4]
 800a0e4:	68db      	ldr	r3, [r3, #12]
 800a0e6:	2b00      	cmp	r3, #0
 800a0e8:	d101      	bne.n	800a0ee <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 800a0ea:	2301      	movs	r3, #1
 800a0ec:	e392      	b.n	800a814 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800a0ee:	4b42      	ldr	r3, [pc, #264]	; (800a1f8 <HAL_RCC_OscConfig+0x288>)
 800a0f0:	681b      	ldr	r3, [r3, #0]
 800a0f2:	f023 0219 	bic.w	r2, r3, #25
 800a0f6:	687b      	ldr	r3, [r7, #4]
 800a0f8:	68db      	ldr	r3, [r3, #12]
 800a0fa:	493f      	ldr	r1, [pc, #252]	; (800a1f8 <HAL_RCC_OscConfig+0x288>)
 800a0fc:	4313      	orrs	r3, r2
 800a0fe:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a100:	f7fa f8da 	bl	80042b8 <HAL_GetTick>
 800a104:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800a106:	e008      	b.n	800a11a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a108:	f7fa f8d6 	bl	80042b8 <HAL_GetTick>
 800a10c:	4602      	mov	r2, r0
 800a10e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a110:	1ad3      	subs	r3, r2, r3
 800a112:	2b02      	cmp	r3, #2
 800a114:	d901      	bls.n	800a11a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800a116:	2303      	movs	r3, #3
 800a118:	e37c      	b.n	800a814 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800a11a:	4b37      	ldr	r3, [pc, #220]	; (800a1f8 <HAL_RCC_OscConfig+0x288>)
 800a11c:	681b      	ldr	r3, [r3, #0]
 800a11e:	f003 0304 	and.w	r3, r3, #4
 800a122:	2b00      	cmp	r3, #0
 800a124:	d0f0      	beq.n	800a108 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a126:	f7fa f8f7 	bl	8004318 <HAL_GetREVID>
 800a12a:	4603      	mov	r3, r0
 800a12c:	f241 0203 	movw	r2, #4099	; 0x1003
 800a130:	4293      	cmp	r3, r2
 800a132:	d817      	bhi.n	800a164 <HAL_RCC_OscConfig+0x1f4>
 800a134:	687b      	ldr	r3, [r7, #4]
 800a136:	691b      	ldr	r3, [r3, #16]
 800a138:	2b40      	cmp	r3, #64	; 0x40
 800a13a:	d108      	bne.n	800a14e <HAL_RCC_OscConfig+0x1de>
 800a13c:	4b2e      	ldr	r3, [pc, #184]	; (800a1f8 <HAL_RCC_OscConfig+0x288>)
 800a13e:	685b      	ldr	r3, [r3, #4]
 800a140:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800a144:	4a2c      	ldr	r2, [pc, #176]	; (800a1f8 <HAL_RCC_OscConfig+0x288>)
 800a146:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a14a:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800a14c:	e07a      	b.n	800a244 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a14e:	4b2a      	ldr	r3, [pc, #168]	; (800a1f8 <HAL_RCC_OscConfig+0x288>)
 800a150:	685b      	ldr	r3, [r3, #4]
 800a152:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800a156:	687b      	ldr	r3, [r7, #4]
 800a158:	691b      	ldr	r3, [r3, #16]
 800a15a:	031b      	lsls	r3, r3, #12
 800a15c:	4926      	ldr	r1, [pc, #152]	; (800a1f8 <HAL_RCC_OscConfig+0x288>)
 800a15e:	4313      	orrs	r3, r2
 800a160:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800a162:	e06f      	b.n	800a244 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a164:	4b24      	ldr	r3, [pc, #144]	; (800a1f8 <HAL_RCC_OscConfig+0x288>)
 800a166:	685b      	ldr	r3, [r3, #4]
 800a168:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800a16c:	687b      	ldr	r3, [r7, #4]
 800a16e:	691b      	ldr	r3, [r3, #16]
 800a170:	061b      	lsls	r3, r3, #24
 800a172:	4921      	ldr	r1, [pc, #132]	; (800a1f8 <HAL_RCC_OscConfig+0x288>)
 800a174:	4313      	orrs	r3, r2
 800a176:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800a178:	e064      	b.n	800a244 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800a17a:	687b      	ldr	r3, [r7, #4]
 800a17c:	68db      	ldr	r3, [r3, #12]
 800a17e:	2b00      	cmp	r3, #0
 800a180:	d047      	beq.n	800a212 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800a182:	4b1d      	ldr	r3, [pc, #116]	; (800a1f8 <HAL_RCC_OscConfig+0x288>)
 800a184:	681b      	ldr	r3, [r3, #0]
 800a186:	f023 0219 	bic.w	r2, r3, #25
 800a18a:	687b      	ldr	r3, [r7, #4]
 800a18c:	68db      	ldr	r3, [r3, #12]
 800a18e:	491a      	ldr	r1, [pc, #104]	; (800a1f8 <HAL_RCC_OscConfig+0x288>)
 800a190:	4313      	orrs	r3, r2
 800a192:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a194:	f7fa f890 	bl	80042b8 <HAL_GetTick>
 800a198:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800a19a:	e008      	b.n	800a1ae <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a19c:	f7fa f88c 	bl	80042b8 <HAL_GetTick>
 800a1a0:	4602      	mov	r2, r0
 800a1a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1a4:	1ad3      	subs	r3, r2, r3
 800a1a6:	2b02      	cmp	r3, #2
 800a1a8:	d901      	bls.n	800a1ae <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 800a1aa:	2303      	movs	r3, #3
 800a1ac:	e332      	b.n	800a814 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800a1ae:	4b12      	ldr	r3, [pc, #72]	; (800a1f8 <HAL_RCC_OscConfig+0x288>)
 800a1b0:	681b      	ldr	r3, [r3, #0]
 800a1b2:	f003 0304 	and.w	r3, r3, #4
 800a1b6:	2b00      	cmp	r3, #0
 800a1b8:	d0f0      	beq.n	800a19c <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a1ba:	f7fa f8ad 	bl	8004318 <HAL_GetREVID>
 800a1be:	4603      	mov	r3, r0
 800a1c0:	f241 0203 	movw	r2, #4099	; 0x1003
 800a1c4:	4293      	cmp	r3, r2
 800a1c6:	d819      	bhi.n	800a1fc <HAL_RCC_OscConfig+0x28c>
 800a1c8:	687b      	ldr	r3, [r7, #4]
 800a1ca:	691b      	ldr	r3, [r3, #16]
 800a1cc:	2b40      	cmp	r3, #64	; 0x40
 800a1ce:	d108      	bne.n	800a1e2 <HAL_RCC_OscConfig+0x272>
 800a1d0:	4b09      	ldr	r3, [pc, #36]	; (800a1f8 <HAL_RCC_OscConfig+0x288>)
 800a1d2:	685b      	ldr	r3, [r3, #4]
 800a1d4:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800a1d8:	4a07      	ldr	r2, [pc, #28]	; (800a1f8 <HAL_RCC_OscConfig+0x288>)
 800a1da:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a1de:	6053      	str	r3, [r2, #4]
 800a1e0:	e030      	b.n	800a244 <HAL_RCC_OscConfig+0x2d4>
 800a1e2:	4b05      	ldr	r3, [pc, #20]	; (800a1f8 <HAL_RCC_OscConfig+0x288>)
 800a1e4:	685b      	ldr	r3, [r3, #4]
 800a1e6:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800a1ea:	687b      	ldr	r3, [r7, #4]
 800a1ec:	691b      	ldr	r3, [r3, #16]
 800a1ee:	031b      	lsls	r3, r3, #12
 800a1f0:	4901      	ldr	r1, [pc, #4]	; (800a1f8 <HAL_RCC_OscConfig+0x288>)
 800a1f2:	4313      	orrs	r3, r2
 800a1f4:	604b      	str	r3, [r1, #4]
 800a1f6:	e025      	b.n	800a244 <HAL_RCC_OscConfig+0x2d4>
 800a1f8:	58024400 	.word	0x58024400
 800a1fc:	4b9a      	ldr	r3, [pc, #616]	; (800a468 <HAL_RCC_OscConfig+0x4f8>)
 800a1fe:	685b      	ldr	r3, [r3, #4]
 800a200:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800a204:	687b      	ldr	r3, [r7, #4]
 800a206:	691b      	ldr	r3, [r3, #16]
 800a208:	061b      	lsls	r3, r3, #24
 800a20a:	4997      	ldr	r1, [pc, #604]	; (800a468 <HAL_RCC_OscConfig+0x4f8>)
 800a20c:	4313      	orrs	r3, r2
 800a20e:	604b      	str	r3, [r1, #4]
 800a210:	e018      	b.n	800a244 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800a212:	4b95      	ldr	r3, [pc, #596]	; (800a468 <HAL_RCC_OscConfig+0x4f8>)
 800a214:	681b      	ldr	r3, [r3, #0]
 800a216:	4a94      	ldr	r2, [pc, #592]	; (800a468 <HAL_RCC_OscConfig+0x4f8>)
 800a218:	f023 0301 	bic.w	r3, r3, #1
 800a21c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a21e:	f7fa f84b 	bl	80042b8 <HAL_GetTick>
 800a222:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800a224:	e008      	b.n	800a238 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a226:	f7fa f847 	bl	80042b8 <HAL_GetTick>
 800a22a:	4602      	mov	r2, r0
 800a22c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a22e:	1ad3      	subs	r3, r2, r3
 800a230:	2b02      	cmp	r3, #2
 800a232:	d901      	bls.n	800a238 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 800a234:	2303      	movs	r3, #3
 800a236:	e2ed      	b.n	800a814 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800a238:	4b8b      	ldr	r3, [pc, #556]	; (800a468 <HAL_RCC_OscConfig+0x4f8>)
 800a23a:	681b      	ldr	r3, [r3, #0]
 800a23c:	f003 0304 	and.w	r3, r3, #4
 800a240:	2b00      	cmp	r3, #0
 800a242:	d1f0      	bne.n	800a226 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800a244:	687b      	ldr	r3, [r7, #4]
 800a246:	681b      	ldr	r3, [r3, #0]
 800a248:	f003 0310 	and.w	r3, r3, #16
 800a24c:	2b00      	cmp	r3, #0
 800a24e:	f000 80a9 	beq.w	800a3a4 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800a252:	4b85      	ldr	r3, [pc, #532]	; (800a468 <HAL_RCC_OscConfig+0x4f8>)
 800a254:	691b      	ldr	r3, [r3, #16]
 800a256:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a25a:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800a25c:	4b82      	ldr	r3, [pc, #520]	; (800a468 <HAL_RCC_OscConfig+0x4f8>)
 800a25e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a260:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800a262:	69bb      	ldr	r3, [r7, #24]
 800a264:	2b08      	cmp	r3, #8
 800a266:	d007      	beq.n	800a278 <HAL_RCC_OscConfig+0x308>
 800a268:	69bb      	ldr	r3, [r7, #24]
 800a26a:	2b18      	cmp	r3, #24
 800a26c:	d13a      	bne.n	800a2e4 <HAL_RCC_OscConfig+0x374>
 800a26e:	697b      	ldr	r3, [r7, #20]
 800a270:	f003 0303 	and.w	r3, r3, #3
 800a274:	2b01      	cmp	r3, #1
 800a276:	d135      	bne.n	800a2e4 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800a278:	4b7b      	ldr	r3, [pc, #492]	; (800a468 <HAL_RCC_OscConfig+0x4f8>)
 800a27a:	681b      	ldr	r3, [r3, #0]
 800a27c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a280:	2b00      	cmp	r3, #0
 800a282:	d005      	beq.n	800a290 <HAL_RCC_OscConfig+0x320>
 800a284:	687b      	ldr	r3, [r7, #4]
 800a286:	69db      	ldr	r3, [r3, #28]
 800a288:	2b80      	cmp	r3, #128	; 0x80
 800a28a:	d001      	beq.n	800a290 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 800a28c:	2301      	movs	r3, #1
 800a28e:	e2c1      	b.n	800a814 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800a290:	f7fa f842 	bl	8004318 <HAL_GetREVID>
 800a294:	4603      	mov	r3, r0
 800a296:	f241 0203 	movw	r2, #4099	; 0x1003
 800a29a:	4293      	cmp	r3, r2
 800a29c:	d817      	bhi.n	800a2ce <HAL_RCC_OscConfig+0x35e>
 800a29e:	687b      	ldr	r3, [r7, #4]
 800a2a0:	6a1b      	ldr	r3, [r3, #32]
 800a2a2:	2b20      	cmp	r3, #32
 800a2a4:	d108      	bne.n	800a2b8 <HAL_RCC_OscConfig+0x348>
 800a2a6:	4b70      	ldr	r3, [pc, #448]	; (800a468 <HAL_RCC_OscConfig+0x4f8>)
 800a2a8:	685b      	ldr	r3, [r3, #4]
 800a2aa:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800a2ae:	4a6e      	ldr	r2, [pc, #440]	; (800a468 <HAL_RCC_OscConfig+0x4f8>)
 800a2b0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a2b4:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800a2b6:	e075      	b.n	800a3a4 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800a2b8:	4b6b      	ldr	r3, [pc, #428]	; (800a468 <HAL_RCC_OscConfig+0x4f8>)
 800a2ba:	685b      	ldr	r3, [r3, #4]
 800a2bc:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800a2c0:	687b      	ldr	r3, [r7, #4]
 800a2c2:	6a1b      	ldr	r3, [r3, #32]
 800a2c4:	069b      	lsls	r3, r3, #26
 800a2c6:	4968      	ldr	r1, [pc, #416]	; (800a468 <HAL_RCC_OscConfig+0x4f8>)
 800a2c8:	4313      	orrs	r3, r2
 800a2ca:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800a2cc:	e06a      	b.n	800a3a4 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800a2ce:	4b66      	ldr	r3, [pc, #408]	; (800a468 <HAL_RCC_OscConfig+0x4f8>)
 800a2d0:	68db      	ldr	r3, [r3, #12]
 800a2d2:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800a2d6:	687b      	ldr	r3, [r7, #4]
 800a2d8:	6a1b      	ldr	r3, [r3, #32]
 800a2da:	061b      	lsls	r3, r3, #24
 800a2dc:	4962      	ldr	r1, [pc, #392]	; (800a468 <HAL_RCC_OscConfig+0x4f8>)
 800a2de:	4313      	orrs	r3, r2
 800a2e0:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800a2e2:	e05f      	b.n	800a3a4 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 800a2e4:	687b      	ldr	r3, [r7, #4]
 800a2e6:	69db      	ldr	r3, [r3, #28]
 800a2e8:	2b00      	cmp	r3, #0
 800a2ea:	d042      	beq.n	800a372 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800a2ec:	4b5e      	ldr	r3, [pc, #376]	; (800a468 <HAL_RCC_OscConfig+0x4f8>)
 800a2ee:	681b      	ldr	r3, [r3, #0]
 800a2f0:	4a5d      	ldr	r2, [pc, #372]	; (800a468 <HAL_RCC_OscConfig+0x4f8>)
 800a2f2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a2f6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a2f8:	f7f9 ffde 	bl	80042b8 <HAL_GetTick>
 800a2fc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800a2fe:	e008      	b.n	800a312 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800a300:	f7f9 ffda 	bl	80042b8 <HAL_GetTick>
 800a304:	4602      	mov	r2, r0
 800a306:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a308:	1ad3      	subs	r3, r2, r3
 800a30a:	2b02      	cmp	r3, #2
 800a30c:	d901      	bls.n	800a312 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 800a30e:	2303      	movs	r3, #3
 800a310:	e280      	b.n	800a814 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800a312:	4b55      	ldr	r3, [pc, #340]	; (800a468 <HAL_RCC_OscConfig+0x4f8>)
 800a314:	681b      	ldr	r3, [r3, #0]
 800a316:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a31a:	2b00      	cmp	r3, #0
 800a31c:	d0f0      	beq.n	800a300 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800a31e:	f7f9 fffb 	bl	8004318 <HAL_GetREVID>
 800a322:	4603      	mov	r3, r0
 800a324:	f241 0203 	movw	r2, #4099	; 0x1003
 800a328:	4293      	cmp	r3, r2
 800a32a:	d817      	bhi.n	800a35c <HAL_RCC_OscConfig+0x3ec>
 800a32c:	687b      	ldr	r3, [r7, #4]
 800a32e:	6a1b      	ldr	r3, [r3, #32]
 800a330:	2b20      	cmp	r3, #32
 800a332:	d108      	bne.n	800a346 <HAL_RCC_OscConfig+0x3d6>
 800a334:	4b4c      	ldr	r3, [pc, #304]	; (800a468 <HAL_RCC_OscConfig+0x4f8>)
 800a336:	685b      	ldr	r3, [r3, #4]
 800a338:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800a33c:	4a4a      	ldr	r2, [pc, #296]	; (800a468 <HAL_RCC_OscConfig+0x4f8>)
 800a33e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a342:	6053      	str	r3, [r2, #4]
 800a344:	e02e      	b.n	800a3a4 <HAL_RCC_OscConfig+0x434>
 800a346:	4b48      	ldr	r3, [pc, #288]	; (800a468 <HAL_RCC_OscConfig+0x4f8>)
 800a348:	685b      	ldr	r3, [r3, #4]
 800a34a:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800a34e:	687b      	ldr	r3, [r7, #4]
 800a350:	6a1b      	ldr	r3, [r3, #32]
 800a352:	069b      	lsls	r3, r3, #26
 800a354:	4944      	ldr	r1, [pc, #272]	; (800a468 <HAL_RCC_OscConfig+0x4f8>)
 800a356:	4313      	orrs	r3, r2
 800a358:	604b      	str	r3, [r1, #4]
 800a35a:	e023      	b.n	800a3a4 <HAL_RCC_OscConfig+0x434>
 800a35c:	4b42      	ldr	r3, [pc, #264]	; (800a468 <HAL_RCC_OscConfig+0x4f8>)
 800a35e:	68db      	ldr	r3, [r3, #12]
 800a360:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800a364:	687b      	ldr	r3, [r7, #4]
 800a366:	6a1b      	ldr	r3, [r3, #32]
 800a368:	061b      	lsls	r3, r3, #24
 800a36a:	493f      	ldr	r1, [pc, #252]	; (800a468 <HAL_RCC_OscConfig+0x4f8>)
 800a36c:	4313      	orrs	r3, r2
 800a36e:	60cb      	str	r3, [r1, #12]
 800a370:	e018      	b.n	800a3a4 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800a372:	4b3d      	ldr	r3, [pc, #244]	; (800a468 <HAL_RCC_OscConfig+0x4f8>)
 800a374:	681b      	ldr	r3, [r3, #0]
 800a376:	4a3c      	ldr	r2, [pc, #240]	; (800a468 <HAL_RCC_OscConfig+0x4f8>)
 800a378:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a37c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a37e:	f7f9 ff9b 	bl	80042b8 <HAL_GetTick>
 800a382:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800a384:	e008      	b.n	800a398 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800a386:	f7f9 ff97 	bl	80042b8 <HAL_GetTick>
 800a38a:	4602      	mov	r2, r0
 800a38c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a38e:	1ad3      	subs	r3, r2, r3
 800a390:	2b02      	cmp	r3, #2
 800a392:	d901      	bls.n	800a398 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800a394:	2303      	movs	r3, #3
 800a396:	e23d      	b.n	800a814 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800a398:	4b33      	ldr	r3, [pc, #204]	; (800a468 <HAL_RCC_OscConfig+0x4f8>)
 800a39a:	681b      	ldr	r3, [r3, #0]
 800a39c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a3a0:	2b00      	cmp	r3, #0
 800a3a2:	d1f0      	bne.n	800a386 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800a3a4:	687b      	ldr	r3, [r7, #4]
 800a3a6:	681b      	ldr	r3, [r3, #0]
 800a3a8:	f003 0308 	and.w	r3, r3, #8
 800a3ac:	2b00      	cmp	r3, #0
 800a3ae:	d036      	beq.n	800a41e <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800a3b0:	687b      	ldr	r3, [r7, #4]
 800a3b2:	695b      	ldr	r3, [r3, #20]
 800a3b4:	2b00      	cmp	r3, #0
 800a3b6:	d019      	beq.n	800a3ec <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800a3b8:	4b2b      	ldr	r3, [pc, #172]	; (800a468 <HAL_RCC_OscConfig+0x4f8>)
 800a3ba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a3bc:	4a2a      	ldr	r2, [pc, #168]	; (800a468 <HAL_RCC_OscConfig+0x4f8>)
 800a3be:	f043 0301 	orr.w	r3, r3, #1
 800a3c2:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a3c4:	f7f9 ff78 	bl	80042b8 <HAL_GetTick>
 800a3c8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800a3ca:	e008      	b.n	800a3de <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800a3cc:	f7f9 ff74 	bl	80042b8 <HAL_GetTick>
 800a3d0:	4602      	mov	r2, r0
 800a3d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a3d4:	1ad3      	subs	r3, r2, r3
 800a3d6:	2b02      	cmp	r3, #2
 800a3d8:	d901      	bls.n	800a3de <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 800a3da:	2303      	movs	r3, #3
 800a3dc:	e21a      	b.n	800a814 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800a3de:	4b22      	ldr	r3, [pc, #136]	; (800a468 <HAL_RCC_OscConfig+0x4f8>)
 800a3e0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a3e2:	f003 0302 	and.w	r3, r3, #2
 800a3e6:	2b00      	cmp	r3, #0
 800a3e8:	d0f0      	beq.n	800a3cc <HAL_RCC_OscConfig+0x45c>
 800a3ea:	e018      	b.n	800a41e <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800a3ec:	4b1e      	ldr	r3, [pc, #120]	; (800a468 <HAL_RCC_OscConfig+0x4f8>)
 800a3ee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a3f0:	4a1d      	ldr	r2, [pc, #116]	; (800a468 <HAL_RCC_OscConfig+0x4f8>)
 800a3f2:	f023 0301 	bic.w	r3, r3, #1
 800a3f6:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a3f8:	f7f9 ff5e 	bl	80042b8 <HAL_GetTick>
 800a3fc:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800a3fe:	e008      	b.n	800a412 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800a400:	f7f9 ff5a 	bl	80042b8 <HAL_GetTick>
 800a404:	4602      	mov	r2, r0
 800a406:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a408:	1ad3      	subs	r3, r2, r3
 800a40a:	2b02      	cmp	r3, #2
 800a40c:	d901      	bls.n	800a412 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 800a40e:	2303      	movs	r3, #3
 800a410:	e200      	b.n	800a814 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800a412:	4b15      	ldr	r3, [pc, #84]	; (800a468 <HAL_RCC_OscConfig+0x4f8>)
 800a414:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a416:	f003 0302 	and.w	r3, r3, #2
 800a41a:	2b00      	cmp	r3, #0
 800a41c:	d1f0      	bne.n	800a400 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800a41e:	687b      	ldr	r3, [r7, #4]
 800a420:	681b      	ldr	r3, [r3, #0]
 800a422:	f003 0320 	and.w	r3, r3, #32
 800a426:	2b00      	cmp	r3, #0
 800a428:	d039      	beq.n	800a49e <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 800a42a:	687b      	ldr	r3, [r7, #4]
 800a42c:	699b      	ldr	r3, [r3, #24]
 800a42e:	2b00      	cmp	r3, #0
 800a430:	d01c      	beq.n	800a46c <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800a432:	4b0d      	ldr	r3, [pc, #52]	; (800a468 <HAL_RCC_OscConfig+0x4f8>)
 800a434:	681b      	ldr	r3, [r3, #0]
 800a436:	4a0c      	ldr	r2, [pc, #48]	; (800a468 <HAL_RCC_OscConfig+0x4f8>)
 800a438:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800a43c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800a43e:	f7f9 ff3b 	bl	80042b8 <HAL_GetTick>
 800a442:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800a444:	e008      	b.n	800a458 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800a446:	f7f9 ff37 	bl	80042b8 <HAL_GetTick>
 800a44a:	4602      	mov	r2, r0
 800a44c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a44e:	1ad3      	subs	r3, r2, r3
 800a450:	2b02      	cmp	r3, #2
 800a452:	d901      	bls.n	800a458 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 800a454:	2303      	movs	r3, #3
 800a456:	e1dd      	b.n	800a814 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800a458:	4b03      	ldr	r3, [pc, #12]	; (800a468 <HAL_RCC_OscConfig+0x4f8>)
 800a45a:	681b      	ldr	r3, [r3, #0]
 800a45c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800a460:	2b00      	cmp	r3, #0
 800a462:	d0f0      	beq.n	800a446 <HAL_RCC_OscConfig+0x4d6>
 800a464:	e01b      	b.n	800a49e <HAL_RCC_OscConfig+0x52e>
 800a466:	bf00      	nop
 800a468:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800a46c:	4b9b      	ldr	r3, [pc, #620]	; (800a6dc <HAL_RCC_OscConfig+0x76c>)
 800a46e:	681b      	ldr	r3, [r3, #0]
 800a470:	4a9a      	ldr	r2, [pc, #616]	; (800a6dc <HAL_RCC_OscConfig+0x76c>)
 800a472:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a476:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800a478:	f7f9 ff1e 	bl	80042b8 <HAL_GetTick>
 800a47c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800a47e:	e008      	b.n	800a492 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800a480:	f7f9 ff1a 	bl	80042b8 <HAL_GetTick>
 800a484:	4602      	mov	r2, r0
 800a486:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a488:	1ad3      	subs	r3, r2, r3
 800a48a:	2b02      	cmp	r3, #2
 800a48c:	d901      	bls.n	800a492 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 800a48e:	2303      	movs	r3, #3
 800a490:	e1c0      	b.n	800a814 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800a492:	4b92      	ldr	r3, [pc, #584]	; (800a6dc <HAL_RCC_OscConfig+0x76c>)
 800a494:	681b      	ldr	r3, [r3, #0]
 800a496:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800a49a:	2b00      	cmp	r3, #0
 800a49c:	d1f0      	bne.n	800a480 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800a49e:	687b      	ldr	r3, [r7, #4]
 800a4a0:	681b      	ldr	r3, [r3, #0]
 800a4a2:	f003 0304 	and.w	r3, r3, #4
 800a4a6:	2b00      	cmp	r3, #0
 800a4a8:	f000 8081 	beq.w	800a5ae <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800a4ac:	4b8c      	ldr	r3, [pc, #560]	; (800a6e0 <HAL_RCC_OscConfig+0x770>)
 800a4ae:	681b      	ldr	r3, [r3, #0]
 800a4b0:	4a8b      	ldr	r2, [pc, #556]	; (800a6e0 <HAL_RCC_OscConfig+0x770>)
 800a4b2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a4b6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800a4b8:	f7f9 fefe 	bl	80042b8 <HAL_GetTick>
 800a4bc:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800a4be:	e008      	b.n	800a4d2 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a4c0:	f7f9 fefa 	bl	80042b8 <HAL_GetTick>
 800a4c4:	4602      	mov	r2, r0
 800a4c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4c8:	1ad3      	subs	r3, r2, r3
 800a4ca:	2b64      	cmp	r3, #100	; 0x64
 800a4cc:	d901      	bls.n	800a4d2 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 800a4ce:	2303      	movs	r3, #3
 800a4d0:	e1a0      	b.n	800a814 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800a4d2:	4b83      	ldr	r3, [pc, #524]	; (800a6e0 <HAL_RCC_OscConfig+0x770>)
 800a4d4:	681b      	ldr	r3, [r3, #0]
 800a4d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a4da:	2b00      	cmp	r3, #0
 800a4dc:	d0f0      	beq.n	800a4c0 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800a4de:	687b      	ldr	r3, [r7, #4]
 800a4e0:	689b      	ldr	r3, [r3, #8]
 800a4e2:	2b01      	cmp	r3, #1
 800a4e4:	d106      	bne.n	800a4f4 <HAL_RCC_OscConfig+0x584>
 800a4e6:	4b7d      	ldr	r3, [pc, #500]	; (800a6dc <HAL_RCC_OscConfig+0x76c>)
 800a4e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a4ea:	4a7c      	ldr	r2, [pc, #496]	; (800a6dc <HAL_RCC_OscConfig+0x76c>)
 800a4ec:	f043 0301 	orr.w	r3, r3, #1
 800a4f0:	6713      	str	r3, [r2, #112]	; 0x70
 800a4f2:	e02d      	b.n	800a550 <HAL_RCC_OscConfig+0x5e0>
 800a4f4:	687b      	ldr	r3, [r7, #4]
 800a4f6:	689b      	ldr	r3, [r3, #8]
 800a4f8:	2b00      	cmp	r3, #0
 800a4fa:	d10c      	bne.n	800a516 <HAL_RCC_OscConfig+0x5a6>
 800a4fc:	4b77      	ldr	r3, [pc, #476]	; (800a6dc <HAL_RCC_OscConfig+0x76c>)
 800a4fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a500:	4a76      	ldr	r2, [pc, #472]	; (800a6dc <HAL_RCC_OscConfig+0x76c>)
 800a502:	f023 0301 	bic.w	r3, r3, #1
 800a506:	6713      	str	r3, [r2, #112]	; 0x70
 800a508:	4b74      	ldr	r3, [pc, #464]	; (800a6dc <HAL_RCC_OscConfig+0x76c>)
 800a50a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a50c:	4a73      	ldr	r2, [pc, #460]	; (800a6dc <HAL_RCC_OscConfig+0x76c>)
 800a50e:	f023 0304 	bic.w	r3, r3, #4
 800a512:	6713      	str	r3, [r2, #112]	; 0x70
 800a514:	e01c      	b.n	800a550 <HAL_RCC_OscConfig+0x5e0>
 800a516:	687b      	ldr	r3, [r7, #4]
 800a518:	689b      	ldr	r3, [r3, #8]
 800a51a:	2b05      	cmp	r3, #5
 800a51c:	d10c      	bne.n	800a538 <HAL_RCC_OscConfig+0x5c8>
 800a51e:	4b6f      	ldr	r3, [pc, #444]	; (800a6dc <HAL_RCC_OscConfig+0x76c>)
 800a520:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a522:	4a6e      	ldr	r2, [pc, #440]	; (800a6dc <HAL_RCC_OscConfig+0x76c>)
 800a524:	f043 0304 	orr.w	r3, r3, #4
 800a528:	6713      	str	r3, [r2, #112]	; 0x70
 800a52a:	4b6c      	ldr	r3, [pc, #432]	; (800a6dc <HAL_RCC_OscConfig+0x76c>)
 800a52c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a52e:	4a6b      	ldr	r2, [pc, #428]	; (800a6dc <HAL_RCC_OscConfig+0x76c>)
 800a530:	f043 0301 	orr.w	r3, r3, #1
 800a534:	6713      	str	r3, [r2, #112]	; 0x70
 800a536:	e00b      	b.n	800a550 <HAL_RCC_OscConfig+0x5e0>
 800a538:	4b68      	ldr	r3, [pc, #416]	; (800a6dc <HAL_RCC_OscConfig+0x76c>)
 800a53a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a53c:	4a67      	ldr	r2, [pc, #412]	; (800a6dc <HAL_RCC_OscConfig+0x76c>)
 800a53e:	f023 0301 	bic.w	r3, r3, #1
 800a542:	6713      	str	r3, [r2, #112]	; 0x70
 800a544:	4b65      	ldr	r3, [pc, #404]	; (800a6dc <HAL_RCC_OscConfig+0x76c>)
 800a546:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a548:	4a64      	ldr	r2, [pc, #400]	; (800a6dc <HAL_RCC_OscConfig+0x76c>)
 800a54a:	f023 0304 	bic.w	r3, r3, #4
 800a54e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800a550:	687b      	ldr	r3, [r7, #4]
 800a552:	689b      	ldr	r3, [r3, #8]
 800a554:	2b00      	cmp	r3, #0
 800a556:	d015      	beq.n	800a584 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a558:	f7f9 feae 	bl	80042b8 <HAL_GetTick>
 800a55c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800a55e:	e00a      	b.n	800a576 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a560:	f7f9 feaa 	bl	80042b8 <HAL_GetTick>
 800a564:	4602      	mov	r2, r0
 800a566:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a568:	1ad3      	subs	r3, r2, r3
 800a56a:	f241 3288 	movw	r2, #5000	; 0x1388
 800a56e:	4293      	cmp	r3, r2
 800a570:	d901      	bls.n	800a576 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 800a572:	2303      	movs	r3, #3
 800a574:	e14e      	b.n	800a814 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800a576:	4b59      	ldr	r3, [pc, #356]	; (800a6dc <HAL_RCC_OscConfig+0x76c>)
 800a578:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a57a:	f003 0302 	and.w	r3, r3, #2
 800a57e:	2b00      	cmp	r3, #0
 800a580:	d0ee      	beq.n	800a560 <HAL_RCC_OscConfig+0x5f0>
 800a582:	e014      	b.n	800a5ae <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a584:	f7f9 fe98 	bl	80042b8 <HAL_GetTick>
 800a588:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800a58a:	e00a      	b.n	800a5a2 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a58c:	f7f9 fe94 	bl	80042b8 <HAL_GetTick>
 800a590:	4602      	mov	r2, r0
 800a592:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a594:	1ad3      	subs	r3, r2, r3
 800a596:	f241 3288 	movw	r2, #5000	; 0x1388
 800a59a:	4293      	cmp	r3, r2
 800a59c:	d901      	bls.n	800a5a2 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 800a59e:	2303      	movs	r3, #3
 800a5a0:	e138      	b.n	800a814 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800a5a2:	4b4e      	ldr	r3, [pc, #312]	; (800a6dc <HAL_RCC_OscConfig+0x76c>)
 800a5a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a5a6:	f003 0302 	and.w	r3, r3, #2
 800a5aa:	2b00      	cmp	r3, #0
 800a5ac:	d1ee      	bne.n	800a58c <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800a5ae:	687b      	ldr	r3, [r7, #4]
 800a5b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a5b2:	2b00      	cmp	r3, #0
 800a5b4:	f000 812d 	beq.w	800a812 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800a5b8:	4b48      	ldr	r3, [pc, #288]	; (800a6dc <HAL_RCC_OscConfig+0x76c>)
 800a5ba:	691b      	ldr	r3, [r3, #16]
 800a5bc:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a5c0:	2b18      	cmp	r3, #24
 800a5c2:	f000 80bd 	beq.w	800a740 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800a5c6:	687b      	ldr	r3, [r7, #4]
 800a5c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a5ca:	2b02      	cmp	r3, #2
 800a5cc:	f040 809e 	bne.w	800a70c <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a5d0:	4b42      	ldr	r3, [pc, #264]	; (800a6dc <HAL_RCC_OscConfig+0x76c>)
 800a5d2:	681b      	ldr	r3, [r3, #0]
 800a5d4:	4a41      	ldr	r2, [pc, #260]	; (800a6dc <HAL_RCC_OscConfig+0x76c>)
 800a5d6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800a5da:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a5dc:	f7f9 fe6c 	bl	80042b8 <HAL_GetTick>
 800a5e0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800a5e2:	e008      	b.n	800a5f6 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a5e4:	f7f9 fe68 	bl	80042b8 <HAL_GetTick>
 800a5e8:	4602      	mov	r2, r0
 800a5ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a5ec:	1ad3      	subs	r3, r2, r3
 800a5ee:	2b02      	cmp	r3, #2
 800a5f0:	d901      	bls.n	800a5f6 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 800a5f2:	2303      	movs	r3, #3
 800a5f4:	e10e      	b.n	800a814 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800a5f6:	4b39      	ldr	r3, [pc, #228]	; (800a6dc <HAL_RCC_OscConfig+0x76c>)
 800a5f8:	681b      	ldr	r3, [r3, #0]
 800a5fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a5fe:	2b00      	cmp	r3, #0
 800a600:	d1f0      	bne.n	800a5e4 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800a602:	4b36      	ldr	r3, [pc, #216]	; (800a6dc <HAL_RCC_OscConfig+0x76c>)
 800a604:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a606:	4b37      	ldr	r3, [pc, #220]	; (800a6e4 <HAL_RCC_OscConfig+0x774>)
 800a608:	4013      	ands	r3, r2
 800a60a:	687a      	ldr	r2, [r7, #4]
 800a60c:	6a91      	ldr	r1, [r2, #40]	; 0x28
 800a60e:	687a      	ldr	r2, [r7, #4]
 800a610:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800a612:	0112      	lsls	r2, r2, #4
 800a614:	430a      	orrs	r2, r1
 800a616:	4931      	ldr	r1, [pc, #196]	; (800a6dc <HAL_RCC_OscConfig+0x76c>)
 800a618:	4313      	orrs	r3, r2
 800a61a:	628b      	str	r3, [r1, #40]	; 0x28
 800a61c:	687b      	ldr	r3, [r7, #4]
 800a61e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a620:	3b01      	subs	r3, #1
 800a622:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800a626:	687b      	ldr	r3, [r7, #4]
 800a628:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a62a:	3b01      	subs	r3, #1
 800a62c:	025b      	lsls	r3, r3, #9
 800a62e:	b29b      	uxth	r3, r3
 800a630:	431a      	orrs	r2, r3
 800a632:	687b      	ldr	r3, [r7, #4]
 800a634:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a636:	3b01      	subs	r3, #1
 800a638:	041b      	lsls	r3, r3, #16
 800a63a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800a63e:	431a      	orrs	r2, r3
 800a640:	687b      	ldr	r3, [r7, #4]
 800a642:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a644:	3b01      	subs	r3, #1
 800a646:	061b      	lsls	r3, r3, #24
 800a648:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800a64c:	4923      	ldr	r1, [pc, #140]	; (800a6dc <HAL_RCC_OscConfig+0x76c>)
 800a64e:	4313      	orrs	r3, r2
 800a650:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 800a652:	4b22      	ldr	r3, [pc, #136]	; (800a6dc <HAL_RCC_OscConfig+0x76c>)
 800a654:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a656:	4a21      	ldr	r2, [pc, #132]	; (800a6dc <HAL_RCC_OscConfig+0x76c>)
 800a658:	f023 0301 	bic.w	r3, r3, #1
 800a65c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800a65e:	4b1f      	ldr	r3, [pc, #124]	; (800a6dc <HAL_RCC_OscConfig+0x76c>)
 800a660:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a662:	4b21      	ldr	r3, [pc, #132]	; (800a6e8 <HAL_RCC_OscConfig+0x778>)
 800a664:	4013      	ands	r3, r2
 800a666:	687a      	ldr	r2, [r7, #4]
 800a668:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800a66a:	00d2      	lsls	r2, r2, #3
 800a66c:	491b      	ldr	r1, [pc, #108]	; (800a6dc <HAL_RCC_OscConfig+0x76c>)
 800a66e:	4313      	orrs	r3, r2
 800a670:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800a672:	4b1a      	ldr	r3, [pc, #104]	; (800a6dc <HAL_RCC_OscConfig+0x76c>)
 800a674:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a676:	f023 020c 	bic.w	r2, r3, #12
 800a67a:	687b      	ldr	r3, [r7, #4]
 800a67c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a67e:	4917      	ldr	r1, [pc, #92]	; (800a6dc <HAL_RCC_OscConfig+0x76c>)
 800a680:	4313      	orrs	r3, r2
 800a682:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800a684:	4b15      	ldr	r3, [pc, #84]	; (800a6dc <HAL_RCC_OscConfig+0x76c>)
 800a686:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a688:	f023 0202 	bic.w	r2, r3, #2
 800a68c:	687b      	ldr	r3, [r7, #4]
 800a68e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a690:	4912      	ldr	r1, [pc, #72]	; (800a6dc <HAL_RCC_OscConfig+0x76c>)
 800a692:	4313      	orrs	r3, r2
 800a694:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800a696:	4b11      	ldr	r3, [pc, #68]	; (800a6dc <HAL_RCC_OscConfig+0x76c>)
 800a698:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a69a:	4a10      	ldr	r2, [pc, #64]	; (800a6dc <HAL_RCC_OscConfig+0x76c>)
 800a69c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a6a0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a6a2:	4b0e      	ldr	r3, [pc, #56]	; (800a6dc <HAL_RCC_OscConfig+0x76c>)
 800a6a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a6a6:	4a0d      	ldr	r2, [pc, #52]	; (800a6dc <HAL_RCC_OscConfig+0x76c>)
 800a6a8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a6ac:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800a6ae:	4b0b      	ldr	r3, [pc, #44]	; (800a6dc <HAL_RCC_OscConfig+0x76c>)
 800a6b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a6b2:	4a0a      	ldr	r2, [pc, #40]	; (800a6dc <HAL_RCC_OscConfig+0x76c>)
 800a6b4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800a6b8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 800a6ba:	4b08      	ldr	r3, [pc, #32]	; (800a6dc <HAL_RCC_OscConfig+0x76c>)
 800a6bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a6be:	4a07      	ldr	r2, [pc, #28]	; (800a6dc <HAL_RCC_OscConfig+0x76c>)
 800a6c0:	f043 0301 	orr.w	r3, r3, #1
 800a6c4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800a6c6:	4b05      	ldr	r3, [pc, #20]	; (800a6dc <HAL_RCC_OscConfig+0x76c>)
 800a6c8:	681b      	ldr	r3, [r3, #0]
 800a6ca:	4a04      	ldr	r2, [pc, #16]	; (800a6dc <HAL_RCC_OscConfig+0x76c>)
 800a6cc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800a6d0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a6d2:	f7f9 fdf1 	bl	80042b8 <HAL_GetTick>
 800a6d6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800a6d8:	e011      	b.n	800a6fe <HAL_RCC_OscConfig+0x78e>
 800a6da:	bf00      	nop
 800a6dc:	58024400 	.word	0x58024400
 800a6e0:	58024800 	.word	0x58024800
 800a6e4:	fffffc0c 	.word	0xfffffc0c
 800a6e8:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a6ec:	f7f9 fde4 	bl	80042b8 <HAL_GetTick>
 800a6f0:	4602      	mov	r2, r0
 800a6f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a6f4:	1ad3      	subs	r3, r2, r3
 800a6f6:	2b02      	cmp	r3, #2
 800a6f8:	d901      	bls.n	800a6fe <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 800a6fa:	2303      	movs	r3, #3
 800a6fc:	e08a      	b.n	800a814 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800a6fe:	4b47      	ldr	r3, [pc, #284]	; (800a81c <HAL_RCC_OscConfig+0x8ac>)
 800a700:	681b      	ldr	r3, [r3, #0]
 800a702:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a706:	2b00      	cmp	r3, #0
 800a708:	d0f0      	beq.n	800a6ec <HAL_RCC_OscConfig+0x77c>
 800a70a:	e082      	b.n	800a812 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a70c:	4b43      	ldr	r3, [pc, #268]	; (800a81c <HAL_RCC_OscConfig+0x8ac>)
 800a70e:	681b      	ldr	r3, [r3, #0]
 800a710:	4a42      	ldr	r2, [pc, #264]	; (800a81c <HAL_RCC_OscConfig+0x8ac>)
 800a712:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800a716:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a718:	f7f9 fdce 	bl	80042b8 <HAL_GetTick>
 800a71c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800a71e:	e008      	b.n	800a732 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a720:	f7f9 fdca 	bl	80042b8 <HAL_GetTick>
 800a724:	4602      	mov	r2, r0
 800a726:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a728:	1ad3      	subs	r3, r2, r3
 800a72a:	2b02      	cmp	r3, #2
 800a72c:	d901      	bls.n	800a732 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 800a72e:	2303      	movs	r3, #3
 800a730:	e070      	b.n	800a814 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800a732:	4b3a      	ldr	r3, [pc, #232]	; (800a81c <HAL_RCC_OscConfig+0x8ac>)
 800a734:	681b      	ldr	r3, [r3, #0]
 800a736:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a73a:	2b00      	cmp	r3, #0
 800a73c:	d1f0      	bne.n	800a720 <HAL_RCC_OscConfig+0x7b0>
 800a73e:	e068      	b.n	800a812 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800a740:	4b36      	ldr	r3, [pc, #216]	; (800a81c <HAL_RCC_OscConfig+0x8ac>)
 800a742:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a744:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800a746:	4b35      	ldr	r3, [pc, #212]	; (800a81c <HAL_RCC_OscConfig+0x8ac>)
 800a748:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a74a:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800a74c:	687b      	ldr	r3, [r7, #4]
 800a74e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a750:	2b01      	cmp	r3, #1
 800a752:	d031      	beq.n	800a7b8 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a754:	693b      	ldr	r3, [r7, #16]
 800a756:	f003 0203 	and.w	r2, r3, #3
 800a75a:	687b      	ldr	r3, [r7, #4]
 800a75c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800a75e:	429a      	cmp	r2, r3
 800a760:	d12a      	bne.n	800a7b8 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800a762:	693b      	ldr	r3, [r7, #16]
 800a764:	091b      	lsrs	r3, r3, #4
 800a766:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800a76a:	687b      	ldr	r3, [r7, #4]
 800a76c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a76e:	429a      	cmp	r2, r3
 800a770:	d122      	bne.n	800a7b8 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800a772:	68fb      	ldr	r3, [r7, #12]
 800a774:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800a778:	687b      	ldr	r3, [r7, #4]
 800a77a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a77c:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800a77e:	429a      	cmp	r2, r3
 800a780:	d11a      	bne.n	800a7b8 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800a782:	68fb      	ldr	r3, [r7, #12]
 800a784:	0a5b      	lsrs	r3, r3, #9
 800a786:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a78a:	687b      	ldr	r3, [r7, #4]
 800a78c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a78e:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800a790:	429a      	cmp	r2, r3
 800a792:	d111      	bne.n	800a7b8 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800a794:	68fb      	ldr	r3, [r7, #12]
 800a796:	0c1b      	lsrs	r3, r3, #16
 800a798:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a79c:	687b      	ldr	r3, [r7, #4]
 800a79e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a7a0:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800a7a2:	429a      	cmp	r2, r3
 800a7a4:	d108      	bne.n	800a7b8 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800a7a6:	68fb      	ldr	r3, [r7, #12]
 800a7a8:	0e1b      	lsrs	r3, r3, #24
 800a7aa:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a7ae:	687b      	ldr	r3, [r7, #4]
 800a7b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a7b2:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800a7b4:	429a      	cmp	r2, r3
 800a7b6:	d001      	beq.n	800a7bc <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 800a7b8:	2301      	movs	r3, #1
 800a7ba:	e02b      	b.n	800a814 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 800a7bc:	4b17      	ldr	r3, [pc, #92]	; (800a81c <HAL_RCC_OscConfig+0x8ac>)
 800a7be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a7c0:	08db      	lsrs	r3, r3, #3
 800a7c2:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800a7c6:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 800a7c8:	687b      	ldr	r3, [r7, #4]
 800a7ca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a7cc:	693a      	ldr	r2, [r7, #16]
 800a7ce:	429a      	cmp	r2, r3
 800a7d0:	d01f      	beq.n	800a812 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 800a7d2:	4b12      	ldr	r3, [pc, #72]	; (800a81c <HAL_RCC_OscConfig+0x8ac>)
 800a7d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a7d6:	4a11      	ldr	r2, [pc, #68]	; (800a81c <HAL_RCC_OscConfig+0x8ac>)
 800a7d8:	f023 0301 	bic.w	r3, r3, #1
 800a7dc:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800a7de:	f7f9 fd6b 	bl	80042b8 <HAL_GetTick>
 800a7e2:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 800a7e4:	bf00      	nop
 800a7e6:	f7f9 fd67 	bl	80042b8 <HAL_GetTick>
 800a7ea:	4602      	mov	r2, r0
 800a7ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a7ee:	4293      	cmp	r3, r2
 800a7f0:	d0f9      	beq.n	800a7e6 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800a7f2:	4b0a      	ldr	r3, [pc, #40]	; (800a81c <HAL_RCC_OscConfig+0x8ac>)
 800a7f4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a7f6:	4b0a      	ldr	r3, [pc, #40]	; (800a820 <HAL_RCC_OscConfig+0x8b0>)
 800a7f8:	4013      	ands	r3, r2
 800a7fa:	687a      	ldr	r2, [r7, #4]
 800a7fc:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800a7fe:	00d2      	lsls	r2, r2, #3
 800a800:	4906      	ldr	r1, [pc, #24]	; (800a81c <HAL_RCC_OscConfig+0x8ac>)
 800a802:	4313      	orrs	r3, r2
 800a804:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 800a806:	4b05      	ldr	r3, [pc, #20]	; (800a81c <HAL_RCC_OscConfig+0x8ac>)
 800a808:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a80a:	4a04      	ldr	r2, [pc, #16]	; (800a81c <HAL_RCC_OscConfig+0x8ac>)
 800a80c:	f043 0301 	orr.w	r3, r3, #1
 800a810:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 800a812:	2300      	movs	r3, #0
}
 800a814:	4618      	mov	r0, r3
 800a816:	3730      	adds	r7, #48	; 0x30
 800a818:	46bd      	mov	sp, r7
 800a81a:	bd80      	pop	{r7, pc}
 800a81c:	58024400 	.word	0x58024400
 800a820:	ffff0007 	.word	0xffff0007

0800a824 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800a824:	b580      	push	{r7, lr}
 800a826:	b086      	sub	sp, #24
 800a828:	af00      	add	r7, sp, #0
 800a82a:	6078      	str	r0, [r7, #4]
 800a82c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800a82e:	687b      	ldr	r3, [r7, #4]
 800a830:	2b00      	cmp	r3, #0
 800a832:	d101      	bne.n	800a838 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800a834:	2301      	movs	r3, #1
 800a836:	e19c      	b.n	800ab72 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800a838:	4b8a      	ldr	r3, [pc, #552]	; (800aa64 <HAL_RCC_ClockConfig+0x240>)
 800a83a:	681b      	ldr	r3, [r3, #0]
 800a83c:	f003 030f 	and.w	r3, r3, #15
 800a840:	683a      	ldr	r2, [r7, #0]
 800a842:	429a      	cmp	r2, r3
 800a844:	d910      	bls.n	800a868 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a846:	4b87      	ldr	r3, [pc, #540]	; (800aa64 <HAL_RCC_ClockConfig+0x240>)
 800a848:	681b      	ldr	r3, [r3, #0]
 800a84a:	f023 020f 	bic.w	r2, r3, #15
 800a84e:	4985      	ldr	r1, [pc, #532]	; (800aa64 <HAL_RCC_ClockConfig+0x240>)
 800a850:	683b      	ldr	r3, [r7, #0]
 800a852:	4313      	orrs	r3, r2
 800a854:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800a856:	4b83      	ldr	r3, [pc, #524]	; (800aa64 <HAL_RCC_ClockConfig+0x240>)
 800a858:	681b      	ldr	r3, [r3, #0]
 800a85a:	f003 030f 	and.w	r3, r3, #15
 800a85e:	683a      	ldr	r2, [r7, #0]
 800a860:	429a      	cmp	r2, r3
 800a862:	d001      	beq.n	800a868 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800a864:	2301      	movs	r3, #1
 800a866:	e184      	b.n	800ab72 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800a868:	687b      	ldr	r3, [r7, #4]
 800a86a:	681b      	ldr	r3, [r3, #0]
 800a86c:	f003 0304 	and.w	r3, r3, #4
 800a870:	2b00      	cmp	r3, #0
 800a872:	d010      	beq.n	800a896 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800a874:	687b      	ldr	r3, [r7, #4]
 800a876:	691a      	ldr	r2, [r3, #16]
 800a878:	4b7b      	ldr	r3, [pc, #492]	; (800aa68 <HAL_RCC_ClockConfig+0x244>)
 800a87a:	699b      	ldr	r3, [r3, #24]
 800a87c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a880:	429a      	cmp	r2, r3
 800a882:	d908      	bls.n	800a896 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800a884:	4b78      	ldr	r3, [pc, #480]	; (800aa68 <HAL_RCC_ClockConfig+0x244>)
 800a886:	699b      	ldr	r3, [r3, #24]
 800a888:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800a88c:	687b      	ldr	r3, [r7, #4]
 800a88e:	691b      	ldr	r3, [r3, #16]
 800a890:	4975      	ldr	r1, [pc, #468]	; (800aa68 <HAL_RCC_ClockConfig+0x244>)
 800a892:	4313      	orrs	r3, r2
 800a894:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a896:	687b      	ldr	r3, [r7, #4]
 800a898:	681b      	ldr	r3, [r3, #0]
 800a89a:	f003 0308 	and.w	r3, r3, #8
 800a89e:	2b00      	cmp	r3, #0
 800a8a0:	d010      	beq.n	800a8c4 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800a8a2:	687b      	ldr	r3, [r7, #4]
 800a8a4:	695a      	ldr	r2, [r3, #20]
 800a8a6:	4b70      	ldr	r3, [pc, #448]	; (800aa68 <HAL_RCC_ClockConfig+0x244>)
 800a8a8:	69db      	ldr	r3, [r3, #28]
 800a8aa:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a8ae:	429a      	cmp	r2, r3
 800a8b0:	d908      	bls.n	800a8c4 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800a8b2:	4b6d      	ldr	r3, [pc, #436]	; (800aa68 <HAL_RCC_ClockConfig+0x244>)
 800a8b4:	69db      	ldr	r3, [r3, #28]
 800a8b6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800a8ba:	687b      	ldr	r3, [r7, #4]
 800a8bc:	695b      	ldr	r3, [r3, #20]
 800a8be:	496a      	ldr	r1, [pc, #424]	; (800aa68 <HAL_RCC_ClockConfig+0x244>)
 800a8c0:	4313      	orrs	r3, r2
 800a8c2:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a8c4:	687b      	ldr	r3, [r7, #4]
 800a8c6:	681b      	ldr	r3, [r3, #0]
 800a8c8:	f003 0310 	and.w	r3, r3, #16
 800a8cc:	2b00      	cmp	r3, #0
 800a8ce:	d010      	beq.n	800a8f2 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800a8d0:	687b      	ldr	r3, [r7, #4]
 800a8d2:	699a      	ldr	r2, [r3, #24]
 800a8d4:	4b64      	ldr	r3, [pc, #400]	; (800aa68 <HAL_RCC_ClockConfig+0x244>)
 800a8d6:	69db      	ldr	r3, [r3, #28]
 800a8d8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800a8dc:	429a      	cmp	r2, r3
 800a8de:	d908      	bls.n	800a8f2 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800a8e0:	4b61      	ldr	r3, [pc, #388]	; (800aa68 <HAL_RCC_ClockConfig+0x244>)
 800a8e2:	69db      	ldr	r3, [r3, #28]
 800a8e4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800a8e8:	687b      	ldr	r3, [r7, #4]
 800a8ea:	699b      	ldr	r3, [r3, #24]
 800a8ec:	495e      	ldr	r1, [pc, #376]	; (800aa68 <HAL_RCC_ClockConfig+0x244>)
 800a8ee:	4313      	orrs	r3, r2
 800a8f0:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800a8f2:	687b      	ldr	r3, [r7, #4]
 800a8f4:	681b      	ldr	r3, [r3, #0]
 800a8f6:	f003 0320 	and.w	r3, r3, #32
 800a8fa:	2b00      	cmp	r3, #0
 800a8fc:	d010      	beq.n	800a920 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800a8fe:	687b      	ldr	r3, [r7, #4]
 800a900:	69da      	ldr	r2, [r3, #28]
 800a902:	4b59      	ldr	r3, [pc, #356]	; (800aa68 <HAL_RCC_ClockConfig+0x244>)
 800a904:	6a1b      	ldr	r3, [r3, #32]
 800a906:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a90a:	429a      	cmp	r2, r3
 800a90c:	d908      	bls.n	800a920 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800a90e:	4b56      	ldr	r3, [pc, #344]	; (800aa68 <HAL_RCC_ClockConfig+0x244>)
 800a910:	6a1b      	ldr	r3, [r3, #32]
 800a912:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800a916:	687b      	ldr	r3, [r7, #4]
 800a918:	69db      	ldr	r3, [r3, #28]
 800a91a:	4953      	ldr	r1, [pc, #332]	; (800aa68 <HAL_RCC_ClockConfig+0x244>)
 800a91c:	4313      	orrs	r3, r2
 800a91e:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800a920:	687b      	ldr	r3, [r7, #4]
 800a922:	681b      	ldr	r3, [r3, #0]
 800a924:	f003 0302 	and.w	r3, r3, #2
 800a928:	2b00      	cmp	r3, #0
 800a92a:	d010      	beq.n	800a94e <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800a92c:	687b      	ldr	r3, [r7, #4]
 800a92e:	68da      	ldr	r2, [r3, #12]
 800a930:	4b4d      	ldr	r3, [pc, #308]	; (800aa68 <HAL_RCC_ClockConfig+0x244>)
 800a932:	699b      	ldr	r3, [r3, #24]
 800a934:	f003 030f 	and.w	r3, r3, #15
 800a938:	429a      	cmp	r2, r3
 800a93a:	d908      	bls.n	800a94e <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800a93c:	4b4a      	ldr	r3, [pc, #296]	; (800aa68 <HAL_RCC_ClockConfig+0x244>)
 800a93e:	699b      	ldr	r3, [r3, #24]
 800a940:	f023 020f 	bic.w	r2, r3, #15
 800a944:	687b      	ldr	r3, [r7, #4]
 800a946:	68db      	ldr	r3, [r3, #12]
 800a948:	4947      	ldr	r1, [pc, #284]	; (800aa68 <HAL_RCC_ClockConfig+0x244>)
 800a94a:	4313      	orrs	r3, r2
 800a94c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800a94e:	687b      	ldr	r3, [r7, #4]
 800a950:	681b      	ldr	r3, [r3, #0]
 800a952:	f003 0301 	and.w	r3, r3, #1
 800a956:	2b00      	cmp	r3, #0
 800a958:	d055      	beq.n	800aa06 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800a95a:	4b43      	ldr	r3, [pc, #268]	; (800aa68 <HAL_RCC_ClockConfig+0x244>)
 800a95c:	699b      	ldr	r3, [r3, #24]
 800a95e:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800a962:	687b      	ldr	r3, [r7, #4]
 800a964:	689b      	ldr	r3, [r3, #8]
 800a966:	4940      	ldr	r1, [pc, #256]	; (800aa68 <HAL_RCC_ClockConfig+0x244>)
 800a968:	4313      	orrs	r3, r2
 800a96a:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800a96c:	687b      	ldr	r3, [r7, #4]
 800a96e:	685b      	ldr	r3, [r3, #4]
 800a970:	2b02      	cmp	r3, #2
 800a972:	d107      	bne.n	800a984 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800a974:	4b3c      	ldr	r3, [pc, #240]	; (800aa68 <HAL_RCC_ClockConfig+0x244>)
 800a976:	681b      	ldr	r3, [r3, #0]
 800a978:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a97c:	2b00      	cmp	r3, #0
 800a97e:	d121      	bne.n	800a9c4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800a980:	2301      	movs	r3, #1
 800a982:	e0f6      	b.n	800ab72 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800a984:	687b      	ldr	r3, [r7, #4]
 800a986:	685b      	ldr	r3, [r3, #4]
 800a988:	2b03      	cmp	r3, #3
 800a98a:	d107      	bne.n	800a99c <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800a98c:	4b36      	ldr	r3, [pc, #216]	; (800aa68 <HAL_RCC_ClockConfig+0x244>)
 800a98e:	681b      	ldr	r3, [r3, #0]
 800a990:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a994:	2b00      	cmp	r3, #0
 800a996:	d115      	bne.n	800a9c4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800a998:	2301      	movs	r3, #1
 800a99a:	e0ea      	b.n	800ab72 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800a99c:	687b      	ldr	r3, [r7, #4]
 800a99e:	685b      	ldr	r3, [r3, #4]
 800a9a0:	2b01      	cmp	r3, #1
 800a9a2:	d107      	bne.n	800a9b4 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800a9a4:	4b30      	ldr	r3, [pc, #192]	; (800aa68 <HAL_RCC_ClockConfig+0x244>)
 800a9a6:	681b      	ldr	r3, [r3, #0]
 800a9a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a9ac:	2b00      	cmp	r3, #0
 800a9ae:	d109      	bne.n	800a9c4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800a9b0:	2301      	movs	r3, #1
 800a9b2:	e0de      	b.n	800ab72 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800a9b4:	4b2c      	ldr	r3, [pc, #176]	; (800aa68 <HAL_RCC_ClockConfig+0x244>)
 800a9b6:	681b      	ldr	r3, [r3, #0]
 800a9b8:	f003 0304 	and.w	r3, r3, #4
 800a9bc:	2b00      	cmp	r3, #0
 800a9be:	d101      	bne.n	800a9c4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800a9c0:	2301      	movs	r3, #1
 800a9c2:	e0d6      	b.n	800ab72 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800a9c4:	4b28      	ldr	r3, [pc, #160]	; (800aa68 <HAL_RCC_ClockConfig+0x244>)
 800a9c6:	691b      	ldr	r3, [r3, #16]
 800a9c8:	f023 0207 	bic.w	r2, r3, #7
 800a9cc:	687b      	ldr	r3, [r7, #4]
 800a9ce:	685b      	ldr	r3, [r3, #4]
 800a9d0:	4925      	ldr	r1, [pc, #148]	; (800aa68 <HAL_RCC_ClockConfig+0x244>)
 800a9d2:	4313      	orrs	r3, r2
 800a9d4:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a9d6:	f7f9 fc6f 	bl	80042b8 <HAL_GetTick>
 800a9da:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a9dc:	e00a      	b.n	800a9f4 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800a9de:	f7f9 fc6b 	bl	80042b8 <HAL_GetTick>
 800a9e2:	4602      	mov	r2, r0
 800a9e4:	697b      	ldr	r3, [r7, #20]
 800a9e6:	1ad3      	subs	r3, r2, r3
 800a9e8:	f241 3288 	movw	r2, #5000	; 0x1388
 800a9ec:	4293      	cmp	r3, r2
 800a9ee:	d901      	bls.n	800a9f4 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 800a9f0:	2303      	movs	r3, #3
 800a9f2:	e0be      	b.n	800ab72 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a9f4:	4b1c      	ldr	r3, [pc, #112]	; (800aa68 <HAL_RCC_ClockConfig+0x244>)
 800a9f6:	691b      	ldr	r3, [r3, #16]
 800a9f8:	f003 0238 	and.w	r2, r3, #56	; 0x38
 800a9fc:	687b      	ldr	r3, [r7, #4]
 800a9fe:	685b      	ldr	r3, [r3, #4]
 800aa00:	00db      	lsls	r3, r3, #3
 800aa02:	429a      	cmp	r2, r3
 800aa04:	d1eb      	bne.n	800a9de <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800aa06:	687b      	ldr	r3, [r7, #4]
 800aa08:	681b      	ldr	r3, [r3, #0]
 800aa0a:	f003 0302 	and.w	r3, r3, #2
 800aa0e:	2b00      	cmp	r3, #0
 800aa10:	d010      	beq.n	800aa34 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800aa12:	687b      	ldr	r3, [r7, #4]
 800aa14:	68da      	ldr	r2, [r3, #12]
 800aa16:	4b14      	ldr	r3, [pc, #80]	; (800aa68 <HAL_RCC_ClockConfig+0x244>)
 800aa18:	699b      	ldr	r3, [r3, #24]
 800aa1a:	f003 030f 	and.w	r3, r3, #15
 800aa1e:	429a      	cmp	r2, r3
 800aa20:	d208      	bcs.n	800aa34 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800aa22:	4b11      	ldr	r3, [pc, #68]	; (800aa68 <HAL_RCC_ClockConfig+0x244>)
 800aa24:	699b      	ldr	r3, [r3, #24]
 800aa26:	f023 020f 	bic.w	r2, r3, #15
 800aa2a:	687b      	ldr	r3, [r7, #4]
 800aa2c:	68db      	ldr	r3, [r3, #12]
 800aa2e:	490e      	ldr	r1, [pc, #56]	; (800aa68 <HAL_RCC_ClockConfig+0x244>)
 800aa30:	4313      	orrs	r3, r2
 800aa32:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800aa34:	4b0b      	ldr	r3, [pc, #44]	; (800aa64 <HAL_RCC_ClockConfig+0x240>)
 800aa36:	681b      	ldr	r3, [r3, #0]
 800aa38:	f003 030f 	and.w	r3, r3, #15
 800aa3c:	683a      	ldr	r2, [r7, #0]
 800aa3e:	429a      	cmp	r2, r3
 800aa40:	d214      	bcs.n	800aa6c <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800aa42:	4b08      	ldr	r3, [pc, #32]	; (800aa64 <HAL_RCC_ClockConfig+0x240>)
 800aa44:	681b      	ldr	r3, [r3, #0]
 800aa46:	f023 020f 	bic.w	r2, r3, #15
 800aa4a:	4906      	ldr	r1, [pc, #24]	; (800aa64 <HAL_RCC_ClockConfig+0x240>)
 800aa4c:	683b      	ldr	r3, [r7, #0]
 800aa4e:	4313      	orrs	r3, r2
 800aa50:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800aa52:	4b04      	ldr	r3, [pc, #16]	; (800aa64 <HAL_RCC_ClockConfig+0x240>)
 800aa54:	681b      	ldr	r3, [r3, #0]
 800aa56:	f003 030f 	and.w	r3, r3, #15
 800aa5a:	683a      	ldr	r2, [r7, #0]
 800aa5c:	429a      	cmp	r2, r3
 800aa5e:	d005      	beq.n	800aa6c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800aa60:	2301      	movs	r3, #1
 800aa62:	e086      	b.n	800ab72 <HAL_RCC_ClockConfig+0x34e>
 800aa64:	52002000 	.word	0x52002000
 800aa68:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800aa6c:	687b      	ldr	r3, [r7, #4]
 800aa6e:	681b      	ldr	r3, [r3, #0]
 800aa70:	f003 0304 	and.w	r3, r3, #4
 800aa74:	2b00      	cmp	r3, #0
 800aa76:	d010      	beq.n	800aa9a <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800aa78:	687b      	ldr	r3, [r7, #4]
 800aa7a:	691a      	ldr	r2, [r3, #16]
 800aa7c:	4b3f      	ldr	r3, [pc, #252]	; (800ab7c <HAL_RCC_ClockConfig+0x358>)
 800aa7e:	699b      	ldr	r3, [r3, #24]
 800aa80:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800aa84:	429a      	cmp	r2, r3
 800aa86:	d208      	bcs.n	800aa9a <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800aa88:	4b3c      	ldr	r3, [pc, #240]	; (800ab7c <HAL_RCC_ClockConfig+0x358>)
 800aa8a:	699b      	ldr	r3, [r3, #24]
 800aa8c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800aa90:	687b      	ldr	r3, [r7, #4]
 800aa92:	691b      	ldr	r3, [r3, #16]
 800aa94:	4939      	ldr	r1, [pc, #228]	; (800ab7c <HAL_RCC_ClockConfig+0x358>)
 800aa96:	4313      	orrs	r3, r2
 800aa98:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800aa9a:	687b      	ldr	r3, [r7, #4]
 800aa9c:	681b      	ldr	r3, [r3, #0]
 800aa9e:	f003 0308 	and.w	r3, r3, #8
 800aaa2:	2b00      	cmp	r3, #0
 800aaa4:	d010      	beq.n	800aac8 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800aaa6:	687b      	ldr	r3, [r7, #4]
 800aaa8:	695a      	ldr	r2, [r3, #20]
 800aaaa:	4b34      	ldr	r3, [pc, #208]	; (800ab7c <HAL_RCC_ClockConfig+0x358>)
 800aaac:	69db      	ldr	r3, [r3, #28]
 800aaae:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800aab2:	429a      	cmp	r2, r3
 800aab4:	d208      	bcs.n	800aac8 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800aab6:	4b31      	ldr	r3, [pc, #196]	; (800ab7c <HAL_RCC_ClockConfig+0x358>)
 800aab8:	69db      	ldr	r3, [r3, #28]
 800aaba:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800aabe:	687b      	ldr	r3, [r7, #4]
 800aac0:	695b      	ldr	r3, [r3, #20]
 800aac2:	492e      	ldr	r1, [pc, #184]	; (800ab7c <HAL_RCC_ClockConfig+0x358>)
 800aac4:	4313      	orrs	r3, r2
 800aac6:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800aac8:	687b      	ldr	r3, [r7, #4]
 800aaca:	681b      	ldr	r3, [r3, #0]
 800aacc:	f003 0310 	and.w	r3, r3, #16
 800aad0:	2b00      	cmp	r3, #0
 800aad2:	d010      	beq.n	800aaf6 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800aad4:	687b      	ldr	r3, [r7, #4]
 800aad6:	699a      	ldr	r2, [r3, #24]
 800aad8:	4b28      	ldr	r3, [pc, #160]	; (800ab7c <HAL_RCC_ClockConfig+0x358>)
 800aada:	69db      	ldr	r3, [r3, #28]
 800aadc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800aae0:	429a      	cmp	r2, r3
 800aae2:	d208      	bcs.n	800aaf6 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800aae4:	4b25      	ldr	r3, [pc, #148]	; (800ab7c <HAL_RCC_ClockConfig+0x358>)
 800aae6:	69db      	ldr	r3, [r3, #28]
 800aae8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800aaec:	687b      	ldr	r3, [r7, #4]
 800aaee:	699b      	ldr	r3, [r3, #24]
 800aaf0:	4922      	ldr	r1, [pc, #136]	; (800ab7c <HAL_RCC_ClockConfig+0x358>)
 800aaf2:	4313      	orrs	r3, r2
 800aaf4:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800aaf6:	687b      	ldr	r3, [r7, #4]
 800aaf8:	681b      	ldr	r3, [r3, #0]
 800aafa:	f003 0320 	and.w	r3, r3, #32
 800aafe:	2b00      	cmp	r3, #0
 800ab00:	d010      	beq.n	800ab24 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800ab02:	687b      	ldr	r3, [r7, #4]
 800ab04:	69da      	ldr	r2, [r3, #28]
 800ab06:	4b1d      	ldr	r3, [pc, #116]	; (800ab7c <HAL_RCC_ClockConfig+0x358>)
 800ab08:	6a1b      	ldr	r3, [r3, #32]
 800ab0a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800ab0e:	429a      	cmp	r2, r3
 800ab10:	d208      	bcs.n	800ab24 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800ab12:	4b1a      	ldr	r3, [pc, #104]	; (800ab7c <HAL_RCC_ClockConfig+0x358>)
 800ab14:	6a1b      	ldr	r3, [r3, #32]
 800ab16:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800ab1a:	687b      	ldr	r3, [r7, #4]
 800ab1c:	69db      	ldr	r3, [r3, #28]
 800ab1e:	4917      	ldr	r1, [pc, #92]	; (800ab7c <HAL_RCC_ClockConfig+0x358>)
 800ab20:	4313      	orrs	r3, r2
 800ab22:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800ab24:	f000 f844 	bl	800abb0 <HAL_RCC_GetSysClockFreq>
 800ab28:	4602      	mov	r2, r0
 800ab2a:	4b14      	ldr	r3, [pc, #80]	; (800ab7c <HAL_RCC_ClockConfig+0x358>)
 800ab2c:	699b      	ldr	r3, [r3, #24]
 800ab2e:	0a1b      	lsrs	r3, r3, #8
 800ab30:	f003 030f 	and.w	r3, r3, #15
 800ab34:	4912      	ldr	r1, [pc, #72]	; (800ab80 <HAL_RCC_ClockConfig+0x35c>)
 800ab36:	5ccb      	ldrb	r3, [r1, r3]
 800ab38:	f003 031f 	and.w	r3, r3, #31
 800ab3c:	fa22 f303 	lsr.w	r3, r2, r3
 800ab40:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800ab42:	4b0e      	ldr	r3, [pc, #56]	; (800ab7c <HAL_RCC_ClockConfig+0x358>)
 800ab44:	699b      	ldr	r3, [r3, #24]
 800ab46:	f003 030f 	and.w	r3, r3, #15
 800ab4a:	4a0d      	ldr	r2, [pc, #52]	; (800ab80 <HAL_RCC_ClockConfig+0x35c>)
 800ab4c:	5cd3      	ldrb	r3, [r2, r3]
 800ab4e:	f003 031f 	and.w	r3, r3, #31
 800ab52:	693a      	ldr	r2, [r7, #16]
 800ab54:	fa22 f303 	lsr.w	r3, r2, r3
 800ab58:	4a0a      	ldr	r2, [pc, #40]	; (800ab84 <HAL_RCC_ClockConfig+0x360>)
 800ab5a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800ab5c:	4a0a      	ldr	r2, [pc, #40]	; (800ab88 <HAL_RCC_ClockConfig+0x364>)
 800ab5e:	693b      	ldr	r3, [r7, #16]
 800ab60:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800ab62:	4b0a      	ldr	r3, [pc, #40]	; (800ab8c <HAL_RCC_ClockConfig+0x368>)
 800ab64:	681b      	ldr	r3, [r3, #0]
 800ab66:	4618      	mov	r0, r3
 800ab68:	f7f9 fb5c 	bl	8004224 <HAL_InitTick>
 800ab6c:	4603      	mov	r3, r0
 800ab6e:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800ab70:	7bfb      	ldrb	r3, [r7, #15]
}
 800ab72:	4618      	mov	r0, r3
 800ab74:	3718      	adds	r7, #24
 800ab76:	46bd      	mov	sp, r7
 800ab78:	bd80      	pop	{r7, pc}
 800ab7a:	bf00      	nop
 800ab7c:	58024400 	.word	0x58024400
 800ab80:	08020d08 	.word	0x08020d08
 800ab84:	20000120 	.word	0x20000120
 800ab88:	2000011c 	.word	0x2000011c
 800ab8c:	20000134 	.word	0x20000134

0800ab90 <HAL_RCC_EnableCSS>:
  *         allowing the MCU to perform rescue operations. The CSSI is linked to
  *         the Cortex-M NMI (Non-Mask-able Interrupt) exception vector.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 800ab90:	b480      	push	{r7}
 800ab92:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_CSSHSEON) ;
 800ab94:	4b05      	ldr	r3, [pc, #20]	; (800abac <HAL_RCC_EnableCSS+0x1c>)
 800ab96:	681b      	ldr	r3, [r3, #0]
 800ab98:	4a04      	ldr	r2, [pc, #16]	; (800abac <HAL_RCC_EnableCSS+0x1c>)
 800ab9a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800ab9e:	6013      	str	r3, [r2, #0]
}
 800aba0:	bf00      	nop
 800aba2:	46bd      	mov	sp, r7
 800aba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aba8:	4770      	bx	lr
 800abaa:	bf00      	nop
 800abac:	58024400 	.word	0x58024400

0800abb0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800abb0:	b480      	push	{r7}
 800abb2:	b089      	sub	sp, #36	; 0x24
 800abb4:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800abb6:	4bb3      	ldr	r3, [pc, #716]	; (800ae84 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800abb8:	691b      	ldr	r3, [r3, #16]
 800abba:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800abbe:	2b18      	cmp	r3, #24
 800abc0:	f200 8155 	bhi.w	800ae6e <HAL_RCC_GetSysClockFreq+0x2be>
 800abc4:	a201      	add	r2, pc, #4	; (adr r2, 800abcc <HAL_RCC_GetSysClockFreq+0x1c>)
 800abc6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800abca:	bf00      	nop
 800abcc:	0800ac31 	.word	0x0800ac31
 800abd0:	0800ae6f 	.word	0x0800ae6f
 800abd4:	0800ae6f 	.word	0x0800ae6f
 800abd8:	0800ae6f 	.word	0x0800ae6f
 800abdc:	0800ae6f 	.word	0x0800ae6f
 800abe0:	0800ae6f 	.word	0x0800ae6f
 800abe4:	0800ae6f 	.word	0x0800ae6f
 800abe8:	0800ae6f 	.word	0x0800ae6f
 800abec:	0800ac57 	.word	0x0800ac57
 800abf0:	0800ae6f 	.word	0x0800ae6f
 800abf4:	0800ae6f 	.word	0x0800ae6f
 800abf8:	0800ae6f 	.word	0x0800ae6f
 800abfc:	0800ae6f 	.word	0x0800ae6f
 800ac00:	0800ae6f 	.word	0x0800ae6f
 800ac04:	0800ae6f 	.word	0x0800ae6f
 800ac08:	0800ae6f 	.word	0x0800ae6f
 800ac0c:	0800ac5d 	.word	0x0800ac5d
 800ac10:	0800ae6f 	.word	0x0800ae6f
 800ac14:	0800ae6f 	.word	0x0800ae6f
 800ac18:	0800ae6f 	.word	0x0800ae6f
 800ac1c:	0800ae6f 	.word	0x0800ae6f
 800ac20:	0800ae6f 	.word	0x0800ae6f
 800ac24:	0800ae6f 	.word	0x0800ae6f
 800ac28:	0800ae6f 	.word	0x0800ae6f
 800ac2c:	0800ac63 	.word	0x0800ac63
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ac30:	4b94      	ldr	r3, [pc, #592]	; (800ae84 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800ac32:	681b      	ldr	r3, [r3, #0]
 800ac34:	f003 0320 	and.w	r3, r3, #32
 800ac38:	2b00      	cmp	r3, #0
 800ac3a:	d009      	beq.n	800ac50 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800ac3c:	4b91      	ldr	r3, [pc, #580]	; (800ae84 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800ac3e:	681b      	ldr	r3, [r3, #0]
 800ac40:	08db      	lsrs	r3, r3, #3
 800ac42:	f003 0303 	and.w	r3, r3, #3
 800ac46:	4a90      	ldr	r2, [pc, #576]	; (800ae88 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800ac48:	fa22 f303 	lsr.w	r3, r2, r3
 800ac4c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800ac4e:	e111      	b.n	800ae74 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800ac50:	4b8d      	ldr	r3, [pc, #564]	; (800ae88 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800ac52:	61bb      	str	r3, [r7, #24]
      break;
 800ac54:	e10e      	b.n	800ae74 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800ac56:	4b8d      	ldr	r3, [pc, #564]	; (800ae8c <HAL_RCC_GetSysClockFreq+0x2dc>)
 800ac58:	61bb      	str	r3, [r7, #24]
      break;
 800ac5a:	e10b      	b.n	800ae74 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 800ac5c:	4b8c      	ldr	r3, [pc, #560]	; (800ae90 <HAL_RCC_GetSysClockFreq+0x2e0>)
 800ac5e:	61bb      	str	r3, [r7, #24]
      break;
 800ac60:	e108      	b.n	800ae74 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800ac62:	4b88      	ldr	r3, [pc, #544]	; (800ae84 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800ac64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ac66:	f003 0303 	and.w	r3, r3, #3
 800ac6a:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 800ac6c:	4b85      	ldr	r3, [pc, #532]	; (800ae84 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800ac6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ac70:	091b      	lsrs	r3, r3, #4
 800ac72:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800ac76:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 800ac78:	4b82      	ldr	r3, [pc, #520]	; (800ae84 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800ac7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ac7c:	f003 0301 	and.w	r3, r3, #1
 800ac80:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800ac82:	4b80      	ldr	r3, [pc, #512]	; (800ae84 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800ac84:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ac86:	08db      	lsrs	r3, r3, #3
 800ac88:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800ac8c:	68fa      	ldr	r2, [r7, #12]
 800ac8e:	fb02 f303 	mul.w	r3, r2, r3
 800ac92:	ee07 3a90 	vmov	s15, r3
 800ac96:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ac9a:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800ac9e:	693b      	ldr	r3, [r7, #16]
 800aca0:	2b00      	cmp	r3, #0
 800aca2:	f000 80e1 	beq.w	800ae68 <HAL_RCC_GetSysClockFreq+0x2b8>
 800aca6:	697b      	ldr	r3, [r7, #20]
 800aca8:	2b02      	cmp	r3, #2
 800acaa:	f000 8083 	beq.w	800adb4 <HAL_RCC_GetSysClockFreq+0x204>
 800acae:	697b      	ldr	r3, [r7, #20]
 800acb0:	2b02      	cmp	r3, #2
 800acb2:	f200 80a1 	bhi.w	800adf8 <HAL_RCC_GetSysClockFreq+0x248>
 800acb6:	697b      	ldr	r3, [r7, #20]
 800acb8:	2b00      	cmp	r3, #0
 800acba:	d003      	beq.n	800acc4 <HAL_RCC_GetSysClockFreq+0x114>
 800acbc:	697b      	ldr	r3, [r7, #20]
 800acbe:	2b01      	cmp	r3, #1
 800acc0:	d056      	beq.n	800ad70 <HAL_RCC_GetSysClockFreq+0x1c0>
 800acc2:	e099      	b.n	800adf8 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800acc4:	4b6f      	ldr	r3, [pc, #444]	; (800ae84 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800acc6:	681b      	ldr	r3, [r3, #0]
 800acc8:	f003 0320 	and.w	r3, r3, #32
 800accc:	2b00      	cmp	r3, #0
 800acce:	d02d      	beq.n	800ad2c <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800acd0:	4b6c      	ldr	r3, [pc, #432]	; (800ae84 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800acd2:	681b      	ldr	r3, [r3, #0]
 800acd4:	08db      	lsrs	r3, r3, #3
 800acd6:	f003 0303 	and.w	r3, r3, #3
 800acda:	4a6b      	ldr	r2, [pc, #428]	; (800ae88 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800acdc:	fa22 f303 	lsr.w	r3, r2, r3
 800ace0:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800ace2:	687b      	ldr	r3, [r7, #4]
 800ace4:	ee07 3a90 	vmov	s15, r3
 800ace8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800acec:	693b      	ldr	r3, [r7, #16]
 800acee:	ee07 3a90 	vmov	s15, r3
 800acf2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800acf6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800acfa:	4b62      	ldr	r3, [pc, #392]	; (800ae84 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800acfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800acfe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ad02:	ee07 3a90 	vmov	s15, r3
 800ad06:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ad0a:	ed97 6a02 	vldr	s12, [r7, #8]
 800ad0e:	eddf 5a61 	vldr	s11, [pc, #388]	; 800ae94 <HAL_RCC_GetSysClockFreq+0x2e4>
 800ad12:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ad16:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ad1a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ad1e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ad22:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ad26:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800ad2a:	e087      	b.n	800ae3c <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800ad2c:	693b      	ldr	r3, [r7, #16]
 800ad2e:	ee07 3a90 	vmov	s15, r3
 800ad32:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ad36:	eddf 6a58 	vldr	s13, [pc, #352]	; 800ae98 <HAL_RCC_GetSysClockFreq+0x2e8>
 800ad3a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ad3e:	4b51      	ldr	r3, [pc, #324]	; (800ae84 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800ad40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ad42:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ad46:	ee07 3a90 	vmov	s15, r3
 800ad4a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ad4e:	ed97 6a02 	vldr	s12, [r7, #8]
 800ad52:	eddf 5a50 	vldr	s11, [pc, #320]	; 800ae94 <HAL_RCC_GetSysClockFreq+0x2e4>
 800ad56:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ad5a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ad5e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ad62:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ad66:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ad6a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800ad6e:	e065      	b.n	800ae3c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800ad70:	693b      	ldr	r3, [r7, #16]
 800ad72:	ee07 3a90 	vmov	s15, r3
 800ad76:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ad7a:	eddf 6a48 	vldr	s13, [pc, #288]	; 800ae9c <HAL_RCC_GetSysClockFreq+0x2ec>
 800ad7e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ad82:	4b40      	ldr	r3, [pc, #256]	; (800ae84 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800ad84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ad86:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ad8a:	ee07 3a90 	vmov	s15, r3
 800ad8e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ad92:	ed97 6a02 	vldr	s12, [r7, #8]
 800ad96:	eddf 5a3f 	vldr	s11, [pc, #252]	; 800ae94 <HAL_RCC_GetSysClockFreq+0x2e4>
 800ad9a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ad9e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ada2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ada6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800adaa:	ee67 7a27 	vmul.f32	s15, s14, s15
 800adae:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800adb2:	e043      	b.n	800ae3c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800adb4:	693b      	ldr	r3, [r7, #16]
 800adb6:	ee07 3a90 	vmov	s15, r3
 800adba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800adbe:	eddf 6a38 	vldr	s13, [pc, #224]	; 800aea0 <HAL_RCC_GetSysClockFreq+0x2f0>
 800adc2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800adc6:	4b2f      	ldr	r3, [pc, #188]	; (800ae84 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800adc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800adca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800adce:	ee07 3a90 	vmov	s15, r3
 800add2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800add6:	ed97 6a02 	vldr	s12, [r7, #8]
 800adda:	eddf 5a2e 	vldr	s11, [pc, #184]	; 800ae94 <HAL_RCC_GetSysClockFreq+0x2e4>
 800adde:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ade2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ade6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800adea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800adee:	ee67 7a27 	vmul.f32	s15, s14, s15
 800adf2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800adf6:	e021      	b.n	800ae3c <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800adf8:	693b      	ldr	r3, [r7, #16]
 800adfa:	ee07 3a90 	vmov	s15, r3
 800adfe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ae02:	eddf 6a26 	vldr	s13, [pc, #152]	; 800ae9c <HAL_RCC_GetSysClockFreq+0x2ec>
 800ae06:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ae0a:	4b1e      	ldr	r3, [pc, #120]	; (800ae84 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800ae0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ae0e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ae12:	ee07 3a90 	vmov	s15, r3
 800ae16:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ae1a:	ed97 6a02 	vldr	s12, [r7, #8]
 800ae1e:	eddf 5a1d 	vldr	s11, [pc, #116]	; 800ae94 <HAL_RCC_GetSysClockFreq+0x2e4>
 800ae22:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ae26:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ae2a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ae2e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ae32:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ae36:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800ae3a:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 800ae3c:	4b11      	ldr	r3, [pc, #68]	; (800ae84 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800ae3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ae40:	0a5b      	lsrs	r3, r3, #9
 800ae42:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ae46:	3301      	adds	r3, #1
 800ae48:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800ae4a:	683b      	ldr	r3, [r7, #0]
 800ae4c:	ee07 3a90 	vmov	s15, r3
 800ae50:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800ae54:	edd7 6a07 	vldr	s13, [r7, #28]
 800ae58:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ae5c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ae60:	ee17 3a90 	vmov	r3, s15
 800ae64:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800ae66:	e005      	b.n	800ae74 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 800ae68:	2300      	movs	r3, #0
 800ae6a:	61bb      	str	r3, [r7, #24]
      break;
 800ae6c:	e002      	b.n	800ae74 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800ae6e:	4b07      	ldr	r3, [pc, #28]	; (800ae8c <HAL_RCC_GetSysClockFreq+0x2dc>)
 800ae70:	61bb      	str	r3, [r7, #24]
      break;
 800ae72:	bf00      	nop
  }

  return sysclockfreq;
 800ae74:	69bb      	ldr	r3, [r7, #24]
}
 800ae76:	4618      	mov	r0, r3
 800ae78:	3724      	adds	r7, #36	; 0x24
 800ae7a:	46bd      	mov	sp, r7
 800ae7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae80:	4770      	bx	lr
 800ae82:	bf00      	nop
 800ae84:	58024400 	.word	0x58024400
 800ae88:	03d09000 	.word	0x03d09000
 800ae8c:	003d0900 	.word	0x003d0900
 800ae90:	00989680 	.word	0x00989680
 800ae94:	46000000 	.word	0x46000000
 800ae98:	4c742400 	.word	0x4c742400
 800ae9c:	4a742400 	.word	0x4a742400
 800aea0:	4b189680 	.word	0x4b189680

0800aea4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800aea4:	b580      	push	{r7, lr}
 800aea6:	b082      	sub	sp, #8
 800aea8:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800aeaa:	f7ff fe81 	bl	800abb0 <HAL_RCC_GetSysClockFreq>
 800aeae:	4602      	mov	r2, r0
 800aeb0:	4b10      	ldr	r3, [pc, #64]	; (800aef4 <HAL_RCC_GetHCLKFreq+0x50>)
 800aeb2:	699b      	ldr	r3, [r3, #24]
 800aeb4:	0a1b      	lsrs	r3, r3, #8
 800aeb6:	f003 030f 	and.w	r3, r3, #15
 800aeba:	490f      	ldr	r1, [pc, #60]	; (800aef8 <HAL_RCC_GetHCLKFreq+0x54>)
 800aebc:	5ccb      	ldrb	r3, [r1, r3]
 800aebe:	f003 031f 	and.w	r3, r3, #31
 800aec2:	fa22 f303 	lsr.w	r3, r2, r3
 800aec6:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800aec8:	4b0a      	ldr	r3, [pc, #40]	; (800aef4 <HAL_RCC_GetHCLKFreq+0x50>)
 800aeca:	699b      	ldr	r3, [r3, #24]
 800aecc:	f003 030f 	and.w	r3, r3, #15
 800aed0:	4a09      	ldr	r2, [pc, #36]	; (800aef8 <HAL_RCC_GetHCLKFreq+0x54>)
 800aed2:	5cd3      	ldrb	r3, [r2, r3]
 800aed4:	f003 031f 	and.w	r3, r3, #31
 800aed8:	687a      	ldr	r2, [r7, #4]
 800aeda:	fa22 f303 	lsr.w	r3, r2, r3
 800aede:	4a07      	ldr	r2, [pc, #28]	; (800aefc <HAL_RCC_GetHCLKFreq+0x58>)
 800aee0:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800aee2:	4a07      	ldr	r2, [pc, #28]	; (800af00 <HAL_RCC_GetHCLKFreq+0x5c>)
 800aee4:	687b      	ldr	r3, [r7, #4]
 800aee6:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800aee8:	4b04      	ldr	r3, [pc, #16]	; (800aefc <HAL_RCC_GetHCLKFreq+0x58>)
 800aeea:	681b      	ldr	r3, [r3, #0]
}
 800aeec:	4618      	mov	r0, r3
 800aeee:	3708      	adds	r7, #8
 800aef0:	46bd      	mov	sp, r7
 800aef2:	bd80      	pop	{r7, pc}
 800aef4:	58024400 	.word	0x58024400
 800aef8:	08020d08 	.word	0x08020d08
 800aefc:	20000120 	.word	0x20000120
 800af00:	2000011c 	.word	0x2000011c

0800af04 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800af04:	b580      	push	{r7, lr}
 800af06:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800af08:	f7ff ffcc 	bl	800aea4 <HAL_RCC_GetHCLKFreq>
 800af0c:	4602      	mov	r2, r0
 800af0e:	4b06      	ldr	r3, [pc, #24]	; (800af28 <HAL_RCC_GetPCLK1Freq+0x24>)
 800af10:	69db      	ldr	r3, [r3, #28]
 800af12:	091b      	lsrs	r3, r3, #4
 800af14:	f003 0307 	and.w	r3, r3, #7
 800af18:	4904      	ldr	r1, [pc, #16]	; (800af2c <HAL_RCC_GetPCLK1Freq+0x28>)
 800af1a:	5ccb      	ldrb	r3, [r1, r3]
 800af1c:	f003 031f 	and.w	r3, r3, #31
 800af20:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800af24:	4618      	mov	r0, r3
 800af26:	bd80      	pop	{r7, pc}
 800af28:	58024400 	.word	0x58024400
 800af2c:	08020d08 	.word	0x08020d08

0800af30 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800af30:	b580      	push	{r7, lr}
 800af32:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 800af34:	f7ff ffb6 	bl	800aea4 <HAL_RCC_GetHCLKFreq>
 800af38:	4602      	mov	r2, r0
 800af3a:	4b06      	ldr	r3, [pc, #24]	; (800af54 <HAL_RCC_GetPCLK2Freq+0x24>)
 800af3c:	69db      	ldr	r3, [r3, #28]
 800af3e:	0a1b      	lsrs	r3, r3, #8
 800af40:	f003 0307 	and.w	r3, r3, #7
 800af44:	4904      	ldr	r1, [pc, #16]	; (800af58 <HAL_RCC_GetPCLK2Freq+0x28>)
 800af46:	5ccb      	ldrb	r3, [r1, r3]
 800af48:	f003 031f 	and.w	r3, r3, #31
 800af4c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800af50:	4618      	mov	r0, r3
 800af52:	bd80      	pop	{r7, pc}
 800af54:	58024400 	.word	0x58024400
 800af58:	08020d08 	.word	0x08020d08

0800af5c <HAL_RCC_NMI_IRQHandler>:
  * @brief This function handles the RCC CSS interrupt request.
  * @note This API should be called under the NMI_Handler().
  * @retval None
  */
void HAL_RCC_NMI_IRQHandler(void)
{
 800af5c:	b580      	push	{r7, lr}
 800af5e:	af00      	add	r7, sp, #0
  /* Check RCC CSSF flag  */
  if (__HAL_RCC_GET_IT(RCC_IT_CSS))
 800af60:	4b07      	ldr	r3, [pc, #28]	; (800af80 <HAL_RCC_NMI_IRQHandler+0x24>)
 800af62:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800af64:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800af68:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800af6c:	d105      	bne.n	800af7a <HAL_RCC_NMI_IRQHandler+0x1e>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_CSSCallback();
 800af6e:	f000 f809 	bl	800af84 <HAL_RCC_CSSCallback>

    /* Clear RCC CSS pending bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 800af72:	4b03      	ldr	r3, [pc, #12]	; (800af80 <HAL_RCC_NMI_IRQHandler+0x24>)
 800af74:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800af78:	669a      	str	r2, [r3, #104]	; 0x68
  }
}
 800af7a:	bf00      	nop
 800af7c:	bd80      	pop	{r7, pc}
 800af7e:	bf00      	nop
 800af80:	58024400 	.word	0x58024400

0800af84 <HAL_RCC_CSSCallback>:
/**
  * @brief  RCC Clock Security System interrupt callback
  * @retval none
  */
__weak void HAL_RCC_CSSCallback(void)
{
 800af84:	b480      	push	{r7}
 800af86:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RCC_CSSCallback could be implemented in the user file
   */
}
 800af88:	bf00      	nop
 800af8a:	46bd      	mov	sp, r7
 800af8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af90:	4770      	bx	lr
	...

0800af94 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800af94:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800af98:	b0ca      	sub	sp, #296	; 0x128
 800af9a:	af00      	add	r7, sp, #0
 800af9c:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800afa0:	2300      	movs	r3, #0
 800afa2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800afa6:	2300      	movs	r3, #0
 800afa8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800afac:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800afb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800afb4:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 800afb8:	2500      	movs	r5, #0
 800afba:	ea54 0305 	orrs.w	r3, r4, r5
 800afbe:	d049      	beq.n	800b054 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 800afc0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800afc4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800afc6:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800afca:	d02f      	beq.n	800b02c <HAL_RCCEx_PeriphCLKConfig+0x98>
 800afcc:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800afd0:	d828      	bhi.n	800b024 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800afd2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800afd6:	d01a      	beq.n	800b00e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800afd8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800afdc:	d822      	bhi.n	800b024 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800afde:	2b00      	cmp	r3, #0
 800afe0:	d003      	beq.n	800afea <HAL_RCCEx_PeriphCLKConfig+0x56>
 800afe2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800afe6:	d007      	beq.n	800aff8 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800afe8:	e01c      	b.n	800b024 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800afea:	4bb8      	ldr	r3, [pc, #736]	; (800b2cc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800afec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800afee:	4ab7      	ldr	r2, [pc, #732]	; (800b2cc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800aff0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800aff4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800aff6:	e01a      	b.n	800b02e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800aff8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800affc:	3308      	adds	r3, #8
 800affe:	2102      	movs	r1, #2
 800b000:	4618      	mov	r0, r3
 800b002:	f002 fbb7 	bl	800d774 <RCCEx_PLL2_Config>
 800b006:	4603      	mov	r3, r0
 800b008:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800b00c:	e00f      	b.n	800b02e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800b00e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b012:	3328      	adds	r3, #40	; 0x28
 800b014:	2102      	movs	r1, #2
 800b016:	4618      	mov	r0, r3
 800b018:	f002 fc5e 	bl	800d8d8 <RCCEx_PLL3_Config>
 800b01c:	4603      	mov	r3, r0
 800b01e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800b022:	e004      	b.n	800b02e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b024:	2301      	movs	r3, #1
 800b026:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b02a:	e000      	b.n	800b02e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 800b02c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b02e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b032:	2b00      	cmp	r3, #0
 800b034:	d10a      	bne.n	800b04c <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800b036:	4ba5      	ldr	r3, [pc, #660]	; (800b2cc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800b038:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b03a:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800b03e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b042:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800b044:	4aa1      	ldr	r2, [pc, #644]	; (800b2cc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800b046:	430b      	orrs	r3, r1
 800b048:	6513      	str	r3, [r2, #80]	; 0x50
 800b04a:	e003      	b.n	800b054 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b04c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b050:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800b054:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b058:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b05c:	f402 7880 	and.w	r8, r2, #256	; 0x100
 800b060:	f04f 0900 	mov.w	r9, #0
 800b064:	ea58 0309 	orrs.w	r3, r8, r9
 800b068:	d047      	beq.n	800b0fa <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800b06a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b06e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b070:	2b04      	cmp	r3, #4
 800b072:	d82a      	bhi.n	800b0ca <HAL_RCCEx_PeriphCLKConfig+0x136>
 800b074:	a201      	add	r2, pc, #4	; (adr r2, 800b07c <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800b076:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b07a:	bf00      	nop
 800b07c:	0800b091 	.word	0x0800b091
 800b080:	0800b09f 	.word	0x0800b09f
 800b084:	0800b0b5 	.word	0x0800b0b5
 800b088:	0800b0d3 	.word	0x0800b0d3
 800b08c:	0800b0d3 	.word	0x0800b0d3
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b090:	4b8e      	ldr	r3, [pc, #568]	; (800b2cc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800b092:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b094:	4a8d      	ldr	r2, [pc, #564]	; (800b2cc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800b096:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b09a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800b09c:	e01a      	b.n	800b0d4 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b09e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b0a2:	3308      	adds	r3, #8
 800b0a4:	2100      	movs	r1, #0
 800b0a6:	4618      	mov	r0, r3
 800b0a8:	f002 fb64 	bl	800d774 <RCCEx_PLL2_Config>
 800b0ac:	4603      	mov	r3, r0
 800b0ae:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800b0b2:	e00f      	b.n	800b0d4 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800b0b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b0b8:	3328      	adds	r3, #40	; 0x28
 800b0ba:	2100      	movs	r1, #0
 800b0bc:	4618      	mov	r0, r3
 800b0be:	f002 fc0b 	bl	800d8d8 <RCCEx_PLL3_Config>
 800b0c2:	4603      	mov	r3, r0
 800b0c4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800b0c8:	e004      	b.n	800b0d4 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b0ca:	2301      	movs	r3, #1
 800b0cc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b0d0:	e000      	b.n	800b0d4 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800b0d2:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b0d4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b0d8:	2b00      	cmp	r3, #0
 800b0da:	d10a      	bne.n	800b0f2 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800b0dc:	4b7b      	ldr	r3, [pc, #492]	; (800b2cc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800b0de:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b0e0:	f023 0107 	bic.w	r1, r3, #7
 800b0e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b0e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b0ea:	4a78      	ldr	r2, [pc, #480]	; (800b2cc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800b0ec:	430b      	orrs	r3, r1
 800b0ee:	6513      	str	r3, [r2, #80]	; 0x50
 800b0f0:	e003      	b.n	800b0fa <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b0f2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b0f6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800b0fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b0fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b102:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 800b106:	f04f 0b00 	mov.w	fp, #0
 800b10a:	ea5a 030b 	orrs.w	r3, sl, fp
 800b10e:	d04c      	beq.n	800b1aa <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 800b110:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b114:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b116:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b11a:	d030      	beq.n	800b17e <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 800b11c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b120:	d829      	bhi.n	800b176 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800b122:	2bc0      	cmp	r3, #192	; 0xc0
 800b124:	d02d      	beq.n	800b182 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800b126:	2bc0      	cmp	r3, #192	; 0xc0
 800b128:	d825      	bhi.n	800b176 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800b12a:	2b80      	cmp	r3, #128	; 0x80
 800b12c:	d018      	beq.n	800b160 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 800b12e:	2b80      	cmp	r3, #128	; 0x80
 800b130:	d821      	bhi.n	800b176 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800b132:	2b00      	cmp	r3, #0
 800b134:	d002      	beq.n	800b13c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 800b136:	2b40      	cmp	r3, #64	; 0x40
 800b138:	d007      	beq.n	800b14a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 800b13a:	e01c      	b.n	800b176 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b13c:	4b63      	ldr	r3, [pc, #396]	; (800b2cc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800b13e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b140:	4a62      	ldr	r2, [pc, #392]	; (800b2cc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800b142:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b146:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800b148:	e01c      	b.n	800b184 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b14a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b14e:	3308      	adds	r3, #8
 800b150:	2100      	movs	r1, #0
 800b152:	4618      	mov	r0, r3
 800b154:	f002 fb0e 	bl	800d774 <RCCEx_PLL2_Config>
 800b158:	4603      	mov	r3, r0
 800b15a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800b15e:	e011      	b.n	800b184 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800b160:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b164:	3328      	adds	r3, #40	; 0x28
 800b166:	2100      	movs	r1, #0
 800b168:	4618      	mov	r0, r3
 800b16a:	f002 fbb5 	bl	800d8d8 <RCCEx_PLL3_Config>
 800b16e:	4603      	mov	r3, r0
 800b170:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800b174:	e006      	b.n	800b184 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b176:	2301      	movs	r3, #1
 800b178:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b17c:	e002      	b.n	800b184 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800b17e:	bf00      	nop
 800b180:	e000      	b.n	800b184 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800b182:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b184:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b188:	2b00      	cmp	r3, #0
 800b18a:	d10a      	bne.n	800b1a2 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 800b18c:	4b4f      	ldr	r3, [pc, #316]	; (800b2cc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800b18e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b190:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 800b194:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b198:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800b19a:	4a4c      	ldr	r2, [pc, #304]	; (800b2cc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800b19c:	430b      	orrs	r3, r1
 800b19e:	6513      	str	r3, [r2, #80]	; 0x50
 800b1a0:	e003      	b.n	800b1aa <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b1a2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b1a6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800b1aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b1ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b1b2:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 800b1b6:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800b1ba:	2300      	movs	r3, #0
 800b1bc:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 800b1c0:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	; 0x108
 800b1c4:	460b      	mov	r3, r1
 800b1c6:	4313      	orrs	r3, r2
 800b1c8:	d053      	beq.n	800b272 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 800b1ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b1ce:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800b1d2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800b1d6:	d035      	beq.n	800b244 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 800b1d8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800b1dc:	d82e      	bhi.n	800b23c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800b1de:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800b1e2:	d031      	beq.n	800b248 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 800b1e4:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800b1e8:	d828      	bhi.n	800b23c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800b1ea:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800b1ee:	d01a      	beq.n	800b226 <HAL_RCCEx_PeriphCLKConfig+0x292>
 800b1f0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800b1f4:	d822      	bhi.n	800b23c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800b1f6:	2b00      	cmp	r3, #0
 800b1f8:	d003      	beq.n	800b202 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 800b1fa:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800b1fe:	d007      	beq.n	800b210 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 800b200:	e01c      	b.n	800b23c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b202:	4b32      	ldr	r3, [pc, #200]	; (800b2cc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800b204:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b206:	4a31      	ldr	r2, [pc, #196]	; (800b2cc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800b208:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b20c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800b20e:	e01c      	b.n	800b24a <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b210:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b214:	3308      	adds	r3, #8
 800b216:	2100      	movs	r1, #0
 800b218:	4618      	mov	r0, r3
 800b21a:	f002 faab 	bl	800d774 <RCCEx_PLL2_Config>
 800b21e:	4603      	mov	r3, r0
 800b220:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800b224:	e011      	b.n	800b24a <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800b226:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b22a:	3328      	adds	r3, #40	; 0x28
 800b22c:	2100      	movs	r1, #0
 800b22e:	4618      	mov	r0, r3
 800b230:	f002 fb52 	bl	800d8d8 <RCCEx_PLL3_Config>
 800b234:	4603      	mov	r3, r0
 800b236:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800b23a:	e006      	b.n	800b24a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800b23c:	2301      	movs	r3, #1
 800b23e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b242:	e002      	b.n	800b24a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 800b244:	bf00      	nop
 800b246:	e000      	b.n	800b24a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 800b248:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b24a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b24e:	2b00      	cmp	r3, #0
 800b250:	d10b      	bne.n	800b26a <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800b252:	4b1e      	ldr	r3, [pc, #120]	; (800b2cc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800b254:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b256:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 800b25a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b25e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800b262:	4a1a      	ldr	r2, [pc, #104]	; (800b2cc <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800b264:	430b      	orrs	r3, r1
 800b266:	6593      	str	r3, [r2, #88]	; 0x58
 800b268:	e003      	b.n	800b272 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b26a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b26e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800b272:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b276:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b27a:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 800b27e:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800b282:	2300      	movs	r3, #0
 800b284:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800b288:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 800b28c:	460b      	mov	r3, r1
 800b28e:	4313      	orrs	r3, r2
 800b290:	d056      	beq.n	800b340 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 800b292:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b296:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800b29a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800b29e:	d038      	beq.n	800b312 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 800b2a0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800b2a4:	d831      	bhi.n	800b30a <HAL_RCCEx_PeriphCLKConfig+0x376>
 800b2a6:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800b2aa:	d034      	beq.n	800b316 <HAL_RCCEx_PeriphCLKConfig+0x382>
 800b2ac:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800b2b0:	d82b      	bhi.n	800b30a <HAL_RCCEx_PeriphCLKConfig+0x376>
 800b2b2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b2b6:	d01d      	beq.n	800b2f4 <HAL_RCCEx_PeriphCLKConfig+0x360>
 800b2b8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b2bc:	d825      	bhi.n	800b30a <HAL_RCCEx_PeriphCLKConfig+0x376>
 800b2be:	2b00      	cmp	r3, #0
 800b2c0:	d006      	beq.n	800b2d0 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 800b2c2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800b2c6:	d00a      	beq.n	800b2de <HAL_RCCEx_PeriphCLKConfig+0x34a>
 800b2c8:	e01f      	b.n	800b30a <HAL_RCCEx_PeriphCLKConfig+0x376>
 800b2ca:	bf00      	nop
 800b2cc:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b2d0:	4ba2      	ldr	r3, [pc, #648]	; (800b55c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800b2d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b2d4:	4aa1      	ldr	r2, [pc, #644]	; (800b55c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800b2d6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b2da:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800b2dc:	e01c      	b.n	800b318 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b2de:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b2e2:	3308      	adds	r3, #8
 800b2e4:	2100      	movs	r1, #0
 800b2e6:	4618      	mov	r0, r3
 800b2e8:	f002 fa44 	bl	800d774 <RCCEx_PLL2_Config>
 800b2ec:	4603      	mov	r3, r0
 800b2ee:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800b2f2:	e011      	b.n	800b318 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800b2f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b2f8:	3328      	adds	r3, #40	; 0x28
 800b2fa:	2100      	movs	r1, #0
 800b2fc:	4618      	mov	r0, r3
 800b2fe:	f002 faeb 	bl	800d8d8 <RCCEx_PLL3_Config>
 800b302:	4603      	mov	r3, r0
 800b304:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800b308:	e006      	b.n	800b318 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800b30a:	2301      	movs	r3, #1
 800b30c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b310:	e002      	b.n	800b318 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800b312:	bf00      	nop
 800b314:	e000      	b.n	800b318 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800b316:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b318:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b31c:	2b00      	cmp	r3, #0
 800b31e:	d10b      	bne.n	800b338 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800b320:	4b8e      	ldr	r3, [pc, #568]	; (800b55c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800b322:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b324:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 800b328:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b32c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800b330:	4a8a      	ldr	r2, [pc, #552]	; (800b55c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800b332:	430b      	orrs	r3, r1
 800b334:	6593      	str	r3, [r2, #88]	; 0x58
 800b336:	e003      	b.n	800b340 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b338:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b33c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800b340:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b344:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b348:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 800b34c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800b350:	2300      	movs	r3, #0
 800b352:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800b356:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 800b35a:	460b      	mov	r3, r1
 800b35c:	4313      	orrs	r3, r2
 800b35e:	d03a      	beq.n	800b3d6 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 800b360:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b364:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b366:	2b30      	cmp	r3, #48	; 0x30
 800b368:	d01f      	beq.n	800b3aa <HAL_RCCEx_PeriphCLKConfig+0x416>
 800b36a:	2b30      	cmp	r3, #48	; 0x30
 800b36c:	d819      	bhi.n	800b3a2 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800b36e:	2b20      	cmp	r3, #32
 800b370:	d00c      	beq.n	800b38c <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 800b372:	2b20      	cmp	r3, #32
 800b374:	d815      	bhi.n	800b3a2 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800b376:	2b00      	cmp	r3, #0
 800b378:	d019      	beq.n	800b3ae <HAL_RCCEx_PeriphCLKConfig+0x41a>
 800b37a:	2b10      	cmp	r3, #16
 800b37c:	d111      	bne.n	800b3a2 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b37e:	4b77      	ldr	r3, [pc, #476]	; (800b55c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800b380:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b382:	4a76      	ldr	r2, [pc, #472]	; (800b55c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800b384:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b388:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 800b38a:	e011      	b.n	800b3b0 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800b38c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b390:	3308      	adds	r3, #8
 800b392:	2102      	movs	r1, #2
 800b394:	4618      	mov	r0, r3
 800b396:	f002 f9ed 	bl	800d774 <RCCEx_PLL2_Config>
 800b39a:	4603      	mov	r3, r0
 800b39c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 800b3a0:	e006      	b.n	800b3b0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800b3a2:	2301      	movs	r3, #1
 800b3a4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b3a8:	e002      	b.n	800b3b0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800b3aa:	bf00      	nop
 800b3ac:	e000      	b.n	800b3b0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800b3ae:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b3b0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b3b4:	2b00      	cmp	r3, #0
 800b3b6:	d10a      	bne.n	800b3ce <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800b3b8:	4b68      	ldr	r3, [pc, #416]	; (800b55c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800b3ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b3bc:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 800b3c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b3c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b3c6:	4a65      	ldr	r2, [pc, #404]	; (800b55c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800b3c8:	430b      	orrs	r3, r1
 800b3ca:	64d3      	str	r3, [r2, #76]	; 0x4c
 800b3cc:	e003      	b.n	800b3d6 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b3ce:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b3d2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800b3d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b3da:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b3de:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 800b3e2:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800b3e6:	2300      	movs	r3, #0
 800b3e8:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800b3ec:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 800b3f0:	460b      	mov	r3, r1
 800b3f2:	4313      	orrs	r3, r2
 800b3f4:	d051      	beq.n	800b49a <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800b3f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b3fa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b3fc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b400:	d035      	beq.n	800b46e <HAL_RCCEx_PeriphCLKConfig+0x4da>
 800b402:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b406:	d82e      	bhi.n	800b466 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800b408:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800b40c:	d031      	beq.n	800b472 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 800b40e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800b412:	d828      	bhi.n	800b466 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800b414:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b418:	d01a      	beq.n	800b450 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 800b41a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b41e:	d822      	bhi.n	800b466 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800b420:	2b00      	cmp	r3, #0
 800b422:	d003      	beq.n	800b42c <HAL_RCCEx_PeriphCLKConfig+0x498>
 800b424:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b428:	d007      	beq.n	800b43a <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 800b42a:	e01c      	b.n	800b466 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b42c:	4b4b      	ldr	r3, [pc, #300]	; (800b55c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800b42e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b430:	4a4a      	ldr	r2, [pc, #296]	; (800b55c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800b432:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b436:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800b438:	e01c      	b.n	800b474 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b43a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b43e:	3308      	adds	r3, #8
 800b440:	2100      	movs	r1, #0
 800b442:	4618      	mov	r0, r3
 800b444:	f002 f996 	bl	800d774 <RCCEx_PLL2_Config>
 800b448:	4603      	mov	r3, r0
 800b44a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800b44e:	e011      	b.n	800b474 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800b450:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b454:	3328      	adds	r3, #40	; 0x28
 800b456:	2100      	movs	r1, #0
 800b458:	4618      	mov	r0, r3
 800b45a:	f002 fa3d 	bl	800d8d8 <RCCEx_PLL3_Config>
 800b45e:	4603      	mov	r3, r0
 800b460:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800b464:	e006      	b.n	800b474 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b466:	2301      	movs	r3, #1
 800b468:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b46c:	e002      	b.n	800b474 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800b46e:	bf00      	nop
 800b470:	e000      	b.n	800b474 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800b472:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b474:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b478:	2b00      	cmp	r3, #0
 800b47a:	d10a      	bne.n	800b492 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800b47c:	4b37      	ldr	r3, [pc, #220]	; (800b55c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800b47e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b480:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 800b484:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b488:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b48a:	4a34      	ldr	r2, [pc, #208]	; (800b55c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800b48c:	430b      	orrs	r3, r1
 800b48e:	6513      	str	r3, [r2, #80]	; 0x50
 800b490:	e003      	b.n	800b49a <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b492:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b496:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800b49a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b49e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4a2:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 800b4a6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800b4aa:	2300      	movs	r3, #0
 800b4ac:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800b4b0:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 800b4b4:	460b      	mov	r3, r1
 800b4b6:	4313      	orrs	r3, r2
 800b4b8:	d056      	beq.n	800b568 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800b4ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b4be:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b4c0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800b4c4:	d033      	beq.n	800b52e <HAL_RCCEx_PeriphCLKConfig+0x59a>
 800b4c6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800b4ca:	d82c      	bhi.n	800b526 <HAL_RCCEx_PeriphCLKConfig+0x592>
 800b4cc:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800b4d0:	d02f      	beq.n	800b532 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 800b4d2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800b4d6:	d826      	bhi.n	800b526 <HAL_RCCEx_PeriphCLKConfig+0x592>
 800b4d8:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800b4dc:	d02b      	beq.n	800b536 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 800b4de:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800b4e2:	d820      	bhi.n	800b526 <HAL_RCCEx_PeriphCLKConfig+0x592>
 800b4e4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b4e8:	d012      	beq.n	800b510 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 800b4ea:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b4ee:	d81a      	bhi.n	800b526 <HAL_RCCEx_PeriphCLKConfig+0x592>
 800b4f0:	2b00      	cmp	r3, #0
 800b4f2:	d022      	beq.n	800b53a <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 800b4f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b4f8:	d115      	bne.n	800b526 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800b4fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b4fe:	3308      	adds	r3, #8
 800b500:	2101      	movs	r1, #1
 800b502:	4618      	mov	r0, r3
 800b504:	f002 f936 	bl	800d774 <RCCEx_PLL2_Config>
 800b508:	4603      	mov	r3, r0
 800b50a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800b50e:	e015      	b.n	800b53c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800b510:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b514:	3328      	adds	r3, #40	; 0x28
 800b516:	2101      	movs	r1, #1
 800b518:	4618      	mov	r0, r3
 800b51a:	f002 f9dd 	bl	800d8d8 <RCCEx_PLL3_Config>
 800b51e:	4603      	mov	r3, r0
 800b520:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800b524:	e00a      	b.n	800b53c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b526:	2301      	movs	r3, #1
 800b528:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b52c:	e006      	b.n	800b53c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800b52e:	bf00      	nop
 800b530:	e004      	b.n	800b53c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800b532:	bf00      	nop
 800b534:	e002      	b.n	800b53c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800b536:	bf00      	nop
 800b538:	e000      	b.n	800b53c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800b53a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b53c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b540:	2b00      	cmp	r3, #0
 800b542:	d10d      	bne.n	800b560 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800b544:	4b05      	ldr	r3, [pc, #20]	; (800b55c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800b546:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b548:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 800b54c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b550:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b552:	4a02      	ldr	r2, [pc, #8]	; (800b55c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800b554:	430b      	orrs	r3, r1
 800b556:	6513      	str	r3, [r2, #80]	; 0x50
 800b558:	e006      	b.n	800b568 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800b55a:	bf00      	nop
 800b55c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b560:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b564:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800b568:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b56c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b570:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 800b574:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800b578:	2300      	movs	r3, #0
 800b57a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800b57e:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 800b582:	460b      	mov	r3, r1
 800b584:	4313      	orrs	r3, r2
 800b586:	d055      	beq.n	800b634 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 800b588:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b58c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800b590:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800b594:	d033      	beq.n	800b5fe <HAL_RCCEx_PeriphCLKConfig+0x66a>
 800b596:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800b59a:	d82c      	bhi.n	800b5f6 <HAL_RCCEx_PeriphCLKConfig+0x662>
 800b59c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b5a0:	d02f      	beq.n	800b602 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 800b5a2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b5a6:	d826      	bhi.n	800b5f6 <HAL_RCCEx_PeriphCLKConfig+0x662>
 800b5a8:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800b5ac:	d02b      	beq.n	800b606 <HAL_RCCEx_PeriphCLKConfig+0x672>
 800b5ae:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800b5b2:	d820      	bhi.n	800b5f6 <HAL_RCCEx_PeriphCLKConfig+0x662>
 800b5b4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b5b8:	d012      	beq.n	800b5e0 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 800b5ba:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b5be:	d81a      	bhi.n	800b5f6 <HAL_RCCEx_PeriphCLKConfig+0x662>
 800b5c0:	2b00      	cmp	r3, #0
 800b5c2:	d022      	beq.n	800b60a <HAL_RCCEx_PeriphCLKConfig+0x676>
 800b5c4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b5c8:	d115      	bne.n	800b5f6 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800b5ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b5ce:	3308      	adds	r3, #8
 800b5d0:	2101      	movs	r1, #1
 800b5d2:	4618      	mov	r0, r3
 800b5d4:	f002 f8ce 	bl	800d774 <RCCEx_PLL2_Config>
 800b5d8:	4603      	mov	r3, r0
 800b5da:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800b5de:	e015      	b.n	800b60c <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800b5e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b5e4:	3328      	adds	r3, #40	; 0x28
 800b5e6:	2101      	movs	r1, #1
 800b5e8:	4618      	mov	r0, r3
 800b5ea:	f002 f975 	bl	800d8d8 <RCCEx_PLL3_Config>
 800b5ee:	4603      	mov	r3, r0
 800b5f0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800b5f4:	e00a      	b.n	800b60c <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 800b5f6:	2301      	movs	r3, #1
 800b5f8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b5fc:	e006      	b.n	800b60c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800b5fe:	bf00      	nop
 800b600:	e004      	b.n	800b60c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800b602:	bf00      	nop
 800b604:	e002      	b.n	800b60c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800b606:	bf00      	nop
 800b608:	e000      	b.n	800b60c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800b60a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b60c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b610:	2b00      	cmp	r3, #0
 800b612:	d10b      	bne.n	800b62c <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800b614:	4ba3      	ldr	r3, [pc, #652]	; (800b8a4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b616:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b618:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 800b61c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b620:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800b624:	4a9f      	ldr	r2, [pc, #636]	; (800b8a4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b626:	430b      	orrs	r3, r1
 800b628:	6593      	str	r3, [r2, #88]	; 0x58
 800b62a:	e003      	b.n	800b634 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b62c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b630:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800b634:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b638:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b63c:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 800b640:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800b644:	2300      	movs	r3, #0
 800b646:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800b64a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800b64e:	460b      	mov	r3, r1
 800b650:	4313      	orrs	r3, r2
 800b652:	d037      	beq.n	800b6c4 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 800b654:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b658:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b65a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b65e:	d00e      	beq.n	800b67e <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 800b660:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b664:	d816      	bhi.n	800b694 <HAL_RCCEx_PeriphCLKConfig+0x700>
 800b666:	2b00      	cmp	r3, #0
 800b668:	d018      	beq.n	800b69c <HAL_RCCEx_PeriphCLKConfig+0x708>
 800b66a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b66e:	d111      	bne.n	800b694 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b670:	4b8c      	ldr	r3, [pc, #560]	; (800b8a4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b672:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b674:	4a8b      	ldr	r2, [pc, #556]	; (800b8a4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b676:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b67a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800b67c:	e00f      	b.n	800b69e <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800b67e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b682:	3308      	adds	r3, #8
 800b684:	2101      	movs	r1, #1
 800b686:	4618      	mov	r0, r3
 800b688:	f002 f874 	bl	800d774 <RCCEx_PLL2_Config>
 800b68c:	4603      	mov	r3, r0
 800b68e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800b692:	e004      	b.n	800b69e <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b694:	2301      	movs	r3, #1
 800b696:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b69a:	e000      	b.n	800b69e <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 800b69c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b69e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b6a2:	2b00      	cmp	r3, #0
 800b6a4:	d10a      	bne.n	800b6bc <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800b6a6:	4b7f      	ldr	r3, [pc, #508]	; (800b8a4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b6a8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b6aa:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 800b6ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b6b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b6b4:	4a7b      	ldr	r2, [pc, #492]	; (800b8a4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b6b6:	430b      	orrs	r3, r1
 800b6b8:	6513      	str	r3, [r2, #80]	; 0x50
 800b6ba:	e003      	b.n	800b6c4 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b6bc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b6c0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800b6c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b6c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b6cc:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 800b6d0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800b6d4:	2300      	movs	r3, #0
 800b6d6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800b6da:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 800b6de:	460b      	mov	r3, r1
 800b6e0:	4313      	orrs	r3, r2
 800b6e2:	d039      	beq.n	800b758 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 800b6e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b6e8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b6ea:	2b03      	cmp	r3, #3
 800b6ec:	d81c      	bhi.n	800b728 <HAL_RCCEx_PeriphCLKConfig+0x794>
 800b6ee:	a201      	add	r2, pc, #4	; (adr r2, 800b6f4 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 800b6f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b6f4:	0800b731 	.word	0x0800b731
 800b6f8:	0800b705 	.word	0x0800b705
 800b6fc:	0800b713 	.word	0x0800b713
 800b700:	0800b731 	.word	0x0800b731
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b704:	4b67      	ldr	r3, [pc, #412]	; (800b8a4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b706:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b708:	4a66      	ldr	r2, [pc, #408]	; (800b8a4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b70a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b70e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 800b710:	e00f      	b.n	800b732 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800b712:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b716:	3308      	adds	r3, #8
 800b718:	2102      	movs	r1, #2
 800b71a:	4618      	mov	r0, r3
 800b71c:	f002 f82a 	bl	800d774 <RCCEx_PLL2_Config>
 800b720:	4603      	mov	r3, r0
 800b722:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 800b726:	e004      	b.n	800b732 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800b728:	2301      	movs	r3, #1
 800b72a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b72e:	e000      	b.n	800b732 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 800b730:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b732:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b736:	2b00      	cmp	r3, #0
 800b738:	d10a      	bne.n	800b750 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800b73a:	4b5a      	ldr	r3, [pc, #360]	; (800b8a4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b73c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b73e:	f023 0103 	bic.w	r1, r3, #3
 800b742:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b746:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b748:	4a56      	ldr	r2, [pc, #344]	; (800b8a4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b74a:	430b      	orrs	r3, r1
 800b74c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800b74e:	e003      	b.n	800b758 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b750:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b754:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800b758:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b75c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b760:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 800b764:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800b768:	2300      	movs	r3, #0
 800b76a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800b76e:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 800b772:	460b      	mov	r3, r1
 800b774:	4313      	orrs	r3, r2
 800b776:	f000 809f 	beq.w	800b8b8 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800b77a:	4b4b      	ldr	r3, [pc, #300]	; (800b8a8 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800b77c:	681b      	ldr	r3, [r3, #0]
 800b77e:	4a4a      	ldr	r2, [pc, #296]	; (800b8a8 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800b780:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b784:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800b786:	f7f8 fd97 	bl	80042b8 <HAL_GetTick>
 800b78a:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800b78e:	e00b      	b.n	800b7a8 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800b790:	f7f8 fd92 	bl	80042b8 <HAL_GetTick>
 800b794:	4602      	mov	r2, r0
 800b796:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800b79a:	1ad3      	subs	r3, r2, r3
 800b79c:	2b64      	cmp	r3, #100	; 0x64
 800b79e:	d903      	bls.n	800b7a8 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 800b7a0:	2303      	movs	r3, #3
 800b7a2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b7a6:	e005      	b.n	800b7b4 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800b7a8:	4b3f      	ldr	r3, [pc, #252]	; (800b8a8 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800b7aa:	681b      	ldr	r3, [r3, #0]
 800b7ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b7b0:	2b00      	cmp	r3, #0
 800b7b2:	d0ed      	beq.n	800b790 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 800b7b4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b7b8:	2b00      	cmp	r3, #0
 800b7ba:	d179      	bne.n	800b8b0 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800b7bc:	4b39      	ldr	r3, [pc, #228]	; (800b8a4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b7be:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800b7c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b7c4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800b7c8:	4053      	eors	r3, r2
 800b7ca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b7ce:	2b00      	cmp	r3, #0
 800b7d0:	d015      	beq.n	800b7fe <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800b7d2:	4b34      	ldr	r3, [pc, #208]	; (800b8a4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b7d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b7d6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b7da:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800b7de:	4b31      	ldr	r3, [pc, #196]	; (800b8a4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b7e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b7e2:	4a30      	ldr	r2, [pc, #192]	; (800b8a4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b7e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b7e8:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800b7ea:	4b2e      	ldr	r3, [pc, #184]	; (800b8a4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b7ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b7ee:	4a2d      	ldr	r2, [pc, #180]	; (800b8a4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b7f0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b7f4:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800b7f6:	4a2b      	ldr	r2, [pc, #172]	; (800b8a4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b7f8:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800b7fc:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800b7fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b802:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800b806:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b80a:	d118      	bne.n	800b83e <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b80c:	f7f8 fd54 	bl	80042b8 <HAL_GetTick>
 800b810:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800b814:	e00d      	b.n	800b832 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800b816:	f7f8 fd4f 	bl	80042b8 <HAL_GetTick>
 800b81a:	4602      	mov	r2, r0
 800b81c:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800b820:	1ad2      	subs	r2, r2, r3
 800b822:	f241 3388 	movw	r3, #5000	; 0x1388
 800b826:	429a      	cmp	r2, r3
 800b828:	d903      	bls.n	800b832 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 800b82a:	2303      	movs	r3, #3
 800b82c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
            break;
 800b830:	e005      	b.n	800b83e <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800b832:	4b1c      	ldr	r3, [pc, #112]	; (800b8a4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b834:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b836:	f003 0302 	and.w	r3, r3, #2
 800b83a:	2b00      	cmp	r3, #0
 800b83c:	d0eb      	beq.n	800b816 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 800b83e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b842:	2b00      	cmp	r3, #0
 800b844:	d129      	bne.n	800b89a <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800b846:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b84a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800b84e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b852:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b856:	d10e      	bne.n	800b876 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 800b858:	4b12      	ldr	r3, [pc, #72]	; (800b8a4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b85a:	691b      	ldr	r3, [r3, #16]
 800b85c:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 800b860:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b864:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800b868:	091a      	lsrs	r2, r3, #4
 800b86a:	4b10      	ldr	r3, [pc, #64]	; (800b8ac <HAL_RCCEx_PeriphCLKConfig+0x918>)
 800b86c:	4013      	ands	r3, r2
 800b86e:	4a0d      	ldr	r2, [pc, #52]	; (800b8a4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b870:	430b      	orrs	r3, r1
 800b872:	6113      	str	r3, [r2, #16]
 800b874:	e005      	b.n	800b882 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 800b876:	4b0b      	ldr	r3, [pc, #44]	; (800b8a4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b878:	691b      	ldr	r3, [r3, #16]
 800b87a:	4a0a      	ldr	r2, [pc, #40]	; (800b8a4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b87c:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800b880:	6113      	str	r3, [r2, #16]
 800b882:	4b08      	ldr	r3, [pc, #32]	; (800b8a4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b884:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800b886:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b88a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800b88e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b892:	4a04      	ldr	r2, [pc, #16]	; (800b8a4 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b894:	430b      	orrs	r3, r1
 800b896:	6713      	str	r3, [r2, #112]	; 0x70
 800b898:	e00e      	b.n	800b8b8 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800b89a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b89e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
 800b8a2:	e009      	b.n	800b8b8 <HAL_RCCEx_PeriphCLKConfig+0x924>
 800b8a4:	58024400 	.word	0x58024400
 800b8a8:	58024800 	.word	0x58024800
 800b8ac:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b8b0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b8b4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800b8b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b8bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b8c0:	f002 0301 	and.w	r3, r2, #1
 800b8c4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800b8c8:	2300      	movs	r3, #0
 800b8ca:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800b8ce:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800b8d2:	460b      	mov	r3, r1
 800b8d4:	4313      	orrs	r3, r2
 800b8d6:	f000 8089 	beq.w	800b9ec <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800b8da:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b8de:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b8e0:	2b28      	cmp	r3, #40	; 0x28
 800b8e2:	d86b      	bhi.n	800b9bc <HAL_RCCEx_PeriphCLKConfig+0xa28>
 800b8e4:	a201      	add	r2, pc, #4	; (adr r2, 800b8ec <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800b8e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b8ea:	bf00      	nop
 800b8ec:	0800b9c5 	.word	0x0800b9c5
 800b8f0:	0800b9bd 	.word	0x0800b9bd
 800b8f4:	0800b9bd 	.word	0x0800b9bd
 800b8f8:	0800b9bd 	.word	0x0800b9bd
 800b8fc:	0800b9bd 	.word	0x0800b9bd
 800b900:	0800b9bd 	.word	0x0800b9bd
 800b904:	0800b9bd 	.word	0x0800b9bd
 800b908:	0800b9bd 	.word	0x0800b9bd
 800b90c:	0800b991 	.word	0x0800b991
 800b910:	0800b9bd 	.word	0x0800b9bd
 800b914:	0800b9bd 	.word	0x0800b9bd
 800b918:	0800b9bd 	.word	0x0800b9bd
 800b91c:	0800b9bd 	.word	0x0800b9bd
 800b920:	0800b9bd 	.word	0x0800b9bd
 800b924:	0800b9bd 	.word	0x0800b9bd
 800b928:	0800b9bd 	.word	0x0800b9bd
 800b92c:	0800b9a7 	.word	0x0800b9a7
 800b930:	0800b9bd 	.word	0x0800b9bd
 800b934:	0800b9bd 	.word	0x0800b9bd
 800b938:	0800b9bd 	.word	0x0800b9bd
 800b93c:	0800b9bd 	.word	0x0800b9bd
 800b940:	0800b9bd 	.word	0x0800b9bd
 800b944:	0800b9bd 	.word	0x0800b9bd
 800b948:	0800b9bd 	.word	0x0800b9bd
 800b94c:	0800b9c5 	.word	0x0800b9c5
 800b950:	0800b9bd 	.word	0x0800b9bd
 800b954:	0800b9bd 	.word	0x0800b9bd
 800b958:	0800b9bd 	.word	0x0800b9bd
 800b95c:	0800b9bd 	.word	0x0800b9bd
 800b960:	0800b9bd 	.word	0x0800b9bd
 800b964:	0800b9bd 	.word	0x0800b9bd
 800b968:	0800b9bd 	.word	0x0800b9bd
 800b96c:	0800b9c5 	.word	0x0800b9c5
 800b970:	0800b9bd 	.word	0x0800b9bd
 800b974:	0800b9bd 	.word	0x0800b9bd
 800b978:	0800b9bd 	.word	0x0800b9bd
 800b97c:	0800b9bd 	.word	0x0800b9bd
 800b980:	0800b9bd 	.word	0x0800b9bd
 800b984:	0800b9bd 	.word	0x0800b9bd
 800b988:	0800b9bd 	.word	0x0800b9bd
 800b98c:	0800b9c5 	.word	0x0800b9c5
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800b990:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b994:	3308      	adds	r3, #8
 800b996:	2101      	movs	r1, #1
 800b998:	4618      	mov	r0, r3
 800b99a:	f001 feeb 	bl	800d774 <RCCEx_PLL2_Config>
 800b99e:	4603      	mov	r3, r0
 800b9a0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800b9a4:	e00f      	b.n	800b9c6 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800b9a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b9aa:	3328      	adds	r3, #40	; 0x28
 800b9ac:	2101      	movs	r1, #1
 800b9ae:	4618      	mov	r0, r3
 800b9b0:	f001 ff92 	bl	800d8d8 <RCCEx_PLL3_Config>
 800b9b4:	4603      	mov	r3, r0
 800b9b6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800b9ba:	e004      	b.n	800b9c6 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b9bc:	2301      	movs	r3, #1
 800b9be:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b9c2:	e000      	b.n	800b9c6 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 800b9c4:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b9c6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b9ca:	2b00      	cmp	r3, #0
 800b9cc:	d10a      	bne.n	800b9e4 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800b9ce:	4bbf      	ldr	r3, [pc, #764]	; (800bccc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800b9d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b9d2:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 800b9d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b9da:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b9dc:	4abb      	ldr	r2, [pc, #748]	; (800bccc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800b9de:	430b      	orrs	r3, r1
 800b9e0:	6553      	str	r3, [r2, #84]	; 0x54
 800b9e2:	e003      	b.n	800b9ec <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b9e4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b9e8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800b9ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b9f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b9f4:	f002 0302 	and.w	r3, r2, #2
 800b9f8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800b9fc:	2300      	movs	r3, #0
 800b9fe:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800ba02:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 800ba06:	460b      	mov	r3, r1
 800ba08:	4313      	orrs	r3, r2
 800ba0a:	d041      	beq.n	800ba90 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 800ba0c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ba10:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ba12:	2b05      	cmp	r3, #5
 800ba14:	d824      	bhi.n	800ba60 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 800ba16:	a201      	add	r2, pc, #4	; (adr r2, 800ba1c <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 800ba18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ba1c:	0800ba69 	.word	0x0800ba69
 800ba20:	0800ba35 	.word	0x0800ba35
 800ba24:	0800ba4b 	.word	0x0800ba4b
 800ba28:	0800ba69 	.word	0x0800ba69
 800ba2c:	0800ba69 	.word	0x0800ba69
 800ba30:	0800ba69 	.word	0x0800ba69
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800ba34:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ba38:	3308      	adds	r3, #8
 800ba3a:	2101      	movs	r1, #1
 800ba3c:	4618      	mov	r0, r3
 800ba3e:	f001 fe99 	bl	800d774 <RCCEx_PLL2_Config>
 800ba42:	4603      	mov	r3, r0
 800ba44:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800ba48:	e00f      	b.n	800ba6a <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800ba4a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ba4e:	3328      	adds	r3, #40	; 0x28
 800ba50:	2101      	movs	r1, #1
 800ba52:	4618      	mov	r0, r3
 800ba54:	f001 ff40 	bl	800d8d8 <RCCEx_PLL3_Config>
 800ba58:	4603      	mov	r3, r0
 800ba5a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800ba5e:	e004      	b.n	800ba6a <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800ba60:	2301      	movs	r3, #1
 800ba62:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800ba66:	e000      	b.n	800ba6a <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 800ba68:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ba6a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ba6e:	2b00      	cmp	r3, #0
 800ba70:	d10a      	bne.n	800ba88 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800ba72:	4b96      	ldr	r3, [pc, #600]	; (800bccc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800ba74:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ba76:	f023 0107 	bic.w	r1, r3, #7
 800ba7a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ba7e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ba80:	4a92      	ldr	r2, [pc, #584]	; (800bccc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800ba82:	430b      	orrs	r3, r1
 800ba84:	6553      	str	r3, [r2, #84]	; 0x54
 800ba86:	e003      	b.n	800ba90 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ba88:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ba8c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800ba90:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ba94:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba98:	f002 0304 	and.w	r3, r2, #4
 800ba9c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800baa0:	2300      	movs	r3, #0
 800baa2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800baa6:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 800baaa:	460b      	mov	r3, r1
 800baac:	4313      	orrs	r3, r2
 800baae:	d044      	beq.n	800bb3a <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800bab0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bab4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800bab8:	2b05      	cmp	r3, #5
 800baba:	d825      	bhi.n	800bb08 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 800babc:	a201      	add	r2, pc, #4	; (adr r2, 800bac4 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 800babe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bac2:	bf00      	nop
 800bac4:	0800bb11 	.word	0x0800bb11
 800bac8:	0800badd 	.word	0x0800badd
 800bacc:	0800baf3 	.word	0x0800baf3
 800bad0:	0800bb11 	.word	0x0800bb11
 800bad4:	0800bb11 	.word	0x0800bb11
 800bad8:	0800bb11 	.word	0x0800bb11
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800badc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bae0:	3308      	adds	r3, #8
 800bae2:	2101      	movs	r1, #1
 800bae4:	4618      	mov	r0, r3
 800bae6:	f001 fe45 	bl	800d774 <RCCEx_PLL2_Config>
 800baea:	4603      	mov	r3, r0
 800baec:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800baf0:	e00f      	b.n	800bb12 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800baf2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800baf6:	3328      	adds	r3, #40	; 0x28
 800baf8:	2101      	movs	r1, #1
 800bafa:	4618      	mov	r0, r3
 800bafc:	f001 feec 	bl	800d8d8 <RCCEx_PLL3_Config>
 800bb00:	4603      	mov	r3, r0
 800bb02:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800bb06:	e004      	b.n	800bb12 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800bb08:	2301      	movs	r3, #1
 800bb0a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800bb0e:	e000      	b.n	800bb12 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 800bb10:	bf00      	nop
    }

    if (ret == HAL_OK)
 800bb12:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800bb16:	2b00      	cmp	r3, #0
 800bb18:	d10b      	bne.n	800bb32 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800bb1a:	4b6c      	ldr	r3, [pc, #432]	; (800bccc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800bb1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bb1e:	f023 0107 	bic.w	r1, r3, #7
 800bb22:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bb26:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800bb2a:	4a68      	ldr	r2, [pc, #416]	; (800bccc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800bb2c:	430b      	orrs	r3, r1
 800bb2e:	6593      	str	r3, [r2, #88]	; 0x58
 800bb30:	e003      	b.n	800bb3a <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bb32:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800bb36:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800bb3a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bb3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb42:	f002 0320 	and.w	r3, r2, #32
 800bb46:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800bb4a:	2300      	movs	r3, #0
 800bb4c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800bb50:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800bb54:	460b      	mov	r3, r1
 800bb56:	4313      	orrs	r3, r2
 800bb58:	d055      	beq.n	800bc06 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800bb5a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bb5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bb62:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800bb66:	d033      	beq.n	800bbd0 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 800bb68:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800bb6c:	d82c      	bhi.n	800bbc8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800bb6e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bb72:	d02f      	beq.n	800bbd4 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 800bb74:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bb78:	d826      	bhi.n	800bbc8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800bb7a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800bb7e:	d02b      	beq.n	800bbd8 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 800bb80:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800bb84:	d820      	bhi.n	800bbc8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800bb86:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bb8a:	d012      	beq.n	800bbb2 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 800bb8c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800bb90:	d81a      	bhi.n	800bbc8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800bb92:	2b00      	cmp	r3, #0
 800bb94:	d022      	beq.n	800bbdc <HAL_RCCEx_PeriphCLKConfig+0xc48>
 800bb96:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800bb9a:	d115      	bne.n	800bbc8 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800bb9c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bba0:	3308      	adds	r3, #8
 800bba2:	2100      	movs	r1, #0
 800bba4:	4618      	mov	r0, r3
 800bba6:	f001 fde5 	bl	800d774 <RCCEx_PLL2_Config>
 800bbaa:	4603      	mov	r3, r0
 800bbac:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800bbb0:	e015      	b.n	800bbde <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800bbb2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bbb6:	3328      	adds	r3, #40	; 0x28
 800bbb8:	2102      	movs	r1, #2
 800bbba:	4618      	mov	r0, r3
 800bbbc:	f001 fe8c 	bl	800d8d8 <RCCEx_PLL3_Config>
 800bbc0:	4603      	mov	r3, r0
 800bbc2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800bbc6:	e00a      	b.n	800bbde <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800bbc8:	2301      	movs	r3, #1
 800bbca:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800bbce:	e006      	b.n	800bbde <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800bbd0:	bf00      	nop
 800bbd2:	e004      	b.n	800bbde <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800bbd4:	bf00      	nop
 800bbd6:	e002      	b.n	800bbde <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800bbd8:	bf00      	nop
 800bbda:	e000      	b.n	800bbde <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800bbdc:	bf00      	nop
    }

    if (ret == HAL_OK)
 800bbde:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800bbe2:	2b00      	cmp	r3, #0
 800bbe4:	d10b      	bne.n	800bbfe <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800bbe6:	4b39      	ldr	r3, [pc, #228]	; (800bccc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800bbe8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bbea:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 800bbee:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bbf2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bbf6:	4a35      	ldr	r2, [pc, #212]	; (800bccc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800bbf8:	430b      	orrs	r3, r1
 800bbfa:	6553      	str	r3, [r2, #84]	; 0x54
 800bbfc:	e003      	b.n	800bc06 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bbfe:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800bc02:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800bc06:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bc0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc0e:	f002 0340 	and.w	r3, r2, #64	; 0x40
 800bc12:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800bc16:	2300      	movs	r3, #0
 800bc18:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800bc1c:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 800bc20:	460b      	mov	r3, r1
 800bc22:	4313      	orrs	r3, r2
 800bc24:	d058      	beq.n	800bcd8 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800bc26:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bc2a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800bc2e:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800bc32:	d033      	beq.n	800bc9c <HAL_RCCEx_PeriphCLKConfig+0xd08>
 800bc34:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800bc38:	d82c      	bhi.n	800bc94 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800bc3a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bc3e:	d02f      	beq.n	800bca0 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 800bc40:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bc44:	d826      	bhi.n	800bc94 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800bc46:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800bc4a:	d02b      	beq.n	800bca4 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 800bc4c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800bc50:	d820      	bhi.n	800bc94 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800bc52:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800bc56:	d012      	beq.n	800bc7e <HAL_RCCEx_PeriphCLKConfig+0xcea>
 800bc58:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800bc5c:	d81a      	bhi.n	800bc94 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800bc5e:	2b00      	cmp	r3, #0
 800bc60:	d022      	beq.n	800bca8 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 800bc62:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800bc66:	d115      	bne.n	800bc94 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800bc68:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bc6c:	3308      	adds	r3, #8
 800bc6e:	2100      	movs	r1, #0
 800bc70:	4618      	mov	r0, r3
 800bc72:	f001 fd7f 	bl	800d774 <RCCEx_PLL2_Config>
 800bc76:	4603      	mov	r3, r0
 800bc78:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800bc7c:	e015      	b.n	800bcaa <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800bc7e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bc82:	3328      	adds	r3, #40	; 0x28
 800bc84:	2102      	movs	r1, #2
 800bc86:	4618      	mov	r0, r3
 800bc88:	f001 fe26 	bl	800d8d8 <RCCEx_PLL3_Config>
 800bc8c:	4603      	mov	r3, r0
 800bc8e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800bc92:	e00a      	b.n	800bcaa <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800bc94:	2301      	movs	r3, #1
 800bc96:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800bc9a:	e006      	b.n	800bcaa <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800bc9c:	bf00      	nop
 800bc9e:	e004      	b.n	800bcaa <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800bca0:	bf00      	nop
 800bca2:	e002      	b.n	800bcaa <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800bca4:	bf00      	nop
 800bca6:	e000      	b.n	800bcaa <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800bca8:	bf00      	nop
    }

    if (ret == HAL_OK)
 800bcaa:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800bcae:	2b00      	cmp	r3, #0
 800bcb0:	d10e      	bne.n	800bcd0 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800bcb2:	4b06      	ldr	r3, [pc, #24]	; (800bccc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800bcb4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bcb6:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 800bcba:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bcbe:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800bcc2:	4a02      	ldr	r2, [pc, #8]	; (800bccc <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800bcc4:	430b      	orrs	r3, r1
 800bcc6:	6593      	str	r3, [r2, #88]	; 0x58
 800bcc8:	e006      	b.n	800bcd8 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 800bcca:	bf00      	nop
 800bccc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bcd0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800bcd4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800bcd8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bcdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bce0:	f002 0380 	and.w	r3, r2, #128	; 0x80
 800bce4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800bce8:	2300      	movs	r3, #0
 800bcea:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800bcee:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 800bcf2:	460b      	mov	r3, r1
 800bcf4:	4313      	orrs	r3, r2
 800bcf6:	d055      	beq.n	800bda4 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 800bcf8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bcfc:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800bd00:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800bd04:	d033      	beq.n	800bd6e <HAL_RCCEx_PeriphCLKConfig+0xdda>
 800bd06:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800bd0a:	d82c      	bhi.n	800bd66 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800bd0c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800bd10:	d02f      	beq.n	800bd72 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 800bd12:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800bd16:	d826      	bhi.n	800bd66 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800bd18:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800bd1c:	d02b      	beq.n	800bd76 <HAL_RCCEx_PeriphCLKConfig+0xde2>
 800bd1e:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800bd22:	d820      	bhi.n	800bd66 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800bd24:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800bd28:	d012      	beq.n	800bd50 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 800bd2a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800bd2e:	d81a      	bhi.n	800bd66 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800bd30:	2b00      	cmp	r3, #0
 800bd32:	d022      	beq.n	800bd7a <HAL_RCCEx_PeriphCLKConfig+0xde6>
 800bd34:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800bd38:	d115      	bne.n	800bd66 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800bd3a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bd3e:	3308      	adds	r3, #8
 800bd40:	2100      	movs	r1, #0
 800bd42:	4618      	mov	r0, r3
 800bd44:	f001 fd16 	bl	800d774 <RCCEx_PLL2_Config>
 800bd48:	4603      	mov	r3, r0
 800bd4a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800bd4e:	e015      	b.n	800bd7c <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800bd50:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bd54:	3328      	adds	r3, #40	; 0x28
 800bd56:	2102      	movs	r1, #2
 800bd58:	4618      	mov	r0, r3
 800bd5a:	f001 fdbd 	bl	800d8d8 <RCCEx_PLL3_Config>
 800bd5e:	4603      	mov	r3, r0
 800bd60:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800bd64:	e00a      	b.n	800bd7c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800bd66:	2301      	movs	r3, #1
 800bd68:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800bd6c:	e006      	b.n	800bd7c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800bd6e:	bf00      	nop
 800bd70:	e004      	b.n	800bd7c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800bd72:	bf00      	nop
 800bd74:	e002      	b.n	800bd7c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800bd76:	bf00      	nop
 800bd78:	e000      	b.n	800bd7c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800bd7a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800bd7c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800bd80:	2b00      	cmp	r3, #0
 800bd82:	d10b      	bne.n	800bd9c <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800bd84:	4ba1      	ldr	r3, [pc, #644]	; (800c00c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800bd86:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bd88:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 800bd8c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bd90:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800bd94:	4a9d      	ldr	r2, [pc, #628]	; (800c00c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800bd96:	430b      	orrs	r3, r1
 800bd98:	6593      	str	r3, [r2, #88]	; 0x58
 800bd9a:	e003      	b.n	800bda4 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bd9c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800bda0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800bda4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bda8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bdac:	f002 0308 	and.w	r3, r2, #8
 800bdb0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800bdb4:	2300      	movs	r3, #0
 800bdb6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800bdba:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 800bdbe:	460b      	mov	r3, r1
 800bdc0:	4313      	orrs	r3, r2
 800bdc2:	d01e      	beq.n	800be02 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 800bdc4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bdc8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800bdcc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bdd0:	d10c      	bne.n	800bdec <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800bdd2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bdd6:	3328      	adds	r3, #40	; 0x28
 800bdd8:	2102      	movs	r1, #2
 800bdda:	4618      	mov	r0, r3
 800bddc:	f001 fd7c 	bl	800d8d8 <RCCEx_PLL3_Config>
 800bde0:	4603      	mov	r3, r0
 800bde2:	2b00      	cmp	r3, #0
 800bde4:	d002      	beq.n	800bdec <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 800bde6:	2301      	movs	r3, #1
 800bde8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800bdec:	4b87      	ldr	r3, [pc, #540]	; (800c00c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800bdee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bdf0:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800bdf4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bdf8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800bdfc:	4a83      	ldr	r2, [pc, #524]	; (800c00c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800bdfe:	430b      	orrs	r3, r1
 800be00:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800be02:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800be06:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be0a:	f002 0310 	and.w	r3, r2, #16
 800be0e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800be12:	2300      	movs	r3, #0
 800be14:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800be18:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 800be1c:	460b      	mov	r3, r1
 800be1e:	4313      	orrs	r3, r2
 800be20:	d01e      	beq.n	800be60 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800be22:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800be26:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800be2a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800be2e:	d10c      	bne.n	800be4a <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800be30:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800be34:	3328      	adds	r3, #40	; 0x28
 800be36:	2102      	movs	r1, #2
 800be38:	4618      	mov	r0, r3
 800be3a:	f001 fd4d 	bl	800d8d8 <RCCEx_PLL3_Config>
 800be3e:	4603      	mov	r3, r0
 800be40:	2b00      	cmp	r3, #0
 800be42:	d002      	beq.n	800be4a <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 800be44:	2301      	movs	r3, #1
 800be46:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800be4a:	4b70      	ldr	r3, [pc, #448]	; (800c00c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800be4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800be4e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800be52:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800be56:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800be5a:	4a6c      	ldr	r2, [pc, #432]	; (800c00c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800be5c:	430b      	orrs	r3, r1
 800be5e:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800be60:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800be64:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be68:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 800be6c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800be70:	2300      	movs	r3, #0
 800be72:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800be76:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 800be7a:	460b      	mov	r3, r1
 800be7c:	4313      	orrs	r3, r2
 800be7e:	d03e      	beq.n	800befe <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 800be80:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800be84:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800be88:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800be8c:	d022      	beq.n	800bed4 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 800be8e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800be92:	d81b      	bhi.n	800becc <HAL_RCCEx_PeriphCLKConfig+0xf38>
 800be94:	2b00      	cmp	r3, #0
 800be96:	d003      	beq.n	800bea0 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 800be98:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800be9c:	d00b      	beq.n	800beb6 <HAL_RCCEx_PeriphCLKConfig+0xf22>
 800be9e:	e015      	b.n	800becc <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800bea0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bea4:	3308      	adds	r3, #8
 800bea6:	2100      	movs	r1, #0
 800bea8:	4618      	mov	r0, r3
 800beaa:	f001 fc63 	bl	800d774 <RCCEx_PLL2_Config>
 800beae:	4603      	mov	r3, r0
 800beb0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800beb4:	e00f      	b.n	800bed6 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800beb6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800beba:	3328      	adds	r3, #40	; 0x28
 800bebc:	2102      	movs	r1, #2
 800bebe:	4618      	mov	r0, r3
 800bec0:	f001 fd0a 	bl	800d8d8 <RCCEx_PLL3_Config>
 800bec4:	4603      	mov	r3, r0
 800bec6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800beca:	e004      	b.n	800bed6 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800becc:	2301      	movs	r3, #1
 800bece:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800bed2:	e000      	b.n	800bed6 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 800bed4:	bf00      	nop
    }

    if (ret == HAL_OK)
 800bed6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800beda:	2b00      	cmp	r3, #0
 800bedc:	d10b      	bne.n	800bef6 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800bede:	4b4b      	ldr	r3, [pc, #300]	; (800c00c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800bee0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bee2:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 800bee6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800beea:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800beee:	4a47      	ldr	r2, [pc, #284]	; (800c00c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800bef0:	430b      	orrs	r3, r1
 800bef2:	6593      	str	r3, [r2, #88]	; 0x58
 800bef4:	e003      	b.n	800befe <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bef6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800befa:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800befe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bf02:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf06:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 800bf0a:	67bb      	str	r3, [r7, #120]	; 0x78
 800bf0c:	2300      	movs	r3, #0
 800bf0e:	67fb      	str	r3, [r7, #124]	; 0x7c
 800bf10:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 800bf14:	460b      	mov	r3, r1
 800bf16:	4313      	orrs	r3, r2
 800bf18:	d03b      	beq.n	800bf92 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800bf1a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bf1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bf22:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800bf26:	d01f      	beq.n	800bf68 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 800bf28:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800bf2c:	d818      	bhi.n	800bf60 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 800bf2e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800bf32:	d003      	beq.n	800bf3c <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 800bf34:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800bf38:	d007      	beq.n	800bf4a <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 800bf3a:	e011      	b.n	800bf60 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800bf3c:	4b33      	ldr	r3, [pc, #204]	; (800c00c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800bf3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bf40:	4a32      	ldr	r2, [pc, #200]	; (800c00c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800bf42:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800bf46:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 800bf48:	e00f      	b.n	800bf6a <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800bf4a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bf4e:	3328      	adds	r3, #40	; 0x28
 800bf50:	2101      	movs	r1, #1
 800bf52:	4618      	mov	r0, r3
 800bf54:	f001 fcc0 	bl	800d8d8 <RCCEx_PLL3_Config>
 800bf58:	4603      	mov	r3, r0
 800bf5a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 800bf5e:	e004      	b.n	800bf6a <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800bf60:	2301      	movs	r3, #1
 800bf62:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800bf66:	e000      	b.n	800bf6a <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 800bf68:	bf00      	nop
    }

    if (ret == HAL_OK)
 800bf6a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800bf6e:	2b00      	cmp	r3, #0
 800bf70:	d10b      	bne.n	800bf8a <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800bf72:	4b26      	ldr	r3, [pc, #152]	; (800c00c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800bf74:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bf76:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800bf7a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bf7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bf82:	4a22      	ldr	r2, [pc, #136]	; (800c00c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800bf84:	430b      	orrs	r3, r1
 800bf86:	6553      	str	r3, [r2, #84]	; 0x54
 800bf88:	e003      	b.n	800bf92 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bf8a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800bf8e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800bf92:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bf96:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf9a:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 800bf9e:	673b      	str	r3, [r7, #112]	; 0x70
 800bfa0:	2300      	movs	r3, #0
 800bfa2:	677b      	str	r3, [r7, #116]	; 0x74
 800bfa4:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 800bfa8:	460b      	mov	r3, r1
 800bfaa:	4313      	orrs	r3, r2
 800bfac:	d034      	beq.n	800c018 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800bfae:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bfb2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bfb4:	2b00      	cmp	r3, #0
 800bfb6:	d003      	beq.n	800bfc0 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 800bfb8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800bfbc:	d007      	beq.n	800bfce <HAL_RCCEx_PeriphCLKConfig+0x103a>
 800bfbe:	e011      	b.n	800bfe4 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800bfc0:	4b12      	ldr	r3, [pc, #72]	; (800c00c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800bfc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bfc4:	4a11      	ldr	r2, [pc, #68]	; (800c00c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800bfc6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800bfca:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800bfcc:	e00e      	b.n	800bfec <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800bfce:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bfd2:	3308      	adds	r3, #8
 800bfd4:	2102      	movs	r1, #2
 800bfd6:	4618      	mov	r0, r3
 800bfd8:	f001 fbcc 	bl	800d774 <RCCEx_PLL2_Config>
 800bfdc:	4603      	mov	r3, r0
 800bfde:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800bfe2:	e003      	b.n	800bfec <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 800bfe4:	2301      	movs	r3, #1
 800bfe6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800bfea:	bf00      	nop
    }

    if (ret == HAL_OK)
 800bfec:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800bff0:	2b00      	cmp	r3, #0
 800bff2:	d10d      	bne.n	800c010 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800bff4:	4b05      	ldr	r3, [pc, #20]	; (800c00c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800bff6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bff8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800bffc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c000:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c002:	4a02      	ldr	r2, [pc, #8]	; (800c00c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800c004:	430b      	orrs	r3, r1
 800c006:	64d3      	str	r3, [r2, #76]	; 0x4c
 800c008:	e006      	b.n	800c018 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 800c00a:	bf00      	nop
 800c00c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c010:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c014:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800c018:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c01c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c020:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 800c024:	66bb      	str	r3, [r7, #104]	; 0x68
 800c026:	2300      	movs	r3, #0
 800c028:	66fb      	str	r3, [r7, #108]	; 0x6c
 800c02a:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 800c02e:	460b      	mov	r3, r1
 800c030:	4313      	orrs	r3, r2
 800c032:	d00c      	beq.n	800c04e <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800c034:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c038:	3328      	adds	r3, #40	; 0x28
 800c03a:	2102      	movs	r1, #2
 800c03c:	4618      	mov	r0, r3
 800c03e:	f001 fc4b 	bl	800d8d8 <RCCEx_PLL3_Config>
 800c042:	4603      	mov	r3, r0
 800c044:	2b00      	cmp	r3, #0
 800c046:	d002      	beq.n	800c04e <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 800c048:	2301      	movs	r3, #1
 800c04a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800c04e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c052:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c056:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 800c05a:	663b      	str	r3, [r7, #96]	; 0x60
 800c05c:	2300      	movs	r3, #0
 800c05e:	667b      	str	r3, [r7, #100]	; 0x64
 800c060:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 800c064:	460b      	mov	r3, r1
 800c066:	4313      	orrs	r3, r2
 800c068:	d038      	beq.n	800c0dc <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 800c06a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c06e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c072:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800c076:	d018      	beq.n	800c0aa <HAL_RCCEx_PeriphCLKConfig+0x1116>
 800c078:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800c07c:	d811      	bhi.n	800c0a2 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800c07e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c082:	d014      	beq.n	800c0ae <HAL_RCCEx_PeriphCLKConfig+0x111a>
 800c084:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c088:	d80b      	bhi.n	800c0a2 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800c08a:	2b00      	cmp	r3, #0
 800c08c:	d011      	beq.n	800c0b2 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 800c08e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c092:	d106      	bne.n	800c0a2 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c094:	4bc3      	ldr	r3, [pc, #780]	; (800c3a4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800c096:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c098:	4ac2      	ldr	r2, [pc, #776]	; (800c3a4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800c09a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800c09e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 800c0a0:	e008      	b.n	800c0b4 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800c0a2:	2301      	movs	r3, #1
 800c0a4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800c0a8:	e004      	b.n	800c0b4 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800c0aa:	bf00      	nop
 800c0ac:	e002      	b.n	800c0b4 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800c0ae:	bf00      	nop
 800c0b0:	e000      	b.n	800c0b4 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800c0b2:	bf00      	nop
    }

    if (ret == HAL_OK)
 800c0b4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c0b8:	2b00      	cmp	r3, #0
 800c0ba:	d10b      	bne.n	800c0d4 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800c0bc:	4bb9      	ldr	r3, [pc, #740]	; (800c3a4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800c0be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c0c0:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800c0c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c0c8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c0cc:	4ab5      	ldr	r2, [pc, #724]	; (800c3a4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800c0ce:	430b      	orrs	r3, r1
 800c0d0:	6553      	str	r3, [r2, #84]	; 0x54
 800c0d2:	e003      	b.n	800c0dc <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c0d4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c0d8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800c0dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c0e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c0e4:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 800c0e8:	65bb      	str	r3, [r7, #88]	; 0x58
 800c0ea:	2300      	movs	r3, #0
 800c0ec:	65fb      	str	r3, [r7, #92]	; 0x5c
 800c0ee:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 800c0f2:	460b      	mov	r3, r1
 800c0f4:	4313      	orrs	r3, r2
 800c0f6:	d009      	beq.n	800c10c <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800c0f8:	4baa      	ldr	r3, [pc, #680]	; (800c3a4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800c0fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c0fc:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800c100:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c104:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c106:	4aa7      	ldr	r2, [pc, #668]	; (800c3a4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800c108:	430b      	orrs	r3, r1
 800c10a:	6513      	str	r3, [r2, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800c10c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c110:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c114:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 800c118:	653b      	str	r3, [r7, #80]	; 0x50
 800c11a:	2300      	movs	r3, #0
 800c11c:	657b      	str	r3, [r7, #84]	; 0x54
 800c11e:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 800c122:	460b      	mov	r3, r1
 800c124:	4313      	orrs	r3, r2
 800c126:	d00a      	beq.n	800c13e <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800c128:	4b9e      	ldr	r3, [pc, #632]	; (800c3a4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800c12a:	691b      	ldr	r3, [r3, #16]
 800c12c:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 800c130:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c134:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800c138:	4a9a      	ldr	r2, [pc, #616]	; (800c3a4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800c13a:	430b      	orrs	r3, r1
 800c13c:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800c13e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c142:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c146:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 800c14a:	64bb      	str	r3, [r7, #72]	; 0x48
 800c14c:	2300      	movs	r3, #0
 800c14e:	64fb      	str	r3, [r7, #76]	; 0x4c
 800c150:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 800c154:	460b      	mov	r3, r1
 800c156:	4313      	orrs	r3, r2
 800c158:	d009      	beq.n	800c16e <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800c15a:	4b92      	ldr	r3, [pc, #584]	; (800c3a4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800c15c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c15e:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 800c162:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c166:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c168:	4a8e      	ldr	r2, [pc, #568]	; (800c3a4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800c16a:	430b      	orrs	r3, r1
 800c16c:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800c16e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c172:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c176:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 800c17a:	643b      	str	r3, [r7, #64]	; 0x40
 800c17c:	2300      	movs	r3, #0
 800c17e:	647b      	str	r3, [r7, #68]	; 0x44
 800c180:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 800c184:	460b      	mov	r3, r1
 800c186:	4313      	orrs	r3, r2
 800c188:	d00e      	beq.n	800c1a8 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800c18a:	4b86      	ldr	r3, [pc, #536]	; (800c3a4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800c18c:	691b      	ldr	r3, [r3, #16]
 800c18e:	4a85      	ldr	r2, [pc, #532]	; (800c3a4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800c190:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800c194:	6113      	str	r3, [r2, #16]
 800c196:	4b83      	ldr	r3, [pc, #524]	; (800c3a4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800c198:	6919      	ldr	r1, [r3, #16]
 800c19a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c19e:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800c1a2:	4a80      	ldr	r2, [pc, #512]	; (800c3a4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800c1a4:	430b      	orrs	r3, r1
 800c1a6:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800c1a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c1ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c1b0:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 800c1b4:	63bb      	str	r3, [r7, #56]	; 0x38
 800c1b6:	2300      	movs	r3, #0
 800c1b8:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c1ba:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 800c1be:	460b      	mov	r3, r1
 800c1c0:	4313      	orrs	r3, r2
 800c1c2:	d009      	beq.n	800c1d8 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800c1c4:	4b77      	ldr	r3, [pc, #476]	; (800c3a4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800c1c6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c1c8:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 800c1cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c1d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c1d2:	4a74      	ldr	r2, [pc, #464]	; (800c3a4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800c1d4:	430b      	orrs	r3, r1
 800c1d6:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800c1d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c1dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c1e0:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 800c1e4:	633b      	str	r3, [r7, #48]	; 0x30
 800c1e6:	2300      	movs	r3, #0
 800c1e8:	637b      	str	r3, [r7, #52]	; 0x34
 800c1ea:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 800c1ee:	460b      	mov	r3, r1
 800c1f0:	4313      	orrs	r3, r2
 800c1f2:	d00a      	beq.n	800c20a <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800c1f4:	4b6b      	ldr	r3, [pc, #428]	; (800c3a4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800c1f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c1f8:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 800c1fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c200:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800c204:	4a67      	ldr	r2, [pc, #412]	; (800c3a4 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800c206:	430b      	orrs	r3, r1
 800c208:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800c20a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c20e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c212:	2100      	movs	r1, #0
 800c214:	62b9      	str	r1, [r7, #40]	; 0x28
 800c216:	f003 0301 	and.w	r3, r3, #1
 800c21a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c21c:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 800c220:	460b      	mov	r3, r1
 800c222:	4313      	orrs	r3, r2
 800c224:	d011      	beq.n	800c24a <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800c226:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c22a:	3308      	adds	r3, #8
 800c22c:	2100      	movs	r1, #0
 800c22e:	4618      	mov	r0, r3
 800c230:	f001 faa0 	bl	800d774 <RCCEx_PLL2_Config>
 800c234:	4603      	mov	r3, r0
 800c236:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800c23a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c23e:	2b00      	cmp	r3, #0
 800c240:	d003      	beq.n	800c24a <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c242:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c246:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800c24a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c24e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c252:	2100      	movs	r1, #0
 800c254:	6239      	str	r1, [r7, #32]
 800c256:	f003 0302 	and.w	r3, r3, #2
 800c25a:	627b      	str	r3, [r7, #36]	; 0x24
 800c25c:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800c260:	460b      	mov	r3, r1
 800c262:	4313      	orrs	r3, r2
 800c264:	d011      	beq.n	800c28a <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800c266:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c26a:	3308      	adds	r3, #8
 800c26c:	2101      	movs	r1, #1
 800c26e:	4618      	mov	r0, r3
 800c270:	f001 fa80 	bl	800d774 <RCCEx_PLL2_Config>
 800c274:	4603      	mov	r3, r0
 800c276:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800c27a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c27e:	2b00      	cmp	r3, #0
 800c280:	d003      	beq.n	800c28a <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c282:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c286:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800c28a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c28e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c292:	2100      	movs	r1, #0
 800c294:	61b9      	str	r1, [r7, #24]
 800c296:	f003 0304 	and.w	r3, r3, #4
 800c29a:	61fb      	str	r3, [r7, #28]
 800c29c:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800c2a0:	460b      	mov	r3, r1
 800c2a2:	4313      	orrs	r3, r2
 800c2a4:	d011      	beq.n	800c2ca <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800c2a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c2aa:	3308      	adds	r3, #8
 800c2ac:	2102      	movs	r1, #2
 800c2ae:	4618      	mov	r0, r3
 800c2b0:	f001 fa60 	bl	800d774 <RCCEx_PLL2_Config>
 800c2b4:	4603      	mov	r3, r0
 800c2b6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800c2ba:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c2be:	2b00      	cmp	r3, #0
 800c2c0:	d003      	beq.n	800c2ca <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c2c2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c2c6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800c2ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c2ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c2d2:	2100      	movs	r1, #0
 800c2d4:	6139      	str	r1, [r7, #16]
 800c2d6:	f003 0308 	and.w	r3, r3, #8
 800c2da:	617b      	str	r3, [r7, #20]
 800c2dc:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800c2e0:	460b      	mov	r3, r1
 800c2e2:	4313      	orrs	r3, r2
 800c2e4:	d011      	beq.n	800c30a <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800c2e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c2ea:	3328      	adds	r3, #40	; 0x28
 800c2ec:	2100      	movs	r1, #0
 800c2ee:	4618      	mov	r0, r3
 800c2f0:	f001 faf2 	bl	800d8d8 <RCCEx_PLL3_Config>
 800c2f4:	4603      	mov	r3, r0
 800c2f6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  
    if (ret == HAL_OK)
 800c2fa:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c2fe:	2b00      	cmp	r3, #0
 800c300:	d003      	beq.n	800c30a <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c302:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c306:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800c30a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c30e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c312:	2100      	movs	r1, #0
 800c314:	60b9      	str	r1, [r7, #8]
 800c316:	f003 0310 	and.w	r3, r3, #16
 800c31a:	60fb      	str	r3, [r7, #12]
 800c31c:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800c320:	460b      	mov	r3, r1
 800c322:	4313      	orrs	r3, r2
 800c324:	d011      	beq.n	800c34a <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800c326:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c32a:	3328      	adds	r3, #40	; 0x28
 800c32c:	2101      	movs	r1, #1
 800c32e:	4618      	mov	r0, r3
 800c330:	f001 fad2 	bl	800d8d8 <RCCEx_PLL3_Config>
 800c334:	4603      	mov	r3, r0
 800c336:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800c33a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c33e:	2b00      	cmp	r3, #0
 800c340:	d003      	beq.n	800c34a <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c342:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c346:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800c34a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c34e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c352:	2100      	movs	r1, #0
 800c354:	6039      	str	r1, [r7, #0]
 800c356:	f003 0320 	and.w	r3, r3, #32
 800c35a:	607b      	str	r3, [r7, #4]
 800c35c:	e9d7 1200 	ldrd	r1, r2, [r7]
 800c360:	460b      	mov	r3, r1
 800c362:	4313      	orrs	r3, r2
 800c364:	d011      	beq.n	800c38a <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800c366:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c36a:	3328      	adds	r3, #40	; 0x28
 800c36c:	2102      	movs	r1, #2
 800c36e:	4618      	mov	r0, r3
 800c370:	f001 fab2 	bl	800d8d8 <RCCEx_PLL3_Config>
 800c374:	4603      	mov	r3, r0
 800c376:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800c37a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c37e:	2b00      	cmp	r3, #0
 800c380:	d003      	beq.n	800c38a <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c382:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c386:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }

  if (status == HAL_OK)
 800c38a:	f897 3126 	ldrb.w	r3, [r7, #294]	; 0x126
 800c38e:	2b00      	cmp	r3, #0
 800c390:	d101      	bne.n	800c396 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 800c392:	2300      	movs	r3, #0
 800c394:	e000      	b.n	800c398 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 800c396:	2301      	movs	r3, #1
}
 800c398:	4618      	mov	r0, r3
 800c39a:	f507 7794 	add.w	r7, r7, #296	; 0x128
 800c39e:	46bd      	mov	sp, r7
 800c3a0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800c3a4:	58024400 	.word	0x58024400

0800c3a8 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 800c3a8:	b580      	push	{r7, lr}
 800c3aa:	b090      	sub	sp, #64	; 0x40
 800c3ac:	af00      	add	r7, sp, #0
 800c3ae:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800c3b2:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c3b6:	f5a2 7180 	sub.w	r1, r2, #256	; 0x100
 800c3ba:	430b      	orrs	r3, r1
 800c3bc:	f040 8094 	bne.w	800c4e8 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 800c3c0:	4b9e      	ldr	r3, [pc, #632]	; (800c63c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c3c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c3c4:	f003 0307 	and.w	r3, r3, #7
 800c3c8:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800c3ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c3cc:	2b04      	cmp	r3, #4
 800c3ce:	f200 8087 	bhi.w	800c4e0 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 800c3d2:	a201      	add	r2, pc, #4	; (adr r2, 800c3d8 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 800c3d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c3d8:	0800c3ed 	.word	0x0800c3ed
 800c3dc:	0800c415 	.word	0x0800c415
 800c3e0:	0800c43d 	.word	0x0800c43d
 800c3e4:	0800c4d9 	.word	0x0800c4d9
 800c3e8:	0800c465 	.word	0x0800c465
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800c3ec:	4b93      	ldr	r3, [pc, #588]	; (800c63c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c3ee:	681b      	ldr	r3, [r3, #0]
 800c3f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c3f4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c3f8:	d108      	bne.n	800c40c <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c3fa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c3fe:	4618      	mov	r0, r3
 800c400:	f001 f810 	bl	800d424 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800c404:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c406:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c408:	f000 bd45 	b.w	800ce96 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c40c:	2300      	movs	r3, #0
 800c40e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c410:	f000 bd41 	b.w	800ce96 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c414:	4b89      	ldr	r3, [pc, #548]	; (800c63c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c416:	681b      	ldr	r3, [r3, #0]
 800c418:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c41c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c420:	d108      	bne.n	800c434 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c422:	f107 0318 	add.w	r3, r7, #24
 800c426:	4618      	mov	r0, r3
 800c428:	f000 fd54 	bl	800ced4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800c42c:	69bb      	ldr	r3, [r7, #24]
 800c42e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c430:	f000 bd31 	b.w	800ce96 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c434:	2300      	movs	r3, #0
 800c436:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c438:	f000 bd2d 	b.w	800ce96 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800c43c:	4b7f      	ldr	r3, [pc, #508]	; (800c63c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c43e:	681b      	ldr	r3, [r3, #0]
 800c440:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c444:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c448:	d108      	bne.n	800c45c <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c44a:	f107 030c 	add.w	r3, r7, #12
 800c44e:	4618      	mov	r0, r3
 800c450:	f000 fe94 	bl	800d17c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800c454:	68fb      	ldr	r3, [r7, #12]
 800c456:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c458:	f000 bd1d 	b.w	800ce96 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c45c:	2300      	movs	r3, #0
 800c45e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c460:	f000 bd19 	b.w	800ce96 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800c464:	4b75      	ldr	r3, [pc, #468]	; (800c63c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c466:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c468:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800c46c:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800c46e:	4b73      	ldr	r3, [pc, #460]	; (800c63c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c470:	681b      	ldr	r3, [r3, #0]
 800c472:	f003 0304 	and.w	r3, r3, #4
 800c476:	2b04      	cmp	r3, #4
 800c478:	d10c      	bne.n	800c494 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 800c47a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c47c:	2b00      	cmp	r3, #0
 800c47e:	d109      	bne.n	800c494 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c480:	4b6e      	ldr	r3, [pc, #440]	; (800c63c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c482:	681b      	ldr	r3, [r3, #0]
 800c484:	08db      	lsrs	r3, r3, #3
 800c486:	f003 0303 	and.w	r3, r3, #3
 800c48a:	4a6d      	ldr	r2, [pc, #436]	; (800c640 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800c48c:	fa22 f303 	lsr.w	r3, r2, r3
 800c490:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c492:	e01f      	b.n	800c4d4 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800c494:	4b69      	ldr	r3, [pc, #420]	; (800c63c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c496:	681b      	ldr	r3, [r3, #0]
 800c498:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c49c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c4a0:	d106      	bne.n	800c4b0 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 800c4a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c4a4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c4a8:	d102      	bne.n	800c4b0 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800c4aa:	4b66      	ldr	r3, [pc, #408]	; (800c644 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800c4ac:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c4ae:	e011      	b.n	800c4d4 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800c4b0:	4b62      	ldr	r3, [pc, #392]	; (800c63c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c4b2:	681b      	ldr	r3, [r3, #0]
 800c4b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c4b8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c4bc:	d106      	bne.n	800c4cc <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 800c4be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c4c0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c4c4:	d102      	bne.n	800c4cc <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800c4c6:	4b60      	ldr	r3, [pc, #384]	; (800c648 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 800c4c8:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c4ca:	e003      	b.n	800c4d4 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800c4cc:	2300      	movs	r3, #0
 800c4ce:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800c4d0:	f000 bce1 	b.w	800ce96 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800c4d4:	f000 bcdf 	b.w	800ce96 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800c4d8:	4b5c      	ldr	r3, [pc, #368]	; (800c64c <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800c4da:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c4dc:	f000 bcdb 	b.w	800ce96 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800c4e0:	2300      	movs	r3, #0
 800c4e2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c4e4:	f000 bcd7 	b.w	800ce96 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 800c4e8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c4ec:	f5a2 7100 	sub.w	r1, r2, #512	; 0x200
 800c4f0:	430b      	orrs	r3, r1
 800c4f2:	f040 80ad 	bne.w	800c650 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {

    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 800c4f6:	4b51      	ldr	r3, [pc, #324]	; (800c63c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c4f8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c4fa:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 800c4fe:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800c500:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c502:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c506:	d056      	beq.n	800c5b6 <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 800c508:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c50a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c50e:	f200 8090 	bhi.w	800c632 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800c512:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c514:	2bc0      	cmp	r3, #192	; 0xc0
 800c516:	f000 8088 	beq.w	800c62a <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 800c51a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c51c:	2bc0      	cmp	r3, #192	; 0xc0
 800c51e:	f200 8088 	bhi.w	800c632 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800c522:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c524:	2b80      	cmp	r3, #128	; 0x80
 800c526:	d032      	beq.n	800c58e <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 800c528:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c52a:	2b80      	cmp	r3, #128	; 0x80
 800c52c:	f200 8081 	bhi.w	800c632 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800c530:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c532:	2b00      	cmp	r3, #0
 800c534:	d003      	beq.n	800c53e <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 800c536:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c538:	2b40      	cmp	r3, #64	; 0x40
 800c53a:	d014      	beq.n	800c566 <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 800c53c:	e079      	b.n	800c632 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
    {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800c53e:	4b3f      	ldr	r3, [pc, #252]	; (800c63c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c540:	681b      	ldr	r3, [r3, #0]
 800c542:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c546:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c54a:	d108      	bne.n	800c55e <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c54c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c550:	4618      	mov	r0, r3
 800c552:	f000 ff67 	bl	800d424 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800c556:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c558:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c55a:	f000 bc9c 	b.w	800ce96 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c55e:	2300      	movs	r3, #0
 800c560:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c562:	f000 bc98 	b.w	800ce96 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c566:	4b35      	ldr	r3, [pc, #212]	; (800c63c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c568:	681b      	ldr	r3, [r3, #0]
 800c56a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c56e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c572:	d108      	bne.n	800c586 <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c574:	f107 0318 	add.w	r3, r7, #24
 800c578:	4618      	mov	r0, r3
 800c57a:	f000 fcab 	bl	800ced4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800c57e:	69bb      	ldr	r3, [r7, #24]
 800c580:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c582:	f000 bc88 	b.w	800ce96 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c586:	2300      	movs	r3, #0
 800c588:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c58a:	f000 bc84 	b.w	800ce96 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800c58e:	4b2b      	ldr	r3, [pc, #172]	; (800c63c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c590:	681b      	ldr	r3, [r3, #0]
 800c592:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c596:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c59a:	d108      	bne.n	800c5ae <HAL_RCCEx_GetPeriphCLKFreq+0x206>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c59c:	f107 030c 	add.w	r3, r7, #12
 800c5a0:	4618      	mov	r0, r3
 800c5a2:	f000 fdeb 	bl	800d17c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800c5a6:	68fb      	ldr	r3, [r7, #12]
 800c5a8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c5aa:	f000 bc74 	b.w	800ce96 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c5ae:	2300      	movs	r3, #0
 800c5b0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c5b2:	f000 bc70 	b.w	800ce96 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800c5b6:	4b21      	ldr	r3, [pc, #132]	; (800c63c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c5b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c5ba:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800c5be:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800c5c0:	4b1e      	ldr	r3, [pc, #120]	; (800c63c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c5c2:	681b      	ldr	r3, [r3, #0]
 800c5c4:	f003 0304 	and.w	r3, r3, #4
 800c5c8:	2b04      	cmp	r3, #4
 800c5ca:	d10c      	bne.n	800c5e6 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 800c5cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c5ce:	2b00      	cmp	r3, #0
 800c5d0:	d109      	bne.n	800c5e6 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c5d2:	4b1a      	ldr	r3, [pc, #104]	; (800c63c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c5d4:	681b      	ldr	r3, [r3, #0]
 800c5d6:	08db      	lsrs	r3, r3, #3
 800c5d8:	f003 0303 	and.w	r3, r3, #3
 800c5dc:	4a18      	ldr	r2, [pc, #96]	; (800c640 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800c5de:	fa22 f303 	lsr.w	r3, r2, r3
 800c5e2:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c5e4:	e01f      	b.n	800c626 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800c5e6:	4b15      	ldr	r3, [pc, #84]	; (800c63c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c5e8:	681b      	ldr	r3, [r3, #0]
 800c5ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c5ee:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c5f2:	d106      	bne.n	800c602 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 800c5f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c5f6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c5fa:	d102      	bne.n	800c602 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800c5fc:	4b11      	ldr	r3, [pc, #68]	; (800c644 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800c5fe:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c600:	e011      	b.n	800c626 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800c602:	4b0e      	ldr	r3, [pc, #56]	; (800c63c <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c604:	681b      	ldr	r3, [r3, #0]
 800c606:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c60a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c60e:	d106      	bne.n	800c61e <HAL_RCCEx_GetPeriphCLKFreq+0x276>
 800c610:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c612:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c616:	d102      	bne.n	800c61e <HAL_RCCEx_GetPeriphCLKFreq+0x276>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800c618:	4b0b      	ldr	r3, [pc, #44]	; (800c648 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 800c61a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c61c:	e003      	b.n	800c626 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800c61e:	2300      	movs	r3, #0
 800c620:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800c622:	f000 bc38 	b.w	800ce96 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800c626:	f000 bc36 	b.w	800ce96 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800c62a:	4b08      	ldr	r3, [pc, #32]	; (800c64c <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800c62c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c62e:	f000 bc32 	b.w	800ce96 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800c632:	2300      	movs	r3, #0
 800c634:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c636:	f000 bc2e 	b.w	800ce96 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800c63a:	bf00      	nop
 800c63c:	58024400 	.word	0x58024400
 800c640:	03d09000 	.word	0x03d09000
 800c644:	003d0900 	.word	0x003d0900
 800c648:	00989680 	.word	0x00989680
 800c64c:	00bb8000 	.word	0x00bb8000
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 800c650:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c654:	f5a2 6180 	sub.w	r1, r2, #1024	; 0x400
 800c658:	430b      	orrs	r3, r1
 800c65a:	f040 809c 	bne.w	800c796 <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 800c65e:	4b9e      	ldr	r3, [pc, #632]	; (800c8d8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c660:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c662:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 800c666:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800c668:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c66a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800c66e:	d054      	beq.n	800c71a <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 800c670:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c672:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800c676:	f200 808b 	bhi.w	800c790 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800c67a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c67c:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800c680:	f000 8083 	beq.w	800c78a <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 800c684:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c686:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800c68a:	f200 8081 	bhi.w	800c790 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800c68e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c690:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800c694:	d02f      	beq.n	800c6f6 <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
 800c696:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c698:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800c69c:	d878      	bhi.n	800c790 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800c69e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c6a0:	2b00      	cmp	r3, #0
 800c6a2:	d004      	beq.n	800c6ae <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 800c6a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c6a6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800c6aa:	d012      	beq.n	800c6d2 <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 800c6ac:	e070      	b.n	800c790 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800c6ae:	4b8a      	ldr	r3, [pc, #552]	; (800c8d8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c6b0:	681b      	ldr	r3, [r3, #0]
 800c6b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c6b6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c6ba:	d107      	bne.n	800c6cc <HAL_RCCEx_GetPeriphCLKFreq+0x324>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c6bc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c6c0:	4618      	mov	r0, r3
 800c6c2:	f000 feaf 	bl	800d424 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800c6c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c6c8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c6ca:	e3e4      	b.n	800ce96 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c6cc:	2300      	movs	r3, #0
 800c6ce:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c6d0:	e3e1      	b.n	800ce96 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c6d2:	4b81      	ldr	r3, [pc, #516]	; (800c8d8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c6d4:	681b      	ldr	r3, [r3, #0]
 800c6d6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c6da:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c6de:	d107      	bne.n	800c6f0 <HAL_RCCEx_GetPeriphCLKFreq+0x348>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c6e0:	f107 0318 	add.w	r3, r7, #24
 800c6e4:	4618      	mov	r0, r3
 800c6e6:	f000 fbf5 	bl	800ced4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800c6ea:	69bb      	ldr	r3, [r7, #24]
 800c6ec:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c6ee:	e3d2      	b.n	800ce96 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c6f0:	2300      	movs	r3, #0
 800c6f2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c6f4:	e3cf      	b.n	800ce96 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800c6f6:	4b78      	ldr	r3, [pc, #480]	; (800c8d8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c6f8:	681b      	ldr	r3, [r3, #0]
 800c6fa:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c6fe:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c702:	d107      	bne.n	800c714 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c704:	f107 030c 	add.w	r3, r7, #12
 800c708:	4618      	mov	r0, r3
 800c70a:	f000 fd37 	bl	800d17c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800c70e:	68fb      	ldr	r3, [r7, #12]
 800c710:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c712:	e3c0      	b.n	800ce96 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c714:	2300      	movs	r3, #0
 800c716:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c718:	e3bd      	b.n	800ce96 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800c71a:	4b6f      	ldr	r3, [pc, #444]	; (800c8d8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c71c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c71e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800c722:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800c724:	4b6c      	ldr	r3, [pc, #432]	; (800c8d8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c726:	681b      	ldr	r3, [r3, #0]
 800c728:	f003 0304 	and.w	r3, r3, #4
 800c72c:	2b04      	cmp	r3, #4
 800c72e:	d10c      	bne.n	800c74a <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 800c730:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c732:	2b00      	cmp	r3, #0
 800c734:	d109      	bne.n	800c74a <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c736:	4b68      	ldr	r3, [pc, #416]	; (800c8d8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c738:	681b      	ldr	r3, [r3, #0]
 800c73a:	08db      	lsrs	r3, r3, #3
 800c73c:	f003 0303 	and.w	r3, r3, #3
 800c740:	4a66      	ldr	r2, [pc, #408]	; (800c8dc <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800c742:	fa22 f303 	lsr.w	r3, r2, r3
 800c746:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c748:	e01e      	b.n	800c788 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800c74a:	4b63      	ldr	r3, [pc, #396]	; (800c8d8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c74c:	681b      	ldr	r3, [r3, #0]
 800c74e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c752:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c756:	d106      	bne.n	800c766 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 800c758:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c75a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c75e:	d102      	bne.n	800c766 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800c760:	4b5f      	ldr	r3, [pc, #380]	; (800c8e0 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 800c762:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c764:	e010      	b.n	800c788 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800c766:	4b5c      	ldr	r3, [pc, #368]	; (800c8d8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c768:	681b      	ldr	r3, [r3, #0]
 800c76a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c76e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c772:	d106      	bne.n	800c782 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
 800c774:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c776:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c77a:	d102      	bne.n	800c782 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800c77c:	4b59      	ldr	r3, [pc, #356]	; (800c8e4 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 800c77e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c780:	e002      	b.n	800c788 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800c782:	2300      	movs	r3, #0
 800c784:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800c786:	e386      	b.n	800ce96 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800c788:	e385      	b.n	800ce96 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800c78a:	4b57      	ldr	r3, [pc, #348]	; (800c8e8 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 800c78c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c78e:	e382      	b.n	800ce96 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800c790:	2300      	movs	r3, #0
 800c792:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c794:	e37f      	b.n	800ce96 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 800c796:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c79a:	f5a2 6100 	sub.w	r1, r2, #2048	; 0x800
 800c79e:	430b      	orrs	r3, r1
 800c7a0:	f040 80a7 	bne.w	800c8f2 <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 800c7a4:	4b4c      	ldr	r3, [pc, #304]	; (800c8d8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c7a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c7a8:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 800c7ac:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800c7ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c7b0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800c7b4:	d055      	beq.n	800c862 <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
 800c7b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c7b8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800c7bc:	f200 8096 	bhi.w	800c8ec <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800c7c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c7c2:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800c7c6:	f000 8084 	beq.w	800c8d2 <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 800c7ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c7cc:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800c7d0:	f200 808c 	bhi.w	800c8ec <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800c7d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c7d6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c7da:	d030      	beq.n	800c83e <HAL_RCCEx_GetPeriphCLKFreq+0x496>
 800c7dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c7de:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c7e2:	f200 8083 	bhi.w	800c8ec <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800c7e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c7e8:	2b00      	cmp	r3, #0
 800c7ea:	d004      	beq.n	800c7f6 <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 800c7ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c7ee:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800c7f2:	d012      	beq.n	800c81a <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 800c7f4:	e07a      	b.n	800c8ec <HAL_RCCEx_GetPeriphCLKFreq+0x544>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800c7f6:	4b38      	ldr	r3, [pc, #224]	; (800c8d8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c7f8:	681b      	ldr	r3, [r3, #0]
 800c7fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c7fe:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c802:	d107      	bne.n	800c814 <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c804:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c808:	4618      	mov	r0, r3
 800c80a:	f000 fe0b 	bl	800d424 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800c80e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c810:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c812:	e340      	b.n	800ce96 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c814:	2300      	movs	r3, #0
 800c816:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c818:	e33d      	b.n	800ce96 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c81a:	4b2f      	ldr	r3, [pc, #188]	; (800c8d8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c81c:	681b      	ldr	r3, [r3, #0]
 800c81e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c822:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c826:	d107      	bne.n	800c838 <HAL_RCCEx_GetPeriphCLKFreq+0x490>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c828:	f107 0318 	add.w	r3, r7, #24
 800c82c:	4618      	mov	r0, r3
 800c82e:	f000 fb51 	bl	800ced4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800c832:	69bb      	ldr	r3, [r7, #24]
 800c834:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c836:	e32e      	b.n	800ce96 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c838:	2300      	movs	r3, #0
 800c83a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c83c:	e32b      	b.n	800ce96 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800c83e:	4b26      	ldr	r3, [pc, #152]	; (800c8d8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c840:	681b      	ldr	r3, [r3, #0]
 800c842:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c846:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c84a:	d107      	bne.n	800c85c <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c84c:	f107 030c 	add.w	r3, r7, #12
 800c850:	4618      	mov	r0, r3
 800c852:	f000 fc93 	bl	800d17c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800c856:	68fb      	ldr	r3, [r7, #12]
 800c858:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c85a:	e31c      	b.n	800ce96 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c85c:	2300      	movs	r3, #0
 800c85e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c860:	e319      	b.n	800ce96 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800c862:	4b1d      	ldr	r3, [pc, #116]	; (800c8d8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c864:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c866:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800c86a:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800c86c:	4b1a      	ldr	r3, [pc, #104]	; (800c8d8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c86e:	681b      	ldr	r3, [r3, #0]
 800c870:	f003 0304 	and.w	r3, r3, #4
 800c874:	2b04      	cmp	r3, #4
 800c876:	d10c      	bne.n	800c892 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 800c878:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c87a:	2b00      	cmp	r3, #0
 800c87c:	d109      	bne.n	800c892 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c87e:	4b16      	ldr	r3, [pc, #88]	; (800c8d8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c880:	681b      	ldr	r3, [r3, #0]
 800c882:	08db      	lsrs	r3, r3, #3
 800c884:	f003 0303 	and.w	r3, r3, #3
 800c888:	4a14      	ldr	r2, [pc, #80]	; (800c8dc <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800c88a:	fa22 f303 	lsr.w	r3, r2, r3
 800c88e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c890:	e01e      	b.n	800c8d0 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800c892:	4b11      	ldr	r3, [pc, #68]	; (800c8d8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c894:	681b      	ldr	r3, [r3, #0]
 800c896:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c89a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c89e:	d106      	bne.n	800c8ae <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 800c8a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c8a2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c8a6:	d102      	bne.n	800c8ae <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800c8a8:	4b0d      	ldr	r3, [pc, #52]	; (800c8e0 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 800c8aa:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c8ac:	e010      	b.n	800c8d0 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800c8ae:	4b0a      	ldr	r3, [pc, #40]	; (800c8d8 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c8b0:	681b      	ldr	r3, [r3, #0]
 800c8b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c8b6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c8ba:	d106      	bne.n	800c8ca <HAL_RCCEx_GetPeriphCLKFreq+0x522>
 800c8bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c8be:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c8c2:	d102      	bne.n	800c8ca <HAL_RCCEx_GetPeriphCLKFreq+0x522>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800c8c4:	4b07      	ldr	r3, [pc, #28]	; (800c8e4 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 800c8c6:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c8c8:	e002      	b.n	800c8d0 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800c8ca:	2300      	movs	r3, #0
 800c8cc:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800c8ce:	e2e2      	b.n	800ce96 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800c8d0:	e2e1      	b.n	800ce96 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800c8d2:	4b05      	ldr	r3, [pc, #20]	; (800c8e8 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 800c8d4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c8d6:	e2de      	b.n	800ce96 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800c8d8:	58024400 	.word	0x58024400
 800c8dc:	03d09000 	.word	0x03d09000
 800c8e0:	003d0900 	.word	0x003d0900
 800c8e4:	00989680 	.word	0x00989680
 800c8e8:	00bb8000 	.word	0x00bb8000
      }

      default :
      {
        frequency = 0;
 800c8ec:	2300      	movs	r3, #0
 800c8ee:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c8f0:	e2d1      	b.n	800ce96 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800c8f2:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c8f6:	f5a2 5180 	sub.w	r1, r2, #4096	; 0x1000
 800c8fa:	430b      	orrs	r3, r1
 800c8fc:	f040 809c 	bne.w	800ca38 <HAL_RCCEx_GetPeriphCLKFreq+0x690>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 800c900:	4b93      	ldr	r3, [pc, #588]	; (800cb50 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800c902:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c904:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 800c908:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800c90a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c90c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800c910:	d054      	beq.n	800c9bc <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 800c912:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c914:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800c918:	f200 808b 	bhi.w	800ca32 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800c91c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c91e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800c922:	f000 8083 	beq.w	800ca2c <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 800c926:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c928:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800c92c:	f200 8081 	bhi.w	800ca32 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800c930:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c932:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c936:	d02f      	beq.n	800c998 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 800c938:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c93a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c93e:	d878      	bhi.n	800ca32 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800c940:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c942:	2b00      	cmp	r3, #0
 800c944:	d004      	beq.n	800c950 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 800c946:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c948:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c94c:	d012      	beq.n	800c974 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 800c94e:	e070      	b.n	800ca32 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800c950:	4b7f      	ldr	r3, [pc, #508]	; (800cb50 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800c952:	681b      	ldr	r3, [r3, #0]
 800c954:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c958:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c95c:	d107      	bne.n	800c96e <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c95e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c962:	4618      	mov	r0, r3
 800c964:	f000 fd5e 	bl	800d424 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800c968:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c96a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c96c:	e293      	b.n	800ce96 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c96e:	2300      	movs	r3, #0
 800c970:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c972:	e290      	b.n	800ce96 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c974:	4b76      	ldr	r3, [pc, #472]	; (800cb50 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800c976:	681b      	ldr	r3, [r3, #0]
 800c978:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c97c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c980:	d107      	bne.n	800c992 <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c982:	f107 0318 	add.w	r3, r7, #24
 800c986:	4618      	mov	r0, r3
 800c988:	f000 faa4 	bl	800ced4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800c98c:	69bb      	ldr	r3, [r7, #24]
 800c98e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c990:	e281      	b.n	800ce96 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c992:	2300      	movs	r3, #0
 800c994:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c996:	e27e      	b.n	800ce96 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800c998:	4b6d      	ldr	r3, [pc, #436]	; (800cb50 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800c99a:	681b      	ldr	r3, [r3, #0]
 800c99c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c9a0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c9a4:	d107      	bne.n	800c9b6 <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c9a6:	f107 030c 	add.w	r3, r7, #12
 800c9aa:	4618      	mov	r0, r3
 800c9ac:	f000 fbe6 	bl	800d17c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800c9b0:	68fb      	ldr	r3, [r7, #12]
 800c9b2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c9b4:	e26f      	b.n	800ce96 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c9b6:	2300      	movs	r3, #0
 800c9b8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c9ba:	e26c      	b.n	800ce96 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800c9bc:	4b64      	ldr	r3, [pc, #400]	; (800cb50 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800c9be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c9c0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800c9c4:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800c9c6:	4b62      	ldr	r3, [pc, #392]	; (800cb50 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800c9c8:	681b      	ldr	r3, [r3, #0]
 800c9ca:	f003 0304 	and.w	r3, r3, #4
 800c9ce:	2b04      	cmp	r3, #4
 800c9d0:	d10c      	bne.n	800c9ec <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 800c9d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c9d4:	2b00      	cmp	r3, #0
 800c9d6:	d109      	bne.n	800c9ec <HAL_RCCEx_GetPeriphCLKFreq+0x644>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c9d8:	4b5d      	ldr	r3, [pc, #372]	; (800cb50 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800c9da:	681b      	ldr	r3, [r3, #0]
 800c9dc:	08db      	lsrs	r3, r3, #3
 800c9de:	f003 0303 	and.w	r3, r3, #3
 800c9e2:	4a5c      	ldr	r2, [pc, #368]	; (800cb54 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 800c9e4:	fa22 f303 	lsr.w	r3, r2, r3
 800c9e8:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c9ea:	e01e      	b.n	800ca2a <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800c9ec:	4b58      	ldr	r3, [pc, #352]	; (800cb50 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800c9ee:	681b      	ldr	r3, [r3, #0]
 800c9f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c9f4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c9f8:	d106      	bne.n	800ca08 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 800c9fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c9fc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800ca00:	d102      	bne.n	800ca08 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800ca02:	4b55      	ldr	r3, [pc, #340]	; (800cb58 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800ca04:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ca06:	e010      	b.n	800ca2a <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800ca08:	4b51      	ldr	r3, [pc, #324]	; (800cb50 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800ca0a:	681b      	ldr	r3, [r3, #0]
 800ca0c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ca10:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800ca14:	d106      	bne.n	800ca24 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 800ca16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ca18:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ca1c:	d102      	bne.n	800ca24 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800ca1e:	4b4f      	ldr	r3, [pc, #316]	; (800cb5c <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 800ca20:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ca22:	e002      	b.n	800ca2a <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800ca24:	2300      	movs	r3, #0
 800ca26:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800ca28:	e235      	b.n	800ce96 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800ca2a:	e234      	b.n	800ce96 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800ca2c:	4b4c      	ldr	r3, [pc, #304]	; (800cb60 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 800ca2e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ca30:	e231      	b.n	800ce96 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800ca32:	2300      	movs	r3, #0
 800ca34:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ca36:	e22e      	b.n	800ce96 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 800ca38:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ca3c:	f5a2 5100 	sub.w	r1, r2, #8192	; 0x2000
 800ca40:	430b      	orrs	r3, r1
 800ca42:	f040 808f 	bne.w	800cb64 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 800ca46:	4b42      	ldr	r3, [pc, #264]	; (800cb50 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800ca48:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ca4a:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 800ca4e:	63bb      	str	r3, [r7, #56]	; 0x38
    switch (srcclk)
 800ca50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca52:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800ca56:	d06b      	beq.n	800cb30 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 800ca58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca5a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800ca5e:	d874      	bhi.n	800cb4a <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800ca60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca62:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800ca66:	d056      	beq.n	800cb16 <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 800ca68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca6a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800ca6e:	d86c      	bhi.n	800cb4a <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800ca70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca72:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800ca76:	d03b      	beq.n	800caf0 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 800ca78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca7a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800ca7e:	d864      	bhi.n	800cb4a <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800ca80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca82:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800ca86:	d021      	beq.n	800cacc <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 800ca88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca8a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800ca8e:	d85c      	bhi.n	800cb4a <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800ca90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca92:	2b00      	cmp	r3, #0
 800ca94:	d004      	beq.n	800caa0 <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 800ca96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca98:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ca9c:	d004      	beq.n	800caa8 <HAL_RCCEx_GetPeriphCLKFreq+0x700>
 800ca9e:	e054      	b.n	800cb4a <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 800caa0:	f7fe fa30 	bl	800af04 <HAL_RCC_GetPCLK1Freq>
 800caa4:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800caa6:	e1f6      	b.n	800ce96 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800caa8:	4b29      	ldr	r3, [pc, #164]	; (800cb50 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800caaa:	681b      	ldr	r3, [r3, #0]
 800caac:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800cab0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800cab4:	d107      	bne.n	800cac6 <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800cab6:	f107 0318 	add.w	r3, r7, #24
 800caba:	4618      	mov	r0, r3
 800cabc:	f000 fa0a 	bl	800ced4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800cac0:	69fb      	ldr	r3, [r7, #28]
 800cac2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cac4:	e1e7      	b.n	800ce96 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800cac6:	2300      	movs	r3, #0
 800cac8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800caca:	e1e4      	b.n	800ce96 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800cacc:	4b20      	ldr	r3, [pc, #128]	; (800cb50 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800cace:	681b      	ldr	r3, [r3, #0]
 800cad0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800cad4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800cad8:	d107      	bne.n	800caea <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800cada:	f107 030c 	add.w	r3, r7, #12
 800cade:	4618      	mov	r0, r3
 800cae0:	f000 fb4c 	bl	800d17c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800cae4:	693b      	ldr	r3, [r7, #16]
 800cae6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cae8:	e1d5      	b.n	800ce96 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800caea:	2300      	movs	r3, #0
 800caec:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800caee:	e1d2      	b.n	800ce96 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800caf0:	4b17      	ldr	r3, [pc, #92]	; (800cb50 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800caf2:	681b      	ldr	r3, [r3, #0]
 800caf4:	f003 0304 	and.w	r3, r3, #4
 800caf8:	2b04      	cmp	r3, #4
 800cafa:	d109      	bne.n	800cb10 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800cafc:	4b14      	ldr	r3, [pc, #80]	; (800cb50 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800cafe:	681b      	ldr	r3, [r3, #0]
 800cb00:	08db      	lsrs	r3, r3, #3
 800cb02:	f003 0303 	and.w	r3, r3, #3
 800cb06:	4a13      	ldr	r2, [pc, #76]	; (800cb54 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 800cb08:	fa22 f303 	lsr.w	r3, r2, r3
 800cb0c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cb0e:	e1c2      	b.n	800ce96 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800cb10:	2300      	movs	r3, #0
 800cb12:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cb14:	e1bf      	b.n	800ce96 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800cb16:	4b0e      	ldr	r3, [pc, #56]	; (800cb50 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800cb18:	681b      	ldr	r3, [r3, #0]
 800cb1a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cb1e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800cb22:	d102      	bne.n	800cb2a <HAL_RCCEx_GetPeriphCLKFreq+0x782>
        {
          frequency = CSI_VALUE;
 800cb24:	4b0c      	ldr	r3, [pc, #48]	; (800cb58 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800cb26:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cb28:	e1b5      	b.n	800ce96 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800cb2a:	2300      	movs	r3, #0
 800cb2c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cb2e:	e1b2      	b.n	800ce96 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800cb30:	4b07      	ldr	r3, [pc, #28]	; (800cb50 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800cb32:	681b      	ldr	r3, [r3, #0]
 800cb34:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800cb38:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800cb3c:	d102      	bne.n	800cb44 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
        {
          frequency = HSE_VALUE;
 800cb3e:	4b07      	ldr	r3, [pc, #28]	; (800cb5c <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 800cb40:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cb42:	e1a8      	b.n	800ce96 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800cb44:	2300      	movs	r3, #0
 800cb46:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cb48:	e1a5      	b.n	800ce96 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800cb4a:	2300      	movs	r3, #0
 800cb4c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cb4e:	e1a2      	b.n	800ce96 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800cb50:	58024400 	.word	0x58024400
 800cb54:	03d09000 	.word	0x03d09000
 800cb58:	003d0900 	.word	0x003d0900
 800cb5c:	00989680 	.word	0x00989680
 800cb60:	00bb8000 	.word	0x00bb8000
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800cb64:	e9d7 2300 	ldrd	r2, r3, [r7]
 800cb68:	f5a2 2100 	sub.w	r1, r2, #524288	; 0x80000
 800cb6c:	430b      	orrs	r3, r1
 800cb6e:	d173      	bne.n	800cc58 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 800cb70:	4b9c      	ldr	r3, [pc, #624]	; (800cde4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800cb72:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cb74:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800cb78:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800cb7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb7c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800cb80:	d02f      	beq.n	800cbe2 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 800cb82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb84:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800cb88:	d863      	bhi.n	800cc52 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
 800cb8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb8c:	2b00      	cmp	r3, #0
 800cb8e:	d004      	beq.n	800cb9a <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 800cb90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb92:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800cb96:	d012      	beq.n	800cbbe <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 800cb98:	e05b      	b.n	800cc52 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800cb9a:	4b92      	ldr	r3, [pc, #584]	; (800cde4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800cb9c:	681b      	ldr	r3, [r3, #0]
 800cb9e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800cba2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800cba6:	d107      	bne.n	800cbb8 <HAL_RCCEx_GetPeriphCLKFreq+0x810>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800cba8:	f107 0318 	add.w	r3, r7, #24
 800cbac:	4618      	mov	r0, r3
 800cbae:	f000 f991 	bl	800ced4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800cbb2:	69bb      	ldr	r3, [r7, #24]
 800cbb4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cbb6:	e16e      	b.n	800ce96 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800cbb8:	2300      	movs	r3, #0
 800cbba:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cbbc:	e16b      	b.n	800ce96 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800cbbe:	4b89      	ldr	r3, [pc, #548]	; (800cde4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800cbc0:	681b      	ldr	r3, [r3, #0]
 800cbc2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800cbc6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800cbca:	d107      	bne.n	800cbdc <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800cbcc:	f107 030c 	add.w	r3, r7, #12
 800cbd0:	4618      	mov	r0, r3
 800cbd2:	f000 fad3 	bl	800d17c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800cbd6:	697b      	ldr	r3, [r7, #20]
 800cbd8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cbda:	e15c      	b.n	800ce96 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800cbdc:	2300      	movs	r3, #0
 800cbde:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cbe0:	e159      	b.n	800ce96 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800cbe2:	4b80      	ldr	r3, [pc, #512]	; (800cde4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800cbe4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800cbe6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800cbea:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800cbec:	4b7d      	ldr	r3, [pc, #500]	; (800cde4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800cbee:	681b      	ldr	r3, [r3, #0]
 800cbf0:	f003 0304 	and.w	r3, r3, #4
 800cbf4:	2b04      	cmp	r3, #4
 800cbf6:	d10c      	bne.n	800cc12 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 800cbf8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cbfa:	2b00      	cmp	r3, #0
 800cbfc:	d109      	bne.n	800cc12 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800cbfe:	4b79      	ldr	r3, [pc, #484]	; (800cde4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800cc00:	681b      	ldr	r3, [r3, #0]
 800cc02:	08db      	lsrs	r3, r3, #3
 800cc04:	f003 0303 	and.w	r3, r3, #3
 800cc08:	4a77      	ldr	r2, [pc, #476]	; (800cde8 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 800cc0a:	fa22 f303 	lsr.w	r3, r2, r3
 800cc0e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800cc10:	e01e      	b.n	800cc50 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800cc12:	4b74      	ldr	r3, [pc, #464]	; (800cde4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800cc14:	681b      	ldr	r3, [r3, #0]
 800cc16:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cc1a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800cc1e:	d106      	bne.n	800cc2e <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 800cc20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cc22:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800cc26:	d102      	bne.n	800cc2e <HAL_RCCEx_GetPeriphCLKFreq+0x886>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800cc28:	4b70      	ldr	r3, [pc, #448]	; (800cdec <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 800cc2a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800cc2c:	e010      	b.n	800cc50 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800cc2e:	4b6d      	ldr	r3, [pc, #436]	; (800cde4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800cc30:	681b      	ldr	r3, [r3, #0]
 800cc32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800cc36:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800cc3a:	d106      	bne.n	800cc4a <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 800cc3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cc3e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800cc42:	d102      	bne.n	800cc4a <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800cc44:	4b6a      	ldr	r3, [pc, #424]	; (800cdf0 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 800cc46:	63fb      	str	r3, [r7, #60]	; 0x3c
 800cc48:	e002      	b.n	800cc50 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800cc4a:	2300      	movs	r3, #0
 800cc4c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800cc4e:	e122      	b.n	800ce96 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800cc50:	e121      	b.n	800ce96 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800cc52:	2300      	movs	r3, #0
 800cc54:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cc56:	e11e      	b.n	800ce96 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800cc58:	e9d7 2300 	ldrd	r2, r3, [r7]
 800cc5c:	f5a2 3180 	sub.w	r1, r2, #65536	; 0x10000
 800cc60:	430b      	orrs	r3, r1
 800cc62:	d133      	bne.n	800cccc <HAL_RCCEx_GetPeriphCLKFreq+0x924>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 800cc64:	4b5f      	ldr	r3, [pc, #380]	; (800cde4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800cc66:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800cc68:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800cc6c:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800cc6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc70:	2b00      	cmp	r3, #0
 800cc72:	d004      	beq.n	800cc7e <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 800cc74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cc76:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800cc7a:	d012      	beq.n	800cca2 <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
 800cc7c:	e023      	b.n	800ccc6 <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800cc7e:	4b59      	ldr	r3, [pc, #356]	; (800cde4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800cc80:	681b      	ldr	r3, [r3, #0]
 800cc82:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800cc86:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800cc8a:	d107      	bne.n	800cc9c <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800cc8c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800cc90:	4618      	mov	r0, r3
 800cc92:	f000 fbc7 	bl	800d424 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800cc96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cc98:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cc9a:	e0fc      	b.n	800ce96 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800cc9c:	2300      	movs	r3, #0
 800cc9e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cca0:	e0f9      	b.n	800ce96 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800cca2:	4b50      	ldr	r3, [pc, #320]	; (800cde4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800cca4:	681b      	ldr	r3, [r3, #0]
 800cca6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800ccaa:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800ccae:	d107      	bne.n	800ccc0 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ccb0:	f107 0318 	add.w	r3, r7, #24
 800ccb4:	4618      	mov	r0, r3
 800ccb6:	f000 f90d 	bl	800ced4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800ccba:	6a3b      	ldr	r3, [r7, #32]
 800ccbc:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ccbe:	e0ea      	b.n	800ce96 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ccc0:	2300      	movs	r3, #0
 800ccc2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ccc4:	e0e7      	b.n	800ce96 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800ccc6:	2300      	movs	r3, #0
 800ccc8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ccca:	e0e4      	b.n	800ce96 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 800cccc:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ccd0:	f5a2 4180 	sub.w	r1, r2, #16384	; 0x4000
 800ccd4:	430b      	orrs	r3, r1
 800ccd6:	f040 808d 	bne.w	800cdf4 <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 800ccda:	4b42      	ldr	r3, [pc, #264]	; (800cde4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800ccdc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ccde:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 800cce2:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800cce4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cce6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800ccea:	d06b      	beq.n	800cdc4 <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 800ccec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ccee:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800ccf2:	d874      	bhi.n	800cdde <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800ccf4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ccf6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ccfa:	d056      	beq.n	800cdaa <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 800ccfc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ccfe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800cd02:	d86c      	bhi.n	800cdde <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800cd04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd06:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800cd0a:	d03b      	beq.n	800cd84 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
 800cd0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd0e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800cd12:	d864      	bhi.n	800cdde <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800cd14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd16:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800cd1a:	d021      	beq.n	800cd60 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 800cd1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd1e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800cd22:	d85c      	bhi.n	800cdde <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800cd24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd26:	2b00      	cmp	r3, #0
 800cd28:	d004      	beq.n	800cd34 <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
 800cd2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cd2c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800cd30:	d004      	beq.n	800cd3c <HAL_RCCEx_GetPeriphCLKFreq+0x994>
 800cd32:	e054      	b.n	800cdde <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 800cd34:	f000 f8b8 	bl	800cea8 <HAL_RCCEx_GetD3PCLK1Freq>
 800cd38:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800cd3a:	e0ac      	b.n	800ce96 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800cd3c:	4b29      	ldr	r3, [pc, #164]	; (800cde4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800cd3e:	681b      	ldr	r3, [r3, #0]
 800cd40:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800cd44:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800cd48:	d107      	bne.n	800cd5a <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800cd4a:	f107 0318 	add.w	r3, r7, #24
 800cd4e:	4618      	mov	r0, r3
 800cd50:	f000 f8c0 	bl	800ced4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800cd54:	69fb      	ldr	r3, [r7, #28]
 800cd56:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cd58:	e09d      	b.n	800ce96 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800cd5a:	2300      	movs	r3, #0
 800cd5c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cd5e:	e09a      	b.n	800ce96 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800cd60:	4b20      	ldr	r3, [pc, #128]	; (800cde4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800cd62:	681b      	ldr	r3, [r3, #0]
 800cd64:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800cd68:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800cd6c:	d107      	bne.n	800cd7e <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800cd6e:	f107 030c 	add.w	r3, r7, #12
 800cd72:	4618      	mov	r0, r3
 800cd74:	f000 fa02 	bl	800d17c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800cd78:	693b      	ldr	r3, [r7, #16]
 800cd7a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cd7c:	e08b      	b.n	800ce96 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800cd7e:	2300      	movs	r3, #0
 800cd80:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cd82:	e088      	b.n	800ce96 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800cd84:	4b17      	ldr	r3, [pc, #92]	; (800cde4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800cd86:	681b      	ldr	r3, [r3, #0]
 800cd88:	f003 0304 	and.w	r3, r3, #4
 800cd8c:	2b04      	cmp	r3, #4
 800cd8e:	d109      	bne.n	800cda4 <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800cd90:	4b14      	ldr	r3, [pc, #80]	; (800cde4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800cd92:	681b      	ldr	r3, [r3, #0]
 800cd94:	08db      	lsrs	r3, r3, #3
 800cd96:	f003 0303 	and.w	r3, r3, #3
 800cd9a:	4a13      	ldr	r2, [pc, #76]	; (800cde8 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 800cd9c:	fa22 f303 	lsr.w	r3, r2, r3
 800cda0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cda2:	e078      	b.n	800ce96 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800cda4:	2300      	movs	r3, #0
 800cda6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cda8:	e075      	b.n	800ce96 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800cdaa:	4b0e      	ldr	r3, [pc, #56]	; (800cde4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800cdac:	681b      	ldr	r3, [r3, #0]
 800cdae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cdb2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800cdb6:	d102      	bne.n	800cdbe <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
        {
          frequency = CSI_VALUE;
 800cdb8:	4b0c      	ldr	r3, [pc, #48]	; (800cdec <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 800cdba:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cdbc:	e06b      	b.n	800ce96 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800cdbe:	2300      	movs	r3, #0
 800cdc0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cdc2:	e068      	b.n	800ce96 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800cdc4:	4b07      	ldr	r3, [pc, #28]	; (800cde4 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800cdc6:	681b      	ldr	r3, [r3, #0]
 800cdc8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800cdcc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800cdd0:	d102      	bne.n	800cdd8 <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
        {
          frequency = HSE_VALUE;
 800cdd2:	4b07      	ldr	r3, [pc, #28]	; (800cdf0 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 800cdd4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cdd6:	e05e      	b.n	800ce96 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800cdd8:	2300      	movs	r3, #0
 800cdda:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cddc:	e05b      	b.n	800ce96 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 800cdde:	2300      	movs	r3, #0
 800cde0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cde2:	e058      	b.n	800ce96 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800cde4:	58024400 	.word	0x58024400
 800cde8:	03d09000 	.word	0x03d09000
 800cdec:	003d0900 	.word	0x003d0900
 800cdf0:	00989680 	.word	0x00989680
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 800cdf4:	e9d7 2300 	ldrd	r2, r3, [r7]
 800cdf8:	f5a2 4100 	sub.w	r1, r2, #32768	; 0x8000
 800cdfc:	430b      	orrs	r3, r1
 800cdfe:	d148      	bne.n	800ce92 <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 800ce00:	4b27      	ldr	r3, [pc, #156]	; (800cea0 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800ce02:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ce04:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800ce08:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800ce0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce0c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ce10:	d02a      	beq.n	800ce68 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
 800ce12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce14:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ce18:	d838      	bhi.n	800ce8c <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 800ce1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce1c:	2b00      	cmp	r3, #0
 800ce1e:	d004      	beq.n	800ce2a <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 800ce20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce22:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800ce26:	d00d      	beq.n	800ce44 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 800ce28:	e030      	b.n	800ce8c <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800ce2a:	4b1d      	ldr	r3, [pc, #116]	; (800cea0 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800ce2c:	681b      	ldr	r3, [r3, #0]
 800ce2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ce32:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800ce36:	d102      	bne.n	800ce3e <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSE_VALUE;
 800ce38:	4b1a      	ldr	r3, [pc, #104]	; (800cea4 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 800ce3a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ce3c:	e02b      	b.n	800ce96 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ce3e:	2300      	movs	r3, #0
 800ce40:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ce42:	e028      	b.n	800ce96 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800ce44:	4b16      	ldr	r3, [pc, #88]	; (800cea0 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800ce46:	681b      	ldr	r3, [r3, #0]
 800ce48:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ce4c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800ce50:	d107      	bne.n	800ce62 <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800ce52:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ce56:	4618      	mov	r0, r3
 800ce58:	f000 fae4 	bl	800d424 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800ce5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ce5e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ce60:	e019      	b.n	800ce96 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ce62:	2300      	movs	r3, #0
 800ce64:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ce66:	e016      	b.n	800ce96 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800ce68:	4b0d      	ldr	r3, [pc, #52]	; (800cea0 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800ce6a:	681b      	ldr	r3, [r3, #0]
 800ce6c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800ce70:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800ce74:	d107      	bne.n	800ce86 <HAL_RCCEx_GetPeriphCLKFreq+0xade>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ce76:	f107 0318 	add.w	r3, r7, #24
 800ce7a:	4618      	mov	r0, r3
 800ce7c:	f000 f82a 	bl	800ced4 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800ce80:	69fb      	ldr	r3, [r7, #28]
 800ce82:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ce84:	e007      	b.n	800ce96 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ce86:	2300      	movs	r3, #0
 800ce88:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ce8a:	e004      	b.n	800ce96 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800ce8c:	2300      	movs	r3, #0
 800ce8e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ce90:	e001      	b.n	800ce96 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else
  {
    frequency = 0;
 800ce92:	2300      	movs	r3, #0
 800ce94:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  return frequency;
 800ce96:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800ce98:	4618      	mov	r0, r3
 800ce9a:	3740      	adds	r7, #64	; 0x40
 800ce9c:	46bd      	mov	sp, r7
 800ce9e:	bd80      	pop	{r7, pc}
 800cea0:	58024400 	.word	0x58024400
 800cea4:	00989680 	.word	0x00989680

0800cea8 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800cea8:	b580      	push	{r7, lr}
 800ceaa:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800ceac:	f7fd fffa 	bl	800aea4 <HAL_RCC_GetHCLKFreq>
 800ceb0:	4602      	mov	r2, r0
 800ceb2:	4b06      	ldr	r3, [pc, #24]	; (800cecc <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800ceb4:	6a1b      	ldr	r3, [r3, #32]
 800ceb6:	091b      	lsrs	r3, r3, #4
 800ceb8:	f003 0307 	and.w	r3, r3, #7
 800cebc:	4904      	ldr	r1, [pc, #16]	; (800ced0 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800cebe:	5ccb      	ldrb	r3, [r1, r3]
 800cec0:	f003 031f 	and.w	r3, r3, #31
 800cec4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800cec8:	4618      	mov	r0, r3
 800ceca:	bd80      	pop	{r7, pc}
 800cecc:	58024400 	.word	0x58024400
 800ced0:	08020d08 	.word	0x08020d08

0800ced4 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800ced4:	b480      	push	{r7}
 800ced6:	b089      	sub	sp, #36	; 0x24
 800ced8:	af00      	add	r7, sp, #0
 800ceda:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800cedc:	4ba1      	ldr	r3, [pc, #644]	; (800d164 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800cede:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cee0:	f003 0303 	and.w	r3, r3, #3
 800cee4:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800cee6:	4b9f      	ldr	r3, [pc, #636]	; (800d164 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800cee8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ceea:	0b1b      	lsrs	r3, r3, #12
 800ceec:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800cef0:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800cef2:	4b9c      	ldr	r3, [pc, #624]	; (800d164 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800cef4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cef6:	091b      	lsrs	r3, r3, #4
 800cef8:	f003 0301 	and.w	r3, r3, #1
 800cefc:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800cefe:	4b99      	ldr	r3, [pc, #612]	; (800d164 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800cf00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cf02:	08db      	lsrs	r3, r3, #3
 800cf04:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800cf08:	693a      	ldr	r2, [r7, #16]
 800cf0a:	fb02 f303 	mul.w	r3, r2, r3
 800cf0e:	ee07 3a90 	vmov	s15, r3
 800cf12:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cf16:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800cf1a:	697b      	ldr	r3, [r7, #20]
 800cf1c:	2b00      	cmp	r3, #0
 800cf1e:	f000 8111 	beq.w	800d144 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800cf22:	69bb      	ldr	r3, [r7, #24]
 800cf24:	2b02      	cmp	r3, #2
 800cf26:	f000 8083 	beq.w	800d030 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800cf2a:	69bb      	ldr	r3, [r7, #24]
 800cf2c:	2b02      	cmp	r3, #2
 800cf2e:	f200 80a1 	bhi.w	800d074 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800cf32:	69bb      	ldr	r3, [r7, #24]
 800cf34:	2b00      	cmp	r3, #0
 800cf36:	d003      	beq.n	800cf40 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800cf38:	69bb      	ldr	r3, [r7, #24]
 800cf3a:	2b01      	cmp	r3, #1
 800cf3c:	d056      	beq.n	800cfec <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800cf3e:	e099      	b.n	800d074 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800cf40:	4b88      	ldr	r3, [pc, #544]	; (800d164 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800cf42:	681b      	ldr	r3, [r3, #0]
 800cf44:	f003 0320 	and.w	r3, r3, #32
 800cf48:	2b00      	cmp	r3, #0
 800cf4a:	d02d      	beq.n	800cfa8 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800cf4c:	4b85      	ldr	r3, [pc, #532]	; (800d164 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800cf4e:	681b      	ldr	r3, [r3, #0]
 800cf50:	08db      	lsrs	r3, r3, #3
 800cf52:	f003 0303 	and.w	r3, r3, #3
 800cf56:	4a84      	ldr	r2, [pc, #528]	; (800d168 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800cf58:	fa22 f303 	lsr.w	r3, r2, r3
 800cf5c:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800cf5e:	68bb      	ldr	r3, [r7, #8]
 800cf60:	ee07 3a90 	vmov	s15, r3
 800cf64:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cf68:	697b      	ldr	r3, [r7, #20]
 800cf6a:	ee07 3a90 	vmov	s15, r3
 800cf6e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cf72:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cf76:	4b7b      	ldr	r3, [pc, #492]	; (800d164 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800cf78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cf7a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cf7e:	ee07 3a90 	vmov	s15, r3
 800cf82:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cf86:	ed97 6a03 	vldr	s12, [r7, #12]
 800cf8a:	eddf 5a78 	vldr	s11, [pc, #480]	; 800d16c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800cf8e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cf92:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cf96:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800cf9a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cf9e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cfa2:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800cfa6:	e087      	b.n	800d0b8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800cfa8:	697b      	ldr	r3, [r7, #20]
 800cfaa:	ee07 3a90 	vmov	s15, r3
 800cfae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cfb2:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800d170 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800cfb6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cfba:	4b6a      	ldr	r3, [pc, #424]	; (800d164 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800cfbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cfbe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cfc2:	ee07 3a90 	vmov	s15, r3
 800cfc6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cfca:	ed97 6a03 	vldr	s12, [r7, #12]
 800cfce:	eddf 5a67 	vldr	s11, [pc, #412]	; 800d16c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800cfd2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cfd6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cfda:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800cfde:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cfe2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cfe6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800cfea:	e065      	b.n	800d0b8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800cfec:	697b      	ldr	r3, [r7, #20]
 800cfee:	ee07 3a90 	vmov	s15, r3
 800cff2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cff6:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800d174 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800cffa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cffe:	4b59      	ldr	r3, [pc, #356]	; (800d164 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d000:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d002:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d006:	ee07 3a90 	vmov	s15, r3
 800d00a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d00e:	ed97 6a03 	vldr	s12, [r7, #12]
 800d012:	eddf 5a56 	vldr	s11, [pc, #344]	; 800d16c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800d016:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d01a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d01e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d022:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d026:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d02a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d02e:	e043      	b.n	800d0b8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800d030:	697b      	ldr	r3, [r7, #20]
 800d032:	ee07 3a90 	vmov	s15, r3
 800d036:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d03a:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800d178 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800d03e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d042:	4b48      	ldr	r3, [pc, #288]	; (800d164 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d044:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d046:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d04a:	ee07 3a90 	vmov	s15, r3
 800d04e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d052:	ed97 6a03 	vldr	s12, [r7, #12]
 800d056:	eddf 5a45 	vldr	s11, [pc, #276]	; 800d16c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800d05a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d05e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d062:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d066:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d06a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d06e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d072:	e021      	b.n	800d0b8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800d074:	697b      	ldr	r3, [r7, #20]
 800d076:	ee07 3a90 	vmov	s15, r3
 800d07a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d07e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800d174 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800d082:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d086:	4b37      	ldr	r3, [pc, #220]	; (800d164 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d088:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d08a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d08e:	ee07 3a90 	vmov	s15, r3
 800d092:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d096:	ed97 6a03 	vldr	s12, [r7, #12]
 800d09a:	eddf 5a34 	vldr	s11, [pc, #208]	; 800d16c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800d09e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d0a2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d0a6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d0aa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d0ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d0b2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d0b6:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800d0b8:	4b2a      	ldr	r3, [pc, #168]	; (800d164 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d0ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d0bc:	0a5b      	lsrs	r3, r3, #9
 800d0be:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d0c2:	ee07 3a90 	vmov	s15, r3
 800d0c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d0ca:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d0ce:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d0d2:	edd7 6a07 	vldr	s13, [r7, #28]
 800d0d6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d0da:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d0de:	ee17 2a90 	vmov	r2, s15
 800d0e2:	687b      	ldr	r3, [r7, #4]
 800d0e4:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800d0e6:	4b1f      	ldr	r3, [pc, #124]	; (800d164 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d0e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d0ea:	0c1b      	lsrs	r3, r3, #16
 800d0ec:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d0f0:	ee07 3a90 	vmov	s15, r3
 800d0f4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d0f8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d0fc:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d100:	edd7 6a07 	vldr	s13, [r7, #28]
 800d104:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d108:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d10c:	ee17 2a90 	vmov	r2, s15
 800d110:	687b      	ldr	r3, [r7, #4]
 800d112:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800d114:	4b13      	ldr	r3, [pc, #76]	; (800d164 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800d116:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d118:	0e1b      	lsrs	r3, r3, #24
 800d11a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d11e:	ee07 3a90 	vmov	s15, r3
 800d122:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d126:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d12a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d12e:	edd7 6a07 	vldr	s13, [r7, #28]
 800d132:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d136:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d13a:	ee17 2a90 	vmov	r2, s15
 800d13e:	687b      	ldr	r3, [r7, #4]
 800d140:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800d142:	e008      	b.n	800d156 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800d144:	687b      	ldr	r3, [r7, #4]
 800d146:	2200      	movs	r2, #0
 800d148:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800d14a:	687b      	ldr	r3, [r7, #4]
 800d14c:	2200      	movs	r2, #0
 800d14e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800d150:	687b      	ldr	r3, [r7, #4]
 800d152:	2200      	movs	r2, #0
 800d154:	609a      	str	r2, [r3, #8]
}
 800d156:	bf00      	nop
 800d158:	3724      	adds	r7, #36	; 0x24
 800d15a:	46bd      	mov	sp, r7
 800d15c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d160:	4770      	bx	lr
 800d162:	bf00      	nop
 800d164:	58024400 	.word	0x58024400
 800d168:	03d09000 	.word	0x03d09000
 800d16c:	46000000 	.word	0x46000000
 800d170:	4c742400 	.word	0x4c742400
 800d174:	4a742400 	.word	0x4a742400
 800d178:	4b189680 	.word	0x4b189680

0800d17c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800d17c:	b480      	push	{r7}
 800d17e:	b089      	sub	sp, #36	; 0x24
 800d180:	af00      	add	r7, sp, #0
 800d182:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800d184:	4ba1      	ldr	r3, [pc, #644]	; (800d40c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d186:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d188:	f003 0303 	and.w	r3, r3, #3
 800d18c:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800d18e:	4b9f      	ldr	r3, [pc, #636]	; (800d40c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d190:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d192:	0d1b      	lsrs	r3, r3, #20
 800d194:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d198:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800d19a:	4b9c      	ldr	r3, [pc, #624]	; (800d40c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d19c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d19e:	0a1b      	lsrs	r3, r3, #8
 800d1a0:	f003 0301 	and.w	r3, r3, #1
 800d1a4:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800d1a6:	4b99      	ldr	r3, [pc, #612]	; (800d40c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d1a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d1aa:	08db      	lsrs	r3, r3, #3
 800d1ac:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800d1b0:	693a      	ldr	r2, [r7, #16]
 800d1b2:	fb02 f303 	mul.w	r3, r2, r3
 800d1b6:	ee07 3a90 	vmov	s15, r3
 800d1ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d1be:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800d1c2:	697b      	ldr	r3, [r7, #20]
 800d1c4:	2b00      	cmp	r3, #0
 800d1c6:	f000 8111 	beq.w	800d3ec <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800d1ca:	69bb      	ldr	r3, [r7, #24]
 800d1cc:	2b02      	cmp	r3, #2
 800d1ce:	f000 8083 	beq.w	800d2d8 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800d1d2:	69bb      	ldr	r3, [r7, #24]
 800d1d4:	2b02      	cmp	r3, #2
 800d1d6:	f200 80a1 	bhi.w	800d31c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800d1da:	69bb      	ldr	r3, [r7, #24]
 800d1dc:	2b00      	cmp	r3, #0
 800d1de:	d003      	beq.n	800d1e8 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800d1e0:	69bb      	ldr	r3, [r7, #24]
 800d1e2:	2b01      	cmp	r3, #1
 800d1e4:	d056      	beq.n	800d294 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800d1e6:	e099      	b.n	800d31c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800d1e8:	4b88      	ldr	r3, [pc, #544]	; (800d40c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d1ea:	681b      	ldr	r3, [r3, #0]
 800d1ec:	f003 0320 	and.w	r3, r3, #32
 800d1f0:	2b00      	cmp	r3, #0
 800d1f2:	d02d      	beq.n	800d250 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800d1f4:	4b85      	ldr	r3, [pc, #532]	; (800d40c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d1f6:	681b      	ldr	r3, [r3, #0]
 800d1f8:	08db      	lsrs	r3, r3, #3
 800d1fa:	f003 0303 	and.w	r3, r3, #3
 800d1fe:	4a84      	ldr	r2, [pc, #528]	; (800d410 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800d200:	fa22 f303 	lsr.w	r3, r2, r3
 800d204:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800d206:	68bb      	ldr	r3, [r7, #8]
 800d208:	ee07 3a90 	vmov	s15, r3
 800d20c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d210:	697b      	ldr	r3, [r7, #20]
 800d212:	ee07 3a90 	vmov	s15, r3
 800d216:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d21a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d21e:	4b7b      	ldr	r3, [pc, #492]	; (800d40c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d220:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d222:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d226:	ee07 3a90 	vmov	s15, r3
 800d22a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d22e:	ed97 6a03 	vldr	s12, [r7, #12]
 800d232:	eddf 5a78 	vldr	s11, [pc, #480]	; 800d414 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800d236:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d23a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d23e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d242:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d246:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d24a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800d24e:	e087      	b.n	800d360 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800d250:	697b      	ldr	r3, [r7, #20]
 800d252:	ee07 3a90 	vmov	s15, r3
 800d256:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d25a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800d418 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800d25e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d262:	4b6a      	ldr	r3, [pc, #424]	; (800d40c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d264:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d266:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d26a:	ee07 3a90 	vmov	s15, r3
 800d26e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d272:	ed97 6a03 	vldr	s12, [r7, #12]
 800d276:	eddf 5a67 	vldr	s11, [pc, #412]	; 800d414 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800d27a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d27e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d282:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d286:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d28a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d28e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d292:	e065      	b.n	800d360 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800d294:	697b      	ldr	r3, [r7, #20]
 800d296:	ee07 3a90 	vmov	s15, r3
 800d29a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d29e:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800d41c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800d2a2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d2a6:	4b59      	ldr	r3, [pc, #356]	; (800d40c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d2a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d2aa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d2ae:	ee07 3a90 	vmov	s15, r3
 800d2b2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d2b6:	ed97 6a03 	vldr	s12, [r7, #12]
 800d2ba:	eddf 5a56 	vldr	s11, [pc, #344]	; 800d414 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800d2be:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d2c2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d2c6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d2ca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d2ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d2d2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d2d6:	e043      	b.n	800d360 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800d2d8:	697b      	ldr	r3, [r7, #20]
 800d2da:	ee07 3a90 	vmov	s15, r3
 800d2de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d2e2:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800d420 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800d2e6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d2ea:	4b48      	ldr	r3, [pc, #288]	; (800d40c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d2ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d2ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d2f2:	ee07 3a90 	vmov	s15, r3
 800d2f6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d2fa:	ed97 6a03 	vldr	s12, [r7, #12]
 800d2fe:	eddf 5a45 	vldr	s11, [pc, #276]	; 800d414 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800d302:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d306:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d30a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d30e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d312:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d316:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d31a:	e021      	b.n	800d360 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800d31c:	697b      	ldr	r3, [r7, #20]
 800d31e:	ee07 3a90 	vmov	s15, r3
 800d322:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d326:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800d41c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800d32a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d32e:	4b37      	ldr	r3, [pc, #220]	; (800d40c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d330:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d332:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d336:	ee07 3a90 	vmov	s15, r3
 800d33a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d33e:	ed97 6a03 	vldr	s12, [r7, #12]
 800d342:	eddf 5a34 	vldr	s11, [pc, #208]	; 800d414 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800d346:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d34a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d34e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d352:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d356:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d35a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d35e:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800d360:	4b2a      	ldr	r3, [pc, #168]	; (800d40c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d362:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d364:	0a5b      	lsrs	r3, r3, #9
 800d366:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d36a:	ee07 3a90 	vmov	s15, r3
 800d36e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d372:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d376:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d37a:	edd7 6a07 	vldr	s13, [r7, #28]
 800d37e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d382:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d386:	ee17 2a90 	vmov	r2, s15
 800d38a:	687b      	ldr	r3, [r7, #4]
 800d38c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800d38e:	4b1f      	ldr	r3, [pc, #124]	; (800d40c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d390:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d392:	0c1b      	lsrs	r3, r3, #16
 800d394:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d398:	ee07 3a90 	vmov	s15, r3
 800d39c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d3a0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d3a4:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d3a8:	edd7 6a07 	vldr	s13, [r7, #28]
 800d3ac:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d3b0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d3b4:	ee17 2a90 	vmov	r2, s15
 800d3b8:	687b      	ldr	r3, [r7, #4]
 800d3ba:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800d3bc:	4b13      	ldr	r3, [pc, #76]	; (800d40c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d3be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d3c0:	0e1b      	lsrs	r3, r3, #24
 800d3c2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d3c6:	ee07 3a90 	vmov	s15, r3
 800d3ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d3ce:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d3d2:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d3d6:	edd7 6a07 	vldr	s13, [r7, #28]
 800d3da:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d3de:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d3e2:	ee17 2a90 	vmov	r2, s15
 800d3e6:	687b      	ldr	r3, [r7, #4]
 800d3e8:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800d3ea:	e008      	b.n	800d3fe <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800d3ec:	687b      	ldr	r3, [r7, #4]
 800d3ee:	2200      	movs	r2, #0
 800d3f0:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800d3f2:	687b      	ldr	r3, [r7, #4]
 800d3f4:	2200      	movs	r2, #0
 800d3f6:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800d3f8:	687b      	ldr	r3, [r7, #4]
 800d3fa:	2200      	movs	r2, #0
 800d3fc:	609a      	str	r2, [r3, #8]
}
 800d3fe:	bf00      	nop
 800d400:	3724      	adds	r7, #36	; 0x24
 800d402:	46bd      	mov	sp, r7
 800d404:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d408:	4770      	bx	lr
 800d40a:	bf00      	nop
 800d40c:	58024400 	.word	0x58024400
 800d410:	03d09000 	.word	0x03d09000
 800d414:	46000000 	.word	0x46000000
 800d418:	4c742400 	.word	0x4c742400
 800d41c:	4a742400 	.word	0x4a742400
 800d420:	4b189680 	.word	0x4b189680

0800d424 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 800d424:	b480      	push	{r7}
 800d426:	b089      	sub	sp, #36	; 0x24
 800d428:	af00      	add	r7, sp, #0
 800d42a:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800d42c:	4ba0      	ldr	r3, [pc, #640]	; (800d6b0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d42e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d430:	f003 0303 	and.w	r3, r3, #3
 800d434:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 800d436:	4b9e      	ldr	r3, [pc, #632]	; (800d6b0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d438:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d43a:	091b      	lsrs	r3, r3, #4
 800d43c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d440:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800d442:	4b9b      	ldr	r3, [pc, #620]	; (800d6b0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d444:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d446:	f003 0301 	and.w	r3, r3, #1
 800d44a:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800d44c:	4b98      	ldr	r3, [pc, #608]	; (800d6b0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d44e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d450:	08db      	lsrs	r3, r3, #3
 800d452:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800d456:	693a      	ldr	r2, [r7, #16]
 800d458:	fb02 f303 	mul.w	r3, r2, r3
 800d45c:	ee07 3a90 	vmov	s15, r3
 800d460:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d464:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 800d468:	697b      	ldr	r3, [r7, #20]
 800d46a:	2b00      	cmp	r3, #0
 800d46c:	f000 8111 	beq.w	800d692 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 800d470:	69bb      	ldr	r3, [r7, #24]
 800d472:	2b02      	cmp	r3, #2
 800d474:	f000 8083 	beq.w	800d57e <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 800d478:	69bb      	ldr	r3, [r7, #24]
 800d47a:	2b02      	cmp	r3, #2
 800d47c:	f200 80a1 	bhi.w	800d5c2 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 800d480:	69bb      	ldr	r3, [r7, #24]
 800d482:	2b00      	cmp	r3, #0
 800d484:	d003      	beq.n	800d48e <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800d486:	69bb      	ldr	r3, [r7, #24]
 800d488:	2b01      	cmp	r3, #1
 800d48a:	d056      	beq.n	800d53a <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 800d48c:	e099      	b.n	800d5c2 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800d48e:	4b88      	ldr	r3, [pc, #544]	; (800d6b0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d490:	681b      	ldr	r3, [r3, #0]
 800d492:	f003 0320 	and.w	r3, r3, #32
 800d496:	2b00      	cmp	r3, #0
 800d498:	d02d      	beq.n	800d4f6 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800d49a:	4b85      	ldr	r3, [pc, #532]	; (800d6b0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d49c:	681b      	ldr	r3, [r3, #0]
 800d49e:	08db      	lsrs	r3, r3, #3
 800d4a0:	f003 0303 	and.w	r3, r3, #3
 800d4a4:	4a83      	ldr	r2, [pc, #524]	; (800d6b4 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800d4a6:	fa22 f303 	lsr.w	r3, r2, r3
 800d4aa:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800d4ac:	68bb      	ldr	r3, [r7, #8]
 800d4ae:	ee07 3a90 	vmov	s15, r3
 800d4b2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d4b6:	697b      	ldr	r3, [r7, #20]
 800d4b8:	ee07 3a90 	vmov	s15, r3
 800d4bc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d4c0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d4c4:	4b7a      	ldr	r3, [pc, #488]	; (800d6b0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d4c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d4c8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d4cc:	ee07 3a90 	vmov	s15, r3
 800d4d0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d4d4:	ed97 6a03 	vldr	s12, [r7, #12]
 800d4d8:	eddf 5a77 	vldr	s11, [pc, #476]	; 800d6b8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800d4dc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d4e0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d4e4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d4e8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d4ec:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d4f0:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800d4f4:	e087      	b.n	800d606 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800d4f6:	697b      	ldr	r3, [r7, #20]
 800d4f8:	ee07 3a90 	vmov	s15, r3
 800d4fc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d500:	eddf 6a6e 	vldr	s13, [pc, #440]	; 800d6bc <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800d504:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d508:	4b69      	ldr	r3, [pc, #420]	; (800d6b0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d50a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d50c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d510:	ee07 3a90 	vmov	s15, r3
 800d514:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d518:	ed97 6a03 	vldr	s12, [r7, #12]
 800d51c:	eddf 5a66 	vldr	s11, [pc, #408]	; 800d6b8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800d520:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d524:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d528:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d52c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d530:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d534:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d538:	e065      	b.n	800d606 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800d53a:	697b      	ldr	r3, [r7, #20]
 800d53c:	ee07 3a90 	vmov	s15, r3
 800d540:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d544:	eddf 6a5e 	vldr	s13, [pc, #376]	; 800d6c0 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 800d548:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d54c:	4b58      	ldr	r3, [pc, #352]	; (800d6b0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d54e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d550:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d554:	ee07 3a90 	vmov	s15, r3
 800d558:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d55c:	ed97 6a03 	vldr	s12, [r7, #12]
 800d560:	eddf 5a55 	vldr	s11, [pc, #340]	; 800d6b8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800d564:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d568:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d56c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d570:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d574:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d578:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d57c:	e043      	b.n	800d606 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800d57e:	697b      	ldr	r3, [r7, #20]
 800d580:	ee07 3a90 	vmov	s15, r3
 800d584:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d588:	eddf 6a4e 	vldr	s13, [pc, #312]	; 800d6c4 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 800d58c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d590:	4b47      	ldr	r3, [pc, #284]	; (800d6b0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d592:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d594:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d598:	ee07 3a90 	vmov	s15, r3
 800d59c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d5a0:	ed97 6a03 	vldr	s12, [r7, #12]
 800d5a4:	eddf 5a44 	vldr	s11, [pc, #272]	; 800d6b8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800d5a8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d5ac:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d5b0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d5b4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d5b8:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d5bc:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d5c0:	e021      	b.n	800d606 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800d5c2:	697b      	ldr	r3, [r7, #20]
 800d5c4:	ee07 3a90 	vmov	s15, r3
 800d5c8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d5cc:	eddf 6a3b 	vldr	s13, [pc, #236]	; 800d6bc <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800d5d0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d5d4:	4b36      	ldr	r3, [pc, #216]	; (800d6b0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d5d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d5d8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d5dc:	ee07 3a90 	vmov	s15, r3
 800d5e0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d5e4:	ed97 6a03 	vldr	s12, [r7, #12]
 800d5e8:	eddf 5a33 	vldr	s11, [pc, #204]	; 800d6b8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800d5ec:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d5f0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d5f4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d5f8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d5fc:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d600:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d604:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 800d606:	4b2a      	ldr	r3, [pc, #168]	; (800d6b0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d608:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d60a:	0a5b      	lsrs	r3, r3, #9
 800d60c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d610:	ee07 3a90 	vmov	s15, r3
 800d614:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d618:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d61c:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d620:	edd7 6a07 	vldr	s13, [r7, #28]
 800d624:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d628:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d62c:	ee17 2a90 	vmov	r2, s15
 800d630:	687b      	ldr	r3, [r7, #4]
 800d632:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 800d634:	4b1e      	ldr	r3, [pc, #120]	; (800d6b0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d636:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d638:	0c1b      	lsrs	r3, r3, #16
 800d63a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d63e:	ee07 3a90 	vmov	s15, r3
 800d642:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d646:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d64a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d64e:	edd7 6a07 	vldr	s13, [r7, #28]
 800d652:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d656:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d65a:	ee17 2a90 	vmov	r2, s15
 800d65e:	687b      	ldr	r3, [r7, #4]
 800d660:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 800d662:	4b13      	ldr	r3, [pc, #76]	; (800d6b0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d664:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d666:	0e1b      	lsrs	r3, r3, #24
 800d668:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d66c:	ee07 3a90 	vmov	s15, r3
 800d670:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d674:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d678:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d67c:	edd7 6a07 	vldr	s13, [r7, #28]
 800d680:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d684:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d688:	ee17 2a90 	vmov	r2, s15
 800d68c:	687b      	ldr	r3, [r7, #4]
 800d68e:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800d690:	e008      	b.n	800d6a4 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800d692:	687b      	ldr	r3, [r7, #4]
 800d694:	2200      	movs	r2, #0
 800d696:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800d698:	687b      	ldr	r3, [r7, #4]
 800d69a:	2200      	movs	r2, #0
 800d69c:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800d69e:	687b      	ldr	r3, [r7, #4]
 800d6a0:	2200      	movs	r2, #0
 800d6a2:	609a      	str	r2, [r3, #8]
}
 800d6a4:	bf00      	nop
 800d6a6:	3724      	adds	r7, #36	; 0x24
 800d6a8:	46bd      	mov	sp, r7
 800d6aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6ae:	4770      	bx	lr
 800d6b0:	58024400 	.word	0x58024400
 800d6b4:	03d09000 	.word	0x03d09000
 800d6b8:	46000000 	.word	0x46000000
 800d6bc:	4c742400 	.word	0x4c742400
 800d6c0:	4a742400 	.word	0x4a742400
 800d6c4:	4b189680 	.word	0x4b189680

0800d6c8 <HAL_RCCEx_CRSConfig>:
  * @brief  Start automatic synchronization for polling mode
  * @param  pInit Pointer on RCC_CRSInitTypeDef structure
  * @retval None
  */
void HAL_RCCEx_CRSConfig(RCC_CRSInitTypeDef *pInit)
{
 800d6c8:	b580      	push	{r7, lr}
 800d6ca:	b084      	sub	sp, #16
 800d6cc:	af00      	add	r7, sp, #0
 800d6ce:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_CRS_HSI48CALIBRATION(pInit->HSI48CalibrationValue));

  /* CONFIGURATION */

  /* Before configuration, reset CRS registers to their default values*/
  __HAL_RCC_CRS_FORCE_RESET();
 800d6d0:	4b26      	ldr	r3, [pc, #152]	; (800d76c <HAL_RCCEx_CRSConfig+0xa4>)
 800d6d2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800d6d6:	4a25      	ldr	r2, [pc, #148]	; (800d76c <HAL_RCCEx_CRSConfig+0xa4>)
 800d6d8:	f043 0302 	orr.w	r3, r3, #2
 800d6dc:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
  __HAL_RCC_CRS_RELEASE_RESET();
 800d6e0:	4b22      	ldr	r3, [pc, #136]	; (800d76c <HAL_RCCEx_CRSConfig+0xa4>)
 800d6e2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800d6e6:	4a21      	ldr	r2, [pc, #132]	; (800d76c <HAL_RCCEx_CRSConfig+0xa4>)
 800d6e8:	f023 0302 	bic.w	r3, r3, #2
 800d6ec:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

  /* Set the SYNCDIV[2:0] bits according to Pre-scaler value */
  /* Set the SYNCSRC[1:0] bits according to Source value */
  /* Set the SYNCSPOL bit according to Polarity value */
  if ((HAL_GetREVID() <= REV_ID_Y) && (pInit->Source == RCC_CRS_SYNC_SOURCE_USB2))
 800d6f0:	f7f6 fe12 	bl	8004318 <HAL_GetREVID>
 800d6f4:	4603      	mov	r3, r0
 800d6f6:	f241 0203 	movw	r2, #4099	; 0x1003
 800d6fa:	4293      	cmp	r3, r2
 800d6fc:	d80b      	bhi.n	800d716 <HAL_RCCEx_CRSConfig+0x4e>
 800d6fe:	687b      	ldr	r3, [r7, #4]
 800d700:	685b      	ldr	r3, [r3, #4]
 800d702:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800d706:	d106      	bne.n	800d716 <HAL_RCCEx_CRSConfig+0x4e>
  {
    /* Use Rev.Y value of USB2 */
    value = (pInit->Prescaler | RCC_CRS_SYNC_SOURCE_PIN | pInit->Polarity);
 800d708:	687b      	ldr	r3, [r7, #4]
 800d70a:	681a      	ldr	r2, [r3, #0]
 800d70c:	687b      	ldr	r3, [r7, #4]
 800d70e:	689b      	ldr	r3, [r3, #8]
 800d710:	4313      	orrs	r3, r2
 800d712:	60fb      	str	r3, [r7, #12]
 800d714:	e008      	b.n	800d728 <HAL_RCCEx_CRSConfig+0x60>
  }
  else
  {
    value = (pInit->Prescaler | pInit->Source | pInit->Polarity);
 800d716:	687b      	ldr	r3, [r7, #4]
 800d718:	681a      	ldr	r2, [r3, #0]
 800d71a:	687b      	ldr	r3, [r7, #4]
 800d71c:	685b      	ldr	r3, [r3, #4]
 800d71e:	431a      	orrs	r2, r3
 800d720:	687b      	ldr	r3, [r7, #4]
 800d722:	689b      	ldr	r3, [r3, #8]
 800d724:	4313      	orrs	r3, r2
 800d726:	60fb      	str	r3, [r7, #12]
  }
  /* Set the RELOAD[15:0] bits according to ReloadValue value */
  value |= pInit->ReloadValue;
 800d728:	687b      	ldr	r3, [r7, #4]
 800d72a:	68db      	ldr	r3, [r3, #12]
 800d72c:	68fa      	ldr	r2, [r7, #12]
 800d72e:	4313      	orrs	r3, r2
 800d730:	60fb      	str	r3, [r7, #12]
  /* Set the FELIM[7:0] bits according to ErrorLimitValue value */
  value |= (pInit->ErrorLimitValue << CRS_CFGR_FELIM_Pos);
 800d732:	687b      	ldr	r3, [r7, #4]
 800d734:	691b      	ldr	r3, [r3, #16]
 800d736:	041b      	lsls	r3, r3, #16
 800d738:	68fa      	ldr	r2, [r7, #12]
 800d73a:	4313      	orrs	r3, r2
 800d73c:	60fb      	str	r3, [r7, #12]
  WRITE_REG(CRS->CFGR, value);
 800d73e:	4a0c      	ldr	r2, [pc, #48]	; (800d770 <HAL_RCCEx_CRSConfig+0xa8>)
 800d740:	68fb      	ldr	r3, [r7, #12]
 800d742:	6053      	str	r3, [r2, #4]

  /* Adjust HSI48 oscillator smooth trimming */
  /* Set the TRIM[5:0] bits according to RCC_CRS_HSI48CalibrationValue value */
  MODIFY_REG(CRS->CR, CRS_CR_TRIM, (pInit->HSI48CalibrationValue << CRS_CR_TRIM_Pos));
 800d744:	4b0a      	ldr	r3, [pc, #40]	; (800d770 <HAL_RCCEx_CRSConfig+0xa8>)
 800d746:	681b      	ldr	r3, [r3, #0]
 800d748:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 800d74c:	687b      	ldr	r3, [r7, #4]
 800d74e:	695b      	ldr	r3, [r3, #20]
 800d750:	021b      	lsls	r3, r3, #8
 800d752:	4907      	ldr	r1, [pc, #28]	; (800d770 <HAL_RCCEx_CRSConfig+0xa8>)
 800d754:	4313      	orrs	r3, r2
 800d756:	600b      	str	r3, [r1, #0]

  /* START AUTOMATIC SYNCHRONIZATION*/

  /* Enable Automatic trimming & Frequency error counter */
  SET_BIT(CRS->CR, CRS_CR_AUTOTRIMEN | CRS_CR_CEN);
 800d758:	4b05      	ldr	r3, [pc, #20]	; (800d770 <HAL_RCCEx_CRSConfig+0xa8>)
 800d75a:	681b      	ldr	r3, [r3, #0]
 800d75c:	4a04      	ldr	r2, [pc, #16]	; (800d770 <HAL_RCCEx_CRSConfig+0xa8>)
 800d75e:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800d762:	6013      	str	r3, [r2, #0]
}
 800d764:	bf00      	nop
 800d766:	3710      	adds	r7, #16
 800d768:	46bd      	mov	sp, r7
 800d76a:	bd80      	pop	{r7, pc}
 800d76c:	58024400 	.word	0x58024400
 800d770:	40008400 	.word	0x40008400

0800d774 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800d774:	b580      	push	{r7, lr}
 800d776:	b084      	sub	sp, #16
 800d778:	af00      	add	r7, sp, #0
 800d77a:	6078      	str	r0, [r7, #4]
 800d77c:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800d77e:	2300      	movs	r3, #0
 800d780:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800d782:	4b53      	ldr	r3, [pc, #332]	; (800d8d0 <RCCEx_PLL2_Config+0x15c>)
 800d784:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d786:	f003 0303 	and.w	r3, r3, #3
 800d78a:	2b03      	cmp	r3, #3
 800d78c:	d101      	bne.n	800d792 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800d78e:	2301      	movs	r3, #1
 800d790:	e099      	b.n	800d8c6 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800d792:	4b4f      	ldr	r3, [pc, #316]	; (800d8d0 <RCCEx_PLL2_Config+0x15c>)
 800d794:	681b      	ldr	r3, [r3, #0]
 800d796:	4a4e      	ldr	r2, [pc, #312]	; (800d8d0 <RCCEx_PLL2_Config+0x15c>)
 800d798:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800d79c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d79e:	f7f6 fd8b 	bl	80042b8 <HAL_GetTick>
 800d7a2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800d7a4:	e008      	b.n	800d7b8 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800d7a6:	f7f6 fd87 	bl	80042b8 <HAL_GetTick>
 800d7aa:	4602      	mov	r2, r0
 800d7ac:	68bb      	ldr	r3, [r7, #8]
 800d7ae:	1ad3      	subs	r3, r2, r3
 800d7b0:	2b02      	cmp	r3, #2
 800d7b2:	d901      	bls.n	800d7b8 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800d7b4:	2303      	movs	r3, #3
 800d7b6:	e086      	b.n	800d8c6 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800d7b8:	4b45      	ldr	r3, [pc, #276]	; (800d8d0 <RCCEx_PLL2_Config+0x15c>)
 800d7ba:	681b      	ldr	r3, [r3, #0]
 800d7bc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800d7c0:	2b00      	cmp	r3, #0
 800d7c2:	d1f0      	bne.n	800d7a6 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800d7c4:	4b42      	ldr	r3, [pc, #264]	; (800d8d0 <RCCEx_PLL2_Config+0x15c>)
 800d7c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d7c8:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800d7cc:	687b      	ldr	r3, [r7, #4]
 800d7ce:	681b      	ldr	r3, [r3, #0]
 800d7d0:	031b      	lsls	r3, r3, #12
 800d7d2:	493f      	ldr	r1, [pc, #252]	; (800d8d0 <RCCEx_PLL2_Config+0x15c>)
 800d7d4:	4313      	orrs	r3, r2
 800d7d6:	628b      	str	r3, [r1, #40]	; 0x28
 800d7d8:	687b      	ldr	r3, [r7, #4]
 800d7da:	685b      	ldr	r3, [r3, #4]
 800d7dc:	3b01      	subs	r3, #1
 800d7de:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800d7e2:	687b      	ldr	r3, [r7, #4]
 800d7e4:	689b      	ldr	r3, [r3, #8]
 800d7e6:	3b01      	subs	r3, #1
 800d7e8:	025b      	lsls	r3, r3, #9
 800d7ea:	b29b      	uxth	r3, r3
 800d7ec:	431a      	orrs	r2, r3
 800d7ee:	687b      	ldr	r3, [r7, #4]
 800d7f0:	68db      	ldr	r3, [r3, #12]
 800d7f2:	3b01      	subs	r3, #1
 800d7f4:	041b      	lsls	r3, r3, #16
 800d7f6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800d7fa:	431a      	orrs	r2, r3
 800d7fc:	687b      	ldr	r3, [r7, #4]
 800d7fe:	691b      	ldr	r3, [r3, #16]
 800d800:	3b01      	subs	r3, #1
 800d802:	061b      	lsls	r3, r3, #24
 800d804:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800d808:	4931      	ldr	r1, [pc, #196]	; (800d8d0 <RCCEx_PLL2_Config+0x15c>)
 800d80a:	4313      	orrs	r3, r2
 800d80c:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800d80e:	4b30      	ldr	r3, [pc, #192]	; (800d8d0 <RCCEx_PLL2_Config+0x15c>)
 800d810:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d812:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800d816:	687b      	ldr	r3, [r7, #4]
 800d818:	695b      	ldr	r3, [r3, #20]
 800d81a:	492d      	ldr	r1, [pc, #180]	; (800d8d0 <RCCEx_PLL2_Config+0x15c>)
 800d81c:	4313      	orrs	r3, r2
 800d81e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800d820:	4b2b      	ldr	r3, [pc, #172]	; (800d8d0 <RCCEx_PLL2_Config+0x15c>)
 800d822:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d824:	f023 0220 	bic.w	r2, r3, #32
 800d828:	687b      	ldr	r3, [r7, #4]
 800d82a:	699b      	ldr	r3, [r3, #24]
 800d82c:	4928      	ldr	r1, [pc, #160]	; (800d8d0 <RCCEx_PLL2_Config+0x15c>)
 800d82e:	4313      	orrs	r3, r2
 800d830:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800d832:	4b27      	ldr	r3, [pc, #156]	; (800d8d0 <RCCEx_PLL2_Config+0x15c>)
 800d834:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d836:	4a26      	ldr	r2, [pc, #152]	; (800d8d0 <RCCEx_PLL2_Config+0x15c>)
 800d838:	f023 0310 	bic.w	r3, r3, #16
 800d83c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800d83e:	4b24      	ldr	r3, [pc, #144]	; (800d8d0 <RCCEx_PLL2_Config+0x15c>)
 800d840:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d842:	4b24      	ldr	r3, [pc, #144]	; (800d8d4 <RCCEx_PLL2_Config+0x160>)
 800d844:	4013      	ands	r3, r2
 800d846:	687a      	ldr	r2, [r7, #4]
 800d848:	69d2      	ldr	r2, [r2, #28]
 800d84a:	00d2      	lsls	r2, r2, #3
 800d84c:	4920      	ldr	r1, [pc, #128]	; (800d8d0 <RCCEx_PLL2_Config+0x15c>)
 800d84e:	4313      	orrs	r3, r2
 800d850:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800d852:	4b1f      	ldr	r3, [pc, #124]	; (800d8d0 <RCCEx_PLL2_Config+0x15c>)
 800d854:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d856:	4a1e      	ldr	r2, [pc, #120]	; (800d8d0 <RCCEx_PLL2_Config+0x15c>)
 800d858:	f043 0310 	orr.w	r3, r3, #16
 800d85c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800d85e:	683b      	ldr	r3, [r7, #0]
 800d860:	2b00      	cmp	r3, #0
 800d862:	d106      	bne.n	800d872 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800d864:	4b1a      	ldr	r3, [pc, #104]	; (800d8d0 <RCCEx_PLL2_Config+0x15c>)
 800d866:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d868:	4a19      	ldr	r2, [pc, #100]	; (800d8d0 <RCCEx_PLL2_Config+0x15c>)
 800d86a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800d86e:	62d3      	str	r3, [r2, #44]	; 0x2c
 800d870:	e00f      	b.n	800d892 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800d872:	683b      	ldr	r3, [r7, #0]
 800d874:	2b01      	cmp	r3, #1
 800d876:	d106      	bne.n	800d886 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800d878:	4b15      	ldr	r3, [pc, #84]	; (800d8d0 <RCCEx_PLL2_Config+0x15c>)
 800d87a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d87c:	4a14      	ldr	r2, [pc, #80]	; (800d8d0 <RCCEx_PLL2_Config+0x15c>)
 800d87e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800d882:	62d3      	str	r3, [r2, #44]	; 0x2c
 800d884:	e005      	b.n	800d892 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800d886:	4b12      	ldr	r3, [pc, #72]	; (800d8d0 <RCCEx_PLL2_Config+0x15c>)
 800d888:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d88a:	4a11      	ldr	r2, [pc, #68]	; (800d8d0 <RCCEx_PLL2_Config+0x15c>)
 800d88c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800d890:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800d892:	4b0f      	ldr	r3, [pc, #60]	; (800d8d0 <RCCEx_PLL2_Config+0x15c>)
 800d894:	681b      	ldr	r3, [r3, #0]
 800d896:	4a0e      	ldr	r2, [pc, #56]	; (800d8d0 <RCCEx_PLL2_Config+0x15c>)
 800d898:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800d89c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d89e:	f7f6 fd0b 	bl	80042b8 <HAL_GetTick>
 800d8a2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800d8a4:	e008      	b.n	800d8b8 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800d8a6:	f7f6 fd07 	bl	80042b8 <HAL_GetTick>
 800d8aa:	4602      	mov	r2, r0
 800d8ac:	68bb      	ldr	r3, [r7, #8]
 800d8ae:	1ad3      	subs	r3, r2, r3
 800d8b0:	2b02      	cmp	r3, #2
 800d8b2:	d901      	bls.n	800d8b8 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800d8b4:	2303      	movs	r3, #3
 800d8b6:	e006      	b.n	800d8c6 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800d8b8:	4b05      	ldr	r3, [pc, #20]	; (800d8d0 <RCCEx_PLL2_Config+0x15c>)
 800d8ba:	681b      	ldr	r3, [r3, #0]
 800d8bc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800d8c0:	2b00      	cmp	r3, #0
 800d8c2:	d0f0      	beq.n	800d8a6 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800d8c4:	7bfb      	ldrb	r3, [r7, #15]
}
 800d8c6:	4618      	mov	r0, r3
 800d8c8:	3710      	adds	r7, #16
 800d8ca:	46bd      	mov	sp, r7
 800d8cc:	bd80      	pop	{r7, pc}
 800d8ce:	bf00      	nop
 800d8d0:	58024400 	.word	0x58024400
 800d8d4:	ffff0007 	.word	0xffff0007

0800d8d8 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800d8d8:	b580      	push	{r7, lr}
 800d8da:	b084      	sub	sp, #16
 800d8dc:	af00      	add	r7, sp, #0
 800d8de:	6078      	str	r0, [r7, #4]
 800d8e0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800d8e2:	2300      	movs	r3, #0
 800d8e4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800d8e6:	4b53      	ldr	r3, [pc, #332]	; (800da34 <RCCEx_PLL3_Config+0x15c>)
 800d8e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d8ea:	f003 0303 	and.w	r3, r3, #3
 800d8ee:	2b03      	cmp	r3, #3
 800d8f0:	d101      	bne.n	800d8f6 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800d8f2:	2301      	movs	r3, #1
 800d8f4:	e099      	b.n	800da2a <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800d8f6:	4b4f      	ldr	r3, [pc, #316]	; (800da34 <RCCEx_PLL3_Config+0x15c>)
 800d8f8:	681b      	ldr	r3, [r3, #0]
 800d8fa:	4a4e      	ldr	r2, [pc, #312]	; (800da34 <RCCEx_PLL3_Config+0x15c>)
 800d8fc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800d900:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d902:	f7f6 fcd9 	bl	80042b8 <HAL_GetTick>
 800d906:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800d908:	e008      	b.n	800d91c <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800d90a:	f7f6 fcd5 	bl	80042b8 <HAL_GetTick>
 800d90e:	4602      	mov	r2, r0
 800d910:	68bb      	ldr	r3, [r7, #8]
 800d912:	1ad3      	subs	r3, r2, r3
 800d914:	2b02      	cmp	r3, #2
 800d916:	d901      	bls.n	800d91c <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800d918:	2303      	movs	r3, #3
 800d91a:	e086      	b.n	800da2a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800d91c:	4b45      	ldr	r3, [pc, #276]	; (800da34 <RCCEx_PLL3_Config+0x15c>)
 800d91e:	681b      	ldr	r3, [r3, #0]
 800d920:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800d924:	2b00      	cmp	r3, #0
 800d926:	d1f0      	bne.n	800d90a <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800d928:	4b42      	ldr	r3, [pc, #264]	; (800da34 <RCCEx_PLL3_Config+0x15c>)
 800d92a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d92c:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800d930:	687b      	ldr	r3, [r7, #4]
 800d932:	681b      	ldr	r3, [r3, #0]
 800d934:	051b      	lsls	r3, r3, #20
 800d936:	493f      	ldr	r1, [pc, #252]	; (800da34 <RCCEx_PLL3_Config+0x15c>)
 800d938:	4313      	orrs	r3, r2
 800d93a:	628b      	str	r3, [r1, #40]	; 0x28
 800d93c:	687b      	ldr	r3, [r7, #4]
 800d93e:	685b      	ldr	r3, [r3, #4]
 800d940:	3b01      	subs	r3, #1
 800d942:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800d946:	687b      	ldr	r3, [r7, #4]
 800d948:	689b      	ldr	r3, [r3, #8]
 800d94a:	3b01      	subs	r3, #1
 800d94c:	025b      	lsls	r3, r3, #9
 800d94e:	b29b      	uxth	r3, r3
 800d950:	431a      	orrs	r2, r3
 800d952:	687b      	ldr	r3, [r7, #4]
 800d954:	68db      	ldr	r3, [r3, #12]
 800d956:	3b01      	subs	r3, #1
 800d958:	041b      	lsls	r3, r3, #16
 800d95a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800d95e:	431a      	orrs	r2, r3
 800d960:	687b      	ldr	r3, [r7, #4]
 800d962:	691b      	ldr	r3, [r3, #16]
 800d964:	3b01      	subs	r3, #1
 800d966:	061b      	lsls	r3, r3, #24
 800d968:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800d96c:	4931      	ldr	r1, [pc, #196]	; (800da34 <RCCEx_PLL3_Config+0x15c>)
 800d96e:	4313      	orrs	r3, r2
 800d970:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800d972:	4b30      	ldr	r3, [pc, #192]	; (800da34 <RCCEx_PLL3_Config+0x15c>)
 800d974:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d976:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800d97a:	687b      	ldr	r3, [r7, #4]
 800d97c:	695b      	ldr	r3, [r3, #20]
 800d97e:	492d      	ldr	r1, [pc, #180]	; (800da34 <RCCEx_PLL3_Config+0x15c>)
 800d980:	4313      	orrs	r3, r2
 800d982:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800d984:	4b2b      	ldr	r3, [pc, #172]	; (800da34 <RCCEx_PLL3_Config+0x15c>)
 800d986:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d988:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800d98c:	687b      	ldr	r3, [r7, #4]
 800d98e:	699b      	ldr	r3, [r3, #24]
 800d990:	4928      	ldr	r1, [pc, #160]	; (800da34 <RCCEx_PLL3_Config+0x15c>)
 800d992:	4313      	orrs	r3, r2
 800d994:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800d996:	4b27      	ldr	r3, [pc, #156]	; (800da34 <RCCEx_PLL3_Config+0x15c>)
 800d998:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d99a:	4a26      	ldr	r2, [pc, #152]	; (800da34 <RCCEx_PLL3_Config+0x15c>)
 800d99c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800d9a0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800d9a2:	4b24      	ldr	r3, [pc, #144]	; (800da34 <RCCEx_PLL3_Config+0x15c>)
 800d9a4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800d9a6:	4b24      	ldr	r3, [pc, #144]	; (800da38 <RCCEx_PLL3_Config+0x160>)
 800d9a8:	4013      	ands	r3, r2
 800d9aa:	687a      	ldr	r2, [r7, #4]
 800d9ac:	69d2      	ldr	r2, [r2, #28]
 800d9ae:	00d2      	lsls	r2, r2, #3
 800d9b0:	4920      	ldr	r1, [pc, #128]	; (800da34 <RCCEx_PLL3_Config+0x15c>)
 800d9b2:	4313      	orrs	r3, r2
 800d9b4:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800d9b6:	4b1f      	ldr	r3, [pc, #124]	; (800da34 <RCCEx_PLL3_Config+0x15c>)
 800d9b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d9ba:	4a1e      	ldr	r2, [pc, #120]	; (800da34 <RCCEx_PLL3_Config+0x15c>)
 800d9bc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800d9c0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800d9c2:	683b      	ldr	r3, [r7, #0]
 800d9c4:	2b00      	cmp	r3, #0
 800d9c6:	d106      	bne.n	800d9d6 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800d9c8:	4b1a      	ldr	r3, [pc, #104]	; (800da34 <RCCEx_PLL3_Config+0x15c>)
 800d9ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d9cc:	4a19      	ldr	r2, [pc, #100]	; (800da34 <RCCEx_PLL3_Config+0x15c>)
 800d9ce:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800d9d2:	62d3      	str	r3, [r2, #44]	; 0x2c
 800d9d4:	e00f      	b.n	800d9f6 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800d9d6:	683b      	ldr	r3, [r7, #0]
 800d9d8:	2b01      	cmp	r3, #1
 800d9da:	d106      	bne.n	800d9ea <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800d9dc:	4b15      	ldr	r3, [pc, #84]	; (800da34 <RCCEx_PLL3_Config+0x15c>)
 800d9de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d9e0:	4a14      	ldr	r2, [pc, #80]	; (800da34 <RCCEx_PLL3_Config+0x15c>)
 800d9e2:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800d9e6:	62d3      	str	r3, [r2, #44]	; 0x2c
 800d9e8:	e005      	b.n	800d9f6 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800d9ea:	4b12      	ldr	r3, [pc, #72]	; (800da34 <RCCEx_PLL3_Config+0x15c>)
 800d9ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d9ee:	4a11      	ldr	r2, [pc, #68]	; (800da34 <RCCEx_PLL3_Config+0x15c>)
 800d9f0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800d9f4:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800d9f6:	4b0f      	ldr	r3, [pc, #60]	; (800da34 <RCCEx_PLL3_Config+0x15c>)
 800d9f8:	681b      	ldr	r3, [r3, #0]
 800d9fa:	4a0e      	ldr	r2, [pc, #56]	; (800da34 <RCCEx_PLL3_Config+0x15c>)
 800d9fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800da00:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800da02:	f7f6 fc59 	bl	80042b8 <HAL_GetTick>
 800da06:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800da08:	e008      	b.n	800da1c <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800da0a:	f7f6 fc55 	bl	80042b8 <HAL_GetTick>
 800da0e:	4602      	mov	r2, r0
 800da10:	68bb      	ldr	r3, [r7, #8]
 800da12:	1ad3      	subs	r3, r2, r3
 800da14:	2b02      	cmp	r3, #2
 800da16:	d901      	bls.n	800da1c <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800da18:	2303      	movs	r3, #3
 800da1a:	e006      	b.n	800da2a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800da1c:	4b05      	ldr	r3, [pc, #20]	; (800da34 <RCCEx_PLL3_Config+0x15c>)
 800da1e:	681b      	ldr	r3, [r3, #0]
 800da20:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800da24:	2b00      	cmp	r3, #0
 800da26:	d0f0      	beq.n	800da0a <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800da28:	7bfb      	ldrb	r3, [r7, #15]
}
 800da2a:	4618      	mov	r0, r3
 800da2c:	3710      	adds	r7, #16
 800da2e:	46bd      	mov	sp, r7
 800da30:	bd80      	pop	{r7, pc}
 800da32:	bf00      	nop
 800da34:	58024400 	.word	0x58024400
 800da38:	ffff0007 	.word	0xffff0007

0800da3c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800da3c:	b580      	push	{r7, lr}
 800da3e:	b082      	sub	sp, #8
 800da40:	af00      	add	r7, sp, #0
 800da42:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800da44:	687b      	ldr	r3, [r7, #4]
 800da46:	2b00      	cmp	r3, #0
 800da48:	d101      	bne.n	800da4e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800da4a:	2301      	movs	r3, #1
 800da4c:	e049      	b.n	800dae2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800da4e:	687b      	ldr	r3, [r7, #4]
 800da50:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800da54:	b2db      	uxtb	r3, r3
 800da56:	2b00      	cmp	r3, #0
 800da58:	d106      	bne.n	800da68 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800da5a:	687b      	ldr	r3, [r7, #4]
 800da5c:	2200      	movs	r2, #0
 800da5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800da62:	6878      	ldr	r0, [r7, #4]
 800da64:	f7f5 fecc 	bl	8003800 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800da68:	687b      	ldr	r3, [r7, #4]
 800da6a:	2202      	movs	r2, #2
 800da6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800da70:	687b      	ldr	r3, [r7, #4]
 800da72:	681a      	ldr	r2, [r3, #0]
 800da74:	687b      	ldr	r3, [r7, #4]
 800da76:	3304      	adds	r3, #4
 800da78:	4619      	mov	r1, r3
 800da7a:	4610      	mov	r0, r2
 800da7c:	f000 f92e 	bl	800dcdc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800da80:	687b      	ldr	r3, [r7, #4]
 800da82:	2201      	movs	r2, #1
 800da84:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800da88:	687b      	ldr	r3, [r7, #4]
 800da8a:	2201      	movs	r2, #1
 800da8c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800da90:	687b      	ldr	r3, [r7, #4]
 800da92:	2201      	movs	r2, #1
 800da94:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800da98:	687b      	ldr	r3, [r7, #4]
 800da9a:	2201      	movs	r2, #1
 800da9c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800daa0:	687b      	ldr	r3, [r7, #4]
 800daa2:	2201      	movs	r2, #1
 800daa4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800daa8:	687b      	ldr	r3, [r7, #4]
 800daaa:	2201      	movs	r2, #1
 800daac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800dab0:	687b      	ldr	r3, [r7, #4]
 800dab2:	2201      	movs	r2, #1
 800dab4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800dab8:	687b      	ldr	r3, [r7, #4]
 800daba:	2201      	movs	r2, #1
 800dabc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800dac0:	687b      	ldr	r3, [r7, #4]
 800dac2:	2201      	movs	r2, #1
 800dac4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800dac8:	687b      	ldr	r3, [r7, #4]
 800daca:	2201      	movs	r2, #1
 800dacc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800dad0:	687b      	ldr	r3, [r7, #4]
 800dad2:	2201      	movs	r2, #1
 800dad4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800dad8:	687b      	ldr	r3, [r7, #4]
 800dada:	2201      	movs	r2, #1
 800dadc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800dae0:	2300      	movs	r3, #0
}
 800dae2:	4618      	mov	r0, r3
 800dae4:	3708      	adds	r7, #8
 800dae6:	46bd      	mov	sp, r7
 800dae8:	bd80      	pop	{r7, pc}
	...

0800daec <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800daec:	b580      	push	{r7, lr}
 800daee:	b084      	sub	sp, #16
 800daf0:	af00      	add	r7, sp, #0
 800daf2:	6078      	str	r0, [r7, #4]
 800daf4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800daf6:	2300      	movs	r3, #0
 800daf8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800dafa:	687b      	ldr	r3, [r7, #4]
 800dafc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800db00:	2b01      	cmp	r3, #1
 800db02:	d101      	bne.n	800db08 <HAL_TIM_ConfigClockSource+0x1c>
 800db04:	2302      	movs	r3, #2
 800db06:	e0dc      	b.n	800dcc2 <HAL_TIM_ConfigClockSource+0x1d6>
 800db08:	687b      	ldr	r3, [r7, #4]
 800db0a:	2201      	movs	r2, #1
 800db0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800db10:	687b      	ldr	r3, [r7, #4]
 800db12:	2202      	movs	r2, #2
 800db14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800db18:	687b      	ldr	r3, [r7, #4]
 800db1a:	681b      	ldr	r3, [r3, #0]
 800db1c:	689b      	ldr	r3, [r3, #8]
 800db1e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800db20:	68ba      	ldr	r2, [r7, #8]
 800db22:	4b6a      	ldr	r3, [pc, #424]	; (800dccc <HAL_TIM_ConfigClockSource+0x1e0>)
 800db24:	4013      	ands	r3, r2
 800db26:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800db28:	68bb      	ldr	r3, [r7, #8]
 800db2a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800db2e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800db30:	687b      	ldr	r3, [r7, #4]
 800db32:	681b      	ldr	r3, [r3, #0]
 800db34:	68ba      	ldr	r2, [r7, #8]
 800db36:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800db38:	683b      	ldr	r3, [r7, #0]
 800db3a:	681b      	ldr	r3, [r3, #0]
 800db3c:	4a64      	ldr	r2, [pc, #400]	; (800dcd0 <HAL_TIM_ConfigClockSource+0x1e4>)
 800db3e:	4293      	cmp	r3, r2
 800db40:	f000 80a9 	beq.w	800dc96 <HAL_TIM_ConfigClockSource+0x1aa>
 800db44:	4a62      	ldr	r2, [pc, #392]	; (800dcd0 <HAL_TIM_ConfigClockSource+0x1e4>)
 800db46:	4293      	cmp	r3, r2
 800db48:	f200 80ae 	bhi.w	800dca8 <HAL_TIM_ConfigClockSource+0x1bc>
 800db4c:	4a61      	ldr	r2, [pc, #388]	; (800dcd4 <HAL_TIM_ConfigClockSource+0x1e8>)
 800db4e:	4293      	cmp	r3, r2
 800db50:	f000 80a1 	beq.w	800dc96 <HAL_TIM_ConfigClockSource+0x1aa>
 800db54:	4a5f      	ldr	r2, [pc, #380]	; (800dcd4 <HAL_TIM_ConfigClockSource+0x1e8>)
 800db56:	4293      	cmp	r3, r2
 800db58:	f200 80a6 	bhi.w	800dca8 <HAL_TIM_ConfigClockSource+0x1bc>
 800db5c:	4a5e      	ldr	r2, [pc, #376]	; (800dcd8 <HAL_TIM_ConfigClockSource+0x1ec>)
 800db5e:	4293      	cmp	r3, r2
 800db60:	f000 8099 	beq.w	800dc96 <HAL_TIM_ConfigClockSource+0x1aa>
 800db64:	4a5c      	ldr	r2, [pc, #368]	; (800dcd8 <HAL_TIM_ConfigClockSource+0x1ec>)
 800db66:	4293      	cmp	r3, r2
 800db68:	f200 809e 	bhi.w	800dca8 <HAL_TIM_ConfigClockSource+0x1bc>
 800db6c:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800db70:	f000 8091 	beq.w	800dc96 <HAL_TIM_ConfigClockSource+0x1aa>
 800db74:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800db78:	f200 8096 	bhi.w	800dca8 <HAL_TIM_ConfigClockSource+0x1bc>
 800db7c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800db80:	f000 8089 	beq.w	800dc96 <HAL_TIM_ConfigClockSource+0x1aa>
 800db84:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800db88:	f200 808e 	bhi.w	800dca8 <HAL_TIM_ConfigClockSource+0x1bc>
 800db8c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800db90:	d03e      	beq.n	800dc10 <HAL_TIM_ConfigClockSource+0x124>
 800db92:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800db96:	f200 8087 	bhi.w	800dca8 <HAL_TIM_ConfigClockSource+0x1bc>
 800db9a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800db9e:	f000 8086 	beq.w	800dcae <HAL_TIM_ConfigClockSource+0x1c2>
 800dba2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800dba6:	d87f      	bhi.n	800dca8 <HAL_TIM_ConfigClockSource+0x1bc>
 800dba8:	2b70      	cmp	r3, #112	; 0x70
 800dbaa:	d01a      	beq.n	800dbe2 <HAL_TIM_ConfigClockSource+0xf6>
 800dbac:	2b70      	cmp	r3, #112	; 0x70
 800dbae:	d87b      	bhi.n	800dca8 <HAL_TIM_ConfigClockSource+0x1bc>
 800dbb0:	2b60      	cmp	r3, #96	; 0x60
 800dbb2:	d050      	beq.n	800dc56 <HAL_TIM_ConfigClockSource+0x16a>
 800dbb4:	2b60      	cmp	r3, #96	; 0x60
 800dbb6:	d877      	bhi.n	800dca8 <HAL_TIM_ConfigClockSource+0x1bc>
 800dbb8:	2b50      	cmp	r3, #80	; 0x50
 800dbba:	d03c      	beq.n	800dc36 <HAL_TIM_ConfigClockSource+0x14a>
 800dbbc:	2b50      	cmp	r3, #80	; 0x50
 800dbbe:	d873      	bhi.n	800dca8 <HAL_TIM_ConfigClockSource+0x1bc>
 800dbc0:	2b40      	cmp	r3, #64	; 0x40
 800dbc2:	d058      	beq.n	800dc76 <HAL_TIM_ConfigClockSource+0x18a>
 800dbc4:	2b40      	cmp	r3, #64	; 0x40
 800dbc6:	d86f      	bhi.n	800dca8 <HAL_TIM_ConfigClockSource+0x1bc>
 800dbc8:	2b30      	cmp	r3, #48	; 0x30
 800dbca:	d064      	beq.n	800dc96 <HAL_TIM_ConfigClockSource+0x1aa>
 800dbcc:	2b30      	cmp	r3, #48	; 0x30
 800dbce:	d86b      	bhi.n	800dca8 <HAL_TIM_ConfigClockSource+0x1bc>
 800dbd0:	2b20      	cmp	r3, #32
 800dbd2:	d060      	beq.n	800dc96 <HAL_TIM_ConfigClockSource+0x1aa>
 800dbd4:	2b20      	cmp	r3, #32
 800dbd6:	d867      	bhi.n	800dca8 <HAL_TIM_ConfigClockSource+0x1bc>
 800dbd8:	2b00      	cmp	r3, #0
 800dbda:	d05c      	beq.n	800dc96 <HAL_TIM_ConfigClockSource+0x1aa>
 800dbdc:	2b10      	cmp	r3, #16
 800dbde:	d05a      	beq.n	800dc96 <HAL_TIM_ConfigClockSource+0x1aa>
 800dbe0:	e062      	b.n	800dca8 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800dbe2:	687b      	ldr	r3, [r7, #4]
 800dbe4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800dbe6:	683b      	ldr	r3, [r7, #0]
 800dbe8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800dbea:	683b      	ldr	r3, [r7, #0]
 800dbec:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800dbee:	683b      	ldr	r3, [r7, #0]
 800dbf0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800dbf2:	f000 f98b 	bl	800df0c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800dbf6:	687b      	ldr	r3, [r7, #4]
 800dbf8:	681b      	ldr	r3, [r3, #0]
 800dbfa:	689b      	ldr	r3, [r3, #8]
 800dbfc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800dbfe:	68bb      	ldr	r3, [r7, #8]
 800dc00:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800dc04:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800dc06:	687b      	ldr	r3, [r7, #4]
 800dc08:	681b      	ldr	r3, [r3, #0]
 800dc0a:	68ba      	ldr	r2, [r7, #8]
 800dc0c:	609a      	str	r2, [r3, #8]
      break;
 800dc0e:	e04f      	b.n	800dcb0 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800dc10:	687b      	ldr	r3, [r7, #4]
 800dc12:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800dc14:	683b      	ldr	r3, [r7, #0]
 800dc16:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800dc18:	683b      	ldr	r3, [r7, #0]
 800dc1a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800dc1c:	683b      	ldr	r3, [r7, #0]
 800dc1e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800dc20:	f000 f974 	bl	800df0c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800dc24:	687b      	ldr	r3, [r7, #4]
 800dc26:	681b      	ldr	r3, [r3, #0]
 800dc28:	689a      	ldr	r2, [r3, #8]
 800dc2a:	687b      	ldr	r3, [r7, #4]
 800dc2c:	681b      	ldr	r3, [r3, #0]
 800dc2e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800dc32:	609a      	str	r2, [r3, #8]
      break;
 800dc34:	e03c      	b.n	800dcb0 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800dc36:	687b      	ldr	r3, [r7, #4]
 800dc38:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800dc3a:	683b      	ldr	r3, [r7, #0]
 800dc3c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800dc3e:	683b      	ldr	r3, [r7, #0]
 800dc40:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800dc42:	461a      	mov	r2, r3
 800dc44:	f000 f8e4 	bl	800de10 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800dc48:	687b      	ldr	r3, [r7, #4]
 800dc4a:	681b      	ldr	r3, [r3, #0]
 800dc4c:	2150      	movs	r1, #80	; 0x50
 800dc4e:	4618      	mov	r0, r3
 800dc50:	f000 f93e 	bl	800ded0 <TIM_ITRx_SetConfig>
      break;
 800dc54:	e02c      	b.n	800dcb0 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800dc56:	687b      	ldr	r3, [r7, #4]
 800dc58:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800dc5a:	683b      	ldr	r3, [r7, #0]
 800dc5c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800dc5e:	683b      	ldr	r3, [r7, #0]
 800dc60:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800dc62:	461a      	mov	r2, r3
 800dc64:	f000 f903 	bl	800de6e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800dc68:	687b      	ldr	r3, [r7, #4]
 800dc6a:	681b      	ldr	r3, [r3, #0]
 800dc6c:	2160      	movs	r1, #96	; 0x60
 800dc6e:	4618      	mov	r0, r3
 800dc70:	f000 f92e 	bl	800ded0 <TIM_ITRx_SetConfig>
      break;
 800dc74:	e01c      	b.n	800dcb0 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800dc76:	687b      	ldr	r3, [r7, #4]
 800dc78:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800dc7a:	683b      	ldr	r3, [r7, #0]
 800dc7c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800dc7e:	683b      	ldr	r3, [r7, #0]
 800dc80:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800dc82:	461a      	mov	r2, r3
 800dc84:	f000 f8c4 	bl	800de10 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800dc88:	687b      	ldr	r3, [r7, #4]
 800dc8a:	681b      	ldr	r3, [r3, #0]
 800dc8c:	2140      	movs	r1, #64	; 0x40
 800dc8e:	4618      	mov	r0, r3
 800dc90:	f000 f91e 	bl	800ded0 <TIM_ITRx_SetConfig>
      break;
 800dc94:	e00c      	b.n	800dcb0 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800dc96:	687b      	ldr	r3, [r7, #4]
 800dc98:	681a      	ldr	r2, [r3, #0]
 800dc9a:	683b      	ldr	r3, [r7, #0]
 800dc9c:	681b      	ldr	r3, [r3, #0]
 800dc9e:	4619      	mov	r1, r3
 800dca0:	4610      	mov	r0, r2
 800dca2:	f000 f915 	bl	800ded0 <TIM_ITRx_SetConfig>
      break;
 800dca6:	e003      	b.n	800dcb0 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 800dca8:	2301      	movs	r3, #1
 800dcaa:	73fb      	strb	r3, [r7, #15]
      break;
 800dcac:	e000      	b.n	800dcb0 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 800dcae:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800dcb0:	687b      	ldr	r3, [r7, #4]
 800dcb2:	2201      	movs	r2, #1
 800dcb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800dcb8:	687b      	ldr	r3, [r7, #4]
 800dcba:	2200      	movs	r2, #0
 800dcbc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800dcc0:	7bfb      	ldrb	r3, [r7, #15]
}
 800dcc2:	4618      	mov	r0, r3
 800dcc4:	3710      	adds	r7, #16
 800dcc6:	46bd      	mov	sp, r7
 800dcc8:	bd80      	pop	{r7, pc}
 800dcca:	bf00      	nop
 800dccc:	ffceff88 	.word	0xffceff88
 800dcd0:	00100040 	.word	0x00100040
 800dcd4:	00100030 	.word	0x00100030
 800dcd8:	00100020 	.word	0x00100020

0800dcdc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800dcdc:	b480      	push	{r7}
 800dcde:	b085      	sub	sp, #20
 800dce0:	af00      	add	r7, sp, #0
 800dce2:	6078      	str	r0, [r7, #4]
 800dce4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800dce6:	687b      	ldr	r3, [r7, #4]
 800dce8:	681b      	ldr	r3, [r3, #0]
 800dcea:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800dcec:	687b      	ldr	r3, [r7, #4]
 800dcee:	4a40      	ldr	r2, [pc, #256]	; (800ddf0 <TIM_Base_SetConfig+0x114>)
 800dcf0:	4293      	cmp	r3, r2
 800dcf2:	d013      	beq.n	800dd1c <TIM_Base_SetConfig+0x40>
 800dcf4:	687b      	ldr	r3, [r7, #4]
 800dcf6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800dcfa:	d00f      	beq.n	800dd1c <TIM_Base_SetConfig+0x40>
 800dcfc:	687b      	ldr	r3, [r7, #4]
 800dcfe:	4a3d      	ldr	r2, [pc, #244]	; (800ddf4 <TIM_Base_SetConfig+0x118>)
 800dd00:	4293      	cmp	r3, r2
 800dd02:	d00b      	beq.n	800dd1c <TIM_Base_SetConfig+0x40>
 800dd04:	687b      	ldr	r3, [r7, #4]
 800dd06:	4a3c      	ldr	r2, [pc, #240]	; (800ddf8 <TIM_Base_SetConfig+0x11c>)
 800dd08:	4293      	cmp	r3, r2
 800dd0a:	d007      	beq.n	800dd1c <TIM_Base_SetConfig+0x40>
 800dd0c:	687b      	ldr	r3, [r7, #4]
 800dd0e:	4a3b      	ldr	r2, [pc, #236]	; (800ddfc <TIM_Base_SetConfig+0x120>)
 800dd10:	4293      	cmp	r3, r2
 800dd12:	d003      	beq.n	800dd1c <TIM_Base_SetConfig+0x40>
 800dd14:	687b      	ldr	r3, [r7, #4]
 800dd16:	4a3a      	ldr	r2, [pc, #232]	; (800de00 <TIM_Base_SetConfig+0x124>)
 800dd18:	4293      	cmp	r3, r2
 800dd1a:	d108      	bne.n	800dd2e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800dd1c:	68fb      	ldr	r3, [r7, #12]
 800dd1e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800dd22:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800dd24:	683b      	ldr	r3, [r7, #0]
 800dd26:	685b      	ldr	r3, [r3, #4]
 800dd28:	68fa      	ldr	r2, [r7, #12]
 800dd2a:	4313      	orrs	r3, r2
 800dd2c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800dd2e:	687b      	ldr	r3, [r7, #4]
 800dd30:	4a2f      	ldr	r2, [pc, #188]	; (800ddf0 <TIM_Base_SetConfig+0x114>)
 800dd32:	4293      	cmp	r3, r2
 800dd34:	d01f      	beq.n	800dd76 <TIM_Base_SetConfig+0x9a>
 800dd36:	687b      	ldr	r3, [r7, #4]
 800dd38:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800dd3c:	d01b      	beq.n	800dd76 <TIM_Base_SetConfig+0x9a>
 800dd3e:	687b      	ldr	r3, [r7, #4]
 800dd40:	4a2c      	ldr	r2, [pc, #176]	; (800ddf4 <TIM_Base_SetConfig+0x118>)
 800dd42:	4293      	cmp	r3, r2
 800dd44:	d017      	beq.n	800dd76 <TIM_Base_SetConfig+0x9a>
 800dd46:	687b      	ldr	r3, [r7, #4]
 800dd48:	4a2b      	ldr	r2, [pc, #172]	; (800ddf8 <TIM_Base_SetConfig+0x11c>)
 800dd4a:	4293      	cmp	r3, r2
 800dd4c:	d013      	beq.n	800dd76 <TIM_Base_SetConfig+0x9a>
 800dd4e:	687b      	ldr	r3, [r7, #4]
 800dd50:	4a2a      	ldr	r2, [pc, #168]	; (800ddfc <TIM_Base_SetConfig+0x120>)
 800dd52:	4293      	cmp	r3, r2
 800dd54:	d00f      	beq.n	800dd76 <TIM_Base_SetConfig+0x9a>
 800dd56:	687b      	ldr	r3, [r7, #4]
 800dd58:	4a29      	ldr	r2, [pc, #164]	; (800de00 <TIM_Base_SetConfig+0x124>)
 800dd5a:	4293      	cmp	r3, r2
 800dd5c:	d00b      	beq.n	800dd76 <TIM_Base_SetConfig+0x9a>
 800dd5e:	687b      	ldr	r3, [r7, #4]
 800dd60:	4a28      	ldr	r2, [pc, #160]	; (800de04 <TIM_Base_SetConfig+0x128>)
 800dd62:	4293      	cmp	r3, r2
 800dd64:	d007      	beq.n	800dd76 <TIM_Base_SetConfig+0x9a>
 800dd66:	687b      	ldr	r3, [r7, #4]
 800dd68:	4a27      	ldr	r2, [pc, #156]	; (800de08 <TIM_Base_SetConfig+0x12c>)
 800dd6a:	4293      	cmp	r3, r2
 800dd6c:	d003      	beq.n	800dd76 <TIM_Base_SetConfig+0x9a>
 800dd6e:	687b      	ldr	r3, [r7, #4]
 800dd70:	4a26      	ldr	r2, [pc, #152]	; (800de0c <TIM_Base_SetConfig+0x130>)
 800dd72:	4293      	cmp	r3, r2
 800dd74:	d108      	bne.n	800dd88 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800dd76:	68fb      	ldr	r3, [r7, #12]
 800dd78:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800dd7c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800dd7e:	683b      	ldr	r3, [r7, #0]
 800dd80:	68db      	ldr	r3, [r3, #12]
 800dd82:	68fa      	ldr	r2, [r7, #12]
 800dd84:	4313      	orrs	r3, r2
 800dd86:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800dd88:	68fb      	ldr	r3, [r7, #12]
 800dd8a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800dd8e:	683b      	ldr	r3, [r7, #0]
 800dd90:	695b      	ldr	r3, [r3, #20]
 800dd92:	4313      	orrs	r3, r2
 800dd94:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800dd96:	687b      	ldr	r3, [r7, #4]
 800dd98:	68fa      	ldr	r2, [r7, #12]
 800dd9a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800dd9c:	683b      	ldr	r3, [r7, #0]
 800dd9e:	689a      	ldr	r2, [r3, #8]
 800dda0:	687b      	ldr	r3, [r7, #4]
 800dda2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800dda4:	683b      	ldr	r3, [r7, #0]
 800dda6:	681a      	ldr	r2, [r3, #0]
 800dda8:	687b      	ldr	r3, [r7, #4]
 800ddaa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800ddac:	687b      	ldr	r3, [r7, #4]
 800ddae:	4a10      	ldr	r2, [pc, #64]	; (800ddf0 <TIM_Base_SetConfig+0x114>)
 800ddb0:	4293      	cmp	r3, r2
 800ddb2:	d00f      	beq.n	800ddd4 <TIM_Base_SetConfig+0xf8>
 800ddb4:	687b      	ldr	r3, [r7, #4]
 800ddb6:	4a12      	ldr	r2, [pc, #72]	; (800de00 <TIM_Base_SetConfig+0x124>)
 800ddb8:	4293      	cmp	r3, r2
 800ddba:	d00b      	beq.n	800ddd4 <TIM_Base_SetConfig+0xf8>
 800ddbc:	687b      	ldr	r3, [r7, #4]
 800ddbe:	4a11      	ldr	r2, [pc, #68]	; (800de04 <TIM_Base_SetConfig+0x128>)
 800ddc0:	4293      	cmp	r3, r2
 800ddc2:	d007      	beq.n	800ddd4 <TIM_Base_SetConfig+0xf8>
 800ddc4:	687b      	ldr	r3, [r7, #4]
 800ddc6:	4a10      	ldr	r2, [pc, #64]	; (800de08 <TIM_Base_SetConfig+0x12c>)
 800ddc8:	4293      	cmp	r3, r2
 800ddca:	d003      	beq.n	800ddd4 <TIM_Base_SetConfig+0xf8>
 800ddcc:	687b      	ldr	r3, [r7, #4]
 800ddce:	4a0f      	ldr	r2, [pc, #60]	; (800de0c <TIM_Base_SetConfig+0x130>)
 800ddd0:	4293      	cmp	r3, r2
 800ddd2:	d103      	bne.n	800dddc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800ddd4:	683b      	ldr	r3, [r7, #0]
 800ddd6:	691a      	ldr	r2, [r3, #16]
 800ddd8:	687b      	ldr	r3, [r7, #4]
 800ddda:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800dddc:	687b      	ldr	r3, [r7, #4]
 800ddde:	2201      	movs	r2, #1
 800dde0:	615a      	str	r2, [r3, #20]
}
 800dde2:	bf00      	nop
 800dde4:	3714      	adds	r7, #20
 800dde6:	46bd      	mov	sp, r7
 800dde8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddec:	4770      	bx	lr
 800ddee:	bf00      	nop
 800ddf0:	40010000 	.word	0x40010000
 800ddf4:	40000400 	.word	0x40000400
 800ddf8:	40000800 	.word	0x40000800
 800ddfc:	40000c00 	.word	0x40000c00
 800de00:	40010400 	.word	0x40010400
 800de04:	40014000 	.word	0x40014000
 800de08:	40014400 	.word	0x40014400
 800de0c:	40014800 	.word	0x40014800

0800de10 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800de10:	b480      	push	{r7}
 800de12:	b087      	sub	sp, #28
 800de14:	af00      	add	r7, sp, #0
 800de16:	60f8      	str	r0, [r7, #12]
 800de18:	60b9      	str	r1, [r7, #8]
 800de1a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800de1c:	68fb      	ldr	r3, [r7, #12]
 800de1e:	6a1b      	ldr	r3, [r3, #32]
 800de20:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800de22:	68fb      	ldr	r3, [r7, #12]
 800de24:	6a1b      	ldr	r3, [r3, #32]
 800de26:	f023 0201 	bic.w	r2, r3, #1
 800de2a:	68fb      	ldr	r3, [r7, #12]
 800de2c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800de2e:	68fb      	ldr	r3, [r7, #12]
 800de30:	699b      	ldr	r3, [r3, #24]
 800de32:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800de34:	693b      	ldr	r3, [r7, #16]
 800de36:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800de3a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800de3c:	687b      	ldr	r3, [r7, #4]
 800de3e:	011b      	lsls	r3, r3, #4
 800de40:	693a      	ldr	r2, [r7, #16]
 800de42:	4313      	orrs	r3, r2
 800de44:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800de46:	697b      	ldr	r3, [r7, #20]
 800de48:	f023 030a 	bic.w	r3, r3, #10
 800de4c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800de4e:	697a      	ldr	r2, [r7, #20]
 800de50:	68bb      	ldr	r3, [r7, #8]
 800de52:	4313      	orrs	r3, r2
 800de54:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800de56:	68fb      	ldr	r3, [r7, #12]
 800de58:	693a      	ldr	r2, [r7, #16]
 800de5a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800de5c:	68fb      	ldr	r3, [r7, #12]
 800de5e:	697a      	ldr	r2, [r7, #20]
 800de60:	621a      	str	r2, [r3, #32]
}
 800de62:	bf00      	nop
 800de64:	371c      	adds	r7, #28
 800de66:	46bd      	mov	sp, r7
 800de68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de6c:	4770      	bx	lr

0800de6e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800de6e:	b480      	push	{r7}
 800de70:	b087      	sub	sp, #28
 800de72:	af00      	add	r7, sp, #0
 800de74:	60f8      	str	r0, [r7, #12]
 800de76:	60b9      	str	r1, [r7, #8]
 800de78:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800de7a:	68fb      	ldr	r3, [r7, #12]
 800de7c:	6a1b      	ldr	r3, [r3, #32]
 800de7e:	f023 0210 	bic.w	r2, r3, #16
 800de82:	68fb      	ldr	r3, [r7, #12]
 800de84:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800de86:	68fb      	ldr	r3, [r7, #12]
 800de88:	699b      	ldr	r3, [r3, #24]
 800de8a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800de8c:	68fb      	ldr	r3, [r7, #12]
 800de8e:	6a1b      	ldr	r3, [r3, #32]
 800de90:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800de92:	697b      	ldr	r3, [r7, #20]
 800de94:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800de98:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800de9a:	687b      	ldr	r3, [r7, #4]
 800de9c:	031b      	lsls	r3, r3, #12
 800de9e:	697a      	ldr	r2, [r7, #20]
 800dea0:	4313      	orrs	r3, r2
 800dea2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800dea4:	693b      	ldr	r3, [r7, #16]
 800dea6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800deaa:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800deac:	68bb      	ldr	r3, [r7, #8]
 800deae:	011b      	lsls	r3, r3, #4
 800deb0:	693a      	ldr	r2, [r7, #16]
 800deb2:	4313      	orrs	r3, r2
 800deb4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800deb6:	68fb      	ldr	r3, [r7, #12]
 800deb8:	697a      	ldr	r2, [r7, #20]
 800deba:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800debc:	68fb      	ldr	r3, [r7, #12]
 800debe:	693a      	ldr	r2, [r7, #16]
 800dec0:	621a      	str	r2, [r3, #32]
}
 800dec2:	bf00      	nop
 800dec4:	371c      	adds	r7, #28
 800dec6:	46bd      	mov	sp, r7
 800dec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800decc:	4770      	bx	lr
	...

0800ded0 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800ded0:	b480      	push	{r7}
 800ded2:	b085      	sub	sp, #20
 800ded4:	af00      	add	r7, sp, #0
 800ded6:	6078      	str	r0, [r7, #4]
 800ded8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800deda:	687b      	ldr	r3, [r7, #4]
 800dedc:	689b      	ldr	r3, [r3, #8]
 800dede:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800dee0:	68fa      	ldr	r2, [r7, #12]
 800dee2:	4b09      	ldr	r3, [pc, #36]	; (800df08 <TIM_ITRx_SetConfig+0x38>)
 800dee4:	4013      	ands	r3, r2
 800dee6:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800dee8:	683a      	ldr	r2, [r7, #0]
 800deea:	68fb      	ldr	r3, [r7, #12]
 800deec:	4313      	orrs	r3, r2
 800deee:	f043 0307 	orr.w	r3, r3, #7
 800def2:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800def4:	687b      	ldr	r3, [r7, #4]
 800def6:	68fa      	ldr	r2, [r7, #12]
 800def8:	609a      	str	r2, [r3, #8]
}
 800defa:	bf00      	nop
 800defc:	3714      	adds	r7, #20
 800defe:	46bd      	mov	sp, r7
 800df00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df04:	4770      	bx	lr
 800df06:	bf00      	nop
 800df08:	ffcfff8f 	.word	0xffcfff8f

0800df0c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800df0c:	b480      	push	{r7}
 800df0e:	b087      	sub	sp, #28
 800df10:	af00      	add	r7, sp, #0
 800df12:	60f8      	str	r0, [r7, #12]
 800df14:	60b9      	str	r1, [r7, #8]
 800df16:	607a      	str	r2, [r7, #4]
 800df18:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800df1a:	68fb      	ldr	r3, [r7, #12]
 800df1c:	689b      	ldr	r3, [r3, #8]
 800df1e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800df20:	697b      	ldr	r3, [r7, #20]
 800df22:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800df26:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800df28:	683b      	ldr	r3, [r7, #0]
 800df2a:	021a      	lsls	r2, r3, #8
 800df2c:	687b      	ldr	r3, [r7, #4]
 800df2e:	431a      	orrs	r2, r3
 800df30:	68bb      	ldr	r3, [r7, #8]
 800df32:	4313      	orrs	r3, r2
 800df34:	697a      	ldr	r2, [r7, #20]
 800df36:	4313      	orrs	r3, r2
 800df38:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800df3a:	68fb      	ldr	r3, [r7, #12]
 800df3c:	697a      	ldr	r2, [r7, #20]
 800df3e:	609a      	str	r2, [r3, #8]
}
 800df40:	bf00      	nop
 800df42:	371c      	adds	r7, #28
 800df44:	46bd      	mov	sp, r7
 800df46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df4a:	4770      	bx	lr

0800df4c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800df4c:	b480      	push	{r7}
 800df4e:	b085      	sub	sp, #20
 800df50:	af00      	add	r7, sp, #0
 800df52:	6078      	str	r0, [r7, #4]
 800df54:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800df56:	687b      	ldr	r3, [r7, #4]
 800df58:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800df5c:	2b01      	cmp	r3, #1
 800df5e:	d101      	bne.n	800df64 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800df60:	2302      	movs	r3, #2
 800df62:	e06d      	b.n	800e040 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800df64:	687b      	ldr	r3, [r7, #4]
 800df66:	2201      	movs	r2, #1
 800df68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800df6c:	687b      	ldr	r3, [r7, #4]
 800df6e:	2202      	movs	r2, #2
 800df70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800df74:	687b      	ldr	r3, [r7, #4]
 800df76:	681b      	ldr	r3, [r3, #0]
 800df78:	685b      	ldr	r3, [r3, #4]
 800df7a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800df7c:	687b      	ldr	r3, [r7, #4]
 800df7e:	681b      	ldr	r3, [r3, #0]
 800df80:	689b      	ldr	r3, [r3, #8]
 800df82:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800df84:	687b      	ldr	r3, [r7, #4]
 800df86:	681b      	ldr	r3, [r3, #0]
 800df88:	4a30      	ldr	r2, [pc, #192]	; (800e04c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800df8a:	4293      	cmp	r3, r2
 800df8c:	d004      	beq.n	800df98 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800df8e:	687b      	ldr	r3, [r7, #4]
 800df90:	681b      	ldr	r3, [r3, #0]
 800df92:	4a2f      	ldr	r2, [pc, #188]	; (800e050 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800df94:	4293      	cmp	r3, r2
 800df96:	d108      	bne.n	800dfaa <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800df98:	68fb      	ldr	r3, [r7, #12]
 800df9a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800df9e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800dfa0:	683b      	ldr	r3, [r7, #0]
 800dfa2:	685b      	ldr	r3, [r3, #4]
 800dfa4:	68fa      	ldr	r2, [r7, #12]
 800dfa6:	4313      	orrs	r3, r2
 800dfa8:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800dfaa:	68fb      	ldr	r3, [r7, #12]
 800dfac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800dfb0:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800dfb2:	683b      	ldr	r3, [r7, #0]
 800dfb4:	681b      	ldr	r3, [r3, #0]
 800dfb6:	68fa      	ldr	r2, [r7, #12]
 800dfb8:	4313      	orrs	r3, r2
 800dfba:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800dfbc:	687b      	ldr	r3, [r7, #4]
 800dfbe:	681b      	ldr	r3, [r3, #0]
 800dfc0:	68fa      	ldr	r2, [r7, #12]
 800dfc2:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800dfc4:	687b      	ldr	r3, [r7, #4]
 800dfc6:	681b      	ldr	r3, [r3, #0]
 800dfc8:	4a20      	ldr	r2, [pc, #128]	; (800e04c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800dfca:	4293      	cmp	r3, r2
 800dfcc:	d022      	beq.n	800e014 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800dfce:	687b      	ldr	r3, [r7, #4]
 800dfd0:	681b      	ldr	r3, [r3, #0]
 800dfd2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800dfd6:	d01d      	beq.n	800e014 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800dfd8:	687b      	ldr	r3, [r7, #4]
 800dfda:	681b      	ldr	r3, [r3, #0]
 800dfdc:	4a1d      	ldr	r2, [pc, #116]	; (800e054 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800dfde:	4293      	cmp	r3, r2
 800dfe0:	d018      	beq.n	800e014 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800dfe2:	687b      	ldr	r3, [r7, #4]
 800dfe4:	681b      	ldr	r3, [r3, #0]
 800dfe6:	4a1c      	ldr	r2, [pc, #112]	; (800e058 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800dfe8:	4293      	cmp	r3, r2
 800dfea:	d013      	beq.n	800e014 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800dfec:	687b      	ldr	r3, [r7, #4]
 800dfee:	681b      	ldr	r3, [r3, #0]
 800dff0:	4a1a      	ldr	r2, [pc, #104]	; (800e05c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800dff2:	4293      	cmp	r3, r2
 800dff4:	d00e      	beq.n	800e014 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800dff6:	687b      	ldr	r3, [r7, #4]
 800dff8:	681b      	ldr	r3, [r3, #0]
 800dffa:	4a15      	ldr	r2, [pc, #84]	; (800e050 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800dffc:	4293      	cmp	r3, r2
 800dffe:	d009      	beq.n	800e014 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800e000:	687b      	ldr	r3, [r7, #4]
 800e002:	681b      	ldr	r3, [r3, #0]
 800e004:	4a16      	ldr	r2, [pc, #88]	; (800e060 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800e006:	4293      	cmp	r3, r2
 800e008:	d004      	beq.n	800e014 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800e00a:	687b      	ldr	r3, [r7, #4]
 800e00c:	681b      	ldr	r3, [r3, #0]
 800e00e:	4a15      	ldr	r2, [pc, #84]	; (800e064 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800e010:	4293      	cmp	r3, r2
 800e012:	d10c      	bne.n	800e02e <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800e014:	68bb      	ldr	r3, [r7, #8]
 800e016:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800e01a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800e01c:	683b      	ldr	r3, [r7, #0]
 800e01e:	689b      	ldr	r3, [r3, #8]
 800e020:	68ba      	ldr	r2, [r7, #8]
 800e022:	4313      	orrs	r3, r2
 800e024:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800e026:	687b      	ldr	r3, [r7, #4]
 800e028:	681b      	ldr	r3, [r3, #0]
 800e02a:	68ba      	ldr	r2, [r7, #8]
 800e02c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800e02e:	687b      	ldr	r3, [r7, #4]
 800e030:	2201      	movs	r2, #1
 800e032:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800e036:	687b      	ldr	r3, [r7, #4]
 800e038:	2200      	movs	r2, #0
 800e03a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800e03e:	2300      	movs	r3, #0
}
 800e040:	4618      	mov	r0, r3
 800e042:	3714      	adds	r7, #20
 800e044:	46bd      	mov	sp, r7
 800e046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e04a:	4770      	bx	lr
 800e04c:	40010000 	.word	0x40010000
 800e050:	40010400 	.word	0x40010400
 800e054:	40000400 	.word	0x40000400
 800e058:	40000800 	.word	0x40000800
 800e05c:	40000c00 	.word	0x40000c00
 800e060:	40001800 	.word	0x40001800
 800e064:	40014000 	.word	0x40014000

0800e068 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800e068:	b580      	push	{r7, lr}
 800e06a:	b082      	sub	sp, #8
 800e06c:	af00      	add	r7, sp, #0
 800e06e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800e070:	687b      	ldr	r3, [r7, #4]
 800e072:	2b00      	cmp	r3, #0
 800e074:	d101      	bne.n	800e07a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800e076:	2301      	movs	r3, #1
 800e078:	e042      	b.n	800e100 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800e07a:	687b      	ldr	r3, [r7, #4]
 800e07c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e080:	2b00      	cmp	r3, #0
 800e082:	d106      	bne.n	800e092 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800e084:	687b      	ldr	r3, [r7, #4]
 800e086:	2200      	movs	r2, #0
 800e088:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800e08c:	6878      	ldr	r0, [r7, #4]
 800e08e:	f7f5 fc33 	bl	80038f8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800e092:	687b      	ldr	r3, [r7, #4]
 800e094:	2224      	movs	r2, #36	; 0x24
 800e096:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 800e09a:	687b      	ldr	r3, [r7, #4]
 800e09c:	681b      	ldr	r3, [r3, #0]
 800e09e:	681a      	ldr	r2, [r3, #0]
 800e0a0:	687b      	ldr	r3, [r7, #4]
 800e0a2:	681b      	ldr	r3, [r3, #0]
 800e0a4:	f022 0201 	bic.w	r2, r2, #1
 800e0a8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800e0aa:	6878      	ldr	r0, [r7, #4]
 800e0ac:	f000 f8ba 	bl	800e224 <UART_SetConfig>
 800e0b0:	4603      	mov	r3, r0
 800e0b2:	2b01      	cmp	r3, #1
 800e0b4:	d101      	bne.n	800e0ba <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800e0b6:	2301      	movs	r3, #1
 800e0b8:	e022      	b.n	800e100 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800e0ba:	687b      	ldr	r3, [r7, #4]
 800e0bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e0be:	2b00      	cmp	r3, #0
 800e0c0:	d002      	beq.n	800e0c8 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800e0c2:	6878      	ldr	r0, [r7, #4]
 800e0c4:	f000 fe16 	bl	800ecf4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800e0c8:	687b      	ldr	r3, [r7, #4]
 800e0ca:	681b      	ldr	r3, [r3, #0]
 800e0cc:	685a      	ldr	r2, [r3, #4]
 800e0ce:	687b      	ldr	r3, [r7, #4]
 800e0d0:	681b      	ldr	r3, [r3, #0]
 800e0d2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800e0d6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800e0d8:	687b      	ldr	r3, [r7, #4]
 800e0da:	681b      	ldr	r3, [r3, #0]
 800e0dc:	689a      	ldr	r2, [r3, #8]
 800e0de:	687b      	ldr	r3, [r7, #4]
 800e0e0:	681b      	ldr	r3, [r3, #0]
 800e0e2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800e0e6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800e0e8:	687b      	ldr	r3, [r7, #4]
 800e0ea:	681b      	ldr	r3, [r3, #0]
 800e0ec:	681a      	ldr	r2, [r3, #0]
 800e0ee:	687b      	ldr	r3, [r7, #4]
 800e0f0:	681b      	ldr	r3, [r3, #0]
 800e0f2:	f042 0201 	orr.w	r2, r2, #1
 800e0f6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800e0f8:	6878      	ldr	r0, [r7, #4]
 800e0fa:	f000 fe9d 	bl	800ee38 <UART_CheckIdleState>
 800e0fe:	4603      	mov	r3, r0
}
 800e100:	4618      	mov	r0, r3
 800e102:	3708      	adds	r7, #8
 800e104:	46bd      	mov	sp, r7
 800e106:	bd80      	pop	{r7, pc}

0800e108 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800e108:	b580      	push	{r7, lr}
 800e10a:	b08a      	sub	sp, #40	; 0x28
 800e10c:	af02      	add	r7, sp, #8
 800e10e:	60f8      	str	r0, [r7, #12]
 800e110:	60b9      	str	r1, [r7, #8]
 800e112:	603b      	str	r3, [r7, #0]
 800e114:	4613      	mov	r3, r2
 800e116:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800e118:	68fb      	ldr	r3, [r7, #12]
 800e11a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e11e:	2b20      	cmp	r3, #32
 800e120:	d17b      	bne.n	800e21a <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800e122:	68bb      	ldr	r3, [r7, #8]
 800e124:	2b00      	cmp	r3, #0
 800e126:	d002      	beq.n	800e12e <HAL_UART_Transmit+0x26>
 800e128:	88fb      	ldrh	r3, [r7, #6]
 800e12a:	2b00      	cmp	r3, #0
 800e12c:	d101      	bne.n	800e132 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800e12e:	2301      	movs	r3, #1
 800e130:	e074      	b.n	800e21c <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800e132:	68fb      	ldr	r3, [r7, #12]
 800e134:	2200      	movs	r2, #0
 800e136:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800e13a:	68fb      	ldr	r3, [r7, #12]
 800e13c:	2221      	movs	r2, #33	; 0x21
 800e13e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800e142:	f7f6 f8b9 	bl	80042b8 <HAL_GetTick>
 800e146:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800e148:	68fb      	ldr	r3, [r7, #12]
 800e14a:	88fa      	ldrh	r2, [r7, #6]
 800e14c:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800e150:	68fb      	ldr	r3, [r7, #12]
 800e152:	88fa      	ldrh	r2, [r7, #6]
 800e154:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800e158:	68fb      	ldr	r3, [r7, #12]
 800e15a:	689b      	ldr	r3, [r3, #8]
 800e15c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800e160:	d108      	bne.n	800e174 <HAL_UART_Transmit+0x6c>
 800e162:	68fb      	ldr	r3, [r7, #12]
 800e164:	691b      	ldr	r3, [r3, #16]
 800e166:	2b00      	cmp	r3, #0
 800e168:	d104      	bne.n	800e174 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800e16a:	2300      	movs	r3, #0
 800e16c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800e16e:	68bb      	ldr	r3, [r7, #8]
 800e170:	61bb      	str	r3, [r7, #24]
 800e172:	e003      	b.n	800e17c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800e174:	68bb      	ldr	r3, [r7, #8]
 800e176:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800e178:	2300      	movs	r3, #0
 800e17a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800e17c:	e030      	b.n	800e1e0 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800e17e:	683b      	ldr	r3, [r7, #0]
 800e180:	9300      	str	r3, [sp, #0]
 800e182:	697b      	ldr	r3, [r7, #20]
 800e184:	2200      	movs	r2, #0
 800e186:	2180      	movs	r1, #128	; 0x80
 800e188:	68f8      	ldr	r0, [r7, #12]
 800e18a:	f000 feff 	bl	800ef8c <UART_WaitOnFlagUntilTimeout>
 800e18e:	4603      	mov	r3, r0
 800e190:	2b00      	cmp	r3, #0
 800e192:	d005      	beq.n	800e1a0 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 800e194:	68fb      	ldr	r3, [r7, #12]
 800e196:	2220      	movs	r2, #32
 800e198:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 800e19c:	2303      	movs	r3, #3
 800e19e:	e03d      	b.n	800e21c <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 800e1a0:	69fb      	ldr	r3, [r7, #28]
 800e1a2:	2b00      	cmp	r3, #0
 800e1a4:	d10b      	bne.n	800e1be <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800e1a6:	69bb      	ldr	r3, [r7, #24]
 800e1a8:	881b      	ldrh	r3, [r3, #0]
 800e1aa:	461a      	mov	r2, r3
 800e1ac:	68fb      	ldr	r3, [r7, #12]
 800e1ae:	681b      	ldr	r3, [r3, #0]
 800e1b0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800e1b4:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800e1b6:	69bb      	ldr	r3, [r7, #24]
 800e1b8:	3302      	adds	r3, #2
 800e1ba:	61bb      	str	r3, [r7, #24]
 800e1bc:	e007      	b.n	800e1ce <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800e1be:	69fb      	ldr	r3, [r7, #28]
 800e1c0:	781a      	ldrb	r2, [r3, #0]
 800e1c2:	68fb      	ldr	r3, [r7, #12]
 800e1c4:	681b      	ldr	r3, [r3, #0]
 800e1c6:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800e1c8:	69fb      	ldr	r3, [r7, #28]
 800e1ca:	3301      	adds	r3, #1
 800e1cc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800e1ce:	68fb      	ldr	r3, [r7, #12]
 800e1d0:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800e1d4:	b29b      	uxth	r3, r3
 800e1d6:	3b01      	subs	r3, #1
 800e1d8:	b29a      	uxth	r2, r3
 800e1da:	68fb      	ldr	r3, [r7, #12]
 800e1dc:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800e1e0:	68fb      	ldr	r3, [r7, #12]
 800e1e2:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800e1e6:	b29b      	uxth	r3, r3
 800e1e8:	2b00      	cmp	r3, #0
 800e1ea:	d1c8      	bne.n	800e17e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800e1ec:	683b      	ldr	r3, [r7, #0]
 800e1ee:	9300      	str	r3, [sp, #0]
 800e1f0:	697b      	ldr	r3, [r7, #20]
 800e1f2:	2200      	movs	r2, #0
 800e1f4:	2140      	movs	r1, #64	; 0x40
 800e1f6:	68f8      	ldr	r0, [r7, #12]
 800e1f8:	f000 fec8 	bl	800ef8c <UART_WaitOnFlagUntilTimeout>
 800e1fc:	4603      	mov	r3, r0
 800e1fe:	2b00      	cmp	r3, #0
 800e200:	d005      	beq.n	800e20e <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800e202:	68fb      	ldr	r3, [r7, #12]
 800e204:	2220      	movs	r2, #32
 800e206:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 800e20a:	2303      	movs	r3, #3
 800e20c:	e006      	b.n	800e21c <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800e20e:	68fb      	ldr	r3, [r7, #12]
 800e210:	2220      	movs	r2, #32
 800e212:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 800e216:	2300      	movs	r3, #0
 800e218:	e000      	b.n	800e21c <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800e21a:	2302      	movs	r3, #2
  }
}
 800e21c:	4618      	mov	r0, r3
 800e21e:	3720      	adds	r7, #32
 800e220:	46bd      	mov	sp, r7
 800e222:	bd80      	pop	{r7, pc}

0800e224 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800e224:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800e228:	b092      	sub	sp, #72	; 0x48
 800e22a:	af00      	add	r7, sp, #0
 800e22c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800e22e:	2300      	movs	r3, #0
 800e230:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800e234:	697b      	ldr	r3, [r7, #20]
 800e236:	689a      	ldr	r2, [r3, #8]
 800e238:	697b      	ldr	r3, [r7, #20]
 800e23a:	691b      	ldr	r3, [r3, #16]
 800e23c:	431a      	orrs	r2, r3
 800e23e:	697b      	ldr	r3, [r7, #20]
 800e240:	695b      	ldr	r3, [r3, #20]
 800e242:	431a      	orrs	r2, r3
 800e244:	697b      	ldr	r3, [r7, #20]
 800e246:	69db      	ldr	r3, [r3, #28]
 800e248:	4313      	orrs	r3, r2
 800e24a:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800e24c:	697b      	ldr	r3, [r7, #20]
 800e24e:	681b      	ldr	r3, [r3, #0]
 800e250:	681a      	ldr	r2, [r3, #0]
 800e252:	4bbe      	ldr	r3, [pc, #760]	; (800e54c <UART_SetConfig+0x328>)
 800e254:	4013      	ands	r3, r2
 800e256:	697a      	ldr	r2, [r7, #20]
 800e258:	6812      	ldr	r2, [r2, #0]
 800e25a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800e25c:	430b      	orrs	r3, r1
 800e25e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800e260:	697b      	ldr	r3, [r7, #20]
 800e262:	681b      	ldr	r3, [r3, #0]
 800e264:	685b      	ldr	r3, [r3, #4]
 800e266:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800e26a:	697b      	ldr	r3, [r7, #20]
 800e26c:	68da      	ldr	r2, [r3, #12]
 800e26e:	697b      	ldr	r3, [r7, #20]
 800e270:	681b      	ldr	r3, [r3, #0]
 800e272:	430a      	orrs	r2, r1
 800e274:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800e276:	697b      	ldr	r3, [r7, #20]
 800e278:	699b      	ldr	r3, [r3, #24]
 800e27a:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800e27c:	697b      	ldr	r3, [r7, #20]
 800e27e:	681b      	ldr	r3, [r3, #0]
 800e280:	4ab3      	ldr	r2, [pc, #716]	; (800e550 <UART_SetConfig+0x32c>)
 800e282:	4293      	cmp	r3, r2
 800e284:	d004      	beq.n	800e290 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800e286:	697b      	ldr	r3, [r7, #20]
 800e288:	6a1b      	ldr	r3, [r3, #32]
 800e28a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800e28c:	4313      	orrs	r3, r2
 800e28e:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800e290:	697b      	ldr	r3, [r7, #20]
 800e292:	681b      	ldr	r3, [r3, #0]
 800e294:	689a      	ldr	r2, [r3, #8]
 800e296:	4baf      	ldr	r3, [pc, #700]	; (800e554 <UART_SetConfig+0x330>)
 800e298:	4013      	ands	r3, r2
 800e29a:	697a      	ldr	r2, [r7, #20]
 800e29c:	6812      	ldr	r2, [r2, #0]
 800e29e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800e2a0:	430b      	orrs	r3, r1
 800e2a2:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800e2a4:	697b      	ldr	r3, [r7, #20]
 800e2a6:	681b      	ldr	r3, [r3, #0]
 800e2a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e2aa:	f023 010f 	bic.w	r1, r3, #15
 800e2ae:	697b      	ldr	r3, [r7, #20]
 800e2b0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e2b2:	697b      	ldr	r3, [r7, #20]
 800e2b4:	681b      	ldr	r3, [r3, #0]
 800e2b6:	430a      	orrs	r2, r1
 800e2b8:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800e2ba:	697b      	ldr	r3, [r7, #20]
 800e2bc:	681b      	ldr	r3, [r3, #0]
 800e2be:	4aa6      	ldr	r2, [pc, #664]	; (800e558 <UART_SetConfig+0x334>)
 800e2c0:	4293      	cmp	r3, r2
 800e2c2:	d177      	bne.n	800e3b4 <UART_SetConfig+0x190>
 800e2c4:	4ba5      	ldr	r3, [pc, #660]	; (800e55c <UART_SetConfig+0x338>)
 800e2c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e2c8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800e2cc:	2b28      	cmp	r3, #40	; 0x28
 800e2ce:	d86d      	bhi.n	800e3ac <UART_SetConfig+0x188>
 800e2d0:	a201      	add	r2, pc, #4	; (adr r2, 800e2d8 <UART_SetConfig+0xb4>)
 800e2d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e2d6:	bf00      	nop
 800e2d8:	0800e37d 	.word	0x0800e37d
 800e2dc:	0800e3ad 	.word	0x0800e3ad
 800e2e0:	0800e3ad 	.word	0x0800e3ad
 800e2e4:	0800e3ad 	.word	0x0800e3ad
 800e2e8:	0800e3ad 	.word	0x0800e3ad
 800e2ec:	0800e3ad 	.word	0x0800e3ad
 800e2f0:	0800e3ad 	.word	0x0800e3ad
 800e2f4:	0800e3ad 	.word	0x0800e3ad
 800e2f8:	0800e385 	.word	0x0800e385
 800e2fc:	0800e3ad 	.word	0x0800e3ad
 800e300:	0800e3ad 	.word	0x0800e3ad
 800e304:	0800e3ad 	.word	0x0800e3ad
 800e308:	0800e3ad 	.word	0x0800e3ad
 800e30c:	0800e3ad 	.word	0x0800e3ad
 800e310:	0800e3ad 	.word	0x0800e3ad
 800e314:	0800e3ad 	.word	0x0800e3ad
 800e318:	0800e38d 	.word	0x0800e38d
 800e31c:	0800e3ad 	.word	0x0800e3ad
 800e320:	0800e3ad 	.word	0x0800e3ad
 800e324:	0800e3ad 	.word	0x0800e3ad
 800e328:	0800e3ad 	.word	0x0800e3ad
 800e32c:	0800e3ad 	.word	0x0800e3ad
 800e330:	0800e3ad 	.word	0x0800e3ad
 800e334:	0800e3ad 	.word	0x0800e3ad
 800e338:	0800e395 	.word	0x0800e395
 800e33c:	0800e3ad 	.word	0x0800e3ad
 800e340:	0800e3ad 	.word	0x0800e3ad
 800e344:	0800e3ad 	.word	0x0800e3ad
 800e348:	0800e3ad 	.word	0x0800e3ad
 800e34c:	0800e3ad 	.word	0x0800e3ad
 800e350:	0800e3ad 	.word	0x0800e3ad
 800e354:	0800e3ad 	.word	0x0800e3ad
 800e358:	0800e39d 	.word	0x0800e39d
 800e35c:	0800e3ad 	.word	0x0800e3ad
 800e360:	0800e3ad 	.word	0x0800e3ad
 800e364:	0800e3ad 	.word	0x0800e3ad
 800e368:	0800e3ad 	.word	0x0800e3ad
 800e36c:	0800e3ad 	.word	0x0800e3ad
 800e370:	0800e3ad 	.word	0x0800e3ad
 800e374:	0800e3ad 	.word	0x0800e3ad
 800e378:	0800e3a5 	.word	0x0800e3a5
 800e37c:	2301      	movs	r3, #1
 800e37e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e382:	e222      	b.n	800e7ca <UART_SetConfig+0x5a6>
 800e384:	2304      	movs	r3, #4
 800e386:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e38a:	e21e      	b.n	800e7ca <UART_SetConfig+0x5a6>
 800e38c:	2308      	movs	r3, #8
 800e38e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e392:	e21a      	b.n	800e7ca <UART_SetConfig+0x5a6>
 800e394:	2310      	movs	r3, #16
 800e396:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e39a:	e216      	b.n	800e7ca <UART_SetConfig+0x5a6>
 800e39c:	2320      	movs	r3, #32
 800e39e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e3a2:	e212      	b.n	800e7ca <UART_SetConfig+0x5a6>
 800e3a4:	2340      	movs	r3, #64	; 0x40
 800e3a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e3aa:	e20e      	b.n	800e7ca <UART_SetConfig+0x5a6>
 800e3ac:	2380      	movs	r3, #128	; 0x80
 800e3ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e3b2:	e20a      	b.n	800e7ca <UART_SetConfig+0x5a6>
 800e3b4:	697b      	ldr	r3, [r7, #20]
 800e3b6:	681b      	ldr	r3, [r3, #0]
 800e3b8:	4a69      	ldr	r2, [pc, #420]	; (800e560 <UART_SetConfig+0x33c>)
 800e3ba:	4293      	cmp	r3, r2
 800e3bc:	d130      	bne.n	800e420 <UART_SetConfig+0x1fc>
 800e3be:	4b67      	ldr	r3, [pc, #412]	; (800e55c <UART_SetConfig+0x338>)
 800e3c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e3c2:	f003 0307 	and.w	r3, r3, #7
 800e3c6:	2b05      	cmp	r3, #5
 800e3c8:	d826      	bhi.n	800e418 <UART_SetConfig+0x1f4>
 800e3ca:	a201      	add	r2, pc, #4	; (adr r2, 800e3d0 <UART_SetConfig+0x1ac>)
 800e3cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e3d0:	0800e3e9 	.word	0x0800e3e9
 800e3d4:	0800e3f1 	.word	0x0800e3f1
 800e3d8:	0800e3f9 	.word	0x0800e3f9
 800e3dc:	0800e401 	.word	0x0800e401
 800e3e0:	0800e409 	.word	0x0800e409
 800e3e4:	0800e411 	.word	0x0800e411
 800e3e8:	2300      	movs	r3, #0
 800e3ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e3ee:	e1ec      	b.n	800e7ca <UART_SetConfig+0x5a6>
 800e3f0:	2304      	movs	r3, #4
 800e3f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e3f6:	e1e8      	b.n	800e7ca <UART_SetConfig+0x5a6>
 800e3f8:	2308      	movs	r3, #8
 800e3fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e3fe:	e1e4      	b.n	800e7ca <UART_SetConfig+0x5a6>
 800e400:	2310      	movs	r3, #16
 800e402:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e406:	e1e0      	b.n	800e7ca <UART_SetConfig+0x5a6>
 800e408:	2320      	movs	r3, #32
 800e40a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e40e:	e1dc      	b.n	800e7ca <UART_SetConfig+0x5a6>
 800e410:	2340      	movs	r3, #64	; 0x40
 800e412:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e416:	e1d8      	b.n	800e7ca <UART_SetConfig+0x5a6>
 800e418:	2380      	movs	r3, #128	; 0x80
 800e41a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e41e:	e1d4      	b.n	800e7ca <UART_SetConfig+0x5a6>
 800e420:	697b      	ldr	r3, [r7, #20]
 800e422:	681b      	ldr	r3, [r3, #0]
 800e424:	4a4f      	ldr	r2, [pc, #316]	; (800e564 <UART_SetConfig+0x340>)
 800e426:	4293      	cmp	r3, r2
 800e428:	d130      	bne.n	800e48c <UART_SetConfig+0x268>
 800e42a:	4b4c      	ldr	r3, [pc, #304]	; (800e55c <UART_SetConfig+0x338>)
 800e42c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e42e:	f003 0307 	and.w	r3, r3, #7
 800e432:	2b05      	cmp	r3, #5
 800e434:	d826      	bhi.n	800e484 <UART_SetConfig+0x260>
 800e436:	a201      	add	r2, pc, #4	; (adr r2, 800e43c <UART_SetConfig+0x218>)
 800e438:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e43c:	0800e455 	.word	0x0800e455
 800e440:	0800e45d 	.word	0x0800e45d
 800e444:	0800e465 	.word	0x0800e465
 800e448:	0800e46d 	.word	0x0800e46d
 800e44c:	0800e475 	.word	0x0800e475
 800e450:	0800e47d 	.word	0x0800e47d
 800e454:	2300      	movs	r3, #0
 800e456:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e45a:	e1b6      	b.n	800e7ca <UART_SetConfig+0x5a6>
 800e45c:	2304      	movs	r3, #4
 800e45e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e462:	e1b2      	b.n	800e7ca <UART_SetConfig+0x5a6>
 800e464:	2308      	movs	r3, #8
 800e466:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e46a:	e1ae      	b.n	800e7ca <UART_SetConfig+0x5a6>
 800e46c:	2310      	movs	r3, #16
 800e46e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e472:	e1aa      	b.n	800e7ca <UART_SetConfig+0x5a6>
 800e474:	2320      	movs	r3, #32
 800e476:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e47a:	e1a6      	b.n	800e7ca <UART_SetConfig+0x5a6>
 800e47c:	2340      	movs	r3, #64	; 0x40
 800e47e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e482:	e1a2      	b.n	800e7ca <UART_SetConfig+0x5a6>
 800e484:	2380      	movs	r3, #128	; 0x80
 800e486:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e48a:	e19e      	b.n	800e7ca <UART_SetConfig+0x5a6>
 800e48c:	697b      	ldr	r3, [r7, #20]
 800e48e:	681b      	ldr	r3, [r3, #0]
 800e490:	4a35      	ldr	r2, [pc, #212]	; (800e568 <UART_SetConfig+0x344>)
 800e492:	4293      	cmp	r3, r2
 800e494:	d130      	bne.n	800e4f8 <UART_SetConfig+0x2d4>
 800e496:	4b31      	ldr	r3, [pc, #196]	; (800e55c <UART_SetConfig+0x338>)
 800e498:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e49a:	f003 0307 	and.w	r3, r3, #7
 800e49e:	2b05      	cmp	r3, #5
 800e4a0:	d826      	bhi.n	800e4f0 <UART_SetConfig+0x2cc>
 800e4a2:	a201      	add	r2, pc, #4	; (adr r2, 800e4a8 <UART_SetConfig+0x284>)
 800e4a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e4a8:	0800e4c1 	.word	0x0800e4c1
 800e4ac:	0800e4c9 	.word	0x0800e4c9
 800e4b0:	0800e4d1 	.word	0x0800e4d1
 800e4b4:	0800e4d9 	.word	0x0800e4d9
 800e4b8:	0800e4e1 	.word	0x0800e4e1
 800e4bc:	0800e4e9 	.word	0x0800e4e9
 800e4c0:	2300      	movs	r3, #0
 800e4c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e4c6:	e180      	b.n	800e7ca <UART_SetConfig+0x5a6>
 800e4c8:	2304      	movs	r3, #4
 800e4ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e4ce:	e17c      	b.n	800e7ca <UART_SetConfig+0x5a6>
 800e4d0:	2308      	movs	r3, #8
 800e4d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e4d6:	e178      	b.n	800e7ca <UART_SetConfig+0x5a6>
 800e4d8:	2310      	movs	r3, #16
 800e4da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e4de:	e174      	b.n	800e7ca <UART_SetConfig+0x5a6>
 800e4e0:	2320      	movs	r3, #32
 800e4e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e4e6:	e170      	b.n	800e7ca <UART_SetConfig+0x5a6>
 800e4e8:	2340      	movs	r3, #64	; 0x40
 800e4ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e4ee:	e16c      	b.n	800e7ca <UART_SetConfig+0x5a6>
 800e4f0:	2380      	movs	r3, #128	; 0x80
 800e4f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e4f6:	e168      	b.n	800e7ca <UART_SetConfig+0x5a6>
 800e4f8:	697b      	ldr	r3, [r7, #20]
 800e4fa:	681b      	ldr	r3, [r3, #0]
 800e4fc:	4a1b      	ldr	r2, [pc, #108]	; (800e56c <UART_SetConfig+0x348>)
 800e4fe:	4293      	cmp	r3, r2
 800e500:	d142      	bne.n	800e588 <UART_SetConfig+0x364>
 800e502:	4b16      	ldr	r3, [pc, #88]	; (800e55c <UART_SetConfig+0x338>)
 800e504:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e506:	f003 0307 	and.w	r3, r3, #7
 800e50a:	2b05      	cmp	r3, #5
 800e50c:	d838      	bhi.n	800e580 <UART_SetConfig+0x35c>
 800e50e:	a201      	add	r2, pc, #4	; (adr r2, 800e514 <UART_SetConfig+0x2f0>)
 800e510:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e514:	0800e52d 	.word	0x0800e52d
 800e518:	0800e535 	.word	0x0800e535
 800e51c:	0800e53d 	.word	0x0800e53d
 800e520:	0800e545 	.word	0x0800e545
 800e524:	0800e571 	.word	0x0800e571
 800e528:	0800e579 	.word	0x0800e579
 800e52c:	2300      	movs	r3, #0
 800e52e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e532:	e14a      	b.n	800e7ca <UART_SetConfig+0x5a6>
 800e534:	2304      	movs	r3, #4
 800e536:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e53a:	e146      	b.n	800e7ca <UART_SetConfig+0x5a6>
 800e53c:	2308      	movs	r3, #8
 800e53e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e542:	e142      	b.n	800e7ca <UART_SetConfig+0x5a6>
 800e544:	2310      	movs	r3, #16
 800e546:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e54a:	e13e      	b.n	800e7ca <UART_SetConfig+0x5a6>
 800e54c:	cfff69f3 	.word	0xcfff69f3
 800e550:	58000c00 	.word	0x58000c00
 800e554:	11fff4ff 	.word	0x11fff4ff
 800e558:	40011000 	.word	0x40011000
 800e55c:	58024400 	.word	0x58024400
 800e560:	40004400 	.word	0x40004400
 800e564:	40004800 	.word	0x40004800
 800e568:	40004c00 	.word	0x40004c00
 800e56c:	40005000 	.word	0x40005000
 800e570:	2320      	movs	r3, #32
 800e572:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e576:	e128      	b.n	800e7ca <UART_SetConfig+0x5a6>
 800e578:	2340      	movs	r3, #64	; 0x40
 800e57a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e57e:	e124      	b.n	800e7ca <UART_SetConfig+0x5a6>
 800e580:	2380      	movs	r3, #128	; 0x80
 800e582:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e586:	e120      	b.n	800e7ca <UART_SetConfig+0x5a6>
 800e588:	697b      	ldr	r3, [r7, #20]
 800e58a:	681b      	ldr	r3, [r3, #0]
 800e58c:	4acb      	ldr	r2, [pc, #812]	; (800e8bc <UART_SetConfig+0x698>)
 800e58e:	4293      	cmp	r3, r2
 800e590:	d176      	bne.n	800e680 <UART_SetConfig+0x45c>
 800e592:	4bcb      	ldr	r3, [pc, #812]	; (800e8c0 <UART_SetConfig+0x69c>)
 800e594:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e596:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800e59a:	2b28      	cmp	r3, #40	; 0x28
 800e59c:	d86c      	bhi.n	800e678 <UART_SetConfig+0x454>
 800e59e:	a201      	add	r2, pc, #4	; (adr r2, 800e5a4 <UART_SetConfig+0x380>)
 800e5a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e5a4:	0800e649 	.word	0x0800e649
 800e5a8:	0800e679 	.word	0x0800e679
 800e5ac:	0800e679 	.word	0x0800e679
 800e5b0:	0800e679 	.word	0x0800e679
 800e5b4:	0800e679 	.word	0x0800e679
 800e5b8:	0800e679 	.word	0x0800e679
 800e5bc:	0800e679 	.word	0x0800e679
 800e5c0:	0800e679 	.word	0x0800e679
 800e5c4:	0800e651 	.word	0x0800e651
 800e5c8:	0800e679 	.word	0x0800e679
 800e5cc:	0800e679 	.word	0x0800e679
 800e5d0:	0800e679 	.word	0x0800e679
 800e5d4:	0800e679 	.word	0x0800e679
 800e5d8:	0800e679 	.word	0x0800e679
 800e5dc:	0800e679 	.word	0x0800e679
 800e5e0:	0800e679 	.word	0x0800e679
 800e5e4:	0800e659 	.word	0x0800e659
 800e5e8:	0800e679 	.word	0x0800e679
 800e5ec:	0800e679 	.word	0x0800e679
 800e5f0:	0800e679 	.word	0x0800e679
 800e5f4:	0800e679 	.word	0x0800e679
 800e5f8:	0800e679 	.word	0x0800e679
 800e5fc:	0800e679 	.word	0x0800e679
 800e600:	0800e679 	.word	0x0800e679
 800e604:	0800e661 	.word	0x0800e661
 800e608:	0800e679 	.word	0x0800e679
 800e60c:	0800e679 	.word	0x0800e679
 800e610:	0800e679 	.word	0x0800e679
 800e614:	0800e679 	.word	0x0800e679
 800e618:	0800e679 	.word	0x0800e679
 800e61c:	0800e679 	.word	0x0800e679
 800e620:	0800e679 	.word	0x0800e679
 800e624:	0800e669 	.word	0x0800e669
 800e628:	0800e679 	.word	0x0800e679
 800e62c:	0800e679 	.word	0x0800e679
 800e630:	0800e679 	.word	0x0800e679
 800e634:	0800e679 	.word	0x0800e679
 800e638:	0800e679 	.word	0x0800e679
 800e63c:	0800e679 	.word	0x0800e679
 800e640:	0800e679 	.word	0x0800e679
 800e644:	0800e671 	.word	0x0800e671
 800e648:	2301      	movs	r3, #1
 800e64a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e64e:	e0bc      	b.n	800e7ca <UART_SetConfig+0x5a6>
 800e650:	2304      	movs	r3, #4
 800e652:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e656:	e0b8      	b.n	800e7ca <UART_SetConfig+0x5a6>
 800e658:	2308      	movs	r3, #8
 800e65a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e65e:	e0b4      	b.n	800e7ca <UART_SetConfig+0x5a6>
 800e660:	2310      	movs	r3, #16
 800e662:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e666:	e0b0      	b.n	800e7ca <UART_SetConfig+0x5a6>
 800e668:	2320      	movs	r3, #32
 800e66a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e66e:	e0ac      	b.n	800e7ca <UART_SetConfig+0x5a6>
 800e670:	2340      	movs	r3, #64	; 0x40
 800e672:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e676:	e0a8      	b.n	800e7ca <UART_SetConfig+0x5a6>
 800e678:	2380      	movs	r3, #128	; 0x80
 800e67a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e67e:	e0a4      	b.n	800e7ca <UART_SetConfig+0x5a6>
 800e680:	697b      	ldr	r3, [r7, #20]
 800e682:	681b      	ldr	r3, [r3, #0]
 800e684:	4a8f      	ldr	r2, [pc, #572]	; (800e8c4 <UART_SetConfig+0x6a0>)
 800e686:	4293      	cmp	r3, r2
 800e688:	d130      	bne.n	800e6ec <UART_SetConfig+0x4c8>
 800e68a:	4b8d      	ldr	r3, [pc, #564]	; (800e8c0 <UART_SetConfig+0x69c>)
 800e68c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e68e:	f003 0307 	and.w	r3, r3, #7
 800e692:	2b05      	cmp	r3, #5
 800e694:	d826      	bhi.n	800e6e4 <UART_SetConfig+0x4c0>
 800e696:	a201      	add	r2, pc, #4	; (adr r2, 800e69c <UART_SetConfig+0x478>)
 800e698:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e69c:	0800e6b5 	.word	0x0800e6b5
 800e6a0:	0800e6bd 	.word	0x0800e6bd
 800e6a4:	0800e6c5 	.word	0x0800e6c5
 800e6a8:	0800e6cd 	.word	0x0800e6cd
 800e6ac:	0800e6d5 	.word	0x0800e6d5
 800e6b0:	0800e6dd 	.word	0x0800e6dd
 800e6b4:	2300      	movs	r3, #0
 800e6b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e6ba:	e086      	b.n	800e7ca <UART_SetConfig+0x5a6>
 800e6bc:	2304      	movs	r3, #4
 800e6be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e6c2:	e082      	b.n	800e7ca <UART_SetConfig+0x5a6>
 800e6c4:	2308      	movs	r3, #8
 800e6c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e6ca:	e07e      	b.n	800e7ca <UART_SetConfig+0x5a6>
 800e6cc:	2310      	movs	r3, #16
 800e6ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e6d2:	e07a      	b.n	800e7ca <UART_SetConfig+0x5a6>
 800e6d4:	2320      	movs	r3, #32
 800e6d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e6da:	e076      	b.n	800e7ca <UART_SetConfig+0x5a6>
 800e6dc:	2340      	movs	r3, #64	; 0x40
 800e6de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e6e2:	e072      	b.n	800e7ca <UART_SetConfig+0x5a6>
 800e6e4:	2380      	movs	r3, #128	; 0x80
 800e6e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e6ea:	e06e      	b.n	800e7ca <UART_SetConfig+0x5a6>
 800e6ec:	697b      	ldr	r3, [r7, #20]
 800e6ee:	681b      	ldr	r3, [r3, #0]
 800e6f0:	4a75      	ldr	r2, [pc, #468]	; (800e8c8 <UART_SetConfig+0x6a4>)
 800e6f2:	4293      	cmp	r3, r2
 800e6f4:	d130      	bne.n	800e758 <UART_SetConfig+0x534>
 800e6f6:	4b72      	ldr	r3, [pc, #456]	; (800e8c0 <UART_SetConfig+0x69c>)
 800e6f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e6fa:	f003 0307 	and.w	r3, r3, #7
 800e6fe:	2b05      	cmp	r3, #5
 800e700:	d826      	bhi.n	800e750 <UART_SetConfig+0x52c>
 800e702:	a201      	add	r2, pc, #4	; (adr r2, 800e708 <UART_SetConfig+0x4e4>)
 800e704:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e708:	0800e721 	.word	0x0800e721
 800e70c:	0800e729 	.word	0x0800e729
 800e710:	0800e731 	.word	0x0800e731
 800e714:	0800e739 	.word	0x0800e739
 800e718:	0800e741 	.word	0x0800e741
 800e71c:	0800e749 	.word	0x0800e749
 800e720:	2300      	movs	r3, #0
 800e722:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e726:	e050      	b.n	800e7ca <UART_SetConfig+0x5a6>
 800e728:	2304      	movs	r3, #4
 800e72a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e72e:	e04c      	b.n	800e7ca <UART_SetConfig+0x5a6>
 800e730:	2308      	movs	r3, #8
 800e732:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e736:	e048      	b.n	800e7ca <UART_SetConfig+0x5a6>
 800e738:	2310      	movs	r3, #16
 800e73a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e73e:	e044      	b.n	800e7ca <UART_SetConfig+0x5a6>
 800e740:	2320      	movs	r3, #32
 800e742:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e746:	e040      	b.n	800e7ca <UART_SetConfig+0x5a6>
 800e748:	2340      	movs	r3, #64	; 0x40
 800e74a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e74e:	e03c      	b.n	800e7ca <UART_SetConfig+0x5a6>
 800e750:	2380      	movs	r3, #128	; 0x80
 800e752:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e756:	e038      	b.n	800e7ca <UART_SetConfig+0x5a6>
 800e758:	697b      	ldr	r3, [r7, #20]
 800e75a:	681b      	ldr	r3, [r3, #0]
 800e75c:	4a5b      	ldr	r2, [pc, #364]	; (800e8cc <UART_SetConfig+0x6a8>)
 800e75e:	4293      	cmp	r3, r2
 800e760:	d130      	bne.n	800e7c4 <UART_SetConfig+0x5a0>
 800e762:	4b57      	ldr	r3, [pc, #348]	; (800e8c0 <UART_SetConfig+0x69c>)
 800e764:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e766:	f003 0307 	and.w	r3, r3, #7
 800e76a:	2b05      	cmp	r3, #5
 800e76c:	d826      	bhi.n	800e7bc <UART_SetConfig+0x598>
 800e76e:	a201      	add	r2, pc, #4	; (adr r2, 800e774 <UART_SetConfig+0x550>)
 800e770:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e774:	0800e78d 	.word	0x0800e78d
 800e778:	0800e795 	.word	0x0800e795
 800e77c:	0800e79d 	.word	0x0800e79d
 800e780:	0800e7a5 	.word	0x0800e7a5
 800e784:	0800e7ad 	.word	0x0800e7ad
 800e788:	0800e7b5 	.word	0x0800e7b5
 800e78c:	2302      	movs	r3, #2
 800e78e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e792:	e01a      	b.n	800e7ca <UART_SetConfig+0x5a6>
 800e794:	2304      	movs	r3, #4
 800e796:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e79a:	e016      	b.n	800e7ca <UART_SetConfig+0x5a6>
 800e79c:	2308      	movs	r3, #8
 800e79e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e7a2:	e012      	b.n	800e7ca <UART_SetConfig+0x5a6>
 800e7a4:	2310      	movs	r3, #16
 800e7a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e7aa:	e00e      	b.n	800e7ca <UART_SetConfig+0x5a6>
 800e7ac:	2320      	movs	r3, #32
 800e7ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e7b2:	e00a      	b.n	800e7ca <UART_SetConfig+0x5a6>
 800e7b4:	2340      	movs	r3, #64	; 0x40
 800e7b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e7ba:	e006      	b.n	800e7ca <UART_SetConfig+0x5a6>
 800e7bc:	2380      	movs	r3, #128	; 0x80
 800e7be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e7c2:	e002      	b.n	800e7ca <UART_SetConfig+0x5a6>
 800e7c4:	2380      	movs	r3, #128	; 0x80
 800e7c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800e7ca:	697b      	ldr	r3, [r7, #20]
 800e7cc:	681b      	ldr	r3, [r3, #0]
 800e7ce:	4a3f      	ldr	r2, [pc, #252]	; (800e8cc <UART_SetConfig+0x6a8>)
 800e7d0:	4293      	cmp	r3, r2
 800e7d2:	f040 80f8 	bne.w	800e9c6 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800e7d6:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800e7da:	2b20      	cmp	r3, #32
 800e7dc:	dc46      	bgt.n	800e86c <UART_SetConfig+0x648>
 800e7de:	2b02      	cmp	r3, #2
 800e7e0:	f2c0 8082 	blt.w	800e8e8 <UART_SetConfig+0x6c4>
 800e7e4:	3b02      	subs	r3, #2
 800e7e6:	2b1e      	cmp	r3, #30
 800e7e8:	d87e      	bhi.n	800e8e8 <UART_SetConfig+0x6c4>
 800e7ea:	a201      	add	r2, pc, #4	; (adr r2, 800e7f0 <UART_SetConfig+0x5cc>)
 800e7ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e7f0:	0800e873 	.word	0x0800e873
 800e7f4:	0800e8e9 	.word	0x0800e8e9
 800e7f8:	0800e87b 	.word	0x0800e87b
 800e7fc:	0800e8e9 	.word	0x0800e8e9
 800e800:	0800e8e9 	.word	0x0800e8e9
 800e804:	0800e8e9 	.word	0x0800e8e9
 800e808:	0800e88b 	.word	0x0800e88b
 800e80c:	0800e8e9 	.word	0x0800e8e9
 800e810:	0800e8e9 	.word	0x0800e8e9
 800e814:	0800e8e9 	.word	0x0800e8e9
 800e818:	0800e8e9 	.word	0x0800e8e9
 800e81c:	0800e8e9 	.word	0x0800e8e9
 800e820:	0800e8e9 	.word	0x0800e8e9
 800e824:	0800e8e9 	.word	0x0800e8e9
 800e828:	0800e89b 	.word	0x0800e89b
 800e82c:	0800e8e9 	.word	0x0800e8e9
 800e830:	0800e8e9 	.word	0x0800e8e9
 800e834:	0800e8e9 	.word	0x0800e8e9
 800e838:	0800e8e9 	.word	0x0800e8e9
 800e83c:	0800e8e9 	.word	0x0800e8e9
 800e840:	0800e8e9 	.word	0x0800e8e9
 800e844:	0800e8e9 	.word	0x0800e8e9
 800e848:	0800e8e9 	.word	0x0800e8e9
 800e84c:	0800e8e9 	.word	0x0800e8e9
 800e850:	0800e8e9 	.word	0x0800e8e9
 800e854:	0800e8e9 	.word	0x0800e8e9
 800e858:	0800e8e9 	.word	0x0800e8e9
 800e85c:	0800e8e9 	.word	0x0800e8e9
 800e860:	0800e8e9 	.word	0x0800e8e9
 800e864:	0800e8e9 	.word	0x0800e8e9
 800e868:	0800e8db 	.word	0x0800e8db
 800e86c:	2b40      	cmp	r3, #64	; 0x40
 800e86e:	d037      	beq.n	800e8e0 <UART_SetConfig+0x6bc>
 800e870:	e03a      	b.n	800e8e8 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800e872:	f7fe fb19 	bl	800cea8 <HAL_RCCEx_GetD3PCLK1Freq>
 800e876:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800e878:	e03c      	b.n	800e8f4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800e87a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800e87e:	4618      	mov	r0, r3
 800e880:	f7fe fb28 	bl	800ced4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800e884:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e886:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e888:	e034      	b.n	800e8f4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800e88a:	f107 0318 	add.w	r3, r7, #24
 800e88e:	4618      	mov	r0, r3
 800e890:	f7fe fc74 	bl	800d17c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800e894:	69fb      	ldr	r3, [r7, #28]
 800e896:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e898:	e02c      	b.n	800e8f4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800e89a:	4b09      	ldr	r3, [pc, #36]	; (800e8c0 <UART_SetConfig+0x69c>)
 800e89c:	681b      	ldr	r3, [r3, #0]
 800e89e:	f003 0320 	and.w	r3, r3, #32
 800e8a2:	2b00      	cmp	r3, #0
 800e8a4:	d016      	beq.n	800e8d4 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800e8a6:	4b06      	ldr	r3, [pc, #24]	; (800e8c0 <UART_SetConfig+0x69c>)
 800e8a8:	681b      	ldr	r3, [r3, #0]
 800e8aa:	08db      	lsrs	r3, r3, #3
 800e8ac:	f003 0303 	and.w	r3, r3, #3
 800e8b0:	4a07      	ldr	r2, [pc, #28]	; (800e8d0 <UART_SetConfig+0x6ac>)
 800e8b2:	fa22 f303 	lsr.w	r3, r2, r3
 800e8b6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800e8b8:	e01c      	b.n	800e8f4 <UART_SetConfig+0x6d0>
 800e8ba:	bf00      	nop
 800e8bc:	40011400 	.word	0x40011400
 800e8c0:	58024400 	.word	0x58024400
 800e8c4:	40007800 	.word	0x40007800
 800e8c8:	40007c00 	.word	0x40007c00
 800e8cc:	58000c00 	.word	0x58000c00
 800e8d0:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 800e8d4:	4b9d      	ldr	r3, [pc, #628]	; (800eb4c <UART_SetConfig+0x928>)
 800e8d6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e8d8:	e00c      	b.n	800e8f4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800e8da:	4b9d      	ldr	r3, [pc, #628]	; (800eb50 <UART_SetConfig+0x92c>)
 800e8dc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e8de:	e009      	b.n	800e8f4 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800e8e0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800e8e4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e8e6:	e005      	b.n	800e8f4 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 800e8e8:	2300      	movs	r3, #0
 800e8ea:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800e8ec:	2301      	movs	r3, #1
 800e8ee:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800e8f2:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800e8f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e8f6:	2b00      	cmp	r3, #0
 800e8f8:	f000 81de 	beq.w	800ecb8 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800e8fc:	697b      	ldr	r3, [r7, #20]
 800e8fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e900:	4a94      	ldr	r2, [pc, #592]	; (800eb54 <UART_SetConfig+0x930>)
 800e902:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e906:	461a      	mov	r2, r3
 800e908:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e90a:	fbb3 f3f2 	udiv	r3, r3, r2
 800e90e:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800e910:	697b      	ldr	r3, [r7, #20]
 800e912:	685a      	ldr	r2, [r3, #4]
 800e914:	4613      	mov	r3, r2
 800e916:	005b      	lsls	r3, r3, #1
 800e918:	4413      	add	r3, r2
 800e91a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e91c:	429a      	cmp	r2, r3
 800e91e:	d305      	bcc.n	800e92c <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800e920:	697b      	ldr	r3, [r7, #20]
 800e922:	685b      	ldr	r3, [r3, #4]
 800e924:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800e926:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e928:	429a      	cmp	r2, r3
 800e92a:	d903      	bls.n	800e934 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 800e92c:	2301      	movs	r3, #1
 800e92e:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800e932:	e1c1      	b.n	800ecb8 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800e934:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e936:	2200      	movs	r2, #0
 800e938:	60bb      	str	r3, [r7, #8]
 800e93a:	60fa      	str	r2, [r7, #12]
 800e93c:	697b      	ldr	r3, [r7, #20]
 800e93e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e940:	4a84      	ldr	r2, [pc, #528]	; (800eb54 <UART_SetConfig+0x930>)
 800e942:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e946:	b29b      	uxth	r3, r3
 800e948:	2200      	movs	r2, #0
 800e94a:	603b      	str	r3, [r7, #0]
 800e94c:	607a      	str	r2, [r7, #4]
 800e94e:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e952:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800e956:	f7f3 fb5b 	bl	8002010 <__aeabi_uldivmod>
 800e95a:	4602      	mov	r2, r0
 800e95c:	460b      	mov	r3, r1
 800e95e:	4610      	mov	r0, r2
 800e960:	4619      	mov	r1, r3
 800e962:	f04f 0200 	mov.w	r2, #0
 800e966:	f04f 0300 	mov.w	r3, #0
 800e96a:	020b      	lsls	r3, r1, #8
 800e96c:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800e970:	0202      	lsls	r2, r0, #8
 800e972:	6979      	ldr	r1, [r7, #20]
 800e974:	6849      	ldr	r1, [r1, #4]
 800e976:	0849      	lsrs	r1, r1, #1
 800e978:	2000      	movs	r0, #0
 800e97a:	460c      	mov	r4, r1
 800e97c:	4605      	mov	r5, r0
 800e97e:	eb12 0804 	adds.w	r8, r2, r4
 800e982:	eb43 0905 	adc.w	r9, r3, r5
 800e986:	697b      	ldr	r3, [r7, #20]
 800e988:	685b      	ldr	r3, [r3, #4]
 800e98a:	2200      	movs	r2, #0
 800e98c:	469a      	mov	sl, r3
 800e98e:	4693      	mov	fp, r2
 800e990:	4652      	mov	r2, sl
 800e992:	465b      	mov	r3, fp
 800e994:	4640      	mov	r0, r8
 800e996:	4649      	mov	r1, r9
 800e998:	f7f3 fb3a 	bl	8002010 <__aeabi_uldivmod>
 800e99c:	4602      	mov	r2, r0
 800e99e:	460b      	mov	r3, r1
 800e9a0:	4613      	mov	r3, r2
 800e9a2:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800e9a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e9a6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800e9aa:	d308      	bcc.n	800e9be <UART_SetConfig+0x79a>
 800e9ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e9ae:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800e9b2:	d204      	bcs.n	800e9be <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 800e9b4:	697b      	ldr	r3, [r7, #20]
 800e9b6:	681b      	ldr	r3, [r3, #0]
 800e9b8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e9ba:	60da      	str	r2, [r3, #12]
 800e9bc:	e17c      	b.n	800ecb8 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 800e9be:	2301      	movs	r3, #1
 800e9c0:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800e9c4:	e178      	b.n	800ecb8 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800e9c6:	697b      	ldr	r3, [r7, #20]
 800e9c8:	69db      	ldr	r3, [r3, #28]
 800e9ca:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800e9ce:	f040 80c5 	bne.w	800eb5c <UART_SetConfig+0x938>
  {
    switch (clocksource)
 800e9d2:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800e9d6:	2b20      	cmp	r3, #32
 800e9d8:	dc48      	bgt.n	800ea6c <UART_SetConfig+0x848>
 800e9da:	2b00      	cmp	r3, #0
 800e9dc:	db7b      	blt.n	800ead6 <UART_SetConfig+0x8b2>
 800e9de:	2b20      	cmp	r3, #32
 800e9e0:	d879      	bhi.n	800ead6 <UART_SetConfig+0x8b2>
 800e9e2:	a201      	add	r2, pc, #4	; (adr r2, 800e9e8 <UART_SetConfig+0x7c4>)
 800e9e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e9e8:	0800ea73 	.word	0x0800ea73
 800e9ec:	0800ea7b 	.word	0x0800ea7b
 800e9f0:	0800ead7 	.word	0x0800ead7
 800e9f4:	0800ead7 	.word	0x0800ead7
 800e9f8:	0800ea83 	.word	0x0800ea83
 800e9fc:	0800ead7 	.word	0x0800ead7
 800ea00:	0800ead7 	.word	0x0800ead7
 800ea04:	0800ead7 	.word	0x0800ead7
 800ea08:	0800ea93 	.word	0x0800ea93
 800ea0c:	0800ead7 	.word	0x0800ead7
 800ea10:	0800ead7 	.word	0x0800ead7
 800ea14:	0800ead7 	.word	0x0800ead7
 800ea18:	0800ead7 	.word	0x0800ead7
 800ea1c:	0800ead7 	.word	0x0800ead7
 800ea20:	0800ead7 	.word	0x0800ead7
 800ea24:	0800ead7 	.word	0x0800ead7
 800ea28:	0800eaa3 	.word	0x0800eaa3
 800ea2c:	0800ead7 	.word	0x0800ead7
 800ea30:	0800ead7 	.word	0x0800ead7
 800ea34:	0800ead7 	.word	0x0800ead7
 800ea38:	0800ead7 	.word	0x0800ead7
 800ea3c:	0800ead7 	.word	0x0800ead7
 800ea40:	0800ead7 	.word	0x0800ead7
 800ea44:	0800ead7 	.word	0x0800ead7
 800ea48:	0800ead7 	.word	0x0800ead7
 800ea4c:	0800ead7 	.word	0x0800ead7
 800ea50:	0800ead7 	.word	0x0800ead7
 800ea54:	0800ead7 	.word	0x0800ead7
 800ea58:	0800ead7 	.word	0x0800ead7
 800ea5c:	0800ead7 	.word	0x0800ead7
 800ea60:	0800ead7 	.word	0x0800ead7
 800ea64:	0800ead7 	.word	0x0800ead7
 800ea68:	0800eac9 	.word	0x0800eac9
 800ea6c:	2b40      	cmp	r3, #64	; 0x40
 800ea6e:	d02e      	beq.n	800eace <UART_SetConfig+0x8aa>
 800ea70:	e031      	b.n	800ead6 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800ea72:	f7fc fa47 	bl	800af04 <HAL_RCC_GetPCLK1Freq>
 800ea76:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800ea78:	e033      	b.n	800eae2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800ea7a:	f7fc fa59 	bl	800af30 <HAL_RCC_GetPCLK2Freq>
 800ea7e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800ea80:	e02f      	b.n	800eae2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ea82:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ea86:	4618      	mov	r0, r3
 800ea88:	f7fe fa24 	bl	800ced4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800ea8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ea8e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ea90:	e027      	b.n	800eae2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ea92:	f107 0318 	add.w	r3, r7, #24
 800ea96:	4618      	mov	r0, r3
 800ea98:	f7fe fb70 	bl	800d17c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800ea9c:	69fb      	ldr	r3, [r7, #28]
 800ea9e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800eaa0:	e01f      	b.n	800eae2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800eaa2:	4b2d      	ldr	r3, [pc, #180]	; (800eb58 <UART_SetConfig+0x934>)
 800eaa4:	681b      	ldr	r3, [r3, #0]
 800eaa6:	f003 0320 	and.w	r3, r3, #32
 800eaaa:	2b00      	cmp	r3, #0
 800eaac:	d009      	beq.n	800eac2 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800eaae:	4b2a      	ldr	r3, [pc, #168]	; (800eb58 <UART_SetConfig+0x934>)
 800eab0:	681b      	ldr	r3, [r3, #0]
 800eab2:	08db      	lsrs	r3, r3, #3
 800eab4:	f003 0303 	and.w	r3, r3, #3
 800eab8:	4a24      	ldr	r2, [pc, #144]	; (800eb4c <UART_SetConfig+0x928>)
 800eaba:	fa22 f303 	lsr.w	r3, r2, r3
 800eabe:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800eac0:	e00f      	b.n	800eae2 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800eac2:	4b22      	ldr	r3, [pc, #136]	; (800eb4c <UART_SetConfig+0x928>)
 800eac4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800eac6:	e00c      	b.n	800eae2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800eac8:	4b21      	ldr	r3, [pc, #132]	; (800eb50 <UART_SetConfig+0x92c>)
 800eaca:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800eacc:	e009      	b.n	800eae2 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800eace:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ead2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ead4:	e005      	b.n	800eae2 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800ead6:	2300      	movs	r3, #0
 800ead8:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800eada:	2301      	movs	r3, #1
 800eadc:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800eae0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800eae2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800eae4:	2b00      	cmp	r3, #0
 800eae6:	f000 80e7 	beq.w	800ecb8 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800eaea:	697b      	ldr	r3, [r7, #20]
 800eaec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800eaee:	4a19      	ldr	r2, [pc, #100]	; (800eb54 <UART_SetConfig+0x930>)
 800eaf0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800eaf4:	461a      	mov	r2, r3
 800eaf6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800eaf8:	fbb3 f3f2 	udiv	r3, r3, r2
 800eafc:	005a      	lsls	r2, r3, #1
 800eafe:	697b      	ldr	r3, [r7, #20]
 800eb00:	685b      	ldr	r3, [r3, #4]
 800eb02:	085b      	lsrs	r3, r3, #1
 800eb04:	441a      	add	r2, r3
 800eb06:	697b      	ldr	r3, [r7, #20]
 800eb08:	685b      	ldr	r3, [r3, #4]
 800eb0a:	fbb2 f3f3 	udiv	r3, r2, r3
 800eb0e:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800eb10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eb12:	2b0f      	cmp	r3, #15
 800eb14:	d916      	bls.n	800eb44 <UART_SetConfig+0x920>
 800eb16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eb18:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800eb1c:	d212      	bcs.n	800eb44 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800eb1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eb20:	b29b      	uxth	r3, r3
 800eb22:	f023 030f 	bic.w	r3, r3, #15
 800eb26:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800eb28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eb2a:	085b      	lsrs	r3, r3, #1
 800eb2c:	b29b      	uxth	r3, r3
 800eb2e:	f003 0307 	and.w	r3, r3, #7
 800eb32:	b29a      	uxth	r2, r3
 800eb34:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800eb36:	4313      	orrs	r3, r2
 800eb38:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 800eb3a:	697b      	ldr	r3, [r7, #20]
 800eb3c:	681b      	ldr	r3, [r3, #0]
 800eb3e:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800eb40:	60da      	str	r2, [r3, #12]
 800eb42:	e0b9      	b.n	800ecb8 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800eb44:	2301      	movs	r3, #1
 800eb46:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800eb4a:	e0b5      	b.n	800ecb8 <UART_SetConfig+0xa94>
 800eb4c:	03d09000 	.word	0x03d09000
 800eb50:	003d0900 	.word	0x003d0900
 800eb54:	08020d18 	.word	0x08020d18
 800eb58:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 800eb5c:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800eb60:	2b20      	cmp	r3, #32
 800eb62:	dc49      	bgt.n	800ebf8 <UART_SetConfig+0x9d4>
 800eb64:	2b00      	cmp	r3, #0
 800eb66:	db7c      	blt.n	800ec62 <UART_SetConfig+0xa3e>
 800eb68:	2b20      	cmp	r3, #32
 800eb6a:	d87a      	bhi.n	800ec62 <UART_SetConfig+0xa3e>
 800eb6c:	a201      	add	r2, pc, #4	; (adr r2, 800eb74 <UART_SetConfig+0x950>)
 800eb6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800eb72:	bf00      	nop
 800eb74:	0800ebff 	.word	0x0800ebff
 800eb78:	0800ec07 	.word	0x0800ec07
 800eb7c:	0800ec63 	.word	0x0800ec63
 800eb80:	0800ec63 	.word	0x0800ec63
 800eb84:	0800ec0f 	.word	0x0800ec0f
 800eb88:	0800ec63 	.word	0x0800ec63
 800eb8c:	0800ec63 	.word	0x0800ec63
 800eb90:	0800ec63 	.word	0x0800ec63
 800eb94:	0800ec1f 	.word	0x0800ec1f
 800eb98:	0800ec63 	.word	0x0800ec63
 800eb9c:	0800ec63 	.word	0x0800ec63
 800eba0:	0800ec63 	.word	0x0800ec63
 800eba4:	0800ec63 	.word	0x0800ec63
 800eba8:	0800ec63 	.word	0x0800ec63
 800ebac:	0800ec63 	.word	0x0800ec63
 800ebb0:	0800ec63 	.word	0x0800ec63
 800ebb4:	0800ec2f 	.word	0x0800ec2f
 800ebb8:	0800ec63 	.word	0x0800ec63
 800ebbc:	0800ec63 	.word	0x0800ec63
 800ebc0:	0800ec63 	.word	0x0800ec63
 800ebc4:	0800ec63 	.word	0x0800ec63
 800ebc8:	0800ec63 	.word	0x0800ec63
 800ebcc:	0800ec63 	.word	0x0800ec63
 800ebd0:	0800ec63 	.word	0x0800ec63
 800ebd4:	0800ec63 	.word	0x0800ec63
 800ebd8:	0800ec63 	.word	0x0800ec63
 800ebdc:	0800ec63 	.word	0x0800ec63
 800ebe0:	0800ec63 	.word	0x0800ec63
 800ebe4:	0800ec63 	.word	0x0800ec63
 800ebe8:	0800ec63 	.word	0x0800ec63
 800ebec:	0800ec63 	.word	0x0800ec63
 800ebf0:	0800ec63 	.word	0x0800ec63
 800ebf4:	0800ec55 	.word	0x0800ec55
 800ebf8:	2b40      	cmp	r3, #64	; 0x40
 800ebfa:	d02e      	beq.n	800ec5a <UART_SetConfig+0xa36>
 800ebfc:	e031      	b.n	800ec62 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800ebfe:	f7fc f981 	bl	800af04 <HAL_RCC_GetPCLK1Freq>
 800ec02:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800ec04:	e033      	b.n	800ec6e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800ec06:	f7fc f993 	bl	800af30 <HAL_RCC_GetPCLK2Freq>
 800ec0a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800ec0c:	e02f      	b.n	800ec6e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ec0e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ec12:	4618      	mov	r0, r3
 800ec14:	f7fe f95e 	bl	800ced4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800ec18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ec1a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ec1c:	e027      	b.n	800ec6e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ec1e:	f107 0318 	add.w	r3, r7, #24
 800ec22:	4618      	mov	r0, r3
 800ec24:	f7fe faaa 	bl	800d17c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800ec28:	69fb      	ldr	r3, [r7, #28]
 800ec2a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ec2c:	e01f      	b.n	800ec6e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ec2e:	4b2d      	ldr	r3, [pc, #180]	; (800ece4 <UART_SetConfig+0xac0>)
 800ec30:	681b      	ldr	r3, [r3, #0]
 800ec32:	f003 0320 	and.w	r3, r3, #32
 800ec36:	2b00      	cmp	r3, #0
 800ec38:	d009      	beq.n	800ec4e <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800ec3a:	4b2a      	ldr	r3, [pc, #168]	; (800ece4 <UART_SetConfig+0xac0>)
 800ec3c:	681b      	ldr	r3, [r3, #0]
 800ec3e:	08db      	lsrs	r3, r3, #3
 800ec40:	f003 0303 	and.w	r3, r3, #3
 800ec44:	4a28      	ldr	r2, [pc, #160]	; (800ece8 <UART_SetConfig+0xac4>)
 800ec46:	fa22 f303 	lsr.w	r3, r2, r3
 800ec4a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800ec4c:	e00f      	b.n	800ec6e <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 800ec4e:	4b26      	ldr	r3, [pc, #152]	; (800ece8 <UART_SetConfig+0xac4>)
 800ec50:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ec52:	e00c      	b.n	800ec6e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800ec54:	4b25      	ldr	r3, [pc, #148]	; (800ecec <UART_SetConfig+0xac8>)
 800ec56:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ec58:	e009      	b.n	800ec6e <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800ec5a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ec5e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ec60:	e005      	b.n	800ec6e <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 800ec62:	2300      	movs	r3, #0
 800ec64:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800ec66:	2301      	movs	r3, #1
 800ec68:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800ec6c:	bf00      	nop
    }

    if (pclk != 0U)
 800ec6e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ec70:	2b00      	cmp	r3, #0
 800ec72:	d021      	beq.n	800ecb8 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800ec74:	697b      	ldr	r3, [r7, #20]
 800ec76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ec78:	4a1d      	ldr	r2, [pc, #116]	; (800ecf0 <UART_SetConfig+0xacc>)
 800ec7a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800ec7e:	461a      	mov	r2, r3
 800ec80:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ec82:	fbb3 f2f2 	udiv	r2, r3, r2
 800ec86:	697b      	ldr	r3, [r7, #20]
 800ec88:	685b      	ldr	r3, [r3, #4]
 800ec8a:	085b      	lsrs	r3, r3, #1
 800ec8c:	441a      	add	r2, r3
 800ec8e:	697b      	ldr	r3, [r7, #20]
 800ec90:	685b      	ldr	r3, [r3, #4]
 800ec92:	fbb2 f3f3 	udiv	r3, r2, r3
 800ec96:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800ec98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ec9a:	2b0f      	cmp	r3, #15
 800ec9c:	d909      	bls.n	800ecb2 <UART_SetConfig+0xa8e>
 800ec9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eca0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800eca4:	d205      	bcs.n	800ecb2 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800eca6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800eca8:	b29a      	uxth	r2, r3
 800ecaa:	697b      	ldr	r3, [r7, #20]
 800ecac:	681b      	ldr	r3, [r3, #0]
 800ecae:	60da      	str	r2, [r3, #12]
 800ecb0:	e002      	b.n	800ecb8 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800ecb2:	2301      	movs	r3, #1
 800ecb4:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800ecb8:	697b      	ldr	r3, [r7, #20]
 800ecba:	2201      	movs	r2, #1
 800ecbc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800ecc0:	697b      	ldr	r3, [r7, #20]
 800ecc2:	2201      	movs	r2, #1
 800ecc4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800ecc8:	697b      	ldr	r3, [r7, #20]
 800ecca:	2200      	movs	r2, #0
 800eccc:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 800ecce:	697b      	ldr	r3, [r7, #20]
 800ecd0:	2200      	movs	r2, #0
 800ecd2:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 800ecd4:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 800ecd8:	4618      	mov	r0, r3
 800ecda:	3748      	adds	r7, #72	; 0x48
 800ecdc:	46bd      	mov	sp, r7
 800ecde:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800ece2:	bf00      	nop
 800ece4:	58024400 	.word	0x58024400
 800ece8:	03d09000 	.word	0x03d09000
 800ecec:	003d0900 	.word	0x003d0900
 800ecf0:	08020d18 	.word	0x08020d18

0800ecf4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800ecf4:	b480      	push	{r7}
 800ecf6:	b083      	sub	sp, #12
 800ecf8:	af00      	add	r7, sp, #0
 800ecfa:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800ecfc:	687b      	ldr	r3, [r7, #4]
 800ecfe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ed00:	f003 0301 	and.w	r3, r3, #1
 800ed04:	2b00      	cmp	r3, #0
 800ed06:	d00a      	beq.n	800ed1e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800ed08:	687b      	ldr	r3, [r7, #4]
 800ed0a:	681b      	ldr	r3, [r3, #0]
 800ed0c:	685b      	ldr	r3, [r3, #4]
 800ed0e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800ed12:	687b      	ldr	r3, [r7, #4]
 800ed14:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ed16:	687b      	ldr	r3, [r7, #4]
 800ed18:	681b      	ldr	r3, [r3, #0]
 800ed1a:	430a      	orrs	r2, r1
 800ed1c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800ed1e:	687b      	ldr	r3, [r7, #4]
 800ed20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ed22:	f003 0302 	and.w	r3, r3, #2
 800ed26:	2b00      	cmp	r3, #0
 800ed28:	d00a      	beq.n	800ed40 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800ed2a:	687b      	ldr	r3, [r7, #4]
 800ed2c:	681b      	ldr	r3, [r3, #0]
 800ed2e:	685b      	ldr	r3, [r3, #4]
 800ed30:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800ed34:	687b      	ldr	r3, [r7, #4]
 800ed36:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ed38:	687b      	ldr	r3, [r7, #4]
 800ed3a:	681b      	ldr	r3, [r3, #0]
 800ed3c:	430a      	orrs	r2, r1
 800ed3e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800ed40:	687b      	ldr	r3, [r7, #4]
 800ed42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ed44:	f003 0304 	and.w	r3, r3, #4
 800ed48:	2b00      	cmp	r3, #0
 800ed4a:	d00a      	beq.n	800ed62 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800ed4c:	687b      	ldr	r3, [r7, #4]
 800ed4e:	681b      	ldr	r3, [r3, #0]
 800ed50:	685b      	ldr	r3, [r3, #4]
 800ed52:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800ed56:	687b      	ldr	r3, [r7, #4]
 800ed58:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ed5a:	687b      	ldr	r3, [r7, #4]
 800ed5c:	681b      	ldr	r3, [r3, #0]
 800ed5e:	430a      	orrs	r2, r1
 800ed60:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800ed62:	687b      	ldr	r3, [r7, #4]
 800ed64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ed66:	f003 0308 	and.w	r3, r3, #8
 800ed6a:	2b00      	cmp	r3, #0
 800ed6c:	d00a      	beq.n	800ed84 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800ed6e:	687b      	ldr	r3, [r7, #4]
 800ed70:	681b      	ldr	r3, [r3, #0]
 800ed72:	685b      	ldr	r3, [r3, #4]
 800ed74:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800ed78:	687b      	ldr	r3, [r7, #4]
 800ed7a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ed7c:	687b      	ldr	r3, [r7, #4]
 800ed7e:	681b      	ldr	r3, [r3, #0]
 800ed80:	430a      	orrs	r2, r1
 800ed82:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800ed84:	687b      	ldr	r3, [r7, #4]
 800ed86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ed88:	f003 0310 	and.w	r3, r3, #16
 800ed8c:	2b00      	cmp	r3, #0
 800ed8e:	d00a      	beq.n	800eda6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800ed90:	687b      	ldr	r3, [r7, #4]
 800ed92:	681b      	ldr	r3, [r3, #0]
 800ed94:	689b      	ldr	r3, [r3, #8]
 800ed96:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800ed9a:	687b      	ldr	r3, [r7, #4]
 800ed9c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800ed9e:	687b      	ldr	r3, [r7, #4]
 800eda0:	681b      	ldr	r3, [r3, #0]
 800eda2:	430a      	orrs	r2, r1
 800eda4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800eda6:	687b      	ldr	r3, [r7, #4]
 800eda8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800edaa:	f003 0320 	and.w	r3, r3, #32
 800edae:	2b00      	cmp	r3, #0
 800edb0:	d00a      	beq.n	800edc8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800edb2:	687b      	ldr	r3, [r7, #4]
 800edb4:	681b      	ldr	r3, [r3, #0]
 800edb6:	689b      	ldr	r3, [r3, #8]
 800edb8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800edbc:	687b      	ldr	r3, [r7, #4]
 800edbe:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800edc0:	687b      	ldr	r3, [r7, #4]
 800edc2:	681b      	ldr	r3, [r3, #0]
 800edc4:	430a      	orrs	r2, r1
 800edc6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800edc8:	687b      	ldr	r3, [r7, #4]
 800edca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800edcc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800edd0:	2b00      	cmp	r3, #0
 800edd2:	d01a      	beq.n	800ee0a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800edd4:	687b      	ldr	r3, [r7, #4]
 800edd6:	681b      	ldr	r3, [r3, #0]
 800edd8:	685b      	ldr	r3, [r3, #4]
 800edda:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800edde:	687b      	ldr	r3, [r7, #4]
 800ede0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ede2:	687b      	ldr	r3, [r7, #4]
 800ede4:	681b      	ldr	r3, [r3, #0]
 800ede6:	430a      	orrs	r2, r1
 800ede8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800edea:	687b      	ldr	r3, [r7, #4]
 800edec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800edee:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800edf2:	d10a      	bne.n	800ee0a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800edf4:	687b      	ldr	r3, [r7, #4]
 800edf6:	681b      	ldr	r3, [r3, #0]
 800edf8:	685b      	ldr	r3, [r3, #4]
 800edfa:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800edfe:	687b      	ldr	r3, [r7, #4]
 800ee00:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800ee02:	687b      	ldr	r3, [r7, #4]
 800ee04:	681b      	ldr	r3, [r3, #0]
 800ee06:	430a      	orrs	r2, r1
 800ee08:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800ee0a:	687b      	ldr	r3, [r7, #4]
 800ee0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ee0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ee12:	2b00      	cmp	r3, #0
 800ee14:	d00a      	beq.n	800ee2c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800ee16:	687b      	ldr	r3, [r7, #4]
 800ee18:	681b      	ldr	r3, [r3, #0]
 800ee1a:	685b      	ldr	r3, [r3, #4]
 800ee1c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800ee20:	687b      	ldr	r3, [r7, #4]
 800ee22:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800ee24:	687b      	ldr	r3, [r7, #4]
 800ee26:	681b      	ldr	r3, [r3, #0]
 800ee28:	430a      	orrs	r2, r1
 800ee2a:	605a      	str	r2, [r3, #4]
  }
}
 800ee2c:	bf00      	nop
 800ee2e:	370c      	adds	r7, #12
 800ee30:	46bd      	mov	sp, r7
 800ee32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee36:	4770      	bx	lr

0800ee38 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800ee38:	b580      	push	{r7, lr}
 800ee3a:	b098      	sub	sp, #96	; 0x60
 800ee3c:	af02      	add	r7, sp, #8
 800ee3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ee40:	687b      	ldr	r3, [r7, #4]
 800ee42:	2200      	movs	r2, #0
 800ee44:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800ee48:	f7f5 fa36 	bl	80042b8 <HAL_GetTick>
 800ee4c:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800ee4e:	687b      	ldr	r3, [r7, #4]
 800ee50:	681b      	ldr	r3, [r3, #0]
 800ee52:	681b      	ldr	r3, [r3, #0]
 800ee54:	f003 0308 	and.w	r3, r3, #8
 800ee58:	2b08      	cmp	r3, #8
 800ee5a:	d12f      	bne.n	800eebc <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800ee5c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800ee60:	9300      	str	r3, [sp, #0]
 800ee62:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ee64:	2200      	movs	r2, #0
 800ee66:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800ee6a:	6878      	ldr	r0, [r7, #4]
 800ee6c:	f000 f88e 	bl	800ef8c <UART_WaitOnFlagUntilTimeout>
 800ee70:	4603      	mov	r3, r0
 800ee72:	2b00      	cmp	r3, #0
 800ee74:	d022      	beq.n	800eebc <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800ee76:	687b      	ldr	r3, [r7, #4]
 800ee78:	681b      	ldr	r3, [r3, #0]
 800ee7a:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ee7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ee7e:	e853 3f00 	ldrex	r3, [r3]
 800ee82:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800ee84:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ee86:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ee8a:	653b      	str	r3, [r7, #80]	; 0x50
 800ee8c:	687b      	ldr	r3, [r7, #4]
 800ee8e:	681b      	ldr	r3, [r3, #0]
 800ee90:	461a      	mov	r2, r3
 800ee92:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ee94:	647b      	str	r3, [r7, #68]	; 0x44
 800ee96:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ee98:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800ee9a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ee9c:	e841 2300 	strex	r3, r2, [r1]
 800eea0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800eea2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800eea4:	2b00      	cmp	r3, #0
 800eea6:	d1e6      	bne.n	800ee76 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800eea8:	687b      	ldr	r3, [r7, #4]
 800eeaa:	2220      	movs	r2, #32
 800eeac:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 800eeb0:	687b      	ldr	r3, [r7, #4]
 800eeb2:	2200      	movs	r2, #0
 800eeb4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800eeb8:	2303      	movs	r3, #3
 800eeba:	e063      	b.n	800ef84 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800eebc:	687b      	ldr	r3, [r7, #4]
 800eebe:	681b      	ldr	r3, [r3, #0]
 800eec0:	681b      	ldr	r3, [r3, #0]
 800eec2:	f003 0304 	and.w	r3, r3, #4
 800eec6:	2b04      	cmp	r3, #4
 800eec8:	d149      	bne.n	800ef5e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800eeca:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800eece:	9300      	str	r3, [sp, #0]
 800eed0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800eed2:	2200      	movs	r2, #0
 800eed4:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800eed8:	6878      	ldr	r0, [r7, #4]
 800eeda:	f000 f857 	bl	800ef8c <UART_WaitOnFlagUntilTimeout>
 800eede:	4603      	mov	r3, r0
 800eee0:	2b00      	cmp	r3, #0
 800eee2:	d03c      	beq.n	800ef5e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800eee4:	687b      	ldr	r3, [r7, #4]
 800eee6:	681b      	ldr	r3, [r3, #0]
 800eee8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800eeea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eeec:	e853 3f00 	ldrex	r3, [r3]
 800eef0:	623b      	str	r3, [r7, #32]
   return(result);
 800eef2:	6a3b      	ldr	r3, [r7, #32]
 800eef4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800eef8:	64fb      	str	r3, [r7, #76]	; 0x4c
 800eefa:	687b      	ldr	r3, [r7, #4]
 800eefc:	681b      	ldr	r3, [r3, #0]
 800eefe:	461a      	mov	r2, r3
 800ef00:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ef02:	633b      	str	r3, [r7, #48]	; 0x30
 800ef04:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ef06:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800ef08:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ef0a:	e841 2300 	strex	r3, r2, [r1]
 800ef0e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800ef10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ef12:	2b00      	cmp	r3, #0
 800ef14:	d1e6      	bne.n	800eee4 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ef16:	687b      	ldr	r3, [r7, #4]
 800ef18:	681b      	ldr	r3, [r3, #0]
 800ef1a:	3308      	adds	r3, #8
 800ef1c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ef1e:	693b      	ldr	r3, [r7, #16]
 800ef20:	e853 3f00 	ldrex	r3, [r3]
 800ef24:	60fb      	str	r3, [r7, #12]
   return(result);
 800ef26:	68fb      	ldr	r3, [r7, #12]
 800ef28:	f023 0301 	bic.w	r3, r3, #1
 800ef2c:	64bb      	str	r3, [r7, #72]	; 0x48
 800ef2e:	687b      	ldr	r3, [r7, #4]
 800ef30:	681b      	ldr	r3, [r3, #0]
 800ef32:	3308      	adds	r3, #8
 800ef34:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ef36:	61fa      	str	r2, [r7, #28]
 800ef38:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ef3a:	69b9      	ldr	r1, [r7, #24]
 800ef3c:	69fa      	ldr	r2, [r7, #28]
 800ef3e:	e841 2300 	strex	r3, r2, [r1]
 800ef42:	617b      	str	r3, [r7, #20]
   return(result);
 800ef44:	697b      	ldr	r3, [r7, #20]
 800ef46:	2b00      	cmp	r3, #0
 800ef48:	d1e5      	bne.n	800ef16 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800ef4a:	687b      	ldr	r3, [r7, #4]
 800ef4c:	2220      	movs	r2, #32
 800ef4e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800ef52:	687b      	ldr	r3, [r7, #4]
 800ef54:	2200      	movs	r2, #0
 800ef56:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800ef5a:	2303      	movs	r3, #3
 800ef5c:	e012      	b.n	800ef84 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800ef5e:	687b      	ldr	r3, [r7, #4]
 800ef60:	2220      	movs	r2, #32
 800ef62:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800ef66:	687b      	ldr	r3, [r7, #4]
 800ef68:	2220      	movs	r2, #32
 800ef6a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ef6e:	687b      	ldr	r3, [r7, #4]
 800ef70:	2200      	movs	r2, #0
 800ef72:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800ef74:	687b      	ldr	r3, [r7, #4]
 800ef76:	2200      	movs	r2, #0
 800ef78:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 800ef7a:	687b      	ldr	r3, [r7, #4]
 800ef7c:	2200      	movs	r2, #0
 800ef7e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800ef82:	2300      	movs	r3, #0
}
 800ef84:	4618      	mov	r0, r3
 800ef86:	3758      	adds	r7, #88	; 0x58
 800ef88:	46bd      	mov	sp, r7
 800ef8a:	bd80      	pop	{r7, pc}

0800ef8c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800ef8c:	b580      	push	{r7, lr}
 800ef8e:	b084      	sub	sp, #16
 800ef90:	af00      	add	r7, sp, #0
 800ef92:	60f8      	str	r0, [r7, #12]
 800ef94:	60b9      	str	r1, [r7, #8]
 800ef96:	603b      	str	r3, [r7, #0]
 800ef98:	4613      	mov	r3, r2
 800ef9a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ef9c:	e049      	b.n	800f032 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800ef9e:	69bb      	ldr	r3, [r7, #24]
 800efa0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800efa4:	d045      	beq.n	800f032 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800efa6:	f7f5 f987 	bl	80042b8 <HAL_GetTick>
 800efaa:	4602      	mov	r2, r0
 800efac:	683b      	ldr	r3, [r7, #0]
 800efae:	1ad3      	subs	r3, r2, r3
 800efb0:	69ba      	ldr	r2, [r7, #24]
 800efb2:	429a      	cmp	r2, r3
 800efb4:	d302      	bcc.n	800efbc <UART_WaitOnFlagUntilTimeout+0x30>
 800efb6:	69bb      	ldr	r3, [r7, #24]
 800efb8:	2b00      	cmp	r3, #0
 800efba:	d101      	bne.n	800efc0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800efbc:	2303      	movs	r3, #3
 800efbe:	e048      	b.n	800f052 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800efc0:	68fb      	ldr	r3, [r7, #12]
 800efc2:	681b      	ldr	r3, [r3, #0]
 800efc4:	681b      	ldr	r3, [r3, #0]
 800efc6:	f003 0304 	and.w	r3, r3, #4
 800efca:	2b00      	cmp	r3, #0
 800efcc:	d031      	beq.n	800f032 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800efce:	68fb      	ldr	r3, [r7, #12]
 800efd0:	681b      	ldr	r3, [r3, #0]
 800efd2:	69db      	ldr	r3, [r3, #28]
 800efd4:	f003 0308 	and.w	r3, r3, #8
 800efd8:	2b08      	cmp	r3, #8
 800efda:	d110      	bne.n	800effe <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800efdc:	68fb      	ldr	r3, [r7, #12]
 800efde:	681b      	ldr	r3, [r3, #0]
 800efe0:	2208      	movs	r2, #8
 800efe2:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 800efe4:	68f8      	ldr	r0, [r7, #12]
 800efe6:	f000 f839 	bl	800f05c <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 800efea:	68fb      	ldr	r3, [r7, #12]
 800efec:	2208      	movs	r2, #8
 800efee:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 800eff2:	68fb      	ldr	r3, [r7, #12]
 800eff4:	2200      	movs	r2, #0
 800eff6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

           return HAL_ERROR;
 800effa:	2301      	movs	r3, #1
 800effc:	e029      	b.n	800f052 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800effe:	68fb      	ldr	r3, [r7, #12]
 800f000:	681b      	ldr	r3, [r3, #0]
 800f002:	69db      	ldr	r3, [r3, #28]
 800f004:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800f008:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800f00c:	d111      	bne.n	800f032 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800f00e:	68fb      	ldr	r3, [r7, #12]
 800f010:	681b      	ldr	r3, [r3, #0]
 800f012:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800f016:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800f018:	68f8      	ldr	r0, [r7, #12]
 800f01a:	f000 f81f 	bl	800f05c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800f01e:	68fb      	ldr	r3, [r7, #12]
 800f020:	2220      	movs	r2, #32
 800f022:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800f026:	68fb      	ldr	r3, [r7, #12]
 800f028:	2200      	movs	r2, #0
 800f02a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 800f02e:	2303      	movs	r3, #3
 800f030:	e00f      	b.n	800f052 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800f032:	68fb      	ldr	r3, [r7, #12]
 800f034:	681b      	ldr	r3, [r3, #0]
 800f036:	69da      	ldr	r2, [r3, #28]
 800f038:	68bb      	ldr	r3, [r7, #8]
 800f03a:	4013      	ands	r3, r2
 800f03c:	68ba      	ldr	r2, [r7, #8]
 800f03e:	429a      	cmp	r2, r3
 800f040:	bf0c      	ite	eq
 800f042:	2301      	moveq	r3, #1
 800f044:	2300      	movne	r3, #0
 800f046:	b2db      	uxtb	r3, r3
 800f048:	461a      	mov	r2, r3
 800f04a:	79fb      	ldrb	r3, [r7, #7]
 800f04c:	429a      	cmp	r2, r3
 800f04e:	d0a6      	beq.n	800ef9e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800f050:	2300      	movs	r3, #0
}
 800f052:	4618      	mov	r0, r3
 800f054:	3710      	adds	r7, #16
 800f056:	46bd      	mov	sp, r7
 800f058:	bd80      	pop	{r7, pc}
	...

0800f05c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800f05c:	b480      	push	{r7}
 800f05e:	b095      	sub	sp, #84	; 0x54
 800f060:	af00      	add	r7, sp, #0
 800f062:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800f064:	687b      	ldr	r3, [r7, #4]
 800f066:	681b      	ldr	r3, [r3, #0]
 800f068:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f06a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f06c:	e853 3f00 	ldrex	r3, [r3]
 800f070:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800f072:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f074:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800f078:	64fb      	str	r3, [r7, #76]	; 0x4c
 800f07a:	687b      	ldr	r3, [r7, #4]
 800f07c:	681b      	ldr	r3, [r3, #0]
 800f07e:	461a      	mov	r2, r3
 800f080:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f082:	643b      	str	r3, [r7, #64]	; 0x40
 800f084:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f086:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800f088:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800f08a:	e841 2300 	strex	r3, r2, [r1]
 800f08e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800f090:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f092:	2b00      	cmp	r3, #0
 800f094:	d1e6      	bne.n	800f064 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800f096:	687b      	ldr	r3, [r7, #4]
 800f098:	681b      	ldr	r3, [r3, #0]
 800f09a:	3308      	adds	r3, #8
 800f09c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f09e:	6a3b      	ldr	r3, [r7, #32]
 800f0a0:	e853 3f00 	ldrex	r3, [r3]
 800f0a4:	61fb      	str	r3, [r7, #28]
   return(result);
 800f0a6:	69fa      	ldr	r2, [r7, #28]
 800f0a8:	4b1e      	ldr	r3, [pc, #120]	; (800f124 <UART_EndRxTransfer+0xc8>)
 800f0aa:	4013      	ands	r3, r2
 800f0ac:	64bb      	str	r3, [r7, #72]	; 0x48
 800f0ae:	687b      	ldr	r3, [r7, #4]
 800f0b0:	681b      	ldr	r3, [r3, #0]
 800f0b2:	3308      	adds	r3, #8
 800f0b4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800f0b6:	62fa      	str	r2, [r7, #44]	; 0x2c
 800f0b8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f0ba:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800f0bc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f0be:	e841 2300 	strex	r3, r2, [r1]
 800f0c2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800f0c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f0c6:	2b00      	cmp	r3, #0
 800f0c8:	d1e5      	bne.n	800f096 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800f0ca:	687b      	ldr	r3, [r7, #4]
 800f0cc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f0ce:	2b01      	cmp	r3, #1
 800f0d0:	d118      	bne.n	800f104 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800f0d2:	687b      	ldr	r3, [r7, #4]
 800f0d4:	681b      	ldr	r3, [r3, #0]
 800f0d6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f0d8:	68fb      	ldr	r3, [r7, #12]
 800f0da:	e853 3f00 	ldrex	r3, [r3]
 800f0de:	60bb      	str	r3, [r7, #8]
   return(result);
 800f0e0:	68bb      	ldr	r3, [r7, #8]
 800f0e2:	f023 0310 	bic.w	r3, r3, #16
 800f0e6:	647b      	str	r3, [r7, #68]	; 0x44
 800f0e8:	687b      	ldr	r3, [r7, #4]
 800f0ea:	681b      	ldr	r3, [r3, #0]
 800f0ec:	461a      	mov	r2, r3
 800f0ee:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f0f0:	61bb      	str	r3, [r7, #24]
 800f0f2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f0f4:	6979      	ldr	r1, [r7, #20]
 800f0f6:	69ba      	ldr	r2, [r7, #24]
 800f0f8:	e841 2300 	strex	r3, r2, [r1]
 800f0fc:	613b      	str	r3, [r7, #16]
   return(result);
 800f0fe:	693b      	ldr	r3, [r7, #16]
 800f100:	2b00      	cmp	r3, #0
 800f102:	d1e6      	bne.n	800f0d2 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800f104:	687b      	ldr	r3, [r7, #4]
 800f106:	2220      	movs	r2, #32
 800f108:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f10c:	687b      	ldr	r3, [r7, #4]
 800f10e:	2200      	movs	r2, #0
 800f110:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800f112:	687b      	ldr	r3, [r7, #4]
 800f114:	2200      	movs	r2, #0
 800f116:	675a      	str	r2, [r3, #116]	; 0x74
}
 800f118:	bf00      	nop
 800f11a:	3754      	adds	r7, #84	; 0x54
 800f11c:	46bd      	mov	sp, r7
 800f11e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f122:	4770      	bx	lr
 800f124:	effffffe 	.word	0xeffffffe

0800f128 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800f128:	b480      	push	{r7}
 800f12a:	b085      	sub	sp, #20
 800f12c:	af00      	add	r7, sp, #0
 800f12e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800f130:	687b      	ldr	r3, [r7, #4]
 800f132:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800f136:	2b01      	cmp	r3, #1
 800f138:	d101      	bne.n	800f13e <HAL_UARTEx_DisableFifoMode+0x16>
 800f13a:	2302      	movs	r3, #2
 800f13c:	e027      	b.n	800f18e <HAL_UARTEx_DisableFifoMode+0x66>
 800f13e:	687b      	ldr	r3, [r7, #4]
 800f140:	2201      	movs	r2, #1
 800f142:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800f146:	687b      	ldr	r3, [r7, #4]
 800f148:	2224      	movs	r2, #36	; 0x24
 800f14a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800f14e:	687b      	ldr	r3, [r7, #4]
 800f150:	681b      	ldr	r3, [r3, #0]
 800f152:	681b      	ldr	r3, [r3, #0]
 800f154:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800f156:	687b      	ldr	r3, [r7, #4]
 800f158:	681b      	ldr	r3, [r3, #0]
 800f15a:	681a      	ldr	r2, [r3, #0]
 800f15c:	687b      	ldr	r3, [r7, #4]
 800f15e:	681b      	ldr	r3, [r3, #0]
 800f160:	f022 0201 	bic.w	r2, r2, #1
 800f164:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800f166:	68fb      	ldr	r3, [r7, #12]
 800f168:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800f16c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800f16e:	687b      	ldr	r3, [r7, #4]
 800f170:	2200      	movs	r2, #0
 800f172:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800f174:	687b      	ldr	r3, [r7, #4]
 800f176:	681b      	ldr	r3, [r3, #0]
 800f178:	68fa      	ldr	r2, [r7, #12]
 800f17a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800f17c:	687b      	ldr	r3, [r7, #4]
 800f17e:	2220      	movs	r2, #32
 800f180:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800f184:	687b      	ldr	r3, [r7, #4]
 800f186:	2200      	movs	r2, #0
 800f188:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800f18c:	2300      	movs	r3, #0
}
 800f18e:	4618      	mov	r0, r3
 800f190:	3714      	adds	r7, #20
 800f192:	46bd      	mov	sp, r7
 800f194:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f198:	4770      	bx	lr

0800f19a <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800f19a:	b580      	push	{r7, lr}
 800f19c:	b084      	sub	sp, #16
 800f19e:	af00      	add	r7, sp, #0
 800f1a0:	6078      	str	r0, [r7, #4]
 800f1a2:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800f1a4:	687b      	ldr	r3, [r7, #4]
 800f1a6:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800f1aa:	2b01      	cmp	r3, #1
 800f1ac:	d101      	bne.n	800f1b2 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800f1ae:	2302      	movs	r3, #2
 800f1b0:	e02d      	b.n	800f20e <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800f1b2:	687b      	ldr	r3, [r7, #4]
 800f1b4:	2201      	movs	r2, #1
 800f1b6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800f1ba:	687b      	ldr	r3, [r7, #4]
 800f1bc:	2224      	movs	r2, #36	; 0x24
 800f1be:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800f1c2:	687b      	ldr	r3, [r7, #4]
 800f1c4:	681b      	ldr	r3, [r3, #0]
 800f1c6:	681b      	ldr	r3, [r3, #0]
 800f1c8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800f1ca:	687b      	ldr	r3, [r7, #4]
 800f1cc:	681b      	ldr	r3, [r3, #0]
 800f1ce:	681a      	ldr	r2, [r3, #0]
 800f1d0:	687b      	ldr	r3, [r7, #4]
 800f1d2:	681b      	ldr	r3, [r3, #0]
 800f1d4:	f022 0201 	bic.w	r2, r2, #1
 800f1d8:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800f1da:	687b      	ldr	r3, [r7, #4]
 800f1dc:	681b      	ldr	r3, [r3, #0]
 800f1de:	689b      	ldr	r3, [r3, #8]
 800f1e0:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800f1e4:	687b      	ldr	r3, [r7, #4]
 800f1e6:	681b      	ldr	r3, [r3, #0]
 800f1e8:	683a      	ldr	r2, [r7, #0]
 800f1ea:	430a      	orrs	r2, r1
 800f1ec:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800f1ee:	6878      	ldr	r0, [r7, #4]
 800f1f0:	f000 f850 	bl	800f294 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800f1f4:	687b      	ldr	r3, [r7, #4]
 800f1f6:	681b      	ldr	r3, [r3, #0]
 800f1f8:	68fa      	ldr	r2, [r7, #12]
 800f1fa:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800f1fc:	687b      	ldr	r3, [r7, #4]
 800f1fe:	2220      	movs	r2, #32
 800f200:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800f204:	687b      	ldr	r3, [r7, #4]
 800f206:	2200      	movs	r2, #0
 800f208:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800f20c:	2300      	movs	r3, #0
}
 800f20e:	4618      	mov	r0, r3
 800f210:	3710      	adds	r7, #16
 800f212:	46bd      	mov	sp, r7
 800f214:	bd80      	pop	{r7, pc}

0800f216 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800f216:	b580      	push	{r7, lr}
 800f218:	b084      	sub	sp, #16
 800f21a:	af00      	add	r7, sp, #0
 800f21c:	6078      	str	r0, [r7, #4]
 800f21e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800f220:	687b      	ldr	r3, [r7, #4]
 800f222:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800f226:	2b01      	cmp	r3, #1
 800f228:	d101      	bne.n	800f22e <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800f22a:	2302      	movs	r3, #2
 800f22c:	e02d      	b.n	800f28a <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800f22e:	687b      	ldr	r3, [r7, #4]
 800f230:	2201      	movs	r2, #1
 800f232:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800f236:	687b      	ldr	r3, [r7, #4]
 800f238:	2224      	movs	r2, #36	; 0x24
 800f23a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800f23e:	687b      	ldr	r3, [r7, #4]
 800f240:	681b      	ldr	r3, [r3, #0]
 800f242:	681b      	ldr	r3, [r3, #0]
 800f244:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800f246:	687b      	ldr	r3, [r7, #4]
 800f248:	681b      	ldr	r3, [r3, #0]
 800f24a:	681a      	ldr	r2, [r3, #0]
 800f24c:	687b      	ldr	r3, [r7, #4]
 800f24e:	681b      	ldr	r3, [r3, #0]
 800f250:	f022 0201 	bic.w	r2, r2, #1
 800f254:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800f256:	687b      	ldr	r3, [r7, #4]
 800f258:	681b      	ldr	r3, [r3, #0]
 800f25a:	689b      	ldr	r3, [r3, #8]
 800f25c:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800f260:	687b      	ldr	r3, [r7, #4]
 800f262:	681b      	ldr	r3, [r3, #0]
 800f264:	683a      	ldr	r2, [r7, #0]
 800f266:	430a      	orrs	r2, r1
 800f268:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800f26a:	6878      	ldr	r0, [r7, #4]
 800f26c:	f000 f812 	bl	800f294 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800f270:	687b      	ldr	r3, [r7, #4]
 800f272:	681b      	ldr	r3, [r3, #0]
 800f274:	68fa      	ldr	r2, [r7, #12]
 800f276:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800f278:	687b      	ldr	r3, [r7, #4]
 800f27a:	2220      	movs	r2, #32
 800f27c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800f280:	687b      	ldr	r3, [r7, #4]
 800f282:	2200      	movs	r2, #0
 800f284:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800f288:	2300      	movs	r3, #0
}
 800f28a:	4618      	mov	r0, r3
 800f28c:	3710      	adds	r7, #16
 800f28e:	46bd      	mov	sp, r7
 800f290:	bd80      	pop	{r7, pc}
	...

0800f294 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800f294:	b480      	push	{r7}
 800f296:	b085      	sub	sp, #20
 800f298:	af00      	add	r7, sp, #0
 800f29a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800f29c:	687b      	ldr	r3, [r7, #4]
 800f29e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800f2a0:	2b00      	cmp	r3, #0
 800f2a2:	d108      	bne.n	800f2b6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800f2a4:	687b      	ldr	r3, [r7, #4]
 800f2a6:	2201      	movs	r2, #1
 800f2a8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800f2ac:	687b      	ldr	r3, [r7, #4]
 800f2ae:	2201      	movs	r2, #1
 800f2b0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800f2b4:	e031      	b.n	800f31a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800f2b6:	2310      	movs	r3, #16
 800f2b8:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800f2ba:	2310      	movs	r3, #16
 800f2bc:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800f2be:	687b      	ldr	r3, [r7, #4]
 800f2c0:	681b      	ldr	r3, [r3, #0]
 800f2c2:	689b      	ldr	r3, [r3, #8]
 800f2c4:	0e5b      	lsrs	r3, r3, #25
 800f2c6:	b2db      	uxtb	r3, r3
 800f2c8:	f003 0307 	and.w	r3, r3, #7
 800f2cc:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800f2ce:	687b      	ldr	r3, [r7, #4]
 800f2d0:	681b      	ldr	r3, [r3, #0]
 800f2d2:	689b      	ldr	r3, [r3, #8]
 800f2d4:	0f5b      	lsrs	r3, r3, #29
 800f2d6:	b2db      	uxtb	r3, r3
 800f2d8:	f003 0307 	and.w	r3, r3, #7
 800f2dc:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800f2de:	7bbb      	ldrb	r3, [r7, #14]
 800f2e0:	7b3a      	ldrb	r2, [r7, #12]
 800f2e2:	4911      	ldr	r1, [pc, #68]	; (800f328 <UARTEx_SetNbDataToProcess+0x94>)
 800f2e4:	5c8a      	ldrb	r2, [r1, r2]
 800f2e6:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800f2ea:	7b3a      	ldrb	r2, [r7, #12]
 800f2ec:	490f      	ldr	r1, [pc, #60]	; (800f32c <UARTEx_SetNbDataToProcess+0x98>)
 800f2ee:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800f2f0:	fb93 f3f2 	sdiv	r3, r3, r2
 800f2f4:	b29a      	uxth	r2, r3
 800f2f6:	687b      	ldr	r3, [r7, #4]
 800f2f8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800f2fc:	7bfb      	ldrb	r3, [r7, #15]
 800f2fe:	7b7a      	ldrb	r2, [r7, #13]
 800f300:	4909      	ldr	r1, [pc, #36]	; (800f328 <UARTEx_SetNbDataToProcess+0x94>)
 800f302:	5c8a      	ldrb	r2, [r1, r2]
 800f304:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800f308:	7b7a      	ldrb	r2, [r7, #13]
 800f30a:	4908      	ldr	r1, [pc, #32]	; (800f32c <UARTEx_SetNbDataToProcess+0x98>)
 800f30c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800f30e:	fb93 f3f2 	sdiv	r3, r3, r2
 800f312:	b29a      	uxth	r2, r3
 800f314:	687b      	ldr	r3, [r7, #4]
 800f316:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800f31a:	bf00      	nop
 800f31c:	3714      	adds	r7, #20
 800f31e:	46bd      	mov	sp, r7
 800f320:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f324:	4770      	bx	lr
 800f326:	bf00      	nop
 800f328:	08020d30 	.word	0x08020d30
 800f32c:	08020d38 	.word	0x08020d38

0800f330 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 800f330:	b580      	push	{r7, lr}
 800f332:	b084      	sub	sp, #16
 800f334:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 192;
 800f336:	4b8d      	ldr	r3, [pc, #564]	; (800f56c <MX_LWIP_Init+0x23c>)
 800f338:	22c0      	movs	r2, #192	; 0xc0
 800f33a:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 168;
 800f33c:	4b8b      	ldr	r3, [pc, #556]	; (800f56c <MX_LWIP_Init+0x23c>)
 800f33e:	22a8      	movs	r2, #168	; 0xa8
 800f340:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 1;
 800f342:	4b8a      	ldr	r3, [pc, #552]	; (800f56c <MX_LWIP_Init+0x23c>)
 800f344:	2201      	movs	r2, #1
 800f346:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 10;
 800f348:	4b88      	ldr	r3, [pc, #544]	; (800f56c <MX_LWIP_Init+0x23c>)
 800f34a:	220a      	movs	r2, #10
 800f34c:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 800f34e:	4b88      	ldr	r3, [pc, #544]	; (800f570 <MX_LWIP_Init+0x240>)
 800f350:	22ff      	movs	r2, #255	; 0xff
 800f352:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 800f354:	4b86      	ldr	r3, [pc, #536]	; (800f570 <MX_LWIP_Init+0x240>)
 800f356:	22ff      	movs	r2, #255	; 0xff
 800f358:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 0;
 800f35a:	4b85      	ldr	r3, [pc, #532]	; (800f570 <MX_LWIP_Init+0x240>)
 800f35c:	2200      	movs	r2, #0
 800f35e:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 800f360:	4b83      	ldr	r3, [pc, #524]	; (800f570 <MX_LWIP_Init+0x240>)
 800f362:	2200      	movs	r2, #0
 800f364:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 192;
 800f366:	4b83      	ldr	r3, [pc, #524]	; (800f574 <MX_LWIP_Init+0x244>)
 800f368:	22c0      	movs	r2, #192	; 0xc0
 800f36a:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 168;
 800f36c:	4b81      	ldr	r3, [pc, #516]	; (800f574 <MX_LWIP_Init+0x244>)
 800f36e:	22a8      	movs	r2, #168	; 0xa8
 800f370:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 1;
 800f372:	4b80      	ldr	r3, [pc, #512]	; (800f574 <MX_LWIP_Init+0x244>)
 800f374:	2201      	movs	r2, #1
 800f376:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 1;
 800f378:	4b7e      	ldr	r3, [pc, #504]	; (800f574 <MX_LWIP_Init+0x244>)
 800f37a:	2201      	movs	r2, #1
 800f37c:	70da      	strb	r2, [r3, #3]

/* USER CODE BEGIN IP_ADDRESSES */
/* USER CODE END IP_ADDRESSES */

  /* Initilialize the LwIP stack without RTOS */
  lwip_init();
 800f37e:	f000 fddf 	bl	800ff40 <lwip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 800f382:	4b7a      	ldr	r3, [pc, #488]	; (800f56c <MX_LWIP_Init+0x23c>)
 800f384:	781b      	ldrb	r3, [r3, #0]
 800f386:	061a      	lsls	r2, r3, #24
 800f388:	4b78      	ldr	r3, [pc, #480]	; (800f56c <MX_LWIP_Init+0x23c>)
 800f38a:	785b      	ldrb	r3, [r3, #1]
 800f38c:	041b      	lsls	r3, r3, #16
 800f38e:	431a      	orrs	r2, r3
 800f390:	4b76      	ldr	r3, [pc, #472]	; (800f56c <MX_LWIP_Init+0x23c>)
 800f392:	789b      	ldrb	r3, [r3, #2]
 800f394:	021b      	lsls	r3, r3, #8
 800f396:	4313      	orrs	r3, r2
 800f398:	4a74      	ldr	r2, [pc, #464]	; (800f56c <MX_LWIP_Init+0x23c>)
 800f39a:	78d2      	ldrb	r2, [r2, #3]
 800f39c:	4313      	orrs	r3, r2
 800f39e:	061a      	lsls	r2, r3, #24
 800f3a0:	4b72      	ldr	r3, [pc, #456]	; (800f56c <MX_LWIP_Init+0x23c>)
 800f3a2:	781b      	ldrb	r3, [r3, #0]
 800f3a4:	0619      	lsls	r1, r3, #24
 800f3a6:	4b71      	ldr	r3, [pc, #452]	; (800f56c <MX_LWIP_Init+0x23c>)
 800f3a8:	785b      	ldrb	r3, [r3, #1]
 800f3aa:	041b      	lsls	r3, r3, #16
 800f3ac:	4319      	orrs	r1, r3
 800f3ae:	4b6f      	ldr	r3, [pc, #444]	; (800f56c <MX_LWIP_Init+0x23c>)
 800f3b0:	789b      	ldrb	r3, [r3, #2]
 800f3b2:	021b      	lsls	r3, r3, #8
 800f3b4:	430b      	orrs	r3, r1
 800f3b6:	496d      	ldr	r1, [pc, #436]	; (800f56c <MX_LWIP_Init+0x23c>)
 800f3b8:	78c9      	ldrb	r1, [r1, #3]
 800f3ba:	430b      	orrs	r3, r1
 800f3bc:	021b      	lsls	r3, r3, #8
 800f3be:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800f3c2:	431a      	orrs	r2, r3
 800f3c4:	4b69      	ldr	r3, [pc, #420]	; (800f56c <MX_LWIP_Init+0x23c>)
 800f3c6:	781b      	ldrb	r3, [r3, #0]
 800f3c8:	0619      	lsls	r1, r3, #24
 800f3ca:	4b68      	ldr	r3, [pc, #416]	; (800f56c <MX_LWIP_Init+0x23c>)
 800f3cc:	785b      	ldrb	r3, [r3, #1]
 800f3ce:	041b      	lsls	r3, r3, #16
 800f3d0:	4319      	orrs	r1, r3
 800f3d2:	4b66      	ldr	r3, [pc, #408]	; (800f56c <MX_LWIP_Init+0x23c>)
 800f3d4:	789b      	ldrb	r3, [r3, #2]
 800f3d6:	021b      	lsls	r3, r3, #8
 800f3d8:	430b      	orrs	r3, r1
 800f3da:	4964      	ldr	r1, [pc, #400]	; (800f56c <MX_LWIP_Init+0x23c>)
 800f3dc:	78c9      	ldrb	r1, [r1, #3]
 800f3de:	430b      	orrs	r3, r1
 800f3e0:	0a1b      	lsrs	r3, r3, #8
 800f3e2:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800f3e6:	431a      	orrs	r2, r3
 800f3e8:	4b60      	ldr	r3, [pc, #384]	; (800f56c <MX_LWIP_Init+0x23c>)
 800f3ea:	781b      	ldrb	r3, [r3, #0]
 800f3ec:	0619      	lsls	r1, r3, #24
 800f3ee:	4b5f      	ldr	r3, [pc, #380]	; (800f56c <MX_LWIP_Init+0x23c>)
 800f3f0:	785b      	ldrb	r3, [r3, #1]
 800f3f2:	041b      	lsls	r3, r3, #16
 800f3f4:	4319      	orrs	r1, r3
 800f3f6:	4b5d      	ldr	r3, [pc, #372]	; (800f56c <MX_LWIP_Init+0x23c>)
 800f3f8:	789b      	ldrb	r3, [r3, #2]
 800f3fa:	021b      	lsls	r3, r3, #8
 800f3fc:	430b      	orrs	r3, r1
 800f3fe:	495b      	ldr	r1, [pc, #364]	; (800f56c <MX_LWIP_Init+0x23c>)
 800f400:	78c9      	ldrb	r1, [r1, #3]
 800f402:	430b      	orrs	r3, r1
 800f404:	0e1b      	lsrs	r3, r3, #24
 800f406:	4313      	orrs	r3, r2
 800f408:	4a5b      	ldr	r2, [pc, #364]	; (800f578 <MX_LWIP_Init+0x248>)
 800f40a:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 800f40c:	4b58      	ldr	r3, [pc, #352]	; (800f570 <MX_LWIP_Init+0x240>)
 800f40e:	781b      	ldrb	r3, [r3, #0]
 800f410:	061a      	lsls	r2, r3, #24
 800f412:	4b57      	ldr	r3, [pc, #348]	; (800f570 <MX_LWIP_Init+0x240>)
 800f414:	785b      	ldrb	r3, [r3, #1]
 800f416:	041b      	lsls	r3, r3, #16
 800f418:	431a      	orrs	r2, r3
 800f41a:	4b55      	ldr	r3, [pc, #340]	; (800f570 <MX_LWIP_Init+0x240>)
 800f41c:	789b      	ldrb	r3, [r3, #2]
 800f41e:	021b      	lsls	r3, r3, #8
 800f420:	4313      	orrs	r3, r2
 800f422:	4a53      	ldr	r2, [pc, #332]	; (800f570 <MX_LWIP_Init+0x240>)
 800f424:	78d2      	ldrb	r2, [r2, #3]
 800f426:	4313      	orrs	r3, r2
 800f428:	061a      	lsls	r2, r3, #24
 800f42a:	4b51      	ldr	r3, [pc, #324]	; (800f570 <MX_LWIP_Init+0x240>)
 800f42c:	781b      	ldrb	r3, [r3, #0]
 800f42e:	0619      	lsls	r1, r3, #24
 800f430:	4b4f      	ldr	r3, [pc, #316]	; (800f570 <MX_LWIP_Init+0x240>)
 800f432:	785b      	ldrb	r3, [r3, #1]
 800f434:	041b      	lsls	r3, r3, #16
 800f436:	4319      	orrs	r1, r3
 800f438:	4b4d      	ldr	r3, [pc, #308]	; (800f570 <MX_LWIP_Init+0x240>)
 800f43a:	789b      	ldrb	r3, [r3, #2]
 800f43c:	021b      	lsls	r3, r3, #8
 800f43e:	430b      	orrs	r3, r1
 800f440:	494b      	ldr	r1, [pc, #300]	; (800f570 <MX_LWIP_Init+0x240>)
 800f442:	78c9      	ldrb	r1, [r1, #3]
 800f444:	430b      	orrs	r3, r1
 800f446:	021b      	lsls	r3, r3, #8
 800f448:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800f44c:	431a      	orrs	r2, r3
 800f44e:	4b48      	ldr	r3, [pc, #288]	; (800f570 <MX_LWIP_Init+0x240>)
 800f450:	781b      	ldrb	r3, [r3, #0]
 800f452:	0619      	lsls	r1, r3, #24
 800f454:	4b46      	ldr	r3, [pc, #280]	; (800f570 <MX_LWIP_Init+0x240>)
 800f456:	785b      	ldrb	r3, [r3, #1]
 800f458:	041b      	lsls	r3, r3, #16
 800f45a:	4319      	orrs	r1, r3
 800f45c:	4b44      	ldr	r3, [pc, #272]	; (800f570 <MX_LWIP_Init+0x240>)
 800f45e:	789b      	ldrb	r3, [r3, #2]
 800f460:	021b      	lsls	r3, r3, #8
 800f462:	430b      	orrs	r3, r1
 800f464:	4942      	ldr	r1, [pc, #264]	; (800f570 <MX_LWIP_Init+0x240>)
 800f466:	78c9      	ldrb	r1, [r1, #3]
 800f468:	430b      	orrs	r3, r1
 800f46a:	0a1b      	lsrs	r3, r3, #8
 800f46c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800f470:	431a      	orrs	r2, r3
 800f472:	4b3f      	ldr	r3, [pc, #252]	; (800f570 <MX_LWIP_Init+0x240>)
 800f474:	781b      	ldrb	r3, [r3, #0]
 800f476:	0619      	lsls	r1, r3, #24
 800f478:	4b3d      	ldr	r3, [pc, #244]	; (800f570 <MX_LWIP_Init+0x240>)
 800f47a:	785b      	ldrb	r3, [r3, #1]
 800f47c:	041b      	lsls	r3, r3, #16
 800f47e:	4319      	orrs	r1, r3
 800f480:	4b3b      	ldr	r3, [pc, #236]	; (800f570 <MX_LWIP_Init+0x240>)
 800f482:	789b      	ldrb	r3, [r3, #2]
 800f484:	021b      	lsls	r3, r3, #8
 800f486:	430b      	orrs	r3, r1
 800f488:	4939      	ldr	r1, [pc, #228]	; (800f570 <MX_LWIP_Init+0x240>)
 800f48a:	78c9      	ldrb	r1, [r1, #3]
 800f48c:	430b      	orrs	r3, r1
 800f48e:	0e1b      	lsrs	r3, r3, #24
 800f490:	4313      	orrs	r3, r2
 800f492:	4a3a      	ldr	r2, [pc, #232]	; (800f57c <MX_LWIP_Init+0x24c>)
 800f494:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 800f496:	4b37      	ldr	r3, [pc, #220]	; (800f574 <MX_LWIP_Init+0x244>)
 800f498:	781b      	ldrb	r3, [r3, #0]
 800f49a:	061a      	lsls	r2, r3, #24
 800f49c:	4b35      	ldr	r3, [pc, #212]	; (800f574 <MX_LWIP_Init+0x244>)
 800f49e:	785b      	ldrb	r3, [r3, #1]
 800f4a0:	041b      	lsls	r3, r3, #16
 800f4a2:	431a      	orrs	r2, r3
 800f4a4:	4b33      	ldr	r3, [pc, #204]	; (800f574 <MX_LWIP_Init+0x244>)
 800f4a6:	789b      	ldrb	r3, [r3, #2]
 800f4a8:	021b      	lsls	r3, r3, #8
 800f4aa:	4313      	orrs	r3, r2
 800f4ac:	4a31      	ldr	r2, [pc, #196]	; (800f574 <MX_LWIP_Init+0x244>)
 800f4ae:	78d2      	ldrb	r2, [r2, #3]
 800f4b0:	4313      	orrs	r3, r2
 800f4b2:	061a      	lsls	r2, r3, #24
 800f4b4:	4b2f      	ldr	r3, [pc, #188]	; (800f574 <MX_LWIP_Init+0x244>)
 800f4b6:	781b      	ldrb	r3, [r3, #0]
 800f4b8:	0619      	lsls	r1, r3, #24
 800f4ba:	4b2e      	ldr	r3, [pc, #184]	; (800f574 <MX_LWIP_Init+0x244>)
 800f4bc:	785b      	ldrb	r3, [r3, #1]
 800f4be:	041b      	lsls	r3, r3, #16
 800f4c0:	4319      	orrs	r1, r3
 800f4c2:	4b2c      	ldr	r3, [pc, #176]	; (800f574 <MX_LWIP_Init+0x244>)
 800f4c4:	789b      	ldrb	r3, [r3, #2]
 800f4c6:	021b      	lsls	r3, r3, #8
 800f4c8:	430b      	orrs	r3, r1
 800f4ca:	492a      	ldr	r1, [pc, #168]	; (800f574 <MX_LWIP_Init+0x244>)
 800f4cc:	78c9      	ldrb	r1, [r1, #3]
 800f4ce:	430b      	orrs	r3, r1
 800f4d0:	021b      	lsls	r3, r3, #8
 800f4d2:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800f4d6:	431a      	orrs	r2, r3
 800f4d8:	4b26      	ldr	r3, [pc, #152]	; (800f574 <MX_LWIP_Init+0x244>)
 800f4da:	781b      	ldrb	r3, [r3, #0]
 800f4dc:	0619      	lsls	r1, r3, #24
 800f4de:	4b25      	ldr	r3, [pc, #148]	; (800f574 <MX_LWIP_Init+0x244>)
 800f4e0:	785b      	ldrb	r3, [r3, #1]
 800f4e2:	041b      	lsls	r3, r3, #16
 800f4e4:	4319      	orrs	r1, r3
 800f4e6:	4b23      	ldr	r3, [pc, #140]	; (800f574 <MX_LWIP_Init+0x244>)
 800f4e8:	789b      	ldrb	r3, [r3, #2]
 800f4ea:	021b      	lsls	r3, r3, #8
 800f4ec:	430b      	orrs	r3, r1
 800f4ee:	4921      	ldr	r1, [pc, #132]	; (800f574 <MX_LWIP_Init+0x244>)
 800f4f0:	78c9      	ldrb	r1, [r1, #3]
 800f4f2:	430b      	orrs	r3, r1
 800f4f4:	0a1b      	lsrs	r3, r3, #8
 800f4f6:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800f4fa:	431a      	orrs	r2, r3
 800f4fc:	4b1d      	ldr	r3, [pc, #116]	; (800f574 <MX_LWIP_Init+0x244>)
 800f4fe:	781b      	ldrb	r3, [r3, #0]
 800f500:	0619      	lsls	r1, r3, #24
 800f502:	4b1c      	ldr	r3, [pc, #112]	; (800f574 <MX_LWIP_Init+0x244>)
 800f504:	785b      	ldrb	r3, [r3, #1]
 800f506:	041b      	lsls	r3, r3, #16
 800f508:	4319      	orrs	r1, r3
 800f50a:	4b1a      	ldr	r3, [pc, #104]	; (800f574 <MX_LWIP_Init+0x244>)
 800f50c:	789b      	ldrb	r3, [r3, #2]
 800f50e:	021b      	lsls	r3, r3, #8
 800f510:	430b      	orrs	r3, r1
 800f512:	4918      	ldr	r1, [pc, #96]	; (800f574 <MX_LWIP_Init+0x244>)
 800f514:	78c9      	ldrb	r1, [r1, #3]
 800f516:	430b      	orrs	r3, r1
 800f518:	0e1b      	lsrs	r3, r3, #24
 800f51a:	4313      	orrs	r3, r2
 800f51c:	4a18      	ldr	r2, [pc, #96]	; (800f580 <MX_LWIP_Init+0x250>)
 800f51e:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) without RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &ethernet_input);
 800f520:	4b18      	ldr	r3, [pc, #96]	; (800f584 <MX_LWIP_Init+0x254>)
 800f522:	9302      	str	r3, [sp, #8]
 800f524:	4b18      	ldr	r3, [pc, #96]	; (800f588 <MX_LWIP_Init+0x258>)
 800f526:	9301      	str	r3, [sp, #4]
 800f528:	2300      	movs	r3, #0
 800f52a:	9300      	str	r3, [sp, #0]
 800f52c:	4b14      	ldr	r3, [pc, #80]	; (800f580 <MX_LWIP_Init+0x250>)
 800f52e:	4a13      	ldr	r2, [pc, #76]	; (800f57c <MX_LWIP_Init+0x24c>)
 800f530:	4911      	ldr	r1, [pc, #68]	; (800f578 <MX_LWIP_Init+0x248>)
 800f532:	4816      	ldr	r0, [pc, #88]	; (800f58c <MX_LWIP_Init+0x25c>)
 800f534:	f001 f9da 	bl	80108ec <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 800f538:	4814      	ldr	r0, [pc, #80]	; (800f58c <MX_LWIP_Init+0x25c>)
 800f53a:	f001 fb89 	bl	8010c50 <netif_set_default>

  if (netif_is_link_up(&gnetif))
 800f53e:	4b13      	ldr	r3, [pc, #76]	; (800f58c <MX_LWIP_Init+0x25c>)
 800f540:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800f544:	089b      	lsrs	r3, r3, #2
 800f546:	f003 0301 	and.w	r3, r3, #1
 800f54a:	b2db      	uxtb	r3, r3
 800f54c:	2b00      	cmp	r3, #0
 800f54e:	d003      	beq.n	800f558 <MX_LWIP_Init+0x228>
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 800f550:	480e      	ldr	r0, [pc, #56]	; (800f58c <MX_LWIP_Init+0x25c>)
 800f552:	f001 fb8d 	bl	8010c70 <netif_set_up>
 800f556:	e002      	b.n	800f55e <MX_LWIP_Init+0x22e>
  }
  else
  {
    /* When the netif link is down this function must be called */
    netif_set_down(&gnetif);
 800f558:	480c      	ldr	r0, [pc, #48]	; (800f58c <MX_LWIP_Init+0x25c>)
 800f55a:	f001 fbf5 	bl	8010d48 <netif_set_down>
  }

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernet_link_status_updated);
 800f55e:	490c      	ldr	r1, [pc, #48]	; (800f590 <MX_LWIP_Init+0x260>)
 800f560:	480a      	ldr	r0, [pc, #40]	; (800f58c <MX_LWIP_Init+0x25c>)
 800f562:	f001 fc87 	bl	8010e74 <netif_set_link_callback>
  /* Create the Ethernet link handler thread */

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 800f566:	bf00      	nop
 800f568:	46bd      	mov	sp, r7
 800f56a:	bd80      	pop	{r7, pc}
 800f56c:	200007b4 	.word	0x200007b4
 800f570:	200007b8 	.word	0x200007b8
 800f574:	200007bc 	.word	0x200007bc
 800f578:	200007a8 	.word	0x200007a8
 800f57c:	200007ac 	.word	0x200007ac
 800f580:	200007b0 	.word	0x200007b0
 800f584:	0801a695 	.word	0x0801a695
 800f588:	0800f84d 	.word	0x0800f84d
 800f58c:	20000774 	.word	0x20000774
 800f590:	0800f595 	.word	0x0800f595

0800f594 <ethernet_link_status_updated>:
  * @brief  Notify the User about the network interface config status
  * @param  netif: the network interface
  * @retval None
  */
static void ethernet_link_status_updated(struct netif *netif)
{
 800f594:	b480      	push	{r7}
 800f596:	b083      	sub	sp, #12
 800f598:	af00      	add	r7, sp, #0
 800f59a:	6078      	str	r0, [r7, #4]
  else /* netif is down */
  {
/* USER CODE BEGIN 6 */
/* USER CODE END 6 */
  }
}
 800f59c:	bf00      	nop
 800f59e:	370c      	adds	r7, #12
 800f5a0:	46bd      	mov	sp, r7
 800f5a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5a6:	4770      	bx	lr

0800f5a8 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 800f5a8:	b580      	push	{r7, lr}
 800f5aa:	b084      	sub	sp, #16
 800f5ac:	af00      	add	r7, sp, #0
 800f5ae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_eth_init_status = HAL_OK;
 800f5b0:	2300      	movs	r3, #0
 800f5b2:	73fb      	strb	r3, [r7, #15]
  /* Start ETH HAL Init */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 800f5b4:	4b3f      	ldr	r3, [pc, #252]	; (800f6b4 <low_level_init+0x10c>)
 800f5b6:	4a40      	ldr	r2, [pc, #256]	; (800f6b8 <low_level_init+0x110>)
 800f5b8:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 800f5ba:	2300      	movs	r3, #0
 800f5bc:	723b      	strb	r3, [r7, #8]
  MACAddr[1] = 0x80;
 800f5be:	2380      	movs	r3, #128	; 0x80
 800f5c0:	727b      	strb	r3, [r7, #9]
  MACAddr[2] = 0xE1;
 800f5c2:	23e1      	movs	r3, #225	; 0xe1
 800f5c4:	72bb      	strb	r3, [r7, #10]
  MACAddr[3] = 0x00;
 800f5c6:	2300      	movs	r3, #0
 800f5c8:	72fb      	strb	r3, [r7, #11]
  MACAddr[4] = 0x00;
 800f5ca:	2300      	movs	r3, #0
 800f5cc:	733b      	strb	r3, [r7, #12]
  MACAddr[5] = 0x00;
 800f5ce:	2300      	movs	r3, #0
 800f5d0:	737b      	strb	r3, [r7, #13]
  heth.Init.MACAddr = &MACAddr[0];
 800f5d2:	4a38      	ldr	r2, [pc, #224]	; (800f6b4 <low_level_init+0x10c>)
 800f5d4:	f107 0308 	add.w	r3, r7, #8
 800f5d8:	6053      	str	r3, [r2, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 800f5da:	4b36      	ldr	r3, [pc, #216]	; (800f6b4 <low_level_init+0x10c>)
 800f5dc:	2201      	movs	r2, #1
 800f5de:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 800f5e0:	4b34      	ldr	r3, [pc, #208]	; (800f6b4 <low_level_init+0x10c>)
 800f5e2:	4a36      	ldr	r2, [pc, #216]	; (800f6bc <low_level_init+0x114>)
 800f5e4:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 800f5e6:	4b33      	ldr	r3, [pc, #204]	; (800f6b4 <low_level_init+0x10c>)
 800f5e8:	4a35      	ldr	r2, [pc, #212]	; (800f6c0 <low_level_init+0x118>)
 800f5ea:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1536;
 800f5ec:	4b31      	ldr	r3, [pc, #196]	; (800f6b4 <low_level_init+0x10c>)
 800f5ee:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 800f5f2:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 800f5f4:	482f      	ldr	r0, [pc, #188]	; (800f6b4 <low_level_init+0x10c>)
 800f5f6:	f7f6 ff8f 	bl	8006518 <HAL_ETH_Init>
 800f5fa:	4603      	mov	r3, r0
 800f5fc:	73fb      	strb	r3, [r7, #15]

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 800f5fe:	2238      	movs	r2, #56	; 0x38
 800f600:	2100      	movs	r1, #0
 800f602:	4830      	ldr	r0, [pc, #192]	; (800f6c4 <low_level_init+0x11c>)
 800f604:	f00b ffe8 	bl	801b5d8 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 800f608:	4b2e      	ldr	r3, [pc, #184]	; (800f6c4 <low_level_init+0x11c>)
 800f60a:	2221      	movs	r2, #33	; 0x21
 800f60c:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 800f60e:	4b2d      	ldr	r3, [pc, #180]	; (800f6c4 <low_level_init+0x11c>)
 800f610:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800f614:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 800f616:	4b2b      	ldr	r3, [pc, #172]	; (800f6c4 <low_level_init+0x11c>)
 800f618:	2200      	movs	r2, #0
 800f61a:	611a      	str	r2, [r3, #16]

  /* End ETH HAL Init */

  /* Initialize the RX POOL */
  LWIP_MEMPOOL_INIT(RX_POOL);
 800f61c:	482a      	ldr	r0, [pc, #168]	; (800f6c8 <low_level_init+0x120>)
 800f61e:	f001 f82d 	bl	801067c <memp_init_pool>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 800f622:	687b      	ldr	r3, [r7, #4]
 800f624:	2206      	movs	r2, #6
 800f626:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 800f62a:	4b22      	ldr	r3, [pc, #136]	; (800f6b4 <low_level_init+0x10c>)
 800f62c:	685b      	ldr	r3, [r3, #4]
 800f62e:	781a      	ldrb	r2, [r3, #0]
 800f630:	687b      	ldr	r3, [r7, #4]
 800f632:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 800f636:	4b1f      	ldr	r3, [pc, #124]	; (800f6b4 <low_level_init+0x10c>)
 800f638:	685b      	ldr	r3, [r3, #4]
 800f63a:	785a      	ldrb	r2, [r3, #1]
 800f63c:	687b      	ldr	r3, [r7, #4]
 800f63e:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 800f642:	4b1c      	ldr	r3, [pc, #112]	; (800f6b4 <low_level_init+0x10c>)
 800f644:	685b      	ldr	r3, [r3, #4]
 800f646:	789a      	ldrb	r2, [r3, #2]
 800f648:	687b      	ldr	r3, [r7, #4]
 800f64a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 800f64e:	4b19      	ldr	r3, [pc, #100]	; (800f6b4 <low_level_init+0x10c>)
 800f650:	685b      	ldr	r3, [r3, #4]
 800f652:	78da      	ldrb	r2, [r3, #3]
 800f654:	687b      	ldr	r3, [r7, #4]
 800f656:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 800f65a:	4b16      	ldr	r3, [pc, #88]	; (800f6b4 <low_level_init+0x10c>)
 800f65c:	685b      	ldr	r3, [r3, #4]
 800f65e:	791a      	ldrb	r2, [r3, #4]
 800f660:	687b      	ldr	r3, [r7, #4]
 800f662:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 800f666:	4b13      	ldr	r3, [pc, #76]	; (800f6b4 <low_level_init+0x10c>)
 800f668:	685b      	ldr	r3, [r3, #4]
 800f66a:	795a      	ldrb	r2, [r3, #5]
 800f66c:	687b      	ldr	r3, [r7, #4]
 800f66e:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b

  /* maximum transfer unit */
  netif->mtu = ETH_MAX_PAYLOAD;
 800f672:	687b      	ldr	r3, [r7, #4]
 800f674:	f240 52dc 	movw	r2, #1500	; 0x5dc
 800f678:	849a      	strh	r2, [r3, #36]	; 0x24

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 800f67a:	687b      	ldr	r3, [r7, #4]
 800f67c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800f680:	f043 030a 	orr.w	r3, r3, #10
 800f684:	b2da      	uxtb	r2, r3
 800f686:	687b      	ldr	r3, [r7, #4]
 800f688:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */
  /* Set PHY IO functions */
  LAN8742_RegisterBusIO(&LAN8742, &LAN8742_IOCtx);
 800f68c:	490f      	ldr	r1, [pc, #60]	; (800f6cc <low_level_init+0x124>)
 800f68e:	4810      	ldr	r0, [pc, #64]	; (800f6d0 <low_level_init+0x128>)
 800f690:	f7f4 fc2b 	bl	8003eea <LAN8742_RegisterBusIO>

  /* Initialize the LAN8742 ETH PHY */
  LAN8742_Init(&LAN8742);
 800f694:	480e      	ldr	r0, [pc, #56]	; (800f6d0 <low_level_init+0x128>)
 800f696:	f7f4 fc5a 	bl	8003f4e <LAN8742_Init>

  if (hal_eth_init_status == HAL_OK)
 800f69a:	7bfb      	ldrb	r3, [r7, #15]
 800f69c:	2b00      	cmp	r3, #0
 800f69e:	d103      	bne.n	800f6a8 <low_level_init+0x100>
  {
  /* Get link state */
  ethernet_link_check_state(netif);
 800f6a0:	6878      	ldr	r0, [r7, #4]
 800f6a2:	f000 fa3f 	bl	800fb24 <ethernet_link_check_state>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 800f6a6:	e001      	b.n	800f6ac <low_level_init+0x104>
    Error_Handler();
 800f6a8:	f7f3 fec8 	bl	800343c <Error_Handler>
}
 800f6ac:	bf00      	nop
 800f6ae:	3710      	adds	r7, #16
 800f6b0:	46bd      	mov	sp, r7
 800f6b2:	bd80      	pop	{r7, pc}
 800f6b4:	200007c8 	.word	0x200007c8
 800f6b8:	40028000 	.word	0x40028000
 800f6bc:	30040060 	.word	0x30040060
 800f6c0:	30040000 	.word	0x30040000
 800f6c4:	20000878 	.word	0x20000878
 800f6c8:	08020d40 	.word	0x08020d40
 800f6cc:	20000154 	.word	0x20000154
 800f6d0:	200008b0 	.word	0x200008b0

0800f6d4 <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 800f6d4:	b580      	push	{r7, lr}
 800f6d6:	b092      	sub	sp, #72	; 0x48
 800f6d8:	af00      	add	r7, sp, #0
 800f6da:	6078      	str	r0, [r7, #4]
 800f6dc:	6039      	str	r1, [r7, #0]
  uint32_t i = 0U;
 800f6de:	2300      	movs	r3, #0
 800f6e0:	647b      	str	r3, [r7, #68]	; 0x44
  struct pbuf *q = NULL;
 800f6e2:	2300      	movs	r3, #0
 800f6e4:	643b      	str	r3, [r7, #64]	; 0x40
  err_t errval = ERR_OK;
 800f6e6:	2300      	movs	r3, #0
 800f6e8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  ETH_BufferTypeDef Txbuffer[ETH_TX_DESC_CNT] = {0};
 800f6ec:	f107 030c 	add.w	r3, r7, #12
 800f6f0:	2230      	movs	r2, #48	; 0x30
 800f6f2:	2100      	movs	r1, #0
 800f6f4:	4618      	mov	r0, r3
 800f6f6:	f00b ff6f 	bl	801b5d8 <memset>

  memset(Txbuffer, 0 , ETH_TX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 800f6fa:	f107 030c 	add.w	r3, r7, #12
 800f6fe:	2230      	movs	r2, #48	; 0x30
 800f700:	2100      	movs	r1, #0
 800f702:	4618      	mov	r0, r3
 800f704:	f00b ff68 	bl	801b5d8 <memset>

  for(q = p; q != NULL; q = q->next)
 800f708:	683b      	ldr	r3, [r7, #0]
 800f70a:	643b      	str	r3, [r7, #64]	; 0x40
 800f70c:	e045      	b.n	800f79a <low_level_output+0xc6>
  {
    if(i >= ETH_TX_DESC_CNT)
 800f70e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f710:	2b03      	cmp	r3, #3
 800f712:	d902      	bls.n	800f71a <low_level_output+0x46>
      return ERR_IF;
 800f714:	f06f 030b 	mvn.w	r3, #11
 800f718:	e055      	b.n	800f7c6 <low_level_output+0xf2>

    Txbuffer[i].buffer = q->payload;
 800f71a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f71c:	6859      	ldr	r1, [r3, #4]
 800f71e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800f720:	4613      	mov	r3, r2
 800f722:	005b      	lsls	r3, r3, #1
 800f724:	4413      	add	r3, r2
 800f726:	009b      	lsls	r3, r3, #2
 800f728:	3348      	adds	r3, #72	; 0x48
 800f72a:	443b      	add	r3, r7
 800f72c:	3b3c      	subs	r3, #60	; 0x3c
 800f72e:	6019      	str	r1, [r3, #0]
    Txbuffer[i].len = q->len;
 800f730:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f732:	895b      	ldrh	r3, [r3, #10]
 800f734:	4619      	mov	r1, r3
 800f736:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800f738:	4613      	mov	r3, r2
 800f73a:	005b      	lsls	r3, r3, #1
 800f73c:	4413      	add	r3, r2
 800f73e:	009b      	lsls	r3, r3, #2
 800f740:	3348      	adds	r3, #72	; 0x48
 800f742:	443b      	add	r3, r7
 800f744:	3b38      	subs	r3, #56	; 0x38
 800f746:	6019      	str	r1, [r3, #0]

    if(i>0)
 800f748:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f74a:	2b00      	cmp	r3, #0
 800f74c:	d011      	beq.n	800f772 <low_level_output+0x9e>
    {
      Txbuffer[i-1].next = &Txbuffer[i];
 800f74e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f750:	1e5a      	subs	r2, r3, #1
 800f752:	f107 000c 	add.w	r0, r7, #12
 800f756:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800f758:	460b      	mov	r3, r1
 800f75a:	005b      	lsls	r3, r3, #1
 800f75c:	440b      	add	r3, r1
 800f75e:	009b      	lsls	r3, r3, #2
 800f760:	18c1      	adds	r1, r0, r3
 800f762:	4613      	mov	r3, r2
 800f764:	005b      	lsls	r3, r3, #1
 800f766:	4413      	add	r3, r2
 800f768:	009b      	lsls	r3, r3, #2
 800f76a:	3348      	adds	r3, #72	; 0x48
 800f76c:	443b      	add	r3, r7
 800f76e:	3b34      	subs	r3, #52	; 0x34
 800f770:	6019      	str	r1, [r3, #0]
    }

    if(q->next == NULL)
 800f772:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f774:	681b      	ldr	r3, [r3, #0]
 800f776:	2b00      	cmp	r3, #0
 800f778:	d109      	bne.n	800f78e <low_level_output+0xba>
    {
      Txbuffer[i].next = NULL;
 800f77a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800f77c:	4613      	mov	r3, r2
 800f77e:	005b      	lsls	r3, r3, #1
 800f780:	4413      	add	r3, r2
 800f782:	009b      	lsls	r3, r3, #2
 800f784:	3348      	adds	r3, #72	; 0x48
 800f786:	443b      	add	r3, r7
 800f788:	3b34      	subs	r3, #52	; 0x34
 800f78a:	2200      	movs	r2, #0
 800f78c:	601a      	str	r2, [r3, #0]
    }

    i++;
 800f78e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f790:	3301      	adds	r3, #1
 800f792:	647b      	str	r3, [r7, #68]	; 0x44
  for(q = p; q != NULL; q = q->next)
 800f794:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f796:	681b      	ldr	r3, [r3, #0]
 800f798:	643b      	str	r3, [r7, #64]	; 0x40
 800f79a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f79c:	2b00      	cmp	r3, #0
 800f79e:	d1b6      	bne.n	800f70e <low_level_output+0x3a>
  }

  TxConfig.Length = p->tot_len;
 800f7a0:	683b      	ldr	r3, [r7, #0]
 800f7a2:	891b      	ldrh	r3, [r3, #8]
 800f7a4:	461a      	mov	r2, r3
 800f7a6:	4b0a      	ldr	r3, [pc, #40]	; (800f7d0 <low_level_output+0xfc>)
 800f7a8:	605a      	str	r2, [r3, #4]
  TxConfig.TxBuffer = Txbuffer;
 800f7aa:	4a09      	ldr	r2, [pc, #36]	; (800f7d0 <low_level_output+0xfc>)
 800f7ac:	f107 030c 	add.w	r3, r7, #12
 800f7b0:	6093      	str	r3, [r2, #8]
  TxConfig.pData = p;
 800f7b2:	4a07      	ldr	r2, [pc, #28]	; (800f7d0 <low_level_output+0xfc>)
 800f7b4:	683b      	ldr	r3, [r7, #0]
 800f7b6:	6353      	str	r3, [r2, #52]	; 0x34

  HAL_ETH_Transmit(&heth, &TxConfig, ETH_DMA_TRANSMIT_TIMEOUT);
 800f7b8:	2214      	movs	r2, #20
 800f7ba:	4905      	ldr	r1, [pc, #20]	; (800f7d0 <low_level_output+0xfc>)
 800f7bc:	4805      	ldr	r0, [pc, #20]	; (800f7d4 <low_level_output+0x100>)
 800f7be:	f7f7 f843 	bl	8006848 <HAL_ETH_Transmit>

  return errval;
 800f7c2:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 800f7c6:	4618      	mov	r0, r3
 800f7c8:	3748      	adds	r7, #72	; 0x48
 800f7ca:	46bd      	mov	sp, r7
 800f7cc:	bd80      	pop	{r7, pc}
 800f7ce:	bf00      	nop
 800f7d0:	20000878 	.word	0x20000878
 800f7d4:	200007c8 	.word	0x200007c8

0800f7d8 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 800f7d8:	b580      	push	{r7, lr}
 800f7da:	b084      	sub	sp, #16
 800f7dc:	af00      	add	r7, sp, #0
 800f7de:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 800f7e0:	2300      	movs	r3, #0
 800f7e2:	60fb      	str	r3, [r7, #12]

  if(RxAllocStatus == RX_ALLOC_OK)
 800f7e4:	4b07      	ldr	r3, [pc, #28]	; (800f804 <low_level_input+0x2c>)
 800f7e6:	781b      	ldrb	r3, [r3, #0]
 800f7e8:	2b00      	cmp	r3, #0
 800f7ea:	d105      	bne.n	800f7f8 <low_level_input+0x20>
  {
    HAL_ETH_ReadData(&heth, (void **)&p);
 800f7ec:	f107 030c 	add.w	r3, r7, #12
 800f7f0:	4619      	mov	r1, r3
 800f7f2:	4805      	ldr	r0, [pc, #20]	; (800f808 <low_level_input+0x30>)
 800f7f4:	f7f7 f8bf 	bl	8006976 <HAL_ETH_ReadData>
  }

  return p;
 800f7f8:	68fb      	ldr	r3, [r7, #12]
}
 800f7fa:	4618      	mov	r0, r3
 800f7fc:	3710      	adds	r7, #16
 800f7fe:	46bd      	mov	sp, r7
 800f800:	bd80      	pop	{r7, pc}
 800f802:	bf00      	nop
 800f804:	200007c4 	.word	0x200007c4
 800f808:	200007c8 	.word	0x200007c8

0800f80c <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(struct netif *netif)
{
 800f80c:	b580      	push	{r7, lr}
 800f80e:	b084      	sub	sp, #16
 800f810:	af00      	add	r7, sp, #0
 800f812:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 800f814:	2300      	movs	r3, #0
 800f816:	60fb      	str	r3, [r7, #12]

  do
  {
    p = low_level_input( netif );
 800f818:	6878      	ldr	r0, [r7, #4]
 800f81a:	f7ff ffdd 	bl	800f7d8 <low_level_input>
 800f81e:	60f8      	str	r0, [r7, #12]
    if (p != NULL)
 800f820:	68fb      	ldr	r3, [r7, #12]
 800f822:	2b00      	cmp	r3, #0
 800f824:	d00a      	beq.n	800f83c <ethernetif_input+0x30>
    {
      if (netif->input( p, netif) != ERR_OK )
 800f826:	687b      	ldr	r3, [r7, #4]
 800f828:	691b      	ldr	r3, [r3, #16]
 800f82a:	6879      	ldr	r1, [r7, #4]
 800f82c:	68f8      	ldr	r0, [r7, #12]
 800f82e:	4798      	blx	r3
 800f830:	4603      	mov	r3, r0
 800f832:	2b00      	cmp	r3, #0
 800f834:	d002      	beq.n	800f83c <ethernetif_input+0x30>
      {
        pbuf_free(p);
 800f836:	68f8      	ldr	r0, [r7, #12]
 800f838:	f001 fe9c 	bl	8011574 <pbuf_free>
      }
    }
  } while(p!=NULL);
 800f83c:	68fb      	ldr	r3, [r7, #12]
 800f83e:	2b00      	cmp	r3, #0
 800f840:	d1ea      	bne.n	800f818 <ethernetif_input+0xc>
}
 800f842:	bf00      	nop
 800f844:	bf00      	nop
 800f846:	3710      	adds	r7, #16
 800f848:	46bd      	mov	sp, r7
 800f84a:	bd80      	pop	{r7, pc}

0800f84c <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 800f84c:	b580      	push	{r7, lr}
 800f84e:	b082      	sub	sp, #8
 800f850:	af00      	add	r7, sp, #0
 800f852:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 800f854:	687b      	ldr	r3, [r7, #4]
 800f856:	2b00      	cmp	r3, #0
 800f858:	d106      	bne.n	800f868 <ethernetif_init+0x1c>
 800f85a:	4b0e      	ldr	r3, [pc, #56]	; (800f894 <ethernetif_init+0x48>)
 800f85c:	f240 1285 	movw	r2, #389	; 0x185
 800f860:	490d      	ldr	r1, [pc, #52]	; (800f898 <ethernetif_init+0x4c>)
 800f862:	480e      	ldr	r0, [pc, #56]	; (800f89c <ethernetif_init+0x50>)
 800f864:	f00b fd28 	bl	801b2b8 <iprintf>
   * The last argument should be replaced with your link speed, in units
   * of bits per second.
   */
  // MIB2_INIT_NETIF(netif, snmp_ifType_ethernet_csmacd, LINK_SPEED_OF_YOUR_NETIF_IN_BPS);

  netif->name[0] = IFNAME0;
 800f868:	687b      	ldr	r3, [r7, #4]
 800f86a:	2273      	movs	r2, #115	; 0x73
 800f86c:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  netif->name[1] = IFNAME1;
 800f870:	687b      	ldr	r3, [r7, #4]
 800f872:	2274      	movs	r2, #116	; 0x74
 800f874:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 800f878:	687b      	ldr	r3, [r7, #4]
 800f87a:	4a09      	ldr	r2, [pc, #36]	; (800f8a0 <ethernetif_init+0x54>)
 800f87c:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 800f87e:	687b      	ldr	r3, [r7, #4]
 800f880:	4a08      	ldr	r2, [pc, #32]	; (800f8a4 <ethernetif_init+0x58>)
 800f882:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 800f884:	6878      	ldr	r0, [r7, #4]
 800f886:	f7ff fe8f 	bl	800f5a8 <low_level_init>

  return ERR_OK;
 800f88a:	2300      	movs	r3, #0
}
 800f88c:	4618      	mov	r0, r3
 800f88e:	3708      	adds	r7, #8
 800f890:	46bd      	mov	sp, r7
 800f892:	bd80      	pop	{r7, pc}
 800f894:	0801e304 	.word	0x0801e304
 800f898:	0801e320 	.word	0x0801e320
 800f89c:	0801e330 	.word	0x0801e330
 800f8a0:	080189e1 	.word	0x080189e1
 800f8a4:	0800f6d5 	.word	0x0800f6d5

0800f8a8 <pbuf_free_custom>:
  * @brief  Custom Rx pbuf free callback
  * @param  pbuf: pbuf to be freed
  * @retval None
  */
void pbuf_free_custom(struct pbuf *p)
{
 800f8a8:	b580      	push	{r7, lr}
 800f8aa:	b084      	sub	sp, #16
 800f8ac:	af00      	add	r7, sp, #0
 800f8ae:	6078      	str	r0, [r7, #4]
  struct pbuf_custom* custom_pbuf = (struct pbuf_custom*)p;
 800f8b0:	687b      	ldr	r3, [r7, #4]
 800f8b2:	60fb      	str	r3, [r7, #12]
  LWIP_MEMPOOL_FREE(RX_POOL, custom_pbuf);
 800f8b4:	68f9      	ldr	r1, [r7, #12]
 800f8b6:	4807      	ldr	r0, [pc, #28]	; (800f8d4 <pbuf_free_custom+0x2c>)
 800f8b8:	f000 ffc2 	bl	8010840 <memp_free_pool>

  /* If the Rx Buffer Pool was exhausted, signal the ethernetif_input task to
   * call HAL_ETH_GetRxDataBuffer to rebuild the Rx descriptors. */

  if (RxAllocStatus == RX_ALLOC_ERROR)
 800f8bc:	4b06      	ldr	r3, [pc, #24]	; (800f8d8 <pbuf_free_custom+0x30>)
 800f8be:	781b      	ldrb	r3, [r3, #0]
 800f8c0:	2b01      	cmp	r3, #1
 800f8c2:	d102      	bne.n	800f8ca <pbuf_free_custom+0x22>
  {
    RxAllocStatus = RX_ALLOC_OK;
 800f8c4:	4b04      	ldr	r3, [pc, #16]	; (800f8d8 <pbuf_free_custom+0x30>)
 800f8c6:	2200      	movs	r2, #0
 800f8c8:	701a      	strb	r2, [r3, #0]
  }
}
 800f8ca:	bf00      	nop
 800f8cc:	3710      	adds	r7, #16
 800f8ce:	46bd      	mov	sp, r7
 800f8d0:	bd80      	pop	{r7, pc}
 800f8d2:	bf00      	nop
 800f8d4:	08020d40 	.word	0x08020d40
 800f8d8:	200007c4 	.word	0x200007c4

0800f8dc <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Current Time value
*/
u32_t sys_now(void)
{
 800f8dc:	b580      	push	{r7, lr}
 800f8de:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 800f8e0:	f7f4 fcea 	bl	80042b8 <HAL_GetTick>
 800f8e4:	4603      	mov	r3, r0
}
 800f8e6:	4618      	mov	r0, r3
 800f8e8:	bd80      	pop	{r7, pc}
	...

0800f8ec <HAL_ETH_MspInit>:
  * @param  ethHandle: ETH handle
  * @retval None
  */

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 800f8ec:	b580      	push	{r7, lr}
 800f8ee:	b08e      	sub	sp, #56	; 0x38
 800f8f0:	af00      	add	r7, sp, #0
 800f8f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800f8f4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800f8f8:	2200      	movs	r2, #0
 800f8fa:	601a      	str	r2, [r3, #0]
 800f8fc:	605a      	str	r2, [r3, #4]
 800f8fe:	609a      	str	r2, [r3, #8]
 800f900:	60da      	str	r2, [r3, #12]
 800f902:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 800f904:	687b      	ldr	r3, [r7, #4]
 800f906:	681b      	ldr	r3, [r3, #0]
 800f908:	4a59      	ldr	r2, [pc, #356]	; (800fa70 <HAL_ETH_MspInit+0x184>)
 800f90a:	4293      	cmp	r3, r2
 800f90c:	f040 80ab 	bne.w	800fa66 <HAL_ETH_MspInit+0x17a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 800f910:	4b58      	ldr	r3, [pc, #352]	; (800fa74 <HAL_ETH_MspInit+0x188>)
 800f912:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800f916:	4a57      	ldr	r2, [pc, #348]	; (800fa74 <HAL_ETH_MspInit+0x188>)
 800f918:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800f91c:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800f920:	4b54      	ldr	r3, [pc, #336]	; (800fa74 <HAL_ETH_MspInit+0x188>)
 800f922:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800f926:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800f92a:	623b      	str	r3, [r7, #32]
 800f92c:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 800f92e:	4b51      	ldr	r3, [pc, #324]	; (800fa74 <HAL_ETH_MspInit+0x188>)
 800f930:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800f934:	4a4f      	ldr	r2, [pc, #316]	; (800fa74 <HAL_ETH_MspInit+0x188>)
 800f936:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800f93a:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800f93e:	4b4d      	ldr	r3, [pc, #308]	; (800fa74 <HAL_ETH_MspInit+0x188>)
 800f940:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800f944:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800f948:	61fb      	str	r3, [r7, #28]
 800f94a:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 800f94c:	4b49      	ldr	r3, [pc, #292]	; (800fa74 <HAL_ETH_MspInit+0x188>)
 800f94e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800f952:	4a48      	ldr	r2, [pc, #288]	; (800fa74 <HAL_ETH_MspInit+0x188>)
 800f954:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800f958:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800f95c:	4b45      	ldr	r3, [pc, #276]	; (800fa74 <HAL_ETH_MspInit+0x188>)
 800f95e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800f962:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800f966:	61bb      	str	r3, [r7, #24]
 800f968:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800f96a:	4b42      	ldr	r3, [pc, #264]	; (800fa74 <HAL_ETH_MspInit+0x188>)
 800f96c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800f970:	4a40      	ldr	r2, [pc, #256]	; (800fa74 <HAL_ETH_MspInit+0x188>)
 800f972:	f043 0304 	orr.w	r3, r3, #4
 800f976:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800f97a:	4b3e      	ldr	r3, [pc, #248]	; (800fa74 <HAL_ETH_MspInit+0x188>)
 800f97c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800f980:	f003 0304 	and.w	r3, r3, #4
 800f984:	617b      	str	r3, [r7, #20]
 800f986:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800f988:	4b3a      	ldr	r3, [pc, #232]	; (800fa74 <HAL_ETH_MspInit+0x188>)
 800f98a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800f98e:	4a39      	ldr	r2, [pc, #228]	; (800fa74 <HAL_ETH_MspInit+0x188>)
 800f990:	f043 0301 	orr.w	r3, r3, #1
 800f994:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800f998:	4b36      	ldr	r3, [pc, #216]	; (800fa74 <HAL_ETH_MspInit+0x188>)
 800f99a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800f99e:	f003 0301 	and.w	r3, r3, #1
 800f9a2:	613b      	str	r3, [r7, #16]
 800f9a4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800f9a6:	4b33      	ldr	r3, [pc, #204]	; (800fa74 <HAL_ETH_MspInit+0x188>)
 800f9a8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800f9ac:	4a31      	ldr	r2, [pc, #196]	; (800fa74 <HAL_ETH_MspInit+0x188>)
 800f9ae:	f043 0302 	orr.w	r3, r3, #2
 800f9b2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800f9b6:	4b2f      	ldr	r3, [pc, #188]	; (800fa74 <HAL_ETH_MspInit+0x188>)
 800f9b8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800f9bc:	f003 0302 	and.w	r3, r3, #2
 800f9c0:	60fb      	str	r3, [r7, #12]
 800f9c2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800f9c4:	4b2b      	ldr	r3, [pc, #172]	; (800fa74 <HAL_ETH_MspInit+0x188>)
 800f9c6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800f9ca:	4a2a      	ldr	r2, [pc, #168]	; (800fa74 <HAL_ETH_MspInit+0x188>)
 800f9cc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f9d0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800f9d4:	4b27      	ldr	r3, [pc, #156]	; (800fa74 <HAL_ETH_MspInit+0x188>)
 800f9d6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800f9da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f9de:	60bb      	str	r3, [r7, #8]
 800f9e0:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 800f9e2:	2332      	movs	r3, #50	; 0x32
 800f9e4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800f9e6:	2302      	movs	r3, #2
 800f9e8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f9ea:	2300      	movs	r3, #0
 800f9ec:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800f9ee:	2300      	movs	r3, #0
 800f9f0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800f9f2:	230b      	movs	r3, #11
 800f9f4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800f9f6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800f9fa:	4619      	mov	r1, r3
 800f9fc:	481e      	ldr	r0, [pc, #120]	; (800fa78 <HAL_ETH_MspInit+0x18c>)
 800f9fe:	f7f8 f94b 	bl	8007c98 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 800fa02:	2386      	movs	r3, #134	; 0x86
 800fa04:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800fa06:	2302      	movs	r3, #2
 800fa08:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800fa0a:	2300      	movs	r3, #0
 800fa0c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800fa0e:	2300      	movs	r3, #0
 800fa10:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800fa12:	230b      	movs	r3, #11
 800fa14:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800fa16:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800fa1a:	4619      	mov	r1, r3
 800fa1c:	4817      	ldr	r0, [pc, #92]	; (800fa7c <HAL_ETH_MspInit+0x190>)
 800fa1e:	f7f8 f93b 	bl	8007c98 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 800fa22:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800fa26:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800fa28:	2302      	movs	r3, #2
 800fa2a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800fa2c:	2300      	movs	r3, #0
 800fa2e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800fa30:	2300      	movs	r3, #0
 800fa32:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800fa34:	230b      	movs	r3, #11
 800fa36:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800fa38:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800fa3c:	4619      	mov	r1, r3
 800fa3e:	4810      	ldr	r0, [pc, #64]	; (800fa80 <HAL_ETH_MspInit+0x194>)
 800fa40:	f7f8 f92a 	bl	8007c98 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 800fa44:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800fa48:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800fa4a:	2302      	movs	r3, #2
 800fa4c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800fa4e:	2300      	movs	r3, #0
 800fa50:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800fa52:	2300      	movs	r3, #0
 800fa54:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800fa56:	230b      	movs	r3, #11
 800fa58:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800fa5a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800fa5e:	4619      	mov	r1, r3
 800fa60:	4808      	ldr	r0, [pc, #32]	; (800fa84 <HAL_ETH_MspInit+0x198>)
 800fa62:	f7f8 f919 	bl	8007c98 <HAL_GPIO_Init>

  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 800fa66:	bf00      	nop
 800fa68:	3738      	adds	r7, #56	; 0x38
 800fa6a:	46bd      	mov	sp, r7
 800fa6c:	bd80      	pop	{r7, pc}
 800fa6e:	bf00      	nop
 800fa70:	40028000 	.word	0x40028000
 800fa74:	58024400 	.word	0x58024400
 800fa78:	58020800 	.word	0x58020800
 800fa7c:	58020000 	.word	0x58020000
 800fa80:	58020400 	.word	0x58020400
 800fa84:	58021800 	.word	0x58021800

0800fa88 <ETH_PHY_IO_Init>:
  * @brief  Initializes the MDIO interface GPIO and clocks.
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_Init(void)
{
 800fa88:	b580      	push	{r7, lr}
 800fa8a:	af00      	add	r7, sp, #0
  /* We assume that MDIO GPIO configuration is already done
     in the ETH_MspInit() else it should be done here
  */

  /* Configure the MDIO Clock */
  HAL_ETH_SetMDIOClockRange(&heth);
 800fa8c:	4802      	ldr	r0, [pc, #8]	; (800fa98 <ETH_PHY_IO_Init+0x10>)
 800fa8e:	f7f7 fb37 	bl	8007100 <HAL_ETH_SetMDIOClockRange>

  return 0;
 800fa92:	2300      	movs	r3, #0
}
 800fa94:	4618      	mov	r0, r3
 800fa96:	bd80      	pop	{r7, pc}
 800fa98:	200007c8 	.word	0x200007c8

0800fa9c <ETH_PHY_IO_DeInit>:
  * @brief  De-Initializes the MDIO interface .
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_DeInit (void)
{
 800fa9c:	b480      	push	{r7}
 800fa9e:	af00      	add	r7, sp, #0
  return 0;
 800faa0:	2300      	movs	r3, #0
}
 800faa2:	4618      	mov	r0, r3
 800faa4:	46bd      	mov	sp, r7
 800faa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800faaa:	4770      	bx	lr

0800faac <ETH_PHY_IO_ReadReg>:
  * @param  RegAddr: PHY register address
  * @param  pRegVal: pointer to hold the register value
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_ReadReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t *pRegVal)
{
 800faac:	b580      	push	{r7, lr}
 800faae:	b084      	sub	sp, #16
 800fab0:	af00      	add	r7, sp, #0
 800fab2:	60f8      	str	r0, [r7, #12]
 800fab4:	60b9      	str	r1, [r7, #8]
 800fab6:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_ReadPHYRegister(&heth, DevAddr, RegAddr, pRegVal) != HAL_OK)
 800fab8:	687b      	ldr	r3, [r7, #4]
 800faba:	68ba      	ldr	r2, [r7, #8]
 800fabc:	68f9      	ldr	r1, [r7, #12]
 800fabe:	4807      	ldr	r0, [pc, #28]	; (800fadc <ETH_PHY_IO_ReadReg+0x30>)
 800fac0:	f7f7 f887 	bl	8006bd2 <HAL_ETH_ReadPHYRegister>
 800fac4:	4603      	mov	r3, r0
 800fac6:	2b00      	cmp	r3, #0
 800fac8:	d002      	beq.n	800fad0 <ETH_PHY_IO_ReadReg+0x24>
  {
    return -1;
 800faca:	f04f 33ff 	mov.w	r3, #4294967295
 800face:	e000      	b.n	800fad2 <ETH_PHY_IO_ReadReg+0x26>
  }

  return 0;
 800fad0:	2300      	movs	r3, #0
}
 800fad2:	4618      	mov	r0, r3
 800fad4:	3710      	adds	r7, #16
 800fad6:	46bd      	mov	sp, r7
 800fad8:	bd80      	pop	{r7, pc}
 800fada:	bf00      	nop
 800fadc:	200007c8 	.word	0x200007c8

0800fae0 <ETH_PHY_IO_WriteReg>:
  * @param  RegAddr: PHY register address
  * @param  RegVal: Value to be written
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_WriteReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t RegVal)
{
 800fae0:	b580      	push	{r7, lr}
 800fae2:	b084      	sub	sp, #16
 800fae4:	af00      	add	r7, sp, #0
 800fae6:	60f8      	str	r0, [r7, #12]
 800fae8:	60b9      	str	r1, [r7, #8]
 800faea:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_WritePHYRegister(&heth, DevAddr, RegAddr, RegVal) != HAL_OK)
 800faec:	687b      	ldr	r3, [r7, #4]
 800faee:	68ba      	ldr	r2, [r7, #8]
 800faf0:	68f9      	ldr	r1, [r7, #12]
 800faf2:	4807      	ldr	r0, [pc, #28]	; (800fb10 <ETH_PHY_IO_WriteReg+0x30>)
 800faf4:	f7f7 f8c2 	bl	8006c7c <HAL_ETH_WritePHYRegister>
 800faf8:	4603      	mov	r3, r0
 800fafa:	2b00      	cmp	r3, #0
 800fafc:	d002      	beq.n	800fb04 <ETH_PHY_IO_WriteReg+0x24>
  {
    return -1;
 800fafe:	f04f 33ff 	mov.w	r3, #4294967295
 800fb02:	e000      	b.n	800fb06 <ETH_PHY_IO_WriteReg+0x26>
  }

  return 0;
 800fb04:	2300      	movs	r3, #0
}
 800fb06:	4618      	mov	r0, r3
 800fb08:	3710      	adds	r7, #16
 800fb0a:	46bd      	mov	sp, r7
 800fb0c:	bd80      	pop	{r7, pc}
 800fb0e:	bf00      	nop
 800fb10:	200007c8 	.word	0x200007c8

0800fb14 <ETH_PHY_IO_GetTick>:
/**
  * @brief  Get the time in millisecons used for internal PHY driver process.
  * @retval Time value
  */
int32_t ETH_PHY_IO_GetTick(void)
{
 800fb14:	b580      	push	{r7, lr}
 800fb16:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 800fb18:	f7f4 fbce 	bl	80042b8 <HAL_GetTick>
 800fb1c:	4603      	mov	r3, r0
}
 800fb1e:	4618      	mov	r0, r3
 800fb20:	bd80      	pop	{r7, pc}
	...

0800fb24 <ethernet_link_check_state>:
/**
  * @brief  Check the ETH link state then update ETH driver and netif link accordingly.
  * @retval None
  */
void ethernet_link_check_state(struct netif *netif)
{
 800fb24:	b580      	push	{r7, lr}
 800fb26:	b0a0      	sub	sp, #128	; 0x80
 800fb28:	af00      	add	r7, sp, #0
 800fb2a:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef MACConf = {0};
 800fb2c:	f107 030c 	add.w	r3, r7, #12
 800fb30:	2264      	movs	r2, #100	; 0x64
 800fb32:	2100      	movs	r1, #0
 800fb34:	4618      	mov	r0, r3
 800fb36:	f00b fd4f 	bl	801b5d8 <memset>
  int32_t PHYLinkState = 0;
 800fb3a:	2300      	movs	r3, #0
 800fb3c:	673b      	str	r3, [r7, #112]	; 0x70
  uint32_t linkchanged = 0U, speed = 0U, duplex = 0U;
 800fb3e:	2300      	movs	r3, #0
 800fb40:	67fb      	str	r3, [r7, #124]	; 0x7c
 800fb42:	2300      	movs	r3, #0
 800fb44:	67bb      	str	r3, [r7, #120]	; 0x78
 800fb46:	2300      	movs	r3, #0
 800fb48:	677b      	str	r3, [r7, #116]	; 0x74

  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 800fb4a:	483a      	ldr	r0, [pc, #232]	; (800fc34 <ethernet_link_check_state+0x110>)
 800fb4c:	f7f4 faa7 	bl	800409e <LAN8742_GetLinkState>
 800fb50:	6738      	str	r0, [r7, #112]	; 0x70

  if(netif_is_link_up(netif) && (PHYLinkState <= LAN8742_STATUS_LINK_DOWN))
 800fb52:	687b      	ldr	r3, [r7, #4]
 800fb54:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800fb58:	089b      	lsrs	r3, r3, #2
 800fb5a:	f003 0301 	and.w	r3, r3, #1
 800fb5e:	b2db      	uxtb	r3, r3
 800fb60:	2b00      	cmp	r3, #0
 800fb62:	d00c      	beq.n	800fb7e <ethernet_link_check_state+0x5a>
 800fb64:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800fb66:	2b01      	cmp	r3, #1
 800fb68:	dc09      	bgt.n	800fb7e <ethernet_link_check_state+0x5a>
  {
    HAL_ETH_Stop(&heth);
 800fb6a:	4833      	ldr	r0, [pc, #204]	; (800fc38 <ethernet_link_check_state+0x114>)
 800fb6c:	f7f6 fe1c 	bl	80067a8 <HAL_ETH_Stop>
    netif_set_down(netif);
 800fb70:	6878      	ldr	r0, [r7, #4]
 800fb72:	f001 f8e9 	bl	8010d48 <netif_set_down>
    netif_set_link_down(netif);
 800fb76:	6878      	ldr	r0, [r7, #4]
 800fb78:	f001 f94c 	bl	8010e14 <netif_set_link_down>
      netif_set_up(netif);
      netif_set_link_up(netif);
    }
  }

}
 800fb7c:	e055      	b.n	800fc2a <ethernet_link_check_state+0x106>
  else if(!netif_is_link_up(netif) && (PHYLinkState > LAN8742_STATUS_LINK_DOWN))
 800fb7e:	687b      	ldr	r3, [r7, #4]
 800fb80:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800fb84:	f003 0304 	and.w	r3, r3, #4
 800fb88:	2b00      	cmp	r3, #0
 800fb8a:	d14e      	bne.n	800fc2a <ethernet_link_check_state+0x106>
 800fb8c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800fb8e:	2b01      	cmp	r3, #1
 800fb90:	dd4b      	ble.n	800fc2a <ethernet_link_check_state+0x106>
    switch (PHYLinkState)
 800fb92:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800fb94:	3b02      	subs	r3, #2
 800fb96:	2b03      	cmp	r3, #3
 800fb98:	d82a      	bhi.n	800fbf0 <ethernet_link_check_state+0xcc>
 800fb9a:	a201      	add	r2, pc, #4	; (adr r2, 800fba0 <ethernet_link_check_state+0x7c>)
 800fb9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fba0:	0800fbb1 	.word	0x0800fbb1
 800fba4:	0800fbc3 	.word	0x0800fbc3
 800fba8:	0800fbd3 	.word	0x0800fbd3
 800fbac:	0800fbe3 	.word	0x0800fbe3
      duplex = ETH_FULLDUPLEX_MODE;
 800fbb0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800fbb4:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_100M;
 800fbb6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800fbba:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 800fbbc:	2301      	movs	r3, #1
 800fbbe:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 800fbc0:	e017      	b.n	800fbf2 <ethernet_link_check_state+0xce>
      duplex = ETH_HALFDUPLEX_MODE;
 800fbc2:	2300      	movs	r3, #0
 800fbc4:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_100M;
 800fbc6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800fbca:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 800fbcc:	2301      	movs	r3, #1
 800fbce:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 800fbd0:	e00f      	b.n	800fbf2 <ethernet_link_check_state+0xce>
      duplex = ETH_FULLDUPLEX_MODE;
 800fbd2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800fbd6:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_10M;
 800fbd8:	2300      	movs	r3, #0
 800fbda:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 800fbdc:	2301      	movs	r3, #1
 800fbde:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 800fbe0:	e007      	b.n	800fbf2 <ethernet_link_check_state+0xce>
      duplex = ETH_HALFDUPLEX_MODE;
 800fbe2:	2300      	movs	r3, #0
 800fbe4:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_10M;
 800fbe6:	2300      	movs	r3, #0
 800fbe8:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 800fbea:	2301      	movs	r3, #1
 800fbec:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 800fbee:	e000      	b.n	800fbf2 <ethernet_link_check_state+0xce>
      break;
 800fbf0:	bf00      	nop
    if(linkchanged)
 800fbf2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800fbf4:	2b00      	cmp	r3, #0
 800fbf6:	d018      	beq.n	800fc2a <ethernet_link_check_state+0x106>
      HAL_ETH_GetMACConfig(&heth, &MACConf);
 800fbf8:	f107 030c 	add.w	r3, r7, #12
 800fbfc:	4619      	mov	r1, r3
 800fbfe:	480e      	ldr	r0, [pc, #56]	; (800fc38 <ethernet_link_check_state+0x114>)
 800fc00:	f7f7 f890 	bl	8006d24 <HAL_ETH_GetMACConfig>
      MACConf.DuplexMode = duplex;
 800fc04:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800fc06:	627b      	str	r3, [r7, #36]	; 0x24
      MACConf.Speed = speed;
 800fc08:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800fc0a:	623b      	str	r3, [r7, #32]
      HAL_ETH_SetMACConfig(&heth, &MACConf);
 800fc0c:	f107 030c 	add.w	r3, r7, #12
 800fc10:	4619      	mov	r1, r3
 800fc12:	4809      	ldr	r0, [pc, #36]	; (800fc38 <ethernet_link_check_state+0x114>)
 800fc14:	f7f7 fa5a 	bl	80070cc <HAL_ETH_SetMACConfig>
      HAL_ETH_Start(&heth);
 800fc18:	4807      	ldr	r0, [pc, #28]	; (800fc38 <ethernet_link_check_state+0x114>)
 800fc1a:	f7f6 fd63 	bl	80066e4 <HAL_ETH_Start>
      netif_set_up(netif);
 800fc1e:	6878      	ldr	r0, [r7, #4]
 800fc20:	f001 f826 	bl	8010c70 <netif_set_up>
      netif_set_link_up(netif);
 800fc24:	6878      	ldr	r0, [r7, #4]
 800fc26:	f001 f8c1 	bl	8010dac <netif_set_link_up>
}
 800fc2a:	bf00      	nop
 800fc2c:	3780      	adds	r7, #128	; 0x80
 800fc2e:	46bd      	mov	sp, r7
 800fc30:	bd80      	pop	{r7, pc}
 800fc32:	bf00      	nop
 800fc34:	200008b0 	.word	0x200008b0
 800fc38:	200007c8 	.word	0x200007c8

0800fc3c <HAL_ETH_RxAllocateCallback>:

void HAL_ETH_RxAllocateCallback(uint8_t **buff)
{
 800fc3c:	b580      	push	{r7, lr}
 800fc3e:	b086      	sub	sp, #24
 800fc40:	af02      	add	r7, sp, #8
 800fc42:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH RxAllocateCallback */
  struct pbuf_custom *p = LWIP_MEMPOOL_ALLOC(RX_POOL);
 800fc44:	4812      	ldr	r0, [pc, #72]	; (800fc90 <HAL_ETH_RxAllocateCallback+0x54>)
 800fc46:	f000 fd8d 	bl	8010764 <memp_malloc_pool>
 800fc4a:	60f8      	str	r0, [r7, #12]
  if (p)
 800fc4c:	68fb      	ldr	r3, [r7, #12]
 800fc4e:	2b00      	cmp	r3, #0
 800fc50:	d014      	beq.n	800fc7c <HAL_ETH_RxAllocateCallback+0x40>
  {
    /* Get the buff from the struct pbuf address. */
    *buff = (uint8_t *)p + offsetof(RxBuff_t, buff);
 800fc52:	68fb      	ldr	r3, [r7, #12]
 800fc54:	f103 0220 	add.w	r2, r3, #32
 800fc58:	687b      	ldr	r3, [r7, #4]
 800fc5a:	601a      	str	r2, [r3, #0]
    p->custom_free_function = pbuf_free_custom;
 800fc5c:	68fb      	ldr	r3, [r7, #12]
 800fc5e:	4a0d      	ldr	r2, [pc, #52]	; (800fc94 <HAL_ETH_RxAllocateCallback+0x58>)
 800fc60:	611a      	str	r2, [r3, #16]
    /* Initialize the struct pbuf.
    * This must be performed whenever a buffer's allocated because it may be
    * changed by lwIP or the app, e.g., pbuf_free decrements ref. */
    pbuf_alloced_custom(PBUF_RAW, 0, PBUF_REF, p, *buff, ETH_RX_BUFFER_SIZE);
 800fc62:	687b      	ldr	r3, [r7, #4]
 800fc64:	681b      	ldr	r3, [r3, #0]
 800fc66:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 800fc6a:	9201      	str	r2, [sp, #4]
 800fc6c:	9300      	str	r3, [sp, #0]
 800fc6e:	68fb      	ldr	r3, [r7, #12]
 800fc70:	2241      	movs	r2, #65	; 0x41
 800fc72:	2100      	movs	r1, #0
 800fc74:	2000      	movs	r0, #0
 800fc76:	f001 fac5 	bl	8011204 <pbuf_alloced_custom>
  {
    RxAllocStatus = RX_ALLOC_ERROR;
    *buff = NULL;
  }
/* USER CODE END HAL ETH RxAllocateCallback */
}
 800fc7a:	e005      	b.n	800fc88 <HAL_ETH_RxAllocateCallback+0x4c>
    RxAllocStatus = RX_ALLOC_ERROR;
 800fc7c:	4b06      	ldr	r3, [pc, #24]	; (800fc98 <HAL_ETH_RxAllocateCallback+0x5c>)
 800fc7e:	2201      	movs	r2, #1
 800fc80:	701a      	strb	r2, [r3, #0]
    *buff = NULL;
 800fc82:	687b      	ldr	r3, [r7, #4]
 800fc84:	2200      	movs	r2, #0
 800fc86:	601a      	str	r2, [r3, #0]
}
 800fc88:	bf00      	nop
 800fc8a:	3710      	adds	r7, #16
 800fc8c:	46bd      	mov	sp, r7
 800fc8e:	bd80      	pop	{r7, pc}
 800fc90:	08020d40 	.word	0x08020d40
 800fc94:	0800f8a9 	.word	0x0800f8a9
 800fc98:	200007c4 	.word	0x200007c4

0800fc9c <HAL_ETH_RxLinkCallback>:

void HAL_ETH_RxLinkCallback(void **pStart, void **pEnd, uint8_t *buff, uint16_t Length)
{
 800fc9c:	b480      	push	{r7}
 800fc9e:	b08d      	sub	sp, #52	; 0x34
 800fca0:	af00      	add	r7, sp, #0
 800fca2:	60f8      	str	r0, [r7, #12]
 800fca4:	60b9      	str	r1, [r7, #8]
 800fca6:	607a      	str	r2, [r7, #4]
 800fca8:	807b      	strh	r3, [r7, #2]
/* USER CODE BEGIN HAL ETH RxLinkCallback */

  struct pbuf **ppStart = (struct pbuf **)pStart;
 800fcaa:	68fb      	ldr	r3, [r7, #12]
 800fcac:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf **ppEnd = (struct pbuf **)pEnd;
 800fcae:	68bb      	ldr	r3, [r7, #8]
 800fcb0:	627b      	str	r3, [r7, #36]	; 0x24
  struct pbuf *p = NULL;
 800fcb2:	2300      	movs	r3, #0
 800fcb4:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get the struct pbuf from the buff address. */
  p = (struct pbuf *)(buff - offsetof(RxBuff_t, buff));
 800fcb6:	687b      	ldr	r3, [r7, #4]
 800fcb8:	3b20      	subs	r3, #32
 800fcba:	62fb      	str	r3, [r7, #44]	; 0x2c
  p->next = NULL;
 800fcbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fcbe:	2200      	movs	r2, #0
 800fcc0:	601a      	str	r2, [r3, #0]
  p->tot_len = 0;
 800fcc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fcc4:	2200      	movs	r2, #0
 800fcc6:	811a      	strh	r2, [r3, #8]
  p->len = Length;
 800fcc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fcca:	887a      	ldrh	r2, [r7, #2]
 800fccc:	815a      	strh	r2, [r3, #10]

  /* Chain the buffer. */
  if (!*ppStart)
 800fcce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fcd0:	681b      	ldr	r3, [r3, #0]
 800fcd2:	2b00      	cmp	r3, #0
 800fcd4:	d103      	bne.n	800fcde <HAL_ETH_RxLinkCallback+0x42>
  {
    /* The first buffer of the packet. */
    *ppStart = p;
 800fcd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fcd8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800fcda:	601a      	str	r2, [r3, #0]
 800fcdc:	e003      	b.n	800fce6 <HAL_ETH_RxLinkCallback+0x4a>
  }
  else
  {
    /* Chain the buffer to the end of the packet. */
    (*ppEnd)->next = p;
 800fcde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fce0:	681b      	ldr	r3, [r3, #0]
 800fce2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800fce4:	601a      	str	r2, [r3, #0]
  }
  *ppEnd  = p;
 800fce6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fce8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800fcea:	601a      	str	r2, [r3, #0]

  /* Update the total length of all the buffers of the chain. Each pbuf in the chain should have its tot_len
   * set to its own length, plus the length of all the following pbufs in the chain. */
  for (p = *ppStart; p != NULL; p = p->next)
 800fcec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fcee:	681b      	ldr	r3, [r3, #0]
 800fcf0:	62fb      	str	r3, [r7, #44]	; 0x2c
 800fcf2:	e009      	b.n	800fd08 <HAL_ETH_RxLinkCallback+0x6c>
  {
    p->tot_len += Length;
 800fcf4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fcf6:	891a      	ldrh	r2, [r3, #8]
 800fcf8:	887b      	ldrh	r3, [r7, #2]
 800fcfa:	4413      	add	r3, r2
 800fcfc:	b29a      	uxth	r2, r3
 800fcfe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fd00:	811a      	strh	r2, [r3, #8]
  for (p = *ppStart; p != NULL; p = p->next)
 800fd02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fd04:	681b      	ldr	r3, [r3, #0]
 800fd06:	62fb      	str	r3, [r7, #44]	; 0x2c
 800fd08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fd0a:	2b00      	cmp	r3, #0
 800fd0c:	d1f2      	bne.n	800fcf4 <HAL_ETH_RxLinkCallback+0x58>
  }

  /* Invalidate data cache because Rx DMA's writing to physical memory makes it stale. */
  SCB_InvalidateDCache_by_Addr((uint32_t *)buff, Length);
 800fd0e:	887b      	ldrh	r3, [r7, #2]
 800fd10:	687a      	ldr	r2, [r7, #4]
 800fd12:	623a      	str	r2, [r7, #32]
 800fd14:	61fb      	str	r3, [r7, #28]
    if ( dsize > 0 ) { 
 800fd16:	69fb      	ldr	r3, [r7, #28]
 800fd18:	2b00      	cmp	r3, #0
 800fd1a:	dd1d      	ble.n	800fd58 <HAL_ETH_RxLinkCallback+0xbc>
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 800fd1c:	6a3b      	ldr	r3, [r7, #32]
 800fd1e:	f003 021f 	and.w	r2, r3, #31
 800fd22:	69fb      	ldr	r3, [r7, #28]
 800fd24:	4413      	add	r3, r2
 800fd26:	61bb      	str	r3, [r7, #24]
      uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;
 800fd28:	6a3b      	ldr	r3, [r7, #32]
 800fd2a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 800fd2c:	f3bf 8f4f 	dsb	sy
}
 800fd30:	bf00      	nop
        SCB->DCIMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 800fd32:	4a0d      	ldr	r2, [pc, #52]	; (800fd68 <HAL_ETH_RxLinkCallback+0xcc>)
 800fd34:	697b      	ldr	r3, [r7, #20]
 800fd36:	f8c2 325c 	str.w	r3, [r2, #604]	; 0x25c
        op_addr += __SCB_DCACHE_LINE_SIZE;
 800fd3a:	697b      	ldr	r3, [r7, #20]
 800fd3c:	3320      	adds	r3, #32
 800fd3e:	617b      	str	r3, [r7, #20]
        op_size -= __SCB_DCACHE_LINE_SIZE;
 800fd40:	69bb      	ldr	r3, [r7, #24]
 800fd42:	3b20      	subs	r3, #32
 800fd44:	61bb      	str	r3, [r7, #24]
      } while ( op_size > 0 );
 800fd46:	69bb      	ldr	r3, [r7, #24]
 800fd48:	2b00      	cmp	r3, #0
 800fd4a:	dcf2      	bgt.n	800fd32 <HAL_ETH_RxLinkCallback+0x96>
  __ASM volatile ("dsb 0xF":::"memory");
 800fd4c:	f3bf 8f4f 	dsb	sy
}
 800fd50:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800fd52:	f3bf 8f6f 	isb	sy
}
 800fd56:	bf00      	nop
}
 800fd58:	bf00      	nop

/* USER CODE END HAL ETH RxLinkCallback */
}
 800fd5a:	bf00      	nop
 800fd5c:	3734      	adds	r7, #52	; 0x34
 800fd5e:	46bd      	mov	sp, r7
 800fd60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd64:	4770      	bx	lr
 800fd66:	bf00      	nop
 800fd68:	e000ed00 	.word	0xe000ed00

0800fd6c <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 800fd6c:	b480      	push	{r7}
 800fd6e:	b083      	sub	sp, #12
 800fd70:	af00      	add	r7, sp, #0
 800fd72:	4603      	mov	r3, r0
 800fd74:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 800fd76:	88fb      	ldrh	r3, [r7, #6]
 800fd78:	021b      	lsls	r3, r3, #8
 800fd7a:	b21a      	sxth	r2, r3
 800fd7c:	88fb      	ldrh	r3, [r7, #6]
 800fd7e:	0a1b      	lsrs	r3, r3, #8
 800fd80:	b29b      	uxth	r3, r3
 800fd82:	b21b      	sxth	r3, r3
 800fd84:	4313      	orrs	r3, r2
 800fd86:	b21b      	sxth	r3, r3
 800fd88:	b29b      	uxth	r3, r3
}
 800fd8a:	4618      	mov	r0, r3
 800fd8c:	370c      	adds	r7, #12
 800fd8e:	46bd      	mov	sp, r7
 800fd90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd94:	4770      	bx	lr

0800fd96 <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 800fd96:	b480      	push	{r7}
 800fd98:	b083      	sub	sp, #12
 800fd9a:	af00      	add	r7, sp, #0
 800fd9c:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 800fd9e:	687b      	ldr	r3, [r7, #4]
 800fda0:	061a      	lsls	r2, r3, #24
 800fda2:	687b      	ldr	r3, [r7, #4]
 800fda4:	021b      	lsls	r3, r3, #8
 800fda6:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800fdaa:	431a      	orrs	r2, r3
 800fdac:	687b      	ldr	r3, [r7, #4]
 800fdae:	0a1b      	lsrs	r3, r3, #8
 800fdb0:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800fdb4:	431a      	orrs	r2, r3
 800fdb6:	687b      	ldr	r3, [r7, #4]
 800fdb8:	0e1b      	lsrs	r3, r3, #24
 800fdba:	4313      	orrs	r3, r2
}
 800fdbc:	4618      	mov	r0, r3
 800fdbe:	370c      	adds	r7, #12
 800fdc0:	46bd      	mov	sp, r7
 800fdc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fdc6:	4770      	bx	lr

0800fdc8 <lwip_standard_chksum>:
 * @param len length of data to be summed
 * @return host order (!) lwip checksum (non-inverted Internet sum)
 */
u16_t
lwip_standard_chksum(const void *dataptr, int len)
{
 800fdc8:	b480      	push	{r7}
 800fdca:	b089      	sub	sp, #36	; 0x24
 800fdcc:	af00      	add	r7, sp, #0
 800fdce:	6078      	str	r0, [r7, #4]
 800fdd0:	6039      	str	r1, [r7, #0]
  const u8_t *pb = (const u8_t *)dataptr;
 800fdd2:	687b      	ldr	r3, [r7, #4]
 800fdd4:	61fb      	str	r3, [r7, #28]
  const u16_t *ps;
  u16_t t = 0;
 800fdd6:	2300      	movs	r3, #0
 800fdd8:	81fb      	strh	r3, [r7, #14]
  u32_t sum = 0;
 800fdda:	2300      	movs	r3, #0
 800fddc:	617b      	str	r3, [r7, #20]
  int odd = ((mem_ptr_t)pb & 1);
 800fdde:	69fb      	ldr	r3, [r7, #28]
 800fde0:	f003 0301 	and.w	r3, r3, #1
 800fde4:	613b      	str	r3, [r7, #16]

  /* Get aligned to u16_t */
  if (odd && len > 0) {
 800fde6:	693b      	ldr	r3, [r7, #16]
 800fde8:	2b00      	cmp	r3, #0
 800fdea:	d00d      	beq.n	800fe08 <lwip_standard_chksum+0x40>
 800fdec:	683b      	ldr	r3, [r7, #0]
 800fdee:	2b00      	cmp	r3, #0
 800fdf0:	dd0a      	ble.n	800fe08 <lwip_standard_chksum+0x40>
    ((u8_t *)&t)[1] = *pb++;
 800fdf2:	69fa      	ldr	r2, [r7, #28]
 800fdf4:	1c53      	adds	r3, r2, #1
 800fdf6:	61fb      	str	r3, [r7, #28]
 800fdf8:	f107 030e 	add.w	r3, r7, #14
 800fdfc:	3301      	adds	r3, #1
 800fdfe:	7812      	ldrb	r2, [r2, #0]
 800fe00:	701a      	strb	r2, [r3, #0]
    len--;
 800fe02:	683b      	ldr	r3, [r7, #0]
 800fe04:	3b01      	subs	r3, #1
 800fe06:	603b      	str	r3, [r7, #0]
  }

  /* Add the bulk of the data */
  ps = (const u16_t *)(const void *)pb;
 800fe08:	69fb      	ldr	r3, [r7, #28]
 800fe0a:	61bb      	str	r3, [r7, #24]
  while (len > 1) {
 800fe0c:	e00a      	b.n	800fe24 <lwip_standard_chksum+0x5c>
    sum += *ps++;
 800fe0e:	69bb      	ldr	r3, [r7, #24]
 800fe10:	1c9a      	adds	r2, r3, #2
 800fe12:	61ba      	str	r2, [r7, #24]
 800fe14:	881b      	ldrh	r3, [r3, #0]
 800fe16:	461a      	mov	r2, r3
 800fe18:	697b      	ldr	r3, [r7, #20]
 800fe1a:	4413      	add	r3, r2
 800fe1c:	617b      	str	r3, [r7, #20]
    len -= 2;
 800fe1e:	683b      	ldr	r3, [r7, #0]
 800fe20:	3b02      	subs	r3, #2
 800fe22:	603b      	str	r3, [r7, #0]
  while (len > 1) {
 800fe24:	683b      	ldr	r3, [r7, #0]
 800fe26:	2b01      	cmp	r3, #1
 800fe28:	dcf1      	bgt.n	800fe0e <lwip_standard_chksum+0x46>
  }

  /* Consume left-over byte, if any */
  if (len > 0) {
 800fe2a:	683b      	ldr	r3, [r7, #0]
 800fe2c:	2b00      	cmp	r3, #0
 800fe2e:	dd04      	ble.n	800fe3a <lwip_standard_chksum+0x72>
    ((u8_t *)&t)[0] = *(const u8_t *)ps;
 800fe30:	f107 030e 	add.w	r3, r7, #14
 800fe34:	69ba      	ldr	r2, [r7, #24]
 800fe36:	7812      	ldrb	r2, [r2, #0]
 800fe38:	701a      	strb	r2, [r3, #0]
  }

  /* Add end bytes */
  sum += t;
 800fe3a:	89fb      	ldrh	r3, [r7, #14]
 800fe3c:	461a      	mov	r2, r3
 800fe3e:	697b      	ldr	r3, [r7, #20]
 800fe40:	4413      	add	r3, r2
 800fe42:	617b      	str	r3, [r7, #20]

  /* Fold 32-bit sum to 16 bits
     calling this twice is probably faster than if statements... */
  sum = FOLD_U32T(sum);
 800fe44:	697b      	ldr	r3, [r7, #20]
 800fe46:	0c1a      	lsrs	r2, r3, #16
 800fe48:	697b      	ldr	r3, [r7, #20]
 800fe4a:	b29b      	uxth	r3, r3
 800fe4c:	4413      	add	r3, r2
 800fe4e:	617b      	str	r3, [r7, #20]
  sum = FOLD_U32T(sum);
 800fe50:	697b      	ldr	r3, [r7, #20]
 800fe52:	0c1a      	lsrs	r2, r3, #16
 800fe54:	697b      	ldr	r3, [r7, #20]
 800fe56:	b29b      	uxth	r3, r3
 800fe58:	4413      	add	r3, r2
 800fe5a:	617b      	str	r3, [r7, #20]

  /* Swap if alignment was odd */
  if (odd) {
 800fe5c:	693b      	ldr	r3, [r7, #16]
 800fe5e:	2b00      	cmp	r3, #0
 800fe60:	d007      	beq.n	800fe72 <lwip_standard_chksum+0xaa>
    sum = SWAP_BYTES_IN_WORD(sum);
 800fe62:	697b      	ldr	r3, [r7, #20]
 800fe64:	021b      	lsls	r3, r3, #8
 800fe66:	b29a      	uxth	r2, r3
 800fe68:	697b      	ldr	r3, [r7, #20]
 800fe6a:	0a1b      	lsrs	r3, r3, #8
 800fe6c:	b2db      	uxtb	r3, r3
 800fe6e:	4313      	orrs	r3, r2
 800fe70:	617b      	str	r3, [r7, #20]
  }

  return (u16_t)sum;
 800fe72:	697b      	ldr	r3, [r7, #20]
 800fe74:	b29b      	uxth	r3, r3
}
 800fe76:	4618      	mov	r0, r3
 800fe78:	3724      	adds	r7, #36	; 0x24
 800fe7a:	46bd      	mov	sp, r7
 800fe7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe80:	4770      	bx	lr

0800fe82 <inet_chksum>:
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */

u16_t
inet_chksum(const void *dataptr, u16_t len)
{
 800fe82:	b580      	push	{r7, lr}
 800fe84:	b082      	sub	sp, #8
 800fe86:	af00      	add	r7, sp, #0
 800fe88:	6078      	str	r0, [r7, #4]
 800fe8a:	460b      	mov	r3, r1
 800fe8c:	807b      	strh	r3, [r7, #2]
  return (u16_t)~(unsigned int)LWIP_CHKSUM(dataptr, len);
 800fe8e:	887b      	ldrh	r3, [r7, #2]
 800fe90:	4619      	mov	r1, r3
 800fe92:	6878      	ldr	r0, [r7, #4]
 800fe94:	f7ff ff98 	bl	800fdc8 <lwip_standard_chksum>
 800fe98:	4603      	mov	r3, r0
 800fe9a:	43db      	mvns	r3, r3
 800fe9c:	b29b      	uxth	r3, r3
}
 800fe9e:	4618      	mov	r0, r3
 800fea0:	3708      	adds	r7, #8
 800fea2:	46bd      	mov	sp, r7
 800fea4:	bd80      	pop	{r7, pc}

0800fea6 <inet_chksum_pbuf>:
 * @param p pbuf chain over that the checksum should be calculated
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */
u16_t
inet_chksum_pbuf(struct pbuf *p)
{
 800fea6:	b580      	push	{r7, lr}
 800fea8:	b086      	sub	sp, #24
 800feaa:	af00      	add	r7, sp, #0
 800feac:	6078      	str	r0, [r7, #4]
  u32_t acc;
  struct pbuf *q;
  int swapped = 0;
 800feae:	2300      	movs	r3, #0
 800feb0:	60fb      	str	r3, [r7, #12]

  acc = 0;
 800feb2:	2300      	movs	r3, #0
 800feb4:	617b      	str	r3, [r7, #20]
  for (q = p; q != NULL; q = q->next) {
 800feb6:	687b      	ldr	r3, [r7, #4]
 800feb8:	613b      	str	r3, [r7, #16]
 800feba:	e02b      	b.n	800ff14 <inet_chksum_pbuf+0x6e>
    acc += LWIP_CHKSUM(q->payload, q->len);
 800febc:	693b      	ldr	r3, [r7, #16]
 800febe:	685a      	ldr	r2, [r3, #4]
 800fec0:	693b      	ldr	r3, [r7, #16]
 800fec2:	895b      	ldrh	r3, [r3, #10]
 800fec4:	4619      	mov	r1, r3
 800fec6:	4610      	mov	r0, r2
 800fec8:	f7ff ff7e 	bl	800fdc8 <lwip_standard_chksum>
 800fecc:	4603      	mov	r3, r0
 800fece:	461a      	mov	r2, r3
 800fed0:	697b      	ldr	r3, [r7, #20]
 800fed2:	4413      	add	r3, r2
 800fed4:	617b      	str	r3, [r7, #20]
    acc = FOLD_U32T(acc);
 800fed6:	697b      	ldr	r3, [r7, #20]
 800fed8:	0c1a      	lsrs	r2, r3, #16
 800feda:	697b      	ldr	r3, [r7, #20]
 800fedc:	b29b      	uxth	r3, r3
 800fede:	4413      	add	r3, r2
 800fee0:	617b      	str	r3, [r7, #20]
    if (q->len % 2 != 0) {
 800fee2:	693b      	ldr	r3, [r7, #16]
 800fee4:	895b      	ldrh	r3, [r3, #10]
 800fee6:	f003 0301 	and.w	r3, r3, #1
 800feea:	b29b      	uxth	r3, r3
 800feec:	2b00      	cmp	r3, #0
 800feee:	d00e      	beq.n	800ff0e <inet_chksum_pbuf+0x68>
      swapped = !swapped;
 800fef0:	68fb      	ldr	r3, [r7, #12]
 800fef2:	2b00      	cmp	r3, #0
 800fef4:	bf0c      	ite	eq
 800fef6:	2301      	moveq	r3, #1
 800fef8:	2300      	movne	r3, #0
 800fefa:	b2db      	uxtb	r3, r3
 800fefc:	60fb      	str	r3, [r7, #12]
      acc = SWAP_BYTES_IN_WORD(acc);
 800fefe:	697b      	ldr	r3, [r7, #20]
 800ff00:	021b      	lsls	r3, r3, #8
 800ff02:	b29a      	uxth	r2, r3
 800ff04:	697b      	ldr	r3, [r7, #20]
 800ff06:	0a1b      	lsrs	r3, r3, #8
 800ff08:	b2db      	uxtb	r3, r3
 800ff0a:	4313      	orrs	r3, r2
 800ff0c:	617b      	str	r3, [r7, #20]
  for (q = p; q != NULL; q = q->next) {
 800ff0e:	693b      	ldr	r3, [r7, #16]
 800ff10:	681b      	ldr	r3, [r3, #0]
 800ff12:	613b      	str	r3, [r7, #16]
 800ff14:	693b      	ldr	r3, [r7, #16]
 800ff16:	2b00      	cmp	r3, #0
 800ff18:	d1d0      	bne.n	800febc <inet_chksum_pbuf+0x16>
    }
  }

  if (swapped) {
 800ff1a:	68fb      	ldr	r3, [r7, #12]
 800ff1c:	2b00      	cmp	r3, #0
 800ff1e:	d007      	beq.n	800ff30 <inet_chksum_pbuf+0x8a>
    acc = SWAP_BYTES_IN_WORD(acc);
 800ff20:	697b      	ldr	r3, [r7, #20]
 800ff22:	021b      	lsls	r3, r3, #8
 800ff24:	b29a      	uxth	r2, r3
 800ff26:	697b      	ldr	r3, [r7, #20]
 800ff28:	0a1b      	lsrs	r3, r3, #8
 800ff2a:	b2db      	uxtb	r3, r3
 800ff2c:	4313      	orrs	r3, r2
 800ff2e:	617b      	str	r3, [r7, #20]
  }
  return (u16_t)~(acc & 0xffffUL);
 800ff30:	697b      	ldr	r3, [r7, #20]
 800ff32:	b29b      	uxth	r3, r3
 800ff34:	43db      	mvns	r3, r3
 800ff36:	b29b      	uxth	r3, r3
}
 800ff38:	4618      	mov	r0, r3
 800ff3a:	3718      	adds	r7, #24
 800ff3c:	46bd      	mov	sp, r7
 800ff3e:	bd80      	pop	{r7, pc}

0800ff40 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 800ff40:	b580      	push	{r7, lr}
 800ff42:	b082      	sub	sp, #8
 800ff44:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 800ff46:	2300      	movs	r3, #0
 800ff48:	607b      	str	r3, [r7, #4]
  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
#endif /* !NO_SYS */
  mem_init();
 800ff4a:	f000 f8d3 	bl	80100f4 <mem_init>
  memp_init();
 800ff4e:	f000 fbc5 	bl	80106dc <memp_init>
  pbuf_init();
  netif_init();
 800ff52:	f000 fcc3 	bl	80108dc <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 800ff56:	f007 ff3d 	bl	8017dd4 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 800ff5a:	f001 fe2b 	bl	8011bb4 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 800ff5e:	f007 feaf 	bl	8017cc0 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 800ff62:	bf00      	nop
 800ff64:	3708      	adds	r7, #8
 800ff66:	46bd      	mov	sp, r7
 800ff68:	bd80      	pop	{r7, pc}
	...

0800ff6c <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 800ff6c:	b480      	push	{r7}
 800ff6e:	b083      	sub	sp, #12
 800ff70:	af00      	add	r7, sp, #0
 800ff72:	6078      	str	r0, [r7, #4]
  return (struct mem *)(void *)&ram[ptr];
 800ff74:	4b04      	ldr	r3, [pc, #16]	; (800ff88 <ptr_to_mem+0x1c>)
 800ff76:	681a      	ldr	r2, [r3, #0]
 800ff78:	687b      	ldr	r3, [r7, #4]
 800ff7a:	4413      	add	r3, r2
}
 800ff7c:	4618      	mov	r0, r3
 800ff7e:	370c      	adds	r7, #12
 800ff80:	46bd      	mov	sp, r7
 800ff82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff86:	4770      	bx	lr
 800ff88:	200008e8 	.word	0x200008e8

0800ff8c <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 800ff8c:	b480      	push	{r7}
 800ff8e:	b083      	sub	sp, #12
 800ff90:	af00      	add	r7, sp, #0
 800ff92:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 800ff94:	4b04      	ldr	r3, [pc, #16]	; (800ffa8 <mem_to_ptr+0x1c>)
 800ff96:	681b      	ldr	r3, [r3, #0]
 800ff98:	687a      	ldr	r2, [r7, #4]
 800ff9a:	1ad3      	subs	r3, r2, r3
}
 800ff9c:	4618      	mov	r0, r3
 800ff9e:	370c      	adds	r7, #12
 800ffa0:	46bd      	mov	sp, r7
 800ffa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ffa6:	4770      	bx	lr
 800ffa8:	200008e8 	.word	0x200008e8

0800ffac <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 800ffac:	b590      	push	{r4, r7, lr}
 800ffae:	b085      	sub	sp, #20
 800ffb0:	af00      	add	r7, sp, #0
 800ffb2:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 800ffb4:	4b45      	ldr	r3, [pc, #276]	; (80100cc <plug_holes+0x120>)
 800ffb6:	681b      	ldr	r3, [r3, #0]
 800ffb8:	687a      	ldr	r2, [r7, #4]
 800ffba:	429a      	cmp	r2, r3
 800ffbc:	d206      	bcs.n	800ffcc <plug_holes+0x20>
 800ffbe:	4b44      	ldr	r3, [pc, #272]	; (80100d0 <plug_holes+0x124>)
 800ffc0:	f240 12df 	movw	r2, #479	; 0x1df
 800ffc4:	4943      	ldr	r1, [pc, #268]	; (80100d4 <plug_holes+0x128>)
 800ffc6:	4844      	ldr	r0, [pc, #272]	; (80100d8 <plug_holes+0x12c>)
 800ffc8:	f00b f976 	bl	801b2b8 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 800ffcc:	4b43      	ldr	r3, [pc, #268]	; (80100dc <plug_holes+0x130>)
 800ffce:	681b      	ldr	r3, [r3, #0]
 800ffd0:	687a      	ldr	r2, [r7, #4]
 800ffd2:	429a      	cmp	r2, r3
 800ffd4:	d306      	bcc.n	800ffe4 <plug_holes+0x38>
 800ffd6:	4b3e      	ldr	r3, [pc, #248]	; (80100d0 <plug_holes+0x124>)
 800ffd8:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800ffdc:	4940      	ldr	r1, [pc, #256]	; (80100e0 <plug_holes+0x134>)
 800ffde:	483e      	ldr	r0, [pc, #248]	; (80100d8 <plug_holes+0x12c>)
 800ffe0:	f00b f96a 	bl	801b2b8 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 800ffe4:	687b      	ldr	r3, [r7, #4]
 800ffe6:	7a1b      	ldrb	r3, [r3, #8]
 800ffe8:	2b00      	cmp	r3, #0
 800ffea:	d006      	beq.n	800fffa <plug_holes+0x4e>
 800ffec:	4b38      	ldr	r3, [pc, #224]	; (80100d0 <plug_holes+0x124>)
 800ffee:	f240 12e1 	movw	r2, #481	; 0x1e1
 800fff2:	493c      	ldr	r1, [pc, #240]	; (80100e4 <plug_holes+0x138>)
 800fff4:	4838      	ldr	r0, [pc, #224]	; (80100d8 <plug_holes+0x12c>)
 800fff6:	f00b f95f 	bl	801b2b8 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 800fffa:	687b      	ldr	r3, [r7, #4]
 800fffc:	681b      	ldr	r3, [r3, #0]
 800fffe:	4a3a      	ldr	r2, [pc, #232]	; (80100e8 <plug_holes+0x13c>)
 8010000:	4293      	cmp	r3, r2
 8010002:	d906      	bls.n	8010012 <plug_holes+0x66>
 8010004:	4b32      	ldr	r3, [pc, #200]	; (80100d0 <plug_holes+0x124>)
 8010006:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 801000a:	4938      	ldr	r1, [pc, #224]	; (80100ec <plug_holes+0x140>)
 801000c:	4832      	ldr	r0, [pc, #200]	; (80100d8 <plug_holes+0x12c>)
 801000e:	f00b f953 	bl	801b2b8 <iprintf>

  nmem = ptr_to_mem(mem->next);
 8010012:	687b      	ldr	r3, [r7, #4]
 8010014:	681b      	ldr	r3, [r3, #0]
 8010016:	4618      	mov	r0, r3
 8010018:	f7ff ffa8 	bl	800ff6c <ptr_to_mem>
 801001c:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 801001e:	687a      	ldr	r2, [r7, #4]
 8010020:	68fb      	ldr	r3, [r7, #12]
 8010022:	429a      	cmp	r2, r3
 8010024:	d024      	beq.n	8010070 <plug_holes+0xc4>
 8010026:	68fb      	ldr	r3, [r7, #12]
 8010028:	7a1b      	ldrb	r3, [r3, #8]
 801002a:	2b00      	cmp	r3, #0
 801002c:	d120      	bne.n	8010070 <plug_holes+0xc4>
 801002e:	4b2b      	ldr	r3, [pc, #172]	; (80100dc <plug_holes+0x130>)
 8010030:	681b      	ldr	r3, [r3, #0]
 8010032:	68fa      	ldr	r2, [r7, #12]
 8010034:	429a      	cmp	r2, r3
 8010036:	d01b      	beq.n	8010070 <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 8010038:	4b2d      	ldr	r3, [pc, #180]	; (80100f0 <plug_holes+0x144>)
 801003a:	681b      	ldr	r3, [r3, #0]
 801003c:	68fa      	ldr	r2, [r7, #12]
 801003e:	429a      	cmp	r2, r3
 8010040:	d102      	bne.n	8010048 <plug_holes+0x9c>
      lfree = mem;
 8010042:	4a2b      	ldr	r2, [pc, #172]	; (80100f0 <plug_holes+0x144>)
 8010044:	687b      	ldr	r3, [r7, #4]
 8010046:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 8010048:	68fb      	ldr	r3, [r7, #12]
 801004a:	681a      	ldr	r2, [r3, #0]
 801004c:	687b      	ldr	r3, [r7, #4]
 801004e:	601a      	str	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 8010050:	68fb      	ldr	r3, [r7, #12]
 8010052:	681b      	ldr	r3, [r3, #0]
 8010054:	4a24      	ldr	r2, [pc, #144]	; (80100e8 <plug_holes+0x13c>)
 8010056:	4293      	cmp	r3, r2
 8010058:	d00a      	beq.n	8010070 <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 801005a:	68fb      	ldr	r3, [r7, #12]
 801005c:	681b      	ldr	r3, [r3, #0]
 801005e:	4618      	mov	r0, r3
 8010060:	f7ff ff84 	bl	800ff6c <ptr_to_mem>
 8010064:	4604      	mov	r4, r0
 8010066:	6878      	ldr	r0, [r7, #4]
 8010068:	f7ff ff90 	bl	800ff8c <mem_to_ptr>
 801006c:	4603      	mov	r3, r0
 801006e:	6063      	str	r3, [r4, #4]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 8010070:	687b      	ldr	r3, [r7, #4]
 8010072:	685b      	ldr	r3, [r3, #4]
 8010074:	4618      	mov	r0, r3
 8010076:	f7ff ff79 	bl	800ff6c <ptr_to_mem>
 801007a:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 801007c:	68ba      	ldr	r2, [r7, #8]
 801007e:	687b      	ldr	r3, [r7, #4]
 8010080:	429a      	cmp	r2, r3
 8010082:	d01f      	beq.n	80100c4 <plug_holes+0x118>
 8010084:	68bb      	ldr	r3, [r7, #8]
 8010086:	7a1b      	ldrb	r3, [r3, #8]
 8010088:	2b00      	cmp	r3, #0
 801008a:	d11b      	bne.n	80100c4 <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 801008c:	4b18      	ldr	r3, [pc, #96]	; (80100f0 <plug_holes+0x144>)
 801008e:	681b      	ldr	r3, [r3, #0]
 8010090:	687a      	ldr	r2, [r7, #4]
 8010092:	429a      	cmp	r2, r3
 8010094:	d102      	bne.n	801009c <plug_holes+0xf0>
      lfree = pmem;
 8010096:	4a16      	ldr	r2, [pc, #88]	; (80100f0 <plug_holes+0x144>)
 8010098:	68bb      	ldr	r3, [r7, #8]
 801009a:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 801009c:	687b      	ldr	r3, [r7, #4]
 801009e:	681a      	ldr	r2, [r3, #0]
 80100a0:	68bb      	ldr	r3, [r7, #8]
 80100a2:	601a      	str	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 80100a4:	687b      	ldr	r3, [r7, #4]
 80100a6:	681b      	ldr	r3, [r3, #0]
 80100a8:	4a0f      	ldr	r2, [pc, #60]	; (80100e8 <plug_holes+0x13c>)
 80100aa:	4293      	cmp	r3, r2
 80100ac:	d00a      	beq.n	80100c4 <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 80100ae:	687b      	ldr	r3, [r7, #4]
 80100b0:	681b      	ldr	r3, [r3, #0]
 80100b2:	4618      	mov	r0, r3
 80100b4:	f7ff ff5a 	bl	800ff6c <ptr_to_mem>
 80100b8:	4604      	mov	r4, r0
 80100ba:	68b8      	ldr	r0, [r7, #8]
 80100bc:	f7ff ff66 	bl	800ff8c <mem_to_ptr>
 80100c0:	4603      	mov	r3, r0
 80100c2:	6063      	str	r3, [r4, #4]
    }
  }
}
 80100c4:	bf00      	nop
 80100c6:	3714      	adds	r7, #20
 80100c8:	46bd      	mov	sp, r7
 80100ca:	bd90      	pop	{r4, r7, pc}
 80100cc:	200008e8 	.word	0x200008e8
 80100d0:	0801e358 	.word	0x0801e358
 80100d4:	0801e388 	.word	0x0801e388
 80100d8:	0801e3a0 	.word	0x0801e3a0
 80100dc:	200008ec 	.word	0x200008ec
 80100e0:	0801e3c8 	.word	0x0801e3c8
 80100e4:	0801e3e4 	.word	0x0801e3e4
 80100e8:	0001ffe8 	.word	0x0001ffe8
 80100ec:	0801e400 	.word	0x0801e400
 80100f0:	200008f0 	.word	0x200008f0

080100f4 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 80100f4:	b580      	push	{r7, lr}
 80100f6:	b082      	sub	sp, #8
 80100f8:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 80100fa:	4b14      	ldr	r3, [pc, #80]	; (801014c <mem_init+0x58>)
 80100fc:	4a14      	ldr	r2, [pc, #80]	; (8010150 <mem_init+0x5c>)
 80100fe:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 8010100:	4b12      	ldr	r3, [pc, #72]	; (801014c <mem_init+0x58>)
 8010102:	681b      	ldr	r3, [r3, #0]
 8010104:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 8010106:	687b      	ldr	r3, [r7, #4]
 8010108:	4a12      	ldr	r2, [pc, #72]	; (8010154 <mem_init+0x60>)
 801010a:	601a      	str	r2, [r3, #0]
  mem->prev = 0;
 801010c:	687b      	ldr	r3, [r7, #4]
 801010e:	2200      	movs	r2, #0
 8010110:	605a      	str	r2, [r3, #4]
  mem->used = 0;
 8010112:	687b      	ldr	r3, [r7, #4]
 8010114:	2200      	movs	r2, #0
 8010116:	721a      	strb	r2, [r3, #8]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 8010118:	480e      	ldr	r0, [pc, #56]	; (8010154 <mem_init+0x60>)
 801011a:	f7ff ff27 	bl	800ff6c <ptr_to_mem>
 801011e:	4603      	mov	r3, r0
 8010120:	4a0d      	ldr	r2, [pc, #52]	; (8010158 <mem_init+0x64>)
 8010122:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 8010124:	4b0c      	ldr	r3, [pc, #48]	; (8010158 <mem_init+0x64>)
 8010126:	681b      	ldr	r3, [r3, #0]
 8010128:	2201      	movs	r2, #1
 801012a:	721a      	strb	r2, [r3, #8]
  ram_end->next = MEM_SIZE_ALIGNED;
 801012c:	4b0a      	ldr	r3, [pc, #40]	; (8010158 <mem_init+0x64>)
 801012e:	681b      	ldr	r3, [r3, #0]
 8010130:	4a08      	ldr	r2, [pc, #32]	; (8010154 <mem_init+0x60>)
 8010132:	601a      	str	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 8010134:	4b08      	ldr	r3, [pc, #32]	; (8010158 <mem_init+0x64>)
 8010136:	681b      	ldr	r3, [r3, #0]
 8010138:	4a06      	ldr	r2, [pc, #24]	; (8010154 <mem_init+0x60>)
 801013a:	605a      	str	r2, [r3, #4]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 801013c:	4b03      	ldr	r3, [pc, #12]	; (801014c <mem_init+0x58>)
 801013e:	681b      	ldr	r3, [r3, #0]
 8010140:	4a06      	ldr	r2, [pc, #24]	; (801015c <mem_init+0x68>)
 8010142:	6013      	str	r3, [r2, #0]
  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
    LWIP_ASSERT("failed to create mem_mutex", 0);
  }
}
 8010144:	bf00      	nop
 8010146:	3708      	adds	r7, #8
 8010148:	46bd      	mov	sp, r7
 801014a:	bd80      	pop	{r7, pc}
 801014c:	200008e8 	.word	0x200008e8
 8010150:	30020000 	.word	0x30020000
 8010154:	0001ffe8 	.word	0x0001ffe8
 8010158:	200008ec 	.word	0x200008ec
 801015c:	200008f0 	.word	0x200008f0

08010160 <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 8010160:	b580      	push	{r7, lr}
 8010162:	b086      	sub	sp, #24
 8010164:	af00      	add	r7, sp, #0
 8010166:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 8010168:	6878      	ldr	r0, [r7, #4]
 801016a:	f7ff ff0f 	bl	800ff8c <mem_to_ptr>
 801016e:	6178      	str	r0, [r7, #20]
  nmem = ptr_to_mem(mem->next);
 8010170:	687b      	ldr	r3, [r7, #4]
 8010172:	681b      	ldr	r3, [r3, #0]
 8010174:	4618      	mov	r0, r3
 8010176:	f7ff fef9 	bl	800ff6c <ptr_to_mem>
 801017a:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 801017c:	687b      	ldr	r3, [r7, #4]
 801017e:	685b      	ldr	r3, [r3, #4]
 8010180:	4618      	mov	r0, r3
 8010182:	f7ff fef3 	bl	800ff6c <ptr_to_mem>
 8010186:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8010188:	687b      	ldr	r3, [r7, #4]
 801018a:	681b      	ldr	r3, [r3, #0]
 801018c:	4a11      	ldr	r2, [pc, #68]	; (80101d4 <mem_link_valid+0x74>)
 801018e:	4293      	cmp	r3, r2
 8010190:	d818      	bhi.n	80101c4 <mem_link_valid+0x64>
 8010192:	687b      	ldr	r3, [r7, #4]
 8010194:	685b      	ldr	r3, [r3, #4]
 8010196:	4a0f      	ldr	r2, [pc, #60]	; (80101d4 <mem_link_valid+0x74>)
 8010198:	4293      	cmp	r3, r2
 801019a:	d813      	bhi.n	80101c4 <mem_link_valid+0x64>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 801019c:	687b      	ldr	r3, [r7, #4]
 801019e:	685b      	ldr	r3, [r3, #4]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 80101a0:	697a      	ldr	r2, [r7, #20]
 80101a2:	429a      	cmp	r2, r3
 80101a4:	d004      	beq.n	80101b0 <mem_link_valid+0x50>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 80101a6:	68fb      	ldr	r3, [r7, #12]
 80101a8:	681b      	ldr	r3, [r3, #0]
 80101aa:	697a      	ldr	r2, [r7, #20]
 80101ac:	429a      	cmp	r2, r3
 80101ae:	d109      	bne.n	80101c4 <mem_link_valid+0x64>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 80101b0:	4b09      	ldr	r3, [pc, #36]	; (80101d8 <mem_link_valid+0x78>)
 80101b2:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 80101b4:	693a      	ldr	r2, [r7, #16]
 80101b6:	429a      	cmp	r2, r3
 80101b8:	d006      	beq.n	80101c8 <mem_link_valid+0x68>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 80101ba:	693b      	ldr	r3, [r7, #16]
 80101bc:	685b      	ldr	r3, [r3, #4]
 80101be:	697a      	ldr	r2, [r7, #20]
 80101c0:	429a      	cmp	r2, r3
 80101c2:	d001      	beq.n	80101c8 <mem_link_valid+0x68>
    return 0;
 80101c4:	2300      	movs	r3, #0
 80101c6:	e000      	b.n	80101ca <mem_link_valid+0x6a>
  }
  return 1;
 80101c8:	2301      	movs	r3, #1
}
 80101ca:	4618      	mov	r0, r3
 80101cc:	3718      	adds	r7, #24
 80101ce:	46bd      	mov	sp, r7
 80101d0:	bd80      	pop	{r7, pc}
 80101d2:	bf00      	nop
 80101d4:	0001ffe8 	.word	0x0001ffe8
 80101d8:	200008ec 	.word	0x200008ec

080101dc <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 80101dc:	b580      	push	{r7, lr}
 80101de:	b084      	sub	sp, #16
 80101e0:	af00      	add	r7, sp, #0
 80101e2:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 80101e4:	687b      	ldr	r3, [r7, #4]
 80101e6:	2b00      	cmp	r3, #0
 80101e8:	d04c      	beq.n	8010284 <mem_free+0xa8>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 80101ea:	687b      	ldr	r3, [r7, #4]
 80101ec:	f003 0303 	and.w	r3, r3, #3
 80101f0:	2b00      	cmp	r3, #0
 80101f2:	d007      	beq.n	8010204 <mem_free+0x28>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 80101f4:	4b25      	ldr	r3, [pc, #148]	; (801028c <mem_free+0xb0>)
 80101f6:	f240 2273 	movw	r2, #627	; 0x273
 80101fa:	4925      	ldr	r1, [pc, #148]	; (8010290 <mem_free+0xb4>)
 80101fc:	4825      	ldr	r0, [pc, #148]	; (8010294 <mem_free+0xb8>)
 80101fe:	f00b f85b 	bl	801b2b8 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8010202:	e040      	b.n	8010286 <mem_free+0xaa>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8010204:	687b      	ldr	r3, [r7, #4]
 8010206:	3b0c      	subs	r3, #12
 8010208:	60fb      	str	r3, [r7, #12]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 801020a:	4b23      	ldr	r3, [pc, #140]	; (8010298 <mem_free+0xbc>)
 801020c:	681b      	ldr	r3, [r3, #0]
 801020e:	68fa      	ldr	r2, [r7, #12]
 8010210:	429a      	cmp	r2, r3
 8010212:	d306      	bcc.n	8010222 <mem_free+0x46>
 8010214:	687b      	ldr	r3, [r7, #4]
 8010216:	f103 020c 	add.w	r2, r3, #12
 801021a:	4b20      	ldr	r3, [pc, #128]	; (801029c <mem_free+0xc0>)
 801021c:	681b      	ldr	r3, [r3, #0]
 801021e:	429a      	cmp	r2, r3
 8010220:	d907      	bls.n	8010232 <mem_free+0x56>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 8010222:	4b1a      	ldr	r3, [pc, #104]	; (801028c <mem_free+0xb0>)
 8010224:	f240 227f 	movw	r2, #639	; 0x27f
 8010228:	491d      	ldr	r1, [pc, #116]	; (80102a0 <mem_free+0xc4>)
 801022a:	481a      	ldr	r0, [pc, #104]	; (8010294 <mem_free+0xb8>)
 801022c:	f00b f844 	bl	801b2b8 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8010230:	e029      	b.n	8010286 <mem_free+0xaa>
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
  /* mem has to be in a used state */
  if (!mem->used) {
 8010232:	68fb      	ldr	r3, [r7, #12]
 8010234:	7a1b      	ldrb	r3, [r3, #8]
 8010236:	2b00      	cmp	r3, #0
 8010238:	d107      	bne.n	801024a <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 801023a:	4b14      	ldr	r3, [pc, #80]	; (801028c <mem_free+0xb0>)
 801023c:	f44f 7223 	mov.w	r2, #652	; 0x28c
 8010240:	4918      	ldr	r1, [pc, #96]	; (80102a4 <mem_free+0xc8>)
 8010242:	4814      	ldr	r0, [pc, #80]	; (8010294 <mem_free+0xb8>)
 8010244:	f00b f838 	bl	801b2b8 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8010248:	e01d      	b.n	8010286 <mem_free+0xaa>
  }

  if (!mem_link_valid(mem)) {
 801024a:	68f8      	ldr	r0, [r7, #12]
 801024c:	f7ff ff88 	bl	8010160 <mem_link_valid>
 8010250:	4603      	mov	r3, r0
 8010252:	2b00      	cmp	r3, #0
 8010254:	d107      	bne.n	8010266 <mem_free+0x8a>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 8010256:	4b0d      	ldr	r3, [pc, #52]	; (801028c <mem_free+0xb0>)
 8010258:	f240 2295 	movw	r2, #661	; 0x295
 801025c:	4912      	ldr	r1, [pc, #72]	; (80102a8 <mem_free+0xcc>)
 801025e:	480d      	ldr	r0, [pc, #52]	; (8010294 <mem_free+0xb8>)
 8010260:	f00b f82a 	bl	801b2b8 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 8010264:	e00f      	b.n	8010286 <mem_free+0xaa>
  }

  /* mem is now unused. */
  mem->used = 0;
 8010266:	68fb      	ldr	r3, [r7, #12]
 8010268:	2200      	movs	r2, #0
 801026a:	721a      	strb	r2, [r3, #8]

  if (mem < lfree) {
 801026c:	4b0f      	ldr	r3, [pc, #60]	; (80102ac <mem_free+0xd0>)
 801026e:	681b      	ldr	r3, [r3, #0]
 8010270:	68fa      	ldr	r2, [r7, #12]
 8010272:	429a      	cmp	r2, r3
 8010274:	d202      	bcs.n	801027c <mem_free+0xa0>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 8010276:	4a0d      	ldr	r2, [pc, #52]	; (80102ac <mem_free+0xd0>)
 8010278:	68fb      	ldr	r3, [r7, #12]
 801027a:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 801027c:	68f8      	ldr	r0, [r7, #12]
 801027e:	f7ff fe95 	bl	800ffac <plug_holes>
 8010282:	e000      	b.n	8010286 <mem_free+0xaa>
    return;
 8010284:	bf00      	nop
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
}
 8010286:	3710      	adds	r7, #16
 8010288:	46bd      	mov	sp, r7
 801028a:	bd80      	pop	{r7, pc}
 801028c:	0801e358 	.word	0x0801e358
 8010290:	0801e42c 	.word	0x0801e42c
 8010294:	0801e3a0 	.word	0x0801e3a0
 8010298:	200008e8 	.word	0x200008e8
 801029c:	200008ec 	.word	0x200008ec
 80102a0:	0801e450 	.word	0x0801e450
 80102a4:	0801e46c 	.word	0x0801e46c
 80102a8:	0801e494 	.word	0x0801e494
 80102ac:	200008f0 	.word	0x200008f0

080102b0 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 80102b0:	b580      	push	{r7, lr}
 80102b2:	b08a      	sub	sp, #40	; 0x28
 80102b4:	af00      	add	r7, sp, #0
 80102b6:	6078      	str	r0, [r7, #4]
 80102b8:	6039      	str	r1, [r7, #0]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 80102ba:	683b      	ldr	r3, [r7, #0]
 80102bc:	3303      	adds	r3, #3
 80102be:	f023 0303 	bic.w	r3, r3, #3
 80102c2:	627b      	str	r3, [r7, #36]	; 0x24
  if (newsize < MIN_SIZE_ALIGNED) {
 80102c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80102c6:	2b0b      	cmp	r3, #11
 80102c8:	d801      	bhi.n	80102ce <mem_trim+0x1e>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 80102ca:	230c      	movs	r3, #12
 80102cc:	627b      	str	r3, [r7, #36]	; 0x24
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 80102ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80102d0:	4a68      	ldr	r2, [pc, #416]	; (8010474 <mem_trim+0x1c4>)
 80102d2:	4293      	cmp	r3, r2
 80102d4:	d803      	bhi.n	80102de <mem_trim+0x2e>
 80102d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80102d8:	683b      	ldr	r3, [r7, #0]
 80102da:	429a      	cmp	r2, r3
 80102dc:	d201      	bcs.n	80102e2 <mem_trim+0x32>
    return NULL;
 80102de:	2300      	movs	r3, #0
 80102e0:	e0c4      	b.n	801046c <mem_trim+0x1bc>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 80102e2:	4b65      	ldr	r3, [pc, #404]	; (8010478 <mem_trim+0x1c8>)
 80102e4:	681b      	ldr	r3, [r3, #0]
 80102e6:	687a      	ldr	r2, [r7, #4]
 80102e8:	429a      	cmp	r2, r3
 80102ea:	d304      	bcc.n	80102f6 <mem_trim+0x46>
 80102ec:	4b63      	ldr	r3, [pc, #396]	; (801047c <mem_trim+0x1cc>)
 80102ee:	681b      	ldr	r3, [r3, #0]
 80102f0:	687a      	ldr	r2, [r7, #4]
 80102f2:	429a      	cmp	r2, r3
 80102f4:	d306      	bcc.n	8010304 <mem_trim+0x54>
 80102f6:	4b62      	ldr	r3, [pc, #392]	; (8010480 <mem_trim+0x1d0>)
 80102f8:	f240 22d1 	movw	r2, #721	; 0x2d1
 80102fc:	4961      	ldr	r1, [pc, #388]	; (8010484 <mem_trim+0x1d4>)
 80102fe:	4862      	ldr	r0, [pc, #392]	; (8010488 <mem_trim+0x1d8>)
 8010300:	f00a ffda 	bl	801b2b8 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 8010304:	4b5c      	ldr	r3, [pc, #368]	; (8010478 <mem_trim+0x1c8>)
 8010306:	681b      	ldr	r3, [r3, #0]
 8010308:	687a      	ldr	r2, [r7, #4]
 801030a:	429a      	cmp	r2, r3
 801030c:	d304      	bcc.n	8010318 <mem_trim+0x68>
 801030e:	4b5b      	ldr	r3, [pc, #364]	; (801047c <mem_trim+0x1cc>)
 8010310:	681b      	ldr	r3, [r3, #0]
 8010312:	687a      	ldr	r2, [r7, #4]
 8010314:	429a      	cmp	r2, r3
 8010316:	d301      	bcc.n	801031c <mem_trim+0x6c>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return rmem;
 8010318:	687b      	ldr	r3, [r7, #4]
 801031a:	e0a7      	b.n	801046c <mem_trim+0x1bc>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 801031c:	687b      	ldr	r3, [r7, #4]
 801031e:	3b0c      	subs	r3, #12
 8010320:	623b      	str	r3, [r7, #32]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 8010322:	6a38      	ldr	r0, [r7, #32]
 8010324:	f7ff fe32 	bl	800ff8c <mem_to_ptr>
 8010328:	61f8      	str	r0, [r7, #28]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 801032a:	6a3b      	ldr	r3, [r7, #32]
 801032c:	681a      	ldr	r2, [r3, #0]
 801032e:	69fb      	ldr	r3, [r7, #28]
 8010330:	1ad3      	subs	r3, r2, r3
 8010332:	3b0c      	subs	r3, #12
 8010334:	61bb      	str	r3, [r7, #24]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 8010336:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010338:	69bb      	ldr	r3, [r7, #24]
 801033a:	429a      	cmp	r2, r3
 801033c:	d906      	bls.n	801034c <mem_trim+0x9c>
 801033e:	4b50      	ldr	r3, [pc, #320]	; (8010480 <mem_trim+0x1d0>)
 8010340:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 8010344:	4951      	ldr	r1, [pc, #324]	; (801048c <mem_trim+0x1dc>)
 8010346:	4850      	ldr	r0, [pc, #320]	; (8010488 <mem_trim+0x1d8>)
 8010348:	f00a ffb6 	bl	801b2b8 <iprintf>
  if (newsize > size) {
 801034c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801034e:	69bb      	ldr	r3, [r7, #24]
 8010350:	429a      	cmp	r2, r3
 8010352:	d901      	bls.n	8010358 <mem_trim+0xa8>
    /* not supported */
    return NULL;
 8010354:	2300      	movs	r3, #0
 8010356:	e089      	b.n	801046c <mem_trim+0x1bc>
  }
  if (newsize == size) {
 8010358:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801035a:	69bb      	ldr	r3, [r7, #24]
 801035c:	429a      	cmp	r2, r3
 801035e:	d101      	bne.n	8010364 <mem_trim+0xb4>
    /* No change in size, simply return */
    return rmem;
 8010360:	687b      	ldr	r3, [r7, #4]
 8010362:	e083      	b.n	801046c <mem_trim+0x1bc>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();

  mem2 = ptr_to_mem(mem->next);
 8010364:	6a3b      	ldr	r3, [r7, #32]
 8010366:	681b      	ldr	r3, [r3, #0]
 8010368:	4618      	mov	r0, r3
 801036a:	f7ff fdff 	bl	800ff6c <ptr_to_mem>
 801036e:	6178      	str	r0, [r7, #20]
  if (mem2->used == 0) {
 8010370:	697b      	ldr	r3, [r7, #20]
 8010372:	7a1b      	ldrb	r3, [r3, #8]
 8010374:	2b00      	cmp	r3, #0
 8010376:	d13c      	bne.n	80103f2 <mem_trim+0x142>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8010378:	6a3b      	ldr	r3, [r7, #32]
 801037a:	681b      	ldr	r3, [r3, #0]
 801037c:	4a3d      	ldr	r2, [pc, #244]	; (8010474 <mem_trim+0x1c4>)
 801037e:	4293      	cmp	r3, r2
 8010380:	d106      	bne.n	8010390 <mem_trim+0xe0>
 8010382:	4b3f      	ldr	r3, [pc, #252]	; (8010480 <mem_trim+0x1d0>)
 8010384:	f240 22f5 	movw	r2, #757	; 0x2f5
 8010388:	4941      	ldr	r1, [pc, #260]	; (8010490 <mem_trim+0x1e0>)
 801038a:	483f      	ldr	r0, [pc, #252]	; (8010488 <mem_trim+0x1d8>)
 801038c:	f00a ff94 	bl	801b2b8 <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 8010390:	697b      	ldr	r3, [r7, #20]
 8010392:	681b      	ldr	r3, [r3, #0]
 8010394:	60fb      	str	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8010396:	69fa      	ldr	r2, [r7, #28]
 8010398:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801039a:	4413      	add	r3, r2
 801039c:	330c      	adds	r3, #12
 801039e:	613b      	str	r3, [r7, #16]
    if (lfree == mem2) {
 80103a0:	4b3c      	ldr	r3, [pc, #240]	; (8010494 <mem_trim+0x1e4>)
 80103a2:	681b      	ldr	r3, [r3, #0]
 80103a4:	697a      	ldr	r2, [r7, #20]
 80103a6:	429a      	cmp	r2, r3
 80103a8:	d105      	bne.n	80103b6 <mem_trim+0x106>
      lfree = ptr_to_mem(ptr2);
 80103aa:	6938      	ldr	r0, [r7, #16]
 80103ac:	f7ff fdde 	bl	800ff6c <ptr_to_mem>
 80103b0:	4603      	mov	r3, r0
 80103b2:	4a38      	ldr	r2, [pc, #224]	; (8010494 <mem_trim+0x1e4>)
 80103b4:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 80103b6:	6938      	ldr	r0, [r7, #16]
 80103b8:	f7ff fdd8 	bl	800ff6c <ptr_to_mem>
 80103bc:	6178      	str	r0, [r7, #20]
    mem2->used = 0;
 80103be:	697b      	ldr	r3, [r7, #20]
 80103c0:	2200      	movs	r2, #0
 80103c2:	721a      	strb	r2, [r3, #8]
    /* restore the next pointer */
    mem2->next = next;
 80103c4:	697b      	ldr	r3, [r7, #20]
 80103c6:	68fa      	ldr	r2, [r7, #12]
 80103c8:	601a      	str	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 80103ca:	697b      	ldr	r3, [r7, #20]
 80103cc:	69fa      	ldr	r2, [r7, #28]
 80103ce:	605a      	str	r2, [r3, #4]
    /* link mem to it */
    mem->next = ptr2;
 80103d0:	6a3b      	ldr	r3, [r7, #32]
 80103d2:	693a      	ldr	r2, [r7, #16]
 80103d4:	601a      	str	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 80103d6:	697b      	ldr	r3, [r7, #20]
 80103d8:	681b      	ldr	r3, [r3, #0]
 80103da:	4a26      	ldr	r2, [pc, #152]	; (8010474 <mem_trim+0x1c4>)
 80103dc:	4293      	cmp	r3, r2
 80103de:	d044      	beq.n	801046a <mem_trim+0x1ba>
      ptr_to_mem(mem2->next)->prev = ptr2;
 80103e0:	697b      	ldr	r3, [r7, #20]
 80103e2:	681b      	ldr	r3, [r3, #0]
 80103e4:	4618      	mov	r0, r3
 80103e6:	f7ff fdc1 	bl	800ff6c <ptr_to_mem>
 80103ea:	4602      	mov	r2, r0
 80103ec:	693b      	ldr	r3, [r7, #16]
 80103ee:	6053      	str	r3, [r2, #4]
 80103f0:	e03b      	b.n	801046a <mem_trim+0x1ba>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 80103f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80103f4:	3318      	adds	r3, #24
 80103f6:	69ba      	ldr	r2, [r7, #24]
 80103f8:	429a      	cmp	r2, r3
 80103fa:	d336      	bcc.n	801046a <mem_trim+0x1ba>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 80103fc:	69fa      	ldr	r2, [r7, #28]
 80103fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010400:	4413      	add	r3, r2
 8010402:	330c      	adds	r3, #12
 8010404:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8010406:	6a3b      	ldr	r3, [r7, #32]
 8010408:	681b      	ldr	r3, [r3, #0]
 801040a:	4a1a      	ldr	r2, [pc, #104]	; (8010474 <mem_trim+0x1c4>)
 801040c:	4293      	cmp	r3, r2
 801040e:	d106      	bne.n	801041e <mem_trim+0x16e>
 8010410:	4b1b      	ldr	r3, [pc, #108]	; (8010480 <mem_trim+0x1d0>)
 8010412:	f240 3216 	movw	r2, #790	; 0x316
 8010416:	491e      	ldr	r1, [pc, #120]	; (8010490 <mem_trim+0x1e0>)
 8010418:	481b      	ldr	r0, [pc, #108]	; (8010488 <mem_trim+0x1d8>)
 801041a:	f00a ff4d 	bl	801b2b8 <iprintf>
    mem2 = ptr_to_mem(ptr2);
 801041e:	6938      	ldr	r0, [r7, #16]
 8010420:	f7ff fda4 	bl	800ff6c <ptr_to_mem>
 8010424:	6178      	str	r0, [r7, #20]
    if (mem2 < lfree) {
 8010426:	4b1b      	ldr	r3, [pc, #108]	; (8010494 <mem_trim+0x1e4>)
 8010428:	681b      	ldr	r3, [r3, #0]
 801042a:	697a      	ldr	r2, [r7, #20]
 801042c:	429a      	cmp	r2, r3
 801042e:	d202      	bcs.n	8010436 <mem_trim+0x186>
      lfree = mem2;
 8010430:	4a18      	ldr	r2, [pc, #96]	; (8010494 <mem_trim+0x1e4>)
 8010432:	697b      	ldr	r3, [r7, #20]
 8010434:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 8010436:	697b      	ldr	r3, [r7, #20]
 8010438:	2200      	movs	r2, #0
 801043a:	721a      	strb	r2, [r3, #8]
    mem2->next = mem->next;
 801043c:	6a3b      	ldr	r3, [r7, #32]
 801043e:	681a      	ldr	r2, [r3, #0]
 8010440:	697b      	ldr	r3, [r7, #20]
 8010442:	601a      	str	r2, [r3, #0]
    mem2->prev = ptr;
 8010444:	697b      	ldr	r3, [r7, #20]
 8010446:	69fa      	ldr	r2, [r7, #28]
 8010448:	605a      	str	r2, [r3, #4]
    mem->next = ptr2;
 801044a:	6a3b      	ldr	r3, [r7, #32]
 801044c:	693a      	ldr	r2, [r7, #16]
 801044e:	601a      	str	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8010450:	697b      	ldr	r3, [r7, #20]
 8010452:	681b      	ldr	r3, [r3, #0]
 8010454:	4a07      	ldr	r2, [pc, #28]	; (8010474 <mem_trim+0x1c4>)
 8010456:	4293      	cmp	r3, r2
 8010458:	d007      	beq.n	801046a <mem_trim+0x1ba>
      ptr_to_mem(mem2->next)->prev = ptr2;
 801045a:	697b      	ldr	r3, [r7, #20]
 801045c:	681b      	ldr	r3, [r3, #0]
 801045e:	4618      	mov	r0, r3
 8010460:	f7ff fd84 	bl	800ff6c <ptr_to_mem>
 8010464:	4602      	mov	r2, r0
 8010466:	693b      	ldr	r3, [r7, #16]
 8010468:	6053      	str	r3, [r2, #4]
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
  return rmem;
 801046a:	687b      	ldr	r3, [r7, #4]
}
 801046c:	4618      	mov	r0, r3
 801046e:	3728      	adds	r7, #40	; 0x28
 8010470:	46bd      	mov	sp, r7
 8010472:	bd80      	pop	{r7, pc}
 8010474:	0001ffe8 	.word	0x0001ffe8
 8010478:	200008e8 	.word	0x200008e8
 801047c:	200008ec 	.word	0x200008ec
 8010480:	0801e358 	.word	0x0801e358
 8010484:	0801e4c8 	.word	0x0801e4c8
 8010488:	0801e3a0 	.word	0x0801e3a0
 801048c:	0801e4e0 	.word	0x0801e4e0
 8010490:	0801e500 	.word	0x0801e500
 8010494:	200008f0 	.word	0x200008f0

08010498 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 8010498:	b580      	push	{r7, lr}
 801049a:	b088      	sub	sp, #32
 801049c:	af00      	add	r7, sp, #0
 801049e:	6078      	str	r0, [r7, #4]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 80104a0:	687b      	ldr	r3, [r7, #4]
 80104a2:	2b00      	cmp	r3, #0
 80104a4:	d101      	bne.n	80104aa <mem_malloc+0x12>
    return NULL;
 80104a6:	2300      	movs	r3, #0
 80104a8:	e0d0      	b.n	801064c <mem_malloc+0x1b4>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 80104aa:	687b      	ldr	r3, [r7, #4]
 80104ac:	3303      	adds	r3, #3
 80104ae:	f023 0303 	bic.w	r3, r3, #3
 80104b2:	61bb      	str	r3, [r7, #24]
  if (size < MIN_SIZE_ALIGNED) {
 80104b4:	69bb      	ldr	r3, [r7, #24]
 80104b6:	2b0b      	cmp	r3, #11
 80104b8:	d801      	bhi.n	80104be <mem_malloc+0x26>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 80104ba:	230c      	movs	r3, #12
 80104bc:	61bb      	str	r3, [r7, #24]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 80104be:	69bb      	ldr	r3, [r7, #24]
 80104c0:	4a64      	ldr	r2, [pc, #400]	; (8010654 <mem_malloc+0x1bc>)
 80104c2:	4293      	cmp	r3, r2
 80104c4:	d803      	bhi.n	80104ce <mem_malloc+0x36>
 80104c6:	69ba      	ldr	r2, [r7, #24]
 80104c8:	687b      	ldr	r3, [r7, #4]
 80104ca:	429a      	cmp	r2, r3
 80104cc:	d201      	bcs.n	80104d2 <mem_malloc+0x3a>
    return NULL;
 80104ce:	2300      	movs	r3, #0
 80104d0:	e0bc      	b.n	801064c <mem_malloc+0x1b4>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 80104d2:	4b61      	ldr	r3, [pc, #388]	; (8010658 <mem_malloc+0x1c0>)
 80104d4:	681b      	ldr	r3, [r3, #0]
 80104d6:	4618      	mov	r0, r3
 80104d8:	f7ff fd58 	bl	800ff8c <mem_to_ptr>
 80104dc:	61f8      	str	r0, [r7, #28]
 80104de:	e0ad      	b.n	801063c <mem_malloc+0x1a4>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 80104e0:	69f8      	ldr	r0, [r7, #28]
 80104e2:	f7ff fd43 	bl	800ff6c <ptr_to_mem>
 80104e6:	6138      	str	r0, [r7, #16]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 80104e8:	693b      	ldr	r3, [r7, #16]
 80104ea:	7a1b      	ldrb	r3, [r3, #8]
 80104ec:	2b00      	cmp	r3, #0
 80104ee:	f040 809f 	bne.w	8010630 <mem_malloc+0x198>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 80104f2:	693b      	ldr	r3, [r7, #16]
 80104f4:	681a      	ldr	r2, [r3, #0]
 80104f6:	69fb      	ldr	r3, [r7, #28]
 80104f8:	1ad3      	subs	r3, r2, r3
 80104fa:	3b0c      	subs	r3, #12
      if ((!mem->used) &&
 80104fc:	69ba      	ldr	r2, [r7, #24]
 80104fe:	429a      	cmp	r2, r3
 8010500:	f200 8096 	bhi.w	8010630 <mem_malloc+0x198>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 8010504:	693b      	ldr	r3, [r7, #16]
 8010506:	681a      	ldr	r2, [r3, #0]
 8010508:	69fb      	ldr	r3, [r7, #28]
 801050a:	1ad3      	subs	r3, r2, r3
 801050c:	f1a3 020c 	sub.w	r2, r3, #12
 8010510:	69bb      	ldr	r3, [r7, #24]
 8010512:	3318      	adds	r3, #24
 8010514:	429a      	cmp	r2, r3
 8010516:	d331      	bcc.n	801057c <mem_malloc+0xe4>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 8010518:	69fa      	ldr	r2, [r7, #28]
 801051a:	69bb      	ldr	r3, [r7, #24]
 801051c:	4413      	add	r3, r2
 801051e:	330c      	adds	r3, #12
 8010520:	60fb      	str	r3, [r7, #12]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 8010522:	68fb      	ldr	r3, [r7, #12]
 8010524:	4a4b      	ldr	r2, [pc, #300]	; (8010654 <mem_malloc+0x1bc>)
 8010526:	4293      	cmp	r3, r2
 8010528:	d106      	bne.n	8010538 <mem_malloc+0xa0>
 801052a:	4b4c      	ldr	r3, [pc, #304]	; (801065c <mem_malloc+0x1c4>)
 801052c:	f240 3287 	movw	r2, #903	; 0x387
 8010530:	494b      	ldr	r1, [pc, #300]	; (8010660 <mem_malloc+0x1c8>)
 8010532:	484c      	ldr	r0, [pc, #304]	; (8010664 <mem_malloc+0x1cc>)
 8010534:	f00a fec0 	bl	801b2b8 <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 8010538:	68f8      	ldr	r0, [r7, #12]
 801053a:	f7ff fd17 	bl	800ff6c <ptr_to_mem>
 801053e:	60b8      	str	r0, [r7, #8]
          mem2->used = 0;
 8010540:	68bb      	ldr	r3, [r7, #8]
 8010542:	2200      	movs	r2, #0
 8010544:	721a      	strb	r2, [r3, #8]
          mem2->next = mem->next;
 8010546:	693b      	ldr	r3, [r7, #16]
 8010548:	681a      	ldr	r2, [r3, #0]
 801054a:	68bb      	ldr	r3, [r7, #8]
 801054c:	601a      	str	r2, [r3, #0]
          mem2->prev = ptr;
 801054e:	68bb      	ldr	r3, [r7, #8]
 8010550:	69fa      	ldr	r2, [r7, #28]
 8010552:	605a      	str	r2, [r3, #4]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 8010554:	693b      	ldr	r3, [r7, #16]
 8010556:	68fa      	ldr	r2, [r7, #12]
 8010558:	601a      	str	r2, [r3, #0]
          mem->used = 1;
 801055a:	693b      	ldr	r3, [r7, #16]
 801055c:	2201      	movs	r2, #1
 801055e:	721a      	strb	r2, [r3, #8]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 8010560:	68bb      	ldr	r3, [r7, #8]
 8010562:	681b      	ldr	r3, [r3, #0]
 8010564:	4a3b      	ldr	r2, [pc, #236]	; (8010654 <mem_malloc+0x1bc>)
 8010566:	4293      	cmp	r3, r2
 8010568:	d00b      	beq.n	8010582 <mem_malloc+0xea>
            ptr_to_mem(mem2->next)->prev = ptr2;
 801056a:	68bb      	ldr	r3, [r7, #8]
 801056c:	681b      	ldr	r3, [r3, #0]
 801056e:	4618      	mov	r0, r3
 8010570:	f7ff fcfc 	bl	800ff6c <ptr_to_mem>
 8010574:	4602      	mov	r2, r0
 8010576:	68fb      	ldr	r3, [r7, #12]
 8010578:	6053      	str	r3, [r2, #4]
 801057a:	e002      	b.n	8010582 <mem_malloc+0xea>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 801057c:	693b      	ldr	r3, [r7, #16]
 801057e:	2201      	movs	r2, #1
 8010580:	721a      	strb	r2, [r3, #8]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 8010582:	4b35      	ldr	r3, [pc, #212]	; (8010658 <mem_malloc+0x1c0>)
 8010584:	681b      	ldr	r3, [r3, #0]
 8010586:	693a      	ldr	r2, [r7, #16]
 8010588:	429a      	cmp	r2, r3
 801058a:	d127      	bne.n	80105dc <mem_malloc+0x144>
          struct mem *cur = lfree;
 801058c:	4b32      	ldr	r3, [pc, #200]	; (8010658 <mem_malloc+0x1c0>)
 801058e:	681b      	ldr	r3, [r3, #0]
 8010590:	617b      	str	r3, [r7, #20]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 8010592:	e005      	b.n	80105a0 <mem_malloc+0x108>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 8010594:	697b      	ldr	r3, [r7, #20]
 8010596:	681b      	ldr	r3, [r3, #0]
 8010598:	4618      	mov	r0, r3
 801059a:	f7ff fce7 	bl	800ff6c <ptr_to_mem>
 801059e:	6178      	str	r0, [r7, #20]
          while (cur->used && cur != ram_end) {
 80105a0:	697b      	ldr	r3, [r7, #20]
 80105a2:	7a1b      	ldrb	r3, [r3, #8]
 80105a4:	2b00      	cmp	r3, #0
 80105a6:	d004      	beq.n	80105b2 <mem_malloc+0x11a>
 80105a8:	4b2f      	ldr	r3, [pc, #188]	; (8010668 <mem_malloc+0x1d0>)
 80105aa:	681b      	ldr	r3, [r3, #0]
 80105ac:	697a      	ldr	r2, [r7, #20]
 80105ae:	429a      	cmp	r2, r3
 80105b0:	d1f0      	bne.n	8010594 <mem_malloc+0xfc>
          }
          lfree = cur;
 80105b2:	4a29      	ldr	r2, [pc, #164]	; (8010658 <mem_malloc+0x1c0>)
 80105b4:	697b      	ldr	r3, [r7, #20]
 80105b6:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 80105b8:	4b27      	ldr	r3, [pc, #156]	; (8010658 <mem_malloc+0x1c0>)
 80105ba:	681a      	ldr	r2, [r3, #0]
 80105bc:	4b2a      	ldr	r3, [pc, #168]	; (8010668 <mem_malloc+0x1d0>)
 80105be:	681b      	ldr	r3, [r3, #0]
 80105c0:	429a      	cmp	r2, r3
 80105c2:	d00b      	beq.n	80105dc <mem_malloc+0x144>
 80105c4:	4b24      	ldr	r3, [pc, #144]	; (8010658 <mem_malloc+0x1c0>)
 80105c6:	681b      	ldr	r3, [r3, #0]
 80105c8:	7a1b      	ldrb	r3, [r3, #8]
 80105ca:	2b00      	cmp	r3, #0
 80105cc:	d006      	beq.n	80105dc <mem_malloc+0x144>
 80105ce:	4b23      	ldr	r3, [pc, #140]	; (801065c <mem_malloc+0x1c4>)
 80105d0:	f240 32b5 	movw	r2, #949	; 0x3b5
 80105d4:	4925      	ldr	r1, [pc, #148]	; (801066c <mem_malloc+0x1d4>)
 80105d6:	4823      	ldr	r0, [pc, #140]	; (8010664 <mem_malloc+0x1cc>)
 80105d8:	f00a fe6e 	bl	801b2b8 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 80105dc:	693a      	ldr	r2, [r7, #16]
 80105de:	69bb      	ldr	r3, [r7, #24]
 80105e0:	4413      	add	r3, r2
 80105e2:	330c      	adds	r3, #12
 80105e4:	4a20      	ldr	r2, [pc, #128]	; (8010668 <mem_malloc+0x1d0>)
 80105e6:	6812      	ldr	r2, [r2, #0]
 80105e8:	4293      	cmp	r3, r2
 80105ea:	d906      	bls.n	80105fa <mem_malloc+0x162>
 80105ec:	4b1b      	ldr	r3, [pc, #108]	; (801065c <mem_malloc+0x1c4>)
 80105ee:	f240 32b9 	movw	r2, #953	; 0x3b9
 80105f2:	491f      	ldr	r1, [pc, #124]	; (8010670 <mem_malloc+0x1d8>)
 80105f4:	481b      	ldr	r0, [pc, #108]	; (8010664 <mem_malloc+0x1cc>)
 80105f6:	f00a fe5f 	bl	801b2b8 <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 80105fa:	693b      	ldr	r3, [r7, #16]
 80105fc:	f003 0303 	and.w	r3, r3, #3
 8010600:	2b00      	cmp	r3, #0
 8010602:	d006      	beq.n	8010612 <mem_malloc+0x17a>
 8010604:	4b15      	ldr	r3, [pc, #84]	; (801065c <mem_malloc+0x1c4>)
 8010606:	f240 32bb 	movw	r2, #955	; 0x3bb
 801060a:	491a      	ldr	r1, [pc, #104]	; (8010674 <mem_malloc+0x1dc>)
 801060c:	4815      	ldr	r0, [pc, #84]	; (8010664 <mem_malloc+0x1cc>)
 801060e:	f00a fe53 	bl	801b2b8 <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 8010612:	693b      	ldr	r3, [r7, #16]
 8010614:	f003 0303 	and.w	r3, r3, #3
 8010618:	2b00      	cmp	r3, #0
 801061a:	d006      	beq.n	801062a <mem_malloc+0x192>
 801061c:	4b0f      	ldr	r3, [pc, #60]	; (801065c <mem_malloc+0x1c4>)
 801061e:	f240 32bd 	movw	r2, #957	; 0x3bd
 8010622:	4915      	ldr	r1, [pc, #84]	; (8010678 <mem_malloc+0x1e0>)
 8010624:	480f      	ldr	r0, [pc, #60]	; (8010664 <mem_malloc+0x1cc>)
 8010626:	f00a fe47 	bl	801b2b8 <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 801062a:	693b      	ldr	r3, [r7, #16]
 801062c:	330c      	adds	r3, #12
 801062e:	e00d      	b.n	801064c <mem_malloc+0x1b4>
         ptr = ptr_to_mem(ptr)->next) {
 8010630:	69f8      	ldr	r0, [r7, #28]
 8010632:	f7ff fc9b 	bl	800ff6c <ptr_to_mem>
 8010636:	4603      	mov	r3, r0
 8010638:	681b      	ldr	r3, [r3, #0]
 801063a:	61fb      	str	r3, [r7, #28]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 801063c:	69ba      	ldr	r2, [r7, #24]
 801063e:	4b05      	ldr	r3, [pc, #20]	; (8010654 <mem_malloc+0x1bc>)
 8010640:	1a9b      	subs	r3, r3, r2
 8010642:	69fa      	ldr	r2, [r7, #28]
 8010644:	429a      	cmp	r2, r3
 8010646:	f4ff af4b 	bcc.w	80104e0 <mem_malloc+0x48>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 801064a:	2300      	movs	r3, #0
}
 801064c:	4618      	mov	r0, r3
 801064e:	3720      	adds	r7, #32
 8010650:	46bd      	mov	sp, r7
 8010652:	bd80      	pop	{r7, pc}
 8010654:	0001ffe8 	.word	0x0001ffe8
 8010658:	200008f0 	.word	0x200008f0
 801065c:	0801e358 	.word	0x0801e358
 8010660:	0801e500 	.word	0x0801e500
 8010664:	0801e3a0 	.word	0x0801e3a0
 8010668:	200008ec 	.word	0x200008ec
 801066c:	0801e514 	.word	0x0801e514
 8010670:	0801e530 	.word	0x0801e530
 8010674:	0801e560 	.word	0x0801e560
 8010678:	0801e590 	.word	0x0801e590

0801067c <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 801067c:	b480      	push	{r7}
 801067e:	b085      	sub	sp, #20
 8010680:	af00      	add	r7, sp, #0
 8010682:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 8010684:	687b      	ldr	r3, [r7, #4]
 8010686:	689b      	ldr	r3, [r3, #8]
 8010688:	2200      	movs	r2, #0
 801068a:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 801068c:	687b      	ldr	r3, [r7, #4]
 801068e:	685b      	ldr	r3, [r3, #4]
 8010690:	3303      	adds	r3, #3
 8010692:	f023 0303 	bic.w	r3, r3, #3
 8010696:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 8010698:	2300      	movs	r3, #0
 801069a:	60fb      	str	r3, [r7, #12]
 801069c:	e011      	b.n	80106c2 <memp_init_pool+0x46>
    memp->next = *desc->tab;
 801069e:	687b      	ldr	r3, [r7, #4]
 80106a0:	689b      	ldr	r3, [r3, #8]
 80106a2:	681a      	ldr	r2, [r3, #0]
 80106a4:	68bb      	ldr	r3, [r7, #8]
 80106a6:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 80106a8:	687b      	ldr	r3, [r7, #4]
 80106aa:	689b      	ldr	r3, [r3, #8]
 80106ac:	68ba      	ldr	r2, [r7, #8]
 80106ae:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 80106b0:	687b      	ldr	r3, [r7, #4]
 80106b2:	881b      	ldrh	r3, [r3, #0]
 80106b4:	461a      	mov	r2, r3
 80106b6:	68bb      	ldr	r3, [r7, #8]
 80106b8:	4413      	add	r3, r2
 80106ba:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 80106bc:	68fb      	ldr	r3, [r7, #12]
 80106be:	3301      	adds	r3, #1
 80106c0:	60fb      	str	r3, [r7, #12]
 80106c2:	687b      	ldr	r3, [r7, #4]
 80106c4:	885b      	ldrh	r3, [r3, #2]
 80106c6:	461a      	mov	r2, r3
 80106c8:	68fb      	ldr	r3, [r7, #12]
 80106ca:	4293      	cmp	r3, r2
 80106cc:	dbe7      	blt.n	801069e <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 80106ce:	bf00      	nop
 80106d0:	bf00      	nop
 80106d2:	3714      	adds	r7, #20
 80106d4:	46bd      	mov	sp, r7
 80106d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80106da:	4770      	bx	lr

080106dc <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 80106dc:	b580      	push	{r7, lr}
 80106de:	b082      	sub	sp, #8
 80106e0:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 80106e2:	2300      	movs	r3, #0
 80106e4:	80fb      	strh	r3, [r7, #6]
 80106e6:	e009      	b.n	80106fc <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 80106e8:	88fb      	ldrh	r3, [r7, #6]
 80106ea:	4a08      	ldr	r2, [pc, #32]	; (801070c <memp_init+0x30>)
 80106ec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80106f0:	4618      	mov	r0, r3
 80106f2:	f7ff ffc3 	bl	801067c <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 80106f6:	88fb      	ldrh	r3, [r7, #6]
 80106f8:	3301      	adds	r3, #1
 80106fa:	80fb      	strh	r3, [r7, #6]
 80106fc:	88fb      	ldrh	r3, [r7, #6]
 80106fe:	2b08      	cmp	r3, #8
 8010700:	d9f2      	bls.n	80106e8 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 8010702:	bf00      	nop
 8010704:	bf00      	nop
 8010706:	3708      	adds	r7, #8
 8010708:	46bd      	mov	sp, r7
 801070a:	bd80      	pop	{r7, pc}
 801070c:	08020db8 	.word	0x08020db8

08010710 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 8010710:	b580      	push	{r7, lr}
 8010712:	b084      	sub	sp, #16
 8010714:	af00      	add	r7, sp, #0
 8010716:	6078      	str	r0, [r7, #4]
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);

  memp = *desc->tab;
 8010718:	687b      	ldr	r3, [r7, #4]
 801071a:	689b      	ldr	r3, [r3, #8]
 801071c:	681b      	ldr	r3, [r3, #0]
 801071e:	60fb      	str	r3, [r7, #12]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 8010720:	68fb      	ldr	r3, [r7, #12]
 8010722:	2b00      	cmp	r3, #0
 8010724:	d012      	beq.n	801074c <do_memp_malloc_pool+0x3c>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 8010726:	687b      	ldr	r3, [r7, #4]
 8010728:	689b      	ldr	r3, [r3, #8]
 801072a:	68fa      	ldr	r2, [r7, #12]
 801072c:	6812      	ldr	r2, [r2, #0]
 801072e:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 8010730:	68fb      	ldr	r3, [r7, #12]
 8010732:	f003 0303 	and.w	r3, r3, #3
 8010736:	2b00      	cmp	r3, #0
 8010738:	d006      	beq.n	8010748 <do_memp_malloc_pool+0x38>
 801073a:	4b07      	ldr	r3, [pc, #28]	; (8010758 <do_memp_malloc_pool+0x48>)
 801073c:	f44f 728c 	mov.w	r2, #280	; 0x118
 8010740:	4906      	ldr	r1, [pc, #24]	; (801075c <do_memp_malloc_pool+0x4c>)
 8010742:	4807      	ldr	r0, [pc, #28]	; (8010760 <do_memp_malloc_pool+0x50>)
 8010744:	f00a fdb8 	bl	801b2b8 <iprintf>
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 8010748:	68fb      	ldr	r3, [r7, #12]
 801074a:	e000      	b.n	801074e <do_memp_malloc_pool+0x3e>
#endif
    SYS_ARCH_UNPROTECT(old_level);
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 801074c:	2300      	movs	r3, #0
}
 801074e:	4618      	mov	r0, r3
 8010750:	3710      	adds	r7, #16
 8010752:	46bd      	mov	sp, r7
 8010754:	bd80      	pop	{r7, pc}
 8010756:	bf00      	nop
 8010758:	0801e5b4 	.word	0x0801e5b4
 801075c:	0801e5e4 	.word	0x0801e5e4
 8010760:	0801e608 	.word	0x0801e608

08010764 <memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc_pool(const struct memp_desc *desc)
#else
memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 8010764:	b580      	push	{r7, lr}
 8010766:	b082      	sub	sp, #8
 8010768:	af00      	add	r7, sp, #0
 801076a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 801076c:	687b      	ldr	r3, [r7, #4]
 801076e:	2b00      	cmp	r3, #0
 8010770:	d106      	bne.n	8010780 <memp_malloc_pool+0x1c>
 8010772:	4b0a      	ldr	r3, [pc, #40]	; (801079c <memp_malloc_pool+0x38>)
 8010774:	f44f 729e 	mov.w	r2, #316	; 0x13c
 8010778:	4909      	ldr	r1, [pc, #36]	; (80107a0 <memp_malloc_pool+0x3c>)
 801077a:	480a      	ldr	r0, [pc, #40]	; (80107a4 <memp_malloc_pool+0x40>)
 801077c:	f00a fd9c 	bl	801b2b8 <iprintf>
  if (desc == NULL) {
 8010780:	687b      	ldr	r3, [r7, #4]
 8010782:	2b00      	cmp	r3, #0
 8010784:	d101      	bne.n	801078a <memp_malloc_pool+0x26>
    return NULL;
 8010786:	2300      	movs	r3, #0
 8010788:	e003      	b.n	8010792 <memp_malloc_pool+0x2e>
  }

#if !MEMP_OVERFLOW_CHECK
  return do_memp_malloc_pool(desc);
 801078a:	6878      	ldr	r0, [r7, #4]
 801078c:	f7ff ffc0 	bl	8010710 <do_memp_malloc_pool>
 8010790:	4603      	mov	r3, r0
#else
  return do_memp_malloc_pool_fn(desc, file, line);
#endif
}
 8010792:	4618      	mov	r0, r3
 8010794:	3708      	adds	r7, #8
 8010796:	46bd      	mov	sp, r7
 8010798:	bd80      	pop	{r7, pc}
 801079a:	bf00      	nop
 801079c:	0801e5b4 	.word	0x0801e5b4
 80107a0:	0801e630 	.word	0x0801e630
 80107a4:	0801e608 	.word	0x0801e608

080107a8 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 80107a8:	b580      	push	{r7, lr}
 80107aa:	b084      	sub	sp, #16
 80107ac:	af00      	add	r7, sp, #0
 80107ae:	4603      	mov	r3, r0
 80107b0:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 80107b2:	79fb      	ldrb	r3, [r7, #7]
 80107b4:	2b08      	cmp	r3, #8
 80107b6:	d908      	bls.n	80107ca <memp_malloc+0x22>
 80107b8:	4b0a      	ldr	r3, [pc, #40]	; (80107e4 <memp_malloc+0x3c>)
 80107ba:	f240 1257 	movw	r2, #343	; 0x157
 80107be:	490a      	ldr	r1, [pc, #40]	; (80107e8 <memp_malloc+0x40>)
 80107c0:	480a      	ldr	r0, [pc, #40]	; (80107ec <memp_malloc+0x44>)
 80107c2:	f00a fd79 	bl	801b2b8 <iprintf>
 80107c6:	2300      	movs	r3, #0
 80107c8:	e008      	b.n	80107dc <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 80107ca:	79fb      	ldrb	r3, [r7, #7]
 80107cc:	4a08      	ldr	r2, [pc, #32]	; (80107f0 <memp_malloc+0x48>)
 80107ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80107d2:	4618      	mov	r0, r3
 80107d4:	f7ff ff9c 	bl	8010710 <do_memp_malloc_pool>
 80107d8:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 80107da:	68fb      	ldr	r3, [r7, #12]
}
 80107dc:	4618      	mov	r0, r3
 80107de:	3710      	adds	r7, #16
 80107e0:	46bd      	mov	sp, r7
 80107e2:	bd80      	pop	{r7, pc}
 80107e4:	0801e5b4 	.word	0x0801e5b4
 80107e8:	0801e644 	.word	0x0801e644
 80107ec:	0801e608 	.word	0x0801e608
 80107f0:	08020db8 	.word	0x08020db8

080107f4 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 80107f4:	b580      	push	{r7, lr}
 80107f6:	b084      	sub	sp, #16
 80107f8:	af00      	add	r7, sp, #0
 80107fa:	6078      	str	r0, [r7, #4]
 80107fc:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 80107fe:	683b      	ldr	r3, [r7, #0]
 8010800:	f003 0303 	and.w	r3, r3, #3
 8010804:	2b00      	cmp	r3, #0
 8010806:	d006      	beq.n	8010816 <do_memp_free_pool+0x22>
 8010808:	4b0a      	ldr	r3, [pc, #40]	; (8010834 <do_memp_free_pool+0x40>)
 801080a:	f44f 72b6 	mov.w	r2, #364	; 0x16c
 801080e:	490a      	ldr	r1, [pc, #40]	; (8010838 <do_memp_free_pool+0x44>)
 8010810:	480a      	ldr	r0, [pc, #40]	; (801083c <do_memp_free_pool+0x48>)
 8010812:	f00a fd51 	bl	801b2b8 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 8010816:	683b      	ldr	r3, [r7, #0]
 8010818:	60fb      	str	r3, [r7, #12]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 801081a:	687b      	ldr	r3, [r7, #4]
 801081c:	689b      	ldr	r3, [r3, #8]
 801081e:	681a      	ldr	r2, [r3, #0]
 8010820:	68fb      	ldr	r3, [r7, #12]
 8010822:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 8010824:	687b      	ldr	r3, [r7, #4]
 8010826:	689b      	ldr	r3, [r3, #8]
 8010828:	68fa      	ldr	r2, [r7, #12]
 801082a:	601a      	str	r2, [r3, #0]
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
#endif /* !MEMP_MEM_MALLOC */
}
 801082c:	bf00      	nop
 801082e:	3710      	adds	r7, #16
 8010830:	46bd      	mov	sp, r7
 8010832:	bd80      	pop	{r7, pc}
 8010834:	0801e5b4 	.word	0x0801e5b4
 8010838:	0801e664 	.word	0x0801e664
 801083c:	0801e608 	.word	0x0801e608

08010840 <memp_free_pool>:
 * @param desc the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free_pool(const struct memp_desc *desc, void *mem)
{
 8010840:	b580      	push	{r7, lr}
 8010842:	b082      	sub	sp, #8
 8010844:	af00      	add	r7, sp, #0
 8010846:	6078      	str	r0, [r7, #4]
 8010848:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 801084a:	687b      	ldr	r3, [r7, #4]
 801084c:	2b00      	cmp	r3, #0
 801084e:	d106      	bne.n	801085e <memp_free_pool+0x1e>
 8010850:	4b0a      	ldr	r3, [pc, #40]	; (801087c <memp_free_pool+0x3c>)
 8010852:	f240 1295 	movw	r2, #405	; 0x195
 8010856:	490a      	ldr	r1, [pc, #40]	; (8010880 <memp_free_pool+0x40>)
 8010858:	480a      	ldr	r0, [pc, #40]	; (8010884 <memp_free_pool+0x44>)
 801085a:	f00a fd2d 	bl	801b2b8 <iprintf>
  if ((desc == NULL) || (mem == NULL)) {
 801085e:	687b      	ldr	r3, [r7, #4]
 8010860:	2b00      	cmp	r3, #0
 8010862:	d007      	beq.n	8010874 <memp_free_pool+0x34>
 8010864:	683b      	ldr	r3, [r7, #0]
 8010866:	2b00      	cmp	r3, #0
 8010868:	d004      	beq.n	8010874 <memp_free_pool+0x34>
    return;
  }

  do_memp_free_pool(desc, mem);
 801086a:	6839      	ldr	r1, [r7, #0]
 801086c:	6878      	ldr	r0, [r7, #4]
 801086e:	f7ff ffc1 	bl	80107f4 <do_memp_free_pool>
 8010872:	e000      	b.n	8010876 <memp_free_pool+0x36>
    return;
 8010874:	bf00      	nop
}
 8010876:	3708      	adds	r7, #8
 8010878:	46bd      	mov	sp, r7
 801087a:	bd80      	pop	{r7, pc}
 801087c:	0801e5b4 	.word	0x0801e5b4
 8010880:	0801e630 	.word	0x0801e630
 8010884:	0801e608 	.word	0x0801e608

08010888 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 8010888:	b580      	push	{r7, lr}
 801088a:	b082      	sub	sp, #8
 801088c:	af00      	add	r7, sp, #0
 801088e:	4603      	mov	r3, r0
 8010890:	6039      	str	r1, [r7, #0]
 8010892:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 8010894:	79fb      	ldrb	r3, [r7, #7]
 8010896:	2b08      	cmp	r3, #8
 8010898:	d907      	bls.n	80108aa <memp_free+0x22>
 801089a:	4b0c      	ldr	r3, [pc, #48]	; (80108cc <memp_free+0x44>)
 801089c:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 80108a0:	490b      	ldr	r1, [pc, #44]	; (80108d0 <memp_free+0x48>)
 80108a2:	480c      	ldr	r0, [pc, #48]	; (80108d4 <memp_free+0x4c>)
 80108a4:	f00a fd08 	bl	801b2b8 <iprintf>
 80108a8:	e00c      	b.n	80108c4 <memp_free+0x3c>

  if (mem == NULL) {
 80108aa:	683b      	ldr	r3, [r7, #0]
 80108ac:	2b00      	cmp	r3, #0
 80108ae:	d008      	beq.n	80108c2 <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 80108b0:	79fb      	ldrb	r3, [r7, #7]
 80108b2:	4a09      	ldr	r2, [pc, #36]	; (80108d8 <memp_free+0x50>)
 80108b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80108b8:	6839      	ldr	r1, [r7, #0]
 80108ba:	4618      	mov	r0, r3
 80108bc:	f7ff ff9a 	bl	80107f4 <do_memp_free_pool>
 80108c0:	e000      	b.n	80108c4 <memp_free+0x3c>
    return;
 80108c2:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 80108c4:	3708      	adds	r7, #8
 80108c6:	46bd      	mov	sp, r7
 80108c8:	bd80      	pop	{r7, pc}
 80108ca:	bf00      	nop
 80108cc:	0801e5b4 	.word	0x0801e5b4
 80108d0:	0801e684 	.word	0x0801e684
 80108d4:	0801e608 	.word	0x0801e608
 80108d8:	08020db8 	.word	0x08020db8

080108dc <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 80108dc:	b480      	push	{r7}
 80108de:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 80108e0:	bf00      	nop
 80108e2:	46bd      	mov	sp, r7
 80108e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80108e8:	4770      	bx	lr
	...

080108ec <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 80108ec:	b580      	push	{r7, lr}
 80108ee:	b086      	sub	sp, #24
 80108f0:	af00      	add	r7, sp, #0
 80108f2:	60f8      	str	r0, [r7, #12]
 80108f4:	60b9      	str	r1, [r7, #8]
 80108f6:	607a      	str	r2, [r7, #4]
 80108f8:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 80108fa:	68fb      	ldr	r3, [r7, #12]
 80108fc:	2b00      	cmp	r3, #0
 80108fe:	d108      	bne.n	8010912 <netif_add+0x26>
 8010900:	4b57      	ldr	r3, [pc, #348]	; (8010a60 <netif_add+0x174>)
 8010902:	f240 1227 	movw	r2, #295	; 0x127
 8010906:	4957      	ldr	r1, [pc, #348]	; (8010a64 <netif_add+0x178>)
 8010908:	4857      	ldr	r0, [pc, #348]	; (8010a68 <netif_add+0x17c>)
 801090a:	f00a fcd5 	bl	801b2b8 <iprintf>
 801090e:	2300      	movs	r3, #0
 8010910:	e0a2      	b.n	8010a58 <netif_add+0x16c>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 8010912:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010914:	2b00      	cmp	r3, #0
 8010916:	d108      	bne.n	801092a <netif_add+0x3e>
 8010918:	4b51      	ldr	r3, [pc, #324]	; (8010a60 <netif_add+0x174>)
 801091a:	f44f 7294 	mov.w	r2, #296	; 0x128
 801091e:	4953      	ldr	r1, [pc, #332]	; (8010a6c <netif_add+0x180>)
 8010920:	4851      	ldr	r0, [pc, #324]	; (8010a68 <netif_add+0x17c>)
 8010922:	f00a fcc9 	bl	801b2b8 <iprintf>
 8010926:	2300      	movs	r3, #0
 8010928:	e096      	b.n	8010a58 <netif_add+0x16c>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 801092a:	68bb      	ldr	r3, [r7, #8]
 801092c:	2b00      	cmp	r3, #0
 801092e:	d101      	bne.n	8010934 <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 8010930:	4b4f      	ldr	r3, [pc, #316]	; (8010a70 <netif_add+0x184>)
 8010932:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 8010934:	687b      	ldr	r3, [r7, #4]
 8010936:	2b00      	cmp	r3, #0
 8010938:	d101      	bne.n	801093e <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 801093a:	4b4d      	ldr	r3, [pc, #308]	; (8010a70 <netif_add+0x184>)
 801093c:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 801093e:	683b      	ldr	r3, [r7, #0]
 8010940:	2b00      	cmp	r3, #0
 8010942:	d101      	bne.n	8010948 <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 8010944:	4b4a      	ldr	r3, [pc, #296]	; (8010a70 <netif_add+0x184>)
 8010946:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 8010948:	68fb      	ldr	r3, [r7, #12]
 801094a:	2200      	movs	r2, #0
 801094c:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 801094e:	68fb      	ldr	r3, [r7, #12]
 8010950:	2200      	movs	r2, #0
 8010952:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 8010954:	68fb      	ldr	r3, [r7, #12]
 8010956:	2200      	movs	r2, #0
 8010958:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 801095a:	68fb      	ldr	r3, [r7, #12]
 801095c:	4a45      	ldr	r2, [pc, #276]	; (8010a74 <netif_add+0x188>)
 801095e:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 8010960:	68fb      	ldr	r3, [r7, #12]
 8010962:	2200      	movs	r2, #0
 8010964:	849a      	strh	r2, [r3, #36]	; 0x24
  netif->flags = 0;
 8010966:	68fb      	ldr	r3, [r7, #12]
 8010968:	2200      	movs	r2, #0
 801096a:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 801096e:	68fb      	ldr	r3, [r7, #12]
 8010970:	2200      	movs	r2, #0
 8010972:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 8010974:	68fb      	ldr	r3, [r7, #12]
 8010976:	6a3a      	ldr	r2, [r7, #32]
 8010978:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 801097a:	4b3f      	ldr	r3, [pc, #252]	; (8010a78 <netif_add+0x18c>)
 801097c:	781a      	ldrb	r2, [r3, #0]
 801097e:	68fb      	ldr	r3, [r7, #12]
 8010980:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  netif->input = input;
 8010984:	68fb      	ldr	r3, [r7, #12]
 8010986:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010988:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 801098a:	683b      	ldr	r3, [r7, #0]
 801098c:	687a      	ldr	r2, [r7, #4]
 801098e:	68b9      	ldr	r1, [r7, #8]
 8010990:	68f8      	ldr	r0, [r7, #12]
 8010992:	f000 f913 	bl	8010bbc <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 8010996:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010998:	68f8      	ldr	r0, [r7, #12]
 801099a:	4798      	blx	r3
 801099c:	4603      	mov	r3, r0
 801099e:	2b00      	cmp	r3, #0
 80109a0:	d001      	beq.n	80109a6 <netif_add+0xba>
    return NULL;
 80109a2:	2300      	movs	r3, #0
 80109a4:	e058      	b.n	8010a58 <netif_add+0x16c>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 80109a6:	68fb      	ldr	r3, [r7, #12]
 80109a8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80109ac:	2bff      	cmp	r3, #255	; 0xff
 80109ae:	d103      	bne.n	80109b8 <netif_add+0xcc>
        netif->num = 0;
 80109b0:	68fb      	ldr	r3, [r7, #12]
 80109b2:	2200      	movs	r2, #0
 80109b4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      }
      num_netifs = 0;
 80109b8:	2300      	movs	r3, #0
 80109ba:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 80109bc:	4b2f      	ldr	r3, [pc, #188]	; (8010a7c <netif_add+0x190>)
 80109be:	681b      	ldr	r3, [r3, #0]
 80109c0:	617b      	str	r3, [r7, #20]
 80109c2:	e02b      	b.n	8010a1c <netif_add+0x130>
        LWIP_ASSERT("netif already added", netif2 != netif);
 80109c4:	697a      	ldr	r2, [r7, #20]
 80109c6:	68fb      	ldr	r3, [r7, #12]
 80109c8:	429a      	cmp	r2, r3
 80109ca:	d106      	bne.n	80109da <netif_add+0xee>
 80109cc:	4b24      	ldr	r3, [pc, #144]	; (8010a60 <netif_add+0x174>)
 80109ce:	f240 128b 	movw	r2, #395	; 0x18b
 80109d2:	492b      	ldr	r1, [pc, #172]	; (8010a80 <netif_add+0x194>)
 80109d4:	4824      	ldr	r0, [pc, #144]	; (8010a68 <netif_add+0x17c>)
 80109d6:	f00a fc6f 	bl	801b2b8 <iprintf>
        num_netifs++;
 80109da:	693b      	ldr	r3, [r7, #16]
 80109dc:	3301      	adds	r3, #1
 80109de:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 80109e0:	693b      	ldr	r3, [r7, #16]
 80109e2:	2bff      	cmp	r3, #255	; 0xff
 80109e4:	dd06      	ble.n	80109f4 <netif_add+0x108>
 80109e6:	4b1e      	ldr	r3, [pc, #120]	; (8010a60 <netif_add+0x174>)
 80109e8:	f240 128d 	movw	r2, #397	; 0x18d
 80109ec:	4925      	ldr	r1, [pc, #148]	; (8010a84 <netif_add+0x198>)
 80109ee:	481e      	ldr	r0, [pc, #120]	; (8010a68 <netif_add+0x17c>)
 80109f0:	f00a fc62 	bl	801b2b8 <iprintf>
        if (netif2->num == netif->num) {
 80109f4:	697b      	ldr	r3, [r7, #20]
 80109f6:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 80109fa:	68fb      	ldr	r3, [r7, #12]
 80109fc:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8010a00:	429a      	cmp	r2, r3
 8010a02:	d108      	bne.n	8010a16 <netif_add+0x12a>
          netif->num++;
 8010a04:	68fb      	ldr	r3, [r7, #12]
 8010a06:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8010a0a:	3301      	adds	r3, #1
 8010a0c:	b2da      	uxtb	r2, r3
 8010a0e:	68fb      	ldr	r3, [r7, #12]
 8010a10:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
          break;
 8010a14:	e005      	b.n	8010a22 <netif_add+0x136>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8010a16:	697b      	ldr	r3, [r7, #20]
 8010a18:	681b      	ldr	r3, [r3, #0]
 8010a1a:	617b      	str	r3, [r7, #20]
 8010a1c:	697b      	ldr	r3, [r7, #20]
 8010a1e:	2b00      	cmp	r3, #0
 8010a20:	d1d0      	bne.n	80109c4 <netif_add+0xd8>
        }
      }
    } while (netif2 != NULL);
 8010a22:	697b      	ldr	r3, [r7, #20]
 8010a24:	2b00      	cmp	r3, #0
 8010a26:	d1be      	bne.n	80109a6 <netif_add+0xba>
  }
  if (netif->num == 254) {
 8010a28:	68fb      	ldr	r3, [r7, #12]
 8010a2a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8010a2e:	2bfe      	cmp	r3, #254	; 0xfe
 8010a30:	d103      	bne.n	8010a3a <netif_add+0x14e>
    netif_num = 0;
 8010a32:	4b11      	ldr	r3, [pc, #68]	; (8010a78 <netif_add+0x18c>)
 8010a34:	2200      	movs	r2, #0
 8010a36:	701a      	strb	r2, [r3, #0]
 8010a38:	e006      	b.n	8010a48 <netif_add+0x15c>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 8010a3a:	68fb      	ldr	r3, [r7, #12]
 8010a3c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8010a40:	3301      	adds	r3, #1
 8010a42:	b2da      	uxtb	r2, r3
 8010a44:	4b0c      	ldr	r3, [pc, #48]	; (8010a78 <netif_add+0x18c>)
 8010a46:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 8010a48:	4b0c      	ldr	r3, [pc, #48]	; (8010a7c <netif_add+0x190>)
 8010a4a:	681a      	ldr	r2, [r3, #0]
 8010a4c:	68fb      	ldr	r3, [r7, #12]
 8010a4e:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 8010a50:	4a0a      	ldr	r2, [pc, #40]	; (8010a7c <netif_add+0x190>)
 8010a52:	68fb      	ldr	r3, [r7, #12]
 8010a54:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 8010a56:	68fb      	ldr	r3, [r7, #12]
}
 8010a58:	4618      	mov	r0, r3
 8010a5a:	3718      	adds	r7, #24
 8010a5c:	46bd      	mov	sp, r7
 8010a5e:	bd80      	pop	{r7, pc}
 8010a60:	0801e6a0 	.word	0x0801e6a0
 8010a64:	0801e734 	.word	0x0801e734
 8010a68:	0801e6f0 	.word	0x0801e6f0
 8010a6c:	0801e750 	.word	0x0801e750
 8010a70:	08020e1c 	.word	0x08020e1c
 8010a74:	08010e97 	.word	0x08010e97
 8010a78:	200071a8 	.word	0x200071a8
 8010a7c:	200071a0 	.word	0x200071a0
 8010a80:	0801e774 	.word	0x0801e774
 8010a84:	0801e788 	.word	0x0801e788

08010a88 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8010a88:	b580      	push	{r7, lr}
 8010a8a:	b082      	sub	sp, #8
 8010a8c:	af00      	add	r7, sp, #0
 8010a8e:	6078      	str	r0, [r7, #4]
 8010a90:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 8010a92:	6839      	ldr	r1, [r7, #0]
 8010a94:	6878      	ldr	r0, [r7, #4]
 8010a96:	f002 fde7 	bl	8013668 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 8010a9a:	6839      	ldr	r1, [r7, #0]
 8010a9c:	6878      	ldr	r0, [r7, #4]
 8010a9e:	f007 fb23 	bl	80180e8 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 8010aa2:	bf00      	nop
 8010aa4:	3708      	adds	r7, #8
 8010aa6:	46bd      	mov	sp, r7
 8010aa8:	bd80      	pop	{r7, pc}
	...

08010aac <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 8010aac:	b580      	push	{r7, lr}
 8010aae:	b086      	sub	sp, #24
 8010ab0:	af00      	add	r7, sp, #0
 8010ab2:	60f8      	str	r0, [r7, #12]
 8010ab4:	60b9      	str	r1, [r7, #8]
 8010ab6:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 8010ab8:	68bb      	ldr	r3, [r7, #8]
 8010aba:	2b00      	cmp	r3, #0
 8010abc:	d106      	bne.n	8010acc <netif_do_set_ipaddr+0x20>
 8010abe:	4b1d      	ldr	r3, [pc, #116]	; (8010b34 <netif_do_set_ipaddr+0x88>)
 8010ac0:	f240 12cb 	movw	r2, #459	; 0x1cb
 8010ac4:	491c      	ldr	r1, [pc, #112]	; (8010b38 <netif_do_set_ipaddr+0x8c>)
 8010ac6:	481d      	ldr	r0, [pc, #116]	; (8010b3c <netif_do_set_ipaddr+0x90>)
 8010ac8:	f00a fbf6 	bl	801b2b8 <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 8010acc:	687b      	ldr	r3, [r7, #4]
 8010ace:	2b00      	cmp	r3, #0
 8010ad0:	d106      	bne.n	8010ae0 <netif_do_set_ipaddr+0x34>
 8010ad2:	4b18      	ldr	r3, [pc, #96]	; (8010b34 <netif_do_set_ipaddr+0x88>)
 8010ad4:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 8010ad8:	4917      	ldr	r1, [pc, #92]	; (8010b38 <netif_do_set_ipaddr+0x8c>)
 8010ada:	4818      	ldr	r0, [pc, #96]	; (8010b3c <netif_do_set_ipaddr+0x90>)
 8010adc:	f00a fbec 	bl	801b2b8 <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 8010ae0:	68bb      	ldr	r3, [r7, #8]
 8010ae2:	681a      	ldr	r2, [r3, #0]
 8010ae4:	68fb      	ldr	r3, [r7, #12]
 8010ae6:	3304      	adds	r3, #4
 8010ae8:	681b      	ldr	r3, [r3, #0]
 8010aea:	429a      	cmp	r2, r3
 8010aec:	d01c      	beq.n	8010b28 <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 8010aee:	68bb      	ldr	r3, [r7, #8]
 8010af0:	681b      	ldr	r3, [r3, #0]
 8010af2:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 8010af4:	68fb      	ldr	r3, [r7, #12]
 8010af6:	3304      	adds	r3, #4
 8010af8:	681a      	ldr	r2, [r3, #0]
 8010afa:	687b      	ldr	r3, [r7, #4]
 8010afc:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 8010afe:	f107 0314 	add.w	r3, r7, #20
 8010b02:	4619      	mov	r1, r3
 8010b04:	6878      	ldr	r0, [r7, #4]
 8010b06:	f7ff ffbf 	bl	8010a88 <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 8010b0a:	68bb      	ldr	r3, [r7, #8]
 8010b0c:	2b00      	cmp	r3, #0
 8010b0e:	d002      	beq.n	8010b16 <netif_do_set_ipaddr+0x6a>
 8010b10:	68bb      	ldr	r3, [r7, #8]
 8010b12:	681b      	ldr	r3, [r3, #0]
 8010b14:	e000      	b.n	8010b18 <netif_do_set_ipaddr+0x6c>
 8010b16:	2300      	movs	r3, #0
 8010b18:	68fa      	ldr	r2, [r7, #12]
 8010b1a:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 8010b1c:	2101      	movs	r1, #1
 8010b1e:	68f8      	ldr	r0, [r7, #12]
 8010b20:	f000 f8d2 	bl	8010cc8 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 8010b24:	2301      	movs	r3, #1
 8010b26:	e000      	b.n	8010b2a <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 8010b28:	2300      	movs	r3, #0
}
 8010b2a:	4618      	mov	r0, r3
 8010b2c:	3718      	adds	r7, #24
 8010b2e:	46bd      	mov	sp, r7
 8010b30:	bd80      	pop	{r7, pc}
 8010b32:	bf00      	nop
 8010b34:	0801e6a0 	.word	0x0801e6a0
 8010b38:	0801e7b8 	.word	0x0801e7b8
 8010b3c:	0801e6f0 	.word	0x0801e6f0

08010b40 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 8010b40:	b480      	push	{r7}
 8010b42:	b085      	sub	sp, #20
 8010b44:	af00      	add	r7, sp, #0
 8010b46:	60f8      	str	r0, [r7, #12]
 8010b48:	60b9      	str	r1, [r7, #8]
 8010b4a:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 8010b4c:	68bb      	ldr	r3, [r7, #8]
 8010b4e:	681a      	ldr	r2, [r3, #0]
 8010b50:	68fb      	ldr	r3, [r7, #12]
 8010b52:	3308      	adds	r3, #8
 8010b54:	681b      	ldr	r3, [r3, #0]
 8010b56:	429a      	cmp	r2, r3
 8010b58:	d00a      	beq.n	8010b70 <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 8010b5a:	68bb      	ldr	r3, [r7, #8]
 8010b5c:	2b00      	cmp	r3, #0
 8010b5e:	d002      	beq.n	8010b66 <netif_do_set_netmask+0x26>
 8010b60:	68bb      	ldr	r3, [r7, #8]
 8010b62:	681b      	ldr	r3, [r3, #0]
 8010b64:	e000      	b.n	8010b68 <netif_do_set_netmask+0x28>
 8010b66:	2300      	movs	r3, #0
 8010b68:	68fa      	ldr	r2, [r7, #12]
 8010b6a:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 8010b6c:	2301      	movs	r3, #1
 8010b6e:	e000      	b.n	8010b72 <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 8010b70:	2300      	movs	r3, #0
}
 8010b72:	4618      	mov	r0, r3
 8010b74:	3714      	adds	r7, #20
 8010b76:	46bd      	mov	sp, r7
 8010b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b7c:	4770      	bx	lr

08010b7e <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 8010b7e:	b480      	push	{r7}
 8010b80:	b085      	sub	sp, #20
 8010b82:	af00      	add	r7, sp, #0
 8010b84:	60f8      	str	r0, [r7, #12]
 8010b86:	60b9      	str	r1, [r7, #8]
 8010b88:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 8010b8a:	68bb      	ldr	r3, [r7, #8]
 8010b8c:	681a      	ldr	r2, [r3, #0]
 8010b8e:	68fb      	ldr	r3, [r7, #12]
 8010b90:	330c      	adds	r3, #12
 8010b92:	681b      	ldr	r3, [r3, #0]
 8010b94:	429a      	cmp	r2, r3
 8010b96:	d00a      	beq.n	8010bae <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 8010b98:	68bb      	ldr	r3, [r7, #8]
 8010b9a:	2b00      	cmp	r3, #0
 8010b9c:	d002      	beq.n	8010ba4 <netif_do_set_gw+0x26>
 8010b9e:	68bb      	ldr	r3, [r7, #8]
 8010ba0:	681b      	ldr	r3, [r3, #0]
 8010ba2:	e000      	b.n	8010ba6 <netif_do_set_gw+0x28>
 8010ba4:	2300      	movs	r3, #0
 8010ba6:	68fa      	ldr	r2, [r7, #12]
 8010ba8:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 8010baa:	2301      	movs	r3, #1
 8010bac:	e000      	b.n	8010bb0 <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 8010bae:	2300      	movs	r3, #0
}
 8010bb0:	4618      	mov	r0, r3
 8010bb2:	3714      	adds	r7, #20
 8010bb4:	46bd      	mov	sp, r7
 8010bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010bba:	4770      	bx	lr

08010bbc <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 8010bbc:	b580      	push	{r7, lr}
 8010bbe:	b088      	sub	sp, #32
 8010bc0:	af00      	add	r7, sp, #0
 8010bc2:	60f8      	str	r0, [r7, #12]
 8010bc4:	60b9      	str	r1, [r7, #8]
 8010bc6:	607a      	str	r2, [r7, #4]
 8010bc8:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 8010bca:	2300      	movs	r3, #0
 8010bcc:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 8010bce:	2300      	movs	r3, #0
 8010bd0:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8010bd2:	68bb      	ldr	r3, [r7, #8]
 8010bd4:	2b00      	cmp	r3, #0
 8010bd6:	d101      	bne.n	8010bdc <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 8010bd8:	4b1c      	ldr	r3, [pc, #112]	; (8010c4c <netif_set_addr+0x90>)
 8010bda:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 8010bdc:	687b      	ldr	r3, [r7, #4]
 8010bde:	2b00      	cmp	r3, #0
 8010be0:	d101      	bne.n	8010be6 <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 8010be2:	4b1a      	ldr	r3, [pc, #104]	; (8010c4c <netif_set_addr+0x90>)
 8010be4:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 8010be6:	683b      	ldr	r3, [r7, #0]
 8010be8:	2b00      	cmp	r3, #0
 8010bea:	d101      	bne.n	8010bf0 <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 8010bec:	4b17      	ldr	r3, [pc, #92]	; (8010c4c <netif_set_addr+0x90>)
 8010bee:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 8010bf0:	68bb      	ldr	r3, [r7, #8]
 8010bf2:	2b00      	cmp	r3, #0
 8010bf4:	d003      	beq.n	8010bfe <netif_set_addr+0x42>
 8010bf6:	68bb      	ldr	r3, [r7, #8]
 8010bf8:	681b      	ldr	r3, [r3, #0]
 8010bfa:	2b00      	cmp	r3, #0
 8010bfc:	d101      	bne.n	8010c02 <netif_set_addr+0x46>
 8010bfe:	2301      	movs	r3, #1
 8010c00:	e000      	b.n	8010c04 <netif_set_addr+0x48>
 8010c02:	2300      	movs	r3, #0
 8010c04:	617b      	str	r3, [r7, #20]
  if (remove) {
 8010c06:	697b      	ldr	r3, [r7, #20]
 8010c08:	2b00      	cmp	r3, #0
 8010c0a:	d006      	beq.n	8010c1a <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8010c0c:	f107 0310 	add.w	r3, r7, #16
 8010c10:	461a      	mov	r2, r3
 8010c12:	68b9      	ldr	r1, [r7, #8]
 8010c14:	68f8      	ldr	r0, [r7, #12]
 8010c16:	f7ff ff49 	bl	8010aac <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 8010c1a:	69fa      	ldr	r2, [r7, #28]
 8010c1c:	6879      	ldr	r1, [r7, #4]
 8010c1e:	68f8      	ldr	r0, [r7, #12]
 8010c20:	f7ff ff8e 	bl	8010b40 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 8010c24:	69ba      	ldr	r2, [r7, #24]
 8010c26:	6839      	ldr	r1, [r7, #0]
 8010c28:	68f8      	ldr	r0, [r7, #12]
 8010c2a:	f7ff ffa8 	bl	8010b7e <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 8010c2e:	697b      	ldr	r3, [r7, #20]
 8010c30:	2b00      	cmp	r3, #0
 8010c32:	d106      	bne.n	8010c42 <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8010c34:	f107 0310 	add.w	r3, r7, #16
 8010c38:	461a      	mov	r2, r3
 8010c3a:	68b9      	ldr	r1, [r7, #8]
 8010c3c:	68f8      	ldr	r0, [r7, #12]
 8010c3e:	f7ff ff35 	bl	8010aac <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 8010c42:	bf00      	nop
 8010c44:	3720      	adds	r7, #32
 8010c46:	46bd      	mov	sp, r7
 8010c48:	bd80      	pop	{r7, pc}
 8010c4a:	bf00      	nop
 8010c4c:	08020e1c 	.word	0x08020e1c

08010c50 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 8010c50:	b480      	push	{r7}
 8010c52:	b083      	sub	sp, #12
 8010c54:	af00      	add	r7, sp, #0
 8010c56:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 8010c58:	4a04      	ldr	r2, [pc, #16]	; (8010c6c <netif_set_default+0x1c>)
 8010c5a:	687b      	ldr	r3, [r7, #4]
 8010c5c:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 8010c5e:	bf00      	nop
 8010c60:	370c      	adds	r7, #12
 8010c62:	46bd      	mov	sp, r7
 8010c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c68:	4770      	bx	lr
 8010c6a:	bf00      	nop
 8010c6c:	200071a4 	.word	0x200071a4

08010c70 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 8010c70:	b580      	push	{r7, lr}
 8010c72:	b082      	sub	sp, #8
 8010c74:	af00      	add	r7, sp, #0
 8010c76:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 8010c78:	687b      	ldr	r3, [r7, #4]
 8010c7a:	2b00      	cmp	r3, #0
 8010c7c:	d107      	bne.n	8010c8e <netif_set_up+0x1e>
 8010c7e:	4b0f      	ldr	r3, [pc, #60]	; (8010cbc <netif_set_up+0x4c>)
 8010c80:	f44f 7254 	mov.w	r2, #848	; 0x350
 8010c84:	490e      	ldr	r1, [pc, #56]	; (8010cc0 <netif_set_up+0x50>)
 8010c86:	480f      	ldr	r0, [pc, #60]	; (8010cc4 <netif_set_up+0x54>)
 8010c88:	f00a fb16 	bl	801b2b8 <iprintf>
 8010c8c:	e013      	b.n	8010cb6 <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 8010c8e:	687b      	ldr	r3, [r7, #4]
 8010c90:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8010c94:	f003 0301 	and.w	r3, r3, #1
 8010c98:	2b00      	cmp	r3, #0
 8010c9a:	d10c      	bne.n	8010cb6 <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 8010c9c:	687b      	ldr	r3, [r7, #4]
 8010c9e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8010ca2:	f043 0301 	orr.w	r3, r3, #1
 8010ca6:	b2da      	uxtb	r2, r3
 8010ca8:	687b      	ldr	r3, [r7, #4]
 8010caa:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 8010cae:	2103      	movs	r1, #3
 8010cb0:	6878      	ldr	r0, [r7, #4]
 8010cb2:	f000 f809 	bl	8010cc8 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 8010cb6:	3708      	adds	r7, #8
 8010cb8:	46bd      	mov	sp, r7
 8010cba:	bd80      	pop	{r7, pc}
 8010cbc:	0801e6a0 	.word	0x0801e6a0
 8010cc0:	0801e828 	.word	0x0801e828
 8010cc4:	0801e6f0 	.word	0x0801e6f0

08010cc8 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 8010cc8:	b580      	push	{r7, lr}
 8010cca:	b082      	sub	sp, #8
 8010ccc:	af00      	add	r7, sp, #0
 8010cce:	6078      	str	r0, [r7, #4]
 8010cd0:	460b      	mov	r3, r1
 8010cd2:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 8010cd4:	687b      	ldr	r3, [r7, #4]
 8010cd6:	2b00      	cmp	r3, #0
 8010cd8:	d106      	bne.n	8010ce8 <netif_issue_reports+0x20>
 8010cda:	4b18      	ldr	r3, [pc, #96]	; (8010d3c <netif_issue_reports+0x74>)
 8010cdc:	f240 326d 	movw	r2, #877	; 0x36d
 8010ce0:	4917      	ldr	r1, [pc, #92]	; (8010d40 <netif_issue_reports+0x78>)
 8010ce2:	4818      	ldr	r0, [pc, #96]	; (8010d44 <netif_issue_reports+0x7c>)
 8010ce4:	f00a fae8 	bl	801b2b8 <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8010ce8:	687b      	ldr	r3, [r7, #4]
 8010cea:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8010cee:	f003 0304 	and.w	r3, r3, #4
 8010cf2:	2b00      	cmp	r3, #0
 8010cf4:	d01e      	beq.n	8010d34 <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 8010cf6:	687b      	ldr	r3, [r7, #4]
 8010cf8:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8010cfc:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8010d00:	2b00      	cmp	r3, #0
 8010d02:	d017      	beq.n	8010d34 <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8010d04:	78fb      	ldrb	r3, [r7, #3]
 8010d06:	f003 0301 	and.w	r3, r3, #1
 8010d0a:	2b00      	cmp	r3, #0
 8010d0c:	d013      	beq.n	8010d36 <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8010d0e:	687b      	ldr	r3, [r7, #4]
 8010d10:	3304      	adds	r3, #4
 8010d12:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8010d14:	2b00      	cmp	r3, #0
 8010d16:	d00e      	beq.n	8010d36 <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 8010d18:	687b      	ldr	r3, [r7, #4]
 8010d1a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8010d1e:	f003 0308 	and.w	r3, r3, #8
 8010d22:	2b00      	cmp	r3, #0
 8010d24:	d007      	beq.n	8010d36 <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 8010d26:	687b      	ldr	r3, [r7, #4]
 8010d28:	3304      	adds	r3, #4
 8010d2a:	4619      	mov	r1, r3
 8010d2c:	6878      	ldr	r0, [r7, #4]
 8010d2e:	f008 f945 	bl	8018fbc <etharp_request>
 8010d32:	e000      	b.n	8010d36 <netif_issue_reports+0x6e>
    return;
 8010d34:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 8010d36:	3708      	adds	r7, #8
 8010d38:	46bd      	mov	sp, r7
 8010d3a:	bd80      	pop	{r7, pc}
 8010d3c:	0801e6a0 	.word	0x0801e6a0
 8010d40:	0801e844 	.word	0x0801e844
 8010d44:	0801e6f0 	.word	0x0801e6f0

08010d48 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 8010d48:	b580      	push	{r7, lr}
 8010d4a:	b082      	sub	sp, #8
 8010d4c:	af00      	add	r7, sp, #0
 8010d4e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 8010d50:	687b      	ldr	r3, [r7, #4]
 8010d52:	2b00      	cmp	r3, #0
 8010d54:	d107      	bne.n	8010d66 <netif_set_down+0x1e>
 8010d56:	4b12      	ldr	r3, [pc, #72]	; (8010da0 <netif_set_down+0x58>)
 8010d58:	f240 329b 	movw	r2, #923	; 0x39b
 8010d5c:	4911      	ldr	r1, [pc, #68]	; (8010da4 <netif_set_down+0x5c>)
 8010d5e:	4812      	ldr	r0, [pc, #72]	; (8010da8 <netif_set_down+0x60>)
 8010d60:	f00a faaa 	bl	801b2b8 <iprintf>
 8010d64:	e019      	b.n	8010d9a <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 8010d66:	687b      	ldr	r3, [r7, #4]
 8010d68:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8010d6c:	f003 0301 	and.w	r3, r3, #1
 8010d70:	2b00      	cmp	r3, #0
 8010d72:	d012      	beq.n	8010d9a <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 8010d74:	687b      	ldr	r3, [r7, #4]
 8010d76:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8010d7a:	f023 0301 	bic.w	r3, r3, #1
 8010d7e:	b2da      	uxtb	r2, r3
 8010d80:	687b      	ldr	r3, [r7, #4]
 8010d82:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 8010d86:	687b      	ldr	r3, [r7, #4]
 8010d88:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8010d8c:	f003 0308 	and.w	r3, r3, #8
 8010d90:	2b00      	cmp	r3, #0
 8010d92:	d002      	beq.n	8010d9a <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 8010d94:	6878      	ldr	r0, [r7, #4]
 8010d96:	f007 fccf 	bl	8018738 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 8010d9a:	3708      	adds	r7, #8
 8010d9c:	46bd      	mov	sp, r7
 8010d9e:	bd80      	pop	{r7, pc}
 8010da0:	0801e6a0 	.word	0x0801e6a0
 8010da4:	0801e868 	.word	0x0801e868
 8010da8:	0801e6f0 	.word	0x0801e6f0

08010dac <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 8010dac:	b580      	push	{r7, lr}
 8010dae:	b082      	sub	sp, #8
 8010db0:	af00      	add	r7, sp, #0
 8010db2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 8010db4:	687b      	ldr	r3, [r7, #4]
 8010db6:	2b00      	cmp	r3, #0
 8010db8:	d107      	bne.n	8010dca <netif_set_link_up+0x1e>
 8010dba:	4b13      	ldr	r3, [pc, #76]	; (8010e08 <netif_set_link_up+0x5c>)
 8010dbc:	f44f 7278 	mov.w	r2, #992	; 0x3e0
 8010dc0:	4912      	ldr	r1, [pc, #72]	; (8010e0c <netif_set_link_up+0x60>)
 8010dc2:	4813      	ldr	r0, [pc, #76]	; (8010e10 <netif_set_link_up+0x64>)
 8010dc4:	f00a fa78 	bl	801b2b8 <iprintf>
 8010dc8:	e01b      	b.n	8010e02 <netif_set_link_up+0x56>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 8010dca:	687b      	ldr	r3, [r7, #4]
 8010dcc:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8010dd0:	f003 0304 	and.w	r3, r3, #4
 8010dd4:	2b00      	cmp	r3, #0
 8010dd6:	d114      	bne.n	8010e02 <netif_set_link_up+0x56>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 8010dd8:	687b      	ldr	r3, [r7, #4]
 8010dda:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8010dde:	f043 0304 	orr.w	r3, r3, #4
 8010de2:	b2da      	uxtb	r2, r3
 8010de4:	687b      	ldr	r3, [r7, #4]
 8010de6:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 8010dea:	2103      	movs	r1, #3
 8010dec:	6878      	ldr	r0, [r7, #4]
 8010dee:	f7ff ff6b 	bl	8010cc8 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 8010df2:	687b      	ldr	r3, [r7, #4]
 8010df4:	69db      	ldr	r3, [r3, #28]
 8010df6:	2b00      	cmp	r3, #0
 8010df8:	d003      	beq.n	8010e02 <netif_set_link_up+0x56>
 8010dfa:	687b      	ldr	r3, [r7, #4]
 8010dfc:	69db      	ldr	r3, [r3, #28]
 8010dfe:	6878      	ldr	r0, [r7, #4]
 8010e00:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 8010e02:	3708      	adds	r7, #8
 8010e04:	46bd      	mov	sp, r7
 8010e06:	bd80      	pop	{r7, pc}
 8010e08:	0801e6a0 	.word	0x0801e6a0
 8010e0c:	0801e888 	.word	0x0801e888
 8010e10:	0801e6f0 	.word	0x0801e6f0

08010e14 <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 8010e14:	b580      	push	{r7, lr}
 8010e16:	b082      	sub	sp, #8
 8010e18:	af00      	add	r7, sp, #0
 8010e1a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 8010e1c:	687b      	ldr	r3, [r7, #4]
 8010e1e:	2b00      	cmp	r3, #0
 8010e20:	d107      	bne.n	8010e32 <netif_set_link_down+0x1e>
 8010e22:	4b11      	ldr	r3, [pc, #68]	; (8010e68 <netif_set_link_down+0x54>)
 8010e24:	f240 4206 	movw	r2, #1030	; 0x406
 8010e28:	4910      	ldr	r1, [pc, #64]	; (8010e6c <netif_set_link_down+0x58>)
 8010e2a:	4811      	ldr	r0, [pc, #68]	; (8010e70 <netif_set_link_down+0x5c>)
 8010e2c:	f00a fa44 	bl	801b2b8 <iprintf>
 8010e30:	e017      	b.n	8010e62 <netif_set_link_down+0x4e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 8010e32:	687b      	ldr	r3, [r7, #4]
 8010e34:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8010e38:	f003 0304 	and.w	r3, r3, #4
 8010e3c:	2b00      	cmp	r3, #0
 8010e3e:	d010      	beq.n	8010e62 <netif_set_link_down+0x4e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 8010e40:	687b      	ldr	r3, [r7, #4]
 8010e42:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8010e46:	f023 0304 	bic.w	r3, r3, #4
 8010e4a:	b2da      	uxtb	r2, r3
 8010e4c:	687b      	ldr	r3, [r7, #4]
 8010e4e:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    NETIF_LINK_CALLBACK(netif);
 8010e52:	687b      	ldr	r3, [r7, #4]
 8010e54:	69db      	ldr	r3, [r3, #28]
 8010e56:	2b00      	cmp	r3, #0
 8010e58:	d003      	beq.n	8010e62 <netif_set_link_down+0x4e>
 8010e5a:	687b      	ldr	r3, [r7, #4]
 8010e5c:	69db      	ldr	r3, [r3, #28]
 8010e5e:	6878      	ldr	r0, [r7, #4]
 8010e60:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 8010e62:	3708      	adds	r7, #8
 8010e64:	46bd      	mov	sp, r7
 8010e66:	bd80      	pop	{r7, pc}
 8010e68:	0801e6a0 	.word	0x0801e6a0
 8010e6c:	0801e8ac 	.word	0x0801e8ac
 8010e70:	0801e6f0 	.word	0x0801e6f0

08010e74 <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 8010e74:	b480      	push	{r7}
 8010e76:	b083      	sub	sp, #12
 8010e78:	af00      	add	r7, sp, #0
 8010e7a:	6078      	str	r0, [r7, #4]
 8010e7c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 8010e7e:	687b      	ldr	r3, [r7, #4]
 8010e80:	2b00      	cmp	r3, #0
 8010e82:	d002      	beq.n	8010e8a <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 8010e84:	687b      	ldr	r3, [r7, #4]
 8010e86:	683a      	ldr	r2, [r7, #0]
 8010e88:	61da      	str	r2, [r3, #28]
  }
}
 8010e8a:	bf00      	nop
 8010e8c:	370c      	adds	r7, #12
 8010e8e:	46bd      	mov	sp, r7
 8010e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e94:	4770      	bx	lr

08010e96 <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 8010e96:	b480      	push	{r7}
 8010e98:	b085      	sub	sp, #20
 8010e9a:	af00      	add	r7, sp, #0
 8010e9c:	60f8      	str	r0, [r7, #12]
 8010e9e:	60b9      	str	r1, [r7, #8]
 8010ea0:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 8010ea2:	f06f 030b 	mvn.w	r3, #11
}
 8010ea6:	4618      	mov	r0, r3
 8010ea8:	3714      	adds	r7, #20
 8010eaa:	46bd      	mov	sp, r7
 8010eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010eb0:	4770      	bx	lr
	...

08010eb4 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 8010eb4:	b480      	push	{r7}
 8010eb6:	b085      	sub	sp, #20
 8010eb8:	af00      	add	r7, sp, #0
 8010eba:	4603      	mov	r3, r0
 8010ebc:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 8010ebe:	79fb      	ldrb	r3, [r7, #7]
 8010ec0:	2b00      	cmp	r3, #0
 8010ec2:	d013      	beq.n	8010eec <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 8010ec4:	4b0d      	ldr	r3, [pc, #52]	; (8010efc <netif_get_by_index+0x48>)
 8010ec6:	681b      	ldr	r3, [r3, #0]
 8010ec8:	60fb      	str	r3, [r7, #12]
 8010eca:	e00c      	b.n	8010ee6 <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 8010ecc:	68fb      	ldr	r3, [r7, #12]
 8010ece:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8010ed2:	3301      	adds	r3, #1
 8010ed4:	b2db      	uxtb	r3, r3
 8010ed6:	79fa      	ldrb	r2, [r7, #7]
 8010ed8:	429a      	cmp	r2, r3
 8010eda:	d101      	bne.n	8010ee0 <netif_get_by_index+0x2c>
        return netif; /* found! */
 8010edc:	68fb      	ldr	r3, [r7, #12]
 8010ede:	e006      	b.n	8010eee <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 8010ee0:	68fb      	ldr	r3, [r7, #12]
 8010ee2:	681b      	ldr	r3, [r3, #0]
 8010ee4:	60fb      	str	r3, [r7, #12]
 8010ee6:	68fb      	ldr	r3, [r7, #12]
 8010ee8:	2b00      	cmp	r3, #0
 8010eea:	d1ef      	bne.n	8010ecc <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 8010eec:	2300      	movs	r3, #0
}
 8010eee:	4618      	mov	r0, r3
 8010ef0:	3714      	adds	r7, #20
 8010ef2:	46bd      	mov	sp, r7
 8010ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ef8:	4770      	bx	lr
 8010efa:	bf00      	nop
 8010efc:	200071a0 	.word	0x200071a0

08010f00 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 8010f00:	b580      	push	{r7, lr}
 8010f02:	b082      	sub	sp, #8
 8010f04:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 8010f06:	4b0c      	ldr	r3, [pc, #48]	; (8010f38 <pbuf_free_ooseq+0x38>)
 8010f08:	2200      	movs	r2, #0
 8010f0a:	701a      	strb	r2, [r3, #0]

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8010f0c:	4b0b      	ldr	r3, [pc, #44]	; (8010f3c <pbuf_free_ooseq+0x3c>)
 8010f0e:	681b      	ldr	r3, [r3, #0]
 8010f10:	607b      	str	r3, [r7, #4]
 8010f12:	e00a      	b.n	8010f2a <pbuf_free_ooseq+0x2a>
    if (pcb->ooseq != NULL) {
 8010f14:	687b      	ldr	r3, [r7, #4]
 8010f16:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010f18:	2b00      	cmp	r3, #0
 8010f1a:	d003      	beq.n	8010f24 <pbuf_free_ooseq+0x24>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 8010f1c:	6878      	ldr	r0, [r7, #4]
 8010f1e:	f002 fbe1 	bl	80136e4 <tcp_free_ooseq>
      return;
 8010f22:	e005      	b.n	8010f30 <pbuf_free_ooseq+0x30>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8010f24:	687b      	ldr	r3, [r7, #4]
 8010f26:	68db      	ldr	r3, [r3, #12]
 8010f28:	607b      	str	r3, [r7, #4]
 8010f2a:	687b      	ldr	r3, [r7, #4]
 8010f2c:	2b00      	cmp	r3, #0
 8010f2e:	d1f1      	bne.n	8010f14 <pbuf_free_ooseq+0x14>
    }
  }
}
 8010f30:	3708      	adds	r7, #8
 8010f32:	46bd      	mov	sp, r7
 8010f34:	bd80      	pop	{r7, pc}
 8010f36:	bf00      	nop
 8010f38:	200071a9 	.word	0x200071a9
 8010f3c:	200071b8 	.word	0x200071b8

08010f40 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 8010f40:	b480      	push	{r7}
 8010f42:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
 8010f44:	4b03      	ldr	r3, [pc, #12]	; (8010f54 <pbuf_pool_is_empty+0x14>)
 8010f46:	2201      	movs	r2, #1
 8010f48:	701a      	strb	r2, [r3, #0]
  if (!queued) {
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 8010f4a:	bf00      	nop
 8010f4c:	46bd      	mov	sp, r7
 8010f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f52:	4770      	bx	lr
 8010f54:	200071a9 	.word	0x200071a9

08010f58 <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 8010f58:	b480      	push	{r7}
 8010f5a:	b085      	sub	sp, #20
 8010f5c:	af00      	add	r7, sp, #0
 8010f5e:	60f8      	str	r0, [r7, #12]
 8010f60:	60b9      	str	r1, [r7, #8]
 8010f62:	4611      	mov	r1, r2
 8010f64:	461a      	mov	r2, r3
 8010f66:	460b      	mov	r3, r1
 8010f68:	80fb      	strh	r3, [r7, #6]
 8010f6a:	4613      	mov	r3, r2
 8010f6c:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 8010f6e:	68fb      	ldr	r3, [r7, #12]
 8010f70:	2200      	movs	r2, #0
 8010f72:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 8010f74:	68fb      	ldr	r3, [r7, #12]
 8010f76:	68ba      	ldr	r2, [r7, #8]
 8010f78:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 8010f7a:	68fb      	ldr	r3, [r7, #12]
 8010f7c:	88fa      	ldrh	r2, [r7, #6]
 8010f7e:	811a      	strh	r2, [r3, #8]
  p->len = len;
 8010f80:	68fb      	ldr	r3, [r7, #12]
 8010f82:	88ba      	ldrh	r2, [r7, #4]
 8010f84:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 8010f86:	8b3b      	ldrh	r3, [r7, #24]
 8010f88:	b2da      	uxtb	r2, r3
 8010f8a:	68fb      	ldr	r3, [r7, #12]
 8010f8c:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 8010f8e:	68fb      	ldr	r3, [r7, #12]
 8010f90:	7f3a      	ldrb	r2, [r7, #28]
 8010f92:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 8010f94:	68fb      	ldr	r3, [r7, #12]
 8010f96:	2201      	movs	r2, #1
 8010f98:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 8010f9a:	68fb      	ldr	r3, [r7, #12]
 8010f9c:	2200      	movs	r2, #0
 8010f9e:	73da      	strb	r2, [r3, #15]
}
 8010fa0:	bf00      	nop
 8010fa2:	3714      	adds	r7, #20
 8010fa4:	46bd      	mov	sp, r7
 8010fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010faa:	4770      	bx	lr

08010fac <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 8010fac:	b580      	push	{r7, lr}
 8010fae:	b08c      	sub	sp, #48	; 0x30
 8010fb0:	af02      	add	r7, sp, #8
 8010fb2:	4603      	mov	r3, r0
 8010fb4:	71fb      	strb	r3, [r7, #7]
 8010fb6:	460b      	mov	r3, r1
 8010fb8:	80bb      	strh	r3, [r7, #4]
 8010fba:	4613      	mov	r3, r2
 8010fbc:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 8010fbe:	79fb      	ldrb	r3, [r7, #7]
 8010fc0:	847b      	strh	r3, [r7, #34]	; 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 8010fc2:	887b      	ldrh	r3, [r7, #2]
 8010fc4:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 8010fc8:	f000 8082 	beq.w	80110d0 <pbuf_alloc+0x124>
 8010fcc:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 8010fd0:	f300 80c9 	bgt.w	8011166 <pbuf_alloc+0x1ba>
 8010fd4:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 8010fd8:	d010      	beq.n	8010ffc <pbuf_alloc+0x50>
 8010fda:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 8010fde:	f300 80c2 	bgt.w	8011166 <pbuf_alloc+0x1ba>
 8010fe2:	2b01      	cmp	r3, #1
 8010fe4:	d002      	beq.n	8010fec <pbuf_alloc+0x40>
 8010fe6:	2b41      	cmp	r3, #65	; 0x41
 8010fe8:	f040 80bd 	bne.w	8011166 <pbuf_alloc+0x1ba>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 8010fec:	887a      	ldrh	r2, [r7, #2]
 8010fee:	88bb      	ldrh	r3, [r7, #4]
 8010ff0:	4619      	mov	r1, r3
 8010ff2:	2000      	movs	r0, #0
 8010ff4:	f000 f8d2 	bl	801119c <pbuf_alloc_reference>
 8010ff8:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 8010ffa:	e0be      	b.n	801117a <pbuf_alloc+0x1ce>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 8010ffc:	2300      	movs	r3, #0
 8010ffe:	627b      	str	r3, [r7, #36]	; 0x24
      last = NULL;
 8011000:	2300      	movs	r3, #0
 8011002:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 8011004:	88bb      	ldrh	r3, [r7, #4]
 8011006:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 8011008:	2008      	movs	r0, #8
 801100a:	f7ff fbcd 	bl	80107a8 <memp_malloc>
 801100e:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 8011010:	693b      	ldr	r3, [r7, #16]
 8011012:	2b00      	cmp	r3, #0
 8011014:	d109      	bne.n	801102a <pbuf_alloc+0x7e>
          PBUF_POOL_IS_EMPTY();
 8011016:	f7ff ff93 	bl	8010f40 <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 801101a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801101c:	2b00      	cmp	r3, #0
 801101e:	d002      	beq.n	8011026 <pbuf_alloc+0x7a>
            pbuf_free(p);
 8011020:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8011022:	f000 faa7 	bl	8011574 <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 8011026:	2300      	movs	r3, #0
 8011028:	e0a8      	b.n	801117c <pbuf_alloc+0x1d0>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 801102a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801102c:	3303      	adds	r3, #3
 801102e:	b29b      	uxth	r3, r3
 8011030:	f023 0303 	bic.w	r3, r3, #3
 8011034:	b29a      	uxth	r2, r3
 8011036:	f240 53ec 	movw	r3, #1516	; 0x5ec
 801103a:	1a9b      	subs	r3, r3, r2
 801103c:	b29b      	uxth	r3, r3
 801103e:	8b7a      	ldrh	r2, [r7, #26]
 8011040:	4293      	cmp	r3, r2
 8011042:	bf28      	it	cs
 8011044:	4613      	movcs	r3, r2
 8011046:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 8011048:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801104a:	3310      	adds	r3, #16
 801104c:	693a      	ldr	r2, [r7, #16]
 801104e:	4413      	add	r3, r2
 8011050:	3303      	adds	r3, #3
 8011052:	f023 0303 	bic.w	r3, r3, #3
 8011056:	4618      	mov	r0, r3
 8011058:	89f9      	ldrh	r1, [r7, #14]
 801105a:	8b7a      	ldrh	r2, [r7, #26]
 801105c:	2300      	movs	r3, #0
 801105e:	9301      	str	r3, [sp, #4]
 8011060:	887b      	ldrh	r3, [r7, #2]
 8011062:	9300      	str	r3, [sp, #0]
 8011064:	460b      	mov	r3, r1
 8011066:	4601      	mov	r1, r0
 8011068:	6938      	ldr	r0, [r7, #16]
 801106a:	f7ff ff75 	bl	8010f58 <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 801106e:	693b      	ldr	r3, [r7, #16]
 8011070:	685b      	ldr	r3, [r3, #4]
 8011072:	f003 0303 	and.w	r3, r3, #3
 8011076:	2b00      	cmp	r3, #0
 8011078:	d006      	beq.n	8011088 <pbuf_alloc+0xdc>
 801107a:	4b42      	ldr	r3, [pc, #264]	; (8011184 <pbuf_alloc+0x1d8>)
 801107c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8011080:	4941      	ldr	r1, [pc, #260]	; (8011188 <pbuf_alloc+0x1dc>)
 8011082:	4842      	ldr	r0, [pc, #264]	; (801118c <pbuf_alloc+0x1e0>)
 8011084:	f00a f918 	bl	801b2b8 <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 8011088:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801108a:	3303      	adds	r3, #3
 801108c:	f023 0303 	bic.w	r3, r3, #3
 8011090:	f240 52ec 	movw	r2, #1516	; 0x5ec
 8011094:	4293      	cmp	r3, r2
 8011096:	d106      	bne.n	80110a6 <pbuf_alloc+0xfa>
 8011098:	4b3a      	ldr	r3, [pc, #232]	; (8011184 <pbuf_alloc+0x1d8>)
 801109a:	f44f 7281 	mov.w	r2, #258	; 0x102
 801109e:	493c      	ldr	r1, [pc, #240]	; (8011190 <pbuf_alloc+0x1e4>)
 80110a0:	483a      	ldr	r0, [pc, #232]	; (801118c <pbuf_alloc+0x1e0>)
 80110a2:	f00a f909 	bl	801b2b8 <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 80110a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80110a8:	2b00      	cmp	r3, #0
 80110aa:	d102      	bne.n	80110b2 <pbuf_alloc+0x106>
          /* allocated head of pbuf chain (into p) */
          p = q;
 80110ac:	693b      	ldr	r3, [r7, #16]
 80110ae:	627b      	str	r3, [r7, #36]	; 0x24
 80110b0:	e002      	b.n	80110b8 <pbuf_alloc+0x10c>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 80110b2:	69fb      	ldr	r3, [r7, #28]
 80110b4:	693a      	ldr	r2, [r7, #16]
 80110b6:	601a      	str	r2, [r3, #0]
        }
        last = q;
 80110b8:	693b      	ldr	r3, [r7, #16]
 80110ba:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 80110bc:	8b7a      	ldrh	r2, [r7, #26]
 80110be:	89fb      	ldrh	r3, [r7, #14]
 80110c0:	1ad3      	subs	r3, r2, r3
 80110c2:	837b      	strh	r3, [r7, #26]
        offset = 0;
 80110c4:	2300      	movs	r3, #0
 80110c6:	847b      	strh	r3, [r7, #34]	; 0x22
      } while (rem_len > 0);
 80110c8:	8b7b      	ldrh	r3, [r7, #26]
 80110ca:	2b00      	cmp	r3, #0
 80110cc:	d19c      	bne.n	8011008 <pbuf_alloc+0x5c>
      break;
 80110ce:	e054      	b.n	801117a <pbuf_alloc+0x1ce>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 80110d0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80110d2:	3303      	adds	r3, #3
 80110d4:	b29b      	uxth	r3, r3
 80110d6:	f023 0303 	bic.w	r3, r3, #3
 80110da:	b29a      	uxth	r2, r3
 80110dc:	88bb      	ldrh	r3, [r7, #4]
 80110de:	3303      	adds	r3, #3
 80110e0:	b29b      	uxth	r3, r3
 80110e2:	f023 0303 	bic.w	r3, r3, #3
 80110e6:	b29b      	uxth	r3, r3
 80110e8:	4413      	add	r3, r2
 80110ea:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 80110ec:	8b3b      	ldrh	r3, [r7, #24]
 80110ee:	3310      	adds	r3, #16
 80110f0:	617b      	str	r3, [r7, #20]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 80110f2:	8b3a      	ldrh	r2, [r7, #24]
 80110f4:	88bb      	ldrh	r3, [r7, #4]
 80110f6:	3303      	adds	r3, #3
 80110f8:	f023 0303 	bic.w	r3, r3, #3
 80110fc:	429a      	cmp	r2, r3
 80110fe:	d306      	bcc.n	801110e <pbuf_alloc+0x162>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 8011100:	88bb      	ldrh	r3, [r7, #4]
 8011102:	3303      	adds	r3, #3
 8011104:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8011108:	697a      	ldr	r2, [r7, #20]
 801110a:	429a      	cmp	r2, r3
 801110c:	d201      	bcs.n	8011112 <pbuf_alloc+0x166>
        return NULL;
 801110e:	2300      	movs	r3, #0
 8011110:	e034      	b.n	801117c <pbuf_alloc+0x1d0>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 8011112:	6978      	ldr	r0, [r7, #20]
 8011114:	f7ff f9c0 	bl	8010498 <mem_malloc>
 8011118:	6278      	str	r0, [r7, #36]	; 0x24
      if (p == NULL) {
 801111a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801111c:	2b00      	cmp	r3, #0
 801111e:	d101      	bne.n	8011124 <pbuf_alloc+0x178>
        return NULL;
 8011120:	2300      	movs	r3, #0
 8011122:	e02b      	b.n	801117c <pbuf_alloc+0x1d0>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 8011124:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8011126:	3310      	adds	r3, #16
 8011128:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801112a:	4413      	add	r3, r2
 801112c:	3303      	adds	r3, #3
 801112e:	f023 0303 	bic.w	r3, r3, #3
 8011132:	4618      	mov	r0, r3
 8011134:	88b9      	ldrh	r1, [r7, #4]
 8011136:	88ba      	ldrh	r2, [r7, #4]
 8011138:	2300      	movs	r3, #0
 801113a:	9301      	str	r3, [sp, #4]
 801113c:	887b      	ldrh	r3, [r7, #2]
 801113e:	9300      	str	r3, [sp, #0]
 8011140:	460b      	mov	r3, r1
 8011142:	4601      	mov	r1, r0
 8011144:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8011146:	f7ff ff07 	bl	8010f58 <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 801114a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801114c:	685b      	ldr	r3, [r3, #4]
 801114e:	f003 0303 	and.w	r3, r3, #3
 8011152:	2b00      	cmp	r3, #0
 8011154:	d010      	beq.n	8011178 <pbuf_alloc+0x1cc>
 8011156:	4b0b      	ldr	r3, [pc, #44]	; (8011184 <pbuf_alloc+0x1d8>)
 8011158:	f44f 7291 	mov.w	r2, #290	; 0x122
 801115c:	490d      	ldr	r1, [pc, #52]	; (8011194 <pbuf_alloc+0x1e8>)
 801115e:	480b      	ldr	r0, [pc, #44]	; (801118c <pbuf_alloc+0x1e0>)
 8011160:	f00a f8aa 	bl	801b2b8 <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 8011164:	e008      	b.n	8011178 <pbuf_alloc+0x1cc>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 8011166:	4b07      	ldr	r3, [pc, #28]	; (8011184 <pbuf_alloc+0x1d8>)
 8011168:	f240 1227 	movw	r2, #295	; 0x127
 801116c:	490a      	ldr	r1, [pc, #40]	; (8011198 <pbuf_alloc+0x1ec>)
 801116e:	4807      	ldr	r0, [pc, #28]	; (801118c <pbuf_alloc+0x1e0>)
 8011170:	f00a f8a2 	bl	801b2b8 <iprintf>
      return NULL;
 8011174:	2300      	movs	r3, #0
 8011176:	e001      	b.n	801117c <pbuf_alloc+0x1d0>
      break;
 8011178:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 801117a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 801117c:	4618      	mov	r0, r3
 801117e:	3728      	adds	r7, #40	; 0x28
 8011180:	46bd      	mov	sp, r7
 8011182:	bd80      	pop	{r7, pc}
 8011184:	0801e8d0 	.word	0x0801e8d0
 8011188:	0801e900 	.word	0x0801e900
 801118c:	0801e930 	.word	0x0801e930
 8011190:	0801e958 	.word	0x0801e958
 8011194:	0801e98c 	.word	0x0801e98c
 8011198:	0801e9b8 	.word	0x0801e9b8

0801119c <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 801119c:	b580      	push	{r7, lr}
 801119e:	b086      	sub	sp, #24
 80111a0:	af02      	add	r7, sp, #8
 80111a2:	6078      	str	r0, [r7, #4]
 80111a4:	460b      	mov	r3, r1
 80111a6:	807b      	strh	r3, [r7, #2]
 80111a8:	4613      	mov	r3, r2
 80111aa:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 80111ac:	883b      	ldrh	r3, [r7, #0]
 80111ae:	2b41      	cmp	r3, #65	; 0x41
 80111b0:	d009      	beq.n	80111c6 <pbuf_alloc_reference+0x2a>
 80111b2:	883b      	ldrh	r3, [r7, #0]
 80111b4:	2b01      	cmp	r3, #1
 80111b6:	d006      	beq.n	80111c6 <pbuf_alloc_reference+0x2a>
 80111b8:	4b0f      	ldr	r3, [pc, #60]	; (80111f8 <pbuf_alloc_reference+0x5c>)
 80111ba:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 80111be:	490f      	ldr	r1, [pc, #60]	; (80111fc <pbuf_alloc_reference+0x60>)
 80111c0:	480f      	ldr	r0, [pc, #60]	; (8011200 <pbuf_alloc_reference+0x64>)
 80111c2:	f00a f879 	bl	801b2b8 <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 80111c6:	2007      	movs	r0, #7
 80111c8:	f7ff faee 	bl	80107a8 <memp_malloc>
 80111cc:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 80111ce:	68fb      	ldr	r3, [r7, #12]
 80111d0:	2b00      	cmp	r3, #0
 80111d2:	d101      	bne.n	80111d8 <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 80111d4:	2300      	movs	r3, #0
 80111d6:	e00b      	b.n	80111f0 <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 80111d8:	8879      	ldrh	r1, [r7, #2]
 80111da:	887a      	ldrh	r2, [r7, #2]
 80111dc:	2300      	movs	r3, #0
 80111de:	9301      	str	r3, [sp, #4]
 80111e0:	883b      	ldrh	r3, [r7, #0]
 80111e2:	9300      	str	r3, [sp, #0]
 80111e4:	460b      	mov	r3, r1
 80111e6:	6879      	ldr	r1, [r7, #4]
 80111e8:	68f8      	ldr	r0, [r7, #12]
 80111ea:	f7ff feb5 	bl	8010f58 <pbuf_init_alloced_pbuf>
  return p;
 80111ee:	68fb      	ldr	r3, [r7, #12]
}
 80111f0:	4618      	mov	r0, r3
 80111f2:	3710      	adds	r7, #16
 80111f4:	46bd      	mov	sp, r7
 80111f6:	bd80      	pop	{r7, pc}
 80111f8:	0801e8d0 	.word	0x0801e8d0
 80111fc:	0801e9d4 	.word	0x0801e9d4
 8011200:	0801e930 	.word	0x0801e930

08011204 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 8011204:	b580      	push	{r7, lr}
 8011206:	b088      	sub	sp, #32
 8011208:	af02      	add	r7, sp, #8
 801120a:	607b      	str	r3, [r7, #4]
 801120c:	4603      	mov	r3, r0
 801120e:	73fb      	strb	r3, [r7, #15]
 8011210:	460b      	mov	r3, r1
 8011212:	81bb      	strh	r3, [r7, #12]
 8011214:	4613      	mov	r3, r2
 8011216:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 8011218:	7bfb      	ldrb	r3, [r7, #15]
 801121a:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 801121c:	8a7b      	ldrh	r3, [r7, #18]
 801121e:	3303      	adds	r3, #3
 8011220:	f023 0203 	bic.w	r2, r3, #3
 8011224:	89bb      	ldrh	r3, [r7, #12]
 8011226:	441a      	add	r2, r3
 8011228:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801122a:	429a      	cmp	r2, r3
 801122c:	d901      	bls.n	8011232 <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 801122e:	2300      	movs	r3, #0
 8011230:	e018      	b.n	8011264 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 8011232:	6a3b      	ldr	r3, [r7, #32]
 8011234:	2b00      	cmp	r3, #0
 8011236:	d007      	beq.n	8011248 <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 8011238:	8a7b      	ldrh	r3, [r7, #18]
 801123a:	3303      	adds	r3, #3
 801123c:	f023 0303 	bic.w	r3, r3, #3
 8011240:	6a3a      	ldr	r2, [r7, #32]
 8011242:	4413      	add	r3, r2
 8011244:	617b      	str	r3, [r7, #20]
 8011246:	e001      	b.n	801124c <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 8011248:	2300      	movs	r3, #0
 801124a:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 801124c:	6878      	ldr	r0, [r7, #4]
 801124e:	89b9      	ldrh	r1, [r7, #12]
 8011250:	89ba      	ldrh	r2, [r7, #12]
 8011252:	2302      	movs	r3, #2
 8011254:	9301      	str	r3, [sp, #4]
 8011256:	897b      	ldrh	r3, [r7, #10]
 8011258:	9300      	str	r3, [sp, #0]
 801125a:	460b      	mov	r3, r1
 801125c:	6979      	ldr	r1, [r7, #20]
 801125e:	f7ff fe7b 	bl	8010f58 <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 8011262:	687b      	ldr	r3, [r7, #4]
}
 8011264:	4618      	mov	r0, r3
 8011266:	3718      	adds	r7, #24
 8011268:	46bd      	mov	sp, r7
 801126a:	bd80      	pop	{r7, pc}

0801126c <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 801126c:	b580      	push	{r7, lr}
 801126e:	b084      	sub	sp, #16
 8011270:	af00      	add	r7, sp, #0
 8011272:	6078      	str	r0, [r7, #4]
 8011274:	460b      	mov	r3, r1
 8011276:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 8011278:	687b      	ldr	r3, [r7, #4]
 801127a:	2b00      	cmp	r3, #0
 801127c:	d106      	bne.n	801128c <pbuf_realloc+0x20>
 801127e:	4b39      	ldr	r3, [pc, #228]	; (8011364 <pbuf_realloc+0xf8>)
 8011280:	f44f 72cc 	mov.w	r2, #408	; 0x198
 8011284:	4938      	ldr	r1, [pc, #224]	; (8011368 <pbuf_realloc+0xfc>)
 8011286:	4839      	ldr	r0, [pc, #228]	; (801136c <pbuf_realloc+0x100>)
 8011288:	f00a f816 	bl	801b2b8 <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 801128c:	687b      	ldr	r3, [r7, #4]
 801128e:	891b      	ldrh	r3, [r3, #8]
 8011290:	887a      	ldrh	r2, [r7, #2]
 8011292:	429a      	cmp	r2, r3
 8011294:	d261      	bcs.n	801135a <pbuf_realloc+0xee>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 8011296:	687b      	ldr	r3, [r7, #4]
 8011298:	891a      	ldrh	r2, [r3, #8]
 801129a:	887b      	ldrh	r3, [r7, #2]
 801129c:	1ad3      	subs	r3, r2, r3
 801129e:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 80112a0:	887b      	ldrh	r3, [r7, #2]
 80112a2:	817b      	strh	r3, [r7, #10]
  q = p;
 80112a4:	687b      	ldr	r3, [r7, #4]
 80112a6:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 80112a8:	e018      	b.n	80112dc <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 80112aa:	68fb      	ldr	r3, [r7, #12]
 80112ac:	895b      	ldrh	r3, [r3, #10]
 80112ae:	897a      	ldrh	r2, [r7, #10]
 80112b0:	1ad3      	subs	r3, r2, r3
 80112b2:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 80112b4:	68fb      	ldr	r3, [r7, #12]
 80112b6:	891a      	ldrh	r2, [r3, #8]
 80112b8:	893b      	ldrh	r3, [r7, #8]
 80112ba:	1ad3      	subs	r3, r2, r3
 80112bc:	b29a      	uxth	r2, r3
 80112be:	68fb      	ldr	r3, [r7, #12]
 80112c0:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 80112c2:	68fb      	ldr	r3, [r7, #12]
 80112c4:	681b      	ldr	r3, [r3, #0]
 80112c6:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 80112c8:	68fb      	ldr	r3, [r7, #12]
 80112ca:	2b00      	cmp	r3, #0
 80112cc:	d106      	bne.n	80112dc <pbuf_realloc+0x70>
 80112ce:	4b25      	ldr	r3, [pc, #148]	; (8011364 <pbuf_realloc+0xf8>)
 80112d0:	f240 12af 	movw	r2, #431	; 0x1af
 80112d4:	4926      	ldr	r1, [pc, #152]	; (8011370 <pbuf_realloc+0x104>)
 80112d6:	4825      	ldr	r0, [pc, #148]	; (801136c <pbuf_realloc+0x100>)
 80112d8:	f009 ffee 	bl	801b2b8 <iprintf>
  while (rem_len > q->len) {
 80112dc:	68fb      	ldr	r3, [r7, #12]
 80112de:	895b      	ldrh	r3, [r3, #10]
 80112e0:	897a      	ldrh	r2, [r7, #10]
 80112e2:	429a      	cmp	r2, r3
 80112e4:	d8e1      	bhi.n	80112aa <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 80112e6:	68fb      	ldr	r3, [r7, #12]
 80112e8:	7b1b      	ldrb	r3, [r3, #12]
 80112ea:	f003 030f 	and.w	r3, r3, #15
 80112ee:	2b00      	cmp	r3, #0
 80112f0:	d11f      	bne.n	8011332 <pbuf_realloc+0xc6>
 80112f2:	68fb      	ldr	r3, [r7, #12]
 80112f4:	895b      	ldrh	r3, [r3, #10]
 80112f6:	897a      	ldrh	r2, [r7, #10]
 80112f8:	429a      	cmp	r2, r3
 80112fa:	d01a      	beq.n	8011332 <pbuf_realloc+0xc6>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 80112fc:	68fb      	ldr	r3, [r7, #12]
 80112fe:	7b5b      	ldrb	r3, [r3, #13]
 8011300:	f003 0302 	and.w	r3, r3, #2
 8011304:	2b00      	cmp	r3, #0
 8011306:	d114      	bne.n	8011332 <pbuf_realloc+0xc6>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 8011308:	68fb      	ldr	r3, [r7, #12]
 801130a:	685a      	ldr	r2, [r3, #4]
 801130c:	68fb      	ldr	r3, [r7, #12]
 801130e:	1ad2      	subs	r2, r2, r3
 8011310:	897b      	ldrh	r3, [r7, #10]
 8011312:	4413      	add	r3, r2
 8011314:	4619      	mov	r1, r3
 8011316:	68f8      	ldr	r0, [r7, #12]
 8011318:	f7fe ffca 	bl	80102b0 <mem_trim>
 801131c:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 801131e:	68fb      	ldr	r3, [r7, #12]
 8011320:	2b00      	cmp	r3, #0
 8011322:	d106      	bne.n	8011332 <pbuf_realloc+0xc6>
 8011324:	4b0f      	ldr	r3, [pc, #60]	; (8011364 <pbuf_realloc+0xf8>)
 8011326:	f240 12bd 	movw	r2, #445	; 0x1bd
 801132a:	4912      	ldr	r1, [pc, #72]	; (8011374 <pbuf_realloc+0x108>)
 801132c:	480f      	ldr	r0, [pc, #60]	; (801136c <pbuf_realloc+0x100>)
 801132e:	f009 ffc3 	bl	801b2b8 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 8011332:	68fb      	ldr	r3, [r7, #12]
 8011334:	897a      	ldrh	r2, [r7, #10]
 8011336:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 8011338:	68fb      	ldr	r3, [r7, #12]
 801133a:	895a      	ldrh	r2, [r3, #10]
 801133c:	68fb      	ldr	r3, [r7, #12]
 801133e:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 8011340:	68fb      	ldr	r3, [r7, #12]
 8011342:	681b      	ldr	r3, [r3, #0]
 8011344:	2b00      	cmp	r3, #0
 8011346:	d004      	beq.n	8011352 <pbuf_realloc+0xe6>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 8011348:	68fb      	ldr	r3, [r7, #12]
 801134a:	681b      	ldr	r3, [r3, #0]
 801134c:	4618      	mov	r0, r3
 801134e:	f000 f911 	bl	8011574 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 8011352:	68fb      	ldr	r3, [r7, #12]
 8011354:	2200      	movs	r2, #0
 8011356:	601a      	str	r2, [r3, #0]
 8011358:	e000      	b.n	801135c <pbuf_realloc+0xf0>
    return;
 801135a:	bf00      	nop

}
 801135c:	3710      	adds	r7, #16
 801135e:	46bd      	mov	sp, r7
 8011360:	bd80      	pop	{r7, pc}
 8011362:	bf00      	nop
 8011364:	0801e8d0 	.word	0x0801e8d0
 8011368:	0801e9e8 	.word	0x0801e9e8
 801136c:	0801e930 	.word	0x0801e930
 8011370:	0801ea00 	.word	0x0801ea00
 8011374:	0801ea18 	.word	0x0801ea18

08011378 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 8011378:	b580      	push	{r7, lr}
 801137a:	b086      	sub	sp, #24
 801137c:	af00      	add	r7, sp, #0
 801137e:	60f8      	str	r0, [r7, #12]
 8011380:	60b9      	str	r1, [r7, #8]
 8011382:	4613      	mov	r3, r2
 8011384:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 8011386:	68fb      	ldr	r3, [r7, #12]
 8011388:	2b00      	cmp	r3, #0
 801138a:	d106      	bne.n	801139a <pbuf_add_header_impl+0x22>
 801138c:	4b2b      	ldr	r3, [pc, #172]	; (801143c <pbuf_add_header_impl+0xc4>)
 801138e:	f240 12df 	movw	r2, #479	; 0x1df
 8011392:	492b      	ldr	r1, [pc, #172]	; (8011440 <pbuf_add_header_impl+0xc8>)
 8011394:	482b      	ldr	r0, [pc, #172]	; (8011444 <pbuf_add_header_impl+0xcc>)
 8011396:	f009 ff8f 	bl	801b2b8 <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 801139a:	68fb      	ldr	r3, [r7, #12]
 801139c:	2b00      	cmp	r3, #0
 801139e:	d003      	beq.n	80113a8 <pbuf_add_header_impl+0x30>
 80113a0:	68bb      	ldr	r3, [r7, #8]
 80113a2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80113a6:	d301      	bcc.n	80113ac <pbuf_add_header_impl+0x34>
    return 1;
 80113a8:	2301      	movs	r3, #1
 80113aa:	e043      	b.n	8011434 <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 80113ac:	68bb      	ldr	r3, [r7, #8]
 80113ae:	2b00      	cmp	r3, #0
 80113b0:	d101      	bne.n	80113b6 <pbuf_add_header_impl+0x3e>
    return 0;
 80113b2:	2300      	movs	r3, #0
 80113b4:	e03e      	b.n	8011434 <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 80113b6:	68bb      	ldr	r3, [r7, #8]
 80113b8:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 80113ba:	68fb      	ldr	r3, [r7, #12]
 80113bc:	891a      	ldrh	r2, [r3, #8]
 80113be:	8a7b      	ldrh	r3, [r7, #18]
 80113c0:	4413      	add	r3, r2
 80113c2:	b29b      	uxth	r3, r3
 80113c4:	8a7a      	ldrh	r2, [r7, #18]
 80113c6:	429a      	cmp	r2, r3
 80113c8:	d901      	bls.n	80113ce <pbuf_add_header_impl+0x56>
    return 1;
 80113ca:	2301      	movs	r3, #1
 80113cc:	e032      	b.n	8011434 <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 80113ce:	68fb      	ldr	r3, [r7, #12]
 80113d0:	7b1b      	ldrb	r3, [r3, #12]
 80113d2:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 80113d4:	8a3b      	ldrh	r3, [r7, #16]
 80113d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80113da:	2b00      	cmp	r3, #0
 80113dc:	d00c      	beq.n	80113f8 <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 80113de:	68fb      	ldr	r3, [r7, #12]
 80113e0:	685a      	ldr	r2, [r3, #4]
 80113e2:	68bb      	ldr	r3, [r7, #8]
 80113e4:	425b      	negs	r3, r3
 80113e6:	4413      	add	r3, r2
 80113e8:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 80113ea:	68fb      	ldr	r3, [r7, #12]
 80113ec:	3310      	adds	r3, #16
 80113ee:	697a      	ldr	r2, [r7, #20]
 80113f0:	429a      	cmp	r2, r3
 80113f2:	d20d      	bcs.n	8011410 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 80113f4:	2301      	movs	r3, #1
 80113f6:	e01d      	b.n	8011434 <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 80113f8:	79fb      	ldrb	r3, [r7, #7]
 80113fa:	2b00      	cmp	r3, #0
 80113fc:	d006      	beq.n	801140c <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 80113fe:	68fb      	ldr	r3, [r7, #12]
 8011400:	685a      	ldr	r2, [r3, #4]
 8011402:	68bb      	ldr	r3, [r7, #8]
 8011404:	425b      	negs	r3, r3
 8011406:	4413      	add	r3, r2
 8011408:	617b      	str	r3, [r7, #20]
 801140a:	e001      	b.n	8011410 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 801140c:	2301      	movs	r3, #1
 801140e:	e011      	b.n	8011434 <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 8011410:	68fb      	ldr	r3, [r7, #12]
 8011412:	697a      	ldr	r2, [r7, #20]
 8011414:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 8011416:	68fb      	ldr	r3, [r7, #12]
 8011418:	895a      	ldrh	r2, [r3, #10]
 801141a:	8a7b      	ldrh	r3, [r7, #18]
 801141c:	4413      	add	r3, r2
 801141e:	b29a      	uxth	r2, r3
 8011420:	68fb      	ldr	r3, [r7, #12]
 8011422:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 8011424:	68fb      	ldr	r3, [r7, #12]
 8011426:	891a      	ldrh	r2, [r3, #8]
 8011428:	8a7b      	ldrh	r3, [r7, #18]
 801142a:	4413      	add	r3, r2
 801142c:	b29a      	uxth	r2, r3
 801142e:	68fb      	ldr	r3, [r7, #12]
 8011430:	811a      	strh	r2, [r3, #8]


  return 0;
 8011432:	2300      	movs	r3, #0
}
 8011434:	4618      	mov	r0, r3
 8011436:	3718      	adds	r7, #24
 8011438:	46bd      	mov	sp, r7
 801143a:	bd80      	pop	{r7, pc}
 801143c:	0801e8d0 	.word	0x0801e8d0
 8011440:	0801ea34 	.word	0x0801ea34
 8011444:	0801e930 	.word	0x0801e930

08011448 <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 8011448:	b580      	push	{r7, lr}
 801144a:	b082      	sub	sp, #8
 801144c:	af00      	add	r7, sp, #0
 801144e:	6078      	str	r0, [r7, #4]
 8011450:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 8011452:	2200      	movs	r2, #0
 8011454:	6839      	ldr	r1, [r7, #0]
 8011456:	6878      	ldr	r0, [r7, #4]
 8011458:	f7ff ff8e 	bl	8011378 <pbuf_add_header_impl>
 801145c:	4603      	mov	r3, r0
}
 801145e:	4618      	mov	r0, r3
 8011460:	3708      	adds	r7, #8
 8011462:	46bd      	mov	sp, r7
 8011464:	bd80      	pop	{r7, pc}
	...

08011468 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 8011468:	b580      	push	{r7, lr}
 801146a:	b084      	sub	sp, #16
 801146c:	af00      	add	r7, sp, #0
 801146e:	6078      	str	r0, [r7, #4]
 8011470:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 8011472:	687b      	ldr	r3, [r7, #4]
 8011474:	2b00      	cmp	r3, #0
 8011476:	d106      	bne.n	8011486 <pbuf_remove_header+0x1e>
 8011478:	4b20      	ldr	r3, [pc, #128]	; (80114fc <pbuf_remove_header+0x94>)
 801147a:	f240 224b 	movw	r2, #587	; 0x24b
 801147e:	4920      	ldr	r1, [pc, #128]	; (8011500 <pbuf_remove_header+0x98>)
 8011480:	4820      	ldr	r0, [pc, #128]	; (8011504 <pbuf_remove_header+0x9c>)
 8011482:	f009 ff19 	bl	801b2b8 <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 8011486:	687b      	ldr	r3, [r7, #4]
 8011488:	2b00      	cmp	r3, #0
 801148a:	d003      	beq.n	8011494 <pbuf_remove_header+0x2c>
 801148c:	683b      	ldr	r3, [r7, #0]
 801148e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8011492:	d301      	bcc.n	8011498 <pbuf_remove_header+0x30>
    return 1;
 8011494:	2301      	movs	r3, #1
 8011496:	e02c      	b.n	80114f2 <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 8011498:	683b      	ldr	r3, [r7, #0]
 801149a:	2b00      	cmp	r3, #0
 801149c:	d101      	bne.n	80114a2 <pbuf_remove_header+0x3a>
    return 0;
 801149e:	2300      	movs	r3, #0
 80114a0:	e027      	b.n	80114f2 <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 80114a2:	683b      	ldr	r3, [r7, #0]
 80114a4:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 80114a6:	687b      	ldr	r3, [r7, #4]
 80114a8:	895b      	ldrh	r3, [r3, #10]
 80114aa:	89fa      	ldrh	r2, [r7, #14]
 80114ac:	429a      	cmp	r2, r3
 80114ae:	d908      	bls.n	80114c2 <pbuf_remove_header+0x5a>
 80114b0:	4b12      	ldr	r3, [pc, #72]	; (80114fc <pbuf_remove_header+0x94>)
 80114b2:	f240 2255 	movw	r2, #597	; 0x255
 80114b6:	4914      	ldr	r1, [pc, #80]	; (8011508 <pbuf_remove_header+0xa0>)
 80114b8:	4812      	ldr	r0, [pc, #72]	; (8011504 <pbuf_remove_header+0x9c>)
 80114ba:	f009 fefd 	bl	801b2b8 <iprintf>
 80114be:	2301      	movs	r3, #1
 80114c0:	e017      	b.n	80114f2 <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 80114c2:	687b      	ldr	r3, [r7, #4]
 80114c4:	685b      	ldr	r3, [r3, #4]
 80114c6:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 80114c8:	687b      	ldr	r3, [r7, #4]
 80114ca:	685a      	ldr	r2, [r3, #4]
 80114cc:	683b      	ldr	r3, [r7, #0]
 80114ce:	441a      	add	r2, r3
 80114d0:	687b      	ldr	r3, [r7, #4]
 80114d2:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 80114d4:	687b      	ldr	r3, [r7, #4]
 80114d6:	895a      	ldrh	r2, [r3, #10]
 80114d8:	89fb      	ldrh	r3, [r7, #14]
 80114da:	1ad3      	subs	r3, r2, r3
 80114dc:	b29a      	uxth	r2, r3
 80114de:	687b      	ldr	r3, [r7, #4]
 80114e0:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 80114e2:	687b      	ldr	r3, [r7, #4]
 80114e4:	891a      	ldrh	r2, [r3, #8]
 80114e6:	89fb      	ldrh	r3, [r7, #14]
 80114e8:	1ad3      	subs	r3, r2, r3
 80114ea:	b29a      	uxth	r2, r3
 80114ec:	687b      	ldr	r3, [r7, #4]
 80114ee:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 80114f0:	2300      	movs	r3, #0
}
 80114f2:	4618      	mov	r0, r3
 80114f4:	3710      	adds	r7, #16
 80114f6:	46bd      	mov	sp, r7
 80114f8:	bd80      	pop	{r7, pc}
 80114fa:	bf00      	nop
 80114fc:	0801e8d0 	.word	0x0801e8d0
 8011500:	0801ea34 	.word	0x0801ea34
 8011504:	0801e930 	.word	0x0801e930
 8011508:	0801ea40 	.word	0x0801ea40

0801150c <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 801150c:	b580      	push	{r7, lr}
 801150e:	b082      	sub	sp, #8
 8011510:	af00      	add	r7, sp, #0
 8011512:	6078      	str	r0, [r7, #4]
 8011514:	460b      	mov	r3, r1
 8011516:	807b      	strh	r3, [r7, #2]
 8011518:	4613      	mov	r3, r2
 801151a:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 801151c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8011520:	2b00      	cmp	r3, #0
 8011522:	da08      	bge.n	8011536 <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 8011524:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8011528:	425b      	negs	r3, r3
 801152a:	4619      	mov	r1, r3
 801152c:	6878      	ldr	r0, [r7, #4]
 801152e:	f7ff ff9b 	bl	8011468 <pbuf_remove_header>
 8011532:	4603      	mov	r3, r0
 8011534:	e007      	b.n	8011546 <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 8011536:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 801153a:	787a      	ldrb	r2, [r7, #1]
 801153c:	4619      	mov	r1, r3
 801153e:	6878      	ldr	r0, [r7, #4]
 8011540:	f7ff ff1a 	bl	8011378 <pbuf_add_header_impl>
 8011544:	4603      	mov	r3, r0
  }
}
 8011546:	4618      	mov	r0, r3
 8011548:	3708      	adds	r7, #8
 801154a:	46bd      	mov	sp, r7
 801154c:	bd80      	pop	{r7, pc}

0801154e <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 801154e:	b580      	push	{r7, lr}
 8011550:	b082      	sub	sp, #8
 8011552:	af00      	add	r7, sp, #0
 8011554:	6078      	str	r0, [r7, #4]
 8011556:	460b      	mov	r3, r1
 8011558:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 801155a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 801155e:	2201      	movs	r2, #1
 8011560:	4619      	mov	r1, r3
 8011562:	6878      	ldr	r0, [r7, #4]
 8011564:	f7ff ffd2 	bl	801150c <pbuf_header_impl>
 8011568:	4603      	mov	r3, r0
}
 801156a:	4618      	mov	r0, r3
 801156c:	3708      	adds	r7, #8
 801156e:	46bd      	mov	sp, r7
 8011570:	bd80      	pop	{r7, pc}
	...

08011574 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 8011574:	b580      	push	{r7, lr}
 8011576:	b086      	sub	sp, #24
 8011578:	af00      	add	r7, sp, #0
 801157a:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 801157c:	687b      	ldr	r3, [r7, #4]
 801157e:	2b00      	cmp	r3, #0
 8011580:	d10b      	bne.n	801159a <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 8011582:	687b      	ldr	r3, [r7, #4]
 8011584:	2b00      	cmp	r3, #0
 8011586:	d106      	bne.n	8011596 <pbuf_free+0x22>
 8011588:	4b38      	ldr	r3, [pc, #224]	; (801166c <pbuf_free+0xf8>)
 801158a:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 801158e:	4938      	ldr	r1, [pc, #224]	; (8011670 <pbuf_free+0xfc>)
 8011590:	4838      	ldr	r0, [pc, #224]	; (8011674 <pbuf_free+0x100>)
 8011592:	f009 fe91 	bl	801b2b8 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 8011596:	2300      	movs	r3, #0
 8011598:	e063      	b.n	8011662 <pbuf_free+0xee>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 801159a:	2300      	movs	r3, #0
 801159c:	75fb      	strb	r3, [r7, #23]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 801159e:	e05c      	b.n	801165a <pbuf_free+0xe6>
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 80115a0:	687b      	ldr	r3, [r7, #4]
 80115a2:	7b9b      	ldrb	r3, [r3, #14]
 80115a4:	2b00      	cmp	r3, #0
 80115a6:	d106      	bne.n	80115b6 <pbuf_free+0x42>
 80115a8:	4b30      	ldr	r3, [pc, #192]	; (801166c <pbuf_free+0xf8>)
 80115aa:	f240 22f1 	movw	r2, #753	; 0x2f1
 80115ae:	4932      	ldr	r1, [pc, #200]	; (8011678 <pbuf_free+0x104>)
 80115b0:	4830      	ldr	r0, [pc, #192]	; (8011674 <pbuf_free+0x100>)
 80115b2:	f009 fe81 	bl	801b2b8 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 80115b6:	687b      	ldr	r3, [r7, #4]
 80115b8:	7b9b      	ldrb	r3, [r3, #14]
 80115ba:	3b01      	subs	r3, #1
 80115bc:	b2da      	uxtb	r2, r3
 80115be:	687b      	ldr	r3, [r7, #4]
 80115c0:	739a      	strb	r2, [r3, #14]
 80115c2:	687b      	ldr	r3, [r7, #4]
 80115c4:	7b9b      	ldrb	r3, [r3, #14]
 80115c6:	75bb      	strb	r3, [r7, #22]
    SYS_ARCH_UNPROTECT(old_level);
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 80115c8:	7dbb      	ldrb	r3, [r7, #22]
 80115ca:	2b00      	cmp	r3, #0
 80115cc:	d143      	bne.n	8011656 <pbuf_free+0xe2>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 80115ce:	687b      	ldr	r3, [r7, #4]
 80115d0:	681b      	ldr	r3, [r3, #0]
 80115d2:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 80115d4:	687b      	ldr	r3, [r7, #4]
 80115d6:	7b1b      	ldrb	r3, [r3, #12]
 80115d8:	f003 030f 	and.w	r3, r3, #15
 80115dc:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 80115de:	687b      	ldr	r3, [r7, #4]
 80115e0:	7b5b      	ldrb	r3, [r3, #13]
 80115e2:	f003 0302 	and.w	r3, r3, #2
 80115e6:	2b00      	cmp	r3, #0
 80115e8:	d011      	beq.n	801160e <pbuf_free+0x9a>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 80115ea:	687b      	ldr	r3, [r7, #4]
 80115ec:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 80115ee:	68bb      	ldr	r3, [r7, #8]
 80115f0:	691b      	ldr	r3, [r3, #16]
 80115f2:	2b00      	cmp	r3, #0
 80115f4:	d106      	bne.n	8011604 <pbuf_free+0x90>
 80115f6:	4b1d      	ldr	r3, [pc, #116]	; (801166c <pbuf_free+0xf8>)
 80115f8:	f240 22ff 	movw	r2, #767	; 0x2ff
 80115fc:	491f      	ldr	r1, [pc, #124]	; (801167c <pbuf_free+0x108>)
 80115fe:	481d      	ldr	r0, [pc, #116]	; (8011674 <pbuf_free+0x100>)
 8011600:	f009 fe5a 	bl	801b2b8 <iprintf>
        pc->custom_free_function(p);
 8011604:	68bb      	ldr	r3, [r7, #8]
 8011606:	691b      	ldr	r3, [r3, #16]
 8011608:	6878      	ldr	r0, [r7, #4]
 801160a:	4798      	blx	r3
 801160c:	e01d      	b.n	801164a <pbuf_free+0xd6>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 801160e:	7bfb      	ldrb	r3, [r7, #15]
 8011610:	2b02      	cmp	r3, #2
 8011612:	d104      	bne.n	801161e <pbuf_free+0xaa>
          memp_free(MEMP_PBUF_POOL, p);
 8011614:	6879      	ldr	r1, [r7, #4]
 8011616:	2008      	movs	r0, #8
 8011618:	f7ff f936 	bl	8010888 <memp_free>
 801161c:	e015      	b.n	801164a <pbuf_free+0xd6>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 801161e:	7bfb      	ldrb	r3, [r7, #15]
 8011620:	2b01      	cmp	r3, #1
 8011622:	d104      	bne.n	801162e <pbuf_free+0xba>
          memp_free(MEMP_PBUF, p);
 8011624:	6879      	ldr	r1, [r7, #4]
 8011626:	2007      	movs	r0, #7
 8011628:	f7ff f92e 	bl	8010888 <memp_free>
 801162c:	e00d      	b.n	801164a <pbuf_free+0xd6>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 801162e:	7bfb      	ldrb	r3, [r7, #15]
 8011630:	2b00      	cmp	r3, #0
 8011632:	d103      	bne.n	801163c <pbuf_free+0xc8>
          mem_free(p);
 8011634:	6878      	ldr	r0, [r7, #4]
 8011636:	f7fe fdd1 	bl	80101dc <mem_free>
 801163a:	e006      	b.n	801164a <pbuf_free+0xd6>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 801163c:	4b0b      	ldr	r3, [pc, #44]	; (801166c <pbuf_free+0xf8>)
 801163e:	f240 320f 	movw	r2, #783	; 0x30f
 8011642:	490f      	ldr	r1, [pc, #60]	; (8011680 <pbuf_free+0x10c>)
 8011644:	480b      	ldr	r0, [pc, #44]	; (8011674 <pbuf_free+0x100>)
 8011646:	f009 fe37 	bl	801b2b8 <iprintf>
        }
      }
      count++;
 801164a:	7dfb      	ldrb	r3, [r7, #23]
 801164c:	3301      	adds	r3, #1
 801164e:	75fb      	strb	r3, [r7, #23]
      /* proceed to next pbuf */
      p = q;
 8011650:	693b      	ldr	r3, [r7, #16]
 8011652:	607b      	str	r3, [r7, #4]
 8011654:	e001      	b.n	801165a <pbuf_free+0xe6>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 8011656:	2300      	movs	r3, #0
 8011658:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 801165a:	687b      	ldr	r3, [r7, #4]
 801165c:	2b00      	cmp	r3, #0
 801165e:	d19f      	bne.n	80115a0 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 8011660:	7dfb      	ldrb	r3, [r7, #23]
}
 8011662:	4618      	mov	r0, r3
 8011664:	3718      	adds	r7, #24
 8011666:	46bd      	mov	sp, r7
 8011668:	bd80      	pop	{r7, pc}
 801166a:	bf00      	nop
 801166c:	0801e8d0 	.word	0x0801e8d0
 8011670:	0801ea34 	.word	0x0801ea34
 8011674:	0801e930 	.word	0x0801e930
 8011678:	0801ea60 	.word	0x0801ea60
 801167c:	0801ea78 	.word	0x0801ea78
 8011680:	0801ea9c 	.word	0x0801ea9c

08011684 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 8011684:	b480      	push	{r7}
 8011686:	b085      	sub	sp, #20
 8011688:	af00      	add	r7, sp, #0
 801168a:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 801168c:	2300      	movs	r3, #0
 801168e:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 8011690:	e005      	b.n	801169e <pbuf_clen+0x1a>
    ++len;
 8011692:	89fb      	ldrh	r3, [r7, #14]
 8011694:	3301      	adds	r3, #1
 8011696:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 8011698:	687b      	ldr	r3, [r7, #4]
 801169a:	681b      	ldr	r3, [r3, #0]
 801169c:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 801169e:	687b      	ldr	r3, [r7, #4]
 80116a0:	2b00      	cmp	r3, #0
 80116a2:	d1f6      	bne.n	8011692 <pbuf_clen+0xe>
  }
  return len;
 80116a4:	89fb      	ldrh	r3, [r7, #14]
}
 80116a6:	4618      	mov	r0, r3
 80116a8:	3714      	adds	r7, #20
 80116aa:	46bd      	mov	sp, r7
 80116ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80116b0:	4770      	bx	lr
	...

080116b4 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 80116b4:	b580      	push	{r7, lr}
 80116b6:	b082      	sub	sp, #8
 80116b8:	af00      	add	r7, sp, #0
 80116ba:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 80116bc:	687b      	ldr	r3, [r7, #4]
 80116be:	2b00      	cmp	r3, #0
 80116c0:	d010      	beq.n	80116e4 <pbuf_ref+0x30>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 80116c2:	687b      	ldr	r3, [r7, #4]
 80116c4:	7b9b      	ldrb	r3, [r3, #14]
 80116c6:	3301      	adds	r3, #1
 80116c8:	b2da      	uxtb	r2, r3
 80116ca:	687b      	ldr	r3, [r7, #4]
 80116cc:	739a      	strb	r2, [r3, #14]
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 80116ce:	687b      	ldr	r3, [r7, #4]
 80116d0:	7b9b      	ldrb	r3, [r3, #14]
 80116d2:	2b00      	cmp	r3, #0
 80116d4:	d106      	bne.n	80116e4 <pbuf_ref+0x30>
 80116d6:	4b05      	ldr	r3, [pc, #20]	; (80116ec <pbuf_ref+0x38>)
 80116d8:	f240 3242 	movw	r2, #834	; 0x342
 80116dc:	4904      	ldr	r1, [pc, #16]	; (80116f0 <pbuf_ref+0x3c>)
 80116de:	4805      	ldr	r0, [pc, #20]	; (80116f4 <pbuf_ref+0x40>)
 80116e0:	f009 fdea 	bl	801b2b8 <iprintf>
  }
}
 80116e4:	bf00      	nop
 80116e6:	3708      	adds	r7, #8
 80116e8:	46bd      	mov	sp, r7
 80116ea:	bd80      	pop	{r7, pc}
 80116ec:	0801e8d0 	.word	0x0801e8d0
 80116f0:	0801eab0 	.word	0x0801eab0
 80116f4:	0801e930 	.word	0x0801e930

080116f8 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 80116f8:	b580      	push	{r7, lr}
 80116fa:	b084      	sub	sp, #16
 80116fc:	af00      	add	r7, sp, #0
 80116fe:	6078      	str	r0, [r7, #4]
 8011700:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 8011702:	687b      	ldr	r3, [r7, #4]
 8011704:	2b00      	cmp	r3, #0
 8011706:	d002      	beq.n	801170e <pbuf_cat+0x16>
 8011708:	683b      	ldr	r3, [r7, #0]
 801170a:	2b00      	cmp	r3, #0
 801170c:	d107      	bne.n	801171e <pbuf_cat+0x26>
 801170e:	4b20      	ldr	r3, [pc, #128]	; (8011790 <pbuf_cat+0x98>)
 8011710:	f240 3259 	movw	r2, #857	; 0x359
 8011714:	491f      	ldr	r1, [pc, #124]	; (8011794 <pbuf_cat+0x9c>)
 8011716:	4820      	ldr	r0, [pc, #128]	; (8011798 <pbuf_cat+0xa0>)
 8011718:	f009 fdce 	bl	801b2b8 <iprintf>
 801171c:	e034      	b.n	8011788 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 801171e:	687b      	ldr	r3, [r7, #4]
 8011720:	60fb      	str	r3, [r7, #12]
 8011722:	e00a      	b.n	801173a <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8011724:	68fb      	ldr	r3, [r7, #12]
 8011726:	891a      	ldrh	r2, [r3, #8]
 8011728:	683b      	ldr	r3, [r7, #0]
 801172a:	891b      	ldrh	r3, [r3, #8]
 801172c:	4413      	add	r3, r2
 801172e:	b29a      	uxth	r2, r3
 8011730:	68fb      	ldr	r3, [r7, #12]
 8011732:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 8011734:	68fb      	ldr	r3, [r7, #12]
 8011736:	681b      	ldr	r3, [r3, #0]
 8011738:	60fb      	str	r3, [r7, #12]
 801173a:	68fb      	ldr	r3, [r7, #12]
 801173c:	681b      	ldr	r3, [r3, #0]
 801173e:	2b00      	cmp	r3, #0
 8011740:	d1f0      	bne.n	8011724 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 8011742:	68fb      	ldr	r3, [r7, #12]
 8011744:	891a      	ldrh	r2, [r3, #8]
 8011746:	68fb      	ldr	r3, [r7, #12]
 8011748:	895b      	ldrh	r3, [r3, #10]
 801174a:	429a      	cmp	r2, r3
 801174c:	d006      	beq.n	801175c <pbuf_cat+0x64>
 801174e:	4b10      	ldr	r3, [pc, #64]	; (8011790 <pbuf_cat+0x98>)
 8011750:	f240 3262 	movw	r2, #866	; 0x362
 8011754:	4911      	ldr	r1, [pc, #68]	; (801179c <pbuf_cat+0xa4>)
 8011756:	4810      	ldr	r0, [pc, #64]	; (8011798 <pbuf_cat+0xa0>)
 8011758:	f009 fdae 	bl	801b2b8 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 801175c:	68fb      	ldr	r3, [r7, #12]
 801175e:	681b      	ldr	r3, [r3, #0]
 8011760:	2b00      	cmp	r3, #0
 8011762:	d006      	beq.n	8011772 <pbuf_cat+0x7a>
 8011764:	4b0a      	ldr	r3, [pc, #40]	; (8011790 <pbuf_cat+0x98>)
 8011766:	f240 3263 	movw	r2, #867	; 0x363
 801176a:	490d      	ldr	r1, [pc, #52]	; (80117a0 <pbuf_cat+0xa8>)
 801176c:	480a      	ldr	r0, [pc, #40]	; (8011798 <pbuf_cat+0xa0>)
 801176e:	f009 fda3 	bl	801b2b8 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8011772:	68fb      	ldr	r3, [r7, #12]
 8011774:	891a      	ldrh	r2, [r3, #8]
 8011776:	683b      	ldr	r3, [r7, #0]
 8011778:	891b      	ldrh	r3, [r3, #8]
 801177a:	4413      	add	r3, r2
 801177c:	b29a      	uxth	r2, r3
 801177e:	68fb      	ldr	r3, [r7, #12]
 8011780:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 8011782:	68fb      	ldr	r3, [r7, #12]
 8011784:	683a      	ldr	r2, [r7, #0]
 8011786:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 8011788:	3710      	adds	r7, #16
 801178a:	46bd      	mov	sp, r7
 801178c:	bd80      	pop	{r7, pc}
 801178e:	bf00      	nop
 8011790:	0801e8d0 	.word	0x0801e8d0
 8011794:	0801eac4 	.word	0x0801eac4
 8011798:	0801e930 	.word	0x0801e930
 801179c:	0801eafc 	.word	0x0801eafc
 80117a0:	0801eb2c 	.word	0x0801eb2c

080117a4 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 80117a4:	b580      	push	{r7, lr}
 80117a6:	b086      	sub	sp, #24
 80117a8:	af00      	add	r7, sp, #0
 80117aa:	6078      	str	r0, [r7, #4]
 80117ac:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 80117ae:	2300      	movs	r3, #0
 80117b0:	617b      	str	r3, [r7, #20]
 80117b2:	2300      	movs	r3, #0
 80117b4:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 80117b6:	687b      	ldr	r3, [r7, #4]
 80117b8:	2b00      	cmp	r3, #0
 80117ba:	d008      	beq.n	80117ce <pbuf_copy+0x2a>
 80117bc:	683b      	ldr	r3, [r7, #0]
 80117be:	2b00      	cmp	r3, #0
 80117c0:	d005      	beq.n	80117ce <pbuf_copy+0x2a>
 80117c2:	687b      	ldr	r3, [r7, #4]
 80117c4:	891a      	ldrh	r2, [r3, #8]
 80117c6:	683b      	ldr	r3, [r7, #0]
 80117c8:	891b      	ldrh	r3, [r3, #8]
 80117ca:	429a      	cmp	r2, r3
 80117cc:	d209      	bcs.n	80117e2 <pbuf_copy+0x3e>
 80117ce:	4b57      	ldr	r3, [pc, #348]	; (801192c <pbuf_copy+0x188>)
 80117d0:	f240 32c9 	movw	r2, #969	; 0x3c9
 80117d4:	4956      	ldr	r1, [pc, #344]	; (8011930 <pbuf_copy+0x18c>)
 80117d6:	4857      	ldr	r0, [pc, #348]	; (8011934 <pbuf_copy+0x190>)
 80117d8:	f009 fd6e 	bl	801b2b8 <iprintf>
 80117dc:	f06f 030f 	mvn.w	r3, #15
 80117e0:	e09f      	b.n	8011922 <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 80117e2:	687b      	ldr	r3, [r7, #4]
 80117e4:	895b      	ldrh	r3, [r3, #10]
 80117e6:	461a      	mov	r2, r3
 80117e8:	697b      	ldr	r3, [r7, #20]
 80117ea:	1ad2      	subs	r2, r2, r3
 80117ec:	683b      	ldr	r3, [r7, #0]
 80117ee:	895b      	ldrh	r3, [r3, #10]
 80117f0:	4619      	mov	r1, r3
 80117f2:	693b      	ldr	r3, [r7, #16]
 80117f4:	1acb      	subs	r3, r1, r3
 80117f6:	429a      	cmp	r2, r3
 80117f8:	d306      	bcc.n	8011808 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 80117fa:	683b      	ldr	r3, [r7, #0]
 80117fc:	895b      	ldrh	r3, [r3, #10]
 80117fe:	461a      	mov	r2, r3
 8011800:	693b      	ldr	r3, [r7, #16]
 8011802:	1ad3      	subs	r3, r2, r3
 8011804:	60fb      	str	r3, [r7, #12]
 8011806:	e005      	b.n	8011814 <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 8011808:	687b      	ldr	r3, [r7, #4]
 801180a:	895b      	ldrh	r3, [r3, #10]
 801180c:	461a      	mov	r2, r3
 801180e:	697b      	ldr	r3, [r7, #20]
 8011810:	1ad3      	subs	r3, r2, r3
 8011812:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 8011814:	687b      	ldr	r3, [r7, #4]
 8011816:	685a      	ldr	r2, [r3, #4]
 8011818:	697b      	ldr	r3, [r7, #20]
 801181a:	18d0      	adds	r0, r2, r3
 801181c:	683b      	ldr	r3, [r7, #0]
 801181e:	685a      	ldr	r2, [r3, #4]
 8011820:	693b      	ldr	r3, [r7, #16]
 8011822:	4413      	add	r3, r2
 8011824:	68fa      	ldr	r2, [r7, #12]
 8011826:	4619      	mov	r1, r3
 8011828:	f009 ff61 	bl	801b6ee <memcpy>
    offset_to += len;
 801182c:	697a      	ldr	r2, [r7, #20]
 801182e:	68fb      	ldr	r3, [r7, #12]
 8011830:	4413      	add	r3, r2
 8011832:	617b      	str	r3, [r7, #20]
    offset_from += len;
 8011834:	693a      	ldr	r2, [r7, #16]
 8011836:	68fb      	ldr	r3, [r7, #12]
 8011838:	4413      	add	r3, r2
 801183a:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 801183c:	687b      	ldr	r3, [r7, #4]
 801183e:	895b      	ldrh	r3, [r3, #10]
 8011840:	461a      	mov	r2, r3
 8011842:	697b      	ldr	r3, [r7, #20]
 8011844:	4293      	cmp	r3, r2
 8011846:	d906      	bls.n	8011856 <pbuf_copy+0xb2>
 8011848:	4b38      	ldr	r3, [pc, #224]	; (801192c <pbuf_copy+0x188>)
 801184a:	f240 32d9 	movw	r2, #985	; 0x3d9
 801184e:	493a      	ldr	r1, [pc, #232]	; (8011938 <pbuf_copy+0x194>)
 8011850:	4838      	ldr	r0, [pc, #224]	; (8011934 <pbuf_copy+0x190>)
 8011852:	f009 fd31 	bl	801b2b8 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 8011856:	683b      	ldr	r3, [r7, #0]
 8011858:	895b      	ldrh	r3, [r3, #10]
 801185a:	461a      	mov	r2, r3
 801185c:	693b      	ldr	r3, [r7, #16]
 801185e:	4293      	cmp	r3, r2
 8011860:	d906      	bls.n	8011870 <pbuf_copy+0xcc>
 8011862:	4b32      	ldr	r3, [pc, #200]	; (801192c <pbuf_copy+0x188>)
 8011864:	f240 32da 	movw	r2, #986	; 0x3da
 8011868:	4934      	ldr	r1, [pc, #208]	; (801193c <pbuf_copy+0x198>)
 801186a:	4832      	ldr	r0, [pc, #200]	; (8011934 <pbuf_copy+0x190>)
 801186c:	f009 fd24 	bl	801b2b8 <iprintf>
    if (offset_from >= p_from->len) {
 8011870:	683b      	ldr	r3, [r7, #0]
 8011872:	895b      	ldrh	r3, [r3, #10]
 8011874:	461a      	mov	r2, r3
 8011876:	693b      	ldr	r3, [r7, #16]
 8011878:	4293      	cmp	r3, r2
 801187a:	d304      	bcc.n	8011886 <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 801187c:	2300      	movs	r3, #0
 801187e:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 8011880:	683b      	ldr	r3, [r7, #0]
 8011882:	681b      	ldr	r3, [r3, #0]
 8011884:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 8011886:	687b      	ldr	r3, [r7, #4]
 8011888:	895b      	ldrh	r3, [r3, #10]
 801188a:	461a      	mov	r2, r3
 801188c:	697b      	ldr	r3, [r7, #20]
 801188e:	4293      	cmp	r3, r2
 8011890:	d114      	bne.n	80118bc <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 8011892:	2300      	movs	r3, #0
 8011894:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 8011896:	687b      	ldr	r3, [r7, #4]
 8011898:	681b      	ldr	r3, [r3, #0]
 801189a:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 801189c:	687b      	ldr	r3, [r7, #4]
 801189e:	2b00      	cmp	r3, #0
 80118a0:	d10c      	bne.n	80118bc <pbuf_copy+0x118>
 80118a2:	683b      	ldr	r3, [r7, #0]
 80118a4:	2b00      	cmp	r3, #0
 80118a6:	d009      	beq.n	80118bc <pbuf_copy+0x118>
 80118a8:	4b20      	ldr	r3, [pc, #128]	; (801192c <pbuf_copy+0x188>)
 80118aa:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 80118ae:	4924      	ldr	r1, [pc, #144]	; (8011940 <pbuf_copy+0x19c>)
 80118b0:	4820      	ldr	r0, [pc, #128]	; (8011934 <pbuf_copy+0x190>)
 80118b2:	f009 fd01 	bl	801b2b8 <iprintf>
 80118b6:	f06f 030f 	mvn.w	r3, #15
 80118ba:	e032      	b.n	8011922 <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 80118bc:	683b      	ldr	r3, [r7, #0]
 80118be:	2b00      	cmp	r3, #0
 80118c0:	d013      	beq.n	80118ea <pbuf_copy+0x146>
 80118c2:	683b      	ldr	r3, [r7, #0]
 80118c4:	895a      	ldrh	r2, [r3, #10]
 80118c6:	683b      	ldr	r3, [r7, #0]
 80118c8:	891b      	ldrh	r3, [r3, #8]
 80118ca:	429a      	cmp	r2, r3
 80118cc:	d10d      	bne.n	80118ea <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 80118ce:	683b      	ldr	r3, [r7, #0]
 80118d0:	681b      	ldr	r3, [r3, #0]
 80118d2:	2b00      	cmp	r3, #0
 80118d4:	d009      	beq.n	80118ea <pbuf_copy+0x146>
 80118d6:	4b15      	ldr	r3, [pc, #84]	; (801192c <pbuf_copy+0x188>)
 80118d8:	f240 32e9 	movw	r2, #1001	; 0x3e9
 80118dc:	4919      	ldr	r1, [pc, #100]	; (8011944 <pbuf_copy+0x1a0>)
 80118de:	4815      	ldr	r0, [pc, #84]	; (8011934 <pbuf_copy+0x190>)
 80118e0:	f009 fcea 	bl	801b2b8 <iprintf>
 80118e4:	f06f 0305 	mvn.w	r3, #5
 80118e8:	e01b      	b.n	8011922 <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 80118ea:	687b      	ldr	r3, [r7, #4]
 80118ec:	2b00      	cmp	r3, #0
 80118ee:	d013      	beq.n	8011918 <pbuf_copy+0x174>
 80118f0:	687b      	ldr	r3, [r7, #4]
 80118f2:	895a      	ldrh	r2, [r3, #10]
 80118f4:	687b      	ldr	r3, [r7, #4]
 80118f6:	891b      	ldrh	r3, [r3, #8]
 80118f8:	429a      	cmp	r2, r3
 80118fa:	d10d      	bne.n	8011918 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 80118fc:	687b      	ldr	r3, [r7, #4]
 80118fe:	681b      	ldr	r3, [r3, #0]
 8011900:	2b00      	cmp	r3, #0
 8011902:	d009      	beq.n	8011918 <pbuf_copy+0x174>
 8011904:	4b09      	ldr	r3, [pc, #36]	; (801192c <pbuf_copy+0x188>)
 8011906:	f240 32ee 	movw	r2, #1006	; 0x3ee
 801190a:	490e      	ldr	r1, [pc, #56]	; (8011944 <pbuf_copy+0x1a0>)
 801190c:	4809      	ldr	r0, [pc, #36]	; (8011934 <pbuf_copy+0x190>)
 801190e:	f009 fcd3 	bl	801b2b8 <iprintf>
 8011912:	f06f 0305 	mvn.w	r3, #5
 8011916:	e004      	b.n	8011922 <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 8011918:	683b      	ldr	r3, [r7, #0]
 801191a:	2b00      	cmp	r3, #0
 801191c:	f47f af61 	bne.w	80117e2 <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 8011920:	2300      	movs	r3, #0
}
 8011922:	4618      	mov	r0, r3
 8011924:	3718      	adds	r7, #24
 8011926:	46bd      	mov	sp, r7
 8011928:	bd80      	pop	{r7, pc}
 801192a:	bf00      	nop
 801192c:	0801e8d0 	.word	0x0801e8d0
 8011930:	0801eb78 	.word	0x0801eb78
 8011934:	0801e930 	.word	0x0801e930
 8011938:	0801eba8 	.word	0x0801eba8
 801193c:	0801ebc0 	.word	0x0801ebc0
 8011940:	0801ebdc 	.word	0x0801ebdc
 8011944:	0801ebec 	.word	0x0801ebec

08011948 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 8011948:	b580      	push	{r7, lr}
 801194a:	b088      	sub	sp, #32
 801194c:	af00      	add	r7, sp, #0
 801194e:	60f8      	str	r0, [r7, #12]
 8011950:	60b9      	str	r1, [r7, #8]
 8011952:	4611      	mov	r1, r2
 8011954:	461a      	mov	r2, r3
 8011956:	460b      	mov	r3, r1
 8011958:	80fb      	strh	r3, [r7, #6]
 801195a:	4613      	mov	r3, r2
 801195c:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 801195e:	2300      	movs	r3, #0
 8011960:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 8011962:	2300      	movs	r3, #0
 8011964:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 8011966:	68fb      	ldr	r3, [r7, #12]
 8011968:	2b00      	cmp	r3, #0
 801196a:	d108      	bne.n	801197e <pbuf_copy_partial+0x36>
 801196c:	4b2b      	ldr	r3, [pc, #172]	; (8011a1c <pbuf_copy_partial+0xd4>)
 801196e:	f240 420a 	movw	r2, #1034	; 0x40a
 8011972:	492b      	ldr	r1, [pc, #172]	; (8011a20 <pbuf_copy_partial+0xd8>)
 8011974:	482b      	ldr	r0, [pc, #172]	; (8011a24 <pbuf_copy_partial+0xdc>)
 8011976:	f009 fc9f 	bl	801b2b8 <iprintf>
 801197a:	2300      	movs	r3, #0
 801197c:	e04a      	b.n	8011a14 <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 801197e:	68bb      	ldr	r3, [r7, #8]
 8011980:	2b00      	cmp	r3, #0
 8011982:	d108      	bne.n	8011996 <pbuf_copy_partial+0x4e>
 8011984:	4b25      	ldr	r3, [pc, #148]	; (8011a1c <pbuf_copy_partial+0xd4>)
 8011986:	f240 420b 	movw	r2, #1035	; 0x40b
 801198a:	4927      	ldr	r1, [pc, #156]	; (8011a28 <pbuf_copy_partial+0xe0>)
 801198c:	4825      	ldr	r0, [pc, #148]	; (8011a24 <pbuf_copy_partial+0xdc>)
 801198e:	f009 fc93 	bl	801b2b8 <iprintf>
 8011992:	2300      	movs	r3, #0
 8011994:	e03e      	b.n	8011a14 <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8011996:	68fb      	ldr	r3, [r7, #12]
 8011998:	61fb      	str	r3, [r7, #28]
 801199a:	e034      	b.n	8011a06 <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 801199c:	88bb      	ldrh	r3, [r7, #4]
 801199e:	2b00      	cmp	r3, #0
 80119a0:	d00a      	beq.n	80119b8 <pbuf_copy_partial+0x70>
 80119a2:	69fb      	ldr	r3, [r7, #28]
 80119a4:	895b      	ldrh	r3, [r3, #10]
 80119a6:	88ba      	ldrh	r2, [r7, #4]
 80119a8:	429a      	cmp	r2, r3
 80119aa:	d305      	bcc.n	80119b8 <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 80119ac:	69fb      	ldr	r3, [r7, #28]
 80119ae:	895b      	ldrh	r3, [r3, #10]
 80119b0:	88ba      	ldrh	r2, [r7, #4]
 80119b2:	1ad3      	subs	r3, r2, r3
 80119b4:	80bb      	strh	r3, [r7, #4]
 80119b6:	e023      	b.n	8011a00 <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 80119b8:	69fb      	ldr	r3, [r7, #28]
 80119ba:	895a      	ldrh	r2, [r3, #10]
 80119bc:	88bb      	ldrh	r3, [r7, #4]
 80119be:	1ad3      	subs	r3, r2, r3
 80119c0:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 80119c2:	8b3a      	ldrh	r2, [r7, #24]
 80119c4:	88fb      	ldrh	r3, [r7, #6]
 80119c6:	429a      	cmp	r2, r3
 80119c8:	d901      	bls.n	80119ce <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 80119ca:	88fb      	ldrh	r3, [r7, #6]
 80119cc:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 80119ce:	8b7b      	ldrh	r3, [r7, #26]
 80119d0:	68ba      	ldr	r2, [r7, #8]
 80119d2:	18d0      	adds	r0, r2, r3
 80119d4:	69fb      	ldr	r3, [r7, #28]
 80119d6:	685a      	ldr	r2, [r3, #4]
 80119d8:	88bb      	ldrh	r3, [r7, #4]
 80119da:	4413      	add	r3, r2
 80119dc:	8b3a      	ldrh	r2, [r7, #24]
 80119de:	4619      	mov	r1, r3
 80119e0:	f009 fe85 	bl	801b6ee <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 80119e4:	8afa      	ldrh	r2, [r7, #22]
 80119e6:	8b3b      	ldrh	r3, [r7, #24]
 80119e8:	4413      	add	r3, r2
 80119ea:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 80119ec:	8b7a      	ldrh	r2, [r7, #26]
 80119ee:	8b3b      	ldrh	r3, [r7, #24]
 80119f0:	4413      	add	r3, r2
 80119f2:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 80119f4:	88fa      	ldrh	r2, [r7, #6]
 80119f6:	8b3b      	ldrh	r3, [r7, #24]
 80119f8:	1ad3      	subs	r3, r2, r3
 80119fa:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 80119fc:	2300      	movs	r3, #0
 80119fe:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8011a00:	69fb      	ldr	r3, [r7, #28]
 8011a02:	681b      	ldr	r3, [r3, #0]
 8011a04:	61fb      	str	r3, [r7, #28]
 8011a06:	88fb      	ldrh	r3, [r7, #6]
 8011a08:	2b00      	cmp	r3, #0
 8011a0a:	d002      	beq.n	8011a12 <pbuf_copy_partial+0xca>
 8011a0c:	69fb      	ldr	r3, [r7, #28]
 8011a0e:	2b00      	cmp	r3, #0
 8011a10:	d1c4      	bne.n	801199c <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 8011a12:	8afb      	ldrh	r3, [r7, #22]
}
 8011a14:	4618      	mov	r0, r3
 8011a16:	3720      	adds	r7, #32
 8011a18:	46bd      	mov	sp, r7
 8011a1a:	bd80      	pop	{r7, pc}
 8011a1c:	0801e8d0 	.word	0x0801e8d0
 8011a20:	0801ec18 	.word	0x0801ec18
 8011a24:	0801e930 	.word	0x0801e930
 8011a28:	0801ec38 	.word	0x0801ec38

08011a2c <pbuf_take>:
 *
 * @return ERR_OK if successful, ERR_MEM if the pbuf is not big enough
 */
err_t
pbuf_take(struct pbuf *buf, const void *dataptr, u16_t len)
{
 8011a2c:	b580      	push	{r7, lr}
 8011a2e:	b088      	sub	sp, #32
 8011a30:	af00      	add	r7, sp, #0
 8011a32:	60f8      	str	r0, [r7, #12]
 8011a34:	60b9      	str	r1, [r7, #8]
 8011a36:	4613      	mov	r3, r2
 8011a38:	80fb      	strh	r3, [r7, #6]
  struct pbuf *p;
  size_t buf_copy_len;
  size_t total_copy_len = len;
 8011a3a:	88fb      	ldrh	r3, [r7, #6]
 8011a3c:	617b      	str	r3, [r7, #20]
  size_t copied_total = 0;
 8011a3e:	2300      	movs	r3, #0
 8011a40:	613b      	str	r3, [r7, #16]

  LWIP_ERROR("pbuf_take: invalid buf", (buf != NULL), return ERR_ARG;);
 8011a42:	68fb      	ldr	r3, [r7, #12]
 8011a44:	2b00      	cmp	r3, #0
 8011a46:	d109      	bne.n	8011a5c <pbuf_take+0x30>
 8011a48:	4b3a      	ldr	r3, [pc, #232]	; (8011b34 <pbuf_take+0x108>)
 8011a4a:	f240 42b3 	movw	r2, #1203	; 0x4b3
 8011a4e:	493a      	ldr	r1, [pc, #232]	; (8011b38 <pbuf_take+0x10c>)
 8011a50:	483a      	ldr	r0, [pc, #232]	; (8011b3c <pbuf_take+0x110>)
 8011a52:	f009 fc31 	bl	801b2b8 <iprintf>
 8011a56:	f06f 030f 	mvn.w	r3, #15
 8011a5a:	e067      	b.n	8011b2c <pbuf_take+0x100>
  LWIP_ERROR("pbuf_take: invalid dataptr", (dataptr != NULL), return ERR_ARG;);
 8011a5c:	68bb      	ldr	r3, [r7, #8]
 8011a5e:	2b00      	cmp	r3, #0
 8011a60:	d109      	bne.n	8011a76 <pbuf_take+0x4a>
 8011a62:	4b34      	ldr	r3, [pc, #208]	; (8011b34 <pbuf_take+0x108>)
 8011a64:	f240 42b4 	movw	r2, #1204	; 0x4b4
 8011a68:	4935      	ldr	r1, [pc, #212]	; (8011b40 <pbuf_take+0x114>)
 8011a6a:	4834      	ldr	r0, [pc, #208]	; (8011b3c <pbuf_take+0x110>)
 8011a6c:	f009 fc24 	bl	801b2b8 <iprintf>
 8011a70:	f06f 030f 	mvn.w	r3, #15
 8011a74:	e05a      	b.n	8011b2c <pbuf_take+0x100>
  LWIP_ERROR("pbuf_take: buf not large enough", (buf->tot_len >= len), return ERR_MEM;);
 8011a76:	68fb      	ldr	r3, [r7, #12]
 8011a78:	891b      	ldrh	r3, [r3, #8]
 8011a7a:	88fa      	ldrh	r2, [r7, #6]
 8011a7c:	429a      	cmp	r2, r3
 8011a7e:	d909      	bls.n	8011a94 <pbuf_take+0x68>
 8011a80:	4b2c      	ldr	r3, [pc, #176]	; (8011b34 <pbuf_take+0x108>)
 8011a82:	f240 42b5 	movw	r2, #1205	; 0x4b5
 8011a86:	492f      	ldr	r1, [pc, #188]	; (8011b44 <pbuf_take+0x118>)
 8011a88:	482c      	ldr	r0, [pc, #176]	; (8011b3c <pbuf_take+0x110>)
 8011a8a:	f009 fc15 	bl	801b2b8 <iprintf>
 8011a8e:	f04f 33ff 	mov.w	r3, #4294967295
 8011a92:	e04b      	b.n	8011b2c <pbuf_take+0x100>

  if ((buf == NULL) || (dataptr == NULL) || (buf->tot_len < len)) {
 8011a94:	68fb      	ldr	r3, [r7, #12]
 8011a96:	2b00      	cmp	r3, #0
 8011a98:	d007      	beq.n	8011aaa <pbuf_take+0x7e>
 8011a9a:	68bb      	ldr	r3, [r7, #8]
 8011a9c:	2b00      	cmp	r3, #0
 8011a9e:	d004      	beq.n	8011aaa <pbuf_take+0x7e>
 8011aa0:	68fb      	ldr	r3, [r7, #12]
 8011aa2:	891b      	ldrh	r3, [r3, #8]
 8011aa4:	88fa      	ldrh	r2, [r7, #6]
 8011aa6:	429a      	cmp	r2, r3
 8011aa8:	d902      	bls.n	8011ab0 <pbuf_take+0x84>
    return ERR_ARG;
 8011aaa:	f06f 030f 	mvn.w	r3, #15
 8011aae:	e03d      	b.n	8011b2c <pbuf_take+0x100>
  }

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; total_copy_len != 0; p = p->next) {
 8011ab0:	68fb      	ldr	r3, [r7, #12]
 8011ab2:	61fb      	str	r3, [r7, #28]
 8011ab4:	e028      	b.n	8011b08 <pbuf_take+0xdc>
    LWIP_ASSERT("pbuf_take: invalid pbuf", p != NULL);
 8011ab6:	69fb      	ldr	r3, [r7, #28]
 8011ab8:	2b00      	cmp	r3, #0
 8011aba:	d106      	bne.n	8011aca <pbuf_take+0x9e>
 8011abc:	4b1d      	ldr	r3, [pc, #116]	; (8011b34 <pbuf_take+0x108>)
 8011abe:	f240 42bd 	movw	r2, #1213	; 0x4bd
 8011ac2:	4921      	ldr	r1, [pc, #132]	; (8011b48 <pbuf_take+0x11c>)
 8011ac4:	481d      	ldr	r0, [pc, #116]	; (8011b3c <pbuf_take+0x110>)
 8011ac6:	f009 fbf7 	bl	801b2b8 <iprintf>
    buf_copy_len = total_copy_len;
 8011aca:	697b      	ldr	r3, [r7, #20]
 8011acc:	61bb      	str	r3, [r7, #24]
    if (buf_copy_len > p->len) {
 8011ace:	69fb      	ldr	r3, [r7, #28]
 8011ad0:	895b      	ldrh	r3, [r3, #10]
 8011ad2:	461a      	mov	r2, r3
 8011ad4:	69bb      	ldr	r3, [r7, #24]
 8011ad6:	4293      	cmp	r3, r2
 8011ad8:	d902      	bls.n	8011ae0 <pbuf_take+0xb4>
      /* this pbuf cannot hold all remaining data */
      buf_copy_len = p->len;
 8011ada:	69fb      	ldr	r3, [r7, #28]
 8011adc:	895b      	ldrh	r3, [r3, #10]
 8011ade:	61bb      	str	r3, [r7, #24]
    }
    /* copy the necessary parts of the buffer */
    MEMCPY(p->payload, &((const char *)dataptr)[copied_total], buf_copy_len);
 8011ae0:	69fb      	ldr	r3, [r7, #28]
 8011ae2:	6858      	ldr	r0, [r3, #4]
 8011ae4:	68ba      	ldr	r2, [r7, #8]
 8011ae6:	693b      	ldr	r3, [r7, #16]
 8011ae8:	4413      	add	r3, r2
 8011aea:	69ba      	ldr	r2, [r7, #24]
 8011aec:	4619      	mov	r1, r3
 8011aee:	f009 fdfe 	bl	801b6ee <memcpy>
    total_copy_len -= buf_copy_len;
 8011af2:	697a      	ldr	r2, [r7, #20]
 8011af4:	69bb      	ldr	r3, [r7, #24]
 8011af6:	1ad3      	subs	r3, r2, r3
 8011af8:	617b      	str	r3, [r7, #20]
    copied_total += buf_copy_len;
 8011afa:	693a      	ldr	r2, [r7, #16]
 8011afc:	69bb      	ldr	r3, [r7, #24]
 8011afe:	4413      	add	r3, r2
 8011b00:	613b      	str	r3, [r7, #16]
  for (p = buf; total_copy_len != 0; p = p->next) {
 8011b02:	69fb      	ldr	r3, [r7, #28]
 8011b04:	681b      	ldr	r3, [r3, #0]
 8011b06:	61fb      	str	r3, [r7, #28]
 8011b08:	697b      	ldr	r3, [r7, #20]
 8011b0a:	2b00      	cmp	r3, #0
 8011b0c:	d1d3      	bne.n	8011ab6 <pbuf_take+0x8a>
  }
  LWIP_ASSERT("did not copy all data", total_copy_len == 0 && copied_total == len);
 8011b0e:	697b      	ldr	r3, [r7, #20]
 8011b10:	2b00      	cmp	r3, #0
 8011b12:	d103      	bne.n	8011b1c <pbuf_take+0xf0>
 8011b14:	88fb      	ldrh	r3, [r7, #6]
 8011b16:	693a      	ldr	r2, [r7, #16]
 8011b18:	429a      	cmp	r2, r3
 8011b1a:	d006      	beq.n	8011b2a <pbuf_take+0xfe>
 8011b1c:	4b05      	ldr	r3, [pc, #20]	; (8011b34 <pbuf_take+0x108>)
 8011b1e:	f44f 6299 	mov.w	r2, #1224	; 0x4c8
 8011b22:	490a      	ldr	r1, [pc, #40]	; (8011b4c <pbuf_take+0x120>)
 8011b24:	4805      	ldr	r0, [pc, #20]	; (8011b3c <pbuf_take+0x110>)
 8011b26:	f009 fbc7 	bl	801b2b8 <iprintf>
  return ERR_OK;
 8011b2a:	2300      	movs	r3, #0
}
 8011b2c:	4618      	mov	r0, r3
 8011b2e:	3720      	adds	r7, #32
 8011b30:	46bd      	mov	sp, r7
 8011b32:	bd80      	pop	{r7, pc}
 8011b34:	0801e8d0 	.word	0x0801e8d0
 8011b38:	0801eca8 	.word	0x0801eca8
 8011b3c:	0801e930 	.word	0x0801e930
 8011b40:	0801ecc0 	.word	0x0801ecc0
 8011b44:	0801ecdc 	.word	0x0801ecdc
 8011b48:	0801ecfc 	.word	0x0801ecfc
 8011b4c:	0801ed14 	.word	0x0801ed14

08011b50 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 8011b50:	b580      	push	{r7, lr}
 8011b52:	b084      	sub	sp, #16
 8011b54:	af00      	add	r7, sp, #0
 8011b56:	4603      	mov	r3, r0
 8011b58:	603a      	str	r2, [r7, #0]
 8011b5a:	71fb      	strb	r3, [r7, #7]
 8011b5c:	460b      	mov	r3, r1
 8011b5e:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 8011b60:	683b      	ldr	r3, [r7, #0]
 8011b62:	8919      	ldrh	r1, [r3, #8]
 8011b64:	88ba      	ldrh	r2, [r7, #4]
 8011b66:	79fb      	ldrb	r3, [r7, #7]
 8011b68:	4618      	mov	r0, r3
 8011b6a:	f7ff fa1f 	bl	8010fac <pbuf_alloc>
 8011b6e:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 8011b70:	68fb      	ldr	r3, [r7, #12]
 8011b72:	2b00      	cmp	r3, #0
 8011b74:	d101      	bne.n	8011b7a <pbuf_clone+0x2a>
    return NULL;
 8011b76:	2300      	movs	r3, #0
 8011b78:	e011      	b.n	8011b9e <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 8011b7a:	6839      	ldr	r1, [r7, #0]
 8011b7c:	68f8      	ldr	r0, [r7, #12]
 8011b7e:	f7ff fe11 	bl	80117a4 <pbuf_copy>
 8011b82:	4603      	mov	r3, r0
 8011b84:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 8011b86:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8011b8a:	2b00      	cmp	r3, #0
 8011b8c:	d006      	beq.n	8011b9c <pbuf_clone+0x4c>
 8011b8e:	4b06      	ldr	r3, [pc, #24]	; (8011ba8 <pbuf_clone+0x58>)
 8011b90:	f240 5224 	movw	r2, #1316	; 0x524
 8011b94:	4905      	ldr	r1, [pc, #20]	; (8011bac <pbuf_clone+0x5c>)
 8011b96:	4806      	ldr	r0, [pc, #24]	; (8011bb0 <pbuf_clone+0x60>)
 8011b98:	f009 fb8e 	bl	801b2b8 <iprintf>
  return q;
 8011b9c:	68fb      	ldr	r3, [r7, #12]
}
 8011b9e:	4618      	mov	r0, r3
 8011ba0:	3710      	adds	r7, #16
 8011ba2:	46bd      	mov	sp, r7
 8011ba4:	bd80      	pop	{r7, pc}
 8011ba6:	bf00      	nop
 8011ba8:	0801e8d0 	.word	0x0801e8d0
 8011bac:	0801ed44 	.word	0x0801ed44
 8011bb0:	0801e930 	.word	0x0801e930

08011bb4 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 8011bb4:	b580      	push	{r7, lr}
 8011bb6:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8011bb8:	f008 fe42 	bl	801a840 <rand>
 8011bbc:	4603      	mov	r3, r0
 8011bbe:	b29b      	uxth	r3, r3
 8011bc0:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8011bc4:	b29b      	uxth	r3, r3
 8011bc6:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 8011bca:	b29a      	uxth	r2, r3
 8011bcc:	4b01      	ldr	r3, [pc, #4]	; (8011bd4 <tcp_init+0x20>)
 8011bce:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 8011bd0:	bf00      	nop
 8011bd2:	bd80      	pop	{r7, pc}
 8011bd4:	20000168 	.word	0x20000168

08011bd8 <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 8011bd8:	b580      	push	{r7, lr}
 8011bda:	b082      	sub	sp, #8
 8011bdc:	af00      	add	r7, sp, #0
 8011bde:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 8011be0:	687b      	ldr	r3, [r7, #4]
 8011be2:	7d1b      	ldrb	r3, [r3, #20]
 8011be4:	2b01      	cmp	r3, #1
 8011be6:	d105      	bne.n	8011bf4 <tcp_free+0x1c>
 8011be8:	4b06      	ldr	r3, [pc, #24]	; (8011c04 <tcp_free+0x2c>)
 8011bea:	22d4      	movs	r2, #212	; 0xd4
 8011bec:	4906      	ldr	r1, [pc, #24]	; (8011c08 <tcp_free+0x30>)
 8011bee:	4807      	ldr	r0, [pc, #28]	; (8011c0c <tcp_free+0x34>)
 8011bf0:	f009 fb62 	bl	801b2b8 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 8011bf4:	6879      	ldr	r1, [r7, #4]
 8011bf6:	2001      	movs	r0, #1
 8011bf8:	f7fe fe46 	bl	8010888 <memp_free>
}
 8011bfc:	bf00      	nop
 8011bfe:	3708      	adds	r7, #8
 8011c00:	46bd      	mov	sp, r7
 8011c02:	bd80      	pop	{r7, pc}
 8011c04:	0801edd0 	.word	0x0801edd0
 8011c08:	0801ee00 	.word	0x0801ee00
 8011c0c:	0801ee14 	.word	0x0801ee14

08011c10 <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 8011c10:	b580      	push	{r7, lr}
 8011c12:	b082      	sub	sp, #8
 8011c14:	af00      	add	r7, sp, #0
 8011c16:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 8011c18:	687b      	ldr	r3, [r7, #4]
 8011c1a:	7d1b      	ldrb	r3, [r3, #20]
 8011c1c:	2b01      	cmp	r3, #1
 8011c1e:	d105      	bne.n	8011c2c <tcp_free_listen+0x1c>
 8011c20:	4b06      	ldr	r3, [pc, #24]	; (8011c3c <tcp_free_listen+0x2c>)
 8011c22:	22df      	movs	r2, #223	; 0xdf
 8011c24:	4906      	ldr	r1, [pc, #24]	; (8011c40 <tcp_free_listen+0x30>)
 8011c26:	4807      	ldr	r0, [pc, #28]	; (8011c44 <tcp_free_listen+0x34>)
 8011c28:	f009 fb46 	bl	801b2b8 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 8011c2c:	6879      	ldr	r1, [r7, #4]
 8011c2e:	2002      	movs	r0, #2
 8011c30:	f7fe fe2a 	bl	8010888 <memp_free>
}
 8011c34:	bf00      	nop
 8011c36:	3708      	adds	r7, #8
 8011c38:	46bd      	mov	sp, r7
 8011c3a:	bd80      	pop	{r7, pc}
 8011c3c:	0801edd0 	.word	0x0801edd0
 8011c40:	0801ee3c 	.word	0x0801ee3c
 8011c44:	0801ee14 	.word	0x0801ee14

08011c48 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 8011c48:	b580      	push	{r7, lr}
 8011c4a:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 8011c4c:	f001 f802 	bl	8012c54 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 8011c50:	4b07      	ldr	r3, [pc, #28]	; (8011c70 <tcp_tmr+0x28>)
 8011c52:	781b      	ldrb	r3, [r3, #0]
 8011c54:	3301      	adds	r3, #1
 8011c56:	b2da      	uxtb	r2, r3
 8011c58:	4b05      	ldr	r3, [pc, #20]	; (8011c70 <tcp_tmr+0x28>)
 8011c5a:	701a      	strb	r2, [r3, #0]
 8011c5c:	4b04      	ldr	r3, [pc, #16]	; (8011c70 <tcp_tmr+0x28>)
 8011c5e:	781b      	ldrb	r3, [r3, #0]
 8011c60:	f003 0301 	and.w	r3, r3, #1
 8011c64:	2b00      	cmp	r3, #0
 8011c66:	d001      	beq.n	8011c6c <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 8011c68:	f000 fcb4 	bl	80125d4 <tcp_slowtmr>
  }
}
 8011c6c:	bf00      	nop
 8011c6e:	bd80      	pop	{r7, pc}
 8011c70:	200071c1 	.word	0x200071c1

08011c74 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 8011c74:	b580      	push	{r7, lr}
 8011c76:	b084      	sub	sp, #16
 8011c78:	af00      	add	r7, sp, #0
 8011c7a:	6078      	str	r0, [r7, #4]
 8011c7c:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 8011c7e:	683b      	ldr	r3, [r7, #0]
 8011c80:	2b00      	cmp	r3, #0
 8011c82:	d105      	bne.n	8011c90 <tcp_remove_listener+0x1c>
 8011c84:	4b0d      	ldr	r3, [pc, #52]	; (8011cbc <tcp_remove_listener+0x48>)
 8011c86:	22ff      	movs	r2, #255	; 0xff
 8011c88:	490d      	ldr	r1, [pc, #52]	; (8011cc0 <tcp_remove_listener+0x4c>)
 8011c8a:	480e      	ldr	r0, [pc, #56]	; (8011cc4 <tcp_remove_listener+0x50>)
 8011c8c:	f009 fb14 	bl	801b2b8 <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8011c90:	687b      	ldr	r3, [r7, #4]
 8011c92:	60fb      	str	r3, [r7, #12]
 8011c94:	e00a      	b.n	8011cac <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 8011c96:	68fb      	ldr	r3, [r7, #12]
 8011c98:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8011c9a:	683a      	ldr	r2, [r7, #0]
 8011c9c:	429a      	cmp	r2, r3
 8011c9e:	d102      	bne.n	8011ca6 <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 8011ca0:	68fb      	ldr	r3, [r7, #12]
 8011ca2:	2200      	movs	r2, #0
 8011ca4:	67da      	str	r2, [r3, #124]	; 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8011ca6:	68fb      	ldr	r3, [r7, #12]
 8011ca8:	68db      	ldr	r3, [r3, #12]
 8011caa:	60fb      	str	r3, [r7, #12]
 8011cac:	68fb      	ldr	r3, [r7, #12]
 8011cae:	2b00      	cmp	r3, #0
 8011cb0:	d1f1      	bne.n	8011c96 <tcp_remove_listener+0x22>
    }
  }
}
 8011cb2:	bf00      	nop
 8011cb4:	bf00      	nop
 8011cb6:	3710      	adds	r7, #16
 8011cb8:	46bd      	mov	sp, r7
 8011cba:	bd80      	pop	{r7, pc}
 8011cbc:	0801edd0 	.word	0x0801edd0
 8011cc0:	0801ee58 	.word	0x0801ee58
 8011cc4:	0801ee14 	.word	0x0801ee14

08011cc8 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 8011cc8:	b580      	push	{r7, lr}
 8011cca:	b084      	sub	sp, #16
 8011ccc:	af00      	add	r7, sp, #0
 8011cce:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8011cd0:	687b      	ldr	r3, [r7, #4]
 8011cd2:	2b00      	cmp	r3, #0
 8011cd4:	d106      	bne.n	8011ce4 <tcp_listen_closed+0x1c>
 8011cd6:	4b14      	ldr	r3, [pc, #80]	; (8011d28 <tcp_listen_closed+0x60>)
 8011cd8:	f240 1211 	movw	r2, #273	; 0x111
 8011cdc:	4913      	ldr	r1, [pc, #76]	; (8011d2c <tcp_listen_closed+0x64>)
 8011cde:	4814      	ldr	r0, [pc, #80]	; (8011d30 <tcp_listen_closed+0x68>)
 8011ce0:	f009 faea 	bl	801b2b8 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 8011ce4:	687b      	ldr	r3, [r7, #4]
 8011ce6:	7d1b      	ldrb	r3, [r3, #20]
 8011ce8:	2b01      	cmp	r3, #1
 8011cea:	d006      	beq.n	8011cfa <tcp_listen_closed+0x32>
 8011cec:	4b0e      	ldr	r3, [pc, #56]	; (8011d28 <tcp_listen_closed+0x60>)
 8011cee:	f44f 7289 	mov.w	r2, #274	; 0x112
 8011cf2:	4910      	ldr	r1, [pc, #64]	; (8011d34 <tcp_listen_closed+0x6c>)
 8011cf4:	480e      	ldr	r0, [pc, #56]	; (8011d30 <tcp_listen_closed+0x68>)
 8011cf6:	f009 fadf 	bl	801b2b8 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8011cfa:	2301      	movs	r3, #1
 8011cfc:	60fb      	str	r3, [r7, #12]
 8011cfe:	e00b      	b.n	8011d18 <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 8011d00:	4a0d      	ldr	r2, [pc, #52]	; (8011d38 <tcp_listen_closed+0x70>)
 8011d02:	68fb      	ldr	r3, [r7, #12]
 8011d04:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8011d08:	681b      	ldr	r3, [r3, #0]
 8011d0a:	6879      	ldr	r1, [r7, #4]
 8011d0c:	4618      	mov	r0, r3
 8011d0e:	f7ff ffb1 	bl	8011c74 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8011d12:	68fb      	ldr	r3, [r7, #12]
 8011d14:	3301      	adds	r3, #1
 8011d16:	60fb      	str	r3, [r7, #12]
 8011d18:	68fb      	ldr	r3, [r7, #12]
 8011d1a:	2b03      	cmp	r3, #3
 8011d1c:	d9f0      	bls.n	8011d00 <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 8011d1e:	bf00      	nop
 8011d20:	bf00      	nop
 8011d22:	3710      	adds	r7, #16
 8011d24:	46bd      	mov	sp, r7
 8011d26:	bd80      	pop	{r7, pc}
 8011d28:	0801edd0 	.word	0x0801edd0
 8011d2c:	0801ee80 	.word	0x0801ee80
 8011d30:	0801ee14 	.word	0x0801ee14
 8011d34:	0801ee8c 	.word	0x0801ee8c
 8011d38:	08020df4 	.word	0x08020df4

08011d3c <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 8011d3c:	b5b0      	push	{r4, r5, r7, lr}
 8011d3e:	b088      	sub	sp, #32
 8011d40:	af04      	add	r7, sp, #16
 8011d42:	6078      	str	r0, [r7, #4]
 8011d44:	460b      	mov	r3, r1
 8011d46:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 8011d48:	687b      	ldr	r3, [r7, #4]
 8011d4a:	2b00      	cmp	r3, #0
 8011d4c:	d106      	bne.n	8011d5c <tcp_close_shutdown+0x20>
 8011d4e:	4b63      	ldr	r3, [pc, #396]	; (8011edc <tcp_close_shutdown+0x1a0>)
 8011d50:	f44f 72af 	mov.w	r2, #350	; 0x15e
 8011d54:	4962      	ldr	r1, [pc, #392]	; (8011ee0 <tcp_close_shutdown+0x1a4>)
 8011d56:	4863      	ldr	r0, [pc, #396]	; (8011ee4 <tcp_close_shutdown+0x1a8>)
 8011d58:	f009 faae 	bl	801b2b8 <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 8011d5c:	78fb      	ldrb	r3, [r7, #3]
 8011d5e:	2b00      	cmp	r3, #0
 8011d60:	d067      	beq.n	8011e32 <tcp_close_shutdown+0xf6>
 8011d62:	687b      	ldr	r3, [r7, #4]
 8011d64:	7d1b      	ldrb	r3, [r3, #20]
 8011d66:	2b04      	cmp	r3, #4
 8011d68:	d003      	beq.n	8011d72 <tcp_close_shutdown+0x36>
 8011d6a:	687b      	ldr	r3, [r7, #4]
 8011d6c:	7d1b      	ldrb	r3, [r3, #20]
 8011d6e:	2b07      	cmp	r3, #7
 8011d70:	d15f      	bne.n	8011e32 <tcp_close_shutdown+0xf6>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 8011d72:	687b      	ldr	r3, [r7, #4]
 8011d74:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8011d76:	2b00      	cmp	r3, #0
 8011d78:	d105      	bne.n	8011d86 <tcp_close_shutdown+0x4a>
 8011d7a:	687b      	ldr	r3, [r7, #4]
 8011d7c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8011d7e:	f241 62d0 	movw	r2, #5840	; 0x16d0
 8011d82:	4293      	cmp	r3, r2
 8011d84:	d055      	beq.n	8011e32 <tcp_close_shutdown+0xf6>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 8011d86:	687b      	ldr	r3, [r7, #4]
 8011d88:	8b5b      	ldrh	r3, [r3, #26]
 8011d8a:	f003 0310 	and.w	r3, r3, #16
 8011d8e:	2b00      	cmp	r3, #0
 8011d90:	d106      	bne.n	8011da0 <tcp_close_shutdown+0x64>
 8011d92:	4b52      	ldr	r3, [pc, #328]	; (8011edc <tcp_close_shutdown+0x1a0>)
 8011d94:	f44f 72b2 	mov.w	r2, #356	; 0x164
 8011d98:	4953      	ldr	r1, [pc, #332]	; (8011ee8 <tcp_close_shutdown+0x1ac>)
 8011d9a:	4852      	ldr	r0, [pc, #328]	; (8011ee4 <tcp_close_shutdown+0x1a8>)
 8011d9c:	f009 fa8c 	bl	801b2b8 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8011da0:	687b      	ldr	r3, [r7, #4]
 8011da2:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8011da4:	687b      	ldr	r3, [r7, #4]
 8011da6:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8011da8:	687d      	ldr	r5, [r7, #4]
 8011daa:	687b      	ldr	r3, [r7, #4]
 8011dac:	3304      	adds	r3, #4
 8011dae:	687a      	ldr	r2, [r7, #4]
 8011db0:	8ad2      	ldrh	r2, [r2, #22]
 8011db2:	6879      	ldr	r1, [r7, #4]
 8011db4:	8b09      	ldrh	r1, [r1, #24]
 8011db6:	9102      	str	r1, [sp, #8]
 8011db8:	9201      	str	r2, [sp, #4]
 8011dba:	9300      	str	r3, [sp, #0]
 8011dbc:	462b      	mov	r3, r5
 8011dbe:	4622      	mov	r2, r4
 8011dc0:	4601      	mov	r1, r0
 8011dc2:	6878      	ldr	r0, [r7, #4]
 8011dc4:	f005 fcfa 	bl	80177bc <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 8011dc8:	6878      	ldr	r0, [r7, #4]
 8011dca:	f001 fad7 	bl	801337c <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 8011dce:	4b47      	ldr	r3, [pc, #284]	; (8011eec <tcp_close_shutdown+0x1b0>)
 8011dd0:	681b      	ldr	r3, [r3, #0]
 8011dd2:	687a      	ldr	r2, [r7, #4]
 8011dd4:	429a      	cmp	r2, r3
 8011dd6:	d105      	bne.n	8011de4 <tcp_close_shutdown+0xa8>
 8011dd8:	4b44      	ldr	r3, [pc, #272]	; (8011eec <tcp_close_shutdown+0x1b0>)
 8011dda:	681b      	ldr	r3, [r3, #0]
 8011ddc:	68db      	ldr	r3, [r3, #12]
 8011dde:	4a43      	ldr	r2, [pc, #268]	; (8011eec <tcp_close_shutdown+0x1b0>)
 8011de0:	6013      	str	r3, [r2, #0]
 8011de2:	e013      	b.n	8011e0c <tcp_close_shutdown+0xd0>
 8011de4:	4b41      	ldr	r3, [pc, #260]	; (8011eec <tcp_close_shutdown+0x1b0>)
 8011de6:	681b      	ldr	r3, [r3, #0]
 8011de8:	60fb      	str	r3, [r7, #12]
 8011dea:	e00c      	b.n	8011e06 <tcp_close_shutdown+0xca>
 8011dec:	68fb      	ldr	r3, [r7, #12]
 8011dee:	68db      	ldr	r3, [r3, #12]
 8011df0:	687a      	ldr	r2, [r7, #4]
 8011df2:	429a      	cmp	r2, r3
 8011df4:	d104      	bne.n	8011e00 <tcp_close_shutdown+0xc4>
 8011df6:	687b      	ldr	r3, [r7, #4]
 8011df8:	68da      	ldr	r2, [r3, #12]
 8011dfa:	68fb      	ldr	r3, [r7, #12]
 8011dfc:	60da      	str	r2, [r3, #12]
 8011dfe:	e005      	b.n	8011e0c <tcp_close_shutdown+0xd0>
 8011e00:	68fb      	ldr	r3, [r7, #12]
 8011e02:	68db      	ldr	r3, [r3, #12]
 8011e04:	60fb      	str	r3, [r7, #12]
 8011e06:	68fb      	ldr	r3, [r7, #12]
 8011e08:	2b00      	cmp	r3, #0
 8011e0a:	d1ef      	bne.n	8011dec <tcp_close_shutdown+0xb0>
 8011e0c:	687b      	ldr	r3, [r7, #4]
 8011e0e:	2200      	movs	r2, #0
 8011e10:	60da      	str	r2, [r3, #12]
 8011e12:	4b37      	ldr	r3, [pc, #220]	; (8011ef0 <tcp_close_shutdown+0x1b4>)
 8011e14:	2201      	movs	r2, #1
 8011e16:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 8011e18:	4b36      	ldr	r3, [pc, #216]	; (8011ef4 <tcp_close_shutdown+0x1b8>)
 8011e1a:	681b      	ldr	r3, [r3, #0]
 8011e1c:	687a      	ldr	r2, [r7, #4]
 8011e1e:	429a      	cmp	r2, r3
 8011e20:	d102      	bne.n	8011e28 <tcp_close_shutdown+0xec>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 8011e22:	f003 ff6f 	bl	8015d04 <tcp_trigger_input_pcb_close>
 8011e26:	e002      	b.n	8011e2e <tcp_close_shutdown+0xf2>
      } else {
        tcp_free(pcb);
 8011e28:	6878      	ldr	r0, [r7, #4]
 8011e2a:	f7ff fed5 	bl	8011bd8 <tcp_free>
      }
      return ERR_OK;
 8011e2e:	2300      	movs	r3, #0
 8011e30:	e050      	b.n	8011ed4 <tcp_close_shutdown+0x198>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 8011e32:	687b      	ldr	r3, [r7, #4]
 8011e34:	7d1b      	ldrb	r3, [r3, #20]
 8011e36:	2b02      	cmp	r3, #2
 8011e38:	d03b      	beq.n	8011eb2 <tcp_close_shutdown+0x176>
 8011e3a:	2b02      	cmp	r3, #2
 8011e3c:	dc44      	bgt.n	8011ec8 <tcp_close_shutdown+0x18c>
 8011e3e:	2b00      	cmp	r3, #0
 8011e40:	d002      	beq.n	8011e48 <tcp_close_shutdown+0x10c>
 8011e42:	2b01      	cmp	r3, #1
 8011e44:	d02a      	beq.n	8011e9c <tcp_close_shutdown+0x160>
 8011e46:	e03f      	b.n	8011ec8 <tcp_close_shutdown+0x18c>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 8011e48:	687b      	ldr	r3, [r7, #4]
 8011e4a:	8adb      	ldrh	r3, [r3, #22]
 8011e4c:	2b00      	cmp	r3, #0
 8011e4e:	d021      	beq.n	8011e94 <tcp_close_shutdown+0x158>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8011e50:	4b29      	ldr	r3, [pc, #164]	; (8011ef8 <tcp_close_shutdown+0x1bc>)
 8011e52:	681b      	ldr	r3, [r3, #0]
 8011e54:	687a      	ldr	r2, [r7, #4]
 8011e56:	429a      	cmp	r2, r3
 8011e58:	d105      	bne.n	8011e66 <tcp_close_shutdown+0x12a>
 8011e5a:	4b27      	ldr	r3, [pc, #156]	; (8011ef8 <tcp_close_shutdown+0x1bc>)
 8011e5c:	681b      	ldr	r3, [r3, #0]
 8011e5e:	68db      	ldr	r3, [r3, #12]
 8011e60:	4a25      	ldr	r2, [pc, #148]	; (8011ef8 <tcp_close_shutdown+0x1bc>)
 8011e62:	6013      	str	r3, [r2, #0]
 8011e64:	e013      	b.n	8011e8e <tcp_close_shutdown+0x152>
 8011e66:	4b24      	ldr	r3, [pc, #144]	; (8011ef8 <tcp_close_shutdown+0x1bc>)
 8011e68:	681b      	ldr	r3, [r3, #0]
 8011e6a:	60bb      	str	r3, [r7, #8]
 8011e6c:	e00c      	b.n	8011e88 <tcp_close_shutdown+0x14c>
 8011e6e:	68bb      	ldr	r3, [r7, #8]
 8011e70:	68db      	ldr	r3, [r3, #12]
 8011e72:	687a      	ldr	r2, [r7, #4]
 8011e74:	429a      	cmp	r2, r3
 8011e76:	d104      	bne.n	8011e82 <tcp_close_shutdown+0x146>
 8011e78:	687b      	ldr	r3, [r7, #4]
 8011e7a:	68da      	ldr	r2, [r3, #12]
 8011e7c:	68bb      	ldr	r3, [r7, #8]
 8011e7e:	60da      	str	r2, [r3, #12]
 8011e80:	e005      	b.n	8011e8e <tcp_close_shutdown+0x152>
 8011e82:	68bb      	ldr	r3, [r7, #8]
 8011e84:	68db      	ldr	r3, [r3, #12]
 8011e86:	60bb      	str	r3, [r7, #8]
 8011e88:	68bb      	ldr	r3, [r7, #8]
 8011e8a:	2b00      	cmp	r3, #0
 8011e8c:	d1ef      	bne.n	8011e6e <tcp_close_shutdown+0x132>
 8011e8e:	687b      	ldr	r3, [r7, #4]
 8011e90:	2200      	movs	r2, #0
 8011e92:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 8011e94:	6878      	ldr	r0, [r7, #4]
 8011e96:	f7ff fe9f 	bl	8011bd8 <tcp_free>
      break;
 8011e9a:	e01a      	b.n	8011ed2 <tcp_close_shutdown+0x196>
    case LISTEN:
      tcp_listen_closed(pcb);
 8011e9c:	6878      	ldr	r0, [r7, #4]
 8011e9e:	f7ff ff13 	bl	8011cc8 <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 8011ea2:	6879      	ldr	r1, [r7, #4]
 8011ea4:	4815      	ldr	r0, [pc, #84]	; (8011efc <tcp_close_shutdown+0x1c0>)
 8011ea6:	f001 fab9 	bl	801341c <tcp_pcb_remove>
      tcp_free_listen(pcb);
 8011eaa:	6878      	ldr	r0, [r7, #4]
 8011eac:	f7ff feb0 	bl	8011c10 <tcp_free_listen>
      break;
 8011eb0:	e00f      	b.n	8011ed2 <tcp_close_shutdown+0x196>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8011eb2:	6879      	ldr	r1, [r7, #4]
 8011eb4:	480d      	ldr	r0, [pc, #52]	; (8011eec <tcp_close_shutdown+0x1b0>)
 8011eb6:	f001 fab1 	bl	801341c <tcp_pcb_remove>
 8011eba:	4b0d      	ldr	r3, [pc, #52]	; (8011ef0 <tcp_close_shutdown+0x1b4>)
 8011ebc:	2201      	movs	r2, #1
 8011ebe:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 8011ec0:	6878      	ldr	r0, [r7, #4]
 8011ec2:	f7ff fe89 	bl	8011bd8 <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 8011ec6:	e004      	b.n	8011ed2 <tcp_close_shutdown+0x196>
    default:
      return tcp_close_shutdown_fin(pcb);
 8011ec8:	6878      	ldr	r0, [r7, #4]
 8011eca:	f000 f819 	bl	8011f00 <tcp_close_shutdown_fin>
 8011ece:	4603      	mov	r3, r0
 8011ed0:	e000      	b.n	8011ed4 <tcp_close_shutdown+0x198>
  }
  return ERR_OK;
 8011ed2:	2300      	movs	r3, #0
}
 8011ed4:	4618      	mov	r0, r3
 8011ed6:	3710      	adds	r7, #16
 8011ed8:	46bd      	mov	sp, r7
 8011eda:	bdb0      	pop	{r4, r5, r7, pc}
 8011edc:	0801edd0 	.word	0x0801edd0
 8011ee0:	0801eea4 	.word	0x0801eea4
 8011ee4:	0801ee14 	.word	0x0801ee14
 8011ee8:	0801eec4 	.word	0x0801eec4
 8011eec:	200071b8 	.word	0x200071b8
 8011ef0:	200071c0 	.word	0x200071c0
 8011ef4:	200071f8 	.word	0x200071f8
 8011ef8:	200071b0 	.word	0x200071b0
 8011efc:	200071b4 	.word	0x200071b4

08011f00 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 8011f00:	b580      	push	{r7, lr}
 8011f02:	b084      	sub	sp, #16
 8011f04:	af00      	add	r7, sp, #0
 8011f06:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8011f08:	687b      	ldr	r3, [r7, #4]
 8011f0a:	2b00      	cmp	r3, #0
 8011f0c:	d106      	bne.n	8011f1c <tcp_close_shutdown_fin+0x1c>
 8011f0e:	4b2e      	ldr	r3, [pc, #184]	; (8011fc8 <tcp_close_shutdown_fin+0xc8>)
 8011f10:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 8011f14:	492d      	ldr	r1, [pc, #180]	; (8011fcc <tcp_close_shutdown_fin+0xcc>)
 8011f16:	482e      	ldr	r0, [pc, #184]	; (8011fd0 <tcp_close_shutdown_fin+0xd0>)
 8011f18:	f009 f9ce 	bl	801b2b8 <iprintf>

  switch (pcb->state) {
 8011f1c:	687b      	ldr	r3, [r7, #4]
 8011f1e:	7d1b      	ldrb	r3, [r3, #20]
 8011f20:	2b07      	cmp	r3, #7
 8011f22:	d020      	beq.n	8011f66 <tcp_close_shutdown_fin+0x66>
 8011f24:	2b07      	cmp	r3, #7
 8011f26:	dc2b      	bgt.n	8011f80 <tcp_close_shutdown_fin+0x80>
 8011f28:	2b03      	cmp	r3, #3
 8011f2a:	d002      	beq.n	8011f32 <tcp_close_shutdown_fin+0x32>
 8011f2c:	2b04      	cmp	r3, #4
 8011f2e:	d00d      	beq.n	8011f4c <tcp_close_shutdown_fin+0x4c>
 8011f30:	e026      	b.n	8011f80 <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 8011f32:	6878      	ldr	r0, [r7, #4]
 8011f34:	f004 fd50 	bl	80169d8 <tcp_send_fin>
 8011f38:	4603      	mov	r3, r0
 8011f3a:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8011f3c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011f40:	2b00      	cmp	r3, #0
 8011f42:	d11f      	bne.n	8011f84 <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 8011f44:	687b      	ldr	r3, [r7, #4]
 8011f46:	2205      	movs	r2, #5
 8011f48:	751a      	strb	r2, [r3, #20]
      }
      break;
 8011f4a:	e01b      	b.n	8011f84 <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 8011f4c:	6878      	ldr	r0, [r7, #4]
 8011f4e:	f004 fd43 	bl	80169d8 <tcp_send_fin>
 8011f52:	4603      	mov	r3, r0
 8011f54:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8011f56:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011f5a:	2b00      	cmp	r3, #0
 8011f5c:	d114      	bne.n	8011f88 <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 8011f5e:	687b      	ldr	r3, [r7, #4]
 8011f60:	2205      	movs	r2, #5
 8011f62:	751a      	strb	r2, [r3, #20]
      }
      break;
 8011f64:	e010      	b.n	8011f88 <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 8011f66:	6878      	ldr	r0, [r7, #4]
 8011f68:	f004 fd36 	bl	80169d8 <tcp_send_fin>
 8011f6c:	4603      	mov	r3, r0
 8011f6e:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8011f70:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011f74:	2b00      	cmp	r3, #0
 8011f76:	d109      	bne.n	8011f8c <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 8011f78:	687b      	ldr	r3, [r7, #4]
 8011f7a:	2209      	movs	r2, #9
 8011f7c:	751a      	strb	r2, [r3, #20]
      }
      break;
 8011f7e:	e005      	b.n	8011f8c <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 8011f80:	2300      	movs	r3, #0
 8011f82:	e01c      	b.n	8011fbe <tcp_close_shutdown_fin+0xbe>
      break;
 8011f84:	bf00      	nop
 8011f86:	e002      	b.n	8011f8e <tcp_close_shutdown_fin+0x8e>
      break;
 8011f88:	bf00      	nop
 8011f8a:	e000      	b.n	8011f8e <tcp_close_shutdown_fin+0x8e>
      break;
 8011f8c:	bf00      	nop
  }

  if (err == ERR_OK) {
 8011f8e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011f92:	2b00      	cmp	r3, #0
 8011f94:	d103      	bne.n	8011f9e <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 8011f96:	6878      	ldr	r0, [r7, #4]
 8011f98:	f004 fe5c 	bl	8016c54 <tcp_output>
 8011f9c:	e00d      	b.n	8011fba <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 8011f9e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011fa2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011fa6:	d108      	bne.n	8011fba <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 8011fa8:	687b      	ldr	r3, [r7, #4]
 8011faa:	8b5b      	ldrh	r3, [r3, #26]
 8011fac:	f043 0308 	orr.w	r3, r3, #8
 8011fb0:	b29a      	uxth	r2, r3
 8011fb2:	687b      	ldr	r3, [r7, #4]
 8011fb4:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 8011fb6:	2300      	movs	r3, #0
 8011fb8:	e001      	b.n	8011fbe <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 8011fba:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8011fbe:	4618      	mov	r0, r3
 8011fc0:	3710      	adds	r7, #16
 8011fc2:	46bd      	mov	sp, r7
 8011fc4:	bd80      	pop	{r7, pc}
 8011fc6:	bf00      	nop
 8011fc8:	0801edd0 	.word	0x0801edd0
 8011fcc:	0801ee80 	.word	0x0801ee80
 8011fd0:	0801ee14 	.word	0x0801ee14

08011fd4 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 8011fd4:	b580      	push	{r7, lr}
 8011fd6:	b082      	sub	sp, #8
 8011fd8:	af00      	add	r7, sp, #0
 8011fda:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 8011fdc:	687b      	ldr	r3, [r7, #4]
 8011fde:	2b00      	cmp	r3, #0
 8011fe0:	d109      	bne.n	8011ff6 <tcp_close+0x22>
 8011fe2:	4b0f      	ldr	r3, [pc, #60]	; (8012020 <tcp_close+0x4c>)
 8011fe4:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 8011fe8:	490e      	ldr	r1, [pc, #56]	; (8012024 <tcp_close+0x50>)
 8011fea:	480f      	ldr	r0, [pc, #60]	; (8012028 <tcp_close+0x54>)
 8011fec:	f009 f964 	bl	801b2b8 <iprintf>
 8011ff0:	f06f 030f 	mvn.w	r3, #15
 8011ff4:	e00f      	b.n	8012016 <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 8011ff6:	687b      	ldr	r3, [r7, #4]
 8011ff8:	7d1b      	ldrb	r3, [r3, #20]
 8011ffa:	2b01      	cmp	r3, #1
 8011ffc:	d006      	beq.n	801200c <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 8011ffe:	687b      	ldr	r3, [r7, #4]
 8012000:	8b5b      	ldrh	r3, [r3, #26]
 8012002:	f043 0310 	orr.w	r3, r3, #16
 8012006:	b29a      	uxth	r2, r3
 8012008:	687b      	ldr	r3, [r7, #4]
 801200a:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 801200c:	2101      	movs	r1, #1
 801200e:	6878      	ldr	r0, [r7, #4]
 8012010:	f7ff fe94 	bl	8011d3c <tcp_close_shutdown>
 8012014:	4603      	mov	r3, r0
}
 8012016:	4618      	mov	r0, r3
 8012018:	3708      	adds	r7, #8
 801201a:	46bd      	mov	sp, r7
 801201c:	bd80      	pop	{r7, pc}
 801201e:	bf00      	nop
 8012020:	0801edd0 	.word	0x0801edd0
 8012024:	0801eee0 	.word	0x0801eee0
 8012028:	0801ee14 	.word	0x0801ee14

0801202c <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 801202c:	b580      	push	{r7, lr}
 801202e:	b08e      	sub	sp, #56	; 0x38
 8012030:	af04      	add	r7, sp, #16
 8012032:	6078      	str	r0, [r7, #4]
 8012034:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 8012036:	687b      	ldr	r3, [r7, #4]
 8012038:	2b00      	cmp	r3, #0
 801203a:	d107      	bne.n	801204c <tcp_abandon+0x20>
 801203c:	4b52      	ldr	r3, [pc, #328]	; (8012188 <tcp_abandon+0x15c>)
 801203e:	f240 223d 	movw	r2, #573	; 0x23d
 8012042:	4952      	ldr	r1, [pc, #328]	; (801218c <tcp_abandon+0x160>)
 8012044:	4852      	ldr	r0, [pc, #328]	; (8012190 <tcp_abandon+0x164>)
 8012046:	f009 f937 	bl	801b2b8 <iprintf>
 801204a:	e099      	b.n	8012180 <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 801204c:	687b      	ldr	r3, [r7, #4]
 801204e:	7d1b      	ldrb	r3, [r3, #20]
 8012050:	2b01      	cmp	r3, #1
 8012052:	d106      	bne.n	8012062 <tcp_abandon+0x36>
 8012054:	4b4c      	ldr	r3, [pc, #304]	; (8012188 <tcp_abandon+0x15c>)
 8012056:	f44f 7210 	mov.w	r2, #576	; 0x240
 801205a:	494e      	ldr	r1, [pc, #312]	; (8012194 <tcp_abandon+0x168>)
 801205c:	484c      	ldr	r0, [pc, #304]	; (8012190 <tcp_abandon+0x164>)
 801205e:	f009 f92b 	bl	801b2b8 <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 8012062:	687b      	ldr	r3, [r7, #4]
 8012064:	7d1b      	ldrb	r3, [r3, #20]
 8012066:	2b0a      	cmp	r3, #10
 8012068:	d107      	bne.n	801207a <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 801206a:	6879      	ldr	r1, [r7, #4]
 801206c:	484a      	ldr	r0, [pc, #296]	; (8012198 <tcp_abandon+0x16c>)
 801206e:	f001 f9d5 	bl	801341c <tcp_pcb_remove>
    tcp_free(pcb);
 8012072:	6878      	ldr	r0, [r7, #4]
 8012074:	f7ff fdb0 	bl	8011bd8 <tcp_free>
 8012078:	e082      	b.n	8012180 <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 801207a:	2300      	movs	r3, #0
 801207c:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 801207e:	2300      	movs	r3, #0
 8012080:	847b      	strh	r3, [r7, #34]	; 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 8012082:	687b      	ldr	r3, [r7, #4]
 8012084:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8012086:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 8012088:	687b      	ldr	r3, [r7, #4]
 801208a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801208c:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 801208e:	687b      	ldr	r3, [r7, #4]
 8012090:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8012094:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 8012096:	687b      	ldr	r3, [r7, #4]
 8012098:	691b      	ldr	r3, [r3, #16]
 801209a:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 801209c:	687b      	ldr	r3, [r7, #4]
 801209e:	7d1b      	ldrb	r3, [r3, #20]
 80120a0:	2b00      	cmp	r3, #0
 80120a2:	d126      	bne.n	80120f2 <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 80120a4:	687b      	ldr	r3, [r7, #4]
 80120a6:	8adb      	ldrh	r3, [r3, #22]
 80120a8:	2b00      	cmp	r3, #0
 80120aa:	d02e      	beq.n	801210a <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 80120ac:	4b3b      	ldr	r3, [pc, #236]	; (801219c <tcp_abandon+0x170>)
 80120ae:	681b      	ldr	r3, [r3, #0]
 80120b0:	687a      	ldr	r2, [r7, #4]
 80120b2:	429a      	cmp	r2, r3
 80120b4:	d105      	bne.n	80120c2 <tcp_abandon+0x96>
 80120b6:	4b39      	ldr	r3, [pc, #228]	; (801219c <tcp_abandon+0x170>)
 80120b8:	681b      	ldr	r3, [r3, #0]
 80120ba:	68db      	ldr	r3, [r3, #12]
 80120bc:	4a37      	ldr	r2, [pc, #220]	; (801219c <tcp_abandon+0x170>)
 80120be:	6013      	str	r3, [r2, #0]
 80120c0:	e013      	b.n	80120ea <tcp_abandon+0xbe>
 80120c2:	4b36      	ldr	r3, [pc, #216]	; (801219c <tcp_abandon+0x170>)
 80120c4:	681b      	ldr	r3, [r3, #0]
 80120c6:	61fb      	str	r3, [r7, #28]
 80120c8:	e00c      	b.n	80120e4 <tcp_abandon+0xb8>
 80120ca:	69fb      	ldr	r3, [r7, #28]
 80120cc:	68db      	ldr	r3, [r3, #12]
 80120ce:	687a      	ldr	r2, [r7, #4]
 80120d0:	429a      	cmp	r2, r3
 80120d2:	d104      	bne.n	80120de <tcp_abandon+0xb2>
 80120d4:	687b      	ldr	r3, [r7, #4]
 80120d6:	68da      	ldr	r2, [r3, #12]
 80120d8:	69fb      	ldr	r3, [r7, #28]
 80120da:	60da      	str	r2, [r3, #12]
 80120dc:	e005      	b.n	80120ea <tcp_abandon+0xbe>
 80120de:	69fb      	ldr	r3, [r7, #28]
 80120e0:	68db      	ldr	r3, [r3, #12]
 80120e2:	61fb      	str	r3, [r7, #28]
 80120e4:	69fb      	ldr	r3, [r7, #28]
 80120e6:	2b00      	cmp	r3, #0
 80120e8:	d1ef      	bne.n	80120ca <tcp_abandon+0x9e>
 80120ea:	687b      	ldr	r3, [r7, #4]
 80120ec:	2200      	movs	r2, #0
 80120ee:	60da      	str	r2, [r3, #12]
 80120f0:	e00b      	b.n	801210a <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 80120f2:	683b      	ldr	r3, [r7, #0]
 80120f4:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 80120f6:	687b      	ldr	r3, [r7, #4]
 80120f8:	8adb      	ldrh	r3, [r3, #22]
 80120fa:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 80120fc:	6879      	ldr	r1, [r7, #4]
 80120fe:	4828      	ldr	r0, [pc, #160]	; (80121a0 <tcp_abandon+0x174>)
 8012100:	f001 f98c 	bl	801341c <tcp_pcb_remove>
 8012104:	4b27      	ldr	r3, [pc, #156]	; (80121a4 <tcp_abandon+0x178>)
 8012106:	2201      	movs	r2, #1
 8012108:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 801210a:	687b      	ldr	r3, [r7, #4]
 801210c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801210e:	2b00      	cmp	r3, #0
 8012110:	d004      	beq.n	801211c <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 8012112:	687b      	ldr	r3, [r7, #4]
 8012114:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012116:	4618      	mov	r0, r3
 8012118:	f000 fe7e 	bl	8012e18 <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 801211c:	687b      	ldr	r3, [r7, #4]
 801211e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012120:	2b00      	cmp	r3, #0
 8012122:	d004      	beq.n	801212e <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 8012124:	687b      	ldr	r3, [r7, #4]
 8012126:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012128:	4618      	mov	r0, r3
 801212a:	f000 fe75 	bl	8012e18 <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 801212e:	687b      	ldr	r3, [r7, #4]
 8012130:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8012132:	2b00      	cmp	r3, #0
 8012134:	d004      	beq.n	8012140 <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 8012136:	687b      	ldr	r3, [r7, #4]
 8012138:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801213a:	4618      	mov	r0, r3
 801213c:	f000 fe6c 	bl	8012e18 <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 8012140:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012142:	2b00      	cmp	r3, #0
 8012144:	d00e      	beq.n	8012164 <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 8012146:	6879      	ldr	r1, [r7, #4]
 8012148:	687b      	ldr	r3, [r7, #4]
 801214a:	3304      	adds	r3, #4
 801214c:	687a      	ldr	r2, [r7, #4]
 801214e:	8b12      	ldrh	r2, [r2, #24]
 8012150:	9202      	str	r2, [sp, #8]
 8012152:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8012154:	9201      	str	r2, [sp, #4]
 8012156:	9300      	str	r3, [sp, #0]
 8012158:	460b      	mov	r3, r1
 801215a:	697a      	ldr	r2, [r7, #20]
 801215c:	69b9      	ldr	r1, [r7, #24]
 801215e:	6878      	ldr	r0, [r7, #4]
 8012160:	f005 fb2c 	bl	80177bc <tcp_rst>
    }
    last_state = pcb->state;
 8012164:	687b      	ldr	r3, [r7, #4]
 8012166:	7d1b      	ldrb	r3, [r3, #20]
 8012168:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 801216a:	6878      	ldr	r0, [r7, #4]
 801216c:	f7ff fd34 	bl	8011bd8 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 8012170:	693b      	ldr	r3, [r7, #16]
 8012172:	2b00      	cmp	r3, #0
 8012174:	d004      	beq.n	8012180 <tcp_abandon+0x154>
 8012176:	693b      	ldr	r3, [r7, #16]
 8012178:	f06f 010c 	mvn.w	r1, #12
 801217c:	68f8      	ldr	r0, [r7, #12]
 801217e:	4798      	blx	r3
  }
}
 8012180:	3728      	adds	r7, #40	; 0x28
 8012182:	46bd      	mov	sp, r7
 8012184:	bd80      	pop	{r7, pc}
 8012186:	bf00      	nop
 8012188:	0801edd0 	.word	0x0801edd0
 801218c:	0801ef14 	.word	0x0801ef14
 8012190:	0801ee14 	.word	0x0801ee14
 8012194:	0801ef30 	.word	0x0801ef30
 8012198:	200071bc 	.word	0x200071bc
 801219c:	200071b0 	.word	0x200071b0
 80121a0:	200071b8 	.word	0x200071b8
 80121a4:	200071c0 	.word	0x200071c0

080121a8 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 80121a8:	b580      	push	{r7, lr}
 80121aa:	b082      	sub	sp, #8
 80121ac:	af00      	add	r7, sp, #0
 80121ae:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 80121b0:	2101      	movs	r1, #1
 80121b2:	6878      	ldr	r0, [r7, #4]
 80121b4:	f7ff ff3a 	bl	801202c <tcp_abandon>
}
 80121b8:	bf00      	nop
 80121ba:	3708      	adds	r7, #8
 80121bc:	46bd      	mov	sp, r7
 80121be:	bd80      	pop	{r7, pc}

080121c0 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 80121c0:	b580      	push	{r7, lr}
 80121c2:	b084      	sub	sp, #16
 80121c4:	af00      	add	r7, sp, #0
 80121c6:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 80121c8:	687b      	ldr	r3, [r7, #4]
 80121ca:	2b00      	cmp	r3, #0
 80121cc:	d106      	bne.n	80121dc <tcp_update_rcv_ann_wnd+0x1c>
 80121ce:	4b25      	ldr	r3, [pc, #148]	; (8012264 <tcp_update_rcv_ann_wnd+0xa4>)
 80121d0:	f240 32a6 	movw	r2, #934	; 0x3a6
 80121d4:	4924      	ldr	r1, [pc, #144]	; (8012268 <tcp_update_rcv_ann_wnd+0xa8>)
 80121d6:	4825      	ldr	r0, [pc, #148]	; (801226c <tcp_update_rcv_ann_wnd+0xac>)
 80121d8:	f009 f86e 	bl	801b2b8 <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 80121dc:	687b      	ldr	r3, [r7, #4]
 80121de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80121e0:	687a      	ldr	r2, [r7, #4]
 80121e2:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 80121e4:	4413      	add	r3, r2
 80121e6:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 80121e8:	687b      	ldr	r3, [r7, #4]
 80121ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80121ec:	687a      	ldr	r2, [r7, #4]
 80121ee:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 80121f0:	f640 3168 	movw	r1, #2920	; 0xb68
 80121f4:	428a      	cmp	r2, r1
 80121f6:	bf28      	it	cs
 80121f8:	460a      	movcs	r2, r1
 80121fa:	b292      	uxth	r2, r2
 80121fc:	4413      	add	r3, r2
 80121fe:	68fa      	ldr	r2, [r7, #12]
 8012200:	1ad3      	subs	r3, r2, r3
 8012202:	2b00      	cmp	r3, #0
 8012204:	db08      	blt.n	8012218 <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 8012206:	687b      	ldr	r3, [r7, #4]
 8012208:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 801220a:	687b      	ldr	r3, [r7, #4]
 801220c:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 801220e:	687b      	ldr	r3, [r7, #4]
 8012210:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012212:	68fa      	ldr	r2, [r7, #12]
 8012214:	1ad3      	subs	r3, r2, r3
 8012216:	e020      	b.n	801225a <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 8012218:	687b      	ldr	r3, [r7, #4]
 801221a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801221c:	687b      	ldr	r3, [r7, #4]
 801221e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012220:	1ad3      	subs	r3, r2, r3
 8012222:	2b00      	cmp	r3, #0
 8012224:	dd03      	ble.n	801222e <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 8012226:	687b      	ldr	r3, [r7, #4]
 8012228:	2200      	movs	r2, #0
 801222a:	855a      	strh	r2, [r3, #42]	; 0x2a
 801222c:	e014      	b.n	8012258 <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 801222e:	687b      	ldr	r3, [r7, #4]
 8012230:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8012232:	687b      	ldr	r3, [r7, #4]
 8012234:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012236:	1ad3      	subs	r3, r2, r3
 8012238:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 801223a:	68bb      	ldr	r3, [r7, #8]
 801223c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8012240:	d306      	bcc.n	8012250 <tcp_update_rcv_ann_wnd+0x90>
 8012242:	4b08      	ldr	r3, [pc, #32]	; (8012264 <tcp_update_rcv_ann_wnd+0xa4>)
 8012244:	f240 32b6 	movw	r2, #950	; 0x3b6
 8012248:	4909      	ldr	r1, [pc, #36]	; (8012270 <tcp_update_rcv_ann_wnd+0xb0>)
 801224a:	4808      	ldr	r0, [pc, #32]	; (801226c <tcp_update_rcv_ann_wnd+0xac>)
 801224c:	f009 f834 	bl	801b2b8 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 8012250:	68bb      	ldr	r3, [r7, #8]
 8012252:	b29a      	uxth	r2, r3
 8012254:	687b      	ldr	r3, [r7, #4]
 8012256:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 8012258:	2300      	movs	r3, #0
  }
}
 801225a:	4618      	mov	r0, r3
 801225c:	3710      	adds	r7, #16
 801225e:	46bd      	mov	sp, r7
 8012260:	bd80      	pop	{r7, pc}
 8012262:	bf00      	nop
 8012264:	0801edd0 	.word	0x0801edd0
 8012268:	0801f02c 	.word	0x0801f02c
 801226c:	0801ee14 	.word	0x0801ee14
 8012270:	0801f050 	.word	0x0801f050

08012274 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 8012274:	b580      	push	{r7, lr}
 8012276:	b084      	sub	sp, #16
 8012278:	af00      	add	r7, sp, #0
 801227a:	6078      	str	r0, [r7, #4]
 801227c:	460b      	mov	r3, r1
 801227e:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 8012280:	687b      	ldr	r3, [r7, #4]
 8012282:	2b00      	cmp	r3, #0
 8012284:	d107      	bne.n	8012296 <tcp_recved+0x22>
 8012286:	4b20      	ldr	r3, [pc, #128]	; (8012308 <tcp_recved+0x94>)
 8012288:	f240 32cf 	movw	r2, #975	; 0x3cf
 801228c:	491f      	ldr	r1, [pc, #124]	; (801230c <tcp_recved+0x98>)
 801228e:	4820      	ldr	r0, [pc, #128]	; (8012310 <tcp_recved+0x9c>)
 8012290:	f009 f812 	bl	801b2b8 <iprintf>
 8012294:	e034      	b.n	8012300 <tcp_recved+0x8c>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 8012296:	687b      	ldr	r3, [r7, #4]
 8012298:	7d1b      	ldrb	r3, [r3, #20]
 801229a:	2b01      	cmp	r3, #1
 801229c:	d106      	bne.n	80122ac <tcp_recved+0x38>
 801229e:	4b1a      	ldr	r3, [pc, #104]	; (8012308 <tcp_recved+0x94>)
 80122a0:	f240 32d2 	movw	r2, #978	; 0x3d2
 80122a4:	491b      	ldr	r1, [pc, #108]	; (8012314 <tcp_recved+0xa0>)
 80122a6:	481a      	ldr	r0, [pc, #104]	; (8012310 <tcp_recved+0x9c>)
 80122a8:	f009 f806 	bl	801b2b8 <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 80122ac:	687b      	ldr	r3, [r7, #4]
 80122ae:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 80122b0:	887b      	ldrh	r3, [r7, #2]
 80122b2:	4413      	add	r3, r2
 80122b4:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 80122b6:	89fb      	ldrh	r3, [r7, #14]
 80122b8:	f241 62d0 	movw	r2, #5840	; 0x16d0
 80122bc:	4293      	cmp	r3, r2
 80122be:	d804      	bhi.n	80122ca <tcp_recved+0x56>
 80122c0:	687b      	ldr	r3, [r7, #4]
 80122c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80122c4:	89fa      	ldrh	r2, [r7, #14]
 80122c6:	429a      	cmp	r2, r3
 80122c8:	d204      	bcs.n	80122d4 <tcp_recved+0x60>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 80122ca:	687b      	ldr	r3, [r7, #4]
 80122cc:	f241 62d0 	movw	r2, #5840	; 0x16d0
 80122d0:	851a      	strh	r2, [r3, #40]	; 0x28
 80122d2:	e002      	b.n	80122da <tcp_recved+0x66>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 80122d4:	687b      	ldr	r3, [r7, #4]
 80122d6:	89fa      	ldrh	r2, [r7, #14]
 80122d8:	851a      	strh	r2, [r3, #40]	; 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 80122da:	6878      	ldr	r0, [r7, #4]
 80122dc:	f7ff ff70 	bl	80121c0 <tcp_update_rcv_ann_wnd>
 80122e0:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 80122e2:	68bb      	ldr	r3, [r7, #8]
 80122e4:	f240 52b3 	movw	r2, #1459	; 0x5b3
 80122e8:	4293      	cmp	r3, r2
 80122ea:	d909      	bls.n	8012300 <tcp_recved+0x8c>
    tcp_ack_now(pcb);
 80122ec:	687b      	ldr	r3, [r7, #4]
 80122ee:	8b5b      	ldrh	r3, [r3, #26]
 80122f0:	f043 0302 	orr.w	r3, r3, #2
 80122f4:	b29a      	uxth	r2, r3
 80122f6:	687b      	ldr	r3, [r7, #4]
 80122f8:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 80122fa:	6878      	ldr	r0, [r7, #4]
 80122fc:	f004 fcaa 	bl	8016c54 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 8012300:	3710      	adds	r7, #16
 8012302:	46bd      	mov	sp, r7
 8012304:	bd80      	pop	{r7, pc}
 8012306:	bf00      	nop
 8012308:	0801edd0 	.word	0x0801edd0
 801230c:	0801f06c 	.word	0x0801f06c
 8012310:	0801ee14 	.word	0x0801ee14
 8012314:	0801f084 	.word	0x0801f084

08012318 <tcp_new_port>:
 *
 * @return a new (free) local TCP port number
 */
static u16_t
tcp_new_port(void)
{
 8012318:	b480      	push	{r7}
 801231a:	b083      	sub	sp, #12
 801231c:	af00      	add	r7, sp, #0
  u8_t i;
  u16_t n = 0;
 801231e:	2300      	movs	r3, #0
 8012320:	80bb      	strh	r3, [r7, #4]
  struct tcp_pcb *pcb;

again:
  tcp_port++;
 8012322:	4b1e      	ldr	r3, [pc, #120]	; (801239c <tcp_new_port+0x84>)
 8012324:	881b      	ldrh	r3, [r3, #0]
 8012326:	3301      	adds	r3, #1
 8012328:	b29a      	uxth	r2, r3
 801232a:	4b1c      	ldr	r3, [pc, #112]	; (801239c <tcp_new_port+0x84>)
 801232c:	801a      	strh	r2, [r3, #0]
  if (tcp_port == TCP_LOCAL_PORT_RANGE_END) {
 801232e:	4b1b      	ldr	r3, [pc, #108]	; (801239c <tcp_new_port+0x84>)
 8012330:	881b      	ldrh	r3, [r3, #0]
 8012332:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8012336:	4293      	cmp	r3, r2
 8012338:	d103      	bne.n	8012342 <tcp_new_port+0x2a>
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 801233a:	4b18      	ldr	r3, [pc, #96]	; (801239c <tcp_new_port+0x84>)
 801233c:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 8012340:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 8012342:	2300      	movs	r3, #0
 8012344:	71fb      	strb	r3, [r7, #7]
 8012346:	e01e      	b.n	8012386 <tcp_new_port+0x6e>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 8012348:	79fb      	ldrb	r3, [r7, #7]
 801234a:	4a15      	ldr	r2, [pc, #84]	; (80123a0 <tcp_new_port+0x88>)
 801234c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8012350:	681b      	ldr	r3, [r3, #0]
 8012352:	603b      	str	r3, [r7, #0]
 8012354:	e011      	b.n	801237a <tcp_new_port+0x62>
      if (pcb->local_port == tcp_port) {
 8012356:	683b      	ldr	r3, [r7, #0]
 8012358:	8ada      	ldrh	r2, [r3, #22]
 801235a:	4b10      	ldr	r3, [pc, #64]	; (801239c <tcp_new_port+0x84>)
 801235c:	881b      	ldrh	r3, [r3, #0]
 801235e:	429a      	cmp	r2, r3
 8012360:	d108      	bne.n	8012374 <tcp_new_port+0x5c>
        n++;
 8012362:	88bb      	ldrh	r3, [r7, #4]
 8012364:	3301      	adds	r3, #1
 8012366:	80bb      	strh	r3, [r7, #4]
        if (n > (TCP_LOCAL_PORT_RANGE_END - TCP_LOCAL_PORT_RANGE_START)) {
 8012368:	88bb      	ldrh	r3, [r7, #4]
 801236a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 801236e:	d3d8      	bcc.n	8012322 <tcp_new_port+0xa>
          return 0;
 8012370:	2300      	movs	r3, #0
 8012372:	e00d      	b.n	8012390 <tcp_new_port+0x78>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 8012374:	683b      	ldr	r3, [r7, #0]
 8012376:	68db      	ldr	r3, [r3, #12]
 8012378:	603b      	str	r3, [r7, #0]
 801237a:	683b      	ldr	r3, [r7, #0]
 801237c:	2b00      	cmp	r3, #0
 801237e:	d1ea      	bne.n	8012356 <tcp_new_port+0x3e>
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 8012380:	79fb      	ldrb	r3, [r7, #7]
 8012382:	3301      	adds	r3, #1
 8012384:	71fb      	strb	r3, [r7, #7]
 8012386:	79fb      	ldrb	r3, [r7, #7]
 8012388:	2b03      	cmp	r3, #3
 801238a:	d9dd      	bls.n	8012348 <tcp_new_port+0x30>
        }
        goto again;
      }
    }
  }
  return tcp_port;
 801238c:	4b03      	ldr	r3, [pc, #12]	; (801239c <tcp_new_port+0x84>)
 801238e:	881b      	ldrh	r3, [r3, #0]
}
 8012390:	4618      	mov	r0, r3
 8012392:	370c      	adds	r7, #12
 8012394:	46bd      	mov	sp, r7
 8012396:	f85d 7b04 	ldr.w	r7, [sp], #4
 801239a:	4770      	bx	lr
 801239c:	20000168 	.word	0x20000168
 80123a0:	08020df4 	.word	0x08020df4

080123a4 <tcp_connect>:
 *         other err_t values if connect request couldn't be sent
 */
err_t
tcp_connect(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port,
            tcp_connected_fn connected)
{
 80123a4:	b580      	push	{r7, lr}
 80123a6:	b08a      	sub	sp, #40	; 0x28
 80123a8:	af00      	add	r7, sp, #0
 80123aa:	60f8      	str	r0, [r7, #12]
 80123ac:	60b9      	str	r1, [r7, #8]
 80123ae:	603b      	str	r3, [r7, #0]
 80123b0:	4613      	mov	r3, r2
 80123b2:	80fb      	strh	r3, [r7, #6]
  struct netif *netif = NULL;
 80123b4:	2300      	movs	r3, #0
 80123b6:	627b      	str	r3, [r7, #36]	; 0x24
  u32_t iss;
  u16_t old_local_port;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 80123b8:	68fb      	ldr	r3, [r7, #12]
 80123ba:	2b00      	cmp	r3, #0
 80123bc:	d109      	bne.n	80123d2 <tcp_connect+0x2e>
 80123be:	4b7d      	ldr	r3, [pc, #500]	; (80125b4 <tcp_connect+0x210>)
 80123c0:	f240 4235 	movw	r2, #1077	; 0x435
 80123c4:	497c      	ldr	r1, [pc, #496]	; (80125b8 <tcp_connect+0x214>)
 80123c6:	487d      	ldr	r0, [pc, #500]	; (80125bc <tcp_connect+0x218>)
 80123c8:	f008 ff76 	bl	801b2b8 <iprintf>
 80123cc:	f06f 030f 	mvn.w	r3, #15
 80123d0:	e0ec      	b.n	80125ac <tcp_connect+0x208>
  LWIP_ERROR("tcp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 80123d2:	68bb      	ldr	r3, [r7, #8]
 80123d4:	2b00      	cmp	r3, #0
 80123d6:	d109      	bne.n	80123ec <tcp_connect+0x48>
 80123d8:	4b76      	ldr	r3, [pc, #472]	; (80125b4 <tcp_connect+0x210>)
 80123da:	f240 4236 	movw	r2, #1078	; 0x436
 80123de:	4978      	ldr	r1, [pc, #480]	; (80125c0 <tcp_connect+0x21c>)
 80123e0:	4876      	ldr	r0, [pc, #472]	; (80125bc <tcp_connect+0x218>)
 80123e2:	f008 ff69 	bl	801b2b8 <iprintf>
 80123e6:	f06f 030f 	mvn.w	r3, #15
 80123ea:	e0df      	b.n	80125ac <tcp_connect+0x208>

  LWIP_ERROR("tcp_connect: can only connect from state CLOSED", pcb->state == CLOSED, return ERR_ISCONN);
 80123ec:	68fb      	ldr	r3, [r7, #12]
 80123ee:	7d1b      	ldrb	r3, [r3, #20]
 80123f0:	2b00      	cmp	r3, #0
 80123f2:	d009      	beq.n	8012408 <tcp_connect+0x64>
 80123f4:	4b6f      	ldr	r3, [pc, #444]	; (80125b4 <tcp_connect+0x210>)
 80123f6:	f44f 6287 	mov.w	r2, #1080	; 0x438
 80123fa:	4972      	ldr	r1, [pc, #456]	; (80125c4 <tcp_connect+0x220>)
 80123fc:	486f      	ldr	r0, [pc, #444]	; (80125bc <tcp_connect+0x218>)
 80123fe:	f008 ff5b 	bl	801b2b8 <iprintf>
 8012402:	f06f 0309 	mvn.w	r3, #9
 8012406:	e0d1      	b.n	80125ac <tcp_connect+0x208>

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_connect to port %"U16_F"\n", port));
  ip_addr_set(&pcb->remote_ip, ipaddr);
 8012408:	68bb      	ldr	r3, [r7, #8]
 801240a:	2b00      	cmp	r3, #0
 801240c:	d002      	beq.n	8012414 <tcp_connect+0x70>
 801240e:	68bb      	ldr	r3, [r7, #8]
 8012410:	681b      	ldr	r3, [r3, #0]
 8012412:	e000      	b.n	8012416 <tcp_connect+0x72>
 8012414:	2300      	movs	r3, #0
 8012416:	68fa      	ldr	r2, [r7, #12]
 8012418:	6053      	str	r3, [r2, #4]
  pcb->remote_port = port;
 801241a:	68fb      	ldr	r3, [r7, #12]
 801241c:	88fa      	ldrh	r2, [r7, #6]
 801241e:	831a      	strh	r2, [r3, #24]

  if (pcb->netif_idx != NETIF_NO_INDEX) {
 8012420:	68fb      	ldr	r3, [r7, #12]
 8012422:	7a1b      	ldrb	r3, [r3, #8]
 8012424:	2b00      	cmp	r3, #0
 8012426:	d006      	beq.n	8012436 <tcp_connect+0x92>
    netif = netif_get_by_index(pcb->netif_idx);
 8012428:	68fb      	ldr	r3, [r7, #12]
 801242a:	7a1b      	ldrb	r3, [r3, #8]
 801242c:	4618      	mov	r0, r3
 801242e:	f7fe fd41 	bl	8010eb4 <netif_get_by_index>
 8012432:	6278      	str	r0, [r7, #36]	; 0x24
 8012434:	e005      	b.n	8012442 <tcp_connect+0x9e>
  } else {
    /* check if we have a route to the remote host */
    netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 8012436:	68fb      	ldr	r3, [r7, #12]
 8012438:	3304      	adds	r3, #4
 801243a:	4618      	mov	r0, r3
 801243c:	f006 ff84 	bl	8019348 <ip4_route>
 8012440:	6278      	str	r0, [r7, #36]	; 0x24
  }
  if (netif == NULL) {
 8012442:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012444:	2b00      	cmp	r3, #0
 8012446:	d102      	bne.n	801244e <tcp_connect+0xaa>
    /* Don't even try to send a SYN packet if we have no route since that will fail. */
    return ERR_RTE;
 8012448:	f06f 0303 	mvn.w	r3, #3
 801244c:	e0ae      	b.n	80125ac <tcp_connect+0x208>
  }

  /* check if local IP has been assigned to pcb, if not, get one */
  if (ip_addr_isany(&pcb->local_ip)) {
 801244e:	68fb      	ldr	r3, [r7, #12]
 8012450:	2b00      	cmp	r3, #0
 8012452:	d003      	beq.n	801245c <tcp_connect+0xb8>
 8012454:	68fb      	ldr	r3, [r7, #12]
 8012456:	681b      	ldr	r3, [r3, #0]
 8012458:	2b00      	cmp	r3, #0
 801245a:	d111      	bne.n	8012480 <tcp_connect+0xdc>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, ipaddr);
 801245c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801245e:	2b00      	cmp	r3, #0
 8012460:	d002      	beq.n	8012468 <tcp_connect+0xc4>
 8012462:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012464:	3304      	adds	r3, #4
 8012466:	e000      	b.n	801246a <tcp_connect+0xc6>
 8012468:	2300      	movs	r3, #0
 801246a:	61fb      	str	r3, [r7, #28]
    if (local_ip == NULL) {
 801246c:	69fb      	ldr	r3, [r7, #28]
 801246e:	2b00      	cmp	r3, #0
 8012470:	d102      	bne.n	8012478 <tcp_connect+0xd4>
      return ERR_RTE;
 8012472:	f06f 0303 	mvn.w	r3, #3
 8012476:	e099      	b.n	80125ac <tcp_connect+0x208>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 8012478:	69fb      	ldr	r3, [r7, #28]
 801247a:	681a      	ldr	r2, [r3, #0]
 801247c:	68fb      	ldr	r3, [r7, #12]
 801247e:	601a      	str	r2, [r3, #0]
      ip6_addr_lacks_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNICAST)) {
    ip6_addr_assign_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNICAST, netif);
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  old_local_port = pcb->local_port;
 8012480:	68fb      	ldr	r3, [r7, #12]
 8012482:	8adb      	ldrh	r3, [r3, #22]
 8012484:	837b      	strh	r3, [r7, #26]
  if (pcb->local_port == 0) {
 8012486:	68fb      	ldr	r3, [r7, #12]
 8012488:	8adb      	ldrh	r3, [r3, #22]
 801248a:	2b00      	cmp	r3, #0
 801248c:	d10c      	bne.n	80124a8 <tcp_connect+0x104>
    pcb->local_port = tcp_new_port();
 801248e:	f7ff ff43 	bl	8012318 <tcp_new_port>
 8012492:	4603      	mov	r3, r0
 8012494:	461a      	mov	r2, r3
 8012496:	68fb      	ldr	r3, [r7, #12]
 8012498:	82da      	strh	r2, [r3, #22]
    if (pcb->local_port == 0) {
 801249a:	68fb      	ldr	r3, [r7, #12]
 801249c:	8adb      	ldrh	r3, [r3, #22]
 801249e:	2b00      	cmp	r3, #0
 80124a0:	d102      	bne.n	80124a8 <tcp_connect+0x104>
      return ERR_BUF;
 80124a2:	f06f 0301 	mvn.w	r3, #1
 80124a6:	e081      	b.n	80125ac <tcp_connect+0x208>
      }
    }
#endif /* SO_REUSE */
  }

  iss = tcp_next_iss(pcb);
 80124a8:	68f8      	ldr	r0, [r7, #12]
 80124aa:	f001 f84b 	bl	8013544 <tcp_next_iss>
 80124ae:	6178      	str	r0, [r7, #20]
  pcb->rcv_nxt = 0;
 80124b0:	68fb      	ldr	r3, [r7, #12]
 80124b2:	2200      	movs	r2, #0
 80124b4:	625a      	str	r2, [r3, #36]	; 0x24
  pcb->snd_nxt = iss;
 80124b6:	68fb      	ldr	r3, [r7, #12]
 80124b8:	697a      	ldr	r2, [r7, #20]
 80124ba:	651a      	str	r2, [r3, #80]	; 0x50
  pcb->lastack = iss - 1;
 80124bc:	697b      	ldr	r3, [r7, #20]
 80124be:	1e5a      	subs	r2, r3, #1
 80124c0:	68fb      	ldr	r3, [r7, #12]
 80124c2:	645a      	str	r2, [r3, #68]	; 0x44
  pcb->snd_wl2 = iss - 1;
 80124c4:	697b      	ldr	r3, [r7, #20]
 80124c6:	1e5a      	subs	r2, r3, #1
 80124c8:	68fb      	ldr	r3, [r7, #12]
 80124ca:	659a      	str	r2, [r3, #88]	; 0x58
  pcb->snd_lbb = iss - 1;
 80124cc:	697b      	ldr	r3, [r7, #20]
 80124ce:	1e5a      	subs	r2, r3, #1
 80124d0:	68fb      	ldr	r3, [r7, #12]
 80124d2:	65da      	str	r2, [r3, #92]	; 0x5c
  /* Start with a window that does not need scaling. When window scaling is
     enabled and used, the window is enlarged when both sides agree on scaling. */
  pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 80124d4:	68fb      	ldr	r3, [r7, #12]
 80124d6:	f241 62d0 	movw	r2, #5840	; 0x16d0
 80124da:	855a      	strh	r2, [r3, #42]	; 0x2a
 80124dc:	68fb      	ldr	r3, [r7, #12]
 80124de:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 80124e0:	68fb      	ldr	r3, [r7, #12]
 80124e2:	851a      	strh	r2, [r3, #40]	; 0x28
  pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 80124e4:	68fb      	ldr	r3, [r7, #12]
 80124e6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80124e8:	68fb      	ldr	r3, [r7, #12]
 80124ea:	62da      	str	r2, [r3, #44]	; 0x2c
  pcb->snd_wnd = TCP_WND;
 80124ec:	68fb      	ldr	r3, [r7, #12]
 80124ee:	f241 62d0 	movw	r2, #5840	; 0x16d0
 80124f2:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  /* As initial send MSS, we use TCP_MSS but limit it to 536.
     The send MSS is updated when an MSS option is received. */
  pcb->mss = INITIAL_MSS;
 80124f6:	68fb      	ldr	r3, [r7, #12]
 80124f8:	f44f 7206 	mov.w	r2, #536	; 0x218
 80124fc:	865a      	strh	r2, [r3, #50]	; 0x32
#if TCP_CALCULATE_EFF_SEND_MSS
  pcb->mss = tcp_eff_send_mss_netif(pcb->mss, netif, &pcb->remote_ip);
 80124fe:	68fb      	ldr	r3, [r7, #12]
 8012500:	8e58      	ldrh	r0, [r3, #50]	; 0x32
 8012502:	68fb      	ldr	r3, [r7, #12]
 8012504:	3304      	adds	r3, #4
 8012506:	461a      	mov	r2, r3
 8012508:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801250a:	f001 f841 	bl	8013590 <tcp_eff_send_mss_netif>
 801250e:	4603      	mov	r3, r0
 8012510:	461a      	mov	r2, r3
 8012512:	68fb      	ldr	r3, [r7, #12]
 8012514:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
  pcb->cwnd = 1;
 8012516:	68fb      	ldr	r3, [r7, #12]
 8012518:	2201      	movs	r2, #1
 801251a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
#if LWIP_CALLBACK_API
  pcb->connected = connected;
 801251e:	68fb      	ldr	r3, [r7, #12]
 8012520:	683a      	ldr	r2, [r7, #0]
 8012522:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(connected);
#endif /* LWIP_CALLBACK_API */

  /* Send a SYN together with the MSS option. */
  ret = tcp_enqueue_flags(pcb, TCP_SYN);
 8012526:	2102      	movs	r1, #2
 8012528:	68f8      	ldr	r0, [r7, #12]
 801252a:	f004 faa5 	bl	8016a78 <tcp_enqueue_flags>
 801252e:	4603      	mov	r3, r0
 8012530:	74fb      	strb	r3, [r7, #19]
  if (ret == ERR_OK) {
 8012532:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8012536:	2b00      	cmp	r3, #0
 8012538:	d136      	bne.n	80125a8 <tcp_connect+0x204>
    /* SYN segment was enqueued, changed the pcbs state now */
    pcb->state = SYN_SENT;
 801253a:	68fb      	ldr	r3, [r7, #12]
 801253c:	2202      	movs	r2, #2
 801253e:	751a      	strb	r2, [r3, #20]
    if (old_local_port != 0) {
 8012540:	8b7b      	ldrh	r3, [r7, #26]
 8012542:	2b00      	cmp	r3, #0
 8012544:	d021      	beq.n	801258a <tcp_connect+0x1e6>
      TCP_RMV(&tcp_bound_pcbs, pcb);
 8012546:	4b20      	ldr	r3, [pc, #128]	; (80125c8 <tcp_connect+0x224>)
 8012548:	681b      	ldr	r3, [r3, #0]
 801254a:	68fa      	ldr	r2, [r7, #12]
 801254c:	429a      	cmp	r2, r3
 801254e:	d105      	bne.n	801255c <tcp_connect+0x1b8>
 8012550:	4b1d      	ldr	r3, [pc, #116]	; (80125c8 <tcp_connect+0x224>)
 8012552:	681b      	ldr	r3, [r3, #0]
 8012554:	68db      	ldr	r3, [r3, #12]
 8012556:	4a1c      	ldr	r2, [pc, #112]	; (80125c8 <tcp_connect+0x224>)
 8012558:	6013      	str	r3, [r2, #0]
 801255a:	e013      	b.n	8012584 <tcp_connect+0x1e0>
 801255c:	4b1a      	ldr	r3, [pc, #104]	; (80125c8 <tcp_connect+0x224>)
 801255e:	681b      	ldr	r3, [r3, #0]
 8012560:	623b      	str	r3, [r7, #32]
 8012562:	e00c      	b.n	801257e <tcp_connect+0x1da>
 8012564:	6a3b      	ldr	r3, [r7, #32]
 8012566:	68db      	ldr	r3, [r3, #12]
 8012568:	68fa      	ldr	r2, [r7, #12]
 801256a:	429a      	cmp	r2, r3
 801256c:	d104      	bne.n	8012578 <tcp_connect+0x1d4>
 801256e:	68fb      	ldr	r3, [r7, #12]
 8012570:	68da      	ldr	r2, [r3, #12]
 8012572:	6a3b      	ldr	r3, [r7, #32]
 8012574:	60da      	str	r2, [r3, #12]
 8012576:	e005      	b.n	8012584 <tcp_connect+0x1e0>
 8012578:	6a3b      	ldr	r3, [r7, #32]
 801257a:	68db      	ldr	r3, [r3, #12]
 801257c:	623b      	str	r3, [r7, #32]
 801257e:	6a3b      	ldr	r3, [r7, #32]
 8012580:	2b00      	cmp	r3, #0
 8012582:	d1ef      	bne.n	8012564 <tcp_connect+0x1c0>
 8012584:	68fb      	ldr	r3, [r7, #12]
 8012586:	2200      	movs	r2, #0
 8012588:	60da      	str	r2, [r3, #12]
    }
    TCP_REG_ACTIVE(pcb);
 801258a:	4b10      	ldr	r3, [pc, #64]	; (80125cc <tcp_connect+0x228>)
 801258c:	681a      	ldr	r2, [r3, #0]
 801258e:	68fb      	ldr	r3, [r7, #12]
 8012590:	60da      	str	r2, [r3, #12]
 8012592:	4a0e      	ldr	r2, [pc, #56]	; (80125cc <tcp_connect+0x228>)
 8012594:	68fb      	ldr	r3, [r7, #12]
 8012596:	6013      	str	r3, [r2, #0]
 8012598:	f005 fad2 	bl	8017b40 <tcp_timer_needed>
 801259c:	4b0c      	ldr	r3, [pc, #48]	; (80125d0 <tcp_connect+0x22c>)
 801259e:	2201      	movs	r2, #1
 80125a0:	701a      	strb	r2, [r3, #0]
    MIB2_STATS_INC(mib2.tcpactiveopens);

    tcp_output(pcb);
 80125a2:	68f8      	ldr	r0, [r7, #12]
 80125a4:	f004 fb56 	bl	8016c54 <tcp_output>
  }
  return ret;
 80125a8:	f997 3013 	ldrsb.w	r3, [r7, #19]
}
 80125ac:	4618      	mov	r0, r3
 80125ae:	3728      	adds	r7, #40	; 0x28
 80125b0:	46bd      	mov	sp, r7
 80125b2:	bd80      	pop	{r7, pc}
 80125b4:	0801edd0 	.word	0x0801edd0
 80125b8:	0801f0ac 	.word	0x0801f0ac
 80125bc:	0801ee14 	.word	0x0801ee14
 80125c0:	0801f0c8 	.word	0x0801f0c8
 80125c4:	0801f0e4 	.word	0x0801f0e4
 80125c8:	200071b0 	.word	0x200071b0
 80125cc:	200071b8 	.word	0x200071b8
 80125d0:	200071c0 	.word	0x200071c0

080125d4 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 80125d4:	b5b0      	push	{r4, r5, r7, lr}
 80125d6:	b090      	sub	sp, #64	; 0x40
 80125d8:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 80125da:	2300      	movs	r3, #0
 80125dc:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  ++tcp_ticks;
 80125e0:	4b94      	ldr	r3, [pc, #592]	; (8012834 <tcp_slowtmr+0x260>)
 80125e2:	681b      	ldr	r3, [r3, #0]
 80125e4:	3301      	adds	r3, #1
 80125e6:	4a93      	ldr	r2, [pc, #588]	; (8012834 <tcp_slowtmr+0x260>)
 80125e8:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 80125ea:	4b93      	ldr	r3, [pc, #588]	; (8012838 <tcp_slowtmr+0x264>)
 80125ec:	781b      	ldrb	r3, [r3, #0]
 80125ee:	3301      	adds	r3, #1
 80125f0:	b2da      	uxtb	r2, r3
 80125f2:	4b91      	ldr	r3, [pc, #580]	; (8012838 <tcp_slowtmr+0x264>)
 80125f4:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 80125f6:	2300      	movs	r3, #0
 80125f8:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_active_pcbs;
 80125fa:	4b90      	ldr	r3, [pc, #576]	; (801283c <tcp_slowtmr+0x268>)
 80125fc:	681b      	ldr	r3, [r3, #0]
 80125fe:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 8012600:	e29d      	b.n	8012b3e <tcp_slowtmr+0x56a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 8012602:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012604:	7d1b      	ldrb	r3, [r3, #20]
 8012606:	2b00      	cmp	r3, #0
 8012608:	d106      	bne.n	8012618 <tcp_slowtmr+0x44>
 801260a:	4b8d      	ldr	r3, [pc, #564]	; (8012840 <tcp_slowtmr+0x26c>)
 801260c:	f240 42be 	movw	r2, #1214	; 0x4be
 8012610:	498c      	ldr	r1, [pc, #560]	; (8012844 <tcp_slowtmr+0x270>)
 8012612:	488d      	ldr	r0, [pc, #564]	; (8012848 <tcp_slowtmr+0x274>)
 8012614:	f008 fe50 	bl	801b2b8 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 8012618:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801261a:	7d1b      	ldrb	r3, [r3, #20]
 801261c:	2b01      	cmp	r3, #1
 801261e:	d106      	bne.n	801262e <tcp_slowtmr+0x5a>
 8012620:	4b87      	ldr	r3, [pc, #540]	; (8012840 <tcp_slowtmr+0x26c>)
 8012622:	f240 42bf 	movw	r2, #1215	; 0x4bf
 8012626:	4989      	ldr	r1, [pc, #548]	; (801284c <tcp_slowtmr+0x278>)
 8012628:	4887      	ldr	r0, [pc, #540]	; (8012848 <tcp_slowtmr+0x274>)
 801262a:	f008 fe45 	bl	801b2b8 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 801262e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012630:	7d1b      	ldrb	r3, [r3, #20]
 8012632:	2b0a      	cmp	r3, #10
 8012634:	d106      	bne.n	8012644 <tcp_slowtmr+0x70>
 8012636:	4b82      	ldr	r3, [pc, #520]	; (8012840 <tcp_slowtmr+0x26c>)
 8012638:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 801263c:	4984      	ldr	r1, [pc, #528]	; (8012850 <tcp_slowtmr+0x27c>)
 801263e:	4882      	ldr	r0, [pc, #520]	; (8012848 <tcp_slowtmr+0x274>)
 8012640:	f008 fe3a 	bl	801b2b8 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 8012644:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012646:	7f9a      	ldrb	r2, [r3, #30]
 8012648:	4b7b      	ldr	r3, [pc, #492]	; (8012838 <tcp_slowtmr+0x264>)
 801264a:	781b      	ldrb	r3, [r3, #0]
 801264c:	429a      	cmp	r2, r3
 801264e:	d105      	bne.n	801265c <tcp_slowtmr+0x88>
      /* skip this pcb, we have already processed it */
      prev = pcb;
 8012650:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012652:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 8012654:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012656:	68db      	ldr	r3, [r3, #12]
 8012658:	62fb      	str	r3, [r7, #44]	; 0x2c
      continue;
 801265a:	e270      	b.n	8012b3e <tcp_slowtmr+0x56a>
    }
    pcb->last_timer = tcp_timer_ctr;
 801265c:	4b76      	ldr	r3, [pc, #472]	; (8012838 <tcp_slowtmr+0x264>)
 801265e:	781a      	ldrb	r2, [r3, #0]
 8012660:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012662:	779a      	strb	r2, [r3, #30]

    pcb_remove = 0;
 8012664:	2300      	movs	r3, #0
 8012666:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    pcb_reset = 0;
 801266a:	2300      	movs	r3, #0
 801266c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 8012670:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012672:	7d1b      	ldrb	r3, [r3, #20]
 8012674:	2b02      	cmp	r3, #2
 8012676:	d10a      	bne.n	801268e <tcp_slowtmr+0xba>
 8012678:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801267a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801267e:	2b05      	cmp	r3, #5
 8012680:	d905      	bls.n	801268e <tcp_slowtmr+0xba>
      ++pcb_remove;
 8012682:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012686:	3301      	adds	r3, #1
 8012688:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801268c:	e11e      	b.n	80128cc <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 801268e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012690:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8012694:	2b0b      	cmp	r3, #11
 8012696:	d905      	bls.n	80126a4 <tcp_slowtmr+0xd0>
      ++pcb_remove;
 8012698:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801269c:	3301      	adds	r3, #1
 801269e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80126a2:	e113      	b.n	80128cc <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 80126a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80126a6:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 80126aa:	2b00      	cmp	r3, #0
 80126ac:	d075      	beq.n	801279a <tcp_slowtmr+0x1c6>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 80126ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80126b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80126b2:	2b00      	cmp	r3, #0
 80126b4:	d006      	beq.n	80126c4 <tcp_slowtmr+0xf0>
 80126b6:	4b62      	ldr	r3, [pc, #392]	; (8012840 <tcp_slowtmr+0x26c>)
 80126b8:	f240 42d4 	movw	r2, #1236	; 0x4d4
 80126bc:	4965      	ldr	r1, [pc, #404]	; (8012854 <tcp_slowtmr+0x280>)
 80126be:	4862      	ldr	r0, [pc, #392]	; (8012848 <tcp_slowtmr+0x274>)
 80126c0:	f008 fdfa 	bl	801b2b8 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 80126c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80126c6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80126c8:	2b00      	cmp	r3, #0
 80126ca:	d106      	bne.n	80126da <tcp_slowtmr+0x106>
 80126cc:	4b5c      	ldr	r3, [pc, #368]	; (8012840 <tcp_slowtmr+0x26c>)
 80126ce:	f240 42d5 	movw	r2, #1237	; 0x4d5
 80126d2:	4961      	ldr	r1, [pc, #388]	; (8012858 <tcp_slowtmr+0x284>)
 80126d4:	485c      	ldr	r0, [pc, #368]	; (8012848 <tcp_slowtmr+0x274>)
 80126d6:	f008 fdef 	bl	801b2b8 <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 80126da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80126dc:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 80126e0:	2b0b      	cmp	r3, #11
 80126e2:	d905      	bls.n	80126f0 <tcp_slowtmr+0x11c>
          ++pcb_remove; /* max probes reached */
 80126e4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80126e8:	3301      	adds	r3, #1
 80126ea:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80126ee:	e0ed      	b.n	80128cc <tcp_slowtmr+0x2f8>
        } else {
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 80126f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80126f2:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 80126f6:	3b01      	subs	r3, #1
 80126f8:	4a58      	ldr	r2, [pc, #352]	; (801285c <tcp_slowtmr+0x288>)
 80126fa:	5cd3      	ldrb	r3, [r2, r3]
 80126fc:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 80126fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012700:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8012704:	7c7a      	ldrb	r2, [r7, #17]
 8012706:	429a      	cmp	r2, r3
 8012708:	d907      	bls.n	801271a <tcp_slowtmr+0x146>
            pcb->persist_cnt++;
 801270a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801270c:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8012710:	3301      	adds	r3, #1
 8012712:	b2da      	uxtb	r2, r3
 8012714:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012716:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
          }
          if (pcb->persist_cnt >= backoff_cnt) {
 801271a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801271c:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8012720:	7c7a      	ldrb	r2, [r7, #17]
 8012722:	429a      	cmp	r2, r3
 8012724:	f200 80d2 	bhi.w	80128cc <tcp_slowtmr+0x2f8>
            int next_slot = 1; /* increment timer to next slot */
 8012728:	2301      	movs	r3, #1
 801272a:	623b      	str	r3, [r7, #32]
            /* If snd_wnd is zero, send 1 byte probes */
            if (pcb->snd_wnd == 0) {
 801272c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801272e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8012732:	2b00      	cmp	r3, #0
 8012734:	d108      	bne.n	8012748 <tcp_slowtmr+0x174>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 8012736:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8012738:	f005 f934 	bl	80179a4 <tcp_zero_window_probe>
 801273c:	4603      	mov	r3, r0
 801273e:	2b00      	cmp	r3, #0
 8012740:	d014      	beq.n	801276c <tcp_slowtmr+0x198>
                next_slot = 0; /* try probe again with current slot */
 8012742:	2300      	movs	r3, #0
 8012744:	623b      	str	r3, [r7, #32]
 8012746:	e011      	b.n	801276c <tcp_slowtmr+0x198>
              }
              /* snd_wnd not fully closed, split unsent head and fill window */
            } else {
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 8012748:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801274a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801274e:	4619      	mov	r1, r3
 8012750:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8012752:	f003 fff9 	bl	8016748 <tcp_split_unsent_seg>
 8012756:	4603      	mov	r3, r0
 8012758:	2b00      	cmp	r3, #0
 801275a:	d107      	bne.n	801276c <tcp_slowtmr+0x198>
                if (tcp_output(pcb) == ERR_OK) {
 801275c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801275e:	f004 fa79 	bl	8016c54 <tcp_output>
 8012762:	4603      	mov	r3, r0
 8012764:	2b00      	cmp	r3, #0
 8012766:	d101      	bne.n	801276c <tcp_slowtmr+0x198>
                  /* sending will cancel persist timer, else retry with current slot */
                  next_slot = 0;
 8012768:	2300      	movs	r3, #0
 801276a:	623b      	str	r3, [r7, #32]
                }
              }
            }
            if (next_slot) {
 801276c:	6a3b      	ldr	r3, [r7, #32]
 801276e:	2b00      	cmp	r3, #0
 8012770:	f000 80ac 	beq.w	80128cc <tcp_slowtmr+0x2f8>
              pcb->persist_cnt = 0;
 8012774:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012776:	2200      	movs	r2, #0
 8012778:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 801277c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801277e:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8012782:	2b06      	cmp	r3, #6
 8012784:	f200 80a2 	bhi.w	80128cc <tcp_slowtmr+0x2f8>
                pcb->persist_backoff++;
 8012788:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801278a:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 801278e:	3301      	adds	r3, #1
 8012790:	b2da      	uxtb	r2, r3
 8012792:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012794:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
 8012798:	e098      	b.n	80128cc <tcp_slowtmr+0x2f8>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 801279a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801279c:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 80127a0:	2b00      	cmp	r3, #0
 80127a2:	db0f      	blt.n	80127c4 <tcp_slowtmr+0x1f0>
 80127a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80127a6:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 80127aa:	f647 72ff 	movw	r2, #32767	; 0x7fff
 80127ae:	4293      	cmp	r3, r2
 80127b0:	d008      	beq.n	80127c4 <tcp_slowtmr+0x1f0>
          ++pcb->rtime;
 80127b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80127b4:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 80127b8:	b29b      	uxth	r3, r3
 80127ba:	3301      	adds	r3, #1
 80127bc:	b29b      	uxth	r3, r3
 80127be:	b21a      	sxth	r2, r3
 80127c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80127c2:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->rtime >= pcb->rto) {
 80127c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80127c6:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 80127ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80127cc:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 80127d0:	429a      	cmp	r2, r3
 80127d2:	db7b      	blt.n	80128cc <tcp_slowtmr+0x2f8>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));
          /* If prepare phase fails but we have unsent data but no unacked data,
             still execute the backoff calculations below, as this means we somehow
             failed to send segment. */
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 80127d4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80127d6:	f004 fd31 	bl	801723c <tcp_rexmit_rto_prepare>
 80127da:	4603      	mov	r3, r0
 80127dc:	2b00      	cmp	r3, #0
 80127de:	d007      	beq.n	80127f0 <tcp_slowtmr+0x21c>
 80127e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80127e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80127e4:	2b00      	cmp	r3, #0
 80127e6:	d171      	bne.n	80128cc <tcp_slowtmr+0x2f8>
 80127e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80127ea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80127ec:	2b00      	cmp	r3, #0
 80127ee:	d06d      	beq.n	80128cc <tcp_slowtmr+0x2f8>
            /* Double retransmission time-out unless we are trying to
             * connect to somebody (i.e., we are in SYN_SENT). */
            if (pcb->state != SYN_SENT) {
 80127f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80127f2:	7d1b      	ldrb	r3, [r3, #20]
 80127f4:	2b02      	cmp	r3, #2
 80127f6:	d03a      	beq.n	801286e <tcp_slowtmr+0x29a>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 80127f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80127fa:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80127fe:	2b0c      	cmp	r3, #12
 8012800:	bf28      	it	cs
 8012802:	230c      	movcs	r3, #12
 8012804:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 8012806:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012808:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 801280c:	10db      	asrs	r3, r3, #3
 801280e:	b21b      	sxth	r3, r3
 8012810:	461a      	mov	r2, r3
 8012812:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012814:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8012818:	4413      	add	r3, r2
 801281a:	7efa      	ldrb	r2, [r7, #27]
 801281c:	4910      	ldr	r1, [pc, #64]	; (8012860 <tcp_slowtmr+0x28c>)
 801281e:	5c8a      	ldrb	r2, [r1, r2]
 8012820:	4093      	lsls	r3, r2
 8012822:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 8012824:	697b      	ldr	r3, [r7, #20]
 8012826:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 801282a:	4293      	cmp	r3, r2
 801282c:	dc1a      	bgt.n	8012864 <tcp_slowtmr+0x290>
 801282e:	697b      	ldr	r3, [r7, #20]
 8012830:	b21a      	sxth	r2, r3
 8012832:	e019      	b.n	8012868 <tcp_slowtmr+0x294>
 8012834:	200071ac 	.word	0x200071ac
 8012838:	200071c2 	.word	0x200071c2
 801283c:	200071b8 	.word	0x200071b8
 8012840:	0801edd0 	.word	0x0801edd0
 8012844:	0801f114 	.word	0x0801f114
 8012848:	0801ee14 	.word	0x0801ee14
 801284c:	0801f140 	.word	0x0801f140
 8012850:	0801f16c 	.word	0x0801f16c
 8012854:	0801f19c 	.word	0x0801f19c
 8012858:	0801f1d0 	.word	0x0801f1d0
 801285c:	08020dec 	.word	0x08020dec
 8012860:	08020ddc 	.word	0x08020ddc
 8012864:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8012868:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801286a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
            }

            /* Reset the retransmission timer. */
            pcb->rtime = 0;
 801286e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012870:	2200      	movs	r2, #0
 8012872:	861a      	strh	r2, [r3, #48]	; 0x30

            /* Reduce congestion window and ssthresh. */
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 8012874:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012876:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 801287a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801287c:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8012880:	4293      	cmp	r3, r2
 8012882:	bf28      	it	cs
 8012884:	4613      	movcs	r3, r2
 8012886:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 8012888:	8a7b      	ldrh	r3, [r7, #18]
 801288a:	085b      	lsrs	r3, r3, #1
 801288c:	b29a      	uxth	r2, r3
 801288e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012890:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 8012894:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012896:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 801289a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801289c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801289e:	005b      	lsls	r3, r3, #1
 80128a0:	b29b      	uxth	r3, r3
 80128a2:	429a      	cmp	r2, r3
 80128a4:	d206      	bcs.n	80128b4 <tcp_slowtmr+0x2e0>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 80128a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80128a8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80128aa:	005b      	lsls	r3, r3, #1
 80128ac:	b29a      	uxth	r2, r3
 80128ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80128b0:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            }
            pcb->cwnd = pcb->mss;
 80128b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80128b6:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 80128b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80128ba:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
            LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: cwnd %"TCPWNDSIZE_F
                                         " ssthresh %"TCPWNDSIZE_F"\n",
                                         pcb->cwnd, pcb->ssthresh));
            pcb->bytes_acked = 0;
 80128be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80128c0:	2200      	movs	r2, #0
 80128c2:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

            /* The following needs to be called AFTER cwnd is set to one
               mss - STJ */
            tcp_rexmit_rto_commit(pcb);
 80128c6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80128c8:	f004 fd28 	bl	801731c <tcp_rexmit_rto_commit>
          }
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 80128cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80128ce:	7d1b      	ldrb	r3, [r3, #20]
 80128d0:	2b06      	cmp	r3, #6
 80128d2:	d111      	bne.n	80128f8 <tcp_slowtmr+0x324>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 80128d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80128d6:	8b5b      	ldrh	r3, [r3, #26]
 80128d8:	f003 0310 	and.w	r3, r3, #16
 80128dc:	2b00      	cmp	r3, #0
 80128de:	d00b      	beq.n	80128f8 <tcp_slowtmr+0x324>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 80128e0:	4b9c      	ldr	r3, [pc, #624]	; (8012b54 <tcp_slowtmr+0x580>)
 80128e2:	681a      	ldr	r2, [r3, #0]
 80128e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80128e6:	6a1b      	ldr	r3, [r3, #32]
 80128e8:	1ad3      	subs	r3, r2, r3
 80128ea:	2b28      	cmp	r3, #40	; 0x28
 80128ec:	d904      	bls.n	80128f8 <tcp_slowtmr+0x324>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 80128ee:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80128f2:	3301      	adds	r3, #1
 80128f4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 80128f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80128fa:	7a5b      	ldrb	r3, [r3, #9]
 80128fc:	f003 0308 	and.w	r3, r3, #8
 8012900:	2b00      	cmp	r3, #0
 8012902:	d04a      	beq.n	801299a <tcp_slowtmr+0x3c6>
        ((pcb->state == ESTABLISHED) ||
 8012904:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012906:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8012908:	2b04      	cmp	r3, #4
 801290a:	d003      	beq.n	8012914 <tcp_slowtmr+0x340>
         (pcb->state == CLOSE_WAIT))) {
 801290c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801290e:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 8012910:	2b07      	cmp	r3, #7
 8012912:	d142      	bne.n	801299a <tcp_slowtmr+0x3c6>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8012914:	4b8f      	ldr	r3, [pc, #572]	; (8012b54 <tcp_slowtmr+0x580>)
 8012916:	681a      	ldr	r2, [r3, #0]
 8012918:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801291a:	6a1b      	ldr	r3, [r3, #32]
 801291c:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 801291e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012920:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 8012924:	4b8c      	ldr	r3, [pc, #560]	; (8012b58 <tcp_slowtmr+0x584>)
 8012926:	440b      	add	r3, r1
 8012928:	498c      	ldr	r1, [pc, #560]	; (8012b5c <tcp_slowtmr+0x588>)
 801292a:	fba1 1303 	umull	r1, r3, r1, r3
 801292e:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8012930:	429a      	cmp	r2, r3
 8012932:	d90a      	bls.n	801294a <tcp_slowtmr+0x376>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print_val(TCP_DEBUG, pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 8012934:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012938:	3301      	adds	r3, #1
 801293a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        ++pcb_reset;
 801293e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8012942:	3301      	adds	r3, #1
 8012944:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8012948:	e027      	b.n	801299a <tcp_slowtmr+0x3c6>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 801294a:	4b82      	ldr	r3, [pc, #520]	; (8012b54 <tcp_slowtmr+0x580>)
 801294c:	681a      	ldr	r2, [r3, #0]
 801294e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012950:	6a1b      	ldr	r3, [r3, #32]
 8012952:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 8012954:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012956:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 801295a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801295c:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 8012960:	4618      	mov	r0, r3
 8012962:	4b7f      	ldr	r3, [pc, #508]	; (8012b60 <tcp_slowtmr+0x58c>)
 8012964:	fb00 f303 	mul.w	r3, r0, r3
 8012968:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 801296a:	497c      	ldr	r1, [pc, #496]	; (8012b5c <tcp_slowtmr+0x588>)
 801296c:	fba1 1303 	umull	r1, r3, r1, r3
 8012970:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 8012972:	429a      	cmp	r2, r3
 8012974:	d911      	bls.n	801299a <tcp_slowtmr+0x3c6>
        err = tcp_keepalive(pcb);
 8012976:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8012978:	f004 ffd4 	bl	8017924 <tcp_keepalive>
 801297c:	4603      	mov	r3, r0
 801297e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (err == ERR_OK) {
 8012982:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 8012986:	2b00      	cmp	r3, #0
 8012988:	d107      	bne.n	801299a <tcp_slowtmr+0x3c6>
          pcb->keep_cnt_sent++;
 801298a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801298c:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 8012990:	3301      	adds	r3, #1
 8012992:	b2da      	uxtb	r2, r3
 8012994:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012996:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 801299a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801299c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801299e:	2b00      	cmp	r3, #0
 80129a0:	d011      	beq.n	80129c6 <tcp_slowtmr+0x3f2>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 80129a2:	4b6c      	ldr	r3, [pc, #432]	; (8012b54 <tcp_slowtmr+0x580>)
 80129a4:	681a      	ldr	r2, [r3, #0]
 80129a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80129a8:	6a1b      	ldr	r3, [r3, #32]
 80129aa:	1ad2      	subs	r2, r2, r3
 80129ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80129ae:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 80129b2:	4619      	mov	r1, r3
 80129b4:	460b      	mov	r3, r1
 80129b6:	005b      	lsls	r3, r3, #1
 80129b8:	440b      	add	r3, r1
 80129ba:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 80129bc:	429a      	cmp	r2, r3
 80129be:	d302      	bcc.n	80129c6 <tcp_slowtmr+0x3f2>
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
      tcp_free_ooseq(pcb);
 80129c0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80129c2:	f000 fe8f 	bl	80136e4 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 80129c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80129c8:	7d1b      	ldrb	r3, [r3, #20]
 80129ca:	2b03      	cmp	r3, #3
 80129cc:	d10b      	bne.n	80129e6 <tcp_slowtmr+0x412>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 80129ce:	4b61      	ldr	r3, [pc, #388]	; (8012b54 <tcp_slowtmr+0x580>)
 80129d0:	681a      	ldr	r2, [r3, #0]
 80129d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80129d4:	6a1b      	ldr	r3, [r3, #32]
 80129d6:	1ad3      	subs	r3, r2, r3
 80129d8:	2b28      	cmp	r3, #40	; 0x28
 80129da:	d904      	bls.n	80129e6 <tcp_slowtmr+0x412>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 80129dc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80129e0:	3301      	adds	r3, #1
 80129e2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 80129e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80129e8:	7d1b      	ldrb	r3, [r3, #20]
 80129ea:	2b09      	cmp	r3, #9
 80129ec:	d10b      	bne.n	8012a06 <tcp_slowtmr+0x432>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 80129ee:	4b59      	ldr	r3, [pc, #356]	; (8012b54 <tcp_slowtmr+0x580>)
 80129f0:	681a      	ldr	r2, [r3, #0]
 80129f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80129f4:	6a1b      	ldr	r3, [r3, #32]
 80129f6:	1ad3      	subs	r3, r2, r3
 80129f8:	2bf0      	cmp	r3, #240	; 0xf0
 80129fa:	d904      	bls.n	8012a06 <tcp_slowtmr+0x432>
        ++pcb_remove;
 80129fc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012a00:	3301      	adds	r3, #1
 8012a02:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 8012a06:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012a0a:	2b00      	cmp	r3, #0
 8012a0c:	d060      	beq.n	8012ad0 <tcp_slowtmr+0x4fc>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 8012a0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012a10:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8012a14:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 8012a16:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8012a18:	f000 fcb0 	bl	801337c <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 8012a1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012a1e:	2b00      	cmp	r3, #0
 8012a20:	d010      	beq.n	8012a44 <tcp_slowtmr+0x470>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 8012a22:	4b50      	ldr	r3, [pc, #320]	; (8012b64 <tcp_slowtmr+0x590>)
 8012a24:	681b      	ldr	r3, [r3, #0]
 8012a26:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8012a28:	429a      	cmp	r2, r3
 8012a2a:	d106      	bne.n	8012a3a <tcp_slowtmr+0x466>
 8012a2c:	4b4e      	ldr	r3, [pc, #312]	; (8012b68 <tcp_slowtmr+0x594>)
 8012a2e:	f240 526d 	movw	r2, #1389	; 0x56d
 8012a32:	494e      	ldr	r1, [pc, #312]	; (8012b6c <tcp_slowtmr+0x598>)
 8012a34:	484e      	ldr	r0, [pc, #312]	; (8012b70 <tcp_slowtmr+0x59c>)
 8012a36:	f008 fc3f 	bl	801b2b8 <iprintf>
        prev->next = pcb->next;
 8012a3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012a3c:	68da      	ldr	r2, [r3, #12]
 8012a3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012a40:	60da      	str	r2, [r3, #12]
 8012a42:	e00f      	b.n	8012a64 <tcp_slowtmr+0x490>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 8012a44:	4b47      	ldr	r3, [pc, #284]	; (8012b64 <tcp_slowtmr+0x590>)
 8012a46:	681b      	ldr	r3, [r3, #0]
 8012a48:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8012a4a:	429a      	cmp	r2, r3
 8012a4c:	d006      	beq.n	8012a5c <tcp_slowtmr+0x488>
 8012a4e:	4b46      	ldr	r3, [pc, #280]	; (8012b68 <tcp_slowtmr+0x594>)
 8012a50:	f240 5271 	movw	r2, #1393	; 0x571
 8012a54:	4947      	ldr	r1, [pc, #284]	; (8012b74 <tcp_slowtmr+0x5a0>)
 8012a56:	4846      	ldr	r0, [pc, #280]	; (8012b70 <tcp_slowtmr+0x59c>)
 8012a58:	f008 fc2e 	bl	801b2b8 <iprintf>
        tcp_active_pcbs = pcb->next;
 8012a5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012a5e:	68db      	ldr	r3, [r3, #12]
 8012a60:	4a40      	ldr	r2, [pc, #256]	; (8012b64 <tcp_slowtmr+0x590>)
 8012a62:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 8012a64:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8012a68:	2b00      	cmp	r3, #0
 8012a6a:	d013      	beq.n	8012a94 <tcp_slowtmr+0x4c0>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8012a6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012a6e:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8012a70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012a72:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8012a74:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 8012a76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012a78:	3304      	adds	r3, #4
 8012a7a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8012a7c:	8ad2      	ldrh	r2, [r2, #22]
 8012a7e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8012a80:	8b09      	ldrh	r1, [r1, #24]
 8012a82:	9102      	str	r1, [sp, #8]
 8012a84:	9201      	str	r2, [sp, #4]
 8012a86:	9300      	str	r3, [sp, #0]
 8012a88:	462b      	mov	r3, r5
 8012a8a:	4622      	mov	r2, r4
 8012a8c:	4601      	mov	r1, r0
 8012a8e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8012a90:	f004 fe94 	bl	80177bc <tcp_rst>
                pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 8012a94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012a96:	691b      	ldr	r3, [r3, #16]
 8012a98:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 8012a9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012a9c:	7d1b      	ldrb	r3, [r3, #20]
 8012a9e:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 8012aa0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012aa2:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 8012aa4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012aa6:	68db      	ldr	r3, [r3, #12]
 8012aa8:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 8012aaa:	6838      	ldr	r0, [r7, #0]
 8012aac:	f7ff f894 	bl	8011bd8 <tcp_free>

      tcp_active_pcbs_changed = 0;
 8012ab0:	4b31      	ldr	r3, [pc, #196]	; (8012b78 <tcp_slowtmr+0x5a4>)
 8012ab2:	2200      	movs	r2, #0
 8012ab4:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 8012ab6:	68fb      	ldr	r3, [r7, #12]
 8012ab8:	2b00      	cmp	r3, #0
 8012aba:	d004      	beq.n	8012ac6 <tcp_slowtmr+0x4f2>
 8012abc:	68fb      	ldr	r3, [r7, #12]
 8012abe:	f06f 010c 	mvn.w	r1, #12
 8012ac2:	68b8      	ldr	r0, [r7, #8]
 8012ac4:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 8012ac6:	4b2c      	ldr	r3, [pc, #176]	; (8012b78 <tcp_slowtmr+0x5a4>)
 8012ac8:	781b      	ldrb	r3, [r3, #0]
 8012aca:	2b00      	cmp	r3, #0
 8012acc:	d037      	beq.n	8012b3e <tcp_slowtmr+0x56a>
        goto tcp_slowtmr_start;
 8012ace:	e592      	b.n	80125f6 <tcp_slowtmr+0x22>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 8012ad0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012ad2:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 8012ad4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012ad6:	68db      	ldr	r3, [r3, #12]
 8012ad8:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 8012ada:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012adc:	7f1b      	ldrb	r3, [r3, #28]
 8012ade:	3301      	adds	r3, #1
 8012ae0:	b2da      	uxtb	r2, r3
 8012ae2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012ae4:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 8012ae6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012ae8:	7f1a      	ldrb	r2, [r3, #28]
 8012aea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012aec:	7f5b      	ldrb	r3, [r3, #29]
 8012aee:	429a      	cmp	r2, r3
 8012af0:	d325      	bcc.n	8012b3e <tcp_slowtmr+0x56a>
        prev->polltmr = 0;
 8012af2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012af4:	2200      	movs	r2, #0
 8012af6:	771a      	strb	r2, [r3, #28]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 8012af8:	4b1f      	ldr	r3, [pc, #124]	; (8012b78 <tcp_slowtmr+0x5a4>)
 8012afa:	2200      	movs	r2, #0
 8012afc:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 8012afe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012b00:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8012b04:	2b00      	cmp	r3, #0
 8012b06:	d00b      	beq.n	8012b20 <tcp_slowtmr+0x54c>
 8012b08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012b0a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8012b0e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8012b10:	6912      	ldr	r2, [r2, #16]
 8012b12:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8012b14:	4610      	mov	r0, r2
 8012b16:	4798      	blx	r3
 8012b18:	4603      	mov	r3, r0
 8012b1a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8012b1e:	e002      	b.n	8012b26 <tcp_slowtmr+0x552>
 8012b20:	2300      	movs	r3, #0
 8012b22:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (tcp_active_pcbs_changed) {
 8012b26:	4b14      	ldr	r3, [pc, #80]	; (8012b78 <tcp_slowtmr+0x5a4>)
 8012b28:	781b      	ldrb	r3, [r3, #0]
 8012b2a:	2b00      	cmp	r3, #0
 8012b2c:	d000      	beq.n	8012b30 <tcp_slowtmr+0x55c>
          goto tcp_slowtmr_start;
 8012b2e:	e562      	b.n	80125f6 <tcp_slowtmr+0x22>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 8012b30:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 8012b34:	2b00      	cmp	r3, #0
 8012b36:	d102      	bne.n	8012b3e <tcp_slowtmr+0x56a>
          tcp_output(prev);
 8012b38:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8012b3a:	f004 f88b 	bl	8016c54 <tcp_output>
  while (pcb != NULL) {
 8012b3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012b40:	2b00      	cmp	r3, #0
 8012b42:	f47f ad5e 	bne.w	8012602 <tcp_slowtmr+0x2e>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 8012b46:	2300      	movs	r3, #0
 8012b48:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_tw_pcbs;
 8012b4a:	4b0c      	ldr	r3, [pc, #48]	; (8012b7c <tcp_slowtmr+0x5a8>)
 8012b4c:	681b      	ldr	r3, [r3, #0]
 8012b4e:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 8012b50:	e069      	b.n	8012c26 <tcp_slowtmr+0x652>
 8012b52:	bf00      	nop
 8012b54:	200071ac 	.word	0x200071ac
 8012b58:	000a4cb8 	.word	0x000a4cb8
 8012b5c:	10624dd3 	.word	0x10624dd3
 8012b60:	000124f8 	.word	0x000124f8
 8012b64:	200071b8 	.word	0x200071b8
 8012b68:	0801edd0 	.word	0x0801edd0
 8012b6c:	0801f208 	.word	0x0801f208
 8012b70:	0801ee14 	.word	0x0801ee14
 8012b74:	0801f234 	.word	0x0801f234
 8012b78:	200071c0 	.word	0x200071c0
 8012b7c:	200071bc 	.word	0x200071bc
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8012b80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012b82:	7d1b      	ldrb	r3, [r3, #20]
 8012b84:	2b0a      	cmp	r3, #10
 8012b86:	d006      	beq.n	8012b96 <tcp_slowtmr+0x5c2>
 8012b88:	4b2b      	ldr	r3, [pc, #172]	; (8012c38 <tcp_slowtmr+0x664>)
 8012b8a:	f240 52a1 	movw	r2, #1441	; 0x5a1
 8012b8e:	492b      	ldr	r1, [pc, #172]	; (8012c3c <tcp_slowtmr+0x668>)
 8012b90:	482b      	ldr	r0, [pc, #172]	; (8012c40 <tcp_slowtmr+0x66c>)
 8012b92:	f008 fb91 	bl	801b2b8 <iprintf>
    pcb_remove = 0;
 8012b96:	2300      	movs	r3, #0
 8012b98:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8012b9c:	4b29      	ldr	r3, [pc, #164]	; (8012c44 <tcp_slowtmr+0x670>)
 8012b9e:	681a      	ldr	r2, [r3, #0]
 8012ba0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012ba2:	6a1b      	ldr	r3, [r3, #32]
 8012ba4:	1ad3      	subs	r3, r2, r3
 8012ba6:	2bf0      	cmp	r3, #240	; 0xf0
 8012ba8:	d904      	bls.n	8012bb4 <tcp_slowtmr+0x5e0>
      ++pcb_remove;
 8012baa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012bae:	3301      	adds	r3, #1
 8012bb0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 8012bb4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012bb8:	2b00      	cmp	r3, #0
 8012bba:	d02f      	beq.n	8012c1c <tcp_slowtmr+0x648>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 8012bbc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8012bbe:	f000 fbdd 	bl	801337c <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 8012bc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012bc4:	2b00      	cmp	r3, #0
 8012bc6:	d010      	beq.n	8012bea <tcp_slowtmr+0x616>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 8012bc8:	4b1f      	ldr	r3, [pc, #124]	; (8012c48 <tcp_slowtmr+0x674>)
 8012bca:	681b      	ldr	r3, [r3, #0]
 8012bcc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8012bce:	429a      	cmp	r2, r3
 8012bd0:	d106      	bne.n	8012be0 <tcp_slowtmr+0x60c>
 8012bd2:	4b19      	ldr	r3, [pc, #100]	; (8012c38 <tcp_slowtmr+0x664>)
 8012bd4:	f240 52af 	movw	r2, #1455	; 0x5af
 8012bd8:	491c      	ldr	r1, [pc, #112]	; (8012c4c <tcp_slowtmr+0x678>)
 8012bda:	4819      	ldr	r0, [pc, #100]	; (8012c40 <tcp_slowtmr+0x66c>)
 8012bdc:	f008 fb6c 	bl	801b2b8 <iprintf>
        prev->next = pcb->next;
 8012be0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012be2:	68da      	ldr	r2, [r3, #12]
 8012be4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012be6:	60da      	str	r2, [r3, #12]
 8012be8:	e00f      	b.n	8012c0a <tcp_slowtmr+0x636>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 8012bea:	4b17      	ldr	r3, [pc, #92]	; (8012c48 <tcp_slowtmr+0x674>)
 8012bec:	681b      	ldr	r3, [r3, #0]
 8012bee:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8012bf0:	429a      	cmp	r2, r3
 8012bf2:	d006      	beq.n	8012c02 <tcp_slowtmr+0x62e>
 8012bf4:	4b10      	ldr	r3, [pc, #64]	; (8012c38 <tcp_slowtmr+0x664>)
 8012bf6:	f240 52b3 	movw	r2, #1459	; 0x5b3
 8012bfa:	4915      	ldr	r1, [pc, #84]	; (8012c50 <tcp_slowtmr+0x67c>)
 8012bfc:	4810      	ldr	r0, [pc, #64]	; (8012c40 <tcp_slowtmr+0x66c>)
 8012bfe:	f008 fb5b 	bl	801b2b8 <iprintf>
        tcp_tw_pcbs = pcb->next;
 8012c02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012c04:	68db      	ldr	r3, [r3, #12]
 8012c06:	4a10      	ldr	r2, [pc, #64]	; (8012c48 <tcp_slowtmr+0x674>)
 8012c08:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 8012c0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012c0c:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 8012c0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012c10:	68db      	ldr	r3, [r3, #12]
 8012c12:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 8012c14:	69f8      	ldr	r0, [r7, #28]
 8012c16:	f7fe ffdf 	bl	8011bd8 <tcp_free>
 8012c1a:	e004      	b.n	8012c26 <tcp_slowtmr+0x652>
    } else {
      prev = pcb;
 8012c1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012c1e:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 8012c20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012c22:	68db      	ldr	r3, [r3, #12]
 8012c24:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 8012c26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012c28:	2b00      	cmp	r3, #0
 8012c2a:	d1a9      	bne.n	8012b80 <tcp_slowtmr+0x5ac>
    }
  }
}
 8012c2c:	bf00      	nop
 8012c2e:	bf00      	nop
 8012c30:	3730      	adds	r7, #48	; 0x30
 8012c32:	46bd      	mov	sp, r7
 8012c34:	bdb0      	pop	{r4, r5, r7, pc}
 8012c36:	bf00      	nop
 8012c38:	0801edd0 	.word	0x0801edd0
 8012c3c:	0801f260 	.word	0x0801f260
 8012c40:	0801ee14 	.word	0x0801ee14
 8012c44:	200071ac 	.word	0x200071ac
 8012c48:	200071bc 	.word	0x200071bc
 8012c4c:	0801f290 	.word	0x0801f290
 8012c50:	0801f2b8 	.word	0x0801f2b8

08012c54 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 8012c54:	b580      	push	{r7, lr}
 8012c56:	b082      	sub	sp, #8
 8012c58:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 8012c5a:	4b2d      	ldr	r3, [pc, #180]	; (8012d10 <tcp_fasttmr+0xbc>)
 8012c5c:	781b      	ldrb	r3, [r3, #0]
 8012c5e:	3301      	adds	r3, #1
 8012c60:	b2da      	uxtb	r2, r3
 8012c62:	4b2b      	ldr	r3, [pc, #172]	; (8012d10 <tcp_fasttmr+0xbc>)
 8012c64:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 8012c66:	4b2b      	ldr	r3, [pc, #172]	; (8012d14 <tcp_fasttmr+0xc0>)
 8012c68:	681b      	ldr	r3, [r3, #0]
 8012c6a:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8012c6c:	e048      	b.n	8012d00 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 8012c6e:	687b      	ldr	r3, [r7, #4]
 8012c70:	7f9a      	ldrb	r2, [r3, #30]
 8012c72:	4b27      	ldr	r3, [pc, #156]	; (8012d10 <tcp_fasttmr+0xbc>)
 8012c74:	781b      	ldrb	r3, [r3, #0]
 8012c76:	429a      	cmp	r2, r3
 8012c78:	d03f      	beq.n	8012cfa <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 8012c7a:	4b25      	ldr	r3, [pc, #148]	; (8012d10 <tcp_fasttmr+0xbc>)
 8012c7c:	781a      	ldrb	r2, [r3, #0]
 8012c7e:	687b      	ldr	r3, [r7, #4]
 8012c80:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 8012c82:	687b      	ldr	r3, [r7, #4]
 8012c84:	8b5b      	ldrh	r3, [r3, #26]
 8012c86:	f003 0301 	and.w	r3, r3, #1
 8012c8a:	2b00      	cmp	r3, #0
 8012c8c:	d010      	beq.n	8012cb0 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 8012c8e:	687b      	ldr	r3, [r7, #4]
 8012c90:	8b5b      	ldrh	r3, [r3, #26]
 8012c92:	f043 0302 	orr.w	r3, r3, #2
 8012c96:	b29a      	uxth	r2, r3
 8012c98:	687b      	ldr	r3, [r7, #4]
 8012c9a:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 8012c9c:	6878      	ldr	r0, [r7, #4]
 8012c9e:	f003 ffd9 	bl	8016c54 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8012ca2:	687b      	ldr	r3, [r7, #4]
 8012ca4:	8b5b      	ldrh	r3, [r3, #26]
 8012ca6:	f023 0303 	bic.w	r3, r3, #3
 8012caa:	b29a      	uxth	r2, r3
 8012cac:	687b      	ldr	r3, [r7, #4]
 8012cae:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 8012cb0:	687b      	ldr	r3, [r7, #4]
 8012cb2:	8b5b      	ldrh	r3, [r3, #26]
 8012cb4:	f003 0308 	and.w	r3, r3, #8
 8012cb8:	2b00      	cmp	r3, #0
 8012cba:	d009      	beq.n	8012cd0 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 8012cbc:	687b      	ldr	r3, [r7, #4]
 8012cbe:	8b5b      	ldrh	r3, [r3, #26]
 8012cc0:	f023 0308 	bic.w	r3, r3, #8
 8012cc4:	b29a      	uxth	r2, r3
 8012cc6:	687b      	ldr	r3, [r7, #4]
 8012cc8:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 8012cca:	6878      	ldr	r0, [r7, #4]
 8012ccc:	f7ff f918 	bl	8011f00 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 8012cd0:	687b      	ldr	r3, [r7, #4]
 8012cd2:	68db      	ldr	r3, [r3, #12]
 8012cd4:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 8012cd6:	687b      	ldr	r3, [r7, #4]
 8012cd8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8012cda:	2b00      	cmp	r3, #0
 8012cdc:	d00a      	beq.n	8012cf4 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 8012cde:	4b0e      	ldr	r3, [pc, #56]	; (8012d18 <tcp_fasttmr+0xc4>)
 8012ce0:	2200      	movs	r2, #0
 8012ce2:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 8012ce4:	6878      	ldr	r0, [r7, #4]
 8012ce6:	f000 f819 	bl	8012d1c <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 8012cea:	4b0b      	ldr	r3, [pc, #44]	; (8012d18 <tcp_fasttmr+0xc4>)
 8012cec:	781b      	ldrb	r3, [r3, #0]
 8012cee:	2b00      	cmp	r3, #0
 8012cf0:	d000      	beq.n	8012cf4 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 8012cf2:	e7b8      	b.n	8012c66 <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 8012cf4:	683b      	ldr	r3, [r7, #0]
 8012cf6:	607b      	str	r3, [r7, #4]
 8012cf8:	e002      	b.n	8012d00 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 8012cfa:	687b      	ldr	r3, [r7, #4]
 8012cfc:	68db      	ldr	r3, [r3, #12]
 8012cfe:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 8012d00:	687b      	ldr	r3, [r7, #4]
 8012d02:	2b00      	cmp	r3, #0
 8012d04:	d1b3      	bne.n	8012c6e <tcp_fasttmr+0x1a>
    }
  }
}
 8012d06:	bf00      	nop
 8012d08:	bf00      	nop
 8012d0a:	3708      	adds	r7, #8
 8012d0c:	46bd      	mov	sp, r7
 8012d0e:	bd80      	pop	{r7, pc}
 8012d10:	200071c2 	.word	0x200071c2
 8012d14:	200071b8 	.word	0x200071b8
 8012d18:	200071c0 	.word	0x200071c0

08012d1c <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 8012d1c:	b590      	push	{r4, r7, lr}
 8012d1e:	b085      	sub	sp, #20
 8012d20:	af00      	add	r7, sp, #0
 8012d22:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 8012d24:	687b      	ldr	r3, [r7, #4]
 8012d26:	2b00      	cmp	r3, #0
 8012d28:	d109      	bne.n	8012d3e <tcp_process_refused_data+0x22>
 8012d2a:	4b38      	ldr	r3, [pc, #224]	; (8012e0c <tcp_process_refused_data+0xf0>)
 8012d2c:	f240 6209 	movw	r2, #1545	; 0x609
 8012d30:	4937      	ldr	r1, [pc, #220]	; (8012e10 <tcp_process_refused_data+0xf4>)
 8012d32:	4838      	ldr	r0, [pc, #224]	; (8012e14 <tcp_process_refused_data+0xf8>)
 8012d34:	f008 fac0 	bl	801b2b8 <iprintf>
 8012d38:	f06f 030f 	mvn.w	r3, #15
 8012d3c:	e061      	b.n	8012e02 <tcp_process_refused_data+0xe6>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 8012d3e:	687b      	ldr	r3, [r7, #4]
 8012d40:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8012d42:	7b5b      	ldrb	r3, [r3, #13]
 8012d44:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 8012d46:	687b      	ldr	r3, [r7, #4]
 8012d48:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8012d4a:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 8012d4c:	687b      	ldr	r3, [r7, #4]
 8012d4e:	2200      	movs	r2, #0
 8012d50:	679a      	str	r2, [r3, #120]	; 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 8012d52:	687b      	ldr	r3, [r7, #4]
 8012d54:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8012d58:	2b00      	cmp	r3, #0
 8012d5a:	d00b      	beq.n	8012d74 <tcp_process_refused_data+0x58>
 8012d5c:	687b      	ldr	r3, [r7, #4]
 8012d5e:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8012d62:	687b      	ldr	r3, [r7, #4]
 8012d64:	6918      	ldr	r0, [r3, #16]
 8012d66:	2300      	movs	r3, #0
 8012d68:	68ba      	ldr	r2, [r7, #8]
 8012d6a:	6879      	ldr	r1, [r7, #4]
 8012d6c:	47a0      	blx	r4
 8012d6e:	4603      	mov	r3, r0
 8012d70:	73fb      	strb	r3, [r7, #15]
 8012d72:	e007      	b.n	8012d84 <tcp_process_refused_data+0x68>
 8012d74:	2300      	movs	r3, #0
 8012d76:	68ba      	ldr	r2, [r7, #8]
 8012d78:	6879      	ldr	r1, [r7, #4]
 8012d7a:	2000      	movs	r0, #0
 8012d7c:	f000 f8a6 	bl	8012ecc <tcp_recv_null>
 8012d80:	4603      	mov	r3, r0
 8012d82:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 8012d84:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8012d88:	2b00      	cmp	r3, #0
 8012d8a:	d12b      	bne.n	8012de4 <tcp_process_refused_data+0xc8>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 8012d8c:	7bbb      	ldrb	r3, [r7, #14]
 8012d8e:	f003 0320 	and.w	r3, r3, #32
 8012d92:	2b00      	cmp	r3, #0
 8012d94:	d034      	beq.n	8012e00 <tcp_process_refused_data+0xe4>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8012d96:	687b      	ldr	r3, [r7, #4]
 8012d98:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8012d9a:	f241 62d0 	movw	r2, #5840	; 0x16d0
 8012d9e:	4293      	cmp	r3, r2
 8012da0:	d005      	beq.n	8012dae <tcp_process_refused_data+0x92>
          pcb->rcv_wnd++;
 8012da2:	687b      	ldr	r3, [r7, #4]
 8012da4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8012da6:	3301      	adds	r3, #1
 8012da8:	b29a      	uxth	r2, r3
 8012daa:	687b      	ldr	r3, [r7, #4]
 8012dac:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 8012dae:	687b      	ldr	r3, [r7, #4]
 8012db0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8012db4:	2b00      	cmp	r3, #0
 8012db6:	d00b      	beq.n	8012dd0 <tcp_process_refused_data+0xb4>
 8012db8:	687b      	ldr	r3, [r7, #4]
 8012dba:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8012dbe:	687b      	ldr	r3, [r7, #4]
 8012dc0:	6918      	ldr	r0, [r3, #16]
 8012dc2:	2300      	movs	r3, #0
 8012dc4:	2200      	movs	r2, #0
 8012dc6:	6879      	ldr	r1, [r7, #4]
 8012dc8:	47a0      	blx	r4
 8012dca:	4603      	mov	r3, r0
 8012dcc:	73fb      	strb	r3, [r7, #15]
 8012dce:	e001      	b.n	8012dd4 <tcp_process_refused_data+0xb8>
 8012dd0:	2300      	movs	r3, #0
 8012dd2:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 8012dd4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8012dd8:	f113 0f0d 	cmn.w	r3, #13
 8012ddc:	d110      	bne.n	8012e00 <tcp_process_refused_data+0xe4>
          return ERR_ABRT;
 8012dde:	f06f 030c 	mvn.w	r3, #12
 8012de2:	e00e      	b.n	8012e02 <tcp_process_refused_data+0xe6>
        }
      }
    } else if (err == ERR_ABRT) {
 8012de4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8012de8:	f113 0f0d 	cmn.w	r3, #13
 8012dec:	d102      	bne.n	8012df4 <tcp_process_refused_data+0xd8>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 8012dee:	f06f 030c 	mvn.w	r3, #12
 8012df2:	e006      	b.n	8012e02 <tcp_process_refused_data+0xe6>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 8012df4:	687b      	ldr	r3, [r7, #4]
 8012df6:	68ba      	ldr	r2, [r7, #8]
 8012df8:	679a      	str	r2, [r3, #120]	; 0x78
      return ERR_INPROGRESS;
 8012dfa:	f06f 0304 	mvn.w	r3, #4
 8012dfe:	e000      	b.n	8012e02 <tcp_process_refused_data+0xe6>
    }
  }
  return ERR_OK;
 8012e00:	2300      	movs	r3, #0
}
 8012e02:	4618      	mov	r0, r3
 8012e04:	3714      	adds	r7, #20
 8012e06:	46bd      	mov	sp, r7
 8012e08:	bd90      	pop	{r4, r7, pc}
 8012e0a:	bf00      	nop
 8012e0c:	0801edd0 	.word	0x0801edd0
 8012e10:	0801f2e0 	.word	0x0801f2e0
 8012e14:	0801ee14 	.word	0x0801ee14

08012e18 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 8012e18:	b580      	push	{r7, lr}
 8012e1a:	b084      	sub	sp, #16
 8012e1c:	af00      	add	r7, sp, #0
 8012e1e:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 8012e20:	e007      	b.n	8012e32 <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 8012e22:	687b      	ldr	r3, [r7, #4]
 8012e24:	681b      	ldr	r3, [r3, #0]
 8012e26:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 8012e28:	6878      	ldr	r0, [r7, #4]
 8012e2a:	f000 f80a 	bl	8012e42 <tcp_seg_free>
    seg = next;
 8012e2e:	68fb      	ldr	r3, [r7, #12]
 8012e30:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 8012e32:	687b      	ldr	r3, [r7, #4]
 8012e34:	2b00      	cmp	r3, #0
 8012e36:	d1f4      	bne.n	8012e22 <tcp_segs_free+0xa>
  }
}
 8012e38:	bf00      	nop
 8012e3a:	bf00      	nop
 8012e3c:	3710      	adds	r7, #16
 8012e3e:	46bd      	mov	sp, r7
 8012e40:	bd80      	pop	{r7, pc}

08012e42 <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 8012e42:	b580      	push	{r7, lr}
 8012e44:	b082      	sub	sp, #8
 8012e46:	af00      	add	r7, sp, #0
 8012e48:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 8012e4a:	687b      	ldr	r3, [r7, #4]
 8012e4c:	2b00      	cmp	r3, #0
 8012e4e:	d00c      	beq.n	8012e6a <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 8012e50:	687b      	ldr	r3, [r7, #4]
 8012e52:	685b      	ldr	r3, [r3, #4]
 8012e54:	2b00      	cmp	r3, #0
 8012e56:	d004      	beq.n	8012e62 <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 8012e58:	687b      	ldr	r3, [r7, #4]
 8012e5a:	685b      	ldr	r3, [r3, #4]
 8012e5c:	4618      	mov	r0, r3
 8012e5e:	f7fe fb89 	bl	8011574 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 8012e62:	6879      	ldr	r1, [r7, #4]
 8012e64:	2003      	movs	r0, #3
 8012e66:	f7fd fd0f 	bl	8010888 <memp_free>
  }
}
 8012e6a:	bf00      	nop
 8012e6c:	3708      	adds	r7, #8
 8012e6e:	46bd      	mov	sp, r7
 8012e70:	bd80      	pop	{r7, pc}
	...

08012e74 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 8012e74:	b580      	push	{r7, lr}
 8012e76:	b084      	sub	sp, #16
 8012e78:	af00      	add	r7, sp, #0
 8012e7a:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 8012e7c:	687b      	ldr	r3, [r7, #4]
 8012e7e:	2b00      	cmp	r3, #0
 8012e80:	d106      	bne.n	8012e90 <tcp_seg_copy+0x1c>
 8012e82:	4b0f      	ldr	r3, [pc, #60]	; (8012ec0 <tcp_seg_copy+0x4c>)
 8012e84:	f240 6282 	movw	r2, #1666	; 0x682
 8012e88:	490e      	ldr	r1, [pc, #56]	; (8012ec4 <tcp_seg_copy+0x50>)
 8012e8a:	480f      	ldr	r0, [pc, #60]	; (8012ec8 <tcp_seg_copy+0x54>)
 8012e8c:	f008 fa14 	bl	801b2b8 <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 8012e90:	2003      	movs	r0, #3
 8012e92:	f7fd fc89 	bl	80107a8 <memp_malloc>
 8012e96:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 8012e98:	68fb      	ldr	r3, [r7, #12]
 8012e9a:	2b00      	cmp	r3, #0
 8012e9c:	d101      	bne.n	8012ea2 <tcp_seg_copy+0x2e>
    return NULL;
 8012e9e:	2300      	movs	r3, #0
 8012ea0:	e00a      	b.n	8012eb8 <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 8012ea2:	2210      	movs	r2, #16
 8012ea4:	6879      	ldr	r1, [r7, #4]
 8012ea6:	68f8      	ldr	r0, [r7, #12]
 8012ea8:	f008 fc21 	bl	801b6ee <memcpy>
  pbuf_ref(cseg->p);
 8012eac:	68fb      	ldr	r3, [r7, #12]
 8012eae:	685b      	ldr	r3, [r3, #4]
 8012eb0:	4618      	mov	r0, r3
 8012eb2:	f7fe fbff 	bl	80116b4 <pbuf_ref>
  return cseg;
 8012eb6:	68fb      	ldr	r3, [r7, #12]
}
 8012eb8:	4618      	mov	r0, r3
 8012eba:	3710      	adds	r7, #16
 8012ebc:	46bd      	mov	sp, r7
 8012ebe:	bd80      	pop	{r7, pc}
 8012ec0:	0801edd0 	.word	0x0801edd0
 8012ec4:	0801f324 	.word	0x0801f324
 8012ec8:	0801ee14 	.word	0x0801ee14

08012ecc <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 8012ecc:	b580      	push	{r7, lr}
 8012ece:	b084      	sub	sp, #16
 8012ed0:	af00      	add	r7, sp, #0
 8012ed2:	60f8      	str	r0, [r7, #12]
 8012ed4:	60b9      	str	r1, [r7, #8]
 8012ed6:	607a      	str	r2, [r7, #4]
 8012ed8:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 8012eda:	68bb      	ldr	r3, [r7, #8]
 8012edc:	2b00      	cmp	r3, #0
 8012ede:	d109      	bne.n	8012ef4 <tcp_recv_null+0x28>
 8012ee0:	4b12      	ldr	r3, [pc, #72]	; (8012f2c <tcp_recv_null+0x60>)
 8012ee2:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 8012ee6:	4912      	ldr	r1, [pc, #72]	; (8012f30 <tcp_recv_null+0x64>)
 8012ee8:	4812      	ldr	r0, [pc, #72]	; (8012f34 <tcp_recv_null+0x68>)
 8012eea:	f008 f9e5 	bl	801b2b8 <iprintf>
 8012eee:	f06f 030f 	mvn.w	r3, #15
 8012ef2:	e016      	b.n	8012f22 <tcp_recv_null+0x56>

  if (p != NULL) {
 8012ef4:	687b      	ldr	r3, [r7, #4]
 8012ef6:	2b00      	cmp	r3, #0
 8012ef8:	d009      	beq.n	8012f0e <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 8012efa:	687b      	ldr	r3, [r7, #4]
 8012efc:	891b      	ldrh	r3, [r3, #8]
 8012efe:	4619      	mov	r1, r3
 8012f00:	68b8      	ldr	r0, [r7, #8]
 8012f02:	f7ff f9b7 	bl	8012274 <tcp_recved>
    pbuf_free(p);
 8012f06:	6878      	ldr	r0, [r7, #4]
 8012f08:	f7fe fb34 	bl	8011574 <pbuf_free>
 8012f0c:	e008      	b.n	8012f20 <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 8012f0e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8012f12:	2b00      	cmp	r3, #0
 8012f14:	d104      	bne.n	8012f20 <tcp_recv_null+0x54>
    return tcp_close(pcb);
 8012f16:	68b8      	ldr	r0, [r7, #8]
 8012f18:	f7ff f85c 	bl	8011fd4 <tcp_close>
 8012f1c:	4603      	mov	r3, r0
 8012f1e:	e000      	b.n	8012f22 <tcp_recv_null+0x56>
  }
  return ERR_OK;
 8012f20:	2300      	movs	r3, #0
}
 8012f22:	4618      	mov	r0, r3
 8012f24:	3710      	adds	r7, #16
 8012f26:	46bd      	mov	sp, r7
 8012f28:	bd80      	pop	{r7, pc}
 8012f2a:	bf00      	nop
 8012f2c:	0801edd0 	.word	0x0801edd0
 8012f30:	0801f340 	.word	0x0801f340
 8012f34:	0801ee14 	.word	0x0801ee14

08012f38 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 8012f38:	b580      	push	{r7, lr}
 8012f3a:	b086      	sub	sp, #24
 8012f3c:	af00      	add	r7, sp, #0
 8012f3e:	4603      	mov	r3, r0
 8012f40:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 8012f42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8012f46:	2b00      	cmp	r3, #0
 8012f48:	db01      	blt.n	8012f4e <tcp_kill_prio+0x16>
 8012f4a:	79fb      	ldrb	r3, [r7, #7]
 8012f4c:	e000      	b.n	8012f50 <tcp_kill_prio+0x18>
 8012f4e:	237f      	movs	r3, #127	; 0x7f
 8012f50:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 8012f52:	7afb      	ldrb	r3, [r7, #11]
 8012f54:	2b00      	cmp	r3, #0
 8012f56:	d034      	beq.n	8012fc2 <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 8012f58:	7afb      	ldrb	r3, [r7, #11]
 8012f5a:	3b01      	subs	r3, #1
 8012f5c:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 8012f5e:	2300      	movs	r3, #0
 8012f60:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8012f62:	2300      	movs	r3, #0
 8012f64:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8012f66:	4b19      	ldr	r3, [pc, #100]	; (8012fcc <tcp_kill_prio+0x94>)
 8012f68:	681b      	ldr	r3, [r3, #0]
 8012f6a:	617b      	str	r3, [r7, #20]
 8012f6c:	e01f      	b.n	8012fae <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 8012f6e:	697b      	ldr	r3, [r7, #20]
 8012f70:	7d5b      	ldrb	r3, [r3, #21]
 8012f72:	7afa      	ldrb	r2, [r7, #11]
 8012f74:	429a      	cmp	r2, r3
 8012f76:	d80c      	bhi.n	8012f92 <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8012f78:	697b      	ldr	r3, [r7, #20]
 8012f7a:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 8012f7c:	7afa      	ldrb	r2, [r7, #11]
 8012f7e:	429a      	cmp	r2, r3
 8012f80:	d112      	bne.n	8012fa8 <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8012f82:	4b13      	ldr	r3, [pc, #76]	; (8012fd0 <tcp_kill_prio+0x98>)
 8012f84:	681a      	ldr	r2, [r3, #0]
 8012f86:	697b      	ldr	r3, [r7, #20]
 8012f88:	6a1b      	ldr	r3, [r3, #32]
 8012f8a:	1ad3      	subs	r3, r2, r3
 8012f8c:	68fa      	ldr	r2, [r7, #12]
 8012f8e:	429a      	cmp	r2, r3
 8012f90:	d80a      	bhi.n	8012fa8 <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 8012f92:	4b0f      	ldr	r3, [pc, #60]	; (8012fd0 <tcp_kill_prio+0x98>)
 8012f94:	681a      	ldr	r2, [r3, #0]
 8012f96:	697b      	ldr	r3, [r7, #20]
 8012f98:	6a1b      	ldr	r3, [r3, #32]
 8012f9a:	1ad3      	subs	r3, r2, r3
 8012f9c:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 8012f9e:	697b      	ldr	r3, [r7, #20]
 8012fa0:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 8012fa2:	697b      	ldr	r3, [r7, #20]
 8012fa4:	7d5b      	ldrb	r3, [r3, #21]
 8012fa6:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8012fa8:	697b      	ldr	r3, [r7, #20]
 8012faa:	68db      	ldr	r3, [r3, #12]
 8012fac:	617b      	str	r3, [r7, #20]
 8012fae:	697b      	ldr	r3, [r7, #20]
 8012fb0:	2b00      	cmp	r3, #0
 8012fb2:	d1dc      	bne.n	8012f6e <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 8012fb4:	693b      	ldr	r3, [r7, #16]
 8012fb6:	2b00      	cmp	r3, #0
 8012fb8:	d004      	beq.n	8012fc4 <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 8012fba:	6938      	ldr	r0, [r7, #16]
 8012fbc:	f7ff f8f4 	bl	80121a8 <tcp_abort>
 8012fc0:	e000      	b.n	8012fc4 <tcp_kill_prio+0x8c>
    return;
 8012fc2:	bf00      	nop
  }
}
 8012fc4:	3718      	adds	r7, #24
 8012fc6:	46bd      	mov	sp, r7
 8012fc8:	bd80      	pop	{r7, pc}
 8012fca:	bf00      	nop
 8012fcc:	200071b8 	.word	0x200071b8
 8012fd0:	200071ac 	.word	0x200071ac

08012fd4 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 8012fd4:	b580      	push	{r7, lr}
 8012fd6:	b086      	sub	sp, #24
 8012fd8:	af00      	add	r7, sp, #0
 8012fda:	4603      	mov	r3, r0
 8012fdc:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 8012fde:	79fb      	ldrb	r3, [r7, #7]
 8012fe0:	2b08      	cmp	r3, #8
 8012fe2:	d009      	beq.n	8012ff8 <tcp_kill_state+0x24>
 8012fe4:	79fb      	ldrb	r3, [r7, #7]
 8012fe6:	2b09      	cmp	r3, #9
 8012fe8:	d006      	beq.n	8012ff8 <tcp_kill_state+0x24>
 8012fea:	4b1a      	ldr	r3, [pc, #104]	; (8013054 <tcp_kill_state+0x80>)
 8012fec:	f240 62dd 	movw	r2, #1757	; 0x6dd
 8012ff0:	4919      	ldr	r1, [pc, #100]	; (8013058 <tcp_kill_state+0x84>)
 8012ff2:	481a      	ldr	r0, [pc, #104]	; (801305c <tcp_kill_state+0x88>)
 8012ff4:	f008 f960 	bl	801b2b8 <iprintf>

  inactivity = 0;
 8012ff8:	2300      	movs	r3, #0
 8012ffa:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8012ffc:	2300      	movs	r3, #0
 8012ffe:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8013000:	4b17      	ldr	r3, [pc, #92]	; (8013060 <tcp_kill_state+0x8c>)
 8013002:	681b      	ldr	r3, [r3, #0]
 8013004:	617b      	str	r3, [r7, #20]
 8013006:	e017      	b.n	8013038 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 8013008:	697b      	ldr	r3, [r7, #20]
 801300a:	7d1b      	ldrb	r3, [r3, #20]
 801300c:	79fa      	ldrb	r2, [r7, #7]
 801300e:	429a      	cmp	r2, r3
 8013010:	d10f      	bne.n	8013032 <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8013012:	4b14      	ldr	r3, [pc, #80]	; (8013064 <tcp_kill_state+0x90>)
 8013014:	681a      	ldr	r2, [r3, #0]
 8013016:	697b      	ldr	r3, [r7, #20]
 8013018:	6a1b      	ldr	r3, [r3, #32]
 801301a:	1ad3      	subs	r3, r2, r3
 801301c:	68fa      	ldr	r2, [r7, #12]
 801301e:	429a      	cmp	r2, r3
 8013020:	d807      	bhi.n	8013032 <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 8013022:	4b10      	ldr	r3, [pc, #64]	; (8013064 <tcp_kill_state+0x90>)
 8013024:	681a      	ldr	r2, [r3, #0]
 8013026:	697b      	ldr	r3, [r7, #20]
 8013028:	6a1b      	ldr	r3, [r3, #32]
 801302a:	1ad3      	subs	r3, r2, r3
 801302c:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 801302e:	697b      	ldr	r3, [r7, #20]
 8013030:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8013032:	697b      	ldr	r3, [r7, #20]
 8013034:	68db      	ldr	r3, [r3, #12]
 8013036:	617b      	str	r3, [r7, #20]
 8013038:	697b      	ldr	r3, [r7, #20]
 801303a:	2b00      	cmp	r3, #0
 801303c:	d1e4      	bne.n	8013008 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 801303e:	693b      	ldr	r3, [r7, #16]
 8013040:	2b00      	cmp	r3, #0
 8013042:	d003      	beq.n	801304c <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 8013044:	2100      	movs	r1, #0
 8013046:	6938      	ldr	r0, [r7, #16]
 8013048:	f7fe fff0 	bl	801202c <tcp_abandon>
  }
}
 801304c:	bf00      	nop
 801304e:	3718      	adds	r7, #24
 8013050:	46bd      	mov	sp, r7
 8013052:	bd80      	pop	{r7, pc}
 8013054:	0801edd0 	.word	0x0801edd0
 8013058:	0801f35c 	.word	0x0801f35c
 801305c:	0801ee14 	.word	0x0801ee14
 8013060:	200071b8 	.word	0x200071b8
 8013064:	200071ac 	.word	0x200071ac

08013068 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 8013068:	b580      	push	{r7, lr}
 801306a:	b084      	sub	sp, #16
 801306c:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 801306e:	2300      	movs	r3, #0
 8013070:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 8013072:	2300      	movs	r3, #0
 8013074:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8013076:	4b12      	ldr	r3, [pc, #72]	; (80130c0 <tcp_kill_timewait+0x58>)
 8013078:	681b      	ldr	r3, [r3, #0]
 801307a:	60fb      	str	r3, [r7, #12]
 801307c:	e012      	b.n	80130a4 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 801307e:	4b11      	ldr	r3, [pc, #68]	; (80130c4 <tcp_kill_timewait+0x5c>)
 8013080:	681a      	ldr	r2, [r3, #0]
 8013082:	68fb      	ldr	r3, [r7, #12]
 8013084:	6a1b      	ldr	r3, [r3, #32]
 8013086:	1ad3      	subs	r3, r2, r3
 8013088:	687a      	ldr	r2, [r7, #4]
 801308a:	429a      	cmp	r2, r3
 801308c:	d807      	bhi.n	801309e <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 801308e:	4b0d      	ldr	r3, [pc, #52]	; (80130c4 <tcp_kill_timewait+0x5c>)
 8013090:	681a      	ldr	r2, [r3, #0]
 8013092:	68fb      	ldr	r3, [r7, #12]
 8013094:	6a1b      	ldr	r3, [r3, #32]
 8013096:	1ad3      	subs	r3, r2, r3
 8013098:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 801309a:	68fb      	ldr	r3, [r7, #12]
 801309c:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 801309e:	68fb      	ldr	r3, [r7, #12]
 80130a0:	68db      	ldr	r3, [r3, #12]
 80130a2:	60fb      	str	r3, [r7, #12]
 80130a4:	68fb      	ldr	r3, [r7, #12]
 80130a6:	2b00      	cmp	r3, #0
 80130a8:	d1e9      	bne.n	801307e <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 80130aa:	68bb      	ldr	r3, [r7, #8]
 80130ac:	2b00      	cmp	r3, #0
 80130ae:	d002      	beq.n	80130b6 <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 80130b0:	68b8      	ldr	r0, [r7, #8]
 80130b2:	f7ff f879 	bl	80121a8 <tcp_abort>
  }
}
 80130b6:	bf00      	nop
 80130b8:	3710      	adds	r7, #16
 80130ba:	46bd      	mov	sp, r7
 80130bc:	bd80      	pop	{r7, pc}
 80130be:	bf00      	nop
 80130c0:	200071bc 	.word	0x200071bc
 80130c4:	200071ac 	.word	0x200071ac

080130c8 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 80130c8:	b580      	push	{r7, lr}
 80130ca:	b082      	sub	sp, #8
 80130cc:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 80130ce:	4b10      	ldr	r3, [pc, #64]	; (8013110 <tcp_handle_closepend+0x48>)
 80130d0:	681b      	ldr	r3, [r3, #0]
 80130d2:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 80130d4:	e014      	b.n	8013100 <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 80130d6:	687b      	ldr	r3, [r7, #4]
 80130d8:	68db      	ldr	r3, [r3, #12]
 80130da:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 80130dc:	687b      	ldr	r3, [r7, #4]
 80130de:	8b5b      	ldrh	r3, [r3, #26]
 80130e0:	f003 0308 	and.w	r3, r3, #8
 80130e4:	2b00      	cmp	r3, #0
 80130e6:	d009      	beq.n	80130fc <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 80130e8:	687b      	ldr	r3, [r7, #4]
 80130ea:	8b5b      	ldrh	r3, [r3, #26]
 80130ec:	f023 0308 	bic.w	r3, r3, #8
 80130f0:	b29a      	uxth	r2, r3
 80130f2:	687b      	ldr	r3, [r7, #4]
 80130f4:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 80130f6:	6878      	ldr	r0, [r7, #4]
 80130f8:	f7fe ff02 	bl	8011f00 <tcp_close_shutdown_fin>
    }
    pcb = next;
 80130fc:	683b      	ldr	r3, [r7, #0]
 80130fe:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 8013100:	687b      	ldr	r3, [r7, #4]
 8013102:	2b00      	cmp	r3, #0
 8013104:	d1e7      	bne.n	80130d6 <tcp_handle_closepend+0xe>
  }
}
 8013106:	bf00      	nop
 8013108:	bf00      	nop
 801310a:	3708      	adds	r7, #8
 801310c:	46bd      	mov	sp, r7
 801310e:	bd80      	pop	{r7, pc}
 8013110:	200071b8 	.word	0x200071b8

08013114 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 8013114:	b580      	push	{r7, lr}
 8013116:	b084      	sub	sp, #16
 8013118:	af00      	add	r7, sp, #0
 801311a:	4603      	mov	r3, r0
 801311c:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 801311e:	2001      	movs	r0, #1
 8013120:	f7fd fb42 	bl	80107a8 <memp_malloc>
 8013124:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 8013126:	68fb      	ldr	r3, [r7, #12]
 8013128:	2b00      	cmp	r3, #0
 801312a:	d126      	bne.n	801317a <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 801312c:	f7ff ffcc 	bl	80130c8 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 8013130:	f7ff ff9a 	bl	8013068 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8013134:	2001      	movs	r0, #1
 8013136:	f7fd fb37 	bl	80107a8 <memp_malloc>
 801313a:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 801313c:	68fb      	ldr	r3, [r7, #12]
 801313e:	2b00      	cmp	r3, #0
 8013140:	d11b      	bne.n	801317a <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 8013142:	2009      	movs	r0, #9
 8013144:	f7ff ff46 	bl	8012fd4 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8013148:	2001      	movs	r0, #1
 801314a:	f7fd fb2d 	bl	80107a8 <memp_malloc>
 801314e:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 8013150:	68fb      	ldr	r3, [r7, #12]
 8013152:	2b00      	cmp	r3, #0
 8013154:	d111      	bne.n	801317a <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 8013156:	2008      	movs	r0, #8
 8013158:	f7ff ff3c 	bl	8012fd4 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 801315c:	2001      	movs	r0, #1
 801315e:	f7fd fb23 	bl	80107a8 <memp_malloc>
 8013162:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 8013164:	68fb      	ldr	r3, [r7, #12]
 8013166:	2b00      	cmp	r3, #0
 8013168:	d107      	bne.n	801317a <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 801316a:	79fb      	ldrb	r3, [r7, #7]
 801316c:	4618      	mov	r0, r3
 801316e:	f7ff fee3 	bl	8012f38 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8013172:	2001      	movs	r0, #1
 8013174:	f7fd fb18 	bl	80107a8 <memp_malloc>
 8013178:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 801317a:	68fb      	ldr	r3, [r7, #12]
 801317c:	2b00      	cmp	r3, #0
 801317e:	d03f      	beq.n	8013200 <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 8013180:	229c      	movs	r2, #156	; 0x9c
 8013182:	2100      	movs	r1, #0
 8013184:	68f8      	ldr	r0, [r7, #12]
 8013186:	f008 fa27 	bl	801b5d8 <memset>
    pcb->prio = prio;
 801318a:	68fb      	ldr	r3, [r7, #12]
 801318c:	79fa      	ldrb	r2, [r7, #7]
 801318e:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 8013190:	68fb      	ldr	r3, [r7, #12]
 8013192:	f241 62d0 	movw	r2, #5840	; 0x16d0
 8013196:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 801319a:	68fb      	ldr	r3, [r7, #12]
 801319c:	f241 62d0 	movw	r2, #5840	; 0x16d0
 80131a0:	855a      	strh	r2, [r3, #42]	; 0x2a
 80131a2:	68fb      	ldr	r3, [r7, #12]
 80131a4:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 80131a6:	68fb      	ldr	r3, [r7, #12]
 80131a8:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 80131aa:	68fb      	ldr	r3, [r7, #12]
 80131ac:	22ff      	movs	r2, #255	; 0xff
 80131ae:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 80131b0:	68fb      	ldr	r3, [r7, #12]
 80131b2:	f44f 7206 	mov.w	r2, #536	; 0x218
 80131b6:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 80131b8:	68fb      	ldr	r3, [r7, #12]
 80131ba:	2206      	movs	r2, #6
 80131bc:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 80131c0:	68fb      	ldr	r3, [r7, #12]
 80131c2:	2206      	movs	r2, #6
 80131c4:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 80131c6:	68fb      	ldr	r3, [r7, #12]
 80131c8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80131cc:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 80131ce:	68fb      	ldr	r3, [r7, #12]
 80131d0:	2201      	movs	r2, #1
 80131d2:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 80131d6:	4b0d      	ldr	r3, [pc, #52]	; (801320c <tcp_alloc+0xf8>)
 80131d8:	681a      	ldr	r2, [r3, #0]
 80131da:	68fb      	ldr	r3, [r7, #12]
 80131dc:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 80131de:	4b0c      	ldr	r3, [pc, #48]	; (8013210 <tcp_alloc+0xfc>)
 80131e0:	781a      	ldrb	r2, [r3, #0]
 80131e2:	68fb      	ldr	r3, [r7, #12]
 80131e4:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 80131e6:	68fb      	ldr	r3, [r7, #12]
 80131e8:	f241 62d0 	movw	r2, #5840	; 0x16d0
 80131ec:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 80131f0:	68fb      	ldr	r3, [r7, #12]
 80131f2:	4a08      	ldr	r2, [pc, #32]	; (8013214 <tcp_alloc+0x100>)
 80131f4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 80131f8:	68fb      	ldr	r3, [r7, #12]
 80131fa:	4a07      	ldr	r2, [pc, #28]	; (8013218 <tcp_alloc+0x104>)
 80131fc:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 8013200:	68fb      	ldr	r3, [r7, #12]
}
 8013202:	4618      	mov	r0, r3
 8013204:	3710      	adds	r7, #16
 8013206:	46bd      	mov	sp, r7
 8013208:	bd80      	pop	{r7, pc}
 801320a:	bf00      	nop
 801320c:	200071ac 	.word	0x200071ac
 8013210:	200071c2 	.word	0x200071c2
 8013214:	08012ecd 	.word	0x08012ecd
 8013218:	006ddd00 	.word	0x006ddd00

0801321c <tcp_new>:
 *
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_new(void)
{
 801321c:	b580      	push	{r7, lr}
 801321e:	af00      	add	r7, sp, #0
  return tcp_alloc(TCP_PRIO_NORMAL);
 8013220:	2040      	movs	r0, #64	; 0x40
 8013222:	f7ff ff77 	bl	8013114 <tcp_alloc>
 8013226:	4603      	mov	r3, r0
}
 8013228:	4618      	mov	r0, r3
 801322a:	bd80      	pop	{r7, pc}

0801322c <tcp_arg>:
 * @param pcb tcp_pcb to set the callback argument
 * @param arg void pointer argument to pass to callback functions
 */
void
tcp_arg(struct tcp_pcb *pcb, void *arg)
{
 801322c:	b480      	push	{r7}
 801322e:	b083      	sub	sp, #12
 8013230:	af00      	add	r7, sp, #0
 8013232:	6078      	str	r0, [r7, #4]
 8013234:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  /* This function is allowed to be called for both listen pcbs and
     connection pcbs. */
  if (pcb != NULL) {
 8013236:	687b      	ldr	r3, [r7, #4]
 8013238:	2b00      	cmp	r3, #0
 801323a:	d002      	beq.n	8013242 <tcp_arg+0x16>
    pcb->callback_arg = arg;
 801323c:	687b      	ldr	r3, [r7, #4]
 801323e:	683a      	ldr	r2, [r7, #0]
 8013240:	611a      	str	r2, [r3, #16]
  }
}
 8013242:	bf00      	nop
 8013244:	370c      	adds	r7, #12
 8013246:	46bd      	mov	sp, r7
 8013248:	f85d 7b04 	ldr.w	r7, [sp], #4
 801324c:	4770      	bx	lr
	...

08013250 <tcp_recv>:
 * @param pcb tcp_pcb to set the recv callback
 * @param recv callback function to call for this pcb when data is received
 */
void
tcp_recv(struct tcp_pcb *pcb, tcp_recv_fn recv)
{
 8013250:	b580      	push	{r7, lr}
 8013252:	b082      	sub	sp, #8
 8013254:	af00      	add	r7, sp, #0
 8013256:	6078      	str	r0, [r7, #4]
 8013258:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 801325a:	687b      	ldr	r3, [r7, #4]
 801325c:	2b00      	cmp	r3, #0
 801325e:	d00e      	beq.n	801327e <tcp_recv+0x2e>
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 8013260:	687b      	ldr	r3, [r7, #4]
 8013262:	7d1b      	ldrb	r3, [r3, #20]
 8013264:	2b01      	cmp	r3, #1
 8013266:	d106      	bne.n	8013276 <tcp_recv+0x26>
 8013268:	4b07      	ldr	r3, [pc, #28]	; (8013288 <tcp_recv+0x38>)
 801326a:	f240 72df 	movw	r2, #2015	; 0x7df
 801326e:	4907      	ldr	r1, [pc, #28]	; (801328c <tcp_recv+0x3c>)
 8013270:	4807      	ldr	r0, [pc, #28]	; (8013290 <tcp_recv+0x40>)
 8013272:	f008 f821 	bl	801b2b8 <iprintf>
    pcb->recv = recv;
 8013276:	687b      	ldr	r3, [r7, #4]
 8013278:	683a      	ldr	r2, [r7, #0]
 801327a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }
}
 801327e:	bf00      	nop
 8013280:	3708      	adds	r7, #8
 8013282:	46bd      	mov	sp, r7
 8013284:	bd80      	pop	{r7, pc}
 8013286:	bf00      	nop
 8013288:	0801edd0 	.word	0x0801edd0
 801328c:	0801f36c 	.word	0x0801f36c
 8013290:	0801ee14 	.word	0x0801ee14

08013294 <tcp_sent>:
 * @param pcb tcp_pcb to set the sent callback
 * @param sent callback function to call for this pcb when data is successfully sent
 */
void
tcp_sent(struct tcp_pcb *pcb, tcp_sent_fn sent)
{
 8013294:	b580      	push	{r7, lr}
 8013296:	b082      	sub	sp, #8
 8013298:	af00      	add	r7, sp, #0
 801329a:	6078      	str	r0, [r7, #4]
 801329c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 801329e:	687b      	ldr	r3, [r7, #4]
 80132a0:	2b00      	cmp	r3, #0
 80132a2:	d00e      	beq.n	80132c2 <tcp_sent+0x2e>
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
 80132a4:	687b      	ldr	r3, [r7, #4]
 80132a6:	7d1b      	ldrb	r3, [r3, #20]
 80132a8:	2b01      	cmp	r3, #1
 80132aa:	d106      	bne.n	80132ba <tcp_sent+0x26>
 80132ac:	4b07      	ldr	r3, [pc, #28]	; (80132cc <tcp_sent+0x38>)
 80132ae:	f240 72f3 	movw	r2, #2035	; 0x7f3
 80132b2:	4907      	ldr	r1, [pc, #28]	; (80132d0 <tcp_sent+0x3c>)
 80132b4:	4807      	ldr	r0, [pc, #28]	; (80132d4 <tcp_sent+0x40>)
 80132b6:	f007 ffff 	bl	801b2b8 <iprintf>
    pcb->sent = sent;
 80132ba:	687b      	ldr	r3, [r7, #4]
 80132bc:	683a      	ldr	r2, [r7, #0]
 80132be:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  }
}
 80132c2:	bf00      	nop
 80132c4:	3708      	adds	r7, #8
 80132c6:	46bd      	mov	sp, r7
 80132c8:	bd80      	pop	{r7, pc}
 80132ca:	bf00      	nop
 80132cc:	0801edd0 	.word	0x0801edd0
 80132d0:	0801f394 	.word	0x0801f394
 80132d4:	0801ee14 	.word	0x0801ee14

080132d8 <tcp_err>:
 * @param err callback function to call for this pcb when a fatal error
 *        has occurred on the connection
 */
void
tcp_err(struct tcp_pcb *pcb, tcp_err_fn err)
{
 80132d8:	b580      	push	{r7, lr}
 80132da:	b082      	sub	sp, #8
 80132dc:	af00      	add	r7, sp, #0
 80132de:	6078      	str	r0, [r7, #4]
 80132e0:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 80132e2:	687b      	ldr	r3, [r7, #4]
 80132e4:	2b00      	cmp	r3, #0
 80132e6:	d00e      	beq.n	8013306 <tcp_err+0x2e>
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
 80132e8:	687b      	ldr	r3, [r7, #4]
 80132ea:	7d1b      	ldrb	r3, [r3, #20]
 80132ec:	2b01      	cmp	r3, #1
 80132ee:	d106      	bne.n	80132fe <tcp_err+0x26>
 80132f0:	4b07      	ldr	r3, [pc, #28]	; (8013310 <tcp_err+0x38>)
 80132f2:	f640 020d 	movw	r2, #2061	; 0x80d
 80132f6:	4907      	ldr	r1, [pc, #28]	; (8013314 <tcp_err+0x3c>)
 80132f8:	4807      	ldr	r0, [pc, #28]	; (8013318 <tcp_err+0x40>)
 80132fa:	f007 ffdd 	bl	801b2b8 <iprintf>
    pcb->errf = err;
 80132fe:	687b      	ldr	r3, [r7, #4]
 8013300:	683a      	ldr	r2, [r7, #0]
 8013302:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  }
}
 8013306:	bf00      	nop
 8013308:	3708      	adds	r7, #8
 801330a:	46bd      	mov	sp, r7
 801330c:	bd80      	pop	{r7, pc}
 801330e:	bf00      	nop
 8013310:	0801edd0 	.word	0x0801edd0
 8013314:	0801f3bc 	.word	0x0801f3bc
 8013318:	0801ee14 	.word	0x0801ee14

0801331c <tcp_poll>:
 * the application may use the polling functionality to call tcp_write()
 * again when the connection has been idle for a while.
 */
void
tcp_poll(struct tcp_pcb *pcb, tcp_poll_fn poll, u8_t interval)
{
 801331c:	b580      	push	{r7, lr}
 801331e:	b084      	sub	sp, #16
 8013320:	af00      	add	r7, sp, #0
 8013322:	60f8      	str	r0, [r7, #12]
 8013324:	60b9      	str	r1, [r7, #8]
 8013326:	4613      	mov	r3, r2
 8013328:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_poll: invalid pcb", pcb != NULL, return);
 801332a:	68fb      	ldr	r3, [r7, #12]
 801332c:	2b00      	cmp	r3, #0
 801332e:	d107      	bne.n	8013340 <tcp_poll+0x24>
 8013330:	4b0e      	ldr	r3, [pc, #56]	; (801336c <tcp_poll+0x50>)
 8013332:	f640 023d 	movw	r2, #2109	; 0x83d
 8013336:	490e      	ldr	r1, [pc, #56]	; (8013370 <tcp_poll+0x54>)
 8013338:	480e      	ldr	r0, [pc, #56]	; (8013374 <tcp_poll+0x58>)
 801333a:	f007 ffbd 	bl	801b2b8 <iprintf>
 801333e:	e011      	b.n	8013364 <tcp_poll+0x48>
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 8013340:	68fb      	ldr	r3, [r7, #12]
 8013342:	7d1b      	ldrb	r3, [r3, #20]
 8013344:	2b01      	cmp	r3, #1
 8013346:	d106      	bne.n	8013356 <tcp_poll+0x3a>
 8013348:	4b08      	ldr	r3, [pc, #32]	; (801336c <tcp_poll+0x50>)
 801334a:	f640 023e 	movw	r2, #2110	; 0x83e
 801334e:	490a      	ldr	r1, [pc, #40]	; (8013378 <tcp_poll+0x5c>)
 8013350:	4808      	ldr	r0, [pc, #32]	; (8013374 <tcp_poll+0x58>)
 8013352:	f007 ffb1 	bl	801b2b8 <iprintf>

#if LWIP_CALLBACK_API
  pcb->poll = poll;
 8013356:	68fb      	ldr	r3, [r7, #12]
 8013358:	68ba      	ldr	r2, [r7, #8]
 801335a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(poll);
#endif /* LWIP_CALLBACK_API */
  pcb->pollinterval = interval;
 801335e:	68fb      	ldr	r3, [r7, #12]
 8013360:	79fa      	ldrb	r2, [r7, #7]
 8013362:	775a      	strb	r2, [r3, #29]
}
 8013364:	3710      	adds	r7, #16
 8013366:	46bd      	mov	sp, r7
 8013368:	bd80      	pop	{r7, pc}
 801336a:	bf00      	nop
 801336c:	0801edd0 	.word	0x0801edd0
 8013370:	0801f3e4 	.word	0x0801f3e4
 8013374:	0801ee14 	.word	0x0801ee14
 8013378:	0801f3fc 	.word	0x0801f3fc

0801337c <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 801337c:	b580      	push	{r7, lr}
 801337e:	b082      	sub	sp, #8
 8013380:	af00      	add	r7, sp, #0
 8013382:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 8013384:	687b      	ldr	r3, [r7, #4]
 8013386:	2b00      	cmp	r3, #0
 8013388:	d107      	bne.n	801339a <tcp_pcb_purge+0x1e>
 801338a:	4b21      	ldr	r3, [pc, #132]	; (8013410 <tcp_pcb_purge+0x94>)
 801338c:	f640 0251 	movw	r2, #2129	; 0x851
 8013390:	4920      	ldr	r1, [pc, #128]	; (8013414 <tcp_pcb_purge+0x98>)
 8013392:	4821      	ldr	r0, [pc, #132]	; (8013418 <tcp_pcb_purge+0x9c>)
 8013394:	f007 ff90 	bl	801b2b8 <iprintf>
 8013398:	e037      	b.n	801340a <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 801339a:	687b      	ldr	r3, [r7, #4]
 801339c:	7d1b      	ldrb	r3, [r3, #20]
 801339e:	2b00      	cmp	r3, #0
 80133a0:	d033      	beq.n	801340a <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 80133a2:	687b      	ldr	r3, [r7, #4]
 80133a4:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 80133a6:	2b0a      	cmp	r3, #10
 80133a8:	d02f      	beq.n	801340a <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 80133aa:	687b      	ldr	r3, [r7, #4]
 80133ac:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 80133ae:	2b01      	cmp	r3, #1
 80133b0:	d02b      	beq.n	801340a <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 80133b2:	687b      	ldr	r3, [r7, #4]
 80133b4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80133b6:	2b00      	cmp	r3, #0
 80133b8:	d007      	beq.n	80133ca <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 80133ba:	687b      	ldr	r3, [r7, #4]
 80133bc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80133be:	4618      	mov	r0, r3
 80133c0:	f7fe f8d8 	bl	8011574 <pbuf_free>
      pcb->refused_data = NULL;
 80133c4:	687b      	ldr	r3, [r7, #4]
 80133c6:	2200      	movs	r2, #0
 80133c8:	679a      	str	r2, [r3, #120]	; 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 80133ca:	687b      	ldr	r3, [r7, #4]
 80133cc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80133ce:	2b00      	cmp	r3, #0
 80133d0:	d002      	beq.n	80133d8 <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 80133d2:	6878      	ldr	r0, [r7, #4]
 80133d4:	f000 f986 	bl	80136e4 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 80133d8:	687b      	ldr	r3, [r7, #4]
 80133da:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80133de:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 80133e0:	687b      	ldr	r3, [r7, #4]
 80133e2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80133e4:	4618      	mov	r0, r3
 80133e6:	f7ff fd17 	bl	8012e18 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 80133ea:	687b      	ldr	r3, [r7, #4]
 80133ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80133ee:	4618      	mov	r0, r3
 80133f0:	f7ff fd12 	bl	8012e18 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 80133f4:	687b      	ldr	r3, [r7, #4]
 80133f6:	2200      	movs	r2, #0
 80133f8:	66da      	str	r2, [r3, #108]	; 0x6c
 80133fa:	687b      	ldr	r3, [r7, #4]
 80133fc:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80133fe:	687b      	ldr	r3, [r7, #4]
 8013400:	671a      	str	r2, [r3, #112]	; 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 8013402:	687b      	ldr	r3, [r7, #4]
 8013404:	2200      	movs	r2, #0
 8013406:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */
  }
}
 801340a:	3708      	adds	r7, #8
 801340c:	46bd      	mov	sp, r7
 801340e:	bd80      	pop	{r7, pc}
 8013410:	0801edd0 	.word	0x0801edd0
 8013414:	0801f41c 	.word	0x0801f41c
 8013418:	0801ee14 	.word	0x0801ee14

0801341c <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 801341c:	b580      	push	{r7, lr}
 801341e:	b084      	sub	sp, #16
 8013420:	af00      	add	r7, sp, #0
 8013422:	6078      	str	r0, [r7, #4]
 8013424:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 8013426:	683b      	ldr	r3, [r7, #0]
 8013428:	2b00      	cmp	r3, #0
 801342a:	d106      	bne.n	801343a <tcp_pcb_remove+0x1e>
 801342c:	4b3e      	ldr	r3, [pc, #248]	; (8013528 <tcp_pcb_remove+0x10c>)
 801342e:	f640 0283 	movw	r2, #2179	; 0x883
 8013432:	493e      	ldr	r1, [pc, #248]	; (801352c <tcp_pcb_remove+0x110>)
 8013434:	483e      	ldr	r0, [pc, #248]	; (8013530 <tcp_pcb_remove+0x114>)
 8013436:	f007 ff3f 	bl	801b2b8 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 801343a:	687b      	ldr	r3, [r7, #4]
 801343c:	2b00      	cmp	r3, #0
 801343e:	d106      	bne.n	801344e <tcp_pcb_remove+0x32>
 8013440:	4b39      	ldr	r3, [pc, #228]	; (8013528 <tcp_pcb_remove+0x10c>)
 8013442:	f640 0284 	movw	r2, #2180	; 0x884
 8013446:	493b      	ldr	r1, [pc, #236]	; (8013534 <tcp_pcb_remove+0x118>)
 8013448:	4839      	ldr	r0, [pc, #228]	; (8013530 <tcp_pcb_remove+0x114>)
 801344a:	f007 ff35 	bl	801b2b8 <iprintf>

  TCP_RMV(pcblist, pcb);
 801344e:	687b      	ldr	r3, [r7, #4]
 8013450:	681b      	ldr	r3, [r3, #0]
 8013452:	683a      	ldr	r2, [r7, #0]
 8013454:	429a      	cmp	r2, r3
 8013456:	d105      	bne.n	8013464 <tcp_pcb_remove+0x48>
 8013458:	687b      	ldr	r3, [r7, #4]
 801345a:	681b      	ldr	r3, [r3, #0]
 801345c:	68da      	ldr	r2, [r3, #12]
 801345e:	687b      	ldr	r3, [r7, #4]
 8013460:	601a      	str	r2, [r3, #0]
 8013462:	e013      	b.n	801348c <tcp_pcb_remove+0x70>
 8013464:	687b      	ldr	r3, [r7, #4]
 8013466:	681b      	ldr	r3, [r3, #0]
 8013468:	60fb      	str	r3, [r7, #12]
 801346a:	e00c      	b.n	8013486 <tcp_pcb_remove+0x6a>
 801346c:	68fb      	ldr	r3, [r7, #12]
 801346e:	68db      	ldr	r3, [r3, #12]
 8013470:	683a      	ldr	r2, [r7, #0]
 8013472:	429a      	cmp	r2, r3
 8013474:	d104      	bne.n	8013480 <tcp_pcb_remove+0x64>
 8013476:	683b      	ldr	r3, [r7, #0]
 8013478:	68da      	ldr	r2, [r3, #12]
 801347a:	68fb      	ldr	r3, [r7, #12]
 801347c:	60da      	str	r2, [r3, #12]
 801347e:	e005      	b.n	801348c <tcp_pcb_remove+0x70>
 8013480:	68fb      	ldr	r3, [r7, #12]
 8013482:	68db      	ldr	r3, [r3, #12]
 8013484:	60fb      	str	r3, [r7, #12]
 8013486:	68fb      	ldr	r3, [r7, #12]
 8013488:	2b00      	cmp	r3, #0
 801348a:	d1ef      	bne.n	801346c <tcp_pcb_remove+0x50>
 801348c:	683b      	ldr	r3, [r7, #0]
 801348e:	2200      	movs	r2, #0
 8013490:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 8013492:	6838      	ldr	r0, [r7, #0]
 8013494:	f7ff ff72 	bl	801337c <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 8013498:	683b      	ldr	r3, [r7, #0]
 801349a:	7d1b      	ldrb	r3, [r3, #20]
 801349c:	2b0a      	cmp	r3, #10
 801349e:	d013      	beq.n	80134c8 <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 80134a0:	683b      	ldr	r3, [r7, #0]
 80134a2:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 80134a4:	2b01      	cmp	r3, #1
 80134a6:	d00f      	beq.n	80134c8 <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 80134a8:	683b      	ldr	r3, [r7, #0]
 80134aa:	8b5b      	ldrh	r3, [r3, #26]
 80134ac:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 80134b0:	2b00      	cmp	r3, #0
 80134b2:	d009      	beq.n	80134c8 <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 80134b4:	683b      	ldr	r3, [r7, #0]
 80134b6:	8b5b      	ldrh	r3, [r3, #26]
 80134b8:	f043 0302 	orr.w	r3, r3, #2
 80134bc:	b29a      	uxth	r2, r3
 80134be:	683b      	ldr	r3, [r7, #0]
 80134c0:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 80134c2:	6838      	ldr	r0, [r7, #0]
 80134c4:	f003 fbc6 	bl	8016c54 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 80134c8:	683b      	ldr	r3, [r7, #0]
 80134ca:	7d1b      	ldrb	r3, [r3, #20]
 80134cc:	2b01      	cmp	r3, #1
 80134ce:	d020      	beq.n	8013512 <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 80134d0:	683b      	ldr	r3, [r7, #0]
 80134d2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80134d4:	2b00      	cmp	r3, #0
 80134d6:	d006      	beq.n	80134e6 <tcp_pcb_remove+0xca>
 80134d8:	4b13      	ldr	r3, [pc, #76]	; (8013528 <tcp_pcb_remove+0x10c>)
 80134da:	f640 0293 	movw	r2, #2195	; 0x893
 80134de:	4916      	ldr	r1, [pc, #88]	; (8013538 <tcp_pcb_remove+0x11c>)
 80134e0:	4813      	ldr	r0, [pc, #76]	; (8013530 <tcp_pcb_remove+0x114>)
 80134e2:	f007 fee9 	bl	801b2b8 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 80134e6:	683b      	ldr	r3, [r7, #0]
 80134e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80134ea:	2b00      	cmp	r3, #0
 80134ec:	d006      	beq.n	80134fc <tcp_pcb_remove+0xe0>
 80134ee:	4b0e      	ldr	r3, [pc, #56]	; (8013528 <tcp_pcb_remove+0x10c>)
 80134f0:	f640 0294 	movw	r2, #2196	; 0x894
 80134f4:	4911      	ldr	r1, [pc, #68]	; (801353c <tcp_pcb_remove+0x120>)
 80134f6:	480e      	ldr	r0, [pc, #56]	; (8013530 <tcp_pcb_remove+0x114>)
 80134f8:	f007 fede 	bl	801b2b8 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 80134fc:	683b      	ldr	r3, [r7, #0]
 80134fe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8013500:	2b00      	cmp	r3, #0
 8013502:	d006      	beq.n	8013512 <tcp_pcb_remove+0xf6>
 8013504:	4b08      	ldr	r3, [pc, #32]	; (8013528 <tcp_pcb_remove+0x10c>)
 8013506:	f640 0296 	movw	r2, #2198	; 0x896
 801350a:	490d      	ldr	r1, [pc, #52]	; (8013540 <tcp_pcb_remove+0x124>)
 801350c:	4808      	ldr	r0, [pc, #32]	; (8013530 <tcp_pcb_remove+0x114>)
 801350e:	f007 fed3 	bl	801b2b8 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 8013512:	683b      	ldr	r3, [r7, #0]
 8013514:	2200      	movs	r2, #0
 8013516:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 8013518:	683b      	ldr	r3, [r7, #0]
 801351a:	2200      	movs	r2, #0
 801351c:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 801351e:	bf00      	nop
 8013520:	3710      	adds	r7, #16
 8013522:	46bd      	mov	sp, r7
 8013524:	bd80      	pop	{r7, pc}
 8013526:	bf00      	nop
 8013528:	0801edd0 	.word	0x0801edd0
 801352c:	0801f438 	.word	0x0801f438
 8013530:	0801ee14 	.word	0x0801ee14
 8013534:	0801f454 	.word	0x0801f454
 8013538:	0801f474 	.word	0x0801f474
 801353c:	0801f48c 	.word	0x0801f48c
 8013540:	0801f4a8 	.word	0x0801f4a8

08013544 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 8013544:	b580      	push	{r7, lr}
 8013546:	b082      	sub	sp, #8
 8013548:	af00      	add	r7, sp, #0
 801354a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 801354c:	687b      	ldr	r3, [r7, #4]
 801354e:	2b00      	cmp	r3, #0
 8013550:	d106      	bne.n	8013560 <tcp_next_iss+0x1c>
 8013552:	4b0a      	ldr	r3, [pc, #40]	; (801357c <tcp_next_iss+0x38>)
 8013554:	f640 02af 	movw	r2, #2223	; 0x8af
 8013558:	4909      	ldr	r1, [pc, #36]	; (8013580 <tcp_next_iss+0x3c>)
 801355a:	480a      	ldr	r0, [pc, #40]	; (8013584 <tcp_next_iss+0x40>)
 801355c:	f007 feac 	bl	801b2b8 <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 8013560:	4b09      	ldr	r3, [pc, #36]	; (8013588 <tcp_next_iss+0x44>)
 8013562:	681a      	ldr	r2, [r3, #0]
 8013564:	4b09      	ldr	r3, [pc, #36]	; (801358c <tcp_next_iss+0x48>)
 8013566:	681b      	ldr	r3, [r3, #0]
 8013568:	4413      	add	r3, r2
 801356a:	4a07      	ldr	r2, [pc, #28]	; (8013588 <tcp_next_iss+0x44>)
 801356c:	6013      	str	r3, [r2, #0]
  return iss;
 801356e:	4b06      	ldr	r3, [pc, #24]	; (8013588 <tcp_next_iss+0x44>)
 8013570:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 8013572:	4618      	mov	r0, r3
 8013574:	3708      	adds	r7, #8
 8013576:	46bd      	mov	sp, r7
 8013578:	bd80      	pop	{r7, pc}
 801357a:	bf00      	nop
 801357c:	0801edd0 	.word	0x0801edd0
 8013580:	0801f4c0 	.word	0x0801f4c0
 8013584:	0801ee14 	.word	0x0801ee14
 8013588:	2000016c 	.word	0x2000016c
 801358c:	200071ac 	.word	0x200071ac

08013590 <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 8013590:	b580      	push	{r7, lr}
 8013592:	b086      	sub	sp, #24
 8013594:	af00      	add	r7, sp, #0
 8013596:	4603      	mov	r3, r0
 8013598:	60b9      	str	r1, [r7, #8]
 801359a:	607a      	str	r2, [r7, #4]
 801359c:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 801359e:	687b      	ldr	r3, [r7, #4]
 80135a0:	2b00      	cmp	r3, #0
 80135a2:	d106      	bne.n	80135b2 <tcp_eff_send_mss_netif+0x22>
 80135a4:	4b14      	ldr	r3, [pc, #80]	; (80135f8 <tcp_eff_send_mss_netif+0x68>)
 80135a6:	f640 02c5 	movw	r2, #2245	; 0x8c5
 80135aa:	4914      	ldr	r1, [pc, #80]	; (80135fc <tcp_eff_send_mss_netif+0x6c>)
 80135ac:	4814      	ldr	r0, [pc, #80]	; (8013600 <tcp_eff_send_mss_netif+0x70>)
 80135ae:	f007 fe83 	bl	801b2b8 <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 80135b2:	68bb      	ldr	r3, [r7, #8]
 80135b4:	2b00      	cmp	r3, #0
 80135b6:	d101      	bne.n	80135bc <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 80135b8:	89fb      	ldrh	r3, [r7, #14]
 80135ba:	e019      	b.n	80135f0 <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 80135bc:	68bb      	ldr	r3, [r7, #8]
 80135be:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80135c0:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 80135c2:	8afb      	ldrh	r3, [r7, #22]
 80135c4:	2b00      	cmp	r3, #0
 80135c6:	d012      	beq.n	80135ee <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 80135c8:	2328      	movs	r3, #40	; 0x28
 80135ca:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 80135cc:	8afa      	ldrh	r2, [r7, #22]
 80135ce:	8abb      	ldrh	r3, [r7, #20]
 80135d0:	429a      	cmp	r2, r3
 80135d2:	d904      	bls.n	80135de <tcp_eff_send_mss_netif+0x4e>
 80135d4:	8afa      	ldrh	r2, [r7, #22]
 80135d6:	8abb      	ldrh	r3, [r7, #20]
 80135d8:	1ad3      	subs	r3, r2, r3
 80135da:	b29b      	uxth	r3, r3
 80135dc:	e000      	b.n	80135e0 <tcp_eff_send_mss_netif+0x50>
 80135de:	2300      	movs	r3, #0
 80135e0:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 80135e2:	8a7a      	ldrh	r2, [r7, #18]
 80135e4:	89fb      	ldrh	r3, [r7, #14]
 80135e6:	4293      	cmp	r3, r2
 80135e8:	bf28      	it	cs
 80135ea:	4613      	movcs	r3, r2
 80135ec:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 80135ee:	89fb      	ldrh	r3, [r7, #14]
}
 80135f0:	4618      	mov	r0, r3
 80135f2:	3718      	adds	r7, #24
 80135f4:	46bd      	mov	sp, r7
 80135f6:	bd80      	pop	{r7, pc}
 80135f8:	0801edd0 	.word	0x0801edd0
 80135fc:	0801f4dc 	.word	0x0801f4dc
 8013600:	0801ee14 	.word	0x0801ee14

08013604 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 8013604:	b580      	push	{r7, lr}
 8013606:	b084      	sub	sp, #16
 8013608:	af00      	add	r7, sp, #0
 801360a:	6078      	str	r0, [r7, #4]
 801360c:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 801360e:	683b      	ldr	r3, [r7, #0]
 8013610:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 8013612:	687b      	ldr	r3, [r7, #4]
 8013614:	2b00      	cmp	r3, #0
 8013616:	d119      	bne.n	801364c <tcp_netif_ip_addr_changed_pcblist+0x48>
 8013618:	4b10      	ldr	r3, [pc, #64]	; (801365c <tcp_netif_ip_addr_changed_pcblist+0x58>)
 801361a:	f44f 6210 	mov.w	r2, #2304	; 0x900
 801361e:	4910      	ldr	r1, [pc, #64]	; (8013660 <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 8013620:	4810      	ldr	r0, [pc, #64]	; (8013664 <tcp_netif_ip_addr_changed_pcblist+0x60>)
 8013622:	f007 fe49 	bl	801b2b8 <iprintf>

  while (pcb != NULL) {
 8013626:	e011      	b.n	801364c <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 8013628:	68fb      	ldr	r3, [r7, #12]
 801362a:	681a      	ldr	r2, [r3, #0]
 801362c:	687b      	ldr	r3, [r7, #4]
 801362e:	681b      	ldr	r3, [r3, #0]
 8013630:	429a      	cmp	r2, r3
 8013632:	d108      	bne.n	8013646 <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 8013634:	68fb      	ldr	r3, [r7, #12]
 8013636:	68db      	ldr	r3, [r3, #12]
 8013638:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 801363a:	68f8      	ldr	r0, [r7, #12]
 801363c:	f7fe fdb4 	bl	80121a8 <tcp_abort>
      pcb = next;
 8013640:	68bb      	ldr	r3, [r7, #8]
 8013642:	60fb      	str	r3, [r7, #12]
 8013644:	e002      	b.n	801364c <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 8013646:	68fb      	ldr	r3, [r7, #12]
 8013648:	68db      	ldr	r3, [r3, #12]
 801364a:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 801364c:	68fb      	ldr	r3, [r7, #12]
 801364e:	2b00      	cmp	r3, #0
 8013650:	d1ea      	bne.n	8013628 <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 8013652:	bf00      	nop
 8013654:	bf00      	nop
 8013656:	3710      	adds	r7, #16
 8013658:	46bd      	mov	sp, r7
 801365a:	bd80      	pop	{r7, pc}
 801365c:	0801edd0 	.word	0x0801edd0
 8013660:	0801f504 	.word	0x0801f504
 8013664:	0801ee14 	.word	0x0801ee14

08013668 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8013668:	b580      	push	{r7, lr}
 801366a:	b084      	sub	sp, #16
 801366c:	af00      	add	r7, sp, #0
 801366e:	6078      	str	r0, [r7, #4]
 8013670:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 8013672:	687b      	ldr	r3, [r7, #4]
 8013674:	2b00      	cmp	r3, #0
 8013676:	d02a      	beq.n	80136ce <tcp_netif_ip_addr_changed+0x66>
 8013678:	687b      	ldr	r3, [r7, #4]
 801367a:	681b      	ldr	r3, [r3, #0]
 801367c:	2b00      	cmp	r3, #0
 801367e:	d026      	beq.n	80136ce <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 8013680:	4b15      	ldr	r3, [pc, #84]	; (80136d8 <tcp_netif_ip_addr_changed+0x70>)
 8013682:	681b      	ldr	r3, [r3, #0]
 8013684:	4619      	mov	r1, r3
 8013686:	6878      	ldr	r0, [r7, #4]
 8013688:	f7ff ffbc 	bl	8013604 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 801368c:	4b13      	ldr	r3, [pc, #76]	; (80136dc <tcp_netif_ip_addr_changed+0x74>)
 801368e:	681b      	ldr	r3, [r3, #0]
 8013690:	4619      	mov	r1, r3
 8013692:	6878      	ldr	r0, [r7, #4]
 8013694:	f7ff ffb6 	bl	8013604 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 8013698:	683b      	ldr	r3, [r7, #0]
 801369a:	2b00      	cmp	r3, #0
 801369c:	d017      	beq.n	80136ce <tcp_netif_ip_addr_changed+0x66>
 801369e:	683b      	ldr	r3, [r7, #0]
 80136a0:	681b      	ldr	r3, [r3, #0]
 80136a2:	2b00      	cmp	r3, #0
 80136a4:	d013      	beq.n	80136ce <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 80136a6:	4b0e      	ldr	r3, [pc, #56]	; (80136e0 <tcp_netif_ip_addr_changed+0x78>)
 80136a8:	681b      	ldr	r3, [r3, #0]
 80136aa:	60fb      	str	r3, [r7, #12]
 80136ac:	e00c      	b.n	80136c8 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 80136ae:	68fb      	ldr	r3, [r7, #12]
 80136b0:	681a      	ldr	r2, [r3, #0]
 80136b2:	687b      	ldr	r3, [r7, #4]
 80136b4:	681b      	ldr	r3, [r3, #0]
 80136b6:	429a      	cmp	r2, r3
 80136b8:	d103      	bne.n	80136c2 <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 80136ba:	683b      	ldr	r3, [r7, #0]
 80136bc:	681a      	ldr	r2, [r3, #0]
 80136be:	68fb      	ldr	r3, [r7, #12]
 80136c0:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 80136c2:	68fb      	ldr	r3, [r7, #12]
 80136c4:	68db      	ldr	r3, [r3, #12]
 80136c6:	60fb      	str	r3, [r7, #12]
 80136c8:	68fb      	ldr	r3, [r7, #12]
 80136ca:	2b00      	cmp	r3, #0
 80136cc:	d1ef      	bne.n	80136ae <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 80136ce:	bf00      	nop
 80136d0:	3710      	adds	r7, #16
 80136d2:	46bd      	mov	sp, r7
 80136d4:	bd80      	pop	{r7, pc}
 80136d6:	bf00      	nop
 80136d8:	200071b8 	.word	0x200071b8
 80136dc:	200071b0 	.word	0x200071b0
 80136e0:	200071b4 	.word	0x200071b4

080136e4 <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 80136e4:	b580      	push	{r7, lr}
 80136e6:	b082      	sub	sp, #8
 80136e8:	af00      	add	r7, sp, #0
 80136ea:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 80136ec:	687b      	ldr	r3, [r7, #4]
 80136ee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80136f0:	2b00      	cmp	r3, #0
 80136f2:	d007      	beq.n	8013704 <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 80136f4:	687b      	ldr	r3, [r7, #4]
 80136f6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80136f8:	4618      	mov	r0, r3
 80136fa:	f7ff fb8d 	bl	8012e18 <tcp_segs_free>
    pcb->ooseq = NULL;
 80136fe:	687b      	ldr	r3, [r7, #4]
 8013700:	2200      	movs	r2, #0
 8013702:	675a      	str	r2, [r3, #116]	; 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 8013704:	bf00      	nop
 8013706:	3708      	adds	r7, #8
 8013708:	46bd      	mov	sp, r7
 801370a:	bd80      	pop	{r7, pc}

0801370c <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 801370c:	b590      	push	{r4, r7, lr}
 801370e:	b08d      	sub	sp, #52	; 0x34
 8013710:	af04      	add	r7, sp, #16
 8013712:	6078      	str	r0, [r7, #4]
 8013714:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 8013716:	687b      	ldr	r3, [r7, #4]
 8013718:	2b00      	cmp	r3, #0
 801371a:	d105      	bne.n	8013728 <tcp_input+0x1c>
 801371c:	4b9b      	ldr	r3, [pc, #620]	; (801398c <tcp_input+0x280>)
 801371e:	2283      	movs	r2, #131	; 0x83
 8013720:	499b      	ldr	r1, [pc, #620]	; (8013990 <tcp_input+0x284>)
 8013722:	489c      	ldr	r0, [pc, #624]	; (8013994 <tcp_input+0x288>)
 8013724:	f007 fdc8 	bl	801b2b8 <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 8013728:	687b      	ldr	r3, [r7, #4]
 801372a:	685b      	ldr	r3, [r3, #4]
 801372c:	4a9a      	ldr	r2, [pc, #616]	; (8013998 <tcp_input+0x28c>)
 801372e:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 8013730:	687b      	ldr	r3, [r7, #4]
 8013732:	895b      	ldrh	r3, [r3, #10]
 8013734:	2b13      	cmp	r3, #19
 8013736:	f240 83d1 	bls.w	8013edc <tcp_input+0x7d0>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 801373a:	4b98      	ldr	r3, [pc, #608]	; (801399c <tcp_input+0x290>)
 801373c:	695b      	ldr	r3, [r3, #20]
 801373e:	4a97      	ldr	r2, [pc, #604]	; (801399c <tcp_input+0x290>)
 8013740:	6812      	ldr	r2, [r2, #0]
 8013742:	4611      	mov	r1, r2
 8013744:	4618      	mov	r0, r3
 8013746:	f006 f895 	bl	8019874 <ip4_addr_isbroadcast_u32>
 801374a:	4603      	mov	r3, r0
 801374c:	2b00      	cmp	r3, #0
 801374e:	f040 83c7 	bne.w	8013ee0 <tcp_input+0x7d4>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 8013752:	4b92      	ldr	r3, [pc, #584]	; (801399c <tcp_input+0x290>)
 8013754:	695b      	ldr	r3, [r3, #20]
 8013756:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 801375a:	2be0      	cmp	r3, #224	; 0xe0
 801375c:	f000 83c0 	beq.w	8013ee0 <tcp_input+0x7d4>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 8013760:	4b8d      	ldr	r3, [pc, #564]	; (8013998 <tcp_input+0x28c>)
 8013762:	681b      	ldr	r3, [r3, #0]
 8013764:	899b      	ldrh	r3, [r3, #12]
 8013766:	b29b      	uxth	r3, r3
 8013768:	4618      	mov	r0, r3
 801376a:	f7fc faff 	bl	800fd6c <lwip_htons>
 801376e:	4603      	mov	r3, r0
 8013770:	0b1b      	lsrs	r3, r3, #12
 8013772:	b29b      	uxth	r3, r3
 8013774:	b2db      	uxtb	r3, r3
 8013776:	009b      	lsls	r3, r3, #2
 8013778:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 801377a:	7cbb      	ldrb	r3, [r7, #18]
 801377c:	2b13      	cmp	r3, #19
 801377e:	f240 83b1 	bls.w	8013ee4 <tcp_input+0x7d8>
 8013782:	7cbb      	ldrb	r3, [r7, #18]
 8013784:	b29a      	uxth	r2, r3
 8013786:	687b      	ldr	r3, [r7, #4]
 8013788:	891b      	ldrh	r3, [r3, #8]
 801378a:	429a      	cmp	r2, r3
 801378c:	f200 83aa 	bhi.w	8013ee4 <tcp_input+0x7d8>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 8013790:	7cbb      	ldrb	r3, [r7, #18]
 8013792:	b29b      	uxth	r3, r3
 8013794:	3b14      	subs	r3, #20
 8013796:	b29a      	uxth	r2, r3
 8013798:	4b81      	ldr	r3, [pc, #516]	; (80139a0 <tcp_input+0x294>)
 801379a:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 801379c:	4b81      	ldr	r3, [pc, #516]	; (80139a4 <tcp_input+0x298>)
 801379e:	2200      	movs	r2, #0
 80137a0:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 80137a2:	687b      	ldr	r3, [r7, #4]
 80137a4:	895a      	ldrh	r2, [r3, #10]
 80137a6:	7cbb      	ldrb	r3, [r7, #18]
 80137a8:	b29b      	uxth	r3, r3
 80137aa:	429a      	cmp	r2, r3
 80137ac:	d309      	bcc.n	80137c2 <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 80137ae:	4b7c      	ldr	r3, [pc, #496]	; (80139a0 <tcp_input+0x294>)
 80137b0:	881a      	ldrh	r2, [r3, #0]
 80137b2:	4b7d      	ldr	r3, [pc, #500]	; (80139a8 <tcp_input+0x29c>)
 80137b4:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 80137b6:	7cbb      	ldrb	r3, [r7, #18]
 80137b8:	4619      	mov	r1, r3
 80137ba:	6878      	ldr	r0, [r7, #4]
 80137bc:	f7fd fe54 	bl	8011468 <pbuf_remove_header>
 80137c0:	e04e      	b.n	8013860 <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 80137c2:	687b      	ldr	r3, [r7, #4]
 80137c4:	681b      	ldr	r3, [r3, #0]
 80137c6:	2b00      	cmp	r3, #0
 80137c8:	d105      	bne.n	80137d6 <tcp_input+0xca>
 80137ca:	4b70      	ldr	r3, [pc, #448]	; (801398c <tcp_input+0x280>)
 80137cc:	22c2      	movs	r2, #194	; 0xc2
 80137ce:	4977      	ldr	r1, [pc, #476]	; (80139ac <tcp_input+0x2a0>)
 80137d0:	4870      	ldr	r0, [pc, #448]	; (8013994 <tcp_input+0x288>)
 80137d2:	f007 fd71 	bl	801b2b8 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 80137d6:	2114      	movs	r1, #20
 80137d8:	6878      	ldr	r0, [r7, #4]
 80137da:	f7fd fe45 	bl	8011468 <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 80137de:	687b      	ldr	r3, [r7, #4]
 80137e0:	895a      	ldrh	r2, [r3, #10]
 80137e2:	4b71      	ldr	r3, [pc, #452]	; (80139a8 <tcp_input+0x29c>)
 80137e4:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 80137e6:	4b6e      	ldr	r3, [pc, #440]	; (80139a0 <tcp_input+0x294>)
 80137e8:	881a      	ldrh	r2, [r3, #0]
 80137ea:	4b6f      	ldr	r3, [pc, #444]	; (80139a8 <tcp_input+0x29c>)
 80137ec:	881b      	ldrh	r3, [r3, #0]
 80137ee:	1ad3      	subs	r3, r2, r3
 80137f0:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 80137f2:	4b6d      	ldr	r3, [pc, #436]	; (80139a8 <tcp_input+0x29c>)
 80137f4:	881b      	ldrh	r3, [r3, #0]
 80137f6:	4619      	mov	r1, r3
 80137f8:	6878      	ldr	r0, [r7, #4]
 80137fa:	f7fd fe35 	bl	8011468 <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 80137fe:	687b      	ldr	r3, [r7, #4]
 8013800:	681b      	ldr	r3, [r3, #0]
 8013802:	895b      	ldrh	r3, [r3, #10]
 8013804:	8a3a      	ldrh	r2, [r7, #16]
 8013806:	429a      	cmp	r2, r3
 8013808:	f200 836e 	bhi.w	8013ee8 <tcp_input+0x7dc>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 801380c:	687b      	ldr	r3, [r7, #4]
 801380e:	681b      	ldr	r3, [r3, #0]
 8013810:	685b      	ldr	r3, [r3, #4]
 8013812:	4a64      	ldr	r2, [pc, #400]	; (80139a4 <tcp_input+0x298>)
 8013814:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 8013816:	687b      	ldr	r3, [r7, #4]
 8013818:	681b      	ldr	r3, [r3, #0]
 801381a:	8a3a      	ldrh	r2, [r7, #16]
 801381c:	4611      	mov	r1, r2
 801381e:	4618      	mov	r0, r3
 8013820:	f7fd fe22 	bl	8011468 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 8013824:	687b      	ldr	r3, [r7, #4]
 8013826:	891a      	ldrh	r2, [r3, #8]
 8013828:	8a3b      	ldrh	r3, [r7, #16]
 801382a:	1ad3      	subs	r3, r2, r3
 801382c:	b29a      	uxth	r2, r3
 801382e:	687b      	ldr	r3, [r7, #4]
 8013830:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 8013832:	687b      	ldr	r3, [r7, #4]
 8013834:	895b      	ldrh	r3, [r3, #10]
 8013836:	2b00      	cmp	r3, #0
 8013838:	d005      	beq.n	8013846 <tcp_input+0x13a>
 801383a:	4b54      	ldr	r3, [pc, #336]	; (801398c <tcp_input+0x280>)
 801383c:	22df      	movs	r2, #223	; 0xdf
 801383e:	495c      	ldr	r1, [pc, #368]	; (80139b0 <tcp_input+0x2a4>)
 8013840:	4854      	ldr	r0, [pc, #336]	; (8013994 <tcp_input+0x288>)
 8013842:	f007 fd39 	bl	801b2b8 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 8013846:	687b      	ldr	r3, [r7, #4]
 8013848:	891a      	ldrh	r2, [r3, #8]
 801384a:	687b      	ldr	r3, [r7, #4]
 801384c:	681b      	ldr	r3, [r3, #0]
 801384e:	891b      	ldrh	r3, [r3, #8]
 8013850:	429a      	cmp	r2, r3
 8013852:	d005      	beq.n	8013860 <tcp_input+0x154>
 8013854:	4b4d      	ldr	r3, [pc, #308]	; (801398c <tcp_input+0x280>)
 8013856:	22e0      	movs	r2, #224	; 0xe0
 8013858:	4956      	ldr	r1, [pc, #344]	; (80139b4 <tcp_input+0x2a8>)
 801385a:	484e      	ldr	r0, [pc, #312]	; (8013994 <tcp_input+0x288>)
 801385c:	f007 fd2c 	bl	801b2b8 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 8013860:	4b4d      	ldr	r3, [pc, #308]	; (8013998 <tcp_input+0x28c>)
 8013862:	681b      	ldr	r3, [r3, #0]
 8013864:	881b      	ldrh	r3, [r3, #0]
 8013866:	b29b      	uxth	r3, r3
 8013868:	4a4b      	ldr	r2, [pc, #300]	; (8013998 <tcp_input+0x28c>)
 801386a:	6814      	ldr	r4, [r2, #0]
 801386c:	4618      	mov	r0, r3
 801386e:	f7fc fa7d 	bl	800fd6c <lwip_htons>
 8013872:	4603      	mov	r3, r0
 8013874:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 8013876:	4b48      	ldr	r3, [pc, #288]	; (8013998 <tcp_input+0x28c>)
 8013878:	681b      	ldr	r3, [r3, #0]
 801387a:	885b      	ldrh	r3, [r3, #2]
 801387c:	b29b      	uxth	r3, r3
 801387e:	4a46      	ldr	r2, [pc, #280]	; (8013998 <tcp_input+0x28c>)
 8013880:	6814      	ldr	r4, [r2, #0]
 8013882:	4618      	mov	r0, r3
 8013884:	f7fc fa72 	bl	800fd6c <lwip_htons>
 8013888:	4603      	mov	r3, r0
 801388a:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 801388c:	4b42      	ldr	r3, [pc, #264]	; (8013998 <tcp_input+0x28c>)
 801388e:	681b      	ldr	r3, [r3, #0]
 8013890:	685b      	ldr	r3, [r3, #4]
 8013892:	4a41      	ldr	r2, [pc, #260]	; (8013998 <tcp_input+0x28c>)
 8013894:	6814      	ldr	r4, [r2, #0]
 8013896:	4618      	mov	r0, r3
 8013898:	f7fc fa7d 	bl	800fd96 <lwip_htonl>
 801389c:	4603      	mov	r3, r0
 801389e:	6063      	str	r3, [r4, #4]
 80138a0:	6863      	ldr	r3, [r4, #4]
 80138a2:	4a45      	ldr	r2, [pc, #276]	; (80139b8 <tcp_input+0x2ac>)
 80138a4:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 80138a6:	4b3c      	ldr	r3, [pc, #240]	; (8013998 <tcp_input+0x28c>)
 80138a8:	681b      	ldr	r3, [r3, #0]
 80138aa:	689b      	ldr	r3, [r3, #8]
 80138ac:	4a3a      	ldr	r2, [pc, #232]	; (8013998 <tcp_input+0x28c>)
 80138ae:	6814      	ldr	r4, [r2, #0]
 80138b0:	4618      	mov	r0, r3
 80138b2:	f7fc fa70 	bl	800fd96 <lwip_htonl>
 80138b6:	4603      	mov	r3, r0
 80138b8:	60a3      	str	r3, [r4, #8]
 80138ba:	68a3      	ldr	r3, [r4, #8]
 80138bc:	4a3f      	ldr	r2, [pc, #252]	; (80139bc <tcp_input+0x2b0>)
 80138be:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 80138c0:	4b35      	ldr	r3, [pc, #212]	; (8013998 <tcp_input+0x28c>)
 80138c2:	681b      	ldr	r3, [r3, #0]
 80138c4:	89db      	ldrh	r3, [r3, #14]
 80138c6:	b29b      	uxth	r3, r3
 80138c8:	4a33      	ldr	r2, [pc, #204]	; (8013998 <tcp_input+0x28c>)
 80138ca:	6814      	ldr	r4, [r2, #0]
 80138cc:	4618      	mov	r0, r3
 80138ce:	f7fc fa4d 	bl	800fd6c <lwip_htons>
 80138d2:	4603      	mov	r3, r0
 80138d4:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 80138d6:	4b30      	ldr	r3, [pc, #192]	; (8013998 <tcp_input+0x28c>)
 80138d8:	681b      	ldr	r3, [r3, #0]
 80138da:	899b      	ldrh	r3, [r3, #12]
 80138dc:	b29b      	uxth	r3, r3
 80138de:	4618      	mov	r0, r3
 80138e0:	f7fc fa44 	bl	800fd6c <lwip_htons>
 80138e4:	4603      	mov	r3, r0
 80138e6:	b2db      	uxtb	r3, r3
 80138e8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80138ec:	b2da      	uxtb	r2, r3
 80138ee:	4b34      	ldr	r3, [pc, #208]	; (80139c0 <tcp_input+0x2b4>)
 80138f0:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 80138f2:	687b      	ldr	r3, [r7, #4]
 80138f4:	891a      	ldrh	r2, [r3, #8]
 80138f6:	4b33      	ldr	r3, [pc, #204]	; (80139c4 <tcp_input+0x2b8>)
 80138f8:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 80138fa:	4b31      	ldr	r3, [pc, #196]	; (80139c0 <tcp_input+0x2b4>)
 80138fc:	781b      	ldrb	r3, [r3, #0]
 80138fe:	f003 0303 	and.w	r3, r3, #3
 8013902:	2b00      	cmp	r3, #0
 8013904:	d00c      	beq.n	8013920 <tcp_input+0x214>
    tcplen++;
 8013906:	4b2f      	ldr	r3, [pc, #188]	; (80139c4 <tcp_input+0x2b8>)
 8013908:	881b      	ldrh	r3, [r3, #0]
 801390a:	3301      	adds	r3, #1
 801390c:	b29a      	uxth	r2, r3
 801390e:	4b2d      	ldr	r3, [pc, #180]	; (80139c4 <tcp_input+0x2b8>)
 8013910:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 8013912:	687b      	ldr	r3, [r7, #4]
 8013914:	891a      	ldrh	r2, [r3, #8]
 8013916:	4b2b      	ldr	r3, [pc, #172]	; (80139c4 <tcp_input+0x2b8>)
 8013918:	881b      	ldrh	r3, [r3, #0]
 801391a:	429a      	cmp	r2, r3
 801391c:	f200 82e6 	bhi.w	8013eec <tcp_input+0x7e0>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 8013920:	2300      	movs	r3, #0
 8013922:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8013924:	4b28      	ldr	r3, [pc, #160]	; (80139c8 <tcp_input+0x2bc>)
 8013926:	681b      	ldr	r3, [r3, #0]
 8013928:	61fb      	str	r3, [r7, #28]
 801392a:	e09d      	b.n	8013a68 <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 801392c:	69fb      	ldr	r3, [r7, #28]
 801392e:	7d1b      	ldrb	r3, [r3, #20]
 8013930:	2b00      	cmp	r3, #0
 8013932:	d105      	bne.n	8013940 <tcp_input+0x234>
 8013934:	4b15      	ldr	r3, [pc, #84]	; (801398c <tcp_input+0x280>)
 8013936:	22fb      	movs	r2, #251	; 0xfb
 8013938:	4924      	ldr	r1, [pc, #144]	; (80139cc <tcp_input+0x2c0>)
 801393a:	4816      	ldr	r0, [pc, #88]	; (8013994 <tcp_input+0x288>)
 801393c:	f007 fcbc 	bl	801b2b8 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 8013940:	69fb      	ldr	r3, [r7, #28]
 8013942:	7d1b      	ldrb	r3, [r3, #20]
 8013944:	2b0a      	cmp	r3, #10
 8013946:	d105      	bne.n	8013954 <tcp_input+0x248>
 8013948:	4b10      	ldr	r3, [pc, #64]	; (801398c <tcp_input+0x280>)
 801394a:	22fc      	movs	r2, #252	; 0xfc
 801394c:	4920      	ldr	r1, [pc, #128]	; (80139d0 <tcp_input+0x2c4>)
 801394e:	4811      	ldr	r0, [pc, #68]	; (8013994 <tcp_input+0x288>)
 8013950:	f007 fcb2 	bl	801b2b8 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 8013954:	69fb      	ldr	r3, [r7, #28]
 8013956:	7d1b      	ldrb	r3, [r3, #20]
 8013958:	2b01      	cmp	r3, #1
 801395a:	d105      	bne.n	8013968 <tcp_input+0x25c>
 801395c:	4b0b      	ldr	r3, [pc, #44]	; (801398c <tcp_input+0x280>)
 801395e:	22fd      	movs	r2, #253	; 0xfd
 8013960:	491c      	ldr	r1, [pc, #112]	; (80139d4 <tcp_input+0x2c8>)
 8013962:	480c      	ldr	r0, [pc, #48]	; (8013994 <tcp_input+0x288>)
 8013964:	f007 fca8 	bl	801b2b8 <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8013968:	69fb      	ldr	r3, [r7, #28]
 801396a:	7a1b      	ldrb	r3, [r3, #8]
 801396c:	2b00      	cmp	r3, #0
 801396e:	d033      	beq.n	80139d8 <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8013970:	69fb      	ldr	r3, [r7, #28]
 8013972:	7a1a      	ldrb	r2, [r3, #8]
 8013974:	4b09      	ldr	r3, [pc, #36]	; (801399c <tcp_input+0x290>)
 8013976:	685b      	ldr	r3, [r3, #4]
 8013978:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801397c:	3301      	adds	r3, #1
 801397e:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8013980:	429a      	cmp	r2, r3
 8013982:	d029      	beq.n	80139d8 <tcp_input+0x2cc>
      prev = pcb;
 8013984:	69fb      	ldr	r3, [r7, #28]
 8013986:	61bb      	str	r3, [r7, #24]
      continue;
 8013988:	e06b      	b.n	8013a62 <tcp_input+0x356>
 801398a:	bf00      	nop
 801398c:	0801f538 	.word	0x0801f538
 8013990:	0801f56c 	.word	0x0801f56c
 8013994:	0801f584 	.word	0x0801f584
 8013998:	200071d4 	.word	0x200071d4
 801399c:	200008d0 	.word	0x200008d0
 80139a0:	200071d8 	.word	0x200071d8
 80139a4:	200071dc 	.word	0x200071dc
 80139a8:	200071da 	.word	0x200071da
 80139ac:	0801f5ac 	.word	0x0801f5ac
 80139b0:	0801f5bc 	.word	0x0801f5bc
 80139b4:	0801f5c8 	.word	0x0801f5c8
 80139b8:	200071e4 	.word	0x200071e4
 80139bc:	200071e8 	.word	0x200071e8
 80139c0:	200071f0 	.word	0x200071f0
 80139c4:	200071ee 	.word	0x200071ee
 80139c8:	200071b8 	.word	0x200071b8
 80139cc:	0801f5e8 	.word	0x0801f5e8
 80139d0:	0801f610 	.word	0x0801f610
 80139d4:	0801f63c 	.word	0x0801f63c
    }

    if (pcb->remote_port == tcphdr->src &&
 80139d8:	69fb      	ldr	r3, [r7, #28]
 80139da:	8b1a      	ldrh	r2, [r3, #24]
 80139dc:	4b72      	ldr	r3, [pc, #456]	; (8013ba8 <tcp_input+0x49c>)
 80139de:	681b      	ldr	r3, [r3, #0]
 80139e0:	881b      	ldrh	r3, [r3, #0]
 80139e2:	b29b      	uxth	r3, r3
 80139e4:	429a      	cmp	r2, r3
 80139e6:	d13a      	bne.n	8013a5e <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 80139e8:	69fb      	ldr	r3, [r7, #28]
 80139ea:	8ada      	ldrh	r2, [r3, #22]
 80139ec:	4b6e      	ldr	r3, [pc, #440]	; (8013ba8 <tcp_input+0x49c>)
 80139ee:	681b      	ldr	r3, [r3, #0]
 80139f0:	885b      	ldrh	r3, [r3, #2]
 80139f2:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 80139f4:	429a      	cmp	r2, r3
 80139f6:	d132      	bne.n	8013a5e <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 80139f8:	69fb      	ldr	r3, [r7, #28]
 80139fa:	685a      	ldr	r2, [r3, #4]
 80139fc:	4b6b      	ldr	r3, [pc, #428]	; (8013bac <tcp_input+0x4a0>)
 80139fe:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 8013a00:	429a      	cmp	r2, r3
 8013a02:	d12c      	bne.n	8013a5e <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8013a04:	69fb      	ldr	r3, [r7, #28]
 8013a06:	681a      	ldr	r2, [r3, #0]
 8013a08:	4b68      	ldr	r3, [pc, #416]	; (8013bac <tcp_input+0x4a0>)
 8013a0a:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8013a0c:	429a      	cmp	r2, r3
 8013a0e:	d126      	bne.n	8013a5e <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 8013a10:	69fb      	ldr	r3, [r7, #28]
 8013a12:	68db      	ldr	r3, [r3, #12]
 8013a14:	69fa      	ldr	r2, [r7, #28]
 8013a16:	429a      	cmp	r2, r3
 8013a18:	d106      	bne.n	8013a28 <tcp_input+0x31c>
 8013a1a:	4b65      	ldr	r3, [pc, #404]	; (8013bb0 <tcp_input+0x4a4>)
 8013a1c:	f240 120d 	movw	r2, #269	; 0x10d
 8013a20:	4964      	ldr	r1, [pc, #400]	; (8013bb4 <tcp_input+0x4a8>)
 8013a22:	4865      	ldr	r0, [pc, #404]	; (8013bb8 <tcp_input+0x4ac>)
 8013a24:	f007 fc48 	bl	801b2b8 <iprintf>
      if (prev != NULL) {
 8013a28:	69bb      	ldr	r3, [r7, #24]
 8013a2a:	2b00      	cmp	r3, #0
 8013a2c:	d00a      	beq.n	8013a44 <tcp_input+0x338>
        prev->next = pcb->next;
 8013a2e:	69fb      	ldr	r3, [r7, #28]
 8013a30:	68da      	ldr	r2, [r3, #12]
 8013a32:	69bb      	ldr	r3, [r7, #24]
 8013a34:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 8013a36:	4b61      	ldr	r3, [pc, #388]	; (8013bbc <tcp_input+0x4b0>)
 8013a38:	681a      	ldr	r2, [r3, #0]
 8013a3a:	69fb      	ldr	r3, [r7, #28]
 8013a3c:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 8013a3e:	4a5f      	ldr	r2, [pc, #380]	; (8013bbc <tcp_input+0x4b0>)
 8013a40:	69fb      	ldr	r3, [r7, #28]
 8013a42:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 8013a44:	69fb      	ldr	r3, [r7, #28]
 8013a46:	68db      	ldr	r3, [r3, #12]
 8013a48:	69fa      	ldr	r2, [r7, #28]
 8013a4a:	429a      	cmp	r2, r3
 8013a4c:	d111      	bne.n	8013a72 <tcp_input+0x366>
 8013a4e:	4b58      	ldr	r3, [pc, #352]	; (8013bb0 <tcp_input+0x4a4>)
 8013a50:	f240 1215 	movw	r2, #277	; 0x115
 8013a54:	495a      	ldr	r1, [pc, #360]	; (8013bc0 <tcp_input+0x4b4>)
 8013a56:	4858      	ldr	r0, [pc, #352]	; (8013bb8 <tcp_input+0x4ac>)
 8013a58:	f007 fc2e 	bl	801b2b8 <iprintf>
      break;
 8013a5c:	e009      	b.n	8013a72 <tcp_input+0x366>
    }
    prev = pcb;
 8013a5e:	69fb      	ldr	r3, [r7, #28]
 8013a60:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8013a62:	69fb      	ldr	r3, [r7, #28]
 8013a64:	68db      	ldr	r3, [r3, #12]
 8013a66:	61fb      	str	r3, [r7, #28]
 8013a68:	69fb      	ldr	r3, [r7, #28]
 8013a6a:	2b00      	cmp	r3, #0
 8013a6c:	f47f af5e 	bne.w	801392c <tcp_input+0x220>
 8013a70:	e000      	b.n	8013a74 <tcp_input+0x368>
      break;
 8013a72:	bf00      	nop
  }

  if (pcb == NULL) {
 8013a74:	69fb      	ldr	r3, [r7, #28]
 8013a76:	2b00      	cmp	r3, #0
 8013a78:	f040 80aa 	bne.w	8013bd0 <tcp_input+0x4c4>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8013a7c:	4b51      	ldr	r3, [pc, #324]	; (8013bc4 <tcp_input+0x4b8>)
 8013a7e:	681b      	ldr	r3, [r3, #0]
 8013a80:	61fb      	str	r3, [r7, #28]
 8013a82:	e03f      	b.n	8013b04 <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8013a84:	69fb      	ldr	r3, [r7, #28]
 8013a86:	7d1b      	ldrb	r3, [r3, #20]
 8013a88:	2b0a      	cmp	r3, #10
 8013a8a:	d006      	beq.n	8013a9a <tcp_input+0x38e>
 8013a8c:	4b48      	ldr	r3, [pc, #288]	; (8013bb0 <tcp_input+0x4a4>)
 8013a8e:	f240 121f 	movw	r2, #287	; 0x11f
 8013a92:	494d      	ldr	r1, [pc, #308]	; (8013bc8 <tcp_input+0x4bc>)
 8013a94:	4848      	ldr	r0, [pc, #288]	; (8013bb8 <tcp_input+0x4ac>)
 8013a96:	f007 fc0f 	bl	801b2b8 <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8013a9a:	69fb      	ldr	r3, [r7, #28]
 8013a9c:	7a1b      	ldrb	r3, [r3, #8]
 8013a9e:	2b00      	cmp	r3, #0
 8013aa0:	d009      	beq.n	8013ab6 <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8013aa2:	69fb      	ldr	r3, [r7, #28]
 8013aa4:	7a1a      	ldrb	r2, [r3, #8]
 8013aa6:	4b41      	ldr	r3, [pc, #260]	; (8013bac <tcp_input+0x4a0>)
 8013aa8:	685b      	ldr	r3, [r3, #4]
 8013aaa:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8013aae:	3301      	adds	r3, #1
 8013ab0:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8013ab2:	429a      	cmp	r2, r3
 8013ab4:	d122      	bne.n	8013afc <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 8013ab6:	69fb      	ldr	r3, [r7, #28]
 8013ab8:	8b1a      	ldrh	r2, [r3, #24]
 8013aba:	4b3b      	ldr	r3, [pc, #236]	; (8013ba8 <tcp_input+0x49c>)
 8013abc:	681b      	ldr	r3, [r3, #0]
 8013abe:	881b      	ldrh	r3, [r3, #0]
 8013ac0:	b29b      	uxth	r3, r3
 8013ac2:	429a      	cmp	r2, r3
 8013ac4:	d11b      	bne.n	8013afe <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 8013ac6:	69fb      	ldr	r3, [r7, #28]
 8013ac8:	8ada      	ldrh	r2, [r3, #22]
 8013aca:	4b37      	ldr	r3, [pc, #220]	; (8013ba8 <tcp_input+0x49c>)
 8013acc:	681b      	ldr	r3, [r3, #0]
 8013ace:	885b      	ldrh	r3, [r3, #2]
 8013ad0:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 8013ad2:	429a      	cmp	r2, r3
 8013ad4:	d113      	bne.n	8013afe <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8013ad6:	69fb      	ldr	r3, [r7, #28]
 8013ad8:	685a      	ldr	r2, [r3, #4]
 8013ada:	4b34      	ldr	r3, [pc, #208]	; (8013bac <tcp_input+0x4a0>)
 8013adc:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 8013ade:	429a      	cmp	r2, r3
 8013ae0:	d10d      	bne.n	8013afe <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8013ae2:	69fb      	ldr	r3, [r7, #28]
 8013ae4:	681a      	ldr	r2, [r3, #0]
 8013ae6:	4b31      	ldr	r3, [pc, #196]	; (8013bac <tcp_input+0x4a0>)
 8013ae8:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8013aea:	429a      	cmp	r2, r3
 8013aec:	d107      	bne.n	8013afe <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 8013aee:	69f8      	ldr	r0, [r7, #28]
 8013af0:	f000 fb56 	bl	80141a0 <tcp_timewait_input>
        }
        pbuf_free(p);
 8013af4:	6878      	ldr	r0, [r7, #4]
 8013af6:	f7fd fd3d 	bl	8011574 <pbuf_free>
        return;
 8013afa:	e1fd      	b.n	8013ef8 <tcp_input+0x7ec>
        continue;
 8013afc:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8013afe:	69fb      	ldr	r3, [r7, #28]
 8013b00:	68db      	ldr	r3, [r3, #12]
 8013b02:	61fb      	str	r3, [r7, #28]
 8013b04:	69fb      	ldr	r3, [r7, #28]
 8013b06:	2b00      	cmp	r3, #0
 8013b08:	d1bc      	bne.n	8013a84 <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 8013b0a:	2300      	movs	r3, #0
 8013b0c:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8013b0e:	4b2f      	ldr	r3, [pc, #188]	; (8013bcc <tcp_input+0x4c0>)
 8013b10:	681b      	ldr	r3, [r3, #0]
 8013b12:	617b      	str	r3, [r7, #20]
 8013b14:	e02a      	b.n	8013b6c <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 8013b16:	697b      	ldr	r3, [r7, #20]
 8013b18:	7a1b      	ldrb	r3, [r3, #8]
 8013b1a:	2b00      	cmp	r3, #0
 8013b1c:	d00c      	beq.n	8013b38 <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8013b1e:	697b      	ldr	r3, [r7, #20]
 8013b20:	7a1a      	ldrb	r2, [r3, #8]
 8013b22:	4b22      	ldr	r3, [pc, #136]	; (8013bac <tcp_input+0x4a0>)
 8013b24:	685b      	ldr	r3, [r3, #4]
 8013b26:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8013b2a:	3301      	adds	r3, #1
 8013b2c:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 8013b2e:	429a      	cmp	r2, r3
 8013b30:	d002      	beq.n	8013b38 <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 8013b32:	697b      	ldr	r3, [r7, #20]
 8013b34:	61bb      	str	r3, [r7, #24]
        continue;
 8013b36:	e016      	b.n	8013b66 <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 8013b38:	697b      	ldr	r3, [r7, #20]
 8013b3a:	8ada      	ldrh	r2, [r3, #22]
 8013b3c:	4b1a      	ldr	r3, [pc, #104]	; (8013ba8 <tcp_input+0x49c>)
 8013b3e:	681b      	ldr	r3, [r3, #0]
 8013b40:	885b      	ldrh	r3, [r3, #2]
 8013b42:	b29b      	uxth	r3, r3
 8013b44:	429a      	cmp	r2, r3
 8013b46:	d10c      	bne.n	8013b62 <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 8013b48:	697b      	ldr	r3, [r7, #20]
 8013b4a:	681a      	ldr	r2, [r3, #0]
 8013b4c:	4b17      	ldr	r3, [pc, #92]	; (8013bac <tcp_input+0x4a0>)
 8013b4e:	695b      	ldr	r3, [r3, #20]
 8013b50:	429a      	cmp	r2, r3
 8013b52:	d00f      	beq.n	8013b74 <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 8013b54:	697b      	ldr	r3, [r7, #20]
 8013b56:	2b00      	cmp	r3, #0
 8013b58:	d00d      	beq.n	8013b76 <tcp_input+0x46a>
 8013b5a:	697b      	ldr	r3, [r7, #20]
 8013b5c:	681b      	ldr	r3, [r3, #0]
 8013b5e:	2b00      	cmp	r3, #0
 8013b60:	d009      	beq.n	8013b76 <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 8013b62:	697b      	ldr	r3, [r7, #20]
 8013b64:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8013b66:	697b      	ldr	r3, [r7, #20]
 8013b68:	68db      	ldr	r3, [r3, #12]
 8013b6a:	617b      	str	r3, [r7, #20]
 8013b6c:	697b      	ldr	r3, [r7, #20]
 8013b6e:	2b00      	cmp	r3, #0
 8013b70:	d1d1      	bne.n	8013b16 <tcp_input+0x40a>
 8013b72:	e000      	b.n	8013b76 <tcp_input+0x46a>
            break;
 8013b74:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 8013b76:	697b      	ldr	r3, [r7, #20]
 8013b78:	2b00      	cmp	r3, #0
 8013b7a:	d029      	beq.n	8013bd0 <tcp_input+0x4c4>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 8013b7c:	69bb      	ldr	r3, [r7, #24]
 8013b7e:	2b00      	cmp	r3, #0
 8013b80:	d00a      	beq.n	8013b98 <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 8013b82:	697b      	ldr	r3, [r7, #20]
 8013b84:	68da      	ldr	r2, [r3, #12]
 8013b86:	69bb      	ldr	r3, [r7, #24]
 8013b88:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 8013b8a:	4b10      	ldr	r3, [pc, #64]	; (8013bcc <tcp_input+0x4c0>)
 8013b8c:	681a      	ldr	r2, [r3, #0]
 8013b8e:	697b      	ldr	r3, [r7, #20]
 8013b90:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 8013b92:	4a0e      	ldr	r2, [pc, #56]	; (8013bcc <tcp_input+0x4c0>)
 8013b94:	697b      	ldr	r3, [r7, #20]
 8013b96:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 8013b98:	6978      	ldr	r0, [r7, #20]
 8013b9a:	f000 fa03 	bl	8013fa4 <tcp_listen_input>
      }
      pbuf_free(p);
 8013b9e:	6878      	ldr	r0, [r7, #4]
 8013ba0:	f7fd fce8 	bl	8011574 <pbuf_free>
      return;
 8013ba4:	e1a8      	b.n	8013ef8 <tcp_input+0x7ec>
 8013ba6:	bf00      	nop
 8013ba8:	200071d4 	.word	0x200071d4
 8013bac:	200008d0 	.word	0x200008d0
 8013bb0:	0801f538 	.word	0x0801f538
 8013bb4:	0801f664 	.word	0x0801f664
 8013bb8:	0801f584 	.word	0x0801f584
 8013bbc:	200071b8 	.word	0x200071b8
 8013bc0:	0801f690 	.word	0x0801f690
 8013bc4:	200071bc 	.word	0x200071bc
 8013bc8:	0801f6bc 	.word	0x0801f6bc
 8013bcc:	200071b4 	.word	0x200071b4
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 8013bd0:	69fb      	ldr	r3, [r7, #28]
 8013bd2:	2b00      	cmp	r3, #0
 8013bd4:	f000 8158 	beq.w	8013e88 <tcp_input+0x77c>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 8013bd8:	4b95      	ldr	r3, [pc, #596]	; (8013e30 <tcp_input+0x724>)
 8013bda:	2200      	movs	r2, #0
 8013bdc:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 8013bde:	687b      	ldr	r3, [r7, #4]
 8013be0:	891a      	ldrh	r2, [r3, #8]
 8013be2:	4b93      	ldr	r3, [pc, #588]	; (8013e30 <tcp_input+0x724>)
 8013be4:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 8013be6:	4a92      	ldr	r2, [pc, #584]	; (8013e30 <tcp_input+0x724>)
 8013be8:	687b      	ldr	r3, [r7, #4]
 8013bea:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 8013bec:	4b91      	ldr	r3, [pc, #580]	; (8013e34 <tcp_input+0x728>)
 8013bee:	681b      	ldr	r3, [r3, #0]
 8013bf0:	4a8f      	ldr	r2, [pc, #572]	; (8013e30 <tcp_input+0x724>)
 8013bf2:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 8013bf4:	4b90      	ldr	r3, [pc, #576]	; (8013e38 <tcp_input+0x72c>)
 8013bf6:	2200      	movs	r2, #0
 8013bf8:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 8013bfa:	4b90      	ldr	r3, [pc, #576]	; (8013e3c <tcp_input+0x730>)
 8013bfc:	2200      	movs	r2, #0
 8013bfe:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 8013c00:	4b8f      	ldr	r3, [pc, #572]	; (8013e40 <tcp_input+0x734>)
 8013c02:	2200      	movs	r2, #0
 8013c04:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 8013c06:	4b8f      	ldr	r3, [pc, #572]	; (8013e44 <tcp_input+0x738>)
 8013c08:	781b      	ldrb	r3, [r3, #0]
 8013c0a:	f003 0308 	and.w	r3, r3, #8
 8013c0e:	2b00      	cmp	r3, #0
 8013c10:	d006      	beq.n	8013c20 <tcp_input+0x514>
      p->flags |= PBUF_FLAG_PUSH;
 8013c12:	687b      	ldr	r3, [r7, #4]
 8013c14:	7b5b      	ldrb	r3, [r3, #13]
 8013c16:	f043 0301 	orr.w	r3, r3, #1
 8013c1a:	b2da      	uxtb	r2, r3
 8013c1c:	687b      	ldr	r3, [r7, #4]
 8013c1e:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 8013c20:	69fb      	ldr	r3, [r7, #28]
 8013c22:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8013c24:	2b00      	cmp	r3, #0
 8013c26:	d017      	beq.n	8013c58 <tcp_input+0x54c>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8013c28:	69f8      	ldr	r0, [r7, #28]
 8013c2a:	f7ff f877 	bl	8012d1c <tcp_process_refused_data>
 8013c2e:	4603      	mov	r3, r0
 8013c30:	f113 0f0d 	cmn.w	r3, #13
 8013c34:	d007      	beq.n	8013c46 <tcp_input+0x53a>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8013c36:	69fb      	ldr	r3, [r7, #28]
 8013c38:	6f9b      	ldr	r3, [r3, #120]	; 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8013c3a:	2b00      	cmp	r3, #0
 8013c3c:	d00c      	beq.n	8013c58 <tcp_input+0x54c>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8013c3e:	4b82      	ldr	r3, [pc, #520]	; (8013e48 <tcp_input+0x73c>)
 8013c40:	881b      	ldrh	r3, [r3, #0]
 8013c42:	2b00      	cmp	r3, #0
 8013c44:	d008      	beq.n	8013c58 <tcp_input+0x54c>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 8013c46:	69fb      	ldr	r3, [r7, #28]
 8013c48:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8013c4a:	2b00      	cmp	r3, #0
 8013c4c:	f040 80e4 	bne.w	8013e18 <tcp_input+0x70c>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 8013c50:	69f8      	ldr	r0, [r7, #28]
 8013c52:	f003 fe05 	bl	8017860 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 8013c56:	e0df      	b.n	8013e18 <tcp_input+0x70c>
      }
    }
    tcp_input_pcb = pcb;
 8013c58:	4a7c      	ldr	r2, [pc, #496]	; (8013e4c <tcp_input+0x740>)
 8013c5a:	69fb      	ldr	r3, [r7, #28]
 8013c5c:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 8013c5e:	69f8      	ldr	r0, [r7, #28]
 8013c60:	f000 fb18 	bl	8014294 <tcp_process>
 8013c64:	4603      	mov	r3, r0
 8013c66:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 8013c68:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8013c6c:	f113 0f0d 	cmn.w	r3, #13
 8013c70:	f000 80d4 	beq.w	8013e1c <tcp_input+0x710>
      if (recv_flags & TF_RESET) {
 8013c74:	4b71      	ldr	r3, [pc, #452]	; (8013e3c <tcp_input+0x730>)
 8013c76:	781b      	ldrb	r3, [r3, #0]
 8013c78:	f003 0308 	and.w	r3, r3, #8
 8013c7c:	2b00      	cmp	r3, #0
 8013c7e:	d015      	beq.n	8013cac <tcp_input+0x5a0>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 8013c80:	69fb      	ldr	r3, [r7, #28]
 8013c82:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8013c86:	2b00      	cmp	r3, #0
 8013c88:	d008      	beq.n	8013c9c <tcp_input+0x590>
 8013c8a:	69fb      	ldr	r3, [r7, #28]
 8013c8c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8013c90:	69fa      	ldr	r2, [r7, #28]
 8013c92:	6912      	ldr	r2, [r2, #16]
 8013c94:	f06f 010d 	mvn.w	r1, #13
 8013c98:	4610      	mov	r0, r2
 8013c9a:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8013c9c:	69f9      	ldr	r1, [r7, #28]
 8013c9e:	486c      	ldr	r0, [pc, #432]	; (8013e50 <tcp_input+0x744>)
 8013ca0:	f7ff fbbc 	bl	801341c <tcp_pcb_remove>
        tcp_free(pcb);
 8013ca4:	69f8      	ldr	r0, [r7, #28]
 8013ca6:	f7fd ff97 	bl	8011bd8 <tcp_free>
 8013caa:	e0da      	b.n	8013e62 <tcp_input+0x756>
      } else {
        err = ERR_OK;
 8013cac:	2300      	movs	r3, #0
 8013cae:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 8013cb0:	4b63      	ldr	r3, [pc, #396]	; (8013e40 <tcp_input+0x734>)
 8013cb2:	881b      	ldrh	r3, [r3, #0]
 8013cb4:	2b00      	cmp	r3, #0
 8013cb6:	d01d      	beq.n	8013cf4 <tcp_input+0x5e8>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 8013cb8:	4b61      	ldr	r3, [pc, #388]	; (8013e40 <tcp_input+0x734>)
 8013cba:	881b      	ldrh	r3, [r3, #0]
 8013cbc:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 8013cbe:	69fb      	ldr	r3, [r7, #28]
 8013cc0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8013cc4:	2b00      	cmp	r3, #0
 8013cc6:	d00a      	beq.n	8013cde <tcp_input+0x5d2>
 8013cc8:	69fb      	ldr	r3, [r7, #28]
 8013cca:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8013cce:	69fa      	ldr	r2, [r7, #28]
 8013cd0:	6910      	ldr	r0, [r2, #16]
 8013cd2:	89fa      	ldrh	r2, [r7, #14]
 8013cd4:	69f9      	ldr	r1, [r7, #28]
 8013cd6:	4798      	blx	r3
 8013cd8:	4603      	mov	r3, r0
 8013cda:	74fb      	strb	r3, [r7, #19]
 8013cdc:	e001      	b.n	8013ce2 <tcp_input+0x5d6>
 8013cde:	2300      	movs	r3, #0
 8013ce0:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 8013ce2:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8013ce6:	f113 0f0d 	cmn.w	r3, #13
 8013cea:	f000 8099 	beq.w	8013e20 <tcp_input+0x714>
              goto aborted;
            }
          }
          recv_acked = 0;
 8013cee:	4b54      	ldr	r3, [pc, #336]	; (8013e40 <tcp_input+0x734>)
 8013cf0:	2200      	movs	r2, #0
 8013cf2:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 8013cf4:	69f8      	ldr	r0, [r7, #28]
 8013cf6:	f000 f915 	bl	8013f24 <tcp_input_delayed_close>
 8013cfa:	4603      	mov	r3, r0
 8013cfc:	2b00      	cmp	r3, #0
 8013cfe:	f040 8091 	bne.w	8013e24 <tcp_input+0x718>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 8013d02:	4b4d      	ldr	r3, [pc, #308]	; (8013e38 <tcp_input+0x72c>)
 8013d04:	681b      	ldr	r3, [r3, #0]
 8013d06:	2b00      	cmp	r3, #0
 8013d08:	d041      	beq.n	8013d8e <tcp_input+0x682>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 8013d0a:	69fb      	ldr	r3, [r7, #28]
 8013d0c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8013d0e:	2b00      	cmp	r3, #0
 8013d10:	d006      	beq.n	8013d20 <tcp_input+0x614>
 8013d12:	4b50      	ldr	r3, [pc, #320]	; (8013e54 <tcp_input+0x748>)
 8013d14:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 8013d18:	494f      	ldr	r1, [pc, #316]	; (8013e58 <tcp_input+0x74c>)
 8013d1a:	4850      	ldr	r0, [pc, #320]	; (8013e5c <tcp_input+0x750>)
 8013d1c:	f007 facc 	bl	801b2b8 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 8013d20:	69fb      	ldr	r3, [r7, #28]
 8013d22:	8b5b      	ldrh	r3, [r3, #26]
 8013d24:	f003 0310 	and.w	r3, r3, #16
 8013d28:	2b00      	cmp	r3, #0
 8013d2a:	d008      	beq.n	8013d3e <tcp_input+0x632>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 8013d2c:	4b42      	ldr	r3, [pc, #264]	; (8013e38 <tcp_input+0x72c>)
 8013d2e:	681b      	ldr	r3, [r3, #0]
 8013d30:	4618      	mov	r0, r3
 8013d32:	f7fd fc1f 	bl	8011574 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 8013d36:	69f8      	ldr	r0, [r7, #28]
 8013d38:	f7fe fa36 	bl	80121a8 <tcp_abort>
            goto aborted;
 8013d3c:	e091      	b.n	8013e62 <tcp_input+0x756>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 8013d3e:	69fb      	ldr	r3, [r7, #28]
 8013d40:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8013d44:	2b00      	cmp	r3, #0
 8013d46:	d00c      	beq.n	8013d62 <tcp_input+0x656>
 8013d48:	69fb      	ldr	r3, [r7, #28]
 8013d4a:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8013d4e:	69fb      	ldr	r3, [r7, #28]
 8013d50:	6918      	ldr	r0, [r3, #16]
 8013d52:	4b39      	ldr	r3, [pc, #228]	; (8013e38 <tcp_input+0x72c>)
 8013d54:	681a      	ldr	r2, [r3, #0]
 8013d56:	2300      	movs	r3, #0
 8013d58:	69f9      	ldr	r1, [r7, #28]
 8013d5a:	47a0      	blx	r4
 8013d5c:	4603      	mov	r3, r0
 8013d5e:	74fb      	strb	r3, [r7, #19]
 8013d60:	e008      	b.n	8013d74 <tcp_input+0x668>
 8013d62:	4b35      	ldr	r3, [pc, #212]	; (8013e38 <tcp_input+0x72c>)
 8013d64:	681a      	ldr	r2, [r3, #0]
 8013d66:	2300      	movs	r3, #0
 8013d68:	69f9      	ldr	r1, [r7, #28]
 8013d6a:	2000      	movs	r0, #0
 8013d6c:	f7ff f8ae 	bl	8012ecc <tcp_recv_null>
 8013d70:	4603      	mov	r3, r0
 8013d72:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 8013d74:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8013d78:	f113 0f0d 	cmn.w	r3, #13
 8013d7c:	d054      	beq.n	8013e28 <tcp_input+0x71c>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 8013d7e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8013d82:	2b00      	cmp	r3, #0
 8013d84:	d003      	beq.n	8013d8e <tcp_input+0x682>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 8013d86:	4b2c      	ldr	r3, [pc, #176]	; (8013e38 <tcp_input+0x72c>)
 8013d88:	681a      	ldr	r2, [r3, #0]
 8013d8a:	69fb      	ldr	r3, [r7, #28]
 8013d8c:	679a      	str	r2, [r3, #120]	; 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 8013d8e:	4b2b      	ldr	r3, [pc, #172]	; (8013e3c <tcp_input+0x730>)
 8013d90:	781b      	ldrb	r3, [r3, #0]
 8013d92:	f003 0320 	and.w	r3, r3, #32
 8013d96:	2b00      	cmp	r3, #0
 8013d98:	d031      	beq.n	8013dfe <tcp_input+0x6f2>
          if (pcb->refused_data != NULL) {
 8013d9a:	69fb      	ldr	r3, [r7, #28]
 8013d9c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8013d9e:	2b00      	cmp	r3, #0
 8013da0:	d009      	beq.n	8013db6 <tcp_input+0x6aa>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 8013da2:	69fb      	ldr	r3, [r7, #28]
 8013da4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8013da6:	7b5a      	ldrb	r2, [r3, #13]
 8013da8:	69fb      	ldr	r3, [r7, #28]
 8013daa:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8013dac:	f042 0220 	orr.w	r2, r2, #32
 8013db0:	b2d2      	uxtb	r2, r2
 8013db2:	735a      	strb	r2, [r3, #13]
 8013db4:	e023      	b.n	8013dfe <tcp_input+0x6f2>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8013db6:	69fb      	ldr	r3, [r7, #28]
 8013db8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8013dba:	f241 62d0 	movw	r2, #5840	; 0x16d0
 8013dbe:	4293      	cmp	r3, r2
 8013dc0:	d005      	beq.n	8013dce <tcp_input+0x6c2>
              pcb->rcv_wnd++;
 8013dc2:	69fb      	ldr	r3, [r7, #28]
 8013dc4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8013dc6:	3301      	adds	r3, #1
 8013dc8:	b29a      	uxth	r2, r3
 8013dca:	69fb      	ldr	r3, [r7, #28]
 8013dcc:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 8013dce:	69fb      	ldr	r3, [r7, #28]
 8013dd0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8013dd4:	2b00      	cmp	r3, #0
 8013dd6:	d00b      	beq.n	8013df0 <tcp_input+0x6e4>
 8013dd8:	69fb      	ldr	r3, [r7, #28]
 8013dda:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8013dde:	69fb      	ldr	r3, [r7, #28]
 8013de0:	6918      	ldr	r0, [r3, #16]
 8013de2:	2300      	movs	r3, #0
 8013de4:	2200      	movs	r2, #0
 8013de6:	69f9      	ldr	r1, [r7, #28]
 8013de8:	47a0      	blx	r4
 8013dea:	4603      	mov	r3, r0
 8013dec:	74fb      	strb	r3, [r7, #19]
 8013dee:	e001      	b.n	8013df4 <tcp_input+0x6e8>
 8013df0:	2300      	movs	r3, #0
 8013df2:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 8013df4:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8013df8:	f113 0f0d 	cmn.w	r3, #13
 8013dfc:	d016      	beq.n	8013e2c <tcp_input+0x720>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 8013dfe:	4b13      	ldr	r3, [pc, #76]	; (8013e4c <tcp_input+0x740>)
 8013e00:	2200      	movs	r2, #0
 8013e02:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 8013e04:	69f8      	ldr	r0, [r7, #28]
 8013e06:	f000 f88d 	bl	8013f24 <tcp_input_delayed_close>
 8013e0a:	4603      	mov	r3, r0
 8013e0c:	2b00      	cmp	r3, #0
 8013e0e:	d127      	bne.n	8013e60 <tcp_input+0x754>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 8013e10:	69f8      	ldr	r0, [r7, #28]
 8013e12:	f002 ff1f 	bl	8016c54 <tcp_output>
 8013e16:	e024      	b.n	8013e62 <tcp_input+0x756>
        goto aborted;
 8013e18:	bf00      	nop
 8013e1a:	e022      	b.n	8013e62 <tcp_input+0x756>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 8013e1c:	bf00      	nop
 8013e1e:	e020      	b.n	8013e62 <tcp_input+0x756>
              goto aborted;
 8013e20:	bf00      	nop
 8013e22:	e01e      	b.n	8013e62 <tcp_input+0x756>
          goto aborted;
 8013e24:	bf00      	nop
 8013e26:	e01c      	b.n	8013e62 <tcp_input+0x756>
            goto aborted;
 8013e28:	bf00      	nop
 8013e2a:	e01a      	b.n	8013e62 <tcp_input+0x756>
              goto aborted;
 8013e2c:	bf00      	nop
 8013e2e:	e018      	b.n	8013e62 <tcp_input+0x756>
 8013e30:	200071c4 	.word	0x200071c4
 8013e34:	200071d4 	.word	0x200071d4
 8013e38:	200071f4 	.word	0x200071f4
 8013e3c:	200071f1 	.word	0x200071f1
 8013e40:	200071ec 	.word	0x200071ec
 8013e44:	200071f0 	.word	0x200071f0
 8013e48:	200071ee 	.word	0x200071ee
 8013e4c:	200071f8 	.word	0x200071f8
 8013e50:	200071b8 	.word	0x200071b8
 8013e54:	0801f538 	.word	0x0801f538
 8013e58:	0801f6ec 	.word	0x0801f6ec
 8013e5c:	0801f584 	.word	0x0801f584
          goto aborted;
 8013e60:	bf00      	nop
    tcp_input_pcb = NULL;
 8013e62:	4b27      	ldr	r3, [pc, #156]	; (8013f00 <tcp_input+0x7f4>)
 8013e64:	2200      	movs	r2, #0
 8013e66:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 8013e68:	4b26      	ldr	r3, [pc, #152]	; (8013f04 <tcp_input+0x7f8>)
 8013e6a:	2200      	movs	r2, #0
 8013e6c:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 8013e6e:	4b26      	ldr	r3, [pc, #152]	; (8013f08 <tcp_input+0x7fc>)
 8013e70:	685b      	ldr	r3, [r3, #4]
 8013e72:	2b00      	cmp	r3, #0
 8013e74:	d03f      	beq.n	8013ef6 <tcp_input+0x7ea>
      pbuf_free(inseg.p);
 8013e76:	4b24      	ldr	r3, [pc, #144]	; (8013f08 <tcp_input+0x7fc>)
 8013e78:	685b      	ldr	r3, [r3, #4]
 8013e7a:	4618      	mov	r0, r3
 8013e7c:	f7fd fb7a 	bl	8011574 <pbuf_free>
      inseg.p = NULL;
 8013e80:	4b21      	ldr	r3, [pc, #132]	; (8013f08 <tcp_input+0x7fc>)
 8013e82:	2200      	movs	r2, #0
 8013e84:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 8013e86:	e036      	b.n	8013ef6 <tcp_input+0x7ea>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 8013e88:	4b20      	ldr	r3, [pc, #128]	; (8013f0c <tcp_input+0x800>)
 8013e8a:	681b      	ldr	r3, [r3, #0]
 8013e8c:	899b      	ldrh	r3, [r3, #12]
 8013e8e:	b29b      	uxth	r3, r3
 8013e90:	4618      	mov	r0, r3
 8013e92:	f7fb ff6b 	bl	800fd6c <lwip_htons>
 8013e96:	4603      	mov	r3, r0
 8013e98:	b2db      	uxtb	r3, r3
 8013e9a:	f003 0304 	and.w	r3, r3, #4
 8013e9e:	2b00      	cmp	r3, #0
 8013ea0:	d118      	bne.n	8013ed4 <tcp_input+0x7c8>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8013ea2:	4b1b      	ldr	r3, [pc, #108]	; (8013f10 <tcp_input+0x804>)
 8013ea4:	6819      	ldr	r1, [r3, #0]
 8013ea6:	4b1b      	ldr	r3, [pc, #108]	; (8013f14 <tcp_input+0x808>)
 8013ea8:	881b      	ldrh	r3, [r3, #0]
 8013eaa:	461a      	mov	r2, r3
 8013eac:	4b1a      	ldr	r3, [pc, #104]	; (8013f18 <tcp_input+0x80c>)
 8013eae:	681b      	ldr	r3, [r3, #0]
 8013eb0:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8013eb2:	4b16      	ldr	r3, [pc, #88]	; (8013f0c <tcp_input+0x800>)
 8013eb4:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8013eb6:	885b      	ldrh	r3, [r3, #2]
 8013eb8:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8013eba:	4a14      	ldr	r2, [pc, #80]	; (8013f0c <tcp_input+0x800>)
 8013ebc:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8013ebe:	8812      	ldrh	r2, [r2, #0]
 8013ec0:	b292      	uxth	r2, r2
 8013ec2:	9202      	str	r2, [sp, #8]
 8013ec4:	9301      	str	r3, [sp, #4]
 8013ec6:	4b15      	ldr	r3, [pc, #84]	; (8013f1c <tcp_input+0x810>)
 8013ec8:	9300      	str	r3, [sp, #0]
 8013eca:	4b15      	ldr	r3, [pc, #84]	; (8013f20 <tcp_input+0x814>)
 8013ecc:	4602      	mov	r2, r0
 8013ece:	2000      	movs	r0, #0
 8013ed0:	f003 fc74 	bl	80177bc <tcp_rst>
    pbuf_free(p);
 8013ed4:	6878      	ldr	r0, [r7, #4]
 8013ed6:	f7fd fb4d 	bl	8011574 <pbuf_free>
  return;
 8013eda:	e00c      	b.n	8013ef6 <tcp_input+0x7ea>
    goto dropped;
 8013edc:	bf00      	nop
 8013ede:	e006      	b.n	8013eee <tcp_input+0x7e2>
    goto dropped;
 8013ee0:	bf00      	nop
 8013ee2:	e004      	b.n	8013eee <tcp_input+0x7e2>
    goto dropped;
 8013ee4:	bf00      	nop
 8013ee6:	e002      	b.n	8013eee <tcp_input+0x7e2>
      goto dropped;
 8013ee8:	bf00      	nop
 8013eea:	e000      	b.n	8013eee <tcp_input+0x7e2>
      goto dropped;
 8013eec:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 8013eee:	6878      	ldr	r0, [r7, #4]
 8013ef0:	f7fd fb40 	bl	8011574 <pbuf_free>
 8013ef4:	e000      	b.n	8013ef8 <tcp_input+0x7ec>
  return;
 8013ef6:	bf00      	nop
}
 8013ef8:	3724      	adds	r7, #36	; 0x24
 8013efa:	46bd      	mov	sp, r7
 8013efc:	bd90      	pop	{r4, r7, pc}
 8013efe:	bf00      	nop
 8013f00:	200071f8 	.word	0x200071f8
 8013f04:	200071f4 	.word	0x200071f4
 8013f08:	200071c4 	.word	0x200071c4
 8013f0c:	200071d4 	.word	0x200071d4
 8013f10:	200071e8 	.word	0x200071e8
 8013f14:	200071ee 	.word	0x200071ee
 8013f18:	200071e4 	.word	0x200071e4
 8013f1c:	200008e0 	.word	0x200008e0
 8013f20:	200008e4 	.word	0x200008e4

08013f24 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 8013f24:	b580      	push	{r7, lr}
 8013f26:	b082      	sub	sp, #8
 8013f28:	af00      	add	r7, sp, #0
 8013f2a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 8013f2c:	687b      	ldr	r3, [r7, #4]
 8013f2e:	2b00      	cmp	r3, #0
 8013f30:	d106      	bne.n	8013f40 <tcp_input_delayed_close+0x1c>
 8013f32:	4b17      	ldr	r3, [pc, #92]	; (8013f90 <tcp_input_delayed_close+0x6c>)
 8013f34:	f240 225a 	movw	r2, #602	; 0x25a
 8013f38:	4916      	ldr	r1, [pc, #88]	; (8013f94 <tcp_input_delayed_close+0x70>)
 8013f3a:	4817      	ldr	r0, [pc, #92]	; (8013f98 <tcp_input_delayed_close+0x74>)
 8013f3c:	f007 f9bc 	bl	801b2b8 <iprintf>

  if (recv_flags & TF_CLOSED) {
 8013f40:	4b16      	ldr	r3, [pc, #88]	; (8013f9c <tcp_input_delayed_close+0x78>)
 8013f42:	781b      	ldrb	r3, [r3, #0]
 8013f44:	f003 0310 	and.w	r3, r3, #16
 8013f48:	2b00      	cmp	r3, #0
 8013f4a:	d01c      	beq.n	8013f86 <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 8013f4c:	687b      	ldr	r3, [r7, #4]
 8013f4e:	8b5b      	ldrh	r3, [r3, #26]
 8013f50:	f003 0310 	and.w	r3, r3, #16
 8013f54:	2b00      	cmp	r3, #0
 8013f56:	d10d      	bne.n	8013f74 <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 8013f58:	687b      	ldr	r3, [r7, #4]
 8013f5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8013f5e:	2b00      	cmp	r3, #0
 8013f60:	d008      	beq.n	8013f74 <tcp_input_delayed_close+0x50>
 8013f62:	687b      	ldr	r3, [r7, #4]
 8013f64:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8013f68:	687a      	ldr	r2, [r7, #4]
 8013f6a:	6912      	ldr	r2, [r2, #16]
 8013f6c:	f06f 010e 	mvn.w	r1, #14
 8013f70:	4610      	mov	r0, r2
 8013f72:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8013f74:	6879      	ldr	r1, [r7, #4]
 8013f76:	480a      	ldr	r0, [pc, #40]	; (8013fa0 <tcp_input_delayed_close+0x7c>)
 8013f78:	f7ff fa50 	bl	801341c <tcp_pcb_remove>
    tcp_free(pcb);
 8013f7c:	6878      	ldr	r0, [r7, #4]
 8013f7e:	f7fd fe2b 	bl	8011bd8 <tcp_free>
    return 1;
 8013f82:	2301      	movs	r3, #1
 8013f84:	e000      	b.n	8013f88 <tcp_input_delayed_close+0x64>
  }
  return 0;
 8013f86:	2300      	movs	r3, #0
}
 8013f88:	4618      	mov	r0, r3
 8013f8a:	3708      	adds	r7, #8
 8013f8c:	46bd      	mov	sp, r7
 8013f8e:	bd80      	pop	{r7, pc}
 8013f90:	0801f538 	.word	0x0801f538
 8013f94:	0801f708 	.word	0x0801f708
 8013f98:	0801f584 	.word	0x0801f584
 8013f9c:	200071f1 	.word	0x200071f1
 8013fa0:	200071b8 	.word	0x200071b8

08013fa4 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 8013fa4:	b590      	push	{r4, r7, lr}
 8013fa6:	b08b      	sub	sp, #44	; 0x2c
 8013fa8:	af04      	add	r7, sp, #16
 8013faa:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 8013fac:	4b6f      	ldr	r3, [pc, #444]	; (801416c <tcp_listen_input+0x1c8>)
 8013fae:	781b      	ldrb	r3, [r3, #0]
 8013fb0:	f003 0304 	and.w	r3, r3, #4
 8013fb4:	2b00      	cmp	r3, #0
 8013fb6:	f040 80d2 	bne.w	801415e <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 8013fba:	687b      	ldr	r3, [r7, #4]
 8013fbc:	2b00      	cmp	r3, #0
 8013fbe:	d106      	bne.n	8013fce <tcp_listen_input+0x2a>
 8013fc0:	4b6b      	ldr	r3, [pc, #428]	; (8014170 <tcp_listen_input+0x1cc>)
 8013fc2:	f240 2281 	movw	r2, #641	; 0x281
 8013fc6:	496b      	ldr	r1, [pc, #428]	; (8014174 <tcp_listen_input+0x1d0>)
 8013fc8:	486b      	ldr	r0, [pc, #428]	; (8014178 <tcp_listen_input+0x1d4>)
 8013fca:	f007 f975 	bl	801b2b8 <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 8013fce:	4b67      	ldr	r3, [pc, #412]	; (801416c <tcp_listen_input+0x1c8>)
 8013fd0:	781b      	ldrb	r3, [r3, #0]
 8013fd2:	f003 0310 	and.w	r3, r3, #16
 8013fd6:	2b00      	cmp	r3, #0
 8013fd8:	d019      	beq.n	801400e <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8013fda:	4b68      	ldr	r3, [pc, #416]	; (801417c <tcp_listen_input+0x1d8>)
 8013fdc:	6819      	ldr	r1, [r3, #0]
 8013fde:	4b68      	ldr	r3, [pc, #416]	; (8014180 <tcp_listen_input+0x1dc>)
 8013fe0:	881b      	ldrh	r3, [r3, #0]
 8013fe2:	461a      	mov	r2, r3
 8013fe4:	4b67      	ldr	r3, [pc, #412]	; (8014184 <tcp_listen_input+0x1e0>)
 8013fe6:	681b      	ldr	r3, [r3, #0]
 8013fe8:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8013fea:	4b67      	ldr	r3, [pc, #412]	; (8014188 <tcp_listen_input+0x1e4>)
 8013fec:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8013fee:	885b      	ldrh	r3, [r3, #2]
 8013ff0:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8013ff2:	4a65      	ldr	r2, [pc, #404]	; (8014188 <tcp_listen_input+0x1e4>)
 8013ff4:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8013ff6:	8812      	ldrh	r2, [r2, #0]
 8013ff8:	b292      	uxth	r2, r2
 8013ffa:	9202      	str	r2, [sp, #8]
 8013ffc:	9301      	str	r3, [sp, #4]
 8013ffe:	4b63      	ldr	r3, [pc, #396]	; (801418c <tcp_listen_input+0x1e8>)
 8014000:	9300      	str	r3, [sp, #0]
 8014002:	4b63      	ldr	r3, [pc, #396]	; (8014190 <tcp_listen_input+0x1ec>)
 8014004:	4602      	mov	r2, r0
 8014006:	6878      	ldr	r0, [r7, #4]
 8014008:	f003 fbd8 	bl	80177bc <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 801400c:	e0a9      	b.n	8014162 <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 801400e:	4b57      	ldr	r3, [pc, #348]	; (801416c <tcp_listen_input+0x1c8>)
 8014010:	781b      	ldrb	r3, [r3, #0]
 8014012:	f003 0302 	and.w	r3, r3, #2
 8014016:	2b00      	cmp	r3, #0
 8014018:	f000 80a3 	beq.w	8014162 <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 801401c:	687b      	ldr	r3, [r7, #4]
 801401e:	7d5b      	ldrb	r3, [r3, #21]
 8014020:	4618      	mov	r0, r3
 8014022:	f7ff f877 	bl	8013114 <tcp_alloc>
 8014026:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 8014028:	697b      	ldr	r3, [r7, #20]
 801402a:	2b00      	cmp	r3, #0
 801402c:	d111      	bne.n	8014052 <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 801402e:	687b      	ldr	r3, [r7, #4]
 8014030:	699b      	ldr	r3, [r3, #24]
 8014032:	2b00      	cmp	r3, #0
 8014034:	d00a      	beq.n	801404c <tcp_listen_input+0xa8>
 8014036:	687b      	ldr	r3, [r7, #4]
 8014038:	699b      	ldr	r3, [r3, #24]
 801403a:	687a      	ldr	r2, [r7, #4]
 801403c:	6910      	ldr	r0, [r2, #16]
 801403e:	f04f 32ff 	mov.w	r2, #4294967295
 8014042:	2100      	movs	r1, #0
 8014044:	4798      	blx	r3
 8014046:	4603      	mov	r3, r0
 8014048:	73bb      	strb	r3, [r7, #14]
      return;
 801404a:	e08b      	b.n	8014164 <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 801404c:	23f0      	movs	r3, #240	; 0xf0
 801404e:	73bb      	strb	r3, [r7, #14]
      return;
 8014050:	e088      	b.n	8014164 <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 8014052:	4b50      	ldr	r3, [pc, #320]	; (8014194 <tcp_listen_input+0x1f0>)
 8014054:	695a      	ldr	r2, [r3, #20]
 8014056:	697b      	ldr	r3, [r7, #20]
 8014058:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 801405a:	4b4e      	ldr	r3, [pc, #312]	; (8014194 <tcp_listen_input+0x1f0>)
 801405c:	691a      	ldr	r2, [r3, #16]
 801405e:	697b      	ldr	r3, [r7, #20]
 8014060:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 8014062:	687b      	ldr	r3, [r7, #4]
 8014064:	8ada      	ldrh	r2, [r3, #22]
 8014066:	697b      	ldr	r3, [r7, #20]
 8014068:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 801406a:	4b47      	ldr	r3, [pc, #284]	; (8014188 <tcp_listen_input+0x1e4>)
 801406c:	681b      	ldr	r3, [r3, #0]
 801406e:	881b      	ldrh	r3, [r3, #0]
 8014070:	b29a      	uxth	r2, r3
 8014072:	697b      	ldr	r3, [r7, #20]
 8014074:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 8014076:	697b      	ldr	r3, [r7, #20]
 8014078:	2203      	movs	r2, #3
 801407a:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 801407c:	4b41      	ldr	r3, [pc, #260]	; (8014184 <tcp_listen_input+0x1e0>)
 801407e:	681b      	ldr	r3, [r3, #0]
 8014080:	1c5a      	adds	r2, r3, #1
 8014082:	697b      	ldr	r3, [r7, #20]
 8014084:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 8014086:	697b      	ldr	r3, [r7, #20]
 8014088:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801408a:	697b      	ldr	r3, [r7, #20]
 801408c:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 801408e:	6978      	ldr	r0, [r7, #20]
 8014090:	f7ff fa58 	bl	8013544 <tcp_next_iss>
 8014094:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 8014096:	697b      	ldr	r3, [r7, #20]
 8014098:	693a      	ldr	r2, [r7, #16]
 801409a:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_nxt = iss;
 801409c:	697b      	ldr	r3, [r7, #20]
 801409e:	693a      	ldr	r2, [r7, #16]
 80140a0:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->lastack = iss;
 80140a2:	697b      	ldr	r3, [r7, #20]
 80140a4:	693a      	ldr	r2, [r7, #16]
 80140a6:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 80140a8:	697b      	ldr	r3, [r7, #20]
 80140aa:	693a      	ldr	r2, [r7, #16]
 80140ac:	65da      	str	r2, [r3, #92]	; 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 80140ae:	4b35      	ldr	r3, [pc, #212]	; (8014184 <tcp_listen_input+0x1e0>)
 80140b0:	681b      	ldr	r3, [r3, #0]
 80140b2:	1e5a      	subs	r2, r3, #1
 80140b4:	697b      	ldr	r3, [r7, #20]
 80140b6:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 80140b8:	687b      	ldr	r3, [r7, #4]
 80140ba:	691a      	ldr	r2, [r3, #16]
 80140bc:	697b      	ldr	r3, [r7, #20]
 80140be:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 80140c0:	697b      	ldr	r3, [r7, #20]
 80140c2:	687a      	ldr	r2, [r7, #4]
 80140c4:	67da      	str	r2, [r3, #124]	; 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 80140c6:	687b      	ldr	r3, [r7, #4]
 80140c8:	7a5b      	ldrb	r3, [r3, #9]
 80140ca:	f003 030c 	and.w	r3, r3, #12
 80140ce:	b2da      	uxtb	r2, r3
 80140d0:	697b      	ldr	r3, [r7, #20]
 80140d2:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 80140d4:	687b      	ldr	r3, [r7, #4]
 80140d6:	7a1a      	ldrb	r2, [r3, #8]
 80140d8:	697b      	ldr	r3, [r7, #20]
 80140da:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 80140dc:	4b2e      	ldr	r3, [pc, #184]	; (8014198 <tcp_listen_input+0x1f4>)
 80140de:	681a      	ldr	r2, [r3, #0]
 80140e0:	697b      	ldr	r3, [r7, #20]
 80140e2:	60da      	str	r2, [r3, #12]
 80140e4:	4a2c      	ldr	r2, [pc, #176]	; (8014198 <tcp_listen_input+0x1f4>)
 80140e6:	697b      	ldr	r3, [r7, #20]
 80140e8:	6013      	str	r3, [r2, #0]
 80140ea:	f003 fd29 	bl	8017b40 <tcp_timer_needed>
 80140ee:	4b2b      	ldr	r3, [pc, #172]	; (801419c <tcp_listen_input+0x1f8>)
 80140f0:	2201      	movs	r2, #1
 80140f2:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 80140f4:	6978      	ldr	r0, [r7, #20]
 80140f6:	f001 fd8f 	bl	8015c18 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 80140fa:	4b23      	ldr	r3, [pc, #140]	; (8014188 <tcp_listen_input+0x1e4>)
 80140fc:	681b      	ldr	r3, [r3, #0]
 80140fe:	89db      	ldrh	r3, [r3, #14]
 8014100:	b29a      	uxth	r2, r3
 8014102:	697b      	ldr	r3, [r7, #20]
 8014104:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 8014108:	697b      	ldr	r3, [r7, #20]
 801410a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 801410e:	697b      	ldr	r3, [r7, #20]
 8014110:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 8014114:	697b      	ldr	r3, [r7, #20]
 8014116:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 8014118:	697b      	ldr	r3, [r7, #20]
 801411a:	3304      	adds	r3, #4
 801411c:	4618      	mov	r0, r3
 801411e:	f005 f913 	bl	8019348 <ip4_route>
 8014122:	4601      	mov	r1, r0
 8014124:	697b      	ldr	r3, [r7, #20]
 8014126:	3304      	adds	r3, #4
 8014128:	461a      	mov	r2, r3
 801412a:	4620      	mov	r0, r4
 801412c:	f7ff fa30 	bl	8013590 <tcp_eff_send_mss_netif>
 8014130:	4603      	mov	r3, r0
 8014132:	461a      	mov	r2, r3
 8014134:	697b      	ldr	r3, [r7, #20]
 8014136:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 8014138:	2112      	movs	r1, #18
 801413a:	6978      	ldr	r0, [r7, #20]
 801413c:	f002 fc9c 	bl	8016a78 <tcp_enqueue_flags>
 8014140:	4603      	mov	r3, r0
 8014142:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 8014144:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8014148:	2b00      	cmp	r3, #0
 801414a:	d004      	beq.n	8014156 <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 801414c:	2100      	movs	r1, #0
 801414e:	6978      	ldr	r0, [r7, #20]
 8014150:	f7fd ff6c 	bl	801202c <tcp_abandon>
      return;
 8014154:	e006      	b.n	8014164 <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 8014156:	6978      	ldr	r0, [r7, #20]
 8014158:	f002 fd7c 	bl	8016c54 <tcp_output>
  return;
 801415c:	e001      	b.n	8014162 <tcp_listen_input+0x1be>
    return;
 801415e:	bf00      	nop
 8014160:	e000      	b.n	8014164 <tcp_listen_input+0x1c0>
  return;
 8014162:	bf00      	nop
}
 8014164:	371c      	adds	r7, #28
 8014166:	46bd      	mov	sp, r7
 8014168:	bd90      	pop	{r4, r7, pc}
 801416a:	bf00      	nop
 801416c:	200071f0 	.word	0x200071f0
 8014170:	0801f538 	.word	0x0801f538
 8014174:	0801f730 	.word	0x0801f730
 8014178:	0801f584 	.word	0x0801f584
 801417c:	200071e8 	.word	0x200071e8
 8014180:	200071ee 	.word	0x200071ee
 8014184:	200071e4 	.word	0x200071e4
 8014188:	200071d4 	.word	0x200071d4
 801418c:	200008e0 	.word	0x200008e0
 8014190:	200008e4 	.word	0x200008e4
 8014194:	200008d0 	.word	0x200008d0
 8014198:	200071b8 	.word	0x200071b8
 801419c:	200071c0 	.word	0x200071c0

080141a0 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 80141a0:	b580      	push	{r7, lr}
 80141a2:	b086      	sub	sp, #24
 80141a4:	af04      	add	r7, sp, #16
 80141a6:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 80141a8:	4b2f      	ldr	r3, [pc, #188]	; (8014268 <tcp_timewait_input+0xc8>)
 80141aa:	781b      	ldrb	r3, [r3, #0]
 80141ac:	f003 0304 	and.w	r3, r3, #4
 80141b0:	2b00      	cmp	r3, #0
 80141b2:	d153      	bne.n	801425c <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 80141b4:	687b      	ldr	r3, [r7, #4]
 80141b6:	2b00      	cmp	r3, #0
 80141b8:	d106      	bne.n	80141c8 <tcp_timewait_input+0x28>
 80141ba:	4b2c      	ldr	r3, [pc, #176]	; (801426c <tcp_timewait_input+0xcc>)
 80141bc:	f240 22ee 	movw	r2, #750	; 0x2ee
 80141c0:	492b      	ldr	r1, [pc, #172]	; (8014270 <tcp_timewait_input+0xd0>)
 80141c2:	482c      	ldr	r0, [pc, #176]	; (8014274 <tcp_timewait_input+0xd4>)
 80141c4:	f007 f878 	bl	801b2b8 <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 80141c8:	4b27      	ldr	r3, [pc, #156]	; (8014268 <tcp_timewait_input+0xc8>)
 80141ca:	781b      	ldrb	r3, [r3, #0]
 80141cc:	f003 0302 	and.w	r3, r3, #2
 80141d0:	2b00      	cmp	r3, #0
 80141d2:	d02a      	beq.n	801422a <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 80141d4:	4b28      	ldr	r3, [pc, #160]	; (8014278 <tcp_timewait_input+0xd8>)
 80141d6:	681a      	ldr	r2, [r3, #0]
 80141d8:	687b      	ldr	r3, [r7, #4]
 80141da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80141dc:	1ad3      	subs	r3, r2, r3
 80141de:	2b00      	cmp	r3, #0
 80141e0:	db2d      	blt.n	801423e <tcp_timewait_input+0x9e>
 80141e2:	4b25      	ldr	r3, [pc, #148]	; (8014278 <tcp_timewait_input+0xd8>)
 80141e4:	681a      	ldr	r2, [r3, #0]
 80141e6:	687b      	ldr	r3, [r7, #4]
 80141e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80141ea:	6879      	ldr	r1, [r7, #4]
 80141ec:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 80141ee:	440b      	add	r3, r1
 80141f0:	1ad3      	subs	r3, r2, r3
 80141f2:	2b00      	cmp	r3, #0
 80141f4:	dc23      	bgt.n	801423e <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80141f6:	4b21      	ldr	r3, [pc, #132]	; (801427c <tcp_timewait_input+0xdc>)
 80141f8:	6819      	ldr	r1, [r3, #0]
 80141fa:	4b21      	ldr	r3, [pc, #132]	; (8014280 <tcp_timewait_input+0xe0>)
 80141fc:	881b      	ldrh	r3, [r3, #0]
 80141fe:	461a      	mov	r2, r3
 8014200:	4b1d      	ldr	r3, [pc, #116]	; (8014278 <tcp_timewait_input+0xd8>)
 8014202:	681b      	ldr	r3, [r3, #0]
 8014204:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8014206:	4b1f      	ldr	r3, [pc, #124]	; (8014284 <tcp_timewait_input+0xe4>)
 8014208:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801420a:	885b      	ldrh	r3, [r3, #2]
 801420c:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801420e:	4a1d      	ldr	r2, [pc, #116]	; (8014284 <tcp_timewait_input+0xe4>)
 8014210:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8014212:	8812      	ldrh	r2, [r2, #0]
 8014214:	b292      	uxth	r2, r2
 8014216:	9202      	str	r2, [sp, #8]
 8014218:	9301      	str	r3, [sp, #4]
 801421a:	4b1b      	ldr	r3, [pc, #108]	; (8014288 <tcp_timewait_input+0xe8>)
 801421c:	9300      	str	r3, [sp, #0]
 801421e:	4b1b      	ldr	r3, [pc, #108]	; (801428c <tcp_timewait_input+0xec>)
 8014220:	4602      	mov	r2, r0
 8014222:	6878      	ldr	r0, [r7, #4]
 8014224:	f003 faca 	bl	80177bc <tcp_rst>
      return;
 8014228:	e01b      	b.n	8014262 <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 801422a:	4b0f      	ldr	r3, [pc, #60]	; (8014268 <tcp_timewait_input+0xc8>)
 801422c:	781b      	ldrb	r3, [r3, #0]
 801422e:	f003 0301 	and.w	r3, r3, #1
 8014232:	2b00      	cmp	r3, #0
 8014234:	d003      	beq.n	801423e <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 8014236:	4b16      	ldr	r3, [pc, #88]	; (8014290 <tcp_timewait_input+0xf0>)
 8014238:	681a      	ldr	r2, [r3, #0]
 801423a:	687b      	ldr	r3, [r7, #4]
 801423c:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 801423e:	4b10      	ldr	r3, [pc, #64]	; (8014280 <tcp_timewait_input+0xe0>)
 8014240:	881b      	ldrh	r3, [r3, #0]
 8014242:	2b00      	cmp	r3, #0
 8014244:	d00c      	beq.n	8014260 <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 8014246:	687b      	ldr	r3, [r7, #4]
 8014248:	8b5b      	ldrh	r3, [r3, #26]
 801424a:	f043 0302 	orr.w	r3, r3, #2
 801424e:	b29a      	uxth	r2, r3
 8014250:	687b      	ldr	r3, [r7, #4]
 8014252:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8014254:	6878      	ldr	r0, [r7, #4]
 8014256:	f002 fcfd 	bl	8016c54 <tcp_output>
  }
  return;
 801425a:	e001      	b.n	8014260 <tcp_timewait_input+0xc0>
    return;
 801425c:	bf00      	nop
 801425e:	e000      	b.n	8014262 <tcp_timewait_input+0xc2>
  return;
 8014260:	bf00      	nop
}
 8014262:	3708      	adds	r7, #8
 8014264:	46bd      	mov	sp, r7
 8014266:	bd80      	pop	{r7, pc}
 8014268:	200071f0 	.word	0x200071f0
 801426c:	0801f538 	.word	0x0801f538
 8014270:	0801f750 	.word	0x0801f750
 8014274:	0801f584 	.word	0x0801f584
 8014278:	200071e4 	.word	0x200071e4
 801427c:	200071e8 	.word	0x200071e8
 8014280:	200071ee 	.word	0x200071ee
 8014284:	200071d4 	.word	0x200071d4
 8014288:	200008e0 	.word	0x200008e0
 801428c:	200008e4 	.word	0x200008e4
 8014290:	200071ac 	.word	0x200071ac

08014294 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 8014294:	b590      	push	{r4, r7, lr}
 8014296:	b08d      	sub	sp, #52	; 0x34
 8014298:	af04      	add	r7, sp, #16
 801429a:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 801429c:	2300      	movs	r3, #0
 801429e:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 80142a0:	2300      	movs	r3, #0
 80142a2:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 80142a4:	687b      	ldr	r3, [r7, #4]
 80142a6:	2b00      	cmp	r3, #0
 80142a8:	d106      	bne.n	80142b8 <tcp_process+0x24>
 80142aa:	4b9d      	ldr	r3, [pc, #628]	; (8014520 <tcp_process+0x28c>)
 80142ac:	f44f 7247 	mov.w	r2, #796	; 0x31c
 80142b0:	499c      	ldr	r1, [pc, #624]	; (8014524 <tcp_process+0x290>)
 80142b2:	489d      	ldr	r0, [pc, #628]	; (8014528 <tcp_process+0x294>)
 80142b4:	f007 f800 	bl	801b2b8 <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 80142b8:	4b9c      	ldr	r3, [pc, #624]	; (801452c <tcp_process+0x298>)
 80142ba:	781b      	ldrb	r3, [r3, #0]
 80142bc:	f003 0304 	and.w	r3, r3, #4
 80142c0:	2b00      	cmp	r3, #0
 80142c2:	d04e      	beq.n	8014362 <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 80142c4:	687b      	ldr	r3, [r7, #4]
 80142c6:	7d1b      	ldrb	r3, [r3, #20]
 80142c8:	2b02      	cmp	r3, #2
 80142ca:	d108      	bne.n	80142de <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 80142cc:	687b      	ldr	r3, [r7, #4]
 80142ce:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80142d0:	4b97      	ldr	r3, [pc, #604]	; (8014530 <tcp_process+0x29c>)
 80142d2:	681b      	ldr	r3, [r3, #0]
 80142d4:	429a      	cmp	r2, r3
 80142d6:	d123      	bne.n	8014320 <tcp_process+0x8c>
        acceptable = 1;
 80142d8:	2301      	movs	r3, #1
 80142da:	76fb      	strb	r3, [r7, #27]
 80142dc:	e020      	b.n	8014320 <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 80142de:	687b      	ldr	r3, [r7, #4]
 80142e0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80142e2:	4b94      	ldr	r3, [pc, #592]	; (8014534 <tcp_process+0x2a0>)
 80142e4:	681b      	ldr	r3, [r3, #0]
 80142e6:	429a      	cmp	r2, r3
 80142e8:	d102      	bne.n	80142f0 <tcp_process+0x5c>
        acceptable = 1;
 80142ea:	2301      	movs	r3, #1
 80142ec:	76fb      	strb	r3, [r7, #27]
 80142ee:	e017      	b.n	8014320 <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 80142f0:	4b90      	ldr	r3, [pc, #576]	; (8014534 <tcp_process+0x2a0>)
 80142f2:	681a      	ldr	r2, [r3, #0]
 80142f4:	687b      	ldr	r3, [r7, #4]
 80142f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80142f8:	1ad3      	subs	r3, r2, r3
 80142fa:	2b00      	cmp	r3, #0
 80142fc:	db10      	blt.n	8014320 <tcp_process+0x8c>
 80142fe:	4b8d      	ldr	r3, [pc, #564]	; (8014534 <tcp_process+0x2a0>)
 8014300:	681a      	ldr	r2, [r3, #0]
 8014302:	687b      	ldr	r3, [r7, #4]
 8014304:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014306:	6879      	ldr	r1, [r7, #4]
 8014308:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 801430a:	440b      	add	r3, r1
 801430c:	1ad3      	subs	r3, r2, r3
 801430e:	2b00      	cmp	r3, #0
 8014310:	dc06      	bgt.n	8014320 <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 8014312:	687b      	ldr	r3, [r7, #4]
 8014314:	8b5b      	ldrh	r3, [r3, #26]
 8014316:	f043 0302 	orr.w	r3, r3, #2
 801431a:	b29a      	uxth	r2, r3
 801431c:	687b      	ldr	r3, [r7, #4]
 801431e:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 8014320:	7efb      	ldrb	r3, [r7, #27]
 8014322:	2b00      	cmp	r3, #0
 8014324:	d01b      	beq.n	801435e <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 8014326:	687b      	ldr	r3, [r7, #4]
 8014328:	7d1b      	ldrb	r3, [r3, #20]
 801432a:	2b00      	cmp	r3, #0
 801432c:	d106      	bne.n	801433c <tcp_process+0xa8>
 801432e:	4b7c      	ldr	r3, [pc, #496]	; (8014520 <tcp_process+0x28c>)
 8014330:	f44f 724e 	mov.w	r2, #824	; 0x338
 8014334:	4980      	ldr	r1, [pc, #512]	; (8014538 <tcp_process+0x2a4>)
 8014336:	487c      	ldr	r0, [pc, #496]	; (8014528 <tcp_process+0x294>)
 8014338:	f006 ffbe 	bl	801b2b8 <iprintf>
      recv_flags |= TF_RESET;
 801433c:	4b7f      	ldr	r3, [pc, #508]	; (801453c <tcp_process+0x2a8>)
 801433e:	781b      	ldrb	r3, [r3, #0]
 8014340:	f043 0308 	orr.w	r3, r3, #8
 8014344:	b2da      	uxtb	r2, r3
 8014346:	4b7d      	ldr	r3, [pc, #500]	; (801453c <tcp_process+0x2a8>)
 8014348:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 801434a:	687b      	ldr	r3, [r7, #4]
 801434c:	8b5b      	ldrh	r3, [r3, #26]
 801434e:	f023 0301 	bic.w	r3, r3, #1
 8014352:	b29a      	uxth	r2, r3
 8014354:	687b      	ldr	r3, [r7, #4]
 8014356:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 8014358:	f06f 030d 	mvn.w	r3, #13
 801435c:	e37a      	b.n	8014a54 <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 801435e:	2300      	movs	r3, #0
 8014360:	e378      	b.n	8014a54 <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 8014362:	4b72      	ldr	r3, [pc, #456]	; (801452c <tcp_process+0x298>)
 8014364:	781b      	ldrb	r3, [r3, #0]
 8014366:	f003 0302 	and.w	r3, r3, #2
 801436a:	2b00      	cmp	r3, #0
 801436c:	d010      	beq.n	8014390 <tcp_process+0xfc>
 801436e:	687b      	ldr	r3, [r7, #4]
 8014370:	7d1b      	ldrb	r3, [r3, #20]
 8014372:	2b02      	cmp	r3, #2
 8014374:	d00c      	beq.n	8014390 <tcp_process+0xfc>
 8014376:	687b      	ldr	r3, [r7, #4]
 8014378:	7d1b      	ldrb	r3, [r3, #20]
 801437a:	2b03      	cmp	r3, #3
 801437c:	d008      	beq.n	8014390 <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 801437e:	687b      	ldr	r3, [r7, #4]
 8014380:	8b5b      	ldrh	r3, [r3, #26]
 8014382:	f043 0302 	orr.w	r3, r3, #2
 8014386:	b29a      	uxth	r2, r3
 8014388:	687b      	ldr	r3, [r7, #4]
 801438a:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 801438c:	2300      	movs	r3, #0
 801438e:	e361      	b.n	8014a54 <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 8014390:	687b      	ldr	r3, [r7, #4]
 8014392:	8b5b      	ldrh	r3, [r3, #26]
 8014394:	f003 0310 	and.w	r3, r3, #16
 8014398:	2b00      	cmp	r3, #0
 801439a:	d103      	bne.n	80143a4 <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 801439c:	4b68      	ldr	r3, [pc, #416]	; (8014540 <tcp_process+0x2ac>)
 801439e:	681a      	ldr	r2, [r3, #0]
 80143a0:	687b      	ldr	r3, [r7, #4]
 80143a2:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 80143a4:	687b      	ldr	r3, [r7, #4]
 80143a6:	2200      	movs	r2, #0
 80143a8:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
  pcb->persist_probe = 0;
 80143ac:	687b      	ldr	r3, [r7, #4]
 80143ae:	2200      	movs	r2, #0
 80143b0:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a

  tcp_parseopt(pcb);
 80143b4:	6878      	ldr	r0, [r7, #4]
 80143b6:	f001 fc2f 	bl	8015c18 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 80143ba:	687b      	ldr	r3, [r7, #4]
 80143bc:	7d1b      	ldrb	r3, [r3, #20]
 80143be:	3b02      	subs	r3, #2
 80143c0:	2b07      	cmp	r3, #7
 80143c2:	f200 8337 	bhi.w	8014a34 <tcp_process+0x7a0>
 80143c6:	a201      	add	r2, pc, #4	; (adr r2, 80143cc <tcp_process+0x138>)
 80143c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80143cc:	080143ed 	.word	0x080143ed
 80143d0:	0801461d 	.word	0x0801461d
 80143d4:	08014795 	.word	0x08014795
 80143d8:	080147bf 	.word	0x080147bf
 80143dc:	080148e3 	.word	0x080148e3
 80143e0:	08014795 	.word	0x08014795
 80143e4:	0801496f 	.word	0x0801496f
 80143e8:	080149ff 	.word	0x080149ff
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 80143ec:	4b4f      	ldr	r3, [pc, #316]	; (801452c <tcp_process+0x298>)
 80143ee:	781b      	ldrb	r3, [r3, #0]
 80143f0:	f003 0310 	and.w	r3, r3, #16
 80143f4:	2b00      	cmp	r3, #0
 80143f6:	f000 80e4 	beq.w	80145c2 <tcp_process+0x32e>
 80143fa:	4b4c      	ldr	r3, [pc, #304]	; (801452c <tcp_process+0x298>)
 80143fc:	781b      	ldrb	r3, [r3, #0]
 80143fe:	f003 0302 	and.w	r3, r3, #2
 8014402:	2b00      	cmp	r3, #0
 8014404:	f000 80dd 	beq.w	80145c2 <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 8014408:	687b      	ldr	r3, [r7, #4]
 801440a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801440c:	1c5a      	adds	r2, r3, #1
 801440e:	4b48      	ldr	r3, [pc, #288]	; (8014530 <tcp_process+0x29c>)
 8014410:	681b      	ldr	r3, [r3, #0]
 8014412:	429a      	cmp	r2, r3
 8014414:	f040 80d5 	bne.w	80145c2 <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 8014418:	4b46      	ldr	r3, [pc, #280]	; (8014534 <tcp_process+0x2a0>)
 801441a:	681b      	ldr	r3, [r3, #0]
 801441c:	1c5a      	adds	r2, r3, #1
 801441e:	687b      	ldr	r3, [r7, #4]
 8014420:	625a      	str	r2, [r3, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 8014422:	687b      	ldr	r3, [r7, #4]
 8014424:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8014426:	687b      	ldr	r3, [r7, #4]
 8014428:	62da      	str	r2, [r3, #44]	; 0x2c
        pcb->lastack = ackno;
 801442a:	4b41      	ldr	r3, [pc, #260]	; (8014530 <tcp_process+0x29c>)
 801442c:	681a      	ldr	r2, [r3, #0]
 801442e:	687b      	ldr	r3, [r7, #4]
 8014430:	645a      	str	r2, [r3, #68]	; 0x44
        pcb->snd_wnd = tcphdr->wnd;
 8014432:	4b44      	ldr	r3, [pc, #272]	; (8014544 <tcp_process+0x2b0>)
 8014434:	681b      	ldr	r3, [r3, #0]
 8014436:	89db      	ldrh	r3, [r3, #14]
 8014438:	b29a      	uxth	r2, r3
 801443a:	687b      	ldr	r3, [r7, #4]
 801443c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 8014440:	687b      	ldr	r3, [r7, #4]
 8014442:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8014446:	687b      	ldr	r3, [r7, #4]
 8014448:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 801444c:	4b39      	ldr	r3, [pc, #228]	; (8014534 <tcp_process+0x2a0>)
 801444e:	681b      	ldr	r3, [r3, #0]
 8014450:	1e5a      	subs	r2, r3, #1
 8014452:	687b      	ldr	r3, [r7, #4]
 8014454:	655a      	str	r2, [r3, #84]	; 0x54
        pcb->state = ESTABLISHED;
 8014456:	687b      	ldr	r3, [r7, #4]
 8014458:	2204      	movs	r2, #4
 801445a:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 801445c:	687b      	ldr	r3, [r7, #4]
 801445e:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 8014460:	687b      	ldr	r3, [r7, #4]
 8014462:	3304      	adds	r3, #4
 8014464:	4618      	mov	r0, r3
 8014466:	f004 ff6f 	bl	8019348 <ip4_route>
 801446a:	4601      	mov	r1, r0
 801446c:	687b      	ldr	r3, [r7, #4]
 801446e:	3304      	adds	r3, #4
 8014470:	461a      	mov	r2, r3
 8014472:	4620      	mov	r0, r4
 8014474:	f7ff f88c 	bl	8013590 <tcp_eff_send_mss_netif>
 8014478:	4603      	mov	r3, r0
 801447a:	461a      	mov	r2, r3
 801447c:	687b      	ldr	r3, [r7, #4]
 801447e:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8014480:	687b      	ldr	r3, [r7, #4]
 8014482:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8014484:	009a      	lsls	r2, r3, #2
 8014486:	687b      	ldr	r3, [r7, #4]
 8014488:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801448a:	005b      	lsls	r3, r3, #1
 801448c:	f241 111c 	movw	r1, #4380	; 0x111c
 8014490:	428b      	cmp	r3, r1
 8014492:	bf38      	it	cc
 8014494:	460b      	movcc	r3, r1
 8014496:	429a      	cmp	r2, r3
 8014498:	d204      	bcs.n	80144a4 <tcp_process+0x210>
 801449a:	687b      	ldr	r3, [r7, #4]
 801449c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801449e:	009b      	lsls	r3, r3, #2
 80144a0:	b29b      	uxth	r3, r3
 80144a2:	e00d      	b.n	80144c0 <tcp_process+0x22c>
 80144a4:	687b      	ldr	r3, [r7, #4]
 80144a6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80144a8:	005b      	lsls	r3, r3, #1
 80144aa:	f241 121c 	movw	r2, #4380	; 0x111c
 80144ae:	4293      	cmp	r3, r2
 80144b0:	d904      	bls.n	80144bc <tcp_process+0x228>
 80144b2:	687b      	ldr	r3, [r7, #4]
 80144b4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80144b6:	005b      	lsls	r3, r3, #1
 80144b8:	b29b      	uxth	r3, r3
 80144ba:	e001      	b.n	80144c0 <tcp_process+0x22c>
 80144bc:	f241 131c 	movw	r3, #4380	; 0x111c
 80144c0:	687a      	ldr	r2, [r7, #4]
 80144c2:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 80144c6:	687b      	ldr	r3, [r7, #4]
 80144c8:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80144cc:	2b00      	cmp	r3, #0
 80144ce:	d106      	bne.n	80144de <tcp_process+0x24a>
 80144d0:	4b13      	ldr	r3, [pc, #76]	; (8014520 <tcp_process+0x28c>)
 80144d2:	f44f 725b 	mov.w	r2, #876	; 0x36c
 80144d6:	491c      	ldr	r1, [pc, #112]	; (8014548 <tcp_process+0x2b4>)
 80144d8:	4813      	ldr	r0, [pc, #76]	; (8014528 <tcp_process+0x294>)
 80144da:	f006 feed 	bl	801b2b8 <iprintf>
        --pcb->snd_queuelen;
 80144de:	687b      	ldr	r3, [r7, #4]
 80144e0:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80144e4:	3b01      	subs	r3, #1
 80144e6:	b29a      	uxth	r2, r3
 80144e8:	687b      	ldr	r3, [r7, #4]
 80144ea:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 80144ee:	687b      	ldr	r3, [r7, #4]
 80144f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80144f2:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 80144f4:	69fb      	ldr	r3, [r7, #28]
 80144f6:	2b00      	cmp	r3, #0
 80144f8:	d12a      	bne.n	8014550 <tcp_process+0x2bc>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 80144fa:	687b      	ldr	r3, [r7, #4]
 80144fc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80144fe:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 8014500:	69fb      	ldr	r3, [r7, #28]
 8014502:	2b00      	cmp	r3, #0
 8014504:	d106      	bne.n	8014514 <tcp_process+0x280>
 8014506:	4b06      	ldr	r3, [pc, #24]	; (8014520 <tcp_process+0x28c>)
 8014508:	f44f 725d 	mov.w	r2, #884	; 0x374
 801450c:	490f      	ldr	r1, [pc, #60]	; (801454c <tcp_process+0x2b8>)
 801450e:	4806      	ldr	r0, [pc, #24]	; (8014528 <tcp_process+0x294>)
 8014510:	f006 fed2 	bl	801b2b8 <iprintf>
          pcb->unsent = rseg->next;
 8014514:	69fb      	ldr	r3, [r7, #28]
 8014516:	681a      	ldr	r2, [r3, #0]
 8014518:	687b      	ldr	r3, [r7, #4]
 801451a:	66da      	str	r2, [r3, #108]	; 0x6c
 801451c:	e01c      	b.n	8014558 <tcp_process+0x2c4>
 801451e:	bf00      	nop
 8014520:	0801f538 	.word	0x0801f538
 8014524:	0801f770 	.word	0x0801f770
 8014528:	0801f584 	.word	0x0801f584
 801452c:	200071f0 	.word	0x200071f0
 8014530:	200071e8 	.word	0x200071e8
 8014534:	200071e4 	.word	0x200071e4
 8014538:	0801f78c 	.word	0x0801f78c
 801453c:	200071f1 	.word	0x200071f1
 8014540:	200071ac 	.word	0x200071ac
 8014544:	200071d4 	.word	0x200071d4
 8014548:	0801f7ac 	.word	0x0801f7ac
 801454c:	0801f7c4 	.word	0x0801f7c4
        } else {
          pcb->unacked = rseg->next;
 8014550:	69fb      	ldr	r3, [r7, #28]
 8014552:	681a      	ldr	r2, [r3, #0]
 8014554:	687b      	ldr	r3, [r7, #4]
 8014556:	671a      	str	r2, [r3, #112]	; 0x70
        }
        tcp_seg_free(rseg);
 8014558:	69f8      	ldr	r0, [r7, #28]
 801455a:	f7fe fc72 	bl	8012e42 <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 801455e:	687b      	ldr	r3, [r7, #4]
 8014560:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8014562:	2b00      	cmp	r3, #0
 8014564:	d104      	bne.n	8014570 <tcp_process+0x2dc>
          pcb->rtime = -1;
 8014566:	687b      	ldr	r3, [r7, #4]
 8014568:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801456c:	861a      	strh	r2, [r3, #48]	; 0x30
 801456e:	e006      	b.n	801457e <tcp_process+0x2ea>
        } else {
          pcb->rtime = 0;
 8014570:	687b      	ldr	r3, [r7, #4]
 8014572:	2200      	movs	r2, #0
 8014574:	861a      	strh	r2, [r3, #48]	; 0x30
          pcb->nrtx = 0;
 8014576:	687b      	ldr	r3, [r7, #4]
 8014578:	2200      	movs	r2, #0
 801457a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 801457e:	687b      	ldr	r3, [r7, #4]
 8014580:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8014584:	2b00      	cmp	r3, #0
 8014586:	d00a      	beq.n	801459e <tcp_process+0x30a>
 8014588:	687b      	ldr	r3, [r7, #4]
 801458a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801458e:	687a      	ldr	r2, [r7, #4]
 8014590:	6910      	ldr	r0, [r2, #16]
 8014592:	2200      	movs	r2, #0
 8014594:	6879      	ldr	r1, [r7, #4]
 8014596:	4798      	blx	r3
 8014598:	4603      	mov	r3, r0
 801459a:	76bb      	strb	r3, [r7, #26]
 801459c:	e001      	b.n	80145a2 <tcp_process+0x30e>
 801459e:	2300      	movs	r3, #0
 80145a0:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 80145a2:	f997 301a 	ldrsb.w	r3, [r7, #26]
 80145a6:	f113 0f0d 	cmn.w	r3, #13
 80145aa:	d102      	bne.n	80145b2 <tcp_process+0x31e>
          return ERR_ABRT;
 80145ac:	f06f 030c 	mvn.w	r3, #12
 80145b0:	e250      	b.n	8014a54 <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 80145b2:	687b      	ldr	r3, [r7, #4]
 80145b4:	8b5b      	ldrh	r3, [r3, #26]
 80145b6:	f043 0302 	orr.w	r3, r3, #2
 80145ba:	b29a      	uxth	r2, r3
 80145bc:	687b      	ldr	r3, [r7, #4]
 80145be:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 80145c0:	e23a      	b.n	8014a38 <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 80145c2:	4b98      	ldr	r3, [pc, #608]	; (8014824 <tcp_process+0x590>)
 80145c4:	781b      	ldrb	r3, [r3, #0]
 80145c6:	f003 0310 	and.w	r3, r3, #16
 80145ca:	2b00      	cmp	r3, #0
 80145cc:	f000 8234 	beq.w	8014a38 <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80145d0:	4b95      	ldr	r3, [pc, #596]	; (8014828 <tcp_process+0x594>)
 80145d2:	6819      	ldr	r1, [r3, #0]
 80145d4:	4b95      	ldr	r3, [pc, #596]	; (801482c <tcp_process+0x598>)
 80145d6:	881b      	ldrh	r3, [r3, #0]
 80145d8:	461a      	mov	r2, r3
 80145da:	4b95      	ldr	r3, [pc, #596]	; (8014830 <tcp_process+0x59c>)
 80145dc:	681b      	ldr	r3, [r3, #0]
 80145de:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80145e0:	4b94      	ldr	r3, [pc, #592]	; (8014834 <tcp_process+0x5a0>)
 80145e2:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80145e4:	885b      	ldrh	r3, [r3, #2]
 80145e6:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80145e8:	4a92      	ldr	r2, [pc, #584]	; (8014834 <tcp_process+0x5a0>)
 80145ea:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80145ec:	8812      	ldrh	r2, [r2, #0]
 80145ee:	b292      	uxth	r2, r2
 80145f0:	9202      	str	r2, [sp, #8]
 80145f2:	9301      	str	r3, [sp, #4]
 80145f4:	4b90      	ldr	r3, [pc, #576]	; (8014838 <tcp_process+0x5a4>)
 80145f6:	9300      	str	r3, [sp, #0]
 80145f8:	4b90      	ldr	r3, [pc, #576]	; (801483c <tcp_process+0x5a8>)
 80145fa:	4602      	mov	r2, r0
 80145fc:	6878      	ldr	r0, [r7, #4]
 80145fe:	f003 f8dd 	bl	80177bc <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 8014602:	687b      	ldr	r3, [r7, #4]
 8014604:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8014608:	2b05      	cmp	r3, #5
 801460a:	f200 8215 	bhi.w	8014a38 <tcp_process+0x7a4>
          pcb->rtime = 0;
 801460e:	687b      	ldr	r3, [r7, #4]
 8014610:	2200      	movs	r2, #0
 8014612:	861a      	strh	r2, [r3, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 8014614:	6878      	ldr	r0, [r7, #4]
 8014616:	f002 fea9 	bl	801736c <tcp_rexmit_rto>
      break;
 801461a:	e20d      	b.n	8014a38 <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 801461c:	4b81      	ldr	r3, [pc, #516]	; (8014824 <tcp_process+0x590>)
 801461e:	781b      	ldrb	r3, [r3, #0]
 8014620:	f003 0310 	and.w	r3, r3, #16
 8014624:	2b00      	cmp	r3, #0
 8014626:	f000 80a1 	beq.w	801476c <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 801462a:	4b7f      	ldr	r3, [pc, #508]	; (8014828 <tcp_process+0x594>)
 801462c:	681a      	ldr	r2, [r3, #0]
 801462e:	687b      	ldr	r3, [r7, #4]
 8014630:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8014632:	1ad3      	subs	r3, r2, r3
 8014634:	3b01      	subs	r3, #1
 8014636:	2b00      	cmp	r3, #0
 8014638:	db7e      	blt.n	8014738 <tcp_process+0x4a4>
 801463a:	4b7b      	ldr	r3, [pc, #492]	; (8014828 <tcp_process+0x594>)
 801463c:	681a      	ldr	r2, [r3, #0]
 801463e:	687b      	ldr	r3, [r7, #4]
 8014640:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8014642:	1ad3      	subs	r3, r2, r3
 8014644:	2b00      	cmp	r3, #0
 8014646:	dc77      	bgt.n	8014738 <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 8014648:	687b      	ldr	r3, [r7, #4]
 801464a:	2204      	movs	r2, #4
 801464c:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 801464e:	687b      	ldr	r3, [r7, #4]
 8014650:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8014652:	2b00      	cmp	r3, #0
 8014654:	d102      	bne.n	801465c <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 8014656:	23fa      	movs	r3, #250	; 0xfa
 8014658:	76bb      	strb	r3, [r7, #26]
 801465a:	e01d      	b.n	8014698 <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 801465c:	687b      	ldr	r3, [r7, #4]
 801465e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8014660:	699b      	ldr	r3, [r3, #24]
 8014662:	2b00      	cmp	r3, #0
 8014664:	d106      	bne.n	8014674 <tcp_process+0x3e0>
 8014666:	4b76      	ldr	r3, [pc, #472]	; (8014840 <tcp_process+0x5ac>)
 8014668:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 801466c:	4975      	ldr	r1, [pc, #468]	; (8014844 <tcp_process+0x5b0>)
 801466e:	4876      	ldr	r0, [pc, #472]	; (8014848 <tcp_process+0x5b4>)
 8014670:	f006 fe22 	bl	801b2b8 <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 8014674:	687b      	ldr	r3, [r7, #4]
 8014676:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8014678:	699b      	ldr	r3, [r3, #24]
 801467a:	2b00      	cmp	r3, #0
 801467c:	d00a      	beq.n	8014694 <tcp_process+0x400>
 801467e:	687b      	ldr	r3, [r7, #4]
 8014680:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8014682:	699b      	ldr	r3, [r3, #24]
 8014684:	687a      	ldr	r2, [r7, #4]
 8014686:	6910      	ldr	r0, [r2, #16]
 8014688:	2200      	movs	r2, #0
 801468a:	6879      	ldr	r1, [r7, #4]
 801468c:	4798      	blx	r3
 801468e:	4603      	mov	r3, r0
 8014690:	76bb      	strb	r3, [r7, #26]
 8014692:	e001      	b.n	8014698 <tcp_process+0x404>
 8014694:	23f0      	movs	r3, #240	; 0xf0
 8014696:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 8014698:	f997 301a 	ldrsb.w	r3, [r7, #26]
 801469c:	2b00      	cmp	r3, #0
 801469e:	d00a      	beq.n	80146b6 <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 80146a0:	f997 301a 	ldrsb.w	r3, [r7, #26]
 80146a4:	f113 0f0d 	cmn.w	r3, #13
 80146a8:	d002      	beq.n	80146b0 <tcp_process+0x41c>
              tcp_abort(pcb);
 80146aa:	6878      	ldr	r0, [r7, #4]
 80146ac:	f7fd fd7c 	bl	80121a8 <tcp_abort>
            }
            return ERR_ABRT;
 80146b0:	f06f 030c 	mvn.w	r3, #12
 80146b4:	e1ce      	b.n	8014a54 <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 80146b6:	6878      	ldr	r0, [r7, #4]
 80146b8:	f000 fae0 	bl	8014c7c <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 80146bc:	4b63      	ldr	r3, [pc, #396]	; (801484c <tcp_process+0x5b8>)
 80146be:	881b      	ldrh	r3, [r3, #0]
 80146c0:	2b00      	cmp	r3, #0
 80146c2:	d005      	beq.n	80146d0 <tcp_process+0x43c>
            recv_acked--;
 80146c4:	4b61      	ldr	r3, [pc, #388]	; (801484c <tcp_process+0x5b8>)
 80146c6:	881b      	ldrh	r3, [r3, #0]
 80146c8:	3b01      	subs	r3, #1
 80146ca:	b29a      	uxth	r2, r3
 80146cc:	4b5f      	ldr	r3, [pc, #380]	; (801484c <tcp_process+0x5b8>)
 80146ce:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 80146d0:	687b      	ldr	r3, [r7, #4]
 80146d2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80146d4:	009a      	lsls	r2, r3, #2
 80146d6:	687b      	ldr	r3, [r7, #4]
 80146d8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80146da:	005b      	lsls	r3, r3, #1
 80146dc:	f241 111c 	movw	r1, #4380	; 0x111c
 80146e0:	428b      	cmp	r3, r1
 80146e2:	bf38      	it	cc
 80146e4:	460b      	movcc	r3, r1
 80146e6:	429a      	cmp	r2, r3
 80146e8:	d204      	bcs.n	80146f4 <tcp_process+0x460>
 80146ea:	687b      	ldr	r3, [r7, #4]
 80146ec:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80146ee:	009b      	lsls	r3, r3, #2
 80146f0:	b29b      	uxth	r3, r3
 80146f2:	e00d      	b.n	8014710 <tcp_process+0x47c>
 80146f4:	687b      	ldr	r3, [r7, #4]
 80146f6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80146f8:	005b      	lsls	r3, r3, #1
 80146fa:	f241 121c 	movw	r2, #4380	; 0x111c
 80146fe:	4293      	cmp	r3, r2
 8014700:	d904      	bls.n	801470c <tcp_process+0x478>
 8014702:	687b      	ldr	r3, [r7, #4]
 8014704:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8014706:	005b      	lsls	r3, r3, #1
 8014708:	b29b      	uxth	r3, r3
 801470a:	e001      	b.n	8014710 <tcp_process+0x47c>
 801470c:	f241 131c 	movw	r3, #4380	; 0x111c
 8014710:	687a      	ldr	r2, [r7, #4]
 8014712:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 8014716:	4b4e      	ldr	r3, [pc, #312]	; (8014850 <tcp_process+0x5bc>)
 8014718:	781b      	ldrb	r3, [r3, #0]
 801471a:	f003 0320 	and.w	r3, r3, #32
 801471e:	2b00      	cmp	r3, #0
 8014720:	d037      	beq.n	8014792 <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 8014722:	687b      	ldr	r3, [r7, #4]
 8014724:	8b5b      	ldrh	r3, [r3, #26]
 8014726:	f043 0302 	orr.w	r3, r3, #2
 801472a:	b29a      	uxth	r2, r3
 801472c:	687b      	ldr	r3, [r7, #4]
 801472e:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 8014730:	687b      	ldr	r3, [r7, #4]
 8014732:	2207      	movs	r2, #7
 8014734:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 8014736:	e02c      	b.n	8014792 <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8014738:	4b3b      	ldr	r3, [pc, #236]	; (8014828 <tcp_process+0x594>)
 801473a:	6819      	ldr	r1, [r3, #0]
 801473c:	4b3b      	ldr	r3, [pc, #236]	; (801482c <tcp_process+0x598>)
 801473e:	881b      	ldrh	r3, [r3, #0]
 8014740:	461a      	mov	r2, r3
 8014742:	4b3b      	ldr	r3, [pc, #236]	; (8014830 <tcp_process+0x59c>)
 8014744:	681b      	ldr	r3, [r3, #0]
 8014746:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8014748:	4b3a      	ldr	r3, [pc, #232]	; (8014834 <tcp_process+0x5a0>)
 801474a:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801474c:	885b      	ldrh	r3, [r3, #2]
 801474e:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8014750:	4a38      	ldr	r2, [pc, #224]	; (8014834 <tcp_process+0x5a0>)
 8014752:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8014754:	8812      	ldrh	r2, [r2, #0]
 8014756:	b292      	uxth	r2, r2
 8014758:	9202      	str	r2, [sp, #8]
 801475a:	9301      	str	r3, [sp, #4]
 801475c:	4b36      	ldr	r3, [pc, #216]	; (8014838 <tcp_process+0x5a4>)
 801475e:	9300      	str	r3, [sp, #0]
 8014760:	4b36      	ldr	r3, [pc, #216]	; (801483c <tcp_process+0x5a8>)
 8014762:	4602      	mov	r2, r0
 8014764:	6878      	ldr	r0, [r7, #4]
 8014766:	f003 f829 	bl	80177bc <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 801476a:	e167      	b.n	8014a3c <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 801476c:	4b2d      	ldr	r3, [pc, #180]	; (8014824 <tcp_process+0x590>)
 801476e:	781b      	ldrb	r3, [r3, #0]
 8014770:	f003 0302 	and.w	r3, r3, #2
 8014774:	2b00      	cmp	r3, #0
 8014776:	f000 8161 	beq.w	8014a3c <tcp_process+0x7a8>
 801477a:	687b      	ldr	r3, [r7, #4]
 801477c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801477e:	1e5a      	subs	r2, r3, #1
 8014780:	4b2b      	ldr	r3, [pc, #172]	; (8014830 <tcp_process+0x59c>)
 8014782:	681b      	ldr	r3, [r3, #0]
 8014784:	429a      	cmp	r2, r3
 8014786:	f040 8159 	bne.w	8014a3c <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 801478a:	6878      	ldr	r0, [r7, #4]
 801478c:	f002 fe10 	bl	80173b0 <tcp_rexmit>
      break;
 8014790:	e154      	b.n	8014a3c <tcp_process+0x7a8>
 8014792:	e153      	b.n	8014a3c <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 8014794:	6878      	ldr	r0, [r7, #4]
 8014796:	f000 fa71 	bl	8014c7c <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 801479a:	4b2d      	ldr	r3, [pc, #180]	; (8014850 <tcp_process+0x5bc>)
 801479c:	781b      	ldrb	r3, [r3, #0]
 801479e:	f003 0320 	and.w	r3, r3, #32
 80147a2:	2b00      	cmp	r3, #0
 80147a4:	f000 814c 	beq.w	8014a40 <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 80147a8:	687b      	ldr	r3, [r7, #4]
 80147aa:	8b5b      	ldrh	r3, [r3, #26]
 80147ac:	f043 0302 	orr.w	r3, r3, #2
 80147b0:	b29a      	uxth	r2, r3
 80147b2:	687b      	ldr	r3, [r7, #4]
 80147b4:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 80147b6:	687b      	ldr	r3, [r7, #4]
 80147b8:	2207      	movs	r2, #7
 80147ba:	751a      	strb	r2, [r3, #20]
      }
      break;
 80147bc:	e140      	b.n	8014a40 <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 80147be:	6878      	ldr	r0, [r7, #4]
 80147c0:	f000 fa5c 	bl	8014c7c <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 80147c4:	4b22      	ldr	r3, [pc, #136]	; (8014850 <tcp_process+0x5bc>)
 80147c6:	781b      	ldrb	r3, [r3, #0]
 80147c8:	f003 0320 	and.w	r3, r3, #32
 80147cc:	2b00      	cmp	r3, #0
 80147ce:	d071      	beq.n	80148b4 <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 80147d0:	4b14      	ldr	r3, [pc, #80]	; (8014824 <tcp_process+0x590>)
 80147d2:	781b      	ldrb	r3, [r3, #0]
 80147d4:	f003 0310 	and.w	r3, r3, #16
 80147d8:	2b00      	cmp	r3, #0
 80147da:	d060      	beq.n	801489e <tcp_process+0x60a>
 80147dc:	687b      	ldr	r3, [r7, #4]
 80147de:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80147e0:	4b11      	ldr	r3, [pc, #68]	; (8014828 <tcp_process+0x594>)
 80147e2:	681b      	ldr	r3, [r3, #0]
 80147e4:	429a      	cmp	r2, r3
 80147e6:	d15a      	bne.n	801489e <tcp_process+0x60a>
            pcb->unsent == NULL) {
 80147e8:	687b      	ldr	r3, [r7, #4]
 80147ea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 80147ec:	2b00      	cmp	r3, #0
 80147ee:	d156      	bne.n	801489e <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 80147f0:	687b      	ldr	r3, [r7, #4]
 80147f2:	8b5b      	ldrh	r3, [r3, #26]
 80147f4:	f043 0302 	orr.w	r3, r3, #2
 80147f8:	b29a      	uxth	r2, r3
 80147fa:	687b      	ldr	r3, [r7, #4]
 80147fc:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 80147fe:	6878      	ldr	r0, [r7, #4]
 8014800:	f7fe fdbc 	bl	801337c <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 8014804:	4b13      	ldr	r3, [pc, #76]	; (8014854 <tcp_process+0x5c0>)
 8014806:	681b      	ldr	r3, [r3, #0]
 8014808:	687a      	ldr	r2, [r7, #4]
 801480a:	429a      	cmp	r2, r3
 801480c:	d105      	bne.n	801481a <tcp_process+0x586>
 801480e:	4b11      	ldr	r3, [pc, #68]	; (8014854 <tcp_process+0x5c0>)
 8014810:	681b      	ldr	r3, [r3, #0]
 8014812:	68db      	ldr	r3, [r3, #12]
 8014814:	4a0f      	ldr	r2, [pc, #60]	; (8014854 <tcp_process+0x5c0>)
 8014816:	6013      	str	r3, [r2, #0]
 8014818:	e02e      	b.n	8014878 <tcp_process+0x5e4>
 801481a:	4b0e      	ldr	r3, [pc, #56]	; (8014854 <tcp_process+0x5c0>)
 801481c:	681b      	ldr	r3, [r3, #0]
 801481e:	617b      	str	r3, [r7, #20]
 8014820:	e027      	b.n	8014872 <tcp_process+0x5de>
 8014822:	bf00      	nop
 8014824:	200071f0 	.word	0x200071f0
 8014828:	200071e8 	.word	0x200071e8
 801482c:	200071ee 	.word	0x200071ee
 8014830:	200071e4 	.word	0x200071e4
 8014834:	200071d4 	.word	0x200071d4
 8014838:	200008e0 	.word	0x200008e0
 801483c:	200008e4 	.word	0x200008e4
 8014840:	0801f538 	.word	0x0801f538
 8014844:	0801f7d8 	.word	0x0801f7d8
 8014848:	0801f584 	.word	0x0801f584
 801484c:	200071ec 	.word	0x200071ec
 8014850:	200071f1 	.word	0x200071f1
 8014854:	200071b8 	.word	0x200071b8
 8014858:	697b      	ldr	r3, [r7, #20]
 801485a:	68db      	ldr	r3, [r3, #12]
 801485c:	687a      	ldr	r2, [r7, #4]
 801485e:	429a      	cmp	r2, r3
 8014860:	d104      	bne.n	801486c <tcp_process+0x5d8>
 8014862:	687b      	ldr	r3, [r7, #4]
 8014864:	68da      	ldr	r2, [r3, #12]
 8014866:	697b      	ldr	r3, [r7, #20]
 8014868:	60da      	str	r2, [r3, #12]
 801486a:	e005      	b.n	8014878 <tcp_process+0x5e4>
 801486c:	697b      	ldr	r3, [r7, #20]
 801486e:	68db      	ldr	r3, [r3, #12]
 8014870:	617b      	str	r3, [r7, #20]
 8014872:	697b      	ldr	r3, [r7, #20]
 8014874:	2b00      	cmp	r3, #0
 8014876:	d1ef      	bne.n	8014858 <tcp_process+0x5c4>
 8014878:	687b      	ldr	r3, [r7, #4]
 801487a:	2200      	movs	r2, #0
 801487c:	60da      	str	r2, [r3, #12]
 801487e:	4b77      	ldr	r3, [pc, #476]	; (8014a5c <tcp_process+0x7c8>)
 8014880:	2201      	movs	r2, #1
 8014882:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 8014884:	687b      	ldr	r3, [r7, #4]
 8014886:	220a      	movs	r2, #10
 8014888:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 801488a:	4b75      	ldr	r3, [pc, #468]	; (8014a60 <tcp_process+0x7cc>)
 801488c:	681a      	ldr	r2, [r3, #0]
 801488e:	687b      	ldr	r3, [r7, #4]
 8014890:	60da      	str	r2, [r3, #12]
 8014892:	4a73      	ldr	r2, [pc, #460]	; (8014a60 <tcp_process+0x7cc>)
 8014894:	687b      	ldr	r3, [r7, #4]
 8014896:	6013      	str	r3, [r2, #0]
 8014898:	f003 f952 	bl	8017b40 <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 801489c:	e0d2      	b.n	8014a44 <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 801489e:	687b      	ldr	r3, [r7, #4]
 80148a0:	8b5b      	ldrh	r3, [r3, #26]
 80148a2:	f043 0302 	orr.w	r3, r3, #2
 80148a6:	b29a      	uxth	r2, r3
 80148a8:	687b      	ldr	r3, [r7, #4]
 80148aa:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 80148ac:	687b      	ldr	r3, [r7, #4]
 80148ae:	2208      	movs	r2, #8
 80148b0:	751a      	strb	r2, [r3, #20]
      break;
 80148b2:	e0c7      	b.n	8014a44 <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 80148b4:	4b6b      	ldr	r3, [pc, #428]	; (8014a64 <tcp_process+0x7d0>)
 80148b6:	781b      	ldrb	r3, [r3, #0]
 80148b8:	f003 0310 	and.w	r3, r3, #16
 80148bc:	2b00      	cmp	r3, #0
 80148be:	f000 80c1 	beq.w	8014a44 <tcp_process+0x7b0>
 80148c2:	687b      	ldr	r3, [r7, #4]
 80148c4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80148c6:	4b68      	ldr	r3, [pc, #416]	; (8014a68 <tcp_process+0x7d4>)
 80148c8:	681b      	ldr	r3, [r3, #0]
 80148ca:	429a      	cmp	r2, r3
 80148cc:	f040 80ba 	bne.w	8014a44 <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 80148d0:	687b      	ldr	r3, [r7, #4]
 80148d2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 80148d4:	2b00      	cmp	r3, #0
 80148d6:	f040 80b5 	bne.w	8014a44 <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 80148da:	687b      	ldr	r3, [r7, #4]
 80148dc:	2206      	movs	r2, #6
 80148de:	751a      	strb	r2, [r3, #20]
      break;
 80148e0:	e0b0      	b.n	8014a44 <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 80148e2:	6878      	ldr	r0, [r7, #4]
 80148e4:	f000 f9ca 	bl	8014c7c <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 80148e8:	4b60      	ldr	r3, [pc, #384]	; (8014a6c <tcp_process+0x7d8>)
 80148ea:	781b      	ldrb	r3, [r3, #0]
 80148ec:	f003 0320 	and.w	r3, r3, #32
 80148f0:	2b00      	cmp	r3, #0
 80148f2:	f000 80a9 	beq.w	8014a48 <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 80148f6:	687b      	ldr	r3, [r7, #4]
 80148f8:	8b5b      	ldrh	r3, [r3, #26]
 80148fa:	f043 0302 	orr.w	r3, r3, #2
 80148fe:	b29a      	uxth	r2, r3
 8014900:	687b      	ldr	r3, [r7, #4]
 8014902:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 8014904:	6878      	ldr	r0, [r7, #4]
 8014906:	f7fe fd39 	bl	801337c <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 801490a:	4b59      	ldr	r3, [pc, #356]	; (8014a70 <tcp_process+0x7dc>)
 801490c:	681b      	ldr	r3, [r3, #0]
 801490e:	687a      	ldr	r2, [r7, #4]
 8014910:	429a      	cmp	r2, r3
 8014912:	d105      	bne.n	8014920 <tcp_process+0x68c>
 8014914:	4b56      	ldr	r3, [pc, #344]	; (8014a70 <tcp_process+0x7dc>)
 8014916:	681b      	ldr	r3, [r3, #0]
 8014918:	68db      	ldr	r3, [r3, #12]
 801491a:	4a55      	ldr	r2, [pc, #340]	; (8014a70 <tcp_process+0x7dc>)
 801491c:	6013      	str	r3, [r2, #0]
 801491e:	e013      	b.n	8014948 <tcp_process+0x6b4>
 8014920:	4b53      	ldr	r3, [pc, #332]	; (8014a70 <tcp_process+0x7dc>)
 8014922:	681b      	ldr	r3, [r3, #0]
 8014924:	613b      	str	r3, [r7, #16]
 8014926:	e00c      	b.n	8014942 <tcp_process+0x6ae>
 8014928:	693b      	ldr	r3, [r7, #16]
 801492a:	68db      	ldr	r3, [r3, #12]
 801492c:	687a      	ldr	r2, [r7, #4]
 801492e:	429a      	cmp	r2, r3
 8014930:	d104      	bne.n	801493c <tcp_process+0x6a8>
 8014932:	687b      	ldr	r3, [r7, #4]
 8014934:	68da      	ldr	r2, [r3, #12]
 8014936:	693b      	ldr	r3, [r7, #16]
 8014938:	60da      	str	r2, [r3, #12]
 801493a:	e005      	b.n	8014948 <tcp_process+0x6b4>
 801493c:	693b      	ldr	r3, [r7, #16]
 801493e:	68db      	ldr	r3, [r3, #12]
 8014940:	613b      	str	r3, [r7, #16]
 8014942:	693b      	ldr	r3, [r7, #16]
 8014944:	2b00      	cmp	r3, #0
 8014946:	d1ef      	bne.n	8014928 <tcp_process+0x694>
 8014948:	687b      	ldr	r3, [r7, #4]
 801494a:	2200      	movs	r2, #0
 801494c:	60da      	str	r2, [r3, #12]
 801494e:	4b43      	ldr	r3, [pc, #268]	; (8014a5c <tcp_process+0x7c8>)
 8014950:	2201      	movs	r2, #1
 8014952:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8014954:	687b      	ldr	r3, [r7, #4]
 8014956:	220a      	movs	r2, #10
 8014958:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 801495a:	4b41      	ldr	r3, [pc, #260]	; (8014a60 <tcp_process+0x7cc>)
 801495c:	681a      	ldr	r2, [r3, #0]
 801495e:	687b      	ldr	r3, [r7, #4]
 8014960:	60da      	str	r2, [r3, #12]
 8014962:	4a3f      	ldr	r2, [pc, #252]	; (8014a60 <tcp_process+0x7cc>)
 8014964:	687b      	ldr	r3, [r7, #4]
 8014966:	6013      	str	r3, [r2, #0]
 8014968:	f003 f8ea 	bl	8017b40 <tcp_timer_needed>
      }
      break;
 801496c:	e06c      	b.n	8014a48 <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 801496e:	6878      	ldr	r0, [r7, #4]
 8014970:	f000 f984 	bl	8014c7c <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8014974:	4b3b      	ldr	r3, [pc, #236]	; (8014a64 <tcp_process+0x7d0>)
 8014976:	781b      	ldrb	r3, [r3, #0]
 8014978:	f003 0310 	and.w	r3, r3, #16
 801497c:	2b00      	cmp	r3, #0
 801497e:	d065      	beq.n	8014a4c <tcp_process+0x7b8>
 8014980:	687b      	ldr	r3, [r7, #4]
 8014982:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8014984:	4b38      	ldr	r3, [pc, #224]	; (8014a68 <tcp_process+0x7d4>)
 8014986:	681b      	ldr	r3, [r3, #0]
 8014988:	429a      	cmp	r2, r3
 801498a:	d15f      	bne.n	8014a4c <tcp_process+0x7b8>
 801498c:	687b      	ldr	r3, [r7, #4]
 801498e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014990:	2b00      	cmp	r3, #0
 8014992:	d15b      	bne.n	8014a4c <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 8014994:	6878      	ldr	r0, [r7, #4]
 8014996:	f7fe fcf1 	bl	801337c <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 801499a:	4b35      	ldr	r3, [pc, #212]	; (8014a70 <tcp_process+0x7dc>)
 801499c:	681b      	ldr	r3, [r3, #0]
 801499e:	687a      	ldr	r2, [r7, #4]
 80149a0:	429a      	cmp	r2, r3
 80149a2:	d105      	bne.n	80149b0 <tcp_process+0x71c>
 80149a4:	4b32      	ldr	r3, [pc, #200]	; (8014a70 <tcp_process+0x7dc>)
 80149a6:	681b      	ldr	r3, [r3, #0]
 80149a8:	68db      	ldr	r3, [r3, #12]
 80149aa:	4a31      	ldr	r2, [pc, #196]	; (8014a70 <tcp_process+0x7dc>)
 80149ac:	6013      	str	r3, [r2, #0]
 80149ae:	e013      	b.n	80149d8 <tcp_process+0x744>
 80149b0:	4b2f      	ldr	r3, [pc, #188]	; (8014a70 <tcp_process+0x7dc>)
 80149b2:	681b      	ldr	r3, [r3, #0]
 80149b4:	60fb      	str	r3, [r7, #12]
 80149b6:	e00c      	b.n	80149d2 <tcp_process+0x73e>
 80149b8:	68fb      	ldr	r3, [r7, #12]
 80149ba:	68db      	ldr	r3, [r3, #12]
 80149bc:	687a      	ldr	r2, [r7, #4]
 80149be:	429a      	cmp	r2, r3
 80149c0:	d104      	bne.n	80149cc <tcp_process+0x738>
 80149c2:	687b      	ldr	r3, [r7, #4]
 80149c4:	68da      	ldr	r2, [r3, #12]
 80149c6:	68fb      	ldr	r3, [r7, #12]
 80149c8:	60da      	str	r2, [r3, #12]
 80149ca:	e005      	b.n	80149d8 <tcp_process+0x744>
 80149cc:	68fb      	ldr	r3, [r7, #12]
 80149ce:	68db      	ldr	r3, [r3, #12]
 80149d0:	60fb      	str	r3, [r7, #12]
 80149d2:	68fb      	ldr	r3, [r7, #12]
 80149d4:	2b00      	cmp	r3, #0
 80149d6:	d1ef      	bne.n	80149b8 <tcp_process+0x724>
 80149d8:	687b      	ldr	r3, [r7, #4]
 80149da:	2200      	movs	r2, #0
 80149dc:	60da      	str	r2, [r3, #12]
 80149de:	4b1f      	ldr	r3, [pc, #124]	; (8014a5c <tcp_process+0x7c8>)
 80149e0:	2201      	movs	r2, #1
 80149e2:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 80149e4:	687b      	ldr	r3, [r7, #4]
 80149e6:	220a      	movs	r2, #10
 80149e8:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 80149ea:	4b1d      	ldr	r3, [pc, #116]	; (8014a60 <tcp_process+0x7cc>)
 80149ec:	681a      	ldr	r2, [r3, #0]
 80149ee:	687b      	ldr	r3, [r7, #4]
 80149f0:	60da      	str	r2, [r3, #12]
 80149f2:	4a1b      	ldr	r2, [pc, #108]	; (8014a60 <tcp_process+0x7cc>)
 80149f4:	687b      	ldr	r3, [r7, #4]
 80149f6:	6013      	str	r3, [r2, #0]
 80149f8:	f003 f8a2 	bl	8017b40 <tcp_timer_needed>
      }
      break;
 80149fc:	e026      	b.n	8014a4c <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 80149fe:	6878      	ldr	r0, [r7, #4]
 8014a00:	f000 f93c 	bl	8014c7c <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8014a04:	4b17      	ldr	r3, [pc, #92]	; (8014a64 <tcp_process+0x7d0>)
 8014a06:	781b      	ldrb	r3, [r3, #0]
 8014a08:	f003 0310 	and.w	r3, r3, #16
 8014a0c:	2b00      	cmp	r3, #0
 8014a0e:	d01f      	beq.n	8014a50 <tcp_process+0x7bc>
 8014a10:	687b      	ldr	r3, [r7, #4]
 8014a12:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8014a14:	4b14      	ldr	r3, [pc, #80]	; (8014a68 <tcp_process+0x7d4>)
 8014a16:	681b      	ldr	r3, [r3, #0]
 8014a18:	429a      	cmp	r2, r3
 8014a1a:	d119      	bne.n	8014a50 <tcp_process+0x7bc>
 8014a1c:	687b      	ldr	r3, [r7, #4]
 8014a1e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014a20:	2b00      	cmp	r3, #0
 8014a22:	d115      	bne.n	8014a50 <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 8014a24:	4b11      	ldr	r3, [pc, #68]	; (8014a6c <tcp_process+0x7d8>)
 8014a26:	781b      	ldrb	r3, [r3, #0]
 8014a28:	f043 0310 	orr.w	r3, r3, #16
 8014a2c:	b2da      	uxtb	r2, r3
 8014a2e:	4b0f      	ldr	r3, [pc, #60]	; (8014a6c <tcp_process+0x7d8>)
 8014a30:	701a      	strb	r2, [r3, #0]
      }
      break;
 8014a32:	e00d      	b.n	8014a50 <tcp_process+0x7bc>
    default:
      break;
 8014a34:	bf00      	nop
 8014a36:	e00c      	b.n	8014a52 <tcp_process+0x7be>
      break;
 8014a38:	bf00      	nop
 8014a3a:	e00a      	b.n	8014a52 <tcp_process+0x7be>
      break;
 8014a3c:	bf00      	nop
 8014a3e:	e008      	b.n	8014a52 <tcp_process+0x7be>
      break;
 8014a40:	bf00      	nop
 8014a42:	e006      	b.n	8014a52 <tcp_process+0x7be>
      break;
 8014a44:	bf00      	nop
 8014a46:	e004      	b.n	8014a52 <tcp_process+0x7be>
      break;
 8014a48:	bf00      	nop
 8014a4a:	e002      	b.n	8014a52 <tcp_process+0x7be>
      break;
 8014a4c:	bf00      	nop
 8014a4e:	e000      	b.n	8014a52 <tcp_process+0x7be>
      break;
 8014a50:	bf00      	nop
  }
  return ERR_OK;
 8014a52:	2300      	movs	r3, #0
}
 8014a54:	4618      	mov	r0, r3
 8014a56:	3724      	adds	r7, #36	; 0x24
 8014a58:	46bd      	mov	sp, r7
 8014a5a:	bd90      	pop	{r4, r7, pc}
 8014a5c:	200071c0 	.word	0x200071c0
 8014a60:	200071bc 	.word	0x200071bc
 8014a64:	200071f0 	.word	0x200071f0
 8014a68:	200071e8 	.word	0x200071e8
 8014a6c:	200071f1 	.word	0x200071f1
 8014a70:	200071b8 	.word	0x200071b8

08014a74 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 8014a74:	b590      	push	{r4, r7, lr}
 8014a76:	b085      	sub	sp, #20
 8014a78:	af00      	add	r7, sp, #0
 8014a7a:	6078      	str	r0, [r7, #4]
 8014a7c:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 8014a7e:	687b      	ldr	r3, [r7, #4]
 8014a80:	2b00      	cmp	r3, #0
 8014a82:	d106      	bne.n	8014a92 <tcp_oos_insert_segment+0x1e>
 8014a84:	4b3b      	ldr	r3, [pc, #236]	; (8014b74 <tcp_oos_insert_segment+0x100>)
 8014a86:	f240 421f 	movw	r2, #1055	; 0x41f
 8014a8a:	493b      	ldr	r1, [pc, #236]	; (8014b78 <tcp_oos_insert_segment+0x104>)
 8014a8c:	483b      	ldr	r0, [pc, #236]	; (8014b7c <tcp_oos_insert_segment+0x108>)
 8014a8e:	f006 fc13 	bl	801b2b8 <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8014a92:	687b      	ldr	r3, [r7, #4]
 8014a94:	68db      	ldr	r3, [r3, #12]
 8014a96:	899b      	ldrh	r3, [r3, #12]
 8014a98:	b29b      	uxth	r3, r3
 8014a9a:	4618      	mov	r0, r3
 8014a9c:	f7fb f966 	bl	800fd6c <lwip_htons>
 8014aa0:	4603      	mov	r3, r0
 8014aa2:	b2db      	uxtb	r3, r3
 8014aa4:	f003 0301 	and.w	r3, r3, #1
 8014aa8:	2b00      	cmp	r3, #0
 8014aaa:	d028      	beq.n	8014afe <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 8014aac:	6838      	ldr	r0, [r7, #0]
 8014aae:	f7fe f9b3 	bl	8012e18 <tcp_segs_free>
    next = NULL;
 8014ab2:	2300      	movs	r3, #0
 8014ab4:	603b      	str	r3, [r7, #0]
 8014ab6:	e056      	b.n	8014b66 <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8014ab8:	683b      	ldr	r3, [r7, #0]
 8014aba:	68db      	ldr	r3, [r3, #12]
 8014abc:	899b      	ldrh	r3, [r3, #12]
 8014abe:	b29b      	uxth	r3, r3
 8014ac0:	4618      	mov	r0, r3
 8014ac2:	f7fb f953 	bl	800fd6c <lwip_htons>
 8014ac6:	4603      	mov	r3, r0
 8014ac8:	b2db      	uxtb	r3, r3
 8014aca:	f003 0301 	and.w	r3, r3, #1
 8014ace:	2b00      	cmp	r3, #0
 8014ad0:	d00d      	beq.n	8014aee <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 8014ad2:	687b      	ldr	r3, [r7, #4]
 8014ad4:	68db      	ldr	r3, [r3, #12]
 8014ad6:	899b      	ldrh	r3, [r3, #12]
 8014ad8:	b29c      	uxth	r4, r3
 8014ada:	2001      	movs	r0, #1
 8014adc:	f7fb f946 	bl	800fd6c <lwip_htons>
 8014ae0:	4603      	mov	r3, r0
 8014ae2:	461a      	mov	r2, r3
 8014ae4:	687b      	ldr	r3, [r7, #4]
 8014ae6:	68db      	ldr	r3, [r3, #12]
 8014ae8:	4322      	orrs	r2, r4
 8014aea:	b292      	uxth	r2, r2
 8014aec:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 8014aee:	683b      	ldr	r3, [r7, #0]
 8014af0:	60fb      	str	r3, [r7, #12]
      next = next->next;
 8014af2:	683b      	ldr	r3, [r7, #0]
 8014af4:	681b      	ldr	r3, [r3, #0]
 8014af6:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 8014af8:	68f8      	ldr	r0, [r7, #12]
 8014afa:	f7fe f9a2 	bl	8012e42 <tcp_seg_free>
    while (next &&
 8014afe:	683b      	ldr	r3, [r7, #0]
 8014b00:	2b00      	cmp	r3, #0
 8014b02:	d00e      	beq.n	8014b22 <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 8014b04:	687b      	ldr	r3, [r7, #4]
 8014b06:	891b      	ldrh	r3, [r3, #8]
 8014b08:	461a      	mov	r2, r3
 8014b0a:	4b1d      	ldr	r3, [pc, #116]	; (8014b80 <tcp_oos_insert_segment+0x10c>)
 8014b0c:	681b      	ldr	r3, [r3, #0]
 8014b0e:	441a      	add	r2, r3
 8014b10:	683b      	ldr	r3, [r7, #0]
 8014b12:	68db      	ldr	r3, [r3, #12]
 8014b14:	685b      	ldr	r3, [r3, #4]
 8014b16:	6839      	ldr	r1, [r7, #0]
 8014b18:	8909      	ldrh	r1, [r1, #8]
 8014b1a:	440b      	add	r3, r1
 8014b1c:	1ad3      	subs	r3, r2, r3
    while (next &&
 8014b1e:	2b00      	cmp	r3, #0
 8014b20:	daca      	bge.n	8014ab8 <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 8014b22:	683b      	ldr	r3, [r7, #0]
 8014b24:	2b00      	cmp	r3, #0
 8014b26:	d01e      	beq.n	8014b66 <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 8014b28:	687b      	ldr	r3, [r7, #4]
 8014b2a:	891b      	ldrh	r3, [r3, #8]
 8014b2c:	461a      	mov	r2, r3
 8014b2e:	4b14      	ldr	r3, [pc, #80]	; (8014b80 <tcp_oos_insert_segment+0x10c>)
 8014b30:	681b      	ldr	r3, [r3, #0]
 8014b32:	441a      	add	r2, r3
 8014b34:	683b      	ldr	r3, [r7, #0]
 8014b36:	68db      	ldr	r3, [r3, #12]
 8014b38:	685b      	ldr	r3, [r3, #4]
 8014b3a:	1ad3      	subs	r3, r2, r3
    if (next &&
 8014b3c:	2b00      	cmp	r3, #0
 8014b3e:	dd12      	ble.n	8014b66 <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 8014b40:	683b      	ldr	r3, [r7, #0]
 8014b42:	68db      	ldr	r3, [r3, #12]
 8014b44:	685b      	ldr	r3, [r3, #4]
 8014b46:	b29a      	uxth	r2, r3
 8014b48:	4b0d      	ldr	r3, [pc, #52]	; (8014b80 <tcp_oos_insert_segment+0x10c>)
 8014b4a:	681b      	ldr	r3, [r3, #0]
 8014b4c:	b29b      	uxth	r3, r3
 8014b4e:	1ad3      	subs	r3, r2, r3
 8014b50:	b29a      	uxth	r2, r3
 8014b52:	687b      	ldr	r3, [r7, #4]
 8014b54:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 8014b56:	687b      	ldr	r3, [r7, #4]
 8014b58:	685a      	ldr	r2, [r3, #4]
 8014b5a:	687b      	ldr	r3, [r7, #4]
 8014b5c:	891b      	ldrh	r3, [r3, #8]
 8014b5e:	4619      	mov	r1, r3
 8014b60:	4610      	mov	r0, r2
 8014b62:	f7fc fb83 	bl	801126c <pbuf_realloc>
    }
  }
  cseg->next = next;
 8014b66:	687b      	ldr	r3, [r7, #4]
 8014b68:	683a      	ldr	r2, [r7, #0]
 8014b6a:	601a      	str	r2, [r3, #0]
}
 8014b6c:	bf00      	nop
 8014b6e:	3714      	adds	r7, #20
 8014b70:	46bd      	mov	sp, r7
 8014b72:	bd90      	pop	{r4, r7, pc}
 8014b74:	0801f538 	.word	0x0801f538
 8014b78:	0801f7f8 	.word	0x0801f7f8
 8014b7c:	0801f584 	.word	0x0801f584
 8014b80:	200071e4 	.word	0x200071e4

08014b84 <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 8014b84:	b5b0      	push	{r4, r5, r7, lr}
 8014b86:	b086      	sub	sp, #24
 8014b88:	af00      	add	r7, sp, #0
 8014b8a:	60f8      	str	r0, [r7, #12]
 8014b8c:	60b9      	str	r1, [r7, #8]
 8014b8e:	607a      	str	r2, [r7, #4]
 8014b90:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 8014b92:	e03e      	b.n	8014c12 <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 8014b94:	68bb      	ldr	r3, [r7, #8]
 8014b96:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 8014b98:	68bb      	ldr	r3, [r7, #8]
 8014b9a:	681b      	ldr	r3, [r3, #0]
 8014b9c:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 8014b9e:	697b      	ldr	r3, [r7, #20]
 8014ba0:	685b      	ldr	r3, [r3, #4]
 8014ba2:	4618      	mov	r0, r3
 8014ba4:	f7fc fd6e 	bl	8011684 <pbuf_clen>
 8014ba8:	4603      	mov	r3, r0
 8014baa:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 8014bac:	68fb      	ldr	r3, [r7, #12]
 8014bae:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8014bb2:	8a7a      	ldrh	r2, [r7, #18]
 8014bb4:	429a      	cmp	r2, r3
 8014bb6:	d906      	bls.n	8014bc6 <tcp_free_acked_segments+0x42>
 8014bb8:	4b2a      	ldr	r3, [pc, #168]	; (8014c64 <tcp_free_acked_segments+0xe0>)
 8014bba:	f240 4257 	movw	r2, #1111	; 0x457
 8014bbe:	492a      	ldr	r1, [pc, #168]	; (8014c68 <tcp_free_acked_segments+0xe4>)
 8014bc0:	482a      	ldr	r0, [pc, #168]	; (8014c6c <tcp_free_acked_segments+0xe8>)
 8014bc2:	f006 fb79 	bl	801b2b8 <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 8014bc6:	68fb      	ldr	r3, [r7, #12]
 8014bc8:	f8b3 2066 	ldrh.w	r2, [r3, #102]	; 0x66
 8014bcc:	8a7b      	ldrh	r3, [r7, #18]
 8014bce:	1ad3      	subs	r3, r2, r3
 8014bd0:	b29a      	uxth	r2, r3
 8014bd2:	68fb      	ldr	r3, [r7, #12]
 8014bd4:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 8014bd8:	697b      	ldr	r3, [r7, #20]
 8014bda:	891a      	ldrh	r2, [r3, #8]
 8014bdc:	4b24      	ldr	r3, [pc, #144]	; (8014c70 <tcp_free_acked_segments+0xec>)
 8014bde:	881b      	ldrh	r3, [r3, #0]
 8014be0:	4413      	add	r3, r2
 8014be2:	b29a      	uxth	r2, r3
 8014be4:	4b22      	ldr	r3, [pc, #136]	; (8014c70 <tcp_free_acked_segments+0xec>)
 8014be6:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 8014be8:	6978      	ldr	r0, [r7, #20]
 8014bea:	f7fe f92a 	bl	8012e42 <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 8014bee:	68fb      	ldr	r3, [r7, #12]
 8014bf0:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8014bf4:	2b00      	cmp	r3, #0
 8014bf6:	d00c      	beq.n	8014c12 <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 8014bf8:	68bb      	ldr	r3, [r7, #8]
 8014bfa:	2b00      	cmp	r3, #0
 8014bfc:	d109      	bne.n	8014c12 <tcp_free_acked_segments+0x8e>
 8014bfe:	683b      	ldr	r3, [r7, #0]
 8014c00:	2b00      	cmp	r3, #0
 8014c02:	d106      	bne.n	8014c12 <tcp_free_acked_segments+0x8e>
 8014c04:	4b17      	ldr	r3, [pc, #92]	; (8014c64 <tcp_free_acked_segments+0xe0>)
 8014c06:	f240 4261 	movw	r2, #1121	; 0x461
 8014c0a:	491a      	ldr	r1, [pc, #104]	; (8014c74 <tcp_free_acked_segments+0xf0>)
 8014c0c:	4817      	ldr	r0, [pc, #92]	; (8014c6c <tcp_free_acked_segments+0xe8>)
 8014c0e:	f006 fb53 	bl	801b2b8 <iprintf>
  while (seg_list != NULL &&
 8014c12:	68bb      	ldr	r3, [r7, #8]
 8014c14:	2b00      	cmp	r3, #0
 8014c16:	d020      	beq.n	8014c5a <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 8014c18:	68bb      	ldr	r3, [r7, #8]
 8014c1a:	68db      	ldr	r3, [r3, #12]
 8014c1c:	685b      	ldr	r3, [r3, #4]
 8014c1e:	4618      	mov	r0, r3
 8014c20:	f7fb f8b9 	bl	800fd96 <lwip_htonl>
 8014c24:	4604      	mov	r4, r0
 8014c26:	68bb      	ldr	r3, [r7, #8]
 8014c28:	891b      	ldrh	r3, [r3, #8]
 8014c2a:	461d      	mov	r5, r3
 8014c2c:	68bb      	ldr	r3, [r7, #8]
 8014c2e:	68db      	ldr	r3, [r3, #12]
 8014c30:	899b      	ldrh	r3, [r3, #12]
 8014c32:	b29b      	uxth	r3, r3
 8014c34:	4618      	mov	r0, r3
 8014c36:	f7fb f899 	bl	800fd6c <lwip_htons>
 8014c3a:	4603      	mov	r3, r0
 8014c3c:	b2db      	uxtb	r3, r3
 8014c3e:	f003 0303 	and.w	r3, r3, #3
 8014c42:	2b00      	cmp	r3, #0
 8014c44:	d001      	beq.n	8014c4a <tcp_free_acked_segments+0xc6>
 8014c46:	2301      	movs	r3, #1
 8014c48:	e000      	b.n	8014c4c <tcp_free_acked_segments+0xc8>
 8014c4a:	2300      	movs	r3, #0
 8014c4c:	442b      	add	r3, r5
 8014c4e:	18e2      	adds	r2, r4, r3
 8014c50:	4b09      	ldr	r3, [pc, #36]	; (8014c78 <tcp_free_acked_segments+0xf4>)
 8014c52:	681b      	ldr	r3, [r3, #0]
 8014c54:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 8014c56:	2b00      	cmp	r3, #0
 8014c58:	dd9c      	ble.n	8014b94 <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 8014c5a:	68bb      	ldr	r3, [r7, #8]
}
 8014c5c:	4618      	mov	r0, r3
 8014c5e:	3718      	adds	r7, #24
 8014c60:	46bd      	mov	sp, r7
 8014c62:	bdb0      	pop	{r4, r5, r7, pc}
 8014c64:	0801f538 	.word	0x0801f538
 8014c68:	0801f820 	.word	0x0801f820
 8014c6c:	0801f584 	.word	0x0801f584
 8014c70:	200071ec 	.word	0x200071ec
 8014c74:	0801f848 	.word	0x0801f848
 8014c78:	200071e8 	.word	0x200071e8

08014c7c <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 8014c7c:	b5b0      	push	{r4, r5, r7, lr}
 8014c7e:	b094      	sub	sp, #80	; 0x50
 8014c80:	af00      	add	r7, sp, #0
 8014c82:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 8014c84:	2300      	movs	r3, #0
 8014c86:	64bb      	str	r3, [r7, #72]	; 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 8014c88:	687b      	ldr	r3, [r7, #4]
 8014c8a:	2b00      	cmp	r3, #0
 8014c8c:	d106      	bne.n	8014c9c <tcp_receive+0x20>
 8014c8e:	4b91      	ldr	r3, [pc, #580]	; (8014ed4 <tcp_receive+0x258>)
 8014c90:	f240 427b 	movw	r2, #1147	; 0x47b
 8014c94:	4990      	ldr	r1, [pc, #576]	; (8014ed8 <tcp_receive+0x25c>)
 8014c96:	4891      	ldr	r0, [pc, #580]	; (8014edc <tcp_receive+0x260>)
 8014c98:	f006 fb0e 	bl	801b2b8 <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 8014c9c:	687b      	ldr	r3, [r7, #4]
 8014c9e:	7d1b      	ldrb	r3, [r3, #20]
 8014ca0:	2b03      	cmp	r3, #3
 8014ca2:	d806      	bhi.n	8014cb2 <tcp_receive+0x36>
 8014ca4:	4b8b      	ldr	r3, [pc, #556]	; (8014ed4 <tcp_receive+0x258>)
 8014ca6:	f240 427c 	movw	r2, #1148	; 0x47c
 8014caa:	498d      	ldr	r1, [pc, #564]	; (8014ee0 <tcp_receive+0x264>)
 8014cac:	488b      	ldr	r0, [pc, #556]	; (8014edc <tcp_receive+0x260>)
 8014cae:	f006 fb03 	bl	801b2b8 <iprintf>

  if (flags & TCP_ACK) {
 8014cb2:	4b8c      	ldr	r3, [pc, #560]	; (8014ee4 <tcp_receive+0x268>)
 8014cb4:	781b      	ldrb	r3, [r3, #0]
 8014cb6:	f003 0310 	and.w	r3, r3, #16
 8014cba:	2b00      	cmp	r3, #0
 8014cbc:	f000 8264 	beq.w	8015188 <tcp_receive+0x50c>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 8014cc0:	687b      	ldr	r3, [r7, #4]
 8014cc2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8014cc6:	461a      	mov	r2, r3
 8014cc8:	687b      	ldr	r3, [r7, #4]
 8014cca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8014ccc:	4413      	add	r3, r2
 8014cce:	633b      	str	r3, [r7, #48]	; 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8014cd0:	687b      	ldr	r3, [r7, #4]
 8014cd2:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8014cd4:	4b84      	ldr	r3, [pc, #528]	; (8014ee8 <tcp_receive+0x26c>)
 8014cd6:	681b      	ldr	r3, [r3, #0]
 8014cd8:	1ad3      	subs	r3, r2, r3
 8014cda:	2b00      	cmp	r3, #0
 8014cdc:	db1b      	blt.n	8014d16 <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8014cde:	687b      	ldr	r3, [r7, #4]
 8014ce0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8014ce2:	4b81      	ldr	r3, [pc, #516]	; (8014ee8 <tcp_receive+0x26c>)
 8014ce4:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8014ce6:	429a      	cmp	r2, r3
 8014ce8:	d106      	bne.n	8014cf8 <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8014cea:	687b      	ldr	r3, [r7, #4]
 8014cec:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8014cee:	4b7f      	ldr	r3, [pc, #508]	; (8014eec <tcp_receive+0x270>)
 8014cf0:	681b      	ldr	r3, [r3, #0]
 8014cf2:	1ad3      	subs	r3, r2, r3
 8014cf4:	2b00      	cmp	r3, #0
 8014cf6:	db0e      	blt.n	8014d16 <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8014cf8:	687b      	ldr	r3, [r7, #4]
 8014cfa:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8014cfc:	4b7b      	ldr	r3, [pc, #492]	; (8014eec <tcp_receive+0x270>)
 8014cfe:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8014d00:	429a      	cmp	r2, r3
 8014d02:	d125      	bne.n	8014d50 <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8014d04:	4b7a      	ldr	r3, [pc, #488]	; (8014ef0 <tcp_receive+0x274>)
 8014d06:	681b      	ldr	r3, [r3, #0]
 8014d08:	89db      	ldrh	r3, [r3, #14]
 8014d0a:	b29a      	uxth	r2, r3
 8014d0c:	687b      	ldr	r3, [r7, #4]
 8014d0e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8014d12:	429a      	cmp	r2, r3
 8014d14:	d91c      	bls.n	8014d50 <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 8014d16:	4b76      	ldr	r3, [pc, #472]	; (8014ef0 <tcp_receive+0x274>)
 8014d18:	681b      	ldr	r3, [r3, #0]
 8014d1a:	89db      	ldrh	r3, [r3, #14]
 8014d1c:	b29a      	uxth	r2, r3
 8014d1e:	687b      	ldr	r3, [r7, #4]
 8014d20:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 8014d24:	687b      	ldr	r3, [r7, #4]
 8014d26:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
 8014d2a:	687b      	ldr	r3, [r7, #4]
 8014d2c:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8014d30:	429a      	cmp	r2, r3
 8014d32:	d205      	bcs.n	8014d40 <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 8014d34:	687b      	ldr	r3, [r7, #4]
 8014d36:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8014d3a:	687b      	ldr	r3, [r7, #4]
 8014d3c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      }
      pcb->snd_wl1 = seqno;
 8014d40:	4b69      	ldr	r3, [pc, #420]	; (8014ee8 <tcp_receive+0x26c>)
 8014d42:	681a      	ldr	r2, [r3, #0]
 8014d44:	687b      	ldr	r3, [r7, #4]
 8014d46:	655a      	str	r2, [r3, #84]	; 0x54
      pcb->snd_wl2 = ackno;
 8014d48:	4b68      	ldr	r3, [pc, #416]	; (8014eec <tcp_receive+0x270>)
 8014d4a:	681a      	ldr	r2, [r3, #0]
 8014d4c:	687b      	ldr	r3, [r7, #4]
 8014d4e:	659a      	str	r2, [r3, #88]	; 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 8014d50:	4b66      	ldr	r3, [pc, #408]	; (8014eec <tcp_receive+0x270>)
 8014d52:	681a      	ldr	r2, [r3, #0]
 8014d54:	687b      	ldr	r3, [r7, #4]
 8014d56:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8014d58:	1ad3      	subs	r3, r2, r3
 8014d5a:	2b00      	cmp	r3, #0
 8014d5c:	dc58      	bgt.n	8014e10 <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 8014d5e:	4b65      	ldr	r3, [pc, #404]	; (8014ef4 <tcp_receive+0x278>)
 8014d60:	881b      	ldrh	r3, [r3, #0]
 8014d62:	2b00      	cmp	r3, #0
 8014d64:	d14b      	bne.n	8014dfe <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 8014d66:	687b      	ldr	r3, [r7, #4]
 8014d68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8014d6a:	687a      	ldr	r2, [r7, #4]
 8014d6c:	f8b2 2060 	ldrh.w	r2, [r2, #96]	; 0x60
 8014d70:	4413      	add	r3, r2
 8014d72:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8014d74:	429a      	cmp	r2, r3
 8014d76:	d142      	bne.n	8014dfe <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 8014d78:	687b      	ldr	r3, [r7, #4]
 8014d7a:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8014d7e:	2b00      	cmp	r3, #0
 8014d80:	db3d      	blt.n	8014dfe <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 8014d82:	687b      	ldr	r3, [r7, #4]
 8014d84:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8014d86:	4b59      	ldr	r3, [pc, #356]	; (8014eec <tcp_receive+0x270>)
 8014d88:	681b      	ldr	r3, [r3, #0]
 8014d8a:	429a      	cmp	r2, r3
 8014d8c:	d137      	bne.n	8014dfe <tcp_receive+0x182>
              found_dupack = 1;
 8014d8e:	2301      	movs	r3, #1
 8014d90:	64bb      	str	r3, [r7, #72]	; 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 8014d92:	687b      	ldr	r3, [r7, #4]
 8014d94:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8014d98:	2bff      	cmp	r3, #255	; 0xff
 8014d9a:	d007      	beq.n	8014dac <tcp_receive+0x130>
                ++pcb->dupacks;
 8014d9c:	687b      	ldr	r3, [r7, #4]
 8014d9e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8014da2:	3301      	adds	r3, #1
 8014da4:	b2da      	uxtb	r2, r3
 8014da6:	687b      	ldr	r3, [r7, #4]
 8014da8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 8014dac:	687b      	ldr	r3, [r7, #4]
 8014dae:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8014db2:	2b03      	cmp	r3, #3
 8014db4:	d91b      	bls.n	8014dee <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 8014db6:	687b      	ldr	r3, [r7, #4]
 8014db8:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8014dbc:	687b      	ldr	r3, [r7, #4]
 8014dbe:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8014dc0:	4413      	add	r3, r2
 8014dc2:	b29a      	uxth	r2, r3
 8014dc4:	687b      	ldr	r3, [r7, #4]
 8014dc6:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8014dca:	429a      	cmp	r2, r3
 8014dcc:	d30a      	bcc.n	8014de4 <tcp_receive+0x168>
 8014dce:	687b      	ldr	r3, [r7, #4]
 8014dd0:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8014dd4:	687b      	ldr	r3, [r7, #4]
 8014dd6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8014dd8:	4413      	add	r3, r2
 8014dda:	b29a      	uxth	r2, r3
 8014ddc:	687b      	ldr	r3, [r7, #4]
 8014dde:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8014de2:	e004      	b.n	8014dee <tcp_receive+0x172>
 8014de4:	687b      	ldr	r3, [r7, #4]
 8014de6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8014dea:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
              }
              if (pcb->dupacks >= 3) {
 8014dee:	687b      	ldr	r3, [r7, #4]
 8014df0:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8014df4:	2b02      	cmp	r3, #2
 8014df6:	d902      	bls.n	8014dfe <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 8014df8:	6878      	ldr	r0, [r7, #4]
 8014dfa:	f002 fb45 	bl	8017488 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 8014dfe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8014e00:	2b00      	cmp	r3, #0
 8014e02:	f040 8161 	bne.w	80150c8 <tcp_receive+0x44c>
        pcb->dupacks = 0;
 8014e06:	687b      	ldr	r3, [r7, #4]
 8014e08:	2200      	movs	r2, #0
 8014e0a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8014e0e:	e15b      	b.n	80150c8 <tcp_receive+0x44c>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8014e10:	4b36      	ldr	r3, [pc, #216]	; (8014eec <tcp_receive+0x270>)
 8014e12:	681a      	ldr	r2, [r3, #0]
 8014e14:	687b      	ldr	r3, [r7, #4]
 8014e16:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8014e18:	1ad3      	subs	r3, r2, r3
 8014e1a:	3b01      	subs	r3, #1
 8014e1c:	2b00      	cmp	r3, #0
 8014e1e:	f2c0 814e 	blt.w	80150be <tcp_receive+0x442>
 8014e22:	4b32      	ldr	r3, [pc, #200]	; (8014eec <tcp_receive+0x270>)
 8014e24:	681a      	ldr	r2, [r3, #0]
 8014e26:	687b      	ldr	r3, [r7, #4]
 8014e28:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8014e2a:	1ad3      	subs	r3, r2, r3
 8014e2c:	2b00      	cmp	r3, #0
 8014e2e:	f300 8146 	bgt.w	80150be <tcp_receive+0x442>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 8014e32:	687b      	ldr	r3, [r7, #4]
 8014e34:	8b5b      	ldrh	r3, [r3, #26]
 8014e36:	f003 0304 	and.w	r3, r3, #4
 8014e3a:	2b00      	cmp	r3, #0
 8014e3c:	d010      	beq.n	8014e60 <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 8014e3e:	687b      	ldr	r3, [r7, #4]
 8014e40:	8b5b      	ldrh	r3, [r3, #26]
 8014e42:	f023 0304 	bic.w	r3, r3, #4
 8014e46:	b29a      	uxth	r2, r3
 8014e48:	687b      	ldr	r3, [r7, #4]
 8014e4a:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 8014e4c:	687b      	ldr	r3, [r7, #4]
 8014e4e:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8014e52:	687b      	ldr	r3, [r7, #4]
 8014e54:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        pcb->bytes_acked = 0;
 8014e58:	687b      	ldr	r3, [r7, #4]
 8014e5a:	2200      	movs	r2, #0
 8014e5c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 8014e60:	687b      	ldr	r3, [r7, #4]
 8014e62:	2200      	movs	r2, #0
 8014e64:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8014e68:	687b      	ldr	r3, [r7, #4]
 8014e6a:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8014e6e:	10db      	asrs	r3, r3, #3
 8014e70:	b21b      	sxth	r3, r3
 8014e72:	b29a      	uxth	r2, r3
 8014e74:	687b      	ldr	r3, [r7, #4]
 8014e76:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8014e7a:	b29b      	uxth	r3, r3
 8014e7c:	4413      	add	r3, r2
 8014e7e:	b29b      	uxth	r3, r3
 8014e80:	b21a      	sxth	r2, r3
 8014e82:	687b      	ldr	r3, [r7, #4]
 8014e84:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 8014e88:	4b18      	ldr	r3, [pc, #96]	; (8014eec <tcp_receive+0x270>)
 8014e8a:	681b      	ldr	r3, [r3, #0]
 8014e8c:	b29a      	uxth	r2, r3
 8014e8e:	687b      	ldr	r3, [r7, #4]
 8014e90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8014e92:	b29b      	uxth	r3, r3
 8014e94:	1ad3      	subs	r3, r2, r3
 8014e96:	85fb      	strh	r3, [r7, #46]	; 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 8014e98:	687b      	ldr	r3, [r7, #4]
 8014e9a:	2200      	movs	r2, #0
 8014e9c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 8014ea0:	4b12      	ldr	r3, [pc, #72]	; (8014eec <tcp_receive+0x270>)
 8014ea2:	681a      	ldr	r2, [r3, #0]
 8014ea4:	687b      	ldr	r3, [r7, #4]
 8014ea6:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 8014ea8:	687b      	ldr	r3, [r7, #4]
 8014eaa:	7d1b      	ldrb	r3, [r3, #20]
 8014eac:	2b03      	cmp	r3, #3
 8014eae:	f240 8097 	bls.w	8014fe0 <tcp_receive+0x364>
        if (pcb->cwnd < pcb->ssthresh) {
 8014eb2:	687b      	ldr	r3, [r7, #4]
 8014eb4:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8014eb8:	687b      	ldr	r3, [r7, #4]
 8014eba:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8014ebe:	429a      	cmp	r2, r3
 8014ec0:	d245      	bcs.n	8014f4e <tcp_receive+0x2d2>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 8014ec2:	687b      	ldr	r3, [r7, #4]
 8014ec4:	8b5b      	ldrh	r3, [r3, #26]
 8014ec6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8014eca:	2b00      	cmp	r3, #0
 8014ecc:	d014      	beq.n	8014ef8 <tcp_receive+0x27c>
 8014ece:	2301      	movs	r3, #1
 8014ed0:	e013      	b.n	8014efa <tcp_receive+0x27e>
 8014ed2:	bf00      	nop
 8014ed4:	0801f538 	.word	0x0801f538
 8014ed8:	0801f868 	.word	0x0801f868
 8014edc:	0801f584 	.word	0x0801f584
 8014ee0:	0801f884 	.word	0x0801f884
 8014ee4:	200071f0 	.word	0x200071f0
 8014ee8:	200071e4 	.word	0x200071e4
 8014eec:	200071e8 	.word	0x200071e8
 8014ef0:	200071d4 	.word	0x200071d4
 8014ef4:	200071ee 	.word	0x200071ee
 8014ef8:	2302      	movs	r3, #2
 8014efa:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 8014efe:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8014f02:	b29a      	uxth	r2, r3
 8014f04:	687b      	ldr	r3, [r7, #4]
 8014f06:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8014f08:	fb12 f303 	smulbb	r3, r2, r3
 8014f0c:	b29b      	uxth	r3, r3
 8014f0e:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8014f10:	4293      	cmp	r3, r2
 8014f12:	bf28      	it	cs
 8014f14:	4613      	movcs	r3, r2
 8014f16:	857b      	strh	r3, [r7, #42]	; 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 8014f18:	687b      	ldr	r3, [r7, #4]
 8014f1a:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8014f1e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8014f20:	4413      	add	r3, r2
 8014f22:	b29a      	uxth	r2, r3
 8014f24:	687b      	ldr	r3, [r7, #4]
 8014f26:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8014f2a:	429a      	cmp	r2, r3
 8014f2c:	d309      	bcc.n	8014f42 <tcp_receive+0x2c6>
 8014f2e:	687b      	ldr	r3, [r7, #4]
 8014f30:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8014f34:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8014f36:	4413      	add	r3, r2
 8014f38:	b29a      	uxth	r2, r3
 8014f3a:	687b      	ldr	r3, [r7, #4]
 8014f3c:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8014f40:	e04e      	b.n	8014fe0 <tcp_receive+0x364>
 8014f42:	687b      	ldr	r3, [r7, #4]
 8014f44:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8014f48:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8014f4c:	e048      	b.n	8014fe0 <tcp_receive+0x364>
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 8014f4e:	687b      	ldr	r3, [r7, #4]
 8014f50:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8014f54:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8014f56:	4413      	add	r3, r2
 8014f58:	b29a      	uxth	r2, r3
 8014f5a:	687b      	ldr	r3, [r7, #4]
 8014f5c:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8014f60:	429a      	cmp	r2, r3
 8014f62:	d309      	bcc.n	8014f78 <tcp_receive+0x2fc>
 8014f64:	687b      	ldr	r3, [r7, #4]
 8014f66:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8014f6a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8014f6c:	4413      	add	r3, r2
 8014f6e:	b29a      	uxth	r2, r3
 8014f70:	687b      	ldr	r3, [r7, #4]
 8014f72:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8014f76:	e004      	b.n	8014f82 <tcp_receive+0x306>
 8014f78:	687b      	ldr	r3, [r7, #4]
 8014f7a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8014f7e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 8014f82:	687b      	ldr	r3, [r7, #4]
 8014f84:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8014f88:	687b      	ldr	r3, [r7, #4]
 8014f8a:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8014f8e:	429a      	cmp	r2, r3
 8014f90:	d326      	bcc.n	8014fe0 <tcp_receive+0x364>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 8014f92:	687b      	ldr	r3, [r7, #4]
 8014f94:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8014f98:	687b      	ldr	r3, [r7, #4]
 8014f9a:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8014f9e:	1ad3      	subs	r3, r2, r3
 8014fa0:	b29a      	uxth	r2, r3
 8014fa2:	687b      	ldr	r3, [r7, #4]
 8014fa4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 8014fa8:	687b      	ldr	r3, [r7, #4]
 8014faa:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8014fae:	687b      	ldr	r3, [r7, #4]
 8014fb0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8014fb2:	4413      	add	r3, r2
 8014fb4:	b29a      	uxth	r2, r3
 8014fb6:	687b      	ldr	r3, [r7, #4]
 8014fb8:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8014fbc:	429a      	cmp	r2, r3
 8014fbe:	d30a      	bcc.n	8014fd6 <tcp_receive+0x35a>
 8014fc0:	687b      	ldr	r3, [r7, #4]
 8014fc2:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8014fc6:	687b      	ldr	r3, [r7, #4]
 8014fc8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8014fca:	4413      	add	r3, r2
 8014fcc:	b29a      	uxth	r2, r3
 8014fce:	687b      	ldr	r3, [r7, #4]
 8014fd0:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8014fd4:	e004      	b.n	8014fe0 <tcp_receive+0x364>
 8014fd6:	687b      	ldr	r3, [r7, #4]
 8014fd8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8014fdc:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 8014fe0:	687b      	ldr	r3, [r7, #4]
 8014fe2:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8014fe4:	687b      	ldr	r3, [r7, #4]
 8014fe6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014fe8:	4a98      	ldr	r2, [pc, #608]	; (801524c <tcp_receive+0x5d0>)
 8014fea:	6878      	ldr	r0, [r7, #4]
 8014fec:	f7ff fdca 	bl	8014b84 <tcp_free_acked_segments>
 8014ff0:	4602      	mov	r2, r0
 8014ff2:	687b      	ldr	r3, [r7, #4]
 8014ff4:	671a      	str	r2, [r3, #112]	; 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 8014ff6:	687b      	ldr	r3, [r7, #4]
 8014ff8:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 8014ffa:	687b      	ldr	r3, [r7, #4]
 8014ffc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8014ffe:	4a94      	ldr	r2, [pc, #592]	; (8015250 <tcp_receive+0x5d4>)
 8015000:	6878      	ldr	r0, [r7, #4]
 8015002:	f7ff fdbf 	bl	8014b84 <tcp_free_acked_segments>
 8015006:	4602      	mov	r2, r0
 8015008:	687b      	ldr	r3, [r7, #4]
 801500a:	66da      	str	r2, [r3, #108]	; 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 801500c:	687b      	ldr	r3, [r7, #4]
 801500e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8015010:	2b00      	cmp	r3, #0
 8015012:	d104      	bne.n	801501e <tcp_receive+0x3a2>
        pcb->rtime = -1;
 8015014:	687b      	ldr	r3, [r7, #4]
 8015016:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801501a:	861a      	strh	r2, [r3, #48]	; 0x30
 801501c:	e002      	b.n	8015024 <tcp_receive+0x3a8>
      } else {
        pcb->rtime = 0;
 801501e:	687b      	ldr	r3, [r7, #4]
 8015020:	2200      	movs	r2, #0
 8015022:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 8015024:	687b      	ldr	r3, [r7, #4]
 8015026:	2200      	movs	r2, #0
 8015028:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 801502a:	687b      	ldr	r3, [r7, #4]
 801502c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801502e:	2b00      	cmp	r3, #0
 8015030:	d103      	bne.n	801503a <tcp_receive+0x3be>
        pcb->unsent_oversize = 0;
 8015032:	687b      	ldr	r3, [r7, #4]
 8015034:	2200      	movs	r2, #0
 8015036:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 801503a:	687b      	ldr	r3, [r7, #4]
 801503c:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 8015040:	4b84      	ldr	r3, [pc, #528]	; (8015254 <tcp_receive+0x5d8>)
 8015042:	881b      	ldrh	r3, [r3, #0]
 8015044:	4413      	add	r3, r2
 8015046:	b29a      	uxth	r2, r3
 8015048:	687b      	ldr	r3, [r7, #4]
 801504a:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 801504e:	687b      	ldr	r3, [r7, #4]
 8015050:	8b5b      	ldrh	r3, [r3, #26]
 8015052:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8015056:	2b00      	cmp	r3, #0
 8015058:	d035      	beq.n	80150c6 <tcp_receive+0x44a>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 801505a:	687b      	ldr	r3, [r7, #4]
 801505c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801505e:	2b00      	cmp	r3, #0
 8015060:	d118      	bne.n	8015094 <tcp_receive+0x418>
          if ((pcb->unsent == NULL) ||
 8015062:	687b      	ldr	r3, [r7, #4]
 8015064:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8015066:	2b00      	cmp	r3, #0
 8015068:	d00c      	beq.n	8015084 <tcp_receive+0x408>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 801506a:	687b      	ldr	r3, [r7, #4]
 801506c:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 801506e:	687b      	ldr	r3, [r7, #4]
 8015070:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8015072:	68db      	ldr	r3, [r3, #12]
 8015074:	685b      	ldr	r3, [r3, #4]
 8015076:	4618      	mov	r0, r3
 8015078:	f7fa fe8d 	bl	800fd96 <lwip_htonl>
 801507c:	4603      	mov	r3, r0
 801507e:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 8015080:	2b00      	cmp	r3, #0
 8015082:	dc20      	bgt.n	80150c6 <tcp_receive+0x44a>
            tcp_clear_flags(pcb, TF_RTO);
 8015084:	687b      	ldr	r3, [r7, #4]
 8015086:	8b5b      	ldrh	r3, [r3, #26]
 8015088:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 801508c:	b29a      	uxth	r2, r3
 801508e:	687b      	ldr	r3, [r7, #4]
 8015090:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8015092:	e018      	b.n	80150c6 <tcp_receive+0x44a>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 8015094:	687b      	ldr	r3, [r7, #4]
 8015096:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 8015098:	687b      	ldr	r3, [r7, #4]
 801509a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801509c:	68db      	ldr	r3, [r3, #12]
 801509e:	685b      	ldr	r3, [r3, #4]
 80150a0:	4618      	mov	r0, r3
 80150a2:	f7fa fe78 	bl	800fd96 <lwip_htonl>
 80150a6:	4603      	mov	r3, r0
 80150a8:	1ae3      	subs	r3, r4, r3
 80150aa:	2b00      	cmp	r3, #0
 80150ac:	dc0b      	bgt.n	80150c6 <tcp_receive+0x44a>
          tcp_clear_flags(pcb, TF_RTO);
 80150ae:	687b      	ldr	r3, [r7, #4]
 80150b0:	8b5b      	ldrh	r3, [r3, #26]
 80150b2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80150b6:	b29a      	uxth	r2, r3
 80150b8:	687b      	ldr	r3, [r7, #4]
 80150ba:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 80150bc:	e003      	b.n	80150c6 <tcp_receive+0x44a>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 80150be:	6878      	ldr	r0, [r7, #4]
 80150c0:	f002 fbce 	bl	8017860 <tcp_send_empty_ack>
 80150c4:	e000      	b.n	80150c8 <tcp_receive+0x44c>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 80150c6:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 80150c8:	687b      	ldr	r3, [r7, #4]
 80150ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80150cc:	2b00      	cmp	r3, #0
 80150ce:	d05b      	beq.n	8015188 <tcp_receive+0x50c>
 80150d0:	687b      	ldr	r3, [r7, #4]
 80150d2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80150d4:	4b60      	ldr	r3, [pc, #384]	; (8015258 <tcp_receive+0x5dc>)
 80150d6:	681b      	ldr	r3, [r3, #0]
 80150d8:	1ad3      	subs	r3, r2, r3
 80150da:	2b00      	cmp	r3, #0
 80150dc:	da54      	bge.n	8015188 <tcp_receive+0x50c>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 80150de:	4b5f      	ldr	r3, [pc, #380]	; (801525c <tcp_receive+0x5e0>)
 80150e0:	681b      	ldr	r3, [r3, #0]
 80150e2:	b29a      	uxth	r2, r3
 80150e4:	687b      	ldr	r3, [r7, #4]
 80150e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80150e8:	b29b      	uxth	r3, r3
 80150ea:	1ad3      	subs	r3, r2, r3
 80150ec:	b29b      	uxth	r3, r3
 80150ee:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 80150f2:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 80150f6:	687b      	ldr	r3, [r7, #4]
 80150f8:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 80150fc:	10db      	asrs	r3, r3, #3
 80150fe:	b21b      	sxth	r3, r3
 8015100:	b29b      	uxth	r3, r3
 8015102:	1ad3      	subs	r3, r2, r3
 8015104:	b29b      	uxth	r3, r3
 8015106:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 801510a:	687b      	ldr	r3, [r7, #4]
 801510c:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8015110:	b29a      	uxth	r2, r3
 8015112:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8015116:	4413      	add	r3, r2
 8015118:	b29b      	uxth	r3, r3
 801511a:	b21a      	sxth	r2, r3
 801511c:	687b      	ldr	r3, [r7, #4]
 801511e:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 8015120:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8015124:	2b00      	cmp	r3, #0
 8015126:	da05      	bge.n	8015134 <tcp_receive+0x4b8>
        m = (s16_t) - m;
 8015128:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 801512c:	425b      	negs	r3, r3
 801512e:	b29b      	uxth	r3, r3
 8015130:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 8015134:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 8015138:	687b      	ldr	r3, [r7, #4]
 801513a:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 801513e:	109b      	asrs	r3, r3, #2
 8015140:	b21b      	sxth	r3, r3
 8015142:	b29b      	uxth	r3, r3
 8015144:	1ad3      	subs	r3, r2, r3
 8015146:	b29b      	uxth	r3, r3
 8015148:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 801514c:	687b      	ldr	r3, [r7, #4]
 801514e:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8015152:	b29a      	uxth	r2, r3
 8015154:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8015158:	4413      	add	r3, r2
 801515a:	b29b      	uxth	r3, r3
 801515c:	b21a      	sxth	r2, r3
 801515e:	687b      	ldr	r3, [r7, #4]
 8015160:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8015162:	687b      	ldr	r3, [r7, #4]
 8015164:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8015168:	10db      	asrs	r3, r3, #3
 801516a:	b21b      	sxth	r3, r3
 801516c:	b29a      	uxth	r2, r3
 801516e:	687b      	ldr	r3, [r7, #4]
 8015170:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8015174:	b29b      	uxth	r3, r3
 8015176:	4413      	add	r3, r2
 8015178:	b29b      	uxth	r3, r3
 801517a:	b21a      	sxth	r2, r3
 801517c:	687b      	ldr	r3, [r7, #4]
 801517e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 8015182:	687b      	ldr	r3, [r7, #4]
 8015184:	2200      	movs	r2, #0
 8015186:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 8015188:	4b35      	ldr	r3, [pc, #212]	; (8015260 <tcp_receive+0x5e4>)
 801518a:	881b      	ldrh	r3, [r3, #0]
 801518c:	2b00      	cmp	r3, #0
 801518e:	f000 84e2 	beq.w	8015b56 <tcp_receive+0xeda>
 8015192:	687b      	ldr	r3, [r7, #4]
 8015194:	7d1b      	ldrb	r3, [r3, #20]
 8015196:	2b06      	cmp	r3, #6
 8015198:	f200 84dd 	bhi.w	8015b56 <tcp_receive+0xeda>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 801519c:	687b      	ldr	r3, [r7, #4]
 801519e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80151a0:	4b30      	ldr	r3, [pc, #192]	; (8015264 <tcp_receive+0x5e8>)
 80151a2:	681b      	ldr	r3, [r3, #0]
 80151a4:	1ad3      	subs	r3, r2, r3
 80151a6:	3b01      	subs	r3, #1
 80151a8:	2b00      	cmp	r3, #0
 80151aa:	f2c0 808f 	blt.w	80152cc <tcp_receive+0x650>
 80151ae:	687b      	ldr	r3, [r7, #4]
 80151b0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80151b2:	4b2b      	ldr	r3, [pc, #172]	; (8015260 <tcp_receive+0x5e4>)
 80151b4:	881b      	ldrh	r3, [r3, #0]
 80151b6:	4619      	mov	r1, r3
 80151b8:	4b2a      	ldr	r3, [pc, #168]	; (8015264 <tcp_receive+0x5e8>)
 80151ba:	681b      	ldr	r3, [r3, #0]
 80151bc:	440b      	add	r3, r1
 80151be:	1ad3      	subs	r3, r2, r3
 80151c0:	3301      	adds	r3, #1
 80151c2:	2b00      	cmp	r3, #0
 80151c4:	f300 8082 	bgt.w	80152cc <tcp_receive+0x650>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 80151c8:	4b27      	ldr	r3, [pc, #156]	; (8015268 <tcp_receive+0x5ec>)
 80151ca:	685b      	ldr	r3, [r3, #4]
 80151cc:	647b      	str	r3, [r7, #68]	; 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 80151ce:	687b      	ldr	r3, [r7, #4]
 80151d0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80151d2:	4b24      	ldr	r3, [pc, #144]	; (8015264 <tcp_receive+0x5e8>)
 80151d4:	681b      	ldr	r3, [r3, #0]
 80151d6:	1ad3      	subs	r3, r2, r3
 80151d8:	627b      	str	r3, [r7, #36]	; 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 80151da:	4b23      	ldr	r3, [pc, #140]	; (8015268 <tcp_receive+0x5ec>)
 80151dc:	685b      	ldr	r3, [r3, #4]
 80151de:	2b00      	cmp	r3, #0
 80151e0:	d106      	bne.n	80151f0 <tcp_receive+0x574>
 80151e2:	4b22      	ldr	r3, [pc, #136]	; (801526c <tcp_receive+0x5f0>)
 80151e4:	f240 5294 	movw	r2, #1428	; 0x594
 80151e8:	4921      	ldr	r1, [pc, #132]	; (8015270 <tcp_receive+0x5f4>)
 80151ea:	4822      	ldr	r0, [pc, #136]	; (8015274 <tcp_receive+0x5f8>)
 80151ec:	f006 f864 	bl	801b2b8 <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 80151f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80151f2:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80151f6:	4293      	cmp	r3, r2
 80151f8:	d906      	bls.n	8015208 <tcp_receive+0x58c>
 80151fa:	4b1c      	ldr	r3, [pc, #112]	; (801526c <tcp_receive+0x5f0>)
 80151fc:	f240 5295 	movw	r2, #1429	; 0x595
 8015200:	491d      	ldr	r1, [pc, #116]	; (8015278 <tcp_receive+0x5fc>)
 8015202:	481c      	ldr	r0, [pc, #112]	; (8015274 <tcp_receive+0x5f8>)
 8015204:	f006 f858 	bl	801b2b8 <iprintf>
      off = (u16_t)off32;
 8015208:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801520a:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 801520e:	4b16      	ldr	r3, [pc, #88]	; (8015268 <tcp_receive+0x5ec>)
 8015210:	685b      	ldr	r3, [r3, #4]
 8015212:	891b      	ldrh	r3, [r3, #8]
 8015214:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8015218:	429a      	cmp	r2, r3
 801521a:	d906      	bls.n	801522a <tcp_receive+0x5ae>
 801521c:	4b13      	ldr	r3, [pc, #76]	; (801526c <tcp_receive+0x5f0>)
 801521e:	f240 5297 	movw	r2, #1431	; 0x597
 8015222:	4916      	ldr	r1, [pc, #88]	; (801527c <tcp_receive+0x600>)
 8015224:	4813      	ldr	r0, [pc, #76]	; (8015274 <tcp_receive+0x5f8>)
 8015226:	f006 f847 	bl	801b2b8 <iprintf>
      inseg.len -= off;
 801522a:	4b0f      	ldr	r3, [pc, #60]	; (8015268 <tcp_receive+0x5ec>)
 801522c:	891a      	ldrh	r2, [r3, #8]
 801522e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8015232:	1ad3      	subs	r3, r2, r3
 8015234:	b29a      	uxth	r2, r3
 8015236:	4b0c      	ldr	r3, [pc, #48]	; (8015268 <tcp_receive+0x5ec>)
 8015238:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 801523a:	4b0b      	ldr	r3, [pc, #44]	; (8015268 <tcp_receive+0x5ec>)
 801523c:	685b      	ldr	r3, [r3, #4]
 801523e:	891a      	ldrh	r2, [r3, #8]
 8015240:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8015244:	1ad3      	subs	r3, r2, r3
 8015246:	847b      	strh	r3, [r7, #34]	; 0x22
      while (p->len < off) {
 8015248:	e02a      	b.n	80152a0 <tcp_receive+0x624>
 801524a:	bf00      	nop
 801524c:	0801f8a0 	.word	0x0801f8a0
 8015250:	0801f8a8 	.word	0x0801f8a8
 8015254:	200071ec 	.word	0x200071ec
 8015258:	200071e8 	.word	0x200071e8
 801525c:	200071ac 	.word	0x200071ac
 8015260:	200071ee 	.word	0x200071ee
 8015264:	200071e4 	.word	0x200071e4
 8015268:	200071c4 	.word	0x200071c4
 801526c:	0801f538 	.word	0x0801f538
 8015270:	0801f8b0 	.word	0x0801f8b0
 8015274:	0801f584 	.word	0x0801f584
 8015278:	0801f8c0 	.word	0x0801f8c0
 801527c:	0801f8d0 	.word	0x0801f8d0
        off -= p->len;
 8015280:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8015282:	895b      	ldrh	r3, [r3, #10]
 8015284:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8015288:	1ad3      	subs	r3, r2, r3
 801528a:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 801528e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8015290:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8015292:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 8015294:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8015296:	2200      	movs	r2, #0
 8015298:	815a      	strh	r2, [r3, #10]
        p = p->next;
 801529a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801529c:	681b      	ldr	r3, [r3, #0]
 801529e:	647b      	str	r3, [r7, #68]	; 0x44
      while (p->len < off) {
 80152a0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80152a2:	895b      	ldrh	r3, [r3, #10]
 80152a4:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80152a8:	429a      	cmp	r2, r3
 80152aa:	d8e9      	bhi.n	8015280 <tcp_receive+0x604>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 80152ac:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80152b0:	4619      	mov	r1, r3
 80152b2:	6c78      	ldr	r0, [r7, #68]	; 0x44
 80152b4:	f7fc f8d8 	bl	8011468 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 80152b8:	687b      	ldr	r3, [r7, #4]
 80152ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80152bc:	4a91      	ldr	r2, [pc, #580]	; (8015504 <tcp_receive+0x888>)
 80152be:	6013      	str	r3, [r2, #0]
 80152c0:	4b91      	ldr	r3, [pc, #580]	; (8015508 <tcp_receive+0x88c>)
 80152c2:	68db      	ldr	r3, [r3, #12]
 80152c4:	4a8f      	ldr	r2, [pc, #572]	; (8015504 <tcp_receive+0x888>)
 80152c6:	6812      	ldr	r2, [r2, #0]
 80152c8:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 80152ca:	e00d      	b.n	80152e8 <tcp_receive+0x66c>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 80152cc:	4b8d      	ldr	r3, [pc, #564]	; (8015504 <tcp_receive+0x888>)
 80152ce:	681a      	ldr	r2, [r3, #0]
 80152d0:	687b      	ldr	r3, [r7, #4]
 80152d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80152d4:	1ad3      	subs	r3, r2, r3
 80152d6:	2b00      	cmp	r3, #0
 80152d8:	da06      	bge.n	80152e8 <tcp_receive+0x66c>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 80152da:	687b      	ldr	r3, [r7, #4]
 80152dc:	8b5b      	ldrh	r3, [r3, #26]
 80152de:	f043 0302 	orr.w	r3, r3, #2
 80152e2:	b29a      	uxth	r2, r3
 80152e4:	687b      	ldr	r3, [r7, #4]
 80152e6:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 80152e8:	4b86      	ldr	r3, [pc, #536]	; (8015504 <tcp_receive+0x888>)
 80152ea:	681a      	ldr	r2, [r3, #0]
 80152ec:	687b      	ldr	r3, [r7, #4]
 80152ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80152f0:	1ad3      	subs	r3, r2, r3
 80152f2:	2b00      	cmp	r3, #0
 80152f4:	f2c0 842a 	blt.w	8015b4c <tcp_receive+0xed0>
 80152f8:	4b82      	ldr	r3, [pc, #520]	; (8015504 <tcp_receive+0x888>)
 80152fa:	681a      	ldr	r2, [r3, #0]
 80152fc:	687b      	ldr	r3, [r7, #4]
 80152fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015300:	6879      	ldr	r1, [r7, #4]
 8015302:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8015304:	440b      	add	r3, r1
 8015306:	1ad3      	subs	r3, r2, r3
 8015308:	3301      	adds	r3, #1
 801530a:	2b00      	cmp	r3, #0
 801530c:	f300 841e 	bgt.w	8015b4c <tcp_receive+0xed0>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 8015310:	687b      	ldr	r3, [r7, #4]
 8015312:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8015314:	4b7b      	ldr	r3, [pc, #492]	; (8015504 <tcp_receive+0x888>)
 8015316:	681b      	ldr	r3, [r3, #0]
 8015318:	429a      	cmp	r2, r3
 801531a:	f040 829a 	bne.w	8015852 <tcp_receive+0xbd6>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 801531e:	4b7a      	ldr	r3, [pc, #488]	; (8015508 <tcp_receive+0x88c>)
 8015320:	891c      	ldrh	r4, [r3, #8]
 8015322:	4b79      	ldr	r3, [pc, #484]	; (8015508 <tcp_receive+0x88c>)
 8015324:	68db      	ldr	r3, [r3, #12]
 8015326:	899b      	ldrh	r3, [r3, #12]
 8015328:	b29b      	uxth	r3, r3
 801532a:	4618      	mov	r0, r3
 801532c:	f7fa fd1e 	bl	800fd6c <lwip_htons>
 8015330:	4603      	mov	r3, r0
 8015332:	b2db      	uxtb	r3, r3
 8015334:	f003 0303 	and.w	r3, r3, #3
 8015338:	2b00      	cmp	r3, #0
 801533a:	d001      	beq.n	8015340 <tcp_receive+0x6c4>
 801533c:	2301      	movs	r3, #1
 801533e:	e000      	b.n	8015342 <tcp_receive+0x6c6>
 8015340:	2300      	movs	r3, #0
 8015342:	4423      	add	r3, r4
 8015344:	b29a      	uxth	r2, r3
 8015346:	4b71      	ldr	r3, [pc, #452]	; (801550c <tcp_receive+0x890>)
 8015348:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 801534a:	687b      	ldr	r3, [r7, #4]
 801534c:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 801534e:	4b6f      	ldr	r3, [pc, #444]	; (801550c <tcp_receive+0x890>)
 8015350:	881b      	ldrh	r3, [r3, #0]
 8015352:	429a      	cmp	r2, r3
 8015354:	d275      	bcs.n	8015442 <tcp_receive+0x7c6>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8015356:	4b6c      	ldr	r3, [pc, #432]	; (8015508 <tcp_receive+0x88c>)
 8015358:	68db      	ldr	r3, [r3, #12]
 801535a:	899b      	ldrh	r3, [r3, #12]
 801535c:	b29b      	uxth	r3, r3
 801535e:	4618      	mov	r0, r3
 8015360:	f7fa fd04 	bl	800fd6c <lwip_htons>
 8015364:	4603      	mov	r3, r0
 8015366:	b2db      	uxtb	r3, r3
 8015368:	f003 0301 	and.w	r3, r3, #1
 801536c:	2b00      	cmp	r3, #0
 801536e:	d01f      	beq.n	80153b0 <tcp_receive+0x734>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 8015370:	4b65      	ldr	r3, [pc, #404]	; (8015508 <tcp_receive+0x88c>)
 8015372:	68db      	ldr	r3, [r3, #12]
 8015374:	899b      	ldrh	r3, [r3, #12]
 8015376:	b29b      	uxth	r3, r3
 8015378:	b21b      	sxth	r3, r3
 801537a:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 801537e:	b21c      	sxth	r4, r3
 8015380:	4b61      	ldr	r3, [pc, #388]	; (8015508 <tcp_receive+0x88c>)
 8015382:	68db      	ldr	r3, [r3, #12]
 8015384:	899b      	ldrh	r3, [r3, #12]
 8015386:	b29b      	uxth	r3, r3
 8015388:	4618      	mov	r0, r3
 801538a:	f7fa fcef 	bl	800fd6c <lwip_htons>
 801538e:	4603      	mov	r3, r0
 8015390:	b2db      	uxtb	r3, r3
 8015392:	b29b      	uxth	r3, r3
 8015394:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8015398:	b29b      	uxth	r3, r3
 801539a:	4618      	mov	r0, r3
 801539c:	f7fa fce6 	bl	800fd6c <lwip_htons>
 80153a0:	4603      	mov	r3, r0
 80153a2:	b21b      	sxth	r3, r3
 80153a4:	4323      	orrs	r3, r4
 80153a6:	b21a      	sxth	r2, r3
 80153a8:	4b57      	ldr	r3, [pc, #348]	; (8015508 <tcp_receive+0x88c>)
 80153aa:	68db      	ldr	r3, [r3, #12]
 80153ac:	b292      	uxth	r2, r2
 80153ae:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 80153b0:	687b      	ldr	r3, [r7, #4]
 80153b2:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 80153b4:	4b54      	ldr	r3, [pc, #336]	; (8015508 <tcp_receive+0x88c>)
 80153b6:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 80153b8:	4b53      	ldr	r3, [pc, #332]	; (8015508 <tcp_receive+0x88c>)
 80153ba:	68db      	ldr	r3, [r3, #12]
 80153bc:	899b      	ldrh	r3, [r3, #12]
 80153be:	b29b      	uxth	r3, r3
 80153c0:	4618      	mov	r0, r3
 80153c2:	f7fa fcd3 	bl	800fd6c <lwip_htons>
 80153c6:	4603      	mov	r3, r0
 80153c8:	b2db      	uxtb	r3, r3
 80153ca:	f003 0302 	and.w	r3, r3, #2
 80153ce:	2b00      	cmp	r3, #0
 80153d0:	d005      	beq.n	80153de <tcp_receive+0x762>
            inseg.len -= 1;
 80153d2:	4b4d      	ldr	r3, [pc, #308]	; (8015508 <tcp_receive+0x88c>)
 80153d4:	891b      	ldrh	r3, [r3, #8]
 80153d6:	3b01      	subs	r3, #1
 80153d8:	b29a      	uxth	r2, r3
 80153da:	4b4b      	ldr	r3, [pc, #300]	; (8015508 <tcp_receive+0x88c>)
 80153dc:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 80153de:	4b4a      	ldr	r3, [pc, #296]	; (8015508 <tcp_receive+0x88c>)
 80153e0:	685b      	ldr	r3, [r3, #4]
 80153e2:	4a49      	ldr	r2, [pc, #292]	; (8015508 <tcp_receive+0x88c>)
 80153e4:	8912      	ldrh	r2, [r2, #8]
 80153e6:	4611      	mov	r1, r2
 80153e8:	4618      	mov	r0, r3
 80153ea:	f7fb ff3f 	bl	801126c <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 80153ee:	4b46      	ldr	r3, [pc, #280]	; (8015508 <tcp_receive+0x88c>)
 80153f0:	891c      	ldrh	r4, [r3, #8]
 80153f2:	4b45      	ldr	r3, [pc, #276]	; (8015508 <tcp_receive+0x88c>)
 80153f4:	68db      	ldr	r3, [r3, #12]
 80153f6:	899b      	ldrh	r3, [r3, #12]
 80153f8:	b29b      	uxth	r3, r3
 80153fa:	4618      	mov	r0, r3
 80153fc:	f7fa fcb6 	bl	800fd6c <lwip_htons>
 8015400:	4603      	mov	r3, r0
 8015402:	b2db      	uxtb	r3, r3
 8015404:	f003 0303 	and.w	r3, r3, #3
 8015408:	2b00      	cmp	r3, #0
 801540a:	d001      	beq.n	8015410 <tcp_receive+0x794>
 801540c:	2301      	movs	r3, #1
 801540e:	e000      	b.n	8015412 <tcp_receive+0x796>
 8015410:	2300      	movs	r3, #0
 8015412:	4423      	add	r3, r4
 8015414:	b29a      	uxth	r2, r3
 8015416:	4b3d      	ldr	r3, [pc, #244]	; (801550c <tcp_receive+0x890>)
 8015418:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 801541a:	4b3c      	ldr	r3, [pc, #240]	; (801550c <tcp_receive+0x890>)
 801541c:	881b      	ldrh	r3, [r3, #0]
 801541e:	461a      	mov	r2, r3
 8015420:	4b38      	ldr	r3, [pc, #224]	; (8015504 <tcp_receive+0x888>)
 8015422:	681b      	ldr	r3, [r3, #0]
 8015424:	441a      	add	r2, r3
 8015426:	687b      	ldr	r3, [r7, #4]
 8015428:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801542a:	6879      	ldr	r1, [r7, #4]
 801542c:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 801542e:	440b      	add	r3, r1
 8015430:	429a      	cmp	r2, r3
 8015432:	d006      	beq.n	8015442 <tcp_receive+0x7c6>
 8015434:	4b36      	ldr	r3, [pc, #216]	; (8015510 <tcp_receive+0x894>)
 8015436:	f240 52cb 	movw	r2, #1483	; 0x5cb
 801543a:	4936      	ldr	r1, [pc, #216]	; (8015514 <tcp_receive+0x898>)
 801543c:	4836      	ldr	r0, [pc, #216]	; (8015518 <tcp_receive+0x89c>)
 801543e:	f005 ff3b 	bl	801b2b8 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 8015442:	687b      	ldr	r3, [r7, #4]
 8015444:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8015446:	2b00      	cmp	r3, #0
 8015448:	f000 80e7 	beq.w	801561a <tcp_receive+0x99e>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 801544c:	4b2e      	ldr	r3, [pc, #184]	; (8015508 <tcp_receive+0x88c>)
 801544e:	68db      	ldr	r3, [r3, #12]
 8015450:	899b      	ldrh	r3, [r3, #12]
 8015452:	b29b      	uxth	r3, r3
 8015454:	4618      	mov	r0, r3
 8015456:	f7fa fc89 	bl	800fd6c <lwip_htons>
 801545a:	4603      	mov	r3, r0
 801545c:	b2db      	uxtb	r3, r3
 801545e:	f003 0301 	and.w	r3, r3, #1
 8015462:	2b00      	cmp	r3, #0
 8015464:	d010      	beq.n	8015488 <tcp_receive+0x80c>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 8015466:	e00a      	b.n	801547e <tcp_receive+0x802>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 8015468:	687b      	ldr	r3, [r7, #4]
 801546a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801546c:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 801546e:	687b      	ldr	r3, [r7, #4]
 8015470:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8015472:	681a      	ldr	r2, [r3, #0]
 8015474:	687b      	ldr	r3, [r7, #4]
 8015476:	675a      	str	r2, [r3, #116]	; 0x74
              tcp_seg_free(old_ooseq);
 8015478:	68f8      	ldr	r0, [r7, #12]
 801547a:	f7fd fce2 	bl	8012e42 <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 801547e:	687b      	ldr	r3, [r7, #4]
 8015480:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8015482:	2b00      	cmp	r3, #0
 8015484:	d1f0      	bne.n	8015468 <tcp_receive+0x7ec>
 8015486:	e0c8      	b.n	801561a <tcp_receive+0x99e>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 8015488:	687b      	ldr	r3, [r7, #4]
 801548a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801548c:	63fb      	str	r3, [r7, #60]	; 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 801548e:	e052      	b.n	8015536 <tcp_receive+0x8ba>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8015490:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8015492:	68db      	ldr	r3, [r3, #12]
 8015494:	899b      	ldrh	r3, [r3, #12]
 8015496:	b29b      	uxth	r3, r3
 8015498:	4618      	mov	r0, r3
 801549a:	f7fa fc67 	bl	800fd6c <lwip_htons>
 801549e:	4603      	mov	r3, r0
 80154a0:	b2db      	uxtb	r3, r3
 80154a2:	f003 0301 	and.w	r3, r3, #1
 80154a6:	2b00      	cmp	r3, #0
 80154a8:	d03d      	beq.n	8015526 <tcp_receive+0x8aa>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 80154aa:	4b17      	ldr	r3, [pc, #92]	; (8015508 <tcp_receive+0x88c>)
 80154ac:	68db      	ldr	r3, [r3, #12]
 80154ae:	899b      	ldrh	r3, [r3, #12]
 80154b0:	b29b      	uxth	r3, r3
 80154b2:	4618      	mov	r0, r3
 80154b4:	f7fa fc5a 	bl	800fd6c <lwip_htons>
 80154b8:	4603      	mov	r3, r0
 80154ba:	b2db      	uxtb	r3, r3
 80154bc:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 80154c0:	2b00      	cmp	r3, #0
 80154c2:	d130      	bne.n	8015526 <tcp_receive+0x8aa>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 80154c4:	4b10      	ldr	r3, [pc, #64]	; (8015508 <tcp_receive+0x88c>)
 80154c6:	68db      	ldr	r3, [r3, #12]
 80154c8:	899b      	ldrh	r3, [r3, #12]
 80154ca:	b29c      	uxth	r4, r3
 80154cc:	2001      	movs	r0, #1
 80154ce:	f7fa fc4d 	bl	800fd6c <lwip_htons>
 80154d2:	4603      	mov	r3, r0
 80154d4:	461a      	mov	r2, r3
 80154d6:	4b0c      	ldr	r3, [pc, #48]	; (8015508 <tcp_receive+0x88c>)
 80154d8:	68db      	ldr	r3, [r3, #12]
 80154da:	4322      	orrs	r2, r4
 80154dc:	b292      	uxth	r2, r2
 80154de:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 80154e0:	4b09      	ldr	r3, [pc, #36]	; (8015508 <tcp_receive+0x88c>)
 80154e2:	891c      	ldrh	r4, [r3, #8]
 80154e4:	4b08      	ldr	r3, [pc, #32]	; (8015508 <tcp_receive+0x88c>)
 80154e6:	68db      	ldr	r3, [r3, #12]
 80154e8:	899b      	ldrh	r3, [r3, #12]
 80154ea:	b29b      	uxth	r3, r3
 80154ec:	4618      	mov	r0, r3
 80154ee:	f7fa fc3d 	bl	800fd6c <lwip_htons>
 80154f2:	4603      	mov	r3, r0
 80154f4:	b2db      	uxtb	r3, r3
 80154f6:	f003 0303 	and.w	r3, r3, #3
 80154fa:	2b00      	cmp	r3, #0
 80154fc:	d00e      	beq.n	801551c <tcp_receive+0x8a0>
 80154fe:	2301      	movs	r3, #1
 8015500:	e00d      	b.n	801551e <tcp_receive+0x8a2>
 8015502:	bf00      	nop
 8015504:	200071e4 	.word	0x200071e4
 8015508:	200071c4 	.word	0x200071c4
 801550c:	200071ee 	.word	0x200071ee
 8015510:	0801f538 	.word	0x0801f538
 8015514:	0801f8e0 	.word	0x0801f8e0
 8015518:	0801f584 	.word	0x0801f584
 801551c:	2300      	movs	r3, #0
 801551e:	4423      	add	r3, r4
 8015520:	b29a      	uxth	r2, r3
 8015522:	4b98      	ldr	r3, [pc, #608]	; (8015784 <tcp_receive+0xb08>)
 8015524:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 8015526:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8015528:	613b      	str	r3, [r7, #16]
              next = next->next;
 801552a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801552c:	681b      	ldr	r3, [r3, #0]
 801552e:	63fb      	str	r3, [r7, #60]	; 0x3c
              tcp_seg_free(tmp);
 8015530:	6938      	ldr	r0, [r7, #16]
 8015532:	f7fd fc86 	bl	8012e42 <tcp_seg_free>
            while (next &&
 8015536:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8015538:	2b00      	cmp	r3, #0
 801553a:	d00e      	beq.n	801555a <tcp_receive+0x8de>
                   TCP_SEQ_GEQ(seqno + tcplen,
 801553c:	4b91      	ldr	r3, [pc, #580]	; (8015784 <tcp_receive+0xb08>)
 801553e:	881b      	ldrh	r3, [r3, #0]
 8015540:	461a      	mov	r2, r3
 8015542:	4b91      	ldr	r3, [pc, #580]	; (8015788 <tcp_receive+0xb0c>)
 8015544:	681b      	ldr	r3, [r3, #0]
 8015546:	441a      	add	r2, r3
 8015548:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801554a:	68db      	ldr	r3, [r3, #12]
 801554c:	685b      	ldr	r3, [r3, #4]
 801554e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8015550:	8909      	ldrh	r1, [r1, #8]
 8015552:	440b      	add	r3, r1
 8015554:	1ad3      	subs	r3, r2, r3
            while (next &&
 8015556:	2b00      	cmp	r3, #0
 8015558:	da9a      	bge.n	8015490 <tcp_receive+0x814>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 801555a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801555c:	2b00      	cmp	r3, #0
 801555e:	d059      	beq.n	8015614 <tcp_receive+0x998>
                TCP_SEQ_GT(seqno + tcplen,
 8015560:	4b88      	ldr	r3, [pc, #544]	; (8015784 <tcp_receive+0xb08>)
 8015562:	881b      	ldrh	r3, [r3, #0]
 8015564:	461a      	mov	r2, r3
 8015566:	4b88      	ldr	r3, [pc, #544]	; (8015788 <tcp_receive+0xb0c>)
 8015568:	681b      	ldr	r3, [r3, #0]
 801556a:	441a      	add	r2, r3
 801556c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801556e:	68db      	ldr	r3, [r3, #12]
 8015570:	685b      	ldr	r3, [r3, #4]
 8015572:	1ad3      	subs	r3, r2, r3
            if (next &&
 8015574:	2b00      	cmp	r3, #0
 8015576:	dd4d      	ble.n	8015614 <tcp_receive+0x998>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 8015578:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801557a:	68db      	ldr	r3, [r3, #12]
 801557c:	685b      	ldr	r3, [r3, #4]
 801557e:	b29a      	uxth	r2, r3
 8015580:	4b81      	ldr	r3, [pc, #516]	; (8015788 <tcp_receive+0xb0c>)
 8015582:	681b      	ldr	r3, [r3, #0]
 8015584:	b29b      	uxth	r3, r3
 8015586:	1ad3      	subs	r3, r2, r3
 8015588:	b29a      	uxth	r2, r3
 801558a:	4b80      	ldr	r3, [pc, #512]	; (801578c <tcp_receive+0xb10>)
 801558c:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 801558e:	4b7f      	ldr	r3, [pc, #508]	; (801578c <tcp_receive+0xb10>)
 8015590:	68db      	ldr	r3, [r3, #12]
 8015592:	899b      	ldrh	r3, [r3, #12]
 8015594:	b29b      	uxth	r3, r3
 8015596:	4618      	mov	r0, r3
 8015598:	f7fa fbe8 	bl	800fd6c <lwip_htons>
 801559c:	4603      	mov	r3, r0
 801559e:	b2db      	uxtb	r3, r3
 80155a0:	f003 0302 	and.w	r3, r3, #2
 80155a4:	2b00      	cmp	r3, #0
 80155a6:	d005      	beq.n	80155b4 <tcp_receive+0x938>
                inseg.len -= 1;
 80155a8:	4b78      	ldr	r3, [pc, #480]	; (801578c <tcp_receive+0xb10>)
 80155aa:	891b      	ldrh	r3, [r3, #8]
 80155ac:	3b01      	subs	r3, #1
 80155ae:	b29a      	uxth	r2, r3
 80155b0:	4b76      	ldr	r3, [pc, #472]	; (801578c <tcp_receive+0xb10>)
 80155b2:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 80155b4:	4b75      	ldr	r3, [pc, #468]	; (801578c <tcp_receive+0xb10>)
 80155b6:	685b      	ldr	r3, [r3, #4]
 80155b8:	4a74      	ldr	r2, [pc, #464]	; (801578c <tcp_receive+0xb10>)
 80155ba:	8912      	ldrh	r2, [r2, #8]
 80155bc:	4611      	mov	r1, r2
 80155be:	4618      	mov	r0, r3
 80155c0:	f7fb fe54 	bl	801126c <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 80155c4:	4b71      	ldr	r3, [pc, #452]	; (801578c <tcp_receive+0xb10>)
 80155c6:	891c      	ldrh	r4, [r3, #8]
 80155c8:	4b70      	ldr	r3, [pc, #448]	; (801578c <tcp_receive+0xb10>)
 80155ca:	68db      	ldr	r3, [r3, #12]
 80155cc:	899b      	ldrh	r3, [r3, #12]
 80155ce:	b29b      	uxth	r3, r3
 80155d0:	4618      	mov	r0, r3
 80155d2:	f7fa fbcb 	bl	800fd6c <lwip_htons>
 80155d6:	4603      	mov	r3, r0
 80155d8:	b2db      	uxtb	r3, r3
 80155da:	f003 0303 	and.w	r3, r3, #3
 80155de:	2b00      	cmp	r3, #0
 80155e0:	d001      	beq.n	80155e6 <tcp_receive+0x96a>
 80155e2:	2301      	movs	r3, #1
 80155e4:	e000      	b.n	80155e8 <tcp_receive+0x96c>
 80155e6:	2300      	movs	r3, #0
 80155e8:	4423      	add	r3, r4
 80155ea:	b29a      	uxth	r2, r3
 80155ec:	4b65      	ldr	r3, [pc, #404]	; (8015784 <tcp_receive+0xb08>)
 80155ee:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 80155f0:	4b64      	ldr	r3, [pc, #400]	; (8015784 <tcp_receive+0xb08>)
 80155f2:	881b      	ldrh	r3, [r3, #0]
 80155f4:	461a      	mov	r2, r3
 80155f6:	4b64      	ldr	r3, [pc, #400]	; (8015788 <tcp_receive+0xb0c>)
 80155f8:	681b      	ldr	r3, [r3, #0]
 80155fa:	441a      	add	r2, r3
 80155fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80155fe:	68db      	ldr	r3, [r3, #12]
 8015600:	685b      	ldr	r3, [r3, #4]
 8015602:	429a      	cmp	r2, r3
 8015604:	d006      	beq.n	8015614 <tcp_receive+0x998>
 8015606:	4b62      	ldr	r3, [pc, #392]	; (8015790 <tcp_receive+0xb14>)
 8015608:	f240 52fc 	movw	r2, #1532	; 0x5fc
 801560c:	4961      	ldr	r1, [pc, #388]	; (8015794 <tcp_receive+0xb18>)
 801560e:	4862      	ldr	r0, [pc, #392]	; (8015798 <tcp_receive+0xb1c>)
 8015610:	f005 fe52 	bl	801b2b8 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 8015614:	687b      	ldr	r3, [r7, #4]
 8015616:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8015618:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 801561a:	4b5a      	ldr	r3, [pc, #360]	; (8015784 <tcp_receive+0xb08>)
 801561c:	881b      	ldrh	r3, [r3, #0]
 801561e:	461a      	mov	r2, r3
 8015620:	4b59      	ldr	r3, [pc, #356]	; (8015788 <tcp_receive+0xb0c>)
 8015622:	681b      	ldr	r3, [r3, #0]
 8015624:	441a      	add	r2, r3
 8015626:	687b      	ldr	r3, [r7, #4]
 8015628:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 801562a:	687b      	ldr	r3, [r7, #4]
 801562c:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 801562e:	4b55      	ldr	r3, [pc, #340]	; (8015784 <tcp_receive+0xb08>)
 8015630:	881b      	ldrh	r3, [r3, #0]
 8015632:	429a      	cmp	r2, r3
 8015634:	d206      	bcs.n	8015644 <tcp_receive+0x9c8>
 8015636:	4b56      	ldr	r3, [pc, #344]	; (8015790 <tcp_receive+0xb14>)
 8015638:	f240 6207 	movw	r2, #1543	; 0x607
 801563c:	4957      	ldr	r1, [pc, #348]	; (801579c <tcp_receive+0xb20>)
 801563e:	4856      	ldr	r0, [pc, #344]	; (8015798 <tcp_receive+0xb1c>)
 8015640:	f005 fe3a 	bl	801b2b8 <iprintf>
        pcb->rcv_wnd -= tcplen;
 8015644:	687b      	ldr	r3, [r7, #4]
 8015646:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8015648:	4b4e      	ldr	r3, [pc, #312]	; (8015784 <tcp_receive+0xb08>)
 801564a:	881b      	ldrh	r3, [r3, #0]
 801564c:	1ad3      	subs	r3, r2, r3
 801564e:	b29a      	uxth	r2, r3
 8015650:	687b      	ldr	r3, [r7, #4]
 8015652:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 8015654:	6878      	ldr	r0, [r7, #4]
 8015656:	f7fc fdb3 	bl	80121c0 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 801565a:	4b4c      	ldr	r3, [pc, #304]	; (801578c <tcp_receive+0xb10>)
 801565c:	685b      	ldr	r3, [r3, #4]
 801565e:	891b      	ldrh	r3, [r3, #8]
 8015660:	2b00      	cmp	r3, #0
 8015662:	d006      	beq.n	8015672 <tcp_receive+0x9f6>
          recv_data = inseg.p;
 8015664:	4b49      	ldr	r3, [pc, #292]	; (801578c <tcp_receive+0xb10>)
 8015666:	685b      	ldr	r3, [r3, #4]
 8015668:	4a4d      	ldr	r2, [pc, #308]	; (80157a0 <tcp_receive+0xb24>)
 801566a:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 801566c:	4b47      	ldr	r3, [pc, #284]	; (801578c <tcp_receive+0xb10>)
 801566e:	2200      	movs	r2, #0
 8015670:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8015672:	4b46      	ldr	r3, [pc, #280]	; (801578c <tcp_receive+0xb10>)
 8015674:	68db      	ldr	r3, [r3, #12]
 8015676:	899b      	ldrh	r3, [r3, #12]
 8015678:	b29b      	uxth	r3, r3
 801567a:	4618      	mov	r0, r3
 801567c:	f7fa fb76 	bl	800fd6c <lwip_htons>
 8015680:	4603      	mov	r3, r0
 8015682:	b2db      	uxtb	r3, r3
 8015684:	f003 0301 	and.w	r3, r3, #1
 8015688:	2b00      	cmp	r3, #0
 801568a:	f000 80b8 	beq.w	80157fe <tcp_receive+0xb82>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 801568e:	4b45      	ldr	r3, [pc, #276]	; (80157a4 <tcp_receive+0xb28>)
 8015690:	781b      	ldrb	r3, [r3, #0]
 8015692:	f043 0320 	orr.w	r3, r3, #32
 8015696:	b2da      	uxtb	r2, r3
 8015698:	4b42      	ldr	r3, [pc, #264]	; (80157a4 <tcp_receive+0xb28>)
 801569a:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 801569c:	e0af      	b.n	80157fe <tcp_receive+0xb82>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 801569e:	687b      	ldr	r3, [r7, #4]
 80156a0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80156a2:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 80156a4:	687b      	ldr	r3, [r7, #4]
 80156a6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80156a8:	68db      	ldr	r3, [r3, #12]
 80156aa:	685b      	ldr	r3, [r3, #4]
 80156ac:	4a36      	ldr	r2, [pc, #216]	; (8015788 <tcp_receive+0xb0c>)
 80156ae:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 80156b0:	68bb      	ldr	r3, [r7, #8]
 80156b2:	891b      	ldrh	r3, [r3, #8]
 80156b4:	461c      	mov	r4, r3
 80156b6:	68bb      	ldr	r3, [r7, #8]
 80156b8:	68db      	ldr	r3, [r3, #12]
 80156ba:	899b      	ldrh	r3, [r3, #12]
 80156bc:	b29b      	uxth	r3, r3
 80156be:	4618      	mov	r0, r3
 80156c0:	f7fa fb54 	bl	800fd6c <lwip_htons>
 80156c4:	4603      	mov	r3, r0
 80156c6:	b2db      	uxtb	r3, r3
 80156c8:	f003 0303 	and.w	r3, r3, #3
 80156cc:	2b00      	cmp	r3, #0
 80156ce:	d001      	beq.n	80156d4 <tcp_receive+0xa58>
 80156d0:	2301      	movs	r3, #1
 80156d2:	e000      	b.n	80156d6 <tcp_receive+0xa5a>
 80156d4:	2300      	movs	r3, #0
 80156d6:	191a      	adds	r2, r3, r4
 80156d8:	687b      	ldr	r3, [r7, #4]
 80156da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80156dc:	441a      	add	r2, r3
 80156de:	687b      	ldr	r3, [r7, #4]
 80156e0:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 80156e2:	687b      	ldr	r3, [r7, #4]
 80156e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80156e6:	461c      	mov	r4, r3
 80156e8:	68bb      	ldr	r3, [r7, #8]
 80156ea:	891b      	ldrh	r3, [r3, #8]
 80156ec:	461d      	mov	r5, r3
 80156ee:	68bb      	ldr	r3, [r7, #8]
 80156f0:	68db      	ldr	r3, [r3, #12]
 80156f2:	899b      	ldrh	r3, [r3, #12]
 80156f4:	b29b      	uxth	r3, r3
 80156f6:	4618      	mov	r0, r3
 80156f8:	f7fa fb38 	bl	800fd6c <lwip_htons>
 80156fc:	4603      	mov	r3, r0
 80156fe:	b2db      	uxtb	r3, r3
 8015700:	f003 0303 	and.w	r3, r3, #3
 8015704:	2b00      	cmp	r3, #0
 8015706:	d001      	beq.n	801570c <tcp_receive+0xa90>
 8015708:	2301      	movs	r3, #1
 801570a:	e000      	b.n	801570e <tcp_receive+0xa92>
 801570c:	2300      	movs	r3, #0
 801570e:	442b      	add	r3, r5
 8015710:	429c      	cmp	r4, r3
 8015712:	d206      	bcs.n	8015722 <tcp_receive+0xaa6>
 8015714:	4b1e      	ldr	r3, [pc, #120]	; (8015790 <tcp_receive+0xb14>)
 8015716:	f240 622b 	movw	r2, #1579	; 0x62b
 801571a:	4923      	ldr	r1, [pc, #140]	; (80157a8 <tcp_receive+0xb2c>)
 801571c:	481e      	ldr	r0, [pc, #120]	; (8015798 <tcp_receive+0xb1c>)
 801571e:	f005 fdcb 	bl	801b2b8 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 8015722:	68bb      	ldr	r3, [r7, #8]
 8015724:	891b      	ldrh	r3, [r3, #8]
 8015726:	461c      	mov	r4, r3
 8015728:	68bb      	ldr	r3, [r7, #8]
 801572a:	68db      	ldr	r3, [r3, #12]
 801572c:	899b      	ldrh	r3, [r3, #12]
 801572e:	b29b      	uxth	r3, r3
 8015730:	4618      	mov	r0, r3
 8015732:	f7fa fb1b 	bl	800fd6c <lwip_htons>
 8015736:	4603      	mov	r3, r0
 8015738:	b2db      	uxtb	r3, r3
 801573a:	f003 0303 	and.w	r3, r3, #3
 801573e:	2b00      	cmp	r3, #0
 8015740:	d001      	beq.n	8015746 <tcp_receive+0xaca>
 8015742:	2301      	movs	r3, #1
 8015744:	e000      	b.n	8015748 <tcp_receive+0xacc>
 8015746:	2300      	movs	r3, #0
 8015748:	1919      	adds	r1, r3, r4
 801574a:	687b      	ldr	r3, [r7, #4]
 801574c:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 801574e:	b28b      	uxth	r3, r1
 8015750:	1ad3      	subs	r3, r2, r3
 8015752:	b29a      	uxth	r2, r3
 8015754:	687b      	ldr	r3, [r7, #4]
 8015756:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 8015758:	6878      	ldr	r0, [r7, #4]
 801575a:	f7fc fd31 	bl	80121c0 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 801575e:	68bb      	ldr	r3, [r7, #8]
 8015760:	685b      	ldr	r3, [r3, #4]
 8015762:	891b      	ldrh	r3, [r3, #8]
 8015764:	2b00      	cmp	r3, #0
 8015766:	d028      	beq.n	80157ba <tcp_receive+0xb3e>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 8015768:	4b0d      	ldr	r3, [pc, #52]	; (80157a0 <tcp_receive+0xb24>)
 801576a:	681b      	ldr	r3, [r3, #0]
 801576c:	2b00      	cmp	r3, #0
 801576e:	d01d      	beq.n	80157ac <tcp_receive+0xb30>
              pbuf_cat(recv_data, cseg->p);
 8015770:	4b0b      	ldr	r3, [pc, #44]	; (80157a0 <tcp_receive+0xb24>)
 8015772:	681a      	ldr	r2, [r3, #0]
 8015774:	68bb      	ldr	r3, [r7, #8]
 8015776:	685b      	ldr	r3, [r3, #4]
 8015778:	4619      	mov	r1, r3
 801577a:	4610      	mov	r0, r2
 801577c:	f7fb ffbc 	bl	80116f8 <pbuf_cat>
 8015780:	e018      	b.n	80157b4 <tcp_receive+0xb38>
 8015782:	bf00      	nop
 8015784:	200071ee 	.word	0x200071ee
 8015788:	200071e4 	.word	0x200071e4
 801578c:	200071c4 	.word	0x200071c4
 8015790:	0801f538 	.word	0x0801f538
 8015794:	0801f918 	.word	0x0801f918
 8015798:	0801f584 	.word	0x0801f584
 801579c:	0801f954 	.word	0x0801f954
 80157a0:	200071f4 	.word	0x200071f4
 80157a4:	200071f1 	.word	0x200071f1
 80157a8:	0801f974 	.word	0x0801f974
            } else {
              recv_data = cseg->p;
 80157ac:	68bb      	ldr	r3, [r7, #8]
 80157ae:	685b      	ldr	r3, [r3, #4]
 80157b0:	4a70      	ldr	r2, [pc, #448]	; (8015974 <tcp_receive+0xcf8>)
 80157b2:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 80157b4:	68bb      	ldr	r3, [r7, #8]
 80157b6:	2200      	movs	r2, #0
 80157b8:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 80157ba:	68bb      	ldr	r3, [r7, #8]
 80157bc:	68db      	ldr	r3, [r3, #12]
 80157be:	899b      	ldrh	r3, [r3, #12]
 80157c0:	b29b      	uxth	r3, r3
 80157c2:	4618      	mov	r0, r3
 80157c4:	f7fa fad2 	bl	800fd6c <lwip_htons>
 80157c8:	4603      	mov	r3, r0
 80157ca:	b2db      	uxtb	r3, r3
 80157cc:	f003 0301 	and.w	r3, r3, #1
 80157d0:	2b00      	cmp	r3, #0
 80157d2:	d00d      	beq.n	80157f0 <tcp_receive+0xb74>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 80157d4:	4b68      	ldr	r3, [pc, #416]	; (8015978 <tcp_receive+0xcfc>)
 80157d6:	781b      	ldrb	r3, [r3, #0]
 80157d8:	f043 0320 	orr.w	r3, r3, #32
 80157dc:	b2da      	uxtb	r2, r3
 80157de:	4b66      	ldr	r3, [pc, #408]	; (8015978 <tcp_receive+0xcfc>)
 80157e0:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 80157e2:	687b      	ldr	r3, [r7, #4]
 80157e4:	7d1b      	ldrb	r3, [r3, #20]
 80157e6:	2b04      	cmp	r3, #4
 80157e8:	d102      	bne.n	80157f0 <tcp_receive+0xb74>
              pcb->state = CLOSE_WAIT;
 80157ea:	687b      	ldr	r3, [r7, #4]
 80157ec:	2207      	movs	r2, #7
 80157ee:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 80157f0:	68bb      	ldr	r3, [r7, #8]
 80157f2:	681a      	ldr	r2, [r3, #0]
 80157f4:	687b      	ldr	r3, [r7, #4]
 80157f6:	675a      	str	r2, [r3, #116]	; 0x74
          tcp_seg_free(cseg);
 80157f8:	68b8      	ldr	r0, [r7, #8]
 80157fa:	f7fd fb22 	bl	8012e42 <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 80157fe:	687b      	ldr	r3, [r7, #4]
 8015800:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8015802:	2b00      	cmp	r3, #0
 8015804:	d008      	beq.n	8015818 <tcp_receive+0xb9c>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 8015806:	687b      	ldr	r3, [r7, #4]
 8015808:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801580a:	68db      	ldr	r3, [r3, #12]
 801580c:	685a      	ldr	r2, [r3, #4]
 801580e:	687b      	ldr	r3, [r7, #4]
 8015810:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 8015812:	429a      	cmp	r2, r3
 8015814:	f43f af43 	beq.w	801569e <tcp_receive+0xa22>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 8015818:	687b      	ldr	r3, [r7, #4]
 801581a:	8b5b      	ldrh	r3, [r3, #26]
 801581c:	f003 0301 	and.w	r3, r3, #1
 8015820:	2b00      	cmp	r3, #0
 8015822:	d00e      	beq.n	8015842 <tcp_receive+0xbc6>
 8015824:	687b      	ldr	r3, [r7, #4]
 8015826:	8b5b      	ldrh	r3, [r3, #26]
 8015828:	f023 0301 	bic.w	r3, r3, #1
 801582c:	b29a      	uxth	r2, r3
 801582e:	687b      	ldr	r3, [r7, #4]
 8015830:	835a      	strh	r2, [r3, #26]
 8015832:	687b      	ldr	r3, [r7, #4]
 8015834:	8b5b      	ldrh	r3, [r3, #26]
 8015836:	f043 0302 	orr.w	r3, r3, #2
 801583a:	b29a      	uxth	r2, r3
 801583c:	687b      	ldr	r3, [r7, #4]
 801583e:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8015840:	e188      	b.n	8015b54 <tcp_receive+0xed8>
        tcp_ack(pcb);
 8015842:	687b      	ldr	r3, [r7, #4]
 8015844:	8b5b      	ldrh	r3, [r3, #26]
 8015846:	f043 0301 	orr.w	r3, r3, #1
 801584a:	b29a      	uxth	r2, r3
 801584c:	687b      	ldr	r3, [r7, #4]
 801584e:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8015850:	e180      	b.n	8015b54 <tcp_receive+0xed8>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 8015852:	687b      	ldr	r3, [r7, #4]
 8015854:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8015856:	2b00      	cmp	r3, #0
 8015858:	d106      	bne.n	8015868 <tcp_receive+0xbec>
          pcb->ooseq = tcp_seg_copy(&inseg);
 801585a:	4848      	ldr	r0, [pc, #288]	; (801597c <tcp_receive+0xd00>)
 801585c:	f7fd fb0a 	bl	8012e74 <tcp_seg_copy>
 8015860:	4602      	mov	r2, r0
 8015862:	687b      	ldr	r3, [r7, #4]
 8015864:	675a      	str	r2, [r3, #116]	; 0x74
 8015866:	e16d      	b.n	8015b44 <tcp_receive+0xec8>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 8015868:	2300      	movs	r3, #0
 801586a:	637b      	str	r3, [r7, #52]	; 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 801586c:	687b      	ldr	r3, [r7, #4]
 801586e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8015870:	63bb      	str	r3, [r7, #56]	; 0x38
 8015872:	e157      	b.n	8015b24 <tcp_receive+0xea8>
            if (seqno == next->tcphdr->seqno) {
 8015874:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015876:	68db      	ldr	r3, [r3, #12]
 8015878:	685a      	ldr	r2, [r3, #4]
 801587a:	4b41      	ldr	r3, [pc, #260]	; (8015980 <tcp_receive+0xd04>)
 801587c:	681b      	ldr	r3, [r3, #0]
 801587e:	429a      	cmp	r2, r3
 8015880:	d11d      	bne.n	80158be <tcp_receive+0xc42>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 8015882:	4b3e      	ldr	r3, [pc, #248]	; (801597c <tcp_receive+0xd00>)
 8015884:	891a      	ldrh	r2, [r3, #8]
 8015886:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015888:	891b      	ldrh	r3, [r3, #8]
 801588a:	429a      	cmp	r2, r3
 801588c:	f240 814f 	bls.w	8015b2e <tcp_receive+0xeb2>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8015890:	483a      	ldr	r0, [pc, #232]	; (801597c <tcp_receive+0xd00>)
 8015892:	f7fd faef 	bl	8012e74 <tcp_seg_copy>
 8015896:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 8015898:	697b      	ldr	r3, [r7, #20]
 801589a:	2b00      	cmp	r3, #0
 801589c:	f000 8149 	beq.w	8015b32 <tcp_receive+0xeb6>
                  if (prev != NULL) {
 80158a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80158a2:	2b00      	cmp	r3, #0
 80158a4:	d003      	beq.n	80158ae <tcp_receive+0xc32>
                    prev->next = cseg;
 80158a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80158a8:	697a      	ldr	r2, [r7, #20]
 80158aa:	601a      	str	r2, [r3, #0]
 80158ac:	e002      	b.n	80158b4 <tcp_receive+0xc38>
                  } else {
                    pcb->ooseq = cseg;
 80158ae:	687b      	ldr	r3, [r7, #4]
 80158b0:	697a      	ldr	r2, [r7, #20]
 80158b2:	675a      	str	r2, [r3, #116]	; 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 80158b4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80158b6:	6978      	ldr	r0, [r7, #20]
 80158b8:	f7ff f8dc 	bl	8014a74 <tcp_oos_insert_segment>
                }
                break;
 80158bc:	e139      	b.n	8015b32 <tcp_receive+0xeb6>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 80158be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80158c0:	2b00      	cmp	r3, #0
 80158c2:	d117      	bne.n	80158f4 <tcp_receive+0xc78>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 80158c4:	4b2e      	ldr	r3, [pc, #184]	; (8015980 <tcp_receive+0xd04>)
 80158c6:	681a      	ldr	r2, [r3, #0]
 80158c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80158ca:	68db      	ldr	r3, [r3, #12]
 80158cc:	685b      	ldr	r3, [r3, #4]
 80158ce:	1ad3      	subs	r3, r2, r3
 80158d0:	2b00      	cmp	r3, #0
 80158d2:	da57      	bge.n	8015984 <tcp_receive+0xd08>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 80158d4:	4829      	ldr	r0, [pc, #164]	; (801597c <tcp_receive+0xd00>)
 80158d6:	f7fd facd 	bl	8012e74 <tcp_seg_copy>
 80158da:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 80158dc:	69bb      	ldr	r3, [r7, #24]
 80158de:	2b00      	cmp	r3, #0
 80158e0:	f000 8129 	beq.w	8015b36 <tcp_receive+0xeba>
                    pcb->ooseq = cseg;
 80158e4:	687b      	ldr	r3, [r7, #4]
 80158e6:	69ba      	ldr	r2, [r7, #24]
 80158e8:	675a      	str	r2, [r3, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
 80158ea:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80158ec:	69b8      	ldr	r0, [r7, #24]
 80158ee:	f7ff f8c1 	bl	8014a74 <tcp_oos_insert_segment>
                  }
                  break;
 80158f2:	e120      	b.n	8015b36 <tcp_receive+0xeba>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 80158f4:	4b22      	ldr	r3, [pc, #136]	; (8015980 <tcp_receive+0xd04>)
 80158f6:	681a      	ldr	r2, [r3, #0]
 80158f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80158fa:	68db      	ldr	r3, [r3, #12]
 80158fc:	685b      	ldr	r3, [r3, #4]
 80158fe:	1ad3      	subs	r3, r2, r3
 8015900:	3b01      	subs	r3, #1
 8015902:	2b00      	cmp	r3, #0
 8015904:	db3e      	blt.n	8015984 <tcp_receive+0xd08>
 8015906:	4b1e      	ldr	r3, [pc, #120]	; (8015980 <tcp_receive+0xd04>)
 8015908:	681a      	ldr	r2, [r3, #0]
 801590a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801590c:	68db      	ldr	r3, [r3, #12]
 801590e:	685b      	ldr	r3, [r3, #4]
 8015910:	1ad3      	subs	r3, r2, r3
 8015912:	3301      	adds	r3, #1
 8015914:	2b00      	cmp	r3, #0
 8015916:	dc35      	bgt.n	8015984 <tcp_receive+0xd08>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8015918:	4818      	ldr	r0, [pc, #96]	; (801597c <tcp_receive+0xd00>)
 801591a:	f7fd faab 	bl	8012e74 <tcp_seg_copy>
 801591e:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 8015920:	69fb      	ldr	r3, [r7, #28]
 8015922:	2b00      	cmp	r3, #0
 8015924:	f000 8109 	beq.w	8015b3a <tcp_receive+0xebe>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 8015928:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801592a:	68db      	ldr	r3, [r3, #12]
 801592c:	685b      	ldr	r3, [r3, #4]
 801592e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8015930:	8912      	ldrh	r2, [r2, #8]
 8015932:	441a      	add	r2, r3
 8015934:	4b12      	ldr	r3, [pc, #72]	; (8015980 <tcp_receive+0xd04>)
 8015936:	681b      	ldr	r3, [r3, #0]
 8015938:	1ad3      	subs	r3, r2, r3
 801593a:	2b00      	cmp	r3, #0
 801593c:	dd12      	ble.n	8015964 <tcp_receive+0xce8>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 801593e:	4b10      	ldr	r3, [pc, #64]	; (8015980 <tcp_receive+0xd04>)
 8015940:	681b      	ldr	r3, [r3, #0]
 8015942:	b29a      	uxth	r2, r3
 8015944:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015946:	68db      	ldr	r3, [r3, #12]
 8015948:	685b      	ldr	r3, [r3, #4]
 801594a:	b29b      	uxth	r3, r3
 801594c:	1ad3      	subs	r3, r2, r3
 801594e:	b29a      	uxth	r2, r3
 8015950:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015952:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 8015954:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015956:	685a      	ldr	r2, [r3, #4]
 8015958:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801595a:	891b      	ldrh	r3, [r3, #8]
 801595c:	4619      	mov	r1, r3
 801595e:	4610      	mov	r0, r2
 8015960:	f7fb fc84 	bl	801126c <pbuf_realloc>
                    }
                    prev->next = cseg;
 8015964:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015966:	69fa      	ldr	r2, [r7, #28]
 8015968:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 801596a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 801596c:	69f8      	ldr	r0, [r7, #28]
 801596e:	f7ff f881 	bl	8014a74 <tcp_oos_insert_segment>
                  }
                  break;
 8015972:	e0e2      	b.n	8015b3a <tcp_receive+0xebe>
 8015974:	200071f4 	.word	0x200071f4
 8015978:	200071f1 	.word	0x200071f1
 801597c:	200071c4 	.word	0x200071c4
 8015980:	200071e4 	.word	0x200071e4
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 8015984:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015986:	637b      	str	r3, [r7, #52]	; 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 8015988:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801598a:	681b      	ldr	r3, [r3, #0]
 801598c:	2b00      	cmp	r3, #0
 801598e:	f040 80c6 	bne.w	8015b1e <tcp_receive+0xea2>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 8015992:	4b80      	ldr	r3, [pc, #512]	; (8015b94 <tcp_receive+0xf18>)
 8015994:	681a      	ldr	r2, [r3, #0]
 8015996:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015998:	68db      	ldr	r3, [r3, #12]
 801599a:	685b      	ldr	r3, [r3, #4]
 801599c:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 801599e:	2b00      	cmp	r3, #0
 80159a0:	f340 80bd 	ble.w	8015b1e <tcp_receive+0xea2>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 80159a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80159a6:	68db      	ldr	r3, [r3, #12]
 80159a8:	899b      	ldrh	r3, [r3, #12]
 80159aa:	b29b      	uxth	r3, r3
 80159ac:	4618      	mov	r0, r3
 80159ae:	f7fa f9dd 	bl	800fd6c <lwip_htons>
 80159b2:	4603      	mov	r3, r0
 80159b4:	b2db      	uxtb	r3, r3
 80159b6:	f003 0301 	and.w	r3, r3, #1
 80159ba:	2b00      	cmp	r3, #0
 80159bc:	f040 80bf 	bne.w	8015b3e <tcp_receive+0xec2>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 80159c0:	4875      	ldr	r0, [pc, #468]	; (8015b98 <tcp_receive+0xf1c>)
 80159c2:	f7fd fa57 	bl	8012e74 <tcp_seg_copy>
 80159c6:	4602      	mov	r2, r0
 80159c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80159ca:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 80159cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80159ce:	681b      	ldr	r3, [r3, #0]
 80159d0:	2b00      	cmp	r3, #0
 80159d2:	f000 80b6 	beq.w	8015b42 <tcp_receive+0xec6>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 80159d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80159d8:	68db      	ldr	r3, [r3, #12]
 80159da:	685b      	ldr	r3, [r3, #4]
 80159dc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80159de:	8912      	ldrh	r2, [r2, #8]
 80159e0:	441a      	add	r2, r3
 80159e2:	4b6c      	ldr	r3, [pc, #432]	; (8015b94 <tcp_receive+0xf18>)
 80159e4:	681b      	ldr	r3, [r3, #0]
 80159e6:	1ad3      	subs	r3, r2, r3
 80159e8:	2b00      	cmp	r3, #0
 80159ea:	dd12      	ble.n	8015a12 <tcp_receive+0xd96>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 80159ec:	4b69      	ldr	r3, [pc, #420]	; (8015b94 <tcp_receive+0xf18>)
 80159ee:	681b      	ldr	r3, [r3, #0]
 80159f0:	b29a      	uxth	r2, r3
 80159f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80159f4:	68db      	ldr	r3, [r3, #12]
 80159f6:	685b      	ldr	r3, [r3, #4]
 80159f8:	b29b      	uxth	r3, r3
 80159fa:	1ad3      	subs	r3, r2, r3
 80159fc:	b29a      	uxth	r2, r3
 80159fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015a00:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 8015a02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015a04:	685a      	ldr	r2, [r3, #4]
 8015a06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015a08:	891b      	ldrh	r3, [r3, #8]
 8015a0a:	4619      	mov	r1, r3
 8015a0c:	4610      	mov	r0, r2
 8015a0e:	f7fb fc2d 	bl	801126c <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 8015a12:	4b62      	ldr	r3, [pc, #392]	; (8015b9c <tcp_receive+0xf20>)
 8015a14:	881b      	ldrh	r3, [r3, #0]
 8015a16:	461a      	mov	r2, r3
 8015a18:	4b5e      	ldr	r3, [pc, #376]	; (8015b94 <tcp_receive+0xf18>)
 8015a1a:	681b      	ldr	r3, [r3, #0]
 8015a1c:	441a      	add	r2, r3
 8015a1e:	687b      	ldr	r3, [r7, #4]
 8015a20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015a22:	6879      	ldr	r1, [r7, #4]
 8015a24:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8015a26:	440b      	add	r3, r1
 8015a28:	1ad3      	subs	r3, r2, r3
 8015a2a:	2b00      	cmp	r3, #0
 8015a2c:	f340 8089 	ble.w	8015b42 <tcp_receive+0xec6>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 8015a30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015a32:	681b      	ldr	r3, [r3, #0]
 8015a34:	68db      	ldr	r3, [r3, #12]
 8015a36:	899b      	ldrh	r3, [r3, #12]
 8015a38:	b29b      	uxth	r3, r3
 8015a3a:	4618      	mov	r0, r3
 8015a3c:	f7fa f996 	bl	800fd6c <lwip_htons>
 8015a40:	4603      	mov	r3, r0
 8015a42:	b2db      	uxtb	r3, r3
 8015a44:	f003 0301 	and.w	r3, r3, #1
 8015a48:	2b00      	cmp	r3, #0
 8015a4a:	d022      	beq.n	8015a92 <tcp_receive+0xe16>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 8015a4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015a4e:	681b      	ldr	r3, [r3, #0]
 8015a50:	68db      	ldr	r3, [r3, #12]
 8015a52:	899b      	ldrh	r3, [r3, #12]
 8015a54:	b29b      	uxth	r3, r3
 8015a56:	b21b      	sxth	r3, r3
 8015a58:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8015a5c:	b21c      	sxth	r4, r3
 8015a5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015a60:	681b      	ldr	r3, [r3, #0]
 8015a62:	68db      	ldr	r3, [r3, #12]
 8015a64:	899b      	ldrh	r3, [r3, #12]
 8015a66:	b29b      	uxth	r3, r3
 8015a68:	4618      	mov	r0, r3
 8015a6a:	f7fa f97f 	bl	800fd6c <lwip_htons>
 8015a6e:	4603      	mov	r3, r0
 8015a70:	b2db      	uxtb	r3, r3
 8015a72:	b29b      	uxth	r3, r3
 8015a74:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8015a78:	b29b      	uxth	r3, r3
 8015a7a:	4618      	mov	r0, r3
 8015a7c:	f7fa f976 	bl	800fd6c <lwip_htons>
 8015a80:	4603      	mov	r3, r0
 8015a82:	b21b      	sxth	r3, r3
 8015a84:	4323      	orrs	r3, r4
 8015a86:	b21a      	sxth	r2, r3
 8015a88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015a8a:	681b      	ldr	r3, [r3, #0]
 8015a8c:	68db      	ldr	r3, [r3, #12]
 8015a8e:	b292      	uxth	r2, r2
 8015a90:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 8015a92:	687b      	ldr	r3, [r7, #4]
 8015a94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015a96:	b29a      	uxth	r2, r3
 8015a98:	687b      	ldr	r3, [r7, #4]
 8015a9a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8015a9c:	4413      	add	r3, r2
 8015a9e:	b299      	uxth	r1, r3
 8015aa0:	4b3c      	ldr	r3, [pc, #240]	; (8015b94 <tcp_receive+0xf18>)
 8015aa2:	681b      	ldr	r3, [r3, #0]
 8015aa4:	b29a      	uxth	r2, r3
 8015aa6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015aa8:	681b      	ldr	r3, [r3, #0]
 8015aaa:	1a8a      	subs	r2, r1, r2
 8015aac:	b292      	uxth	r2, r2
 8015aae:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 8015ab0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015ab2:	681b      	ldr	r3, [r3, #0]
 8015ab4:	685a      	ldr	r2, [r3, #4]
 8015ab6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015ab8:	681b      	ldr	r3, [r3, #0]
 8015aba:	891b      	ldrh	r3, [r3, #8]
 8015abc:	4619      	mov	r1, r3
 8015abe:	4610      	mov	r0, r2
 8015ac0:	f7fb fbd4 	bl	801126c <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 8015ac4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015ac6:	681b      	ldr	r3, [r3, #0]
 8015ac8:	891c      	ldrh	r4, [r3, #8]
 8015aca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015acc:	681b      	ldr	r3, [r3, #0]
 8015ace:	68db      	ldr	r3, [r3, #12]
 8015ad0:	899b      	ldrh	r3, [r3, #12]
 8015ad2:	b29b      	uxth	r3, r3
 8015ad4:	4618      	mov	r0, r3
 8015ad6:	f7fa f949 	bl	800fd6c <lwip_htons>
 8015ada:	4603      	mov	r3, r0
 8015adc:	b2db      	uxtb	r3, r3
 8015ade:	f003 0303 	and.w	r3, r3, #3
 8015ae2:	2b00      	cmp	r3, #0
 8015ae4:	d001      	beq.n	8015aea <tcp_receive+0xe6e>
 8015ae6:	2301      	movs	r3, #1
 8015ae8:	e000      	b.n	8015aec <tcp_receive+0xe70>
 8015aea:	2300      	movs	r3, #0
 8015aec:	4423      	add	r3, r4
 8015aee:	b29a      	uxth	r2, r3
 8015af0:	4b2a      	ldr	r3, [pc, #168]	; (8015b9c <tcp_receive+0xf20>)
 8015af2:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8015af4:	4b29      	ldr	r3, [pc, #164]	; (8015b9c <tcp_receive+0xf20>)
 8015af6:	881b      	ldrh	r3, [r3, #0]
 8015af8:	461a      	mov	r2, r3
 8015afa:	4b26      	ldr	r3, [pc, #152]	; (8015b94 <tcp_receive+0xf18>)
 8015afc:	681b      	ldr	r3, [r3, #0]
 8015afe:	441a      	add	r2, r3
 8015b00:	687b      	ldr	r3, [r7, #4]
 8015b02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015b04:	6879      	ldr	r1, [r7, #4]
 8015b06:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8015b08:	440b      	add	r3, r1
 8015b0a:	429a      	cmp	r2, r3
 8015b0c:	d019      	beq.n	8015b42 <tcp_receive+0xec6>
 8015b0e:	4b24      	ldr	r3, [pc, #144]	; (8015ba0 <tcp_receive+0xf24>)
 8015b10:	f44f 62df 	mov.w	r2, #1784	; 0x6f8
 8015b14:	4923      	ldr	r1, [pc, #140]	; (8015ba4 <tcp_receive+0xf28>)
 8015b16:	4824      	ldr	r0, [pc, #144]	; (8015ba8 <tcp_receive+0xf2c>)
 8015b18:	f005 fbce 	bl	801b2b8 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 8015b1c:	e011      	b.n	8015b42 <tcp_receive+0xec6>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8015b1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015b20:	681b      	ldr	r3, [r3, #0]
 8015b22:	63bb      	str	r3, [r7, #56]	; 0x38
 8015b24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015b26:	2b00      	cmp	r3, #0
 8015b28:	f47f aea4 	bne.w	8015874 <tcp_receive+0xbf8>
 8015b2c:	e00a      	b.n	8015b44 <tcp_receive+0xec8>
                break;
 8015b2e:	bf00      	nop
 8015b30:	e008      	b.n	8015b44 <tcp_receive+0xec8>
                break;
 8015b32:	bf00      	nop
 8015b34:	e006      	b.n	8015b44 <tcp_receive+0xec8>
                  break;
 8015b36:	bf00      	nop
 8015b38:	e004      	b.n	8015b44 <tcp_receive+0xec8>
                  break;
 8015b3a:	bf00      	nop
 8015b3c:	e002      	b.n	8015b44 <tcp_receive+0xec8>
                  break;
 8015b3e:	bf00      	nop
 8015b40:	e000      	b.n	8015b44 <tcp_receive+0xec8>
                break;
 8015b42:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 8015b44:	6878      	ldr	r0, [r7, #4]
 8015b46:	f001 fe8b 	bl	8017860 <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 8015b4a:	e003      	b.n	8015b54 <tcp_receive+0xed8>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 8015b4c:	6878      	ldr	r0, [r7, #4]
 8015b4e:	f001 fe87 	bl	8017860 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8015b52:	e01a      	b.n	8015b8a <tcp_receive+0xf0e>
 8015b54:	e019      	b.n	8015b8a <tcp_receive+0xf0e>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 8015b56:	4b0f      	ldr	r3, [pc, #60]	; (8015b94 <tcp_receive+0xf18>)
 8015b58:	681a      	ldr	r2, [r3, #0]
 8015b5a:	687b      	ldr	r3, [r7, #4]
 8015b5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015b5e:	1ad3      	subs	r3, r2, r3
 8015b60:	2b00      	cmp	r3, #0
 8015b62:	db0a      	blt.n	8015b7a <tcp_receive+0xefe>
 8015b64:	4b0b      	ldr	r3, [pc, #44]	; (8015b94 <tcp_receive+0xf18>)
 8015b66:	681a      	ldr	r2, [r3, #0]
 8015b68:	687b      	ldr	r3, [r7, #4]
 8015b6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015b6c:	6879      	ldr	r1, [r7, #4]
 8015b6e:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8015b70:	440b      	add	r3, r1
 8015b72:	1ad3      	subs	r3, r2, r3
 8015b74:	3301      	adds	r3, #1
 8015b76:	2b00      	cmp	r3, #0
 8015b78:	dd07      	ble.n	8015b8a <tcp_receive+0xf0e>
      tcp_ack_now(pcb);
 8015b7a:	687b      	ldr	r3, [r7, #4]
 8015b7c:	8b5b      	ldrh	r3, [r3, #26]
 8015b7e:	f043 0302 	orr.w	r3, r3, #2
 8015b82:	b29a      	uxth	r2, r3
 8015b84:	687b      	ldr	r3, [r7, #4]
 8015b86:	835a      	strh	r2, [r3, #26]
    }
  }
}
 8015b88:	e7ff      	b.n	8015b8a <tcp_receive+0xf0e>
 8015b8a:	bf00      	nop
 8015b8c:	3750      	adds	r7, #80	; 0x50
 8015b8e:	46bd      	mov	sp, r7
 8015b90:	bdb0      	pop	{r4, r5, r7, pc}
 8015b92:	bf00      	nop
 8015b94:	200071e4 	.word	0x200071e4
 8015b98:	200071c4 	.word	0x200071c4
 8015b9c:	200071ee 	.word	0x200071ee
 8015ba0:	0801f538 	.word	0x0801f538
 8015ba4:	0801f8e0 	.word	0x0801f8e0
 8015ba8:	0801f584 	.word	0x0801f584

08015bac <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 8015bac:	b480      	push	{r7}
 8015bae:	b083      	sub	sp, #12
 8015bb0:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 8015bb2:	4b15      	ldr	r3, [pc, #84]	; (8015c08 <tcp_get_next_optbyte+0x5c>)
 8015bb4:	881b      	ldrh	r3, [r3, #0]
 8015bb6:	1c5a      	adds	r2, r3, #1
 8015bb8:	b291      	uxth	r1, r2
 8015bba:	4a13      	ldr	r2, [pc, #76]	; (8015c08 <tcp_get_next_optbyte+0x5c>)
 8015bbc:	8011      	strh	r1, [r2, #0]
 8015bbe:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 8015bc0:	4b12      	ldr	r3, [pc, #72]	; (8015c0c <tcp_get_next_optbyte+0x60>)
 8015bc2:	681b      	ldr	r3, [r3, #0]
 8015bc4:	2b00      	cmp	r3, #0
 8015bc6:	d004      	beq.n	8015bd2 <tcp_get_next_optbyte+0x26>
 8015bc8:	4b11      	ldr	r3, [pc, #68]	; (8015c10 <tcp_get_next_optbyte+0x64>)
 8015bca:	881b      	ldrh	r3, [r3, #0]
 8015bcc:	88fa      	ldrh	r2, [r7, #6]
 8015bce:	429a      	cmp	r2, r3
 8015bd0:	d208      	bcs.n	8015be4 <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 8015bd2:	4b10      	ldr	r3, [pc, #64]	; (8015c14 <tcp_get_next_optbyte+0x68>)
 8015bd4:	681b      	ldr	r3, [r3, #0]
 8015bd6:	3314      	adds	r3, #20
 8015bd8:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 8015bda:	88fb      	ldrh	r3, [r7, #6]
 8015bdc:	683a      	ldr	r2, [r7, #0]
 8015bde:	4413      	add	r3, r2
 8015be0:	781b      	ldrb	r3, [r3, #0]
 8015be2:	e00b      	b.n	8015bfc <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 8015be4:	88fb      	ldrh	r3, [r7, #6]
 8015be6:	b2da      	uxtb	r2, r3
 8015be8:	4b09      	ldr	r3, [pc, #36]	; (8015c10 <tcp_get_next_optbyte+0x64>)
 8015bea:	881b      	ldrh	r3, [r3, #0]
 8015bec:	b2db      	uxtb	r3, r3
 8015bee:	1ad3      	subs	r3, r2, r3
 8015bf0:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 8015bf2:	4b06      	ldr	r3, [pc, #24]	; (8015c0c <tcp_get_next_optbyte+0x60>)
 8015bf4:	681a      	ldr	r2, [r3, #0]
 8015bf6:	797b      	ldrb	r3, [r7, #5]
 8015bf8:	4413      	add	r3, r2
 8015bfa:	781b      	ldrb	r3, [r3, #0]
  }
}
 8015bfc:	4618      	mov	r0, r3
 8015bfe:	370c      	adds	r7, #12
 8015c00:	46bd      	mov	sp, r7
 8015c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015c06:	4770      	bx	lr
 8015c08:	200071e0 	.word	0x200071e0
 8015c0c:	200071dc 	.word	0x200071dc
 8015c10:	200071da 	.word	0x200071da
 8015c14:	200071d4 	.word	0x200071d4

08015c18 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 8015c18:	b580      	push	{r7, lr}
 8015c1a:	b084      	sub	sp, #16
 8015c1c:	af00      	add	r7, sp, #0
 8015c1e:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 8015c20:	687b      	ldr	r3, [r7, #4]
 8015c22:	2b00      	cmp	r3, #0
 8015c24:	d106      	bne.n	8015c34 <tcp_parseopt+0x1c>
 8015c26:	4b32      	ldr	r3, [pc, #200]	; (8015cf0 <tcp_parseopt+0xd8>)
 8015c28:	f240 727d 	movw	r2, #1917	; 0x77d
 8015c2c:	4931      	ldr	r1, [pc, #196]	; (8015cf4 <tcp_parseopt+0xdc>)
 8015c2e:	4832      	ldr	r0, [pc, #200]	; (8015cf8 <tcp_parseopt+0xe0>)
 8015c30:	f005 fb42 	bl	801b2b8 <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 8015c34:	4b31      	ldr	r3, [pc, #196]	; (8015cfc <tcp_parseopt+0xe4>)
 8015c36:	881b      	ldrh	r3, [r3, #0]
 8015c38:	2b00      	cmp	r3, #0
 8015c3a:	d056      	beq.n	8015cea <tcp_parseopt+0xd2>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8015c3c:	4b30      	ldr	r3, [pc, #192]	; (8015d00 <tcp_parseopt+0xe8>)
 8015c3e:	2200      	movs	r2, #0
 8015c40:	801a      	strh	r2, [r3, #0]
 8015c42:	e046      	b.n	8015cd2 <tcp_parseopt+0xba>
      u8_t opt = tcp_get_next_optbyte();
 8015c44:	f7ff ffb2 	bl	8015bac <tcp_get_next_optbyte>
 8015c48:	4603      	mov	r3, r0
 8015c4a:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 8015c4c:	7bfb      	ldrb	r3, [r7, #15]
 8015c4e:	2b02      	cmp	r3, #2
 8015c50:	d006      	beq.n	8015c60 <tcp_parseopt+0x48>
 8015c52:	2b02      	cmp	r3, #2
 8015c54:	dc2c      	bgt.n	8015cb0 <tcp_parseopt+0x98>
 8015c56:	2b00      	cmp	r3, #0
 8015c58:	d042      	beq.n	8015ce0 <tcp_parseopt+0xc8>
 8015c5a:	2b01      	cmp	r3, #1
 8015c5c:	d128      	bne.n	8015cb0 <tcp_parseopt+0x98>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: EOL\n"));
          return;
        case LWIP_TCP_OPT_NOP:
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
 8015c5e:	e038      	b.n	8015cd2 <tcp_parseopt+0xba>
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 8015c60:	f7ff ffa4 	bl	8015bac <tcp_get_next_optbyte>
 8015c64:	4603      	mov	r3, r0
 8015c66:	2b04      	cmp	r3, #4
 8015c68:	d13c      	bne.n	8015ce4 <tcp_parseopt+0xcc>
 8015c6a:	4b25      	ldr	r3, [pc, #148]	; (8015d00 <tcp_parseopt+0xe8>)
 8015c6c:	881b      	ldrh	r3, [r3, #0]
 8015c6e:	3301      	adds	r3, #1
 8015c70:	4a22      	ldr	r2, [pc, #136]	; (8015cfc <tcp_parseopt+0xe4>)
 8015c72:	8812      	ldrh	r2, [r2, #0]
 8015c74:	4293      	cmp	r3, r2
 8015c76:	da35      	bge.n	8015ce4 <tcp_parseopt+0xcc>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 8015c78:	f7ff ff98 	bl	8015bac <tcp_get_next_optbyte>
 8015c7c:	4603      	mov	r3, r0
 8015c7e:	b29b      	uxth	r3, r3
 8015c80:	021b      	lsls	r3, r3, #8
 8015c82:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 8015c84:	f7ff ff92 	bl	8015bac <tcp_get_next_optbyte>
 8015c88:	4603      	mov	r3, r0
 8015c8a:	b29a      	uxth	r2, r3
 8015c8c:	89bb      	ldrh	r3, [r7, #12]
 8015c8e:	4313      	orrs	r3, r2
 8015c90:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 8015c92:	89bb      	ldrh	r3, [r7, #12]
 8015c94:	f240 52b4 	movw	r2, #1460	; 0x5b4
 8015c98:	4293      	cmp	r3, r2
 8015c9a:	d804      	bhi.n	8015ca6 <tcp_parseopt+0x8e>
 8015c9c:	89bb      	ldrh	r3, [r7, #12]
 8015c9e:	2b00      	cmp	r3, #0
 8015ca0:	d001      	beq.n	8015ca6 <tcp_parseopt+0x8e>
 8015ca2:	89ba      	ldrh	r2, [r7, #12]
 8015ca4:	e001      	b.n	8015caa <tcp_parseopt+0x92>
 8015ca6:	f240 52b4 	movw	r2, #1460	; 0x5b4
 8015caa:	687b      	ldr	r3, [r7, #4]
 8015cac:	865a      	strh	r2, [r3, #50]	; 0x32
          break;
 8015cae:	e010      	b.n	8015cd2 <tcp_parseopt+0xba>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 8015cb0:	f7ff ff7c 	bl	8015bac <tcp_get_next_optbyte>
 8015cb4:	4603      	mov	r3, r0
 8015cb6:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 8015cb8:	7afb      	ldrb	r3, [r7, #11]
 8015cba:	2b01      	cmp	r3, #1
 8015cbc:	d914      	bls.n	8015ce8 <tcp_parseopt+0xd0>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 8015cbe:	7afb      	ldrb	r3, [r7, #11]
 8015cc0:	b29a      	uxth	r2, r3
 8015cc2:	4b0f      	ldr	r3, [pc, #60]	; (8015d00 <tcp_parseopt+0xe8>)
 8015cc4:	881b      	ldrh	r3, [r3, #0]
 8015cc6:	4413      	add	r3, r2
 8015cc8:	b29b      	uxth	r3, r3
 8015cca:	3b02      	subs	r3, #2
 8015ccc:	b29a      	uxth	r2, r3
 8015cce:	4b0c      	ldr	r3, [pc, #48]	; (8015d00 <tcp_parseopt+0xe8>)
 8015cd0:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8015cd2:	4b0b      	ldr	r3, [pc, #44]	; (8015d00 <tcp_parseopt+0xe8>)
 8015cd4:	881a      	ldrh	r2, [r3, #0]
 8015cd6:	4b09      	ldr	r3, [pc, #36]	; (8015cfc <tcp_parseopt+0xe4>)
 8015cd8:	881b      	ldrh	r3, [r3, #0]
 8015cda:	429a      	cmp	r2, r3
 8015cdc:	d3b2      	bcc.n	8015c44 <tcp_parseopt+0x2c>
 8015cde:	e004      	b.n	8015cea <tcp_parseopt+0xd2>
          return;
 8015ce0:	bf00      	nop
 8015ce2:	e002      	b.n	8015cea <tcp_parseopt+0xd2>
            return;
 8015ce4:	bf00      	nop
 8015ce6:	e000      	b.n	8015cea <tcp_parseopt+0xd2>
            return;
 8015ce8:	bf00      	nop
      }
    }
  }
}
 8015cea:	3710      	adds	r7, #16
 8015cec:	46bd      	mov	sp, r7
 8015cee:	bd80      	pop	{r7, pc}
 8015cf0:	0801f538 	.word	0x0801f538
 8015cf4:	0801f99c 	.word	0x0801f99c
 8015cf8:	0801f584 	.word	0x0801f584
 8015cfc:	200071d8 	.word	0x200071d8
 8015d00:	200071e0 	.word	0x200071e0

08015d04 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 8015d04:	b480      	push	{r7}
 8015d06:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 8015d08:	4b05      	ldr	r3, [pc, #20]	; (8015d20 <tcp_trigger_input_pcb_close+0x1c>)
 8015d0a:	781b      	ldrb	r3, [r3, #0]
 8015d0c:	f043 0310 	orr.w	r3, r3, #16
 8015d10:	b2da      	uxtb	r2, r3
 8015d12:	4b03      	ldr	r3, [pc, #12]	; (8015d20 <tcp_trigger_input_pcb_close+0x1c>)
 8015d14:	701a      	strb	r2, [r3, #0]
}
 8015d16:	bf00      	nop
 8015d18:	46bd      	mov	sp, r7
 8015d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015d1e:	4770      	bx	lr
 8015d20:	200071f1 	.word	0x200071f1

08015d24 <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 8015d24:	b580      	push	{r7, lr}
 8015d26:	b084      	sub	sp, #16
 8015d28:	af00      	add	r7, sp, #0
 8015d2a:	60f8      	str	r0, [r7, #12]
 8015d2c:	60b9      	str	r1, [r7, #8]
 8015d2e:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 8015d30:	68fb      	ldr	r3, [r7, #12]
 8015d32:	2b00      	cmp	r3, #0
 8015d34:	d00a      	beq.n	8015d4c <tcp_route+0x28>
 8015d36:	68fb      	ldr	r3, [r7, #12]
 8015d38:	7a1b      	ldrb	r3, [r3, #8]
 8015d3a:	2b00      	cmp	r3, #0
 8015d3c:	d006      	beq.n	8015d4c <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 8015d3e:	68fb      	ldr	r3, [r7, #12]
 8015d40:	7a1b      	ldrb	r3, [r3, #8]
 8015d42:	4618      	mov	r0, r3
 8015d44:	f7fb f8b6 	bl	8010eb4 <netif_get_by_index>
 8015d48:	4603      	mov	r3, r0
 8015d4a:	e003      	b.n	8015d54 <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 8015d4c:	6878      	ldr	r0, [r7, #4]
 8015d4e:	f003 fafb 	bl	8019348 <ip4_route>
 8015d52:	4603      	mov	r3, r0
  }
}
 8015d54:	4618      	mov	r0, r3
 8015d56:	3710      	adds	r7, #16
 8015d58:	46bd      	mov	sp, r7
 8015d5a:	bd80      	pop	{r7, pc}

08015d5c <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 8015d5c:	b590      	push	{r4, r7, lr}
 8015d5e:	b087      	sub	sp, #28
 8015d60:	af00      	add	r7, sp, #0
 8015d62:	60f8      	str	r0, [r7, #12]
 8015d64:	60b9      	str	r1, [r7, #8]
 8015d66:	603b      	str	r3, [r7, #0]
 8015d68:	4613      	mov	r3, r2
 8015d6a:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 8015d6c:	68fb      	ldr	r3, [r7, #12]
 8015d6e:	2b00      	cmp	r3, #0
 8015d70:	d105      	bne.n	8015d7e <tcp_create_segment+0x22>
 8015d72:	4b44      	ldr	r3, [pc, #272]	; (8015e84 <tcp_create_segment+0x128>)
 8015d74:	22a3      	movs	r2, #163	; 0xa3
 8015d76:	4944      	ldr	r1, [pc, #272]	; (8015e88 <tcp_create_segment+0x12c>)
 8015d78:	4844      	ldr	r0, [pc, #272]	; (8015e8c <tcp_create_segment+0x130>)
 8015d7a:	f005 fa9d 	bl	801b2b8 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 8015d7e:	68bb      	ldr	r3, [r7, #8]
 8015d80:	2b00      	cmp	r3, #0
 8015d82:	d105      	bne.n	8015d90 <tcp_create_segment+0x34>
 8015d84:	4b3f      	ldr	r3, [pc, #252]	; (8015e84 <tcp_create_segment+0x128>)
 8015d86:	22a4      	movs	r2, #164	; 0xa4
 8015d88:	4941      	ldr	r1, [pc, #260]	; (8015e90 <tcp_create_segment+0x134>)
 8015d8a:	4840      	ldr	r0, [pc, #256]	; (8015e8c <tcp_create_segment+0x130>)
 8015d8c:	f005 fa94 	bl	801b2b8 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8015d90:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8015d94:	009b      	lsls	r3, r3, #2
 8015d96:	b2db      	uxtb	r3, r3
 8015d98:	f003 0304 	and.w	r3, r3, #4
 8015d9c:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 8015d9e:	2003      	movs	r0, #3
 8015da0:	f7fa fd02 	bl	80107a8 <memp_malloc>
 8015da4:	6138      	str	r0, [r7, #16]
 8015da6:	693b      	ldr	r3, [r7, #16]
 8015da8:	2b00      	cmp	r3, #0
 8015daa:	d104      	bne.n	8015db6 <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 8015dac:	68b8      	ldr	r0, [r7, #8]
 8015dae:	f7fb fbe1 	bl	8011574 <pbuf_free>
    return NULL;
 8015db2:	2300      	movs	r3, #0
 8015db4:	e061      	b.n	8015e7a <tcp_create_segment+0x11e>
  }
  seg->flags = optflags;
 8015db6:	693b      	ldr	r3, [r7, #16]
 8015db8:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8015dbc:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 8015dbe:	693b      	ldr	r3, [r7, #16]
 8015dc0:	2200      	movs	r2, #0
 8015dc2:	601a      	str	r2, [r3, #0]
  seg->p = p;
 8015dc4:	693b      	ldr	r3, [r7, #16]
 8015dc6:	68ba      	ldr	r2, [r7, #8]
 8015dc8:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 8015dca:	68bb      	ldr	r3, [r7, #8]
 8015dcc:	891a      	ldrh	r2, [r3, #8]
 8015dce:	7dfb      	ldrb	r3, [r7, #23]
 8015dd0:	b29b      	uxth	r3, r3
 8015dd2:	429a      	cmp	r2, r3
 8015dd4:	d205      	bcs.n	8015de2 <tcp_create_segment+0x86>
 8015dd6:	4b2b      	ldr	r3, [pc, #172]	; (8015e84 <tcp_create_segment+0x128>)
 8015dd8:	22b0      	movs	r2, #176	; 0xb0
 8015dda:	492e      	ldr	r1, [pc, #184]	; (8015e94 <tcp_create_segment+0x138>)
 8015ddc:	482b      	ldr	r0, [pc, #172]	; (8015e8c <tcp_create_segment+0x130>)
 8015dde:	f005 fa6b 	bl	801b2b8 <iprintf>
  seg->len = p->tot_len - optlen;
 8015de2:	68bb      	ldr	r3, [r7, #8]
 8015de4:	891a      	ldrh	r2, [r3, #8]
 8015de6:	7dfb      	ldrb	r3, [r7, #23]
 8015de8:	b29b      	uxth	r3, r3
 8015dea:	1ad3      	subs	r3, r2, r3
 8015dec:	b29a      	uxth	r2, r3
 8015dee:	693b      	ldr	r3, [r7, #16]
 8015df0:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 8015df2:	2114      	movs	r1, #20
 8015df4:	68b8      	ldr	r0, [r7, #8]
 8015df6:	f7fb fb27 	bl	8011448 <pbuf_add_header>
 8015dfa:	4603      	mov	r3, r0
 8015dfc:	2b00      	cmp	r3, #0
 8015dfe:	d004      	beq.n	8015e0a <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 8015e00:	6938      	ldr	r0, [r7, #16]
 8015e02:	f7fd f81e 	bl	8012e42 <tcp_seg_free>
    return NULL;
 8015e06:	2300      	movs	r3, #0
 8015e08:	e037      	b.n	8015e7a <tcp_create_segment+0x11e>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 8015e0a:	693b      	ldr	r3, [r7, #16]
 8015e0c:	685b      	ldr	r3, [r3, #4]
 8015e0e:	685a      	ldr	r2, [r3, #4]
 8015e10:	693b      	ldr	r3, [r7, #16]
 8015e12:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 8015e14:	68fb      	ldr	r3, [r7, #12]
 8015e16:	8ada      	ldrh	r2, [r3, #22]
 8015e18:	693b      	ldr	r3, [r7, #16]
 8015e1a:	68dc      	ldr	r4, [r3, #12]
 8015e1c:	4610      	mov	r0, r2
 8015e1e:	f7f9 ffa5 	bl	800fd6c <lwip_htons>
 8015e22:	4603      	mov	r3, r0
 8015e24:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 8015e26:	68fb      	ldr	r3, [r7, #12]
 8015e28:	8b1a      	ldrh	r2, [r3, #24]
 8015e2a:	693b      	ldr	r3, [r7, #16]
 8015e2c:	68dc      	ldr	r4, [r3, #12]
 8015e2e:	4610      	mov	r0, r2
 8015e30:	f7f9 ff9c 	bl	800fd6c <lwip_htons>
 8015e34:	4603      	mov	r3, r0
 8015e36:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 8015e38:	693b      	ldr	r3, [r7, #16]
 8015e3a:	68dc      	ldr	r4, [r3, #12]
 8015e3c:	6838      	ldr	r0, [r7, #0]
 8015e3e:	f7f9 ffaa 	bl	800fd96 <lwip_htonl>
 8015e42:	4603      	mov	r3, r0
 8015e44:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 8015e46:	7dfb      	ldrb	r3, [r7, #23]
 8015e48:	089b      	lsrs	r3, r3, #2
 8015e4a:	b2db      	uxtb	r3, r3
 8015e4c:	b29b      	uxth	r3, r3
 8015e4e:	3305      	adds	r3, #5
 8015e50:	b29b      	uxth	r3, r3
 8015e52:	031b      	lsls	r3, r3, #12
 8015e54:	b29a      	uxth	r2, r3
 8015e56:	79fb      	ldrb	r3, [r7, #7]
 8015e58:	b29b      	uxth	r3, r3
 8015e5a:	4313      	orrs	r3, r2
 8015e5c:	b29a      	uxth	r2, r3
 8015e5e:	693b      	ldr	r3, [r7, #16]
 8015e60:	68dc      	ldr	r4, [r3, #12]
 8015e62:	4610      	mov	r0, r2
 8015e64:	f7f9 ff82 	bl	800fd6c <lwip_htons>
 8015e68:	4603      	mov	r3, r0
 8015e6a:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 8015e6c:	693b      	ldr	r3, [r7, #16]
 8015e6e:	68db      	ldr	r3, [r3, #12]
 8015e70:	2200      	movs	r2, #0
 8015e72:	749a      	strb	r2, [r3, #18]
 8015e74:	2200      	movs	r2, #0
 8015e76:	74da      	strb	r2, [r3, #19]
  return seg;
 8015e78:	693b      	ldr	r3, [r7, #16]
}
 8015e7a:	4618      	mov	r0, r3
 8015e7c:	371c      	adds	r7, #28
 8015e7e:	46bd      	mov	sp, r7
 8015e80:	bd90      	pop	{r4, r7, pc}
 8015e82:	bf00      	nop
 8015e84:	0801f9b8 	.word	0x0801f9b8
 8015e88:	0801f9ec 	.word	0x0801f9ec
 8015e8c:	0801fa0c 	.word	0x0801fa0c
 8015e90:	0801fa34 	.word	0x0801fa34
 8015e94:	0801fa58 	.word	0x0801fa58

08015e98 <tcp_pbuf_prealloc>:
#if TCP_OVERSIZE
static struct pbuf *
tcp_pbuf_prealloc(pbuf_layer layer, u16_t length, u16_t max_length,
                  u16_t *oversize, const struct tcp_pcb *pcb, u8_t apiflags,
                  u8_t first_seg)
{
 8015e98:	b580      	push	{r7, lr}
 8015e9a:	b086      	sub	sp, #24
 8015e9c:	af00      	add	r7, sp, #0
 8015e9e:	607b      	str	r3, [r7, #4]
 8015ea0:	4603      	mov	r3, r0
 8015ea2:	73fb      	strb	r3, [r7, #15]
 8015ea4:	460b      	mov	r3, r1
 8015ea6:	81bb      	strh	r3, [r7, #12]
 8015ea8:	4613      	mov	r3, r2
 8015eaa:	817b      	strh	r3, [r7, #10]
  struct pbuf *p;
  u16_t alloc = length;
 8015eac:	89bb      	ldrh	r3, [r7, #12]
 8015eae:	82fb      	strh	r3, [r7, #22]

  LWIP_ASSERT("tcp_pbuf_prealloc: invalid oversize", oversize != NULL);
 8015eb0:	687b      	ldr	r3, [r7, #4]
 8015eb2:	2b00      	cmp	r3, #0
 8015eb4:	d105      	bne.n	8015ec2 <tcp_pbuf_prealloc+0x2a>
 8015eb6:	4b30      	ldr	r3, [pc, #192]	; (8015f78 <tcp_pbuf_prealloc+0xe0>)
 8015eb8:	22e8      	movs	r2, #232	; 0xe8
 8015eba:	4930      	ldr	r1, [pc, #192]	; (8015f7c <tcp_pbuf_prealloc+0xe4>)
 8015ebc:	4830      	ldr	r0, [pc, #192]	; (8015f80 <tcp_pbuf_prealloc+0xe8>)
 8015ebe:	f005 f9fb 	bl	801b2b8 <iprintf>
  LWIP_ASSERT("tcp_pbuf_prealloc: invalid pcb", pcb != NULL);
 8015ec2:	6a3b      	ldr	r3, [r7, #32]
 8015ec4:	2b00      	cmp	r3, #0
 8015ec6:	d105      	bne.n	8015ed4 <tcp_pbuf_prealloc+0x3c>
 8015ec8:	4b2b      	ldr	r3, [pc, #172]	; (8015f78 <tcp_pbuf_prealloc+0xe0>)
 8015eca:	22e9      	movs	r2, #233	; 0xe9
 8015ecc:	492d      	ldr	r1, [pc, #180]	; (8015f84 <tcp_pbuf_prealloc+0xec>)
 8015ece:	482c      	ldr	r0, [pc, #176]	; (8015f80 <tcp_pbuf_prealloc+0xe8>)
 8015ed0:	f005 f9f2 	bl	801b2b8 <iprintf>
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(apiflags);
  LWIP_UNUSED_ARG(first_seg);
  alloc = max_length;
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (length < max_length) {
 8015ed4:	89ba      	ldrh	r2, [r7, #12]
 8015ed6:	897b      	ldrh	r3, [r7, #10]
 8015ed8:	429a      	cmp	r2, r3
 8015eda:	d221      	bcs.n	8015f20 <tcp_pbuf_prealloc+0x88>
     *
     * Did the user set TCP_WRITE_FLAG_MORE?
     *
     * Will the Nagle algorithm defer transmission of this segment?
     */
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 8015edc:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8015ee0:	f003 0302 	and.w	r3, r3, #2
 8015ee4:	2b00      	cmp	r3, #0
 8015ee6:	d111      	bne.n	8015f0c <tcp_pbuf_prealloc+0x74>
        (!(pcb->flags & TF_NODELAY) &&
 8015ee8:	6a3b      	ldr	r3, [r7, #32]
 8015eea:	8b5b      	ldrh	r3, [r3, #26]
 8015eec:	f003 0340 	and.w	r3, r3, #64	; 0x40
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 8015ef0:	2b00      	cmp	r3, #0
 8015ef2:	d115      	bne.n	8015f20 <tcp_pbuf_prealloc+0x88>
        (!(pcb->flags & TF_NODELAY) &&
 8015ef4:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8015ef8:	2b00      	cmp	r3, #0
 8015efa:	d007      	beq.n	8015f0c <tcp_pbuf_prealloc+0x74>
         (!first_seg ||
          pcb->unsent != NULL ||
 8015efc:	6a3b      	ldr	r3, [r7, #32]
 8015efe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
         (!first_seg ||
 8015f00:	2b00      	cmp	r3, #0
 8015f02:	d103      	bne.n	8015f0c <tcp_pbuf_prealloc+0x74>
          pcb->unacked != NULL))) {
 8015f04:	6a3b      	ldr	r3, [r7, #32]
 8015f06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
          pcb->unsent != NULL ||
 8015f08:	2b00      	cmp	r3, #0
 8015f0a:	d009      	beq.n	8015f20 <tcp_pbuf_prealloc+0x88>
      alloc = LWIP_MIN(max_length, LWIP_MEM_ALIGN_SIZE(TCP_OVERSIZE_CALC_LENGTH(length)));
 8015f0c:	89bb      	ldrh	r3, [r7, #12]
 8015f0e:	f203 53b7 	addw	r3, r3, #1463	; 0x5b7
 8015f12:	f023 0203 	bic.w	r2, r3, #3
 8015f16:	897b      	ldrh	r3, [r7, #10]
 8015f18:	4293      	cmp	r3, r2
 8015f1a:	bf28      	it	cs
 8015f1c:	4613      	movcs	r3, r2
 8015f1e:	82fb      	strh	r3, [r7, #22]
    }
  }
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  p = pbuf_alloc(layer, alloc, PBUF_RAM);
 8015f20:	8af9      	ldrh	r1, [r7, #22]
 8015f22:	7bfb      	ldrb	r3, [r7, #15]
 8015f24:	f44f 7220 	mov.w	r2, #640	; 0x280
 8015f28:	4618      	mov	r0, r3
 8015f2a:	f7fb f83f 	bl	8010fac <pbuf_alloc>
 8015f2e:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8015f30:	693b      	ldr	r3, [r7, #16]
 8015f32:	2b00      	cmp	r3, #0
 8015f34:	d101      	bne.n	8015f3a <tcp_pbuf_prealloc+0xa2>
    return NULL;
 8015f36:	2300      	movs	r3, #0
 8015f38:	e019      	b.n	8015f6e <tcp_pbuf_prealloc+0xd6>
  }
  LWIP_ASSERT("need unchained pbuf", p->next == NULL);
 8015f3a:	693b      	ldr	r3, [r7, #16]
 8015f3c:	681b      	ldr	r3, [r3, #0]
 8015f3e:	2b00      	cmp	r3, #0
 8015f40:	d006      	beq.n	8015f50 <tcp_pbuf_prealloc+0xb8>
 8015f42:	4b0d      	ldr	r3, [pc, #52]	; (8015f78 <tcp_pbuf_prealloc+0xe0>)
 8015f44:	f240 120b 	movw	r2, #267	; 0x10b
 8015f48:	490f      	ldr	r1, [pc, #60]	; (8015f88 <tcp_pbuf_prealloc+0xf0>)
 8015f4a:	480d      	ldr	r0, [pc, #52]	; (8015f80 <tcp_pbuf_prealloc+0xe8>)
 8015f4c:	f005 f9b4 	bl	801b2b8 <iprintf>
  *oversize = p->len - length;
 8015f50:	693b      	ldr	r3, [r7, #16]
 8015f52:	895a      	ldrh	r2, [r3, #10]
 8015f54:	89bb      	ldrh	r3, [r7, #12]
 8015f56:	1ad3      	subs	r3, r2, r3
 8015f58:	b29a      	uxth	r2, r3
 8015f5a:	687b      	ldr	r3, [r7, #4]
 8015f5c:	801a      	strh	r2, [r3, #0]
  /* trim p->len to the currently used size */
  p->len = p->tot_len = length;
 8015f5e:	693b      	ldr	r3, [r7, #16]
 8015f60:	89ba      	ldrh	r2, [r7, #12]
 8015f62:	811a      	strh	r2, [r3, #8]
 8015f64:	693b      	ldr	r3, [r7, #16]
 8015f66:	891a      	ldrh	r2, [r3, #8]
 8015f68:	693b      	ldr	r3, [r7, #16]
 8015f6a:	815a      	strh	r2, [r3, #10]
  return p;
 8015f6c:	693b      	ldr	r3, [r7, #16]
}
 8015f6e:	4618      	mov	r0, r3
 8015f70:	3718      	adds	r7, #24
 8015f72:	46bd      	mov	sp, r7
 8015f74:	bd80      	pop	{r7, pc}
 8015f76:	bf00      	nop
 8015f78:	0801f9b8 	.word	0x0801f9b8
 8015f7c:	0801fa70 	.word	0x0801fa70
 8015f80:	0801fa0c 	.word	0x0801fa0c
 8015f84:	0801fa94 	.word	0x0801fa94
 8015f88:	0801fab4 	.word	0x0801fab4

08015f8c <tcp_write_checks>:
 * @param len length of data to send (checked agains snd_buf)
 * @return ERR_OK if tcp_write is allowed to proceed, another err_t otherwise
 */
static err_t
tcp_write_checks(struct tcp_pcb *pcb, u16_t len)
{
 8015f8c:	b580      	push	{r7, lr}
 8015f8e:	b082      	sub	sp, #8
 8015f90:	af00      	add	r7, sp, #0
 8015f92:	6078      	str	r0, [r7, #4]
 8015f94:	460b      	mov	r3, r1
 8015f96:	807b      	strh	r3, [r7, #2]
  LWIP_ASSERT("tcp_write_checks: invalid pcb", pcb != NULL);
 8015f98:	687b      	ldr	r3, [r7, #4]
 8015f9a:	2b00      	cmp	r3, #0
 8015f9c:	d106      	bne.n	8015fac <tcp_write_checks+0x20>
 8015f9e:	4b33      	ldr	r3, [pc, #204]	; (801606c <tcp_write_checks+0xe0>)
 8015fa0:	f240 1233 	movw	r2, #307	; 0x133
 8015fa4:	4932      	ldr	r1, [pc, #200]	; (8016070 <tcp_write_checks+0xe4>)
 8015fa6:	4833      	ldr	r0, [pc, #204]	; (8016074 <tcp_write_checks+0xe8>)
 8015fa8:	f005 f986 	bl	801b2b8 <iprintf>

  /* connection is in invalid state for data transmission? */
  if ((pcb->state != ESTABLISHED) &&
 8015fac:	687b      	ldr	r3, [r7, #4]
 8015fae:	7d1b      	ldrb	r3, [r3, #20]
 8015fb0:	2b04      	cmp	r3, #4
 8015fb2:	d00e      	beq.n	8015fd2 <tcp_write_checks+0x46>
      (pcb->state != CLOSE_WAIT) &&
 8015fb4:	687b      	ldr	r3, [r7, #4]
 8015fb6:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != ESTABLISHED) &&
 8015fb8:	2b07      	cmp	r3, #7
 8015fba:	d00a      	beq.n	8015fd2 <tcp_write_checks+0x46>
      (pcb->state != SYN_SENT) &&
 8015fbc:	687b      	ldr	r3, [r7, #4]
 8015fbe:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != CLOSE_WAIT) &&
 8015fc0:	2b02      	cmp	r3, #2
 8015fc2:	d006      	beq.n	8015fd2 <tcp_write_checks+0x46>
      (pcb->state != SYN_RCVD)) {
 8015fc4:	687b      	ldr	r3, [r7, #4]
 8015fc6:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != SYN_SENT) &&
 8015fc8:	2b03      	cmp	r3, #3
 8015fca:	d002      	beq.n	8015fd2 <tcp_write_checks+0x46>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_STATE | LWIP_DBG_LEVEL_SEVERE, ("tcp_write() called in invalid state\n"));
    return ERR_CONN;
 8015fcc:	f06f 030a 	mvn.w	r3, #10
 8015fd0:	e048      	b.n	8016064 <tcp_write_checks+0xd8>
  } else if (len == 0) {
 8015fd2:	887b      	ldrh	r3, [r7, #2]
 8015fd4:	2b00      	cmp	r3, #0
 8015fd6:	d101      	bne.n	8015fdc <tcp_write_checks+0x50>
    return ERR_OK;
 8015fd8:	2300      	movs	r3, #0
 8015fda:	e043      	b.n	8016064 <tcp_write_checks+0xd8>
  }

  /* fail on too much data */
  if (len > pcb->snd_buf) {
 8015fdc:	687b      	ldr	r3, [r7, #4]
 8015fde:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8015fe2:	887a      	ldrh	r2, [r7, #2]
 8015fe4:	429a      	cmp	r2, r3
 8015fe6:	d909      	bls.n	8015ffc <tcp_write_checks+0x70>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too much data (len=%"U16_F" > snd_buf=%"TCPWNDSIZE_F")\n",
                len, pcb->snd_buf));
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8015fe8:	687b      	ldr	r3, [r7, #4]
 8015fea:	8b5b      	ldrh	r3, [r3, #26]
 8015fec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8015ff0:	b29a      	uxth	r2, r3
 8015ff2:	687b      	ldr	r3, [r7, #4]
 8015ff4:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 8015ff6:	f04f 33ff 	mov.w	r3, #4294967295
 8015ffa:	e033      	b.n	8016064 <tcp_write_checks+0xd8>
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: queuelen: %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));

  /* If total number of pbufs on the unsent/unacked queues exceeds the
   * configured maximum, return an error */
  /* check for configured max queuelen and possible overflow */
  if (pcb->snd_queuelen >= LWIP_MIN(TCP_SND_QUEUELEN, (TCP_SNDQUEUELEN_OVERFLOW + 1))) {
 8015ffc:	687b      	ldr	r3, [r7, #4]
 8015ffe:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8016002:	2b0f      	cmp	r3, #15
 8016004:	d909      	bls.n	801601a <tcp_write_checks+0x8e>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too long queue %"U16_F" (max %"U16_F")\n",
                pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8016006:	687b      	ldr	r3, [r7, #4]
 8016008:	8b5b      	ldrh	r3, [r3, #26]
 801600a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801600e:	b29a      	uxth	r2, r3
 8016010:	687b      	ldr	r3, [r7, #4]
 8016012:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 8016014:	f04f 33ff 	mov.w	r3, #4294967295
 8016018:	e024      	b.n	8016064 <tcp_write_checks+0xd8>
  }
  if (pcb->snd_queuelen != 0) {
 801601a:	687b      	ldr	r3, [r7, #4]
 801601c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8016020:	2b00      	cmp	r3, #0
 8016022:	d00f      	beq.n	8016044 <tcp_write_checks+0xb8>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 8016024:	687b      	ldr	r3, [r7, #4]
 8016026:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8016028:	2b00      	cmp	r3, #0
 801602a:	d11a      	bne.n	8016062 <tcp_write_checks+0xd6>
 801602c:	687b      	ldr	r3, [r7, #4]
 801602e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8016030:	2b00      	cmp	r3, #0
 8016032:	d116      	bne.n	8016062 <tcp_write_checks+0xd6>
 8016034:	4b0d      	ldr	r3, [pc, #52]	; (801606c <tcp_write_checks+0xe0>)
 8016036:	f240 1255 	movw	r2, #341	; 0x155
 801603a:	490f      	ldr	r1, [pc, #60]	; (8016078 <tcp_write_checks+0xec>)
 801603c:	480d      	ldr	r0, [pc, #52]	; (8016074 <tcp_write_checks+0xe8>)
 801603e:	f005 f93b 	bl	801b2b8 <iprintf>
 8016042:	e00e      	b.n	8016062 <tcp_write_checks+0xd6>
                pcb->unacked != NULL || pcb->unsent != NULL);
  } else {
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 8016044:	687b      	ldr	r3, [r7, #4]
 8016046:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8016048:	2b00      	cmp	r3, #0
 801604a:	d103      	bne.n	8016054 <tcp_write_checks+0xc8>
 801604c:	687b      	ldr	r3, [r7, #4]
 801604e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8016050:	2b00      	cmp	r3, #0
 8016052:	d006      	beq.n	8016062 <tcp_write_checks+0xd6>
 8016054:	4b05      	ldr	r3, [pc, #20]	; (801606c <tcp_write_checks+0xe0>)
 8016056:	f44f 72ac 	mov.w	r2, #344	; 0x158
 801605a:	4908      	ldr	r1, [pc, #32]	; (801607c <tcp_write_checks+0xf0>)
 801605c:	4805      	ldr	r0, [pc, #20]	; (8016074 <tcp_write_checks+0xe8>)
 801605e:	f005 f92b 	bl	801b2b8 <iprintf>
                pcb->unacked == NULL && pcb->unsent == NULL);
  }
  return ERR_OK;
 8016062:	2300      	movs	r3, #0
}
 8016064:	4618      	mov	r0, r3
 8016066:	3708      	adds	r7, #8
 8016068:	46bd      	mov	sp, r7
 801606a:	bd80      	pop	{r7, pc}
 801606c:	0801f9b8 	.word	0x0801f9b8
 8016070:	0801fac8 	.word	0x0801fac8
 8016074:	0801fa0c 	.word	0x0801fa0c
 8016078:	0801fae8 	.word	0x0801fae8
 801607c:	0801fb24 	.word	0x0801fb24

08016080 <tcp_write>:
 * - TCP_WRITE_FLAG_MORE (0x02) for TCP connection, PSH flag will not be set on last segment sent,
 * @return ERR_OK if enqueued, another err_t on error
 */
err_t
tcp_write(struct tcp_pcb *pcb, const void *arg, u16_t len, u8_t apiflags)
{
 8016080:	b590      	push	{r4, r7, lr}
 8016082:	b09b      	sub	sp, #108	; 0x6c
 8016084:	af04      	add	r7, sp, #16
 8016086:	60f8      	str	r0, [r7, #12]
 8016088:	60b9      	str	r1, [r7, #8]
 801608a:	4611      	mov	r1, r2
 801608c:	461a      	mov	r2, r3
 801608e:	460b      	mov	r3, r1
 8016090:	80fb      	strh	r3, [r7, #6]
 8016092:	4613      	mov	r3, r2
 8016094:	717b      	strb	r3, [r7, #5]
  struct pbuf *concat_p = NULL;
 8016096:	2300      	movs	r3, #0
 8016098:	657b      	str	r3, [r7, #84]	; 0x54
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 801609a:	2300      	movs	r3, #0
 801609c:	653b      	str	r3, [r7, #80]	; 0x50
 801609e:	2300      	movs	r3, #0
 80160a0:	64fb      	str	r3, [r7, #76]	; 0x4c
 80160a2:	2300      	movs	r3, #0
 80160a4:	64bb      	str	r3, [r7, #72]	; 0x48
 80160a6:	2300      	movs	r3, #0
 80160a8:	647b      	str	r3, [r7, #68]	; 0x44
  u16_t pos = 0; /* position in 'arg' data */
 80160aa:	2300      	movs	r3, #0
 80160ac:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  u16_t queuelen;
  u8_t optlen;
  u8_t optflags = 0;
 80160b0:	2300      	movs	r3, #0
 80160b2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
#if TCP_OVERSIZE
  u16_t oversize = 0;
 80160b6:	2300      	movs	r3, #0
 80160b8:	827b      	strh	r3, [r7, #18]
  u16_t oversize_used = 0;
 80160ba:	2300      	movs	r3, #0
 80160bc:	87fb      	strh	r3, [r7, #62]	; 0x3e
#if TCP_OVERSIZE_DBGCHECK
  u16_t oversize_add = 0;
#endif /* TCP_OVERSIZE_DBGCHECK*/
#endif /* TCP_OVERSIZE */
  u16_t extendlen = 0;
 80160be:	2300      	movs	r3, #0
 80160c0:	87bb      	strh	r3, [r7, #60]	; 0x3c
  u16_t concat_chksummed = 0;
#endif /* TCP_CHECKSUM_ON_COPY */
  err_t err;
  u16_t mss_local;

  LWIP_ERROR("tcp_write: invalid pcb", pcb != NULL, return ERR_ARG);
 80160c2:	68fb      	ldr	r3, [r7, #12]
 80160c4:	2b00      	cmp	r3, #0
 80160c6:	d109      	bne.n	80160dc <tcp_write+0x5c>
 80160c8:	4ba4      	ldr	r3, [pc, #656]	; (801635c <tcp_write+0x2dc>)
 80160ca:	f44f 72cf 	mov.w	r2, #414	; 0x19e
 80160ce:	49a4      	ldr	r1, [pc, #656]	; (8016360 <tcp_write+0x2e0>)
 80160d0:	48a4      	ldr	r0, [pc, #656]	; (8016364 <tcp_write+0x2e4>)
 80160d2:	f005 f8f1 	bl	801b2b8 <iprintf>
 80160d6:	f06f 030f 	mvn.w	r3, #15
 80160da:	e32a      	b.n	8016732 <tcp_write+0x6b2>

  /* don't allocate segments bigger than half the maximum window we ever received */
  mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max / 2));
 80160dc:	68fb      	ldr	r3, [r7, #12]
 80160de:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80160e2:	085b      	lsrs	r3, r3, #1
 80160e4:	b29a      	uxth	r2, r3
 80160e6:	68fb      	ldr	r3, [r7, #12]
 80160e8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80160ea:	4293      	cmp	r3, r2
 80160ec:	bf28      	it	cs
 80160ee:	4613      	movcs	r3, r2
 80160f0:	84bb      	strh	r3, [r7, #36]	; 0x24
  mss_local = mss_local ? mss_local : pcb->mss;
 80160f2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80160f4:	2b00      	cmp	r3, #0
 80160f6:	d102      	bne.n	80160fe <tcp_write+0x7e>
 80160f8:	68fb      	ldr	r3, [r7, #12]
 80160fa:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80160fc:	e000      	b.n	8016100 <tcp_write+0x80>
 80160fe:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8016100:	84bb      	strh	r3, [r7, #36]	; 0x24
  apiflags |= TCP_WRITE_FLAG_COPY;
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_write(pcb=%p, data=%p, len=%"U16_F", apiflags=%"U16_F")\n",
                                 (void *)pcb, arg, len, (u16_t)apiflags));
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 8016102:	68bb      	ldr	r3, [r7, #8]
 8016104:	2b00      	cmp	r3, #0
 8016106:	d109      	bne.n	801611c <tcp_write+0x9c>
 8016108:	4b94      	ldr	r3, [pc, #592]	; (801635c <tcp_write+0x2dc>)
 801610a:	f240 12ad 	movw	r2, #429	; 0x1ad
 801610e:	4996      	ldr	r1, [pc, #600]	; (8016368 <tcp_write+0x2e8>)
 8016110:	4894      	ldr	r0, [pc, #592]	; (8016364 <tcp_write+0x2e4>)
 8016112:	f005 f8d1 	bl	801b2b8 <iprintf>
 8016116:	f06f 030f 	mvn.w	r3, #15
 801611a:	e30a      	b.n	8016732 <tcp_write+0x6b2>
             arg != NULL, return ERR_ARG;);

  err = tcp_write_checks(pcb, len);
 801611c:	88fb      	ldrh	r3, [r7, #6]
 801611e:	4619      	mov	r1, r3
 8016120:	68f8      	ldr	r0, [r7, #12]
 8016122:	f7ff ff33 	bl	8015f8c <tcp_write_checks>
 8016126:	4603      	mov	r3, r0
 8016128:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (err != ERR_OK) {
 801612c:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 8016130:	2b00      	cmp	r3, #0
 8016132:	d002      	beq.n	801613a <tcp_write+0xba>
    return err;
 8016134:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 8016138:	e2fb      	b.n	8016732 <tcp_write+0x6b2>
  }
  queuelen = pcb->snd_queuelen;
 801613a:	68fb      	ldr	r3, [r7, #12]
 801613c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8016140:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
    /* ensure that segments can hold at least one data byte... */
    mss_local = LWIP_MAX(mss_local, LWIP_TCP_OPT_LEN_TS + 1);
  } else
#endif /* LWIP_TCP_TIMESTAMPS */
  {
    optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8016144:	2300      	movs	r3, #0
 8016146:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
   *
   * pos records progress as data is segmented.
   */

  /* Find the tail of the unsent queue. */
  if (pcb->unsent != NULL) {
 801614a:	68fb      	ldr	r3, [r7, #12]
 801614c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801614e:	2b00      	cmp	r3, #0
 8016150:	f000 80f6 	beq.w	8016340 <tcp_write+0x2c0>
    u16_t space;
    u16_t unsent_optlen;

    /* @todo: this could be sped up by keeping last_unsent in the pcb */
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8016154:	68fb      	ldr	r3, [r7, #12]
 8016156:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8016158:	653b      	str	r3, [r7, #80]	; 0x50
 801615a:	e002      	b.n	8016162 <tcp_write+0xe2>
         last_unsent = last_unsent->next);
 801615c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801615e:	681b      	ldr	r3, [r3, #0]
 8016160:	653b      	str	r3, [r7, #80]	; 0x50
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8016162:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8016164:	681b      	ldr	r3, [r3, #0]
 8016166:	2b00      	cmp	r3, #0
 8016168:	d1f8      	bne.n	801615c <tcp_write+0xdc>

    /* Usable space at the end of the last unsent segment */
    unsent_optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(last_unsent->flags, pcb);
 801616a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801616c:	7a9b      	ldrb	r3, [r3, #10]
 801616e:	009b      	lsls	r3, r3, #2
 8016170:	b29b      	uxth	r3, r3
 8016172:	f003 0304 	and.w	r3, r3, #4
 8016176:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 8016178:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801617a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801617c:	891b      	ldrh	r3, [r3, #8]
 801617e:	4619      	mov	r1, r3
 8016180:	8c3b      	ldrh	r3, [r7, #32]
 8016182:	440b      	add	r3, r1
 8016184:	429a      	cmp	r2, r3
 8016186:	da06      	bge.n	8016196 <tcp_write+0x116>
 8016188:	4b74      	ldr	r3, [pc, #464]	; (801635c <tcp_write+0x2dc>)
 801618a:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 801618e:	4977      	ldr	r1, [pc, #476]	; (801636c <tcp_write+0x2ec>)
 8016190:	4874      	ldr	r0, [pc, #464]	; (8016364 <tcp_write+0x2e4>)
 8016192:	f005 f891 	bl	801b2b8 <iprintf>
    space = mss_local - (last_unsent->len + unsent_optlen);
 8016196:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8016198:	891a      	ldrh	r2, [r3, #8]
 801619a:	8c3b      	ldrh	r3, [r7, #32]
 801619c:	4413      	add	r3, r2
 801619e:	b29b      	uxth	r3, r3
 80161a0:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80161a2:	1ad3      	subs	r3, r2, r3
 80161a4:	877b      	strh	r3, [r7, #58]	; 0x3a
#if TCP_OVERSIZE_DBGCHECK
    /* check that pcb->unsent_oversize matches last_unsent->oversize_left */
    LWIP_ASSERT("unsent_oversize mismatch (pcb vs. last_unsent)",
                pcb->unsent_oversize == last_unsent->oversize_left);
#endif /* TCP_OVERSIZE_DBGCHECK */
    oversize = pcb->unsent_oversize;
 80161a6:	68fb      	ldr	r3, [r7, #12]
 80161a8:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80161ac:	827b      	strh	r3, [r7, #18]
    if (oversize > 0) {
 80161ae:	8a7b      	ldrh	r3, [r7, #18]
 80161b0:	2b00      	cmp	r3, #0
 80161b2:	d026      	beq.n	8016202 <tcp_write+0x182>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 80161b4:	8a7b      	ldrh	r3, [r7, #18]
 80161b6:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 80161b8:	429a      	cmp	r2, r3
 80161ba:	d206      	bcs.n	80161ca <tcp_write+0x14a>
 80161bc:	4b67      	ldr	r3, [pc, #412]	; (801635c <tcp_write+0x2dc>)
 80161be:	f44f 72fc 	mov.w	r2, #504	; 0x1f8
 80161c2:	496b      	ldr	r1, [pc, #428]	; (8016370 <tcp_write+0x2f0>)
 80161c4:	4867      	ldr	r0, [pc, #412]	; (8016364 <tcp_write+0x2e4>)
 80161c6:	f005 f877 	bl	801b2b8 <iprintf>
      seg = last_unsent;
 80161ca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80161cc:	64fb      	str	r3, [r7, #76]	; 0x4c
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 80161ce:	8a7b      	ldrh	r3, [r7, #18]
 80161d0:	88fa      	ldrh	r2, [r7, #6]
 80161d2:	4293      	cmp	r3, r2
 80161d4:	bf28      	it	cs
 80161d6:	4613      	movcs	r3, r2
 80161d8:	b29b      	uxth	r3, r3
 80161da:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 80161dc:	4293      	cmp	r3, r2
 80161de:	bf28      	it	cs
 80161e0:	4613      	movcs	r3, r2
 80161e2:	87fb      	strh	r3, [r7, #62]	; 0x3e
      pos += oversize_used;
 80161e4:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80161e8:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80161ea:	4413      	add	r3, r2
 80161ec:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      oversize -= oversize_used;
 80161f0:	8a7a      	ldrh	r2, [r7, #18]
 80161f2:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80161f4:	1ad3      	subs	r3, r2, r3
 80161f6:	b29b      	uxth	r3, r3
 80161f8:	827b      	strh	r3, [r7, #18]
      space -= oversize_used;
 80161fa:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 80161fc:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80161fe:	1ad3      	subs	r3, r2, r3
 8016200:	877b      	strh	r3, [r7, #58]	; 0x3a
    }
    /* now we are either finished or oversize is zero */
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 8016202:	8a7b      	ldrh	r3, [r7, #18]
 8016204:	2b00      	cmp	r3, #0
 8016206:	d00b      	beq.n	8016220 <tcp_write+0x1a0>
 8016208:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801620c:	88fb      	ldrh	r3, [r7, #6]
 801620e:	429a      	cmp	r2, r3
 8016210:	d006      	beq.n	8016220 <tcp_write+0x1a0>
 8016212:	4b52      	ldr	r3, [pc, #328]	; (801635c <tcp_write+0x2dc>)
 8016214:	f44f 7200 	mov.w	r2, #512	; 0x200
 8016218:	4956      	ldr	r1, [pc, #344]	; (8016374 <tcp_write+0x2f4>)
 801621a:	4852      	ldr	r0, [pc, #328]	; (8016364 <tcp_write+0x2e4>)
 801621c:	f005 f84c 	bl	801b2b8 <iprintf>
     *
     * This phase is skipped for LWIP_NETIF_TX_SINGLE_PBUF as we could only execute
     * it after rexmit puts a segment from unacked to unsent and at this point,
     * oversize info is lost.
     */
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 8016220:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8016224:	88fb      	ldrh	r3, [r7, #6]
 8016226:	429a      	cmp	r2, r3
 8016228:	f080 8167 	bcs.w	80164fa <tcp_write+0x47a>
 801622c:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801622e:	2b00      	cmp	r3, #0
 8016230:	f000 8163 	beq.w	80164fa <tcp_write+0x47a>
 8016234:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8016236:	891b      	ldrh	r3, [r3, #8]
 8016238:	2b00      	cmp	r3, #0
 801623a:	f000 815e 	beq.w	80164fa <tcp_write+0x47a>
      u16_t seglen = LWIP_MIN(space, len - pos);
 801623e:	88fa      	ldrh	r2, [r7, #6]
 8016240:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8016244:	1ad2      	subs	r2, r2, r3
 8016246:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8016248:	4293      	cmp	r3, r2
 801624a:	bfa8      	it	ge
 801624c:	4613      	movge	r3, r2
 801624e:	83fb      	strh	r3, [r7, #30]
      seg = last_unsent;
 8016250:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8016252:	64fb      	str	r3, [r7, #76]	; 0x4c

      /* Create a pbuf with a copy or reference to seglen bytes. We
       * can use PBUF_RAW here since the data appears in the middle of
       * a segment. A header will never be prepended. */
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 8016254:	797b      	ldrb	r3, [r7, #5]
 8016256:	f003 0301 	and.w	r3, r3, #1
 801625a:	2b00      	cmp	r3, #0
 801625c:	d027      	beq.n	80162ae <tcp_write+0x22e>
        /* Data is copied */
        if ((concat_p = tcp_pbuf_prealloc(PBUF_RAW, seglen, space, &oversize, pcb, apiflags, 1)) == NULL) {
 801625e:	f107 0012 	add.w	r0, r7, #18
 8016262:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8016264:	8bf9      	ldrh	r1, [r7, #30]
 8016266:	2301      	movs	r3, #1
 8016268:	9302      	str	r3, [sp, #8]
 801626a:	797b      	ldrb	r3, [r7, #5]
 801626c:	9301      	str	r3, [sp, #4]
 801626e:	68fb      	ldr	r3, [r7, #12]
 8016270:	9300      	str	r3, [sp, #0]
 8016272:	4603      	mov	r3, r0
 8016274:	2000      	movs	r0, #0
 8016276:	f7ff fe0f 	bl	8015e98 <tcp_pbuf_prealloc>
 801627a:	6578      	str	r0, [r7, #84]	; 0x54
 801627c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801627e:	2b00      	cmp	r3, #0
 8016280:	f000 8225 	beq.w	80166ce <tcp_write+0x64e>
          goto memerr;
        }
#if TCP_OVERSIZE_DBGCHECK
        oversize_add = oversize;
#endif /* TCP_OVERSIZE_DBGCHECK */
        TCP_DATA_COPY2(concat_p->payload, (const u8_t *)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
 8016284:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8016286:	6858      	ldr	r0, [r3, #4]
 8016288:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801628c:	68ba      	ldr	r2, [r7, #8]
 801628e:	4413      	add	r3, r2
 8016290:	8bfa      	ldrh	r2, [r7, #30]
 8016292:	4619      	mov	r1, r3
 8016294:	f005 fa2b 	bl	801b6ee <memcpy>
#if TCP_CHECKSUM_ON_COPY
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
        queuelen += pbuf_clen(concat_p);
 8016298:	6d78      	ldr	r0, [r7, #84]	; 0x54
 801629a:	f7fb f9f3 	bl	8011684 <pbuf_clen>
 801629e:	4603      	mov	r3, r0
 80162a0:	461a      	mov	r2, r3
 80162a2:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80162a6:	4413      	add	r3, r2
 80162a8:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 80162ac:	e041      	b.n	8016332 <tcp_write+0x2b2>
      } else {
        /* Data is not copied */
        /* If the last unsent pbuf is of type PBUF_ROM, try to extend it. */
        struct pbuf *p;
        for (p = last_unsent->p; p->next != NULL; p = p->next);
 80162ae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80162b0:	685b      	ldr	r3, [r3, #4]
 80162b2:	637b      	str	r3, [r7, #52]	; 0x34
 80162b4:	e002      	b.n	80162bc <tcp_write+0x23c>
 80162b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80162b8:	681b      	ldr	r3, [r3, #0]
 80162ba:	637b      	str	r3, [r7, #52]	; 0x34
 80162bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80162be:	681b      	ldr	r3, [r3, #0]
 80162c0:	2b00      	cmp	r3, #0
 80162c2:	d1f8      	bne.n	80162b6 <tcp_write+0x236>
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 80162c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80162c6:	7b1b      	ldrb	r3, [r3, #12]
 80162c8:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80162cc:	2b00      	cmp	r3, #0
 80162ce:	d115      	bne.n	80162fc <tcp_write+0x27c>
            (const u8_t *)p->payload + p->len == (const u8_t *)arg) {
 80162d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80162d2:	685b      	ldr	r3, [r3, #4]
 80162d4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80162d6:	8952      	ldrh	r2, [r2, #10]
 80162d8:	4413      	add	r3, r2
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 80162da:	68ba      	ldr	r2, [r7, #8]
 80162dc:	429a      	cmp	r2, r3
 80162de:	d10d      	bne.n	80162fc <tcp_write+0x27c>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 80162e0:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80162e4:	2b00      	cmp	r3, #0
 80162e6:	d006      	beq.n	80162f6 <tcp_write+0x276>
 80162e8:	4b1c      	ldr	r3, [pc, #112]	; (801635c <tcp_write+0x2dc>)
 80162ea:	f240 2231 	movw	r2, #561	; 0x231
 80162ee:	4922      	ldr	r1, [pc, #136]	; (8016378 <tcp_write+0x2f8>)
 80162f0:	481c      	ldr	r0, [pc, #112]	; (8016364 <tcp_write+0x2e4>)
 80162f2:	f004 ffe1 	bl	801b2b8 <iprintf>
          extendlen = seglen;
 80162f6:	8bfb      	ldrh	r3, [r7, #30]
 80162f8:	87bb      	strh	r3, [r7, #60]	; 0x3c
 80162fa:	e01a      	b.n	8016332 <tcp_write+0x2b2>
        } else {
          if ((concat_p = pbuf_alloc(PBUF_RAW, seglen, PBUF_ROM)) == NULL) {
 80162fc:	8bfb      	ldrh	r3, [r7, #30]
 80162fe:	2201      	movs	r2, #1
 8016300:	4619      	mov	r1, r3
 8016302:	2000      	movs	r0, #0
 8016304:	f7fa fe52 	bl	8010fac <pbuf_alloc>
 8016308:	6578      	str	r0, [r7, #84]	; 0x54
 801630a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801630c:	2b00      	cmp	r3, #0
 801630e:	f000 81e0 	beq.w	80166d2 <tcp_write+0x652>
            LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                        ("tcp_write: could not allocate memory for zero-copy pbuf\n"));
            goto memerr;
          }
          /* reference the non-volatile payload data */
          ((struct pbuf_rom *)concat_p)->payload = (const u8_t *)arg + pos;
 8016312:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8016316:	68ba      	ldr	r2, [r7, #8]
 8016318:	441a      	add	r2, r3
 801631a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801631c:	605a      	str	r2, [r3, #4]
          queuelen += pbuf_clen(concat_p);
 801631e:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8016320:	f7fb f9b0 	bl	8011684 <pbuf_clen>
 8016324:	4603      	mov	r3, r0
 8016326:	461a      	mov	r2, r3
 8016328:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 801632c:	4413      	add	r3, r2
 801632e:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
                           &concat_chksum, &concat_chksum_swapped);
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
      }

      pos += seglen;
 8016332:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8016336:	8bfb      	ldrh	r3, [r7, #30]
 8016338:	4413      	add	r3, r2
 801633a:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 801633e:	e0dc      	b.n	80164fa <tcp_write+0x47a>
    }
#endif /* !LWIP_NETIF_TX_SINGLE_PBUF */
  } else {
#if TCP_OVERSIZE
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 8016340:	68fb      	ldr	r3, [r7, #12]
 8016342:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8016346:	2b00      	cmp	r3, #0
 8016348:	f000 80d7 	beq.w	80164fa <tcp_write+0x47a>
 801634c:	4b03      	ldr	r3, [pc, #12]	; (801635c <tcp_write+0x2dc>)
 801634e:	f240 224a 	movw	r2, #586	; 0x24a
 8016352:	490a      	ldr	r1, [pc, #40]	; (801637c <tcp_write+0x2fc>)
 8016354:	4803      	ldr	r0, [pc, #12]	; (8016364 <tcp_write+0x2e4>)
 8016356:	f004 ffaf 	bl	801b2b8 <iprintf>
   * Phase 3: Create new segments.
   *
   * The new segments are chained together in the local 'queue'
   * variable, ready to be appended to pcb->unsent.
   */
  while (pos < len) {
 801635a:	e0ce      	b.n	80164fa <tcp_write+0x47a>
 801635c:	0801f9b8 	.word	0x0801f9b8
 8016360:	0801fb58 	.word	0x0801fb58
 8016364:	0801fa0c 	.word	0x0801fa0c
 8016368:	0801fb70 	.word	0x0801fb70
 801636c:	0801fba4 	.word	0x0801fba4
 8016370:	0801fbbc 	.word	0x0801fbbc
 8016374:	0801fbdc 	.word	0x0801fbdc
 8016378:	0801fbfc 	.word	0x0801fbfc
 801637c:	0801fc28 	.word	0x0801fc28
    struct pbuf *p;
    u16_t left = len - pos;
 8016380:	88fa      	ldrh	r2, [r7, #6]
 8016382:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8016386:	1ad3      	subs	r3, r2, r3
 8016388:	83bb      	strh	r3, [r7, #28]
    u16_t max_len = mss_local - optlen;
 801638a:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 801638e:	b29b      	uxth	r3, r3
 8016390:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8016392:	1ad3      	subs	r3, r2, r3
 8016394:	837b      	strh	r3, [r7, #26]
    u16_t seglen = LWIP_MIN(left, max_len);
 8016396:	8b7a      	ldrh	r2, [r7, #26]
 8016398:	8bbb      	ldrh	r3, [r7, #28]
 801639a:	4293      	cmp	r3, r2
 801639c:	bf28      	it	cs
 801639e:	4613      	movcs	r3, r2
 80163a0:	833b      	strh	r3, [r7, #24]
#if TCP_CHECKSUM_ON_COPY
    u16_t chksum = 0;
    u8_t chksum_swapped = 0;
#endif /* TCP_CHECKSUM_ON_COPY */

    if (apiflags & TCP_WRITE_FLAG_COPY) {
 80163a2:	797b      	ldrb	r3, [r7, #5]
 80163a4:	f003 0301 	and.w	r3, r3, #1
 80163a8:	2b00      	cmp	r3, #0
 80163aa:	d036      	beq.n	801641a <tcp_write+0x39a>
      /* If copy is set, memory should be allocated and data copied
       * into pbuf */
      if ((p = tcp_pbuf_prealloc(PBUF_TRANSPORT, seglen + optlen, mss_local, &oversize, pcb, apiflags, queue == NULL)) == NULL) {
 80163ac:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80163b0:	b29a      	uxth	r2, r3
 80163b2:	8b3b      	ldrh	r3, [r7, #24]
 80163b4:	4413      	add	r3, r2
 80163b6:	b299      	uxth	r1, r3
 80163b8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80163ba:	2b00      	cmp	r3, #0
 80163bc:	bf0c      	ite	eq
 80163be:	2301      	moveq	r3, #1
 80163c0:	2300      	movne	r3, #0
 80163c2:	b2db      	uxtb	r3, r3
 80163c4:	f107 0012 	add.w	r0, r7, #18
 80163c8:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80163ca:	9302      	str	r3, [sp, #8]
 80163cc:	797b      	ldrb	r3, [r7, #5]
 80163ce:	9301      	str	r3, [sp, #4]
 80163d0:	68fb      	ldr	r3, [r7, #12]
 80163d2:	9300      	str	r3, [sp, #0]
 80163d4:	4603      	mov	r3, r0
 80163d6:	2036      	movs	r0, #54	; 0x36
 80163d8:	f7ff fd5e 	bl	8015e98 <tcp_pbuf_prealloc>
 80163dc:	6338      	str	r0, [r7, #48]	; 0x30
 80163de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80163e0:	2b00      	cmp	r3, #0
 80163e2:	f000 8178 	beq.w	80166d6 <tcp_write+0x656>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write : could not allocate memory for pbuf copy size %"U16_F"\n", seglen));
        goto memerr;
      }
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 80163e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80163e8:	895b      	ldrh	r3, [r3, #10]
 80163ea:	8b3a      	ldrh	r2, [r7, #24]
 80163ec:	429a      	cmp	r2, r3
 80163ee:	d906      	bls.n	80163fe <tcp_write+0x37e>
 80163f0:	4b8c      	ldr	r3, [pc, #560]	; (8016624 <tcp_write+0x5a4>)
 80163f2:	f240 2266 	movw	r2, #614	; 0x266
 80163f6:	498c      	ldr	r1, [pc, #560]	; (8016628 <tcp_write+0x5a8>)
 80163f8:	488c      	ldr	r0, [pc, #560]	; (801662c <tcp_write+0x5ac>)
 80163fa:	f004 ff5d 	bl	801b2b8 <iprintf>
                  (p->len >= seglen));
      TCP_DATA_COPY2((char *)p->payload + optlen, (const u8_t *)arg + pos, seglen, &chksum, &chksum_swapped);
 80163fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016400:	685a      	ldr	r2, [r3, #4]
 8016402:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8016406:	18d0      	adds	r0, r2, r3
 8016408:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801640c:	68ba      	ldr	r2, [r7, #8]
 801640e:	4413      	add	r3, r2
 8016410:	8b3a      	ldrh	r2, [r7, #24]
 8016412:	4619      	mov	r1, r3
 8016414:	f005 f96b 	bl	801b6ee <memcpy>
 8016418:	e02f      	b.n	801647a <tcp_write+0x3fa>
       * sent out on the link (as it has to be ACKed by the remote
       * party) we can safely use PBUF_ROM instead of PBUF_REF here.
       */
      struct pbuf *p2;
#if TCP_OVERSIZE
      LWIP_ASSERT("oversize == 0", oversize == 0);
 801641a:	8a7b      	ldrh	r3, [r7, #18]
 801641c:	2b00      	cmp	r3, #0
 801641e:	d006      	beq.n	801642e <tcp_write+0x3ae>
 8016420:	4b80      	ldr	r3, [pc, #512]	; (8016624 <tcp_write+0x5a4>)
 8016422:	f240 2271 	movw	r2, #625	; 0x271
 8016426:	4982      	ldr	r1, [pc, #520]	; (8016630 <tcp_write+0x5b0>)
 8016428:	4880      	ldr	r0, [pc, #512]	; (801662c <tcp_write+0x5ac>)
 801642a:	f004 ff45 	bl	801b2b8 <iprintf>
#endif /* TCP_OVERSIZE */
      if ((p2 = pbuf_alloc(PBUF_TRANSPORT, seglen, PBUF_ROM)) == NULL) {
 801642e:	8b3b      	ldrh	r3, [r7, #24]
 8016430:	2201      	movs	r2, #1
 8016432:	4619      	mov	r1, r3
 8016434:	2036      	movs	r0, #54	; 0x36
 8016436:	f7fa fdb9 	bl	8010fac <pbuf_alloc>
 801643a:	6178      	str	r0, [r7, #20]
 801643c:	697b      	ldr	r3, [r7, #20]
 801643e:	2b00      	cmp	r3, #0
 8016440:	f000 814b 	beq.w	80166da <tcp_write+0x65a>
        chksum_swapped = 1;
        chksum = SWAP_BYTES_IN_WORD(chksum);
      }
#endif /* TCP_CHECKSUM_ON_COPY */
      /* reference the non-volatile payload data */
      ((struct pbuf_rom *)p2)->payload = (const u8_t *)arg + pos;
 8016444:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8016448:	68ba      	ldr	r2, [r7, #8]
 801644a:	441a      	add	r2, r3
 801644c:	697b      	ldr	r3, [r7, #20]
 801644e:	605a      	str	r2, [r3, #4]

      /* Second, allocate a pbuf for the headers. */
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 8016450:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8016454:	b29b      	uxth	r3, r3
 8016456:	f44f 7220 	mov.w	r2, #640	; 0x280
 801645a:	4619      	mov	r1, r3
 801645c:	2036      	movs	r0, #54	; 0x36
 801645e:	f7fa fda5 	bl	8010fac <pbuf_alloc>
 8016462:	6338      	str	r0, [r7, #48]	; 0x30
 8016464:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016466:	2b00      	cmp	r3, #0
 8016468:	d103      	bne.n	8016472 <tcp_write+0x3f2>
        /* If allocation fails, we have to deallocate the data pbuf as
         * well. */
        pbuf_free(p2);
 801646a:	6978      	ldr	r0, [r7, #20]
 801646c:	f7fb f882 	bl	8011574 <pbuf_free>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: could not allocate memory for header pbuf\n"));
        goto memerr;
 8016470:	e136      	b.n	80166e0 <tcp_write+0x660>
      }
      /* Concatenate the headers and data pbufs together. */
      pbuf_cat(p/*header*/, p2/*data*/);
 8016472:	6979      	ldr	r1, [r7, #20]
 8016474:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8016476:	f7fb f93f 	bl	80116f8 <pbuf_cat>
    }

    queuelen += pbuf_clen(p);
 801647a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801647c:	f7fb f902 	bl	8011684 <pbuf_clen>
 8016480:	4603      	mov	r3, r0
 8016482:	461a      	mov	r2, r3
 8016484:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8016488:	4413      	add	r3, r2
 801648a:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

    /* Now that there are more segments queued, we check again if the
     * length of the queue exceeds the configured maximum or
     * overflows. */
    if (queuelen > LWIP_MIN(TCP_SND_QUEUELEN, TCP_SNDQUEUELEN_OVERFLOW)) {
 801648e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8016492:	2b10      	cmp	r3, #16
 8016494:	d903      	bls.n	801649e <tcp_write+0x41e>
      LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: queue too long %"U16_F" (%d)\n",
                  queuelen, (int)TCP_SND_QUEUELEN));
      pbuf_free(p);
 8016496:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8016498:	f7fb f86c 	bl	8011574 <pbuf_free>
      goto memerr;
 801649c:	e120      	b.n	80166e0 <tcp_write+0x660>
    }

    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 801649e:	68fb      	ldr	r3, [r7, #12]
 80164a0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80164a2:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80164a6:	441a      	add	r2, r3
 80164a8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80164ac:	9300      	str	r3, [sp, #0]
 80164ae:	4613      	mov	r3, r2
 80164b0:	2200      	movs	r2, #0
 80164b2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80164b4:	68f8      	ldr	r0, [r7, #12]
 80164b6:	f7ff fc51 	bl	8015d5c <tcp_create_segment>
 80164ba:	64f8      	str	r0, [r7, #76]	; 0x4c
 80164bc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80164be:	2b00      	cmp	r3, #0
 80164c0:	f000 810d 	beq.w	80166de <tcp_write+0x65e>
    seg->chksum_swapped = chksum_swapped;
    seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

    /* first segment of to-be-queued data? */
    if (queue == NULL) {
 80164c4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80164c6:	2b00      	cmp	r3, #0
 80164c8:	d102      	bne.n	80164d0 <tcp_write+0x450>
      queue = seg;
 80164ca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80164cc:	647b      	str	r3, [r7, #68]	; 0x44
 80164ce:	e00c      	b.n	80164ea <tcp_write+0x46a>
    } else {
      /* Attach the segment to the end of the queued segments */
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 80164d0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80164d2:	2b00      	cmp	r3, #0
 80164d4:	d106      	bne.n	80164e4 <tcp_write+0x464>
 80164d6:	4b53      	ldr	r3, [pc, #332]	; (8016624 <tcp_write+0x5a4>)
 80164d8:	f240 22ab 	movw	r2, #683	; 0x2ab
 80164dc:	4955      	ldr	r1, [pc, #340]	; (8016634 <tcp_write+0x5b4>)
 80164de:	4853      	ldr	r0, [pc, #332]	; (801662c <tcp_write+0x5ac>)
 80164e0:	f004 feea 	bl	801b2b8 <iprintf>
      prev_seg->next = seg;
 80164e4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80164e6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80164e8:	601a      	str	r2, [r3, #0]
    }
    /* remember last segment of to-be-queued data for next iteration */
    prev_seg = seg;
 80164ea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80164ec:	64bb      	str	r3, [r7, #72]	; 0x48

    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_TRACE, ("tcp_write: queueing %"U32_F":%"U32_F"\n",
                lwip_ntohl(seg->tcphdr->seqno),
                lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg)));

    pos += seglen;
 80164ee:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80164f2:	8b3b      	ldrh	r3, [r7, #24]
 80164f4:	4413      	add	r3, r2
 80164f6:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  while (pos < len) {
 80164fa:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80164fe:	88fb      	ldrh	r3, [r7, #6]
 8016500:	429a      	cmp	r2, r3
 8016502:	f4ff af3d 	bcc.w	8016380 <tcp_write+0x300>
  /*
   * Phase 1: If data has been added to the preallocated tail of
   * last_unsent, we update the length fields of the pbuf chain.
   */
#if TCP_OVERSIZE
  if (oversize_used > 0) {
 8016506:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8016508:	2b00      	cmp	r3, #0
 801650a:	d02c      	beq.n	8016566 <tcp_write+0x4e6>
    struct pbuf *p;
    /* Bump tot_len of whole chain, len of tail */
    for (p = last_unsent->p; p; p = p->next) {
 801650c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801650e:	685b      	ldr	r3, [r3, #4]
 8016510:	62fb      	str	r3, [r7, #44]	; 0x2c
 8016512:	e01e      	b.n	8016552 <tcp_write+0x4d2>
      p->tot_len += oversize_used;
 8016514:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016516:	891a      	ldrh	r2, [r3, #8]
 8016518:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801651a:	4413      	add	r3, r2
 801651c:	b29a      	uxth	r2, r3
 801651e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016520:	811a      	strh	r2, [r3, #8]
      if (p->next == NULL) {
 8016522:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016524:	681b      	ldr	r3, [r3, #0]
 8016526:	2b00      	cmp	r3, #0
 8016528:	d110      	bne.n	801654c <tcp_write+0x4cc>
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
 801652a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801652c:	685b      	ldr	r3, [r3, #4]
 801652e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8016530:	8952      	ldrh	r2, [r2, #10]
 8016532:	4413      	add	r3, r2
 8016534:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8016536:	68b9      	ldr	r1, [r7, #8]
 8016538:	4618      	mov	r0, r3
 801653a:	f005 f8d8 	bl	801b6ee <memcpy>
        p->len += oversize_used;
 801653e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016540:	895a      	ldrh	r2, [r3, #10]
 8016542:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8016544:	4413      	add	r3, r2
 8016546:	b29a      	uxth	r2, r3
 8016548:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801654a:	815a      	strh	r2, [r3, #10]
    for (p = last_unsent->p; p; p = p->next) {
 801654c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801654e:	681b      	ldr	r3, [r3, #0]
 8016550:	62fb      	str	r3, [r7, #44]	; 0x2c
 8016552:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016554:	2b00      	cmp	r3, #0
 8016556:	d1dd      	bne.n	8016514 <tcp_write+0x494>
      }
    }
    last_unsent->len += oversize_used;
 8016558:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801655a:	891a      	ldrh	r2, [r3, #8]
 801655c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801655e:	4413      	add	r3, r2
 8016560:	b29a      	uxth	r2, r3
 8016562:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8016564:	811a      	strh	r2, [r3, #8]
    LWIP_ASSERT("last_unsent->oversize_left >= oversize_used",
                last_unsent->oversize_left >= oversize_used);
    last_unsent->oversize_left -= oversize_used;
#endif /* TCP_OVERSIZE_DBGCHECK */
  }
  pcb->unsent_oversize = oversize;
 8016566:	8a7a      	ldrh	r2, [r7, #18]
 8016568:	68fb      	ldr	r3, [r7, #12]
 801656a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /*
   * Phase 2: concat_p can be concatenated onto last_unsent->p, unless we
   * determined that the last ROM pbuf can be extended to include the new data.
   */
  if (concat_p != NULL) {
 801656e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8016570:	2b00      	cmp	r3, #0
 8016572:	d018      	beq.n	80165a6 <tcp_write+0x526>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
 8016574:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8016576:	2b00      	cmp	r3, #0
 8016578:	d106      	bne.n	8016588 <tcp_write+0x508>
 801657a:	4b2a      	ldr	r3, [pc, #168]	; (8016624 <tcp_write+0x5a4>)
 801657c:	f44f 7238 	mov.w	r2, #736	; 0x2e0
 8016580:	492d      	ldr	r1, [pc, #180]	; (8016638 <tcp_write+0x5b8>)
 8016582:	482a      	ldr	r0, [pc, #168]	; (801662c <tcp_write+0x5ac>)
 8016584:	f004 fe98 	bl	801b2b8 <iprintf>
                (last_unsent != NULL));
    pbuf_cat(last_unsent->p, concat_p);
 8016588:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801658a:	685b      	ldr	r3, [r3, #4]
 801658c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 801658e:	4618      	mov	r0, r3
 8016590:	f7fb f8b2 	bl	80116f8 <pbuf_cat>
    last_unsent->len += concat_p->tot_len;
 8016594:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8016596:	891a      	ldrh	r2, [r3, #8]
 8016598:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801659a:	891b      	ldrh	r3, [r3, #8]
 801659c:	4413      	add	r3, r2
 801659e:	b29a      	uxth	r2, r3
 80165a0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80165a2:	811a      	strh	r2, [r3, #8]
 80165a4:	e037      	b.n	8016616 <tcp_write+0x596>
  } else if (extendlen > 0) {
 80165a6:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80165a8:	2b00      	cmp	r3, #0
 80165aa:	d034      	beq.n	8016616 <tcp_write+0x596>
    struct pbuf *p;
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 80165ac:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80165ae:	2b00      	cmp	r3, #0
 80165b0:	d003      	beq.n	80165ba <tcp_write+0x53a>
 80165b2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80165b4:	685b      	ldr	r3, [r3, #4]
 80165b6:	2b00      	cmp	r3, #0
 80165b8:	d106      	bne.n	80165c8 <tcp_write+0x548>
 80165ba:	4b1a      	ldr	r3, [pc, #104]	; (8016624 <tcp_write+0x5a4>)
 80165bc:	f240 22e6 	movw	r2, #742	; 0x2e6
 80165c0:	491e      	ldr	r1, [pc, #120]	; (801663c <tcp_write+0x5bc>)
 80165c2:	481a      	ldr	r0, [pc, #104]	; (801662c <tcp_write+0x5ac>)
 80165c4:	f004 fe78 	bl	801b2b8 <iprintf>
                last_unsent != NULL && last_unsent->p != NULL);
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 80165c8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80165ca:	685b      	ldr	r3, [r3, #4]
 80165cc:	62bb      	str	r3, [r7, #40]	; 0x28
 80165ce:	e009      	b.n	80165e4 <tcp_write+0x564>
      p->tot_len += extendlen;
 80165d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80165d2:	891a      	ldrh	r2, [r3, #8]
 80165d4:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80165d6:	4413      	add	r3, r2
 80165d8:	b29a      	uxth	r2, r3
 80165da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80165dc:	811a      	strh	r2, [r3, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 80165de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80165e0:	681b      	ldr	r3, [r3, #0]
 80165e2:	62bb      	str	r3, [r7, #40]	; 0x28
 80165e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80165e6:	681b      	ldr	r3, [r3, #0]
 80165e8:	2b00      	cmp	r3, #0
 80165ea:	d1f1      	bne.n	80165d0 <tcp_write+0x550>
    }
    p->tot_len += extendlen;
 80165ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80165ee:	891a      	ldrh	r2, [r3, #8]
 80165f0:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80165f2:	4413      	add	r3, r2
 80165f4:	b29a      	uxth	r2, r3
 80165f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80165f8:	811a      	strh	r2, [r3, #8]
    p->len += extendlen;
 80165fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80165fc:	895a      	ldrh	r2, [r3, #10]
 80165fe:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8016600:	4413      	add	r3, r2
 8016602:	b29a      	uxth	r2, r3
 8016604:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016606:	815a      	strh	r2, [r3, #10]
    last_unsent->len += extendlen;
 8016608:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801660a:	891a      	ldrh	r2, [r3, #8]
 801660c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801660e:	4413      	add	r3, r2
 8016610:	b29a      	uxth	r2, r3
 8016612:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8016614:	811a      	strh	r2, [r3, #8]

  /*
   * Phase 3: Append queue to pcb->unsent. Queue may be NULL, but that
   * is harmless
   */
  if (last_unsent == NULL) {
 8016616:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8016618:	2b00      	cmp	r3, #0
 801661a:	d111      	bne.n	8016640 <tcp_write+0x5c0>
    pcb->unsent = queue;
 801661c:	68fb      	ldr	r3, [r7, #12]
 801661e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8016620:	66da      	str	r2, [r3, #108]	; 0x6c
 8016622:	e010      	b.n	8016646 <tcp_write+0x5c6>
 8016624:	0801f9b8 	.word	0x0801f9b8
 8016628:	0801fc58 	.word	0x0801fc58
 801662c:	0801fa0c 	.word	0x0801fa0c
 8016630:	0801fc98 	.word	0x0801fc98
 8016634:	0801fca8 	.word	0x0801fca8
 8016638:	0801fcbc 	.word	0x0801fcbc
 801663c:	0801fcf4 	.word	0x0801fcf4
  } else {
    last_unsent->next = queue;
 8016640:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8016642:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8016644:	601a      	str	r2, [r3, #0]
  }

  /*
   * Finally update the pcb state.
   */
  pcb->snd_lbb += len;
 8016646:	68fb      	ldr	r3, [r7, #12]
 8016648:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 801664a:	88fb      	ldrh	r3, [r7, #6]
 801664c:	441a      	add	r2, r3
 801664e:	68fb      	ldr	r3, [r7, #12]
 8016650:	65da      	str	r2, [r3, #92]	; 0x5c
  pcb->snd_buf -= len;
 8016652:	68fb      	ldr	r3, [r7, #12]
 8016654:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 8016658:	88fb      	ldrh	r3, [r7, #6]
 801665a:	1ad3      	subs	r3, r2, r3
 801665c:	b29a      	uxth	r2, r3
 801665e:	68fb      	ldr	r3, [r7, #12]
 8016660:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
  pcb->snd_queuelen = queuelen;
 8016664:	68fb      	ldr	r3, [r7, #12]
 8016666:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 801666a:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: %"S16_F" (after enqueued)\n",
                               pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 801666e:	68fb      	ldr	r3, [r7, #12]
 8016670:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8016674:	2b00      	cmp	r3, #0
 8016676:	d00e      	beq.n	8016696 <tcp_write+0x616>
    LWIP_ASSERT("tcp_write: valid queue length",
 8016678:	68fb      	ldr	r3, [r7, #12]
 801667a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801667c:	2b00      	cmp	r3, #0
 801667e:	d10a      	bne.n	8016696 <tcp_write+0x616>
 8016680:	68fb      	ldr	r3, [r7, #12]
 8016682:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8016684:	2b00      	cmp	r3, #0
 8016686:	d106      	bne.n	8016696 <tcp_write+0x616>
 8016688:	4b2c      	ldr	r3, [pc, #176]	; (801673c <tcp_write+0x6bc>)
 801668a:	f240 3212 	movw	r2, #786	; 0x312
 801668e:	492c      	ldr	r1, [pc, #176]	; (8016740 <tcp_write+0x6c0>)
 8016690:	482c      	ldr	r0, [pc, #176]	; (8016744 <tcp_write+0x6c4>)
 8016692:	f004 fe11 	bl	801b2b8 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  /* Set the PSH flag in the last segment that we enqueued. */
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE) == 0)) {
 8016696:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8016698:	2b00      	cmp	r3, #0
 801669a:	d016      	beq.n	80166ca <tcp_write+0x64a>
 801669c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801669e:	68db      	ldr	r3, [r3, #12]
 80166a0:	2b00      	cmp	r3, #0
 80166a2:	d012      	beq.n	80166ca <tcp_write+0x64a>
 80166a4:	797b      	ldrb	r3, [r7, #5]
 80166a6:	f003 0302 	and.w	r3, r3, #2
 80166aa:	2b00      	cmp	r3, #0
 80166ac:	d10d      	bne.n	80166ca <tcp_write+0x64a>
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
 80166ae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80166b0:	68db      	ldr	r3, [r3, #12]
 80166b2:	899b      	ldrh	r3, [r3, #12]
 80166b4:	b29c      	uxth	r4, r3
 80166b6:	2008      	movs	r0, #8
 80166b8:	f7f9 fb58 	bl	800fd6c <lwip_htons>
 80166bc:	4603      	mov	r3, r0
 80166be:	461a      	mov	r2, r3
 80166c0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80166c2:	68db      	ldr	r3, [r3, #12]
 80166c4:	4322      	orrs	r2, r4
 80166c6:	b292      	uxth	r2, r2
 80166c8:	819a      	strh	r2, [r3, #12]
  }

  return ERR_OK;
 80166ca:	2300      	movs	r3, #0
 80166cc:	e031      	b.n	8016732 <tcp_write+0x6b2>
          goto memerr;
 80166ce:	bf00      	nop
 80166d0:	e006      	b.n	80166e0 <tcp_write+0x660>
            goto memerr;
 80166d2:	bf00      	nop
 80166d4:	e004      	b.n	80166e0 <tcp_write+0x660>
        goto memerr;
 80166d6:	bf00      	nop
 80166d8:	e002      	b.n	80166e0 <tcp_write+0x660>
        goto memerr;
 80166da:	bf00      	nop
 80166dc:	e000      	b.n	80166e0 <tcp_write+0x660>
      goto memerr;
 80166de:	bf00      	nop
memerr:
  tcp_set_flags(pcb, TF_NAGLEMEMERR);
 80166e0:	68fb      	ldr	r3, [r7, #12]
 80166e2:	8b5b      	ldrh	r3, [r3, #26]
 80166e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80166e8:	b29a      	uxth	r2, r3
 80166ea:	68fb      	ldr	r3, [r7, #12]
 80166ec:	835a      	strh	r2, [r3, #26]
  TCP_STATS_INC(tcp.memerr);

  if (concat_p != NULL) {
 80166ee:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80166f0:	2b00      	cmp	r3, #0
 80166f2:	d002      	beq.n	80166fa <tcp_write+0x67a>
    pbuf_free(concat_p);
 80166f4:	6d78      	ldr	r0, [r7, #84]	; 0x54
 80166f6:	f7fa ff3d 	bl	8011574 <pbuf_free>
  }
  if (queue != NULL) {
 80166fa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80166fc:	2b00      	cmp	r3, #0
 80166fe:	d002      	beq.n	8016706 <tcp_write+0x686>
    tcp_segs_free(queue);
 8016700:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8016702:	f7fc fb89 	bl	8012e18 <tcp_segs_free>
  }
  if (pcb->snd_queuelen != 0) {
 8016706:	68fb      	ldr	r3, [r7, #12]
 8016708:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801670c:	2b00      	cmp	r3, #0
 801670e:	d00e      	beq.n	801672e <tcp_write+0x6ae>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 8016710:	68fb      	ldr	r3, [r7, #12]
 8016712:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8016714:	2b00      	cmp	r3, #0
 8016716:	d10a      	bne.n	801672e <tcp_write+0x6ae>
 8016718:	68fb      	ldr	r3, [r7, #12]
 801671a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801671c:	2b00      	cmp	r3, #0
 801671e:	d106      	bne.n	801672e <tcp_write+0x6ae>
 8016720:	4b06      	ldr	r3, [pc, #24]	; (801673c <tcp_write+0x6bc>)
 8016722:	f240 3227 	movw	r2, #807	; 0x327
 8016726:	4906      	ldr	r1, [pc, #24]	; (8016740 <tcp_write+0x6c0>)
 8016728:	4806      	ldr	r0, [pc, #24]	; (8016744 <tcp_write+0x6c4>)
 801672a:	f004 fdc5 	bl	801b2b8 <iprintf>
                pcb->unsent != NULL);
  }
  LWIP_DEBUGF(TCP_QLEN_DEBUG | LWIP_DBG_STATE, ("tcp_write: %"S16_F" (with mem err)\n", pcb->snd_queuelen));
  return ERR_MEM;
 801672e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8016732:	4618      	mov	r0, r3
 8016734:	375c      	adds	r7, #92	; 0x5c
 8016736:	46bd      	mov	sp, r7
 8016738:	bd90      	pop	{r4, r7, pc}
 801673a:	bf00      	nop
 801673c:	0801f9b8 	.word	0x0801f9b8
 8016740:	0801fd2c 	.word	0x0801fd2c
 8016744:	0801fa0c 	.word	0x0801fa0c

08016748 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 8016748:	b590      	push	{r4, r7, lr}
 801674a:	b08b      	sub	sp, #44	; 0x2c
 801674c:	af02      	add	r7, sp, #8
 801674e:	6078      	str	r0, [r7, #4]
 8016750:	460b      	mov	r3, r1
 8016752:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 8016754:	2300      	movs	r3, #0
 8016756:	61fb      	str	r3, [r7, #28]
 8016758:	2300      	movs	r3, #0
 801675a:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 801675c:	2300      	movs	r3, #0
 801675e:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 8016760:	687b      	ldr	r3, [r7, #4]
 8016762:	2b00      	cmp	r3, #0
 8016764:	d106      	bne.n	8016774 <tcp_split_unsent_seg+0x2c>
 8016766:	4b95      	ldr	r3, [pc, #596]	; (80169bc <tcp_split_unsent_seg+0x274>)
 8016768:	f240 324b 	movw	r2, #843	; 0x34b
 801676c:	4994      	ldr	r1, [pc, #592]	; (80169c0 <tcp_split_unsent_seg+0x278>)
 801676e:	4895      	ldr	r0, [pc, #596]	; (80169c4 <tcp_split_unsent_seg+0x27c>)
 8016770:	f004 fda2 	bl	801b2b8 <iprintf>

  useg = pcb->unsent;
 8016774:	687b      	ldr	r3, [r7, #4]
 8016776:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8016778:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 801677a:	697b      	ldr	r3, [r7, #20]
 801677c:	2b00      	cmp	r3, #0
 801677e:	d102      	bne.n	8016786 <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 8016780:	f04f 33ff 	mov.w	r3, #4294967295
 8016784:	e116      	b.n	80169b4 <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 8016786:	887b      	ldrh	r3, [r7, #2]
 8016788:	2b00      	cmp	r3, #0
 801678a:	d109      	bne.n	80167a0 <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 801678c:	4b8b      	ldr	r3, [pc, #556]	; (80169bc <tcp_split_unsent_seg+0x274>)
 801678e:	f240 3253 	movw	r2, #851	; 0x353
 8016792:	498d      	ldr	r1, [pc, #564]	; (80169c8 <tcp_split_unsent_seg+0x280>)
 8016794:	488b      	ldr	r0, [pc, #556]	; (80169c4 <tcp_split_unsent_seg+0x27c>)
 8016796:	f004 fd8f 	bl	801b2b8 <iprintf>
    return ERR_VAL;
 801679a:	f06f 0305 	mvn.w	r3, #5
 801679e:	e109      	b.n	80169b4 <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 80167a0:	697b      	ldr	r3, [r7, #20]
 80167a2:	891b      	ldrh	r3, [r3, #8]
 80167a4:	887a      	ldrh	r2, [r7, #2]
 80167a6:	429a      	cmp	r2, r3
 80167a8:	d301      	bcc.n	80167ae <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 80167aa:	2300      	movs	r3, #0
 80167ac:	e102      	b.n	80169b4 <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 80167ae:	687b      	ldr	r3, [r7, #4]
 80167b0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80167b2:	887a      	ldrh	r2, [r7, #2]
 80167b4:	429a      	cmp	r2, r3
 80167b6:	d906      	bls.n	80167c6 <tcp_split_unsent_seg+0x7e>
 80167b8:	4b80      	ldr	r3, [pc, #512]	; (80169bc <tcp_split_unsent_seg+0x274>)
 80167ba:	f240 325b 	movw	r2, #859	; 0x35b
 80167be:	4983      	ldr	r1, [pc, #524]	; (80169cc <tcp_split_unsent_seg+0x284>)
 80167c0:	4880      	ldr	r0, [pc, #512]	; (80169c4 <tcp_split_unsent_seg+0x27c>)
 80167c2:	f004 fd79 	bl	801b2b8 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 80167c6:	697b      	ldr	r3, [r7, #20]
 80167c8:	891b      	ldrh	r3, [r3, #8]
 80167ca:	2b00      	cmp	r3, #0
 80167cc:	d106      	bne.n	80167dc <tcp_split_unsent_seg+0x94>
 80167ce:	4b7b      	ldr	r3, [pc, #492]	; (80169bc <tcp_split_unsent_seg+0x274>)
 80167d0:	f44f 7257 	mov.w	r2, #860	; 0x35c
 80167d4:	497e      	ldr	r1, [pc, #504]	; (80169d0 <tcp_split_unsent_seg+0x288>)
 80167d6:	487b      	ldr	r0, [pc, #492]	; (80169c4 <tcp_split_unsent_seg+0x27c>)
 80167d8:	f004 fd6e 	bl	801b2b8 <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 80167dc:	697b      	ldr	r3, [r7, #20]
 80167de:	7a9b      	ldrb	r3, [r3, #10]
 80167e0:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 80167e2:	7bfb      	ldrb	r3, [r7, #15]
 80167e4:	009b      	lsls	r3, r3, #2
 80167e6:	b2db      	uxtb	r3, r3
 80167e8:	f003 0304 	and.w	r3, r3, #4
 80167ec:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 80167ee:	697b      	ldr	r3, [r7, #20]
 80167f0:	891a      	ldrh	r2, [r3, #8]
 80167f2:	887b      	ldrh	r3, [r7, #2]
 80167f4:	1ad3      	subs	r3, r2, r3
 80167f6:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 80167f8:	7bbb      	ldrb	r3, [r7, #14]
 80167fa:	b29a      	uxth	r2, r3
 80167fc:	89bb      	ldrh	r3, [r7, #12]
 80167fe:	4413      	add	r3, r2
 8016800:	b29b      	uxth	r3, r3
 8016802:	f44f 7220 	mov.w	r2, #640	; 0x280
 8016806:	4619      	mov	r1, r3
 8016808:	2036      	movs	r0, #54	; 0x36
 801680a:	f7fa fbcf 	bl	8010fac <pbuf_alloc>
 801680e:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8016810:	693b      	ldr	r3, [r7, #16]
 8016812:	2b00      	cmp	r3, #0
 8016814:	f000 80b7 	beq.w	8016986 <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 8016818:	697b      	ldr	r3, [r7, #20]
 801681a:	685b      	ldr	r3, [r3, #4]
 801681c:	891a      	ldrh	r2, [r3, #8]
 801681e:	697b      	ldr	r3, [r7, #20]
 8016820:	891b      	ldrh	r3, [r3, #8]
 8016822:	1ad3      	subs	r3, r2, r3
 8016824:	b29a      	uxth	r2, r3
 8016826:	887b      	ldrh	r3, [r7, #2]
 8016828:	4413      	add	r3, r2
 801682a:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 801682c:	697b      	ldr	r3, [r7, #20]
 801682e:	6858      	ldr	r0, [r3, #4]
 8016830:	693b      	ldr	r3, [r7, #16]
 8016832:	685a      	ldr	r2, [r3, #4]
 8016834:	7bbb      	ldrb	r3, [r7, #14]
 8016836:	18d1      	adds	r1, r2, r3
 8016838:	897b      	ldrh	r3, [r7, #10]
 801683a:	89ba      	ldrh	r2, [r7, #12]
 801683c:	f7fb f884 	bl	8011948 <pbuf_copy_partial>
 8016840:	4603      	mov	r3, r0
 8016842:	461a      	mov	r2, r3
 8016844:	89bb      	ldrh	r3, [r7, #12]
 8016846:	4293      	cmp	r3, r2
 8016848:	f040 809f 	bne.w	801698a <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 801684c:	697b      	ldr	r3, [r7, #20]
 801684e:	68db      	ldr	r3, [r3, #12]
 8016850:	899b      	ldrh	r3, [r3, #12]
 8016852:	b29b      	uxth	r3, r3
 8016854:	4618      	mov	r0, r3
 8016856:	f7f9 fa89 	bl	800fd6c <lwip_htons>
 801685a:	4603      	mov	r3, r0
 801685c:	b2db      	uxtb	r3, r3
 801685e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8016862:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 8016864:	2300      	movs	r3, #0
 8016866:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 8016868:	7efb      	ldrb	r3, [r7, #27]
 801686a:	f003 0308 	and.w	r3, r3, #8
 801686e:	2b00      	cmp	r3, #0
 8016870:	d007      	beq.n	8016882 <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 8016872:	7efb      	ldrb	r3, [r7, #27]
 8016874:	f023 0308 	bic.w	r3, r3, #8
 8016878:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 801687a:	7ebb      	ldrb	r3, [r7, #26]
 801687c:	f043 0308 	orr.w	r3, r3, #8
 8016880:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 8016882:	7efb      	ldrb	r3, [r7, #27]
 8016884:	f003 0301 	and.w	r3, r3, #1
 8016888:	2b00      	cmp	r3, #0
 801688a:	d007      	beq.n	801689c <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 801688c:	7efb      	ldrb	r3, [r7, #27]
 801688e:	f023 0301 	bic.w	r3, r3, #1
 8016892:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 8016894:	7ebb      	ldrb	r3, [r7, #26]
 8016896:	f043 0301 	orr.w	r3, r3, #1
 801689a:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 801689c:	697b      	ldr	r3, [r7, #20]
 801689e:	68db      	ldr	r3, [r3, #12]
 80168a0:	685b      	ldr	r3, [r3, #4]
 80168a2:	4618      	mov	r0, r3
 80168a4:	f7f9 fa77 	bl	800fd96 <lwip_htonl>
 80168a8:	4602      	mov	r2, r0
 80168aa:	887b      	ldrh	r3, [r7, #2]
 80168ac:	18d1      	adds	r1, r2, r3
 80168ae:	7eba      	ldrb	r2, [r7, #26]
 80168b0:	7bfb      	ldrb	r3, [r7, #15]
 80168b2:	9300      	str	r3, [sp, #0]
 80168b4:	460b      	mov	r3, r1
 80168b6:	6939      	ldr	r1, [r7, #16]
 80168b8:	6878      	ldr	r0, [r7, #4]
 80168ba:	f7ff fa4f 	bl	8015d5c <tcp_create_segment>
 80168be:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 80168c0:	69fb      	ldr	r3, [r7, #28]
 80168c2:	2b00      	cmp	r3, #0
 80168c4:	d063      	beq.n	801698e <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 80168c6:	697b      	ldr	r3, [r7, #20]
 80168c8:	685b      	ldr	r3, [r3, #4]
 80168ca:	4618      	mov	r0, r3
 80168cc:	f7fa feda 	bl	8011684 <pbuf_clen>
 80168d0:	4603      	mov	r3, r0
 80168d2:	461a      	mov	r2, r3
 80168d4:	687b      	ldr	r3, [r7, #4]
 80168d6:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80168da:	1a9b      	subs	r3, r3, r2
 80168dc:	b29a      	uxth	r2, r3
 80168de:	687b      	ldr	r3, [r7, #4]
 80168e0:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 80168e4:	697b      	ldr	r3, [r7, #20]
 80168e6:	6858      	ldr	r0, [r3, #4]
 80168e8:	697b      	ldr	r3, [r7, #20]
 80168ea:	685b      	ldr	r3, [r3, #4]
 80168ec:	891a      	ldrh	r2, [r3, #8]
 80168ee:	89bb      	ldrh	r3, [r7, #12]
 80168f0:	1ad3      	subs	r3, r2, r3
 80168f2:	b29b      	uxth	r3, r3
 80168f4:	4619      	mov	r1, r3
 80168f6:	f7fa fcb9 	bl	801126c <pbuf_realloc>
  useg->len -= remainder;
 80168fa:	697b      	ldr	r3, [r7, #20]
 80168fc:	891a      	ldrh	r2, [r3, #8]
 80168fe:	89bb      	ldrh	r3, [r7, #12]
 8016900:	1ad3      	subs	r3, r2, r3
 8016902:	b29a      	uxth	r2, r3
 8016904:	697b      	ldr	r3, [r7, #20]
 8016906:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 8016908:	697b      	ldr	r3, [r7, #20]
 801690a:	68db      	ldr	r3, [r3, #12]
 801690c:	899b      	ldrh	r3, [r3, #12]
 801690e:	b29c      	uxth	r4, r3
 8016910:	7efb      	ldrb	r3, [r7, #27]
 8016912:	b29b      	uxth	r3, r3
 8016914:	4618      	mov	r0, r3
 8016916:	f7f9 fa29 	bl	800fd6c <lwip_htons>
 801691a:	4603      	mov	r3, r0
 801691c:	461a      	mov	r2, r3
 801691e:	697b      	ldr	r3, [r7, #20]
 8016920:	68db      	ldr	r3, [r3, #12]
 8016922:	4322      	orrs	r2, r4
 8016924:	b292      	uxth	r2, r2
 8016926:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 8016928:	697b      	ldr	r3, [r7, #20]
 801692a:	685b      	ldr	r3, [r3, #4]
 801692c:	4618      	mov	r0, r3
 801692e:	f7fa fea9 	bl	8011684 <pbuf_clen>
 8016932:	4603      	mov	r3, r0
 8016934:	461a      	mov	r2, r3
 8016936:	687b      	ldr	r3, [r7, #4]
 8016938:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801693c:	4413      	add	r3, r2
 801693e:	b29a      	uxth	r2, r3
 8016940:	687b      	ldr	r3, [r7, #4]
 8016942:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8016946:	69fb      	ldr	r3, [r7, #28]
 8016948:	685b      	ldr	r3, [r3, #4]
 801694a:	4618      	mov	r0, r3
 801694c:	f7fa fe9a 	bl	8011684 <pbuf_clen>
 8016950:	4603      	mov	r3, r0
 8016952:	461a      	mov	r2, r3
 8016954:	687b      	ldr	r3, [r7, #4]
 8016956:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801695a:	4413      	add	r3, r2
 801695c:	b29a      	uxth	r2, r3
 801695e:	687b      	ldr	r3, [r7, #4]
 8016960:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 8016964:	697b      	ldr	r3, [r7, #20]
 8016966:	681a      	ldr	r2, [r3, #0]
 8016968:	69fb      	ldr	r3, [r7, #28]
 801696a:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 801696c:	697b      	ldr	r3, [r7, #20]
 801696e:	69fa      	ldr	r2, [r7, #28]
 8016970:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 8016972:	69fb      	ldr	r3, [r7, #28]
 8016974:	681b      	ldr	r3, [r3, #0]
 8016976:	2b00      	cmp	r3, #0
 8016978:	d103      	bne.n	8016982 <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 801697a:	687b      	ldr	r3, [r7, #4]
 801697c:	2200      	movs	r2, #0
 801697e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 8016982:	2300      	movs	r3, #0
 8016984:	e016      	b.n	80169b4 <tcp_split_unsent_seg+0x26c>
    goto memerr;
 8016986:	bf00      	nop
 8016988:	e002      	b.n	8016990 <tcp_split_unsent_seg+0x248>
    goto memerr;
 801698a:	bf00      	nop
 801698c:	e000      	b.n	8016990 <tcp_split_unsent_seg+0x248>
    goto memerr;
 801698e:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 8016990:	69fb      	ldr	r3, [r7, #28]
 8016992:	2b00      	cmp	r3, #0
 8016994:	d006      	beq.n	80169a4 <tcp_split_unsent_seg+0x25c>
 8016996:	4b09      	ldr	r3, [pc, #36]	; (80169bc <tcp_split_unsent_seg+0x274>)
 8016998:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 801699c:	490d      	ldr	r1, [pc, #52]	; (80169d4 <tcp_split_unsent_seg+0x28c>)
 801699e:	4809      	ldr	r0, [pc, #36]	; (80169c4 <tcp_split_unsent_seg+0x27c>)
 80169a0:	f004 fc8a 	bl	801b2b8 <iprintf>
  if (p != NULL) {
 80169a4:	693b      	ldr	r3, [r7, #16]
 80169a6:	2b00      	cmp	r3, #0
 80169a8:	d002      	beq.n	80169b0 <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 80169aa:	6938      	ldr	r0, [r7, #16]
 80169ac:	f7fa fde2 	bl	8011574 <pbuf_free>
  }

  return ERR_MEM;
 80169b0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80169b4:	4618      	mov	r0, r3
 80169b6:	3724      	adds	r7, #36	; 0x24
 80169b8:	46bd      	mov	sp, r7
 80169ba:	bd90      	pop	{r4, r7, pc}
 80169bc:	0801f9b8 	.word	0x0801f9b8
 80169c0:	0801fd4c 	.word	0x0801fd4c
 80169c4:	0801fa0c 	.word	0x0801fa0c
 80169c8:	0801fd70 	.word	0x0801fd70
 80169cc:	0801fd94 	.word	0x0801fd94
 80169d0:	0801fda4 	.word	0x0801fda4
 80169d4:	0801fdb4 	.word	0x0801fdb4

080169d8 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 80169d8:	b590      	push	{r4, r7, lr}
 80169da:	b085      	sub	sp, #20
 80169dc:	af00      	add	r7, sp, #0
 80169de:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 80169e0:	687b      	ldr	r3, [r7, #4]
 80169e2:	2b00      	cmp	r3, #0
 80169e4:	d106      	bne.n	80169f4 <tcp_send_fin+0x1c>
 80169e6:	4b21      	ldr	r3, [pc, #132]	; (8016a6c <tcp_send_fin+0x94>)
 80169e8:	f240 32eb 	movw	r2, #1003	; 0x3eb
 80169ec:	4920      	ldr	r1, [pc, #128]	; (8016a70 <tcp_send_fin+0x98>)
 80169ee:	4821      	ldr	r0, [pc, #132]	; (8016a74 <tcp_send_fin+0x9c>)
 80169f0:	f004 fc62 	bl	801b2b8 <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 80169f4:	687b      	ldr	r3, [r7, #4]
 80169f6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80169f8:	2b00      	cmp	r3, #0
 80169fa:	d02e      	beq.n	8016a5a <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 80169fc:	687b      	ldr	r3, [r7, #4]
 80169fe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8016a00:	60fb      	str	r3, [r7, #12]
 8016a02:	e002      	b.n	8016a0a <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 8016a04:	68fb      	ldr	r3, [r7, #12]
 8016a06:	681b      	ldr	r3, [r3, #0]
 8016a08:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8016a0a:	68fb      	ldr	r3, [r7, #12]
 8016a0c:	681b      	ldr	r3, [r3, #0]
 8016a0e:	2b00      	cmp	r3, #0
 8016a10:	d1f8      	bne.n	8016a04 <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 8016a12:	68fb      	ldr	r3, [r7, #12]
 8016a14:	68db      	ldr	r3, [r3, #12]
 8016a16:	899b      	ldrh	r3, [r3, #12]
 8016a18:	b29b      	uxth	r3, r3
 8016a1a:	4618      	mov	r0, r3
 8016a1c:	f7f9 f9a6 	bl	800fd6c <lwip_htons>
 8016a20:	4603      	mov	r3, r0
 8016a22:	b2db      	uxtb	r3, r3
 8016a24:	f003 0307 	and.w	r3, r3, #7
 8016a28:	2b00      	cmp	r3, #0
 8016a2a:	d116      	bne.n	8016a5a <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 8016a2c:	68fb      	ldr	r3, [r7, #12]
 8016a2e:	68db      	ldr	r3, [r3, #12]
 8016a30:	899b      	ldrh	r3, [r3, #12]
 8016a32:	b29c      	uxth	r4, r3
 8016a34:	2001      	movs	r0, #1
 8016a36:	f7f9 f999 	bl	800fd6c <lwip_htons>
 8016a3a:	4603      	mov	r3, r0
 8016a3c:	461a      	mov	r2, r3
 8016a3e:	68fb      	ldr	r3, [r7, #12]
 8016a40:	68db      	ldr	r3, [r3, #12]
 8016a42:	4322      	orrs	r2, r4
 8016a44:	b292      	uxth	r2, r2
 8016a46:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 8016a48:	687b      	ldr	r3, [r7, #4]
 8016a4a:	8b5b      	ldrh	r3, [r3, #26]
 8016a4c:	f043 0320 	orr.w	r3, r3, #32
 8016a50:	b29a      	uxth	r2, r3
 8016a52:	687b      	ldr	r3, [r7, #4]
 8016a54:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 8016a56:	2300      	movs	r3, #0
 8016a58:	e004      	b.n	8016a64 <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 8016a5a:	2101      	movs	r1, #1
 8016a5c:	6878      	ldr	r0, [r7, #4]
 8016a5e:	f000 f80b 	bl	8016a78 <tcp_enqueue_flags>
 8016a62:	4603      	mov	r3, r0
}
 8016a64:	4618      	mov	r0, r3
 8016a66:	3714      	adds	r7, #20
 8016a68:	46bd      	mov	sp, r7
 8016a6a:	bd90      	pop	{r4, r7, pc}
 8016a6c:	0801f9b8 	.word	0x0801f9b8
 8016a70:	0801fdc0 	.word	0x0801fdc0
 8016a74:	0801fa0c 	.word	0x0801fa0c

08016a78 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 8016a78:	b580      	push	{r7, lr}
 8016a7a:	b08a      	sub	sp, #40	; 0x28
 8016a7c:	af02      	add	r7, sp, #8
 8016a7e:	6078      	str	r0, [r7, #4]
 8016a80:	460b      	mov	r3, r1
 8016a82:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 8016a84:	2300      	movs	r3, #0
 8016a86:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 8016a88:	2300      	movs	r3, #0
 8016a8a:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 8016a8c:	78fb      	ldrb	r3, [r7, #3]
 8016a8e:	f003 0303 	and.w	r3, r3, #3
 8016a92:	2b00      	cmp	r3, #0
 8016a94:	d106      	bne.n	8016aa4 <tcp_enqueue_flags+0x2c>
 8016a96:	4b67      	ldr	r3, [pc, #412]	; (8016c34 <tcp_enqueue_flags+0x1bc>)
 8016a98:	f240 4211 	movw	r2, #1041	; 0x411
 8016a9c:	4966      	ldr	r1, [pc, #408]	; (8016c38 <tcp_enqueue_flags+0x1c0>)
 8016a9e:	4867      	ldr	r0, [pc, #412]	; (8016c3c <tcp_enqueue_flags+0x1c4>)
 8016aa0:	f004 fc0a 	bl	801b2b8 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 8016aa4:	687b      	ldr	r3, [r7, #4]
 8016aa6:	2b00      	cmp	r3, #0
 8016aa8:	d106      	bne.n	8016ab8 <tcp_enqueue_flags+0x40>
 8016aaa:	4b62      	ldr	r3, [pc, #392]	; (8016c34 <tcp_enqueue_flags+0x1bc>)
 8016aac:	f240 4213 	movw	r2, #1043	; 0x413
 8016ab0:	4963      	ldr	r1, [pc, #396]	; (8016c40 <tcp_enqueue_flags+0x1c8>)
 8016ab2:	4862      	ldr	r0, [pc, #392]	; (8016c3c <tcp_enqueue_flags+0x1c4>)
 8016ab4:	f004 fc00 	bl	801b2b8 <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 8016ab8:	78fb      	ldrb	r3, [r7, #3]
 8016aba:	f003 0302 	and.w	r3, r3, #2
 8016abe:	2b00      	cmp	r3, #0
 8016ac0:	d001      	beq.n	8016ac6 <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 8016ac2:	2301      	movs	r3, #1
 8016ac4:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8016ac6:	7ffb      	ldrb	r3, [r7, #31]
 8016ac8:	009b      	lsls	r3, r3, #2
 8016aca:	b2db      	uxtb	r3, r3
 8016acc:	f003 0304 	and.w	r3, r3, #4
 8016ad0:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 8016ad2:	7dfb      	ldrb	r3, [r7, #23]
 8016ad4:	b29b      	uxth	r3, r3
 8016ad6:	f44f 7220 	mov.w	r2, #640	; 0x280
 8016ada:	4619      	mov	r1, r3
 8016adc:	2036      	movs	r0, #54	; 0x36
 8016ade:	f7fa fa65 	bl	8010fac <pbuf_alloc>
 8016ae2:	6138      	str	r0, [r7, #16]
 8016ae4:	693b      	ldr	r3, [r7, #16]
 8016ae6:	2b00      	cmp	r3, #0
 8016ae8:	d109      	bne.n	8016afe <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8016aea:	687b      	ldr	r3, [r7, #4]
 8016aec:	8b5b      	ldrh	r3, [r3, #26]
 8016aee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8016af2:	b29a      	uxth	r2, r3
 8016af4:	687b      	ldr	r3, [r7, #4]
 8016af6:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8016af8:	f04f 33ff 	mov.w	r3, #4294967295
 8016afc:	e095      	b.n	8016c2a <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 8016afe:	693b      	ldr	r3, [r7, #16]
 8016b00:	895a      	ldrh	r2, [r3, #10]
 8016b02:	7dfb      	ldrb	r3, [r7, #23]
 8016b04:	b29b      	uxth	r3, r3
 8016b06:	429a      	cmp	r2, r3
 8016b08:	d206      	bcs.n	8016b18 <tcp_enqueue_flags+0xa0>
 8016b0a:	4b4a      	ldr	r3, [pc, #296]	; (8016c34 <tcp_enqueue_flags+0x1bc>)
 8016b0c:	f240 4239 	movw	r2, #1081	; 0x439
 8016b10:	494c      	ldr	r1, [pc, #304]	; (8016c44 <tcp_enqueue_flags+0x1cc>)
 8016b12:	484a      	ldr	r0, [pc, #296]	; (8016c3c <tcp_enqueue_flags+0x1c4>)
 8016b14:	f004 fbd0 	bl	801b2b8 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 8016b18:	687b      	ldr	r3, [r7, #4]
 8016b1a:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 8016b1c:	78fa      	ldrb	r2, [r7, #3]
 8016b1e:	7ffb      	ldrb	r3, [r7, #31]
 8016b20:	9300      	str	r3, [sp, #0]
 8016b22:	460b      	mov	r3, r1
 8016b24:	6939      	ldr	r1, [r7, #16]
 8016b26:	6878      	ldr	r0, [r7, #4]
 8016b28:	f7ff f918 	bl	8015d5c <tcp_create_segment>
 8016b2c:	60f8      	str	r0, [r7, #12]
 8016b2e:	68fb      	ldr	r3, [r7, #12]
 8016b30:	2b00      	cmp	r3, #0
 8016b32:	d109      	bne.n	8016b48 <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8016b34:	687b      	ldr	r3, [r7, #4]
 8016b36:	8b5b      	ldrh	r3, [r3, #26]
 8016b38:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8016b3c:	b29a      	uxth	r2, r3
 8016b3e:	687b      	ldr	r3, [r7, #4]
 8016b40:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8016b42:	f04f 33ff 	mov.w	r3, #4294967295
 8016b46:	e070      	b.n	8016c2a <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 8016b48:	68fb      	ldr	r3, [r7, #12]
 8016b4a:	68db      	ldr	r3, [r3, #12]
 8016b4c:	f003 0303 	and.w	r3, r3, #3
 8016b50:	2b00      	cmp	r3, #0
 8016b52:	d006      	beq.n	8016b62 <tcp_enqueue_flags+0xea>
 8016b54:	4b37      	ldr	r3, [pc, #220]	; (8016c34 <tcp_enqueue_flags+0x1bc>)
 8016b56:	f240 4242 	movw	r2, #1090	; 0x442
 8016b5a:	493b      	ldr	r1, [pc, #236]	; (8016c48 <tcp_enqueue_flags+0x1d0>)
 8016b5c:	4837      	ldr	r0, [pc, #220]	; (8016c3c <tcp_enqueue_flags+0x1c4>)
 8016b5e:	f004 fbab 	bl	801b2b8 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 8016b62:	68fb      	ldr	r3, [r7, #12]
 8016b64:	891b      	ldrh	r3, [r3, #8]
 8016b66:	2b00      	cmp	r3, #0
 8016b68:	d006      	beq.n	8016b78 <tcp_enqueue_flags+0x100>
 8016b6a:	4b32      	ldr	r3, [pc, #200]	; (8016c34 <tcp_enqueue_flags+0x1bc>)
 8016b6c:	f240 4243 	movw	r2, #1091	; 0x443
 8016b70:	4936      	ldr	r1, [pc, #216]	; (8016c4c <tcp_enqueue_flags+0x1d4>)
 8016b72:	4832      	ldr	r0, [pc, #200]	; (8016c3c <tcp_enqueue_flags+0x1c4>)
 8016b74:	f004 fba0 	bl	801b2b8 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 8016b78:	687b      	ldr	r3, [r7, #4]
 8016b7a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8016b7c:	2b00      	cmp	r3, #0
 8016b7e:	d103      	bne.n	8016b88 <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 8016b80:	687b      	ldr	r3, [r7, #4]
 8016b82:	68fa      	ldr	r2, [r7, #12]
 8016b84:	66da      	str	r2, [r3, #108]	; 0x6c
 8016b86:	e00d      	b.n	8016ba4 <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 8016b88:	687b      	ldr	r3, [r7, #4]
 8016b8a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8016b8c:	61bb      	str	r3, [r7, #24]
 8016b8e:	e002      	b.n	8016b96 <tcp_enqueue_flags+0x11e>
 8016b90:	69bb      	ldr	r3, [r7, #24]
 8016b92:	681b      	ldr	r3, [r3, #0]
 8016b94:	61bb      	str	r3, [r7, #24]
 8016b96:	69bb      	ldr	r3, [r7, #24]
 8016b98:	681b      	ldr	r3, [r3, #0]
 8016b9a:	2b00      	cmp	r3, #0
 8016b9c:	d1f8      	bne.n	8016b90 <tcp_enqueue_flags+0x118>
    useg->next = seg;
 8016b9e:	69bb      	ldr	r3, [r7, #24]
 8016ba0:	68fa      	ldr	r2, [r7, #12]
 8016ba2:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 8016ba4:	687b      	ldr	r3, [r7, #4]
 8016ba6:	2200      	movs	r2, #0
 8016ba8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 8016bac:	78fb      	ldrb	r3, [r7, #3]
 8016bae:	f003 0302 	and.w	r3, r3, #2
 8016bb2:	2b00      	cmp	r3, #0
 8016bb4:	d104      	bne.n	8016bc0 <tcp_enqueue_flags+0x148>
 8016bb6:	78fb      	ldrb	r3, [r7, #3]
 8016bb8:	f003 0301 	and.w	r3, r3, #1
 8016bbc:	2b00      	cmp	r3, #0
 8016bbe:	d004      	beq.n	8016bca <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 8016bc0:	687b      	ldr	r3, [r7, #4]
 8016bc2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8016bc4:	1c5a      	adds	r2, r3, #1
 8016bc6:	687b      	ldr	r3, [r7, #4]
 8016bc8:	65da      	str	r2, [r3, #92]	; 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 8016bca:	78fb      	ldrb	r3, [r7, #3]
 8016bcc:	f003 0301 	and.w	r3, r3, #1
 8016bd0:	2b00      	cmp	r3, #0
 8016bd2:	d006      	beq.n	8016be2 <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 8016bd4:	687b      	ldr	r3, [r7, #4]
 8016bd6:	8b5b      	ldrh	r3, [r3, #26]
 8016bd8:	f043 0320 	orr.w	r3, r3, #32
 8016bdc:	b29a      	uxth	r2, r3
 8016bde:	687b      	ldr	r3, [r7, #4]
 8016be0:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8016be2:	68fb      	ldr	r3, [r7, #12]
 8016be4:	685b      	ldr	r3, [r3, #4]
 8016be6:	4618      	mov	r0, r3
 8016be8:	f7fa fd4c 	bl	8011684 <pbuf_clen>
 8016bec:	4603      	mov	r3, r0
 8016bee:	461a      	mov	r2, r3
 8016bf0:	687b      	ldr	r3, [r7, #4]
 8016bf2:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8016bf6:	4413      	add	r3, r2
 8016bf8:	b29a      	uxth	r2, r3
 8016bfa:	687b      	ldr	r3, [r7, #4]
 8016bfc:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 8016c00:	687b      	ldr	r3, [r7, #4]
 8016c02:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8016c06:	2b00      	cmp	r3, #0
 8016c08:	d00e      	beq.n	8016c28 <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 8016c0a:	687b      	ldr	r3, [r7, #4]
 8016c0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8016c0e:	2b00      	cmp	r3, #0
 8016c10:	d10a      	bne.n	8016c28 <tcp_enqueue_flags+0x1b0>
 8016c12:	687b      	ldr	r3, [r7, #4]
 8016c14:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8016c16:	2b00      	cmp	r3, #0
 8016c18:	d106      	bne.n	8016c28 <tcp_enqueue_flags+0x1b0>
 8016c1a:	4b06      	ldr	r3, [pc, #24]	; (8016c34 <tcp_enqueue_flags+0x1bc>)
 8016c1c:	f240 4265 	movw	r2, #1125	; 0x465
 8016c20:	490b      	ldr	r1, [pc, #44]	; (8016c50 <tcp_enqueue_flags+0x1d8>)
 8016c22:	4806      	ldr	r0, [pc, #24]	; (8016c3c <tcp_enqueue_flags+0x1c4>)
 8016c24:	f004 fb48 	bl	801b2b8 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 8016c28:	2300      	movs	r3, #0
}
 8016c2a:	4618      	mov	r0, r3
 8016c2c:	3720      	adds	r7, #32
 8016c2e:	46bd      	mov	sp, r7
 8016c30:	bd80      	pop	{r7, pc}
 8016c32:	bf00      	nop
 8016c34:	0801f9b8 	.word	0x0801f9b8
 8016c38:	0801fddc 	.word	0x0801fddc
 8016c3c:	0801fa0c 	.word	0x0801fa0c
 8016c40:	0801fe34 	.word	0x0801fe34
 8016c44:	0801fe54 	.word	0x0801fe54
 8016c48:	0801fe90 	.word	0x0801fe90
 8016c4c:	0801fea8 	.word	0x0801fea8
 8016c50:	0801fed4 	.word	0x0801fed4

08016c54 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 8016c54:	b5b0      	push	{r4, r5, r7, lr}
 8016c56:	b08a      	sub	sp, #40	; 0x28
 8016c58:	af00      	add	r7, sp, #0
 8016c5a:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 8016c5c:	687b      	ldr	r3, [r7, #4]
 8016c5e:	2b00      	cmp	r3, #0
 8016c60:	d106      	bne.n	8016c70 <tcp_output+0x1c>
 8016c62:	4b8a      	ldr	r3, [pc, #552]	; (8016e8c <tcp_output+0x238>)
 8016c64:	f240 42e1 	movw	r2, #1249	; 0x4e1
 8016c68:	4989      	ldr	r1, [pc, #548]	; (8016e90 <tcp_output+0x23c>)
 8016c6a:	488a      	ldr	r0, [pc, #552]	; (8016e94 <tcp_output+0x240>)
 8016c6c:	f004 fb24 	bl	801b2b8 <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 8016c70:	687b      	ldr	r3, [r7, #4]
 8016c72:	7d1b      	ldrb	r3, [r3, #20]
 8016c74:	2b01      	cmp	r3, #1
 8016c76:	d106      	bne.n	8016c86 <tcp_output+0x32>
 8016c78:	4b84      	ldr	r3, [pc, #528]	; (8016e8c <tcp_output+0x238>)
 8016c7a:	f240 42e3 	movw	r2, #1251	; 0x4e3
 8016c7e:	4986      	ldr	r1, [pc, #536]	; (8016e98 <tcp_output+0x244>)
 8016c80:	4884      	ldr	r0, [pc, #528]	; (8016e94 <tcp_output+0x240>)
 8016c82:	f004 fb19 	bl	801b2b8 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 8016c86:	4b85      	ldr	r3, [pc, #532]	; (8016e9c <tcp_output+0x248>)
 8016c88:	681b      	ldr	r3, [r3, #0]
 8016c8a:	687a      	ldr	r2, [r7, #4]
 8016c8c:	429a      	cmp	r2, r3
 8016c8e:	d101      	bne.n	8016c94 <tcp_output+0x40>
    return ERR_OK;
 8016c90:	2300      	movs	r3, #0
 8016c92:	e1ce      	b.n	8017032 <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 8016c94:	687b      	ldr	r3, [r7, #4]
 8016c96:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8016c9a:	687b      	ldr	r3, [r7, #4]
 8016c9c:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8016ca0:	4293      	cmp	r3, r2
 8016ca2:	bf28      	it	cs
 8016ca4:	4613      	movcs	r3, r2
 8016ca6:	b29b      	uxth	r3, r3
 8016ca8:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 8016caa:	687b      	ldr	r3, [r7, #4]
 8016cac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8016cae:	627b      	str	r3, [r7, #36]	; 0x24

  if (seg == NULL) {
 8016cb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016cb2:	2b00      	cmp	r3, #0
 8016cb4:	d10b      	bne.n	8016cce <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 8016cb6:	687b      	ldr	r3, [r7, #4]
 8016cb8:	8b5b      	ldrh	r3, [r3, #26]
 8016cba:	f003 0302 	and.w	r3, r3, #2
 8016cbe:	2b00      	cmp	r3, #0
 8016cc0:	f000 81aa 	beq.w	8017018 <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 8016cc4:	6878      	ldr	r0, [r7, #4]
 8016cc6:	f000 fdcb 	bl	8017860 <tcp_send_empty_ack>
 8016cca:	4603      	mov	r3, r0
 8016ccc:	e1b1      	b.n	8017032 <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 8016cce:	6879      	ldr	r1, [r7, #4]
 8016cd0:	687b      	ldr	r3, [r7, #4]
 8016cd2:	3304      	adds	r3, #4
 8016cd4:	461a      	mov	r2, r3
 8016cd6:	6878      	ldr	r0, [r7, #4]
 8016cd8:	f7ff f824 	bl	8015d24 <tcp_route>
 8016cdc:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 8016cde:	697b      	ldr	r3, [r7, #20]
 8016ce0:	2b00      	cmp	r3, #0
 8016ce2:	d102      	bne.n	8016cea <tcp_output+0x96>
    return ERR_RTE;
 8016ce4:	f06f 0303 	mvn.w	r3, #3
 8016ce8:	e1a3      	b.n	8017032 <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 8016cea:	687b      	ldr	r3, [r7, #4]
 8016cec:	2b00      	cmp	r3, #0
 8016cee:	d003      	beq.n	8016cf8 <tcp_output+0xa4>
 8016cf0:	687b      	ldr	r3, [r7, #4]
 8016cf2:	681b      	ldr	r3, [r3, #0]
 8016cf4:	2b00      	cmp	r3, #0
 8016cf6:	d111      	bne.n	8016d1c <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 8016cf8:	697b      	ldr	r3, [r7, #20]
 8016cfa:	2b00      	cmp	r3, #0
 8016cfc:	d002      	beq.n	8016d04 <tcp_output+0xb0>
 8016cfe:	697b      	ldr	r3, [r7, #20]
 8016d00:	3304      	adds	r3, #4
 8016d02:	e000      	b.n	8016d06 <tcp_output+0xb2>
 8016d04:	2300      	movs	r3, #0
 8016d06:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 8016d08:	693b      	ldr	r3, [r7, #16]
 8016d0a:	2b00      	cmp	r3, #0
 8016d0c:	d102      	bne.n	8016d14 <tcp_output+0xc0>
      return ERR_RTE;
 8016d0e:	f06f 0303 	mvn.w	r3, #3
 8016d12:	e18e      	b.n	8017032 <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 8016d14:	693b      	ldr	r3, [r7, #16]
 8016d16:	681a      	ldr	r2, [r3, #0]
 8016d18:	687b      	ldr	r3, [r7, #4]
 8016d1a:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 8016d1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016d1e:	68db      	ldr	r3, [r3, #12]
 8016d20:	685b      	ldr	r3, [r3, #4]
 8016d22:	4618      	mov	r0, r3
 8016d24:	f7f9 f837 	bl	800fd96 <lwip_htonl>
 8016d28:	4602      	mov	r2, r0
 8016d2a:	687b      	ldr	r3, [r7, #4]
 8016d2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8016d2e:	1ad3      	subs	r3, r2, r3
 8016d30:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8016d32:	8912      	ldrh	r2, [r2, #8]
 8016d34:	4413      	add	r3, r2
 8016d36:	69ba      	ldr	r2, [r7, #24]
 8016d38:	429a      	cmp	r2, r3
 8016d3a:	d227      	bcs.n	8016d8c <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 8016d3c:	687b      	ldr	r3, [r7, #4]
 8016d3e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8016d42:	461a      	mov	r2, r3
 8016d44:	69bb      	ldr	r3, [r7, #24]
 8016d46:	4293      	cmp	r3, r2
 8016d48:	d114      	bne.n	8016d74 <tcp_output+0x120>
 8016d4a:	687b      	ldr	r3, [r7, #4]
 8016d4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8016d4e:	2b00      	cmp	r3, #0
 8016d50:	d110      	bne.n	8016d74 <tcp_output+0x120>
 8016d52:	687b      	ldr	r3, [r7, #4]
 8016d54:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8016d58:	2b00      	cmp	r3, #0
 8016d5a:	d10b      	bne.n	8016d74 <tcp_output+0x120>
      pcb->persist_cnt = 0;
 8016d5c:	687b      	ldr	r3, [r7, #4]
 8016d5e:	2200      	movs	r2, #0
 8016d60:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
      pcb->persist_backoff = 1;
 8016d64:	687b      	ldr	r3, [r7, #4]
 8016d66:	2201      	movs	r2, #1
 8016d68:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
      pcb->persist_probe = 0;
 8016d6c:	687b      	ldr	r3, [r7, #4]
 8016d6e:	2200      	movs	r2, #0
 8016d70:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 8016d74:	687b      	ldr	r3, [r7, #4]
 8016d76:	8b5b      	ldrh	r3, [r3, #26]
 8016d78:	f003 0302 	and.w	r3, r3, #2
 8016d7c:	2b00      	cmp	r3, #0
 8016d7e:	f000 814d 	beq.w	801701c <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 8016d82:	6878      	ldr	r0, [r7, #4]
 8016d84:	f000 fd6c 	bl	8017860 <tcp_send_empty_ack>
 8016d88:	4603      	mov	r3, r0
 8016d8a:	e152      	b.n	8017032 <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 8016d8c:	687b      	ldr	r3, [r7, #4]
 8016d8e:	2200      	movs	r2, #0
 8016d90:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 8016d94:	687b      	ldr	r3, [r7, #4]
 8016d96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8016d98:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 8016d9a:	6a3b      	ldr	r3, [r7, #32]
 8016d9c:	2b00      	cmp	r3, #0
 8016d9e:	f000 811c 	beq.w	8016fda <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 8016da2:	e002      	b.n	8016daa <tcp_output+0x156>
 8016da4:	6a3b      	ldr	r3, [r7, #32]
 8016da6:	681b      	ldr	r3, [r3, #0]
 8016da8:	623b      	str	r3, [r7, #32]
 8016daa:	6a3b      	ldr	r3, [r7, #32]
 8016dac:	681b      	ldr	r3, [r3, #0]
 8016dae:	2b00      	cmp	r3, #0
 8016db0:	d1f8      	bne.n	8016da4 <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 8016db2:	e112      	b.n	8016fda <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 8016db4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016db6:	68db      	ldr	r3, [r3, #12]
 8016db8:	899b      	ldrh	r3, [r3, #12]
 8016dba:	b29b      	uxth	r3, r3
 8016dbc:	4618      	mov	r0, r3
 8016dbe:	f7f8 ffd5 	bl	800fd6c <lwip_htons>
 8016dc2:	4603      	mov	r3, r0
 8016dc4:	b2db      	uxtb	r3, r3
 8016dc6:	f003 0304 	and.w	r3, r3, #4
 8016dca:	2b00      	cmp	r3, #0
 8016dcc:	d006      	beq.n	8016ddc <tcp_output+0x188>
 8016dce:	4b2f      	ldr	r3, [pc, #188]	; (8016e8c <tcp_output+0x238>)
 8016dd0:	f240 5236 	movw	r2, #1334	; 0x536
 8016dd4:	4932      	ldr	r1, [pc, #200]	; (8016ea0 <tcp_output+0x24c>)
 8016dd6:	482f      	ldr	r0, [pc, #188]	; (8016e94 <tcp_output+0x240>)
 8016dd8:	f004 fa6e 	bl	801b2b8 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8016ddc:	687b      	ldr	r3, [r7, #4]
 8016dde:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8016de0:	2b00      	cmp	r3, #0
 8016de2:	d01f      	beq.n	8016e24 <tcp_output+0x1d0>
 8016de4:	687b      	ldr	r3, [r7, #4]
 8016de6:	8b5b      	ldrh	r3, [r3, #26]
 8016de8:	f003 0344 	and.w	r3, r3, #68	; 0x44
 8016dec:	2b00      	cmp	r3, #0
 8016dee:	d119      	bne.n	8016e24 <tcp_output+0x1d0>
 8016df0:	687b      	ldr	r3, [r7, #4]
 8016df2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8016df4:	2b00      	cmp	r3, #0
 8016df6:	d00b      	beq.n	8016e10 <tcp_output+0x1bc>
 8016df8:	687b      	ldr	r3, [r7, #4]
 8016dfa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8016dfc:	681b      	ldr	r3, [r3, #0]
 8016dfe:	2b00      	cmp	r3, #0
 8016e00:	d110      	bne.n	8016e24 <tcp_output+0x1d0>
 8016e02:	687b      	ldr	r3, [r7, #4]
 8016e04:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8016e06:	891a      	ldrh	r2, [r3, #8]
 8016e08:	687b      	ldr	r3, [r7, #4]
 8016e0a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8016e0c:	429a      	cmp	r2, r3
 8016e0e:	d209      	bcs.n	8016e24 <tcp_output+0x1d0>
 8016e10:	687b      	ldr	r3, [r7, #4]
 8016e12:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8016e16:	2b00      	cmp	r3, #0
 8016e18:	d004      	beq.n	8016e24 <tcp_output+0x1d0>
 8016e1a:	687b      	ldr	r3, [r7, #4]
 8016e1c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8016e20:	2b0f      	cmp	r3, #15
 8016e22:	d901      	bls.n	8016e28 <tcp_output+0x1d4>
 8016e24:	2301      	movs	r3, #1
 8016e26:	e000      	b.n	8016e2a <tcp_output+0x1d6>
 8016e28:	2300      	movs	r3, #0
 8016e2a:	2b00      	cmp	r3, #0
 8016e2c:	d106      	bne.n	8016e3c <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 8016e2e:	687b      	ldr	r3, [r7, #4]
 8016e30:	8b5b      	ldrh	r3, [r3, #26]
 8016e32:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8016e36:	2b00      	cmp	r3, #0
 8016e38:	f000 80e4 	beq.w	8017004 <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 8016e3c:	687b      	ldr	r3, [r7, #4]
 8016e3e:	7d1b      	ldrb	r3, [r3, #20]
 8016e40:	2b02      	cmp	r3, #2
 8016e42:	d00d      	beq.n	8016e60 <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 8016e44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016e46:	68db      	ldr	r3, [r3, #12]
 8016e48:	899b      	ldrh	r3, [r3, #12]
 8016e4a:	b29c      	uxth	r4, r3
 8016e4c:	2010      	movs	r0, #16
 8016e4e:	f7f8 ff8d 	bl	800fd6c <lwip_htons>
 8016e52:	4603      	mov	r3, r0
 8016e54:	461a      	mov	r2, r3
 8016e56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016e58:	68db      	ldr	r3, [r3, #12]
 8016e5a:	4322      	orrs	r2, r4
 8016e5c:	b292      	uxth	r2, r2
 8016e5e:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 8016e60:	697a      	ldr	r2, [r7, #20]
 8016e62:	6879      	ldr	r1, [r7, #4]
 8016e64:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8016e66:	f000 f909 	bl	801707c <tcp_output_segment>
 8016e6a:	4603      	mov	r3, r0
 8016e6c:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 8016e6e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8016e72:	2b00      	cmp	r3, #0
 8016e74:	d016      	beq.n	8016ea4 <tcp_output+0x250>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8016e76:	687b      	ldr	r3, [r7, #4]
 8016e78:	8b5b      	ldrh	r3, [r3, #26]
 8016e7a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8016e7e:	b29a      	uxth	r2, r3
 8016e80:	687b      	ldr	r3, [r7, #4]
 8016e82:	835a      	strh	r2, [r3, #26]
      return err;
 8016e84:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8016e88:	e0d3      	b.n	8017032 <tcp_output+0x3de>
 8016e8a:	bf00      	nop
 8016e8c:	0801f9b8 	.word	0x0801f9b8
 8016e90:	0801fefc 	.word	0x0801fefc
 8016e94:	0801fa0c 	.word	0x0801fa0c
 8016e98:	0801ff14 	.word	0x0801ff14
 8016e9c:	200071f8 	.word	0x200071f8
 8016ea0:	0801ff3c 	.word	0x0801ff3c
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 8016ea4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016ea6:	681a      	ldr	r2, [r3, #0]
 8016ea8:	687b      	ldr	r3, [r7, #4]
 8016eaa:	66da      	str	r2, [r3, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 8016eac:	687b      	ldr	r3, [r7, #4]
 8016eae:	7d1b      	ldrb	r3, [r3, #20]
 8016eb0:	2b02      	cmp	r3, #2
 8016eb2:	d006      	beq.n	8016ec2 <tcp_output+0x26e>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8016eb4:	687b      	ldr	r3, [r7, #4]
 8016eb6:	8b5b      	ldrh	r3, [r3, #26]
 8016eb8:	f023 0303 	bic.w	r3, r3, #3
 8016ebc:	b29a      	uxth	r2, r3
 8016ebe:	687b      	ldr	r3, [r7, #4]
 8016ec0:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8016ec2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016ec4:	68db      	ldr	r3, [r3, #12]
 8016ec6:	685b      	ldr	r3, [r3, #4]
 8016ec8:	4618      	mov	r0, r3
 8016eca:	f7f8 ff64 	bl	800fd96 <lwip_htonl>
 8016ece:	4604      	mov	r4, r0
 8016ed0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016ed2:	891b      	ldrh	r3, [r3, #8]
 8016ed4:	461d      	mov	r5, r3
 8016ed6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016ed8:	68db      	ldr	r3, [r3, #12]
 8016eda:	899b      	ldrh	r3, [r3, #12]
 8016edc:	b29b      	uxth	r3, r3
 8016ede:	4618      	mov	r0, r3
 8016ee0:	f7f8 ff44 	bl	800fd6c <lwip_htons>
 8016ee4:	4603      	mov	r3, r0
 8016ee6:	b2db      	uxtb	r3, r3
 8016ee8:	f003 0303 	and.w	r3, r3, #3
 8016eec:	2b00      	cmp	r3, #0
 8016eee:	d001      	beq.n	8016ef4 <tcp_output+0x2a0>
 8016ef0:	2301      	movs	r3, #1
 8016ef2:	e000      	b.n	8016ef6 <tcp_output+0x2a2>
 8016ef4:	2300      	movs	r3, #0
 8016ef6:	442b      	add	r3, r5
 8016ef8:	4423      	add	r3, r4
 8016efa:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8016efc:	687b      	ldr	r3, [r7, #4]
 8016efe:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8016f00:	68bb      	ldr	r3, [r7, #8]
 8016f02:	1ad3      	subs	r3, r2, r3
 8016f04:	2b00      	cmp	r3, #0
 8016f06:	da02      	bge.n	8016f0e <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 8016f08:	687b      	ldr	r3, [r7, #4]
 8016f0a:	68ba      	ldr	r2, [r7, #8]
 8016f0c:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 8016f0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016f10:	891b      	ldrh	r3, [r3, #8]
 8016f12:	461c      	mov	r4, r3
 8016f14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016f16:	68db      	ldr	r3, [r3, #12]
 8016f18:	899b      	ldrh	r3, [r3, #12]
 8016f1a:	b29b      	uxth	r3, r3
 8016f1c:	4618      	mov	r0, r3
 8016f1e:	f7f8 ff25 	bl	800fd6c <lwip_htons>
 8016f22:	4603      	mov	r3, r0
 8016f24:	b2db      	uxtb	r3, r3
 8016f26:	f003 0303 	and.w	r3, r3, #3
 8016f2a:	2b00      	cmp	r3, #0
 8016f2c:	d001      	beq.n	8016f32 <tcp_output+0x2de>
 8016f2e:	2301      	movs	r3, #1
 8016f30:	e000      	b.n	8016f34 <tcp_output+0x2e0>
 8016f32:	2300      	movs	r3, #0
 8016f34:	4423      	add	r3, r4
 8016f36:	2b00      	cmp	r3, #0
 8016f38:	d049      	beq.n	8016fce <tcp_output+0x37a>
      seg->next = NULL;
 8016f3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016f3c:	2200      	movs	r2, #0
 8016f3e:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 8016f40:	687b      	ldr	r3, [r7, #4]
 8016f42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8016f44:	2b00      	cmp	r3, #0
 8016f46:	d105      	bne.n	8016f54 <tcp_output+0x300>
        pcb->unacked = seg;
 8016f48:	687b      	ldr	r3, [r7, #4]
 8016f4a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8016f4c:	671a      	str	r2, [r3, #112]	; 0x70
        useg = seg;
 8016f4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016f50:	623b      	str	r3, [r7, #32]
 8016f52:	e03f      	b.n	8016fd4 <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 8016f54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016f56:	68db      	ldr	r3, [r3, #12]
 8016f58:	685b      	ldr	r3, [r3, #4]
 8016f5a:	4618      	mov	r0, r3
 8016f5c:	f7f8 ff1b 	bl	800fd96 <lwip_htonl>
 8016f60:	4604      	mov	r4, r0
 8016f62:	6a3b      	ldr	r3, [r7, #32]
 8016f64:	68db      	ldr	r3, [r3, #12]
 8016f66:	685b      	ldr	r3, [r3, #4]
 8016f68:	4618      	mov	r0, r3
 8016f6a:	f7f8 ff14 	bl	800fd96 <lwip_htonl>
 8016f6e:	4603      	mov	r3, r0
 8016f70:	1ae3      	subs	r3, r4, r3
 8016f72:	2b00      	cmp	r3, #0
 8016f74:	da24      	bge.n	8016fc0 <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 8016f76:	687b      	ldr	r3, [r7, #4]
 8016f78:	3370      	adds	r3, #112	; 0x70
 8016f7a:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8016f7c:	e002      	b.n	8016f84 <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 8016f7e:	69fb      	ldr	r3, [r7, #28]
 8016f80:	681b      	ldr	r3, [r3, #0]
 8016f82:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8016f84:	69fb      	ldr	r3, [r7, #28]
 8016f86:	681b      	ldr	r3, [r3, #0]
 8016f88:	2b00      	cmp	r3, #0
 8016f8a:	d011      	beq.n	8016fb0 <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8016f8c:	69fb      	ldr	r3, [r7, #28]
 8016f8e:	681b      	ldr	r3, [r3, #0]
 8016f90:	68db      	ldr	r3, [r3, #12]
 8016f92:	685b      	ldr	r3, [r3, #4]
 8016f94:	4618      	mov	r0, r3
 8016f96:	f7f8 fefe 	bl	800fd96 <lwip_htonl>
 8016f9a:	4604      	mov	r4, r0
 8016f9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016f9e:	68db      	ldr	r3, [r3, #12]
 8016fa0:	685b      	ldr	r3, [r3, #4]
 8016fa2:	4618      	mov	r0, r3
 8016fa4:	f7f8 fef7 	bl	800fd96 <lwip_htonl>
 8016fa8:	4603      	mov	r3, r0
 8016faa:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 8016fac:	2b00      	cmp	r3, #0
 8016fae:	dbe6      	blt.n	8016f7e <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 8016fb0:	69fb      	ldr	r3, [r7, #28]
 8016fb2:	681a      	ldr	r2, [r3, #0]
 8016fb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016fb6:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 8016fb8:	69fb      	ldr	r3, [r7, #28]
 8016fba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8016fbc:	601a      	str	r2, [r3, #0]
 8016fbe:	e009      	b.n	8016fd4 <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 8016fc0:	6a3b      	ldr	r3, [r7, #32]
 8016fc2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8016fc4:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 8016fc6:	6a3b      	ldr	r3, [r7, #32]
 8016fc8:	681b      	ldr	r3, [r3, #0]
 8016fca:	623b      	str	r3, [r7, #32]
 8016fcc:	e002      	b.n	8016fd4 <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 8016fce:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8016fd0:	f7fb ff37 	bl	8012e42 <tcp_seg_free>
    }
    seg = pcb->unsent;
 8016fd4:	687b      	ldr	r3, [r7, #4]
 8016fd6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8016fd8:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 8016fda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016fdc:	2b00      	cmp	r3, #0
 8016fde:	d012      	beq.n	8017006 <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 8016fe0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016fe2:	68db      	ldr	r3, [r3, #12]
 8016fe4:	685b      	ldr	r3, [r3, #4]
 8016fe6:	4618      	mov	r0, r3
 8016fe8:	f7f8 fed5 	bl	800fd96 <lwip_htonl>
 8016fec:	4602      	mov	r2, r0
 8016fee:	687b      	ldr	r3, [r7, #4]
 8016ff0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8016ff2:	1ad3      	subs	r3, r2, r3
 8016ff4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8016ff6:	8912      	ldrh	r2, [r2, #8]
 8016ff8:	4413      	add	r3, r2
  while (seg != NULL &&
 8016ffa:	69ba      	ldr	r2, [r7, #24]
 8016ffc:	429a      	cmp	r2, r3
 8016ffe:	f4bf aed9 	bcs.w	8016db4 <tcp_output+0x160>
 8017002:	e000      	b.n	8017006 <tcp_output+0x3b2>
      break;
 8017004:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 8017006:	687b      	ldr	r3, [r7, #4]
 8017008:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801700a:	2b00      	cmp	r3, #0
 801700c:	d108      	bne.n	8017020 <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 801700e:	687b      	ldr	r3, [r7, #4]
 8017010:	2200      	movs	r2, #0
 8017012:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 8017016:	e004      	b.n	8017022 <tcp_output+0x3ce>
    goto output_done;
 8017018:	bf00      	nop
 801701a:	e002      	b.n	8017022 <tcp_output+0x3ce>
    goto output_done;
 801701c:	bf00      	nop
 801701e:	e000      	b.n	8017022 <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 8017020:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 8017022:	687b      	ldr	r3, [r7, #4]
 8017024:	8b5b      	ldrh	r3, [r3, #26]
 8017026:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 801702a:	b29a      	uxth	r2, r3
 801702c:	687b      	ldr	r3, [r7, #4]
 801702e:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 8017030:	2300      	movs	r3, #0
}
 8017032:	4618      	mov	r0, r3
 8017034:	3728      	adds	r7, #40	; 0x28
 8017036:	46bd      	mov	sp, r7
 8017038:	bdb0      	pop	{r4, r5, r7, pc}
 801703a:	bf00      	nop

0801703c <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 801703c:	b580      	push	{r7, lr}
 801703e:	b082      	sub	sp, #8
 8017040:	af00      	add	r7, sp, #0
 8017042:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 8017044:	687b      	ldr	r3, [r7, #4]
 8017046:	2b00      	cmp	r3, #0
 8017048:	d106      	bne.n	8017058 <tcp_output_segment_busy+0x1c>
 801704a:	4b09      	ldr	r3, [pc, #36]	; (8017070 <tcp_output_segment_busy+0x34>)
 801704c:	f240 529a 	movw	r2, #1434	; 0x59a
 8017050:	4908      	ldr	r1, [pc, #32]	; (8017074 <tcp_output_segment_busy+0x38>)
 8017052:	4809      	ldr	r0, [pc, #36]	; (8017078 <tcp_output_segment_busy+0x3c>)
 8017054:	f004 f930 	bl	801b2b8 <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 8017058:	687b      	ldr	r3, [r7, #4]
 801705a:	685b      	ldr	r3, [r3, #4]
 801705c:	7b9b      	ldrb	r3, [r3, #14]
 801705e:	2b01      	cmp	r3, #1
 8017060:	d001      	beq.n	8017066 <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 8017062:	2301      	movs	r3, #1
 8017064:	e000      	b.n	8017068 <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 8017066:	2300      	movs	r3, #0
}
 8017068:	4618      	mov	r0, r3
 801706a:	3708      	adds	r7, #8
 801706c:	46bd      	mov	sp, r7
 801706e:	bd80      	pop	{r7, pc}
 8017070:	0801f9b8 	.word	0x0801f9b8
 8017074:	0801ff54 	.word	0x0801ff54
 8017078:	0801fa0c 	.word	0x0801fa0c

0801707c <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 801707c:	b5b0      	push	{r4, r5, r7, lr}
 801707e:	b08c      	sub	sp, #48	; 0x30
 8017080:	af04      	add	r7, sp, #16
 8017082:	60f8      	str	r0, [r7, #12]
 8017084:	60b9      	str	r1, [r7, #8]
 8017086:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 8017088:	68fb      	ldr	r3, [r7, #12]
 801708a:	2b00      	cmp	r3, #0
 801708c:	d106      	bne.n	801709c <tcp_output_segment+0x20>
 801708e:	4b64      	ldr	r3, [pc, #400]	; (8017220 <tcp_output_segment+0x1a4>)
 8017090:	f44f 62b7 	mov.w	r2, #1464	; 0x5b8
 8017094:	4963      	ldr	r1, [pc, #396]	; (8017224 <tcp_output_segment+0x1a8>)
 8017096:	4864      	ldr	r0, [pc, #400]	; (8017228 <tcp_output_segment+0x1ac>)
 8017098:	f004 f90e 	bl	801b2b8 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 801709c:	68bb      	ldr	r3, [r7, #8]
 801709e:	2b00      	cmp	r3, #0
 80170a0:	d106      	bne.n	80170b0 <tcp_output_segment+0x34>
 80170a2:	4b5f      	ldr	r3, [pc, #380]	; (8017220 <tcp_output_segment+0x1a4>)
 80170a4:	f240 52b9 	movw	r2, #1465	; 0x5b9
 80170a8:	4960      	ldr	r1, [pc, #384]	; (801722c <tcp_output_segment+0x1b0>)
 80170aa:	485f      	ldr	r0, [pc, #380]	; (8017228 <tcp_output_segment+0x1ac>)
 80170ac:	f004 f904 	bl	801b2b8 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 80170b0:	687b      	ldr	r3, [r7, #4]
 80170b2:	2b00      	cmp	r3, #0
 80170b4:	d106      	bne.n	80170c4 <tcp_output_segment+0x48>
 80170b6:	4b5a      	ldr	r3, [pc, #360]	; (8017220 <tcp_output_segment+0x1a4>)
 80170b8:	f240 52ba 	movw	r2, #1466	; 0x5ba
 80170bc:	495c      	ldr	r1, [pc, #368]	; (8017230 <tcp_output_segment+0x1b4>)
 80170be:	485a      	ldr	r0, [pc, #360]	; (8017228 <tcp_output_segment+0x1ac>)
 80170c0:	f004 f8fa 	bl	801b2b8 <iprintf>

  if (tcp_output_segment_busy(seg)) {
 80170c4:	68f8      	ldr	r0, [r7, #12]
 80170c6:	f7ff ffb9 	bl	801703c <tcp_output_segment_busy>
 80170ca:	4603      	mov	r3, r0
 80170cc:	2b00      	cmp	r3, #0
 80170ce:	d001      	beq.n	80170d4 <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 80170d0:	2300      	movs	r3, #0
 80170d2:	e0a1      	b.n	8017218 <tcp_output_segment+0x19c>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 80170d4:	68bb      	ldr	r3, [r7, #8]
 80170d6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80170d8:	68fb      	ldr	r3, [r7, #12]
 80170da:	68dc      	ldr	r4, [r3, #12]
 80170dc:	4610      	mov	r0, r2
 80170de:	f7f8 fe5a 	bl	800fd96 <lwip_htonl>
 80170e2:	4603      	mov	r3, r0
 80170e4:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 80170e6:	68bb      	ldr	r3, [r7, #8]
 80170e8:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 80170ea:	68fb      	ldr	r3, [r7, #12]
 80170ec:	68dc      	ldr	r4, [r3, #12]
 80170ee:	4610      	mov	r0, r2
 80170f0:	f7f8 fe3c 	bl	800fd6c <lwip_htons>
 80170f4:	4603      	mov	r3, r0
 80170f6:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 80170f8:	68bb      	ldr	r3, [r7, #8]
 80170fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80170fc:	68ba      	ldr	r2, [r7, #8]
 80170fe:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 8017100:	441a      	add	r2, r3
 8017102:	68bb      	ldr	r3, [r7, #8]
 8017104:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 8017106:	68fb      	ldr	r3, [r7, #12]
 8017108:	68db      	ldr	r3, [r3, #12]
 801710a:	3314      	adds	r3, #20
 801710c:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 801710e:	68fb      	ldr	r3, [r7, #12]
 8017110:	7a9b      	ldrb	r3, [r3, #10]
 8017112:	f003 0301 	and.w	r3, r3, #1
 8017116:	2b00      	cmp	r3, #0
 8017118:	d015      	beq.n	8017146 <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 801711a:	68bb      	ldr	r3, [r7, #8]
 801711c:	3304      	adds	r3, #4
 801711e:	461a      	mov	r2, r3
 8017120:	6879      	ldr	r1, [r7, #4]
 8017122:	f240 50b4 	movw	r0, #1460	; 0x5b4
 8017126:	f7fc fa33 	bl	8013590 <tcp_eff_send_mss_netif>
 801712a:	4603      	mov	r3, r0
 801712c:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 801712e:	8b7b      	ldrh	r3, [r7, #26]
 8017130:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 8017134:	4618      	mov	r0, r3
 8017136:	f7f8 fe2e 	bl	800fd96 <lwip_htonl>
 801713a:	4602      	mov	r2, r0
 801713c:	69fb      	ldr	r3, [r7, #28]
 801713e:	601a      	str	r2, [r3, #0]
    opts += 1;
 8017140:	69fb      	ldr	r3, [r7, #28]
 8017142:	3304      	adds	r3, #4
 8017144:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 8017146:	68bb      	ldr	r3, [r7, #8]
 8017148:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 801714c:	2b00      	cmp	r3, #0
 801714e:	da02      	bge.n	8017156 <tcp_output_segment+0xda>
    pcb->rtime = 0;
 8017150:	68bb      	ldr	r3, [r7, #8]
 8017152:	2200      	movs	r2, #0
 8017154:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 8017156:	68bb      	ldr	r3, [r7, #8]
 8017158:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801715a:	2b00      	cmp	r3, #0
 801715c:	d10c      	bne.n	8017178 <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 801715e:	4b35      	ldr	r3, [pc, #212]	; (8017234 <tcp_output_segment+0x1b8>)
 8017160:	681a      	ldr	r2, [r3, #0]
 8017162:	68bb      	ldr	r3, [r7, #8]
 8017164:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 8017166:	68fb      	ldr	r3, [r7, #12]
 8017168:	68db      	ldr	r3, [r3, #12]
 801716a:	685b      	ldr	r3, [r3, #4]
 801716c:	4618      	mov	r0, r3
 801716e:	f7f8 fe12 	bl	800fd96 <lwip_htonl>
 8017172:	4602      	mov	r2, r0
 8017174:	68bb      	ldr	r3, [r7, #8]
 8017176:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 8017178:	68fb      	ldr	r3, [r7, #12]
 801717a:	68da      	ldr	r2, [r3, #12]
 801717c:	68fb      	ldr	r3, [r7, #12]
 801717e:	685b      	ldr	r3, [r3, #4]
 8017180:	685b      	ldr	r3, [r3, #4]
 8017182:	1ad3      	subs	r3, r2, r3
 8017184:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 8017186:	68fb      	ldr	r3, [r7, #12]
 8017188:	685b      	ldr	r3, [r3, #4]
 801718a:	8959      	ldrh	r1, [r3, #10]
 801718c:	68fb      	ldr	r3, [r7, #12]
 801718e:	685b      	ldr	r3, [r3, #4]
 8017190:	8b3a      	ldrh	r2, [r7, #24]
 8017192:	1a8a      	subs	r2, r1, r2
 8017194:	b292      	uxth	r2, r2
 8017196:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 8017198:	68fb      	ldr	r3, [r7, #12]
 801719a:	685b      	ldr	r3, [r3, #4]
 801719c:	8919      	ldrh	r1, [r3, #8]
 801719e:	68fb      	ldr	r3, [r7, #12]
 80171a0:	685b      	ldr	r3, [r3, #4]
 80171a2:	8b3a      	ldrh	r2, [r7, #24]
 80171a4:	1a8a      	subs	r2, r1, r2
 80171a6:	b292      	uxth	r2, r2
 80171a8:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 80171aa:	68fb      	ldr	r3, [r7, #12]
 80171ac:	685b      	ldr	r3, [r3, #4]
 80171ae:	68fa      	ldr	r2, [r7, #12]
 80171b0:	68d2      	ldr	r2, [r2, #12]
 80171b2:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 80171b4:	68fb      	ldr	r3, [r7, #12]
 80171b6:	68db      	ldr	r3, [r3, #12]
 80171b8:	2200      	movs	r2, #0
 80171ba:	741a      	strb	r2, [r3, #16]
 80171bc:	2200      	movs	r2, #0
 80171be:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 80171c0:	68fb      	ldr	r3, [r7, #12]
 80171c2:	68da      	ldr	r2, [r3, #12]
 80171c4:	68fb      	ldr	r3, [r7, #12]
 80171c6:	7a9b      	ldrb	r3, [r3, #10]
 80171c8:	f003 0301 	and.w	r3, r3, #1
 80171cc:	2b00      	cmp	r3, #0
 80171ce:	d001      	beq.n	80171d4 <tcp_output_segment+0x158>
 80171d0:	2318      	movs	r3, #24
 80171d2:	e000      	b.n	80171d6 <tcp_output_segment+0x15a>
 80171d4:	2314      	movs	r3, #20
 80171d6:	4413      	add	r3, r2
 80171d8:	69fa      	ldr	r2, [r7, #28]
 80171da:	429a      	cmp	r2, r3
 80171dc:	d006      	beq.n	80171ec <tcp_output_segment+0x170>
 80171de:	4b10      	ldr	r3, [pc, #64]	; (8017220 <tcp_output_segment+0x1a4>)
 80171e0:	f240 621c 	movw	r2, #1564	; 0x61c
 80171e4:	4914      	ldr	r1, [pc, #80]	; (8017238 <tcp_output_segment+0x1bc>)
 80171e6:	4810      	ldr	r0, [pc, #64]	; (8017228 <tcp_output_segment+0x1ac>)
 80171e8:	f004 f866 	bl	801b2b8 <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 80171ec:	68fb      	ldr	r3, [r7, #12]
 80171ee:	6858      	ldr	r0, [r3, #4]
 80171f0:	68b9      	ldr	r1, [r7, #8]
 80171f2:	68bb      	ldr	r3, [r7, #8]
 80171f4:	1d1c      	adds	r4, r3, #4
 80171f6:	68bb      	ldr	r3, [r7, #8]
 80171f8:	7add      	ldrb	r5, [r3, #11]
 80171fa:	68bb      	ldr	r3, [r7, #8]
 80171fc:	7a9b      	ldrb	r3, [r3, #10]
 80171fe:	687a      	ldr	r2, [r7, #4]
 8017200:	9202      	str	r2, [sp, #8]
 8017202:	2206      	movs	r2, #6
 8017204:	9201      	str	r2, [sp, #4]
 8017206:	9300      	str	r3, [sp, #0]
 8017208:	462b      	mov	r3, r5
 801720a:	4622      	mov	r2, r4
 801720c:	f002 fa5a 	bl	80196c4 <ip4_output_if>
 8017210:	4603      	mov	r3, r0
 8017212:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 8017214:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8017218:	4618      	mov	r0, r3
 801721a:	3720      	adds	r7, #32
 801721c:	46bd      	mov	sp, r7
 801721e:	bdb0      	pop	{r4, r5, r7, pc}
 8017220:	0801f9b8 	.word	0x0801f9b8
 8017224:	0801ff7c 	.word	0x0801ff7c
 8017228:	0801fa0c 	.word	0x0801fa0c
 801722c:	0801ff9c 	.word	0x0801ff9c
 8017230:	0801ffbc 	.word	0x0801ffbc
 8017234:	200071ac 	.word	0x200071ac
 8017238:	0801ffe0 	.word	0x0801ffe0

0801723c <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 801723c:	b5b0      	push	{r4, r5, r7, lr}
 801723e:	b084      	sub	sp, #16
 8017240:	af00      	add	r7, sp, #0
 8017242:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 8017244:	687b      	ldr	r3, [r7, #4]
 8017246:	2b00      	cmp	r3, #0
 8017248:	d106      	bne.n	8017258 <tcp_rexmit_rto_prepare+0x1c>
 801724a:	4b31      	ldr	r3, [pc, #196]	; (8017310 <tcp_rexmit_rto_prepare+0xd4>)
 801724c:	f240 6263 	movw	r2, #1635	; 0x663
 8017250:	4930      	ldr	r1, [pc, #192]	; (8017314 <tcp_rexmit_rto_prepare+0xd8>)
 8017252:	4831      	ldr	r0, [pc, #196]	; (8017318 <tcp_rexmit_rto_prepare+0xdc>)
 8017254:	f004 f830 	bl	801b2b8 <iprintf>

  if (pcb->unacked == NULL) {
 8017258:	687b      	ldr	r3, [r7, #4]
 801725a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801725c:	2b00      	cmp	r3, #0
 801725e:	d102      	bne.n	8017266 <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 8017260:	f06f 0305 	mvn.w	r3, #5
 8017264:	e050      	b.n	8017308 <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 8017266:	687b      	ldr	r3, [r7, #4]
 8017268:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801726a:	60fb      	str	r3, [r7, #12]
 801726c:	e00b      	b.n	8017286 <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 801726e:	68f8      	ldr	r0, [r7, #12]
 8017270:	f7ff fee4 	bl	801703c <tcp_output_segment_busy>
 8017274:	4603      	mov	r3, r0
 8017276:	2b00      	cmp	r3, #0
 8017278:	d002      	beq.n	8017280 <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 801727a:	f06f 0305 	mvn.w	r3, #5
 801727e:	e043      	b.n	8017308 <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 8017280:	68fb      	ldr	r3, [r7, #12]
 8017282:	681b      	ldr	r3, [r3, #0]
 8017284:	60fb      	str	r3, [r7, #12]
 8017286:	68fb      	ldr	r3, [r7, #12]
 8017288:	681b      	ldr	r3, [r3, #0]
 801728a:	2b00      	cmp	r3, #0
 801728c:	d1ef      	bne.n	801726e <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 801728e:	68f8      	ldr	r0, [r7, #12]
 8017290:	f7ff fed4 	bl	801703c <tcp_output_segment_busy>
 8017294:	4603      	mov	r3, r0
 8017296:	2b00      	cmp	r3, #0
 8017298:	d002      	beq.n	80172a0 <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 801729a:	f06f 0305 	mvn.w	r3, #5
 801729e:	e033      	b.n	8017308 <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 80172a0:	687b      	ldr	r3, [r7, #4]
 80172a2:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80172a4:	68fb      	ldr	r3, [r7, #12]
 80172a6:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 80172a8:	687b      	ldr	r3, [r7, #4]
 80172aa:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80172ac:	687b      	ldr	r3, [r7, #4]
 80172ae:	66da      	str	r2, [r3, #108]	; 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 80172b0:	687b      	ldr	r3, [r7, #4]
 80172b2:	2200      	movs	r2, #0
 80172b4:	671a      	str	r2, [r3, #112]	; 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 80172b6:	687b      	ldr	r3, [r7, #4]
 80172b8:	8b5b      	ldrh	r3, [r3, #26]
 80172ba:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80172be:	b29a      	uxth	r2, r3
 80172c0:	687b      	ldr	r3, [r7, #4]
 80172c2:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 80172c4:	68fb      	ldr	r3, [r7, #12]
 80172c6:	68db      	ldr	r3, [r3, #12]
 80172c8:	685b      	ldr	r3, [r3, #4]
 80172ca:	4618      	mov	r0, r3
 80172cc:	f7f8 fd63 	bl	800fd96 <lwip_htonl>
 80172d0:	4604      	mov	r4, r0
 80172d2:	68fb      	ldr	r3, [r7, #12]
 80172d4:	891b      	ldrh	r3, [r3, #8]
 80172d6:	461d      	mov	r5, r3
 80172d8:	68fb      	ldr	r3, [r7, #12]
 80172da:	68db      	ldr	r3, [r3, #12]
 80172dc:	899b      	ldrh	r3, [r3, #12]
 80172de:	b29b      	uxth	r3, r3
 80172e0:	4618      	mov	r0, r3
 80172e2:	f7f8 fd43 	bl	800fd6c <lwip_htons>
 80172e6:	4603      	mov	r3, r0
 80172e8:	b2db      	uxtb	r3, r3
 80172ea:	f003 0303 	and.w	r3, r3, #3
 80172ee:	2b00      	cmp	r3, #0
 80172f0:	d001      	beq.n	80172f6 <tcp_rexmit_rto_prepare+0xba>
 80172f2:	2301      	movs	r3, #1
 80172f4:	e000      	b.n	80172f8 <tcp_rexmit_rto_prepare+0xbc>
 80172f6:	2300      	movs	r3, #0
 80172f8:	442b      	add	r3, r5
 80172fa:	18e2      	adds	r2, r4, r3
 80172fc:	687b      	ldr	r3, [r7, #4]
 80172fe:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 8017300:	687b      	ldr	r3, [r7, #4]
 8017302:	2200      	movs	r2, #0
 8017304:	635a      	str	r2, [r3, #52]	; 0x34

  return ERR_OK;
 8017306:	2300      	movs	r3, #0
}
 8017308:	4618      	mov	r0, r3
 801730a:	3710      	adds	r7, #16
 801730c:	46bd      	mov	sp, r7
 801730e:	bdb0      	pop	{r4, r5, r7, pc}
 8017310:	0801f9b8 	.word	0x0801f9b8
 8017314:	0801fff4 	.word	0x0801fff4
 8017318:	0801fa0c 	.word	0x0801fa0c

0801731c <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 801731c:	b580      	push	{r7, lr}
 801731e:	b082      	sub	sp, #8
 8017320:	af00      	add	r7, sp, #0
 8017322:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 8017324:	687b      	ldr	r3, [r7, #4]
 8017326:	2b00      	cmp	r3, #0
 8017328:	d106      	bne.n	8017338 <tcp_rexmit_rto_commit+0x1c>
 801732a:	4b0d      	ldr	r3, [pc, #52]	; (8017360 <tcp_rexmit_rto_commit+0x44>)
 801732c:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 8017330:	490c      	ldr	r1, [pc, #48]	; (8017364 <tcp_rexmit_rto_commit+0x48>)
 8017332:	480d      	ldr	r0, [pc, #52]	; (8017368 <tcp_rexmit_rto_commit+0x4c>)
 8017334:	f003 ffc0 	bl	801b2b8 <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 8017338:	687b      	ldr	r3, [r7, #4]
 801733a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801733e:	2bff      	cmp	r3, #255	; 0xff
 8017340:	d007      	beq.n	8017352 <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 8017342:	687b      	ldr	r3, [r7, #4]
 8017344:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8017348:	3301      	adds	r3, #1
 801734a:	b2da      	uxtb	r2, r3
 801734c:	687b      	ldr	r3, [r7, #4]
 801734e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 8017352:	6878      	ldr	r0, [r7, #4]
 8017354:	f7ff fc7e 	bl	8016c54 <tcp_output>
}
 8017358:	bf00      	nop
 801735a:	3708      	adds	r7, #8
 801735c:	46bd      	mov	sp, r7
 801735e:	bd80      	pop	{r7, pc}
 8017360:	0801f9b8 	.word	0x0801f9b8
 8017364:	08020018 	.word	0x08020018
 8017368:	0801fa0c 	.word	0x0801fa0c

0801736c <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 801736c:	b580      	push	{r7, lr}
 801736e:	b082      	sub	sp, #8
 8017370:	af00      	add	r7, sp, #0
 8017372:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 8017374:	687b      	ldr	r3, [r7, #4]
 8017376:	2b00      	cmp	r3, #0
 8017378:	d106      	bne.n	8017388 <tcp_rexmit_rto+0x1c>
 801737a:	4b0a      	ldr	r3, [pc, #40]	; (80173a4 <tcp_rexmit_rto+0x38>)
 801737c:	f240 62ad 	movw	r2, #1709	; 0x6ad
 8017380:	4909      	ldr	r1, [pc, #36]	; (80173a8 <tcp_rexmit_rto+0x3c>)
 8017382:	480a      	ldr	r0, [pc, #40]	; (80173ac <tcp_rexmit_rto+0x40>)
 8017384:	f003 ff98 	bl	801b2b8 <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 8017388:	6878      	ldr	r0, [r7, #4]
 801738a:	f7ff ff57 	bl	801723c <tcp_rexmit_rto_prepare>
 801738e:	4603      	mov	r3, r0
 8017390:	2b00      	cmp	r3, #0
 8017392:	d102      	bne.n	801739a <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 8017394:	6878      	ldr	r0, [r7, #4]
 8017396:	f7ff ffc1 	bl	801731c <tcp_rexmit_rto_commit>
  }
}
 801739a:	bf00      	nop
 801739c:	3708      	adds	r7, #8
 801739e:	46bd      	mov	sp, r7
 80173a0:	bd80      	pop	{r7, pc}
 80173a2:	bf00      	nop
 80173a4:	0801f9b8 	.word	0x0801f9b8
 80173a8:	0802003c 	.word	0x0802003c
 80173ac:	0801fa0c 	.word	0x0801fa0c

080173b0 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 80173b0:	b590      	push	{r4, r7, lr}
 80173b2:	b085      	sub	sp, #20
 80173b4:	af00      	add	r7, sp, #0
 80173b6:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 80173b8:	687b      	ldr	r3, [r7, #4]
 80173ba:	2b00      	cmp	r3, #0
 80173bc:	d106      	bne.n	80173cc <tcp_rexmit+0x1c>
 80173be:	4b2f      	ldr	r3, [pc, #188]	; (801747c <tcp_rexmit+0xcc>)
 80173c0:	f240 62c1 	movw	r2, #1729	; 0x6c1
 80173c4:	492e      	ldr	r1, [pc, #184]	; (8017480 <tcp_rexmit+0xd0>)
 80173c6:	482f      	ldr	r0, [pc, #188]	; (8017484 <tcp_rexmit+0xd4>)
 80173c8:	f003 ff76 	bl	801b2b8 <iprintf>

  if (pcb->unacked == NULL) {
 80173cc:	687b      	ldr	r3, [r7, #4]
 80173ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80173d0:	2b00      	cmp	r3, #0
 80173d2:	d102      	bne.n	80173da <tcp_rexmit+0x2a>
    return ERR_VAL;
 80173d4:	f06f 0305 	mvn.w	r3, #5
 80173d8:	e04c      	b.n	8017474 <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 80173da:	687b      	ldr	r3, [r7, #4]
 80173dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80173de:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 80173e0:	68b8      	ldr	r0, [r7, #8]
 80173e2:	f7ff fe2b 	bl	801703c <tcp_output_segment_busy>
 80173e6:	4603      	mov	r3, r0
 80173e8:	2b00      	cmp	r3, #0
 80173ea:	d002      	beq.n	80173f2 <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 80173ec:	f06f 0305 	mvn.w	r3, #5
 80173f0:	e040      	b.n	8017474 <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 80173f2:	68bb      	ldr	r3, [r7, #8]
 80173f4:	681a      	ldr	r2, [r3, #0]
 80173f6:	687b      	ldr	r3, [r7, #4]
 80173f8:	671a      	str	r2, [r3, #112]	; 0x70

  cur_seg = &(pcb->unsent);
 80173fa:	687b      	ldr	r3, [r7, #4]
 80173fc:	336c      	adds	r3, #108	; 0x6c
 80173fe:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8017400:	e002      	b.n	8017408 <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 8017402:	68fb      	ldr	r3, [r7, #12]
 8017404:	681b      	ldr	r3, [r3, #0]
 8017406:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8017408:	68fb      	ldr	r3, [r7, #12]
 801740a:	681b      	ldr	r3, [r3, #0]
 801740c:	2b00      	cmp	r3, #0
 801740e:	d011      	beq.n	8017434 <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8017410:	68fb      	ldr	r3, [r7, #12]
 8017412:	681b      	ldr	r3, [r3, #0]
 8017414:	68db      	ldr	r3, [r3, #12]
 8017416:	685b      	ldr	r3, [r3, #4]
 8017418:	4618      	mov	r0, r3
 801741a:	f7f8 fcbc 	bl	800fd96 <lwip_htonl>
 801741e:	4604      	mov	r4, r0
 8017420:	68bb      	ldr	r3, [r7, #8]
 8017422:	68db      	ldr	r3, [r3, #12]
 8017424:	685b      	ldr	r3, [r3, #4]
 8017426:	4618      	mov	r0, r3
 8017428:	f7f8 fcb5 	bl	800fd96 <lwip_htonl>
 801742c:	4603      	mov	r3, r0
 801742e:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 8017430:	2b00      	cmp	r3, #0
 8017432:	dbe6      	blt.n	8017402 <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 8017434:	68fb      	ldr	r3, [r7, #12]
 8017436:	681a      	ldr	r2, [r3, #0]
 8017438:	68bb      	ldr	r3, [r7, #8]
 801743a:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 801743c:	68fb      	ldr	r3, [r7, #12]
 801743e:	68ba      	ldr	r2, [r7, #8]
 8017440:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 8017442:	68bb      	ldr	r3, [r7, #8]
 8017444:	681b      	ldr	r3, [r3, #0]
 8017446:	2b00      	cmp	r3, #0
 8017448:	d103      	bne.n	8017452 <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 801744a:	687b      	ldr	r3, [r7, #4]
 801744c:	2200      	movs	r2, #0
 801744e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 8017452:	687b      	ldr	r3, [r7, #4]
 8017454:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8017458:	2bff      	cmp	r3, #255	; 0xff
 801745a:	d007      	beq.n	801746c <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 801745c:	687b      	ldr	r3, [r7, #4]
 801745e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8017462:	3301      	adds	r3, #1
 8017464:	b2da      	uxtb	r2, r3
 8017466:	687b      	ldr	r3, [r7, #4]
 8017468:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 801746c:	687b      	ldr	r3, [r7, #4]
 801746e:	2200      	movs	r2, #0
 8017470:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 8017472:	2300      	movs	r3, #0
}
 8017474:	4618      	mov	r0, r3
 8017476:	3714      	adds	r7, #20
 8017478:	46bd      	mov	sp, r7
 801747a:	bd90      	pop	{r4, r7, pc}
 801747c:	0801f9b8 	.word	0x0801f9b8
 8017480:	08020058 	.word	0x08020058
 8017484:	0801fa0c 	.word	0x0801fa0c

08017488 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 8017488:	b580      	push	{r7, lr}
 801748a:	b082      	sub	sp, #8
 801748c:	af00      	add	r7, sp, #0
 801748e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 8017490:	687b      	ldr	r3, [r7, #4]
 8017492:	2b00      	cmp	r3, #0
 8017494:	d106      	bne.n	80174a4 <tcp_rexmit_fast+0x1c>
 8017496:	4b2a      	ldr	r3, [pc, #168]	; (8017540 <tcp_rexmit_fast+0xb8>)
 8017498:	f240 62f9 	movw	r2, #1785	; 0x6f9
 801749c:	4929      	ldr	r1, [pc, #164]	; (8017544 <tcp_rexmit_fast+0xbc>)
 801749e:	482a      	ldr	r0, [pc, #168]	; (8017548 <tcp_rexmit_fast+0xc0>)
 80174a0:	f003 ff0a 	bl	801b2b8 <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 80174a4:	687b      	ldr	r3, [r7, #4]
 80174a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80174a8:	2b00      	cmp	r3, #0
 80174aa:	d045      	beq.n	8017538 <tcp_rexmit_fast+0xb0>
 80174ac:	687b      	ldr	r3, [r7, #4]
 80174ae:	8b5b      	ldrh	r3, [r3, #26]
 80174b0:	f003 0304 	and.w	r3, r3, #4
 80174b4:	2b00      	cmp	r3, #0
 80174b6:	d13f      	bne.n	8017538 <tcp_rexmit_fast+0xb0>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 80174b8:	6878      	ldr	r0, [r7, #4]
 80174ba:	f7ff ff79 	bl	80173b0 <tcp_rexmit>
 80174be:	4603      	mov	r3, r0
 80174c0:	2b00      	cmp	r3, #0
 80174c2:	d139      	bne.n	8017538 <tcp_rexmit_fast+0xb0>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 80174c4:	687b      	ldr	r3, [r7, #4]
 80174c6:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 80174ca:	687b      	ldr	r3, [r7, #4]
 80174cc:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80174d0:	4293      	cmp	r3, r2
 80174d2:	bf28      	it	cs
 80174d4:	4613      	movcs	r3, r2
 80174d6:	b29b      	uxth	r3, r3
 80174d8:	2b00      	cmp	r3, #0
 80174da:	da00      	bge.n	80174de <tcp_rexmit_fast+0x56>
 80174dc:	3301      	adds	r3, #1
 80174de:	105b      	asrs	r3, r3, #1
 80174e0:	b29a      	uxth	r2, r3
 80174e2:	687b      	ldr	r3, [r7, #4]
 80174e4:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 80174e8:	687b      	ldr	r3, [r7, #4]
 80174ea:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 80174ee:	461a      	mov	r2, r3
 80174f0:	687b      	ldr	r3, [r7, #4]
 80174f2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80174f4:	005b      	lsls	r3, r3, #1
 80174f6:	429a      	cmp	r2, r3
 80174f8:	d206      	bcs.n	8017508 <tcp_rexmit_fast+0x80>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 80174fa:	687b      	ldr	r3, [r7, #4]
 80174fc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80174fe:	005b      	lsls	r3, r3, #1
 8017500:	b29a      	uxth	r2, r3
 8017502:	687b      	ldr	r3, [r7, #4]
 8017504:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 8017508:	687b      	ldr	r3, [r7, #4]
 801750a:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 801750e:	687b      	ldr	r3, [r7, #4]
 8017510:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8017512:	4619      	mov	r1, r3
 8017514:	0049      	lsls	r1, r1, #1
 8017516:	440b      	add	r3, r1
 8017518:	b29b      	uxth	r3, r3
 801751a:	4413      	add	r3, r2
 801751c:	b29a      	uxth	r2, r3
 801751e:	687b      	ldr	r3, [r7, #4]
 8017520:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 8017524:	687b      	ldr	r3, [r7, #4]
 8017526:	8b5b      	ldrh	r3, [r3, #26]
 8017528:	f043 0304 	orr.w	r3, r3, #4
 801752c:	b29a      	uxth	r2, r3
 801752e:	687b      	ldr	r3, [r7, #4]
 8017530:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 8017532:	687b      	ldr	r3, [r7, #4]
 8017534:	2200      	movs	r2, #0
 8017536:	861a      	strh	r2, [r3, #48]	; 0x30
    }
  }
}
 8017538:	bf00      	nop
 801753a:	3708      	adds	r7, #8
 801753c:	46bd      	mov	sp, r7
 801753e:	bd80      	pop	{r7, pc}
 8017540:	0801f9b8 	.word	0x0801f9b8
 8017544:	08020070 	.word	0x08020070
 8017548:	0801fa0c 	.word	0x0801fa0c

0801754c <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 801754c:	b580      	push	{r7, lr}
 801754e:	b086      	sub	sp, #24
 8017550:	af00      	add	r7, sp, #0
 8017552:	60f8      	str	r0, [r7, #12]
 8017554:	607b      	str	r3, [r7, #4]
 8017556:	460b      	mov	r3, r1
 8017558:	817b      	strh	r3, [r7, #10]
 801755a:	4613      	mov	r3, r2
 801755c:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 801755e:	897a      	ldrh	r2, [r7, #10]
 8017560:	893b      	ldrh	r3, [r7, #8]
 8017562:	4413      	add	r3, r2
 8017564:	b29b      	uxth	r3, r3
 8017566:	3314      	adds	r3, #20
 8017568:	b29b      	uxth	r3, r3
 801756a:	f44f 7220 	mov.w	r2, #640	; 0x280
 801756e:	4619      	mov	r1, r3
 8017570:	2022      	movs	r0, #34	; 0x22
 8017572:	f7f9 fd1b 	bl	8010fac <pbuf_alloc>
 8017576:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 8017578:	697b      	ldr	r3, [r7, #20]
 801757a:	2b00      	cmp	r3, #0
 801757c:	d04d      	beq.n	801761a <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 801757e:	897b      	ldrh	r3, [r7, #10]
 8017580:	3313      	adds	r3, #19
 8017582:	697a      	ldr	r2, [r7, #20]
 8017584:	8952      	ldrh	r2, [r2, #10]
 8017586:	4293      	cmp	r3, r2
 8017588:	db06      	blt.n	8017598 <tcp_output_alloc_header_common+0x4c>
 801758a:	4b26      	ldr	r3, [pc, #152]	; (8017624 <tcp_output_alloc_header_common+0xd8>)
 801758c:	f240 7223 	movw	r2, #1827	; 0x723
 8017590:	4925      	ldr	r1, [pc, #148]	; (8017628 <tcp_output_alloc_header_common+0xdc>)
 8017592:	4826      	ldr	r0, [pc, #152]	; (801762c <tcp_output_alloc_header_common+0xe0>)
 8017594:	f003 fe90 	bl	801b2b8 <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 8017598:	697b      	ldr	r3, [r7, #20]
 801759a:	685b      	ldr	r3, [r3, #4]
 801759c:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 801759e:	8c3b      	ldrh	r3, [r7, #32]
 80175a0:	4618      	mov	r0, r3
 80175a2:	f7f8 fbe3 	bl	800fd6c <lwip_htons>
 80175a6:	4603      	mov	r3, r0
 80175a8:	461a      	mov	r2, r3
 80175aa:	693b      	ldr	r3, [r7, #16]
 80175ac:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 80175ae:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80175b0:	4618      	mov	r0, r3
 80175b2:	f7f8 fbdb 	bl	800fd6c <lwip_htons>
 80175b6:	4603      	mov	r3, r0
 80175b8:	461a      	mov	r2, r3
 80175ba:	693b      	ldr	r3, [r7, #16]
 80175bc:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 80175be:	693b      	ldr	r3, [r7, #16]
 80175c0:	687a      	ldr	r2, [r7, #4]
 80175c2:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 80175c4:	68f8      	ldr	r0, [r7, #12]
 80175c6:	f7f8 fbe6 	bl	800fd96 <lwip_htonl>
 80175ca:	4602      	mov	r2, r0
 80175cc:	693b      	ldr	r3, [r7, #16]
 80175ce:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 80175d0:	897b      	ldrh	r3, [r7, #10]
 80175d2:	089b      	lsrs	r3, r3, #2
 80175d4:	b29b      	uxth	r3, r3
 80175d6:	3305      	adds	r3, #5
 80175d8:	b29b      	uxth	r3, r3
 80175da:	031b      	lsls	r3, r3, #12
 80175dc:	b29a      	uxth	r2, r3
 80175de:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80175e2:	b29b      	uxth	r3, r3
 80175e4:	4313      	orrs	r3, r2
 80175e6:	b29b      	uxth	r3, r3
 80175e8:	4618      	mov	r0, r3
 80175ea:	f7f8 fbbf 	bl	800fd6c <lwip_htons>
 80175ee:	4603      	mov	r3, r0
 80175f0:	461a      	mov	r2, r3
 80175f2:	693b      	ldr	r3, [r7, #16]
 80175f4:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 80175f6:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80175f8:	4618      	mov	r0, r3
 80175fa:	f7f8 fbb7 	bl	800fd6c <lwip_htons>
 80175fe:	4603      	mov	r3, r0
 8017600:	461a      	mov	r2, r3
 8017602:	693b      	ldr	r3, [r7, #16]
 8017604:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 8017606:	693b      	ldr	r3, [r7, #16]
 8017608:	2200      	movs	r2, #0
 801760a:	741a      	strb	r2, [r3, #16]
 801760c:	2200      	movs	r2, #0
 801760e:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 8017610:	693b      	ldr	r3, [r7, #16]
 8017612:	2200      	movs	r2, #0
 8017614:	749a      	strb	r2, [r3, #18]
 8017616:	2200      	movs	r2, #0
 8017618:	74da      	strb	r2, [r3, #19]
  }
  return p;
 801761a:	697b      	ldr	r3, [r7, #20]
}
 801761c:	4618      	mov	r0, r3
 801761e:	3718      	adds	r7, #24
 8017620:	46bd      	mov	sp, r7
 8017622:	bd80      	pop	{r7, pc}
 8017624:	0801f9b8 	.word	0x0801f9b8
 8017628:	08020090 	.word	0x08020090
 801762c:	0801fa0c 	.word	0x0801fa0c

08017630 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 8017630:	b5b0      	push	{r4, r5, r7, lr}
 8017632:	b08a      	sub	sp, #40	; 0x28
 8017634:	af04      	add	r7, sp, #16
 8017636:	60f8      	str	r0, [r7, #12]
 8017638:	607b      	str	r3, [r7, #4]
 801763a:	460b      	mov	r3, r1
 801763c:	817b      	strh	r3, [r7, #10]
 801763e:	4613      	mov	r3, r2
 8017640:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 8017642:	68fb      	ldr	r3, [r7, #12]
 8017644:	2b00      	cmp	r3, #0
 8017646:	d106      	bne.n	8017656 <tcp_output_alloc_header+0x26>
 8017648:	4b15      	ldr	r3, [pc, #84]	; (80176a0 <tcp_output_alloc_header+0x70>)
 801764a:	f240 7242 	movw	r2, #1858	; 0x742
 801764e:	4915      	ldr	r1, [pc, #84]	; (80176a4 <tcp_output_alloc_header+0x74>)
 8017650:	4815      	ldr	r0, [pc, #84]	; (80176a8 <tcp_output_alloc_header+0x78>)
 8017652:	f003 fe31 	bl	801b2b8 <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 8017656:	68fb      	ldr	r3, [r7, #12]
 8017658:	6a58      	ldr	r0, [r3, #36]	; 0x24
 801765a:	68fb      	ldr	r3, [r7, #12]
 801765c:	8adb      	ldrh	r3, [r3, #22]
 801765e:	68fa      	ldr	r2, [r7, #12]
 8017660:	8b12      	ldrh	r2, [r2, #24]
 8017662:	68f9      	ldr	r1, [r7, #12]
 8017664:	8d49      	ldrh	r1, [r1, #42]	; 0x2a
 8017666:	893d      	ldrh	r5, [r7, #8]
 8017668:	897c      	ldrh	r4, [r7, #10]
 801766a:	9103      	str	r1, [sp, #12]
 801766c:	2110      	movs	r1, #16
 801766e:	9102      	str	r1, [sp, #8]
 8017670:	9201      	str	r2, [sp, #4]
 8017672:	9300      	str	r3, [sp, #0]
 8017674:	687b      	ldr	r3, [r7, #4]
 8017676:	462a      	mov	r2, r5
 8017678:	4621      	mov	r1, r4
 801767a:	f7ff ff67 	bl	801754c <tcp_output_alloc_header_common>
 801767e:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 8017680:	697b      	ldr	r3, [r7, #20]
 8017682:	2b00      	cmp	r3, #0
 8017684:	d006      	beq.n	8017694 <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8017686:	68fb      	ldr	r3, [r7, #12]
 8017688:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801768a:	68fa      	ldr	r2, [r7, #12]
 801768c:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 801768e:	441a      	add	r2, r3
 8017690:	68fb      	ldr	r3, [r7, #12]
 8017692:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 8017694:	697b      	ldr	r3, [r7, #20]
}
 8017696:	4618      	mov	r0, r3
 8017698:	3718      	adds	r7, #24
 801769a:	46bd      	mov	sp, r7
 801769c:	bdb0      	pop	{r4, r5, r7, pc}
 801769e:	bf00      	nop
 80176a0:	0801f9b8 	.word	0x0801f9b8
 80176a4:	080200c0 	.word	0x080200c0
 80176a8:	0801fa0c 	.word	0x0801fa0c

080176ac <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 80176ac:	b580      	push	{r7, lr}
 80176ae:	b088      	sub	sp, #32
 80176b0:	af00      	add	r7, sp, #0
 80176b2:	60f8      	str	r0, [r7, #12]
 80176b4:	60b9      	str	r1, [r7, #8]
 80176b6:	4611      	mov	r1, r2
 80176b8:	461a      	mov	r2, r3
 80176ba:	460b      	mov	r3, r1
 80176bc:	71fb      	strb	r3, [r7, #7]
 80176be:	4613      	mov	r3, r2
 80176c0:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 80176c2:	2300      	movs	r3, #0
 80176c4:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 80176c6:	68bb      	ldr	r3, [r7, #8]
 80176c8:	2b00      	cmp	r3, #0
 80176ca:	d106      	bne.n	80176da <tcp_output_fill_options+0x2e>
 80176cc:	4b12      	ldr	r3, [pc, #72]	; (8017718 <tcp_output_fill_options+0x6c>)
 80176ce:	f240 7256 	movw	r2, #1878	; 0x756
 80176d2:	4912      	ldr	r1, [pc, #72]	; (801771c <tcp_output_fill_options+0x70>)
 80176d4:	4812      	ldr	r0, [pc, #72]	; (8017720 <tcp_output_fill_options+0x74>)
 80176d6:	f003 fdef 	bl	801b2b8 <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 80176da:	68bb      	ldr	r3, [r7, #8]
 80176dc:	685b      	ldr	r3, [r3, #4]
 80176de:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 80176e0:	69bb      	ldr	r3, [r7, #24]
 80176e2:	3314      	adds	r3, #20
 80176e4:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 80176e6:	8bfb      	ldrh	r3, [r7, #30]
 80176e8:	009b      	lsls	r3, r3, #2
 80176ea:	461a      	mov	r2, r3
 80176ec:	79fb      	ldrb	r3, [r7, #7]
 80176ee:	009b      	lsls	r3, r3, #2
 80176f0:	f003 0304 	and.w	r3, r3, #4
 80176f4:	4413      	add	r3, r2
 80176f6:	3314      	adds	r3, #20
 80176f8:	69ba      	ldr	r2, [r7, #24]
 80176fa:	4413      	add	r3, r2
 80176fc:	697a      	ldr	r2, [r7, #20]
 80176fe:	429a      	cmp	r2, r3
 8017700:	d006      	beq.n	8017710 <tcp_output_fill_options+0x64>
 8017702:	4b05      	ldr	r3, [pc, #20]	; (8017718 <tcp_output_fill_options+0x6c>)
 8017704:	f240 7275 	movw	r2, #1909	; 0x775
 8017708:	4906      	ldr	r1, [pc, #24]	; (8017724 <tcp_output_fill_options+0x78>)
 801770a:	4805      	ldr	r0, [pc, #20]	; (8017720 <tcp_output_fill_options+0x74>)
 801770c:	f003 fdd4 	bl	801b2b8 <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 8017710:	bf00      	nop
 8017712:	3720      	adds	r7, #32
 8017714:	46bd      	mov	sp, r7
 8017716:	bd80      	pop	{r7, pc}
 8017718:	0801f9b8 	.word	0x0801f9b8
 801771c:	080200e8 	.word	0x080200e8
 8017720:	0801fa0c 	.word	0x0801fa0c
 8017724:	0801ffe0 	.word	0x0801ffe0

08017728 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 8017728:	b580      	push	{r7, lr}
 801772a:	b08a      	sub	sp, #40	; 0x28
 801772c:	af04      	add	r7, sp, #16
 801772e:	60f8      	str	r0, [r7, #12]
 8017730:	60b9      	str	r1, [r7, #8]
 8017732:	607a      	str	r2, [r7, #4]
 8017734:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 8017736:	68bb      	ldr	r3, [r7, #8]
 8017738:	2b00      	cmp	r3, #0
 801773a:	d106      	bne.n	801774a <tcp_output_control_segment+0x22>
 801773c:	4b1c      	ldr	r3, [pc, #112]	; (80177b0 <tcp_output_control_segment+0x88>)
 801773e:	f240 7287 	movw	r2, #1927	; 0x787
 8017742:	491c      	ldr	r1, [pc, #112]	; (80177b4 <tcp_output_control_segment+0x8c>)
 8017744:	481c      	ldr	r0, [pc, #112]	; (80177b8 <tcp_output_control_segment+0x90>)
 8017746:	f003 fdb7 	bl	801b2b8 <iprintf>

  netif = tcp_route(pcb, src, dst);
 801774a:	683a      	ldr	r2, [r7, #0]
 801774c:	6879      	ldr	r1, [r7, #4]
 801774e:	68f8      	ldr	r0, [r7, #12]
 8017750:	f7fe fae8 	bl	8015d24 <tcp_route>
 8017754:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 8017756:	693b      	ldr	r3, [r7, #16]
 8017758:	2b00      	cmp	r3, #0
 801775a:	d102      	bne.n	8017762 <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 801775c:	23fc      	movs	r3, #252	; 0xfc
 801775e:	75fb      	strb	r3, [r7, #23]
 8017760:	e01c      	b.n	801779c <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 8017762:	68fb      	ldr	r3, [r7, #12]
 8017764:	2b00      	cmp	r3, #0
 8017766:	d006      	beq.n	8017776 <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 8017768:	68fb      	ldr	r3, [r7, #12]
 801776a:	7adb      	ldrb	r3, [r3, #11]
 801776c:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 801776e:	68fb      	ldr	r3, [r7, #12]
 8017770:	7a9b      	ldrb	r3, [r3, #10]
 8017772:	757b      	strb	r3, [r7, #21]
 8017774:	e003      	b.n	801777e <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 8017776:	23ff      	movs	r3, #255	; 0xff
 8017778:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 801777a:	2300      	movs	r3, #0
 801777c:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 801777e:	7dba      	ldrb	r2, [r7, #22]
 8017780:	693b      	ldr	r3, [r7, #16]
 8017782:	9302      	str	r3, [sp, #8]
 8017784:	2306      	movs	r3, #6
 8017786:	9301      	str	r3, [sp, #4]
 8017788:	7d7b      	ldrb	r3, [r7, #21]
 801778a:	9300      	str	r3, [sp, #0]
 801778c:	4613      	mov	r3, r2
 801778e:	683a      	ldr	r2, [r7, #0]
 8017790:	6879      	ldr	r1, [r7, #4]
 8017792:	68b8      	ldr	r0, [r7, #8]
 8017794:	f001 ff96 	bl	80196c4 <ip4_output_if>
 8017798:	4603      	mov	r3, r0
 801779a:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 801779c:	68b8      	ldr	r0, [r7, #8]
 801779e:	f7f9 fee9 	bl	8011574 <pbuf_free>
  return err;
 80177a2:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80177a6:	4618      	mov	r0, r3
 80177a8:	3718      	adds	r7, #24
 80177aa:	46bd      	mov	sp, r7
 80177ac:	bd80      	pop	{r7, pc}
 80177ae:	bf00      	nop
 80177b0:	0801f9b8 	.word	0x0801f9b8
 80177b4:	08020110 	.word	0x08020110
 80177b8:	0801fa0c 	.word	0x0801fa0c

080177bc <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 80177bc:	b590      	push	{r4, r7, lr}
 80177be:	b08b      	sub	sp, #44	; 0x2c
 80177c0:	af04      	add	r7, sp, #16
 80177c2:	60f8      	str	r0, [r7, #12]
 80177c4:	60b9      	str	r1, [r7, #8]
 80177c6:	607a      	str	r2, [r7, #4]
 80177c8:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 80177ca:	683b      	ldr	r3, [r7, #0]
 80177cc:	2b00      	cmp	r3, #0
 80177ce:	d106      	bne.n	80177de <tcp_rst+0x22>
 80177d0:	4b1f      	ldr	r3, [pc, #124]	; (8017850 <tcp_rst+0x94>)
 80177d2:	f240 72c4 	movw	r2, #1988	; 0x7c4
 80177d6:	491f      	ldr	r1, [pc, #124]	; (8017854 <tcp_rst+0x98>)
 80177d8:	481f      	ldr	r0, [pc, #124]	; (8017858 <tcp_rst+0x9c>)
 80177da:	f003 fd6d 	bl	801b2b8 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 80177de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80177e0:	2b00      	cmp	r3, #0
 80177e2:	d106      	bne.n	80177f2 <tcp_rst+0x36>
 80177e4:	4b1a      	ldr	r3, [pc, #104]	; (8017850 <tcp_rst+0x94>)
 80177e6:	f240 72c5 	movw	r2, #1989	; 0x7c5
 80177ea:	491c      	ldr	r1, [pc, #112]	; (801785c <tcp_rst+0xa0>)
 80177ec:	481a      	ldr	r0, [pc, #104]	; (8017858 <tcp_rst+0x9c>)
 80177ee:	f003 fd63 	bl	801b2b8 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 80177f2:	2300      	movs	r3, #0
 80177f4:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 80177f6:	f24d 0316 	movw	r3, #53270	; 0xd016
 80177fa:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 80177fc:	7dfb      	ldrb	r3, [r7, #23]
 80177fe:	b29c      	uxth	r4, r3
 8017800:	68b8      	ldr	r0, [r7, #8]
 8017802:	f7f8 fac8 	bl	800fd96 <lwip_htonl>
 8017806:	4602      	mov	r2, r0
 8017808:	8abb      	ldrh	r3, [r7, #20]
 801780a:	9303      	str	r3, [sp, #12]
 801780c:	2314      	movs	r3, #20
 801780e:	9302      	str	r3, [sp, #8]
 8017810:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8017812:	9301      	str	r3, [sp, #4]
 8017814:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8017816:	9300      	str	r3, [sp, #0]
 8017818:	4613      	mov	r3, r2
 801781a:	2200      	movs	r2, #0
 801781c:	4621      	mov	r1, r4
 801781e:	6878      	ldr	r0, [r7, #4]
 8017820:	f7ff fe94 	bl	801754c <tcp_output_alloc_header_common>
 8017824:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 8017826:	693b      	ldr	r3, [r7, #16]
 8017828:	2b00      	cmp	r3, #0
 801782a:	d00c      	beq.n	8017846 <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 801782c:	7dfb      	ldrb	r3, [r7, #23]
 801782e:	2200      	movs	r2, #0
 8017830:	6939      	ldr	r1, [r7, #16]
 8017832:	68f8      	ldr	r0, [r7, #12]
 8017834:	f7ff ff3a 	bl	80176ac <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 8017838:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801783a:	683a      	ldr	r2, [r7, #0]
 801783c:	6939      	ldr	r1, [r7, #16]
 801783e:	68f8      	ldr	r0, [r7, #12]
 8017840:	f7ff ff72 	bl	8017728 <tcp_output_control_segment>
 8017844:	e000      	b.n	8017848 <tcp_rst+0x8c>
    return;
 8017846:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 8017848:	371c      	adds	r7, #28
 801784a:	46bd      	mov	sp, r7
 801784c:	bd90      	pop	{r4, r7, pc}
 801784e:	bf00      	nop
 8017850:	0801f9b8 	.word	0x0801f9b8
 8017854:	0802013c 	.word	0x0802013c
 8017858:	0801fa0c 	.word	0x0801fa0c
 801785c:	08020158 	.word	0x08020158

08017860 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 8017860:	b590      	push	{r4, r7, lr}
 8017862:	b087      	sub	sp, #28
 8017864:	af00      	add	r7, sp, #0
 8017866:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 8017868:	2300      	movs	r3, #0
 801786a:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 801786c:	2300      	movs	r3, #0
 801786e:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 8017870:	687b      	ldr	r3, [r7, #4]
 8017872:	2b00      	cmp	r3, #0
 8017874:	d106      	bne.n	8017884 <tcp_send_empty_ack+0x24>
 8017876:	4b28      	ldr	r3, [pc, #160]	; (8017918 <tcp_send_empty_ack+0xb8>)
 8017878:	f240 72ea 	movw	r2, #2026	; 0x7ea
 801787c:	4927      	ldr	r1, [pc, #156]	; (801791c <tcp_send_empty_ack+0xbc>)
 801787e:	4828      	ldr	r0, [pc, #160]	; (8017920 <tcp_send_empty_ack+0xc0>)
 8017880:	f003 fd1a 	bl	801b2b8 <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8017884:	7dfb      	ldrb	r3, [r7, #23]
 8017886:	009b      	lsls	r3, r3, #2
 8017888:	b2db      	uxtb	r3, r3
 801788a:	f003 0304 	and.w	r3, r3, #4
 801788e:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 8017890:	7d7b      	ldrb	r3, [r7, #21]
 8017892:	b29c      	uxth	r4, r3
 8017894:	687b      	ldr	r3, [r7, #4]
 8017896:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8017898:	4618      	mov	r0, r3
 801789a:	f7f8 fa7c 	bl	800fd96 <lwip_htonl>
 801789e:	4603      	mov	r3, r0
 80178a0:	2200      	movs	r2, #0
 80178a2:	4621      	mov	r1, r4
 80178a4:	6878      	ldr	r0, [r7, #4]
 80178a6:	f7ff fec3 	bl	8017630 <tcp_output_alloc_header>
 80178aa:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 80178ac:	693b      	ldr	r3, [r7, #16]
 80178ae:	2b00      	cmp	r3, #0
 80178b0:	d109      	bne.n	80178c6 <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 80178b2:	687b      	ldr	r3, [r7, #4]
 80178b4:	8b5b      	ldrh	r3, [r3, #26]
 80178b6:	f043 0303 	orr.w	r3, r3, #3
 80178ba:	b29a      	uxth	r2, r3
 80178bc:	687b      	ldr	r3, [r7, #4]
 80178be:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 80178c0:	f06f 0301 	mvn.w	r3, #1
 80178c4:	e023      	b.n	801790e <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 80178c6:	7dbb      	ldrb	r3, [r7, #22]
 80178c8:	7dfa      	ldrb	r2, [r7, #23]
 80178ca:	6939      	ldr	r1, [r7, #16]
 80178cc:	6878      	ldr	r0, [r7, #4]
 80178ce:	f7ff feed 	bl	80176ac <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 80178d2:	687a      	ldr	r2, [r7, #4]
 80178d4:	687b      	ldr	r3, [r7, #4]
 80178d6:	3304      	adds	r3, #4
 80178d8:	6939      	ldr	r1, [r7, #16]
 80178da:	6878      	ldr	r0, [r7, #4]
 80178dc:	f7ff ff24 	bl	8017728 <tcp_output_control_segment>
 80178e0:	4603      	mov	r3, r0
 80178e2:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 80178e4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80178e8:	2b00      	cmp	r3, #0
 80178ea:	d007      	beq.n	80178fc <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 80178ec:	687b      	ldr	r3, [r7, #4]
 80178ee:	8b5b      	ldrh	r3, [r3, #26]
 80178f0:	f043 0303 	orr.w	r3, r3, #3
 80178f4:	b29a      	uxth	r2, r3
 80178f6:	687b      	ldr	r3, [r7, #4]
 80178f8:	835a      	strh	r2, [r3, #26]
 80178fa:	e006      	b.n	801790a <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 80178fc:	687b      	ldr	r3, [r7, #4]
 80178fe:	8b5b      	ldrh	r3, [r3, #26]
 8017900:	f023 0303 	bic.w	r3, r3, #3
 8017904:	b29a      	uxth	r2, r3
 8017906:	687b      	ldr	r3, [r7, #4]
 8017908:	835a      	strh	r2, [r3, #26]
  }

  return err;
 801790a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801790e:	4618      	mov	r0, r3
 8017910:	371c      	adds	r7, #28
 8017912:	46bd      	mov	sp, r7
 8017914:	bd90      	pop	{r4, r7, pc}
 8017916:	bf00      	nop
 8017918:	0801f9b8 	.word	0x0801f9b8
 801791c:	08020174 	.word	0x08020174
 8017920:	0801fa0c 	.word	0x0801fa0c

08017924 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 8017924:	b590      	push	{r4, r7, lr}
 8017926:	b087      	sub	sp, #28
 8017928:	af00      	add	r7, sp, #0
 801792a:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 801792c:	2300      	movs	r3, #0
 801792e:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 8017930:	687b      	ldr	r3, [r7, #4]
 8017932:	2b00      	cmp	r3, #0
 8017934:	d106      	bne.n	8017944 <tcp_keepalive+0x20>
 8017936:	4b18      	ldr	r3, [pc, #96]	; (8017998 <tcp_keepalive+0x74>)
 8017938:	f640 0224 	movw	r2, #2084	; 0x824
 801793c:	4917      	ldr	r1, [pc, #92]	; (801799c <tcp_keepalive+0x78>)
 801793e:	4818      	ldr	r0, [pc, #96]	; (80179a0 <tcp_keepalive+0x7c>)
 8017940:	f003 fcba 	bl	801b2b8 <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 8017944:	7dfb      	ldrb	r3, [r7, #23]
 8017946:	b29c      	uxth	r4, r3
 8017948:	687b      	ldr	r3, [r7, #4]
 801794a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801794c:	3b01      	subs	r3, #1
 801794e:	4618      	mov	r0, r3
 8017950:	f7f8 fa21 	bl	800fd96 <lwip_htonl>
 8017954:	4603      	mov	r3, r0
 8017956:	2200      	movs	r2, #0
 8017958:	4621      	mov	r1, r4
 801795a:	6878      	ldr	r0, [r7, #4]
 801795c:	f7ff fe68 	bl	8017630 <tcp_output_alloc_header>
 8017960:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8017962:	693b      	ldr	r3, [r7, #16]
 8017964:	2b00      	cmp	r3, #0
 8017966:	d102      	bne.n	801796e <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 8017968:	f04f 33ff 	mov.w	r3, #4294967295
 801796c:	e010      	b.n	8017990 <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 801796e:	7dfb      	ldrb	r3, [r7, #23]
 8017970:	2200      	movs	r2, #0
 8017972:	6939      	ldr	r1, [r7, #16]
 8017974:	6878      	ldr	r0, [r7, #4]
 8017976:	f7ff fe99 	bl	80176ac <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 801797a:	687a      	ldr	r2, [r7, #4]
 801797c:	687b      	ldr	r3, [r7, #4]
 801797e:	3304      	adds	r3, #4
 8017980:	6939      	ldr	r1, [r7, #16]
 8017982:	6878      	ldr	r0, [r7, #4]
 8017984:	f7ff fed0 	bl	8017728 <tcp_output_control_segment>
 8017988:	4603      	mov	r3, r0
 801798a:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 801798c:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8017990:	4618      	mov	r0, r3
 8017992:	371c      	adds	r7, #28
 8017994:	46bd      	mov	sp, r7
 8017996:	bd90      	pop	{r4, r7, pc}
 8017998:	0801f9b8 	.word	0x0801f9b8
 801799c:	08020194 	.word	0x08020194
 80179a0:	0801fa0c 	.word	0x0801fa0c

080179a4 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 80179a4:	b590      	push	{r4, r7, lr}
 80179a6:	b08b      	sub	sp, #44	; 0x2c
 80179a8:	af00      	add	r7, sp, #0
 80179aa:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 80179ac:	2300      	movs	r3, #0
 80179ae:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 80179b2:	687b      	ldr	r3, [r7, #4]
 80179b4:	2b00      	cmp	r3, #0
 80179b6:	d106      	bne.n	80179c6 <tcp_zero_window_probe+0x22>
 80179b8:	4b4c      	ldr	r3, [pc, #304]	; (8017aec <tcp_zero_window_probe+0x148>)
 80179ba:	f640 024f 	movw	r2, #2127	; 0x84f
 80179be:	494c      	ldr	r1, [pc, #304]	; (8017af0 <tcp_zero_window_probe+0x14c>)
 80179c0:	484c      	ldr	r0, [pc, #304]	; (8017af4 <tcp_zero_window_probe+0x150>)
 80179c2:	f003 fc79 	bl	801b2b8 <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 80179c6:	687b      	ldr	r3, [r7, #4]
 80179c8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80179ca:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 80179cc:	6a3b      	ldr	r3, [r7, #32]
 80179ce:	2b00      	cmp	r3, #0
 80179d0:	d101      	bne.n	80179d6 <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 80179d2:	2300      	movs	r3, #0
 80179d4:	e086      	b.n	8017ae4 <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 80179d6:	687b      	ldr	r3, [r7, #4]
 80179d8:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 80179dc:	2bff      	cmp	r3, #255	; 0xff
 80179de:	d007      	beq.n	80179f0 <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 80179e0:	687b      	ldr	r3, [r7, #4]
 80179e2:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 80179e6:	3301      	adds	r3, #1
 80179e8:	b2da      	uxtb	r2, r3
 80179ea:	687b      	ldr	r3, [r7, #4]
 80179ec:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 80179f0:	6a3b      	ldr	r3, [r7, #32]
 80179f2:	68db      	ldr	r3, [r3, #12]
 80179f4:	899b      	ldrh	r3, [r3, #12]
 80179f6:	b29b      	uxth	r3, r3
 80179f8:	4618      	mov	r0, r3
 80179fa:	f7f8 f9b7 	bl	800fd6c <lwip_htons>
 80179fe:	4603      	mov	r3, r0
 8017a00:	b2db      	uxtb	r3, r3
 8017a02:	f003 0301 	and.w	r3, r3, #1
 8017a06:	2b00      	cmp	r3, #0
 8017a08:	d005      	beq.n	8017a16 <tcp_zero_window_probe+0x72>
 8017a0a:	6a3b      	ldr	r3, [r7, #32]
 8017a0c:	891b      	ldrh	r3, [r3, #8]
 8017a0e:	2b00      	cmp	r3, #0
 8017a10:	d101      	bne.n	8017a16 <tcp_zero_window_probe+0x72>
 8017a12:	2301      	movs	r3, #1
 8017a14:	e000      	b.n	8017a18 <tcp_zero_window_probe+0x74>
 8017a16:	2300      	movs	r3, #0
 8017a18:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 8017a1a:	7ffb      	ldrb	r3, [r7, #31]
 8017a1c:	2b00      	cmp	r3, #0
 8017a1e:	bf0c      	ite	eq
 8017a20:	2301      	moveq	r3, #1
 8017a22:	2300      	movne	r3, #0
 8017a24:	b2db      	uxtb	r3, r3
 8017a26:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 8017a28:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8017a2c:	b299      	uxth	r1, r3
 8017a2e:	6a3b      	ldr	r3, [r7, #32]
 8017a30:	68db      	ldr	r3, [r3, #12]
 8017a32:	685b      	ldr	r3, [r3, #4]
 8017a34:	8bba      	ldrh	r2, [r7, #28]
 8017a36:	6878      	ldr	r0, [r7, #4]
 8017a38:	f7ff fdfa 	bl	8017630 <tcp_output_alloc_header>
 8017a3c:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 8017a3e:	69bb      	ldr	r3, [r7, #24]
 8017a40:	2b00      	cmp	r3, #0
 8017a42:	d102      	bne.n	8017a4a <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 8017a44:	f04f 33ff 	mov.w	r3, #4294967295
 8017a48:	e04c      	b.n	8017ae4 <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 8017a4a:	69bb      	ldr	r3, [r7, #24]
 8017a4c:	685b      	ldr	r3, [r3, #4]
 8017a4e:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 8017a50:	7ffb      	ldrb	r3, [r7, #31]
 8017a52:	2b00      	cmp	r3, #0
 8017a54:	d011      	beq.n	8017a7a <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 8017a56:	697b      	ldr	r3, [r7, #20]
 8017a58:	899b      	ldrh	r3, [r3, #12]
 8017a5a:	b29b      	uxth	r3, r3
 8017a5c:	b21b      	sxth	r3, r3
 8017a5e:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8017a62:	b21c      	sxth	r4, r3
 8017a64:	2011      	movs	r0, #17
 8017a66:	f7f8 f981 	bl	800fd6c <lwip_htons>
 8017a6a:	4603      	mov	r3, r0
 8017a6c:	b21b      	sxth	r3, r3
 8017a6e:	4323      	orrs	r3, r4
 8017a70:	b21b      	sxth	r3, r3
 8017a72:	b29a      	uxth	r2, r3
 8017a74:	697b      	ldr	r3, [r7, #20]
 8017a76:	819a      	strh	r2, [r3, #12]
 8017a78:	e010      	b.n	8017a9c <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 8017a7a:	69bb      	ldr	r3, [r7, #24]
 8017a7c:	685b      	ldr	r3, [r3, #4]
 8017a7e:	3314      	adds	r3, #20
 8017a80:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 8017a82:	6a3b      	ldr	r3, [r7, #32]
 8017a84:	6858      	ldr	r0, [r3, #4]
 8017a86:	6a3b      	ldr	r3, [r7, #32]
 8017a88:	685b      	ldr	r3, [r3, #4]
 8017a8a:	891a      	ldrh	r2, [r3, #8]
 8017a8c:	6a3b      	ldr	r3, [r7, #32]
 8017a8e:	891b      	ldrh	r3, [r3, #8]
 8017a90:	1ad3      	subs	r3, r2, r3
 8017a92:	b29b      	uxth	r3, r3
 8017a94:	2201      	movs	r2, #1
 8017a96:	6939      	ldr	r1, [r7, #16]
 8017a98:	f7f9 ff56 	bl	8011948 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 8017a9c:	6a3b      	ldr	r3, [r7, #32]
 8017a9e:	68db      	ldr	r3, [r3, #12]
 8017aa0:	685b      	ldr	r3, [r3, #4]
 8017aa2:	4618      	mov	r0, r3
 8017aa4:	f7f8 f977 	bl	800fd96 <lwip_htonl>
 8017aa8:	4603      	mov	r3, r0
 8017aaa:	3301      	adds	r3, #1
 8017aac:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8017aae:	687b      	ldr	r3, [r7, #4]
 8017ab0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8017ab2:	68fb      	ldr	r3, [r7, #12]
 8017ab4:	1ad3      	subs	r3, r2, r3
 8017ab6:	2b00      	cmp	r3, #0
 8017ab8:	da02      	bge.n	8017ac0 <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 8017aba:	687b      	ldr	r3, [r7, #4]
 8017abc:	68fa      	ldr	r2, [r7, #12]
 8017abe:	651a      	str	r2, [r3, #80]	; 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8017ac0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8017ac4:	2200      	movs	r2, #0
 8017ac6:	69b9      	ldr	r1, [r7, #24]
 8017ac8:	6878      	ldr	r0, [r7, #4]
 8017aca:	f7ff fdef 	bl	80176ac <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8017ace:	687a      	ldr	r2, [r7, #4]
 8017ad0:	687b      	ldr	r3, [r7, #4]
 8017ad2:	3304      	adds	r3, #4
 8017ad4:	69b9      	ldr	r1, [r7, #24]
 8017ad6:	6878      	ldr	r0, [r7, #4]
 8017ad8:	f7ff fe26 	bl	8017728 <tcp_output_control_segment>
 8017adc:	4603      	mov	r3, r0
 8017ade:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8017ae0:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8017ae4:	4618      	mov	r0, r3
 8017ae6:	372c      	adds	r7, #44	; 0x2c
 8017ae8:	46bd      	mov	sp, r7
 8017aea:	bd90      	pop	{r4, r7, pc}
 8017aec:	0801f9b8 	.word	0x0801f9b8
 8017af0:	080201b0 	.word	0x080201b0
 8017af4:	0801fa0c 	.word	0x0801fa0c

08017af8 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 8017af8:	b580      	push	{r7, lr}
 8017afa:	b082      	sub	sp, #8
 8017afc:	af00      	add	r7, sp, #0
 8017afe:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 8017b00:	f7fa f8a2 	bl	8011c48 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 8017b04:	4b0a      	ldr	r3, [pc, #40]	; (8017b30 <tcpip_tcp_timer+0x38>)
 8017b06:	681b      	ldr	r3, [r3, #0]
 8017b08:	2b00      	cmp	r3, #0
 8017b0a:	d103      	bne.n	8017b14 <tcpip_tcp_timer+0x1c>
 8017b0c:	4b09      	ldr	r3, [pc, #36]	; (8017b34 <tcpip_tcp_timer+0x3c>)
 8017b0e:	681b      	ldr	r3, [r3, #0]
 8017b10:	2b00      	cmp	r3, #0
 8017b12:	d005      	beq.n	8017b20 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8017b14:	2200      	movs	r2, #0
 8017b16:	4908      	ldr	r1, [pc, #32]	; (8017b38 <tcpip_tcp_timer+0x40>)
 8017b18:	20fa      	movs	r0, #250	; 0xfa
 8017b1a:	f000 f8f3 	bl	8017d04 <sys_timeout>
 8017b1e:	e003      	b.n	8017b28 <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 8017b20:	4b06      	ldr	r3, [pc, #24]	; (8017b3c <tcpip_tcp_timer+0x44>)
 8017b22:	2200      	movs	r2, #0
 8017b24:	601a      	str	r2, [r3, #0]
  }
}
 8017b26:	bf00      	nop
 8017b28:	bf00      	nop
 8017b2a:	3708      	adds	r7, #8
 8017b2c:	46bd      	mov	sp, r7
 8017b2e:	bd80      	pop	{r7, pc}
 8017b30:	200071b8 	.word	0x200071b8
 8017b34:	200071bc 	.word	0x200071bc
 8017b38:	08017af9 	.word	0x08017af9
 8017b3c:	20007204 	.word	0x20007204

08017b40 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 8017b40:	b580      	push	{r7, lr}
 8017b42:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 8017b44:	4b0a      	ldr	r3, [pc, #40]	; (8017b70 <tcp_timer_needed+0x30>)
 8017b46:	681b      	ldr	r3, [r3, #0]
 8017b48:	2b00      	cmp	r3, #0
 8017b4a:	d10f      	bne.n	8017b6c <tcp_timer_needed+0x2c>
 8017b4c:	4b09      	ldr	r3, [pc, #36]	; (8017b74 <tcp_timer_needed+0x34>)
 8017b4e:	681b      	ldr	r3, [r3, #0]
 8017b50:	2b00      	cmp	r3, #0
 8017b52:	d103      	bne.n	8017b5c <tcp_timer_needed+0x1c>
 8017b54:	4b08      	ldr	r3, [pc, #32]	; (8017b78 <tcp_timer_needed+0x38>)
 8017b56:	681b      	ldr	r3, [r3, #0]
 8017b58:	2b00      	cmp	r3, #0
 8017b5a:	d007      	beq.n	8017b6c <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 8017b5c:	4b04      	ldr	r3, [pc, #16]	; (8017b70 <tcp_timer_needed+0x30>)
 8017b5e:	2201      	movs	r2, #1
 8017b60:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8017b62:	2200      	movs	r2, #0
 8017b64:	4905      	ldr	r1, [pc, #20]	; (8017b7c <tcp_timer_needed+0x3c>)
 8017b66:	20fa      	movs	r0, #250	; 0xfa
 8017b68:	f000 f8cc 	bl	8017d04 <sys_timeout>
  }
}
 8017b6c:	bf00      	nop
 8017b6e:	bd80      	pop	{r7, pc}
 8017b70:	20007204 	.word	0x20007204
 8017b74:	200071b8 	.word	0x200071b8
 8017b78:	200071bc 	.word	0x200071bc
 8017b7c:	08017af9 	.word	0x08017af9

08017b80 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 8017b80:	b580      	push	{r7, lr}
 8017b82:	b086      	sub	sp, #24
 8017b84:	af00      	add	r7, sp, #0
 8017b86:	60f8      	str	r0, [r7, #12]
 8017b88:	60b9      	str	r1, [r7, #8]
 8017b8a:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 8017b8c:	2006      	movs	r0, #6
 8017b8e:	f7f8 fe0b 	bl	80107a8 <memp_malloc>
 8017b92:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 8017b94:	693b      	ldr	r3, [r7, #16]
 8017b96:	2b00      	cmp	r3, #0
 8017b98:	d109      	bne.n	8017bae <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 8017b9a:	693b      	ldr	r3, [r7, #16]
 8017b9c:	2b00      	cmp	r3, #0
 8017b9e:	d151      	bne.n	8017c44 <sys_timeout_abs+0xc4>
 8017ba0:	4b2a      	ldr	r3, [pc, #168]	; (8017c4c <sys_timeout_abs+0xcc>)
 8017ba2:	22be      	movs	r2, #190	; 0xbe
 8017ba4:	492a      	ldr	r1, [pc, #168]	; (8017c50 <sys_timeout_abs+0xd0>)
 8017ba6:	482b      	ldr	r0, [pc, #172]	; (8017c54 <sys_timeout_abs+0xd4>)
 8017ba8:	f003 fb86 	bl	801b2b8 <iprintf>
    return;
 8017bac:	e04a      	b.n	8017c44 <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 8017bae:	693b      	ldr	r3, [r7, #16]
 8017bb0:	2200      	movs	r2, #0
 8017bb2:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 8017bb4:	693b      	ldr	r3, [r7, #16]
 8017bb6:	68ba      	ldr	r2, [r7, #8]
 8017bb8:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 8017bba:	693b      	ldr	r3, [r7, #16]
 8017bbc:	687a      	ldr	r2, [r7, #4]
 8017bbe:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 8017bc0:	693b      	ldr	r3, [r7, #16]
 8017bc2:	68fa      	ldr	r2, [r7, #12]
 8017bc4:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 8017bc6:	4b24      	ldr	r3, [pc, #144]	; (8017c58 <sys_timeout_abs+0xd8>)
 8017bc8:	681b      	ldr	r3, [r3, #0]
 8017bca:	2b00      	cmp	r3, #0
 8017bcc:	d103      	bne.n	8017bd6 <sys_timeout_abs+0x56>
    next_timeout = timeout;
 8017bce:	4a22      	ldr	r2, [pc, #136]	; (8017c58 <sys_timeout_abs+0xd8>)
 8017bd0:	693b      	ldr	r3, [r7, #16]
 8017bd2:	6013      	str	r3, [r2, #0]
    return;
 8017bd4:	e037      	b.n	8017c46 <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 8017bd6:	693b      	ldr	r3, [r7, #16]
 8017bd8:	685a      	ldr	r2, [r3, #4]
 8017bda:	4b1f      	ldr	r3, [pc, #124]	; (8017c58 <sys_timeout_abs+0xd8>)
 8017bdc:	681b      	ldr	r3, [r3, #0]
 8017bde:	685b      	ldr	r3, [r3, #4]
 8017be0:	1ad3      	subs	r3, r2, r3
 8017be2:	0fdb      	lsrs	r3, r3, #31
 8017be4:	f003 0301 	and.w	r3, r3, #1
 8017be8:	b2db      	uxtb	r3, r3
 8017bea:	2b00      	cmp	r3, #0
 8017bec:	d007      	beq.n	8017bfe <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 8017bee:	4b1a      	ldr	r3, [pc, #104]	; (8017c58 <sys_timeout_abs+0xd8>)
 8017bf0:	681a      	ldr	r2, [r3, #0]
 8017bf2:	693b      	ldr	r3, [r7, #16]
 8017bf4:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 8017bf6:	4a18      	ldr	r2, [pc, #96]	; (8017c58 <sys_timeout_abs+0xd8>)
 8017bf8:	693b      	ldr	r3, [r7, #16]
 8017bfa:	6013      	str	r3, [r2, #0]
 8017bfc:	e023      	b.n	8017c46 <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 8017bfe:	4b16      	ldr	r3, [pc, #88]	; (8017c58 <sys_timeout_abs+0xd8>)
 8017c00:	681b      	ldr	r3, [r3, #0]
 8017c02:	617b      	str	r3, [r7, #20]
 8017c04:	e01a      	b.n	8017c3c <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 8017c06:	697b      	ldr	r3, [r7, #20]
 8017c08:	681b      	ldr	r3, [r3, #0]
 8017c0a:	2b00      	cmp	r3, #0
 8017c0c:	d00b      	beq.n	8017c26 <sys_timeout_abs+0xa6>
 8017c0e:	693b      	ldr	r3, [r7, #16]
 8017c10:	685a      	ldr	r2, [r3, #4]
 8017c12:	697b      	ldr	r3, [r7, #20]
 8017c14:	681b      	ldr	r3, [r3, #0]
 8017c16:	685b      	ldr	r3, [r3, #4]
 8017c18:	1ad3      	subs	r3, r2, r3
 8017c1a:	0fdb      	lsrs	r3, r3, #31
 8017c1c:	f003 0301 	and.w	r3, r3, #1
 8017c20:	b2db      	uxtb	r3, r3
 8017c22:	2b00      	cmp	r3, #0
 8017c24:	d007      	beq.n	8017c36 <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 8017c26:	697b      	ldr	r3, [r7, #20]
 8017c28:	681a      	ldr	r2, [r3, #0]
 8017c2a:	693b      	ldr	r3, [r7, #16]
 8017c2c:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 8017c2e:	697b      	ldr	r3, [r7, #20]
 8017c30:	693a      	ldr	r2, [r7, #16]
 8017c32:	601a      	str	r2, [r3, #0]
        break;
 8017c34:	e007      	b.n	8017c46 <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 8017c36:	697b      	ldr	r3, [r7, #20]
 8017c38:	681b      	ldr	r3, [r3, #0]
 8017c3a:	617b      	str	r3, [r7, #20]
 8017c3c:	697b      	ldr	r3, [r7, #20]
 8017c3e:	2b00      	cmp	r3, #0
 8017c40:	d1e1      	bne.n	8017c06 <sys_timeout_abs+0x86>
 8017c42:	e000      	b.n	8017c46 <sys_timeout_abs+0xc6>
    return;
 8017c44:	bf00      	nop
      }
    }
  }
}
 8017c46:	3718      	adds	r7, #24
 8017c48:	46bd      	mov	sp, r7
 8017c4a:	bd80      	pop	{r7, pc}
 8017c4c:	080201d4 	.word	0x080201d4
 8017c50:	08020208 	.word	0x08020208
 8017c54:	08020248 	.word	0x08020248
 8017c58:	200071fc 	.word	0x200071fc

08017c5c <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 8017c5c:	b580      	push	{r7, lr}
 8017c5e:	b086      	sub	sp, #24
 8017c60:	af00      	add	r7, sp, #0
 8017c62:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 8017c64:	687b      	ldr	r3, [r7, #4]
 8017c66:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 8017c68:	697b      	ldr	r3, [r7, #20]
 8017c6a:	685b      	ldr	r3, [r3, #4]
 8017c6c:	4798      	blx	r3

  now = sys_now();
 8017c6e:	f7f7 fe35 	bl	800f8dc <sys_now>
 8017c72:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 8017c74:	697b      	ldr	r3, [r7, #20]
 8017c76:	681a      	ldr	r2, [r3, #0]
 8017c78:	4b0f      	ldr	r3, [pc, #60]	; (8017cb8 <lwip_cyclic_timer+0x5c>)
 8017c7a:	681b      	ldr	r3, [r3, #0]
 8017c7c:	4413      	add	r3, r2
 8017c7e:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 8017c80:	68fa      	ldr	r2, [r7, #12]
 8017c82:	693b      	ldr	r3, [r7, #16]
 8017c84:	1ad3      	subs	r3, r2, r3
 8017c86:	0fdb      	lsrs	r3, r3, #31
 8017c88:	f003 0301 	and.w	r3, r3, #1
 8017c8c:	b2db      	uxtb	r3, r3
 8017c8e:	2b00      	cmp	r3, #0
 8017c90:	d009      	beq.n	8017ca6 <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 8017c92:	697b      	ldr	r3, [r7, #20]
 8017c94:	681a      	ldr	r2, [r3, #0]
 8017c96:	693b      	ldr	r3, [r7, #16]
 8017c98:	4413      	add	r3, r2
 8017c9a:	687a      	ldr	r2, [r7, #4]
 8017c9c:	4907      	ldr	r1, [pc, #28]	; (8017cbc <lwip_cyclic_timer+0x60>)
 8017c9e:	4618      	mov	r0, r3
 8017ca0:	f7ff ff6e 	bl	8017b80 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 8017ca4:	e004      	b.n	8017cb0 <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 8017ca6:	687a      	ldr	r2, [r7, #4]
 8017ca8:	4904      	ldr	r1, [pc, #16]	; (8017cbc <lwip_cyclic_timer+0x60>)
 8017caa:	68f8      	ldr	r0, [r7, #12]
 8017cac:	f7ff ff68 	bl	8017b80 <sys_timeout_abs>
}
 8017cb0:	bf00      	nop
 8017cb2:	3718      	adds	r7, #24
 8017cb4:	46bd      	mov	sp, r7
 8017cb6:	bd80      	pop	{r7, pc}
 8017cb8:	20007200 	.word	0x20007200
 8017cbc:	08017c5d 	.word	0x08017c5d

08017cc0 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 8017cc0:	b580      	push	{r7, lr}
 8017cc2:	b082      	sub	sp, #8
 8017cc4:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8017cc6:	2301      	movs	r3, #1
 8017cc8:	607b      	str	r3, [r7, #4]
 8017cca:	e00e      	b.n	8017cea <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 8017ccc:	4a0b      	ldr	r2, [pc, #44]	; (8017cfc <sys_timeouts_init+0x3c>)
 8017cce:	687b      	ldr	r3, [r7, #4]
 8017cd0:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8017cd4:	687b      	ldr	r3, [r7, #4]
 8017cd6:	00db      	lsls	r3, r3, #3
 8017cd8:	4a08      	ldr	r2, [pc, #32]	; (8017cfc <sys_timeouts_init+0x3c>)
 8017cda:	4413      	add	r3, r2
 8017cdc:	461a      	mov	r2, r3
 8017cde:	4908      	ldr	r1, [pc, #32]	; (8017d00 <sys_timeouts_init+0x40>)
 8017ce0:	f000 f810 	bl	8017d04 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8017ce4:	687b      	ldr	r3, [r7, #4]
 8017ce6:	3301      	adds	r3, #1
 8017ce8:	607b      	str	r3, [r7, #4]
 8017cea:	687b      	ldr	r3, [r7, #4]
 8017cec:	2b02      	cmp	r3, #2
 8017cee:	d9ed      	bls.n	8017ccc <sys_timeouts_init+0xc>
  }
}
 8017cf0:	bf00      	nop
 8017cf2:	bf00      	nop
 8017cf4:	3708      	adds	r7, #8
 8017cf6:	46bd      	mov	sp, r7
 8017cf8:	bd80      	pop	{r7, pc}
 8017cfa:	bf00      	nop
 8017cfc:	08020e04 	.word	0x08020e04
 8017d00:	08017c5d 	.word	0x08017c5d

08017d04 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 8017d04:	b580      	push	{r7, lr}
 8017d06:	b086      	sub	sp, #24
 8017d08:	af00      	add	r7, sp, #0
 8017d0a:	60f8      	str	r0, [r7, #12]
 8017d0c:	60b9      	str	r1, [r7, #8]
 8017d0e:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 8017d10:	68fb      	ldr	r3, [r7, #12]
 8017d12:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8017d16:	d306      	bcc.n	8017d26 <sys_timeout+0x22>
 8017d18:	4b0a      	ldr	r3, [pc, #40]	; (8017d44 <sys_timeout+0x40>)
 8017d1a:	f240 1229 	movw	r2, #297	; 0x129
 8017d1e:	490a      	ldr	r1, [pc, #40]	; (8017d48 <sys_timeout+0x44>)
 8017d20:	480a      	ldr	r0, [pc, #40]	; (8017d4c <sys_timeout+0x48>)
 8017d22:	f003 fac9 	bl	801b2b8 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 8017d26:	f7f7 fdd9 	bl	800f8dc <sys_now>
 8017d2a:	4602      	mov	r2, r0
 8017d2c:	68fb      	ldr	r3, [r7, #12]
 8017d2e:	4413      	add	r3, r2
 8017d30:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 8017d32:	687a      	ldr	r2, [r7, #4]
 8017d34:	68b9      	ldr	r1, [r7, #8]
 8017d36:	6978      	ldr	r0, [r7, #20]
 8017d38:	f7ff ff22 	bl	8017b80 <sys_timeout_abs>
#endif
}
 8017d3c:	bf00      	nop
 8017d3e:	3718      	adds	r7, #24
 8017d40:	46bd      	mov	sp, r7
 8017d42:	bd80      	pop	{r7, pc}
 8017d44:	080201d4 	.word	0x080201d4
 8017d48:	08020270 	.word	0x08020270
 8017d4c:	08020248 	.word	0x08020248

08017d50 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 8017d50:	b580      	push	{r7, lr}
 8017d52:	b084      	sub	sp, #16
 8017d54:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 8017d56:	f7f7 fdc1 	bl	800f8dc <sys_now>
 8017d5a:	60f8      	str	r0, [r7, #12]
  do {
    struct sys_timeo *tmptimeout;
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();
 8017d5c:	4b1a      	ldr	r3, [pc, #104]	; (8017dc8 <sys_check_timeouts+0x78>)
 8017d5e:	781b      	ldrb	r3, [r3, #0]
 8017d60:	b2db      	uxtb	r3, r3
 8017d62:	2b00      	cmp	r3, #0
 8017d64:	d001      	beq.n	8017d6a <sys_check_timeouts+0x1a>
 8017d66:	f7f9 f8cb 	bl	8010f00 <pbuf_free_ooseq>

    tmptimeout = next_timeout;
 8017d6a:	4b18      	ldr	r3, [pc, #96]	; (8017dcc <sys_check_timeouts+0x7c>)
 8017d6c:	681b      	ldr	r3, [r3, #0]
 8017d6e:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 8017d70:	68bb      	ldr	r3, [r7, #8]
 8017d72:	2b00      	cmp	r3, #0
 8017d74:	d022      	beq.n	8017dbc <sys_check_timeouts+0x6c>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 8017d76:	68bb      	ldr	r3, [r7, #8]
 8017d78:	685b      	ldr	r3, [r3, #4]
 8017d7a:	68fa      	ldr	r2, [r7, #12]
 8017d7c:	1ad3      	subs	r3, r2, r3
 8017d7e:	0fdb      	lsrs	r3, r3, #31
 8017d80:	f003 0301 	and.w	r3, r3, #1
 8017d84:	b2db      	uxtb	r3, r3
 8017d86:	2b00      	cmp	r3, #0
 8017d88:	d11a      	bne.n	8017dc0 <sys_check_timeouts+0x70>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 8017d8a:	68bb      	ldr	r3, [r7, #8]
 8017d8c:	681b      	ldr	r3, [r3, #0]
 8017d8e:	4a0f      	ldr	r2, [pc, #60]	; (8017dcc <sys_check_timeouts+0x7c>)
 8017d90:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 8017d92:	68bb      	ldr	r3, [r7, #8]
 8017d94:	689b      	ldr	r3, [r3, #8]
 8017d96:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 8017d98:	68bb      	ldr	r3, [r7, #8]
 8017d9a:	68db      	ldr	r3, [r3, #12]
 8017d9c:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 8017d9e:	68bb      	ldr	r3, [r7, #8]
 8017da0:	685b      	ldr	r3, [r3, #4]
 8017da2:	4a0b      	ldr	r2, [pc, #44]	; (8017dd0 <sys_check_timeouts+0x80>)
 8017da4:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 8017da6:	68b9      	ldr	r1, [r7, #8]
 8017da8:	2006      	movs	r0, #6
 8017daa:	f7f8 fd6d 	bl	8010888 <memp_free>
    if (handler != NULL) {
 8017dae:	687b      	ldr	r3, [r7, #4]
 8017db0:	2b00      	cmp	r3, #0
 8017db2:	d0d3      	beq.n	8017d5c <sys_check_timeouts+0xc>
      handler(arg);
 8017db4:	687b      	ldr	r3, [r7, #4]
 8017db6:	6838      	ldr	r0, [r7, #0]
 8017db8:	4798      	blx	r3
  do {
 8017dba:	e7cf      	b.n	8017d5c <sys_check_timeouts+0xc>
      return;
 8017dbc:	bf00      	nop
 8017dbe:	e000      	b.n	8017dc2 <sys_check_timeouts+0x72>
      return;
 8017dc0:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 8017dc2:	3710      	adds	r7, #16
 8017dc4:	46bd      	mov	sp, r7
 8017dc6:	bd80      	pop	{r7, pc}
 8017dc8:	200071a9 	.word	0x200071a9
 8017dcc:	200071fc 	.word	0x200071fc
 8017dd0:	20007200 	.word	0x20007200

08017dd4 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 8017dd4:	b580      	push	{r7, lr}
 8017dd6:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8017dd8:	f002 fd32 	bl	801a840 <rand>
 8017ddc:	4603      	mov	r3, r0
 8017dde:	b29b      	uxth	r3, r3
 8017de0:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8017de4:	b29b      	uxth	r3, r3
 8017de6:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 8017dea:	b29a      	uxth	r2, r3
 8017dec:	4b01      	ldr	r3, [pc, #4]	; (8017df4 <udp_init+0x20>)
 8017dee:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 8017df0:	bf00      	nop
 8017df2:	bd80      	pop	{r7, pc}
 8017df4:	20000170 	.word	0x20000170

08017df8 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 8017df8:	b580      	push	{r7, lr}
 8017dfa:	b084      	sub	sp, #16
 8017dfc:	af00      	add	r7, sp, #0
 8017dfe:	60f8      	str	r0, [r7, #12]
 8017e00:	60b9      	str	r1, [r7, #8]
 8017e02:	4613      	mov	r3, r2
 8017e04:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 8017e06:	68fb      	ldr	r3, [r7, #12]
 8017e08:	2b00      	cmp	r3, #0
 8017e0a:	d105      	bne.n	8017e18 <udp_input_local_match+0x20>
 8017e0c:	4b27      	ldr	r3, [pc, #156]	; (8017eac <udp_input_local_match+0xb4>)
 8017e0e:	2287      	movs	r2, #135	; 0x87
 8017e10:	4927      	ldr	r1, [pc, #156]	; (8017eb0 <udp_input_local_match+0xb8>)
 8017e12:	4828      	ldr	r0, [pc, #160]	; (8017eb4 <udp_input_local_match+0xbc>)
 8017e14:	f003 fa50 	bl	801b2b8 <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 8017e18:	68bb      	ldr	r3, [r7, #8]
 8017e1a:	2b00      	cmp	r3, #0
 8017e1c:	d105      	bne.n	8017e2a <udp_input_local_match+0x32>
 8017e1e:	4b23      	ldr	r3, [pc, #140]	; (8017eac <udp_input_local_match+0xb4>)
 8017e20:	2288      	movs	r2, #136	; 0x88
 8017e22:	4925      	ldr	r1, [pc, #148]	; (8017eb8 <udp_input_local_match+0xc0>)
 8017e24:	4823      	ldr	r0, [pc, #140]	; (8017eb4 <udp_input_local_match+0xbc>)
 8017e26:	f003 fa47 	bl	801b2b8 <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8017e2a:	68fb      	ldr	r3, [r7, #12]
 8017e2c:	7a1b      	ldrb	r3, [r3, #8]
 8017e2e:	2b00      	cmp	r3, #0
 8017e30:	d00b      	beq.n	8017e4a <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8017e32:	68fb      	ldr	r3, [r7, #12]
 8017e34:	7a1a      	ldrb	r2, [r3, #8]
 8017e36:	4b21      	ldr	r3, [pc, #132]	; (8017ebc <udp_input_local_match+0xc4>)
 8017e38:	685b      	ldr	r3, [r3, #4]
 8017e3a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8017e3e:	3301      	adds	r3, #1
 8017e40:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8017e42:	429a      	cmp	r2, r3
 8017e44:	d001      	beq.n	8017e4a <udp_input_local_match+0x52>
    return 0;
 8017e46:	2300      	movs	r3, #0
 8017e48:	e02b      	b.n	8017ea2 <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 8017e4a:	79fb      	ldrb	r3, [r7, #7]
 8017e4c:	2b00      	cmp	r3, #0
 8017e4e:	d018      	beq.n	8017e82 <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8017e50:	68fb      	ldr	r3, [r7, #12]
 8017e52:	2b00      	cmp	r3, #0
 8017e54:	d013      	beq.n	8017e7e <udp_input_local_match+0x86>
 8017e56:	68fb      	ldr	r3, [r7, #12]
 8017e58:	681b      	ldr	r3, [r3, #0]
 8017e5a:	2b00      	cmp	r3, #0
 8017e5c:	d00f      	beq.n	8017e7e <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8017e5e:	4b17      	ldr	r3, [pc, #92]	; (8017ebc <udp_input_local_match+0xc4>)
 8017e60:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8017e62:	f1b3 3fff 	cmp.w	r3, #4294967295
 8017e66:	d00a      	beq.n	8017e7e <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 8017e68:	68fb      	ldr	r3, [r7, #12]
 8017e6a:	681a      	ldr	r2, [r3, #0]
 8017e6c:	4b13      	ldr	r3, [pc, #76]	; (8017ebc <udp_input_local_match+0xc4>)
 8017e6e:	695b      	ldr	r3, [r3, #20]
 8017e70:	405a      	eors	r2, r3
 8017e72:	68bb      	ldr	r3, [r7, #8]
 8017e74:	3308      	adds	r3, #8
 8017e76:	681b      	ldr	r3, [r3, #0]
 8017e78:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8017e7a:	2b00      	cmp	r3, #0
 8017e7c:	d110      	bne.n	8017ea0 <udp_input_local_match+0xa8>
          return 1;
 8017e7e:	2301      	movs	r3, #1
 8017e80:	e00f      	b.n	8017ea2 <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8017e82:	68fb      	ldr	r3, [r7, #12]
 8017e84:	2b00      	cmp	r3, #0
 8017e86:	d009      	beq.n	8017e9c <udp_input_local_match+0xa4>
 8017e88:	68fb      	ldr	r3, [r7, #12]
 8017e8a:	681b      	ldr	r3, [r3, #0]
 8017e8c:	2b00      	cmp	r3, #0
 8017e8e:	d005      	beq.n	8017e9c <udp_input_local_match+0xa4>
 8017e90:	68fb      	ldr	r3, [r7, #12]
 8017e92:	681a      	ldr	r2, [r3, #0]
 8017e94:	4b09      	ldr	r3, [pc, #36]	; (8017ebc <udp_input_local_match+0xc4>)
 8017e96:	695b      	ldr	r3, [r3, #20]
 8017e98:	429a      	cmp	r2, r3
 8017e9a:	d101      	bne.n	8017ea0 <udp_input_local_match+0xa8>
        return 1;
 8017e9c:	2301      	movs	r3, #1
 8017e9e:	e000      	b.n	8017ea2 <udp_input_local_match+0xaa>
      }
  }

  return 0;
 8017ea0:	2300      	movs	r3, #0
}
 8017ea2:	4618      	mov	r0, r3
 8017ea4:	3710      	adds	r7, #16
 8017ea6:	46bd      	mov	sp, r7
 8017ea8:	bd80      	pop	{r7, pc}
 8017eaa:	bf00      	nop
 8017eac:	080202bc 	.word	0x080202bc
 8017eb0:	080202ec 	.word	0x080202ec
 8017eb4:	08020310 	.word	0x08020310
 8017eb8:	08020338 	.word	0x08020338
 8017ebc:	200008d0 	.word	0x200008d0

08017ec0 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 8017ec0:	b590      	push	{r4, r7, lr}
 8017ec2:	b08d      	sub	sp, #52	; 0x34
 8017ec4:	af02      	add	r7, sp, #8
 8017ec6:	6078      	str	r0, [r7, #4]
 8017ec8:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 8017eca:	2300      	movs	r3, #0
 8017ecc:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 8017ece:	687b      	ldr	r3, [r7, #4]
 8017ed0:	2b00      	cmp	r3, #0
 8017ed2:	d105      	bne.n	8017ee0 <udp_input+0x20>
 8017ed4:	4b7c      	ldr	r3, [pc, #496]	; (80180c8 <udp_input+0x208>)
 8017ed6:	22cf      	movs	r2, #207	; 0xcf
 8017ed8:	497c      	ldr	r1, [pc, #496]	; (80180cc <udp_input+0x20c>)
 8017eda:	487d      	ldr	r0, [pc, #500]	; (80180d0 <udp_input+0x210>)
 8017edc:	f003 f9ec 	bl	801b2b8 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 8017ee0:	683b      	ldr	r3, [r7, #0]
 8017ee2:	2b00      	cmp	r3, #0
 8017ee4:	d105      	bne.n	8017ef2 <udp_input+0x32>
 8017ee6:	4b78      	ldr	r3, [pc, #480]	; (80180c8 <udp_input+0x208>)
 8017ee8:	22d0      	movs	r2, #208	; 0xd0
 8017eea:	497a      	ldr	r1, [pc, #488]	; (80180d4 <udp_input+0x214>)
 8017eec:	4878      	ldr	r0, [pc, #480]	; (80180d0 <udp_input+0x210>)
 8017eee:	f003 f9e3 	bl	801b2b8 <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 8017ef2:	687b      	ldr	r3, [r7, #4]
 8017ef4:	895b      	ldrh	r3, [r3, #10]
 8017ef6:	2b07      	cmp	r3, #7
 8017ef8:	d803      	bhi.n	8017f02 <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 8017efa:	6878      	ldr	r0, [r7, #4]
 8017efc:	f7f9 fb3a 	bl	8011574 <pbuf_free>
    goto end;
 8017f00:	e0de      	b.n	80180c0 <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 8017f02:	687b      	ldr	r3, [r7, #4]
 8017f04:	685b      	ldr	r3, [r3, #4]
 8017f06:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 8017f08:	4b73      	ldr	r3, [pc, #460]	; (80180d8 <udp_input+0x218>)
 8017f0a:	695b      	ldr	r3, [r3, #20]
 8017f0c:	4a72      	ldr	r2, [pc, #456]	; (80180d8 <udp_input+0x218>)
 8017f0e:	6812      	ldr	r2, [r2, #0]
 8017f10:	4611      	mov	r1, r2
 8017f12:	4618      	mov	r0, r3
 8017f14:	f001 fcae 	bl	8019874 <ip4_addr_isbroadcast_u32>
 8017f18:	4603      	mov	r3, r0
 8017f1a:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 8017f1c:	697b      	ldr	r3, [r7, #20]
 8017f1e:	881b      	ldrh	r3, [r3, #0]
 8017f20:	b29b      	uxth	r3, r3
 8017f22:	4618      	mov	r0, r3
 8017f24:	f7f7 ff22 	bl	800fd6c <lwip_htons>
 8017f28:	4603      	mov	r3, r0
 8017f2a:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 8017f2c:	697b      	ldr	r3, [r7, #20]
 8017f2e:	885b      	ldrh	r3, [r3, #2]
 8017f30:	b29b      	uxth	r3, r3
 8017f32:	4618      	mov	r0, r3
 8017f34:	f7f7 ff1a 	bl	800fd6c <lwip_htons>
 8017f38:	4603      	mov	r3, r0
 8017f3a:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 8017f3c:	2300      	movs	r3, #0
 8017f3e:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 8017f40:	2300      	movs	r3, #0
 8017f42:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 8017f44:	2300      	movs	r3, #0
 8017f46:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8017f48:	4b64      	ldr	r3, [pc, #400]	; (80180dc <udp_input+0x21c>)
 8017f4a:	681b      	ldr	r3, [r3, #0]
 8017f4c:	627b      	str	r3, [r7, #36]	; 0x24
 8017f4e:	e054      	b.n	8017ffa <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 8017f50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017f52:	8a5b      	ldrh	r3, [r3, #18]
 8017f54:	89fa      	ldrh	r2, [r7, #14]
 8017f56:	429a      	cmp	r2, r3
 8017f58:	d14a      	bne.n	8017ff0 <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 8017f5a:	7cfb      	ldrb	r3, [r7, #19]
 8017f5c:	461a      	mov	r2, r3
 8017f5e:	6839      	ldr	r1, [r7, #0]
 8017f60:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8017f62:	f7ff ff49 	bl	8017df8 <udp_input_local_match>
 8017f66:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 8017f68:	2b00      	cmp	r3, #0
 8017f6a:	d041      	beq.n	8017ff0 <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 8017f6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017f6e:	7c1b      	ldrb	r3, [r3, #16]
 8017f70:	f003 0304 	and.w	r3, r3, #4
 8017f74:	2b00      	cmp	r3, #0
 8017f76:	d11d      	bne.n	8017fb4 <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 8017f78:	69fb      	ldr	r3, [r7, #28]
 8017f7a:	2b00      	cmp	r3, #0
 8017f7c:	d102      	bne.n	8017f84 <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 8017f7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017f80:	61fb      	str	r3, [r7, #28]
 8017f82:	e017      	b.n	8017fb4 <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 8017f84:	7cfb      	ldrb	r3, [r7, #19]
 8017f86:	2b00      	cmp	r3, #0
 8017f88:	d014      	beq.n	8017fb4 <udp_input+0xf4>
 8017f8a:	4b53      	ldr	r3, [pc, #332]	; (80180d8 <udp_input+0x218>)
 8017f8c:	695b      	ldr	r3, [r3, #20]
 8017f8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8017f92:	d10f      	bne.n	8017fb4 <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 8017f94:	69fb      	ldr	r3, [r7, #28]
 8017f96:	681a      	ldr	r2, [r3, #0]
 8017f98:	683b      	ldr	r3, [r7, #0]
 8017f9a:	3304      	adds	r3, #4
 8017f9c:	681b      	ldr	r3, [r3, #0]
 8017f9e:	429a      	cmp	r2, r3
 8017fa0:	d008      	beq.n	8017fb4 <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 8017fa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017fa4:	681a      	ldr	r2, [r3, #0]
 8017fa6:	683b      	ldr	r3, [r7, #0]
 8017fa8:	3304      	adds	r3, #4
 8017faa:	681b      	ldr	r3, [r3, #0]
 8017fac:	429a      	cmp	r2, r3
 8017fae:	d101      	bne.n	8017fb4 <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 8017fb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017fb2:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 8017fb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017fb6:	8a9b      	ldrh	r3, [r3, #20]
 8017fb8:	8a3a      	ldrh	r2, [r7, #16]
 8017fba:	429a      	cmp	r2, r3
 8017fbc:	d118      	bne.n	8017ff0 <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 8017fbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017fc0:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 8017fc2:	2b00      	cmp	r3, #0
 8017fc4:	d005      	beq.n	8017fd2 <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 8017fc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017fc8:	685a      	ldr	r2, [r3, #4]
 8017fca:	4b43      	ldr	r3, [pc, #268]	; (80180d8 <udp_input+0x218>)
 8017fcc:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 8017fce:	429a      	cmp	r2, r3
 8017fd0:	d10e      	bne.n	8017ff0 <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 8017fd2:	6a3b      	ldr	r3, [r7, #32]
 8017fd4:	2b00      	cmp	r3, #0
 8017fd6:	d014      	beq.n	8018002 <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 8017fd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017fda:	68da      	ldr	r2, [r3, #12]
 8017fdc:	6a3b      	ldr	r3, [r7, #32]
 8017fde:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 8017fe0:	4b3e      	ldr	r3, [pc, #248]	; (80180dc <udp_input+0x21c>)
 8017fe2:	681a      	ldr	r2, [r3, #0]
 8017fe4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017fe6:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 8017fe8:	4a3c      	ldr	r2, [pc, #240]	; (80180dc <udp_input+0x21c>)
 8017fea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017fec:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 8017fee:	e008      	b.n	8018002 <udp_input+0x142>
      }
    }

    prev = pcb;
 8017ff0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017ff2:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8017ff4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017ff6:	68db      	ldr	r3, [r3, #12]
 8017ff8:	627b      	str	r3, [r7, #36]	; 0x24
 8017ffa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017ffc:	2b00      	cmp	r3, #0
 8017ffe:	d1a7      	bne.n	8017f50 <udp_input+0x90>
 8018000:	e000      	b.n	8018004 <udp_input+0x144>
        break;
 8018002:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 8018004:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018006:	2b00      	cmp	r3, #0
 8018008:	d101      	bne.n	801800e <udp_input+0x14e>
    pcb = uncon_pcb;
 801800a:	69fb      	ldr	r3, [r7, #28]
 801800c:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 801800e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018010:	2b00      	cmp	r3, #0
 8018012:	d002      	beq.n	801801a <udp_input+0x15a>
    for_us = 1;
 8018014:	2301      	movs	r3, #1
 8018016:	76fb      	strb	r3, [r7, #27]
 8018018:	e00a      	b.n	8018030 <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 801801a:	683b      	ldr	r3, [r7, #0]
 801801c:	3304      	adds	r3, #4
 801801e:	681a      	ldr	r2, [r3, #0]
 8018020:	4b2d      	ldr	r3, [pc, #180]	; (80180d8 <udp_input+0x218>)
 8018022:	695b      	ldr	r3, [r3, #20]
 8018024:	429a      	cmp	r2, r3
 8018026:	bf0c      	ite	eq
 8018028:	2301      	moveq	r3, #1
 801802a:	2300      	movne	r3, #0
 801802c:	b2db      	uxtb	r3, r3
 801802e:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 8018030:	7efb      	ldrb	r3, [r7, #27]
 8018032:	2b00      	cmp	r3, #0
 8018034:	d041      	beq.n	80180ba <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 8018036:	2108      	movs	r1, #8
 8018038:	6878      	ldr	r0, [r7, #4]
 801803a:	f7f9 fa15 	bl	8011468 <pbuf_remove_header>
 801803e:	4603      	mov	r3, r0
 8018040:	2b00      	cmp	r3, #0
 8018042:	d00a      	beq.n	801805a <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 8018044:	4b20      	ldr	r3, [pc, #128]	; (80180c8 <udp_input+0x208>)
 8018046:	f44f 72b8 	mov.w	r2, #368	; 0x170
 801804a:	4925      	ldr	r1, [pc, #148]	; (80180e0 <udp_input+0x220>)
 801804c:	4820      	ldr	r0, [pc, #128]	; (80180d0 <udp_input+0x210>)
 801804e:	f003 f933 	bl	801b2b8 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 8018052:	6878      	ldr	r0, [r7, #4]
 8018054:	f7f9 fa8e 	bl	8011574 <pbuf_free>
      goto end;
 8018058:	e032      	b.n	80180c0 <udp_input+0x200>
    }

    if (pcb != NULL) {
 801805a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801805c:	2b00      	cmp	r3, #0
 801805e:	d012      	beq.n	8018086 <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 8018060:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018062:	699b      	ldr	r3, [r3, #24]
 8018064:	2b00      	cmp	r3, #0
 8018066:	d00a      	beq.n	801807e <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 8018068:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801806a:	699c      	ldr	r4, [r3, #24]
 801806c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801806e:	69d8      	ldr	r0, [r3, #28]
 8018070:	8a3b      	ldrh	r3, [r7, #16]
 8018072:	9300      	str	r3, [sp, #0]
 8018074:	4b1b      	ldr	r3, [pc, #108]	; (80180e4 <udp_input+0x224>)
 8018076:	687a      	ldr	r2, [r7, #4]
 8018078:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801807a:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 801807c:	e021      	b.n	80180c2 <udp_input+0x202>
        pbuf_free(p);
 801807e:	6878      	ldr	r0, [r7, #4]
 8018080:	f7f9 fa78 	bl	8011574 <pbuf_free>
        goto end;
 8018084:	e01c      	b.n	80180c0 <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 8018086:	7cfb      	ldrb	r3, [r7, #19]
 8018088:	2b00      	cmp	r3, #0
 801808a:	d112      	bne.n	80180b2 <udp_input+0x1f2>
 801808c:	4b12      	ldr	r3, [pc, #72]	; (80180d8 <udp_input+0x218>)
 801808e:	695b      	ldr	r3, [r3, #20]
 8018090:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8018094:	2be0      	cmp	r3, #224	; 0xe0
 8018096:	d00c      	beq.n	80180b2 <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 8018098:	4b0f      	ldr	r3, [pc, #60]	; (80180d8 <udp_input+0x218>)
 801809a:	899b      	ldrh	r3, [r3, #12]
 801809c:	3308      	adds	r3, #8
 801809e:	b29b      	uxth	r3, r3
 80180a0:	b21b      	sxth	r3, r3
 80180a2:	4619      	mov	r1, r3
 80180a4:	6878      	ldr	r0, [r7, #4]
 80180a6:	f7f9 fa52 	bl	801154e <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 80180aa:	2103      	movs	r1, #3
 80180ac:	6878      	ldr	r0, [r7, #4]
 80180ae:	f001 f8b7 	bl	8019220 <icmp_dest_unreach>
      pbuf_free(p);
 80180b2:	6878      	ldr	r0, [r7, #4]
 80180b4:	f7f9 fa5e 	bl	8011574 <pbuf_free>
  return;
 80180b8:	e003      	b.n	80180c2 <udp_input+0x202>
    pbuf_free(p);
 80180ba:	6878      	ldr	r0, [r7, #4]
 80180bc:	f7f9 fa5a 	bl	8011574 <pbuf_free>
  return;
 80180c0:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 80180c2:	372c      	adds	r7, #44	; 0x2c
 80180c4:	46bd      	mov	sp, r7
 80180c6:	bd90      	pop	{r4, r7, pc}
 80180c8:	080202bc 	.word	0x080202bc
 80180cc:	08020360 	.word	0x08020360
 80180d0:	08020310 	.word	0x08020310
 80180d4:	08020378 	.word	0x08020378
 80180d8:	200008d0 	.word	0x200008d0
 80180dc:	20007208 	.word	0x20007208
 80180e0:	08020394 	.word	0x08020394
 80180e4:	200008e0 	.word	0x200008e0

080180e8 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 80180e8:	b480      	push	{r7}
 80180ea:	b085      	sub	sp, #20
 80180ec:	af00      	add	r7, sp, #0
 80180ee:	6078      	str	r0, [r7, #4]
 80180f0:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 80180f2:	687b      	ldr	r3, [r7, #4]
 80180f4:	2b00      	cmp	r3, #0
 80180f6:	d01e      	beq.n	8018136 <udp_netif_ip_addr_changed+0x4e>
 80180f8:	687b      	ldr	r3, [r7, #4]
 80180fa:	681b      	ldr	r3, [r3, #0]
 80180fc:	2b00      	cmp	r3, #0
 80180fe:	d01a      	beq.n	8018136 <udp_netif_ip_addr_changed+0x4e>
 8018100:	683b      	ldr	r3, [r7, #0]
 8018102:	2b00      	cmp	r3, #0
 8018104:	d017      	beq.n	8018136 <udp_netif_ip_addr_changed+0x4e>
 8018106:	683b      	ldr	r3, [r7, #0]
 8018108:	681b      	ldr	r3, [r3, #0]
 801810a:	2b00      	cmp	r3, #0
 801810c:	d013      	beq.n	8018136 <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 801810e:	4b0d      	ldr	r3, [pc, #52]	; (8018144 <udp_netif_ip_addr_changed+0x5c>)
 8018110:	681b      	ldr	r3, [r3, #0]
 8018112:	60fb      	str	r3, [r7, #12]
 8018114:	e00c      	b.n	8018130 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 8018116:	68fb      	ldr	r3, [r7, #12]
 8018118:	681a      	ldr	r2, [r3, #0]
 801811a:	687b      	ldr	r3, [r7, #4]
 801811c:	681b      	ldr	r3, [r3, #0]
 801811e:	429a      	cmp	r2, r3
 8018120:	d103      	bne.n	801812a <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 8018122:	683b      	ldr	r3, [r7, #0]
 8018124:	681a      	ldr	r2, [r3, #0]
 8018126:	68fb      	ldr	r3, [r7, #12]
 8018128:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 801812a:	68fb      	ldr	r3, [r7, #12]
 801812c:	68db      	ldr	r3, [r3, #12]
 801812e:	60fb      	str	r3, [r7, #12]
 8018130:	68fb      	ldr	r3, [r7, #12]
 8018132:	2b00      	cmp	r3, #0
 8018134:	d1ef      	bne.n	8018116 <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 8018136:	bf00      	nop
 8018138:	3714      	adds	r7, #20
 801813a:	46bd      	mov	sp, r7
 801813c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018140:	4770      	bx	lr
 8018142:	bf00      	nop
 8018144:	20007208 	.word	0x20007208

08018148 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 8018148:	b580      	push	{r7, lr}
 801814a:	b082      	sub	sp, #8
 801814c:	af00      	add	r7, sp, #0
 801814e:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 8018150:	4915      	ldr	r1, [pc, #84]	; (80181a8 <etharp_free_entry+0x60>)
 8018152:	687a      	ldr	r2, [r7, #4]
 8018154:	4613      	mov	r3, r2
 8018156:	005b      	lsls	r3, r3, #1
 8018158:	4413      	add	r3, r2
 801815a:	00db      	lsls	r3, r3, #3
 801815c:	440b      	add	r3, r1
 801815e:	681b      	ldr	r3, [r3, #0]
 8018160:	2b00      	cmp	r3, #0
 8018162:	d013      	beq.n	801818c <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 8018164:	4910      	ldr	r1, [pc, #64]	; (80181a8 <etharp_free_entry+0x60>)
 8018166:	687a      	ldr	r2, [r7, #4]
 8018168:	4613      	mov	r3, r2
 801816a:	005b      	lsls	r3, r3, #1
 801816c:	4413      	add	r3, r2
 801816e:	00db      	lsls	r3, r3, #3
 8018170:	440b      	add	r3, r1
 8018172:	681b      	ldr	r3, [r3, #0]
 8018174:	4618      	mov	r0, r3
 8018176:	f7f9 f9fd 	bl	8011574 <pbuf_free>
    arp_table[i].q = NULL;
 801817a:	490b      	ldr	r1, [pc, #44]	; (80181a8 <etharp_free_entry+0x60>)
 801817c:	687a      	ldr	r2, [r7, #4]
 801817e:	4613      	mov	r3, r2
 8018180:	005b      	lsls	r3, r3, #1
 8018182:	4413      	add	r3, r2
 8018184:	00db      	lsls	r3, r3, #3
 8018186:	440b      	add	r3, r1
 8018188:	2200      	movs	r2, #0
 801818a:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 801818c:	4906      	ldr	r1, [pc, #24]	; (80181a8 <etharp_free_entry+0x60>)
 801818e:	687a      	ldr	r2, [r7, #4]
 8018190:	4613      	mov	r3, r2
 8018192:	005b      	lsls	r3, r3, #1
 8018194:	4413      	add	r3, r2
 8018196:	00db      	lsls	r3, r3, #3
 8018198:	440b      	add	r3, r1
 801819a:	3314      	adds	r3, #20
 801819c:	2200      	movs	r2, #0
 801819e:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 80181a0:	bf00      	nop
 80181a2:	3708      	adds	r7, #8
 80181a4:	46bd      	mov	sp, r7
 80181a6:	bd80      	pop	{r7, pc}
 80181a8:	2000720c 	.word	0x2000720c

080181ac <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 80181ac:	b580      	push	{r7, lr}
 80181ae:	b082      	sub	sp, #8
 80181b0:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80181b2:	2300      	movs	r3, #0
 80181b4:	607b      	str	r3, [r7, #4]
 80181b6:	e096      	b.n	80182e6 <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 80181b8:	494f      	ldr	r1, [pc, #316]	; (80182f8 <etharp_tmr+0x14c>)
 80181ba:	687a      	ldr	r2, [r7, #4]
 80181bc:	4613      	mov	r3, r2
 80181be:	005b      	lsls	r3, r3, #1
 80181c0:	4413      	add	r3, r2
 80181c2:	00db      	lsls	r3, r3, #3
 80181c4:	440b      	add	r3, r1
 80181c6:	3314      	adds	r3, #20
 80181c8:	781b      	ldrb	r3, [r3, #0]
 80181ca:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 80181cc:	78fb      	ldrb	r3, [r7, #3]
 80181ce:	2b00      	cmp	r3, #0
 80181d0:	f000 8086 	beq.w	80182e0 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 80181d4:	4948      	ldr	r1, [pc, #288]	; (80182f8 <etharp_tmr+0x14c>)
 80181d6:	687a      	ldr	r2, [r7, #4]
 80181d8:	4613      	mov	r3, r2
 80181da:	005b      	lsls	r3, r3, #1
 80181dc:	4413      	add	r3, r2
 80181de:	00db      	lsls	r3, r3, #3
 80181e0:	440b      	add	r3, r1
 80181e2:	3312      	adds	r3, #18
 80181e4:	881b      	ldrh	r3, [r3, #0]
 80181e6:	3301      	adds	r3, #1
 80181e8:	b298      	uxth	r0, r3
 80181ea:	4943      	ldr	r1, [pc, #268]	; (80182f8 <etharp_tmr+0x14c>)
 80181ec:	687a      	ldr	r2, [r7, #4]
 80181ee:	4613      	mov	r3, r2
 80181f0:	005b      	lsls	r3, r3, #1
 80181f2:	4413      	add	r3, r2
 80181f4:	00db      	lsls	r3, r3, #3
 80181f6:	440b      	add	r3, r1
 80181f8:	3312      	adds	r3, #18
 80181fa:	4602      	mov	r2, r0
 80181fc:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 80181fe:	493e      	ldr	r1, [pc, #248]	; (80182f8 <etharp_tmr+0x14c>)
 8018200:	687a      	ldr	r2, [r7, #4]
 8018202:	4613      	mov	r3, r2
 8018204:	005b      	lsls	r3, r3, #1
 8018206:	4413      	add	r3, r2
 8018208:	00db      	lsls	r3, r3, #3
 801820a:	440b      	add	r3, r1
 801820c:	3312      	adds	r3, #18
 801820e:	881b      	ldrh	r3, [r3, #0]
 8018210:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8018214:	d215      	bcs.n	8018242 <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8018216:	4938      	ldr	r1, [pc, #224]	; (80182f8 <etharp_tmr+0x14c>)
 8018218:	687a      	ldr	r2, [r7, #4]
 801821a:	4613      	mov	r3, r2
 801821c:	005b      	lsls	r3, r3, #1
 801821e:	4413      	add	r3, r2
 8018220:	00db      	lsls	r3, r3, #3
 8018222:	440b      	add	r3, r1
 8018224:	3314      	adds	r3, #20
 8018226:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8018228:	2b01      	cmp	r3, #1
 801822a:	d10e      	bne.n	801824a <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 801822c:	4932      	ldr	r1, [pc, #200]	; (80182f8 <etharp_tmr+0x14c>)
 801822e:	687a      	ldr	r2, [r7, #4]
 8018230:	4613      	mov	r3, r2
 8018232:	005b      	lsls	r3, r3, #1
 8018234:	4413      	add	r3, r2
 8018236:	00db      	lsls	r3, r3, #3
 8018238:	440b      	add	r3, r1
 801823a:	3312      	adds	r3, #18
 801823c:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 801823e:	2b04      	cmp	r3, #4
 8018240:	d903      	bls.n	801824a <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 8018242:	6878      	ldr	r0, [r7, #4]
 8018244:	f7ff ff80 	bl	8018148 <etharp_free_entry>
 8018248:	e04a      	b.n	80182e0 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 801824a:	492b      	ldr	r1, [pc, #172]	; (80182f8 <etharp_tmr+0x14c>)
 801824c:	687a      	ldr	r2, [r7, #4]
 801824e:	4613      	mov	r3, r2
 8018250:	005b      	lsls	r3, r3, #1
 8018252:	4413      	add	r3, r2
 8018254:	00db      	lsls	r3, r3, #3
 8018256:	440b      	add	r3, r1
 8018258:	3314      	adds	r3, #20
 801825a:	781b      	ldrb	r3, [r3, #0]
 801825c:	2b03      	cmp	r3, #3
 801825e:	d10a      	bne.n	8018276 <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 8018260:	4925      	ldr	r1, [pc, #148]	; (80182f8 <etharp_tmr+0x14c>)
 8018262:	687a      	ldr	r2, [r7, #4]
 8018264:	4613      	mov	r3, r2
 8018266:	005b      	lsls	r3, r3, #1
 8018268:	4413      	add	r3, r2
 801826a:	00db      	lsls	r3, r3, #3
 801826c:	440b      	add	r3, r1
 801826e:	3314      	adds	r3, #20
 8018270:	2204      	movs	r2, #4
 8018272:	701a      	strb	r2, [r3, #0]
 8018274:	e034      	b.n	80182e0 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 8018276:	4920      	ldr	r1, [pc, #128]	; (80182f8 <etharp_tmr+0x14c>)
 8018278:	687a      	ldr	r2, [r7, #4]
 801827a:	4613      	mov	r3, r2
 801827c:	005b      	lsls	r3, r3, #1
 801827e:	4413      	add	r3, r2
 8018280:	00db      	lsls	r3, r3, #3
 8018282:	440b      	add	r3, r1
 8018284:	3314      	adds	r3, #20
 8018286:	781b      	ldrb	r3, [r3, #0]
 8018288:	2b04      	cmp	r3, #4
 801828a:	d10a      	bne.n	80182a2 <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 801828c:	491a      	ldr	r1, [pc, #104]	; (80182f8 <etharp_tmr+0x14c>)
 801828e:	687a      	ldr	r2, [r7, #4]
 8018290:	4613      	mov	r3, r2
 8018292:	005b      	lsls	r3, r3, #1
 8018294:	4413      	add	r3, r2
 8018296:	00db      	lsls	r3, r3, #3
 8018298:	440b      	add	r3, r1
 801829a:	3314      	adds	r3, #20
 801829c:	2202      	movs	r2, #2
 801829e:	701a      	strb	r2, [r3, #0]
 80182a0:	e01e      	b.n	80182e0 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 80182a2:	4915      	ldr	r1, [pc, #84]	; (80182f8 <etharp_tmr+0x14c>)
 80182a4:	687a      	ldr	r2, [r7, #4]
 80182a6:	4613      	mov	r3, r2
 80182a8:	005b      	lsls	r3, r3, #1
 80182aa:	4413      	add	r3, r2
 80182ac:	00db      	lsls	r3, r3, #3
 80182ae:	440b      	add	r3, r1
 80182b0:	3314      	adds	r3, #20
 80182b2:	781b      	ldrb	r3, [r3, #0]
 80182b4:	2b01      	cmp	r3, #1
 80182b6:	d113      	bne.n	80182e0 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 80182b8:	490f      	ldr	r1, [pc, #60]	; (80182f8 <etharp_tmr+0x14c>)
 80182ba:	687a      	ldr	r2, [r7, #4]
 80182bc:	4613      	mov	r3, r2
 80182be:	005b      	lsls	r3, r3, #1
 80182c0:	4413      	add	r3, r2
 80182c2:	00db      	lsls	r3, r3, #3
 80182c4:	440b      	add	r3, r1
 80182c6:	3308      	adds	r3, #8
 80182c8:	6818      	ldr	r0, [r3, #0]
 80182ca:	687a      	ldr	r2, [r7, #4]
 80182cc:	4613      	mov	r3, r2
 80182ce:	005b      	lsls	r3, r3, #1
 80182d0:	4413      	add	r3, r2
 80182d2:	00db      	lsls	r3, r3, #3
 80182d4:	4a08      	ldr	r2, [pc, #32]	; (80182f8 <etharp_tmr+0x14c>)
 80182d6:	4413      	add	r3, r2
 80182d8:	3304      	adds	r3, #4
 80182da:	4619      	mov	r1, r3
 80182dc:	f000 fe6e 	bl	8018fbc <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80182e0:	687b      	ldr	r3, [r7, #4]
 80182e2:	3301      	adds	r3, #1
 80182e4:	607b      	str	r3, [r7, #4]
 80182e6:	687b      	ldr	r3, [r7, #4]
 80182e8:	2b09      	cmp	r3, #9
 80182ea:	f77f af65 	ble.w	80181b8 <etharp_tmr+0xc>
      }
    }
  }
}
 80182ee:	bf00      	nop
 80182f0:	bf00      	nop
 80182f2:	3708      	adds	r7, #8
 80182f4:	46bd      	mov	sp, r7
 80182f6:	bd80      	pop	{r7, pc}
 80182f8:	2000720c 	.word	0x2000720c

080182fc <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 80182fc:	b580      	push	{r7, lr}
 80182fe:	b08a      	sub	sp, #40	; 0x28
 8018300:	af00      	add	r7, sp, #0
 8018302:	60f8      	str	r0, [r7, #12]
 8018304:	460b      	mov	r3, r1
 8018306:	607a      	str	r2, [r7, #4]
 8018308:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 801830a:	230a      	movs	r3, #10
 801830c:	84fb      	strh	r3, [r7, #38]	; 0x26
 801830e:	230a      	movs	r3, #10
 8018310:	84bb      	strh	r3, [r7, #36]	; 0x24
  s16_t empty = ARP_TABLE_SIZE;
 8018312:	230a      	movs	r3, #10
 8018314:	847b      	strh	r3, [r7, #34]	; 0x22
  s16_t i = 0;
 8018316:	2300      	movs	r3, #0
 8018318:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 801831a:	230a      	movs	r3, #10
 801831c:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 801831e:	2300      	movs	r3, #0
 8018320:	83bb      	strh	r3, [r7, #28]
 8018322:	2300      	movs	r3, #0
 8018324:	837b      	strh	r3, [r7, #26]
 8018326:	2300      	movs	r3, #0
 8018328:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801832a:	2300      	movs	r3, #0
 801832c:	843b      	strh	r3, [r7, #32]
 801832e:	e0ae      	b.n	801848e <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 8018330:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8018334:	49a6      	ldr	r1, [pc, #664]	; (80185d0 <etharp_find_entry+0x2d4>)
 8018336:	4613      	mov	r3, r2
 8018338:	005b      	lsls	r3, r3, #1
 801833a:	4413      	add	r3, r2
 801833c:	00db      	lsls	r3, r3, #3
 801833e:	440b      	add	r3, r1
 8018340:	3314      	adds	r3, #20
 8018342:	781b      	ldrb	r3, [r3, #0]
 8018344:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 8018346:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 801834a:	2b0a      	cmp	r3, #10
 801834c:	d105      	bne.n	801835a <etharp_find_entry+0x5e>
 801834e:	7dfb      	ldrb	r3, [r7, #23]
 8018350:	2b00      	cmp	r3, #0
 8018352:	d102      	bne.n	801835a <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 8018354:	8c3b      	ldrh	r3, [r7, #32]
 8018356:	847b      	strh	r3, [r7, #34]	; 0x22
 8018358:	e095      	b.n	8018486 <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 801835a:	7dfb      	ldrb	r3, [r7, #23]
 801835c:	2b00      	cmp	r3, #0
 801835e:	f000 8092 	beq.w	8018486 <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 8018362:	7dfb      	ldrb	r3, [r7, #23]
 8018364:	2b01      	cmp	r3, #1
 8018366:	d009      	beq.n	801837c <etharp_find_entry+0x80>
 8018368:	7dfb      	ldrb	r3, [r7, #23]
 801836a:	2b01      	cmp	r3, #1
 801836c:	d806      	bhi.n	801837c <etharp_find_entry+0x80>
 801836e:	4b99      	ldr	r3, [pc, #612]	; (80185d4 <etharp_find_entry+0x2d8>)
 8018370:	f240 1223 	movw	r2, #291	; 0x123
 8018374:	4998      	ldr	r1, [pc, #608]	; (80185d8 <etharp_find_entry+0x2dc>)
 8018376:	4899      	ldr	r0, [pc, #612]	; (80185dc <etharp_find_entry+0x2e0>)
 8018378:	f002 ff9e 	bl	801b2b8 <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 801837c:	68fb      	ldr	r3, [r7, #12]
 801837e:	2b00      	cmp	r3, #0
 8018380:	d020      	beq.n	80183c4 <etharp_find_entry+0xc8>
 8018382:	68fb      	ldr	r3, [r7, #12]
 8018384:	6819      	ldr	r1, [r3, #0]
 8018386:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801838a:	4891      	ldr	r0, [pc, #580]	; (80185d0 <etharp_find_entry+0x2d4>)
 801838c:	4613      	mov	r3, r2
 801838e:	005b      	lsls	r3, r3, #1
 8018390:	4413      	add	r3, r2
 8018392:	00db      	lsls	r3, r3, #3
 8018394:	4403      	add	r3, r0
 8018396:	3304      	adds	r3, #4
 8018398:	681b      	ldr	r3, [r3, #0]
 801839a:	4299      	cmp	r1, r3
 801839c:	d112      	bne.n	80183c4 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 801839e:	687b      	ldr	r3, [r7, #4]
 80183a0:	2b00      	cmp	r3, #0
 80183a2:	d00c      	beq.n	80183be <etharp_find_entry+0xc2>
 80183a4:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80183a8:	4989      	ldr	r1, [pc, #548]	; (80185d0 <etharp_find_entry+0x2d4>)
 80183aa:	4613      	mov	r3, r2
 80183ac:	005b      	lsls	r3, r3, #1
 80183ae:	4413      	add	r3, r2
 80183b0:	00db      	lsls	r3, r3, #3
 80183b2:	440b      	add	r3, r1
 80183b4:	3308      	adds	r3, #8
 80183b6:	681b      	ldr	r3, [r3, #0]
 80183b8:	687a      	ldr	r2, [r7, #4]
 80183ba:	429a      	cmp	r2, r3
 80183bc:	d102      	bne.n	80183c4 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 80183be:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80183c2:	e100      	b.n	80185c6 <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 80183c4:	7dfb      	ldrb	r3, [r7, #23]
 80183c6:	2b01      	cmp	r3, #1
 80183c8:	d140      	bne.n	801844c <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 80183ca:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80183ce:	4980      	ldr	r1, [pc, #512]	; (80185d0 <etharp_find_entry+0x2d4>)
 80183d0:	4613      	mov	r3, r2
 80183d2:	005b      	lsls	r3, r3, #1
 80183d4:	4413      	add	r3, r2
 80183d6:	00db      	lsls	r3, r3, #3
 80183d8:	440b      	add	r3, r1
 80183da:	681b      	ldr	r3, [r3, #0]
 80183dc:	2b00      	cmp	r3, #0
 80183de:	d01a      	beq.n	8018416 <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 80183e0:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80183e4:	497a      	ldr	r1, [pc, #488]	; (80185d0 <etharp_find_entry+0x2d4>)
 80183e6:	4613      	mov	r3, r2
 80183e8:	005b      	lsls	r3, r3, #1
 80183ea:	4413      	add	r3, r2
 80183ec:	00db      	lsls	r3, r3, #3
 80183ee:	440b      	add	r3, r1
 80183f0:	3312      	adds	r3, #18
 80183f2:	881b      	ldrh	r3, [r3, #0]
 80183f4:	8bba      	ldrh	r2, [r7, #28]
 80183f6:	429a      	cmp	r2, r3
 80183f8:	d845      	bhi.n	8018486 <etharp_find_entry+0x18a>
            old_queue = i;
 80183fa:	8c3b      	ldrh	r3, [r7, #32]
 80183fc:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 80183fe:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8018402:	4973      	ldr	r1, [pc, #460]	; (80185d0 <etharp_find_entry+0x2d4>)
 8018404:	4613      	mov	r3, r2
 8018406:	005b      	lsls	r3, r3, #1
 8018408:	4413      	add	r3, r2
 801840a:	00db      	lsls	r3, r3, #3
 801840c:	440b      	add	r3, r1
 801840e:	3312      	adds	r3, #18
 8018410:	881b      	ldrh	r3, [r3, #0]
 8018412:	83bb      	strh	r3, [r7, #28]
 8018414:	e037      	b.n	8018486 <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 8018416:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801841a:	496d      	ldr	r1, [pc, #436]	; (80185d0 <etharp_find_entry+0x2d4>)
 801841c:	4613      	mov	r3, r2
 801841e:	005b      	lsls	r3, r3, #1
 8018420:	4413      	add	r3, r2
 8018422:	00db      	lsls	r3, r3, #3
 8018424:	440b      	add	r3, r1
 8018426:	3312      	adds	r3, #18
 8018428:	881b      	ldrh	r3, [r3, #0]
 801842a:	8b7a      	ldrh	r2, [r7, #26]
 801842c:	429a      	cmp	r2, r3
 801842e:	d82a      	bhi.n	8018486 <etharp_find_entry+0x18a>
            old_pending = i;
 8018430:	8c3b      	ldrh	r3, [r7, #32]
 8018432:	84fb      	strh	r3, [r7, #38]	; 0x26
            age_pending = arp_table[i].ctime;
 8018434:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8018438:	4965      	ldr	r1, [pc, #404]	; (80185d0 <etharp_find_entry+0x2d4>)
 801843a:	4613      	mov	r3, r2
 801843c:	005b      	lsls	r3, r3, #1
 801843e:	4413      	add	r3, r2
 8018440:	00db      	lsls	r3, r3, #3
 8018442:	440b      	add	r3, r1
 8018444:	3312      	adds	r3, #18
 8018446:	881b      	ldrh	r3, [r3, #0]
 8018448:	837b      	strh	r3, [r7, #26]
 801844a:	e01c      	b.n	8018486 <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 801844c:	7dfb      	ldrb	r3, [r7, #23]
 801844e:	2b01      	cmp	r3, #1
 8018450:	d919      	bls.n	8018486 <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 8018452:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8018456:	495e      	ldr	r1, [pc, #376]	; (80185d0 <etharp_find_entry+0x2d4>)
 8018458:	4613      	mov	r3, r2
 801845a:	005b      	lsls	r3, r3, #1
 801845c:	4413      	add	r3, r2
 801845e:	00db      	lsls	r3, r3, #3
 8018460:	440b      	add	r3, r1
 8018462:	3312      	adds	r3, #18
 8018464:	881b      	ldrh	r3, [r3, #0]
 8018466:	8b3a      	ldrh	r2, [r7, #24]
 8018468:	429a      	cmp	r2, r3
 801846a:	d80c      	bhi.n	8018486 <etharp_find_entry+0x18a>
            old_stable = i;
 801846c:	8c3b      	ldrh	r3, [r7, #32]
 801846e:	84bb      	strh	r3, [r7, #36]	; 0x24
            age_stable = arp_table[i].ctime;
 8018470:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8018474:	4956      	ldr	r1, [pc, #344]	; (80185d0 <etharp_find_entry+0x2d4>)
 8018476:	4613      	mov	r3, r2
 8018478:	005b      	lsls	r3, r3, #1
 801847a:	4413      	add	r3, r2
 801847c:	00db      	lsls	r3, r3, #3
 801847e:	440b      	add	r3, r1
 8018480:	3312      	adds	r3, #18
 8018482:	881b      	ldrh	r3, [r3, #0]
 8018484:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8018486:	8c3b      	ldrh	r3, [r7, #32]
 8018488:	3301      	adds	r3, #1
 801848a:	b29b      	uxth	r3, r3
 801848c:	843b      	strh	r3, [r7, #32]
 801848e:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8018492:	2b09      	cmp	r3, #9
 8018494:	f77f af4c 	ble.w	8018330 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 8018498:	7afb      	ldrb	r3, [r7, #11]
 801849a:	f003 0302 	and.w	r3, r3, #2
 801849e:	2b00      	cmp	r3, #0
 80184a0:	d108      	bne.n	80184b4 <etharp_find_entry+0x1b8>
 80184a2:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 80184a6:	2b0a      	cmp	r3, #10
 80184a8:	d107      	bne.n	80184ba <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 80184aa:	7afb      	ldrb	r3, [r7, #11]
 80184ac:	f003 0301 	and.w	r3, r3, #1
 80184b0:	2b00      	cmp	r3, #0
 80184b2:	d102      	bne.n	80184ba <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 80184b4:	f04f 33ff 	mov.w	r3, #4294967295
 80184b8:	e085      	b.n	80185c6 <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 80184ba:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 80184be:	2b09      	cmp	r3, #9
 80184c0:	dc02      	bgt.n	80184c8 <etharp_find_entry+0x1cc>
    i = empty;
 80184c2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80184c4:	843b      	strh	r3, [r7, #32]
 80184c6:	e039      	b.n	801853c <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 80184c8:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 80184cc:	2b09      	cmp	r3, #9
 80184ce:	dc14      	bgt.n	80184fa <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 80184d0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80184d2:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 80184d4:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80184d8:	493d      	ldr	r1, [pc, #244]	; (80185d0 <etharp_find_entry+0x2d4>)
 80184da:	4613      	mov	r3, r2
 80184dc:	005b      	lsls	r3, r3, #1
 80184de:	4413      	add	r3, r2
 80184e0:	00db      	lsls	r3, r3, #3
 80184e2:	440b      	add	r3, r1
 80184e4:	681b      	ldr	r3, [r3, #0]
 80184e6:	2b00      	cmp	r3, #0
 80184e8:	d018      	beq.n	801851c <etharp_find_entry+0x220>
 80184ea:	4b3a      	ldr	r3, [pc, #232]	; (80185d4 <etharp_find_entry+0x2d8>)
 80184ec:	f240 126d 	movw	r2, #365	; 0x16d
 80184f0:	493b      	ldr	r1, [pc, #236]	; (80185e0 <etharp_find_entry+0x2e4>)
 80184f2:	483a      	ldr	r0, [pc, #232]	; (80185dc <etharp_find_entry+0x2e0>)
 80184f4:	f002 fee0 	bl	801b2b8 <iprintf>
 80184f8:	e010      	b.n	801851c <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 80184fa:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 80184fe:	2b09      	cmp	r3, #9
 8018500:	dc02      	bgt.n	8018508 <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 8018502:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8018504:	843b      	strh	r3, [r7, #32]
 8018506:	e009      	b.n	801851c <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 8018508:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 801850c:	2b09      	cmp	r3, #9
 801850e:	dc02      	bgt.n	8018516 <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 8018510:	8bfb      	ldrh	r3, [r7, #30]
 8018512:	843b      	strh	r3, [r7, #32]
 8018514:	e002      	b.n	801851c <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 8018516:	f04f 33ff 	mov.w	r3, #4294967295
 801851a:	e054      	b.n	80185c6 <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 801851c:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8018520:	2b09      	cmp	r3, #9
 8018522:	dd06      	ble.n	8018532 <etharp_find_entry+0x236>
 8018524:	4b2b      	ldr	r3, [pc, #172]	; (80185d4 <etharp_find_entry+0x2d8>)
 8018526:	f240 127f 	movw	r2, #383	; 0x17f
 801852a:	492e      	ldr	r1, [pc, #184]	; (80185e4 <etharp_find_entry+0x2e8>)
 801852c:	482b      	ldr	r0, [pc, #172]	; (80185dc <etharp_find_entry+0x2e0>)
 801852e:	f002 fec3 	bl	801b2b8 <iprintf>
    etharp_free_entry(i);
 8018532:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8018536:	4618      	mov	r0, r3
 8018538:	f7ff fe06 	bl	8018148 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 801853c:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8018540:	2b09      	cmp	r3, #9
 8018542:	dd06      	ble.n	8018552 <etharp_find_entry+0x256>
 8018544:	4b23      	ldr	r3, [pc, #140]	; (80185d4 <etharp_find_entry+0x2d8>)
 8018546:	f240 1283 	movw	r2, #387	; 0x183
 801854a:	4926      	ldr	r1, [pc, #152]	; (80185e4 <etharp_find_entry+0x2e8>)
 801854c:	4823      	ldr	r0, [pc, #140]	; (80185dc <etharp_find_entry+0x2e0>)
 801854e:	f002 feb3 	bl	801b2b8 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 8018552:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8018556:	491e      	ldr	r1, [pc, #120]	; (80185d0 <etharp_find_entry+0x2d4>)
 8018558:	4613      	mov	r3, r2
 801855a:	005b      	lsls	r3, r3, #1
 801855c:	4413      	add	r3, r2
 801855e:	00db      	lsls	r3, r3, #3
 8018560:	440b      	add	r3, r1
 8018562:	3314      	adds	r3, #20
 8018564:	781b      	ldrb	r3, [r3, #0]
 8018566:	2b00      	cmp	r3, #0
 8018568:	d006      	beq.n	8018578 <etharp_find_entry+0x27c>
 801856a:	4b1a      	ldr	r3, [pc, #104]	; (80185d4 <etharp_find_entry+0x2d8>)
 801856c:	f44f 72c2 	mov.w	r2, #388	; 0x184
 8018570:	491d      	ldr	r1, [pc, #116]	; (80185e8 <etharp_find_entry+0x2ec>)
 8018572:	481a      	ldr	r0, [pc, #104]	; (80185dc <etharp_find_entry+0x2e0>)
 8018574:	f002 fea0 	bl	801b2b8 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 8018578:	68fb      	ldr	r3, [r7, #12]
 801857a:	2b00      	cmp	r3, #0
 801857c:	d00b      	beq.n	8018596 <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 801857e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8018582:	68fb      	ldr	r3, [r7, #12]
 8018584:	6819      	ldr	r1, [r3, #0]
 8018586:	4812      	ldr	r0, [pc, #72]	; (80185d0 <etharp_find_entry+0x2d4>)
 8018588:	4613      	mov	r3, r2
 801858a:	005b      	lsls	r3, r3, #1
 801858c:	4413      	add	r3, r2
 801858e:	00db      	lsls	r3, r3, #3
 8018590:	4403      	add	r3, r0
 8018592:	3304      	adds	r3, #4
 8018594:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 8018596:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801859a:	490d      	ldr	r1, [pc, #52]	; (80185d0 <etharp_find_entry+0x2d4>)
 801859c:	4613      	mov	r3, r2
 801859e:	005b      	lsls	r3, r3, #1
 80185a0:	4413      	add	r3, r2
 80185a2:	00db      	lsls	r3, r3, #3
 80185a4:	440b      	add	r3, r1
 80185a6:	3312      	adds	r3, #18
 80185a8:	2200      	movs	r2, #0
 80185aa:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 80185ac:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80185b0:	4907      	ldr	r1, [pc, #28]	; (80185d0 <etharp_find_entry+0x2d4>)
 80185b2:	4613      	mov	r3, r2
 80185b4:	005b      	lsls	r3, r3, #1
 80185b6:	4413      	add	r3, r2
 80185b8:	00db      	lsls	r3, r3, #3
 80185ba:	440b      	add	r3, r1
 80185bc:	3308      	adds	r3, #8
 80185be:	687a      	ldr	r2, [r7, #4]
 80185c0:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 80185c2:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 80185c6:	4618      	mov	r0, r3
 80185c8:	3728      	adds	r7, #40	; 0x28
 80185ca:	46bd      	mov	sp, r7
 80185cc:	bd80      	pop	{r7, pc}
 80185ce:	bf00      	nop
 80185d0:	2000720c 	.word	0x2000720c
 80185d4:	08020620 	.word	0x08020620
 80185d8:	08020658 	.word	0x08020658
 80185dc:	08020698 	.word	0x08020698
 80185e0:	080206c0 	.word	0x080206c0
 80185e4:	080206d8 	.word	0x080206d8
 80185e8:	080206ec 	.word	0x080206ec

080185ec <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 80185ec:	b580      	push	{r7, lr}
 80185ee:	b088      	sub	sp, #32
 80185f0:	af02      	add	r7, sp, #8
 80185f2:	60f8      	str	r0, [r7, #12]
 80185f4:	60b9      	str	r1, [r7, #8]
 80185f6:	607a      	str	r2, [r7, #4]
 80185f8:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 80185fa:	68fb      	ldr	r3, [r7, #12]
 80185fc:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8018600:	2b06      	cmp	r3, #6
 8018602:	d006      	beq.n	8018612 <etharp_update_arp_entry+0x26>
 8018604:	4b48      	ldr	r3, [pc, #288]	; (8018728 <etharp_update_arp_entry+0x13c>)
 8018606:	f240 12a9 	movw	r2, #425	; 0x1a9
 801860a:	4948      	ldr	r1, [pc, #288]	; (801872c <etharp_update_arp_entry+0x140>)
 801860c:	4848      	ldr	r0, [pc, #288]	; (8018730 <etharp_update_arp_entry+0x144>)
 801860e:	f002 fe53 	bl	801b2b8 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 8018612:	68bb      	ldr	r3, [r7, #8]
 8018614:	2b00      	cmp	r3, #0
 8018616:	d012      	beq.n	801863e <etharp_update_arp_entry+0x52>
 8018618:	68bb      	ldr	r3, [r7, #8]
 801861a:	681b      	ldr	r3, [r3, #0]
 801861c:	2b00      	cmp	r3, #0
 801861e:	d00e      	beq.n	801863e <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8018620:	68bb      	ldr	r3, [r7, #8]
 8018622:	681b      	ldr	r3, [r3, #0]
 8018624:	68f9      	ldr	r1, [r7, #12]
 8018626:	4618      	mov	r0, r3
 8018628:	f001 f924 	bl	8019874 <ip4_addr_isbroadcast_u32>
 801862c:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 801862e:	2b00      	cmp	r3, #0
 8018630:	d105      	bne.n	801863e <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 8018632:	68bb      	ldr	r3, [r7, #8]
 8018634:	681b      	ldr	r3, [r3, #0]
 8018636:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 801863a:	2be0      	cmp	r3, #224	; 0xe0
 801863c:	d102      	bne.n	8018644 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 801863e:	f06f 030f 	mvn.w	r3, #15
 8018642:	e06c      	b.n	801871e <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 8018644:	78fb      	ldrb	r3, [r7, #3]
 8018646:	68fa      	ldr	r2, [r7, #12]
 8018648:	4619      	mov	r1, r3
 801864a:	68b8      	ldr	r0, [r7, #8]
 801864c:	f7ff fe56 	bl	80182fc <etharp_find_entry>
 8018650:	4603      	mov	r3, r0
 8018652:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 8018654:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8018658:	2b00      	cmp	r3, #0
 801865a:	da02      	bge.n	8018662 <etharp_update_arp_entry+0x76>
    return (err_t)i;
 801865c:	8afb      	ldrh	r3, [r7, #22]
 801865e:	b25b      	sxtb	r3, r3
 8018660:	e05d      	b.n	801871e <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 8018662:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8018666:	4933      	ldr	r1, [pc, #204]	; (8018734 <etharp_update_arp_entry+0x148>)
 8018668:	4613      	mov	r3, r2
 801866a:	005b      	lsls	r3, r3, #1
 801866c:	4413      	add	r3, r2
 801866e:	00db      	lsls	r3, r3, #3
 8018670:	440b      	add	r3, r1
 8018672:	3314      	adds	r3, #20
 8018674:	2202      	movs	r2, #2
 8018676:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 8018678:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801867c:	492d      	ldr	r1, [pc, #180]	; (8018734 <etharp_update_arp_entry+0x148>)
 801867e:	4613      	mov	r3, r2
 8018680:	005b      	lsls	r3, r3, #1
 8018682:	4413      	add	r3, r2
 8018684:	00db      	lsls	r3, r3, #3
 8018686:	440b      	add	r3, r1
 8018688:	3308      	adds	r3, #8
 801868a:	68fa      	ldr	r2, [r7, #12]
 801868c:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 801868e:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8018692:	4613      	mov	r3, r2
 8018694:	005b      	lsls	r3, r3, #1
 8018696:	4413      	add	r3, r2
 8018698:	00db      	lsls	r3, r3, #3
 801869a:	3308      	adds	r3, #8
 801869c:	4a25      	ldr	r2, [pc, #148]	; (8018734 <etharp_update_arp_entry+0x148>)
 801869e:	4413      	add	r3, r2
 80186a0:	3304      	adds	r3, #4
 80186a2:	2206      	movs	r2, #6
 80186a4:	6879      	ldr	r1, [r7, #4]
 80186a6:	4618      	mov	r0, r3
 80186a8:	f003 f821 	bl	801b6ee <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 80186ac:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80186b0:	4920      	ldr	r1, [pc, #128]	; (8018734 <etharp_update_arp_entry+0x148>)
 80186b2:	4613      	mov	r3, r2
 80186b4:	005b      	lsls	r3, r3, #1
 80186b6:	4413      	add	r3, r2
 80186b8:	00db      	lsls	r3, r3, #3
 80186ba:	440b      	add	r3, r1
 80186bc:	3312      	adds	r3, #18
 80186be:	2200      	movs	r2, #0
 80186c0:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 80186c2:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80186c6:	491b      	ldr	r1, [pc, #108]	; (8018734 <etharp_update_arp_entry+0x148>)
 80186c8:	4613      	mov	r3, r2
 80186ca:	005b      	lsls	r3, r3, #1
 80186cc:	4413      	add	r3, r2
 80186ce:	00db      	lsls	r3, r3, #3
 80186d0:	440b      	add	r3, r1
 80186d2:	681b      	ldr	r3, [r3, #0]
 80186d4:	2b00      	cmp	r3, #0
 80186d6:	d021      	beq.n	801871c <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 80186d8:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80186dc:	4915      	ldr	r1, [pc, #84]	; (8018734 <etharp_update_arp_entry+0x148>)
 80186de:	4613      	mov	r3, r2
 80186e0:	005b      	lsls	r3, r3, #1
 80186e2:	4413      	add	r3, r2
 80186e4:	00db      	lsls	r3, r3, #3
 80186e6:	440b      	add	r3, r1
 80186e8:	681b      	ldr	r3, [r3, #0]
 80186ea:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 80186ec:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80186f0:	4910      	ldr	r1, [pc, #64]	; (8018734 <etharp_update_arp_entry+0x148>)
 80186f2:	4613      	mov	r3, r2
 80186f4:	005b      	lsls	r3, r3, #1
 80186f6:	4413      	add	r3, r2
 80186f8:	00db      	lsls	r3, r3, #3
 80186fa:	440b      	add	r3, r1
 80186fc:	2200      	movs	r2, #0
 80186fe:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 8018700:	68fb      	ldr	r3, [r7, #12]
 8018702:	f103 0226 	add.w	r2, r3, #38	; 0x26
 8018706:	f44f 6300 	mov.w	r3, #2048	; 0x800
 801870a:	9300      	str	r3, [sp, #0]
 801870c:	687b      	ldr	r3, [r7, #4]
 801870e:	6939      	ldr	r1, [r7, #16]
 8018710:	68f8      	ldr	r0, [r7, #12]
 8018712:	f002 f84d 	bl	801a7b0 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 8018716:	6938      	ldr	r0, [r7, #16]
 8018718:	f7f8 ff2c 	bl	8011574 <pbuf_free>
  }
  return ERR_OK;
 801871c:	2300      	movs	r3, #0
}
 801871e:	4618      	mov	r0, r3
 8018720:	3718      	adds	r7, #24
 8018722:	46bd      	mov	sp, r7
 8018724:	bd80      	pop	{r7, pc}
 8018726:	bf00      	nop
 8018728:	08020620 	.word	0x08020620
 801872c:	08020718 	.word	0x08020718
 8018730:	08020698 	.word	0x08020698
 8018734:	2000720c 	.word	0x2000720c

08018738 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 8018738:	b580      	push	{r7, lr}
 801873a:	b084      	sub	sp, #16
 801873c:	af00      	add	r7, sp, #0
 801873e:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8018740:	2300      	movs	r3, #0
 8018742:	60fb      	str	r3, [r7, #12]
 8018744:	e01e      	b.n	8018784 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 8018746:	4913      	ldr	r1, [pc, #76]	; (8018794 <etharp_cleanup_netif+0x5c>)
 8018748:	68fa      	ldr	r2, [r7, #12]
 801874a:	4613      	mov	r3, r2
 801874c:	005b      	lsls	r3, r3, #1
 801874e:	4413      	add	r3, r2
 8018750:	00db      	lsls	r3, r3, #3
 8018752:	440b      	add	r3, r1
 8018754:	3314      	adds	r3, #20
 8018756:	781b      	ldrb	r3, [r3, #0]
 8018758:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 801875a:	7afb      	ldrb	r3, [r7, #11]
 801875c:	2b00      	cmp	r3, #0
 801875e:	d00e      	beq.n	801877e <etharp_cleanup_netif+0x46>
 8018760:	490c      	ldr	r1, [pc, #48]	; (8018794 <etharp_cleanup_netif+0x5c>)
 8018762:	68fa      	ldr	r2, [r7, #12]
 8018764:	4613      	mov	r3, r2
 8018766:	005b      	lsls	r3, r3, #1
 8018768:	4413      	add	r3, r2
 801876a:	00db      	lsls	r3, r3, #3
 801876c:	440b      	add	r3, r1
 801876e:	3308      	adds	r3, #8
 8018770:	681b      	ldr	r3, [r3, #0]
 8018772:	687a      	ldr	r2, [r7, #4]
 8018774:	429a      	cmp	r2, r3
 8018776:	d102      	bne.n	801877e <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 8018778:	68f8      	ldr	r0, [r7, #12]
 801877a:	f7ff fce5 	bl	8018148 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801877e:	68fb      	ldr	r3, [r7, #12]
 8018780:	3301      	adds	r3, #1
 8018782:	60fb      	str	r3, [r7, #12]
 8018784:	68fb      	ldr	r3, [r7, #12]
 8018786:	2b09      	cmp	r3, #9
 8018788:	dddd      	ble.n	8018746 <etharp_cleanup_netif+0xe>
    }
  }
}
 801878a:	bf00      	nop
 801878c:	bf00      	nop
 801878e:	3710      	adds	r7, #16
 8018790:	46bd      	mov	sp, r7
 8018792:	bd80      	pop	{r7, pc}
 8018794:	2000720c 	.word	0x2000720c

08018798 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 8018798:	b5b0      	push	{r4, r5, r7, lr}
 801879a:	b08a      	sub	sp, #40	; 0x28
 801879c:	af04      	add	r7, sp, #16
 801879e:	6078      	str	r0, [r7, #4]
 80187a0:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 80187a2:	683b      	ldr	r3, [r7, #0]
 80187a4:	2b00      	cmp	r3, #0
 80187a6:	d107      	bne.n	80187b8 <etharp_input+0x20>
 80187a8:	4b3d      	ldr	r3, [pc, #244]	; (80188a0 <etharp_input+0x108>)
 80187aa:	f240 228a 	movw	r2, #650	; 0x28a
 80187ae:	493d      	ldr	r1, [pc, #244]	; (80188a4 <etharp_input+0x10c>)
 80187b0:	483d      	ldr	r0, [pc, #244]	; (80188a8 <etharp_input+0x110>)
 80187b2:	f002 fd81 	bl	801b2b8 <iprintf>
 80187b6:	e06f      	b.n	8018898 <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 80187b8:	687b      	ldr	r3, [r7, #4]
 80187ba:	685b      	ldr	r3, [r3, #4]
 80187bc:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 80187be:	693b      	ldr	r3, [r7, #16]
 80187c0:	881b      	ldrh	r3, [r3, #0]
 80187c2:	b29b      	uxth	r3, r3
 80187c4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80187c8:	d10c      	bne.n	80187e4 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 80187ca:	693b      	ldr	r3, [r7, #16]
 80187cc:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 80187ce:	2b06      	cmp	r3, #6
 80187d0:	d108      	bne.n	80187e4 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 80187d2:	693b      	ldr	r3, [r7, #16]
 80187d4:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 80187d6:	2b04      	cmp	r3, #4
 80187d8:	d104      	bne.n	80187e4 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 80187da:	693b      	ldr	r3, [r7, #16]
 80187dc:	885b      	ldrh	r3, [r3, #2]
 80187de:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 80187e0:	2b08      	cmp	r3, #8
 80187e2:	d003      	beq.n	80187ec <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 80187e4:	6878      	ldr	r0, [r7, #4]
 80187e6:	f7f8 fec5 	bl	8011574 <pbuf_free>
    return;
 80187ea:	e055      	b.n	8018898 <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 80187ec:	693b      	ldr	r3, [r7, #16]
 80187ee:	330e      	adds	r3, #14
 80187f0:	681b      	ldr	r3, [r3, #0]
 80187f2:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 80187f4:	693b      	ldr	r3, [r7, #16]
 80187f6:	3318      	adds	r3, #24
 80187f8:	681b      	ldr	r3, [r3, #0]
 80187fa:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 80187fc:	683b      	ldr	r3, [r7, #0]
 80187fe:	3304      	adds	r3, #4
 8018800:	681b      	ldr	r3, [r3, #0]
 8018802:	2b00      	cmp	r3, #0
 8018804:	d102      	bne.n	801880c <etharp_input+0x74>
    for_us = 0;
 8018806:	2300      	movs	r3, #0
 8018808:	75fb      	strb	r3, [r7, #23]
 801880a:	e009      	b.n	8018820 <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 801880c:	68ba      	ldr	r2, [r7, #8]
 801880e:	683b      	ldr	r3, [r7, #0]
 8018810:	3304      	adds	r3, #4
 8018812:	681b      	ldr	r3, [r3, #0]
 8018814:	429a      	cmp	r2, r3
 8018816:	bf0c      	ite	eq
 8018818:	2301      	moveq	r3, #1
 801881a:	2300      	movne	r3, #0
 801881c:	b2db      	uxtb	r3, r3
 801881e:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 8018820:	693b      	ldr	r3, [r7, #16]
 8018822:	f103 0208 	add.w	r2, r3, #8
 8018826:	7dfb      	ldrb	r3, [r7, #23]
 8018828:	2b00      	cmp	r3, #0
 801882a:	d001      	beq.n	8018830 <etharp_input+0x98>
 801882c:	2301      	movs	r3, #1
 801882e:	e000      	b.n	8018832 <etharp_input+0x9a>
 8018830:	2302      	movs	r3, #2
 8018832:	f107 010c 	add.w	r1, r7, #12
 8018836:	6838      	ldr	r0, [r7, #0]
 8018838:	f7ff fed8 	bl	80185ec <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 801883c:	693b      	ldr	r3, [r7, #16]
 801883e:	88db      	ldrh	r3, [r3, #6]
 8018840:	b29b      	uxth	r3, r3
 8018842:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8018846:	d003      	beq.n	8018850 <etharp_input+0xb8>
 8018848:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801884c:	d01e      	beq.n	801888c <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 801884e:	e020      	b.n	8018892 <etharp_input+0xfa>
      if (for_us) {
 8018850:	7dfb      	ldrb	r3, [r7, #23]
 8018852:	2b00      	cmp	r3, #0
 8018854:	d01c      	beq.n	8018890 <etharp_input+0xf8>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 8018856:	683b      	ldr	r3, [r7, #0]
 8018858:	f103 0026 	add.w	r0, r3, #38	; 0x26
 801885c:	693b      	ldr	r3, [r7, #16]
 801885e:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 8018862:	683b      	ldr	r3, [r7, #0]
 8018864:	f103 0526 	add.w	r5, r3, #38	; 0x26
 8018868:	683b      	ldr	r3, [r7, #0]
 801886a:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 801886c:	693a      	ldr	r2, [r7, #16]
 801886e:	3208      	adds	r2, #8
        etharp_raw(netif,
 8018870:	2102      	movs	r1, #2
 8018872:	9103      	str	r1, [sp, #12]
 8018874:	f107 010c 	add.w	r1, r7, #12
 8018878:	9102      	str	r1, [sp, #8]
 801887a:	9201      	str	r2, [sp, #4]
 801887c:	9300      	str	r3, [sp, #0]
 801887e:	462b      	mov	r3, r5
 8018880:	4622      	mov	r2, r4
 8018882:	4601      	mov	r1, r0
 8018884:	6838      	ldr	r0, [r7, #0]
 8018886:	f000 faeb 	bl	8018e60 <etharp_raw>
      break;
 801888a:	e001      	b.n	8018890 <etharp_input+0xf8>
      break;
 801888c:	bf00      	nop
 801888e:	e000      	b.n	8018892 <etharp_input+0xfa>
      break;
 8018890:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 8018892:	6878      	ldr	r0, [r7, #4]
 8018894:	f7f8 fe6e 	bl	8011574 <pbuf_free>
}
 8018898:	3718      	adds	r7, #24
 801889a:	46bd      	mov	sp, r7
 801889c:	bdb0      	pop	{r4, r5, r7, pc}
 801889e:	bf00      	nop
 80188a0:	08020620 	.word	0x08020620
 80188a4:	08020770 	.word	0x08020770
 80188a8:	08020698 	.word	0x08020698

080188ac <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 80188ac:	b580      	push	{r7, lr}
 80188ae:	b086      	sub	sp, #24
 80188b0:	af02      	add	r7, sp, #8
 80188b2:	60f8      	str	r0, [r7, #12]
 80188b4:	60b9      	str	r1, [r7, #8]
 80188b6:	4613      	mov	r3, r2
 80188b8:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 80188ba:	79fa      	ldrb	r2, [r7, #7]
 80188bc:	4944      	ldr	r1, [pc, #272]	; (80189d0 <etharp_output_to_arp_index+0x124>)
 80188be:	4613      	mov	r3, r2
 80188c0:	005b      	lsls	r3, r3, #1
 80188c2:	4413      	add	r3, r2
 80188c4:	00db      	lsls	r3, r3, #3
 80188c6:	440b      	add	r3, r1
 80188c8:	3314      	adds	r3, #20
 80188ca:	781b      	ldrb	r3, [r3, #0]
 80188cc:	2b01      	cmp	r3, #1
 80188ce:	d806      	bhi.n	80188de <etharp_output_to_arp_index+0x32>
 80188d0:	4b40      	ldr	r3, [pc, #256]	; (80189d4 <etharp_output_to_arp_index+0x128>)
 80188d2:	f240 22ee 	movw	r2, #750	; 0x2ee
 80188d6:	4940      	ldr	r1, [pc, #256]	; (80189d8 <etharp_output_to_arp_index+0x12c>)
 80188d8:	4840      	ldr	r0, [pc, #256]	; (80189dc <etharp_output_to_arp_index+0x130>)
 80188da:	f002 fced 	bl	801b2b8 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 80188de:	79fa      	ldrb	r2, [r7, #7]
 80188e0:	493b      	ldr	r1, [pc, #236]	; (80189d0 <etharp_output_to_arp_index+0x124>)
 80188e2:	4613      	mov	r3, r2
 80188e4:	005b      	lsls	r3, r3, #1
 80188e6:	4413      	add	r3, r2
 80188e8:	00db      	lsls	r3, r3, #3
 80188ea:	440b      	add	r3, r1
 80188ec:	3314      	adds	r3, #20
 80188ee:	781b      	ldrb	r3, [r3, #0]
 80188f0:	2b02      	cmp	r3, #2
 80188f2:	d153      	bne.n	801899c <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 80188f4:	79fa      	ldrb	r2, [r7, #7]
 80188f6:	4936      	ldr	r1, [pc, #216]	; (80189d0 <etharp_output_to_arp_index+0x124>)
 80188f8:	4613      	mov	r3, r2
 80188fa:	005b      	lsls	r3, r3, #1
 80188fc:	4413      	add	r3, r2
 80188fe:	00db      	lsls	r3, r3, #3
 8018900:	440b      	add	r3, r1
 8018902:	3312      	adds	r3, #18
 8018904:	881b      	ldrh	r3, [r3, #0]
 8018906:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 801890a:	d919      	bls.n	8018940 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 801890c:	79fa      	ldrb	r2, [r7, #7]
 801890e:	4613      	mov	r3, r2
 8018910:	005b      	lsls	r3, r3, #1
 8018912:	4413      	add	r3, r2
 8018914:	00db      	lsls	r3, r3, #3
 8018916:	4a2e      	ldr	r2, [pc, #184]	; (80189d0 <etharp_output_to_arp_index+0x124>)
 8018918:	4413      	add	r3, r2
 801891a:	3304      	adds	r3, #4
 801891c:	4619      	mov	r1, r3
 801891e:	68f8      	ldr	r0, [r7, #12]
 8018920:	f000 fb4c 	bl	8018fbc <etharp_request>
 8018924:	4603      	mov	r3, r0
 8018926:	2b00      	cmp	r3, #0
 8018928:	d138      	bne.n	801899c <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 801892a:	79fa      	ldrb	r2, [r7, #7]
 801892c:	4928      	ldr	r1, [pc, #160]	; (80189d0 <etharp_output_to_arp_index+0x124>)
 801892e:	4613      	mov	r3, r2
 8018930:	005b      	lsls	r3, r3, #1
 8018932:	4413      	add	r3, r2
 8018934:	00db      	lsls	r3, r3, #3
 8018936:	440b      	add	r3, r1
 8018938:	3314      	adds	r3, #20
 801893a:	2203      	movs	r2, #3
 801893c:	701a      	strb	r2, [r3, #0]
 801893e:	e02d      	b.n	801899c <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 8018940:	79fa      	ldrb	r2, [r7, #7]
 8018942:	4923      	ldr	r1, [pc, #140]	; (80189d0 <etharp_output_to_arp_index+0x124>)
 8018944:	4613      	mov	r3, r2
 8018946:	005b      	lsls	r3, r3, #1
 8018948:	4413      	add	r3, r2
 801894a:	00db      	lsls	r3, r3, #3
 801894c:	440b      	add	r3, r1
 801894e:	3312      	adds	r3, #18
 8018950:	881b      	ldrh	r3, [r3, #0]
 8018952:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 8018956:	d321      	bcc.n	801899c <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 8018958:	79fa      	ldrb	r2, [r7, #7]
 801895a:	4613      	mov	r3, r2
 801895c:	005b      	lsls	r3, r3, #1
 801895e:	4413      	add	r3, r2
 8018960:	00db      	lsls	r3, r3, #3
 8018962:	4a1b      	ldr	r2, [pc, #108]	; (80189d0 <etharp_output_to_arp_index+0x124>)
 8018964:	4413      	add	r3, r2
 8018966:	1d19      	adds	r1, r3, #4
 8018968:	79fa      	ldrb	r2, [r7, #7]
 801896a:	4613      	mov	r3, r2
 801896c:	005b      	lsls	r3, r3, #1
 801896e:	4413      	add	r3, r2
 8018970:	00db      	lsls	r3, r3, #3
 8018972:	3308      	adds	r3, #8
 8018974:	4a16      	ldr	r2, [pc, #88]	; (80189d0 <etharp_output_to_arp_index+0x124>)
 8018976:	4413      	add	r3, r2
 8018978:	3304      	adds	r3, #4
 801897a:	461a      	mov	r2, r3
 801897c:	68f8      	ldr	r0, [r7, #12]
 801897e:	f000 fafb 	bl	8018f78 <etharp_request_dst>
 8018982:	4603      	mov	r3, r0
 8018984:	2b00      	cmp	r3, #0
 8018986:	d109      	bne.n	801899c <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8018988:	79fa      	ldrb	r2, [r7, #7]
 801898a:	4911      	ldr	r1, [pc, #68]	; (80189d0 <etharp_output_to_arp_index+0x124>)
 801898c:	4613      	mov	r3, r2
 801898e:	005b      	lsls	r3, r3, #1
 8018990:	4413      	add	r3, r2
 8018992:	00db      	lsls	r3, r3, #3
 8018994:	440b      	add	r3, r1
 8018996:	3314      	adds	r3, #20
 8018998:	2203      	movs	r2, #3
 801899a:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 801899c:	68fb      	ldr	r3, [r7, #12]
 801899e:	f103 0126 	add.w	r1, r3, #38	; 0x26
 80189a2:	79fa      	ldrb	r2, [r7, #7]
 80189a4:	4613      	mov	r3, r2
 80189a6:	005b      	lsls	r3, r3, #1
 80189a8:	4413      	add	r3, r2
 80189aa:	00db      	lsls	r3, r3, #3
 80189ac:	3308      	adds	r3, #8
 80189ae:	4a08      	ldr	r2, [pc, #32]	; (80189d0 <etharp_output_to_arp_index+0x124>)
 80189b0:	4413      	add	r3, r2
 80189b2:	3304      	adds	r3, #4
 80189b4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80189b8:	9200      	str	r2, [sp, #0]
 80189ba:	460a      	mov	r2, r1
 80189bc:	68b9      	ldr	r1, [r7, #8]
 80189be:	68f8      	ldr	r0, [r7, #12]
 80189c0:	f001 fef6 	bl	801a7b0 <ethernet_output>
 80189c4:	4603      	mov	r3, r0
}
 80189c6:	4618      	mov	r0, r3
 80189c8:	3710      	adds	r7, #16
 80189ca:	46bd      	mov	sp, r7
 80189cc:	bd80      	pop	{r7, pc}
 80189ce:	bf00      	nop
 80189d0:	2000720c 	.word	0x2000720c
 80189d4:	08020620 	.word	0x08020620
 80189d8:	08020790 	.word	0x08020790
 80189dc:	08020698 	.word	0x08020698

080189e0 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 80189e0:	b580      	push	{r7, lr}
 80189e2:	b08a      	sub	sp, #40	; 0x28
 80189e4:	af02      	add	r7, sp, #8
 80189e6:	60f8      	str	r0, [r7, #12]
 80189e8:	60b9      	str	r1, [r7, #8]
 80189ea:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 80189ec:	687b      	ldr	r3, [r7, #4]
 80189ee:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 80189f0:	68fb      	ldr	r3, [r7, #12]
 80189f2:	2b00      	cmp	r3, #0
 80189f4:	d106      	bne.n	8018a04 <etharp_output+0x24>
 80189f6:	4b73      	ldr	r3, [pc, #460]	; (8018bc4 <etharp_output+0x1e4>)
 80189f8:	f240 321e 	movw	r2, #798	; 0x31e
 80189fc:	4972      	ldr	r1, [pc, #456]	; (8018bc8 <etharp_output+0x1e8>)
 80189fe:	4873      	ldr	r0, [pc, #460]	; (8018bcc <etharp_output+0x1ec>)
 8018a00:	f002 fc5a 	bl	801b2b8 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 8018a04:	68bb      	ldr	r3, [r7, #8]
 8018a06:	2b00      	cmp	r3, #0
 8018a08:	d106      	bne.n	8018a18 <etharp_output+0x38>
 8018a0a:	4b6e      	ldr	r3, [pc, #440]	; (8018bc4 <etharp_output+0x1e4>)
 8018a0c:	f240 321f 	movw	r2, #799	; 0x31f
 8018a10:	496f      	ldr	r1, [pc, #444]	; (8018bd0 <etharp_output+0x1f0>)
 8018a12:	486e      	ldr	r0, [pc, #440]	; (8018bcc <etharp_output+0x1ec>)
 8018a14:	f002 fc50 	bl	801b2b8 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 8018a18:	687b      	ldr	r3, [r7, #4]
 8018a1a:	2b00      	cmp	r3, #0
 8018a1c:	d106      	bne.n	8018a2c <etharp_output+0x4c>
 8018a1e:	4b69      	ldr	r3, [pc, #420]	; (8018bc4 <etharp_output+0x1e4>)
 8018a20:	f44f 7248 	mov.w	r2, #800	; 0x320
 8018a24:	496b      	ldr	r1, [pc, #428]	; (8018bd4 <etharp_output+0x1f4>)
 8018a26:	4869      	ldr	r0, [pc, #420]	; (8018bcc <etharp_output+0x1ec>)
 8018a28:	f002 fc46 	bl	801b2b8 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 8018a2c:	687b      	ldr	r3, [r7, #4]
 8018a2e:	681b      	ldr	r3, [r3, #0]
 8018a30:	68f9      	ldr	r1, [r7, #12]
 8018a32:	4618      	mov	r0, r3
 8018a34:	f000 ff1e 	bl	8019874 <ip4_addr_isbroadcast_u32>
 8018a38:	4603      	mov	r3, r0
 8018a3a:	2b00      	cmp	r3, #0
 8018a3c:	d002      	beq.n	8018a44 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 8018a3e:	4b66      	ldr	r3, [pc, #408]	; (8018bd8 <etharp_output+0x1f8>)
 8018a40:	61fb      	str	r3, [r7, #28]
 8018a42:	e0af      	b.n	8018ba4 <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 8018a44:	687b      	ldr	r3, [r7, #4]
 8018a46:	681b      	ldr	r3, [r3, #0]
 8018a48:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8018a4c:	2be0      	cmp	r3, #224	; 0xe0
 8018a4e:	d118      	bne.n	8018a82 <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 8018a50:	2301      	movs	r3, #1
 8018a52:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 8018a54:	2300      	movs	r3, #0
 8018a56:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 8018a58:	235e      	movs	r3, #94	; 0x5e
 8018a5a:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 8018a5c:	687b      	ldr	r3, [r7, #4]
 8018a5e:	3301      	adds	r3, #1
 8018a60:	781b      	ldrb	r3, [r3, #0]
 8018a62:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8018a66:	b2db      	uxtb	r3, r3
 8018a68:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 8018a6a:	687b      	ldr	r3, [r7, #4]
 8018a6c:	3302      	adds	r3, #2
 8018a6e:	781b      	ldrb	r3, [r3, #0]
 8018a70:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 8018a72:	687b      	ldr	r3, [r7, #4]
 8018a74:	3303      	adds	r3, #3
 8018a76:	781b      	ldrb	r3, [r3, #0]
 8018a78:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 8018a7a:	f107 0310 	add.w	r3, r7, #16
 8018a7e:	61fb      	str	r3, [r7, #28]
 8018a80:	e090      	b.n	8018ba4 <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8018a82:	687b      	ldr	r3, [r7, #4]
 8018a84:	681a      	ldr	r2, [r3, #0]
 8018a86:	68fb      	ldr	r3, [r7, #12]
 8018a88:	3304      	adds	r3, #4
 8018a8a:	681b      	ldr	r3, [r3, #0]
 8018a8c:	405a      	eors	r2, r3
 8018a8e:	68fb      	ldr	r3, [r7, #12]
 8018a90:	3308      	adds	r3, #8
 8018a92:	681b      	ldr	r3, [r3, #0]
 8018a94:	4013      	ands	r3, r2
 8018a96:	2b00      	cmp	r3, #0
 8018a98:	d012      	beq.n	8018ac0 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 8018a9a:	687b      	ldr	r3, [r7, #4]
 8018a9c:	681b      	ldr	r3, [r3, #0]
 8018a9e:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8018aa0:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 8018aa4:	4293      	cmp	r3, r2
 8018aa6:	d00b      	beq.n	8018ac0 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 8018aa8:	68fb      	ldr	r3, [r7, #12]
 8018aaa:	330c      	adds	r3, #12
 8018aac:	681b      	ldr	r3, [r3, #0]
 8018aae:	2b00      	cmp	r3, #0
 8018ab0:	d003      	beq.n	8018aba <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 8018ab2:	68fb      	ldr	r3, [r7, #12]
 8018ab4:	330c      	adds	r3, #12
 8018ab6:	61bb      	str	r3, [r7, #24]
 8018ab8:	e002      	b.n	8018ac0 <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 8018aba:	f06f 0303 	mvn.w	r3, #3
 8018abe:	e07d      	b.n	8018bbc <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8018ac0:	4b46      	ldr	r3, [pc, #280]	; (8018bdc <etharp_output+0x1fc>)
 8018ac2:	781b      	ldrb	r3, [r3, #0]
 8018ac4:	4619      	mov	r1, r3
 8018ac6:	4a46      	ldr	r2, [pc, #280]	; (8018be0 <etharp_output+0x200>)
 8018ac8:	460b      	mov	r3, r1
 8018aca:	005b      	lsls	r3, r3, #1
 8018acc:	440b      	add	r3, r1
 8018ace:	00db      	lsls	r3, r3, #3
 8018ad0:	4413      	add	r3, r2
 8018ad2:	3314      	adds	r3, #20
 8018ad4:	781b      	ldrb	r3, [r3, #0]
 8018ad6:	2b01      	cmp	r3, #1
 8018ad8:	d925      	bls.n	8018b26 <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 8018ada:	4b40      	ldr	r3, [pc, #256]	; (8018bdc <etharp_output+0x1fc>)
 8018adc:	781b      	ldrb	r3, [r3, #0]
 8018ade:	4619      	mov	r1, r3
 8018ae0:	4a3f      	ldr	r2, [pc, #252]	; (8018be0 <etharp_output+0x200>)
 8018ae2:	460b      	mov	r3, r1
 8018ae4:	005b      	lsls	r3, r3, #1
 8018ae6:	440b      	add	r3, r1
 8018ae8:	00db      	lsls	r3, r3, #3
 8018aea:	4413      	add	r3, r2
 8018aec:	3308      	adds	r3, #8
 8018aee:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8018af0:	68fa      	ldr	r2, [r7, #12]
 8018af2:	429a      	cmp	r2, r3
 8018af4:	d117      	bne.n	8018b26 <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 8018af6:	69bb      	ldr	r3, [r7, #24]
 8018af8:	681a      	ldr	r2, [r3, #0]
 8018afa:	4b38      	ldr	r3, [pc, #224]	; (8018bdc <etharp_output+0x1fc>)
 8018afc:	781b      	ldrb	r3, [r3, #0]
 8018afe:	4618      	mov	r0, r3
 8018b00:	4937      	ldr	r1, [pc, #220]	; (8018be0 <etharp_output+0x200>)
 8018b02:	4603      	mov	r3, r0
 8018b04:	005b      	lsls	r3, r3, #1
 8018b06:	4403      	add	r3, r0
 8018b08:	00db      	lsls	r3, r3, #3
 8018b0a:	440b      	add	r3, r1
 8018b0c:	3304      	adds	r3, #4
 8018b0e:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 8018b10:	429a      	cmp	r2, r3
 8018b12:	d108      	bne.n	8018b26 <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 8018b14:	4b31      	ldr	r3, [pc, #196]	; (8018bdc <etharp_output+0x1fc>)
 8018b16:	781b      	ldrb	r3, [r3, #0]
 8018b18:	461a      	mov	r2, r3
 8018b1a:	68b9      	ldr	r1, [r7, #8]
 8018b1c:	68f8      	ldr	r0, [r7, #12]
 8018b1e:	f7ff fec5 	bl	80188ac <etharp_output_to_arp_index>
 8018b22:	4603      	mov	r3, r0
 8018b24:	e04a      	b.n	8018bbc <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8018b26:	2300      	movs	r3, #0
 8018b28:	75fb      	strb	r3, [r7, #23]
 8018b2a:	e031      	b.n	8018b90 <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8018b2c:	7dfa      	ldrb	r2, [r7, #23]
 8018b2e:	492c      	ldr	r1, [pc, #176]	; (8018be0 <etharp_output+0x200>)
 8018b30:	4613      	mov	r3, r2
 8018b32:	005b      	lsls	r3, r3, #1
 8018b34:	4413      	add	r3, r2
 8018b36:	00db      	lsls	r3, r3, #3
 8018b38:	440b      	add	r3, r1
 8018b3a:	3314      	adds	r3, #20
 8018b3c:	781b      	ldrb	r3, [r3, #0]
 8018b3e:	2b01      	cmp	r3, #1
 8018b40:	d923      	bls.n	8018b8a <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 8018b42:	7dfa      	ldrb	r2, [r7, #23]
 8018b44:	4926      	ldr	r1, [pc, #152]	; (8018be0 <etharp_output+0x200>)
 8018b46:	4613      	mov	r3, r2
 8018b48:	005b      	lsls	r3, r3, #1
 8018b4a:	4413      	add	r3, r2
 8018b4c:	00db      	lsls	r3, r3, #3
 8018b4e:	440b      	add	r3, r1
 8018b50:	3308      	adds	r3, #8
 8018b52:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8018b54:	68fa      	ldr	r2, [r7, #12]
 8018b56:	429a      	cmp	r2, r3
 8018b58:	d117      	bne.n	8018b8a <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 8018b5a:	69bb      	ldr	r3, [r7, #24]
 8018b5c:	6819      	ldr	r1, [r3, #0]
 8018b5e:	7dfa      	ldrb	r2, [r7, #23]
 8018b60:	481f      	ldr	r0, [pc, #124]	; (8018be0 <etharp_output+0x200>)
 8018b62:	4613      	mov	r3, r2
 8018b64:	005b      	lsls	r3, r3, #1
 8018b66:	4413      	add	r3, r2
 8018b68:	00db      	lsls	r3, r3, #3
 8018b6a:	4403      	add	r3, r0
 8018b6c:	3304      	adds	r3, #4
 8018b6e:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 8018b70:	4299      	cmp	r1, r3
 8018b72:	d10a      	bne.n	8018b8a <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 8018b74:	4a19      	ldr	r2, [pc, #100]	; (8018bdc <etharp_output+0x1fc>)
 8018b76:	7dfb      	ldrb	r3, [r7, #23]
 8018b78:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 8018b7a:	7dfb      	ldrb	r3, [r7, #23]
 8018b7c:	461a      	mov	r2, r3
 8018b7e:	68b9      	ldr	r1, [r7, #8]
 8018b80:	68f8      	ldr	r0, [r7, #12]
 8018b82:	f7ff fe93 	bl	80188ac <etharp_output_to_arp_index>
 8018b86:	4603      	mov	r3, r0
 8018b88:	e018      	b.n	8018bbc <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8018b8a:	7dfb      	ldrb	r3, [r7, #23]
 8018b8c:	3301      	adds	r3, #1
 8018b8e:	75fb      	strb	r3, [r7, #23]
 8018b90:	7dfb      	ldrb	r3, [r7, #23]
 8018b92:	2b09      	cmp	r3, #9
 8018b94:	d9ca      	bls.n	8018b2c <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 8018b96:	68ba      	ldr	r2, [r7, #8]
 8018b98:	69b9      	ldr	r1, [r7, #24]
 8018b9a:	68f8      	ldr	r0, [r7, #12]
 8018b9c:	f000 f822 	bl	8018be4 <etharp_query>
 8018ba0:	4603      	mov	r3, r0
 8018ba2:	e00b      	b.n	8018bbc <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 8018ba4:	68fb      	ldr	r3, [r7, #12]
 8018ba6:	f103 0226 	add.w	r2, r3, #38	; 0x26
 8018baa:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8018bae:	9300      	str	r3, [sp, #0]
 8018bb0:	69fb      	ldr	r3, [r7, #28]
 8018bb2:	68b9      	ldr	r1, [r7, #8]
 8018bb4:	68f8      	ldr	r0, [r7, #12]
 8018bb6:	f001 fdfb 	bl	801a7b0 <ethernet_output>
 8018bba:	4603      	mov	r3, r0
}
 8018bbc:	4618      	mov	r0, r3
 8018bbe:	3720      	adds	r7, #32
 8018bc0:	46bd      	mov	sp, r7
 8018bc2:	bd80      	pop	{r7, pc}
 8018bc4:	08020620 	.word	0x08020620
 8018bc8:	08020770 	.word	0x08020770
 8018bcc:	08020698 	.word	0x08020698
 8018bd0:	080207c0 	.word	0x080207c0
 8018bd4:	08020760 	.word	0x08020760
 8018bd8:	08020e20 	.word	0x08020e20
 8018bdc:	200072fc 	.word	0x200072fc
 8018be0:	2000720c 	.word	0x2000720c

08018be4 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 8018be4:	b580      	push	{r7, lr}
 8018be6:	b08c      	sub	sp, #48	; 0x30
 8018be8:	af02      	add	r7, sp, #8
 8018bea:	60f8      	str	r0, [r7, #12]
 8018bec:	60b9      	str	r1, [r7, #8]
 8018bee:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 8018bf0:	68fb      	ldr	r3, [r7, #12]
 8018bf2:	3326      	adds	r3, #38	; 0x26
 8018bf4:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 8018bf6:	23ff      	movs	r3, #255	; 0xff
 8018bf8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 8018bfc:	2300      	movs	r3, #0
 8018bfe:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8018c00:	68bb      	ldr	r3, [r7, #8]
 8018c02:	681b      	ldr	r3, [r3, #0]
 8018c04:	68f9      	ldr	r1, [r7, #12]
 8018c06:	4618      	mov	r0, r3
 8018c08:	f000 fe34 	bl	8019874 <ip4_addr_isbroadcast_u32>
 8018c0c:	4603      	mov	r3, r0
 8018c0e:	2b00      	cmp	r3, #0
 8018c10:	d10c      	bne.n	8018c2c <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8018c12:	68bb      	ldr	r3, [r7, #8]
 8018c14:	681b      	ldr	r3, [r3, #0]
 8018c16:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8018c1a:	2be0      	cmp	r3, #224	; 0xe0
 8018c1c:	d006      	beq.n	8018c2c <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8018c1e:	68bb      	ldr	r3, [r7, #8]
 8018c20:	2b00      	cmp	r3, #0
 8018c22:	d003      	beq.n	8018c2c <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 8018c24:	68bb      	ldr	r3, [r7, #8]
 8018c26:	681b      	ldr	r3, [r3, #0]
 8018c28:	2b00      	cmp	r3, #0
 8018c2a:	d102      	bne.n	8018c32 <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8018c2c:	f06f 030f 	mvn.w	r3, #15
 8018c30:	e101      	b.n	8018e36 <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 8018c32:	68fa      	ldr	r2, [r7, #12]
 8018c34:	2101      	movs	r1, #1
 8018c36:	68b8      	ldr	r0, [r7, #8]
 8018c38:	f7ff fb60 	bl	80182fc <etharp_find_entry>
 8018c3c:	4603      	mov	r3, r0
 8018c3e:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 8018c40:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8018c44:	2b00      	cmp	r3, #0
 8018c46:	da02      	bge.n	8018c4e <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 8018c48:	8a7b      	ldrh	r3, [r7, #18]
 8018c4a:	b25b      	sxtb	r3, r3
 8018c4c:	e0f3      	b.n	8018e36 <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 8018c4e:	8a7b      	ldrh	r3, [r7, #18]
 8018c50:	2b7e      	cmp	r3, #126	; 0x7e
 8018c52:	d906      	bls.n	8018c62 <etharp_query+0x7e>
 8018c54:	4b7a      	ldr	r3, [pc, #488]	; (8018e40 <etharp_query+0x25c>)
 8018c56:	f240 32c1 	movw	r2, #961	; 0x3c1
 8018c5a:	497a      	ldr	r1, [pc, #488]	; (8018e44 <etharp_query+0x260>)
 8018c5c:	487a      	ldr	r0, [pc, #488]	; (8018e48 <etharp_query+0x264>)
 8018c5e:	f002 fb2b 	bl	801b2b8 <iprintf>
  i = (netif_addr_idx_t)i_err;
 8018c62:	8a7b      	ldrh	r3, [r7, #18]
 8018c64:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 8018c66:	7c7a      	ldrb	r2, [r7, #17]
 8018c68:	4978      	ldr	r1, [pc, #480]	; (8018e4c <etharp_query+0x268>)
 8018c6a:	4613      	mov	r3, r2
 8018c6c:	005b      	lsls	r3, r3, #1
 8018c6e:	4413      	add	r3, r2
 8018c70:	00db      	lsls	r3, r3, #3
 8018c72:	440b      	add	r3, r1
 8018c74:	3314      	adds	r3, #20
 8018c76:	781b      	ldrb	r3, [r3, #0]
 8018c78:	2b00      	cmp	r3, #0
 8018c7a:	d115      	bne.n	8018ca8 <etharp_query+0xc4>
    is_new_entry = 1;
 8018c7c:	2301      	movs	r3, #1
 8018c7e:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 8018c80:	7c7a      	ldrb	r2, [r7, #17]
 8018c82:	4972      	ldr	r1, [pc, #456]	; (8018e4c <etharp_query+0x268>)
 8018c84:	4613      	mov	r3, r2
 8018c86:	005b      	lsls	r3, r3, #1
 8018c88:	4413      	add	r3, r2
 8018c8a:	00db      	lsls	r3, r3, #3
 8018c8c:	440b      	add	r3, r1
 8018c8e:	3314      	adds	r3, #20
 8018c90:	2201      	movs	r2, #1
 8018c92:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 8018c94:	7c7a      	ldrb	r2, [r7, #17]
 8018c96:	496d      	ldr	r1, [pc, #436]	; (8018e4c <etharp_query+0x268>)
 8018c98:	4613      	mov	r3, r2
 8018c9a:	005b      	lsls	r3, r3, #1
 8018c9c:	4413      	add	r3, r2
 8018c9e:	00db      	lsls	r3, r3, #3
 8018ca0:	440b      	add	r3, r1
 8018ca2:	3308      	adds	r3, #8
 8018ca4:	68fa      	ldr	r2, [r7, #12]
 8018ca6:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 8018ca8:	7c7a      	ldrb	r2, [r7, #17]
 8018caa:	4968      	ldr	r1, [pc, #416]	; (8018e4c <etharp_query+0x268>)
 8018cac:	4613      	mov	r3, r2
 8018cae:	005b      	lsls	r3, r3, #1
 8018cb0:	4413      	add	r3, r2
 8018cb2:	00db      	lsls	r3, r3, #3
 8018cb4:	440b      	add	r3, r1
 8018cb6:	3314      	adds	r3, #20
 8018cb8:	781b      	ldrb	r3, [r3, #0]
 8018cba:	2b01      	cmp	r3, #1
 8018cbc:	d011      	beq.n	8018ce2 <etharp_query+0xfe>
 8018cbe:	7c7a      	ldrb	r2, [r7, #17]
 8018cc0:	4962      	ldr	r1, [pc, #392]	; (8018e4c <etharp_query+0x268>)
 8018cc2:	4613      	mov	r3, r2
 8018cc4:	005b      	lsls	r3, r3, #1
 8018cc6:	4413      	add	r3, r2
 8018cc8:	00db      	lsls	r3, r3, #3
 8018cca:	440b      	add	r3, r1
 8018ccc:	3314      	adds	r3, #20
 8018cce:	781b      	ldrb	r3, [r3, #0]
 8018cd0:	2b01      	cmp	r3, #1
 8018cd2:	d806      	bhi.n	8018ce2 <etharp_query+0xfe>
 8018cd4:	4b5a      	ldr	r3, [pc, #360]	; (8018e40 <etharp_query+0x25c>)
 8018cd6:	f240 32cd 	movw	r2, #973	; 0x3cd
 8018cda:	495d      	ldr	r1, [pc, #372]	; (8018e50 <etharp_query+0x26c>)
 8018cdc:	485a      	ldr	r0, [pc, #360]	; (8018e48 <etharp_query+0x264>)
 8018cde:	f002 faeb 	bl	801b2b8 <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 8018ce2:	6a3b      	ldr	r3, [r7, #32]
 8018ce4:	2b00      	cmp	r3, #0
 8018ce6:	d102      	bne.n	8018cee <etharp_query+0x10a>
 8018ce8:	687b      	ldr	r3, [r7, #4]
 8018cea:	2b00      	cmp	r3, #0
 8018cec:	d10c      	bne.n	8018d08 <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 8018cee:	68b9      	ldr	r1, [r7, #8]
 8018cf0:	68f8      	ldr	r0, [r7, #12]
 8018cf2:	f000 f963 	bl	8018fbc <etharp_request>
 8018cf6:	4603      	mov	r3, r0
 8018cf8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 8018cfc:	687b      	ldr	r3, [r7, #4]
 8018cfe:	2b00      	cmp	r3, #0
 8018d00:	d102      	bne.n	8018d08 <etharp_query+0x124>
      return result;
 8018d02:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8018d06:	e096      	b.n	8018e36 <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 8018d08:	687b      	ldr	r3, [r7, #4]
 8018d0a:	2b00      	cmp	r3, #0
 8018d0c:	d106      	bne.n	8018d1c <etharp_query+0x138>
 8018d0e:	4b4c      	ldr	r3, [pc, #304]	; (8018e40 <etharp_query+0x25c>)
 8018d10:	f240 32e1 	movw	r2, #993	; 0x3e1
 8018d14:	494f      	ldr	r1, [pc, #316]	; (8018e54 <etharp_query+0x270>)
 8018d16:	484c      	ldr	r0, [pc, #304]	; (8018e48 <etharp_query+0x264>)
 8018d18:	f002 face 	bl	801b2b8 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 8018d1c:	7c7a      	ldrb	r2, [r7, #17]
 8018d1e:	494b      	ldr	r1, [pc, #300]	; (8018e4c <etharp_query+0x268>)
 8018d20:	4613      	mov	r3, r2
 8018d22:	005b      	lsls	r3, r3, #1
 8018d24:	4413      	add	r3, r2
 8018d26:	00db      	lsls	r3, r3, #3
 8018d28:	440b      	add	r3, r1
 8018d2a:	3314      	adds	r3, #20
 8018d2c:	781b      	ldrb	r3, [r3, #0]
 8018d2e:	2b01      	cmp	r3, #1
 8018d30:	d917      	bls.n	8018d62 <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 8018d32:	4a49      	ldr	r2, [pc, #292]	; (8018e58 <etharp_query+0x274>)
 8018d34:	7c7b      	ldrb	r3, [r7, #17]
 8018d36:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 8018d38:	7c7a      	ldrb	r2, [r7, #17]
 8018d3a:	4613      	mov	r3, r2
 8018d3c:	005b      	lsls	r3, r3, #1
 8018d3e:	4413      	add	r3, r2
 8018d40:	00db      	lsls	r3, r3, #3
 8018d42:	3308      	adds	r3, #8
 8018d44:	4a41      	ldr	r2, [pc, #260]	; (8018e4c <etharp_query+0x268>)
 8018d46:	4413      	add	r3, r2
 8018d48:	3304      	adds	r3, #4
 8018d4a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8018d4e:	9200      	str	r2, [sp, #0]
 8018d50:	697a      	ldr	r2, [r7, #20]
 8018d52:	6879      	ldr	r1, [r7, #4]
 8018d54:	68f8      	ldr	r0, [r7, #12]
 8018d56:	f001 fd2b 	bl	801a7b0 <ethernet_output>
 8018d5a:	4603      	mov	r3, r0
 8018d5c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8018d60:	e067      	b.n	8018e32 <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8018d62:	7c7a      	ldrb	r2, [r7, #17]
 8018d64:	4939      	ldr	r1, [pc, #228]	; (8018e4c <etharp_query+0x268>)
 8018d66:	4613      	mov	r3, r2
 8018d68:	005b      	lsls	r3, r3, #1
 8018d6a:	4413      	add	r3, r2
 8018d6c:	00db      	lsls	r3, r3, #3
 8018d6e:	440b      	add	r3, r1
 8018d70:	3314      	adds	r3, #20
 8018d72:	781b      	ldrb	r3, [r3, #0]
 8018d74:	2b01      	cmp	r3, #1
 8018d76:	d15c      	bne.n	8018e32 <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 8018d78:	2300      	movs	r3, #0
 8018d7a:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 8018d7c:	687b      	ldr	r3, [r7, #4]
 8018d7e:	61fb      	str	r3, [r7, #28]
    while (p) {
 8018d80:	e01c      	b.n	8018dbc <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 8018d82:	69fb      	ldr	r3, [r7, #28]
 8018d84:	895a      	ldrh	r2, [r3, #10]
 8018d86:	69fb      	ldr	r3, [r7, #28]
 8018d88:	891b      	ldrh	r3, [r3, #8]
 8018d8a:	429a      	cmp	r2, r3
 8018d8c:	d10a      	bne.n	8018da4 <etharp_query+0x1c0>
 8018d8e:	69fb      	ldr	r3, [r7, #28]
 8018d90:	681b      	ldr	r3, [r3, #0]
 8018d92:	2b00      	cmp	r3, #0
 8018d94:	d006      	beq.n	8018da4 <etharp_query+0x1c0>
 8018d96:	4b2a      	ldr	r3, [pc, #168]	; (8018e40 <etharp_query+0x25c>)
 8018d98:	f240 32f1 	movw	r2, #1009	; 0x3f1
 8018d9c:	492f      	ldr	r1, [pc, #188]	; (8018e5c <etharp_query+0x278>)
 8018d9e:	482a      	ldr	r0, [pc, #168]	; (8018e48 <etharp_query+0x264>)
 8018da0:	f002 fa8a 	bl	801b2b8 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 8018da4:	69fb      	ldr	r3, [r7, #28]
 8018da6:	7b1b      	ldrb	r3, [r3, #12]
 8018da8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8018dac:	2b00      	cmp	r3, #0
 8018dae:	d002      	beq.n	8018db6 <etharp_query+0x1d2>
        copy_needed = 1;
 8018db0:	2301      	movs	r3, #1
 8018db2:	61bb      	str	r3, [r7, #24]
        break;
 8018db4:	e005      	b.n	8018dc2 <etharp_query+0x1de>
      }
      p = p->next;
 8018db6:	69fb      	ldr	r3, [r7, #28]
 8018db8:	681b      	ldr	r3, [r3, #0]
 8018dba:	61fb      	str	r3, [r7, #28]
    while (p) {
 8018dbc:	69fb      	ldr	r3, [r7, #28]
 8018dbe:	2b00      	cmp	r3, #0
 8018dc0:	d1df      	bne.n	8018d82 <etharp_query+0x19e>
    }
    if (copy_needed) {
 8018dc2:	69bb      	ldr	r3, [r7, #24]
 8018dc4:	2b00      	cmp	r3, #0
 8018dc6:	d007      	beq.n	8018dd8 <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 8018dc8:	687a      	ldr	r2, [r7, #4]
 8018dca:	f44f 7120 	mov.w	r1, #640	; 0x280
 8018dce:	200e      	movs	r0, #14
 8018dd0:	f7f8 febe 	bl	8011b50 <pbuf_clone>
 8018dd4:	61f8      	str	r0, [r7, #28]
 8018dd6:	e004      	b.n	8018de2 <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 8018dd8:	687b      	ldr	r3, [r7, #4]
 8018dda:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 8018ddc:	69f8      	ldr	r0, [r7, #28]
 8018dde:	f7f8 fc69 	bl	80116b4 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 8018de2:	69fb      	ldr	r3, [r7, #28]
 8018de4:	2b00      	cmp	r3, #0
 8018de6:	d021      	beq.n	8018e2c <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 8018de8:	7c7a      	ldrb	r2, [r7, #17]
 8018dea:	4918      	ldr	r1, [pc, #96]	; (8018e4c <etharp_query+0x268>)
 8018dec:	4613      	mov	r3, r2
 8018dee:	005b      	lsls	r3, r3, #1
 8018df0:	4413      	add	r3, r2
 8018df2:	00db      	lsls	r3, r3, #3
 8018df4:	440b      	add	r3, r1
 8018df6:	681b      	ldr	r3, [r3, #0]
 8018df8:	2b00      	cmp	r3, #0
 8018dfa:	d00a      	beq.n	8018e12 <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 8018dfc:	7c7a      	ldrb	r2, [r7, #17]
 8018dfe:	4913      	ldr	r1, [pc, #76]	; (8018e4c <etharp_query+0x268>)
 8018e00:	4613      	mov	r3, r2
 8018e02:	005b      	lsls	r3, r3, #1
 8018e04:	4413      	add	r3, r2
 8018e06:	00db      	lsls	r3, r3, #3
 8018e08:	440b      	add	r3, r1
 8018e0a:	681b      	ldr	r3, [r3, #0]
 8018e0c:	4618      	mov	r0, r3
 8018e0e:	f7f8 fbb1 	bl	8011574 <pbuf_free>
      }
      arp_table[i].q = p;
 8018e12:	7c7a      	ldrb	r2, [r7, #17]
 8018e14:	490d      	ldr	r1, [pc, #52]	; (8018e4c <etharp_query+0x268>)
 8018e16:	4613      	mov	r3, r2
 8018e18:	005b      	lsls	r3, r3, #1
 8018e1a:	4413      	add	r3, r2
 8018e1c:	00db      	lsls	r3, r3, #3
 8018e1e:	440b      	add	r3, r1
 8018e20:	69fa      	ldr	r2, [r7, #28]
 8018e22:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 8018e24:	2300      	movs	r3, #0
 8018e26:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8018e2a:	e002      	b.n	8018e32 <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 8018e2c:	23ff      	movs	r3, #255	; 0xff
 8018e2e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 8018e32:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8018e36:	4618      	mov	r0, r3
 8018e38:	3728      	adds	r7, #40	; 0x28
 8018e3a:	46bd      	mov	sp, r7
 8018e3c:	bd80      	pop	{r7, pc}
 8018e3e:	bf00      	nop
 8018e40:	08020620 	.word	0x08020620
 8018e44:	080207cc 	.word	0x080207cc
 8018e48:	08020698 	.word	0x08020698
 8018e4c:	2000720c 	.word	0x2000720c
 8018e50:	080207dc 	.word	0x080207dc
 8018e54:	080207c0 	.word	0x080207c0
 8018e58:	200072fc 	.word	0x200072fc
 8018e5c:	08020804 	.word	0x08020804

08018e60 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 8018e60:	b580      	push	{r7, lr}
 8018e62:	b08a      	sub	sp, #40	; 0x28
 8018e64:	af02      	add	r7, sp, #8
 8018e66:	60f8      	str	r0, [r7, #12]
 8018e68:	60b9      	str	r1, [r7, #8]
 8018e6a:	607a      	str	r2, [r7, #4]
 8018e6c:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 8018e6e:	2300      	movs	r3, #0
 8018e70:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 8018e72:	68fb      	ldr	r3, [r7, #12]
 8018e74:	2b00      	cmp	r3, #0
 8018e76:	d106      	bne.n	8018e86 <etharp_raw+0x26>
 8018e78:	4b3a      	ldr	r3, [pc, #232]	; (8018f64 <etharp_raw+0x104>)
 8018e7a:	f240 4257 	movw	r2, #1111	; 0x457
 8018e7e:	493a      	ldr	r1, [pc, #232]	; (8018f68 <etharp_raw+0x108>)
 8018e80:	483a      	ldr	r0, [pc, #232]	; (8018f6c <etharp_raw+0x10c>)
 8018e82:	f002 fa19 	bl	801b2b8 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 8018e86:	f44f 7220 	mov.w	r2, #640	; 0x280
 8018e8a:	211c      	movs	r1, #28
 8018e8c:	200e      	movs	r0, #14
 8018e8e:	f7f8 f88d 	bl	8010fac <pbuf_alloc>
 8018e92:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 8018e94:	69bb      	ldr	r3, [r7, #24]
 8018e96:	2b00      	cmp	r3, #0
 8018e98:	d102      	bne.n	8018ea0 <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 8018e9a:	f04f 33ff 	mov.w	r3, #4294967295
 8018e9e:	e05d      	b.n	8018f5c <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 8018ea0:	69bb      	ldr	r3, [r7, #24]
 8018ea2:	895b      	ldrh	r3, [r3, #10]
 8018ea4:	2b1b      	cmp	r3, #27
 8018ea6:	d806      	bhi.n	8018eb6 <etharp_raw+0x56>
 8018ea8:	4b2e      	ldr	r3, [pc, #184]	; (8018f64 <etharp_raw+0x104>)
 8018eaa:	f240 4262 	movw	r2, #1122	; 0x462
 8018eae:	4930      	ldr	r1, [pc, #192]	; (8018f70 <etharp_raw+0x110>)
 8018eb0:	482e      	ldr	r0, [pc, #184]	; (8018f6c <etharp_raw+0x10c>)
 8018eb2:	f002 fa01 	bl	801b2b8 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 8018eb6:	69bb      	ldr	r3, [r7, #24]
 8018eb8:	685b      	ldr	r3, [r3, #4]
 8018eba:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 8018ebc:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8018ebe:	4618      	mov	r0, r3
 8018ec0:	f7f6 ff54 	bl	800fd6c <lwip_htons>
 8018ec4:	4603      	mov	r3, r0
 8018ec6:	461a      	mov	r2, r3
 8018ec8:	697b      	ldr	r3, [r7, #20]
 8018eca:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 8018ecc:	68fb      	ldr	r3, [r7, #12]
 8018ece:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8018ed2:	2b06      	cmp	r3, #6
 8018ed4:	d006      	beq.n	8018ee4 <etharp_raw+0x84>
 8018ed6:	4b23      	ldr	r3, [pc, #140]	; (8018f64 <etharp_raw+0x104>)
 8018ed8:	f240 4269 	movw	r2, #1129	; 0x469
 8018edc:	4925      	ldr	r1, [pc, #148]	; (8018f74 <etharp_raw+0x114>)
 8018ede:	4823      	ldr	r0, [pc, #140]	; (8018f6c <etharp_raw+0x10c>)
 8018ee0:	f002 f9ea 	bl	801b2b8 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 8018ee4:	697b      	ldr	r3, [r7, #20]
 8018ee6:	3308      	adds	r3, #8
 8018ee8:	2206      	movs	r2, #6
 8018eea:	6839      	ldr	r1, [r7, #0]
 8018eec:	4618      	mov	r0, r3
 8018eee:	f002 fbfe 	bl	801b6ee <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 8018ef2:	697b      	ldr	r3, [r7, #20]
 8018ef4:	3312      	adds	r3, #18
 8018ef6:	2206      	movs	r2, #6
 8018ef8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8018efa:	4618      	mov	r0, r3
 8018efc:	f002 fbf7 	bl	801b6ee <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 8018f00:	697b      	ldr	r3, [r7, #20]
 8018f02:	330e      	adds	r3, #14
 8018f04:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8018f06:	6812      	ldr	r2, [r2, #0]
 8018f08:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 8018f0a:	697b      	ldr	r3, [r7, #20]
 8018f0c:	3318      	adds	r3, #24
 8018f0e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8018f10:	6812      	ldr	r2, [r2, #0]
 8018f12:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 8018f14:	697b      	ldr	r3, [r7, #20]
 8018f16:	2200      	movs	r2, #0
 8018f18:	701a      	strb	r2, [r3, #0]
 8018f1a:	2200      	movs	r2, #0
 8018f1c:	f042 0201 	orr.w	r2, r2, #1
 8018f20:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 8018f22:	697b      	ldr	r3, [r7, #20]
 8018f24:	2200      	movs	r2, #0
 8018f26:	f042 0208 	orr.w	r2, r2, #8
 8018f2a:	709a      	strb	r2, [r3, #2]
 8018f2c:	2200      	movs	r2, #0
 8018f2e:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 8018f30:	697b      	ldr	r3, [r7, #20]
 8018f32:	2206      	movs	r2, #6
 8018f34:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 8018f36:	697b      	ldr	r3, [r7, #20]
 8018f38:	2204      	movs	r2, #4
 8018f3a:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 8018f3c:	f640 0306 	movw	r3, #2054	; 0x806
 8018f40:	9300      	str	r3, [sp, #0]
 8018f42:	687b      	ldr	r3, [r7, #4]
 8018f44:	68ba      	ldr	r2, [r7, #8]
 8018f46:	69b9      	ldr	r1, [r7, #24]
 8018f48:	68f8      	ldr	r0, [r7, #12]
 8018f4a:	f001 fc31 	bl	801a7b0 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 8018f4e:	69b8      	ldr	r0, [r7, #24]
 8018f50:	f7f8 fb10 	bl	8011574 <pbuf_free>
  p = NULL;
 8018f54:	2300      	movs	r3, #0
 8018f56:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 8018f58:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8018f5c:	4618      	mov	r0, r3
 8018f5e:	3720      	adds	r7, #32
 8018f60:	46bd      	mov	sp, r7
 8018f62:	bd80      	pop	{r7, pc}
 8018f64:	08020620 	.word	0x08020620
 8018f68:	08020770 	.word	0x08020770
 8018f6c:	08020698 	.word	0x08020698
 8018f70:	08020820 	.word	0x08020820
 8018f74:	08020854 	.word	0x08020854

08018f78 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 8018f78:	b580      	push	{r7, lr}
 8018f7a:	b088      	sub	sp, #32
 8018f7c:	af04      	add	r7, sp, #16
 8018f7e:	60f8      	str	r0, [r7, #12]
 8018f80:	60b9      	str	r1, [r7, #8]
 8018f82:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8018f84:	68fb      	ldr	r3, [r7, #12]
 8018f86:	f103 0126 	add.w	r1, r3, #38	; 0x26
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 8018f8a:	68fb      	ldr	r3, [r7, #12]
 8018f8c:	f103 0026 	add.w	r0, r3, #38	; 0x26
 8018f90:	68fb      	ldr	r3, [r7, #12]
 8018f92:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8018f94:	2201      	movs	r2, #1
 8018f96:	9203      	str	r2, [sp, #12]
 8018f98:	68ba      	ldr	r2, [r7, #8]
 8018f9a:	9202      	str	r2, [sp, #8]
 8018f9c:	4a06      	ldr	r2, [pc, #24]	; (8018fb8 <etharp_request_dst+0x40>)
 8018f9e:	9201      	str	r2, [sp, #4]
 8018fa0:	9300      	str	r3, [sp, #0]
 8018fa2:	4603      	mov	r3, r0
 8018fa4:	687a      	ldr	r2, [r7, #4]
 8018fa6:	68f8      	ldr	r0, [r7, #12]
 8018fa8:	f7ff ff5a 	bl	8018e60 <etharp_raw>
 8018fac:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 8018fae:	4618      	mov	r0, r3
 8018fb0:	3710      	adds	r7, #16
 8018fb2:	46bd      	mov	sp, r7
 8018fb4:	bd80      	pop	{r7, pc}
 8018fb6:	bf00      	nop
 8018fb8:	08020e28 	.word	0x08020e28

08018fbc <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 8018fbc:	b580      	push	{r7, lr}
 8018fbe:	b082      	sub	sp, #8
 8018fc0:	af00      	add	r7, sp, #0
 8018fc2:	6078      	str	r0, [r7, #4]
 8018fc4:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 8018fc6:	4a05      	ldr	r2, [pc, #20]	; (8018fdc <etharp_request+0x20>)
 8018fc8:	6839      	ldr	r1, [r7, #0]
 8018fca:	6878      	ldr	r0, [r7, #4]
 8018fcc:	f7ff ffd4 	bl	8018f78 <etharp_request_dst>
 8018fd0:	4603      	mov	r3, r0
}
 8018fd2:	4618      	mov	r0, r3
 8018fd4:	3708      	adds	r7, #8
 8018fd6:	46bd      	mov	sp, r7
 8018fd8:	bd80      	pop	{r7, pc}
 8018fda:	bf00      	nop
 8018fdc:	08020e20 	.word	0x08020e20

08018fe0 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 8018fe0:	b580      	push	{r7, lr}
 8018fe2:	b08e      	sub	sp, #56	; 0x38
 8018fe4:	af04      	add	r7, sp, #16
 8018fe6:	6078      	str	r0, [r7, #4]
 8018fe8:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 8018fea:	4b87      	ldr	r3, [pc, #540]	; (8019208 <icmp_input+0x228>)
 8018fec:	689b      	ldr	r3, [r3, #8]
 8018fee:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 8018ff0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018ff2:	781b      	ldrb	r3, [r3, #0]
 8018ff4:	f003 030f 	and.w	r3, r3, #15
 8018ff8:	b2db      	uxtb	r3, r3
 8018ffa:	009b      	lsls	r3, r3, #2
 8018ffc:	b2db      	uxtb	r3, r3
 8018ffe:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 8019000:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8019002:	2b13      	cmp	r3, #19
 8019004:	f240 80e8 	bls.w	80191d8 <icmp_input+0x1f8>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 8019008:	687b      	ldr	r3, [r7, #4]
 801900a:	895b      	ldrh	r3, [r3, #10]
 801900c:	2b03      	cmp	r3, #3
 801900e:	f240 80e5 	bls.w	80191dc <icmp_input+0x1fc>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 8019012:	687b      	ldr	r3, [r7, #4]
 8019014:	685b      	ldr	r3, [r3, #4]
 8019016:	781b      	ldrb	r3, [r3, #0]
 8019018:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 801901c:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8019020:	2b00      	cmp	r3, #0
 8019022:	f000 80d2 	beq.w	80191ca <icmp_input+0x1ea>
 8019026:	2b08      	cmp	r3, #8
 8019028:	f040 80d2 	bne.w	80191d0 <icmp_input+0x1f0>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 801902c:	4b77      	ldr	r3, [pc, #476]	; (801920c <icmp_input+0x22c>)
 801902e:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8019030:	4b75      	ldr	r3, [pc, #468]	; (8019208 <icmp_input+0x228>)
 8019032:	695b      	ldr	r3, [r3, #20]
 8019034:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8019038:	2be0      	cmp	r3, #224	; 0xe0
 801903a:	f000 80d6 	beq.w	80191ea <icmp_input+0x20a>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 801903e:	4b72      	ldr	r3, [pc, #456]	; (8019208 <icmp_input+0x228>)
 8019040:	695b      	ldr	r3, [r3, #20]
 8019042:	4a71      	ldr	r2, [pc, #452]	; (8019208 <icmp_input+0x228>)
 8019044:	6812      	ldr	r2, [r2, #0]
 8019046:	4611      	mov	r1, r2
 8019048:	4618      	mov	r0, r3
 801904a:	f000 fc13 	bl	8019874 <ip4_addr_isbroadcast_u32>
 801904e:	4603      	mov	r3, r0
 8019050:	2b00      	cmp	r3, #0
 8019052:	f040 80cc 	bne.w	80191ee <icmp_input+0x20e>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 8019056:	687b      	ldr	r3, [r7, #4]
 8019058:	891b      	ldrh	r3, [r3, #8]
 801905a:	2b07      	cmp	r3, #7
 801905c:	f240 80c0 	bls.w	80191e0 <icmp_input+0x200>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: bad ICMP echo received\n"));
        goto lenerr;
      }
#if CHECKSUM_CHECK_ICMP
      IF__NETIF_CHECKSUM_ENABLED(inp, NETIF_CHECKSUM_CHECK_ICMP) {
        if (inet_chksum_pbuf(p) != 0) {
 8019060:	6878      	ldr	r0, [r7, #4]
 8019062:	f7f6 ff20 	bl	800fea6 <inet_chksum_pbuf>
 8019066:	4603      	mov	r3, r0
 8019068:	2b00      	cmp	r3, #0
 801906a:	d003      	beq.n	8019074 <icmp_input+0x94>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: checksum failed for received ICMP echo\n"));
          pbuf_free(p);
 801906c:	6878      	ldr	r0, [r7, #4]
 801906e:	f7f8 fa81 	bl	8011574 <pbuf_free>
          ICMP_STATS_INC(icmp.chkerr);
          MIB2_STATS_INC(mib2.icmpinerrors);
          return;
 8019072:	e0c5      	b.n	8019200 <icmp_input+0x220>
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8019074:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8019076:	330e      	adds	r3, #14
 8019078:	4619      	mov	r1, r3
 801907a:	6878      	ldr	r0, [r7, #4]
 801907c:	f7f8 f9e4 	bl	8011448 <pbuf_add_header>
 8019080:	4603      	mov	r3, r0
 8019082:	2b00      	cmp	r3, #0
 8019084:	d04b      	beq.n	801911e <icmp_input+0x13e>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 8019086:	687b      	ldr	r3, [r7, #4]
 8019088:	891a      	ldrh	r2, [r3, #8]
 801908a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801908c:	4413      	add	r3, r2
 801908e:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 8019090:	687b      	ldr	r3, [r7, #4]
 8019092:	891b      	ldrh	r3, [r3, #8]
 8019094:	8b7a      	ldrh	r2, [r7, #26]
 8019096:	429a      	cmp	r2, r3
 8019098:	f0c0 80ab 	bcc.w	80191f2 <icmp_input+0x212>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 801909c:	8b7b      	ldrh	r3, [r7, #26]
 801909e:	f44f 7220 	mov.w	r2, #640	; 0x280
 80190a2:	4619      	mov	r1, r3
 80190a4:	200e      	movs	r0, #14
 80190a6:	f7f7 ff81 	bl	8010fac <pbuf_alloc>
 80190aa:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 80190ac:	697b      	ldr	r3, [r7, #20]
 80190ae:	2b00      	cmp	r3, #0
 80190b0:	f000 80a1 	beq.w	80191f6 <icmp_input+0x216>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 80190b4:	697b      	ldr	r3, [r7, #20]
 80190b6:	895b      	ldrh	r3, [r3, #10]
 80190b8:	461a      	mov	r2, r3
 80190ba:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80190bc:	3308      	adds	r3, #8
 80190be:	429a      	cmp	r2, r3
 80190c0:	d203      	bcs.n	80190ca <icmp_input+0xea>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 80190c2:	6978      	ldr	r0, [r7, #20]
 80190c4:	f7f8 fa56 	bl	8011574 <pbuf_free>
          goto icmperr;
 80190c8:	e096      	b.n	80191f8 <icmp_input+0x218>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 80190ca:	697b      	ldr	r3, [r7, #20]
 80190cc:	685b      	ldr	r3, [r3, #4]
 80190ce:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 80190d0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80190d2:	4618      	mov	r0, r3
 80190d4:	f002 fb0b 	bl	801b6ee <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 80190d8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80190da:	4619      	mov	r1, r3
 80190dc:	6978      	ldr	r0, [r7, #20]
 80190de:	f7f8 f9c3 	bl	8011468 <pbuf_remove_header>
 80190e2:	4603      	mov	r3, r0
 80190e4:	2b00      	cmp	r3, #0
 80190e6:	d009      	beq.n	80190fc <icmp_input+0x11c>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 80190e8:	4b49      	ldr	r3, [pc, #292]	; (8019210 <icmp_input+0x230>)
 80190ea:	22b6      	movs	r2, #182	; 0xb6
 80190ec:	4949      	ldr	r1, [pc, #292]	; (8019214 <icmp_input+0x234>)
 80190ee:	484a      	ldr	r0, [pc, #296]	; (8019218 <icmp_input+0x238>)
 80190f0:	f002 f8e2 	bl	801b2b8 <iprintf>
          pbuf_free(r);
 80190f4:	6978      	ldr	r0, [r7, #20]
 80190f6:	f7f8 fa3d 	bl	8011574 <pbuf_free>
          goto icmperr;
 80190fa:	e07d      	b.n	80191f8 <icmp_input+0x218>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 80190fc:	6879      	ldr	r1, [r7, #4]
 80190fe:	6978      	ldr	r0, [r7, #20]
 8019100:	f7f8 fb50 	bl	80117a4 <pbuf_copy>
 8019104:	4603      	mov	r3, r0
 8019106:	2b00      	cmp	r3, #0
 8019108:	d003      	beq.n	8019112 <icmp_input+0x132>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 801910a:	6978      	ldr	r0, [r7, #20]
 801910c:	f7f8 fa32 	bl	8011574 <pbuf_free>
          goto icmperr;
 8019110:	e072      	b.n	80191f8 <icmp_input+0x218>
        }
        /* free the original p */
        pbuf_free(p);
 8019112:	6878      	ldr	r0, [r7, #4]
 8019114:	f7f8 fa2e 	bl	8011574 <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 8019118:	697b      	ldr	r3, [r7, #20]
 801911a:	607b      	str	r3, [r7, #4]
 801911c:	e00f      	b.n	801913e <icmp_input+0x15e>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 801911e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8019120:	330e      	adds	r3, #14
 8019122:	4619      	mov	r1, r3
 8019124:	6878      	ldr	r0, [r7, #4]
 8019126:	f7f8 f99f 	bl	8011468 <pbuf_remove_header>
 801912a:	4603      	mov	r3, r0
 801912c:	2b00      	cmp	r3, #0
 801912e:	d006      	beq.n	801913e <icmp_input+0x15e>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 8019130:	4b37      	ldr	r3, [pc, #220]	; (8019210 <icmp_input+0x230>)
 8019132:	22c7      	movs	r2, #199	; 0xc7
 8019134:	4939      	ldr	r1, [pc, #228]	; (801921c <icmp_input+0x23c>)
 8019136:	4838      	ldr	r0, [pc, #224]	; (8019218 <icmp_input+0x238>)
 8019138:	f002 f8be 	bl	801b2b8 <iprintf>
          goto icmperr;
 801913c:	e05c      	b.n	80191f8 <icmp_input+0x218>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 801913e:	687b      	ldr	r3, [r7, #4]
 8019140:	685b      	ldr	r3, [r3, #4]
 8019142:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 8019144:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8019146:	4619      	mov	r1, r3
 8019148:	6878      	ldr	r0, [r7, #4]
 801914a:	f7f8 f97d 	bl	8011448 <pbuf_add_header>
 801914e:	4603      	mov	r3, r0
 8019150:	2b00      	cmp	r3, #0
 8019152:	d13c      	bne.n	80191ce <icmp_input+0x1ee>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 8019154:	687b      	ldr	r3, [r7, #4]
 8019156:	685b      	ldr	r3, [r3, #4]
 8019158:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 801915a:	69fb      	ldr	r3, [r7, #28]
 801915c:	681a      	ldr	r2, [r3, #0]
 801915e:	68fb      	ldr	r3, [r7, #12]
 8019160:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 8019162:	4b29      	ldr	r3, [pc, #164]	; (8019208 <icmp_input+0x228>)
 8019164:	691a      	ldr	r2, [r3, #16]
 8019166:	68fb      	ldr	r3, [r7, #12]
 8019168:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 801916a:	693b      	ldr	r3, [r7, #16]
 801916c:	2200      	movs	r2, #0
 801916e:	701a      	strb	r2, [r3, #0]
#if CHECKSUM_GEN_ICMP
        IF__NETIF_CHECKSUM_ENABLED(inp, NETIF_CHECKSUM_GEN_ICMP) {
          /* adjust the checksum */
          if (iecho->chksum > PP_HTONS(0xffffU - (ICMP_ECHO << 8))) {
 8019170:	693b      	ldr	r3, [r7, #16]
 8019172:	885b      	ldrh	r3, [r3, #2]
 8019174:	b29b      	uxth	r3, r3
 8019176:	f64f 72f7 	movw	r2, #65527	; 0xfff7
 801917a:	4293      	cmp	r3, r2
 801917c:	d907      	bls.n	801918e <icmp_input+0x1ae>
            iecho->chksum = (u16_t)(iecho->chksum + PP_HTONS((u16_t)(ICMP_ECHO << 8)) + 1);
 801917e:	693b      	ldr	r3, [r7, #16]
 8019180:	885b      	ldrh	r3, [r3, #2]
 8019182:	b29b      	uxth	r3, r3
 8019184:	3309      	adds	r3, #9
 8019186:	b29a      	uxth	r2, r3
 8019188:	693b      	ldr	r3, [r7, #16]
 801918a:	805a      	strh	r2, [r3, #2]
 801918c:	e006      	b.n	801919c <icmp_input+0x1bc>
          } else {
            iecho->chksum = (u16_t)(iecho->chksum + PP_HTONS(ICMP_ECHO << 8));
 801918e:	693b      	ldr	r3, [r7, #16]
 8019190:	885b      	ldrh	r3, [r3, #2]
 8019192:	b29b      	uxth	r3, r3
 8019194:	3308      	adds	r3, #8
 8019196:	b29a      	uxth	r2, r3
 8019198:	693b      	ldr	r3, [r7, #16]
 801919a:	805a      	strh	r2, [r3, #2]
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 801919c:	68fb      	ldr	r3, [r7, #12]
 801919e:	22ff      	movs	r2, #255	; 0xff
 80191a0:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 80191a2:	68fb      	ldr	r3, [r7, #12]
 80191a4:	2200      	movs	r2, #0
 80191a6:	729a      	strb	r2, [r3, #10]
 80191a8:	2200      	movs	r2, #0
 80191aa:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 80191ac:	683b      	ldr	r3, [r7, #0]
 80191ae:	9302      	str	r3, [sp, #8]
 80191b0:	2301      	movs	r3, #1
 80191b2:	9301      	str	r3, [sp, #4]
 80191b4:	2300      	movs	r3, #0
 80191b6:	9300      	str	r3, [sp, #0]
 80191b8:	23ff      	movs	r3, #255	; 0xff
 80191ba:	2200      	movs	r2, #0
 80191bc:	69f9      	ldr	r1, [r7, #28]
 80191be:	6878      	ldr	r0, [r7, #4]
 80191c0:	f000 fa80 	bl	80196c4 <ip4_output_if>
 80191c4:	4603      	mov	r3, r0
 80191c6:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 80191c8:	e001      	b.n	80191ce <icmp_input+0x1ee>
      break;
 80191ca:	bf00      	nop
 80191cc:	e000      	b.n	80191d0 <icmp_input+0x1f0>
      break;
 80191ce:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 80191d0:	6878      	ldr	r0, [r7, #4]
 80191d2:	f7f8 f9cf 	bl	8011574 <pbuf_free>
  return;
 80191d6:	e013      	b.n	8019200 <icmp_input+0x220>
    goto lenerr;
 80191d8:	bf00      	nop
 80191da:	e002      	b.n	80191e2 <icmp_input+0x202>
    goto lenerr;
 80191dc:	bf00      	nop
 80191de:	e000      	b.n	80191e2 <icmp_input+0x202>
        goto lenerr;
 80191e0:	bf00      	nop
lenerr:
  pbuf_free(p);
 80191e2:	6878      	ldr	r0, [r7, #4]
 80191e4:	f7f8 f9c6 	bl	8011574 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 80191e8:	e00a      	b.n	8019200 <icmp_input+0x220>
        goto icmperr;
 80191ea:	bf00      	nop
 80191ec:	e004      	b.n	80191f8 <icmp_input+0x218>
        goto icmperr;
 80191ee:	bf00      	nop
 80191f0:	e002      	b.n	80191f8 <icmp_input+0x218>
          goto icmperr;
 80191f2:	bf00      	nop
 80191f4:	e000      	b.n	80191f8 <icmp_input+0x218>
          goto icmperr;
 80191f6:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 80191f8:	6878      	ldr	r0, [r7, #4]
 80191fa:	f7f8 f9bb 	bl	8011574 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 80191fe:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 8019200:	3728      	adds	r7, #40	; 0x28
 8019202:	46bd      	mov	sp, r7
 8019204:	bd80      	pop	{r7, pc}
 8019206:	bf00      	nop
 8019208:	200008d0 	.word	0x200008d0
 801920c:	200008e4 	.word	0x200008e4
 8019210:	08020898 	.word	0x08020898
 8019214:	080208d0 	.word	0x080208d0
 8019218:	08020908 	.word	0x08020908
 801921c:	08020930 	.word	0x08020930

08019220 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 8019220:	b580      	push	{r7, lr}
 8019222:	b082      	sub	sp, #8
 8019224:	af00      	add	r7, sp, #0
 8019226:	6078      	str	r0, [r7, #4]
 8019228:	460b      	mov	r3, r1
 801922a:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 801922c:	78fb      	ldrb	r3, [r7, #3]
 801922e:	461a      	mov	r2, r3
 8019230:	2103      	movs	r1, #3
 8019232:	6878      	ldr	r0, [r7, #4]
 8019234:	f000 f814 	bl	8019260 <icmp_send_response>
}
 8019238:	bf00      	nop
 801923a:	3708      	adds	r7, #8
 801923c:	46bd      	mov	sp, r7
 801923e:	bd80      	pop	{r7, pc}

08019240 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 8019240:	b580      	push	{r7, lr}
 8019242:	b082      	sub	sp, #8
 8019244:	af00      	add	r7, sp, #0
 8019246:	6078      	str	r0, [r7, #4]
 8019248:	460b      	mov	r3, r1
 801924a:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 801924c:	78fb      	ldrb	r3, [r7, #3]
 801924e:	461a      	mov	r2, r3
 8019250:	210b      	movs	r1, #11
 8019252:	6878      	ldr	r0, [r7, #4]
 8019254:	f000 f804 	bl	8019260 <icmp_send_response>
}
 8019258:	bf00      	nop
 801925a:	3708      	adds	r7, #8
 801925c:	46bd      	mov	sp, r7
 801925e:	bd80      	pop	{r7, pc}

08019260 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 8019260:	b580      	push	{r7, lr}
 8019262:	b08c      	sub	sp, #48	; 0x30
 8019264:	af04      	add	r7, sp, #16
 8019266:	6078      	str	r0, [r7, #4]
 8019268:	460b      	mov	r3, r1
 801926a:	70fb      	strb	r3, [r7, #3]
 801926c:	4613      	mov	r3, r2
 801926e:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 8019270:	f44f 7220 	mov.w	r2, #640	; 0x280
 8019274:	2124      	movs	r1, #36	; 0x24
 8019276:	2022      	movs	r0, #34	; 0x22
 8019278:	f7f7 fe98 	bl	8010fac <pbuf_alloc>
 801927c:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 801927e:	69fb      	ldr	r3, [r7, #28]
 8019280:	2b00      	cmp	r3, #0
 8019282:	d056      	beq.n	8019332 <icmp_send_response+0xd2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 8019284:	69fb      	ldr	r3, [r7, #28]
 8019286:	895b      	ldrh	r3, [r3, #10]
 8019288:	2b23      	cmp	r3, #35	; 0x23
 801928a:	d806      	bhi.n	801929a <icmp_send_response+0x3a>
 801928c:	4b2b      	ldr	r3, [pc, #172]	; (801933c <icmp_send_response+0xdc>)
 801928e:	f44f 72b4 	mov.w	r2, #360	; 0x168
 8019292:	492b      	ldr	r1, [pc, #172]	; (8019340 <icmp_send_response+0xe0>)
 8019294:	482b      	ldr	r0, [pc, #172]	; (8019344 <icmp_send_response+0xe4>)
 8019296:	f002 f80f 	bl	801b2b8 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 801929a:	687b      	ldr	r3, [r7, #4]
 801929c:	685b      	ldr	r3, [r3, #4]
 801929e:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 80192a0:	69fb      	ldr	r3, [r7, #28]
 80192a2:	685b      	ldr	r3, [r3, #4]
 80192a4:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 80192a6:	697b      	ldr	r3, [r7, #20]
 80192a8:	78fa      	ldrb	r2, [r7, #3]
 80192aa:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 80192ac:	697b      	ldr	r3, [r7, #20]
 80192ae:	78ba      	ldrb	r2, [r7, #2]
 80192b0:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 80192b2:	697b      	ldr	r3, [r7, #20]
 80192b4:	2200      	movs	r2, #0
 80192b6:	711a      	strb	r2, [r3, #4]
 80192b8:	2200      	movs	r2, #0
 80192ba:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 80192bc:	697b      	ldr	r3, [r7, #20]
 80192be:	2200      	movs	r2, #0
 80192c0:	719a      	strb	r2, [r3, #6]
 80192c2:	2200      	movs	r2, #0
 80192c4:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 80192c6:	69fb      	ldr	r3, [r7, #28]
 80192c8:	685b      	ldr	r3, [r3, #4]
 80192ca:	f103 0008 	add.w	r0, r3, #8
 80192ce:	687b      	ldr	r3, [r7, #4]
 80192d0:	685b      	ldr	r3, [r3, #4]
 80192d2:	221c      	movs	r2, #28
 80192d4:	4619      	mov	r1, r3
 80192d6:	f002 fa0a 	bl	801b6ee <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 80192da:	69bb      	ldr	r3, [r7, #24]
 80192dc:	68db      	ldr	r3, [r3, #12]
 80192de:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 80192e0:	f107 030c 	add.w	r3, r7, #12
 80192e4:	4618      	mov	r0, r3
 80192e6:	f000 f82f 	bl	8019348 <ip4_route>
 80192ea:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 80192ec:	693b      	ldr	r3, [r7, #16]
 80192ee:	2b00      	cmp	r3, #0
 80192f0:	d01b      	beq.n	801932a <icmp_send_response+0xca>
    /* calculate checksum */
    icmphdr->chksum = 0;
 80192f2:	697b      	ldr	r3, [r7, #20]
 80192f4:	2200      	movs	r2, #0
 80192f6:	709a      	strb	r2, [r3, #2]
 80192f8:	2200      	movs	r2, #0
 80192fa:	70da      	strb	r2, [r3, #3]
#if CHECKSUM_GEN_ICMP
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
 80192fc:	69fb      	ldr	r3, [r7, #28]
 80192fe:	895b      	ldrh	r3, [r3, #10]
 8019300:	4619      	mov	r1, r3
 8019302:	6978      	ldr	r0, [r7, #20]
 8019304:	f7f6 fdbd 	bl	800fe82 <inet_chksum>
 8019308:	4603      	mov	r3, r0
 801930a:	461a      	mov	r2, r3
 801930c:	697b      	ldr	r3, [r7, #20]
 801930e:	805a      	strh	r2, [r3, #2]
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 8019310:	f107 020c 	add.w	r2, r7, #12
 8019314:	693b      	ldr	r3, [r7, #16]
 8019316:	9302      	str	r3, [sp, #8]
 8019318:	2301      	movs	r3, #1
 801931a:	9301      	str	r3, [sp, #4]
 801931c:	2300      	movs	r3, #0
 801931e:	9300      	str	r3, [sp, #0]
 8019320:	23ff      	movs	r3, #255	; 0xff
 8019322:	2100      	movs	r1, #0
 8019324:	69f8      	ldr	r0, [r7, #28]
 8019326:	f000 f9cd 	bl	80196c4 <ip4_output_if>
  }
  pbuf_free(q);
 801932a:	69f8      	ldr	r0, [r7, #28]
 801932c:	f7f8 f922 	bl	8011574 <pbuf_free>
 8019330:	e000      	b.n	8019334 <icmp_send_response+0xd4>
    return;
 8019332:	bf00      	nop
}
 8019334:	3720      	adds	r7, #32
 8019336:	46bd      	mov	sp, r7
 8019338:	bd80      	pop	{r7, pc}
 801933a:	bf00      	nop
 801933c:	08020898 	.word	0x08020898
 8019340:	08020964 	.word	0x08020964
 8019344:	08020908 	.word	0x08020908

08019348 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 8019348:	b480      	push	{r7}
 801934a:	b085      	sub	sp, #20
 801934c:	af00      	add	r7, sp, #0
 801934e:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 8019350:	4b33      	ldr	r3, [pc, #204]	; (8019420 <ip4_route+0xd8>)
 8019352:	681b      	ldr	r3, [r3, #0]
 8019354:	60fb      	str	r3, [r7, #12]
 8019356:	e036      	b.n	80193c6 <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8019358:	68fb      	ldr	r3, [r7, #12]
 801935a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801935e:	f003 0301 	and.w	r3, r3, #1
 8019362:	b2db      	uxtb	r3, r3
 8019364:	2b00      	cmp	r3, #0
 8019366:	d02b      	beq.n	80193c0 <ip4_route+0x78>
 8019368:	68fb      	ldr	r3, [r7, #12]
 801936a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801936e:	089b      	lsrs	r3, r3, #2
 8019370:	f003 0301 	and.w	r3, r3, #1
 8019374:	b2db      	uxtb	r3, r3
 8019376:	2b00      	cmp	r3, #0
 8019378:	d022      	beq.n	80193c0 <ip4_route+0x78>
 801937a:	68fb      	ldr	r3, [r7, #12]
 801937c:	3304      	adds	r3, #4
 801937e:	681b      	ldr	r3, [r3, #0]
 8019380:	2b00      	cmp	r3, #0
 8019382:	d01d      	beq.n	80193c0 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 8019384:	687b      	ldr	r3, [r7, #4]
 8019386:	681a      	ldr	r2, [r3, #0]
 8019388:	68fb      	ldr	r3, [r7, #12]
 801938a:	3304      	adds	r3, #4
 801938c:	681b      	ldr	r3, [r3, #0]
 801938e:	405a      	eors	r2, r3
 8019390:	68fb      	ldr	r3, [r7, #12]
 8019392:	3308      	adds	r3, #8
 8019394:	681b      	ldr	r3, [r3, #0]
 8019396:	4013      	ands	r3, r2
 8019398:	2b00      	cmp	r3, #0
 801939a:	d101      	bne.n	80193a0 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 801939c:	68fb      	ldr	r3, [r7, #12]
 801939e:	e038      	b.n	8019412 <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 80193a0:	68fb      	ldr	r3, [r7, #12]
 80193a2:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80193a6:	f003 0302 	and.w	r3, r3, #2
 80193aa:	2b00      	cmp	r3, #0
 80193ac:	d108      	bne.n	80193c0 <ip4_route+0x78>
 80193ae:	687b      	ldr	r3, [r7, #4]
 80193b0:	681a      	ldr	r2, [r3, #0]
 80193b2:	68fb      	ldr	r3, [r7, #12]
 80193b4:	330c      	adds	r3, #12
 80193b6:	681b      	ldr	r3, [r3, #0]
 80193b8:	429a      	cmp	r2, r3
 80193ba:	d101      	bne.n	80193c0 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 80193bc:	68fb      	ldr	r3, [r7, #12]
 80193be:	e028      	b.n	8019412 <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 80193c0:	68fb      	ldr	r3, [r7, #12]
 80193c2:	681b      	ldr	r3, [r3, #0]
 80193c4:	60fb      	str	r3, [r7, #12]
 80193c6:	68fb      	ldr	r3, [r7, #12]
 80193c8:	2b00      	cmp	r3, #0
 80193ca:	d1c5      	bne.n	8019358 <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 80193cc:	4b15      	ldr	r3, [pc, #84]	; (8019424 <ip4_route+0xdc>)
 80193ce:	681b      	ldr	r3, [r3, #0]
 80193d0:	2b00      	cmp	r3, #0
 80193d2:	d01a      	beq.n	801940a <ip4_route+0xc2>
 80193d4:	4b13      	ldr	r3, [pc, #76]	; (8019424 <ip4_route+0xdc>)
 80193d6:	681b      	ldr	r3, [r3, #0]
 80193d8:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80193dc:	f003 0301 	and.w	r3, r3, #1
 80193e0:	2b00      	cmp	r3, #0
 80193e2:	d012      	beq.n	801940a <ip4_route+0xc2>
 80193e4:	4b0f      	ldr	r3, [pc, #60]	; (8019424 <ip4_route+0xdc>)
 80193e6:	681b      	ldr	r3, [r3, #0]
 80193e8:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80193ec:	f003 0304 	and.w	r3, r3, #4
 80193f0:	2b00      	cmp	r3, #0
 80193f2:	d00a      	beq.n	801940a <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 80193f4:	4b0b      	ldr	r3, [pc, #44]	; (8019424 <ip4_route+0xdc>)
 80193f6:	681b      	ldr	r3, [r3, #0]
 80193f8:	3304      	adds	r3, #4
 80193fa:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 80193fc:	2b00      	cmp	r3, #0
 80193fe:	d004      	beq.n	801940a <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8019400:	687b      	ldr	r3, [r7, #4]
 8019402:	681b      	ldr	r3, [r3, #0]
 8019404:	b2db      	uxtb	r3, r3
 8019406:	2b7f      	cmp	r3, #127	; 0x7f
 8019408:	d101      	bne.n	801940e <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 801940a:	2300      	movs	r3, #0
 801940c:	e001      	b.n	8019412 <ip4_route+0xca>
  }

  return netif_default;
 801940e:	4b05      	ldr	r3, [pc, #20]	; (8019424 <ip4_route+0xdc>)
 8019410:	681b      	ldr	r3, [r3, #0]
}
 8019412:	4618      	mov	r0, r3
 8019414:	3714      	adds	r7, #20
 8019416:	46bd      	mov	sp, r7
 8019418:	f85d 7b04 	ldr.w	r7, [sp], #4
 801941c:	4770      	bx	lr
 801941e:	bf00      	nop
 8019420:	200071a0 	.word	0x200071a0
 8019424:	200071a4 	.word	0x200071a4

08019428 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 8019428:	b580      	push	{r7, lr}
 801942a:	b082      	sub	sp, #8
 801942c:	af00      	add	r7, sp, #0
 801942e:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 8019430:	687b      	ldr	r3, [r7, #4]
 8019432:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8019436:	f003 0301 	and.w	r3, r3, #1
 801943a:	b2db      	uxtb	r3, r3
 801943c:	2b00      	cmp	r3, #0
 801943e:	d016      	beq.n	801946e <ip4_input_accept+0x46>
 8019440:	687b      	ldr	r3, [r7, #4]
 8019442:	3304      	adds	r3, #4
 8019444:	681b      	ldr	r3, [r3, #0]
 8019446:	2b00      	cmp	r3, #0
 8019448:	d011      	beq.n	801946e <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 801944a:	4b0b      	ldr	r3, [pc, #44]	; (8019478 <ip4_input_accept+0x50>)
 801944c:	695a      	ldr	r2, [r3, #20]
 801944e:	687b      	ldr	r3, [r7, #4]
 8019450:	3304      	adds	r3, #4
 8019452:	681b      	ldr	r3, [r3, #0]
 8019454:	429a      	cmp	r2, r3
 8019456:	d008      	beq.n	801946a <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 8019458:	4b07      	ldr	r3, [pc, #28]	; (8019478 <ip4_input_accept+0x50>)
 801945a:	695b      	ldr	r3, [r3, #20]
 801945c:	6879      	ldr	r1, [r7, #4]
 801945e:	4618      	mov	r0, r3
 8019460:	f000 fa08 	bl	8019874 <ip4_addr_isbroadcast_u32>
 8019464:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8019466:	2b00      	cmp	r3, #0
 8019468:	d001      	beq.n	801946e <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 801946a:	2301      	movs	r3, #1
 801946c:	e000      	b.n	8019470 <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 801946e:	2300      	movs	r3, #0
}
 8019470:	4618      	mov	r0, r3
 8019472:	3708      	adds	r7, #8
 8019474:	46bd      	mov	sp, r7
 8019476:	bd80      	pop	{r7, pc}
 8019478:	200008d0 	.word	0x200008d0

0801947c <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 801947c:	b580      	push	{r7, lr}
 801947e:	b086      	sub	sp, #24
 8019480:	af00      	add	r7, sp, #0
 8019482:	6078      	str	r0, [r7, #4]
 8019484:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 8019486:	687b      	ldr	r3, [r7, #4]
 8019488:	685b      	ldr	r3, [r3, #4]
 801948a:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 801948c:	697b      	ldr	r3, [r7, #20]
 801948e:	781b      	ldrb	r3, [r3, #0]
 8019490:	091b      	lsrs	r3, r3, #4
 8019492:	b2db      	uxtb	r3, r3
 8019494:	2b04      	cmp	r3, #4
 8019496:	d004      	beq.n	80194a2 <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 8019498:	6878      	ldr	r0, [r7, #4]
 801949a:	f7f8 f86b 	bl	8011574 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 801949e:	2300      	movs	r3, #0
 80194a0:	e107      	b.n	80196b2 <ip4_input+0x236>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 80194a2:	697b      	ldr	r3, [r7, #20]
 80194a4:	781b      	ldrb	r3, [r3, #0]
 80194a6:	f003 030f 	and.w	r3, r3, #15
 80194aa:	b2db      	uxtb	r3, r3
 80194ac:	009b      	lsls	r3, r3, #2
 80194ae:	b2db      	uxtb	r3, r3
 80194b0:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 80194b2:	697b      	ldr	r3, [r7, #20]
 80194b4:	885b      	ldrh	r3, [r3, #2]
 80194b6:	b29b      	uxth	r3, r3
 80194b8:	4618      	mov	r0, r3
 80194ba:	f7f6 fc57 	bl	800fd6c <lwip_htons>
 80194be:	4603      	mov	r3, r0
 80194c0:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 80194c2:	687b      	ldr	r3, [r7, #4]
 80194c4:	891b      	ldrh	r3, [r3, #8]
 80194c6:	89ba      	ldrh	r2, [r7, #12]
 80194c8:	429a      	cmp	r2, r3
 80194ca:	d204      	bcs.n	80194d6 <ip4_input+0x5a>
    pbuf_realloc(p, iphdr_len);
 80194cc:	89bb      	ldrh	r3, [r7, #12]
 80194ce:	4619      	mov	r1, r3
 80194d0:	6878      	ldr	r0, [r7, #4]
 80194d2:	f7f7 fecb 	bl	801126c <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 80194d6:	687b      	ldr	r3, [r7, #4]
 80194d8:	895b      	ldrh	r3, [r3, #10]
 80194da:	89fa      	ldrh	r2, [r7, #14]
 80194dc:	429a      	cmp	r2, r3
 80194de:	d807      	bhi.n	80194f0 <ip4_input+0x74>
 80194e0:	687b      	ldr	r3, [r7, #4]
 80194e2:	891b      	ldrh	r3, [r3, #8]
 80194e4:	89ba      	ldrh	r2, [r7, #12]
 80194e6:	429a      	cmp	r2, r3
 80194e8:	d802      	bhi.n	80194f0 <ip4_input+0x74>
 80194ea:	89fb      	ldrh	r3, [r7, #14]
 80194ec:	2b13      	cmp	r3, #19
 80194ee:	d804      	bhi.n	80194fa <ip4_input+0x7e>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 80194f0:	6878      	ldr	r0, [r7, #4]
 80194f2:	f7f8 f83f 	bl	8011574 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 80194f6:	2300      	movs	r3, #0
 80194f8:	e0db      	b.n	80196b2 <ip4_input+0x236>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 80194fa:	697b      	ldr	r3, [r7, #20]
 80194fc:	691b      	ldr	r3, [r3, #16]
 80194fe:	4a6f      	ldr	r2, [pc, #444]	; (80196bc <ip4_input+0x240>)
 8019500:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 8019502:	697b      	ldr	r3, [r7, #20]
 8019504:	68db      	ldr	r3, [r3, #12]
 8019506:	4a6d      	ldr	r2, [pc, #436]	; (80196bc <ip4_input+0x240>)
 8019508:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 801950a:	4b6c      	ldr	r3, [pc, #432]	; (80196bc <ip4_input+0x240>)
 801950c:	695b      	ldr	r3, [r3, #20]
 801950e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8019512:	2be0      	cmp	r3, #224	; 0xe0
 8019514:	d112      	bne.n	801953c <ip4_input+0xc0>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 8019516:	683b      	ldr	r3, [r7, #0]
 8019518:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801951c:	f003 0301 	and.w	r3, r3, #1
 8019520:	b2db      	uxtb	r3, r3
 8019522:	2b00      	cmp	r3, #0
 8019524:	d007      	beq.n	8019536 <ip4_input+0xba>
 8019526:	683b      	ldr	r3, [r7, #0]
 8019528:	3304      	adds	r3, #4
 801952a:	681b      	ldr	r3, [r3, #0]
 801952c:	2b00      	cmp	r3, #0
 801952e:	d002      	beq.n	8019536 <ip4_input+0xba>
      netif = inp;
 8019530:	683b      	ldr	r3, [r7, #0]
 8019532:	613b      	str	r3, [r7, #16]
 8019534:	e02a      	b.n	801958c <ip4_input+0x110>
    } else {
      netif = NULL;
 8019536:	2300      	movs	r3, #0
 8019538:	613b      	str	r3, [r7, #16]
 801953a:	e027      	b.n	801958c <ip4_input+0x110>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 801953c:	6838      	ldr	r0, [r7, #0]
 801953e:	f7ff ff73 	bl	8019428 <ip4_input_accept>
 8019542:	4603      	mov	r3, r0
 8019544:	2b00      	cmp	r3, #0
 8019546:	d002      	beq.n	801954e <ip4_input+0xd2>
      netif = inp;
 8019548:	683b      	ldr	r3, [r7, #0]
 801954a:	613b      	str	r3, [r7, #16]
 801954c:	e01e      	b.n	801958c <ip4_input+0x110>
    } else {
      netif = NULL;
 801954e:	2300      	movs	r3, #0
 8019550:	613b      	str	r3, [r7, #16]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 8019552:	4b5a      	ldr	r3, [pc, #360]	; (80196bc <ip4_input+0x240>)
 8019554:	695b      	ldr	r3, [r3, #20]
 8019556:	b2db      	uxtb	r3, r3
 8019558:	2b7f      	cmp	r3, #127	; 0x7f
 801955a:	d017      	beq.n	801958c <ip4_input+0x110>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 801955c:	4b58      	ldr	r3, [pc, #352]	; (80196c0 <ip4_input+0x244>)
 801955e:	681b      	ldr	r3, [r3, #0]
 8019560:	613b      	str	r3, [r7, #16]
 8019562:	e00e      	b.n	8019582 <ip4_input+0x106>
          if (netif == inp) {
 8019564:	693a      	ldr	r2, [r7, #16]
 8019566:	683b      	ldr	r3, [r7, #0]
 8019568:	429a      	cmp	r2, r3
 801956a:	d006      	beq.n	801957a <ip4_input+0xfe>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 801956c:	6938      	ldr	r0, [r7, #16]
 801956e:	f7ff ff5b 	bl	8019428 <ip4_input_accept>
 8019572:	4603      	mov	r3, r0
 8019574:	2b00      	cmp	r3, #0
 8019576:	d108      	bne.n	801958a <ip4_input+0x10e>
 8019578:	e000      	b.n	801957c <ip4_input+0x100>
            continue;
 801957a:	bf00      	nop
        NETIF_FOREACH(netif) {
 801957c:	693b      	ldr	r3, [r7, #16]
 801957e:	681b      	ldr	r3, [r3, #0]
 8019580:	613b      	str	r3, [r7, #16]
 8019582:	693b      	ldr	r3, [r7, #16]
 8019584:	2b00      	cmp	r3, #0
 8019586:	d1ed      	bne.n	8019564 <ip4_input+0xe8>
 8019588:	e000      	b.n	801958c <ip4_input+0x110>
            break;
 801958a:	bf00      	nop
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 801958c:	4b4b      	ldr	r3, [pc, #300]	; (80196bc <ip4_input+0x240>)
 801958e:	691b      	ldr	r3, [r3, #16]
 8019590:	6839      	ldr	r1, [r7, #0]
 8019592:	4618      	mov	r0, r3
 8019594:	f000 f96e 	bl	8019874 <ip4_addr_isbroadcast_u32>
 8019598:	4603      	mov	r3, r0
 801959a:	2b00      	cmp	r3, #0
 801959c:	d105      	bne.n	80195aa <ip4_input+0x12e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 801959e:	4b47      	ldr	r3, [pc, #284]	; (80196bc <ip4_input+0x240>)
 80195a0:	691b      	ldr	r3, [r3, #16]
 80195a2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 80195a6:	2be0      	cmp	r3, #224	; 0xe0
 80195a8:	d104      	bne.n	80195b4 <ip4_input+0x138>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 80195aa:	6878      	ldr	r0, [r7, #4]
 80195ac:	f7f7 ffe2 	bl	8011574 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 80195b0:	2300      	movs	r3, #0
 80195b2:	e07e      	b.n	80196b2 <ip4_input+0x236>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 80195b4:	693b      	ldr	r3, [r7, #16]
 80195b6:	2b00      	cmp	r3, #0
 80195b8:	d104      	bne.n	80195c4 <ip4_input+0x148>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 80195ba:	6878      	ldr	r0, [r7, #4]
 80195bc:	f7f7 ffda 	bl	8011574 <pbuf_free>
    return ERR_OK;
 80195c0:	2300      	movs	r3, #0
 80195c2:	e076      	b.n	80196b2 <ip4_input+0x236>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 80195c4:	697b      	ldr	r3, [r7, #20]
 80195c6:	88db      	ldrh	r3, [r3, #6]
 80195c8:	b29b      	uxth	r3, r3
 80195ca:	461a      	mov	r2, r3
 80195cc:	f64f 733f 	movw	r3, #65343	; 0xff3f
 80195d0:	4013      	ands	r3, r2
 80195d2:	2b00      	cmp	r3, #0
 80195d4:	d00b      	beq.n	80195ee <ip4_input+0x172>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 80195d6:	6878      	ldr	r0, [r7, #4]
 80195d8:	f000 fd22 	bl	801a020 <ip4_reass>
 80195dc:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 80195de:	687b      	ldr	r3, [r7, #4]
 80195e0:	2b00      	cmp	r3, #0
 80195e2:	d101      	bne.n	80195e8 <ip4_input+0x16c>
      return ERR_OK;
 80195e4:	2300      	movs	r3, #0
 80195e6:	e064      	b.n	80196b2 <ip4_input+0x236>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 80195e8:	687b      	ldr	r3, [r7, #4]
 80195ea:	685b      	ldr	r3, [r3, #4]
 80195ec:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 80195ee:	4a33      	ldr	r2, [pc, #204]	; (80196bc <ip4_input+0x240>)
 80195f0:	693b      	ldr	r3, [r7, #16]
 80195f2:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 80195f4:	4a31      	ldr	r2, [pc, #196]	; (80196bc <ip4_input+0x240>)
 80195f6:	683b      	ldr	r3, [r7, #0]
 80195f8:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 80195fa:	4a30      	ldr	r2, [pc, #192]	; (80196bc <ip4_input+0x240>)
 80195fc:	697b      	ldr	r3, [r7, #20]
 80195fe:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 8019600:	697b      	ldr	r3, [r7, #20]
 8019602:	781b      	ldrb	r3, [r3, #0]
 8019604:	f003 030f 	and.w	r3, r3, #15
 8019608:	b2db      	uxtb	r3, r3
 801960a:	009b      	lsls	r3, r3, #2
 801960c:	b2db      	uxtb	r3, r3
 801960e:	b29a      	uxth	r2, r3
 8019610:	4b2a      	ldr	r3, [pc, #168]	; (80196bc <ip4_input+0x240>)
 8019612:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 8019614:	89fb      	ldrh	r3, [r7, #14]
 8019616:	4619      	mov	r1, r3
 8019618:	6878      	ldr	r0, [r7, #4]
 801961a:	f7f7 ff25 	bl	8011468 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 801961e:	697b      	ldr	r3, [r7, #20]
 8019620:	7a5b      	ldrb	r3, [r3, #9]
 8019622:	2b11      	cmp	r3, #17
 8019624:	d006      	beq.n	8019634 <ip4_input+0x1b8>
 8019626:	2b11      	cmp	r3, #17
 8019628:	dc13      	bgt.n	8019652 <ip4_input+0x1d6>
 801962a:	2b01      	cmp	r3, #1
 801962c:	d00c      	beq.n	8019648 <ip4_input+0x1cc>
 801962e:	2b06      	cmp	r3, #6
 8019630:	d005      	beq.n	801963e <ip4_input+0x1c2>
 8019632:	e00e      	b.n	8019652 <ip4_input+0x1d6>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 8019634:	6839      	ldr	r1, [r7, #0]
 8019636:	6878      	ldr	r0, [r7, #4]
 8019638:	f7fe fc42 	bl	8017ec0 <udp_input>
        break;
 801963c:	e026      	b.n	801968c <ip4_input+0x210>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 801963e:	6839      	ldr	r1, [r7, #0]
 8019640:	6878      	ldr	r0, [r7, #4]
 8019642:	f7fa f863 	bl	801370c <tcp_input>
        break;
 8019646:	e021      	b.n	801968c <ip4_input+0x210>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 8019648:	6839      	ldr	r1, [r7, #0]
 801964a:	6878      	ldr	r0, [r7, #4]
 801964c:	f7ff fcc8 	bl	8018fe0 <icmp_input>
        break;
 8019650:	e01c      	b.n	801968c <ip4_input+0x210>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8019652:	4b1a      	ldr	r3, [pc, #104]	; (80196bc <ip4_input+0x240>)
 8019654:	695b      	ldr	r3, [r3, #20]
 8019656:	6939      	ldr	r1, [r7, #16]
 8019658:	4618      	mov	r0, r3
 801965a:	f000 f90b 	bl	8019874 <ip4_addr_isbroadcast_u32>
 801965e:	4603      	mov	r3, r0
 8019660:	2b00      	cmp	r3, #0
 8019662:	d10f      	bne.n	8019684 <ip4_input+0x208>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8019664:	4b15      	ldr	r3, [pc, #84]	; (80196bc <ip4_input+0x240>)
 8019666:	695b      	ldr	r3, [r3, #20]
 8019668:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 801966c:	2be0      	cmp	r3, #224	; 0xe0
 801966e:	d009      	beq.n	8019684 <ip4_input+0x208>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 8019670:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8019674:	4619      	mov	r1, r3
 8019676:	6878      	ldr	r0, [r7, #4]
 8019678:	f7f7 ff69 	bl	801154e <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 801967c:	2102      	movs	r1, #2
 801967e:	6878      	ldr	r0, [r7, #4]
 8019680:	f7ff fdce 	bl	8019220 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 8019684:	6878      	ldr	r0, [r7, #4]
 8019686:	f7f7 ff75 	bl	8011574 <pbuf_free>
        break;
 801968a:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 801968c:	4b0b      	ldr	r3, [pc, #44]	; (80196bc <ip4_input+0x240>)
 801968e:	2200      	movs	r2, #0
 8019690:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 8019692:	4b0a      	ldr	r3, [pc, #40]	; (80196bc <ip4_input+0x240>)
 8019694:	2200      	movs	r2, #0
 8019696:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 8019698:	4b08      	ldr	r3, [pc, #32]	; (80196bc <ip4_input+0x240>)
 801969a:	2200      	movs	r2, #0
 801969c:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 801969e:	4b07      	ldr	r3, [pc, #28]	; (80196bc <ip4_input+0x240>)
 80196a0:	2200      	movs	r2, #0
 80196a2:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 80196a4:	4b05      	ldr	r3, [pc, #20]	; (80196bc <ip4_input+0x240>)
 80196a6:	2200      	movs	r2, #0
 80196a8:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 80196aa:	4b04      	ldr	r3, [pc, #16]	; (80196bc <ip4_input+0x240>)
 80196ac:	2200      	movs	r2, #0
 80196ae:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 80196b0:	2300      	movs	r3, #0
}
 80196b2:	4618      	mov	r0, r3
 80196b4:	3718      	adds	r7, #24
 80196b6:	46bd      	mov	sp, r7
 80196b8:	bd80      	pop	{r7, pc}
 80196ba:	bf00      	nop
 80196bc:	200008d0 	.word	0x200008d0
 80196c0:	200071a0 	.word	0x200071a0

080196c4 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 80196c4:	b580      	push	{r7, lr}
 80196c6:	b08a      	sub	sp, #40	; 0x28
 80196c8:	af04      	add	r7, sp, #16
 80196ca:	60f8      	str	r0, [r7, #12]
 80196cc:	60b9      	str	r1, [r7, #8]
 80196ce:	607a      	str	r2, [r7, #4]
 80196d0:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 80196d2:	68bb      	ldr	r3, [r7, #8]
 80196d4:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 80196d6:	687b      	ldr	r3, [r7, #4]
 80196d8:	2b00      	cmp	r3, #0
 80196da:	d009      	beq.n	80196f0 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 80196dc:	68bb      	ldr	r3, [r7, #8]
 80196de:	2b00      	cmp	r3, #0
 80196e0:	d003      	beq.n	80196ea <ip4_output_if+0x26>
 80196e2:	68bb      	ldr	r3, [r7, #8]
 80196e4:	681b      	ldr	r3, [r3, #0]
 80196e6:	2b00      	cmp	r3, #0
 80196e8:	d102      	bne.n	80196f0 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 80196ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80196ec:	3304      	adds	r3, #4
 80196ee:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 80196f0:	78fa      	ldrb	r2, [r7, #3]
 80196f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80196f4:	9302      	str	r3, [sp, #8]
 80196f6:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80196fa:	9301      	str	r3, [sp, #4]
 80196fc:	f897 3020 	ldrb.w	r3, [r7, #32]
 8019700:	9300      	str	r3, [sp, #0]
 8019702:	4613      	mov	r3, r2
 8019704:	687a      	ldr	r2, [r7, #4]
 8019706:	6979      	ldr	r1, [r7, #20]
 8019708:	68f8      	ldr	r0, [r7, #12]
 801970a:	f000 f805 	bl	8019718 <ip4_output_if_src>
 801970e:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 8019710:	4618      	mov	r0, r3
 8019712:	3718      	adds	r7, #24
 8019714:	46bd      	mov	sp, r7
 8019716:	bd80      	pop	{r7, pc}

08019718 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 8019718:	b580      	push	{r7, lr}
 801971a:	b088      	sub	sp, #32
 801971c:	af00      	add	r7, sp, #0
 801971e:	60f8      	str	r0, [r7, #12]
 8019720:	60b9      	str	r1, [r7, #8]
 8019722:	607a      	str	r2, [r7, #4]
 8019724:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 8019726:	68fb      	ldr	r3, [r7, #12]
 8019728:	7b9b      	ldrb	r3, [r3, #14]
 801972a:	2b01      	cmp	r3, #1
 801972c:	d006      	beq.n	801973c <ip4_output_if_src+0x24>
 801972e:	4b4b      	ldr	r3, [pc, #300]	; (801985c <ip4_output_if_src+0x144>)
 8019730:	f44f 7255 	mov.w	r2, #852	; 0x354
 8019734:	494a      	ldr	r1, [pc, #296]	; (8019860 <ip4_output_if_src+0x148>)
 8019736:	484b      	ldr	r0, [pc, #300]	; (8019864 <ip4_output_if_src+0x14c>)
 8019738:	f001 fdbe 	bl	801b2b8 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 801973c:	687b      	ldr	r3, [r7, #4]
 801973e:	2b00      	cmp	r3, #0
 8019740:	d060      	beq.n	8019804 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 8019742:	2314      	movs	r3, #20
 8019744:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 8019746:	2114      	movs	r1, #20
 8019748:	68f8      	ldr	r0, [r7, #12]
 801974a:	f7f7 fe7d 	bl	8011448 <pbuf_add_header>
 801974e:	4603      	mov	r3, r0
 8019750:	2b00      	cmp	r3, #0
 8019752:	d002      	beq.n	801975a <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8019754:	f06f 0301 	mvn.w	r3, #1
 8019758:	e07c      	b.n	8019854 <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 801975a:	68fb      	ldr	r3, [r7, #12]
 801975c:	685b      	ldr	r3, [r3, #4]
 801975e:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 8019760:	68fb      	ldr	r3, [r7, #12]
 8019762:	895b      	ldrh	r3, [r3, #10]
 8019764:	2b13      	cmp	r3, #19
 8019766:	d806      	bhi.n	8019776 <ip4_output_if_src+0x5e>
 8019768:	4b3c      	ldr	r3, [pc, #240]	; (801985c <ip4_output_if_src+0x144>)
 801976a:	f44f 7262 	mov.w	r2, #904	; 0x388
 801976e:	493e      	ldr	r1, [pc, #248]	; (8019868 <ip4_output_if_src+0x150>)
 8019770:	483c      	ldr	r0, [pc, #240]	; (8019864 <ip4_output_if_src+0x14c>)
 8019772:	f001 fda1 	bl	801b2b8 <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 8019776:	69fb      	ldr	r3, [r7, #28]
 8019778:	78fa      	ldrb	r2, [r7, #3]
 801977a:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 801977c:	69fb      	ldr	r3, [r7, #28]
 801977e:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8019782:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 8019784:	687b      	ldr	r3, [r7, #4]
 8019786:	681a      	ldr	r2, [r3, #0]
 8019788:	69fb      	ldr	r3, [r7, #28]
 801978a:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 801978c:	8b7b      	ldrh	r3, [r7, #26]
 801978e:	089b      	lsrs	r3, r3, #2
 8019790:	b29b      	uxth	r3, r3
 8019792:	b2db      	uxtb	r3, r3
 8019794:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8019798:	b2da      	uxtb	r2, r3
 801979a:	69fb      	ldr	r3, [r7, #28]
 801979c:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 801979e:	69fb      	ldr	r3, [r7, #28]
 80197a0:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 80197a4:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 80197a6:	68fb      	ldr	r3, [r7, #12]
 80197a8:	891b      	ldrh	r3, [r3, #8]
 80197aa:	4618      	mov	r0, r3
 80197ac:	f7f6 fade 	bl	800fd6c <lwip_htons>
 80197b0:	4603      	mov	r3, r0
 80197b2:	461a      	mov	r2, r3
 80197b4:	69fb      	ldr	r3, [r7, #28]
 80197b6:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 80197b8:	69fb      	ldr	r3, [r7, #28]
 80197ba:	2200      	movs	r2, #0
 80197bc:	719a      	strb	r2, [r3, #6]
 80197be:	2200      	movs	r2, #0
 80197c0:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 80197c2:	4b2a      	ldr	r3, [pc, #168]	; (801986c <ip4_output_if_src+0x154>)
 80197c4:	881b      	ldrh	r3, [r3, #0]
 80197c6:	4618      	mov	r0, r3
 80197c8:	f7f6 fad0 	bl	800fd6c <lwip_htons>
 80197cc:	4603      	mov	r3, r0
 80197ce:	461a      	mov	r2, r3
 80197d0:	69fb      	ldr	r3, [r7, #28]
 80197d2:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 80197d4:	4b25      	ldr	r3, [pc, #148]	; (801986c <ip4_output_if_src+0x154>)
 80197d6:	881b      	ldrh	r3, [r3, #0]
 80197d8:	3301      	adds	r3, #1
 80197da:	b29a      	uxth	r2, r3
 80197dc:	4b23      	ldr	r3, [pc, #140]	; (801986c <ip4_output_if_src+0x154>)
 80197de:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 80197e0:	68bb      	ldr	r3, [r7, #8]
 80197e2:	2b00      	cmp	r3, #0
 80197e4:	d104      	bne.n	80197f0 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 80197e6:	4b22      	ldr	r3, [pc, #136]	; (8019870 <ip4_output_if_src+0x158>)
 80197e8:	681a      	ldr	r2, [r3, #0]
 80197ea:	69fb      	ldr	r3, [r7, #28]
 80197ec:	60da      	str	r2, [r3, #12]
 80197ee:	e003      	b.n	80197f8 <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 80197f0:	68bb      	ldr	r3, [r7, #8]
 80197f2:	681a      	ldr	r2, [r3, #0]
 80197f4:	69fb      	ldr	r3, [r7, #28]
 80197f6:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 80197f8:	69fb      	ldr	r3, [r7, #28]
 80197fa:	2200      	movs	r2, #0
 80197fc:	729a      	strb	r2, [r3, #10]
 80197fe:	2200      	movs	r2, #0
 8019800:	72da      	strb	r2, [r3, #11]
 8019802:	e00f      	b.n	8019824 <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 8019804:	68fb      	ldr	r3, [r7, #12]
 8019806:	895b      	ldrh	r3, [r3, #10]
 8019808:	2b13      	cmp	r3, #19
 801980a:	d802      	bhi.n	8019812 <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 801980c:	f06f 0301 	mvn.w	r3, #1
 8019810:	e020      	b.n	8019854 <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 8019812:	68fb      	ldr	r3, [r7, #12]
 8019814:	685b      	ldr	r3, [r3, #4]
 8019816:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 8019818:	69fb      	ldr	r3, [r7, #28]
 801981a:	691b      	ldr	r3, [r3, #16]
 801981c:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 801981e:	f107 0314 	add.w	r3, r7, #20
 8019822:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 8019824:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019826:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8019828:	2b00      	cmp	r3, #0
 801982a:	d00c      	beq.n	8019846 <ip4_output_if_src+0x12e>
 801982c:	68fb      	ldr	r3, [r7, #12]
 801982e:	891a      	ldrh	r2, [r3, #8]
 8019830:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019832:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8019834:	429a      	cmp	r2, r3
 8019836:	d906      	bls.n	8019846 <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 8019838:	687a      	ldr	r2, [r7, #4]
 801983a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 801983c:	68f8      	ldr	r0, [r7, #12]
 801983e:	f000 fde3 	bl	801a408 <ip4_frag>
 8019842:	4603      	mov	r3, r0
 8019844:	e006      	b.n	8019854 <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 8019846:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019848:	695b      	ldr	r3, [r3, #20]
 801984a:	687a      	ldr	r2, [r7, #4]
 801984c:	68f9      	ldr	r1, [r7, #12]
 801984e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8019850:	4798      	blx	r3
 8019852:	4603      	mov	r3, r0
}
 8019854:	4618      	mov	r0, r3
 8019856:	3720      	adds	r7, #32
 8019858:	46bd      	mov	sp, r7
 801985a:	bd80      	pop	{r7, pc}
 801985c:	08020990 	.word	0x08020990
 8019860:	080209c4 	.word	0x080209c4
 8019864:	080209d0 	.word	0x080209d0
 8019868:	080209f8 	.word	0x080209f8
 801986c:	200072fe 	.word	0x200072fe
 8019870:	08020e1c 	.word	0x08020e1c

08019874 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 8019874:	b480      	push	{r7}
 8019876:	b085      	sub	sp, #20
 8019878:	af00      	add	r7, sp, #0
 801987a:	6078      	str	r0, [r7, #4]
 801987c:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 801987e:	687b      	ldr	r3, [r7, #4]
 8019880:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 8019882:	687b      	ldr	r3, [r7, #4]
 8019884:	f1b3 3fff 	cmp.w	r3, #4294967295
 8019888:	d002      	beq.n	8019890 <ip4_addr_isbroadcast_u32+0x1c>
 801988a:	687b      	ldr	r3, [r7, #4]
 801988c:	2b00      	cmp	r3, #0
 801988e:	d101      	bne.n	8019894 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 8019890:	2301      	movs	r3, #1
 8019892:	e02a      	b.n	80198ea <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 8019894:	683b      	ldr	r3, [r7, #0]
 8019896:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801989a:	f003 0302 	and.w	r3, r3, #2
 801989e:	2b00      	cmp	r3, #0
 80198a0:	d101      	bne.n	80198a6 <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 80198a2:	2300      	movs	r3, #0
 80198a4:	e021      	b.n	80198ea <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 80198a6:	683b      	ldr	r3, [r7, #0]
 80198a8:	3304      	adds	r3, #4
 80198aa:	681b      	ldr	r3, [r3, #0]
 80198ac:	687a      	ldr	r2, [r7, #4]
 80198ae:	429a      	cmp	r2, r3
 80198b0:	d101      	bne.n	80198b6 <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 80198b2:	2300      	movs	r3, #0
 80198b4:	e019      	b.n	80198ea <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 80198b6:	68fa      	ldr	r2, [r7, #12]
 80198b8:	683b      	ldr	r3, [r7, #0]
 80198ba:	3304      	adds	r3, #4
 80198bc:	681b      	ldr	r3, [r3, #0]
 80198be:	405a      	eors	r2, r3
 80198c0:	683b      	ldr	r3, [r7, #0]
 80198c2:	3308      	adds	r3, #8
 80198c4:	681b      	ldr	r3, [r3, #0]
 80198c6:	4013      	ands	r3, r2
 80198c8:	2b00      	cmp	r3, #0
 80198ca:	d10d      	bne.n	80198e8 <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 80198cc:	683b      	ldr	r3, [r7, #0]
 80198ce:	3308      	adds	r3, #8
 80198d0:	681b      	ldr	r3, [r3, #0]
 80198d2:	43da      	mvns	r2, r3
 80198d4:	687b      	ldr	r3, [r7, #4]
 80198d6:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 80198d8:	683b      	ldr	r3, [r7, #0]
 80198da:	3308      	adds	r3, #8
 80198dc:	681b      	ldr	r3, [r3, #0]
 80198de:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 80198e0:	429a      	cmp	r2, r3
 80198e2:	d101      	bne.n	80198e8 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 80198e4:	2301      	movs	r3, #1
 80198e6:	e000      	b.n	80198ea <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 80198e8:	2300      	movs	r3, #0
  }
}
 80198ea:	4618      	mov	r0, r3
 80198ec:	3714      	adds	r7, #20
 80198ee:	46bd      	mov	sp, r7
 80198f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80198f4:	4770      	bx	lr
	...

080198f8 <ip4addr_ntoa>:
 * @return pointer to a global static (!) buffer that holds the ASCII
 *         representation of addr
 */
char *
ip4addr_ntoa(const ip4_addr_t *addr)
{
 80198f8:	b580      	push	{r7, lr}
 80198fa:	b082      	sub	sp, #8
 80198fc:	af00      	add	r7, sp, #0
 80198fe:	6078      	str	r0, [r7, #4]
  static char str[IP4ADDR_STRLEN_MAX];
  return ip4addr_ntoa_r(addr, str, IP4ADDR_STRLEN_MAX);
 8019900:	2210      	movs	r2, #16
 8019902:	4904      	ldr	r1, [pc, #16]	; (8019914 <ip4addr_ntoa+0x1c>)
 8019904:	6878      	ldr	r0, [r7, #4]
 8019906:	f000 f807 	bl	8019918 <ip4addr_ntoa_r>
 801990a:	4603      	mov	r3, r0
}
 801990c:	4618      	mov	r0, r3
 801990e:	3708      	adds	r7, #8
 8019910:	46bd      	mov	sp, r7
 8019912:	bd80      	pop	{r7, pc}
 8019914:	20007300 	.word	0x20007300

08019918 <ip4addr_ntoa_r>:
 * @return either pointer to buf which now holds the ASCII
 *         representation of addr or NULL if buf was too small
 */
char *
ip4addr_ntoa_r(const ip4_addr_t *addr, char *buf, int buflen)
{
 8019918:	b480      	push	{r7}
 801991a:	b08d      	sub	sp, #52	; 0x34
 801991c:	af00      	add	r7, sp, #0
 801991e:	60f8      	str	r0, [r7, #12]
 8019920:	60b9      	str	r1, [r7, #8]
 8019922:	607a      	str	r2, [r7, #4]
  char *rp;
  u8_t *ap;
  u8_t rem;
  u8_t n;
  u8_t i;
  int len = 0;
 8019924:	2300      	movs	r3, #0
 8019926:	623b      	str	r3, [r7, #32]

  s_addr = ip4_addr_get_u32(addr);
 8019928:	68fb      	ldr	r3, [r7, #12]
 801992a:	681b      	ldr	r3, [r3, #0]
 801992c:	61bb      	str	r3, [r7, #24]

  rp = buf;
 801992e:	68bb      	ldr	r3, [r7, #8]
 8019930:	62fb      	str	r3, [r7, #44]	; 0x2c
  ap = (u8_t *)&s_addr;
 8019932:	f107 0318 	add.w	r3, r7, #24
 8019936:	62bb      	str	r3, [r7, #40]	; 0x28
  for (n = 0; n < 4; n++) {
 8019938:	2300      	movs	r3, #0
 801993a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801993e:	e058      	b.n	80199f2 <ip4addr_ntoa_r+0xda>
    i = 0;
 8019940:	2300      	movs	r3, #0
 8019942:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    do {
      rem = *ap % (u8_t)10;
 8019946:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019948:	781a      	ldrb	r2, [r3, #0]
 801994a:	4b32      	ldr	r3, [pc, #200]	; (8019a14 <ip4addr_ntoa_r+0xfc>)
 801994c:	fba3 1302 	umull	r1, r3, r3, r2
 8019950:	08d9      	lsrs	r1, r3, #3
 8019952:	460b      	mov	r3, r1
 8019954:	009b      	lsls	r3, r3, #2
 8019956:	440b      	add	r3, r1
 8019958:	005b      	lsls	r3, r3, #1
 801995a:	1ad3      	subs	r3, r2, r3
 801995c:	77fb      	strb	r3, [r7, #31]
      *ap /= (u8_t)10;
 801995e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019960:	781b      	ldrb	r3, [r3, #0]
 8019962:	4a2c      	ldr	r2, [pc, #176]	; (8019a14 <ip4addr_ntoa_r+0xfc>)
 8019964:	fba2 2303 	umull	r2, r3, r2, r3
 8019968:	08db      	lsrs	r3, r3, #3
 801996a:	b2da      	uxtb	r2, r3
 801996c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801996e:	701a      	strb	r2, [r3, #0]
      inv[i++] = (char)('0' + rem);
 8019970:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8019974:	1c5a      	adds	r2, r3, #1
 8019976:	f887 2026 	strb.w	r2, [r7, #38]	; 0x26
 801997a:	4619      	mov	r1, r3
 801997c:	7ffb      	ldrb	r3, [r7, #31]
 801997e:	3330      	adds	r3, #48	; 0x30
 8019980:	b2da      	uxtb	r2, r3
 8019982:	f101 0330 	add.w	r3, r1, #48	; 0x30
 8019986:	443b      	add	r3, r7
 8019988:	f803 2c1c 	strb.w	r2, [r3, #-28]
    } while (*ap);
 801998c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801998e:	781b      	ldrb	r3, [r3, #0]
 8019990:	2b00      	cmp	r3, #0
 8019992:	d1d8      	bne.n	8019946 <ip4addr_ntoa_r+0x2e>
    while (i--) {
 8019994:	e011      	b.n	80199ba <ip4addr_ntoa_r+0xa2>
      if (len++ >= buflen) {
 8019996:	6a3b      	ldr	r3, [r7, #32]
 8019998:	1c5a      	adds	r2, r3, #1
 801999a:	623a      	str	r2, [r7, #32]
 801999c:	687a      	ldr	r2, [r7, #4]
 801999e:	429a      	cmp	r2, r3
 80199a0:	dc01      	bgt.n	80199a6 <ip4addr_ntoa_r+0x8e>
        return NULL;
 80199a2:	2300      	movs	r3, #0
 80199a4:	e030      	b.n	8019a08 <ip4addr_ntoa_r+0xf0>
      }
      *rp++ = inv[i];
 80199a6:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 80199aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80199ac:	1c59      	adds	r1, r3, #1
 80199ae:	62f9      	str	r1, [r7, #44]	; 0x2c
 80199b0:	3230      	adds	r2, #48	; 0x30
 80199b2:	443a      	add	r2, r7
 80199b4:	f812 2c1c 	ldrb.w	r2, [r2, #-28]
 80199b8:	701a      	strb	r2, [r3, #0]
    while (i--) {
 80199ba:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80199be:	1e5a      	subs	r2, r3, #1
 80199c0:	f887 2026 	strb.w	r2, [r7, #38]	; 0x26
 80199c4:	2b00      	cmp	r3, #0
 80199c6:	d1e6      	bne.n	8019996 <ip4addr_ntoa_r+0x7e>
    }
    if (len++ >= buflen) {
 80199c8:	6a3b      	ldr	r3, [r7, #32]
 80199ca:	1c5a      	adds	r2, r3, #1
 80199cc:	623a      	str	r2, [r7, #32]
 80199ce:	687a      	ldr	r2, [r7, #4]
 80199d0:	429a      	cmp	r2, r3
 80199d2:	dc01      	bgt.n	80199d8 <ip4addr_ntoa_r+0xc0>
      return NULL;
 80199d4:	2300      	movs	r3, #0
 80199d6:	e017      	b.n	8019a08 <ip4addr_ntoa_r+0xf0>
    }
    *rp++ = '.';
 80199d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80199da:	1c5a      	adds	r2, r3, #1
 80199dc:	62fa      	str	r2, [r7, #44]	; 0x2c
 80199de:	222e      	movs	r2, #46	; 0x2e
 80199e0:	701a      	strb	r2, [r3, #0]
    ap++;
 80199e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80199e4:	3301      	adds	r3, #1
 80199e6:	62bb      	str	r3, [r7, #40]	; 0x28
  for (n = 0; n < 4; n++) {
 80199e8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80199ec:	3301      	adds	r3, #1
 80199ee:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80199f2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80199f6:	2b03      	cmp	r3, #3
 80199f8:	d9a2      	bls.n	8019940 <ip4addr_ntoa_r+0x28>
  }
  *--rp = 0;
 80199fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80199fc:	3b01      	subs	r3, #1
 80199fe:	62fb      	str	r3, [r7, #44]	; 0x2c
 8019a00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019a02:	2200      	movs	r2, #0
 8019a04:	701a      	strb	r2, [r3, #0]
  return buf;
 8019a06:	68bb      	ldr	r3, [r7, #8]
}
 8019a08:	4618      	mov	r0, r3
 8019a0a:	3734      	adds	r7, #52	; 0x34
 8019a0c:	46bd      	mov	sp, r7
 8019a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019a12:	4770      	bx	lr
 8019a14:	cccccccd 	.word	0xcccccccd

08019a18 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 8019a18:	b580      	push	{r7, lr}
 8019a1a:	b084      	sub	sp, #16
 8019a1c:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 8019a1e:	2300      	movs	r3, #0
 8019a20:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 8019a22:	4b12      	ldr	r3, [pc, #72]	; (8019a6c <ip_reass_tmr+0x54>)
 8019a24:	681b      	ldr	r3, [r3, #0]
 8019a26:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 8019a28:	e018      	b.n	8019a5c <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 8019a2a:	68fb      	ldr	r3, [r7, #12]
 8019a2c:	7fdb      	ldrb	r3, [r3, #31]
 8019a2e:	2b00      	cmp	r3, #0
 8019a30:	d00b      	beq.n	8019a4a <ip_reass_tmr+0x32>
      r->timer--;
 8019a32:	68fb      	ldr	r3, [r7, #12]
 8019a34:	7fdb      	ldrb	r3, [r3, #31]
 8019a36:	3b01      	subs	r3, #1
 8019a38:	b2da      	uxtb	r2, r3
 8019a3a:	68fb      	ldr	r3, [r7, #12]
 8019a3c:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 8019a3e:	68fb      	ldr	r3, [r7, #12]
 8019a40:	60bb      	str	r3, [r7, #8]
      r = r->next;
 8019a42:	68fb      	ldr	r3, [r7, #12]
 8019a44:	681b      	ldr	r3, [r3, #0]
 8019a46:	60fb      	str	r3, [r7, #12]
 8019a48:	e008      	b.n	8019a5c <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 8019a4a:	68fb      	ldr	r3, [r7, #12]
 8019a4c:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 8019a4e:	68fb      	ldr	r3, [r7, #12]
 8019a50:	681b      	ldr	r3, [r3, #0]
 8019a52:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 8019a54:	68b9      	ldr	r1, [r7, #8]
 8019a56:	6878      	ldr	r0, [r7, #4]
 8019a58:	f000 f80a 	bl	8019a70 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 8019a5c:	68fb      	ldr	r3, [r7, #12]
 8019a5e:	2b00      	cmp	r3, #0
 8019a60:	d1e3      	bne.n	8019a2a <ip_reass_tmr+0x12>
    }
  }
}
 8019a62:	bf00      	nop
 8019a64:	bf00      	nop
 8019a66:	3710      	adds	r7, #16
 8019a68:	46bd      	mov	sp, r7
 8019a6a:	bd80      	pop	{r7, pc}
 8019a6c:	20007310 	.word	0x20007310

08019a70 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8019a70:	b580      	push	{r7, lr}
 8019a72:	b088      	sub	sp, #32
 8019a74:	af00      	add	r7, sp, #0
 8019a76:	6078      	str	r0, [r7, #4]
 8019a78:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 8019a7a:	2300      	movs	r3, #0
 8019a7c:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 8019a7e:	683a      	ldr	r2, [r7, #0]
 8019a80:	687b      	ldr	r3, [r7, #4]
 8019a82:	429a      	cmp	r2, r3
 8019a84:	d105      	bne.n	8019a92 <ip_reass_free_complete_datagram+0x22>
 8019a86:	4b45      	ldr	r3, [pc, #276]	; (8019b9c <ip_reass_free_complete_datagram+0x12c>)
 8019a88:	22ab      	movs	r2, #171	; 0xab
 8019a8a:	4945      	ldr	r1, [pc, #276]	; (8019ba0 <ip_reass_free_complete_datagram+0x130>)
 8019a8c:	4845      	ldr	r0, [pc, #276]	; (8019ba4 <ip_reass_free_complete_datagram+0x134>)
 8019a8e:	f001 fc13 	bl	801b2b8 <iprintf>
  if (prev != NULL) {
 8019a92:	683b      	ldr	r3, [r7, #0]
 8019a94:	2b00      	cmp	r3, #0
 8019a96:	d00a      	beq.n	8019aae <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 8019a98:	683b      	ldr	r3, [r7, #0]
 8019a9a:	681b      	ldr	r3, [r3, #0]
 8019a9c:	687a      	ldr	r2, [r7, #4]
 8019a9e:	429a      	cmp	r2, r3
 8019aa0:	d005      	beq.n	8019aae <ip_reass_free_complete_datagram+0x3e>
 8019aa2:	4b3e      	ldr	r3, [pc, #248]	; (8019b9c <ip_reass_free_complete_datagram+0x12c>)
 8019aa4:	22ad      	movs	r2, #173	; 0xad
 8019aa6:	4940      	ldr	r1, [pc, #256]	; (8019ba8 <ip_reass_free_complete_datagram+0x138>)
 8019aa8:	483e      	ldr	r0, [pc, #248]	; (8019ba4 <ip_reass_free_complete_datagram+0x134>)
 8019aaa:	f001 fc05 	bl	801b2b8 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 8019aae:	687b      	ldr	r3, [r7, #4]
 8019ab0:	685b      	ldr	r3, [r3, #4]
 8019ab2:	685b      	ldr	r3, [r3, #4]
 8019ab4:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 8019ab6:	697b      	ldr	r3, [r7, #20]
 8019ab8:	889b      	ldrh	r3, [r3, #4]
 8019aba:	b29b      	uxth	r3, r3
 8019abc:	2b00      	cmp	r3, #0
 8019abe:	d12a      	bne.n	8019b16 <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 8019ac0:	687b      	ldr	r3, [r7, #4]
 8019ac2:	685b      	ldr	r3, [r3, #4]
 8019ac4:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 8019ac6:	697b      	ldr	r3, [r7, #20]
 8019ac8:	681a      	ldr	r2, [r3, #0]
 8019aca:	687b      	ldr	r3, [r7, #4]
 8019acc:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 8019ace:	69bb      	ldr	r3, [r7, #24]
 8019ad0:	6858      	ldr	r0, [r3, #4]
 8019ad2:	687b      	ldr	r3, [r7, #4]
 8019ad4:	3308      	adds	r3, #8
 8019ad6:	2214      	movs	r2, #20
 8019ad8:	4619      	mov	r1, r3
 8019ada:	f001 fe08 	bl	801b6ee <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 8019ade:	2101      	movs	r1, #1
 8019ae0:	69b8      	ldr	r0, [r7, #24]
 8019ae2:	f7ff fbad 	bl	8019240 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 8019ae6:	69b8      	ldr	r0, [r7, #24]
 8019ae8:	f7f7 fdcc 	bl	8011684 <pbuf_clen>
 8019aec:	4603      	mov	r3, r0
 8019aee:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8019af0:	8bfa      	ldrh	r2, [r7, #30]
 8019af2:	8a7b      	ldrh	r3, [r7, #18]
 8019af4:	4413      	add	r3, r2
 8019af6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8019afa:	db05      	blt.n	8019b08 <ip_reass_free_complete_datagram+0x98>
 8019afc:	4b27      	ldr	r3, [pc, #156]	; (8019b9c <ip_reass_free_complete_datagram+0x12c>)
 8019afe:	22bc      	movs	r2, #188	; 0xbc
 8019b00:	492a      	ldr	r1, [pc, #168]	; (8019bac <ip_reass_free_complete_datagram+0x13c>)
 8019b02:	4828      	ldr	r0, [pc, #160]	; (8019ba4 <ip_reass_free_complete_datagram+0x134>)
 8019b04:	f001 fbd8 	bl	801b2b8 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8019b08:	8bfa      	ldrh	r2, [r7, #30]
 8019b0a:	8a7b      	ldrh	r3, [r7, #18]
 8019b0c:	4413      	add	r3, r2
 8019b0e:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 8019b10:	69b8      	ldr	r0, [r7, #24]
 8019b12:	f7f7 fd2f 	bl	8011574 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 8019b16:	687b      	ldr	r3, [r7, #4]
 8019b18:	685b      	ldr	r3, [r3, #4]
 8019b1a:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 8019b1c:	e01f      	b.n	8019b5e <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 8019b1e:	69bb      	ldr	r3, [r7, #24]
 8019b20:	685b      	ldr	r3, [r3, #4]
 8019b22:	617b      	str	r3, [r7, #20]
    pcur = p;
 8019b24:	69bb      	ldr	r3, [r7, #24]
 8019b26:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 8019b28:	697b      	ldr	r3, [r7, #20]
 8019b2a:	681b      	ldr	r3, [r3, #0]
 8019b2c:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 8019b2e:	68f8      	ldr	r0, [r7, #12]
 8019b30:	f7f7 fda8 	bl	8011684 <pbuf_clen>
 8019b34:	4603      	mov	r3, r0
 8019b36:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8019b38:	8bfa      	ldrh	r2, [r7, #30]
 8019b3a:	8a7b      	ldrh	r3, [r7, #18]
 8019b3c:	4413      	add	r3, r2
 8019b3e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8019b42:	db05      	blt.n	8019b50 <ip_reass_free_complete_datagram+0xe0>
 8019b44:	4b15      	ldr	r3, [pc, #84]	; (8019b9c <ip_reass_free_complete_datagram+0x12c>)
 8019b46:	22cc      	movs	r2, #204	; 0xcc
 8019b48:	4918      	ldr	r1, [pc, #96]	; (8019bac <ip_reass_free_complete_datagram+0x13c>)
 8019b4a:	4816      	ldr	r0, [pc, #88]	; (8019ba4 <ip_reass_free_complete_datagram+0x134>)
 8019b4c:	f001 fbb4 	bl	801b2b8 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8019b50:	8bfa      	ldrh	r2, [r7, #30]
 8019b52:	8a7b      	ldrh	r3, [r7, #18]
 8019b54:	4413      	add	r3, r2
 8019b56:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 8019b58:	68f8      	ldr	r0, [r7, #12]
 8019b5a:	f7f7 fd0b 	bl	8011574 <pbuf_free>
  while (p != NULL) {
 8019b5e:	69bb      	ldr	r3, [r7, #24]
 8019b60:	2b00      	cmp	r3, #0
 8019b62:	d1dc      	bne.n	8019b1e <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 8019b64:	6839      	ldr	r1, [r7, #0]
 8019b66:	6878      	ldr	r0, [r7, #4]
 8019b68:	f000 f8c2 	bl	8019cf0 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 8019b6c:	4b10      	ldr	r3, [pc, #64]	; (8019bb0 <ip_reass_free_complete_datagram+0x140>)
 8019b6e:	881b      	ldrh	r3, [r3, #0]
 8019b70:	8bfa      	ldrh	r2, [r7, #30]
 8019b72:	429a      	cmp	r2, r3
 8019b74:	d905      	bls.n	8019b82 <ip_reass_free_complete_datagram+0x112>
 8019b76:	4b09      	ldr	r3, [pc, #36]	; (8019b9c <ip_reass_free_complete_datagram+0x12c>)
 8019b78:	22d2      	movs	r2, #210	; 0xd2
 8019b7a:	490e      	ldr	r1, [pc, #56]	; (8019bb4 <ip_reass_free_complete_datagram+0x144>)
 8019b7c:	4809      	ldr	r0, [pc, #36]	; (8019ba4 <ip_reass_free_complete_datagram+0x134>)
 8019b7e:	f001 fb9b 	bl	801b2b8 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 8019b82:	4b0b      	ldr	r3, [pc, #44]	; (8019bb0 <ip_reass_free_complete_datagram+0x140>)
 8019b84:	881a      	ldrh	r2, [r3, #0]
 8019b86:	8bfb      	ldrh	r3, [r7, #30]
 8019b88:	1ad3      	subs	r3, r2, r3
 8019b8a:	b29a      	uxth	r2, r3
 8019b8c:	4b08      	ldr	r3, [pc, #32]	; (8019bb0 <ip_reass_free_complete_datagram+0x140>)
 8019b8e:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 8019b90:	8bfb      	ldrh	r3, [r7, #30]
}
 8019b92:	4618      	mov	r0, r3
 8019b94:	3720      	adds	r7, #32
 8019b96:	46bd      	mov	sp, r7
 8019b98:	bd80      	pop	{r7, pc}
 8019b9a:	bf00      	nop
 8019b9c:	08020a28 	.word	0x08020a28
 8019ba0:	08020a64 	.word	0x08020a64
 8019ba4:	08020a70 	.word	0x08020a70
 8019ba8:	08020a98 	.word	0x08020a98
 8019bac:	08020aac 	.word	0x08020aac
 8019bb0:	20007314 	.word	0x20007314
 8019bb4:	08020acc 	.word	0x08020acc

08019bb8 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 8019bb8:	b580      	push	{r7, lr}
 8019bba:	b08a      	sub	sp, #40	; 0x28
 8019bbc:	af00      	add	r7, sp, #0
 8019bbe:	6078      	str	r0, [r7, #4]
 8019bc0:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 8019bc2:	2300      	movs	r3, #0
 8019bc4:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 8019bc6:	2300      	movs	r3, #0
 8019bc8:	623b      	str	r3, [r7, #32]
    prev = NULL;
 8019bca:	2300      	movs	r3, #0
 8019bcc:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 8019bce:	2300      	movs	r3, #0
 8019bd0:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 8019bd2:	2300      	movs	r3, #0
 8019bd4:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 8019bd6:	4b28      	ldr	r3, [pc, #160]	; (8019c78 <ip_reass_remove_oldest_datagram+0xc0>)
 8019bd8:	681b      	ldr	r3, [r3, #0]
 8019bda:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 8019bdc:	e030      	b.n	8019c40 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 8019bde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019be0:	695a      	ldr	r2, [r3, #20]
 8019be2:	687b      	ldr	r3, [r7, #4]
 8019be4:	68db      	ldr	r3, [r3, #12]
 8019be6:	429a      	cmp	r2, r3
 8019be8:	d10c      	bne.n	8019c04 <ip_reass_remove_oldest_datagram+0x4c>
 8019bea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019bec:	699a      	ldr	r2, [r3, #24]
 8019bee:	687b      	ldr	r3, [r7, #4]
 8019bf0:	691b      	ldr	r3, [r3, #16]
 8019bf2:	429a      	cmp	r2, r3
 8019bf4:	d106      	bne.n	8019c04 <ip_reass_remove_oldest_datagram+0x4c>
 8019bf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019bf8:	899a      	ldrh	r2, [r3, #12]
 8019bfa:	687b      	ldr	r3, [r7, #4]
 8019bfc:	889b      	ldrh	r3, [r3, #4]
 8019bfe:	b29b      	uxth	r3, r3
 8019c00:	429a      	cmp	r2, r3
 8019c02:	d014      	beq.n	8019c2e <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 8019c04:	693b      	ldr	r3, [r7, #16]
 8019c06:	3301      	adds	r3, #1
 8019c08:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 8019c0a:	6a3b      	ldr	r3, [r7, #32]
 8019c0c:	2b00      	cmp	r3, #0
 8019c0e:	d104      	bne.n	8019c1a <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 8019c10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019c12:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8019c14:	69fb      	ldr	r3, [r7, #28]
 8019c16:	61bb      	str	r3, [r7, #24]
 8019c18:	e009      	b.n	8019c2e <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 8019c1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019c1c:	7fda      	ldrb	r2, [r3, #31]
 8019c1e:	6a3b      	ldr	r3, [r7, #32]
 8019c20:	7fdb      	ldrb	r3, [r3, #31]
 8019c22:	429a      	cmp	r2, r3
 8019c24:	d803      	bhi.n	8019c2e <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 8019c26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019c28:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8019c2a:	69fb      	ldr	r3, [r7, #28]
 8019c2c:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 8019c2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019c30:	681b      	ldr	r3, [r3, #0]
 8019c32:	2b00      	cmp	r3, #0
 8019c34:	d001      	beq.n	8019c3a <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 8019c36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019c38:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 8019c3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019c3c:	681b      	ldr	r3, [r3, #0]
 8019c3e:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 8019c40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019c42:	2b00      	cmp	r3, #0
 8019c44:	d1cb      	bne.n	8019bde <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 8019c46:	6a3b      	ldr	r3, [r7, #32]
 8019c48:	2b00      	cmp	r3, #0
 8019c4a:	d008      	beq.n	8019c5e <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 8019c4c:	69b9      	ldr	r1, [r7, #24]
 8019c4e:	6a38      	ldr	r0, [r7, #32]
 8019c50:	f7ff ff0e 	bl	8019a70 <ip_reass_free_complete_datagram>
 8019c54:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 8019c56:	697a      	ldr	r2, [r7, #20]
 8019c58:	68fb      	ldr	r3, [r7, #12]
 8019c5a:	4413      	add	r3, r2
 8019c5c:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 8019c5e:	697a      	ldr	r2, [r7, #20]
 8019c60:	683b      	ldr	r3, [r7, #0]
 8019c62:	429a      	cmp	r2, r3
 8019c64:	da02      	bge.n	8019c6c <ip_reass_remove_oldest_datagram+0xb4>
 8019c66:	693b      	ldr	r3, [r7, #16]
 8019c68:	2b01      	cmp	r3, #1
 8019c6a:	dcac      	bgt.n	8019bc6 <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 8019c6c:	697b      	ldr	r3, [r7, #20]
}
 8019c6e:	4618      	mov	r0, r3
 8019c70:	3728      	adds	r7, #40	; 0x28
 8019c72:	46bd      	mov	sp, r7
 8019c74:	bd80      	pop	{r7, pc}
 8019c76:	bf00      	nop
 8019c78:	20007310 	.word	0x20007310

08019c7c <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 8019c7c:	b580      	push	{r7, lr}
 8019c7e:	b084      	sub	sp, #16
 8019c80:	af00      	add	r7, sp, #0
 8019c82:	6078      	str	r0, [r7, #4]
 8019c84:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8019c86:	2004      	movs	r0, #4
 8019c88:	f7f6 fd8e 	bl	80107a8 <memp_malloc>
 8019c8c:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 8019c8e:	68fb      	ldr	r3, [r7, #12]
 8019c90:	2b00      	cmp	r3, #0
 8019c92:	d110      	bne.n	8019cb6 <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 8019c94:	6839      	ldr	r1, [r7, #0]
 8019c96:	6878      	ldr	r0, [r7, #4]
 8019c98:	f7ff ff8e 	bl	8019bb8 <ip_reass_remove_oldest_datagram>
 8019c9c:	4602      	mov	r2, r0
 8019c9e:	683b      	ldr	r3, [r7, #0]
 8019ca0:	4293      	cmp	r3, r2
 8019ca2:	dc03      	bgt.n	8019cac <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8019ca4:	2004      	movs	r0, #4
 8019ca6:	f7f6 fd7f 	bl	80107a8 <memp_malloc>
 8019caa:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 8019cac:	68fb      	ldr	r3, [r7, #12]
 8019cae:	2b00      	cmp	r3, #0
 8019cb0:	d101      	bne.n	8019cb6 <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 8019cb2:	2300      	movs	r3, #0
 8019cb4:	e016      	b.n	8019ce4 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 8019cb6:	2220      	movs	r2, #32
 8019cb8:	2100      	movs	r1, #0
 8019cba:	68f8      	ldr	r0, [r7, #12]
 8019cbc:	f001 fc8c 	bl	801b5d8 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 8019cc0:	68fb      	ldr	r3, [r7, #12]
 8019cc2:	220f      	movs	r2, #15
 8019cc4:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 8019cc6:	4b09      	ldr	r3, [pc, #36]	; (8019cec <ip_reass_enqueue_new_datagram+0x70>)
 8019cc8:	681a      	ldr	r2, [r3, #0]
 8019cca:	68fb      	ldr	r3, [r7, #12]
 8019ccc:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 8019cce:	4a07      	ldr	r2, [pc, #28]	; (8019cec <ip_reass_enqueue_new_datagram+0x70>)
 8019cd0:	68fb      	ldr	r3, [r7, #12]
 8019cd2:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 8019cd4:	68fb      	ldr	r3, [r7, #12]
 8019cd6:	3308      	adds	r3, #8
 8019cd8:	2214      	movs	r2, #20
 8019cda:	6879      	ldr	r1, [r7, #4]
 8019cdc:	4618      	mov	r0, r3
 8019cde:	f001 fd06 	bl	801b6ee <memcpy>
  return ipr;
 8019ce2:	68fb      	ldr	r3, [r7, #12]
}
 8019ce4:	4618      	mov	r0, r3
 8019ce6:	3710      	adds	r7, #16
 8019ce8:	46bd      	mov	sp, r7
 8019cea:	bd80      	pop	{r7, pc}
 8019cec:	20007310 	.word	0x20007310

08019cf0 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8019cf0:	b580      	push	{r7, lr}
 8019cf2:	b082      	sub	sp, #8
 8019cf4:	af00      	add	r7, sp, #0
 8019cf6:	6078      	str	r0, [r7, #4]
 8019cf8:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 8019cfa:	4b10      	ldr	r3, [pc, #64]	; (8019d3c <ip_reass_dequeue_datagram+0x4c>)
 8019cfc:	681b      	ldr	r3, [r3, #0]
 8019cfe:	687a      	ldr	r2, [r7, #4]
 8019d00:	429a      	cmp	r2, r3
 8019d02:	d104      	bne.n	8019d0e <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 8019d04:	687b      	ldr	r3, [r7, #4]
 8019d06:	681b      	ldr	r3, [r3, #0]
 8019d08:	4a0c      	ldr	r2, [pc, #48]	; (8019d3c <ip_reass_dequeue_datagram+0x4c>)
 8019d0a:	6013      	str	r3, [r2, #0]
 8019d0c:	e00d      	b.n	8019d2a <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 8019d0e:	683b      	ldr	r3, [r7, #0]
 8019d10:	2b00      	cmp	r3, #0
 8019d12:	d106      	bne.n	8019d22 <ip_reass_dequeue_datagram+0x32>
 8019d14:	4b0a      	ldr	r3, [pc, #40]	; (8019d40 <ip_reass_dequeue_datagram+0x50>)
 8019d16:	f240 1245 	movw	r2, #325	; 0x145
 8019d1a:	490a      	ldr	r1, [pc, #40]	; (8019d44 <ip_reass_dequeue_datagram+0x54>)
 8019d1c:	480a      	ldr	r0, [pc, #40]	; (8019d48 <ip_reass_dequeue_datagram+0x58>)
 8019d1e:	f001 facb 	bl	801b2b8 <iprintf>
    prev->next = ipr->next;
 8019d22:	687b      	ldr	r3, [r7, #4]
 8019d24:	681a      	ldr	r2, [r3, #0]
 8019d26:	683b      	ldr	r3, [r7, #0]
 8019d28:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 8019d2a:	6879      	ldr	r1, [r7, #4]
 8019d2c:	2004      	movs	r0, #4
 8019d2e:	f7f6 fdab 	bl	8010888 <memp_free>
}
 8019d32:	bf00      	nop
 8019d34:	3708      	adds	r7, #8
 8019d36:	46bd      	mov	sp, r7
 8019d38:	bd80      	pop	{r7, pc}
 8019d3a:	bf00      	nop
 8019d3c:	20007310 	.word	0x20007310
 8019d40:	08020a28 	.word	0x08020a28
 8019d44:	08020af0 	.word	0x08020af0
 8019d48:	08020a70 	.word	0x08020a70

08019d4c <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 8019d4c:	b580      	push	{r7, lr}
 8019d4e:	b08c      	sub	sp, #48	; 0x30
 8019d50:	af00      	add	r7, sp, #0
 8019d52:	60f8      	str	r0, [r7, #12]
 8019d54:	60b9      	str	r1, [r7, #8]
 8019d56:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 8019d58:	2300      	movs	r3, #0
 8019d5a:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 8019d5c:	2301      	movs	r3, #1
 8019d5e:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 8019d60:	68bb      	ldr	r3, [r7, #8]
 8019d62:	685b      	ldr	r3, [r3, #4]
 8019d64:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8019d66:	69fb      	ldr	r3, [r7, #28]
 8019d68:	885b      	ldrh	r3, [r3, #2]
 8019d6a:	b29b      	uxth	r3, r3
 8019d6c:	4618      	mov	r0, r3
 8019d6e:	f7f5 fffd 	bl	800fd6c <lwip_htons>
 8019d72:	4603      	mov	r3, r0
 8019d74:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 8019d76:	69fb      	ldr	r3, [r7, #28]
 8019d78:	781b      	ldrb	r3, [r3, #0]
 8019d7a:	f003 030f 	and.w	r3, r3, #15
 8019d7e:	b2db      	uxtb	r3, r3
 8019d80:	009b      	lsls	r3, r3, #2
 8019d82:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 8019d84:	7e7b      	ldrb	r3, [r7, #25]
 8019d86:	b29b      	uxth	r3, r3
 8019d88:	8b7a      	ldrh	r2, [r7, #26]
 8019d8a:	429a      	cmp	r2, r3
 8019d8c:	d202      	bcs.n	8019d94 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8019d8e:	f04f 33ff 	mov.w	r3, #4294967295
 8019d92:	e135      	b.n	801a000 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 8019d94:	7e7b      	ldrb	r3, [r7, #25]
 8019d96:	b29b      	uxth	r3, r3
 8019d98:	8b7a      	ldrh	r2, [r7, #26]
 8019d9a:	1ad3      	subs	r3, r2, r3
 8019d9c:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 8019d9e:	69fb      	ldr	r3, [r7, #28]
 8019da0:	88db      	ldrh	r3, [r3, #6]
 8019da2:	b29b      	uxth	r3, r3
 8019da4:	4618      	mov	r0, r3
 8019da6:	f7f5 ffe1 	bl	800fd6c <lwip_htons>
 8019daa:	4603      	mov	r3, r0
 8019dac:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8019db0:	b29b      	uxth	r3, r3
 8019db2:	00db      	lsls	r3, r3, #3
 8019db4:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 8019db6:	68bb      	ldr	r3, [r7, #8]
 8019db8:	685b      	ldr	r3, [r3, #4]
 8019dba:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 8019dbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019dbe:	2200      	movs	r2, #0
 8019dc0:	701a      	strb	r2, [r3, #0]
 8019dc2:	2200      	movs	r2, #0
 8019dc4:	705a      	strb	r2, [r3, #1]
 8019dc6:	2200      	movs	r2, #0
 8019dc8:	709a      	strb	r2, [r3, #2]
 8019dca:	2200      	movs	r2, #0
 8019dcc:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 8019dce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019dd0:	8afa      	ldrh	r2, [r7, #22]
 8019dd2:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 8019dd4:	8afa      	ldrh	r2, [r7, #22]
 8019dd6:	8b7b      	ldrh	r3, [r7, #26]
 8019dd8:	4413      	add	r3, r2
 8019dda:	b29a      	uxth	r2, r3
 8019ddc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019dde:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 8019de0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019de2:	88db      	ldrh	r3, [r3, #6]
 8019de4:	b29b      	uxth	r3, r3
 8019de6:	8afa      	ldrh	r2, [r7, #22]
 8019de8:	429a      	cmp	r2, r3
 8019dea:	d902      	bls.n	8019df2 <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8019dec:	f04f 33ff 	mov.w	r3, #4294967295
 8019df0:	e106      	b.n	801a000 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 8019df2:	68fb      	ldr	r3, [r7, #12]
 8019df4:	685b      	ldr	r3, [r3, #4]
 8019df6:	627b      	str	r3, [r7, #36]	; 0x24
 8019df8:	e068      	b.n	8019ecc <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 8019dfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019dfc:	685b      	ldr	r3, [r3, #4]
 8019dfe:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 8019e00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019e02:	889b      	ldrh	r3, [r3, #4]
 8019e04:	b29a      	uxth	r2, r3
 8019e06:	693b      	ldr	r3, [r7, #16]
 8019e08:	889b      	ldrh	r3, [r3, #4]
 8019e0a:	b29b      	uxth	r3, r3
 8019e0c:	429a      	cmp	r2, r3
 8019e0e:	d235      	bcs.n	8019e7c <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 8019e10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019e12:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8019e14:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 8019e16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019e18:	2b00      	cmp	r3, #0
 8019e1a:	d020      	beq.n	8019e5e <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 8019e1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019e1e:	889b      	ldrh	r3, [r3, #4]
 8019e20:	b29a      	uxth	r2, r3
 8019e22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019e24:	88db      	ldrh	r3, [r3, #6]
 8019e26:	b29b      	uxth	r3, r3
 8019e28:	429a      	cmp	r2, r3
 8019e2a:	d307      	bcc.n	8019e3c <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 8019e2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019e2e:	88db      	ldrh	r3, [r3, #6]
 8019e30:	b29a      	uxth	r2, r3
 8019e32:	693b      	ldr	r3, [r7, #16]
 8019e34:	889b      	ldrh	r3, [r3, #4]
 8019e36:	b29b      	uxth	r3, r3
 8019e38:	429a      	cmp	r2, r3
 8019e3a:	d902      	bls.n	8019e42 <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8019e3c:	f04f 33ff 	mov.w	r3, #4294967295
 8019e40:	e0de      	b.n	801a000 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 8019e42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019e44:	68ba      	ldr	r2, [r7, #8]
 8019e46:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 8019e48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019e4a:	88db      	ldrh	r3, [r3, #6]
 8019e4c:	b29a      	uxth	r2, r3
 8019e4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019e50:	889b      	ldrh	r3, [r3, #4]
 8019e52:	b29b      	uxth	r3, r3
 8019e54:	429a      	cmp	r2, r3
 8019e56:	d03d      	beq.n	8019ed4 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8019e58:	2300      	movs	r3, #0
 8019e5a:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 8019e5c:	e03a      	b.n	8019ed4 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 8019e5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019e60:	88db      	ldrh	r3, [r3, #6]
 8019e62:	b29a      	uxth	r2, r3
 8019e64:	693b      	ldr	r3, [r7, #16]
 8019e66:	889b      	ldrh	r3, [r3, #4]
 8019e68:	b29b      	uxth	r3, r3
 8019e6a:	429a      	cmp	r2, r3
 8019e6c:	d902      	bls.n	8019e74 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8019e6e:	f04f 33ff 	mov.w	r3, #4294967295
 8019e72:	e0c5      	b.n	801a000 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 8019e74:	68fb      	ldr	r3, [r7, #12]
 8019e76:	68ba      	ldr	r2, [r7, #8]
 8019e78:	605a      	str	r2, [r3, #4]
      break;
 8019e7a:	e02b      	b.n	8019ed4 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 8019e7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019e7e:	889b      	ldrh	r3, [r3, #4]
 8019e80:	b29a      	uxth	r2, r3
 8019e82:	693b      	ldr	r3, [r7, #16]
 8019e84:	889b      	ldrh	r3, [r3, #4]
 8019e86:	b29b      	uxth	r3, r3
 8019e88:	429a      	cmp	r2, r3
 8019e8a:	d102      	bne.n	8019e92 <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8019e8c:	f04f 33ff 	mov.w	r3, #4294967295
 8019e90:	e0b6      	b.n	801a000 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 8019e92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019e94:	889b      	ldrh	r3, [r3, #4]
 8019e96:	b29a      	uxth	r2, r3
 8019e98:	693b      	ldr	r3, [r7, #16]
 8019e9a:	88db      	ldrh	r3, [r3, #6]
 8019e9c:	b29b      	uxth	r3, r3
 8019e9e:	429a      	cmp	r2, r3
 8019ea0:	d202      	bcs.n	8019ea8 <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8019ea2:	f04f 33ff 	mov.w	r3, #4294967295
 8019ea6:	e0ab      	b.n	801a000 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 8019ea8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019eaa:	2b00      	cmp	r3, #0
 8019eac:	d009      	beq.n	8019ec2 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 8019eae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019eb0:	88db      	ldrh	r3, [r3, #6]
 8019eb2:	b29a      	uxth	r2, r3
 8019eb4:	693b      	ldr	r3, [r7, #16]
 8019eb6:	889b      	ldrh	r3, [r3, #4]
 8019eb8:	b29b      	uxth	r3, r3
 8019eba:	429a      	cmp	r2, r3
 8019ebc:	d001      	beq.n	8019ec2 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8019ebe:	2300      	movs	r3, #0
 8019ec0:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 8019ec2:	693b      	ldr	r3, [r7, #16]
 8019ec4:	681b      	ldr	r3, [r3, #0]
 8019ec6:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 8019ec8:	693b      	ldr	r3, [r7, #16]
 8019eca:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 8019ecc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019ece:	2b00      	cmp	r3, #0
 8019ed0:	d193      	bne.n	8019dfa <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 8019ed2:	e000      	b.n	8019ed6 <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 8019ed4:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 8019ed6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019ed8:	2b00      	cmp	r3, #0
 8019eda:	d12d      	bne.n	8019f38 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 8019edc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019ede:	2b00      	cmp	r3, #0
 8019ee0:	d01c      	beq.n	8019f1c <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 8019ee2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019ee4:	88db      	ldrh	r3, [r3, #6]
 8019ee6:	b29a      	uxth	r2, r3
 8019ee8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019eea:	889b      	ldrh	r3, [r3, #4]
 8019eec:	b29b      	uxth	r3, r3
 8019eee:	429a      	cmp	r2, r3
 8019ef0:	d906      	bls.n	8019f00 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 8019ef2:	4b45      	ldr	r3, [pc, #276]	; (801a008 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8019ef4:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 8019ef8:	4944      	ldr	r1, [pc, #272]	; (801a00c <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 8019efa:	4845      	ldr	r0, [pc, #276]	; (801a010 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8019efc:	f001 f9dc 	bl	801b2b8 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 8019f00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019f02:	68ba      	ldr	r2, [r7, #8]
 8019f04:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 8019f06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019f08:	88db      	ldrh	r3, [r3, #6]
 8019f0a:	b29a      	uxth	r2, r3
 8019f0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019f0e:	889b      	ldrh	r3, [r3, #4]
 8019f10:	b29b      	uxth	r3, r3
 8019f12:	429a      	cmp	r2, r3
 8019f14:	d010      	beq.n	8019f38 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 8019f16:	2300      	movs	r3, #0
 8019f18:	623b      	str	r3, [r7, #32]
 8019f1a:	e00d      	b.n	8019f38 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 8019f1c:	68fb      	ldr	r3, [r7, #12]
 8019f1e:	685b      	ldr	r3, [r3, #4]
 8019f20:	2b00      	cmp	r3, #0
 8019f22:	d006      	beq.n	8019f32 <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 8019f24:	4b38      	ldr	r3, [pc, #224]	; (801a008 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8019f26:	f44f 72df 	mov.w	r2, #446	; 0x1be
 8019f2a:	493a      	ldr	r1, [pc, #232]	; (801a014 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 8019f2c:	4838      	ldr	r0, [pc, #224]	; (801a010 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8019f2e:	f001 f9c3 	bl	801b2b8 <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 8019f32:	68fb      	ldr	r3, [r7, #12]
 8019f34:	68ba      	ldr	r2, [r7, #8]
 8019f36:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 8019f38:	687b      	ldr	r3, [r7, #4]
 8019f3a:	2b00      	cmp	r3, #0
 8019f3c:	d105      	bne.n	8019f4a <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 8019f3e:	68fb      	ldr	r3, [r7, #12]
 8019f40:	7f9b      	ldrb	r3, [r3, #30]
 8019f42:	f003 0301 	and.w	r3, r3, #1
 8019f46:	2b00      	cmp	r3, #0
 8019f48:	d059      	beq.n	8019ffe <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 8019f4a:	6a3b      	ldr	r3, [r7, #32]
 8019f4c:	2b00      	cmp	r3, #0
 8019f4e:	d04f      	beq.n	8019ff0 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 8019f50:	68fb      	ldr	r3, [r7, #12]
 8019f52:	685b      	ldr	r3, [r3, #4]
 8019f54:	2b00      	cmp	r3, #0
 8019f56:	d006      	beq.n	8019f66 <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 8019f58:	68fb      	ldr	r3, [r7, #12]
 8019f5a:	685b      	ldr	r3, [r3, #4]
 8019f5c:	685b      	ldr	r3, [r3, #4]
 8019f5e:	889b      	ldrh	r3, [r3, #4]
 8019f60:	b29b      	uxth	r3, r3
 8019f62:	2b00      	cmp	r3, #0
 8019f64:	d002      	beq.n	8019f6c <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 8019f66:	2300      	movs	r3, #0
 8019f68:	623b      	str	r3, [r7, #32]
 8019f6a:	e041      	b.n	8019ff0 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 8019f6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019f6e:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 8019f70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019f72:	681b      	ldr	r3, [r3, #0]
 8019f74:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 8019f76:	e012      	b.n	8019f9e <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 8019f78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019f7a:	685b      	ldr	r3, [r3, #4]
 8019f7c:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 8019f7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019f80:	88db      	ldrh	r3, [r3, #6]
 8019f82:	b29a      	uxth	r2, r3
 8019f84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019f86:	889b      	ldrh	r3, [r3, #4]
 8019f88:	b29b      	uxth	r3, r3
 8019f8a:	429a      	cmp	r2, r3
 8019f8c:	d002      	beq.n	8019f94 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 8019f8e:	2300      	movs	r3, #0
 8019f90:	623b      	str	r3, [r7, #32]
            break;
 8019f92:	e007      	b.n	8019fa4 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 8019f94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019f96:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 8019f98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019f9a:	681b      	ldr	r3, [r3, #0]
 8019f9c:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 8019f9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019fa0:	2b00      	cmp	r3, #0
 8019fa2:	d1e9      	bne.n	8019f78 <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 8019fa4:	6a3b      	ldr	r3, [r7, #32]
 8019fa6:	2b00      	cmp	r3, #0
 8019fa8:	d022      	beq.n	8019ff0 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 8019faa:	68fb      	ldr	r3, [r7, #12]
 8019fac:	685b      	ldr	r3, [r3, #4]
 8019fae:	2b00      	cmp	r3, #0
 8019fb0:	d106      	bne.n	8019fc0 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 8019fb2:	4b15      	ldr	r3, [pc, #84]	; (801a008 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8019fb4:	f240 12df 	movw	r2, #479	; 0x1df
 8019fb8:	4917      	ldr	r1, [pc, #92]	; (801a018 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8019fba:	4815      	ldr	r0, [pc, #84]	; (801a010 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8019fbc:	f001 f97c 	bl	801b2b8 <iprintf>
          LWIP_ASSERT("sanity check",
 8019fc0:	68fb      	ldr	r3, [r7, #12]
 8019fc2:	685b      	ldr	r3, [r3, #4]
 8019fc4:	685b      	ldr	r3, [r3, #4]
 8019fc6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8019fc8:	429a      	cmp	r2, r3
 8019fca:	d106      	bne.n	8019fda <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 8019fcc:	4b0e      	ldr	r3, [pc, #56]	; (801a008 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8019fce:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8019fd2:	4911      	ldr	r1, [pc, #68]	; (801a018 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8019fd4:	480e      	ldr	r0, [pc, #56]	; (801a010 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8019fd6:	f001 f96f 	bl	801b2b8 <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 8019fda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019fdc:	681b      	ldr	r3, [r3, #0]
 8019fde:	2b00      	cmp	r3, #0
 8019fe0:	d006      	beq.n	8019ff0 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 8019fe2:	4b09      	ldr	r3, [pc, #36]	; (801a008 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8019fe4:	f44f 72f1 	mov.w	r2, #482	; 0x1e2
 8019fe8:	490c      	ldr	r1, [pc, #48]	; (801a01c <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 8019fea:	4809      	ldr	r0, [pc, #36]	; (801a010 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8019fec:	f001 f964 	bl	801b2b8 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 8019ff0:	6a3b      	ldr	r3, [r7, #32]
 8019ff2:	2b00      	cmp	r3, #0
 8019ff4:	bf14      	ite	ne
 8019ff6:	2301      	movne	r3, #1
 8019ff8:	2300      	moveq	r3, #0
 8019ffa:	b2db      	uxtb	r3, r3
 8019ffc:	e000      	b.n	801a000 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 8019ffe:	2300      	movs	r3, #0
}
 801a000:	4618      	mov	r0, r3
 801a002:	3730      	adds	r7, #48	; 0x30
 801a004:	46bd      	mov	sp, r7
 801a006:	bd80      	pop	{r7, pc}
 801a008:	08020a28 	.word	0x08020a28
 801a00c:	08020b0c 	.word	0x08020b0c
 801a010:	08020a70 	.word	0x08020a70
 801a014:	08020b2c 	.word	0x08020b2c
 801a018:	08020b64 	.word	0x08020b64
 801a01c:	08020b74 	.word	0x08020b74

0801a020 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 801a020:	b580      	push	{r7, lr}
 801a022:	b08e      	sub	sp, #56	; 0x38
 801a024:	af00      	add	r7, sp, #0
 801a026:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 801a028:	687b      	ldr	r3, [r7, #4]
 801a02a:	685b      	ldr	r3, [r3, #4]
 801a02c:	62bb      	str	r3, [r7, #40]	; 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 801a02e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a030:	781b      	ldrb	r3, [r3, #0]
 801a032:	f003 030f 	and.w	r3, r3, #15
 801a036:	b2db      	uxtb	r3, r3
 801a038:	009b      	lsls	r3, r3, #2
 801a03a:	b2db      	uxtb	r3, r3
 801a03c:	2b14      	cmp	r3, #20
 801a03e:	f040 8171 	bne.w	801a324 <ip4_reass+0x304>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 801a042:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a044:	88db      	ldrh	r3, [r3, #6]
 801a046:	b29b      	uxth	r3, r3
 801a048:	4618      	mov	r0, r3
 801a04a:	f7f5 fe8f 	bl	800fd6c <lwip_htons>
 801a04e:	4603      	mov	r3, r0
 801a050:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801a054:	b29b      	uxth	r3, r3
 801a056:	00db      	lsls	r3, r3, #3
 801a058:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 801a05a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a05c:	885b      	ldrh	r3, [r3, #2]
 801a05e:	b29b      	uxth	r3, r3
 801a060:	4618      	mov	r0, r3
 801a062:	f7f5 fe83 	bl	800fd6c <lwip_htons>
 801a066:	4603      	mov	r3, r0
 801a068:	84bb      	strh	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 801a06a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a06c:	781b      	ldrb	r3, [r3, #0]
 801a06e:	f003 030f 	and.w	r3, r3, #15
 801a072:	b2db      	uxtb	r3, r3
 801a074:	009b      	lsls	r3, r3, #2
 801a076:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (hlen > len) {
 801a07a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 801a07e:	b29b      	uxth	r3, r3
 801a080:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801a082:	429a      	cmp	r2, r3
 801a084:	f0c0 8150 	bcc.w	801a328 <ip4_reass+0x308>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 801a088:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 801a08c:	b29b      	uxth	r3, r3
 801a08e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801a090:	1ad3      	subs	r3, r2, r3
 801a092:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 801a094:	6878      	ldr	r0, [r7, #4]
 801a096:	f7f7 faf5 	bl	8011684 <pbuf_clen>
 801a09a:	4603      	mov	r3, r0
 801a09c:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 801a09e:	4b8c      	ldr	r3, [pc, #560]	; (801a2d0 <ip4_reass+0x2b0>)
 801a0a0:	881b      	ldrh	r3, [r3, #0]
 801a0a2:	461a      	mov	r2, r3
 801a0a4:	8c3b      	ldrh	r3, [r7, #32]
 801a0a6:	4413      	add	r3, r2
 801a0a8:	2b0a      	cmp	r3, #10
 801a0aa:	dd10      	ble.n	801a0ce <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 801a0ac:	8c3b      	ldrh	r3, [r7, #32]
 801a0ae:	4619      	mov	r1, r3
 801a0b0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801a0b2:	f7ff fd81 	bl	8019bb8 <ip_reass_remove_oldest_datagram>
 801a0b6:	4603      	mov	r3, r0
 801a0b8:	2b00      	cmp	r3, #0
 801a0ba:	f000 8137 	beq.w	801a32c <ip4_reass+0x30c>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 801a0be:	4b84      	ldr	r3, [pc, #528]	; (801a2d0 <ip4_reass+0x2b0>)
 801a0c0:	881b      	ldrh	r3, [r3, #0]
 801a0c2:	461a      	mov	r2, r3
 801a0c4:	8c3b      	ldrh	r3, [r7, #32]
 801a0c6:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 801a0c8:	2b0a      	cmp	r3, #10
 801a0ca:	f300 812f 	bgt.w	801a32c <ip4_reass+0x30c>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 801a0ce:	4b81      	ldr	r3, [pc, #516]	; (801a2d4 <ip4_reass+0x2b4>)
 801a0d0:	681b      	ldr	r3, [r3, #0]
 801a0d2:	633b      	str	r3, [r7, #48]	; 0x30
 801a0d4:	e015      	b.n	801a102 <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 801a0d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a0d8:	695a      	ldr	r2, [r3, #20]
 801a0da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a0dc:	68db      	ldr	r3, [r3, #12]
 801a0de:	429a      	cmp	r2, r3
 801a0e0:	d10c      	bne.n	801a0fc <ip4_reass+0xdc>
 801a0e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a0e4:	699a      	ldr	r2, [r3, #24]
 801a0e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a0e8:	691b      	ldr	r3, [r3, #16]
 801a0ea:	429a      	cmp	r2, r3
 801a0ec:	d106      	bne.n	801a0fc <ip4_reass+0xdc>
 801a0ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a0f0:	899a      	ldrh	r2, [r3, #12]
 801a0f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a0f4:	889b      	ldrh	r3, [r3, #4]
 801a0f6:	b29b      	uxth	r3, r3
 801a0f8:	429a      	cmp	r2, r3
 801a0fa:	d006      	beq.n	801a10a <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 801a0fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a0fe:	681b      	ldr	r3, [r3, #0]
 801a100:	633b      	str	r3, [r7, #48]	; 0x30
 801a102:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a104:	2b00      	cmp	r3, #0
 801a106:	d1e6      	bne.n	801a0d6 <ip4_reass+0xb6>
 801a108:	e000      	b.n	801a10c <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 801a10a:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 801a10c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a10e:	2b00      	cmp	r3, #0
 801a110:	d109      	bne.n	801a126 <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 801a112:	8c3b      	ldrh	r3, [r7, #32]
 801a114:	4619      	mov	r1, r3
 801a116:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801a118:	f7ff fdb0 	bl	8019c7c <ip_reass_enqueue_new_datagram>
 801a11c:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 801a11e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a120:	2b00      	cmp	r3, #0
 801a122:	d11c      	bne.n	801a15e <ip4_reass+0x13e>
      goto nullreturn;
 801a124:	e105      	b.n	801a332 <ip4_reass+0x312>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 801a126:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a128:	88db      	ldrh	r3, [r3, #6]
 801a12a:	b29b      	uxth	r3, r3
 801a12c:	4618      	mov	r0, r3
 801a12e:	f7f5 fe1d 	bl	800fd6c <lwip_htons>
 801a132:	4603      	mov	r3, r0
 801a134:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801a138:	2b00      	cmp	r3, #0
 801a13a:	d110      	bne.n	801a15e <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 801a13c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a13e:	89db      	ldrh	r3, [r3, #14]
 801a140:	4618      	mov	r0, r3
 801a142:	f7f5 fe13 	bl	800fd6c <lwip_htons>
 801a146:	4603      	mov	r3, r0
 801a148:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 801a14c:	2b00      	cmp	r3, #0
 801a14e:	d006      	beq.n	801a15e <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 801a150:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a152:	3308      	adds	r3, #8
 801a154:	2214      	movs	r2, #20
 801a156:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 801a158:	4618      	mov	r0, r3
 801a15a:	f001 fac8 	bl	801b6ee <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 801a15e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a160:	88db      	ldrh	r3, [r3, #6]
 801a162:	b29b      	uxth	r3, r3
 801a164:	f003 0320 	and.w	r3, r3, #32
 801a168:	2b00      	cmp	r3, #0
 801a16a:	bf0c      	ite	eq
 801a16c:	2301      	moveq	r3, #1
 801a16e:	2300      	movne	r3, #0
 801a170:	b2db      	uxtb	r3, r3
 801a172:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 801a174:	69fb      	ldr	r3, [r7, #28]
 801a176:	2b00      	cmp	r3, #0
 801a178:	d00e      	beq.n	801a198 <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 801a17a:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 801a17c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801a17e:	4413      	add	r3, r2
 801a180:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 801a182:	8b7a      	ldrh	r2, [r7, #26]
 801a184:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 801a186:	429a      	cmp	r2, r3
 801a188:	f0c0 80a0 	bcc.w	801a2cc <ip4_reass+0x2ac>
 801a18c:	8b7b      	ldrh	r3, [r7, #26]
 801a18e:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 801a192:	4293      	cmp	r3, r2
 801a194:	f200 809a 	bhi.w	801a2cc <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 801a198:	69fa      	ldr	r2, [r7, #28]
 801a19a:	6879      	ldr	r1, [r7, #4]
 801a19c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801a19e:	f7ff fdd5 	bl	8019d4c <ip_reass_chain_frag_into_datagram_and_validate>
 801a1a2:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 801a1a4:	697b      	ldr	r3, [r7, #20]
 801a1a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 801a1aa:	f000 809b 	beq.w	801a2e4 <ip4_reass+0x2c4>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 801a1ae:	4b48      	ldr	r3, [pc, #288]	; (801a2d0 <ip4_reass+0x2b0>)
 801a1b0:	881a      	ldrh	r2, [r3, #0]
 801a1b2:	8c3b      	ldrh	r3, [r7, #32]
 801a1b4:	4413      	add	r3, r2
 801a1b6:	b29a      	uxth	r2, r3
 801a1b8:	4b45      	ldr	r3, [pc, #276]	; (801a2d0 <ip4_reass+0x2b0>)
 801a1ba:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 801a1bc:	69fb      	ldr	r3, [r7, #28]
 801a1be:	2b00      	cmp	r3, #0
 801a1c0:	d00d      	beq.n	801a1de <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 801a1c2:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 801a1c4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801a1c6:	4413      	add	r3, r2
 801a1c8:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 801a1ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a1cc:	8a7a      	ldrh	r2, [r7, #18]
 801a1ce:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 801a1d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a1d2:	7f9b      	ldrb	r3, [r3, #30]
 801a1d4:	f043 0301 	orr.w	r3, r3, #1
 801a1d8:	b2da      	uxtb	r2, r3
 801a1da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a1dc:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 801a1de:	697b      	ldr	r3, [r7, #20]
 801a1e0:	2b01      	cmp	r3, #1
 801a1e2:	d171      	bne.n	801a2c8 <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 801a1e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a1e6:	8b9b      	ldrh	r3, [r3, #28]
 801a1e8:	3314      	adds	r3, #20
 801a1ea:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 801a1ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a1ee:	685b      	ldr	r3, [r3, #4]
 801a1f0:	685b      	ldr	r3, [r3, #4]
 801a1f2:	681b      	ldr	r3, [r3, #0]
 801a1f4:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 801a1f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a1f8:	685b      	ldr	r3, [r3, #4]
 801a1fa:	685b      	ldr	r3, [r3, #4]
 801a1fc:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 801a1fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a200:	3308      	adds	r3, #8
 801a202:	2214      	movs	r2, #20
 801a204:	4619      	mov	r1, r3
 801a206:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801a208:	f001 fa71 	bl	801b6ee <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 801a20c:	8a3b      	ldrh	r3, [r7, #16]
 801a20e:	4618      	mov	r0, r3
 801a210:	f7f5 fdac 	bl	800fd6c <lwip_htons>
 801a214:	4603      	mov	r3, r0
 801a216:	461a      	mov	r2, r3
 801a218:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a21a:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 801a21c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a21e:	2200      	movs	r2, #0
 801a220:	719a      	strb	r2, [r3, #6]
 801a222:	2200      	movs	r2, #0
 801a224:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 801a226:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a228:	2200      	movs	r2, #0
 801a22a:	729a      	strb	r2, [r3, #10]
 801a22c:	2200      	movs	r2, #0
 801a22e:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 801a230:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a232:	685b      	ldr	r3, [r3, #4]
 801a234:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 801a236:	e00d      	b.n	801a254 <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 801a238:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801a23a:	685b      	ldr	r3, [r3, #4]
 801a23c:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 801a23e:	2114      	movs	r1, #20
 801a240:	6b78      	ldr	r0, [r7, #52]	; 0x34
 801a242:	f7f7 f911 	bl	8011468 <pbuf_remove_header>
      pbuf_cat(p, r);
 801a246:	6b79      	ldr	r1, [r7, #52]	; 0x34
 801a248:	6878      	ldr	r0, [r7, #4]
 801a24a:	f7f7 fa55 	bl	80116f8 <pbuf_cat>
      r = iprh->next_pbuf;
 801a24e:	68fb      	ldr	r3, [r7, #12]
 801a250:	681b      	ldr	r3, [r3, #0]
 801a252:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 801a254:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801a256:	2b00      	cmp	r3, #0
 801a258:	d1ee      	bne.n	801a238 <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 801a25a:	4b1e      	ldr	r3, [pc, #120]	; (801a2d4 <ip4_reass+0x2b4>)
 801a25c:	681b      	ldr	r3, [r3, #0]
 801a25e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801a260:	429a      	cmp	r2, r3
 801a262:	d102      	bne.n	801a26a <ip4_reass+0x24a>
      ipr_prev = NULL;
 801a264:	2300      	movs	r3, #0
 801a266:	62fb      	str	r3, [r7, #44]	; 0x2c
 801a268:	e010      	b.n	801a28c <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 801a26a:	4b1a      	ldr	r3, [pc, #104]	; (801a2d4 <ip4_reass+0x2b4>)
 801a26c:	681b      	ldr	r3, [r3, #0]
 801a26e:	62fb      	str	r3, [r7, #44]	; 0x2c
 801a270:	e007      	b.n	801a282 <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 801a272:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a274:	681b      	ldr	r3, [r3, #0]
 801a276:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801a278:	429a      	cmp	r2, r3
 801a27a:	d006      	beq.n	801a28a <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 801a27c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a27e:	681b      	ldr	r3, [r3, #0]
 801a280:	62fb      	str	r3, [r7, #44]	; 0x2c
 801a282:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a284:	2b00      	cmp	r3, #0
 801a286:	d1f4      	bne.n	801a272 <ip4_reass+0x252>
 801a288:	e000      	b.n	801a28c <ip4_reass+0x26c>
          break;
 801a28a:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 801a28c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801a28e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801a290:	f7ff fd2e 	bl	8019cf0 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 801a294:	6878      	ldr	r0, [r7, #4]
 801a296:	f7f7 f9f5 	bl	8011684 <pbuf_clen>
 801a29a:	4603      	mov	r3, r0
 801a29c:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 801a29e:	4b0c      	ldr	r3, [pc, #48]	; (801a2d0 <ip4_reass+0x2b0>)
 801a2a0:	881b      	ldrh	r3, [r3, #0]
 801a2a2:	8c3a      	ldrh	r2, [r7, #32]
 801a2a4:	429a      	cmp	r2, r3
 801a2a6:	d906      	bls.n	801a2b6 <ip4_reass+0x296>
 801a2a8:	4b0b      	ldr	r3, [pc, #44]	; (801a2d8 <ip4_reass+0x2b8>)
 801a2aa:	f240 229b 	movw	r2, #667	; 0x29b
 801a2ae:	490b      	ldr	r1, [pc, #44]	; (801a2dc <ip4_reass+0x2bc>)
 801a2b0:	480b      	ldr	r0, [pc, #44]	; (801a2e0 <ip4_reass+0x2c0>)
 801a2b2:	f001 f801 	bl	801b2b8 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 801a2b6:	4b06      	ldr	r3, [pc, #24]	; (801a2d0 <ip4_reass+0x2b0>)
 801a2b8:	881a      	ldrh	r2, [r3, #0]
 801a2ba:	8c3b      	ldrh	r3, [r7, #32]
 801a2bc:	1ad3      	subs	r3, r2, r3
 801a2be:	b29a      	uxth	r2, r3
 801a2c0:	4b03      	ldr	r3, [pc, #12]	; (801a2d0 <ip4_reass+0x2b0>)
 801a2c2:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 801a2c4:	687b      	ldr	r3, [r7, #4]
 801a2c6:	e038      	b.n	801a33a <ip4_reass+0x31a>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 801a2c8:	2300      	movs	r3, #0
 801a2ca:	e036      	b.n	801a33a <ip4_reass+0x31a>
      goto nullreturn_ipr;
 801a2cc:	bf00      	nop
 801a2ce:	e00a      	b.n	801a2e6 <ip4_reass+0x2c6>
 801a2d0:	20007314 	.word	0x20007314
 801a2d4:	20007310 	.word	0x20007310
 801a2d8:	08020a28 	.word	0x08020a28
 801a2dc:	08020b98 	.word	0x08020b98
 801a2e0:	08020a70 	.word	0x08020a70
    goto nullreturn_ipr;
 801a2e4:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 801a2e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a2e8:	2b00      	cmp	r3, #0
 801a2ea:	d106      	bne.n	801a2fa <ip4_reass+0x2da>
 801a2ec:	4b15      	ldr	r3, [pc, #84]	; (801a344 <ip4_reass+0x324>)
 801a2ee:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 801a2f2:	4915      	ldr	r1, [pc, #84]	; (801a348 <ip4_reass+0x328>)
 801a2f4:	4815      	ldr	r0, [pc, #84]	; (801a34c <ip4_reass+0x32c>)
 801a2f6:	f000 ffdf 	bl	801b2b8 <iprintf>
  if (ipr->p == NULL) {
 801a2fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a2fc:	685b      	ldr	r3, [r3, #4]
 801a2fe:	2b00      	cmp	r3, #0
 801a300:	d116      	bne.n	801a330 <ip4_reass+0x310>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 801a302:	4b13      	ldr	r3, [pc, #76]	; (801a350 <ip4_reass+0x330>)
 801a304:	681b      	ldr	r3, [r3, #0]
 801a306:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801a308:	429a      	cmp	r2, r3
 801a30a:	d006      	beq.n	801a31a <ip4_reass+0x2fa>
 801a30c:	4b0d      	ldr	r3, [pc, #52]	; (801a344 <ip4_reass+0x324>)
 801a30e:	f240 22ab 	movw	r2, #683	; 0x2ab
 801a312:	4910      	ldr	r1, [pc, #64]	; (801a354 <ip4_reass+0x334>)
 801a314:	480d      	ldr	r0, [pc, #52]	; (801a34c <ip4_reass+0x32c>)
 801a316:	f000 ffcf 	bl	801b2b8 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 801a31a:	2100      	movs	r1, #0
 801a31c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801a31e:	f7ff fce7 	bl	8019cf0 <ip_reass_dequeue_datagram>
 801a322:	e006      	b.n	801a332 <ip4_reass+0x312>
    goto nullreturn;
 801a324:	bf00      	nop
 801a326:	e004      	b.n	801a332 <ip4_reass+0x312>
    goto nullreturn;
 801a328:	bf00      	nop
 801a32a:	e002      	b.n	801a332 <ip4_reass+0x312>
      goto nullreturn;
 801a32c:	bf00      	nop
 801a32e:	e000      	b.n	801a332 <ip4_reass+0x312>
  }

nullreturn:
 801a330:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 801a332:	6878      	ldr	r0, [r7, #4]
 801a334:	f7f7 f91e 	bl	8011574 <pbuf_free>
  return NULL;
 801a338:	2300      	movs	r3, #0
}
 801a33a:	4618      	mov	r0, r3
 801a33c:	3738      	adds	r7, #56	; 0x38
 801a33e:	46bd      	mov	sp, r7
 801a340:	bd80      	pop	{r7, pc}
 801a342:	bf00      	nop
 801a344:	08020a28 	.word	0x08020a28
 801a348:	08020bb4 	.word	0x08020bb4
 801a34c:	08020a70 	.word	0x08020a70
 801a350:	20007310 	.word	0x20007310
 801a354:	08020bc0 	.word	0x08020bc0

0801a358 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 801a358:	b580      	push	{r7, lr}
 801a35a:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 801a35c:	2005      	movs	r0, #5
 801a35e:	f7f6 fa23 	bl	80107a8 <memp_malloc>
 801a362:	4603      	mov	r3, r0
}
 801a364:	4618      	mov	r0, r3
 801a366:	bd80      	pop	{r7, pc}

0801a368 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 801a368:	b580      	push	{r7, lr}
 801a36a:	b082      	sub	sp, #8
 801a36c:	af00      	add	r7, sp, #0
 801a36e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 801a370:	687b      	ldr	r3, [r7, #4]
 801a372:	2b00      	cmp	r3, #0
 801a374:	d106      	bne.n	801a384 <ip_frag_free_pbuf_custom_ref+0x1c>
 801a376:	4b07      	ldr	r3, [pc, #28]	; (801a394 <ip_frag_free_pbuf_custom_ref+0x2c>)
 801a378:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 801a37c:	4906      	ldr	r1, [pc, #24]	; (801a398 <ip_frag_free_pbuf_custom_ref+0x30>)
 801a37e:	4807      	ldr	r0, [pc, #28]	; (801a39c <ip_frag_free_pbuf_custom_ref+0x34>)
 801a380:	f000 ff9a 	bl	801b2b8 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 801a384:	6879      	ldr	r1, [r7, #4]
 801a386:	2005      	movs	r0, #5
 801a388:	f7f6 fa7e 	bl	8010888 <memp_free>
}
 801a38c:	bf00      	nop
 801a38e:	3708      	adds	r7, #8
 801a390:	46bd      	mov	sp, r7
 801a392:	bd80      	pop	{r7, pc}
 801a394:	08020a28 	.word	0x08020a28
 801a398:	08020be0 	.word	0x08020be0
 801a39c:	08020a70 	.word	0x08020a70

0801a3a0 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 801a3a0:	b580      	push	{r7, lr}
 801a3a2:	b084      	sub	sp, #16
 801a3a4:	af00      	add	r7, sp, #0
 801a3a6:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 801a3a8:	687b      	ldr	r3, [r7, #4]
 801a3aa:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 801a3ac:	68fb      	ldr	r3, [r7, #12]
 801a3ae:	2b00      	cmp	r3, #0
 801a3b0:	d106      	bne.n	801a3c0 <ipfrag_free_pbuf_custom+0x20>
 801a3b2:	4b11      	ldr	r3, [pc, #68]	; (801a3f8 <ipfrag_free_pbuf_custom+0x58>)
 801a3b4:	f240 22ce 	movw	r2, #718	; 0x2ce
 801a3b8:	4910      	ldr	r1, [pc, #64]	; (801a3fc <ipfrag_free_pbuf_custom+0x5c>)
 801a3ba:	4811      	ldr	r0, [pc, #68]	; (801a400 <ipfrag_free_pbuf_custom+0x60>)
 801a3bc:	f000 ff7c 	bl	801b2b8 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 801a3c0:	68fa      	ldr	r2, [r7, #12]
 801a3c2:	687b      	ldr	r3, [r7, #4]
 801a3c4:	429a      	cmp	r2, r3
 801a3c6:	d006      	beq.n	801a3d6 <ipfrag_free_pbuf_custom+0x36>
 801a3c8:	4b0b      	ldr	r3, [pc, #44]	; (801a3f8 <ipfrag_free_pbuf_custom+0x58>)
 801a3ca:	f240 22cf 	movw	r2, #719	; 0x2cf
 801a3ce:	490d      	ldr	r1, [pc, #52]	; (801a404 <ipfrag_free_pbuf_custom+0x64>)
 801a3d0:	480b      	ldr	r0, [pc, #44]	; (801a400 <ipfrag_free_pbuf_custom+0x60>)
 801a3d2:	f000 ff71 	bl	801b2b8 <iprintf>
  if (pcr->original != NULL) {
 801a3d6:	68fb      	ldr	r3, [r7, #12]
 801a3d8:	695b      	ldr	r3, [r3, #20]
 801a3da:	2b00      	cmp	r3, #0
 801a3dc:	d004      	beq.n	801a3e8 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 801a3de:	68fb      	ldr	r3, [r7, #12]
 801a3e0:	695b      	ldr	r3, [r3, #20]
 801a3e2:	4618      	mov	r0, r3
 801a3e4:	f7f7 f8c6 	bl	8011574 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 801a3e8:	68f8      	ldr	r0, [r7, #12]
 801a3ea:	f7ff ffbd 	bl	801a368 <ip_frag_free_pbuf_custom_ref>
}
 801a3ee:	bf00      	nop
 801a3f0:	3710      	adds	r7, #16
 801a3f2:	46bd      	mov	sp, r7
 801a3f4:	bd80      	pop	{r7, pc}
 801a3f6:	bf00      	nop
 801a3f8:	08020a28 	.word	0x08020a28
 801a3fc:	08020bec 	.word	0x08020bec
 801a400:	08020a70 	.word	0x08020a70
 801a404:	08020bf8 	.word	0x08020bf8

0801a408 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 801a408:	b580      	push	{r7, lr}
 801a40a:	b094      	sub	sp, #80	; 0x50
 801a40c:	af02      	add	r7, sp, #8
 801a40e:	60f8      	str	r0, [r7, #12]
 801a410:	60b9      	str	r1, [r7, #8]
 801a412:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 801a414:	2300      	movs	r3, #0
 801a416:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 801a41a:	68bb      	ldr	r3, [r7, #8]
 801a41c:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 801a41e:	3b14      	subs	r3, #20
 801a420:	2b00      	cmp	r3, #0
 801a422:	da00      	bge.n	801a426 <ip4_frag+0x1e>
 801a424:	3307      	adds	r3, #7
 801a426:	10db      	asrs	r3, r3, #3
 801a428:	877b      	strh	r3, [r7, #58]	; 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 801a42a:	2314      	movs	r3, #20
 801a42c:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 801a42e:	68fb      	ldr	r3, [r7, #12]
 801a430:	685b      	ldr	r3, [r3, #4]
 801a432:	637b      	str	r3, [r7, #52]	; 0x34
  iphdr = original_iphdr;
 801a434:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801a436:	633b      	str	r3, [r7, #48]	; 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 801a438:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a43a:	781b      	ldrb	r3, [r3, #0]
 801a43c:	f003 030f 	and.w	r3, r3, #15
 801a440:	b2db      	uxtb	r3, r3
 801a442:	009b      	lsls	r3, r3, #2
 801a444:	b2db      	uxtb	r3, r3
 801a446:	2b14      	cmp	r3, #20
 801a448:	d002      	beq.n	801a450 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 801a44a:	f06f 0305 	mvn.w	r3, #5
 801a44e:	e110      	b.n	801a672 <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 801a450:	68fb      	ldr	r3, [r7, #12]
 801a452:	895b      	ldrh	r3, [r3, #10]
 801a454:	2b13      	cmp	r3, #19
 801a456:	d809      	bhi.n	801a46c <ip4_frag+0x64>
 801a458:	4b88      	ldr	r3, [pc, #544]	; (801a67c <ip4_frag+0x274>)
 801a45a:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 801a45e:	4988      	ldr	r1, [pc, #544]	; (801a680 <ip4_frag+0x278>)
 801a460:	4888      	ldr	r0, [pc, #544]	; (801a684 <ip4_frag+0x27c>)
 801a462:	f000 ff29 	bl	801b2b8 <iprintf>
 801a466:	f06f 0305 	mvn.w	r3, #5
 801a46a:	e102      	b.n	801a672 <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 801a46c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a46e:	88db      	ldrh	r3, [r3, #6]
 801a470:	b29b      	uxth	r3, r3
 801a472:	4618      	mov	r0, r3
 801a474:	f7f5 fc7a 	bl	800fd6c <lwip_htons>
 801a478:	4603      	mov	r3, r0
 801a47a:	87bb      	strh	r3, [r7, #60]	; 0x3c
  ofo = tmp & IP_OFFMASK;
 801a47c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801a47e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801a482:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 801a486:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801a488:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 801a48c:	62fb      	str	r3, [r7, #44]	; 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 801a48e:	68fb      	ldr	r3, [r7, #12]
 801a490:	891b      	ldrh	r3, [r3, #8]
 801a492:	3b14      	subs	r3, #20
 801a494:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

  while (left) {
 801a498:	e0e1      	b.n	801a65e <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 801a49a:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801a49c:	00db      	lsls	r3, r3, #3
 801a49e:	b29b      	uxth	r3, r3
 801a4a0:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801a4a4:	4293      	cmp	r3, r2
 801a4a6:	bf28      	it	cs
 801a4a8:	4613      	movcs	r3, r2
 801a4aa:	857b      	strh	r3, [r7, #42]	; 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 801a4ac:	f44f 7220 	mov.w	r2, #640	; 0x280
 801a4b0:	2114      	movs	r1, #20
 801a4b2:	200e      	movs	r0, #14
 801a4b4:	f7f6 fd7a 	bl	8010fac <pbuf_alloc>
 801a4b8:	6278      	str	r0, [r7, #36]	; 0x24
    if (rambuf == NULL) {
 801a4ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a4bc:	2b00      	cmp	r3, #0
 801a4be:	f000 80d5 	beq.w	801a66c <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 801a4c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a4c4:	895b      	ldrh	r3, [r3, #10]
 801a4c6:	2b13      	cmp	r3, #19
 801a4c8:	d806      	bhi.n	801a4d8 <ip4_frag+0xd0>
 801a4ca:	4b6c      	ldr	r3, [pc, #432]	; (801a67c <ip4_frag+0x274>)
 801a4cc:	f44f 7249 	mov.w	r2, #804	; 0x324
 801a4d0:	496d      	ldr	r1, [pc, #436]	; (801a688 <ip4_frag+0x280>)
 801a4d2:	486c      	ldr	r0, [pc, #432]	; (801a684 <ip4_frag+0x27c>)
 801a4d4:	f000 fef0 	bl	801b2b8 <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 801a4d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a4da:	685b      	ldr	r3, [r3, #4]
 801a4dc:	2214      	movs	r2, #20
 801a4de:	6b79      	ldr	r1, [r7, #52]	; 0x34
 801a4e0:	4618      	mov	r0, r3
 801a4e2:	f001 f904 	bl	801b6ee <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 801a4e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a4e8:	685b      	ldr	r3, [r3, #4]
 801a4ea:	633b      	str	r3, [r7, #48]	; 0x30

    left_to_copy = fragsize;
 801a4ec:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 801a4ee:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    while (left_to_copy) {
 801a4f2:	e064      	b.n	801a5be <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 801a4f4:	68fb      	ldr	r3, [r7, #12]
 801a4f6:	895a      	ldrh	r2, [r3, #10]
 801a4f8:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801a4fa:	1ad3      	subs	r3, r2, r3
 801a4fc:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 801a4fe:	68fb      	ldr	r3, [r7, #12]
 801a500:	895b      	ldrh	r3, [r3, #10]
 801a502:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 801a504:	429a      	cmp	r2, r3
 801a506:	d906      	bls.n	801a516 <ip4_frag+0x10e>
 801a508:	4b5c      	ldr	r3, [pc, #368]	; (801a67c <ip4_frag+0x274>)
 801a50a:	f240 322d 	movw	r2, #813	; 0x32d
 801a50e:	495f      	ldr	r1, [pc, #380]	; (801a68c <ip4_frag+0x284>)
 801a510:	485c      	ldr	r0, [pc, #368]	; (801a684 <ip4_frag+0x27c>)
 801a512:	f000 fed1 	bl	801b2b8 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 801a516:	8bfa      	ldrh	r2, [r7, #30]
 801a518:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 801a51c:	4293      	cmp	r3, r2
 801a51e:	bf28      	it	cs
 801a520:	4613      	movcs	r3, r2
 801a522:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 801a526:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 801a52a:	2b00      	cmp	r3, #0
 801a52c:	d105      	bne.n	801a53a <ip4_frag+0x132>
        poff = 0;
 801a52e:	2300      	movs	r3, #0
 801a530:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 801a532:	68fb      	ldr	r3, [r7, #12]
 801a534:	681b      	ldr	r3, [r3, #0]
 801a536:	60fb      	str	r3, [r7, #12]
        continue;
 801a538:	e041      	b.n	801a5be <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 801a53a:	f7ff ff0d 	bl	801a358 <ip_frag_alloc_pbuf_custom_ref>
 801a53e:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 801a540:	69bb      	ldr	r3, [r7, #24]
 801a542:	2b00      	cmp	r3, #0
 801a544:	d103      	bne.n	801a54e <ip4_frag+0x146>
        pbuf_free(rambuf);
 801a546:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801a548:	f7f7 f814 	bl	8011574 <pbuf_free>
        goto memerr;
 801a54c:	e08f      	b.n	801a66e <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 801a54e:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 801a550:	68fb      	ldr	r3, [r7, #12]
 801a552:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 801a554:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801a556:	4413      	add	r3, r2
 801a558:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 801a55c:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 801a560:	9201      	str	r2, [sp, #4]
 801a562:	9300      	str	r3, [sp, #0]
 801a564:	4603      	mov	r3, r0
 801a566:	2241      	movs	r2, #65	; 0x41
 801a568:	2000      	movs	r0, #0
 801a56a:	f7f6 fe4b 	bl	8011204 <pbuf_alloced_custom>
 801a56e:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 801a570:	697b      	ldr	r3, [r7, #20]
 801a572:	2b00      	cmp	r3, #0
 801a574:	d106      	bne.n	801a584 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 801a576:	69b8      	ldr	r0, [r7, #24]
 801a578:	f7ff fef6 	bl	801a368 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 801a57c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801a57e:	f7f6 fff9 	bl	8011574 <pbuf_free>
        goto memerr;
 801a582:	e074      	b.n	801a66e <ip4_frag+0x266>
      }
      pbuf_ref(p);
 801a584:	68f8      	ldr	r0, [r7, #12]
 801a586:	f7f7 f895 	bl	80116b4 <pbuf_ref>
      pcr->original = p;
 801a58a:	69bb      	ldr	r3, [r7, #24]
 801a58c:	68fa      	ldr	r2, [r7, #12]
 801a58e:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 801a590:	69bb      	ldr	r3, [r7, #24]
 801a592:	4a3f      	ldr	r2, [pc, #252]	; (801a690 <ip4_frag+0x288>)
 801a594:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 801a596:	6979      	ldr	r1, [r7, #20]
 801a598:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801a59a:	f7f7 f8ad 	bl	80116f8 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 801a59e:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 801a5a2:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 801a5a6:	1ad3      	subs	r3, r2, r3
 801a5a8:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
      if (left_to_copy) {
 801a5ac:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 801a5b0:	2b00      	cmp	r3, #0
 801a5b2:	d004      	beq.n	801a5be <ip4_frag+0x1b6>
        poff = 0;
 801a5b4:	2300      	movs	r3, #0
 801a5b6:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 801a5b8:	68fb      	ldr	r3, [r7, #12]
 801a5ba:	681b      	ldr	r3, [r3, #0]
 801a5bc:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 801a5be:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 801a5c2:	2b00      	cmp	r3, #0
 801a5c4:	d196      	bne.n	801a4f4 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 801a5c6:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 801a5c8:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 801a5cc:	4413      	add	r3, r2
 801a5ce:	87fb      	strh	r3, [r7, #62]	; 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 801a5d0:	68bb      	ldr	r3, [r7, #8]
 801a5d2:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 801a5d4:	f1a3 0213 	sub.w	r2, r3, #19
 801a5d8:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801a5dc:	429a      	cmp	r2, r3
 801a5de:	bfcc      	ite	gt
 801a5e0:	2301      	movgt	r3, #1
 801a5e2:	2300      	movle	r3, #0
 801a5e4:	b2db      	uxtb	r3, r3
 801a5e6:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 801a5e8:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 801a5ec:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801a5f0:	87bb      	strh	r3, [r7, #60]	; 0x3c
    if (!last || mf_set) {
 801a5f2:	6a3b      	ldr	r3, [r7, #32]
 801a5f4:	2b00      	cmp	r3, #0
 801a5f6:	d002      	beq.n	801a5fe <ip4_frag+0x1f6>
 801a5f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a5fa:	2b00      	cmp	r3, #0
 801a5fc:	d003      	beq.n	801a606 <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 801a5fe:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801a600:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 801a604:	87bb      	strh	r3, [r7, #60]	; 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 801a606:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801a608:	4618      	mov	r0, r3
 801a60a:	f7f5 fbaf 	bl	800fd6c <lwip_htons>
 801a60e:	4603      	mov	r3, r0
 801a610:	461a      	mov	r2, r3
 801a612:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a614:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 801a616:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 801a618:	3314      	adds	r3, #20
 801a61a:	b29b      	uxth	r3, r3
 801a61c:	4618      	mov	r0, r3
 801a61e:	f7f5 fba5 	bl	800fd6c <lwip_htons>
 801a622:	4603      	mov	r3, r0
 801a624:	461a      	mov	r2, r3
 801a626:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a628:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 801a62a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801a62c:	2200      	movs	r2, #0
 801a62e:	729a      	strb	r2, [r3, #10]
 801a630:	2200      	movs	r2, #0
 801a632:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 801a634:	68bb      	ldr	r3, [r7, #8]
 801a636:	695b      	ldr	r3, [r3, #20]
 801a638:	687a      	ldr	r2, [r7, #4]
 801a63a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801a63c:	68b8      	ldr	r0, [r7, #8]
 801a63e:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 801a640:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801a642:	f7f6 ff97 	bl	8011574 <pbuf_free>
    left = (u16_t)(left - fragsize);
 801a646:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801a64a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 801a64c:	1ad3      	subs	r3, r2, r3
 801a64e:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    ofo = (u16_t)(ofo + nfb);
 801a652:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 801a656:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801a658:	4413      	add	r3, r2
 801a65a:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  while (left) {
 801a65e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801a662:	2b00      	cmp	r3, #0
 801a664:	f47f af19 	bne.w	801a49a <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 801a668:	2300      	movs	r3, #0
 801a66a:	e002      	b.n	801a672 <ip4_frag+0x26a>
      goto memerr;
 801a66c:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 801a66e:	f04f 33ff 	mov.w	r3, #4294967295
}
 801a672:	4618      	mov	r0, r3
 801a674:	3748      	adds	r7, #72	; 0x48
 801a676:	46bd      	mov	sp, r7
 801a678:	bd80      	pop	{r7, pc}
 801a67a:	bf00      	nop
 801a67c:	08020a28 	.word	0x08020a28
 801a680:	08020c04 	.word	0x08020c04
 801a684:	08020a70 	.word	0x08020a70
 801a688:	08020c20 	.word	0x08020c20
 801a68c:	08020c40 	.word	0x08020c40
 801a690:	0801a3a1 	.word	0x0801a3a1

0801a694 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 801a694:	b580      	push	{r7, lr}
 801a696:	b086      	sub	sp, #24
 801a698:	af00      	add	r7, sp, #0
 801a69a:	6078      	str	r0, [r7, #4]
 801a69c:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 801a69e:	230e      	movs	r3, #14
 801a6a0:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 801a6a2:	687b      	ldr	r3, [r7, #4]
 801a6a4:	895b      	ldrh	r3, [r3, #10]
 801a6a6:	2b0e      	cmp	r3, #14
 801a6a8:	d96e      	bls.n	801a788 <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 801a6aa:	687b      	ldr	r3, [r7, #4]
 801a6ac:	7bdb      	ldrb	r3, [r3, #15]
 801a6ae:	2b00      	cmp	r3, #0
 801a6b0:	d106      	bne.n	801a6c0 <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 801a6b2:	683b      	ldr	r3, [r7, #0]
 801a6b4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801a6b8:	3301      	adds	r3, #1
 801a6ba:	b2da      	uxtb	r2, r3
 801a6bc:	687b      	ldr	r3, [r7, #4]
 801a6be:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 801a6c0:	687b      	ldr	r3, [r7, #4]
 801a6c2:	685b      	ldr	r3, [r3, #4]
 801a6c4:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 801a6c6:	693b      	ldr	r3, [r7, #16]
 801a6c8:	7b1a      	ldrb	r2, [r3, #12]
 801a6ca:	7b5b      	ldrb	r3, [r3, #13]
 801a6cc:	021b      	lsls	r3, r3, #8
 801a6ce:	4313      	orrs	r3, r2
 801a6d0:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 801a6d2:	693b      	ldr	r3, [r7, #16]
 801a6d4:	781b      	ldrb	r3, [r3, #0]
 801a6d6:	f003 0301 	and.w	r3, r3, #1
 801a6da:	2b00      	cmp	r3, #0
 801a6dc:	d023      	beq.n	801a726 <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 801a6de:	693b      	ldr	r3, [r7, #16]
 801a6e0:	781b      	ldrb	r3, [r3, #0]
 801a6e2:	2b01      	cmp	r3, #1
 801a6e4:	d10f      	bne.n	801a706 <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 801a6e6:	693b      	ldr	r3, [r7, #16]
 801a6e8:	785b      	ldrb	r3, [r3, #1]
 801a6ea:	2b00      	cmp	r3, #0
 801a6ec:	d11b      	bne.n	801a726 <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 801a6ee:	693b      	ldr	r3, [r7, #16]
 801a6f0:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 801a6f2:	2b5e      	cmp	r3, #94	; 0x5e
 801a6f4:	d117      	bne.n	801a726 <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 801a6f6:	687b      	ldr	r3, [r7, #4]
 801a6f8:	7b5b      	ldrb	r3, [r3, #13]
 801a6fa:	f043 0310 	orr.w	r3, r3, #16
 801a6fe:	b2da      	uxtb	r2, r3
 801a700:	687b      	ldr	r3, [r7, #4]
 801a702:	735a      	strb	r2, [r3, #13]
 801a704:	e00f      	b.n	801a726 <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 801a706:	693b      	ldr	r3, [r7, #16]
 801a708:	2206      	movs	r2, #6
 801a70a:	4928      	ldr	r1, [pc, #160]	; (801a7ac <ethernet_input+0x118>)
 801a70c:	4618      	mov	r0, r3
 801a70e:	f000 ff39 	bl	801b584 <memcmp>
 801a712:	4603      	mov	r3, r0
 801a714:	2b00      	cmp	r3, #0
 801a716:	d106      	bne.n	801a726 <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 801a718:	687b      	ldr	r3, [r7, #4]
 801a71a:	7b5b      	ldrb	r3, [r3, #13]
 801a71c:	f043 0308 	orr.w	r3, r3, #8
 801a720:	b2da      	uxtb	r2, r3
 801a722:	687b      	ldr	r3, [r7, #4]
 801a724:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 801a726:	89fb      	ldrh	r3, [r7, #14]
 801a728:	2b08      	cmp	r3, #8
 801a72a:	d003      	beq.n	801a734 <ethernet_input+0xa0>
 801a72c:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 801a730:	d014      	beq.n	801a75c <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 801a732:	e032      	b.n	801a79a <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 801a734:	683b      	ldr	r3, [r7, #0]
 801a736:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801a73a:	f003 0308 	and.w	r3, r3, #8
 801a73e:	2b00      	cmp	r3, #0
 801a740:	d024      	beq.n	801a78c <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 801a742:	8afb      	ldrh	r3, [r7, #22]
 801a744:	4619      	mov	r1, r3
 801a746:	6878      	ldr	r0, [r7, #4]
 801a748:	f7f6 fe8e 	bl	8011468 <pbuf_remove_header>
 801a74c:	4603      	mov	r3, r0
 801a74e:	2b00      	cmp	r3, #0
 801a750:	d11e      	bne.n	801a790 <ethernet_input+0xfc>
        ip4_input(p, netif);
 801a752:	6839      	ldr	r1, [r7, #0]
 801a754:	6878      	ldr	r0, [r7, #4]
 801a756:	f7fe fe91 	bl	801947c <ip4_input>
      break;
 801a75a:	e013      	b.n	801a784 <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 801a75c:	683b      	ldr	r3, [r7, #0]
 801a75e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801a762:	f003 0308 	and.w	r3, r3, #8
 801a766:	2b00      	cmp	r3, #0
 801a768:	d014      	beq.n	801a794 <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 801a76a:	8afb      	ldrh	r3, [r7, #22]
 801a76c:	4619      	mov	r1, r3
 801a76e:	6878      	ldr	r0, [r7, #4]
 801a770:	f7f6 fe7a 	bl	8011468 <pbuf_remove_header>
 801a774:	4603      	mov	r3, r0
 801a776:	2b00      	cmp	r3, #0
 801a778:	d10e      	bne.n	801a798 <ethernet_input+0x104>
        etharp_input(p, netif);
 801a77a:	6839      	ldr	r1, [r7, #0]
 801a77c:	6878      	ldr	r0, [r7, #4]
 801a77e:	f7fe f80b 	bl	8018798 <etharp_input>
      break;
 801a782:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 801a784:	2300      	movs	r3, #0
 801a786:	e00c      	b.n	801a7a2 <ethernet_input+0x10e>
    goto free_and_return;
 801a788:	bf00      	nop
 801a78a:	e006      	b.n	801a79a <ethernet_input+0x106>
        goto free_and_return;
 801a78c:	bf00      	nop
 801a78e:	e004      	b.n	801a79a <ethernet_input+0x106>
        goto free_and_return;
 801a790:	bf00      	nop
 801a792:	e002      	b.n	801a79a <ethernet_input+0x106>
        goto free_and_return;
 801a794:	bf00      	nop
 801a796:	e000      	b.n	801a79a <ethernet_input+0x106>
        goto free_and_return;
 801a798:	bf00      	nop

free_and_return:
  pbuf_free(p);
 801a79a:	6878      	ldr	r0, [r7, #4]
 801a79c:	f7f6 feea 	bl	8011574 <pbuf_free>
  return ERR_OK;
 801a7a0:	2300      	movs	r3, #0
}
 801a7a2:	4618      	mov	r0, r3
 801a7a4:	3718      	adds	r7, #24
 801a7a6:	46bd      	mov	sp, r7
 801a7a8:	bd80      	pop	{r7, pc}
 801a7aa:	bf00      	nop
 801a7ac:	08020e20 	.word	0x08020e20

0801a7b0 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 801a7b0:	b580      	push	{r7, lr}
 801a7b2:	b086      	sub	sp, #24
 801a7b4:	af00      	add	r7, sp, #0
 801a7b6:	60f8      	str	r0, [r7, #12]
 801a7b8:	60b9      	str	r1, [r7, #8]
 801a7ba:	607a      	str	r2, [r7, #4]
 801a7bc:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 801a7be:	8c3b      	ldrh	r3, [r7, #32]
 801a7c0:	4618      	mov	r0, r3
 801a7c2:	f7f5 fad3 	bl	800fd6c <lwip_htons>
 801a7c6:	4603      	mov	r3, r0
 801a7c8:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 801a7ca:	210e      	movs	r1, #14
 801a7cc:	68b8      	ldr	r0, [r7, #8]
 801a7ce:	f7f6 fe3b 	bl	8011448 <pbuf_add_header>
 801a7d2:	4603      	mov	r3, r0
 801a7d4:	2b00      	cmp	r3, #0
 801a7d6:	d125      	bne.n	801a824 <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 801a7d8:	68bb      	ldr	r3, [r7, #8]
 801a7da:	685b      	ldr	r3, [r3, #4]
 801a7dc:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 801a7de:	693b      	ldr	r3, [r7, #16]
 801a7e0:	8afa      	ldrh	r2, [r7, #22]
 801a7e2:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 801a7e4:	693b      	ldr	r3, [r7, #16]
 801a7e6:	2206      	movs	r2, #6
 801a7e8:	6839      	ldr	r1, [r7, #0]
 801a7ea:	4618      	mov	r0, r3
 801a7ec:	f000 ff7f 	bl	801b6ee <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 801a7f0:	693b      	ldr	r3, [r7, #16]
 801a7f2:	3306      	adds	r3, #6
 801a7f4:	2206      	movs	r2, #6
 801a7f6:	6879      	ldr	r1, [r7, #4]
 801a7f8:	4618      	mov	r0, r3
 801a7fa:	f000 ff78 	bl	801b6ee <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 801a7fe:	68fb      	ldr	r3, [r7, #12]
 801a800:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 801a804:	2b06      	cmp	r3, #6
 801a806:	d006      	beq.n	801a816 <ethernet_output+0x66>
 801a808:	4b0a      	ldr	r3, [pc, #40]	; (801a834 <ethernet_output+0x84>)
 801a80a:	f44f 7299 	mov.w	r2, #306	; 0x132
 801a80e:	490a      	ldr	r1, [pc, #40]	; (801a838 <ethernet_output+0x88>)
 801a810:	480a      	ldr	r0, [pc, #40]	; (801a83c <ethernet_output+0x8c>)
 801a812:	f000 fd51 	bl	801b2b8 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 801a816:	68fb      	ldr	r3, [r7, #12]
 801a818:	699b      	ldr	r3, [r3, #24]
 801a81a:	68b9      	ldr	r1, [r7, #8]
 801a81c:	68f8      	ldr	r0, [r7, #12]
 801a81e:	4798      	blx	r3
 801a820:	4603      	mov	r3, r0
 801a822:	e002      	b.n	801a82a <ethernet_output+0x7a>
      goto pbuf_header_failed;
 801a824:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 801a826:	f06f 0301 	mvn.w	r3, #1
}
 801a82a:	4618      	mov	r0, r3
 801a82c:	3718      	adds	r7, #24
 801a82e:	46bd      	mov	sp, r7
 801a830:	bd80      	pop	{r7, pc}
 801a832:	bf00      	nop
 801a834:	08020c50 	.word	0x08020c50
 801a838:	08020c88 	.word	0x08020c88
 801a83c:	08020cbc 	.word	0x08020cbc

0801a840 <rand>:
 801a840:	4b16      	ldr	r3, [pc, #88]	; (801a89c <rand+0x5c>)
 801a842:	b510      	push	{r4, lr}
 801a844:	681c      	ldr	r4, [r3, #0]
 801a846:	6b23      	ldr	r3, [r4, #48]	; 0x30
 801a848:	b9b3      	cbnz	r3, 801a878 <rand+0x38>
 801a84a:	2018      	movs	r0, #24
 801a84c:	f001 fdbc 	bl	801c3c8 <malloc>
 801a850:	4602      	mov	r2, r0
 801a852:	6320      	str	r0, [r4, #48]	; 0x30
 801a854:	b920      	cbnz	r0, 801a860 <rand+0x20>
 801a856:	4b12      	ldr	r3, [pc, #72]	; (801a8a0 <rand+0x60>)
 801a858:	4812      	ldr	r0, [pc, #72]	; (801a8a4 <rand+0x64>)
 801a85a:	2152      	movs	r1, #82	; 0x52
 801a85c:	f000 ff56 	bl	801b70c <__assert_func>
 801a860:	4911      	ldr	r1, [pc, #68]	; (801a8a8 <rand+0x68>)
 801a862:	4b12      	ldr	r3, [pc, #72]	; (801a8ac <rand+0x6c>)
 801a864:	e9c0 1300 	strd	r1, r3, [r0]
 801a868:	4b11      	ldr	r3, [pc, #68]	; (801a8b0 <rand+0x70>)
 801a86a:	6083      	str	r3, [r0, #8]
 801a86c:	230b      	movs	r3, #11
 801a86e:	8183      	strh	r3, [r0, #12]
 801a870:	2100      	movs	r1, #0
 801a872:	2001      	movs	r0, #1
 801a874:	e9c2 0104 	strd	r0, r1, [r2, #16]
 801a878:	6b21      	ldr	r1, [r4, #48]	; 0x30
 801a87a:	480e      	ldr	r0, [pc, #56]	; (801a8b4 <rand+0x74>)
 801a87c:	690b      	ldr	r3, [r1, #16]
 801a87e:	694c      	ldr	r4, [r1, #20]
 801a880:	4a0d      	ldr	r2, [pc, #52]	; (801a8b8 <rand+0x78>)
 801a882:	4358      	muls	r0, r3
 801a884:	fb02 0004 	mla	r0, r2, r4, r0
 801a888:	fba3 3202 	umull	r3, r2, r3, r2
 801a88c:	3301      	adds	r3, #1
 801a88e:	eb40 0002 	adc.w	r0, r0, r2
 801a892:	e9c1 3004 	strd	r3, r0, [r1, #16]
 801a896:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 801a89a:	bd10      	pop	{r4, pc}
 801a89c:	200001cc 	.word	0x200001cc
 801a8a0:	08020e2e 	.word	0x08020e2e
 801a8a4:	08020e45 	.word	0x08020e45
 801a8a8:	abcd330e 	.word	0xabcd330e
 801a8ac:	e66d1234 	.word	0xe66d1234
 801a8b0:	0005deec 	.word	0x0005deec
 801a8b4:	5851f42d 	.word	0x5851f42d
 801a8b8:	4c957f2d 	.word	0x4c957f2d

0801a8bc <__cvt>:
 801a8bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 801a8be:	ed2d 8b02 	vpush	{d8}
 801a8c2:	eeb0 8b40 	vmov.f64	d8, d0
 801a8c6:	b085      	sub	sp, #20
 801a8c8:	4617      	mov	r7, r2
 801a8ca:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 801a8cc:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 801a8ce:	ee18 2a90 	vmov	r2, s17
 801a8d2:	f025 0520 	bic.w	r5, r5, #32
 801a8d6:	2a00      	cmp	r2, #0
 801a8d8:	bfb6      	itet	lt
 801a8da:	222d      	movlt	r2, #45	; 0x2d
 801a8dc:	2200      	movge	r2, #0
 801a8de:	eeb1 8b40 	vneglt.f64	d8, d0
 801a8e2:	2d46      	cmp	r5, #70	; 0x46
 801a8e4:	460c      	mov	r4, r1
 801a8e6:	701a      	strb	r2, [r3, #0]
 801a8e8:	d004      	beq.n	801a8f4 <__cvt+0x38>
 801a8ea:	2d45      	cmp	r5, #69	; 0x45
 801a8ec:	d100      	bne.n	801a8f0 <__cvt+0x34>
 801a8ee:	3401      	adds	r4, #1
 801a8f0:	2102      	movs	r1, #2
 801a8f2:	e000      	b.n	801a8f6 <__cvt+0x3a>
 801a8f4:	2103      	movs	r1, #3
 801a8f6:	ab03      	add	r3, sp, #12
 801a8f8:	9301      	str	r3, [sp, #4]
 801a8fa:	ab02      	add	r3, sp, #8
 801a8fc:	9300      	str	r3, [sp, #0]
 801a8fe:	4622      	mov	r2, r4
 801a900:	4633      	mov	r3, r6
 801a902:	eeb0 0b48 	vmov.f64	d0, d8
 801a906:	f000 ffa7 	bl	801b858 <_dtoa_r>
 801a90a:	2d47      	cmp	r5, #71	; 0x47
 801a90c:	d101      	bne.n	801a912 <__cvt+0x56>
 801a90e:	07fb      	lsls	r3, r7, #31
 801a910:	d51a      	bpl.n	801a948 <__cvt+0x8c>
 801a912:	2d46      	cmp	r5, #70	; 0x46
 801a914:	eb00 0204 	add.w	r2, r0, r4
 801a918:	d10c      	bne.n	801a934 <__cvt+0x78>
 801a91a:	7803      	ldrb	r3, [r0, #0]
 801a91c:	2b30      	cmp	r3, #48	; 0x30
 801a91e:	d107      	bne.n	801a930 <__cvt+0x74>
 801a920:	eeb5 8b40 	vcmp.f64	d8, #0.0
 801a924:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a928:	bf1c      	itt	ne
 801a92a:	f1c4 0401 	rsbne	r4, r4, #1
 801a92e:	6034      	strne	r4, [r6, #0]
 801a930:	6833      	ldr	r3, [r6, #0]
 801a932:	441a      	add	r2, r3
 801a934:	eeb5 8b40 	vcmp.f64	d8, #0.0
 801a938:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a93c:	bf08      	it	eq
 801a93e:	9203      	streq	r2, [sp, #12]
 801a940:	2130      	movs	r1, #48	; 0x30
 801a942:	9b03      	ldr	r3, [sp, #12]
 801a944:	4293      	cmp	r3, r2
 801a946:	d307      	bcc.n	801a958 <__cvt+0x9c>
 801a948:	9b03      	ldr	r3, [sp, #12]
 801a94a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801a94c:	1a1b      	subs	r3, r3, r0
 801a94e:	6013      	str	r3, [r2, #0]
 801a950:	b005      	add	sp, #20
 801a952:	ecbd 8b02 	vpop	{d8}
 801a956:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801a958:	1c5c      	adds	r4, r3, #1
 801a95a:	9403      	str	r4, [sp, #12]
 801a95c:	7019      	strb	r1, [r3, #0]
 801a95e:	e7f0      	b.n	801a942 <__cvt+0x86>

0801a960 <__exponent>:
 801a960:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801a962:	4603      	mov	r3, r0
 801a964:	2900      	cmp	r1, #0
 801a966:	bfb8      	it	lt
 801a968:	4249      	neglt	r1, r1
 801a96a:	f803 2b02 	strb.w	r2, [r3], #2
 801a96e:	bfb4      	ite	lt
 801a970:	222d      	movlt	r2, #45	; 0x2d
 801a972:	222b      	movge	r2, #43	; 0x2b
 801a974:	2909      	cmp	r1, #9
 801a976:	7042      	strb	r2, [r0, #1]
 801a978:	dd2a      	ble.n	801a9d0 <__exponent+0x70>
 801a97a:	f10d 0207 	add.w	r2, sp, #7
 801a97e:	4617      	mov	r7, r2
 801a980:	260a      	movs	r6, #10
 801a982:	4694      	mov	ip, r2
 801a984:	fb91 f5f6 	sdiv	r5, r1, r6
 801a988:	fb06 1415 	mls	r4, r6, r5, r1
 801a98c:	3430      	adds	r4, #48	; 0x30
 801a98e:	f80c 4c01 	strb.w	r4, [ip, #-1]
 801a992:	460c      	mov	r4, r1
 801a994:	2c63      	cmp	r4, #99	; 0x63
 801a996:	f102 32ff 	add.w	r2, r2, #4294967295
 801a99a:	4629      	mov	r1, r5
 801a99c:	dcf1      	bgt.n	801a982 <__exponent+0x22>
 801a99e:	3130      	adds	r1, #48	; 0x30
 801a9a0:	f1ac 0402 	sub.w	r4, ip, #2
 801a9a4:	f802 1c01 	strb.w	r1, [r2, #-1]
 801a9a8:	1c41      	adds	r1, r0, #1
 801a9aa:	4622      	mov	r2, r4
 801a9ac:	42ba      	cmp	r2, r7
 801a9ae:	d30a      	bcc.n	801a9c6 <__exponent+0x66>
 801a9b0:	f10d 0209 	add.w	r2, sp, #9
 801a9b4:	eba2 020c 	sub.w	r2, r2, ip
 801a9b8:	42bc      	cmp	r4, r7
 801a9ba:	bf88      	it	hi
 801a9bc:	2200      	movhi	r2, #0
 801a9be:	4413      	add	r3, r2
 801a9c0:	1a18      	subs	r0, r3, r0
 801a9c2:	b003      	add	sp, #12
 801a9c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801a9c6:	f812 5b01 	ldrb.w	r5, [r2], #1
 801a9ca:	f801 5f01 	strb.w	r5, [r1, #1]!
 801a9ce:	e7ed      	b.n	801a9ac <__exponent+0x4c>
 801a9d0:	2330      	movs	r3, #48	; 0x30
 801a9d2:	3130      	adds	r1, #48	; 0x30
 801a9d4:	7083      	strb	r3, [r0, #2]
 801a9d6:	70c1      	strb	r1, [r0, #3]
 801a9d8:	1d03      	adds	r3, r0, #4
 801a9da:	e7f1      	b.n	801a9c0 <__exponent+0x60>
 801a9dc:	0000      	movs	r0, r0
	...

0801a9e0 <_printf_float>:
 801a9e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a9e4:	b08b      	sub	sp, #44	; 0x2c
 801a9e6:	460c      	mov	r4, r1
 801a9e8:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 801a9ec:	4616      	mov	r6, r2
 801a9ee:	461f      	mov	r7, r3
 801a9f0:	4605      	mov	r5, r0
 801a9f2:	f000 fe0b 	bl	801b60c <_localeconv_r>
 801a9f6:	f8d0 b000 	ldr.w	fp, [r0]
 801a9fa:	4658      	mov	r0, fp
 801a9fc:	f7e7 fb00 	bl	8002000 <strlen>
 801aa00:	2300      	movs	r3, #0
 801aa02:	9308      	str	r3, [sp, #32]
 801aa04:	f8d8 3000 	ldr.w	r3, [r8]
 801aa08:	f894 9018 	ldrb.w	r9, [r4, #24]
 801aa0c:	6822      	ldr	r2, [r4, #0]
 801aa0e:	3307      	adds	r3, #7
 801aa10:	f023 0307 	bic.w	r3, r3, #7
 801aa14:	f103 0108 	add.w	r1, r3, #8
 801aa18:	f8c8 1000 	str.w	r1, [r8]
 801aa1c:	ed93 0b00 	vldr	d0, [r3]
 801aa20:	ed9f 6b97 	vldr	d6, [pc, #604]	; 801ac80 <_printf_float+0x2a0>
 801aa24:	eeb0 7bc0 	vabs.f64	d7, d0
 801aa28:	eeb4 7b46 	vcmp.f64	d7, d6
 801aa2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801aa30:	ed84 0b12 	vstr	d0, [r4, #72]	; 0x48
 801aa34:	4682      	mov	sl, r0
 801aa36:	dd24      	ble.n	801aa82 <_printf_float+0xa2>
 801aa38:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 801aa3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801aa40:	d502      	bpl.n	801aa48 <_printf_float+0x68>
 801aa42:	232d      	movs	r3, #45	; 0x2d
 801aa44:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801aa48:	498f      	ldr	r1, [pc, #572]	; (801ac88 <_printf_float+0x2a8>)
 801aa4a:	4b90      	ldr	r3, [pc, #576]	; (801ac8c <_printf_float+0x2ac>)
 801aa4c:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 801aa50:	bf94      	ite	ls
 801aa52:	4688      	movls	r8, r1
 801aa54:	4698      	movhi	r8, r3
 801aa56:	2303      	movs	r3, #3
 801aa58:	6123      	str	r3, [r4, #16]
 801aa5a:	f022 0204 	bic.w	r2, r2, #4
 801aa5e:	2300      	movs	r3, #0
 801aa60:	6022      	str	r2, [r4, #0]
 801aa62:	9304      	str	r3, [sp, #16]
 801aa64:	9700      	str	r7, [sp, #0]
 801aa66:	4633      	mov	r3, r6
 801aa68:	aa09      	add	r2, sp, #36	; 0x24
 801aa6a:	4621      	mov	r1, r4
 801aa6c:	4628      	mov	r0, r5
 801aa6e:	f000 f9d1 	bl	801ae14 <_printf_common>
 801aa72:	3001      	adds	r0, #1
 801aa74:	f040 808a 	bne.w	801ab8c <_printf_float+0x1ac>
 801aa78:	f04f 30ff 	mov.w	r0, #4294967295
 801aa7c:	b00b      	add	sp, #44	; 0x2c
 801aa7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801aa82:	eeb4 0b40 	vcmp.f64	d0, d0
 801aa86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801aa8a:	d709      	bvc.n	801aaa0 <_printf_float+0xc0>
 801aa8c:	ee10 3a90 	vmov	r3, s1
 801aa90:	2b00      	cmp	r3, #0
 801aa92:	bfbc      	itt	lt
 801aa94:	232d      	movlt	r3, #45	; 0x2d
 801aa96:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 801aa9a:	497d      	ldr	r1, [pc, #500]	; (801ac90 <_printf_float+0x2b0>)
 801aa9c:	4b7d      	ldr	r3, [pc, #500]	; (801ac94 <_printf_float+0x2b4>)
 801aa9e:	e7d5      	b.n	801aa4c <_printf_float+0x6c>
 801aaa0:	6863      	ldr	r3, [r4, #4]
 801aaa2:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 801aaa6:	9104      	str	r1, [sp, #16]
 801aaa8:	1c59      	adds	r1, r3, #1
 801aaaa:	d13c      	bne.n	801ab26 <_printf_float+0x146>
 801aaac:	2306      	movs	r3, #6
 801aaae:	6063      	str	r3, [r4, #4]
 801aab0:	2300      	movs	r3, #0
 801aab2:	9303      	str	r3, [sp, #12]
 801aab4:	ab08      	add	r3, sp, #32
 801aab6:	e9cd 9301 	strd	r9, r3, [sp, #4]
 801aaba:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 801aabe:	ab07      	add	r3, sp, #28
 801aac0:	6861      	ldr	r1, [r4, #4]
 801aac2:	9300      	str	r3, [sp, #0]
 801aac4:	6022      	str	r2, [r4, #0]
 801aac6:	f10d 031b 	add.w	r3, sp, #27
 801aaca:	4628      	mov	r0, r5
 801aacc:	f7ff fef6 	bl	801a8bc <__cvt>
 801aad0:	9b04      	ldr	r3, [sp, #16]
 801aad2:	9907      	ldr	r1, [sp, #28]
 801aad4:	2b47      	cmp	r3, #71	; 0x47
 801aad6:	4680      	mov	r8, r0
 801aad8:	d108      	bne.n	801aaec <_printf_float+0x10c>
 801aada:	1cc8      	adds	r0, r1, #3
 801aadc:	db02      	blt.n	801aae4 <_printf_float+0x104>
 801aade:	6863      	ldr	r3, [r4, #4]
 801aae0:	4299      	cmp	r1, r3
 801aae2:	dd41      	ble.n	801ab68 <_printf_float+0x188>
 801aae4:	f1a9 0902 	sub.w	r9, r9, #2
 801aae8:	fa5f f989 	uxtb.w	r9, r9
 801aaec:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 801aaf0:	d820      	bhi.n	801ab34 <_printf_float+0x154>
 801aaf2:	3901      	subs	r1, #1
 801aaf4:	464a      	mov	r2, r9
 801aaf6:	f104 0050 	add.w	r0, r4, #80	; 0x50
 801aafa:	9107      	str	r1, [sp, #28]
 801aafc:	f7ff ff30 	bl	801a960 <__exponent>
 801ab00:	9a08      	ldr	r2, [sp, #32]
 801ab02:	9004      	str	r0, [sp, #16]
 801ab04:	1813      	adds	r3, r2, r0
 801ab06:	2a01      	cmp	r2, #1
 801ab08:	6123      	str	r3, [r4, #16]
 801ab0a:	dc02      	bgt.n	801ab12 <_printf_float+0x132>
 801ab0c:	6822      	ldr	r2, [r4, #0]
 801ab0e:	07d2      	lsls	r2, r2, #31
 801ab10:	d501      	bpl.n	801ab16 <_printf_float+0x136>
 801ab12:	3301      	adds	r3, #1
 801ab14:	6123      	str	r3, [r4, #16]
 801ab16:	f89d 301b 	ldrb.w	r3, [sp, #27]
 801ab1a:	2b00      	cmp	r3, #0
 801ab1c:	d0a2      	beq.n	801aa64 <_printf_float+0x84>
 801ab1e:	232d      	movs	r3, #45	; 0x2d
 801ab20:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801ab24:	e79e      	b.n	801aa64 <_printf_float+0x84>
 801ab26:	9904      	ldr	r1, [sp, #16]
 801ab28:	2947      	cmp	r1, #71	; 0x47
 801ab2a:	d1c1      	bne.n	801aab0 <_printf_float+0xd0>
 801ab2c:	2b00      	cmp	r3, #0
 801ab2e:	d1bf      	bne.n	801aab0 <_printf_float+0xd0>
 801ab30:	2301      	movs	r3, #1
 801ab32:	e7bc      	b.n	801aaae <_printf_float+0xce>
 801ab34:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 801ab38:	d118      	bne.n	801ab6c <_printf_float+0x18c>
 801ab3a:	2900      	cmp	r1, #0
 801ab3c:	6863      	ldr	r3, [r4, #4]
 801ab3e:	dd0b      	ble.n	801ab58 <_printf_float+0x178>
 801ab40:	6121      	str	r1, [r4, #16]
 801ab42:	b913      	cbnz	r3, 801ab4a <_printf_float+0x16a>
 801ab44:	6822      	ldr	r2, [r4, #0]
 801ab46:	07d0      	lsls	r0, r2, #31
 801ab48:	d502      	bpl.n	801ab50 <_printf_float+0x170>
 801ab4a:	3301      	adds	r3, #1
 801ab4c:	440b      	add	r3, r1
 801ab4e:	6123      	str	r3, [r4, #16]
 801ab50:	2300      	movs	r3, #0
 801ab52:	65a1      	str	r1, [r4, #88]	; 0x58
 801ab54:	9304      	str	r3, [sp, #16]
 801ab56:	e7de      	b.n	801ab16 <_printf_float+0x136>
 801ab58:	b913      	cbnz	r3, 801ab60 <_printf_float+0x180>
 801ab5a:	6822      	ldr	r2, [r4, #0]
 801ab5c:	07d2      	lsls	r2, r2, #31
 801ab5e:	d501      	bpl.n	801ab64 <_printf_float+0x184>
 801ab60:	3302      	adds	r3, #2
 801ab62:	e7f4      	b.n	801ab4e <_printf_float+0x16e>
 801ab64:	2301      	movs	r3, #1
 801ab66:	e7f2      	b.n	801ab4e <_printf_float+0x16e>
 801ab68:	f04f 0967 	mov.w	r9, #103	; 0x67
 801ab6c:	9b08      	ldr	r3, [sp, #32]
 801ab6e:	4299      	cmp	r1, r3
 801ab70:	db05      	blt.n	801ab7e <_printf_float+0x19e>
 801ab72:	6823      	ldr	r3, [r4, #0]
 801ab74:	6121      	str	r1, [r4, #16]
 801ab76:	07d8      	lsls	r0, r3, #31
 801ab78:	d5ea      	bpl.n	801ab50 <_printf_float+0x170>
 801ab7a:	1c4b      	adds	r3, r1, #1
 801ab7c:	e7e7      	b.n	801ab4e <_printf_float+0x16e>
 801ab7e:	2900      	cmp	r1, #0
 801ab80:	bfd4      	ite	le
 801ab82:	f1c1 0202 	rsble	r2, r1, #2
 801ab86:	2201      	movgt	r2, #1
 801ab88:	4413      	add	r3, r2
 801ab8a:	e7e0      	b.n	801ab4e <_printf_float+0x16e>
 801ab8c:	6823      	ldr	r3, [r4, #0]
 801ab8e:	055a      	lsls	r2, r3, #21
 801ab90:	d407      	bmi.n	801aba2 <_printf_float+0x1c2>
 801ab92:	6923      	ldr	r3, [r4, #16]
 801ab94:	4642      	mov	r2, r8
 801ab96:	4631      	mov	r1, r6
 801ab98:	4628      	mov	r0, r5
 801ab9a:	47b8      	blx	r7
 801ab9c:	3001      	adds	r0, #1
 801ab9e:	d12a      	bne.n	801abf6 <_printf_float+0x216>
 801aba0:	e76a      	b.n	801aa78 <_printf_float+0x98>
 801aba2:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 801aba6:	f240 80e0 	bls.w	801ad6a <_printf_float+0x38a>
 801abaa:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 801abae:	eeb5 7b40 	vcmp.f64	d7, #0.0
 801abb2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801abb6:	d133      	bne.n	801ac20 <_printf_float+0x240>
 801abb8:	4a37      	ldr	r2, [pc, #220]	; (801ac98 <_printf_float+0x2b8>)
 801abba:	2301      	movs	r3, #1
 801abbc:	4631      	mov	r1, r6
 801abbe:	4628      	mov	r0, r5
 801abc0:	47b8      	blx	r7
 801abc2:	3001      	adds	r0, #1
 801abc4:	f43f af58 	beq.w	801aa78 <_printf_float+0x98>
 801abc8:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 801abcc:	429a      	cmp	r2, r3
 801abce:	db02      	blt.n	801abd6 <_printf_float+0x1f6>
 801abd0:	6823      	ldr	r3, [r4, #0]
 801abd2:	07d8      	lsls	r0, r3, #31
 801abd4:	d50f      	bpl.n	801abf6 <_printf_float+0x216>
 801abd6:	4653      	mov	r3, sl
 801abd8:	465a      	mov	r2, fp
 801abda:	4631      	mov	r1, r6
 801abdc:	4628      	mov	r0, r5
 801abde:	47b8      	blx	r7
 801abe0:	3001      	adds	r0, #1
 801abe2:	f43f af49 	beq.w	801aa78 <_printf_float+0x98>
 801abe6:	f04f 0800 	mov.w	r8, #0
 801abea:	f104 091a 	add.w	r9, r4, #26
 801abee:	9b08      	ldr	r3, [sp, #32]
 801abf0:	3b01      	subs	r3, #1
 801abf2:	4543      	cmp	r3, r8
 801abf4:	dc09      	bgt.n	801ac0a <_printf_float+0x22a>
 801abf6:	6823      	ldr	r3, [r4, #0]
 801abf8:	079b      	lsls	r3, r3, #30
 801abfa:	f100 8106 	bmi.w	801ae0a <_printf_float+0x42a>
 801abfe:	68e0      	ldr	r0, [r4, #12]
 801ac00:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801ac02:	4298      	cmp	r0, r3
 801ac04:	bfb8      	it	lt
 801ac06:	4618      	movlt	r0, r3
 801ac08:	e738      	b.n	801aa7c <_printf_float+0x9c>
 801ac0a:	2301      	movs	r3, #1
 801ac0c:	464a      	mov	r2, r9
 801ac0e:	4631      	mov	r1, r6
 801ac10:	4628      	mov	r0, r5
 801ac12:	47b8      	blx	r7
 801ac14:	3001      	adds	r0, #1
 801ac16:	f43f af2f 	beq.w	801aa78 <_printf_float+0x98>
 801ac1a:	f108 0801 	add.w	r8, r8, #1
 801ac1e:	e7e6      	b.n	801abee <_printf_float+0x20e>
 801ac20:	9b07      	ldr	r3, [sp, #28]
 801ac22:	2b00      	cmp	r3, #0
 801ac24:	dc3a      	bgt.n	801ac9c <_printf_float+0x2bc>
 801ac26:	4a1c      	ldr	r2, [pc, #112]	; (801ac98 <_printf_float+0x2b8>)
 801ac28:	2301      	movs	r3, #1
 801ac2a:	4631      	mov	r1, r6
 801ac2c:	4628      	mov	r0, r5
 801ac2e:	47b8      	blx	r7
 801ac30:	3001      	adds	r0, #1
 801ac32:	f43f af21 	beq.w	801aa78 <_printf_float+0x98>
 801ac36:	e9dd 3207 	ldrd	r3, r2, [sp, #28]
 801ac3a:	4313      	orrs	r3, r2
 801ac3c:	d102      	bne.n	801ac44 <_printf_float+0x264>
 801ac3e:	6823      	ldr	r3, [r4, #0]
 801ac40:	07d9      	lsls	r1, r3, #31
 801ac42:	d5d8      	bpl.n	801abf6 <_printf_float+0x216>
 801ac44:	4653      	mov	r3, sl
 801ac46:	465a      	mov	r2, fp
 801ac48:	4631      	mov	r1, r6
 801ac4a:	4628      	mov	r0, r5
 801ac4c:	47b8      	blx	r7
 801ac4e:	3001      	adds	r0, #1
 801ac50:	f43f af12 	beq.w	801aa78 <_printf_float+0x98>
 801ac54:	f04f 0900 	mov.w	r9, #0
 801ac58:	f104 0a1a 	add.w	sl, r4, #26
 801ac5c:	9b07      	ldr	r3, [sp, #28]
 801ac5e:	425b      	negs	r3, r3
 801ac60:	454b      	cmp	r3, r9
 801ac62:	dc01      	bgt.n	801ac68 <_printf_float+0x288>
 801ac64:	9b08      	ldr	r3, [sp, #32]
 801ac66:	e795      	b.n	801ab94 <_printf_float+0x1b4>
 801ac68:	2301      	movs	r3, #1
 801ac6a:	4652      	mov	r2, sl
 801ac6c:	4631      	mov	r1, r6
 801ac6e:	4628      	mov	r0, r5
 801ac70:	47b8      	blx	r7
 801ac72:	3001      	adds	r0, #1
 801ac74:	f43f af00 	beq.w	801aa78 <_printf_float+0x98>
 801ac78:	f109 0901 	add.w	r9, r9, #1
 801ac7c:	e7ee      	b.n	801ac5c <_printf_float+0x27c>
 801ac7e:	bf00      	nop
 801ac80:	ffffffff 	.word	0xffffffff
 801ac84:	7fefffff 	.word	0x7fefffff
 801ac88:	08020f9e 	.word	0x08020f9e
 801ac8c:	08020fa2 	.word	0x08020fa2
 801ac90:	08020fa6 	.word	0x08020fa6
 801ac94:	08020faa 	.word	0x08020faa
 801ac98:	08020fae 	.word	0x08020fae
 801ac9c:	9a08      	ldr	r2, [sp, #32]
 801ac9e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 801aca0:	429a      	cmp	r2, r3
 801aca2:	bfa8      	it	ge
 801aca4:	461a      	movge	r2, r3
 801aca6:	2a00      	cmp	r2, #0
 801aca8:	4691      	mov	r9, r2
 801acaa:	dc38      	bgt.n	801ad1e <_printf_float+0x33e>
 801acac:	2300      	movs	r3, #0
 801acae:	9305      	str	r3, [sp, #20]
 801acb0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801acb4:	f104 021a 	add.w	r2, r4, #26
 801acb8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 801acba:	9905      	ldr	r1, [sp, #20]
 801acbc:	9304      	str	r3, [sp, #16]
 801acbe:	eba3 0309 	sub.w	r3, r3, r9
 801acc2:	428b      	cmp	r3, r1
 801acc4:	dc33      	bgt.n	801ad2e <_printf_float+0x34e>
 801acc6:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 801acca:	429a      	cmp	r2, r3
 801accc:	db3c      	blt.n	801ad48 <_printf_float+0x368>
 801acce:	6823      	ldr	r3, [r4, #0]
 801acd0:	07da      	lsls	r2, r3, #31
 801acd2:	d439      	bmi.n	801ad48 <_printf_float+0x368>
 801acd4:	e9dd 3207 	ldrd	r3, r2, [sp, #28]
 801acd8:	eba2 0903 	sub.w	r9, r2, r3
 801acdc:	9b04      	ldr	r3, [sp, #16]
 801acde:	1ad2      	subs	r2, r2, r3
 801ace0:	4591      	cmp	r9, r2
 801ace2:	bfa8      	it	ge
 801ace4:	4691      	movge	r9, r2
 801ace6:	f1b9 0f00 	cmp.w	r9, #0
 801acea:	dc35      	bgt.n	801ad58 <_printf_float+0x378>
 801acec:	f04f 0800 	mov.w	r8, #0
 801acf0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 801acf4:	f104 0a1a 	add.w	sl, r4, #26
 801acf8:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 801acfc:	1a9b      	subs	r3, r3, r2
 801acfe:	eba3 0309 	sub.w	r3, r3, r9
 801ad02:	4543      	cmp	r3, r8
 801ad04:	f77f af77 	ble.w	801abf6 <_printf_float+0x216>
 801ad08:	2301      	movs	r3, #1
 801ad0a:	4652      	mov	r2, sl
 801ad0c:	4631      	mov	r1, r6
 801ad0e:	4628      	mov	r0, r5
 801ad10:	47b8      	blx	r7
 801ad12:	3001      	adds	r0, #1
 801ad14:	f43f aeb0 	beq.w	801aa78 <_printf_float+0x98>
 801ad18:	f108 0801 	add.w	r8, r8, #1
 801ad1c:	e7ec      	b.n	801acf8 <_printf_float+0x318>
 801ad1e:	4613      	mov	r3, r2
 801ad20:	4631      	mov	r1, r6
 801ad22:	4642      	mov	r2, r8
 801ad24:	4628      	mov	r0, r5
 801ad26:	47b8      	blx	r7
 801ad28:	3001      	adds	r0, #1
 801ad2a:	d1bf      	bne.n	801acac <_printf_float+0x2cc>
 801ad2c:	e6a4      	b.n	801aa78 <_printf_float+0x98>
 801ad2e:	2301      	movs	r3, #1
 801ad30:	4631      	mov	r1, r6
 801ad32:	4628      	mov	r0, r5
 801ad34:	9204      	str	r2, [sp, #16]
 801ad36:	47b8      	blx	r7
 801ad38:	3001      	adds	r0, #1
 801ad3a:	f43f ae9d 	beq.w	801aa78 <_printf_float+0x98>
 801ad3e:	9b05      	ldr	r3, [sp, #20]
 801ad40:	9a04      	ldr	r2, [sp, #16]
 801ad42:	3301      	adds	r3, #1
 801ad44:	9305      	str	r3, [sp, #20]
 801ad46:	e7b7      	b.n	801acb8 <_printf_float+0x2d8>
 801ad48:	4653      	mov	r3, sl
 801ad4a:	465a      	mov	r2, fp
 801ad4c:	4631      	mov	r1, r6
 801ad4e:	4628      	mov	r0, r5
 801ad50:	47b8      	blx	r7
 801ad52:	3001      	adds	r0, #1
 801ad54:	d1be      	bne.n	801acd4 <_printf_float+0x2f4>
 801ad56:	e68f      	b.n	801aa78 <_printf_float+0x98>
 801ad58:	9a04      	ldr	r2, [sp, #16]
 801ad5a:	464b      	mov	r3, r9
 801ad5c:	4442      	add	r2, r8
 801ad5e:	4631      	mov	r1, r6
 801ad60:	4628      	mov	r0, r5
 801ad62:	47b8      	blx	r7
 801ad64:	3001      	adds	r0, #1
 801ad66:	d1c1      	bne.n	801acec <_printf_float+0x30c>
 801ad68:	e686      	b.n	801aa78 <_printf_float+0x98>
 801ad6a:	9a08      	ldr	r2, [sp, #32]
 801ad6c:	2a01      	cmp	r2, #1
 801ad6e:	dc01      	bgt.n	801ad74 <_printf_float+0x394>
 801ad70:	07db      	lsls	r3, r3, #31
 801ad72:	d537      	bpl.n	801ade4 <_printf_float+0x404>
 801ad74:	2301      	movs	r3, #1
 801ad76:	4642      	mov	r2, r8
 801ad78:	4631      	mov	r1, r6
 801ad7a:	4628      	mov	r0, r5
 801ad7c:	47b8      	blx	r7
 801ad7e:	3001      	adds	r0, #1
 801ad80:	f43f ae7a 	beq.w	801aa78 <_printf_float+0x98>
 801ad84:	4653      	mov	r3, sl
 801ad86:	465a      	mov	r2, fp
 801ad88:	4631      	mov	r1, r6
 801ad8a:	4628      	mov	r0, r5
 801ad8c:	47b8      	blx	r7
 801ad8e:	3001      	adds	r0, #1
 801ad90:	f43f ae72 	beq.w	801aa78 <_printf_float+0x98>
 801ad94:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 801ad98:	eeb5 7b40 	vcmp.f64	d7, #0.0
 801ad9c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ada0:	9b08      	ldr	r3, [sp, #32]
 801ada2:	d01a      	beq.n	801adda <_printf_float+0x3fa>
 801ada4:	3b01      	subs	r3, #1
 801ada6:	f108 0201 	add.w	r2, r8, #1
 801adaa:	4631      	mov	r1, r6
 801adac:	4628      	mov	r0, r5
 801adae:	47b8      	blx	r7
 801adb0:	3001      	adds	r0, #1
 801adb2:	d10e      	bne.n	801add2 <_printf_float+0x3f2>
 801adb4:	e660      	b.n	801aa78 <_printf_float+0x98>
 801adb6:	2301      	movs	r3, #1
 801adb8:	464a      	mov	r2, r9
 801adba:	4631      	mov	r1, r6
 801adbc:	4628      	mov	r0, r5
 801adbe:	47b8      	blx	r7
 801adc0:	3001      	adds	r0, #1
 801adc2:	f43f ae59 	beq.w	801aa78 <_printf_float+0x98>
 801adc6:	f108 0801 	add.w	r8, r8, #1
 801adca:	9b08      	ldr	r3, [sp, #32]
 801adcc:	3b01      	subs	r3, #1
 801adce:	4543      	cmp	r3, r8
 801add0:	dcf1      	bgt.n	801adb6 <_printf_float+0x3d6>
 801add2:	9b04      	ldr	r3, [sp, #16]
 801add4:	f104 0250 	add.w	r2, r4, #80	; 0x50
 801add8:	e6dd      	b.n	801ab96 <_printf_float+0x1b6>
 801adda:	f04f 0800 	mov.w	r8, #0
 801adde:	f104 091a 	add.w	r9, r4, #26
 801ade2:	e7f2      	b.n	801adca <_printf_float+0x3ea>
 801ade4:	2301      	movs	r3, #1
 801ade6:	4642      	mov	r2, r8
 801ade8:	e7df      	b.n	801adaa <_printf_float+0x3ca>
 801adea:	2301      	movs	r3, #1
 801adec:	464a      	mov	r2, r9
 801adee:	4631      	mov	r1, r6
 801adf0:	4628      	mov	r0, r5
 801adf2:	47b8      	blx	r7
 801adf4:	3001      	adds	r0, #1
 801adf6:	f43f ae3f 	beq.w	801aa78 <_printf_float+0x98>
 801adfa:	f108 0801 	add.w	r8, r8, #1
 801adfe:	68e3      	ldr	r3, [r4, #12]
 801ae00:	9909      	ldr	r1, [sp, #36]	; 0x24
 801ae02:	1a5b      	subs	r3, r3, r1
 801ae04:	4543      	cmp	r3, r8
 801ae06:	dcf0      	bgt.n	801adea <_printf_float+0x40a>
 801ae08:	e6f9      	b.n	801abfe <_printf_float+0x21e>
 801ae0a:	f04f 0800 	mov.w	r8, #0
 801ae0e:	f104 0919 	add.w	r9, r4, #25
 801ae12:	e7f4      	b.n	801adfe <_printf_float+0x41e>

0801ae14 <_printf_common>:
 801ae14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801ae18:	4616      	mov	r6, r2
 801ae1a:	4699      	mov	r9, r3
 801ae1c:	688a      	ldr	r2, [r1, #8]
 801ae1e:	690b      	ldr	r3, [r1, #16]
 801ae20:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801ae24:	4293      	cmp	r3, r2
 801ae26:	bfb8      	it	lt
 801ae28:	4613      	movlt	r3, r2
 801ae2a:	6033      	str	r3, [r6, #0]
 801ae2c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801ae30:	4607      	mov	r7, r0
 801ae32:	460c      	mov	r4, r1
 801ae34:	b10a      	cbz	r2, 801ae3a <_printf_common+0x26>
 801ae36:	3301      	adds	r3, #1
 801ae38:	6033      	str	r3, [r6, #0]
 801ae3a:	6823      	ldr	r3, [r4, #0]
 801ae3c:	0699      	lsls	r1, r3, #26
 801ae3e:	bf42      	ittt	mi
 801ae40:	6833      	ldrmi	r3, [r6, #0]
 801ae42:	3302      	addmi	r3, #2
 801ae44:	6033      	strmi	r3, [r6, #0]
 801ae46:	6825      	ldr	r5, [r4, #0]
 801ae48:	f015 0506 	ands.w	r5, r5, #6
 801ae4c:	d106      	bne.n	801ae5c <_printf_common+0x48>
 801ae4e:	f104 0a19 	add.w	sl, r4, #25
 801ae52:	68e3      	ldr	r3, [r4, #12]
 801ae54:	6832      	ldr	r2, [r6, #0]
 801ae56:	1a9b      	subs	r3, r3, r2
 801ae58:	42ab      	cmp	r3, r5
 801ae5a:	dc26      	bgt.n	801aeaa <_printf_common+0x96>
 801ae5c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 801ae60:	1e13      	subs	r3, r2, #0
 801ae62:	6822      	ldr	r2, [r4, #0]
 801ae64:	bf18      	it	ne
 801ae66:	2301      	movne	r3, #1
 801ae68:	0692      	lsls	r2, r2, #26
 801ae6a:	d42b      	bmi.n	801aec4 <_printf_common+0xb0>
 801ae6c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801ae70:	4649      	mov	r1, r9
 801ae72:	4638      	mov	r0, r7
 801ae74:	47c0      	blx	r8
 801ae76:	3001      	adds	r0, #1
 801ae78:	d01e      	beq.n	801aeb8 <_printf_common+0xa4>
 801ae7a:	6823      	ldr	r3, [r4, #0]
 801ae7c:	6922      	ldr	r2, [r4, #16]
 801ae7e:	f003 0306 	and.w	r3, r3, #6
 801ae82:	2b04      	cmp	r3, #4
 801ae84:	bf02      	ittt	eq
 801ae86:	68e5      	ldreq	r5, [r4, #12]
 801ae88:	6833      	ldreq	r3, [r6, #0]
 801ae8a:	1aed      	subeq	r5, r5, r3
 801ae8c:	68a3      	ldr	r3, [r4, #8]
 801ae8e:	bf0c      	ite	eq
 801ae90:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801ae94:	2500      	movne	r5, #0
 801ae96:	4293      	cmp	r3, r2
 801ae98:	bfc4      	itt	gt
 801ae9a:	1a9b      	subgt	r3, r3, r2
 801ae9c:	18ed      	addgt	r5, r5, r3
 801ae9e:	2600      	movs	r6, #0
 801aea0:	341a      	adds	r4, #26
 801aea2:	42b5      	cmp	r5, r6
 801aea4:	d11a      	bne.n	801aedc <_printf_common+0xc8>
 801aea6:	2000      	movs	r0, #0
 801aea8:	e008      	b.n	801aebc <_printf_common+0xa8>
 801aeaa:	2301      	movs	r3, #1
 801aeac:	4652      	mov	r2, sl
 801aeae:	4649      	mov	r1, r9
 801aeb0:	4638      	mov	r0, r7
 801aeb2:	47c0      	blx	r8
 801aeb4:	3001      	adds	r0, #1
 801aeb6:	d103      	bne.n	801aec0 <_printf_common+0xac>
 801aeb8:	f04f 30ff 	mov.w	r0, #4294967295
 801aebc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801aec0:	3501      	adds	r5, #1
 801aec2:	e7c6      	b.n	801ae52 <_printf_common+0x3e>
 801aec4:	18e1      	adds	r1, r4, r3
 801aec6:	1c5a      	adds	r2, r3, #1
 801aec8:	2030      	movs	r0, #48	; 0x30
 801aeca:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801aece:	4422      	add	r2, r4
 801aed0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801aed4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801aed8:	3302      	adds	r3, #2
 801aeda:	e7c7      	b.n	801ae6c <_printf_common+0x58>
 801aedc:	2301      	movs	r3, #1
 801aede:	4622      	mov	r2, r4
 801aee0:	4649      	mov	r1, r9
 801aee2:	4638      	mov	r0, r7
 801aee4:	47c0      	blx	r8
 801aee6:	3001      	adds	r0, #1
 801aee8:	d0e6      	beq.n	801aeb8 <_printf_common+0xa4>
 801aeea:	3601      	adds	r6, #1
 801aeec:	e7d9      	b.n	801aea2 <_printf_common+0x8e>
	...

0801aef0 <_printf_i>:
 801aef0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801aef4:	7e0f      	ldrb	r7, [r1, #24]
 801aef6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801aef8:	2f78      	cmp	r7, #120	; 0x78
 801aefa:	4691      	mov	r9, r2
 801aefc:	4680      	mov	r8, r0
 801aefe:	460c      	mov	r4, r1
 801af00:	469a      	mov	sl, r3
 801af02:	f101 0243 	add.w	r2, r1, #67	; 0x43
 801af06:	d807      	bhi.n	801af18 <_printf_i+0x28>
 801af08:	2f62      	cmp	r7, #98	; 0x62
 801af0a:	d80a      	bhi.n	801af22 <_printf_i+0x32>
 801af0c:	2f00      	cmp	r7, #0
 801af0e:	f000 80d4 	beq.w	801b0ba <_printf_i+0x1ca>
 801af12:	2f58      	cmp	r7, #88	; 0x58
 801af14:	f000 80c0 	beq.w	801b098 <_printf_i+0x1a8>
 801af18:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801af1c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 801af20:	e03a      	b.n	801af98 <_printf_i+0xa8>
 801af22:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801af26:	2b15      	cmp	r3, #21
 801af28:	d8f6      	bhi.n	801af18 <_printf_i+0x28>
 801af2a:	a101      	add	r1, pc, #4	; (adr r1, 801af30 <_printf_i+0x40>)
 801af2c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801af30:	0801af89 	.word	0x0801af89
 801af34:	0801af9d 	.word	0x0801af9d
 801af38:	0801af19 	.word	0x0801af19
 801af3c:	0801af19 	.word	0x0801af19
 801af40:	0801af19 	.word	0x0801af19
 801af44:	0801af19 	.word	0x0801af19
 801af48:	0801af9d 	.word	0x0801af9d
 801af4c:	0801af19 	.word	0x0801af19
 801af50:	0801af19 	.word	0x0801af19
 801af54:	0801af19 	.word	0x0801af19
 801af58:	0801af19 	.word	0x0801af19
 801af5c:	0801b0a1 	.word	0x0801b0a1
 801af60:	0801afc9 	.word	0x0801afc9
 801af64:	0801b05b 	.word	0x0801b05b
 801af68:	0801af19 	.word	0x0801af19
 801af6c:	0801af19 	.word	0x0801af19
 801af70:	0801b0c3 	.word	0x0801b0c3
 801af74:	0801af19 	.word	0x0801af19
 801af78:	0801afc9 	.word	0x0801afc9
 801af7c:	0801af19 	.word	0x0801af19
 801af80:	0801af19 	.word	0x0801af19
 801af84:	0801b063 	.word	0x0801b063
 801af88:	682b      	ldr	r3, [r5, #0]
 801af8a:	1d1a      	adds	r2, r3, #4
 801af8c:	681b      	ldr	r3, [r3, #0]
 801af8e:	602a      	str	r2, [r5, #0]
 801af90:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801af94:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801af98:	2301      	movs	r3, #1
 801af9a:	e09f      	b.n	801b0dc <_printf_i+0x1ec>
 801af9c:	6820      	ldr	r0, [r4, #0]
 801af9e:	682b      	ldr	r3, [r5, #0]
 801afa0:	0607      	lsls	r7, r0, #24
 801afa2:	f103 0104 	add.w	r1, r3, #4
 801afa6:	6029      	str	r1, [r5, #0]
 801afa8:	d501      	bpl.n	801afae <_printf_i+0xbe>
 801afaa:	681e      	ldr	r6, [r3, #0]
 801afac:	e003      	b.n	801afb6 <_printf_i+0xc6>
 801afae:	0646      	lsls	r6, r0, #25
 801afb0:	d5fb      	bpl.n	801afaa <_printf_i+0xba>
 801afb2:	f9b3 6000 	ldrsh.w	r6, [r3]
 801afb6:	2e00      	cmp	r6, #0
 801afb8:	da03      	bge.n	801afc2 <_printf_i+0xd2>
 801afba:	232d      	movs	r3, #45	; 0x2d
 801afbc:	4276      	negs	r6, r6
 801afbe:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801afc2:	485a      	ldr	r0, [pc, #360]	; (801b12c <_printf_i+0x23c>)
 801afc4:	230a      	movs	r3, #10
 801afc6:	e012      	b.n	801afee <_printf_i+0xfe>
 801afc8:	682b      	ldr	r3, [r5, #0]
 801afca:	6820      	ldr	r0, [r4, #0]
 801afcc:	1d19      	adds	r1, r3, #4
 801afce:	6029      	str	r1, [r5, #0]
 801afd0:	0605      	lsls	r5, r0, #24
 801afd2:	d501      	bpl.n	801afd8 <_printf_i+0xe8>
 801afd4:	681e      	ldr	r6, [r3, #0]
 801afd6:	e002      	b.n	801afde <_printf_i+0xee>
 801afd8:	0641      	lsls	r1, r0, #25
 801afda:	d5fb      	bpl.n	801afd4 <_printf_i+0xe4>
 801afdc:	881e      	ldrh	r6, [r3, #0]
 801afde:	4853      	ldr	r0, [pc, #332]	; (801b12c <_printf_i+0x23c>)
 801afe0:	2f6f      	cmp	r7, #111	; 0x6f
 801afe2:	bf0c      	ite	eq
 801afe4:	2308      	moveq	r3, #8
 801afe6:	230a      	movne	r3, #10
 801afe8:	2100      	movs	r1, #0
 801afea:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801afee:	6865      	ldr	r5, [r4, #4]
 801aff0:	60a5      	str	r5, [r4, #8]
 801aff2:	2d00      	cmp	r5, #0
 801aff4:	bfa2      	ittt	ge
 801aff6:	6821      	ldrge	r1, [r4, #0]
 801aff8:	f021 0104 	bicge.w	r1, r1, #4
 801affc:	6021      	strge	r1, [r4, #0]
 801affe:	b90e      	cbnz	r6, 801b004 <_printf_i+0x114>
 801b000:	2d00      	cmp	r5, #0
 801b002:	d04b      	beq.n	801b09c <_printf_i+0x1ac>
 801b004:	4615      	mov	r5, r2
 801b006:	fbb6 f1f3 	udiv	r1, r6, r3
 801b00a:	fb03 6711 	mls	r7, r3, r1, r6
 801b00e:	5dc7      	ldrb	r7, [r0, r7]
 801b010:	f805 7d01 	strb.w	r7, [r5, #-1]!
 801b014:	4637      	mov	r7, r6
 801b016:	42bb      	cmp	r3, r7
 801b018:	460e      	mov	r6, r1
 801b01a:	d9f4      	bls.n	801b006 <_printf_i+0x116>
 801b01c:	2b08      	cmp	r3, #8
 801b01e:	d10b      	bne.n	801b038 <_printf_i+0x148>
 801b020:	6823      	ldr	r3, [r4, #0]
 801b022:	07de      	lsls	r6, r3, #31
 801b024:	d508      	bpl.n	801b038 <_printf_i+0x148>
 801b026:	6923      	ldr	r3, [r4, #16]
 801b028:	6861      	ldr	r1, [r4, #4]
 801b02a:	4299      	cmp	r1, r3
 801b02c:	bfde      	ittt	le
 801b02e:	2330      	movle	r3, #48	; 0x30
 801b030:	f805 3c01 	strble.w	r3, [r5, #-1]
 801b034:	f105 35ff 	addle.w	r5, r5, #4294967295
 801b038:	1b52      	subs	r2, r2, r5
 801b03a:	6122      	str	r2, [r4, #16]
 801b03c:	f8cd a000 	str.w	sl, [sp]
 801b040:	464b      	mov	r3, r9
 801b042:	aa03      	add	r2, sp, #12
 801b044:	4621      	mov	r1, r4
 801b046:	4640      	mov	r0, r8
 801b048:	f7ff fee4 	bl	801ae14 <_printf_common>
 801b04c:	3001      	adds	r0, #1
 801b04e:	d14a      	bne.n	801b0e6 <_printf_i+0x1f6>
 801b050:	f04f 30ff 	mov.w	r0, #4294967295
 801b054:	b004      	add	sp, #16
 801b056:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801b05a:	6823      	ldr	r3, [r4, #0]
 801b05c:	f043 0320 	orr.w	r3, r3, #32
 801b060:	6023      	str	r3, [r4, #0]
 801b062:	4833      	ldr	r0, [pc, #204]	; (801b130 <_printf_i+0x240>)
 801b064:	2778      	movs	r7, #120	; 0x78
 801b066:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 801b06a:	6823      	ldr	r3, [r4, #0]
 801b06c:	6829      	ldr	r1, [r5, #0]
 801b06e:	061f      	lsls	r7, r3, #24
 801b070:	f851 6b04 	ldr.w	r6, [r1], #4
 801b074:	d402      	bmi.n	801b07c <_printf_i+0x18c>
 801b076:	065f      	lsls	r7, r3, #25
 801b078:	bf48      	it	mi
 801b07a:	b2b6      	uxthmi	r6, r6
 801b07c:	07df      	lsls	r7, r3, #31
 801b07e:	bf48      	it	mi
 801b080:	f043 0320 	orrmi.w	r3, r3, #32
 801b084:	6029      	str	r1, [r5, #0]
 801b086:	bf48      	it	mi
 801b088:	6023      	strmi	r3, [r4, #0]
 801b08a:	b91e      	cbnz	r6, 801b094 <_printf_i+0x1a4>
 801b08c:	6823      	ldr	r3, [r4, #0]
 801b08e:	f023 0320 	bic.w	r3, r3, #32
 801b092:	6023      	str	r3, [r4, #0]
 801b094:	2310      	movs	r3, #16
 801b096:	e7a7      	b.n	801afe8 <_printf_i+0xf8>
 801b098:	4824      	ldr	r0, [pc, #144]	; (801b12c <_printf_i+0x23c>)
 801b09a:	e7e4      	b.n	801b066 <_printf_i+0x176>
 801b09c:	4615      	mov	r5, r2
 801b09e:	e7bd      	b.n	801b01c <_printf_i+0x12c>
 801b0a0:	682b      	ldr	r3, [r5, #0]
 801b0a2:	6826      	ldr	r6, [r4, #0]
 801b0a4:	6961      	ldr	r1, [r4, #20]
 801b0a6:	1d18      	adds	r0, r3, #4
 801b0a8:	6028      	str	r0, [r5, #0]
 801b0aa:	0635      	lsls	r5, r6, #24
 801b0ac:	681b      	ldr	r3, [r3, #0]
 801b0ae:	d501      	bpl.n	801b0b4 <_printf_i+0x1c4>
 801b0b0:	6019      	str	r1, [r3, #0]
 801b0b2:	e002      	b.n	801b0ba <_printf_i+0x1ca>
 801b0b4:	0670      	lsls	r0, r6, #25
 801b0b6:	d5fb      	bpl.n	801b0b0 <_printf_i+0x1c0>
 801b0b8:	8019      	strh	r1, [r3, #0]
 801b0ba:	2300      	movs	r3, #0
 801b0bc:	6123      	str	r3, [r4, #16]
 801b0be:	4615      	mov	r5, r2
 801b0c0:	e7bc      	b.n	801b03c <_printf_i+0x14c>
 801b0c2:	682b      	ldr	r3, [r5, #0]
 801b0c4:	1d1a      	adds	r2, r3, #4
 801b0c6:	602a      	str	r2, [r5, #0]
 801b0c8:	681d      	ldr	r5, [r3, #0]
 801b0ca:	6862      	ldr	r2, [r4, #4]
 801b0cc:	2100      	movs	r1, #0
 801b0ce:	4628      	mov	r0, r5
 801b0d0:	f7e6 ff46 	bl	8001f60 <memchr>
 801b0d4:	b108      	cbz	r0, 801b0da <_printf_i+0x1ea>
 801b0d6:	1b40      	subs	r0, r0, r5
 801b0d8:	6060      	str	r0, [r4, #4]
 801b0da:	6863      	ldr	r3, [r4, #4]
 801b0dc:	6123      	str	r3, [r4, #16]
 801b0de:	2300      	movs	r3, #0
 801b0e0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801b0e4:	e7aa      	b.n	801b03c <_printf_i+0x14c>
 801b0e6:	6923      	ldr	r3, [r4, #16]
 801b0e8:	462a      	mov	r2, r5
 801b0ea:	4649      	mov	r1, r9
 801b0ec:	4640      	mov	r0, r8
 801b0ee:	47d0      	blx	sl
 801b0f0:	3001      	adds	r0, #1
 801b0f2:	d0ad      	beq.n	801b050 <_printf_i+0x160>
 801b0f4:	6823      	ldr	r3, [r4, #0]
 801b0f6:	079b      	lsls	r3, r3, #30
 801b0f8:	d413      	bmi.n	801b122 <_printf_i+0x232>
 801b0fa:	68e0      	ldr	r0, [r4, #12]
 801b0fc:	9b03      	ldr	r3, [sp, #12]
 801b0fe:	4298      	cmp	r0, r3
 801b100:	bfb8      	it	lt
 801b102:	4618      	movlt	r0, r3
 801b104:	e7a6      	b.n	801b054 <_printf_i+0x164>
 801b106:	2301      	movs	r3, #1
 801b108:	4632      	mov	r2, r6
 801b10a:	4649      	mov	r1, r9
 801b10c:	4640      	mov	r0, r8
 801b10e:	47d0      	blx	sl
 801b110:	3001      	adds	r0, #1
 801b112:	d09d      	beq.n	801b050 <_printf_i+0x160>
 801b114:	3501      	adds	r5, #1
 801b116:	68e3      	ldr	r3, [r4, #12]
 801b118:	9903      	ldr	r1, [sp, #12]
 801b11a:	1a5b      	subs	r3, r3, r1
 801b11c:	42ab      	cmp	r3, r5
 801b11e:	dcf2      	bgt.n	801b106 <_printf_i+0x216>
 801b120:	e7eb      	b.n	801b0fa <_printf_i+0x20a>
 801b122:	2500      	movs	r5, #0
 801b124:	f104 0619 	add.w	r6, r4, #25
 801b128:	e7f5      	b.n	801b116 <_printf_i+0x226>
 801b12a:	bf00      	nop
 801b12c:	08020fb0 	.word	0x08020fb0
 801b130:	08020fc1 	.word	0x08020fc1

0801b134 <std>:
 801b134:	2300      	movs	r3, #0
 801b136:	b510      	push	{r4, lr}
 801b138:	4604      	mov	r4, r0
 801b13a:	e9c0 3300 	strd	r3, r3, [r0]
 801b13e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801b142:	6083      	str	r3, [r0, #8]
 801b144:	8181      	strh	r1, [r0, #12]
 801b146:	6643      	str	r3, [r0, #100]	; 0x64
 801b148:	81c2      	strh	r2, [r0, #14]
 801b14a:	6183      	str	r3, [r0, #24]
 801b14c:	4619      	mov	r1, r3
 801b14e:	2208      	movs	r2, #8
 801b150:	305c      	adds	r0, #92	; 0x5c
 801b152:	f000 fa41 	bl	801b5d8 <memset>
 801b156:	4b0d      	ldr	r3, [pc, #52]	; (801b18c <std+0x58>)
 801b158:	6263      	str	r3, [r4, #36]	; 0x24
 801b15a:	4b0d      	ldr	r3, [pc, #52]	; (801b190 <std+0x5c>)
 801b15c:	62a3      	str	r3, [r4, #40]	; 0x28
 801b15e:	4b0d      	ldr	r3, [pc, #52]	; (801b194 <std+0x60>)
 801b160:	62e3      	str	r3, [r4, #44]	; 0x2c
 801b162:	4b0d      	ldr	r3, [pc, #52]	; (801b198 <std+0x64>)
 801b164:	6323      	str	r3, [r4, #48]	; 0x30
 801b166:	4b0d      	ldr	r3, [pc, #52]	; (801b19c <std+0x68>)
 801b168:	6224      	str	r4, [r4, #32]
 801b16a:	429c      	cmp	r4, r3
 801b16c:	d006      	beq.n	801b17c <std+0x48>
 801b16e:	f103 0268 	add.w	r2, r3, #104	; 0x68
 801b172:	4294      	cmp	r4, r2
 801b174:	d002      	beq.n	801b17c <std+0x48>
 801b176:	33d0      	adds	r3, #208	; 0xd0
 801b178:	429c      	cmp	r4, r3
 801b17a:	d105      	bne.n	801b188 <std+0x54>
 801b17c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801b180:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801b184:	f000 bab0 	b.w	801b6e8 <__retarget_lock_init_recursive>
 801b188:	bd10      	pop	{r4, pc}
 801b18a:	bf00      	nop
 801b18c:	0801b3d5 	.word	0x0801b3d5
 801b190:	0801b3f7 	.word	0x0801b3f7
 801b194:	0801b42f 	.word	0x0801b42f
 801b198:	0801b453 	.word	0x0801b453
 801b19c:	20007318 	.word	0x20007318

0801b1a0 <stdio_exit_handler>:
 801b1a0:	4a02      	ldr	r2, [pc, #8]	; (801b1ac <stdio_exit_handler+0xc>)
 801b1a2:	4903      	ldr	r1, [pc, #12]	; (801b1b0 <stdio_exit_handler+0x10>)
 801b1a4:	4803      	ldr	r0, [pc, #12]	; (801b1b4 <stdio_exit_handler+0x14>)
 801b1a6:	f000 b869 	b.w	801b27c <_fwalk_sglue>
 801b1aa:	bf00      	nop
 801b1ac:	20000174 	.word	0x20000174
 801b1b0:	0801d26d 	.word	0x0801d26d
 801b1b4:	20000180 	.word	0x20000180

0801b1b8 <cleanup_stdio>:
 801b1b8:	6841      	ldr	r1, [r0, #4]
 801b1ba:	4b0c      	ldr	r3, [pc, #48]	; (801b1ec <cleanup_stdio+0x34>)
 801b1bc:	4299      	cmp	r1, r3
 801b1be:	b510      	push	{r4, lr}
 801b1c0:	4604      	mov	r4, r0
 801b1c2:	d001      	beq.n	801b1c8 <cleanup_stdio+0x10>
 801b1c4:	f002 f852 	bl	801d26c <_fflush_r>
 801b1c8:	68a1      	ldr	r1, [r4, #8]
 801b1ca:	4b09      	ldr	r3, [pc, #36]	; (801b1f0 <cleanup_stdio+0x38>)
 801b1cc:	4299      	cmp	r1, r3
 801b1ce:	d002      	beq.n	801b1d6 <cleanup_stdio+0x1e>
 801b1d0:	4620      	mov	r0, r4
 801b1d2:	f002 f84b 	bl	801d26c <_fflush_r>
 801b1d6:	68e1      	ldr	r1, [r4, #12]
 801b1d8:	4b06      	ldr	r3, [pc, #24]	; (801b1f4 <cleanup_stdio+0x3c>)
 801b1da:	4299      	cmp	r1, r3
 801b1dc:	d004      	beq.n	801b1e8 <cleanup_stdio+0x30>
 801b1de:	4620      	mov	r0, r4
 801b1e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801b1e4:	f002 b842 	b.w	801d26c <_fflush_r>
 801b1e8:	bd10      	pop	{r4, pc}
 801b1ea:	bf00      	nop
 801b1ec:	20007318 	.word	0x20007318
 801b1f0:	20007380 	.word	0x20007380
 801b1f4:	200073e8 	.word	0x200073e8

0801b1f8 <global_stdio_init.part.0>:
 801b1f8:	b510      	push	{r4, lr}
 801b1fa:	4b0b      	ldr	r3, [pc, #44]	; (801b228 <global_stdio_init.part.0+0x30>)
 801b1fc:	4c0b      	ldr	r4, [pc, #44]	; (801b22c <global_stdio_init.part.0+0x34>)
 801b1fe:	4a0c      	ldr	r2, [pc, #48]	; (801b230 <global_stdio_init.part.0+0x38>)
 801b200:	601a      	str	r2, [r3, #0]
 801b202:	4620      	mov	r0, r4
 801b204:	2200      	movs	r2, #0
 801b206:	2104      	movs	r1, #4
 801b208:	f7ff ff94 	bl	801b134 <std>
 801b20c:	f104 0068 	add.w	r0, r4, #104	; 0x68
 801b210:	2201      	movs	r2, #1
 801b212:	2109      	movs	r1, #9
 801b214:	f7ff ff8e 	bl	801b134 <std>
 801b218:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 801b21c:	2202      	movs	r2, #2
 801b21e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801b222:	2112      	movs	r1, #18
 801b224:	f7ff bf86 	b.w	801b134 <std>
 801b228:	20007450 	.word	0x20007450
 801b22c:	20007318 	.word	0x20007318
 801b230:	0801b1a1 	.word	0x0801b1a1

0801b234 <__sfp_lock_acquire>:
 801b234:	4801      	ldr	r0, [pc, #4]	; (801b23c <__sfp_lock_acquire+0x8>)
 801b236:	f000 ba58 	b.w	801b6ea <__retarget_lock_acquire_recursive>
 801b23a:	bf00      	nop
 801b23c:	20007459 	.word	0x20007459

0801b240 <__sfp_lock_release>:
 801b240:	4801      	ldr	r0, [pc, #4]	; (801b248 <__sfp_lock_release+0x8>)
 801b242:	f000 ba53 	b.w	801b6ec <__retarget_lock_release_recursive>
 801b246:	bf00      	nop
 801b248:	20007459 	.word	0x20007459

0801b24c <__sinit>:
 801b24c:	b510      	push	{r4, lr}
 801b24e:	4604      	mov	r4, r0
 801b250:	f7ff fff0 	bl	801b234 <__sfp_lock_acquire>
 801b254:	6a23      	ldr	r3, [r4, #32]
 801b256:	b11b      	cbz	r3, 801b260 <__sinit+0x14>
 801b258:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801b25c:	f7ff bff0 	b.w	801b240 <__sfp_lock_release>
 801b260:	4b04      	ldr	r3, [pc, #16]	; (801b274 <__sinit+0x28>)
 801b262:	6223      	str	r3, [r4, #32]
 801b264:	4b04      	ldr	r3, [pc, #16]	; (801b278 <__sinit+0x2c>)
 801b266:	681b      	ldr	r3, [r3, #0]
 801b268:	2b00      	cmp	r3, #0
 801b26a:	d1f5      	bne.n	801b258 <__sinit+0xc>
 801b26c:	f7ff ffc4 	bl	801b1f8 <global_stdio_init.part.0>
 801b270:	e7f2      	b.n	801b258 <__sinit+0xc>
 801b272:	bf00      	nop
 801b274:	0801b1b9 	.word	0x0801b1b9
 801b278:	20007450 	.word	0x20007450

0801b27c <_fwalk_sglue>:
 801b27c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801b280:	4607      	mov	r7, r0
 801b282:	4688      	mov	r8, r1
 801b284:	4614      	mov	r4, r2
 801b286:	2600      	movs	r6, #0
 801b288:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801b28c:	f1b9 0901 	subs.w	r9, r9, #1
 801b290:	d505      	bpl.n	801b29e <_fwalk_sglue+0x22>
 801b292:	6824      	ldr	r4, [r4, #0]
 801b294:	2c00      	cmp	r4, #0
 801b296:	d1f7      	bne.n	801b288 <_fwalk_sglue+0xc>
 801b298:	4630      	mov	r0, r6
 801b29a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801b29e:	89ab      	ldrh	r3, [r5, #12]
 801b2a0:	2b01      	cmp	r3, #1
 801b2a2:	d907      	bls.n	801b2b4 <_fwalk_sglue+0x38>
 801b2a4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801b2a8:	3301      	adds	r3, #1
 801b2aa:	d003      	beq.n	801b2b4 <_fwalk_sglue+0x38>
 801b2ac:	4629      	mov	r1, r5
 801b2ae:	4638      	mov	r0, r7
 801b2b0:	47c0      	blx	r8
 801b2b2:	4306      	orrs	r6, r0
 801b2b4:	3568      	adds	r5, #104	; 0x68
 801b2b6:	e7e9      	b.n	801b28c <_fwalk_sglue+0x10>

0801b2b8 <iprintf>:
 801b2b8:	b40f      	push	{r0, r1, r2, r3}
 801b2ba:	b507      	push	{r0, r1, r2, lr}
 801b2bc:	4906      	ldr	r1, [pc, #24]	; (801b2d8 <iprintf+0x20>)
 801b2be:	ab04      	add	r3, sp, #16
 801b2c0:	6808      	ldr	r0, [r1, #0]
 801b2c2:	f853 2b04 	ldr.w	r2, [r3], #4
 801b2c6:	6881      	ldr	r1, [r0, #8]
 801b2c8:	9301      	str	r3, [sp, #4]
 801b2ca:	f001 fe2f 	bl	801cf2c <_vfiprintf_r>
 801b2ce:	b003      	add	sp, #12
 801b2d0:	f85d eb04 	ldr.w	lr, [sp], #4
 801b2d4:	b004      	add	sp, #16
 801b2d6:	4770      	bx	lr
 801b2d8:	200001cc 	.word	0x200001cc

0801b2dc <_puts_r>:
 801b2dc:	6a03      	ldr	r3, [r0, #32]
 801b2de:	b570      	push	{r4, r5, r6, lr}
 801b2e0:	6884      	ldr	r4, [r0, #8]
 801b2e2:	4605      	mov	r5, r0
 801b2e4:	460e      	mov	r6, r1
 801b2e6:	b90b      	cbnz	r3, 801b2ec <_puts_r+0x10>
 801b2e8:	f7ff ffb0 	bl	801b24c <__sinit>
 801b2ec:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801b2ee:	07db      	lsls	r3, r3, #31
 801b2f0:	d405      	bmi.n	801b2fe <_puts_r+0x22>
 801b2f2:	89a3      	ldrh	r3, [r4, #12]
 801b2f4:	0598      	lsls	r0, r3, #22
 801b2f6:	d402      	bmi.n	801b2fe <_puts_r+0x22>
 801b2f8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801b2fa:	f000 f9f6 	bl	801b6ea <__retarget_lock_acquire_recursive>
 801b2fe:	89a3      	ldrh	r3, [r4, #12]
 801b300:	0719      	lsls	r1, r3, #28
 801b302:	d513      	bpl.n	801b32c <_puts_r+0x50>
 801b304:	6923      	ldr	r3, [r4, #16]
 801b306:	b18b      	cbz	r3, 801b32c <_puts_r+0x50>
 801b308:	3e01      	subs	r6, #1
 801b30a:	68a3      	ldr	r3, [r4, #8]
 801b30c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 801b310:	3b01      	subs	r3, #1
 801b312:	60a3      	str	r3, [r4, #8]
 801b314:	b9e9      	cbnz	r1, 801b352 <_puts_r+0x76>
 801b316:	2b00      	cmp	r3, #0
 801b318:	da2e      	bge.n	801b378 <_puts_r+0x9c>
 801b31a:	4622      	mov	r2, r4
 801b31c:	210a      	movs	r1, #10
 801b31e:	4628      	mov	r0, r5
 801b320:	f000 f89b 	bl	801b45a <__swbuf_r>
 801b324:	3001      	adds	r0, #1
 801b326:	d007      	beq.n	801b338 <_puts_r+0x5c>
 801b328:	250a      	movs	r5, #10
 801b32a:	e007      	b.n	801b33c <_puts_r+0x60>
 801b32c:	4621      	mov	r1, r4
 801b32e:	4628      	mov	r0, r5
 801b330:	f000 f8d0 	bl	801b4d4 <__swsetup_r>
 801b334:	2800      	cmp	r0, #0
 801b336:	d0e7      	beq.n	801b308 <_puts_r+0x2c>
 801b338:	f04f 35ff 	mov.w	r5, #4294967295
 801b33c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801b33e:	07da      	lsls	r2, r3, #31
 801b340:	d405      	bmi.n	801b34e <_puts_r+0x72>
 801b342:	89a3      	ldrh	r3, [r4, #12]
 801b344:	059b      	lsls	r3, r3, #22
 801b346:	d402      	bmi.n	801b34e <_puts_r+0x72>
 801b348:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801b34a:	f000 f9cf 	bl	801b6ec <__retarget_lock_release_recursive>
 801b34e:	4628      	mov	r0, r5
 801b350:	bd70      	pop	{r4, r5, r6, pc}
 801b352:	2b00      	cmp	r3, #0
 801b354:	da04      	bge.n	801b360 <_puts_r+0x84>
 801b356:	69a2      	ldr	r2, [r4, #24]
 801b358:	429a      	cmp	r2, r3
 801b35a:	dc06      	bgt.n	801b36a <_puts_r+0x8e>
 801b35c:	290a      	cmp	r1, #10
 801b35e:	d004      	beq.n	801b36a <_puts_r+0x8e>
 801b360:	6823      	ldr	r3, [r4, #0]
 801b362:	1c5a      	adds	r2, r3, #1
 801b364:	6022      	str	r2, [r4, #0]
 801b366:	7019      	strb	r1, [r3, #0]
 801b368:	e7cf      	b.n	801b30a <_puts_r+0x2e>
 801b36a:	4622      	mov	r2, r4
 801b36c:	4628      	mov	r0, r5
 801b36e:	f000 f874 	bl	801b45a <__swbuf_r>
 801b372:	3001      	adds	r0, #1
 801b374:	d1c9      	bne.n	801b30a <_puts_r+0x2e>
 801b376:	e7df      	b.n	801b338 <_puts_r+0x5c>
 801b378:	6823      	ldr	r3, [r4, #0]
 801b37a:	250a      	movs	r5, #10
 801b37c:	1c5a      	adds	r2, r3, #1
 801b37e:	6022      	str	r2, [r4, #0]
 801b380:	701d      	strb	r5, [r3, #0]
 801b382:	e7db      	b.n	801b33c <_puts_r+0x60>

0801b384 <puts>:
 801b384:	4b02      	ldr	r3, [pc, #8]	; (801b390 <puts+0xc>)
 801b386:	4601      	mov	r1, r0
 801b388:	6818      	ldr	r0, [r3, #0]
 801b38a:	f7ff bfa7 	b.w	801b2dc <_puts_r>
 801b38e:	bf00      	nop
 801b390:	200001cc 	.word	0x200001cc

0801b394 <siprintf>:
 801b394:	b40e      	push	{r1, r2, r3}
 801b396:	b500      	push	{lr}
 801b398:	b09c      	sub	sp, #112	; 0x70
 801b39a:	ab1d      	add	r3, sp, #116	; 0x74
 801b39c:	9002      	str	r0, [sp, #8]
 801b39e:	9006      	str	r0, [sp, #24]
 801b3a0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 801b3a4:	4809      	ldr	r0, [pc, #36]	; (801b3cc <siprintf+0x38>)
 801b3a6:	9107      	str	r1, [sp, #28]
 801b3a8:	9104      	str	r1, [sp, #16]
 801b3aa:	4909      	ldr	r1, [pc, #36]	; (801b3d0 <siprintf+0x3c>)
 801b3ac:	f853 2b04 	ldr.w	r2, [r3], #4
 801b3b0:	9105      	str	r1, [sp, #20]
 801b3b2:	6800      	ldr	r0, [r0, #0]
 801b3b4:	9301      	str	r3, [sp, #4]
 801b3b6:	a902      	add	r1, sp, #8
 801b3b8:	f001 fc90 	bl	801ccdc <_svfiprintf_r>
 801b3bc:	9b02      	ldr	r3, [sp, #8]
 801b3be:	2200      	movs	r2, #0
 801b3c0:	701a      	strb	r2, [r3, #0]
 801b3c2:	b01c      	add	sp, #112	; 0x70
 801b3c4:	f85d eb04 	ldr.w	lr, [sp], #4
 801b3c8:	b003      	add	sp, #12
 801b3ca:	4770      	bx	lr
 801b3cc:	200001cc 	.word	0x200001cc
 801b3d0:	ffff0208 	.word	0xffff0208

0801b3d4 <__sread>:
 801b3d4:	b510      	push	{r4, lr}
 801b3d6:	460c      	mov	r4, r1
 801b3d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801b3dc:	f000 f93c 	bl	801b658 <_read_r>
 801b3e0:	2800      	cmp	r0, #0
 801b3e2:	bfab      	itete	ge
 801b3e4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801b3e6:	89a3      	ldrhlt	r3, [r4, #12]
 801b3e8:	181b      	addge	r3, r3, r0
 801b3ea:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801b3ee:	bfac      	ite	ge
 801b3f0:	6563      	strge	r3, [r4, #84]	; 0x54
 801b3f2:	81a3      	strhlt	r3, [r4, #12]
 801b3f4:	bd10      	pop	{r4, pc}

0801b3f6 <__swrite>:
 801b3f6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b3fa:	461f      	mov	r7, r3
 801b3fc:	898b      	ldrh	r3, [r1, #12]
 801b3fe:	05db      	lsls	r3, r3, #23
 801b400:	4605      	mov	r5, r0
 801b402:	460c      	mov	r4, r1
 801b404:	4616      	mov	r6, r2
 801b406:	d505      	bpl.n	801b414 <__swrite+0x1e>
 801b408:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801b40c:	2302      	movs	r3, #2
 801b40e:	2200      	movs	r2, #0
 801b410:	f000 f910 	bl	801b634 <_lseek_r>
 801b414:	89a3      	ldrh	r3, [r4, #12]
 801b416:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801b41a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801b41e:	81a3      	strh	r3, [r4, #12]
 801b420:	4632      	mov	r2, r6
 801b422:	463b      	mov	r3, r7
 801b424:	4628      	mov	r0, r5
 801b426:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801b42a:	f000 b927 	b.w	801b67c <_write_r>

0801b42e <__sseek>:
 801b42e:	b510      	push	{r4, lr}
 801b430:	460c      	mov	r4, r1
 801b432:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801b436:	f000 f8fd 	bl	801b634 <_lseek_r>
 801b43a:	1c43      	adds	r3, r0, #1
 801b43c:	89a3      	ldrh	r3, [r4, #12]
 801b43e:	bf15      	itete	ne
 801b440:	6560      	strne	r0, [r4, #84]	; 0x54
 801b442:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801b446:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801b44a:	81a3      	strheq	r3, [r4, #12]
 801b44c:	bf18      	it	ne
 801b44e:	81a3      	strhne	r3, [r4, #12]
 801b450:	bd10      	pop	{r4, pc}

0801b452 <__sclose>:
 801b452:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801b456:	f000 b8dd 	b.w	801b614 <_close_r>

0801b45a <__swbuf_r>:
 801b45a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b45c:	460e      	mov	r6, r1
 801b45e:	4614      	mov	r4, r2
 801b460:	4605      	mov	r5, r0
 801b462:	b118      	cbz	r0, 801b46c <__swbuf_r+0x12>
 801b464:	6a03      	ldr	r3, [r0, #32]
 801b466:	b90b      	cbnz	r3, 801b46c <__swbuf_r+0x12>
 801b468:	f7ff fef0 	bl	801b24c <__sinit>
 801b46c:	69a3      	ldr	r3, [r4, #24]
 801b46e:	60a3      	str	r3, [r4, #8]
 801b470:	89a3      	ldrh	r3, [r4, #12]
 801b472:	071a      	lsls	r2, r3, #28
 801b474:	d525      	bpl.n	801b4c2 <__swbuf_r+0x68>
 801b476:	6923      	ldr	r3, [r4, #16]
 801b478:	b31b      	cbz	r3, 801b4c2 <__swbuf_r+0x68>
 801b47a:	6823      	ldr	r3, [r4, #0]
 801b47c:	6922      	ldr	r2, [r4, #16]
 801b47e:	1a98      	subs	r0, r3, r2
 801b480:	6963      	ldr	r3, [r4, #20]
 801b482:	b2f6      	uxtb	r6, r6
 801b484:	4283      	cmp	r3, r0
 801b486:	4637      	mov	r7, r6
 801b488:	dc04      	bgt.n	801b494 <__swbuf_r+0x3a>
 801b48a:	4621      	mov	r1, r4
 801b48c:	4628      	mov	r0, r5
 801b48e:	f001 feed 	bl	801d26c <_fflush_r>
 801b492:	b9e0      	cbnz	r0, 801b4ce <__swbuf_r+0x74>
 801b494:	68a3      	ldr	r3, [r4, #8]
 801b496:	3b01      	subs	r3, #1
 801b498:	60a3      	str	r3, [r4, #8]
 801b49a:	6823      	ldr	r3, [r4, #0]
 801b49c:	1c5a      	adds	r2, r3, #1
 801b49e:	6022      	str	r2, [r4, #0]
 801b4a0:	701e      	strb	r6, [r3, #0]
 801b4a2:	6962      	ldr	r2, [r4, #20]
 801b4a4:	1c43      	adds	r3, r0, #1
 801b4a6:	429a      	cmp	r2, r3
 801b4a8:	d004      	beq.n	801b4b4 <__swbuf_r+0x5a>
 801b4aa:	89a3      	ldrh	r3, [r4, #12]
 801b4ac:	07db      	lsls	r3, r3, #31
 801b4ae:	d506      	bpl.n	801b4be <__swbuf_r+0x64>
 801b4b0:	2e0a      	cmp	r6, #10
 801b4b2:	d104      	bne.n	801b4be <__swbuf_r+0x64>
 801b4b4:	4621      	mov	r1, r4
 801b4b6:	4628      	mov	r0, r5
 801b4b8:	f001 fed8 	bl	801d26c <_fflush_r>
 801b4bc:	b938      	cbnz	r0, 801b4ce <__swbuf_r+0x74>
 801b4be:	4638      	mov	r0, r7
 801b4c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801b4c2:	4621      	mov	r1, r4
 801b4c4:	4628      	mov	r0, r5
 801b4c6:	f000 f805 	bl	801b4d4 <__swsetup_r>
 801b4ca:	2800      	cmp	r0, #0
 801b4cc:	d0d5      	beq.n	801b47a <__swbuf_r+0x20>
 801b4ce:	f04f 37ff 	mov.w	r7, #4294967295
 801b4d2:	e7f4      	b.n	801b4be <__swbuf_r+0x64>

0801b4d4 <__swsetup_r>:
 801b4d4:	b538      	push	{r3, r4, r5, lr}
 801b4d6:	4b2a      	ldr	r3, [pc, #168]	; (801b580 <__swsetup_r+0xac>)
 801b4d8:	4605      	mov	r5, r0
 801b4da:	6818      	ldr	r0, [r3, #0]
 801b4dc:	460c      	mov	r4, r1
 801b4de:	b118      	cbz	r0, 801b4e8 <__swsetup_r+0x14>
 801b4e0:	6a03      	ldr	r3, [r0, #32]
 801b4e2:	b90b      	cbnz	r3, 801b4e8 <__swsetup_r+0x14>
 801b4e4:	f7ff feb2 	bl	801b24c <__sinit>
 801b4e8:	89a3      	ldrh	r3, [r4, #12]
 801b4ea:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801b4ee:	0718      	lsls	r0, r3, #28
 801b4f0:	d422      	bmi.n	801b538 <__swsetup_r+0x64>
 801b4f2:	06d9      	lsls	r1, r3, #27
 801b4f4:	d407      	bmi.n	801b506 <__swsetup_r+0x32>
 801b4f6:	2309      	movs	r3, #9
 801b4f8:	602b      	str	r3, [r5, #0]
 801b4fa:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 801b4fe:	81a3      	strh	r3, [r4, #12]
 801b500:	f04f 30ff 	mov.w	r0, #4294967295
 801b504:	e034      	b.n	801b570 <__swsetup_r+0x9c>
 801b506:	0758      	lsls	r0, r3, #29
 801b508:	d512      	bpl.n	801b530 <__swsetup_r+0x5c>
 801b50a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801b50c:	b141      	cbz	r1, 801b520 <__swsetup_r+0x4c>
 801b50e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801b512:	4299      	cmp	r1, r3
 801b514:	d002      	beq.n	801b51c <__swsetup_r+0x48>
 801b516:	4628      	mov	r0, r5
 801b518:	f000 ff0a 	bl	801c330 <_free_r>
 801b51c:	2300      	movs	r3, #0
 801b51e:	6363      	str	r3, [r4, #52]	; 0x34
 801b520:	89a3      	ldrh	r3, [r4, #12]
 801b522:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801b526:	81a3      	strh	r3, [r4, #12]
 801b528:	2300      	movs	r3, #0
 801b52a:	6063      	str	r3, [r4, #4]
 801b52c:	6923      	ldr	r3, [r4, #16]
 801b52e:	6023      	str	r3, [r4, #0]
 801b530:	89a3      	ldrh	r3, [r4, #12]
 801b532:	f043 0308 	orr.w	r3, r3, #8
 801b536:	81a3      	strh	r3, [r4, #12]
 801b538:	6923      	ldr	r3, [r4, #16]
 801b53a:	b94b      	cbnz	r3, 801b550 <__swsetup_r+0x7c>
 801b53c:	89a3      	ldrh	r3, [r4, #12]
 801b53e:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801b542:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801b546:	d003      	beq.n	801b550 <__swsetup_r+0x7c>
 801b548:	4621      	mov	r1, r4
 801b54a:	4628      	mov	r0, r5
 801b54c:	f001 feee 	bl	801d32c <__smakebuf_r>
 801b550:	89a0      	ldrh	r0, [r4, #12]
 801b552:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801b556:	f010 0301 	ands.w	r3, r0, #1
 801b55a:	d00a      	beq.n	801b572 <__swsetup_r+0x9e>
 801b55c:	2300      	movs	r3, #0
 801b55e:	60a3      	str	r3, [r4, #8]
 801b560:	6963      	ldr	r3, [r4, #20]
 801b562:	425b      	negs	r3, r3
 801b564:	61a3      	str	r3, [r4, #24]
 801b566:	6923      	ldr	r3, [r4, #16]
 801b568:	b943      	cbnz	r3, 801b57c <__swsetup_r+0xa8>
 801b56a:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801b56e:	d1c4      	bne.n	801b4fa <__swsetup_r+0x26>
 801b570:	bd38      	pop	{r3, r4, r5, pc}
 801b572:	0781      	lsls	r1, r0, #30
 801b574:	bf58      	it	pl
 801b576:	6963      	ldrpl	r3, [r4, #20]
 801b578:	60a3      	str	r3, [r4, #8]
 801b57a:	e7f4      	b.n	801b566 <__swsetup_r+0x92>
 801b57c:	2000      	movs	r0, #0
 801b57e:	e7f7      	b.n	801b570 <__swsetup_r+0x9c>
 801b580:	200001cc 	.word	0x200001cc

0801b584 <memcmp>:
 801b584:	b510      	push	{r4, lr}
 801b586:	3901      	subs	r1, #1
 801b588:	4402      	add	r2, r0
 801b58a:	4290      	cmp	r0, r2
 801b58c:	d101      	bne.n	801b592 <memcmp+0xe>
 801b58e:	2000      	movs	r0, #0
 801b590:	e005      	b.n	801b59e <memcmp+0x1a>
 801b592:	7803      	ldrb	r3, [r0, #0]
 801b594:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 801b598:	42a3      	cmp	r3, r4
 801b59a:	d001      	beq.n	801b5a0 <memcmp+0x1c>
 801b59c:	1b18      	subs	r0, r3, r4
 801b59e:	bd10      	pop	{r4, pc}
 801b5a0:	3001      	adds	r0, #1
 801b5a2:	e7f2      	b.n	801b58a <memcmp+0x6>

0801b5a4 <memmove>:
 801b5a4:	4288      	cmp	r0, r1
 801b5a6:	b510      	push	{r4, lr}
 801b5a8:	eb01 0402 	add.w	r4, r1, r2
 801b5ac:	d902      	bls.n	801b5b4 <memmove+0x10>
 801b5ae:	4284      	cmp	r4, r0
 801b5b0:	4623      	mov	r3, r4
 801b5b2:	d807      	bhi.n	801b5c4 <memmove+0x20>
 801b5b4:	1e43      	subs	r3, r0, #1
 801b5b6:	42a1      	cmp	r1, r4
 801b5b8:	d008      	beq.n	801b5cc <memmove+0x28>
 801b5ba:	f811 2b01 	ldrb.w	r2, [r1], #1
 801b5be:	f803 2f01 	strb.w	r2, [r3, #1]!
 801b5c2:	e7f8      	b.n	801b5b6 <memmove+0x12>
 801b5c4:	4402      	add	r2, r0
 801b5c6:	4601      	mov	r1, r0
 801b5c8:	428a      	cmp	r2, r1
 801b5ca:	d100      	bne.n	801b5ce <memmove+0x2a>
 801b5cc:	bd10      	pop	{r4, pc}
 801b5ce:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801b5d2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801b5d6:	e7f7      	b.n	801b5c8 <memmove+0x24>

0801b5d8 <memset>:
 801b5d8:	4402      	add	r2, r0
 801b5da:	4603      	mov	r3, r0
 801b5dc:	4293      	cmp	r3, r2
 801b5de:	d100      	bne.n	801b5e2 <memset+0xa>
 801b5e0:	4770      	bx	lr
 801b5e2:	f803 1b01 	strb.w	r1, [r3], #1
 801b5e6:	e7f9      	b.n	801b5dc <memset+0x4>

0801b5e8 <strncmp>:
 801b5e8:	b510      	push	{r4, lr}
 801b5ea:	b16a      	cbz	r2, 801b608 <strncmp+0x20>
 801b5ec:	3901      	subs	r1, #1
 801b5ee:	1884      	adds	r4, r0, r2
 801b5f0:	f810 2b01 	ldrb.w	r2, [r0], #1
 801b5f4:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 801b5f8:	429a      	cmp	r2, r3
 801b5fa:	d103      	bne.n	801b604 <strncmp+0x1c>
 801b5fc:	42a0      	cmp	r0, r4
 801b5fe:	d001      	beq.n	801b604 <strncmp+0x1c>
 801b600:	2a00      	cmp	r2, #0
 801b602:	d1f5      	bne.n	801b5f0 <strncmp+0x8>
 801b604:	1ad0      	subs	r0, r2, r3
 801b606:	bd10      	pop	{r4, pc}
 801b608:	4610      	mov	r0, r2
 801b60a:	e7fc      	b.n	801b606 <strncmp+0x1e>

0801b60c <_localeconv_r>:
 801b60c:	4800      	ldr	r0, [pc, #0]	; (801b610 <_localeconv_r+0x4>)
 801b60e:	4770      	bx	lr
 801b610:	200002c0 	.word	0x200002c0

0801b614 <_close_r>:
 801b614:	b538      	push	{r3, r4, r5, lr}
 801b616:	4d06      	ldr	r5, [pc, #24]	; (801b630 <_close_r+0x1c>)
 801b618:	2300      	movs	r3, #0
 801b61a:	4604      	mov	r4, r0
 801b61c:	4608      	mov	r0, r1
 801b61e:	602b      	str	r3, [r5, #0]
 801b620:	f7e8 fa9b 	bl	8003b5a <_close>
 801b624:	1c43      	adds	r3, r0, #1
 801b626:	d102      	bne.n	801b62e <_close_r+0x1a>
 801b628:	682b      	ldr	r3, [r5, #0]
 801b62a:	b103      	cbz	r3, 801b62e <_close_r+0x1a>
 801b62c:	6023      	str	r3, [r4, #0]
 801b62e:	bd38      	pop	{r3, r4, r5, pc}
 801b630:	20007454 	.word	0x20007454

0801b634 <_lseek_r>:
 801b634:	b538      	push	{r3, r4, r5, lr}
 801b636:	4d07      	ldr	r5, [pc, #28]	; (801b654 <_lseek_r+0x20>)
 801b638:	4604      	mov	r4, r0
 801b63a:	4608      	mov	r0, r1
 801b63c:	4611      	mov	r1, r2
 801b63e:	2200      	movs	r2, #0
 801b640:	602a      	str	r2, [r5, #0]
 801b642:	461a      	mov	r2, r3
 801b644:	f7e8 fab0 	bl	8003ba8 <_lseek>
 801b648:	1c43      	adds	r3, r0, #1
 801b64a:	d102      	bne.n	801b652 <_lseek_r+0x1e>
 801b64c:	682b      	ldr	r3, [r5, #0]
 801b64e:	b103      	cbz	r3, 801b652 <_lseek_r+0x1e>
 801b650:	6023      	str	r3, [r4, #0]
 801b652:	bd38      	pop	{r3, r4, r5, pc}
 801b654:	20007454 	.word	0x20007454

0801b658 <_read_r>:
 801b658:	b538      	push	{r3, r4, r5, lr}
 801b65a:	4d07      	ldr	r5, [pc, #28]	; (801b678 <_read_r+0x20>)
 801b65c:	4604      	mov	r4, r0
 801b65e:	4608      	mov	r0, r1
 801b660:	4611      	mov	r1, r2
 801b662:	2200      	movs	r2, #0
 801b664:	602a      	str	r2, [r5, #0]
 801b666:	461a      	mov	r2, r3
 801b668:	f7e8 fa3e 	bl	8003ae8 <_read>
 801b66c:	1c43      	adds	r3, r0, #1
 801b66e:	d102      	bne.n	801b676 <_read_r+0x1e>
 801b670:	682b      	ldr	r3, [r5, #0]
 801b672:	b103      	cbz	r3, 801b676 <_read_r+0x1e>
 801b674:	6023      	str	r3, [r4, #0]
 801b676:	bd38      	pop	{r3, r4, r5, pc}
 801b678:	20007454 	.word	0x20007454

0801b67c <_write_r>:
 801b67c:	b538      	push	{r3, r4, r5, lr}
 801b67e:	4d07      	ldr	r5, [pc, #28]	; (801b69c <_write_r+0x20>)
 801b680:	4604      	mov	r4, r0
 801b682:	4608      	mov	r0, r1
 801b684:	4611      	mov	r1, r2
 801b686:	2200      	movs	r2, #0
 801b688:	602a      	str	r2, [r5, #0]
 801b68a:	461a      	mov	r2, r3
 801b68c:	f7e8 fa49 	bl	8003b22 <_write>
 801b690:	1c43      	adds	r3, r0, #1
 801b692:	d102      	bne.n	801b69a <_write_r+0x1e>
 801b694:	682b      	ldr	r3, [r5, #0]
 801b696:	b103      	cbz	r3, 801b69a <_write_r+0x1e>
 801b698:	6023      	str	r3, [r4, #0]
 801b69a:	bd38      	pop	{r3, r4, r5, pc}
 801b69c:	20007454 	.word	0x20007454

0801b6a0 <__libc_init_array>:
 801b6a0:	b570      	push	{r4, r5, r6, lr}
 801b6a2:	4d0d      	ldr	r5, [pc, #52]	; (801b6d8 <__libc_init_array+0x38>)
 801b6a4:	4c0d      	ldr	r4, [pc, #52]	; (801b6dc <__libc_init_array+0x3c>)
 801b6a6:	1b64      	subs	r4, r4, r5
 801b6a8:	10a4      	asrs	r4, r4, #2
 801b6aa:	2600      	movs	r6, #0
 801b6ac:	42a6      	cmp	r6, r4
 801b6ae:	d109      	bne.n	801b6c4 <__libc_init_array+0x24>
 801b6b0:	4d0b      	ldr	r5, [pc, #44]	; (801b6e0 <__libc_init_array+0x40>)
 801b6b2:	4c0c      	ldr	r4, [pc, #48]	; (801b6e4 <__libc_init_array+0x44>)
 801b6b4:	f001 ff60 	bl	801d578 <_init>
 801b6b8:	1b64      	subs	r4, r4, r5
 801b6ba:	10a4      	asrs	r4, r4, #2
 801b6bc:	2600      	movs	r6, #0
 801b6be:	42a6      	cmp	r6, r4
 801b6c0:	d105      	bne.n	801b6ce <__libc_init_array+0x2e>
 801b6c2:	bd70      	pop	{r4, r5, r6, pc}
 801b6c4:	f855 3b04 	ldr.w	r3, [r5], #4
 801b6c8:	4798      	blx	r3
 801b6ca:	3601      	adds	r6, #1
 801b6cc:	e7ee      	b.n	801b6ac <__libc_init_array+0xc>
 801b6ce:	f855 3b04 	ldr.w	r3, [r5], #4
 801b6d2:	4798      	blx	r3
 801b6d4:	3601      	adds	r6, #1
 801b6d6:	e7f2      	b.n	801b6be <__libc_init_array+0x1e>
 801b6d8:	08021200 	.word	0x08021200
 801b6dc:	08021200 	.word	0x08021200
 801b6e0:	08021200 	.word	0x08021200
 801b6e4:	08021204 	.word	0x08021204

0801b6e8 <__retarget_lock_init_recursive>:
 801b6e8:	4770      	bx	lr

0801b6ea <__retarget_lock_acquire_recursive>:
 801b6ea:	4770      	bx	lr

0801b6ec <__retarget_lock_release_recursive>:
 801b6ec:	4770      	bx	lr

0801b6ee <memcpy>:
 801b6ee:	440a      	add	r2, r1
 801b6f0:	4291      	cmp	r1, r2
 801b6f2:	f100 33ff 	add.w	r3, r0, #4294967295
 801b6f6:	d100      	bne.n	801b6fa <memcpy+0xc>
 801b6f8:	4770      	bx	lr
 801b6fa:	b510      	push	{r4, lr}
 801b6fc:	f811 4b01 	ldrb.w	r4, [r1], #1
 801b700:	f803 4f01 	strb.w	r4, [r3, #1]!
 801b704:	4291      	cmp	r1, r2
 801b706:	d1f9      	bne.n	801b6fc <memcpy+0xe>
 801b708:	bd10      	pop	{r4, pc}
	...

0801b70c <__assert_func>:
 801b70c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801b70e:	4614      	mov	r4, r2
 801b710:	461a      	mov	r2, r3
 801b712:	4b09      	ldr	r3, [pc, #36]	; (801b738 <__assert_func+0x2c>)
 801b714:	681b      	ldr	r3, [r3, #0]
 801b716:	4605      	mov	r5, r0
 801b718:	68d8      	ldr	r0, [r3, #12]
 801b71a:	b14c      	cbz	r4, 801b730 <__assert_func+0x24>
 801b71c:	4b07      	ldr	r3, [pc, #28]	; (801b73c <__assert_func+0x30>)
 801b71e:	9100      	str	r1, [sp, #0]
 801b720:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801b724:	4906      	ldr	r1, [pc, #24]	; (801b740 <__assert_func+0x34>)
 801b726:	462b      	mov	r3, r5
 801b728:	f001 fdc8 	bl	801d2bc <fiprintf>
 801b72c:	f001 fe6c 	bl	801d408 <abort>
 801b730:	4b04      	ldr	r3, [pc, #16]	; (801b744 <__assert_func+0x38>)
 801b732:	461c      	mov	r4, r3
 801b734:	e7f3      	b.n	801b71e <__assert_func+0x12>
 801b736:	bf00      	nop
 801b738:	200001cc 	.word	0x200001cc
 801b73c:	08020fd2 	.word	0x08020fd2
 801b740:	08020fdf 	.word	0x08020fdf
 801b744:	0802100d 	.word	0x0802100d

0801b748 <quorem>:
 801b748:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b74c:	6903      	ldr	r3, [r0, #16]
 801b74e:	690c      	ldr	r4, [r1, #16]
 801b750:	42a3      	cmp	r3, r4
 801b752:	4607      	mov	r7, r0
 801b754:	db7e      	blt.n	801b854 <quorem+0x10c>
 801b756:	3c01      	subs	r4, #1
 801b758:	f101 0814 	add.w	r8, r1, #20
 801b75c:	f100 0514 	add.w	r5, r0, #20
 801b760:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801b764:	9301      	str	r3, [sp, #4]
 801b766:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 801b76a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801b76e:	3301      	adds	r3, #1
 801b770:	429a      	cmp	r2, r3
 801b772:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 801b776:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 801b77a:	fbb2 f6f3 	udiv	r6, r2, r3
 801b77e:	d331      	bcc.n	801b7e4 <quorem+0x9c>
 801b780:	f04f 0e00 	mov.w	lr, #0
 801b784:	4640      	mov	r0, r8
 801b786:	46ac      	mov	ip, r5
 801b788:	46f2      	mov	sl, lr
 801b78a:	f850 2b04 	ldr.w	r2, [r0], #4
 801b78e:	b293      	uxth	r3, r2
 801b790:	fb06 e303 	mla	r3, r6, r3, lr
 801b794:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 801b798:	0c1a      	lsrs	r2, r3, #16
 801b79a:	b29b      	uxth	r3, r3
 801b79c:	ebaa 0303 	sub.w	r3, sl, r3
 801b7a0:	f8dc a000 	ldr.w	sl, [ip]
 801b7a4:	fa13 f38a 	uxtah	r3, r3, sl
 801b7a8:	fb06 220e 	mla	r2, r6, lr, r2
 801b7ac:	9300      	str	r3, [sp, #0]
 801b7ae:	9b00      	ldr	r3, [sp, #0]
 801b7b0:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 801b7b4:	b292      	uxth	r2, r2
 801b7b6:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 801b7ba:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801b7be:	f8bd 3000 	ldrh.w	r3, [sp]
 801b7c2:	4581      	cmp	r9, r0
 801b7c4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801b7c8:	f84c 3b04 	str.w	r3, [ip], #4
 801b7cc:	ea4f 4a22 	mov.w	sl, r2, asr #16
 801b7d0:	d2db      	bcs.n	801b78a <quorem+0x42>
 801b7d2:	f855 300b 	ldr.w	r3, [r5, fp]
 801b7d6:	b92b      	cbnz	r3, 801b7e4 <quorem+0x9c>
 801b7d8:	9b01      	ldr	r3, [sp, #4]
 801b7da:	3b04      	subs	r3, #4
 801b7dc:	429d      	cmp	r5, r3
 801b7de:	461a      	mov	r2, r3
 801b7e0:	d32c      	bcc.n	801b83c <quorem+0xf4>
 801b7e2:	613c      	str	r4, [r7, #16]
 801b7e4:	4638      	mov	r0, r7
 801b7e6:	f001 f91f 	bl	801ca28 <__mcmp>
 801b7ea:	2800      	cmp	r0, #0
 801b7ec:	db22      	blt.n	801b834 <quorem+0xec>
 801b7ee:	3601      	adds	r6, #1
 801b7f0:	4629      	mov	r1, r5
 801b7f2:	2000      	movs	r0, #0
 801b7f4:	f858 2b04 	ldr.w	r2, [r8], #4
 801b7f8:	f8d1 c000 	ldr.w	ip, [r1]
 801b7fc:	b293      	uxth	r3, r2
 801b7fe:	1ac3      	subs	r3, r0, r3
 801b800:	0c12      	lsrs	r2, r2, #16
 801b802:	fa13 f38c 	uxtah	r3, r3, ip
 801b806:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 801b80a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801b80e:	b29b      	uxth	r3, r3
 801b810:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801b814:	45c1      	cmp	r9, r8
 801b816:	f841 3b04 	str.w	r3, [r1], #4
 801b81a:	ea4f 4022 	mov.w	r0, r2, asr #16
 801b81e:	d2e9      	bcs.n	801b7f4 <quorem+0xac>
 801b820:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801b824:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801b828:	b922      	cbnz	r2, 801b834 <quorem+0xec>
 801b82a:	3b04      	subs	r3, #4
 801b82c:	429d      	cmp	r5, r3
 801b82e:	461a      	mov	r2, r3
 801b830:	d30a      	bcc.n	801b848 <quorem+0x100>
 801b832:	613c      	str	r4, [r7, #16]
 801b834:	4630      	mov	r0, r6
 801b836:	b003      	add	sp, #12
 801b838:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b83c:	6812      	ldr	r2, [r2, #0]
 801b83e:	3b04      	subs	r3, #4
 801b840:	2a00      	cmp	r2, #0
 801b842:	d1ce      	bne.n	801b7e2 <quorem+0x9a>
 801b844:	3c01      	subs	r4, #1
 801b846:	e7c9      	b.n	801b7dc <quorem+0x94>
 801b848:	6812      	ldr	r2, [r2, #0]
 801b84a:	3b04      	subs	r3, #4
 801b84c:	2a00      	cmp	r2, #0
 801b84e:	d1f0      	bne.n	801b832 <quorem+0xea>
 801b850:	3c01      	subs	r4, #1
 801b852:	e7eb      	b.n	801b82c <quorem+0xe4>
 801b854:	2000      	movs	r0, #0
 801b856:	e7ee      	b.n	801b836 <quorem+0xee>

0801b858 <_dtoa_r>:
 801b858:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b85c:	ed2d 8b02 	vpush	{d8}
 801b860:	69c5      	ldr	r5, [r0, #28]
 801b862:	b091      	sub	sp, #68	; 0x44
 801b864:	ed8d 0b02 	vstr	d0, [sp, #8]
 801b868:	ec59 8b10 	vmov	r8, r9, d0
 801b86c:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 801b86e:	9106      	str	r1, [sp, #24]
 801b870:	4606      	mov	r6, r0
 801b872:	9208      	str	r2, [sp, #32]
 801b874:	930c      	str	r3, [sp, #48]	; 0x30
 801b876:	b975      	cbnz	r5, 801b896 <_dtoa_r+0x3e>
 801b878:	2010      	movs	r0, #16
 801b87a:	f000 fda5 	bl	801c3c8 <malloc>
 801b87e:	4602      	mov	r2, r0
 801b880:	61f0      	str	r0, [r6, #28]
 801b882:	b920      	cbnz	r0, 801b88e <_dtoa_r+0x36>
 801b884:	4ba6      	ldr	r3, [pc, #664]	; (801bb20 <_dtoa_r+0x2c8>)
 801b886:	21ef      	movs	r1, #239	; 0xef
 801b888:	48a6      	ldr	r0, [pc, #664]	; (801bb24 <_dtoa_r+0x2cc>)
 801b88a:	f7ff ff3f 	bl	801b70c <__assert_func>
 801b88e:	e9c0 5501 	strd	r5, r5, [r0, #4]
 801b892:	6005      	str	r5, [r0, #0]
 801b894:	60c5      	str	r5, [r0, #12]
 801b896:	69f3      	ldr	r3, [r6, #28]
 801b898:	6819      	ldr	r1, [r3, #0]
 801b89a:	b151      	cbz	r1, 801b8b2 <_dtoa_r+0x5a>
 801b89c:	685a      	ldr	r2, [r3, #4]
 801b89e:	604a      	str	r2, [r1, #4]
 801b8a0:	2301      	movs	r3, #1
 801b8a2:	4093      	lsls	r3, r2
 801b8a4:	608b      	str	r3, [r1, #8]
 801b8a6:	4630      	mov	r0, r6
 801b8a8:	f000 fe82 	bl	801c5b0 <_Bfree>
 801b8ac:	69f3      	ldr	r3, [r6, #28]
 801b8ae:	2200      	movs	r2, #0
 801b8b0:	601a      	str	r2, [r3, #0]
 801b8b2:	f1b9 0300 	subs.w	r3, r9, #0
 801b8b6:	bfbb      	ittet	lt
 801b8b8:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 801b8bc:	9303      	strlt	r3, [sp, #12]
 801b8be:	2300      	movge	r3, #0
 801b8c0:	2201      	movlt	r2, #1
 801b8c2:	bfac      	ite	ge
 801b8c4:	6023      	strge	r3, [r4, #0]
 801b8c6:	6022      	strlt	r2, [r4, #0]
 801b8c8:	4b97      	ldr	r3, [pc, #604]	; (801bb28 <_dtoa_r+0x2d0>)
 801b8ca:	9c03      	ldr	r4, [sp, #12]
 801b8cc:	43a3      	bics	r3, r4
 801b8ce:	d11c      	bne.n	801b90a <_dtoa_r+0xb2>
 801b8d0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801b8d2:	f242 730f 	movw	r3, #9999	; 0x270f
 801b8d6:	6013      	str	r3, [r2, #0]
 801b8d8:	f3c4 0313 	ubfx	r3, r4, #0, #20
 801b8dc:	ea53 0308 	orrs.w	r3, r3, r8
 801b8e0:	f000 84fb 	beq.w	801c2da <_dtoa_r+0xa82>
 801b8e4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801b8e6:	b963      	cbnz	r3, 801b902 <_dtoa_r+0xaa>
 801b8e8:	4b90      	ldr	r3, [pc, #576]	; (801bb2c <_dtoa_r+0x2d4>)
 801b8ea:	e020      	b.n	801b92e <_dtoa_r+0xd6>
 801b8ec:	4b90      	ldr	r3, [pc, #576]	; (801bb30 <_dtoa_r+0x2d8>)
 801b8ee:	9301      	str	r3, [sp, #4]
 801b8f0:	3308      	adds	r3, #8
 801b8f2:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 801b8f4:	6013      	str	r3, [r2, #0]
 801b8f6:	9801      	ldr	r0, [sp, #4]
 801b8f8:	b011      	add	sp, #68	; 0x44
 801b8fa:	ecbd 8b02 	vpop	{d8}
 801b8fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b902:	4b8a      	ldr	r3, [pc, #552]	; (801bb2c <_dtoa_r+0x2d4>)
 801b904:	9301      	str	r3, [sp, #4]
 801b906:	3303      	adds	r3, #3
 801b908:	e7f3      	b.n	801b8f2 <_dtoa_r+0x9a>
 801b90a:	ed9d 8b02 	vldr	d8, [sp, #8]
 801b90e:	eeb5 8b40 	vcmp.f64	d8, #0.0
 801b912:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b916:	d10c      	bne.n	801b932 <_dtoa_r+0xda>
 801b918:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801b91a:	2301      	movs	r3, #1
 801b91c:	6013      	str	r3, [r2, #0]
 801b91e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801b920:	2b00      	cmp	r3, #0
 801b922:	f000 84d7 	beq.w	801c2d4 <_dtoa_r+0xa7c>
 801b926:	4b83      	ldr	r3, [pc, #524]	; (801bb34 <_dtoa_r+0x2dc>)
 801b928:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 801b92a:	6013      	str	r3, [r2, #0]
 801b92c:	3b01      	subs	r3, #1
 801b92e:	9301      	str	r3, [sp, #4]
 801b930:	e7e1      	b.n	801b8f6 <_dtoa_r+0x9e>
 801b932:	aa0e      	add	r2, sp, #56	; 0x38
 801b934:	a90f      	add	r1, sp, #60	; 0x3c
 801b936:	4630      	mov	r0, r6
 801b938:	eeb0 0b48 	vmov.f64	d0, d8
 801b93c:	f001 f91a 	bl	801cb74 <__d2b>
 801b940:	f3c4 530a 	ubfx	r3, r4, #20, #11
 801b944:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801b946:	4605      	mov	r5, r0
 801b948:	2b00      	cmp	r3, #0
 801b94a:	d046      	beq.n	801b9da <_dtoa_r+0x182>
 801b94c:	eeb0 7b48 	vmov.f64	d7, d8
 801b950:	ee18 1a90 	vmov	r1, s17
 801b954:	f3c1 0113 	ubfx	r1, r1, #0, #20
 801b958:	f041 517f 	orr.w	r1, r1, #1069547520	; 0x3fc00000
 801b95c:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 801b960:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 801b964:	2000      	movs	r0, #0
 801b966:	ee07 1a90 	vmov	s15, r1
 801b96a:	eeb7 6b08 	vmov.f64	d6, #120	; 0x3fc00000  1.5
 801b96e:	ed9f 5b66 	vldr	d5, [pc, #408]	; 801bb08 <_dtoa_r+0x2b0>
 801b972:	ee37 7b46 	vsub.f64	d7, d7, d6
 801b976:	ed9f 6b66 	vldr	d6, [pc, #408]	; 801bb10 <_dtoa_r+0x2b8>
 801b97a:	eea7 6b05 	vfma.f64	d6, d7, d5
 801b97e:	ed9f 5b66 	vldr	d5, [pc, #408]	; 801bb18 <_dtoa_r+0x2c0>
 801b982:	ee07 3a90 	vmov	s15, r3
 801b986:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 801b98a:	eeb0 7b46 	vmov.f64	d7, d6
 801b98e:	eea4 7b05 	vfma.f64	d7, d4, d5
 801b992:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 801b996:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 801b99a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b99e:	ee16 ba90 	vmov	fp, s13
 801b9a2:	9009      	str	r0, [sp, #36]	; 0x24
 801b9a4:	d508      	bpl.n	801b9b8 <_dtoa_r+0x160>
 801b9a6:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 801b9aa:	eeb4 6b47 	vcmp.f64	d6, d7
 801b9ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b9b2:	bf18      	it	ne
 801b9b4:	f10b 3bff 	addne.w	fp, fp, #4294967295
 801b9b8:	f1bb 0f16 	cmp.w	fp, #22
 801b9bc:	d82b      	bhi.n	801ba16 <_dtoa_r+0x1be>
 801b9be:	495e      	ldr	r1, [pc, #376]	; (801bb38 <_dtoa_r+0x2e0>)
 801b9c0:	eb01 01cb 	add.w	r1, r1, fp, lsl #3
 801b9c4:	ed91 7b00 	vldr	d7, [r1]
 801b9c8:	eeb4 8bc7 	vcmpe.f64	d8, d7
 801b9cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801b9d0:	d501      	bpl.n	801b9d6 <_dtoa_r+0x17e>
 801b9d2:	f10b 3bff 	add.w	fp, fp, #4294967295
 801b9d6:	2100      	movs	r1, #0
 801b9d8:	e01e      	b.n	801ba18 <_dtoa_r+0x1c0>
 801b9da:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801b9dc:	4413      	add	r3, r2
 801b9de:	f203 4132 	addw	r1, r3, #1074	; 0x432
 801b9e2:	2920      	cmp	r1, #32
 801b9e4:	bfc1      	itttt	gt
 801b9e6:	f1c1 0140 	rsbgt	r1, r1, #64	; 0x40
 801b9ea:	408c      	lslgt	r4, r1
 801b9ec:	f203 4112 	addwgt	r1, r3, #1042	; 0x412
 801b9f0:	fa28 f101 	lsrgt.w	r1, r8, r1
 801b9f4:	bfd6      	itet	le
 801b9f6:	f1c1 0120 	rsble	r1, r1, #32
 801b9fa:	4321      	orrgt	r1, r4
 801b9fc:	fa08 f101 	lslle.w	r1, r8, r1
 801ba00:	ee07 1a90 	vmov	s15, r1
 801ba04:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 801ba08:	3b01      	subs	r3, #1
 801ba0a:	ee17 1a90 	vmov	r1, s15
 801ba0e:	2001      	movs	r0, #1
 801ba10:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 801ba14:	e7a7      	b.n	801b966 <_dtoa_r+0x10e>
 801ba16:	2101      	movs	r1, #1
 801ba18:	1ad2      	subs	r2, r2, r3
 801ba1a:	1e53      	subs	r3, r2, #1
 801ba1c:	9305      	str	r3, [sp, #20]
 801ba1e:	bf45      	ittet	mi
 801ba20:	f1c2 0301 	rsbmi	r3, r2, #1
 801ba24:	9304      	strmi	r3, [sp, #16]
 801ba26:	2300      	movpl	r3, #0
 801ba28:	2300      	movmi	r3, #0
 801ba2a:	bf4c      	ite	mi
 801ba2c:	9305      	strmi	r3, [sp, #20]
 801ba2e:	9304      	strpl	r3, [sp, #16]
 801ba30:	f1bb 0f00 	cmp.w	fp, #0
 801ba34:	910b      	str	r1, [sp, #44]	; 0x2c
 801ba36:	db18      	blt.n	801ba6a <_dtoa_r+0x212>
 801ba38:	9b05      	ldr	r3, [sp, #20]
 801ba3a:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 801ba3e:	445b      	add	r3, fp
 801ba40:	9305      	str	r3, [sp, #20]
 801ba42:	2300      	movs	r3, #0
 801ba44:	9a06      	ldr	r2, [sp, #24]
 801ba46:	2a09      	cmp	r2, #9
 801ba48:	d848      	bhi.n	801badc <_dtoa_r+0x284>
 801ba4a:	2a05      	cmp	r2, #5
 801ba4c:	bfc4      	itt	gt
 801ba4e:	3a04      	subgt	r2, #4
 801ba50:	9206      	strgt	r2, [sp, #24]
 801ba52:	9a06      	ldr	r2, [sp, #24]
 801ba54:	f1a2 0202 	sub.w	r2, r2, #2
 801ba58:	bfcc      	ite	gt
 801ba5a:	2400      	movgt	r4, #0
 801ba5c:	2401      	movle	r4, #1
 801ba5e:	2a03      	cmp	r2, #3
 801ba60:	d847      	bhi.n	801baf2 <_dtoa_r+0x29a>
 801ba62:	e8df f002 	tbb	[pc, r2]
 801ba66:	2d0b      	.short	0x2d0b
 801ba68:	392b      	.short	0x392b
 801ba6a:	9b04      	ldr	r3, [sp, #16]
 801ba6c:	2200      	movs	r2, #0
 801ba6e:	eba3 030b 	sub.w	r3, r3, fp
 801ba72:	9304      	str	r3, [sp, #16]
 801ba74:	920a      	str	r2, [sp, #40]	; 0x28
 801ba76:	f1cb 0300 	rsb	r3, fp, #0
 801ba7a:	e7e3      	b.n	801ba44 <_dtoa_r+0x1ec>
 801ba7c:	2200      	movs	r2, #0
 801ba7e:	9207      	str	r2, [sp, #28]
 801ba80:	9a08      	ldr	r2, [sp, #32]
 801ba82:	2a00      	cmp	r2, #0
 801ba84:	dc38      	bgt.n	801baf8 <_dtoa_r+0x2a0>
 801ba86:	f04f 0a01 	mov.w	sl, #1
 801ba8a:	46d1      	mov	r9, sl
 801ba8c:	4652      	mov	r2, sl
 801ba8e:	f8cd a020 	str.w	sl, [sp, #32]
 801ba92:	69f7      	ldr	r7, [r6, #28]
 801ba94:	2100      	movs	r1, #0
 801ba96:	2004      	movs	r0, #4
 801ba98:	f100 0c14 	add.w	ip, r0, #20
 801ba9c:	4594      	cmp	ip, r2
 801ba9e:	d930      	bls.n	801bb02 <_dtoa_r+0x2aa>
 801baa0:	6079      	str	r1, [r7, #4]
 801baa2:	4630      	mov	r0, r6
 801baa4:	930d      	str	r3, [sp, #52]	; 0x34
 801baa6:	f000 fd43 	bl	801c530 <_Balloc>
 801baaa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801baac:	9001      	str	r0, [sp, #4]
 801baae:	4602      	mov	r2, r0
 801bab0:	2800      	cmp	r0, #0
 801bab2:	d145      	bne.n	801bb40 <_dtoa_r+0x2e8>
 801bab4:	4b21      	ldr	r3, [pc, #132]	; (801bb3c <_dtoa_r+0x2e4>)
 801bab6:	f240 11af 	movw	r1, #431	; 0x1af
 801baba:	e6e5      	b.n	801b888 <_dtoa_r+0x30>
 801babc:	2201      	movs	r2, #1
 801babe:	e7de      	b.n	801ba7e <_dtoa_r+0x226>
 801bac0:	2200      	movs	r2, #0
 801bac2:	9207      	str	r2, [sp, #28]
 801bac4:	9a08      	ldr	r2, [sp, #32]
 801bac6:	eb0b 0a02 	add.w	sl, fp, r2
 801baca:	f10a 0901 	add.w	r9, sl, #1
 801bace:	464a      	mov	r2, r9
 801bad0:	2a01      	cmp	r2, #1
 801bad2:	bfb8      	it	lt
 801bad4:	2201      	movlt	r2, #1
 801bad6:	e7dc      	b.n	801ba92 <_dtoa_r+0x23a>
 801bad8:	2201      	movs	r2, #1
 801bada:	e7f2      	b.n	801bac2 <_dtoa_r+0x26a>
 801badc:	2401      	movs	r4, #1
 801bade:	2200      	movs	r2, #0
 801bae0:	e9cd 2406 	strd	r2, r4, [sp, #24]
 801bae4:	f04f 3aff 	mov.w	sl, #4294967295
 801bae8:	2100      	movs	r1, #0
 801baea:	46d1      	mov	r9, sl
 801baec:	2212      	movs	r2, #18
 801baee:	9108      	str	r1, [sp, #32]
 801baf0:	e7cf      	b.n	801ba92 <_dtoa_r+0x23a>
 801baf2:	2201      	movs	r2, #1
 801baf4:	9207      	str	r2, [sp, #28]
 801baf6:	e7f5      	b.n	801bae4 <_dtoa_r+0x28c>
 801baf8:	f8dd a020 	ldr.w	sl, [sp, #32]
 801bafc:	46d1      	mov	r9, sl
 801bafe:	4652      	mov	r2, sl
 801bb00:	e7c7      	b.n	801ba92 <_dtoa_r+0x23a>
 801bb02:	3101      	adds	r1, #1
 801bb04:	0040      	lsls	r0, r0, #1
 801bb06:	e7c7      	b.n	801ba98 <_dtoa_r+0x240>
 801bb08:	636f4361 	.word	0x636f4361
 801bb0c:	3fd287a7 	.word	0x3fd287a7
 801bb10:	8b60c8b3 	.word	0x8b60c8b3
 801bb14:	3fc68a28 	.word	0x3fc68a28
 801bb18:	509f79fb 	.word	0x509f79fb
 801bb1c:	3fd34413 	.word	0x3fd34413
 801bb20:	08020e2e 	.word	0x08020e2e
 801bb24:	0802101b 	.word	0x0802101b
 801bb28:	7ff00000 	.word	0x7ff00000
 801bb2c:	08021017 	.word	0x08021017
 801bb30:	0802100e 	.word	0x0802100e
 801bb34:	08020faf 	.word	0x08020faf
 801bb38:	08021108 	.word	0x08021108
 801bb3c:	08021073 	.word	0x08021073
 801bb40:	69f2      	ldr	r2, [r6, #28]
 801bb42:	9901      	ldr	r1, [sp, #4]
 801bb44:	6011      	str	r1, [r2, #0]
 801bb46:	f1b9 0f0e 	cmp.w	r9, #14
 801bb4a:	d86c      	bhi.n	801bc26 <_dtoa_r+0x3ce>
 801bb4c:	2c00      	cmp	r4, #0
 801bb4e:	d06a      	beq.n	801bc26 <_dtoa_r+0x3ce>
 801bb50:	f1bb 0f00 	cmp.w	fp, #0
 801bb54:	f340 80a0 	ble.w	801bc98 <_dtoa_r+0x440>
 801bb58:	4ac1      	ldr	r2, [pc, #772]	; (801be60 <_dtoa_r+0x608>)
 801bb5a:	f00b 010f 	and.w	r1, fp, #15
 801bb5e:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 801bb62:	f41b 7f80 	tst.w	fp, #256	; 0x100
 801bb66:	ed92 7b00 	vldr	d7, [r2]
 801bb6a:	ea4f 122b 	mov.w	r2, fp, asr #4
 801bb6e:	f000 8087 	beq.w	801bc80 <_dtoa_r+0x428>
 801bb72:	49bc      	ldr	r1, [pc, #752]	; (801be64 <_dtoa_r+0x60c>)
 801bb74:	ed91 6b08 	vldr	d6, [r1, #32]
 801bb78:	ee88 6b06 	vdiv.f64	d6, d8, d6
 801bb7c:	ed8d 6b02 	vstr	d6, [sp, #8]
 801bb80:	f002 020f 	and.w	r2, r2, #15
 801bb84:	2103      	movs	r1, #3
 801bb86:	48b7      	ldr	r0, [pc, #732]	; (801be64 <_dtoa_r+0x60c>)
 801bb88:	2a00      	cmp	r2, #0
 801bb8a:	d17b      	bne.n	801bc84 <_dtoa_r+0x42c>
 801bb8c:	ed9d 6b02 	vldr	d6, [sp, #8]
 801bb90:	ee86 7b07 	vdiv.f64	d7, d6, d7
 801bb94:	ed8d 7b02 	vstr	d7, [sp, #8]
 801bb98:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801bb9a:	ed9d 7b02 	vldr	d7, [sp, #8]
 801bb9e:	2a00      	cmp	r2, #0
 801bba0:	f000 80a0 	beq.w	801bce4 <_dtoa_r+0x48c>
 801bba4:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 801bba8:	eeb4 7bc6 	vcmpe.f64	d7, d6
 801bbac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801bbb0:	f140 8098 	bpl.w	801bce4 <_dtoa_r+0x48c>
 801bbb4:	f1b9 0f00 	cmp.w	r9, #0
 801bbb8:	f000 8094 	beq.w	801bce4 <_dtoa_r+0x48c>
 801bbbc:	f1ba 0f00 	cmp.w	sl, #0
 801bbc0:	dd2f      	ble.n	801bc22 <_dtoa_r+0x3ca>
 801bbc2:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 801bbc6:	ee27 7b06 	vmul.f64	d7, d7, d6
 801bbca:	ed8d 7b02 	vstr	d7, [sp, #8]
 801bbce:	f10b 32ff 	add.w	r2, fp, #4294967295
 801bbd2:	3101      	adds	r1, #1
 801bbd4:	4654      	mov	r4, sl
 801bbd6:	ed9d 6b02 	vldr	d6, [sp, #8]
 801bbda:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 801bbde:	ee07 1a90 	vmov	s15, r1
 801bbe2:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 801bbe6:	eea7 5b06 	vfma.f64	d5, d7, d6
 801bbea:	ee15 7a90 	vmov	r7, s11
 801bbee:	ec51 0b15 	vmov	r0, r1, d5
 801bbf2:	f1a7 7150 	sub.w	r1, r7, #54525952	; 0x3400000
 801bbf6:	2c00      	cmp	r4, #0
 801bbf8:	d177      	bne.n	801bcea <_dtoa_r+0x492>
 801bbfa:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 801bbfe:	ee36 6b47 	vsub.f64	d6, d6, d7
 801bc02:	ec41 0b17 	vmov	d7, r0, r1
 801bc06:	eeb4 6bc7 	vcmpe.f64	d6, d7
 801bc0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801bc0e:	f300 826a 	bgt.w	801c0e6 <_dtoa_r+0x88e>
 801bc12:	eeb1 7b47 	vneg.f64	d7, d7
 801bc16:	eeb4 6bc7 	vcmpe.f64	d6, d7
 801bc1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801bc1e:	f100 8260 	bmi.w	801c0e2 <_dtoa_r+0x88a>
 801bc22:	ed8d 8b02 	vstr	d8, [sp, #8]
 801bc26:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801bc28:	2a00      	cmp	r2, #0
 801bc2a:	f2c0 811d 	blt.w	801be68 <_dtoa_r+0x610>
 801bc2e:	f1bb 0f0e 	cmp.w	fp, #14
 801bc32:	f300 8119 	bgt.w	801be68 <_dtoa_r+0x610>
 801bc36:	4b8a      	ldr	r3, [pc, #552]	; (801be60 <_dtoa_r+0x608>)
 801bc38:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 801bc3c:	ed93 6b00 	vldr	d6, [r3]
 801bc40:	9b08      	ldr	r3, [sp, #32]
 801bc42:	2b00      	cmp	r3, #0
 801bc44:	f280 80b7 	bge.w	801bdb6 <_dtoa_r+0x55e>
 801bc48:	f1b9 0f00 	cmp.w	r9, #0
 801bc4c:	f300 80b3 	bgt.w	801bdb6 <_dtoa_r+0x55e>
 801bc50:	f040 8246 	bne.w	801c0e0 <_dtoa_r+0x888>
 801bc54:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 801bc58:	ee26 6b07 	vmul.f64	d6, d6, d7
 801bc5c:	ed9d 7b02 	vldr	d7, [sp, #8]
 801bc60:	eeb4 6bc7 	vcmpe.f64	d6, d7
 801bc64:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801bc68:	464c      	mov	r4, r9
 801bc6a:	464f      	mov	r7, r9
 801bc6c:	f280 821c 	bge.w	801c0a8 <_dtoa_r+0x850>
 801bc70:	f8dd 8004 	ldr.w	r8, [sp, #4]
 801bc74:	2331      	movs	r3, #49	; 0x31
 801bc76:	f808 3b01 	strb.w	r3, [r8], #1
 801bc7a:	f10b 0b01 	add.w	fp, fp, #1
 801bc7e:	e218      	b.n	801c0b2 <_dtoa_r+0x85a>
 801bc80:	2102      	movs	r1, #2
 801bc82:	e780      	b.n	801bb86 <_dtoa_r+0x32e>
 801bc84:	07d4      	lsls	r4, r2, #31
 801bc86:	d504      	bpl.n	801bc92 <_dtoa_r+0x43a>
 801bc88:	ed90 6b00 	vldr	d6, [r0]
 801bc8c:	3101      	adds	r1, #1
 801bc8e:	ee27 7b06 	vmul.f64	d7, d7, d6
 801bc92:	1052      	asrs	r2, r2, #1
 801bc94:	3008      	adds	r0, #8
 801bc96:	e777      	b.n	801bb88 <_dtoa_r+0x330>
 801bc98:	d022      	beq.n	801bce0 <_dtoa_r+0x488>
 801bc9a:	f1cb 0200 	rsb	r2, fp, #0
 801bc9e:	4970      	ldr	r1, [pc, #448]	; (801be60 <_dtoa_r+0x608>)
 801bca0:	f002 000f 	and.w	r0, r2, #15
 801bca4:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 801bca8:	ed91 7b00 	vldr	d7, [r1]
 801bcac:	ee28 7b07 	vmul.f64	d7, d8, d7
 801bcb0:	ed8d 7b02 	vstr	d7, [sp, #8]
 801bcb4:	486b      	ldr	r0, [pc, #428]	; (801be64 <_dtoa_r+0x60c>)
 801bcb6:	1112      	asrs	r2, r2, #4
 801bcb8:	2400      	movs	r4, #0
 801bcba:	2102      	movs	r1, #2
 801bcbc:	b92a      	cbnz	r2, 801bcca <_dtoa_r+0x472>
 801bcbe:	2c00      	cmp	r4, #0
 801bcc0:	f43f af6a 	beq.w	801bb98 <_dtoa_r+0x340>
 801bcc4:	ed8d 7b02 	vstr	d7, [sp, #8]
 801bcc8:	e766      	b.n	801bb98 <_dtoa_r+0x340>
 801bcca:	07d7      	lsls	r7, r2, #31
 801bccc:	d505      	bpl.n	801bcda <_dtoa_r+0x482>
 801bcce:	ed90 6b00 	vldr	d6, [r0]
 801bcd2:	3101      	adds	r1, #1
 801bcd4:	2401      	movs	r4, #1
 801bcd6:	ee27 7b06 	vmul.f64	d7, d7, d6
 801bcda:	1052      	asrs	r2, r2, #1
 801bcdc:	3008      	adds	r0, #8
 801bcde:	e7ed      	b.n	801bcbc <_dtoa_r+0x464>
 801bce0:	2102      	movs	r1, #2
 801bce2:	e759      	b.n	801bb98 <_dtoa_r+0x340>
 801bce4:	465a      	mov	r2, fp
 801bce6:	464c      	mov	r4, r9
 801bce8:	e775      	b.n	801bbd6 <_dtoa_r+0x37e>
 801bcea:	ec41 0b17 	vmov	d7, r0, r1
 801bcee:	495c      	ldr	r1, [pc, #368]	; (801be60 <_dtoa_r+0x608>)
 801bcf0:	eb01 01c4 	add.w	r1, r1, r4, lsl #3
 801bcf4:	ed11 4b02 	vldr	d4, [r1, #-8]
 801bcf8:	9901      	ldr	r1, [sp, #4]
 801bcfa:	440c      	add	r4, r1
 801bcfc:	9907      	ldr	r1, [sp, #28]
 801bcfe:	b351      	cbz	r1, 801bd56 <_dtoa_r+0x4fe>
 801bd00:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 801bd04:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 801bd08:	f8dd 8004 	ldr.w	r8, [sp, #4]
 801bd0c:	ee83 5b04 	vdiv.f64	d5, d3, d4
 801bd10:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 801bd14:	ee35 7b47 	vsub.f64	d7, d5, d7
 801bd18:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 801bd1c:	ee14 1a90 	vmov	r1, s9
 801bd20:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 801bd24:	3130      	adds	r1, #48	; 0x30
 801bd26:	ee36 6b45 	vsub.f64	d6, d6, d5
 801bd2a:	eeb4 6bc7 	vcmpe.f64	d6, d7
 801bd2e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801bd32:	f808 1b01 	strb.w	r1, [r8], #1
 801bd36:	d439      	bmi.n	801bdac <_dtoa_r+0x554>
 801bd38:	ee32 5b46 	vsub.f64	d5, d2, d6
 801bd3c:	eeb4 5bc7 	vcmpe.f64	d5, d7
 801bd40:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801bd44:	d472      	bmi.n	801be2c <_dtoa_r+0x5d4>
 801bd46:	45a0      	cmp	r8, r4
 801bd48:	f43f af6b 	beq.w	801bc22 <_dtoa_r+0x3ca>
 801bd4c:	ee27 7b03 	vmul.f64	d7, d7, d3
 801bd50:	ee26 6b03 	vmul.f64	d6, d6, d3
 801bd54:	e7e0      	b.n	801bd18 <_dtoa_r+0x4c0>
 801bd56:	f8dd 8004 	ldr.w	r8, [sp, #4]
 801bd5a:	ee27 7b04 	vmul.f64	d7, d7, d4
 801bd5e:	4620      	mov	r0, r4
 801bd60:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 801bd64:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 801bd68:	ee14 1a90 	vmov	r1, s9
 801bd6c:	3130      	adds	r1, #48	; 0x30
 801bd6e:	f808 1b01 	strb.w	r1, [r8], #1
 801bd72:	45a0      	cmp	r8, r4
 801bd74:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 801bd78:	ee36 6b45 	vsub.f64	d6, d6, d5
 801bd7c:	d118      	bne.n	801bdb0 <_dtoa_r+0x558>
 801bd7e:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 801bd82:	ee37 4b05 	vadd.f64	d4, d7, d5
 801bd86:	eeb4 6bc4 	vcmpe.f64	d6, d4
 801bd8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801bd8e:	dc4d      	bgt.n	801be2c <_dtoa_r+0x5d4>
 801bd90:	ee35 5b47 	vsub.f64	d5, d5, d7
 801bd94:	eeb4 6bc5 	vcmpe.f64	d6, d5
 801bd98:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801bd9c:	f57f af41 	bpl.w	801bc22 <_dtoa_r+0x3ca>
 801bda0:	4680      	mov	r8, r0
 801bda2:	3801      	subs	r0, #1
 801bda4:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 801bda8:	2b30      	cmp	r3, #48	; 0x30
 801bdaa:	d0f9      	beq.n	801bda0 <_dtoa_r+0x548>
 801bdac:	4693      	mov	fp, r2
 801bdae:	e02a      	b.n	801be06 <_dtoa_r+0x5ae>
 801bdb0:	ee26 6b03 	vmul.f64	d6, d6, d3
 801bdb4:	e7d6      	b.n	801bd64 <_dtoa_r+0x50c>
 801bdb6:	ed9d 7b02 	vldr	d7, [sp, #8]
 801bdba:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 801bdbe:	f8dd 8004 	ldr.w	r8, [sp, #4]
 801bdc2:	ee87 5b06 	vdiv.f64	d5, d7, d6
 801bdc6:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 801bdca:	ee15 3a10 	vmov	r3, s10
 801bdce:	3330      	adds	r3, #48	; 0x30
 801bdd0:	f808 3b01 	strb.w	r3, [r8], #1
 801bdd4:	9b01      	ldr	r3, [sp, #4]
 801bdd6:	eba8 0303 	sub.w	r3, r8, r3
 801bdda:	4599      	cmp	r9, r3
 801bddc:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 801bde0:	eea3 7b46 	vfms.f64	d7, d3, d6
 801bde4:	d133      	bne.n	801be4e <_dtoa_r+0x5f6>
 801bde6:	ee37 7b07 	vadd.f64	d7, d7, d7
 801bdea:	eeb4 7bc6 	vcmpe.f64	d7, d6
 801bdee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801bdf2:	dc1a      	bgt.n	801be2a <_dtoa_r+0x5d2>
 801bdf4:	eeb4 7b46 	vcmp.f64	d7, d6
 801bdf8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801bdfc:	d103      	bne.n	801be06 <_dtoa_r+0x5ae>
 801bdfe:	ee15 3a10 	vmov	r3, s10
 801be02:	07d9      	lsls	r1, r3, #31
 801be04:	d411      	bmi.n	801be2a <_dtoa_r+0x5d2>
 801be06:	4629      	mov	r1, r5
 801be08:	4630      	mov	r0, r6
 801be0a:	f000 fbd1 	bl	801c5b0 <_Bfree>
 801be0e:	2300      	movs	r3, #0
 801be10:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801be12:	f888 3000 	strb.w	r3, [r8]
 801be16:	f10b 0301 	add.w	r3, fp, #1
 801be1a:	6013      	str	r3, [r2, #0]
 801be1c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801be1e:	2b00      	cmp	r3, #0
 801be20:	f43f ad69 	beq.w	801b8f6 <_dtoa_r+0x9e>
 801be24:	f8c3 8000 	str.w	r8, [r3]
 801be28:	e565      	b.n	801b8f6 <_dtoa_r+0x9e>
 801be2a:	465a      	mov	r2, fp
 801be2c:	4643      	mov	r3, r8
 801be2e:	4698      	mov	r8, r3
 801be30:	f813 1d01 	ldrb.w	r1, [r3, #-1]!
 801be34:	2939      	cmp	r1, #57	; 0x39
 801be36:	d106      	bne.n	801be46 <_dtoa_r+0x5ee>
 801be38:	9901      	ldr	r1, [sp, #4]
 801be3a:	4299      	cmp	r1, r3
 801be3c:	d1f7      	bne.n	801be2e <_dtoa_r+0x5d6>
 801be3e:	9801      	ldr	r0, [sp, #4]
 801be40:	2130      	movs	r1, #48	; 0x30
 801be42:	3201      	adds	r2, #1
 801be44:	7001      	strb	r1, [r0, #0]
 801be46:	7819      	ldrb	r1, [r3, #0]
 801be48:	3101      	adds	r1, #1
 801be4a:	7019      	strb	r1, [r3, #0]
 801be4c:	e7ae      	b.n	801bdac <_dtoa_r+0x554>
 801be4e:	ee27 7b04 	vmul.f64	d7, d7, d4
 801be52:	eeb5 7b40 	vcmp.f64	d7, #0.0
 801be56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801be5a:	d1b2      	bne.n	801bdc2 <_dtoa_r+0x56a>
 801be5c:	e7d3      	b.n	801be06 <_dtoa_r+0x5ae>
 801be5e:	bf00      	nop
 801be60:	08021108 	.word	0x08021108
 801be64:	080210e0 	.word	0x080210e0
 801be68:	9907      	ldr	r1, [sp, #28]
 801be6a:	2900      	cmp	r1, #0
 801be6c:	f000 80d0 	beq.w	801c010 <_dtoa_r+0x7b8>
 801be70:	9906      	ldr	r1, [sp, #24]
 801be72:	2901      	cmp	r1, #1
 801be74:	f300 80b4 	bgt.w	801bfe0 <_dtoa_r+0x788>
 801be78:	9909      	ldr	r1, [sp, #36]	; 0x24
 801be7a:	2900      	cmp	r1, #0
 801be7c:	f000 80ac 	beq.w	801bfd8 <_dtoa_r+0x780>
 801be80:	f202 4233 	addw	r2, r2, #1075	; 0x433
 801be84:	f8dd 8010 	ldr.w	r8, [sp, #16]
 801be88:	461c      	mov	r4, r3
 801be8a:	9309      	str	r3, [sp, #36]	; 0x24
 801be8c:	9b04      	ldr	r3, [sp, #16]
 801be8e:	4413      	add	r3, r2
 801be90:	9304      	str	r3, [sp, #16]
 801be92:	9b05      	ldr	r3, [sp, #20]
 801be94:	2101      	movs	r1, #1
 801be96:	4413      	add	r3, r2
 801be98:	4630      	mov	r0, r6
 801be9a:	9305      	str	r3, [sp, #20]
 801be9c:	f000 fc3e 	bl	801c71c <__i2b>
 801bea0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801bea2:	4607      	mov	r7, r0
 801bea4:	f1b8 0f00 	cmp.w	r8, #0
 801bea8:	d00d      	beq.n	801bec6 <_dtoa_r+0x66e>
 801beaa:	9a05      	ldr	r2, [sp, #20]
 801beac:	2a00      	cmp	r2, #0
 801beae:	dd0a      	ble.n	801bec6 <_dtoa_r+0x66e>
 801beb0:	4542      	cmp	r2, r8
 801beb2:	9904      	ldr	r1, [sp, #16]
 801beb4:	bfa8      	it	ge
 801beb6:	4642      	movge	r2, r8
 801beb8:	1a89      	subs	r1, r1, r2
 801beba:	9104      	str	r1, [sp, #16]
 801bebc:	9905      	ldr	r1, [sp, #20]
 801bebe:	eba8 0802 	sub.w	r8, r8, r2
 801bec2:	1a8a      	subs	r2, r1, r2
 801bec4:	9205      	str	r2, [sp, #20]
 801bec6:	b303      	cbz	r3, 801bf0a <_dtoa_r+0x6b2>
 801bec8:	9a07      	ldr	r2, [sp, #28]
 801beca:	2a00      	cmp	r2, #0
 801becc:	f000 80a5 	beq.w	801c01a <_dtoa_r+0x7c2>
 801bed0:	2c00      	cmp	r4, #0
 801bed2:	dd13      	ble.n	801befc <_dtoa_r+0x6a4>
 801bed4:	4639      	mov	r1, r7
 801bed6:	4622      	mov	r2, r4
 801bed8:	4630      	mov	r0, r6
 801beda:	930d      	str	r3, [sp, #52]	; 0x34
 801bedc:	f000 fcde 	bl	801c89c <__pow5mult>
 801bee0:	462a      	mov	r2, r5
 801bee2:	4601      	mov	r1, r0
 801bee4:	4607      	mov	r7, r0
 801bee6:	4630      	mov	r0, r6
 801bee8:	f000 fc2e 	bl	801c748 <__multiply>
 801beec:	4629      	mov	r1, r5
 801beee:	9009      	str	r0, [sp, #36]	; 0x24
 801bef0:	4630      	mov	r0, r6
 801bef2:	f000 fb5d 	bl	801c5b0 <_Bfree>
 801bef6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801bef8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801befa:	4615      	mov	r5, r2
 801befc:	1b1a      	subs	r2, r3, r4
 801befe:	d004      	beq.n	801bf0a <_dtoa_r+0x6b2>
 801bf00:	4629      	mov	r1, r5
 801bf02:	4630      	mov	r0, r6
 801bf04:	f000 fcca 	bl	801c89c <__pow5mult>
 801bf08:	4605      	mov	r5, r0
 801bf0a:	2101      	movs	r1, #1
 801bf0c:	4630      	mov	r0, r6
 801bf0e:	f000 fc05 	bl	801c71c <__i2b>
 801bf12:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801bf14:	2b00      	cmp	r3, #0
 801bf16:	4604      	mov	r4, r0
 801bf18:	f340 8081 	ble.w	801c01e <_dtoa_r+0x7c6>
 801bf1c:	461a      	mov	r2, r3
 801bf1e:	4601      	mov	r1, r0
 801bf20:	4630      	mov	r0, r6
 801bf22:	f000 fcbb 	bl	801c89c <__pow5mult>
 801bf26:	9b06      	ldr	r3, [sp, #24]
 801bf28:	2b01      	cmp	r3, #1
 801bf2a:	4604      	mov	r4, r0
 801bf2c:	dd7a      	ble.n	801c024 <_dtoa_r+0x7cc>
 801bf2e:	2300      	movs	r3, #0
 801bf30:	9309      	str	r3, [sp, #36]	; 0x24
 801bf32:	6922      	ldr	r2, [r4, #16]
 801bf34:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 801bf38:	6910      	ldr	r0, [r2, #16]
 801bf3a:	f000 fba1 	bl	801c680 <__hi0bits>
 801bf3e:	f1c0 0020 	rsb	r0, r0, #32
 801bf42:	9b05      	ldr	r3, [sp, #20]
 801bf44:	4418      	add	r0, r3
 801bf46:	f010 001f 	ands.w	r0, r0, #31
 801bf4a:	f000 8093 	beq.w	801c074 <_dtoa_r+0x81c>
 801bf4e:	f1c0 0220 	rsb	r2, r0, #32
 801bf52:	2a04      	cmp	r2, #4
 801bf54:	f340 8085 	ble.w	801c062 <_dtoa_r+0x80a>
 801bf58:	9b04      	ldr	r3, [sp, #16]
 801bf5a:	f1c0 001c 	rsb	r0, r0, #28
 801bf5e:	4403      	add	r3, r0
 801bf60:	9304      	str	r3, [sp, #16]
 801bf62:	9b05      	ldr	r3, [sp, #20]
 801bf64:	4480      	add	r8, r0
 801bf66:	4403      	add	r3, r0
 801bf68:	9305      	str	r3, [sp, #20]
 801bf6a:	9b04      	ldr	r3, [sp, #16]
 801bf6c:	2b00      	cmp	r3, #0
 801bf6e:	dd05      	ble.n	801bf7c <_dtoa_r+0x724>
 801bf70:	4629      	mov	r1, r5
 801bf72:	461a      	mov	r2, r3
 801bf74:	4630      	mov	r0, r6
 801bf76:	f000 fceb 	bl	801c950 <__lshift>
 801bf7a:	4605      	mov	r5, r0
 801bf7c:	9b05      	ldr	r3, [sp, #20]
 801bf7e:	2b00      	cmp	r3, #0
 801bf80:	dd05      	ble.n	801bf8e <_dtoa_r+0x736>
 801bf82:	4621      	mov	r1, r4
 801bf84:	461a      	mov	r2, r3
 801bf86:	4630      	mov	r0, r6
 801bf88:	f000 fce2 	bl	801c950 <__lshift>
 801bf8c:	4604      	mov	r4, r0
 801bf8e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801bf90:	2b00      	cmp	r3, #0
 801bf92:	d071      	beq.n	801c078 <_dtoa_r+0x820>
 801bf94:	4621      	mov	r1, r4
 801bf96:	4628      	mov	r0, r5
 801bf98:	f000 fd46 	bl	801ca28 <__mcmp>
 801bf9c:	2800      	cmp	r0, #0
 801bf9e:	da6b      	bge.n	801c078 <_dtoa_r+0x820>
 801bfa0:	2300      	movs	r3, #0
 801bfa2:	4629      	mov	r1, r5
 801bfa4:	220a      	movs	r2, #10
 801bfa6:	4630      	mov	r0, r6
 801bfa8:	f000 fb24 	bl	801c5f4 <__multadd>
 801bfac:	9b07      	ldr	r3, [sp, #28]
 801bfae:	f10b 3bff 	add.w	fp, fp, #4294967295
 801bfb2:	4605      	mov	r5, r0
 801bfb4:	2b00      	cmp	r3, #0
 801bfb6:	f000 8197 	beq.w	801c2e8 <_dtoa_r+0xa90>
 801bfba:	4639      	mov	r1, r7
 801bfbc:	2300      	movs	r3, #0
 801bfbe:	220a      	movs	r2, #10
 801bfc0:	4630      	mov	r0, r6
 801bfc2:	f000 fb17 	bl	801c5f4 <__multadd>
 801bfc6:	f1ba 0f00 	cmp.w	sl, #0
 801bfca:	4607      	mov	r7, r0
 801bfcc:	f300 8093 	bgt.w	801c0f6 <_dtoa_r+0x89e>
 801bfd0:	9b06      	ldr	r3, [sp, #24]
 801bfd2:	2b02      	cmp	r3, #2
 801bfd4:	dc57      	bgt.n	801c086 <_dtoa_r+0x82e>
 801bfd6:	e08e      	b.n	801c0f6 <_dtoa_r+0x89e>
 801bfd8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801bfda:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 801bfde:	e751      	b.n	801be84 <_dtoa_r+0x62c>
 801bfe0:	f109 34ff 	add.w	r4, r9, #4294967295
 801bfe4:	42a3      	cmp	r3, r4
 801bfe6:	bfbf      	itttt	lt
 801bfe8:	1ae2      	sublt	r2, r4, r3
 801bfea:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 801bfec:	189b      	addlt	r3, r3, r2
 801bfee:	930a      	strlt	r3, [sp, #40]	; 0x28
 801bff0:	bfae      	itee	ge
 801bff2:	1b1c      	subge	r4, r3, r4
 801bff4:	4623      	movlt	r3, r4
 801bff6:	2400      	movlt	r4, #0
 801bff8:	f1b9 0f00 	cmp.w	r9, #0
 801bffc:	bfb5      	itete	lt
 801bffe:	9a04      	ldrlt	r2, [sp, #16]
 801c000:	f8dd 8010 	ldrge.w	r8, [sp, #16]
 801c004:	eba2 0809 	sublt.w	r8, r2, r9
 801c008:	464a      	movge	r2, r9
 801c00a:	bfb8      	it	lt
 801c00c:	2200      	movlt	r2, #0
 801c00e:	e73c      	b.n	801be8a <_dtoa_r+0x632>
 801c010:	f8dd 8010 	ldr.w	r8, [sp, #16]
 801c014:	9f07      	ldr	r7, [sp, #28]
 801c016:	461c      	mov	r4, r3
 801c018:	e744      	b.n	801bea4 <_dtoa_r+0x64c>
 801c01a:	461a      	mov	r2, r3
 801c01c:	e770      	b.n	801bf00 <_dtoa_r+0x6a8>
 801c01e:	9b06      	ldr	r3, [sp, #24]
 801c020:	2b01      	cmp	r3, #1
 801c022:	dc18      	bgt.n	801c056 <_dtoa_r+0x7fe>
 801c024:	9b02      	ldr	r3, [sp, #8]
 801c026:	b9b3      	cbnz	r3, 801c056 <_dtoa_r+0x7fe>
 801c028:	9b03      	ldr	r3, [sp, #12]
 801c02a:	f3c3 0213 	ubfx	r2, r3, #0, #20
 801c02e:	b9a2      	cbnz	r2, 801c05a <_dtoa_r+0x802>
 801c030:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 801c034:	0d12      	lsrs	r2, r2, #20
 801c036:	0512      	lsls	r2, r2, #20
 801c038:	b18a      	cbz	r2, 801c05e <_dtoa_r+0x806>
 801c03a:	9b04      	ldr	r3, [sp, #16]
 801c03c:	3301      	adds	r3, #1
 801c03e:	9304      	str	r3, [sp, #16]
 801c040:	9b05      	ldr	r3, [sp, #20]
 801c042:	3301      	adds	r3, #1
 801c044:	9305      	str	r3, [sp, #20]
 801c046:	2301      	movs	r3, #1
 801c048:	9309      	str	r3, [sp, #36]	; 0x24
 801c04a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801c04c:	2b00      	cmp	r3, #0
 801c04e:	f47f af70 	bne.w	801bf32 <_dtoa_r+0x6da>
 801c052:	2001      	movs	r0, #1
 801c054:	e775      	b.n	801bf42 <_dtoa_r+0x6ea>
 801c056:	2300      	movs	r3, #0
 801c058:	e7f6      	b.n	801c048 <_dtoa_r+0x7f0>
 801c05a:	9b02      	ldr	r3, [sp, #8]
 801c05c:	e7f4      	b.n	801c048 <_dtoa_r+0x7f0>
 801c05e:	9209      	str	r2, [sp, #36]	; 0x24
 801c060:	e7f3      	b.n	801c04a <_dtoa_r+0x7f2>
 801c062:	d082      	beq.n	801bf6a <_dtoa_r+0x712>
 801c064:	9b04      	ldr	r3, [sp, #16]
 801c066:	321c      	adds	r2, #28
 801c068:	4413      	add	r3, r2
 801c06a:	9304      	str	r3, [sp, #16]
 801c06c:	9b05      	ldr	r3, [sp, #20]
 801c06e:	4490      	add	r8, r2
 801c070:	4413      	add	r3, r2
 801c072:	e779      	b.n	801bf68 <_dtoa_r+0x710>
 801c074:	4602      	mov	r2, r0
 801c076:	e7f5      	b.n	801c064 <_dtoa_r+0x80c>
 801c078:	f1b9 0f00 	cmp.w	r9, #0
 801c07c:	dc36      	bgt.n	801c0ec <_dtoa_r+0x894>
 801c07e:	9b06      	ldr	r3, [sp, #24]
 801c080:	2b02      	cmp	r3, #2
 801c082:	dd33      	ble.n	801c0ec <_dtoa_r+0x894>
 801c084:	46ca      	mov	sl, r9
 801c086:	f1ba 0f00 	cmp.w	sl, #0
 801c08a:	d10d      	bne.n	801c0a8 <_dtoa_r+0x850>
 801c08c:	4621      	mov	r1, r4
 801c08e:	4653      	mov	r3, sl
 801c090:	2205      	movs	r2, #5
 801c092:	4630      	mov	r0, r6
 801c094:	f000 faae 	bl	801c5f4 <__multadd>
 801c098:	4601      	mov	r1, r0
 801c09a:	4604      	mov	r4, r0
 801c09c:	4628      	mov	r0, r5
 801c09e:	f000 fcc3 	bl	801ca28 <__mcmp>
 801c0a2:	2800      	cmp	r0, #0
 801c0a4:	f73f ade4 	bgt.w	801bc70 <_dtoa_r+0x418>
 801c0a8:	9b08      	ldr	r3, [sp, #32]
 801c0aa:	f8dd 8004 	ldr.w	r8, [sp, #4]
 801c0ae:	ea6f 0b03 	mvn.w	fp, r3
 801c0b2:	f04f 0900 	mov.w	r9, #0
 801c0b6:	4621      	mov	r1, r4
 801c0b8:	4630      	mov	r0, r6
 801c0ba:	f000 fa79 	bl	801c5b0 <_Bfree>
 801c0be:	2f00      	cmp	r7, #0
 801c0c0:	f43f aea1 	beq.w	801be06 <_dtoa_r+0x5ae>
 801c0c4:	f1b9 0f00 	cmp.w	r9, #0
 801c0c8:	d005      	beq.n	801c0d6 <_dtoa_r+0x87e>
 801c0ca:	45b9      	cmp	r9, r7
 801c0cc:	d003      	beq.n	801c0d6 <_dtoa_r+0x87e>
 801c0ce:	4649      	mov	r1, r9
 801c0d0:	4630      	mov	r0, r6
 801c0d2:	f000 fa6d 	bl	801c5b0 <_Bfree>
 801c0d6:	4639      	mov	r1, r7
 801c0d8:	4630      	mov	r0, r6
 801c0da:	f000 fa69 	bl	801c5b0 <_Bfree>
 801c0de:	e692      	b.n	801be06 <_dtoa_r+0x5ae>
 801c0e0:	2400      	movs	r4, #0
 801c0e2:	4627      	mov	r7, r4
 801c0e4:	e7e0      	b.n	801c0a8 <_dtoa_r+0x850>
 801c0e6:	4693      	mov	fp, r2
 801c0e8:	4627      	mov	r7, r4
 801c0ea:	e5c1      	b.n	801bc70 <_dtoa_r+0x418>
 801c0ec:	9b07      	ldr	r3, [sp, #28]
 801c0ee:	46ca      	mov	sl, r9
 801c0f0:	2b00      	cmp	r3, #0
 801c0f2:	f000 8100 	beq.w	801c2f6 <_dtoa_r+0xa9e>
 801c0f6:	f1b8 0f00 	cmp.w	r8, #0
 801c0fa:	dd05      	ble.n	801c108 <_dtoa_r+0x8b0>
 801c0fc:	4639      	mov	r1, r7
 801c0fe:	4642      	mov	r2, r8
 801c100:	4630      	mov	r0, r6
 801c102:	f000 fc25 	bl	801c950 <__lshift>
 801c106:	4607      	mov	r7, r0
 801c108:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801c10a:	2b00      	cmp	r3, #0
 801c10c:	d05d      	beq.n	801c1ca <_dtoa_r+0x972>
 801c10e:	6879      	ldr	r1, [r7, #4]
 801c110:	4630      	mov	r0, r6
 801c112:	f000 fa0d 	bl	801c530 <_Balloc>
 801c116:	4680      	mov	r8, r0
 801c118:	b928      	cbnz	r0, 801c126 <_dtoa_r+0x8ce>
 801c11a:	4b82      	ldr	r3, [pc, #520]	; (801c324 <_dtoa_r+0xacc>)
 801c11c:	4602      	mov	r2, r0
 801c11e:	f240 21ef 	movw	r1, #751	; 0x2ef
 801c122:	f7ff bbb1 	b.w	801b888 <_dtoa_r+0x30>
 801c126:	693a      	ldr	r2, [r7, #16]
 801c128:	3202      	adds	r2, #2
 801c12a:	0092      	lsls	r2, r2, #2
 801c12c:	f107 010c 	add.w	r1, r7, #12
 801c130:	300c      	adds	r0, #12
 801c132:	f7ff fadc 	bl	801b6ee <memcpy>
 801c136:	2201      	movs	r2, #1
 801c138:	4641      	mov	r1, r8
 801c13a:	4630      	mov	r0, r6
 801c13c:	f000 fc08 	bl	801c950 <__lshift>
 801c140:	9b01      	ldr	r3, [sp, #4]
 801c142:	3301      	adds	r3, #1
 801c144:	9304      	str	r3, [sp, #16]
 801c146:	9b01      	ldr	r3, [sp, #4]
 801c148:	4453      	add	r3, sl
 801c14a:	9308      	str	r3, [sp, #32]
 801c14c:	9b02      	ldr	r3, [sp, #8]
 801c14e:	f003 0301 	and.w	r3, r3, #1
 801c152:	46b9      	mov	r9, r7
 801c154:	9307      	str	r3, [sp, #28]
 801c156:	4607      	mov	r7, r0
 801c158:	9b04      	ldr	r3, [sp, #16]
 801c15a:	4621      	mov	r1, r4
 801c15c:	3b01      	subs	r3, #1
 801c15e:	4628      	mov	r0, r5
 801c160:	9302      	str	r3, [sp, #8]
 801c162:	f7ff faf1 	bl	801b748 <quorem>
 801c166:	4603      	mov	r3, r0
 801c168:	3330      	adds	r3, #48	; 0x30
 801c16a:	9005      	str	r0, [sp, #20]
 801c16c:	4649      	mov	r1, r9
 801c16e:	4628      	mov	r0, r5
 801c170:	9309      	str	r3, [sp, #36]	; 0x24
 801c172:	f000 fc59 	bl	801ca28 <__mcmp>
 801c176:	463a      	mov	r2, r7
 801c178:	4682      	mov	sl, r0
 801c17a:	4621      	mov	r1, r4
 801c17c:	4630      	mov	r0, r6
 801c17e:	f000 fc6f 	bl	801ca60 <__mdiff>
 801c182:	68c2      	ldr	r2, [r0, #12]
 801c184:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801c186:	4680      	mov	r8, r0
 801c188:	bb0a      	cbnz	r2, 801c1ce <_dtoa_r+0x976>
 801c18a:	4601      	mov	r1, r0
 801c18c:	4628      	mov	r0, r5
 801c18e:	f000 fc4b 	bl	801ca28 <__mcmp>
 801c192:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801c194:	4602      	mov	r2, r0
 801c196:	4641      	mov	r1, r8
 801c198:	4630      	mov	r0, r6
 801c19a:	e9cd 3209 	strd	r3, r2, [sp, #36]	; 0x24
 801c19e:	f000 fa07 	bl	801c5b0 <_Bfree>
 801c1a2:	9b06      	ldr	r3, [sp, #24]
 801c1a4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801c1a6:	f8dd 8010 	ldr.w	r8, [sp, #16]
 801c1aa:	ea43 0102 	orr.w	r1, r3, r2
 801c1ae:	9b07      	ldr	r3, [sp, #28]
 801c1b0:	4319      	orrs	r1, r3
 801c1b2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801c1b4:	d10d      	bne.n	801c1d2 <_dtoa_r+0x97a>
 801c1b6:	2b39      	cmp	r3, #57	; 0x39
 801c1b8:	d029      	beq.n	801c20e <_dtoa_r+0x9b6>
 801c1ba:	f1ba 0f00 	cmp.w	sl, #0
 801c1be:	dd01      	ble.n	801c1c4 <_dtoa_r+0x96c>
 801c1c0:	9b05      	ldr	r3, [sp, #20]
 801c1c2:	3331      	adds	r3, #49	; 0x31
 801c1c4:	9a02      	ldr	r2, [sp, #8]
 801c1c6:	7013      	strb	r3, [r2, #0]
 801c1c8:	e775      	b.n	801c0b6 <_dtoa_r+0x85e>
 801c1ca:	4638      	mov	r0, r7
 801c1cc:	e7b8      	b.n	801c140 <_dtoa_r+0x8e8>
 801c1ce:	2201      	movs	r2, #1
 801c1d0:	e7e1      	b.n	801c196 <_dtoa_r+0x93e>
 801c1d2:	f1ba 0f00 	cmp.w	sl, #0
 801c1d6:	db06      	blt.n	801c1e6 <_dtoa_r+0x98e>
 801c1d8:	9906      	ldr	r1, [sp, #24]
 801c1da:	ea41 0a0a 	orr.w	sl, r1, sl
 801c1de:	9907      	ldr	r1, [sp, #28]
 801c1e0:	ea5a 0a01 	orrs.w	sl, sl, r1
 801c1e4:	d120      	bne.n	801c228 <_dtoa_r+0x9d0>
 801c1e6:	2a00      	cmp	r2, #0
 801c1e8:	ddec      	ble.n	801c1c4 <_dtoa_r+0x96c>
 801c1ea:	4629      	mov	r1, r5
 801c1ec:	2201      	movs	r2, #1
 801c1ee:	4630      	mov	r0, r6
 801c1f0:	9304      	str	r3, [sp, #16]
 801c1f2:	f000 fbad 	bl	801c950 <__lshift>
 801c1f6:	4621      	mov	r1, r4
 801c1f8:	4605      	mov	r5, r0
 801c1fa:	f000 fc15 	bl	801ca28 <__mcmp>
 801c1fe:	2800      	cmp	r0, #0
 801c200:	9b04      	ldr	r3, [sp, #16]
 801c202:	dc02      	bgt.n	801c20a <_dtoa_r+0x9b2>
 801c204:	d1de      	bne.n	801c1c4 <_dtoa_r+0x96c>
 801c206:	07da      	lsls	r2, r3, #31
 801c208:	d5dc      	bpl.n	801c1c4 <_dtoa_r+0x96c>
 801c20a:	2b39      	cmp	r3, #57	; 0x39
 801c20c:	d1d8      	bne.n	801c1c0 <_dtoa_r+0x968>
 801c20e:	9a02      	ldr	r2, [sp, #8]
 801c210:	2339      	movs	r3, #57	; 0x39
 801c212:	7013      	strb	r3, [r2, #0]
 801c214:	4643      	mov	r3, r8
 801c216:	4698      	mov	r8, r3
 801c218:	3b01      	subs	r3, #1
 801c21a:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 801c21e:	2a39      	cmp	r2, #57	; 0x39
 801c220:	d051      	beq.n	801c2c6 <_dtoa_r+0xa6e>
 801c222:	3201      	adds	r2, #1
 801c224:	701a      	strb	r2, [r3, #0]
 801c226:	e746      	b.n	801c0b6 <_dtoa_r+0x85e>
 801c228:	2a00      	cmp	r2, #0
 801c22a:	dd03      	ble.n	801c234 <_dtoa_r+0x9dc>
 801c22c:	2b39      	cmp	r3, #57	; 0x39
 801c22e:	d0ee      	beq.n	801c20e <_dtoa_r+0x9b6>
 801c230:	3301      	adds	r3, #1
 801c232:	e7c7      	b.n	801c1c4 <_dtoa_r+0x96c>
 801c234:	9a04      	ldr	r2, [sp, #16]
 801c236:	9908      	ldr	r1, [sp, #32]
 801c238:	f802 3c01 	strb.w	r3, [r2, #-1]
 801c23c:	428a      	cmp	r2, r1
 801c23e:	d02b      	beq.n	801c298 <_dtoa_r+0xa40>
 801c240:	4629      	mov	r1, r5
 801c242:	2300      	movs	r3, #0
 801c244:	220a      	movs	r2, #10
 801c246:	4630      	mov	r0, r6
 801c248:	f000 f9d4 	bl	801c5f4 <__multadd>
 801c24c:	45b9      	cmp	r9, r7
 801c24e:	4605      	mov	r5, r0
 801c250:	f04f 0300 	mov.w	r3, #0
 801c254:	f04f 020a 	mov.w	r2, #10
 801c258:	4649      	mov	r1, r9
 801c25a:	4630      	mov	r0, r6
 801c25c:	d107      	bne.n	801c26e <_dtoa_r+0xa16>
 801c25e:	f000 f9c9 	bl	801c5f4 <__multadd>
 801c262:	4681      	mov	r9, r0
 801c264:	4607      	mov	r7, r0
 801c266:	9b04      	ldr	r3, [sp, #16]
 801c268:	3301      	adds	r3, #1
 801c26a:	9304      	str	r3, [sp, #16]
 801c26c:	e774      	b.n	801c158 <_dtoa_r+0x900>
 801c26e:	f000 f9c1 	bl	801c5f4 <__multadd>
 801c272:	4639      	mov	r1, r7
 801c274:	4681      	mov	r9, r0
 801c276:	2300      	movs	r3, #0
 801c278:	220a      	movs	r2, #10
 801c27a:	4630      	mov	r0, r6
 801c27c:	f000 f9ba 	bl	801c5f4 <__multadd>
 801c280:	4607      	mov	r7, r0
 801c282:	e7f0      	b.n	801c266 <_dtoa_r+0xa0e>
 801c284:	f1ba 0f00 	cmp.w	sl, #0
 801c288:	9a01      	ldr	r2, [sp, #4]
 801c28a:	bfcc      	ite	gt
 801c28c:	46d0      	movgt	r8, sl
 801c28e:	f04f 0801 	movle.w	r8, #1
 801c292:	4490      	add	r8, r2
 801c294:	f04f 0900 	mov.w	r9, #0
 801c298:	4629      	mov	r1, r5
 801c29a:	2201      	movs	r2, #1
 801c29c:	4630      	mov	r0, r6
 801c29e:	9302      	str	r3, [sp, #8]
 801c2a0:	f000 fb56 	bl	801c950 <__lshift>
 801c2a4:	4621      	mov	r1, r4
 801c2a6:	4605      	mov	r5, r0
 801c2a8:	f000 fbbe 	bl	801ca28 <__mcmp>
 801c2ac:	2800      	cmp	r0, #0
 801c2ae:	dcb1      	bgt.n	801c214 <_dtoa_r+0x9bc>
 801c2b0:	d102      	bne.n	801c2b8 <_dtoa_r+0xa60>
 801c2b2:	9b02      	ldr	r3, [sp, #8]
 801c2b4:	07db      	lsls	r3, r3, #31
 801c2b6:	d4ad      	bmi.n	801c214 <_dtoa_r+0x9bc>
 801c2b8:	4643      	mov	r3, r8
 801c2ba:	4698      	mov	r8, r3
 801c2bc:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801c2c0:	2a30      	cmp	r2, #48	; 0x30
 801c2c2:	d0fa      	beq.n	801c2ba <_dtoa_r+0xa62>
 801c2c4:	e6f7      	b.n	801c0b6 <_dtoa_r+0x85e>
 801c2c6:	9a01      	ldr	r2, [sp, #4]
 801c2c8:	429a      	cmp	r2, r3
 801c2ca:	d1a4      	bne.n	801c216 <_dtoa_r+0x9be>
 801c2cc:	f10b 0b01 	add.w	fp, fp, #1
 801c2d0:	2331      	movs	r3, #49	; 0x31
 801c2d2:	e778      	b.n	801c1c6 <_dtoa_r+0x96e>
 801c2d4:	4b14      	ldr	r3, [pc, #80]	; (801c328 <_dtoa_r+0xad0>)
 801c2d6:	f7ff bb2a 	b.w	801b92e <_dtoa_r+0xd6>
 801c2da:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801c2dc:	2b00      	cmp	r3, #0
 801c2de:	f47f ab05 	bne.w	801b8ec <_dtoa_r+0x94>
 801c2e2:	4b12      	ldr	r3, [pc, #72]	; (801c32c <_dtoa_r+0xad4>)
 801c2e4:	f7ff bb23 	b.w	801b92e <_dtoa_r+0xd6>
 801c2e8:	f1ba 0f00 	cmp.w	sl, #0
 801c2ec:	dc03      	bgt.n	801c2f6 <_dtoa_r+0xa9e>
 801c2ee:	9b06      	ldr	r3, [sp, #24]
 801c2f0:	2b02      	cmp	r3, #2
 801c2f2:	f73f aec8 	bgt.w	801c086 <_dtoa_r+0x82e>
 801c2f6:	f8dd 8004 	ldr.w	r8, [sp, #4]
 801c2fa:	4621      	mov	r1, r4
 801c2fc:	4628      	mov	r0, r5
 801c2fe:	f7ff fa23 	bl	801b748 <quorem>
 801c302:	f100 0330 	add.w	r3, r0, #48	; 0x30
 801c306:	f808 3b01 	strb.w	r3, [r8], #1
 801c30a:	9a01      	ldr	r2, [sp, #4]
 801c30c:	eba8 0202 	sub.w	r2, r8, r2
 801c310:	4592      	cmp	sl, r2
 801c312:	ddb7      	ble.n	801c284 <_dtoa_r+0xa2c>
 801c314:	4629      	mov	r1, r5
 801c316:	2300      	movs	r3, #0
 801c318:	220a      	movs	r2, #10
 801c31a:	4630      	mov	r0, r6
 801c31c:	f000 f96a 	bl	801c5f4 <__multadd>
 801c320:	4605      	mov	r5, r0
 801c322:	e7ea      	b.n	801c2fa <_dtoa_r+0xaa2>
 801c324:	08021073 	.word	0x08021073
 801c328:	08020fae 	.word	0x08020fae
 801c32c:	0802100e 	.word	0x0802100e

0801c330 <_free_r>:
 801c330:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801c332:	2900      	cmp	r1, #0
 801c334:	d044      	beq.n	801c3c0 <_free_r+0x90>
 801c336:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801c33a:	9001      	str	r0, [sp, #4]
 801c33c:	2b00      	cmp	r3, #0
 801c33e:	f1a1 0404 	sub.w	r4, r1, #4
 801c342:	bfb8      	it	lt
 801c344:	18e4      	addlt	r4, r4, r3
 801c346:	f000 f8e7 	bl	801c518 <__malloc_lock>
 801c34a:	4a1e      	ldr	r2, [pc, #120]	; (801c3c4 <_free_r+0x94>)
 801c34c:	9801      	ldr	r0, [sp, #4]
 801c34e:	6813      	ldr	r3, [r2, #0]
 801c350:	b933      	cbnz	r3, 801c360 <_free_r+0x30>
 801c352:	6063      	str	r3, [r4, #4]
 801c354:	6014      	str	r4, [r2, #0]
 801c356:	b003      	add	sp, #12
 801c358:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801c35c:	f000 b8e2 	b.w	801c524 <__malloc_unlock>
 801c360:	42a3      	cmp	r3, r4
 801c362:	d908      	bls.n	801c376 <_free_r+0x46>
 801c364:	6825      	ldr	r5, [r4, #0]
 801c366:	1961      	adds	r1, r4, r5
 801c368:	428b      	cmp	r3, r1
 801c36a:	bf01      	itttt	eq
 801c36c:	6819      	ldreq	r1, [r3, #0]
 801c36e:	685b      	ldreq	r3, [r3, #4]
 801c370:	1949      	addeq	r1, r1, r5
 801c372:	6021      	streq	r1, [r4, #0]
 801c374:	e7ed      	b.n	801c352 <_free_r+0x22>
 801c376:	461a      	mov	r2, r3
 801c378:	685b      	ldr	r3, [r3, #4]
 801c37a:	b10b      	cbz	r3, 801c380 <_free_r+0x50>
 801c37c:	42a3      	cmp	r3, r4
 801c37e:	d9fa      	bls.n	801c376 <_free_r+0x46>
 801c380:	6811      	ldr	r1, [r2, #0]
 801c382:	1855      	adds	r5, r2, r1
 801c384:	42a5      	cmp	r5, r4
 801c386:	d10b      	bne.n	801c3a0 <_free_r+0x70>
 801c388:	6824      	ldr	r4, [r4, #0]
 801c38a:	4421      	add	r1, r4
 801c38c:	1854      	adds	r4, r2, r1
 801c38e:	42a3      	cmp	r3, r4
 801c390:	6011      	str	r1, [r2, #0]
 801c392:	d1e0      	bne.n	801c356 <_free_r+0x26>
 801c394:	681c      	ldr	r4, [r3, #0]
 801c396:	685b      	ldr	r3, [r3, #4]
 801c398:	6053      	str	r3, [r2, #4]
 801c39a:	440c      	add	r4, r1
 801c39c:	6014      	str	r4, [r2, #0]
 801c39e:	e7da      	b.n	801c356 <_free_r+0x26>
 801c3a0:	d902      	bls.n	801c3a8 <_free_r+0x78>
 801c3a2:	230c      	movs	r3, #12
 801c3a4:	6003      	str	r3, [r0, #0]
 801c3a6:	e7d6      	b.n	801c356 <_free_r+0x26>
 801c3a8:	6825      	ldr	r5, [r4, #0]
 801c3aa:	1961      	adds	r1, r4, r5
 801c3ac:	428b      	cmp	r3, r1
 801c3ae:	bf04      	itt	eq
 801c3b0:	6819      	ldreq	r1, [r3, #0]
 801c3b2:	685b      	ldreq	r3, [r3, #4]
 801c3b4:	6063      	str	r3, [r4, #4]
 801c3b6:	bf04      	itt	eq
 801c3b8:	1949      	addeq	r1, r1, r5
 801c3ba:	6021      	streq	r1, [r4, #0]
 801c3bc:	6054      	str	r4, [r2, #4]
 801c3be:	e7ca      	b.n	801c356 <_free_r+0x26>
 801c3c0:	b003      	add	sp, #12
 801c3c2:	bd30      	pop	{r4, r5, pc}
 801c3c4:	2000745c 	.word	0x2000745c

0801c3c8 <malloc>:
 801c3c8:	4b02      	ldr	r3, [pc, #8]	; (801c3d4 <malloc+0xc>)
 801c3ca:	4601      	mov	r1, r0
 801c3cc:	6818      	ldr	r0, [r3, #0]
 801c3ce:	f000 b823 	b.w	801c418 <_malloc_r>
 801c3d2:	bf00      	nop
 801c3d4:	200001cc 	.word	0x200001cc

0801c3d8 <sbrk_aligned>:
 801c3d8:	b570      	push	{r4, r5, r6, lr}
 801c3da:	4e0e      	ldr	r6, [pc, #56]	; (801c414 <sbrk_aligned+0x3c>)
 801c3dc:	460c      	mov	r4, r1
 801c3de:	6831      	ldr	r1, [r6, #0]
 801c3e0:	4605      	mov	r5, r0
 801c3e2:	b911      	cbnz	r1, 801c3ea <sbrk_aligned+0x12>
 801c3e4:	f001 f800 	bl	801d3e8 <_sbrk_r>
 801c3e8:	6030      	str	r0, [r6, #0]
 801c3ea:	4621      	mov	r1, r4
 801c3ec:	4628      	mov	r0, r5
 801c3ee:	f000 fffb 	bl	801d3e8 <_sbrk_r>
 801c3f2:	1c43      	adds	r3, r0, #1
 801c3f4:	d00a      	beq.n	801c40c <sbrk_aligned+0x34>
 801c3f6:	1cc4      	adds	r4, r0, #3
 801c3f8:	f024 0403 	bic.w	r4, r4, #3
 801c3fc:	42a0      	cmp	r0, r4
 801c3fe:	d007      	beq.n	801c410 <sbrk_aligned+0x38>
 801c400:	1a21      	subs	r1, r4, r0
 801c402:	4628      	mov	r0, r5
 801c404:	f000 fff0 	bl	801d3e8 <_sbrk_r>
 801c408:	3001      	adds	r0, #1
 801c40a:	d101      	bne.n	801c410 <sbrk_aligned+0x38>
 801c40c:	f04f 34ff 	mov.w	r4, #4294967295
 801c410:	4620      	mov	r0, r4
 801c412:	bd70      	pop	{r4, r5, r6, pc}
 801c414:	20007460 	.word	0x20007460

0801c418 <_malloc_r>:
 801c418:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801c41c:	1ccd      	adds	r5, r1, #3
 801c41e:	f025 0503 	bic.w	r5, r5, #3
 801c422:	3508      	adds	r5, #8
 801c424:	2d0c      	cmp	r5, #12
 801c426:	bf38      	it	cc
 801c428:	250c      	movcc	r5, #12
 801c42a:	2d00      	cmp	r5, #0
 801c42c:	4607      	mov	r7, r0
 801c42e:	db01      	blt.n	801c434 <_malloc_r+0x1c>
 801c430:	42a9      	cmp	r1, r5
 801c432:	d905      	bls.n	801c440 <_malloc_r+0x28>
 801c434:	230c      	movs	r3, #12
 801c436:	603b      	str	r3, [r7, #0]
 801c438:	2600      	movs	r6, #0
 801c43a:	4630      	mov	r0, r6
 801c43c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801c440:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 801c514 <_malloc_r+0xfc>
 801c444:	f000 f868 	bl	801c518 <__malloc_lock>
 801c448:	f8d8 3000 	ldr.w	r3, [r8]
 801c44c:	461c      	mov	r4, r3
 801c44e:	bb5c      	cbnz	r4, 801c4a8 <_malloc_r+0x90>
 801c450:	4629      	mov	r1, r5
 801c452:	4638      	mov	r0, r7
 801c454:	f7ff ffc0 	bl	801c3d8 <sbrk_aligned>
 801c458:	1c43      	adds	r3, r0, #1
 801c45a:	4604      	mov	r4, r0
 801c45c:	d155      	bne.n	801c50a <_malloc_r+0xf2>
 801c45e:	f8d8 4000 	ldr.w	r4, [r8]
 801c462:	4626      	mov	r6, r4
 801c464:	2e00      	cmp	r6, #0
 801c466:	d145      	bne.n	801c4f4 <_malloc_r+0xdc>
 801c468:	2c00      	cmp	r4, #0
 801c46a:	d048      	beq.n	801c4fe <_malloc_r+0xe6>
 801c46c:	6823      	ldr	r3, [r4, #0]
 801c46e:	4631      	mov	r1, r6
 801c470:	4638      	mov	r0, r7
 801c472:	eb04 0903 	add.w	r9, r4, r3
 801c476:	f000 ffb7 	bl	801d3e8 <_sbrk_r>
 801c47a:	4581      	cmp	r9, r0
 801c47c:	d13f      	bne.n	801c4fe <_malloc_r+0xe6>
 801c47e:	6821      	ldr	r1, [r4, #0]
 801c480:	1a6d      	subs	r5, r5, r1
 801c482:	4629      	mov	r1, r5
 801c484:	4638      	mov	r0, r7
 801c486:	f7ff ffa7 	bl	801c3d8 <sbrk_aligned>
 801c48a:	3001      	adds	r0, #1
 801c48c:	d037      	beq.n	801c4fe <_malloc_r+0xe6>
 801c48e:	6823      	ldr	r3, [r4, #0]
 801c490:	442b      	add	r3, r5
 801c492:	6023      	str	r3, [r4, #0]
 801c494:	f8d8 3000 	ldr.w	r3, [r8]
 801c498:	2b00      	cmp	r3, #0
 801c49a:	d038      	beq.n	801c50e <_malloc_r+0xf6>
 801c49c:	685a      	ldr	r2, [r3, #4]
 801c49e:	42a2      	cmp	r2, r4
 801c4a0:	d12b      	bne.n	801c4fa <_malloc_r+0xe2>
 801c4a2:	2200      	movs	r2, #0
 801c4a4:	605a      	str	r2, [r3, #4]
 801c4a6:	e00f      	b.n	801c4c8 <_malloc_r+0xb0>
 801c4a8:	6822      	ldr	r2, [r4, #0]
 801c4aa:	1b52      	subs	r2, r2, r5
 801c4ac:	d41f      	bmi.n	801c4ee <_malloc_r+0xd6>
 801c4ae:	2a0b      	cmp	r2, #11
 801c4b0:	d917      	bls.n	801c4e2 <_malloc_r+0xca>
 801c4b2:	1961      	adds	r1, r4, r5
 801c4b4:	42a3      	cmp	r3, r4
 801c4b6:	6025      	str	r5, [r4, #0]
 801c4b8:	bf18      	it	ne
 801c4ba:	6059      	strne	r1, [r3, #4]
 801c4bc:	6863      	ldr	r3, [r4, #4]
 801c4be:	bf08      	it	eq
 801c4c0:	f8c8 1000 	streq.w	r1, [r8]
 801c4c4:	5162      	str	r2, [r4, r5]
 801c4c6:	604b      	str	r3, [r1, #4]
 801c4c8:	4638      	mov	r0, r7
 801c4ca:	f104 060b 	add.w	r6, r4, #11
 801c4ce:	f000 f829 	bl	801c524 <__malloc_unlock>
 801c4d2:	f026 0607 	bic.w	r6, r6, #7
 801c4d6:	1d23      	adds	r3, r4, #4
 801c4d8:	1af2      	subs	r2, r6, r3
 801c4da:	d0ae      	beq.n	801c43a <_malloc_r+0x22>
 801c4dc:	1b9b      	subs	r3, r3, r6
 801c4de:	50a3      	str	r3, [r4, r2]
 801c4e0:	e7ab      	b.n	801c43a <_malloc_r+0x22>
 801c4e2:	42a3      	cmp	r3, r4
 801c4e4:	6862      	ldr	r2, [r4, #4]
 801c4e6:	d1dd      	bne.n	801c4a4 <_malloc_r+0x8c>
 801c4e8:	f8c8 2000 	str.w	r2, [r8]
 801c4ec:	e7ec      	b.n	801c4c8 <_malloc_r+0xb0>
 801c4ee:	4623      	mov	r3, r4
 801c4f0:	6864      	ldr	r4, [r4, #4]
 801c4f2:	e7ac      	b.n	801c44e <_malloc_r+0x36>
 801c4f4:	4634      	mov	r4, r6
 801c4f6:	6876      	ldr	r6, [r6, #4]
 801c4f8:	e7b4      	b.n	801c464 <_malloc_r+0x4c>
 801c4fa:	4613      	mov	r3, r2
 801c4fc:	e7cc      	b.n	801c498 <_malloc_r+0x80>
 801c4fe:	230c      	movs	r3, #12
 801c500:	603b      	str	r3, [r7, #0]
 801c502:	4638      	mov	r0, r7
 801c504:	f000 f80e 	bl	801c524 <__malloc_unlock>
 801c508:	e797      	b.n	801c43a <_malloc_r+0x22>
 801c50a:	6025      	str	r5, [r4, #0]
 801c50c:	e7dc      	b.n	801c4c8 <_malloc_r+0xb0>
 801c50e:	605b      	str	r3, [r3, #4]
 801c510:	deff      	udf	#255	; 0xff
 801c512:	bf00      	nop
 801c514:	2000745c 	.word	0x2000745c

0801c518 <__malloc_lock>:
 801c518:	4801      	ldr	r0, [pc, #4]	; (801c520 <__malloc_lock+0x8>)
 801c51a:	f7ff b8e6 	b.w	801b6ea <__retarget_lock_acquire_recursive>
 801c51e:	bf00      	nop
 801c520:	20007458 	.word	0x20007458

0801c524 <__malloc_unlock>:
 801c524:	4801      	ldr	r0, [pc, #4]	; (801c52c <__malloc_unlock+0x8>)
 801c526:	f7ff b8e1 	b.w	801b6ec <__retarget_lock_release_recursive>
 801c52a:	bf00      	nop
 801c52c:	20007458 	.word	0x20007458

0801c530 <_Balloc>:
 801c530:	b570      	push	{r4, r5, r6, lr}
 801c532:	69c6      	ldr	r6, [r0, #28]
 801c534:	4604      	mov	r4, r0
 801c536:	460d      	mov	r5, r1
 801c538:	b976      	cbnz	r6, 801c558 <_Balloc+0x28>
 801c53a:	2010      	movs	r0, #16
 801c53c:	f7ff ff44 	bl	801c3c8 <malloc>
 801c540:	4602      	mov	r2, r0
 801c542:	61e0      	str	r0, [r4, #28]
 801c544:	b920      	cbnz	r0, 801c550 <_Balloc+0x20>
 801c546:	4b18      	ldr	r3, [pc, #96]	; (801c5a8 <_Balloc+0x78>)
 801c548:	4818      	ldr	r0, [pc, #96]	; (801c5ac <_Balloc+0x7c>)
 801c54a:	216b      	movs	r1, #107	; 0x6b
 801c54c:	f7ff f8de 	bl	801b70c <__assert_func>
 801c550:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801c554:	6006      	str	r6, [r0, #0]
 801c556:	60c6      	str	r6, [r0, #12]
 801c558:	69e6      	ldr	r6, [r4, #28]
 801c55a:	68f3      	ldr	r3, [r6, #12]
 801c55c:	b183      	cbz	r3, 801c580 <_Balloc+0x50>
 801c55e:	69e3      	ldr	r3, [r4, #28]
 801c560:	68db      	ldr	r3, [r3, #12]
 801c562:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 801c566:	b9b8      	cbnz	r0, 801c598 <_Balloc+0x68>
 801c568:	2101      	movs	r1, #1
 801c56a:	fa01 f605 	lsl.w	r6, r1, r5
 801c56e:	1d72      	adds	r2, r6, #5
 801c570:	0092      	lsls	r2, r2, #2
 801c572:	4620      	mov	r0, r4
 801c574:	f000 ff4f 	bl	801d416 <_calloc_r>
 801c578:	b160      	cbz	r0, 801c594 <_Balloc+0x64>
 801c57a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 801c57e:	e00e      	b.n	801c59e <_Balloc+0x6e>
 801c580:	2221      	movs	r2, #33	; 0x21
 801c582:	2104      	movs	r1, #4
 801c584:	4620      	mov	r0, r4
 801c586:	f000 ff46 	bl	801d416 <_calloc_r>
 801c58a:	69e3      	ldr	r3, [r4, #28]
 801c58c:	60f0      	str	r0, [r6, #12]
 801c58e:	68db      	ldr	r3, [r3, #12]
 801c590:	2b00      	cmp	r3, #0
 801c592:	d1e4      	bne.n	801c55e <_Balloc+0x2e>
 801c594:	2000      	movs	r0, #0
 801c596:	bd70      	pop	{r4, r5, r6, pc}
 801c598:	6802      	ldr	r2, [r0, #0]
 801c59a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801c59e:	2300      	movs	r3, #0
 801c5a0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 801c5a4:	e7f7      	b.n	801c596 <_Balloc+0x66>
 801c5a6:	bf00      	nop
 801c5a8:	08020e2e 	.word	0x08020e2e
 801c5ac:	08021084 	.word	0x08021084

0801c5b0 <_Bfree>:
 801c5b0:	b570      	push	{r4, r5, r6, lr}
 801c5b2:	69c6      	ldr	r6, [r0, #28]
 801c5b4:	4605      	mov	r5, r0
 801c5b6:	460c      	mov	r4, r1
 801c5b8:	b976      	cbnz	r6, 801c5d8 <_Bfree+0x28>
 801c5ba:	2010      	movs	r0, #16
 801c5bc:	f7ff ff04 	bl	801c3c8 <malloc>
 801c5c0:	4602      	mov	r2, r0
 801c5c2:	61e8      	str	r0, [r5, #28]
 801c5c4:	b920      	cbnz	r0, 801c5d0 <_Bfree+0x20>
 801c5c6:	4b09      	ldr	r3, [pc, #36]	; (801c5ec <_Bfree+0x3c>)
 801c5c8:	4809      	ldr	r0, [pc, #36]	; (801c5f0 <_Bfree+0x40>)
 801c5ca:	218f      	movs	r1, #143	; 0x8f
 801c5cc:	f7ff f89e 	bl	801b70c <__assert_func>
 801c5d0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801c5d4:	6006      	str	r6, [r0, #0]
 801c5d6:	60c6      	str	r6, [r0, #12]
 801c5d8:	b13c      	cbz	r4, 801c5ea <_Bfree+0x3a>
 801c5da:	69eb      	ldr	r3, [r5, #28]
 801c5dc:	6862      	ldr	r2, [r4, #4]
 801c5de:	68db      	ldr	r3, [r3, #12]
 801c5e0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801c5e4:	6021      	str	r1, [r4, #0]
 801c5e6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 801c5ea:	bd70      	pop	{r4, r5, r6, pc}
 801c5ec:	08020e2e 	.word	0x08020e2e
 801c5f0:	08021084 	.word	0x08021084

0801c5f4 <__multadd>:
 801c5f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801c5f8:	690d      	ldr	r5, [r1, #16]
 801c5fa:	4607      	mov	r7, r0
 801c5fc:	460c      	mov	r4, r1
 801c5fe:	461e      	mov	r6, r3
 801c600:	f101 0c14 	add.w	ip, r1, #20
 801c604:	2000      	movs	r0, #0
 801c606:	f8dc 3000 	ldr.w	r3, [ip]
 801c60a:	b299      	uxth	r1, r3
 801c60c:	fb02 6101 	mla	r1, r2, r1, r6
 801c610:	0c1e      	lsrs	r6, r3, #16
 801c612:	0c0b      	lsrs	r3, r1, #16
 801c614:	fb02 3306 	mla	r3, r2, r6, r3
 801c618:	b289      	uxth	r1, r1
 801c61a:	3001      	adds	r0, #1
 801c61c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 801c620:	4285      	cmp	r5, r0
 801c622:	f84c 1b04 	str.w	r1, [ip], #4
 801c626:	ea4f 4613 	mov.w	r6, r3, lsr #16
 801c62a:	dcec      	bgt.n	801c606 <__multadd+0x12>
 801c62c:	b30e      	cbz	r6, 801c672 <__multadd+0x7e>
 801c62e:	68a3      	ldr	r3, [r4, #8]
 801c630:	42ab      	cmp	r3, r5
 801c632:	dc19      	bgt.n	801c668 <__multadd+0x74>
 801c634:	6861      	ldr	r1, [r4, #4]
 801c636:	4638      	mov	r0, r7
 801c638:	3101      	adds	r1, #1
 801c63a:	f7ff ff79 	bl	801c530 <_Balloc>
 801c63e:	4680      	mov	r8, r0
 801c640:	b928      	cbnz	r0, 801c64e <__multadd+0x5a>
 801c642:	4602      	mov	r2, r0
 801c644:	4b0c      	ldr	r3, [pc, #48]	; (801c678 <__multadd+0x84>)
 801c646:	480d      	ldr	r0, [pc, #52]	; (801c67c <__multadd+0x88>)
 801c648:	21ba      	movs	r1, #186	; 0xba
 801c64a:	f7ff f85f 	bl	801b70c <__assert_func>
 801c64e:	6922      	ldr	r2, [r4, #16]
 801c650:	3202      	adds	r2, #2
 801c652:	f104 010c 	add.w	r1, r4, #12
 801c656:	0092      	lsls	r2, r2, #2
 801c658:	300c      	adds	r0, #12
 801c65a:	f7ff f848 	bl	801b6ee <memcpy>
 801c65e:	4621      	mov	r1, r4
 801c660:	4638      	mov	r0, r7
 801c662:	f7ff ffa5 	bl	801c5b0 <_Bfree>
 801c666:	4644      	mov	r4, r8
 801c668:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 801c66c:	3501      	adds	r5, #1
 801c66e:	615e      	str	r6, [r3, #20]
 801c670:	6125      	str	r5, [r4, #16]
 801c672:	4620      	mov	r0, r4
 801c674:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801c678:	08021073 	.word	0x08021073
 801c67c:	08021084 	.word	0x08021084

0801c680 <__hi0bits>:
 801c680:	0c03      	lsrs	r3, r0, #16
 801c682:	041b      	lsls	r3, r3, #16
 801c684:	b9d3      	cbnz	r3, 801c6bc <__hi0bits+0x3c>
 801c686:	0400      	lsls	r0, r0, #16
 801c688:	2310      	movs	r3, #16
 801c68a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 801c68e:	bf04      	itt	eq
 801c690:	0200      	lsleq	r0, r0, #8
 801c692:	3308      	addeq	r3, #8
 801c694:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 801c698:	bf04      	itt	eq
 801c69a:	0100      	lsleq	r0, r0, #4
 801c69c:	3304      	addeq	r3, #4
 801c69e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 801c6a2:	bf04      	itt	eq
 801c6a4:	0080      	lsleq	r0, r0, #2
 801c6a6:	3302      	addeq	r3, #2
 801c6a8:	2800      	cmp	r0, #0
 801c6aa:	db05      	blt.n	801c6b8 <__hi0bits+0x38>
 801c6ac:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 801c6b0:	f103 0301 	add.w	r3, r3, #1
 801c6b4:	bf08      	it	eq
 801c6b6:	2320      	moveq	r3, #32
 801c6b8:	4618      	mov	r0, r3
 801c6ba:	4770      	bx	lr
 801c6bc:	2300      	movs	r3, #0
 801c6be:	e7e4      	b.n	801c68a <__hi0bits+0xa>

0801c6c0 <__lo0bits>:
 801c6c0:	6803      	ldr	r3, [r0, #0]
 801c6c2:	f013 0207 	ands.w	r2, r3, #7
 801c6c6:	d00c      	beq.n	801c6e2 <__lo0bits+0x22>
 801c6c8:	07d9      	lsls	r1, r3, #31
 801c6ca:	d422      	bmi.n	801c712 <__lo0bits+0x52>
 801c6cc:	079a      	lsls	r2, r3, #30
 801c6ce:	bf49      	itett	mi
 801c6d0:	085b      	lsrmi	r3, r3, #1
 801c6d2:	089b      	lsrpl	r3, r3, #2
 801c6d4:	6003      	strmi	r3, [r0, #0]
 801c6d6:	2201      	movmi	r2, #1
 801c6d8:	bf5c      	itt	pl
 801c6da:	6003      	strpl	r3, [r0, #0]
 801c6dc:	2202      	movpl	r2, #2
 801c6de:	4610      	mov	r0, r2
 801c6e0:	4770      	bx	lr
 801c6e2:	b299      	uxth	r1, r3
 801c6e4:	b909      	cbnz	r1, 801c6ea <__lo0bits+0x2a>
 801c6e6:	0c1b      	lsrs	r3, r3, #16
 801c6e8:	2210      	movs	r2, #16
 801c6ea:	b2d9      	uxtb	r1, r3
 801c6ec:	b909      	cbnz	r1, 801c6f2 <__lo0bits+0x32>
 801c6ee:	3208      	adds	r2, #8
 801c6f0:	0a1b      	lsrs	r3, r3, #8
 801c6f2:	0719      	lsls	r1, r3, #28
 801c6f4:	bf04      	itt	eq
 801c6f6:	091b      	lsreq	r3, r3, #4
 801c6f8:	3204      	addeq	r2, #4
 801c6fa:	0799      	lsls	r1, r3, #30
 801c6fc:	bf04      	itt	eq
 801c6fe:	089b      	lsreq	r3, r3, #2
 801c700:	3202      	addeq	r2, #2
 801c702:	07d9      	lsls	r1, r3, #31
 801c704:	d403      	bmi.n	801c70e <__lo0bits+0x4e>
 801c706:	085b      	lsrs	r3, r3, #1
 801c708:	f102 0201 	add.w	r2, r2, #1
 801c70c:	d003      	beq.n	801c716 <__lo0bits+0x56>
 801c70e:	6003      	str	r3, [r0, #0]
 801c710:	e7e5      	b.n	801c6de <__lo0bits+0x1e>
 801c712:	2200      	movs	r2, #0
 801c714:	e7e3      	b.n	801c6de <__lo0bits+0x1e>
 801c716:	2220      	movs	r2, #32
 801c718:	e7e1      	b.n	801c6de <__lo0bits+0x1e>
	...

0801c71c <__i2b>:
 801c71c:	b510      	push	{r4, lr}
 801c71e:	460c      	mov	r4, r1
 801c720:	2101      	movs	r1, #1
 801c722:	f7ff ff05 	bl	801c530 <_Balloc>
 801c726:	4602      	mov	r2, r0
 801c728:	b928      	cbnz	r0, 801c736 <__i2b+0x1a>
 801c72a:	4b05      	ldr	r3, [pc, #20]	; (801c740 <__i2b+0x24>)
 801c72c:	4805      	ldr	r0, [pc, #20]	; (801c744 <__i2b+0x28>)
 801c72e:	f240 1145 	movw	r1, #325	; 0x145
 801c732:	f7fe ffeb 	bl	801b70c <__assert_func>
 801c736:	2301      	movs	r3, #1
 801c738:	6144      	str	r4, [r0, #20]
 801c73a:	6103      	str	r3, [r0, #16]
 801c73c:	bd10      	pop	{r4, pc}
 801c73e:	bf00      	nop
 801c740:	08021073 	.word	0x08021073
 801c744:	08021084 	.word	0x08021084

0801c748 <__multiply>:
 801c748:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c74c:	4691      	mov	r9, r2
 801c74e:	690a      	ldr	r2, [r1, #16]
 801c750:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801c754:	429a      	cmp	r2, r3
 801c756:	bfb8      	it	lt
 801c758:	460b      	movlt	r3, r1
 801c75a:	460c      	mov	r4, r1
 801c75c:	bfbc      	itt	lt
 801c75e:	464c      	movlt	r4, r9
 801c760:	4699      	movlt	r9, r3
 801c762:	6927      	ldr	r7, [r4, #16]
 801c764:	f8d9 a010 	ldr.w	sl, [r9, #16]
 801c768:	68a3      	ldr	r3, [r4, #8]
 801c76a:	6861      	ldr	r1, [r4, #4]
 801c76c:	eb07 060a 	add.w	r6, r7, sl
 801c770:	42b3      	cmp	r3, r6
 801c772:	b085      	sub	sp, #20
 801c774:	bfb8      	it	lt
 801c776:	3101      	addlt	r1, #1
 801c778:	f7ff feda 	bl	801c530 <_Balloc>
 801c77c:	b930      	cbnz	r0, 801c78c <__multiply+0x44>
 801c77e:	4602      	mov	r2, r0
 801c780:	4b44      	ldr	r3, [pc, #272]	; (801c894 <__multiply+0x14c>)
 801c782:	4845      	ldr	r0, [pc, #276]	; (801c898 <__multiply+0x150>)
 801c784:	f44f 71b1 	mov.w	r1, #354	; 0x162
 801c788:	f7fe ffc0 	bl	801b70c <__assert_func>
 801c78c:	f100 0514 	add.w	r5, r0, #20
 801c790:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 801c794:	462b      	mov	r3, r5
 801c796:	2200      	movs	r2, #0
 801c798:	4543      	cmp	r3, r8
 801c79a:	d321      	bcc.n	801c7e0 <__multiply+0x98>
 801c79c:	f104 0314 	add.w	r3, r4, #20
 801c7a0:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 801c7a4:	f109 0314 	add.w	r3, r9, #20
 801c7a8:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 801c7ac:	9202      	str	r2, [sp, #8]
 801c7ae:	1b3a      	subs	r2, r7, r4
 801c7b0:	3a15      	subs	r2, #21
 801c7b2:	f022 0203 	bic.w	r2, r2, #3
 801c7b6:	3204      	adds	r2, #4
 801c7b8:	f104 0115 	add.w	r1, r4, #21
 801c7bc:	428f      	cmp	r7, r1
 801c7be:	bf38      	it	cc
 801c7c0:	2204      	movcc	r2, #4
 801c7c2:	9201      	str	r2, [sp, #4]
 801c7c4:	9a02      	ldr	r2, [sp, #8]
 801c7c6:	9303      	str	r3, [sp, #12]
 801c7c8:	429a      	cmp	r2, r3
 801c7ca:	d80c      	bhi.n	801c7e6 <__multiply+0x9e>
 801c7cc:	2e00      	cmp	r6, #0
 801c7ce:	dd03      	ble.n	801c7d8 <__multiply+0x90>
 801c7d0:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 801c7d4:	2b00      	cmp	r3, #0
 801c7d6:	d05b      	beq.n	801c890 <__multiply+0x148>
 801c7d8:	6106      	str	r6, [r0, #16]
 801c7da:	b005      	add	sp, #20
 801c7dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c7e0:	f843 2b04 	str.w	r2, [r3], #4
 801c7e4:	e7d8      	b.n	801c798 <__multiply+0x50>
 801c7e6:	f8b3 a000 	ldrh.w	sl, [r3]
 801c7ea:	f1ba 0f00 	cmp.w	sl, #0
 801c7ee:	d024      	beq.n	801c83a <__multiply+0xf2>
 801c7f0:	f104 0e14 	add.w	lr, r4, #20
 801c7f4:	46a9      	mov	r9, r5
 801c7f6:	f04f 0c00 	mov.w	ip, #0
 801c7fa:	f85e 2b04 	ldr.w	r2, [lr], #4
 801c7fe:	f8d9 1000 	ldr.w	r1, [r9]
 801c802:	fa1f fb82 	uxth.w	fp, r2
 801c806:	b289      	uxth	r1, r1
 801c808:	fb0a 110b 	mla	r1, sl, fp, r1
 801c80c:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 801c810:	f8d9 2000 	ldr.w	r2, [r9]
 801c814:	4461      	add	r1, ip
 801c816:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 801c81a:	fb0a c20b 	mla	r2, sl, fp, ip
 801c81e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 801c822:	b289      	uxth	r1, r1
 801c824:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 801c828:	4577      	cmp	r7, lr
 801c82a:	f849 1b04 	str.w	r1, [r9], #4
 801c82e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 801c832:	d8e2      	bhi.n	801c7fa <__multiply+0xb2>
 801c834:	9a01      	ldr	r2, [sp, #4]
 801c836:	f845 c002 	str.w	ip, [r5, r2]
 801c83a:	9a03      	ldr	r2, [sp, #12]
 801c83c:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 801c840:	3304      	adds	r3, #4
 801c842:	f1b9 0f00 	cmp.w	r9, #0
 801c846:	d021      	beq.n	801c88c <__multiply+0x144>
 801c848:	6829      	ldr	r1, [r5, #0]
 801c84a:	f104 0c14 	add.w	ip, r4, #20
 801c84e:	46ae      	mov	lr, r5
 801c850:	f04f 0a00 	mov.w	sl, #0
 801c854:	f8bc b000 	ldrh.w	fp, [ip]
 801c858:	f8be 2002 	ldrh.w	r2, [lr, #2]
 801c85c:	fb09 220b 	mla	r2, r9, fp, r2
 801c860:	4452      	add	r2, sl
 801c862:	b289      	uxth	r1, r1
 801c864:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 801c868:	f84e 1b04 	str.w	r1, [lr], #4
 801c86c:	f85c 1b04 	ldr.w	r1, [ip], #4
 801c870:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 801c874:	f8be 1000 	ldrh.w	r1, [lr]
 801c878:	fb09 110a 	mla	r1, r9, sl, r1
 801c87c:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 801c880:	4567      	cmp	r7, ip
 801c882:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 801c886:	d8e5      	bhi.n	801c854 <__multiply+0x10c>
 801c888:	9a01      	ldr	r2, [sp, #4]
 801c88a:	50a9      	str	r1, [r5, r2]
 801c88c:	3504      	adds	r5, #4
 801c88e:	e799      	b.n	801c7c4 <__multiply+0x7c>
 801c890:	3e01      	subs	r6, #1
 801c892:	e79b      	b.n	801c7cc <__multiply+0x84>
 801c894:	08021073 	.word	0x08021073
 801c898:	08021084 	.word	0x08021084

0801c89c <__pow5mult>:
 801c89c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801c8a0:	4615      	mov	r5, r2
 801c8a2:	f012 0203 	ands.w	r2, r2, #3
 801c8a6:	4606      	mov	r6, r0
 801c8a8:	460f      	mov	r7, r1
 801c8aa:	d007      	beq.n	801c8bc <__pow5mult+0x20>
 801c8ac:	4c25      	ldr	r4, [pc, #148]	; (801c944 <__pow5mult+0xa8>)
 801c8ae:	3a01      	subs	r2, #1
 801c8b0:	2300      	movs	r3, #0
 801c8b2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801c8b6:	f7ff fe9d 	bl	801c5f4 <__multadd>
 801c8ba:	4607      	mov	r7, r0
 801c8bc:	10ad      	asrs	r5, r5, #2
 801c8be:	d03d      	beq.n	801c93c <__pow5mult+0xa0>
 801c8c0:	69f4      	ldr	r4, [r6, #28]
 801c8c2:	b97c      	cbnz	r4, 801c8e4 <__pow5mult+0x48>
 801c8c4:	2010      	movs	r0, #16
 801c8c6:	f7ff fd7f 	bl	801c3c8 <malloc>
 801c8ca:	4602      	mov	r2, r0
 801c8cc:	61f0      	str	r0, [r6, #28]
 801c8ce:	b928      	cbnz	r0, 801c8dc <__pow5mult+0x40>
 801c8d0:	4b1d      	ldr	r3, [pc, #116]	; (801c948 <__pow5mult+0xac>)
 801c8d2:	481e      	ldr	r0, [pc, #120]	; (801c94c <__pow5mult+0xb0>)
 801c8d4:	f240 11b3 	movw	r1, #435	; 0x1b3
 801c8d8:	f7fe ff18 	bl	801b70c <__assert_func>
 801c8dc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 801c8e0:	6004      	str	r4, [r0, #0]
 801c8e2:	60c4      	str	r4, [r0, #12]
 801c8e4:	f8d6 801c 	ldr.w	r8, [r6, #28]
 801c8e8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 801c8ec:	b94c      	cbnz	r4, 801c902 <__pow5mult+0x66>
 801c8ee:	f240 2171 	movw	r1, #625	; 0x271
 801c8f2:	4630      	mov	r0, r6
 801c8f4:	f7ff ff12 	bl	801c71c <__i2b>
 801c8f8:	2300      	movs	r3, #0
 801c8fa:	f8c8 0008 	str.w	r0, [r8, #8]
 801c8fe:	4604      	mov	r4, r0
 801c900:	6003      	str	r3, [r0, #0]
 801c902:	f04f 0900 	mov.w	r9, #0
 801c906:	07eb      	lsls	r3, r5, #31
 801c908:	d50a      	bpl.n	801c920 <__pow5mult+0x84>
 801c90a:	4639      	mov	r1, r7
 801c90c:	4622      	mov	r2, r4
 801c90e:	4630      	mov	r0, r6
 801c910:	f7ff ff1a 	bl	801c748 <__multiply>
 801c914:	4639      	mov	r1, r7
 801c916:	4680      	mov	r8, r0
 801c918:	4630      	mov	r0, r6
 801c91a:	f7ff fe49 	bl	801c5b0 <_Bfree>
 801c91e:	4647      	mov	r7, r8
 801c920:	106d      	asrs	r5, r5, #1
 801c922:	d00b      	beq.n	801c93c <__pow5mult+0xa0>
 801c924:	6820      	ldr	r0, [r4, #0]
 801c926:	b938      	cbnz	r0, 801c938 <__pow5mult+0x9c>
 801c928:	4622      	mov	r2, r4
 801c92a:	4621      	mov	r1, r4
 801c92c:	4630      	mov	r0, r6
 801c92e:	f7ff ff0b 	bl	801c748 <__multiply>
 801c932:	6020      	str	r0, [r4, #0]
 801c934:	f8c0 9000 	str.w	r9, [r0]
 801c938:	4604      	mov	r4, r0
 801c93a:	e7e4      	b.n	801c906 <__pow5mult+0x6a>
 801c93c:	4638      	mov	r0, r7
 801c93e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801c942:	bf00      	nop
 801c944:	080211d0 	.word	0x080211d0
 801c948:	08020e2e 	.word	0x08020e2e
 801c94c:	08021084 	.word	0x08021084

0801c950 <__lshift>:
 801c950:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801c954:	460c      	mov	r4, r1
 801c956:	6849      	ldr	r1, [r1, #4]
 801c958:	6923      	ldr	r3, [r4, #16]
 801c95a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801c95e:	68a3      	ldr	r3, [r4, #8]
 801c960:	4607      	mov	r7, r0
 801c962:	4691      	mov	r9, r2
 801c964:	ea4f 1a62 	mov.w	sl, r2, asr #5
 801c968:	f108 0601 	add.w	r6, r8, #1
 801c96c:	42b3      	cmp	r3, r6
 801c96e:	db0b      	blt.n	801c988 <__lshift+0x38>
 801c970:	4638      	mov	r0, r7
 801c972:	f7ff fddd 	bl	801c530 <_Balloc>
 801c976:	4605      	mov	r5, r0
 801c978:	b948      	cbnz	r0, 801c98e <__lshift+0x3e>
 801c97a:	4602      	mov	r2, r0
 801c97c:	4b28      	ldr	r3, [pc, #160]	; (801ca20 <__lshift+0xd0>)
 801c97e:	4829      	ldr	r0, [pc, #164]	; (801ca24 <__lshift+0xd4>)
 801c980:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 801c984:	f7fe fec2 	bl	801b70c <__assert_func>
 801c988:	3101      	adds	r1, #1
 801c98a:	005b      	lsls	r3, r3, #1
 801c98c:	e7ee      	b.n	801c96c <__lshift+0x1c>
 801c98e:	2300      	movs	r3, #0
 801c990:	f100 0114 	add.w	r1, r0, #20
 801c994:	f100 0210 	add.w	r2, r0, #16
 801c998:	4618      	mov	r0, r3
 801c99a:	4553      	cmp	r3, sl
 801c99c:	db33      	blt.n	801ca06 <__lshift+0xb6>
 801c99e:	6920      	ldr	r0, [r4, #16]
 801c9a0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 801c9a4:	f104 0314 	add.w	r3, r4, #20
 801c9a8:	f019 091f 	ands.w	r9, r9, #31
 801c9ac:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 801c9b0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 801c9b4:	d02b      	beq.n	801ca0e <__lshift+0xbe>
 801c9b6:	f1c9 0e20 	rsb	lr, r9, #32
 801c9ba:	468a      	mov	sl, r1
 801c9bc:	2200      	movs	r2, #0
 801c9be:	6818      	ldr	r0, [r3, #0]
 801c9c0:	fa00 f009 	lsl.w	r0, r0, r9
 801c9c4:	4310      	orrs	r0, r2
 801c9c6:	f84a 0b04 	str.w	r0, [sl], #4
 801c9ca:	f853 2b04 	ldr.w	r2, [r3], #4
 801c9ce:	459c      	cmp	ip, r3
 801c9d0:	fa22 f20e 	lsr.w	r2, r2, lr
 801c9d4:	d8f3      	bhi.n	801c9be <__lshift+0x6e>
 801c9d6:	ebac 0304 	sub.w	r3, ip, r4
 801c9da:	3b15      	subs	r3, #21
 801c9dc:	f023 0303 	bic.w	r3, r3, #3
 801c9e0:	3304      	adds	r3, #4
 801c9e2:	f104 0015 	add.w	r0, r4, #21
 801c9e6:	4584      	cmp	ip, r0
 801c9e8:	bf38      	it	cc
 801c9ea:	2304      	movcc	r3, #4
 801c9ec:	50ca      	str	r2, [r1, r3]
 801c9ee:	b10a      	cbz	r2, 801c9f4 <__lshift+0xa4>
 801c9f0:	f108 0602 	add.w	r6, r8, #2
 801c9f4:	3e01      	subs	r6, #1
 801c9f6:	4638      	mov	r0, r7
 801c9f8:	612e      	str	r6, [r5, #16]
 801c9fa:	4621      	mov	r1, r4
 801c9fc:	f7ff fdd8 	bl	801c5b0 <_Bfree>
 801ca00:	4628      	mov	r0, r5
 801ca02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801ca06:	f842 0f04 	str.w	r0, [r2, #4]!
 801ca0a:	3301      	adds	r3, #1
 801ca0c:	e7c5      	b.n	801c99a <__lshift+0x4a>
 801ca0e:	3904      	subs	r1, #4
 801ca10:	f853 2b04 	ldr.w	r2, [r3], #4
 801ca14:	f841 2f04 	str.w	r2, [r1, #4]!
 801ca18:	459c      	cmp	ip, r3
 801ca1a:	d8f9      	bhi.n	801ca10 <__lshift+0xc0>
 801ca1c:	e7ea      	b.n	801c9f4 <__lshift+0xa4>
 801ca1e:	bf00      	nop
 801ca20:	08021073 	.word	0x08021073
 801ca24:	08021084 	.word	0x08021084

0801ca28 <__mcmp>:
 801ca28:	b530      	push	{r4, r5, lr}
 801ca2a:	6902      	ldr	r2, [r0, #16]
 801ca2c:	690c      	ldr	r4, [r1, #16]
 801ca2e:	1b12      	subs	r2, r2, r4
 801ca30:	d10e      	bne.n	801ca50 <__mcmp+0x28>
 801ca32:	f100 0314 	add.w	r3, r0, #20
 801ca36:	3114      	adds	r1, #20
 801ca38:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 801ca3c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 801ca40:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 801ca44:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 801ca48:	42a5      	cmp	r5, r4
 801ca4a:	d003      	beq.n	801ca54 <__mcmp+0x2c>
 801ca4c:	d305      	bcc.n	801ca5a <__mcmp+0x32>
 801ca4e:	2201      	movs	r2, #1
 801ca50:	4610      	mov	r0, r2
 801ca52:	bd30      	pop	{r4, r5, pc}
 801ca54:	4283      	cmp	r3, r0
 801ca56:	d3f3      	bcc.n	801ca40 <__mcmp+0x18>
 801ca58:	e7fa      	b.n	801ca50 <__mcmp+0x28>
 801ca5a:	f04f 32ff 	mov.w	r2, #4294967295
 801ca5e:	e7f7      	b.n	801ca50 <__mcmp+0x28>

0801ca60 <__mdiff>:
 801ca60:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ca64:	460c      	mov	r4, r1
 801ca66:	4606      	mov	r6, r0
 801ca68:	4611      	mov	r1, r2
 801ca6a:	4620      	mov	r0, r4
 801ca6c:	4690      	mov	r8, r2
 801ca6e:	f7ff ffdb 	bl	801ca28 <__mcmp>
 801ca72:	1e05      	subs	r5, r0, #0
 801ca74:	d110      	bne.n	801ca98 <__mdiff+0x38>
 801ca76:	4629      	mov	r1, r5
 801ca78:	4630      	mov	r0, r6
 801ca7a:	f7ff fd59 	bl	801c530 <_Balloc>
 801ca7e:	b930      	cbnz	r0, 801ca8e <__mdiff+0x2e>
 801ca80:	4b3a      	ldr	r3, [pc, #232]	; (801cb6c <__mdiff+0x10c>)
 801ca82:	4602      	mov	r2, r0
 801ca84:	f240 2137 	movw	r1, #567	; 0x237
 801ca88:	4839      	ldr	r0, [pc, #228]	; (801cb70 <__mdiff+0x110>)
 801ca8a:	f7fe fe3f 	bl	801b70c <__assert_func>
 801ca8e:	2301      	movs	r3, #1
 801ca90:	e9c0 3504 	strd	r3, r5, [r0, #16]
 801ca94:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ca98:	bfa4      	itt	ge
 801ca9a:	4643      	movge	r3, r8
 801ca9c:	46a0      	movge	r8, r4
 801ca9e:	4630      	mov	r0, r6
 801caa0:	f8d8 1004 	ldr.w	r1, [r8, #4]
 801caa4:	bfa6      	itte	ge
 801caa6:	461c      	movge	r4, r3
 801caa8:	2500      	movge	r5, #0
 801caaa:	2501      	movlt	r5, #1
 801caac:	f7ff fd40 	bl	801c530 <_Balloc>
 801cab0:	b920      	cbnz	r0, 801cabc <__mdiff+0x5c>
 801cab2:	4b2e      	ldr	r3, [pc, #184]	; (801cb6c <__mdiff+0x10c>)
 801cab4:	4602      	mov	r2, r0
 801cab6:	f240 2145 	movw	r1, #581	; 0x245
 801caba:	e7e5      	b.n	801ca88 <__mdiff+0x28>
 801cabc:	f8d8 7010 	ldr.w	r7, [r8, #16]
 801cac0:	6926      	ldr	r6, [r4, #16]
 801cac2:	60c5      	str	r5, [r0, #12]
 801cac4:	f104 0914 	add.w	r9, r4, #20
 801cac8:	f108 0514 	add.w	r5, r8, #20
 801cacc:	f100 0e14 	add.w	lr, r0, #20
 801cad0:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 801cad4:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 801cad8:	f108 0210 	add.w	r2, r8, #16
 801cadc:	46f2      	mov	sl, lr
 801cade:	2100      	movs	r1, #0
 801cae0:	f859 3b04 	ldr.w	r3, [r9], #4
 801cae4:	f852 bf04 	ldr.w	fp, [r2, #4]!
 801cae8:	fa11 f88b 	uxtah	r8, r1, fp
 801caec:	b299      	uxth	r1, r3
 801caee:	0c1b      	lsrs	r3, r3, #16
 801caf0:	eba8 0801 	sub.w	r8, r8, r1
 801caf4:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 801caf8:	eb03 4328 	add.w	r3, r3, r8, asr #16
 801cafc:	fa1f f888 	uxth.w	r8, r8
 801cb00:	1419      	asrs	r1, r3, #16
 801cb02:	454e      	cmp	r6, r9
 801cb04:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 801cb08:	f84a 3b04 	str.w	r3, [sl], #4
 801cb0c:	d8e8      	bhi.n	801cae0 <__mdiff+0x80>
 801cb0e:	1b33      	subs	r3, r6, r4
 801cb10:	3b15      	subs	r3, #21
 801cb12:	f023 0303 	bic.w	r3, r3, #3
 801cb16:	3304      	adds	r3, #4
 801cb18:	3415      	adds	r4, #21
 801cb1a:	42a6      	cmp	r6, r4
 801cb1c:	bf38      	it	cc
 801cb1e:	2304      	movcc	r3, #4
 801cb20:	441d      	add	r5, r3
 801cb22:	4473      	add	r3, lr
 801cb24:	469e      	mov	lr, r3
 801cb26:	462e      	mov	r6, r5
 801cb28:	4566      	cmp	r6, ip
 801cb2a:	d30e      	bcc.n	801cb4a <__mdiff+0xea>
 801cb2c:	f10c 0203 	add.w	r2, ip, #3
 801cb30:	1b52      	subs	r2, r2, r5
 801cb32:	f022 0203 	bic.w	r2, r2, #3
 801cb36:	3d03      	subs	r5, #3
 801cb38:	45ac      	cmp	ip, r5
 801cb3a:	bf38      	it	cc
 801cb3c:	2200      	movcc	r2, #0
 801cb3e:	4413      	add	r3, r2
 801cb40:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 801cb44:	b17a      	cbz	r2, 801cb66 <__mdiff+0x106>
 801cb46:	6107      	str	r7, [r0, #16]
 801cb48:	e7a4      	b.n	801ca94 <__mdiff+0x34>
 801cb4a:	f856 8b04 	ldr.w	r8, [r6], #4
 801cb4e:	fa11 f288 	uxtah	r2, r1, r8
 801cb52:	1414      	asrs	r4, r2, #16
 801cb54:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 801cb58:	b292      	uxth	r2, r2
 801cb5a:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 801cb5e:	f84e 2b04 	str.w	r2, [lr], #4
 801cb62:	1421      	asrs	r1, r4, #16
 801cb64:	e7e0      	b.n	801cb28 <__mdiff+0xc8>
 801cb66:	3f01      	subs	r7, #1
 801cb68:	e7ea      	b.n	801cb40 <__mdiff+0xe0>
 801cb6a:	bf00      	nop
 801cb6c:	08021073 	.word	0x08021073
 801cb70:	08021084 	.word	0x08021084

0801cb74 <__d2b>:
 801cb74:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801cb78:	460f      	mov	r7, r1
 801cb7a:	2101      	movs	r1, #1
 801cb7c:	ec59 8b10 	vmov	r8, r9, d0
 801cb80:	4616      	mov	r6, r2
 801cb82:	f7ff fcd5 	bl	801c530 <_Balloc>
 801cb86:	4604      	mov	r4, r0
 801cb88:	b930      	cbnz	r0, 801cb98 <__d2b+0x24>
 801cb8a:	4602      	mov	r2, r0
 801cb8c:	4b24      	ldr	r3, [pc, #144]	; (801cc20 <__d2b+0xac>)
 801cb8e:	4825      	ldr	r0, [pc, #148]	; (801cc24 <__d2b+0xb0>)
 801cb90:	f240 310f 	movw	r1, #783	; 0x30f
 801cb94:	f7fe fdba 	bl	801b70c <__assert_func>
 801cb98:	f3c9 550a 	ubfx	r5, r9, #20, #11
 801cb9c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801cba0:	bb2d      	cbnz	r5, 801cbee <__d2b+0x7a>
 801cba2:	9301      	str	r3, [sp, #4]
 801cba4:	f1b8 0300 	subs.w	r3, r8, #0
 801cba8:	d026      	beq.n	801cbf8 <__d2b+0x84>
 801cbaa:	4668      	mov	r0, sp
 801cbac:	9300      	str	r3, [sp, #0]
 801cbae:	f7ff fd87 	bl	801c6c0 <__lo0bits>
 801cbb2:	e9dd 1200 	ldrd	r1, r2, [sp]
 801cbb6:	b1e8      	cbz	r0, 801cbf4 <__d2b+0x80>
 801cbb8:	f1c0 0320 	rsb	r3, r0, #32
 801cbbc:	fa02 f303 	lsl.w	r3, r2, r3
 801cbc0:	430b      	orrs	r3, r1
 801cbc2:	40c2      	lsrs	r2, r0
 801cbc4:	6163      	str	r3, [r4, #20]
 801cbc6:	9201      	str	r2, [sp, #4]
 801cbc8:	9b01      	ldr	r3, [sp, #4]
 801cbca:	61a3      	str	r3, [r4, #24]
 801cbcc:	2b00      	cmp	r3, #0
 801cbce:	bf14      	ite	ne
 801cbd0:	2202      	movne	r2, #2
 801cbd2:	2201      	moveq	r2, #1
 801cbd4:	6122      	str	r2, [r4, #16]
 801cbd6:	b1bd      	cbz	r5, 801cc08 <__d2b+0x94>
 801cbd8:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 801cbdc:	4405      	add	r5, r0
 801cbde:	603d      	str	r5, [r7, #0]
 801cbe0:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 801cbe4:	6030      	str	r0, [r6, #0]
 801cbe6:	4620      	mov	r0, r4
 801cbe8:	b003      	add	sp, #12
 801cbea:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801cbee:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801cbf2:	e7d6      	b.n	801cba2 <__d2b+0x2e>
 801cbf4:	6161      	str	r1, [r4, #20]
 801cbf6:	e7e7      	b.n	801cbc8 <__d2b+0x54>
 801cbf8:	a801      	add	r0, sp, #4
 801cbfa:	f7ff fd61 	bl	801c6c0 <__lo0bits>
 801cbfe:	9b01      	ldr	r3, [sp, #4]
 801cc00:	6163      	str	r3, [r4, #20]
 801cc02:	3020      	adds	r0, #32
 801cc04:	2201      	movs	r2, #1
 801cc06:	e7e5      	b.n	801cbd4 <__d2b+0x60>
 801cc08:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 801cc0c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 801cc10:	6038      	str	r0, [r7, #0]
 801cc12:	6918      	ldr	r0, [r3, #16]
 801cc14:	f7ff fd34 	bl	801c680 <__hi0bits>
 801cc18:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 801cc1c:	e7e2      	b.n	801cbe4 <__d2b+0x70>
 801cc1e:	bf00      	nop
 801cc20:	08021073 	.word	0x08021073
 801cc24:	08021084 	.word	0x08021084

0801cc28 <__ssputs_r>:
 801cc28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801cc2c:	688e      	ldr	r6, [r1, #8]
 801cc2e:	461f      	mov	r7, r3
 801cc30:	42be      	cmp	r6, r7
 801cc32:	680b      	ldr	r3, [r1, #0]
 801cc34:	4682      	mov	sl, r0
 801cc36:	460c      	mov	r4, r1
 801cc38:	4690      	mov	r8, r2
 801cc3a:	d82c      	bhi.n	801cc96 <__ssputs_r+0x6e>
 801cc3c:	898a      	ldrh	r2, [r1, #12]
 801cc3e:	f412 6f90 	tst.w	r2, #1152	; 0x480
 801cc42:	d026      	beq.n	801cc92 <__ssputs_r+0x6a>
 801cc44:	6965      	ldr	r5, [r4, #20]
 801cc46:	6909      	ldr	r1, [r1, #16]
 801cc48:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801cc4c:	eba3 0901 	sub.w	r9, r3, r1
 801cc50:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801cc54:	1c7b      	adds	r3, r7, #1
 801cc56:	444b      	add	r3, r9
 801cc58:	106d      	asrs	r5, r5, #1
 801cc5a:	429d      	cmp	r5, r3
 801cc5c:	bf38      	it	cc
 801cc5e:	461d      	movcc	r5, r3
 801cc60:	0553      	lsls	r3, r2, #21
 801cc62:	d527      	bpl.n	801ccb4 <__ssputs_r+0x8c>
 801cc64:	4629      	mov	r1, r5
 801cc66:	f7ff fbd7 	bl	801c418 <_malloc_r>
 801cc6a:	4606      	mov	r6, r0
 801cc6c:	b360      	cbz	r0, 801ccc8 <__ssputs_r+0xa0>
 801cc6e:	6921      	ldr	r1, [r4, #16]
 801cc70:	464a      	mov	r2, r9
 801cc72:	f7fe fd3c 	bl	801b6ee <memcpy>
 801cc76:	89a3      	ldrh	r3, [r4, #12]
 801cc78:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 801cc7c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801cc80:	81a3      	strh	r3, [r4, #12]
 801cc82:	6126      	str	r6, [r4, #16]
 801cc84:	6165      	str	r5, [r4, #20]
 801cc86:	444e      	add	r6, r9
 801cc88:	eba5 0509 	sub.w	r5, r5, r9
 801cc8c:	6026      	str	r6, [r4, #0]
 801cc8e:	60a5      	str	r5, [r4, #8]
 801cc90:	463e      	mov	r6, r7
 801cc92:	42be      	cmp	r6, r7
 801cc94:	d900      	bls.n	801cc98 <__ssputs_r+0x70>
 801cc96:	463e      	mov	r6, r7
 801cc98:	6820      	ldr	r0, [r4, #0]
 801cc9a:	4632      	mov	r2, r6
 801cc9c:	4641      	mov	r1, r8
 801cc9e:	f7fe fc81 	bl	801b5a4 <memmove>
 801cca2:	68a3      	ldr	r3, [r4, #8]
 801cca4:	1b9b      	subs	r3, r3, r6
 801cca6:	60a3      	str	r3, [r4, #8]
 801cca8:	6823      	ldr	r3, [r4, #0]
 801ccaa:	4433      	add	r3, r6
 801ccac:	6023      	str	r3, [r4, #0]
 801ccae:	2000      	movs	r0, #0
 801ccb0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801ccb4:	462a      	mov	r2, r5
 801ccb6:	f000 fbd6 	bl	801d466 <_realloc_r>
 801ccba:	4606      	mov	r6, r0
 801ccbc:	2800      	cmp	r0, #0
 801ccbe:	d1e0      	bne.n	801cc82 <__ssputs_r+0x5a>
 801ccc0:	6921      	ldr	r1, [r4, #16]
 801ccc2:	4650      	mov	r0, sl
 801ccc4:	f7ff fb34 	bl	801c330 <_free_r>
 801ccc8:	230c      	movs	r3, #12
 801ccca:	f8ca 3000 	str.w	r3, [sl]
 801ccce:	89a3      	ldrh	r3, [r4, #12]
 801ccd0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801ccd4:	81a3      	strh	r3, [r4, #12]
 801ccd6:	f04f 30ff 	mov.w	r0, #4294967295
 801ccda:	e7e9      	b.n	801ccb0 <__ssputs_r+0x88>

0801ccdc <_svfiprintf_r>:
 801ccdc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801cce0:	4698      	mov	r8, r3
 801cce2:	898b      	ldrh	r3, [r1, #12]
 801cce4:	061b      	lsls	r3, r3, #24
 801cce6:	b09d      	sub	sp, #116	; 0x74
 801cce8:	4607      	mov	r7, r0
 801ccea:	460d      	mov	r5, r1
 801ccec:	4614      	mov	r4, r2
 801ccee:	d50e      	bpl.n	801cd0e <_svfiprintf_r+0x32>
 801ccf0:	690b      	ldr	r3, [r1, #16]
 801ccf2:	b963      	cbnz	r3, 801cd0e <_svfiprintf_r+0x32>
 801ccf4:	2140      	movs	r1, #64	; 0x40
 801ccf6:	f7ff fb8f 	bl	801c418 <_malloc_r>
 801ccfa:	6028      	str	r0, [r5, #0]
 801ccfc:	6128      	str	r0, [r5, #16]
 801ccfe:	b920      	cbnz	r0, 801cd0a <_svfiprintf_r+0x2e>
 801cd00:	230c      	movs	r3, #12
 801cd02:	603b      	str	r3, [r7, #0]
 801cd04:	f04f 30ff 	mov.w	r0, #4294967295
 801cd08:	e0d0      	b.n	801ceac <_svfiprintf_r+0x1d0>
 801cd0a:	2340      	movs	r3, #64	; 0x40
 801cd0c:	616b      	str	r3, [r5, #20]
 801cd0e:	2300      	movs	r3, #0
 801cd10:	9309      	str	r3, [sp, #36]	; 0x24
 801cd12:	2320      	movs	r3, #32
 801cd14:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801cd18:	f8cd 800c 	str.w	r8, [sp, #12]
 801cd1c:	2330      	movs	r3, #48	; 0x30
 801cd1e:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 801cec4 <_svfiprintf_r+0x1e8>
 801cd22:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801cd26:	f04f 0901 	mov.w	r9, #1
 801cd2a:	4623      	mov	r3, r4
 801cd2c:	469a      	mov	sl, r3
 801cd2e:	f813 2b01 	ldrb.w	r2, [r3], #1
 801cd32:	b10a      	cbz	r2, 801cd38 <_svfiprintf_r+0x5c>
 801cd34:	2a25      	cmp	r2, #37	; 0x25
 801cd36:	d1f9      	bne.n	801cd2c <_svfiprintf_r+0x50>
 801cd38:	ebba 0b04 	subs.w	fp, sl, r4
 801cd3c:	d00b      	beq.n	801cd56 <_svfiprintf_r+0x7a>
 801cd3e:	465b      	mov	r3, fp
 801cd40:	4622      	mov	r2, r4
 801cd42:	4629      	mov	r1, r5
 801cd44:	4638      	mov	r0, r7
 801cd46:	f7ff ff6f 	bl	801cc28 <__ssputs_r>
 801cd4a:	3001      	adds	r0, #1
 801cd4c:	f000 80a9 	beq.w	801cea2 <_svfiprintf_r+0x1c6>
 801cd50:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801cd52:	445a      	add	r2, fp
 801cd54:	9209      	str	r2, [sp, #36]	; 0x24
 801cd56:	f89a 3000 	ldrb.w	r3, [sl]
 801cd5a:	2b00      	cmp	r3, #0
 801cd5c:	f000 80a1 	beq.w	801cea2 <_svfiprintf_r+0x1c6>
 801cd60:	2300      	movs	r3, #0
 801cd62:	f04f 32ff 	mov.w	r2, #4294967295
 801cd66:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801cd6a:	f10a 0a01 	add.w	sl, sl, #1
 801cd6e:	9304      	str	r3, [sp, #16]
 801cd70:	9307      	str	r3, [sp, #28]
 801cd72:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801cd76:	931a      	str	r3, [sp, #104]	; 0x68
 801cd78:	4654      	mov	r4, sl
 801cd7a:	2205      	movs	r2, #5
 801cd7c:	f814 1b01 	ldrb.w	r1, [r4], #1
 801cd80:	4850      	ldr	r0, [pc, #320]	; (801cec4 <_svfiprintf_r+0x1e8>)
 801cd82:	f7e5 f8ed 	bl	8001f60 <memchr>
 801cd86:	9a04      	ldr	r2, [sp, #16]
 801cd88:	b9d8      	cbnz	r0, 801cdc2 <_svfiprintf_r+0xe6>
 801cd8a:	06d0      	lsls	r0, r2, #27
 801cd8c:	bf44      	itt	mi
 801cd8e:	2320      	movmi	r3, #32
 801cd90:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801cd94:	0711      	lsls	r1, r2, #28
 801cd96:	bf44      	itt	mi
 801cd98:	232b      	movmi	r3, #43	; 0x2b
 801cd9a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801cd9e:	f89a 3000 	ldrb.w	r3, [sl]
 801cda2:	2b2a      	cmp	r3, #42	; 0x2a
 801cda4:	d015      	beq.n	801cdd2 <_svfiprintf_r+0xf6>
 801cda6:	9a07      	ldr	r2, [sp, #28]
 801cda8:	4654      	mov	r4, sl
 801cdaa:	2000      	movs	r0, #0
 801cdac:	f04f 0c0a 	mov.w	ip, #10
 801cdb0:	4621      	mov	r1, r4
 801cdb2:	f811 3b01 	ldrb.w	r3, [r1], #1
 801cdb6:	3b30      	subs	r3, #48	; 0x30
 801cdb8:	2b09      	cmp	r3, #9
 801cdba:	d94d      	bls.n	801ce58 <_svfiprintf_r+0x17c>
 801cdbc:	b1b0      	cbz	r0, 801cdec <_svfiprintf_r+0x110>
 801cdbe:	9207      	str	r2, [sp, #28]
 801cdc0:	e014      	b.n	801cdec <_svfiprintf_r+0x110>
 801cdc2:	eba0 0308 	sub.w	r3, r0, r8
 801cdc6:	fa09 f303 	lsl.w	r3, r9, r3
 801cdca:	4313      	orrs	r3, r2
 801cdcc:	9304      	str	r3, [sp, #16]
 801cdce:	46a2      	mov	sl, r4
 801cdd0:	e7d2      	b.n	801cd78 <_svfiprintf_r+0x9c>
 801cdd2:	9b03      	ldr	r3, [sp, #12]
 801cdd4:	1d19      	adds	r1, r3, #4
 801cdd6:	681b      	ldr	r3, [r3, #0]
 801cdd8:	9103      	str	r1, [sp, #12]
 801cdda:	2b00      	cmp	r3, #0
 801cddc:	bfbb      	ittet	lt
 801cdde:	425b      	neglt	r3, r3
 801cde0:	f042 0202 	orrlt.w	r2, r2, #2
 801cde4:	9307      	strge	r3, [sp, #28]
 801cde6:	9307      	strlt	r3, [sp, #28]
 801cde8:	bfb8      	it	lt
 801cdea:	9204      	strlt	r2, [sp, #16]
 801cdec:	7823      	ldrb	r3, [r4, #0]
 801cdee:	2b2e      	cmp	r3, #46	; 0x2e
 801cdf0:	d10c      	bne.n	801ce0c <_svfiprintf_r+0x130>
 801cdf2:	7863      	ldrb	r3, [r4, #1]
 801cdf4:	2b2a      	cmp	r3, #42	; 0x2a
 801cdf6:	d134      	bne.n	801ce62 <_svfiprintf_r+0x186>
 801cdf8:	9b03      	ldr	r3, [sp, #12]
 801cdfa:	1d1a      	adds	r2, r3, #4
 801cdfc:	681b      	ldr	r3, [r3, #0]
 801cdfe:	9203      	str	r2, [sp, #12]
 801ce00:	2b00      	cmp	r3, #0
 801ce02:	bfb8      	it	lt
 801ce04:	f04f 33ff 	movlt.w	r3, #4294967295
 801ce08:	3402      	adds	r4, #2
 801ce0a:	9305      	str	r3, [sp, #20]
 801ce0c:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 801ced4 <_svfiprintf_r+0x1f8>
 801ce10:	7821      	ldrb	r1, [r4, #0]
 801ce12:	2203      	movs	r2, #3
 801ce14:	4650      	mov	r0, sl
 801ce16:	f7e5 f8a3 	bl	8001f60 <memchr>
 801ce1a:	b138      	cbz	r0, 801ce2c <_svfiprintf_r+0x150>
 801ce1c:	9b04      	ldr	r3, [sp, #16]
 801ce1e:	eba0 000a 	sub.w	r0, r0, sl
 801ce22:	2240      	movs	r2, #64	; 0x40
 801ce24:	4082      	lsls	r2, r0
 801ce26:	4313      	orrs	r3, r2
 801ce28:	3401      	adds	r4, #1
 801ce2a:	9304      	str	r3, [sp, #16]
 801ce2c:	f814 1b01 	ldrb.w	r1, [r4], #1
 801ce30:	4825      	ldr	r0, [pc, #148]	; (801cec8 <_svfiprintf_r+0x1ec>)
 801ce32:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801ce36:	2206      	movs	r2, #6
 801ce38:	f7e5 f892 	bl	8001f60 <memchr>
 801ce3c:	2800      	cmp	r0, #0
 801ce3e:	d038      	beq.n	801ceb2 <_svfiprintf_r+0x1d6>
 801ce40:	4b22      	ldr	r3, [pc, #136]	; (801cecc <_svfiprintf_r+0x1f0>)
 801ce42:	bb1b      	cbnz	r3, 801ce8c <_svfiprintf_r+0x1b0>
 801ce44:	9b03      	ldr	r3, [sp, #12]
 801ce46:	3307      	adds	r3, #7
 801ce48:	f023 0307 	bic.w	r3, r3, #7
 801ce4c:	3308      	adds	r3, #8
 801ce4e:	9303      	str	r3, [sp, #12]
 801ce50:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801ce52:	4433      	add	r3, r6
 801ce54:	9309      	str	r3, [sp, #36]	; 0x24
 801ce56:	e768      	b.n	801cd2a <_svfiprintf_r+0x4e>
 801ce58:	fb0c 3202 	mla	r2, ip, r2, r3
 801ce5c:	460c      	mov	r4, r1
 801ce5e:	2001      	movs	r0, #1
 801ce60:	e7a6      	b.n	801cdb0 <_svfiprintf_r+0xd4>
 801ce62:	2300      	movs	r3, #0
 801ce64:	3401      	adds	r4, #1
 801ce66:	9305      	str	r3, [sp, #20]
 801ce68:	4619      	mov	r1, r3
 801ce6a:	f04f 0c0a 	mov.w	ip, #10
 801ce6e:	4620      	mov	r0, r4
 801ce70:	f810 2b01 	ldrb.w	r2, [r0], #1
 801ce74:	3a30      	subs	r2, #48	; 0x30
 801ce76:	2a09      	cmp	r2, #9
 801ce78:	d903      	bls.n	801ce82 <_svfiprintf_r+0x1a6>
 801ce7a:	2b00      	cmp	r3, #0
 801ce7c:	d0c6      	beq.n	801ce0c <_svfiprintf_r+0x130>
 801ce7e:	9105      	str	r1, [sp, #20]
 801ce80:	e7c4      	b.n	801ce0c <_svfiprintf_r+0x130>
 801ce82:	fb0c 2101 	mla	r1, ip, r1, r2
 801ce86:	4604      	mov	r4, r0
 801ce88:	2301      	movs	r3, #1
 801ce8a:	e7f0      	b.n	801ce6e <_svfiprintf_r+0x192>
 801ce8c:	ab03      	add	r3, sp, #12
 801ce8e:	9300      	str	r3, [sp, #0]
 801ce90:	462a      	mov	r2, r5
 801ce92:	4b0f      	ldr	r3, [pc, #60]	; (801ced0 <_svfiprintf_r+0x1f4>)
 801ce94:	a904      	add	r1, sp, #16
 801ce96:	4638      	mov	r0, r7
 801ce98:	f7fd fda2 	bl	801a9e0 <_printf_float>
 801ce9c:	1c42      	adds	r2, r0, #1
 801ce9e:	4606      	mov	r6, r0
 801cea0:	d1d6      	bne.n	801ce50 <_svfiprintf_r+0x174>
 801cea2:	89ab      	ldrh	r3, [r5, #12]
 801cea4:	065b      	lsls	r3, r3, #25
 801cea6:	f53f af2d 	bmi.w	801cd04 <_svfiprintf_r+0x28>
 801ceaa:	9809      	ldr	r0, [sp, #36]	; 0x24
 801ceac:	b01d      	add	sp, #116	; 0x74
 801ceae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ceb2:	ab03      	add	r3, sp, #12
 801ceb4:	9300      	str	r3, [sp, #0]
 801ceb6:	462a      	mov	r2, r5
 801ceb8:	4b05      	ldr	r3, [pc, #20]	; (801ced0 <_svfiprintf_r+0x1f4>)
 801ceba:	a904      	add	r1, sp, #16
 801cebc:	4638      	mov	r0, r7
 801cebe:	f7fe f817 	bl	801aef0 <_printf_i>
 801cec2:	e7eb      	b.n	801ce9c <_svfiprintf_r+0x1c0>
 801cec4:	080211dc 	.word	0x080211dc
 801cec8:	080211e6 	.word	0x080211e6
 801cecc:	0801a9e1 	.word	0x0801a9e1
 801ced0:	0801cc29 	.word	0x0801cc29
 801ced4:	080211e2 	.word	0x080211e2

0801ced8 <__sfputc_r>:
 801ced8:	6893      	ldr	r3, [r2, #8]
 801ceda:	3b01      	subs	r3, #1
 801cedc:	2b00      	cmp	r3, #0
 801cede:	b410      	push	{r4}
 801cee0:	6093      	str	r3, [r2, #8]
 801cee2:	da08      	bge.n	801cef6 <__sfputc_r+0x1e>
 801cee4:	6994      	ldr	r4, [r2, #24]
 801cee6:	42a3      	cmp	r3, r4
 801cee8:	db01      	blt.n	801ceee <__sfputc_r+0x16>
 801ceea:	290a      	cmp	r1, #10
 801ceec:	d103      	bne.n	801cef6 <__sfputc_r+0x1e>
 801ceee:	f85d 4b04 	ldr.w	r4, [sp], #4
 801cef2:	f7fe bab2 	b.w	801b45a <__swbuf_r>
 801cef6:	6813      	ldr	r3, [r2, #0]
 801cef8:	1c58      	adds	r0, r3, #1
 801cefa:	6010      	str	r0, [r2, #0]
 801cefc:	7019      	strb	r1, [r3, #0]
 801cefe:	4608      	mov	r0, r1
 801cf00:	f85d 4b04 	ldr.w	r4, [sp], #4
 801cf04:	4770      	bx	lr

0801cf06 <__sfputs_r>:
 801cf06:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801cf08:	4606      	mov	r6, r0
 801cf0a:	460f      	mov	r7, r1
 801cf0c:	4614      	mov	r4, r2
 801cf0e:	18d5      	adds	r5, r2, r3
 801cf10:	42ac      	cmp	r4, r5
 801cf12:	d101      	bne.n	801cf18 <__sfputs_r+0x12>
 801cf14:	2000      	movs	r0, #0
 801cf16:	e007      	b.n	801cf28 <__sfputs_r+0x22>
 801cf18:	f814 1b01 	ldrb.w	r1, [r4], #1
 801cf1c:	463a      	mov	r2, r7
 801cf1e:	4630      	mov	r0, r6
 801cf20:	f7ff ffda 	bl	801ced8 <__sfputc_r>
 801cf24:	1c43      	adds	r3, r0, #1
 801cf26:	d1f3      	bne.n	801cf10 <__sfputs_r+0xa>
 801cf28:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801cf2c <_vfiprintf_r>:
 801cf2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801cf30:	460d      	mov	r5, r1
 801cf32:	b09d      	sub	sp, #116	; 0x74
 801cf34:	4614      	mov	r4, r2
 801cf36:	4698      	mov	r8, r3
 801cf38:	4606      	mov	r6, r0
 801cf3a:	b118      	cbz	r0, 801cf44 <_vfiprintf_r+0x18>
 801cf3c:	6a03      	ldr	r3, [r0, #32]
 801cf3e:	b90b      	cbnz	r3, 801cf44 <_vfiprintf_r+0x18>
 801cf40:	f7fe f984 	bl	801b24c <__sinit>
 801cf44:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801cf46:	07d9      	lsls	r1, r3, #31
 801cf48:	d405      	bmi.n	801cf56 <_vfiprintf_r+0x2a>
 801cf4a:	89ab      	ldrh	r3, [r5, #12]
 801cf4c:	059a      	lsls	r2, r3, #22
 801cf4e:	d402      	bmi.n	801cf56 <_vfiprintf_r+0x2a>
 801cf50:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801cf52:	f7fe fbca 	bl	801b6ea <__retarget_lock_acquire_recursive>
 801cf56:	89ab      	ldrh	r3, [r5, #12]
 801cf58:	071b      	lsls	r3, r3, #28
 801cf5a:	d501      	bpl.n	801cf60 <_vfiprintf_r+0x34>
 801cf5c:	692b      	ldr	r3, [r5, #16]
 801cf5e:	b99b      	cbnz	r3, 801cf88 <_vfiprintf_r+0x5c>
 801cf60:	4629      	mov	r1, r5
 801cf62:	4630      	mov	r0, r6
 801cf64:	f7fe fab6 	bl	801b4d4 <__swsetup_r>
 801cf68:	b170      	cbz	r0, 801cf88 <_vfiprintf_r+0x5c>
 801cf6a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801cf6c:	07dc      	lsls	r4, r3, #31
 801cf6e:	d504      	bpl.n	801cf7a <_vfiprintf_r+0x4e>
 801cf70:	f04f 30ff 	mov.w	r0, #4294967295
 801cf74:	b01d      	add	sp, #116	; 0x74
 801cf76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801cf7a:	89ab      	ldrh	r3, [r5, #12]
 801cf7c:	0598      	lsls	r0, r3, #22
 801cf7e:	d4f7      	bmi.n	801cf70 <_vfiprintf_r+0x44>
 801cf80:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801cf82:	f7fe fbb3 	bl	801b6ec <__retarget_lock_release_recursive>
 801cf86:	e7f3      	b.n	801cf70 <_vfiprintf_r+0x44>
 801cf88:	2300      	movs	r3, #0
 801cf8a:	9309      	str	r3, [sp, #36]	; 0x24
 801cf8c:	2320      	movs	r3, #32
 801cf8e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801cf92:	f8cd 800c 	str.w	r8, [sp, #12]
 801cf96:	2330      	movs	r3, #48	; 0x30
 801cf98:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 801d14c <_vfiprintf_r+0x220>
 801cf9c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801cfa0:	f04f 0901 	mov.w	r9, #1
 801cfa4:	4623      	mov	r3, r4
 801cfa6:	469a      	mov	sl, r3
 801cfa8:	f813 2b01 	ldrb.w	r2, [r3], #1
 801cfac:	b10a      	cbz	r2, 801cfb2 <_vfiprintf_r+0x86>
 801cfae:	2a25      	cmp	r2, #37	; 0x25
 801cfb0:	d1f9      	bne.n	801cfa6 <_vfiprintf_r+0x7a>
 801cfb2:	ebba 0b04 	subs.w	fp, sl, r4
 801cfb6:	d00b      	beq.n	801cfd0 <_vfiprintf_r+0xa4>
 801cfb8:	465b      	mov	r3, fp
 801cfba:	4622      	mov	r2, r4
 801cfbc:	4629      	mov	r1, r5
 801cfbe:	4630      	mov	r0, r6
 801cfc0:	f7ff ffa1 	bl	801cf06 <__sfputs_r>
 801cfc4:	3001      	adds	r0, #1
 801cfc6:	f000 80a9 	beq.w	801d11c <_vfiprintf_r+0x1f0>
 801cfca:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801cfcc:	445a      	add	r2, fp
 801cfce:	9209      	str	r2, [sp, #36]	; 0x24
 801cfd0:	f89a 3000 	ldrb.w	r3, [sl]
 801cfd4:	2b00      	cmp	r3, #0
 801cfd6:	f000 80a1 	beq.w	801d11c <_vfiprintf_r+0x1f0>
 801cfda:	2300      	movs	r3, #0
 801cfdc:	f04f 32ff 	mov.w	r2, #4294967295
 801cfe0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801cfe4:	f10a 0a01 	add.w	sl, sl, #1
 801cfe8:	9304      	str	r3, [sp, #16]
 801cfea:	9307      	str	r3, [sp, #28]
 801cfec:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801cff0:	931a      	str	r3, [sp, #104]	; 0x68
 801cff2:	4654      	mov	r4, sl
 801cff4:	2205      	movs	r2, #5
 801cff6:	f814 1b01 	ldrb.w	r1, [r4], #1
 801cffa:	4854      	ldr	r0, [pc, #336]	; (801d14c <_vfiprintf_r+0x220>)
 801cffc:	f7e4 ffb0 	bl	8001f60 <memchr>
 801d000:	9a04      	ldr	r2, [sp, #16]
 801d002:	b9d8      	cbnz	r0, 801d03c <_vfiprintf_r+0x110>
 801d004:	06d1      	lsls	r1, r2, #27
 801d006:	bf44      	itt	mi
 801d008:	2320      	movmi	r3, #32
 801d00a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801d00e:	0713      	lsls	r3, r2, #28
 801d010:	bf44      	itt	mi
 801d012:	232b      	movmi	r3, #43	; 0x2b
 801d014:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801d018:	f89a 3000 	ldrb.w	r3, [sl]
 801d01c:	2b2a      	cmp	r3, #42	; 0x2a
 801d01e:	d015      	beq.n	801d04c <_vfiprintf_r+0x120>
 801d020:	9a07      	ldr	r2, [sp, #28]
 801d022:	4654      	mov	r4, sl
 801d024:	2000      	movs	r0, #0
 801d026:	f04f 0c0a 	mov.w	ip, #10
 801d02a:	4621      	mov	r1, r4
 801d02c:	f811 3b01 	ldrb.w	r3, [r1], #1
 801d030:	3b30      	subs	r3, #48	; 0x30
 801d032:	2b09      	cmp	r3, #9
 801d034:	d94d      	bls.n	801d0d2 <_vfiprintf_r+0x1a6>
 801d036:	b1b0      	cbz	r0, 801d066 <_vfiprintf_r+0x13a>
 801d038:	9207      	str	r2, [sp, #28]
 801d03a:	e014      	b.n	801d066 <_vfiprintf_r+0x13a>
 801d03c:	eba0 0308 	sub.w	r3, r0, r8
 801d040:	fa09 f303 	lsl.w	r3, r9, r3
 801d044:	4313      	orrs	r3, r2
 801d046:	9304      	str	r3, [sp, #16]
 801d048:	46a2      	mov	sl, r4
 801d04a:	e7d2      	b.n	801cff2 <_vfiprintf_r+0xc6>
 801d04c:	9b03      	ldr	r3, [sp, #12]
 801d04e:	1d19      	adds	r1, r3, #4
 801d050:	681b      	ldr	r3, [r3, #0]
 801d052:	9103      	str	r1, [sp, #12]
 801d054:	2b00      	cmp	r3, #0
 801d056:	bfbb      	ittet	lt
 801d058:	425b      	neglt	r3, r3
 801d05a:	f042 0202 	orrlt.w	r2, r2, #2
 801d05e:	9307      	strge	r3, [sp, #28]
 801d060:	9307      	strlt	r3, [sp, #28]
 801d062:	bfb8      	it	lt
 801d064:	9204      	strlt	r2, [sp, #16]
 801d066:	7823      	ldrb	r3, [r4, #0]
 801d068:	2b2e      	cmp	r3, #46	; 0x2e
 801d06a:	d10c      	bne.n	801d086 <_vfiprintf_r+0x15a>
 801d06c:	7863      	ldrb	r3, [r4, #1]
 801d06e:	2b2a      	cmp	r3, #42	; 0x2a
 801d070:	d134      	bne.n	801d0dc <_vfiprintf_r+0x1b0>
 801d072:	9b03      	ldr	r3, [sp, #12]
 801d074:	1d1a      	adds	r2, r3, #4
 801d076:	681b      	ldr	r3, [r3, #0]
 801d078:	9203      	str	r2, [sp, #12]
 801d07a:	2b00      	cmp	r3, #0
 801d07c:	bfb8      	it	lt
 801d07e:	f04f 33ff 	movlt.w	r3, #4294967295
 801d082:	3402      	adds	r4, #2
 801d084:	9305      	str	r3, [sp, #20]
 801d086:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 801d15c <_vfiprintf_r+0x230>
 801d08a:	7821      	ldrb	r1, [r4, #0]
 801d08c:	2203      	movs	r2, #3
 801d08e:	4650      	mov	r0, sl
 801d090:	f7e4 ff66 	bl	8001f60 <memchr>
 801d094:	b138      	cbz	r0, 801d0a6 <_vfiprintf_r+0x17a>
 801d096:	9b04      	ldr	r3, [sp, #16]
 801d098:	eba0 000a 	sub.w	r0, r0, sl
 801d09c:	2240      	movs	r2, #64	; 0x40
 801d09e:	4082      	lsls	r2, r0
 801d0a0:	4313      	orrs	r3, r2
 801d0a2:	3401      	adds	r4, #1
 801d0a4:	9304      	str	r3, [sp, #16]
 801d0a6:	f814 1b01 	ldrb.w	r1, [r4], #1
 801d0aa:	4829      	ldr	r0, [pc, #164]	; (801d150 <_vfiprintf_r+0x224>)
 801d0ac:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801d0b0:	2206      	movs	r2, #6
 801d0b2:	f7e4 ff55 	bl	8001f60 <memchr>
 801d0b6:	2800      	cmp	r0, #0
 801d0b8:	d03f      	beq.n	801d13a <_vfiprintf_r+0x20e>
 801d0ba:	4b26      	ldr	r3, [pc, #152]	; (801d154 <_vfiprintf_r+0x228>)
 801d0bc:	bb1b      	cbnz	r3, 801d106 <_vfiprintf_r+0x1da>
 801d0be:	9b03      	ldr	r3, [sp, #12]
 801d0c0:	3307      	adds	r3, #7
 801d0c2:	f023 0307 	bic.w	r3, r3, #7
 801d0c6:	3308      	adds	r3, #8
 801d0c8:	9303      	str	r3, [sp, #12]
 801d0ca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801d0cc:	443b      	add	r3, r7
 801d0ce:	9309      	str	r3, [sp, #36]	; 0x24
 801d0d0:	e768      	b.n	801cfa4 <_vfiprintf_r+0x78>
 801d0d2:	fb0c 3202 	mla	r2, ip, r2, r3
 801d0d6:	460c      	mov	r4, r1
 801d0d8:	2001      	movs	r0, #1
 801d0da:	e7a6      	b.n	801d02a <_vfiprintf_r+0xfe>
 801d0dc:	2300      	movs	r3, #0
 801d0de:	3401      	adds	r4, #1
 801d0e0:	9305      	str	r3, [sp, #20]
 801d0e2:	4619      	mov	r1, r3
 801d0e4:	f04f 0c0a 	mov.w	ip, #10
 801d0e8:	4620      	mov	r0, r4
 801d0ea:	f810 2b01 	ldrb.w	r2, [r0], #1
 801d0ee:	3a30      	subs	r2, #48	; 0x30
 801d0f0:	2a09      	cmp	r2, #9
 801d0f2:	d903      	bls.n	801d0fc <_vfiprintf_r+0x1d0>
 801d0f4:	2b00      	cmp	r3, #0
 801d0f6:	d0c6      	beq.n	801d086 <_vfiprintf_r+0x15a>
 801d0f8:	9105      	str	r1, [sp, #20]
 801d0fa:	e7c4      	b.n	801d086 <_vfiprintf_r+0x15a>
 801d0fc:	fb0c 2101 	mla	r1, ip, r1, r2
 801d100:	4604      	mov	r4, r0
 801d102:	2301      	movs	r3, #1
 801d104:	e7f0      	b.n	801d0e8 <_vfiprintf_r+0x1bc>
 801d106:	ab03      	add	r3, sp, #12
 801d108:	9300      	str	r3, [sp, #0]
 801d10a:	462a      	mov	r2, r5
 801d10c:	4b12      	ldr	r3, [pc, #72]	; (801d158 <_vfiprintf_r+0x22c>)
 801d10e:	a904      	add	r1, sp, #16
 801d110:	4630      	mov	r0, r6
 801d112:	f7fd fc65 	bl	801a9e0 <_printf_float>
 801d116:	4607      	mov	r7, r0
 801d118:	1c78      	adds	r0, r7, #1
 801d11a:	d1d6      	bne.n	801d0ca <_vfiprintf_r+0x19e>
 801d11c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801d11e:	07d9      	lsls	r1, r3, #31
 801d120:	d405      	bmi.n	801d12e <_vfiprintf_r+0x202>
 801d122:	89ab      	ldrh	r3, [r5, #12]
 801d124:	059a      	lsls	r2, r3, #22
 801d126:	d402      	bmi.n	801d12e <_vfiprintf_r+0x202>
 801d128:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801d12a:	f7fe fadf 	bl	801b6ec <__retarget_lock_release_recursive>
 801d12e:	89ab      	ldrh	r3, [r5, #12]
 801d130:	065b      	lsls	r3, r3, #25
 801d132:	f53f af1d 	bmi.w	801cf70 <_vfiprintf_r+0x44>
 801d136:	9809      	ldr	r0, [sp, #36]	; 0x24
 801d138:	e71c      	b.n	801cf74 <_vfiprintf_r+0x48>
 801d13a:	ab03      	add	r3, sp, #12
 801d13c:	9300      	str	r3, [sp, #0]
 801d13e:	462a      	mov	r2, r5
 801d140:	4b05      	ldr	r3, [pc, #20]	; (801d158 <_vfiprintf_r+0x22c>)
 801d142:	a904      	add	r1, sp, #16
 801d144:	4630      	mov	r0, r6
 801d146:	f7fd fed3 	bl	801aef0 <_printf_i>
 801d14a:	e7e4      	b.n	801d116 <_vfiprintf_r+0x1ea>
 801d14c:	080211dc 	.word	0x080211dc
 801d150:	080211e6 	.word	0x080211e6
 801d154:	0801a9e1 	.word	0x0801a9e1
 801d158:	0801cf07 	.word	0x0801cf07
 801d15c:	080211e2 	.word	0x080211e2

0801d160 <__sflush_r>:
 801d160:	898a      	ldrh	r2, [r1, #12]
 801d162:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801d166:	4605      	mov	r5, r0
 801d168:	0710      	lsls	r0, r2, #28
 801d16a:	460c      	mov	r4, r1
 801d16c:	d458      	bmi.n	801d220 <__sflush_r+0xc0>
 801d16e:	684b      	ldr	r3, [r1, #4]
 801d170:	2b00      	cmp	r3, #0
 801d172:	dc05      	bgt.n	801d180 <__sflush_r+0x20>
 801d174:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801d176:	2b00      	cmp	r3, #0
 801d178:	dc02      	bgt.n	801d180 <__sflush_r+0x20>
 801d17a:	2000      	movs	r0, #0
 801d17c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801d180:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801d182:	2e00      	cmp	r6, #0
 801d184:	d0f9      	beq.n	801d17a <__sflush_r+0x1a>
 801d186:	2300      	movs	r3, #0
 801d188:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801d18c:	682f      	ldr	r7, [r5, #0]
 801d18e:	6a21      	ldr	r1, [r4, #32]
 801d190:	602b      	str	r3, [r5, #0]
 801d192:	d032      	beq.n	801d1fa <__sflush_r+0x9a>
 801d194:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801d196:	89a3      	ldrh	r3, [r4, #12]
 801d198:	075a      	lsls	r2, r3, #29
 801d19a:	d505      	bpl.n	801d1a8 <__sflush_r+0x48>
 801d19c:	6863      	ldr	r3, [r4, #4]
 801d19e:	1ac0      	subs	r0, r0, r3
 801d1a0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801d1a2:	b10b      	cbz	r3, 801d1a8 <__sflush_r+0x48>
 801d1a4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801d1a6:	1ac0      	subs	r0, r0, r3
 801d1a8:	2300      	movs	r3, #0
 801d1aa:	4602      	mov	r2, r0
 801d1ac:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801d1ae:	6a21      	ldr	r1, [r4, #32]
 801d1b0:	4628      	mov	r0, r5
 801d1b2:	47b0      	blx	r6
 801d1b4:	1c43      	adds	r3, r0, #1
 801d1b6:	89a3      	ldrh	r3, [r4, #12]
 801d1b8:	d106      	bne.n	801d1c8 <__sflush_r+0x68>
 801d1ba:	6829      	ldr	r1, [r5, #0]
 801d1bc:	291d      	cmp	r1, #29
 801d1be:	d82b      	bhi.n	801d218 <__sflush_r+0xb8>
 801d1c0:	4a29      	ldr	r2, [pc, #164]	; (801d268 <__sflush_r+0x108>)
 801d1c2:	410a      	asrs	r2, r1
 801d1c4:	07d6      	lsls	r6, r2, #31
 801d1c6:	d427      	bmi.n	801d218 <__sflush_r+0xb8>
 801d1c8:	2200      	movs	r2, #0
 801d1ca:	6062      	str	r2, [r4, #4]
 801d1cc:	04d9      	lsls	r1, r3, #19
 801d1ce:	6922      	ldr	r2, [r4, #16]
 801d1d0:	6022      	str	r2, [r4, #0]
 801d1d2:	d504      	bpl.n	801d1de <__sflush_r+0x7e>
 801d1d4:	1c42      	adds	r2, r0, #1
 801d1d6:	d101      	bne.n	801d1dc <__sflush_r+0x7c>
 801d1d8:	682b      	ldr	r3, [r5, #0]
 801d1da:	b903      	cbnz	r3, 801d1de <__sflush_r+0x7e>
 801d1dc:	6560      	str	r0, [r4, #84]	; 0x54
 801d1de:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801d1e0:	602f      	str	r7, [r5, #0]
 801d1e2:	2900      	cmp	r1, #0
 801d1e4:	d0c9      	beq.n	801d17a <__sflush_r+0x1a>
 801d1e6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801d1ea:	4299      	cmp	r1, r3
 801d1ec:	d002      	beq.n	801d1f4 <__sflush_r+0x94>
 801d1ee:	4628      	mov	r0, r5
 801d1f0:	f7ff f89e 	bl	801c330 <_free_r>
 801d1f4:	2000      	movs	r0, #0
 801d1f6:	6360      	str	r0, [r4, #52]	; 0x34
 801d1f8:	e7c0      	b.n	801d17c <__sflush_r+0x1c>
 801d1fa:	2301      	movs	r3, #1
 801d1fc:	4628      	mov	r0, r5
 801d1fe:	47b0      	blx	r6
 801d200:	1c41      	adds	r1, r0, #1
 801d202:	d1c8      	bne.n	801d196 <__sflush_r+0x36>
 801d204:	682b      	ldr	r3, [r5, #0]
 801d206:	2b00      	cmp	r3, #0
 801d208:	d0c5      	beq.n	801d196 <__sflush_r+0x36>
 801d20a:	2b1d      	cmp	r3, #29
 801d20c:	d001      	beq.n	801d212 <__sflush_r+0xb2>
 801d20e:	2b16      	cmp	r3, #22
 801d210:	d101      	bne.n	801d216 <__sflush_r+0xb6>
 801d212:	602f      	str	r7, [r5, #0]
 801d214:	e7b1      	b.n	801d17a <__sflush_r+0x1a>
 801d216:	89a3      	ldrh	r3, [r4, #12]
 801d218:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801d21c:	81a3      	strh	r3, [r4, #12]
 801d21e:	e7ad      	b.n	801d17c <__sflush_r+0x1c>
 801d220:	690f      	ldr	r7, [r1, #16]
 801d222:	2f00      	cmp	r7, #0
 801d224:	d0a9      	beq.n	801d17a <__sflush_r+0x1a>
 801d226:	0793      	lsls	r3, r2, #30
 801d228:	680e      	ldr	r6, [r1, #0]
 801d22a:	bf08      	it	eq
 801d22c:	694b      	ldreq	r3, [r1, #20]
 801d22e:	600f      	str	r7, [r1, #0]
 801d230:	bf18      	it	ne
 801d232:	2300      	movne	r3, #0
 801d234:	eba6 0807 	sub.w	r8, r6, r7
 801d238:	608b      	str	r3, [r1, #8]
 801d23a:	f1b8 0f00 	cmp.w	r8, #0
 801d23e:	dd9c      	ble.n	801d17a <__sflush_r+0x1a>
 801d240:	6a21      	ldr	r1, [r4, #32]
 801d242:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801d244:	4643      	mov	r3, r8
 801d246:	463a      	mov	r2, r7
 801d248:	4628      	mov	r0, r5
 801d24a:	47b0      	blx	r6
 801d24c:	2800      	cmp	r0, #0
 801d24e:	dc06      	bgt.n	801d25e <__sflush_r+0xfe>
 801d250:	89a3      	ldrh	r3, [r4, #12]
 801d252:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801d256:	81a3      	strh	r3, [r4, #12]
 801d258:	f04f 30ff 	mov.w	r0, #4294967295
 801d25c:	e78e      	b.n	801d17c <__sflush_r+0x1c>
 801d25e:	4407      	add	r7, r0
 801d260:	eba8 0800 	sub.w	r8, r8, r0
 801d264:	e7e9      	b.n	801d23a <__sflush_r+0xda>
 801d266:	bf00      	nop
 801d268:	dfbffffe 	.word	0xdfbffffe

0801d26c <_fflush_r>:
 801d26c:	b538      	push	{r3, r4, r5, lr}
 801d26e:	690b      	ldr	r3, [r1, #16]
 801d270:	4605      	mov	r5, r0
 801d272:	460c      	mov	r4, r1
 801d274:	b913      	cbnz	r3, 801d27c <_fflush_r+0x10>
 801d276:	2500      	movs	r5, #0
 801d278:	4628      	mov	r0, r5
 801d27a:	bd38      	pop	{r3, r4, r5, pc}
 801d27c:	b118      	cbz	r0, 801d286 <_fflush_r+0x1a>
 801d27e:	6a03      	ldr	r3, [r0, #32]
 801d280:	b90b      	cbnz	r3, 801d286 <_fflush_r+0x1a>
 801d282:	f7fd ffe3 	bl	801b24c <__sinit>
 801d286:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801d28a:	2b00      	cmp	r3, #0
 801d28c:	d0f3      	beq.n	801d276 <_fflush_r+0xa>
 801d28e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801d290:	07d0      	lsls	r0, r2, #31
 801d292:	d404      	bmi.n	801d29e <_fflush_r+0x32>
 801d294:	0599      	lsls	r1, r3, #22
 801d296:	d402      	bmi.n	801d29e <_fflush_r+0x32>
 801d298:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801d29a:	f7fe fa26 	bl	801b6ea <__retarget_lock_acquire_recursive>
 801d29e:	4628      	mov	r0, r5
 801d2a0:	4621      	mov	r1, r4
 801d2a2:	f7ff ff5d 	bl	801d160 <__sflush_r>
 801d2a6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801d2a8:	07da      	lsls	r2, r3, #31
 801d2aa:	4605      	mov	r5, r0
 801d2ac:	d4e4      	bmi.n	801d278 <_fflush_r+0xc>
 801d2ae:	89a3      	ldrh	r3, [r4, #12]
 801d2b0:	059b      	lsls	r3, r3, #22
 801d2b2:	d4e1      	bmi.n	801d278 <_fflush_r+0xc>
 801d2b4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801d2b6:	f7fe fa19 	bl	801b6ec <__retarget_lock_release_recursive>
 801d2ba:	e7dd      	b.n	801d278 <_fflush_r+0xc>

0801d2bc <fiprintf>:
 801d2bc:	b40e      	push	{r1, r2, r3}
 801d2be:	b503      	push	{r0, r1, lr}
 801d2c0:	4601      	mov	r1, r0
 801d2c2:	ab03      	add	r3, sp, #12
 801d2c4:	4805      	ldr	r0, [pc, #20]	; (801d2dc <fiprintf+0x20>)
 801d2c6:	f853 2b04 	ldr.w	r2, [r3], #4
 801d2ca:	6800      	ldr	r0, [r0, #0]
 801d2cc:	9301      	str	r3, [sp, #4]
 801d2ce:	f7ff fe2d 	bl	801cf2c <_vfiprintf_r>
 801d2d2:	b002      	add	sp, #8
 801d2d4:	f85d eb04 	ldr.w	lr, [sp], #4
 801d2d8:	b003      	add	sp, #12
 801d2da:	4770      	bx	lr
 801d2dc:	200001cc 	.word	0x200001cc

0801d2e0 <__swhatbuf_r>:
 801d2e0:	b570      	push	{r4, r5, r6, lr}
 801d2e2:	460c      	mov	r4, r1
 801d2e4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801d2e8:	2900      	cmp	r1, #0
 801d2ea:	b096      	sub	sp, #88	; 0x58
 801d2ec:	4615      	mov	r5, r2
 801d2ee:	461e      	mov	r6, r3
 801d2f0:	da0d      	bge.n	801d30e <__swhatbuf_r+0x2e>
 801d2f2:	89a3      	ldrh	r3, [r4, #12]
 801d2f4:	f013 0f80 	tst.w	r3, #128	; 0x80
 801d2f8:	f04f 0100 	mov.w	r1, #0
 801d2fc:	bf0c      	ite	eq
 801d2fe:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 801d302:	2340      	movne	r3, #64	; 0x40
 801d304:	2000      	movs	r0, #0
 801d306:	6031      	str	r1, [r6, #0]
 801d308:	602b      	str	r3, [r5, #0]
 801d30a:	b016      	add	sp, #88	; 0x58
 801d30c:	bd70      	pop	{r4, r5, r6, pc}
 801d30e:	466a      	mov	r2, sp
 801d310:	f000 f848 	bl	801d3a4 <_fstat_r>
 801d314:	2800      	cmp	r0, #0
 801d316:	dbec      	blt.n	801d2f2 <__swhatbuf_r+0x12>
 801d318:	9901      	ldr	r1, [sp, #4]
 801d31a:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 801d31e:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 801d322:	4259      	negs	r1, r3
 801d324:	4159      	adcs	r1, r3
 801d326:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801d32a:	e7eb      	b.n	801d304 <__swhatbuf_r+0x24>

0801d32c <__smakebuf_r>:
 801d32c:	898b      	ldrh	r3, [r1, #12]
 801d32e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801d330:	079d      	lsls	r5, r3, #30
 801d332:	4606      	mov	r6, r0
 801d334:	460c      	mov	r4, r1
 801d336:	d507      	bpl.n	801d348 <__smakebuf_r+0x1c>
 801d338:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801d33c:	6023      	str	r3, [r4, #0]
 801d33e:	6123      	str	r3, [r4, #16]
 801d340:	2301      	movs	r3, #1
 801d342:	6163      	str	r3, [r4, #20]
 801d344:	b002      	add	sp, #8
 801d346:	bd70      	pop	{r4, r5, r6, pc}
 801d348:	ab01      	add	r3, sp, #4
 801d34a:	466a      	mov	r2, sp
 801d34c:	f7ff ffc8 	bl	801d2e0 <__swhatbuf_r>
 801d350:	9900      	ldr	r1, [sp, #0]
 801d352:	4605      	mov	r5, r0
 801d354:	4630      	mov	r0, r6
 801d356:	f7ff f85f 	bl	801c418 <_malloc_r>
 801d35a:	b948      	cbnz	r0, 801d370 <__smakebuf_r+0x44>
 801d35c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801d360:	059a      	lsls	r2, r3, #22
 801d362:	d4ef      	bmi.n	801d344 <__smakebuf_r+0x18>
 801d364:	f023 0303 	bic.w	r3, r3, #3
 801d368:	f043 0302 	orr.w	r3, r3, #2
 801d36c:	81a3      	strh	r3, [r4, #12]
 801d36e:	e7e3      	b.n	801d338 <__smakebuf_r+0xc>
 801d370:	89a3      	ldrh	r3, [r4, #12]
 801d372:	6020      	str	r0, [r4, #0]
 801d374:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801d378:	81a3      	strh	r3, [r4, #12]
 801d37a:	9b00      	ldr	r3, [sp, #0]
 801d37c:	6163      	str	r3, [r4, #20]
 801d37e:	9b01      	ldr	r3, [sp, #4]
 801d380:	6120      	str	r0, [r4, #16]
 801d382:	b15b      	cbz	r3, 801d39c <__smakebuf_r+0x70>
 801d384:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801d388:	4630      	mov	r0, r6
 801d38a:	f000 f81d 	bl	801d3c8 <_isatty_r>
 801d38e:	b128      	cbz	r0, 801d39c <__smakebuf_r+0x70>
 801d390:	89a3      	ldrh	r3, [r4, #12]
 801d392:	f023 0303 	bic.w	r3, r3, #3
 801d396:	f043 0301 	orr.w	r3, r3, #1
 801d39a:	81a3      	strh	r3, [r4, #12]
 801d39c:	89a3      	ldrh	r3, [r4, #12]
 801d39e:	431d      	orrs	r5, r3
 801d3a0:	81a5      	strh	r5, [r4, #12]
 801d3a2:	e7cf      	b.n	801d344 <__smakebuf_r+0x18>

0801d3a4 <_fstat_r>:
 801d3a4:	b538      	push	{r3, r4, r5, lr}
 801d3a6:	4d07      	ldr	r5, [pc, #28]	; (801d3c4 <_fstat_r+0x20>)
 801d3a8:	2300      	movs	r3, #0
 801d3aa:	4604      	mov	r4, r0
 801d3ac:	4608      	mov	r0, r1
 801d3ae:	4611      	mov	r1, r2
 801d3b0:	602b      	str	r3, [r5, #0]
 801d3b2:	f7e6 fbde 	bl	8003b72 <_fstat>
 801d3b6:	1c43      	adds	r3, r0, #1
 801d3b8:	d102      	bne.n	801d3c0 <_fstat_r+0x1c>
 801d3ba:	682b      	ldr	r3, [r5, #0]
 801d3bc:	b103      	cbz	r3, 801d3c0 <_fstat_r+0x1c>
 801d3be:	6023      	str	r3, [r4, #0]
 801d3c0:	bd38      	pop	{r3, r4, r5, pc}
 801d3c2:	bf00      	nop
 801d3c4:	20007454 	.word	0x20007454

0801d3c8 <_isatty_r>:
 801d3c8:	b538      	push	{r3, r4, r5, lr}
 801d3ca:	4d06      	ldr	r5, [pc, #24]	; (801d3e4 <_isatty_r+0x1c>)
 801d3cc:	2300      	movs	r3, #0
 801d3ce:	4604      	mov	r4, r0
 801d3d0:	4608      	mov	r0, r1
 801d3d2:	602b      	str	r3, [r5, #0]
 801d3d4:	f7e6 fbdd 	bl	8003b92 <_isatty>
 801d3d8:	1c43      	adds	r3, r0, #1
 801d3da:	d102      	bne.n	801d3e2 <_isatty_r+0x1a>
 801d3dc:	682b      	ldr	r3, [r5, #0]
 801d3de:	b103      	cbz	r3, 801d3e2 <_isatty_r+0x1a>
 801d3e0:	6023      	str	r3, [r4, #0]
 801d3e2:	bd38      	pop	{r3, r4, r5, pc}
 801d3e4:	20007454 	.word	0x20007454

0801d3e8 <_sbrk_r>:
 801d3e8:	b538      	push	{r3, r4, r5, lr}
 801d3ea:	4d06      	ldr	r5, [pc, #24]	; (801d404 <_sbrk_r+0x1c>)
 801d3ec:	2300      	movs	r3, #0
 801d3ee:	4604      	mov	r4, r0
 801d3f0:	4608      	mov	r0, r1
 801d3f2:	602b      	str	r3, [r5, #0]
 801d3f4:	f7e6 fbe6 	bl	8003bc4 <_sbrk>
 801d3f8:	1c43      	adds	r3, r0, #1
 801d3fa:	d102      	bne.n	801d402 <_sbrk_r+0x1a>
 801d3fc:	682b      	ldr	r3, [r5, #0]
 801d3fe:	b103      	cbz	r3, 801d402 <_sbrk_r+0x1a>
 801d400:	6023      	str	r3, [r4, #0]
 801d402:	bd38      	pop	{r3, r4, r5, pc}
 801d404:	20007454 	.word	0x20007454

0801d408 <abort>:
 801d408:	b508      	push	{r3, lr}
 801d40a:	2006      	movs	r0, #6
 801d40c:	f000 f890 	bl	801d530 <raise>
 801d410:	2001      	movs	r0, #1
 801d412:	f7e6 fb5f 	bl	8003ad4 <_exit>

0801d416 <_calloc_r>:
 801d416:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801d418:	fba1 2402 	umull	r2, r4, r1, r2
 801d41c:	b94c      	cbnz	r4, 801d432 <_calloc_r+0x1c>
 801d41e:	4611      	mov	r1, r2
 801d420:	9201      	str	r2, [sp, #4]
 801d422:	f7fe fff9 	bl	801c418 <_malloc_r>
 801d426:	9a01      	ldr	r2, [sp, #4]
 801d428:	4605      	mov	r5, r0
 801d42a:	b930      	cbnz	r0, 801d43a <_calloc_r+0x24>
 801d42c:	4628      	mov	r0, r5
 801d42e:	b003      	add	sp, #12
 801d430:	bd30      	pop	{r4, r5, pc}
 801d432:	220c      	movs	r2, #12
 801d434:	6002      	str	r2, [r0, #0]
 801d436:	2500      	movs	r5, #0
 801d438:	e7f8      	b.n	801d42c <_calloc_r+0x16>
 801d43a:	4621      	mov	r1, r4
 801d43c:	f7fe f8cc 	bl	801b5d8 <memset>
 801d440:	e7f4      	b.n	801d42c <_calloc_r+0x16>

0801d442 <__ascii_mbtowc>:
 801d442:	b082      	sub	sp, #8
 801d444:	b901      	cbnz	r1, 801d448 <__ascii_mbtowc+0x6>
 801d446:	a901      	add	r1, sp, #4
 801d448:	b142      	cbz	r2, 801d45c <__ascii_mbtowc+0x1a>
 801d44a:	b14b      	cbz	r3, 801d460 <__ascii_mbtowc+0x1e>
 801d44c:	7813      	ldrb	r3, [r2, #0]
 801d44e:	600b      	str	r3, [r1, #0]
 801d450:	7812      	ldrb	r2, [r2, #0]
 801d452:	1e10      	subs	r0, r2, #0
 801d454:	bf18      	it	ne
 801d456:	2001      	movne	r0, #1
 801d458:	b002      	add	sp, #8
 801d45a:	4770      	bx	lr
 801d45c:	4610      	mov	r0, r2
 801d45e:	e7fb      	b.n	801d458 <__ascii_mbtowc+0x16>
 801d460:	f06f 0001 	mvn.w	r0, #1
 801d464:	e7f8      	b.n	801d458 <__ascii_mbtowc+0x16>

0801d466 <_realloc_r>:
 801d466:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801d46a:	4680      	mov	r8, r0
 801d46c:	4614      	mov	r4, r2
 801d46e:	460e      	mov	r6, r1
 801d470:	b921      	cbnz	r1, 801d47c <_realloc_r+0x16>
 801d472:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801d476:	4611      	mov	r1, r2
 801d478:	f7fe bfce 	b.w	801c418 <_malloc_r>
 801d47c:	b92a      	cbnz	r2, 801d48a <_realloc_r+0x24>
 801d47e:	f7fe ff57 	bl	801c330 <_free_r>
 801d482:	4625      	mov	r5, r4
 801d484:	4628      	mov	r0, r5
 801d486:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801d48a:	f000 f86d 	bl	801d568 <_malloc_usable_size_r>
 801d48e:	4284      	cmp	r4, r0
 801d490:	4607      	mov	r7, r0
 801d492:	d802      	bhi.n	801d49a <_realloc_r+0x34>
 801d494:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 801d498:	d812      	bhi.n	801d4c0 <_realloc_r+0x5a>
 801d49a:	4621      	mov	r1, r4
 801d49c:	4640      	mov	r0, r8
 801d49e:	f7fe ffbb 	bl	801c418 <_malloc_r>
 801d4a2:	4605      	mov	r5, r0
 801d4a4:	2800      	cmp	r0, #0
 801d4a6:	d0ed      	beq.n	801d484 <_realloc_r+0x1e>
 801d4a8:	42bc      	cmp	r4, r7
 801d4aa:	4622      	mov	r2, r4
 801d4ac:	4631      	mov	r1, r6
 801d4ae:	bf28      	it	cs
 801d4b0:	463a      	movcs	r2, r7
 801d4b2:	f7fe f91c 	bl	801b6ee <memcpy>
 801d4b6:	4631      	mov	r1, r6
 801d4b8:	4640      	mov	r0, r8
 801d4ba:	f7fe ff39 	bl	801c330 <_free_r>
 801d4be:	e7e1      	b.n	801d484 <_realloc_r+0x1e>
 801d4c0:	4635      	mov	r5, r6
 801d4c2:	e7df      	b.n	801d484 <_realloc_r+0x1e>

0801d4c4 <__ascii_wctomb>:
 801d4c4:	b149      	cbz	r1, 801d4da <__ascii_wctomb+0x16>
 801d4c6:	2aff      	cmp	r2, #255	; 0xff
 801d4c8:	bf85      	ittet	hi
 801d4ca:	238a      	movhi	r3, #138	; 0x8a
 801d4cc:	6003      	strhi	r3, [r0, #0]
 801d4ce:	700a      	strbls	r2, [r1, #0]
 801d4d0:	f04f 30ff 	movhi.w	r0, #4294967295
 801d4d4:	bf98      	it	ls
 801d4d6:	2001      	movls	r0, #1
 801d4d8:	4770      	bx	lr
 801d4da:	4608      	mov	r0, r1
 801d4dc:	4770      	bx	lr

0801d4de <_raise_r>:
 801d4de:	291f      	cmp	r1, #31
 801d4e0:	b538      	push	{r3, r4, r5, lr}
 801d4e2:	4604      	mov	r4, r0
 801d4e4:	460d      	mov	r5, r1
 801d4e6:	d904      	bls.n	801d4f2 <_raise_r+0x14>
 801d4e8:	2316      	movs	r3, #22
 801d4ea:	6003      	str	r3, [r0, #0]
 801d4ec:	f04f 30ff 	mov.w	r0, #4294967295
 801d4f0:	bd38      	pop	{r3, r4, r5, pc}
 801d4f2:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 801d4f4:	b112      	cbz	r2, 801d4fc <_raise_r+0x1e>
 801d4f6:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801d4fa:	b94b      	cbnz	r3, 801d510 <_raise_r+0x32>
 801d4fc:	4620      	mov	r0, r4
 801d4fe:	f000 f831 	bl	801d564 <_getpid_r>
 801d502:	462a      	mov	r2, r5
 801d504:	4601      	mov	r1, r0
 801d506:	4620      	mov	r0, r4
 801d508:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801d50c:	f000 b818 	b.w	801d540 <_kill_r>
 801d510:	2b01      	cmp	r3, #1
 801d512:	d00a      	beq.n	801d52a <_raise_r+0x4c>
 801d514:	1c59      	adds	r1, r3, #1
 801d516:	d103      	bne.n	801d520 <_raise_r+0x42>
 801d518:	2316      	movs	r3, #22
 801d51a:	6003      	str	r3, [r0, #0]
 801d51c:	2001      	movs	r0, #1
 801d51e:	e7e7      	b.n	801d4f0 <_raise_r+0x12>
 801d520:	2400      	movs	r4, #0
 801d522:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 801d526:	4628      	mov	r0, r5
 801d528:	4798      	blx	r3
 801d52a:	2000      	movs	r0, #0
 801d52c:	e7e0      	b.n	801d4f0 <_raise_r+0x12>
	...

0801d530 <raise>:
 801d530:	4b02      	ldr	r3, [pc, #8]	; (801d53c <raise+0xc>)
 801d532:	4601      	mov	r1, r0
 801d534:	6818      	ldr	r0, [r3, #0]
 801d536:	f7ff bfd2 	b.w	801d4de <_raise_r>
 801d53a:	bf00      	nop
 801d53c:	200001cc 	.word	0x200001cc

0801d540 <_kill_r>:
 801d540:	b538      	push	{r3, r4, r5, lr}
 801d542:	4d07      	ldr	r5, [pc, #28]	; (801d560 <_kill_r+0x20>)
 801d544:	2300      	movs	r3, #0
 801d546:	4604      	mov	r4, r0
 801d548:	4608      	mov	r0, r1
 801d54a:	4611      	mov	r1, r2
 801d54c:	602b      	str	r3, [r5, #0]
 801d54e:	f7e6 faaf 	bl	8003ab0 <_kill>
 801d552:	1c43      	adds	r3, r0, #1
 801d554:	d102      	bne.n	801d55c <_kill_r+0x1c>
 801d556:	682b      	ldr	r3, [r5, #0]
 801d558:	b103      	cbz	r3, 801d55c <_kill_r+0x1c>
 801d55a:	6023      	str	r3, [r4, #0]
 801d55c:	bd38      	pop	{r3, r4, r5, pc}
 801d55e:	bf00      	nop
 801d560:	20007454 	.word	0x20007454

0801d564 <_getpid_r>:
 801d564:	f7e6 ba9c 	b.w	8003aa0 <_getpid>

0801d568 <_malloc_usable_size_r>:
 801d568:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801d56c:	1f18      	subs	r0, r3, #4
 801d56e:	2b00      	cmp	r3, #0
 801d570:	bfbc      	itt	lt
 801d572:	580b      	ldrlt	r3, [r1, r0]
 801d574:	18c0      	addlt	r0, r0, r3
 801d576:	4770      	bx	lr

0801d578 <_init>:
 801d578:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801d57a:	bf00      	nop
 801d57c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801d57e:	bc08      	pop	{r3}
 801d580:	469e      	mov	lr, r3
 801d582:	4770      	bx	lr

0801d584 <_fini>:
 801d584:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801d586:	bf00      	nop
 801d588:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801d58a:	bc08      	pop	{r3}
 801d58c:	469e      	mov	lr, r3
 801d58e:	4770      	bx	lr

0801d590 <__start_timer_veneer>:
 801d590:	f85f f000 	ldr.w	pc, [pc]	; 801d594 <__start_timer_veneer+0x4>
 801d594:	0000192d 	.word	0x0000192d

0801d598 <__timer_delay_veneer>:
 801d598:	f85f f000 	ldr.w	pc, [pc]	; 801d59c <__timer_delay_veneer+0x4>
 801d59c:	000019a5 	.word	0x000019a5

0801d5a0 <__init_ldc_comms_veneer>:
 801d5a0:	f85f f000 	ldr.w	pc, [pc]	; 801d5a4 <__init_ldc_comms_veneer+0x4>
 801d5a4:	000000b1 	.word	0x000000b1

0801d5a8 <__telnet_client_init_veneer>:
 801d5a8:	f85f f000 	ldr.w	pc, [pc]	; 801d5ac <__telnet_client_init_veneer+0x4>
 801d5ac:	00000001 	.word	0x00000001

0801d5b0 <__init_ldc_tec_veneer>:
 801d5b0:	f85f f000 	ldr.w	pc, [pc]	; 801d5b4 <__init_ldc_tec_veneer+0x4>
 801d5b4:	00000105 	.word	0x00000105

0801d5b8 <__start_POP_calibration_veneer>:
 801d5b8:	f85f f000 	ldr.w	pc, [pc]	; 801d5bc <__start_POP_calibration_veneer+0x4>
 801d5bc:	00001369 	.word	0x00001369

0801d5c0 <__stop_pop_veneer>:
 801d5c0:	f85f f000 	ldr.w	pc, [pc]	; 801d5c4 <__stop_pop_veneer+0x4>
 801d5c4:	00001af1 	.word	0x00001af1

0801d5c8 <__stop_timer_veneer>:
 801d5c8:	f85f f000 	ldr.w	pc, [pc]	; 801d5cc <__stop_timer_veneer+0x4>
 801d5cc:	00001969 	.word	0x00001969

0801d5d0 <__MW_update_veneer>:
 801d5d0:	f85f f000 	ldr.w	pc, [pc]	; 801d5d4 <__MW_update_veneer+0x4>
 801d5d4:	00001485 	.word	0x00001485

0801d5d8 <__check_timer_veneer>:
 801d5d8:	f85f f000 	ldr.w	pc, [pc]	; 801d5dc <__check_timer_veneer+0x4>
 801d5dc:	0000198d 	.word	0x0000198d

0801d5e0 <__calc_fixed_time_MW_sweep_veneer>:
 801d5e0:	f85f f000 	ldr.w	pc, [pc]	; 801d5e4 <__calc_fixed_time_MW_sweep_veneer+0x4>
 801d5e4:	00000ef1 	.word	0x00000ef1

0801d5e8 <__set_laser_current_veneer>:
 801d5e8:	f85f f000 	ldr.w	pc, [pc]	; 801d5ec <__set_laser_current_veneer+0x4>
 801d5ec:	000001ed 	.word	0x000001ed

0801d5f0 <__start_pop_veneer>:
 801d5f0:	f85f f000 	ldr.w	pc, [pc]	; 801d5f4 <__start_pop_veneer+0x4>
 801d5f4:	00001a95 	.word	0x00001a95
