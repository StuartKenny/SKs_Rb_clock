
atomic_clock.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .itcm         00001ba0  00000000  08000298  00020000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         0001a020  08001e40  08001e40  00021e40  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .user_flash   00000000  08100000  08100000  0004022c  2**0
                  CONTENTS
  4 .rodata       00003ae0  0801be60  0801be60  0003be60  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .ARM          00000008  0801f940  0801f940  0003f940  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .init_array   00000004  0801f948  0801f948  0003f948  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801f94c  0801f94c  0003f94c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000022c  20000000  0801f950  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000714c  20000230  0801fb7c  00040230  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  2000737c  0801fb7c  0004737c  2**0
                  ALLOC
 11 .lwip_sec     00044b83  30000000  30000000  00050000  2**2
                  ALLOC
 12 .ARM.attributes 0000002e  00000000  00000000  0004022c  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  0004025a  2**0
                  CONTENTS, READONLY
 14 .debug_info   00039908  00000000  00000000  0004029d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00007649  00000000  00000000  00079ba5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00002a00  00000000  00000000  000811f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00002180  00000000  00000000  00083bf0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00011f11  00000000  00000000  00085d70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00041663  00000000  00000000  00097c81  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    001a97ab  00000000  00000000  000d92e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  0000c0e4  00000000  00000000  00282a90  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000052  00000000  00000000  0028eb74  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .itcm:

00000000 <start_laser_tuning>:
/**
  * @brief  Function x.
  * @retval None
  */

void start_laser_tuning(void) {
       0:	b580      	push	{r7, lr}
       2:	af00      	add	r7, sp, #0
	stop_MW_operation(); //releases timers and ensures that sample pulse is generated for ADC
       4:	f001 fa72 	bl	14ec <stop_MW_operation>
	laser_state = LASER_STEPPED_UP;
       8:	4b17      	ldr	r3, [pc, #92]	; (68 <start_laser_tuning+0x68>)
       a:	2202      	movs	r2, #2
       c:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(LASER_TUNING_GPIO_Port, LASER_TUNING_Pin, GPIO_PIN_SET); //Laser_tuning output high
       e:	2201      	movs	r2, #1
      10:	f44f 5180 	mov.w	r1, #4096	; 0x1000
      14:	4815      	ldr	r0, [pc, #84]	; (6c <start_laser_tuning+0x6c>)
      16:	f001 fda3 	bl	1b60 <__HAL_GPIO_WritePin_veneer>
	if (laser_mod_value > (LASER_MAX_MOD - LASER_STEP)) {
      1a:	4b15      	ldr	r3, [pc, #84]	; (70 <start_laser_tuning+0x70>)
      1c:	881b      	ldrh	r3, [r3, #0]
      1e:	461a      	mov	r2, r3
      20:	2303      	movs	r3, #3
      22:	4619      	mov	r1, r3
      24:	f640 53ac 	movw	r3, #3500	; 0xdac
      28:	1a5b      	subs	r3, r3, r1
      2a:	429a      	cmp	r2, r3
      2c:	dd0a      	ble.n	44 <start_laser_tuning+0x44>
	    printf("LOSS OF LASER LOCK\r\n");
      2e:	4811      	ldr	r0, [pc, #68]	; (74 <start_laser_tuning+0x74>)
      30:	f001 fdae 	bl	1b90 <__puts_veneer>
	    printf("Modulation value outside bounds: %u\r\n", laser_mod_value);
      34:	4b0e      	ldr	r3, [pc, #56]	; (70 <start_laser_tuning+0x70>)
      36:	881b      	ldrh	r3, [r3, #0]
      38:	4619      	mov	r1, r3
      3a:	480f      	ldr	r0, [pc, #60]	; (78 <start_laser_tuning+0x78>)
      3c:	f001 fd94 	bl	1b68 <__printf_veneer>
		Error_Handler();
      40:	f001 fd7e 	bl	1b40 <__Error_Handler_veneer>
	}
	laser_mod_value += LASER_STEP;
      44:	4b0a      	ldr	r3, [pc, #40]	; (70 <start_laser_tuning+0x70>)
      46:	881b      	ldrh	r3, [r3, #0]
      48:	2203      	movs	r2, #3
      4a:	4413      	add	r3, r2
      4c:	b29a      	uxth	r2, r3
      4e:	4b08      	ldr	r3, [pc, #32]	; (70 <start_laser_tuning+0x70>)
      50:	801a      	strh	r2, [r3, #0]
	HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_2, DAC_ALIGN_12B_R, laser_mod_value); //
      52:	4b07      	ldr	r3, [pc, #28]	; (70 <start_laser_tuning+0x70>)
      54:	881b      	ldrh	r3, [r3, #0]
      56:	2200      	movs	r2, #0
      58:	2110      	movs	r1, #16
      5a:	4808      	ldr	r0, [pc, #32]	; (7c <start_laser_tuning+0x7c>)
      5c:	f001 fd9c 	bl	1b98 <__HAL_DAC_SetValue_veneer>
	reset_adc_samples(); //reset ADC samples including sample count
      60:	f000 fb14 	bl	68c <reset_adc_samples>
	#ifdef LASER_VERBOSE
	printf("Started laser tuning\r\n");
	#endif //LASER_VERBOSE
}
      64:	bf00      	nop
      66:	bd80      	pop	{r7, pc}
      68:	2000024c 	.word	0x2000024c
      6c:	58020400 	.word	0x58020400
      70:	20000000 	.word	0x20000000
      74:	0801be60 	.word	0x0801be60
      78:	0801be74 	.word	0x0801be74
      7c:	200002c0 	.word	0x200002c0

00000080 <start_laser_ramp>:

/**
  * @brief  Starts a laser scan
  * @retval None
  */
void start_laser_ramp(void) {
      80:	b580      	push	{r7, lr}
      82:	af00      	add	r7, sp, #0
	stop_MW_operation(); //releases timers and ensures that sample pulse is generated for ADC
      84:	f001 fa32 	bl	14ec <stop_MW_operation>
	laser_state = LASER_RAMP_PHASE_ONE;
      88:	4b14      	ldr	r3, [pc, #80]	; (dc <start_laser_ramp+0x5c>)
      8a:	2204      	movs	r2, #4
      8c:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(LASER_TUNING_GPIO_Port, LASER_TUNING_Pin, GPIO_PIN_SET); //Laser_tuning output high
      8e:	2201      	movs	r2, #1
      90:	f44f 5180 	mov.w	r1, #4096	; 0x1000
      94:	4812      	ldr	r0, [pc, #72]	; (e0 <start_laser_ramp+0x60>)
      96:	f001 fd63 	bl	1b60 <__HAL_GPIO_WritePin_veneer>
	HAL_GPIO_WritePin(SCOPE_TRIG_OUT_GPIO_Port, SCOPE_TRIG_OUT_Pin, GPIO_PIN_SET); // Sets trigger output high
      9a:	2201      	movs	r2, #1
      9c:	2101      	movs	r1, #1
      9e:	4811      	ldr	r0, [pc, #68]	; (e4 <start_laser_ramp+0x64>)
      a0:	f001 fd5e 	bl	1b60 <__HAL_GPIO_WritePin_veneer>
	adc_averaged_max = 0;
      a4:	4b10      	ldr	r3, [pc, #64]	; (e8 <start_laser_ramp+0x68>)
      a6:	2200      	movs	r2, #0
      a8:	601a      	str	r2, [r3, #0]
	adc_averaged_min = 0xFFFF;
      aa:	4b10      	ldr	r3, [pc, #64]	; (ec <start_laser_ramp+0x6c>)
      ac:	f64f 72ff 	movw	r2, #65535	; 0xffff
      b0:	601a      	str	r2, [r3, #0]
	laser_mod_value = LASER_MIN_MOD;
      b2:	4b0f      	ldr	r3, [pc, #60]	; (f0 <start_laser_ramp+0x70>)
      b4:	220a      	movs	r2, #10
      b6:	801a      	strh	r2, [r3, #0]
	HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_2, DAC_ALIGN_12B_R, laser_mod_value); //
      b8:	4b0d      	ldr	r3, [pc, #52]	; (f0 <start_laser_ramp+0x70>)
      ba:	881b      	ldrh	r3, [r3, #0]
      bc:	2200      	movs	r2, #0
      be:	2110      	movs	r1, #16
      c0:	480c      	ldr	r0, [pc, #48]	; (f4 <start_laser_ramp+0x74>)
      c2:	f001 fd69 	bl	1b98 <__HAL_DAC_SetValue_veneer>
	start_timer(MW_TIMER); //using MW for 1s delay
      c6:	4b0c      	ldr	r3, [pc, #48]	; (f8 <start_laser_ramp+0x78>)
      c8:	681b      	ldr	r3, [r3, #0]
      ca:	4618      	mov	r0, r3
      cc:	f001 fc7e 	bl	19cc <start_timer>
    printf("1s delay to allow LD temperature to equalise.\r\n");
      d0:	480a      	ldr	r0, [pc, #40]	; (fc <start_laser_ramp+0x7c>)
      d2:	f001 fd5d 	bl	1b90 <__puts_veneer>
}
      d6:	bf00      	nop
      d8:	bd80      	pop	{r7, pc}
      da:	bf00      	nop
      dc:	2000024c 	.word	0x2000024c
      e0:	58020400 	.word	0x58020400
      e4:	58021800 	.word	0x58021800
      e8:	20000634 	.word	0x20000634
      ec:	20000638 	.word	0x20000638
      f0:	20000000 	.word	0x20000000
      f4:	200002c0 	.word	0x200002c0
      f8:	2000001c 	.word	0x2000001c
      fc:	0801be9c 	.word	0x0801be9c

00000100 <stop_laser_tuning>:

/**
  * @brief  Stops laser tuning ready to return to POP
  * @retval None
  */
void stop_laser_tuning(void) {
     100:	b580      	push	{r7, lr}
     102:	af00      	add	r7, sp, #0
	laser_state = LASER_ON_FREQ;
     104:	4b08      	ldr	r3, [pc, #32]	; (128 <stop_laser_tuning+0x28>)
     106:	2200      	movs	r2, #0
     108:	701a      	strb	r2, [r3, #0]
	stop_timer(MW_TIMER); //release MW_timer
     10a:	4b08      	ldr	r3, [pc, #32]	; (12c <stop_laser_tuning+0x2c>)
     10c:	681b      	ldr	r3, [r3, #0]
     10e:	4618      	mov	r0, r3
     110:	f001 fc7a 	bl	1a08 <stop_timer>
//	stop_timer(SWEEP_TIMER); //release SWEEP_timer
	HAL_GPIO_WritePin(LASER_TUNING_GPIO_Port, LASER_TUNING_Pin, GPIO_PIN_RESET); // Laser_tuning output low
     114:	2200      	movs	r2, #0
     116:	f44f 5180 	mov.w	r1, #4096	; 0x1000
     11a:	4805      	ldr	r0, [pc, #20]	; (130 <stop_laser_tuning+0x30>)
     11c:	f001 fd20 	bl	1b60 <__HAL_GPIO_WritePin_veneer>
	reset_adc_samples(); //reset ADC samples including sample count
     120:	f000 fab4 	bl	68c <reset_adc_samples>
}
     124:	bf00      	nop
     126:	bd80      	pop	{r7, pc}
     128:	2000024c 	.word	0x2000024c
     12c:	2000001c 	.word	0x2000001c
     130:	58020400 	.word	0x58020400

00000134 <laser_update>:

/**
  * @brief  Checks laser locking status to see if an action is needed.
  * @retval True if an action was taken
  */
const bool laser_update(void) {
     134:	b580      	push	{r7, lr}
     136:	b086      	sub	sp, #24
     138:	af00      	add	r7, sp, #0
	bool action_taken = false;
     13a:	2300      	movs	r3, #0
     13c:	75fb      	strb	r3, [r7, #23]
	double sweep_time_s = 0;
     13e:	f04f 0200 	mov.w	r2, #0
     142:	f04f 0300 	mov.w	r3, #0
     146:	e9c7 2302 	strd	r2, r3, [r7, #8]
	uint8_t local_copy_of_laser_state = laser_state; //hack to make switch statement behave
     14a:	4b93      	ldr	r3, [pc, #588]	; (398 <_Min_Heap_Size+0x198>)
     14c:	781b      	ldrb	r3, [r3, #0]
     14e:	71fb      	strb	r3, [r7, #7]
	switch (local_copy_of_laser_state)
     150:	79fb      	ldrb	r3, [r7, #7]
     152:	2b08      	cmp	r3, #8
     154:	f200 8208 	bhi.w	568 <_Min_Stack_Size+0x168>
     158:	a201      	add	r2, pc, #4	; (adr r2, 160 <laser_update+0x2c>)
     15a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
     15e:	bf00      	nop
     160:	00000581 	.word	0x00000581
     164:	00000185 	.word	0x00000185
     168:	000001b3 	.word	0x000001b3
     16c:	0000021b 	.word	0x0000021b
     170:	0000028f 	.word	0x0000028f
     174:	000002d7 	.word	0x000002d7
     178:	000003e9 	.word	0x000003e9
     17c:	00000499 	.word	0x00000499
     180:	00000535 	.word	0x00000535
	{
		case LASER_ON_FREQ:
			break; //no action to take
		case LASER_TEMP_STABILISING:
			if (check_timer(MW_TIMER) < LASER_STAB_US) return(false); //Still waiting, no action taken
     184:	4b85      	ldr	r3, [pc, #532]	; (39c <_Min_Heap_Size+0x19c>)
     186:	681b      	ldr	r3, [r3, #0]
     188:	4618      	mov	r0, r3
     18a:	f001 fc4f 	bl	1a2c <check_timer>
     18e:	4603      	mov	r3, r0
     190:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
     194:	d201      	bcs.n	19a <laser_update+0x66>
     196:	2300      	movs	r3, #0
     198:	e1fe      	b.n	598 <_Min_Stack_Size+0x198>
			action_taken = true;
     19a:	2301      	movs	r3, #1
     19c:	75fb      	strb	r3, [r7, #23]
			stop_timer(MW_TIMER); //release timer
     19e:	4b7f      	ldr	r3, [pc, #508]	; (39c <_Min_Heap_Size+0x19c>)
     1a0:	681b      	ldr	r3, [r3, #0]
     1a2:	4618      	mov	r0, r3
     1a4:	f001 fc30 	bl	1a08 <stop_timer>
			laser_state = LASER_ON_FREQ;
     1a8:	4b7b      	ldr	r3, [pc, #492]	; (398 <_Min_Heap_Size+0x198>)
     1aa:	2200      	movs	r2, #0
     1ac:	701a      	strb	r2, [r3, #0]
			reset_adc_samples(); //reset ADC samples including sample count
     1ae:	f000 fa6d 	bl	68c <reset_adc_samples>
		case LASER_STEPPED_UP:
			if(adc_average_updated) {
     1b2:	4b7b      	ldr	r3, [pc, #492]	; (3a0 <_Min_Heap_Size+0x1a0>)
     1b4:	781b      	ldrb	r3, [r3, #0]
     1b6:	2b00      	cmp	r3, #0
     1b8:	f000 81e4 	beq.w	584 <_Min_Stack_Size+0x184>
				adc_polled_above = adc_averaged_val;
     1bc:	4b79      	ldr	r3, [pc, #484]	; (3a4 <_Min_Heap_Size+0x1a4>)
     1be:	681b      	ldr	r3, [r3, #0]
     1c0:	4a79      	ldr	r2, [pc, #484]	; (3a8 <_Min_Heap_Size+0x1a8>)
     1c2:	6013      	str	r3, [r2, #0]
				laser_state = LASER_STEPPED_DOWN;
     1c4:	4b74      	ldr	r3, [pc, #464]	; (398 <_Min_Heap_Size+0x198>)
     1c6:	2203      	movs	r2, #3
     1c8:	701a      	strb	r2, [r3, #0]
				if (laser_mod_value < LASER_MIN_MOD + (2 * LASER_STEP)) {
     1ca:	4b78      	ldr	r3, [pc, #480]	; (3ac <_Min_Heap_Size+0x1ac>)
     1cc:	881b      	ldrh	r3, [r3, #0]
     1ce:	461a      	mov	r2, r3
     1d0:	2303      	movs	r3, #3
     1d2:	3305      	adds	r3, #5
     1d4:	005b      	lsls	r3, r3, #1
     1d6:	429a      	cmp	r2, r3
     1d8:	da0a      	bge.n	1f0 <laser_update+0xbc>
				    printf("LOSS OF LASER LOCK\r\n");
     1da:	4875      	ldr	r0, [pc, #468]	; (3b0 <_Min_Heap_Size+0x1b0>)
     1dc:	f001 fcd8 	bl	1b90 <__puts_veneer>
				    printf("Modulation value outside bounds: %u\r\n", laser_mod_value);
     1e0:	4b72      	ldr	r3, [pc, #456]	; (3ac <_Min_Heap_Size+0x1ac>)
     1e2:	881b      	ldrh	r3, [r3, #0]
     1e4:	4619      	mov	r1, r3
     1e6:	4873      	ldr	r0, [pc, #460]	; (3b4 <_Min_Heap_Size+0x1b4>)
     1e8:	f001 fcbe 	bl	1b68 <__printf_veneer>
					Error_Handler();
     1ec:	f001 fca8 	bl	1b40 <__Error_Handler_veneer>
				}
				laser_mod_value = laser_mod_value - (2 * LASER_STEP);
     1f0:	4b6e      	ldr	r3, [pc, #440]	; (3ac <_Min_Heap_Size+0x1ac>)
     1f2:	881a      	ldrh	r2, [r3, #0]
     1f4:	2303      	movs	r3, #3
     1f6:	005b      	lsls	r3, r3, #1
     1f8:	b29b      	uxth	r3, r3
     1fa:	1ad3      	subs	r3, r2, r3
     1fc:	b29a      	uxth	r2, r3
     1fe:	4b6b      	ldr	r3, [pc, #428]	; (3ac <_Min_Heap_Size+0x1ac>)
     200:	801a      	strh	r2, [r3, #0]
				HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_2, DAC_ALIGN_12B_R, laser_mod_value); //
     202:	4b6a      	ldr	r3, [pc, #424]	; (3ac <_Min_Heap_Size+0x1ac>)
     204:	881b      	ldrh	r3, [r3, #0]
     206:	2200      	movs	r2, #0
     208:	2110      	movs	r1, #16
     20a:	486b      	ldr	r0, [pc, #428]	; (3b8 <_Min_Heap_Size+0x1b8>)
     20c:	f001 fcc4 	bl	1b98 <__HAL_DAC_SetValue_veneer>
				reset_adc_samples(); //reset ADC samples including sample count
     210:	f000 fa3c 	bl	68c <reset_adc_samples>
				action_taken = true;
     214:	2301      	movs	r3, #1
     216:	75fb      	strb	r3, [r7, #23]
			}
			break;
     218:	e1b4      	b.n	584 <_Min_Stack_Size+0x184>
		case LASER_STEPPED_DOWN:
			if(adc_average_updated) {
     21a:	4b61      	ldr	r3, [pc, #388]	; (3a0 <_Min_Heap_Size+0x1a0>)
     21c:	781b      	ldrb	r3, [r3, #0]
     21e:	2b00      	cmp	r3, #0
     220:	f000 81b2 	beq.w	588 <_Min_Stack_Size+0x188>
				adc_polled_below = adc_averaged_val;
     224:	4b5f      	ldr	r3, [pc, #380]	; (3a4 <_Min_Heap_Size+0x1a4>)
     226:	681b      	ldr	r3, [r3, #0]
     228:	4a64      	ldr	r2, [pc, #400]	; (3bc <_Min_Heap_Size+0x1bc>)
     22a:	6013      	str	r3, [r2, #0]
				laser_mod_value += LASER_STEP; //return laser modulation value to pre-tuned value
     22c:	4b5f      	ldr	r3, [pc, #380]	; (3ac <_Min_Heap_Size+0x1ac>)
     22e:	881b      	ldrh	r3, [r3, #0]
     230:	2203      	movs	r2, #3
     232:	4413      	add	r3, r2
     234:	b29a      	uxth	r2, r3
     236:	4b5d      	ldr	r3, [pc, #372]	; (3ac <_Min_Heap_Size+0x1ac>)
     238:	801a      	strh	r2, [r3, #0]
				action_taken = true;
     23a:	2301      	movs	r3, #1
     23c:	75fb      	strb	r3, [r7, #23]
				if (adc_polled_below > adc_polled_above) {
     23e:	4b5f      	ldr	r3, [pc, #380]	; (3bc <_Min_Heap_Size+0x1bc>)
     240:	681a      	ldr	r2, [r3, #0]
     242:	4b59      	ldr	r3, [pc, #356]	; (3a8 <_Min_Heap_Size+0x1a8>)
     244:	681b      	ldr	r3, [r3, #0]
     246:	429a      	cmp	r2, r3
     248:	d905      	bls.n	256 <_Min_Heap_Size+0x56>
					laser_mod_value++; //increase current by incrementing laser modulation value
     24a:	4b58      	ldr	r3, [pc, #352]	; (3ac <_Min_Heap_Size+0x1ac>)
     24c:	881b      	ldrh	r3, [r3, #0]
     24e:	3301      	adds	r3, #1
     250:	b29a      	uxth	r2, r3
     252:	4b56      	ldr	r3, [pc, #344]	; (3ac <_Min_Heap_Size+0x1ac>)
     254:	801a      	strh	r2, [r3, #0]
				}
				if (adc_polled_above > adc_polled_below) {
     256:	4b54      	ldr	r3, [pc, #336]	; (3a8 <_Min_Heap_Size+0x1a8>)
     258:	681a      	ldr	r2, [r3, #0]
     25a:	4b58      	ldr	r3, [pc, #352]	; (3bc <_Min_Heap_Size+0x1bc>)
     25c:	681b      	ldr	r3, [r3, #0]
     25e:	429a      	cmp	r2, r3
     260:	d905      	bls.n	26e <_Min_Heap_Size+0x6e>
					laser_mod_value--; //decrease current by decrementing laser modulation value
     262:	4b52      	ldr	r3, [pc, #328]	; (3ac <_Min_Heap_Size+0x1ac>)
     264:	881b      	ldrh	r3, [r3, #0]
     266:	3b01      	subs	r3, #1
     268:	b29a      	uxth	r2, r3
     26a:	4b50      	ldr	r3, [pc, #320]	; (3ac <_Min_Heap_Size+0x1ac>)
     26c:	801a      	strh	r2, [r3, #0]
				}
				HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_2, DAC_ALIGN_12B_R, laser_mod_value);
     26e:	4b4f      	ldr	r3, [pc, #316]	; (3ac <_Min_Heap_Size+0x1ac>)
     270:	881b      	ldrh	r3, [r3, #0]
     272:	2200      	movs	r2, #0
     274:	2110      	movs	r1, #16
     276:	4850      	ldr	r0, [pc, #320]	; (3b8 <_Min_Heap_Size+0x1b8>)
     278:	f001 fc8e 	bl	1b98 <__HAL_DAC_SetValue_veneer>
				/* If adding a short delay for LD to stabilise after polling */
				laser_state = LASER_TEMP_STABILISING;
     27c:	4b46      	ldr	r3, [pc, #280]	; (398 <_Min_Heap_Size+0x198>)
     27e:	2201      	movs	r2, #1
     280:	701a      	strb	r2, [r3, #0]
				start_timer(MW_TIMER); //using MW for short delay
     282:	4b46      	ldr	r3, [pc, #280]	; (39c <_Min_Heap_Size+0x19c>)
     284:	681b      	ldr	r3, [r3, #0]
     286:	4618      	mov	r0, r3
     288:	f001 fba0 	bl	19cc <start_timer>
				/* Substituted with this if no stabilising time is required after polling
				 * laser_state = LASER_ON_FREQ;
				 * reset_adc_samples(); //reset ADC samples including sample count
				 */
			}
			break;
     28c:	e17c      	b.n	588 <_Min_Stack_Size+0x188>
		case LASER_RAMP_PHASE_ONE: //waiting for the LD temperature to stabilise
			if (check_timer(MW_TIMER) < 1000000) return(false); //Still waiting, no action taken
     28e:	4b43      	ldr	r3, [pc, #268]	; (39c <_Min_Heap_Size+0x19c>)
     290:	681b      	ldr	r3, [r3, #0]
     292:	4618      	mov	r0, r3
     294:	f001 fbca 	bl	1a2c <check_timer>
     298:	4603      	mov	r3, r0
     29a:	4a49      	ldr	r2, [pc, #292]	; (3c0 <_Min_Heap_Size+0x1c0>)
     29c:	4293      	cmp	r3, r2
     29e:	d801      	bhi.n	2a4 <_Min_Heap_Size+0xa4>
     2a0:	2300      	movs	r3, #0
     2a2:	e179      	b.n	598 <_Min_Stack_Size+0x198>
			action_taken = true;
     2a4:	2301      	movs	r3, #1
     2a6:	75fb      	strb	r3, [r7, #23]
			stop_timer(MW_TIMER); //release MW_timer
     2a8:	4b3c      	ldr	r3, [pc, #240]	; (39c <_Min_Heap_Size+0x19c>)
     2aa:	681b      	ldr	r3, [r3, #0]
     2ac:	4618      	mov	r0, r3
     2ae:	f001 fbab 	bl	1a08 <stop_timer>
			laser_state = LASER_RAMP_PHASE_TWO;
     2b2:	4b39      	ldr	r3, [pc, #228]	; (398 <_Min_Heap_Size+0x198>)
     2b4:	2205      	movs	r2, #5
     2b6:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_WritePin(SCOPE_TRIG_OUT_GPIO_Port, SCOPE_TRIG_OUT_Pin, GPIO_PIN_RESET); // Sets trigger output low
     2b8:	2200      	movs	r2, #0
     2ba:	2101      	movs	r1, #1
     2bc:	4841      	ldr	r0, [pc, #260]	; (3c4 <_Min_Heap_Size+0x1c4>)
     2be:	f001 fc4f 	bl	1b60 <__HAL_GPIO_WritePin_veneer>
			reset_adc_samples(); //reset ADC samples including sample count
     2c2:	f000 f9e3 	bl	68c <reset_adc_samples>
			start_timer(SWEEP_TIMER); //
     2c6:	4b40      	ldr	r3, [pc, #256]	; (3c8 <_Min_Heap_Size+0x1c8>)
     2c8:	681b      	ldr	r3, [r3, #0]
     2ca:	4618      	mov	r0, r3
     2cc:	f001 fb7e 	bl	19cc <start_timer>
		    printf("Starting laser frequency scan.\r\n");
     2d0:	483e      	ldr	r0, [pc, #248]	; (3cc <_Min_Heap_Size+0x1cc>)
     2d2:	f001 fc5d 	bl	1b90 <__puts_veneer>
		    //break statement not required here
		case LASER_RAMP_PHASE_TWO: //finding F=2 dip
			if(adc_average_updated) {
     2d6:	4b32      	ldr	r3, [pc, #200]	; (3a0 <_Min_Heap_Size+0x1a0>)
     2d8:	781b      	ldrb	r3, [r3, #0]
     2da:	2b00      	cmp	r3, #0
     2dc:	f000 8156 	beq.w	58c <_Min_Stack_Size+0x18c>
				if (adc_averaged_val < adc_averaged_min) {//if new minimum detected
     2e0:	4b30      	ldr	r3, [pc, #192]	; (3a4 <_Min_Heap_Size+0x1a4>)
     2e2:	681a      	ldr	r2, [r3, #0]
     2e4:	4b3a      	ldr	r3, [pc, #232]	; (3d0 <_Min_Heap_Size+0x1d0>)
     2e6:	681b      	ldr	r3, [r3, #0]
     2e8:	429a      	cmp	r2, r3
     2ea:	d207      	bcs.n	2fc <_Min_Heap_Size+0xfc>
					adc_averaged_min = adc_averaged_val; //record new mininum
     2ec:	4b2d      	ldr	r3, [pc, #180]	; (3a4 <_Min_Heap_Size+0x1a4>)
     2ee:	681b      	ldr	r3, [r3, #0]
     2f0:	4a37      	ldr	r2, [pc, #220]	; (3d0 <_Min_Heap_Size+0x1d0>)
     2f2:	6013      	str	r3, [r2, #0]
					saved_mod_value = laser_mod_value; //record the associated modulation value
     2f4:	4b2d      	ldr	r3, [pc, #180]	; (3ac <_Min_Heap_Size+0x1ac>)
     2f6:	881a      	ldrh	r2, [r3, #0]
     2f8:	4b36      	ldr	r3, [pc, #216]	; (3d4 <_Min_Heap_Size+0x1d4>)
     2fa:	801a      	strh	r2, [r3, #0]
				}
				/* Detect when we've passed F=2 dip
				 * If the latest reading is significantly higher than the minimum
				 * then record F=2 and look for F=3
				 */
				if ((adc_averaged_val - adc_averaged_min) >= DIP_THRESHOLD ) {//if the latest reading is significantly above the minimum
     2fc:	4b29      	ldr	r3, [pc, #164]	; (3a4 <_Min_Heap_Size+0x1a4>)
     2fe:	681a      	ldr	r2, [r3, #0]
     300:	4b33      	ldr	r3, [pc, #204]	; (3d0 <_Min_Heap_Size+0x1d0>)
     302:	681b      	ldr	r3, [r3, #0]
     304:	1ad3      	subs	r3, r2, r3
     306:	2bf7      	cmp	r3, #247	; 0xf7
     308:	d90a      	bls.n	320 <_Min_Heap_Size+0x120>
					F2_mod_value = saved_mod_value; //record the modulation value for the F=2 dip
     30a:	4b32      	ldr	r3, [pc, #200]	; (3d4 <_Min_Heap_Size+0x1d4>)
     30c:	881a      	ldrh	r2, [r3, #0]
     30e:	4b32      	ldr	r3, [pc, #200]	; (3d8 <_Min_Heap_Size+0x1d8>)
     310:	801a      	strh	r2, [r3, #0]
					adc_averaged_min = 0xFFFF; //reset the saved minimum
     312:	4b2f      	ldr	r3, [pc, #188]	; (3d0 <_Min_Heap_Size+0x1d0>)
     314:	f64f 72ff 	movw	r2, #65535	; 0xffff
     318:	601a      	str	r2, [r3, #0]
					laser_state = LASER_RAMP_PHASE_THREE;
     31a:	4b1f      	ldr	r3, [pc, #124]	; (398 <_Min_Heap_Size+0x198>)
     31c:	2206      	movs	r2, #6
     31e:	701a      	strb	r2, [r3, #0]
				}
				laser_mod_value += LASER_STEP; //next laser step
     320:	4b22      	ldr	r3, [pc, #136]	; (3ac <_Min_Heap_Size+0x1ac>)
     322:	881b      	ldrh	r3, [r3, #0]
     324:	2203      	movs	r2, #3
     326:	4413      	add	r3, r2
     328:	b29a      	uxth	r2, r3
     32a:	4b20      	ldr	r3, [pc, #128]	; (3ac <_Min_Heap_Size+0x1ac>)
     32c:	801a      	strh	r2, [r3, #0]
				if (laser_mod_value >= LASER_MAX_MOD) {//if no longer in range
     32e:	4b1f      	ldr	r3, [pc, #124]	; (3ac <_Min_Heap_Size+0x1ac>)
     330:	881b      	ldrh	r3, [r3, #0]
     332:	f640 52ab 	movw	r2, #3499	; 0xdab
     336:	4293      	cmp	r3, r2
     338:	d91c      	bls.n	374 <_Min_Heap_Size+0x174>
				    printf("Have completed absorption scan without detecting any dips.\r\n");
     33a:	4828      	ldr	r0, [pc, #160]	; (3dc <_Min_Heap_Size+0x1dc>)
     33c:	f001 fc28 	bl	1b90 <__puts_veneer>
				    printf("DIP_THRESHOLD: %u\r\n", DIP_THRESHOLD);
     340:	21f8      	movs	r1, #248	; 0xf8
     342:	4827      	ldr	r0, [pc, #156]	; (3e0 <_Min_Heap_Size+0x1e0>)
     344:	f001 fc10 	bl	1b68 <__printf_veneer>
					sweep_time_s = (double) (stop_timer(SWEEP_TIMER)) / 1000000;
     348:	4b1f      	ldr	r3, [pc, #124]	; (3c8 <_Min_Heap_Size+0x1c8>)
     34a:	681b      	ldr	r3, [r3, #0]
     34c:	4618      	mov	r0, r3
     34e:	f001 fb5b 	bl	1a08 <stop_timer>
     352:	ee07 0a90 	vmov	s15, r0
     356:	eeb8 6b67 	vcvt.f64.u32	d6, s15
     35a:	ed9f 5b0d 	vldr	d5, [pc, #52]	; 390 <_Min_Heap_Size+0x190>
     35e:	ee86 7b05 	vdiv.f64	d7, d6, d5
     362:	ed87 7b02 	vstr	d7, [r7, #8]
					printf("Sweep complete in %.3g s.\r\n", sweep_time_s);
     366:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
     36a:	481e      	ldr	r0, [pc, #120]	; (3e4 <_Min_Heap_Size+0x1e4>)
     36c:	f001 fbfc 	bl	1b68 <__printf_veneer>
					Error_Handler();
     370:	f001 fbe6 	bl	1b40 <__Error_Handler_veneer>
				}
				HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_2, DAC_ALIGN_12B_R, laser_mod_value); //set DAC output pin
     374:	4b0d      	ldr	r3, [pc, #52]	; (3ac <_Min_Heap_Size+0x1ac>)
     376:	881b      	ldrh	r3, [r3, #0]
     378:	2200      	movs	r2, #0
     37a:	2110      	movs	r1, #16
     37c:	480e      	ldr	r0, [pc, #56]	; (3b8 <_Min_Heap_Size+0x1b8>)
     37e:	f001 fc0b 	bl	1b98 <__HAL_DAC_SetValue_veneer>
				//reset_adc_samples(); //reset ADC samples including sample count
				adc_average_updated = false; //clears new reading flag
     382:	4b07      	ldr	r3, [pc, #28]	; (3a0 <_Min_Heap_Size+0x1a0>)
     384:	2200      	movs	r2, #0
     386:	701a      	strb	r2, [r3, #0]
				action_taken = true;
     388:	2301      	movs	r3, #1
     38a:	75fb      	strb	r3, [r7, #23]
			}
			break;
     38c:	e0fe      	b.n	58c <_Min_Stack_Size+0x18c>
     38e:	bf00      	nop
     390:	00000000 	.word	0x00000000
     394:	412e8480 	.word	0x412e8480
     398:	2000024c 	.word	0x2000024c
     39c:	2000001c 	.word	0x2000001c
     3a0:	20000630 	.word	0x20000630
     3a4:	20000604 	.word	0x20000604
     3a8:	20000254 	.word	0x20000254
     3ac:	20000000 	.word	0x20000000
     3b0:	0801be60 	.word	0x0801be60
     3b4:	0801be74 	.word	0x0801be74
     3b8:	200002c0 	.word	0x200002c0
     3bc:	20000258 	.word	0x20000258
     3c0:	000f423f 	.word	0x000f423f
     3c4:	58021800 	.word	0x58021800
     3c8:	20000020 	.word	0x20000020
     3cc:	0801becc 	.word	0x0801becc
     3d0:	20000638 	.word	0x20000638
     3d4:	2000024e 	.word	0x2000024e
     3d8:	20000250 	.word	0x20000250
     3dc:	0801beec 	.word	0x0801beec
     3e0:	0801bf28 	.word	0x0801bf28
     3e4:	0801bf3c 	.word	0x0801bf3c
		case LASER_RAMP_PHASE_THREE: //finding F=3 dip
			if(adc_average_updated) {
     3e8:	4b6f      	ldr	r3, [pc, #444]	; (5a8 <_Min_Stack_Size+0x1a8>)
     3ea:	781b      	ldrb	r3, [r3, #0]
     3ec:	2b00      	cmp	r3, #0
     3ee:	f000 80cf 	beq.w	590 <_Min_Stack_Size+0x190>
				if (adc_averaged_val < adc_averaged_min) {//if new minimum detected
     3f2:	4b6e      	ldr	r3, [pc, #440]	; (5ac <_Min_Stack_Size+0x1ac>)
     3f4:	681a      	ldr	r2, [r3, #0]
     3f6:	4b6e      	ldr	r3, [pc, #440]	; (5b0 <_Min_Stack_Size+0x1b0>)
     3f8:	681b      	ldr	r3, [r3, #0]
     3fa:	429a      	cmp	r2, r3
     3fc:	d207      	bcs.n	40e <_Min_Stack_Size+0xe>
					adc_averaged_min = adc_averaged_val; //record new mininum
     3fe:	4b6b      	ldr	r3, [pc, #428]	; (5ac <_Min_Stack_Size+0x1ac>)
     400:	681b      	ldr	r3, [r3, #0]
     402:	4a6b      	ldr	r2, [pc, #428]	; (5b0 <_Min_Stack_Size+0x1b0>)
     404:	6013      	str	r3, [r2, #0]
					saved_mod_value = laser_mod_value; //record the associated modulation value
     406:	4b6b      	ldr	r3, [pc, #428]	; (5b4 <_Min_Stack_Size+0x1b4>)
     408:	881a      	ldrh	r2, [r3, #0]
     40a:	4b6b      	ldr	r3, [pc, #428]	; (5b8 <_Min_Stack_Size+0x1b8>)
     40c:	801a      	strh	r2, [r3, #0]
				}
				/* Detect when we've passed F=3 dip
				 * If the latest reading is significantly higher than the minimum
				 * then record F=3
				 */
				if ((adc_averaged_val - adc_averaged_min) >= DIP_THRESHOLD) {//if the latest reading is significant above the minimum
     40e:	4b67      	ldr	r3, [pc, #412]	; (5ac <_Min_Stack_Size+0x1ac>)
     410:	681a      	ldr	r2, [r3, #0]
     412:	4b67      	ldr	r3, [pc, #412]	; (5b0 <_Min_Stack_Size+0x1b0>)
     414:	681b      	ldr	r3, [r3, #0]
     416:	1ad3      	subs	r3, r2, r3
     418:	2bf7      	cmp	r3, #247	; 0xf7
     41a:	d906      	bls.n	42a <_Min_Stack_Size+0x2a>
					F3_mod_value = saved_mod_value; //record the modulation value for the F=3 dip
     41c:	4b66      	ldr	r3, [pc, #408]	; (5b8 <_Min_Stack_Size+0x1b8>)
     41e:	881a      	ldrh	r2, [r3, #0]
     420:	4b66      	ldr	r3, [pc, #408]	; (5bc <_Min_Stack_Size+0x1bc>)
     422:	801a      	strh	r2, [r3, #0]
					laser_state = LASER_RAMP_PHASE_FOUR;
     424:	4b66      	ldr	r3, [pc, #408]	; (5c0 <_Min_Stack_Size+0x1c0>)
     426:	2207      	movs	r2, #7
     428:	701a      	strb	r2, [r3, #0]
				}
				laser_mod_value += LASER_STEP; //next laser step
     42a:	4b62      	ldr	r3, [pc, #392]	; (5b4 <_Min_Stack_Size+0x1b4>)
     42c:	881b      	ldrh	r3, [r3, #0]
     42e:	2203      	movs	r2, #3
     430:	4413      	add	r3, r2
     432:	b29a      	uxth	r2, r3
     434:	4b5f      	ldr	r3, [pc, #380]	; (5b4 <_Min_Stack_Size+0x1b4>)
     436:	801a      	strh	r2, [r3, #0]
				if (laser_mod_value >= LASER_MAX_MOD) {//if no longer in range
     438:	4b5e      	ldr	r3, [pc, #376]	; (5b4 <_Min_Stack_Size+0x1b4>)
     43a:	881b      	ldrh	r3, [r3, #0]
     43c:	f640 52ab 	movw	r2, #3499	; 0xdab
     440:	4293      	cmp	r3, r2
     442:	d91c      	bls.n	47e <_Min_Stack_Size+0x7e>
					printf("Have completed absorption scan without detecting F=3 DIP.\r\n");
     444:	485f      	ldr	r0, [pc, #380]	; (5c4 <_Min_Stack_Size+0x1c4>)
     446:	f001 fba3 	bl	1b90 <__puts_veneer>
					printf("DIP_THRESHOLD: %u\r\n", DIP_THRESHOLD);
     44a:	21f8      	movs	r1, #248	; 0xf8
     44c:	485e      	ldr	r0, [pc, #376]	; (5c8 <_Min_Stack_Size+0x1c8>)
     44e:	f001 fb8b 	bl	1b68 <__printf_veneer>
					sweep_time_s = (double) (stop_timer(SWEEP_TIMER)) / 1000000;
     452:	4b5e      	ldr	r3, [pc, #376]	; (5cc <_Min_Stack_Size+0x1cc>)
     454:	681b      	ldr	r3, [r3, #0]
     456:	4618      	mov	r0, r3
     458:	f001 fad6 	bl	1a08 <stop_timer>
     45c:	ee07 0a90 	vmov	s15, r0
     460:	eeb8 6b67 	vcvt.f64.u32	d6, s15
     464:	ed9f 5b4e 	vldr	d5, [pc, #312]	; 5a0 <_Min_Stack_Size+0x1a0>
     468:	ee86 7b05 	vdiv.f64	d7, d6, d5
     46c:	ed87 7b02 	vstr	d7, [r7, #8]
					printf("Sweep complete in %.3g s.\r\n", sweep_time_s);
     470:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
     474:	4856      	ldr	r0, [pc, #344]	; (5d0 <_Min_Stack_Size+0x1d0>)
     476:	f001 fb77 	bl	1b68 <__printf_veneer>
					Error_Handler();
     47a:	f001 fb61 	bl	1b40 <__Error_Handler_veneer>
				}
				HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_2, DAC_ALIGN_12B_R, laser_mod_value); //set DAC output pin
     47e:	4b4d      	ldr	r3, [pc, #308]	; (5b4 <_Min_Stack_Size+0x1b4>)
     480:	881b      	ldrh	r3, [r3, #0]
     482:	2200      	movs	r2, #0
     484:	2110      	movs	r1, #16
     486:	4853      	ldr	r0, [pc, #332]	; (5d4 <_Min_Stack_Size+0x1d4>)
     488:	f001 fb86 	bl	1b98 <__HAL_DAC_SetValue_veneer>
				//reset_adc_samples(); //reset ADC samples including sample count
				adc_average_updated = false; //clears new reading flag
     48c:	4b46      	ldr	r3, [pc, #280]	; (5a8 <_Min_Stack_Size+0x1a8>)
     48e:	2200      	movs	r2, #0
     490:	701a      	strb	r2, [r3, #0]
				action_taken = true;
     492:	2301      	movs	r3, #1
     494:	75fb      	strb	r3, [r7, #23]
			}
			break;
     496:	e07b      	b.n	590 <_Min_Stack_Size+0x190>
		case LASER_RAMP_PHASE_FOUR: //finishing the current sweep
			if(adc_average_updated) {
     498:	4b43      	ldr	r3, [pc, #268]	; (5a8 <_Min_Stack_Size+0x1a8>)
     49a:	781b      	ldrb	r3, [r3, #0]
     49c:	2b00      	cmp	r3, #0
     49e:	d079      	beq.n	594 <_Min_Stack_Size+0x194>
				laser_mod_value += LASER_STEP; //next laser step
     4a0:	4b44      	ldr	r3, [pc, #272]	; (5b4 <_Min_Stack_Size+0x1b4>)
     4a2:	881b      	ldrh	r3, [r3, #0]
     4a4:	2203      	movs	r2, #3
     4a6:	4413      	add	r3, r2
     4a8:	b29a      	uxth	r2, r3
     4aa:	4b42      	ldr	r3, [pc, #264]	; (5b4 <_Min_Stack_Size+0x1b4>)
     4ac:	801a      	strh	r2, [r3, #0]
				if (laser_mod_value >= LASER_MAX_MOD) {//if no longer in range
     4ae:	4b41      	ldr	r3, [pc, #260]	; (5b4 <_Min_Stack_Size+0x1b4>)
     4b0:	881b      	ldrh	r3, [r3, #0]
     4b2:	f640 52ab 	movw	r2, #3499	; 0xdab
     4b6:	4293      	cmp	r3, r2
     4b8:	d92f      	bls.n	51a <_Min_Stack_Size+0x11a>
					sweep_time_s = (double) (stop_timer(SWEEP_TIMER)) / 1000000;
     4ba:	4b44      	ldr	r3, [pc, #272]	; (5cc <_Min_Stack_Size+0x1cc>)
     4bc:	681b      	ldr	r3, [r3, #0]
     4be:	4618      	mov	r0, r3
     4c0:	f001 faa2 	bl	1a08 <stop_timer>
     4c4:	ee07 0a90 	vmov	s15, r0
     4c8:	eeb8 6b67 	vcvt.f64.u32	d6, s15
     4cc:	ed9f 5b34 	vldr	d5, [pc, #208]	; 5a0 <_Min_Stack_Size+0x1a0>
     4d0:	ee86 7b05 	vdiv.f64	d7, d6, d5
     4d4:	ed87 7b02 	vstr	d7, [r7, #8]
					printf("Absorption spectroscopy complete in %.3g s.\r\n", sweep_time_s);
     4d8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
     4dc:	483e      	ldr	r0, [pc, #248]	; (5d8 <_Min_Stack_Size+0x1d8>)
     4de:	f001 fb43 	bl	1b68 <__printf_veneer>
					printf("F=2 dip detected at step %u.\r\n", F2_mod_value);
     4e2:	4b3e      	ldr	r3, [pc, #248]	; (5dc <_Min_Stack_Size+0x1dc>)
     4e4:	881b      	ldrh	r3, [r3, #0]
     4e6:	4619      	mov	r1, r3
     4e8:	483d      	ldr	r0, [pc, #244]	; (5e0 <_Min_Stack_Size+0x1e0>)
     4ea:	f001 fb3d 	bl	1b68 <__printf_veneer>
					printf("F=3 dip detected at step %u.\r\n", F3_mod_value);
     4ee:	4b33      	ldr	r3, [pc, #204]	; (5bc <_Min_Stack_Size+0x1bc>)
     4f0:	881b      	ldrh	r3, [r3, #0]
     4f2:	4619      	mov	r1, r3
     4f4:	483b      	ldr	r0, [pc, #236]	; (5e4 <_Min_Stack_Size+0x1e4>)
     4f6:	f001 fb37 	bl	1b68 <__printf_veneer>
					HAL_GPIO_WritePin(SCOPE_TRIG_OUT_GPIO_Port, SCOPE_TRIG_OUT_Pin, GPIO_PIN_SET); // Resets trigger output
     4fa:	2201      	movs	r2, #1
     4fc:	2101      	movs	r1, #1
     4fe:	483a      	ldr	r0, [pc, #232]	; (5e8 <_Min_Stack_Size+0x1e8>)
     500:	f001 fb2e 	bl	1b60 <__HAL_GPIO_WritePin_veneer>
					if (LOCK_TO_DIP == 2) {
						laser_mod_value = F2_mod_value;
     504:	4b35      	ldr	r3, [pc, #212]	; (5dc <_Min_Stack_Size+0x1dc>)
     506:	881a      	ldrh	r2, [r3, #0]
     508:	4b2a      	ldr	r3, [pc, #168]	; (5b4 <_Min_Stack_Size+0x1b4>)
     50a:	801a      	strh	r2, [r3, #0]
						laser_mod_value = F3_mod_value;
					} else {
						printf("Illegal DIP specified. LOCK_TO_DIP = %u.\r\n", LOCK_TO_DIP);
						Error_Handler();
					}
					printf("F=%u dip selected.\r\n", LOCK_TO_DIP);
     50c:	2102      	movs	r1, #2
     50e:	4837      	ldr	r0, [pc, #220]	; (5ec <_Min_Stack_Size+0x1ec>)
     510:	f001 fb2a 	bl	1b68 <__printf_veneer>
					laser_state = LASER_TEMP_STABILISING;
     514:	4b2a      	ldr	r3, [pc, #168]	; (5c0 <_Min_Stack_Size+0x1c0>)
     516:	2201      	movs	r2, #1
     518:	701a      	strb	r2, [r3, #0]
				}
				HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_2, DAC_ALIGN_12B_R, laser_mod_value); //set DAC output pin
     51a:	4b26      	ldr	r3, [pc, #152]	; (5b4 <_Min_Stack_Size+0x1b4>)
     51c:	881b      	ldrh	r3, [r3, #0]
     51e:	2200      	movs	r2, #0
     520:	2110      	movs	r1, #16
     522:	482c      	ldr	r0, [pc, #176]	; (5d4 <_Min_Stack_Size+0x1d4>)
     524:	f001 fb38 	bl	1b98 <__HAL_DAC_SetValue_veneer>
				//reset_adc_samples(); //reset ADC samples including sample count
				adc_average_updated = false; //clears new reading flag
     528:	4b1f      	ldr	r3, [pc, #124]	; (5a8 <_Min_Stack_Size+0x1a8>)
     52a:	2200      	movs	r2, #0
     52c:	701a      	strb	r2, [r3, #0]
				action_taken = true;
     52e:	2301      	movs	r3, #1
     530:	75fb      	strb	r3, [r7, #23]
			}
			break;
     532:	e02f      	b.n	594 <_Min_Stack_Size+0x194>
		case LASER_RAMP_PHASE_FIVE: //waiting for the LD temperature to stabilise
			if (check_timer(MW_TIMER) < 1000000) return(false); //Still waiting, no action taken
     534:	4b2e      	ldr	r3, [pc, #184]	; (5f0 <_Min_Stack_Size+0x1f0>)
     536:	681b      	ldr	r3, [r3, #0]
     538:	4618      	mov	r0, r3
     53a:	f001 fa77 	bl	1a2c <check_timer>
     53e:	4603      	mov	r3, r0
     540:	4a2c      	ldr	r2, [pc, #176]	; (5f4 <_Min_Stack_Size+0x1f4>)
     542:	4293      	cmp	r3, r2
     544:	d801      	bhi.n	54a <_Min_Stack_Size+0x14a>
     546:	2300      	movs	r3, #0
     548:	e026      	b.n	598 <_Min_Stack_Size+0x198>
			action_taken = true;
     54a:	2301      	movs	r3, #1
     54c:	75fb      	strb	r3, [r7, #23]
			stop_timer(MW_TIMER); //release MW_timer
     54e:	4b28      	ldr	r3, [pc, #160]	; (5f0 <_Min_Stack_Size+0x1f0>)
     550:	681b      	ldr	r3, [r3, #0]
     552:	4618      	mov	r0, r3
     554:	f001 fa58 	bl	1a08 <stop_timer>
			laser_state = LASER_ON_FREQ;
     558:	4b19      	ldr	r3, [pc, #100]	; (5c0 <_Min_Stack_Size+0x1c0>)
     55a:	2200      	movs	r2, #0
     55c:	701a      	strb	r2, [r3, #0]
			reset_adc_samples(); //reset ADC samples including sample count
     55e:	f000 f895 	bl	68c <reset_adc_samples>
		    printf("LD temperature stabilised.\r\n");
     562:	4825      	ldr	r0, [pc, #148]	; (5f8 <_Min_Stack_Size+0x1f8>)
     564:	f001 fb14 	bl	1b90 <__puts_veneer>

		default: // Other state
	       printf("laser_update has detected illegal state: %u \r\n", laser_state);
     568:	4b15      	ldr	r3, [pc, #84]	; (5c0 <_Min_Stack_Size+0x1c0>)
     56a:	781b      	ldrb	r3, [r3, #0]
     56c:	4619      	mov	r1, r3
     56e:	4823      	ldr	r0, [pc, #140]	; (5fc <_Min_Stack_Size+0x1fc>)
     570:	f001 fafa 	bl	1b68 <__printf_veneer>
	       printf("local version: %u \r\n", local_copy_of_laser_state);
     574:	79fb      	ldrb	r3, [r7, #7]
     576:	4619      	mov	r1, r3
     578:	4821      	ldr	r0, [pc, #132]	; (600 <_Min_Stack_Size+0x200>)
     57a:	f001 faf5 	bl	1b68 <__printf_veneer>
     57e:	e00a      	b.n	596 <_Min_Stack_Size+0x196>
			break; //no action to take
     580:	bf00      	nop
     582:	e008      	b.n	596 <_Min_Stack_Size+0x196>
			break;
     584:	bf00      	nop
     586:	e006      	b.n	596 <_Min_Stack_Size+0x196>
			break;
     588:	bf00      	nop
     58a:	e004      	b.n	596 <_Min_Stack_Size+0x196>
			break;
     58c:	bf00      	nop
     58e:	e002      	b.n	596 <_Min_Stack_Size+0x196>
			break;
     590:	bf00      	nop
     592:	e000      	b.n	596 <_Min_Stack_Size+0x196>
			break;
     594:	bf00      	nop
	}
    return(action_taken);
     596:	7dfb      	ldrb	r3, [r7, #23]
}
     598:	4618      	mov	r0, r3
     59a:	3718      	adds	r7, #24
     59c:	46bd      	mov	sp, r7
     59e:	bd80      	pop	{r7, pc}
     5a0:	00000000 	.word	0x00000000
     5a4:	412e8480 	.word	0x412e8480
     5a8:	20000630 	.word	0x20000630
     5ac:	20000604 	.word	0x20000604
     5b0:	20000638 	.word	0x20000638
     5b4:	20000000 	.word	0x20000000
     5b8:	2000024e 	.word	0x2000024e
     5bc:	20000252 	.word	0x20000252
     5c0:	2000024c 	.word	0x2000024c
     5c4:	0801bf58 	.word	0x0801bf58
     5c8:	0801bf28 	.word	0x0801bf28
     5cc:	20000020 	.word	0x20000020
     5d0:	0801bf3c 	.word	0x0801bf3c
     5d4:	200002c0 	.word	0x200002c0
     5d8:	0801bf94 	.word	0x0801bf94
     5dc:	20000250 	.word	0x20000250
     5e0:	0801bfc4 	.word	0x0801bfc4
     5e4:	0801bfe4 	.word	0x0801bfe4
     5e8:	58021800 	.word	0x58021800
     5ec:	0801c004 	.word	0x0801c004
     5f0:	2000001c 	.word	0x2000001c
     5f4:	000f423f 	.word	0x000f423f
     5f8:	0801c01c 	.word	0x0801c01c
     5fc:	0801c038 	.word	0x0801c038
     600:	0801c068 	.word	0x0801c068

00000604 <measure_POP_cycle_time>:
  * @brief  Measure POP cycle time
  * @param  None
  * @retval None
  */
void measure_POP_cycle_time (void)
{
     604:	b580      	push	{r7, lr}
     606:	af00      	add	r7, sp, #0
	/* Measure the period of a POP cycle *AFTER* the ADC has been initialised
	 * Should be performed before calculating sweep settings
	 */
	stop_laser_tuning(); //ensure MW_timer not being used and laser tuning pin high
     608:	f7ff fd7a 	bl	100 <stop_laser_tuning>
	start_timer(SWEEP_TIMER); //Using sweep timer for 3s timeout
     60c:	4b13      	ldr	r3, [pc, #76]	; (65c <measure_POP_cycle_time+0x58>)
     60e:	681b      	ldr	r3, [r3, #0]
     610:	4618      	mov	r0, r3
     612:	f001 f9db 	bl	19cc <start_timer>
	start_POP_calibration(true);
     616:	2001      	movs	r0, #1
     618:	f000 feda 	bl	13d0 <start_POP_calibration>
	//loop here until period of POP cycle has been measured or 3s has elapsed
	//When correctly connected, POP cycle measurement should take 1.3s
	while (!POP_period_us && (check_timer(SWEEP_TIMER) < 3000000)) {
     61c:	e001      	b.n	622 <measure_POP_cycle_time+0x1e>
		MW_update();
     61e:	f000 ff7d 	bl	151c <MW_update>
	while (!POP_period_us && (check_timer(SWEEP_TIMER) < 3000000)) {
     622:	4b0f      	ldr	r3, [pc, #60]	; (660 <measure_POP_cycle_time+0x5c>)
     624:	681b      	ldr	r3, [r3, #0]
     626:	2b00      	cmp	r3, #0
     628:	d108      	bne.n	63c <measure_POP_cycle_time+0x38>
     62a:	4b0c      	ldr	r3, [pc, #48]	; (65c <measure_POP_cycle_time+0x58>)
     62c:	681b      	ldr	r3, [r3, #0]
     62e:	4618      	mov	r0, r3
     630:	f001 f9fc 	bl	1a2c <check_timer>
     634:	4603      	mov	r3, r0
     636:	4a0b      	ldr	r2, [pc, #44]	; (664 <measure_POP_cycle_time+0x60>)
     638:	4293      	cmp	r3, r2
     63a:	d9f0      	bls.n	61e <measure_POP_cycle_time+0x1a>
//		printf("POP_period_us %lu, SWEEP_TIMER value %lu \r\n", POP_period_us, check_timer(SWEEP_TIMER));
	}
//	printf("Finished loop - POP_period_us %lu, SWEEP_TIMER value %lu \r\n", POP_period_us, check_timer(SWEEP_TIMER));
	stop_timer(SWEEP_TIMER); //stop SWEEP_TIMER
     63c:	4b07      	ldr	r3, [pc, #28]	; (65c <measure_POP_cycle_time+0x58>)
     63e:	681b      	ldr	r3, [r3, #0]
     640:	4618      	mov	r0, r3
     642:	f001 f9e1 	bl	1a08 <stop_timer>
	if (!POP_period_us) {//if the calibration loop timed out
     646:	4b06      	ldr	r3, [pc, #24]	; (660 <measure_POP_cycle_time+0x5c>)
     648:	681b      	ldr	r3, [r3, #0]
     64a:	2b00      	cmp	r3, #0
     64c:	d102      	bne.n	654 <measure_POP_cycle_time+0x50>
		printf("WARNING - STM32 is not receiving a periodic sample from the FPGA \r\n");
     64e:	4806      	ldr	r0, [pc, #24]	; (668 <measure_POP_cycle_time+0x64>)
     650:	f001 fa9e 	bl	1b90 <__puts_veneer>
	}
	stop_MW_operation(); //release MW_SWEEP timer and ensure MW_INVALID is cleared
     654:	f000 ff4a 	bl	14ec <stop_MW_operation>
}
     658:	bf00      	nop
     65a:	bd80      	pop	{r7, pc}
     65c:	20000020 	.word	0x20000020
     660:	200005fc 	.word	0x200005fc
     664:	002dc6bf 	.word	0x002dc6bf
     668:	0801c080 	.word	0x0801c080

0000066c <system_mode_laser_tuning>:
{
     66c:	b580      	push	{r7, lr}
     66e:	af00      	add	r7, sp, #0
	stop_MW_operation(); //resets MW timers, sets MW_invalid pin low (to ensure ADC sample pulse) and sets correct MW state
     670:	f000 ff3c 	bl	14ec <stop_MW_operation>
	HAL_GPIO_WritePin(LASER_TUNING_GPIO_Port, LASER_TUNING_Pin, GPIO_PIN_SET); // Laser_tuning output high
     674:	2201      	movs	r2, #1
     676:	f44f 5180 	mov.w	r1, #4096	; 0x1000
     67a:	4803      	ldr	r0, [pc, #12]	; (688 <system_mode_laser_tuning+0x1c>)
     67c:	f001 fa70 	bl	1b60 <__HAL_GPIO_WritePin_veneer>
	reset_adc_samples(); //reset ADC samples including sample count
     680:	f000 f804 	bl	68c <reset_adc_samples>
}
     684:	bf00      	nop
     686:	bd80      	pop	{r7, pc}
     688:	58020400 	.word	0x58020400

0000068c <reset_adc_samples>:
{
     68c:	b480      	push	{r7}
     68e:	af00      	add	r7, sp, #0
	adc_average_updated = false; //signals to other functions that adc_averaged_val shouldn't be read
     690:	4b08      	ldr	r3, [pc, #32]	; (6b4 <reset_adc_samples+0x28>)
     692:	2200      	movs	r2, #0
     694:	701a      	strb	r2, [r3, #0]
	adc_sample_no = 0; //reset cyclical sample counter
     696:	4b08      	ldr	r3, [pc, #32]	; (6b8 <reset_adc_samples+0x2c>)
     698:	2200      	movs	r2, #0
     69a:	801a      	strh	r2, [r3, #0]
	adc_readings_total = 0; //zeroes the total counter
     69c:	4b07      	ldr	r3, [pc, #28]	; (6bc <reset_adc_samples+0x30>)
     69e:	2200      	movs	r2, #0
     6a0:	601a      	str	r2, [r3, #0]
	sample_count=0; //reset the main ADC sample counter
     6a2:	4b07      	ldr	r3, [pc, #28]	; (6c0 <reset_adc_samples+0x34>)
     6a4:	2200      	movs	r2, #0
     6a6:	801a      	strh	r2, [r3, #0]
}
     6a8:	bf00      	nop
     6aa:	46bd      	mov	sp, r7
     6ac:	f85d 7b04 	ldr.w	r7, [sp], #4
     6b0:	4770      	bx	lr
     6b2:	bf00      	nop
     6b4:	20000630 	.word	0x20000630
     6b8:	20000628 	.word	0x20000628
     6bc:	2000062c 	.word	0x2000062c
     6c0:	200005fa 	.word	0x200005fa
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
  {
    /* Set mode single-ended or differential input of the selected ADC channel */
    LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfigInjected->InjectedChannel, sConfigInjected->InjectedSingleDiff);
     6c4:	00000000 	.word	0x00000000

000006c8 <synth_writereg>:
     6c8:	b580      	push	{r7, lr}
     6ca:	b08a      	sub	sp, #40	; 0x28
     6cc:	af00      	add	r7, sp, #0

    /* Configuration of differential mode */
    /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
    if (sConfigInjected->InjectedSingleDiff == ADC_DIFFERENTIAL_ENDED)
     6ce:	60f8      	str	r0, [r7, #12]
     6d0:	60b9      	str	r1, [r7, #8]
     6d2:	607a      	str	r2, [r7, #4]
     6d4:	70fb      	strb	r3, [r7, #3]
     6d6:	2300      	movs	r3, #0
     6d8:	627b      	str	r3, [r7, #36]	; 0x24
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfigInjected->InjectedChannel) + 1UL) & 0x1FUL)), sConfigInjected->InjectedSamplingTime);
     6da:	68fb      	ldr	r3, [r7, #12]
     6dc:	021a      	lsls	r2, r3, #8
     6de:	68bb      	ldr	r3, [r7, #8]
     6e0:	00db      	lsls	r3, r3, #3
     6e2:	4313      	orrs	r3, r2
     6e4:	687a      	ldr	r2, [r7, #4]
     6e6:	4313      	orrs	r3, r2
     6e8:	61fb      	str	r3, [r7, #28]
     6ea:	2200      	movs	r2, #0
     6ec:	f44f 7180 	mov.w	r1, #256	; 0x100
     6f0:	4830      	ldr	r0, [pc, #192]	; (7b4 <synth_writereg+0xec>)
     6f2:	f001 fa35 	bl	1b60 <__HAL_GPIO_WritePin_veneer>
     6f6:	2200      	movs	r2, #0
     6f8:	f44f 6100 	mov.w	r1, #2048	; 0x800
     6fc:	482d      	ldr	r0, [pc, #180]	; (7b4 <synth_writereg+0xec>)
     6fe:	f001 fa2f 	bl	1b60 <__HAL_GPIO_WritePin_veneer>
     702:	2300      	movs	r3, #0
     704:	623b      	str	r3, [r7, #32]
     706:	e036      	b.n	776 <synth_writereg+0xae>
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
     708:	2220      	movs	r2, #32
     70a:	6a3b      	ldr	r3, [r7, #32]
     70c:	1ad3      	subs	r3, r2, r3
     70e:	3b01      	subs	r3, #1
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
     710:	617b      	str	r3, [r7, #20]
     712:	2201      	movs	r2, #1
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
     714:	697b      	ldr	r3, [r7, #20]
     716:	fa02 f303 	lsl.w	r3, r2, r3
  {
    return 32U;
     71a:	461a      	mov	r2, r3
     71c:	69fb      	ldr	r3, [r7, #28]
  }
  return __builtin_clz(value);
     71e:	4013      	ands	r3, r2
     720:	2b00      	cmp	r3, #0
     722:	bf14      	ite	ne
     724:	2301      	movne	r3, #1
     726:	2300      	moveq	r3, #0
     728:	b2db      	uxtb	r3, r3
     72a:	461a      	mov	r2, r3
     72c:	f44f 7100 	mov.w	r1, #512	; 0x200
     730:	4820      	ldr	r0, [pc, #128]	; (7b4 <synth_writereg+0xec>)
     732:	f001 fa15 	bl	1b60 <__HAL_GPIO_WritePin_veneer>
     736:	2201      	movs	r2, #1
     738:	f44f 7180 	mov.w	r1, #256	; 0x100
     73c:	481d      	ldr	r0, [pc, #116]	; (7b4 <synth_writereg+0xec>)
     73e:	f001 fa0f 	bl	1b60 <__HAL_GPIO_WritePin_veneer>
     742:	2200      	movs	r2, #0
     744:	f44f 7180 	mov.w	r1, #256	; 0x100
     748:	481a      	ldr	r0, [pc, #104]	; (7b4 <synth_writereg+0xec>)
     74a:	f001 fa09 	bl	1b60 <__HAL_GPIO_WritePin_veneer>
     74e:	f44f 6180 	mov.w	r1, #1024	; 0x400
     752:	4818      	ldr	r0, [pc, #96]	; (7b4 <synth_writereg+0xec>)
     754:	f001 f9f8 	bl	1b48 <__HAL_GPIO_ReadPin_veneer>
     758:	4603      	mov	r3, r0
     75a:	4619      	mov	r1, r3
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
     75c:	2220      	movs	r2, #32
     75e:	6a3b      	ldr	r3, [r7, #32]
     760:	1ad3      	subs	r3, r2, r3
     762:	3b01      	subs	r3, #1
  return result;
     764:	fa01 f303 	lsl.w	r3, r1, r3
  if (value == 0U)
     768:	461a      	mov	r2, r3
     76a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
     76c:	4313      	orrs	r3, r2
    return 32U;
     76e:	627b      	str	r3, [r7, #36]	; 0x24
     770:	6a3b      	ldr	r3, [r7, #32]
  return __builtin_clz(value);
     772:	3301      	adds	r3, #1
     774:	623b      	str	r3, [r7, #32]
     776:	2220      	movs	r2, #32
     778:	6a3b      	ldr	r3, [r7, #32]
     77a:	4293      	cmp	r3, r2
     77c:	d3c4      	bcc.n	708 <synth_writereg+0x40>
     77e:	2201      	movs	r2, #1
     780:	f44f 6100 	mov.w	r1, #2048	; 0x800
     784:	480b      	ldr	r0, [pc, #44]	; (7b4 <synth_writereg+0xec>)
     786:	f001 f9eb 	bl	1b60 <__HAL_GPIO_WritePin_veneer>
     78a:	78fb      	ldrb	r3, [r7, #3]
     78c:	2b00      	cmp	r3, #0
     78e:	d00c      	beq.n	7aa <synth_writereg+0xe2>
     790:	68b8      	ldr	r0, [r7, #8]
     792:	f000 f813 	bl	7bc <synth_readreg>
     796:	61b8      	str	r0, [r7, #24]
     798:	69ba      	ldr	r2, [r7, #24]
     79a:	68fb      	ldr	r3, [r7, #12]
     79c:	429a      	cmp	r2, r3
     79e:	d004      	beq.n	7aa <synth_writereg+0xe2>
     7a0:	4805      	ldr	r0, [pc, #20]	; (7b8 <synth_writereg+0xf0>)
     7a2:	f001 f9f5 	bl	1b90 <__puts_veneer>
     7a6:	f001 f9cb 	bl	1b40 <__Error_Handler_veneer>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
     7aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
     7ac:	4618      	mov	r0, r3
     7ae:	3728      	adds	r7, #40	; 0x28
  return result;
     7b0:	46bd      	mov	sp, r7
     7b2:	bd80      	pop	{r7, pc}
  if (value == 0U)
     7b4:	58020800 	.word	0x58020800
     7b8:	0801c354 	.word	0x0801c354

000007bc <synth_readreg>:
    return 32U;
     7bc:	b580      	push	{r7, lr}
  return __builtin_clz(value);
     7be:	b084      	sub	sp, #16
     7c0:	af00      	add	r7, sp, #0
     7c2:	6078      	str	r0, [r7, #4]
     7c4:	2300      	movs	r3, #0
     7c6:	2200      	movs	r2, #0
     7c8:	2100      	movs	r1, #0
     7ca:	6878      	ldr	r0, [r7, #4]
     7cc:	f7ff ff7c 	bl	6c8 <synth_writereg>
     7d0:	2300      	movs	r3, #0
     7d2:	2200      	movs	r2, #0
     7d4:	2100      	movs	r1, #0
     7d6:	6878      	ldr	r0, [r7, #4]
     7d8:	f7ff ff76 	bl	6c8 <synth_writereg>
     7dc:	60f8      	str	r0, [r7, #12]
     7de:	68fb      	ldr	r3, [r7, #12]
     7e0:	0a1b      	lsrs	r3, r3, #8
     7e2:	4618      	mov	r0, r3
     7e4:	3710      	adds	r7, #16
     7e6:	46bd      	mov	sp, r7
     7e8:	bd80      	pop	{r7, pc}

000007ea <set_MW_power>:
     7ea:	b580      	push	{r7, lr}
     7ec:	b084      	sub	sp, #16
     7ee:	af00      	add	r7, sp, #0
     7f0:	4603      	mov	r3, r0
     7f2:	71fb      	strb	r3, [r7, #7]
     7f4:	79fb      	ldrb	r3, [r7, #7]
     7f6:	2b03      	cmp	r3, #3
     7f8:	d904      	bls.n	804 <set_MW_power+0x1a>
     7fa:	4811      	ldr	r0, [pc, #68]	; (840 <set_MW_power+0x56>)
     7fc:	f001 f9c8 	bl	1b90 <__puts_veneer>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
     800:	f001 f99e 	bl	1b40 <__Error_Handler_veneer>
     804:	2016      	movs	r0, #22
  return result;
     806:	f7ff ffd9 	bl	7bc <synth_readreg>
  if (value == 0U)
     80a:	60f8      	str	r0, [r7, #12]
     80c:	68fb      	ldr	r3, [r7, #12]
     80e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    return 32U;
     812:	60fb      	str	r3, [r7, #12]
  return __builtin_clz(value);
     814:	79fb      	ldrb	r3, [r7, #7]
     816:	021b      	lsls	r3, r3, #8
     818:	461a      	mov	r2, r3
     81a:	68fb      	ldr	r3, [r7, #12]
     81c:	4313      	orrs	r3, r2
     81e:	60fb      	str	r3, [r7, #12]
     820:	2301      	movs	r3, #1
     822:	2200      	movs	r2, #0
     824:	2116      	movs	r1, #22
     826:	68f8      	ldr	r0, [r7, #12]
     828:	f7ff ff4e 	bl	6c8 <synth_writereg>
     82c:	79fb      	ldrb	r3, [r7, #7]
     82e:	4619      	mov	r1, r3
     830:	4804      	ldr	r0, [pc, #16]	; (844 <set_MW_power+0x5a>)
     832:	f001 f999 	bl	1b68 <__printf_veneer>
     836:	2300      	movs	r3, #0
     838:	4618      	mov	r0, r3
     83a:	3710      	adds	r7, #16
     83c:	46bd      	mov	sp, r7
     83e:	bd80      	pop	{r7, pc}
     840:	0801c36c 	.word	0x0801c36c
     844:	0801c3a0 	.word	0x0801c3a0

00000848 <init_synthesiser>:
     848:	b580      	push	{r7, lr}
     84a:	b084      	sub	sp, #16
     84c:	af00      	add	r7, sp, #0
     84e:	4603      	mov	r3, r0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
     850:	71fb      	strb	r3, [r7, #7]
     852:	2200      	movs	r2, #0
     854:	2102      	movs	r1, #2
     856:	4856      	ldr	r0, [pc, #344]	; (9b0 <init_synthesiser+0x168>)
  return result;
     858:	f001 f982 	bl	1b60 <__HAL_GPIO_WritePin_veneer>
  if (value == 0U)
     85c:	2201      	movs	r2, #1
     85e:	2101      	movs	r1, #1
     860:	4854      	ldr	r0, [pc, #336]	; (9b4 <init_synthesiser+0x16c>)
    return 32U;
     862:	f001 f97d 	bl	1b60 <__HAL_GPIO_WritePin_veneer>
  return __builtin_clz(value);
     866:	2200      	movs	r2, #0
     868:	f44f 7180 	mov.w	r1, #256	; 0x100
     86c:	4852      	ldr	r0, [pc, #328]	; (9b8 <init_synthesiser+0x170>)
     86e:	f001 f977 	bl	1b60 <__HAL_GPIO_WritePin_veneer>
     872:	2201      	movs	r2, #1
     874:	f44f 6100 	mov.w	r1, #2048	; 0x800
     878:	484f      	ldr	r0, [pc, #316]	; (9b8 <init_synthesiser+0x170>)
     87a:	f001 f971 	bl	1b60 <__HAL_GPIO_WritePin_veneer>
     87e:	2201      	movs	r2, #1
     880:	f44f 5180 	mov.w	r1, #4096	; 0x1000
     884:	484c      	ldr	r0, [pc, #304]	; (9b8 <init_synthesiser+0x170>)
     886:	f001 f96b 	bl	1b60 <__HAL_GPIO_WritePin_veneer>
     88a:	2064      	movs	r0, #100	; 0x64
     88c:	f001 f960 	bl	1b50 <__HAL_Delay_veneer>
     890:	2300      	movs	r3, #0
     892:	2200      	movs	r2, #0
     894:	2100      	movs	r1, #0
     896:	2020      	movs	r0, #32
     898:	f7ff ff16 	bl	6c8 <synth_writereg>
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
     89c:	2301      	movs	r3, #1
     89e:	2200      	movs	r2, #0
     8a0:	2108      	movs	r1, #8
     8a2:	4846      	ldr	r0, [pc, #280]	; (9bc <init_synthesiser+0x174>)
  return result;
     8a4:	f7ff ff10 	bl	6c8 <synth_writereg>
  if (value == 0U)
     8a8:	2000      	movs	r0, #0
     8aa:	f7ff ff87 	bl	7bc <synth_readreg>
    return 32U;
     8ae:	60f8      	str	r0, [r7, #12]
     8b0:	4a43      	ldr	r2, [pc, #268]	; (9c0 <init_synthesiser+0x178>)
  return __builtin_clz(value);
     8b2:	68fb      	ldr	r3, [r7, #12]
     8b4:	4293      	cmp	r3, r2
     8b6:	d00a      	beq.n	8ce <init_synthesiser+0x86>
     8b8:	2200      	movs	r2, #0
     8ba:	f44f 5180 	mov.w	r1, #4096	; 0x1000
     8be:	483e      	ldr	r0, [pc, #248]	; (9b8 <init_synthesiser+0x170>)
     8c0:	f001 f94e 	bl	1b60 <__HAL_GPIO_WritePin_veneer>
     8c4:	483f      	ldr	r0, [pc, #252]	; (9c4 <init_synthesiser+0x17c>)
     8c6:	f001 f963 	bl	1b90 <__puts_veneer>
     8ca:	2301      	movs	r3, #1
     8cc:	e06b      	b.n	9a6 <init_synthesiser+0x15e>
     8ce:	483e      	ldr	r0, [pc, #248]	; (9c8 <init_synthesiser+0x180>)
     8d0:	f001 f95e 	bl	1b90 <__puts_veneer>
     8d4:	2017      	movs	r0, #23
     8d6:	f7ff ff71 	bl	7bc <synth_readreg>
     8da:	60f8      	str	r0, [r7, #12]
     8dc:	68fb      	ldr	r3, [r7, #12]
     8de:	f443 7300 	orr.w	r3, r3, #512	; 0x200
     8e2:	60fb      	str	r3, [r7, #12]
     8e4:	2301      	movs	r3, #1
     8e6:	f083 0301 	eor.w	r3, r3, #1
     8ea:	b2db      	uxtb	r3, r3
     8ec:	01db      	lsls	r3, r3, #7
     8ee:	43db      	mvns	r3, r3
     8f0:	461a      	mov	r2, r3
     8f2:	68fb      	ldr	r3, [r7, #12]
     8f4:	4013      	ands	r3, r2
     8f6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
     8f8:	2301      	movs	r3, #1
     8fa:	2200      	movs	r2, #0
     8fc:	2117      	movs	r1, #23
     8fe:	68f8      	ldr	r0, [r7, #12]
  return result;
     900:	f7ff fee2 	bl	6c8 <synth_writereg>
  if (value == 0U)
     904:	2301      	movs	r3, #1
     906:	2200      	movs	r2, #0
     908:	2102      	movs	r1, #2
    return 32U;
     90a:	2001      	movs	r0, #1
     90c:	f7ff fedc 	bl	6c8 <synth_writereg>
     910:	2007      	movs	r0, #7
     912:	f7ff ff53 	bl	7bc <synth_readreg>
  return __builtin_clz(value);
     916:	60f8      	str	r0, [r7, #12]
     918:	68fb      	ldr	r3, [r7, #12]
     91a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
     91e:	60fb      	str	r3, [r7, #12]
     920:	68fb      	ldr	r3, [r7, #12]
     922:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
     926:	60fb      	str	r3, [r7, #12]
     928:	68fb      	ldr	r3, [r7, #12]
     92a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
     92e:	60fb      	str	r3, [r7, #12]
     930:	2301      	movs	r3, #1
     932:	2200      	movs	r2, #0
     934:	2107      	movs	r1, #7
     936:	68f8      	ldr	r0, [r7, #12]
     938:	f7ff fec6 	bl	6c8 <synth_writereg>
    /* internal measurement paths enable: If internal channel selected,       */
    /* enable dedicated internal buffers and path.                            */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfigInjected->InjectedChannel))
     93c:	200a      	movs	r0, #10
     93e:	f001 f907 	bl	1b50 <__HAL_Delay_veneer>
     942:	79fb      	ldrb	r3, [r7, #7]
     944:	2b03      	cmp	r3, #3
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
     946:	d904      	bls.n	952 <init_synthesiser+0x10a>
     948:	4820      	ldr	r0, [pc, #128]	; (9cc <init_synthesiser+0x184>)
     94a:	f001 f921 	bl	1b90 <__puts_veneer>
     94e:	f001 f8f7 	bl	1b40 <__Error_Handler_veneer>
     952:	2016      	movs	r0, #22
     954:	f7ff ff32 	bl	7bc <synth_readreg>
     958:	60f8      	str	r0, [r7, #12]
     95a:	68fb      	ldr	r3, [r7, #12]
     95c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
     960:	60fb      	str	r3, [r7, #12]
     962:	79fb      	ldrb	r3, [r7, #7]
     964:	021b      	lsls	r3, r3, #8
     966:	461a      	mov	r2, r3
     968:	68fb      	ldr	r3, [r7, #12]
     96a:	4313      	orrs	r3, r2
     96c:	60fb      	str	r3, [r7, #12]
     96e:	2301      	movs	r3, #1
     970:	2200      	movs	r2, #0
     972:	2116      	movs	r1, #22
     974:	68f8      	ldr	r0, [r7, #12]
     976:	f7ff fea7 	bl	6c8 <synth_writereg>
     97a:	4b15      	ldr	r3, [pc, #84]	; (9d0 <init_synthesiser+0x188>)
     97c:	ed93 7b00 	vldr	d7, [r3]
     980:	eeb0 0b47 	vmov.f64	d0, d7
     984:	f000 f83f 	bl	a06 <set_frequency_hz>
     988:	4b11      	ldr	r3, [pc, #68]	; (9d0 <init_synthesiser+0x188>)
     98a:	e9d3 2300 	ldrd	r2, r3, [r3]
     98e:	4811      	ldr	r0, [pc, #68]	; (9d4 <init_synthesiser+0x18c>)
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
     990:	f001 f8ea 	bl	1b68 <__printf_veneer>
     994:	4b10      	ldr	r3, [pc, #64]	; (9d8 <init_synthesiser+0x190>)
     996:	2201      	movs	r2, #1
     998:	701a      	strb	r2, [r3, #0]
     99a:	2200      	movs	r2, #0
     99c:	2102      	movs	r1, #2
     99e:	480f      	ldr	r0, [pc, #60]	; (9dc <init_synthesiser+0x194>)
     9a0:	f001 f8de 	bl	1b60 <__HAL_GPIO_WritePin_veneer>
     9a4:	2300      	movs	r3, #0
     9a6:	4618      	mov	r0, r3
     9a8:	3710      	adds	r7, #16
     9aa:	46bd      	mov	sp, r7
     9ac:	bd80      	pop	{r7, pc}
     9ae:	bf00      	nop
     9b0:	58021000 	.word	0x58021000

        /* If the requested internal measurement path has already been enabled, */
        /* bypass the configuration processing.                                 */
        if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
     9b4:	58021800 	.word	0x58021800
     9b8:	58020800 	.word	0x58020800
     9bc:	0041bfff 	.word	0x0041bfff
     9c0:	00c7701a 	.word	0x00c7701a
     9c4:	0801c3b8 	.word	0x0801c3b8
     9c8:	0801c3d4 	.word	0x0801c3d4
        {
          if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
     9cc:	0801c36c 	.word	0x0801c36c
     9d0:	0801f430 	.word	0x0801f430
          {
            LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
     9d4:	0801c3e8 	.word	0x0801c3e8
     9d8:	20000640 	.word	0x20000640
     9dc:	58020400 	.word	0x58020400

000009e0 <lock_status>:
     9e0:	b580      	push	{r7, lr}
     9e2:	b082      	sub	sp, #8
     9e4:	af00      	add	r7, sp, #0
     9e6:	2012      	movs	r0, #18
     9e8:	f7ff fee8 	bl	7bc <synth_readreg>
     9ec:	4603      	mov	r3, r0
     9ee:	f003 0302 	and.w	r3, r3, #2
     9f2:	2b00      	cmp	r3, #0
     9f4:	bf14      	ite	ne
     9f6:	2301      	movne	r3, #1
     9f8:	2300      	moveq	r3, #0
     9fa:	71fb      	strb	r3, [r7, #7]
     9fc:	79fb      	ldrb	r3, [r7, #7]
            /* Delay for temperature sensor stabilization time */
            /* Wait loop initialization and execution */
            /* Note: Variable divided by 2 to compensate partially              */
            /*       CPU processing cycles, scaling in us split to not          */
            /*       exceed 32 bits register capacity and handle low frequency. */
            wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
     9fe:	4618      	mov	r0, r3
     a00:	3708      	adds	r7, #8
     a02:	46bd      	mov	sp, r7
     a04:	bd80      	pop	{r7, pc}

00000a06 <set_frequency_hz>:
     a06:	b580      	push	{r7, lr}
     a08:	b088      	sub	sp, #32
     a0a:	af00      	add	r7, sp, #0
     a0c:	ed87 0b00 	vstr	d0, [r7]
     a10:	2301      	movs	r3, #1
            while (wait_loop_index != 0UL)
     a12:	61fb      	str	r3, [r7, #28]
            {
              wait_loop_index--;
     a14:	69fb      	ldr	r3, [r7, #28]
     a16:	ee07 3a90 	vmov	s15, r3
            while (wait_loop_index != 0UL)
     a1a:	eeb8 6b67 	vcvt.f64.u32	d6, s15
     a1e:	ed97 7b00 	vldr	d7, [r7]
            }
          }
        }
        else if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
     a22:	ee26 6b07 	vmul.f64	d6, d6, d7
     a26:	ed9f 5b2a 	vldr	d5, [pc, #168]	; ad0 <set_frequency_hz+0xca>
     a2a:	ee86 7b05 	vdiv.f64	d7, d6, d5
     a2e:	ed87 7b04 	vstr	d7, [r7, #16]
     a32:	ed97 7b04 	vldr	d7, [r7, #16]
     a36:	eefc 7bc7 	vcvt.u32.f64	s15, d7
        {
          if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
     a3a:	ee17 3a90 	vmov	r3, s15
     a3e:	60fb      	str	r3, [r7, #12]
     a40:	68fb      	ldr	r3, [r7, #12]
          {
            LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
     a42:	ee07 3a90 	vmov	s15, r3
     a46:	eeb8 7b67 	vcvt.f64.u32	d7, s15
     a4a:	ed97 6b04 	vldr	d6, [r7, #16]
     a4e:	ee36 7b47 	vsub.f64	d7, d6, d7
     a52:	ed9f 6b21 	vldr	d6, [pc, #132]	; ad8 <set_frequency_hz+0xd2>
     a56:	ee27 7b06 	vmul.f64	d7, d7, d6
     a5a:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
     a5e:	ee37 7b06 	vadd.f64	d7, d7, d6
     a62:	eefc 7bc7 	vcvt.u32.f64	s15, d7
     a66:	ee17 3a90 	vmov	r3, s15
     a6a:	60bb      	str	r3, [r7, #8]
          if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
     a6c:	2201      	movs	r2, #1
          }
        }
        else if ((sConfigInjected->InjectedChannel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
     a6e:	2102      	movs	r1, #2
     a70:	481b      	ldr	r0, [pc, #108]	; (ae0 <set_frequency_hz+0xda>)
     a72:	f001 f875 	bl	1b60 <__HAL_GPIO_WritePin_veneer>
     a76:	69fa      	ldr	r2, [r7, #28]
     a78:	68b9      	ldr	r1, [r7, #8]
     a7a:	68f8      	ldr	r0, [r7, #12]
     a7c:	f000 f838 	bl	af0 <set_freq_regs>
     a80:	4b18      	ldr	r3, [pc, #96]	; (ae4 <set_frequency_hz+0xde>)
     a82:	681b      	ldr	r3, [r3, #0]
        {
          if (ADC_VREFINT_INSTANCE(hadc))
     a84:	f241 7270 	movw	r2, #6000	; 0x1770
     a88:	4611      	mov	r1, r2
     a8a:	4618      	mov	r0, r3
     a8c:	f000 ffda 	bl	1a44 <timer_delay>
          {
            LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
     a90:	f7ff ffa6 	bl	9e0 <lock_status>
     a94:	4603      	mov	r3, r0
     a96:	f083 0301 	eor.w	r3, r3, #1
     a9a:	b2db      	uxtb	r3, r3
     a9c:	2b00      	cmp	r3, #0
     a9e:	d011      	beq.n	ac4 <set_frequency_hz+0xbe>
     aa0:	2200      	movs	r2, #0
     aa2:	2102      	movs	r1, #2
     aa4:	4810      	ldr	r0, [pc, #64]	; (ae8 <set_frequency_hz+0xe2>)
     aa6:	f001 f85b 	bl	1b60 <__HAL_GPIO_WritePin_veneer>
     aaa:	f241 7370 	movw	r3, #6000	; 0x1770
     aae:	4619      	mov	r1, r3
     ab0:	480e      	ldr	r0, [pc, #56]	; (aec <set_frequency_hz+0xe6>)
     ab2:	f001 f859 	bl	1b68 <__printf_veneer>
     ab6:	f001 f843 	bl	1b40 <__Error_Handler_veneer>
      /* and other ADC of the common group are enabled, internal              */
      /* measurement paths cannot be enabled.                                 */
      else
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
     aba:	2200      	movs	r2, #0
     abc:	2102      	movs	r1, #2
     abe:	4808      	ldr	r0, [pc, #32]	; (ae0 <set_frequency_hz+0xda>)
     ac0:	f001 f84e 	bl	1b60 <__HAL_GPIO_WritePin_veneer>
     ac4:	bf00      	nop

        tmp_hal_status = HAL_ERROR;
     ac6:	3720      	adds	r7, #32
     ac8:	46bd      	mov	sp, r7
     aca:	bd80      	pop	{r7, pc}
    }

  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
     acc:	f3af 8000 	nop.w
     ad0:	00000000 	.word	0x00000000

  /* Return function status */
  return tmp_hal_status;
     ad4:	4187d784 	.word	0x4187d784
}
     ad8:	00000000 	.word	0x00000000
     adc:	41700000 	.word	0x41700000
     ae0:	58020400 	.word	0x58020400
     ae4:	2000001c 	.word	0x2000001c
     ae8:	58021000 	.word	0x58021000
     aec:	0801c410 	.word	0x0801c410

00000af0 <set_freq_regs>:
     af0:	b580      	push	{r7, lr}
     af2:	b086      	sub	sp, #24
     af4:	af00      	add	r7, sp, #0
     af6:	60f8      	str	r0, [r7, #12]
     af8:	60b9      	str	r1, [r7, #8]
     afa:	607a      	str	r2, [r7, #4]
     afc:	2300      	movs	r3, #0
     afe:	617b      	str	r3, [r7, #20]
     b00:	4b24      	ldr	r3, [pc, #144]	; (b94 <set_freq_regs+0xa4>)
     b02:	681b      	ldr	r3, [r3, #0]
     b04:	f1b3 3fff 	cmp.w	r3, #4294967295

	static uint32_t last_integer = -1, last_fraction = -1, last_vcodiv = -1;

	uint32_t read_data = 0x0;

	if (last_vcodiv == -1 || (last_vcodiv != vco_divider)) {
     b08:	d004      	beq.n	b14 <set_freq_regs+0x24>
     b0a:	4b22      	ldr	r3, [pc, #136]	; (b94 <set_freq_regs+0xa4>)
     b0c:	681b      	ldr	r3, [r3, #0]
     b0e:	687a      	ldr	r2, [r7, #4]
     b10:	429a      	cmp	r2, r3
     b12:	d014      	beq.n	b3e <set_freq_regs+0x4e>
		read_data = synth_readreg(GAIN_DIVIDER_REGISTER); // Get the current value.
     b14:	2016      	movs	r0, #22
     b16:	f7ff fe51 	bl	7bc <synth_readreg>
     b1a:	6178      	str	r0, [r7, #20]
		read_data &= 0xFFFFFFC0; // Zero the first 6 LSBs (VCO division value - mute).
     b1c:	697b      	ldr	r3, [r7, #20]
     b1e:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
     b22:	617b      	str	r3, [r7, #20]
		read_data |= vco_divider; // This will set k which will un-mute the outputs */
     b24:	697a      	ldr	r2, [r7, #20]
     b26:	687b      	ldr	r3, [r7, #4]
     b28:	4313      	orrs	r3, r2
     b2a:	617b      	str	r3, [r7, #20]
		synth_writereg(read_data, GAIN_DIVIDER_REGISTER, 0x0, VERIFY); // Update the VCO divide register.
     b2c:	2301      	movs	r3, #1
     b2e:	2200      	movs	r2, #0
     b30:	2116      	movs	r1, #22
     b32:	6978      	ldr	r0, [r7, #20]
     b34:	f7ff fdc8 	bl	6c8 <synth_writereg>
		last_vcodiv = vco_divider;
     b38:	4a16      	ldr	r2, [pc, #88]	; (b94 <set_freq_regs+0xa4>)
     b3a:	687b      	ldr	r3, [r7, #4]
     b3c:	6013      	str	r3, [r2, #0]
	}

	if (last_integer == -1 || (last_integer != integer)) {
     b3e:	4b16      	ldr	r3, [pc, #88]	; (b98 <set_freq_regs+0xa8>)
     b40:	681b      	ldr	r3, [r3, #0]
     b42:	f1b3 3fff 	cmp.w	r3, #4294967295
     b46:	d004      	beq.n	b52 <set_freq_regs+0x62>
     b48:	4b13      	ldr	r3, [pc, #76]	; (b98 <set_freq_regs+0xa8>)
     b4a:	681b      	ldr	r3, [r3, #0]
     b4c:	68fa      	ldr	r2, [r7, #12]
     b4e:	429a      	cmp	r2, r3
     b50:	d008      	beq.n	b64 <set_freq_regs+0x74>
		synth_writereg(integer, INTEGER_FREQUENCY_REGISTER, 0x0, VERIFY);   // Integer register.
     b52:	2301      	movs	r3, #1
     b54:	2200      	movs	r2, #0
     b56:	2103      	movs	r1, #3
     b58:	68f8      	ldr	r0, [r7, #12]
     b5a:	f7ff fdb5 	bl	6c8 <synth_writereg>
		last_integer = integer;
     b5e:	4a0e      	ldr	r2, [pc, #56]	; (b98 <set_freq_regs+0xa8>)
     b60:	68fb      	ldr	r3, [r7, #12]
     b62:	6013      	str	r3, [r2, #0]
	}

	//writing fractional register last as this triggers auto-calibration
	if (last_fraction == -1 || (last_fraction != fraction)) {
     b64:	4b0d      	ldr	r3, [pc, #52]	; (b9c <set_freq_regs+0xac>)
     b66:	681b      	ldr	r3, [r3, #0]
     b68:	f1b3 3fff 	cmp.w	r3, #4294967295
     b6c:	d004      	beq.n	b78 <set_freq_regs+0x88>
     b6e:	4b0b      	ldr	r3, [pc, #44]	; (b9c <set_freq_regs+0xac>)
     b70:	681b      	ldr	r3, [r3, #0]
     b72:	68ba      	ldr	r2, [r7, #8]
     b74:	429a      	cmp	r2, r3
     b76:	d008      	beq.n	b8a <set_freq_regs+0x9a>
		synth_writereg(fraction, FRACTIONAL_FREQUENCY_REGISTER, 0x0, VERIFY);  // Fractional register.
     b78:	2301      	movs	r3, #1
     b7a:	2200      	movs	r2, #0
     b7c:	2104      	movs	r1, #4
     b7e:	68b8      	ldr	r0, [r7, #8]
     b80:	f7ff fda2 	bl	6c8 <synth_writereg>
		last_fraction = fraction;
     b84:	4a05      	ldr	r2, [pc, #20]	; (b9c <set_freq_regs+0xac>)
     b86:	68bb      	ldr	r3, [r7, #8]
     b88:	6013      	str	r3, [r2, #0]
	}

}
     b8a:	bf00      	nop
     b8c:	3718      	adds	r7, #24
     b8e:	46bd      	mov	sp, r7
     b90:	bd80      	pop	{r7, pc}
     b92:	bf00      	nop
     b94:	20000004 	.word	0x20000004
     b98:	20000008 	.word	0x20000008
     b9c:	2000000c 	.word	0x2000000c

00000ba0 <print_mw_sweep_settings>:
/**
  * @brief  Print out the contents of the mw_sweep_settings structure
  * @param  None
  * @retval None
  */
  static void print_mw_sweep_settings (void) {
     ba0:	b580      	push	{r7, lr}
     ba2:	af00      	add	r7, sp, #0
  	// Check that I've populated everything
    printf("state: %u \r\n", mw_sweep_settings.state);
     ba4:	4b34      	ldr	r3, [pc, #208]	; (c78 <print_mw_sweep_settings+0xd8>)
     ba6:	781b      	ldrb	r3, [r3, #0]
     ba8:	4619      	mov	r1, r3
     baa:	4834      	ldr	r0, [pc, #208]	; (c7c <print_mw_sweep_settings+0xdc>)
     bac:	f000 ffdc 	bl	1b68 <__printf_veneer>
  	printf("k: %u \r\n", mw_sweep_settings.k);
     bb0:	4b31      	ldr	r3, [pc, #196]	; (c78 <print_mw_sweep_settings+0xd8>)
     bb2:	785b      	ldrb	r3, [r3, #1]
     bb4:	4619      	mov	r1, r3
     bb6:	4832      	ldr	r0, [pc, #200]	; (c80 <print_mw_sweep_settings+0xe0>)
     bb8:	f000 ffd6 	bl	1b68 <__printf_veneer>
  	printf("NINT: %lu \r\n", mw_sweep_settings.NINT);
     bbc:	4b2e      	ldr	r3, [pc, #184]	; (c78 <print_mw_sweep_settings+0xd8>)
     bbe:	685b      	ldr	r3, [r3, #4]
     bc0:	4619      	mov	r1, r3
     bc2:	4830      	ldr	r0, [pc, #192]	; (c84 <print_mw_sweep_settings+0xe4>)
     bc4:	f000 ffd0 	bl	1b68 <__printf_veneer>
  	printf("NFRAC_start: %lu \r\n", mw_sweep_settings.NFRAC_start);
     bc8:	4b2b      	ldr	r3, [pc, #172]	; (c78 <print_mw_sweep_settings+0xd8>)
     bca:	689b      	ldr	r3, [r3, #8]
     bcc:	4619      	mov	r1, r3
     bce:	482e      	ldr	r0, [pc, #184]	; (c88 <print_mw_sweep_settings+0xe8>)
     bd0:	f000 ffca 	bl	1b68 <__printf_veneer>
  	printf("num_steps: %lu \r\n", mw_sweep_settings.num_steps);
     bd4:	4b28      	ldr	r3, [pc, #160]	; (c78 <print_mw_sweep_settings+0xd8>)
     bd6:	68db      	ldr	r3, [r3, #12]
     bd8:	4619      	mov	r1, r3
     bda:	482c      	ldr	r0, [pc, #176]	; (c8c <print_mw_sweep_settings+0xec>)
     bdc:	f000 ffc4 	bl	1b68 <__printf_veneer>
  	printf("step_size: %lu \r\n", mw_sweep_settings.step_size);
     be0:	4b25      	ldr	r3, [pc, #148]	; (c78 <print_mw_sweep_settings+0xd8>)
     be2:	691b      	ldr	r3, [r3, #16]
     be4:	4619      	mov	r1, r3
     be6:	482a      	ldr	r0, [pc, #168]	; (c90 <print_mw_sweep_settings+0xf0>)
     be8:	f000 ffbe 	bl	1b68 <__printf_veneer>
  	printf("pop_cycles_per_point: %lu \r\n", mw_sweep_settings.pop_cycles_per_point);
     bec:	4b22      	ldr	r3, [pc, #136]	; (c78 <print_mw_sweep_settings+0xd8>)
     bee:	695b      	ldr	r3, [r3, #20]
     bf0:	4619      	mov	r1, r3
     bf2:	4828      	ldr	r0, [pc, #160]	; (c94 <print_mw_sweep_settings+0xf4>)
     bf4:	f000 ffb8 	bl	1b68 <__printf_veneer>
  	printf("stabilise_time: %lu us\r\n", mw_sweep_settings.stabilise_time);
     bf8:	4b1f      	ldr	r3, [pc, #124]	; (c78 <print_mw_sweep_settings+0xd8>)
     bfa:	699b      	ldr	r3, [r3, #24]
     bfc:	4619      	mov	r1, r3
     bfe:	4826      	ldr	r0, [pc, #152]	; (c98 <print_mw_sweep_settings+0xf8>)
     c00:	f000 ffb2 	bl	1b68 <__printf_veneer>
  	printf("dwell_time: %lu us\r\n", mw_sweep_settings.dwell_time);
     c04:	4b1c      	ldr	r3, [pc, #112]	; (c78 <print_mw_sweep_settings+0xd8>)
     c06:	69db      	ldr	r3, [r3, #28]
     c08:	4619      	mov	r1, r3
     c0a:	4824      	ldr	r0, [pc, #144]	; (c9c <print_mw_sweep_settings+0xfc>)
     c0c:	f000 ffac 	bl	1b68 <__printf_veneer>
  	printf("MW_processing_time: %lu us\r\n", mw_sweep_settings.MW_processing_time);
     c10:	4b19      	ldr	r3, [pc, #100]	; (c78 <print_mw_sweep_settings+0xd8>)
     c12:	6a1b      	ldr	r3, [r3, #32]
     c14:	4619      	mov	r1, r3
     c16:	4822      	ldr	r0, [pc, #136]	; (ca0 <print_mw_sweep_settings+0x100>)
     c18:	f000 ffa6 	bl	1b68 <__printf_veneer>
  	printf("current_point: %lu\r\n", mw_sweep_settings.current_point);
     c1c:	4b16      	ldr	r3, [pc, #88]	; (c78 <print_mw_sweep_settings+0xd8>)
     c1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
     c20:	4619      	mov	r1, r3
     c22:	4820      	ldr	r0, [pc, #128]	; (ca4 <print_mw_sweep_settings+0x104>)
     c24:	f000 ffa0 	bl	1b68 <__printf_veneer>
  	printf("centre_freq: %f Hz\r\n", mw_sweep_settings.centre_freq);
     c28:	4b13      	ldr	r3, [pc, #76]	; (c78 <print_mw_sweep_settings+0xd8>)
     c2a:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
     c2e:	481e      	ldr	r0, [pc, #120]	; (ca8 <print_mw_sweep_settings+0x108>)
     c30:	f000 ff9a 	bl	1b68 <__printf_veneer>
  	printf("span: %f Hz\r\n", mw_sweep_settings.span);
     c34:	4b10      	ldr	r3, [pc, #64]	; (c78 <print_mw_sweep_settings+0xd8>)
     c36:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
     c3a:	481c      	ldr	r0, [pc, #112]	; (cac <print_mw_sweep_settings+0x10c>)
     c3c:	f000 ff94 	bl	1b68 <__printf_veneer>
  	printf("sweep_period: %f s\r\n", mw_sweep_settings.sweep_period);
     c40:	4b0d      	ldr	r3, [pc, #52]	; (c78 <print_mw_sweep_settings+0xd8>)
     c42:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
     c46:	481a      	ldr	r0, [pc, #104]	; (cb0 <print_mw_sweep_settings+0x110>)
     c48:	f000 ff8e 	bl	1b68 <__printf_veneer>
    printf("sweep_type: %s \r\n", mw_sweep_settings.sweep_type ? "FIXED_TIME" : "FIXED_STEPS");
     c4c:	4b0a      	ldr	r3, [pc, #40]	; (c78 <print_mw_sweep_settings+0xd8>)
     c4e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
     c52:	2b00      	cmp	r3, #0
     c54:	d001      	beq.n	c5a <print_mw_sweep_settings+0xba>
     c56:	4b17      	ldr	r3, [pc, #92]	; (cb4 <print_mw_sweep_settings+0x114>)
     c58:	e000      	b.n	c5c <print_mw_sweep_settings+0xbc>
     c5a:	4b17      	ldr	r3, [pc, #92]	; (cb8 <print_mw_sweep_settings+0x118>)
     c5c:	4619      	mov	r1, r3
     c5e:	4817      	ldr	r0, [pc, #92]	; (cbc <print_mw_sweep_settings+0x11c>)
     c60:	f000 ff82 	bl	1b68 <__printf_veneer>
    printf("sweep_mode: %d\r\n", mw_sweep_settings.sweep_mode);
     c64:	4b04      	ldr	r3, [pc, #16]	; (c78 <print_mw_sweep_settings+0xd8>)
     c66:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
     c6a:	4619      	mov	r1, r3
     c6c:	4814      	ldr	r0, [pc, #80]	; (cc0 <print_mw_sweep_settings+0x120>)
     c6e:	f000 ff7b 	bl	1b68 <__printf_veneer>
}
     c72:	bf00      	nop
     c74:	bd80      	pop	{r7, pc}
     c76:	bf00      	nop
     c78:	20000640 	.word	0x20000640
     c7c:	0801c454 	.word	0x0801c454
     c80:	0801c464 	.word	0x0801c464
     c84:	0801c470 	.word	0x0801c470
     c88:	0801c480 	.word	0x0801c480
     c8c:	0801c494 	.word	0x0801c494
     c90:	0801c4a8 	.word	0x0801c4a8
     c94:	0801c4bc 	.word	0x0801c4bc
     c98:	0801c4dc 	.word	0x0801c4dc
     c9c:	0801c4f8 	.word	0x0801c4f8
     ca0:	0801c510 	.word	0x0801c510
     ca4:	0801c530 	.word	0x0801c530
     ca8:	0801c548 	.word	0x0801c548
     cac:	0801c560 	.word	0x0801c560
     cb0:	0801c570 	.word	0x0801c570
     cb4:	0801c588 	.word	0x0801c588
     cb8:	0801c594 	.word	0x0801c594
     cbc:	0801c5a0 	.word	0x0801c5a0
     cc0:	0801c5b4 	.word	0x0801c5b4

00000cc4 <calc_defined_step_MW_sweep>:
  * @param  POP cycles per point
  * @param  Number of points
  * @param	POP_period in us
  * @retval Success/failure or early termination
  */
bool calc_defined_step_MW_sweep(const double centre_freq, const double span, const uint32_t pop_cycles_per_point, const uint32_t num_points_req) {
     cc4:	b580      	push	{r7, lr}
     cc6:	b094      	sub	sp, #80	; 0x50
     cc8:	af02      	add	r7, sp, #8
     cca:	ed87 0b04 	vstr	d0, [r7, #16]
     cce:	ed87 1b02 	vstr	d1, [r7, #8]
     cd2:	6078      	str	r0, [r7, #4]
     cd4:	6039      	str	r1, [r7, #0]
	printf("MW sweep will have %.10g GHz centre frequency with %.5g Hz span\r\n", centre_freq/1000000000, span);
     cd6:	ed97 7b04 	vldr	d7, [r7, #16]
     cda:	ed9f 6b8d 	vldr	d6, [pc, #564]	; f10 <calc_defined_step_MW_sweep+0x24c>
     cde:	ee87 5b06 	vdiv.f64	d5, d7, d6
     ce2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
     ce6:	e9cd 2300 	strd	r2, r3, [sp]
     cea:	ec53 2b15 	vmov	r2, r3, d5
     cee:	4892      	ldr	r0, [pc, #584]	; (f38 <calc_defined_step_MW_sweep+0x274>)
     cf0:	f000 ff3a 	bl	1b68 <__printf_veneer>
	printf("and %ld POP cycles per point\r\n", pop_cycles_per_point);
     cf4:	6879      	ldr	r1, [r7, #4]
     cf6:	4891      	ldr	r0, [pc, #580]	; (f3c <calc_defined_step_MW_sweep+0x278>)
     cf8:	f000 ff36 	bl	1b68 <__printf_veneer>
	mw_sweep_settings.sweep_type = FIXED_STEPS;
     cfc:	4b90      	ldr	r3, [pc, #576]	; (f40 <calc_defined_step_MW_sweep+0x27c>)
     cfe:	2200      	movs	r2, #0
     d00:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
	mw_sweep_settings.pop_cycles_per_point = pop_cycles_per_point;
     d04:	4a8e      	ldr	r2, [pc, #568]	; (f40 <calc_defined_step_MW_sweep+0x27c>)
     d06:	687b      	ldr	r3, [r7, #4]
     d08:	6153      	str	r3, [r2, #20]
	mw_sweep_settings.centre_freq = centre_freq;
     d0a:	498d      	ldr	r1, [pc, #564]	; (f40 <calc_defined_step_MW_sweep+0x27c>)
     d0c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
     d10:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
	mw_sweep_settings.span = span;
     d14:	498a      	ldr	r1, [pc, #552]	; (f40 <calc_defined_step_MW_sweep+0x27c>)
     d16:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
     d1a:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30

	/* Calculate start frequency */
	double start_freq = centre_freq - 0.5* span;
     d1e:	ed97 7b02 	vldr	d7, [r7, #8]
     d22:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
     d26:	ee27 7b06 	vmul.f64	d7, d7, d6
     d2a:	ed97 6b04 	vldr	d6, [r7, #16]
     d2e:	ee36 7b47 	vsub.f64	d7, d6, d7
     d32:	ed87 7b10 	vstr	d7, [r7, #64]	; 0x40
	mw_sweep_settings.k = calculate_k(start_freq);
     d36:	ed97 0b10 	vldr	d0, [r7, #64]	; 0x40
     d3a:	f000 fb1f 	bl	137c <calculate_k>
     d3e:	4603      	mov	r3, r0
     d40:	b2da      	uxtb	r2, r3
     d42:	4b7f      	ldr	r3, [pc, #508]	; (f40 <calc_defined_step_MW_sweep+0x27c>)
     d44:	705a      	strb	r2, [r3, #1]

	/* Extrapolate step size requested versus achievable  */
	const double step_size_Hz = span / (num_points_req - 1);
     d46:	683b      	ldr	r3, [r7, #0]
     d48:	3b01      	subs	r3, #1
     d4a:	ee07 3a90 	vmov	s15, r3
     d4e:	eeb8 6b67 	vcvt.f64.u32	d6, s15
     d52:	ed97 5b02 	vldr	d5, [r7, #8]
     d56:	ee85 7b06 	vdiv.f64	d7, d5, d6
     d5a:	ed87 7b0e 	vstr	d7, [r7, #56]	; 0x38
	printf("Requested %ld steps, therefore step size of %.3g Hz\r\n", num_points_req, step_size_Hz);
     d5e:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
     d62:	6839      	ldr	r1, [r7, #0]
     d64:	4877      	ldr	r0, [pc, #476]	; (f44 <calc_defined_step_MW_sweep+0x280>)
     d66:	f000 feff 	bl	1b68 <__printf_veneer>
	const double unit_step_size_Hz = REF_FREQ / (double) (mw_sweep_settings.k * (1 << 24)); //minimum step size possible
     d6a:	ed9f 5b6b 	vldr	d5, [pc, #428]	; f18 <calc_defined_step_MW_sweep+0x254>
     d6e:	4b74      	ldr	r3, [pc, #464]	; (f40 <calc_defined_step_MW_sweep+0x27c>)
     d70:	785b      	ldrb	r3, [r3, #1]
     d72:	061b      	lsls	r3, r3, #24
     d74:	ee07 3a90 	vmov	s15, r3
     d78:	eeb8 6be7 	vcvt.f64.s32	d6, s15
     d7c:	ee85 7b06 	vdiv.f64	d7, d5, d6
     d80:	ed87 7b0c 	vstr	d7, [r7, #48]	; 0x30
	//printf("Unit step size: %.3g Hz\r\n", unit_step_size_Hz);
	mw_sweep_settings.step_size = (step_size_Hz / unit_step_size_Hz + 0.5);
     d84:	ed97 5b0e 	vldr	d5, [r7, #56]	; 0x38
     d88:	ed97 6b0c 	vldr	d6, [r7, #48]	; 0x30
     d8c:	ee85 7b06 	vdiv.f64	d7, d5, d6
     d90:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
     d94:	ee37 7b06 	vadd.f64	d7, d7, d6
     d98:	eefc 7bc7 	vcvt.u32.f64	s15, d7
     d9c:	ee17 2a90 	vmov	r2, s15
     da0:	4b67      	ldr	r3, [pc, #412]	; (f40 <calc_defined_step_MW_sweep+0x27c>)
     da2:	611a      	str	r2, [r3, #16]
	if (!mw_sweep_settings.step_size) { //step_size must be a positive non-zero integer
     da4:	4b66      	ldr	r3, [pc, #408]	; (f40 <calc_defined_step_MW_sweep+0x27c>)
     da6:	691b      	ldr	r3, [r3, #16]
     da8:	2b00      	cmp	r3, #0
     daa:	d104      	bne.n	db6 <calc_defined_step_MW_sweep+0xf2>
		mw_sweep_settings.step_size++;
     dac:	4b64      	ldr	r3, [pc, #400]	; (f40 <calc_defined_step_MW_sweep+0x27c>)
     dae:	691b      	ldr	r3, [r3, #16]
     db0:	3301      	adds	r3, #1
     db2:	4a63      	ldr	r2, [pc, #396]	; (f40 <calc_defined_step_MW_sweep+0x27c>)
     db4:	6113      	str	r3, [r2, #16]
	}
	const double achieved_step_size = (double) (mw_sweep_settings.step_size * unit_step_size_Hz);
     db6:	4b62      	ldr	r3, [pc, #392]	; (f40 <calc_defined_step_MW_sweep+0x27c>)
     db8:	691b      	ldr	r3, [r3, #16]
     dba:	ee07 3a90 	vmov	s15, r3
     dbe:	eeb8 7b67 	vcvt.f64.u32	d7, s15
     dc2:	ed97 6b0c 	vldr	d6, [r7, #48]	; 0x30
     dc6:	ee26 7b07 	vmul.f64	d7, d6, d7
     dca:	ed87 7b0a 	vstr	d7, [r7, #40]	; 0x28
	printf("Step size achieved: %.3g Hz\r\n", achieved_step_size);
     dce:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
     dd2:	485d      	ldr	r0, [pc, #372]	; (f48 <calc_defined_step_MW_sweep+0x284>)
     dd4:	f000 fec8 	bl	1b68 <__printf_veneer>
	mw_sweep_settings.num_steps = span / achieved_step_size;
     dd8:	ed97 5b02 	vldr	d5, [r7, #8]
     ddc:	ed97 6b0a 	vldr	d6, [r7, #40]	; 0x28
     de0:	ee85 7b06 	vdiv.f64	d7, d5, d6
     de4:	eefc 7bc7 	vcvt.u32.f64	s15, d7
     de8:	ee17 2a90 	vmov	r2, s15
     dec:	4b54      	ldr	r3, [pc, #336]	; (f40 <calc_defined_step_MW_sweep+0x27c>)
     dee:	60da      	str	r2, [r3, #12]

	/* Can avoid spurs if frequency requested can be encoded exactly  */
	start_freq = ((long)(start_freq/unit_step_size_Hz)) * unit_step_size_Hz;
     df0:	ed97 5b10 	vldr	d5, [r7, #64]	; 0x40
     df4:	ed97 6b0c 	vldr	d6, [r7, #48]	; 0x30
     df8:	ee85 7b06 	vdiv.f64	d7, d5, d6
     dfc:	eefd 7bc7 	vcvt.s32.f64	s15, d7
     e00:	eeb8 7be7 	vcvt.f64.s32	d7, s15
     e04:	ed97 6b0c 	vldr	d6, [r7, #48]	; 0x30
     e08:	ee26 7b07 	vmul.f64	d7, d6, d7
     e0c:	ed87 7b10 	vstr	d7, [r7, #64]	; 0x40

	/* Calculate the N division ratio, extracting the fractional and integer parts */
	const double N = ((start_freq * mw_sweep_settings.k) / REF_FREQ);
     e10:	4b4b      	ldr	r3, [pc, #300]	; (f40 <calc_defined_step_MW_sweep+0x27c>)
     e12:	785b      	ldrb	r3, [r3, #1]
     e14:	ee07 3a90 	vmov	s15, r3
     e18:	eeb8 6be7 	vcvt.f64.s32	d6, s15
     e1c:	ed97 7b10 	vldr	d7, [r7, #64]	; 0x40
     e20:	ee26 6b07 	vmul.f64	d6, d6, d7
     e24:	ed9f 5b3c 	vldr	d5, [pc, #240]	; f18 <calc_defined_step_MW_sweep+0x254>
     e28:	ee86 7b05 	vdiv.f64	d7, d6, d5
     e2c:	ed87 7b08 	vstr	d7, [r7, #32]
	mw_sweep_settings.NINT = N;
     e30:	ed97 7b08 	vldr	d7, [r7, #32]
     e34:	eefc 7bc7 	vcvt.u32.f64	s15, d7
     e38:	ee17 2a90 	vmov	r2, s15
     e3c:	4b40      	ldr	r3, [pc, #256]	; (f40 <calc_defined_step_MW_sweep+0x27c>)
     e3e:	605a      	str	r2, [r3, #4]
	mw_sweep_settings.NFRAC_start = ((N - mw_sweep_settings.NINT) * (1 << 24)) + 0.5;
     e40:	4b3f      	ldr	r3, [pc, #252]	; (f40 <calc_defined_step_MW_sweep+0x27c>)
     e42:	685b      	ldr	r3, [r3, #4]
     e44:	ee07 3a90 	vmov	s15, r3
     e48:	eeb8 7b67 	vcvt.f64.u32	d7, s15
     e4c:	ed97 6b08 	vldr	d6, [r7, #32]
     e50:	ee36 7b47 	vsub.f64	d7, d6, d7
     e54:	ed9f 6b32 	vldr	d6, [pc, #200]	; f20 <calc_defined_step_MW_sweep+0x25c>
     e58:	ee27 7b06 	vmul.f64	d7, d7, d6
     e5c:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
     e60:	ee37 7b06 	vadd.f64	d7, d7, d6
     e64:	eefc 7bc7 	vcvt.u32.f64	s15, d7
     e68:	ee17 2a90 	vmov	r2, s15
     e6c:	4b34      	ldr	r3, [pc, #208]	; (f40 <calc_defined_step_MW_sweep+0x27c>)
     e6e:	609a      	str	r2, [r3, #8]

	/* Calculate dwell time at each MW frequency */
	mw_sweep_settings.stabilise_time = MW_STABILISE_TIME_US; //Global MW stabilisation time
     e70:	f241 7270 	movw	r2, #6000	; 0x1770
     e74:	4b32      	ldr	r3, [pc, #200]	; (f40 <calc_defined_step_MW_sweep+0x27c>)
     e76:	619a      	str	r2, [r3, #24]
	mw_sweep_settings.dwell_time = pop_cycles_per_point * POP_period_us + TIMING_MARGIN_US;
     e78:	4b34      	ldr	r3, [pc, #208]	; (f4c <calc_defined_step_MW_sweep+0x288>)
     e7a:	681b      	ldr	r3, [r3, #0]
     e7c:	687a      	ldr	r2, [r7, #4]
     e7e:	fb02 f303 	mul.w	r3, r2, r3
     e82:	2264      	movs	r2, #100	; 0x64
     e84:	4413      	add	r3, r2
     e86:	4a2e      	ldr	r2, [pc, #184]	; (f40 <calc_defined_step_MW_sweep+0x27c>)
     e88:	61d3      	str	r3, [r2, #28]

	/* Calculate the period of a sweep */
	const double calc_sweep_time = (double)(MW_STABILISE_TIME_US + MW_PROCESSING_TIME_US + mw_sweep_settings.dwell_time) * (double)(mw_sweep_settings.num_steps+1)/1000000;
     e8a:	f241 7270 	movw	r2, #6000	; 0x1770
     e8e:	2301      	movs	r3, #1
     e90:	441a      	add	r2, r3
     e92:	4b2b      	ldr	r3, [pc, #172]	; (f40 <calc_defined_step_MW_sweep+0x27c>)
     e94:	69db      	ldr	r3, [r3, #28]
     e96:	4413      	add	r3, r2
     e98:	ee07 3a90 	vmov	s15, r3
     e9c:	eeb8 6b67 	vcvt.f64.u32	d6, s15
     ea0:	4b27      	ldr	r3, [pc, #156]	; (f40 <calc_defined_step_MW_sweep+0x27c>)
     ea2:	68db      	ldr	r3, [r3, #12]
     ea4:	3301      	adds	r3, #1
     ea6:	ee07 3a90 	vmov	s15, r3
     eaa:	eeb8 7b67 	vcvt.f64.u32	d7, s15
     eae:	ee26 6b07 	vmul.f64	d6, d6, d7
     eb2:	ed9f 5b1d 	vldr	d5, [pc, #116]	; f28 <calc_defined_step_MW_sweep+0x264>
     eb6:	ee86 7b05 	vdiv.f64	d7, d6, d5
     eba:	ed87 7b06 	vstr	d7, [r7, #24]
	printf("Sweep period: %.3g s\r\n", calc_sweep_time);
     ebe:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
     ec2:	4823      	ldr	r0, [pc, #140]	; (f50 <calc_defined_step_MW_sweep+0x28c>)
     ec4:	f000 fe50 	bl	1b68 <__printf_veneer>
	printf("%ld points, %.3g ms each\r\n", mw_sweep_settings.num_steps, 1000 * calc_sweep_time / (mw_sweep_settings.num_steps + 1));
     ec8:	4b1d      	ldr	r3, [pc, #116]	; (f40 <calc_defined_step_MW_sweep+0x27c>)
     eca:	68d9      	ldr	r1, [r3, #12]
     ecc:	ed97 7b06 	vldr	d7, [r7, #24]
     ed0:	ed9f 6b17 	vldr	d6, [pc, #92]	; f30 <calc_defined_step_MW_sweep+0x26c>
     ed4:	ee27 6b06 	vmul.f64	d6, d7, d6
     ed8:	4b19      	ldr	r3, [pc, #100]	; (f40 <calc_defined_step_MW_sweep+0x27c>)
     eda:	68db      	ldr	r3, [r3, #12]
     edc:	3301      	adds	r3, #1
     ede:	ee07 3a90 	vmov	s15, r3
     ee2:	eeb8 7b67 	vcvt.f64.u32	d7, s15
     ee6:	ee86 5b07 	vdiv.f64	d5, d6, d7
     eea:	ec53 2b15 	vmov	r2, r3, d5
     eee:	4819      	ldr	r0, [pc, #100]	; (f54 <calc_defined_step_MW_sweep+0x290>)
     ef0:	f000 fe3a 	bl	1b68 <__printf_veneer>

	mw_sweep_settings.current_point = 0;
     ef4:	4b12      	ldr	r3, [pc, #72]	; (f40 <calc_defined_step_MW_sweep+0x27c>)
     ef6:	2200      	movs	r2, #0
     ef8:	625a      	str	r2, [r3, #36]	; 0x24
	mw_sweep_settings.sweep_period = calc_sweep_time;
     efa:	4911      	ldr	r1, [pc, #68]	; (f40 <calc_defined_step_MW_sweep+0x27c>)
     efc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
     f00:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38

	//print_mw_sweep_settings();
	return(true);
     f04:	2301      	movs	r3, #1
}
     f06:	4618      	mov	r0, r3
     f08:	3748      	adds	r7, #72	; 0x48
     f0a:	46bd      	mov	sp, r7
     f0c:	bd80      	pop	{r7, pc}
     f0e:	bf00      	nop
     f10:	00000000 	.word	0x00000000
     f14:	41cdcd65 	.word	0x41cdcd65
     f18:	00000000 	.word	0x00000000
     f1c:	4187d784 	.word	0x4187d784
     f20:	00000000 	.word	0x00000000
     f24:	41700000 	.word	0x41700000
     f28:	00000000 	.word	0x00000000
     f2c:	412e8480 	.word	0x412e8480
     f30:	00000000 	.word	0x00000000
     f34:	408f4000 	.word	0x408f4000
     f38:	0801c5c8 	.word	0x0801c5c8
     f3c:	0801c60c 	.word	0x0801c60c
     f40:	20000640 	.word	0x20000640
     f44:	0801c62c 	.word	0x0801c62c
     f48:	0801c664 	.word	0x0801c664
     f4c:	200005fc 	.word	0x200005fc
     f50:	0801c684 	.word	0x0801c684
     f54:	0801c69c 	.word	0x0801c69c

00000f58 <calc_fixed_time_MW_sweep>:
  * @param  Span in Hz
  * @param  Sweep period in s
  * @param  Additional time for scope sync
  * @retval Success/failure or early termination
  */
bool calc_fixed_time_MW_sweep(const double centre_freq, const double span, const double requested_sweep_period, const bool scope_sync_time) {
     f58:	b580      	push	{r7, lr}
     f5a:	b09e      	sub	sp, #120	; 0x78
     f5c:	af04      	add	r7, sp, #16
     f5e:	ed87 0b06 	vstr	d0, [r7, #24]
     f62:	ed87 1b04 	vstr	d1, [r7, #16]
     f66:	ed87 2b02 	vstr	d2, [r7, #8]
     f6a:	4603      	mov	r3, r0
     f6c:	71fb      	strb	r3, [r7, #7]
	//Dwell time must be a minimum of one POP cycle
	//Overall dwell time should be at least 50% of sweep time
	//Number of points shall be maximised within the available time

	printf("MW sweep will have %.10g GHz centre frequency with %.5g Hz span, over %.3g s\r\n", centre_freq/1000000000, span, requested_sweep_period);
     f6e:	ed97 7b06 	vldr	d7, [r7, #24]
     f72:	ed9f 6b97 	vldr	d6, [pc, #604]	; 11d0 <calc_fixed_time_MW_sweep+0x278>
     f76:	ee87 5b06 	vdiv.f64	d5, d7, d6
     f7a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
     f7e:	e9cd 2302 	strd	r2, r3, [sp, #8]
     f82:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
     f86:	e9cd 2300 	strd	r2, r3, [sp]
     f8a:	ec53 2b15 	vmov	r2, r3, d5
     f8e:	4898      	ldr	r0, [pc, #608]	; (11f0 <calc_fixed_time_MW_sweep+0x298>)
     f90:	f000 fdea 	bl	1b68 <__printf_veneer>
	mw_sweep_settings.sweep_type = FIXED_TIME;
     f94:	4b97      	ldr	r3, [pc, #604]	; (11f4 <calc_fixed_time_MW_sweep+0x29c>)
     f96:	2201      	movs	r2, #1
     f98:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
	mw_sweep_settings.centre_freq = centre_freq;
     f9c:	4995      	ldr	r1, [pc, #596]	; (11f4 <calc_fixed_time_MW_sweep+0x29c>)
     f9e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
     fa2:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
	mw_sweep_settings.span = span;
     fa6:	4993      	ldr	r1, [pc, #588]	; (11f4 <calc_fixed_time_MW_sweep+0x29c>)
     fa8:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
     fac:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30

	mw_sweep_settings.dwell_time = POP_period_us + TIMING_MARGIN_US; //minimum possible value of dwell_time in us
     fb0:	4b91      	ldr	r3, [pc, #580]	; (11f8 <calc_fixed_time_MW_sweep+0x2a0>)
     fb2:	681b      	ldr	r3, [r3, #0]
     fb4:	2264      	movs	r2, #100	; 0x64
     fb6:	4413      	add	r3, r2
     fb8:	4a8e      	ldr	r2, [pc, #568]	; (11f4 <calc_fixed_time_MW_sweep+0x29c>)
     fba:	61d3      	str	r3, [r2, #28]
	uint32_t point_time = MW_STABILISE_TIME_US + MW_PROCESSING_TIME_US + mw_sweep_settings.dwell_time; //minimum possible value in us
     fbc:	f241 7270 	movw	r2, #6000	; 0x1770
     fc0:	2301      	movs	r3, #1
     fc2:	441a      	add	r2, r3
     fc4:	4b8b      	ldr	r3, [pc, #556]	; (11f4 <calc_fixed_time_MW_sweep+0x29c>)
     fc6:	69db      	ldr	r3, [r3, #28]
     fc8:	4413      	add	r3, r2
     fca:	65fb      	str	r3, [r7, #92]	; 0x5c
	uint32_t points_in_sweep = requested_sweep_period * (double)(1000000 / point_time); //maximum possible number of steps in sweep, rounded down to an integer
     fcc:	4a8b      	ldr	r2, [pc, #556]	; (11fc <calc_fixed_time_MW_sweep+0x2a4>)
     fce:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
     fd0:	fbb2 f3f3 	udiv	r3, r2, r3
     fd4:	ee07 3a90 	vmov	s15, r3
     fd8:	eeb8 6b67 	vcvt.f64.u32	d6, s15
     fdc:	ed97 7b02 	vldr	d7, [r7, #8]
     fe0:	ee26 7b07 	vmul.f64	d7, d6, d7
     fe4:	eefc 7bc7 	vcvt.u32.f64	s15, d7
     fe8:	ee17 3a90 	vmov	r3, s15
     fec:	65bb      	str	r3, [r7, #88]	; 0x58
	//printf("%lu points in sweep, maximum\r\n", points_in_sweep);

	/* now figure out the unit_step_size and how many steps will be taken in the span */

	/* Calculate start frequency */
	double start_freq = centre_freq - 0.5* span;
     fee:	ed97 7b04 	vldr	d7, [r7, #16]
     ff2:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
     ff6:	ee27 7b06 	vmul.f64	d7, d7, d6
     ffa:	ed97 6b06 	vldr	d6, [r7, #24]
     ffe:	ee36 7b47 	vsub.f64	d7, d6, d7
    1002:	ed87 7b14 	vstr	d7, [r7, #80]	; 0x50
	mw_sweep_settings.k = calculate_k(start_freq);
    1006:	ed97 0b14 	vldr	d0, [r7, #80]	; 0x50
    100a:	f000 f9b7 	bl	137c <calculate_k>
    100e:	4603      	mov	r3, r0
    1010:	b2da      	uxtb	r2, r3
    1012:	4b78      	ldr	r3, [pc, #480]	; (11f4 <calc_fixed_time_MW_sweep+0x29c>)
    1014:	705a      	strb	r2, [r3, #1]

	//steps should be evenly sized
	//selected step size should be an integer multiple of the unit step size
	//increase the step_size value until the sweep fits into the available period
	const double unit_step_size_Hz = REF_FREQ / (double) (mw_sweep_settings.k * (1 << 24)); //minimum step size possible
    1016:	ed9f 5b70 	vldr	d5, [pc, #448]	; 11d8 <calc_fixed_time_MW_sweep+0x280>
    101a:	4b76      	ldr	r3, [pc, #472]	; (11f4 <calc_fixed_time_MW_sweep+0x29c>)
    101c:	785b      	ldrb	r3, [r3, #1]
    101e:	061b      	lsls	r3, r3, #24
    1020:	ee07 3a90 	vmov	s15, r3
    1024:	eeb8 6be7 	vcvt.f64.s32	d6, s15
    1028:	ee85 7b06 	vdiv.f64	d7, d5, d6
    102c:	ed87 7b12 	vstr	d7, [r7, #72]	; 0x48
	//printf("Unit step size: %.3g Hz\r\n", unit_step_size_Hz);
	mw_sweep_settings.step_size = 1;
    1030:	4b70      	ldr	r3, [pc, #448]	; (11f4 <calc_fixed_time_MW_sweep+0x29c>)
    1032:	2201      	movs	r2, #1
    1034:	611a      	str	r2, [r3, #16]
	while ((mw_sweep_settings.step_size * points_in_sweep) < (span / unit_step_size_Hz)) {
    1036:	e004      	b.n	1042 <calc_fixed_time_MW_sweep+0xea>
		mw_sweep_settings.step_size++;
    1038:	4b6e      	ldr	r3, [pc, #440]	; (11f4 <calc_fixed_time_MW_sweep+0x29c>)
    103a:	691b      	ldr	r3, [r3, #16]
    103c:	3301      	adds	r3, #1
    103e:	4a6d      	ldr	r2, [pc, #436]	; (11f4 <calc_fixed_time_MW_sweep+0x29c>)
    1040:	6113      	str	r3, [r2, #16]
	while ((mw_sweep_settings.step_size * points_in_sweep) < (span / unit_step_size_Hz)) {
    1042:	4b6c      	ldr	r3, [pc, #432]	; (11f4 <calc_fixed_time_MW_sweep+0x29c>)
    1044:	691b      	ldr	r3, [r3, #16]
    1046:	6dba      	ldr	r2, [r7, #88]	; 0x58
    1048:	fb02 f303 	mul.w	r3, r2, r3
    104c:	ee07 3a90 	vmov	s15, r3
    1050:	eeb8 6b67 	vcvt.f64.u32	d6, s15
    1054:	ed97 4b04 	vldr	d4, [r7, #16]
    1058:	ed97 5b12 	vldr	d5, [r7, #72]	; 0x48
    105c:	ee84 7b05 	vdiv.f64	d7, d4, d5
    1060:	eeb4 6bc7 	vcmpe.f64	d6, d7
    1064:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    1068:	d4e6      	bmi.n	1038 <calc_fixed_time_MW_sweep+0xe0>
	}
	const double achieved_step_size = (double) (mw_sweep_settings.step_size * unit_step_size_Hz);
    106a:	4b62      	ldr	r3, [pc, #392]	; (11f4 <calc_fixed_time_MW_sweep+0x29c>)
    106c:	691b      	ldr	r3, [r3, #16]
    106e:	ee07 3a90 	vmov	s15, r3
    1072:	eeb8 7b67 	vcvt.f64.u32	d7, s15
    1076:	ed97 6b12 	vldr	d6, [r7, #72]	; 0x48
    107a:	ee26 7b07 	vmul.f64	d7, d6, d7
    107e:	ed87 7b10 	vstr	d7, [r7, #64]	; 0x40
	printf("Step size: %lu x unit step i.e. %.3g Hz\r\n", mw_sweep_settings.step_size, achieved_step_size);
    1082:	4b5c      	ldr	r3, [pc, #368]	; (11f4 <calc_fixed_time_MW_sweep+0x29c>)
    1084:	6919      	ldr	r1, [r3, #16]
    1086:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
    108a:	485d      	ldr	r0, [pc, #372]	; (1200 <calc_fixed_time_MW_sweep+0x2a8>)
    108c:	f000 fd6c 	bl	1b68 <__printf_veneer>

	//calculate number of steps in sweep and round down to an integer (must fit in time available)
	mw_sweep_settings.num_steps = (span / achieved_step_size);
    1090:	ed97 5b04 	vldr	d5, [r7, #16]
    1094:	ed97 6b10 	vldr	d6, [r7, #64]	; 0x40
    1098:	ee85 7b06 	vdiv.f64	d7, d5, d6
    109c:	eefc 7bc7 	vcvt.u32.f64	s15, d7
    10a0:	ee17 2a90 	vmov	r2, s15
    10a4:	4b53      	ldr	r3, [pc, #332]	; (11f4 <calc_fixed_time_MW_sweep+0x29c>)
    10a6:	60da      	str	r2, [r3, #12]

	const uint32_t point_time_us = 1000000 * requested_sweep_period / (mw_sweep_settings.num_steps + 1); //period of each point in us
    10a8:	ed97 7b02 	vldr	d7, [r7, #8]
    10ac:	ed9f 6b4c 	vldr	d6, [pc, #304]	; 11e0 <calc_fixed_time_MW_sweep+0x288>
    10b0:	ee27 5b06 	vmul.f64	d5, d7, d6
    10b4:	4b4f      	ldr	r3, [pc, #316]	; (11f4 <calc_fixed_time_MW_sweep+0x29c>)
    10b6:	68db      	ldr	r3, [r3, #12]
    10b8:	3301      	adds	r3, #1
    10ba:	ee07 3a90 	vmov	s15, r3
    10be:	eeb8 6b67 	vcvt.f64.u32	d6, s15
    10c2:	ee85 7b06 	vdiv.f64	d7, d5, d6
    10c6:	eefc 7bc7 	vcvt.u32.f64	s15, d7
    10ca:	ee17 3a90 	vmov	r3, s15
    10ce:	63fb      	str	r3, [r7, #60]	; 0x3c
//	printf("DEBUG point_time_us: %lu \r\n", point_time_us);
//	printf("DEBUG sweep time in us: %lu \r\n", point_time_us * (mw_sweep_settings.num_steps + 1));
	mw_sweep_settings.pop_cycles_per_point = (point_time_us - MW_STABILISE_TIME_US - TIMING_MARGIN_US - MW_PROCESSING_TIME_US)/POP_period_us;
    10d0:	f241 7270 	movw	r2, #6000	; 0x1770
    10d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    10d6:	1a9b      	subs	r3, r3, r2
    10d8:	2264      	movs	r2, #100	; 0x64
    10da:	1a9b      	subs	r3, r3, r2
    10dc:	2201      	movs	r2, #1
    10de:	1a9a      	subs	r2, r3, r2
    10e0:	4b45      	ldr	r3, [pc, #276]	; (11f8 <calc_fixed_time_MW_sweep+0x2a0>)
    10e2:	681b      	ldr	r3, [r3, #0]
    10e4:	fbb2 f3f3 	udiv	r3, r2, r3
    10e8:	4a42      	ldr	r2, [pc, #264]	; (11f4 <calc_fixed_time_MW_sweep+0x29c>)
    10ea:	6153      	str	r3, [r2, #20]
	printf("%lu points in sweep, %lu ms and %lu POP cycles each\r\n", mw_sweep_settings.num_steps + 1, point_time_us / 1000, mw_sweep_settings.pop_cycles_per_point);
    10ec:	4b41      	ldr	r3, [pc, #260]	; (11f4 <calc_fixed_time_MW_sweep+0x29c>)
    10ee:	68db      	ldr	r3, [r3, #12]
    10f0:	1c59      	adds	r1, r3, #1
    10f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    10f4:	4a43      	ldr	r2, [pc, #268]	; (1204 <calc_fixed_time_MW_sweep+0x2ac>)
    10f6:	fba2 2303 	umull	r2, r3, r2, r3
    10fa:	099a      	lsrs	r2, r3, #6
    10fc:	4b3d      	ldr	r3, [pc, #244]	; (11f4 <calc_fixed_time_MW_sweep+0x29c>)
    10fe:	695b      	ldr	r3, [r3, #20]
    1100:	4841      	ldr	r0, [pc, #260]	; (1208 <calc_fixed_time_MW_sweep+0x2b0>)
    1102:	f000 fd31 	bl	1b68 <__printf_veneer>
	uint32_t min_dwell_required_us = mw_sweep_settings.pop_cycles_per_point * POP_period_us + TIMING_MARGIN_US; //minimum dwell_time to achieve above
    1106:	4b3b      	ldr	r3, [pc, #236]	; (11f4 <calc_fixed_time_MW_sweep+0x29c>)
    1108:	695b      	ldr	r3, [r3, #20]
    110a:	4a3b      	ldr	r2, [pc, #236]	; (11f8 <calc_fixed_time_MW_sweep+0x2a0>)
    110c:	6812      	ldr	r2, [r2, #0]
    110e:	fb02 f303 	mul.w	r3, r2, r3
    1112:	2264      	movs	r2, #100	; 0x64
    1114:	4413      	add	r3, r2
    1116:	63bb      	str	r3, [r7, #56]	; 0x38
	mw_sweep_settings.dwell_time = point_time_us - MW_STABILISE_TIME_US - MW_PROCESSING_TIME_US; //actual programmed dwell time
    1118:	f241 7270 	movw	r2, #6000	; 0x1770
    111c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    111e:	1a9b      	subs	r3, r3, r2
    1120:	2201      	movs	r2, #1
    1122:	1a9b      	subs	r3, r3, r2
    1124:	4a33      	ldr	r2, [pc, #204]	; (11f4 <calc_fixed_time_MW_sweep+0x29c>)
    1126:	61d3      	str	r3, [r2, #28]
	if (mw_sweep_settings.dwell_time < min_dwell_required_us) {
    1128:	4b32      	ldr	r3, [pc, #200]	; (11f4 <calc_fixed_time_MW_sweep+0x29c>)
    112a:	69db      	ldr	r3, [r3, #28]
    112c:	6bba      	ldr	r2, [r7, #56]	; 0x38
    112e:	429a      	cmp	r2, r3
    1130:	d902      	bls.n	1138 <calc_fixed_time_MW_sweep+0x1e0>
		mw_sweep_settings.dwell_time = min_dwell_required_us;
    1132:	4a30      	ldr	r2, [pc, #192]	; (11f4 <calc_fixed_time_MW_sweep+0x29c>)
    1134:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    1136:	61d3      	str	r3, [r2, #28]
	}
//	printf("DEBUG dwell_time: %lu \r\n", mw_sweep_settings.dwell_time);
//	printf("DEBUG sweep time in us: %lu \r\n", (mw_sweep_settings.dwell_time + MW_STABILISE_TIME_US + MW_PROCESSING_TIME_US) * (mw_sweep_settings.num_steps + 1));

	/* Double check - calculate the period of a sweep */
	double point_period = (double)(MW_STABILISE_TIME_US + MW_PROCESSING_TIME_US + mw_sweep_settings.dwell_time)/1000000;
    1138:	f241 7270 	movw	r2, #6000	; 0x1770
    113c:	2301      	movs	r3, #1
    113e:	441a      	add	r2, r3
    1140:	4b2c      	ldr	r3, [pc, #176]	; (11f4 <calc_fixed_time_MW_sweep+0x29c>)
    1142:	69db      	ldr	r3, [r3, #28]
    1144:	4413      	add	r3, r2
    1146:	ee07 3a90 	vmov	s15, r3
    114a:	eeb8 6b67 	vcvt.f64.u32	d6, s15
    114e:	ed9f 5b24 	vldr	d5, [pc, #144]	; 11e0 <calc_fixed_time_MW_sweep+0x288>
    1152:	ee86 7b05 	vdiv.f64	d7, d6, d5
    1156:	ed87 7b0c 	vstr	d7, [r7, #48]	; 0x30
//	printf("Point period %f\r\n", point_period);
	double calc_sweep_time = point_period * (mw_sweep_settings.num_steps + 1);
    115a:	4b26      	ldr	r3, [pc, #152]	; (11f4 <calc_fixed_time_MW_sweep+0x29c>)
    115c:	68db      	ldr	r3, [r3, #12]
    115e:	3301      	adds	r3, #1
    1160:	ee07 3a90 	vmov	s15, r3
    1164:	eeb8 7b67 	vcvt.f64.u32	d7, s15
    1168:	ed97 6b0c 	vldr	d6, [r7, #48]	; 0x30
    116c:	ee26 7b07 	vmul.f64	d7, d6, d7
    1170:	ed87 7b18 	vstr	d7, [r7, #96]	; 0x60
//	printf("calc_sweep_time %f\r\n", calc_sweep_time);
	double min_sweep_time = (double)((min_dwell_required_us + MW_STABILISE_TIME_US + MW_PROCESSING_TIME_US) * (mw_sweep_settings.num_steps + 1)) / 1000000;
    1174:	f241 7270 	movw	r2, #6000	; 0x1770
    1178:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    117a:	4413      	add	r3, r2
    117c:	2201      	movs	r2, #1
    117e:	4413      	add	r3, r2
    1180:	4a1c      	ldr	r2, [pc, #112]	; (11f4 <calc_fixed_time_MW_sweep+0x29c>)
    1182:	68d2      	ldr	r2, [r2, #12]
    1184:	3201      	adds	r2, #1
    1186:	fb02 f303 	mul.w	r3, r2, r3
    118a:	ee07 3a90 	vmov	s15, r3
    118e:	eeb8 6b67 	vcvt.f64.u32	d6, s15
    1192:	ed9f 5b13 	vldr	d5, [pc, #76]	; 11e0 <calc_fixed_time_MW_sweep+0x288>
    1196:	ee86 7b05 	vdiv.f64	d7, d6, d5
    119a:	ed87 7b0a 	vstr	d7, [r7, #40]	; 0x28
	if (calc_sweep_time/min_sweep_time > 1.02) {
    119e:	ed97 5b18 	vldr	d5, [r7, #96]	; 0x60
    11a2:	ed97 6b0a 	vldr	d6, [r7, #40]	; 0x28
    11a6:	ee85 7b06 	vdiv.f64	d7, d5, d6
    11aa:	ed9f 6b0f 	vldr	d6, [pc, #60]	; 11e8 <calc_fixed_time_MW_sweep+0x290>
    11ae:	eeb4 7bc6 	vcmpe.f64	d7, d6
    11b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    11b6:	dd2b      	ble.n	1210 <calc_fixed_time_MW_sweep+0x2b8>
		printf("Sweep period %.4g s but could be reduced to %.4g s\r\n", calc_sweep_time, min_sweep_time);
    11b8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
    11bc:	e9cd 2300 	strd	r2, r3, [sp]
    11c0:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
    11c4:	4811      	ldr	r0, [pc, #68]	; (120c <calc_fixed_time_MW_sweep+0x2b4>)
    11c6:	f000 fccf 	bl	1b68 <__printf_veneer>
    11ca:	e029      	b.n	1220 <calc_fixed_time_MW_sweep+0x2c8>
    11cc:	f3af 8000 	nop.w
    11d0:	00000000 	.word	0x00000000
    11d4:	41cdcd65 	.word	0x41cdcd65
    11d8:	00000000 	.word	0x00000000
    11dc:	4187d784 	.word	0x4187d784
    11e0:	00000000 	.word	0x00000000
    11e4:	412e8480 	.word	0x412e8480
    11e8:	851eb852 	.word	0x851eb852
    11ec:	3ff051eb 	.word	0x3ff051eb
    11f0:	0801c6b8 	.word	0x0801c6b8
    11f4:	20000640 	.word	0x20000640
    11f8:	200005fc 	.word	0x200005fc
    11fc:	000f4240 	.word	0x000f4240
    1200:	0801c708 	.word	0x0801c708
    1204:	10624dd3 	.word	0x10624dd3
    1208:	0801c734 	.word	0x0801c734
    120c:	0801c76c 	.word	0x0801c76c
	} else {
		printf("Sweep period %.4g s is pretty much optimal for %lu POP samples per point\r\n", calc_sweep_time, mw_sweep_settings.pop_cycles_per_point);
    1210:	4b57      	ldr	r3, [pc, #348]	; (1370 <calc_fixed_time_MW_sweep+0x418>)
    1212:	695b      	ldr	r3, [r3, #20]
    1214:	9300      	str	r3, [sp, #0]
    1216:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
    121a:	4856      	ldr	r0, [pc, #344]	; (1374 <calc_fixed_time_MW_sweep+0x41c>)
    121c:	f000 fca4 	bl	1b68 <__printf_veneer>

	//Period of MW sweep isn't precise as it's based on measured average processing time
	//Steps are increased by up to 10% to increase the sweep period to guarantee horizontal scope sync
	//These are added to the end of the sweep so that the centre frequency is still central
	//Sweep period will be increased by a maximum of 1s
	if (scope_sync_time) {
    1220:	79fb      	ldrb	r3, [r7, #7]
    1222:	2b00      	cmp	r3, #0
    1224:	d044      	beq.n	12b0 <calc_fixed_time_MW_sweep+0x358>

		mw_sweep_settings.num_steps = mw_sweep_settings.num_steps * 1.1 + 0.5;
    1226:	4b52      	ldr	r3, [pc, #328]	; (1370 <calc_fixed_time_MW_sweep+0x418>)
    1228:	68db      	ldr	r3, [r3, #12]
    122a:	ee07 3a90 	vmov	s15, r3
    122e:	eeb8 7b67 	vcvt.f64.u32	d7, s15
    1232:	ed9f 6b49 	vldr	d6, [pc, #292]	; 1358 <calc_fixed_time_MW_sweep+0x400>
    1236:	ee27 7b06 	vmul.f64	d7, d7, d6
    123a:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
    123e:	ee37 7b06 	vadd.f64	d7, d7, d6
    1242:	eefc 7bc7 	vcvt.u32.f64	s15, d7
    1246:	ee17 2a90 	vmov	r2, s15
    124a:	4b49      	ldr	r3, [pc, #292]	; (1370 <calc_fixed_time_MW_sweep+0x418>)
    124c:	60da      	str	r2, [r3, #12]
//		printf("DEBUG #steps: %lu \r\n", mw_sweep_settings.num_steps);
		calc_sweep_time = point_period * (mw_sweep_settings.num_steps + 1);
    124e:	4b48      	ldr	r3, [pc, #288]	; (1370 <calc_fixed_time_MW_sweep+0x418>)
    1250:	68db      	ldr	r3, [r3, #12]
    1252:	3301      	adds	r3, #1
    1254:	ee07 3a90 	vmov	s15, r3
    1258:	eeb8 7b67 	vcvt.f64.u32	d7, s15
    125c:	ed97 6b0c 	vldr	d6, [r7, #48]	; 0x30
    1260:	ee26 7b07 	vmul.f64	d7, d6, d7
    1264:	ed87 7b18 	vstr	d7, [r7, #96]	; 0x60

		/* Decrease number of steps if additional 10% is >1s */
//		printf("DEBUG calc_sweep_time - requested_sweep_period: %f \r\n", calc_sweep_time - requested_sweep_period);
		if ((calc_sweep_time - requested_sweep_period) > 1){
    1268:	ed97 6b18 	vldr	d6, [r7, #96]	; 0x60
    126c:	ed97 7b02 	vldr	d7, [r7, #8]
    1270:	ee36 7b47 	vsub.f64	d7, d6, d7
    1274:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
    1278:	eeb4 7bc6 	vcmpe.f64	d7, d6
    127c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    1280:	dd11      	ble.n	12a6 <calc_fixed_time_MW_sweep+0x34e>
			mw_sweep_settings.num_steps--;
    1282:	4b3b      	ldr	r3, [pc, #236]	; (1370 <calc_fixed_time_MW_sweep+0x418>)
    1284:	68db      	ldr	r3, [r3, #12]
    1286:	3b01      	subs	r3, #1
    1288:	4a39      	ldr	r2, [pc, #228]	; (1370 <calc_fixed_time_MW_sweep+0x418>)
    128a:	60d3      	str	r3, [r2, #12]
			calc_sweep_time = point_period * (mw_sweep_settings.num_steps + 1);
    128c:	4b38      	ldr	r3, [pc, #224]	; (1370 <calc_fixed_time_MW_sweep+0x418>)
    128e:	68db      	ldr	r3, [r3, #12]
    1290:	3301      	adds	r3, #1
    1292:	ee07 3a90 	vmov	s15, r3
    1296:	eeb8 7b67 	vcvt.f64.u32	d7, s15
    129a:	ed97 6b0c 	vldr	d6, [r7, #48]	; 0x30
    129e:	ee26 7b07 	vmul.f64	d7, d6, d7
    12a2:	ed87 7b18 	vstr	d7, [r7, #96]	; 0x60
		}
//		printf("DEBUG #steps: %lu \r\n", mw_sweep_settings.num_steps);

		//Double check of the sweep period selected
		printf("Final calculated sweep period, including scope sync: %.3g s\r\n", calc_sweep_time);
    12a6:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
    12aa:	4833      	ldr	r0, [pc, #204]	; (1378 <calc_fixed_time_MW_sweep+0x420>)
    12ac:	f000 fc5c 	bl	1b68 <__printf_veneer>
	}

	/* Can avoid spurs if frequency requested can be encoded exactly  */
	start_freq = ((long)(start_freq/unit_step_size_Hz)) * unit_step_size_Hz;
    12b0:	ed97 5b14 	vldr	d5, [r7, #80]	; 0x50
    12b4:	ed97 6b12 	vldr	d6, [r7, #72]	; 0x48
    12b8:	ee85 7b06 	vdiv.f64	d7, d5, d6
    12bc:	eefd 7bc7 	vcvt.s32.f64	s15, d7
    12c0:	eeb8 7be7 	vcvt.f64.s32	d7, s15
    12c4:	ed97 6b12 	vldr	d6, [r7, #72]	; 0x48
    12c8:	ee26 7b07 	vmul.f64	d7, d6, d7
    12cc:	ed87 7b14 	vstr	d7, [r7, #80]	; 0x50

	/* Calculate the N division ratio, extracting the fractional and integer parts */
	const double N = ((start_freq * mw_sweep_settings.k) / REF_FREQ);
    12d0:	4b27      	ldr	r3, [pc, #156]	; (1370 <calc_fixed_time_MW_sweep+0x418>)
    12d2:	785b      	ldrb	r3, [r3, #1]
    12d4:	ee07 3a90 	vmov	s15, r3
    12d8:	eeb8 6be7 	vcvt.f64.s32	d6, s15
    12dc:	ed97 7b14 	vldr	d7, [r7, #80]	; 0x50
    12e0:	ee26 6b07 	vmul.f64	d6, d6, d7
    12e4:	ed9f 5b1e 	vldr	d5, [pc, #120]	; 1360 <calc_fixed_time_MW_sweep+0x408>
    12e8:	ee86 7b05 	vdiv.f64	d7, d6, d5
    12ec:	ed87 7b08 	vstr	d7, [r7, #32]
	mw_sweep_settings.NINT = N;
    12f0:	ed97 7b08 	vldr	d7, [r7, #32]
    12f4:	eefc 7bc7 	vcvt.u32.f64	s15, d7
    12f8:	ee17 2a90 	vmov	r2, s15
    12fc:	4b1c      	ldr	r3, [pc, #112]	; (1370 <calc_fixed_time_MW_sweep+0x418>)
    12fe:	605a      	str	r2, [r3, #4]
	mw_sweep_settings.NFRAC_start = ((N - mw_sweep_settings.NINT) * (1 << 24)) + 0.5;
    1300:	4b1b      	ldr	r3, [pc, #108]	; (1370 <calc_fixed_time_MW_sweep+0x418>)
    1302:	685b      	ldr	r3, [r3, #4]
    1304:	ee07 3a90 	vmov	s15, r3
    1308:	eeb8 7b67 	vcvt.f64.u32	d7, s15
    130c:	ed97 6b08 	vldr	d6, [r7, #32]
    1310:	ee36 7b47 	vsub.f64	d7, d6, d7
    1314:	ed9f 6b14 	vldr	d6, [pc, #80]	; 1368 <calc_fixed_time_MW_sweep+0x410>
    1318:	ee27 7b06 	vmul.f64	d7, d7, d6
    131c:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
    1320:	ee37 7b06 	vadd.f64	d7, d7, d6
    1324:	eefc 7bc7 	vcvt.u32.f64	s15, d7
    1328:	ee17 2a90 	vmov	r2, s15
    132c:	4b10      	ldr	r3, [pc, #64]	; (1370 <calc_fixed_time_MW_sweep+0x418>)
    132e:	609a      	str	r2, [r3, #8]
	mw_sweep_settings.current_point = 0;
    1330:	4b0f      	ldr	r3, [pc, #60]	; (1370 <calc_fixed_time_MW_sweep+0x418>)
    1332:	2200      	movs	r2, #0
    1334:	625a      	str	r2, [r3, #36]	; 0x24
	mw_sweep_settings.sweep_period = calc_sweep_time;
    1336:	490e      	ldr	r1, [pc, #56]	; (1370 <calc_fixed_time_MW_sweep+0x418>)
    1338:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
    133c:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
	mw_sweep_settings.stabilise_time = MW_STABILISE_TIME_US; //Global MW stabilisation time
    1340:	f241 7270 	movw	r2, #6000	; 0x1770
    1344:	4b0a      	ldr	r3, [pc, #40]	; (1370 <calc_fixed_time_MW_sweep+0x418>)
    1346:	619a      	str	r2, [r3, #24]
//	print_mw_sweep_settings();
	return(true);
    1348:	2301      	movs	r3, #1
}
    134a:	4618      	mov	r0, r3
    134c:	3768      	adds	r7, #104	; 0x68
    134e:	46bd      	mov	sp, r7
    1350:	bd80      	pop	{r7, pc}
    1352:	bf00      	nop
    1354:	f3af 8000 	nop.w
    1358:	9999999a 	.word	0x9999999a
    135c:	3ff19999 	.word	0x3ff19999
    1360:	00000000 	.word	0x00000000
    1364:	4187d784 	.word	0x4187d784
    1368:	00000000 	.word	0x00000000
    136c:	41700000 	.word	0x41700000
    1370:	20000640 	.word	0x20000640
    1374:	0801c7a4 	.word	0x0801c7a4
    1378:	0801c7f0 	.word	0x0801c7f0

0000137c <calculate_k>:

/**
  * @brief  Calculates k value
  * @retval k
  */
static const uint32_t calculate_k(const double frequency) {
    137c:	b480      	push	{r7}
    137e:	b085      	sub	sp, #20
    1380:	af00      	add	r7, sp, #0
    1382:	ed87 0b00 	vstr	d0, [r7]
	uint32_t k = VCO_MAX_FREQ / frequency;
    1386:	ed9f 5b10 	vldr	d5, [pc, #64]	; 13c8 <calculate_k+0x4c>
    138a:	ed97 6b00 	vldr	d6, [r7]
    138e:	ee85 7b06 	vdiv.f64	d7, d5, d6
    1392:	eefc 7bc7 	vcvt.u32.f64	s15, d7
    1396:	ee17 3a90 	vmov	r3, s15
    139a:	60fb      	str	r3, [r7, #12]

	if (k != 1) {
    139c:	68fb      	ldr	r3, [r7, #12]
    139e:	2b01      	cmp	r3, #1
    13a0:	d00b      	beq.n	13ba <calculate_k+0x3e>
		while (k > 62 || k % 2) {
    13a2:	e002      	b.n	13aa <calculate_k+0x2e>
			k --;
    13a4:	68fb      	ldr	r3, [r7, #12]
    13a6:	3b01      	subs	r3, #1
    13a8:	60fb      	str	r3, [r7, #12]
		while (k > 62 || k % 2) {
    13aa:	68fb      	ldr	r3, [r7, #12]
    13ac:	2b3e      	cmp	r3, #62	; 0x3e
    13ae:	d8f9      	bhi.n	13a4 <calculate_k+0x28>
    13b0:	68fb      	ldr	r3, [r7, #12]
    13b2:	f003 0301 	and.w	r3, r3, #1
    13b6:	2b00      	cmp	r3, #0
    13b8:	d1f4      	bne.n	13a4 <calculate_k+0x28>
		}
	}
	return (k);
    13ba:	68fb      	ldr	r3, [r7, #12]
}
    13bc:	4618      	mov	r0, r3
    13be:	3714      	adds	r7, #20
    13c0:	46bd      	mov	sp, r7
    13c2:	f85d 7b04 	ldr.w	r7, [sp], #4
    13c6:	4770      	bx	lr
    13c8:	20000000 	.word	0x20000000
    13cc:	41ee8c21 	.word	0x41ee8c21

000013d0 <start_POP_calibration>:

/**
  * @brief  Starts the process of measuring the POP period
  * @retval None
  */
void start_POP_calibration(const bool cal_only) {
    13d0:	b580      	push	{r7, lr}
    13d2:	b082      	sub	sp, #8
    13d4:	af00      	add	r7, sp, #0
    13d6:	4603      	mov	r3, r0
    13d8:	71fb      	strb	r3, [r7, #7]
	/* Requires ADC to be initialised and for HAL_ADC_ConvCpltCallback to be active */
	if (cal_only == true) {
    13da:	79fb      	ldrb	r3, [r7, #7]
    13dc:	2b00      	cmp	r3, #0
    13de:	d003      	beq.n	13e8 <start_POP_calibration+0x18>
		mw_sweep_settings.sweep_mode = POP_CAL_ONLY;
    13e0:	4b0f      	ldr	r3, [pc, #60]	; (1420 <start_POP_calibration+0x50>)
    13e2:	2201      	movs	r2, #1
    13e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
	}
	HAL_GPIO_WritePin(MW_INVALID_GPIO_Port, MW_INVALID_Pin, GPIO_PIN_SET); 	//Sets MW_invalid pin high to reset POP cycle
    13e8:	2201      	movs	r2, #1
    13ea:	2102      	movs	r1, #2
    13ec:	480d      	ldr	r0, [pc, #52]	; (1424 <start_POP_calibration+0x54>)
    13ee:	f000 fbb7 	bl	1b60 <__HAL_GPIO_WritePin_veneer>
	HAL_Delay(10); // 10ms in case ADC was part-way through a conversion
    13f2:	200a      	movs	r0, #10
    13f4:	f000 fbac 	bl	1b50 <__HAL_Delay_veneer>
	sample_count = 0; //reset sample count
    13f8:	4b0b      	ldr	r3, [pc, #44]	; (1428 <start_POP_calibration+0x58>)
    13fa:	2200      	movs	r2, #0
    13fc:	801a      	strh	r2, [r3, #0]
	mw_sweep_settings.state = MW_CALIBRATE;
    13fe:	4b08      	ldr	r3, [pc, #32]	; (1420 <start_POP_calibration+0x50>)
    1400:	2204      	movs	r2, #4
    1402:	701a      	strb	r2, [r3, #0]
	start_timer(MW_TIMER); //reset MW_timer and start counting
    1404:	4b09      	ldr	r3, [pc, #36]	; (142c <start_POP_calibration+0x5c>)
    1406:	681b      	ldr	r3, [r3, #0]
    1408:	4618      	mov	r0, r3
    140a:	f000 fadf 	bl	19cc <start_timer>
	HAL_GPIO_WritePin(MW_INVALID_GPIO_Port, MW_INVALID_Pin, GPIO_PIN_RESET); //Restart POP cycle
    140e:	2200      	movs	r2, #0
    1410:	2102      	movs	r1, #2
    1412:	4804      	ldr	r0, [pc, #16]	; (1424 <start_POP_calibration+0x54>)
    1414:	f000 fba4 	bl	1b60 <__HAL_GPIO_WritePin_veneer>
	#ifdef MW_VERBOSE
		printf("POP calibration started\r\n");
	#endif //MW_VERBOSE
}
    1418:	bf00      	nop
    141a:	3708      	adds	r7, #8
    141c:	46bd      	mov	sp, r7
    141e:	bd80      	pop	{r7, pc}
    1420:	20000640 	.word	0x20000640
    1424:	58020400 	.word	0x58020400
    1428:	200005fa 	.word	0x200005fa
    142c:	2000001c 	.word	0x2000001c

00001430 <start_MW_sweep>:

/**
  * @brief  Starts a MW sweep
  * @retval Success/failure
  */
static const bool start_MW_sweep(const bool single_sweep) {
    1430:	b580      	push	{r7, lr}
    1432:	b082      	sub	sp, #8
    1434:	af00      	add	r7, sp, #0
    1436:	4603      	mov	r3, r0
    1438:	71fb      	strb	r3, [r7, #7]
	//uses settings from the mw_sweep_settings structure
	if (single_sweep == true) {
    143a:	79fb      	ldrb	r3, [r7, #7]
    143c:	2b00      	cmp	r3, #0
    143e:	d003      	beq.n	1448 <start_MW_sweep+0x18>
		mw_sweep_settings.sweep_mode = SWEEP_ONCE;
    1440:	4b1c      	ldr	r3, [pc, #112]	; (14b4 <start_MW_sweep+0x84>)
    1442:	2202      	movs	r2, #2
    1444:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
	}
	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET); // Assume MW lock, the LED will be disabled if lock fails.
    1448:	2201      	movs	r2, #1
    144a:	2102      	movs	r1, #2
    144c:	481a      	ldr	r0, [pc, #104]	; (14b8 <start_MW_sweep+0x88>)
    144e:	f000 fb87 	bl	1b60 <__HAL_GPIO_WritePin_veneer>

	#ifdef MW_VERBOSE
		printf("Setting trigger output low \r\n");
	#endif //MW_VERBOSE

	HAL_GPIO_WritePin(MW_INVALID_GPIO_Port, MW_INVALID_Pin, GPIO_PIN_SET); //Sets MW_invalid pin high
    1452:	2201      	movs	r2, #1
    1454:	2102      	movs	r1, #2
    1456:	4819      	ldr	r0, [pc, #100]	; (14bc <start_MW_sweep+0x8c>)
    1458:	f000 fb82 	bl	1b60 <__HAL_GPIO_WritePin_veneer>
//	set_frequency(mw_sweep_settings.NINT, mw_sweep_settings.NFRAC_start, mw_sweep_settings.k, MANUAL_MUTE); //program initial MW frequency
	set_freq_regs(mw_sweep_settings.NINT, mw_sweep_settings.NFRAC_start, mw_sweep_settings.k); //program initial MW frequency
    145c:	4b15      	ldr	r3, [pc, #84]	; (14b4 <start_MW_sweep+0x84>)
    145e:	685b      	ldr	r3, [r3, #4]
    1460:	4a14      	ldr	r2, [pc, #80]	; (14b4 <start_MW_sweep+0x84>)
    1462:	6891      	ldr	r1, [r2, #8]
    1464:	4a13      	ldr	r2, [pc, #76]	; (14b4 <start_MW_sweep+0x84>)
    1466:	7852      	ldrb	r2, [r2, #1]
    1468:	4618      	mov	r0, r3
    146a:	f7ff fb41 	bl	af0 <set_freq_regs>
	mw_sweep_settings.state = MW_STABILISING; //waiting for MW output to stabilise
    146e:	4b11      	ldr	r3, [pc, #68]	; (14b4 <start_MW_sweep+0x84>)
    1470:	2202      	movs	r2, #2
    1472:	701a      	strb	r2, [r3, #0]
	mw_sweep_settings.current_point = 0; //currently on at start of ramp i.e. point 0
    1474:	4b0f      	ldr	r3, [pc, #60]	; (14b4 <start_MW_sweep+0x84>)
    1476:	2200      	movs	r2, #0
    1478:	625a      	str	r2, [r3, #36]	; 0x24
	HAL_Delay(10); // 10ms in case ADC was part-way through a conversion
    147a:	200a      	movs	r0, #10
    147c:	f000 fb68 	bl	1b50 <__HAL_Delay_veneer>
	sample_count = 0; //reset sample count
    1480:	4b0f      	ldr	r3, [pc, #60]	; (14c0 <start_MW_sweep+0x90>)
    1482:	2200      	movs	r2, #0
    1484:	801a      	strh	r2, [r3, #0]
	/* Output used for triggering external scope */
	HAL_GPIO_WritePin(SCOPE_TRIG_OUT_GPIO_Port, SCOPE_TRIG_OUT_Pin, GPIO_PIN_RESET); // Sets trigger output low
    1486:	2200      	movs	r2, #0
    1488:	2101      	movs	r1, #1
    148a:	480e      	ldr	r0, [pc, #56]	; (14c4 <start_MW_sweep+0x94>)
    148c:	f000 fb68 	bl	1b60 <__HAL_GPIO_WritePin_veneer>
	start_timer(MW_TIMER); //reset MW_timer (MW step timer) and start counting
    1490:	4b0d      	ldr	r3, [pc, #52]	; (14c8 <start_MW_sweep+0x98>)
    1492:	681b      	ldr	r3, [r3, #0]
    1494:	4618      	mov	r0, r3
    1496:	f000 fa99 	bl	19cc <start_timer>
	start_timer(SWEEP_TIMER); //reset general (sweep) timer and start counting
    149a:	4b0c      	ldr	r3, [pc, #48]	; (14cc <start_MW_sweep+0x9c>)
    149c:	681b      	ldr	r3, [r3, #0]
    149e:	4618      	mov	r0, r3
    14a0:	f000 fa94 	bl	19cc <start_timer>
	sample_count = 0; //reset sample count
    14a4:	4b06      	ldr	r3, [pc, #24]	; (14c0 <start_MW_sweep+0x90>)
    14a6:	2200      	movs	r2, #0
    14a8:	801a      	strh	r2, [r3, #0]
	//known limitation - if the ADC has been recently triggered and HAL_ADC_ConvCpltCallback will increment sample_count by 1
	return(true);
    14aa:	2301      	movs	r3, #1
}
    14ac:	4618      	mov	r0, r3
    14ae:	3708      	adds	r7, #8
    14b0:	46bd      	mov	sp, r7
    14b2:	bd80      	pop	{r7, pc}
    14b4:	20000640 	.word	0x20000640
    14b8:	58021000 	.word	0x58021000
    14bc:	58020400 	.word	0x58020400
    14c0:	200005fa 	.word	0x200005fa
    14c4:	58021800 	.word	0x58021800
    14c8:	2000001c 	.word	0x2000001c
    14cc:	20000020 	.word	0x20000020

000014d0 <start_continuous_MW_sweep>:

/**
  * @brief  Starts a continuous MW calibrate/sweep cycle
  * @retval None
  */
void start_continuous_MW_sweep(void) {
    14d0:	b580      	push	{r7, lr}
    14d2:	af00      	add	r7, sp, #0
	mw_sweep_settings.sweep_mode = CONTINUOUS_SWEEP;
    14d4:	4b04      	ldr	r3, [pc, #16]	; (14e8 <start_continuous_MW_sweep+0x18>)
    14d6:	2200      	movs	r2, #0
    14d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
	start_POP_calibration(false);
    14dc:	2000      	movs	r0, #0
    14de:	f7ff ff77 	bl	13d0 <start_POP_calibration>
}
    14e2:	bf00      	nop
    14e4:	bd80      	pop	{r7, pc}
    14e6:	bf00      	nop
    14e8:	20000640 	.word	0x20000640

000014ec <stop_MW_operation>:

/**
  * @brief  Stops MW operation e.g. for laser tuning
  * @retval None
  */
void stop_MW_operation(void) {
    14ec:	b580      	push	{r7, lr}
    14ee:	af00      	add	r7, sp, #0
	mw_sweep_settings.sweep_mode = MW_STOPPED;
    14f0:	4b07      	ldr	r3, [pc, #28]	; (1510 <stop_MW_operation+0x24>)
    14f2:	2200      	movs	r2, #0
    14f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
	stop_timer(MW_TIMER);
    14f8:	4b06      	ldr	r3, [pc, #24]	; (1514 <stop_MW_operation+0x28>)
    14fa:	681b      	ldr	r3, [r3, #0]
    14fc:	4618      	mov	r0, r3
    14fe:	f000 fa83 	bl	1a08 <stop_timer>
	HAL_GPIO_WritePin(MW_INVALID_GPIO_Port, MW_INVALID_Pin, GPIO_PIN_RESET); //Ensures the ADC sample pulse is being generated
    1502:	2200      	movs	r2, #0
    1504:	2102      	movs	r1, #2
    1506:	4804      	ldr	r0, [pc, #16]	; (1518 <stop_MW_operation+0x2c>)
    1508:	f000 fb2a 	bl	1b60 <__HAL_GPIO_WritePin_veneer>
}
    150c:	bf00      	nop
    150e:	bd80      	pop	{r7, pc}
    1510:	20000640 	.word	0x20000640
    1514:	2000001c 	.word	0x2000001c
    1518:	58020400 	.word	0x58020400

0000151c <MW_update>:

/**
  * @brief  Checks MW status to see if a timer has elapsed and if frequency needs changing.
  * @retval True if an action was taken
  */
const bool MW_update(void) {
    151c:	b580      	push	{r7, lr}
    151e:	b08a      	sub	sp, #40	; 0x28
    1520:	af04      	add	r7, sp, #16
	uint8_t local_copy_of_MW_state = mw_sweep_settings.state; //hack to make switch statement behave
    1522:	4b97      	ldr	r3, [pc, #604]	; (1780 <MW_update+0x264>)
    1524:	781b      	ldrb	r3, [r3, #0]
    1526:	75bb      	strb	r3, [r7, #22]
	//switch (mw_sweep_settings.state)
	bool action_taken = false;
    1528:	2300      	movs	r3, #0
    152a:	75fb      	strb	r3, [r7, #23]
	uint32_t sweep_period_us;
	switch (local_copy_of_MW_state)
    152c:	7dbb      	ldrb	r3, [r7, #22]
    152e:	2b04      	cmp	r3, #4
    1530:	f200 810b 	bhi.w	174a <MW_update+0x22e>
    1534:	a201      	add	r2, pc, #4	; (adr r2, 153c <MW_update+0x20>)
    1536:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    153a:	bf00      	nop
    153c:	00001763 	.word	0x00001763
    1540:	00001763 	.word	0x00001763
    1544:	00001551 	.word	0x00001551
    1548:	00001597 	.word	0x00001597
    154c:	000016d7 	.word	0x000016d7
		case MW_STOPPED:
		case MW_FIXED_FREQ:
			break; //no action to take

		case MW_STABILISING: //waiting for MW output to stabilise
			if (check_timer(MW_TIMER) < MW_STABILISE_TIME_US) return(false); //Still waiting, no action taken
    1550:	4b8c      	ldr	r3, [pc, #560]	; (1784 <MW_update+0x268>)
    1552:	681b      	ldr	r3, [r3, #0]
    1554:	4618      	mov	r0, r3
    1556:	f000 fa69 	bl	1a2c <check_timer>
    155a:	4603      	mov	r3, r0
    155c:	f241 7270 	movw	r2, #6000	; 0x1770
    1560:	4293      	cmp	r3, r2
    1562:	d201      	bcs.n	1568 <MW_update+0x4c>
    1564:	2300      	movs	r3, #0
    1566:	e100      	b.n	176a <MW_update+0x24e>
			//Otherwise MW stabilisation timer has elapsed
			stop_timer(MW_TIMER);
    1568:	4b86      	ldr	r3, [pc, #536]	; (1784 <MW_update+0x268>)
    156a:	681b      	ldr	r3, [r3, #0]
    156c:	4618      	mov	r0, r3
    156e:	f000 fa4b 	bl	1a08 <stop_timer>
			HAL_GPIO_WritePin(MW_INVALID_GPIO_Port, MW_INVALID_Pin, GPIO_PIN_RESET); //Sets MW_invalid pin low as MW now stable
    1572:	2200      	movs	r2, #0
    1574:	2102      	movs	r1, #2
    1576:	4884      	ldr	r0, [pc, #528]	; (1788 <MW_update+0x26c>)
    1578:	f000 faf2 	bl	1b60 <__HAL_GPIO_WritePin_veneer>
			reset_adc_samples(); //clear any data in the adc sample buffer
    157c:	f7ff f886 	bl	68c <reset_adc_samples>
			mw_sweep_settings.state = MW_DWELL;
    1580:	4b7f      	ldr	r3, [pc, #508]	; (1780 <MW_update+0x264>)
    1582:	2203      	movs	r2, #3
    1584:	701a      	strb	r2, [r3, #0]
			start_timer(MW_TIMER); //Restart timer for DWELL time
    1586:	4b7f      	ldr	r3, [pc, #508]	; (1784 <MW_update+0x268>)
    1588:	681b      	ldr	r3, [r3, #0]
    158a:	4618      	mov	r0, r3
    158c:	f000 fa1e 	bl	19cc <start_timer>
			action_taken = true;
    1590:	2301      	movs	r3, #1
    1592:	75fb      	strb	r3, [r7, #23]
			break;
    1594:	e0e8      	b.n	1768 <MW_update+0x24c>

		case MW_DWELL: //valid MW output waiting for end of dwell time
			if (check_timer(MW_TIMER) < mw_sweep_settings.dwell_time) return(false); //Still waiting
    1596:	4b7b      	ldr	r3, [pc, #492]	; (1784 <MW_update+0x268>)
    1598:	681b      	ldr	r3, [r3, #0]
    159a:	4618      	mov	r0, r3
    159c:	f000 fa46 	bl	1a2c <check_timer>
    15a0:	4602      	mov	r2, r0
    15a2:	4b77      	ldr	r3, [pc, #476]	; (1780 <MW_update+0x264>)
    15a4:	69db      	ldr	r3, [r3, #28]
    15a6:	429a      	cmp	r2, r3
    15a8:	d201      	bcs.n	15ae <MW_update+0x92>
    15aa:	2300      	movs	r3, #0
    15ac:	e0dd      	b.n	176a <MW_update+0x24e>
			//Otherwise dwell timer has elapsed
			action_taken = true;
    15ae:	2301      	movs	r3, #1
    15b0:	75fb      	strb	r3, [r7, #23]
			stop_timer(MW_TIMER);
    15b2:	4b74      	ldr	r3, [pc, #464]	; (1784 <MW_update+0x268>)
    15b4:	681b      	ldr	r3, [r3, #0]
    15b6:	4618      	mov	r0, r3
    15b8:	f000 fa26 	bl	1a08 <stop_timer>
			HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin); //toggles red LED
    15bc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
    15c0:	4871      	ldr	r0, [pc, #452]	; (1788 <MW_update+0x26c>)
    15c2:	f000 fadd 	bl	1b80 <__HAL_GPIO_TogglePin_veneer>
			HAL_GPIO_WritePin(MW_INVALID_GPIO_Port, MW_INVALID_Pin, GPIO_PIN_SET); //Sets MW_invalid pin high as about to change frequency
    15c6:	2201      	movs	r2, #1
    15c8:	2102      	movs	r1, #2
    15ca:	486f      	ldr	r0, [pc, #444]	; (1788 <MW_update+0x26c>)
    15cc:	f000 fac8 	bl	1b60 <__HAL_GPIO_WritePin_veneer>
			mw_sweep_settings.state = MW_STABILISING;
    15d0:	4b6b      	ldr	r3, [pc, #428]	; (1780 <MW_update+0x264>)
    15d2:	2202      	movs	r2, #2
    15d4:	701a      	strb	r2, [r3, #0]
			if (mw_sweep_settings.current_point == mw_sweep_settings.num_steps) { // All steps completed, tidy up and restart next sweep
    15d6:	4b6a      	ldr	r3, [pc, #424]	; (1780 <MW_update+0x264>)
    15d8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    15da:	4b69      	ldr	r3, [pc, #420]	; (1780 <MW_update+0x264>)
    15dc:	68db      	ldr	r3, [r3, #12]
    15de:	429a      	cmp	r2, r3
    15e0:	d15c      	bne.n	169c <MW_update+0x180>
				HAL_GPIO_WritePin(SCOPE_TRIG_OUT_GPIO_Port, SCOPE_TRIG_OUT_Pin, GPIO_PIN_SET); // Sets trigger output high
    15e2:	2201      	movs	r2, #1
    15e4:	2101      	movs	r1, #1
    15e6:	4869      	ldr	r0, [pc, #420]	; (178c <MW_update+0x270>)
    15e8:	f000 faba 	bl	1b60 <__HAL_GPIO_WritePin_veneer>
				sweep_period_us=check_timer(SWEEP_TIMER);
    15ec:	4b68      	ldr	r3, [pc, #416]	; (1790 <MW_update+0x274>)
    15ee:	681b      	ldr	r3, [r3, #0]
    15f0:	4618      	mov	r0, r3
    15f2:	f000 fa1b 	bl	1a2c <check_timer>
    15f6:	60b8      	str	r0, [r7, #8]
				stop_timer(SWEEP_TIMER);
    15f8:	4b65      	ldr	r3, [pc, #404]	; (1790 <MW_update+0x274>)
    15fa:	681b      	ldr	r3, [r3, #0]
    15fc:	4618      	mov	r0, r3
    15fe:	f000 fa03 	bl	1a08 <stop_timer>
				printf("Sweep complete in %.4g s. Expected %.4g s. %u samples\r\n", (double)(sweep_period_us)/1000000, mw_sweep_settings.sweep_period, sample_count);
    1602:	68bb      	ldr	r3, [r7, #8]
    1604:	ee07 3a90 	vmov	s15, r3
    1608:	eeb8 7b67 	vcvt.f64.u32	d7, s15
    160c:	ed9f 6b5a 	vldr	d6, [pc, #360]	; 1778 <MW_update+0x25c>
    1610:	ee87 5b06 	vdiv.f64	d5, d7, d6
    1614:	4b5a      	ldr	r3, [pc, #360]	; (1780 <MW_update+0x264>)
    1616:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
    161a:	495e      	ldr	r1, [pc, #376]	; (1794 <MW_update+0x278>)
    161c:	8809      	ldrh	r1, [r1, #0]
    161e:	b289      	uxth	r1, r1
    1620:	9102      	str	r1, [sp, #8]
    1622:	e9cd 2300 	strd	r2, r3, [sp]
    1626:	ec53 2b15 	vmov	r2, r3, d5
    162a:	485b      	ldr	r0, [pc, #364]	; (1798 <MW_update+0x27c>)
    162c:	f000 fa9c 	bl	1b68 <__printf_veneer>
				/* Check if the ADC registered the correct number of samples */
				uint16_t expected_samples = mw_sweep_settings.pop_cycles_per_point * (mw_sweep_settings.num_steps + 1);
    1630:	4b53      	ldr	r3, [pc, #332]	; (1780 <MW_update+0x264>)
    1632:	695b      	ldr	r3, [r3, #20]
    1634:	b29a      	uxth	r2, r3
    1636:	4b52      	ldr	r3, [pc, #328]	; (1780 <MW_update+0x264>)
    1638:	68db      	ldr	r3, [r3, #12]
    163a:	3301      	adds	r3, #1
    163c:	b29b      	uxth	r3, r3
    163e:	fb12 f303 	smulbb	r3, r2, r3
    1642:	80fb      	strh	r3, [r7, #6]
				uint16_t possible_samples = expected_samples + mw_sweep_settings.num_steps + 1;
    1644:	4b4e      	ldr	r3, [pc, #312]	; (1780 <MW_update+0x264>)
    1646:	68db      	ldr	r3, [r3, #12]
    1648:	b29a      	uxth	r2, r3
    164a:	88fb      	ldrh	r3, [r7, #6]
    164c:	4413      	add	r3, r2
    164e:	b29b      	uxth	r3, r3
    1650:	3301      	adds	r3, #1
    1652:	80bb      	strh	r3, [r7, #4]
//				printf("Sweep generated %u full POP cycles and registered %u samples\r\n", expected_samples, sample_count);
				if ((sample_count == expected_samples) || (sample_count == possible_samples)) {
    1654:	4b4f      	ldr	r3, [pc, #316]	; (1794 <MW_update+0x278>)
    1656:	881b      	ldrh	r3, [r3, #0]
    1658:	b29b      	uxth	r3, r3
    165a:	88fa      	ldrh	r2, [r7, #6]
    165c:	429a      	cmp	r2, r3
    165e:	d010      	beq.n	1682 <MW_update+0x166>
    1660:	4b4c      	ldr	r3, [pc, #304]	; (1794 <MW_update+0x278>)
    1662:	881b      	ldrh	r3, [r3, #0]
    1664:	b29b      	uxth	r3, r3
    1666:	88ba      	ldrh	r2, [r7, #4]
    1668:	429a      	cmp	r2, r3
    166a:	d00a      	beq.n	1682 <MW_update+0x166>
					#ifdef MW_VERBOSE
					printf("Sweep generated and successfully registered %u samples\r\n", sample_count);
					#endif //MW_VERBOSE
				} else {
					printf("Warning - sweep generated %u samples but %u registered\r\n", expected_samples, sample_count);
    166c:	88fb      	ldrh	r3, [r7, #6]
    166e:	4a49      	ldr	r2, [pc, #292]	; (1794 <MW_update+0x278>)
    1670:	8812      	ldrh	r2, [r2, #0]
    1672:	b292      	uxth	r2, r2
    1674:	4619      	mov	r1, r3
    1676:	4849      	ldr	r0, [pc, #292]	; (179c <MW_update+0x280>)
    1678:	f000 fa76 	bl	1b68 <__printf_veneer>
					printf("Timing of last sample is marginal\r\n");
    167c:	4848      	ldr	r0, [pc, #288]	; (17a0 <MW_update+0x284>)
    167e:	f000 fa87 	bl	1b90 <__puts_veneer>
//				printf("MW processing time: %lu us\r\n", measured_processing_time_us);
//				if ((double)(measured_processing_time_us)/MW_PROCESSING_TIME_US > 1.1) {
//					printf("Warning - measured MW processing time (%lu us)is larger than the %lu us expected\r\n", measured_processing_time_us, MW_PROCESSING_TIME_US);
//				}
				#endif //MW_VERBOSE
				if (mw_sweep_settings.sweep_mode == SWEEP_ONCE) {//have reached the end of a single sweep and should stop
    1682:	4b3f      	ldr	r3, [pc, #252]	; (1780 <MW_update+0x264>)
    1684:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
    1688:	2b02      	cmp	r3, #2
    168a:	d103      	bne.n	1694 <MW_update+0x178>
					mw_sweep_settings.state = MW_STOPPED;
    168c:	4b3c      	ldr	r3, [pc, #240]	; (1780 <MW_update+0x264>)
    168e:	2200      	movs	r2, #0
    1690:	701a      	strb	r2, [r3, #0]
						printf("Failure to program value to DAC \r\n");
						Error_Handler();
					}
				#endif //RAMP_DAC
			}
			break;
    1692:	e069      	b.n	1768 <MW_update+0x24c>
					start_MW_sweep(false); //restart the next MW sweep without updating mw_sweep_settings.sweep_mode
    1694:	2000      	movs	r0, #0
    1696:	f7ff fecb 	bl	1430 <start_MW_sweep>
			break;
    169a:	e065      	b.n	1768 <MW_update+0x24c>
				mw_sweep_settings.current_point++; //increment point counter
    169c:	4b38      	ldr	r3, [pc, #224]	; (1780 <MW_update+0x264>)
    169e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    16a0:	3301      	adds	r3, #1
    16a2:	4a37      	ldr	r2, [pc, #220]	; (1780 <MW_update+0x264>)
    16a4:	6253      	str	r3, [r2, #36]	; 0x24
				uint32_t local_NFRAC = mw_sweep_settings.NFRAC_start + mw_sweep_settings.step_size * mw_sweep_settings.current_point;
    16a6:	4b36      	ldr	r3, [pc, #216]	; (1780 <MW_update+0x264>)
    16a8:	689a      	ldr	r2, [r3, #8]
    16aa:	4b35      	ldr	r3, [pc, #212]	; (1780 <MW_update+0x264>)
    16ac:	691b      	ldr	r3, [r3, #16]
    16ae:	4934      	ldr	r1, [pc, #208]	; (1780 <MW_update+0x264>)
    16b0:	6a49      	ldr	r1, [r1, #36]	; 0x24
    16b2:	fb01 f303 	mul.w	r3, r1, r3
    16b6:	4413      	add	r3, r2
    16b8:	60fb      	str	r3, [r7, #12]
				set_freq_regs(mw_sweep_settings.NINT, local_NFRAC, mw_sweep_settings.k); //program new MW frequency
    16ba:	4b31      	ldr	r3, [pc, #196]	; (1780 <MW_update+0x264>)
    16bc:	685b      	ldr	r3, [r3, #4]
    16be:	4a30      	ldr	r2, [pc, #192]	; (1780 <MW_update+0x264>)
    16c0:	7852      	ldrb	r2, [r2, #1]
    16c2:	68f9      	ldr	r1, [r7, #12]
    16c4:	4618      	mov	r0, r3
    16c6:	f7ff fa13 	bl	af0 <set_freq_regs>
				start_timer(MW_TIMER); //Restart timer for MW stabilisation time
    16ca:	4b2e      	ldr	r3, [pc, #184]	; (1784 <MW_update+0x268>)
    16cc:	681b      	ldr	r3, [r3, #0]
    16ce:	4618      	mov	r0, r3
    16d0:	f000 f97c 	bl	19cc <start_timer>
			break;
    16d4:	e048      	b.n	1768 <MW_update+0x24c>

		case MW_CALIBRATE: //Measures the elapsed time taken for 101 samples (100 POP cycles)
			if (sample_count >= 100) {//100 or more POP cycles have elapsed
    16d6:	4b2f      	ldr	r3, [pc, #188]	; (1794 <MW_update+0x278>)
    16d8:	881b      	ldrh	r3, [r3, #0]
    16da:	b29b      	uxth	r3, r3
    16dc:	2b63      	cmp	r3, #99	; 0x63
    16de:	d942      	bls.n	1766 <MW_update+0x24a>
				uint32_t total_POP_cal_period = check_timer(MW_TIMER);
    16e0:	4b28      	ldr	r3, [pc, #160]	; (1784 <MW_update+0x268>)
    16e2:	681b      	ldr	r3, [r3, #0]
    16e4:	4618      	mov	r0, r3
    16e6:	f000 f9a1 	bl	1a2c <check_timer>
    16ea:	6138      	str	r0, [r7, #16]
				POP_period_us = (float)(total_POP_cal_period) / 100 + 0.5;
    16ec:	693b      	ldr	r3, [r7, #16]
    16ee:	ee07 3a90 	vmov	s15, r3
    16f2:	eeb8 7a67 	vcvt.f32.u32	s14, s15
    16f6:	eddf 6a2b 	vldr	s13, [pc, #172]	; 17a4 <MW_update+0x288>
    16fa:	eec7 7a26 	vdiv.f32	s15, s14, s13
    16fe:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
    1702:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
    1706:	ee37 7b06 	vadd.f64	d7, d7, d6
    170a:	eefc 7bc7 	vcvt.u32.f64	s15, d7
    170e:	ee17 2a90 	vmov	r2, s15
    1712:	4b25      	ldr	r3, [pc, #148]	; (17a8 <MW_update+0x28c>)
    1714:	601a      	str	r2, [r3, #0]
				stop_timer(MW_TIMER);
    1716:	4b1b      	ldr	r3, [pc, #108]	; (1784 <MW_update+0x268>)
    1718:	681b      	ldr	r3, [r3, #0]
    171a:	4618      	mov	r0, r3
    171c:	f000 f974 	bl	1a08 <stop_timer>
				printf("POP period, averaged over 100 cycles: %lu us\r\n", POP_period_us);
    1720:	4b21      	ldr	r3, [pc, #132]	; (17a8 <MW_update+0x28c>)
    1722:	681b      	ldr	r3, [r3, #0]
    1724:	4619      	mov	r1, r3
    1726:	4821      	ldr	r0, [pc, #132]	; (17ac <MW_update+0x290>)
    1728:	f000 fa1e 	bl	1b68 <__printf_veneer>
				action_taken = true;
    172c:	2301      	movs	r3, #1
    172e:	75fb      	strb	r3, [r7, #23]
				if (mw_sweep_settings.sweep_mode == POP_CAL_ONLY) {//have reached the end of calibration and should stop
    1730:	4b13      	ldr	r3, [pc, #76]	; (1780 <MW_update+0x264>)
    1732:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
    1736:	2b01      	cmp	r3, #1
    1738:	d103      	bne.n	1742 <MW_update+0x226>
					mw_sweep_settings.state = MW_STOPPED;
    173a:	4b11      	ldr	r3, [pc, #68]	; (1780 <MW_update+0x264>)
    173c:	2200      	movs	r2, #0
    173e:	701a      	strb	r2, [r3, #0]
				} else {
						start_MW_sweep(false); //start MW_sweep without updating mw_sweep_settings.sweep_mode
				}
			}
			break;
    1740:	e011      	b.n	1766 <MW_update+0x24a>
						start_MW_sweep(false); //start MW_sweep without updating mw_sweep_settings.sweep_mode
    1742:	2000      	movs	r0, #0
    1744:	f7ff fe74 	bl	1430 <start_MW_sweep>
			break;
    1748:	e00d      	b.n	1766 <MW_update+0x24a>

		default: // Other state
	       printf("MW_update has detected illegal state: %u \r\n", mw_sweep_settings.state);
    174a:	4b0d      	ldr	r3, [pc, #52]	; (1780 <MW_update+0x264>)
    174c:	781b      	ldrb	r3, [r3, #0]
    174e:	4619      	mov	r1, r3
    1750:	4817      	ldr	r0, [pc, #92]	; (17b0 <MW_update+0x294>)
    1752:	f000 fa09 	bl	1b68 <__printf_veneer>
	       printf("local version: %u \r\n", local_copy_of_MW_state);
    1756:	7dbb      	ldrb	r3, [r7, #22]
    1758:	4619      	mov	r1, r3
    175a:	4816      	ldr	r0, [pc, #88]	; (17b4 <MW_update+0x298>)
    175c:	f000 fa04 	bl	1b68 <__printf_veneer>
    1760:	e002      	b.n	1768 <MW_update+0x24c>
			break; //no action to take
    1762:	bf00      	nop
    1764:	e000      	b.n	1768 <MW_update+0x24c>
			break;
    1766:	bf00      	nop
	}
    return(action_taken);
    1768:	7dfb      	ldrb	r3, [r7, #23]
}
    176a:	4618      	mov	r0, r3
    176c:	3718      	adds	r7, #24
    176e:	46bd      	mov	sp, r7
    1770:	bd80      	pop	{r7, pc}
    1772:	bf00      	nop
    1774:	f3af 8000 	nop.w
    1778:	00000000 	.word	0x00000000
    177c:	412e8480 	.word	0x412e8480
    1780:	20000640 	.word	0x20000640
    1784:	2000001c 	.word	0x2000001c
    1788:	58020400 	.word	0x58020400
    178c:	58021800 	.word	0x58021800
    1790:	20000020 	.word	0x20000020
    1794:	200005fa 	.word	0x200005fa
    1798:	0801c830 	.word	0x0801c830
    179c:	0801c868 	.word	0x0801c868
    17a0:	0801c8a4 	.word	0x0801c8a4
    17a4:	42c80000 	.word	0x42c80000
    17a8:	200005fc 	.word	0x200005fc
    17ac:	0801c8c8 	.word	0x0801c8c8
    17b0:	0801c8f8 	.word	0x0801c8f8
    17b4:	0801c924 	.word	0x0801c924

000017b8 <MW_frequency_toggle>:
//}

/* Function to check MW settling time
 * Toggles between two MW frequencies
 */
void MW_frequency_toggle (const double f_one, const double f_two) {
    17b8:	b580      	push	{r7, lr}
    17ba:	b090      	sub	sp, #64	; 0x40
    17bc:	af02      	add	r7, sp, #8
    17be:	ed87 0b02 	vstr	d0, [r7, #8]
    17c2:	ed87 1b00 	vstr	d1, [r7]
	printf("MW frequency toggling experiment\r\n");
    17c6:	486a      	ldr	r0, [pc, #424]	; (1970 <MW_frequency_toggle+0x1b8>)
    17c8:	f000 f9e2 	bl	1b90 <__puts_veneer>
	printf("Toggling between %.10g and %.10g GHz\r\n", f_one/1000000000, f_two/1000000000);
    17cc:	ed97 7b02 	vldr	d7, [r7, #8]
    17d0:	ed9f 6b5f 	vldr	d6, [pc, #380]	; 1950 <MW_frequency_toggle+0x198>
    17d4:	ee87 4b06 	vdiv.f64	d4, d7, d6
    17d8:	ed97 6b00 	vldr	d6, [r7]
    17dc:	ed9f 5b5c 	vldr	d5, [pc, #368]	; 1950 <MW_frequency_toggle+0x198>
    17e0:	ee86 7b05 	vdiv.f64	d7, d6, d5
    17e4:	ed8d 7b00 	vstr	d7, [sp]
    17e8:	ec53 2b14 	vmov	r2, r3, d4
    17ec:	4861      	ldr	r0, [pc, #388]	; (1974 <MW_frequency_toggle+0x1bc>)
    17ee:	f000 f9bb 	bl	1b68 <__printf_veneer>

	/* For the k divider we need to find the smallest even integer or use a max of 62*/
	uint32_t k_one = VCO_MAX_FREQ / f_one;
    17f2:	ed9f 5b59 	vldr	d5, [pc, #356]	; 1958 <MW_frequency_toggle+0x1a0>
    17f6:	ed97 6b02 	vldr	d6, [r7, #8]
    17fa:	ee85 7b06 	vdiv.f64	d7, d5, d6
    17fe:	eefc 7bc7 	vcvt.u32.f64	s15, d7
    1802:	ee17 3a90 	vmov	r3, s15
    1806:	637b      	str	r3, [r7, #52]	; 0x34
	if (k_one != 1) {
    1808:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    180a:	2b01      	cmp	r3, #1
    180c:	d00b      	beq.n	1826 <MW_frequency_toggle+0x6e>
		while (k_one > 62 || k_one % 2) {
    180e:	e002      	b.n	1816 <MW_frequency_toggle+0x5e>
			k_one--;
    1810:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    1812:	3b01      	subs	r3, #1
    1814:	637b      	str	r3, [r7, #52]	; 0x34
		while (k_one > 62 || k_one % 2) {
    1816:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    1818:	2b3e      	cmp	r3, #62	; 0x3e
    181a:	d8f9      	bhi.n	1810 <MW_frequency_toggle+0x58>
    181c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    181e:	f003 0301 	and.w	r3, r3, #1
    1822:	2b00      	cmp	r3, #0
    1824:	d1f4      	bne.n	1810 <MW_frequency_toggle+0x58>
		}
	}
	uint32_t k_two = VCO_MAX_FREQ / f_two;
    1826:	ed9f 5b4c 	vldr	d5, [pc, #304]	; 1958 <MW_frequency_toggle+0x1a0>
    182a:	ed97 6b00 	vldr	d6, [r7]
    182e:	ee85 7b06 	vdiv.f64	d7, d5, d6
    1832:	eefc 7bc7 	vcvt.u32.f64	s15, d7
    1836:	ee17 3a90 	vmov	r3, s15
    183a:	633b      	str	r3, [r7, #48]	; 0x30
	if (k_two != 1) {
    183c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    183e:	2b01      	cmp	r3, #1
    1840:	d00b      	beq.n	185a <MW_frequency_toggle+0xa2>
		while (k_two > 62 || k_two % 2) {
    1842:	e002      	b.n	184a <MW_frequency_toggle+0x92>
			k_two--;
    1844:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    1846:	3b01      	subs	r3, #1
    1848:	633b      	str	r3, [r7, #48]	; 0x30
		while (k_two > 62 || k_two % 2) {
    184a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    184c:	2b3e      	cmp	r3, #62	; 0x3e
    184e:	d8f9      	bhi.n	1844 <MW_frequency_toggle+0x8c>
    1850:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    1852:	f003 0301 	and.w	r3, r3, #1
    1856:	2b00      	cmp	r3, #0
    1858:	d1f4      	bne.n	1844 <MW_frequency_toggle+0x8c>
		}
	}

	const double N_one = ((f_one * k_one) / REF_FREQ);
    185a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    185c:	ee07 3a90 	vmov	s15, r3
    1860:	eeb8 6b67 	vcvt.f64.u32	d6, s15
    1864:	ed97 7b02 	vldr	d7, [r7, #8]
    1868:	ee26 6b07 	vmul.f64	d6, d6, d7
    186c:	ed9f 5b3c 	vldr	d5, [pc, #240]	; 1960 <MW_frequency_toggle+0x1a8>
    1870:	ee86 7b05 	vdiv.f64	d7, d6, d5
    1874:	ed87 7b0a 	vstr	d7, [r7, #40]	; 0x28
	const double N_two = ((f_two * k_two) / REF_FREQ);
    1878:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    187a:	ee07 3a90 	vmov	s15, r3
    187e:	eeb8 6b67 	vcvt.f64.u32	d6, s15
    1882:	ed97 7b00 	vldr	d7, [r7]
    1886:	ee26 6b07 	vmul.f64	d6, d6, d7
    188a:	ed9f 5b35 	vldr	d5, [pc, #212]	; 1960 <MW_frequency_toggle+0x1a8>
    188e:	ee86 7b05 	vdiv.f64	d7, d6, d5
    1892:	ed87 7b08 	vstr	d7, [r7, #32]

	/* Extract the fractional and integer parts */
	const uint32_t N_one_INT = N_one;
    1896:	ed97 7b0a 	vldr	d7, [r7, #40]	; 0x28
    189a:	eefc 7bc7 	vcvt.u32.f64	s15, d7
    189e:	ee17 3a90 	vmov	r3, s15
    18a2:	61fb      	str	r3, [r7, #28]
	const uint32_t N_one_FRAC = ((N_one - N_one_INT) * (1 << 24)) + 0.5;
    18a4:	69fb      	ldr	r3, [r7, #28]
    18a6:	ee07 3a90 	vmov	s15, r3
    18aa:	eeb8 7b67 	vcvt.f64.u32	d7, s15
    18ae:	ed97 6b0a 	vldr	d6, [r7, #40]	; 0x28
    18b2:	ee36 7b47 	vsub.f64	d7, d6, d7
    18b6:	ed9f 6b2c 	vldr	d6, [pc, #176]	; 1968 <MW_frequency_toggle+0x1b0>
    18ba:	ee27 7b06 	vmul.f64	d7, d7, d6
    18be:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
    18c2:	ee37 7b06 	vadd.f64	d7, d7, d6
    18c6:	eefc 7bc7 	vcvt.u32.f64	s15, d7
    18ca:	ee17 3a90 	vmov	r3, s15
    18ce:	61bb      	str	r3, [r7, #24]
	const uint32_t N_two_INT = N_two;
    18d0:	ed97 7b08 	vldr	d7, [r7, #32]
    18d4:	eefc 7bc7 	vcvt.u32.f64	s15, d7
    18d8:	ee17 3a90 	vmov	r3, s15
    18dc:	617b      	str	r3, [r7, #20]
	const uint32_t N_two_FRAC = ((N_two - N_two_INT) * (1 << 24)) + 0.5;
    18de:	697b      	ldr	r3, [r7, #20]
    18e0:	ee07 3a90 	vmov	s15, r3
    18e4:	eeb8 7b67 	vcvt.f64.u32	d7, s15
    18e8:	ed97 6b08 	vldr	d6, [r7, #32]
    18ec:	ee36 7b47 	vsub.f64	d7, d6, d7
    18f0:	ed9f 6b1d 	vldr	d6, [pc, #116]	; 1968 <MW_frequency_toggle+0x1b0>
    18f4:	ee27 7b06 	vmul.f64	d7, d7, d6
    18f8:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
    18fc:	ee37 7b06 	vadd.f64	d7, d7, d6
    1900:	eefc 7bc7 	vcvt.u32.f64	s15, d7
    1904:	ee17 3a90 	vmov	r3, s15
    1908:	613b      	str	r3, [r7, #16]

	while (1) {
	set_freq_regs(N_one_INT, N_one_FRAC, k_one); //Program necessary values for f_one
    190a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
    190c:	69b9      	ldr	r1, [r7, #24]
    190e:	69f8      	ldr	r0, [r7, #28]
    1910:	f7ff f8ee 	bl	af0 <set_freq_regs>
	HAL_GPIO_WritePin(SCOPE_TRIG_OUT_GPIO_Port, SCOPE_TRIG_OUT_Pin, GPIO_PIN_RESET); // Sets trigger output low
    1914:	2200      	movs	r2, #0
    1916:	2101      	movs	r1, #1
    1918:	4817      	ldr	r0, [pc, #92]	; (1978 <MW_frequency_toggle+0x1c0>)
    191a:	f000 f921 	bl	1b60 <__HAL_GPIO_WritePin_veneer>
	timer_delay(SLOW_TIMER, 100); //10ms delay
    191e:	4b17      	ldr	r3, [pc, #92]	; (197c <MW_frequency_toggle+0x1c4>)
    1920:	681b      	ldr	r3, [r3, #0]
    1922:	2164      	movs	r1, #100	; 0x64
    1924:	4618      	mov	r0, r3
    1926:	f000 f88d 	bl	1a44 <timer_delay>
	set_freq_regs(N_two_INT, N_two_FRAC, k_two); //Program necessary values for f_two
    192a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
    192c:	6939      	ldr	r1, [r7, #16]
    192e:	6978      	ldr	r0, [r7, #20]
    1930:	f7ff f8de 	bl	af0 <set_freq_regs>
	HAL_GPIO_WritePin(SCOPE_TRIG_OUT_GPIO_Port, SCOPE_TRIG_OUT_Pin, GPIO_PIN_SET); // Sets trigger output high
    1934:	2201      	movs	r2, #1
    1936:	2101      	movs	r1, #1
    1938:	480f      	ldr	r0, [pc, #60]	; (1978 <MW_frequency_toggle+0x1c0>)
    193a:	f000 f911 	bl	1b60 <__HAL_GPIO_WritePin_veneer>
	timer_delay(SLOW_TIMER, 100); //10ms delay
    193e:	4b0f      	ldr	r3, [pc, #60]	; (197c <MW_frequency_toggle+0x1c4>)
    1940:	681b      	ldr	r3, [r3, #0]
    1942:	2164      	movs	r1, #100	; 0x64
    1944:	4618      	mov	r0, r3
    1946:	f000 f87d 	bl	1a44 <timer_delay>
	set_freq_regs(N_one_INT, N_one_FRAC, k_one); //Program necessary values for f_one
    194a:	e7de      	b.n	190a <MW_frequency_toggle+0x152>
    194c:	f3af 8000 	nop.w
    1950:	00000000 	.word	0x00000000
    1954:	41cdcd65 	.word	0x41cdcd65
    1958:	20000000 	.word	0x20000000
    195c:	41ee8c21 	.word	0x41ee8c21
    1960:	00000000 	.word	0x00000000
    1964:	4187d784 	.word	0x4187d784
    1968:	00000000 	.word	0x00000000
    196c:	41700000 	.word	0x41700000
    1970:	0801c93c 	.word	0x0801c93c
    1974:	0801c960 	.word	0x0801c960
    1978:	58021800 	.word	0x58021800
    197c:	20000018 	.word	0x20000018

00001980 <set_SDO_output>:
/* Selects SDO pin connectivity/functionality
 * By default, the SDO pin will output 'Lock detect' but can be connected
 * to other internal signals. See table 2.15 of HMC835 datasheet (v04.1113)
 * for more details all options
 */
 void set_SDO_output(const uint32_t GPO_setting) {
    1980:	b580      	push	{r7, lr}
    1982:	b084      	sub	sp, #16
    1984:	af00      	add	r7, sp, #0
    1986:	6078      	str	r0, [r7, #4]
	//Default output on SDO pin is 'Lock detect output', value 0x01
	//VCO divider is 0x0A
	//See table 2.15 of HMC835 datasheet for more details (v04.1113)
	uint32_t read_data = 0x0;
    1988:	2300      	movs	r3, #0
    198a:	60fb      	str	r3, [r7, #12]

	if (GPO_setting > 31) {
    198c:	687b      	ldr	r3, [r7, #4]
    198e:	2b1f      	cmp	r3, #31
    1990:	d904      	bls.n	199c <set_SDO_output+0x1c>
		printf("SDO pin value must be less that 32\r\n");
    1992:	480d      	ldr	r0, [pc, #52]	; (19c8 <set_SDO_output+0x48>)
    1994:	f000 f8fc 	bl	1b90 <__puts_veneer>
		Error_Handler();
    1998:	f000 f8d2 	bl	1b40 <__Error_Handler_veneer>
	}
	read_data = synth_readreg(GPO_REGISTER); // Get the current value.
    199c:	200f      	movs	r0, #15
    199e:	f7fe ff0d 	bl	7bc <synth_readreg>
    19a2:	60f8      	str	r0, [r7, #12]
	read_data &= 0xFFFFFFE0; // Zero the first 5 LSBs.
    19a4:	68fb      	ldr	r3, [r7, #12]
    19a6:	f023 031f 	bic.w	r3, r3, #31
    19aa:	60fb      	str	r3, [r7, #12]
	//read_data |= 0x0A; //Select VCO divider output
	read_data |= GPO_setting; //Select GPO output dependent on function input value
    19ac:	68fa      	ldr	r2, [r7, #12]
    19ae:	687b      	ldr	r3, [r7, #4]
    19b0:	4313      	orrs	r3, r2
    19b2:	60fb      	str	r3, [r7, #12]
	synth_writereg(read_data, GPO_REGISTER, 0x0, VERIFY); // Update the GPO register.
    19b4:	2301      	movs	r3, #1
    19b6:	2200      	movs	r2, #0
    19b8:	210f      	movs	r1, #15
    19ba:	68f8      	ldr	r0, [r7, #12]
    19bc:	f7fe fe84 	bl	6c8 <synth_writereg>
}
    19c0:	bf00      	nop
    19c2:	3710      	adds	r7, #16
    19c4:	46bd      	mov	sp, r7
    19c6:	bd80      	pop	{r7, pc}
    19c8:	0801c988 	.word	0x0801c988

000019cc <start_timer>:

/**
  * @brief  Starts a timer.
  * @retval uint32_t
  */
uint32_t start_timer(TIM_TypeDef * timer) {
    19cc:	b480      	push	{r7}
    19ce:	b083      	sub	sp, #12
    19d0:	af00      	add	r7, sp, #0
    19d2:	6078      	str	r0, [r7, #4]

	timer->CR1 &= ~(TIM_CR1_CEN);
    19d4:	687b      	ldr	r3, [r7, #4]
    19d6:	681b      	ldr	r3, [r3, #0]
    19d8:	f023 0201 	bic.w	r2, r3, #1
    19dc:	687b      	ldr	r3, [r7, #4]
    19de:	601a      	str	r2, [r3, #0]
	timer->EGR |= TIM_EGR_UG;  // Reset CNT and PSC
    19e0:	687b      	ldr	r3, [r7, #4]
    19e2:	695b      	ldr	r3, [r3, #20]
    19e4:	f043 0201 	orr.w	r2, r3, #1
    19e8:	687b      	ldr	r3, [r7, #4]
    19ea:	615a      	str	r2, [r3, #20]
	timer->CR1 |= TIM_CR1_CEN;
    19ec:	687b      	ldr	r3, [r7, #4]
    19ee:	681b      	ldr	r3, [r3, #0]
    19f0:	f043 0201 	orr.w	r2, r3, #1
    19f4:	687b      	ldr	r3, [r7, #4]
    19f6:	601a      	str	r2, [r3, #0]
	//printf("Started timer with returned CNT value: %ld \r\n", timer->CNT);
	return timer->CNT;
    19f8:	687b      	ldr	r3, [r7, #4]
    19fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
    19fc:	4618      	mov	r0, r3
    19fe:	370c      	adds	r7, #12
    1a00:	46bd      	mov	sp, r7
    1a02:	f85d 7b04 	ldr.w	r7, [sp], #4
    1a06:	4770      	bx	lr

00001a08 <stop_timer>:

/**
  * @brief  Stops a timer.
  * @retval uint32_t
  */
uint32_t stop_timer(TIM_TypeDef *timer) {
    1a08:	b480      	push	{r7}
    1a0a:	b083      	sub	sp, #12
    1a0c:	af00      	add	r7, sp, #0
    1a0e:	6078      	str	r0, [r7, #4]

	timer->CR1 &= ~(TIM_CR1_CEN);
    1a10:	687b      	ldr	r3, [r7, #4]
    1a12:	681b      	ldr	r3, [r3, #0]
    1a14:	f023 0201 	bic.w	r2, r3, #1
    1a18:	687b      	ldr	r3, [r7, #4]
    1a1a:	601a      	str	r2, [r3, #0]
	return timer->CNT;
    1a1c:	687b      	ldr	r3, [r7, #4]
    1a1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
    1a20:	4618      	mov	r0, r3
    1a22:	370c      	adds	r7, #12
    1a24:	46bd      	mov	sp, r7
    1a26:	f85d 7b04 	ldr.w	r7, [sp], #4
    1a2a:	4770      	bx	lr

00001a2c <check_timer>:
/**
  * @brief  Returns timer counter value
  * @param  Timer
  * @retval Counter value
  */
uint32_t check_timer(TIM_TypeDef *timer) {
    1a2c:	b480      	push	{r7}
    1a2e:	b083      	sub	sp, #12
    1a30:	af00      	add	r7, sp, #0
    1a32:	6078      	str	r0, [r7, #4]

	return timer->CNT;
    1a34:	687b      	ldr	r3, [r7, #4]
    1a36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
    1a38:	4618      	mov	r0, r3
    1a3a:	370c      	adds	r7, #12
    1a3c:	46bd      	mov	sp, r7
    1a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
    1a42:	4770      	bx	lr

00001a44 <timer_delay>:

/**
  * @brief  Uses a H/W timer to loop for the cycle count requested.
  */
void timer_delay(TIM_TypeDef *timer, const uint32_t delay_count){
    1a44:	b580      	push	{r7, lr}
    1a46:	b084      	sub	sp, #16
    1a48:	af00      	add	r7, sp, #0
    1a4a:	6078      	str	r0, [r7, #4]
    1a4c:	6039      	str	r1, [r7, #0]
	/* Note that we don't consider overflow.
	 * FAST_TIMER will take approximately 65 ms to overflow.
	 * SLOW_TIMER will take 650ms
	 * MW_TIMER and SWEEP_TIMER will take 71 minutes */

	uint32_t start = start_timer(timer);
    1a4e:	6878      	ldr	r0, [r7, #4]
    1a50:	f7ff ffbc 	bl	19cc <start_timer>
    1a54:	60f8      	str	r0, [r7, #12]
//	timer->EGR |= TIM_EGR_UG;  // Reset CNT and PSC
//	timer->CR1 |= TIM_CR1_CEN; // Enable the timer
//	uint32_t start = timer->CNT; // Get the start value of the timer

//	while((timer->CNT - start) < delay_count){} // Loop until delay_us has expired
	while(timer->CNT < delay_count){} // Loop until delay_us has expired
    1a56:	bf00      	nop
    1a58:	687b      	ldr	r3, [r7, #4]
    1a5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    1a5c:	683a      	ldr	r2, [r7, #0]
    1a5e:	429a      	cmp	r2, r3
    1a60:	d8fa      	bhi.n	1a58 <timer_delay+0x14>

	stop_timer(timer);
    1a62:	6878      	ldr	r0, [r7, #4]
    1a64:	f7ff ffd0 	bl	1a08 <stop_timer>
//	timer->CR1 &= ~(TIM_CR1_CEN); // Disable the timer

}
    1a68:	bf00      	nop
    1a6a:	3710      	adds	r7, #16
    1a6c:	46bd      	mov	sp, r7
    1a6e:	bd80      	pop	{r7, pc}

00001a70 <start_pop>:

	printf("POP cycle stopped!\r\n");

}

void start_pop() {
    1a70:	b580      	push	{r7, lr}
    1a72:	af00      	add	r7, sp, #0

	/* Timer A is the LASER enable, Timer E is the microwave pulse */
	if (HAL_HRTIM_WaveformOutputStart(&hhrtim,
    1a74:	f240 1103 	movw	r1, #259	; 0x103
    1a78:	480f      	ldr	r0, [pc, #60]	; (1ab8 <start_pop+0x48>)
    1a7a:	f000 f86d 	bl	1b58 <__HAL_HRTIM_WaveformOutputStart_veneer>
    1a7e:	4603      	mov	r3, r0
    1a80:	2b00      	cmp	r3, #0
    1a82:	d004      	beq.n	1a8e <start_pop+0x1e>
	HRTIM_OUTPUT_TA1 | HRTIM_OUTPUT_TA2 | HRTIM_OUTPUT_TE1) != HAL_OK) {
		printf("Failed to start POP!\r\n");
    1a84:	480d      	ldr	r0, [pc, #52]	; (1abc <start_pop+0x4c>)
    1a86:	f000 f883 	bl	1b90 <__puts_veneer>
		Error_Handler();
    1a8a:	f000 f859 	bl	1b40 <__Error_Handler_veneer>
		Error_Handler();
	}

#endif

	if (HAL_HRTIM_WaveformCounterStart_IT(&hhrtim,
    1a8e:	f44f 1108 	mov.w	r1, #2228224	; 0x220000
    1a92:	4809      	ldr	r0, [pc, #36]	; (1ab8 <start_pop+0x48>)
    1a94:	f000 f878 	bl	1b88 <__HAL_HRTIM_WaveformCountStart_IT_veneer>
    1a98:	4603      	mov	r3, r0
    1a9a:	2b00      	cmp	r3, #0
    1a9c:	d004      	beq.n	1aa8 <start_pop+0x38>
	HRTIM_TIMERID_TIMER_A | HRTIM_TIMERID_TIMER_E) != HAL_OK) {
		printf("POP failure point E!\r\n");
    1a9e:	4808      	ldr	r0, [pc, #32]	; (1ac0 <start_pop+0x50>)
    1aa0:	f000 f876 	bl	1b90 <__puts_veneer>
		Error_Handler();
    1aa4:	f000 f84c 	bl	1b40 <__Error_Handler_veneer>
	}

	pop_running = true;
    1aa8:	4b06      	ldr	r3, [pc, #24]	; (1ac4 <start_pop+0x54>)
    1aaa:	2201      	movs	r2, #1
    1aac:	701a      	strb	r2, [r3, #0]

	printf("POP cycle running!\r\n");
    1aae:	4806      	ldr	r0, [pc, #24]	; (1ac8 <start_pop+0x58>)
    1ab0:	f000 f86e 	bl	1b90 <__puts_veneer>

}
    1ab4:	bf00      	nop
    1ab6:	bd80      	pop	{r7, pc}
    1ab8:	200002d4 	.word	0x200002d4
    1abc:	0801c9ac 	.word	0x0801c9ac
    1ac0:	0801c9c4 	.word	0x0801c9c4
    1ac4:	20000690 	.word	0x20000690
    1ac8:	0801c9dc 	.word	0x0801c9dc

00001acc <stop_pop>:
void stop_pop() {
    1acc:	b580      	push	{r7, lr}
    1ace:	af00      	add	r7, sp, #0
	if (HAL_HRTIM_WaveformOutputStop(&hhrtim,
    1ad0:	f240 1103 	movw	r1, #259	; 0x103
    1ad4:	4813      	ldr	r0, [pc, #76]	; (1b24 <stop_pop+0x58>)
    1ad6:	f000 f84b 	bl	1b70 <__HAL_HRTIM_WaveformOutputStop_veneer>
    1ada:	4603      	mov	r3, r0
    1adc:	2b00      	cmp	r3, #0
    1ade:	d004      	beq.n	1aea <stop_pop+0x1e>
		printf("POP failure point A!\r\n");
    1ae0:	4811      	ldr	r0, [pc, #68]	; (1b28 <stop_pop+0x5c>)
    1ae2:	f000 f855 	bl	1b90 <__puts_veneer>
		Error_Handler();
    1ae6:	f000 f82b 	bl	1b40 <__Error_Handler_veneer>
	if (HAL_HRTIM_WaveformCounterStop_IT(&hhrtim,
    1aea:	f44f 1108 	mov.w	r1, #2228224	; 0x220000
    1aee:	480d      	ldr	r0, [pc, #52]	; (1b24 <stop_pop+0x58>)
    1af0:	f000 f842 	bl	1b78 <__HAL_HRTIM_WaveformCountStop_IT_veneer>
    1af4:	4603      	mov	r3, r0
    1af6:	2b00      	cmp	r3, #0
    1af8:	d004      	beq.n	1b04 <stop_pop+0x38>
		printf("POP failure point B!\r\n");
    1afa:	480c      	ldr	r0, [pc, #48]	; (1b2c <stop_pop+0x60>)
    1afc:	f000 f848 	bl	1b90 <__puts_veneer>
		Error_Handler();
    1b00:	f000 f81e 	bl	1b40 <__Error_Handler_veneer>
	pop_cycle_count = 0;
    1b04:	4b0a      	ldr	r3, [pc, #40]	; (1b30 <stop_pop+0x64>)
    1b06:	2200      	movs	r2, #0
    1b08:	601a      	str	r2, [r3, #0]
	pop_running = false;
    1b0a:	4b0a      	ldr	r3, [pc, #40]	; (1b34 <stop_pop+0x68>)
    1b0c:	2200      	movs	r2, #0
    1b0e:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, 0); //turn off amber LED
    1b10:	2200      	movs	r2, #0
    1b12:	2102      	movs	r1, #2
    1b14:	4808      	ldr	r0, [pc, #32]	; (1b38 <stop_pop+0x6c>)
    1b16:	f000 f823 	bl	1b60 <__HAL_GPIO_WritePin_veneer>
	printf("POP cycle stopped!\r\n");
    1b1a:	4808      	ldr	r0, [pc, #32]	; (1b3c <stop_pop+0x70>)
    1b1c:	f000 f838 	bl	1b90 <__puts_veneer>
}
    1b20:	bf00      	nop
    1b22:	bd80      	pop	{r7, pc}
    1b24:	200002d4 	.word	0x200002d4
    1b28:	0801c9f0 	.word	0x0801c9f0
    1b2c:	0801ca08 	.word	0x0801ca08
    1b30:	2000068c 	.word	0x2000068c
    1b34:	20000690 	.word	0x20000690
    1b38:	58021000 	.word	0x58021000
    1b3c:	0801ca20 	.word	0x0801ca20

00001b40 <__Error_Handler_veneer>:
    1b40:	f85f f000 	ldr.w	pc, [pc]	; 1b44 <__Error_Handler_veneer+0x4>
    1b44:	08003331 	.word	0x08003331

00001b48 <__HAL_GPIO_ReadPin_veneer>:
    1b48:	f85f f000 	ldr.w	pc, [pc]	; 1b4c <__HAL_GPIO_ReadPin_veneer+0x4>
    1b4c:	08007d6d 	.word	0x08007d6d

00001b50 <__HAL_Delay_veneer>:
    1b50:	f85f f000 	ldr.w	pc, [pc]	; 1b54 <__HAL_Delay_veneer+0x4>
    1b54:	080041c5 	.word	0x080041c5

00001b58 <__HAL_HRTIM_WaveformOutputStart_veneer>:
    1b58:	f85f f000 	ldr.w	pc, [pc]	; 1b5c <__HAL_HRTIM_WaveformOutputStart_veneer+0x4>
    1b5c:	0800845f 	.word	0x0800845f

00001b60 <__HAL_GPIO_WritePin_veneer>:
    1b60:	f85f f000 	ldr.w	pc, [pc]	; 1b64 <__HAL_GPIO_WritePin_veneer+0x4>
    1b64:	08007d9d 	.word	0x08007d9d

00001b68 <__printf_veneer>:
    1b68:	f85f f000 	ldr.w	pc, [pc]	; 1b6c <__printf_veneer+0x4>
    1b6c:	08019ef9 	.word	0x08019ef9

00001b70 <__HAL_HRTIM_WaveformOutputStop_veneer>:
    1b70:	f85f f000 	ldr.w	pc, [pc]	; 1b74 <__HAL_HRTIM_WaveformOutputStop_veneer+0x4>
    1b74:	080084b9 	.word	0x080084b9

00001b78 <__HAL_HRTIM_WaveformCountStop_IT_veneer>:
    1b78:	f85f f000 	ldr.w	pc, [pc]	; 1b7c <__HAL_HRTIM_WaveformCountStop_IT_veneer+0x4>
    1b7c:	080085f5 	.word	0x080085f5

00001b80 <__HAL_GPIO_TogglePin_veneer>:
    1b80:	f85f f000 	ldr.w	pc, [pc]	; 1b84 <__HAL_GPIO_TogglePin_veneer+0x4>
    1b84:	08007dcf 	.word	0x08007dcf

00001b88 <__HAL_HRTIM_WaveformCountStart_IT_veneer>:
    1b88:	f85f f000 	ldr.w	pc, [pc]	; 1b8c <__HAL_HRTIM_WaveformCountStart_IT_veneer+0x4>
    1b8c:	08008515 	.word	0x08008515

00001b90 <__puts_veneer>:
    1b90:	f85f f000 	ldr.w	pc, [pc]	; 1b94 <__puts_veneer+0x4>
    1b94:	08019fc5 	.word	0x08019fc5

00001b98 <__HAL_DAC_SetValue_veneer>:
    1b98:	f85f f000 	ldr.w	pc, [pc]	; 1b9c <__HAL_DAC_SetValue_veneer+0x4>
    1b9c:	08006145 	.word	0x08006145

Disassembly of section .text:

08001e40 <__do_global_dtors_aux>:
 8001e40:	b510      	push	{r4, lr}
 8001e42:	4c05      	ldr	r4, [pc, #20]	; (8001e58 <__do_global_dtors_aux+0x18>)
 8001e44:	7823      	ldrb	r3, [r4, #0]
 8001e46:	b933      	cbnz	r3, 8001e56 <__do_global_dtors_aux+0x16>
 8001e48:	4b04      	ldr	r3, [pc, #16]	; (8001e5c <__do_global_dtors_aux+0x1c>)
 8001e4a:	b113      	cbz	r3, 8001e52 <__do_global_dtors_aux+0x12>
 8001e4c:	4804      	ldr	r0, [pc, #16]	; (8001e60 <__do_global_dtors_aux+0x20>)
 8001e4e:	f3af 8000 	nop.w
 8001e52:	2301      	movs	r3, #1
 8001e54:	7023      	strb	r3, [r4, #0]
 8001e56:	bd10      	pop	{r4, pc}
 8001e58:	20000230 	.word	0x20000230
 8001e5c:	00000000 	.word	0x00000000
 8001e60:	0801be00 	.word	0x0801be00

08001e64 <frame_dummy>:
 8001e64:	b508      	push	{r3, lr}
 8001e66:	4b03      	ldr	r3, [pc, #12]	; (8001e74 <frame_dummy+0x10>)
 8001e68:	b11b      	cbz	r3, 8001e72 <frame_dummy+0xe>
 8001e6a:	4903      	ldr	r1, [pc, #12]	; (8001e78 <frame_dummy+0x14>)
 8001e6c:	4803      	ldr	r0, [pc, #12]	; (8001e7c <frame_dummy+0x18>)
 8001e6e:	f3af 8000 	nop.w
 8001e72:	bd08      	pop	{r3, pc}
 8001e74:	00000000 	.word	0x00000000
 8001e78:	20000234 	.word	0x20000234
 8001e7c:	0801be00 	.word	0x0801be00

08001e80 <memchr>:
 8001e80:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8001e84:	2a10      	cmp	r2, #16
 8001e86:	db2b      	blt.n	8001ee0 <memchr+0x60>
 8001e88:	f010 0f07 	tst.w	r0, #7
 8001e8c:	d008      	beq.n	8001ea0 <memchr+0x20>
 8001e8e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8001e92:	3a01      	subs	r2, #1
 8001e94:	428b      	cmp	r3, r1
 8001e96:	d02d      	beq.n	8001ef4 <memchr+0x74>
 8001e98:	f010 0f07 	tst.w	r0, #7
 8001e9c:	b342      	cbz	r2, 8001ef0 <memchr+0x70>
 8001e9e:	d1f6      	bne.n	8001e8e <memchr+0xe>
 8001ea0:	b4f0      	push	{r4, r5, r6, r7}
 8001ea2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8001ea6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 8001eaa:	f022 0407 	bic.w	r4, r2, #7
 8001eae:	f07f 0700 	mvns.w	r7, #0
 8001eb2:	2300      	movs	r3, #0
 8001eb4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8001eb8:	3c08      	subs	r4, #8
 8001eba:	ea85 0501 	eor.w	r5, r5, r1
 8001ebe:	ea86 0601 	eor.w	r6, r6, r1
 8001ec2:	fa85 f547 	uadd8	r5, r5, r7
 8001ec6:	faa3 f587 	sel	r5, r3, r7
 8001eca:	fa86 f647 	uadd8	r6, r6, r7
 8001ece:	faa5 f687 	sel	r6, r5, r7
 8001ed2:	b98e      	cbnz	r6, 8001ef8 <memchr+0x78>
 8001ed4:	d1ee      	bne.n	8001eb4 <memchr+0x34>
 8001ed6:	bcf0      	pop	{r4, r5, r6, r7}
 8001ed8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8001edc:	f002 0207 	and.w	r2, r2, #7
 8001ee0:	b132      	cbz	r2, 8001ef0 <memchr+0x70>
 8001ee2:	f810 3b01 	ldrb.w	r3, [r0], #1
 8001ee6:	3a01      	subs	r2, #1
 8001ee8:	ea83 0301 	eor.w	r3, r3, r1
 8001eec:	b113      	cbz	r3, 8001ef4 <memchr+0x74>
 8001eee:	d1f8      	bne.n	8001ee2 <memchr+0x62>
 8001ef0:	2000      	movs	r0, #0
 8001ef2:	4770      	bx	lr
 8001ef4:	3801      	subs	r0, #1
 8001ef6:	4770      	bx	lr
 8001ef8:	2d00      	cmp	r5, #0
 8001efa:	bf06      	itte	eq
 8001efc:	4635      	moveq	r5, r6
 8001efe:	3803      	subeq	r0, #3
 8001f00:	3807      	subne	r0, #7
 8001f02:	f015 0f01 	tst.w	r5, #1
 8001f06:	d107      	bne.n	8001f18 <memchr+0x98>
 8001f08:	3001      	adds	r0, #1
 8001f0a:	f415 7f80 	tst.w	r5, #256	; 0x100
 8001f0e:	bf02      	ittt	eq
 8001f10:	3001      	addeq	r0, #1
 8001f12:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8001f16:	3001      	addeq	r0, #1
 8001f18:	bcf0      	pop	{r4, r5, r6, r7}
 8001f1a:	3801      	subs	r0, #1
 8001f1c:	4770      	bx	lr
 8001f1e:	bf00      	nop

08001f20 <strlen>:
 8001f20:	4603      	mov	r3, r0
 8001f22:	f813 2b01 	ldrb.w	r2, [r3], #1
 8001f26:	2a00      	cmp	r2, #0
 8001f28:	d1fb      	bne.n	8001f22 <strlen+0x2>
 8001f2a:	1a18      	subs	r0, r3, r0
 8001f2c:	3801      	subs	r0, #1
 8001f2e:	4770      	bx	lr

08001f30 <__aeabi_uldivmod>:
 8001f30:	b953      	cbnz	r3, 8001f48 <__aeabi_uldivmod+0x18>
 8001f32:	b94a      	cbnz	r2, 8001f48 <__aeabi_uldivmod+0x18>
 8001f34:	2900      	cmp	r1, #0
 8001f36:	bf08      	it	eq
 8001f38:	2800      	cmpeq	r0, #0
 8001f3a:	bf1c      	itt	ne
 8001f3c:	f04f 31ff 	movne.w	r1, #4294967295
 8001f40:	f04f 30ff 	movne.w	r0, #4294967295
 8001f44:	f000 b970 	b.w	8002228 <__aeabi_idiv0>
 8001f48:	f1ad 0c08 	sub.w	ip, sp, #8
 8001f4c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8001f50:	f000 f806 	bl	8001f60 <__udivmoddi4>
 8001f54:	f8dd e004 	ldr.w	lr, [sp, #4]
 8001f58:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8001f5c:	b004      	add	sp, #16
 8001f5e:	4770      	bx	lr

08001f60 <__udivmoddi4>:
 8001f60:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001f64:	9e08      	ldr	r6, [sp, #32]
 8001f66:	460d      	mov	r5, r1
 8001f68:	4604      	mov	r4, r0
 8001f6a:	460f      	mov	r7, r1
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d14a      	bne.n	8002006 <__udivmoddi4+0xa6>
 8001f70:	428a      	cmp	r2, r1
 8001f72:	4694      	mov	ip, r2
 8001f74:	d965      	bls.n	8002042 <__udivmoddi4+0xe2>
 8001f76:	fab2 f382 	clz	r3, r2
 8001f7a:	b143      	cbz	r3, 8001f8e <__udivmoddi4+0x2e>
 8001f7c:	fa02 fc03 	lsl.w	ip, r2, r3
 8001f80:	f1c3 0220 	rsb	r2, r3, #32
 8001f84:	409f      	lsls	r7, r3
 8001f86:	fa20 f202 	lsr.w	r2, r0, r2
 8001f8a:	4317      	orrs	r7, r2
 8001f8c:	409c      	lsls	r4, r3
 8001f8e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8001f92:	fa1f f58c 	uxth.w	r5, ip
 8001f96:	fbb7 f1fe 	udiv	r1, r7, lr
 8001f9a:	0c22      	lsrs	r2, r4, #16
 8001f9c:	fb0e 7711 	mls	r7, lr, r1, r7
 8001fa0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8001fa4:	fb01 f005 	mul.w	r0, r1, r5
 8001fa8:	4290      	cmp	r0, r2
 8001faa:	d90a      	bls.n	8001fc2 <__udivmoddi4+0x62>
 8001fac:	eb1c 0202 	adds.w	r2, ip, r2
 8001fb0:	f101 37ff 	add.w	r7, r1, #4294967295
 8001fb4:	f080 811c 	bcs.w	80021f0 <__udivmoddi4+0x290>
 8001fb8:	4290      	cmp	r0, r2
 8001fba:	f240 8119 	bls.w	80021f0 <__udivmoddi4+0x290>
 8001fbe:	3902      	subs	r1, #2
 8001fc0:	4462      	add	r2, ip
 8001fc2:	1a12      	subs	r2, r2, r0
 8001fc4:	b2a4      	uxth	r4, r4
 8001fc6:	fbb2 f0fe 	udiv	r0, r2, lr
 8001fca:	fb0e 2210 	mls	r2, lr, r0, r2
 8001fce:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8001fd2:	fb00 f505 	mul.w	r5, r0, r5
 8001fd6:	42a5      	cmp	r5, r4
 8001fd8:	d90a      	bls.n	8001ff0 <__udivmoddi4+0x90>
 8001fda:	eb1c 0404 	adds.w	r4, ip, r4
 8001fde:	f100 32ff 	add.w	r2, r0, #4294967295
 8001fe2:	f080 8107 	bcs.w	80021f4 <__udivmoddi4+0x294>
 8001fe6:	42a5      	cmp	r5, r4
 8001fe8:	f240 8104 	bls.w	80021f4 <__udivmoddi4+0x294>
 8001fec:	4464      	add	r4, ip
 8001fee:	3802      	subs	r0, #2
 8001ff0:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8001ff4:	1b64      	subs	r4, r4, r5
 8001ff6:	2100      	movs	r1, #0
 8001ff8:	b11e      	cbz	r6, 8002002 <__udivmoddi4+0xa2>
 8001ffa:	40dc      	lsrs	r4, r3
 8001ffc:	2300      	movs	r3, #0
 8001ffe:	e9c6 4300 	strd	r4, r3, [r6]
 8002002:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002006:	428b      	cmp	r3, r1
 8002008:	d908      	bls.n	800201c <__udivmoddi4+0xbc>
 800200a:	2e00      	cmp	r6, #0
 800200c:	f000 80ed 	beq.w	80021ea <__udivmoddi4+0x28a>
 8002010:	2100      	movs	r1, #0
 8002012:	e9c6 0500 	strd	r0, r5, [r6]
 8002016:	4608      	mov	r0, r1
 8002018:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800201c:	fab3 f183 	clz	r1, r3
 8002020:	2900      	cmp	r1, #0
 8002022:	d149      	bne.n	80020b8 <__udivmoddi4+0x158>
 8002024:	42ab      	cmp	r3, r5
 8002026:	d302      	bcc.n	800202e <__udivmoddi4+0xce>
 8002028:	4282      	cmp	r2, r0
 800202a:	f200 80f8 	bhi.w	800221e <__udivmoddi4+0x2be>
 800202e:	1a84      	subs	r4, r0, r2
 8002030:	eb65 0203 	sbc.w	r2, r5, r3
 8002034:	2001      	movs	r0, #1
 8002036:	4617      	mov	r7, r2
 8002038:	2e00      	cmp	r6, #0
 800203a:	d0e2      	beq.n	8002002 <__udivmoddi4+0xa2>
 800203c:	e9c6 4700 	strd	r4, r7, [r6]
 8002040:	e7df      	b.n	8002002 <__udivmoddi4+0xa2>
 8002042:	b902      	cbnz	r2, 8002046 <__udivmoddi4+0xe6>
 8002044:	deff      	udf	#255	; 0xff
 8002046:	fab2 f382 	clz	r3, r2
 800204a:	2b00      	cmp	r3, #0
 800204c:	f040 8090 	bne.w	8002170 <__udivmoddi4+0x210>
 8002050:	1a8a      	subs	r2, r1, r2
 8002052:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8002056:	fa1f fe8c 	uxth.w	lr, ip
 800205a:	2101      	movs	r1, #1
 800205c:	fbb2 f5f7 	udiv	r5, r2, r7
 8002060:	fb07 2015 	mls	r0, r7, r5, r2
 8002064:	0c22      	lsrs	r2, r4, #16
 8002066:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800206a:	fb0e f005 	mul.w	r0, lr, r5
 800206e:	4290      	cmp	r0, r2
 8002070:	d908      	bls.n	8002084 <__udivmoddi4+0x124>
 8002072:	eb1c 0202 	adds.w	r2, ip, r2
 8002076:	f105 38ff 	add.w	r8, r5, #4294967295
 800207a:	d202      	bcs.n	8002082 <__udivmoddi4+0x122>
 800207c:	4290      	cmp	r0, r2
 800207e:	f200 80cb 	bhi.w	8002218 <__udivmoddi4+0x2b8>
 8002082:	4645      	mov	r5, r8
 8002084:	1a12      	subs	r2, r2, r0
 8002086:	b2a4      	uxth	r4, r4
 8002088:	fbb2 f0f7 	udiv	r0, r2, r7
 800208c:	fb07 2210 	mls	r2, r7, r0, r2
 8002090:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8002094:	fb0e fe00 	mul.w	lr, lr, r0
 8002098:	45a6      	cmp	lr, r4
 800209a:	d908      	bls.n	80020ae <__udivmoddi4+0x14e>
 800209c:	eb1c 0404 	adds.w	r4, ip, r4
 80020a0:	f100 32ff 	add.w	r2, r0, #4294967295
 80020a4:	d202      	bcs.n	80020ac <__udivmoddi4+0x14c>
 80020a6:	45a6      	cmp	lr, r4
 80020a8:	f200 80bb 	bhi.w	8002222 <__udivmoddi4+0x2c2>
 80020ac:	4610      	mov	r0, r2
 80020ae:	eba4 040e 	sub.w	r4, r4, lr
 80020b2:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80020b6:	e79f      	b.n	8001ff8 <__udivmoddi4+0x98>
 80020b8:	f1c1 0720 	rsb	r7, r1, #32
 80020bc:	408b      	lsls	r3, r1
 80020be:	fa22 fc07 	lsr.w	ip, r2, r7
 80020c2:	ea4c 0c03 	orr.w	ip, ip, r3
 80020c6:	fa05 f401 	lsl.w	r4, r5, r1
 80020ca:	fa20 f307 	lsr.w	r3, r0, r7
 80020ce:	40fd      	lsrs	r5, r7
 80020d0:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80020d4:	4323      	orrs	r3, r4
 80020d6:	fbb5 f8f9 	udiv	r8, r5, r9
 80020da:	fa1f fe8c 	uxth.w	lr, ip
 80020de:	fb09 5518 	mls	r5, r9, r8, r5
 80020e2:	0c1c      	lsrs	r4, r3, #16
 80020e4:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80020e8:	fb08 f50e 	mul.w	r5, r8, lr
 80020ec:	42a5      	cmp	r5, r4
 80020ee:	fa02 f201 	lsl.w	r2, r2, r1
 80020f2:	fa00 f001 	lsl.w	r0, r0, r1
 80020f6:	d90b      	bls.n	8002110 <__udivmoddi4+0x1b0>
 80020f8:	eb1c 0404 	adds.w	r4, ip, r4
 80020fc:	f108 3aff 	add.w	sl, r8, #4294967295
 8002100:	f080 8088 	bcs.w	8002214 <__udivmoddi4+0x2b4>
 8002104:	42a5      	cmp	r5, r4
 8002106:	f240 8085 	bls.w	8002214 <__udivmoddi4+0x2b4>
 800210a:	f1a8 0802 	sub.w	r8, r8, #2
 800210e:	4464      	add	r4, ip
 8002110:	1b64      	subs	r4, r4, r5
 8002112:	b29d      	uxth	r5, r3
 8002114:	fbb4 f3f9 	udiv	r3, r4, r9
 8002118:	fb09 4413 	mls	r4, r9, r3, r4
 800211c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8002120:	fb03 fe0e 	mul.w	lr, r3, lr
 8002124:	45a6      	cmp	lr, r4
 8002126:	d908      	bls.n	800213a <__udivmoddi4+0x1da>
 8002128:	eb1c 0404 	adds.w	r4, ip, r4
 800212c:	f103 35ff 	add.w	r5, r3, #4294967295
 8002130:	d26c      	bcs.n	800220c <__udivmoddi4+0x2ac>
 8002132:	45a6      	cmp	lr, r4
 8002134:	d96a      	bls.n	800220c <__udivmoddi4+0x2ac>
 8002136:	3b02      	subs	r3, #2
 8002138:	4464      	add	r4, ip
 800213a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800213e:	fba3 9502 	umull	r9, r5, r3, r2
 8002142:	eba4 040e 	sub.w	r4, r4, lr
 8002146:	42ac      	cmp	r4, r5
 8002148:	46c8      	mov	r8, r9
 800214a:	46ae      	mov	lr, r5
 800214c:	d356      	bcc.n	80021fc <__udivmoddi4+0x29c>
 800214e:	d053      	beq.n	80021f8 <__udivmoddi4+0x298>
 8002150:	b156      	cbz	r6, 8002168 <__udivmoddi4+0x208>
 8002152:	ebb0 0208 	subs.w	r2, r0, r8
 8002156:	eb64 040e 	sbc.w	r4, r4, lr
 800215a:	fa04 f707 	lsl.w	r7, r4, r7
 800215e:	40ca      	lsrs	r2, r1
 8002160:	40cc      	lsrs	r4, r1
 8002162:	4317      	orrs	r7, r2
 8002164:	e9c6 7400 	strd	r7, r4, [r6]
 8002168:	4618      	mov	r0, r3
 800216a:	2100      	movs	r1, #0
 800216c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002170:	f1c3 0120 	rsb	r1, r3, #32
 8002174:	fa02 fc03 	lsl.w	ip, r2, r3
 8002178:	fa20 f201 	lsr.w	r2, r0, r1
 800217c:	fa25 f101 	lsr.w	r1, r5, r1
 8002180:	409d      	lsls	r5, r3
 8002182:	432a      	orrs	r2, r5
 8002184:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8002188:	fa1f fe8c 	uxth.w	lr, ip
 800218c:	fbb1 f0f7 	udiv	r0, r1, r7
 8002190:	fb07 1510 	mls	r5, r7, r0, r1
 8002194:	0c11      	lsrs	r1, r2, #16
 8002196:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800219a:	fb00 f50e 	mul.w	r5, r0, lr
 800219e:	428d      	cmp	r5, r1
 80021a0:	fa04 f403 	lsl.w	r4, r4, r3
 80021a4:	d908      	bls.n	80021b8 <__udivmoddi4+0x258>
 80021a6:	eb1c 0101 	adds.w	r1, ip, r1
 80021aa:	f100 38ff 	add.w	r8, r0, #4294967295
 80021ae:	d22f      	bcs.n	8002210 <__udivmoddi4+0x2b0>
 80021b0:	428d      	cmp	r5, r1
 80021b2:	d92d      	bls.n	8002210 <__udivmoddi4+0x2b0>
 80021b4:	3802      	subs	r0, #2
 80021b6:	4461      	add	r1, ip
 80021b8:	1b49      	subs	r1, r1, r5
 80021ba:	b292      	uxth	r2, r2
 80021bc:	fbb1 f5f7 	udiv	r5, r1, r7
 80021c0:	fb07 1115 	mls	r1, r7, r5, r1
 80021c4:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80021c8:	fb05 f10e 	mul.w	r1, r5, lr
 80021cc:	4291      	cmp	r1, r2
 80021ce:	d908      	bls.n	80021e2 <__udivmoddi4+0x282>
 80021d0:	eb1c 0202 	adds.w	r2, ip, r2
 80021d4:	f105 38ff 	add.w	r8, r5, #4294967295
 80021d8:	d216      	bcs.n	8002208 <__udivmoddi4+0x2a8>
 80021da:	4291      	cmp	r1, r2
 80021dc:	d914      	bls.n	8002208 <__udivmoddi4+0x2a8>
 80021de:	3d02      	subs	r5, #2
 80021e0:	4462      	add	r2, ip
 80021e2:	1a52      	subs	r2, r2, r1
 80021e4:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80021e8:	e738      	b.n	800205c <__udivmoddi4+0xfc>
 80021ea:	4631      	mov	r1, r6
 80021ec:	4630      	mov	r0, r6
 80021ee:	e708      	b.n	8002002 <__udivmoddi4+0xa2>
 80021f0:	4639      	mov	r1, r7
 80021f2:	e6e6      	b.n	8001fc2 <__udivmoddi4+0x62>
 80021f4:	4610      	mov	r0, r2
 80021f6:	e6fb      	b.n	8001ff0 <__udivmoddi4+0x90>
 80021f8:	4548      	cmp	r0, r9
 80021fa:	d2a9      	bcs.n	8002150 <__udivmoddi4+0x1f0>
 80021fc:	ebb9 0802 	subs.w	r8, r9, r2
 8002200:	eb65 0e0c 	sbc.w	lr, r5, ip
 8002204:	3b01      	subs	r3, #1
 8002206:	e7a3      	b.n	8002150 <__udivmoddi4+0x1f0>
 8002208:	4645      	mov	r5, r8
 800220a:	e7ea      	b.n	80021e2 <__udivmoddi4+0x282>
 800220c:	462b      	mov	r3, r5
 800220e:	e794      	b.n	800213a <__udivmoddi4+0x1da>
 8002210:	4640      	mov	r0, r8
 8002212:	e7d1      	b.n	80021b8 <__udivmoddi4+0x258>
 8002214:	46d0      	mov	r8, sl
 8002216:	e77b      	b.n	8002110 <__udivmoddi4+0x1b0>
 8002218:	3d02      	subs	r5, #2
 800221a:	4462      	add	r2, ip
 800221c:	e732      	b.n	8002084 <__udivmoddi4+0x124>
 800221e:	4608      	mov	r0, r1
 8002220:	e70a      	b.n	8002038 <__udivmoddi4+0xd8>
 8002222:	4464      	add	r4, ip
 8002224:	3802      	subs	r0, #2
 8002226:	e742      	b.n	80020ae <__udivmoddi4+0x14e>

08002228 <__aeabi_idiv0>:
 8002228:	4770      	bx	lr
 800222a:	bf00      	nop

0800222c <__io_putchar>:
PUTCHAR_PROTOTYPE {
 800222c:	b580      	push	{r7, lr}
 800222e:	b082      	sub	sp, #8
 8002230:	af00      	add	r7, sp, #0
 8002232:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart3, (uint8_t*) &ch, 1, 0xFFFF);
 8002234:	1d39      	adds	r1, r7, #4
 8002236:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800223a:	2201      	movs	r2, #1
 800223c:	4803      	ldr	r0, [pc, #12]	; (800224c <__io_putchar+0x20>)
 800223e:	f00b fe1d 	bl	800de7c <HAL_UART_Transmit>
	return ch;
 8002242:	687b      	ldr	r3, [r7, #4]
}
 8002244:	4618      	mov	r0, r3
 8002246:	3708      	adds	r7, #8
 8002248:	46bd      	mov	sp, r7
 800224a:	bd80      	pop	{r7, pc}
 800224c:	20000564 	.word	0x20000564

08002250 <main>:
{
 8002250:	b580      	push	{r7, lr}
 8002252:	b084      	sub	sp, #16
 8002254:	af00      	add	r7, sp, #0
  memcpy(&_sitcm, &_siitcm, ((void*) &_eitcm - (void*) &_sitcm));
 8002256:	4ab0      	ldr	r2, [pc, #704]	; (8002518 <main+0x2c8>)
 8002258:	4bb0      	ldr	r3, [pc, #704]	; (800251c <main+0x2cc>)
 800225a:	1ad3      	subs	r3, r2, r3
 800225c:	461a      	mov	r2, r3
 800225e:	49b0      	ldr	r1, [pc, #704]	; (8002520 <main+0x2d0>)
 8002260:	48ae      	ldr	r0, [pc, #696]	; (800251c <main+0x2cc>)
 8002262:	f018 f818 	bl	801a296 <memcpy>
  MPU_Config();
 8002266:	f001 f811 	bl	800328c <MPU_Config>
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 800226a:	4bae      	ldr	r3, [pc, #696]	; (8002524 <main+0x2d4>)
 800226c:	695b      	ldr	r3, [r3, #20]
 800226e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002272:	2b00      	cmp	r3, #0
 8002274:	d11b      	bne.n	80022ae <main+0x5e>
  __ASM volatile ("dsb 0xF":::"memory");
 8002276:	f3bf 8f4f 	dsb	sy
}
 800227a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800227c:	f3bf 8f6f 	isb	sy
}
 8002280:	bf00      	nop

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8002282:	4ba8      	ldr	r3, [pc, #672]	; (8002524 <main+0x2d4>)
 8002284:	2200      	movs	r2, #0
 8002286:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 800228a:	f3bf 8f4f 	dsb	sy
}
 800228e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8002290:	f3bf 8f6f 	isb	sy
}
 8002294:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8002296:	4ba3      	ldr	r3, [pc, #652]	; (8002524 <main+0x2d4>)
 8002298:	695b      	ldr	r3, [r3, #20]
 800229a:	4aa2      	ldr	r2, [pc, #648]	; (8002524 <main+0x2d4>)
 800229c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80022a0:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80022a2:	f3bf 8f4f 	dsb	sy
}
 80022a6:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80022a8:	f3bf 8f6f 	isb	sy
}
 80022ac:	e000      	b.n	80022b0 <main+0x60>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 80022ae:	bf00      	nop
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 80022b0:	4b9c      	ldr	r3, [pc, #624]	; (8002524 <main+0x2d4>)
 80022b2:	695b      	ldr	r3, [r3, #20]
 80022b4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d138      	bne.n	800232e <main+0xde>

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 80022bc:	4b99      	ldr	r3, [pc, #612]	; (8002524 <main+0x2d4>)
 80022be:	2200      	movs	r2, #0
 80022c0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 80022c4:	f3bf 8f4f 	dsb	sy
}
 80022c8:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 80022ca:	4b96      	ldr	r3, [pc, #600]	; (8002524 <main+0x2d4>)
 80022cc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80022d0:	60fb      	str	r3, [r7, #12]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	0b5b      	lsrs	r3, r3, #13
 80022d6:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80022da:	60bb      	str	r3, [r7, #8]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	08db      	lsrs	r3, r3, #3
 80022e0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80022e4:	607b      	str	r3, [r7, #4]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80022e6:	68bb      	ldr	r3, [r7, #8]
 80022e8:	015a      	lsls	r2, r3, #5
 80022ea:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 80022ee:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 80022f0:	687a      	ldr	r2, [r7, #4]
 80022f2:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80022f4:	498b      	ldr	r1, [pc, #556]	; (8002524 <main+0x2d4>)
 80022f6:	4313      	orrs	r3, r2
 80022f8:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	1e5a      	subs	r2, r3, #1
 8002300:	607a      	str	r2, [r7, #4]
 8002302:	2b00      	cmp	r3, #0
 8002304:	d1ef      	bne.n	80022e6 <main+0x96>
    } while(sets-- != 0U);
 8002306:	68bb      	ldr	r3, [r7, #8]
 8002308:	1e5a      	subs	r2, r3, #1
 800230a:	60ba      	str	r2, [r7, #8]
 800230c:	2b00      	cmp	r3, #0
 800230e:	d1e5      	bne.n	80022dc <main+0x8c>
  __ASM volatile ("dsb 0xF":::"memory");
 8002310:	f3bf 8f4f 	dsb	sy
}
 8002314:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8002316:	4b83      	ldr	r3, [pc, #524]	; (8002524 <main+0x2d4>)
 8002318:	695b      	ldr	r3, [r3, #20]
 800231a:	4a82      	ldr	r2, [pc, #520]	; (8002524 <main+0x2d4>)
 800231c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002320:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8002322:	f3bf 8f4f 	dsb	sy
}
 8002326:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8002328:	f3bf 8f6f 	isb	sy
}
 800232c:	e000      	b.n	8002330 <main+0xe0>
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 800232e:	bf00      	nop
  HAL_Init();
 8002330:	f001 feb6 	bl	80040a0 <HAL_Init>
  SystemClock_Config();
 8002334:	f000 f928 	bl	8002588 <SystemClock_Config>
  MX_GPIO_Init();
 8002338:	f000 fdde 	bl	8002ef8 <MX_GPIO_Init>
  MX_LPTIM1_Init();
 800233c:	f000 fbd2 	bl	8002ae4 <MX_LPTIM1_Init>
  MX_DAC1_Init();
 8002340:	f000 fa42 	bl	80027c8 <MX_DAC1_Init>
  MX_USART3_UART_Init();
 8002344:	f000 fd8a 	bl	8002e5c <MX_USART3_UART_Init>
  MX_TIM3_Init();
 8002348:	f000 fc9c 	bl	8002c84 <MX_TIM3_Init>
  MX_TIM1_Init();
 800234c:	f000 fbf8 	bl	8002b40 <MX_TIM1_Init>
  MX_HRTIM_Init();
 8002350:	f000 fa76 	bl	8002840 <MX_HRTIM_Init>
  MX_ADC3_Init();
 8002354:	f000 f9d6 	bl	8002704 <MX_ADC3_Init>
  MX_LWIP_Init();
 8002358:	f00c fea4 	bl	800f0a4 <MX_LWIP_Init>
  MX_TIM2_Init();
 800235c:	f000 fc44 	bl	8002be8 <MX_TIM2_Init>
  MX_TIM5_Init();
 8002360:	f000 fd2e 	bl	8002dc0 <MX_TIM5_Init>
  MX_TIM4_Init();
 8002364:	f000 fcdc 	bl	8002d20 <MX_TIM4_Init>
  printf("\033c"); //clears screen
 8002368:	486f      	ldr	r0, [pc, #444]	; (8002528 <main+0x2d8>)
 800236a:	f017 fdc5 	bl	8019ef8 <iprintf>
  printf("Atomic Clock - Source __TIMESTAMP__: %s\r\n", __TIMESTAMP__);
 800236e:	496f      	ldr	r1, [pc, #444]	; (800252c <main+0x2dc>)
 8002370:	486f      	ldr	r0, [pc, #444]	; (8002530 <main+0x2e0>)
 8002372:	f017 fdc1 	bl	8019ef8 <iprintf>
		if (init_synthesiser(MW_power) != SUCCESS) {
 8002376:	4b6f      	ldr	r3, [pc, #444]	; (8002534 <main+0x2e4>)
 8002378:	781b      	ldrb	r3, [r3, #0]
 800237a:	4618      	mov	r0, r3
 800237c:	f019 fd4c 	bl	801be18 <__init_synthesiser_veneer>
 8002380:	4603      	mov	r3, r0
 8002382:	2b00      	cmp	r3, #0
 8002384:	d004      	beq.n	8002390 <main+0x140>
			printf("Synthesiser initialisation failed!\r\n");
 8002386:	486c      	ldr	r0, [pc, #432]	; (8002538 <main+0x2e8>)
 8002388:	f017 fe1c 	bl	8019fc4 <puts>
			Error_Handler();
 800238c:	f000 ffd0 	bl	8003330 <Error_Handler>
			printf("MW power setting (LO2GAIN): 0x%x \r\n", MW_power);
 8002390:	4b68      	ldr	r3, [pc, #416]	; (8002534 <main+0x2e4>)
 8002392:	781b      	ldrb	r3, [r3, #0]
 8002394:	4619      	mov	r1, r3
 8002396:	4869      	ldr	r0, [pc, #420]	; (800253c <main+0x2ec>)
 8002398:	f017 fdae 	bl	8019ef8 <iprintf>
	if (HAL_LPTIM_Counter_Start_IT(&hlptim1, 1024) != HAL_OK) {
 800239c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80023a0:	4867      	ldr	r0, [pc, #412]	; (8002540 <main+0x2f0>)
 80023a2:	f007 f907 	bl	80095b4 <HAL_LPTIM_Counter_Start_IT>
 80023a6:	4603      	mov	r3, r0
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d004      	beq.n	80023b6 <main+0x166>
		printf("Failed to start slow flashing LED!\r\n");
 80023ac:	4865      	ldr	r0, [pc, #404]	; (8002544 <main+0x2f4>)
 80023ae:	f017 fe09 	bl	8019fc4 <puts>
		Error_Handler();
 80023b2:	f000 ffbd 	bl	8003330 <Error_Handler>
	if (HAL_DAC_Start(&hdac1, DAC_CHANNEL_1) != HAL_OK) {
 80023b6:	2100      	movs	r1, #0
 80023b8:	4863      	ldr	r0, [pc, #396]	; (8002548 <main+0x2f8>)
 80023ba:	f003 fe71 	bl	80060a0 <HAL_DAC_Start>
 80023be:	4603      	mov	r3, r0
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d004      	beq.n	80023ce <main+0x17e>
		printf("Failure to initialise DAC channel 1 \r\n");
 80023c4:	4861      	ldr	r0, [pc, #388]	; (800254c <main+0x2fc>)
 80023c6:	f017 fdfd 	bl	8019fc4 <puts>
		Error_Handler();
 80023ca:	f000 ffb1 	bl	8003330 <Error_Handler>
	if (HAL_DAC_Start(&hdac1, DAC_CHANNEL_2) != HAL_OK) {
 80023ce:	2110      	movs	r1, #16
 80023d0:	485d      	ldr	r0, [pc, #372]	; (8002548 <main+0x2f8>)
 80023d2:	f003 fe65 	bl	80060a0 <HAL_DAC_Start>
 80023d6:	4603      	mov	r3, r0
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d004      	beq.n	80023e6 <main+0x196>
		printf("Failure to initialise DAC channel 2 \r\n");
 80023dc:	485c      	ldr	r0, [pc, #368]	; (8002550 <main+0x300>)
 80023de:	f017 fdf1 	bl	8019fc4 <puts>
		Error_Handler();
 80023e2:	f000 ffa5 	bl	8003330 <Error_Handler>
	printf("Setting DAC output 1 (OCXO control) to 0V \r\n");
 80023e6:	485b      	ldr	r0, [pc, #364]	; (8002554 <main+0x304>)
 80023e8:	f017 fdec 	bl	8019fc4 <puts>
	if(HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R, 0) != HAL_OK){
 80023ec:	2300      	movs	r3, #0
 80023ee:	2200      	movs	r2, #0
 80023f0:	2100      	movs	r1, #0
 80023f2:	4855      	ldr	r0, [pc, #340]	; (8002548 <main+0x2f8>)
 80023f4:	f003 fea6 	bl	8006144 <HAL_DAC_SetValue>
 80023f8:	4603      	mov	r3, r0
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d004      	beq.n	8002408 <main+0x1b8>
			printf("DAC setup failed for channel 1!\r\n");
 80023fe:	4856      	ldr	r0, [pc, #344]	; (8002558 <main+0x308>)
 8002400:	f017 fde0 	bl	8019fc4 <puts>
		Error_Handler();
 8002404:	f000 ff94 	bl	8003330 <Error_Handler>
	printf("Setting DAC output 2 (laser control) to 0V \r\n");
 8002408:	4854      	ldr	r0, [pc, #336]	; (800255c <main+0x30c>)
 800240a:	f017 fddb 	bl	8019fc4 <puts>
	if(HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_2, DAC_ALIGN_12B_R, 0) != HAL_OK){
 800240e:	2300      	movs	r3, #0
 8002410:	2200      	movs	r2, #0
 8002412:	2110      	movs	r1, #16
 8002414:	484c      	ldr	r0, [pc, #304]	; (8002548 <main+0x2f8>)
 8002416:	f003 fe95 	bl	8006144 <HAL_DAC_SetValue>
 800241a:	4603      	mov	r3, r0
 800241c:	2b00      	cmp	r3, #0
 800241e:	d004      	beq.n	800242a <main+0x1da>
			printf("DAC setup failed for channel 2!\r\n");
 8002420:	484f      	ldr	r0, [pc, #316]	; (8002560 <main+0x310>)
 8002422:	f017 fdcf 	bl	8019fc4 <puts>
		Error_Handler();
 8002426:	f000 ff83 	bl	8003330 <Error_Handler>
	if(HAL_ADCEx_Calibration_Start(&hadc3, ADC_CALIB_OFFSET, ADC_SINGLE_ENDED) != HAL_OK){
 800242a:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800242e:	2100      	movs	r1, #0
 8002430:	484c      	ldr	r0, [pc, #304]	; (8002564 <main+0x314>)
 8002432:	f003 fbf1 	bl	8005c18 <HAL_ADCEx_Calibration_Start>
 8002436:	4603      	mov	r3, r0
 8002438:	2b00      	cmp	r3, #0
 800243a:	d004      	beq.n	8002446 <main+0x1f6>
		printf("ADC calibration failure \r\n");
 800243c:	484a      	ldr	r0, [pc, #296]	; (8002568 <main+0x318>)
 800243e:	f017 fdc1 	bl	8019fc4 <puts>
		Error_Handler();
 8002442:	f000 ff75 	bl	8003330 <Error_Handler>
	if(HAL_ADC_Start_IT(&hadc3) != HAL_OK){
 8002446:	4847      	ldr	r0, [pc, #284]	; (8002564 <main+0x314>)
 8002448:	f002 fad4 	bl	80049f4 <HAL_ADC_Start_IT>
 800244c:	4603      	mov	r3, r0
 800244e:	2b00      	cmp	r3, #0
 8002450:	d004      	beq.n	800245c <main+0x20c>
		printf("Failed to start ADC with interrupt capability \r\n");
 8002452:	4846      	ldr	r0, [pc, #280]	; (800256c <main+0x31c>)
 8002454:	f017 fdb6 	bl	8019fc4 <puts>
	                Error_Handler();
 8002458:	f000 ff6a 	bl	8003330 <Error_Handler>
	printf("ADC calibrated successfully and interrupt callback enabled \r\n");
 800245c:	4844      	ldr	r0, [pc, #272]	; (8002570 <main+0x320>)
 800245e:	f017 fdb1 	bl	8019fc4 <puts>
	measure_POP_cycle_time();
 8002462:	f019 fce9 	bl	801be38 <__measure_POP_cycle_time_veneer>
	calc_fixed_time_MW_sweep(HYPERFINE + MW_DELTA, 10000, 50, ADD_SCOPE_SYNC_TIME); //10kHz sweep, 50s
 8002466:	ed9f 6b24 	vldr	d6, [pc, #144]	; 80024f8 <main+0x2a8>
 800246a:	ed9f 7b25 	vldr	d7, [pc, #148]	; 8002500 <main+0x2b0>
 800246e:	ee36 7b07 	vadd.f64	d7, d6, d7
 8002472:	2000      	movs	r0, #0
 8002474:	ed9f 2b24 	vldr	d2, [pc, #144]	; 8002508 <main+0x2b8>
 8002478:	ed9f 1b25 	vldr	d1, [pc, #148]	; 8002510 <main+0x2c0>
 800247c:	eeb0 0b47 	vmov.f64	d0, d7
 8002480:	f019 fcea 	bl	801be58 <__calc_fixed_time_MW_sweep_veneer>
	printf("Entering main while loop\r\n");
 8002484:	483b      	ldr	r0, [pc, #236]	; (8002574 <main+0x324>)
 8002486:	f017 fd9d 	bl	8019fc4 <puts>
		blue_button_status = HAL_GPIO_ReadPin(BLUE_BUTTON_GPIO_Port, BLUE_BUTTON_Pin);
 800248a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800248e:	483a      	ldr	r0, [pc, #232]	; (8002578 <main+0x328>)
 8002490:	f005 fc6c 	bl	8007d6c <HAL_GPIO_ReadPin>
 8002494:	4603      	mov	r3, r0
 8002496:	2b00      	cmp	r3, #0
 8002498:	bf14      	ite	ne
 800249a:	2301      	movne	r3, #1
 800249c:	2300      	moveq	r3, #0
 800249e:	b2da      	uxtb	r2, r3
 80024a0:	4b36      	ldr	r3, [pc, #216]	; (800257c <main+0x32c>)
 80024a2:	701a      	strb	r2, [r3, #0]
		if (blue_button_status) {// If blue button is pressed
 80024a4:	4b35      	ldr	r3, [pc, #212]	; (800257c <main+0x32c>)
 80024a6:	781b      	ldrb	r3, [r3, #0]
 80024a8:	b2db      	uxtb	r3, r3
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d01d      	beq.n	80024ea <main+0x29a>
			printf("Blue button pressed....\r\n");
 80024ae:	4834      	ldr	r0, [pc, #208]	; (8002580 <main+0x330>)
 80024b0:	f017 fd88 	bl	8019fc4 <puts>
			start_laser_ramp();
 80024b4:	f019 fcc8 	bl	801be48 <__start_laser_ramp_veneer>
			while(blue_button_status) {//remain here polling button until it is released
 80024b8:	e012      	b.n	80024e0 <main+0x290>
				timer_delay(SLOW_TIMER, 100); //1ms delay
 80024ba:	4b32      	ldr	r3, [pc, #200]	; (8002584 <main+0x334>)
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	2164      	movs	r1, #100	; 0x64
 80024c0:	4618      	mov	r0, r3
 80024c2:	f019 fcbd 	bl	801be40 <__timer_delay_veneer>
				blue_button_status = HAL_GPIO_ReadPin(BLUE_BUTTON_GPIO_Port, BLUE_BUTTON_Pin);
 80024c6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80024ca:	482b      	ldr	r0, [pc, #172]	; (8002578 <main+0x328>)
 80024cc:	f005 fc4e 	bl	8007d6c <HAL_GPIO_ReadPin>
 80024d0:	4603      	mov	r3, r0
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	bf14      	ite	ne
 80024d6:	2301      	movne	r3, #1
 80024d8:	2300      	moveq	r3, #0
 80024da:	b2da      	uxtb	r2, r3
 80024dc:	4b27      	ldr	r3, [pc, #156]	; (800257c <main+0x32c>)
 80024de:	701a      	strb	r2, [r3, #0]
			while(blue_button_status) {//remain here polling button until it is released
 80024e0:	4b26      	ldr	r3, [pc, #152]	; (800257c <main+0x32c>)
 80024e2:	781b      	ldrb	r3, [r3, #0]
 80024e4:	b2db      	uxtb	r3, r3
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d1e7      	bne.n	80024ba <main+0x26a>
		MW_update();
 80024ea:	f019 fc9d 	bl	801be28 <__MW_update_veneer>
		laser_update();
 80024ee:	f019 fcaf 	bl	801be50 <__laser_update_veneer>
		blue_button_status = HAL_GPIO_ReadPin(BLUE_BUTTON_GPIO_Port, BLUE_BUTTON_Pin);
 80024f2:	e7ca      	b.n	800248a <main+0x23a>
 80024f4:	f3af 8000 	nop.w
 80024f8:	6d600000 	.word	0x6d600000
 80024fc:	41e69e35 	.word	0x41e69e35
 8002500:	00000000 	.word	0x00000000
 8002504:	408f4000 	.word	0x408f4000
 8002508:	00000000 	.word	0x00000000
 800250c:	40490000 	.word	0x40490000
 8002510:	00000000 	.word	0x00000000
 8002514:	40c38800 	.word	0x40c38800
 8002518:	00001ba0 	.word	0x00001ba0
 800251c:	00000000 	.word	0x00000000
 8002520:	08000298 	.word	0x08000298
 8002524:	e000ed00 	.word	0xe000ed00
 8002528:	0801c0c4 	.word	0x0801c0c4
 800252c:	0801c0c8 	.word	0x0801c0c8
 8002530:	0801c0e4 	.word	0x0801c0e4
 8002534:	20000002 	.word	0x20000002
 8002538:	0801c110 	.word	0x0801c110
 800253c:	0801c134 	.word	0x0801c134
 8002540:	200003b0 	.word	0x200003b0
 8002544:	0801c158 	.word	0x0801c158
 8002548:	200002c0 	.word	0x200002c0
 800254c:	0801c17c 	.word	0x0801c17c
 8002550:	0801c1a4 	.word	0x0801c1a4
 8002554:	0801c1cc 	.word	0x0801c1cc
 8002558:	0801c1f8 	.word	0x0801c1f8
 800255c:	0801c21c 	.word	0x0801c21c
 8002560:	0801c24c 	.word	0x0801c24c
 8002564:	2000025c 	.word	0x2000025c
 8002568:	0801c270 	.word	0x0801c270
 800256c:	0801c28c 	.word	0x0801c28c
 8002570:	0801c2bc 	.word	0x0801c2bc
 8002574:	0801c2fc 	.word	0x0801c2fc
 8002578:	58020800 	.word	0x58020800
 800257c:	200005f8 	.word	0x200005f8
 8002580:	0801c318 	.word	0x0801c318
 8002584:	20000018 	.word	0x20000018

08002588 <SystemClock_Config>:
{
 8002588:	b580      	push	{r7, lr}
 800258a:	b0a4      	sub	sp, #144	; 0x90
 800258c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800258e:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8002592:	224c      	movs	r2, #76	; 0x4c
 8002594:	2100      	movs	r1, #0
 8002596:	4618      	mov	r0, r3
 8002598:	f017 fe04 	bl	801a1a4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800259c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80025a0:	2220      	movs	r2, #32
 80025a2:	2100      	movs	r1, #0
 80025a4:	4618      	mov	r0, r3
 80025a6:	f017 fdfd 	bl	801a1a4 <memset>
  RCC_CRSInitTypeDef RCC_CRSInitStruct = {0};
 80025aa:	f107 030c 	add.w	r3, r7, #12
 80025ae:	2200      	movs	r2, #0
 80025b0:	601a      	str	r2, [r3, #0]
 80025b2:	605a      	str	r2, [r3, #4]
 80025b4:	609a      	str	r2, [r3, #8]
 80025b6:	60da      	str	r2, [r3, #12]
 80025b8:	611a      	str	r2, [r3, #16]
 80025ba:	615a      	str	r2, [r3, #20]
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 80025bc:	2002      	movs	r0, #2
 80025be:	f007 fb57 	bl	8009c70 <HAL_PWREx_ConfigSupply>
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80025c2:	2300      	movs	r3, #0
 80025c4:	60bb      	str	r3, [r7, #8]
 80025c6:	4b4c      	ldr	r3, [pc, #304]	; (80026f8 <SystemClock_Config+0x170>)
 80025c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025ca:	4a4b      	ldr	r2, [pc, #300]	; (80026f8 <SystemClock_Config+0x170>)
 80025cc:	f023 0301 	bic.w	r3, r3, #1
 80025d0:	62d3      	str	r3, [r2, #44]	; 0x2c
 80025d2:	4b49      	ldr	r3, [pc, #292]	; (80026f8 <SystemClock_Config+0x170>)
 80025d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025d6:	f003 0301 	and.w	r3, r3, #1
 80025da:	60bb      	str	r3, [r7, #8]
 80025dc:	4b47      	ldr	r3, [pc, #284]	; (80026fc <SystemClock_Config+0x174>)
 80025de:	699b      	ldr	r3, [r3, #24]
 80025e0:	4a46      	ldr	r2, [pc, #280]	; (80026fc <SystemClock_Config+0x174>)
 80025e2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80025e6:	6193      	str	r3, [r2, #24]
 80025e8:	4b44      	ldr	r3, [pc, #272]	; (80026fc <SystemClock_Config+0x174>)
 80025ea:	699b      	ldr	r3, [r3, #24]
 80025ec:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80025f0:	60bb      	str	r3, [r7, #8]
 80025f2:	68bb      	ldr	r3, [r7, #8]
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80025f4:	bf00      	nop
 80025f6:	4b41      	ldr	r3, [pc, #260]	; (80026fc <SystemClock_Config+0x174>)
 80025f8:	699b      	ldr	r3, [r3, #24]
 80025fa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80025fe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002602:	d1f8      	bne.n	80025f6 <SystemClock_Config+0x6e>
  HAL_PWR_EnableBkUpAccess();
 8002604:	f007 fb24 	bl	8009c50 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8002608:	f001 fe00 	bl	800420c <HAL_GetREVID>
 800260c:	4b3c      	ldr	r3, [pc, #240]	; (8002700 <SystemClock_Config+0x178>)
 800260e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002610:	4a3b      	ldr	r2, [pc, #236]	; (8002700 <SystemClock_Config+0x178>)
 8002612:	f023 0318 	bic.w	r3, r3, #24
 8002616:	6713      	str	r3, [r2, #112]	; 0x70
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE
 8002618:	2325      	movs	r3, #37	; 0x25
 800261a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800261c:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8002620:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8002622:	2301      	movs	r3, #1
 8002624:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8002626:	2301      	movs	r3, #1
 8002628:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800262a:	2302      	movs	r3, #2
 800262c:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800262e:	2302      	movs	r3, #2
 8002630:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8002632:	2301      	movs	r3, #1
 8002634:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLN = 80;
 8002636:	2350      	movs	r3, #80	; 0x50
 8002638:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.PLL.PLLP = 2;
 800263a:	2302      	movs	r3, #2
 800263c:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800263e:	2304      	movs	r3, #4
 8002640:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8002642:	2302      	movs	r3, #2
 8002644:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8002648:	230c      	movs	r3, #12
 800264a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800264e:	2300      	movs	r3, #0
 8002650:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8002654:	2300      	movs	r3, #0
 8002656:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800265a:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800265e:	4618      	mov	r0, r3
 8002660:	f007 fb40 	bl	8009ce4 <HAL_RCC_OscConfig>
 8002664:	4603      	mov	r3, r0
 8002666:	2b00      	cmp	r3, #0
 8002668:	d001      	beq.n	800266e <SystemClock_Config+0xe6>
    Error_Handler();
 800266a:	f000 fe61 	bl	8003330 <Error_Handler>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800266e:	233f      	movs	r3, #63	; 0x3f
 8002670:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002672:	2303      	movs	r3, #3
 8002674:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8002676:	2300      	movs	r3, #0
 8002678:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV4;
 800267a:	2309      	movs	r3, #9
 800267c:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 800267e:	2300      	movs	r3, #0
 8002680:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 8002682:	2300      	movs	r3, #0
 8002684:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV16;
 8002686:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 800268a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 800268c:	2300      	movs	r3, #0
 800268e:	643b      	str	r3, [r7, #64]	; 0x40
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8002690:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002694:	2101      	movs	r1, #1
 8002696:	4618      	mov	r0, r3
 8002698:	f007 ff7e 	bl	800a598 <HAL_RCC_ClockConfig>
 800269c:	4603      	mov	r3, r0
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d001      	beq.n	80026a6 <SystemClock_Config+0x11e>
    Error_Handler();
 80026a2:	f000 fe45 	bl	8003330 <Error_Handler>
  HAL_RCC_EnableCSS();
 80026a6:	f008 f92d 	bl	800a904 <HAL_RCC_EnableCSS>
  __HAL_RCC_CRS_CLK_ENABLE();
 80026aa:	4b15      	ldr	r3, [pc, #84]	; (8002700 <SystemClock_Config+0x178>)
 80026ac:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 80026b0:	4a13      	ldr	r2, [pc, #76]	; (8002700 <SystemClock_Config+0x178>)
 80026b2:	f043 0302 	orr.w	r3, r3, #2
 80026b6:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 80026ba:	4b11      	ldr	r3, [pc, #68]	; (8002700 <SystemClock_Config+0x178>)
 80026bc:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 80026c0:	f003 0302 	and.w	r3, r3, #2
 80026c4:	607b      	str	r3, [r7, #4]
 80026c6:	687b      	ldr	r3, [r7, #4]
  RCC_CRSInitStruct.Prescaler = RCC_CRS_SYNC_DIV1;
 80026c8:	2300      	movs	r3, #0
 80026ca:	60fb      	str	r3, [r7, #12]
  RCC_CRSInitStruct.Source = RCC_CRS_SYNC_SOURCE_LSE;
 80026cc:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80026d0:	613b      	str	r3, [r7, #16]
  RCC_CRSInitStruct.Polarity = RCC_CRS_SYNC_POLARITY_RISING;
 80026d2:	2300      	movs	r3, #0
 80026d4:	617b      	str	r3, [r7, #20]
  RCC_CRSInitStruct.ReloadValue = __HAL_RCC_CRS_RELOADVALUE_CALCULATE(48000000,32768);
 80026d6:	f240 53b7 	movw	r3, #1463	; 0x5b7
 80026da:	61bb      	str	r3, [r7, #24]
  RCC_CRSInitStruct.ErrorLimitValue = 34;
 80026dc:	2322      	movs	r3, #34	; 0x22
 80026de:	61fb      	str	r3, [r7, #28]
  RCC_CRSInitStruct.HSI48CalibrationValue = 32;
 80026e0:	2320      	movs	r3, #32
 80026e2:	623b      	str	r3, [r7, #32]
  HAL_RCCEx_CRSConfig(&RCC_CRSInitStruct);
 80026e4:	f107 030c 	add.w	r3, r7, #12
 80026e8:	4618      	mov	r0, r3
 80026ea:	f00a fea7 	bl	800d43c <HAL_RCCEx_CRSConfig>
}
 80026ee:	bf00      	nop
 80026f0:	3790      	adds	r7, #144	; 0x90
 80026f2:	46bd      	mov	sp, r7
 80026f4:	bd80      	pop	{r7, pc}
 80026f6:	bf00      	nop
 80026f8:	58000400 	.word	0x58000400
 80026fc:	58024800 	.word	0x58024800
 8002700:	58024400 	.word	0x58024400

08002704 <MX_ADC3_Init>:
{
 8002704:	b580      	push	{r7, lr}
 8002706:	b088      	sub	sp, #32
 8002708:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 800270a:	1d3b      	adds	r3, r7, #4
 800270c:	2200      	movs	r2, #0
 800270e:	601a      	str	r2, [r3, #0]
 8002710:	605a      	str	r2, [r3, #4]
 8002712:	609a      	str	r2, [r3, #8]
 8002714:	60da      	str	r2, [r3, #12]
 8002716:	611a      	str	r2, [r3, #16]
 8002718:	615a      	str	r2, [r3, #20]
 800271a:	619a      	str	r2, [r3, #24]
  hadc3.Instance = ADC3;
 800271c:	4b28      	ldr	r3, [pc, #160]	; (80027c0 <MX_ADC3_Init+0xbc>)
 800271e:	4a29      	ldr	r2, [pc, #164]	; (80027c4 <MX_ADC3_Init+0xc0>)
 8002720:	601a      	str	r2, [r3, #0]
  hadc3.Init.Resolution = ADC_RESOLUTION_16B;
 8002722:	4b27      	ldr	r3, [pc, #156]	; (80027c0 <MX_ADC3_Init+0xbc>)
 8002724:	2200      	movs	r2, #0
 8002726:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8002728:	4b25      	ldr	r3, [pc, #148]	; (80027c0 <MX_ADC3_Init+0xbc>)
 800272a:	2200      	movs	r2, #0
 800272c:	60da      	str	r2, [r3, #12]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800272e:	4b24      	ldr	r3, [pc, #144]	; (80027c0 <MX_ADC3_Init+0xbc>)
 8002730:	2204      	movs	r2, #4
 8002732:	611a      	str	r2, [r3, #16]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 8002734:	4b22      	ldr	r3, [pc, #136]	; (80027c0 <MX_ADC3_Init+0xbc>)
 8002736:	2200      	movs	r2, #0
 8002738:	751a      	strb	r2, [r3, #20]
  hadc3.Init.ContinuousConvMode = DISABLE;
 800273a:	4b21      	ldr	r3, [pc, #132]	; (80027c0 <MX_ADC3_Init+0xbc>)
 800273c:	2200      	movs	r2, #0
 800273e:	755a      	strb	r2, [r3, #21]
  hadc3.Init.NbrOfConversion = 1;
 8002740:	4b1f      	ldr	r3, [pc, #124]	; (80027c0 <MX_ADC3_Init+0xbc>)
 8002742:	2201      	movs	r2, #1
 8002744:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8002746:	4b1e      	ldr	r3, [pc, #120]	; (80027c0 <MX_ADC3_Init+0xbc>)
 8002748:	2200      	movs	r2, #0
 800274a:	771a      	strb	r2, [r3, #28]
  hadc3.Init.ExternalTrigConv = ADC_EXTERNALTRIG_EXT_IT11;
 800274c:	4b1c      	ldr	r3, [pc, #112]	; (80027c0 <MX_ADC3_Init+0xbc>)
 800274e:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 8002752:	625a      	str	r2, [r3, #36]	; 0x24
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8002754:	4b1a      	ldr	r3, [pc, #104]	; (80027c0 <MX_ADC3_Init+0xbc>)
 8002756:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800275a:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 800275c:	4b18      	ldr	r3, [pc, #96]	; (80027c0 <MX_ADC3_Init+0xbc>)
 800275e:	2200      	movs	r2, #0
 8002760:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8002762:	4b17      	ldr	r3, [pc, #92]	; (80027c0 <MX_ADC3_Init+0xbc>)
 8002764:	2200      	movs	r2, #0
 8002766:	631a      	str	r2, [r3, #48]	; 0x30
  hadc3.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8002768:	4b15      	ldr	r3, [pc, #84]	; (80027c0 <MX_ADC3_Init+0xbc>)
 800276a:	2200      	movs	r2, #0
 800276c:	635a      	str	r2, [r3, #52]	; 0x34
  hadc3.Init.OversamplingMode = DISABLE;
 800276e:	4b14      	ldr	r3, [pc, #80]	; (80027c0 <MX_ADC3_Init+0xbc>)
 8002770:	2200      	movs	r2, #0
 8002772:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8002776:	4812      	ldr	r0, [pc, #72]	; (80027c0 <MX_ADC3_Init+0xbc>)
 8002778:	f001 ff9a 	bl	80046b0 <HAL_ADC_Init>
 800277c:	4603      	mov	r3, r0
 800277e:	2b00      	cmp	r3, #0
 8002780:	d001      	beq.n	8002786 <MX_ADC3_Init+0x82>
    Error_Handler();
 8002782:	f000 fdd5 	bl	8003330 <Error_Handler>
  sConfig.Channel = ADC_CHANNEL_0;
 8002786:	2301      	movs	r3, #1
 8002788:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800278a:	2306      	movs	r3, #6
 800278c:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800278e:	2300      	movs	r3, #0
 8002790:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8002792:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8002796:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8002798:	2304      	movs	r3, #4
 800279a:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 800279c:	2300      	movs	r3, #0
 800279e:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 80027a0:	2300      	movs	r3, #0
 80027a2:	777b      	strb	r3, [r7, #29]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80027a4:	1d3b      	adds	r3, r7, #4
 80027a6:	4619      	mov	r1, r3
 80027a8:	4805      	ldr	r0, [pc, #20]	; (80027c0 <MX_ADC3_Init+0xbc>)
 80027aa:	f002 fcbd 	bl	8005128 <HAL_ADC_ConfigChannel>
 80027ae:	4603      	mov	r3, r0
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d001      	beq.n	80027b8 <MX_ADC3_Init+0xb4>
    Error_Handler();
 80027b4:	f000 fdbc 	bl	8003330 <Error_Handler>
}
 80027b8:	bf00      	nop
 80027ba:	3720      	adds	r7, #32
 80027bc:	46bd      	mov	sp, r7
 80027be:	bd80      	pop	{r7, pc}
 80027c0:	2000025c 	.word	0x2000025c
 80027c4:	58026000 	.word	0x58026000

080027c8 <MX_DAC1_Init>:
{
 80027c8:	b580      	push	{r7, lr}
 80027ca:	b08a      	sub	sp, #40	; 0x28
 80027cc:	af00      	add	r7, sp, #0
  DAC_ChannelConfTypeDef sConfig = {0};
 80027ce:	1d3b      	adds	r3, r7, #4
 80027d0:	2224      	movs	r2, #36	; 0x24
 80027d2:	2100      	movs	r1, #0
 80027d4:	4618      	mov	r0, r3
 80027d6:	f017 fce5 	bl	801a1a4 <memset>
  hdac1.Instance = DAC1;
 80027da:	4b17      	ldr	r3, [pc, #92]	; (8002838 <MX_DAC1_Init+0x70>)
 80027dc:	4a17      	ldr	r2, [pc, #92]	; (800283c <MX_DAC1_Init+0x74>)
 80027de:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 80027e0:	4815      	ldr	r0, [pc, #84]	; (8002838 <MX_DAC1_Init+0x70>)
 80027e2:	f003 fc3b 	bl	800605c <HAL_DAC_Init>
 80027e6:	4603      	mov	r3, r0
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d001      	beq.n	80027f0 <MX_DAC1_Init+0x28>
    Error_Handler();
 80027ec:	f000 fda0 	bl	8003330 <Error_Handler>
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 80027f0:	2300      	movs	r3, #0
 80027f2:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 80027f4:	2300      	movs	r3, #0
 80027f6:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 80027f8:	2300      	movs	r3, #0
 80027fa:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 80027fc:	2301      	movs	r3, #1
 80027fe:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8002800:	2300      	movs	r3, #0
 8002802:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8002804:	1d3b      	adds	r3, r7, #4
 8002806:	2200      	movs	r2, #0
 8002808:	4619      	mov	r1, r3
 800280a:	480b      	ldr	r0, [pc, #44]	; (8002838 <MX_DAC1_Init+0x70>)
 800280c:	f003 fcc0 	bl	8006190 <HAL_DAC_ConfigChannel>
 8002810:	4603      	mov	r3, r0
 8002812:	2b00      	cmp	r3, #0
 8002814:	d001      	beq.n	800281a <MX_DAC1_Init+0x52>
    Error_Handler();
 8002816:	f000 fd8b 	bl	8003330 <Error_Handler>
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 800281a:	1d3b      	adds	r3, r7, #4
 800281c:	2210      	movs	r2, #16
 800281e:	4619      	mov	r1, r3
 8002820:	4805      	ldr	r0, [pc, #20]	; (8002838 <MX_DAC1_Init+0x70>)
 8002822:	f003 fcb5 	bl	8006190 <HAL_DAC_ConfigChannel>
 8002826:	4603      	mov	r3, r0
 8002828:	2b00      	cmp	r3, #0
 800282a:	d001      	beq.n	8002830 <MX_DAC1_Init+0x68>
    Error_Handler();
 800282c:	f000 fd80 	bl	8003330 <Error_Handler>
}
 8002830:	bf00      	nop
 8002832:	3728      	adds	r7, #40	; 0x28
 8002834:	46bd      	mov	sp, r7
 8002836:	bd80      	pop	{r7, pc}
 8002838:	200002c0 	.word	0x200002c0
 800283c:	40007400 	.word	0x40007400

08002840 <MX_HRTIM_Init>:
{
 8002840:	b580      	push	{r7, lr}
 8002842:	b0a4      	sub	sp, #144	; 0x90
 8002844:	af00      	add	r7, sp, #0
  HRTIM_TimeBaseCfgTypeDef pTimeBaseCfg = {0};
 8002846:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800284a:	2200      	movs	r2, #0
 800284c:	601a      	str	r2, [r3, #0]
 800284e:	605a      	str	r2, [r3, #4]
 8002850:	609a      	str	r2, [r3, #8]
 8002852:	60da      	str	r2, [r3, #12]
  HRTIM_TimerCfgTypeDef pTimerCfg = {0};
 8002854:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002858:	2254      	movs	r2, #84	; 0x54
 800285a:	2100      	movs	r1, #0
 800285c:	4618      	mov	r0, r3
 800285e:	f017 fca1 	bl	801a1a4 <memset>
  HRTIM_CompareCfgTypeDef pCompareCfg = {0};
 8002862:	f107 0320 	add.w	r3, r7, #32
 8002866:	2200      	movs	r2, #0
 8002868:	601a      	str	r2, [r3, #0]
 800286a:	605a      	str	r2, [r3, #4]
 800286c:	609a      	str	r2, [r3, #8]
  HRTIM_OutputCfgTypeDef pOutputCfg = {0};
 800286e:	463b      	mov	r3, r7
 8002870:	2220      	movs	r2, #32
 8002872:	2100      	movs	r1, #0
 8002874:	4618      	mov	r0, r3
 8002876:	f017 fc95 	bl	801a1a4 <memset>
  hhrtim.Instance = HRTIM1;
 800287a:	4b98      	ldr	r3, [pc, #608]	; (8002adc <MX_HRTIM_Init+0x29c>)
 800287c:	4a98      	ldr	r2, [pc, #608]	; (8002ae0 <MX_HRTIM_Init+0x2a0>)
 800287e:	601a      	str	r2, [r3, #0]
  hhrtim.Init.HRTIMInterruptResquests = HRTIM_IT_NONE;
 8002880:	4b96      	ldr	r3, [pc, #600]	; (8002adc <MX_HRTIM_Init+0x29c>)
 8002882:	2200      	movs	r2, #0
 8002884:	605a      	str	r2, [r3, #4]
  hhrtim.Init.SyncOptions = HRTIM_SYNCOPTION_NONE;
 8002886:	4b95      	ldr	r3, [pc, #596]	; (8002adc <MX_HRTIM_Init+0x29c>)
 8002888:	2200      	movs	r2, #0
 800288a:	609a      	str	r2, [r3, #8]
  if (HAL_HRTIM_Init(&hhrtim) != HAL_OK)
 800288c:	4893      	ldr	r0, [pc, #588]	; (8002adc <MX_HRTIM_Init+0x29c>)
 800288e:	f005 fadd 	bl	8007e4c <HAL_HRTIM_Init>
 8002892:	4603      	mov	r3, r0
 8002894:	2b00      	cmp	r3, #0
 8002896:	d001      	beq.n	800289c <MX_HRTIM_Init+0x5c>
    Error_Handler();
 8002898:	f000 fd4a 	bl	8003330 <Error_Handler>
  pTimeBaseCfg.Period = PUMP_WIDTH+(2*MICROWAVE_DELAY)+(2*MICROWAVE_WIDTH)+RAMSEY_TIME+PROBE_WIDTH+POP_CYCLE_DELAY;
 800289c:	f24c 2318 	movw	r3, #49688	; 0xc218
 80028a0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  pTimeBaseCfg.RepetitionCounter = 0x00;
 80028a4:	2300      	movs	r3, #0
 80028a6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  pTimeBaseCfg.PrescalerRatio = HRTIM_PRESCALERRATIO_DIV4;
 80028aa:	2307      	movs	r3, #7
 80028ac:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  pTimeBaseCfg.Mode = HRTIM_MODE_CONTINUOUS;
 80028b0:	2308      	movs	r3, #8
 80028b2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (HAL_HRTIM_TimeBaseConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_A, &pTimeBaseCfg) != HAL_OK)
 80028b6:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80028ba:	461a      	mov	r2, r3
 80028bc:	2100      	movs	r1, #0
 80028be:	4887      	ldr	r0, [pc, #540]	; (8002adc <MX_HRTIM_Init+0x29c>)
 80028c0:	f005 fb94 	bl	8007fec <HAL_HRTIM_TimeBaseConfig>
 80028c4:	4603      	mov	r3, r0
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d001      	beq.n	80028ce <MX_HRTIM_Init+0x8e>
    Error_Handler();
 80028ca:	f000 fd31 	bl	8003330 <Error_Handler>
  pTimerCfg.InterruptRequests = HRTIM_TIM_IT_CMP3|HRTIM_TIM_IT_REP;
 80028ce:	2314      	movs	r3, #20
 80028d0:	62fb      	str	r3, [r7, #44]	; 0x2c
  pTimerCfg.DMARequests = HRTIM_TIM_DMA_NONE;
 80028d2:	2300      	movs	r3, #0
 80028d4:	633b      	str	r3, [r7, #48]	; 0x30
  pTimerCfg.DMASrcAddress = 0x0000;
 80028d6:	2300      	movs	r3, #0
 80028d8:	637b      	str	r3, [r7, #52]	; 0x34
  pTimerCfg.DMADstAddress = 0x0000;
 80028da:	2300      	movs	r3, #0
 80028dc:	63bb      	str	r3, [r7, #56]	; 0x38
  pTimerCfg.DMASize = 0x1;
 80028de:	2301      	movs	r3, #1
 80028e0:	63fb      	str	r3, [r7, #60]	; 0x3c
  pTimerCfg.HalfModeEnable = HRTIM_HALFMODE_DISABLED;
 80028e2:	2300      	movs	r3, #0
 80028e4:	643b      	str	r3, [r7, #64]	; 0x40
  pTimerCfg.StartOnSync = HRTIM_SYNCSTART_DISABLED;
 80028e6:	2300      	movs	r3, #0
 80028e8:	647b      	str	r3, [r7, #68]	; 0x44
  pTimerCfg.ResetOnSync = HRTIM_SYNCRESET_DISABLED;
 80028ea:	2300      	movs	r3, #0
 80028ec:	64bb      	str	r3, [r7, #72]	; 0x48
  pTimerCfg.DACSynchro = HRTIM_DACSYNC_NONE;
 80028ee:	2300      	movs	r3, #0
 80028f0:	64fb      	str	r3, [r7, #76]	; 0x4c
  pTimerCfg.PreloadEnable = HRTIM_PRELOAD_DISABLED;
 80028f2:	2300      	movs	r3, #0
 80028f4:	653b      	str	r3, [r7, #80]	; 0x50
  pTimerCfg.UpdateGating = HRTIM_UPDATEGATING_INDEPENDENT;
 80028f6:	2300      	movs	r3, #0
 80028f8:	657b      	str	r3, [r7, #84]	; 0x54
  pTimerCfg.BurstMode = HRTIM_TIMERBURSTMODE_MAINTAINCLOCK;
 80028fa:	2300      	movs	r3, #0
 80028fc:	65bb      	str	r3, [r7, #88]	; 0x58
  pTimerCfg.RepetitionUpdate = HRTIM_UPDATEONREPETITION_DISABLED;
 80028fe:	2300      	movs	r3, #0
 8002900:	65fb      	str	r3, [r7, #92]	; 0x5c
  pTimerCfg.PushPull = HRTIM_TIMPUSHPULLMODE_DISABLED;
 8002902:	2300      	movs	r3, #0
 8002904:	663b      	str	r3, [r7, #96]	; 0x60
  pTimerCfg.FaultEnable = HRTIM_TIMFAULTENABLE_NONE;
 8002906:	2300      	movs	r3, #0
 8002908:	667b      	str	r3, [r7, #100]	; 0x64
  pTimerCfg.FaultLock = HRTIM_TIMFAULTLOCK_READWRITE;
 800290a:	2300      	movs	r3, #0
 800290c:	66bb      	str	r3, [r7, #104]	; 0x68
  pTimerCfg.DeadTimeInsertion = HRTIM_TIMDEADTIMEINSERTION_DISABLED;
 800290e:	2300      	movs	r3, #0
 8002910:	66fb      	str	r3, [r7, #108]	; 0x6c
  pTimerCfg.DelayedProtectionMode = HRTIM_TIMER_A_B_C_DELAYEDPROTECTION_DISABLED;
 8002912:	2300      	movs	r3, #0
 8002914:	673b      	str	r3, [r7, #112]	; 0x70
  pTimerCfg.UpdateTrigger = HRTIM_TIMUPDATETRIGGER_NONE;
 8002916:	2300      	movs	r3, #0
 8002918:	677b      	str	r3, [r7, #116]	; 0x74
  pTimerCfg.ResetTrigger = HRTIM_TIMRESETTRIGGER_NONE;
 800291a:	2300      	movs	r3, #0
 800291c:	67bb      	str	r3, [r7, #120]	; 0x78
  pTimerCfg.ResetUpdate = HRTIM_TIMUPDATEONRESET_DISABLED;
 800291e:	2300      	movs	r3, #0
 8002920:	67fb      	str	r3, [r7, #124]	; 0x7c
  if (HAL_HRTIM_WaveformTimerConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_A, &pTimerCfg) != HAL_OK)
 8002922:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002926:	461a      	mov	r2, r3
 8002928:	2100      	movs	r1, #0
 800292a:	486c      	ldr	r0, [pc, #432]	; (8002adc <MX_HRTIM_Init+0x29c>)
 800292c:	f005 fb86 	bl	800803c <HAL_HRTIM_WaveformTimerConfig>
 8002930:	4603      	mov	r3, r0
 8002932:	2b00      	cmp	r3, #0
 8002934:	d001      	beq.n	800293a <MX_HRTIM_Init+0xfa>
    Error_Handler();
 8002936:	f000 fcfb 	bl	8003330 <Error_Handler>
  pTimerCfg.InterruptRequests = HRTIM_TIM_IT_CMP2|HRTIM_TIM_IT_CMP3;
 800293a:	2306      	movs	r3, #6
 800293c:	62fb      	str	r3, [r7, #44]	; 0x2c
  pTimerCfg.DelayedProtectionMode = HRTIM_TIMER_D_E_DELAYEDPROTECTION_DISABLED;
 800293e:	2300      	movs	r3, #0
 8002940:	673b      	str	r3, [r7, #112]	; 0x70
  if (HAL_HRTIM_WaveformTimerConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_E, &pTimerCfg) != HAL_OK)
 8002942:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002946:	461a      	mov	r2, r3
 8002948:	2104      	movs	r1, #4
 800294a:	4864      	ldr	r0, [pc, #400]	; (8002adc <MX_HRTIM_Init+0x29c>)
 800294c:	f005 fb76 	bl	800803c <HAL_HRTIM_WaveformTimerConfig>
 8002950:	4603      	mov	r3, r0
 8002952:	2b00      	cmp	r3, #0
 8002954:	d001      	beq.n	800295a <MX_HRTIM_Init+0x11a>
    Error_Handler();
 8002956:	f000 fceb 	bl	8003330 <Error_Handler>
  pCompareCfg.CompareValue = PUMP_WIDTH;
 800295a:	f240 631b 	movw	r3, #1563	; 0x61b
 800295e:	623b      	str	r3, [r7, #32]
  if (HAL_HRTIM_WaveformCompareConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_A, HRTIM_COMPAREUNIT_1, &pCompareCfg) != HAL_OK)
 8002960:	f107 0320 	add.w	r3, r7, #32
 8002964:	2201      	movs	r2, #1
 8002966:	2100      	movs	r1, #0
 8002968:	485c      	ldr	r0, [pc, #368]	; (8002adc <MX_HRTIM_Init+0x29c>)
 800296a:	f005 fbd9 	bl	8008120 <HAL_HRTIM_WaveformCompareConfig>
 800296e:	4603      	mov	r3, r0
 8002970:	2b00      	cmp	r3, #0
 8002972:	d001      	beq.n	8002978 <MX_HRTIM_Init+0x138>
    Error_Handler();
 8002974:	f000 fcdc 	bl	8003330 <Error_Handler>
  pCompareCfg.CompareValue = PUMP_WIDTH+(2*MICROWAVE_DELAY)+(2*MICROWAVE_WIDTH)+RAMSEY_TIME;
 8002978:	f244 5395 	movw	r3, #17813	; 0x4595
 800297c:	623b      	str	r3, [r7, #32]
  pCompareCfg.AutoDelayedMode = HRTIM_AUTODELAYEDMODE_REGULAR;
 800297e:	2300      	movs	r3, #0
 8002980:	627b      	str	r3, [r7, #36]	; 0x24
  pCompareCfg.AutoDelayedTimeout = 0x0000;
 8002982:	2300      	movs	r3, #0
 8002984:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_HRTIM_WaveformCompareConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_A, HRTIM_COMPAREUNIT_2, &pCompareCfg) != HAL_OK)
 8002986:	f107 0320 	add.w	r3, r7, #32
 800298a:	2202      	movs	r2, #2
 800298c:	2100      	movs	r1, #0
 800298e:	4853      	ldr	r0, [pc, #332]	; (8002adc <MX_HRTIM_Init+0x29c>)
 8002990:	f005 fbc6 	bl	8008120 <HAL_HRTIM_WaveformCompareConfig>
 8002994:	4603      	mov	r3, r0
 8002996:	2b00      	cmp	r3, #0
 8002998:	d001      	beq.n	800299e <MX_HRTIM_Init+0x15e>
    Error_Handler();
 800299a:	f000 fcc9 	bl	8003330 <Error_Handler>
  pCompareCfg.CompareValue = PUMP_WIDTH+MICROWAVE_DELAY+MICROWAVE_WIDTH;
 800299e:	f640 536e 	movw	r3, #3438	; 0xd6e
 80029a2:	623b      	str	r3, [r7, #32]
  if (HAL_HRTIM_WaveformCompareConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_E, HRTIM_COMPAREUNIT_2, &pCompareCfg) != HAL_OK)
 80029a4:	f107 0320 	add.w	r3, r7, #32
 80029a8:	2202      	movs	r2, #2
 80029aa:	2104      	movs	r1, #4
 80029ac:	484b      	ldr	r0, [pc, #300]	; (8002adc <MX_HRTIM_Init+0x29c>)
 80029ae:	f005 fbb7 	bl	8008120 <HAL_HRTIM_WaveformCompareConfig>
 80029b2:	4603      	mov	r3, r0
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d001      	beq.n	80029bc <MX_HRTIM_Init+0x17c>
    Error_Handler();
 80029b8:	f000 fcba 	bl	8003330 <Error_Handler>
  pCompareCfg.CompareValue = PUMP_WIDTH+(2*MICROWAVE_DELAY)+(2*MICROWAVE_WIDTH)+RAMSEY_TIME+PROBE_WIDTH;
 80029bc:	f644 0306 	movw	r3, #18438	; 0x4806
 80029c0:	623b      	str	r3, [r7, #32]
  if (HAL_HRTIM_WaveformCompareConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_A, HRTIM_COMPAREUNIT_3, &pCompareCfg) != HAL_OK)
 80029c2:	f107 0320 	add.w	r3, r7, #32
 80029c6:	2204      	movs	r2, #4
 80029c8:	2100      	movs	r1, #0
 80029ca:	4844      	ldr	r0, [pc, #272]	; (8002adc <MX_HRTIM_Init+0x29c>)
 80029cc:	f005 fba8 	bl	8008120 <HAL_HRTIM_WaveformCompareConfig>
 80029d0:	4603      	mov	r3, r0
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d001      	beq.n	80029da <MX_HRTIM_Init+0x19a>
    Error_Handler();
 80029d6:	f000 fcab 	bl	8003330 <Error_Handler>
  pCompareCfg.CompareValue = PUMP_WIDTH+MICROWAVE_DELAY+MICROWAVE_WIDTH+RAMSEY_TIME+MICROWAVE_WIDTH;
 80029da:	f244 435d 	movw	r3, #17501	; 0x445d
 80029de:	623b      	str	r3, [r7, #32]
  if (HAL_HRTIM_WaveformCompareConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_E, HRTIM_COMPAREUNIT_4, &pCompareCfg) != HAL_OK)
 80029e0:	f107 0320 	add.w	r3, r7, #32
 80029e4:	2208      	movs	r2, #8
 80029e6:	2104      	movs	r1, #4
 80029e8:	483c      	ldr	r0, [pc, #240]	; (8002adc <MX_HRTIM_Init+0x29c>)
 80029ea:	f005 fb99 	bl	8008120 <HAL_HRTIM_WaveformCompareConfig>
 80029ee:	4603      	mov	r3, r0
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d001      	beq.n	80029f8 <MX_HRTIM_Init+0x1b8>
    Error_Handler();
 80029f4:	f000 fc9c 	bl	8003330 <Error_Handler>
  pOutputCfg.Polarity = HRTIM_OUTPUTPOLARITY_LOW;
 80029f8:	2302      	movs	r3, #2
 80029fa:	603b      	str	r3, [r7, #0]
  pOutputCfg.SetSource = HRTIM_OUTPUTSET_TIMCMP1|HRTIM_OUTPUTSET_TIMCMP3;
 80029fc:	2328      	movs	r3, #40	; 0x28
 80029fe:	607b      	str	r3, [r7, #4]
  pOutputCfg.ResetSource = HRTIM_OUTPUTRESET_TIMCMP2|HRTIM_OUTPUTRESET_TIMPER;
 8002a00:	2314      	movs	r3, #20
 8002a02:	60bb      	str	r3, [r7, #8]
  pOutputCfg.IdleMode = HRTIM_OUTPUTIDLEMODE_NONE;
 8002a04:	2300      	movs	r3, #0
 8002a06:	60fb      	str	r3, [r7, #12]
  pOutputCfg.IdleLevel = HRTIM_OUTPUTIDLELEVEL_ACTIVE;
 8002a08:	2308      	movs	r3, #8
 8002a0a:	613b      	str	r3, [r7, #16]
  pOutputCfg.FaultLevel = HRTIM_OUTPUTFAULTLEVEL_NONE;
 8002a0c:	2300      	movs	r3, #0
 8002a0e:	617b      	str	r3, [r7, #20]
  pOutputCfg.ChopperModeEnable = HRTIM_OUTPUTCHOPPERMODE_DISABLED;
 8002a10:	2300      	movs	r3, #0
 8002a12:	61bb      	str	r3, [r7, #24]
  pOutputCfg.BurstModeEntryDelayed = HRTIM_OUTPUTBURSTMODEENTRY_REGULAR;
 8002a14:	2300      	movs	r3, #0
 8002a16:	61fb      	str	r3, [r7, #28]
  if (HAL_HRTIM_WaveformOutputConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_A, HRTIM_OUTPUT_TA1, &pOutputCfg) != HAL_OK)
 8002a18:	463b      	mov	r3, r7
 8002a1a:	2201      	movs	r2, #1
 8002a1c:	2100      	movs	r1, #0
 8002a1e:	482f      	ldr	r0, [pc, #188]	; (8002adc <MX_HRTIM_Init+0x29c>)
 8002a20:	f005 fcec 	bl	80083fc <HAL_HRTIM_WaveformOutputConfig>
 8002a24:	4603      	mov	r3, r0
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d001      	beq.n	8002a2e <MX_HRTIM_Init+0x1ee>
    Error_Handler();
 8002a2a:	f000 fc81 	bl	8003330 <Error_Handler>
  pOutputCfg.Polarity = HRTIM_OUTPUTPOLARITY_HIGH;
 8002a2e:	2300      	movs	r3, #0
 8002a30:	603b      	str	r3, [r7, #0]
  pOutputCfg.ResetSource = HRTIM_OUTPUTRESET_TIMCMP2|HRTIM_OUTPUTRESET_TIMCMP4;
 8002a32:	2350      	movs	r3, #80	; 0x50
 8002a34:	60bb      	str	r3, [r7, #8]
  pOutputCfg.IdleLevel = HRTIM_OUTPUTIDLELEVEL_INACTIVE;
 8002a36:	2300      	movs	r3, #0
 8002a38:	613b      	str	r3, [r7, #16]
  if (HAL_HRTIM_WaveformOutputConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_E, HRTIM_OUTPUT_TE1, &pOutputCfg) != HAL_OK)
 8002a3a:	463b      	mov	r3, r7
 8002a3c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002a40:	2104      	movs	r1, #4
 8002a42:	4826      	ldr	r0, [pc, #152]	; (8002adc <MX_HRTIM_Init+0x29c>)
 8002a44:	f005 fcda 	bl	80083fc <HAL_HRTIM_WaveformOutputConfig>
 8002a48:	4603      	mov	r3, r0
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d001      	beq.n	8002a52 <MX_HRTIM_Init+0x212>
    Error_Handler();
 8002a4e:	f000 fc6f 	bl	8003330 <Error_Handler>
  pOutputCfg.Polarity = HRTIM_OUTPUTPOLARITY_LOW;
 8002a52:	2302      	movs	r3, #2
 8002a54:	603b      	str	r3, [r7, #0]
  pOutputCfg.SetSource = HRTIM_OUTPUTSET_TIMCMP3;
 8002a56:	2320      	movs	r3, #32
 8002a58:	607b      	str	r3, [r7, #4]
  pOutputCfg.ResetSource = HRTIM_OUTPUTRESET_TIMCMP2;
 8002a5a:	2310      	movs	r3, #16
 8002a5c:	60bb      	str	r3, [r7, #8]
  pOutputCfg.IdleLevel = HRTIM_OUTPUTIDLELEVEL_ACTIVE;
 8002a5e:	2308      	movs	r3, #8
 8002a60:	613b      	str	r3, [r7, #16]
  if (HAL_HRTIM_WaveformOutputConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_A, HRTIM_OUTPUT_TA2, &pOutputCfg) != HAL_OK)
 8002a62:	463b      	mov	r3, r7
 8002a64:	2202      	movs	r2, #2
 8002a66:	2100      	movs	r1, #0
 8002a68:	481c      	ldr	r0, [pc, #112]	; (8002adc <MX_HRTIM_Init+0x29c>)
 8002a6a:	f005 fcc7 	bl	80083fc <HAL_HRTIM_WaveformOutputConfig>
 8002a6e:	4603      	mov	r3, r0
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d001      	beq.n	8002a78 <MX_HRTIM_Init+0x238>
    Error_Handler();
 8002a74:	f000 fc5c 	bl	8003330 <Error_Handler>
  if (HAL_HRTIM_TimeBaseConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_E, &pTimeBaseCfg) != HAL_OK)
 8002a78:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8002a7c:	461a      	mov	r2, r3
 8002a7e:	2104      	movs	r1, #4
 8002a80:	4816      	ldr	r0, [pc, #88]	; (8002adc <MX_HRTIM_Init+0x29c>)
 8002a82:	f005 fab3 	bl	8007fec <HAL_HRTIM_TimeBaseConfig>
 8002a86:	4603      	mov	r3, r0
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d001      	beq.n	8002a90 <MX_HRTIM_Init+0x250>
    Error_Handler();
 8002a8c:	f000 fc50 	bl	8003330 <Error_Handler>
  pCompareCfg.CompareValue = PUMP_WIDTH+MICROWAVE_DELAY;
 8002a90:	f240 7353 	movw	r3, #1875	; 0x753
 8002a94:	623b      	str	r3, [r7, #32]
  if (HAL_HRTIM_WaveformCompareConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_E, HRTIM_COMPAREUNIT_1, &pCompareCfg) != HAL_OK)
 8002a96:	f107 0320 	add.w	r3, r7, #32
 8002a9a:	2201      	movs	r2, #1
 8002a9c:	2104      	movs	r1, #4
 8002a9e:	480f      	ldr	r0, [pc, #60]	; (8002adc <MX_HRTIM_Init+0x29c>)
 8002aa0:	f005 fb3e 	bl	8008120 <HAL_HRTIM_WaveformCompareConfig>
 8002aa4:	4603      	mov	r3, r0
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d001      	beq.n	8002aae <MX_HRTIM_Init+0x26e>
    Error_Handler();
 8002aaa:	f000 fc41 	bl	8003330 <Error_Handler>
  pCompareCfg.CompareValue = PUMP_WIDTH+MICROWAVE_DELAY+MICROWAVE_WIDTH+RAMSEY_TIME;
 8002aae:	f643 6342 	movw	r3, #15938	; 0x3e42
 8002ab2:	623b      	str	r3, [r7, #32]
  if (HAL_HRTIM_WaveformCompareConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_E, HRTIM_COMPAREUNIT_3, &pCompareCfg) != HAL_OK)
 8002ab4:	f107 0320 	add.w	r3, r7, #32
 8002ab8:	2204      	movs	r2, #4
 8002aba:	2104      	movs	r1, #4
 8002abc:	4807      	ldr	r0, [pc, #28]	; (8002adc <MX_HRTIM_Init+0x29c>)
 8002abe:	f005 fb2f 	bl	8008120 <HAL_HRTIM_WaveformCompareConfig>
 8002ac2:	4603      	mov	r3, r0
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d001      	beq.n	8002acc <MX_HRTIM_Init+0x28c>
    Error_Handler();
 8002ac8:	f000 fc32 	bl	8003330 <Error_Handler>
  HAL_HRTIM_MspPostInit(&hhrtim);
 8002acc:	4803      	ldr	r0, [pc, #12]	; (8002adc <MX_HRTIM_Init+0x29c>)
 8002ace:	f000 fd71 	bl	80035b4 <HAL_HRTIM_MspPostInit>
}
 8002ad2:	bf00      	nop
 8002ad4:	3790      	adds	r7, #144	; 0x90
 8002ad6:	46bd      	mov	sp, r7
 8002ad8:	bd80      	pop	{r7, pc}
 8002ada:	bf00      	nop
 8002adc:	200002d4 	.word	0x200002d4
 8002ae0:	40017400 	.word	0x40017400

08002ae4 <MX_LPTIM1_Init>:
{
 8002ae4:	b580      	push	{r7, lr}
 8002ae6:	af00      	add	r7, sp, #0
  hlptim1.Instance = LPTIM1;
 8002ae8:	4b13      	ldr	r3, [pc, #76]	; (8002b38 <MX_LPTIM1_Init+0x54>)
 8002aea:	4a14      	ldr	r2, [pc, #80]	; (8002b3c <MX_LPTIM1_Init+0x58>)
 8002aec:	601a      	str	r2, [r3, #0]
  hlptim1.Init.Clock.Source = LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC;
 8002aee:	4b12      	ldr	r3, [pc, #72]	; (8002b38 <MX_LPTIM1_Init+0x54>)
 8002af0:	2200      	movs	r2, #0
 8002af2:	605a      	str	r2, [r3, #4]
  hlptim1.Init.Clock.Prescaler = LPTIM_PRESCALER_DIV32;
 8002af4:	4b10      	ldr	r3, [pc, #64]	; (8002b38 <MX_LPTIM1_Init+0x54>)
 8002af6:	f44f 6220 	mov.w	r2, #2560	; 0xa00
 8002afa:	609a      	str	r2, [r3, #8]
  hlptim1.Init.Trigger.Source = LPTIM_TRIGSOURCE_SOFTWARE;
 8002afc:	4b0e      	ldr	r3, [pc, #56]	; (8002b38 <MX_LPTIM1_Init+0x54>)
 8002afe:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002b02:	615a      	str	r2, [r3, #20]
  hlptim1.Init.OutputPolarity = LPTIM_OUTPUTPOLARITY_HIGH;
 8002b04:	4b0c      	ldr	r3, [pc, #48]	; (8002b38 <MX_LPTIM1_Init+0x54>)
 8002b06:	2200      	movs	r2, #0
 8002b08:	621a      	str	r2, [r3, #32]
  hlptim1.Init.UpdateMode = LPTIM_UPDATE_IMMEDIATE;
 8002b0a:	4b0b      	ldr	r3, [pc, #44]	; (8002b38 <MX_LPTIM1_Init+0x54>)
 8002b0c:	2200      	movs	r2, #0
 8002b0e:	625a      	str	r2, [r3, #36]	; 0x24
  hlptim1.Init.CounterSource = LPTIM_COUNTERSOURCE_INTERNAL;
 8002b10:	4b09      	ldr	r3, [pc, #36]	; (8002b38 <MX_LPTIM1_Init+0x54>)
 8002b12:	2200      	movs	r2, #0
 8002b14:	629a      	str	r2, [r3, #40]	; 0x28
  hlptim1.Init.Input1Source = LPTIM_INPUT1SOURCE_GPIO;
 8002b16:	4b08      	ldr	r3, [pc, #32]	; (8002b38 <MX_LPTIM1_Init+0x54>)
 8002b18:	2200      	movs	r2, #0
 8002b1a:	62da      	str	r2, [r3, #44]	; 0x2c
  hlptim1.Init.Input2Source = LPTIM_INPUT2SOURCE_GPIO;
 8002b1c:	4b06      	ldr	r3, [pc, #24]	; (8002b38 <MX_LPTIM1_Init+0x54>)
 8002b1e:	2200      	movs	r2, #0
 8002b20:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_LPTIM_Init(&hlptim1) != HAL_OK)
 8002b22:	4805      	ldr	r0, [pc, #20]	; (8002b38 <MX_LPTIM1_Init+0x54>)
 8002b24:	f006 fc96 	bl	8009454 <HAL_LPTIM_Init>
 8002b28:	4603      	mov	r3, r0
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d001      	beq.n	8002b32 <MX_LPTIM1_Init+0x4e>
    Error_Handler();
 8002b2e:	f000 fbff 	bl	8003330 <Error_Handler>
}
 8002b32:	bf00      	nop
 8002b34:	bd80      	pop	{r7, pc}
 8002b36:	bf00      	nop
 8002b38:	200003b0 	.word	0x200003b0
 8002b3c:	40002400 	.word	0x40002400

08002b40 <MX_TIM1_Init>:
{
 8002b40:	b580      	push	{r7, lr}
 8002b42:	b088      	sub	sp, #32
 8002b44:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002b46:	f107 0310 	add.w	r3, r7, #16
 8002b4a:	2200      	movs	r2, #0
 8002b4c:	601a      	str	r2, [r3, #0]
 8002b4e:	605a      	str	r2, [r3, #4]
 8002b50:	609a      	str	r2, [r3, #8]
 8002b52:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002b54:	1d3b      	adds	r3, r7, #4
 8002b56:	2200      	movs	r2, #0
 8002b58:	601a      	str	r2, [r3, #0]
 8002b5a:	605a      	str	r2, [r3, #4]
 8002b5c:	609a      	str	r2, [r3, #8]
  htim1.Instance = TIM1;
 8002b5e:	4b20      	ldr	r3, [pc, #128]	; (8002be0 <MX_TIM1_Init+0xa0>)
 8002b60:	4a20      	ldr	r2, [pc, #128]	; (8002be4 <MX_TIM1_Init+0xa4>)
 8002b62:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 1249;
 8002b64:	4b1e      	ldr	r3, [pc, #120]	; (8002be0 <MX_TIM1_Init+0xa0>)
 8002b66:	f240 42e1 	movw	r2, #1249	; 0x4e1
 8002b6a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002b6c:	4b1c      	ldr	r3, [pc, #112]	; (8002be0 <MX_TIM1_Init+0xa0>)
 8002b6e:	2200      	movs	r2, #0
 8002b70:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8002b72:	4b1b      	ldr	r3, [pc, #108]	; (8002be0 <MX_TIM1_Init+0xa0>)
 8002b74:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002b78:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002b7a:	4b19      	ldr	r3, [pc, #100]	; (8002be0 <MX_TIM1_Init+0xa0>)
 8002b7c:	2200      	movs	r2, #0
 8002b7e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002b80:	4b17      	ldr	r3, [pc, #92]	; (8002be0 <MX_TIM1_Init+0xa0>)
 8002b82:	2200      	movs	r2, #0
 8002b84:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002b86:	4b16      	ldr	r3, [pc, #88]	; (8002be0 <MX_TIM1_Init+0xa0>)
 8002b88:	2200      	movs	r2, #0
 8002b8a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8002b8c:	4814      	ldr	r0, [pc, #80]	; (8002be0 <MX_TIM1_Init+0xa0>)
 8002b8e:	f00a fe0f 	bl	800d7b0 <HAL_TIM_Base_Init>
 8002b92:	4603      	mov	r3, r0
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d001      	beq.n	8002b9c <MX_TIM1_Init+0x5c>
    Error_Handler();
 8002b98:	f000 fbca 	bl	8003330 <Error_Handler>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002b9c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002ba0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8002ba2:	f107 0310 	add.w	r3, r7, #16
 8002ba6:	4619      	mov	r1, r3
 8002ba8:	480d      	ldr	r0, [pc, #52]	; (8002be0 <MX_TIM1_Init+0xa0>)
 8002baa:	f00a fe59 	bl	800d860 <HAL_TIM_ConfigClockSource>
 8002bae:	4603      	mov	r3, r0
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d001      	beq.n	8002bb8 <MX_TIM1_Init+0x78>
    Error_Handler();
 8002bb4:	f000 fbbc 	bl	8003330 <Error_Handler>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002bb8:	2300      	movs	r3, #0
 8002bba:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8002bbc:	2300      	movs	r3, #0
 8002bbe:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002bc0:	2300      	movs	r3, #0
 8002bc2:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002bc4:	1d3b      	adds	r3, r7, #4
 8002bc6:	4619      	mov	r1, r3
 8002bc8:	4805      	ldr	r0, [pc, #20]	; (8002be0 <MX_TIM1_Init+0xa0>)
 8002bca:	f00b f879 	bl	800dcc0 <HAL_TIMEx_MasterConfigSynchronization>
 8002bce:	4603      	mov	r3, r0
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d001      	beq.n	8002bd8 <MX_TIM1_Init+0x98>
    Error_Handler();
 8002bd4:	f000 fbac 	bl	8003330 <Error_Handler>
}
 8002bd8:	bf00      	nop
 8002bda:	3720      	adds	r7, #32
 8002bdc:	46bd      	mov	sp, r7
 8002bde:	bd80      	pop	{r7, pc}
 8002be0:	200003e8 	.word	0x200003e8
 8002be4:	40010000 	.word	0x40010000

08002be8 <MX_TIM2_Init>:
{
 8002be8:	b580      	push	{r7, lr}
 8002bea:	b088      	sub	sp, #32
 8002bec:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002bee:	f107 0310 	add.w	r3, r7, #16
 8002bf2:	2200      	movs	r2, #0
 8002bf4:	601a      	str	r2, [r3, #0]
 8002bf6:	605a      	str	r2, [r3, #4]
 8002bf8:	609a      	str	r2, [r3, #8]
 8002bfa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002bfc:	1d3b      	adds	r3, r7, #4
 8002bfe:	2200      	movs	r2, #0
 8002c00:	601a      	str	r2, [r3, #0]
 8002c02:	605a      	str	r2, [r3, #4]
 8002c04:	609a      	str	r2, [r3, #8]
  htim2.Instance = TIM2;
 8002c06:	4b1e      	ldr	r3, [pc, #120]	; (8002c80 <MX_TIM2_Init+0x98>)
 8002c08:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002c0c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 124;
 8002c0e:	4b1c      	ldr	r3, [pc, #112]	; (8002c80 <MX_TIM2_Init+0x98>)
 8002c10:	227c      	movs	r2, #124	; 0x7c
 8002c12:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002c14:	4b1a      	ldr	r3, [pc, #104]	; (8002c80 <MX_TIM2_Init+0x98>)
 8002c16:	2200      	movs	r2, #0
 8002c18:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8002c1a:	4b19      	ldr	r3, [pc, #100]	; (8002c80 <MX_TIM2_Init+0x98>)
 8002c1c:	f04f 32ff 	mov.w	r2, #4294967295
 8002c20:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002c22:	4b17      	ldr	r3, [pc, #92]	; (8002c80 <MX_TIM2_Init+0x98>)
 8002c24:	2200      	movs	r2, #0
 8002c26:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002c28:	4b15      	ldr	r3, [pc, #84]	; (8002c80 <MX_TIM2_Init+0x98>)
 8002c2a:	2200      	movs	r2, #0
 8002c2c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002c2e:	4814      	ldr	r0, [pc, #80]	; (8002c80 <MX_TIM2_Init+0x98>)
 8002c30:	f00a fdbe 	bl	800d7b0 <HAL_TIM_Base_Init>
 8002c34:	4603      	mov	r3, r0
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d001      	beq.n	8002c3e <MX_TIM2_Init+0x56>
    Error_Handler();
 8002c3a:	f000 fb79 	bl	8003330 <Error_Handler>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002c3e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002c42:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002c44:	f107 0310 	add.w	r3, r7, #16
 8002c48:	4619      	mov	r1, r3
 8002c4a:	480d      	ldr	r0, [pc, #52]	; (8002c80 <MX_TIM2_Init+0x98>)
 8002c4c:	f00a fe08 	bl	800d860 <HAL_TIM_ConfigClockSource>
 8002c50:	4603      	mov	r3, r0
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d001      	beq.n	8002c5a <MX_TIM2_Init+0x72>
    Error_Handler();
 8002c56:	f000 fb6b 	bl	8003330 <Error_Handler>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002c5a:	2300      	movs	r3, #0
 8002c5c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002c5e:	2300      	movs	r3, #0
 8002c60:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002c62:	1d3b      	adds	r3, r7, #4
 8002c64:	4619      	mov	r1, r3
 8002c66:	4806      	ldr	r0, [pc, #24]	; (8002c80 <MX_TIM2_Init+0x98>)
 8002c68:	f00b f82a 	bl	800dcc0 <HAL_TIMEx_MasterConfigSynchronization>
 8002c6c:	4603      	mov	r3, r0
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d001      	beq.n	8002c76 <MX_TIM2_Init+0x8e>
    Error_Handler();
 8002c72:	f000 fb5d 	bl	8003330 <Error_Handler>
}
 8002c76:	bf00      	nop
 8002c78:	3720      	adds	r7, #32
 8002c7a:	46bd      	mov	sp, r7
 8002c7c:	bd80      	pop	{r7, pc}
 8002c7e:	bf00      	nop
 8002c80:	20000434 	.word	0x20000434

08002c84 <MX_TIM3_Init>:
{
 8002c84:	b580      	push	{r7, lr}
 8002c86:	b088      	sub	sp, #32
 8002c88:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002c8a:	f107 0310 	add.w	r3, r7, #16
 8002c8e:	2200      	movs	r2, #0
 8002c90:	601a      	str	r2, [r3, #0]
 8002c92:	605a      	str	r2, [r3, #4]
 8002c94:	609a      	str	r2, [r3, #8]
 8002c96:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002c98:	1d3b      	adds	r3, r7, #4
 8002c9a:	2200      	movs	r2, #0
 8002c9c:	601a      	str	r2, [r3, #0]
 8002c9e:	605a      	str	r2, [r3, #4]
 8002ca0:	609a      	str	r2, [r3, #8]
  htim3.Instance = TIM3;
 8002ca2:	4b1d      	ldr	r3, [pc, #116]	; (8002d18 <MX_TIM3_Init+0x94>)
 8002ca4:	4a1d      	ldr	r2, [pc, #116]	; (8002d1c <MX_TIM3_Init+0x98>)
 8002ca6:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 124;
 8002ca8:	4b1b      	ldr	r3, [pc, #108]	; (8002d18 <MX_TIM3_Init+0x94>)
 8002caa:	227c      	movs	r2, #124	; 0x7c
 8002cac:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002cae:	4b1a      	ldr	r3, [pc, #104]	; (8002d18 <MX_TIM3_Init+0x94>)
 8002cb0:	2200      	movs	r2, #0
 8002cb2:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8002cb4:	4b18      	ldr	r3, [pc, #96]	; (8002d18 <MX_TIM3_Init+0x94>)
 8002cb6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002cba:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002cbc:	4b16      	ldr	r3, [pc, #88]	; (8002d18 <MX_TIM3_Init+0x94>)
 8002cbe:	2200      	movs	r2, #0
 8002cc0:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002cc2:	4b15      	ldr	r3, [pc, #84]	; (8002d18 <MX_TIM3_Init+0x94>)
 8002cc4:	2200      	movs	r2, #0
 8002cc6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8002cc8:	4813      	ldr	r0, [pc, #76]	; (8002d18 <MX_TIM3_Init+0x94>)
 8002cca:	f00a fd71 	bl	800d7b0 <HAL_TIM_Base_Init>
 8002cce:	4603      	mov	r3, r0
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d001      	beq.n	8002cd8 <MX_TIM3_Init+0x54>
    Error_Handler();
 8002cd4:	f000 fb2c 	bl	8003330 <Error_Handler>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002cd8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002cdc:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002cde:	f107 0310 	add.w	r3, r7, #16
 8002ce2:	4619      	mov	r1, r3
 8002ce4:	480c      	ldr	r0, [pc, #48]	; (8002d18 <MX_TIM3_Init+0x94>)
 8002ce6:	f00a fdbb 	bl	800d860 <HAL_TIM_ConfigClockSource>
 8002cea:	4603      	mov	r3, r0
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d001      	beq.n	8002cf4 <MX_TIM3_Init+0x70>
    Error_Handler();
 8002cf0:	f000 fb1e 	bl	8003330 <Error_Handler>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002cf4:	2300      	movs	r3, #0
 8002cf6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002cf8:	2300      	movs	r3, #0
 8002cfa:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002cfc:	1d3b      	adds	r3, r7, #4
 8002cfe:	4619      	mov	r1, r3
 8002d00:	4805      	ldr	r0, [pc, #20]	; (8002d18 <MX_TIM3_Init+0x94>)
 8002d02:	f00a ffdd 	bl	800dcc0 <HAL_TIMEx_MasterConfigSynchronization>
 8002d06:	4603      	mov	r3, r0
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d001      	beq.n	8002d10 <MX_TIM3_Init+0x8c>
    Error_Handler();
 8002d0c:	f000 fb10 	bl	8003330 <Error_Handler>
}
 8002d10:	bf00      	nop
 8002d12:	3720      	adds	r7, #32
 8002d14:	46bd      	mov	sp, r7
 8002d16:	bd80      	pop	{r7, pc}
 8002d18:	20000480 	.word	0x20000480
 8002d1c:	40000400 	.word	0x40000400

08002d20 <MX_TIM4_Init>:
{
 8002d20:	b580      	push	{r7, lr}
 8002d22:	b088      	sub	sp, #32
 8002d24:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002d26:	f107 0310 	add.w	r3, r7, #16
 8002d2a:	2200      	movs	r2, #0
 8002d2c:	601a      	str	r2, [r3, #0]
 8002d2e:	605a      	str	r2, [r3, #4]
 8002d30:	609a      	str	r2, [r3, #8]
 8002d32:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002d34:	1d3b      	adds	r3, r7, #4
 8002d36:	2200      	movs	r2, #0
 8002d38:	601a      	str	r2, [r3, #0]
 8002d3a:	605a      	str	r2, [r3, #4]
 8002d3c:	609a      	str	r2, [r3, #8]
  htim4.Instance = TIM4;
 8002d3e:	4b1e      	ldr	r3, [pc, #120]	; (8002db8 <MX_TIM4_Init+0x98>)
 8002d40:	4a1e      	ldr	r2, [pc, #120]	; (8002dbc <MX_TIM4_Init+0x9c>)
 8002d42:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 62499;
 8002d44:	4b1c      	ldr	r3, [pc, #112]	; (8002db8 <MX_TIM4_Init+0x98>)
 8002d46:	f24f 4223 	movw	r2, #62499	; 0xf423
 8002d4a:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002d4c:	4b1a      	ldr	r3, [pc, #104]	; (8002db8 <MX_TIM4_Init+0x98>)
 8002d4e:	2200      	movs	r2, #0
 8002d50:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8002d52:	4b19      	ldr	r3, [pc, #100]	; (8002db8 <MX_TIM4_Init+0x98>)
 8002d54:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002d58:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002d5a:	4b17      	ldr	r3, [pc, #92]	; (8002db8 <MX_TIM4_Init+0x98>)
 8002d5c:	2200      	movs	r2, #0
 8002d5e:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002d60:	4b15      	ldr	r3, [pc, #84]	; (8002db8 <MX_TIM4_Init+0x98>)
 8002d62:	2200      	movs	r2, #0
 8002d64:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8002d66:	4814      	ldr	r0, [pc, #80]	; (8002db8 <MX_TIM4_Init+0x98>)
 8002d68:	f00a fd22 	bl	800d7b0 <HAL_TIM_Base_Init>
 8002d6c:	4603      	mov	r3, r0
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d001      	beq.n	8002d76 <MX_TIM4_Init+0x56>
    Error_Handler();
 8002d72:	f000 fadd 	bl	8003330 <Error_Handler>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002d76:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002d7a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8002d7c:	f107 0310 	add.w	r3, r7, #16
 8002d80:	4619      	mov	r1, r3
 8002d82:	480d      	ldr	r0, [pc, #52]	; (8002db8 <MX_TIM4_Init+0x98>)
 8002d84:	f00a fd6c 	bl	800d860 <HAL_TIM_ConfigClockSource>
 8002d88:	4603      	mov	r3, r0
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d001      	beq.n	8002d92 <MX_TIM4_Init+0x72>
    Error_Handler();
 8002d8e:	f000 facf 	bl	8003330 <Error_Handler>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002d92:	2300      	movs	r3, #0
 8002d94:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002d96:	2300      	movs	r3, #0
 8002d98:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8002d9a:	1d3b      	adds	r3, r7, #4
 8002d9c:	4619      	mov	r1, r3
 8002d9e:	4806      	ldr	r0, [pc, #24]	; (8002db8 <MX_TIM4_Init+0x98>)
 8002da0:	f00a ff8e 	bl	800dcc0 <HAL_TIMEx_MasterConfigSynchronization>
 8002da4:	4603      	mov	r3, r0
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d001      	beq.n	8002dae <MX_TIM4_Init+0x8e>
    Error_Handler();
 8002daa:	f000 fac1 	bl	8003330 <Error_Handler>
}
 8002dae:	bf00      	nop
 8002db0:	3720      	adds	r7, #32
 8002db2:	46bd      	mov	sp, r7
 8002db4:	bd80      	pop	{r7, pc}
 8002db6:	bf00      	nop
 8002db8:	200004cc 	.word	0x200004cc
 8002dbc:	40000800 	.word	0x40000800

08002dc0 <MX_TIM5_Init>:
{
 8002dc0:	b580      	push	{r7, lr}
 8002dc2:	b088      	sub	sp, #32
 8002dc4:	af00      	add	r7, sp, #0
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002dc6:	f107 0310 	add.w	r3, r7, #16
 8002dca:	2200      	movs	r2, #0
 8002dcc:	601a      	str	r2, [r3, #0]
 8002dce:	605a      	str	r2, [r3, #4]
 8002dd0:	609a      	str	r2, [r3, #8]
 8002dd2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002dd4:	1d3b      	adds	r3, r7, #4
 8002dd6:	2200      	movs	r2, #0
 8002dd8:	601a      	str	r2, [r3, #0]
 8002dda:	605a      	str	r2, [r3, #4]
 8002ddc:	609a      	str	r2, [r3, #8]
  htim5.Instance = TIM5;
 8002dde:	4b1d      	ldr	r3, [pc, #116]	; (8002e54 <MX_TIM5_Init+0x94>)
 8002de0:	4a1d      	ldr	r2, [pc, #116]	; (8002e58 <MX_TIM5_Init+0x98>)
 8002de2:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 124;
 8002de4:	4b1b      	ldr	r3, [pc, #108]	; (8002e54 <MX_TIM5_Init+0x94>)
 8002de6:	227c      	movs	r2, #124	; 0x7c
 8002de8:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002dea:	4b1a      	ldr	r3, [pc, #104]	; (8002e54 <MX_TIM5_Init+0x94>)
 8002dec:	2200      	movs	r2, #0
 8002dee:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8002df0:	4b18      	ldr	r3, [pc, #96]	; (8002e54 <MX_TIM5_Init+0x94>)
 8002df2:	f04f 32ff 	mov.w	r2, #4294967295
 8002df6:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002df8:	4b16      	ldr	r3, [pc, #88]	; (8002e54 <MX_TIM5_Init+0x94>)
 8002dfa:	2200      	movs	r2, #0
 8002dfc:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002dfe:	4b15      	ldr	r3, [pc, #84]	; (8002e54 <MX_TIM5_Init+0x94>)
 8002e00:	2200      	movs	r2, #0
 8002e02:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8002e04:	4813      	ldr	r0, [pc, #76]	; (8002e54 <MX_TIM5_Init+0x94>)
 8002e06:	f00a fcd3 	bl	800d7b0 <HAL_TIM_Base_Init>
 8002e0a:	4603      	mov	r3, r0
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d001      	beq.n	8002e14 <MX_TIM5_Init+0x54>
    Error_Handler();
 8002e10:	f000 fa8e 	bl	8003330 <Error_Handler>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002e14:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002e18:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8002e1a:	f107 0310 	add.w	r3, r7, #16
 8002e1e:	4619      	mov	r1, r3
 8002e20:	480c      	ldr	r0, [pc, #48]	; (8002e54 <MX_TIM5_Init+0x94>)
 8002e22:	f00a fd1d 	bl	800d860 <HAL_TIM_ConfigClockSource>
 8002e26:	4603      	mov	r3, r0
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d001      	beq.n	8002e30 <MX_TIM5_Init+0x70>
    Error_Handler();
 8002e2c:	f000 fa80 	bl	8003330 <Error_Handler>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002e30:	2300      	movs	r3, #0
 8002e32:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002e34:	2300      	movs	r3, #0
 8002e36:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8002e38:	1d3b      	adds	r3, r7, #4
 8002e3a:	4619      	mov	r1, r3
 8002e3c:	4805      	ldr	r0, [pc, #20]	; (8002e54 <MX_TIM5_Init+0x94>)
 8002e3e:	f00a ff3f 	bl	800dcc0 <HAL_TIMEx_MasterConfigSynchronization>
 8002e42:	4603      	mov	r3, r0
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d001      	beq.n	8002e4c <MX_TIM5_Init+0x8c>
    Error_Handler();
 8002e48:	f000 fa72 	bl	8003330 <Error_Handler>
}
 8002e4c:	bf00      	nop
 8002e4e:	3720      	adds	r7, #32
 8002e50:	46bd      	mov	sp, r7
 8002e52:	bd80      	pop	{r7, pc}
 8002e54:	20000518 	.word	0x20000518
 8002e58:	40000c00 	.word	0x40000c00

08002e5c <MX_USART3_UART_Init>:
{
 8002e5c:	b580      	push	{r7, lr}
 8002e5e:	af00      	add	r7, sp, #0
  huart3.Instance = USART3;
 8002e60:	4b22      	ldr	r3, [pc, #136]	; (8002eec <MX_USART3_UART_Init+0x90>)
 8002e62:	4a23      	ldr	r2, [pc, #140]	; (8002ef0 <MX_USART3_UART_Init+0x94>)
 8002e64:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 1000000;
 8002e66:	4b21      	ldr	r3, [pc, #132]	; (8002eec <MX_USART3_UART_Init+0x90>)
 8002e68:	4a22      	ldr	r2, [pc, #136]	; (8002ef4 <MX_USART3_UART_Init+0x98>)
 8002e6a:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002e6c:	4b1f      	ldr	r3, [pc, #124]	; (8002eec <MX_USART3_UART_Init+0x90>)
 8002e6e:	2200      	movs	r2, #0
 8002e70:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002e72:	4b1e      	ldr	r3, [pc, #120]	; (8002eec <MX_USART3_UART_Init+0x90>)
 8002e74:	2200      	movs	r2, #0
 8002e76:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8002e78:	4b1c      	ldr	r3, [pc, #112]	; (8002eec <MX_USART3_UART_Init+0x90>)
 8002e7a:	2200      	movs	r2, #0
 8002e7c:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002e7e:	4b1b      	ldr	r3, [pc, #108]	; (8002eec <MX_USART3_UART_Init+0x90>)
 8002e80:	220c      	movs	r2, #12
 8002e82:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002e84:	4b19      	ldr	r3, [pc, #100]	; (8002eec <MX_USART3_UART_Init+0x90>)
 8002e86:	2200      	movs	r2, #0
 8002e88:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002e8a:	4b18      	ldr	r3, [pc, #96]	; (8002eec <MX_USART3_UART_Init+0x90>)
 8002e8c:	2200      	movs	r2, #0
 8002e8e:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002e90:	4b16      	ldr	r3, [pc, #88]	; (8002eec <MX_USART3_UART_Init+0x90>)
 8002e92:	2200      	movs	r2, #0
 8002e94:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002e96:	4b15      	ldr	r3, [pc, #84]	; (8002eec <MX_USART3_UART_Init+0x90>)
 8002e98:	2200      	movs	r2, #0
 8002e9a:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002e9c:	4b13      	ldr	r3, [pc, #76]	; (8002eec <MX_USART3_UART_Init+0x90>)
 8002e9e:	2200      	movs	r2, #0
 8002ea0:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002ea2:	4812      	ldr	r0, [pc, #72]	; (8002eec <MX_USART3_UART_Init+0x90>)
 8002ea4:	f00a ff9a 	bl	800dddc <HAL_UART_Init>
 8002ea8:	4603      	mov	r3, r0
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d001      	beq.n	8002eb2 <MX_USART3_UART_Init+0x56>
    Error_Handler();
 8002eae:	f000 fa3f 	bl	8003330 <Error_Handler>
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002eb2:	2100      	movs	r1, #0
 8002eb4:	480d      	ldr	r0, [pc, #52]	; (8002eec <MX_USART3_UART_Init+0x90>)
 8002eb6:	f00c f82a 	bl	800ef0e <HAL_UARTEx_SetTxFifoThreshold>
 8002eba:	4603      	mov	r3, r0
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d001      	beq.n	8002ec4 <MX_USART3_UART_Init+0x68>
    Error_Handler();
 8002ec0:	f000 fa36 	bl	8003330 <Error_Handler>
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8002ec4:	2100      	movs	r1, #0
 8002ec6:	4809      	ldr	r0, [pc, #36]	; (8002eec <MX_USART3_UART_Init+0x90>)
 8002ec8:	f00c f85f 	bl	800ef8a <HAL_UARTEx_SetRxFifoThreshold>
 8002ecc:	4603      	mov	r3, r0
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d001      	beq.n	8002ed6 <MX_USART3_UART_Init+0x7a>
    Error_Handler();
 8002ed2:	f000 fa2d 	bl	8003330 <Error_Handler>
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8002ed6:	4805      	ldr	r0, [pc, #20]	; (8002eec <MX_USART3_UART_Init+0x90>)
 8002ed8:	f00b ffe0 	bl	800ee9c <HAL_UARTEx_DisableFifoMode>
 8002edc:	4603      	mov	r3, r0
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d001      	beq.n	8002ee6 <MX_USART3_UART_Init+0x8a>
    Error_Handler();
 8002ee2:	f000 fa25 	bl	8003330 <Error_Handler>
}
 8002ee6:	bf00      	nop
 8002ee8:	bd80      	pop	{r7, pc}
 8002eea:	bf00      	nop
 8002eec:	20000564 	.word	0x20000564
 8002ef0:	40004800 	.word	0x40004800
 8002ef4:	000f4240 	.word	0x000f4240

08002ef8 <MX_GPIO_Init>:
{
 8002ef8:	b580      	push	{r7, lr}
 8002efa:	b08e      	sub	sp, #56	; 0x38
 8002efc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002efe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002f02:	2200      	movs	r2, #0
 8002f04:	601a      	str	r2, [r3, #0]
 8002f06:	605a      	str	r2, [r3, #4]
 8002f08:	609a      	str	r2, [r3, #8]
 8002f0a:	60da      	str	r2, [r3, #12]
 8002f0c:	611a      	str	r2, [r3, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002f0e:	4ba0      	ldr	r3, [pc, #640]	; (8003190 <MX_GPIO_Init+0x298>)
 8002f10:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002f14:	4a9e      	ldr	r2, [pc, #632]	; (8003190 <MX_GPIO_Init+0x298>)
 8002f16:	f043 0310 	orr.w	r3, r3, #16
 8002f1a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002f1e:	4b9c      	ldr	r3, [pc, #624]	; (8003190 <MX_GPIO_Init+0x298>)
 8002f20:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002f24:	f003 0310 	and.w	r3, r3, #16
 8002f28:	623b      	str	r3, [r7, #32]
 8002f2a:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002f2c:	4b98      	ldr	r3, [pc, #608]	; (8003190 <MX_GPIO_Init+0x298>)
 8002f2e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002f32:	4a97      	ldr	r2, [pc, #604]	; (8003190 <MX_GPIO_Init+0x298>)
 8002f34:	f043 0304 	orr.w	r3, r3, #4
 8002f38:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002f3c:	4b94      	ldr	r3, [pc, #592]	; (8003190 <MX_GPIO_Init+0x298>)
 8002f3e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002f42:	f003 0304 	and.w	r3, r3, #4
 8002f46:	61fb      	str	r3, [r7, #28]
 8002f48:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002f4a:	4b91      	ldr	r3, [pc, #580]	; (8003190 <MX_GPIO_Init+0x298>)
 8002f4c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002f50:	4a8f      	ldr	r2, [pc, #572]	; (8003190 <MX_GPIO_Init+0x298>)
 8002f52:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002f56:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002f5a:	4b8d      	ldr	r3, [pc, #564]	; (8003190 <MX_GPIO_Init+0x298>)
 8002f5c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002f60:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f64:	61bb      	str	r3, [r7, #24]
 8002f66:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002f68:	4b89      	ldr	r3, [pc, #548]	; (8003190 <MX_GPIO_Init+0x298>)
 8002f6a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002f6e:	4a88      	ldr	r2, [pc, #544]	; (8003190 <MX_GPIO_Init+0x298>)
 8002f70:	f043 0301 	orr.w	r3, r3, #1
 8002f74:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002f78:	4b85      	ldr	r3, [pc, #532]	; (8003190 <MX_GPIO_Init+0x298>)
 8002f7a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002f7e:	f003 0301 	and.w	r3, r3, #1
 8002f82:	617b      	str	r3, [r7, #20]
 8002f84:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002f86:	4b82      	ldr	r3, [pc, #520]	; (8003190 <MX_GPIO_Init+0x298>)
 8002f88:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002f8c:	4a80      	ldr	r2, [pc, #512]	; (8003190 <MX_GPIO_Init+0x298>)
 8002f8e:	f043 0302 	orr.w	r3, r3, #2
 8002f92:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002f96:	4b7e      	ldr	r3, [pc, #504]	; (8003190 <MX_GPIO_Init+0x298>)
 8002f98:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002f9c:	f003 0302 	and.w	r3, r3, #2
 8002fa0:	613b      	str	r3, [r7, #16]
 8002fa2:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002fa4:	4b7a      	ldr	r3, [pc, #488]	; (8003190 <MX_GPIO_Init+0x298>)
 8002fa6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002faa:	4a79      	ldr	r2, [pc, #484]	; (8003190 <MX_GPIO_Init+0x298>)
 8002fac:	f043 0320 	orr.w	r3, r3, #32
 8002fb0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002fb4:	4b76      	ldr	r3, [pc, #472]	; (8003190 <MX_GPIO_Init+0x298>)
 8002fb6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002fba:	f003 0320 	and.w	r3, r3, #32
 8002fbe:	60fb      	str	r3, [r7, #12]
 8002fc0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8002fc2:	4b73      	ldr	r3, [pc, #460]	; (8003190 <MX_GPIO_Init+0x298>)
 8002fc4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002fc8:	4a71      	ldr	r2, [pc, #452]	; (8003190 <MX_GPIO_Init+0x298>)
 8002fca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002fce:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002fd2:	4b6f      	ldr	r3, [pc, #444]	; (8003190 <MX_GPIO_Init+0x298>)
 8002fd4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002fd8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002fdc:	60bb      	str	r3, [r7, #8]
 8002fde:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002fe0:	4b6b      	ldr	r3, [pc, #428]	; (8003190 <MX_GPIO_Init+0x298>)
 8002fe2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002fe6:	4a6a      	ldr	r2, [pc, #424]	; (8003190 <MX_GPIO_Init+0x298>)
 8002fe8:	f043 0308 	orr.w	r3, r3, #8
 8002fec:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002ff0:	4b67      	ldr	r3, [pc, #412]	; (8003190 <MX_GPIO_Init+0x298>)
 8002ff2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002ff6:	f003 0308 	and.w	r3, r3, #8
 8002ffa:	607b      	str	r3, [r7, #4]
 8002ffc:	687b      	ldr	r3, [r7, #4]
  HAL_GPIO_WritePin(GPIOE, ATT_4_Pin|ATT_8_Pin|ATT_16_Pin, GPIO_PIN_SET);
 8002ffe:	2201      	movs	r2, #1
 8003000:	2134      	movs	r1, #52	; 0x34
 8003002:	4864      	ldr	r0, [pc, #400]	; (8003194 <MX_GPIO_Init+0x29c>)
 8003004:	f004 feca 	bl	8007d9c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|MW_INVALID_Pin|LASER_TUNING_Pin|LD3_Pin
 8003008:	2200      	movs	r2, #0
 800300a:	f245 1103 	movw	r1, #20739	; 0x5103
 800300e:	4862      	ldr	r0, [pc, #392]	; (8003198 <MX_GPIO_Init+0x2a0>)
 8003010:	f004 fec4 	bl	8007d9c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(SCOPE_TRIG_OUT_GPIO_Port, SCOPE_TRIG_OUT_Pin, GPIO_PIN_RESET);
 8003014:	2200      	movs	r2, #0
 8003016:	2101      	movs	r1, #1
 8003018:	4860      	ldr	r0, [pc, #384]	; (800319c <MX_GPIO_Init+0x2a4>)
 800301a:	f004 febf 	bl	8007d9c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(USB_OTG_FS_PWR_EN_GPIO_Port, USB_OTG_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 800301e:	2200      	movs	r2, #0
 8003020:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8003024:	485e      	ldr	r0, [pc, #376]	; (80031a0 <MX_GPIO_Init+0x2a8>)
 8003026:	f004 feb9 	bl	8007d9c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC, SCLK_Pin|MOSI_Pin|REG_EN_Pin, GPIO_PIN_RESET);
 800302a:	2200      	movs	r2, #0
 800302c:	f44f 5198 	mov.w	r1, #4864	; 0x1300
 8003030:	485c      	ldr	r0, [pc, #368]	; (80031a4 <MX_GPIO_Init+0x2ac>)
 8003032:	f004 feb3 	bl	8007d9c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(SEN_GPIO_Port, SEN_Pin, GPIO_PIN_SET);
 8003036:	2201      	movs	r2, #1
 8003038:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800303c:	4859      	ldr	r0, [pc, #356]	; (80031a4 <MX_GPIO_Init+0x2ac>)
 800303e:	f004 fead 	bl	8007d9c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOD, ATT_2_Pin|ATT_1_Pin|ATT_05_Pin|ATT_025_Pin
 8003042:	2201      	movs	r2, #1
 8003044:	21f8      	movs	r1, #248	; 0xf8
 8003046:	4856      	ldr	r0, [pc, #344]	; (80031a0 <MX_GPIO_Init+0x2a8>)
 8003048:	f004 fea8 	bl	8007d9c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800304c:	2200      	movs	r2, #0
 800304e:	2102      	movs	r1, #2
 8003050:	4850      	ldr	r0, [pc, #320]	; (8003194 <MX_GPIO_Init+0x29c>)
 8003052:	f004 fea3 	bl	8007d9c <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = ATT_4_Pin|ATT_8_Pin|ATT_16_Pin|LD2_Pin;
 8003056:	2336      	movs	r3, #54	; 0x36
 8003058:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800305a:	2301      	movs	r3, #1
 800305c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800305e:	2300      	movs	r3, #0
 8003060:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003062:	2300      	movs	r3, #0
 8003064:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003066:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800306a:	4619      	mov	r1, r3
 800306c:	4849      	ldr	r0, [pc, #292]	; (8003194 <MX_GPIO_Init+0x29c>)
 800306e:	f004 fccd 	bl	8007a0c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = BLUE_BUTTON_Pin;
 8003072:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003076:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003078:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800307c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800307e:	2300      	movs	r3, #0
 8003080:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(BLUE_BUTTON_GPIO_Port, &GPIO_InitStruct);
 8003082:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003086:	4619      	mov	r1, r3
 8003088:	4846      	ldr	r0, [pc, #280]	; (80031a4 <MX_GPIO_Init+0x2ac>)
 800308a:	f004 fcbf 	bl	8007a0c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = LD1_Pin|MW_INVALID_Pin|LASER_TUNING_Pin|LD3_Pin
 800308e:	f245 1303 	movw	r3, #20739	; 0x5103
 8003092:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003094:	2301      	movs	r3, #1
 8003096:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003098:	2300      	movs	r3, #0
 800309a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800309c:	2300      	movs	r3, #0
 800309e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80030a0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80030a4:	4619      	mov	r1, r3
 80030a6:	483c      	ldr	r0, [pc, #240]	; (8003198 <MX_GPIO_Init+0x2a0>)
 80030a8:	f004 fcb0 	bl	8007a0c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 80030ac:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80030b0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80030b2:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80030b6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030b8:	2300      	movs	r3, #0
 80030ba:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80030bc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80030c0:	4619      	mov	r1, r3
 80030c2:	4839      	ldr	r0, [pc, #228]	; (80031a8 <MX_GPIO_Init+0x2b0>)
 80030c4:	f004 fca2 	bl	8007a0c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = SCOPE_TRIG_OUT_Pin;
 80030c8:	2301      	movs	r3, #1
 80030ca:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80030cc:	2301      	movs	r3, #1
 80030ce:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030d0:	2300      	movs	r3, #0
 80030d2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80030d4:	2300      	movs	r3, #0
 80030d6:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(SCOPE_TRIG_OUT_GPIO_Port, &GPIO_InitStruct);
 80030d8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80030dc:	4619      	mov	r1, r3
 80030de:	482f      	ldr	r0, [pc, #188]	; (800319c <MX_GPIO_Init+0x2a4>)
 80030e0:	f004 fc94 	bl	8007a0c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin|ATT_2_Pin|ATT_1_Pin|ATT_05_Pin
 80030e4:	f44f 639f 	mov.w	r3, #1272	; 0x4f8
 80030e8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80030ea:	2301      	movs	r3, #1
 80030ec:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030ee:	2300      	movs	r3, #0
 80030f0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80030f2:	2300      	movs	r3, #0
 80030f4:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80030f6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80030fa:	4619      	mov	r1, r3
 80030fc:	4828      	ldr	r0, [pc, #160]	; (80031a0 <MX_GPIO_Init+0x2a8>)
 80030fe:	f004 fc85 	bl	8007a0c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = USB_OTG_FS_OVCR_Pin;
 8003102:	2380      	movs	r3, #128	; 0x80
 8003104:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003106:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800310a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800310c:	2300      	movs	r3, #0
 800310e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_OTG_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 8003110:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003114:	4619      	mov	r1, r3
 8003116:	4821      	ldr	r0, [pc, #132]	; (800319c <MX_GPIO_Init+0x2a4>)
 8003118:	f004 fc78 	bl	8007a0c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = SCLK_Pin|MOSI_Pin|SEN_Pin|REG_EN_Pin;
 800311c:	f44f 53d8 	mov.w	r3, #6912	; 0x1b00
 8003120:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003122:	2301      	movs	r3, #1
 8003124:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8003126:	2302      	movs	r3, #2
 8003128:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800312a:	2300      	movs	r3, #0
 800312c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800312e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003132:	4619      	mov	r1, r3
 8003134:	481b      	ldr	r0, [pc, #108]	; (80031a4 <MX_GPIO_Init+0x2ac>)
 8003136:	f004 fc69 	bl	8007a0c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 800313a:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 800313e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003140:	2302      	movs	r3, #2
 8003142:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003144:	2300      	movs	r3, #0
 8003146:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003148:	2300      	movs	r3, #0
 800314a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 800314c:	230a      	movs	r3, #10
 800314e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003150:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003154:	4619      	mov	r1, r3
 8003156:	4815      	ldr	r0, [pc, #84]	; (80031ac <MX_GPIO_Init+0x2b4>)
 8003158:	f004 fc58 	bl	8007a0c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = MISO_Pin;
 800315c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003160:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003162:	2300      	movs	r3, #0
 8003164:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003166:	2300      	movs	r3, #0
 8003168:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(MISO_GPIO_Port, &GPIO_InitStruct);
 800316a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800316e:	4619      	mov	r1, r3
 8003170:	480c      	ldr	r0, [pc, #48]	; (80031a4 <MX_GPIO_Init+0x2ac>)
 8003172:	f004 fc4b 	bl	8007a0c <HAL_GPIO_Init>
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8003176:	2200      	movs	r2, #0
 8003178:	2100      	movs	r1, #0
 800317a:	2028      	movs	r0, #40	; 0x28
 800317c:	f002 febd 	bl	8005efa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8003180:	2028      	movs	r0, #40	; 0x28
 8003182:	f002 fed4 	bl	8005f2e <HAL_NVIC_EnableIRQ>
}
 8003186:	bf00      	nop
 8003188:	3738      	adds	r7, #56	; 0x38
 800318a:	46bd      	mov	sp, r7
 800318c:	bd80      	pop	{r7, pc}
 800318e:	bf00      	nop
 8003190:	58024400 	.word	0x58024400
 8003194:	58021000 	.word	0x58021000
 8003198:	58020400 	.word	0x58020400
 800319c:	58021800 	.word	0x58021800
 80031a0:	58020c00 	.word	0x58020c00
 80031a4:	58020800 	.word	0x58020800
 80031a8:	58021400 	.word	0x58021400
 80031ac:	58020000 	.word	0x58020000

080031b0 <HAL_ADC_ConvCpltCallback>:
{
 80031b0:	b580      	push	{r7, lr}
 80031b2:	b082      	sub	sp, #8
 80031b4:	af00      	add	r7, sp, #0
 80031b6:	6078      	str	r0, [r7, #4]
  adc_val = 0x0000FFFF & HAL_ADC_GetValue(&hadc3); //ensure that only 16 bits are recorded
 80031b8:	482a      	ldr	r0, [pc, #168]	; (8003264 <HAL_ADC_ConvCpltCallback+0xb4>)
 80031ba:	f001 fd59 	bl	8004c70 <HAL_ADC_GetValue>
 80031be:	4603      	mov	r3, r0
 80031c0:	b29b      	uxth	r3, r3
 80031c2:	4a29      	ldr	r2, [pc, #164]	; (8003268 <HAL_ADC_ConvCpltCallback+0xb8>)
 80031c4:	6013      	str	r3, [r2, #0]
  sample_count++;
 80031c6:	4b29      	ldr	r3, [pc, #164]	; (800326c <HAL_ADC_ConvCpltCallback+0xbc>)
 80031c8:	881b      	ldrh	r3, [r3, #0]
 80031ca:	b29b      	uxth	r3, r3
 80031cc:	3301      	adds	r3, #1
 80031ce:	b29a      	uxth	r2, r3
 80031d0:	4b26      	ldr	r3, [pc, #152]	; (800326c <HAL_ADC_ConvCpltCallback+0xbc>)
 80031d2:	801a      	strh	r2, [r3, #0]
		adc_readings_total = adc_readings_total + adc_val;
 80031d4:	4b26      	ldr	r3, [pc, #152]	; (8003270 <HAL_ADC_ConvCpltCallback+0xc0>)
 80031d6:	681a      	ldr	r2, [r3, #0]
 80031d8:	4b23      	ldr	r3, [pc, #140]	; (8003268 <HAL_ADC_ConvCpltCallback+0xb8>)
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	4413      	add	r3, r2
 80031de:	4a24      	ldr	r2, [pc, #144]	; (8003270 <HAL_ADC_ConvCpltCallback+0xc0>)
 80031e0:	6013      	str	r3, [r2, #0]
		if (sample_count >= ADC_SAMPLES) {//if the sample buffer is full
 80031e2:	4b22      	ldr	r3, [pc, #136]	; (800326c <HAL_ADC_ConvCpltCallback+0xbc>)
 80031e4:	881b      	ldrh	r3, [r3, #0]
 80031e6:	b29b      	uxth	r3, r3
 80031e8:	2b07      	cmp	r3, #7
 80031ea:	d912      	bls.n	8003212 <HAL_ADC_ConvCpltCallback+0x62>
			adc_readings_total = adc_readings_total - adc_readings[adc_sample_no]; //subtract the expired value from the total
 80031ec:	4b20      	ldr	r3, [pc, #128]	; (8003270 <HAL_ADC_ConvCpltCallback+0xc0>)
 80031ee:	681a      	ldr	r2, [r3, #0]
 80031f0:	4b20      	ldr	r3, [pc, #128]	; (8003274 <HAL_ADC_ConvCpltCallback+0xc4>)
 80031f2:	881b      	ldrh	r3, [r3, #0]
 80031f4:	4619      	mov	r1, r3
 80031f6:	4b20      	ldr	r3, [pc, #128]	; (8003278 <HAL_ADC_ConvCpltCallback+0xc8>)
 80031f8:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80031fc:	1ad3      	subs	r3, r2, r3
 80031fe:	4a1c      	ldr	r2, [pc, #112]	; (8003270 <HAL_ADC_ConvCpltCallback+0xc0>)
 8003200:	6013      	str	r3, [r2, #0]
			adc_averaged_val = adc_readings_total >> ADC_SAMPLE_POWER; //truncate as a cycle-efficient division
 8003202:	4b1b      	ldr	r3, [pc, #108]	; (8003270 <HAL_ADC_ConvCpltCallback+0xc0>)
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	08db      	lsrs	r3, r3, #3
 8003208:	4a1c      	ldr	r2, [pc, #112]	; (800327c <HAL_ADC_ConvCpltCallback+0xcc>)
 800320a:	6013      	str	r3, [r2, #0]
			adc_average_updated = true;
 800320c:	4b1c      	ldr	r3, [pc, #112]	; (8003280 <HAL_ADC_ConvCpltCallback+0xd0>)
 800320e:	2201      	movs	r2, #1
 8003210:	701a      	strb	r2, [r3, #0]
		adc_readings[adc_sample_no] = adc_val;
 8003212:	4b18      	ldr	r3, [pc, #96]	; (8003274 <HAL_ADC_ConvCpltCallback+0xc4>)
 8003214:	881b      	ldrh	r3, [r3, #0]
 8003216:	4619      	mov	r1, r3
 8003218:	4b13      	ldr	r3, [pc, #76]	; (8003268 <HAL_ADC_ConvCpltCallback+0xb8>)
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	4a16      	ldr	r2, [pc, #88]	; (8003278 <HAL_ADC_ConvCpltCallback+0xc8>)
 800321e:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
		adc_sample_no++;
 8003222:	4b14      	ldr	r3, [pc, #80]	; (8003274 <HAL_ADC_ConvCpltCallback+0xc4>)
 8003224:	881b      	ldrh	r3, [r3, #0]
 8003226:	3301      	adds	r3, #1
 8003228:	b29a      	uxth	r2, r3
 800322a:	4b12      	ldr	r3, [pc, #72]	; (8003274 <HAL_ADC_ConvCpltCallback+0xc4>)
 800322c:	801a      	strh	r2, [r3, #0]
		if (adc_sample_no >= ADC_SAMPLES) adc_sample_no = 0; //set back to zero if loop complete
 800322e:	4b11      	ldr	r3, [pc, #68]	; (8003274 <HAL_ADC_ConvCpltCallback+0xc4>)
 8003230:	881b      	ldrh	r3, [r3, #0]
 8003232:	2b07      	cmp	r3, #7
 8003234:	d902      	bls.n	800323c <HAL_ADC_ConvCpltCallback+0x8c>
 8003236:	4b0f      	ldr	r3, [pc, #60]	; (8003274 <HAL_ADC_ConvCpltCallback+0xc4>)
 8003238:	2200      	movs	r2, #0
 800323a:	801a      	strh	r2, [r3, #0]
	if(adc_average_updated) {
 800323c:	4b10      	ldr	r3, [pc, #64]	; (8003280 <HAL_ADC_ConvCpltCallback+0xd0>)
 800323e:	781b      	ldrb	r3, [r3, #0]
 8003240:	2b00      	cmp	r3, #0
 8003242:	d00b      	beq.n	800325c <HAL_ADC_ConvCpltCallback+0xac>
		dac_val = adc_averaged_val >> 4;
 8003244:	4b0d      	ldr	r3, [pc, #52]	; (800327c <HAL_ADC_ConvCpltCallback+0xcc>)
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	091b      	lsrs	r3, r3, #4
 800324a:	4a0e      	ldr	r2, [pc, #56]	; (8003284 <HAL_ADC_ConvCpltCallback+0xd4>)
 800324c:	6013      	str	r3, [r2, #0]
		HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R, dac_val);
 800324e:	4b0d      	ldr	r3, [pc, #52]	; (8003284 <HAL_ADC_ConvCpltCallback+0xd4>)
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	2200      	movs	r2, #0
 8003254:	2100      	movs	r1, #0
 8003256:	480c      	ldr	r0, [pc, #48]	; (8003288 <HAL_ADC_ConvCpltCallback+0xd8>)
 8003258:	f002 ff74 	bl	8006144 <HAL_DAC_SetValue>
}
 800325c:	bf00      	nop
 800325e:	3708      	adds	r7, #8
 8003260:	46bd      	mov	sp, r7
 8003262:	bd80      	pop	{r7, pc}
 8003264:	2000025c 	.word	0x2000025c
 8003268:	20000600 	.word	0x20000600
 800326c:	200005fa 	.word	0x200005fa
 8003270:	2000062c 	.word	0x2000062c
 8003274:	20000628 	.word	0x20000628
 8003278:	20000608 	.word	0x20000608
 800327c:	20000604 	.word	0x20000604
 8003280:	20000630 	.word	0x20000630
 8003284:	2000063c 	.word	0x2000063c
 8003288:	200002c0 	.word	0x200002c0

0800328c <MPU_Config>:
/* USER CODE END 4 */

/* MPU Configuration */

void MPU_Config(void)
{
 800328c:	b580      	push	{r7, lr}
 800328e:	b084      	sub	sp, #16
 8003290:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8003292:	463b      	mov	r3, r7
 8003294:	2200      	movs	r2, #0
 8003296:	601a      	str	r2, [r3, #0]
 8003298:	605a      	str	r2, [r3, #4]
 800329a:	609a      	str	r2, [r3, #8]
 800329c:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 800329e:	f002 fe61 	bl	8005f64 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 80032a2:	2301      	movs	r3, #1
 80032a4:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 80032a6:	2300      	movs	r3, #0
 80032a8:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 80032aa:	2300      	movs	r3, #0
 80032ac:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 80032ae:	231f      	movs	r3, #31
 80032b0:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 80032b2:	2387      	movs	r3, #135	; 0x87
 80032b4:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 80032b6:	2300      	movs	r3, #0
 80032b8:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 80032ba:	2300      	movs	r3, #0
 80032bc:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 80032be:	2301      	movs	r3, #1
 80032c0:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 80032c2:	2301      	movs	r3, #1
 80032c4:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 80032c6:	2300      	movs	r3, #0
 80032c8:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 80032ca:	2300      	movs	r3, #0
 80032cc:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80032ce:	463b      	mov	r3, r7
 80032d0:	4618      	mov	r0, r3
 80032d2:	f002 fe7f 	bl	8005fd4 <HAL_MPU_ConfigRegion>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER1;
 80032d6:	2301      	movs	r3, #1
 80032d8:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x30020000;
 80032da:	4b13      	ldr	r3, [pc, #76]	; (8003328 <MPU_Config+0x9c>)
 80032dc:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_128KB;
 80032de:	2310      	movs	r3, #16
 80032e0:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x0;
 80032e2:	2300      	movs	r3, #0
 80032e4:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL1;
 80032e6:	2301      	movs	r3, #1
 80032e8:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 80032ea:	2303      	movs	r3, #3
 80032ec:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.IsShareable = MPU_ACCESS_NOT_SHAREABLE;
 80032ee:	2300      	movs	r3, #0
 80032f0:	737b      	strb	r3, [r7, #13]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80032f2:	463b      	mov	r3, r7
 80032f4:	4618      	mov	r0, r3
 80032f6:	f002 fe6d 	bl	8005fd4 <HAL_MPU_ConfigRegion>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Number = MPU_REGION_NUMBER2;
 80032fa:	2302      	movs	r3, #2
 80032fc:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x30040000;
 80032fe:	4b0b      	ldr	r3, [pc, #44]	; (800332c <MPU_Config+0xa0>)
 8003300:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_512B;
 8003302:	2308      	movs	r3, #8
 8003304:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8003306:	2300      	movs	r3, #0
 8003308:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 800330a:	2301      	movs	r3, #1
 800330c:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_BUFFERABLE;
 800330e:	2301      	movs	r3, #1
 8003310:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8003312:	463b      	mov	r3, r7
 8003314:	4618      	mov	r0, r3
 8003316:	f002 fe5d 	bl	8005fd4 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 800331a:	2004      	movs	r0, #4
 800331c:	f002 fe3a 	bl	8005f94 <HAL_MPU_Enable>

}
 8003320:	bf00      	nop
 8003322:	3710      	adds	r7, #16
 8003324:	46bd      	mov	sp, r7
 8003326:	bd80      	pop	{r7, pc}
 8003328:	30020000 	.word	0x30020000
 800332c:	30040000 	.word	0x30040000

08003330 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003330:	b580      	push	{r7, lr}
 8003332:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8003334:	b672      	cpsid	i
}
 8003336:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	__disable_irq();

	printf("Error handler routine called\r\n");
 8003338:	4810      	ldr	r0, [pc, #64]	; (800337c <Error_Handler+0x4c>)
 800333a:	f016 fe43 	bl	8019fc4 <puts>

	/* Disable the AOM */
	HAL_HRTIM_WaveformOutputStop(&hhrtim, HRTIM_OUTPUT_TA1 | HRTIM_OUTPUT_TA2 | HRTIM_OUTPUT_TE1);
 800333e:	f240 1103 	movw	r1, #259	; 0x103
 8003342:	480f      	ldr	r0, [pc, #60]	; (8003380 <Error_Handler+0x50>)
 8003344:	f005 f8b8 	bl	80084b8 <HAL_HRTIM_WaveformOutputStop>
	HAL_HRTIM_WaveformCounterStop_IT(&hhrtim, HRTIM_TIMERID_TIMER_A | HRTIM_TIMERID_TIMER_E);
 8003348:	f44f 1108 	mov.w	r1, #2228224	; 0x220000
 800334c:	480c      	ldr	r0, [pc, #48]	; (8003380 <Error_Handler+0x50>)
 800334e:	f005 f951 	bl	80085f4 <HAL_HRTIM_WaveformCountStop_IT>

	/* Power down the synthesiser */
	HAL_GPIO_WritePin(REG_EN_GPIO_Port, REG_EN_Pin, 0);
 8003352:	2200      	movs	r2, #0
 8003354:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003358:	480a      	ldr	r0, [pc, #40]	; (8003384 <Error_Handler+0x54>)
 800335a:	f004 fd1f 	bl	8007d9c <HAL_GPIO_WritePin>

	while (1) {
		HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin); //toggle red LED
 800335e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8003362:	4809      	ldr	r0, [pc, #36]	; (8003388 <Error_Handler+0x58>)
 8003364:	f004 fd33 	bl	8007dce <HAL_GPIO_TogglePin>
		timer_delay(SLOW_TIMER, ERROR_LED_DELAY);
 8003368:	4b08      	ldr	r3, [pc, #32]	; (800338c <Error_Handler+0x5c>)
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003370:	4611      	mov	r1, r2
 8003372:	4618      	mov	r0, r3
 8003374:	f018 fd64 	bl	801be40 <__timer_delay_veneer>
		HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin); //toggle red LED
 8003378:	e7f1      	b.n	800335e <Error_Handler+0x2e>
 800337a:	bf00      	nop
 800337c:	0801c334 	.word	0x0801c334
 8003380:	200002d4 	.word	0x200002d4
 8003384:	58020800 	.word	0x58020800
 8003388:	58020400 	.word	0x58020400
 800338c:	20000018 	.word	0x20000018

08003390 <HAL_MspInit>:
void HAL_HRTIM_MspPostInit(HRTIM_HandleTypeDef *hhrtim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003390:	b480      	push	{r7}
 8003392:	b083      	sub	sp, #12
 8003394:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003396:	4b0a      	ldr	r3, [pc, #40]	; (80033c0 <HAL_MspInit+0x30>)
 8003398:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800339c:	4a08      	ldr	r2, [pc, #32]	; (80033c0 <HAL_MspInit+0x30>)
 800339e:	f043 0302 	orr.w	r3, r3, #2
 80033a2:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80033a6:	4b06      	ldr	r3, [pc, #24]	; (80033c0 <HAL_MspInit+0x30>)
 80033a8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80033ac:	f003 0302 	and.w	r3, r3, #2
 80033b0:	607b      	str	r3, [r7, #4]
 80033b2:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80033b4:	bf00      	nop
 80033b6:	370c      	adds	r7, #12
 80033b8:	46bd      	mov	sp, r7
 80033ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033be:	4770      	bx	lr
 80033c0:	58024400 	.word	0x58024400

080033c4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80033c4:	b580      	push	{r7, lr}
 80033c6:	b0b4      	sub	sp, #208	; 0xd0
 80033c8:	af00      	add	r7, sp, #0
 80033ca:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80033cc:	f107 0310 	add.w	r3, r7, #16
 80033d0:	22c0      	movs	r2, #192	; 0xc0
 80033d2:	2100      	movs	r1, #0
 80033d4:	4618      	mov	r0, r3
 80033d6:	f016 fee5 	bl	801a1a4 <memset>
  if(hadc->Instance==ADC3)
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	4a2b      	ldr	r2, [pc, #172]	; (800348c <HAL_ADC_MspInit+0xc8>)
 80033e0:	4293      	cmp	r3, r2
 80033e2:	d14e      	bne.n	8003482 <HAL_ADC_MspInit+0xbe>

  /* USER CODE END ADC3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80033e4:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80033e8:	f04f 0300 	mov.w	r3, #0
 80033ec:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.PLL2.PLL2M = 1;
 80033f0:	2301      	movs	r3, #1
 80033f2:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLL2.PLL2N = 19;
 80033f4:	2313      	movs	r3, #19
 80033f6:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLL2.PLL2P = 79;
 80033f8:	234f      	movs	r3, #79	; 0x4f
 80033fa:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLL2.PLL2Q = 2;
 80033fc:	2302      	movs	r3, #2
 80033fe:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.PLL2.PLL2R = 2;
 8003400:	2302      	movs	r3, #2
 8003402:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 8003404:	23c0      	movs	r3, #192	; 0xc0
 8003406:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 8003408:	2320      	movs	r3, #32
 800340a:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 800340c:	2300      	movs	r3, #0
 800340e:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 8003410:	2300      	movs	r3, #0
 8003412:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003416:	f107 0310 	add.w	r3, r7, #16
 800341a:	4618      	mov	r0, r3
 800341c:	f007 fc74 	bl	800ad08 <HAL_RCCEx_PeriphCLKConfig>
 8003420:	4603      	mov	r3, r0
 8003422:	2b00      	cmp	r3, #0
 8003424:	d001      	beq.n	800342a <HAL_ADC_MspInit+0x66>
    {
      Error_Handler();
 8003426:	f7ff ff83 	bl	8003330 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC3_CLK_ENABLE();
 800342a:	4b19      	ldr	r3, [pc, #100]	; (8003490 <HAL_ADC_MspInit+0xcc>)
 800342c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003430:	4a17      	ldr	r2, [pc, #92]	; (8003490 <HAL_ADC_MspInit+0xcc>)
 8003432:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003436:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800343a:	4b15      	ldr	r3, [pc, #84]	; (8003490 <HAL_ADC_MspInit+0xcc>)
 800343c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003440:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003444:	60fb      	str	r3, [r7, #12]
 8003446:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003448:	4b11      	ldr	r3, [pc, #68]	; (8003490 <HAL_ADC_MspInit+0xcc>)
 800344a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800344e:	4a10      	ldr	r2, [pc, #64]	; (8003490 <HAL_ADC_MspInit+0xcc>)
 8003450:	f043 0304 	orr.w	r3, r3, #4
 8003454:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003458:	4b0d      	ldr	r3, [pc, #52]	; (8003490 <HAL_ADC_MspInit+0xcc>)
 800345a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800345e:	f003 0304 	and.w	r3, r3, #4
 8003462:	60bb      	str	r3, [r7, #8]
 8003464:	68bb      	ldr	r3, [r7, #8]
    /**ADC3 GPIO Configuration
    PC2_C     ------> ADC3_INP0
    */
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC2, SYSCFG_SWITCH_PC2_OPEN);
 8003466:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
 800346a:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 800346e:	f000 feed 	bl	800424c <HAL_SYSCFG_AnalogSwitchConfig>

    /* ADC3 interrupt Init */
    HAL_NVIC_SetPriority(ADC3_IRQn, 0, 0);
 8003472:	2200      	movs	r2, #0
 8003474:	2100      	movs	r1, #0
 8003476:	207f      	movs	r0, #127	; 0x7f
 8003478:	f002 fd3f 	bl	8005efa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC3_IRQn);
 800347c:	207f      	movs	r0, #127	; 0x7f
 800347e:	f002 fd56 	bl	8005f2e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8003482:	bf00      	nop
 8003484:	37d0      	adds	r7, #208	; 0xd0
 8003486:	46bd      	mov	sp, r7
 8003488:	bd80      	pop	{r7, pc}
 800348a:	bf00      	nop
 800348c:	58026000 	.word	0x58026000
 8003490:	58024400 	.word	0x58024400

08003494 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8003494:	b580      	push	{r7, lr}
 8003496:	b08a      	sub	sp, #40	; 0x28
 8003498:	af00      	add	r7, sp, #0
 800349a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800349c:	f107 0314 	add.w	r3, r7, #20
 80034a0:	2200      	movs	r2, #0
 80034a2:	601a      	str	r2, [r3, #0]
 80034a4:	605a      	str	r2, [r3, #4]
 80034a6:	609a      	str	r2, [r3, #8]
 80034a8:	60da      	str	r2, [r3, #12]
 80034aa:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	4a18      	ldr	r2, [pc, #96]	; (8003514 <HAL_DAC_MspInit+0x80>)
 80034b2:	4293      	cmp	r3, r2
 80034b4:	d129      	bne.n	800350a <HAL_DAC_MspInit+0x76>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC12_CLK_ENABLE();
 80034b6:	4b18      	ldr	r3, [pc, #96]	; (8003518 <HAL_DAC_MspInit+0x84>)
 80034b8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80034bc:	4a16      	ldr	r2, [pc, #88]	; (8003518 <HAL_DAC_MspInit+0x84>)
 80034be:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80034c2:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80034c6:	4b14      	ldr	r3, [pc, #80]	; (8003518 <HAL_DAC_MspInit+0x84>)
 80034c8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80034cc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80034d0:	613b      	str	r3, [r7, #16]
 80034d2:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80034d4:	4b10      	ldr	r3, [pc, #64]	; (8003518 <HAL_DAC_MspInit+0x84>)
 80034d6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80034da:	4a0f      	ldr	r2, [pc, #60]	; (8003518 <HAL_DAC_MspInit+0x84>)
 80034dc:	f043 0301 	orr.w	r3, r3, #1
 80034e0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80034e4:	4b0c      	ldr	r3, [pc, #48]	; (8003518 <HAL_DAC_MspInit+0x84>)
 80034e6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80034ea:	f003 0301 	and.w	r3, r3, #1
 80034ee:	60fb      	str	r3, [r7, #12]
 80034f0:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    PA5     ------> DAC1_OUT2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80034f2:	2330      	movs	r3, #48	; 0x30
 80034f4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80034f6:	2303      	movs	r3, #3
 80034f8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034fa:	2300      	movs	r3, #0
 80034fc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80034fe:	f107 0314 	add.w	r3, r7, #20
 8003502:	4619      	mov	r1, r3
 8003504:	4805      	ldr	r0, [pc, #20]	; (800351c <HAL_DAC_MspInit+0x88>)
 8003506:	f004 fa81 	bl	8007a0c <HAL_GPIO_Init>
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 800350a:	bf00      	nop
 800350c:	3728      	adds	r7, #40	; 0x28
 800350e:	46bd      	mov	sp, r7
 8003510:	bd80      	pop	{r7, pc}
 8003512:	bf00      	nop
 8003514:	40007400 	.word	0x40007400
 8003518:	58024400 	.word	0x58024400
 800351c:	58020000 	.word	0x58020000

08003520 <HAL_HRTIM_MspInit>:
* This function configures the hardware resources used in this example
* @param hhrtim: HRTIM handle pointer
* @retval None
*/
void HAL_HRTIM_MspInit(HRTIM_HandleTypeDef* hhrtim)
{
 8003520:	b580      	push	{r7, lr}
 8003522:	b0b4      	sub	sp, #208	; 0xd0
 8003524:	af00      	add	r7, sp, #0
 8003526:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003528:	f107 0310 	add.w	r3, r7, #16
 800352c:	22c0      	movs	r2, #192	; 0xc0
 800352e:	2100      	movs	r1, #0
 8003530:	4618      	mov	r0, r3
 8003532:	f016 fe37 	bl	801a1a4 <memset>
  if(hhrtim->Instance==HRTIM1)
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	4a1c      	ldr	r2, [pc, #112]	; (80035ac <HAL_HRTIM_MspInit+0x8c>)
 800353c:	4293      	cmp	r3, r2
 800353e:	d131      	bne.n	80035a4 <HAL_HRTIM_MspInit+0x84>

  /* USER CODE END HRTIM1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_HRTIM1;
 8003540:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003544:	f04f 0300 	mov.w	r3, #0
 8003548:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Hrtim1ClockSelection = RCC_HRTIM1CLK_TIMCLK;
 800354c:	2300      	movs	r3, #0
 800354e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003552:	f107 0310 	add.w	r3, r7, #16
 8003556:	4618      	mov	r0, r3
 8003558:	f007 fbd6 	bl	800ad08 <HAL_RCCEx_PeriphCLKConfig>
 800355c:	4603      	mov	r3, r0
 800355e:	2b00      	cmp	r3, #0
 8003560:	d001      	beq.n	8003566 <HAL_HRTIM_MspInit+0x46>
    {
      Error_Handler();
 8003562:	f7ff fee5 	bl	8003330 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_HRTIM1_CLK_ENABLE();
 8003566:	4b12      	ldr	r3, [pc, #72]	; (80035b0 <HAL_HRTIM_MspInit+0x90>)
 8003568:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800356c:	4a10      	ldr	r2, [pc, #64]	; (80035b0 <HAL_HRTIM_MspInit+0x90>)
 800356e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003572:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8003576:	4b0e      	ldr	r3, [pc, #56]	; (80035b0 <HAL_HRTIM_MspInit+0x90>)
 8003578:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800357c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003580:	60fb      	str	r3, [r7, #12]
 8003582:	68fb      	ldr	r3, [r7, #12]
    /* HRTIM1 interrupt Init */
    HAL_NVIC_SetPriority(HRTIM1_TIMA_IRQn, 0, 0);
 8003584:	2200      	movs	r2, #0
 8003586:	2100      	movs	r1, #0
 8003588:	2068      	movs	r0, #104	; 0x68
 800358a:	f002 fcb6 	bl	8005efa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(HRTIM1_TIMA_IRQn);
 800358e:	2068      	movs	r0, #104	; 0x68
 8003590:	f002 fccd 	bl	8005f2e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(HRTIM1_TIME_IRQn, 0, 0);
 8003594:	2200      	movs	r2, #0
 8003596:	2100      	movs	r1, #0
 8003598:	206c      	movs	r0, #108	; 0x6c
 800359a:	f002 fcae 	bl	8005efa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(HRTIM1_TIME_IRQn);
 800359e:	206c      	movs	r0, #108	; 0x6c
 80035a0:	f002 fcc5 	bl	8005f2e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN HRTIM1_MspInit 1 */

  /* USER CODE END HRTIM1_MspInit 1 */
  }

}
 80035a4:	bf00      	nop
 80035a6:	37d0      	adds	r7, #208	; 0xd0
 80035a8:	46bd      	mov	sp, r7
 80035aa:	bd80      	pop	{r7, pc}
 80035ac:	40017400 	.word	0x40017400
 80035b0:	58024400 	.word	0x58024400

080035b4 <HAL_HRTIM_MspPostInit>:

void HAL_HRTIM_MspPostInit(HRTIM_HandleTypeDef* hhrtim)
{
 80035b4:	b580      	push	{r7, lr}
 80035b6:	b08a      	sub	sp, #40	; 0x28
 80035b8:	af00      	add	r7, sp, #0
 80035ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80035bc:	f107 0314 	add.w	r3, r7, #20
 80035c0:	2200      	movs	r2, #0
 80035c2:	601a      	str	r2, [r3, #0]
 80035c4:	605a      	str	r2, [r3, #4]
 80035c6:	609a      	str	r2, [r3, #8]
 80035c8:	60da      	str	r2, [r3, #12]
 80035ca:	611a      	str	r2, [r3, #16]
  if(hhrtim->Instance==HRTIM1)
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	4a22      	ldr	r2, [pc, #136]	; (800365c <HAL_HRTIM_MspPostInit+0xa8>)
 80035d2:	4293      	cmp	r3, r2
 80035d4:	d13d      	bne.n	8003652 <HAL_HRTIM_MspPostInit+0x9e>
  {
  /* USER CODE BEGIN HRTIM1_MspPostInit 0 */

  /* USER CODE END HRTIM1_MspPostInit 0 */

    __HAL_RCC_GPIOG_CLK_ENABLE();
 80035d6:	4b22      	ldr	r3, [pc, #136]	; (8003660 <HAL_HRTIM_MspPostInit+0xac>)
 80035d8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80035dc:	4a20      	ldr	r2, [pc, #128]	; (8003660 <HAL_HRTIM_MspPostInit+0xac>)
 80035de:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80035e2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80035e6:	4b1e      	ldr	r3, [pc, #120]	; (8003660 <HAL_HRTIM_MspPostInit+0xac>)
 80035e8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80035ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035f0:	613b      	str	r3, [r7, #16]
 80035f2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80035f4:	4b1a      	ldr	r3, [pc, #104]	; (8003660 <HAL_HRTIM_MspPostInit+0xac>)
 80035f6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80035fa:	4a19      	ldr	r2, [pc, #100]	; (8003660 <HAL_HRTIM_MspPostInit+0xac>)
 80035fc:	f043 0304 	orr.w	r3, r3, #4
 8003600:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003604:	4b16      	ldr	r3, [pc, #88]	; (8003660 <HAL_HRTIM_MspPostInit+0xac>)
 8003606:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800360a:	f003 0304 	and.w	r3, r3, #4
 800360e:	60fb      	str	r3, [r7, #12]
 8003610:	68fb      	ldr	r3, [r7, #12]
    /**HRTIM GPIO Configuration
    PG6     ------> HRTIM_CHE1
    PC6     ------> HRTIM_CHA1
    PC7     ------> HRTIM_CHA2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8003612:	2340      	movs	r3, #64	; 0x40
 8003614:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003616:	2302      	movs	r3, #2
 8003618:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800361a:	2300      	movs	r3, #0
 800361c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800361e:	2303      	movs	r3, #3
 8003620:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_HRTIM1;
 8003622:	2302      	movs	r3, #2
 8003624:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8003626:	f107 0314 	add.w	r3, r7, #20
 800362a:	4619      	mov	r1, r3
 800362c:	480d      	ldr	r0, [pc, #52]	; (8003664 <HAL_HRTIM_MspPostInit+0xb0>)
 800362e:	f004 f9ed 	bl	8007a0c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003632:	23c0      	movs	r3, #192	; 0xc0
 8003634:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003636:	2302      	movs	r3, #2
 8003638:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800363a:	2300      	movs	r3, #0
 800363c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800363e:	2303      	movs	r3, #3
 8003640:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_HRTIM1;
 8003642:	2301      	movs	r3, #1
 8003644:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003646:	f107 0314 	add.w	r3, r7, #20
 800364a:	4619      	mov	r1, r3
 800364c:	4806      	ldr	r0, [pc, #24]	; (8003668 <HAL_HRTIM_MspPostInit+0xb4>)
 800364e:	f004 f9dd 	bl	8007a0c <HAL_GPIO_Init>
  /* USER CODE BEGIN HRTIM1_MspPostInit 1 */

  /* USER CODE END HRTIM1_MspPostInit 1 */
  }

}
 8003652:	bf00      	nop
 8003654:	3728      	adds	r7, #40	; 0x28
 8003656:	46bd      	mov	sp, r7
 8003658:	bd80      	pop	{r7, pc}
 800365a:	bf00      	nop
 800365c:	40017400 	.word	0x40017400
 8003660:	58024400 	.word	0x58024400
 8003664:	58021800 	.word	0x58021800
 8003668:	58020800 	.word	0x58020800

0800366c <HAL_LPTIM_MspInit>:
* This function configures the hardware resources used in this example
* @param hlptim: LPTIM handle pointer
* @retval None
*/
void HAL_LPTIM_MspInit(LPTIM_HandleTypeDef* hlptim)
{
 800366c:	b580      	push	{r7, lr}
 800366e:	b0b4      	sub	sp, #208	; 0xd0
 8003670:	af00      	add	r7, sp, #0
 8003672:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003674:	f107 0310 	add.w	r3, r7, #16
 8003678:	22c0      	movs	r2, #192	; 0xc0
 800367a:	2100      	movs	r1, #0
 800367c:	4618      	mov	r0, r3
 800367e:	f016 fd91 	bl	801a1a4 <memset>
  if(hlptim->Instance==LPTIM1)
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	4a19      	ldr	r2, [pc, #100]	; (80036ec <HAL_LPTIM_MspInit+0x80>)
 8003688:	4293      	cmp	r3, r2
 800368a:	d12a      	bne.n	80036e2 <HAL_LPTIM_MspInit+0x76>

  /* USER CODE END LPTIM1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LPTIM1;
 800368c:	f04f 0220 	mov.w	r2, #32
 8003690:	f04f 0300 	mov.w	r3, #0
 8003694:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Lptim1ClockSelection = RCC_LPTIM1CLKSOURCE_LSE;
 8003698:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 800369c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80036a0:	f107 0310 	add.w	r3, r7, #16
 80036a4:	4618      	mov	r0, r3
 80036a6:	f007 fb2f 	bl	800ad08 <HAL_RCCEx_PeriphCLKConfig>
 80036aa:	4603      	mov	r3, r0
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d001      	beq.n	80036b4 <HAL_LPTIM_MspInit+0x48>
    {
      Error_Handler();
 80036b0:	f7ff fe3e 	bl	8003330 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPTIM1_CLK_ENABLE();
 80036b4:	4b0e      	ldr	r3, [pc, #56]	; (80036f0 <HAL_LPTIM_MspInit+0x84>)
 80036b6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80036ba:	4a0d      	ldr	r2, [pc, #52]	; (80036f0 <HAL_LPTIM_MspInit+0x84>)
 80036bc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80036c0:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80036c4:	4b0a      	ldr	r3, [pc, #40]	; (80036f0 <HAL_LPTIM_MspInit+0x84>)
 80036c6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80036ca:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80036ce:	60fb      	str	r3, [r7, #12]
 80036d0:	68fb      	ldr	r3, [r7, #12]
    /* LPTIM1 interrupt Init */
    HAL_NVIC_SetPriority(LPTIM1_IRQn, 0, 0);
 80036d2:	2200      	movs	r2, #0
 80036d4:	2100      	movs	r1, #0
 80036d6:	205d      	movs	r0, #93	; 0x5d
 80036d8:	f002 fc0f 	bl	8005efa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPTIM1_IRQn);
 80036dc:	205d      	movs	r0, #93	; 0x5d
 80036de:	f002 fc26 	bl	8005f2e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LPTIM1_MspInit 1 */

  /* USER CODE END LPTIM1_MspInit 1 */
  }

}
 80036e2:	bf00      	nop
 80036e4:	37d0      	adds	r7, #208	; 0xd0
 80036e6:	46bd      	mov	sp, r7
 80036e8:	bd80      	pop	{r7, pc}
 80036ea:	bf00      	nop
 80036ec:	40002400 	.word	0x40002400
 80036f0:	58024400 	.word	0x58024400

080036f4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80036f4:	b480      	push	{r7}
 80036f6:	b089      	sub	sp, #36	; 0x24
 80036f8:	af00      	add	r7, sp, #0
 80036fa:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	4a35      	ldr	r2, [pc, #212]	; (80037d8 <HAL_TIM_Base_MspInit+0xe4>)
 8003702:	4293      	cmp	r3, r2
 8003704:	d10f      	bne.n	8003726 <HAL_TIM_Base_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003706:	4b35      	ldr	r3, [pc, #212]	; (80037dc <HAL_TIM_Base_MspInit+0xe8>)
 8003708:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800370c:	4a33      	ldr	r2, [pc, #204]	; (80037dc <HAL_TIM_Base_MspInit+0xe8>)
 800370e:	f043 0301 	orr.w	r3, r3, #1
 8003712:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8003716:	4b31      	ldr	r3, [pc, #196]	; (80037dc <HAL_TIM_Base_MspInit+0xe8>)
 8003718:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800371c:	f003 0301 	and.w	r3, r3, #1
 8003720:	61fb      	str	r3, [r7, #28]
 8003722:	69fb      	ldr	r3, [r7, #28]
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 8003724:	e052      	b.n	80037cc <HAL_TIM_Base_MspInit+0xd8>
  else if(htim_base->Instance==TIM2)
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800372e:	d10f      	bne.n	8003750 <HAL_TIM_Base_MspInit+0x5c>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003730:	4b2a      	ldr	r3, [pc, #168]	; (80037dc <HAL_TIM_Base_MspInit+0xe8>)
 8003732:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003736:	4a29      	ldr	r2, [pc, #164]	; (80037dc <HAL_TIM_Base_MspInit+0xe8>)
 8003738:	f043 0301 	orr.w	r3, r3, #1
 800373c:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8003740:	4b26      	ldr	r3, [pc, #152]	; (80037dc <HAL_TIM_Base_MspInit+0xe8>)
 8003742:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003746:	f003 0301 	and.w	r3, r3, #1
 800374a:	61bb      	str	r3, [r7, #24]
 800374c:	69bb      	ldr	r3, [r7, #24]
}
 800374e:	e03d      	b.n	80037cc <HAL_TIM_Base_MspInit+0xd8>
  else if(htim_base->Instance==TIM3)
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	4a22      	ldr	r2, [pc, #136]	; (80037e0 <HAL_TIM_Base_MspInit+0xec>)
 8003756:	4293      	cmp	r3, r2
 8003758:	d10f      	bne.n	800377a <HAL_TIM_Base_MspInit+0x86>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800375a:	4b20      	ldr	r3, [pc, #128]	; (80037dc <HAL_TIM_Base_MspInit+0xe8>)
 800375c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003760:	4a1e      	ldr	r2, [pc, #120]	; (80037dc <HAL_TIM_Base_MspInit+0xe8>)
 8003762:	f043 0302 	orr.w	r3, r3, #2
 8003766:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800376a:	4b1c      	ldr	r3, [pc, #112]	; (80037dc <HAL_TIM_Base_MspInit+0xe8>)
 800376c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003770:	f003 0302 	and.w	r3, r3, #2
 8003774:	617b      	str	r3, [r7, #20]
 8003776:	697b      	ldr	r3, [r7, #20]
}
 8003778:	e028      	b.n	80037cc <HAL_TIM_Base_MspInit+0xd8>
  else if(htim_base->Instance==TIM4)
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	4a19      	ldr	r2, [pc, #100]	; (80037e4 <HAL_TIM_Base_MspInit+0xf0>)
 8003780:	4293      	cmp	r3, r2
 8003782:	d10f      	bne.n	80037a4 <HAL_TIM_Base_MspInit+0xb0>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8003784:	4b15      	ldr	r3, [pc, #84]	; (80037dc <HAL_TIM_Base_MspInit+0xe8>)
 8003786:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800378a:	4a14      	ldr	r2, [pc, #80]	; (80037dc <HAL_TIM_Base_MspInit+0xe8>)
 800378c:	f043 0304 	orr.w	r3, r3, #4
 8003790:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8003794:	4b11      	ldr	r3, [pc, #68]	; (80037dc <HAL_TIM_Base_MspInit+0xe8>)
 8003796:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800379a:	f003 0304 	and.w	r3, r3, #4
 800379e:	613b      	str	r3, [r7, #16]
 80037a0:	693b      	ldr	r3, [r7, #16]
}
 80037a2:	e013      	b.n	80037cc <HAL_TIM_Base_MspInit+0xd8>
  else if(htim_base->Instance==TIM5)
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	4a0f      	ldr	r2, [pc, #60]	; (80037e8 <HAL_TIM_Base_MspInit+0xf4>)
 80037aa:	4293      	cmp	r3, r2
 80037ac:	d10e      	bne.n	80037cc <HAL_TIM_Base_MspInit+0xd8>
    __HAL_RCC_TIM5_CLK_ENABLE();
 80037ae:	4b0b      	ldr	r3, [pc, #44]	; (80037dc <HAL_TIM_Base_MspInit+0xe8>)
 80037b0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80037b4:	4a09      	ldr	r2, [pc, #36]	; (80037dc <HAL_TIM_Base_MspInit+0xe8>)
 80037b6:	f043 0308 	orr.w	r3, r3, #8
 80037ba:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80037be:	4b07      	ldr	r3, [pc, #28]	; (80037dc <HAL_TIM_Base_MspInit+0xe8>)
 80037c0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80037c4:	f003 0308 	and.w	r3, r3, #8
 80037c8:	60fb      	str	r3, [r7, #12]
 80037ca:	68fb      	ldr	r3, [r7, #12]
}
 80037cc:	bf00      	nop
 80037ce:	3724      	adds	r7, #36	; 0x24
 80037d0:	46bd      	mov	sp, r7
 80037d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d6:	4770      	bx	lr
 80037d8:	40010000 	.word	0x40010000
 80037dc:	58024400 	.word	0x58024400
 80037e0:	40000400 	.word	0x40000400
 80037e4:	40000800 	.word	0x40000800
 80037e8:	40000c00 	.word	0x40000c00

080037ec <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80037ec:	b580      	push	{r7, lr}
 80037ee:	b0ba      	sub	sp, #232	; 0xe8
 80037f0:	af00      	add	r7, sp, #0
 80037f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80037f4:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80037f8:	2200      	movs	r2, #0
 80037fa:	601a      	str	r2, [r3, #0]
 80037fc:	605a      	str	r2, [r3, #4]
 80037fe:	609a      	str	r2, [r3, #8]
 8003800:	60da      	str	r2, [r3, #12]
 8003802:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003804:	f107 0310 	add.w	r3, r7, #16
 8003808:	22c0      	movs	r2, #192	; 0xc0
 800380a:	2100      	movs	r1, #0
 800380c:	4618      	mov	r0, r3
 800380e:	f016 fcc9 	bl	801a1a4 <memset>
  if(huart->Instance==USART3)
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	4a27      	ldr	r2, [pc, #156]	; (80038b4 <HAL_UART_MspInit+0xc8>)
 8003818:	4293      	cmp	r3, r2
 800381a:	d146      	bne.n	80038aa <HAL_UART_MspInit+0xbe>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 800381c:	f04f 0202 	mov.w	r2, #2
 8003820:	f04f 0300 	mov.w	r3, #0
 8003824:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8003828:	2300      	movs	r3, #0
 800382a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800382e:	f107 0310 	add.w	r3, r7, #16
 8003832:	4618      	mov	r0, r3
 8003834:	f007 fa68 	bl	800ad08 <HAL_RCCEx_PeriphCLKConfig>
 8003838:	4603      	mov	r3, r0
 800383a:	2b00      	cmp	r3, #0
 800383c:	d001      	beq.n	8003842 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 800383e:	f7ff fd77 	bl	8003330 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8003842:	4b1d      	ldr	r3, [pc, #116]	; (80038b8 <HAL_UART_MspInit+0xcc>)
 8003844:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003848:	4a1b      	ldr	r2, [pc, #108]	; (80038b8 <HAL_UART_MspInit+0xcc>)
 800384a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800384e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8003852:	4b19      	ldr	r3, [pc, #100]	; (80038b8 <HAL_UART_MspInit+0xcc>)
 8003854:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8003858:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800385c:	60fb      	str	r3, [r7, #12]
 800385e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003860:	4b15      	ldr	r3, [pc, #84]	; (80038b8 <HAL_UART_MspInit+0xcc>)
 8003862:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003866:	4a14      	ldr	r2, [pc, #80]	; (80038b8 <HAL_UART_MspInit+0xcc>)
 8003868:	f043 0308 	orr.w	r3, r3, #8
 800386c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8003870:	4b11      	ldr	r3, [pc, #68]	; (80038b8 <HAL_UART_MspInit+0xcc>)
 8003872:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003876:	f003 0308 	and.w	r3, r3, #8
 800387a:	60bb      	str	r3, [r7, #8]
 800387c:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 800387e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8003882:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003886:	2302      	movs	r3, #2
 8003888:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800388c:	2300      	movs	r3, #0
 800388e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003892:	2300      	movs	r3, #0
 8003894:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8003898:	2307      	movs	r3, #7
 800389a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800389e:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80038a2:	4619      	mov	r1, r3
 80038a4:	4805      	ldr	r0, [pc, #20]	; (80038bc <HAL_UART_MspInit+0xd0>)
 80038a6:	f004 f8b1 	bl	8007a0c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80038aa:	bf00      	nop
 80038ac:	37e8      	adds	r7, #232	; 0xe8
 80038ae:	46bd      	mov	sp, r7
 80038b0:	bd80      	pop	{r7, pc}
 80038b2:	bf00      	nop
 80038b4:	40004800 	.word	0x40004800
 80038b8:	58024400 	.word	0x58024400
 80038bc:	58020c00 	.word	0x58020c00

080038c0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80038c0:	b580      	push	{r7, lr}
 80038c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */
  /* USER CODE END NonMaskableInt_IRQn 0 */
  HAL_RCC_NMI_IRQHandler();
 80038c4:	f007 fa04 	bl	800acd0 <HAL_RCC_NMI_IRQHandler>
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1) {
		Error_Handler();
 80038c8:	f7ff fd32 	bl	8003330 <Error_Handler>
 80038cc:	e7fc      	b.n	80038c8 <NMI_Handler+0x8>

080038ce <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80038ce:	b580      	push	{r7, lr}
 80038d0:	af00      	add	r7, sp, #0

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_HardFault_IRQn 0 */
	  Error_Handler();
 80038d2:	f7ff fd2d 	bl	8003330 <Error_Handler>
 80038d6:	e7fc      	b.n	80038d2 <HardFault_Handler+0x4>

080038d8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80038d8:	b580      	push	{r7, lr}
 80038da:	af00      	add	r7, sp, #0

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_MemoryManagement_IRQn 0 */
	  Error_Handler();
 80038dc:	f7ff fd28 	bl	8003330 <Error_Handler>
 80038e0:	e7fc      	b.n	80038dc <MemManage_Handler+0x4>

080038e2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80038e2:	b580      	push	{r7, lr}
 80038e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */
  /* USER CODE END BusFault_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_BusFault_IRQn 0 */
	  Error_Handler();
 80038e6:	f7ff fd23 	bl	8003330 <Error_Handler>
 80038ea:	e7fc      	b.n	80038e6 <BusFault_Handler+0x4>

080038ec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80038ec:	b580      	push	{r7, lr}
 80038ee:	af00      	add	r7, sp, #0

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_UsageFault_IRQn 0 */
	  Error_Handler();
 80038f0:	f7ff fd1e 	bl	8003330 <Error_Handler>
 80038f4:	e7fc      	b.n	80038f0 <UsageFault_Handler+0x4>

080038f6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80038f6:	b480      	push	{r7}
 80038f8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80038fa:	bf00      	nop
 80038fc:	46bd      	mov	sp, r7
 80038fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003902:	4770      	bx	lr

08003904 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003904:	b480      	push	{r7}
 8003906:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003908:	bf00      	nop
 800390a:	46bd      	mov	sp, r7
 800390c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003910:	4770      	bx	lr

08003912 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003912:	b480      	push	{r7}
 8003914:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003916:	bf00      	nop
 8003918:	46bd      	mov	sp, r7
 800391a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800391e:	4770      	bx	lr

08003920 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003920:	b580      	push	{r7, lr}
 8003922:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003924:	f000 fc2e 	bl	8004184 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003928:	bf00      	nop
 800392a:	bd80      	pop	{r7, pc}

0800392c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800392c:	b580      	push	{r7, lr}
 800392e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 8003930:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8003934:	f004 fa65 	bl	8007e02 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BLUE_BUTTON_Pin);
 8003938:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800393c:	f004 fa61 	bl	8007e02 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8003940:	bf00      	nop
 8003942:	bd80      	pop	{r7, pc}

08003944 <LPTIM1_IRQHandler>:

/**
  * @brief This function handles LPTIM1 global interrupt.
  */
void LPTIM1_IRQHandler(void)
{
 8003944:	b580      	push	{r7, lr}
 8003946:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPTIM1_IRQn 0 */
  /* USER CODE END LPTIM1_IRQn 0 */
  HAL_LPTIM_IRQHandler(&hlptim1);
 8003948:	4802      	ldr	r0, [pc, #8]	; (8003954 <LPTIM1_IRQHandler+0x10>)
 800394a:	f005 fe9a 	bl	8009682 <HAL_LPTIM_IRQHandler>
  /* USER CODE BEGIN LPTIM1_IRQn 1 */
  /* USER CODE END LPTIM1_IRQn 1 */
}
 800394e:	bf00      	nop
 8003950:	bd80      	pop	{r7, pc}
 8003952:	bf00      	nop
 8003954:	200003b0 	.word	0x200003b0

08003958 <HRTIM1_TIMA_IRQHandler>:

/**
  * @brief This function handles HRTIM timer A global interrupt.
  */
void HRTIM1_TIMA_IRQHandler(void)
{
 8003958:	b580      	push	{r7, lr}
 800395a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HRTIM1_TIMA_IRQn 0 */

  /* USER CODE END HRTIM1_TIMA_IRQn 0 */
  HAL_HRTIM_IRQHandler(&hhrtim,HRTIM_TIMERINDEX_TIMER_A);
 800395c:	2100      	movs	r1, #0
 800395e:	4802      	ldr	r0, [pc, #8]	; (8003968 <HRTIM1_TIMA_IRQHandler+0x10>)
 8003960:	f004 fec6 	bl	80086f0 <HAL_HRTIM_IRQHandler>
  /* USER CODE BEGIN HRTIM1_TIMA_IRQn 1 */

  /* USER CODE END HRTIM1_TIMA_IRQn 1 */
}
 8003964:	bf00      	nop
 8003966:	bd80      	pop	{r7, pc}
 8003968:	200002d4 	.word	0x200002d4

0800396c <HRTIM1_TIME_IRQHandler>:

/**
  * @brief This function handles HRTIM timer E global interrupt.
  */
void HRTIM1_TIME_IRQHandler(void)
{
 800396c:	b580      	push	{r7, lr}
 800396e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HRTIM1_TIME_IRQn 0 */

  /* USER CODE END HRTIM1_TIME_IRQn 0 */
  HAL_HRTIM_IRQHandler(&hhrtim,HRTIM_TIMERINDEX_TIMER_E);
 8003970:	2104      	movs	r1, #4
 8003972:	4802      	ldr	r0, [pc, #8]	; (800397c <HRTIM1_TIME_IRQHandler+0x10>)
 8003974:	f004 febc 	bl	80086f0 <HAL_HRTIM_IRQHandler>
  /* USER CODE BEGIN HRTIM1_TIME_IRQn 1 */

  /* USER CODE END HRTIM1_TIME_IRQn 1 */
}
 8003978:	bf00      	nop
 800397a:	bd80      	pop	{r7, pc}
 800397c:	200002d4 	.word	0x200002d4

08003980 <ADC3_IRQHandler>:

/**
  * @brief This function handles ADC3 global interrupt.
  */
void ADC3_IRQHandler(void)
{
 8003980:	b580      	push	{r7, lr}
 8003982:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC3_IRQn 0 */

  /* USER CODE END ADC3_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc3);
 8003984:	4802      	ldr	r0, [pc, #8]	; (8003990 <ADC3_IRQHandler+0x10>)
 8003986:	f001 f981 	bl	8004c8c <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC3_IRQn 1 */

  /* USER CODE END ADC3_IRQn 1 */
}
 800398a:	bf00      	nop
 800398c:	bd80      	pop	{r7, pc}
 800398e:	bf00      	nop
 8003990:	2000025c 	.word	0x2000025c

08003994 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003994:	b480      	push	{r7}
 8003996:	af00      	add	r7, sp, #0
	return 1;
 8003998:	2301      	movs	r3, #1
}
 800399a:	4618      	mov	r0, r3
 800399c:	46bd      	mov	sp, r7
 800399e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a2:	4770      	bx	lr

080039a4 <_kill>:

int _kill(int pid, int sig)
{
 80039a4:	b480      	push	{r7}
 80039a6:	b083      	sub	sp, #12
 80039a8:	af00      	add	r7, sp, #0
 80039aa:	6078      	str	r0, [r7, #4]
 80039ac:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80039ae:	4b05      	ldr	r3, [pc, #20]	; (80039c4 <_kill+0x20>)
 80039b0:	2216      	movs	r2, #22
 80039b2:	601a      	str	r2, [r3, #0]
	return -1;
 80039b4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80039b8:	4618      	mov	r0, r3
 80039ba:	370c      	adds	r7, #12
 80039bc:	46bd      	mov	sp, r7
 80039be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039c2:	4770      	bx	lr
 80039c4:	2000736c 	.word	0x2000736c

080039c8 <_exit>:

void _exit (int status)
{
 80039c8:	b580      	push	{r7, lr}
 80039ca:	b082      	sub	sp, #8
 80039cc:	af00      	add	r7, sp, #0
 80039ce:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80039d0:	f04f 31ff 	mov.w	r1, #4294967295
 80039d4:	6878      	ldr	r0, [r7, #4]
 80039d6:	f7ff ffe5 	bl	80039a4 <_kill>
	while (1) {}		/* Make sure we hang here */
 80039da:	e7fe      	b.n	80039da <_exit+0x12>

080039dc <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80039dc:	b580      	push	{r7, lr}
 80039de:	b086      	sub	sp, #24
 80039e0:	af00      	add	r7, sp, #0
 80039e2:	60f8      	str	r0, [r7, #12]
 80039e4:	60b9      	str	r1, [r7, #8]
 80039e6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80039e8:	2300      	movs	r3, #0
 80039ea:	617b      	str	r3, [r7, #20]
 80039ec:	e00a      	b.n	8003a04 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80039ee:	f3af 8000 	nop.w
 80039f2:	4601      	mov	r1, r0
 80039f4:	68bb      	ldr	r3, [r7, #8]
 80039f6:	1c5a      	adds	r2, r3, #1
 80039f8:	60ba      	str	r2, [r7, #8]
 80039fa:	b2ca      	uxtb	r2, r1
 80039fc:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80039fe:	697b      	ldr	r3, [r7, #20]
 8003a00:	3301      	adds	r3, #1
 8003a02:	617b      	str	r3, [r7, #20]
 8003a04:	697a      	ldr	r2, [r7, #20]
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	429a      	cmp	r2, r3
 8003a0a:	dbf0      	blt.n	80039ee <_read+0x12>
	}

return len;
 8003a0c:	687b      	ldr	r3, [r7, #4]
}
 8003a0e:	4618      	mov	r0, r3
 8003a10:	3718      	adds	r7, #24
 8003a12:	46bd      	mov	sp, r7
 8003a14:	bd80      	pop	{r7, pc}

08003a16 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003a16:	b580      	push	{r7, lr}
 8003a18:	b086      	sub	sp, #24
 8003a1a:	af00      	add	r7, sp, #0
 8003a1c:	60f8      	str	r0, [r7, #12]
 8003a1e:	60b9      	str	r1, [r7, #8]
 8003a20:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003a22:	2300      	movs	r3, #0
 8003a24:	617b      	str	r3, [r7, #20]
 8003a26:	e009      	b.n	8003a3c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8003a28:	68bb      	ldr	r3, [r7, #8]
 8003a2a:	1c5a      	adds	r2, r3, #1
 8003a2c:	60ba      	str	r2, [r7, #8]
 8003a2e:	781b      	ldrb	r3, [r3, #0]
 8003a30:	4618      	mov	r0, r3
 8003a32:	f7fe fbfb 	bl	800222c <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003a36:	697b      	ldr	r3, [r7, #20]
 8003a38:	3301      	adds	r3, #1
 8003a3a:	617b      	str	r3, [r7, #20]
 8003a3c:	697a      	ldr	r2, [r7, #20]
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	429a      	cmp	r2, r3
 8003a42:	dbf1      	blt.n	8003a28 <_write+0x12>
	}
	return len;
 8003a44:	687b      	ldr	r3, [r7, #4]
}
 8003a46:	4618      	mov	r0, r3
 8003a48:	3718      	adds	r7, #24
 8003a4a:	46bd      	mov	sp, r7
 8003a4c:	bd80      	pop	{r7, pc}

08003a4e <_close>:

int _close(int file)
{
 8003a4e:	b480      	push	{r7}
 8003a50:	b083      	sub	sp, #12
 8003a52:	af00      	add	r7, sp, #0
 8003a54:	6078      	str	r0, [r7, #4]
	return -1;
 8003a56:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003a5a:	4618      	mov	r0, r3
 8003a5c:	370c      	adds	r7, #12
 8003a5e:	46bd      	mov	sp, r7
 8003a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a64:	4770      	bx	lr

08003a66 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003a66:	b480      	push	{r7}
 8003a68:	b083      	sub	sp, #12
 8003a6a:	af00      	add	r7, sp, #0
 8003a6c:	6078      	str	r0, [r7, #4]
 8003a6e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8003a70:	683b      	ldr	r3, [r7, #0]
 8003a72:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003a76:	605a      	str	r2, [r3, #4]
	return 0;
 8003a78:	2300      	movs	r3, #0
}
 8003a7a:	4618      	mov	r0, r3
 8003a7c:	370c      	adds	r7, #12
 8003a7e:	46bd      	mov	sp, r7
 8003a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a84:	4770      	bx	lr

08003a86 <_isatty>:

int _isatty(int file)
{
 8003a86:	b480      	push	{r7}
 8003a88:	b083      	sub	sp, #12
 8003a8a:	af00      	add	r7, sp, #0
 8003a8c:	6078      	str	r0, [r7, #4]
	return 1;
 8003a8e:	2301      	movs	r3, #1
}
 8003a90:	4618      	mov	r0, r3
 8003a92:	370c      	adds	r7, #12
 8003a94:	46bd      	mov	sp, r7
 8003a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a9a:	4770      	bx	lr

08003a9c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003a9c:	b480      	push	{r7}
 8003a9e:	b085      	sub	sp, #20
 8003aa0:	af00      	add	r7, sp, #0
 8003aa2:	60f8      	str	r0, [r7, #12]
 8003aa4:	60b9      	str	r1, [r7, #8]
 8003aa6:	607a      	str	r2, [r7, #4]
	return 0;
 8003aa8:	2300      	movs	r3, #0
}
 8003aaa:	4618      	mov	r0, r3
 8003aac:	3714      	adds	r7, #20
 8003aae:	46bd      	mov	sp, r7
 8003ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ab4:	4770      	bx	lr
	...

08003ab8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003ab8:	b480      	push	{r7}
 8003aba:	b087      	sub	sp, #28
 8003abc:	af00      	add	r7, sp, #0
 8003abe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003ac0:	4a14      	ldr	r2, [pc, #80]	; (8003b14 <_sbrk+0x5c>)
 8003ac2:	4b15      	ldr	r3, [pc, #84]	; (8003b18 <_sbrk+0x60>)
 8003ac4:	1ad3      	subs	r3, r2, r3
 8003ac6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003ac8:	697b      	ldr	r3, [r7, #20]
 8003aca:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003acc:	4b13      	ldr	r3, [pc, #76]	; (8003b1c <_sbrk+0x64>)
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d102      	bne.n	8003ada <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003ad4:	4b11      	ldr	r3, [pc, #68]	; (8003b1c <_sbrk+0x64>)
 8003ad6:	4a12      	ldr	r2, [pc, #72]	; (8003b20 <_sbrk+0x68>)
 8003ad8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003ada:	4b10      	ldr	r3, [pc, #64]	; (8003b1c <_sbrk+0x64>)
 8003adc:	681a      	ldr	r2, [r3, #0]
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	4413      	add	r3, r2
 8003ae2:	693a      	ldr	r2, [r7, #16]
 8003ae4:	429a      	cmp	r2, r3
 8003ae6:	d205      	bcs.n	8003af4 <_sbrk+0x3c>
  {
    errno = ENOMEM;
 8003ae8:	4b0e      	ldr	r3, [pc, #56]	; (8003b24 <_sbrk+0x6c>)
 8003aea:	220c      	movs	r2, #12
 8003aec:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003aee:	f04f 33ff 	mov.w	r3, #4294967295
 8003af2:	e009      	b.n	8003b08 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 8003af4:	4b09      	ldr	r3, [pc, #36]	; (8003b1c <_sbrk+0x64>)
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003afa:	4b08      	ldr	r3, [pc, #32]	; (8003b1c <_sbrk+0x64>)
 8003afc:	681a      	ldr	r2, [r3, #0]
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	4413      	add	r3, r2
 8003b02:	4a06      	ldr	r2, [pc, #24]	; (8003b1c <_sbrk+0x64>)
 8003b04:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003b06:	68fb      	ldr	r3, [r7, #12]
}
 8003b08:	4618      	mov	r0, r3
 8003b0a:	371c      	adds	r7, #28
 8003b0c:	46bd      	mov	sp, r7
 8003b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b12:	4770      	bx	lr
 8003b14:	20020000 	.word	0x20020000
 8003b18:	00000400 	.word	0x00000400
 8003b1c:	20000688 	.word	0x20000688
 8003b20:	20007380 	.word	0x20007380
 8003b24:	2000736c 	.word	0x2000736c

08003b28 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8003b28:	b480      	push	{r7}
 8003b2a:	b083      	sub	sp, #12
 8003b2c:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8003b2e:	4b3f      	ldr	r3, [pc, #252]	; (8003c2c <SystemInit+0x104>)
 8003b30:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b34:	4a3d      	ldr	r2, [pc, #244]	; (8003c2c <SystemInit+0x104>)
 8003b36:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003b3a:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8003b3e:	4b3c      	ldr	r3, [pc, #240]	; (8003c30 <SystemInit+0x108>)
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	f003 030f 	and.w	r3, r3, #15
 8003b46:	2b06      	cmp	r3, #6
 8003b48:	d807      	bhi.n	8003b5a <SystemInit+0x32>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */

	  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8003b4a:	4b39      	ldr	r3, [pc, #228]	; (8003c30 <SystemInit+0x108>)
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	f023 030f 	bic.w	r3, r3, #15
 8003b52:	4a37      	ldr	r2, [pc, #220]	; (8003c30 <SystemInit+0x108>)
 8003b54:	f043 0307 	orr.w	r3, r3, #7
 8003b58:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8003b5a:	4b36      	ldr	r3, [pc, #216]	; (8003c34 <SystemInit+0x10c>)
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	4a35      	ldr	r2, [pc, #212]	; (8003c34 <SystemInit+0x10c>)
 8003b60:	f043 0301 	orr.w	r3, r3, #1
 8003b64:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8003b66:	4b33      	ldr	r3, [pc, #204]	; (8003c34 <SystemInit+0x10c>)
 8003b68:	2200      	movs	r2, #0
 8003b6a:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8003b6c:	4b31      	ldr	r3, [pc, #196]	; (8003c34 <SystemInit+0x10c>)
 8003b6e:	681a      	ldr	r2, [r3, #0]
 8003b70:	4930      	ldr	r1, [pc, #192]	; (8003c34 <SystemInit+0x10c>)
 8003b72:	4b31      	ldr	r3, [pc, #196]	; (8003c38 <SystemInit+0x110>)
 8003b74:	4013      	ands	r3, r2
 8003b76:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8003b78:	4b2d      	ldr	r3, [pc, #180]	; (8003c30 <SystemInit+0x108>)
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	f003 0308 	and.w	r3, r3, #8
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d007      	beq.n	8003b94 <SystemInit+0x6c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8003b84:	4b2a      	ldr	r3, [pc, #168]	; (8003c30 <SystemInit+0x108>)
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	f023 030f 	bic.w	r3, r3, #15
 8003b8c:	4a28      	ldr	r2, [pc, #160]	; (8003c30 <SystemInit+0x108>)
 8003b8e:	f043 0307 	orr.w	r3, r3, #7
 8003b92:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8003b94:	4b27      	ldr	r3, [pc, #156]	; (8003c34 <SystemInit+0x10c>)
 8003b96:	2200      	movs	r2, #0
 8003b98:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8003b9a:	4b26      	ldr	r3, [pc, #152]	; (8003c34 <SystemInit+0x10c>)
 8003b9c:	2200      	movs	r2, #0
 8003b9e:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8003ba0:	4b24      	ldr	r3, [pc, #144]	; (8003c34 <SystemInit+0x10c>)
 8003ba2:	2200      	movs	r2, #0
 8003ba4:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8003ba6:	4b23      	ldr	r3, [pc, #140]	; (8003c34 <SystemInit+0x10c>)
 8003ba8:	4a24      	ldr	r2, [pc, #144]	; (8003c3c <SystemInit+0x114>)
 8003baa:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8003bac:	4b21      	ldr	r3, [pc, #132]	; (8003c34 <SystemInit+0x10c>)
 8003bae:	4a24      	ldr	r2, [pc, #144]	; (8003c40 <SystemInit+0x118>)
 8003bb0:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8003bb2:	4b20      	ldr	r3, [pc, #128]	; (8003c34 <SystemInit+0x10c>)
 8003bb4:	4a23      	ldr	r2, [pc, #140]	; (8003c44 <SystemInit+0x11c>)
 8003bb6:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8003bb8:	4b1e      	ldr	r3, [pc, #120]	; (8003c34 <SystemInit+0x10c>)
 8003bba:	2200      	movs	r2, #0
 8003bbc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8003bbe:	4b1d      	ldr	r3, [pc, #116]	; (8003c34 <SystemInit+0x10c>)
 8003bc0:	4a20      	ldr	r2, [pc, #128]	; (8003c44 <SystemInit+0x11c>)
 8003bc2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8003bc4:	4b1b      	ldr	r3, [pc, #108]	; (8003c34 <SystemInit+0x10c>)
 8003bc6:	2200      	movs	r2, #0
 8003bc8:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8003bca:	4b1a      	ldr	r3, [pc, #104]	; (8003c34 <SystemInit+0x10c>)
 8003bcc:	4a1d      	ldr	r2, [pc, #116]	; (8003c44 <SystemInit+0x11c>)
 8003bce:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8003bd0:	4b18      	ldr	r3, [pc, #96]	; (8003c34 <SystemInit+0x10c>)
 8003bd2:	2200      	movs	r2, #0
 8003bd4:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8003bd6:	4b17      	ldr	r3, [pc, #92]	; (8003c34 <SystemInit+0x10c>)
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	4a16      	ldr	r2, [pc, #88]	; (8003c34 <SystemInit+0x10c>)
 8003bdc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003be0:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8003be2:	4b14      	ldr	r3, [pc, #80]	; (8003c34 <SystemInit+0x10c>)
 8003be4:	2200      	movs	r2, #0
 8003be6:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8003be8:	4b17      	ldr	r3, [pc, #92]	; (8003c48 <SystemInit+0x120>)
 8003bea:	681a      	ldr	r2, [r3, #0]
 8003bec:	4b17      	ldr	r3, [pc, #92]	; (8003c4c <SystemInit+0x124>)
 8003bee:	4013      	ands	r3, r2
 8003bf0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003bf4:	d202      	bcs.n	8003bfc <SystemInit+0xd4>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8003bf6:	4b16      	ldr	r3, [pc, #88]	; (8003c50 <SystemInit+0x128>)
 8003bf8:	2201      	movs	r2, #1
 8003bfa:	601a      	str	r2, [r3, #0]
#endif /* STM32H7_DEV_ID */

#if defined(DATA_IN_D2_SRAM)
  /* in case of initialized data in D2 SRAM (AHB SRAM), enable the D2 SRAM clock (AHB SRAM clock) */
#if defined(RCC_AHB2ENR_D2SRAM3EN)
  RCC->AHB2ENR |= (RCC_AHB2ENR_D2SRAM1EN | RCC_AHB2ENR_D2SRAM2EN | RCC_AHB2ENR_D2SRAM3EN);
 8003bfc:	4b0d      	ldr	r3, [pc, #52]	; (8003c34 <SystemInit+0x10c>)
 8003bfe:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8003c02:	4a0c      	ldr	r2, [pc, #48]	; (8003c34 <SystemInit+0x10c>)
 8003c04:	f043 4360 	orr.w	r3, r3, #3758096384	; 0xe0000000
 8003c08:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
  RCC->AHB2ENR |= (RCC_AHB2ENR_D2SRAM1EN | RCC_AHB2ENR_D2SRAM2EN);
#else
  RCC->AHB2ENR |= (RCC_AHB2ENR_AHBSRAM1EN | RCC_AHB2ENR_AHBSRAM2EN);
#endif /* RCC_AHB2ENR_D2SRAM3EN */

  tmpreg = RCC->AHB2ENR;
 8003c0c:	4b09      	ldr	r3, [pc, #36]	; (8003c34 <SystemInit+0x10c>)
 8003c0e:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8003c12:	607b      	str	r3, [r7, #4]
  (void) tmpreg;
 8003c14:	687b      	ldr	r3, [r7, #4]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8003c16:	4b0f      	ldr	r3, [pc, #60]	; (8003c54 <SystemInit+0x12c>)
 8003c18:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8003c1c:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8003c1e:	bf00      	nop
 8003c20:	370c      	adds	r7, #12
 8003c22:	46bd      	mov	sp, r7
 8003c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c28:	4770      	bx	lr
 8003c2a:	bf00      	nop
 8003c2c:	e000ed00 	.word	0xe000ed00
 8003c30:	52002000 	.word	0x52002000
 8003c34:	58024400 	.word	0x58024400
 8003c38:	eaf6ed7f 	.word	0xeaf6ed7f
 8003c3c:	02020200 	.word	0x02020200
 8003c40:	01ff0000 	.word	0x01ff0000
 8003c44:	01010280 	.word	0x01010280
 8003c48:	5c001000 	.word	0x5c001000
 8003c4c:	ffff0000 	.word	0xffff0000
 8003c50:	51008108 	.word	0x51008108
 8003c54:	52004000 	.word	0x52004000

08003c58 <HAL_LPTIM_AutoReloadMatchCallback>:
//		}
//
//	}
//}

void HAL_LPTIM_AutoReloadMatchCallback(LPTIM_HandleTypeDef *hlptim){
 8003c58:	b580      	push	{r7, lr}
 8003c5a:	b082      	sub	sp, #8
 8003c5c:	af00      	add	r7, sp, #0
 8003c5e:	6078      	str	r0, [r7, #4]
	HAL_GPIO_TogglePin(LD1_GPIO_Port, LD1_Pin); //toggle green LED
 8003c60:	2101      	movs	r1, #1
 8003c62:	4803      	ldr	r0, [pc, #12]	; (8003c70 <HAL_LPTIM_AutoReloadMatchCallback+0x18>)
 8003c64:	f004 f8b3 	bl	8007dce <HAL_GPIO_TogglePin>
}
 8003c68:	bf00      	nop
 8003c6a:	3708      	adds	r7, #8
 8003c6c:	46bd      	mov	sp, r7
 8003c6e:	bd80      	pop	{r7, pc}
 8003c70:	58020400 	.word	0x58020400

08003c74 <HAL_HRTIM_Compare2EventCallback>:

void HAL_HRTIM_Compare2EventCallback(HRTIM_HandleTypeDef *hhrtim, uint32_t TimerIdx) {
 8003c74:	b480      	push	{r7}
 8003c76:	b083      	sub	sp, #12
 8003c78:	af00      	add	r7, sp, #0
 8003c7a:	6078      	str	r0, [r7, #4]
 8003c7c:	6039      	str	r1, [r7, #0]
		const struct AttenuatorSettings a = {0,0,0,0,0,1,0}; // 8 dB
		set_aom_atten(a);
#endif //ATTENUATOR_CODE
	}

}
 8003c7e:	bf00      	nop
 8003c80:	370c      	adds	r7, #12
 8003c82:	46bd      	mov	sp, r7
 8003c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c88:	4770      	bx	lr
	...

08003c8c <HAL_HRTIM_Compare3EventCallback>:

void HAL_HRTIM_Compare3EventCallback(HRTIM_HandleTypeDef *hhrtim, uint32_t TimerIdx) {
 8003c8c:	b580      	push	{r7, lr}
 8003c8e:	b088      	sub	sp, #32
 8003c90:	af00      	add	r7, sp, #0
 8003c92:	6078      	str	r0, [r7, #4]
 8003c94:	6039      	str	r1, [r7, #0]

	/* Called at the end of a POP cycle */
	if (TimerIdx == HRTIM_TIMERINDEX_TIMER_A) {
 8003c96:	683b      	ldr	r3, [r7, #0]
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d15d      	bne.n	8003d58 <HAL_HRTIM_Compare3EventCallback+0xcc>
		/* Reset the attenuator to 0 dB */
		const struct AttenuatorSettings a = { 0, 0, 0, 0, 0, 0, 0 }; // 0 dB
		set_aom_atten(a);
#endif //ATTENUATOR_CODE

		const double start_freq = ((long)(sweep_settings.req_start_freq/sweep_settings.step_size)) * sweep_settings.step_size;
 8003c9c:	4b30      	ldr	r3, [pc, #192]	; (8003d60 <HAL_HRTIM_Compare3EventCallback+0xd4>)
 8003c9e:	ed93 5b00 	vldr	d5, [r3]
 8003ca2:	4b2f      	ldr	r3, [pc, #188]	; (8003d60 <HAL_HRTIM_Compare3EventCallback+0xd4>)
 8003ca4:	ed93 6b04 	vldr	d6, [r3, #16]
 8003ca8:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8003cac:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8003cb0:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8003cb4:	4b2a      	ldr	r3, [pc, #168]	; (8003d60 <HAL_HRTIM_Compare3EventCallback+0xd4>)
 8003cb6:	ed93 7b04 	vldr	d7, [r3, #16]
 8003cba:	ee26 7b07 	vmul.f64	d7, d6, d7
 8003cbe:	ed87 7b06 	vstr	d7, [r7, #24]
		const double stop_freq = ((long)((sweep_settings.req_stop_freq/sweep_settings.step_size) + 0.5)) * sweep_settings.step_size;
 8003cc2:	4b27      	ldr	r3, [pc, #156]	; (8003d60 <HAL_HRTIM_Compare3EventCallback+0xd4>)
 8003cc4:	ed93 5b02 	vldr	d5, [r3, #8]
 8003cc8:	4b25      	ldr	r3, [pc, #148]	; (8003d60 <HAL_HRTIM_Compare3EventCallback+0xd4>)
 8003cca:	ed93 6b04 	vldr	d6, [r3, #16]
 8003cce:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8003cd2:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
 8003cd6:	ee37 7b06 	vadd.f64	d7, d7, d6
 8003cda:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8003cde:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8003ce2:	4b1f      	ldr	r3, [pc, #124]	; (8003d60 <HAL_HRTIM_Compare3EventCallback+0xd4>)
 8003ce4:	ed93 7b04 	vldr	d7, [r3, #16]
 8003ce8:	ee26 7b07 	vmul.f64	d7, d6, d7
 8003cec:	ed87 7b04 	vstr	d7, [r7, #16]
		const uint32_t num_points = ((stop_freq - start_freq)/sweep_settings.step_size) + 1;
 8003cf0:	ed97 6b04 	vldr	d6, [r7, #16]
 8003cf4:	ed97 7b06 	vldr	d7, [r7, #24]
 8003cf8:	ee36 5b47 	vsub.f64	d5, d6, d7
 8003cfc:	4b18      	ldr	r3, [pc, #96]	; (8003d60 <HAL_HRTIM_Compare3EventCallback+0xd4>)
 8003cfe:	ed93 6b04 	vldr	d6, [r3, #16]
 8003d02:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8003d06:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8003d0a:	ee37 7b06 	vadd.f64	d7, d7, d6
 8003d0e:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8003d12:	ee17 3a90 	vmov	r3, s15
 8003d16:	60fb      	str	r3, [r7, #12]
		static uint32_t i = 0;

		/* Configure the Microwave frequency */
		if (i == num_points) {
 8003d18:	4b12      	ldr	r3, [pc, #72]	; (8003d64 <HAL_HRTIM_Compare3EventCallback+0xd8>)
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	68fa      	ldr	r2, [r7, #12]
 8003d1e:	429a      	cmp	r2, r3
 8003d20:	d106      	bne.n	8003d30 <HAL_HRTIM_Compare3EventCallback+0xa4>
			stop_pop();
 8003d22:	f018 f885 	bl	801be30 <__stop_pop_veneer>
			i = 0;
 8003d26:	4b0f      	ldr	r3, [pc, #60]	; (8003d64 <HAL_HRTIM_Compare3EventCallback+0xd8>)
 8003d28:	2200      	movs	r2, #0
 8003d2a:	601a      	str	r2, [r3, #0]
			start_pop();
 8003d2c:	f018 f878 	bl	801be20 <__start_pop_veneer>

#ifdef SYNTH_ENABLE
		set_frequency_hz(start_freq + (i * sweep_settings.step_size));
#endif

		i = i + 1;
 8003d30:	4b0c      	ldr	r3, [pc, #48]	; (8003d64 <HAL_HRTIM_Compare3EventCallback+0xd8>)
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	3301      	adds	r3, #1
 8003d36:	4a0b      	ldr	r2, [pc, #44]	; (8003d64 <HAL_HRTIM_Compare3EventCallback+0xd8>)
 8003d38:	6013      	str	r3, [r2, #0]

		pop_cycle_count = pop_cycle_count + 1;
 8003d3a:	4b0b      	ldr	r3, [pc, #44]	; (8003d68 <HAL_HRTIM_Compare3EventCallback+0xdc>)
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	3301      	adds	r3, #1
 8003d40:	4a09      	ldr	r2, [pc, #36]	; (8003d68 <HAL_HRTIM_Compare3EventCallback+0xdc>)
 8003d42:	6013      	str	r3, [r2, #0]
		HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin); //toggle amber LED
 8003d44:	2102      	movs	r1, #2
 8003d46:	4809      	ldr	r0, [pc, #36]	; (8003d6c <HAL_HRTIM_Compare3EventCallback+0xe0>)
 8003d48:	f004 f841 	bl	8007dce <HAL_GPIO_TogglePin>
		printf("POP Cycle %lu done.\r\n", pop_cycle_count);
 8003d4c:	4b06      	ldr	r3, [pc, #24]	; (8003d68 <HAL_HRTIM_Compare3EventCallback+0xdc>)
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	4619      	mov	r1, r3
 8003d52:	4807      	ldr	r0, [pc, #28]	; (8003d70 <HAL_HRTIM_Compare3EventCallback+0xe4>)
 8003d54:	f016 f8d0 	bl	8019ef8 <iprintf>

	/* Called when the second microwave pulse goes high */
	if (TimerIdx == HRTIM_TIMERINDEX_TIMER_E) {
	}

}
 8003d58:	bf00      	nop
 8003d5a:	3720      	adds	r7, #32
 8003d5c:	46bd      	mov	sp, r7
 8003d5e:	bd80      	pop	{r7, pc}
 8003d60:	0801f438 	.word	0x0801f438
 8003d64:	20000694 	.word	0x20000694
 8003d68:	2000068c 	.word	0x2000068c
 8003d6c:	58021000 	.word	0x58021000
 8003d70:	0801ca34 	.word	0x0801ca34

08003d74 <HAL_HRTIM_RepetitionEventCallback>:

void HAL_HRTIM_RepetitionEventCallback(HRTIM_HandleTypeDef *hhrtim,
		uint32_t TimerIdx) {
 8003d74:	b480      	push	{r7}
 8003d76:	b083      	sub	sp, #12
 8003d78:	af00      	add	r7, sp, #0
 8003d7a:	6078      	str	r0, [r7, #4]
 8003d7c:	6039      	str	r1, [r7, #0]

	/* Called at the start of the next POP cycle */
	if (TimerIdx == HRTIM_TIMERINDEX_TIMER_A) {
	}
}
 8003d7e:	bf00      	nop
 8003d80:	370c      	adds	r7, #12
 8003d82:	46bd      	mov	sp, r7
 8003d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d88:	4770      	bx	lr
	...

08003d8c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8003d8c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003dc4 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8003d90:	f7ff feca 	bl	8003b28 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003d94:	480c      	ldr	r0, [pc, #48]	; (8003dc8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8003d96:	490d      	ldr	r1, [pc, #52]	; (8003dcc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8003d98:	4a0d      	ldr	r2, [pc, #52]	; (8003dd0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8003d9a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003d9c:	e002      	b.n	8003da4 <LoopCopyDataInit>

08003d9e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003d9e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003da0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003da2:	3304      	adds	r3, #4

08003da4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003da4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003da6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003da8:	d3f9      	bcc.n	8003d9e <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003daa:	4a0a      	ldr	r2, [pc, #40]	; (8003dd4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8003dac:	4c0a      	ldr	r4, [pc, #40]	; (8003dd8 <LoopFillZerobss+0x22>)
  movs r3, #0
 8003dae:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003db0:	e001      	b.n	8003db6 <LoopFillZerobss>

08003db2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003db2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003db4:	3204      	adds	r2, #4

08003db6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003db6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003db8:	d3fb      	bcc.n	8003db2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003dba:	f016 fa45 	bl	801a248 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003dbe:	f7fe fa47 	bl	8002250 <main>
  bx  lr
 8003dc2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8003dc4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003dc8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003dcc:	2000022c 	.word	0x2000022c
  ldr r2, =_sidata
 8003dd0:	0801f950 	.word	0x0801f950
  ldr r2, =_sbss
 8003dd4:	20000230 	.word	0x20000230
  ldr r4, =_ebss
 8003dd8:	2000737c 	.word	0x2000737c

08003ddc <ADC_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003ddc:	e7fe      	b.n	8003ddc <ADC_IRQHandler>

08003dde <LAN8742_RegisterBusIO>:
  * @param  ioctx: holds device IO functions.  
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ERROR if missing mandatory function
  */
int32_t  LAN8742_RegisterBusIO(lan8742_Object_t *pObj, lan8742_IOCtx_t *ioctx)
{
 8003dde:	b480      	push	{r7}
 8003de0:	b083      	sub	sp, #12
 8003de2:	af00      	add	r7, sp, #0
 8003de4:	6078      	str	r0, [r7, #4]
 8003de6:	6039      	str	r1, [r7, #0]
  if(!pObj || !ioctx->ReadReg || !ioctx->WriteReg || !ioctx->GetTick)
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d00b      	beq.n	8003e06 <LAN8742_RegisterBusIO+0x28>
 8003dee:	683b      	ldr	r3, [r7, #0]
 8003df0:	68db      	ldr	r3, [r3, #12]
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d007      	beq.n	8003e06 <LAN8742_RegisterBusIO+0x28>
 8003df6:	683b      	ldr	r3, [r7, #0]
 8003df8:	689b      	ldr	r3, [r3, #8]
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d003      	beq.n	8003e06 <LAN8742_RegisterBusIO+0x28>
 8003dfe:	683b      	ldr	r3, [r7, #0]
 8003e00:	691b      	ldr	r3, [r3, #16]
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d102      	bne.n	8003e0c <LAN8742_RegisterBusIO+0x2e>
  {
    return LAN8742_STATUS_ERROR;
 8003e06:	f04f 33ff 	mov.w	r3, #4294967295
 8003e0a:	e014      	b.n	8003e36 <LAN8742_RegisterBusIO+0x58>
  }
  
  pObj->IO.Init = ioctx->Init;
 8003e0c:	683b      	ldr	r3, [r7, #0]
 8003e0e:	681a      	ldr	r2, [r3, #0]
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	609a      	str	r2, [r3, #8]
  pObj->IO.DeInit = ioctx->DeInit;
 8003e14:	683b      	ldr	r3, [r7, #0]
 8003e16:	685a      	ldr	r2, [r3, #4]
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	60da      	str	r2, [r3, #12]
  pObj->IO.ReadReg = ioctx->ReadReg;
 8003e1c:	683b      	ldr	r3, [r7, #0]
 8003e1e:	68da      	ldr	r2, [r3, #12]
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	615a      	str	r2, [r3, #20]
  pObj->IO.WriteReg = ioctx->WriteReg;
 8003e24:	683b      	ldr	r3, [r7, #0]
 8003e26:	689a      	ldr	r2, [r3, #8]
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	611a      	str	r2, [r3, #16]
  pObj->IO.GetTick = ioctx->GetTick;
 8003e2c:	683b      	ldr	r3, [r7, #0]
 8003e2e:	691a      	ldr	r2, [r3, #16]
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	619a      	str	r2, [r3, #24]
  
  return LAN8742_STATUS_OK;
 8003e34:	2300      	movs	r3, #0
}
 8003e36:	4618      	mov	r0, r3
 8003e38:	370c      	adds	r7, #12
 8003e3a:	46bd      	mov	sp, r7
 8003e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e40:	4770      	bx	lr

08003e42 <LAN8742_Init>:
  *         LAN8742_STATUS_READ_ERROR if connot read register
  *         LAN8742_STATUS_WRITE_ERROR if connot write to register
  *         LAN8742_STATUS_RESET_TIMEOUT if cannot perform a software reset
  */
 int32_t LAN8742_Init(lan8742_Object_t *pObj)
 {
 8003e42:	b580      	push	{r7, lr}
 8003e44:	b086      	sub	sp, #24
 8003e46:	af00      	add	r7, sp, #0
 8003e48:	6078      	str	r0, [r7, #4]
   uint32_t tickstart = 0, regvalue = 0, addr = 0;
 8003e4a:	2300      	movs	r3, #0
 8003e4c:	60fb      	str	r3, [r7, #12]
 8003e4e:	2300      	movs	r3, #0
 8003e50:	60bb      	str	r3, [r7, #8]
 8003e52:	2300      	movs	r3, #0
 8003e54:	617b      	str	r3, [r7, #20]
   int32_t status = LAN8742_STATUS_OK;
 8003e56:	2300      	movs	r3, #0
 8003e58:	613b      	str	r3, [r7, #16]
   
   if(pObj->Is_Initialized == 0)
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	685b      	ldr	r3, [r3, #4]
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d17c      	bne.n	8003f5c <LAN8742_Init+0x11a>
   {
     if(pObj->IO.Init != 0)
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	689b      	ldr	r3, [r3, #8]
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d002      	beq.n	8003e70 <LAN8742_Init+0x2e>
     {
       /* GPIO and Clocks initialization */
       pObj->IO.Init();
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	689b      	ldr	r3, [r3, #8]
 8003e6e:	4798      	blx	r3
     }
   
     /* for later check */
     pObj->DevAddr = LAN8742_MAX_DEV_ADDR + 1;
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	2220      	movs	r2, #32
 8003e74:	601a      	str	r2, [r3, #0]
   
     /* Get the device address from special mode register */  
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8003e76:	2300      	movs	r3, #0
 8003e78:	617b      	str	r3, [r7, #20]
 8003e7a:	e01c      	b.n	8003eb6 <LAN8742_Init+0x74>
     {
       if(pObj->IO.ReadReg(addr, LAN8742_SMR, &regvalue) < 0)
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	695b      	ldr	r3, [r3, #20]
 8003e80:	f107 0208 	add.w	r2, r7, #8
 8003e84:	2112      	movs	r1, #18
 8003e86:	6978      	ldr	r0, [r7, #20]
 8003e88:	4798      	blx	r3
 8003e8a:	4603      	mov	r3, r0
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	da03      	bge.n	8003e98 <LAN8742_Init+0x56>
       { 
         status = LAN8742_STATUS_READ_ERROR;
 8003e90:	f06f 0304 	mvn.w	r3, #4
 8003e94:	613b      	str	r3, [r7, #16]
         /* Can't read from this device address 
            continue with next address */
         continue;
 8003e96:	e00b      	b.n	8003eb0 <LAN8742_Init+0x6e>
       }
     
       if((regvalue & LAN8742_SMR_PHY_ADDR) == addr)
 8003e98:	68bb      	ldr	r3, [r7, #8]
 8003e9a:	f003 031f 	and.w	r3, r3, #31
 8003e9e:	697a      	ldr	r2, [r7, #20]
 8003ea0:	429a      	cmp	r2, r3
 8003ea2:	d105      	bne.n	8003eb0 <LAN8742_Init+0x6e>
       {
         pObj->DevAddr = addr;
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	697a      	ldr	r2, [r7, #20]
 8003ea8:	601a      	str	r2, [r3, #0]
         status = LAN8742_STATUS_OK;
 8003eaa:	2300      	movs	r3, #0
 8003eac:	613b      	str	r3, [r7, #16]
         break;
 8003eae:	e005      	b.n	8003ebc <LAN8742_Init+0x7a>
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8003eb0:	697b      	ldr	r3, [r7, #20]
 8003eb2:	3301      	adds	r3, #1
 8003eb4:	617b      	str	r3, [r7, #20]
 8003eb6:	697b      	ldr	r3, [r7, #20]
 8003eb8:	2b1f      	cmp	r3, #31
 8003eba:	d9df      	bls.n	8003e7c <LAN8742_Init+0x3a>
       }
     }
   
     if(pObj->DevAddr > LAN8742_MAX_DEV_ADDR)
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	2b1f      	cmp	r3, #31
 8003ec2:	d902      	bls.n	8003eca <LAN8742_Init+0x88>
     {
       status = LAN8742_STATUS_ADDRESS_ERROR;
 8003ec4:	f06f 0302 	mvn.w	r3, #2
 8003ec8:	613b      	str	r3, [r7, #16]
     }
     
     /* if device address is matched */
     if(status == LAN8742_STATUS_OK)
 8003eca:	693b      	ldr	r3, [r7, #16]
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d145      	bne.n	8003f5c <LAN8742_Init+0x11a>
     {
       /* set a software reset  */
       if(pObj->IO.WriteReg(pObj->DevAddr, LAN8742_BCR, LAN8742_BCR_SOFT_RESET) >= 0)
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	691b      	ldr	r3, [r3, #16]
 8003ed4:	687a      	ldr	r2, [r7, #4]
 8003ed6:	6810      	ldr	r0, [r2, #0]
 8003ed8:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8003edc:	2100      	movs	r1, #0
 8003ede:	4798      	blx	r3
 8003ee0:	4603      	mov	r3, r0
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	db37      	blt.n	8003f56 <LAN8742_Init+0x114>
       { 
         /* get software reset status */
         if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) >= 0)
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	695b      	ldr	r3, [r3, #20]
 8003eea:	687a      	ldr	r2, [r7, #4]
 8003eec:	6810      	ldr	r0, [r2, #0]
 8003eee:	f107 0208 	add.w	r2, r7, #8
 8003ef2:	2100      	movs	r1, #0
 8003ef4:	4798      	blx	r3
 8003ef6:	4603      	mov	r3, r0
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	db28      	blt.n	8003f4e <LAN8742_Init+0x10c>
         { 
           tickstart = pObj->IO.GetTick();
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	699b      	ldr	r3, [r3, #24]
 8003f00:	4798      	blx	r3
 8003f02:	4603      	mov	r3, r0
 8003f04:	60fb      	str	r3, [r7, #12]
           
           /* wait until software reset is done or timeout occured  */
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 8003f06:	e01c      	b.n	8003f42 <LAN8742_Init+0x100>
           {
             if((pObj->IO.GetTick() - tickstart) <= LAN8742_SW_RESET_TO)
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	699b      	ldr	r3, [r3, #24]
 8003f0c:	4798      	blx	r3
 8003f0e:	4603      	mov	r3, r0
 8003f10:	461a      	mov	r2, r3
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	1ad3      	subs	r3, r2, r3
 8003f16:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8003f1a:	d80e      	bhi.n	8003f3a <LAN8742_Init+0xf8>
             {
               if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) < 0)
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	695b      	ldr	r3, [r3, #20]
 8003f20:	687a      	ldr	r2, [r7, #4]
 8003f22:	6810      	ldr	r0, [r2, #0]
 8003f24:	f107 0208 	add.w	r2, r7, #8
 8003f28:	2100      	movs	r1, #0
 8003f2a:	4798      	blx	r3
 8003f2c:	4603      	mov	r3, r0
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	da07      	bge.n	8003f42 <LAN8742_Init+0x100>
               { 
                 status = LAN8742_STATUS_READ_ERROR;
 8003f32:	f06f 0304 	mvn.w	r3, #4
 8003f36:	613b      	str	r3, [r7, #16]
                 break;
 8003f38:	e010      	b.n	8003f5c <LAN8742_Init+0x11a>
               }
             }
             else
             {
               status = LAN8742_STATUS_RESET_TIMEOUT;
 8003f3a:	f06f 0301 	mvn.w	r3, #1
 8003f3e:	613b      	str	r3, [r7, #16]
               break;
 8003f40:	e00c      	b.n	8003f5c <LAN8742_Init+0x11a>
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 8003f42:	68bb      	ldr	r3, [r7, #8]
 8003f44:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d1dd      	bne.n	8003f08 <LAN8742_Init+0xc6>
 8003f4c:	e006      	b.n	8003f5c <LAN8742_Init+0x11a>
             }
           } 
         }
         else
         {
           status = LAN8742_STATUS_READ_ERROR;
 8003f4e:	f06f 0304 	mvn.w	r3, #4
 8003f52:	613b      	str	r3, [r7, #16]
 8003f54:	e002      	b.n	8003f5c <LAN8742_Init+0x11a>
         }
       }
       else
       {
         status = LAN8742_STATUS_WRITE_ERROR;
 8003f56:	f06f 0303 	mvn.w	r3, #3
 8003f5a:	613b      	str	r3, [r7, #16]
       }
     }
   }
      
   if(status == LAN8742_STATUS_OK)
 8003f5c:	693b      	ldr	r3, [r7, #16]
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d112      	bne.n	8003f88 <LAN8742_Init+0x146>
   {
     tickstart =  pObj->IO.GetTick();
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	699b      	ldr	r3, [r3, #24]
 8003f66:	4798      	blx	r3
 8003f68:	4603      	mov	r3, r0
 8003f6a:	60fb      	str	r3, [r7, #12]
     
     /* Wait for 2s to perform initialization */
     while((pObj->IO.GetTick() - tickstart) <= LAN8742_INIT_TO)
 8003f6c:	bf00      	nop
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	699b      	ldr	r3, [r3, #24]
 8003f72:	4798      	blx	r3
 8003f74:	4603      	mov	r3, r0
 8003f76:	461a      	mov	r2, r3
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	1ad3      	subs	r3, r2, r3
 8003f7c:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8003f80:	d9f5      	bls.n	8003f6e <LAN8742_Init+0x12c>
     {
     }
     pObj->Is_Initialized = 1;
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	2201      	movs	r2, #1
 8003f86:	605a      	str	r2, [r3, #4]
   }
   
   return status;
 8003f88:	693b      	ldr	r3, [r7, #16]
 }
 8003f8a:	4618      	mov	r0, r3
 8003f8c:	3718      	adds	r7, #24
 8003f8e:	46bd      	mov	sp, r7
 8003f90:	bd80      	pop	{r7, pc}

08003f92 <LAN8742_GetLinkState>:
  *         LAN8742_STATUS_10MBITS_HALFDUPLEX  if 10Mb/s HD       
  *         LAN8742_STATUS_READ_ERROR if connot read register
  *         LAN8742_STATUS_WRITE_ERROR if connot write to register
  */
int32_t LAN8742_GetLinkState(lan8742_Object_t *pObj)
{
 8003f92:	b580      	push	{r7, lr}
 8003f94:	b084      	sub	sp, #16
 8003f96:	af00      	add	r7, sp, #0
 8003f98:	6078      	str	r0, [r7, #4]
  uint32_t readval = 0;
 8003f9a:	2300      	movs	r3, #0
 8003f9c:	60fb      	str	r3, [r7, #12]
  
  /* Read Status register  */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	695b      	ldr	r3, [r3, #20]
 8003fa2:	687a      	ldr	r2, [r7, #4]
 8003fa4:	6810      	ldr	r0, [r2, #0]
 8003fa6:	f107 020c 	add.w	r2, r7, #12
 8003faa:	2101      	movs	r1, #1
 8003fac:	4798      	blx	r3
 8003fae:	4603      	mov	r3, r0
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	da02      	bge.n	8003fba <LAN8742_GetLinkState+0x28>
  {
    return LAN8742_STATUS_READ_ERROR;
 8003fb4:	f06f 0304 	mvn.w	r3, #4
 8003fb8:	e06e      	b.n	8004098 <LAN8742_GetLinkState+0x106>
  }
  
  /* Read Status register again */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	695b      	ldr	r3, [r3, #20]
 8003fbe:	687a      	ldr	r2, [r7, #4]
 8003fc0:	6810      	ldr	r0, [r2, #0]
 8003fc2:	f107 020c 	add.w	r2, r7, #12
 8003fc6:	2101      	movs	r1, #1
 8003fc8:	4798      	blx	r3
 8003fca:	4603      	mov	r3, r0
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	da02      	bge.n	8003fd6 <LAN8742_GetLinkState+0x44>
  {
    return LAN8742_STATUS_READ_ERROR;
 8003fd0:	f06f 0304 	mvn.w	r3, #4
 8003fd4:	e060      	b.n	8004098 <LAN8742_GetLinkState+0x106>
  }
  
  if((readval & LAN8742_BSR_LINK_STATUS) == 0)
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	f003 0304 	and.w	r3, r3, #4
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d101      	bne.n	8003fe4 <LAN8742_GetLinkState+0x52>
  {
    /* Return Link Down status */
    return LAN8742_STATUS_LINK_DOWN;    
 8003fe0:	2301      	movs	r3, #1
 8003fe2:	e059      	b.n	8004098 <LAN8742_GetLinkState+0x106>
  }
  
  /* Check Auto negotiaition */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &readval) < 0)
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	695b      	ldr	r3, [r3, #20]
 8003fe8:	687a      	ldr	r2, [r7, #4]
 8003fea:	6810      	ldr	r0, [r2, #0]
 8003fec:	f107 020c 	add.w	r2, r7, #12
 8003ff0:	2100      	movs	r1, #0
 8003ff2:	4798      	blx	r3
 8003ff4:	4603      	mov	r3, r0
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	da02      	bge.n	8004000 <LAN8742_GetLinkState+0x6e>
  {
    return LAN8742_STATUS_READ_ERROR;
 8003ffa:	f06f 0304 	mvn.w	r3, #4
 8003ffe:	e04b      	b.n	8004098 <LAN8742_GetLinkState+0x106>
  }
  
  if((readval & LAN8742_BCR_AUTONEGO_EN) != LAN8742_BCR_AUTONEGO_EN)
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004006:	2b00      	cmp	r3, #0
 8004008:	d11b      	bne.n	8004042 <LAN8742_GetLinkState+0xb0>
  {
    if(((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT) && ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)) 
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004010:	2b00      	cmp	r3, #0
 8004012:	d006      	beq.n	8004022 <LAN8742_GetLinkState+0x90>
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800401a:	2b00      	cmp	r3, #0
 800401c:	d001      	beq.n	8004022 <LAN8742_GetLinkState+0x90>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 800401e:	2302      	movs	r3, #2
 8004020:	e03a      	b.n	8004098 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT)
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004028:	2b00      	cmp	r3, #0
 800402a:	d001      	beq.n	8004030 <LAN8742_GetLinkState+0x9e>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 800402c:	2303      	movs	r3, #3
 800402e:	e033      	b.n	8004098 <LAN8742_GetLinkState+0x106>
    }        
    else if ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004036:	2b00      	cmp	r3, #0
 8004038:	d001      	beq.n	800403e <LAN8742_GetLinkState+0xac>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 800403a:	2304      	movs	r3, #4
 800403c:	e02c      	b.n	8004098 <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 800403e:	2305      	movs	r3, #5
 8004040:	e02a      	b.n	8004098 <LAN8742_GetLinkState+0x106>
    }  		
  }
  else /* Auto Nego enabled */
  {
    if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_PHYSCSR, &readval) < 0)
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	695b      	ldr	r3, [r3, #20]
 8004046:	687a      	ldr	r2, [r7, #4]
 8004048:	6810      	ldr	r0, [r2, #0]
 800404a:	f107 020c 	add.w	r2, r7, #12
 800404e:	211f      	movs	r1, #31
 8004050:	4798      	blx	r3
 8004052:	4603      	mov	r3, r0
 8004054:	2b00      	cmp	r3, #0
 8004056:	da02      	bge.n	800405e <LAN8742_GetLinkState+0xcc>
    {
      return LAN8742_STATUS_READ_ERROR;
 8004058:	f06f 0304 	mvn.w	r3, #4
 800405c:	e01c      	b.n	8004098 <LAN8742_GetLinkState+0x106>
    }
    
    /* Check if auto nego not done */
    if((readval & LAN8742_PHYSCSR_AUTONEGO_DONE) == 0)
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004064:	2b00      	cmp	r3, #0
 8004066:	d101      	bne.n	800406c <LAN8742_GetLinkState+0xda>
    {
      return LAN8742_STATUS_AUTONEGO_NOTDONE;
 8004068:	2306      	movs	r3, #6
 800406a:	e015      	b.n	8004098 <LAN8742_GetLinkState+0x106>
    }
    
    if((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_FD)
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	f003 031c 	and.w	r3, r3, #28
 8004072:	2b18      	cmp	r3, #24
 8004074:	d101      	bne.n	800407a <LAN8742_GetLinkState+0xe8>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 8004076:	2302      	movs	r3, #2
 8004078:	e00e      	b.n	8004098 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_HD)
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	f003 031c 	and.w	r3, r3, #28
 8004080:	2b08      	cmp	r3, #8
 8004082:	d101      	bne.n	8004088 <LAN8742_GetLinkState+0xf6>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 8004084:	2303      	movs	r3, #3
 8004086:	e007      	b.n	8004098 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_10BT_FD)
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	f003 031c 	and.w	r3, r3, #28
 800408e:	2b14      	cmp	r3, #20
 8004090:	d101      	bne.n	8004096 <LAN8742_GetLinkState+0x104>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 8004092:	2304      	movs	r3, #4
 8004094:	e000      	b.n	8004098 <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 8004096:	2305      	movs	r3, #5
    }				
  }
}
 8004098:	4618      	mov	r0, r3
 800409a:	3710      	adds	r7, #16
 800409c:	46bd      	mov	sp, r7
 800409e:	bd80      	pop	{r7, pc}

080040a0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80040a0:	b580      	push	{r7, lr}
 80040a2:	b082      	sub	sp, #8
 80040a4:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80040a6:	2003      	movs	r0, #3
 80040a8:	f001 ff1c 	bl	8005ee4 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80040ac:	f006 fc3a 	bl	800a924 <HAL_RCC_GetSysClockFreq>
 80040b0:	4602      	mov	r2, r0
 80040b2:	4b15      	ldr	r3, [pc, #84]	; (8004108 <HAL_Init+0x68>)
 80040b4:	699b      	ldr	r3, [r3, #24]
 80040b6:	0a1b      	lsrs	r3, r3, #8
 80040b8:	f003 030f 	and.w	r3, r3, #15
 80040bc:	4913      	ldr	r1, [pc, #76]	; (800410c <HAL_Init+0x6c>)
 80040be:	5ccb      	ldrb	r3, [r1, r3]
 80040c0:	f003 031f 	and.w	r3, r3, #31
 80040c4:	fa22 f303 	lsr.w	r3, r2, r3
 80040c8:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80040ca:	4b0f      	ldr	r3, [pc, #60]	; (8004108 <HAL_Init+0x68>)
 80040cc:	699b      	ldr	r3, [r3, #24]
 80040ce:	f003 030f 	and.w	r3, r3, #15
 80040d2:	4a0e      	ldr	r2, [pc, #56]	; (800410c <HAL_Init+0x6c>)
 80040d4:	5cd3      	ldrb	r3, [r2, r3]
 80040d6:	f003 031f 	and.w	r3, r3, #31
 80040da:	687a      	ldr	r2, [r7, #4]
 80040dc:	fa22 f303 	lsr.w	r3, r2, r3
 80040e0:	4a0b      	ldr	r2, [pc, #44]	; (8004110 <HAL_Init+0x70>)
 80040e2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80040e4:	4a0b      	ldr	r2, [pc, #44]	; (8004114 <HAL_Init+0x74>)
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80040ea:	2000      	movs	r0, #0
 80040ec:	f000 f814 	bl	8004118 <HAL_InitTick>
 80040f0:	4603      	mov	r3, r0
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d001      	beq.n	80040fa <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80040f6:	2301      	movs	r3, #1
 80040f8:	e002      	b.n	8004100 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80040fa:	f7ff f949 	bl	8003390 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80040fe:	2300      	movs	r3, #0
}
 8004100:	4618      	mov	r0, r3
 8004102:	3708      	adds	r7, #8
 8004104:	46bd      	mov	sp, r7
 8004106:	bd80      	pop	{r7, pc}
 8004108:	58024400 	.word	0x58024400
 800410c:	0801f450 	.word	0x0801f450
 8004110:	20000014 	.word	0x20000014
 8004114:	20000010 	.word	0x20000010

08004118 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004118:	b580      	push	{r7, lr}
 800411a:	b082      	sub	sp, #8
 800411c:	af00      	add	r7, sp, #0
 800411e:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8004120:	4b15      	ldr	r3, [pc, #84]	; (8004178 <HAL_InitTick+0x60>)
 8004122:	781b      	ldrb	r3, [r3, #0]
 8004124:	2b00      	cmp	r3, #0
 8004126:	d101      	bne.n	800412c <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8004128:	2301      	movs	r3, #1
 800412a:	e021      	b.n	8004170 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 800412c:	4b13      	ldr	r3, [pc, #76]	; (800417c <HAL_InitTick+0x64>)
 800412e:	681a      	ldr	r2, [r3, #0]
 8004130:	4b11      	ldr	r3, [pc, #68]	; (8004178 <HAL_InitTick+0x60>)
 8004132:	781b      	ldrb	r3, [r3, #0]
 8004134:	4619      	mov	r1, r3
 8004136:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800413a:	fbb3 f3f1 	udiv	r3, r3, r1
 800413e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004142:	4618      	mov	r0, r3
 8004144:	f001 ff01 	bl	8005f4a <HAL_SYSTICK_Config>
 8004148:	4603      	mov	r3, r0
 800414a:	2b00      	cmp	r3, #0
 800414c:	d001      	beq.n	8004152 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 800414e:	2301      	movs	r3, #1
 8004150:	e00e      	b.n	8004170 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	2b0f      	cmp	r3, #15
 8004156:	d80a      	bhi.n	800416e <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004158:	2200      	movs	r2, #0
 800415a:	6879      	ldr	r1, [r7, #4]
 800415c:	f04f 30ff 	mov.w	r0, #4294967295
 8004160:	f001 fecb 	bl	8005efa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004164:	4a06      	ldr	r2, [pc, #24]	; (8004180 <HAL_InitTick+0x68>)
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800416a:	2300      	movs	r3, #0
 800416c:	e000      	b.n	8004170 <HAL_InitTick+0x58>
    return HAL_ERROR;
 800416e:	2301      	movs	r3, #1
}
 8004170:	4618      	mov	r0, r3
 8004172:	3708      	adds	r7, #8
 8004174:	46bd      	mov	sp, r7
 8004176:	bd80      	pop	{r7, pc}
 8004178:	20000028 	.word	0x20000028
 800417c:	20000010 	.word	0x20000010
 8004180:	20000024 	.word	0x20000024

08004184 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004184:	b480      	push	{r7}
 8004186:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8004188:	4b06      	ldr	r3, [pc, #24]	; (80041a4 <HAL_IncTick+0x20>)
 800418a:	781b      	ldrb	r3, [r3, #0]
 800418c:	461a      	mov	r2, r3
 800418e:	4b06      	ldr	r3, [pc, #24]	; (80041a8 <HAL_IncTick+0x24>)
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	4413      	add	r3, r2
 8004194:	4a04      	ldr	r2, [pc, #16]	; (80041a8 <HAL_IncTick+0x24>)
 8004196:	6013      	str	r3, [r2, #0]
}
 8004198:	bf00      	nop
 800419a:	46bd      	mov	sp, r7
 800419c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041a0:	4770      	bx	lr
 80041a2:	bf00      	nop
 80041a4:	20000028 	.word	0x20000028
 80041a8:	20000698 	.word	0x20000698

080041ac <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80041ac:	b480      	push	{r7}
 80041ae:	af00      	add	r7, sp, #0
  return uwTick;
 80041b0:	4b03      	ldr	r3, [pc, #12]	; (80041c0 <HAL_GetTick+0x14>)
 80041b2:	681b      	ldr	r3, [r3, #0]
}
 80041b4:	4618      	mov	r0, r3
 80041b6:	46bd      	mov	sp, r7
 80041b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041bc:	4770      	bx	lr
 80041be:	bf00      	nop
 80041c0:	20000698 	.word	0x20000698

080041c4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80041c4:	b580      	push	{r7, lr}
 80041c6:	b084      	sub	sp, #16
 80041c8:	af00      	add	r7, sp, #0
 80041ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80041cc:	f7ff ffee 	bl	80041ac <HAL_GetTick>
 80041d0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041dc:	d005      	beq.n	80041ea <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80041de:	4b0a      	ldr	r3, [pc, #40]	; (8004208 <HAL_Delay+0x44>)
 80041e0:	781b      	ldrb	r3, [r3, #0]
 80041e2:	461a      	mov	r2, r3
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	4413      	add	r3, r2
 80041e8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80041ea:	bf00      	nop
 80041ec:	f7ff ffde 	bl	80041ac <HAL_GetTick>
 80041f0:	4602      	mov	r2, r0
 80041f2:	68bb      	ldr	r3, [r7, #8]
 80041f4:	1ad3      	subs	r3, r2, r3
 80041f6:	68fa      	ldr	r2, [r7, #12]
 80041f8:	429a      	cmp	r2, r3
 80041fa:	d8f7      	bhi.n	80041ec <HAL_Delay+0x28>
  {
  }
}
 80041fc:	bf00      	nop
 80041fe:	bf00      	nop
 8004200:	3710      	adds	r7, #16
 8004202:	46bd      	mov	sp, r7
 8004204:	bd80      	pop	{r7, pc}
 8004206:	bf00      	nop
 8004208:	20000028 	.word	0x20000028

0800420c <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 800420c:	b480      	push	{r7}
 800420e:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8004210:	4b03      	ldr	r3, [pc, #12]	; (8004220 <HAL_GetREVID+0x14>)
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	0c1b      	lsrs	r3, r3, #16
}
 8004216:	4618      	mov	r0, r3
 8004218:	46bd      	mov	sp, r7
 800421a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800421e:	4770      	bx	lr
 8004220:	5c001000 	.word	0x5c001000

08004224 <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 8004224:	b480      	push	{r7}
 8004226:	b083      	sub	sp, #12
 8004228:	af00      	add	r7, sp, #0
 800422a:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 800422c:	4b06      	ldr	r3, [pc, #24]	; (8004248 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 800422e:	685b      	ldr	r3, [r3, #4]
 8004230:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8004234:	4904      	ldr	r1, [pc, #16]	; (8004248 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	4313      	orrs	r3, r2
 800423a:	604b      	str	r3, [r1, #4]
}
 800423c:	bf00      	nop
 800423e:	370c      	adds	r7, #12
 8004240:	46bd      	mov	sp, r7
 8004242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004246:	4770      	bx	lr
 8004248:	58000400 	.word	0x58000400

0800424c <HAL_SYSCFG_AnalogSwitchConfig>:
  *   @arg SYSCFG_SWITCH_PC3_CLOSE
  * @retval None
  */

void HAL_SYSCFG_AnalogSwitchConfig(uint32_t SYSCFG_AnalogSwitch , uint32_t SYSCFG_SwitchState )
{
 800424c:	b480      	push	{r7}
 800424e:	b083      	sub	sp, #12
 8004250:	af00      	add	r7, sp, #0
 8004252:	6078      	str	r0, [r7, #4]
 8004254:	6039      	str	r1, [r7, #0]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ANALOG_SWITCH(SYSCFG_AnalogSwitch));
  assert_param(IS_SYSCFG_SWITCH_STATE(SYSCFG_SwitchState));

  MODIFY_REG(SYSCFG->PMCR, (uint32_t) SYSCFG_AnalogSwitch, (uint32_t)(SYSCFG_SwitchState));
 8004256:	4b07      	ldr	r3, [pc, #28]	; (8004274 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 8004258:	685a      	ldr	r2, [r3, #4]
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	43db      	mvns	r3, r3
 800425e:	401a      	ands	r2, r3
 8004260:	4904      	ldr	r1, [pc, #16]	; (8004274 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 8004262:	683b      	ldr	r3, [r7, #0]
 8004264:	4313      	orrs	r3, r2
 8004266:	604b      	str	r3, [r1, #4]
}
 8004268:	bf00      	nop
 800426a:	370c      	adds	r7, #12
 800426c:	46bd      	mov	sp, r7
 800426e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004272:	4770      	bx	lr
 8004274:	58000400 	.word	0x58000400

08004278 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8004278:	b480      	push	{r7}
 800427a:	b083      	sub	sp, #12
 800427c:	af00      	add	r7, sp, #0
 800427e:	6078      	str	r0, [r7, #4]
 8004280:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	689b      	ldr	r3, [r3, #8]
 8004286:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 800428a:	683b      	ldr	r3, [r7, #0]
 800428c:	431a      	orrs	r2, r3
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	609a      	str	r2, [r3, #8]
}
 8004292:	bf00      	nop
 8004294:	370c      	adds	r7, #12
 8004296:	46bd      	mov	sp, r7
 8004298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800429c:	4770      	bx	lr

0800429e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800429e:	b480      	push	{r7}
 80042a0:	b083      	sub	sp, #12
 80042a2:	af00      	add	r7, sp, #0
 80042a4:	6078      	str	r0, [r7, #4]
 80042a6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	689b      	ldr	r3, [r3, #8]
 80042ac:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80042b0:	683b      	ldr	r3, [r7, #0]
 80042b2:	431a      	orrs	r2, r3
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	609a      	str	r2, [r3, #8]
}
 80042b8:	bf00      	nop
 80042ba:	370c      	adds	r7, #12
 80042bc:	46bd      	mov	sp, r7
 80042be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c2:	4770      	bx	lr

080042c4 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80042c4:	b480      	push	{r7}
 80042c6:	b083      	sub	sp, #12
 80042c8:	af00      	add	r7, sp, #0
 80042ca:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	689b      	ldr	r3, [r3, #8]
 80042d0:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80042d4:	4618      	mov	r0, r3
 80042d6:	370c      	adds	r7, #12
 80042d8:	46bd      	mov	sp, r7
 80042da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042de:	4770      	bx	lr

080042e0 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80042e0:	b480      	push	{r7}
 80042e2:	b087      	sub	sp, #28
 80042e4:	af00      	add	r7, sp, #0
 80042e6:	60f8      	str	r0, [r7, #12]
 80042e8:	60b9      	str	r1, [r7, #8]
 80042ea:	607a      	str	r2, [r7, #4]
 80042ec:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	3360      	adds	r3, #96	; 0x60
 80042f2:	461a      	mov	r2, r3
 80042f4:	68bb      	ldr	r3, [r7, #8]
 80042f6:	009b      	lsls	r3, r3, #2
 80042f8:	4413      	add	r3, r2
 80042fa:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 80042fc:	697b      	ldr	r3, [r7, #20]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 800430a:	683b      	ldr	r3, [r7, #0]
 800430c:	430b      	orrs	r3, r1
 800430e:	431a      	orrs	r2, r3
 8004310:	697b      	ldr	r3, [r7, #20]
 8004312:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8004314:	bf00      	nop
 8004316:	371c      	adds	r7, #28
 8004318:	46bd      	mov	sp, r7
 800431a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800431e:	4770      	bx	lr

08004320 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8004320:	b480      	push	{r7}
 8004322:	b085      	sub	sp, #20
 8004324:	af00      	add	r7, sp, #0
 8004326:	60f8      	str	r0, [r7, #12]
 8004328:	60b9      	str	r1, [r7, #8]
 800432a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	691b      	ldr	r3, [r3, #16]
 8004330:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 8004334:	68bb      	ldr	r3, [r7, #8]
 8004336:	f003 031f 	and.w	r3, r3, #31
 800433a:	6879      	ldr	r1, [r7, #4]
 800433c:	fa01 f303 	lsl.w	r3, r1, r3
 8004340:	431a      	orrs	r2, r3
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	611a      	str	r2, [r3, #16]
}
 8004346:	bf00      	nop
 8004348:	3714      	adds	r7, #20
 800434a:	46bd      	mov	sp, r7
 800434c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004350:	4770      	bx	lr

08004352 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8004352:	b480      	push	{r7}
 8004354:	b087      	sub	sp, #28
 8004356:	af00      	add	r7, sp, #0
 8004358:	60f8      	str	r0, [r7, #12]
 800435a:	60b9      	str	r1, [r7, #8]
 800435c:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	3360      	adds	r3, #96	; 0x60
 8004362:	461a      	mov	r2, r3
 8004364:	68bb      	ldr	r3, [r7, #8]
 8004366:	009b      	lsls	r3, r3, #2
 8004368:	4413      	add	r3, r2
 800436a:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 800436c:	697b      	ldr	r3, [r7, #20]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	431a      	orrs	r2, r3
 8004378:	697b      	ldr	r3, [r7, #20]
 800437a:	601a      	str	r2, [r3, #0]
  }
}
 800437c:	bf00      	nop
 800437e:	371c      	adds	r7, #28
 8004380:	46bd      	mov	sp, r7
 8004382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004386:	4770      	bx	lr

08004388 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8004388:	b480      	push	{r7}
 800438a:	b083      	sub	sp, #12
 800438c:	af00      	add	r7, sp, #0
 800438e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	68db      	ldr	r3, [r3, #12]
 8004394:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004398:	2b00      	cmp	r3, #0
 800439a:	d101      	bne.n	80043a0 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 800439c:	2301      	movs	r3, #1
 800439e:	e000      	b.n	80043a2 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80043a0:	2300      	movs	r3, #0
}
 80043a2:	4618      	mov	r0, r3
 80043a4:	370c      	adds	r7, #12
 80043a6:	46bd      	mov	sp, r7
 80043a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ac:	4770      	bx	lr

080043ae <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80043ae:	b480      	push	{r7}
 80043b0:	b087      	sub	sp, #28
 80043b2:	af00      	add	r7, sp, #0
 80043b4:	60f8      	str	r0, [r7, #12]
 80043b6:	60b9      	str	r1, [r7, #8]
 80043b8:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	3330      	adds	r3, #48	; 0x30
 80043be:	461a      	mov	r2, r3
 80043c0:	68bb      	ldr	r3, [r7, #8]
 80043c2:	0a1b      	lsrs	r3, r3, #8
 80043c4:	009b      	lsls	r3, r3, #2
 80043c6:	f003 030c 	and.w	r3, r3, #12
 80043ca:	4413      	add	r3, r2
 80043cc:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80043ce:	697b      	ldr	r3, [r7, #20]
 80043d0:	681a      	ldr	r2, [r3, #0]
 80043d2:	68bb      	ldr	r3, [r7, #8]
 80043d4:	f003 031f 	and.w	r3, r3, #31
 80043d8:	211f      	movs	r1, #31
 80043da:	fa01 f303 	lsl.w	r3, r1, r3
 80043de:	43db      	mvns	r3, r3
 80043e0:	401a      	ands	r2, r3
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	0e9b      	lsrs	r3, r3, #26
 80043e6:	f003 011f 	and.w	r1, r3, #31
 80043ea:	68bb      	ldr	r3, [r7, #8]
 80043ec:	f003 031f 	and.w	r3, r3, #31
 80043f0:	fa01 f303 	lsl.w	r3, r1, r3
 80043f4:	431a      	orrs	r2, r3
 80043f6:	697b      	ldr	r3, [r7, #20]
 80043f8:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80043fa:	bf00      	nop
 80043fc:	371c      	adds	r7, #28
 80043fe:	46bd      	mov	sp, r7
 8004400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004404:	4770      	bx	lr

08004406 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8004406:	b480      	push	{r7}
 8004408:	b083      	sub	sp, #12
 800440a:	af00      	add	r7, sp, #0
 800440c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004412:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 8004416:	2b00      	cmp	r3, #0
 8004418:	d101      	bne.n	800441e <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 800441a:	2301      	movs	r3, #1
 800441c:	e000      	b.n	8004420 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 800441e:	2300      	movs	r3, #0
}
 8004420:	4618      	mov	r0, r3
 8004422:	370c      	adds	r7, #12
 8004424:	46bd      	mov	sp, r7
 8004426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800442a:	4770      	bx	lr

0800442c <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800442c:	b480      	push	{r7}
 800442e:	b087      	sub	sp, #28
 8004430:	af00      	add	r7, sp, #0
 8004432:	60f8      	str	r0, [r7, #12]
 8004434:	60b9      	str	r1, [r7, #8]
 8004436:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	3314      	adds	r3, #20
 800443c:	461a      	mov	r2, r3
 800443e:	68bb      	ldr	r3, [r7, #8]
 8004440:	0e5b      	lsrs	r3, r3, #25
 8004442:	009b      	lsls	r3, r3, #2
 8004444:	f003 0304 	and.w	r3, r3, #4
 8004448:	4413      	add	r3, r2
 800444a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800444c:	697b      	ldr	r3, [r7, #20]
 800444e:	681a      	ldr	r2, [r3, #0]
 8004450:	68bb      	ldr	r3, [r7, #8]
 8004452:	0d1b      	lsrs	r3, r3, #20
 8004454:	f003 031f 	and.w	r3, r3, #31
 8004458:	2107      	movs	r1, #7
 800445a:	fa01 f303 	lsl.w	r3, r1, r3
 800445e:	43db      	mvns	r3, r3
 8004460:	401a      	ands	r2, r3
 8004462:	68bb      	ldr	r3, [r7, #8]
 8004464:	0d1b      	lsrs	r3, r3, #20
 8004466:	f003 031f 	and.w	r3, r3, #31
 800446a:	6879      	ldr	r1, [r7, #4]
 800446c:	fa01 f303 	lsl.w	r3, r1, r3
 8004470:	431a      	orrs	r2, r3
 8004472:	697b      	ldr	r3, [r7, #20]
 8004474:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8004476:	bf00      	nop
 8004478:	371c      	adds	r7, #28
 800447a:	46bd      	mov	sp, r7
 800447c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004480:	4770      	bx	lr
	...

08004484 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8004484:	b480      	push	{r7}
 8004486:	b085      	sub	sp, #20
 8004488:	af00      	add	r7, sp, #0
 800448a:	60f8      	str	r0, [r7, #12]
 800448c:	60b9      	str	r1, [r7, #8]
 800448e:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8004496:	68bb      	ldr	r3, [r7, #8]
 8004498:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800449c:	43db      	mvns	r3, r3
 800449e:	401a      	ands	r2, r3
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	f003 0318 	and.w	r3, r3, #24
 80044a6:	4908      	ldr	r1, [pc, #32]	; (80044c8 <LL_ADC_SetChannelSingleDiff+0x44>)
 80044a8:	40d9      	lsrs	r1, r3
 80044aa:	68bb      	ldr	r3, [r7, #8]
 80044ac:	400b      	ands	r3, r1
 80044ae:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80044b2:	431a      	orrs	r2, r3
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 80044ba:	bf00      	nop
 80044bc:	3714      	adds	r7, #20
 80044be:	46bd      	mov	sp, r7
 80044c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c4:	4770      	bx	lr
 80044c6:	bf00      	nop
 80044c8:	000fffff 	.word	0x000fffff

080044cc <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80044cc:	b480      	push	{r7}
 80044ce:	b083      	sub	sp, #12
 80044d0:	af00      	add	r7, sp, #0
 80044d2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	689b      	ldr	r3, [r3, #8]
 80044d8:	f003 031f 	and.w	r3, r3, #31
}
 80044dc:	4618      	mov	r0, r3
 80044de:	370c      	adds	r7, #12
 80044e0:	46bd      	mov	sp, r7
 80044e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044e6:	4770      	bx	lr

080044e8 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_EACH_ADC
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_32_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_8B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80044e8:	b480      	push	{r7}
 80044ea:	b083      	sub	sp, #12
 80044ec:	af00      	add	r7, sp, #0
 80044ee:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DAMDF));
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	689b      	ldr	r3, [r3, #8]
 80044f4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
}
 80044f8:	4618      	mov	r0, r3
 80044fa:	370c      	adds	r7, #12
 80044fc:	46bd      	mov	sp, r7
 80044fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004502:	4770      	bx	lr

08004504 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8004504:	b480      	push	{r7}
 8004506:	b083      	sub	sp, #12
 8004508:	af00      	add	r7, sp, #0
 800450a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	689a      	ldr	r2, [r3, #8]
 8004510:	4b04      	ldr	r3, [pc, #16]	; (8004524 <LL_ADC_DisableDeepPowerDown+0x20>)
 8004512:	4013      	ands	r3, r2
 8004514:	687a      	ldr	r2, [r7, #4]
 8004516:	6093      	str	r3, [r2, #8]
}
 8004518:	bf00      	nop
 800451a:	370c      	adds	r7, #12
 800451c:	46bd      	mov	sp, r7
 800451e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004522:	4770      	bx	lr
 8004524:	5fffffc0 	.word	0x5fffffc0

08004528 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8004528:	b480      	push	{r7}
 800452a:	b083      	sub	sp, #12
 800452c:	af00      	add	r7, sp, #0
 800452e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	689b      	ldr	r3, [r3, #8]
 8004534:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004538:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800453c:	d101      	bne.n	8004542 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800453e:	2301      	movs	r3, #1
 8004540:	e000      	b.n	8004544 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8004542:	2300      	movs	r3, #0
}
 8004544:	4618      	mov	r0, r3
 8004546:	370c      	adds	r7, #12
 8004548:	46bd      	mov	sp, r7
 800454a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800454e:	4770      	bx	lr

08004550 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8004550:	b480      	push	{r7}
 8004552:	b083      	sub	sp, #12
 8004554:	af00      	add	r7, sp, #0
 8004556:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	689a      	ldr	r2, [r3, #8]
 800455c:	4b05      	ldr	r3, [pc, #20]	; (8004574 <LL_ADC_EnableInternalRegulator+0x24>)
 800455e:	4013      	ands	r3, r2
 8004560:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8004568:	bf00      	nop
 800456a:	370c      	adds	r7, #12
 800456c:	46bd      	mov	sp, r7
 800456e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004572:	4770      	bx	lr
 8004574:	6fffffc0 	.word	0x6fffffc0

08004578 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8004578:	b480      	push	{r7}
 800457a:	b083      	sub	sp, #12
 800457c:	af00      	add	r7, sp, #0
 800457e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	689b      	ldr	r3, [r3, #8]
 8004584:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004588:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800458c:	d101      	bne.n	8004592 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800458e:	2301      	movs	r3, #1
 8004590:	e000      	b.n	8004594 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8004592:	2300      	movs	r3, #0
}
 8004594:	4618      	mov	r0, r3
 8004596:	370c      	adds	r7, #12
 8004598:	46bd      	mov	sp, r7
 800459a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800459e:	4770      	bx	lr

080045a0 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80045a0:	b480      	push	{r7}
 80045a2:	b083      	sub	sp, #12
 80045a4:	af00      	add	r7, sp, #0
 80045a6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	689a      	ldr	r2, [r3, #8]
 80045ac:	4b05      	ldr	r3, [pc, #20]	; (80045c4 <LL_ADC_Enable+0x24>)
 80045ae:	4013      	ands	r3, r2
 80045b0:	f043 0201 	orr.w	r2, r3, #1
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80045b8:	bf00      	nop
 80045ba:	370c      	adds	r7, #12
 80045bc:	46bd      	mov	sp, r7
 80045be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045c2:	4770      	bx	lr
 80045c4:	7fffffc0 	.word	0x7fffffc0

080045c8 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 80045c8:	b480      	push	{r7}
 80045ca:	b083      	sub	sp, #12
 80045cc:	af00      	add	r7, sp, #0
 80045ce:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	689a      	ldr	r2, [r3, #8]
 80045d4:	4b05      	ldr	r3, [pc, #20]	; (80045ec <LL_ADC_Disable+0x24>)
 80045d6:	4013      	ands	r3, r2
 80045d8:	f043 0202 	orr.w	r2, r3, #2
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 80045e0:	bf00      	nop
 80045e2:	370c      	adds	r7, #12
 80045e4:	46bd      	mov	sp, r7
 80045e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ea:	4770      	bx	lr
 80045ec:	7fffffc0 	.word	0x7fffffc0

080045f0 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80045f0:	b480      	push	{r7}
 80045f2:	b083      	sub	sp, #12
 80045f4:	af00      	add	r7, sp, #0
 80045f6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	689b      	ldr	r3, [r3, #8]
 80045fc:	f003 0301 	and.w	r3, r3, #1
 8004600:	2b01      	cmp	r3, #1
 8004602:	d101      	bne.n	8004608 <LL_ADC_IsEnabled+0x18>
 8004604:	2301      	movs	r3, #1
 8004606:	e000      	b.n	800460a <LL_ADC_IsEnabled+0x1a>
 8004608:	2300      	movs	r3, #0
}
 800460a:	4618      	mov	r0, r3
 800460c:	370c      	adds	r7, #12
 800460e:	46bd      	mov	sp, r7
 8004610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004614:	4770      	bx	lr

08004616 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8004616:	b480      	push	{r7}
 8004618:	b083      	sub	sp, #12
 800461a:	af00      	add	r7, sp, #0
 800461c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	689b      	ldr	r3, [r3, #8]
 8004622:	f003 0302 	and.w	r3, r3, #2
 8004626:	2b02      	cmp	r3, #2
 8004628:	d101      	bne.n	800462e <LL_ADC_IsDisableOngoing+0x18>
 800462a:	2301      	movs	r3, #1
 800462c:	e000      	b.n	8004630 <LL_ADC_IsDisableOngoing+0x1a>
 800462e:	2300      	movs	r3, #0
}
 8004630:	4618      	mov	r0, r3
 8004632:	370c      	adds	r7, #12
 8004634:	46bd      	mov	sp, r7
 8004636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800463a:	4770      	bx	lr

0800463c <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 800463c:	b480      	push	{r7}
 800463e:	b083      	sub	sp, #12
 8004640:	af00      	add	r7, sp, #0
 8004642:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	689a      	ldr	r2, [r3, #8]
 8004648:	4b05      	ldr	r3, [pc, #20]	; (8004660 <LL_ADC_REG_StartConversion+0x24>)
 800464a:	4013      	ands	r3, r2
 800464c:	f043 0204 	orr.w	r2, r3, #4
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8004654:	bf00      	nop
 8004656:	370c      	adds	r7, #12
 8004658:	46bd      	mov	sp, r7
 800465a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800465e:	4770      	bx	lr
 8004660:	7fffffc0 	.word	0x7fffffc0

08004664 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8004664:	b480      	push	{r7}
 8004666:	b083      	sub	sp, #12
 8004668:	af00      	add	r7, sp, #0
 800466a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	689b      	ldr	r3, [r3, #8]
 8004670:	f003 0304 	and.w	r3, r3, #4
 8004674:	2b04      	cmp	r3, #4
 8004676:	d101      	bne.n	800467c <LL_ADC_REG_IsConversionOngoing+0x18>
 8004678:	2301      	movs	r3, #1
 800467a:	e000      	b.n	800467e <LL_ADC_REG_IsConversionOngoing+0x1a>
 800467c:	2300      	movs	r3, #0
}
 800467e:	4618      	mov	r0, r3
 8004680:	370c      	adds	r7, #12
 8004682:	46bd      	mov	sp, r7
 8004684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004688:	4770      	bx	lr

0800468a <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800468a:	b480      	push	{r7}
 800468c:	b083      	sub	sp, #12
 800468e:	af00      	add	r7, sp, #0
 8004690:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	689b      	ldr	r3, [r3, #8]
 8004696:	f003 0308 	and.w	r3, r3, #8
 800469a:	2b08      	cmp	r3, #8
 800469c:	d101      	bne.n	80046a2 <LL_ADC_INJ_IsConversionOngoing+0x18>
 800469e:	2301      	movs	r3, #1
 80046a0:	e000      	b.n	80046a4 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80046a2:	2300      	movs	r3, #0
}
 80046a4:	4618      	mov	r0, r3
 80046a6:	370c      	adds	r7, #12
 80046a8:	46bd      	mov	sp, r7
 80046aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ae:	4770      	bx	lr

080046b0 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80046b0:	b590      	push	{r4, r7, lr}
 80046b2:	b089      	sub	sp, #36	; 0x24
 80046b4:	af00      	add	r7, sp, #0
 80046b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80046b8:	2300      	movs	r3, #0
 80046ba:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80046bc:	2300      	movs	r3, #0
 80046be:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d101      	bne.n	80046ca <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80046c6:	2301      	movs	r3, #1
 80046c8:	e18f      	b.n	80049ea <HAL_ADC_Init+0x33a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	68db      	ldr	r3, [r3, #12]
 80046ce:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d109      	bne.n	80046ec <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80046d8:	6878      	ldr	r0, [r7, #4]
 80046da:	f7fe fe73 	bl	80033c4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	2200      	movs	r2, #0
 80046e2:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	2200      	movs	r2, #0
 80046e8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	4618      	mov	r0, r3
 80046f2:	f7ff ff19 	bl	8004528 <LL_ADC_IsDeepPowerDownEnabled>
 80046f6:	4603      	mov	r3, r0
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d004      	beq.n	8004706 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	4618      	mov	r0, r3
 8004702:	f7ff feff 	bl	8004504 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	4618      	mov	r0, r3
 800470c:	f7ff ff34 	bl	8004578 <LL_ADC_IsInternalRegulatorEnabled>
 8004710:	4603      	mov	r3, r0
 8004712:	2b00      	cmp	r3, #0
 8004714:	d114      	bne.n	8004740 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	4618      	mov	r0, r3
 800471c:	f7ff ff18 	bl	8004550 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004720:	4b87      	ldr	r3, [pc, #540]	; (8004940 <HAL_ADC_Init+0x290>)
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	099b      	lsrs	r3, r3, #6
 8004726:	4a87      	ldr	r2, [pc, #540]	; (8004944 <HAL_ADC_Init+0x294>)
 8004728:	fba2 2303 	umull	r2, r3, r2, r3
 800472c:	099b      	lsrs	r3, r3, #6
 800472e:	3301      	adds	r3, #1
 8004730:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8004732:	e002      	b.n	800473a <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8004734:	68bb      	ldr	r3, [r7, #8]
 8004736:	3b01      	subs	r3, #1
 8004738:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800473a:	68bb      	ldr	r3, [r7, #8]
 800473c:	2b00      	cmp	r3, #0
 800473e:	d1f9      	bne.n	8004734 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	4618      	mov	r0, r3
 8004746:	f7ff ff17 	bl	8004578 <LL_ADC_IsInternalRegulatorEnabled>
 800474a:	4603      	mov	r3, r0
 800474c:	2b00      	cmp	r3, #0
 800474e:	d10d      	bne.n	800476c <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004754:	f043 0210 	orr.w	r2, r3, #16
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004760:	f043 0201 	orr.w	r2, r3, #1
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8004768:	2301      	movs	r3, #1
 800476a:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	4618      	mov	r0, r3
 8004772:	f7ff ff77 	bl	8004664 <LL_ADC_REG_IsConversionOngoing>
 8004776:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800477c:	f003 0310 	and.w	r3, r3, #16
 8004780:	2b00      	cmp	r3, #0
 8004782:	f040 8129 	bne.w	80049d8 <HAL_ADC_Init+0x328>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8004786:	697b      	ldr	r3, [r7, #20]
 8004788:	2b00      	cmp	r3, #0
 800478a:	f040 8125 	bne.w	80049d8 <HAL_ADC_Init+0x328>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004792:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8004796:	f043 0202 	orr.w	r2, r3, #2
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	4618      	mov	r0, r3
 80047a4:	f7ff ff24 	bl	80045f0 <LL_ADC_IsEnabled>
 80047a8:	4603      	mov	r3, r0
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d136      	bne.n	800481c <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	4a65      	ldr	r2, [pc, #404]	; (8004948 <HAL_ADC_Init+0x298>)
 80047b4:	4293      	cmp	r3, r2
 80047b6:	d004      	beq.n	80047c2 <HAL_ADC_Init+0x112>
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	4a63      	ldr	r2, [pc, #396]	; (800494c <HAL_ADC_Init+0x29c>)
 80047be:	4293      	cmp	r3, r2
 80047c0:	d10e      	bne.n	80047e0 <HAL_ADC_Init+0x130>
 80047c2:	4861      	ldr	r0, [pc, #388]	; (8004948 <HAL_ADC_Init+0x298>)
 80047c4:	f7ff ff14 	bl	80045f0 <LL_ADC_IsEnabled>
 80047c8:	4604      	mov	r4, r0
 80047ca:	4860      	ldr	r0, [pc, #384]	; (800494c <HAL_ADC_Init+0x29c>)
 80047cc:	f7ff ff10 	bl	80045f0 <LL_ADC_IsEnabled>
 80047d0:	4603      	mov	r3, r0
 80047d2:	4323      	orrs	r3, r4
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	bf0c      	ite	eq
 80047d8:	2301      	moveq	r3, #1
 80047da:	2300      	movne	r3, #0
 80047dc:	b2db      	uxtb	r3, r3
 80047de:	e008      	b.n	80047f2 <HAL_ADC_Init+0x142>
 80047e0:	485b      	ldr	r0, [pc, #364]	; (8004950 <HAL_ADC_Init+0x2a0>)
 80047e2:	f7ff ff05 	bl	80045f0 <LL_ADC_IsEnabled>
 80047e6:	4603      	mov	r3, r0
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	bf0c      	ite	eq
 80047ec:	2301      	moveq	r3, #1
 80047ee:	2300      	movne	r3, #0
 80047f0:	b2db      	uxtb	r3, r3
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d012      	beq.n	800481c <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	4a53      	ldr	r2, [pc, #332]	; (8004948 <HAL_ADC_Init+0x298>)
 80047fc:	4293      	cmp	r3, r2
 80047fe:	d004      	beq.n	800480a <HAL_ADC_Init+0x15a>
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	4a51      	ldr	r2, [pc, #324]	; (800494c <HAL_ADC_Init+0x29c>)
 8004806:	4293      	cmp	r3, r2
 8004808:	d101      	bne.n	800480e <HAL_ADC_Init+0x15e>
 800480a:	4a52      	ldr	r2, [pc, #328]	; (8004954 <HAL_ADC_Init+0x2a4>)
 800480c:	e000      	b.n	8004810 <HAL_ADC_Init+0x160>
 800480e:	4a52      	ldr	r2, [pc, #328]	; (8004958 <HAL_ADC_Init+0x2a8>)
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	685b      	ldr	r3, [r3, #4]
 8004814:	4619      	mov	r1, r3
 8004816:	4610      	mov	r0, r2
 8004818:	f7ff fd2e 	bl	8004278 <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 800481c:	f7ff fcf6 	bl	800420c <HAL_GetREVID>
 8004820:	4603      	mov	r3, r0
 8004822:	f241 0203 	movw	r2, #4099	; 0x1003
 8004826:	4293      	cmp	r3, r2
 8004828:	d914      	bls.n	8004854 <HAL_ADC_Init+0x1a4>
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	689b      	ldr	r3, [r3, #8]
 800482e:	2b10      	cmp	r3, #16
 8004830:	d110      	bne.n	8004854 <HAL_ADC_Init+0x1a4>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	7d5b      	ldrb	r3, [r3, #21]
 8004836:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800483c:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8004842:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	7f1b      	ldrb	r3, [r3, #28]
 8004848:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 800484a:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800484c:	f043 030c 	orr.w	r3, r3, #12
 8004850:	61bb      	str	r3, [r7, #24]
 8004852:	e00d      	b.n	8004870 <HAL_ADC_Init+0x1c0>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	7d5b      	ldrb	r3, [r3, #21]
 8004858:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800485e:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8004864:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	7f1b      	ldrb	r3, [r3, #28]
 800486a:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800486c:	4313      	orrs	r3, r2
 800486e:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	7f1b      	ldrb	r3, [r3, #28]
 8004874:	2b01      	cmp	r3, #1
 8004876:	d106      	bne.n	8004886 <HAL_ADC_Init+0x1d6>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	6a1b      	ldr	r3, [r3, #32]
 800487c:	3b01      	subs	r3, #1
 800487e:	045b      	lsls	r3, r3, #17
 8004880:	69ba      	ldr	r2, [r7, #24]
 8004882:	4313      	orrs	r3, r2
 8004884:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800488a:	2b00      	cmp	r3, #0
 800488c:	d009      	beq.n	80048a2 <HAL_ADC_Init+0x1f2>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004892:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800489a:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800489c:	69ba      	ldr	r2, [r7, #24]
 800489e:	4313      	orrs	r3, r2
 80048a0:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	68da      	ldr	r2, [r3, #12]
 80048a8:	4b2c      	ldr	r3, [pc, #176]	; (800495c <HAL_ADC_Init+0x2ac>)
 80048aa:	4013      	ands	r3, r2
 80048ac:	687a      	ldr	r2, [r7, #4]
 80048ae:	6812      	ldr	r2, [r2, #0]
 80048b0:	69b9      	ldr	r1, [r7, #24]
 80048b2:	430b      	orrs	r3, r1
 80048b4:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	4618      	mov	r0, r3
 80048bc:	f7ff fed2 	bl	8004664 <LL_ADC_REG_IsConversionOngoing>
 80048c0:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	4618      	mov	r0, r3
 80048c8:	f7ff fedf 	bl	800468a <LL_ADC_INJ_IsConversionOngoing>
 80048cc:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80048ce:	693b      	ldr	r3, [r7, #16]
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d15f      	bne.n	8004994 <HAL_ADC_Init+0x2e4>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d15c      	bne.n	8004994 <HAL_ADC_Init+0x2e4>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	7d1b      	ldrb	r3, [r3, #20]
 80048de:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      tmpCFGR = (
 80048e4:	4313      	orrs	r3, r2
 80048e6:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	68da      	ldr	r2, [r3, #12]
 80048ee:	4b1c      	ldr	r3, [pc, #112]	; (8004960 <HAL_ADC_Init+0x2b0>)
 80048f0:	4013      	ands	r3, r2
 80048f2:	687a      	ldr	r2, [r7, #4]
 80048f4:	6812      	ldr	r2, [r2, #0]
 80048f6:	69b9      	ldr	r1, [r7, #24]
 80048f8:	430b      	orrs	r3, r1
 80048fa:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004902:	2b01      	cmp	r3, #1
 8004904:	d130      	bne.n	8004968 <HAL_ADC_Init+0x2b8>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800490a:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	691a      	ldr	r2, [r3, #16]
 8004912:	4b14      	ldr	r3, [pc, #80]	; (8004964 <HAL_ADC_Init+0x2b4>)
 8004914:	4013      	ands	r3, r2
 8004916:	687a      	ldr	r2, [r7, #4]
 8004918:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800491a:	3a01      	subs	r2, #1
 800491c:	0411      	lsls	r1, r2, #16
 800491e:	687a      	ldr	r2, [r7, #4]
 8004920:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8004922:	4311      	orrs	r1, r2
 8004924:	687a      	ldr	r2, [r7, #4]
 8004926:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8004928:	4311      	orrs	r1, r2
 800492a:	687a      	ldr	r2, [r7, #4]
 800492c:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800492e:	430a      	orrs	r2, r1
 8004930:	431a      	orrs	r2, r3
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	f042 0201 	orr.w	r2, r2, #1
 800493a:	611a      	str	r2, [r3, #16]
 800493c:	e01c      	b.n	8004978 <HAL_ADC_Init+0x2c8>
 800493e:	bf00      	nop
 8004940:	20000010 	.word	0x20000010
 8004944:	053e2d63 	.word	0x053e2d63
 8004948:	40022000 	.word	0x40022000
 800494c:	40022100 	.word	0x40022100
 8004950:	58026000 	.word	0x58026000
 8004954:	40022300 	.word	0x40022300
 8004958:	58026300 	.word	0x58026300
 800495c:	fff0c003 	.word	0xfff0c003
 8004960:	ffffbffc 	.word	0xffffbffc
 8004964:	fc00f81e 	.word	0xfc00f81e

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	691a      	ldr	r2, [r3, #16]
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	f022 0201 	bic.w	r2, r2, #1
 8004976:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	691b      	ldr	r3, [r3, #16]
 800497e:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	430a      	orrs	r2, r1
 800498c:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 800498e:	6878      	ldr	r0, [r7, #4]
 8004990:	f001 f804 	bl	800599c <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	68db      	ldr	r3, [r3, #12]
 8004998:	2b01      	cmp	r3, #1
 800499a:	d10c      	bne.n	80049b6 <HAL_ADC_Init+0x306>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049a2:	f023 010f 	bic.w	r1, r3, #15
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	699b      	ldr	r3, [r3, #24]
 80049aa:	1e5a      	subs	r2, r3, #1
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	430a      	orrs	r2, r1
 80049b2:	631a      	str	r2, [r3, #48]	; 0x30
 80049b4:	e007      	b.n	80049c6 <HAL_ADC_Init+0x316>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	f022 020f 	bic.w	r2, r2, #15
 80049c4:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80049ca:	f023 0303 	bic.w	r3, r3, #3
 80049ce:	f043 0201 	orr.w	r2, r3, #1
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	655a      	str	r2, [r3, #84]	; 0x54
 80049d6:	e007      	b.n	80049e8 <HAL_ADC_Init+0x338>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80049dc:	f043 0210 	orr.w	r2, r3, #16
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80049e4:	2301      	movs	r3, #1
 80049e6:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80049e8:	7ffb      	ldrb	r3, [r7, #31]
}
 80049ea:	4618      	mov	r0, r3
 80049ec:	3724      	adds	r7, #36	; 0x24
 80049ee:	46bd      	mov	sp, r7
 80049f0:	bd90      	pop	{r4, r7, pc}
 80049f2:	bf00      	nop

080049f4 <HAL_ADC_Start_IT>:
  *          before calling HAL_ADC_Start_IT().
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef *hadc)
{
 80049f4:	b580      	push	{r7, lr}
 80049f6:	b086      	sub	sp, #24
 80049f8:	af00      	add	r7, sp, #0
 80049fa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	4a92      	ldr	r2, [pc, #584]	; (8004c4c <HAL_ADC_Start_IT+0x258>)
 8004a02:	4293      	cmp	r3, r2
 8004a04:	d004      	beq.n	8004a10 <HAL_ADC_Start_IT+0x1c>
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	4a91      	ldr	r2, [pc, #580]	; (8004c50 <HAL_ADC_Start_IT+0x25c>)
 8004a0c:	4293      	cmp	r3, r2
 8004a0e:	d101      	bne.n	8004a14 <HAL_ADC_Start_IT+0x20>
 8004a10:	4b90      	ldr	r3, [pc, #576]	; (8004c54 <HAL_ADC_Start_IT+0x260>)
 8004a12:	e000      	b.n	8004a16 <HAL_ADC_Start_IT+0x22>
 8004a14:	4b90      	ldr	r3, [pc, #576]	; (8004c58 <HAL_ADC_Start_IT+0x264>)
 8004a16:	4618      	mov	r0, r3
 8004a18:	f7ff fd58 	bl	80044cc <LL_ADC_GetMultimode>
 8004a1c:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	4618      	mov	r0, r3
 8004a24:	f7ff fe1e 	bl	8004664 <LL_ADC_REG_IsConversionOngoing>
 8004a28:	4603      	mov	r3, r0
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	f040 8118 	bne.w	8004c60 <HAL_ADC_Start_IT+0x26c>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004a36:	2b01      	cmp	r3, #1
 8004a38:	d101      	bne.n	8004a3e <HAL_ADC_Start_IT+0x4a>
 8004a3a:	2302      	movs	r3, #2
 8004a3c:	e113      	b.n	8004c66 <HAL_ADC_Start_IT+0x272>
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	2201      	movs	r2, #1
 8004a42:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8004a46:	6878      	ldr	r0, [r7, #4]
 8004a48:	f000 febe 	bl	80057c8 <ADC_Enable>
 8004a4c:	4603      	mov	r3, r0
 8004a4e:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8004a50:	7dfb      	ldrb	r3, [r7, #23]
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	f040 80f5 	bne.w	8004c42 <HAL_ADC_Start_IT+0x24e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004a5c:	4b7f      	ldr	r3, [pc, #508]	; (8004c5c <HAL_ADC_Start_IT+0x268>)
 8004a5e:	4013      	ands	r3, r2
 8004a60:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	655a      	str	r2, [r3, #84]	; 0x54
                        HAL_ADC_STATE_REG_BUSY);

      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	4a78      	ldr	r2, [pc, #480]	; (8004c50 <HAL_ADC_Start_IT+0x25c>)
 8004a6e:	4293      	cmp	r3, r2
 8004a70:	d002      	beq.n	8004a78 <HAL_ADC_Start_IT+0x84>
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	e000      	b.n	8004a7a <HAL_ADC_Start_IT+0x86>
 8004a78:	4b74      	ldr	r3, [pc, #464]	; (8004c4c <HAL_ADC_Start_IT+0x258>)
 8004a7a:	687a      	ldr	r2, [r7, #4]
 8004a7c:	6812      	ldr	r2, [r2, #0]
 8004a7e:	4293      	cmp	r3, r2
 8004a80:	d002      	beq.n	8004a88 <HAL_ADC_Start_IT+0x94>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8004a82:	693b      	ldr	r3, [r7, #16]
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d105      	bne.n	8004a94 <HAL_ADC_Start_IT+0xa0>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a8c:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	655a      	str	r2, [r3, #84]	; 0x54
      }

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a98:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d006      	beq.n	8004aae <HAL_ADC_Start_IT+0xba>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004aa4:	f023 0206 	bic.w	r2, r3, #6
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	659a      	str	r2, [r3, #88]	; 0x58
 8004aac:	e002      	b.n	8004ab4 <HAL_ADC_Start_IT+0xc0>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	2200      	movs	r2, #0
 8004ab2:	659a      	str	r2, [r3, #88]	; 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	221c      	movs	r2, #28
 8004aba:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	2200      	movs	r2, #0
 8004ac0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

      /* Disable all interruptions before enabling the desired ones */
      __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_EOS | ADC_IT_OVR));
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	685a      	ldr	r2, [r3, #4]
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	f022 021c 	bic.w	r2, r2, #28
 8004ad2:	605a      	str	r2, [r3, #4]

      /* Enable ADC end of conversion interrupt */
      switch (hadc->Init.EOCSelection)
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	691b      	ldr	r3, [r3, #16]
 8004ad8:	2b08      	cmp	r3, #8
 8004ada:	d108      	bne.n	8004aee <HAL_ADC_Start_IT+0xfa>
      {
        case ADC_EOC_SEQ_CONV:
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOS);
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	685a      	ldr	r2, [r3, #4]
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	f042 0208 	orr.w	r2, r2, #8
 8004aea:	605a      	str	r2, [r3, #4]
          break;
 8004aec:	e008      	b.n	8004b00 <HAL_ADC_Start_IT+0x10c>
        /* case ADC_EOC_SINGLE_CONV */
        default:
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOC);
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	685a      	ldr	r2, [r3, #4]
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	f042 0204 	orr.w	r2, r2, #4
 8004afc:	605a      	str	r2, [r3, #4]
          break;
 8004afe:	bf00      	nop

      /* Enable ADC overrun interrupt */
      /* If hadc->Init.Overrun is set to ADC_OVR_DATA_PRESERVED, only then is
         ADC_IT_OVR enabled; otherwise data overwrite is considered as normal
         behavior and no CPU time is lost for a non-processed interruption */
      if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d107      	bne.n	8004b18 <HAL_ADC_Start_IT+0x124>
      {
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	685a      	ldr	r2, [r3, #4]
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	f042 0210 	orr.w	r2, r2, #16
 8004b16:	605a      	str	r2, [r3, #4]
      /* trigger event.                                                       */
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	4a4c      	ldr	r2, [pc, #304]	; (8004c50 <HAL_ADC_Start_IT+0x25c>)
 8004b1e:	4293      	cmp	r3, r2
 8004b20:	d002      	beq.n	8004b28 <HAL_ADC_Start_IT+0x134>
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	e000      	b.n	8004b2a <HAL_ADC_Start_IT+0x136>
 8004b28:	4b48      	ldr	r3, [pc, #288]	; (8004c4c <HAL_ADC_Start_IT+0x258>)
 8004b2a:	687a      	ldr	r2, [r7, #4]
 8004b2c:	6812      	ldr	r2, [r2, #0]
 8004b2e:	4293      	cmp	r3, r2
 8004b30:	d008      	beq.n	8004b44 <HAL_ADC_Start_IT+0x150>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8004b32:	693b      	ldr	r3, [r7, #16]
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d005      	beq.n	8004b44 <HAL_ADC_Start_IT+0x150>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8004b38:	693b      	ldr	r3, [r7, #16]
 8004b3a:	2b05      	cmp	r3, #5
 8004b3c:	d002      	beq.n	8004b44 <HAL_ADC_Start_IT+0x150>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8004b3e:	693b      	ldr	r3, [r7, #16]
 8004b40:	2b09      	cmp	r3, #9
 8004b42:	d13a      	bne.n	8004bba <HAL_ADC_Start_IT+0x1c6>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	68db      	ldr	r3, [r3, #12]
 8004b4a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d02d      	beq.n	8004bae <HAL_ADC_Start_IT+0x1ba>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b56:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8004b5a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	655a      	str	r2, [r3, #84]	; 0x54

          /* Enable as well injected interruptions in case
           HAL_ADCEx_InjectedStart_IT() has not been called beforehand. This
           allows to start regular and injected conversions when JAUTO is
           set with a single call to HAL_ADC_Start_IT() */
          switch (hadc->Init.EOCSelection)
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	691b      	ldr	r3, [r3, #16]
 8004b66:	2b08      	cmp	r3, #8
 8004b68:	d110      	bne.n	8004b8c <HAL_ADC_Start_IT+0x198>
          {
            case ADC_EOC_SEQ_CONV:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	685a      	ldr	r2, [r3, #4]
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	f022 0220 	bic.w	r2, r2, #32
 8004b78:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOS);
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	685a      	ldr	r2, [r3, #4]
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004b88:	605a      	str	r2, [r3, #4]
              break;
 8004b8a:	e010      	b.n	8004bae <HAL_ADC_Start_IT+0x1ba>
            /* case ADC_EOC_SINGLE_CONV */
            default:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOS);
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	685a      	ldr	r2, [r3, #4]
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004b9a:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	685a      	ldr	r2, [r3, #4]
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	f042 0220 	orr.w	r2, r2, #32
 8004baa:	605a      	str	r2, [r3, #4]
              break;
 8004bac:	bf00      	nop
          }
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	4618      	mov	r0, r3
 8004bb4:	f7ff fd42 	bl	800463c <LL_ADC_REG_StartConversion>
 8004bb8:	e054      	b.n	8004c64 <HAL_ADC_Start_IT+0x270>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004bbe:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	655a      	str	r2, [r3, #84]	; 0x54
        /* if Master ADC JAUTO bit is set, Slave injected interruptions
           are enabled nevertheless (for same reason as above) */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	4a21      	ldr	r2, [pc, #132]	; (8004c50 <HAL_ADC_Start_IT+0x25c>)
 8004bcc:	4293      	cmp	r3, r2
 8004bce:	d002      	beq.n	8004bd6 <HAL_ADC_Start_IT+0x1e2>
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	e000      	b.n	8004bd8 <HAL_ADC_Start_IT+0x1e4>
 8004bd6:	4b1d      	ldr	r3, [pc, #116]	; (8004c4c <HAL_ADC_Start_IT+0x258>)
 8004bd8:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	68db      	ldr	r3, [r3, #12]
 8004bde:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d03e      	beq.n	8004c64 <HAL_ADC_Start_IT+0x270>
        {
          /* First, update Slave State in setting HAL_ADC_STATE_INJ_BUSY bit
             and in resetting HAL_ADC_STATE_INJ_EOC bit */
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004bea:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8004bee:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	655a      	str	r2, [r3, #84]	; 0x54
          /* Next, set Slave injected interruptions */
          switch (hadc->Init.EOCSelection)
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	691b      	ldr	r3, [r3, #16]
 8004bfa:	2b08      	cmp	r3, #8
 8004bfc:	d110      	bne.n	8004c20 <HAL_ADC_Start_IT+0x22c>
          {
            case ADC_EOC_SEQ_CONV:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	685a      	ldr	r2, [r3, #4]
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	f022 0220 	bic.w	r2, r2, #32
 8004c0c:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOS);
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	685a      	ldr	r2, [r3, #4]
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004c1c:	605a      	str	r2, [r3, #4]
              break;
 8004c1e:	e021      	b.n	8004c64 <HAL_ADC_Start_IT+0x270>
            /* case ADC_EOC_SINGLE_CONV */
            default:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOS);
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	685a      	ldr	r2, [r3, #4]
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004c2e:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	685a      	ldr	r2, [r3, #4]
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	f042 0220 	orr.w	r2, r2, #32
 8004c3e:	605a      	str	r2, [r3, #4]
              break;
 8004c40:	e010      	b.n	8004c64 <HAL_ADC_Start_IT+0x270>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	2200      	movs	r2, #0
 8004c46:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8004c4a:	e00b      	b.n	8004c64 <HAL_ADC_Start_IT+0x270>
 8004c4c:	40022000 	.word	0x40022000
 8004c50:	40022100 	.word	0x40022100
 8004c54:	40022300 	.word	0x40022300
 8004c58:	58026300 	.word	0x58026300
 8004c5c:	fffff0fe 	.word	0xfffff0fe
    }

  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8004c60:	2302      	movs	r3, #2
 8004c62:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8004c64:	7dfb      	ldrb	r3, [r7, #23]
}
 8004c66:	4618      	mov	r0, r3
 8004c68:	3718      	adds	r7, #24
 8004c6a:	46bd      	mov	sp, r7
 8004c6c:	bd80      	pop	{r7, pc}
 8004c6e:	bf00      	nop

08004c70 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8004c70:	b480      	push	{r7}
 8004c72:	b083      	sub	sp, #12
 8004c74:	af00      	add	r7, sp, #0
 8004c76:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8004c7e:	4618      	mov	r0, r3
 8004c80:	370c      	adds	r7, #12
 8004c82:	46bd      	mov	sp, r7
 8004c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c88:	4770      	bx	lr
	...

08004c8c <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8004c8c:	b580      	push	{r7, lr}
 8004c8e:	b08a      	sub	sp, #40	; 0x28
 8004c90:	af00      	add	r7, sp, #0
 8004c92:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8004c94:	2300      	movs	r3, #0
 8004c96:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	685b      	ldr	r3, [r3, #4]
 8004ca6:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	4a87      	ldr	r2, [pc, #540]	; (8004ecc <HAL_ADC_IRQHandler+0x240>)
 8004cae:	4293      	cmp	r3, r2
 8004cb0:	d004      	beq.n	8004cbc <HAL_ADC_IRQHandler+0x30>
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	4a86      	ldr	r2, [pc, #536]	; (8004ed0 <HAL_ADC_IRQHandler+0x244>)
 8004cb8:	4293      	cmp	r3, r2
 8004cba:	d101      	bne.n	8004cc0 <HAL_ADC_IRQHandler+0x34>
 8004cbc:	4b85      	ldr	r3, [pc, #532]	; (8004ed4 <HAL_ADC_IRQHandler+0x248>)
 8004cbe:	e000      	b.n	8004cc2 <HAL_ADC_IRQHandler+0x36>
 8004cc0:	4b85      	ldr	r3, [pc, #532]	; (8004ed8 <HAL_ADC_IRQHandler+0x24c>)
 8004cc2:	4618      	mov	r0, r3
 8004cc4:	f7ff fc02 	bl	80044cc <LL_ADC_GetMultimode>
 8004cc8:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8004cca:	69fb      	ldr	r3, [r7, #28]
 8004ccc:	f003 0302 	and.w	r3, r3, #2
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d017      	beq.n	8004d04 <HAL_ADC_IRQHandler+0x78>
 8004cd4:	69bb      	ldr	r3, [r7, #24]
 8004cd6:	f003 0302 	and.w	r3, r3, #2
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d012      	beq.n	8004d04 <HAL_ADC_IRQHandler+0x78>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ce2:	f003 0310 	and.w	r3, r3, #16
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d105      	bne.n	8004cf6 <HAL_ADC_IRQHandler+0x6a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004cee:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	655a      	str	r2, [r3, #84]	; 0x54

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8004cf6:	6878      	ldr	r0, [r7, #4]
 8004cf8:	f001 f81a 	bl	8005d30 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	2202      	movs	r2, #2
 8004d02:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8004d04:	69fb      	ldr	r3, [r7, #28]
 8004d06:	f003 0304 	and.w	r3, r3, #4
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d004      	beq.n	8004d18 <HAL_ADC_IRQHandler+0x8c>
 8004d0e:	69bb      	ldr	r3, [r7, #24]
 8004d10:	f003 0304 	and.w	r3, r3, #4
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d10a      	bne.n	8004d2e <HAL_ADC_IRQHandler+0xa2>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8004d18:	69fb      	ldr	r3, [r7, #28]
 8004d1a:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	f000 8083 	beq.w	8004e2a <HAL_ADC_IRQHandler+0x19e>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8004d24:	69bb      	ldr	r3, [r7, #24]
 8004d26:	f003 0308 	and.w	r3, r3, #8
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d07d      	beq.n	8004e2a <HAL_ADC_IRQHandler+0x19e>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d32:	f003 0310 	and.w	r3, r3, #16
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d105      	bne.n	8004d46 <HAL_ADC_IRQHandler+0xba>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d3e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	4618      	mov	r0, r3
 8004d4c:	f7ff fb1c 	bl	8004388 <LL_ADC_REG_IsTriggerSourceSWStart>
 8004d50:	4603      	mov	r3, r0
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d062      	beq.n	8004e1c <HAL_ADC_IRQHandler+0x190>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	4a5d      	ldr	r2, [pc, #372]	; (8004ed0 <HAL_ADC_IRQHandler+0x244>)
 8004d5c:	4293      	cmp	r3, r2
 8004d5e:	d002      	beq.n	8004d66 <HAL_ADC_IRQHandler+0xda>
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	e000      	b.n	8004d68 <HAL_ADC_IRQHandler+0xdc>
 8004d66:	4b59      	ldr	r3, [pc, #356]	; (8004ecc <HAL_ADC_IRQHandler+0x240>)
 8004d68:	687a      	ldr	r2, [r7, #4]
 8004d6a:	6812      	ldr	r2, [r2, #0]
 8004d6c:	4293      	cmp	r3, r2
 8004d6e:	d008      	beq.n	8004d82 <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8004d70:	697b      	ldr	r3, [r7, #20]
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d005      	beq.n	8004d82 <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8004d76:	697b      	ldr	r3, [r7, #20]
 8004d78:	2b05      	cmp	r3, #5
 8004d7a:	d002      	beq.n	8004d82 <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8004d7c:	697b      	ldr	r3, [r7, #20]
 8004d7e:	2b09      	cmp	r3, #9
 8004d80:	d104      	bne.n	8004d8c <HAL_ADC_IRQHandler+0x100>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	68db      	ldr	r3, [r3, #12]
 8004d88:	623b      	str	r3, [r7, #32]
 8004d8a:	e00c      	b.n	8004da6 <HAL_ADC_IRQHandler+0x11a>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	4a4f      	ldr	r2, [pc, #316]	; (8004ed0 <HAL_ADC_IRQHandler+0x244>)
 8004d92:	4293      	cmp	r3, r2
 8004d94:	d002      	beq.n	8004d9c <HAL_ADC_IRQHandler+0x110>
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	e000      	b.n	8004d9e <HAL_ADC_IRQHandler+0x112>
 8004d9c:	4b4b      	ldr	r3, [pc, #300]	; (8004ecc <HAL_ADC_IRQHandler+0x240>)
 8004d9e:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8004da0:	693b      	ldr	r3, [r7, #16]
 8004da2:	68db      	ldr	r3, [r3, #12]
 8004da4:	623b      	str	r3, [r7, #32]
      }

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8004da6:	6a3b      	ldr	r3, [r7, #32]
 8004da8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d135      	bne.n	8004e1c <HAL_ADC_IRQHandler+0x190>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	f003 0308 	and.w	r3, r3, #8
 8004dba:	2b08      	cmp	r3, #8
 8004dbc:	d12e      	bne.n	8004e1c <HAL_ADC_IRQHandler+0x190>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	4618      	mov	r0, r3
 8004dc4:	f7ff fc4e 	bl	8004664 <LL_ADC_REG_IsConversionOngoing>
 8004dc8:	4603      	mov	r3, r0
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d11a      	bne.n	8004e04 <HAL_ADC_IRQHandler+0x178>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	685a      	ldr	r2, [r3, #4]
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	f022 020c 	bic.w	r2, r2, #12
 8004ddc:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004de2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	655a      	str	r2, [r3, #84]	; 0x54

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004dee:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d112      	bne.n	8004e1c <HAL_ADC_IRQHandler+0x190>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004dfa:	f043 0201 	orr.w	r2, r3, #1
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	655a      	str	r2, [r3, #84]	; 0x54
 8004e02:	e00b      	b.n	8004e1c <HAL_ADC_IRQHandler+0x190>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e08:	f043 0210 	orr.w	r2, r3, #16
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e14:	f043 0201 	orr.w	r2, r3, #1
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	659a      	str	r2, [r3, #88]	; 0x58
    /*       possibility to use:                                              */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8004e1c:	6878      	ldr	r0, [r7, #4]
 8004e1e:	f7fe f9c7 	bl	80031b0 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	220c      	movs	r2, #12
 8004e28:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8004e2a:	69fb      	ldr	r3, [r7, #28]
 8004e2c:	f003 0320 	and.w	r3, r3, #32
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d004      	beq.n	8004e3e <HAL_ADC_IRQHandler+0x1b2>
 8004e34:	69bb      	ldr	r3, [r7, #24]
 8004e36:	f003 0320 	and.w	r3, r3, #32
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d10b      	bne.n	8004e56 <HAL_ADC_IRQHandler+0x1ca>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8004e3e:	69fb      	ldr	r3, [r7, #28]
 8004e40:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	f000 80a0 	beq.w	8004f8a <HAL_ADC_IRQHandler+0x2fe>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8004e4a:	69bb      	ldr	r3, [r7, #24]
 8004e4c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	f000 809a 	beq.w	8004f8a <HAL_ADC_IRQHandler+0x2fe>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e5a:	f003 0310 	and.w	r3, r3, #16
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d105      	bne.n	8004e6e <HAL_ADC_IRQHandler+0x1e2>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e66:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	4618      	mov	r0, r3
 8004e74:	f7ff fac7 	bl	8004406 <LL_ADC_INJ_IsTriggerSourceSWStart>
 8004e78:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	4618      	mov	r0, r3
 8004e80:	f7ff fa82 	bl	8004388 <LL_ADC_REG_IsTriggerSourceSWStart>
 8004e84:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	4a11      	ldr	r2, [pc, #68]	; (8004ed0 <HAL_ADC_IRQHandler+0x244>)
 8004e8c:	4293      	cmp	r3, r2
 8004e8e:	d002      	beq.n	8004e96 <HAL_ADC_IRQHandler+0x20a>
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	e000      	b.n	8004e98 <HAL_ADC_IRQHandler+0x20c>
 8004e96:	4b0d      	ldr	r3, [pc, #52]	; (8004ecc <HAL_ADC_IRQHandler+0x240>)
 8004e98:	687a      	ldr	r2, [r7, #4]
 8004e9a:	6812      	ldr	r2, [r2, #0]
 8004e9c:	4293      	cmp	r3, r2
 8004e9e:	d008      	beq.n	8004eb2 <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8004ea0:	697b      	ldr	r3, [r7, #20]
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d005      	beq.n	8004eb2 <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 8004ea6:	697b      	ldr	r3, [r7, #20]
 8004ea8:	2b06      	cmp	r3, #6
 8004eaa:	d002      	beq.n	8004eb2 <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8004eac:	697b      	ldr	r3, [r7, #20]
 8004eae:	2b07      	cmp	r3, #7
 8004eb0:	d104      	bne.n	8004ebc <HAL_ADC_IRQHandler+0x230>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	68db      	ldr	r3, [r3, #12]
 8004eb8:	623b      	str	r3, [r7, #32]
 8004eba:	e014      	b.n	8004ee6 <HAL_ADC_IRQHandler+0x25a>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	4a03      	ldr	r2, [pc, #12]	; (8004ed0 <HAL_ADC_IRQHandler+0x244>)
 8004ec2:	4293      	cmp	r3, r2
 8004ec4:	d00a      	beq.n	8004edc <HAL_ADC_IRQHandler+0x250>
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	e008      	b.n	8004ede <HAL_ADC_IRQHandler+0x252>
 8004ecc:	40022000 	.word	0x40022000
 8004ed0:	40022100 	.word	0x40022100
 8004ed4:	40022300 	.word	0x40022300
 8004ed8:	58026300 	.word	0x58026300
 8004edc:	4b84      	ldr	r3, [pc, #528]	; (80050f0 <HAL_ADC_IRQHandler+0x464>)
 8004ede:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8004ee0:	693b      	ldr	r3, [r7, #16]
 8004ee2:	68db      	ldr	r3, [r3, #12]
 8004ee4:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d047      	beq.n	8004f7c <HAL_ADC_IRQHandler+0x2f0>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8004eec:	6a3b      	ldr	r3, [r7, #32]
 8004eee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d007      	beq.n	8004f06 <HAL_ADC_IRQHandler+0x27a>
 8004ef6:	68bb      	ldr	r3, [r7, #8]
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d03f      	beq.n	8004f7c <HAL_ADC_IRQHandler+0x2f0>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8004efc:	6a3b      	ldr	r3, [r7, #32]
 8004efe:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d13a      	bne.n	8004f7c <HAL_ADC_IRQHandler+0x2f0>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f10:	2b40      	cmp	r3, #64	; 0x40
 8004f12:	d133      	bne.n	8004f7c <HAL_ADC_IRQHandler+0x2f0>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8004f14:	6a3b      	ldr	r3, [r7, #32]
 8004f16:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d12e      	bne.n	8004f7c <HAL_ADC_IRQHandler+0x2f0>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	4618      	mov	r0, r3
 8004f24:	f7ff fbb1 	bl	800468a <LL_ADC_INJ_IsConversionOngoing>
 8004f28:	4603      	mov	r3, r0
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d11a      	bne.n	8004f64 <HAL_ADC_IRQHandler+0x2d8>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	685a      	ldr	r2, [r3, #4]
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004f3c:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f42:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	655a      	str	r2, [r3, #84]	; 0x54

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d112      	bne.n	8004f7c <HAL_ADC_IRQHandler+0x2f0>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f5a:	f043 0201 	orr.w	r2, r3, #1
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	655a      	str	r2, [r3, #84]	; 0x54
 8004f62:	e00b      	b.n	8004f7c <HAL_ADC_IRQHandler+0x2f0>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f68:	f043 0210 	orr.w	r2, r3, #16
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	655a      	str	r2, [r3, #84]	; 0x54

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f74:	f043 0201 	orr.w	r2, r3, #1
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	659a      	str	r2, [r3, #88]	; 0x58
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8004f7c:	6878      	ldr	r0, [r7, #4]
 8004f7e:	f000 feaf 	bl	8005ce0 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	2260      	movs	r2, #96	; 0x60
 8004f88:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8004f8a:	69fb      	ldr	r3, [r7, #28]
 8004f8c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d011      	beq.n	8004fb8 <HAL_ADC_IRQHandler+0x32c>
 8004f94:	69bb      	ldr	r3, [r7, #24]
 8004f96:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d00c      	beq.n	8004fb8 <HAL_ADC_IRQHandler+0x32c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004fa2:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8004faa:	6878      	ldr	r0, [r7, #4]
 8004fac:	f000 f8a8 	bl	8005100 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	2280      	movs	r2, #128	; 0x80
 8004fb6:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8004fb8:	69fb      	ldr	r3, [r7, #28]
 8004fba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d012      	beq.n	8004fe8 <HAL_ADC_IRQHandler+0x35c>
 8004fc2:	69bb      	ldr	r3, [r7, #24]
 8004fc4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d00d      	beq.n	8004fe8 <HAL_ADC_IRQHandler+0x35c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004fd0:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8004fd8:	6878      	ldr	r0, [r7, #4]
 8004fda:	f000 fe95 	bl	8005d08 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004fe6:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8004fe8:	69fb      	ldr	r3, [r7, #28]
 8004fea:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d012      	beq.n	8005018 <HAL_ADC_IRQHandler+0x38c>
 8004ff2:	69bb      	ldr	r3, [r7, #24]
 8004ff4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d00d      	beq.n	8005018 <HAL_ADC_IRQHandler+0x38c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005000:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8005008:	6878      	ldr	r0, [r7, #4]
 800500a:	f000 fe87 	bl	8005d1c <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005016:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8005018:	69fb      	ldr	r3, [r7, #28]
 800501a:	f003 0310 	and.w	r3, r3, #16
 800501e:	2b00      	cmp	r3, #0
 8005020:	d043      	beq.n	80050aa <HAL_ADC_IRQHandler+0x41e>
 8005022:	69bb      	ldr	r3, [r7, #24]
 8005024:	f003 0310 	and.w	r3, r3, #16
 8005028:	2b00      	cmp	r3, #0
 800502a:	d03e      	beq.n	80050aa <HAL_ADC_IRQHandler+0x41e>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005030:	2b00      	cmp	r3, #0
 8005032:	d102      	bne.n	800503a <HAL_ADC_IRQHandler+0x3ae>
    {
      overrun_error = 1UL;
 8005034:	2301      	movs	r3, #1
 8005036:	627b      	str	r3, [r7, #36]	; 0x24
 8005038:	e021      	b.n	800507e <HAL_ADC_IRQHandler+0x3f2>
    }
    else
    {
      /* Check DMA configuration */
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 800503a:	697b      	ldr	r3, [r7, #20]
 800503c:	2b00      	cmp	r3, #0
 800503e:	d015      	beq.n	800506c <HAL_ADC_IRQHandler+0x3e0>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	4a2a      	ldr	r2, [pc, #168]	; (80050f0 <HAL_ADC_IRQHandler+0x464>)
 8005046:	4293      	cmp	r3, r2
 8005048:	d004      	beq.n	8005054 <HAL_ADC_IRQHandler+0x3c8>
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	4a29      	ldr	r2, [pc, #164]	; (80050f4 <HAL_ADC_IRQHandler+0x468>)
 8005050:	4293      	cmp	r3, r2
 8005052:	d101      	bne.n	8005058 <HAL_ADC_IRQHandler+0x3cc>
 8005054:	4b28      	ldr	r3, [pc, #160]	; (80050f8 <HAL_ADC_IRQHandler+0x46c>)
 8005056:	e000      	b.n	800505a <HAL_ADC_IRQHandler+0x3ce>
 8005058:	4b28      	ldr	r3, [pc, #160]	; (80050fc <HAL_ADC_IRQHandler+0x470>)
 800505a:	4618      	mov	r0, r3
 800505c:	f7ff fa44 	bl	80044e8 <LL_ADC_GetMultiDMATransfer>
 8005060:	4603      	mov	r3, r0
 8005062:	2b00      	cmp	r3, #0
 8005064:	d00b      	beq.n	800507e <HAL_ADC_IRQHandler+0x3f2>
        {
          overrun_error = 1UL;
 8005066:	2301      	movs	r3, #1
 8005068:	627b      	str	r3, [r7, #36]	; 0x24
 800506a:	e008      	b.n	800507e <HAL_ADC_IRQHandler+0x3f2>
        }
      }
      else
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMNGT) != 0UL)
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	68db      	ldr	r3, [r3, #12]
 8005072:	f003 0303 	and.w	r3, r3, #3
 8005076:	2b00      	cmp	r3, #0
 8005078:	d001      	beq.n	800507e <HAL_ADC_IRQHandler+0x3f2>
        {
          overrun_error = 1UL;
 800507a:	2301      	movs	r3, #1
 800507c:	627b      	str	r3, [r7, #36]	; 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 800507e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005080:	2b01      	cmp	r3, #1
 8005082:	d10e      	bne.n	80050a2 <HAL_ADC_IRQHandler+0x416>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005088:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005094:	f043 0202 	orr.w	r2, r3, #2
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	659a      	str	r2, [r3, #88]	; 0x58
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 800509c:	6878      	ldr	r0, [r7, #4]
 800509e:	f000 f839 	bl	8005114 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	2210      	movs	r2, #16
 80050a8:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 80050aa:	69fb      	ldr	r3, [r7, #28]
 80050ac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d018      	beq.n	80050e6 <HAL_ADC_IRQHandler+0x45a>
 80050b4:	69bb      	ldr	r3, [r7, #24]
 80050b6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d013      	beq.n	80050e6 <HAL_ADC_IRQHandler+0x45a>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80050c2:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80050ce:	f043 0208 	orr.w	r2, r3, #8
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	659a      	str	r2, [r3, #88]	; 0x58

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80050de:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 80050e0:	6878      	ldr	r0, [r7, #4]
 80050e2:	f000 fe07 	bl	8005cf4 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 80050e6:	bf00      	nop
 80050e8:	3728      	adds	r7, #40	; 0x28
 80050ea:	46bd      	mov	sp, r7
 80050ec:	bd80      	pop	{r7, pc}
 80050ee:	bf00      	nop
 80050f0:	40022000 	.word	0x40022000
 80050f4:	40022100 	.word	0x40022100
 80050f8:	40022300 	.word	0x40022300
 80050fc:	58026300 	.word	0x58026300

08005100 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8005100:	b480      	push	{r7}
 8005102:	b083      	sub	sp, #12
 8005104:	af00      	add	r7, sp, #0
 8005106:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8005108:	bf00      	nop
 800510a:	370c      	adds	r7, #12
 800510c:	46bd      	mov	sp, r7
 800510e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005112:	4770      	bx	lr

08005114 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8005114:	b480      	push	{r7}
 8005116:	b083      	sub	sp, #12
 8005118:	af00      	add	r7, sp, #0
 800511a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 800511c:	bf00      	nop
 800511e:	370c      	adds	r7, #12
 8005120:	46bd      	mov	sp, r7
 8005122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005126:	4770      	bx	lr

08005128 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8005128:	b590      	push	{r4, r7, lr}
 800512a:	b0a1      	sub	sp, #132	; 0x84
 800512c:	af00      	add	r7, sp, #0
 800512e:	6078      	str	r0, [r7, #4]
 8005130:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005132:	2300      	movs	r3, #0
 8005134:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8005138:	2300      	movs	r3, #0
 800513a:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 800513c:	683b      	ldr	r3, [r7, #0]
 800513e:	68db      	ldr	r3, [r3, #12]
 8005140:	4a9d      	ldr	r2, [pc, #628]	; (80053b8 <HAL_ADC_ConfigChannel+0x290>)
 8005142:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800514a:	2b01      	cmp	r3, #1
 800514c:	d101      	bne.n	8005152 <HAL_ADC_ConfigChannel+0x2a>
 800514e:	2302      	movs	r3, #2
 8005150:	e321      	b.n	8005796 <HAL_ADC_ConfigChannel+0x66e>
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	2201      	movs	r2, #1
 8005156:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	4618      	mov	r0, r3
 8005160:	f7ff fa80 	bl	8004664 <LL_ADC_REG_IsConversionOngoing>
 8005164:	4603      	mov	r3, r0
 8005166:	2b00      	cmp	r3, #0
 8005168:	f040 8306 	bne.w	8005778 <HAL_ADC_ConfigChannel+0x650>
      /* ADC channels preselection */
      hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
    }
#else
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 800516c:	683b      	ldr	r3, [r7, #0]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005174:	2b00      	cmp	r3, #0
 8005176:	d108      	bne.n	800518a <HAL_ADC_ConfigChannel+0x62>
 8005178:	683b      	ldr	r3, [r7, #0]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	0e9b      	lsrs	r3, r3, #26
 800517e:	f003 031f 	and.w	r3, r3, #31
 8005182:	2201      	movs	r2, #1
 8005184:	fa02 f303 	lsl.w	r3, r2, r3
 8005188:	e016      	b.n	80051b8 <HAL_ADC_ConfigChannel+0x90>
 800518a:	683b      	ldr	r3, [r7, #0]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005190:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005192:	fa93 f3a3 	rbit	r3, r3
 8005196:	663b      	str	r3, [r7, #96]	; 0x60
  return result;
 8005198:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800519a:	66bb      	str	r3, [r7, #104]	; 0x68
  if (value == 0U)
 800519c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d101      	bne.n	80051a6 <HAL_ADC_ConfigChannel+0x7e>
    return 32U;
 80051a2:	2320      	movs	r3, #32
 80051a4:	e003      	b.n	80051ae <HAL_ADC_ConfigChannel+0x86>
  return __builtin_clz(value);
 80051a6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80051a8:	fab3 f383 	clz	r3, r3
 80051ac:	b2db      	uxtb	r3, r3
 80051ae:	f003 031f 	and.w	r3, r3, #31
 80051b2:	2201      	movs	r2, #1
 80051b4:	fa02 f303 	lsl.w	r3, r2, r3
 80051b8:	687a      	ldr	r2, [r7, #4]
 80051ba:	6812      	ldr	r2, [r2, #0]
 80051bc:	69d1      	ldr	r1, [r2, #28]
 80051be:	687a      	ldr	r2, [r7, #4]
 80051c0:	6812      	ldr	r2, [r2, #0]
 80051c2:	430b      	orrs	r3, r1
 80051c4:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	6818      	ldr	r0, [r3, #0]
 80051ca:	683b      	ldr	r3, [r7, #0]
 80051cc:	6859      	ldr	r1, [r3, #4]
 80051ce:	683b      	ldr	r3, [r7, #0]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	461a      	mov	r2, r3
 80051d4:	f7ff f8eb 	bl	80043ae <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	4618      	mov	r0, r3
 80051de:	f7ff fa41 	bl	8004664 <LL_ADC_REG_IsConversionOngoing>
 80051e2:	67b8      	str	r0, [r7, #120]	; 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	4618      	mov	r0, r3
 80051ea:	f7ff fa4e 	bl	800468a <LL_ADC_INJ_IsConversionOngoing>
 80051ee:	6778      	str	r0, [r7, #116]	; 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80051f0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	f040 80b3 	bne.w	800535e <HAL_ADC_ConfigChannel+0x236>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80051f8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	f040 80af 	bne.w	800535e <HAL_ADC_ConfigChannel+0x236>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	6818      	ldr	r0, [r3, #0]
 8005204:	683b      	ldr	r3, [r7, #0]
 8005206:	6819      	ldr	r1, [r3, #0]
 8005208:	683b      	ldr	r3, [r7, #0]
 800520a:	689b      	ldr	r3, [r3, #8]
 800520c:	461a      	mov	r2, r3
 800520e:	f7ff f90d 	bl	800442c <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8005212:	4b6a      	ldr	r3, [pc, #424]	; (80053bc <HAL_ADC_ConfigChannel+0x294>)
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800521a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800521e:	d10b      	bne.n	8005238 <HAL_ADC_ConfigChannel+0x110>
 8005220:	683b      	ldr	r3, [r7, #0]
 8005222:	695a      	ldr	r2, [r3, #20]
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	68db      	ldr	r3, [r3, #12]
 800522a:	089b      	lsrs	r3, r3, #2
 800522c:	f003 0307 	and.w	r3, r3, #7
 8005230:	005b      	lsls	r3, r3, #1
 8005232:	fa02 f303 	lsl.w	r3, r2, r3
 8005236:	e01d      	b.n	8005274 <HAL_ADC_ConfigChannel+0x14c>
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	68db      	ldr	r3, [r3, #12]
 800523e:	f003 0310 	and.w	r3, r3, #16
 8005242:	2b00      	cmp	r3, #0
 8005244:	d10b      	bne.n	800525e <HAL_ADC_ConfigChannel+0x136>
 8005246:	683b      	ldr	r3, [r7, #0]
 8005248:	695a      	ldr	r2, [r3, #20]
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	68db      	ldr	r3, [r3, #12]
 8005250:	089b      	lsrs	r3, r3, #2
 8005252:	f003 0307 	and.w	r3, r3, #7
 8005256:	005b      	lsls	r3, r3, #1
 8005258:	fa02 f303 	lsl.w	r3, r2, r3
 800525c:	e00a      	b.n	8005274 <HAL_ADC_ConfigChannel+0x14c>
 800525e:	683b      	ldr	r3, [r7, #0]
 8005260:	695a      	ldr	r2, [r3, #20]
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	68db      	ldr	r3, [r3, #12]
 8005268:	089b      	lsrs	r3, r3, #2
 800526a:	f003 0304 	and.w	r3, r3, #4
 800526e:	005b      	lsls	r3, r3, #1
 8005270:	fa02 f303 	lsl.w	r3, r2, r3
 8005274:	673b      	str	r3, [r7, #112]	; 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8005276:	683b      	ldr	r3, [r7, #0]
 8005278:	691b      	ldr	r3, [r3, #16]
 800527a:	2b04      	cmp	r3, #4
 800527c:	d027      	beq.n	80052ce <HAL_ADC_ConfigChannel+0x1a6>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	6818      	ldr	r0, [r3, #0]
 8005282:	683b      	ldr	r3, [r7, #0]
 8005284:	6919      	ldr	r1, [r3, #16]
 8005286:	683b      	ldr	r3, [r7, #0]
 8005288:	681a      	ldr	r2, [r3, #0]
 800528a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800528c:	f7ff f828 	bl	80042e0 <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	6818      	ldr	r0, [r3, #0]
 8005294:	683b      	ldr	r3, [r7, #0]
 8005296:	6919      	ldr	r1, [r3, #16]
 8005298:	683b      	ldr	r3, [r7, #0]
 800529a:	7e5b      	ldrb	r3, [r3, #25]
 800529c:	2b01      	cmp	r3, #1
 800529e:	d102      	bne.n	80052a6 <HAL_ADC_ConfigChannel+0x17e>
 80052a0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80052a4:	e000      	b.n	80052a8 <HAL_ADC_ConfigChannel+0x180>
 80052a6:	2300      	movs	r3, #0
 80052a8:	461a      	mov	r2, r3
 80052aa:	f7ff f852 	bl	8004352 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	6818      	ldr	r0, [r3, #0]
 80052b2:	683b      	ldr	r3, [r7, #0]
 80052b4:	6919      	ldr	r1, [r3, #16]
 80052b6:	683b      	ldr	r3, [r7, #0]
 80052b8:	7e1b      	ldrb	r3, [r3, #24]
 80052ba:	2b01      	cmp	r3, #1
 80052bc:	d102      	bne.n	80052c4 <HAL_ADC_ConfigChannel+0x19c>
 80052be:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80052c2:	e000      	b.n	80052c6 <HAL_ADC_ConfigChannel+0x19e>
 80052c4:	2300      	movs	r3, #0
 80052c6:	461a      	mov	r2, r3
 80052c8:	f7ff f82a 	bl	8004320 <LL_ADC_SetDataRightShift>
 80052cc:	e047      	b.n	800535e <HAL_ADC_ConfigChannel+0x236>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80052d4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80052d8:	683b      	ldr	r3, [r7, #0]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	069b      	lsls	r3, r3, #26
 80052de:	429a      	cmp	r2, r3
 80052e0:	d107      	bne.n	80052f2 <HAL_ADC_ConfigChannel+0x1ca>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80052f0:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80052f8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80052fc:	683b      	ldr	r3, [r7, #0]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	069b      	lsls	r3, r3, #26
 8005302:	429a      	cmp	r2, r3
 8005304:	d107      	bne.n	8005316 <HAL_ADC_ConfigChannel+0x1ee>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8005314:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800531c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8005320:	683b      	ldr	r3, [r7, #0]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	069b      	lsls	r3, r3, #26
 8005326:	429a      	cmp	r2, r3
 8005328:	d107      	bne.n	800533a <HAL_ADC_ConfigChannel+0x212>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8005338:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005340:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8005344:	683b      	ldr	r3, [r7, #0]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	069b      	lsls	r3, r3, #26
 800534a:	429a      	cmp	r2, r3
 800534c:	d107      	bne.n	800535e <HAL_ADC_ConfigChannel+0x236>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800535c:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	4618      	mov	r0, r3
 8005364:	f7ff f944 	bl	80045f0 <LL_ADC_IsEnabled>
 8005368:	4603      	mov	r3, r0
 800536a:	2b00      	cmp	r3, #0
 800536c:	f040 820d 	bne.w	800578a <HAL_ADC_ConfigChannel+0x662>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	6818      	ldr	r0, [r3, #0]
 8005374:	683b      	ldr	r3, [r7, #0]
 8005376:	6819      	ldr	r1, [r3, #0]
 8005378:	683b      	ldr	r3, [r7, #0]
 800537a:	68db      	ldr	r3, [r3, #12]
 800537c:	461a      	mov	r2, r3
 800537e:	f7ff f881 	bl	8004484 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8005382:	683b      	ldr	r3, [r7, #0]
 8005384:	68db      	ldr	r3, [r3, #12]
 8005386:	4a0c      	ldr	r2, [pc, #48]	; (80053b8 <HAL_ADC_ConfigChannel+0x290>)
 8005388:	4293      	cmp	r3, r2
 800538a:	f040 8133 	bne.w	80055f4 <HAL_ADC_ConfigChannel+0x4cc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8005392:	683b      	ldr	r3, [r7, #0]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800539a:	2b00      	cmp	r3, #0
 800539c:	d110      	bne.n	80053c0 <HAL_ADC_ConfigChannel+0x298>
 800539e:	683b      	ldr	r3, [r7, #0]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	0e9b      	lsrs	r3, r3, #26
 80053a4:	3301      	adds	r3, #1
 80053a6:	f003 031f 	and.w	r3, r3, #31
 80053aa:	2b09      	cmp	r3, #9
 80053ac:	bf94      	ite	ls
 80053ae:	2301      	movls	r3, #1
 80053b0:	2300      	movhi	r3, #0
 80053b2:	b2db      	uxtb	r3, r3
 80053b4:	e01e      	b.n	80053f4 <HAL_ADC_ConfigChannel+0x2cc>
 80053b6:	bf00      	nop
 80053b8:	47ff0000 	.word	0x47ff0000
 80053bc:	5c001000 	.word	0x5c001000
 80053c0:	683b      	ldr	r3, [r7, #0]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80053c6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80053c8:	fa93 f3a3 	rbit	r3, r3
 80053cc:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 80053ce:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80053d0:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 80053d2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d101      	bne.n	80053dc <HAL_ADC_ConfigChannel+0x2b4>
    return 32U;
 80053d8:	2320      	movs	r3, #32
 80053da:	e003      	b.n	80053e4 <HAL_ADC_ConfigChannel+0x2bc>
  return __builtin_clz(value);
 80053dc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80053de:	fab3 f383 	clz	r3, r3
 80053e2:	b2db      	uxtb	r3, r3
 80053e4:	3301      	adds	r3, #1
 80053e6:	f003 031f 	and.w	r3, r3, #31
 80053ea:	2b09      	cmp	r3, #9
 80053ec:	bf94      	ite	ls
 80053ee:	2301      	movls	r3, #1
 80053f0:	2300      	movhi	r3, #0
 80053f2:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	d079      	beq.n	80054ec <HAL_ADC_ConfigChannel+0x3c4>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80053f8:	683b      	ldr	r3, [r7, #0]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005400:	2b00      	cmp	r3, #0
 8005402:	d107      	bne.n	8005414 <HAL_ADC_ConfigChannel+0x2ec>
 8005404:	683b      	ldr	r3, [r7, #0]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	0e9b      	lsrs	r3, r3, #26
 800540a:	3301      	adds	r3, #1
 800540c:	069b      	lsls	r3, r3, #26
 800540e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8005412:	e015      	b.n	8005440 <HAL_ADC_ConfigChannel+0x318>
 8005414:	683b      	ldr	r3, [r7, #0]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800541a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800541c:	fa93 f3a3 	rbit	r3, r3
 8005420:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 8005422:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005424:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 8005426:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005428:	2b00      	cmp	r3, #0
 800542a:	d101      	bne.n	8005430 <HAL_ADC_ConfigChannel+0x308>
    return 32U;
 800542c:	2320      	movs	r3, #32
 800542e:	e003      	b.n	8005438 <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 8005430:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005432:	fab3 f383 	clz	r3, r3
 8005436:	b2db      	uxtb	r3, r3
 8005438:	3301      	adds	r3, #1
 800543a:	069b      	lsls	r3, r3, #26
 800543c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8005440:	683b      	ldr	r3, [r7, #0]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005448:	2b00      	cmp	r3, #0
 800544a:	d109      	bne.n	8005460 <HAL_ADC_ConfigChannel+0x338>
 800544c:	683b      	ldr	r3, [r7, #0]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	0e9b      	lsrs	r3, r3, #26
 8005452:	3301      	adds	r3, #1
 8005454:	f003 031f 	and.w	r3, r3, #31
 8005458:	2101      	movs	r1, #1
 800545a:	fa01 f303 	lsl.w	r3, r1, r3
 800545e:	e017      	b.n	8005490 <HAL_ADC_ConfigChannel+0x368>
 8005460:	683b      	ldr	r3, [r7, #0]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005466:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005468:	fa93 f3a3 	rbit	r3, r3
 800546c:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 800546e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005470:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 8005472:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005474:	2b00      	cmp	r3, #0
 8005476:	d101      	bne.n	800547c <HAL_ADC_ConfigChannel+0x354>
    return 32U;
 8005478:	2320      	movs	r3, #32
 800547a:	e003      	b.n	8005484 <HAL_ADC_ConfigChannel+0x35c>
  return __builtin_clz(value);
 800547c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800547e:	fab3 f383 	clz	r3, r3
 8005482:	b2db      	uxtb	r3, r3
 8005484:	3301      	adds	r3, #1
 8005486:	f003 031f 	and.w	r3, r3, #31
 800548a:	2101      	movs	r1, #1
 800548c:	fa01 f303 	lsl.w	r3, r1, r3
 8005490:	ea42 0103 	orr.w	r1, r2, r3
 8005494:	683b      	ldr	r3, [r7, #0]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800549c:	2b00      	cmp	r3, #0
 800549e:	d10a      	bne.n	80054b6 <HAL_ADC_ConfigChannel+0x38e>
 80054a0:	683b      	ldr	r3, [r7, #0]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	0e9b      	lsrs	r3, r3, #26
 80054a6:	3301      	adds	r3, #1
 80054a8:	f003 021f 	and.w	r2, r3, #31
 80054ac:	4613      	mov	r3, r2
 80054ae:	005b      	lsls	r3, r3, #1
 80054b0:	4413      	add	r3, r2
 80054b2:	051b      	lsls	r3, r3, #20
 80054b4:	e018      	b.n	80054e8 <HAL_ADC_ConfigChannel+0x3c0>
 80054b6:	683b      	ldr	r3, [r7, #0]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80054bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80054be:	fa93 f3a3 	rbit	r3, r3
 80054c2:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 80054c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054c6:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 80054c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d101      	bne.n	80054d2 <HAL_ADC_ConfigChannel+0x3aa>
    return 32U;
 80054ce:	2320      	movs	r3, #32
 80054d0:	e003      	b.n	80054da <HAL_ADC_ConfigChannel+0x3b2>
  return __builtin_clz(value);
 80054d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054d4:	fab3 f383 	clz	r3, r3
 80054d8:	b2db      	uxtb	r3, r3
 80054da:	3301      	adds	r3, #1
 80054dc:	f003 021f 	and.w	r2, r3, #31
 80054e0:	4613      	mov	r3, r2
 80054e2:	005b      	lsls	r3, r3, #1
 80054e4:	4413      	add	r3, r2
 80054e6:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80054e8:	430b      	orrs	r3, r1
 80054ea:	e07e      	b.n	80055ea <HAL_ADC_ConfigChannel+0x4c2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80054ec:	683b      	ldr	r3, [r7, #0]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	d107      	bne.n	8005508 <HAL_ADC_ConfigChannel+0x3e0>
 80054f8:	683b      	ldr	r3, [r7, #0]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	0e9b      	lsrs	r3, r3, #26
 80054fe:	3301      	adds	r3, #1
 8005500:	069b      	lsls	r3, r3, #26
 8005502:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8005506:	e015      	b.n	8005534 <HAL_ADC_ConfigChannel+0x40c>
 8005508:	683b      	ldr	r3, [r7, #0]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800550e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005510:	fa93 f3a3 	rbit	r3, r3
 8005514:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8005516:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005518:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 800551a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800551c:	2b00      	cmp	r3, #0
 800551e:	d101      	bne.n	8005524 <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 8005520:	2320      	movs	r3, #32
 8005522:	e003      	b.n	800552c <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 8005524:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005526:	fab3 f383 	clz	r3, r3
 800552a:	b2db      	uxtb	r3, r3
 800552c:	3301      	adds	r3, #1
 800552e:	069b      	lsls	r3, r3, #26
 8005530:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8005534:	683b      	ldr	r3, [r7, #0]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800553c:	2b00      	cmp	r3, #0
 800553e:	d109      	bne.n	8005554 <HAL_ADC_ConfigChannel+0x42c>
 8005540:	683b      	ldr	r3, [r7, #0]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	0e9b      	lsrs	r3, r3, #26
 8005546:	3301      	adds	r3, #1
 8005548:	f003 031f 	and.w	r3, r3, #31
 800554c:	2101      	movs	r1, #1
 800554e:	fa01 f303 	lsl.w	r3, r1, r3
 8005552:	e017      	b.n	8005584 <HAL_ADC_ConfigChannel+0x45c>
 8005554:	683b      	ldr	r3, [r7, #0]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800555a:	69fb      	ldr	r3, [r7, #28]
 800555c:	fa93 f3a3 	rbit	r3, r3
 8005560:	61bb      	str	r3, [r7, #24]
  return result;
 8005562:	69bb      	ldr	r3, [r7, #24]
 8005564:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8005566:	6a3b      	ldr	r3, [r7, #32]
 8005568:	2b00      	cmp	r3, #0
 800556a:	d101      	bne.n	8005570 <HAL_ADC_ConfigChannel+0x448>
    return 32U;
 800556c:	2320      	movs	r3, #32
 800556e:	e003      	b.n	8005578 <HAL_ADC_ConfigChannel+0x450>
  return __builtin_clz(value);
 8005570:	6a3b      	ldr	r3, [r7, #32]
 8005572:	fab3 f383 	clz	r3, r3
 8005576:	b2db      	uxtb	r3, r3
 8005578:	3301      	adds	r3, #1
 800557a:	f003 031f 	and.w	r3, r3, #31
 800557e:	2101      	movs	r1, #1
 8005580:	fa01 f303 	lsl.w	r3, r1, r3
 8005584:	ea42 0103 	orr.w	r1, r2, r3
 8005588:	683b      	ldr	r3, [r7, #0]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005590:	2b00      	cmp	r3, #0
 8005592:	d10d      	bne.n	80055b0 <HAL_ADC_ConfigChannel+0x488>
 8005594:	683b      	ldr	r3, [r7, #0]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	0e9b      	lsrs	r3, r3, #26
 800559a:	3301      	adds	r3, #1
 800559c:	f003 021f 	and.w	r2, r3, #31
 80055a0:	4613      	mov	r3, r2
 80055a2:	005b      	lsls	r3, r3, #1
 80055a4:	4413      	add	r3, r2
 80055a6:	3b1e      	subs	r3, #30
 80055a8:	051b      	lsls	r3, r3, #20
 80055aa:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80055ae:	e01b      	b.n	80055e8 <HAL_ADC_ConfigChannel+0x4c0>
 80055b0:	683b      	ldr	r3, [r7, #0]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80055b6:	693b      	ldr	r3, [r7, #16]
 80055b8:	fa93 f3a3 	rbit	r3, r3
 80055bc:	60fb      	str	r3, [r7, #12]
  return result;
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 80055c2:	697b      	ldr	r3, [r7, #20]
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d101      	bne.n	80055cc <HAL_ADC_ConfigChannel+0x4a4>
    return 32U;
 80055c8:	2320      	movs	r3, #32
 80055ca:	e003      	b.n	80055d4 <HAL_ADC_ConfigChannel+0x4ac>
  return __builtin_clz(value);
 80055cc:	697b      	ldr	r3, [r7, #20]
 80055ce:	fab3 f383 	clz	r3, r3
 80055d2:	b2db      	uxtb	r3, r3
 80055d4:	3301      	adds	r3, #1
 80055d6:	f003 021f 	and.w	r2, r3, #31
 80055da:	4613      	mov	r3, r2
 80055dc:	005b      	lsls	r3, r3, #1
 80055de:	4413      	add	r3, r2
 80055e0:	3b1e      	subs	r3, #30
 80055e2:	051b      	lsls	r3, r3, #20
 80055e4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80055e8:	430b      	orrs	r3, r1
 80055ea:	683a      	ldr	r2, [r7, #0]
 80055ec:	6892      	ldr	r2, [r2, #8]
 80055ee:	4619      	mov	r1, r3
 80055f0:	f7fe ff1c 	bl	800442c <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80055f4:	683b      	ldr	r3, [r7, #0]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	f280 80c6 	bge.w	800578a <HAL_ADC_ConfigChannel+0x662>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	4a67      	ldr	r2, [pc, #412]	; (80057a0 <HAL_ADC_ConfigChannel+0x678>)
 8005604:	4293      	cmp	r3, r2
 8005606:	d004      	beq.n	8005612 <HAL_ADC_ConfigChannel+0x4ea>
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	4a65      	ldr	r2, [pc, #404]	; (80057a4 <HAL_ADC_ConfigChannel+0x67c>)
 800560e:	4293      	cmp	r3, r2
 8005610:	d101      	bne.n	8005616 <HAL_ADC_ConfigChannel+0x4ee>
 8005612:	4b65      	ldr	r3, [pc, #404]	; (80057a8 <HAL_ADC_ConfigChannel+0x680>)
 8005614:	e000      	b.n	8005618 <HAL_ADC_ConfigChannel+0x4f0>
 8005616:	4b65      	ldr	r3, [pc, #404]	; (80057ac <HAL_ADC_ConfigChannel+0x684>)
 8005618:	4618      	mov	r0, r3
 800561a:	f7fe fe53 	bl	80042c4 <LL_ADC_GetCommonPathInternalCh>
 800561e:	66f8      	str	r0, [r7, #108]	; 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	4a5e      	ldr	r2, [pc, #376]	; (80057a0 <HAL_ADC_ConfigChannel+0x678>)
 8005626:	4293      	cmp	r3, r2
 8005628:	d004      	beq.n	8005634 <HAL_ADC_ConfigChannel+0x50c>
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	4a5d      	ldr	r2, [pc, #372]	; (80057a4 <HAL_ADC_ConfigChannel+0x67c>)
 8005630:	4293      	cmp	r3, r2
 8005632:	d10e      	bne.n	8005652 <HAL_ADC_ConfigChannel+0x52a>
 8005634:	485a      	ldr	r0, [pc, #360]	; (80057a0 <HAL_ADC_ConfigChannel+0x678>)
 8005636:	f7fe ffdb 	bl	80045f0 <LL_ADC_IsEnabled>
 800563a:	4604      	mov	r4, r0
 800563c:	4859      	ldr	r0, [pc, #356]	; (80057a4 <HAL_ADC_ConfigChannel+0x67c>)
 800563e:	f7fe ffd7 	bl	80045f0 <LL_ADC_IsEnabled>
 8005642:	4603      	mov	r3, r0
 8005644:	4323      	orrs	r3, r4
 8005646:	2b00      	cmp	r3, #0
 8005648:	bf0c      	ite	eq
 800564a:	2301      	moveq	r3, #1
 800564c:	2300      	movne	r3, #0
 800564e:	b2db      	uxtb	r3, r3
 8005650:	e008      	b.n	8005664 <HAL_ADC_ConfigChannel+0x53c>
 8005652:	4857      	ldr	r0, [pc, #348]	; (80057b0 <HAL_ADC_ConfigChannel+0x688>)
 8005654:	f7fe ffcc 	bl	80045f0 <LL_ADC_IsEnabled>
 8005658:	4603      	mov	r3, r0
 800565a:	2b00      	cmp	r3, #0
 800565c:	bf0c      	ite	eq
 800565e:	2301      	moveq	r3, #1
 8005660:	2300      	movne	r3, #0
 8005662:	b2db      	uxtb	r3, r3
 8005664:	2b00      	cmp	r3, #0
 8005666:	d07d      	beq.n	8005764 <HAL_ADC_ConfigChannel+0x63c>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8005668:	683b      	ldr	r3, [r7, #0]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	4a51      	ldr	r2, [pc, #324]	; (80057b4 <HAL_ADC_ConfigChannel+0x68c>)
 800566e:	4293      	cmp	r3, r2
 8005670:	d130      	bne.n	80056d4 <HAL_ADC_ConfigChannel+0x5ac>
 8005672:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005674:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005678:	2b00      	cmp	r3, #0
 800567a:	d12b      	bne.n	80056d4 <HAL_ADC_ConfigChannel+0x5ac>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	4a4b      	ldr	r2, [pc, #300]	; (80057b0 <HAL_ADC_ConfigChannel+0x688>)
 8005682:	4293      	cmp	r3, r2
 8005684:	f040 8081 	bne.w	800578a <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	4a44      	ldr	r2, [pc, #272]	; (80057a0 <HAL_ADC_ConfigChannel+0x678>)
 800568e:	4293      	cmp	r3, r2
 8005690:	d004      	beq.n	800569c <HAL_ADC_ConfigChannel+0x574>
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	4a43      	ldr	r2, [pc, #268]	; (80057a4 <HAL_ADC_ConfigChannel+0x67c>)
 8005698:	4293      	cmp	r3, r2
 800569a:	d101      	bne.n	80056a0 <HAL_ADC_ConfigChannel+0x578>
 800569c:	4a42      	ldr	r2, [pc, #264]	; (80057a8 <HAL_ADC_ConfigChannel+0x680>)
 800569e:	e000      	b.n	80056a2 <HAL_ADC_ConfigChannel+0x57a>
 80056a0:	4a42      	ldr	r2, [pc, #264]	; (80057ac <HAL_ADC_ConfigChannel+0x684>)
 80056a2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80056a4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80056a8:	4619      	mov	r1, r3
 80056aa:	4610      	mov	r0, r2
 80056ac:	f7fe fdf7 	bl	800429e <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80056b0:	4b41      	ldr	r3, [pc, #260]	; (80057b8 <HAL_ADC_ConfigChannel+0x690>)
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	099b      	lsrs	r3, r3, #6
 80056b6:	4a41      	ldr	r2, [pc, #260]	; (80057bc <HAL_ADC_ConfigChannel+0x694>)
 80056b8:	fba2 2303 	umull	r2, r3, r2, r3
 80056bc:	099b      	lsrs	r3, r3, #6
 80056be:	3301      	adds	r3, #1
 80056c0:	005b      	lsls	r3, r3, #1
 80056c2:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 80056c4:	e002      	b.n	80056cc <HAL_ADC_ConfigChannel+0x5a4>
              {
                wait_loop_index--;
 80056c6:	68bb      	ldr	r3, [r7, #8]
 80056c8:	3b01      	subs	r3, #1
 80056ca:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 80056cc:	68bb      	ldr	r3, [r7, #8]
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d1f9      	bne.n	80056c6 <HAL_ADC_ConfigChannel+0x59e>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80056d2:	e05a      	b.n	800578a <HAL_ADC_ConfigChannel+0x662>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80056d4:	683b      	ldr	r3, [r7, #0]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	4a39      	ldr	r2, [pc, #228]	; (80057c0 <HAL_ADC_ConfigChannel+0x698>)
 80056da:	4293      	cmp	r3, r2
 80056dc:	d11e      	bne.n	800571c <HAL_ADC_ConfigChannel+0x5f4>
 80056de:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80056e0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	d119      	bne.n	800571c <HAL_ADC_ConfigChannel+0x5f4>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	4a30      	ldr	r2, [pc, #192]	; (80057b0 <HAL_ADC_ConfigChannel+0x688>)
 80056ee:	4293      	cmp	r3, r2
 80056f0:	d14b      	bne.n	800578a <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	4a2a      	ldr	r2, [pc, #168]	; (80057a0 <HAL_ADC_ConfigChannel+0x678>)
 80056f8:	4293      	cmp	r3, r2
 80056fa:	d004      	beq.n	8005706 <HAL_ADC_ConfigChannel+0x5de>
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	4a28      	ldr	r2, [pc, #160]	; (80057a4 <HAL_ADC_ConfigChannel+0x67c>)
 8005702:	4293      	cmp	r3, r2
 8005704:	d101      	bne.n	800570a <HAL_ADC_ConfigChannel+0x5e2>
 8005706:	4a28      	ldr	r2, [pc, #160]	; (80057a8 <HAL_ADC_ConfigChannel+0x680>)
 8005708:	e000      	b.n	800570c <HAL_ADC_ConfigChannel+0x5e4>
 800570a:	4a28      	ldr	r2, [pc, #160]	; (80057ac <HAL_ADC_ConfigChannel+0x684>)
 800570c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800570e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005712:	4619      	mov	r1, r3
 8005714:	4610      	mov	r0, r2
 8005716:	f7fe fdc2 	bl	800429e <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800571a:	e036      	b.n	800578a <HAL_ADC_ConfigChannel+0x662>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800571c:	683b      	ldr	r3, [r7, #0]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	4a28      	ldr	r2, [pc, #160]	; (80057c4 <HAL_ADC_ConfigChannel+0x69c>)
 8005722:	4293      	cmp	r3, r2
 8005724:	d131      	bne.n	800578a <HAL_ADC_ConfigChannel+0x662>
 8005726:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005728:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800572c:	2b00      	cmp	r3, #0
 800572e:	d12c      	bne.n	800578a <HAL_ADC_ConfigChannel+0x662>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	4a1e      	ldr	r2, [pc, #120]	; (80057b0 <HAL_ADC_ConfigChannel+0x688>)
 8005736:	4293      	cmp	r3, r2
 8005738:	d127      	bne.n	800578a <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	4a18      	ldr	r2, [pc, #96]	; (80057a0 <HAL_ADC_ConfigChannel+0x678>)
 8005740:	4293      	cmp	r3, r2
 8005742:	d004      	beq.n	800574e <HAL_ADC_ConfigChannel+0x626>
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	4a16      	ldr	r2, [pc, #88]	; (80057a4 <HAL_ADC_ConfigChannel+0x67c>)
 800574a:	4293      	cmp	r3, r2
 800574c:	d101      	bne.n	8005752 <HAL_ADC_ConfigChannel+0x62a>
 800574e:	4a16      	ldr	r2, [pc, #88]	; (80057a8 <HAL_ADC_ConfigChannel+0x680>)
 8005750:	e000      	b.n	8005754 <HAL_ADC_ConfigChannel+0x62c>
 8005752:	4a16      	ldr	r2, [pc, #88]	; (80057ac <HAL_ADC_ConfigChannel+0x684>)
 8005754:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005756:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800575a:	4619      	mov	r1, r3
 800575c:	4610      	mov	r0, r2
 800575e:	f7fe fd9e 	bl	800429e <LL_ADC_SetCommonPathInternalCh>
 8005762:	e012      	b.n	800578a <HAL_ADC_ConfigChannel+0x662>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005768:	f043 0220 	orr.w	r2, r3, #32
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 8005770:	2301      	movs	r3, #1
 8005772:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8005776:	e008      	b.n	800578a <HAL_ADC_ConfigChannel+0x662>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800577c:	f043 0220 	orr.w	r2, r3, #32
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8005784:	2301      	movs	r3, #1
 8005786:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	2200      	movs	r2, #0
 800578e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8005792:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8005796:	4618      	mov	r0, r3
 8005798:	3784      	adds	r7, #132	; 0x84
 800579a:	46bd      	mov	sp, r7
 800579c:	bd90      	pop	{r4, r7, pc}
 800579e:	bf00      	nop
 80057a0:	40022000 	.word	0x40022000
 80057a4:	40022100 	.word	0x40022100
 80057a8:	40022300 	.word	0x40022300
 80057ac:	58026300 	.word	0x58026300
 80057b0:	58026000 	.word	0x58026000
 80057b4:	cb840000 	.word	0xcb840000
 80057b8:	20000010 	.word	0x20000010
 80057bc:	053e2d63 	.word	0x053e2d63
 80057c0:	c7520000 	.word	0xc7520000
 80057c4:	cfb80000 	.word	0xcfb80000

080057c8 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80057c8:	b580      	push	{r7, lr}
 80057ca:	b084      	sub	sp, #16
 80057cc:	af00      	add	r7, sp, #0
 80057ce:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	4618      	mov	r0, r3
 80057d6:	f7fe ff0b 	bl	80045f0 <LL_ADC_IsEnabled>
 80057da:	4603      	mov	r3, r0
 80057dc:	2b00      	cmp	r3, #0
 80057de:	d16e      	bne.n	80058be <ADC_Enable+0xf6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	689a      	ldr	r2, [r3, #8]
 80057e6:	4b38      	ldr	r3, [pc, #224]	; (80058c8 <ADC_Enable+0x100>)
 80057e8:	4013      	ands	r3, r2
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d00d      	beq.n	800580a <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80057f2:	f043 0210 	orr.w	r2, r3, #16
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80057fe:	f043 0201 	orr.w	r2, r3, #1
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8005806:	2301      	movs	r3, #1
 8005808:	e05a      	b.n	80058c0 <ADC_Enable+0xf8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	4618      	mov	r0, r3
 8005810:	f7fe fec6 	bl	80045a0 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8005814:	f7fe fcca 	bl	80041ac <HAL_GetTick>
 8005818:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	4a2b      	ldr	r2, [pc, #172]	; (80058cc <ADC_Enable+0x104>)
 8005820:	4293      	cmp	r3, r2
 8005822:	d004      	beq.n	800582e <ADC_Enable+0x66>
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	4a29      	ldr	r2, [pc, #164]	; (80058d0 <ADC_Enable+0x108>)
 800582a:	4293      	cmp	r3, r2
 800582c:	d101      	bne.n	8005832 <ADC_Enable+0x6a>
 800582e:	4b29      	ldr	r3, [pc, #164]	; (80058d4 <ADC_Enable+0x10c>)
 8005830:	e000      	b.n	8005834 <ADC_Enable+0x6c>
 8005832:	4b29      	ldr	r3, [pc, #164]	; (80058d8 <ADC_Enable+0x110>)
 8005834:	4618      	mov	r0, r3
 8005836:	f7fe fe49 	bl	80044cc <LL_ADC_GetMultimode>
 800583a:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	4a23      	ldr	r2, [pc, #140]	; (80058d0 <ADC_Enable+0x108>)
 8005842:	4293      	cmp	r3, r2
 8005844:	d002      	beq.n	800584c <ADC_Enable+0x84>
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	e000      	b.n	800584e <ADC_Enable+0x86>
 800584c:	4b1f      	ldr	r3, [pc, #124]	; (80058cc <ADC_Enable+0x104>)
 800584e:	687a      	ldr	r2, [r7, #4]
 8005850:	6812      	ldr	r2, [r2, #0]
 8005852:	4293      	cmp	r3, r2
 8005854:	d02c      	beq.n	80058b0 <ADC_Enable+0xe8>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8005856:	68bb      	ldr	r3, [r7, #8]
 8005858:	2b00      	cmp	r3, #0
 800585a:	d130      	bne.n	80058be <ADC_Enable+0xf6>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800585c:	e028      	b.n	80058b0 <ADC_Enable+0xe8>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	4618      	mov	r0, r3
 8005864:	f7fe fec4 	bl	80045f0 <LL_ADC_IsEnabled>
 8005868:	4603      	mov	r3, r0
 800586a:	2b00      	cmp	r3, #0
 800586c:	d104      	bne.n	8005878 <ADC_Enable+0xb0>
        {
          LL_ADC_Enable(hadc->Instance);
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	4618      	mov	r0, r3
 8005874:	f7fe fe94 	bl	80045a0 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8005878:	f7fe fc98 	bl	80041ac <HAL_GetTick>
 800587c:	4602      	mov	r2, r0
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	1ad3      	subs	r3, r2, r3
 8005882:	2b02      	cmp	r3, #2
 8005884:	d914      	bls.n	80058b0 <ADC_Enable+0xe8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	f003 0301 	and.w	r3, r3, #1
 8005890:	2b01      	cmp	r3, #1
 8005892:	d00d      	beq.n	80058b0 <ADC_Enable+0xe8>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005898:	f043 0210 	orr.w	r2, r3, #16
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80058a4:	f043 0201 	orr.w	r2, r3, #1
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	659a      	str	r2, [r3, #88]	; 0x58

            return HAL_ERROR;
 80058ac:	2301      	movs	r3, #1
 80058ae:	e007      	b.n	80058c0 <ADC_Enable+0xf8>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	f003 0301 	and.w	r3, r3, #1
 80058ba:	2b01      	cmp	r3, #1
 80058bc:	d1cf      	bne.n	800585e <ADC_Enable+0x96>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80058be:	2300      	movs	r3, #0
}
 80058c0:	4618      	mov	r0, r3
 80058c2:	3710      	adds	r7, #16
 80058c4:	46bd      	mov	sp, r7
 80058c6:	bd80      	pop	{r7, pc}
 80058c8:	8000003f 	.word	0x8000003f
 80058cc:	40022000 	.word	0x40022000
 80058d0:	40022100 	.word	0x40022100
 80058d4:	40022300 	.word	0x40022300
 80058d8:	58026300 	.word	0x58026300

080058dc <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 80058dc:	b580      	push	{r7, lr}
 80058de:	b084      	sub	sp, #16
 80058e0:	af00      	add	r7, sp, #0
 80058e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	4618      	mov	r0, r3
 80058ea:	f7fe fe94 	bl	8004616 <LL_ADC_IsDisableOngoing>
 80058ee:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	4618      	mov	r0, r3
 80058f6:	f7fe fe7b 	bl	80045f0 <LL_ADC_IsEnabled>
 80058fa:	4603      	mov	r3, r0
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	d047      	beq.n	8005990 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	2b00      	cmp	r3, #0
 8005904:	d144      	bne.n	8005990 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	689b      	ldr	r3, [r3, #8]
 800590c:	f003 030d 	and.w	r3, r3, #13
 8005910:	2b01      	cmp	r3, #1
 8005912:	d10c      	bne.n	800592e <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	4618      	mov	r0, r3
 800591a:	f7fe fe55 	bl	80045c8 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	2203      	movs	r2, #3
 8005924:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8005926:	f7fe fc41 	bl	80041ac <HAL_GetTick>
 800592a:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800592c:	e029      	b.n	8005982 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005932:	f043 0210 	orr.w	r2, r3, #16
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	655a      	str	r2, [r3, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800593e:	f043 0201 	orr.w	r2, r3, #1
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 8005946:	2301      	movs	r3, #1
 8005948:	e023      	b.n	8005992 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 800594a:	f7fe fc2f 	bl	80041ac <HAL_GetTick>
 800594e:	4602      	mov	r2, r0
 8005950:	68bb      	ldr	r3, [r7, #8]
 8005952:	1ad3      	subs	r3, r2, r3
 8005954:	2b02      	cmp	r3, #2
 8005956:	d914      	bls.n	8005982 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	689b      	ldr	r3, [r3, #8]
 800595e:	f003 0301 	and.w	r3, r3, #1
 8005962:	2b00      	cmp	r3, #0
 8005964:	d00d      	beq.n	8005982 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800596a:	f043 0210 	orr.w	r2, r3, #16
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005976:	f043 0201 	orr.w	r2, r3, #1
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 800597e:	2301      	movs	r3, #1
 8005980:	e007      	b.n	8005992 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	689b      	ldr	r3, [r3, #8]
 8005988:	f003 0301 	and.w	r3, r3, #1
 800598c:	2b00      	cmp	r3, #0
 800598e:	d1dc      	bne.n	800594a <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8005990:	2300      	movs	r3, #0
}
 8005992:	4618      	mov	r0, r3
 8005994:	3710      	adds	r7, #16
 8005996:	46bd      	mov	sp, r7
 8005998:	bd80      	pop	{r7, pc}
	...

0800599c <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 800599c:	b580      	push	{r7, lr}
 800599e:	b084      	sub	sp, #16
 80059a0:	af00      	add	r7, sp, #0
 80059a2:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	4a7a      	ldr	r2, [pc, #488]	; (8005b94 <ADC_ConfigureBoostMode+0x1f8>)
 80059aa:	4293      	cmp	r3, r2
 80059ac:	d004      	beq.n	80059b8 <ADC_ConfigureBoostMode+0x1c>
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	4a79      	ldr	r2, [pc, #484]	; (8005b98 <ADC_ConfigureBoostMode+0x1fc>)
 80059b4:	4293      	cmp	r3, r2
 80059b6:	d109      	bne.n	80059cc <ADC_ConfigureBoostMode+0x30>
 80059b8:	4b78      	ldr	r3, [pc, #480]	; (8005b9c <ADC_ConfigureBoostMode+0x200>)
 80059ba:	689b      	ldr	r3, [r3, #8]
 80059bc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	bf14      	ite	ne
 80059c4:	2301      	movne	r3, #1
 80059c6:	2300      	moveq	r3, #0
 80059c8:	b2db      	uxtb	r3, r3
 80059ca:	e008      	b.n	80059de <ADC_ConfigureBoostMode+0x42>
 80059cc:	4b74      	ldr	r3, [pc, #464]	; (8005ba0 <ADC_ConfigureBoostMode+0x204>)
 80059ce:	689b      	ldr	r3, [r3, #8]
 80059d0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	bf14      	ite	ne
 80059d8:	2301      	movne	r3, #1
 80059da:	2300      	moveq	r3, #0
 80059dc:	b2db      	uxtb	r3, r3
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d01c      	beq.n	8005a1c <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 80059e2:	f005 f919 	bl	800ac18 <HAL_RCC_GetHCLKFreq>
 80059e6:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	685b      	ldr	r3, [r3, #4]
 80059ec:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80059f0:	d010      	beq.n	8005a14 <ADC_ConfigureBoostMode+0x78>
 80059f2:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80059f6:	d873      	bhi.n	8005ae0 <ADC_ConfigureBoostMode+0x144>
 80059f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80059fc:	d002      	beq.n	8005a04 <ADC_ConfigureBoostMode+0x68>
 80059fe:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005a02:	d16d      	bne.n	8005ae0 <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	685b      	ldr	r3, [r3, #4]
 8005a08:	0c1b      	lsrs	r3, r3, #16
 8005a0a:	68fa      	ldr	r2, [r7, #12]
 8005a0c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a10:	60fb      	str	r3, [r7, #12]
        break;
 8005a12:	e068      	b.n	8005ae6 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	089b      	lsrs	r3, r3, #2
 8005a18:	60fb      	str	r3, [r7, #12]
        break;
 8005a1a:	e064      	b.n	8005ae6 <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8005a1c:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8005a20:	f04f 0100 	mov.w	r1, #0
 8005a24:	f006 fb7a 	bl	800c11c <HAL_RCCEx_GetPeriphCLKFreq>
 8005a28:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	685b      	ldr	r3, [r3, #4]
 8005a2e:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8005a32:	d051      	beq.n	8005ad8 <ADC_ConfigureBoostMode+0x13c>
 8005a34:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8005a38:	d854      	bhi.n	8005ae4 <ADC_ConfigureBoostMode+0x148>
 8005a3a:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8005a3e:	d047      	beq.n	8005ad0 <ADC_ConfigureBoostMode+0x134>
 8005a40:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8005a44:	d84e      	bhi.n	8005ae4 <ADC_ConfigureBoostMode+0x148>
 8005a46:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8005a4a:	d03d      	beq.n	8005ac8 <ADC_ConfigureBoostMode+0x12c>
 8005a4c:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8005a50:	d848      	bhi.n	8005ae4 <ADC_ConfigureBoostMode+0x148>
 8005a52:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005a56:	d033      	beq.n	8005ac0 <ADC_ConfigureBoostMode+0x124>
 8005a58:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005a5c:	d842      	bhi.n	8005ae4 <ADC_ConfigureBoostMode+0x148>
 8005a5e:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8005a62:	d029      	beq.n	8005ab8 <ADC_ConfigureBoostMode+0x11c>
 8005a64:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8005a68:	d83c      	bhi.n	8005ae4 <ADC_ConfigureBoostMode+0x148>
 8005a6a:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8005a6e:	d01a      	beq.n	8005aa6 <ADC_ConfigureBoostMode+0x10a>
 8005a70:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8005a74:	d836      	bhi.n	8005ae4 <ADC_ConfigureBoostMode+0x148>
 8005a76:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8005a7a:	d014      	beq.n	8005aa6 <ADC_ConfigureBoostMode+0x10a>
 8005a7c:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8005a80:	d830      	bhi.n	8005ae4 <ADC_ConfigureBoostMode+0x148>
 8005a82:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005a86:	d00e      	beq.n	8005aa6 <ADC_ConfigureBoostMode+0x10a>
 8005a88:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005a8c:	d82a      	bhi.n	8005ae4 <ADC_ConfigureBoostMode+0x148>
 8005a8e:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8005a92:	d008      	beq.n	8005aa6 <ADC_ConfigureBoostMode+0x10a>
 8005a94:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8005a98:	d824      	bhi.n	8005ae4 <ADC_ConfigureBoostMode+0x148>
 8005a9a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005a9e:	d002      	beq.n	8005aa6 <ADC_ConfigureBoostMode+0x10a>
 8005aa0:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8005aa4:	d11e      	bne.n	8005ae4 <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	685b      	ldr	r3, [r3, #4]
 8005aaa:	0c9b      	lsrs	r3, r3, #18
 8005aac:	005b      	lsls	r3, r3, #1
 8005aae:	68fa      	ldr	r2, [r7, #12]
 8005ab0:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ab4:	60fb      	str	r3, [r7, #12]
        break;
 8005ab6:	e016      	b.n	8005ae6 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	091b      	lsrs	r3, r3, #4
 8005abc:	60fb      	str	r3, [r7, #12]
        break;
 8005abe:	e012      	b.n	8005ae6 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	095b      	lsrs	r3, r3, #5
 8005ac4:	60fb      	str	r3, [r7, #12]
        break;
 8005ac6:	e00e      	b.n	8005ae6 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	099b      	lsrs	r3, r3, #6
 8005acc:	60fb      	str	r3, [r7, #12]
        break;
 8005ace:	e00a      	b.n	8005ae6 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	09db      	lsrs	r3, r3, #7
 8005ad4:	60fb      	str	r3, [r7, #12]
        break;
 8005ad6:	e006      	b.n	8005ae6 <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	0a1b      	lsrs	r3, r3, #8
 8005adc:	60fb      	str	r3, [r7, #12]
        break;
 8005ade:	e002      	b.n	8005ae6 <ADC_ConfigureBoostMode+0x14a>
        break;
 8005ae0:	bf00      	nop
 8005ae2:	e000      	b.n	8005ae6 <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 8005ae4:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 8005ae6:	f7fe fb91 	bl	800420c <HAL_GetREVID>
 8005aea:	4603      	mov	r3, r0
 8005aec:	f241 0203 	movw	r2, #4099	; 0x1003
 8005af0:	4293      	cmp	r3, r2
 8005af2:	d815      	bhi.n	8005b20 <ADC_ConfigureBoostMode+0x184>
  {
    if (freq > 20000000UL)
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	4a2b      	ldr	r2, [pc, #172]	; (8005ba4 <ADC_ConfigureBoostMode+0x208>)
 8005af8:	4293      	cmp	r3, r2
 8005afa:	d908      	bls.n	8005b0e <ADC_ConfigureBoostMode+0x172>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	689a      	ldr	r2, [r3, #8]
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005b0a:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8005b0c:	e03e      	b.n	8005b8c <ADC_ConfigureBoostMode+0x1f0>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	689a      	ldr	r2, [r3, #8]
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005b1c:	609a      	str	r2, [r3, #8]
}
 8005b1e:	e035      	b.n	8005b8c <ADC_ConfigureBoostMode+0x1f0>
    freq /= 2U; /* divider by 2 for Rev.V */
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	085b      	lsrs	r3, r3, #1
 8005b24:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	4a1f      	ldr	r2, [pc, #124]	; (8005ba8 <ADC_ConfigureBoostMode+0x20c>)
 8005b2a:	4293      	cmp	r3, r2
 8005b2c:	d808      	bhi.n	8005b40 <ADC_ConfigureBoostMode+0x1a4>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	689a      	ldr	r2, [r3, #8]
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8005b3c:	609a      	str	r2, [r3, #8]
}
 8005b3e:	e025      	b.n	8005b8c <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 12500000UL)
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	4a1a      	ldr	r2, [pc, #104]	; (8005bac <ADC_ConfigureBoostMode+0x210>)
 8005b44:	4293      	cmp	r3, r2
 8005b46:	d80a      	bhi.n	8005b5e <ADC_ConfigureBoostMode+0x1c2>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	689b      	ldr	r3, [r3, #8]
 8005b4e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005b5a:	609a      	str	r2, [r3, #8]
}
 8005b5c:	e016      	b.n	8005b8c <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 25000000UL)
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	4a13      	ldr	r2, [pc, #76]	; (8005bb0 <ADC_ConfigureBoostMode+0x214>)
 8005b62:	4293      	cmp	r3, r2
 8005b64:	d80a      	bhi.n	8005b7c <ADC_ConfigureBoostMode+0x1e0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	689b      	ldr	r3, [r3, #8]
 8005b6c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005b78:	609a      	str	r2, [r3, #8]
}
 8005b7a:	e007      	b.n	8005b8c <ADC_ConfigureBoostMode+0x1f0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	689a      	ldr	r2, [r3, #8]
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8005b8a:	609a      	str	r2, [r3, #8]
}
 8005b8c:	bf00      	nop
 8005b8e:	3710      	adds	r7, #16
 8005b90:	46bd      	mov	sp, r7
 8005b92:	bd80      	pop	{r7, pc}
 8005b94:	40022000 	.word	0x40022000
 8005b98:	40022100 	.word	0x40022100
 8005b9c:	40022300 	.word	0x40022300
 8005ba0:	58026300 	.word	0x58026300
 8005ba4:	01312d00 	.word	0x01312d00
 8005ba8:	005f5e10 	.word	0x005f5e10
 8005bac:	00bebc20 	.word	0x00bebc20
 8005bb0:	017d7840 	.word	0x017d7840

08005bb4 <LL_ADC_StartCalibration>:
{
 8005bb4:	b480      	push	{r7}
 8005bb6:	b085      	sub	sp, #20
 8005bb8:	af00      	add	r7, sp, #0
 8005bba:	60f8      	str	r0, [r7, #12]
 8005bbc:	60b9      	str	r1, [r7, #8]
 8005bbe:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CR,
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	689a      	ldr	r2, [r3, #8]
 8005bc4:	4b09      	ldr	r3, [pc, #36]	; (8005bec <LL_ADC_StartCalibration+0x38>)
 8005bc6:	4013      	ands	r3, r2
 8005bc8:	68ba      	ldr	r2, [r7, #8]
 8005bca:	f402 3180 	and.w	r1, r2, #65536	; 0x10000
 8005bce:	687a      	ldr	r2, [r7, #4]
 8005bd0:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8005bd4:	430a      	orrs	r2, r1
 8005bd6:	4313      	orrs	r3, r2
 8005bd8:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	609a      	str	r2, [r3, #8]
}
 8005be0:	bf00      	nop
 8005be2:	3714      	adds	r7, #20
 8005be4:	46bd      	mov	sp, r7
 8005be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bea:	4770      	bx	lr
 8005bec:	3ffeffc0 	.word	0x3ffeffc0

08005bf0 <LL_ADC_IsCalibrationOnGoing>:
{
 8005bf0:	b480      	push	{r7}
 8005bf2:	b083      	sub	sp, #12
 8005bf4:	af00      	add	r7, sp, #0
 8005bf6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	689b      	ldr	r3, [r3, #8]
 8005bfc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005c00:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005c04:	d101      	bne.n	8005c0a <LL_ADC_IsCalibrationOnGoing+0x1a>
 8005c06:	2301      	movs	r3, #1
 8005c08:	e000      	b.n	8005c0c <LL_ADC_IsCalibrationOnGoing+0x1c>
 8005c0a:	2300      	movs	r3, #0
}
 8005c0c:	4618      	mov	r0, r3
 8005c0e:	370c      	adds	r7, #12
 8005c10:	46bd      	mov	sp, r7
 8005c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c16:	4770      	bx	lr

08005c18 <HAL_ADCEx_Calibration_Start>:
{
 8005c18:	b580      	push	{r7, lr}
 8005c1a:	b086      	sub	sp, #24
 8005c1c:	af00      	add	r7, sp, #0
 8005c1e:	60f8      	str	r0, [r7, #12]
 8005c20:	60b9      	str	r1, [r7, #8]
 8005c22:	607a      	str	r2, [r7, #4]
  __IO uint32_t wait_loop_index = 0UL;
 8005c24:	2300      	movs	r3, #0
 8005c26:	613b      	str	r3, [r7, #16]
  __HAL_LOCK(hadc);
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005c2e:	2b01      	cmp	r3, #1
 8005c30:	d101      	bne.n	8005c36 <HAL_ADCEx_Calibration_Start+0x1e>
 8005c32:	2302      	movs	r3, #2
 8005c34:	e04c      	b.n	8005cd0 <HAL_ADCEx_Calibration_Start+0xb8>
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	2201      	movs	r2, #1
 8005c3a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  tmp_hal_status = ADC_Disable(hadc);
 8005c3e:	68f8      	ldr	r0, [r7, #12]
 8005c40:	f7ff fe4c 	bl	80058dc <ADC_Disable>
 8005c44:	4603      	mov	r3, r0
 8005c46:	75fb      	strb	r3, [r7, #23]
  if (tmp_hal_status == HAL_OK)
 8005c48:	7dfb      	ldrb	r3, [r7, #23]
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	d135      	bne.n	8005cba <HAL_ADCEx_Calibration_Start+0xa2>
    ADC_STATE_CLR_SET(hadc->State,
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005c52:	4b21      	ldr	r3, [pc, #132]	; (8005cd8 <HAL_ADCEx_Calibration_Start+0xc0>)
 8005c54:	4013      	ands	r3, r2
 8005c56:	f043 0202 	orr.w	r2, r3, #2
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	655a      	str	r2, [r3, #84]	; 0x54
    LL_ADC_StartCalibration(hadc->Instance, CalibrationMode, SingleDiff);
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	687a      	ldr	r2, [r7, #4]
 8005c64:	68b9      	ldr	r1, [r7, #8]
 8005c66:	4618      	mov	r0, r3
 8005c68:	f7ff ffa4 	bl	8005bb4 <LL_ADC_StartCalibration>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8005c6c:	e014      	b.n	8005c98 <HAL_ADCEx_Calibration_Start+0x80>
      wait_loop_index++;
 8005c6e:	693b      	ldr	r3, [r7, #16]
 8005c70:	3301      	adds	r3, #1
 8005c72:	613b      	str	r3, [r7, #16]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8005c74:	693b      	ldr	r3, [r7, #16]
 8005c76:	4a19      	ldr	r2, [pc, #100]	; (8005cdc <HAL_ADCEx_Calibration_Start+0xc4>)
 8005c78:	4293      	cmp	r3, r2
 8005c7a:	d30d      	bcc.n	8005c98 <HAL_ADCEx_Calibration_Start+0x80>
        ADC_STATE_CLR_SET(hadc->State,
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c80:	f023 0312 	bic.w	r3, r3, #18
 8005c84:	f043 0210 	orr.w	r2, r3, #16
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_UNLOCK(hadc);
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	2200      	movs	r2, #0
 8005c90:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        return HAL_ERROR;
 8005c94:	2301      	movs	r3, #1
 8005c96:	e01b      	b.n	8005cd0 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	4618      	mov	r0, r3
 8005c9e:	f7ff ffa7 	bl	8005bf0 <LL_ADC_IsCalibrationOnGoing>
 8005ca2:	4603      	mov	r3, r0
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	d1e2      	bne.n	8005c6e <HAL_ADCEx_Calibration_Start+0x56>
    ADC_STATE_CLR_SET(hadc->State,
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005cac:	f023 0303 	bic.w	r3, r3, #3
 8005cb0:	f043 0201 	orr.w	r2, r3, #1
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	655a      	str	r2, [r3, #84]	; 0x54
 8005cb8:	e005      	b.n	8005cc6 <HAL_ADCEx_Calibration_Start+0xae>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005cbe:	f043 0210 	orr.w	r2, r3, #16
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	655a      	str	r2, [r3, #84]	; 0x54
  __HAL_UNLOCK(hadc);
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	2200      	movs	r2, #0
 8005cca:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return tmp_hal_status;
 8005cce:	7dfb      	ldrb	r3, [r7, #23]
}
 8005cd0:	4618      	mov	r0, r3
 8005cd2:	3718      	adds	r7, #24
 8005cd4:	46bd      	mov	sp, r7
 8005cd6:	bd80      	pop	{r7, pc}
 8005cd8:	ffffeefd 	.word	0xffffeefd
 8005cdc:	25c3f800 	.word	0x25c3f800

08005ce0 <HAL_ADCEx_InjectedConvCpltCallback>:
{
 8005ce0:	b480      	push	{r7}
 8005ce2:	b083      	sub	sp, #12
 8005ce4:	af00      	add	r7, sp, #0
 8005ce6:	6078      	str	r0, [r7, #4]
}
 8005ce8:	bf00      	nop
 8005cea:	370c      	adds	r7, #12
 8005cec:	46bd      	mov	sp, r7
 8005cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cf2:	4770      	bx	lr

08005cf4 <HAL_ADCEx_InjectedQueueOverflowCallback>:
{
 8005cf4:	b480      	push	{r7}
 8005cf6:	b083      	sub	sp, #12
 8005cf8:	af00      	add	r7, sp, #0
 8005cfa:	6078      	str	r0, [r7, #4]
}
 8005cfc:	bf00      	nop
 8005cfe:	370c      	adds	r7, #12
 8005d00:	46bd      	mov	sp, r7
 8005d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d06:	4770      	bx	lr

08005d08 <HAL_ADCEx_LevelOutOfWindow2Callback>:
{
 8005d08:	b480      	push	{r7}
 8005d0a:	b083      	sub	sp, #12
 8005d0c:	af00      	add	r7, sp, #0
 8005d0e:	6078      	str	r0, [r7, #4]
}
 8005d10:	bf00      	nop
 8005d12:	370c      	adds	r7, #12
 8005d14:	46bd      	mov	sp, r7
 8005d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d1a:	4770      	bx	lr

08005d1c <HAL_ADCEx_LevelOutOfWindow3Callback>:
{
 8005d1c:	b480      	push	{r7}
 8005d1e:	b083      	sub	sp, #12
 8005d20:	af00      	add	r7, sp, #0
 8005d22:	6078      	str	r0, [r7, #4]
}
 8005d24:	bf00      	nop
 8005d26:	370c      	adds	r7, #12
 8005d28:	46bd      	mov	sp, r7
 8005d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d2e:	4770      	bx	lr

08005d30 <HAL_ADCEx_EndOfSamplingCallback>:
{
 8005d30:	b480      	push	{r7}
 8005d32:	b083      	sub	sp, #12
 8005d34:	af00      	add	r7, sp, #0
 8005d36:	6078      	str	r0, [r7, #4]
}
 8005d38:	bf00      	nop
 8005d3a:	370c      	adds	r7, #12
 8005d3c:	46bd      	mov	sp, r7
 8005d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d42:	4770      	bx	lr

08005d44 <__NVIC_SetPriorityGrouping>:
{
 8005d44:	b480      	push	{r7}
 8005d46:	b085      	sub	sp, #20
 8005d48:	af00      	add	r7, sp, #0
 8005d4a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	f003 0307 	and.w	r3, r3, #7
 8005d52:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005d54:	4b0b      	ldr	r3, [pc, #44]	; (8005d84 <__NVIC_SetPriorityGrouping+0x40>)
 8005d56:	68db      	ldr	r3, [r3, #12]
 8005d58:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005d5a:	68ba      	ldr	r2, [r7, #8]
 8005d5c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005d60:	4013      	ands	r3, r2
 8005d62:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005d68:	68bb      	ldr	r3, [r7, #8]
 8005d6a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8005d6c:	4b06      	ldr	r3, [pc, #24]	; (8005d88 <__NVIC_SetPriorityGrouping+0x44>)
 8005d6e:	4313      	orrs	r3, r2
 8005d70:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005d72:	4a04      	ldr	r2, [pc, #16]	; (8005d84 <__NVIC_SetPriorityGrouping+0x40>)
 8005d74:	68bb      	ldr	r3, [r7, #8]
 8005d76:	60d3      	str	r3, [r2, #12]
}
 8005d78:	bf00      	nop
 8005d7a:	3714      	adds	r7, #20
 8005d7c:	46bd      	mov	sp, r7
 8005d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d82:	4770      	bx	lr
 8005d84:	e000ed00 	.word	0xe000ed00
 8005d88:	05fa0000 	.word	0x05fa0000

08005d8c <__NVIC_GetPriorityGrouping>:
{
 8005d8c:	b480      	push	{r7}
 8005d8e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005d90:	4b04      	ldr	r3, [pc, #16]	; (8005da4 <__NVIC_GetPriorityGrouping+0x18>)
 8005d92:	68db      	ldr	r3, [r3, #12]
 8005d94:	0a1b      	lsrs	r3, r3, #8
 8005d96:	f003 0307 	and.w	r3, r3, #7
}
 8005d9a:	4618      	mov	r0, r3
 8005d9c:	46bd      	mov	sp, r7
 8005d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005da2:	4770      	bx	lr
 8005da4:	e000ed00 	.word	0xe000ed00

08005da8 <__NVIC_EnableIRQ>:
{
 8005da8:	b480      	push	{r7}
 8005daa:	b083      	sub	sp, #12
 8005dac:	af00      	add	r7, sp, #0
 8005dae:	4603      	mov	r3, r0
 8005db0:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8005db2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	db0b      	blt.n	8005dd2 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005dba:	88fb      	ldrh	r3, [r7, #6]
 8005dbc:	f003 021f 	and.w	r2, r3, #31
 8005dc0:	4907      	ldr	r1, [pc, #28]	; (8005de0 <__NVIC_EnableIRQ+0x38>)
 8005dc2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005dc6:	095b      	lsrs	r3, r3, #5
 8005dc8:	2001      	movs	r0, #1
 8005dca:	fa00 f202 	lsl.w	r2, r0, r2
 8005dce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8005dd2:	bf00      	nop
 8005dd4:	370c      	adds	r7, #12
 8005dd6:	46bd      	mov	sp, r7
 8005dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ddc:	4770      	bx	lr
 8005dde:	bf00      	nop
 8005de0:	e000e100 	.word	0xe000e100

08005de4 <__NVIC_SetPriority>:
{
 8005de4:	b480      	push	{r7}
 8005de6:	b083      	sub	sp, #12
 8005de8:	af00      	add	r7, sp, #0
 8005dea:	4603      	mov	r3, r0
 8005dec:	6039      	str	r1, [r7, #0]
 8005dee:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8005df0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	db0a      	blt.n	8005e0e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005df8:	683b      	ldr	r3, [r7, #0]
 8005dfa:	b2da      	uxtb	r2, r3
 8005dfc:	490c      	ldr	r1, [pc, #48]	; (8005e30 <__NVIC_SetPriority+0x4c>)
 8005dfe:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005e02:	0112      	lsls	r2, r2, #4
 8005e04:	b2d2      	uxtb	r2, r2
 8005e06:	440b      	add	r3, r1
 8005e08:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8005e0c:	e00a      	b.n	8005e24 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005e0e:	683b      	ldr	r3, [r7, #0]
 8005e10:	b2da      	uxtb	r2, r3
 8005e12:	4908      	ldr	r1, [pc, #32]	; (8005e34 <__NVIC_SetPriority+0x50>)
 8005e14:	88fb      	ldrh	r3, [r7, #6]
 8005e16:	f003 030f 	and.w	r3, r3, #15
 8005e1a:	3b04      	subs	r3, #4
 8005e1c:	0112      	lsls	r2, r2, #4
 8005e1e:	b2d2      	uxtb	r2, r2
 8005e20:	440b      	add	r3, r1
 8005e22:	761a      	strb	r2, [r3, #24]
}
 8005e24:	bf00      	nop
 8005e26:	370c      	adds	r7, #12
 8005e28:	46bd      	mov	sp, r7
 8005e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e2e:	4770      	bx	lr
 8005e30:	e000e100 	.word	0xe000e100
 8005e34:	e000ed00 	.word	0xe000ed00

08005e38 <NVIC_EncodePriority>:
{
 8005e38:	b480      	push	{r7}
 8005e3a:	b089      	sub	sp, #36	; 0x24
 8005e3c:	af00      	add	r7, sp, #0
 8005e3e:	60f8      	str	r0, [r7, #12]
 8005e40:	60b9      	str	r1, [r7, #8]
 8005e42:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	f003 0307 	and.w	r3, r3, #7
 8005e4a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005e4c:	69fb      	ldr	r3, [r7, #28]
 8005e4e:	f1c3 0307 	rsb	r3, r3, #7
 8005e52:	2b04      	cmp	r3, #4
 8005e54:	bf28      	it	cs
 8005e56:	2304      	movcs	r3, #4
 8005e58:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005e5a:	69fb      	ldr	r3, [r7, #28]
 8005e5c:	3304      	adds	r3, #4
 8005e5e:	2b06      	cmp	r3, #6
 8005e60:	d902      	bls.n	8005e68 <NVIC_EncodePriority+0x30>
 8005e62:	69fb      	ldr	r3, [r7, #28]
 8005e64:	3b03      	subs	r3, #3
 8005e66:	e000      	b.n	8005e6a <NVIC_EncodePriority+0x32>
 8005e68:	2300      	movs	r3, #0
 8005e6a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005e6c:	f04f 32ff 	mov.w	r2, #4294967295
 8005e70:	69bb      	ldr	r3, [r7, #24]
 8005e72:	fa02 f303 	lsl.w	r3, r2, r3
 8005e76:	43da      	mvns	r2, r3
 8005e78:	68bb      	ldr	r3, [r7, #8]
 8005e7a:	401a      	ands	r2, r3
 8005e7c:	697b      	ldr	r3, [r7, #20]
 8005e7e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005e80:	f04f 31ff 	mov.w	r1, #4294967295
 8005e84:	697b      	ldr	r3, [r7, #20]
 8005e86:	fa01 f303 	lsl.w	r3, r1, r3
 8005e8a:	43d9      	mvns	r1, r3
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005e90:	4313      	orrs	r3, r2
}
 8005e92:	4618      	mov	r0, r3
 8005e94:	3724      	adds	r7, #36	; 0x24
 8005e96:	46bd      	mov	sp, r7
 8005e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e9c:	4770      	bx	lr
	...

08005ea0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005ea0:	b580      	push	{r7, lr}
 8005ea2:	b082      	sub	sp, #8
 8005ea4:	af00      	add	r7, sp, #0
 8005ea6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	3b01      	subs	r3, #1
 8005eac:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005eb0:	d301      	bcc.n	8005eb6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005eb2:	2301      	movs	r3, #1
 8005eb4:	e00f      	b.n	8005ed6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005eb6:	4a0a      	ldr	r2, [pc, #40]	; (8005ee0 <SysTick_Config+0x40>)
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	3b01      	subs	r3, #1
 8005ebc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005ebe:	210f      	movs	r1, #15
 8005ec0:	f04f 30ff 	mov.w	r0, #4294967295
 8005ec4:	f7ff ff8e 	bl	8005de4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005ec8:	4b05      	ldr	r3, [pc, #20]	; (8005ee0 <SysTick_Config+0x40>)
 8005eca:	2200      	movs	r2, #0
 8005ecc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005ece:	4b04      	ldr	r3, [pc, #16]	; (8005ee0 <SysTick_Config+0x40>)
 8005ed0:	2207      	movs	r2, #7
 8005ed2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005ed4:	2300      	movs	r3, #0
}
 8005ed6:	4618      	mov	r0, r3
 8005ed8:	3708      	adds	r7, #8
 8005eda:	46bd      	mov	sp, r7
 8005edc:	bd80      	pop	{r7, pc}
 8005ede:	bf00      	nop
 8005ee0:	e000e010 	.word	0xe000e010

08005ee4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005ee4:	b580      	push	{r7, lr}
 8005ee6:	b082      	sub	sp, #8
 8005ee8:	af00      	add	r7, sp, #0
 8005eea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005eec:	6878      	ldr	r0, [r7, #4]
 8005eee:	f7ff ff29 	bl	8005d44 <__NVIC_SetPriorityGrouping>
}
 8005ef2:	bf00      	nop
 8005ef4:	3708      	adds	r7, #8
 8005ef6:	46bd      	mov	sp, r7
 8005ef8:	bd80      	pop	{r7, pc}

08005efa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005efa:	b580      	push	{r7, lr}
 8005efc:	b086      	sub	sp, #24
 8005efe:	af00      	add	r7, sp, #0
 8005f00:	4603      	mov	r3, r0
 8005f02:	60b9      	str	r1, [r7, #8]
 8005f04:	607a      	str	r2, [r7, #4]
 8005f06:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8005f08:	f7ff ff40 	bl	8005d8c <__NVIC_GetPriorityGrouping>
 8005f0c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005f0e:	687a      	ldr	r2, [r7, #4]
 8005f10:	68b9      	ldr	r1, [r7, #8]
 8005f12:	6978      	ldr	r0, [r7, #20]
 8005f14:	f7ff ff90 	bl	8005e38 <NVIC_EncodePriority>
 8005f18:	4602      	mov	r2, r0
 8005f1a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8005f1e:	4611      	mov	r1, r2
 8005f20:	4618      	mov	r0, r3
 8005f22:	f7ff ff5f 	bl	8005de4 <__NVIC_SetPriority>
}
 8005f26:	bf00      	nop
 8005f28:	3718      	adds	r7, #24
 8005f2a:	46bd      	mov	sp, r7
 8005f2c:	bd80      	pop	{r7, pc}

08005f2e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005f2e:	b580      	push	{r7, lr}
 8005f30:	b082      	sub	sp, #8
 8005f32:	af00      	add	r7, sp, #0
 8005f34:	4603      	mov	r3, r0
 8005f36:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005f38:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8005f3c:	4618      	mov	r0, r3
 8005f3e:	f7ff ff33 	bl	8005da8 <__NVIC_EnableIRQ>
}
 8005f42:	bf00      	nop
 8005f44:	3708      	adds	r7, #8
 8005f46:	46bd      	mov	sp, r7
 8005f48:	bd80      	pop	{r7, pc}

08005f4a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005f4a:	b580      	push	{r7, lr}
 8005f4c:	b082      	sub	sp, #8
 8005f4e:	af00      	add	r7, sp, #0
 8005f50:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005f52:	6878      	ldr	r0, [r7, #4]
 8005f54:	f7ff ffa4 	bl	8005ea0 <SysTick_Config>
 8005f58:	4603      	mov	r3, r0
}
 8005f5a:	4618      	mov	r0, r3
 8005f5c:	3708      	adds	r7, #8
 8005f5e:	46bd      	mov	sp, r7
 8005f60:	bd80      	pop	{r7, pc}
	...

08005f64 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8005f64:	b480      	push	{r7}
 8005f66:	af00      	add	r7, sp, #0
  __ASM volatile ("dmb 0xF":::"memory");
 8005f68:	f3bf 8f5f 	dmb	sy
}
 8005f6c:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8005f6e:	4b07      	ldr	r3, [pc, #28]	; (8005f8c <HAL_MPU_Disable+0x28>)
 8005f70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f72:	4a06      	ldr	r2, [pc, #24]	; (8005f8c <HAL_MPU_Disable+0x28>)
 8005f74:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005f78:	6253      	str	r3, [r2, #36]	; 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8005f7a:	4b05      	ldr	r3, [pc, #20]	; (8005f90 <HAL_MPU_Disable+0x2c>)
 8005f7c:	2200      	movs	r2, #0
 8005f7e:	605a      	str	r2, [r3, #4]
}
 8005f80:	bf00      	nop
 8005f82:	46bd      	mov	sp, r7
 8005f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f88:	4770      	bx	lr
 8005f8a:	bf00      	nop
 8005f8c:	e000ed00 	.word	0xe000ed00
 8005f90:	e000ed90 	.word	0xe000ed90

08005f94 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8005f94:	b480      	push	{r7}
 8005f96:	b083      	sub	sp, #12
 8005f98:	af00      	add	r7, sp, #0
 8005f9a:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8005f9c:	4a0b      	ldr	r2, [pc, #44]	; (8005fcc <HAL_MPU_Enable+0x38>)
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	f043 0301 	orr.w	r3, r3, #1
 8005fa4:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8005fa6:	4b0a      	ldr	r3, [pc, #40]	; (8005fd0 <HAL_MPU_Enable+0x3c>)
 8005fa8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005faa:	4a09      	ldr	r2, [pc, #36]	; (8005fd0 <HAL_MPU_Enable+0x3c>)
 8005fac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005fb0:	6253      	str	r3, [r2, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8005fb2:	f3bf 8f4f 	dsb	sy
}
 8005fb6:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8005fb8:	f3bf 8f6f 	isb	sy
}
 8005fbc:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8005fbe:	bf00      	nop
 8005fc0:	370c      	adds	r7, #12
 8005fc2:	46bd      	mov	sp, r7
 8005fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fc8:	4770      	bx	lr
 8005fca:	bf00      	nop
 8005fcc:	e000ed90 	.word	0xe000ed90
 8005fd0:	e000ed00 	.word	0xe000ed00

08005fd4 <HAL_MPU_ConfigRegion>:
  * @param  MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                  the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8005fd4:	b480      	push	{r7}
 8005fd6:	b083      	sub	sp, #12
 8005fd8:	af00      	add	r7, sp, #0
 8005fda:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_MPU_REGION_NUMBER(MPU_Init->Number));
  assert_param(IS_MPU_REGION_ENABLE(MPU_Init->Enable));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	785a      	ldrb	r2, [r3, #1]
 8005fe0:	4b1d      	ldr	r3, [pc, #116]	; (8006058 <HAL_MPU_ConfigRegion+0x84>)
 8005fe2:	609a      	str	r2, [r3, #8]

  if ((MPU_Init->Enable) != 0UL)
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	781b      	ldrb	r3, [r3, #0]
 8005fe8:	2b00      	cmp	r3, #0
 8005fea:	d029      	beq.n	8006040 <HAL_MPU_ConfigRegion+0x6c>
    assert_param(IS_MPU_ACCESS_CACHEABLE(MPU_Init->IsCacheable));
    assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
    assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
    assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

    MPU->RBAR = MPU_Init->BaseAddress;
 8005fec:	4a1a      	ldr	r2, [pc, #104]	; (8006058 <HAL_MPU_ConfigRegion+0x84>)
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	685b      	ldr	r3, [r3, #4]
 8005ff2:	60d3      	str	r3, [r2, #12]
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	7b1b      	ldrb	r3, [r3, #12]
 8005ff8:	071a      	lsls	r2, r3, #28
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	7adb      	ldrb	r3, [r3, #11]
 8005ffe:	061b      	lsls	r3, r3, #24
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8006000:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	7a9b      	ldrb	r3, [r3, #10]
 8006006:	04db      	lsls	r3, r3, #19
                ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8006008:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	7b5b      	ldrb	r3, [r3, #13]
 800600e:	049b      	lsls	r3, r3, #18
                ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8006010:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	7b9b      	ldrb	r3, [r3, #14]
 8006016:	045b      	lsls	r3, r3, #17
                ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8006018:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	7bdb      	ldrb	r3, [r3, #15]
 800601e:	041b      	lsls	r3, r3, #16
                ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8006020:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	7a5b      	ldrb	r3, [r3, #9]
 8006026:	021b      	lsls	r3, r3, #8
                ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8006028:	431a      	orrs	r2, r3
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	7a1b      	ldrb	r3, [r3, #8]
 800602e:	005b      	lsls	r3, r3, #1
                ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8006030:	4313      	orrs	r3, r2
                ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8006032:	687a      	ldr	r2, [r7, #4]
 8006034:	7812      	ldrb	r2, [r2, #0]
 8006036:	4611      	mov	r1, r2
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8006038:	4a07      	ldr	r2, [pc, #28]	; (8006058 <HAL_MPU_ConfigRegion+0x84>)
                ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800603a:	430b      	orrs	r3, r1
    MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800603c:	6113      	str	r3, [r2, #16]
  else
  {
    MPU->RBAR = 0x00;
    MPU->RASR = 0x00;
  }
}
 800603e:	e005      	b.n	800604c <HAL_MPU_ConfigRegion+0x78>
    MPU->RBAR = 0x00;
 8006040:	4b05      	ldr	r3, [pc, #20]	; (8006058 <HAL_MPU_ConfigRegion+0x84>)
 8006042:	2200      	movs	r2, #0
 8006044:	60da      	str	r2, [r3, #12]
    MPU->RASR = 0x00;
 8006046:	4b04      	ldr	r3, [pc, #16]	; (8006058 <HAL_MPU_ConfigRegion+0x84>)
 8006048:	2200      	movs	r2, #0
 800604a:	611a      	str	r2, [r3, #16]
}
 800604c:	bf00      	nop
 800604e:	370c      	adds	r7, #12
 8006050:	46bd      	mov	sp, r7
 8006052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006056:	4770      	bx	lr
 8006058:	e000ed90 	.word	0xe000ed90

0800605c <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 800605c:	b580      	push	{r7, lr}
 800605e:	b082      	sub	sp, #8
 8006060:	af00      	add	r7, sp, #0
 8006062:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	2b00      	cmp	r3, #0
 8006068:	d101      	bne.n	800606e <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 800606a:	2301      	movs	r3, #1
 800606c:	e014      	b.n	8006098 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	791b      	ldrb	r3, [r3, #4]
 8006072:	b2db      	uxtb	r3, r3
 8006074:	2b00      	cmp	r3, #0
 8006076:	d105      	bne.n	8006084 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	2200      	movs	r2, #0
 800607c:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 800607e:	6878      	ldr	r0, [r7, #4]
 8006080:	f7fd fa08 	bl	8003494 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	2202      	movs	r2, #2
 8006088:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	2200      	movs	r2, #0
 800608e:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	2201      	movs	r2, #1
 8006094:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8006096:	2300      	movs	r3, #0
}
 8006098:	4618      	mov	r0, r3
 800609a:	3708      	adds	r7, #8
 800609c:	46bd      	mov	sp, r7
 800609e:	bd80      	pop	{r7, pc}

080060a0 <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 80060a0:	b480      	push	{r7}
 80060a2:	b083      	sub	sp, #12
 80060a4:	af00      	add	r7, sp, #0
 80060a6:	6078      	str	r0, [r7, #4]
 80060a8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	795b      	ldrb	r3, [r3, #5]
 80060ae:	2b01      	cmp	r3, #1
 80060b0:	d101      	bne.n	80060b6 <HAL_DAC_Start+0x16>
 80060b2:	2302      	movs	r3, #2
 80060b4:	e040      	b.n	8006138 <HAL_DAC_Start+0x98>
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	2201      	movs	r2, #1
 80060ba:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	2202      	movs	r2, #2
 80060c0:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	6819      	ldr	r1, [r3, #0]
 80060c8:	683b      	ldr	r3, [r7, #0]
 80060ca:	f003 0310 	and.w	r3, r3, #16
 80060ce:	2201      	movs	r2, #1
 80060d0:	409a      	lsls	r2, r3
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	430a      	orrs	r2, r1
 80060d8:	601a      	str	r2, [r3, #0]

  if (Channel == DAC_CHANNEL_1)
 80060da:	683b      	ldr	r3, [r7, #0]
 80060dc:	2b00      	cmp	r3, #0
 80060de:	d10f      	bne.n	8006100 <HAL_DAC_Start+0x60>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 80060ea:	2b02      	cmp	r3, #2
 80060ec:	d11d      	bne.n	800612a <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	685a      	ldr	r2, [r3, #4]
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	f042 0201 	orr.w	r2, r2, #1
 80060fc:	605a      	str	r2, [r3, #4]
 80060fe:	e014      	b.n	800612a <HAL_DAC_Start+0x8a>
  }

  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 800610a:	683b      	ldr	r3, [r7, #0]
 800610c:	f003 0310 	and.w	r3, r3, #16
 8006110:	2102      	movs	r1, #2
 8006112:	fa01 f303 	lsl.w	r3, r1, r3
 8006116:	429a      	cmp	r2, r3
 8006118:	d107      	bne.n	800612a <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	685a      	ldr	r2, [r3, #4]
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	f042 0202 	orr.w	r2, r2, #2
 8006128:	605a      	str	r2, [r3, #4]
    }
  }


  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	2201      	movs	r2, #1
 800612e:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	2200      	movs	r2, #0
 8006134:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8006136:	2300      	movs	r3, #0
}
 8006138:	4618      	mov	r0, r3
 800613a:	370c      	adds	r7, #12
 800613c:	46bd      	mov	sp, r7
 800613e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006142:	4770      	bx	lr

08006144 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 8006144:	b480      	push	{r7}
 8006146:	b087      	sub	sp, #28
 8006148:	af00      	add	r7, sp, #0
 800614a:	60f8      	str	r0, [r7, #12]
 800614c:	60b9      	str	r1, [r7, #8]
 800614e:	607a      	str	r2, [r7, #4]
 8006150:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0UL;
 8006152:	2300      	movs	r3, #0
 8006154:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 800615c:	68bb      	ldr	r3, [r7, #8]
 800615e:	2b00      	cmp	r3, #0
 8006160:	d105      	bne.n	800616e <HAL_DAC_SetValue+0x2a>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 8006162:	697a      	ldr	r2, [r7, #20]
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	4413      	add	r3, r2
 8006168:	3308      	adds	r3, #8
 800616a:	617b      	str	r3, [r7, #20]
 800616c:	e004      	b.n	8006178 <HAL_DAC_SetValue+0x34>
  }

  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 800616e:	697a      	ldr	r2, [r7, #20]
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	4413      	add	r3, r2
 8006174:	3314      	adds	r3, #20
 8006176:	617b      	str	r3, [r7, #20]
  }


  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8006178:	697b      	ldr	r3, [r7, #20]
 800617a:	461a      	mov	r2, r3
 800617c:	683b      	ldr	r3, [r7, #0]
 800617e:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8006180:	2300      	movs	r3, #0
}
 8006182:	4618      	mov	r0, r3
 8006184:	371c      	adds	r7, #28
 8006186:	46bd      	mov	sp, r7
 8006188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800618c:	4770      	bx	lr
	...

08006190 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8006190:	b580      	push	{r7, lr}
 8006192:	b088      	sub	sp, #32
 8006194:	af00      	add	r7, sp, #0
 8006196:	60f8      	str	r0, [r7, #12]
 8006198:	60b9      	str	r1, [r7, #8]
 800619a:	607a      	str	r2, [r7, #4]
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	795b      	ldrb	r3, [r3, #5]
 80061a0:	2b01      	cmp	r3, #1
 80061a2:	d101      	bne.n	80061a8 <HAL_DAC_ConfigChannel+0x18>
 80061a4:	2302      	movs	r3, #2
 80061a6:	e12a      	b.n	80063fe <HAL_DAC_ConfigChannel+0x26e>
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	2201      	movs	r2, #1
 80061ac:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	2202      	movs	r2, #2
 80061b2:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 80061b4:	68bb      	ldr	r3, [r7, #8]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	2b04      	cmp	r3, #4
 80061ba:	f040 8081 	bne.w	80062c0 <HAL_DAC_ConfigChannel+0x130>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 80061be:	f7fd fff5 	bl	80041ac <HAL_GetTick>
 80061c2:	61b8      	str	r0, [r7, #24]

    if (Channel == DAC_CHANNEL_1)
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	d140      	bne.n	800624c <HAL_DAC_ConfigChannel+0xbc>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80061ca:	e018      	b.n	80061fe <HAL_DAC_ConfigChannel+0x6e>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 80061cc:	f7fd ffee 	bl	80041ac <HAL_GetTick>
 80061d0:	4602      	mov	r2, r0
 80061d2:	69bb      	ldr	r3, [r7, #24]
 80061d4:	1ad3      	subs	r3, r2, r3
 80061d6:	2b01      	cmp	r3, #1
 80061d8:	d911      	bls.n	80061fe <HAL_DAC_ConfigChannel+0x6e>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80061e0:	4b89      	ldr	r3, [pc, #548]	; (8006408 <HAL_DAC_ConfigChannel+0x278>)
 80061e2:	4013      	ands	r3, r2
 80061e4:	2b00      	cmp	r3, #0
 80061e6:	d00a      	beq.n	80061fe <HAL_DAC_ConfigChannel+0x6e>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	691b      	ldr	r3, [r3, #16]
 80061ec:	f043 0208 	orr.w	r2, r3, #8
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	2203      	movs	r2, #3
 80061f8:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 80061fa:	2303      	movs	r3, #3
 80061fc:	e0ff      	b.n	80063fe <HAL_DAC_ConfigChannel+0x26e>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006204:	4b80      	ldr	r3, [pc, #512]	; (8006408 <HAL_DAC_ConfigChannel+0x278>)
 8006206:	4013      	ands	r3, r2
 8006208:	2b00      	cmp	r3, #0
 800620a:	d1df      	bne.n	80061cc <HAL_DAC_ConfigChannel+0x3c>
          }
        }
      }
      HAL_Delay(1);
 800620c:	2001      	movs	r0, #1
 800620e:	f7fd ffd9 	bl	80041c4 <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	68ba      	ldr	r2, [r7, #8]
 8006218:	6992      	ldr	r2, [r2, #24]
 800621a:	641a      	str	r2, [r3, #64]	; 0x40
 800621c:	e023      	b.n	8006266 <HAL_DAC_ConfigChannel+0xd6>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 800621e:	f7fd ffc5 	bl	80041ac <HAL_GetTick>
 8006222:	4602      	mov	r2, r0
 8006224:	69bb      	ldr	r3, [r7, #24]
 8006226:	1ad3      	subs	r3, r2, r3
 8006228:	2b01      	cmp	r3, #1
 800622a:	d90f      	bls.n	800624c <HAL_DAC_ConfigChannel+0xbc>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006232:	2b00      	cmp	r3, #0
 8006234:	da0a      	bge.n	800624c <HAL_DAC_ConfigChannel+0xbc>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	691b      	ldr	r3, [r3, #16]
 800623a:	f043 0208 	orr.w	r2, r3, #8
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	2203      	movs	r2, #3
 8006246:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8006248:	2303      	movs	r3, #3
 800624a:	e0d8      	b.n	80063fe <HAL_DAC_ConfigChannel+0x26e>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006252:	2b00      	cmp	r3, #0
 8006254:	dbe3      	blt.n	800621e <HAL_DAC_ConfigChannel+0x8e>
          }
        }
      }
      HAL_Delay(1U);
 8006256:	2001      	movs	r0, #1
 8006258:	f7fd ffb4 	bl	80041c4 <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	68ba      	ldr	r2, [r7, #8]
 8006262:	6992      	ldr	r2, [r2, #24]
 8006264:	645a      	str	r2, [r3, #68]	; 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	f003 0310 	and.w	r3, r3, #16
 8006272:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8006276:	fa01 f303 	lsl.w	r3, r1, r3
 800627a:	43db      	mvns	r3, r3
 800627c:	ea02 0103 	and.w	r1, r2, r3
 8006280:	68bb      	ldr	r3, [r7, #8]
 8006282:	69da      	ldr	r2, [r3, #28]
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	f003 0310 	and.w	r3, r3, #16
 800628a:	409a      	lsls	r2, r3
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	430a      	orrs	r2, r1
 8006292:	649a      	str	r2, [r3, #72]	; 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	f003 0310 	and.w	r3, r3, #16
 80062a0:	21ff      	movs	r1, #255	; 0xff
 80062a2:	fa01 f303 	lsl.w	r3, r1, r3
 80062a6:	43db      	mvns	r3, r3
 80062a8:	ea02 0103 	and.w	r1, r2, r3
 80062ac:	68bb      	ldr	r3, [r7, #8]
 80062ae:	6a1a      	ldr	r2, [r3, #32]
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	f003 0310 	and.w	r3, r3, #16
 80062b6:	409a      	lsls	r2, r3
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	430a      	orrs	r2, r1
 80062be:	64da      	str	r2, [r3, #76]	; 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 80062c0:	68bb      	ldr	r3, [r7, #8]
 80062c2:	691b      	ldr	r3, [r3, #16]
 80062c4:	2b01      	cmp	r3, #1
 80062c6:	d11d      	bne.n	8006304 <HAL_DAC_ConfigChannel+0x174>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062ce:	617b      	str	r3, [r7, #20]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	f003 0310 	and.w	r3, r3, #16
 80062d6:	221f      	movs	r2, #31
 80062d8:	fa02 f303 	lsl.w	r3, r2, r3
 80062dc:	43db      	mvns	r3, r3
 80062de:	697a      	ldr	r2, [r7, #20]
 80062e0:	4013      	ands	r3, r2
 80062e2:	617b      	str	r3, [r7, #20]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 80062e4:	68bb      	ldr	r3, [r7, #8]
 80062e6:	695b      	ldr	r3, [r3, #20]
 80062e8:	613b      	str	r3, [r7, #16]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	f003 0310 	and.w	r3, r3, #16
 80062f0:	693a      	ldr	r2, [r7, #16]
 80062f2:	fa02 f303 	lsl.w	r3, r2, r3
 80062f6:	697a      	ldr	r2, [r7, #20]
 80062f8:	4313      	orrs	r3, r2
 80062fa:	617b      	str	r3, [r7, #20]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	697a      	ldr	r2, [r7, #20]
 8006302:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800630a:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	f003 0310 	and.w	r3, r3, #16
 8006312:	2207      	movs	r2, #7
 8006314:	fa02 f303 	lsl.w	r3, r2, r3
 8006318:	43db      	mvns	r3, r3
 800631a:	697a      	ldr	r2, [r7, #20]
 800631c:	4013      	ands	r3, r2
 800631e:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 8006320:	68bb      	ldr	r3, [r7, #8]
 8006322:	68db      	ldr	r3, [r3, #12]
 8006324:	2b01      	cmp	r3, #1
 8006326:	d102      	bne.n	800632e <HAL_DAC_ConfigChannel+0x19e>
  {
    connectOnChip = 0x00000000UL;
 8006328:	2300      	movs	r3, #0
 800632a:	61fb      	str	r3, [r7, #28]
 800632c:	e00f      	b.n	800634e <HAL_DAC_ConfigChannel+0x1be>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 800632e:	68bb      	ldr	r3, [r7, #8]
 8006330:	68db      	ldr	r3, [r3, #12]
 8006332:	2b02      	cmp	r3, #2
 8006334:	d102      	bne.n	800633c <HAL_DAC_ConfigChannel+0x1ac>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 8006336:	2301      	movs	r3, #1
 8006338:	61fb      	str	r3, [r7, #28]
 800633a:	e008      	b.n	800634e <HAL_DAC_ConfigChannel+0x1be>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 800633c:	68bb      	ldr	r3, [r7, #8]
 800633e:	689b      	ldr	r3, [r3, #8]
 8006340:	2b00      	cmp	r3, #0
 8006342:	d102      	bne.n	800634a <HAL_DAC_ConfigChannel+0x1ba>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 8006344:	2301      	movs	r3, #1
 8006346:	61fb      	str	r3, [r7, #28]
 8006348:	e001      	b.n	800634e <HAL_DAC_ConfigChannel+0x1be>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 800634a:	2300      	movs	r3, #0
 800634c:	61fb      	str	r3, [r7, #28]
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 800634e:	68bb      	ldr	r3, [r7, #8]
 8006350:	681a      	ldr	r2, [r3, #0]
 8006352:	68bb      	ldr	r3, [r7, #8]
 8006354:	689b      	ldr	r3, [r3, #8]
 8006356:	4313      	orrs	r3, r2
 8006358:	69fa      	ldr	r2, [r7, #28]
 800635a:	4313      	orrs	r3, r2
 800635c:	613b      	str	r3, [r7, #16]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	f003 0310 	and.w	r3, r3, #16
 8006364:	693a      	ldr	r2, [r7, #16]
 8006366:	fa02 f303 	lsl.w	r3, r2, r3
 800636a:	697a      	ldr	r2, [r7, #20]
 800636c:	4313      	orrs	r3, r2
 800636e:	617b      	str	r3, [r7, #20]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	697a      	ldr	r2, [r7, #20]
 8006376:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	6819      	ldr	r1, [r3, #0]
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	f003 0310 	and.w	r3, r3, #16
 8006384:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8006388:	fa02 f303 	lsl.w	r3, r2, r3
 800638c:	43da      	mvns	r2, r3
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	400a      	ands	r2, r1
 8006394:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	617b      	str	r3, [r7, #20]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	f003 0310 	and.w	r3, r3, #16
 80063a4:	f640 72fe 	movw	r2, #4094	; 0xffe
 80063a8:	fa02 f303 	lsl.w	r3, r2, r3
 80063ac:	43db      	mvns	r3, r3
 80063ae:	697a      	ldr	r2, [r7, #20]
 80063b0:	4013      	ands	r3, r2
 80063b2:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 80063b4:	68bb      	ldr	r3, [r7, #8]
 80063b6:	685b      	ldr	r3, [r3, #4]
 80063b8:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	f003 0310 	and.w	r3, r3, #16
 80063c0:	693a      	ldr	r2, [r7, #16]
 80063c2:	fa02 f303 	lsl.w	r3, r2, r3
 80063c6:	697a      	ldr	r2, [r7, #20]
 80063c8:	4313      	orrs	r3, r2
 80063ca:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	697a      	ldr	r2, [r7, #20]
 80063d2:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	6819      	ldr	r1, [r3, #0]
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	f003 0310 	and.w	r3, r3, #16
 80063e0:	22c0      	movs	r2, #192	; 0xc0
 80063e2:	fa02 f303 	lsl.w	r3, r2, r3
 80063e6:	43da      	mvns	r2, r3
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	400a      	ands	r2, r1
 80063ee:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	2201      	movs	r2, #1
 80063f4:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	2200      	movs	r2, #0
 80063fa:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80063fc:	2300      	movs	r3, #0
}
 80063fe:	4618      	mov	r0, r3
 8006400:	3720      	adds	r7, #32
 8006402:	46bd      	mov	sp, r7
 8006404:	bd80      	pop	{r7, pc}
 8006406:	bf00      	nop
 8006408:	20008000 	.word	0x20008000

0800640c <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 800640c:	b580      	push	{r7, lr}
 800640e:	b084      	sub	sp, #16
 8006410:	af00      	add	r7, sp, #0
 8006412:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	2b00      	cmp	r3, #0
 8006418:	d101      	bne.n	800641e <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 800641a:	2301      	movs	r3, #1
 800641c:	e0cf      	b.n	80065be <HAL_ETH_Init+0x1b2>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006424:	2b00      	cmp	r3, #0
 8006426:	d106      	bne.n	8006436 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	2223      	movs	r2, #35	; 0x23
 800642c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8006430:	6878      	ldr	r0, [r7, #4]
 8006432:	f009 f8cf 	bl	800f5d4 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006436:	4b64      	ldr	r3, [pc, #400]	; (80065c8 <HAL_ETH_Init+0x1bc>)
 8006438:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800643c:	4a62      	ldr	r2, [pc, #392]	; (80065c8 <HAL_ETH_Init+0x1bc>)
 800643e:	f043 0302 	orr.w	r3, r3, #2
 8006442:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8006446:	4b60      	ldr	r3, [pc, #384]	; (80065c8 <HAL_ETH_Init+0x1bc>)
 8006448:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800644c:	f003 0302 	and.w	r3, r3, #2
 8006450:	60bb      	str	r3, [r7, #8]
 8006452:	68bb      	ldr	r3, [r7, #8]

  if (heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	7a1b      	ldrb	r3, [r3, #8]
 8006458:	2b00      	cmp	r3, #0
 800645a:	d103      	bne.n	8006464 <HAL_ETH_Init+0x58>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 800645c:	2000      	movs	r0, #0
 800645e:	f7fd fee1 	bl	8004224 <HAL_SYSCFG_ETHInterfaceSelect>
 8006462:	e003      	b.n	800646c <HAL_ETH_Init+0x60>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 8006464:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8006468:	f7fd fedc 	bl	8004224 <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Dummy read to sync with ETH */
  (void)SYSCFG->PMCR;
 800646c:	4b57      	ldr	r3, [pc, #348]	; (80065cc <HAL_ETH_Init+0x1c0>)
 800646e:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	687a      	ldr	r2, [r7, #4]
 800647c:	6812      	ldr	r2, [r2, #0]
 800647e:	f043 0301 	orr.w	r3, r3, #1
 8006482:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8006486:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006488:	f7fd fe90 	bl	80041ac <HAL_GetTick>
 800648c:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 800648e:	e011      	b.n	80064b4 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8006490:	f7fd fe8c 	bl	80041ac <HAL_GetTick>
 8006494:	4602      	mov	r2, r0
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	1ad3      	subs	r3, r2, r3
 800649a:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800649e:	d909      	bls.n	80064b4 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	2204      	movs	r2, #4
 80064a4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	22e0      	movs	r2, #224	; 0xe0
 80064ac:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 80064b0:	2301      	movs	r3, #1
 80064b2:	e084      	b.n	80065be <HAL_ETH_Init+0x1b2>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	f003 0301 	and.w	r3, r3, #1
 80064c2:	2b00      	cmp	r3, #0
 80064c4:	d1e4      	bne.n	8006490 <HAL_ETH_Init+0x84>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  HAL_ETH_SetMDIOClockRange(heth);
 80064c6:	6878      	ldr	r0, [r7, #4]
 80064c8:	f000 fcd4 	bl	8006e74 <HAL_ETH_SetMDIOClockRange>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 80064cc:	f004 fba4 	bl	800ac18 <HAL_RCC_GetHCLKFreq>
 80064d0:	4603      	mov	r3, r0
 80064d2:	4a3f      	ldr	r2, [pc, #252]	; (80065d0 <HAL_ETH_Init+0x1c4>)
 80064d4:	fba2 2303 	umull	r2, r3, r2, r3
 80064d8:	0c9a      	lsrs	r2, r3, #18
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	3a01      	subs	r2, #1
 80064e0:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 80064e4:	6878      	ldr	r0, [r7, #4]
 80064e6:	f000 febf 	bl	8007268 <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80064f2:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 80064f6:	f423 13e0 	bic.w	r3, r3, #1835008	; 0x1c0000
 80064fa:	687a      	ldr	r2, [r7, #4]
 80064fc:	6812      	ldr	r2, [r2, #0]
 80064fe:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006502:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8006506:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	695b      	ldr	r3, [r3, #20]
 800650e:	f003 0303 	and.w	r3, r3, #3
 8006512:	2b00      	cmp	r3, #0
 8006514:	d009      	beq.n	800652a <HAL_ETH_Init+0x11e>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	2201      	movs	r2, #1
 800651a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	22e0      	movs	r2, #224	; 0xe0
 8006522:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    /* Return Error */
    return HAL_ERROR;
 8006526:	2301      	movs	r3, #1
 8006528:	e049      	b.n	80065be <HAL_ETH_Init+0x1b2>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006532:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 8006536:	4b27      	ldr	r3, [pc, #156]	; (80065d4 <HAL_ETH_Init+0x1c8>)
 8006538:	4013      	ands	r3, r2
 800653a:	687a      	ldr	r2, [r7, #4]
 800653c:	6952      	ldr	r2, [r2, #20]
 800653e:	0051      	lsls	r1, r2, #1
 8006540:	687a      	ldr	r2, [r7, #4]
 8006542:	6812      	ldr	r2, [r2, #0]
 8006544:	430b      	orrs	r3, r1
 8006546:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800654a:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 800654e:	6878      	ldr	r0, [r7, #4]
 8006550:	f000 ff27 	bl	80073a2 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8006554:	6878      	ldr	r0, [r7, #4]
 8006556:	f000 ff6d 	bl	8007434 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	685b      	ldr	r3, [r3, #4]
 800655e:	3305      	adds	r3, #5
 8006560:	781b      	ldrb	r3, [r3, #0]
 8006562:	021a      	lsls	r2, r3, #8
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	685b      	ldr	r3, [r3, #4]
 8006568:	3304      	adds	r3, #4
 800656a:	781b      	ldrb	r3, [r3, #0]
 800656c:	4619      	mov	r1, r3
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	430a      	orrs	r2, r1
 8006574:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	685b      	ldr	r3, [r3, #4]
 800657c:	3303      	adds	r3, #3
 800657e:	781b      	ldrb	r3, [r3, #0]
 8006580:	061a      	lsls	r2, r3, #24
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	685b      	ldr	r3, [r3, #4]
 8006586:	3302      	adds	r3, #2
 8006588:	781b      	ldrb	r3, [r3, #0]
 800658a:	041b      	lsls	r3, r3, #16
 800658c:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	685b      	ldr	r3, [r3, #4]
 8006592:	3301      	adds	r3, #1
 8006594:	781b      	ldrb	r3, [r3, #0]
 8006596:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8006598:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	685b      	ldr	r3, [r3, #4]
 800659e:	781b      	ldrb	r3, [r3, #0]
 80065a0:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 80065a6:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80065a8:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	2200      	movs	r2, #0
 80065b0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	2210      	movs	r2, #16
 80065b8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80065bc:	2300      	movs	r3, #0
}
 80065be:	4618      	mov	r0, r3
 80065c0:	3710      	adds	r7, #16
 80065c2:	46bd      	mov	sp, r7
 80065c4:	bd80      	pop	{r7, pc}
 80065c6:	bf00      	nop
 80065c8:	58024400 	.word	0x58024400
 80065cc:	58000400 	.word	0x58000400
 80065d0:	431bde83 	.word	0x431bde83
 80065d4:	ffff8001 	.word	0xffff8001

080065d8 <HAL_ETH_Start>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start(ETH_HandleTypeDef *heth)
{
 80065d8:	b580      	push	{r7, lr}
 80065da:	b082      	sub	sp, #8
 80065dc:	af00      	add	r7, sp, #0
 80065de:	6078      	str	r0, [r7, #4]
  if (heth->gState == HAL_ETH_STATE_READY)
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80065e6:	2b10      	cmp	r3, #16
 80065e8:	d153      	bne.n	8006692 <HAL_ETH_Start+0xba>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	2223      	movs	r2, #35	; 0x23
 80065ee:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Set nombre of descriptors to build */
    heth->RxDescList.RxBuildDescCnt = ETH_RX_DESC_CNT;
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	2204      	movs	r2, #4
 80065f6:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Build all descriptors */
    ETH_UpdateDescriptor(heth);
 80065f8:	6878      	ldr	r0, [r7, #4]
 80065fa:	f000 f936 	bl	800686a <ETH_UpdateDescriptor>

    /* Enable the MAC transmission */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	681a      	ldr	r2, [r3, #0]
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	f042 0202 	orr.w	r2, r2, #2
 800660c:	601a      	str	r2, [r3, #0]

    /* Enable the MAC reception */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	681a      	ldr	r2, [r3, #0]
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	f042 0201 	orr.w	r2, r2, #1
 800661c:	601a      	str	r2, [r3, #0]

    /* Set the Flush Transmit FIFO bit */
    SET_BIT(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_FTQ);
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	; 0xd00
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	f042 0201 	orr.w	r2, r2, #1
 800662e:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

    /* Enable the DMA transmission */
    SET_BIT(heth->Instance->DMACTCR, ETH_DMACTCR_ST);
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800663a:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 800663e:	687a      	ldr	r2, [r7, #4]
 8006640:	6812      	ldr	r2, [r2, #0]
 8006642:	f043 0301 	orr.w	r3, r3, #1
 8006646:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800664a:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104

    /* Enable the DMA reception */
    SET_BIT(heth->Instance->DMACRCR, ETH_DMACRCR_SR);
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006656:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800665a:	687a      	ldr	r2, [r7, #4]
 800665c:	6812      	ldr	r2, [r2, #0]
 800665e:	f043 0301 	orr.w	r3, r3, #1
 8006662:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8006666:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108

    /* Clear Tx and Rx process stopped flags */
    heth->Instance->DMACSR |= (ETH_DMACSR_TPS | ETH_DMACSR_RPS);
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006672:	f8d3 3160 	ldr.w	r3, [r3, #352]	; 0x160
 8006676:	687a      	ldr	r2, [r7, #4]
 8006678:	6812      	ldr	r2, [r2, #0]
 800667a:	f443 7381 	orr.w	r3, r3, #258	; 0x102
 800667e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8006682:	f8c2 3160 	str.w	r3, [r2, #352]	; 0x160

    heth->gState = HAL_ETH_STATE_STARTED;
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	2223      	movs	r2, #35	; 0x23
 800668a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 800668e:	2300      	movs	r3, #0
 8006690:	e000      	b.n	8006694 <HAL_ETH_Start+0xbc>
  }
  else
  {
    return HAL_ERROR;
 8006692:	2301      	movs	r3, #1
  }
}
 8006694:	4618      	mov	r0, r3
 8006696:	3708      	adds	r7, #8
 8006698:	46bd      	mov	sp, r7
 800669a:	bd80      	pop	{r7, pc}

0800669c <HAL_ETH_Stop>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop(ETH_HandleTypeDef *heth)
{
 800669c:	b480      	push	{r7}
 800669e:	b083      	sub	sp, #12
 80066a0:	af00      	add	r7, sp, #0
 80066a2:	6078      	str	r0, [r7, #4]
  if (heth->gState == HAL_ETH_STATE_STARTED)
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80066aa:	2b23      	cmp	r3, #35	; 0x23
 80066ac:	d13f      	bne.n	800672e <HAL_ETH_Stop+0x92>
  {
    /* Set the ETH peripheral state to BUSY */
    heth->gState = HAL_ETH_STATE_BUSY;
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	2223      	movs	r2, #35	; 0x23
 80066b2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    /* Disable the DMA transmission */
    CLEAR_BIT(heth->Instance->DMACTCR, ETH_DMACTCR_ST);
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80066be:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 80066c2:	687a      	ldr	r2, [r7, #4]
 80066c4:	6812      	ldr	r2, [r2, #0]
 80066c6:	f023 0301 	bic.w	r3, r3, #1
 80066ca:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80066ce:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104

    /* Disable the DMA reception */
    CLEAR_BIT(heth->Instance->DMACRCR, ETH_DMACRCR_SR);
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80066da:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80066de:	687a      	ldr	r2, [r7, #4]
 80066e0:	6812      	ldr	r2, [r2, #0]
 80066e2:	f023 0301 	bic.w	r3, r3, #1
 80066e6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80066ea:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108

    /* Disable the MAC reception */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	681a      	ldr	r2, [r3, #0]
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	f022 0201 	bic.w	r2, r2, #1
 80066fc:	601a      	str	r2, [r3, #0]

    /* Set the Flush Transmit FIFO bit */
    SET_BIT(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_FTQ);
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	681b      	ldr	r3, [r3, #0]
 8006702:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	; 0xd00
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	f042 0201 	orr.w	r2, r2, #1
 800670e:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

    /* Disable the MAC transmission */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	681a      	ldr	r2, [r3, #0]
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	f022 0202 	bic.w	r2, r2, #2
 8006720:	601a      	str	r2, [r3, #0]

    heth->gState = HAL_ETH_STATE_READY;
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	2210      	movs	r2, #16
 8006726:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Return function status */
    return HAL_OK;
 800672a:	2300      	movs	r3, #0
 800672c:	e000      	b.n	8006730 <HAL_ETH_Stop+0x94>
  }
  else
  {
    return HAL_ERROR;
 800672e:	2301      	movs	r3, #1
  }
}
 8006730:	4618      	mov	r0, r3
 8006732:	370c      	adds	r7, #12
 8006734:	46bd      	mov	sp, r7
 8006736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800673a:	4770      	bx	lr

0800673c <HAL_ETH_Transmit>:
  * @param  pTxConfig: Hold the configuration of packet to be transmitted
  * @param  Timeout: timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Transmit(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig, uint32_t Timeout)
{
 800673c:	b580      	push	{r7, lr}
 800673e:	b086      	sub	sp, #24
 8006740:	af00      	add	r7, sp, #0
 8006742:	60f8      	str	r0, [r7, #12]
 8006744:	60b9      	str	r1, [r7, #8]
 8006746:	607a      	str	r2, [r7, #4]
  uint32_t tickstart;
  ETH_DMADescTypeDef *dmatxdesc;

  if (pTxConfig == NULL)
 8006748:	68bb      	ldr	r3, [r7, #8]
 800674a:	2b00      	cmp	r3, #0
 800674c:	d109      	bne.n	8006762 <HAL_ETH_Transmit+0x26>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006754:	f043 0201 	orr.w	r2, r3, #1
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    return HAL_ERROR;
 800675e:	2301      	movs	r3, #1
 8006760:	e07f      	b.n	8006862 <HAL_ETH_Transmit+0x126>
  }

  if (heth->gState == HAL_ETH_STATE_STARTED)
 8006762:	68fb      	ldr	r3, [r7, #12]
 8006764:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006768:	2b23      	cmp	r3, #35	; 0x23
 800676a:	d179      	bne.n	8006860 <HAL_ETH_Transmit+0x124>
  {
    /* Config DMA Tx descriptor by Tx Packet info */
    if (ETH_Prepare_Tx_Descriptors(heth, pTxConfig, 0) != HAL_ETH_ERROR_NONE)
 800676c:	2200      	movs	r2, #0
 800676e:	68b9      	ldr	r1, [r7, #8]
 8006770:	68f8      	ldr	r0, [r7, #12]
 8006772:	f000 febd 	bl	80074f0 <ETH_Prepare_Tx_Descriptors>
 8006776:	4603      	mov	r3, r0
 8006778:	2b00      	cmp	r3, #0
 800677a:	d009      	beq.n	8006790 <HAL_ETH_Transmit+0x54>
    {
      /* Set the ETH error code */
      heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006782:	f043 0202 	orr.w	r2, r3, #2
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      return HAL_ERROR;
 800678c:	2301      	movs	r3, #1
 800678e:	e068      	b.n	8006862 <HAL_ETH_Transmit+0x126>
  __ASM volatile ("dsb 0xF":::"memory");
 8006790:	f3bf 8f4f 	dsb	sy
}
 8006794:	bf00      	nop
    }

    /* Ensure completion of descriptor preparation before transmission start */
    __DSB();

    dmatxdesc = (ETH_DMADescTypeDef *)(&heth->TxDescList)->TxDesc[heth->TxDescList.CurTxDesc];
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	3206      	adds	r2, #6
 800679e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80067a2:	617b      	str	r3, [r7, #20]

    /* Incr current tx desc index */
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
 80067a4:	68fb      	ldr	r3, [r7, #12]
 80067a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80067a8:	1c5a      	adds	r2, r3, #1
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	629a      	str	r2, [r3, #40]	; 0x28
 80067ae:	68fb      	ldr	r3, [r7, #12]
 80067b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80067b2:	2b03      	cmp	r3, #3
 80067b4:	d904      	bls.n	80067c0 <HAL_ETH_Transmit+0x84>
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80067ba:	1f1a      	subs	r2, r3, #4
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	629a      	str	r2, [r3, #40]	; 0x28

    /* Start transmission */
    /* issue a poll command to Tx DMA by writing address of next immediate free descriptor */
    WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t)(heth->TxDescList.TxDesc[heth->TxDescList.CurTxDesc]));
 80067c0:	68fb      	ldr	r3, [r7, #12]
 80067c2:	6a99      	ldr	r1, [r3, #40]	; 0x28
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	681a      	ldr	r2, [r3, #0]
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	3106      	adds	r1, #6
 80067cc:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80067d0:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80067d4:	f8c2 3120 	str.w	r3, [r2, #288]	; 0x120

    tickstart = HAL_GetTick();
 80067d8:	f7fd fce8 	bl	80041ac <HAL_GetTick>
 80067dc:	6138      	str	r0, [r7, #16]

    /* Wait for data to be transmitted or timeout occurred */
    while ((dmatxdesc->DESC3 & ETH_DMATXNDESCWBF_OWN) != (uint32_t)RESET)
 80067de:	e039      	b.n	8006854 <HAL_ETH_Transmit+0x118>
    {
      if ((heth->Instance->DMACSR & ETH_DMACSR_FBE) != (uint32_t)RESET)
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80067e8:	f8d3 3160 	ldr.w	r3, [r3, #352]	; 0x160
 80067ec:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80067f0:	2b00      	cmp	r3, #0
 80067f2:	d012      	beq.n	800681a <HAL_ETH_Transmit+0xde>
      {
        heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80067fa:	f043 0208 	orr.w	r2, r3, #8
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        heth->DMAErrorCode = heth->Instance->DMACSR;
 8006804:	68fb      	ldr	r3, [r7, #12]
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800680c:	f8d3 2160 	ldr.w	r2, [r3, #352]	; 0x160
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        /* Return function status */
        return HAL_ERROR;
 8006816:	2301      	movs	r3, #1
 8006818:	e023      	b.n	8006862 <HAL_ETH_Transmit+0x126>
      }

      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006820:	d018      	beq.n	8006854 <HAL_ETH_Transmit+0x118>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8006822:	f7fd fcc3 	bl	80041ac <HAL_GetTick>
 8006826:	4602      	mov	r2, r0
 8006828:	693b      	ldr	r3, [r7, #16]
 800682a:	1ad3      	subs	r3, r2, r3
 800682c:	687a      	ldr	r2, [r7, #4]
 800682e:	429a      	cmp	r2, r3
 8006830:	d302      	bcc.n	8006838 <HAL_ETH_Transmit+0xfc>
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	2b00      	cmp	r3, #0
 8006836:	d10d      	bne.n	8006854 <HAL_ETH_Transmit+0x118>
        {
          heth->ErrorCode |= HAL_ETH_ERROR_TIMEOUT;
 8006838:	68fb      	ldr	r3, [r7, #12]
 800683a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800683e:	f043 0204 	orr.w	r2, r3, #4
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          /* Clear TX descriptor so that we can proceed */
          dmatxdesc->DESC3 = (ETH_DMATXNDESCWBF_FD | ETH_DMATXNDESCWBF_LD);
 8006848:	697b      	ldr	r3, [r7, #20]
 800684a:	f04f 5240 	mov.w	r2, #805306368	; 0x30000000
 800684e:	60da      	str	r2, [r3, #12]
          return HAL_ERROR;
 8006850:	2301      	movs	r3, #1
 8006852:	e006      	b.n	8006862 <HAL_ETH_Transmit+0x126>
    while ((dmatxdesc->DESC3 & ETH_DMATXNDESCWBF_OWN) != (uint32_t)RESET)
 8006854:	697b      	ldr	r3, [r7, #20]
 8006856:	68db      	ldr	r3, [r3, #12]
 8006858:	2b00      	cmp	r3, #0
 800685a:	dbc1      	blt.n	80067e0 <HAL_ETH_Transmit+0xa4>
        }
      }
    }

    /* Return function status */
    return HAL_OK;
 800685c:	2300      	movs	r3, #0
 800685e:	e000      	b.n	8006862 <HAL_ETH_Transmit+0x126>
  }
  else
  {
    return HAL_ERROR;
 8006860:	2301      	movs	r3, #1
  }
}
 8006862:	4618      	mov	r0, r3
 8006864:	3718      	adds	r7, #24
 8006866:	46bd      	mov	sp, r7
 8006868:	bd80      	pop	{r7, pc}

0800686a <ETH_UpdateDescriptor>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_UpdateDescriptor(ETH_HandleTypeDef *heth)
{
 800686a:	b580      	push	{r7, lr}
 800686c:	b088      	sub	sp, #32
 800686e:	af00      	add	r7, sp, #0
 8006870:	6078      	str	r0, [r7, #4]
  uint32_t descidx;
  uint32_t desccount;
  ETH_DMADescTypeDef *dmarxdesc;
  uint8_t *buff = NULL;
 8006872:	2300      	movs	r3, #0
 8006874:	60fb      	str	r3, [r7, #12]
  uint8_t allocStatus = 1U;
 8006876:	2301      	movs	r3, #1
 8006878:	74fb      	strb	r3, [r7, #19]

  descidx = heth->RxDescList.RxBuildDescIdx;
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800687e:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	69fa      	ldr	r2, [r7, #28]
 8006884:	3212      	adds	r2, #18
 8006886:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800688a:	617b      	str	r3, [r7, #20]
  desccount = heth->RxDescList.RxBuildDescCnt;
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006890:	61bb      	str	r3, [r7, #24]

  while ((desccount > 0U) && (allocStatus != 0U))
 8006892:	e03b      	b.n	800690c <ETH_UpdateDescriptor+0xa2>
  {
    /* Check if a buffer's attached the descriptor */
    if (READ_REG(dmarxdesc->BackupAddr0) == 0U)
 8006894:	697b      	ldr	r3, [r7, #20]
 8006896:	691b      	ldr	r3, [r3, #16]
 8006898:	2b00      	cmp	r3, #0
 800689a:	d112      	bne.n	80068c2 <ETH_UpdateDescriptor+0x58>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Allocate callback*/
      heth->rxAllocateCallback(&buff);
#else
      /* Allocate callback */
      HAL_ETH_RxAllocateCallback(&buff);
 800689c:	f107 030c 	add.w	r3, r7, #12
 80068a0:	4618      	mov	r0, r3
 80068a2:	f009 f83f 	bl	800f924 <HAL_ETH_RxAllocateCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      if (buff == NULL)
 80068a6:	68fb      	ldr	r3, [r7, #12]
 80068a8:	2b00      	cmp	r3, #0
 80068aa:	d102      	bne.n	80068b2 <ETH_UpdateDescriptor+0x48>
      {
        allocStatus = 0U;
 80068ac:	2300      	movs	r3, #0
 80068ae:	74fb      	strb	r3, [r7, #19]
 80068b0:	e007      	b.n	80068c2 <ETH_UpdateDescriptor+0x58>
      }
      else
      {
        WRITE_REG(dmarxdesc->BackupAddr0, (uint32_t)buff);
 80068b2:	68fb      	ldr	r3, [r7, #12]
 80068b4:	461a      	mov	r2, r3
 80068b6:	697b      	ldr	r3, [r7, #20]
 80068b8:	611a      	str	r2, [r3, #16]
        WRITE_REG(dmarxdesc->DESC0, (uint32_t)buff);
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	461a      	mov	r2, r3
 80068be:	697b      	ldr	r3, [r7, #20]
 80068c0:	601a      	str	r2, [r3, #0]
      }
    }

    if (allocStatus != 0U)
 80068c2:	7cfb      	ldrb	r3, [r7, #19]
 80068c4:	2b00      	cmp	r3, #0
 80068c6:	d021      	beq.n	800690c <ETH_UpdateDescriptor+0xa2>
  __ASM volatile ("dmb 0xF":::"memory");
 80068c8:	f3bf 8f5f 	dmb	sy
}
 80068cc:	bf00      	nop
    {
      /* Ensure rest of descriptor is written to RAM before the OWN bit */
      __DMB();

      if (heth->RxDescList.ItMode != 0U)
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	d004      	beq.n	80068e0 <ETH_UpdateDescriptor+0x76>
      {
        WRITE_REG(dmarxdesc->DESC3, ETH_DMARXNDESCRF_OWN | ETH_DMARXNDESCRF_BUF1V | ETH_DMARXNDESCRF_IOC);
 80068d6:	697b      	ldr	r3, [r7, #20]
 80068d8:	f04f 4241 	mov.w	r2, #3238002688	; 0xc1000000
 80068dc:	60da      	str	r2, [r3, #12]
 80068de:	e003      	b.n	80068e8 <ETH_UpdateDescriptor+0x7e>
      }
      else
      {
        WRITE_REG(dmarxdesc->DESC3, ETH_DMARXNDESCRF_OWN | ETH_DMARXNDESCRF_BUF1V);
 80068e0:	697b      	ldr	r3, [r7, #20]
 80068e2:	f04f 4201 	mov.w	r2, #2164260864	; 0x81000000
 80068e6:	60da      	str	r2, [r3, #12]
      }

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 80068e8:	69fb      	ldr	r3, [r7, #28]
 80068ea:	3301      	adds	r3, #1
 80068ec:	61fb      	str	r3, [r7, #28]
 80068ee:	69fb      	ldr	r3, [r7, #28]
 80068f0:	2b03      	cmp	r3, #3
 80068f2:	d902      	bls.n	80068fa <ETH_UpdateDescriptor+0x90>
 80068f4:	69fb      	ldr	r3, [r7, #28]
 80068f6:	3b04      	subs	r3, #4
 80068f8:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	69fa      	ldr	r2, [r7, #28]
 80068fe:	3212      	adds	r2, #18
 8006900:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006904:	617b      	str	r3, [r7, #20]
      desccount--;
 8006906:	69bb      	ldr	r3, [r7, #24]
 8006908:	3b01      	subs	r3, #1
 800690a:	61bb      	str	r3, [r7, #24]
  while ((desccount > 0U) && (allocStatus != 0U))
 800690c:	69bb      	ldr	r3, [r7, #24]
 800690e:	2b00      	cmp	r3, #0
 8006910:	d002      	beq.n	8006918 <ETH_UpdateDescriptor+0xae>
 8006912:	7cfb      	ldrb	r3, [r7, #19]
 8006914:	2b00      	cmp	r3, #0
 8006916:	d1bd      	bne.n	8006894 <ETH_UpdateDescriptor+0x2a>
    }
  }

  if (heth->RxDescList.RxBuildDescCnt != desccount)
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800691c:	69ba      	ldr	r2, [r7, #24]
 800691e:	429a      	cmp	r2, r3
 8006920:	d00d      	beq.n	800693e <ETH_UpdateDescriptor+0xd4>
  {
    /* Set the Tail pointer address */
    WRITE_REG(heth->Instance->DMACRDTPR, 0);
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800692a:	461a      	mov	r2, r3
 800692c:	2300      	movs	r3, #0
 800692e:	f8c2 3128 	str.w	r3, [r2, #296]	; 0x128

    heth->RxDescList.RxBuildDescIdx = descidx;
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	69fa      	ldr	r2, [r7, #28]
 8006936:	669a      	str	r2, [r3, #104]	; 0x68
    heth->RxDescList.RxBuildDescCnt = desccount;
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	69ba      	ldr	r2, [r7, #24]
 800693c:	66da      	str	r2, [r3, #108]	; 0x6c
  }
}
 800693e:	bf00      	nop
 8006940:	3720      	adds	r7, #32
 8006942:	46bd      	mov	sp, r7
 8006944:	bd80      	pop	{r7, pc}

08006946 <HAL_ETH_ReadPHYRegister>:
  * @param pRegValue: parameter to hold read value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                          uint32_t *pRegValue)
{
 8006946:	b580      	push	{r7, lr}
 8006948:	b086      	sub	sp, #24
 800694a:	af00      	add	r7, sp, #0
 800694c:	60f8      	str	r0, [r7, #12]
 800694e:	60b9      	str	r1, [r7, #8]
 8006950:	607a      	str	r2, [r7, #4]
 8006952:	603b      	str	r3, [r7, #0]
  uint32_t tickstart;
  uint32_t tmpreg;

  /* Check for the Busy flag */
  if (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) != (uint32_t)RESET)
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800695c:	f003 0301 	and.w	r3, r3, #1
 8006960:	2b00      	cmp	r3, #0
 8006962:	d001      	beq.n	8006968 <HAL_ETH_ReadPHYRegister+0x22>
  {
    return HAL_ERROR;
 8006964:	2301      	movs	r3, #1
 8006966:	e03e      	b.n	80069e6 <HAL_ETH_ReadPHYRegister+0xa0>
  }

  /* Get the  MACMDIOAR value */
  WRITE_REG(tmpreg, heth->Instance->MACMDIOAR);
 8006968:	68fb      	ldr	r3, [r7, #12]
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8006970:	617b      	str	r3, [r7, #20]
     - Set the PHY device address
     - Set the PHY register address
     - Set the read mode
     - Set the MII Busy bit */

  MODIFY_REG(tmpreg, ETH_MACMDIOAR_PA, (PHYAddr << 21));
 8006972:	697b      	ldr	r3, [r7, #20]
 8006974:	f023 7278 	bic.w	r2, r3, #65011712	; 0x3e00000
 8006978:	68bb      	ldr	r3, [r7, #8]
 800697a:	055b      	lsls	r3, r3, #21
 800697c:	4313      	orrs	r3, r2
 800697e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_RDA, (PHYReg << 16));
 8006980:	697b      	ldr	r3, [r7, #20]
 8006982:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	041b      	lsls	r3, r3, #16
 800698a:	4313      	orrs	r3, r2
 800698c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_MOC, ETH_MACMDIOAR_MOC_RD);
 800698e:	697b      	ldr	r3, [r7, #20]
 8006990:	f043 030c 	orr.w	r3, r3, #12
 8006994:	617b      	str	r3, [r7, #20]
  SET_BIT(tmpreg, ETH_MACMDIOAR_MB);
 8006996:	697b      	ldr	r3, [r7, #20]
 8006998:	f043 0301 	orr.w	r3, r3, #1
 800699c:	617b      	str	r3, [r7, #20]

  /* Write the result value into the MDII Address register */
  WRITE_REG(heth->Instance->MACMDIOAR, tmpreg);
 800699e:	68fb      	ldr	r3, [r7, #12]
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	697a      	ldr	r2, [r7, #20]
 80069a4:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

  tickstart = HAL_GetTick();
 80069a8:	f7fd fc00 	bl	80041ac <HAL_GetTick>
 80069ac:	6138      	str	r0, [r7, #16]

  /* Wait for the Busy flag */
  while (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 80069ae:	e009      	b.n	80069c4 <HAL_ETH_ReadPHYRegister+0x7e>
  {
    if (((HAL_GetTick() - tickstart) > ETH_MDIO_BUS_TIMEOUT))
 80069b0:	f7fd fbfc 	bl	80041ac <HAL_GetTick>
 80069b4:	4602      	mov	r2, r0
 80069b6:	693b      	ldr	r3, [r7, #16]
 80069b8:	1ad3      	subs	r3, r2, r3
 80069ba:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80069be:	d901      	bls.n	80069c4 <HAL_ETH_ReadPHYRegister+0x7e>
    {
      return HAL_ERROR;
 80069c0:	2301      	movs	r3, #1
 80069c2:	e010      	b.n	80069e6 <HAL_ETH_ReadPHYRegister+0xa0>
  while (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 80069c4:	68fb      	ldr	r3, [r7, #12]
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80069cc:	f003 0301 	and.w	r3, r3, #1
 80069d0:	2b00      	cmp	r3, #0
 80069d2:	d1ed      	bne.n	80069b0 <HAL_ETH_ReadPHYRegister+0x6a>
    }
  }

  /* Get MACMIIDR value */
  WRITE_REG(*pRegValue, (uint16_t)heth->Instance->MACMDIODR);
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80069dc:	b29b      	uxth	r3, r3
 80069de:	461a      	mov	r2, r3
 80069e0:	683b      	ldr	r3, [r7, #0]
 80069e2:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 80069e4:	2300      	movs	r3, #0
}
 80069e6:	4618      	mov	r0, r3
 80069e8:	3718      	adds	r7, #24
 80069ea:	46bd      	mov	sp, r7
 80069ec:	bd80      	pop	{r7, pc}
	...

080069f0 <HAL_ETH_WritePHYRegister>:
  * @param  RegValue: the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                           uint32_t RegValue)
{
 80069f0:	b580      	push	{r7, lr}
 80069f2:	b086      	sub	sp, #24
 80069f4:	af00      	add	r7, sp, #0
 80069f6:	60f8      	str	r0, [r7, #12]
 80069f8:	60b9      	str	r1, [r7, #8]
 80069fa:	607a      	str	r2, [r7, #4]
 80069fc:	603b      	str	r3, [r7, #0]
  uint32_t tickstart;
  uint32_t tmpreg;

  /* Check for the Busy flag */
  if (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) != (uint32_t)RESET)
 80069fe:	68fb      	ldr	r3, [r7, #12]
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8006a06:	f003 0301 	and.w	r3, r3, #1
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	d001      	beq.n	8006a12 <HAL_ETH_WritePHYRegister+0x22>
  {
    return HAL_ERROR;
 8006a0e:	2301      	movs	r3, #1
 8006a10:	e03c      	b.n	8006a8c <HAL_ETH_WritePHYRegister+0x9c>
  }

  /* Get the  MACMDIOAR value */
  WRITE_REG(tmpreg, heth->Instance->MACMDIOAR);
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8006a1a:	617b      	str	r3, [r7, #20]
     - Set the PHY device address
     - Set the PHY register address
     - Set the write mode
     - Set the MII Busy bit */

  MODIFY_REG(tmpreg, ETH_MACMDIOAR_PA, (PHYAddr << 21));
 8006a1c:	697b      	ldr	r3, [r7, #20]
 8006a1e:	f023 7278 	bic.w	r2, r3, #65011712	; 0x3e00000
 8006a22:	68bb      	ldr	r3, [r7, #8]
 8006a24:	055b      	lsls	r3, r3, #21
 8006a26:	4313      	orrs	r3, r2
 8006a28:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_RDA, (PHYReg << 16));
 8006a2a:	697b      	ldr	r3, [r7, #20]
 8006a2c:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	041b      	lsls	r3, r3, #16
 8006a34:	4313      	orrs	r3, r2
 8006a36:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_MOC, ETH_MACMDIOAR_MOC_WR);
 8006a38:	697b      	ldr	r3, [r7, #20]
 8006a3a:	f023 030c 	bic.w	r3, r3, #12
 8006a3e:	f043 0304 	orr.w	r3, r3, #4
 8006a42:	617b      	str	r3, [r7, #20]
  SET_BIT(tmpreg, ETH_MACMDIOAR_MB);
 8006a44:	697b      	ldr	r3, [r7, #20]
 8006a46:	f043 0301 	orr.w	r3, r3, #1
 8006a4a:	617b      	str	r3, [r7, #20]


  /* Give the value to the MII data register */
  WRITE_REG(ETH->MACMDIODR, (uint16_t)RegValue);
 8006a4c:	683b      	ldr	r3, [r7, #0]
 8006a4e:	b29a      	uxth	r2, r3
 8006a50:	4b10      	ldr	r3, [pc, #64]	; (8006a94 <HAL_ETH_WritePHYRegister+0xa4>)
 8006a52:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Write the result value into the MII Address register */
  WRITE_REG(ETH->MACMDIOAR, tmpreg);
 8006a56:	4a0f      	ldr	r2, [pc, #60]	; (8006a94 <HAL_ETH_WritePHYRegister+0xa4>)
 8006a58:	697b      	ldr	r3, [r7, #20]
 8006a5a:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

  tickstart = HAL_GetTick();
 8006a5e:	f7fd fba5 	bl	80041ac <HAL_GetTick>
 8006a62:	6138      	str	r0, [r7, #16]

  /* Wait for the Busy flag */
  while (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 8006a64:	e009      	b.n	8006a7a <HAL_ETH_WritePHYRegister+0x8a>
  {
    if (((HAL_GetTick() - tickstart) > ETH_MDIO_BUS_TIMEOUT))
 8006a66:	f7fd fba1 	bl	80041ac <HAL_GetTick>
 8006a6a:	4602      	mov	r2, r0
 8006a6c:	693b      	ldr	r3, [r7, #16]
 8006a6e:	1ad3      	subs	r3, r2, r3
 8006a70:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006a74:	d901      	bls.n	8006a7a <HAL_ETH_WritePHYRegister+0x8a>
    {
      return HAL_ERROR;
 8006a76:	2301      	movs	r3, #1
 8006a78:	e008      	b.n	8006a8c <HAL_ETH_WritePHYRegister+0x9c>
  while (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8006a82:	f003 0301 	and.w	r3, r3, #1
 8006a86:	2b00      	cmp	r3, #0
 8006a88:	d1ed      	bne.n	8006a66 <HAL_ETH_WritePHYRegister+0x76>
    }
  }

  return HAL_OK;
 8006a8a:	2300      	movs	r3, #0
}
 8006a8c:	4618      	mov	r0, r3
 8006a8e:	3718      	adds	r7, #24
 8006a90:	46bd      	mov	sp, r7
 8006a92:	bd80      	pop	{r7, pc}
 8006a94:	40028000 	.word	0x40028000

08006a98 <HAL_ETH_GetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that will hold
  *         the configuration of the MAC.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_ETH_GetMACConfig(ETH_HandleTypeDef *heth, ETH_MACConfigTypeDef *macconf)
{
 8006a98:	b480      	push	{r7}
 8006a9a:	b083      	sub	sp, #12
 8006a9c:	af00      	add	r7, sp, #0
 8006a9e:	6078      	str	r0, [r7, #4]
 8006aa0:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 8006aa2:	683b      	ldr	r3, [r7, #0]
 8006aa4:	2b00      	cmp	r3, #0
 8006aa6:	d101      	bne.n	8006aac <HAL_ETH_GetMACConfig+0x14>
  {
    return HAL_ERROR;
 8006aa8:	2301      	movs	r3, #1
 8006aaa:	e1c3      	b.n	8006e34 <HAL_ETH_GetMACConfig+0x39c>
  }

  /* Get MAC parameters */
  macconf->PreambleLength = READ_BIT(heth->Instance->MACCR, ETH_MACCR_PRELEN);
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	f003 020c 	and.w	r2, r3, #12
 8006ab6:	683b      	ldr	r3, [r7, #0]
 8006ab8:	62da      	str	r2, [r3, #44]	; 0x2c
  macconf->DeferralCheck = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DC) >> 4) > 0U) ? ENABLE : DISABLE;
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	f003 0310 	and.w	r3, r3, #16
 8006ac4:	2b00      	cmp	r3, #0
 8006ac6:	bf14      	ite	ne
 8006ac8:	2301      	movne	r3, #1
 8006aca:	2300      	moveq	r3, #0
 8006acc:	b2db      	uxtb	r3, r3
 8006ace:	461a      	mov	r2, r3
 8006ad0:	683b      	ldr	r3, [r7, #0]
 8006ad2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  macconf->BackOffLimit = READ_BIT(heth->Instance->MACCR, ETH_MACCR_BL);
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	f003 0260 	and.w	r2, r3, #96	; 0x60
 8006ae0:	683b      	ldr	r3, [r7, #0]
 8006ae2:	625a      	str	r2, [r3, #36]	; 0x24
  macconf->RetryTransmission = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DR) >> 8) == 0U) ? ENABLE : DISABLE;
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006aee:	2b00      	cmp	r3, #0
 8006af0:	bf0c      	ite	eq
 8006af2:	2301      	moveq	r3, #1
 8006af4:	2300      	movne	r3, #0
 8006af6:	b2db      	uxtb	r3, r3
 8006af8:	461a      	mov	r2, r3
 8006afa:	683b      	ldr	r3, [r7, #0]
 8006afc:	f883 2020 	strb.w	r2, [r3, #32]
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DCRS) >> 9) > 0U)
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	f403 7300 	and.w	r3, r3, #512	; 0x200
                                        ? ENABLE : DISABLE;
 8006b0a:	2b00      	cmp	r3, #0
 8006b0c:	bf14      	ite	ne
 8006b0e:	2301      	movne	r3, #1
 8006b10:	2300      	moveq	r3, #0
 8006b12:	b2db      	uxtb	r3, r3
 8006b14:	461a      	mov	r2, r3
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DCRS) >> 9) > 0U)
 8006b16:	683b      	ldr	r3, [r7, #0]
 8006b18:	77da      	strb	r2, [r3, #31]
  macconf->ReceiveOwn = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DO) >> 10) == 0U) ? ENABLE : DISABLE;
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006b24:	2b00      	cmp	r3, #0
 8006b26:	bf0c      	ite	eq
 8006b28:	2301      	moveq	r3, #1
 8006b2a:	2300      	movne	r3, #0
 8006b2c:	b2db      	uxtb	r3, r3
 8006b2e:	461a      	mov	r2, r3
 8006b30:	683b      	ldr	r3, [r7, #0]
 8006b32:	779a      	strb	r2, [r3, #30]
  macconf->CarrierSenseBeforeTransmit = ((READ_BIT(heth->Instance->MACCR,
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	681b      	ldr	r3, [r3, #0]
                                                   ETH_MACCR_ECRSFD) >> 11) > 0U) ? ENABLE : DISABLE;
 8006b3a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006b3e:	2b00      	cmp	r3, #0
 8006b40:	bf14      	ite	ne
 8006b42:	2301      	movne	r3, #1
 8006b44:	2300      	moveq	r3, #0
 8006b46:	b2db      	uxtb	r3, r3
 8006b48:	461a      	mov	r2, r3
  macconf->CarrierSenseBeforeTransmit = ((READ_BIT(heth->Instance->MACCR,
 8006b4a:	683b      	ldr	r3, [r7, #0]
 8006b4c:	775a      	strb	r2, [r3, #29]
  macconf->LoopbackMode = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_LM) >> 12) > 0U) ? ENABLE : DISABLE;
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006b58:	2b00      	cmp	r3, #0
 8006b5a:	bf14      	ite	ne
 8006b5c:	2301      	movne	r3, #1
 8006b5e:	2300      	moveq	r3, #0
 8006b60:	b2db      	uxtb	r3, r3
 8006b62:	461a      	mov	r2, r3
 8006b64:	683b      	ldr	r3, [r7, #0]
 8006b66:	771a      	strb	r2, [r3, #28]
  macconf->DuplexMode = READ_BIT(heth->Instance->MACCR, ETH_MACCR_DM);
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8006b72:	683b      	ldr	r3, [r7, #0]
 8006b74:	619a      	str	r2, [r3, #24]
  macconf->Speed = READ_BIT(heth->Instance->MACCR, ETH_MACCR_FES);
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	f403 4280 	and.w	r2, r3, #16384	; 0x4000
 8006b80:	683b      	ldr	r3, [r7, #0]
 8006b82:	615a      	str	r2, [r3, #20]
  macconf->JumboPacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JE) >> 16) > 0U) ? ENABLE : DISABLE;
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006b8e:	2b00      	cmp	r3, #0
 8006b90:	bf14      	ite	ne
 8006b92:	2301      	movne	r3, #1
 8006b94:	2300      	moveq	r3, #0
 8006b96:	b2db      	uxtb	r3, r3
 8006b98:	461a      	mov	r2, r3
 8006b9a:	683b      	ldr	r3, [r7, #0]
 8006b9c:	749a      	strb	r2, [r3, #18]
  macconf->Jabber = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JD) >> 17) == 0U) ? ENABLE : DISABLE;
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006ba8:	2b00      	cmp	r3, #0
 8006baa:	bf0c      	ite	eq
 8006bac:	2301      	moveq	r3, #1
 8006bae:	2300      	movne	r3, #0
 8006bb0:	b2db      	uxtb	r3, r3
 8006bb2:	461a      	mov	r2, r3
 8006bb4:	683b      	ldr	r3, [r7, #0]
 8006bb6:	745a      	strb	r2, [r3, #17]
  macconf->Watchdog = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_WD) >> 19) == 0U) ? ENABLE : DISABLE;
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006bc2:	2b00      	cmp	r3, #0
 8006bc4:	bf0c      	ite	eq
 8006bc6:	2301      	moveq	r3, #1
 8006bc8:	2300      	movne	r3, #0
 8006bca:	b2db      	uxtb	r3, r3
 8006bcc:	461a      	mov	r2, r3
 8006bce:	683b      	ldr	r3, [r7, #0]
 8006bd0:	741a      	strb	r2, [r3, #16]
  macconf->AutomaticPadCRCStrip = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ACS) >> 20) > 0U) ? ENABLE : DISABLE;
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006bdc:	2b00      	cmp	r3, #0
 8006bde:	bf14      	ite	ne
 8006be0:	2301      	movne	r3, #1
 8006be2:	2300      	moveq	r3, #0
 8006be4:	b2db      	uxtb	r3, r3
 8006be6:	461a      	mov	r2, r3
 8006be8:	683b      	ldr	r3, [r7, #0]
 8006bea:	73da      	strb	r2, [r3, #15]
  macconf->CRCStripTypePacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CST) >> 21) > 0U) ? ENABLE : DISABLE;
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	681b      	ldr	r3, [r3, #0]
 8006bf2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006bf6:	2b00      	cmp	r3, #0
 8006bf8:	bf14      	ite	ne
 8006bfa:	2301      	movne	r3, #1
 8006bfc:	2300      	moveq	r3, #0
 8006bfe:	b2db      	uxtb	r3, r3
 8006c00:	461a      	mov	r2, r3
 8006c02:	683b      	ldr	r3, [r7, #0]
 8006c04:	739a      	strb	r2, [r3, #14]
  macconf->Support2KPacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_S2KP) >> 22) > 0U) ? ENABLE : DISABLE;
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006c10:	2b00      	cmp	r3, #0
 8006c12:	bf14      	ite	ne
 8006c14:	2301      	movne	r3, #1
 8006c16:	2300      	moveq	r3, #0
 8006c18:	b2db      	uxtb	r3, r3
 8006c1a:	461a      	mov	r2, r3
 8006c1c:	683b      	ldr	r3, [r7, #0]
 8006c1e:	735a      	strb	r2, [r3, #13]
  macconf->GiantPacketSizeLimitControl = ((READ_BIT(heth->Instance->MACCR,
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	681b      	ldr	r3, [r3, #0]
                                                    ETH_MACCR_GPSLCE) >> 23) > 0U) ? ENABLE : DISABLE;
 8006c26:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006c2a:	2b00      	cmp	r3, #0
 8006c2c:	bf14      	ite	ne
 8006c2e:	2301      	movne	r3, #1
 8006c30:	2300      	moveq	r3, #0
 8006c32:	b2db      	uxtb	r3, r3
 8006c34:	461a      	mov	r2, r3
  macconf->GiantPacketSizeLimitControl = ((READ_BIT(heth->Instance->MACCR,
 8006c36:	683b      	ldr	r3, [r7, #0]
 8006c38:	731a      	strb	r2, [r3, #12]
  macconf->InterPacketGapVal = READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPG);
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	f003 62e0 	and.w	r2, r3, #117440512	; 0x7000000
 8006c44:	683b      	ldr	r3, [r7, #0]
 8006c46:	609a      	str	r2, [r3, #8]
  macconf->ChecksumOffload = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPC) >> 27) > 0U) ? ENABLE : DISABLE;
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006c52:	2b00      	cmp	r3, #0
 8006c54:	bf14      	ite	ne
 8006c56:	2301      	movne	r3, #1
 8006c58:	2300      	moveq	r3, #0
 8006c5a:	b2db      	uxtb	r3, r3
 8006c5c:	461a      	mov	r2, r3
 8006c5e:	683b      	ldr	r3, [r7, #0]
 8006c60:	711a      	strb	r2, [r3, #4]
  macconf->SourceAddrControl = READ_BIT(heth->Instance->MACCR, ETH_MACCR_SARC);
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8006c6c:	683b      	ldr	r3, [r7, #0]
 8006c6e:	601a      	str	r2, [r3, #0]

  macconf->GiantPacketSizeLimit = READ_BIT(heth->Instance->MACECR, ETH_MACECR_GPSL);
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	685b      	ldr	r3, [r3, #4]
 8006c76:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8006c7a:	683b      	ldr	r3, [r7, #0]
 8006c7c:	635a      	str	r2, [r3, #52]	; 0x34
  macconf->CRCCheckingRxPackets = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_DCRCC) >> 16) == 0U) ? ENABLE : DISABLE;
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	685b      	ldr	r3, [r3, #4]
 8006c84:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006c88:	2b00      	cmp	r3, #0
 8006c8a:	bf0c      	ite	eq
 8006c8c:	2301      	moveq	r3, #1
 8006c8e:	2300      	movne	r3, #0
 8006c90:	b2db      	uxtb	r3, r3
 8006c92:	461a      	mov	r2, r3
 8006c94:	683b      	ldr	r3, [r7, #0]
 8006c96:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
  macconf->SlowProtocolDetect = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_SPEN) >> 17) > 0U) ? ENABLE : DISABLE;
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	685b      	ldr	r3, [r3, #4]
 8006ca0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006ca4:	2b00      	cmp	r3, #0
 8006ca6:	bf14      	ite	ne
 8006ca8:	2301      	movne	r3, #1
 8006caa:	2300      	moveq	r3, #0
 8006cac:	b2db      	uxtb	r3, r3
 8006cae:	461a      	mov	r2, r3
 8006cb0:	683b      	ldr	r3, [r7, #0]
 8006cb2:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
  macconf->UnicastSlowProtocolPacketDetect = ((READ_BIT(heth->Instance->MACECR,
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	685b      	ldr	r3, [r3, #4]
                                                        ETH_MACECR_USP) >> 18) > 0U) ? ENABLE : DISABLE;
 8006cbc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006cc0:	2b00      	cmp	r3, #0
 8006cc2:	bf14      	ite	ne
 8006cc4:	2301      	movne	r3, #1
 8006cc6:	2300      	moveq	r3, #0
 8006cc8:	b2db      	uxtb	r3, r3
 8006cca:	461a      	mov	r2, r3
  macconf->UnicastSlowProtocolPacketDetect = ((READ_BIT(heth->Instance->MACECR,
 8006ccc:	683b      	ldr	r3, [r7, #0]
 8006cce:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  macconf->ExtendedInterPacketGap = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_EIPGEN) >> 24) > 0U)
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	685b      	ldr	r3, [r3, #4]
 8006cd8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
                                    ? ENABLE : DISABLE;
 8006cdc:	2b00      	cmp	r3, #0
 8006cde:	bf14      	ite	ne
 8006ce0:	2301      	movne	r3, #1
 8006ce2:	2300      	moveq	r3, #0
 8006ce4:	b2db      	uxtb	r3, r3
 8006ce6:	461a      	mov	r2, r3
  macconf->ExtendedInterPacketGap = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_EIPGEN) >> 24) > 0U)
 8006ce8:	683b      	ldr	r3, [r7, #0]
 8006cea:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  macconf->ExtendedInterPacketGapVal = READ_BIT(heth->Instance->MACECR, ETH_MACECR_EIPG) >> 25;
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	685b      	ldr	r3, [r3, #4]
 8006cf4:	0e5b      	lsrs	r3, r3, #25
 8006cf6:	f003 021f 	and.w	r2, r3, #31
 8006cfa:	683b      	ldr	r3, [r7, #0]
 8006cfc:	63da      	str	r2, [r3, #60]	; 0x3c


  macconf->ProgrammableWatchdog = ((READ_BIT(heth->Instance->MACWTR, ETH_MACWTR_PWE) >> 8) > 0U) ? ENABLE : DISABLE;
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	68db      	ldr	r3, [r3, #12]
 8006d04:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006d08:	2b00      	cmp	r3, #0
 8006d0a:	bf14      	ite	ne
 8006d0c:	2301      	movne	r3, #1
 8006d0e:	2300      	moveq	r3, #0
 8006d10:	b2db      	uxtb	r3, r3
 8006d12:	461a      	mov	r2, r3
 8006d14:	683b      	ldr	r3, [r7, #0]
 8006d16:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  macconf->WatchdogTimeout = READ_BIT(heth->Instance->MACWTR, ETH_MACWTR_WTO);
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	68db      	ldr	r3, [r3, #12]
 8006d20:	f003 020f 	and.w	r2, r3, #15
 8006d24:	683b      	ldr	r3, [r7, #0]
 8006d26:	645a      	str	r2, [r3, #68]	; 0x44

  macconf->TransmitFlowControl = ((READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_TFE) >> 1) > 0U) ? ENABLE : DISABLE;
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d2e:	f003 0302 	and.w	r3, r3, #2
 8006d32:	2b00      	cmp	r3, #0
 8006d34:	bf14      	ite	ne
 8006d36:	2301      	movne	r3, #1
 8006d38:	2300      	moveq	r3, #0
 8006d3a:	b2db      	uxtb	r3, r3
 8006d3c:	461a      	mov	r2, r3
 8006d3e:	683b      	ldr	r3, [r7, #0]
 8006d40:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  macconf->ZeroQuantaPause = ((READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_DZPQ) >> 7) == 0U) ? ENABLE : DISABLE;
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d4a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006d4e:	2b00      	cmp	r3, #0
 8006d50:	bf0c      	ite	eq
 8006d52:	2301      	moveq	r3, #1
 8006d54:	2300      	movne	r3, #0
 8006d56:	b2db      	uxtb	r3, r3
 8006d58:	461a      	mov	r2, r3
 8006d5a:	683b      	ldr	r3, [r7, #0]
 8006d5c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
  macconf->PauseLowThreshold = READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_PLT);
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d66:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8006d6a:	683b      	ldr	r3, [r7, #0]
 8006d6c:	651a      	str	r2, [r3, #80]	; 0x50
  macconf->PauseTime = (READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_PT) >> 16);
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006d74:	0c1b      	lsrs	r3, r3, #16
 8006d76:	b29a      	uxth	r2, r3
 8006d78:	683b      	ldr	r3, [r7, #0]
 8006d7a:	649a      	str	r2, [r3, #72]	; 0x48


  macconf->ReceiveFlowControl = (READ_BIT(heth->Instance->MACRFCR, ETH_MACRFCR_RFE) > 0U) ? ENABLE : DISABLE;
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006d84:	f003 0301 	and.w	r3, r3, #1
 8006d88:	2b00      	cmp	r3, #0
 8006d8a:	bf14      	ite	ne
 8006d8c:	2301      	movne	r3, #1
 8006d8e:	2300      	moveq	r3, #0
 8006d90:	b2db      	uxtb	r3, r3
 8006d92:	461a      	mov	r2, r3
 8006d94:	683b      	ldr	r3, [r7, #0]
 8006d96:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACRFCR, ETH_MACRFCR_UP) >> 1) > 0U)
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006da2:	f003 0302 	and.w	r3, r3, #2
                                      ? ENABLE : DISABLE;
 8006da6:	2b00      	cmp	r3, #0
 8006da8:	bf14      	ite	ne
 8006daa:	2301      	movne	r3, #1
 8006dac:	2300      	moveq	r3, #0
 8006dae:	b2db      	uxtb	r3, r3
 8006db0:	461a      	mov	r2, r3
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACRFCR, ETH_MACRFCR_UP) >> 1) > 0U)
 8006db2:	683b      	ldr	r3, [r7, #0]
 8006db4:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55

  macconf->TransmitQueueMode = READ_BIT(heth->Instance->MTLTQOMR, (ETH_MTLTQOMR_TTC | ETH_MTLTQOMR_TSF));
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 8006dc0:	f003 0272 	and.w	r2, r3, #114	; 0x72
 8006dc4:	683b      	ldr	r3, [r7, #0]
 8006dc6:	659a      	str	r2, [r3, #88]	; 0x58

  macconf->ReceiveQueueMode = READ_BIT(heth->Instance->MTLRQOMR, (ETH_MTLRQOMR_RTC | ETH_MTLRQOMR_RSF));
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 8006dd0:	f003 0223 	and.w	r2, r3, #35	; 0x23
 8006dd4:	683b      	ldr	r3, [r7, #0]
 8006dd6:	65da      	str	r2, [r3, #92]	; 0x5c
  macconf->ForwardRxUndersizedGoodPacket = ((READ_BIT(heth->Instance->MTLRQOMR,
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
                                                      ETH_MTLRQOMR_FUP) >> 3) > 0U) ? ENABLE : DISABLE;
 8006de0:	f003 0308 	and.w	r3, r3, #8
 8006de4:	2b00      	cmp	r3, #0
 8006de6:	bf14      	ite	ne
 8006de8:	2301      	movne	r3, #1
 8006dea:	2300      	moveq	r3, #0
 8006dec:	b2db      	uxtb	r3, r3
 8006dee:	461a      	mov	r2, r3
  macconf->ForwardRxUndersizedGoodPacket = ((READ_BIT(heth->Instance->MTLRQOMR,
 8006df0:	683b      	ldr	r3, [r7, #0]
 8006df2:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
  macconf->ForwardRxErrorPacket = ((READ_BIT(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_FEP) >> 4) > 0U) ? ENABLE : DISABLE;
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 8006dfe:	f003 0310 	and.w	r3, r3, #16
 8006e02:	2b00      	cmp	r3, #0
 8006e04:	bf14      	ite	ne
 8006e06:	2301      	movne	r3, #1
 8006e08:	2300      	moveq	r3, #0
 8006e0a:	b2db      	uxtb	r3, r3
 8006e0c:	461a      	mov	r2, r3
 8006e0e:	683b      	ldr	r3, [r7, #0]
 8006e10:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
  macconf->DropTCPIPChecksumErrorPacket = ((READ_BIT(heth->Instance->MTLRQOMR,
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
                                                     ETH_MTLRQOMR_DISTCPEF) >> 6) == 0U) ? ENABLE : DISABLE;
 8006e1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e20:	2b00      	cmp	r3, #0
 8006e22:	bf0c      	ite	eq
 8006e24:	2301      	moveq	r3, #1
 8006e26:	2300      	movne	r3, #0
 8006e28:	b2db      	uxtb	r3, r3
 8006e2a:	461a      	mov	r2, r3
  macconf->DropTCPIPChecksumErrorPacket = ((READ_BIT(heth->Instance->MTLRQOMR,
 8006e2c:	683b      	ldr	r3, [r7, #0]
 8006e2e:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

  return HAL_OK;
 8006e32:	2300      	movs	r3, #0
}
 8006e34:	4618      	mov	r0, r3
 8006e36:	370c      	adds	r7, #12
 8006e38:	46bd      	mov	sp, r7
 8006e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e3e:	4770      	bx	lr

08006e40 <HAL_ETH_SetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that contains
  *         the configuration of the MAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8006e40:	b580      	push	{r7, lr}
 8006e42:	b082      	sub	sp, #8
 8006e44:	af00      	add	r7, sp, #0
 8006e46:	6078      	str	r0, [r7, #4]
 8006e48:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 8006e4a:	683b      	ldr	r3, [r7, #0]
 8006e4c:	2b00      	cmp	r3, #0
 8006e4e:	d101      	bne.n	8006e54 <HAL_ETH_SetMACConfig+0x14>
  {
    return HAL_ERROR;
 8006e50:	2301      	movs	r3, #1
 8006e52:	e00b      	b.n	8006e6c <HAL_ETH_SetMACConfig+0x2c>
  }

  if (heth->gState == HAL_ETH_STATE_READY)
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006e5a:	2b10      	cmp	r3, #16
 8006e5c:	d105      	bne.n	8006e6a <HAL_ETH_SetMACConfig+0x2a>
  {
    ETH_SetMACConfig(heth, macconf);
 8006e5e:	6839      	ldr	r1, [r7, #0]
 8006e60:	6878      	ldr	r0, [r7, #4]
 8006e62:	f000 f85f 	bl	8006f24 <ETH_SetMACConfig>

    return HAL_OK;
 8006e66:	2300      	movs	r3, #0
 8006e68:	e000      	b.n	8006e6c <HAL_ETH_SetMACConfig+0x2c>
  }
  else
  {
    return HAL_ERROR;
 8006e6a:	2301      	movs	r3, #1
  }
}
 8006e6c:	4618      	mov	r0, r3
 8006e6e:	3708      	adds	r7, #8
 8006e70:	46bd      	mov	sp, r7
 8006e72:	bd80      	pop	{r7, pc}

08006e74 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 8006e74:	b580      	push	{r7, lr}
 8006e76:	b084      	sub	sp, #16
 8006e78:	af00      	add	r7, sp, #0
 8006e7a:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8006e84:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 8006e86:	68fb      	ldr	r3, [r7, #12]
 8006e88:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8006e8c:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8006e8e:	f003 fec3 	bl	800ac18 <HAL_RCC_GetHCLKFreq>
 8006e92:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if ((hclk >= 20000000U) && (hclk < 35000000U))
 8006e94:	68bb      	ldr	r3, [r7, #8]
 8006e96:	4a1e      	ldr	r2, [pc, #120]	; (8006f10 <HAL_ETH_SetMDIOClockRange+0x9c>)
 8006e98:	4293      	cmp	r3, r2
 8006e9a:	d908      	bls.n	8006eae <HAL_ETH_SetMDIOClockRange+0x3a>
 8006e9c:	68bb      	ldr	r3, [r7, #8]
 8006e9e:	4a1d      	ldr	r2, [pc, #116]	; (8006f14 <HAL_ETH_SetMDIOClockRange+0xa0>)
 8006ea0:	4293      	cmp	r3, r2
 8006ea2:	d804      	bhi.n	8006eae <HAL_ETH_SetMDIOClockRange+0x3a>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 8006ea4:	68fb      	ldr	r3, [r7, #12]
 8006ea6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006eaa:	60fb      	str	r3, [r7, #12]
 8006eac:	e027      	b.n	8006efe <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if ((hclk >= 35000000U) && (hclk < 60000000U))
 8006eae:	68bb      	ldr	r3, [r7, #8]
 8006eb0:	4a18      	ldr	r2, [pc, #96]	; (8006f14 <HAL_ETH_SetMDIOClockRange+0xa0>)
 8006eb2:	4293      	cmp	r3, r2
 8006eb4:	d908      	bls.n	8006ec8 <HAL_ETH_SetMDIOClockRange+0x54>
 8006eb6:	68bb      	ldr	r3, [r7, #8]
 8006eb8:	4a17      	ldr	r2, [pc, #92]	; (8006f18 <HAL_ETH_SetMDIOClockRange+0xa4>)
 8006eba:	4293      	cmp	r3, r2
 8006ebc:	d204      	bcs.n	8006ec8 <HAL_ETH_SetMDIOClockRange+0x54>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 8006ebe:	68fb      	ldr	r3, [r7, #12]
 8006ec0:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8006ec4:	60fb      	str	r3, [r7, #12]
 8006ec6:	e01a      	b.n	8006efe <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if ((hclk >= 60000000U) && (hclk < 100000000U))
 8006ec8:	68bb      	ldr	r3, [r7, #8]
 8006eca:	4a13      	ldr	r2, [pc, #76]	; (8006f18 <HAL_ETH_SetMDIOClockRange+0xa4>)
 8006ecc:	4293      	cmp	r3, r2
 8006ece:	d303      	bcc.n	8006ed8 <HAL_ETH_SetMDIOClockRange+0x64>
 8006ed0:	68bb      	ldr	r3, [r7, #8]
 8006ed2:	4a12      	ldr	r2, [pc, #72]	; (8006f1c <HAL_ETH_SetMDIOClockRange+0xa8>)
 8006ed4:	4293      	cmp	r3, r2
 8006ed6:	d911      	bls.n	8006efc <HAL_ETH_SetMDIOClockRange+0x88>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if ((hclk >= 100000000U) && (hclk < 150000000U))
 8006ed8:	68bb      	ldr	r3, [r7, #8]
 8006eda:	4a10      	ldr	r2, [pc, #64]	; (8006f1c <HAL_ETH_SetMDIOClockRange+0xa8>)
 8006edc:	4293      	cmp	r3, r2
 8006ede:	d908      	bls.n	8006ef2 <HAL_ETH_SetMDIOClockRange+0x7e>
 8006ee0:	68bb      	ldr	r3, [r7, #8]
 8006ee2:	4a0f      	ldr	r2, [pc, #60]	; (8006f20 <HAL_ETH_SetMDIOClockRange+0xac>)
 8006ee4:	4293      	cmp	r3, r2
 8006ee6:	d804      	bhi.n	8006ef2 <HAL_ETH_SetMDIOClockRange+0x7e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 8006ee8:	68fb      	ldr	r3, [r7, #12]
 8006eea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006eee:	60fb      	str	r3, [r7, #12]
 8006ef0:	e005      	b.n	8006efe <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else /* (hclk >= 150000000)&&(hclk <= 200000000) */
  {
    /* CSR Clock Range between 150-200 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 8006ef2:	68fb      	ldr	r3, [r7, #12]
 8006ef4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8006ef8:	60fb      	str	r3, [r7, #12]
 8006efa:	e000      	b.n	8006efe <HAL_ETH_SetMDIOClockRange+0x8a>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
 8006efc:	bf00      	nop
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	68fa      	ldr	r2, [r7, #12]
 8006f04:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 8006f08:	bf00      	nop
 8006f0a:	3710      	adds	r7, #16
 8006f0c:	46bd      	mov	sp, r7
 8006f0e:	bd80      	pop	{r7, pc}
 8006f10:	01312cff 	.word	0x01312cff
 8006f14:	02160ebf 	.word	0x02160ebf
 8006f18:	03938700 	.word	0x03938700
 8006f1c:	05f5e0ff 	.word	0x05f5e0ff
 8006f20:	08f0d17f 	.word	0x08f0d17f

08006f24 <ETH_SetMACConfig>:
  * @{
  */


static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8006f24:	b480      	push	{r7}
 8006f26:	b085      	sub	sp, #20
 8006f28:	af00      	add	r7, sp, #0
 8006f2a:	6078      	str	r0, [r7, #4]
 8006f2c:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval = (macconf->InterPacketGapVal |
 8006f2e:	683b      	ldr	r3, [r7, #0]
 8006f30:	689a      	ldr	r2, [r3, #8]
               macconf->SourceAddrControl |
 8006f32:	683b      	ldr	r3, [r7, #0]
 8006f34:	681b      	ldr	r3, [r3, #0]
  macregval = (macconf->InterPacketGapVal |
 8006f36:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ChecksumOffload << 27) |
 8006f38:	683b      	ldr	r3, [r7, #0]
 8006f3a:	791b      	ldrb	r3, [r3, #4]
 8006f3c:	06db      	lsls	r3, r3, #27
               macconf->SourceAddrControl |
 8006f3e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8006f40:	683b      	ldr	r3, [r7, #0]
 8006f42:	7b1b      	ldrb	r3, [r3, #12]
 8006f44:	05db      	lsls	r3, r3, #23
               ((uint32_t)macconf->ChecksumOffload << 27) |
 8006f46:	431a      	orrs	r2, r3
               ((uint32_t)macconf->Support2KPacket  << 22) |
 8006f48:	683b      	ldr	r3, [r7, #0]
 8006f4a:	7b5b      	ldrb	r3, [r3, #13]
 8006f4c:	059b      	lsls	r3, r3, #22
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8006f4e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8006f50:	683b      	ldr	r3, [r7, #0]
 8006f52:	7b9b      	ldrb	r3, [r3, #14]
 8006f54:	055b      	lsls	r3, r3, #21
               ((uint32_t)macconf->Support2KPacket  << 22) |
 8006f56:	431a      	orrs	r2, r3
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8006f58:	683b      	ldr	r3, [r7, #0]
 8006f5a:	7bdb      	ldrb	r3, [r3, #15]
 8006f5c:	051b      	lsls	r3, r3, #20
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8006f5e:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8006f60:	683a      	ldr	r2, [r7, #0]
 8006f62:	7c12      	ldrb	r2, [r2, #16]
 8006f64:	2a00      	cmp	r2, #0
 8006f66:	d102      	bne.n	8006f6e <ETH_SetMACConfig+0x4a>
 8006f68:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8006f6c:	e000      	b.n	8006f70 <ETH_SetMACConfig+0x4c>
 8006f6e:	2200      	movs	r2, #0
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8006f70:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8006f72:	683a      	ldr	r2, [r7, #0]
 8006f74:	7c52      	ldrb	r2, [r2, #17]
 8006f76:	2a00      	cmp	r2, #0
 8006f78:	d102      	bne.n	8006f80 <ETH_SetMACConfig+0x5c>
 8006f7a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8006f7e:	e000      	b.n	8006f82 <ETH_SetMACConfig+0x5e>
 8006f80:	2200      	movs	r2, #0
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8006f82:	431a      	orrs	r2, r3
               ((uint32_t)macconf->JumboPacket << 16) |
 8006f84:	683b      	ldr	r3, [r7, #0]
 8006f86:	7c9b      	ldrb	r3, [r3, #18]
 8006f88:	041b      	lsls	r3, r3, #16
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8006f8a:	431a      	orrs	r2, r3
               macconf->Speed |
 8006f8c:	683b      	ldr	r3, [r7, #0]
 8006f8e:	695b      	ldr	r3, [r3, #20]
               ((uint32_t)macconf->JumboPacket << 16) |
 8006f90:	431a      	orrs	r2, r3
               macconf->DuplexMode |
 8006f92:	683b      	ldr	r3, [r7, #0]
 8006f94:	699b      	ldr	r3, [r3, #24]
               macconf->Speed |
 8006f96:	431a      	orrs	r2, r3
               ((uint32_t)macconf->LoopbackMode << 12) |
 8006f98:	683b      	ldr	r3, [r7, #0]
 8006f9a:	7f1b      	ldrb	r3, [r3, #28]
 8006f9c:	031b      	lsls	r3, r3, #12
               macconf->DuplexMode |
 8006f9e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8006fa0:	683b      	ldr	r3, [r7, #0]
 8006fa2:	7f5b      	ldrb	r3, [r3, #29]
 8006fa4:	02db      	lsls	r3, r3, #11
               ((uint32_t)macconf->LoopbackMode << 12) |
 8006fa6:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8006fa8:	683a      	ldr	r2, [r7, #0]
 8006faa:	7f92      	ldrb	r2, [r2, #30]
 8006fac:	2a00      	cmp	r2, #0
 8006fae:	d102      	bne.n	8006fb6 <ETH_SetMACConfig+0x92>
 8006fb0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006fb4:	e000      	b.n	8006fb8 <ETH_SetMACConfig+0x94>
 8006fb6:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8006fb8:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 8006fba:	683b      	ldr	r3, [r7, #0]
 8006fbc:	7fdb      	ldrb	r3, [r3, #31]
 8006fbe:	025b      	lsls	r3, r3, #9
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8006fc0:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 8006fc2:	683a      	ldr	r2, [r7, #0]
 8006fc4:	f892 2020 	ldrb.w	r2, [r2, #32]
 8006fc8:	2a00      	cmp	r2, #0
 8006fca:	d102      	bne.n	8006fd2 <ETH_SetMACConfig+0xae>
 8006fcc:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006fd0:	e000      	b.n	8006fd4 <ETH_SetMACConfig+0xb0>
 8006fd2:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 8006fd4:	431a      	orrs	r2, r3
               macconf->BackOffLimit |
 8006fd6:	683b      	ldr	r3, [r7, #0]
 8006fd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 8006fda:	431a      	orrs	r2, r3
               ((uint32_t)macconf->DeferralCheck << 4) |
 8006fdc:	683b      	ldr	r3, [r7, #0]
 8006fde:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006fe2:	011b      	lsls	r3, r3, #4
               macconf->BackOffLimit |
 8006fe4:	431a      	orrs	r2, r3
               macconf->PreambleLength);
 8006fe6:	683b      	ldr	r3, [r7, #0]
 8006fe8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  macregval = (macconf->InterPacketGapVal |
 8006fea:	4313      	orrs	r3, r2
 8006fec:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	681a      	ldr	r2, [r3, #0]
 8006ff4:	4b56      	ldr	r3, [pc, #344]	; (8007150 <ETH_SetMACConfig+0x22c>)
 8006ff6:	4013      	ands	r3, r2
 8006ff8:	687a      	ldr	r2, [r7, #4]
 8006ffa:	6812      	ldr	r2, [r2, #0]
 8006ffc:	68f9      	ldr	r1, [r7, #12]
 8006ffe:	430b      	orrs	r3, r1
 8007000:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8007002:	683b      	ldr	r3, [r7, #0]
 8007004:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007006:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 8007008:	683b      	ldr	r3, [r7, #0]
 800700a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800700e:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8007010:	431a      	orrs	r2, r3
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 8007012:	683b      	ldr	r3, [r7, #0]
 8007014:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8007018:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 800701a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 800701c:	683b      	ldr	r3, [r7, #0]
 800701e:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8007022:	045b      	lsls	r3, r3, #17
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 8007024:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U) << 16) |
 8007026:	683a      	ldr	r2, [r7, #0]
 8007028:	f892 2032 	ldrb.w	r2, [r2, #50]	; 0x32
 800702c:	2a00      	cmp	r2, #0
 800702e:	d102      	bne.n	8007036 <ETH_SetMACConfig+0x112>
 8007030:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8007034:	e000      	b.n	8007038 <ETH_SetMACConfig+0x114>
 8007036:	2200      	movs	r2, #0
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8007038:	431a      	orrs	r2, r3
               macconf->GiantPacketSizeLimit);
 800703a:	683b      	ldr	r3, [r7, #0]
 800703c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 800703e:	4313      	orrs	r3, r2
 8007040:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	685a      	ldr	r2, [r3, #4]
 8007048:	4b42      	ldr	r3, [pc, #264]	; (8007154 <ETH_SetMACConfig+0x230>)
 800704a:	4013      	ands	r3, r2
 800704c:	687a      	ldr	r2, [r7, #4]
 800704e:	6812      	ldr	r2, [r2, #0]
 8007050:	68f9      	ldr	r1, [r7, #12]
 8007052:	430b      	orrs	r3, r1
 8007054:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8007056:	683b      	ldr	r3, [r7, #0]
 8007058:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800705c:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 800705e:	683b      	ldr	r3, [r7, #0]
 8007060:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8007062:	4313      	orrs	r3, r2
 8007064:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	68da      	ldr	r2, [r3, #12]
 800706c:	4b3a      	ldr	r3, [pc, #232]	; (8007158 <ETH_SetMACConfig+0x234>)
 800706e:	4013      	ands	r3, r2
 8007070:	687a      	ldr	r2, [r7, #4]
 8007072:	6812      	ldr	r2, [r2, #0]
 8007074:	68f9      	ldr	r1, [r7, #12]
 8007076:	430b      	orrs	r3, r1
 8007078:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 800707a:	683b      	ldr	r3, [r7, #0]
 800707c:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8007080:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 8007082:	683b      	ldr	r3, [r7, #0]
 8007084:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8007086:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7) |
 8007088:	683a      	ldr	r2, [r7, #0]
 800708a:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 800708e:	2a00      	cmp	r2, #0
 8007090:	d101      	bne.n	8007096 <ETH_SetMACConfig+0x172>
 8007092:	2280      	movs	r2, #128	; 0x80
 8007094:	e000      	b.n	8007098 <ETH_SetMACConfig+0x174>
 8007096:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 8007098:	431a      	orrs	r2, r3
               (macconf->PauseTime << 16));
 800709a:	683b      	ldr	r3, [r7, #0]
 800709c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800709e:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 80070a0:	4313      	orrs	r3, r2
 80070a2:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80070aa:	f64f 730d 	movw	r3, #65293	; 0xff0d
 80070ae:	4013      	ands	r3, r2
 80070b0:	687a      	ldr	r2, [r7, #4]
 80070b2:	6812      	ldr	r2, [r2, #0]
 80070b4:	68f9      	ldr	r1, [r7, #12]
 80070b6:	430b      	orrs	r3, r1
 80070b8:	6713      	str	r3, [r2, #112]	; 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 80070ba:	683b      	ldr	r3, [r7, #0]
 80070bc:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 80070c0:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 80070c2:	683b      	ldr	r3, [r7, #0]
 80070c4:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 80070c8:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 80070ca:	4313      	orrs	r3, r2
 80070cc:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	681b      	ldr	r3, [r3, #0]
 80070d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80070d6:	f023 0103 	bic.w	r1, r3, #3
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	68fa      	ldr	r2, [r7, #12]
 80070e0:	430a      	orrs	r2, r1
 80070e2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 80070ee:	f023 0172 	bic.w	r1, r3, #114	; 0x72
 80070f2:	683b      	ldr	r3, [r7, #0]
 80070f4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	430a      	orrs	r2, r1
 80070fc:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 8007100:	683b      	ldr	r3, [r7, #0]
 8007102:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8007104:	683a      	ldr	r2, [r7, #0]
 8007106:	f892 2060 	ldrb.w	r2, [r2, #96]	; 0x60
 800710a:	2a00      	cmp	r2, #0
 800710c:	d101      	bne.n	8007112 <ETH_SetMACConfig+0x1ee>
 800710e:	2240      	movs	r2, #64	; 0x40
 8007110:	e000      	b.n	8007114 <ETH_SetMACConfig+0x1f0>
 8007112:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 8007114:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 8007116:	683b      	ldr	r3, [r7, #0]
 8007118:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 800711c:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 800711e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 8007120:	683b      	ldr	r3, [r7, #0]
 8007122:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 8007126:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 8007128:	4313      	orrs	r3, r2
 800712a:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 8007134:	f023 017b 	bic.w	r1, r3, #123	; 0x7b
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	68fa      	ldr	r2, [r7, #12]
 800713e:	430a      	orrs	r2, r1
 8007140:	f8c3 2d30 	str.w	r2, [r3, #3376]	; 0xd30
}
 8007144:	bf00      	nop
 8007146:	3714      	adds	r7, #20
 8007148:	46bd      	mov	sp, r7
 800714a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800714e:	4770      	bx	lr
 8007150:	00048083 	.word	0x00048083
 8007154:	c0f88000 	.word	0xc0f88000
 8007158:	fffffef0 	.word	0xfffffef0

0800715c <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 800715c:	b480      	push	{r7}
 800715e:	b085      	sub	sp, #20
 8007160:	af00      	add	r7, sp, #0
 8007162:	6078      	str	r0, [r7, #4]
 8007164:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800716e:	681a      	ldr	r2, [r3, #0]
 8007170:	4b38      	ldr	r3, [pc, #224]	; (8007254 <ETH_SetDMAConfig+0xf8>)
 8007172:	4013      	ands	r3, r2
 8007174:	683a      	ldr	r2, [r7, #0]
 8007176:	6811      	ldr	r1, [r2, #0]
 8007178:	687a      	ldr	r2, [r7, #4]
 800717a:	6812      	ldr	r2, [r2, #0]
 800717c:	430b      	orrs	r3, r1
 800717e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8007182:	6013      	str	r3, [r2, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8007184:	683b      	ldr	r3, [r7, #0]
 8007186:	791b      	ldrb	r3, [r3, #4]
 8007188:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 800718a:	683b      	ldr	r3, [r7, #0]
 800718c:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 800718e:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 8007190:	683b      	ldr	r3, [r7, #0]
 8007192:	7b1b      	ldrb	r3, [r3, #12]
 8007194:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8007196:	4313      	orrs	r3, r2
 8007198:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80071a2:	685a      	ldr	r2, [r3, #4]
 80071a4:	4b2c      	ldr	r3, [pc, #176]	; (8007258 <ETH_SetDMAConfig+0xfc>)
 80071a6:	4013      	ands	r3, r2
 80071a8:	687a      	ldr	r2, [r7, #4]
 80071aa:	6812      	ldr	r2, [r2, #0]
 80071ac:	68f9      	ldr	r1, [r7, #12]
 80071ae:	430b      	orrs	r3, r1
 80071b0:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80071b4:	6053      	str	r3, [r2, #4]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 80071b6:	683b      	ldr	r3, [r7, #0]
 80071b8:	7b5b      	ldrb	r3, [r3, #13]
 80071ba:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 80071bc:	683b      	ldr	r3, [r7, #0]
 80071be:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 80071c0:	4313      	orrs	r3, r2
 80071c2:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80071cc:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
 80071d0:	4b22      	ldr	r3, [pc, #136]	; (800725c <ETH_SetDMAConfig+0x100>)
 80071d2:	4013      	ands	r3, r2
 80071d4:	687a      	ldr	r2, [r7, #4]
 80071d6:	6812      	ldr	r2, [r2, #0]
 80071d8:	68f9      	ldr	r1, [r7, #12]
 80071da:	430b      	orrs	r3, r1
 80071dc:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80071e0:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 80071e4:	683b      	ldr	r3, [r7, #0]
 80071e6:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4) |
 80071e8:	683b      	ldr	r3, [r7, #0]
 80071ea:	7d1b      	ldrb	r3, [r3, #20]
 80071ec:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 80071ee:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->TCPSegmentation << 12));
 80071f0:	683b      	ldr	r3, [r7, #0]
 80071f2:	7f5b      	ldrb	r3, [r3, #29]
 80071f4:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 80071f6:	4313      	orrs	r3, r2
 80071f8:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007202:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
 8007206:	4b16      	ldr	r3, [pc, #88]	; (8007260 <ETH_SetDMAConfig+0x104>)
 8007208:	4013      	ands	r3, r2
 800720a:	687a      	ldr	r2, [r7, #4]
 800720c:	6812      	ldr	r2, [r2, #0]
 800720e:	68f9      	ldr	r1, [r7, #12]
 8007210:	430b      	orrs	r3, r1
 8007212:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8007216:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 800721a:	683b      	ldr	r3, [r7, #0]
 800721c:	7f1b      	ldrb	r3, [r3, #28]
 800721e:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 8007220:	683b      	ldr	r3, [r7, #0]
 8007222:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8007224:	4313      	orrs	r3, r2
 8007226:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007230:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 8007234:	4b0b      	ldr	r3, [pc, #44]	; (8007264 <ETH_SetDMAConfig+0x108>)
 8007236:	4013      	ands	r3, r2
 8007238:	687a      	ldr	r2, [r7, #4]
 800723a:	6812      	ldr	r2, [r2, #0]
 800723c:	68f9      	ldr	r1, [r7, #12]
 800723e:	430b      	orrs	r3, r1
 8007240:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8007244:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
}
 8007248:	bf00      	nop
 800724a:	3714      	adds	r7, #20
 800724c:	46bd      	mov	sp, r7
 800724e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007252:	4770      	bx	lr
 8007254:	ffff87fd 	.word	0xffff87fd
 8007258:	ffff2ffe 	.word	0xffff2ffe
 800725c:	fffec000 	.word	0xfffec000
 8007260:	ffc0efef 	.word	0xffc0efef
 8007264:	7fc0ffff 	.word	0x7fc0ffff

08007268 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8007268:	b580      	push	{r7, lr}
 800726a:	b0a4      	sub	sp, #144	; 0x90
 800726c:	af00      	add	r7, sp, #0
 800726e:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 8007270:	2301      	movs	r3, #1
 8007272:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8007276:	2300      	movs	r3, #0
 8007278:	653b      	str	r3, [r7, #80]	; 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 800727a:	2300      	movs	r3, #0
 800727c:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8007280:	2300      	movs	r3, #0
 8007282:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 8007286:	2301      	movs	r3, #1
 8007288:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 800728c:	2301      	movs	r3, #1
 800728e:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 8007292:	2301      	movs	r3, #1
 8007294:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 8007298:	2300      	movs	r3, #0
 800729a:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 800729e:	2301      	movs	r3, #1
 80072a0:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 80072a4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80072a8:	647b      	str	r3, [r7, #68]	; 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 80072aa:	2300      	movs	r3, #0
 80072ac:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0;
 80072b0:	2300      	movs	r3, #0
 80072b2:	66bb      	str	r3, [r7, #104]	; 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 80072b4:	2300      	movs	r3, #0
 80072b6:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 80072ba:	2300      	movs	r3, #0
 80072bc:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618;
 80072c0:	f44f 63c3 	mov.w	r3, #1560	; 0x618
 80072c4:	663b      	str	r3, [r7, #96]	; 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 80072c6:	2300      	movs	r3, #0
 80072c8:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 80072cc:	2300      	movs	r3, #0
 80072ce:	637b      	str	r3, [r7, #52]	; 0x34
  macDefaultConf.Jabber = ENABLE;
 80072d0:	2301      	movs	r3, #1
 80072d2:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 80072d6:	2300      	movs	r3, #0
 80072d8:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 80072dc:	2300      	movs	r3, #0
 80072de:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 80072e2:	2300      	movs	r3, #0
 80072e4:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.PauseTime = 0x0;
 80072e6:	2300      	movs	r3, #0
 80072e8:	677b      	str	r3, [r7, #116]	; 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 80072ea:	2300      	movs	r3, #0
 80072ec:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 80072ee:	2300      	movs	r3, #0
 80072f0:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 80072f4:	2300      	movs	r3, #0
 80072f6:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 80072fa:	2301      	movs	r3, #1
 80072fc:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 8007300:	2320      	movs	r3, #32
 8007302:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 8007306:	2301      	movs	r3, #1
 8007308:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 800730c:	2300      	movs	r3, #0
 800730e:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 8007312:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 8007316:	62fb      	str	r3, [r7, #44]	; 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 8007318:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800731c:	643b      	str	r3, [r7, #64]	; 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 800731e:	2300      	movs	r3, #0
 8007320:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 8007324:	2302      	movs	r3, #2
 8007326:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 800732a:	2300      	movs	r3, #0
 800732c:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8007330:	2300      	movs	r3, #0
 8007332:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 8007336:	2300      	movs	r3, #0
 8007338:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.Watchdog = ENABLE;
 800733c:	2301      	movs	r3, #1
 800733e:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 8007342:	2300      	movs	r3, #0
 8007344:	673b      	str	r3, [r7, #112]	; 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 8007346:	2301      	movs	r3, #1
 8007348:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 800734c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8007350:	4619      	mov	r1, r3
 8007352:	6878      	ldr	r0, [r7, #4]
 8007354:	f7ff fde6 	bl	8006f24 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8007358:	2301      	movs	r3, #1
 800735a:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 800735c:	2301      	movs	r3, #1
 800735e:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 8007360:	2300      	movs	r3, #0
 8007362:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 8007364:	2300      	movs	r3, #0
 8007366:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 800736a:	2300      	movs	r3, #0
 800736c:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 800736e:	2300      	movs	r3, #0
 8007370:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8007372:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8007376:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 8007378:	2300      	movs	r3, #0
 800737a:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 800737c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8007380:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 8007382:	2300      	movs	r3, #0
 8007384:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.MaximumSegmentSize = ETH_SEGMENT_SIZE_DEFAULT;
 8007388:	f44f 7306 	mov.w	r3, #536	; 0x218
 800738c:	62bb      	str	r3, [r7, #40]	; 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 800738e:	f107 0308 	add.w	r3, r7, #8
 8007392:	4619      	mov	r1, r3
 8007394:	6878      	ldr	r0, [r7, #4]
 8007396:	f7ff fee1 	bl	800715c <ETH_SetDMAConfig>
}
 800739a:	bf00      	nop
 800739c:	3790      	adds	r7, #144	; 0x90
 800739e:	46bd      	mov	sp, r7
 80073a0:	bd80      	pop	{r7, pc}

080073a2 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 80073a2:	b480      	push	{r7}
 80073a4:	b085      	sub	sp, #20
 80073a6:	af00      	add	r7, sp, #0
 80073a8:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80073aa:	2300      	movs	r3, #0
 80073ac:	60fb      	str	r3, [r7, #12]
 80073ae:	e01d      	b.n	80073ec <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	68d9      	ldr	r1, [r3, #12]
 80073b4:	68fa      	ldr	r2, [r7, #12]
 80073b6:	4613      	mov	r3, r2
 80073b8:	005b      	lsls	r3, r3, #1
 80073ba:	4413      	add	r3, r2
 80073bc:	00db      	lsls	r3, r3, #3
 80073be:	440b      	add	r3, r1
 80073c0:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 80073c2:	68bb      	ldr	r3, [r7, #8]
 80073c4:	2200      	movs	r2, #0
 80073c6:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 80073c8:	68bb      	ldr	r3, [r7, #8]
 80073ca:	2200      	movs	r2, #0
 80073cc:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 80073ce:	68bb      	ldr	r3, [r7, #8]
 80073d0:	2200      	movs	r2, #0
 80073d2:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 80073d4:	68bb      	ldr	r3, [r7, #8]
 80073d6:	2200      	movs	r2, #0
 80073d8:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 80073da:	68b9      	ldr	r1, [r7, #8]
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	68fa      	ldr	r2, [r7, #12]
 80073e0:	3206      	adds	r2, #6
 80073e2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80073e6:	68fb      	ldr	r3, [r7, #12]
 80073e8:	3301      	adds	r3, #1
 80073ea:	60fb      	str	r3, [r7, #12]
 80073ec:	68fb      	ldr	r3, [r7, #12]
 80073ee:	2b03      	cmp	r3, #3
 80073f0:	d9de      	bls.n	80073b0 <ETH_DMATxDescListInit+0xe>

  }

  heth->TxDescList.CurTxDesc = 0;
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	2200      	movs	r2, #0
 80073f6:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT - 1U));
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007400:	461a      	mov	r2, r3
 8007402:	2303      	movs	r3, #3
 8007404:	f8c2 312c 	str.w	r3, [r2, #300]	; 0x12c

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	68da      	ldr	r2, [r3, #12]
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007414:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	68da      	ldr	r2, [r3, #12]
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8007424:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
}
 8007428:	bf00      	nop
 800742a:	3714      	adds	r7, #20
 800742c:	46bd      	mov	sp, r7
 800742e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007432:	4770      	bx	lr

08007434 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8007434:	b480      	push	{r7}
 8007436:	b085      	sub	sp, #20
 8007438:	af00      	add	r7, sp, #0
 800743a:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 800743c:	2300      	movs	r3, #0
 800743e:	60fb      	str	r3, [r7, #12]
 8007440:	e023      	b.n	800748a <ETH_DMARxDescListInit+0x56>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	6919      	ldr	r1, [r3, #16]
 8007446:	68fa      	ldr	r2, [r7, #12]
 8007448:	4613      	mov	r3, r2
 800744a:	005b      	lsls	r3, r3, #1
 800744c:	4413      	add	r3, r2
 800744e:	00db      	lsls	r3, r3, #3
 8007450:	440b      	add	r3, r1
 8007452:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8007454:	68bb      	ldr	r3, [r7, #8]
 8007456:	2200      	movs	r2, #0
 8007458:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 800745a:	68bb      	ldr	r3, [r7, #8]
 800745c:	2200      	movs	r2, #0
 800745e:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8007460:	68bb      	ldr	r3, [r7, #8]
 8007462:	2200      	movs	r2, #0
 8007464:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8007466:	68bb      	ldr	r3, [r7, #8]
 8007468:	2200      	movs	r2, #0
 800746a:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 800746c:	68bb      	ldr	r3, [r7, #8]
 800746e:	2200      	movs	r2, #0
 8007470:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8007472:	68bb      	ldr	r3, [r7, #8]
 8007474:	2200      	movs	r2, #0
 8007476:	615a      	str	r2, [r3, #20]


    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8007478:	68b9      	ldr	r1, [r7, #8]
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	68fa      	ldr	r2, [r7, #12]
 800747e:	3212      	adds	r2, #18
 8007480:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8007484:	68fb      	ldr	r3, [r7, #12]
 8007486:	3301      	adds	r3, #1
 8007488:	60fb      	str	r3, [r7, #12]
 800748a:	68fb      	ldr	r3, [r7, #12]
 800748c:	2b03      	cmp	r3, #3
 800748e:	d9d8      	bls.n	8007442 <ETH_DMARxDescListInit+0xe>

  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	2200      	movs	r2, #0
 8007494:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	2200      	movs	r2, #0
 800749a:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	2200      	movs	r2, #0
 80074a0:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	2200      	movs	r2, #0
 80074a6:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	2200      	movs	r2, #0
 80074ac:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1U)));
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80074b6:	461a      	mov	r2, r3
 80074b8:	2303      	movs	r3, #3
 80074ba:	f8c2 3130 	str.w	r3, [r2, #304]	; 0x130

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	691a      	ldr	r2, [r3, #16]
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80074ca:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1U))));
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	691b      	ldr	r3, [r3, #16]
 80074d2:	f103 0248 	add.w	r2, r3, #72	; 0x48
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80074de:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
}
 80074e2:	bf00      	nop
 80074e4:	3714      	adds	r7, #20
 80074e6:	46bd      	mov	sp, r7
 80074e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074ec:	4770      	bx	lr
	...

080074f0 <ETH_Prepare_Tx_Descriptors>:
  * @param  pTxConfig: Tx packet configuration
  * @param  ItMode: Enable or disable Tx EOT interrept
  * @retval Status
  */
static uint32_t ETH_Prepare_Tx_Descriptors(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig, uint32_t ItMode)
{
 80074f0:	b480      	push	{r7}
 80074f2:	b08d      	sub	sp, #52	; 0x34
 80074f4:	af00      	add	r7, sp, #0
 80074f6:	60f8      	str	r0, [r7, #12]
 80074f8:	60b9      	str	r1, [r7, #8]
 80074fa:	607a      	str	r2, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 80074fc:	68fb      	ldr	r3, [r7, #12]
 80074fe:	3318      	adds	r3, #24
 8007500:	617b      	str	r3, [r7, #20]
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 8007502:	697b      	ldr	r3, [r7, #20]
 8007504:	691b      	ldr	r3, [r3, #16]
 8007506:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t firstdescidx = dmatxdesclist->CurTxDesc;
 8007508:	697b      	ldr	r3, [r7, #20]
 800750a:	691b      	ldr	r3, [r3, #16]
 800750c:	613b      	str	r3, [r7, #16]
  uint32_t idx;
  uint32_t descnbr = 0;
 800750e:	2300      	movs	r3, #0
 8007510:	627b      	str	r3, [r7, #36]	; 0x24
  ETH_DMADescTypeDef *dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8007512:	697b      	ldr	r3, [r7, #20]
 8007514:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007516:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800751a:	623b      	str	r3, [r7, #32]

  ETH_BufferTypeDef  *txbuffer = pTxConfig->TxBuffer;
 800751c:	68bb      	ldr	r3, [r7, #8]
 800751e:	689b      	ldr	r3, [r3, #8]
 8007520:	61fb      	str	r3, [r7, #28]
  uint32_t           bd_count = 0;
 8007522:	2300      	movs	r3, #0
 8007524:	61bb      	str	r3, [r7, #24]

  /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
  if ((READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCWBF_OWN) == ETH_DMATXNDESCWBF_OWN)
 8007526:	6a3b      	ldr	r3, [r7, #32]
 8007528:	68db      	ldr	r3, [r3, #12]
 800752a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800752e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007532:	d007      	beq.n	8007544 <ETH_Prepare_Tx_Descriptors+0x54>
      || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8007534:	697a      	ldr	r2, [r7, #20]
 8007536:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007538:	3304      	adds	r3, #4
 800753a:	009b      	lsls	r3, r3, #2
 800753c:	4413      	add	r3, r2
 800753e:	685b      	ldr	r3, [r3, #4]
 8007540:	2b00      	cmp	r3, #0
 8007542:	d001      	beq.n	8007548 <ETH_Prepare_Tx_Descriptors+0x58>
  {
    return HAL_ETH_ERROR_BUSY;
 8007544:	2302      	movs	r3, #2
 8007546:	e259      	b.n	80079fc <ETH_Prepare_Tx_Descriptors+0x50c>

  /***************************************************************************/
  /*****************    Context descriptor configuration (Optional) **********/
  /***************************************************************************/
  /* If VLAN tag is enabled for this packet */
  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != (uint32_t)RESET)
 8007548:	68bb      	ldr	r3, [r7, #8]
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	f003 0304 	and.w	r3, r3, #4
 8007550:	2b00      	cmp	r3, #0
 8007552:	d044      	beq.n	80075de <ETH_Prepare_Tx_Descriptors+0xee>
  {
    /* Set vlan tag value */
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXCDESC_VT, pTxConfig->VlanTag);
 8007554:	6a3b      	ldr	r3, [r7, #32]
 8007556:	68da      	ldr	r2, [r3, #12]
 8007558:	4b75      	ldr	r3, [pc, #468]	; (8007730 <ETH_Prepare_Tx_Descriptors+0x240>)
 800755a:	4013      	ands	r3, r2
 800755c:	68ba      	ldr	r2, [r7, #8]
 800755e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8007560:	431a      	orrs	r2, r3
 8007562:	6a3b      	ldr	r3, [r7, #32]
 8007564:	60da      	str	r2, [r3, #12]
    /* Set vlan tag valid bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_VLTV);
 8007566:	6a3b      	ldr	r3, [r7, #32]
 8007568:	68db      	ldr	r3, [r3, #12]
 800756a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800756e:	6a3b      	ldr	r3, [r7, #32]
 8007570:	60da      	str	r2, [r3, #12]
    /* Set the descriptor as the vlan input source */
    SET_BIT(heth->Instance->MACVIR, ETH_MACVIR_VLTI);
 8007572:	68fb      	ldr	r3, [r7, #12]
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8007578:	68fb      	ldr	r3, [r7, #12]
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8007580:	661a      	str	r2, [r3, #96]	; 0x60

    /* if inner VLAN is enabled */
    if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_INNERVLANTAG) != (uint32_t)RESET)
 8007582:	68bb      	ldr	r3, [r7, #8]
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	f003 0308 	and.w	r3, r3, #8
 800758a:	2b00      	cmp	r3, #0
 800758c:	d027      	beq.n	80075de <ETH_Prepare_Tx_Descriptors+0xee>
    {
      /* Set inner vlan tag value */
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXCDESC_IVT, (pTxConfig->InnerVlanTag << 16));
 800758e:	6a3b      	ldr	r3, [r7, #32]
 8007590:	689b      	ldr	r3, [r3, #8]
 8007592:	b29a      	uxth	r2, r3
 8007594:	68bb      	ldr	r3, [r7, #8]
 8007596:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007598:	041b      	lsls	r3, r3, #16
 800759a:	431a      	orrs	r2, r3
 800759c:	6a3b      	ldr	r3, [r7, #32]
 800759e:	609a      	str	r2, [r3, #8]
      /* Set inner vlan tag valid bit */
      SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_IVLTV);
 80075a0:	6a3b      	ldr	r3, [r7, #32]
 80075a2:	68db      	ldr	r3, [r3, #12]
 80075a4:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80075a8:	6a3b      	ldr	r3, [r7, #32]
 80075aa:	60da      	str	r2, [r3, #12]

      /* Set Vlan Tag control */
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXCDESC_IVTIR, pTxConfig->InnerVlanCtrl);
 80075ac:	6a3b      	ldr	r3, [r7, #32]
 80075ae:	68db      	ldr	r3, [r3, #12]
 80075b0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80075b4:	68bb      	ldr	r3, [r7, #8]
 80075b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80075b8:	431a      	orrs	r2, r3
 80075ba:	6a3b      	ldr	r3, [r7, #32]
 80075bc:	60da      	str	r2, [r3, #12]

      /* Set the descriptor as the inner vlan input source */
      SET_BIT(heth->Instance->MACIVIR, ETH_MACIVIR_VLTI);
 80075be:	68fb      	ldr	r3, [r7, #12]
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80075c4:	68fb      	ldr	r3, [r7, #12]
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80075cc:	665a      	str	r2, [r3, #100]	; 0x64
      /* Enable double VLAN processing */
      SET_BIT(heth->Instance->MACVTR, ETH_MACVTR_EDVLP);
 80075ce:	68fb      	ldr	r3, [r7, #12]
 80075d0:	681b      	ldr	r3, [r3, #0]
 80075d2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80075d4:	68fb      	ldr	r3, [r7, #12]
 80075d6:	681b      	ldr	r3, [r3, #0]
 80075d8:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 80075dc:	651a      	str	r2, [r3, #80]	; 0x50
    }
  }

  /* if tcp segmentation is enabled for this packet */
  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != (uint32_t)RESET)
 80075de:	68bb      	ldr	r3, [r7, #8]
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	f003 0310 	and.w	r3, r3, #16
 80075e6:	2b00      	cmp	r3, #0
 80075e8:	d00e      	beq.n	8007608 <ETH_Prepare_Tx_Descriptors+0x118>
  {
    /* Set MSS value */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXCDESC_MSS, pTxConfig->MaxSegmentSize);
 80075ea:	6a3b      	ldr	r3, [r7, #32]
 80075ec:	689a      	ldr	r2, [r3, #8]
 80075ee:	4b51      	ldr	r3, [pc, #324]	; (8007734 <ETH_Prepare_Tx_Descriptors+0x244>)
 80075f0:	4013      	ands	r3, r2
 80075f2:	68ba      	ldr	r2, [r7, #8]
 80075f4:	6992      	ldr	r2, [r2, #24]
 80075f6:	431a      	orrs	r2, r3
 80075f8:	6a3b      	ldr	r3, [r7, #32]
 80075fa:	609a      	str	r2, [r3, #8]
    /* Set MSS valid bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_TCMSSV);
 80075fc:	6a3b      	ldr	r3, [r7, #32]
 80075fe:	68db      	ldr	r3, [r3, #12]
 8007600:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 8007604:	6a3b      	ldr	r3, [r7, #32]
 8007606:	60da      	str	r2, [r3, #12]
  }

  if ((READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != (uint32_t)RESET)
 8007608:	68bb      	ldr	r3, [r7, #8]
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	f003 0304 	and.w	r3, r3, #4
 8007610:	2b00      	cmp	r3, #0
 8007612:	d105      	bne.n	8007620 <ETH_Prepare_Tx_Descriptors+0x130>
      || (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != (uint32_t)RESET))
 8007614:	68bb      	ldr	r3, [r7, #8]
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	f003 0310 	and.w	r3, r3, #16
 800761c:	2b00      	cmp	r3, #0
 800761e:	d036      	beq.n	800768e <ETH_Prepare_Tx_Descriptors+0x19e>
  {
    /* Set as context descriptor */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_CTXT);
 8007620:	6a3b      	ldr	r3, [r7, #32]
 8007622:	68db      	ldr	r3, [r3, #12]
 8007624:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8007628:	6a3b      	ldr	r3, [r7, #32]
 800762a:	60da      	str	r2, [r3, #12]
  __ASM volatile ("dmb 0xF":::"memory");
 800762c:	f3bf 8f5f 	dmb	sy
}
 8007630:	bf00      	nop
    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set own bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_OWN);
 8007632:	6a3b      	ldr	r3, [r7, #32]
 8007634:	68db      	ldr	r3, [r3, #12]
 8007636:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800763a:	6a3b      	ldr	r3, [r7, #32]
 800763c:	60da      	str	r2, [r3, #12]
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 800763e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007640:	3301      	adds	r3, #1
 8007642:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007644:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007646:	2b03      	cmp	r3, #3
 8007648:	d902      	bls.n	8007650 <ETH_Prepare_Tx_Descriptors+0x160>
 800764a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800764c:	3b04      	subs	r3, #4
 800764e:	62fb      	str	r3, [r7, #44]	; 0x2c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8007650:	697b      	ldr	r3, [r7, #20]
 8007652:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007654:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007658:	623b      	str	r3, [r7, #32]

    descnbr += 1U;
 800765a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800765c:	3301      	adds	r3, #1
 800765e:	627b      	str	r3, [r7, #36]	; 0x24

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if (READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCWBF_OWN) == ETH_DMATXNDESCWBF_OWN)
 8007660:	6a3b      	ldr	r3, [r7, #32]
 8007662:	68db      	ldr	r3, [r3, #12]
 8007664:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007668:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800766c:	d10f      	bne.n	800768e <ETH_Prepare_Tx_Descriptors+0x19e>
    {
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[firstdescidx];
 800766e:	697b      	ldr	r3, [r7, #20]
 8007670:	693a      	ldr	r2, [r7, #16]
 8007672:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007676:	623b      	str	r3, [r7, #32]
  __ASM volatile ("dmb 0xF":::"memory");
 8007678:	f3bf 8f5f 	dmb	sy
}
 800767c:	bf00      	nop
      /* Ensure rest of descriptor is written to RAM before the OWN bit */
      __DMB();
      /* Clear own bit */
      CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_OWN);
 800767e:	6a3b      	ldr	r3, [r7, #32]
 8007680:	68db      	ldr	r3, [r3, #12]
 8007682:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8007686:	6a3b      	ldr	r3, [r7, #32]
 8007688:	60da      	str	r2, [r3, #12]

      return HAL_ETH_ERROR_BUSY;
 800768a:	2302      	movs	r3, #2
 800768c:	e1b6      	b.n	80079fc <ETH_Prepare_Tx_Descriptors+0x50c>

  /***************************************************************************/
  /*****************    Normal descriptors configuration     *****************/
  /***************************************************************************/

  descnbr += 1U;
 800768e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007690:	3301      	adds	r3, #1
 8007692:	627b      	str	r3, [r7, #36]	; 0x24

  /* Set header or buffer 1 address */
  WRITE_REG(dmatxdesc->DESC0, (uint32_t)txbuffer->buffer);
 8007694:	69fb      	ldr	r3, [r7, #28]
 8007696:	681b      	ldr	r3, [r3, #0]
 8007698:	461a      	mov	r2, r3
 800769a:	6a3b      	ldr	r3, [r7, #32]
 800769c:	601a      	str	r2, [r3, #0]
  /* Set header or buffer 1 Length */
  MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B1L, txbuffer->len);
 800769e:	6a3b      	ldr	r3, [r7, #32]
 80076a0:	689a      	ldr	r2, [r3, #8]
 80076a2:	4b24      	ldr	r3, [pc, #144]	; (8007734 <ETH_Prepare_Tx_Descriptors+0x244>)
 80076a4:	4013      	ands	r3, r2
 80076a6:	69fa      	ldr	r2, [r7, #28]
 80076a8:	6852      	ldr	r2, [r2, #4]
 80076aa:	431a      	orrs	r2, r3
 80076ac:	6a3b      	ldr	r3, [r7, #32]
 80076ae:	609a      	str	r2, [r3, #8]

  if (txbuffer->next != NULL)
 80076b0:	69fb      	ldr	r3, [r7, #28]
 80076b2:	689b      	ldr	r3, [r3, #8]
 80076b4:	2b00      	cmp	r3, #0
 80076b6:	d012      	beq.n	80076de <ETH_Prepare_Tx_Descriptors+0x1ee>
  {
    txbuffer = txbuffer->next;
 80076b8:	69fb      	ldr	r3, [r7, #28]
 80076ba:	689b      	ldr	r3, [r3, #8]
 80076bc:	61fb      	str	r3, [r7, #28]
    /* Set buffer 2 address */
    WRITE_REG(dmatxdesc->DESC1, (uint32_t)txbuffer->buffer);
 80076be:	69fb      	ldr	r3, [r7, #28]
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	461a      	mov	r2, r3
 80076c4:	6a3b      	ldr	r3, [r7, #32]
 80076c6:	605a      	str	r2, [r3, #4]
    /* Set buffer 2 Length */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, (txbuffer->len << 16));
 80076c8:	6a3b      	ldr	r3, [r7, #32]
 80076ca:	689a      	ldr	r2, [r3, #8]
 80076cc:	4b1a      	ldr	r3, [pc, #104]	; (8007738 <ETH_Prepare_Tx_Descriptors+0x248>)
 80076ce:	4013      	ands	r3, r2
 80076d0:	69fa      	ldr	r2, [r7, #28]
 80076d2:	6852      	ldr	r2, [r2, #4]
 80076d4:	0412      	lsls	r2, r2, #16
 80076d6:	431a      	orrs	r2, r3
 80076d8:	6a3b      	ldr	r3, [r7, #32]
 80076da:	609a      	str	r2, [r3, #8]
 80076dc:	e008      	b.n	80076f0 <ETH_Prepare_Tx_Descriptors+0x200>
  }
  else
  {
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 80076de:	6a3b      	ldr	r3, [r7, #32]
 80076e0:	2200      	movs	r2, #0
 80076e2:	605a      	str	r2, [r3, #4]
    /* Set buffer 2 Length */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, 0x0U);
 80076e4:	6a3b      	ldr	r3, [r7, #32]
 80076e6:	689a      	ldr	r2, [r3, #8]
 80076e8:	4b13      	ldr	r3, [pc, #76]	; (8007738 <ETH_Prepare_Tx_Descriptors+0x248>)
 80076ea:	4013      	ands	r3, r2
 80076ec:	6a3a      	ldr	r2, [r7, #32]
 80076ee:	6093      	str	r3, [r2, #8]
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != (uint32_t)RESET)
 80076f0:	68bb      	ldr	r3, [r7, #8]
 80076f2:	681b      	ldr	r3, [r3, #0]
 80076f4:	f003 0310 	and.w	r3, r3, #16
 80076f8:	2b00      	cmp	r3, #0
 80076fa:	d021      	beq.n	8007740 <ETH_Prepare_Tx_Descriptors+0x250>
  {
    /* Set TCP Header length */
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_THL, (pTxConfig->TCPHeaderLen << 19));
 80076fc:	6a3b      	ldr	r3, [r7, #32]
 80076fe:	68db      	ldr	r3, [r3, #12]
 8007700:	f423 02f0 	bic.w	r2, r3, #7864320	; 0x780000
 8007704:	68bb      	ldr	r3, [r7, #8]
 8007706:	6a1b      	ldr	r3, [r3, #32]
 8007708:	04db      	lsls	r3, r3, #19
 800770a:	431a      	orrs	r2, r3
 800770c:	6a3b      	ldr	r3, [r7, #32]
 800770e:	60da      	str	r2, [r3, #12]
    /* Set TCP payload length */
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TPL, pTxConfig->PayloadLen);
 8007710:	6a3b      	ldr	r3, [r7, #32]
 8007712:	68da      	ldr	r2, [r3, #12]
 8007714:	4b09      	ldr	r3, [pc, #36]	; (800773c <ETH_Prepare_Tx_Descriptors+0x24c>)
 8007716:	4013      	ands	r3, r2
 8007718:	68ba      	ldr	r2, [r7, #8]
 800771a:	69d2      	ldr	r2, [r2, #28]
 800771c:	431a      	orrs	r2, r3
 800771e:	6a3b      	ldr	r3, [r7, #32]
 8007720:	60da      	str	r2, [r3, #12]
    /* Set TCP Segmentation Enabled bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TSE);
 8007722:	6a3b      	ldr	r3, [r7, #32]
 8007724:	68db      	ldr	r3, [r3, #12]
 8007726:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800772a:	6a3b      	ldr	r3, [r7, #32]
 800772c:	60da      	str	r2, [r3, #12]
 800772e:	e02e      	b.n	800778e <ETH_Prepare_Tx_Descriptors+0x29e>
 8007730:	ffff0000 	.word	0xffff0000
 8007734:	ffffc000 	.word	0xffffc000
 8007738:	c000ffff 	.word	0xc000ffff
 800773c:	fffc0000 	.word	0xfffc0000
  }
  else
  {
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FL, pTxConfig->Length);
 8007740:	6a3b      	ldr	r3, [r7, #32]
 8007742:	68da      	ldr	r2, [r3, #12]
 8007744:	4b7b      	ldr	r3, [pc, #492]	; (8007934 <ETH_Prepare_Tx_Descriptors+0x444>)
 8007746:	4013      	ands	r3, r2
 8007748:	68ba      	ldr	r2, [r7, #8]
 800774a:	6852      	ldr	r2, [r2, #4]
 800774c:	431a      	orrs	r2, r3
 800774e:	6a3b      	ldr	r3, [r7, #32]
 8007750:	60da      	str	r2, [r3, #12]

    if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != (uint32_t)RESET)
 8007752:	68bb      	ldr	r3, [r7, #8]
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	f003 0301 	and.w	r3, r3, #1
 800775a:	2b00      	cmp	r3, #0
 800775c:	d008      	beq.n	8007770 <ETH_Prepare_Tx_Descriptors+0x280>
    {
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CIC, pTxConfig->ChecksumCtrl);
 800775e:	6a3b      	ldr	r3, [r7, #32]
 8007760:	68db      	ldr	r3, [r3, #12]
 8007762:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8007766:	68bb      	ldr	r3, [r7, #8]
 8007768:	695b      	ldr	r3, [r3, #20]
 800776a:	431a      	orrs	r2, r3
 800776c:	6a3b      	ldr	r3, [r7, #32]
 800776e:	60da      	str	r2, [r3, #12]
    }

    if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CRCPAD) != (uint32_t)RESET)
 8007770:	68bb      	ldr	r3, [r7, #8]
 8007772:	681b      	ldr	r3, [r3, #0]
 8007774:	f003 0320 	and.w	r3, r3, #32
 8007778:	2b00      	cmp	r3, #0
 800777a:	d008      	beq.n	800778e <ETH_Prepare_Tx_Descriptors+0x29e>
    {
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CPC, pTxConfig->CRCPadCtrl);
 800777c:	6a3b      	ldr	r3, [r7, #32]
 800777e:	68db      	ldr	r3, [r3, #12]
 8007780:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8007784:	68bb      	ldr	r3, [r7, #8]
 8007786:	691b      	ldr	r3, [r3, #16]
 8007788:	431a      	orrs	r2, r3
 800778a:	6a3b      	ldr	r3, [r7, #32]
 800778c:	60da      	str	r2, [r3, #12]
    }
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != (uint32_t)RESET)
 800778e:	68bb      	ldr	r3, [r7, #8]
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	f003 0304 	and.w	r3, r3, #4
 8007796:	2b00      	cmp	r3, #0
 8007798:	d008      	beq.n	80077ac <ETH_Prepare_Tx_Descriptors+0x2bc>
  {
    /* Set Vlan Tag control */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_VTIR, pTxConfig->VlanCtrl);
 800779a:	6a3b      	ldr	r3, [r7, #32]
 800779c:	689b      	ldr	r3, [r3, #8]
 800779e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80077a2:	68bb      	ldr	r3, [r7, #8]
 80077a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80077a6:	431a      	orrs	r2, r3
 80077a8:	6a3b      	ldr	r3, [r7, #32]
 80077aa:	609a      	str	r2, [r3, #8]
  }

  /* Mark it as First Descriptor */
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FD);
 80077ac:	6a3b      	ldr	r3, [r7, #32]
 80077ae:	68db      	ldr	r3, [r3, #12]
 80077b0:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80077b4:	6a3b      	ldr	r3, [r7, #32]
 80077b6:	60da      	str	r2, [r3, #12]
  /* Mark it as NORMAL descriptor */
  CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CTXT);
 80077b8:	6a3b      	ldr	r3, [r7, #32]
 80077ba:	68db      	ldr	r3, [r3, #12]
 80077bc:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80077c0:	6a3b      	ldr	r3, [r7, #32]
 80077c2:	60da      	str	r2, [r3, #12]
  __ASM volatile ("dmb 0xF":::"memory");
 80077c4:	f3bf 8f5f 	dmb	sy
}
 80077c8:	bf00      	nop
  /* Ensure rest of descriptor is written to RAM before the OWN bit */
  __DMB();
  /* set OWN bit of FIRST descriptor */
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 80077ca:	6a3b      	ldr	r3, [r7, #32]
 80077cc:	68db      	ldr	r3, [r3, #12]
 80077ce:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80077d2:	6a3b      	ldr	r3, [r7, #32]
 80077d4:	60da      	str	r2, [r3, #12]

  /* If source address insertion/replacement is enabled for this packet */
  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_SAIC) != (uint32_t)RESET)
 80077d6:	68bb      	ldr	r3, [r7, #8]
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	f003 0302 	and.w	r3, r3, #2
 80077de:	2b00      	cmp	r3, #0
 80077e0:	f000 80da 	beq.w	8007998 <ETH_Prepare_Tx_Descriptors+0x4a8>
  {
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_SAIC, pTxConfig->SrcAddrCtrl);
 80077e4:	6a3b      	ldr	r3, [r7, #32]
 80077e6:	68db      	ldr	r3, [r3, #12]
 80077e8:	f023 7260 	bic.w	r2, r3, #58720256	; 0x3800000
 80077ec:	68bb      	ldr	r3, [r7, #8]
 80077ee:	68db      	ldr	r3, [r3, #12]
 80077f0:	431a      	orrs	r2, r3
 80077f2:	6a3b      	ldr	r3, [r7, #32]
 80077f4:	60da      	str	r2, [r3, #12]
  }

  /* only if the packet is split into more than one descriptors > 1 */
  while (txbuffer->next != NULL)
 80077f6:	e0cf      	b.n	8007998 <ETH_Prepare_Tx_Descriptors+0x4a8>
  {
    /* Clear the LD bit of previous descriptor */
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_LD);
 80077f8:	6a3b      	ldr	r3, [r7, #32]
 80077fa:	68db      	ldr	r3, [r3, #12]
 80077fc:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8007800:	6a3b      	ldr	r3, [r7, #32]
 8007802:	60da      	str	r2, [r3, #12]
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 8007804:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007806:	3301      	adds	r3, #1
 8007808:	62fb      	str	r3, [r7, #44]	; 0x2c
 800780a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800780c:	2b03      	cmp	r3, #3
 800780e:	d902      	bls.n	8007816 <ETH_Prepare_Tx_Descriptors+0x326>
 8007810:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007812:	3b04      	subs	r3, #4
 8007814:	62fb      	str	r3, [r7, #44]	; 0x2c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8007816:	697b      	ldr	r3, [r7, #20]
 8007818:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800781a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800781e:	623b      	str	r3, [r7, #32]

    /* Clear the FD bit of new Descriptor */
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FD);
 8007820:	6a3b      	ldr	r3, [r7, #32]
 8007822:	68db      	ldr	r3, [r3, #12]
 8007824:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8007828:	6a3b      	ldr	r3, [r7, #32]
 800782a:	60da      	str	r2, [r3, #12]

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if ((READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN) == ETH_DMATXNDESCRF_OWN)
 800782c:	6a3b      	ldr	r3, [r7, #32]
 800782e:	68db      	ldr	r3, [r3, #12]
 8007830:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007834:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007838:	d007      	beq.n	800784a <ETH_Prepare_Tx_Descriptors+0x35a>
        || (dmatxdesclist->PacketAddress[descidx] != NULL))
 800783a:	697a      	ldr	r2, [r7, #20]
 800783c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800783e:	3304      	adds	r3, #4
 8007840:	009b      	lsls	r3, r3, #2
 8007842:	4413      	add	r3, r2
 8007844:	685b      	ldr	r3, [r3, #4]
 8007846:	2b00      	cmp	r3, #0
 8007848:	d029      	beq.n	800789e <ETH_Prepare_Tx_Descriptors+0x3ae>
    {
      descidx = firstdescidx;
 800784a:	693b      	ldr	r3, [r7, #16]
 800784c:	62fb      	str	r3, [r7, #44]	; 0x2c
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 800784e:	697b      	ldr	r3, [r7, #20]
 8007850:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007852:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007856:	623b      	str	r3, [r7, #32]

      /* clear previous desc own bit */
      for (idx = 0; idx < descnbr; idx ++)
 8007858:	2300      	movs	r3, #0
 800785a:	62bb      	str	r3, [r7, #40]	; 0x28
 800785c:	e019      	b.n	8007892 <ETH_Prepare_Tx_Descriptors+0x3a2>
  __ASM volatile ("dmb 0xF":::"memory");
 800785e:	f3bf 8f5f 	dmb	sy
}
 8007862:	bf00      	nop
      {
        /* Ensure rest of descriptor is written to RAM before the OWN bit */
        __DMB();

        CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 8007864:	6a3b      	ldr	r3, [r7, #32]
 8007866:	68db      	ldr	r3, [r3, #12]
 8007868:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800786c:	6a3b      	ldr	r3, [r7, #32]
 800786e:	60da      	str	r2, [r3, #12]

        /* Increment current tx descriptor index */
        INCR_TX_DESC_INDEX(descidx, 1U);
 8007870:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007872:	3301      	adds	r3, #1
 8007874:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007876:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007878:	2b03      	cmp	r3, #3
 800787a:	d902      	bls.n	8007882 <ETH_Prepare_Tx_Descriptors+0x392>
 800787c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800787e:	3b04      	subs	r3, #4
 8007880:	62fb      	str	r3, [r7, #44]	; 0x2c
        /* Get current descriptor address */
        dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8007882:	697b      	ldr	r3, [r7, #20]
 8007884:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007886:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800788a:	623b      	str	r3, [r7, #32]
      for (idx = 0; idx < descnbr; idx ++)
 800788c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800788e:	3301      	adds	r3, #1
 8007890:	62bb      	str	r3, [r7, #40]	; 0x28
 8007892:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007894:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007896:	429a      	cmp	r2, r3
 8007898:	d3e1      	bcc.n	800785e <ETH_Prepare_Tx_Descriptors+0x36e>
      }

      return HAL_ETH_ERROR_BUSY;
 800789a:	2302      	movs	r3, #2
 800789c:	e0ae      	b.n	80079fc <ETH_Prepare_Tx_Descriptors+0x50c>
    }

    descnbr += 1U;
 800789e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078a0:	3301      	adds	r3, #1
 80078a2:	627b      	str	r3, [r7, #36]	; 0x24

    /* Get the next Tx buffer in the list */
    txbuffer = txbuffer->next;
 80078a4:	69fb      	ldr	r3, [r7, #28]
 80078a6:	689b      	ldr	r3, [r3, #8]
 80078a8:	61fb      	str	r3, [r7, #28]

    /* Set header or buffer 1 address */
    WRITE_REG(dmatxdesc->DESC0, (uint32_t)txbuffer->buffer);
 80078aa:	69fb      	ldr	r3, [r7, #28]
 80078ac:	681b      	ldr	r3, [r3, #0]
 80078ae:	461a      	mov	r2, r3
 80078b0:	6a3b      	ldr	r3, [r7, #32]
 80078b2:	601a      	str	r2, [r3, #0]
    /* Set header or buffer 1 Length */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B1L, txbuffer->len);
 80078b4:	6a3b      	ldr	r3, [r7, #32]
 80078b6:	689a      	ldr	r2, [r3, #8]
 80078b8:	4b1f      	ldr	r3, [pc, #124]	; (8007938 <ETH_Prepare_Tx_Descriptors+0x448>)
 80078ba:	4013      	ands	r3, r2
 80078bc:	69fa      	ldr	r2, [r7, #28]
 80078be:	6852      	ldr	r2, [r2, #4]
 80078c0:	431a      	orrs	r2, r3
 80078c2:	6a3b      	ldr	r3, [r7, #32]
 80078c4:	609a      	str	r2, [r3, #8]

    if (txbuffer->next != NULL)
 80078c6:	69fb      	ldr	r3, [r7, #28]
 80078c8:	689b      	ldr	r3, [r3, #8]
 80078ca:	2b00      	cmp	r3, #0
 80078cc:	d012      	beq.n	80078f4 <ETH_Prepare_Tx_Descriptors+0x404>
    {
      /* Get the next Tx buffer in the list */
      txbuffer = txbuffer->next;
 80078ce:	69fb      	ldr	r3, [r7, #28]
 80078d0:	689b      	ldr	r3, [r3, #8]
 80078d2:	61fb      	str	r3, [r7, #28]
      /* Set buffer 2 address */
      WRITE_REG(dmatxdesc->DESC1, (uint32_t)txbuffer->buffer);
 80078d4:	69fb      	ldr	r3, [r7, #28]
 80078d6:	681b      	ldr	r3, [r3, #0]
 80078d8:	461a      	mov	r2, r3
 80078da:	6a3b      	ldr	r3, [r7, #32]
 80078dc:	605a      	str	r2, [r3, #4]
      /* Set buffer 2 Length */
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, (txbuffer->len << 16));
 80078de:	6a3b      	ldr	r3, [r7, #32]
 80078e0:	689a      	ldr	r2, [r3, #8]
 80078e2:	4b16      	ldr	r3, [pc, #88]	; (800793c <ETH_Prepare_Tx_Descriptors+0x44c>)
 80078e4:	4013      	ands	r3, r2
 80078e6:	69fa      	ldr	r2, [r7, #28]
 80078e8:	6852      	ldr	r2, [r2, #4]
 80078ea:	0412      	lsls	r2, r2, #16
 80078ec:	431a      	orrs	r2, r3
 80078ee:	6a3b      	ldr	r3, [r7, #32]
 80078f0:	609a      	str	r2, [r3, #8]
 80078f2:	e008      	b.n	8007906 <ETH_Prepare_Tx_Descriptors+0x416>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC1, 0x0);
 80078f4:	6a3b      	ldr	r3, [r7, #32]
 80078f6:	2200      	movs	r2, #0
 80078f8:	605a      	str	r2, [r3, #4]
      /* Set buffer 2 Length */
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, 0x0U);
 80078fa:	6a3b      	ldr	r3, [r7, #32]
 80078fc:	689a      	ldr	r2, [r3, #8]
 80078fe:	4b0f      	ldr	r3, [pc, #60]	; (800793c <ETH_Prepare_Tx_Descriptors+0x44c>)
 8007900:	4013      	ands	r3, r2
 8007902:	6a3a      	ldr	r2, [r7, #32]
 8007904:	6093      	str	r3, [r2, #8]
    }

    if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != (uint32_t)RESET)
 8007906:	68bb      	ldr	r3, [r7, #8]
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	f003 0310 	and.w	r3, r3, #16
 800790e:	2b00      	cmp	r3, #0
 8007910:	d018      	beq.n	8007944 <ETH_Prepare_Tx_Descriptors+0x454>
    {
      /* Set TCP payload length */
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TPL, pTxConfig->PayloadLen);
 8007912:	6a3b      	ldr	r3, [r7, #32]
 8007914:	68da      	ldr	r2, [r3, #12]
 8007916:	4b0a      	ldr	r3, [pc, #40]	; (8007940 <ETH_Prepare_Tx_Descriptors+0x450>)
 8007918:	4013      	ands	r3, r2
 800791a:	68ba      	ldr	r2, [r7, #8]
 800791c:	69d2      	ldr	r2, [r2, #28]
 800791e:	431a      	orrs	r2, r3
 8007920:	6a3b      	ldr	r3, [r7, #32]
 8007922:	60da      	str	r2, [r3, #12]
      /* Set TCP Segmentation Enabled bit */
      SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TSE);
 8007924:	6a3b      	ldr	r3, [r7, #32]
 8007926:	68db      	ldr	r3, [r3, #12]
 8007928:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800792c:	6a3b      	ldr	r3, [r7, #32]
 800792e:	60da      	str	r2, [r3, #12]
 8007930:	e020      	b.n	8007974 <ETH_Prepare_Tx_Descriptors+0x484>
 8007932:	bf00      	nop
 8007934:	ffff8000 	.word	0xffff8000
 8007938:	ffffc000 	.word	0xffffc000
 800793c:	c000ffff 	.word	0xc000ffff
 8007940:	fffc0000 	.word	0xfffc0000
    }
    else
    {
      /* Set the packet length */
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FL, pTxConfig->Length);
 8007944:	6a3b      	ldr	r3, [r7, #32]
 8007946:	68da      	ldr	r2, [r3, #12]
 8007948:	4b2f      	ldr	r3, [pc, #188]	; (8007a08 <ETH_Prepare_Tx_Descriptors+0x518>)
 800794a:	4013      	ands	r3, r2
 800794c:	68ba      	ldr	r2, [r7, #8]
 800794e:	6852      	ldr	r2, [r2, #4]
 8007950:	431a      	orrs	r2, r3
 8007952:	6a3b      	ldr	r3, [r7, #32]
 8007954:	60da      	str	r2, [r3, #12]

      if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != (uint32_t)RESET)
 8007956:	68bb      	ldr	r3, [r7, #8]
 8007958:	681b      	ldr	r3, [r3, #0]
 800795a:	f003 0301 	and.w	r3, r3, #1
 800795e:	2b00      	cmp	r3, #0
 8007960:	d008      	beq.n	8007974 <ETH_Prepare_Tx_Descriptors+0x484>
      {
        /* Checksum Insertion Control */
        MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CIC, pTxConfig->ChecksumCtrl);
 8007962:	6a3b      	ldr	r3, [r7, #32]
 8007964:	68db      	ldr	r3, [r3, #12]
 8007966:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800796a:	68bb      	ldr	r3, [r7, #8]
 800796c:	695b      	ldr	r3, [r3, #20]
 800796e:	431a      	orrs	r2, r3
 8007970:	6a3b      	ldr	r3, [r7, #32]
 8007972:	60da      	str	r2, [r3, #12]
      }
    }

    bd_count += 1U;
 8007974:	69bb      	ldr	r3, [r7, #24]
 8007976:	3301      	adds	r3, #1
 8007978:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("dmb 0xF":::"memory");
 800797a:	f3bf 8f5f 	dmb	sy
}
 800797e:	bf00      	nop

    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set Own bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 8007980:	6a3b      	ldr	r3, [r7, #32]
 8007982:	68db      	ldr	r3, [r3, #12]
 8007984:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8007988:	6a3b      	ldr	r3, [r7, #32]
 800798a:	60da      	str	r2, [r3, #12]
    /* Mark it as NORMAL descriptor */
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CTXT);
 800798c:	6a3b      	ldr	r3, [r7, #32]
 800798e:	68db      	ldr	r3, [r3, #12]
 8007990:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8007994:	6a3b      	ldr	r3, [r7, #32]
 8007996:	60da      	str	r2, [r3, #12]
  while (txbuffer->next != NULL)
 8007998:	69fb      	ldr	r3, [r7, #28]
 800799a:	689b      	ldr	r3, [r3, #8]
 800799c:	2b00      	cmp	r3, #0
 800799e:	f47f af2b 	bne.w	80077f8 <ETH_Prepare_Tx_Descriptors+0x308>
  }

  if (ItMode != ((uint32_t)RESET))
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	2b00      	cmp	r3, #0
 80079a6:	d006      	beq.n	80079b6 <ETH_Prepare_Tx_Descriptors+0x4c6>
  {
    /* Set Interrupt on completion bit */
    SET_BIT(dmatxdesc->DESC2, ETH_DMATXNDESCRF_IOC);
 80079a8:	6a3b      	ldr	r3, [r7, #32]
 80079aa:	689b      	ldr	r3, [r3, #8]
 80079ac:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80079b0:	6a3b      	ldr	r3, [r7, #32]
 80079b2:	609a      	str	r2, [r3, #8]
 80079b4:	e005      	b.n	80079c2 <ETH_Prepare_Tx_Descriptors+0x4d2>
  }
  else
  {
    /* Clear Interrupt on completion bit */
    CLEAR_BIT(dmatxdesc->DESC2, ETH_DMATXNDESCRF_IOC);
 80079b6:	6a3b      	ldr	r3, [r7, #32]
 80079b8:	689b      	ldr	r3, [r3, #8]
 80079ba:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80079be:	6a3b      	ldr	r3, [r7, #32]
 80079c0:	609a      	str	r2, [r3, #8]
  }

  /* Mark it as LAST descriptor */
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_LD);
 80079c2:	6a3b      	ldr	r3, [r7, #32]
 80079c4:	68db      	ldr	r3, [r3, #12]
 80079c6:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80079ca:	6a3b      	ldr	r3, [r7, #32]
 80079cc:	60da      	str	r2, [r3, #12]
  /* Save the current packet address to expose it to the application */
  dmatxdesclist->PacketAddress[descidx] = dmatxdesclist->CurrentPacketAddress;
 80079ce:	697b      	ldr	r3, [r7, #20]
 80079d0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80079d2:	6979      	ldr	r1, [r7, #20]
 80079d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80079d6:	3304      	adds	r3, #4
 80079d8:	009b      	lsls	r3, r3, #2
 80079da:	440b      	add	r3, r1
 80079dc:	605a      	str	r2, [r3, #4]

  dmatxdesclist->CurTxDesc = descidx;
 80079de:	697b      	ldr	r3, [r7, #20]
 80079e0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80079e2:	611a      	str	r2, [r3, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 80079e4:	b672      	cpsid	i
}
 80079e6:	bf00      	nop

  /* disable the interrupt */
  __disable_irq();

  dmatxdesclist->BuffersInUse += bd_count + 1U;
 80079e8:	697b      	ldr	r3, [r7, #20]
 80079ea:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80079ec:	69bb      	ldr	r3, [r7, #24]
 80079ee:	4413      	add	r3, r2
 80079f0:	1c5a      	adds	r2, r3, #1
 80079f2:	697b      	ldr	r3, [r7, #20]
 80079f4:	629a      	str	r2, [r3, #40]	; 0x28
  __ASM volatile ("cpsie i" : : : "memory");
 80079f6:	b662      	cpsie	i
}
 80079f8:	bf00      	nop
  /* Enable interrupts back */
  __enable_irq();


  /* Return function status */
  return HAL_ETH_ERROR_NONE;
 80079fa:	2300      	movs	r3, #0
}
 80079fc:	4618      	mov	r0, r3
 80079fe:	3734      	adds	r7, #52	; 0x34
 8007a00:	46bd      	mov	sp, r7
 8007a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a06:	4770      	bx	lr
 8007a08:	ffff8000 	.word	0xffff8000

08007a0c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8007a0c:	b480      	push	{r7}
 8007a0e:	b089      	sub	sp, #36	; 0x24
 8007a10:	af00      	add	r7, sp, #0
 8007a12:	6078      	str	r0, [r7, #4]
 8007a14:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8007a16:	2300      	movs	r3, #0
 8007a18:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8007a1a:	4b89      	ldr	r3, [pc, #548]	; (8007c40 <HAL_GPIO_Init+0x234>)
 8007a1c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8007a1e:	e194      	b.n	8007d4a <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8007a20:	683b      	ldr	r3, [r7, #0]
 8007a22:	681a      	ldr	r2, [r3, #0]
 8007a24:	2101      	movs	r1, #1
 8007a26:	69fb      	ldr	r3, [r7, #28]
 8007a28:	fa01 f303 	lsl.w	r3, r1, r3
 8007a2c:	4013      	ands	r3, r2
 8007a2e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8007a30:	693b      	ldr	r3, [r7, #16]
 8007a32:	2b00      	cmp	r3, #0
 8007a34:	f000 8186 	beq.w	8007d44 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8007a38:	683b      	ldr	r3, [r7, #0]
 8007a3a:	685b      	ldr	r3, [r3, #4]
 8007a3c:	f003 0303 	and.w	r3, r3, #3
 8007a40:	2b01      	cmp	r3, #1
 8007a42:	d005      	beq.n	8007a50 <HAL_GPIO_Init+0x44>
 8007a44:	683b      	ldr	r3, [r7, #0]
 8007a46:	685b      	ldr	r3, [r3, #4]
 8007a48:	f003 0303 	and.w	r3, r3, #3
 8007a4c:	2b02      	cmp	r3, #2
 8007a4e:	d130      	bne.n	8007ab2 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	689b      	ldr	r3, [r3, #8]
 8007a54:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8007a56:	69fb      	ldr	r3, [r7, #28]
 8007a58:	005b      	lsls	r3, r3, #1
 8007a5a:	2203      	movs	r2, #3
 8007a5c:	fa02 f303 	lsl.w	r3, r2, r3
 8007a60:	43db      	mvns	r3, r3
 8007a62:	69ba      	ldr	r2, [r7, #24]
 8007a64:	4013      	ands	r3, r2
 8007a66:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8007a68:	683b      	ldr	r3, [r7, #0]
 8007a6a:	68da      	ldr	r2, [r3, #12]
 8007a6c:	69fb      	ldr	r3, [r7, #28]
 8007a6e:	005b      	lsls	r3, r3, #1
 8007a70:	fa02 f303 	lsl.w	r3, r2, r3
 8007a74:	69ba      	ldr	r2, [r7, #24]
 8007a76:	4313      	orrs	r3, r2
 8007a78:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	69ba      	ldr	r2, [r7, #24]
 8007a7e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	685b      	ldr	r3, [r3, #4]
 8007a84:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8007a86:	2201      	movs	r2, #1
 8007a88:	69fb      	ldr	r3, [r7, #28]
 8007a8a:	fa02 f303 	lsl.w	r3, r2, r3
 8007a8e:	43db      	mvns	r3, r3
 8007a90:	69ba      	ldr	r2, [r7, #24]
 8007a92:	4013      	ands	r3, r2
 8007a94:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8007a96:	683b      	ldr	r3, [r7, #0]
 8007a98:	685b      	ldr	r3, [r3, #4]
 8007a9a:	091b      	lsrs	r3, r3, #4
 8007a9c:	f003 0201 	and.w	r2, r3, #1
 8007aa0:	69fb      	ldr	r3, [r7, #28]
 8007aa2:	fa02 f303 	lsl.w	r3, r2, r3
 8007aa6:	69ba      	ldr	r2, [r7, #24]
 8007aa8:	4313      	orrs	r3, r2
 8007aaa:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	69ba      	ldr	r2, [r7, #24]
 8007ab0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8007ab2:	683b      	ldr	r3, [r7, #0]
 8007ab4:	685b      	ldr	r3, [r3, #4]
 8007ab6:	f003 0303 	and.w	r3, r3, #3
 8007aba:	2b03      	cmp	r3, #3
 8007abc:	d017      	beq.n	8007aee <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	68db      	ldr	r3, [r3, #12]
 8007ac2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8007ac4:	69fb      	ldr	r3, [r7, #28]
 8007ac6:	005b      	lsls	r3, r3, #1
 8007ac8:	2203      	movs	r2, #3
 8007aca:	fa02 f303 	lsl.w	r3, r2, r3
 8007ace:	43db      	mvns	r3, r3
 8007ad0:	69ba      	ldr	r2, [r7, #24]
 8007ad2:	4013      	ands	r3, r2
 8007ad4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8007ad6:	683b      	ldr	r3, [r7, #0]
 8007ad8:	689a      	ldr	r2, [r3, #8]
 8007ada:	69fb      	ldr	r3, [r7, #28]
 8007adc:	005b      	lsls	r3, r3, #1
 8007ade:	fa02 f303 	lsl.w	r3, r2, r3
 8007ae2:	69ba      	ldr	r2, [r7, #24]
 8007ae4:	4313      	orrs	r3, r2
 8007ae6:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	69ba      	ldr	r2, [r7, #24]
 8007aec:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8007aee:	683b      	ldr	r3, [r7, #0]
 8007af0:	685b      	ldr	r3, [r3, #4]
 8007af2:	f003 0303 	and.w	r3, r3, #3
 8007af6:	2b02      	cmp	r3, #2
 8007af8:	d123      	bne.n	8007b42 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8007afa:	69fb      	ldr	r3, [r7, #28]
 8007afc:	08da      	lsrs	r2, r3, #3
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	3208      	adds	r2, #8
 8007b02:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007b06:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8007b08:	69fb      	ldr	r3, [r7, #28]
 8007b0a:	f003 0307 	and.w	r3, r3, #7
 8007b0e:	009b      	lsls	r3, r3, #2
 8007b10:	220f      	movs	r2, #15
 8007b12:	fa02 f303 	lsl.w	r3, r2, r3
 8007b16:	43db      	mvns	r3, r3
 8007b18:	69ba      	ldr	r2, [r7, #24]
 8007b1a:	4013      	ands	r3, r2
 8007b1c:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8007b1e:	683b      	ldr	r3, [r7, #0]
 8007b20:	691a      	ldr	r2, [r3, #16]
 8007b22:	69fb      	ldr	r3, [r7, #28]
 8007b24:	f003 0307 	and.w	r3, r3, #7
 8007b28:	009b      	lsls	r3, r3, #2
 8007b2a:	fa02 f303 	lsl.w	r3, r2, r3
 8007b2e:	69ba      	ldr	r2, [r7, #24]
 8007b30:	4313      	orrs	r3, r2
 8007b32:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8007b34:	69fb      	ldr	r3, [r7, #28]
 8007b36:	08da      	lsrs	r2, r3, #3
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	3208      	adds	r2, #8
 8007b3c:	69b9      	ldr	r1, [r7, #24]
 8007b3e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	681b      	ldr	r3, [r3, #0]
 8007b46:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8007b48:	69fb      	ldr	r3, [r7, #28]
 8007b4a:	005b      	lsls	r3, r3, #1
 8007b4c:	2203      	movs	r2, #3
 8007b4e:	fa02 f303 	lsl.w	r3, r2, r3
 8007b52:	43db      	mvns	r3, r3
 8007b54:	69ba      	ldr	r2, [r7, #24]
 8007b56:	4013      	ands	r3, r2
 8007b58:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8007b5a:	683b      	ldr	r3, [r7, #0]
 8007b5c:	685b      	ldr	r3, [r3, #4]
 8007b5e:	f003 0203 	and.w	r2, r3, #3
 8007b62:	69fb      	ldr	r3, [r7, #28]
 8007b64:	005b      	lsls	r3, r3, #1
 8007b66:	fa02 f303 	lsl.w	r3, r2, r3
 8007b6a:	69ba      	ldr	r2, [r7, #24]
 8007b6c:	4313      	orrs	r3, r2
 8007b6e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	69ba      	ldr	r2, [r7, #24]
 8007b74:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8007b76:	683b      	ldr	r3, [r7, #0]
 8007b78:	685b      	ldr	r3, [r3, #4]
 8007b7a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8007b7e:	2b00      	cmp	r3, #0
 8007b80:	f000 80e0 	beq.w	8007d44 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007b84:	4b2f      	ldr	r3, [pc, #188]	; (8007c44 <HAL_GPIO_Init+0x238>)
 8007b86:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8007b8a:	4a2e      	ldr	r2, [pc, #184]	; (8007c44 <HAL_GPIO_Init+0x238>)
 8007b8c:	f043 0302 	orr.w	r3, r3, #2
 8007b90:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8007b94:	4b2b      	ldr	r3, [pc, #172]	; (8007c44 <HAL_GPIO_Init+0x238>)
 8007b96:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8007b9a:	f003 0302 	and.w	r3, r3, #2
 8007b9e:	60fb      	str	r3, [r7, #12]
 8007ba0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8007ba2:	4a29      	ldr	r2, [pc, #164]	; (8007c48 <HAL_GPIO_Init+0x23c>)
 8007ba4:	69fb      	ldr	r3, [r7, #28]
 8007ba6:	089b      	lsrs	r3, r3, #2
 8007ba8:	3302      	adds	r3, #2
 8007baa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007bae:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8007bb0:	69fb      	ldr	r3, [r7, #28]
 8007bb2:	f003 0303 	and.w	r3, r3, #3
 8007bb6:	009b      	lsls	r3, r3, #2
 8007bb8:	220f      	movs	r2, #15
 8007bba:	fa02 f303 	lsl.w	r3, r2, r3
 8007bbe:	43db      	mvns	r3, r3
 8007bc0:	69ba      	ldr	r2, [r7, #24]
 8007bc2:	4013      	ands	r3, r2
 8007bc4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	4a20      	ldr	r2, [pc, #128]	; (8007c4c <HAL_GPIO_Init+0x240>)
 8007bca:	4293      	cmp	r3, r2
 8007bcc:	d052      	beq.n	8007c74 <HAL_GPIO_Init+0x268>
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	4a1f      	ldr	r2, [pc, #124]	; (8007c50 <HAL_GPIO_Init+0x244>)
 8007bd2:	4293      	cmp	r3, r2
 8007bd4:	d031      	beq.n	8007c3a <HAL_GPIO_Init+0x22e>
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	4a1e      	ldr	r2, [pc, #120]	; (8007c54 <HAL_GPIO_Init+0x248>)
 8007bda:	4293      	cmp	r3, r2
 8007bdc:	d02b      	beq.n	8007c36 <HAL_GPIO_Init+0x22a>
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	4a1d      	ldr	r2, [pc, #116]	; (8007c58 <HAL_GPIO_Init+0x24c>)
 8007be2:	4293      	cmp	r3, r2
 8007be4:	d025      	beq.n	8007c32 <HAL_GPIO_Init+0x226>
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	4a1c      	ldr	r2, [pc, #112]	; (8007c5c <HAL_GPIO_Init+0x250>)
 8007bea:	4293      	cmp	r3, r2
 8007bec:	d01f      	beq.n	8007c2e <HAL_GPIO_Init+0x222>
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	4a1b      	ldr	r2, [pc, #108]	; (8007c60 <HAL_GPIO_Init+0x254>)
 8007bf2:	4293      	cmp	r3, r2
 8007bf4:	d019      	beq.n	8007c2a <HAL_GPIO_Init+0x21e>
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	4a1a      	ldr	r2, [pc, #104]	; (8007c64 <HAL_GPIO_Init+0x258>)
 8007bfa:	4293      	cmp	r3, r2
 8007bfc:	d013      	beq.n	8007c26 <HAL_GPIO_Init+0x21a>
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	4a19      	ldr	r2, [pc, #100]	; (8007c68 <HAL_GPIO_Init+0x25c>)
 8007c02:	4293      	cmp	r3, r2
 8007c04:	d00d      	beq.n	8007c22 <HAL_GPIO_Init+0x216>
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	4a18      	ldr	r2, [pc, #96]	; (8007c6c <HAL_GPIO_Init+0x260>)
 8007c0a:	4293      	cmp	r3, r2
 8007c0c:	d007      	beq.n	8007c1e <HAL_GPIO_Init+0x212>
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	4a17      	ldr	r2, [pc, #92]	; (8007c70 <HAL_GPIO_Init+0x264>)
 8007c12:	4293      	cmp	r3, r2
 8007c14:	d101      	bne.n	8007c1a <HAL_GPIO_Init+0x20e>
 8007c16:	2309      	movs	r3, #9
 8007c18:	e02d      	b.n	8007c76 <HAL_GPIO_Init+0x26a>
 8007c1a:	230a      	movs	r3, #10
 8007c1c:	e02b      	b.n	8007c76 <HAL_GPIO_Init+0x26a>
 8007c1e:	2308      	movs	r3, #8
 8007c20:	e029      	b.n	8007c76 <HAL_GPIO_Init+0x26a>
 8007c22:	2307      	movs	r3, #7
 8007c24:	e027      	b.n	8007c76 <HAL_GPIO_Init+0x26a>
 8007c26:	2306      	movs	r3, #6
 8007c28:	e025      	b.n	8007c76 <HAL_GPIO_Init+0x26a>
 8007c2a:	2305      	movs	r3, #5
 8007c2c:	e023      	b.n	8007c76 <HAL_GPIO_Init+0x26a>
 8007c2e:	2304      	movs	r3, #4
 8007c30:	e021      	b.n	8007c76 <HAL_GPIO_Init+0x26a>
 8007c32:	2303      	movs	r3, #3
 8007c34:	e01f      	b.n	8007c76 <HAL_GPIO_Init+0x26a>
 8007c36:	2302      	movs	r3, #2
 8007c38:	e01d      	b.n	8007c76 <HAL_GPIO_Init+0x26a>
 8007c3a:	2301      	movs	r3, #1
 8007c3c:	e01b      	b.n	8007c76 <HAL_GPIO_Init+0x26a>
 8007c3e:	bf00      	nop
 8007c40:	58000080 	.word	0x58000080
 8007c44:	58024400 	.word	0x58024400
 8007c48:	58000400 	.word	0x58000400
 8007c4c:	58020000 	.word	0x58020000
 8007c50:	58020400 	.word	0x58020400
 8007c54:	58020800 	.word	0x58020800
 8007c58:	58020c00 	.word	0x58020c00
 8007c5c:	58021000 	.word	0x58021000
 8007c60:	58021400 	.word	0x58021400
 8007c64:	58021800 	.word	0x58021800
 8007c68:	58021c00 	.word	0x58021c00
 8007c6c:	58022000 	.word	0x58022000
 8007c70:	58022400 	.word	0x58022400
 8007c74:	2300      	movs	r3, #0
 8007c76:	69fa      	ldr	r2, [r7, #28]
 8007c78:	f002 0203 	and.w	r2, r2, #3
 8007c7c:	0092      	lsls	r2, r2, #2
 8007c7e:	4093      	lsls	r3, r2
 8007c80:	69ba      	ldr	r2, [r7, #24]
 8007c82:	4313      	orrs	r3, r2
 8007c84:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8007c86:	4938      	ldr	r1, [pc, #224]	; (8007d68 <HAL_GPIO_Init+0x35c>)
 8007c88:	69fb      	ldr	r3, [r7, #28]
 8007c8a:	089b      	lsrs	r3, r3, #2
 8007c8c:	3302      	adds	r3, #2
 8007c8e:	69ba      	ldr	r2, [r7, #24]
 8007c90:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8007c94:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007c98:	681b      	ldr	r3, [r3, #0]
 8007c9a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007c9c:	693b      	ldr	r3, [r7, #16]
 8007c9e:	43db      	mvns	r3, r3
 8007ca0:	69ba      	ldr	r2, [r7, #24]
 8007ca2:	4013      	ands	r3, r2
 8007ca4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8007ca6:	683b      	ldr	r3, [r7, #0]
 8007ca8:	685b      	ldr	r3, [r3, #4]
 8007caa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007cae:	2b00      	cmp	r3, #0
 8007cb0:	d003      	beq.n	8007cba <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8007cb2:	69ba      	ldr	r2, [r7, #24]
 8007cb4:	693b      	ldr	r3, [r7, #16]
 8007cb6:	4313      	orrs	r3, r2
 8007cb8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8007cba:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007cbe:	69bb      	ldr	r3, [r7, #24]
 8007cc0:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8007cc2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007cc6:	685b      	ldr	r3, [r3, #4]
 8007cc8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007cca:	693b      	ldr	r3, [r7, #16]
 8007ccc:	43db      	mvns	r3, r3
 8007cce:	69ba      	ldr	r2, [r7, #24]
 8007cd0:	4013      	ands	r3, r2
 8007cd2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8007cd4:	683b      	ldr	r3, [r7, #0]
 8007cd6:	685b      	ldr	r3, [r3, #4]
 8007cd8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007cdc:	2b00      	cmp	r3, #0
 8007cde:	d003      	beq.n	8007ce8 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8007ce0:	69ba      	ldr	r2, [r7, #24]
 8007ce2:	693b      	ldr	r3, [r7, #16]
 8007ce4:	4313      	orrs	r3, r2
 8007ce6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8007ce8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007cec:	69bb      	ldr	r3, [r7, #24]
 8007cee:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8007cf0:	697b      	ldr	r3, [r7, #20]
 8007cf2:	685b      	ldr	r3, [r3, #4]
 8007cf4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007cf6:	693b      	ldr	r3, [r7, #16]
 8007cf8:	43db      	mvns	r3, r3
 8007cfa:	69ba      	ldr	r2, [r7, #24]
 8007cfc:	4013      	ands	r3, r2
 8007cfe:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8007d00:	683b      	ldr	r3, [r7, #0]
 8007d02:	685b      	ldr	r3, [r3, #4]
 8007d04:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007d08:	2b00      	cmp	r3, #0
 8007d0a:	d003      	beq.n	8007d14 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8007d0c:	69ba      	ldr	r2, [r7, #24]
 8007d0e:	693b      	ldr	r3, [r7, #16]
 8007d10:	4313      	orrs	r3, r2
 8007d12:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8007d14:	697b      	ldr	r3, [r7, #20]
 8007d16:	69ba      	ldr	r2, [r7, #24]
 8007d18:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8007d1a:	697b      	ldr	r3, [r7, #20]
 8007d1c:	681b      	ldr	r3, [r3, #0]
 8007d1e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8007d20:	693b      	ldr	r3, [r7, #16]
 8007d22:	43db      	mvns	r3, r3
 8007d24:	69ba      	ldr	r2, [r7, #24]
 8007d26:	4013      	ands	r3, r2
 8007d28:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8007d2a:	683b      	ldr	r3, [r7, #0]
 8007d2c:	685b      	ldr	r3, [r3, #4]
 8007d2e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007d32:	2b00      	cmp	r3, #0
 8007d34:	d003      	beq.n	8007d3e <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8007d36:	69ba      	ldr	r2, [r7, #24]
 8007d38:	693b      	ldr	r3, [r7, #16]
 8007d3a:	4313      	orrs	r3, r2
 8007d3c:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8007d3e:	697b      	ldr	r3, [r7, #20]
 8007d40:	69ba      	ldr	r2, [r7, #24]
 8007d42:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8007d44:	69fb      	ldr	r3, [r7, #28]
 8007d46:	3301      	adds	r3, #1
 8007d48:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8007d4a:	683b      	ldr	r3, [r7, #0]
 8007d4c:	681a      	ldr	r2, [r3, #0]
 8007d4e:	69fb      	ldr	r3, [r7, #28]
 8007d50:	fa22 f303 	lsr.w	r3, r2, r3
 8007d54:	2b00      	cmp	r3, #0
 8007d56:	f47f ae63 	bne.w	8007a20 <HAL_GPIO_Init+0x14>
  }
}
 8007d5a:	bf00      	nop
 8007d5c:	bf00      	nop
 8007d5e:	3724      	adds	r7, #36	; 0x24
 8007d60:	46bd      	mov	sp, r7
 8007d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d66:	4770      	bx	lr
 8007d68:	58000400 	.word	0x58000400

08007d6c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8007d6c:	b480      	push	{r7}
 8007d6e:	b085      	sub	sp, #20
 8007d70:	af00      	add	r7, sp, #0
 8007d72:	6078      	str	r0, [r7, #4]
 8007d74:	460b      	mov	r3, r1
 8007d76:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	691a      	ldr	r2, [r3, #16]
 8007d7c:	887b      	ldrh	r3, [r7, #2]
 8007d7e:	4013      	ands	r3, r2
 8007d80:	2b00      	cmp	r3, #0
 8007d82:	d002      	beq.n	8007d8a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8007d84:	2301      	movs	r3, #1
 8007d86:	73fb      	strb	r3, [r7, #15]
 8007d88:	e001      	b.n	8007d8e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8007d8a:	2300      	movs	r3, #0
 8007d8c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8007d8e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d90:	4618      	mov	r0, r3
 8007d92:	3714      	adds	r7, #20
 8007d94:	46bd      	mov	sp, r7
 8007d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d9a:	4770      	bx	lr

08007d9c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8007d9c:	b480      	push	{r7}
 8007d9e:	b083      	sub	sp, #12
 8007da0:	af00      	add	r7, sp, #0
 8007da2:	6078      	str	r0, [r7, #4]
 8007da4:	460b      	mov	r3, r1
 8007da6:	807b      	strh	r3, [r7, #2]
 8007da8:	4613      	mov	r3, r2
 8007daa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8007dac:	787b      	ldrb	r3, [r7, #1]
 8007dae:	2b00      	cmp	r3, #0
 8007db0:	d003      	beq.n	8007dba <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8007db2:	887a      	ldrh	r2, [r7, #2]
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8007db8:	e003      	b.n	8007dc2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8007dba:	887b      	ldrh	r3, [r7, #2]
 8007dbc:	041a      	lsls	r2, r3, #16
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	619a      	str	r2, [r3, #24]
}
 8007dc2:	bf00      	nop
 8007dc4:	370c      	adds	r7, #12
 8007dc6:	46bd      	mov	sp, r7
 8007dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dcc:	4770      	bx	lr

08007dce <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8007dce:	b480      	push	{r7}
 8007dd0:	b085      	sub	sp, #20
 8007dd2:	af00      	add	r7, sp, #0
 8007dd4:	6078      	str	r0, [r7, #4]
 8007dd6:	460b      	mov	r3, r1
 8007dd8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	695b      	ldr	r3, [r3, #20]
 8007dde:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8007de0:	887a      	ldrh	r2, [r7, #2]
 8007de2:	68fb      	ldr	r3, [r7, #12]
 8007de4:	4013      	ands	r3, r2
 8007de6:	041a      	lsls	r2, r3, #16
 8007de8:	68fb      	ldr	r3, [r7, #12]
 8007dea:	43d9      	mvns	r1, r3
 8007dec:	887b      	ldrh	r3, [r7, #2]
 8007dee:	400b      	ands	r3, r1
 8007df0:	431a      	orrs	r2, r3
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	619a      	str	r2, [r3, #24]
}
 8007df6:	bf00      	nop
 8007df8:	3714      	adds	r7, #20
 8007dfa:	46bd      	mov	sp, r7
 8007dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e00:	4770      	bx	lr

08007e02 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8007e02:	b580      	push	{r7, lr}
 8007e04:	b082      	sub	sp, #8
 8007e06:	af00      	add	r7, sp, #0
 8007e08:	4603      	mov	r3, r0
 8007e0a:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 8007e0c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8007e10:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8007e14:	88fb      	ldrh	r3, [r7, #6]
 8007e16:	4013      	ands	r3, r2
 8007e18:	2b00      	cmp	r3, #0
 8007e1a:	d008      	beq.n	8007e2e <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8007e1c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8007e20:	88fb      	ldrh	r3, [r7, #6]
 8007e22:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8007e26:	88fb      	ldrh	r3, [r7, #6]
 8007e28:	4618      	mov	r0, r3
 8007e2a:	f000 f804 	bl	8007e36 <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 8007e2e:	bf00      	nop
 8007e30:	3708      	adds	r7, #8
 8007e32:	46bd      	mov	sp, r7
 8007e34:	bd80      	pop	{r7, pc}

08007e36 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8007e36:	b480      	push	{r7}
 8007e38:	b083      	sub	sp, #12
 8007e3a:	af00      	add	r7, sp, #0
 8007e3c:	4603      	mov	r3, r0
 8007e3e:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8007e40:	bf00      	nop
 8007e42:	370c      	adds	r7, #12
 8007e44:	46bd      	mov	sp, r7
 8007e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e4a:	4770      	bx	lr

08007e4c <HAL_HRTIM_Init>:
  * @brief  Initialize a HRTIM instance
  * @param  hhrtim pointer to HAL HRTIM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HRTIM_Init(HRTIM_HandleTypeDef * hhrtim)
{
 8007e4c:	b580      	push	{r7, lr}
 8007e4e:	b086      	sub	sp, #24
 8007e50:	af00      	add	r7, sp, #0
 8007e52:	6078      	str	r0, [r7, #4]
  uint8_t timer_idx;
  uint32_t hrtim_mcr;

  /* Check the HRTIM handle allocation */
  if(hhrtim == NULL)
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	2b00      	cmp	r3, #0
 8007e58:	d101      	bne.n	8007e5e <HAL_HRTIM_Init+0x12>
  {
    return HAL_ERROR;
 8007e5a:	2301      	movs	r3, #1
 8007e5c:	e0bd      	b.n	8007fda <HAL_HRTIM_Init+0x18e>
    }
  }
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */

  /* Set the HRTIM state */
  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	2202      	movs	r2, #2
 8007e62:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  /* Initialize the DMA handles */
  hhrtim->hdmaMaster = (DMA_HandleTypeDef *)NULL;
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	2200      	movs	r2, #0
 8007e6a:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
  hhrtim->hdmaTimerA = (DMA_HandleTypeDef *)NULL;
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	2200      	movs	r2, #0
 8007e72:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  hhrtim->hdmaTimerB = (DMA_HandleTypeDef *)NULL;
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	2200      	movs	r2, #0
 8007e7a:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
  hhrtim->hdmaTimerC = (DMA_HandleTypeDef *)NULL;
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	2200      	movs	r2, #0
 8007e82:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
  hhrtim->hdmaTimerD = (DMA_HandleTypeDef *)NULL;
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	2200      	movs	r2, #0
 8007e8a:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
  hhrtim->hdmaTimerE = (DMA_HandleTypeDef *)NULL;
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	2200      	movs	r2, #0
 8007e92:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8

  /* HRTIM output synchronization configuration (if required) */
  if ((hhrtim->Init.SyncOptions & HRTIM_SYNCOPTION_MASTER) != (uint32_t)RESET)
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	689b      	ldr	r3, [r3, #8]
 8007e9a:	f003 0301 	and.w	r3, r3, #1
 8007e9e:	2b00      	cmp	r3, #0
 8007ea0:	d031      	beq.n	8007f06 <HAL_HRTIM_Init+0xba>
    assert_param(IS_HRTIM_SYNCOUTPUTPOLARITY(hhrtim->Init.SyncOutputPolarity));

    /* The synchronization output initialization procedure must be done prior
       to the configuration of the MCU outputs (done within HAL_HRTIM_MspInit)
    */
    if (hhrtim->Instance == HRTIM1)
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	681b      	ldr	r3, [r3, #0]
 8007ea6:	4a4f      	ldr	r2, [pc, #316]	; (8007fe4 <HAL_HRTIM_Init+0x198>)
 8007ea8:	4293      	cmp	r3, r2
 8007eaa:	d10e      	bne.n	8007eca <HAL_HRTIM_Init+0x7e>
    {
      /* Enable the HRTIM peripheral clock */
      __HAL_RCC_HRTIM1_CLK_ENABLE();
 8007eac:	4b4e      	ldr	r3, [pc, #312]	; (8007fe8 <HAL_HRTIM_Init+0x19c>)
 8007eae:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007eb2:	4a4d      	ldr	r2, [pc, #308]	; (8007fe8 <HAL_HRTIM_Init+0x19c>)
 8007eb4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007eb8:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8007ebc:	4b4a      	ldr	r3, [pc, #296]	; (8007fe8 <HAL_HRTIM_Init+0x19c>)
 8007ebe:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8007ec2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8007ec6:	60fb      	str	r3, [r7, #12]
 8007ec8:	68fb      	ldr	r3, [r7, #12]
    }

    hrtim_mcr = hhrtim->Instance->sMasterRegs.MCR;
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	681b      	ldr	r3, [r3, #0]
 8007ece:	681b      	ldr	r3, [r3, #0]
 8007ed0:	613b      	str	r3, [r7, #16]

    /* Set the event to be sent on the synchronization output */
    hrtim_mcr &= ~(HRTIM_MCR_SYNC_SRC);
 8007ed2:	693b      	ldr	r3, [r7, #16]
 8007ed4:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8007ed8:	613b      	str	r3, [r7, #16]
    hrtim_mcr |= (hhrtim->Init.SyncOutputSource & HRTIM_MCR_SYNC_SRC);
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	691b      	ldr	r3, [r3, #16]
 8007ede:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8007ee2:	693a      	ldr	r2, [r7, #16]
 8007ee4:	4313      	orrs	r3, r2
 8007ee6:	613b      	str	r3, [r7, #16]

    /* Set the polarity of the synchronization output */
    hrtim_mcr &= ~(HRTIM_MCR_SYNC_OUT);
 8007ee8:	693b      	ldr	r3, [r7, #16]
 8007eea:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8007eee:	613b      	str	r3, [r7, #16]
    hrtim_mcr |= (hhrtim->Init.SyncOutputPolarity & HRTIM_MCR_SYNC_OUT);
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	695b      	ldr	r3, [r3, #20]
 8007ef4:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8007ef8:	693a      	ldr	r2, [r7, #16]
 8007efa:	4313      	orrs	r3, r2
 8007efc:	613b      	str	r3, [r7, #16]

    /* Update the HRTIM registers */
    hhrtim->Instance->sMasterRegs.MCR = hrtim_mcr;
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	681b      	ldr	r3, [r3, #0]
 8007f02:	693a      	ldr	r2, [r7, #16]
 8007f04:	601a      	str	r2, [r3, #0]

  /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
  hhrtim->MspInitCallback(hhrtim);
#else
  HAL_HRTIM_MspInit(hhrtim);
 8007f06:	6878      	ldr	r0, [r7, #4]
 8007f08:	f7fb fb0a 	bl	8003520 <HAL_HRTIM_MspInit>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */

  /* HRTIM input synchronization configuration (if required) */
  if ((hhrtim->Init.SyncOptions & HRTIM_SYNCOPTION_SLAVE) != (uint32_t)RESET)
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	689b      	ldr	r3, [r3, #8]
 8007f10:	f003 0302 	and.w	r3, r3, #2
 8007f14:	2b00      	cmp	r3, #0
 8007f16:	d012      	beq.n	8007f3e <HAL_HRTIM_Init+0xf2>
  {
    /* Check parameters */
    assert_param(IS_HRTIM_SYNCINPUTSOURCE(hhrtim->Init.SyncInputSource));

    hrtim_mcr = hhrtim->Instance->sMasterRegs.MCR;
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	681b      	ldr	r3, [r3, #0]
 8007f1c:	681b      	ldr	r3, [r3, #0]
 8007f1e:	613b      	str	r3, [r7, #16]

    /* Set the synchronization input source */
    hrtim_mcr &= ~(HRTIM_MCR_SYNC_IN);
 8007f20:	693b      	ldr	r3, [r7, #16]
 8007f22:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007f26:	613b      	str	r3, [r7, #16]
    hrtim_mcr |= (hhrtim->Init.SyncInputSource & HRTIM_MCR_SYNC_IN);
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	68db      	ldr	r3, [r3, #12]
 8007f2c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007f30:	693a      	ldr	r2, [r7, #16]
 8007f32:	4313      	orrs	r3, r2
 8007f34:	613b      	str	r3, [r7, #16]

    /* Update the HRTIM registers */
    hhrtim->Instance->sMasterRegs.MCR = hrtim_mcr;
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	681b      	ldr	r3, [r3, #0]
 8007f3a:	693a      	ldr	r2, [r7, #16]
 8007f3c:	601a      	str	r2, [r3, #0]
  }

  /* Initialize the HRTIM state*/
  hhrtim->State = HAL_HRTIM_STATE_READY;
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	2201      	movs	r2, #1
 8007f42:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  /* Initialize the lock status of the HRTIM HAL API */
  __HAL_UNLOCK(hhrtim);
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	2200      	movs	r2, #0
 8007f4a:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

  /* Initialize timer related parameters */
  for (timer_idx = HRTIM_TIMERINDEX_TIMER_A ;
 8007f4e:	2300      	movs	r3, #0
 8007f50:	75fb      	strb	r3, [r7, #23]
 8007f52:	e03e      	b.n	8007fd2 <HAL_HRTIM_Init+0x186>
       timer_idx <= HRTIM_TIMERINDEX_MASTER ;
       timer_idx++)
  {
    hhrtim->TimerParam[timer_idx].CaptureTrigger1 = HRTIM_CAPTURETRIGGER_NONE;
 8007f54:	7dfa      	ldrb	r2, [r7, #23]
 8007f56:	6879      	ldr	r1, [r7, #4]
 8007f58:	4613      	mov	r3, r2
 8007f5a:	00db      	lsls	r3, r3, #3
 8007f5c:	1a9b      	subs	r3, r3, r2
 8007f5e:	009b      	lsls	r3, r3, #2
 8007f60:	440b      	add	r3, r1
 8007f62:	3318      	adds	r3, #24
 8007f64:	2200      	movs	r2, #0
 8007f66:	601a      	str	r2, [r3, #0]
    hhrtim->TimerParam[timer_idx].CaptureTrigger2 = HRTIM_CAPTURETRIGGER_NONE;
 8007f68:	7dfa      	ldrb	r2, [r7, #23]
 8007f6a:	6879      	ldr	r1, [r7, #4]
 8007f6c:	4613      	mov	r3, r2
 8007f6e:	00db      	lsls	r3, r3, #3
 8007f70:	1a9b      	subs	r3, r3, r2
 8007f72:	009b      	lsls	r3, r3, #2
 8007f74:	440b      	add	r3, r1
 8007f76:	331c      	adds	r3, #28
 8007f78:	2200      	movs	r2, #0
 8007f7a:	601a      	str	r2, [r3, #0]
    hhrtim->TimerParam[timer_idx].InterruptRequests = HRTIM_IT_NONE;
 8007f7c:	7dfa      	ldrb	r2, [r7, #23]
 8007f7e:	6879      	ldr	r1, [r7, #4]
 8007f80:	4613      	mov	r3, r2
 8007f82:	00db      	lsls	r3, r3, #3
 8007f84:	1a9b      	subs	r3, r3, r2
 8007f86:	009b      	lsls	r3, r3, #2
 8007f88:	440b      	add	r3, r1
 8007f8a:	3320      	adds	r3, #32
 8007f8c:	2200      	movs	r2, #0
 8007f8e:	601a      	str	r2, [r3, #0]
    hhrtim->TimerParam[timer_idx].DMARequests = HRTIM_IT_NONE;
 8007f90:	7dfa      	ldrb	r2, [r7, #23]
 8007f92:	6879      	ldr	r1, [r7, #4]
 8007f94:	4613      	mov	r3, r2
 8007f96:	00db      	lsls	r3, r3, #3
 8007f98:	1a9b      	subs	r3, r3, r2
 8007f9a:	009b      	lsls	r3, r3, #2
 8007f9c:	440b      	add	r3, r1
 8007f9e:	3324      	adds	r3, #36	; 0x24
 8007fa0:	2200      	movs	r2, #0
 8007fa2:	601a      	str	r2, [r3, #0]
    hhrtim->TimerParam[timer_idx].DMASrcAddress = 0U;
 8007fa4:	7dfa      	ldrb	r2, [r7, #23]
 8007fa6:	6879      	ldr	r1, [r7, #4]
 8007fa8:	4613      	mov	r3, r2
 8007faa:	00db      	lsls	r3, r3, #3
 8007fac:	1a9b      	subs	r3, r3, r2
 8007fae:	009b      	lsls	r3, r3, #2
 8007fb0:	440b      	add	r3, r1
 8007fb2:	3328      	adds	r3, #40	; 0x28
 8007fb4:	2200      	movs	r2, #0
 8007fb6:	601a      	str	r2, [r3, #0]
    hhrtim->TimerParam[timer_idx].DMASize = 0U;
 8007fb8:	7dfa      	ldrb	r2, [r7, #23]
 8007fba:	6879      	ldr	r1, [r7, #4]
 8007fbc:	4613      	mov	r3, r2
 8007fbe:	00db      	lsls	r3, r3, #3
 8007fc0:	1a9b      	subs	r3, r3, r2
 8007fc2:	009b      	lsls	r3, r3, #2
 8007fc4:	440b      	add	r3, r1
 8007fc6:	3330      	adds	r3, #48	; 0x30
 8007fc8:	2200      	movs	r2, #0
 8007fca:	601a      	str	r2, [r3, #0]
       timer_idx++)
 8007fcc:	7dfb      	ldrb	r3, [r7, #23]
 8007fce:	3301      	adds	r3, #1
 8007fd0:	75fb      	strb	r3, [r7, #23]
       timer_idx <= HRTIM_TIMERINDEX_MASTER ;
 8007fd2:	7dfb      	ldrb	r3, [r7, #23]
 8007fd4:	2b05      	cmp	r3, #5
 8007fd6:	d9bd      	bls.n	8007f54 <HAL_HRTIM_Init+0x108>
  }

  return HAL_OK;
 8007fd8:	2300      	movs	r3, #0
}
 8007fda:	4618      	mov	r0, r3
 8007fdc:	3718      	adds	r7, #24
 8007fde:	46bd      	mov	sp, r7
 8007fe0:	bd80      	pop	{r7, pc}
 8007fe2:	bf00      	nop
 8007fe4:	40017400 	.word	0x40017400
 8007fe8:	58024400 	.word	0x58024400

08007fec <HAL_HRTIM_TimeBaseConfig>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HRTIM_TimeBaseConfig(HRTIM_HandleTypeDef *hhrtim,
                                           uint32_t TimerIdx,
                                           const HRTIM_TimeBaseCfgTypeDef * pTimeBaseCfg)
{
 8007fec:	b580      	push	{r7, lr}
 8007fee:	b084      	sub	sp, #16
 8007ff0:	af00      	add	r7, sp, #0
 8007ff2:	60f8      	str	r0, [r7, #12]
 8007ff4:	60b9      	str	r1, [r7, #8]
 8007ff6:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_HRTIM_TIMERINDEX(TimerIdx));
  assert_param(IS_HRTIM_PRESCALERRATIO(pTimeBaseCfg->PrescalerRatio));
  assert_param(IS_HRTIM_MODE(pTimeBaseCfg->Mode));

  if(hhrtim->State == HAL_HRTIM_STATE_BUSY)
 8007ff8:	68fb      	ldr	r3, [r7, #12]
 8007ffa:	f893 30c1 	ldrb.w	r3, [r3, #193]	; 0xc1
 8007ffe:	b2db      	uxtb	r3, r3
 8008000:	2b02      	cmp	r3, #2
 8008002:	d101      	bne.n	8008008 <HAL_HRTIM_TimeBaseConfig+0x1c>
  {
     return HAL_BUSY;
 8008004:	2302      	movs	r3, #2
 8008006:	e015      	b.n	8008034 <HAL_HRTIM_TimeBaseConfig+0x48>
  }

  /* Set the HRTIM state */
  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8008008:	68fb      	ldr	r3, [r7, #12]
 800800a:	2202      	movs	r2, #2
 800800c:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  if (TimerIdx == HRTIM_TIMERINDEX_MASTER)
 8008010:	68bb      	ldr	r3, [r7, #8]
 8008012:	2b05      	cmp	r3, #5
 8008014:	d104      	bne.n	8008020 <HAL_HRTIM_TimeBaseConfig+0x34>
  {
    /* Configure master timer time base unit */
    HRTIM_MasterBase_Config(hhrtim, pTimeBaseCfg);
 8008016:	6879      	ldr	r1, [r7, #4]
 8008018:	68f8      	ldr	r0, [r7, #12]
 800801a:	f000 fc4d 	bl	80088b8 <HRTIM_MasterBase_Config>
 800801e:	e004      	b.n	800802a <HAL_HRTIM_TimeBaseConfig+0x3e>
  }
  else
  {
    /* Configure timing unit time base unit */
    HRTIM_TimingUnitBase_Config(hhrtim, TimerIdx, pTimeBaseCfg);
 8008020:	687a      	ldr	r2, [r7, #4]
 8008022:	68b9      	ldr	r1, [r7, #8]
 8008024:	68f8      	ldr	r0, [r7, #12]
 8008026:	f000 fc76 	bl	8008916 <HRTIM_TimingUnitBase_Config>
  }

  /* Set HRTIM state */
  hhrtim->State = HAL_HRTIM_STATE_READY;
 800802a:	68fb      	ldr	r3, [r7, #12]
 800802c:	2201      	movs	r2, #1
 800802e:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  return HAL_OK;
 8008032:	2300      	movs	r3, #0
}
 8008034:	4618      	mov	r0, r3
 8008036:	3710      	adds	r7, #16
 8008038:	46bd      	mov	sp, r7
 800803a:	bd80      	pop	{r7, pc}

0800803c <HAL_HRTIM_WaveformTimerConfig>:
  * @note This function must be called before starting the timer
  */
HAL_StatusTypeDef HAL_HRTIM_WaveformTimerConfig(HRTIM_HandleTypeDef * hhrtim,
                                                uint32_t TimerIdx,
                                                const HRTIM_TimerCfgTypeDef * pTimerCfg)
{
 800803c:	b580      	push	{r7, lr}
 800803e:	b084      	sub	sp, #16
 8008040:	af00      	add	r7, sp, #0
 8008042:	60f8      	str	r0, [r7, #12]
 8008044:	60b9      	str	r1, [r7, #8]
 8008046:	607a      	str	r2, [r7, #4]
  assert_param(IS_HRTIM_DACSYNC(pTimerCfg->DACSynchro));
  assert_param(IS_HRTIM_PRELOAD(pTimerCfg->PreloadEnable));
  assert_param(IS_HRTIM_TIMERBURSTMODE(pTimerCfg->BurstMode));
  assert_param(IS_HRTIM_UPDATEONREPETITION(pTimerCfg->RepetitionUpdate));

  if(hhrtim->State == HAL_HRTIM_STATE_BUSY)
 8008048:	68fb      	ldr	r3, [r7, #12]
 800804a:	f893 30c1 	ldrb.w	r3, [r3, #193]	; 0xc1
 800804e:	b2db      	uxtb	r3, r3
 8008050:	2b02      	cmp	r3, #2
 8008052:	d101      	bne.n	8008058 <HAL_HRTIM_WaveformTimerConfig+0x1c>
  {
     return HAL_BUSY;
 8008054:	2302      	movs	r3, #2
 8008056:	e05f      	b.n	8008118 <HAL_HRTIM_WaveformTimerConfig+0xdc>
  }

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 8008058:	68fb      	ldr	r3, [r7, #12]
 800805a:	f893 30c0 	ldrb.w	r3, [r3, #192]	; 0xc0
 800805e:	2b01      	cmp	r3, #1
 8008060:	d101      	bne.n	8008066 <HAL_HRTIM_WaveformTimerConfig+0x2a>
 8008062:	2302      	movs	r3, #2
 8008064:	e058      	b.n	8008118 <HAL_HRTIM_WaveformTimerConfig+0xdc>
 8008066:	68fb      	ldr	r3, [r7, #12]
 8008068:	2201      	movs	r2, #1
 800806a:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 800806e:	68fb      	ldr	r3, [r7, #12]
 8008070:	2202      	movs	r2, #2
 8008072:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  if (TimerIdx == HRTIM_TIMERINDEX_MASTER)
 8008076:	68bb      	ldr	r3, [r7, #8]
 8008078:	2b05      	cmp	r3, #5
 800807a:	d104      	bne.n	8008086 <HAL_HRTIM_WaveformTimerConfig+0x4a>
    assert_param(IS_HRTIM_UPDATEGATING_MASTER(pTimerCfg->UpdateGating));
    assert_param(IS_HRTIM_MASTER_IT(pTimerCfg->InterruptRequests));
    assert_param(IS_HRTIM_MASTER_DMA(pTimerCfg->DMARequests));

    /* Configure master timer */
    HRTIM_MasterWaveform_Config(hhrtim, pTimerCfg);
 800807c:	6879      	ldr	r1, [r7, #4]
 800807e:	68f8      	ldr	r0, [r7, #12]
 8008080:	f000 fc89 	bl	8008996 <HRTIM_MasterWaveform_Config>
 8008084:	e004      	b.n	8008090 <HAL_HRTIM_WaveformTimerConfig+0x54>
    assert_param(IS_HRTIM_TIMUPDATETRIGGER(pTimerCfg->UpdateTrigger));
    assert_param(IS_HRTIM_TIMRESETTRIGGER(pTimerCfg->ResetTrigger));
    assert_param(IS_HRTIM_TIMUPDATEONRESET(pTimerCfg->ResetUpdate));

    /* Configure timing unit */
    HRTIM_TimingUnitWaveform_Config(hhrtim, TimerIdx, pTimerCfg);
 8008086:	687a      	ldr	r2, [r7, #4]
 8008088:	68b9      	ldr	r1, [r7, #8]
 800808a:	68f8      	ldr	r0, [r7, #12]
 800808c:	f000 fcea 	bl	8008a64 <HRTIM_TimingUnitWaveform_Config>
  }

  /* Update timer parameters */
  hhrtim->TimerParam[TimerIdx].InterruptRequests = pTimerCfg->InterruptRequests;
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	6819      	ldr	r1, [r3, #0]
 8008094:	68f8      	ldr	r0, [r7, #12]
 8008096:	68ba      	ldr	r2, [r7, #8]
 8008098:	4613      	mov	r3, r2
 800809a:	00db      	lsls	r3, r3, #3
 800809c:	1a9b      	subs	r3, r3, r2
 800809e:	009b      	lsls	r3, r3, #2
 80080a0:	4403      	add	r3, r0
 80080a2:	3320      	adds	r3, #32
 80080a4:	6019      	str	r1, [r3, #0]
  hhrtim->TimerParam[TimerIdx].DMARequests = pTimerCfg->DMARequests;
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	6859      	ldr	r1, [r3, #4]
 80080aa:	68f8      	ldr	r0, [r7, #12]
 80080ac:	68ba      	ldr	r2, [r7, #8]
 80080ae:	4613      	mov	r3, r2
 80080b0:	00db      	lsls	r3, r3, #3
 80080b2:	1a9b      	subs	r3, r3, r2
 80080b4:	009b      	lsls	r3, r3, #2
 80080b6:	4403      	add	r3, r0
 80080b8:	3324      	adds	r3, #36	; 0x24
 80080ba:	6019      	str	r1, [r3, #0]
  hhrtim->TimerParam[TimerIdx].DMASrcAddress = pTimerCfg->DMASrcAddress;
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	6899      	ldr	r1, [r3, #8]
 80080c0:	68f8      	ldr	r0, [r7, #12]
 80080c2:	68ba      	ldr	r2, [r7, #8]
 80080c4:	4613      	mov	r3, r2
 80080c6:	00db      	lsls	r3, r3, #3
 80080c8:	1a9b      	subs	r3, r3, r2
 80080ca:	009b      	lsls	r3, r3, #2
 80080cc:	4403      	add	r3, r0
 80080ce:	3328      	adds	r3, #40	; 0x28
 80080d0:	6019      	str	r1, [r3, #0]
  hhrtim->TimerParam[TimerIdx].DMADstAddress = pTimerCfg->DMADstAddress;
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	68d9      	ldr	r1, [r3, #12]
 80080d6:	68f8      	ldr	r0, [r7, #12]
 80080d8:	68ba      	ldr	r2, [r7, #8]
 80080da:	4613      	mov	r3, r2
 80080dc:	00db      	lsls	r3, r3, #3
 80080de:	1a9b      	subs	r3, r3, r2
 80080e0:	009b      	lsls	r3, r3, #2
 80080e2:	4403      	add	r3, r0
 80080e4:	332c      	adds	r3, #44	; 0x2c
 80080e6:	6019      	str	r1, [r3, #0]
  hhrtim->TimerParam[TimerIdx].DMASize = pTimerCfg->DMASize;
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	6919      	ldr	r1, [r3, #16]
 80080ec:	68f8      	ldr	r0, [r7, #12]
 80080ee:	68ba      	ldr	r2, [r7, #8]
 80080f0:	4613      	mov	r3, r2
 80080f2:	00db      	lsls	r3, r3, #3
 80080f4:	1a9b      	subs	r3, r3, r2
 80080f6:	009b      	lsls	r3, r3, #2
 80080f8:	4403      	add	r3, r0
 80080fa:	3330      	adds	r3, #48	; 0x30
 80080fc:	6019      	str	r1, [r3, #0]

  /* Force a software update */
  HRTIM_ForceRegistersUpdate(hhrtim, TimerIdx);
 80080fe:	68b9      	ldr	r1, [r7, #8]
 8008100:	68f8      	ldr	r0, [r7, #12]
 8008102:	f000 fec7 	bl	8008e94 <HRTIM_ForceRegistersUpdate>

  hhrtim->State = HAL_HRTIM_STATE_READY;
 8008106:	68fb      	ldr	r3, [r7, #12]
 8008108:	2201      	movs	r2, #1
 800810a:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 800810e:	68fb      	ldr	r3, [r7, #12]
 8008110:	2200      	movs	r2, #0
 8008112:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

  return HAL_OK;
 8008116:	2300      	movs	r3, #0
}
 8008118:	4618      	mov	r0, r3
 800811a:	3710      	adds	r7, #16
 800811c:	46bd      	mov	sp, r7
 800811e:	bd80      	pop	{r7, pc}

08008120 <HAL_HRTIM_WaveformCompareConfig>:
  */
HAL_StatusTypeDef HAL_HRTIM_WaveformCompareConfig(HRTIM_HandleTypeDef * hhrtim,
                                                  uint32_t TimerIdx,
                                                  uint32_t CompareUnit,
                                                  const HRTIM_CompareCfgTypeDef* pCompareCfg)
{
 8008120:	b480      	push	{r7}
 8008122:	b085      	sub	sp, #20
 8008124:	af00      	add	r7, sp, #0
 8008126:	60f8      	str	r0, [r7, #12]
 8008128:	60b9      	str	r1, [r7, #8]
 800812a:	607a      	str	r2, [r7, #4]
 800812c:	603b      	str	r3, [r7, #0]
  /* Check parameters */
  assert_param(IS_HRTIM_TIMERINDEX(TimerIdx));

  if(hhrtim->State == HAL_HRTIM_STATE_BUSY)
 800812e:	68fb      	ldr	r3, [r7, #12]
 8008130:	f893 30c1 	ldrb.w	r3, [r3, #193]	; 0xc1
 8008134:	b2db      	uxtb	r3, r3
 8008136:	2b02      	cmp	r3, #2
 8008138:	d101      	bne.n	800813e <HAL_HRTIM_WaveformCompareConfig+0x1e>
  {
     return HAL_BUSY;
 800813a:	2302      	movs	r3, #2
 800813c:	e157      	b.n	80083ee <HAL_HRTIM_WaveformCompareConfig+0x2ce>
  }

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 800813e:	68fb      	ldr	r3, [r7, #12]
 8008140:	f893 30c0 	ldrb.w	r3, [r3, #192]	; 0xc0
 8008144:	2b01      	cmp	r3, #1
 8008146:	d101      	bne.n	800814c <HAL_HRTIM_WaveformCompareConfig+0x2c>
 8008148:	2302      	movs	r3, #2
 800814a:	e150      	b.n	80083ee <HAL_HRTIM_WaveformCompareConfig+0x2ce>
 800814c:	68fb      	ldr	r3, [r7, #12]
 800814e:	2201      	movs	r2, #1
 8008150:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8008154:	68fb      	ldr	r3, [r7, #12]
 8008156:	2202      	movs	r2, #2
 8008158:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  /* Configure the compare unit */
  if (TimerIdx == HRTIM_TIMERINDEX_MASTER)
 800815c:	68bb      	ldr	r3, [r7, #8]
 800815e:	2b05      	cmp	r3, #5
 8008160:	d140      	bne.n	80081e4 <HAL_HRTIM_WaveformCompareConfig+0xc4>
  {
    switch (CompareUnit)
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	3b01      	subs	r3, #1
 8008166:	2b07      	cmp	r3, #7
 8008168:	d82a      	bhi.n	80081c0 <HAL_HRTIM_WaveformCompareConfig+0xa0>
 800816a:	a201      	add	r2, pc, #4	; (adr r2, 8008170 <HAL_HRTIM_WaveformCompareConfig+0x50>)
 800816c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008170:	08008191 	.word	0x08008191
 8008174:	0800819d 	.word	0x0800819d
 8008178:	080081c1 	.word	0x080081c1
 800817c:	080081a9 	.word	0x080081a9
 8008180:	080081c1 	.word	0x080081c1
 8008184:	080081c1 	.word	0x080081c1
 8008188:	080081c1 	.word	0x080081c1
 800818c:	080081b5 	.word	0x080081b5
    {
      case HRTIM_COMPAREUNIT_1:
        {
        hhrtim->Instance->sMasterRegs.MCMP1R = pCompareCfg->CompareValue;
 8008190:	68fb      	ldr	r3, [r7, #12]
 8008192:	681b      	ldr	r3, [r3, #0]
 8008194:	683a      	ldr	r2, [r7, #0]
 8008196:	6812      	ldr	r2, [r2, #0]
 8008198:	61da      	str	r2, [r3, #28]
        break;
 800819a:	e01a      	b.n	80081d2 <HAL_HRTIM_WaveformCompareConfig+0xb2>
        }

      case HRTIM_COMPAREUNIT_2:
        {
        hhrtim->Instance->sMasterRegs.MCMP2R = pCompareCfg->CompareValue;
 800819c:	68fb      	ldr	r3, [r7, #12]
 800819e:	681b      	ldr	r3, [r3, #0]
 80081a0:	683a      	ldr	r2, [r7, #0]
 80081a2:	6812      	ldr	r2, [r2, #0]
 80081a4:	625a      	str	r2, [r3, #36]	; 0x24
        break;
 80081a6:	e014      	b.n	80081d2 <HAL_HRTIM_WaveformCompareConfig+0xb2>
        }

      case HRTIM_COMPAREUNIT_3:
        {
        hhrtim->Instance->sMasterRegs.MCMP3R = pCompareCfg->CompareValue;
 80081a8:	68fb      	ldr	r3, [r7, #12]
 80081aa:	681b      	ldr	r3, [r3, #0]
 80081ac:	683a      	ldr	r2, [r7, #0]
 80081ae:	6812      	ldr	r2, [r2, #0]
 80081b0:	629a      	str	r2, [r3, #40]	; 0x28
        break;
 80081b2:	e00e      	b.n	80081d2 <HAL_HRTIM_WaveformCompareConfig+0xb2>
        }

      case HRTIM_COMPAREUNIT_4:
        {
        hhrtim->Instance->sMasterRegs.MCMP4R = pCompareCfg->CompareValue;
 80081b4:	68fb      	ldr	r3, [r7, #12]
 80081b6:	681b      	ldr	r3, [r3, #0]
 80081b8:	683a      	ldr	r2, [r7, #0]
 80081ba:	6812      	ldr	r2, [r2, #0]
 80081bc:	62da      	str	r2, [r3, #44]	; 0x2c
        break;
 80081be:	e008      	b.n	80081d2 <HAL_HRTIM_WaveformCompareConfig+0xb2>
        }

      default:
        {
        hhrtim->State = HAL_HRTIM_STATE_ERROR;
 80081c0:	68fb      	ldr	r3, [r7, #12]
 80081c2:	2207      	movs	r2, #7
 80081c4:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

        /* Process Unlocked */
        __HAL_UNLOCK(hhrtim);
 80081c8:	68fb      	ldr	r3, [r7, #12]
 80081ca:	2200      	movs	r2, #0
 80081cc:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

        break;
 80081d0:	bf00      	nop
        }
    }

    if(hhrtim->State == HAL_HRTIM_STATE_ERROR)
 80081d2:	68fb      	ldr	r3, [r7, #12]
 80081d4:	f893 30c1 	ldrb.w	r3, [r3, #193]	; 0xc1
 80081d8:	b2db      	uxtb	r3, r3
 80081da:	2b07      	cmp	r3, #7
 80081dc:	f040 80fe 	bne.w	80083dc <HAL_HRTIM_WaveformCompareConfig+0x2bc>
    {
     return HAL_ERROR;
 80081e0:	2301      	movs	r3, #1
 80081e2:	e104      	b.n	80083ee <HAL_HRTIM_WaveformCompareConfig+0x2ce>
    }

  }
  else
  {
    switch (CompareUnit)
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	3b01      	subs	r3, #1
 80081e8:	2b07      	cmp	r3, #7
 80081ea:	f200 80e3 	bhi.w	80083b4 <HAL_HRTIM_WaveformCompareConfig+0x294>
 80081ee:	a201      	add	r2, pc, #4	; (adr r2, 80081f4 <HAL_HRTIM_WaveformCompareConfig+0xd4>)
 80081f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80081f4:	08008215 	.word	0x08008215
 80081f8:	08008229 	.word	0x08008229
 80081fc:	080083b5 	.word	0x080083b5
 8008200:	080082e5 	.word	0x080082e5
 8008204:	080083b5 	.word	0x080083b5
 8008208:	080083b5 	.word	0x080083b5
 800820c:	080083b5 	.word	0x080083b5
 8008210:	080082f9 	.word	0x080082f9
    {
    case HRTIM_COMPAREUNIT_1:
      {
        /* Set the compare value */
        hhrtim->Instance->sTimerxRegs[TimerIdx].CMP1xR = pCompareCfg->CompareValue;
 8008214:	68fb      	ldr	r3, [r7, #12]
 8008216:	6819      	ldr	r1, [r3, #0]
 8008218:	683b      	ldr	r3, [r7, #0]
 800821a:	681a      	ldr	r2, [r3, #0]
 800821c:	68bb      	ldr	r3, [r7, #8]
 800821e:	01db      	lsls	r3, r3, #7
 8008220:	440b      	add	r3, r1
 8008222:	339c      	adds	r3, #156	; 0x9c
 8008224:	601a      	str	r2, [r3, #0]
        break;
 8008226:	e0d1      	b.n	80083cc <HAL_HRTIM_WaveformCompareConfig+0x2ac>
      {
        /* Check parameters */
        assert_param(IS_HRTIM_COMPAREUNIT_AUTODELAYEDMODE(CompareUnit, pCompareCfg->AutoDelayedMode));

        /* Set the compare value */
        hhrtim->Instance->sTimerxRegs[TimerIdx].CMP2xR = pCompareCfg->CompareValue;
 8008228:	68fb      	ldr	r3, [r7, #12]
 800822a:	6819      	ldr	r1, [r3, #0]
 800822c:	683b      	ldr	r3, [r7, #0]
 800822e:	681a      	ldr	r2, [r3, #0]
 8008230:	68bb      	ldr	r3, [r7, #8]
 8008232:	01db      	lsls	r3, r3, #7
 8008234:	440b      	add	r3, r1
 8008236:	33a4      	adds	r3, #164	; 0xa4
 8008238:	601a      	str	r2, [r3, #0]

        if (pCompareCfg->AutoDelayedMode != HRTIM_AUTODELAYEDMODE_REGULAR)
 800823a:	683b      	ldr	r3, [r7, #0]
 800823c:	685b      	ldr	r3, [r3, #4]
 800823e:	2b00      	cmp	r3, #0
 8008240:	d03f      	beq.n	80082c2 <HAL_HRTIM_WaveformCompareConfig+0x1a2>
        {
          /* Configure auto-delayed mode */
          /* DELCMP2 bitfield must be reset when reprogrammed from one value */
          /* to the other to reinitialize properly the auto-delayed mechanism */
          hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR &= ~HRTIM_TIMCR_DELCMP2;
 8008242:	68fb      	ldr	r3, [r7, #12]
 8008244:	681a      	ldr	r2, [r3, #0]
 8008246:	68bb      	ldr	r3, [r7, #8]
 8008248:	3301      	adds	r3, #1
 800824a:	01db      	lsls	r3, r3, #7
 800824c:	4413      	add	r3, r2
 800824e:	681b      	ldr	r3, [r3, #0]
 8008250:	68fa      	ldr	r2, [r7, #12]
 8008252:	6811      	ldr	r1, [r2, #0]
 8008254:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8008258:	68bb      	ldr	r3, [r7, #8]
 800825a:	3301      	adds	r3, #1
 800825c:	01db      	lsls	r3, r3, #7
 800825e:	440b      	add	r3, r1
 8008260:	601a      	str	r2, [r3, #0]
          hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR |= pCompareCfg->AutoDelayedMode;
 8008262:	68fb      	ldr	r3, [r7, #12]
 8008264:	681a      	ldr	r2, [r3, #0]
 8008266:	68bb      	ldr	r3, [r7, #8]
 8008268:	3301      	adds	r3, #1
 800826a:	01db      	lsls	r3, r3, #7
 800826c:	4413      	add	r3, r2
 800826e:	681a      	ldr	r2, [r3, #0]
 8008270:	683b      	ldr	r3, [r7, #0]
 8008272:	685b      	ldr	r3, [r3, #4]
 8008274:	68f9      	ldr	r1, [r7, #12]
 8008276:	6809      	ldr	r1, [r1, #0]
 8008278:	431a      	orrs	r2, r3
 800827a:	68bb      	ldr	r3, [r7, #8]
 800827c:	3301      	adds	r3, #1
 800827e:	01db      	lsls	r3, r3, #7
 8008280:	440b      	add	r3, r1
 8008282:	601a      	str	r2, [r3, #0]

          /* Set the compare value for timeout compare unit (if any) */
          if (pCompareCfg->AutoDelayedMode == HRTIM_AUTODELAYEDMODE_AUTODELAYED_TIMEOUTCMP1)
 8008284:	683b      	ldr	r3, [r7, #0]
 8008286:	685b      	ldr	r3, [r3, #4]
 8008288:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800828c:	d109      	bne.n	80082a2 <HAL_HRTIM_WaveformCompareConfig+0x182>
          {
            hhrtim->Instance->sTimerxRegs[TimerIdx].CMP1xR = pCompareCfg->AutoDelayedTimeout;
 800828e:	68fb      	ldr	r3, [r7, #12]
 8008290:	6819      	ldr	r1, [r3, #0]
 8008292:	683b      	ldr	r3, [r7, #0]
 8008294:	689a      	ldr	r2, [r3, #8]
 8008296:	68bb      	ldr	r3, [r7, #8]
 8008298:	01db      	lsls	r3, r3, #7
 800829a:	440b      	add	r3, r1
 800829c:	339c      	adds	r3, #156	; 0x9c
 800829e:	601a      	str	r2, [r3, #0]
        else
        {
          /* Clear HRTIM_TIMxCR.DELCMP2 bitfield */
          MODIFY_REG(hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR, HRTIM_TIMCR_DELCMP2, 0U);
        }
         break;
 80082a0:	e091      	b.n	80083c6 <HAL_HRTIM_WaveformCompareConfig+0x2a6>
          else if (pCompareCfg->AutoDelayedMode == HRTIM_AUTODELAYEDMODE_AUTODELAYED_TIMEOUTCMP3)
 80082a2:	683b      	ldr	r3, [r7, #0]
 80082a4:	685b      	ldr	r3, [r3, #4]
 80082a6:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80082aa:	f040 808c 	bne.w	80083c6 <HAL_HRTIM_WaveformCompareConfig+0x2a6>
            hhrtim->Instance->sTimerxRegs[TimerIdx].CMP3xR = pCompareCfg->AutoDelayedTimeout;
 80082ae:	68fb      	ldr	r3, [r7, #12]
 80082b0:	6819      	ldr	r1, [r3, #0]
 80082b2:	683b      	ldr	r3, [r7, #0]
 80082b4:	689a      	ldr	r2, [r3, #8]
 80082b6:	68bb      	ldr	r3, [r7, #8]
 80082b8:	01db      	lsls	r3, r3, #7
 80082ba:	440b      	add	r3, r1
 80082bc:	33a8      	adds	r3, #168	; 0xa8
 80082be:	601a      	str	r2, [r3, #0]
         break;
 80082c0:	e081      	b.n	80083c6 <HAL_HRTIM_WaveformCompareConfig+0x2a6>
          MODIFY_REG(hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR, HRTIM_TIMCR_DELCMP2, 0U);
 80082c2:	68fb      	ldr	r3, [r7, #12]
 80082c4:	681a      	ldr	r2, [r3, #0]
 80082c6:	68bb      	ldr	r3, [r7, #8]
 80082c8:	3301      	adds	r3, #1
 80082ca:	01db      	lsls	r3, r3, #7
 80082cc:	4413      	add	r3, r2
 80082ce:	681b      	ldr	r3, [r3, #0]
 80082d0:	68fa      	ldr	r2, [r7, #12]
 80082d2:	6811      	ldr	r1, [r2, #0]
 80082d4:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80082d8:	68bb      	ldr	r3, [r7, #8]
 80082da:	3301      	adds	r3, #1
 80082dc:	01db      	lsls	r3, r3, #7
 80082de:	440b      	add	r3, r1
 80082e0:	601a      	str	r2, [r3, #0]
         break;
 80082e2:	e070      	b.n	80083c6 <HAL_HRTIM_WaveformCompareConfig+0x2a6>
      }

    case HRTIM_COMPAREUNIT_3:
      {
        /* Set the compare value */
        hhrtim->Instance->sTimerxRegs[TimerIdx].CMP3xR = pCompareCfg->CompareValue;
 80082e4:	68fb      	ldr	r3, [r7, #12]
 80082e6:	6819      	ldr	r1, [r3, #0]
 80082e8:	683b      	ldr	r3, [r7, #0]
 80082ea:	681a      	ldr	r2, [r3, #0]
 80082ec:	68bb      	ldr	r3, [r7, #8]
 80082ee:	01db      	lsls	r3, r3, #7
 80082f0:	440b      	add	r3, r1
 80082f2:	33a8      	adds	r3, #168	; 0xa8
 80082f4:	601a      	str	r2, [r3, #0]
        break;
 80082f6:	e069      	b.n	80083cc <HAL_HRTIM_WaveformCompareConfig+0x2ac>
      {
        /* Check parameters */
        assert_param(IS_HRTIM_COMPAREUNIT_AUTODELAYEDMODE(CompareUnit, pCompareCfg->AutoDelayedMode));

        /* Set the compare value */
        hhrtim->Instance->sTimerxRegs[TimerIdx].CMP4xR = pCompareCfg->CompareValue;
 80082f8:	68fb      	ldr	r3, [r7, #12]
 80082fa:	6819      	ldr	r1, [r3, #0]
 80082fc:	683b      	ldr	r3, [r7, #0]
 80082fe:	681a      	ldr	r2, [r3, #0]
 8008300:	68bb      	ldr	r3, [r7, #8]
 8008302:	01db      	lsls	r3, r3, #7
 8008304:	440b      	add	r3, r1
 8008306:	33ac      	adds	r3, #172	; 0xac
 8008308:	601a      	str	r2, [r3, #0]

        if (pCompareCfg->AutoDelayedMode != HRTIM_AUTODELAYEDMODE_REGULAR)
 800830a:	683b      	ldr	r3, [r7, #0]
 800830c:	685b      	ldr	r3, [r3, #4]
 800830e:	2b00      	cmp	r3, #0
 8008310:	d03f      	beq.n	8008392 <HAL_HRTIM_WaveformCompareConfig+0x272>
        {
          /* Configure auto-delayed mode */
          /* DELCMP4 bitfield must be reset when reprogrammed from one value */
          /* to the other to reinitialize properly the auto-delayed mechanism */
          hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR &= ~HRTIM_TIMCR_DELCMP4;
 8008312:	68fb      	ldr	r3, [r7, #12]
 8008314:	681a      	ldr	r2, [r3, #0]
 8008316:	68bb      	ldr	r3, [r7, #8]
 8008318:	3301      	adds	r3, #1
 800831a:	01db      	lsls	r3, r3, #7
 800831c:	4413      	add	r3, r2
 800831e:	681b      	ldr	r3, [r3, #0]
 8008320:	68fa      	ldr	r2, [r7, #12]
 8008322:	6811      	ldr	r1, [r2, #0]
 8008324:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8008328:	68bb      	ldr	r3, [r7, #8]
 800832a:	3301      	adds	r3, #1
 800832c:	01db      	lsls	r3, r3, #7
 800832e:	440b      	add	r3, r1
 8008330:	601a      	str	r2, [r3, #0]
          hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR |= (pCompareCfg->AutoDelayedMode << 2U);
 8008332:	68fb      	ldr	r3, [r7, #12]
 8008334:	681a      	ldr	r2, [r3, #0]
 8008336:	68bb      	ldr	r3, [r7, #8]
 8008338:	3301      	adds	r3, #1
 800833a:	01db      	lsls	r3, r3, #7
 800833c:	4413      	add	r3, r2
 800833e:	681a      	ldr	r2, [r3, #0]
 8008340:	683b      	ldr	r3, [r7, #0]
 8008342:	685b      	ldr	r3, [r3, #4]
 8008344:	009b      	lsls	r3, r3, #2
 8008346:	68f9      	ldr	r1, [r7, #12]
 8008348:	6809      	ldr	r1, [r1, #0]
 800834a:	431a      	orrs	r2, r3
 800834c:	68bb      	ldr	r3, [r7, #8]
 800834e:	3301      	adds	r3, #1
 8008350:	01db      	lsls	r3, r3, #7
 8008352:	440b      	add	r3, r1
 8008354:	601a      	str	r2, [r3, #0]

          /* Set the compare value for timeout compare unit (if any) */
          if (pCompareCfg->AutoDelayedMode == HRTIM_AUTODELAYEDMODE_AUTODELAYED_TIMEOUTCMP1)
 8008356:	683b      	ldr	r3, [r7, #0]
 8008358:	685b      	ldr	r3, [r3, #4]
 800835a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800835e:	d109      	bne.n	8008374 <HAL_HRTIM_WaveformCompareConfig+0x254>
          {
            hhrtim->Instance->sTimerxRegs[TimerIdx].CMP1xR = pCompareCfg->AutoDelayedTimeout;
 8008360:	68fb      	ldr	r3, [r7, #12]
 8008362:	6819      	ldr	r1, [r3, #0]
 8008364:	683b      	ldr	r3, [r7, #0]
 8008366:	689a      	ldr	r2, [r3, #8]
 8008368:	68bb      	ldr	r3, [r7, #8]
 800836a:	01db      	lsls	r3, r3, #7
 800836c:	440b      	add	r3, r1
 800836e:	339c      	adds	r3, #156	; 0x9c
 8008370:	601a      	str	r2, [r3, #0]
        else
        {
          /* Clear HRTIM_TIMxCR.DELCMP4 bitfield */
          MODIFY_REG(hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR, HRTIM_TIMCR_DELCMP4, 0U);
        }
         break;
 8008372:	e02a      	b.n	80083ca <HAL_HRTIM_WaveformCompareConfig+0x2aa>
          else if (pCompareCfg->AutoDelayedMode == HRTIM_AUTODELAYEDMODE_AUTODELAYED_TIMEOUTCMP3)
 8008374:	683b      	ldr	r3, [r7, #0]
 8008376:	685b      	ldr	r3, [r3, #4]
 8008378:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800837c:	d125      	bne.n	80083ca <HAL_HRTIM_WaveformCompareConfig+0x2aa>
            hhrtim->Instance->sTimerxRegs[TimerIdx].CMP3xR = pCompareCfg->AutoDelayedTimeout;
 800837e:	68fb      	ldr	r3, [r7, #12]
 8008380:	6819      	ldr	r1, [r3, #0]
 8008382:	683b      	ldr	r3, [r7, #0]
 8008384:	689a      	ldr	r2, [r3, #8]
 8008386:	68bb      	ldr	r3, [r7, #8]
 8008388:	01db      	lsls	r3, r3, #7
 800838a:	440b      	add	r3, r1
 800838c:	33a8      	adds	r3, #168	; 0xa8
 800838e:	601a      	str	r2, [r3, #0]
         break;
 8008390:	e01b      	b.n	80083ca <HAL_HRTIM_WaveformCompareConfig+0x2aa>
          MODIFY_REG(hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR, HRTIM_TIMCR_DELCMP4, 0U);
 8008392:	68fb      	ldr	r3, [r7, #12]
 8008394:	681a      	ldr	r2, [r3, #0]
 8008396:	68bb      	ldr	r3, [r7, #8]
 8008398:	3301      	adds	r3, #1
 800839a:	01db      	lsls	r3, r3, #7
 800839c:	4413      	add	r3, r2
 800839e:	681b      	ldr	r3, [r3, #0]
 80083a0:	68fa      	ldr	r2, [r7, #12]
 80083a2:	6811      	ldr	r1, [r2, #0]
 80083a4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80083a8:	68bb      	ldr	r3, [r7, #8]
 80083aa:	3301      	adds	r3, #1
 80083ac:	01db      	lsls	r3, r3, #7
 80083ae:	440b      	add	r3, r1
 80083b0:	601a      	str	r2, [r3, #0]
         break;
 80083b2:	e00a      	b.n	80083ca <HAL_HRTIM_WaveformCompareConfig+0x2aa>
      }

  default:
     {
      hhrtim->State = HAL_HRTIM_STATE_ERROR;
 80083b4:	68fb      	ldr	r3, [r7, #12]
 80083b6:	2207      	movs	r2, #7
 80083b8:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

      /* Process Unlocked */
      __HAL_UNLOCK(hhrtim);
 80083bc:	68fb      	ldr	r3, [r7, #12]
 80083be:	2200      	movs	r2, #0
 80083c0:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

      break;
 80083c4:	e002      	b.n	80083cc <HAL_HRTIM_WaveformCompareConfig+0x2ac>
         break;
 80083c6:	bf00      	nop
 80083c8:	e000      	b.n	80083cc <HAL_HRTIM_WaveformCompareConfig+0x2ac>
         break;
 80083ca:	bf00      	nop
     }
   }

   if(hhrtim->State == HAL_HRTIM_STATE_ERROR)
 80083cc:	68fb      	ldr	r3, [r7, #12]
 80083ce:	f893 30c1 	ldrb.w	r3, [r3, #193]	; 0xc1
 80083d2:	b2db      	uxtb	r3, r3
 80083d4:	2b07      	cmp	r3, #7
 80083d6:	d101      	bne.n	80083dc <HAL_HRTIM_WaveformCompareConfig+0x2bc>
   {
     return HAL_ERROR;
 80083d8:	2301      	movs	r3, #1
 80083da:	e008      	b.n	80083ee <HAL_HRTIM_WaveformCompareConfig+0x2ce>
   }

  }
  hhrtim->State = HAL_HRTIM_STATE_READY;
 80083dc:	68fb      	ldr	r3, [r7, #12]
 80083de:	2201      	movs	r2, #1
 80083e0:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 80083e4:	68fb      	ldr	r3, [r7, #12]
 80083e6:	2200      	movs	r2, #0
 80083e8:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

  return HAL_OK;
 80083ec:	2300      	movs	r3, #0
}
 80083ee:	4618      	mov	r0, r3
 80083f0:	3714      	adds	r7, #20
 80083f2:	46bd      	mov	sp, r7
 80083f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083f8:	4770      	bx	lr
 80083fa:	bf00      	nop

080083fc <HAL_HRTIM_WaveformOutputConfig>:
  */
HAL_StatusTypeDef HAL_HRTIM_WaveformOutputConfig(HRTIM_HandleTypeDef * hhrtim,
                                                uint32_t TimerIdx,
                                                uint32_t Output,
                                                const HRTIM_OutputCfgTypeDef * pOutputCfg)
{
 80083fc:	b580      	push	{r7, lr}
 80083fe:	b084      	sub	sp, #16
 8008400:	af00      	add	r7, sp, #0
 8008402:	60f8      	str	r0, [r7, #12]
 8008404:	60b9      	str	r1, [r7, #8]
 8008406:	607a      	str	r2, [r7, #4]
 8008408:	603b      	str	r3, [r7, #0]
  assert_param(IS_HRTIM_OUTPUTIDLEMODE(pOutputCfg->IdleMode));
  assert_param(IS_HRTIM_OUTPUTFAULTLEVEL(pOutputCfg->FaultLevel));
  assert_param(IS_HRTIM_OUTPUTCHOPPERMODE(pOutputCfg->ChopperModeEnable));
  assert_param(IS_HRTIM_OUTPUTBURSTMODEENTRY(pOutputCfg->BurstModeEntryDelayed));

  if(hhrtim->State == HAL_HRTIM_STATE_BUSY)
 800840a:	68fb      	ldr	r3, [r7, #12]
 800840c:	f893 30c1 	ldrb.w	r3, [r3, #193]	; 0xc1
 8008410:	b2db      	uxtb	r3, r3
 8008412:	2b02      	cmp	r3, #2
 8008414:	d101      	bne.n	800841a <HAL_HRTIM_WaveformOutputConfig+0x1e>
  {
     return HAL_BUSY;
 8008416:	2302      	movs	r3, #2
 8008418:	e01d      	b.n	8008456 <HAL_HRTIM_WaveformOutputConfig+0x5a>
  }

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 800841a:	68fb      	ldr	r3, [r7, #12]
 800841c:	f893 30c0 	ldrb.w	r3, [r3, #192]	; 0xc0
 8008420:	2b01      	cmp	r3, #1
 8008422:	d101      	bne.n	8008428 <HAL_HRTIM_WaveformOutputConfig+0x2c>
 8008424:	2302      	movs	r3, #2
 8008426:	e016      	b.n	8008456 <HAL_HRTIM_WaveformOutputConfig+0x5a>
 8008428:	68fb      	ldr	r3, [r7, #12]
 800842a:	2201      	movs	r2, #1
 800842c:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8008430:	68fb      	ldr	r3, [r7, #12]
 8008432:	2202      	movs	r2, #2
 8008434:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  /* Configure the timer output */
  HRTIM_OutputConfig(hhrtim,
 8008438:	683b      	ldr	r3, [r7, #0]
 800843a:	687a      	ldr	r2, [r7, #4]
 800843c:	68b9      	ldr	r1, [r7, #8]
 800843e:	68f8      	ldr	r0, [r7, #12]
 8008440:	f000 fc50 	bl	8008ce4 <HRTIM_OutputConfig>
                     TimerIdx,
                     Output,
                     pOutputCfg);

  hhrtim->State = HAL_HRTIM_STATE_READY;
 8008444:	68fb      	ldr	r3, [r7, #12]
 8008446:	2201      	movs	r2, #1
 8008448:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 800844c:	68fb      	ldr	r3, [r7, #12]
 800844e:	2200      	movs	r2, #0
 8008450:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

  return HAL_OK;
 8008454:	2300      	movs	r3, #0
}
 8008456:	4618      	mov	r0, r3
 8008458:	3710      	adds	r7, #16
 800845a:	46bd      	mov	sp, r7
 800845c:	bd80      	pop	{r7, pc}

0800845e <HAL_HRTIM_WaveformOutputStart>:
  *                    @arg HRTIM_OUTPUT_TE2: Timer E - Output 2
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HRTIM_WaveformOutputStart(HRTIM_HandleTypeDef * hhrtim,
                                                uint32_t OutputsToStart)
{
 800845e:	b480      	push	{r7}
 8008460:	b083      	sub	sp, #12
 8008462:	af00      	add	r7, sp, #0
 8008464:	6078      	str	r0, [r7, #4]
 8008466:	6039      	str	r1, [r7, #0]
   /* Check the parameters */
  assert_param(IS_HRTIM_OUTPUT(OutputsToStart));

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	f893 30c0 	ldrb.w	r3, [r3, #192]	; 0xc0
 800846e:	2b01      	cmp	r3, #1
 8008470:	d101      	bne.n	8008476 <HAL_HRTIM_WaveformOutputStart+0x18>
 8008472:	2302      	movs	r3, #2
 8008474:	e01a      	b.n	80084ac <HAL_HRTIM_WaveformOutputStart+0x4e>
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	2201      	movs	r2, #1
 800847a:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	2202      	movs	r2, #2
 8008482:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  /* Enable the HRTIM outputs */
  hhrtim->Instance->sCommonRegs.OENR |= (OutputsToStart);
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	681b      	ldr	r3, [r3, #0]
 800848a:	f8d3 1394 	ldr.w	r1, [r3, #916]	; 0x394
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	681b      	ldr	r3, [r3, #0]
 8008492:	683a      	ldr	r2, [r7, #0]
 8008494:	430a      	orrs	r2, r1
 8008496:	f8c3 2394 	str.w	r2, [r3, #916]	; 0x394

  hhrtim->State = HAL_HRTIM_STATE_READY;
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	2201      	movs	r2, #1
 800849e:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	2200      	movs	r2, #0
 80084a6:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

  return HAL_OK;
 80084aa:	2300      	movs	r3, #0
}
 80084ac:	4618      	mov	r0, r3
 80084ae:	370c      	adds	r7, #12
 80084b0:	46bd      	mov	sp, r7
 80084b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084b6:	4770      	bx	lr

080084b8 <HAL_HRTIM_WaveformOutputStop>:
  *                    @arg HRTIM_OUTPUT_TE2: Timer E - Output 2
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HRTIM_WaveformOutputStop(HRTIM_HandleTypeDef * hhrtim,
                                               uint32_t OutputsToStop)
{
 80084b8:	b480      	push	{r7}
 80084ba:	b083      	sub	sp, #12
 80084bc:	af00      	add	r7, sp, #0
 80084be:	6078      	str	r0, [r7, #4]
 80084c0:	6039      	str	r1, [r7, #0]
   /* Check the parameters */
  assert_param(IS_HRTIM_OUTPUT(OutputsToStop));

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	f893 30c0 	ldrb.w	r3, [r3, #192]	; 0xc0
 80084c8:	2b01      	cmp	r3, #1
 80084ca:	d101      	bne.n	80084d0 <HAL_HRTIM_WaveformOutputStop+0x18>
 80084cc:	2302      	movs	r3, #2
 80084ce:	e01a      	b.n	8008506 <HAL_HRTIM_WaveformOutputStop+0x4e>
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	2201      	movs	r2, #1
 80084d4:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	2202      	movs	r2, #2
 80084dc:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  /* Enable the HRTIM outputs */
  hhrtim->Instance->sCommonRegs.ODISR |= (OutputsToStop);
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	681b      	ldr	r3, [r3, #0]
 80084e4:	f8d3 1398 	ldr.w	r1, [r3, #920]	; 0x398
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	681b      	ldr	r3, [r3, #0]
 80084ec:	683a      	ldr	r2, [r7, #0]
 80084ee:	430a      	orrs	r2, r1
 80084f0:	f8c3 2398 	str.w	r2, [r3, #920]	; 0x398

  hhrtim->State = HAL_HRTIM_STATE_READY;
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	2201      	movs	r2, #1
 80084f8:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	2200      	movs	r2, #0
 8008500:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

  return HAL_OK;
 8008504:	2300      	movs	r3, #0
}
 8008506:	4618      	mov	r0, r3
 8008508:	370c      	adds	r7, #12
 800850a:	46bd      	mov	sp, r7
 800850c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008510:	4770      	bx	lr
	...

08008514 <HAL_HRTIM_WaveformCountStart_IT>:
  *       function.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HRTIM_WaveformCountStart_IT(HRTIM_HandleTypeDef * hhrtim,
                                                    uint32_t Timers)
{
 8008514:	b480      	push	{r7}
 8008516:	b085      	sub	sp, #20
 8008518:	af00      	add	r7, sp, #0
 800851a:	6078      	str	r0, [r7, #4]
 800851c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_HRTIM_TIMERID(Timers));

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	f893 30c0 	ldrb.w	r3, [r3, #192]	; 0xc0
 8008524:	2b01      	cmp	r3, #1
 8008526:	d101      	bne.n	800852c <HAL_HRTIM_WaveformCountStart_IT+0x18>
 8008528:	2302      	movs	r3, #2
 800852a:	e05b      	b.n	80085e4 <HAL_HRTIM_WaveformCountStart_IT+0xd0>
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	2201      	movs	r2, #1
 8008530:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	2202      	movs	r2, #2
 8008538:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  /* Enable HRTIM interrupts (if required) */
  __HAL_HRTIM_ENABLE_IT(hhrtim, hhrtim->Init.HRTIMInterruptResquests);
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	681b      	ldr	r3, [r3, #0]
 8008540:	f8d3 1390 	ldr.w	r1, [r3, #912]	; 0x390
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	685a      	ldr	r2, [r3, #4]
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	681b      	ldr	r3, [r3, #0]
 800854c:	430a      	orrs	r2, r1
 800854e:	f8c3 2390 	str.w	r2, [r3, #912]	; 0x390

  /* Enable master timer related interrupts (if required) */
  if ((Timers & HRTIM_TIMERID_MASTER) != 0U)
 8008552:	683b      	ldr	r3, [r7, #0]
 8008554:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008558:	2b00      	cmp	r3, #0
 800855a:	d009      	beq.n	8008570 <HAL_HRTIM_WaveformCountStart_IT+0x5c>
  {
    __HAL_HRTIM_MASTER_ENABLE_IT(hhrtim,
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	681b      	ldr	r3, [r3, #0]
 8008560:	68d9      	ldr	r1, [r3, #12]
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	681b      	ldr	r3, [r3, #0]
 800856c:	430a      	orrs	r2, r1
 800856e:	60da      	str	r2, [r3, #12]
                                 hhrtim->TimerParam[HRTIM_TIMERINDEX_MASTER].InterruptRequests);
  }

  /* Enable timing unit related interrupts (if required) */
  for (timer_idx = HRTIM_TIMERINDEX_TIMER_A ;
 8008570:	2300      	movs	r3, #0
 8008572:	73fb      	strb	r3, [r7, #15]
 8008574:	e022      	b.n	80085bc <HAL_HRTIM_WaveformCountStart_IT+0xa8>
       timer_idx < HRTIM_TIMERINDEX_MASTER ;
       timer_idx++)
  {
    if ((Timers & TimerIdxToTimerId[timer_idx]) != 0U)
 8008576:	7bfb      	ldrb	r3, [r7, #15]
 8008578:	4a1d      	ldr	r2, [pc, #116]	; (80085f0 <HAL_HRTIM_WaveformCountStart_IT+0xdc>)
 800857a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800857e:	683b      	ldr	r3, [r7, #0]
 8008580:	4013      	ands	r3, r2
 8008582:	2b00      	cmp	r3, #0
 8008584:	d017      	beq.n	80085b6 <HAL_HRTIM_WaveformCountStart_IT+0xa2>
    {
      __HAL_HRTIM_TIMER_ENABLE_IT(hhrtim,
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	681a      	ldr	r2, [r3, #0]
 800858a:	7bfb      	ldrb	r3, [r7, #15]
 800858c:	01db      	lsls	r3, r3, #7
 800858e:	4413      	add	r3, r2
 8008590:	338c      	adds	r3, #140	; 0x8c
 8008592:	6818      	ldr	r0, [r3, #0]
 8008594:	7bfa      	ldrb	r2, [r7, #15]
 8008596:	6879      	ldr	r1, [r7, #4]
 8008598:	4613      	mov	r3, r2
 800859a:	00db      	lsls	r3, r3, #3
 800859c:	1a9b      	subs	r3, r3, r2
 800859e:	009b      	lsls	r3, r3, #2
 80085a0:	440b      	add	r3, r1
 80085a2:	3320      	adds	r3, #32
 80085a4:	681a      	ldr	r2, [r3, #0]
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	6819      	ldr	r1, [r3, #0]
 80085aa:	7bfb      	ldrb	r3, [r7, #15]
 80085ac:	4302      	orrs	r2, r0
 80085ae:	01db      	lsls	r3, r3, #7
 80085b0:	440b      	add	r3, r1
 80085b2:	338c      	adds	r3, #140	; 0x8c
 80085b4:	601a      	str	r2, [r3, #0]
       timer_idx++)
 80085b6:	7bfb      	ldrb	r3, [r7, #15]
 80085b8:	3301      	adds	r3, #1
 80085ba:	73fb      	strb	r3, [r7, #15]
       timer_idx < HRTIM_TIMERINDEX_MASTER ;
 80085bc:	7bfb      	ldrb	r3, [r7, #15]
 80085be:	2b04      	cmp	r3, #4
 80085c0:	d9d9      	bls.n	8008576 <HAL_HRTIM_WaveformCountStart_IT+0x62>
                                  hhrtim->TimerParam[timer_idx].InterruptRequests);
    }
  }

  /* Enable timer(s) counter */
  hhrtim->Instance->sMasterRegs.MCR |= (Timers);
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	681b      	ldr	r3, [r3, #0]
 80085c6:	6819      	ldr	r1, [r3, #0]
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	681b      	ldr	r3, [r3, #0]
 80085cc:	683a      	ldr	r2, [r7, #0]
 80085ce:	430a      	orrs	r2, r1
 80085d0:	601a      	str	r2, [r3, #0]

  hhrtim->State = HAL_HRTIM_STATE_READY;
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	2201      	movs	r2, #1
 80085d6:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	2200      	movs	r2, #0
 80085de:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

  return HAL_OK;}
 80085e2:	2300      	movs	r3, #0
 80085e4:	4618      	mov	r0, r3
 80085e6:	3714      	adds	r7, #20
 80085e8:	46bd      	mov	sp, r7
 80085ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085ee:	4770      	bx	lr
 80085f0:	2000002c 	.word	0x2000002c

080085f4 <HAL_HRTIM_WaveformCountStop_IT>:
  * @note The counter of a timer is stopped only if all timer outputs are disabled
  * @note All enabled timer related interrupts are disabled.
  */
HAL_StatusTypeDef HAL_HRTIM_WaveformCountStop_IT(HRTIM_HandleTypeDef * hhrtim,
                                                   uint32_t Timers)
{
 80085f4:	b480      	push	{r7}
 80085f6:	b085      	sub	sp, #20
 80085f8:	af00      	add	r7, sp, #0
 80085fa:	6078      	str	r0, [r7, #4]
 80085fc:	6039      	str	r1, [r7, #0]
  /* ++ WA */
  __IO uint32_t delai = (uint32_t)(0x17FU);
 80085fe:	f240 137f 	movw	r3, #383	; 0x17f
 8008602:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_HRTIM_TIMERID(Timers));

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	f893 30c0 	ldrb.w	r3, [r3, #192]	; 0xc0
 800860a:	2b01      	cmp	r3, #1
 800860c:	d101      	bne.n	8008612 <HAL_HRTIM_WaveformCountStop_IT+0x1e>
 800860e:	2302      	movs	r3, #2
 8008610:	e065      	b.n	80086de <HAL_HRTIM_WaveformCountStop_IT+0xea>
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	2201      	movs	r2, #1
 8008616:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	2202      	movs	r2, #2
 800861e:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  /* Disable HRTIM interrupts (if required) */
  __HAL_HRTIM_DISABLE_IT(hhrtim, hhrtim->Init.HRTIMInterruptResquests);
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	681b      	ldr	r3, [r3, #0]
 8008626:	f8d3 1390 	ldr.w	r1, [r3, #912]	; 0x390
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	685b      	ldr	r3, [r3, #4]
 800862e:	43da      	mvns	r2, r3
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	681b      	ldr	r3, [r3, #0]
 8008634:	400a      	ands	r2, r1
 8008636:	f8c3 2390 	str.w	r2, [r3, #912]	; 0x390

  /* Disable master timer related interrupts (if required) */
  if ((Timers & HRTIM_TIMERID_MASTER) != 0U)
 800863a:	683b      	ldr	r3, [r7, #0]
 800863c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008640:	2b00      	cmp	r3, #0
 8008642:	d00a      	beq.n	800865a <HAL_HRTIM_WaveformCountStop_IT+0x66>
  {
    /* Interrupts enable flag must be cleared one by one */
    __HAL_HRTIM_MASTER_DISABLE_IT(hhrtim, hhrtim->TimerParam[HRTIM_TIMERINDEX_MASTER].InterruptRequests);
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	681b      	ldr	r3, [r3, #0]
 8008648:	68d9      	ldr	r1, [r3, #12]
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8008650:	43da      	mvns	r2, r3
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	681b      	ldr	r3, [r3, #0]
 8008656:	400a      	ands	r2, r1
 8008658:	60da      	str	r2, [r3, #12]
  }

  /* Disable timing unit related interrupts (if required) */
  for (timer_idx = HRTIM_TIMERINDEX_TIMER_A ;
 800865a:	2300      	movs	r3, #0
 800865c:	73fb      	strb	r3, [r7, #15]
 800865e:	e023      	b.n	80086a8 <HAL_HRTIM_WaveformCountStop_IT+0xb4>
       timer_idx < HRTIM_TIMERINDEX_MASTER ;
       timer_idx++)
  {
    if ((Timers & TimerIdxToTimerId[timer_idx]) != 0U)
 8008660:	7bfb      	ldrb	r3, [r7, #15]
 8008662:	4a22      	ldr	r2, [pc, #136]	; (80086ec <HAL_HRTIM_WaveformCountStop_IT+0xf8>)
 8008664:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8008668:	683b      	ldr	r3, [r7, #0]
 800866a:	4013      	ands	r3, r2
 800866c:	2b00      	cmp	r3, #0
 800866e:	d018      	beq.n	80086a2 <HAL_HRTIM_WaveformCountStop_IT+0xae>
    {
      __HAL_HRTIM_TIMER_DISABLE_IT(hhrtim, timer_idx, hhrtim->TimerParam[timer_idx].InterruptRequests);
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	681a      	ldr	r2, [r3, #0]
 8008674:	7bfb      	ldrb	r3, [r7, #15]
 8008676:	01db      	lsls	r3, r3, #7
 8008678:	4413      	add	r3, r2
 800867a:	338c      	adds	r3, #140	; 0x8c
 800867c:	6818      	ldr	r0, [r3, #0]
 800867e:	7bfa      	ldrb	r2, [r7, #15]
 8008680:	6879      	ldr	r1, [r7, #4]
 8008682:	4613      	mov	r3, r2
 8008684:	00db      	lsls	r3, r3, #3
 8008686:	1a9b      	subs	r3, r3, r2
 8008688:	009b      	lsls	r3, r3, #2
 800868a:	440b      	add	r3, r1
 800868c:	3320      	adds	r3, #32
 800868e:	681b      	ldr	r3, [r3, #0]
 8008690:	43da      	mvns	r2, r3
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	6819      	ldr	r1, [r3, #0]
 8008696:	7bfb      	ldrb	r3, [r7, #15]
 8008698:	4002      	ands	r2, r0
 800869a:	01db      	lsls	r3, r3, #7
 800869c:	440b      	add	r3, r1
 800869e:	338c      	adds	r3, #140	; 0x8c
 80086a0:	601a      	str	r2, [r3, #0]
       timer_idx++)
 80086a2:	7bfb      	ldrb	r3, [r7, #15]
 80086a4:	3301      	adds	r3, #1
 80086a6:	73fb      	strb	r3, [r7, #15]
       timer_idx < HRTIM_TIMERINDEX_MASTER ;
 80086a8:	7bfb      	ldrb	r3, [r7, #15]
 80086aa:	2b04      	cmp	r3, #4
 80086ac:	d9d8      	bls.n	8008660 <HAL_HRTIM_WaveformCountStop_IT+0x6c>
    }
  }

  /* ++ WA */
  do { delai--; } while (delai != 0U);
 80086ae:	68bb      	ldr	r3, [r7, #8]
 80086b0:	3b01      	subs	r3, #1
 80086b2:	60bb      	str	r3, [r7, #8]
 80086b4:	68bb      	ldr	r3, [r7, #8]
 80086b6:	2b00      	cmp	r3, #0
 80086b8:	d1f9      	bne.n	80086ae <HAL_HRTIM_WaveformCountStop_IT+0xba>
  /* -- WA */

  /* Disable timer(s) counter */
  hhrtim->Instance->sMasterRegs.MCR &= ~(Timers);
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	681b      	ldr	r3, [r3, #0]
 80086be:	6819      	ldr	r1, [r3, #0]
 80086c0:	683b      	ldr	r3, [r7, #0]
 80086c2:	43da      	mvns	r2, r3
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	681b      	ldr	r3, [r3, #0]
 80086c8:	400a      	ands	r2, r1
 80086ca:	601a      	str	r2, [r3, #0]

  hhrtim->State = HAL_HRTIM_STATE_READY;
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	2201      	movs	r2, #1
 80086d0:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	2200      	movs	r2, #0
 80086d8:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

  return HAL_OK;
 80086dc:	2300      	movs	r3, #0
}
 80086de:	4618      	mov	r0, r3
 80086e0:	3714      	adds	r7, #20
 80086e2:	46bd      	mov	sp, r7
 80086e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086e8:	4770      	bx	lr
 80086ea:	bf00      	nop
 80086ec:	2000002c 	.word	0x2000002c

080086f0 <HAL_HRTIM_IRQHandler>:
  *                   This parameter can be any value of HRTIM_Timer_Index
  * @retval None
  */
void HAL_HRTIM_IRQHandler(HRTIM_HandleTypeDef * hhrtim,
                          uint32_t TimerIdx)
{
 80086f0:	b580      	push	{r7, lr}
 80086f2:	b082      	sub	sp, #8
 80086f4:	af00      	add	r7, sp, #0
 80086f6:	6078      	str	r0, [r7, #4]
 80086f8:	6039      	str	r1, [r7, #0]
  /* HRTIM interrupts handling */
  if (TimerIdx == HRTIM_TIMERINDEX_COMMON)
 80086fa:	683b      	ldr	r3, [r7, #0]
 80086fc:	2bff      	cmp	r3, #255	; 0xff
 80086fe:	d103      	bne.n	8008708 <HAL_HRTIM_IRQHandler+0x18>
  {
    HRTIM_HRTIM_ISR(hhrtim);
 8008700:	6878      	ldr	r0, [r7, #4]
 8008702:	f000 fc29 	bl	8008f58 <HRTIM_HRTIM_ISR>
  {
    /* Timing unit related interrupts handling */
    HRTIM_Timer_ISR(hhrtim, TimerIdx);
  }

}
 8008706:	e00a      	b.n	800871e <HAL_HRTIM_IRQHandler+0x2e>
  else if (TimerIdx == HRTIM_TIMERINDEX_MASTER)
 8008708:	683b      	ldr	r3, [r7, #0]
 800870a:	2b05      	cmp	r3, #5
 800870c:	d103      	bne.n	8008716 <HAL_HRTIM_IRQHandler+0x26>
    HRTIM_Master_ISR(hhrtim);
 800870e:	6878      	ldr	r0, [r7, #4]
 8008710:	f000 fca0 	bl	8009054 <HRTIM_Master_ISR>
}
 8008714:	e003      	b.n	800871e <HAL_HRTIM_IRQHandler+0x2e>
    HRTIM_Timer_ISR(hhrtim, TimerIdx);
 8008716:	6839      	ldr	r1, [r7, #0]
 8008718:	6878      	ldr	r0, [r7, #4]
 800871a:	f000 fd45 	bl	80091a8 <HRTIM_Timer_ISR>
}
 800871e:	bf00      	nop
 8008720:	3708      	adds	r7, #8
 8008722:	46bd      	mov	sp, r7
 8008724:	bd80      	pop	{r7, pc}

08008726 <HAL_HRTIM_Fault1Callback>:
  * @brief  Callback function invoked when a fault 1 interrupt occurred
  * @param  hhrtim pointer to HAL HRTIM handle  * @retval None
  * @retval None
  */
__weak void HAL_HRTIM_Fault1Callback(HRTIM_HandleTypeDef * hhrtim)
{
 8008726:	b480      	push	{r7}
 8008728:	b083      	sub	sp, #12
 800872a:	af00      	add	r7, sp, #0
 800872c:	6078      	str	r0, [r7, #4]
  UNUSED(hhrtim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Fault1Callback could be implemented in the user file
   */
}
 800872e:	bf00      	nop
 8008730:	370c      	adds	r7, #12
 8008732:	46bd      	mov	sp, r7
 8008734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008738:	4770      	bx	lr

0800873a <HAL_HRTIM_Fault2Callback>:
  * @brief  Callback function invoked when a fault 2 interrupt occurred
  * @param  hhrtim pointer to HAL HRTIM handle
  * @retval None
  */
__weak void HAL_HRTIM_Fault2Callback(HRTIM_HandleTypeDef * hhrtim)
{
 800873a:	b480      	push	{r7}
 800873c:	b083      	sub	sp, #12
 800873e:	af00      	add	r7, sp, #0
 8008740:	6078      	str	r0, [r7, #4]
  UNUSED(hhrtim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Fault2Callback could be implemented in the user file
   */
}
 8008742:	bf00      	nop
 8008744:	370c      	adds	r7, #12
 8008746:	46bd      	mov	sp, r7
 8008748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800874c:	4770      	bx	lr

0800874e <HAL_HRTIM_Fault3Callback>:
  * @brief  Callback function invoked when a fault 3 interrupt occurred
  * @param  hhrtim pointer to HAL HRTIM handle
  * @retval None
  */
__weak void HAL_HRTIM_Fault3Callback(HRTIM_HandleTypeDef * hhrtim)
{
 800874e:	b480      	push	{r7}
 8008750:	b083      	sub	sp, #12
 8008752:	af00      	add	r7, sp, #0
 8008754:	6078      	str	r0, [r7, #4]
  UNUSED(hhrtim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Fault3Callback could be implemented in the user file
   */
}
 8008756:	bf00      	nop
 8008758:	370c      	adds	r7, #12
 800875a:	46bd      	mov	sp, r7
 800875c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008760:	4770      	bx	lr

08008762 <HAL_HRTIM_Fault4Callback>:
  * @brief  Callback function invoked when a fault 4 interrupt occurred
  * @param  hhrtim pointer to HAL HRTIM handle
  * @retval None
  */
__weak void HAL_HRTIM_Fault4Callback(HRTIM_HandleTypeDef * hhrtim)
{
 8008762:	b480      	push	{r7}
 8008764:	b083      	sub	sp, #12
 8008766:	af00      	add	r7, sp, #0
 8008768:	6078      	str	r0, [r7, #4]
  UNUSED(hhrtim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Fault4Callback could be implemented in the user file
   */
}
 800876a:	bf00      	nop
 800876c:	370c      	adds	r7, #12
 800876e:	46bd      	mov	sp, r7
 8008770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008774:	4770      	bx	lr

08008776 <HAL_HRTIM_Fault5Callback>:
  * @brief  Callback function invoked when a fault 5 interrupt occurred
  * @param  hhrtim pointer to HAL HRTIM handle
  * @retval None
  */
__weak void HAL_HRTIM_Fault5Callback(HRTIM_HandleTypeDef * hhrtim)
{
 8008776:	b480      	push	{r7}
 8008778:	b083      	sub	sp, #12
 800877a:	af00      	add	r7, sp, #0
 800877c:	6078      	str	r0, [r7, #4]
  UNUSED(hhrtim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Fault5Callback could be implemented in the user file
   */
}
 800877e:	bf00      	nop
 8008780:	370c      	adds	r7, #12
 8008782:	46bd      	mov	sp, r7
 8008784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008788:	4770      	bx	lr

0800878a <HAL_HRTIM_SystemFaultCallback>:
  * @brief  Callback function invoked when a system fault interrupt occurred
  * @param  hhrtim pointer to HAL HRTIM handle
  * @retval None
  */
__weak void HAL_HRTIM_SystemFaultCallback(HRTIM_HandleTypeDef * hhrtim)
{
 800878a:	b480      	push	{r7}
 800878c:	b083      	sub	sp, #12
 800878e:	af00      	add	r7, sp, #0
 8008790:	6078      	str	r0, [r7, #4]
  UNUSED(hhrtim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_SystemFaultCallback could be implemented in the user file
   */
}
 8008792:	bf00      	nop
 8008794:	370c      	adds	r7, #12
 8008796:	46bd      	mov	sp, r7
 8008798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800879c:	4770      	bx	lr

0800879e <HAL_HRTIM_BurstModePeriodCallback>:
  * @brief  Callback function invoked when the end of the burst mode period is reached
  * @param  hhrtim pointer to HAL HRTIM handle
  * @retval None
  */
__weak void HAL_HRTIM_BurstModePeriodCallback(HRTIM_HandleTypeDef * hhrtim)
{
 800879e:	b480      	push	{r7}
 80087a0:	b083      	sub	sp, #12
 80087a2:	af00      	add	r7, sp, #0
 80087a4:	6078      	str	r0, [r7, #4]
  UNUSED(hhrtim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_BurstModeCallback could be implemented in the user file
   */
}
 80087a6:	bf00      	nop
 80087a8:	370c      	adds	r7, #12
 80087aa:	46bd      	mov	sp, r7
 80087ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087b0:	4770      	bx	lr

080087b2 <HAL_HRTIM_SynchronizationEventCallback>:
  * @brief  Callback function invoked when a synchronization input event is received
  * @param  hhrtim pointer to HAL HRTIM handle
  * @retval None
  */
__weak void HAL_HRTIM_SynchronizationEventCallback(HRTIM_HandleTypeDef * hhrtim)
{
 80087b2:	b480      	push	{r7}
 80087b4:	b083      	sub	sp, #12
 80087b6:	af00      	add	r7, sp, #0
 80087b8:	6078      	str	r0, [r7, #4]
  UNUSED(hhrtim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_SynchronizationEventCallback could be implemented in the user file
   */
}
 80087ba:	bf00      	nop
 80087bc:	370c      	adds	r7, #12
 80087be:	46bd      	mov	sp, r7
 80087c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087c4:	4770      	bx	lr

080087c6 <HAL_HRTIM_RegistersUpdateCallback>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_E for timer E
  * @retval None
  */
__weak void HAL_HRTIM_RegistersUpdateCallback(HRTIM_HandleTypeDef * hhrtim,
                                              uint32_t TimerIdx)
{
 80087c6:	b480      	push	{r7}
 80087c8:	b083      	sub	sp, #12
 80087ca:	af00      	add	r7, sp, #0
 80087cc:	6078      	str	r0, [r7, #4]
 80087ce:	6039      	str	r1, [r7, #0]
  UNUSED(TimerIdx);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Master_RegistersUpdateCallback could be implemented in the user file
   */
}
 80087d0:	bf00      	nop
 80087d2:	370c      	adds	r7, #12
 80087d4:	46bd      	mov	sp, r7
 80087d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087da:	4770      	bx	lr

080087dc <HAL_HRTIM_Compare1EventCallback>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_E for timer E
  * @retval None
  */
__weak void HAL_HRTIM_Compare1EventCallback(HRTIM_HandleTypeDef * hhrtim,
                                              uint32_t TimerIdx)
{
 80087dc:	b480      	push	{r7}
 80087de:	b083      	sub	sp, #12
 80087e0:	af00      	add	r7, sp, #0
 80087e2:	6078      	str	r0, [r7, #4]
 80087e4:	6039      	str	r1, [r7, #0]
  UNUSED(TimerIdx);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Master_Compare1EventCallback could be implemented in the user file
   */
}
 80087e6:	bf00      	nop
 80087e8:	370c      	adds	r7, #12
 80087ea:	46bd      	mov	sp, r7
 80087ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087f0:	4770      	bx	lr

080087f2 <HAL_HRTIM_Compare4EventCallback>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_E for timer E
  * @retval None
  */
__weak void HAL_HRTIM_Compare4EventCallback(HRTIM_HandleTypeDef * hhrtim,
                                              uint32_t TimerIdx)
{
 80087f2:	b480      	push	{r7}
 80087f4:	b083      	sub	sp, #12
 80087f6:	af00      	add	r7, sp, #0
 80087f8:	6078      	str	r0, [r7, #4]
 80087fa:	6039      	str	r1, [r7, #0]
  UNUSED(TimerIdx);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Master_Compare4EventCallback could be implemented in the user file
   */
}
 80087fc:	bf00      	nop
 80087fe:	370c      	adds	r7, #12
 8008800:	46bd      	mov	sp, r7
 8008802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008806:	4770      	bx	lr

08008808 <HAL_HRTIM_Capture1EventCallback>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_E for timer E
  * @retval None
  */
__weak void HAL_HRTIM_Capture1EventCallback(HRTIM_HandleTypeDef * hhrtim,
                                              uint32_t TimerIdx)
{
 8008808:	b480      	push	{r7}
 800880a:	b083      	sub	sp, #12
 800880c:	af00      	add	r7, sp, #0
 800880e:	6078      	str	r0, [r7, #4]
 8008810:	6039      	str	r1, [r7, #0]
  UNUSED(TimerIdx);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Timer_Capture1EventCallback could be implemented in the user file
   */
}
 8008812:	bf00      	nop
 8008814:	370c      	adds	r7, #12
 8008816:	46bd      	mov	sp, r7
 8008818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800881c:	4770      	bx	lr

0800881e <HAL_HRTIM_Capture2EventCallback>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_E for timer E
  * @retval None
  */
__weak void HAL_HRTIM_Capture2EventCallback(HRTIM_HandleTypeDef * hhrtim,
                                              uint32_t TimerIdx)
{
 800881e:	b480      	push	{r7}
 8008820:	b083      	sub	sp, #12
 8008822:	af00      	add	r7, sp, #0
 8008824:	6078      	str	r0, [r7, #4]
 8008826:	6039      	str	r1, [r7, #0]
  UNUSED(TimerIdx);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Timer_Capture2EventCallback could be implemented in the user file
   */
}
 8008828:	bf00      	nop
 800882a:	370c      	adds	r7, #12
 800882c:	46bd      	mov	sp, r7
 800882e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008832:	4770      	bx	lr

08008834 <HAL_HRTIM_DelayedProtectionCallback>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_E for timer E
  * @retval None
  */
__weak void HAL_HRTIM_DelayedProtectionCallback(HRTIM_HandleTypeDef * hhrtim,
                                              uint32_t TimerIdx)
{
 8008834:	b480      	push	{r7}
 8008836:	b083      	sub	sp, #12
 8008838:	af00      	add	r7, sp, #0
 800883a:	6078      	str	r0, [r7, #4]
 800883c:	6039      	str	r1, [r7, #0]
  UNUSED(TimerIdx);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Timer_DelayedProtectionCallback could be implemented in the user file
   */
}
 800883e:	bf00      	nop
 8008840:	370c      	adds	r7, #12
 8008842:	46bd      	mov	sp, r7
 8008844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008848:	4770      	bx	lr

0800884a <HAL_HRTIM_CounterResetCallback>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_E for timer E
  * @retval None
  */
__weak void HAL_HRTIM_CounterResetCallback(HRTIM_HandleTypeDef * hhrtim,
                                              uint32_t TimerIdx)
{
 800884a:	b480      	push	{r7}
 800884c:	b083      	sub	sp, #12
 800884e:	af00      	add	r7, sp, #0
 8008850:	6078      	str	r0, [r7, #4]
 8008852:	6039      	str	r1, [r7, #0]
  UNUSED(TimerIdx);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Timer_CounterResetCallback could be implemented in the user file
   */
}
 8008854:	bf00      	nop
 8008856:	370c      	adds	r7, #12
 8008858:	46bd      	mov	sp, r7
 800885a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800885e:	4770      	bx	lr

08008860 <HAL_HRTIM_Output1SetCallback>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_E for timer E
  * @retval None
  */
__weak void HAL_HRTIM_Output1SetCallback(HRTIM_HandleTypeDef * hhrtim,
                                              uint32_t TimerIdx)
{
 8008860:	b480      	push	{r7}
 8008862:	b083      	sub	sp, #12
 8008864:	af00      	add	r7, sp, #0
 8008866:	6078      	str	r0, [r7, #4]
 8008868:	6039      	str	r1, [r7, #0]
  UNUSED(TimerIdx);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Timer_Output1SetCallback could be implemented in the user file
   */
}
 800886a:	bf00      	nop
 800886c:	370c      	adds	r7, #12
 800886e:	46bd      	mov	sp, r7
 8008870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008874:	4770      	bx	lr

08008876 <HAL_HRTIM_Output1ResetCallback>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_E for timer E
  * @retval None
  */
__weak void HAL_HRTIM_Output1ResetCallback(HRTIM_HandleTypeDef * hhrtim,
                                              uint32_t TimerIdx)
{
 8008876:	b480      	push	{r7}
 8008878:	b083      	sub	sp, #12
 800887a:	af00      	add	r7, sp, #0
 800887c:	6078      	str	r0, [r7, #4]
 800887e:	6039      	str	r1, [r7, #0]
  UNUSED(TimerIdx);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Timer_Output1ResetCallback could be implemented in the user file
   */
}
 8008880:	bf00      	nop
 8008882:	370c      	adds	r7, #12
 8008884:	46bd      	mov	sp, r7
 8008886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800888a:	4770      	bx	lr

0800888c <HAL_HRTIM_Output2SetCallback>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_E for timer E
  * @retval None
  */
__weak void HAL_HRTIM_Output2SetCallback(HRTIM_HandleTypeDef * hhrtim,
                                              uint32_t TimerIdx)
{
 800888c:	b480      	push	{r7}
 800888e:	b083      	sub	sp, #12
 8008890:	af00      	add	r7, sp, #0
 8008892:	6078      	str	r0, [r7, #4]
 8008894:	6039      	str	r1, [r7, #0]
  UNUSED(TimerIdx);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Timer_Output2SetCallback could be implemented in the user file
   */
}
 8008896:	bf00      	nop
 8008898:	370c      	adds	r7, #12
 800889a:	46bd      	mov	sp, r7
 800889c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088a0:	4770      	bx	lr

080088a2 <HAL_HRTIM_Output2ResetCallback>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_E for timer E
  * @retval None
  */
__weak void HAL_HRTIM_Output2ResetCallback(HRTIM_HandleTypeDef * hhrtim,
                                              uint32_t TimerIdx)
{
 80088a2:	b480      	push	{r7}
 80088a4:	b083      	sub	sp, #12
 80088a6:	af00      	add	r7, sp, #0
 80088a8:	6078      	str	r0, [r7, #4]
 80088aa:	6039      	str	r1, [r7, #0]
  UNUSED(TimerIdx);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Timer_Output2ResetCallback could be implemented in the user file
   */
}
 80088ac:	bf00      	nop
 80088ae:	370c      	adds	r7, #12
 80088b0:	46bd      	mov	sp, r7
 80088b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088b6:	4770      	bx	lr

080088b8 <HRTIM_MasterBase_Config>:
  * @param  pTimeBaseCfg pointer to the time base configuration structure
  * @retval None
  */
static void HRTIM_MasterBase_Config(HRTIM_HandleTypeDef * hhrtim,
                                    const HRTIM_TimeBaseCfgTypeDef * pTimeBaseCfg)
{
 80088b8:	b480      	push	{r7}
 80088ba:	b085      	sub	sp, #20
 80088bc:	af00      	add	r7, sp, #0
 80088be:	6078      	str	r0, [r7, #4]
 80088c0:	6039      	str	r1, [r7, #0]
  uint32_t hrtim_mcr;

  /* Configure master timer */
  hrtim_mcr = hhrtim->Instance->sMasterRegs.MCR;
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	681b      	ldr	r3, [r3, #0]
 80088c6:	681b      	ldr	r3, [r3, #0]
 80088c8:	60fb      	str	r3, [r7, #12]

  /* Set the prescaler ratio */
  hrtim_mcr &= (uint32_t) ~(HRTIM_MCR_CK_PSC);
 80088ca:	68fb      	ldr	r3, [r7, #12]
 80088cc:	f023 0307 	bic.w	r3, r3, #7
 80088d0:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= (uint32_t)pTimeBaseCfg->PrescalerRatio;
 80088d2:	683b      	ldr	r3, [r7, #0]
 80088d4:	689b      	ldr	r3, [r3, #8]
 80088d6:	68fa      	ldr	r2, [r7, #12]
 80088d8:	4313      	orrs	r3, r2
 80088da:	60fb      	str	r3, [r7, #12]

  /* Set the operating mode */
  hrtim_mcr &= (uint32_t) ~(HRTIM_MCR_CONT | HRTIM_MCR_RETRIG);
 80088dc:	68fb      	ldr	r3, [r7, #12]
 80088de:	f023 0318 	bic.w	r3, r3, #24
 80088e2:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= (uint32_t)pTimeBaseCfg->Mode;
 80088e4:	683b      	ldr	r3, [r7, #0]
 80088e6:	68db      	ldr	r3, [r3, #12]
 80088e8:	68fa      	ldr	r2, [r7, #12]
 80088ea:	4313      	orrs	r3, r2
 80088ec:	60fb      	str	r3, [r7, #12]

  /* Update the HRTIM registers */
  hhrtim->Instance->sMasterRegs.MCR = hrtim_mcr;
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	681b      	ldr	r3, [r3, #0]
 80088f2:	68fa      	ldr	r2, [r7, #12]
 80088f4:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sMasterRegs.MPER = pTimeBaseCfg->Period;
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	681b      	ldr	r3, [r3, #0]
 80088fa:	683a      	ldr	r2, [r7, #0]
 80088fc:	6812      	ldr	r2, [r2, #0]
 80088fe:	615a      	str	r2, [r3, #20]
  hhrtim->Instance->sMasterRegs.MREP = pTimeBaseCfg->RepetitionCounter;
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	681b      	ldr	r3, [r3, #0]
 8008904:	683a      	ldr	r2, [r7, #0]
 8008906:	6852      	ldr	r2, [r2, #4]
 8008908:	619a      	str	r2, [r3, #24]
}
 800890a:	bf00      	nop
 800890c:	3714      	adds	r7, #20
 800890e:	46bd      	mov	sp, r7
 8008910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008914:	4770      	bx	lr

08008916 <HRTIM_TimingUnitBase_Config>:
  * @retval None
  */
static void HRTIM_TimingUnitBase_Config(HRTIM_HandleTypeDef * hhrtim,
                                        uint32_t TimerIdx ,
                                        const HRTIM_TimeBaseCfgTypeDef * pTimeBaseCfg)
{
 8008916:	b480      	push	{r7}
 8008918:	b087      	sub	sp, #28
 800891a:	af00      	add	r7, sp, #0
 800891c:	60f8      	str	r0, [r7, #12]
 800891e:	60b9      	str	r1, [r7, #8]
 8008920:	607a      	str	r2, [r7, #4]
  uint32_t hrtim_timcr;

  /* Configure master timing unit */
  hrtim_timcr = hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR;
 8008922:	68fb      	ldr	r3, [r7, #12]
 8008924:	681a      	ldr	r2, [r3, #0]
 8008926:	68bb      	ldr	r3, [r7, #8]
 8008928:	3301      	adds	r3, #1
 800892a:	01db      	lsls	r3, r3, #7
 800892c:	4413      	add	r3, r2
 800892e:	681b      	ldr	r3, [r3, #0]
 8008930:	617b      	str	r3, [r7, #20]

  /* Set the prescaler ratio */
  hrtim_timcr &= (uint32_t) ~(HRTIM_TIMCR_CK_PSC);
 8008932:	697b      	ldr	r3, [r7, #20]
 8008934:	f023 0307 	bic.w	r3, r3, #7
 8008938:	617b      	str	r3, [r7, #20]
  hrtim_timcr |= (uint32_t)pTimeBaseCfg->PrescalerRatio;
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	689b      	ldr	r3, [r3, #8]
 800893e:	697a      	ldr	r2, [r7, #20]
 8008940:	4313      	orrs	r3, r2
 8008942:	617b      	str	r3, [r7, #20]

  /* Set the operating mode */
  hrtim_timcr &= (uint32_t) ~(HRTIM_TIMCR_CONT | HRTIM_TIMCR_RETRIG);
 8008944:	697b      	ldr	r3, [r7, #20]
 8008946:	f023 0318 	bic.w	r3, r3, #24
 800894a:	617b      	str	r3, [r7, #20]
  hrtim_timcr |= (uint32_t)pTimeBaseCfg->Mode;
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	68db      	ldr	r3, [r3, #12]
 8008950:	697a      	ldr	r2, [r7, #20]
 8008952:	4313      	orrs	r3, r2
 8008954:	617b      	str	r3, [r7, #20]

  /* Update the HRTIM registers */
  hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR = hrtim_timcr;
 8008956:	68fb      	ldr	r3, [r7, #12]
 8008958:	681a      	ldr	r2, [r3, #0]
 800895a:	68bb      	ldr	r3, [r7, #8]
 800895c:	3301      	adds	r3, #1
 800895e:	01db      	lsls	r3, r3, #7
 8008960:	4413      	add	r3, r2
 8008962:	697a      	ldr	r2, [r7, #20]
 8008964:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sTimerxRegs[TimerIdx].PERxR = pTimeBaseCfg->Period;
 8008966:	68fb      	ldr	r3, [r7, #12]
 8008968:	6819      	ldr	r1, [r3, #0]
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	681a      	ldr	r2, [r3, #0]
 800896e:	68bb      	ldr	r3, [r7, #8]
 8008970:	01db      	lsls	r3, r3, #7
 8008972:	440b      	add	r3, r1
 8008974:	3394      	adds	r3, #148	; 0x94
 8008976:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sTimerxRegs[TimerIdx].REPxR = pTimeBaseCfg->RepetitionCounter;
 8008978:	68fb      	ldr	r3, [r7, #12]
 800897a:	6819      	ldr	r1, [r3, #0]
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	685a      	ldr	r2, [r3, #4]
 8008980:	68bb      	ldr	r3, [r7, #8]
 8008982:	01db      	lsls	r3, r3, #7
 8008984:	440b      	add	r3, r1
 8008986:	3398      	adds	r3, #152	; 0x98
 8008988:	601a      	str	r2, [r3, #0]
}
 800898a:	bf00      	nop
 800898c:	371c      	adds	r7, #28
 800898e:	46bd      	mov	sp, r7
 8008990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008994:	4770      	bx	lr

08008996 <HRTIM_MasterWaveform_Config>:
  * @param  pTimerCfg pointer to the timer configuration data structure
  * @retval None
  */
static void HRTIM_MasterWaveform_Config(HRTIM_HandleTypeDef * hhrtim,
                                        const HRTIM_TimerCfgTypeDef * pTimerCfg)
{
 8008996:	b480      	push	{r7}
 8008998:	b085      	sub	sp, #20
 800899a:	af00      	add	r7, sp, #0
 800899c:	6078      	str	r0, [r7, #4]
 800899e:	6039      	str	r1, [r7, #0]
  uint32_t hrtim_mcr;
  uint32_t hrtim_bmcr;

  /* Configure master timer */
  hrtim_mcr = hhrtim->Instance->sMasterRegs.MCR;
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	681b      	ldr	r3, [r3, #0]
 80089a4:	681b      	ldr	r3, [r3, #0]
 80089a6:	60fb      	str	r3, [r7, #12]
  hrtim_bmcr = hhrtim->Instance->sCommonRegs.BMCR;
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	681b      	ldr	r3, [r3, #0]
 80089ac:	f8d3 33a0 	ldr.w	r3, [r3, #928]	; 0x3a0
 80089b0:	60bb      	str	r3, [r7, #8]

  /* Enable/Disable the half mode */
  hrtim_mcr &= ~(HRTIM_MCR_HALF);
 80089b2:	68fb      	ldr	r3, [r7, #12]
 80089b4:	f023 0320 	bic.w	r3, r3, #32
 80089b8:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->HalfModeEnable;
 80089ba:	683b      	ldr	r3, [r7, #0]
 80089bc:	695b      	ldr	r3, [r3, #20]
 80089be:	68fa      	ldr	r2, [r7, #12]
 80089c0:	4313      	orrs	r3, r2
 80089c2:	60fb      	str	r3, [r7, #12]

  /* Enable/Disable the timer start upon synchronization event reception */
  hrtim_mcr &= ~(HRTIM_MCR_SYNCSTRTM);
 80089c4:	68fb      	ldr	r3, [r7, #12]
 80089c6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80089ca:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->StartOnSync;
 80089cc:	683b      	ldr	r3, [r7, #0]
 80089ce:	699b      	ldr	r3, [r3, #24]
 80089d0:	68fa      	ldr	r2, [r7, #12]
 80089d2:	4313      	orrs	r3, r2
 80089d4:	60fb      	str	r3, [r7, #12]

  /* Enable/Disable the timer reset upon synchronization event reception */
  hrtim_mcr &= ~(HRTIM_MCR_SYNCRSTM);
 80089d6:	68fb      	ldr	r3, [r7, #12]
 80089d8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80089dc:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->ResetOnSync;
 80089de:	683b      	ldr	r3, [r7, #0]
 80089e0:	69db      	ldr	r3, [r3, #28]
 80089e2:	68fa      	ldr	r2, [r7, #12]
 80089e4:	4313      	orrs	r3, r2
 80089e6:	60fb      	str	r3, [r7, #12]

  /* Enable/Disable the DAC synchronization event generation */
  hrtim_mcr &= ~(HRTIM_MCR_DACSYNC);
 80089e8:	68fb      	ldr	r3, [r7, #12]
 80089ea:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80089ee:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->DACSynchro;
 80089f0:	683b      	ldr	r3, [r7, #0]
 80089f2:	6a1b      	ldr	r3, [r3, #32]
 80089f4:	68fa      	ldr	r2, [r7, #12]
 80089f6:	4313      	orrs	r3, r2
 80089f8:	60fb      	str	r3, [r7, #12]

  /* Enable/Disable preload mechanism for timer registers */
  hrtim_mcr &= ~(HRTIM_MCR_PREEN);
 80089fa:	68fb      	ldr	r3, [r7, #12]
 80089fc:	f023 6300 	bic.w	r3, r3, #134217728	; 0x8000000
 8008a00:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->PreloadEnable;
 8008a02:	683b      	ldr	r3, [r7, #0]
 8008a04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a06:	68fa      	ldr	r2, [r7, #12]
 8008a08:	4313      	orrs	r3, r2
 8008a0a:	60fb      	str	r3, [r7, #12]

  /* Master timer registers update handling */
  hrtim_mcr &= ~(HRTIM_MCR_BRSTDMA);
 8008a0c:	68fb      	ldr	r3, [r7, #12]
 8008a0e:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8008a12:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= (pTimerCfg->UpdateGating << 2U);
 8008a14:	683b      	ldr	r3, [r7, #0]
 8008a16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008a18:	009b      	lsls	r3, r3, #2
 8008a1a:	68fa      	ldr	r2, [r7, #12]
 8008a1c:	4313      	orrs	r3, r2
 8008a1e:	60fb      	str	r3, [r7, #12]

  /* Enable/Disable registers update on repetition */
  hrtim_mcr &= ~(HRTIM_MCR_MREPU);
 8008a20:	68fb      	ldr	r3, [r7, #12]
 8008a22:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8008a26:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->RepetitionUpdate;
 8008a28:	683b      	ldr	r3, [r7, #0]
 8008a2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a2c:	68fa      	ldr	r2, [r7, #12]
 8008a2e:	4313      	orrs	r3, r2
 8008a30:	60fb      	str	r3, [r7, #12]

  /* Set the timer burst mode */
  hrtim_bmcr &= ~(HRTIM_BMCR_MTBM);
 8008a32:	68bb      	ldr	r3, [r7, #8]
 8008a34:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008a38:	60bb      	str	r3, [r7, #8]
  hrtim_bmcr |= pTimerCfg->BurstMode;
 8008a3a:	683b      	ldr	r3, [r7, #0]
 8008a3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a3e:	68ba      	ldr	r2, [r7, #8]
 8008a40:	4313      	orrs	r3, r2
 8008a42:	60bb      	str	r3, [r7, #8]

  /* Update the HRTIM registers */
  hhrtim->Instance->sMasterRegs.MCR = hrtim_mcr;
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	681b      	ldr	r3, [r3, #0]
 8008a48:	68fa      	ldr	r2, [r7, #12]
 8008a4a:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sCommonRegs.BMCR = hrtim_bmcr;
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	681b      	ldr	r3, [r3, #0]
 8008a50:	68ba      	ldr	r2, [r7, #8]
 8008a52:	f8c3 23a0 	str.w	r2, [r3, #928]	; 0x3a0
}
 8008a56:	bf00      	nop
 8008a58:	3714      	adds	r7, #20
 8008a5a:	46bd      	mov	sp, r7
 8008a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a60:	4770      	bx	lr
	...

08008a64 <HRTIM_TimingUnitWaveform_Config>:
  * @retval None
  */
static void  HRTIM_TimingUnitWaveform_Config(HRTIM_HandleTypeDef * hhrtim,
                                             uint32_t TimerIdx,
                                             const HRTIM_TimerCfgTypeDef * pTimerCfg)
{
 8008a64:	b480      	push	{r7}
 8008a66:	b08b      	sub	sp, #44	; 0x2c
 8008a68:	af00      	add	r7, sp, #0
 8008a6a:	60f8      	str	r0, [r7, #12]
 8008a6c:	60b9      	str	r1, [r7, #8]
 8008a6e:	607a      	str	r2, [r7, #4]
  uint32_t hrtim_timoutr;
  uint32_t hrtim_timrstr;
  uint32_t hrtim_bmcr;

  /* UPDGAT bitfield must be reset before programming a new value */
  hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR &= ~(HRTIM_TIMCR_UPDGAT);
 8008a70:	68fb      	ldr	r3, [r7, #12]
 8008a72:	681a      	ldr	r2, [r3, #0]
 8008a74:	68bb      	ldr	r3, [r7, #8]
 8008a76:	3301      	adds	r3, #1
 8008a78:	01db      	lsls	r3, r3, #7
 8008a7a:	4413      	add	r3, r2
 8008a7c:	681b      	ldr	r3, [r3, #0]
 8008a7e:	68fa      	ldr	r2, [r7, #12]
 8008a80:	6811      	ldr	r1, [r2, #0]
 8008a82:	f023 4270 	bic.w	r2, r3, #4026531840	; 0xf0000000
 8008a86:	68bb      	ldr	r3, [r7, #8]
 8008a88:	3301      	adds	r3, #1
 8008a8a:	01db      	lsls	r3, r3, #7
 8008a8c:	440b      	add	r3, r1
 8008a8e:	601a      	str	r2, [r3, #0]

  /* Configure timing unit (Timer A to Timer E) */
  hrtim_timcr = hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR;
 8008a90:	68fb      	ldr	r3, [r7, #12]
 8008a92:	681a      	ldr	r2, [r3, #0]
 8008a94:	68bb      	ldr	r3, [r7, #8]
 8008a96:	3301      	adds	r3, #1
 8008a98:	01db      	lsls	r3, r3, #7
 8008a9a:	4413      	add	r3, r2
 8008a9c:	681b      	ldr	r3, [r3, #0]
 8008a9e:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timfltr = hhrtim->Instance->sTimerxRegs[TimerIdx].FLTxR;
 8008aa0:	68fb      	ldr	r3, [r7, #12]
 8008aa2:	681a      	ldr	r2, [r3, #0]
 8008aa4:	68bb      	ldr	r3, [r7, #8]
 8008aa6:	01db      	lsls	r3, r3, #7
 8008aa8:	4413      	add	r3, r2
 8008aaa:	33e8      	adds	r3, #232	; 0xe8
 8008aac:	681b      	ldr	r3, [r3, #0]
 8008aae:	61bb      	str	r3, [r7, #24]
  hrtim_timoutr = hhrtim->Instance->sTimerxRegs[TimerIdx].OUTxR;
 8008ab0:	68fb      	ldr	r3, [r7, #12]
 8008ab2:	681a      	ldr	r2, [r3, #0]
 8008ab4:	68bb      	ldr	r3, [r7, #8]
 8008ab6:	01db      	lsls	r3, r3, #7
 8008ab8:	4413      	add	r3, r2
 8008aba:	33e4      	adds	r3, #228	; 0xe4
 8008abc:	681b      	ldr	r3, [r3, #0]
 8008abe:	623b      	str	r3, [r7, #32]
  hrtim_bmcr = hhrtim->Instance->sCommonRegs.BMCR;
 8008ac0:	68fb      	ldr	r3, [r7, #12]
 8008ac2:	681b      	ldr	r3, [r3, #0]
 8008ac4:	f8d3 33a0 	ldr.w	r3, [r3, #928]	; 0x3a0
 8008ac8:	61fb      	str	r3, [r7, #28]

  /* Enable/Disable the half mode */
  hrtim_timcr &= ~(HRTIM_TIMCR_HALF);
 8008aca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008acc:	f023 0320 	bic.w	r3, r3, #32
 8008ad0:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timcr |= pTimerCfg->HalfModeEnable;
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	695b      	ldr	r3, [r3, #20]
 8008ad6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008ad8:	4313      	orrs	r3, r2
 8008ada:	627b      	str	r3, [r7, #36]	; 0x24

  /* Enable/Disable the timer start upon synchronization event reception */
  hrtim_timcr &= ~(HRTIM_TIMCR_SYNCSTRT);
 8008adc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ade:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008ae2:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timcr |= pTimerCfg->StartOnSync;
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	699b      	ldr	r3, [r3, #24]
 8008ae8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008aea:	4313      	orrs	r3, r2
 8008aec:	627b      	str	r3, [r7, #36]	; 0x24

  /* Enable/Disable the timer reset upon synchronization event reception */
  hrtim_timcr &= ~(HRTIM_TIMCR_SYNCRST);
 8008aee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008af0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008af4:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timcr |= pTimerCfg->ResetOnSync;
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	69db      	ldr	r3, [r3, #28]
 8008afa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008afc:	4313      	orrs	r3, r2
 8008afe:	627b      	str	r3, [r7, #36]	; 0x24

  /* Enable/Disable the DAC synchronization event generation */
  hrtim_timcr &= ~(HRTIM_TIMCR_DACSYNC);
 8008b00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b02:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8008b06:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timcr |= pTimerCfg->DACSynchro;
 8008b08:	687b      	ldr	r3, [r7, #4]
 8008b0a:	6a1b      	ldr	r3, [r3, #32]
 8008b0c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008b0e:	4313      	orrs	r3, r2
 8008b10:	627b      	str	r3, [r7, #36]	; 0x24

  /* Enable/Disable preload mechanism for timer registers */
  hrtim_timcr &= ~(HRTIM_TIMCR_PREEN);
 8008b12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b14:	f023 6300 	bic.w	r3, r3, #134217728	; 0x8000000
 8008b18:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timcr |= pTimerCfg->PreloadEnable;
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b1e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008b20:	4313      	orrs	r3, r2
 8008b22:	627b      	str	r3, [r7, #36]	; 0x24

  /* Timing unit registers update handling */
  hrtim_timcr &= ~(HRTIM_TIMCR_UPDGAT);
 8008b24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b26:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8008b2a:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timcr |= pTimerCfg->UpdateGating;
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008b30:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008b32:	4313      	orrs	r3, r2
 8008b34:	627b      	str	r3, [r7, #36]	; 0x24

  /* Enable/Disable registers update on repetition */
  hrtim_timcr &= ~(HRTIM_TIMCR_TREPU);
 8008b36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b38:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8008b3c:	627b      	str	r3, [r7, #36]	; 0x24
  if (pTimerCfg->RepetitionUpdate == HRTIM_UPDATEONREPETITION_ENABLED)
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008b42:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008b46:	d103      	bne.n	8008b50 <HRTIM_TimingUnitWaveform_Config+0xec>
  {
    hrtim_timcr |= HRTIM_TIMCR_TREPU;
 8008b48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b4a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008b4e:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Set the push-pull mode */
  hrtim_timcr &= ~(HRTIM_TIMCR_PSHPLL);
 8008b50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b52:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008b56:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timcr |= pTimerCfg->PushPull;
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008b5c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008b5e:	4313      	orrs	r3, r2
 8008b60:	627b      	str	r3, [r7, #36]	; 0x24

  /* Enable/Disable registers update on timer counter reset */
  hrtim_timcr &= ~(HRTIM_TIMCR_TRSTU);
 8008b62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b64:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008b68:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timcr |= pTimerCfg->ResetUpdate;
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008b6e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008b70:	4313      	orrs	r3, r2
 8008b72:	627b      	str	r3, [r7, #36]	; 0x24

  /* Set the timer update trigger */
  hrtim_timcr &= ~(HRTIM_TIMCR_TIMUPDATETRIGGER);
 8008b74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b76:	f023 73fc 	bic.w	r3, r3, #33030144	; 0x1f80000
 8008b7a:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timcr |= pTimerCfg->UpdateTrigger;
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008b80:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008b82:	4313      	orrs	r3, r2
 8008b84:	627b      	str	r3, [r7, #36]	; 0x24

  /* Enable/Disable the fault channel at timer level */
  hrtim_timfltr &= ~(HRTIM_FLTR_FLTxEN);
 8008b86:	69bb      	ldr	r3, [r7, #24]
 8008b88:	f023 031f 	bic.w	r3, r3, #31
 8008b8c:	61bb      	str	r3, [r7, #24]
  hrtim_timfltr |= (pTimerCfg->FaultEnable & HRTIM_FLTR_FLTxEN);
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b92:	f003 031f 	and.w	r3, r3, #31
 8008b96:	69ba      	ldr	r2, [r7, #24]
 8008b98:	4313      	orrs	r3, r2
 8008b9a:	61bb      	str	r3, [r7, #24]

  /* Lock/Unlock fault sources at timer level */
  hrtim_timfltr &= ~(HRTIM_FLTR_FLTLCK);
 8008b9c:	69bb      	ldr	r3, [r7, #24]
 8008b9e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008ba2:	61bb      	str	r3, [r7, #24]
  hrtim_timfltr |= pTimerCfg->FaultLock;
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008ba8:	69ba      	ldr	r2, [r7, #24]
 8008baa:	4313      	orrs	r3, r2
 8008bac:	61bb      	str	r3, [r7, #24]

  /* The deadtime cannot be used simultaneously with the push-pull mode */
  if (pTimerCfg->PushPull == HRTIM_TIMPUSHPULLMODE_DISABLED)
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008bb2:	2b00      	cmp	r3, #0
 8008bb4:	d108      	bne.n	8008bc8 <HRTIM_TimingUnitWaveform_Config+0x164>
  {
    /* Enable/Disable dead time insertion at timer level */
    hrtim_timoutr &= ~(HRTIM_OUTR_DTEN);
 8008bb6:	6a3b      	ldr	r3, [r7, #32]
 8008bb8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008bbc:	623b      	str	r3, [r7, #32]
    hrtim_timoutr |= pTimerCfg->DeadTimeInsertion;
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008bc2:	6a3a      	ldr	r2, [r7, #32]
 8008bc4:	4313      	orrs	r3, r2
 8008bc6:	623b      	str	r3, [r7, #32]

  /* Enable/Disable delayed protection at timer level
     Delayed Idle is available whatever the timer operating mode (regular, push-pull)
     Balanced Idle is only available in push-pull mode
  */
  if ( ((pTimerCfg->DelayedProtectionMode != HRTIM_TIMER_A_B_C_DELAYEDPROTECTION_BALANCED_EEV6)
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008bcc:	f5b3 6f60 	cmp.w	r3, #3584	; 0xe00
 8008bd0:	d004      	beq.n	8008bdc <HRTIM_TimingUnitWaveform_Config+0x178>
       && (pTimerCfg->DelayedProtectionMode != HRTIM_TIMER_A_B_C_DELAYEDPROTECTION_BALANCED_EEV7))
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008bd6:	f5b3 5ff0 	cmp.w	r3, #7680	; 0x1e00
 8008bda:	d103      	bne.n	8008be4 <HRTIM_TimingUnitWaveform_Config+0x180>
       || (pTimerCfg->PushPull == HRTIM_TIMPUSHPULLMODE_ENABLED))
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008be0:	2b40      	cmp	r3, #64	; 0x40
 8008be2:	d108      	bne.n	8008bf6 <HRTIM_TimingUnitWaveform_Config+0x192>
  {
    hrtim_timoutr &= ~(HRTIM_OUTR_DLYPRT| HRTIM_OUTR_DLYPRTEN);
 8008be4:	6a3b      	ldr	r3, [r7, #32]
 8008be6:	f423 53f0 	bic.w	r3, r3, #7680	; 0x1e00
 8008bea:	623b      	str	r3, [r7, #32]
    hrtim_timoutr |= pTimerCfg->DelayedProtectionMode;
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008bf0:	6a3a      	ldr	r2, [r7, #32]
 8008bf2:	4313      	orrs	r3, r2
 8008bf4:	623b      	str	r3, [r7, #32]
  }

  /* Set the timer counter reset trigger */
  hrtim_timrstr = pTimerCfg->ResetTrigger;
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008bfa:	617b      	str	r3, [r7, #20]

  /* Set the timer burst mode */
  switch (TimerIdx)
 8008bfc:	68bb      	ldr	r3, [r7, #8]
 8008bfe:	2b04      	cmp	r3, #4
 8008c00:	d843      	bhi.n	8008c8a <HRTIM_TimingUnitWaveform_Config+0x226>
 8008c02:	a201      	add	r2, pc, #4	; (adr r2, 8008c08 <HRTIM_TimingUnitWaveform_Config+0x1a4>)
 8008c04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008c08:	08008c1d 	.word	0x08008c1d
 8008c0c:	08008c33 	.word	0x08008c33
 8008c10:	08008c49 	.word	0x08008c49
 8008c14:	08008c5f 	.word	0x08008c5f
 8008c18:	08008c75 	.word	0x08008c75
  {
  case HRTIM_TIMERINDEX_TIMER_A:
    {
      hrtim_bmcr &= ~(HRTIM_BMCR_TABM);
 8008c1c:	69fb      	ldr	r3, [r7, #28]
 8008c1e:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8008c22:	61fb      	str	r3, [r7, #28]
      hrtim_bmcr |= ( pTimerCfg->BurstMode << 1U);
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c28:	005b      	lsls	r3, r3, #1
 8008c2a:	69fa      	ldr	r2, [r7, #28]
 8008c2c:	4313      	orrs	r3, r2
 8008c2e:	61fb      	str	r3, [r7, #28]
      break;
 8008c30:	e02c      	b.n	8008c8c <HRTIM_TimingUnitWaveform_Config+0x228>
    }

  case HRTIM_TIMERINDEX_TIMER_B:
    {
      hrtim_bmcr &= ~(HRTIM_BMCR_TBBM);
 8008c32:	69fb      	ldr	r3, [r7, #28]
 8008c34:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008c38:	61fb      	str	r3, [r7, #28]
      hrtim_bmcr |= ( pTimerCfg->BurstMode << 2U);
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c3e:	009b      	lsls	r3, r3, #2
 8008c40:	69fa      	ldr	r2, [r7, #28]
 8008c42:	4313      	orrs	r3, r2
 8008c44:	61fb      	str	r3, [r7, #28]
      break;
 8008c46:	e021      	b.n	8008c8c <HRTIM_TimingUnitWaveform_Config+0x228>
    }

  case HRTIM_TIMERINDEX_TIMER_C:
    {
      hrtim_bmcr &= ~(HRTIM_BMCR_TCBM);
 8008c48:	69fb      	ldr	r3, [r7, #28]
 8008c4a:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8008c4e:	61fb      	str	r3, [r7, #28]
      hrtim_bmcr |= ( pTimerCfg->BurstMode << 3U);
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c54:	00db      	lsls	r3, r3, #3
 8008c56:	69fa      	ldr	r2, [r7, #28]
 8008c58:	4313      	orrs	r3, r2
 8008c5a:	61fb      	str	r3, [r7, #28]
      break;
 8008c5c:	e016      	b.n	8008c8c <HRTIM_TimingUnitWaveform_Config+0x228>
    }

  case HRTIM_TIMERINDEX_TIMER_D:
    {
      hrtim_bmcr &= ~(HRTIM_BMCR_TDBM);
 8008c5e:	69fb      	ldr	r3, [r7, #28]
 8008c60:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8008c64:	61fb      	str	r3, [r7, #28]
      hrtim_bmcr |= ( pTimerCfg->BurstMode << 4U);
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c6a:	011b      	lsls	r3, r3, #4
 8008c6c:	69fa      	ldr	r2, [r7, #28]
 8008c6e:	4313      	orrs	r3, r2
 8008c70:	61fb      	str	r3, [r7, #28]
      break;
 8008c72:	e00b      	b.n	8008c8c <HRTIM_TimingUnitWaveform_Config+0x228>
    }

  case HRTIM_TIMERINDEX_TIMER_E:
    {
      hrtim_bmcr &= ~(HRTIM_BMCR_TEBM);
 8008c74:	69fb      	ldr	r3, [r7, #28]
 8008c76:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8008c7a:	61fb      	str	r3, [r7, #28]
      hrtim_bmcr |= ( pTimerCfg->BurstMode << 5U);
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c80:	015b      	lsls	r3, r3, #5
 8008c82:	69fa      	ldr	r2, [r7, #28]
 8008c84:	4313      	orrs	r3, r2
 8008c86:	61fb      	str	r3, [r7, #28]
      break;
 8008c88:	e000      	b.n	8008c8c <HRTIM_TimingUnitWaveform_Config+0x228>
    }

  default:
    break;
 8008c8a:	bf00      	nop
  }

  /* Update the HRTIM registers */
  hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR = hrtim_timcr;
 8008c8c:	68fb      	ldr	r3, [r7, #12]
 8008c8e:	681a      	ldr	r2, [r3, #0]
 8008c90:	68bb      	ldr	r3, [r7, #8]
 8008c92:	3301      	adds	r3, #1
 8008c94:	01db      	lsls	r3, r3, #7
 8008c96:	4413      	add	r3, r2
 8008c98:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008c9a:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sTimerxRegs[TimerIdx].FLTxR = hrtim_timfltr;
 8008c9c:	68fb      	ldr	r3, [r7, #12]
 8008c9e:	681a      	ldr	r2, [r3, #0]
 8008ca0:	68bb      	ldr	r3, [r7, #8]
 8008ca2:	01db      	lsls	r3, r3, #7
 8008ca4:	4413      	add	r3, r2
 8008ca6:	33e8      	adds	r3, #232	; 0xe8
 8008ca8:	69ba      	ldr	r2, [r7, #24]
 8008caa:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sTimerxRegs[TimerIdx].OUTxR = hrtim_timoutr;
 8008cac:	68fb      	ldr	r3, [r7, #12]
 8008cae:	681a      	ldr	r2, [r3, #0]
 8008cb0:	68bb      	ldr	r3, [r7, #8]
 8008cb2:	01db      	lsls	r3, r3, #7
 8008cb4:	4413      	add	r3, r2
 8008cb6:	33e4      	adds	r3, #228	; 0xe4
 8008cb8:	6a3a      	ldr	r2, [r7, #32]
 8008cba:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sTimerxRegs[TimerIdx].RSTxR = hrtim_timrstr;
 8008cbc:	68fb      	ldr	r3, [r7, #12]
 8008cbe:	681a      	ldr	r2, [r3, #0]
 8008cc0:	68bb      	ldr	r3, [r7, #8]
 8008cc2:	01db      	lsls	r3, r3, #7
 8008cc4:	4413      	add	r3, r2
 8008cc6:	33d4      	adds	r3, #212	; 0xd4
 8008cc8:	697a      	ldr	r2, [r7, #20]
 8008cca:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sCommonRegs.BMCR = hrtim_bmcr;
 8008ccc:	68fb      	ldr	r3, [r7, #12]
 8008cce:	681b      	ldr	r3, [r3, #0]
 8008cd0:	69fa      	ldr	r2, [r7, #28]
 8008cd2:	f8c3 23a0 	str.w	r2, [r3, #928]	; 0x3a0
}
 8008cd6:	bf00      	nop
 8008cd8:	372c      	adds	r7, #44	; 0x2c
 8008cda:	46bd      	mov	sp, r7
 8008cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ce0:	4770      	bx	lr
 8008ce2:	bf00      	nop

08008ce4 <HRTIM_OutputConfig>:
  */
static void  HRTIM_OutputConfig(HRTIM_HandleTypeDef * hhrtim,
                                uint32_t TimerIdx,
                                uint32_t Output,
                                const HRTIM_OutputCfgTypeDef * pOutputCfg)
{
 8008ce4:	b480      	push	{r7}
 8008ce6:	b089      	sub	sp, #36	; 0x24
 8008ce8:	af00      	add	r7, sp, #0
 8008cea:	60f8      	str	r0, [r7, #12]
 8008cec:	60b9      	str	r1, [r7, #8]
 8008cee:	607a      	str	r2, [r7, #4]
 8008cf0:	603b      	str	r3, [r7, #0]
  uint32_t hrtim_outr;
  uint32_t hrtim_dtr;

  uint32_t shift = 0U;
 8008cf2:	2300      	movs	r3, #0
 8008cf4:	61bb      	str	r3, [r7, #24]

  hrtim_outr = hhrtim->Instance->sTimerxRegs[TimerIdx].OUTxR;
 8008cf6:	68fb      	ldr	r3, [r7, #12]
 8008cf8:	681a      	ldr	r2, [r3, #0]
 8008cfa:	68bb      	ldr	r3, [r7, #8]
 8008cfc:	01db      	lsls	r3, r3, #7
 8008cfe:	4413      	add	r3, r2
 8008d00:	33e4      	adds	r3, #228	; 0xe4
 8008d02:	681b      	ldr	r3, [r3, #0]
 8008d04:	61fb      	str	r3, [r7, #28]
  hrtim_dtr = hhrtim->Instance->sTimerxRegs[TimerIdx].DTxR;
 8008d06:	68fb      	ldr	r3, [r7, #12]
 8008d08:	681a      	ldr	r2, [r3, #0]
 8008d0a:	68bb      	ldr	r3, [r7, #8]
 8008d0c:	01db      	lsls	r3, r3, #7
 8008d0e:	4413      	add	r3, r2
 8008d10:	33b8      	adds	r3, #184	; 0xb8
 8008d12:	681b      	ldr	r3, [r3, #0]
 8008d14:	617b      	str	r3, [r7, #20]

  switch (Output)
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008d1c:	d04d      	beq.n	8008dba <HRTIM_OutputConfig+0xd6>
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008d24:	d85e      	bhi.n	8008de4 <HRTIM_OutputConfig+0x100>
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008d2c:	d032      	beq.n	8008d94 <HRTIM_OutputConfig+0xb0>
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008d34:	d856      	bhi.n	8008de4 <HRTIM_OutputConfig+0x100>
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	2b80      	cmp	r3, #128	; 0x80
 8008d3a:	d03e      	beq.n	8008dba <HRTIM_OutputConfig+0xd6>
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	2b80      	cmp	r3, #128	; 0x80
 8008d40:	d850      	bhi.n	8008de4 <HRTIM_OutputConfig+0x100>
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	2b40      	cmp	r3, #64	; 0x40
 8008d46:	d025      	beq.n	8008d94 <HRTIM_OutputConfig+0xb0>
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	2b40      	cmp	r3, #64	; 0x40
 8008d4c:	d84a      	bhi.n	8008de4 <HRTIM_OutputConfig+0x100>
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	2b01      	cmp	r3, #1
 8008d52:	d01f      	beq.n	8008d94 <HRTIM_OutputConfig+0xb0>
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	2b00      	cmp	r3, #0
 8008d58:	d044      	beq.n	8008de4 <HRTIM_OutputConfig+0x100>
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	2b20      	cmp	r3, #32
 8008d5e:	d841      	bhi.n	8008de4 <HRTIM_OutputConfig+0x100>
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	2b02      	cmp	r3, #2
 8008d64:	d33e      	bcc.n	8008de4 <HRTIM_OutputConfig+0x100>
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	3b02      	subs	r3, #2
 8008d6a:	2201      	movs	r2, #1
 8008d6c:	409a      	lsls	r2, r3
 8008d6e:	4b48      	ldr	r3, [pc, #288]	; (8008e90 <HRTIM_OutputConfig+0x1ac>)
 8008d70:	4013      	ands	r3, r2
 8008d72:	2b00      	cmp	r3, #0
 8008d74:	bf14      	ite	ne
 8008d76:	2301      	movne	r3, #1
 8008d78:	2300      	moveq	r3, #0
 8008d7a:	b2db      	uxtb	r3, r3
 8008d7c:	2b00      	cmp	r3, #0
 8008d7e:	d11c      	bne.n	8008dba <HRTIM_OutputConfig+0xd6>
 8008d80:	f244 0304 	movw	r3, #16388	; 0x4004
 8008d84:	4013      	ands	r3, r2
 8008d86:	2b00      	cmp	r3, #0
 8008d88:	bf14      	ite	ne
 8008d8a:	2301      	movne	r3, #1
 8008d8c:	2300      	moveq	r3, #0
 8008d8e:	b2db      	uxtb	r3, r3
 8008d90:	2b00      	cmp	r3, #0
 8008d92:	d027      	beq.n	8008de4 <HRTIM_OutputConfig+0x100>
  case HRTIM_OUTPUT_TC1:
  case HRTIM_OUTPUT_TD1:
  case HRTIM_OUTPUT_TE1:
    {
      /* Set the output set/reset crossbar */
      hhrtim->Instance->sTimerxRegs[TimerIdx].SETx1R = pOutputCfg->SetSource;
 8008d94:	68fb      	ldr	r3, [r7, #12]
 8008d96:	6819      	ldr	r1, [r3, #0]
 8008d98:	683b      	ldr	r3, [r7, #0]
 8008d9a:	685a      	ldr	r2, [r3, #4]
 8008d9c:	68bb      	ldr	r3, [r7, #8]
 8008d9e:	01db      	lsls	r3, r3, #7
 8008da0:	440b      	add	r3, r1
 8008da2:	33bc      	adds	r3, #188	; 0xbc
 8008da4:	601a      	str	r2, [r3, #0]
      hhrtim->Instance->sTimerxRegs[TimerIdx].RSTx1R = pOutputCfg->ResetSource;
 8008da6:	68fb      	ldr	r3, [r7, #12]
 8008da8:	6819      	ldr	r1, [r3, #0]
 8008daa:	683b      	ldr	r3, [r7, #0]
 8008dac:	689a      	ldr	r2, [r3, #8]
 8008dae:	68bb      	ldr	r3, [r7, #8]
 8008db0:	01db      	lsls	r3, r3, #7
 8008db2:	440b      	add	r3, r1
 8008db4:	33c0      	adds	r3, #192	; 0xc0
 8008db6:	601a      	str	r2, [r3, #0]
      break;
 8008db8:	e015      	b.n	8008de6 <HRTIM_OutputConfig+0x102>
  case HRTIM_OUTPUT_TC2:
  case HRTIM_OUTPUT_TD2:
  case HRTIM_OUTPUT_TE2:
    {
      /* Set the output set/reset crossbar */
      hhrtim->Instance->sTimerxRegs[TimerIdx].SETx2R = pOutputCfg->SetSource;
 8008dba:	68fb      	ldr	r3, [r7, #12]
 8008dbc:	6819      	ldr	r1, [r3, #0]
 8008dbe:	683b      	ldr	r3, [r7, #0]
 8008dc0:	685a      	ldr	r2, [r3, #4]
 8008dc2:	68bb      	ldr	r3, [r7, #8]
 8008dc4:	01db      	lsls	r3, r3, #7
 8008dc6:	440b      	add	r3, r1
 8008dc8:	33c4      	adds	r3, #196	; 0xc4
 8008dca:	601a      	str	r2, [r3, #0]
      hhrtim->Instance->sTimerxRegs[TimerIdx].RSTx2R = pOutputCfg->ResetSource;
 8008dcc:	68fb      	ldr	r3, [r7, #12]
 8008dce:	6819      	ldr	r1, [r3, #0]
 8008dd0:	683b      	ldr	r3, [r7, #0]
 8008dd2:	689a      	ldr	r2, [r3, #8]
 8008dd4:	68bb      	ldr	r3, [r7, #8]
 8008dd6:	01db      	lsls	r3, r3, #7
 8008dd8:	440b      	add	r3, r1
 8008dda:	33c8      	adds	r3, #200	; 0xc8
 8008ddc:	601a      	str	r2, [r3, #0]
      shift = 16U;
 8008dde:	2310      	movs	r3, #16
 8008de0:	61bb      	str	r3, [r7, #24]
      break;
 8008de2:	e000      	b.n	8008de6 <HRTIM_OutputConfig+0x102>
    }

  default:
    break;
 8008de4:	bf00      	nop
  hrtim_outr &= ~((HRTIM_OUTR_POL1 |
                   HRTIM_OUTR_IDLM1 |
                   HRTIM_OUTR_IDLES1|
                   HRTIM_OUTR_FAULT1|
                   HRTIM_OUTR_CHP1 |
                   HRTIM_OUTR_DIDL1) << shift);
 8008de6:	22fe      	movs	r2, #254	; 0xfe
 8008de8:	69bb      	ldr	r3, [r7, #24]
 8008dea:	fa02 f303 	lsl.w	r3, r2, r3
  hrtim_outr &= ~((HRTIM_OUTR_POL1 |
 8008dee:	43db      	mvns	r3, r3
 8008df0:	69fa      	ldr	r2, [r7, #28]
 8008df2:	4013      	ands	r3, r2
 8008df4:	61fb      	str	r3, [r7, #28]

  /* Set the polarity */
  hrtim_outr |= (pOutputCfg->Polarity << shift);
 8008df6:	683b      	ldr	r3, [r7, #0]
 8008df8:	681a      	ldr	r2, [r3, #0]
 8008dfa:	69bb      	ldr	r3, [r7, #24]
 8008dfc:	fa02 f303 	lsl.w	r3, r2, r3
 8008e00:	69fa      	ldr	r2, [r7, #28]
 8008e02:	4313      	orrs	r3, r2
 8008e04:	61fb      	str	r3, [r7, #28]

  /* Set the IDLE mode */
  hrtim_outr |= (pOutputCfg->IdleMode << shift);
 8008e06:	683b      	ldr	r3, [r7, #0]
 8008e08:	68da      	ldr	r2, [r3, #12]
 8008e0a:	69bb      	ldr	r3, [r7, #24]
 8008e0c:	fa02 f303 	lsl.w	r3, r2, r3
 8008e10:	69fa      	ldr	r2, [r7, #28]
 8008e12:	4313      	orrs	r3, r2
 8008e14:	61fb      	str	r3, [r7, #28]

  /* Set the IDLE state */
  hrtim_outr |= (pOutputCfg->IdleLevel << shift);
 8008e16:	683b      	ldr	r3, [r7, #0]
 8008e18:	691a      	ldr	r2, [r3, #16]
 8008e1a:	69bb      	ldr	r3, [r7, #24]
 8008e1c:	fa02 f303 	lsl.w	r3, r2, r3
 8008e20:	69fa      	ldr	r2, [r7, #28]
 8008e22:	4313      	orrs	r3, r2
 8008e24:	61fb      	str	r3, [r7, #28]

  /* Set the FAULT state */
  hrtim_outr |= (pOutputCfg->FaultLevel << shift);
 8008e26:	683b      	ldr	r3, [r7, #0]
 8008e28:	695a      	ldr	r2, [r3, #20]
 8008e2a:	69bb      	ldr	r3, [r7, #24]
 8008e2c:	fa02 f303 	lsl.w	r3, r2, r3
 8008e30:	69fa      	ldr	r2, [r7, #28]
 8008e32:	4313      	orrs	r3, r2
 8008e34:	61fb      	str	r3, [r7, #28]

  /* Set the chopper mode */
  hrtim_outr |= (pOutputCfg->ChopperModeEnable << shift);
 8008e36:	683b      	ldr	r3, [r7, #0]
 8008e38:	699a      	ldr	r2, [r3, #24]
 8008e3a:	69bb      	ldr	r3, [r7, #24]
 8008e3c:	fa02 f303 	lsl.w	r3, r2, r3
 8008e40:	69fa      	ldr	r2, [r7, #28]
 8008e42:	4313      	orrs	r3, r2
 8008e44:	61fb      	str	r3, [r7, #28]
     state during a burst mode operation is allowed only under the following
     conditions:
     - the outputs is active during the burst mode (IDLES=1U)
     - positive deadtimes (SDTR/SDTF set to 0U)
  */
  if ((pOutputCfg->IdleLevel == HRTIM_OUTPUTIDLELEVEL_ACTIVE) &&
 8008e46:	683b      	ldr	r3, [r7, #0]
 8008e48:	691b      	ldr	r3, [r3, #16]
 8008e4a:	2b08      	cmp	r3, #8
 8008e4c:	d111      	bne.n	8008e72 <HRTIM_OutputConfig+0x18e>
      ((hrtim_dtr & HRTIM_DTR_SDTR) == (uint32_t)RESET) &&
 8008e4e:	697b      	ldr	r3, [r7, #20]
 8008e50:	f403 7300 	and.w	r3, r3, #512	; 0x200
  if ((pOutputCfg->IdleLevel == HRTIM_OUTPUTIDLELEVEL_ACTIVE) &&
 8008e54:	2b00      	cmp	r3, #0
 8008e56:	d10c      	bne.n	8008e72 <HRTIM_OutputConfig+0x18e>
      ((hrtim_dtr & HRTIM_DTR_SDTF) == (uint32_t)RESET))
 8008e58:	697b      	ldr	r3, [r7, #20]
 8008e5a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
      ((hrtim_dtr & HRTIM_DTR_SDTR) == (uint32_t)RESET) &&
 8008e5e:	2b00      	cmp	r3, #0
 8008e60:	d107      	bne.n	8008e72 <HRTIM_OutputConfig+0x18e>
  {
    hrtim_outr |= (pOutputCfg->BurstModeEntryDelayed << shift);
 8008e62:	683b      	ldr	r3, [r7, #0]
 8008e64:	69da      	ldr	r2, [r3, #28]
 8008e66:	69bb      	ldr	r3, [r7, #24]
 8008e68:	fa02 f303 	lsl.w	r3, r2, r3
 8008e6c:	69fa      	ldr	r2, [r7, #28]
 8008e6e:	4313      	orrs	r3, r2
 8008e70:	61fb      	str	r3, [r7, #28]
  }

  /* Update HRTIM register */
  hhrtim->Instance->sTimerxRegs[TimerIdx].OUTxR = hrtim_outr;
 8008e72:	68fb      	ldr	r3, [r7, #12]
 8008e74:	681a      	ldr	r2, [r3, #0]
 8008e76:	68bb      	ldr	r3, [r7, #8]
 8008e78:	01db      	lsls	r3, r3, #7
 8008e7a:	4413      	add	r3, r2
 8008e7c:	33e4      	adds	r3, #228	; 0xe4
 8008e7e:	69fa      	ldr	r2, [r7, #28]
 8008e80:	601a      	str	r2, [r3, #0]
}
 8008e82:	bf00      	nop
 8008e84:	3724      	adds	r7, #36	; 0x24
 8008e86:	46bd      	mov	sp, r7
 8008e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e8c:	4770      	bx	lr
 8008e8e:	bf00      	nop
 8008e90:	40000041 	.word	0x40000041

08008e94 <HRTIM_ForceRegistersUpdate>:
  * @param  TimerIdx Timer index
  * @retval None
  */
static void HRTIM_ForceRegistersUpdate(HRTIM_HandleTypeDef * hhrtim,
                                       uint32_t TimerIdx)
{
 8008e94:	b480      	push	{r7}
 8008e96:	b083      	sub	sp, #12
 8008e98:	af00      	add	r7, sp, #0
 8008e9a:	6078      	str	r0, [r7, #4]
 8008e9c:	6039      	str	r1, [r7, #0]
  switch (TimerIdx)
 8008e9e:	683b      	ldr	r3, [r7, #0]
 8008ea0:	2b05      	cmp	r3, #5
 8008ea2:	d851      	bhi.n	8008f48 <HRTIM_ForceRegistersUpdate+0xb4>
 8008ea4:	a201      	add	r2, pc, #4	; (adr r2, 8008eac <HRTIM_ForceRegistersUpdate+0x18>)
 8008ea6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008eaa:	bf00      	nop
 8008eac:	08008edb 	.word	0x08008edb
 8008eb0:	08008ef1 	.word	0x08008ef1
 8008eb4:	08008f07 	.word	0x08008f07
 8008eb8:	08008f1d 	.word	0x08008f1d
 8008ebc:	08008f33 	.word	0x08008f33
 8008ec0:	08008ec5 	.word	0x08008ec5
  {
  case HRTIM_TIMERINDEX_MASTER:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_MSWU;
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	681b      	ldr	r3, [r3, #0]
 8008ec8:	f8d3 2384 	ldr.w	r2, [r3, #900]	; 0x384
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	681b      	ldr	r3, [r3, #0]
 8008ed0:	f042 0201 	orr.w	r2, r2, #1
 8008ed4:	f8c3 2384 	str.w	r2, [r3, #900]	; 0x384
      break;
 8008ed8:	e037      	b.n	8008f4a <HRTIM_ForceRegistersUpdate+0xb6>
    }

  case HRTIM_TIMERINDEX_TIMER_A:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TASWU;
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	681b      	ldr	r3, [r3, #0]
 8008ede:	f8d3 2384 	ldr.w	r2, [r3, #900]	; 0x384
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	681b      	ldr	r3, [r3, #0]
 8008ee6:	f042 0202 	orr.w	r2, r2, #2
 8008eea:	f8c3 2384 	str.w	r2, [r3, #900]	; 0x384
      break;
 8008eee:	e02c      	b.n	8008f4a <HRTIM_ForceRegistersUpdate+0xb6>
    }

  case HRTIM_TIMERINDEX_TIMER_B:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TBSWU;
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	681b      	ldr	r3, [r3, #0]
 8008ef4:	f8d3 2384 	ldr.w	r2, [r3, #900]	; 0x384
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	681b      	ldr	r3, [r3, #0]
 8008efc:	f042 0204 	orr.w	r2, r2, #4
 8008f00:	f8c3 2384 	str.w	r2, [r3, #900]	; 0x384
      break;
 8008f04:	e021      	b.n	8008f4a <HRTIM_ForceRegistersUpdate+0xb6>
    }

  case HRTIM_TIMERINDEX_TIMER_C:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TCSWU;
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	681b      	ldr	r3, [r3, #0]
 8008f0a:	f8d3 2384 	ldr.w	r2, [r3, #900]	; 0x384
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	681b      	ldr	r3, [r3, #0]
 8008f12:	f042 0208 	orr.w	r2, r2, #8
 8008f16:	f8c3 2384 	str.w	r2, [r3, #900]	; 0x384
      break;
 8008f1a:	e016      	b.n	8008f4a <HRTIM_ForceRegistersUpdate+0xb6>
    }

  case HRTIM_TIMERINDEX_TIMER_D:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TDSWU;
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	681b      	ldr	r3, [r3, #0]
 8008f20:	f8d3 2384 	ldr.w	r2, [r3, #900]	; 0x384
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	681b      	ldr	r3, [r3, #0]
 8008f28:	f042 0210 	orr.w	r2, r2, #16
 8008f2c:	f8c3 2384 	str.w	r2, [r3, #900]	; 0x384
      break;
 8008f30:	e00b      	b.n	8008f4a <HRTIM_ForceRegistersUpdate+0xb6>
    }

  case HRTIM_TIMERINDEX_TIMER_E:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TESWU;
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	681b      	ldr	r3, [r3, #0]
 8008f36:	f8d3 2384 	ldr.w	r2, [r3, #900]	; 0x384
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	681b      	ldr	r3, [r3, #0]
 8008f3e:	f042 0220 	orr.w	r2, r2, #32
 8008f42:	f8c3 2384 	str.w	r2, [r3, #900]	; 0x384
      break;
 8008f46:	e000      	b.n	8008f4a <HRTIM_ForceRegistersUpdate+0xb6>
    }

  default:
    break;
 8008f48:	bf00      	nop
  }
}
 8008f4a:	bf00      	nop
 8008f4c:	370c      	adds	r7, #12
 8008f4e:	46bd      	mov	sp, r7
 8008f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f54:	4770      	bx	lr
 8008f56:	bf00      	nop

08008f58 <HRTIM_HRTIM_ISR>:
  * @brief  HRTIM interrupts service routine
  * @param  hhrtim pointer to HAL HRTIM handle
  * @retval None
  */
static void HRTIM_HRTIM_ISR(HRTIM_HandleTypeDef * hhrtim)
{
 8008f58:	b580      	push	{r7, lr}
 8008f5a:	b084      	sub	sp, #16
 8008f5c:	af00      	add	r7, sp, #0
 8008f5e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hhrtim->Instance->sCommonRegs.ISR);
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	681b      	ldr	r3, [r3, #0]
 8008f64:	f8d3 3388 	ldr.w	r3, [r3, #904]	; 0x388
 8008f68:	60fb      	str	r3, [r7, #12]
  uint32_t ierits   = READ_REG(hhrtim->Instance->sCommonRegs.IER);
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	681b      	ldr	r3, [r3, #0]
 8008f6e:	f8d3 3390 	ldr.w	r3, [r3, #912]	; 0x390
 8008f72:	60bb      	str	r3, [r7, #8]

  /* Fault 1 event */
  if((uint32_t)(isrflags & HRTIM_FLAG_FLT1) != (uint32_t)RESET)
 8008f74:	68fb      	ldr	r3, [r7, #12]
 8008f76:	f003 0301 	and.w	r3, r3, #1
 8008f7a:	2b00      	cmp	r3, #0
 8008f7c:	d00c      	beq.n	8008f98 <HRTIM_HRTIM_ISR+0x40>
  {
    if((uint32_t)(ierits & HRTIM_IT_FLT1) != (uint32_t)RESET)
 8008f7e:	68bb      	ldr	r3, [r7, #8]
 8008f80:	f003 0301 	and.w	r3, r3, #1
 8008f84:	2b00      	cmp	r3, #0
 8008f86:	d007      	beq.n	8008f98 <HRTIM_HRTIM_ISR+0x40>
    {
      __HAL_HRTIM_CLEAR_IT(hhrtim, HRTIM_IT_FLT1);
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	681b      	ldr	r3, [r3, #0]
 8008f8c:	2201      	movs	r2, #1
 8008f8e:	f8c3 238c 	str.w	r2, [r3, #908]	; 0x38c

      /* Invoke Fault 1 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Fault1Callback(hhrtim);
#else
      HAL_HRTIM_Fault1Callback(hhrtim);
 8008f92:	6878      	ldr	r0, [r7, #4]
 8008f94:	f7ff fbc7 	bl	8008726 <HAL_HRTIM_Fault1Callback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Fault 2 event */
  if((uint32_t)(isrflags & HRTIM_FLAG_FLT2) != (uint32_t)RESET)
 8008f98:	68fb      	ldr	r3, [r7, #12]
 8008f9a:	f003 0302 	and.w	r3, r3, #2
 8008f9e:	2b00      	cmp	r3, #0
 8008fa0:	d00c      	beq.n	8008fbc <HRTIM_HRTIM_ISR+0x64>
  {
    if((uint32_t)(ierits & HRTIM_IT_FLT2) != (uint32_t)RESET)
 8008fa2:	68bb      	ldr	r3, [r7, #8]
 8008fa4:	f003 0302 	and.w	r3, r3, #2
 8008fa8:	2b00      	cmp	r3, #0
 8008faa:	d007      	beq.n	8008fbc <HRTIM_HRTIM_ISR+0x64>
    {
      __HAL_HRTIM_CLEAR_IT(hhrtim, HRTIM_IT_FLT2);
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	681b      	ldr	r3, [r3, #0]
 8008fb0:	2202      	movs	r2, #2
 8008fb2:	f8c3 238c 	str.w	r2, [r3, #908]	; 0x38c

      /* Invoke Fault 2 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Fault2Callback(hhrtim);
#else
      HAL_HRTIM_Fault2Callback(hhrtim);
 8008fb6:	6878      	ldr	r0, [r7, #4]
 8008fb8:	f7ff fbbf 	bl	800873a <HAL_HRTIM_Fault2Callback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Fault 3 event */
  if((uint32_t)(isrflags & HRTIM_FLAG_FLT3) != (uint32_t)RESET)
 8008fbc:	68fb      	ldr	r3, [r7, #12]
 8008fbe:	f003 0304 	and.w	r3, r3, #4
 8008fc2:	2b00      	cmp	r3, #0
 8008fc4:	d00c      	beq.n	8008fe0 <HRTIM_HRTIM_ISR+0x88>
  {
    if((uint32_t)(ierits & HRTIM_IT_FLT3) != (uint32_t)RESET)
 8008fc6:	68bb      	ldr	r3, [r7, #8]
 8008fc8:	f003 0304 	and.w	r3, r3, #4
 8008fcc:	2b00      	cmp	r3, #0
 8008fce:	d007      	beq.n	8008fe0 <HRTIM_HRTIM_ISR+0x88>
    {
      __HAL_HRTIM_CLEAR_IT(hhrtim, HRTIM_IT_FLT3);
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	681b      	ldr	r3, [r3, #0]
 8008fd4:	2204      	movs	r2, #4
 8008fd6:	f8c3 238c 	str.w	r2, [r3, #908]	; 0x38c

      /* Invoke Fault 3 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Fault3Callback(hhrtim);
#else
      HAL_HRTIM_Fault3Callback(hhrtim);
 8008fda:	6878      	ldr	r0, [r7, #4]
 8008fdc:	f7ff fbb7 	bl	800874e <HAL_HRTIM_Fault3Callback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Fault 4 event */
  if((uint32_t)(isrflags & HRTIM_FLAG_FLT4) != (uint32_t)RESET)
 8008fe0:	68fb      	ldr	r3, [r7, #12]
 8008fe2:	f003 0308 	and.w	r3, r3, #8
 8008fe6:	2b00      	cmp	r3, #0
 8008fe8:	d00c      	beq.n	8009004 <HRTIM_HRTIM_ISR+0xac>
  {
    if((uint32_t)(ierits & HRTIM_IT_FLT4) != (uint32_t)RESET)
 8008fea:	68bb      	ldr	r3, [r7, #8]
 8008fec:	f003 0308 	and.w	r3, r3, #8
 8008ff0:	2b00      	cmp	r3, #0
 8008ff2:	d007      	beq.n	8009004 <HRTIM_HRTIM_ISR+0xac>
    {
      __HAL_HRTIM_CLEAR_IT(hhrtim, HRTIM_IT_FLT4);
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	681b      	ldr	r3, [r3, #0]
 8008ff8:	2208      	movs	r2, #8
 8008ffa:	f8c3 238c 	str.w	r2, [r3, #908]	; 0x38c

      /* Invoke Fault 4 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Fault4Callback(hhrtim);
#else
      HAL_HRTIM_Fault4Callback(hhrtim);
 8008ffe:	6878      	ldr	r0, [r7, #4]
 8009000:	f7ff fbaf 	bl	8008762 <HAL_HRTIM_Fault4Callback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Fault 5 event */
  if((uint32_t)(isrflags & HRTIM_FLAG_FLT5) != (uint32_t)RESET)
 8009004:	68fb      	ldr	r3, [r7, #12]
 8009006:	f003 0310 	and.w	r3, r3, #16
 800900a:	2b00      	cmp	r3, #0
 800900c:	d00c      	beq.n	8009028 <HRTIM_HRTIM_ISR+0xd0>
  {
    if((uint32_t)(ierits & HRTIM_IT_FLT5) != (uint32_t)RESET)
 800900e:	68bb      	ldr	r3, [r7, #8]
 8009010:	f003 0310 	and.w	r3, r3, #16
 8009014:	2b00      	cmp	r3, #0
 8009016:	d007      	beq.n	8009028 <HRTIM_HRTIM_ISR+0xd0>
    {
      __HAL_HRTIM_CLEAR_IT(hhrtim, HRTIM_IT_FLT5);
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	681b      	ldr	r3, [r3, #0]
 800901c:	2210      	movs	r2, #16
 800901e:	f8c3 238c 	str.w	r2, [r3, #908]	; 0x38c

      /* Invoke Fault 5 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Fault5Callback(hhrtim);
#else
      HAL_HRTIM_Fault5Callback(hhrtim);
 8009022:	6878      	ldr	r0, [r7, #4]
 8009024:	f7ff fba7 	bl	8008776 <HAL_HRTIM_Fault5Callback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* System fault event */
  if((uint32_t)(isrflags & HRTIM_FLAG_SYSFLT) != (uint32_t)RESET)
 8009028:	68fb      	ldr	r3, [r7, #12]
 800902a:	f003 0320 	and.w	r3, r3, #32
 800902e:	2b00      	cmp	r3, #0
 8009030:	d00c      	beq.n	800904c <HRTIM_HRTIM_ISR+0xf4>
  {
    if((uint32_t)(ierits & HRTIM_IT_SYSFLT) != (uint32_t)RESET)
 8009032:	68bb      	ldr	r3, [r7, #8]
 8009034:	f003 0320 	and.w	r3, r3, #32
 8009038:	2b00      	cmp	r3, #0
 800903a:	d007      	beq.n	800904c <HRTIM_HRTIM_ISR+0xf4>
    {
      __HAL_HRTIM_CLEAR_IT(hhrtim, HRTIM_IT_SYSFLT);
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	681b      	ldr	r3, [r3, #0]
 8009040:	2220      	movs	r2, #32
 8009042:	f8c3 238c 	str.w	r2, [r3, #908]	; 0x38c

      /* Invoke System fault event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->SystemFaultCallback(hhrtim);
#else
      HAL_HRTIM_SystemFaultCallback(hhrtim);
 8009046:	6878      	ldr	r0, [r7, #4]
 8009048:	f7ff fb9f 	bl	800878a <HAL_HRTIM_SystemFaultCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }
}
 800904c:	bf00      	nop
 800904e:	3710      	adds	r7, #16
 8009050:	46bd      	mov	sp, r7
 8009052:	bd80      	pop	{r7, pc}

08009054 <HRTIM_Master_ISR>:
* @brief  Master timer interrupts service routine
* @param  hhrtim pointer to HAL HRTIM handle
* @retval None
*/
static void HRTIM_Master_ISR(HRTIM_HandleTypeDef * hhrtim)
{
 8009054:	b580      	push	{r7, lr}
 8009056:	b086      	sub	sp, #24
 8009058:	af00      	add	r7, sp, #0
 800905a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hhrtim->Instance->sCommonRegs.ISR);
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	681b      	ldr	r3, [r3, #0]
 8009060:	f8d3 3388 	ldr.w	r3, [r3, #904]	; 0x388
 8009064:	617b      	str	r3, [r7, #20]
  uint32_t ierits    = READ_REG(hhrtim->Instance->sCommonRegs.IER);
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	681b      	ldr	r3, [r3, #0]
 800906a:	f8d3 3390 	ldr.w	r3, [r3, #912]	; 0x390
 800906e:	613b      	str	r3, [r7, #16]
  uint32_t misrflags = READ_REG(hhrtim->Instance->sMasterRegs.MISR);
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	681b      	ldr	r3, [r3, #0]
 8009074:	685b      	ldr	r3, [r3, #4]
 8009076:	60fb      	str	r3, [r7, #12]
  uint32_t mdierits  = READ_REG(hhrtim->Instance->sMasterRegs.MDIER);
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	681b      	ldr	r3, [r3, #0]
 800907c:	68db      	ldr	r3, [r3, #12]
 800907e:	60bb      	str	r3, [r7, #8]

  /* Burst mode period event */
  if((uint32_t)(isrflags & HRTIM_FLAG_BMPER) != (uint32_t)RESET)
 8009080:	697b      	ldr	r3, [r7, #20]
 8009082:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009086:	2b00      	cmp	r3, #0
 8009088:	d00d      	beq.n	80090a6 <HRTIM_Master_ISR+0x52>
  {
    if((uint32_t)(ierits & HRTIM_IT_BMPER) != (uint32_t)RESET)
 800908a:	693b      	ldr	r3, [r7, #16]
 800908c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009090:	2b00      	cmp	r3, #0
 8009092:	d008      	beq.n	80090a6 <HRTIM_Master_ISR+0x52>
    {
      __HAL_HRTIM_CLEAR_IT(hhrtim, HRTIM_IT_BMPER);
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	681b      	ldr	r3, [r3, #0]
 8009098:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800909c:	f8c3 238c 	str.w	r2, [r3, #908]	; 0x38c

      /* Invoke Burst mode period event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->BurstModePeriodCallback(hhrtim);
#else
      HAL_HRTIM_BurstModePeriodCallback(hhrtim);
 80090a0:	6878      	ldr	r0, [r7, #4]
 80090a2:	f7ff fb7c 	bl	800879e <HAL_HRTIM_BurstModePeriodCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Master timer compare 1 event */
  if((uint32_t)(misrflags & HRTIM_MASTER_FLAG_MCMP1) != (uint32_t)RESET)
 80090a6:	68fb      	ldr	r3, [r7, #12]
 80090a8:	f003 0301 	and.w	r3, r3, #1
 80090ac:	2b00      	cmp	r3, #0
 80090ae:	d00c      	beq.n	80090ca <HRTIM_Master_ISR+0x76>
  {
    if((uint32_t)(mdierits & HRTIM_MASTER_IT_MCMP1) != (uint32_t)RESET)
 80090b0:	68bb      	ldr	r3, [r7, #8]
 80090b2:	f003 0301 	and.w	r3, r3, #1
 80090b6:	2b00      	cmp	r3, #0
 80090b8:	d007      	beq.n	80090ca <HRTIM_Master_ISR+0x76>
    {
      __HAL_HRTIM_MASTER_CLEAR_IT(hhrtim, HRTIM_MASTER_IT_MCMP1);
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	681b      	ldr	r3, [r3, #0]
 80090be:	2201      	movs	r2, #1
 80090c0:	609a      	str	r2, [r3, #8]

      /* Invoke compare 1 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Compare1EventCallback(hhrtim, HRTIM_TIMERINDEX_MASTER);
#else
      HAL_HRTIM_Compare1EventCallback(hhrtim, HRTIM_TIMERINDEX_MASTER);
 80090c2:	2105      	movs	r1, #5
 80090c4:	6878      	ldr	r0, [r7, #4]
 80090c6:	f7ff fb89 	bl	80087dc <HAL_HRTIM_Compare1EventCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Master timer compare 2 event */
  if((uint32_t)(misrflags & HRTIM_MASTER_FLAG_MCMP2) != (uint32_t)RESET)
 80090ca:	68fb      	ldr	r3, [r7, #12]
 80090cc:	f003 0302 	and.w	r3, r3, #2
 80090d0:	2b00      	cmp	r3, #0
 80090d2:	d00c      	beq.n	80090ee <HRTIM_Master_ISR+0x9a>
  {
    if((uint32_t)(mdierits & HRTIM_MASTER_IT_MCMP2) != (uint32_t)RESET)
 80090d4:	68bb      	ldr	r3, [r7, #8]
 80090d6:	f003 0302 	and.w	r3, r3, #2
 80090da:	2b00      	cmp	r3, #0
 80090dc:	d007      	beq.n	80090ee <HRTIM_Master_ISR+0x9a>
    {
      __HAL_HRTIM_MASTER_CLEAR_IT(hhrtim, HRTIM_MASTER_IT_MCMP2);
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	681b      	ldr	r3, [r3, #0]
 80090e2:	2202      	movs	r2, #2
 80090e4:	609a      	str	r2, [r3, #8]

      /* Invoke compare 2 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Compare2EventCallback(hhrtim, HRTIM_TIMERINDEX_MASTER);
#else
      HAL_HRTIM_Compare2EventCallback(hhrtim, HRTIM_TIMERINDEX_MASTER);
 80090e6:	2105      	movs	r1, #5
 80090e8:	6878      	ldr	r0, [r7, #4]
 80090ea:	f7fa fdc3 	bl	8003c74 <HAL_HRTIM_Compare2EventCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Master timer compare 3 event */
  if((uint32_t)(misrflags & HRTIM_MASTER_FLAG_MCMP3) != (uint32_t)RESET)
 80090ee:	68fb      	ldr	r3, [r7, #12]
 80090f0:	f003 0304 	and.w	r3, r3, #4
 80090f4:	2b00      	cmp	r3, #0
 80090f6:	d00c      	beq.n	8009112 <HRTIM_Master_ISR+0xbe>
  {
    if((uint32_t)(mdierits & HRTIM_MASTER_IT_MCMP3) != (uint32_t)RESET)
 80090f8:	68bb      	ldr	r3, [r7, #8]
 80090fa:	f003 0304 	and.w	r3, r3, #4
 80090fe:	2b00      	cmp	r3, #0
 8009100:	d007      	beq.n	8009112 <HRTIM_Master_ISR+0xbe>
    {
      __HAL_HRTIM_MASTER_CLEAR_IT(hhrtim, HRTIM_MASTER_IT_MCMP3);
 8009102:	687b      	ldr	r3, [r7, #4]
 8009104:	681b      	ldr	r3, [r3, #0]
 8009106:	2204      	movs	r2, #4
 8009108:	609a      	str	r2, [r3, #8]

      /* Invoke compare 3 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Compare3EventCallback(hhrtim, HRTIM_TIMERINDEX_MASTER);
#else
      HAL_HRTIM_Compare3EventCallback(hhrtim, HRTIM_TIMERINDEX_MASTER);
 800910a:	2105      	movs	r1, #5
 800910c:	6878      	ldr	r0, [r7, #4]
 800910e:	f7fa fdbd 	bl	8003c8c <HAL_HRTIM_Compare3EventCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Master timer compare 4 event */
  if((uint32_t)(misrflags & HRTIM_MASTER_FLAG_MCMP4) != (uint32_t)RESET)
 8009112:	68fb      	ldr	r3, [r7, #12]
 8009114:	f003 0308 	and.w	r3, r3, #8
 8009118:	2b00      	cmp	r3, #0
 800911a:	d00c      	beq.n	8009136 <HRTIM_Master_ISR+0xe2>
  {
    if((uint32_t)(mdierits & HRTIM_MASTER_IT_MCMP4) != (uint32_t)RESET)
 800911c:	68bb      	ldr	r3, [r7, #8]
 800911e:	f003 0308 	and.w	r3, r3, #8
 8009122:	2b00      	cmp	r3, #0
 8009124:	d007      	beq.n	8009136 <HRTIM_Master_ISR+0xe2>
    {
      __HAL_HRTIM_MASTER_CLEAR_IT(hhrtim, HRTIM_MASTER_IT_MCMP4);
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	681b      	ldr	r3, [r3, #0]
 800912a:	2208      	movs	r2, #8
 800912c:	609a      	str	r2, [r3, #8]

      /* Invoke compare 4 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Compare4EventCallback(hhrtim, HRTIM_TIMERINDEX_MASTER);
#else
      HAL_HRTIM_Compare4EventCallback(hhrtim, HRTIM_TIMERINDEX_MASTER);
 800912e:	2105      	movs	r1, #5
 8009130:	6878      	ldr	r0, [r7, #4]
 8009132:	f7ff fb5e 	bl	80087f2 <HAL_HRTIM_Compare4EventCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Master timer repetition event */
  if((uint32_t)(misrflags & HRTIM_MASTER_FLAG_MREP) != (uint32_t)RESET)
 8009136:	68fb      	ldr	r3, [r7, #12]
 8009138:	f003 0310 	and.w	r3, r3, #16
 800913c:	2b00      	cmp	r3, #0
 800913e:	d00c      	beq.n	800915a <HRTIM_Master_ISR+0x106>
  {
    if((uint32_t)(mdierits & HRTIM_MASTER_IT_MREP) != (uint32_t)RESET)
 8009140:	68bb      	ldr	r3, [r7, #8]
 8009142:	f003 0310 	and.w	r3, r3, #16
 8009146:	2b00      	cmp	r3, #0
 8009148:	d007      	beq.n	800915a <HRTIM_Master_ISR+0x106>
    {
      __HAL_HRTIM_MASTER_CLEAR_IT(hhrtim, HRTIM_MASTER_IT_MREP);
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	681b      	ldr	r3, [r3, #0]
 800914e:	2210      	movs	r2, #16
 8009150:	609a      	str	r2, [r3, #8]

      /* Invoke repetition event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->RepetitionEventCallback(hhrtim, HRTIM_TIMERINDEX_MASTER);
#else
      HAL_HRTIM_RepetitionEventCallback(hhrtim, HRTIM_TIMERINDEX_MASTER);
 8009152:	2105      	movs	r1, #5
 8009154:	6878      	ldr	r0, [r7, #4]
 8009156:	f7fa fe0d 	bl	8003d74 <HAL_HRTIM_RepetitionEventCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Synchronization input event */
  if((uint32_t)(misrflags & HRTIM_MASTER_FLAG_SYNC) != (uint32_t)RESET)
 800915a:	68fb      	ldr	r3, [r7, #12]
 800915c:	f003 0320 	and.w	r3, r3, #32
 8009160:	2b00      	cmp	r3, #0
 8009162:	d00b      	beq.n	800917c <HRTIM_Master_ISR+0x128>
  {
    if((uint32_t)(mdierits & HRTIM_MASTER_IT_SYNC) != (uint32_t)RESET)
 8009164:	68bb      	ldr	r3, [r7, #8]
 8009166:	f003 0320 	and.w	r3, r3, #32
 800916a:	2b00      	cmp	r3, #0
 800916c:	d006      	beq.n	800917c <HRTIM_Master_ISR+0x128>
    {
      __HAL_HRTIM_MASTER_CLEAR_IT(hhrtim, HRTIM_MASTER_IT_SYNC);
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	681b      	ldr	r3, [r3, #0]
 8009172:	2220      	movs	r2, #32
 8009174:	609a      	str	r2, [r3, #8]

      /* Invoke synchronization event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->SynchronizationEventCallback(hhrtim);
#else
      HAL_HRTIM_SynchronizationEventCallback(hhrtim);
 8009176:	6878      	ldr	r0, [r7, #4]
 8009178:	f7ff fb1b 	bl	80087b2 <HAL_HRTIM_SynchronizationEventCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Master timer registers update event */
  if((uint32_t)(misrflags & HRTIM_MASTER_FLAG_MUPD) != (uint32_t)RESET)
 800917c:	68fb      	ldr	r3, [r7, #12]
 800917e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009182:	2b00      	cmp	r3, #0
 8009184:	d00c      	beq.n	80091a0 <HRTIM_Master_ISR+0x14c>
  {
    if((uint32_t)(mdierits & HRTIM_MASTER_IT_MUPD) != (uint32_t)RESET)
 8009186:	68bb      	ldr	r3, [r7, #8]
 8009188:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800918c:	2b00      	cmp	r3, #0
 800918e:	d007      	beq.n	80091a0 <HRTIM_Master_ISR+0x14c>
    {
      __HAL_HRTIM_MASTER_CLEAR_IT(hhrtim, HRTIM_MASTER_IT_MUPD);
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	681b      	ldr	r3, [r3, #0]
 8009194:	2240      	movs	r2, #64	; 0x40
 8009196:	609a      	str	r2, [r3, #8]

      /* Invoke registers update event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->RegistersUpdateCallback(hhrtim, HRTIM_TIMERINDEX_MASTER);
#else
      HAL_HRTIM_RegistersUpdateCallback(hhrtim, HRTIM_TIMERINDEX_MASTER);
 8009198:	2105      	movs	r1, #5
 800919a:	6878      	ldr	r0, [r7, #4]
 800919c:	f7ff fb13 	bl	80087c6 <HAL_HRTIM_RegistersUpdateCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }
}
 80091a0:	bf00      	nop
 80091a2:	3718      	adds	r7, #24
 80091a4:	46bd      	mov	sp, r7
 80091a6:	bd80      	pop	{r7, pc}

080091a8 <HRTIM_Timer_ISR>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_E for timer E
  * @retval None
*/
static void HRTIM_Timer_ISR(HRTIM_HandleTypeDef * hhrtim,
                     uint32_t TimerIdx)
{
 80091a8:	b580      	push	{r7, lr}
 80091aa:	b084      	sub	sp, #16
 80091ac:	af00      	add	r7, sp, #0
 80091ae:	6078      	str	r0, [r7, #4]
 80091b0:	6039      	str	r1, [r7, #0]
  uint32_t tisrflags = READ_REG(hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxISR);
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	681a      	ldr	r2, [r3, #0]
 80091b6:	683b      	ldr	r3, [r7, #0]
 80091b8:	3301      	adds	r3, #1
 80091ba:	01db      	lsls	r3, r3, #7
 80091bc:	4413      	add	r3, r2
 80091be:	3304      	adds	r3, #4
 80091c0:	681b      	ldr	r3, [r3, #0]
 80091c2:	60fb      	str	r3, [r7, #12]
  uint32_t tdierits  = READ_REG(hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxDIER);
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	681a      	ldr	r2, [r3, #0]
 80091c8:	683b      	ldr	r3, [r7, #0]
 80091ca:	01db      	lsls	r3, r3, #7
 80091cc:	4413      	add	r3, r2
 80091ce:	338c      	adds	r3, #140	; 0x8c
 80091d0:	681b      	ldr	r3, [r3, #0]
 80091d2:	60bb      	str	r3, [r7, #8]

  /* Timer compare 1 event */
  if((uint32_t)(tisrflags & HRTIM_TIM_FLAG_CMP1) != (uint32_t)RESET)
 80091d4:	68fb      	ldr	r3, [r7, #12]
 80091d6:	f003 0301 	and.w	r3, r3, #1
 80091da:	2b00      	cmp	r3, #0
 80091dc:	d010      	beq.n	8009200 <HRTIM_Timer_ISR+0x58>
  {
    if((uint32_t)(tdierits & HRTIM_TIM_IT_CMP1) != (uint32_t)RESET)
 80091de:	68bb      	ldr	r3, [r7, #8]
 80091e0:	f003 0301 	and.w	r3, r3, #1
 80091e4:	2b00      	cmp	r3, #0
 80091e6:	d00b      	beq.n	8009200 <HRTIM_Timer_ISR+0x58>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_CMP1);
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	681a      	ldr	r2, [r3, #0]
 80091ec:	683b      	ldr	r3, [r7, #0]
 80091ee:	01db      	lsls	r3, r3, #7
 80091f0:	4413      	add	r3, r2
 80091f2:	3388      	adds	r3, #136	; 0x88
 80091f4:	2201      	movs	r2, #1
 80091f6:	601a      	str	r2, [r3, #0]

      /* Invoke compare 1 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Compare1EventCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_Compare1EventCallback(hhrtim, TimerIdx);
 80091f8:	6839      	ldr	r1, [r7, #0]
 80091fa:	6878      	ldr	r0, [r7, #4]
 80091fc:	f7ff faee 	bl	80087dc <HAL_HRTIM_Compare1EventCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Timer compare 2 event */
  if((uint32_t)(tisrflags & HRTIM_TIM_FLAG_CMP2) != (uint32_t)RESET)
 8009200:	68fb      	ldr	r3, [r7, #12]
 8009202:	f003 0302 	and.w	r3, r3, #2
 8009206:	2b00      	cmp	r3, #0
 8009208:	d010      	beq.n	800922c <HRTIM_Timer_ISR+0x84>
  {
    if((uint32_t)(tdierits & HRTIM_TIM_IT_CMP2) != (uint32_t)RESET)
 800920a:	68bb      	ldr	r3, [r7, #8]
 800920c:	f003 0302 	and.w	r3, r3, #2
 8009210:	2b00      	cmp	r3, #0
 8009212:	d00b      	beq.n	800922c <HRTIM_Timer_ISR+0x84>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_CMP2);
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	681a      	ldr	r2, [r3, #0]
 8009218:	683b      	ldr	r3, [r7, #0]
 800921a:	01db      	lsls	r3, r3, #7
 800921c:	4413      	add	r3, r2
 800921e:	3388      	adds	r3, #136	; 0x88
 8009220:	2202      	movs	r2, #2
 8009222:	601a      	str	r2, [r3, #0]

      /* Invoke compare 2 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Compare2EventCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_Compare2EventCallback(hhrtim, TimerIdx);
 8009224:	6839      	ldr	r1, [r7, #0]
 8009226:	6878      	ldr	r0, [r7, #4]
 8009228:	f7fa fd24 	bl	8003c74 <HAL_HRTIM_Compare2EventCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Timer compare 3 event */
  if((uint32_t)(tisrflags & HRTIM_TIM_FLAG_CMP3) != (uint32_t)RESET)
 800922c:	68fb      	ldr	r3, [r7, #12]
 800922e:	f003 0304 	and.w	r3, r3, #4
 8009232:	2b00      	cmp	r3, #0
 8009234:	d010      	beq.n	8009258 <HRTIM_Timer_ISR+0xb0>
  {
    if((uint32_t)(tdierits & HRTIM_TIM_IT_CMP3) != (uint32_t)RESET)
 8009236:	68bb      	ldr	r3, [r7, #8]
 8009238:	f003 0304 	and.w	r3, r3, #4
 800923c:	2b00      	cmp	r3, #0
 800923e:	d00b      	beq.n	8009258 <HRTIM_Timer_ISR+0xb0>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_CMP3);
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	681a      	ldr	r2, [r3, #0]
 8009244:	683b      	ldr	r3, [r7, #0]
 8009246:	01db      	lsls	r3, r3, #7
 8009248:	4413      	add	r3, r2
 800924a:	3388      	adds	r3, #136	; 0x88
 800924c:	2204      	movs	r2, #4
 800924e:	601a      	str	r2, [r3, #0]

      /* Invoke compare 3 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Compare3EventCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_Compare3EventCallback(hhrtim, TimerIdx);
 8009250:	6839      	ldr	r1, [r7, #0]
 8009252:	6878      	ldr	r0, [r7, #4]
 8009254:	f7fa fd1a 	bl	8003c8c <HAL_HRTIM_Compare3EventCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Timer compare 4 event */
  if((uint32_t)(tisrflags & HRTIM_TIM_FLAG_CMP4) != (uint32_t)RESET)
 8009258:	68fb      	ldr	r3, [r7, #12]
 800925a:	f003 0308 	and.w	r3, r3, #8
 800925e:	2b00      	cmp	r3, #0
 8009260:	d010      	beq.n	8009284 <HRTIM_Timer_ISR+0xdc>
  {
    if((uint32_t)(tdierits & HRTIM_TIM_IT_CMP4) != (uint32_t)RESET)
 8009262:	68bb      	ldr	r3, [r7, #8]
 8009264:	f003 0308 	and.w	r3, r3, #8
 8009268:	2b00      	cmp	r3, #0
 800926a:	d00b      	beq.n	8009284 <HRTIM_Timer_ISR+0xdc>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_CMP4);
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	681a      	ldr	r2, [r3, #0]
 8009270:	683b      	ldr	r3, [r7, #0]
 8009272:	01db      	lsls	r3, r3, #7
 8009274:	4413      	add	r3, r2
 8009276:	3388      	adds	r3, #136	; 0x88
 8009278:	2208      	movs	r2, #8
 800927a:	601a      	str	r2, [r3, #0]

      /* Invoke compare 4 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Compare4EventCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_Compare4EventCallback(hhrtim, TimerIdx);
 800927c:	6839      	ldr	r1, [r7, #0]
 800927e:	6878      	ldr	r0, [r7, #4]
 8009280:	f7ff fab7 	bl	80087f2 <HAL_HRTIM_Compare4EventCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Timer repetition event */
  if((uint32_t)(tisrflags & HRTIM_TIM_FLAG_REP) != (uint32_t)RESET)
 8009284:	68fb      	ldr	r3, [r7, #12]
 8009286:	f003 0310 	and.w	r3, r3, #16
 800928a:	2b00      	cmp	r3, #0
 800928c:	d010      	beq.n	80092b0 <HRTIM_Timer_ISR+0x108>
  {
    if((uint32_t)(tdierits & HRTIM_TIM_IT_REP) != (uint32_t)RESET)
 800928e:	68bb      	ldr	r3, [r7, #8]
 8009290:	f003 0310 	and.w	r3, r3, #16
 8009294:	2b00      	cmp	r3, #0
 8009296:	d00b      	beq.n	80092b0 <HRTIM_Timer_ISR+0x108>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_REP);
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	681a      	ldr	r2, [r3, #0]
 800929c:	683b      	ldr	r3, [r7, #0]
 800929e:	01db      	lsls	r3, r3, #7
 80092a0:	4413      	add	r3, r2
 80092a2:	3388      	adds	r3, #136	; 0x88
 80092a4:	2210      	movs	r2, #16
 80092a6:	601a      	str	r2, [r3, #0]

      /* Invoke repetition event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->RepetitionEventCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_RepetitionEventCallback(hhrtim, TimerIdx);
 80092a8:	6839      	ldr	r1, [r7, #0]
 80092aa:	6878      	ldr	r0, [r7, #4]
 80092ac:	f7fa fd62 	bl	8003d74 <HAL_HRTIM_RepetitionEventCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Timer registers update event */
  if((uint32_t)(tisrflags & HRTIM_TIM_FLAG_UPD) != (uint32_t)RESET)
 80092b0:	68fb      	ldr	r3, [r7, #12]
 80092b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80092b6:	2b00      	cmp	r3, #0
 80092b8:	d010      	beq.n	80092dc <HRTIM_Timer_ISR+0x134>
  {
    if((uint32_t)(tdierits & HRTIM_TIM_IT_UPD) != (uint32_t)RESET)
 80092ba:	68bb      	ldr	r3, [r7, #8]
 80092bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80092c0:	2b00      	cmp	r3, #0
 80092c2:	d00b      	beq.n	80092dc <HRTIM_Timer_ISR+0x134>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_UPD);
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	681a      	ldr	r2, [r3, #0]
 80092c8:	683b      	ldr	r3, [r7, #0]
 80092ca:	01db      	lsls	r3, r3, #7
 80092cc:	4413      	add	r3, r2
 80092ce:	3388      	adds	r3, #136	; 0x88
 80092d0:	2240      	movs	r2, #64	; 0x40
 80092d2:	601a      	str	r2, [r3, #0]

      /* Invoke registers update event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->RegistersUpdateCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_RegistersUpdateCallback(hhrtim, TimerIdx);
 80092d4:	6839      	ldr	r1, [r7, #0]
 80092d6:	6878      	ldr	r0, [r7, #4]
 80092d8:	f7ff fa75 	bl	80087c6 <HAL_HRTIM_RegistersUpdateCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Timer capture 1 event */
  if((uint32_t)(tisrflags & HRTIM_TIM_FLAG_CPT1) != (uint32_t)RESET)
 80092dc:	68fb      	ldr	r3, [r7, #12]
 80092de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80092e2:	2b00      	cmp	r3, #0
 80092e4:	d010      	beq.n	8009308 <HRTIM_Timer_ISR+0x160>
  {
    if((uint32_t)(tdierits & HRTIM_TIM_IT_CPT1) != (uint32_t)RESET)
 80092e6:	68bb      	ldr	r3, [r7, #8]
 80092e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80092ec:	2b00      	cmp	r3, #0
 80092ee:	d00b      	beq.n	8009308 <HRTIM_Timer_ISR+0x160>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_CPT1);
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	681a      	ldr	r2, [r3, #0]
 80092f4:	683b      	ldr	r3, [r7, #0]
 80092f6:	01db      	lsls	r3, r3, #7
 80092f8:	4413      	add	r3, r2
 80092fa:	3388      	adds	r3, #136	; 0x88
 80092fc:	2280      	movs	r2, #128	; 0x80
 80092fe:	601a      	str	r2, [r3, #0]

      /* Invoke capture 1 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Capture1EventCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_Capture1EventCallback(hhrtim, TimerIdx);
 8009300:	6839      	ldr	r1, [r7, #0]
 8009302:	6878      	ldr	r0, [r7, #4]
 8009304:	f7ff fa80 	bl	8008808 <HAL_HRTIM_Capture1EventCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Timer capture 2 event */
  if((uint32_t)(tisrflags & HRTIM_TIM_FLAG_CPT2) != (uint32_t)RESET)
 8009308:	68fb      	ldr	r3, [r7, #12]
 800930a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800930e:	2b00      	cmp	r3, #0
 8009310:	d011      	beq.n	8009336 <HRTIM_Timer_ISR+0x18e>
  {
    if((uint32_t)(tdierits & HRTIM_TIM_IT_CPT2) != (uint32_t)RESET)
 8009312:	68bb      	ldr	r3, [r7, #8]
 8009314:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009318:	2b00      	cmp	r3, #0
 800931a:	d00c      	beq.n	8009336 <HRTIM_Timer_ISR+0x18e>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_CPT2);
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	681a      	ldr	r2, [r3, #0]
 8009320:	683b      	ldr	r3, [r7, #0]
 8009322:	01db      	lsls	r3, r3, #7
 8009324:	4413      	add	r3, r2
 8009326:	3388      	adds	r3, #136	; 0x88
 8009328:	f44f 7280 	mov.w	r2, #256	; 0x100
 800932c:	601a      	str	r2, [r3, #0]

      /* Invoke capture 2 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Capture2EventCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_Capture2EventCallback(hhrtim, TimerIdx);
 800932e:	6839      	ldr	r1, [r7, #0]
 8009330:	6878      	ldr	r0, [r7, #4]
 8009332:	f7ff fa74 	bl	800881e <HAL_HRTIM_Capture2EventCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Timer output 1 set event */
  if((uint32_t)(tisrflags & HRTIM_TIM_FLAG_SET1) != (uint32_t)RESET)
 8009336:	68fb      	ldr	r3, [r7, #12]
 8009338:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800933c:	2b00      	cmp	r3, #0
 800933e:	d011      	beq.n	8009364 <HRTIM_Timer_ISR+0x1bc>
  {
    if((uint32_t)(tdierits & HRTIM_TIM_IT_SET1) != (uint32_t)RESET)
 8009340:	68bb      	ldr	r3, [r7, #8]
 8009342:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009346:	2b00      	cmp	r3, #0
 8009348:	d00c      	beq.n	8009364 <HRTIM_Timer_ISR+0x1bc>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_SET1);
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	681a      	ldr	r2, [r3, #0]
 800934e:	683b      	ldr	r3, [r7, #0]
 8009350:	01db      	lsls	r3, r3, #7
 8009352:	4413      	add	r3, r2
 8009354:	3388      	adds	r3, #136	; 0x88
 8009356:	f44f 7200 	mov.w	r2, #512	; 0x200
 800935a:	601a      	str	r2, [r3, #0]

      /* Invoke output 1 set event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Output1SetCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_Output1SetCallback(hhrtim, TimerIdx);
 800935c:	6839      	ldr	r1, [r7, #0]
 800935e:	6878      	ldr	r0, [r7, #4]
 8009360:	f7ff fa7e 	bl	8008860 <HAL_HRTIM_Output1SetCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Timer output 1 reset event */
  if((uint32_t)(tisrflags & HRTIM_TIM_FLAG_RST1) != (uint32_t)RESET)
 8009364:	68fb      	ldr	r3, [r7, #12]
 8009366:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800936a:	2b00      	cmp	r3, #0
 800936c:	d011      	beq.n	8009392 <HRTIM_Timer_ISR+0x1ea>
  {
    if((uint32_t)(tdierits & HRTIM_TIM_IT_RST1) != (uint32_t)RESET)
 800936e:	68bb      	ldr	r3, [r7, #8]
 8009370:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009374:	2b00      	cmp	r3, #0
 8009376:	d00c      	beq.n	8009392 <HRTIM_Timer_ISR+0x1ea>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_RST1);
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	681a      	ldr	r2, [r3, #0]
 800937c:	683b      	ldr	r3, [r7, #0]
 800937e:	01db      	lsls	r3, r3, #7
 8009380:	4413      	add	r3, r2
 8009382:	3388      	adds	r3, #136	; 0x88
 8009384:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8009388:	601a      	str	r2, [r3, #0]

      /* Invoke output 1 reset event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Output1ResetCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_Output1ResetCallback(hhrtim, TimerIdx);
 800938a:	6839      	ldr	r1, [r7, #0]
 800938c:	6878      	ldr	r0, [r7, #4]
 800938e:	f7ff fa72 	bl	8008876 <HAL_HRTIM_Output1ResetCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Timer output 2 set event */
  if((uint32_t)(tisrflags & HRTIM_TIM_FLAG_SET2) != (uint32_t)RESET)
 8009392:	68fb      	ldr	r3, [r7, #12]
 8009394:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009398:	2b00      	cmp	r3, #0
 800939a:	d011      	beq.n	80093c0 <HRTIM_Timer_ISR+0x218>
  {
    if((uint32_t)(tdierits & HRTIM_TIM_IT_SET2) != (uint32_t)RESET)
 800939c:	68bb      	ldr	r3, [r7, #8]
 800939e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80093a2:	2b00      	cmp	r3, #0
 80093a4:	d00c      	beq.n	80093c0 <HRTIM_Timer_ISR+0x218>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_SET2);
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	681a      	ldr	r2, [r3, #0]
 80093aa:	683b      	ldr	r3, [r7, #0]
 80093ac:	01db      	lsls	r3, r3, #7
 80093ae:	4413      	add	r3, r2
 80093b0:	3388      	adds	r3, #136	; 0x88
 80093b2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80093b6:	601a      	str	r2, [r3, #0]

      /* Invoke output 2 set event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Output2SetCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_Output2SetCallback(hhrtim, TimerIdx);
 80093b8:	6839      	ldr	r1, [r7, #0]
 80093ba:	6878      	ldr	r0, [r7, #4]
 80093bc:	f7ff fa66 	bl	800888c <HAL_HRTIM_Output2SetCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Timer output 2 reset event */
  if((uint32_t)(tisrflags & HRTIM_TIM_FLAG_RST2) != (uint32_t)RESET)
 80093c0:	68fb      	ldr	r3, [r7, #12]
 80093c2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80093c6:	2b00      	cmp	r3, #0
 80093c8:	d011      	beq.n	80093ee <HRTIM_Timer_ISR+0x246>
  {
    if((uint32_t)(tdierits & HRTIM_TIM_IT_RST2) != (uint32_t)RESET)
 80093ca:	68bb      	ldr	r3, [r7, #8]
 80093cc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80093d0:	2b00      	cmp	r3, #0
 80093d2:	d00c      	beq.n	80093ee <HRTIM_Timer_ISR+0x246>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_RST2);
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	681a      	ldr	r2, [r3, #0]
 80093d8:	683b      	ldr	r3, [r7, #0]
 80093da:	01db      	lsls	r3, r3, #7
 80093dc:	4413      	add	r3, r2
 80093de:	3388      	adds	r3, #136	; 0x88
 80093e0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80093e4:	601a      	str	r2, [r3, #0]

      /* Invoke output 2 reset event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Output2ResetCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_Output2ResetCallback(hhrtim, TimerIdx);
 80093e6:	6839      	ldr	r1, [r7, #0]
 80093e8:	6878      	ldr	r0, [r7, #4]
 80093ea:	f7ff fa5a 	bl	80088a2 <HAL_HRTIM_Output2ResetCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Timer reset event */
  if((uint32_t)(tisrflags & HRTIM_TIM_FLAG_RST) != (uint32_t)RESET)
 80093ee:	68fb      	ldr	r3, [r7, #12]
 80093f0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80093f4:	2b00      	cmp	r3, #0
 80093f6:	d011      	beq.n	800941c <HRTIM_Timer_ISR+0x274>
  {
    if((uint32_t)(tdierits & HRTIM_TIM_IT_RST) != (uint32_t)RESET)
 80093f8:	68bb      	ldr	r3, [r7, #8]
 80093fa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80093fe:	2b00      	cmp	r3, #0
 8009400:	d00c      	beq.n	800941c <HRTIM_Timer_ISR+0x274>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_RST);
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	681a      	ldr	r2, [r3, #0]
 8009406:	683b      	ldr	r3, [r7, #0]
 8009408:	01db      	lsls	r3, r3, #7
 800940a:	4413      	add	r3, r2
 800940c:	3388      	adds	r3, #136	; 0x88
 800940e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8009412:	601a      	str	r2, [r3, #0]

      /* Invoke timer reset callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->CounterResetCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_CounterResetCallback(hhrtim, TimerIdx);
 8009414:	6839      	ldr	r1, [r7, #0]
 8009416:	6878      	ldr	r0, [r7, #4]
 8009418:	f7ff fa17 	bl	800884a <HAL_HRTIM_CounterResetCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Delayed protection event */
  if((uint32_t)(tisrflags & HRTIM_TIM_FLAG_DLYPRT) != (uint32_t)RESET)
 800941c:	68fb      	ldr	r3, [r7, #12]
 800941e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009422:	2b00      	cmp	r3, #0
 8009424:	d011      	beq.n	800944a <HRTIM_Timer_ISR+0x2a2>
  {
    if((uint32_t)(tdierits & HRTIM_TIM_IT_DLYPRT) != (uint32_t)RESET)
 8009426:	68bb      	ldr	r3, [r7, #8]
 8009428:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800942c:	2b00      	cmp	r3, #0
 800942e:	d00c      	beq.n	800944a <HRTIM_Timer_ISR+0x2a2>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_DLYPRT);
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	681a      	ldr	r2, [r3, #0]
 8009434:	683b      	ldr	r3, [r7, #0]
 8009436:	01db      	lsls	r3, r3, #7
 8009438:	4413      	add	r3, r2
 800943a:	3388      	adds	r3, #136	; 0x88
 800943c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8009440:	601a      	str	r2, [r3, #0]

      /* Invoke delayed protection callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->DelayedProtectionCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_DelayedProtectionCallback(hhrtim, TimerIdx);
 8009442:	6839      	ldr	r1, [r7, #0]
 8009444:	6878      	ldr	r0, [r7, #4]
 8009446:	f7ff f9f5 	bl	8008834 <HAL_HRTIM_DelayedProtectionCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }
}
 800944a:	bf00      	nop
 800944c:	3710      	adds	r7, #16
 800944e:	46bd      	mov	sp, r7
 8009450:	bd80      	pop	{r7, pc}
	...

08009454 <HAL_LPTIM_Init>:
  *         LPTIM_InitTypeDef and initialize the associated handle.
  * @param  hlptim LPTIM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LPTIM_Init(LPTIM_HandleTypeDef *hlptim)
{
 8009454:	b580      	push	{r7, lr}
 8009456:	b084      	sub	sp, #16
 8009458:	af00      	add	r7, sp, #0
 800945a:	6078      	str	r0, [r7, #4]
  uint32_t tmpcfgr;

  /* Check the LPTIM handle allocation */
  if (hlptim == NULL)
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	2b00      	cmp	r3, #0
 8009460:	d101      	bne.n	8009466 <HAL_LPTIM_Init+0x12>
  {
    return HAL_ERROR;
 8009462:	2301      	movs	r3, #1
 8009464:	e097      	b.n	8009596 <HAL_LPTIM_Init+0x142>
  /* Check the parameters */
  assert_param(IS_LPTIM_INSTANCE(hlptim->Instance));

  assert_param(IS_LPTIM_CLOCK_SOURCE(hlptim->Init.Clock.Source));
  assert_param(IS_LPTIM_CLOCK_PRESCALER(hlptim->Init.Clock.Prescaler));
  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	685b      	ldr	r3, [r3, #4]
 800946a:	2b01      	cmp	r3, #1
  }
  assert_param(IS_LPTIM_OUTPUT_POLARITY(hlptim->Init.OutputPolarity));
  assert_param(IS_LPTIM_UPDATE_MODE(hlptim->Init.UpdateMode));
  assert_param(IS_LPTIM_COUNTER_SOURCE(hlptim->Init.CounterSource));

  if (hlptim->State == HAL_LPTIM_STATE_RESET)
 800946c:	687b      	ldr	r3, [r7, #4]
 800946e:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8009472:	b2db      	uxtb	r3, r3
 8009474:	2b00      	cmp	r3, #0
 8009476:	d106      	bne.n	8009486 <HAL_LPTIM_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hlptim->Lock = HAL_UNLOCKED;
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	2200      	movs	r2, #0
 800947c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hlptim->MspInitCallback(hlptim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_LPTIM_MspInit(hlptim);
 8009480:	6878      	ldr	r0, [r7, #4]
 8009482:	f7fa f8f3 	bl	800366c <HAL_LPTIM_MspInit>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
  }

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	2202      	movs	r2, #2
 800948a:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36

  /* Get the LPTIMx CFGR value */
  tmpcfgr = hlptim->Instance->CFGR;
 800948e:	687b      	ldr	r3, [r7, #4]
 8009490:	681b      	ldr	r3, [r3, #0]
 8009492:	68db      	ldr	r3, [r3, #12]
 8009494:	60fb      	str	r3, [r7, #12]

  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	685b      	ldr	r3, [r3, #4]
 800949a:	2b01      	cmp	r3, #1
 800949c:	d004      	beq.n	80094a8 <HAL_LPTIM_Init+0x54>
      || (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80094a2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80094a6:	d103      	bne.n	80094b0 <HAL_LPTIM_Init+0x5c>
  {
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKPOL | LPTIM_CFGR_CKFLT));
 80094a8:	68fb      	ldr	r3, [r7, #12]
 80094aa:	f023 031e 	bic.w	r3, r3, #30
 80094ae:	60fb      	str	r3, [r7, #12]
  }
  if (hlptim->Init.Trigger.Source != LPTIM_TRIGSOURCE_SOFTWARE)
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	695b      	ldr	r3, [r3, #20]
 80094b4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80094b8:	4293      	cmp	r3, r2
 80094ba:	d003      	beq.n	80094c4 <HAL_LPTIM_Init+0x70>
  {
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_TRGFLT | LPTIM_CFGR_TRIGSEL));
 80094bc:	68fa      	ldr	r2, [r7, #12]
 80094be:	4b38      	ldr	r3, [pc, #224]	; (80095a0 <HAL_LPTIM_Init+0x14c>)
 80094c0:	4013      	ands	r3, r2
 80094c2:	60fb      	str	r3, [r7, #12]
  }

  /* Clear CKSEL, PRESC, TRIGEN, TRGFLT, WAVPOL, PRELOAD & COUNTMODE bits */
  tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKSEL | LPTIM_CFGR_TRIGEN | LPTIM_CFGR_PRELOAD |
 80094c4:	68fa      	ldr	r2, [r7, #12]
 80094c6:	4b37      	ldr	r3, [pc, #220]	; (80095a4 <HAL_LPTIM_Init+0x150>)
 80094c8:	4013      	ands	r3, r2
 80094ca:	60fb      	str	r3, [r7, #12]
                          LPTIM_CFGR_WAVPOL | LPTIM_CFGR_PRESC | LPTIM_CFGR_COUNTMODE));

  /* Set initialization parameters */
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	685a      	ldr	r2, [r3, #4]
              hlptim->Init.Clock.Prescaler |
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	689b      	ldr	r3, [r3, #8]
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 80094d4:	431a      	orrs	r2, r3
              hlptim->Init.OutputPolarity  |
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	6a1b      	ldr	r3, [r3, #32]
              hlptim->Init.Clock.Prescaler |
 80094da:	431a      	orrs	r2, r3
              hlptim->Init.UpdateMode      |
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
              hlptim->Init.OutputPolarity  |
 80094e0:	431a      	orrs	r2, r3
              hlptim->Init.CounterSource);
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
              hlptim->Init.UpdateMode      |
 80094e6:	4313      	orrs	r3, r2
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 80094e8:	68fa      	ldr	r2, [r7, #12]
 80094ea:	4313      	orrs	r3, r2
 80094ec:	60fb      	str	r3, [r7, #12]

  /* Glitch filters for internal triggers and  external inputs are configured
   * only if an internal clock source is provided to the LPTIM
   */
  if (hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC)
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	685b      	ldr	r3, [r3, #4]
 80094f2:	2b00      	cmp	r3, #0
 80094f4:	d107      	bne.n	8009506 <HAL_LPTIM_Init+0xb2>
  {
    tmpcfgr |= (hlptim->Init.Trigger.SampleTime |
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	69da      	ldr	r2, [r3, #28]
                hlptim->Init.UltraLowPowerClock.SampleTime);
 80094fa:	687b      	ldr	r3, [r7, #4]
 80094fc:	691b      	ldr	r3, [r3, #16]
    tmpcfgr |= (hlptim->Init.Trigger.SampleTime |
 80094fe:	4313      	orrs	r3, r2
 8009500:	68fa      	ldr	r2, [r7, #12]
 8009502:	4313      	orrs	r3, r2
 8009504:	60fb      	str	r3, [r7, #12]
  }

  /* Configure LPTIM external clock polarity and digital filter */
  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	685b      	ldr	r3, [r3, #4]
 800950a:	2b01      	cmp	r3, #1
 800950c:	d004      	beq.n	8009518 <HAL_LPTIM_Init+0xc4>
      || (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009512:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8009516:	d107      	bne.n	8009528 <HAL_LPTIM_Init+0xd4>
  {
    tmpcfgr |= (hlptim->Init.UltraLowPowerClock.Polarity |
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	68da      	ldr	r2, [r3, #12]
                hlptim->Init.UltraLowPowerClock.SampleTime);
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	691b      	ldr	r3, [r3, #16]
    tmpcfgr |= (hlptim->Init.UltraLowPowerClock.Polarity |
 8009520:	4313      	orrs	r3, r2
 8009522:	68fa      	ldr	r2, [r7, #12]
 8009524:	4313      	orrs	r3, r2
 8009526:	60fb      	str	r3, [r7, #12]
  }

  /* Configure LPTIM external trigger */
  if (hlptim->Init.Trigger.Source != LPTIM_TRIGSOURCE_SOFTWARE)
 8009528:	687b      	ldr	r3, [r7, #4]
 800952a:	695b      	ldr	r3, [r3, #20]
 800952c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009530:	4293      	cmp	r3, r2
 8009532:	d00a      	beq.n	800954a <HAL_LPTIM_Init+0xf6>
  {
    /* Enable External trigger and set the trigger source */
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	695a      	ldr	r2, [r3, #20]
                hlptim->Init.Trigger.ActiveEdge |
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	699b      	ldr	r3, [r3, #24]
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 800953c:	431a      	orrs	r2, r3
                hlptim->Init.Trigger.SampleTime);
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	69db      	ldr	r3, [r3, #28]
                hlptim->Init.Trigger.ActiveEdge |
 8009542:	4313      	orrs	r3, r2
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 8009544:	68fa      	ldr	r2, [r7, #12]
 8009546:	4313      	orrs	r3, r2
 8009548:	60fb      	str	r3, [r7, #12]
  }

  /* Write to LPTIMx CFGR */
  hlptim->Instance->CFGR = tmpcfgr;
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	681b      	ldr	r3, [r3, #0]
 800954e:	68fa      	ldr	r2, [r7, #12]
 8009550:	60da      	str	r2, [r3, #12]

  /* Configure LPTIM input sources */
  if ((hlptim->Instance == LPTIM1) || (hlptim->Instance == LPTIM2))
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	681b      	ldr	r3, [r3, #0]
 8009556:	4a14      	ldr	r2, [pc, #80]	; (80095a8 <HAL_LPTIM_Init+0x154>)
 8009558:	4293      	cmp	r3, r2
 800955a:	d004      	beq.n	8009566 <HAL_LPTIM_Init+0x112>
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	681b      	ldr	r3, [r3, #0]
 8009560:	4a12      	ldr	r2, [pc, #72]	; (80095ac <HAL_LPTIM_Init+0x158>)
 8009562:	4293      	cmp	r3, r2
 8009564:	d108      	bne.n	8009578 <HAL_LPTIM_Init+0x124>
    /* Check LPTIM Input1 and Input2 sources */
    assert_param(IS_LPTIM_INPUT1_SOURCE(hlptim->Instance, hlptim->Init.Input1Source));
    assert_param(IS_LPTIM_INPUT2_SOURCE(hlptim->Instance, hlptim->Init.Input2Source));

    /* Configure LPTIM Input1 and Input2 sources */
    hlptim->Instance->CFGR2 = (hlptim->Init.Input1Source | hlptim->Init.Input2Source);
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	681b      	ldr	r3, [r3, #0]
 8009572:	430a      	orrs	r2, r1
 8009574:	625a      	str	r2, [r3, #36]	; 0x24
 8009576:	e009      	b.n	800958c <HAL_LPTIM_Init+0x138>
  }
  else
  {
    if (hlptim->Instance == LPTIM3)
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	681b      	ldr	r3, [r3, #0]
 800957c:	4a0c      	ldr	r2, [pc, #48]	; (80095b0 <HAL_LPTIM_Init+0x15c>)
 800957e:	4293      	cmp	r3, r2
 8009580:	d104      	bne.n	800958c <HAL_LPTIM_Init+0x138>
    {
      /* Check LPTIM3 Input1 source */
      assert_param(IS_LPTIM_INPUT1_SOURCE(hlptim->Instance, hlptim->Init.Input1Source));

      /* Configure LPTIM3 Input1 source */
      hlptim->Instance->CFGR2 = hlptim->Init.Input1Source;
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	681b      	ldr	r3, [r3, #0]
 8009586:	687a      	ldr	r2, [r7, #4]
 8009588:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800958a:	625a      	str	r2, [r3, #36]	; 0x24
    }
  }

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_READY;
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	2201      	movs	r2, #1
 8009590:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36

  /* Return function status */
  return HAL_OK;
 8009594:	2300      	movs	r3, #0
}
 8009596:	4618      	mov	r0, r3
 8009598:	3710      	adds	r7, #16
 800959a:	46bd      	mov	sp, r7
 800959c:	bd80      	pop	{r7, pc}
 800959e:	bf00      	nop
 80095a0:	ffff1f3f 	.word	0xffff1f3f
 80095a4:	ff19f1fe 	.word	0xff19f1fe
 80095a8:	40002400 	.word	0x40002400
 80095ac:	58002400 	.word	0x58002400
 80095b0:	58002800 	.word	0x58002800

080095b4 <HAL_LPTIM_Counter_Start_IT>:
  * @param  Period Specifies the Autoreload value.
  *         This parameter must be a value between 0x0001 and 0xFFFF.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LPTIM_Counter_Start_IT(LPTIM_HandleTypeDef *hlptim, uint32_t Period)
{
 80095b4:	b580      	push	{r7, lr}
 80095b6:	b082      	sub	sp, #8
 80095b8:	af00      	add	r7, sp, #0
 80095ba:	6078      	str	r0, [r7, #4]
 80095bc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_LPTIM_INSTANCE(hlptim->Instance));
  assert_param(IS_LPTIM_PERIOD(Period));

  /* Set the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	2202      	movs	r2, #2
 80095c2:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36

  /* If clock source is not ULPTIM clock and counter source is external, then it must not be prescaled */
  if ((hlptim->Init.Clock.Source != LPTIM_CLOCKSOURCE_ULPTIM)
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	685b      	ldr	r3, [r3, #4]
 80095ca:	2b01      	cmp	r3, #1
 80095cc:	d00c      	beq.n	80095e8 <HAL_LPTIM_Counter_Start_IT+0x34>
      && (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80095d2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80095d6:	d107      	bne.n	80095e8 <HAL_LPTIM_Counter_Start_IT+0x34>
  {
    /* Check if clock is prescaled */
    assert_param(IS_LPTIM_CLOCK_PRESCALERDIV1(hlptim->Init.Clock.Prescaler));
    /* Set clock prescaler to 0 */
    hlptim->Instance->CFGR &= ~LPTIM_CFGR_PRESC;
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	681b      	ldr	r3, [r3, #0]
 80095dc:	68da      	ldr	r2, [r3, #12]
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	681b      	ldr	r3, [r3, #0]
 80095e2:	f422 6260 	bic.w	r2, r2, #3584	; 0xe00
 80095e6:	60da      	str	r2, [r3, #12]
  }

  /* Enable the Peripheral */
  __HAL_LPTIM_ENABLE(hlptim);
 80095e8:	687b      	ldr	r3, [r7, #4]
 80095ea:	681b      	ldr	r3, [r3, #0]
 80095ec:	691a      	ldr	r2, [r3, #16]
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	681b      	ldr	r3, [r3, #0]
 80095f2:	f042 0201 	orr.w	r2, r2, #1
 80095f6:	611a      	str	r2, [r3, #16]

  /* Clear flag */
  __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARROK);
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	681b      	ldr	r3, [r3, #0]
 80095fc:	2210      	movs	r2, #16
 80095fe:	605a      	str	r2, [r3, #4]

  /* Load the period value in the autoreload register */
  __HAL_LPTIM_AUTORELOAD_SET(hlptim, Period);
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	681b      	ldr	r3, [r3, #0]
 8009604:	683a      	ldr	r2, [r7, #0]
 8009606:	619a      	str	r2, [r3, #24]

  /* Wait for the completion of the write operation to the LPTIM_ARR register */
  if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_ARROK) == HAL_TIMEOUT)
 8009608:	2110      	movs	r1, #16
 800960a:	6878      	ldr	r0, [r7, #4]
 800960c:	f000 f91e 	bl	800984c <LPTIM_WaitForFlag>
 8009610:	4603      	mov	r3, r0
 8009612:	2b03      	cmp	r3, #3
 8009614:	d101      	bne.n	800961a <HAL_LPTIM_Counter_Start_IT+0x66>
  {
    return HAL_TIMEOUT;
 8009616:	2303      	movs	r3, #3
 8009618:	e02f      	b.n	800967a <HAL_LPTIM_Counter_Start_IT+0xc6>
  }

  /* Disable the Peripheral */
  __HAL_LPTIM_DISABLE(hlptim);
 800961a:	6878      	ldr	r0, [r7, #4]
 800961c:	f000 f946 	bl	80098ac <LPTIM_Disable>

  if (HAL_LPTIM_GetState(hlptim) == HAL_LPTIM_STATE_TIMEOUT)
 8009620:	6878      	ldr	r0, [r7, #4]
 8009622:	f000 f905 	bl	8009830 <HAL_LPTIM_GetState>
 8009626:	4603      	mov	r3, r0
 8009628:	2b03      	cmp	r3, #3
 800962a:	d101      	bne.n	8009630 <HAL_LPTIM_Counter_Start_IT+0x7c>
  {
    return HAL_TIMEOUT;
 800962c:	2303      	movs	r3, #3
 800962e:	e024      	b.n	800967a <HAL_LPTIM_Counter_Start_IT+0xc6>
  }

  /* Enable Autoreload write complete interrupt */
  __HAL_LPTIM_ENABLE_IT(hlptim, LPTIM_IT_ARROK);
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	681b      	ldr	r3, [r3, #0]
 8009634:	689a      	ldr	r2, [r3, #8]
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	681b      	ldr	r3, [r3, #0]
 800963a:	f042 0210 	orr.w	r2, r2, #16
 800963e:	609a      	str	r2, [r3, #8]

  /* Enable Autoreload match interrupt */
  __HAL_LPTIM_ENABLE_IT(hlptim, LPTIM_IT_ARRM);
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	681b      	ldr	r3, [r3, #0]
 8009644:	689a      	ldr	r2, [r3, #8]
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	681b      	ldr	r3, [r3, #0]
 800964a:	f042 0202 	orr.w	r2, r2, #2
 800964e:	609a      	str	r2, [r3, #8]

  /* Enable the Peripheral */
  __HAL_LPTIM_ENABLE(hlptim);
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	681b      	ldr	r3, [r3, #0]
 8009654:	691a      	ldr	r2, [r3, #16]
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	681b      	ldr	r3, [r3, #0]
 800965a:	f042 0201 	orr.w	r2, r2, #1
 800965e:	611a      	str	r2, [r3, #16]

  /* Start timer in continuous mode */
  __HAL_LPTIM_START_CONTINUOUS(hlptim);
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	681b      	ldr	r3, [r3, #0]
 8009664:	691a      	ldr	r2, [r3, #16]
 8009666:	687b      	ldr	r3, [r7, #4]
 8009668:	681b      	ldr	r3, [r3, #0]
 800966a:	f042 0204 	orr.w	r2, r2, #4
 800966e:	611a      	str	r2, [r3, #16]

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_READY;
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	2201      	movs	r2, #1
 8009674:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36

  /* Return function status */
  return HAL_OK;
 8009678:	2300      	movs	r3, #0
}
 800967a:	4618      	mov	r0, r3
 800967c:	3708      	adds	r7, #8
 800967e:	46bd      	mov	sp, r7
 8009680:	bd80      	pop	{r7, pc}

08009682 <HAL_LPTIM_IRQHandler>:
  * @brief  Handle LPTIM interrupt request.
  * @param  hlptim LPTIM handle
  * @retval None
  */
void HAL_LPTIM_IRQHandler(LPTIM_HandleTypeDef *hlptim)
{
 8009682:	b580      	push	{r7, lr}
 8009684:	b082      	sub	sp, #8
 8009686:	af00      	add	r7, sp, #0
 8009688:	6078      	str	r0, [r7, #4]
  /* Compare match interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_CMPM) != RESET)
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	681b      	ldr	r3, [r3, #0]
 800968e:	681b      	ldr	r3, [r3, #0]
 8009690:	f003 0301 	and.w	r3, r3, #1
 8009694:	2b01      	cmp	r3, #1
 8009696:	d10d      	bne.n	80096b4 <HAL_LPTIM_IRQHandler+0x32>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_CMPM) != RESET)
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	681b      	ldr	r3, [r3, #0]
 800969c:	689b      	ldr	r3, [r3, #8]
 800969e:	f003 0301 	and.w	r3, r3, #1
 80096a2:	2b01      	cmp	r3, #1
 80096a4:	d106      	bne.n	80096b4 <HAL_LPTIM_IRQHandler+0x32>
    {
      /* Clear Compare match flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMPM);
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	681b      	ldr	r3, [r3, #0]
 80096aa:	2201      	movs	r2, #1
 80096ac:	605a      	str	r2, [r3, #4]

      /* Compare match Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->CompareMatchCallback(hlptim);
#else
      HAL_LPTIM_CompareMatchCallback(hlptim);
 80096ae:	6878      	ldr	r0, [r7, #4]
 80096b0:	f000 f882 	bl	80097b8 <HAL_LPTIM_CompareMatchCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Autoreload match interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_ARRM) != RESET)
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	681b      	ldr	r3, [r3, #0]
 80096b8:	681b      	ldr	r3, [r3, #0]
 80096ba:	f003 0302 	and.w	r3, r3, #2
 80096be:	2b02      	cmp	r3, #2
 80096c0:	d10d      	bne.n	80096de <HAL_LPTIM_IRQHandler+0x5c>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_ARRM) != RESET)
 80096c2:	687b      	ldr	r3, [r7, #4]
 80096c4:	681b      	ldr	r3, [r3, #0]
 80096c6:	689b      	ldr	r3, [r3, #8]
 80096c8:	f003 0302 	and.w	r3, r3, #2
 80096cc:	2b02      	cmp	r3, #2
 80096ce:	d106      	bne.n	80096de <HAL_LPTIM_IRQHandler+0x5c>
    {
      /* Clear Autoreload match flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARRM);
 80096d0:	687b      	ldr	r3, [r7, #4]
 80096d2:	681b      	ldr	r3, [r3, #0]
 80096d4:	2202      	movs	r2, #2
 80096d6:	605a      	str	r2, [r3, #4]

      /* Autoreload match Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->AutoReloadMatchCallback(hlptim);
#else
      HAL_LPTIM_AutoReloadMatchCallback(hlptim);
 80096d8:	6878      	ldr	r0, [r7, #4]
 80096da:	f7fa fabd 	bl	8003c58 <HAL_LPTIM_AutoReloadMatchCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Trigger detected interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_EXTTRIG) != RESET)
 80096de:	687b      	ldr	r3, [r7, #4]
 80096e0:	681b      	ldr	r3, [r3, #0]
 80096e2:	681b      	ldr	r3, [r3, #0]
 80096e4:	f003 0304 	and.w	r3, r3, #4
 80096e8:	2b04      	cmp	r3, #4
 80096ea:	d10d      	bne.n	8009708 <HAL_LPTIM_IRQHandler+0x86>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_EXTTRIG) != RESET)
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	681b      	ldr	r3, [r3, #0]
 80096f0:	689b      	ldr	r3, [r3, #8]
 80096f2:	f003 0304 	and.w	r3, r3, #4
 80096f6:	2b04      	cmp	r3, #4
 80096f8:	d106      	bne.n	8009708 <HAL_LPTIM_IRQHandler+0x86>
    {
      /* Clear Trigger detected flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_EXTTRIG);
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	681b      	ldr	r3, [r3, #0]
 80096fe:	2204      	movs	r2, #4
 8009700:	605a      	str	r2, [r3, #4]

      /* Trigger detected callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->TriggerCallback(hlptim);
#else
      HAL_LPTIM_TriggerCallback(hlptim);
 8009702:	6878      	ldr	r0, [r7, #4]
 8009704:	f000 f862 	bl	80097cc <HAL_LPTIM_TriggerCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Compare write interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_CMPOK) != RESET)
 8009708:	687b      	ldr	r3, [r7, #4]
 800970a:	681b      	ldr	r3, [r3, #0]
 800970c:	681b      	ldr	r3, [r3, #0]
 800970e:	f003 0308 	and.w	r3, r3, #8
 8009712:	2b08      	cmp	r3, #8
 8009714:	d10d      	bne.n	8009732 <HAL_LPTIM_IRQHandler+0xb0>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_CMPOK) != RESET)
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	681b      	ldr	r3, [r3, #0]
 800971a:	689b      	ldr	r3, [r3, #8]
 800971c:	f003 0308 	and.w	r3, r3, #8
 8009720:	2b08      	cmp	r3, #8
 8009722:	d106      	bne.n	8009732 <HAL_LPTIM_IRQHandler+0xb0>
    {
      /* Clear Compare write flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMPOK);
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	681b      	ldr	r3, [r3, #0]
 8009728:	2208      	movs	r2, #8
 800972a:	605a      	str	r2, [r3, #4]

      /* Compare write Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->CompareWriteCallback(hlptim);
#else
      HAL_LPTIM_CompareWriteCallback(hlptim);
 800972c:	6878      	ldr	r0, [r7, #4]
 800972e:	f000 f857 	bl	80097e0 <HAL_LPTIM_CompareWriteCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Autoreload write interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_ARROK) != RESET)
 8009732:	687b      	ldr	r3, [r7, #4]
 8009734:	681b      	ldr	r3, [r3, #0]
 8009736:	681b      	ldr	r3, [r3, #0]
 8009738:	f003 0310 	and.w	r3, r3, #16
 800973c:	2b10      	cmp	r3, #16
 800973e:	d10d      	bne.n	800975c <HAL_LPTIM_IRQHandler+0xda>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_ARROK) != RESET)
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	681b      	ldr	r3, [r3, #0]
 8009744:	689b      	ldr	r3, [r3, #8]
 8009746:	f003 0310 	and.w	r3, r3, #16
 800974a:	2b10      	cmp	r3, #16
 800974c:	d106      	bne.n	800975c <HAL_LPTIM_IRQHandler+0xda>
    {
      /* Clear Autoreload write flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARROK);
 800974e:	687b      	ldr	r3, [r7, #4]
 8009750:	681b      	ldr	r3, [r3, #0]
 8009752:	2210      	movs	r2, #16
 8009754:	605a      	str	r2, [r3, #4]

      /* Autoreload write Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->AutoReloadWriteCallback(hlptim);
#else
      HAL_LPTIM_AutoReloadWriteCallback(hlptim);
 8009756:	6878      	ldr	r0, [r7, #4]
 8009758:	f000 f84c 	bl	80097f4 <HAL_LPTIM_AutoReloadWriteCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Direction counter changed from Down to Up interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_UP) != RESET)
 800975c:	687b      	ldr	r3, [r7, #4]
 800975e:	681b      	ldr	r3, [r3, #0]
 8009760:	681b      	ldr	r3, [r3, #0]
 8009762:	f003 0320 	and.w	r3, r3, #32
 8009766:	2b20      	cmp	r3, #32
 8009768:	d10d      	bne.n	8009786 <HAL_LPTIM_IRQHandler+0x104>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_UP) != RESET)
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	681b      	ldr	r3, [r3, #0]
 800976e:	689b      	ldr	r3, [r3, #8]
 8009770:	f003 0320 	and.w	r3, r3, #32
 8009774:	2b20      	cmp	r3, #32
 8009776:	d106      	bne.n	8009786 <HAL_LPTIM_IRQHandler+0x104>
    {
      /* Clear Direction counter changed from Down to Up flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_UP);
 8009778:	687b      	ldr	r3, [r7, #4]
 800977a:	681b      	ldr	r3, [r3, #0]
 800977c:	2220      	movs	r2, #32
 800977e:	605a      	str	r2, [r3, #4]

      /* Direction counter changed from Down to Up Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->DirectionUpCallback(hlptim);
#else
      HAL_LPTIM_DirectionUpCallback(hlptim);
 8009780:	6878      	ldr	r0, [r7, #4]
 8009782:	f000 f841 	bl	8009808 <HAL_LPTIM_DirectionUpCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Direction counter changed from Up to Down interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_DOWN) != RESET)
 8009786:	687b      	ldr	r3, [r7, #4]
 8009788:	681b      	ldr	r3, [r3, #0]
 800978a:	681b      	ldr	r3, [r3, #0]
 800978c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009790:	2b40      	cmp	r3, #64	; 0x40
 8009792:	d10d      	bne.n	80097b0 <HAL_LPTIM_IRQHandler+0x12e>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_DOWN) != RESET)
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	681b      	ldr	r3, [r3, #0]
 8009798:	689b      	ldr	r3, [r3, #8]
 800979a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800979e:	2b40      	cmp	r3, #64	; 0x40
 80097a0:	d106      	bne.n	80097b0 <HAL_LPTIM_IRQHandler+0x12e>
    {
      /* Clear Direction counter changed from Up to Down flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_DOWN);
 80097a2:	687b      	ldr	r3, [r7, #4]
 80097a4:	681b      	ldr	r3, [r3, #0]
 80097a6:	2240      	movs	r2, #64	; 0x40
 80097a8:	605a      	str	r2, [r3, #4]

      /* Direction counter changed from Up to Down Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->DirectionDownCallback(hlptim);
#else
      HAL_LPTIM_DirectionDownCallback(hlptim);
 80097aa:	6878      	ldr	r0, [r7, #4]
 80097ac:	f000 f836 	bl	800981c <HAL_LPTIM_DirectionDownCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }
}
 80097b0:	bf00      	nop
 80097b2:	3708      	adds	r7, #8
 80097b4:	46bd      	mov	sp, r7
 80097b6:	bd80      	pop	{r7, pc}

080097b8 <HAL_LPTIM_CompareMatchCallback>:
  * @brief  Compare match callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_CompareMatchCallback(LPTIM_HandleTypeDef *hlptim)
{
 80097b8:	b480      	push	{r7}
 80097ba:	b083      	sub	sp, #12
 80097bc:	af00      	add	r7, sp, #0
 80097be:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_CompareMatchCallback could be implemented in the user file
   */
}
 80097c0:	bf00      	nop
 80097c2:	370c      	adds	r7, #12
 80097c4:	46bd      	mov	sp, r7
 80097c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097ca:	4770      	bx	lr

080097cc <HAL_LPTIM_TriggerCallback>:
  * @brief  Trigger detected callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_TriggerCallback(LPTIM_HandleTypeDef *hlptim)
{
 80097cc:	b480      	push	{r7}
 80097ce:	b083      	sub	sp, #12
 80097d0:	af00      	add	r7, sp, #0
 80097d2:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_TriggerCallback could be implemented in the user file
   */
}
 80097d4:	bf00      	nop
 80097d6:	370c      	adds	r7, #12
 80097d8:	46bd      	mov	sp, r7
 80097da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097de:	4770      	bx	lr

080097e0 <HAL_LPTIM_CompareWriteCallback>:
  * @brief  Compare write callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_CompareWriteCallback(LPTIM_HandleTypeDef *hlptim)
{
 80097e0:	b480      	push	{r7}
 80097e2:	b083      	sub	sp, #12
 80097e4:	af00      	add	r7, sp, #0
 80097e6:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_CompareWriteCallback could be implemented in the user file
   */
}
 80097e8:	bf00      	nop
 80097ea:	370c      	adds	r7, #12
 80097ec:	46bd      	mov	sp, r7
 80097ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097f2:	4770      	bx	lr

080097f4 <HAL_LPTIM_AutoReloadWriteCallback>:
  * @brief  Autoreload write callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_AutoReloadWriteCallback(LPTIM_HandleTypeDef *hlptim)
{
 80097f4:	b480      	push	{r7}
 80097f6:	b083      	sub	sp, #12
 80097f8:	af00      	add	r7, sp, #0
 80097fa:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_AutoReloadWriteCallback could be implemented in the user file
   */
}
 80097fc:	bf00      	nop
 80097fe:	370c      	adds	r7, #12
 8009800:	46bd      	mov	sp, r7
 8009802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009806:	4770      	bx	lr

08009808 <HAL_LPTIM_DirectionUpCallback>:
  * @brief  Direction counter changed from Down to Up callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_DirectionUpCallback(LPTIM_HandleTypeDef *hlptim)
{
 8009808:	b480      	push	{r7}
 800980a:	b083      	sub	sp, #12
 800980c:	af00      	add	r7, sp, #0
 800980e:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_DirectionUpCallback could be implemented in the user file
   */
}
 8009810:	bf00      	nop
 8009812:	370c      	adds	r7, #12
 8009814:	46bd      	mov	sp, r7
 8009816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800981a:	4770      	bx	lr

0800981c <HAL_LPTIM_DirectionDownCallback>:
  * @brief  Direction counter changed from Up to Down callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_DirectionDownCallback(LPTIM_HandleTypeDef *hlptim)
{
 800981c:	b480      	push	{r7}
 800981e:	b083      	sub	sp, #12
 8009820:	af00      	add	r7, sp, #0
 8009822:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_DirectionDownCallback could be implemented in the user file
   */
}
 8009824:	bf00      	nop
 8009826:	370c      	adds	r7, #12
 8009828:	46bd      	mov	sp, r7
 800982a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800982e:	4770      	bx	lr

08009830 <HAL_LPTIM_GetState>:
  * @brief  Return the LPTIM handle state.
  * @param  hlptim LPTIM handle
  * @retval HAL state
  */
HAL_LPTIM_StateTypeDef HAL_LPTIM_GetState(LPTIM_HandleTypeDef *hlptim)
{
 8009830:	b480      	push	{r7}
 8009832:	b083      	sub	sp, #12
 8009834:	af00      	add	r7, sp, #0
 8009836:	6078      	str	r0, [r7, #4]
  /* Return LPTIM handle state */
  return hlptim->State;
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 800983e:	b2db      	uxtb	r3, r3
}
 8009840:	4618      	mov	r0, r3
 8009842:	370c      	adds	r7, #12
 8009844:	46bd      	mov	sp, r7
 8009846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800984a:	4770      	bx	lr

0800984c <LPTIM_WaitForFlag>:
  *                the configuration information for LPTIM module.
  * @param  flag   The lptim flag
  * @retval HAL status
  */
static HAL_StatusTypeDef LPTIM_WaitForFlag(LPTIM_HandleTypeDef *hlptim, uint32_t flag)
{
 800984c:	b480      	push	{r7}
 800984e:	b085      	sub	sp, #20
 8009850:	af00      	add	r7, sp, #0
 8009852:	6078      	str	r0, [r7, #4]
 8009854:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef result = HAL_OK;
 8009856:	2300      	movs	r3, #0
 8009858:	73fb      	strb	r3, [r7, #15]
  uint32_t count = TIMEOUT * (SystemCoreClock / 20UL / 1000UL);
 800985a:	4b12      	ldr	r3, [pc, #72]	; (80098a4 <LPTIM_WaitForFlag+0x58>)
 800985c:	681b      	ldr	r3, [r3, #0]
 800985e:	4a12      	ldr	r2, [pc, #72]	; (80098a8 <LPTIM_WaitForFlag+0x5c>)
 8009860:	fba2 2303 	umull	r2, r3, r2, r3
 8009864:	0b9b      	lsrs	r3, r3, #14
 8009866:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800986a:	fb02 f303 	mul.w	r3, r2, r3
 800986e:	60bb      	str	r3, [r7, #8]
  do
  {
    count--;
 8009870:	68bb      	ldr	r3, [r7, #8]
 8009872:	3b01      	subs	r3, #1
 8009874:	60bb      	str	r3, [r7, #8]
    if (count == 0UL)
 8009876:	68bb      	ldr	r3, [r7, #8]
 8009878:	2b00      	cmp	r3, #0
 800987a:	d101      	bne.n	8009880 <LPTIM_WaitForFlag+0x34>
    {
      result = HAL_TIMEOUT;
 800987c:	2303      	movs	r3, #3
 800987e:	73fb      	strb	r3, [r7, #15]
    }
  } while ((!(__HAL_LPTIM_GET_FLAG((hlptim), (flag)))) && (count != 0UL));
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	681b      	ldr	r3, [r3, #0]
 8009884:	681a      	ldr	r2, [r3, #0]
 8009886:	683b      	ldr	r3, [r7, #0]
 8009888:	4013      	ands	r3, r2
 800988a:	683a      	ldr	r2, [r7, #0]
 800988c:	429a      	cmp	r2, r3
 800988e:	d002      	beq.n	8009896 <LPTIM_WaitForFlag+0x4a>
 8009890:	68bb      	ldr	r3, [r7, #8]
 8009892:	2b00      	cmp	r3, #0
 8009894:	d1ec      	bne.n	8009870 <LPTIM_WaitForFlag+0x24>

  return result;
 8009896:	7bfb      	ldrb	r3, [r7, #15]
}
 8009898:	4618      	mov	r0, r3
 800989a:	3714      	adds	r7, #20
 800989c:	46bd      	mov	sp, r7
 800989e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098a2:	4770      	bx	lr
 80098a4:	20000010 	.word	0x20000010
 80098a8:	d1b71759 	.word	0xd1b71759

080098ac <LPTIM_Disable>:
  *         Please check Errata Sheet ES0335 for more details under "MCU may remain
  *         stuck in LPTIM interrupt when entering Stop mode" section.
  * @retval None
  */
void LPTIM_Disable(LPTIM_HandleTypeDef *hlptim)
{
 80098ac:	b580      	push	{r7, lr}
 80098ae:	b08c      	sub	sp, #48	; 0x30
 80098b0:	af00      	add	r7, sp, #0
 80098b2:	6078      	str	r0, [r7, #4]
  uint32_t tmpclksource = 0;
 80098b4:	2300      	movs	r3, #0
 80098b6:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80098b8:	f3ef 8310 	mrs	r3, PRIMASK
 80098bc:	60fb      	str	r3, [r7, #12]
  return(result);
 80098be:	68fb      	ldr	r3, [r7, #12]
  uint32_t tmpARR;
  uint32_t primask_bit;
  uint32_t tmpCFGR2;

  /* Enter critical section */
  primask_bit = __get_PRIMASK();
 80098c0:	62bb      	str	r3, [r7, #40]	; 0x28
 80098c2:	2301      	movs	r3, #1
 80098c4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80098c6:	693b      	ldr	r3, [r7, #16]
 80098c8:	f383 8810 	msr	PRIMASK, r3
}
 80098cc:	bf00      	nop
  __set_PRIMASK(1) ;

  /*********** Save LPTIM Config ***********/
  /* Save LPTIM source clock */
  switch ((uint32_t)hlptim->Instance)
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	681b      	ldr	r3, [r3, #0]
 80098d2:	4a81      	ldr	r2, [pc, #516]	; (8009ad8 <LPTIM_Disable+0x22c>)
 80098d4:	4293      	cmp	r3, r2
 80098d6:	d02d      	beq.n	8009934 <LPTIM_Disable+0x88>
 80098d8:	4a7f      	ldr	r2, [pc, #508]	; (8009ad8 <LPTIM_Disable+0x22c>)
 80098da:	4293      	cmp	r3, r2
 80098dc:	d830      	bhi.n	8009940 <LPTIM_Disable+0x94>
 80098de:	4a7f      	ldr	r2, [pc, #508]	; (8009adc <LPTIM_Disable+0x230>)
 80098e0:	4293      	cmp	r3, r2
 80098e2:	d021      	beq.n	8009928 <LPTIM_Disable+0x7c>
 80098e4:	4a7d      	ldr	r2, [pc, #500]	; (8009adc <LPTIM_Disable+0x230>)
 80098e6:	4293      	cmp	r3, r2
 80098e8:	d82a      	bhi.n	8009940 <LPTIM_Disable+0x94>
 80098ea:	4a7d      	ldr	r2, [pc, #500]	; (8009ae0 <LPTIM_Disable+0x234>)
 80098ec:	4293      	cmp	r3, r2
 80098ee:	d015      	beq.n	800991c <LPTIM_Disable+0x70>
 80098f0:	4a7b      	ldr	r2, [pc, #492]	; (8009ae0 <LPTIM_Disable+0x234>)
 80098f2:	4293      	cmp	r3, r2
 80098f4:	d824      	bhi.n	8009940 <LPTIM_Disable+0x94>
 80098f6:	4a7b      	ldr	r2, [pc, #492]	; (8009ae4 <LPTIM_Disable+0x238>)
 80098f8:	4293      	cmp	r3, r2
 80098fa:	d003      	beq.n	8009904 <LPTIM_Disable+0x58>
 80098fc:	4a7a      	ldr	r2, [pc, #488]	; (8009ae8 <LPTIM_Disable+0x23c>)
 80098fe:	4293      	cmp	r3, r2
 8009900:	d006      	beq.n	8009910 <LPTIM_Disable+0x64>
    case LPTIM5_BASE:
      tmpclksource = __HAL_RCC_GET_LPTIM5_SOURCE();
      break;
#endif /* LPTIM5 */
    default:
      break;
 8009902:	e01d      	b.n	8009940 <LPTIM_Disable+0x94>
      tmpclksource = __HAL_RCC_GET_LPTIM1_SOURCE();
 8009904:	4b79      	ldr	r3, [pc, #484]	; (8009aec <LPTIM_Disable+0x240>)
 8009906:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009908:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 800990c:	62fb      	str	r3, [r7, #44]	; 0x2c
      break;
 800990e:	e018      	b.n	8009942 <LPTIM_Disable+0x96>
      tmpclksource = __HAL_RCC_GET_LPTIM2_SOURCE();
 8009910:	4b76      	ldr	r3, [pc, #472]	; (8009aec <LPTIM_Disable+0x240>)
 8009912:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009914:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 8009918:	62fb      	str	r3, [r7, #44]	; 0x2c
      break;
 800991a:	e012      	b.n	8009942 <LPTIM_Disable+0x96>
      tmpclksource = __HAL_RCC_GET_LPTIM3_SOURCE();
 800991c:	4b73      	ldr	r3, [pc, #460]	; (8009aec <LPTIM_Disable+0x240>)
 800991e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009920:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8009924:	62fb      	str	r3, [r7, #44]	; 0x2c
      break;
 8009926:	e00c      	b.n	8009942 <LPTIM_Disable+0x96>
      tmpclksource = __HAL_RCC_GET_LPTIM4_SOURCE();
 8009928:	4b70      	ldr	r3, [pc, #448]	; (8009aec <LPTIM_Disable+0x240>)
 800992a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800992c:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8009930:	62fb      	str	r3, [r7, #44]	; 0x2c
      break;
 8009932:	e006      	b.n	8009942 <LPTIM_Disable+0x96>
      tmpclksource = __HAL_RCC_GET_LPTIM5_SOURCE();
 8009934:	4b6d      	ldr	r3, [pc, #436]	; (8009aec <LPTIM_Disable+0x240>)
 8009936:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009938:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800993c:	62fb      	str	r3, [r7, #44]	; 0x2c
      break;
 800993e:	e000      	b.n	8009942 <LPTIM_Disable+0x96>
      break;
 8009940:	bf00      	nop
  }

  /* Save LPTIM configuration registers */
  tmpIER = hlptim->Instance->IER;
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	681b      	ldr	r3, [r3, #0]
 8009946:	689b      	ldr	r3, [r3, #8]
 8009948:	627b      	str	r3, [r7, #36]	; 0x24
  tmpCFGR = hlptim->Instance->CFGR;
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	681b      	ldr	r3, [r3, #0]
 800994e:	68db      	ldr	r3, [r3, #12]
 8009950:	623b      	str	r3, [r7, #32]
  tmpCMP = hlptim->Instance->CMP;
 8009952:	687b      	ldr	r3, [r7, #4]
 8009954:	681b      	ldr	r3, [r3, #0]
 8009956:	695b      	ldr	r3, [r3, #20]
 8009958:	61fb      	str	r3, [r7, #28]
  tmpARR = hlptim->Instance->ARR;
 800995a:	687b      	ldr	r3, [r7, #4]
 800995c:	681b      	ldr	r3, [r3, #0]
 800995e:	699b      	ldr	r3, [r3, #24]
 8009960:	61bb      	str	r3, [r7, #24]
  tmpCFGR2 = hlptim->Instance->CFGR2;
 8009962:	687b      	ldr	r3, [r7, #4]
 8009964:	681b      	ldr	r3, [r3, #0]
 8009966:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009968:	617b      	str	r3, [r7, #20]

  /*********** Reset LPTIM ***********/
  switch ((uint32_t)hlptim->Instance)
 800996a:	687b      	ldr	r3, [r7, #4]
 800996c:	681b      	ldr	r3, [r3, #0]
 800996e:	4a5a      	ldr	r2, [pc, #360]	; (8009ad8 <LPTIM_Disable+0x22c>)
 8009970:	4293      	cmp	r3, r2
 8009972:	d059      	beq.n	8009a28 <LPTIM_Disable+0x17c>
 8009974:	4a58      	ldr	r2, [pc, #352]	; (8009ad8 <LPTIM_Disable+0x22c>)
 8009976:	4293      	cmp	r3, r2
 8009978:	d867      	bhi.n	8009a4a <LPTIM_Disable+0x19e>
 800997a:	4a58      	ldr	r2, [pc, #352]	; (8009adc <LPTIM_Disable+0x230>)
 800997c:	4293      	cmp	r3, r2
 800997e:	d042      	beq.n	8009a06 <LPTIM_Disable+0x15a>
 8009980:	4a56      	ldr	r2, [pc, #344]	; (8009adc <LPTIM_Disable+0x230>)
 8009982:	4293      	cmp	r3, r2
 8009984:	d861      	bhi.n	8009a4a <LPTIM_Disable+0x19e>
 8009986:	4a56      	ldr	r2, [pc, #344]	; (8009ae0 <LPTIM_Disable+0x234>)
 8009988:	4293      	cmp	r3, r2
 800998a:	d02b      	beq.n	80099e4 <LPTIM_Disable+0x138>
 800998c:	4a54      	ldr	r2, [pc, #336]	; (8009ae0 <LPTIM_Disable+0x234>)
 800998e:	4293      	cmp	r3, r2
 8009990:	d85b      	bhi.n	8009a4a <LPTIM_Disable+0x19e>
 8009992:	4a54      	ldr	r2, [pc, #336]	; (8009ae4 <LPTIM_Disable+0x238>)
 8009994:	4293      	cmp	r3, r2
 8009996:	d003      	beq.n	80099a0 <LPTIM_Disable+0xf4>
 8009998:	4a53      	ldr	r2, [pc, #332]	; (8009ae8 <LPTIM_Disable+0x23c>)
 800999a:	4293      	cmp	r3, r2
 800999c:	d011      	beq.n	80099c2 <LPTIM_Disable+0x116>
      __HAL_RCC_LPTIM5_FORCE_RESET();
      __HAL_RCC_LPTIM5_RELEASE_RESET();
      break;
#endif /* LPTIM5 */
    default:
      break;
 800999e:	e054      	b.n	8009a4a <LPTIM_Disable+0x19e>
      __HAL_RCC_LPTIM1_FORCE_RESET();
 80099a0:	4b52      	ldr	r3, [pc, #328]	; (8009aec <LPTIM_Disable+0x240>)
 80099a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80099a6:	4a51      	ldr	r2, [pc, #324]	; (8009aec <LPTIM_Disable+0x240>)
 80099a8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80099ac:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      __HAL_RCC_LPTIM1_RELEASE_RESET();
 80099b0:	4b4e      	ldr	r3, [pc, #312]	; (8009aec <LPTIM_Disable+0x240>)
 80099b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80099b6:	4a4d      	ldr	r2, [pc, #308]	; (8009aec <LPTIM_Disable+0x240>)
 80099b8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80099bc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      break;
 80099c0:	e044      	b.n	8009a4c <LPTIM_Disable+0x1a0>
      __HAL_RCC_LPTIM2_FORCE_RESET();
 80099c2:	4b4a      	ldr	r3, [pc, #296]	; (8009aec <LPTIM_Disable+0x240>)
 80099c4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80099c8:	4a48      	ldr	r2, [pc, #288]	; (8009aec <LPTIM_Disable+0x240>)
 80099ca:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80099ce:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
      __HAL_RCC_LPTIM2_RELEASE_RESET();
 80099d2:	4b46      	ldr	r3, [pc, #280]	; (8009aec <LPTIM_Disable+0x240>)
 80099d4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80099d8:	4a44      	ldr	r2, [pc, #272]	; (8009aec <LPTIM_Disable+0x240>)
 80099da:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80099de:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
      break;
 80099e2:	e033      	b.n	8009a4c <LPTIM_Disable+0x1a0>
      __HAL_RCC_LPTIM3_FORCE_RESET();
 80099e4:	4b41      	ldr	r3, [pc, #260]	; (8009aec <LPTIM_Disable+0x240>)
 80099e6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80099ea:	4a40      	ldr	r2, [pc, #256]	; (8009aec <LPTIM_Disable+0x240>)
 80099ec:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80099f0:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
      __HAL_RCC_LPTIM3_RELEASE_RESET();
 80099f4:	4b3d      	ldr	r3, [pc, #244]	; (8009aec <LPTIM_Disable+0x240>)
 80099f6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80099fa:	4a3c      	ldr	r2, [pc, #240]	; (8009aec <LPTIM_Disable+0x240>)
 80099fc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009a00:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
      break;
 8009a04:	e022      	b.n	8009a4c <LPTIM_Disable+0x1a0>
      __HAL_RCC_LPTIM4_FORCE_RESET();
 8009a06:	4b39      	ldr	r3, [pc, #228]	; (8009aec <LPTIM_Disable+0x240>)
 8009a08:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8009a0c:	4a37      	ldr	r2, [pc, #220]	; (8009aec <LPTIM_Disable+0x240>)
 8009a0e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8009a12:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
      __HAL_RCC_LPTIM4_RELEASE_RESET();
 8009a16:	4b35      	ldr	r3, [pc, #212]	; (8009aec <LPTIM_Disable+0x240>)
 8009a18:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8009a1c:	4a33      	ldr	r2, [pc, #204]	; (8009aec <LPTIM_Disable+0x240>)
 8009a1e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009a22:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
      break;
 8009a26:	e011      	b.n	8009a4c <LPTIM_Disable+0x1a0>
      __HAL_RCC_LPTIM5_FORCE_RESET();
 8009a28:	4b30      	ldr	r3, [pc, #192]	; (8009aec <LPTIM_Disable+0x240>)
 8009a2a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8009a2e:	4a2f      	ldr	r2, [pc, #188]	; (8009aec <LPTIM_Disable+0x240>)
 8009a30:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8009a34:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
      __HAL_RCC_LPTIM5_RELEASE_RESET();
 8009a38:	4b2c      	ldr	r3, [pc, #176]	; (8009aec <LPTIM_Disable+0x240>)
 8009a3a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8009a3e:	4a2b      	ldr	r2, [pc, #172]	; (8009aec <LPTIM_Disable+0x240>)
 8009a40:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009a44:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
      break;
 8009a48:	e000      	b.n	8009a4c <LPTIM_Disable+0x1a0>
      break;
 8009a4a:	bf00      	nop
  }

  /*********** Restore LPTIM Config ***********/
  if ((tmpCMP != 0UL) || (tmpARR != 0UL))
 8009a4c:	69fb      	ldr	r3, [r7, #28]
 8009a4e:	2b00      	cmp	r3, #0
 8009a50:	d103      	bne.n	8009a5a <LPTIM_Disable+0x1ae>
 8009a52:	69bb      	ldr	r3, [r7, #24]
 8009a54:	2b00      	cmp	r3, #0
 8009a56:	f000 80d1 	beq.w	8009bfc <LPTIM_Disable+0x350>
  {
    /* Force LPTIM source kernel clock from APB */
    switch ((uint32_t)hlptim->Instance)
 8009a5a:	687b      	ldr	r3, [r7, #4]
 8009a5c:	681b      	ldr	r3, [r3, #0]
 8009a5e:	4a1e      	ldr	r2, [pc, #120]	; (8009ad8 <LPTIM_Disable+0x22c>)
 8009a60:	4293      	cmp	r3, r2
 8009a62:	d031      	beq.n	8009ac8 <LPTIM_Disable+0x21c>
 8009a64:	4a1c      	ldr	r2, [pc, #112]	; (8009ad8 <LPTIM_Disable+0x22c>)
 8009a66:	4293      	cmp	r3, r2
 8009a68:	d842      	bhi.n	8009af0 <LPTIM_Disable+0x244>
 8009a6a:	4a1c      	ldr	r2, [pc, #112]	; (8009adc <LPTIM_Disable+0x230>)
 8009a6c:	4293      	cmp	r3, r2
 8009a6e:	d024      	beq.n	8009aba <LPTIM_Disable+0x20e>
 8009a70:	4a1a      	ldr	r2, [pc, #104]	; (8009adc <LPTIM_Disable+0x230>)
 8009a72:	4293      	cmp	r3, r2
 8009a74:	d83c      	bhi.n	8009af0 <LPTIM_Disable+0x244>
 8009a76:	4a1a      	ldr	r2, [pc, #104]	; (8009ae0 <LPTIM_Disable+0x234>)
 8009a78:	4293      	cmp	r3, r2
 8009a7a:	d017      	beq.n	8009aac <LPTIM_Disable+0x200>
 8009a7c:	4a18      	ldr	r2, [pc, #96]	; (8009ae0 <LPTIM_Disable+0x234>)
 8009a7e:	4293      	cmp	r3, r2
 8009a80:	d836      	bhi.n	8009af0 <LPTIM_Disable+0x244>
 8009a82:	4a18      	ldr	r2, [pc, #96]	; (8009ae4 <LPTIM_Disable+0x238>)
 8009a84:	4293      	cmp	r3, r2
 8009a86:	d003      	beq.n	8009a90 <LPTIM_Disable+0x1e4>
 8009a88:	4a17      	ldr	r2, [pc, #92]	; (8009ae8 <LPTIM_Disable+0x23c>)
 8009a8a:	4293      	cmp	r3, r2
 8009a8c:	d007      	beq.n	8009a9e <LPTIM_Disable+0x1f2>
      case LPTIM5_BASE:
        __HAL_RCC_LPTIM5_CONFIG(RCC_LPTIM5CLKSOURCE_D3PCLK1);
        break;
#endif /* LPTIM5 */
      default:
        break;
 8009a8e:	e02f      	b.n	8009af0 <LPTIM_Disable+0x244>
        __HAL_RCC_LPTIM1_CONFIG(RCC_LPTIM1CLKSOURCE_D2PCLK1);
 8009a90:	4b16      	ldr	r3, [pc, #88]	; (8009aec <LPTIM_Disable+0x240>)
 8009a92:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009a94:	4a15      	ldr	r2, [pc, #84]	; (8009aec <LPTIM_Disable+0x240>)
 8009a96:	f023 43e0 	bic.w	r3, r3, #1879048192	; 0x70000000
 8009a9a:	6553      	str	r3, [r2, #84]	; 0x54
        break;
 8009a9c:	e029      	b.n	8009af2 <LPTIM_Disable+0x246>
        __HAL_RCC_LPTIM2_CONFIG(RCC_LPTIM2CLKSOURCE_D3PCLK1);
 8009a9e:	4b13      	ldr	r3, [pc, #76]	; (8009aec <LPTIM_Disable+0x240>)
 8009aa0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009aa2:	4a12      	ldr	r2, [pc, #72]	; (8009aec <LPTIM_Disable+0x240>)
 8009aa4:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8009aa8:	6593      	str	r3, [r2, #88]	; 0x58
        break;
 8009aaa:	e022      	b.n	8009af2 <LPTIM_Disable+0x246>
        __HAL_RCC_LPTIM3_CONFIG(RCC_LPTIM3CLKSOURCE_D3PCLK1);
 8009aac:	4b0f      	ldr	r3, [pc, #60]	; (8009aec <LPTIM_Disable+0x240>)
 8009aae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009ab0:	4a0e      	ldr	r2, [pc, #56]	; (8009aec <LPTIM_Disable+0x240>)
 8009ab2:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8009ab6:	6593      	str	r3, [r2, #88]	; 0x58
        break;
 8009ab8:	e01b      	b.n	8009af2 <LPTIM_Disable+0x246>
        __HAL_RCC_LPTIM4_CONFIG(RCC_LPTIM4CLKSOURCE_D3PCLK1);
 8009aba:	4b0c      	ldr	r3, [pc, #48]	; (8009aec <LPTIM_Disable+0x240>)
 8009abc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009abe:	4a0b      	ldr	r2, [pc, #44]	; (8009aec <LPTIM_Disable+0x240>)
 8009ac0:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8009ac4:	6593      	str	r3, [r2, #88]	; 0x58
        break;
 8009ac6:	e014      	b.n	8009af2 <LPTIM_Disable+0x246>
        __HAL_RCC_LPTIM5_CONFIG(RCC_LPTIM5CLKSOURCE_D3PCLK1);
 8009ac8:	4b08      	ldr	r3, [pc, #32]	; (8009aec <LPTIM_Disable+0x240>)
 8009aca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009acc:	4a07      	ldr	r2, [pc, #28]	; (8009aec <LPTIM_Disable+0x240>)
 8009ace:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8009ad2:	6593      	str	r3, [r2, #88]	; 0x58
        break;
 8009ad4:	e00d      	b.n	8009af2 <LPTIM_Disable+0x246>
 8009ad6:	bf00      	nop
 8009ad8:	58003000 	.word	0x58003000
 8009adc:	58002c00 	.word	0x58002c00
 8009ae0:	58002800 	.word	0x58002800
 8009ae4:	40002400 	.word	0x40002400
 8009ae8:	58002400 	.word	0x58002400
 8009aec:	58024400 	.word	0x58024400
        break;
 8009af0:	bf00      	nop
    }

    if (tmpCMP != 0UL)
 8009af2:	69fb      	ldr	r3, [r7, #28]
 8009af4:	2b00      	cmp	r3, #0
 8009af6:	d01a      	beq.n	8009b2e <LPTIM_Disable+0x282>
    {
      /* Restore CMP register (LPTIM should be enabled first) */
      hlptim->Instance->CR |= LPTIM_CR_ENABLE;
 8009af8:	687b      	ldr	r3, [r7, #4]
 8009afa:	681b      	ldr	r3, [r3, #0]
 8009afc:	691a      	ldr	r2, [r3, #16]
 8009afe:	687b      	ldr	r3, [r7, #4]
 8009b00:	681b      	ldr	r3, [r3, #0]
 8009b02:	f042 0201 	orr.w	r2, r2, #1
 8009b06:	611a      	str	r2, [r3, #16]
      hlptim->Instance->CMP = tmpCMP;
 8009b08:	687b      	ldr	r3, [r7, #4]
 8009b0a:	681b      	ldr	r3, [r3, #0]
 8009b0c:	69fa      	ldr	r2, [r7, #28]
 8009b0e:	615a      	str	r2, [r3, #20]

      /* Wait for the completion of the write operation to the LPTIM_CMP register */
      if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_CMPOK) == HAL_TIMEOUT)
 8009b10:	2108      	movs	r1, #8
 8009b12:	6878      	ldr	r0, [r7, #4]
 8009b14:	f7ff fe9a 	bl	800984c <LPTIM_WaitForFlag>
 8009b18:	4603      	mov	r3, r0
 8009b1a:	2b03      	cmp	r3, #3
 8009b1c:	d103      	bne.n	8009b26 <LPTIM_Disable+0x27a>
      {
        hlptim->State = HAL_LPTIM_STATE_TIMEOUT;
 8009b1e:	687b      	ldr	r3, [r7, #4]
 8009b20:	2203      	movs	r2, #3
 8009b22:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
      }
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMPOK);
 8009b26:	687b      	ldr	r3, [r7, #4]
 8009b28:	681b      	ldr	r3, [r3, #0]
 8009b2a:	2208      	movs	r2, #8
 8009b2c:	605a      	str	r2, [r3, #4]
    }

    if (tmpARR != 0UL)
 8009b2e:	69bb      	ldr	r3, [r7, #24]
 8009b30:	2b00      	cmp	r3, #0
 8009b32:	d01a      	beq.n	8009b6a <LPTIM_Disable+0x2be>
    {
      /* Restore ARR register (LPTIM should be enabled first) */
      hlptim->Instance->CR |= LPTIM_CR_ENABLE;
 8009b34:	687b      	ldr	r3, [r7, #4]
 8009b36:	681b      	ldr	r3, [r3, #0]
 8009b38:	691a      	ldr	r2, [r3, #16]
 8009b3a:	687b      	ldr	r3, [r7, #4]
 8009b3c:	681b      	ldr	r3, [r3, #0]
 8009b3e:	f042 0201 	orr.w	r2, r2, #1
 8009b42:	611a      	str	r2, [r3, #16]
      hlptim->Instance->ARR = tmpARR;
 8009b44:	687b      	ldr	r3, [r7, #4]
 8009b46:	681b      	ldr	r3, [r3, #0]
 8009b48:	69ba      	ldr	r2, [r7, #24]
 8009b4a:	619a      	str	r2, [r3, #24]

      /* Wait for the completion of the write operation to the LPTIM_ARR register */
      if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_ARROK) == HAL_TIMEOUT)
 8009b4c:	2110      	movs	r1, #16
 8009b4e:	6878      	ldr	r0, [r7, #4]
 8009b50:	f7ff fe7c 	bl	800984c <LPTIM_WaitForFlag>
 8009b54:	4603      	mov	r3, r0
 8009b56:	2b03      	cmp	r3, #3
 8009b58:	d103      	bne.n	8009b62 <LPTIM_Disable+0x2b6>
      {
        hlptim->State = HAL_LPTIM_STATE_TIMEOUT;
 8009b5a:	687b      	ldr	r3, [r7, #4]
 8009b5c:	2203      	movs	r2, #3
 8009b5e:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
      }

      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARROK);
 8009b62:	687b      	ldr	r3, [r7, #4]
 8009b64:	681b      	ldr	r3, [r3, #0]
 8009b66:	2210      	movs	r2, #16
 8009b68:	605a      	str	r2, [r3, #4]
    }

    /* Restore LPTIM source kernel clock */
    switch ((uint32_t)hlptim->Instance)
 8009b6a:	687b      	ldr	r3, [r7, #4]
 8009b6c:	681b      	ldr	r3, [r3, #0]
 8009b6e:	4a32      	ldr	r2, [pc, #200]	; (8009c38 <LPTIM_Disable+0x38c>)
 8009b70:	4293      	cmp	r3, r2
 8009b72:	d039      	beq.n	8009be8 <LPTIM_Disable+0x33c>
 8009b74:	4a30      	ldr	r2, [pc, #192]	; (8009c38 <LPTIM_Disable+0x38c>)
 8009b76:	4293      	cmp	r3, r2
 8009b78:	d83f      	bhi.n	8009bfa <LPTIM_Disable+0x34e>
 8009b7a:	4a30      	ldr	r2, [pc, #192]	; (8009c3c <LPTIM_Disable+0x390>)
 8009b7c:	4293      	cmp	r3, r2
 8009b7e:	d02a      	beq.n	8009bd6 <LPTIM_Disable+0x32a>
 8009b80:	4a2e      	ldr	r2, [pc, #184]	; (8009c3c <LPTIM_Disable+0x390>)
 8009b82:	4293      	cmp	r3, r2
 8009b84:	d839      	bhi.n	8009bfa <LPTIM_Disable+0x34e>
 8009b86:	4a2e      	ldr	r2, [pc, #184]	; (8009c40 <LPTIM_Disable+0x394>)
 8009b88:	4293      	cmp	r3, r2
 8009b8a:	d01b      	beq.n	8009bc4 <LPTIM_Disable+0x318>
 8009b8c:	4a2c      	ldr	r2, [pc, #176]	; (8009c40 <LPTIM_Disable+0x394>)
 8009b8e:	4293      	cmp	r3, r2
 8009b90:	d833      	bhi.n	8009bfa <LPTIM_Disable+0x34e>
 8009b92:	4a2c      	ldr	r2, [pc, #176]	; (8009c44 <LPTIM_Disable+0x398>)
 8009b94:	4293      	cmp	r3, r2
 8009b96:	d003      	beq.n	8009ba0 <LPTIM_Disable+0x2f4>
 8009b98:	4a2b      	ldr	r2, [pc, #172]	; (8009c48 <LPTIM_Disable+0x39c>)
 8009b9a:	4293      	cmp	r3, r2
 8009b9c:	d009      	beq.n	8009bb2 <LPTIM_Disable+0x306>
      case LPTIM5_BASE:
        __HAL_RCC_LPTIM5_CONFIG(tmpclksource);
        break;
#endif /* LPTIM5 */
      default:
        break;
 8009b9e:	e02c      	b.n	8009bfa <LPTIM_Disable+0x34e>
        __HAL_RCC_LPTIM1_CONFIG(tmpclksource);
 8009ba0:	4b2a      	ldr	r3, [pc, #168]	; (8009c4c <LPTIM_Disable+0x3a0>)
 8009ba2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009ba4:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8009ba8:	4928      	ldr	r1, [pc, #160]	; (8009c4c <LPTIM_Disable+0x3a0>)
 8009baa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009bac:	4313      	orrs	r3, r2
 8009bae:	654b      	str	r3, [r1, #84]	; 0x54
        break;
 8009bb0:	e024      	b.n	8009bfc <LPTIM_Disable+0x350>
        __HAL_RCC_LPTIM2_CONFIG(tmpclksource);
 8009bb2:	4b26      	ldr	r3, [pc, #152]	; (8009c4c <LPTIM_Disable+0x3a0>)
 8009bb4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009bb6:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8009bba:	4924      	ldr	r1, [pc, #144]	; (8009c4c <LPTIM_Disable+0x3a0>)
 8009bbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009bbe:	4313      	orrs	r3, r2
 8009bc0:	658b      	str	r3, [r1, #88]	; 0x58
        break;
 8009bc2:	e01b      	b.n	8009bfc <LPTIM_Disable+0x350>
        __HAL_RCC_LPTIM3_CONFIG(tmpclksource);
 8009bc4:	4b21      	ldr	r3, [pc, #132]	; (8009c4c <LPTIM_Disable+0x3a0>)
 8009bc6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009bc8:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8009bcc:	491f      	ldr	r1, [pc, #124]	; (8009c4c <LPTIM_Disable+0x3a0>)
 8009bce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009bd0:	4313      	orrs	r3, r2
 8009bd2:	658b      	str	r3, [r1, #88]	; 0x58
        break;
 8009bd4:	e012      	b.n	8009bfc <LPTIM_Disable+0x350>
        __HAL_RCC_LPTIM4_CONFIG(tmpclksource);
 8009bd6:	4b1d      	ldr	r3, [pc, #116]	; (8009c4c <LPTIM_Disable+0x3a0>)
 8009bd8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009bda:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8009bde:	491b      	ldr	r1, [pc, #108]	; (8009c4c <LPTIM_Disable+0x3a0>)
 8009be0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009be2:	4313      	orrs	r3, r2
 8009be4:	658b      	str	r3, [r1, #88]	; 0x58
        break;
 8009be6:	e009      	b.n	8009bfc <LPTIM_Disable+0x350>
        __HAL_RCC_LPTIM5_CONFIG(tmpclksource);
 8009be8:	4b18      	ldr	r3, [pc, #96]	; (8009c4c <LPTIM_Disable+0x3a0>)
 8009bea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009bec:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8009bf0:	4916      	ldr	r1, [pc, #88]	; (8009c4c <LPTIM_Disable+0x3a0>)
 8009bf2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009bf4:	4313      	orrs	r3, r2
 8009bf6:	658b      	str	r3, [r1, #88]	; 0x58
        break;
 8009bf8:	e000      	b.n	8009bfc <LPTIM_Disable+0x350>
        break;
 8009bfa:	bf00      	nop
    }
  }

  /* Restore configuration registers (LPTIM should be disabled first) */
  hlptim->Instance->CR &= ~(LPTIM_CR_ENABLE);
 8009bfc:	687b      	ldr	r3, [r7, #4]
 8009bfe:	681b      	ldr	r3, [r3, #0]
 8009c00:	691a      	ldr	r2, [r3, #16]
 8009c02:	687b      	ldr	r3, [r7, #4]
 8009c04:	681b      	ldr	r3, [r3, #0]
 8009c06:	f022 0201 	bic.w	r2, r2, #1
 8009c0a:	611a      	str	r2, [r3, #16]
  hlptim->Instance->IER = tmpIER;
 8009c0c:	687b      	ldr	r3, [r7, #4]
 8009c0e:	681b      	ldr	r3, [r3, #0]
 8009c10:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009c12:	609a      	str	r2, [r3, #8]
  hlptim->Instance->CFGR = tmpCFGR;
 8009c14:	687b      	ldr	r3, [r7, #4]
 8009c16:	681b      	ldr	r3, [r3, #0]
 8009c18:	6a3a      	ldr	r2, [r7, #32]
 8009c1a:	60da      	str	r2, [r3, #12]
  hlptim->Instance->CFGR2 = tmpCFGR2;
 8009c1c:	687b      	ldr	r3, [r7, #4]
 8009c1e:	681b      	ldr	r3, [r3, #0]
 8009c20:	697a      	ldr	r2, [r7, #20]
 8009c22:	625a      	str	r2, [r3, #36]	; 0x24
 8009c24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c26:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009c28:	68bb      	ldr	r3, [r7, #8]
 8009c2a:	f383 8810 	msr	PRIMASK, r3
}
 8009c2e:	bf00      	nop

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);
}
 8009c30:	bf00      	nop
 8009c32:	3730      	adds	r7, #48	; 0x30
 8009c34:	46bd      	mov	sp, r7
 8009c36:	bd80      	pop	{r7, pc}
 8009c38:	58003000 	.word	0x58003000
 8009c3c:	58002c00 	.word	0x58002c00
 8009c40:	58002800 	.word	0x58002800
 8009c44:	40002400 	.word	0x40002400
 8009c48:	58002400 	.word	0x58002400
 8009c4c:	58024400 	.word	0x58024400

08009c50 <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 2, 3, ..31 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None.
  */
void HAL_PWR_EnableBkUpAccess (void)
{
 8009c50:	b480      	push	{r7}
 8009c52:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT (PWR->CR1, PWR_CR1_DBP);
 8009c54:	4b05      	ldr	r3, [pc, #20]	; (8009c6c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8009c56:	681b      	ldr	r3, [r3, #0]
 8009c58:	4a04      	ldr	r2, [pc, #16]	; (8009c6c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8009c5a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009c5e:	6013      	str	r3, [r2, #0]
}
 8009c60:	bf00      	nop
 8009c62:	46bd      	mov	sp, r7
 8009c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c68:	4770      	bx	lr
 8009c6a:	bf00      	nop
 8009c6c:	58024800 	.word	0x58024800

08009c70 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8009c70:	b580      	push	{r7, lr}
 8009c72:	b084      	sub	sp, #16
 8009c74:	af00      	add	r7, sp, #0
 8009c76:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8009c78:	4b19      	ldr	r3, [pc, #100]	; (8009ce0 <HAL_PWREx_ConfigSupply+0x70>)
 8009c7a:	68db      	ldr	r3, [r3, #12]
 8009c7c:	f003 0304 	and.w	r3, r3, #4
 8009c80:	2b04      	cmp	r3, #4
 8009c82:	d00a      	beq.n	8009c9a <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8009c84:	4b16      	ldr	r3, [pc, #88]	; (8009ce0 <HAL_PWREx_ConfigSupply+0x70>)
 8009c86:	68db      	ldr	r3, [r3, #12]
 8009c88:	f003 0307 	and.w	r3, r3, #7
 8009c8c:	687a      	ldr	r2, [r7, #4]
 8009c8e:	429a      	cmp	r2, r3
 8009c90:	d001      	beq.n	8009c96 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8009c92:	2301      	movs	r3, #1
 8009c94:	e01f      	b.n	8009cd6 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8009c96:	2300      	movs	r3, #0
 8009c98:	e01d      	b.n	8009cd6 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8009c9a:	4b11      	ldr	r3, [pc, #68]	; (8009ce0 <HAL_PWREx_ConfigSupply+0x70>)
 8009c9c:	68db      	ldr	r3, [r3, #12]
 8009c9e:	f023 0207 	bic.w	r2, r3, #7
 8009ca2:	490f      	ldr	r1, [pc, #60]	; (8009ce0 <HAL_PWREx_ConfigSupply+0x70>)
 8009ca4:	687b      	ldr	r3, [r7, #4]
 8009ca6:	4313      	orrs	r3, r2
 8009ca8:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8009caa:	f7fa fa7f 	bl	80041ac <HAL_GetTick>
 8009cae:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8009cb0:	e009      	b.n	8009cc6 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8009cb2:	f7fa fa7b 	bl	80041ac <HAL_GetTick>
 8009cb6:	4602      	mov	r2, r0
 8009cb8:	68fb      	ldr	r3, [r7, #12]
 8009cba:	1ad3      	subs	r3, r2, r3
 8009cbc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009cc0:	d901      	bls.n	8009cc6 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8009cc2:	2301      	movs	r3, #1
 8009cc4:	e007      	b.n	8009cd6 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8009cc6:	4b06      	ldr	r3, [pc, #24]	; (8009ce0 <HAL_PWREx_ConfigSupply+0x70>)
 8009cc8:	685b      	ldr	r3, [r3, #4]
 8009cca:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009cce:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009cd2:	d1ee      	bne.n	8009cb2 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8009cd4:	2300      	movs	r3, #0
}
 8009cd6:	4618      	mov	r0, r3
 8009cd8:	3710      	adds	r7, #16
 8009cda:	46bd      	mov	sp, r7
 8009cdc:	bd80      	pop	{r7, pc}
 8009cde:	bf00      	nop
 8009ce0:	58024800 	.word	0x58024800

08009ce4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8009ce4:	b580      	push	{r7, lr}
 8009ce6:	b08c      	sub	sp, #48	; 0x30
 8009ce8:	af00      	add	r7, sp, #0
 8009cea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8009cec:	687b      	ldr	r3, [r7, #4]
 8009cee:	2b00      	cmp	r3, #0
 8009cf0:	d102      	bne.n	8009cf8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8009cf2:	2301      	movs	r3, #1
 8009cf4:	f000 bc48 	b.w	800a588 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8009cf8:	687b      	ldr	r3, [r7, #4]
 8009cfa:	681b      	ldr	r3, [r3, #0]
 8009cfc:	f003 0301 	and.w	r3, r3, #1
 8009d00:	2b00      	cmp	r3, #0
 8009d02:	f000 8088 	beq.w	8009e16 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8009d06:	4b99      	ldr	r3, [pc, #612]	; (8009f6c <HAL_RCC_OscConfig+0x288>)
 8009d08:	691b      	ldr	r3, [r3, #16]
 8009d0a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009d0e:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8009d10:	4b96      	ldr	r3, [pc, #600]	; (8009f6c <HAL_RCC_OscConfig+0x288>)
 8009d12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009d14:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8009d16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d18:	2b10      	cmp	r3, #16
 8009d1a:	d007      	beq.n	8009d2c <HAL_RCC_OscConfig+0x48>
 8009d1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d1e:	2b18      	cmp	r3, #24
 8009d20:	d111      	bne.n	8009d46 <HAL_RCC_OscConfig+0x62>
 8009d22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d24:	f003 0303 	and.w	r3, r3, #3
 8009d28:	2b02      	cmp	r3, #2
 8009d2a:	d10c      	bne.n	8009d46 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009d2c:	4b8f      	ldr	r3, [pc, #572]	; (8009f6c <HAL_RCC_OscConfig+0x288>)
 8009d2e:	681b      	ldr	r3, [r3, #0]
 8009d30:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009d34:	2b00      	cmp	r3, #0
 8009d36:	d06d      	beq.n	8009e14 <HAL_RCC_OscConfig+0x130>
 8009d38:	687b      	ldr	r3, [r7, #4]
 8009d3a:	685b      	ldr	r3, [r3, #4]
 8009d3c:	2b00      	cmp	r3, #0
 8009d3e:	d169      	bne.n	8009e14 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8009d40:	2301      	movs	r3, #1
 8009d42:	f000 bc21 	b.w	800a588 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8009d46:	687b      	ldr	r3, [r7, #4]
 8009d48:	685b      	ldr	r3, [r3, #4]
 8009d4a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009d4e:	d106      	bne.n	8009d5e <HAL_RCC_OscConfig+0x7a>
 8009d50:	4b86      	ldr	r3, [pc, #536]	; (8009f6c <HAL_RCC_OscConfig+0x288>)
 8009d52:	681b      	ldr	r3, [r3, #0]
 8009d54:	4a85      	ldr	r2, [pc, #532]	; (8009f6c <HAL_RCC_OscConfig+0x288>)
 8009d56:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009d5a:	6013      	str	r3, [r2, #0]
 8009d5c:	e02e      	b.n	8009dbc <HAL_RCC_OscConfig+0xd8>
 8009d5e:	687b      	ldr	r3, [r7, #4]
 8009d60:	685b      	ldr	r3, [r3, #4]
 8009d62:	2b00      	cmp	r3, #0
 8009d64:	d10c      	bne.n	8009d80 <HAL_RCC_OscConfig+0x9c>
 8009d66:	4b81      	ldr	r3, [pc, #516]	; (8009f6c <HAL_RCC_OscConfig+0x288>)
 8009d68:	681b      	ldr	r3, [r3, #0]
 8009d6a:	4a80      	ldr	r2, [pc, #512]	; (8009f6c <HAL_RCC_OscConfig+0x288>)
 8009d6c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009d70:	6013      	str	r3, [r2, #0]
 8009d72:	4b7e      	ldr	r3, [pc, #504]	; (8009f6c <HAL_RCC_OscConfig+0x288>)
 8009d74:	681b      	ldr	r3, [r3, #0]
 8009d76:	4a7d      	ldr	r2, [pc, #500]	; (8009f6c <HAL_RCC_OscConfig+0x288>)
 8009d78:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8009d7c:	6013      	str	r3, [r2, #0]
 8009d7e:	e01d      	b.n	8009dbc <HAL_RCC_OscConfig+0xd8>
 8009d80:	687b      	ldr	r3, [r7, #4]
 8009d82:	685b      	ldr	r3, [r3, #4]
 8009d84:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8009d88:	d10c      	bne.n	8009da4 <HAL_RCC_OscConfig+0xc0>
 8009d8a:	4b78      	ldr	r3, [pc, #480]	; (8009f6c <HAL_RCC_OscConfig+0x288>)
 8009d8c:	681b      	ldr	r3, [r3, #0]
 8009d8e:	4a77      	ldr	r2, [pc, #476]	; (8009f6c <HAL_RCC_OscConfig+0x288>)
 8009d90:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8009d94:	6013      	str	r3, [r2, #0]
 8009d96:	4b75      	ldr	r3, [pc, #468]	; (8009f6c <HAL_RCC_OscConfig+0x288>)
 8009d98:	681b      	ldr	r3, [r3, #0]
 8009d9a:	4a74      	ldr	r2, [pc, #464]	; (8009f6c <HAL_RCC_OscConfig+0x288>)
 8009d9c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009da0:	6013      	str	r3, [r2, #0]
 8009da2:	e00b      	b.n	8009dbc <HAL_RCC_OscConfig+0xd8>
 8009da4:	4b71      	ldr	r3, [pc, #452]	; (8009f6c <HAL_RCC_OscConfig+0x288>)
 8009da6:	681b      	ldr	r3, [r3, #0]
 8009da8:	4a70      	ldr	r2, [pc, #448]	; (8009f6c <HAL_RCC_OscConfig+0x288>)
 8009daa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009dae:	6013      	str	r3, [r2, #0]
 8009db0:	4b6e      	ldr	r3, [pc, #440]	; (8009f6c <HAL_RCC_OscConfig+0x288>)
 8009db2:	681b      	ldr	r3, [r3, #0]
 8009db4:	4a6d      	ldr	r2, [pc, #436]	; (8009f6c <HAL_RCC_OscConfig+0x288>)
 8009db6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8009dba:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8009dbc:	687b      	ldr	r3, [r7, #4]
 8009dbe:	685b      	ldr	r3, [r3, #4]
 8009dc0:	2b00      	cmp	r3, #0
 8009dc2:	d013      	beq.n	8009dec <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009dc4:	f7fa f9f2 	bl	80041ac <HAL_GetTick>
 8009dc8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8009dca:	e008      	b.n	8009dde <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8009dcc:	f7fa f9ee 	bl	80041ac <HAL_GetTick>
 8009dd0:	4602      	mov	r2, r0
 8009dd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009dd4:	1ad3      	subs	r3, r2, r3
 8009dd6:	2b64      	cmp	r3, #100	; 0x64
 8009dd8:	d901      	bls.n	8009dde <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8009dda:	2303      	movs	r3, #3
 8009ddc:	e3d4      	b.n	800a588 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8009dde:	4b63      	ldr	r3, [pc, #396]	; (8009f6c <HAL_RCC_OscConfig+0x288>)
 8009de0:	681b      	ldr	r3, [r3, #0]
 8009de2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009de6:	2b00      	cmp	r3, #0
 8009de8:	d0f0      	beq.n	8009dcc <HAL_RCC_OscConfig+0xe8>
 8009dea:	e014      	b.n	8009e16 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009dec:	f7fa f9de 	bl	80041ac <HAL_GetTick>
 8009df0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8009df2:	e008      	b.n	8009e06 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8009df4:	f7fa f9da 	bl	80041ac <HAL_GetTick>
 8009df8:	4602      	mov	r2, r0
 8009dfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009dfc:	1ad3      	subs	r3, r2, r3
 8009dfe:	2b64      	cmp	r3, #100	; 0x64
 8009e00:	d901      	bls.n	8009e06 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8009e02:	2303      	movs	r3, #3
 8009e04:	e3c0      	b.n	800a588 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8009e06:	4b59      	ldr	r3, [pc, #356]	; (8009f6c <HAL_RCC_OscConfig+0x288>)
 8009e08:	681b      	ldr	r3, [r3, #0]
 8009e0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009e0e:	2b00      	cmp	r3, #0
 8009e10:	d1f0      	bne.n	8009df4 <HAL_RCC_OscConfig+0x110>
 8009e12:	e000      	b.n	8009e16 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009e14:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8009e16:	687b      	ldr	r3, [r7, #4]
 8009e18:	681b      	ldr	r3, [r3, #0]
 8009e1a:	f003 0302 	and.w	r3, r3, #2
 8009e1e:	2b00      	cmp	r3, #0
 8009e20:	f000 80ca 	beq.w	8009fb8 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8009e24:	4b51      	ldr	r3, [pc, #324]	; (8009f6c <HAL_RCC_OscConfig+0x288>)
 8009e26:	691b      	ldr	r3, [r3, #16]
 8009e28:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009e2c:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8009e2e:	4b4f      	ldr	r3, [pc, #316]	; (8009f6c <HAL_RCC_OscConfig+0x288>)
 8009e30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009e32:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8009e34:	6a3b      	ldr	r3, [r7, #32]
 8009e36:	2b00      	cmp	r3, #0
 8009e38:	d007      	beq.n	8009e4a <HAL_RCC_OscConfig+0x166>
 8009e3a:	6a3b      	ldr	r3, [r7, #32]
 8009e3c:	2b18      	cmp	r3, #24
 8009e3e:	d156      	bne.n	8009eee <HAL_RCC_OscConfig+0x20a>
 8009e40:	69fb      	ldr	r3, [r7, #28]
 8009e42:	f003 0303 	and.w	r3, r3, #3
 8009e46:	2b00      	cmp	r3, #0
 8009e48:	d151      	bne.n	8009eee <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8009e4a:	4b48      	ldr	r3, [pc, #288]	; (8009f6c <HAL_RCC_OscConfig+0x288>)
 8009e4c:	681b      	ldr	r3, [r3, #0]
 8009e4e:	f003 0304 	and.w	r3, r3, #4
 8009e52:	2b00      	cmp	r3, #0
 8009e54:	d005      	beq.n	8009e62 <HAL_RCC_OscConfig+0x17e>
 8009e56:	687b      	ldr	r3, [r7, #4]
 8009e58:	68db      	ldr	r3, [r3, #12]
 8009e5a:	2b00      	cmp	r3, #0
 8009e5c:	d101      	bne.n	8009e62 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8009e5e:	2301      	movs	r3, #1
 8009e60:	e392      	b.n	800a588 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8009e62:	4b42      	ldr	r3, [pc, #264]	; (8009f6c <HAL_RCC_OscConfig+0x288>)
 8009e64:	681b      	ldr	r3, [r3, #0]
 8009e66:	f023 0219 	bic.w	r2, r3, #25
 8009e6a:	687b      	ldr	r3, [r7, #4]
 8009e6c:	68db      	ldr	r3, [r3, #12]
 8009e6e:	493f      	ldr	r1, [pc, #252]	; (8009f6c <HAL_RCC_OscConfig+0x288>)
 8009e70:	4313      	orrs	r3, r2
 8009e72:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009e74:	f7fa f99a 	bl	80041ac <HAL_GetTick>
 8009e78:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8009e7a:	e008      	b.n	8009e8e <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8009e7c:	f7fa f996 	bl	80041ac <HAL_GetTick>
 8009e80:	4602      	mov	r2, r0
 8009e82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009e84:	1ad3      	subs	r3, r2, r3
 8009e86:	2b02      	cmp	r3, #2
 8009e88:	d901      	bls.n	8009e8e <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8009e8a:	2303      	movs	r3, #3
 8009e8c:	e37c      	b.n	800a588 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8009e8e:	4b37      	ldr	r3, [pc, #220]	; (8009f6c <HAL_RCC_OscConfig+0x288>)
 8009e90:	681b      	ldr	r3, [r3, #0]
 8009e92:	f003 0304 	and.w	r3, r3, #4
 8009e96:	2b00      	cmp	r3, #0
 8009e98:	d0f0      	beq.n	8009e7c <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009e9a:	f7fa f9b7 	bl	800420c <HAL_GetREVID>
 8009e9e:	4603      	mov	r3, r0
 8009ea0:	f241 0203 	movw	r2, #4099	; 0x1003
 8009ea4:	4293      	cmp	r3, r2
 8009ea6:	d817      	bhi.n	8009ed8 <HAL_RCC_OscConfig+0x1f4>
 8009ea8:	687b      	ldr	r3, [r7, #4]
 8009eaa:	691b      	ldr	r3, [r3, #16]
 8009eac:	2b40      	cmp	r3, #64	; 0x40
 8009eae:	d108      	bne.n	8009ec2 <HAL_RCC_OscConfig+0x1de>
 8009eb0:	4b2e      	ldr	r3, [pc, #184]	; (8009f6c <HAL_RCC_OscConfig+0x288>)
 8009eb2:	685b      	ldr	r3, [r3, #4]
 8009eb4:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8009eb8:	4a2c      	ldr	r2, [pc, #176]	; (8009f6c <HAL_RCC_OscConfig+0x288>)
 8009eba:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009ebe:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8009ec0:	e07a      	b.n	8009fb8 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009ec2:	4b2a      	ldr	r3, [pc, #168]	; (8009f6c <HAL_RCC_OscConfig+0x288>)
 8009ec4:	685b      	ldr	r3, [r3, #4]
 8009ec6:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8009eca:	687b      	ldr	r3, [r7, #4]
 8009ecc:	691b      	ldr	r3, [r3, #16]
 8009ece:	031b      	lsls	r3, r3, #12
 8009ed0:	4926      	ldr	r1, [pc, #152]	; (8009f6c <HAL_RCC_OscConfig+0x288>)
 8009ed2:	4313      	orrs	r3, r2
 8009ed4:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8009ed6:	e06f      	b.n	8009fb8 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009ed8:	4b24      	ldr	r3, [pc, #144]	; (8009f6c <HAL_RCC_OscConfig+0x288>)
 8009eda:	685b      	ldr	r3, [r3, #4]
 8009edc:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8009ee0:	687b      	ldr	r3, [r7, #4]
 8009ee2:	691b      	ldr	r3, [r3, #16]
 8009ee4:	061b      	lsls	r3, r3, #24
 8009ee6:	4921      	ldr	r1, [pc, #132]	; (8009f6c <HAL_RCC_OscConfig+0x288>)
 8009ee8:	4313      	orrs	r3, r2
 8009eea:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8009eec:	e064      	b.n	8009fb8 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8009eee:	687b      	ldr	r3, [r7, #4]
 8009ef0:	68db      	ldr	r3, [r3, #12]
 8009ef2:	2b00      	cmp	r3, #0
 8009ef4:	d047      	beq.n	8009f86 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8009ef6:	4b1d      	ldr	r3, [pc, #116]	; (8009f6c <HAL_RCC_OscConfig+0x288>)
 8009ef8:	681b      	ldr	r3, [r3, #0]
 8009efa:	f023 0219 	bic.w	r2, r3, #25
 8009efe:	687b      	ldr	r3, [r7, #4]
 8009f00:	68db      	ldr	r3, [r3, #12]
 8009f02:	491a      	ldr	r1, [pc, #104]	; (8009f6c <HAL_RCC_OscConfig+0x288>)
 8009f04:	4313      	orrs	r3, r2
 8009f06:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009f08:	f7fa f950 	bl	80041ac <HAL_GetTick>
 8009f0c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8009f0e:	e008      	b.n	8009f22 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8009f10:	f7fa f94c 	bl	80041ac <HAL_GetTick>
 8009f14:	4602      	mov	r2, r0
 8009f16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f18:	1ad3      	subs	r3, r2, r3
 8009f1a:	2b02      	cmp	r3, #2
 8009f1c:	d901      	bls.n	8009f22 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8009f1e:	2303      	movs	r3, #3
 8009f20:	e332      	b.n	800a588 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8009f22:	4b12      	ldr	r3, [pc, #72]	; (8009f6c <HAL_RCC_OscConfig+0x288>)
 8009f24:	681b      	ldr	r3, [r3, #0]
 8009f26:	f003 0304 	and.w	r3, r3, #4
 8009f2a:	2b00      	cmp	r3, #0
 8009f2c:	d0f0      	beq.n	8009f10 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009f2e:	f7fa f96d 	bl	800420c <HAL_GetREVID>
 8009f32:	4603      	mov	r3, r0
 8009f34:	f241 0203 	movw	r2, #4099	; 0x1003
 8009f38:	4293      	cmp	r3, r2
 8009f3a:	d819      	bhi.n	8009f70 <HAL_RCC_OscConfig+0x28c>
 8009f3c:	687b      	ldr	r3, [r7, #4]
 8009f3e:	691b      	ldr	r3, [r3, #16]
 8009f40:	2b40      	cmp	r3, #64	; 0x40
 8009f42:	d108      	bne.n	8009f56 <HAL_RCC_OscConfig+0x272>
 8009f44:	4b09      	ldr	r3, [pc, #36]	; (8009f6c <HAL_RCC_OscConfig+0x288>)
 8009f46:	685b      	ldr	r3, [r3, #4]
 8009f48:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8009f4c:	4a07      	ldr	r2, [pc, #28]	; (8009f6c <HAL_RCC_OscConfig+0x288>)
 8009f4e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009f52:	6053      	str	r3, [r2, #4]
 8009f54:	e030      	b.n	8009fb8 <HAL_RCC_OscConfig+0x2d4>
 8009f56:	4b05      	ldr	r3, [pc, #20]	; (8009f6c <HAL_RCC_OscConfig+0x288>)
 8009f58:	685b      	ldr	r3, [r3, #4]
 8009f5a:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8009f5e:	687b      	ldr	r3, [r7, #4]
 8009f60:	691b      	ldr	r3, [r3, #16]
 8009f62:	031b      	lsls	r3, r3, #12
 8009f64:	4901      	ldr	r1, [pc, #4]	; (8009f6c <HAL_RCC_OscConfig+0x288>)
 8009f66:	4313      	orrs	r3, r2
 8009f68:	604b      	str	r3, [r1, #4]
 8009f6a:	e025      	b.n	8009fb8 <HAL_RCC_OscConfig+0x2d4>
 8009f6c:	58024400 	.word	0x58024400
 8009f70:	4b9a      	ldr	r3, [pc, #616]	; (800a1dc <HAL_RCC_OscConfig+0x4f8>)
 8009f72:	685b      	ldr	r3, [r3, #4]
 8009f74:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8009f78:	687b      	ldr	r3, [r7, #4]
 8009f7a:	691b      	ldr	r3, [r3, #16]
 8009f7c:	061b      	lsls	r3, r3, #24
 8009f7e:	4997      	ldr	r1, [pc, #604]	; (800a1dc <HAL_RCC_OscConfig+0x4f8>)
 8009f80:	4313      	orrs	r3, r2
 8009f82:	604b      	str	r3, [r1, #4]
 8009f84:	e018      	b.n	8009fb8 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8009f86:	4b95      	ldr	r3, [pc, #596]	; (800a1dc <HAL_RCC_OscConfig+0x4f8>)
 8009f88:	681b      	ldr	r3, [r3, #0]
 8009f8a:	4a94      	ldr	r2, [pc, #592]	; (800a1dc <HAL_RCC_OscConfig+0x4f8>)
 8009f8c:	f023 0301 	bic.w	r3, r3, #1
 8009f90:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009f92:	f7fa f90b 	bl	80041ac <HAL_GetTick>
 8009f96:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8009f98:	e008      	b.n	8009fac <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8009f9a:	f7fa f907 	bl	80041ac <HAL_GetTick>
 8009f9e:	4602      	mov	r2, r0
 8009fa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009fa2:	1ad3      	subs	r3, r2, r3
 8009fa4:	2b02      	cmp	r3, #2
 8009fa6:	d901      	bls.n	8009fac <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8009fa8:	2303      	movs	r3, #3
 8009faa:	e2ed      	b.n	800a588 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8009fac:	4b8b      	ldr	r3, [pc, #556]	; (800a1dc <HAL_RCC_OscConfig+0x4f8>)
 8009fae:	681b      	ldr	r3, [r3, #0]
 8009fb0:	f003 0304 	and.w	r3, r3, #4
 8009fb4:	2b00      	cmp	r3, #0
 8009fb6:	d1f0      	bne.n	8009f9a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8009fb8:	687b      	ldr	r3, [r7, #4]
 8009fba:	681b      	ldr	r3, [r3, #0]
 8009fbc:	f003 0310 	and.w	r3, r3, #16
 8009fc0:	2b00      	cmp	r3, #0
 8009fc2:	f000 80a9 	beq.w	800a118 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8009fc6:	4b85      	ldr	r3, [pc, #532]	; (800a1dc <HAL_RCC_OscConfig+0x4f8>)
 8009fc8:	691b      	ldr	r3, [r3, #16]
 8009fca:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009fce:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8009fd0:	4b82      	ldr	r3, [pc, #520]	; (800a1dc <HAL_RCC_OscConfig+0x4f8>)
 8009fd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009fd4:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8009fd6:	69bb      	ldr	r3, [r7, #24]
 8009fd8:	2b08      	cmp	r3, #8
 8009fda:	d007      	beq.n	8009fec <HAL_RCC_OscConfig+0x308>
 8009fdc:	69bb      	ldr	r3, [r7, #24]
 8009fde:	2b18      	cmp	r3, #24
 8009fe0:	d13a      	bne.n	800a058 <HAL_RCC_OscConfig+0x374>
 8009fe2:	697b      	ldr	r3, [r7, #20]
 8009fe4:	f003 0303 	and.w	r3, r3, #3
 8009fe8:	2b01      	cmp	r3, #1
 8009fea:	d135      	bne.n	800a058 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8009fec:	4b7b      	ldr	r3, [pc, #492]	; (800a1dc <HAL_RCC_OscConfig+0x4f8>)
 8009fee:	681b      	ldr	r3, [r3, #0]
 8009ff0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009ff4:	2b00      	cmp	r3, #0
 8009ff6:	d005      	beq.n	800a004 <HAL_RCC_OscConfig+0x320>
 8009ff8:	687b      	ldr	r3, [r7, #4]
 8009ffa:	69db      	ldr	r3, [r3, #28]
 8009ffc:	2b80      	cmp	r3, #128	; 0x80
 8009ffe:	d001      	beq.n	800a004 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 800a000:	2301      	movs	r3, #1
 800a002:	e2c1      	b.n	800a588 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800a004:	f7fa f902 	bl	800420c <HAL_GetREVID>
 800a008:	4603      	mov	r3, r0
 800a00a:	f241 0203 	movw	r2, #4099	; 0x1003
 800a00e:	4293      	cmp	r3, r2
 800a010:	d817      	bhi.n	800a042 <HAL_RCC_OscConfig+0x35e>
 800a012:	687b      	ldr	r3, [r7, #4]
 800a014:	6a1b      	ldr	r3, [r3, #32]
 800a016:	2b20      	cmp	r3, #32
 800a018:	d108      	bne.n	800a02c <HAL_RCC_OscConfig+0x348>
 800a01a:	4b70      	ldr	r3, [pc, #448]	; (800a1dc <HAL_RCC_OscConfig+0x4f8>)
 800a01c:	685b      	ldr	r3, [r3, #4]
 800a01e:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800a022:	4a6e      	ldr	r2, [pc, #440]	; (800a1dc <HAL_RCC_OscConfig+0x4f8>)
 800a024:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a028:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800a02a:	e075      	b.n	800a118 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800a02c:	4b6b      	ldr	r3, [pc, #428]	; (800a1dc <HAL_RCC_OscConfig+0x4f8>)
 800a02e:	685b      	ldr	r3, [r3, #4]
 800a030:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800a034:	687b      	ldr	r3, [r7, #4]
 800a036:	6a1b      	ldr	r3, [r3, #32]
 800a038:	069b      	lsls	r3, r3, #26
 800a03a:	4968      	ldr	r1, [pc, #416]	; (800a1dc <HAL_RCC_OscConfig+0x4f8>)
 800a03c:	4313      	orrs	r3, r2
 800a03e:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800a040:	e06a      	b.n	800a118 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800a042:	4b66      	ldr	r3, [pc, #408]	; (800a1dc <HAL_RCC_OscConfig+0x4f8>)
 800a044:	68db      	ldr	r3, [r3, #12]
 800a046:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800a04a:	687b      	ldr	r3, [r7, #4]
 800a04c:	6a1b      	ldr	r3, [r3, #32]
 800a04e:	061b      	lsls	r3, r3, #24
 800a050:	4962      	ldr	r1, [pc, #392]	; (800a1dc <HAL_RCC_OscConfig+0x4f8>)
 800a052:	4313      	orrs	r3, r2
 800a054:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800a056:	e05f      	b.n	800a118 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 800a058:	687b      	ldr	r3, [r7, #4]
 800a05a:	69db      	ldr	r3, [r3, #28]
 800a05c:	2b00      	cmp	r3, #0
 800a05e:	d042      	beq.n	800a0e6 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800a060:	4b5e      	ldr	r3, [pc, #376]	; (800a1dc <HAL_RCC_OscConfig+0x4f8>)
 800a062:	681b      	ldr	r3, [r3, #0]
 800a064:	4a5d      	ldr	r2, [pc, #372]	; (800a1dc <HAL_RCC_OscConfig+0x4f8>)
 800a066:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a06a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a06c:	f7fa f89e 	bl	80041ac <HAL_GetTick>
 800a070:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800a072:	e008      	b.n	800a086 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800a074:	f7fa f89a 	bl	80041ac <HAL_GetTick>
 800a078:	4602      	mov	r2, r0
 800a07a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a07c:	1ad3      	subs	r3, r2, r3
 800a07e:	2b02      	cmp	r3, #2
 800a080:	d901      	bls.n	800a086 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 800a082:	2303      	movs	r3, #3
 800a084:	e280      	b.n	800a588 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800a086:	4b55      	ldr	r3, [pc, #340]	; (800a1dc <HAL_RCC_OscConfig+0x4f8>)
 800a088:	681b      	ldr	r3, [r3, #0]
 800a08a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a08e:	2b00      	cmp	r3, #0
 800a090:	d0f0      	beq.n	800a074 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800a092:	f7fa f8bb 	bl	800420c <HAL_GetREVID>
 800a096:	4603      	mov	r3, r0
 800a098:	f241 0203 	movw	r2, #4099	; 0x1003
 800a09c:	4293      	cmp	r3, r2
 800a09e:	d817      	bhi.n	800a0d0 <HAL_RCC_OscConfig+0x3ec>
 800a0a0:	687b      	ldr	r3, [r7, #4]
 800a0a2:	6a1b      	ldr	r3, [r3, #32]
 800a0a4:	2b20      	cmp	r3, #32
 800a0a6:	d108      	bne.n	800a0ba <HAL_RCC_OscConfig+0x3d6>
 800a0a8:	4b4c      	ldr	r3, [pc, #304]	; (800a1dc <HAL_RCC_OscConfig+0x4f8>)
 800a0aa:	685b      	ldr	r3, [r3, #4]
 800a0ac:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800a0b0:	4a4a      	ldr	r2, [pc, #296]	; (800a1dc <HAL_RCC_OscConfig+0x4f8>)
 800a0b2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a0b6:	6053      	str	r3, [r2, #4]
 800a0b8:	e02e      	b.n	800a118 <HAL_RCC_OscConfig+0x434>
 800a0ba:	4b48      	ldr	r3, [pc, #288]	; (800a1dc <HAL_RCC_OscConfig+0x4f8>)
 800a0bc:	685b      	ldr	r3, [r3, #4]
 800a0be:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800a0c2:	687b      	ldr	r3, [r7, #4]
 800a0c4:	6a1b      	ldr	r3, [r3, #32]
 800a0c6:	069b      	lsls	r3, r3, #26
 800a0c8:	4944      	ldr	r1, [pc, #272]	; (800a1dc <HAL_RCC_OscConfig+0x4f8>)
 800a0ca:	4313      	orrs	r3, r2
 800a0cc:	604b      	str	r3, [r1, #4]
 800a0ce:	e023      	b.n	800a118 <HAL_RCC_OscConfig+0x434>
 800a0d0:	4b42      	ldr	r3, [pc, #264]	; (800a1dc <HAL_RCC_OscConfig+0x4f8>)
 800a0d2:	68db      	ldr	r3, [r3, #12]
 800a0d4:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800a0d8:	687b      	ldr	r3, [r7, #4]
 800a0da:	6a1b      	ldr	r3, [r3, #32]
 800a0dc:	061b      	lsls	r3, r3, #24
 800a0de:	493f      	ldr	r1, [pc, #252]	; (800a1dc <HAL_RCC_OscConfig+0x4f8>)
 800a0e0:	4313      	orrs	r3, r2
 800a0e2:	60cb      	str	r3, [r1, #12]
 800a0e4:	e018      	b.n	800a118 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800a0e6:	4b3d      	ldr	r3, [pc, #244]	; (800a1dc <HAL_RCC_OscConfig+0x4f8>)
 800a0e8:	681b      	ldr	r3, [r3, #0]
 800a0ea:	4a3c      	ldr	r2, [pc, #240]	; (800a1dc <HAL_RCC_OscConfig+0x4f8>)
 800a0ec:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a0f0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a0f2:	f7fa f85b 	bl	80041ac <HAL_GetTick>
 800a0f6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800a0f8:	e008      	b.n	800a10c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800a0fa:	f7fa f857 	bl	80041ac <HAL_GetTick>
 800a0fe:	4602      	mov	r2, r0
 800a100:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a102:	1ad3      	subs	r3, r2, r3
 800a104:	2b02      	cmp	r3, #2
 800a106:	d901      	bls.n	800a10c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800a108:	2303      	movs	r3, #3
 800a10a:	e23d      	b.n	800a588 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800a10c:	4b33      	ldr	r3, [pc, #204]	; (800a1dc <HAL_RCC_OscConfig+0x4f8>)
 800a10e:	681b      	ldr	r3, [r3, #0]
 800a110:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a114:	2b00      	cmp	r3, #0
 800a116:	d1f0      	bne.n	800a0fa <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800a118:	687b      	ldr	r3, [r7, #4]
 800a11a:	681b      	ldr	r3, [r3, #0]
 800a11c:	f003 0308 	and.w	r3, r3, #8
 800a120:	2b00      	cmp	r3, #0
 800a122:	d036      	beq.n	800a192 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800a124:	687b      	ldr	r3, [r7, #4]
 800a126:	695b      	ldr	r3, [r3, #20]
 800a128:	2b00      	cmp	r3, #0
 800a12a:	d019      	beq.n	800a160 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800a12c:	4b2b      	ldr	r3, [pc, #172]	; (800a1dc <HAL_RCC_OscConfig+0x4f8>)
 800a12e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a130:	4a2a      	ldr	r2, [pc, #168]	; (800a1dc <HAL_RCC_OscConfig+0x4f8>)
 800a132:	f043 0301 	orr.w	r3, r3, #1
 800a136:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a138:	f7fa f838 	bl	80041ac <HAL_GetTick>
 800a13c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800a13e:	e008      	b.n	800a152 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800a140:	f7fa f834 	bl	80041ac <HAL_GetTick>
 800a144:	4602      	mov	r2, r0
 800a146:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a148:	1ad3      	subs	r3, r2, r3
 800a14a:	2b02      	cmp	r3, #2
 800a14c:	d901      	bls.n	800a152 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 800a14e:	2303      	movs	r3, #3
 800a150:	e21a      	b.n	800a588 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800a152:	4b22      	ldr	r3, [pc, #136]	; (800a1dc <HAL_RCC_OscConfig+0x4f8>)
 800a154:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a156:	f003 0302 	and.w	r3, r3, #2
 800a15a:	2b00      	cmp	r3, #0
 800a15c:	d0f0      	beq.n	800a140 <HAL_RCC_OscConfig+0x45c>
 800a15e:	e018      	b.n	800a192 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800a160:	4b1e      	ldr	r3, [pc, #120]	; (800a1dc <HAL_RCC_OscConfig+0x4f8>)
 800a162:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a164:	4a1d      	ldr	r2, [pc, #116]	; (800a1dc <HAL_RCC_OscConfig+0x4f8>)
 800a166:	f023 0301 	bic.w	r3, r3, #1
 800a16a:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a16c:	f7fa f81e 	bl	80041ac <HAL_GetTick>
 800a170:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800a172:	e008      	b.n	800a186 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800a174:	f7fa f81a 	bl	80041ac <HAL_GetTick>
 800a178:	4602      	mov	r2, r0
 800a17a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a17c:	1ad3      	subs	r3, r2, r3
 800a17e:	2b02      	cmp	r3, #2
 800a180:	d901      	bls.n	800a186 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 800a182:	2303      	movs	r3, #3
 800a184:	e200      	b.n	800a588 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800a186:	4b15      	ldr	r3, [pc, #84]	; (800a1dc <HAL_RCC_OscConfig+0x4f8>)
 800a188:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a18a:	f003 0302 	and.w	r3, r3, #2
 800a18e:	2b00      	cmp	r3, #0
 800a190:	d1f0      	bne.n	800a174 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800a192:	687b      	ldr	r3, [r7, #4]
 800a194:	681b      	ldr	r3, [r3, #0]
 800a196:	f003 0320 	and.w	r3, r3, #32
 800a19a:	2b00      	cmp	r3, #0
 800a19c:	d039      	beq.n	800a212 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 800a19e:	687b      	ldr	r3, [r7, #4]
 800a1a0:	699b      	ldr	r3, [r3, #24]
 800a1a2:	2b00      	cmp	r3, #0
 800a1a4:	d01c      	beq.n	800a1e0 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800a1a6:	4b0d      	ldr	r3, [pc, #52]	; (800a1dc <HAL_RCC_OscConfig+0x4f8>)
 800a1a8:	681b      	ldr	r3, [r3, #0]
 800a1aa:	4a0c      	ldr	r2, [pc, #48]	; (800a1dc <HAL_RCC_OscConfig+0x4f8>)
 800a1ac:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800a1b0:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800a1b2:	f7f9 fffb 	bl	80041ac <HAL_GetTick>
 800a1b6:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800a1b8:	e008      	b.n	800a1cc <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800a1ba:	f7f9 fff7 	bl	80041ac <HAL_GetTick>
 800a1be:	4602      	mov	r2, r0
 800a1c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1c2:	1ad3      	subs	r3, r2, r3
 800a1c4:	2b02      	cmp	r3, #2
 800a1c6:	d901      	bls.n	800a1cc <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 800a1c8:	2303      	movs	r3, #3
 800a1ca:	e1dd      	b.n	800a588 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800a1cc:	4b03      	ldr	r3, [pc, #12]	; (800a1dc <HAL_RCC_OscConfig+0x4f8>)
 800a1ce:	681b      	ldr	r3, [r3, #0]
 800a1d0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800a1d4:	2b00      	cmp	r3, #0
 800a1d6:	d0f0      	beq.n	800a1ba <HAL_RCC_OscConfig+0x4d6>
 800a1d8:	e01b      	b.n	800a212 <HAL_RCC_OscConfig+0x52e>
 800a1da:	bf00      	nop
 800a1dc:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800a1e0:	4b9b      	ldr	r3, [pc, #620]	; (800a450 <HAL_RCC_OscConfig+0x76c>)
 800a1e2:	681b      	ldr	r3, [r3, #0]
 800a1e4:	4a9a      	ldr	r2, [pc, #616]	; (800a450 <HAL_RCC_OscConfig+0x76c>)
 800a1e6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a1ea:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800a1ec:	f7f9 ffde 	bl	80041ac <HAL_GetTick>
 800a1f0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800a1f2:	e008      	b.n	800a206 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800a1f4:	f7f9 ffda 	bl	80041ac <HAL_GetTick>
 800a1f8:	4602      	mov	r2, r0
 800a1fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1fc:	1ad3      	subs	r3, r2, r3
 800a1fe:	2b02      	cmp	r3, #2
 800a200:	d901      	bls.n	800a206 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 800a202:	2303      	movs	r3, #3
 800a204:	e1c0      	b.n	800a588 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800a206:	4b92      	ldr	r3, [pc, #584]	; (800a450 <HAL_RCC_OscConfig+0x76c>)
 800a208:	681b      	ldr	r3, [r3, #0]
 800a20a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800a20e:	2b00      	cmp	r3, #0
 800a210:	d1f0      	bne.n	800a1f4 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800a212:	687b      	ldr	r3, [r7, #4]
 800a214:	681b      	ldr	r3, [r3, #0]
 800a216:	f003 0304 	and.w	r3, r3, #4
 800a21a:	2b00      	cmp	r3, #0
 800a21c:	f000 8081 	beq.w	800a322 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800a220:	4b8c      	ldr	r3, [pc, #560]	; (800a454 <HAL_RCC_OscConfig+0x770>)
 800a222:	681b      	ldr	r3, [r3, #0]
 800a224:	4a8b      	ldr	r2, [pc, #556]	; (800a454 <HAL_RCC_OscConfig+0x770>)
 800a226:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a22a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800a22c:	f7f9 ffbe 	bl	80041ac <HAL_GetTick>
 800a230:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800a232:	e008      	b.n	800a246 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a234:	f7f9 ffba 	bl	80041ac <HAL_GetTick>
 800a238:	4602      	mov	r2, r0
 800a23a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a23c:	1ad3      	subs	r3, r2, r3
 800a23e:	2b64      	cmp	r3, #100	; 0x64
 800a240:	d901      	bls.n	800a246 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 800a242:	2303      	movs	r3, #3
 800a244:	e1a0      	b.n	800a588 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800a246:	4b83      	ldr	r3, [pc, #524]	; (800a454 <HAL_RCC_OscConfig+0x770>)
 800a248:	681b      	ldr	r3, [r3, #0]
 800a24a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a24e:	2b00      	cmp	r3, #0
 800a250:	d0f0      	beq.n	800a234 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800a252:	687b      	ldr	r3, [r7, #4]
 800a254:	689b      	ldr	r3, [r3, #8]
 800a256:	2b01      	cmp	r3, #1
 800a258:	d106      	bne.n	800a268 <HAL_RCC_OscConfig+0x584>
 800a25a:	4b7d      	ldr	r3, [pc, #500]	; (800a450 <HAL_RCC_OscConfig+0x76c>)
 800a25c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a25e:	4a7c      	ldr	r2, [pc, #496]	; (800a450 <HAL_RCC_OscConfig+0x76c>)
 800a260:	f043 0301 	orr.w	r3, r3, #1
 800a264:	6713      	str	r3, [r2, #112]	; 0x70
 800a266:	e02d      	b.n	800a2c4 <HAL_RCC_OscConfig+0x5e0>
 800a268:	687b      	ldr	r3, [r7, #4]
 800a26a:	689b      	ldr	r3, [r3, #8]
 800a26c:	2b00      	cmp	r3, #0
 800a26e:	d10c      	bne.n	800a28a <HAL_RCC_OscConfig+0x5a6>
 800a270:	4b77      	ldr	r3, [pc, #476]	; (800a450 <HAL_RCC_OscConfig+0x76c>)
 800a272:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a274:	4a76      	ldr	r2, [pc, #472]	; (800a450 <HAL_RCC_OscConfig+0x76c>)
 800a276:	f023 0301 	bic.w	r3, r3, #1
 800a27a:	6713      	str	r3, [r2, #112]	; 0x70
 800a27c:	4b74      	ldr	r3, [pc, #464]	; (800a450 <HAL_RCC_OscConfig+0x76c>)
 800a27e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a280:	4a73      	ldr	r2, [pc, #460]	; (800a450 <HAL_RCC_OscConfig+0x76c>)
 800a282:	f023 0304 	bic.w	r3, r3, #4
 800a286:	6713      	str	r3, [r2, #112]	; 0x70
 800a288:	e01c      	b.n	800a2c4 <HAL_RCC_OscConfig+0x5e0>
 800a28a:	687b      	ldr	r3, [r7, #4]
 800a28c:	689b      	ldr	r3, [r3, #8]
 800a28e:	2b05      	cmp	r3, #5
 800a290:	d10c      	bne.n	800a2ac <HAL_RCC_OscConfig+0x5c8>
 800a292:	4b6f      	ldr	r3, [pc, #444]	; (800a450 <HAL_RCC_OscConfig+0x76c>)
 800a294:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a296:	4a6e      	ldr	r2, [pc, #440]	; (800a450 <HAL_RCC_OscConfig+0x76c>)
 800a298:	f043 0304 	orr.w	r3, r3, #4
 800a29c:	6713      	str	r3, [r2, #112]	; 0x70
 800a29e:	4b6c      	ldr	r3, [pc, #432]	; (800a450 <HAL_RCC_OscConfig+0x76c>)
 800a2a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a2a2:	4a6b      	ldr	r2, [pc, #428]	; (800a450 <HAL_RCC_OscConfig+0x76c>)
 800a2a4:	f043 0301 	orr.w	r3, r3, #1
 800a2a8:	6713      	str	r3, [r2, #112]	; 0x70
 800a2aa:	e00b      	b.n	800a2c4 <HAL_RCC_OscConfig+0x5e0>
 800a2ac:	4b68      	ldr	r3, [pc, #416]	; (800a450 <HAL_RCC_OscConfig+0x76c>)
 800a2ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a2b0:	4a67      	ldr	r2, [pc, #412]	; (800a450 <HAL_RCC_OscConfig+0x76c>)
 800a2b2:	f023 0301 	bic.w	r3, r3, #1
 800a2b6:	6713      	str	r3, [r2, #112]	; 0x70
 800a2b8:	4b65      	ldr	r3, [pc, #404]	; (800a450 <HAL_RCC_OscConfig+0x76c>)
 800a2ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a2bc:	4a64      	ldr	r2, [pc, #400]	; (800a450 <HAL_RCC_OscConfig+0x76c>)
 800a2be:	f023 0304 	bic.w	r3, r3, #4
 800a2c2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800a2c4:	687b      	ldr	r3, [r7, #4]
 800a2c6:	689b      	ldr	r3, [r3, #8]
 800a2c8:	2b00      	cmp	r3, #0
 800a2ca:	d015      	beq.n	800a2f8 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a2cc:	f7f9 ff6e 	bl	80041ac <HAL_GetTick>
 800a2d0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800a2d2:	e00a      	b.n	800a2ea <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a2d4:	f7f9 ff6a 	bl	80041ac <HAL_GetTick>
 800a2d8:	4602      	mov	r2, r0
 800a2da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a2dc:	1ad3      	subs	r3, r2, r3
 800a2de:	f241 3288 	movw	r2, #5000	; 0x1388
 800a2e2:	4293      	cmp	r3, r2
 800a2e4:	d901      	bls.n	800a2ea <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 800a2e6:	2303      	movs	r3, #3
 800a2e8:	e14e      	b.n	800a588 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800a2ea:	4b59      	ldr	r3, [pc, #356]	; (800a450 <HAL_RCC_OscConfig+0x76c>)
 800a2ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a2ee:	f003 0302 	and.w	r3, r3, #2
 800a2f2:	2b00      	cmp	r3, #0
 800a2f4:	d0ee      	beq.n	800a2d4 <HAL_RCC_OscConfig+0x5f0>
 800a2f6:	e014      	b.n	800a322 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a2f8:	f7f9 ff58 	bl	80041ac <HAL_GetTick>
 800a2fc:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800a2fe:	e00a      	b.n	800a316 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a300:	f7f9 ff54 	bl	80041ac <HAL_GetTick>
 800a304:	4602      	mov	r2, r0
 800a306:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a308:	1ad3      	subs	r3, r2, r3
 800a30a:	f241 3288 	movw	r2, #5000	; 0x1388
 800a30e:	4293      	cmp	r3, r2
 800a310:	d901      	bls.n	800a316 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 800a312:	2303      	movs	r3, #3
 800a314:	e138      	b.n	800a588 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800a316:	4b4e      	ldr	r3, [pc, #312]	; (800a450 <HAL_RCC_OscConfig+0x76c>)
 800a318:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a31a:	f003 0302 	and.w	r3, r3, #2
 800a31e:	2b00      	cmp	r3, #0
 800a320:	d1ee      	bne.n	800a300 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800a322:	687b      	ldr	r3, [r7, #4]
 800a324:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a326:	2b00      	cmp	r3, #0
 800a328:	f000 812d 	beq.w	800a586 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800a32c:	4b48      	ldr	r3, [pc, #288]	; (800a450 <HAL_RCC_OscConfig+0x76c>)
 800a32e:	691b      	ldr	r3, [r3, #16]
 800a330:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a334:	2b18      	cmp	r3, #24
 800a336:	f000 80bd 	beq.w	800a4b4 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800a33a:	687b      	ldr	r3, [r7, #4]
 800a33c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a33e:	2b02      	cmp	r3, #2
 800a340:	f040 809e 	bne.w	800a480 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a344:	4b42      	ldr	r3, [pc, #264]	; (800a450 <HAL_RCC_OscConfig+0x76c>)
 800a346:	681b      	ldr	r3, [r3, #0]
 800a348:	4a41      	ldr	r2, [pc, #260]	; (800a450 <HAL_RCC_OscConfig+0x76c>)
 800a34a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800a34e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a350:	f7f9 ff2c 	bl	80041ac <HAL_GetTick>
 800a354:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800a356:	e008      	b.n	800a36a <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a358:	f7f9 ff28 	bl	80041ac <HAL_GetTick>
 800a35c:	4602      	mov	r2, r0
 800a35e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a360:	1ad3      	subs	r3, r2, r3
 800a362:	2b02      	cmp	r3, #2
 800a364:	d901      	bls.n	800a36a <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 800a366:	2303      	movs	r3, #3
 800a368:	e10e      	b.n	800a588 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800a36a:	4b39      	ldr	r3, [pc, #228]	; (800a450 <HAL_RCC_OscConfig+0x76c>)
 800a36c:	681b      	ldr	r3, [r3, #0]
 800a36e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a372:	2b00      	cmp	r3, #0
 800a374:	d1f0      	bne.n	800a358 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800a376:	4b36      	ldr	r3, [pc, #216]	; (800a450 <HAL_RCC_OscConfig+0x76c>)
 800a378:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a37a:	4b37      	ldr	r3, [pc, #220]	; (800a458 <HAL_RCC_OscConfig+0x774>)
 800a37c:	4013      	ands	r3, r2
 800a37e:	687a      	ldr	r2, [r7, #4]
 800a380:	6a91      	ldr	r1, [r2, #40]	; 0x28
 800a382:	687a      	ldr	r2, [r7, #4]
 800a384:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800a386:	0112      	lsls	r2, r2, #4
 800a388:	430a      	orrs	r2, r1
 800a38a:	4931      	ldr	r1, [pc, #196]	; (800a450 <HAL_RCC_OscConfig+0x76c>)
 800a38c:	4313      	orrs	r3, r2
 800a38e:	628b      	str	r3, [r1, #40]	; 0x28
 800a390:	687b      	ldr	r3, [r7, #4]
 800a392:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a394:	3b01      	subs	r3, #1
 800a396:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800a39a:	687b      	ldr	r3, [r7, #4]
 800a39c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a39e:	3b01      	subs	r3, #1
 800a3a0:	025b      	lsls	r3, r3, #9
 800a3a2:	b29b      	uxth	r3, r3
 800a3a4:	431a      	orrs	r2, r3
 800a3a6:	687b      	ldr	r3, [r7, #4]
 800a3a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a3aa:	3b01      	subs	r3, #1
 800a3ac:	041b      	lsls	r3, r3, #16
 800a3ae:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800a3b2:	431a      	orrs	r2, r3
 800a3b4:	687b      	ldr	r3, [r7, #4]
 800a3b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a3b8:	3b01      	subs	r3, #1
 800a3ba:	061b      	lsls	r3, r3, #24
 800a3bc:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800a3c0:	4923      	ldr	r1, [pc, #140]	; (800a450 <HAL_RCC_OscConfig+0x76c>)
 800a3c2:	4313      	orrs	r3, r2
 800a3c4:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 800a3c6:	4b22      	ldr	r3, [pc, #136]	; (800a450 <HAL_RCC_OscConfig+0x76c>)
 800a3c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a3ca:	4a21      	ldr	r2, [pc, #132]	; (800a450 <HAL_RCC_OscConfig+0x76c>)
 800a3cc:	f023 0301 	bic.w	r3, r3, #1
 800a3d0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800a3d2:	4b1f      	ldr	r3, [pc, #124]	; (800a450 <HAL_RCC_OscConfig+0x76c>)
 800a3d4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a3d6:	4b21      	ldr	r3, [pc, #132]	; (800a45c <HAL_RCC_OscConfig+0x778>)
 800a3d8:	4013      	ands	r3, r2
 800a3da:	687a      	ldr	r2, [r7, #4]
 800a3dc:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800a3de:	00d2      	lsls	r2, r2, #3
 800a3e0:	491b      	ldr	r1, [pc, #108]	; (800a450 <HAL_RCC_OscConfig+0x76c>)
 800a3e2:	4313      	orrs	r3, r2
 800a3e4:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800a3e6:	4b1a      	ldr	r3, [pc, #104]	; (800a450 <HAL_RCC_OscConfig+0x76c>)
 800a3e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a3ea:	f023 020c 	bic.w	r2, r3, #12
 800a3ee:	687b      	ldr	r3, [r7, #4]
 800a3f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a3f2:	4917      	ldr	r1, [pc, #92]	; (800a450 <HAL_RCC_OscConfig+0x76c>)
 800a3f4:	4313      	orrs	r3, r2
 800a3f6:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800a3f8:	4b15      	ldr	r3, [pc, #84]	; (800a450 <HAL_RCC_OscConfig+0x76c>)
 800a3fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a3fc:	f023 0202 	bic.w	r2, r3, #2
 800a400:	687b      	ldr	r3, [r7, #4]
 800a402:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a404:	4912      	ldr	r1, [pc, #72]	; (800a450 <HAL_RCC_OscConfig+0x76c>)
 800a406:	4313      	orrs	r3, r2
 800a408:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800a40a:	4b11      	ldr	r3, [pc, #68]	; (800a450 <HAL_RCC_OscConfig+0x76c>)
 800a40c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a40e:	4a10      	ldr	r2, [pc, #64]	; (800a450 <HAL_RCC_OscConfig+0x76c>)
 800a410:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a414:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a416:	4b0e      	ldr	r3, [pc, #56]	; (800a450 <HAL_RCC_OscConfig+0x76c>)
 800a418:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a41a:	4a0d      	ldr	r2, [pc, #52]	; (800a450 <HAL_RCC_OscConfig+0x76c>)
 800a41c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a420:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800a422:	4b0b      	ldr	r3, [pc, #44]	; (800a450 <HAL_RCC_OscConfig+0x76c>)
 800a424:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a426:	4a0a      	ldr	r2, [pc, #40]	; (800a450 <HAL_RCC_OscConfig+0x76c>)
 800a428:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800a42c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 800a42e:	4b08      	ldr	r3, [pc, #32]	; (800a450 <HAL_RCC_OscConfig+0x76c>)
 800a430:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a432:	4a07      	ldr	r2, [pc, #28]	; (800a450 <HAL_RCC_OscConfig+0x76c>)
 800a434:	f043 0301 	orr.w	r3, r3, #1
 800a438:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800a43a:	4b05      	ldr	r3, [pc, #20]	; (800a450 <HAL_RCC_OscConfig+0x76c>)
 800a43c:	681b      	ldr	r3, [r3, #0]
 800a43e:	4a04      	ldr	r2, [pc, #16]	; (800a450 <HAL_RCC_OscConfig+0x76c>)
 800a440:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800a444:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a446:	f7f9 feb1 	bl	80041ac <HAL_GetTick>
 800a44a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800a44c:	e011      	b.n	800a472 <HAL_RCC_OscConfig+0x78e>
 800a44e:	bf00      	nop
 800a450:	58024400 	.word	0x58024400
 800a454:	58024800 	.word	0x58024800
 800a458:	fffffc0c 	.word	0xfffffc0c
 800a45c:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a460:	f7f9 fea4 	bl	80041ac <HAL_GetTick>
 800a464:	4602      	mov	r2, r0
 800a466:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a468:	1ad3      	subs	r3, r2, r3
 800a46a:	2b02      	cmp	r3, #2
 800a46c:	d901      	bls.n	800a472 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 800a46e:	2303      	movs	r3, #3
 800a470:	e08a      	b.n	800a588 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800a472:	4b47      	ldr	r3, [pc, #284]	; (800a590 <HAL_RCC_OscConfig+0x8ac>)
 800a474:	681b      	ldr	r3, [r3, #0]
 800a476:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a47a:	2b00      	cmp	r3, #0
 800a47c:	d0f0      	beq.n	800a460 <HAL_RCC_OscConfig+0x77c>
 800a47e:	e082      	b.n	800a586 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a480:	4b43      	ldr	r3, [pc, #268]	; (800a590 <HAL_RCC_OscConfig+0x8ac>)
 800a482:	681b      	ldr	r3, [r3, #0]
 800a484:	4a42      	ldr	r2, [pc, #264]	; (800a590 <HAL_RCC_OscConfig+0x8ac>)
 800a486:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800a48a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a48c:	f7f9 fe8e 	bl	80041ac <HAL_GetTick>
 800a490:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800a492:	e008      	b.n	800a4a6 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a494:	f7f9 fe8a 	bl	80041ac <HAL_GetTick>
 800a498:	4602      	mov	r2, r0
 800a49a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a49c:	1ad3      	subs	r3, r2, r3
 800a49e:	2b02      	cmp	r3, #2
 800a4a0:	d901      	bls.n	800a4a6 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 800a4a2:	2303      	movs	r3, #3
 800a4a4:	e070      	b.n	800a588 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800a4a6:	4b3a      	ldr	r3, [pc, #232]	; (800a590 <HAL_RCC_OscConfig+0x8ac>)
 800a4a8:	681b      	ldr	r3, [r3, #0]
 800a4aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a4ae:	2b00      	cmp	r3, #0
 800a4b0:	d1f0      	bne.n	800a494 <HAL_RCC_OscConfig+0x7b0>
 800a4b2:	e068      	b.n	800a586 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800a4b4:	4b36      	ldr	r3, [pc, #216]	; (800a590 <HAL_RCC_OscConfig+0x8ac>)
 800a4b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a4b8:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800a4ba:	4b35      	ldr	r3, [pc, #212]	; (800a590 <HAL_RCC_OscConfig+0x8ac>)
 800a4bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a4be:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800a4c0:	687b      	ldr	r3, [r7, #4]
 800a4c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a4c4:	2b01      	cmp	r3, #1
 800a4c6:	d031      	beq.n	800a52c <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a4c8:	693b      	ldr	r3, [r7, #16]
 800a4ca:	f003 0203 	and.w	r2, r3, #3
 800a4ce:	687b      	ldr	r3, [r7, #4]
 800a4d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800a4d2:	429a      	cmp	r2, r3
 800a4d4:	d12a      	bne.n	800a52c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800a4d6:	693b      	ldr	r3, [r7, #16]
 800a4d8:	091b      	lsrs	r3, r3, #4
 800a4da:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800a4de:	687b      	ldr	r3, [r7, #4]
 800a4e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a4e2:	429a      	cmp	r2, r3
 800a4e4:	d122      	bne.n	800a52c <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800a4e6:	68fb      	ldr	r3, [r7, #12]
 800a4e8:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800a4ec:	687b      	ldr	r3, [r7, #4]
 800a4ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a4f0:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800a4f2:	429a      	cmp	r2, r3
 800a4f4:	d11a      	bne.n	800a52c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800a4f6:	68fb      	ldr	r3, [r7, #12]
 800a4f8:	0a5b      	lsrs	r3, r3, #9
 800a4fa:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a4fe:	687b      	ldr	r3, [r7, #4]
 800a500:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a502:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800a504:	429a      	cmp	r2, r3
 800a506:	d111      	bne.n	800a52c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800a508:	68fb      	ldr	r3, [r7, #12]
 800a50a:	0c1b      	lsrs	r3, r3, #16
 800a50c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a510:	687b      	ldr	r3, [r7, #4]
 800a512:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a514:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800a516:	429a      	cmp	r2, r3
 800a518:	d108      	bne.n	800a52c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800a51a:	68fb      	ldr	r3, [r7, #12]
 800a51c:	0e1b      	lsrs	r3, r3, #24
 800a51e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800a522:	687b      	ldr	r3, [r7, #4]
 800a524:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a526:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800a528:	429a      	cmp	r2, r3
 800a52a:	d001      	beq.n	800a530 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 800a52c:	2301      	movs	r3, #1
 800a52e:	e02b      	b.n	800a588 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 800a530:	4b17      	ldr	r3, [pc, #92]	; (800a590 <HAL_RCC_OscConfig+0x8ac>)
 800a532:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a534:	08db      	lsrs	r3, r3, #3
 800a536:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800a53a:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 800a53c:	687b      	ldr	r3, [r7, #4]
 800a53e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a540:	693a      	ldr	r2, [r7, #16]
 800a542:	429a      	cmp	r2, r3
 800a544:	d01f      	beq.n	800a586 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 800a546:	4b12      	ldr	r3, [pc, #72]	; (800a590 <HAL_RCC_OscConfig+0x8ac>)
 800a548:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a54a:	4a11      	ldr	r2, [pc, #68]	; (800a590 <HAL_RCC_OscConfig+0x8ac>)
 800a54c:	f023 0301 	bic.w	r3, r3, #1
 800a550:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800a552:	f7f9 fe2b 	bl	80041ac <HAL_GetTick>
 800a556:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 800a558:	bf00      	nop
 800a55a:	f7f9 fe27 	bl	80041ac <HAL_GetTick>
 800a55e:	4602      	mov	r2, r0
 800a560:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a562:	4293      	cmp	r3, r2
 800a564:	d0f9      	beq.n	800a55a <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800a566:	4b0a      	ldr	r3, [pc, #40]	; (800a590 <HAL_RCC_OscConfig+0x8ac>)
 800a568:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a56a:	4b0a      	ldr	r3, [pc, #40]	; (800a594 <HAL_RCC_OscConfig+0x8b0>)
 800a56c:	4013      	ands	r3, r2
 800a56e:	687a      	ldr	r2, [r7, #4]
 800a570:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800a572:	00d2      	lsls	r2, r2, #3
 800a574:	4906      	ldr	r1, [pc, #24]	; (800a590 <HAL_RCC_OscConfig+0x8ac>)
 800a576:	4313      	orrs	r3, r2
 800a578:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 800a57a:	4b05      	ldr	r3, [pc, #20]	; (800a590 <HAL_RCC_OscConfig+0x8ac>)
 800a57c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a57e:	4a04      	ldr	r2, [pc, #16]	; (800a590 <HAL_RCC_OscConfig+0x8ac>)
 800a580:	f043 0301 	orr.w	r3, r3, #1
 800a584:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 800a586:	2300      	movs	r3, #0
}
 800a588:	4618      	mov	r0, r3
 800a58a:	3730      	adds	r7, #48	; 0x30
 800a58c:	46bd      	mov	sp, r7
 800a58e:	bd80      	pop	{r7, pc}
 800a590:	58024400 	.word	0x58024400
 800a594:	ffff0007 	.word	0xffff0007

0800a598 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800a598:	b580      	push	{r7, lr}
 800a59a:	b086      	sub	sp, #24
 800a59c:	af00      	add	r7, sp, #0
 800a59e:	6078      	str	r0, [r7, #4]
 800a5a0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800a5a2:	687b      	ldr	r3, [r7, #4]
 800a5a4:	2b00      	cmp	r3, #0
 800a5a6:	d101      	bne.n	800a5ac <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800a5a8:	2301      	movs	r3, #1
 800a5aa:	e19c      	b.n	800a8e6 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800a5ac:	4b8a      	ldr	r3, [pc, #552]	; (800a7d8 <HAL_RCC_ClockConfig+0x240>)
 800a5ae:	681b      	ldr	r3, [r3, #0]
 800a5b0:	f003 030f 	and.w	r3, r3, #15
 800a5b4:	683a      	ldr	r2, [r7, #0]
 800a5b6:	429a      	cmp	r2, r3
 800a5b8:	d910      	bls.n	800a5dc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a5ba:	4b87      	ldr	r3, [pc, #540]	; (800a7d8 <HAL_RCC_ClockConfig+0x240>)
 800a5bc:	681b      	ldr	r3, [r3, #0]
 800a5be:	f023 020f 	bic.w	r2, r3, #15
 800a5c2:	4985      	ldr	r1, [pc, #532]	; (800a7d8 <HAL_RCC_ClockConfig+0x240>)
 800a5c4:	683b      	ldr	r3, [r7, #0]
 800a5c6:	4313      	orrs	r3, r2
 800a5c8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800a5ca:	4b83      	ldr	r3, [pc, #524]	; (800a7d8 <HAL_RCC_ClockConfig+0x240>)
 800a5cc:	681b      	ldr	r3, [r3, #0]
 800a5ce:	f003 030f 	and.w	r3, r3, #15
 800a5d2:	683a      	ldr	r2, [r7, #0]
 800a5d4:	429a      	cmp	r2, r3
 800a5d6:	d001      	beq.n	800a5dc <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800a5d8:	2301      	movs	r3, #1
 800a5da:	e184      	b.n	800a8e6 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800a5dc:	687b      	ldr	r3, [r7, #4]
 800a5de:	681b      	ldr	r3, [r3, #0]
 800a5e0:	f003 0304 	and.w	r3, r3, #4
 800a5e4:	2b00      	cmp	r3, #0
 800a5e6:	d010      	beq.n	800a60a <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800a5e8:	687b      	ldr	r3, [r7, #4]
 800a5ea:	691a      	ldr	r2, [r3, #16]
 800a5ec:	4b7b      	ldr	r3, [pc, #492]	; (800a7dc <HAL_RCC_ClockConfig+0x244>)
 800a5ee:	699b      	ldr	r3, [r3, #24]
 800a5f0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a5f4:	429a      	cmp	r2, r3
 800a5f6:	d908      	bls.n	800a60a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800a5f8:	4b78      	ldr	r3, [pc, #480]	; (800a7dc <HAL_RCC_ClockConfig+0x244>)
 800a5fa:	699b      	ldr	r3, [r3, #24]
 800a5fc:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800a600:	687b      	ldr	r3, [r7, #4]
 800a602:	691b      	ldr	r3, [r3, #16]
 800a604:	4975      	ldr	r1, [pc, #468]	; (800a7dc <HAL_RCC_ClockConfig+0x244>)
 800a606:	4313      	orrs	r3, r2
 800a608:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a60a:	687b      	ldr	r3, [r7, #4]
 800a60c:	681b      	ldr	r3, [r3, #0]
 800a60e:	f003 0308 	and.w	r3, r3, #8
 800a612:	2b00      	cmp	r3, #0
 800a614:	d010      	beq.n	800a638 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800a616:	687b      	ldr	r3, [r7, #4]
 800a618:	695a      	ldr	r2, [r3, #20]
 800a61a:	4b70      	ldr	r3, [pc, #448]	; (800a7dc <HAL_RCC_ClockConfig+0x244>)
 800a61c:	69db      	ldr	r3, [r3, #28]
 800a61e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a622:	429a      	cmp	r2, r3
 800a624:	d908      	bls.n	800a638 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800a626:	4b6d      	ldr	r3, [pc, #436]	; (800a7dc <HAL_RCC_ClockConfig+0x244>)
 800a628:	69db      	ldr	r3, [r3, #28]
 800a62a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800a62e:	687b      	ldr	r3, [r7, #4]
 800a630:	695b      	ldr	r3, [r3, #20]
 800a632:	496a      	ldr	r1, [pc, #424]	; (800a7dc <HAL_RCC_ClockConfig+0x244>)
 800a634:	4313      	orrs	r3, r2
 800a636:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a638:	687b      	ldr	r3, [r7, #4]
 800a63a:	681b      	ldr	r3, [r3, #0]
 800a63c:	f003 0310 	and.w	r3, r3, #16
 800a640:	2b00      	cmp	r3, #0
 800a642:	d010      	beq.n	800a666 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800a644:	687b      	ldr	r3, [r7, #4]
 800a646:	699a      	ldr	r2, [r3, #24]
 800a648:	4b64      	ldr	r3, [pc, #400]	; (800a7dc <HAL_RCC_ClockConfig+0x244>)
 800a64a:	69db      	ldr	r3, [r3, #28]
 800a64c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800a650:	429a      	cmp	r2, r3
 800a652:	d908      	bls.n	800a666 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800a654:	4b61      	ldr	r3, [pc, #388]	; (800a7dc <HAL_RCC_ClockConfig+0x244>)
 800a656:	69db      	ldr	r3, [r3, #28]
 800a658:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800a65c:	687b      	ldr	r3, [r7, #4]
 800a65e:	699b      	ldr	r3, [r3, #24]
 800a660:	495e      	ldr	r1, [pc, #376]	; (800a7dc <HAL_RCC_ClockConfig+0x244>)
 800a662:	4313      	orrs	r3, r2
 800a664:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800a666:	687b      	ldr	r3, [r7, #4]
 800a668:	681b      	ldr	r3, [r3, #0]
 800a66a:	f003 0320 	and.w	r3, r3, #32
 800a66e:	2b00      	cmp	r3, #0
 800a670:	d010      	beq.n	800a694 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800a672:	687b      	ldr	r3, [r7, #4]
 800a674:	69da      	ldr	r2, [r3, #28]
 800a676:	4b59      	ldr	r3, [pc, #356]	; (800a7dc <HAL_RCC_ClockConfig+0x244>)
 800a678:	6a1b      	ldr	r3, [r3, #32]
 800a67a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a67e:	429a      	cmp	r2, r3
 800a680:	d908      	bls.n	800a694 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800a682:	4b56      	ldr	r3, [pc, #344]	; (800a7dc <HAL_RCC_ClockConfig+0x244>)
 800a684:	6a1b      	ldr	r3, [r3, #32]
 800a686:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800a68a:	687b      	ldr	r3, [r7, #4]
 800a68c:	69db      	ldr	r3, [r3, #28]
 800a68e:	4953      	ldr	r1, [pc, #332]	; (800a7dc <HAL_RCC_ClockConfig+0x244>)
 800a690:	4313      	orrs	r3, r2
 800a692:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800a694:	687b      	ldr	r3, [r7, #4]
 800a696:	681b      	ldr	r3, [r3, #0]
 800a698:	f003 0302 	and.w	r3, r3, #2
 800a69c:	2b00      	cmp	r3, #0
 800a69e:	d010      	beq.n	800a6c2 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800a6a0:	687b      	ldr	r3, [r7, #4]
 800a6a2:	68da      	ldr	r2, [r3, #12]
 800a6a4:	4b4d      	ldr	r3, [pc, #308]	; (800a7dc <HAL_RCC_ClockConfig+0x244>)
 800a6a6:	699b      	ldr	r3, [r3, #24]
 800a6a8:	f003 030f 	and.w	r3, r3, #15
 800a6ac:	429a      	cmp	r2, r3
 800a6ae:	d908      	bls.n	800a6c2 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800a6b0:	4b4a      	ldr	r3, [pc, #296]	; (800a7dc <HAL_RCC_ClockConfig+0x244>)
 800a6b2:	699b      	ldr	r3, [r3, #24]
 800a6b4:	f023 020f 	bic.w	r2, r3, #15
 800a6b8:	687b      	ldr	r3, [r7, #4]
 800a6ba:	68db      	ldr	r3, [r3, #12]
 800a6bc:	4947      	ldr	r1, [pc, #284]	; (800a7dc <HAL_RCC_ClockConfig+0x244>)
 800a6be:	4313      	orrs	r3, r2
 800a6c0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800a6c2:	687b      	ldr	r3, [r7, #4]
 800a6c4:	681b      	ldr	r3, [r3, #0]
 800a6c6:	f003 0301 	and.w	r3, r3, #1
 800a6ca:	2b00      	cmp	r3, #0
 800a6cc:	d055      	beq.n	800a77a <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800a6ce:	4b43      	ldr	r3, [pc, #268]	; (800a7dc <HAL_RCC_ClockConfig+0x244>)
 800a6d0:	699b      	ldr	r3, [r3, #24]
 800a6d2:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800a6d6:	687b      	ldr	r3, [r7, #4]
 800a6d8:	689b      	ldr	r3, [r3, #8]
 800a6da:	4940      	ldr	r1, [pc, #256]	; (800a7dc <HAL_RCC_ClockConfig+0x244>)
 800a6dc:	4313      	orrs	r3, r2
 800a6de:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800a6e0:	687b      	ldr	r3, [r7, #4]
 800a6e2:	685b      	ldr	r3, [r3, #4]
 800a6e4:	2b02      	cmp	r3, #2
 800a6e6:	d107      	bne.n	800a6f8 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800a6e8:	4b3c      	ldr	r3, [pc, #240]	; (800a7dc <HAL_RCC_ClockConfig+0x244>)
 800a6ea:	681b      	ldr	r3, [r3, #0]
 800a6ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a6f0:	2b00      	cmp	r3, #0
 800a6f2:	d121      	bne.n	800a738 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800a6f4:	2301      	movs	r3, #1
 800a6f6:	e0f6      	b.n	800a8e6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800a6f8:	687b      	ldr	r3, [r7, #4]
 800a6fa:	685b      	ldr	r3, [r3, #4]
 800a6fc:	2b03      	cmp	r3, #3
 800a6fe:	d107      	bne.n	800a710 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800a700:	4b36      	ldr	r3, [pc, #216]	; (800a7dc <HAL_RCC_ClockConfig+0x244>)
 800a702:	681b      	ldr	r3, [r3, #0]
 800a704:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a708:	2b00      	cmp	r3, #0
 800a70a:	d115      	bne.n	800a738 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800a70c:	2301      	movs	r3, #1
 800a70e:	e0ea      	b.n	800a8e6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800a710:	687b      	ldr	r3, [r7, #4]
 800a712:	685b      	ldr	r3, [r3, #4]
 800a714:	2b01      	cmp	r3, #1
 800a716:	d107      	bne.n	800a728 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800a718:	4b30      	ldr	r3, [pc, #192]	; (800a7dc <HAL_RCC_ClockConfig+0x244>)
 800a71a:	681b      	ldr	r3, [r3, #0]
 800a71c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a720:	2b00      	cmp	r3, #0
 800a722:	d109      	bne.n	800a738 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800a724:	2301      	movs	r3, #1
 800a726:	e0de      	b.n	800a8e6 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800a728:	4b2c      	ldr	r3, [pc, #176]	; (800a7dc <HAL_RCC_ClockConfig+0x244>)
 800a72a:	681b      	ldr	r3, [r3, #0]
 800a72c:	f003 0304 	and.w	r3, r3, #4
 800a730:	2b00      	cmp	r3, #0
 800a732:	d101      	bne.n	800a738 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800a734:	2301      	movs	r3, #1
 800a736:	e0d6      	b.n	800a8e6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800a738:	4b28      	ldr	r3, [pc, #160]	; (800a7dc <HAL_RCC_ClockConfig+0x244>)
 800a73a:	691b      	ldr	r3, [r3, #16]
 800a73c:	f023 0207 	bic.w	r2, r3, #7
 800a740:	687b      	ldr	r3, [r7, #4]
 800a742:	685b      	ldr	r3, [r3, #4]
 800a744:	4925      	ldr	r1, [pc, #148]	; (800a7dc <HAL_RCC_ClockConfig+0x244>)
 800a746:	4313      	orrs	r3, r2
 800a748:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a74a:	f7f9 fd2f 	bl	80041ac <HAL_GetTick>
 800a74e:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a750:	e00a      	b.n	800a768 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800a752:	f7f9 fd2b 	bl	80041ac <HAL_GetTick>
 800a756:	4602      	mov	r2, r0
 800a758:	697b      	ldr	r3, [r7, #20]
 800a75a:	1ad3      	subs	r3, r2, r3
 800a75c:	f241 3288 	movw	r2, #5000	; 0x1388
 800a760:	4293      	cmp	r3, r2
 800a762:	d901      	bls.n	800a768 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 800a764:	2303      	movs	r3, #3
 800a766:	e0be      	b.n	800a8e6 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a768:	4b1c      	ldr	r3, [pc, #112]	; (800a7dc <HAL_RCC_ClockConfig+0x244>)
 800a76a:	691b      	ldr	r3, [r3, #16]
 800a76c:	f003 0238 	and.w	r2, r3, #56	; 0x38
 800a770:	687b      	ldr	r3, [r7, #4]
 800a772:	685b      	ldr	r3, [r3, #4]
 800a774:	00db      	lsls	r3, r3, #3
 800a776:	429a      	cmp	r2, r3
 800a778:	d1eb      	bne.n	800a752 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800a77a:	687b      	ldr	r3, [r7, #4]
 800a77c:	681b      	ldr	r3, [r3, #0]
 800a77e:	f003 0302 	and.w	r3, r3, #2
 800a782:	2b00      	cmp	r3, #0
 800a784:	d010      	beq.n	800a7a8 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800a786:	687b      	ldr	r3, [r7, #4]
 800a788:	68da      	ldr	r2, [r3, #12]
 800a78a:	4b14      	ldr	r3, [pc, #80]	; (800a7dc <HAL_RCC_ClockConfig+0x244>)
 800a78c:	699b      	ldr	r3, [r3, #24]
 800a78e:	f003 030f 	and.w	r3, r3, #15
 800a792:	429a      	cmp	r2, r3
 800a794:	d208      	bcs.n	800a7a8 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800a796:	4b11      	ldr	r3, [pc, #68]	; (800a7dc <HAL_RCC_ClockConfig+0x244>)
 800a798:	699b      	ldr	r3, [r3, #24]
 800a79a:	f023 020f 	bic.w	r2, r3, #15
 800a79e:	687b      	ldr	r3, [r7, #4]
 800a7a0:	68db      	ldr	r3, [r3, #12]
 800a7a2:	490e      	ldr	r1, [pc, #56]	; (800a7dc <HAL_RCC_ClockConfig+0x244>)
 800a7a4:	4313      	orrs	r3, r2
 800a7a6:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800a7a8:	4b0b      	ldr	r3, [pc, #44]	; (800a7d8 <HAL_RCC_ClockConfig+0x240>)
 800a7aa:	681b      	ldr	r3, [r3, #0]
 800a7ac:	f003 030f 	and.w	r3, r3, #15
 800a7b0:	683a      	ldr	r2, [r7, #0]
 800a7b2:	429a      	cmp	r2, r3
 800a7b4:	d214      	bcs.n	800a7e0 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a7b6:	4b08      	ldr	r3, [pc, #32]	; (800a7d8 <HAL_RCC_ClockConfig+0x240>)
 800a7b8:	681b      	ldr	r3, [r3, #0]
 800a7ba:	f023 020f 	bic.w	r2, r3, #15
 800a7be:	4906      	ldr	r1, [pc, #24]	; (800a7d8 <HAL_RCC_ClockConfig+0x240>)
 800a7c0:	683b      	ldr	r3, [r7, #0]
 800a7c2:	4313      	orrs	r3, r2
 800a7c4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800a7c6:	4b04      	ldr	r3, [pc, #16]	; (800a7d8 <HAL_RCC_ClockConfig+0x240>)
 800a7c8:	681b      	ldr	r3, [r3, #0]
 800a7ca:	f003 030f 	and.w	r3, r3, #15
 800a7ce:	683a      	ldr	r2, [r7, #0]
 800a7d0:	429a      	cmp	r2, r3
 800a7d2:	d005      	beq.n	800a7e0 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800a7d4:	2301      	movs	r3, #1
 800a7d6:	e086      	b.n	800a8e6 <HAL_RCC_ClockConfig+0x34e>
 800a7d8:	52002000 	.word	0x52002000
 800a7dc:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800a7e0:	687b      	ldr	r3, [r7, #4]
 800a7e2:	681b      	ldr	r3, [r3, #0]
 800a7e4:	f003 0304 	and.w	r3, r3, #4
 800a7e8:	2b00      	cmp	r3, #0
 800a7ea:	d010      	beq.n	800a80e <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800a7ec:	687b      	ldr	r3, [r7, #4]
 800a7ee:	691a      	ldr	r2, [r3, #16]
 800a7f0:	4b3f      	ldr	r3, [pc, #252]	; (800a8f0 <HAL_RCC_ClockConfig+0x358>)
 800a7f2:	699b      	ldr	r3, [r3, #24]
 800a7f4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a7f8:	429a      	cmp	r2, r3
 800a7fa:	d208      	bcs.n	800a80e <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800a7fc:	4b3c      	ldr	r3, [pc, #240]	; (800a8f0 <HAL_RCC_ClockConfig+0x358>)
 800a7fe:	699b      	ldr	r3, [r3, #24]
 800a800:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800a804:	687b      	ldr	r3, [r7, #4]
 800a806:	691b      	ldr	r3, [r3, #16]
 800a808:	4939      	ldr	r1, [pc, #228]	; (800a8f0 <HAL_RCC_ClockConfig+0x358>)
 800a80a:	4313      	orrs	r3, r2
 800a80c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a80e:	687b      	ldr	r3, [r7, #4]
 800a810:	681b      	ldr	r3, [r3, #0]
 800a812:	f003 0308 	and.w	r3, r3, #8
 800a816:	2b00      	cmp	r3, #0
 800a818:	d010      	beq.n	800a83c <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800a81a:	687b      	ldr	r3, [r7, #4]
 800a81c:	695a      	ldr	r2, [r3, #20]
 800a81e:	4b34      	ldr	r3, [pc, #208]	; (800a8f0 <HAL_RCC_ClockConfig+0x358>)
 800a820:	69db      	ldr	r3, [r3, #28]
 800a822:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a826:	429a      	cmp	r2, r3
 800a828:	d208      	bcs.n	800a83c <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800a82a:	4b31      	ldr	r3, [pc, #196]	; (800a8f0 <HAL_RCC_ClockConfig+0x358>)
 800a82c:	69db      	ldr	r3, [r3, #28]
 800a82e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800a832:	687b      	ldr	r3, [r7, #4]
 800a834:	695b      	ldr	r3, [r3, #20]
 800a836:	492e      	ldr	r1, [pc, #184]	; (800a8f0 <HAL_RCC_ClockConfig+0x358>)
 800a838:	4313      	orrs	r3, r2
 800a83a:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a83c:	687b      	ldr	r3, [r7, #4]
 800a83e:	681b      	ldr	r3, [r3, #0]
 800a840:	f003 0310 	and.w	r3, r3, #16
 800a844:	2b00      	cmp	r3, #0
 800a846:	d010      	beq.n	800a86a <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800a848:	687b      	ldr	r3, [r7, #4]
 800a84a:	699a      	ldr	r2, [r3, #24]
 800a84c:	4b28      	ldr	r3, [pc, #160]	; (800a8f0 <HAL_RCC_ClockConfig+0x358>)
 800a84e:	69db      	ldr	r3, [r3, #28]
 800a850:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800a854:	429a      	cmp	r2, r3
 800a856:	d208      	bcs.n	800a86a <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800a858:	4b25      	ldr	r3, [pc, #148]	; (800a8f0 <HAL_RCC_ClockConfig+0x358>)
 800a85a:	69db      	ldr	r3, [r3, #28]
 800a85c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800a860:	687b      	ldr	r3, [r7, #4]
 800a862:	699b      	ldr	r3, [r3, #24]
 800a864:	4922      	ldr	r1, [pc, #136]	; (800a8f0 <HAL_RCC_ClockConfig+0x358>)
 800a866:	4313      	orrs	r3, r2
 800a868:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800a86a:	687b      	ldr	r3, [r7, #4]
 800a86c:	681b      	ldr	r3, [r3, #0]
 800a86e:	f003 0320 	and.w	r3, r3, #32
 800a872:	2b00      	cmp	r3, #0
 800a874:	d010      	beq.n	800a898 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800a876:	687b      	ldr	r3, [r7, #4]
 800a878:	69da      	ldr	r2, [r3, #28]
 800a87a:	4b1d      	ldr	r3, [pc, #116]	; (800a8f0 <HAL_RCC_ClockConfig+0x358>)
 800a87c:	6a1b      	ldr	r3, [r3, #32]
 800a87e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800a882:	429a      	cmp	r2, r3
 800a884:	d208      	bcs.n	800a898 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800a886:	4b1a      	ldr	r3, [pc, #104]	; (800a8f0 <HAL_RCC_ClockConfig+0x358>)
 800a888:	6a1b      	ldr	r3, [r3, #32]
 800a88a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800a88e:	687b      	ldr	r3, [r7, #4]
 800a890:	69db      	ldr	r3, [r3, #28]
 800a892:	4917      	ldr	r1, [pc, #92]	; (800a8f0 <HAL_RCC_ClockConfig+0x358>)
 800a894:	4313      	orrs	r3, r2
 800a896:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800a898:	f000 f844 	bl	800a924 <HAL_RCC_GetSysClockFreq>
 800a89c:	4602      	mov	r2, r0
 800a89e:	4b14      	ldr	r3, [pc, #80]	; (800a8f0 <HAL_RCC_ClockConfig+0x358>)
 800a8a0:	699b      	ldr	r3, [r3, #24]
 800a8a2:	0a1b      	lsrs	r3, r3, #8
 800a8a4:	f003 030f 	and.w	r3, r3, #15
 800a8a8:	4912      	ldr	r1, [pc, #72]	; (800a8f4 <HAL_RCC_ClockConfig+0x35c>)
 800a8aa:	5ccb      	ldrb	r3, [r1, r3]
 800a8ac:	f003 031f 	and.w	r3, r3, #31
 800a8b0:	fa22 f303 	lsr.w	r3, r2, r3
 800a8b4:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800a8b6:	4b0e      	ldr	r3, [pc, #56]	; (800a8f0 <HAL_RCC_ClockConfig+0x358>)
 800a8b8:	699b      	ldr	r3, [r3, #24]
 800a8ba:	f003 030f 	and.w	r3, r3, #15
 800a8be:	4a0d      	ldr	r2, [pc, #52]	; (800a8f4 <HAL_RCC_ClockConfig+0x35c>)
 800a8c0:	5cd3      	ldrb	r3, [r2, r3]
 800a8c2:	f003 031f 	and.w	r3, r3, #31
 800a8c6:	693a      	ldr	r2, [r7, #16]
 800a8c8:	fa22 f303 	lsr.w	r3, r2, r3
 800a8cc:	4a0a      	ldr	r2, [pc, #40]	; (800a8f8 <HAL_RCC_ClockConfig+0x360>)
 800a8ce:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800a8d0:	4a0a      	ldr	r2, [pc, #40]	; (800a8fc <HAL_RCC_ClockConfig+0x364>)
 800a8d2:	693b      	ldr	r3, [r7, #16]
 800a8d4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800a8d6:	4b0a      	ldr	r3, [pc, #40]	; (800a900 <HAL_RCC_ClockConfig+0x368>)
 800a8d8:	681b      	ldr	r3, [r3, #0]
 800a8da:	4618      	mov	r0, r3
 800a8dc:	f7f9 fc1c 	bl	8004118 <HAL_InitTick>
 800a8e0:	4603      	mov	r3, r0
 800a8e2:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800a8e4:	7bfb      	ldrb	r3, [r7, #15]
}
 800a8e6:	4618      	mov	r0, r3
 800a8e8:	3718      	adds	r7, #24
 800a8ea:	46bd      	mov	sp, r7
 800a8ec:	bd80      	pop	{r7, pc}
 800a8ee:	bf00      	nop
 800a8f0:	58024400 	.word	0x58024400
 800a8f4:	0801f450 	.word	0x0801f450
 800a8f8:	20000014 	.word	0x20000014
 800a8fc:	20000010 	.word	0x20000010
 800a900:	20000024 	.word	0x20000024

0800a904 <HAL_RCC_EnableCSS>:
  *         allowing the MCU to perform rescue operations. The CSSI is linked to
  *         the Cortex-M NMI (Non-Mask-able Interrupt) exception vector.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 800a904:	b480      	push	{r7}
 800a906:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_CSSHSEON) ;
 800a908:	4b05      	ldr	r3, [pc, #20]	; (800a920 <HAL_RCC_EnableCSS+0x1c>)
 800a90a:	681b      	ldr	r3, [r3, #0]
 800a90c:	4a04      	ldr	r2, [pc, #16]	; (800a920 <HAL_RCC_EnableCSS+0x1c>)
 800a90e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800a912:	6013      	str	r3, [r2, #0]
}
 800a914:	bf00      	nop
 800a916:	46bd      	mov	sp, r7
 800a918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a91c:	4770      	bx	lr
 800a91e:	bf00      	nop
 800a920:	58024400 	.word	0x58024400

0800a924 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800a924:	b480      	push	{r7}
 800a926:	b089      	sub	sp, #36	; 0x24
 800a928:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800a92a:	4bb3      	ldr	r3, [pc, #716]	; (800abf8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a92c:	691b      	ldr	r3, [r3, #16]
 800a92e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800a932:	2b18      	cmp	r3, #24
 800a934:	f200 8155 	bhi.w	800abe2 <HAL_RCC_GetSysClockFreq+0x2be>
 800a938:	a201      	add	r2, pc, #4	; (adr r2, 800a940 <HAL_RCC_GetSysClockFreq+0x1c>)
 800a93a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a93e:	bf00      	nop
 800a940:	0800a9a5 	.word	0x0800a9a5
 800a944:	0800abe3 	.word	0x0800abe3
 800a948:	0800abe3 	.word	0x0800abe3
 800a94c:	0800abe3 	.word	0x0800abe3
 800a950:	0800abe3 	.word	0x0800abe3
 800a954:	0800abe3 	.word	0x0800abe3
 800a958:	0800abe3 	.word	0x0800abe3
 800a95c:	0800abe3 	.word	0x0800abe3
 800a960:	0800a9cb 	.word	0x0800a9cb
 800a964:	0800abe3 	.word	0x0800abe3
 800a968:	0800abe3 	.word	0x0800abe3
 800a96c:	0800abe3 	.word	0x0800abe3
 800a970:	0800abe3 	.word	0x0800abe3
 800a974:	0800abe3 	.word	0x0800abe3
 800a978:	0800abe3 	.word	0x0800abe3
 800a97c:	0800abe3 	.word	0x0800abe3
 800a980:	0800a9d1 	.word	0x0800a9d1
 800a984:	0800abe3 	.word	0x0800abe3
 800a988:	0800abe3 	.word	0x0800abe3
 800a98c:	0800abe3 	.word	0x0800abe3
 800a990:	0800abe3 	.word	0x0800abe3
 800a994:	0800abe3 	.word	0x0800abe3
 800a998:	0800abe3 	.word	0x0800abe3
 800a99c:	0800abe3 	.word	0x0800abe3
 800a9a0:	0800a9d7 	.word	0x0800a9d7
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a9a4:	4b94      	ldr	r3, [pc, #592]	; (800abf8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a9a6:	681b      	ldr	r3, [r3, #0]
 800a9a8:	f003 0320 	and.w	r3, r3, #32
 800a9ac:	2b00      	cmp	r3, #0
 800a9ae:	d009      	beq.n	800a9c4 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a9b0:	4b91      	ldr	r3, [pc, #580]	; (800abf8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a9b2:	681b      	ldr	r3, [r3, #0]
 800a9b4:	08db      	lsrs	r3, r3, #3
 800a9b6:	f003 0303 	and.w	r3, r3, #3
 800a9ba:	4a90      	ldr	r2, [pc, #576]	; (800abfc <HAL_RCC_GetSysClockFreq+0x2d8>)
 800a9bc:	fa22 f303 	lsr.w	r3, r2, r3
 800a9c0:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800a9c2:	e111      	b.n	800abe8 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800a9c4:	4b8d      	ldr	r3, [pc, #564]	; (800abfc <HAL_RCC_GetSysClockFreq+0x2d8>)
 800a9c6:	61bb      	str	r3, [r7, #24]
      break;
 800a9c8:	e10e      	b.n	800abe8 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800a9ca:	4b8d      	ldr	r3, [pc, #564]	; (800ac00 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800a9cc:	61bb      	str	r3, [r7, #24]
      break;
 800a9ce:	e10b      	b.n	800abe8 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 800a9d0:	4b8c      	ldr	r3, [pc, #560]	; (800ac04 <HAL_RCC_GetSysClockFreq+0x2e0>)
 800a9d2:	61bb      	str	r3, [r7, #24]
      break;
 800a9d4:	e108      	b.n	800abe8 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800a9d6:	4b88      	ldr	r3, [pc, #544]	; (800abf8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a9d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a9da:	f003 0303 	and.w	r3, r3, #3
 800a9de:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 800a9e0:	4b85      	ldr	r3, [pc, #532]	; (800abf8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a9e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a9e4:	091b      	lsrs	r3, r3, #4
 800a9e6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a9ea:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 800a9ec:	4b82      	ldr	r3, [pc, #520]	; (800abf8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a9ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a9f0:	f003 0301 	and.w	r3, r3, #1
 800a9f4:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800a9f6:	4b80      	ldr	r3, [pc, #512]	; (800abf8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800a9f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a9fa:	08db      	lsrs	r3, r3, #3
 800a9fc:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800aa00:	68fa      	ldr	r2, [r7, #12]
 800aa02:	fb02 f303 	mul.w	r3, r2, r3
 800aa06:	ee07 3a90 	vmov	s15, r3
 800aa0a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aa0e:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800aa12:	693b      	ldr	r3, [r7, #16]
 800aa14:	2b00      	cmp	r3, #0
 800aa16:	f000 80e1 	beq.w	800abdc <HAL_RCC_GetSysClockFreq+0x2b8>
 800aa1a:	697b      	ldr	r3, [r7, #20]
 800aa1c:	2b02      	cmp	r3, #2
 800aa1e:	f000 8083 	beq.w	800ab28 <HAL_RCC_GetSysClockFreq+0x204>
 800aa22:	697b      	ldr	r3, [r7, #20]
 800aa24:	2b02      	cmp	r3, #2
 800aa26:	f200 80a1 	bhi.w	800ab6c <HAL_RCC_GetSysClockFreq+0x248>
 800aa2a:	697b      	ldr	r3, [r7, #20]
 800aa2c:	2b00      	cmp	r3, #0
 800aa2e:	d003      	beq.n	800aa38 <HAL_RCC_GetSysClockFreq+0x114>
 800aa30:	697b      	ldr	r3, [r7, #20]
 800aa32:	2b01      	cmp	r3, #1
 800aa34:	d056      	beq.n	800aae4 <HAL_RCC_GetSysClockFreq+0x1c0>
 800aa36:	e099      	b.n	800ab6c <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800aa38:	4b6f      	ldr	r3, [pc, #444]	; (800abf8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800aa3a:	681b      	ldr	r3, [r3, #0]
 800aa3c:	f003 0320 	and.w	r3, r3, #32
 800aa40:	2b00      	cmp	r3, #0
 800aa42:	d02d      	beq.n	800aaa0 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800aa44:	4b6c      	ldr	r3, [pc, #432]	; (800abf8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800aa46:	681b      	ldr	r3, [r3, #0]
 800aa48:	08db      	lsrs	r3, r3, #3
 800aa4a:	f003 0303 	and.w	r3, r3, #3
 800aa4e:	4a6b      	ldr	r2, [pc, #428]	; (800abfc <HAL_RCC_GetSysClockFreq+0x2d8>)
 800aa50:	fa22 f303 	lsr.w	r3, r2, r3
 800aa54:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800aa56:	687b      	ldr	r3, [r7, #4]
 800aa58:	ee07 3a90 	vmov	s15, r3
 800aa5c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800aa60:	693b      	ldr	r3, [r7, #16]
 800aa62:	ee07 3a90 	vmov	s15, r3
 800aa66:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aa6a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800aa6e:	4b62      	ldr	r3, [pc, #392]	; (800abf8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800aa70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aa72:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800aa76:	ee07 3a90 	vmov	s15, r3
 800aa7a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800aa7e:	ed97 6a02 	vldr	s12, [r7, #8]
 800aa82:	eddf 5a61 	vldr	s11, [pc, #388]	; 800ac08 <HAL_RCC_GetSysClockFreq+0x2e4>
 800aa86:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800aa8a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800aa8e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800aa92:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800aa96:	ee67 7a27 	vmul.f32	s15, s14, s15
 800aa9a:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800aa9e:	e087      	b.n	800abb0 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800aaa0:	693b      	ldr	r3, [r7, #16]
 800aaa2:	ee07 3a90 	vmov	s15, r3
 800aaa6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aaaa:	eddf 6a58 	vldr	s13, [pc, #352]	; 800ac0c <HAL_RCC_GetSysClockFreq+0x2e8>
 800aaae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800aab2:	4b51      	ldr	r3, [pc, #324]	; (800abf8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800aab4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aab6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800aaba:	ee07 3a90 	vmov	s15, r3
 800aabe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800aac2:	ed97 6a02 	vldr	s12, [r7, #8]
 800aac6:	eddf 5a50 	vldr	s11, [pc, #320]	; 800ac08 <HAL_RCC_GetSysClockFreq+0x2e4>
 800aaca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800aace:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800aad2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800aad6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800aada:	ee67 7a27 	vmul.f32	s15, s14, s15
 800aade:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800aae2:	e065      	b.n	800abb0 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800aae4:	693b      	ldr	r3, [r7, #16]
 800aae6:	ee07 3a90 	vmov	s15, r3
 800aaea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800aaee:	eddf 6a48 	vldr	s13, [pc, #288]	; 800ac10 <HAL_RCC_GetSysClockFreq+0x2ec>
 800aaf2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800aaf6:	4b40      	ldr	r3, [pc, #256]	; (800abf8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800aaf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aafa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800aafe:	ee07 3a90 	vmov	s15, r3
 800ab02:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ab06:	ed97 6a02 	vldr	s12, [r7, #8]
 800ab0a:	eddf 5a3f 	vldr	s11, [pc, #252]	; 800ac08 <HAL_RCC_GetSysClockFreq+0x2e4>
 800ab0e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ab12:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ab16:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ab1a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ab1e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ab22:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800ab26:	e043      	b.n	800abb0 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800ab28:	693b      	ldr	r3, [r7, #16]
 800ab2a:	ee07 3a90 	vmov	s15, r3
 800ab2e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ab32:	eddf 6a38 	vldr	s13, [pc, #224]	; 800ac14 <HAL_RCC_GetSysClockFreq+0x2f0>
 800ab36:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ab3a:	4b2f      	ldr	r3, [pc, #188]	; (800abf8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800ab3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ab3e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ab42:	ee07 3a90 	vmov	s15, r3
 800ab46:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ab4a:	ed97 6a02 	vldr	s12, [r7, #8]
 800ab4e:	eddf 5a2e 	vldr	s11, [pc, #184]	; 800ac08 <HAL_RCC_GetSysClockFreq+0x2e4>
 800ab52:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ab56:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ab5a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ab5e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ab62:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ab66:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800ab6a:	e021      	b.n	800abb0 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800ab6c:	693b      	ldr	r3, [r7, #16]
 800ab6e:	ee07 3a90 	vmov	s15, r3
 800ab72:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ab76:	eddf 6a26 	vldr	s13, [pc, #152]	; 800ac10 <HAL_RCC_GetSysClockFreq+0x2ec>
 800ab7a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ab7e:	4b1e      	ldr	r3, [pc, #120]	; (800abf8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800ab80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ab82:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ab86:	ee07 3a90 	vmov	s15, r3
 800ab8a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ab8e:	ed97 6a02 	vldr	s12, [r7, #8]
 800ab92:	eddf 5a1d 	vldr	s11, [pc, #116]	; 800ac08 <HAL_RCC_GetSysClockFreq+0x2e4>
 800ab96:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ab9a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ab9e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800aba2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800aba6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800abaa:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800abae:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 800abb0:	4b11      	ldr	r3, [pc, #68]	; (800abf8 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800abb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800abb4:	0a5b      	lsrs	r3, r3, #9
 800abb6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800abba:	3301      	adds	r3, #1
 800abbc:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800abbe:	683b      	ldr	r3, [r7, #0]
 800abc0:	ee07 3a90 	vmov	s15, r3
 800abc4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800abc8:	edd7 6a07 	vldr	s13, [r7, #28]
 800abcc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800abd0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800abd4:	ee17 3a90 	vmov	r3, s15
 800abd8:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800abda:	e005      	b.n	800abe8 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 800abdc:	2300      	movs	r3, #0
 800abde:	61bb      	str	r3, [r7, #24]
      break;
 800abe0:	e002      	b.n	800abe8 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800abe2:	4b07      	ldr	r3, [pc, #28]	; (800ac00 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800abe4:	61bb      	str	r3, [r7, #24]
      break;
 800abe6:	bf00      	nop
  }

  return sysclockfreq;
 800abe8:	69bb      	ldr	r3, [r7, #24]
}
 800abea:	4618      	mov	r0, r3
 800abec:	3724      	adds	r7, #36	; 0x24
 800abee:	46bd      	mov	sp, r7
 800abf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abf4:	4770      	bx	lr
 800abf6:	bf00      	nop
 800abf8:	58024400 	.word	0x58024400
 800abfc:	03d09000 	.word	0x03d09000
 800ac00:	003d0900 	.word	0x003d0900
 800ac04:	00989680 	.word	0x00989680
 800ac08:	46000000 	.word	0x46000000
 800ac0c:	4c742400 	.word	0x4c742400
 800ac10:	4a742400 	.word	0x4a742400
 800ac14:	4b189680 	.word	0x4b189680

0800ac18 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800ac18:	b580      	push	{r7, lr}
 800ac1a:	b082      	sub	sp, #8
 800ac1c:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800ac1e:	f7ff fe81 	bl	800a924 <HAL_RCC_GetSysClockFreq>
 800ac22:	4602      	mov	r2, r0
 800ac24:	4b10      	ldr	r3, [pc, #64]	; (800ac68 <HAL_RCC_GetHCLKFreq+0x50>)
 800ac26:	699b      	ldr	r3, [r3, #24]
 800ac28:	0a1b      	lsrs	r3, r3, #8
 800ac2a:	f003 030f 	and.w	r3, r3, #15
 800ac2e:	490f      	ldr	r1, [pc, #60]	; (800ac6c <HAL_RCC_GetHCLKFreq+0x54>)
 800ac30:	5ccb      	ldrb	r3, [r1, r3]
 800ac32:	f003 031f 	and.w	r3, r3, #31
 800ac36:	fa22 f303 	lsr.w	r3, r2, r3
 800ac3a:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800ac3c:	4b0a      	ldr	r3, [pc, #40]	; (800ac68 <HAL_RCC_GetHCLKFreq+0x50>)
 800ac3e:	699b      	ldr	r3, [r3, #24]
 800ac40:	f003 030f 	and.w	r3, r3, #15
 800ac44:	4a09      	ldr	r2, [pc, #36]	; (800ac6c <HAL_RCC_GetHCLKFreq+0x54>)
 800ac46:	5cd3      	ldrb	r3, [r2, r3]
 800ac48:	f003 031f 	and.w	r3, r3, #31
 800ac4c:	687a      	ldr	r2, [r7, #4]
 800ac4e:	fa22 f303 	lsr.w	r3, r2, r3
 800ac52:	4a07      	ldr	r2, [pc, #28]	; (800ac70 <HAL_RCC_GetHCLKFreq+0x58>)
 800ac54:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800ac56:	4a07      	ldr	r2, [pc, #28]	; (800ac74 <HAL_RCC_GetHCLKFreq+0x5c>)
 800ac58:	687b      	ldr	r3, [r7, #4]
 800ac5a:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800ac5c:	4b04      	ldr	r3, [pc, #16]	; (800ac70 <HAL_RCC_GetHCLKFreq+0x58>)
 800ac5e:	681b      	ldr	r3, [r3, #0]
}
 800ac60:	4618      	mov	r0, r3
 800ac62:	3708      	adds	r7, #8
 800ac64:	46bd      	mov	sp, r7
 800ac66:	bd80      	pop	{r7, pc}
 800ac68:	58024400 	.word	0x58024400
 800ac6c:	0801f450 	.word	0x0801f450
 800ac70:	20000014 	.word	0x20000014
 800ac74:	20000010 	.word	0x20000010

0800ac78 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800ac78:	b580      	push	{r7, lr}
 800ac7a:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800ac7c:	f7ff ffcc 	bl	800ac18 <HAL_RCC_GetHCLKFreq>
 800ac80:	4602      	mov	r2, r0
 800ac82:	4b06      	ldr	r3, [pc, #24]	; (800ac9c <HAL_RCC_GetPCLK1Freq+0x24>)
 800ac84:	69db      	ldr	r3, [r3, #28]
 800ac86:	091b      	lsrs	r3, r3, #4
 800ac88:	f003 0307 	and.w	r3, r3, #7
 800ac8c:	4904      	ldr	r1, [pc, #16]	; (800aca0 <HAL_RCC_GetPCLK1Freq+0x28>)
 800ac8e:	5ccb      	ldrb	r3, [r1, r3]
 800ac90:	f003 031f 	and.w	r3, r3, #31
 800ac94:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800ac98:	4618      	mov	r0, r3
 800ac9a:	bd80      	pop	{r7, pc}
 800ac9c:	58024400 	.word	0x58024400
 800aca0:	0801f450 	.word	0x0801f450

0800aca4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800aca4:	b580      	push	{r7, lr}
 800aca6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 800aca8:	f7ff ffb6 	bl	800ac18 <HAL_RCC_GetHCLKFreq>
 800acac:	4602      	mov	r2, r0
 800acae:	4b06      	ldr	r3, [pc, #24]	; (800acc8 <HAL_RCC_GetPCLK2Freq+0x24>)
 800acb0:	69db      	ldr	r3, [r3, #28]
 800acb2:	0a1b      	lsrs	r3, r3, #8
 800acb4:	f003 0307 	and.w	r3, r3, #7
 800acb8:	4904      	ldr	r1, [pc, #16]	; (800accc <HAL_RCC_GetPCLK2Freq+0x28>)
 800acba:	5ccb      	ldrb	r3, [r1, r3]
 800acbc:	f003 031f 	and.w	r3, r3, #31
 800acc0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800acc4:	4618      	mov	r0, r3
 800acc6:	bd80      	pop	{r7, pc}
 800acc8:	58024400 	.word	0x58024400
 800accc:	0801f450 	.word	0x0801f450

0800acd0 <HAL_RCC_NMI_IRQHandler>:
  * @brief This function handles the RCC CSS interrupt request.
  * @note This API should be called under the NMI_Handler().
  * @retval None
  */
void HAL_RCC_NMI_IRQHandler(void)
{
 800acd0:	b580      	push	{r7, lr}
 800acd2:	af00      	add	r7, sp, #0
  /* Check RCC CSSF flag  */
  if (__HAL_RCC_GET_IT(RCC_IT_CSS))
 800acd4:	4b07      	ldr	r3, [pc, #28]	; (800acf4 <HAL_RCC_NMI_IRQHandler+0x24>)
 800acd6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800acd8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800acdc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ace0:	d105      	bne.n	800acee <HAL_RCC_NMI_IRQHandler+0x1e>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_CSSCallback();
 800ace2:	f000 f809 	bl	800acf8 <HAL_RCC_CSSCallback>

    /* Clear RCC CSS pending bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 800ace6:	4b03      	ldr	r3, [pc, #12]	; (800acf4 <HAL_RCC_NMI_IRQHandler+0x24>)
 800ace8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800acec:	669a      	str	r2, [r3, #104]	; 0x68
  }
}
 800acee:	bf00      	nop
 800acf0:	bd80      	pop	{r7, pc}
 800acf2:	bf00      	nop
 800acf4:	58024400 	.word	0x58024400

0800acf8 <HAL_RCC_CSSCallback>:
/**
  * @brief  RCC Clock Security System interrupt callback
  * @retval none
  */
__weak void HAL_RCC_CSSCallback(void)
{
 800acf8:	b480      	push	{r7}
 800acfa:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RCC_CSSCallback could be implemented in the user file
   */
}
 800acfc:	bf00      	nop
 800acfe:	46bd      	mov	sp, r7
 800ad00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad04:	4770      	bx	lr
	...

0800ad08 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800ad08:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800ad0c:	b0ca      	sub	sp, #296	; 0x128
 800ad0e:	af00      	add	r7, sp, #0
 800ad10:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800ad14:	2300      	movs	r3, #0
 800ad16:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800ad1a:	2300      	movs	r3, #0
 800ad1c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800ad20:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ad24:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad28:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 800ad2c:	2500      	movs	r5, #0
 800ad2e:	ea54 0305 	orrs.w	r3, r4, r5
 800ad32:	d049      	beq.n	800adc8 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 800ad34:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ad38:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ad3a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800ad3e:	d02f      	beq.n	800ada0 <HAL_RCCEx_PeriphCLKConfig+0x98>
 800ad40:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800ad44:	d828      	bhi.n	800ad98 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800ad46:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800ad4a:	d01a      	beq.n	800ad82 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800ad4c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800ad50:	d822      	bhi.n	800ad98 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800ad52:	2b00      	cmp	r3, #0
 800ad54:	d003      	beq.n	800ad5e <HAL_RCCEx_PeriphCLKConfig+0x56>
 800ad56:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800ad5a:	d007      	beq.n	800ad6c <HAL_RCCEx_PeriphCLKConfig+0x64>
 800ad5c:	e01c      	b.n	800ad98 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ad5e:	4bb8      	ldr	r3, [pc, #736]	; (800b040 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800ad60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ad62:	4ab7      	ldr	r2, [pc, #732]	; (800b040 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800ad64:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800ad68:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800ad6a:	e01a      	b.n	800ada2 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800ad6c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ad70:	3308      	adds	r3, #8
 800ad72:	2102      	movs	r1, #2
 800ad74:	4618      	mov	r0, r3
 800ad76:	f002 fbb7 	bl	800d4e8 <RCCEx_PLL2_Config>
 800ad7a:	4603      	mov	r3, r0
 800ad7c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800ad80:	e00f      	b.n	800ada2 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800ad82:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ad86:	3328      	adds	r3, #40	; 0x28
 800ad88:	2102      	movs	r1, #2
 800ad8a:	4618      	mov	r0, r3
 800ad8c:	f002 fc5e 	bl	800d64c <RCCEx_PLL3_Config>
 800ad90:	4603      	mov	r3, r0
 800ad92:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800ad96:	e004      	b.n	800ada2 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800ad98:	2301      	movs	r3, #1
 800ad9a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800ad9e:	e000      	b.n	800ada2 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 800ada0:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ada2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ada6:	2b00      	cmp	r3, #0
 800ada8:	d10a      	bne.n	800adc0 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800adaa:	4ba5      	ldr	r3, [pc, #660]	; (800b040 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800adac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800adae:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800adb2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800adb6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800adb8:	4aa1      	ldr	r2, [pc, #644]	; (800b040 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800adba:	430b      	orrs	r3, r1
 800adbc:	6513      	str	r3, [r2, #80]	; 0x50
 800adbe:	e003      	b.n	800adc8 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800adc0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800adc4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800adc8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800adcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800add0:	f402 7880 	and.w	r8, r2, #256	; 0x100
 800add4:	f04f 0900 	mov.w	r9, #0
 800add8:	ea58 0309 	orrs.w	r3, r8, r9
 800addc:	d047      	beq.n	800ae6e <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800adde:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ade2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ade4:	2b04      	cmp	r3, #4
 800ade6:	d82a      	bhi.n	800ae3e <HAL_RCCEx_PeriphCLKConfig+0x136>
 800ade8:	a201      	add	r2, pc, #4	; (adr r2, 800adf0 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800adea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800adee:	bf00      	nop
 800adf0:	0800ae05 	.word	0x0800ae05
 800adf4:	0800ae13 	.word	0x0800ae13
 800adf8:	0800ae29 	.word	0x0800ae29
 800adfc:	0800ae47 	.word	0x0800ae47
 800ae00:	0800ae47 	.word	0x0800ae47
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ae04:	4b8e      	ldr	r3, [pc, #568]	; (800b040 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800ae06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ae08:	4a8d      	ldr	r2, [pc, #564]	; (800b040 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800ae0a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800ae0e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800ae10:	e01a      	b.n	800ae48 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800ae12:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ae16:	3308      	adds	r3, #8
 800ae18:	2100      	movs	r1, #0
 800ae1a:	4618      	mov	r0, r3
 800ae1c:	f002 fb64 	bl	800d4e8 <RCCEx_PLL2_Config>
 800ae20:	4603      	mov	r3, r0
 800ae22:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800ae26:	e00f      	b.n	800ae48 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800ae28:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ae2c:	3328      	adds	r3, #40	; 0x28
 800ae2e:	2100      	movs	r1, #0
 800ae30:	4618      	mov	r0, r3
 800ae32:	f002 fc0b 	bl	800d64c <RCCEx_PLL3_Config>
 800ae36:	4603      	mov	r3, r0
 800ae38:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800ae3c:	e004      	b.n	800ae48 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800ae3e:	2301      	movs	r3, #1
 800ae40:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800ae44:	e000      	b.n	800ae48 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800ae46:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ae48:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ae4c:	2b00      	cmp	r3, #0
 800ae4e:	d10a      	bne.n	800ae66 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800ae50:	4b7b      	ldr	r3, [pc, #492]	; (800b040 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800ae52:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ae54:	f023 0107 	bic.w	r1, r3, #7
 800ae58:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ae5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ae5e:	4a78      	ldr	r2, [pc, #480]	; (800b040 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800ae60:	430b      	orrs	r3, r1
 800ae62:	6513      	str	r3, [r2, #80]	; 0x50
 800ae64:	e003      	b.n	800ae6e <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ae66:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ae6a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800ae6e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ae72:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae76:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 800ae7a:	f04f 0b00 	mov.w	fp, #0
 800ae7e:	ea5a 030b 	orrs.w	r3, sl, fp
 800ae82:	d04c      	beq.n	800af1e <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 800ae84:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ae88:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ae8a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ae8e:	d030      	beq.n	800aef2 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 800ae90:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ae94:	d829      	bhi.n	800aeea <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800ae96:	2bc0      	cmp	r3, #192	; 0xc0
 800ae98:	d02d      	beq.n	800aef6 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800ae9a:	2bc0      	cmp	r3, #192	; 0xc0
 800ae9c:	d825      	bhi.n	800aeea <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800ae9e:	2b80      	cmp	r3, #128	; 0x80
 800aea0:	d018      	beq.n	800aed4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 800aea2:	2b80      	cmp	r3, #128	; 0x80
 800aea4:	d821      	bhi.n	800aeea <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800aea6:	2b00      	cmp	r3, #0
 800aea8:	d002      	beq.n	800aeb0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 800aeaa:	2b40      	cmp	r3, #64	; 0x40
 800aeac:	d007      	beq.n	800aebe <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 800aeae:	e01c      	b.n	800aeea <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800aeb0:	4b63      	ldr	r3, [pc, #396]	; (800b040 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800aeb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aeb4:	4a62      	ldr	r2, [pc, #392]	; (800b040 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800aeb6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800aeba:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800aebc:	e01c      	b.n	800aef8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800aebe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800aec2:	3308      	adds	r3, #8
 800aec4:	2100      	movs	r1, #0
 800aec6:	4618      	mov	r0, r3
 800aec8:	f002 fb0e 	bl	800d4e8 <RCCEx_PLL2_Config>
 800aecc:	4603      	mov	r3, r0
 800aece:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800aed2:	e011      	b.n	800aef8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800aed4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800aed8:	3328      	adds	r3, #40	; 0x28
 800aeda:	2100      	movs	r1, #0
 800aedc:	4618      	mov	r0, r3
 800aede:	f002 fbb5 	bl	800d64c <RCCEx_PLL3_Config>
 800aee2:	4603      	mov	r3, r0
 800aee4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800aee8:	e006      	b.n	800aef8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800aeea:	2301      	movs	r3, #1
 800aeec:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800aef0:	e002      	b.n	800aef8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800aef2:	bf00      	nop
 800aef4:	e000      	b.n	800aef8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800aef6:	bf00      	nop
    }

    if (ret == HAL_OK)
 800aef8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800aefc:	2b00      	cmp	r3, #0
 800aefe:	d10a      	bne.n	800af16 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 800af00:	4b4f      	ldr	r3, [pc, #316]	; (800b040 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800af02:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800af04:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 800af08:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800af0c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800af0e:	4a4c      	ldr	r2, [pc, #304]	; (800b040 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800af10:	430b      	orrs	r3, r1
 800af12:	6513      	str	r3, [r2, #80]	; 0x50
 800af14:	e003      	b.n	800af1e <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800af16:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800af1a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800af1e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800af22:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af26:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 800af2a:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800af2e:	2300      	movs	r3, #0
 800af30:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 800af34:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	; 0x108
 800af38:	460b      	mov	r3, r1
 800af3a:	4313      	orrs	r3, r2
 800af3c:	d053      	beq.n	800afe6 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 800af3e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800af42:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800af46:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800af4a:	d035      	beq.n	800afb8 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 800af4c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800af50:	d82e      	bhi.n	800afb0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800af52:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800af56:	d031      	beq.n	800afbc <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 800af58:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800af5c:	d828      	bhi.n	800afb0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800af5e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800af62:	d01a      	beq.n	800af9a <HAL_RCCEx_PeriphCLKConfig+0x292>
 800af64:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800af68:	d822      	bhi.n	800afb0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800af6a:	2b00      	cmp	r3, #0
 800af6c:	d003      	beq.n	800af76 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 800af6e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800af72:	d007      	beq.n	800af84 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 800af74:	e01c      	b.n	800afb0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800af76:	4b32      	ldr	r3, [pc, #200]	; (800b040 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800af78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800af7a:	4a31      	ldr	r2, [pc, #196]	; (800b040 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800af7c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800af80:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800af82:	e01c      	b.n	800afbe <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800af84:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800af88:	3308      	adds	r3, #8
 800af8a:	2100      	movs	r1, #0
 800af8c:	4618      	mov	r0, r3
 800af8e:	f002 faab 	bl	800d4e8 <RCCEx_PLL2_Config>
 800af92:	4603      	mov	r3, r0
 800af94:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800af98:	e011      	b.n	800afbe <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800af9a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800af9e:	3328      	adds	r3, #40	; 0x28
 800afa0:	2100      	movs	r1, #0
 800afa2:	4618      	mov	r0, r3
 800afa4:	f002 fb52 	bl	800d64c <RCCEx_PLL3_Config>
 800afa8:	4603      	mov	r3, r0
 800afaa:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800afae:	e006      	b.n	800afbe <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800afb0:	2301      	movs	r3, #1
 800afb2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800afb6:	e002      	b.n	800afbe <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 800afb8:	bf00      	nop
 800afba:	e000      	b.n	800afbe <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 800afbc:	bf00      	nop
    }

    if (ret == HAL_OK)
 800afbe:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800afc2:	2b00      	cmp	r3, #0
 800afc4:	d10b      	bne.n	800afde <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800afc6:	4b1e      	ldr	r3, [pc, #120]	; (800b040 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800afc8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800afca:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 800afce:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800afd2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800afd6:	4a1a      	ldr	r2, [pc, #104]	; (800b040 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800afd8:	430b      	orrs	r3, r1
 800afda:	6593      	str	r3, [r2, #88]	; 0x58
 800afdc:	e003      	b.n	800afe6 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800afde:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800afe2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800afe6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800afea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800afee:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 800aff2:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800aff6:	2300      	movs	r3, #0
 800aff8:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800affc:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 800b000:	460b      	mov	r3, r1
 800b002:	4313      	orrs	r3, r2
 800b004:	d056      	beq.n	800b0b4 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 800b006:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b00a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800b00e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800b012:	d038      	beq.n	800b086 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 800b014:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800b018:	d831      	bhi.n	800b07e <HAL_RCCEx_PeriphCLKConfig+0x376>
 800b01a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800b01e:	d034      	beq.n	800b08a <HAL_RCCEx_PeriphCLKConfig+0x382>
 800b020:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800b024:	d82b      	bhi.n	800b07e <HAL_RCCEx_PeriphCLKConfig+0x376>
 800b026:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b02a:	d01d      	beq.n	800b068 <HAL_RCCEx_PeriphCLKConfig+0x360>
 800b02c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b030:	d825      	bhi.n	800b07e <HAL_RCCEx_PeriphCLKConfig+0x376>
 800b032:	2b00      	cmp	r3, #0
 800b034:	d006      	beq.n	800b044 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 800b036:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800b03a:	d00a      	beq.n	800b052 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 800b03c:	e01f      	b.n	800b07e <HAL_RCCEx_PeriphCLKConfig+0x376>
 800b03e:	bf00      	nop
 800b040:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b044:	4ba2      	ldr	r3, [pc, #648]	; (800b2d0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800b046:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b048:	4aa1      	ldr	r2, [pc, #644]	; (800b2d0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800b04a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b04e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800b050:	e01c      	b.n	800b08c <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b052:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b056:	3308      	adds	r3, #8
 800b058:	2100      	movs	r1, #0
 800b05a:	4618      	mov	r0, r3
 800b05c:	f002 fa44 	bl	800d4e8 <RCCEx_PLL2_Config>
 800b060:	4603      	mov	r3, r0
 800b062:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800b066:	e011      	b.n	800b08c <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800b068:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b06c:	3328      	adds	r3, #40	; 0x28
 800b06e:	2100      	movs	r1, #0
 800b070:	4618      	mov	r0, r3
 800b072:	f002 faeb 	bl	800d64c <RCCEx_PLL3_Config>
 800b076:	4603      	mov	r3, r0
 800b078:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800b07c:	e006      	b.n	800b08c <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800b07e:	2301      	movs	r3, #1
 800b080:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b084:	e002      	b.n	800b08c <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800b086:	bf00      	nop
 800b088:	e000      	b.n	800b08c <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800b08a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b08c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b090:	2b00      	cmp	r3, #0
 800b092:	d10b      	bne.n	800b0ac <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800b094:	4b8e      	ldr	r3, [pc, #568]	; (800b2d0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800b096:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b098:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 800b09c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b0a0:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800b0a4:	4a8a      	ldr	r2, [pc, #552]	; (800b2d0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800b0a6:	430b      	orrs	r3, r1
 800b0a8:	6593      	str	r3, [r2, #88]	; 0x58
 800b0aa:	e003      	b.n	800b0b4 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b0ac:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b0b0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800b0b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b0b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b0bc:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 800b0c0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800b0c4:	2300      	movs	r3, #0
 800b0c6:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800b0ca:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 800b0ce:	460b      	mov	r3, r1
 800b0d0:	4313      	orrs	r3, r2
 800b0d2:	d03a      	beq.n	800b14a <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 800b0d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b0d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b0da:	2b30      	cmp	r3, #48	; 0x30
 800b0dc:	d01f      	beq.n	800b11e <HAL_RCCEx_PeriphCLKConfig+0x416>
 800b0de:	2b30      	cmp	r3, #48	; 0x30
 800b0e0:	d819      	bhi.n	800b116 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800b0e2:	2b20      	cmp	r3, #32
 800b0e4:	d00c      	beq.n	800b100 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 800b0e6:	2b20      	cmp	r3, #32
 800b0e8:	d815      	bhi.n	800b116 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800b0ea:	2b00      	cmp	r3, #0
 800b0ec:	d019      	beq.n	800b122 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 800b0ee:	2b10      	cmp	r3, #16
 800b0f0:	d111      	bne.n	800b116 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b0f2:	4b77      	ldr	r3, [pc, #476]	; (800b2d0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800b0f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b0f6:	4a76      	ldr	r2, [pc, #472]	; (800b2d0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800b0f8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b0fc:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 800b0fe:	e011      	b.n	800b124 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800b100:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b104:	3308      	adds	r3, #8
 800b106:	2102      	movs	r1, #2
 800b108:	4618      	mov	r0, r3
 800b10a:	f002 f9ed 	bl	800d4e8 <RCCEx_PLL2_Config>
 800b10e:	4603      	mov	r3, r0
 800b110:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 800b114:	e006      	b.n	800b124 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800b116:	2301      	movs	r3, #1
 800b118:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b11c:	e002      	b.n	800b124 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800b11e:	bf00      	nop
 800b120:	e000      	b.n	800b124 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800b122:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b124:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b128:	2b00      	cmp	r3, #0
 800b12a:	d10a      	bne.n	800b142 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800b12c:	4b68      	ldr	r3, [pc, #416]	; (800b2d0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800b12e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b130:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 800b134:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b138:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b13a:	4a65      	ldr	r2, [pc, #404]	; (800b2d0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800b13c:	430b      	orrs	r3, r1
 800b13e:	64d3      	str	r3, [r2, #76]	; 0x4c
 800b140:	e003      	b.n	800b14a <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b142:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b146:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800b14a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b14e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b152:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 800b156:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800b15a:	2300      	movs	r3, #0
 800b15c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800b160:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 800b164:	460b      	mov	r3, r1
 800b166:	4313      	orrs	r3, r2
 800b168:	d051      	beq.n	800b20e <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800b16a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b16e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b170:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b174:	d035      	beq.n	800b1e2 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 800b176:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b17a:	d82e      	bhi.n	800b1da <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800b17c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800b180:	d031      	beq.n	800b1e6 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 800b182:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800b186:	d828      	bhi.n	800b1da <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800b188:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b18c:	d01a      	beq.n	800b1c4 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 800b18e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b192:	d822      	bhi.n	800b1da <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800b194:	2b00      	cmp	r3, #0
 800b196:	d003      	beq.n	800b1a0 <HAL_RCCEx_PeriphCLKConfig+0x498>
 800b198:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b19c:	d007      	beq.n	800b1ae <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 800b19e:	e01c      	b.n	800b1da <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b1a0:	4b4b      	ldr	r3, [pc, #300]	; (800b2d0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800b1a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b1a4:	4a4a      	ldr	r2, [pc, #296]	; (800b2d0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800b1a6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b1aa:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800b1ac:	e01c      	b.n	800b1e8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b1ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b1b2:	3308      	adds	r3, #8
 800b1b4:	2100      	movs	r1, #0
 800b1b6:	4618      	mov	r0, r3
 800b1b8:	f002 f996 	bl	800d4e8 <RCCEx_PLL2_Config>
 800b1bc:	4603      	mov	r3, r0
 800b1be:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800b1c2:	e011      	b.n	800b1e8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800b1c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b1c8:	3328      	adds	r3, #40	; 0x28
 800b1ca:	2100      	movs	r1, #0
 800b1cc:	4618      	mov	r0, r3
 800b1ce:	f002 fa3d 	bl	800d64c <RCCEx_PLL3_Config>
 800b1d2:	4603      	mov	r3, r0
 800b1d4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800b1d8:	e006      	b.n	800b1e8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b1da:	2301      	movs	r3, #1
 800b1dc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b1e0:	e002      	b.n	800b1e8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800b1e2:	bf00      	nop
 800b1e4:	e000      	b.n	800b1e8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800b1e6:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b1e8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b1ec:	2b00      	cmp	r3, #0
 800b1ee:	d10a      	bne.n	800b206 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800b1f0:	4b37      	ldr	r3, [pc, #220]	; (800b2d0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800b1f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b1f4:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 800b1f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b1fc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b1fe:	4a34      	ldr	r2, [pc, #208]	; (800b2d0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800b200:	430b      	orrs	r3, r1
 800b202:	6513      	str	r3, [r2, #80]	; 0x50
 800b204:	e003      	b.n	800b20e <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b206:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b20a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800b20e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b212:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b216:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 800b21a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800b21e:	2300      	movs	r3, #0
 800b220:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800b224:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 800b228:	460b      	mov	r3, r1
 800b22a:	4313      	orrs	r3, r2
 800b22c:	d056      	beq.n	800b2dc <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800b22e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b232:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b234:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800b238:	d033      	beq.n	800b2a2 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 800b23a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800b23e:	d82c      	bhi.n	800b29a <HAL_RCCEx_PeriphCLKConfig+0x592>
 800b240:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800b244:	d02f      	beq.n	800b2a6 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 800b246:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800b24a:	d826      	bhi.n	800b29a <HAL_RCCEx_PeriphCLKConfig+0x592>
 800b24c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800b250:	d02b      	beq.n	800b2aa <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 800b252:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800b256:	d820      	bhi.n	800b29a <HAL_RCCEx_PeriphCLKConfig+0x592>
 800b258:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b25c:	d012      	beq.n	800b284 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 800b25e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b262:	d81a      	bhi.n	800b29a <HAL_RCCEx_PeriphCLKConfig+0x592>
 800b264:	2b00      	cmp	r3, #0
 800b266:	d022      	beq.n	800b2ae <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 800b268:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b26c:	d115      	bne.n	800b29a <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800b26e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b272:	3308      	adds	r3, #8
 800b274:	2101      	movs	r1, #1
 800b276:	4618      	mov	r0, r3
 800b278:	f002 f936 	bl	800d4e8 <RCCEx_PLL2_Config>
 800b27c:	4603      	mov	r3, r0
 800b27e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800b282:	e015      	b.n	800b2b0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800b284:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b288:	3328      	adds	r3, #40	; 0x28
 800b28a:	2101      	movs	r1, #1
 800b28c:	4618      	mov	r0, r3
 800b28e:	f002 f9dd 	bl	800d64c <RCCEx_PLL3_Config>
 800b292:	4603      	mov	r3, r0
 800b294:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800b298:	e00a      	b.n	800b2b0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b29a:	2301      	movs	r3, #1
 800b29c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b2a0:	e006      	b.n	800b2b0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800b2a2:	bf00      	nop
 800b2a4:	e004      	b.n	800b2b0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800b2a6:	bf00      	nop
 800b2a8:	e002      	b.n	800b2b0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800b2aa:	bf00      	nop
 800b2ac:	e000      	b.n	800b2b0 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800b2ae:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b2b0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b2b4:	2b00      	cmp	r3, #0
 800b2b6:	d10d      	bne.n	800b2d4 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800b2b8:	4b05      	ldr	r3, [pc, #20]	; (800b2d0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800b2ba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b2bc:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 800b2c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b2c4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b2c6:	4a02      	ldr	r2, [pc, #8]	; (800b2d0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800b2c8:	430b      	orrs	r3, r1
 800b2ca:	6513      	str	r3, [r2, #80]	; 0x50
 800b2cc:	e006      	b.n	800b2dc <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800b2ce:	bf00      	nop
 800b2d0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b2d4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b2d8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800b2dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b2e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b2e4:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 800b2e8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800b2ec:	2300      	movs	r3, #0
 800b2ee:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800b2f2:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 800b2f6:	460b      	mov	r3, r1
 800b2f8:	4313      	orrs	r3, r2
 800b2fa:	d055      	beq.n	800b3a8 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 800b2fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b300:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800b304:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800b308:	d033      	beq.n	800b372 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 800b30a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800b30e:	d82c      	bhi.n	800b36a <HAL_RCCEx_PeriphCLKConfig+0x662>
 800b310:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b314:	d02f      	beq.n	800b376 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 800b316:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b31a:	d826      	bhi.n	800b36a <HAL_RCCEx_PeriphCLKConfig+0x662>
 800b31c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800b320:	d02b      	beq.n	800b37a <HAL_RCCEx_PeriphCLKConfig+0x672>
 800b322:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800b326:	d820      	bhi.n	800b36a <HAL_RCCEx_PeriphCLKConfig+0x662>
 800b328:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b32c:	d012      	beq.n	800b354 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 800b32e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b332:	d81a      	bhi.n	800b36a <HAL_RCCEx_PeriphCLKConfig+0x662>
 800b334:	2b00      	cmp	r3, #0
 800b336:	d022      	beq.n	800b37e <HAL_RCCEx_PeriphCLKConfig+0x676>
 800b338:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b33c:	d115      	bne.n	800b36a <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800b33e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b342:	3308      	adds	r3, #8
 800b344:	2101      	movs	r1, #1
 800b346:	4618      	mov	r0, r3
 800b348:	f002 f8ce 	bl	800d4e8 <RCCEx_PLL2_Config>
 800b34c:	4603      	mov	r3, r0
 800b34e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800b352:	e015      	b.n	800b380 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800b354:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b358:	3328      	adds	r3, #40	; 0x28
 800b35a:	2101      	movs	r1, #1
 800b35c:	4618      	mov	r0, r3
 800b35e:	f002 f975 	bl	800d64c <RCCEx_PLL3_Config>
 800b362:	4603      	mov	r3, r0
 800b364:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800b368:	e00a      	b.n	800b380 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 800b36a:	2301      	movs	r3, #1
 800b36c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b370:	e006      	b.n	800b380 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800b372:	bf00      	nop
 800b374:	e004      	b.n	800b380 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800b376:	bf00      	nop
 800b378:	e002      	b.n	800b380 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800b37a:	bf00      	nop
 800b37c:	e000      	b.n	800b380 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800b37e:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b380:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b384:	2b00      	cmp	r3, #0
 800b386:	d10b      	bne.n	800b3a0 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800b388:	4ba3      	ldr	r3, [pc, #652]	; (800b618 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b38a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b38c:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 800b390:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b394:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800b398:	4a9f      	ldr	r2, [pc, #636]	; (800b618 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b39a:	430b      	orrs	r3, r1
 800b39c:	6593      	str	r3, [r2, #88]	; 0x58
 800b39e:	e003      	b.n	800b3a8 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b3a0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b3a4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800b3a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b3ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b3b0:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 800b3b4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800b3b8:	2300      	movs	r3, #0
 800b3ba:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800b3be:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800b3c2:	460b      	mov	r3, r1
 800b3c4:	4313      	orrs	r3, r2
 800b3c6:	d037      	beq.n	800b438 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 800b3c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b3cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b3ce:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b3d2:	d00e      	beq.n	800b3f2 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 800b3d4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b3d8:	d816      	bhi.n	800b408 <HAL_RCCEx_PeriphCLKConfig+0x700>
 800b3da:	2b00      	cmp	r3, #0
 800b3dc:	d018      	beq.n	800b410 <HAL_RCCEx_PeriphCLKConfig+0x708>
 800b3de:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b3e2:	d111      	bne.n	800b408 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b3e4:	4b8c      	ldr	r3, [pc, #560]	; (800b618 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b3e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b3e8:	4a8b      	ldr	r2, [pc, #556]	; (800b618 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b3ea:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b3ee:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800b3f0:	e00f      	b.n	800b412 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800b3f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b3f6:	3308      	adds	r3, #8
 800b3f8:	2101      	movs	r1, #1
 800b3fa:	4618      	mov	r0, r3
 800b3fc:	f002 f874 	bl	800d4e8 <RCCEx_PLL2_Config>
 800b400:	4603      	mov	r3, r0
 800b402:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800b406:	e004      	b.n	800b412 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b408:	2301      	movs	r3, #1
 800b40a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b40e:	e000      	b.n	800b412 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 800b410:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b412:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b416:	2b00      	cmp	r3, #0
 800b418:	d10a      	bne.n	800b430 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800b41a:	4b7f      	ldr	r3, [pc, #508]	; (800b618 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b41c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b41e:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 800b422:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b426:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b428:	4a7b      	ldr	r2, [pc, #492]	; (800b618 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b42a:	430b      	orrs	r3, r1
 800b42c:	6513      	str	r3, [r2, #80]	; 0x50
 800b42e:	e003      	b.n	800b438 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b430:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b434:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800b438:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b43c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b440:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 800b444:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800b448:	2300      	movs	r3, #0
 800b44a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800b44e:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 800b452:	460b      	mov	r3, r1
 800b454:	4313      	orrs	r3, r2
 800b456:	d039      	beq.n	800b4cc <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 800b458:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b45c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b45e:	2b03      	cmp	r3, #3
 800b460:	d81c      	bhi.n	800b49c <HAL_RCCEx_PeriphCLKConfig+0x794>
 800b462:	a201      	add	r2, pc, #4	; (adr r2, 800b468 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 800b464:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b468:	0800b4a5 	.word	0x0800b4a5
 800b46c:	0800b479 	.word	0x0800b479
 800b470:	0800b487 	.word	0x0800b487
 800b474:	0800b4a5 	.word	0x0800b4a5
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b478:	4b67      	ldr	r3, [pc, #412]	; (800b618 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b47a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b47c:	4a66      	ldr	r2, [pc, #408]	; (800b618 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b47e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800b482:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 800b484:	e00f      	b.n	800b4a6 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800b486:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b48a:	3308      	adds	r3, #8
 800b48c:	2102      	movs	r1, #2
 800b48e:	4618      	mov	r0, r3
 800b490:	f002 f82a 	bl	800d4e8 <RCCEx_PLL2_Config>
 800b494:	4603      	mov	r3, r0
 800b496:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 800b49a:	e004      	b.n	800b4a6 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800b49c:	2301      	movs	r3, #1
 800b49e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b4a2:	e000      	b.n	800b4a6 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 800b4a4:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b4a6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b4aa:	2b00      	cmp	r3, #0
 800b4ac:	d10a      	bne.n	800b4c4 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800b4ae:	4b5a      	ldr	r3, [pc, #360]	; (800b618 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b4b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b4b2:	f023 0103 	bic.w	r1, r3, #3
 800b4b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b4ba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b4bc:	4a56      	ldr	r2, [pc, #344]	; (800b618 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b4be:	430b      	orrs	r3, r1
 800b4c0:	64d3      	str	r3, [r2, #76]	; 0x4c
 800b4c2:	e003      	b.n	800b4cc <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b4c4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b4c8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800b4cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b4d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4d4:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 800b4d8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800b4dc:	2300      	movs	r3, #0
 800b4de:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800b4e2:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 800b4e6:	460b      	mov	r3, r1
 800b4e8:	4313      	orrs	r3, r2
 800b4ea:	f000 809f 	beq.w	800b62c <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800b4ee:	4b4b      	ldr	r3, [pc, #300]	; (800b61c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800b4f0:	681b      	ldr	r3, [r3, #0]
 800b4f2:	4a4a      	ldr	r2, [pc, #296]	; (800b61c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800b4f4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800b4f8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800b4fa:	f7f8 fe57 	bl	80041ac <HAL_GetTick>
 800b4fe:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800b502:	e00b      	b.n	800b51c <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800b504:	f7f8 fe52 	bl	80041ac <HAL_GetTick>
 800b508:	4602      	mov	r2, r0
 800b50a:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800b50e:	1ad3      	subs	r3, r2, r3
 800b510:	2b64      	cmp	r3, #100	; 0x64
 800b512:	d903      	bls.n	800b51c <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 800b514:	2303      	movs	r3, #3
 800b516:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b51a:	e005      	b.n	800b528 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800b51c:	4b3f      	ldr	r3, [pc, #252]	; (800b61c <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800b51e:	681b      	ldr	r3, [r3, #0]
 800b520:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b524:	2b00      	cmp	r3, #0
 800b526:	d0ed      	beq.n	800b504 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 800b528:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b52c:	2b00      	cmp	r3, #0
 800b52e:	d179      	bne.n	800b624 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800b530:	4b39      	ldr	r3, [pc, #228]	; (800b618 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b532:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800b534:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b538:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800b53c:	4053      	eors	r3, r2
 800b53e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b542:	2b00      	cmp	r3, #0
 800b544:	d015      	beq.n	800b572 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800b546:	4b34      	ldr	r3, [pc, #208]	; (800b618 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b548:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b54a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b54e:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800b552:	4b31      	ldr	r3, [pc, #196]	; (800b618 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b554:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b556:	4a30      	ldr	r2, [pc, #192]	; (800b618 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b558:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800b55c:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800b55e:	4b2e      	ldr	r3, [pc, #184]	; (800b618 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b560:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b562:	4a2d      	ldr	r2, [pc, #180]	; (800b618 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b564:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b568:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800b56a:	4a2b      	ldr	r2, [pc, #172]	; (800b618 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b56c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800b570:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800b572:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b576:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800b57a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b57e:	d118      	bne.n	800b5b2 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800b580:	f7f8 fe14 	bl	80041ac <HAL_GetTick>
 800b584:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800b588:	e00d      	b.n	800b5a6 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800b58a:	f7f8 fe0f 	bl	80041ac <HAL_GetTick>
 800b58e:	4602      	mov	r2, r0
 800b590:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800b594:	1ad2      	subs	r2, r2, r3
 800b596:	f241 3388 	movw	r3, #5000	; 0x1388
 800b59a:	429a      	cmp	r2, r3
 800b59c:	d903      	bls.n	800b5a6 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 800b59e:	2303      	movs	r3, #3
 800b5a0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
            break;
 800b5a4:	e005      	b.n	800b5b2 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800b5a6:	4b1c      	ldr	r3, [pc, #112]	; (800b618 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b5a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b5aa:	f003 0302 	and.w	r3, r3, #2
 800b5ae:	2b00      	cmp	r3, #0
 800b5b0:	d0eb      	beq.n	800b58a <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 800b5b2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b5b6:	2b00      	cmp	r3, #0
 800b5b8:	d129      	bne.n	800b60e <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800b5ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b5be:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800b5c2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b5c6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b5ca:	d10e      	bne.n	800b5ea <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 800b5cc:	4b12      	ldr	r3, [pc, #72]	; (800b618 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b5ce:	691b      	ldr	r3, [r3, #16]
 800b5d0:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 800b5d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b5d8:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800b5dc:	091a      	lsrs	r2, r3, #4
 800b5de:	4b10      	ldr	r3, [pc, #64]	; (800b620 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 800b5e0:	4013      	ands	r3, r2
 800b5e2:	4a0d      	ldr	r2, [pc, #52]	; (800b618 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b5e4:	430b      	orrs	r3, r1
 800b5e6:	6113      	str	r3, [r2, #16]
 800b5e8:	e005      	b.n	800b5f6 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 800b5ea:	4b0b      	ldr	r3, [pc, #44]	; (800b618 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b5ec:	691b      	ldr	r3, [r3, #16]
 800b5ee:	4a0a      	ldr	r2, [pc, #40]	; (800b618 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b5f0:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800b5f4:	6113      	str	r3, [r2, #16]
 800b5f6:	4b08      	ldr	r3, [pc, #32]	; (800b618 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b5f8:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800b5fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b5fe:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800b602:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b606:	4a04      	ldr	r2, [pc, #16]	; (800b618 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800b608:	430b      	orrs	r3, r1
 800b60a:	6713      	str	r3, [r2, #112]	; 0x70
 800b60c:	e00e      	b.n	800b62c <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800b60e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b612:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
 800b616:	e009      	b.n	800b62c <HAL_RCCEx_PeriphCLKConfig+0x924>
 800b618:	58024400 	.word	0x58024400
 800b61c:	58024800 	.word	0x58024800
 800b620:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b624:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b628:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800b62c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b630:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b634:	f002 0301 	and.w	r3, r2, #1
 800b638:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800b63c:	2300      	movs	r3, #0
 800b63e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800b642:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800b646:	460b      	mov	r3, r1
 800b648:	4313      	orrs	r3, r2
 800b64a:	f000 8089 	beq.w	800b760 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800b64e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b652:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b654:	2b28      	cmp	r3, #40	; 0x28
 800b656:	d86b      	bhi.n	800b730 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 800b658:	a201      	add	r2, pc, #4	; (adr r2, 800b660 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800b65a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b65e:	bf00      	nop
 800b660:	0800b739 	.word	0x0800b739
 800b664:	0800b731 	.word	0x0800b731
 800b668:	0800b731 	.word	0x0800b731
 800b66c:	0800b731 	.word	0x0800b731
 800b670:	0800b731 	.word	0x0800b731
 800b674:	0800b731 	.word	0x0800b731
 800b678:	0800b731 	.word	0x0800b731
 800b67c:	0800b731 	.word	0x0800b731
 800b680:	0800b705 	.word	0x0800b705
 800b684:	0800b731 	.word	0x0800b731
 800b688:	0800b731 	.word	0x0800b731
 800b68c:	0800b731 	.word	0x0800b731
 800b690:	0800b731 	.word	0x0800b731
 800b694:	0800b731 	.word	0x0800b731
 800b698:	0800b731 	.word	0x0800b731
 800b69c:	0800b731 	.word	0x0800b731
 800b6a0:	0800b71b 	.word	0x0800b71b
 800b6a4:	0800b731 	.word	0x0800b731
 800b6a8:	0800b731 	.word	0x0800b731
 800b6ac:	0800b731 	.word	0x0800b731
 800b6b0:	0800b731 	.word	0x0800b731
 800b6b4:	0800b731 	.word	0x0800b731
 800b6b8:	0800b731 	.word	0x0800b731
 800b6bc:	0800b731 	.word	0x0800b731
 800b6c0:	0800b739 	.word	0x0800b739
 800b6c4:	0800b731 	.word	0x0800b731
 800b6c8:	0800b731 	.word	0x0800b731
 800b6cc:	0800b731 	.word	0x0800b731
 800b6d0:	0800b731 	.word	0x0800b731
 800b6d4:	0800b731 	.word	0x0800b731
 800b6d8:	0800b731 	.word	0x0800b731
 800b6dc:	0800b731 	.word	0x0800b731
 800b6e0:	0800b739 	.word	0x0800b739
 800b6e4:	0800b731 	.word	0x0800b731
 800b6e8:	0800b731 	.word	0x0800b731
 800b6ec:	0800b731 	.word	0x0800b731
 800b6f0:	0800b731 	.word	0x0800b731
 800b6f4:	0800b731 	.word	0x0800b731
 800b6f8:	0800b731 	.word	0x0800b731
 800b6fc:	0800b731 	.word	0x0800b731
 800b700:	0800b739 	.word	0x0800b739
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800b704:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b708:	3308      	adds	r3, #8
 800b70a:	2101      	movs	r1, #1
 800b70c:	4618      	mov	r0, r3
 800b70e:	f001 feeb 	bl	800d4e8 <RCCEx_PLL2_Config>
 800b712:	4603      	mov	r3, r0
 800b714:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800b718:	e00f      	b.n	800b73a <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800b71a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b71e:	3328      	adds	r3, #40	; 0x28
 800b720:	2101      	movs	r1, #1
 800b722:	4618      	mov	r0, r3
 800b724:	f001 ff92 	bl	800d64c <RCCEx_PLL3_Config>
 800b728:	4603      	mov	r3, r0
 800b72a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800b72e:	e004      	b.n	800b73a <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b730:	2301      	movs	r3, #1
 800b732:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b736:	e000      	b.n	800b73a <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 800b738:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b73a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b73e:	2b00      	cmp	r3, #0
 800b740:	d10a      	bne.n	800b758 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800b742:	4bbf      	ldr	r3, [pc, #764]	; (800ba40 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800b744:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b746:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 800b74a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b74e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b750:	4abb      	ldr	r2, [pc, #748]	; (800ba40 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800b752:	430b      	orrs	r3, r1
 800b754:	6553      	str	r3, [r2, #84]	; 0x54
 800b756:	e003      	b.n	800b760 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b758:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b75c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800b760:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b764:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b768:	f002 0302 	and.w	r3, r2, #2
 800b76c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800b770:	2300      	movs	r3, #0
 800b772:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800b776:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 800b77a:	460b      	mov	r3, r1
 800b77c:	4313      	orrs	r3, r2
 800b77e:	d041      	beq.n	800b804 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 800b780:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b784:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b786:	2b05      	cmp	r3, #5
 800b788:	d824      	bhi.n	800b7d4 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 800b78a:	a201      	add	r2, pc, #4	; (adr r2, 800b790 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 800b78c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b790:	0800b7dd 	.word	0x0800b7dd
 800b794:	0800b7a9 	.word	0x0800b7a9
 800b798:	0800b7bf 	.word	0x0800b7bf
 800b79c:	0800b7dd 	.word	0x0800b7dd
 800b7a0:	0800b7dd 	.word	0x0800b7dd
 800b7a4:	0800b7dd 	.word	0x0800b7dd
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800b7a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b7ac:	3308      	adds	r3, #8
 800b7ae:	2101      	movs	r1, #1
 800b7b0:	4618      	mov	r0, r3
 800b7b2:	f001 fe99 	bl	800d4e8 <RCCEx_PLL2_Config>
 800b7b6:	4603      	mov	r3, r0
 800b7b8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800b7bc:	e00f      	b.n	800b7de <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800b7be:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b7c2:	3328      	adds	r3, #40	; 0x28
 800b7c4:	2101      	movs	r1, #1
 800b7c6:	4618      	mov	r0, r3
 800b7c8:	f001 ff40 	bl	800d64c <RCCEx_PLL3_Config>
 800b7cc:	4603      	mov	r3, r0
 800b7ce:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800b7d2:	e004      	b.n	800b7de <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b7d4:	2301      	movs	r3, #1
 800b7d6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b7da:	e000      	b.n	800b7de <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 800b7dc:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b7de:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b7e2:	2b00      	cmp	r3, #0
 800b7e4:	d10a      	bne.n	800b7fc <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800b7e6:	4b96      	ldr	r3, [pc, #600]	; (800ba40 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800b7e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b7ea:	f023 0107 	bic.w	r1, r3, #7
 800b7ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b7f2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b7f4:	4a92      	ldr	r2, [pc, #584]	; (800ba40 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800b7f6:	430b      	orrs	r3, r1
 800b7f8:	6553      	str	r3, [r2, #84]	; 0x54
 800b7fa:	e003      	b.n	800b804 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b7fc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b800:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800b804:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b808:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b80c:	f002 0304 	and.w	r3, r2, #4
 800b810:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800b814:	2300      	movs	r3, #0
 800b816:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800b81a:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 800b81e:	460b      	mov	r3, r1
 800b820:	4313      	orrs	r3, r2
 800b822:	d044      	beq.n	800b8ae <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800b824:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b828:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800b82c:	2b05      	cmp	r3, #5
 800b82e:	d825      	bhi.n	800b87c <HAL_RCCEx_PeriphCLKConfig+0xb74>
 800b830:	a201      	add	r2, pc, #4	; (adr r2, 800b838 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 800b832:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b836:	bf00      	nop
 800b838:	0800b885 	.word	0x0800b885
 800b83c:	0800b851 	.word	0x0800b851
 800b840:	0800b867 	.word	0x0800b867
 800b844:	0800b885 	.word	0x0800b885
 800b848:	0800b885 	.word	0x0800b885
 800b84c:	0800b885 	.word	0x0800b885
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800b850:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b854:	3308      	adds	r3, #8
 800b856:	2101      	movs	r1, #1
 800b858:	4618      	mov	r0, r3
 800b85a:	f001 fe45 	bl	800d4e8 <RCCEx_PLL2_Config>
 800b85e:	4603      	mov	r3, r0
 800b860:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800b864:	e00f      	b.n	800b886 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800b866:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b86a:	3328      	adds	r3, #40	; 0x28
 800b86c:	2101      	movs	r1, #1
 800b86e:	4618      	mov	r0, r3
 800b870:	f001 feec 	bl	800d64c <RCCEx_PLL3_Config>
 800b874:	4603      	mov	r3, r0
 800b876:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800b87a:	e004      	b.n	800b886 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b87c:	2301      	movs	r3, #1
 800b87e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b882:	e000      	b.n	800b886 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 800b884:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b886:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b88a:	2b00      	cmp	r3, #0
 800b88c:	d10b      	bne.n	800b8a6 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800b88e:	4b6c      	ldr	r3, [pc, #432]	; (800ba40 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800b890:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b892:	f023 0107 	bic.w	r1, r3, #7
 800b896:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b89a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800b89e:	4a68      	ldr	r2, [pc, #416]	; (800ba40 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800b8a0:	430b      	orrs	r3, r1
 800b8a2:	6593      	str	r3, [r2, #88]	; 0x58
 800b8a4:	e003      	b.n	800b8ae <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b8a6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b8aa:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800b8ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b8b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b8b6:	f002 0320 	and.w	r3, r2, #32
 800b8ba:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800b8be:	2300      	movs	r3, #0
 800b8c0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800b8c4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800b8c8:	460b      	mov	r3, r1
 800b8ca:	4313      	orrs	r3, r2
 800b8cc:	d055      	beq.n	800b97a <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800b8ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b8d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b8d6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800b8da:	d033      	beq.n	800b944 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 800b8dc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800b8e0:	d82c      	bhi.n	800b93c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800b8e2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b8e6:	d02f      	beq.n	800b948 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 800b8e8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b8ec:	d826      	bhi.n	800b93c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800b8ee:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800b8f2:	d02b      	beq.n	800b94c <HAL_RCCEx_PeriphCLKConfig+0xc44>
 800b8f4:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800b8f8:	d820      	bhi.n	800b93c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800b8fa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b8fe:	d012      	beq.n	800b926 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 800b900:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b904:	d81a      	bhi.n	800b93c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800b906:	2b00      	cmp	r3, #0
 800b908:	d022      	beq.n	800b950 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 800b90a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b90e:	d115      	bne.n	800b93c <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b910:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b914:	3308      	adds	r3, #8
 800b916:	2100      	movs	r1, #0
 800b918:	4618      	mov	r0, r3
 800b91a:	f001 fde5 	bl	800d4e8 <RCCEx_PLL2_Config>
 800b91e:	4603      	mov	r3, r0
 800b920:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800b924:	e015      	b.n	800b952 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800b926:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b92a:	3328      	adds	r3, #40	; 0x28
 800b92c:	2102      	movs	r1, #2
 800b92e:	4618      	mov	r0, r3
 800b930:	f001 fe8c 	bl	800d64c <RCCEx_PLL3_Config>
 800b934:	4603      	mov	r3, r0
 800b936:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800b93a:	e00a      	b.n	800b952 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800b93c:	2301      	movs	r3, #1
 800b93e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800b942:	e006      	b.n	800b952 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800b944:	bf00      	nop
 800b946:	e004      	b.n	800b952 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800b948:	bf00      	nop
 800b94a:	e002      	b.n	800b952 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800b94c:	bf00      	nop
 800b94e:	e000      	b.n	800b952 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800b950:	bf00      	nop
    }

    if (ret == HAL_OK)
 800b952:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b956:	2b00      	cmp	r3, #0
 800b958:	d10b      	bne.n	800b972 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800b95a:	4b39      	ldr	r3, [pc, #228]	; (800ba40 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800b95c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b95e:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 800b962:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b966:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b96a:	4a35      	ldr	r2, [pc, #212]	; (800ba40 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800b96c:	430b      	orrs	r3, r1
 800b96e:	6553      	str	r3, [r2, #84]	; 0x54
 800b970:	e003      	b.n	800b97a <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800b972:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800b976:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800b97a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b97e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b982:	f002 0340 	and.w	r3, r2, #64	; 0x40
 800b986:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800b98a:	2300      	movs	r3, #0
 800b98c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800b990:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 800b994:	460b      	mov	r3, r1
 800b996:	4313      	orrs	r3, r2
 800b998:	d058      	beq.n	800ba4c <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800b99a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b99e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800b9a2:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800b9a6:	d033      	beq.n	800ba10 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 800b9a8:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800b9ac:	d82c      	bhi.n	800ba08 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800b9ae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b9b2:	d02f      	beq.n	800ba14 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 800b9b4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b9b8:	d826      	bhi.n	800ba08 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800b9ba:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800b9be:	d02b      	beq.n	800ba18 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 800b9c0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800b9c4:	d820      	bhi.n	800ba08 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800b9c6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b9ca:	d012      	beq.n	800b9f2 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 800b9cc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b9d0:	d81a      	bhi.n	800ba08 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800b9d2:	2b00      	cmp	r3, #0
 800b9d4:	d022      	beq.n	800ba1c <HAL_RCCEx_PeriphCLKConfig+0xd14>
 800b9d6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b9da:	d115      	bne.n	800ba08 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b9dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b9e0:	3308      	adds	r3, #8
 800b9e2:	2100      	movs	r1, #0
 800b9e4:	4618      	mov	r0, r3
 800b9e6:	f001 fd7f 	bl	800d4e8 <RCCEx_PLL2_Config>
 800b9ea:	4603      	mov	r3, r0
 800b9ec:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800b9f0:	e015      	b.n	800ba1e <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800b9f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800b9f6:	3328      	adds	r3, #40	; 0x28
 800b9f8:	2102      	movs	r1, #2
 800b9fa:	4618      	mov	r0, r3
 800b9fc:	f001 fe26 	bl	800d64c <RCCEx_PLL3_Config>
 800ba00:	4603      	mov	r3, r0
 800ba02:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800ba06:	e00a      	b.n	800ba1e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800ba08:	2301      	movs	r3, #1
 800ba0a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800ba0e:	e006      	b.n	800ba1e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800ba10:	bf00      	nop
 800ba12:	e004      	b.n	800ba1e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800ba14:	bf00      	nop
 800ba16:	e002      	b.n	800ba1e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800ba18:	bf00      	nop
 800ba1a:	e000      	b.n	800ba1e <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800ba1c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ba1e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ba22:	2b00      	cmp	r3, #0
 800ba24:	d10e      	bne.n	800ba44 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800ba26:	4b06      	ldr	r3, [pc, #24]	; (800ba40 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800ba28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ba2a:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 800ba2e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ba32:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800ba36:	4a02      	ldr	r2, [pc, #8]	; (800ba40 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800ba38:	430b      	orrs	r3, r1
 800ba3a:	6593      	str	r3, [r2, #88]	; 0x58
 800ba3c:	e006      	b.n	800ba4c <HAL_RCCEx_PeriphCLKConfig+0xd44>
 800ba3e:	bf00      	nop
 800ba40:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ba44:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ba48:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800ba4c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ba50:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba54:	f002 0380 	and.w	r3, r2, #128	; 0x80
 800ba58:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800ba5c:	2300      	movs	r3, #0
 800ba5e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800ba62:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 800ba66:	460b      	mov	r3, r1
 800ba68:	4313      	orrs	r3, r2
 800ba6a:	d055      	beq.n	800bb18 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 800ba6c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ba70:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800ba74:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800ba78:	d033      	beq.n	800bae2 <HAL_RCCEx_PeriphCLKConfig+0xdda>
 800ba7a:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800ba7e:	d82c      	bhi.n	800bada <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800ba80:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ba84:	d02f      	beq.n	800bae6 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 800ba86:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ba8a:	d826      	bhi.n	800bada <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800ba8c:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800ba90:	d02b      	beq.n	800baea <HAL_RCCEx_PeriphCLKConfig+0xde2>
 800ba92:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800ba96:	d820      	bhi.n	800bada <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800ba98:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800ba9c:	d012      	beq.n	800bac4 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 800ba9e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800baa2:	d81a      	bhi.n	800bada <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800baa4:	2b00      	cmp	r3, #0
 800baa6:	d022      	beq.n	800baee <HAL_RCCEx_PeriphCLKConfig+0xde6>
 800baa8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800baac:	d115      	bne.n	800bada <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800baae:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bab2:	3308      	adds	r3, #8
 800bab4:	2100      	movs	r1, #0
 800bab6:	4618      	mov	r0, r3
 800bab8:	f001 fd16 	bl	800d4e8 <RCCEx_PLL2_Config>
 800babc:	4603      	mov	r3, r0
 800babe:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800bac2:	e015      	b.n	800baf0 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800bac4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bac8:	3328      	adds	r3, #40	; 0x28
 800baca:	2102      	movs	r1, #2
 800bacc:	4618      	mov	r0, r3
 800bace:	f001 fdbd 	bl	800d64c <RCCEx_PLL3_Config>
 800bad2:	4603      	mov	r3, r0
 800bad4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800bad8:	e00a      	b.n	800baf0 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800bada:	2301      	movs	r3, #1
 800badc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800bae0:	e006      	b.n	800baf0 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800bae2:	bf00      	nop
 800bae4:	e004      	b.n	800baf0 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800bae6:	bf00      	nop
 800bae8:	e002      	b.n	800baf0 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800baea:	bf00      	nop
 800baec:	e000      	b.n	800baf0 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800baee:	bf00      	nop
    }

    if (ret == HAL_OK)
 800baf0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800baf4:	2b00      	cmp	r3, #0
 800baf6:	d10b      	bne.n	800bb10 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800baf8:	4ba1      	ldr	r3, [pc, #644]	; (800bd80 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800bafa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bafc:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 800bb00:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bb04:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800bb08:	4a9d      	ldr	r2, [pc, #628]	; (800bd80 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800bb0a:	430b      	orrs	r3, r1
 800bb0c:	6593      	str	r3, [r2, #88]	; 0x58
 800bb0e:	e003      	b.n	800bb18 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bb10:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800bb14:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800bb18:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bb1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb20:	f002 0308 	and.w	r3, r2, #8
 800bb24:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800bb28:	2300      	movs	r3, #0
 800bb2a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800bb2e:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 800bb32:	460b      	mov	r3, r1
 800bb34:	4313      	orrs	r3, r2
 800bb36:	d01e      	beq.n	800bb76 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 800bb38:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bb3c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800bb40:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bb44:	d10c      	bne.n	800bb60 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800bb46:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bb4a:	3328      	adds	r3, #40	; 0x28
 800bb4c:	2102      	movs	r1, #2
 800bb4e:	4618      	mov	r0, r3
 800bb50:	f001 fd7c 	bl	800d64c <RCCEx_PLL3_Config>
 800bb54:	4603      	mov	r3, r0
 800bb56:	2b00      	cmp	r3, #0
 800bb58:	d002      	beq.n	800bb60 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 800bb5a:	2301      	movs	r3, #1
 800bb5c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800bb60:	4b87      	ldr	r3, [pc, #540]	; (800bd80 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800bb62:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bb64:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800bb68:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bb6c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800bb70:	4a83      	ldr	r2, [pc, #524]	; (800bd80 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800bb72:	430b      	orrs	r3, r1
 800bb74:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800bb76:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bb7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb7e:	f002 0310 	and.w	r3, r2, #16
 800bb82:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800bb86:	2300      	movs	r3, #0
 800bb88:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800bb8c:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 800bb90:	460b      	mov	r3, r1
 800bb92:	4313      	orrs	r3, r2
 800bb94:	d01e      	beq.n	800bbd4 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800bb96:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bb9a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800bb9e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bba2:	d10c      	bne.n	800bbbe <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800bba4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bba8:	3328      	adds	r3, #40	; 0x28
 800bbaa:	2102      	movs	r1, #2
 800bbac:	4618      	mov	r0, r3
 800bbae:	f001 fd4d 	bl	800d64c <RCCEx_PLL3_Config>
 800bbb2:	4603      	mov	r3, r0
 800bbb4:	2b00      	cmp	r3, #0
 800bbb6:	d002      	beq.n	800bbbe <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 800bbb8:	2301      	movs	r3, #1
 800bbba:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800bbbe:	4b70      	ldr	r3, [pc, #448]	; (800bd80 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800bbc0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bbc2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800bbc6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bbca:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800bbce:	4a6c      	ldr	r2, [pc, #432]	; (800bd80 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800bbd0:	430b      	orrs	r3, r1
 800bbd2:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800bbd4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bbd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bbdc:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 800bbe0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800bbe4:	2300      	movs	r3, #0
 800bbe6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800bbea:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 800bbee:	460b      	mov	r3, r1
 800bbf0:	4313      	orrs	r3, r2
 800bbf2:	d03e      	beq.n	800bc72 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 800bbf4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bbf8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800bbfc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800bc00:	d022      	beq.n	800bc48 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 800bc02:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800bc06:	d81b      	bhi.n	800bc40 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 800bc08:	2b00      	cmp	r3, #0
 800bc0a:	d003      	beq.n	800bc14 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 800bc0c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800bc10:	d00b      	beq.n	800bc2a <HAL_RCCEx_PeriphCLKConfig+0xf22>
 800bc12:	e015      	b.n	800bc40 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800bc14:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bc18:	3308      	adds	r3, #8
 800bc1a:	2100      	movs	r1, #0
 800bc1c:	4618      	mov	r0, r3
 800bc1e:	f001 fc63 	bl	800d4e8 <RCCEx_PLL2_Config>
 800bc22:	4603      	mov	r3, r0
 800bc24:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800bc28:	e00f      	b.n	800bc4a <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800bc2a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bc2e:	3328      	adds	r3, #40	; 0x28
 800bc30:	2102      	movs	r1, #2
 800bc32:	4618      	mov	r0, r3
 800bc34:	f001 fd0a 	bl	800d64c <RCCEx_PLL3_Config>
 800bc38:	4603      	mov	r3, r0
 800bc3a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800bc3e:	e004      	b.n	800bc4a <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800bc40:	2301      	movs	r3, #1
 800bc42:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800bc46:	e000      	b.n	800bc4a <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 800bc48:	bf00      	nop
    }

    if (ret == HAL_OK)
 800bc4a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800bc4e:	2b00      	cmp	r3, #0
 800bc50:	d10b      	bne.n	800bc6a <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800bc52:	4b4b      	ldr	r3, [pc, #300]	; (800bd80 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800bc54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800bc56:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 800bc5a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bc5e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800bc62:	4a47      	ldr	r2, [pc, #284]	; (800bd80 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800bc64:	430b      	orrs	r3, r1
 800bc66:	6593      	str	r3, [r2, #88]	; 0x58
 800bc68:	e003      	b.n	800bc72 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bc6a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800bc6e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800bc72:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bc76:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc7a:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 800bc7e:	67bb      	str	r3, [r7, #120]	; 0x78
 800bc80:	2300      	movs	r3, #0
 800bc82:	67fb      	str	r3, [r7, #124]	; 0x7c
 800bc84:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 800bc88:	460b      	mov	r3, r1
 800bc8a:	4313      	orrs	r3, r2
 800bc8c:	d03b      	beq.n	800bd06 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800bc8e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bc92:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bc96:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800bc9a:	d01f      	beq.n	800bcdc <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 800bc9c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800bca0:	d818      	bhi.n	800bcd4 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 800bca2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800bca6:	d003      	beq.n	800bcb0 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 800bca8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800bcac:	d007      	beq.n	800bcbe <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 800bcae:	e011      	b.n	800bcd4 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800bcb0:	4b33      	ldr	r3, [pc, #204]	; (800bd80 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800bcb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bcb4:	4a32      	ldr	r2, [pc, #200]	; (800bd80 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800bcb6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800bcba:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 800bcbc:	e00f      	b.n	800bcde <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800bcbe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bcc2:	3328      	adds	r3, #40	; 0x28
 800bcc4:	2101      	movs	r1, #1
 800bcc6:	4618      	mov	r0, r3
 800bcc8:	f001 fcc0 	bl	800d64c <RCCEx_PLL3_Config>
 800bccc:	4603      	mov	r3, r0
 800bcce:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 800bcd2:	e004      	b.n	800bcde <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800bcd4:	2301      	movs	r3, #1
 800bcd6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800bcda:	e000      	b.n	800bcde <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 800bcdc:	bf00      	nop
    }

    if (ret == HAL_OK)
 800bcde:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800bce2:	2b00      	cmp	r3, #0
 800bce4:	d10b      	bne.n	800bcfe <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800bce6:	4b26      	ldr	r3, [pc, #152]	; (800bd80 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800bce8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bcea:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800bcee:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bcf2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bcf6:	4a22      	ldr	r2, [pc, #136]	; (800bd80 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800bcf8:	430b      	orrs	r3, r1
 800bcfa:	6553      	str	r3, [r2, #84]	; 0x54
 800bcfc:	e003      	b.n	800bd06 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bcfe:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800bd02:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800bd06:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bd0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd0e:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 800bd12:	673b      	str	r3, [r7, #112]	; 0x70
 800bd14:	2300      	movs	r3, #0
 800bd16:	677b      	str	r3, [r7, #116]	; 0x74
 800bd18:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 800bd1c:	460b      	mov	r3, r1
 800bd1e:	4313      	orrs	r3, r2
 800bd20:	d034      	beq.n	800bd8c <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800bd22:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bd26:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bd28:	2b00      	cmp	r3, #0
 800bd2a:	d003      	beq.n	800bd34 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 800bd2c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800bd30:	d007      	beq.n	800bd42 <HAL_RCCEx_PeriphCLKConfig+0x103a>
 800bd32:	e011      	b.n	800bd58 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800bd34:	4b12      	ldr	r3, [pc, #72]	; (800bd80 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800bd36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bd38:	4a11      	ldr	r2, [pc, #68]	; (800bd80 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800bd3a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800bd3e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800bd40:	e00e      	b.n	800bd60 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800bd42:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bd46:	3308      	adds	r3, #8
 800bd48:	2102      	movs	r1, #2
 800bd4a:	4618      	mov	r0, r3
 800bd4c:	f001 fbcc 	bl	800d4e8 <RCCEx_PLL2_Config>
 800bd50:	4603      	mov	r3, r0
 800bd52:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800bd56:	e003      	b.n	800bd60 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 800bd58:	2301      	movs	r3, #1
 800bd5a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800bd5e:	bf00      	nop
    }

    if (ret == HAL_OK)
 800bd60:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800bd64:	2b00      	cmp	r3, #0
 800bd66:	d10d      	bne.n	800bd84 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800bd68:	4b05      	ldr	r3, [pc, #20]	; (800bd80 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800bd6a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bd6c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800bd70:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bd74:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bd76:	4a02      	ldr	r2, [pc, #8]	; (800bd80 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800bd78:	430b      	orrs	r3, r1
 800bd7a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800bd7c:	e006      	b.n	800bd8c <HAL_RCCEx_PeriphCLKConfig+0x1084>
 800bd7e:	bf00      	nop
 800bd80:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bd84:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800bd88:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800bd8c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bd90:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd94:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 800bd98:	66bb      	str	r3, [r7, #104]	; 0x68
 800bd9a:	2300      	movs	r3, #0
 800bd9c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800bd9e:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 800bda2:	460b      	mov	r3, r1
 800bda4:	4313      	orrs	r3, r2
 800bda6:	d00c      	beq.n	800bdc2 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800bda8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bdac:	3328      	adds	r3, #40	; 0x28
 800bdae:	2102      	movs	r1, #2
 800bdb0:	4618      	mov	r0, r3
 800bdb2:	f001 fc4b 	bl	800d64c <RCCEx_PLL3_Config>
 800bdb6:	4603      	mov	r3, r0
 800bdb8:	2b00      	cmp	r3, #0
 800bdba:	d002      	beq.n	800bdc2 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 800bdbc:	2301      	movs	r3, #1
 800bdbe:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800bdc2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bdc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bdca:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 800bdce:	663b      	str	r3, [r7, #96]	; 0x60
 800bdd0:	2300      	movs	r3, #0
 800bdd2:	667b      	str	r3, [r7, #100]	; 0x64
 800bdd4:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 800bdd8:	460b      	mov	r3, r1
 800bdda:	4313      	orrs	r3, r2
 800bddc:	d038      	beq.n	800be50 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 800bdde:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bde2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800bde6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800bdea:	d018      	beq.n	800be1e <HAL_RCCEx_PeriphCLKConfig+0x1116>
 800bdec:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800bdf0:	d811      	bhi.n	800be16 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800bdf2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800bdf6:	d014      	beq.n	800be22 <HAL_RCCEx_PeriphCLKConfig+0x111a>
 800bdf8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800bdfc:	d80b      	bhi.n	800be16 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800bdfe:	2b00      	cmp	r3, #0
 800be00:	d011      	beq.n	800be26 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 800be02:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800be06:	d106      	bne.n	800be16 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800be08:	4bc3      	ldr	r3, [pc, #780]	; (800c118 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800be0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800be0c:	4ac2      	ldr	r2, [pc, #776]	; (800c118 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800be0e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800be12:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 800be14:	e008      	b.n	800be28 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800be16:	2301      	movs	r3, #1
 800be18:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800be1c:	e004      	b.n	800be28 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800be1e:	bf00      	nop
 800be20:	e002      	b.n	800be28 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800be22:	bf00      	nop
 800be24:	e000      	b.n	800be28 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800be26:	bf00      	nop
    }

    if (ret == HAL_OK)
 800be28:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800be2c:	2b00      	cmp	r3, #0
 800be2e:	d10b      	bne.n	800be48 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800be30:	4bb9      	ldr	r3, [pc, #740]	; (800c118 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800be32:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800be34:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800be38:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800be3c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800be40:	4ab5      	ldr	r2, [pc, #724]	; (800c118 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800be42:	430b      	orrs	r3, r1
 800be44:	6553      	str	r3, [r2, #84]	; 0x54
 800be46:	e003      	b.n	800be50 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800be48:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800be4c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800be50:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800be54:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be58:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 800be5c:	65bb      	str	r3, [r7, #88]	; 0x58
 800be5e:	2300      	movs	r3, #0
 800be60:	65fb      	str	r3, [r7, #92]	; 0x5c
 800be62:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 800be66:	460b      	mov	r3, r1
 800be68:	4313      	orrs	r3, r2
 800be6a:	d009      	beq.n	800be80 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800be6c:	4baa      	ldr	r3, [pc, #680]	; (800c118 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800be6e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800be70:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800be74:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800be78:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800be7a:	4aa7      	ldr	r2, [pc, #668]	; (800c118 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800be7c:	430b      	orrs	r3, r1
 800be7e:	6513      	str	r3, [r2, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800be80:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800be84:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be88:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 800be8c:	653b      	str	r3, [r7, #80]	; 0x50
 800be8e:	2300      	movs	r3, #0
 800be90:	657b      	str	r3, [r7, #84]	; 0x54
 800be92:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 800be96:	460b      	mov	r3, r1
 800be98:	4313      	orrs	r3, r2
 800be9a:	d00a      	beq.n	800beb2 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800be9c:	4b9e      	ldr	r3, [pc, #632]	; (800c118 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800be9e:	691b      	ldr	r3, [r3, #16]
 800bea0:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 800bea4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bea8:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800beac:	4a9a      	ldr	r2, [pc, #616]	; (800c118 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800beae:	430b      	orrs	r3, r1
 800beb0:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800beb2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800beb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800beba:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 800bebe:	64bb      	str	r3, [r7, #72]	; 0x48
 800bec0:	2300      	movs	r3, #0
 800bec2:	64fb      	str	r3, [r7, #76]	; 0x4c
 800bec4:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 800bec8:	460b      	mov	r3, r1
 800beca:	4313      	orrs	r3, r2
 800becc:	d009      	beq.n	800bee2 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800bece:	4b92      	ldr	r3, [pc, #584]	; (800c118 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800bed0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bed2:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 800bed6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800beda:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bedc:	4a8e      	ldr	r2, [pc, #568]	; (800c118 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800bede:	430b      	orrs	r3, r1
 800bee0:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800bee2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bee6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800beea:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 800beee:	643b      	str	r3, [r7, #64]	; 0x40
 800bef0:	2300      	movs	r3, #0
 800bef2:	647b      	str	r3, [r7, #68]	; 0x44
 800bef4:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 800bef8:	460b      	mov	r3, r1
 800befa:	4313      	orrs	r3, r2
 800befc:	d00e      	beq.n	800bf1c <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800befe:	4b86      	ldr	r3, [pc, #536]	; (800c118 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800bf00:	691b      	ldr	r3, [r3, #16]
 800bf02:	4a85      	ldr	r2, [pc, #532]	; (800c118 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800bf04:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800bf08:	6113      	str	r3, [r2, #16]
 800bf0a:	4b83      	ldr	r3, [pc, #524]	; (800c118 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800bf0c:	6919      	ldr	r1, [r3, #16]
 800bf0e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bf12:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800bf16:	4a80      	ldr	r2, [pc, #512]	; (800c118 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800bf18:	430b      	orrs	r3, r1
 800bf1a:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800bf1c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bf20:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf24:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 800bf28:	63bb      	str	r3, [r7, #56]	; 0x38
 800bf2a:	2300      	movs	r3, #0
 800bf2c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800bf2e:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 800bf32:	460b      	mov	r3, r1
 800bf34:	4313      	orrs	r3, r2
 800bf36:	d009      	beq.n	800bf4c <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800bf38:	4b77      	ldr	r3, [pc, #476]	; (800c118 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800bf3a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800bf3c:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 800bf40:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bf44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bf46:	4a74      	ldr	r2, [pc, #464]	; (800c118 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800bf48:	430b      	orrs	r3, r1
 800bf4a:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800bf4c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bf50:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf54:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 800bf58:	633b      	str	r3, [r7, #48]	; 0x30
 800bf5a:	2300      	movs	r3, #0
 800bf5c:	637b      	str	r3, [r7, #52]	; 0x34
 800bf5e:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 800bf62:	460b      	mov	r3, r1
 800bf64:	4313      	orrs	r3, r2
 800bf66:	d00a      	beq.n	800bf7e <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800bf68:	4b6b      	ldr	r3, [pc, #428]	; (800c118 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800bf6a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800bf6c:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 800bf70:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bf74:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800bf78:	4a67      	ldr	r2, [pc, #412]	; (800c118 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800bf7a:	430b      	orrs	r3, r1
 800bf7c:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800bf7e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bf82:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf86:	2100      	movs	r1, #0
 800bf88:	62b9      	str	r1, [r7, #40]	; 0x28
 800bf8a:	f003 0301 	and.w	r3, r3, #1
 800bf8e:	62fb      	str	r3, [r7, #44]	; 0x2c
 800bf90:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 800bf94:	460b      	mov	r3, r1
 800bf96:	4313      	orrs	r3, r2
 800bf98:	d011      	beq.n	800bfbe <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800bf9a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bf9e:	3308      	adds	r3, #8
 800bfa0:	2100      	movs	r1, #0
 800bfa2:	4618      	mov	r0, r3
 800bfa4:	f001 faa0 	bl	800d4e8 <RCCEx_PLL2_Config>
 800bfa8:	4603      	mov	r3, r0
 800bfaa:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800bfae:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800bfb2:	2b00      	cmp	r3, #0
 800bfb4:	d003      	beq.n	800bfbe <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bfb6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800bfba:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800bfbe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bfc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bfc6:	2100      	movs	r1, #0
 800bfc8:	6239      	str	r1, [r7, #32]
 800bfca:	f003 0302 	and.w	r3, r3, #2
 800bfce:	627b      	str	r3, [r7, #36]	; 0x24
 800bfd0:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800bfd4:	460b      	mov	r3, r1
 800bfd6:	4313      	orrs	r3, r2
 800bfd8:	d011      	beq.n	800bffe <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800bfda:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800bfde:	3308      	adds	r3, #8
 800bfe0:	2101      	movs	r1, #1
 800bfe2:	4618      	mov	r0, r3
 800bfe4:	f001 fa80 	bl	800d4e8 <RCCEx_PLL2_Config>
 800bfe8:	4603      	mov	r3, r0
 800bfea:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800bfee:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800bff2:	2b00      	cmp	r3, #0
 800bff4:	d003      	beq.n	800bffe <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800bff6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800bffa:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800bffe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c002:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c006:	2100      	movs	r1, #0
 800c008:	61b9      	str	r1, [r7, #24]
 800c00a:	f003 0304 	and.w	r3, r3, #4
 800c00e:	61fb      	str	r3, [r7, #28]
 800c010:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800c014:	460b      	mov	r3, r1
 800c016:	4313      	orrs	r3, r2
 800c018:	d011      	beq.n	800c03e <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800c01a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c01e:	3308      	adds	r3, #8
 800c020:	2102      	movs	r1, #2
 800c022:	4618      	mov	r0, r3
 800c024:	f001 fa60 	bl	800d4e8 <RCCEx_PLL2_Config>
 800c028:	4603      	mov	r3, r0
 800c02a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800c02e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c032:	2b00      	cmp	r3, #0
 800c034:	d003      	beq.n	800c03e <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c036:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c03a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800c03e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c042:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c046:	2100      	movs	r1, #0
 800c048:	6139      	str	r1, [r7, #16]
 800c04a:	f003 0308 	and.w	r3, r3, #8
 800c04e:	617b      	str	r3, [r7, #20]
 800c050:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800c054:	460b      	mov	r3, r1
 800c056:	4313      	orrs	r3, r2
 800c058:	d011      	beq.n	800c07e <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800c05a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c05e:	3328      	adds	r3, #40	; 0x28
 800c060:	2100      	movs	r1, #0
 800c062:	4618      	mov	r0, r3
 800c064:	f001 faf2 	bl	800d64c <RCCEx_PLL3_Config>
 800c068:	4603      	mov	r3, r0
 800c06a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  
    if (ret == HAL_OK)
 800c06e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c072:	2b00      	cmp	r3, #0
 800c074:	d003      	beq.n	800c07e <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c076:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c07a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800c07e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c082:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c086:	2100      	movs	r1, #0
 800c088:	60b9      	str	r1, [r7, #8]
 800c08a:	f003 0310 	and.w	r3, r3, #16
 800c08e:	60fb      	str	r3, [r7, #12]
 800c090:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800c094:	460b      	mov	r3, r1
 800c096:	4313      	orrs	r3, r2
 800c098:	d011      	beq.n	800c0be <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800c09a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c09e:	3328      	adds	r3, #40	; 0x28
 800c0a0:	2101      	movs	r1, #1
 800c0a2:	4618      	mov	r0, r3
 800c0a4:	f001 fad2 	bl	800d64c <RCCEx_PLL3_Config>
 800c0a8:	4603      	mov	r3, r0
 800c0aa:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800c0ae:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c0b2:	2b00      	cmp	r3, #0
 800c0b4:	d003      	beq.n	800c0be <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c0b6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c0ba:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800c0be:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c0c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c0c6:	2100      	movs	r1, #0
 800c0c8:	6039      	str	r1, [r7, #0]
 800c0ca:	f003 0320 	and.w	r3, r3, #32
 800c0ce:	607b      	str	r3, [r7, #4]
 800c0d0:	e9d7 1200 	ldrd	r1, r2, [r7]
 800c0d4:	460b      	mov	r3, r1
 800c0d6:	4313      	orrs	r3, r2
 800c0d8:	d011      	beq.n	800c0fe <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800c0da:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800c0de:	3328      	adds	r3, #40	; 0x28
 800c0e0:	2102      	movs	r1, #2
 800c0e2:	4618      	mov	r0, r3
 800c0e4:	f001 fab2 	bl	800d64c <RCCEx_PLL3_Config>
 800c0e8:	4603      	mov	r3, r0
 800c0ea:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800c0ee:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c0f2:	2b00      	cmp	r3, #0
 800c0f4:	d003      	beq.n	800c0fe <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800c0f6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800c0fa:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }

  if (status == HAL_OK)
 800c0fe:	f897 3126 	ldrb.w	r3, [r7, #294]	; 0x126
 800c102:	2b00      	cmp	r3, #0
 800c104:	d101      	bne.n	800c10a <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 800c106:	2300      	movs	r3, #0
 800c108:	e000      	b.n	800c10c <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 800c10a:	2301      	movs	r3, #1
}
 800c10c:	4618      	mov	r0, r3
 800c10e:	f507 7794 	add.w	r7, r7, #296	; 0x128
 800c112:	46bd      	mov	sp, r7
 800c114:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800c118:	58024400 	.word	0x58024400

0800c11c <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 800c11c:	b580      	push	{r7, lr}
 800c11e:	b090      	sub	sp, #64	; 0x40
 800c120:	af00      	add	r7, sp, #0
 800c122:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800c126:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c12a:	f5a2 7180 	sub.w	r1, r2, #256	; 0x100
 800c12e:	430b      	orrs	r3, r1
 800c130:	f040 8094 	bne.w	800c25c <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 800c134:	4b9e      	ldr	r3, [pc, #632]	; (800c3b0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c136:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c138:	f003 0307 	and.w	r3, r3, #7
 800c13c:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800c13e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c140:	2b04      	cmp	r3, #4
 800c142:	f200 8087 	bhi.w	800c254 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 800c146:	a201      	add	r2, pc, #4	; (adr r2, 800c14c <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 800c148:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c14c:	0800c161 	.word	0x0800c161
 800c150:	0800c189 	.word	0x0800c189
 800c154:	0800c1b1 	.word	0x0800c1b1
 800c158:	0800c24d 	.word	0x0800c24d
 800c15c:	0800c1d9 	.word	0x0800c1d9
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800c160:	4b93      	ldr	r3, [pc, #588]	; (800c3b0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c162:	681b      	ldr	r3, [r3, #0]
 800c164:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c168:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c16c:	d108      	bne.n	800c180 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c16e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c172:	4618      	mov	r0, r3
 800c174:	f001 f810 	bl	800d198 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800c178:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c17a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c17c:	f000 bd45 	b.w	800cc0a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c180:	2300      	movs	r3, #0
 800c182:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c184:	f000 bd41 	b.w	800cc0a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c188:	4b89      	ldr	r3, [pc, #548]	; (800c3b0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c18a:	681b      	ldr	r3, [r3, #0]
 800c18c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c190:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c194:	d108      	bne.n	800c1a8 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c196:	f107 0318 	add.w	r3, r7, #24
 800c19a:	4618      	mov	r0, r3
 800c19c:	f000 fd54 	bl	800cc48 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800c1a0:	69bb      	ldr	r3, [r7, #24]
 800c1a2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c1a4:	f000 bd31 	b.w	800cc0a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c1a8:	2300      	movs	r3, #0
 800c1aa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c1ac:	f000 bd2d 	b.w	800cc0a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800c1b0:	4b7f      	ldr	r3, [pc, #508]	; (800c3b0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c1b2:	681b      	ldr	r3, [r3, #0]
 800c1b4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c1b8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c1bc:	d108      	bne.n	800c1d0 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c1be:	f107 030c 	add.w	r3, r7, #12
 800c1c2:	4618      	mov	r0, r3
 800c1c4:	f000 fe94 	bl	800cef0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800c1c8:	68fb      	ldr	r3, [r7, #12]
 800c1ca:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c1cc:	f000 bd1d 	b.w	800cc0a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c1d0:	2300      	movs	r3, #0
 800c1d2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c1d4:	f000 bd19 	b.w	800cc0a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800c1d8:	4b75      	ldr	r3, [pc, #468]	; (800c3b0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c1da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c1dc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800c1e0:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800c1e2:	4b73      	ldr	r3, [pc, #460]	; (800c3b0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c1e4:	681b      	ldr	r3, [r3, #0]
 800c1e6:	f003 0304 	and.w	r3, r3, #4
 800c1ea:	2b04      	cmp	r3, #4
 800c1ec:	d10c      	bne.n	800c208 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 800c1ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c1f0:	2b00      	cmp	r3, #0
 800c1f2:	d109      	bne.n	800c208 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c1f4:	4b6e      	ldr	r3, [pc, #440]	; (800c3b0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c1f6:	681b      	ldr	r3, [r3, #0]
 800c1f8:	08db      	lsrs	r3, r3, #3
 800c1fa:	f003 0303 	and.w	r3, r3, #3
 800c1fe:	4a6d      	ldr	r2, [pc, #436]	; (800c3b4 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800c200:	fa22 f303 	lsr.w	r3, r2, r3
 800c204:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c206:	e01f      	b.n	800c248 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800c208:	4b69      	ldr	r3, [pc, #420]	; (800c3b0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c20a:	681b      	ldr	r3, [r3, #0]
 800c20c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c210:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c214:	d106      	bne.n	800c224 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 800c216:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c218:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c21c:	d102      	bne.n	800c224 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800c21e:	4b66      	ldr	r3, [pc, #408]	; (800c3b8 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800c220:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c222:	e011      	b.n	800c248 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800c224:	4b62      	ldr	r3, [pc, #392]	; (800c3b0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c226:	681b      	ldr	r3, [r3, #0]
 800c228:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c22c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c230:	d106      	bne.n	800c240 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 800c232:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c234:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c238:	d102      	bne.n	800c240 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800c23a:	4b60      	ldr	r3, [pc, #384]	; (800c3bc <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 800c23c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c23e:	e003      	b.n	800c248 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800c240:	2300      	movs	r3, #0
 800c242:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800c244:	f000 bce1 	b.w	800cc0a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800c248:	f000 bcdf 	b.w	800cc0a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800c24c:	4b5c      	ldr	r3, [pc, #368]	; (800c3c0 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800c24e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c250:	f000 bcdb 	b.w	800cc0a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800c254:	2300      	movs	r3, #0
 800c256:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c258:	f000 bcd7 	b.w	800cc0a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 800c25c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c260:	f5a2 7100 	sub.w	r1, r2, #512	; 0x200
 800c264:	430b      	orrs	r3, r1
 800c266:	f040 80ad 	bne.w	800c3c4 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {

    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 800c26a:	4b51      	ldr	r3, [pc, #324]	; (800c3b0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c26c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c26e:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 800c272:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800c274:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c276:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c27a:	d056      	beq.n	800c32a <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 800c27c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c27e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c282:	f200 8090 	bhi.w	800c3a6 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800c286:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c288:	2bc0      	cmp	r3, #192	; 0xc0
 800c28a:	f000 8088 	beq.w	800c39e <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 800c28e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c290:	2bc0      	cmp	r3, #192	; 0xc0
 800c292:	f200 8088 	bhi.w	800c3a6 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800c296:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c298:	2b80      	cmp	r3, #128	; 0x80
 800c29a:	d032      	beq.n	800c302 <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 800c29c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c29e:	2b80      	cmp	r3, #128	; 0x80
 800c2a0:	f200 8081 	bhi.w	800c3a6 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800c2a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c2a6:	2b00      	cmp	r3, #0
 800c2a8:	d003      	beq.n	800c2b2 <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 800c2aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c2ac:	2b40      	cmp	r3, #64	; 0x40
 800c2ae:	d014      	beq.n	800c2da <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 800c2b0:	e079      	b.n	800c3a6 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
    {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800c2b2:	4b3f      	ldr	r3, [pc, #252]	; (800c3b0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c2b4:	681b      	ldr	r3, [r3, #0]
 800c2b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c2ba:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c2be:	d108      	bne.n	800c2d2 <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c2c0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c2c4:	4618      	mov	r0, r3
 800c2c6:	f000 ff67 	bl	800d198 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800c2ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c2cc:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c2ce:	f000 bc9c 	b.w	800cc0a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c2d2:	2300      	movs	r3, #0
 800c2d4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c2d6:	f000 bc98 	b.w	800cc0a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c2da:	4b35      	ldr	r3, [pc, #212]	; (800c3b0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c2dc:	681b      	ldr	r3, [r3, #0]
 800c2de:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c2e2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c2e6:	d108      	bne.n	800c2fa <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c2e8:	f107 0318 	add.w	r3, r7, #24
 800c2ec:	4618      	mov	r0, r3
 800c2ee:	f000 fcab 	bl	800cc48 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800c2f2:	69bb      	ldr	r3, [r7, #24]
 800c2f4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c2f6:	f000 bc88 	b.w	800cc0a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c2fa:	2300      	movs	r3, #0
 800c2fc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c2fe:	f000 bc84 	b.w	800cc0a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800c302:	4b2b      	ldr	r3, [pc, #172]	; (800c3b0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c304:	681b      	ldr	r3, [r3, #0]
 800c306:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c30a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c30e:	d108      	bne.n	800c322 <HAL_RCCEx_GetPeriphCLKFreq+0x206>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c310:	f107 030c 	add.w	r3, r7, #12
 800c314:	4618      	mov	r0, r3
 800c316:	f000 fdeb 	bl	800cef0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800c31a:	68fb      	ldr	r3, [r7, #12]
 800c31c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c31e:	f000 bc74 	b.w	800cc0a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c322:	2300      	movs	r3, #0
 800c324:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c326:	f000 bc70 	b.w	800cc0a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800c32a:	4b21      	ldr	r3, [pc, #132]	; (800c3b0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c32c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c32e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800c332:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800c334:	4b1e      	ldr	r3, [pc, #120]	; (800c3b0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c336:	681b      	ldr	r3, [r3, #0]
 800c338:	f003 0304 	and.w	r3, r3, #4
 800c33c:	2b04      	cmp	r3, #4
 800c33e:	d10c      	bne.n	800c35a <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 800c340:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c342:	2b00      	cmp	r3, #0
 800c344:	d109      	bne.n	800c35a <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c346:	4b1a      	ldr	r3, [pc, #104]	; (800c3b0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c348:	681b      	ldr	r3, [r3, #0]
 800c34a:	08db      	lsrs	r3, r3, #3
 800c34c:	f003 0303 	and.w	r3, r3, #3
 800c350:	4a18      	ldr	r2, [pc, #96]	; (800c3b4 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800c352:	fa22 f303 	lsr.w	r3, r2, r3
 800c356:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c358:	e01f      	b.n	800c39a <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800c35a:	4b15      	ldr	r3, [pc, #84]	; (800c3b0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c35c:	681b      	ldr	r3, [r3, #0]
 800c35e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c362:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c366:	d106      	bne.n	800c376 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 800c368:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c36a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c36e:	d102      	bne.n	800c376 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800c370:	4b11      	ldr	r3, [pc, #68]	; (800c3b8 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800c372:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c374:	e011      	b.n	800c39a <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800c376:	4b0e      	ldr	r3, [pc, #56]	; (800c3b0 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800c378:	681b      	ldr	r3, [r3, #0]
 800c37a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c37e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c382:	d106      	bne.n	800c392 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
 800c384:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c386:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c38a:	d102      	bne.n	800c392 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800c38c:	4b0b      	ldr	r3, [pc, #44]	; (800c3bc <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 800c38e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c390:	e003      	b.n	800c39a <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800c392:	2300      	movs	r3, #0
 800c394:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800c396:	f000 bc38 	b.w	800cc0a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800c39a:	f000 bc36 	b.w	800cc0a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800c39e:	4b08      	ldr	r3, [pc, #32]	; (800c3c0 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800c3a0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c3a2:	f000 bc32 	b.w	800cc0a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800c3a6:	2300      	movs	r3, #0
 800c3a8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c3aa:	f000 bc2e 	b.w	800cc0a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800c3ae:	bf00      	nop
 800c3b0:	58024400 	.word	0x58024400
 800c3b4:	03d09000 	.word	0x03d09000
 800c3b8:	003d0900 	.word	0x003d0900
 800c3bc:	00989680 	.word	0x00989680
 800c3c0:	00bb8000 	.word	0x00bb8000
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 800c3c4:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c3c8:	f5a2 6180 	sub.w	r1, r2, #1024	; 0x400
 800c3cc:	430b      	orrs	r3, r1
 800c3ce:	f040 809c 	bne.w	800c50a <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 800c3d2:	4b9e      	ldr	r3, [pc, #632]	; (800c64c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c3d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c3d6:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 800c3da:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800c3dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c3de:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800c3e2:	d054      	beq.n	800c48e <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 800c3e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c3e6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800c3ea:	f200 808b 	bhi.w	800c504 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800c3ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c3f0:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800c3f4:	f000 8083 	beq.w	800c4fe <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 800c3f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c3fa:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800c3fe:	f200 8081 	bhi.w	800c504 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800c402:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c404:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800c408:	d02f      	beq.n	800c46a <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
 800c40a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c40c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800c410:	d878      	bhi.n	800c504 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800c412:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c414:	2b00      	cmp	r3, #0
 800c416:	d004      	beq.n	800c422 <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 800c418:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c41a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800c41e:	d012      	beq.n	800c446 <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 800c420:	e070      	b.n	800c504 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800c422:	4b8a      	ldr	r3, [pc, #552]	; (800c64c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c424:	681b      	ldr	r3, [r3, #0]
 800c426:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c42a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c42e:	d107      	bne.n	800c440 <HAL_RCCEx_GetPeriphCLKFreq+0x324>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c430:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c434:	4618      	mov	r0, r3
 800c436:	f000 feaf 	bl	800d198 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800c43a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c43c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c43e:	e3e4      	b.n	800cc0a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c440:	2300      	movs	r3, #0
 800c442:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c444:	e3e1      	b.n	800cc0a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c446:	4b81      	ldr	r3, [pc, #516]	; (800c64c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c448:	681b      	ldr	r3, [r3, #0]
 800c44a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c44e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c452:	d107      	bne.n	800c464 <HAL_RCCEx_GetPeriphCLKFreq+0x348>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c454:	f107 0318 	add.w	r3, r7, #24
 800c458:	4618      	mov	r0, r3
 800c45a:	f000 fbf5 	bl	800cc48 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800c45e:	69bb      	ldr	r3, [r7, #24]
 800c460:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c462:	e3d2      	b.n	800cc0a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c464:	2300      	movs	r3, #0
 800c466:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c468:	e3cf      	b.n	800cc0a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800c46a:	4b78      	ldr	r3, [pc, #480]	; (800c64c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c46c:	681b      	ldr	r3, [r3, #0]
 800c46e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c472:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c476:	d107      	bne.n	800c488 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c478:	f107 030c 	add.w	r3, r7, #12
 800c47c:	4618      	mov	r0, r3
 800c47e:	f000 fd37 	bl	800cef0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800c482:	68fb      	ldr	r3, [r7, #12]
 800c484:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c486:	e3c0      	b.n	800cc0a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c488:	2300      	movs	r3, #0
 800c48a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c48c:	e3bd      	b.n	800cc0a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800c48e:	4b6f      	ldr	r3, [pc, #444]	; (800c64c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c490:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c492:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800c496:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800c498:	4b6c      	ldr	r3, [pc, #432]	; (800c64c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c49a:	681b      	ldr	r3, [r3, #0]
 800c49c:	f003 0304 	and.w	r3, r3, #4
 800c4a0:	2b04      	cmp	r3, #4
 800c4a2:	d10c      	bne.n	800c4be <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 800c4a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c4a6:	2b00      	cmp	r3, #0
 800c4a8:	d109      	bne.n	800c4be <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c4aa:	4b68      	ldr	r3, [pc, #416]	; (800c64c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c4ac:	681b      	ldr	r3, [r3, #0]
 800c4ae:	08db      	lsrs	r3, r3, #3
 800c4b0:	f003 0303 	and.w	r3, r3, #3
 800c4b4:	4a66      	ldr	r2, [pc, #408]	; (800c650 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800c4b6:	fa22 f303 	lsr.w	r3, r2, r3
 800c4ba:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c4bc:	e01e      	b.n	800c4fc <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800c4be:	4b63      	ldr	r3, [pc, #396]	; (800c64c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c4c0:	681b      	ldr	r3, [r3, #0]
 800c4c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c4c6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c4ca:	d106      	bne.n	800c4da <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 800c4cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c4ce:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c4d2:	d102      	bne.n	800c4da <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800c4d4:	4b5f      	ldr	r3, [pc, #380]	; (800c654 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 800c4d6:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c4d8:	e010      	b.n	800c4fc <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800c4da:	4b5c      	ldr	r3, [pc, #368]	; (800c64c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c4dc:	681b      	ldr	r3, [r3, #0]
 800c4de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c4e2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c4e6:	d106      	bne.n	800c4f6 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
 800c4e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c4ea:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c4ee:	d102      	bne.n	800c4f6 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800c4f0:	4b59      	ldr	r3, [pc, #356]	; (800c658 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 800c4f2:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c4f4:	e002      	b.n	800c4fc <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800c4f6:	2300      	movs	r3, #0
 800c4f8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800c4fa:	e386      	b.n	800cc0a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800c4fc:	e385      	b.n	800cc0a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800c4fe:	4b57      	ldr	r3, [pc, #348]	; (800c65c <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 800c500:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c502:	e382      	b.n	800cc0a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800c504:	2300      	movs	r3, #0
 800c506:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c508:	e37f      	b.n	800cc0a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 800c50a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c50e:	f5a2 6100 	sub.w	r1, r2, #2048	; 0x800
 800c512:	430b      	orrs	r3, r1
 800c514:	f040 80a7 	bne.w	800c666 <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 800c518:	4b4c      	ldr	r3, [pc, #304]	; (800c64c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c51a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c51c:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 800c520:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800c522:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c524:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800c528:	d055      	beq.n	800c5d6 <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
 800c52a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c52c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800c530:	f200 8096 	bhi.w	800c660 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800c534:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c536:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800c53a:	f000 8084 	beq.w	800c646 <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 800c53e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c540:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800c544:	f200 808c 	bhi.w	800c660 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800c548:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c54a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c54e:	d030      	beq.n	800c5b2 <HAL_RCCEx_GetPeriphCLKFreq+0x496>
 800c550:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c552:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c556:	f200 8083 	bhi.w	800c660 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800c55a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c55c:	2b00      	cmp	r3, #0
 800c55e:	d004      	beq.n	800c56a <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 800c560:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c562:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800c566:	d012      	beq.n	800c58e <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 800c568:	e07a      	b.n	800c660 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800c56a:	4b38      	ldr	r3, [pc, #224]	; (800c64c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c56c:	681b      	ldr	r3, [r3, #0]
 800c56e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c572:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c576:	d107      	bne.n	800c588 <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c578:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c57c:	4618      	mov	r0, r3
 800c57e:	f000 fe0b 	bl	800d198 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800c582:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c584:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c586:	e340      	b.n	800cc0a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c588:	2300      	movs	r3, #0
 800c58a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c58c:	e33d      	b.n	800cc0a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c58e:	4b2f      	ldr	r3, [pc, #188]	; (800c64c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c590:	681b      	ldr	r3, [r3, #0]
 800c592:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c596:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c59a:	d107      	bne.n	800c5ac <HAL_RCCEx_GetPeriphCLKFreq+0x490>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c59c:	f107 0318 	add.w	r3, r7, #24
 800c5a0:	4618      	mov	r0, r3
 800c5a2:	f000 fb51 	bl	800cc48 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800c5a6:	69bb      	ldr	r3, [r7, #24]
 800c5a8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c5aa:	e32e      	b.n	800cc0a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c5ac:	2300      	movs	r3, #0
 800c5ae:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c5b0:	e32b      	b.n	800cc0a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800c5b2:	4b26      	ldr	r3, [pc, #152]	; (800c64c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c5b4:	681b      	ldr	r3, [r3, #0]
 800c5b6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c5ba:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c5be:	d107      	bne.n	800c5d0 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c5c0:	f107 030c 	add.w	r3, r7, #12
 800c5c4:	4618      	mov	r0, r3
 800c5c6:	f000 fc93 	bl	800cef0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800c5ca:	68fb      	ldr	r3, [r7, #12]
 800c5cc:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c5ce:	e31c      	b.n	800cc0a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c5d0:	2300      	movs	r3, #0
 800c5d2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c5d4:	e319      	b.n	800cc0a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800c5d6:	4b1d      	ldr	r3, [pc, #116]	; (800c64c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c5d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c5da:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800c5de:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800c5e0:	4b1a      	ldr	r3, [pc, #104]	; (800c64c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c5e2:	681b      	ldr	r3, [r3, #0]
 800c5e4:	f003 0304 	and.w	r3, r3, #4
 800c5e8:	2b04      	cmp	r3, #4
 800c5ea:	d10c      	bne.n	800c606 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 800c5ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c5ee:	2b00      	cmp	r3, #0
 800c5f0:	d109      	bne.n	800c606 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c5f2:	4b16      	ldr	r3, [pc, #88]	; (800c64c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c5f4:	681b      	ldr	r3, [r3, #0]
 800c5f6:	08db      	lsrs	r3, r3, #3
 800c5f8:	f003 0303 	and.w	r3, r3, #3
 800c5fc:	4a14      	ldr	r2, [pc, #80]	; (800c650 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800c5fe:	fa22 f303 	lsr.w	r3, r2, r3
 800c602:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c604:	e01e      	b.n	800c644 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800c606:	4b11      	ldr	r3, [pc, #68]	; (800c64c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c608:	681b      	ldr	r3, [r3, #0]
 800c60a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c60e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c612:	d106      	bne.n	800c622 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 800c614:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c616:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c61a:	d102      	bne.n	800c622 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800c61c:	4b0d      	ldr	r3, [pc, #52]	; (800c654 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 800c61e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c620:	e010      	b.n	800c644 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800c622:	4b0a      	ldr	r3, [pc, #40]	; (800c64c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800c624:	681b      	ldr	r3, [r3, #0]
 800c626:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c62a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c62e:	d106      	bne.n	800c63e <HAL_RCCEx_GetPeriphCLKFreq+0x522>
 800c630:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c632:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c636:	d102      	bne.n	800c63e <HAL_RCCEx_GetPeriphCLKFreq+0x522>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800c638:	4b07      	ldr	r3, [pc, #28]	; (800c658 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 800c63a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c63c:	e002      	b.n	800c644 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800c63e:	2300      	movs	r3, #0
 800c640:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800c642:	e2e2      	b.n	800cc0a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800c644:	e2e1      	b.n	800cc0a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800c646:	4b05      	ldr	r3, [pc, #20]	; (800c65c <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 800c648:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c64a:	e2de      	b.n	800cc0a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800c64c:	58024400 	.word	0x58024400
 800c650:	03d09000 	.word	0x03d09000
 800c654:	003d0900 	.word	0x003d0900
 800c658:	00989680 	.word	0x00989680
 800c65c:	00bb8000 	.word	0x00bb8000
      }

      default :
      {
        frequency = 0;
 800c660:	2300      	movs	r3, #0
 800c662:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c664:	e2d1      	b.n	800cc0a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800c666:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c66a:	f5a2 5180 	sub.w	r1, r2, #4096	; 0x1000
 800c66e:	430b      	orrs	r3, r1
 800c670:	f040 809c 	bne.w	800c7ac <HAL_RCCEx_GetPeriphCLKFreq+0x690>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 800c674:	4b93      	ldr	r3, [pc, #588]	; (800c8c4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800c676:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c678:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 800c67c:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800c67e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c680:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800c684:	d054      	beq.n	800c730 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 800c686:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c688:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800c68c:	f200 808b 	bhi.w	800c7a6 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800c690:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c692:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800c696:	f000 8083 	beq.w	800c7a0 <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 800c69a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c69c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800c6a0:	f200 8081 	bhi.w	800c7a6 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800c6a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c6a6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c6aa:	d02f      	beq.n	800c70c <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 800c6ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c6ae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c6b2:	d878      	bhi.n	800c7a6 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800c6b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c6b6:	2b00      	cmp	r3, #0
 800c6b8:	d004      	beq.n	800c6c4 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 800c6ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c6bc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c6c0:	d012      	beq.n	800c6e8 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 800c6c2:	e070      	b.n	800c7a6 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800c6c4:	4b7f      	ldr	r3, [pc, #508]	; (800c8c4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800c6c6:	681b      	ldr	r3, [r3, #0]
 800c6c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c6cc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c6d0:	d107      	bne.n	800c6e2 <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800c6d2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800c6d6:	4618      	mov	r0, r3
 800c6d8:	f000 fd5e 	bl	800d198 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800c6dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c6de:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c6e0:	e293      	b.n	800cc0a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c6e2:	2300      	movs	r3, #0
 800c6e4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c6e6:	e290      	b.n	800cc0a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c6e8:	4b76      	ldr	r3, [pc, #472]	; (800c8c4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800c6ea:	681b      	ldr	r3, [r3, #0]
 800c6ec:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c6f0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c6f4:	d107      	bne.n	800c706 <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c6f6:	f107 0318 	add.w	r3, r7, #24
 800c6fa:	4618      	mov	r0, r3
 800c6fc:	f000 faa4 	bl	800cc48 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800c700:	69bb      	ldr	r3, [r7, #24]
 800c702:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c704:	e281      	b.n	800cc0a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c706:	2300      	movs	r3, #0
 800c708:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c70a:	e27e      	b.n	800cc0a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800c70c:	4b6d      	ldr	r3, [pc, #436]	; (800c8c4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800c70e:	681b      	ldr	r3, [r3, #0]
 800c710:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c714:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c718:	d107      	bne.n	800c72a <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c71a:	f107 030c 	add.w	r3, r7, #12
 800c71e:	4618      	mov	r0, r3
 800c720:	f000 fbe6 	bl	800cef0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800c724:	68fb      	ldr	r3, [r7, #12]
 800c726:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c728:	e26f      	b.n	800cc0a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c72a:	2300      	movs	r3, #0
 800c72c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c72e:	e26c      	b.n	800cc0a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800c730:	4b64      	ldr	r3, [pc, #400]	; (800c8c4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800c732:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c734:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800c738:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800c73a:	4b62      	ldr	r3, [pc, #392]	; (800c8c4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800c73c:	681b      	ldr	r3, [r3, #0]
 800c73e:	f003 0304 	and.w	r3, r3, #4
 800c742:	2b04      	cmp	r3, #4
 800c744:	d10c      	bne.n	800c760 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 800c746:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c748:	2b00      	cmp	r3, #0
 800c74a:	d109      	bne.n	800c760 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c74c:	4b5d      	ldr	r3, [pc, #372]	; (800c8c4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800c74e:	681b      	ldr	r3, [r3, #0]
 800c750:	08db      	lsrs	r3, r3, #3
 800c752:	f003 0303 	and.w	r3, r3, #3
 800c756:	4a5c      	ldr	r2, [pc, #368]	; (800c8c8 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 800c758:	fa22 f303 	lsr.w	r3, r2, r3
 800c75c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c75e:	e01e      	b.n	800c79e <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800c760:	4b58      	ldr	r3, [pc, #352]	; (800c8c4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800c762:	681b      	ldr	r3, [r3, #0]
 800c764:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c768:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c76c:	d106      	bne.n	800c77c <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 800c76e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c770:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c774:	d102      	bne.n	800c77c <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800c776:	4b55      	ldr	r3, [pc, #340]	; (800c8cc <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800c778:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c77a:	e010      	b.n	800c79e <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800c77c:	4b51      	ldr	r3, [pc, #324]	; (800c8c4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800c77e:	681b      	ldr	r3, [r3, #0]
 800c780:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c784:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c788:	d106      	bne.n	800c798 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 800c78a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c78c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c790:	d102      	bne.n	800c798 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800c792:	4b4f      	ldr	r3, [pc, #316]	; (800c8d0 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 800c794:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c796:	e002      	b.n	800c79e <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800c798:	2300      	movs	r3, #0
 800c79a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800c79c:	e235      	b.n	800cc0a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800c79e:	e234      	b.n	800cc0a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800c7a0:	4b4c      	ldr	r3, [pc, #304]	; (800c8d4 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 800c7a2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c7a4:	e231      	b.n	800cc0a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800c7a6:	2300      	movs	r3, #0
 800c7a8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c7aa:	e22e      	b.n	800cc0a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 800c7ac:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c7b0:	f5a2 5100 	sub.w	r1, r2, #8192	; 0x2000
 800c7b4:	430b      	orrs	r3, r1
 800c7b6:	f040 808f 	bne.w	800c8d8 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 800c7ba:	4b42      	ldr	r3, [pc, #264]	; (800c8c4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800c7bc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c7be:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 800c7c2:	63bb      	str	r3, [r7, #56]	; 0x38
    switch (srcclk)
 800c7c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c7c6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800c7ca:	d06b      	beq.n	800c8a4 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 800c7cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c7ce:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800c7d2:	d874      	bhi.n	800c8be <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800c7d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c7d6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800c7da:	d056      	beq.n	800c88a <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 800c7dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c7de:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800c7e2:	d86c      	bhi.n	800c8be <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800c7e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c7e6:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800c7ea:	d03b      	beq.n	800c864 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 800c7ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c7ee:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800c7f2:	d864      	bhi.n	800c8be <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800c7f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c7f6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c7fa:	d021      	beq.n	800c840 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 800c7fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c7fe:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c802:	d85c      	bhi.n	800c8be <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800c804:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c806:	2b00      	cmp	r3, #0
 800c808:	d004      	beq.n	800c814 <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 800c80a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c80c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c810:	d004      	beq.n	800c81c <HAL_RCCEx_GetPeriphCLKFreq+0x700>
 800c812:	e054      	b.n	800c8be <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 800c814:	f7fe fa30 	bl	800ac78 <HAL_RCC_GetPCLK1Freq>
 800c818:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800c81a:	e1f6      	b.n	800cc0a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c81c:	4b29      	ldr	r3, [pc, #164]	; (800c8c4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800c81e:	681b      	ldr	r3, [r3, #0]
 800c820:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c824:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c828:	d107      	bne.n	800c83a <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c82a:	f107 0318 	add.w	r3, r7, #24
 800c82e:	4618      	mov	r0, r3
 800c830:	f000 fa0a 	bl	800cc48 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800c834:	69fb      	ldr	r3, [r7, #28]
 800c836:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c838:	e1e7      	b.n	800cc0a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c83a:	2300      	movs	r3, #0
 800c83c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c83e:	e1e4      	b.n	800cc0a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800c840:	4b20      	ldr	r3, [pc, #128]	; (800c8c4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800c842:	681b      	ldr	r3, [r3, #0]
 800c844:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c848:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c84c:	d107      	bne.n	800c85e <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c84e:	f107 030c 	add.w	r3, r7, #12
 800c852:	4618      	mov	r0, r3
 800c854:	f000 fb4c 	bl	800cef0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800c858:	693b      	ldr	r3, [r7, #16]
 800c85a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c85c:	e1d5      	b.n	800cc0a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c85e:	2300      	movs	r3, #0
 800c860:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c862:	e1d2      	b.n	800cc0a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800c864:	4b17      	ldr	r3, [pc, #92]	; (800c8c4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800c866:	681b      	ldr	r3, [r3, #0]
 800c868:	f003 0304 	and.w	r3, r3, #4
 800c86c:	2b04      	cmp	r3, #4
 800c86e:	d109      	bne.n	800c884 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c870:	4b14      	ldr	r3, [pc, #80]	; (800c8c4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800c872:	681b      	ldr	r3, [r3, #0]
 800c874:	08db      	lsrs	r3, r3, #3
 800c876:	f003 0303 	and.w	r3, r3, #3
 800c87a:	4a13      	ldr	r2, [pc, #76]	; (800c8c8 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 800c87c:	fa22 f303 	lsr.w	r3, r2, r3
 800c880:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c882:	e1c2      	b.n	800cc0a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c884:	2300      	movs	r3, #0
 800c886:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c888:	e1bf      	b.n	800cc0a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800c88a:	4b0e      	ldr	r3, [pc, #56]	; (800c8c4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800c88c:	681b      	ldr	r3, [r3, #0]
 800c88e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c892:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c896:	d102      	bne.n	800c89e <HAL_RCCEx_GetPeriphCLKFreq+0x782>
        {
          frequency = CSI_VALUE;
 800c898:	4b0c      	ldr	r3, [pc, #48]	; (800c8cc <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800c89a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c89c:	e1b5      	b.n	800cc0a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c89e:	2300      	movs	r3, #0
 800c8a0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c8a2:	e1b2      	b.n	800cc0a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800c8a4:	4b07      	ldr	r3, [pc, #28]	; (800c8c4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800c8a6:	681b      	ldr	r3, [r3, #0]
 800c8a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c8ac:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c8b0:	d102      	bne.n	800c8b8 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
        {
          frequency = HSE_VALUE;
 800c8b2:	4b07      	ldr	r3, [pc, #28]	; (800c8d0 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 800c8b4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c8b6:	e1a8      	b.n	800cc0a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c8b8:	2300      	movs	r3, #0
 800c8ba:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c8bc:	e1a5      	b.n	800cc0a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800c8be:	2300      	movs	r3, #0
 800c8c0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c8c2:	e1a2      	b.n	800cc0a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800c8c4:	58024400 	.word	0x58024400
 800c8c8:	03d09000 	.word	0x03d09000
 800c8cc:	003d0900 	.word	0x003d0900
 800c8d0:	00989680 	.word	0x00989680
 800c8d4:	00bb8000 	.word	0x00bb8000
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800c8d8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c8dc:	f5a2 2100 	sub.w	r1, r2, #524288	; 0x80000
 800c8e0:	430b      	orrs	r3, r1
 800c8e2:	d173      	bne.n	800c9cc <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 800c8e4:	4b9c      	ldr	r3, [pc, #624]	; (800cb58 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800c8e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c8e8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800c8ec:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800c8ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c8f0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c8f4:	d02f      	beq.n	800c956 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 800c8f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c8f8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c8fc:	d863      	bhi.n	800c9c6 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
 800c8fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c900:	2b00      	cmp	r3, #0
 800c902:	d004      	beq.n	800c90e <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 800c904:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c906:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c90a:	d012      	beq.n	800c932 <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 800c90c:	e05b      	b.n	800c9c6 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800c90e:	4b92      	ldr	r3, [pc, #584]	; (800cb58 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800c910:	681b      	ldr	r3, [r3, #0]
 800c912:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c916:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800c91a:	d107      	bne.n	800c92c <HAL_RCCEx_GetPeriphCLKFreq+0x810>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c91c:	f107 0318 	add.w	r3, r7, #24
 800c920:	4618      	mov	r0, r3
 800c922:	f000 f991 	bl	800cc48 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800c926:	69bb      	ldr	r3, [r7, #24]
 800c928:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c92a:	e16e      	b.n	800cc0a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c92c:	2300      	movs	r3, #0
 800c92e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c930:	e16b      	b.n	800cc0a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800c932:	4b89      	ldr	r3, [pc, #548]	; (800cb58 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800c934:	681b      	ldr	r3, [r3, #0]
 800c936:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c93a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c93e:	d107      	bne.n	800c950 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c940:	f107 030c 	add.w	r3, r7, #12
 800c944:	4618      	mov	r0, r3
 800c946:	f000 fad3 	bl	800cef0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800c94a:	697b      	ldr	r3, [r7, #20]
 800c94c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800c94e:	e15c      	b.n	800cc0a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800c950:	2300      	movs	r3, #0
 800c952:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c954:	e159      	b.n	800cc0a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800c956:	4b80      	ldr	r3, [pc, #512]	; (800cb58 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800c958:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c95a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800c95e:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800c960:	4b7d      	ldr	r3, [pc, #500]	; (800cb58 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800c962:	681b      	ldr	r3, [r3, #0]
 800c964:	f003 0304 	and.w	r3, r3, #4
 800c968:	2b04      	cmp	r3, #4
 800c96a:	d10c      	bne.n	800c986 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 800c96c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c96e:	2b00      	cmp	r3, #0
 800c970:	d109      	bne.n	800c986 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c972:	4b79      	ldr	r3, [pc, #484]	; (800cb58 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800c974:	681b      	ldr	r3, [r3, #0]
 800c976:	08db      	lsrs	r3, r3, #3
 800c978:	f003 0303 	and.w	r3, r3, #3
 800c97c:	4a77      	ldr	r2, [pc, #476]	; (800cb5c <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 800c97e:	fa22 f303 	lsr.w	r3, r2, r3
 800c982:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c984:	e01e      	b.n	800c9c4 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800c986:	4b74      	ldr	r3, [pc, #464]	; (800cb58 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800c988:	681b      	ldr	r3, [r3, #0]
 800c98a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c98e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c992:	d106      	bne.n	800c9a2 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 800c994:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c996:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800c99a:	d102      	bne.n	800c9a2 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800c99c:	4b70      	ldr	r3, [pc, #448]	; (800cb60 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 800c99e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c9a0:	e010      	b.n	800c9c4 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800c9a2:	4b6d      	ldr	r3, [pc, #436]	; (800cb58 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800c9a4:	681b      	ldr	r3, [r3, #0]
 800c9a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c9aa:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800c9ae:	d106      	bne.n	800c9be <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 800c9b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c9b2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800c9b6:	d102      	bne.n	800c9be <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800c9b8:	4b6a      	ldr	r3, [pc, #424]	; (800cb64 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 800c9ba:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c9bc:	e002      	b.n	800c9c4 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800c9be:	2300      	movs	r3, #0
 800c9c0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800c9c2:	e122      	b.n	800cc0a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800c9c4:	e121      	b.n	800cc0a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800c9c6:	2300      	movs	r3, #0
 800c9c8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800c9ca:	e11e      	b.n	800cc0a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800c9cc:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c9d0:	f5a2 3180 	sub.w	r1, r2, #65536	; 0x10000
 800c9d4:	430b      	orrs	r3, r1
 800c9d6:	d133      	bne.n	800ca40 <HAL_RCCEx_GetPeriphCLKFreq+0x924>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 800c9d8:	4b5f      	ldr	r3, [pc, #380]	; (800cb58 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800c9da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c9dc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800c9e0:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800c9e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c9e4:	2b00      	cmp	r3, #0
 800c9e6:	d004      	beq.n	800c9f2 <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 800c9e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c9ea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c9ee:	d012      	beq.n	800ca16 <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
 800c9f0:	e023      	b.n	800ca3a <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800c9f2:	4b59      	ldr	r3, [pc, #356]	; (800cb58 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800c9f4:	681b      	ldr	r3, [r3, #0]
 800c9f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c9fa:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800c9fe:	d107      	bne.n	800ca10 <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800ca00:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ca04:	4618      	mov	r0, r3
 800ca06:	f000 fbc7 	bl	800d198 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800ca0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ca0c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ca0e:	e0fc      	b.n	800cc0a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ca10:	2300      	movs	r3, #0
 800ca12:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ca14:	e0f9      	b.n	800cc0a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800ca16:	4b50      	ldr	r3, [pc, #320]	; (800cb58 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800ca18:	681b      	ldr	r3, [r3, #0]
 800ca1a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800ca1e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800ca22:	d107      	bne.n	800ca34 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ca24:	f107 0318 	add.w	r3, r7, #24
 800ca28:	4618      	mov	r0, r3
 800ca2a:	f000 f90d 	bl	800cc48 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800ca2e:	6a3b      	ldr	r3, [r7, #32]
 800ca30:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ca32:	e0ea      	b.n	800cc0a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ca34:	2300      	movs	r3, #0
 800ca36:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ca38:	e0e7      	b.n	800cc0a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800ca3a:	2300      	movs	r3, #0
 800ca3c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ca3e:	e0e4      	b.n	800cc0a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 800ca40:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ca44:	f5a2 4180 	sub.w	r1, r2, #16384	; 0x4000
 800ca48:	430b      	orrs	r3, r1
 800ca4a:	f040 808d 	bne.w	800cb68 <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 800ca4e:	4b42      	ldr	r3, [pc, #264]	; (800cb58 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800ca50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ca52:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 800ca56:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800ca58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca5a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800ca5e:	d06b      	beq.n	800cb38 <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 800ca60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca62:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800ca66:	d874      	bhi.n	800cb52 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800ca68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca6a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ca6e:	d056      	beq.n	800cb1e <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 800ca70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca72:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ca76:	d86c      	bhi.n	800cb52 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800ca78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca7a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800ca7e:	d03b      	beq.n	800caf8 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
 800ca80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca82:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800ca86:	d864      	bhi.n	800cb52 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800ca88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca8a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ca8e:	d021      	beq.n	800cad4 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 800ca90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca92:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ca96:	d85c      	bhi.n	800cb52 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800ca98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca9a:	2b00      	cmp	r3, #0
 800ca9c:	d004      	beq.n	800caa8 <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
 800ca9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800caa0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800caa4:	d004      	beq.n	800cab0 <HAL_RCCEx_GetPeriphCLKFreq+0x994>
 800caa6:	e054      	b.n	800cb52 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 800caa8:	f000 f8b8 	bl	800cc1c <HAL_RCCEx_GetD3PCLK1Freq>
 800caac:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800caae:	e0ac      	b.n	800cc0a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800cab0:	4b29      	ldr	r3, [pc, #164]	; (800cb58 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800cab2:	681b      	ldr	r3, [r3, #0]
 800cab4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800cab8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800cabc:	d107      	bne.n	800cace <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800cabe:	f107 0318 	add.w	r3, r7, #24
 800cac2:	4618      	mov	r0, r3
 800cac4:	f000 f8c0 	bl	800cc48 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800cac8:	69fb      	ldr	r3, [r7, #28]
 800caca:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cacc:	e09d      	b.n	800cc0a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800cace:	2300      	movs	r3, #0
 800cad0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cad2:	e09a      	b.n	800cc0a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800cad4:	4b20      	ldr	r3, [pc, #128]	; (800cb58 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800cad6:	681b      	ldr	r3, [r3, #0]
 800cad8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800cadc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800cae0:	d107      	bne.n	800caf2 <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800cae2:	f107 030c 	add.w	r3, r7, #12
 800cae6:	4618      	mov	r0, r3
 800cae8:	f000 fa02 	bl	800cef0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800caec:	693b      	ldr	r3, [r7, #16]
 800caee:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800caf0:	e08b      	b.n	800cc0a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800caf2:	2300      	movs	r3, #0
 800caf4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800caf6:	e088      	b.n	800cc0a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800caf8:	4b17      	ldr	r3, [pc, #92]	; (800cb58 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800cafa:	681b      	ldr	r3, [r3, #0]
 800cafc:	f003 0304 	and.w	r3, r3, #4
 800cb00:	2b04      	cmp	r3, #4
 800cb02:	d109      	bne.n	800cb18 <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800cb04:	4b14      	ldr	r3, [pc, #80]	; (800cb58 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800cb06:	681b      	ldr	r3, [r3, #0]
 800cb08:	08db      	lsrs	r3, r3, #3
 800cb0a:	f003 0303 	and.w	r3, r3, #3
 800cb0e:	4a13      	ldr	r2, [pc, #76]	; (800cb5c <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 800cb10:	fa22 f303 	lsr.w	r3, r2, r3
 800cb14:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cb16:	e078      	b.n	800cc0a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800cb18:	2300      	movs	r3, #0
 800cb1a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cb1c:	e075      	b.n	800cc0a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800cb1e:	4b0e      	ldr	r3, [pc, #56]	; (800cb58 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800cb20:	681b      	ldr	r3, [r3, #0]
 800cb22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cb26:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800cb2a:	d102      	bne.n	800cb32 <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
        {
          frequency = CSI_VALUE;
 800cb2c:	4b0c      	ldr	r3, [pc, #48]	; (800cb60 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 800cb2e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cb30:	e06b      	b.n	800cc0a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800cb32:	2300      	movs	r3, #0
 800cb34:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cb36:	e068      	b.n	800cc0a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800cb38:	4b07      	ldr	r3, [pc, #28]	; (800cb58 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800cb3a:	681b      	ldr	r3, [r3, #0]
 800cb3c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800cb40:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800cb44:	d102      	bne.n	800cb4c <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
        {
          frequency = HSE_VALUE;
 800cb46:	4b07      	ldr	r3, [pc, #28]	; (800cb64 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 800cb48:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cb4a:	e05e      	b.n	800cc0a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800cb4c:	2300      	movs	r3, #0
 800cb4e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cb50:	e05b      	b.n	800cc0a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 800cb52:	2300      	movs	r3, #0
 800cb54:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cb56:	e058      	b.n	800cc0a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800cb58:	58024400 	.word	0x58024400
 800cb5c:	03d09000 	.word	0x03d09000
 800cb60:	003d0900 	.word	0x003d0900
 800cb64:	00989680 	.word	0x00989680
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 800cb68:	e9d7 2300 	ldrd	r2, r3, [r7]
 800cb6c:	f5a2 4100 	sub.w	r1, r2, #32768	; 0x8000
 800cb70:	430b      	orrs	r3, r1
 800cb72:	d148      	bne.n	800cc06 <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 800cb74:	4b27      	ldr	r3, [pc, #156]	; (800cc14 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800cb76:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800cb78:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800cb7c:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800cb7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb80:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800cb84:	d02a      	beq.n	800cbdc <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
 800cb86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb88:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800cb8c:	d838      	bhi.n	800cc00 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 800cb8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb90:	2b00      	cmp	r3, #0
 800cb92:	d004      	beq.n	800cb9e <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 800cb94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800cb96:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800cb9a:	d00d      	beq.n	800cbb8 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 800cb9c:	e030      	b.n	800cc00 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800cb9e:	4b1d      	ldr	r3, [pc, #116]	; (800cc14 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800cba0:	681b      	ldr	r3, [r3, #0]
 800cba2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800cba6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800cbaa:	d102      	bne.n	800cbb2 <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSE_VALUE;
 800cbac:	4b1a      	ldr	r3, [pc, #104]	; (800cc18 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 800cbae:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cbb0:	e02b      	b.n	800cc0a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800cbb2:	2300      	movs	r3, #0
 800cbb4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cbb6:	e028      	b.n	800cc0a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800cbb8:	4b16      	ldr	r3, [pc, #88]	; (800cc14 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800cbba:	681b      	ldr	r3, [r3, #0]
 800cbbc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800cbc0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800cbc4:	d107      	bne.n	800cbd6 <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800cbc6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800cbca:	4618      	mov	r0, r3
 800cbcc:	f000 fae4 	bl	800d198 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800cbd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cbd2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cbd4:	e019      	b.n	800cc0a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800cbd6:	2300      	movs	r3, #0
 800cbd8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cbda:	e016      	b.n	800cc0a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800cbdc:	4b0d      	ldr	r3, [pc, #52]	; (800cc14 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800cbde:	681b      	ldr	r3, [r3, #0]
 800cbe0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800cbe4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800cbe8:	d107      	bne.n	800cbfa <HAL_RCCEx_GetPeriphCLKFreq+0xade>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800cbea:	f107 0318 	add.w	r3, r7, #24
 800cbee:	4618      	mov	r0, r3
 800cbf0:	f000 f82a 	bl	800cc48 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800cbf4:	69fb      	ldr	r3, [r7, #28]
 800cbf6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800cbf8:	e007      	b.n	800cc0a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800cbfa:	2300      	movs	r3, #0
 800cbfc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cbfe:	e004      	b.n	800cc0a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800cc00:	2300      	movs	r3, #0
 800cc02:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800cc04:	e001      	b.n	800cc0a <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else
  {
    frequency = 0;
 800cc06:	2300      	movs	r3, #0
 800cc08:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  return frequency;
 800cc0a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800cc0c:	4618      	mov	r0, r3
 800cc0e:	3740      	adds	r7, #64	; 0x40
 800cc10:	46bd      	mov	sp, r7
 800cc12:	bd80      	pop	{r7, pc}
 800cc14:	58024400 	.word	0x58024400
 800cc18:	00989680 	.word	0x00989680

0800cc1c <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800cc1c:	b580      	push	{r7, lr}
 800cc1e:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800cc20:	f7fd fffa 	bl	800ac18 <HAL_RCC_GetHCLKFreq>
 800cc24:	4602      	mov	r2, r0
 800cc26:	4b06      	ldr	r3, [pc, #24]	; (800cc40 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800cc28:	6a1b      	ldr	r3, [r3, #32]
 800cc2a:	091b      	lsrs	r3, r3, #4
 800cc2c:	f003 0307 	and.w	r3, r3, #7
 800cc30:	4904      	ldr	r1, [pc, #16]	; (800cc44 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800cc32:	5ccb      	ldrb	r3, [r1, r3]
 800cc34:	f003 031f 	and.w	r3, r3, #31
 800cc38:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800cc3c:	4618      	mov	r0, r3
 800cc3e:	bd80      	pop	{r7, pc}
 800cc40:	58024400 	.word	0x58024400
 800cc44:	0801f450 	.word	0x0801f450

0800cc48 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800cc48:	b480      	push	{r7}
 800cc4a:	b089      	sub	sp, #36	; 0x24
 800cc4c:	af00      	add	r7, sp, #0
 800cc4e:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800cc50:	4ba1      	ldr	r3, [pc, #644]	; (800ced8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800cc52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cc54:	f003 0303 	and.w	r3, r3, #3
 800cc58:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800cc5a:	4b9f      	ldr	r3, [pc, #636]	; (800ced8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800cc5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cc5e:	0b1b      	lsrs	r3, r3, #12
 800cc60:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800cc64:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800cc66:	4b9c      	ldr	r3, [pc, #624]	; (800ced8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800cc68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cc6a:	091b      	lsrs	r3, r3, #4
 800cc6c:	f003 0301 	and.w	r3, r3, #1
 800cc70:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800cc72:	4b99      	ldr	r3, [pc, #612]	; (800ced8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800cc74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cc76:	08db      	lsrs	r3, r3, #3
 800cc78:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800cc7c:	693a      	ldr	r2, [r7, #16]
 800cc7e:	fb02 f303 	mul.w	r3, r2, r3
 800cc82:	ee07 3a90 	vmov	s15, r3
 800cc86:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cc8a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800cc8e:	697b      	ldr	r3, [r7, #20]
 800cc90:	2b00      	cmp	r3, #0
 800cc92:	f000 8111 	beq.w	800ceb8 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800cc96:	69bb      	ldr	r3, [r7, #24]
 800cc98:	2b02      	cmp	r3, #2
 800cc9a:	f000 8083 	beq.w	800cda4 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800cc9e:	69bb      	ldr	r3, [r7, #24]
 800cca0:	2b02      	cmp	r3, #2
 800cca2:	f200 80a1 	bhi.w	800cde8 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800cca6:	69bb      	ldr	r3, [r7, #24]
 800cca8:	2b00      	cmp	r3, #0
 800ccaa:	d003      	beq.n	800ccb4 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800ccac:	69bb      	ldr	r3, [r7, #24]
 800ccae:	2b01      	cmp	r3, #1
 800ccb0:	d056      	beq.n	800cd60 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800ccb2:	e099      	b.n	800cde8 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ccb4:	4b88      	ldr	r3, [pc, #544]	; (800ced8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ccb6:	681b      	ldr	r3, [r3, #0]
 800ccb8:	f003 0320 	and.w	r3, r3, #32
 800ccbc:	2b00      	cmp	r3, #0
 800ccbe:	d02d      	beq.n	800cd1c <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800ccc0:	4b85      	ldr	r3, [pc, #532]	; (800ced8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ccc2:	681b      	ldr	r3, [r3, #0]
 800ccc4:	08db      	lsrs	r3, r3, #3
 800ccc6:	f003 0303 	and.w	r3, r3, #3
 800ccca:	4a84      	ldr	r2, [pc, #528]	; (800cedc <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800cccc:	fa22 f303 	lsr.w	r3, r2, r3
 800ccd0:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800ccd2:	68bb      	ldr	r3, [r7, #8]
 800ccd4:	ee07 3a90 	vmov	s15, r3
 800ccd8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ccdc:	697b      	ldr	r3, [r7, #20]
 800ccde:	ee07 3a90 	vmov	s15, r3
 800cce2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cce6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ccea:	4b7b      	ldr	r3, [pc, #492]	; (800ced8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ccec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ccee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ccf2:	ee07 3a90 	vmov	s15, r3
 800ccf6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ccfa:	ed97 6a03 	vldr	s12, [r7, #12]
 800ccfe:	eddf 5a78 	vldr	s11, [pc, #480]	; 800cee0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800cd02:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cd06:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cd0a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800cd0e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cd12:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cd16:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800cd1a:	e087      	b.n	800ce2c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800cd1c:	697b      	ldr	r3, [r7, #20]
 800cd1e:	ee07 3a90 	vmov	s15, r3
 800cd22:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cd26:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800cee4 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800cd2a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cd2e:	4b6a      	ldr	r3, [pc, #424]	; (800ced8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800cd30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cd32:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cd36:	ee07 3a90 	vmov	s15, r3
 800cd3a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cd3e:	ed97 6a03 	vldr	s12, [r7, #12]
 800cd42:	eddf 5a67 	vldr	s11, [pc, #412]	; 800cee0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800cd46:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cd4a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cd4e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800cd52:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cd56:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cd5a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800cd5e:	e065      	b.n	800ce2c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800cd60:	697b      	ldr	r3, [r7, #20]
 800cd62:	ee07 3a90 	vmov	s15, r3
 800cd66:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cd6a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800cee8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800cd6e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cd72:	4b59      	ldr	r3, [pc, #356]	; (800ced8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800cd74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cd76:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cd7a:	ee07 3a90 	vmov	s15, r3
 800cd7e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cd82:	ed97 6a03 	vldr	s12, [r7, #12]
 800cd86:	eddf 5a56 	vldr	s11, [pc, #344]	; 800cee0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800cd8a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cd8e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cd92:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800cd96:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cd9a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cd9e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800cda2:	e043      	b.n	800ce2c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800cda4:	697b      	ldr	r3, [r7, #20]
 800cda6:	ee07 3a90 	vmov	s15, r3
 800cdaa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cdae:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800ceec <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800cdb2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cdb6:	4b48      	ldr	r3, [pc, #288]	; (800ced8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800cdb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cdba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cdbe:	ee07 3a90 	vmov	s15, r3
 800cdc2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cdc6:	ed97 6a03 	vldr	s12, [r7, #12]
 800cdca:	eddf 5a45 	vldr	s11, [pc, #276]	; 800cee0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800cdce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cdd2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cdd6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800cdda:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cdde:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cde2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800cde6:	e021      	b.n	800ce2c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800cde8:	697b      	ldr	r3, [r7, #20]
 800cdea:	ee07 3a90 	vmov	s15, r3
 800cdee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cdf2:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800cee8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800cdf6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cdfa:	4b37      	ldr	r3, [pc, #220]	; (800ced8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800cdfc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cdfe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ce02:	ee07 3a90 	vmov	s15, r3
 800ce06:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ce0a:	ed97 6a03 	vldr	s12, [r7, #12]
 800ce0e:	eddf 5a34 	vldr	s11, [pc, #208]	; 800cee0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800ce12:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ce16:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ce1a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800ce1e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ce22:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ce26:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800ce2a:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800ce2c:	4b2a      	ldr	r3, [pc, #168]	; (800ced8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ce2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ce30:	0a5b      	lsrs	r3, r3, #9
 800ce32:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ce36:	ee07 3a90 	vmov	s15, r3
 800ce3a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ce3e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800ce42:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ce46:	edd7 6a07 	vldr	s13, [r7, #28]
 800ce4a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ce4e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ce52:	ee17 2a90 	vmov	r2, s15
 800ce56:	687b      	ldr	r3, [r7, #4]
 800ce58:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800ce5a:	4b1f      	ldr	r3, [pc, #124]	; (800ced8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ce5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ce5e:	0c1b      	lsrs	r3, r3, #16
 800ce60:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ce64:	ee07 3a90 	vmov	s15, r3
 800ce68:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ce6c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800ce70:	ee37 7a87 	vadd.f32	s14, s15, s14
 800ce74:	edd7 6a07 	vldr	s13, [r7, #28]
 800ce78:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ce7c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ce80:	ee17 2a90 	vmov	r2, s15
 800ce84:	687b      	ldr	r3, [r7, #4]
 800ce86:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800ce88:	4b13      	ldr	r3, [pc, #76]	; (800ced8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ce8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ce8c:	0e1b      	lsrs	r3, r3, #24
 800ce8e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800ce92:	ee07 3a90 	vmov	s15, r3
 800ce96:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ce9a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800ce9e:	ee37 7a87 	vadd.f32	s14, s15, s14
 800cea2:	edd7 6a07 	vldr	s13, [r7, #28]
 800cea6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800ceaa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800ceae:	ee17 2a90 	vmov	r2, s15
 800ceb2:	687b      	ldr	r3, [r7, #4]
 800ceb4:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800ceb6:	e008      	b.n	800ceca <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800ceb8:	687b      	ldr	r3, [r7, #4]
 800ceba:	2200      	movs	r2, #0
 800cebc:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800cebe:	687b      	ldr	r3, [r7, #4]
 800cec0:	2200      	movs	r2, #0
 800cec2:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800cec4:	687b      	ldr	r3, [r7, #4]
 800cec6:	2200      	movs	r2, #0
 800cec8:	609a      	str	r2, [r3, #8]
}
 800ceca:	bf00      	nop
 800cecc:	3724      	adds	r7, #36	; 0x24
 800cece:	46bd      	mov	sp, r7
 800ced0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ced4:	4770      	bx	lr
 800ced6:	bf00      	nop
 800ced8:	58024400 	.word	0x58024400
 800cedc:	03d09000 	.word	0x03d09000
 800cee0:	46000000 	.word	0x46000000
 800cee4:	4c742400 	.word	0x4c742400
 800cee8:	4a742400 	.word	0x4a742400
 800ceec:	4b189680 	.word	0x4b189680

0800cef0 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800cef0:	b480      	push	{r7}
 800cef2:	b089      	sub	sp, #36	; 0x24
 800cef4:	af00      	add	r7, sp, #0
 800cef6:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800cef8:	4ba1      	ldr	r3, [pc, #644]	; (800d180 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800cefa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cefc:	f003 0303 	and.w	r3, r3, #3
 800cf00:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800cf02:	4b9f      	ldr	r3, [pc, #636]	; (800d180 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800cf04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cf06:	0d1b      	lsrs	r3, r3, #20
 800cf08:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800cf0c:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800cf0e:	4b9c      	ldr	r3, [pc, #624]	; (800d180 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800cf10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cf12:	0a1b      	lsrs	r3, r3, #8
 800cf14:	f003 0301 	and.w	r3, r3, #1
 800cf18:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800cf1a:	4b99      	ldr	r3, [pc, #612]	; (800d180 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800cf1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800cf1e:	08db      	lsrs	r3, r3, #3
 800cf20:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800cf24:	693a      	ldr	r2, [r7, #16]
 800cf26:	fb02 f303 	mul.w	r3, r2, r3
 800cf2a:	ee07 3a90 	vmov	s15, r3
 800cf2e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cf32:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800cf36:	697b      	ldr	r3, [r7, #20]
 800cf38:	2b00      	cmp	r3, #0
 800cf3a:	f000 8111 	beq.w	800d160 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800cf3e:	69bb      	ldr	r3, [r7, #24]
 800cf40:	2b02      	cmp	r3, #2
 800cf42:	f000 8083 	beq.w	800d04c <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800cf46:	69bb      	ldr	r3, [r7, #24]
 800cf48:	2b02      	cmp	r3, #2
 800cf4a:	f200 80a1 	bhi.w	800d090 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800cf4e:	69bb      	ldr	r3, [r7, #24]
 800cf50:	2b00      	cmp	r3, #0
 800cf52:	d003      	beq.n	800cf5c <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800cf54:	69bb      	ldr	r3, [r7, #24]
 800cf56:	2b01      	cmp	r3, #1
 800cf58:	d056      	beq.n	800d008 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800cf5a:	e099      	b.n	800d090 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800cf5c:	4b88      	ldr	r3, [pc, #544]	; (800d180 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800cf5e:	681b      	ldr	r3, [r3, #0]
 800cf60:	f003 0320 	and.w	r3, r3, #32
 800cf64:	2b00      	cmp	r3, #0
 800cf66:	d02d      	beq.n	800cfc4 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800cf68:	4b85      	ldr	r3, [pc, #532]	; (800d180 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800cf6a:	681b      	ldr	r3, [r3, #0]
 800cf6c:	08db      	lsrs	r3, r3, #3
 800cf6e:	f003 0303 	and.w	r3, r3, #3
 800cf72:	4a84      	ldr	r2, [pc, #528]	; (800d184 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800cf74:	fa22 f303 	lsr.w	r3, r2, r3
 800cf78:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800cf7a:	68bb      	ldr	r3, [r7, #8]
 800cf7c:	ee07 3a90 	vmov	s15, r3
 800cf80:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cf84:	697b      	ldr	r3, [r7, #20]
 800cf86:	ee07 3a90 	vmov	s15, r3
 800cf8a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cf8e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cf92:	4b7b      	ldr	r3, [pc, #492]	; (800d180 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800cf94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cf96:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cf9a:	ee07 3a90 	vmov	s15, r3
 800cf9e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cfa2:	ed97 6a03 	vldr	s12, [r7, #12]
 800cfa6:	eddf 5a78 	vldr	s11, [pc, #480]	; 800d188 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800cfaa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cfae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cfb2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800cfb6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cfba:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cfbe:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800cfc2:	e087      	b.n	800d0d4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800cfc4:	697b      	ldr	r3, [r7, #20]
 800cfc6:	ee07 3a90 	vmov	s15, r3
 800cfca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cfce:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800d18c <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800cfd2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cfd6:	4b6a      	ldr	r3, [pc, #424]	; (800d180 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800cfd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cfda:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cfde:	ee07 3a90 	vmov	s15, r3
 800cfe2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cfe6:	ed97 6a03 	vldr	s12, [r7, #12]
 800cfea:	eddf 5a67 	vldr	s11, [pc, #412]	; 800d188 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800cfee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cff2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cff6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800cffa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cffe:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d002:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d006:	e065      	b.n	800d0d4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800d008:	697b      	ldr	r3, [r7, #20]
 800d00a:	ee07 3a90 	vmov	s15, r3
 800d00e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d012:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800d190 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800d016:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d01a:	4b59      	ldr	r3, [pc, #356]	; (800d180 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d01c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d01e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d022:	ee07 3a90 	vmov	s15, r3
 800d026:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d02a:	ed97 6a03 	vldr	s12, [r7, #12]
 800d02e:	eddf 5a56 	vldr	s11, [pc, #344]	; 800d188 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800d032:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d036:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d03a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d03e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d042:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d046:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d04a:	e043      	b.n	800d0d4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800d04c:	697b      	ldr	r3, [r7, #20]
 800d04e:	ee07 3a90 	vmov	s15, r3
 800d052:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d056:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800d194 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800d05a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d05e:	4b48      	ldr	r3, [pc, #288]	; (800d180 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d060:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d062:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d066:	ee07 3a90 	vmov	s15, r3
 800d06a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d06e:	ed97 6a03 	vldr	s12, [r7, #12]
 800d072:	eddf 5a45 	vldr	s11, [pc, #276]	; 800d188 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800d076:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d07a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d07e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d082:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d086:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d08a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d08e:	e021      	b.n	800d0d4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800d090:	697b      	ldr	r3, [r7, #20]
 800d092:	ee07 3a90 	vmov	s15, r3
 800d096:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d09a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800d190 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800d09e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d0a2:	4b37      	ldr	r3, [pc, #220]	; (800d180 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d0a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d0a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d0aa:	ee07 3a90 	vmov	s15, r3
 800d0ae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d0b2:	ed97 6a03 	vldr	s12, [r7, #12]
 800d0b6:	eddf 5a34 	vldr	s11, [pc, #208]	; 800d188 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800d0ba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d0be:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d0c2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d0c6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d0ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d0ce:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d0d2:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800d0d4:	4b2a      	ldr	r3, [pc, #168]	; (800d180 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d0d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d0d8:	0a5b      	lsrs	r3, r3, #9
 800d0da:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d0de:	ee07 3a90 	vmov	s15, r3
 800d0e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d0e6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d0ea:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d0ee:	edd7 6a07 	vldr	s13, [r7, #28]
 800d0f2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d0f6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d0fa:	ee17 2a90 	vmov	r2, s15
 800d0fe:	687b      	ldr	r3, [r7, #4]
 800d100:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800d102:	4b1f      	ldr	r3, [pc, #124]	; (800d180 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d104:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d106:	0c1b      	lsrs	r3, r3, #16
 800d108:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d10c:	ee07 3a90 	vmov	s15, r3
 800d110:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d114:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d118:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d11c:	edd7 6a07 	vldr	s13, [r7, #28]
 800d120:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d124:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d128:	ee17 2a90 	vmov	r2, s15
 800d12c:	687b      	ldr	r3, [r7, #4]
 800d12e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800d130:	4b13      	ldr	r3, [pc, #76]	; (800d180 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800d132:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d134:	0e1b      	lsrs	r3, r3, #24
 800d136:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d13a:	ee07 3a90 	vmov	s15, r3
 800d13e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d142:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d146:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d14a:	edd7 6a07 	vldr	s13, [r7, #28]
 800d14e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d152:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d156:	ee17 2a90 	vmov	r2, s15
 800d15a:	687b      	ldr	r3, [r7, #4]
 800d15c:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800d15e:	e008      	b.n	800d172 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800d160:	687b      	ldr	r3, [r7, #4]
 800d162:	2200      	movs	r2, #0
 800d164:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800d166:	687b      	ldr	r3, [r7, #4]
 800d168:	2200      	movs	r2, #0
 800d16a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800d16c:	687b      	ldr	r3, [r7, #4]
 800d16e:	2200      	movs	r2, #0
 800d170:	609a      	str	r2, [r3, #8]
}
 800d172:	bf00      	nop
 800d174:	3724      	adds	r7, #36	; 0x24
 800d176:	46bd      	mov	sp, r7
 800d178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d17c:	4770      	bx	lr
 800d17e:	bf00      	nop
 800d180:	58024400 	.word	0x58024400
 800d184:	03d09000 	.word	0x03d09000
 800d188:	46000000 	.word	0x46000000
 800d18c:	4c742400 	.word	0x4c742400
 800d190:	4a742400 	.word	0x4a742400
 800d194:	4b189680 	.word	0x4b189680

0800d198 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 800d198:	b480      	push	{r7}
 800d19a:	b089      	sub	sp, #36	; 0x24
 800d19c:	af00      	add	r7, sp, #0
 800d19e:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800d1a0:	4ba0      	ldr	r3, [pc, #640]	; (800d424 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d1a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d1a4:	f003 0303 	and.w	r3, r3, #3
 800d1a8:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 800d1aa:	4b9e      	ldr	r3, [pc, #632]	; (800d424 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d1ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d1ae:	091b      	lsrs	r3, r3, #4
 800d1b0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800d1b4:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800d1b6:	4b9b      	ldr	r3, [pc, #620]	; (800d424 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d1b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d1ba:	f003 0301 	and.w	r3, r3, #1
 800d1be:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800d1c0:	4b98      	ldr	r3, [pc, #608]	; (800d424 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d1c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d1c4:	08db      	lsrs	r3, r3, #3
 800d1c6:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800d1ca:	693a      	ldr	r2, [r7, #16]
 800d1cc:	fb02 f303 	mul.w	r3, r2, r3
 800d1d0:	ee07 3a90 	vmov	s15, r3
 800d1d4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d1d8:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 800d1dc:	697b      	ldr	r3, [r7, #20]
 800d1de:	2b00      	cmp	r3, #0
 800d1e0:	f000 8111 	beq.w	800d406 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 800d1e4:	69bb      	ldr	r3, [r7, #24]
 800d1e6:	2b02      	cmp	r3, #2
 800d1e8:	f000 8083 	beq.w	800d2f2 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 800d1ec:	69bb      	ldr	r3, [r7, #24]
 800d1ee:	2b02      	cmp	r3, #2
 800d1f0:	f200 80a1 	bhi.w	800d336 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 800d1f4:	69bb      	ldr	r3, [r7, #24]
 800d1f6:	2b00      	cmp	r3, #0
 800d1f8:	d003      	beq.n	800d202 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800d1fa:	69bb      	ldr	r3, [r7, #24]
 800d1fc:	2b01      	cmp	r3, #1
 800d1fe:	d056      	beq.n	800d2ae <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 800d200:	e099      	b.n	800d336 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800d202:	4b88      	ldr	r3, [pc, #544]	; (800d424 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d204:	681b      	ldr	r3, [r3, #0]
 800d206:	f003 0320 	and.w	r3, r3, #32
 800d20a:	2b00      	cmp	r3, #0
 800d20c:	d02d      	beq.n	800d26a <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800d20e:	4b85      	ldr	r3, [pc, #532]	; (800d424 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d210:	681b      	ldr	r3, [r3, #0]
 800d212:	08db      	lsrs	r3, r3, #3
 800d214:	f003 0303 	and.w	r3, r3, #3
 800d218:	4a83      	ldr	r2, [pc, #524]	; (800d428 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800d21a:	fa22 f303 	lsr.w	r3, r2, r3
 800d21e:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800d220:	68bb      	ldr	r3, [r7, #8]
 800d222:	ee07 3a90 	vmov	s15, r3
 800d226:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d22a:	697b      	ldr	r3, [r7, #20]
 800d22c:	ee07 3a90 	vmov	s15, r3
 800d230:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d234:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d238:	4b7a      	ldr	r3, [pc, #488]	; (800d424 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d23a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d23c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d240:	ee07 3a90 	vmov	s15, r3
 800d244:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d248:	ed97 6a03 	vldr	s12, [r7, #12]
 800d24c:	eddf 5a77 	vldr	s11, [pc, #476]	; 800d42c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800d250:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d254:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d258:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d25c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d260:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d264:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800d268:	e087      	b.n	800d37a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800d26a:	697b      	ldr	r3, [r7, #20]
 800d26c:	ee07 3a90 	vmov	s15, r3
 800d270:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d274:	eddf 6a6e 	vldr	s13, [pc, #440]	; 800d430 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800d278:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d27c:	4b69      	ldr	r3, [pc, #420]	; (800d424 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d27e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d280:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d284:	ee07 3a90 	vmov	s15, r3
 800d288:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d28c:	ed97 6a03 	vldr	s12, [r7, #12]
 800d290:	eddf 5a66 	vldr	s11, [pc, #408]	; 800d42c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800d294:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d298:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d29c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d2a0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d2a4:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d2a8:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d2ac:	e065      	b.n	800d37a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800d2ae:	697b      	ldr	r3, [r7, #20]
 800d2b0:	ee07 3a90 	vmov	s15, r3
 800d2b4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d2b8:	eddf 6a5e 	vldr	s13, [pc, #376]	; 800d434 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 800d2bc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d2c0:	4b58      	ldr	r3, [pc, #352]	; (800d424 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d2c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d2c4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d2c8:	ee07 3a90 	vmov	s15, r3
 800d2cc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d2d0:	ed97 6a03 	vldr	s12, [r7, #12]
 800d2d4:	eddf 5a55 	vldr	s11, [pc, #340]	; 800d42c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800d2d8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d2dc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d2e0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d2e4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d2e8:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d2ec:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d2f0:	e043      	b.n	800d37a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800d2f2:	697b      	ldr	r3, [r7, #20]
 800d2f4:	ee07 3a90 	vmov	s15, r3
 800d2f8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d2fc:	eddf 6a4e 	vldr	s13, [pc, #312]	; 800d438 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 800d300:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d304:	4b47      	ldr	r3, [pc, #284]	; (800d424 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d306:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d308:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d30c:	ee07 3a90 	vmov	s15, r3
 800d310:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d314:	ed97 6a03 	vldr	s12, [r7, #12]
 800d318:	eddf 5a44 	vldr	s11, [pc, #272]	; 800d42c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800d31c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d320:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d324:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d328:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d32c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d330:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d334:	e021      	b.n	800d37a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800d336:	697b      	ldr	r3, [r7, #20]
 800d338:	ee07 3a90 	vmov	s15, r3
 800d33c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d340:	eddf 6a3b 	vldr	s13, [pc, #236]	; 800d430 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800d344:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800d348:	4b36      	ldr	r3, [pc, #216]	; (800d424 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d34a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d34c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800d350:	ee07 3a90 	vmov	s15, r3
 800d354:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800d358:	ed97 6a03 	vldr	s12, [r7, #12]
 800d35c:	eddf 5a33 	vldr	s11, [pc, #204]	; 800d42c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800d360:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800d364:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d368:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d36c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d370:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d374:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800d378:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 800d37a:	4b2a      	ldr	r3, [pc, #168]	; (800d424 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d37c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d37e:	0a5b      	lsrs	r3, r3, #9
 800d380:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d384:	ee07 3a90 	vmov	s15, r3
 800d388:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d38c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d390:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d394:	edd7 6a07 	vldr	s13, [r7, #28]
 800d398:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d39c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d3a0:	ee17 2a90 	vmov	r2, s15
 800d3a4:	687b      	ldr	r3, [r7, #4]
 800d3a6:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 800d3a8:	4b1e      	ldr	r3, [pc, #120]	; (800d424 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d3aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d3ac:	0c1b      	lsrs	r3, r3, #16
 800d3ae:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d3b2:	ee07 3a90 	vmov	s15, r3
 800d3b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d3ba:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d3be:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d3c2:	edd7 6a07 	vldr	s13, [r7, #28]
 800d3c6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d3ca:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d3ce:	ee17 2a90 	vmov	r2, s15
 800d3d2:	687b      	ldr	r3, [r7, #4]
 800d3d4:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 800d3d6:	4b13      	ldr	r3, [pc, #76]	; (800d424 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800d3d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d3da:	0e1b      	lsrs	r3, r3, #24
 800d3dc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d3e0:	ee07 3a90 	vmov	s15, r3
 800d3e4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800d3e8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800d3ec:	ee37 7a87 	vadd.f32	s14, s15, s14
 800d3f0:	edd7 6a07 	vldr	s13, [r7, #28]
 800d3f4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d3f8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d3fc:	ee17 2a90 	vmov	r2, s15
 800d400:	687b      	ldr	r3, [r7, #4]
 800d402:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800d404:	e008      	b.n	800d418 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800d406:	687b      	ldr	r3, [r7, #4]
 800d408:	2200      	movs	r2, #0
 800d40a:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800d40c:	687b      	ldr	r3, [r7, #4]
 800d40e:	2200      	movs	r2, #0
 800d410:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800d412:	687b      	ldr	r3, [r7, #4]
 800d414:	2200      	movs	r2, #0
 800d416:	609a      	str	r2, [r3, #8]
}
 800d418:	bf00      	nop
 800d41a:	3724      	adds	r7, #36	; 0x24
 800d41c:	46bd      	mov	sp, r7
 800d41e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d422:	4770      	bx	lr
 800d424:	58024400 	.word	0x58024400
 800d428:	03d09000 	.word	0x03d09000
 800d42c:	46000000 	.word	0x46000000
 800d430:	4c742400 	.word	0x4c742400
 800d434:	4a742400 	.word	0x4a742400
 800d438:	4b189680 	.word	0x4b189680

0800d43c <HAL_RCCEx_CRSConfig>:
  * @brief  Start automatic synchronization for polling mode
  * @param  pInit Pointer on RCC_CRSInitTypeDef structure
  * @retval None
  */
void HAL_RCCEx_CRSConfig(RCC_CRSInitTypeDef *pInit)
{
 800d43c:	b580      	push	{r7, lr}
 800d43e:	b084      	sub	sp, #16
 800d440:	af00      	add	r7, sp, #0
 800d442:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_CRS_HSI48CALIBRATION(pInit->HSI48CalibrationValue));

  /* CONFIGURATION */

  /* Before configuration, reset CRS registers to their default values*/
  __HAL_RCC_CRS_FORCE_RESET();
 800d444:	4b26      	ldr	r3, [pc, #152]	; (800d4e0 <HAL_RCCEx_CRSConfig+0xa4>)
 800d446:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800d44a:	4a25      	ldr	r2, [pc, #148]	; (800d4e0 <HAL_RCCEx_CRSConfig+0xa4>)
 800d44c:	f043 0302 	orr.w	r3, r3, #2
 800d450:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
  __HAL_RCC_CRS_RELEASE_RESET();
 800d454:	4b22      	ldr	r3, [pc, #136]	; (800d4e0 <HAL_RCCEx_CRSConfig+0xa4>)
 800d456:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800d45a:	4a21      	ldr	r2, [pc, #132]	; (800d4e0 <HAL_RCCEx_CRSConfig+0xa4>)
 800d45c:	f023 0302 	bic.w	r3, r3, #2
 800d460:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

  /* Set the SYNCDIV[2:0] bits according to Pre-scaler value */
  /* Set the SYNCSRC[1:0] bits according to Source value */
  /* Set the SYNCSPOL bit according to Polarity value */
  if ((HAL_GetREVID() <= REV_ID_Y) && (pInit->Source == RCC_CRS_SYNC_SOURCE_USB2))
 800d464:	f7f6 fed2 	bl	800420c <HAL_GetREVID>
 800d468:	4603      	mov	r3, r0
 800d46a:	f241 0203 	movw	r2, #4099	; 0x1003
 800d46e:	4293      	cmp	r3, r2
 800d470:	d80b      	bhi.n	800d48a <HAL_RCCEx_CRSConfig+0x4e>
 800d472:	687b      	ldr	r3, [r7, #4]
 800d474:	685b      	ldr	r3, [r3, #4]
 800d476:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800d47a:	d106      	bne.n	800d48a <HAL_RCCEx_CRSConfig+0x4e>
  {
    /* Use Rev.Y value of USB2 */
    value = (pInit->Prescaler | RCC_CRS_SYNC_SOURCE_PIN | pInit->Polarity);
 800d47c:	687b      	ldr	r3, [r7, #4]
 800d47e:	681a      	ldr	r2, [r3, #0]
 800d480:	687b      	ldr	r3, [r7, #4]
 800d482:	689b      	ldr	r3, [r3, #8]
 800d484:	4313      	orrs	r3, r2
 800d486:	60fb      	str	r3, [r7, #12]
 800d488:	e008      	b.n	800d49c <HAL_RCCEx_CRSConfig+0x60>
  }
  else
  {
    value = (pInit->Prescaler | pInit->Source | pInit->Polarity);
 800d48a:	687b      	ldr	r3, [r7, #4]
 800d48c:	681a      	ldr	r2, [r3, #0]
 800d48e:	687b      	ldr	r3, [r7, #4]
 800d490:	685b      	ldr	r3, [r3, #4]
 800d492:	431a      	orrs	r2, r3
 800d494:	687b      	ldr	r3, [r7, #4]
 800d496:	689b      	ldr	r3, [r3, #8]
 800d498:	4313      	orrs	r3, r2
 800d49a:	60fb      	str	r3, [r7, #12]
  }
  /* Set the RELOAD[15:0] bits according to ReloadValue value */
  value |= pInit->ReloadValue;
 800d49c:	687b      	ldr	r3, [r7, #4]
 800d49e:	68db      	ldr	r3, [r3, #12]
 800d4a0:	68fa      	ldr	r2, [r7, #12]
 800d4a2:	4313      	orrs	r3, r2
 800d4a4:	60fb      	str	r3, [r7, #12]
  /* Set the FELIM[7:0] bits according to ErrorLimitValue value */
  value |= (pInit->ErrorLimitValue << CRS_CFGR_FELIM_Pos);
 800d4a6:	687b      	ldr	r3, [r7, #4]
 800d4a8:	691b      	ldr	r3, [r3, #16]
 800d4aa:	041b      	lsls	r3, r3, #16
 800d4ac:	68fa      	ldr	r2, [r7, #12]
 800d4ae:	4313      	orrs	r3, r2
 800d4b0:	60fb      	str	r3, [r7, #12]
  WRITE_REG(CRS->CFGR, value);
 800d4b2:	4a0c      	ldr	r2, [pc, #48]	; (800d4e4 <HAL_RCCEx_CRSConfig+0xa8>)
 800d4b4:	68fb      	ldr	r3, [r7, #12]
 800d4b6:	6053      	str	r3, [r2, #4]

  /* Adjust HSI48 oscillator smooth trimming */
  /* Set the TRIM[5:0] bits according to RCC_CRS_HSI48CalibrationValue value */
  MODIFY_REG(CRS->CR, CRS_CR_TRIM, (pInit->HSI48CalibrationValue << CRS_CR_TRIM_Pos));
 800d4b8:	4b0a      	ldr	r3, [pc, #40]	; (800d4e4 <HAL_RCCEx_CRSConfig+0xa8>)
 800d4ba:	681b      	ldr	r3, [r3, #0]
 800d4bc:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 800d4c0:	687b      	ldr	r3, [r7, #4]
 800d4c2:	695b      	ldr	r3, [r3, #20]
 800d4c4:	021b      	lsls	r3, r3, #8
 800d4c6:	4907      	ldr	r1, [pc, #28]	; (800d4e4 <HAL_RCCEx_CRSConfig+0xa8>)
 800d4c8:	4313      	orrs	r3, r2
 800d4ca:	600b      	str	r3, [r1, #0]

  /* START AUTOMATIC SYNCHRONIZATION*/

  /* Enable Automatic trimming & Frequency error counter */
  SET_BIT(CRS->CR, CRS_CR_AUTOTRIMEN | CRS_CR_CEN);
 800d4cc:	4b05      	ldr	r3, [pc, #20]	; (800d4e4 <HAL_RCCEx_CRSConfig+0xa8>)
 800d4ce:	681b      	ldr	r3, [r3, #0]
 800d4d0:	4a04      	ldr	r2, [pc, #16]	; (800d4e4 <HAL_RCCEx_CRSConfig+0xa8>)
 800d4d2:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800d4d6:	6013      	str	r3, [r2, #0]
}
 800d4d8:	bf00      	nop
 800d4da:	3710      	adds	r7, #16
 800d4dc:	46bd      	mov	sp, r7
 800d4de:	bd80      	pop	{r7, pc}
 800d4e0:	58024400 	.word	0x58024400
 800d4e4:	40008400 	.word	0x40008400

0800d4e8 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800d4e8:	b580      	push	{r7, lr}
 800d4ea:	b084      	sub	sp, #16
 800d4ec:	af00      	add	r7, sp, #0
 800d4ee:	6078      	str	r0, [r7, #4]
 800d4f0:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800d4f2:	2300      	movs	r3, #0
 800d4f4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800d4f6:	4b53      	ldr	r3, [pc, #332]	; (800d644 <RCCEx_PLL2_Config+0x15c>)
 800d4f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d4fa:	f003 0303 	and.w	r3, r3, #3
 800d4fe:	2b03      	cmp	r3, #3
 800d500:	d101      	bne.n	800d506 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800d502:	2301      	movs	r3, #1
 800d504:	e099      	b.n	800d63a <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800d506:	4b4f      	ldr	r3, [pc, #316]	; (800d644 <RCCEx_PLL2_Config+0x15c>)
 800d508:	681b      	ldr	r3, [r3, #0]
 800d50a:	4a4e      	ldr	r2, [pc, #312]	; (800d644 <RCCEx_PLL2_Config+0x15c>)
 800d50c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800d510:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d512:	f7f6 fe4b 	bl	80041ac <HAL_GetTick>
 800d516:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800d518:	e008      	b.n	800d52c <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800d51a:	f7f6 fe47 	bl	80041ac <HAL_GetTick>
 800d51e:	4602      	mov	r2, r0
 800d520:	68bb      	ldr	r3, [r7, #8]
 800d522:	1ad3      	subs	r3, r2, r3
 800d524:	2b02      	cmp	r3, #2
 800d526:	d901      	bls.n	800d52c <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800d528:	2303      	movs	r3, #3
 800d52a:	e086      	b.n	800d63a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800d52c:	4b45      	ldr	r3, [pc, #276]	; (800d644 <RCCEx_PLL2_Config+0x15c>)
 800d52e:	681b      	ldr	r3, [r3, #0]
 800d530:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800d534:	2b00      	cmp	r3, #0
 800d536:	d1f0      	bne.n	800d51a <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800d538:	4b42      	ldr	r3, [pc, #264]	; (800d644 <RCCEx_PLL2_Config+0x15c>)
 800d53a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d53c:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800d540:	687b      	ldr	r3, [r7, #4]
 800d542:	681b      	ldr	r3, [r3, #0]
 800d544:	031b      	lsls	r3, r3, #12
 800d546:	493f      	ldr	r1, [pc, #252]	; (800d644 <RCCEx_PLL2_Config+0x15c>)
 800d548:	4313      	orrs	r3, r2
 800d54a:	628b      	str	r3, [r1, #40]	; 0x28
 800d54c:	687b      	ldr	r3, [r7, #4]
 800d54e:	685b      	ldr	r3, [r3, #4]
 800d550:	3b01      	subs	r3, #1
 800d552:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800d556:	687b      	ldr	r3, [r7, #4]
 800d558:	689b      	ldr	r3, [r3, #8]
 800d55a:	3b01      	subs	r3, #1
 800d55c:	025b      	lsls	r3, r3, #9
 800d55e:	b29b      	uxth	r3, r3
 800d560:	431a      	orrs	r2, r3
 800d562:	687b      	ldr	r3, [r7, #4]
 800d564:	68db      	ldr	r3, [r3, #12]
 800d566:	3b01      	subs	r3, #1
 800d568:	041b      	lsls	r3, r3, #16
 800d56a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800d56e:	431a      	orrs	r2, r3
 800d570:	687b      	ldr	r3, [r7, #4]
 800d572:	691b      	ldr	r3, [r3, #16]
 800d574:	3b01      	subs	r3, #1
 800d576:	061b      	lsls	r3, r3, #24
 800d578:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800d57c:	4931      	ldr	r1, [pc, #196]	; (800d644 <RCCEx_PLL2_Config+0x15c>)
 800d57e:	4313      	orrs	r3, r2
 800d580:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800d582:	4b30      	ldr	r3, [pc, #192]	; (800d644 <RCCEx_PLL2_Config+0x15c>)
 800d584:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d586:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800d58a:	687b      	ldr	r3, [r7, #4]
 800d58c:	695b      	ldr	r3, [r3, #20]
 800d58e:	492d      	ldr	r1, [pc, #180]	; (800d644 <RCCEx_PLL2_Config+0x15c>)
 800d590:	4313      	orrs	r3, r2
 800d592:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800d594:	4b2b      	ldr	r3, [pc, #172]	; (800d644 <RCCEx_PLL2_Config+0x15c>)
 800d596:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d598:	f023 0220 	bic.w	r2, r3, #32
 800d59c:	687b      	ldr	r3, [r7, #4]
 800d59e:	699b      	ldr	r3, [r3, #24]
 800d5a0:	4928      	ldr	r1, [pc, #160]	; (800d644 <RCCEx_PLL2_Config+0x15c>)
 800d5a2:	4313      	orrs	r3, r2
 800d5a4:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800d5a6:	4b27      	ldr	r3, [pc, #156]	; (800d644 <RCCEx_PLL2_Config+0x15c>)
 800d5a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d5aa:	4a26      	ldr	r2, [pc, #152]	; (800d644 <RCCEx_PLL2_Config+0x15c>)
 800d5ac:	f023 0310 	bic.w	r3, r3, #16
 800d5b0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800d5b2:	4b24      	ldr	r3, [pc, #144]	; (800d644 <RCCEx_PLL2_Config+0x15c>)
 800d5b4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d5b6:	4b24      	ldr	r3, [pc, #144]	; (800d648 <RCCEx_PLL2_Config+0x160>)
 800d5b8:	4013      	ands	r3, r2
 800d5ba:	687a      	ldr	r2, [r7, #4]
 800d5bc:	69d2      	ldr	r2, [r2, #28]
 800d5be:	00d2      	lsls	r2, r2, #3
 800d5c0:	4920      	ldr	r1, [pc, #128]	; (800d644 <RCCEx_PLL2_Config+0x15c>)
 800d5c2:	4313      	orrs	r3, r2
 800d5c4:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800d5c6:	4b1f      	ldr	r3, [pc, #124]	; (800d644 <RCCEx_PLL2_Config+0x15c>)
 800d5c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d5ca:	4a1e      	ldr	r2, [pc, #120]	; (800d644 <RCCEx_PLL2_Config+0x15c>)
 800d5cc:	f043 0310 	orr.w	r3, r3, #16
 800d5d0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800d5d2:	683b      	ldr	r3, [r7, #0]
 800d5d4:	2b00      	cmp	r3, #0
 800d5d6:	d106      	bne.n	800d5e6 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800d5d8:	4b1a      	ldr	r3, [pc, #104]	; (800d644 <RCCEx_PLL2_Config+0x15c>)
 800d5da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d5dc:	4a19      	ldr	r2, [pc, #100]	; (800d644 <RCCEx_PLL2_Config+0x15c>)
 800d5de:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800d5e2:	62d3      	str	r3, [r2, #44]	; 0x2c
 800d5e4:	e00f      	b.n	800d606 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800d5e6:	683b      	ldr	r3, [r7, #0]
 800d5e8:	2b01      	cmp	r3, #1
 800d5ea:	d106      	bne.n	800d5fa <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800d5ec:	4b15      	ldr	r3, [pc, #84]	; (800d644 <RCCEx_PLL2_Config+0x15c>)
 800d5ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d5f0:	4a14      	ldr	r2, [pc, #80]	; (800d644 <RCCEx_PLL2_Config+0x15c>)
 800d5f2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800d5f6:	62d3      	str	r3, [r2, #44]	; 0x2c
 800d5f8:	e005      	b.n	800d606 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800d5fa:	4b12      	ldr	r3, [pc, #72]	; (800d644 <RCCEx_PLL2_Config+0x15c>)
 800d5fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d5fe:	4a11      	ldr	r2, [pc, #68]	; (800d644 <RCCEx_PLL2_Config+0x15c>)
 800d600:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800d604:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800d606:	4b0f      	ldr	r3, [pc, #60]	; (800d644 <RCCEx_PLL2_Config+0x15c>)
 800d608:	681b      	ldr	r3, [r3, #0]
 800d60a:	4a0e      	ldr	r2, [pc, #56]	; (800d644 <RCCEx_PLL2_Config+0x15c>)
 800d60c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800d610:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d612:	f7f6 fdcb 	bl	80041ac <HAL_GetTick>
 800d616:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800d618:	e008      	b.n	800d62c <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800d61a:	f7f6 fdc7 	bl	80041ac <HAL_GetTick>
 800d61e:	4602      	mov	r2, r0
 800d620:	68bb      	ldr	r3, [r7, #8]
 800d622:	1ad3      	subs	r3, r2, r3
 800d624:	2b02      	cmp	r3, #2
 800d626:	d901      	bls.n	800d62c <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800d628:	2303      	movs	r3, #3
 800d62a:	e006      	b.n	800d63a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800d62c:	4b05      	ldr	r3, [pc, #20]	; (800d644 <RCCEx_PLL2_Config+0x15c>)
 800d62e:	681b      	ldr	r3, [r3, #0]
 800d630:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800d634:	2b00      	cmp	r3, #0
 800d636:	d0f0      	beq.n	800d61a <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800d638:	7bfb      	ldrb	r3, [r7, #15]
}
 800d63a:	4618      	mov	r0, r3
 800d63c:	3710      	adds	r7, #16
 800d63e:	46bd      	mov	sp, r7
 800d640:	bd80      	pop	{r7, pc}
 800d642:	bf00      	nop
 800d644:	58024400 	.word	0x58024400
 800d648:	ffff0007 	.word	0xffff0007

0800d64c <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800d64c:	b580      	push	{r7, lr}
 800d64e:	b084      	sub	sp, #16
 800d650:	af00      	add	r7, sp, #0
 800d652:	6078      	str	r0, [r7, #4]
 800d654:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800d656:	2300      	movs	r3, #0
 800d658:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800d65a:	4b53      	ldr	r3, [pc, #332]	; (800d7a8 <RCCEx_PLL3_Config+0x15c>)
 800d65c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d65e:	f003 0303 	and.w	r3, r3, #3
 800d662:	2b03      	cmp	r3, #3
 800d664:	d101      	bne.n	800d66a <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800d666:	2301      	movs	r3, #1
 800d668:	e099      	b.n	800d79e <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800d66a:	4b4f      	ldr	r3, [pc, #316]	; (800d7a8 <RCCEx_PLL3_Config+0x15c>)
 800d66c:	681b      	ldr	r3, [r3, #0]
 800d66e:	4a4e      	ldr	r2, [pc, #312]	; (800d7a8 <RCCEx_PLL3_Config+0x15c>)
 800d670:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800d674:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d676:	f7f6 fd99 	bl	80041ac <HAL_GetTick>
 800d67a:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800d67c:	e008      	b.n	800d690 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800d67e:	f7f6 fd95 	bl	80041ac <HAL_GetTick>
 800d682:	4602      	mov	r2, r0
 800d684:	68bb      	ldr	r3, [r7, #8]
 800d686:	1ad3      	subs	r3, r2, r3
 800d688:	2b02      	cmp	r3, #2
 800d68a:	d901      	bls.n	800d690 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800d68c:	2303      	movs	r3, #3
 800d68e:	e086      	b.n	800d79e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800d690:	4b45      	ldr	r3, [pc, #276]	; (800d7a8 <RCCEx_PLL3_Config+0x15c>)
 800d692:	681b      	ldr	r3, [r3, #0]
 800d694:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800d698:	2b00      	cmp	r3, #0
 800d69a:	d1f0      	bne.n	800d67e <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800d69c:	4b42      	ldr	r3, [pc, #264]	; (800d7a8 <RCCEx_PLL3_Config+0x15c>)
 800d69e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d6a0:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800d6a4:	687b      	ldr	r3, [r7, #4]
 800d6a6:	681b      	ldr	r3, [r3, #0]
 800d6a8:	051b      	lsls	r3, r3, #20
 800d6aa:	493f      	ldr	r1, [pc, #252]	; (800d7a8 <RCCEx_PLL3_Config+0x15c>)
 800d6ac:	4313      	orrs	r3, r2
 800d6ae:	628b      	str	r3, [r1, #40]	; 0x28
 800d6b0:	687b      	ldr	r3, [r7, #4]
 800d6b2:	685b      	ldr	r3, [r3, #4]
 800d6b4:	3b01      	subs	r3, #1
 800d6b6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800d6ba:	687b      	ldr	r3, [r7, #4]
 800d6bc:	689b      	ldr	r3, [r3, #8]
 800d6be:	3b01      	subs	r3, #1
 800d6c0:	025b      	lsls	r3, r3, #9
 800d6c2:	b29b      	uxth	r3, r3
 800d6c4:	431a      	orrs	r2, r3
 800d6c6:	687b      	ldr	r3, [r7, #4]
 800d6c8:	68db      	ldr	r3, [r3, #12]
 800d6ca:	3b01      	subs	r3, #1
 800d6cc:	041b      	lsls	r3, r3, #16
 800d6ce:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800d6d2:	431a      	orrs	r2, r3
 800d6d4:	687b      	ldr	r3, [r7, #4]
 800d6d6:	691b      	ldr	r3, [r3, #16]
 800d6d8:	3b01      	subs	r3, #1
 800d6da:	061b      	lsls	r3, r3, #24
 800d6dc:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800d6e0:	4931      	ldr	r1, [pc, #196]	; (800d7a8 <RCCEx_PLL3_Config+0x15c>)
 800d6e2:	4313      	orrs	r3, r2
 800d6e4:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800d6e6:	4b30      	ldr	r3, [pc, #192]	; (800d7a8 <RCCEx_PLL3_Config+0x15c>)
 800d6e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d6ea:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800d6ee:	687b      	ldr	r3, [r7, #4]
 800d6f0:	695b      	ldr	r3, [r3, #20]
 800d6f2:	492d      	ldr	r1, [pc, #180]	; (800d7a8 <RCCEx_PLL3_Config+0x15c>)
 800d6f4:	4313      	orrs	r3, r2
 800d6f6:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800d6f8:	4b2b      	ldr	r3, [pc, #172]	; (800d7a8 <RCCEx_PLL3_Config+0x15c>)
 800d6fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d6fc:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800d700:	687b      	ldr	r3, [r7, #4]
 800d702:	699b      	ldr	r3, [r3, #24]
 800d704:	4928      	ldr	r1, [pc, #160]	; (800d7a8 <RCCEx_PLL3_Config+0x15c>)
 800d706:	4313      	orrs	r3, r2
 800d708:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800d70a:	4b27      	ldr	r3, [pc, #156]	; (800d7a8 <RCCEx_PLL3_Config+0x15c>)
 800d70c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d70e:	4a26      	ldr	r2, [pc, #152]	; (800d7a8 <RCCEx_PLL3_Config+0x15c>)
 800d710:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800d714:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800d716:	4b24      	ldr	r3, [pc, #144]	; (800d7a8 <RCCEx_PLL3_Config+0x15c>)
 800d718:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800d71a:	4b24      	ldr	r3, [pc, #144]	; (800d7ac <RCCEx_PLL3_Config+0x160>)
 800d71c:	4013      	ands	r3, r2
 800d71e:	687a      	ldr	r2, [r7, #4]
 800d720:	69d2      	ldr	r2, [r2, #28]
 800d722:	00d2      	lsls	r2, r2, #3
 800d724:	4920      	ldr	r1, [pc, #128]	; (800d7a8 <RCCEx_PLL3_Config+0x15c>)
 800d726:	4313      	orrs	r3, r2
 800d728:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800d72a:	4b1f      	ldr	r3, [pc, #124]	; (800d7a8 <RCCEx_PLL3_Config+0x15c>)
 800d72c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d72e:	4a1e      	ldr	r2, [pc, #120]	; (800d7a8 <RCCEx_PLL3_Config+0x15c>)
 800d730:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800d734:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800d736:	683b      	ldr	r3, [r7, #0]
 800d738:	2b00      	cmp	r3, #0
 800d73a:	d106      	bne.n	800d74a <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800d73c:	4b1a      	ldr	r3, [pc, #104]	; (800d7a8 <RCCEx_PLL3_Config+0x15c>)
 800d73e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d740:	4a19      	ldr	r2, [pc, #100]	; (800d7a8 <RCCEx_PLL3_Config+0x15c>)
 800d742:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800d746:	62d3      	str	r3, [r2, #44]	; 0x2c
 800d748:	e00f      	b.n	800d76a <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800d74a:	683b      	ldr	r3, [r7, #0]
 800d74c:	2b01      	cmp	r3, #1
 800d74e:	d106      	bne.n	800d75e <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800d750:	4b15      	ldr	r3, [pc, #84]	; (800d7a8 <RCCEx_PLL3_Config+0x15c>)
 800d752:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d754:	4a14      	ldr	r2, [pc, #80]	; (800d7a8 <RCCEx_PLL3_Config+0x15c>)
 800d756:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800d75a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800d75c:	e005      	b.n	800d76a <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800d75e:	4b12      	ldr	r3, [pc, #72]	; (800d7a8 <RCCEx_PLL3_Config+0x15c>)
 800d760:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d762:	4a11      	ldr	r2, [pc, #68]	; (800d7a8 <RCCEx_PLL3_Config+0x15c>)
 800d764:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800d768:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800d76a:	4b0f      	ldr	r3, [pc, #60]	; (800d7a8 <RCCEx_PLL3_Config+0x15c>)
 800d76c:	681b      	ldr	r3, [r3, #0]
 800d76e:	4a0e      	ldr	r2, [pc, #56]	; (800d7a8 <RCCEx_PLL3_Config+0x15c>)
 800d770:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800d774:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800d776:	f7f6 fd19 	bl	80041ac <HAL_GetTick>
 800d77a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800d77c:	e008      	b.n	800d790 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800d77e:	f7f6 fd15 	bl	80041ac <HAL_GetTick>
 800d782:	4602      	mov	r2, r0
 800d784:	68bb      	ldr	r3, [r7, #8]
 800d786:	1ad3      	subs	r3, r2, r3
 800d788:	2b02      	cmp	r3, #2
 800d78a:	d901      	bls.n	800d790 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800d78c:	2303      	movs	r3, #3
 800d78e:	e006      	b.n	800d79e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800d790:	4b05      	ldr	r3, [pc, #20]	; (800d7a8 <RCCEx_PLL3_Config+0x15c>)
 800d792:	681b      	ldr	r3, [r3, #0]
 800d794:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800d798:	2b00      	cmp	r3, #0
 800d79a:	d0f0      	beq.n	800d77e <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800d79c:	7bfb      	ldrb	r3, [r7, #15]
}
 800d79e:	4618      	mov	r0, r3
 800d7a0:	3710      	adds	r7, #16
 800d7a2:	46bd      	mov	sp, r7
 800d7a4:	bd80      	pop	{r7, pc}
 800d7a6:	bf00      	nop
 800d7a8:	58024400 	.word	0x58024400
 800d7ac:	ffff0007 	.word	0xffff0007

0800d7b0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800d7b0:	b580      	push	{r7, lr}
 800d7b2:	b082      	sub	sp, #8
 800d7b4:	af00      	add	r7, sp, #0
 800d7b6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800d7b8:	687b      	ldr	r3, [r7, #4]
 800d7ba:	2b00      	cmp	r3, #0
 800d7bc:	d101      	bne.n	800d7c2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800d7be:	2301      	movs	r3, #1
 800d7c0:	e049      	b.n	800d856 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800d7c2:	687b      	ldr	r3, [r7, #4]
 800d7c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800d7c8:	b2db      	uxtb	r3, r3
 800d7ca:	2b00      	cmp	r3, #0
 800d7cc:	d106      	bne.n	800d7dc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800d7ce:	687b      	ldr	r3, [r7, #4]
 800d7d0:	2200      	movs	r2, #0
 800d7d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800d7d6:	6878      	ldr	r0, [r7, #4]
 800d7d8:	f7f5 ff8c 	bl	80036f4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800d7dc:	687b      	ldr	r3, [r7, #4]
 800d7de:	2202      	movs	r2, #2
 800d7e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800d7e4:	687b      	ldr	r3, [r7, #4]
 800d7e6:	681a      	ldr	r2, [r3, #0]
 800d7e8:	687b      	ldr	r3, [r7, #4]
 800d7ea:	3304      	adds	r3, #4
 800d7ec:	4619      	mov	r1, r3
 800d7ee:	4610      	mov	r0, r2
 800d7f0:	f000 f92e 	bl	800da50 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800d7f4:	687b      	ldr	r3, [r7, #4]
 800d7f6:	2201      	movs	r2, #1
 800d7f8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d7fc:	687b      	ldr	r3, [r7, #4]
 800d7fe:	2201      	movs	r2, #1
 800d800:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800d804:	687b      	ldr	r3, [r7, #4]
 800d806:	2201      	movs	r2, #1
 800d808:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800d80c:	687b      	ldr	r3, [r7, #4]
 800d80e:	2201      	movs	r2, #1
 800d810:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800d814:	687b      	ldr	r3, [r7, #4]
 800d816:	2201      	movs	r2, #1
 800d818:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800d81c:	687b      	ldr	r3, [r7, #4]
 800d81e:	2201      	movs	r2, #1
 800d820:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800d824:	687b      	ldr	r3, [r7, #4]
 800d826:	2201      	movs	r2, #1
 800d828:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800d82c:	687b      	ldr	r3, [r7, #4]
 800d82e:	2201      	movs	r2, #1
 800d830:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d834:	687b      	ldr	r3, [r7, #4]
 800d836:	2201      	movs	r2, #1
 800d838:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800d83c:	687b      	ldr	r3, [r7, #4]
 800d83e:	2201      	movs	r2, #1
 800d840:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800d844:	687b      	ldr	r3, [r7, #4]
 800d846:	2201      	movs	r2, #1
 800d848:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800d84c:	687b      	ldr	r3, [r7, #4]
 800d84e:	2201      	movs	r2, #1
 800d850:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800d854:	2300      	movs	r3, #0
}
 800d856:	4618      	mov	r0, r3
 800d858:	3708      	adds	r7, #8
 800d85a:	46bd      	mov	sp, r7
 800d85c:	bd80      	pop	{r7, pc}
	...

0800d860 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800d860:	b580      	push	{r7, lr}
 800d862:	b084      	sub	sp, #16
 800d864:	af00      	add	r7, sp, #0
 800d866:	6078      	str	r0, [r7, #4]
 800d868:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800d86a:	2300      	movs	r3, #0
 800d86c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800d86e:	687b      	ldr	r3, [r7, #4]
 800d870:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800d874:	2b01      	cmp	r3, #1
 800d876:	d101      	bne.n	800d87c <HAL_TIM_ConfigClockSource+0x1c>
 800d878:	2302      	movs	r3, #2
 800d87a:	e0dc      	b.n	800da36 <HAL_TIM_ConfigClockSource+0x1d6>
 800d87c:	687b      	ldr	r3, [r7, #4]
 800d87e:	2201      	movs	r2, #1
 800d880:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800d884:	687b      	ldr	r3, [r7, #4]
 800d886:	2202      	movs	r2, #2
 800d888:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800d88c:	687b      	ldr	r3, [r7, #4]
 800d88e:	681b      	ldr	r3, [r3, #0]
 800d890:	689b      	ldr	r3, [r3, #8]
 800d892:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800d894:	68ba      	ldr	r2, [r7, #8]
 800d896:	4b6a      	ldr	r3, [pc, #424]	; (800da40 <HAL_TIM_ConfigClockSource+0x1e0>)
 800d898:	4013      	ands	r3, r2
 800d89a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800d89c:	68bb      	ldr	r3, [r7, #8]
 800d89e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800d8a2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800d8a4:	687b      	ldr	r3, [r7, #4]
 800d8a6:	681b      	ldr	r3, [r3, #0]
 800d8a8:	68ba      	ldr	r2, [r7, #8]
 800d8aa:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800d8ac:	683b      	ldr	r3, [r7, #0]
 800d8ae:	681b      	ldr	r3, [r3, #0]
 800d8b0:	4a64      	ldr	r2, [pc, #400]	; (800da44 <HAL_TIM_ConfigClockSource+0x1e4>)
 800d8b2:	4293      	cmp	r3, r2
 800d8b4:	f000 80a9 	beq.w	800da0a <HAL_TIM_ConfigClockSource+0x1aa>
 800d8b8:	4a62      	ldr	r2, [pc, #392]	; (800da44 <HAL_TIM_ConfigClockSource+0x1e4>)
 800d8ba:	4293      	cmp	r3, r2
 800d8bc:	f200 80ae 	bhi.w	800da1c <HAL_TIM_ConfigClockSource+0x1bc>
 800d8c0:	4a61      	ldr	r2, [pc, #388]	; (800da48 <HAL_TIM_ConfigClockSource+0x1e8>)
 800d8c2:	4293      	cmp	r3, r2
 800d8c4:	f000 80a1 	beq.w	800da0a <HAL_TIM_ConfigClockSource+0x1aa>
 800d8c8:	4a5f      	ldr	r2, [pc, #380]	; (800da48 <HAL_TIM_ConfigClockSource+0x1e8>)
 800d8ca:	4293      	cmp	r3, r2
 800d8cc:	f200 80a6 	bhi.w	800da1c <HAL_TIM_ConfigClockSource+0x1bc>
 800d8d0:	4a5e      	ldr	r2, [pc, #376]	; (800da4c <HAL_TIM_ConfigClockSource+0x1ec>)
 800d8d2:	4293      	cmp	r3, r2
 800d8d4:	f000 8099 	beq.w	800da0a <HAL_TIM_ConfigClockSource+0x1aa>
 800d8d8:	4a5c      	ldr	r2, [pc, #368]	; (800da4c <HAL_TIM_ConfigClockSource+0x1ec>)
 800d8da:	4293      	cmp	r3, r2
 800d8dc:	f200 809e 	bhi.w	800da1c <HAL_TIM_ConfigClockSource+0x1bc>
 800d8e0:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800d8e4:	f000 8091 	beq.w	800da0a <HAL_TIM_ConfigClockSource+0x1aa>
 800d8e8:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800d8ec:	f200 8096 	bhi.w	800da1c <HAL_TIM_ConfigClockSource+0x1bc>
 800d8f0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800d8f4:	f000 8089 	beq.w	800da0a <HAL_TIM_ConfigClockSource+0x1aa>
 800d8f8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800d8fc:	f200 808e 	bhi.w	800da1c <HAL_TIM_ConfigClockSource+0x1bc>
 800d900:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800d904:	d03e      	beq.n	800d984 <HAL_TIM_ConfigClockSource+0x124>
 800d906:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800d90a:	f200 8087 	bhi.w	800da1c <HAL_TIM_ConfigClockSource+0x1bc>
 800d90e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d912:	f000 8086 	beq.w	800da22 <HAL_TIM_ConfigClockSource+0x1c2>
 800d916:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d91a:	d87f      	bhi.n	800da1c <HAL_TIM_ConfigClockSource+0x1bc>
 800d91c:	2b70      	cmp	r3, #112	; 0x70
 800d91e:	d01a      	beq.n	800d956 <HAL_TIM_ConfigClockSource+0xf6>
 800d920:	2b70      	cmp	r3, #112	; 0x70
 800d922:	d87b      	bhi.n	800da1c <HAL_TIM_ConfigClockSource+0x1bc>
 800d924:	2b60      	cmp	r3, #96	; 0x60
 800d926:	d050      	beq.n	800d9ca <HAL_TIM_ConfigClockSource+0x16a>
 800d928:	2b60      	cmp	r3, #96	; 0x60
 800d92a:	d877      	bhi.n	800da1c <HAL_TIM_ConfigClockSource+0x1bc>
 800d92c:	2b50      	cmp	r3, #80	; 0x50
 800d92e:	d03c      	beq.n	800d9aa <HAL_TIM_ConfigClockSource+0x14a>
 800d930:	2b50      	cmp	r3, #80	; 0x50
 800d932:	d873      	bhi.n	800da1c <HAL_TIM_ConfigClockSource+0x1bc>
 800d934:	2b40      	cmp	r3, #64	; 0x40
 800d936:	d058      	beq.n	800d9ea <HAL_TIM_ConfigClockSource+0x18a>
 800d938:	2b40      	cmp	r3, #64	; 0x40
 800d93a:	d86f      	bhi.n	800da1c <HAL_TIM_ConfigClockSource+0x1bc>
 800d93c:	2b30      	cmp	r3, #48	; 0x30
 800d93e:	d064      	beq.n	800da0a <HAL_TIM_ConfigClockSource+0x1aa>
 800d940:	2b30      	cmp	r3, #48	; 0x30
 800d942:	d86b      	bhi.n	800da1c <HAL_TIM_ConfigClockSource+0x1bc>
 800d944:	2b20      	cmp	r3, #32
 800d946:	d060      	beq.n	800da0a <HAL_TIM_ConfigClockSource+0x1aa>
 800d948:	2b20      	cmp	r3, #32
 800d94a:	d867      	bhi.n	800da1c <HAL_TIM_ConfigClockSource+0x1bc>
 800d94c:	2b00      	cmp	r3, #0
 800d94e:	d05c      	beq.n	800da0a <HAL_TIM_ConfigClockSource+0x1aa>
 800d950:	2b10      	cmp	r3, #16
 800d952:	d05a      	beq.n	800da0a <HAL_TIM_ConfigClockSource+0x1aa>
 800d954:	e062      	b.n	800da1c <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800d956:	687b      	ldr	r3, [r7, #4]
 800d958:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800d95a:	683b      	ldr	r3, [r7, #0]
 800d95c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800d95e:	683b      	ldr	r3, [r7, #0]
 800d960:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800d962:	683b      	ldr	r3, [r7, #0]
 800d964:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800d966:	f000 f98b 	bl	800dc80 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800d96a:	687b      	ldr	r3, [r7, #4]
 800d96c:	681b      	ldr	r3, [r3, #0]
 800d96e:	689b      	ldr	r3, [r3, #8]
 800d970:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800d972:	68bb      	ldr	r3, [r7, #8]
 800d974:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800d978:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800d97a:	687b      	ldr	r3, [r7, #4]
 800d97c:	681b      	ldr	r3, [r3, #0]
 800d97e:	68ba      	ldr	r2, [r7, #8]
 800d980:	609a      	str	r2, [r3, #8]
      break;
 800d982:	e04f      	b.n	800da24 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800d984:	687b      	ldr	r3, [r7, #4]
 800d986:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800d988:	683b      	ldr	r3, [r7, #0]
 800d98a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800d98c:	683b      	ldr	r3, [r7, #0]
 800d98e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800d990:	683b      	ldr	r3, [r7, #0]
 800d992:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800d994:	f000 f974 	bl	800dc80 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800d998:	687b      	ldr	r3, [r7, #4]
 800d99a:	681b      	ldr	r3, [r3, #0]
 800d99c:	689a      	ldr	r2, [r3, #8]
 800d99e:	687b      	ldr	r3, [r7, #4]
 800d9a0:	681b      	ldr	r3, [r3, #0]
 800d9a2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800d9a6:	609a      	str	r2, [r3, #8]
      break;
 800d9a8:	e03c      	b.n	800da24 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800d9aa:	687b      	ldr	r3, [r7, #4]
 800d9ac:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800d9ae:	683b      	ldr	r3, [r7, #0]
 800d9b0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800d9b2:	683b      	ldr	r3, [r7, #0]
 800d9b4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800d9b6:	461a      	mov	r2, r3
 800d9b8:	f000 f8e4 	bl	800db84 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800d9bc:	687b      	ldr	r3, [r7, #4]
 800d9be:	681b      	ldr	r3, [r3, #0]
 800d9c0:	2150      	movs	r1, #80	; 0x50
 800d9c2:	4618      	mov	r0, r3
 800d9c4:	f000 f93e 	bl	800dc44 <TIM_ITRx_SetConfig>
      break;
 800d9c8:	e02c      	b.n	800da24 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800d9ca:	687b      	ldr	r3, [r7, #4]
 800d9cc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800d9ce:	683b      	ldr	r3, [r7, #0]
 800d9d0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800d9d2:	683b      	ldr	r3, [r7, #0]
 800d9d4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800d9d6:	461a      	mov	r2, r3
 800d9d8:	f000 f903 	bl	800dbe2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800d9dc:	687b      	ldr	r3, [r7, #4]
 800d9de:	681b      	ldr	r3, [r3, #0]
 800d9e0:	2160      	movs	r1, #96	; 0x60
 800d9e2:	4618      	mov	r0, r3
 800d9e4:	f000 f92e 	bl	800dc44 <TIM_ITRx_SetConfig>
      break;
 800d9e8:	e01c      	b.n	800da24 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800d9ea:	687b      	ldr	r3, [r7, #4]
 800d9ec:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800d9ee:	683b      	ldr	r3, [r7, #0]
 800d9f0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800d9f2:	683b      	ldr	r3, [r7, #0]
 800d9f4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800d9f6:	461a      	mov	r2, r3
 800d9f8:	f000 f8c4 	bl	800db84 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800d9fc:	687b      	ldr	r3, [r7, #4]
 800d9fe:	681b      	ldr	r3, [r3, #0]
 800da00:	2140      	movs	r1, #64	; 0x40
 800da02:	4618      	mov	r0, r3
 800da04:	f000 f91e 	bl	800dc44 <TIM_ITRx_SetConfig>
      break;
 800da08:	e00c      	b.n	800da24 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800da0a:	687b      	ldr	r3, [r7, #4]
 800da0c:	681a      	ldr	r2, [r3, #0]
 800da0e:	683b      	ldr	r3, [r7, #0]
 800da10:	681b      	ldr	r3, [r3, #0]
 800da12:	4619      	mov	r1, r3
 800da14:	4610      	mov	r0, r2
 800da16:	f000 f915 	bl	800dc44 <TIM_ITRx_SetConfig>
      break;
 800da1a:	e003      	b.n	800da24 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 800da1c:	2301      	movs	r3, #1
 800da1e:	73fb      	strb	r3, [r7, #15]
      break;
 800da20:	e000      	b.n	800da24 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 800da22:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800da24:	687b      	ldr	r3, [r7, #4]
 800da26:	2201      	movs	r2, #1
 800da28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800da2c:	687b      	ldr	r3, [r7, #4]
 800da2e:	2200      	movs	r2, #0
 800da30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800da34:	7bfb      	ldrb	r3, [r7, #15]
}
 800da36:	4618      	mov	r0, r3
 800da38:	3710      	adds	r7, #16
 800da3a:	46bd      	mov	sp, r7
 800da3c:	bd80      	pop	{r7, pc}
 800da3e:	bf00      	nop
 800da40:	ffceff88 	.word	0xffceff88
 800da44:	00100040 	.word	0x00100040
 800da48:	00100030 	.word	0x00100030
 800da4c:	00100020 	.word	0x00100020

0800da50 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800da50:	b480      	push	{r7}
 800da52:	b085      	sub	sp, #20
 800da54:	af00      	add	r7, sp, #0
 800da56:	6078      	str	r0, [r7, #4]
 800da58:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800da5a:	687b      	ldr	r3, [r7, #4]
 800da5c:	681b      	ldr	r3, [r3, #0]
 800da5e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800da60:	687b      	ldr	r3, [r7, #4]
 800da62:	4a40      	ldr	r2, [pc, #256]	; (800db64 <TIM_Base_SetConfig+0x114>)
 800da64:	4293      	cmp	r3, r2
 800da66:	d013      	beq.n	800da90 <TIM_Base_SetConfig+0x40>
 800da68:	687b      	ldr	r3, [r7, #4]
 800da6a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800da6e:	d00f      	beq.n	800da90 <TIM_Base_SetConfig+0x40>
 800da70:	687b      	ldr	r3, [r7, #4]
 800da72:	4a3d      	ldr	r2, [pc, #244]	; (800db68 <TIM_Base_SetConfig+0x118>)
 800da74:	4293      	cmp	r3, r2
 800da76:	d00b      	beq.n	800da90 <TIM_Base_SetConfig+0x40>
 800da78:	687b      	ldr	r3, [r7, #4]
 800da7a:	4a3c      	ldr	r2, [pc, #240]	; (800db6c <TIM_Base_SetConfig+0x11c>)
 800da7c:	4293      	cmp	r3, r2
 800da7e:	d007      	beq.n	800da90 <TIM_Base_SetConfig+0x40>
 800da80:	687b      	ldr	r3, [r7, #4]
 800da82:	4a3b      	ldr	r2, [pc, #236]	; (800db70 <TIM_Base_SetConfig+0x120>)
 800da84:	4293      	cmp	r3, r2
 800da86:	d003      	beq.n	800da90 <TIM_Base_SetConfig+0x40>
 800da88:	687b      	ldr	r3, [r7, #4]
 800da8a:	4a3a      	ldr	r2, [pc, #232]	; (800db74 <TIM_Base_SetConfig+0x124>)
 800da8c:	4293      	cmp	r3, r2
 800da8e:	d108      	bne.n	800daa2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800da90:	68fb      	ldr	r3, [r7, #12]
 800da92:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800da96:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800da98:	683b      	ldr	r3, [r7, #0]
 800da9a:	685b      	ldr	r3, [r3, #4]
 800da9c:	68fa      	ldr	r2, [r7, #12]
 800da9e:	4313      	orrs	r3, r2
 800daa0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800daa2:	687b      	ldr	r3, [r7, #4]
 800daa4:	4a2f      	ldr	r2, [pc, #188]	; (800db64 <TIM_Base_SetConfig+0x114>)
 800daa6:	4293      	cmp	r3, r2
 800daa8:	d01f      	beq.n	800daea <TIM_Base_SetConfig+0x9a>
 800daaa:	687b      	ldr	r3, [r7, #4]
 800daac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800dab0:	d01b      	beq.n	800daea <TIM_Base_SetConfig+0x9a>
 800dab2:	687b      	ldr	r3, [r7, #4]
 800dab4:	4a2c      	ldr	r2, [pc, #176]	; (800db68 <TIM_Base_SetConfig+0x118>)
 800dab6:	4293      	cmp	r3, r2
 800dab8:	d017      	beq.n	800daea <TIM_Base_SetConfig+0x9a>
 800daba:	687b      	ldr	r3, [r7, #4]
 800dabc:	4a2b      	ldr	r2, [pc, #172]	; (800db6c <TIM_Base_SetConfig+0x11c>)
 800dabe:	4293      	cmp	r3, r2
 800dac0:	d013      	beq.n	800daea <TIM_Base_SetConfig+0x9a>
 800dac2:	687b      	ldr	r3, [r7, #4]
 800dac4:	4a2a      	ldr	r2, [pc, #168]	; (800db70 <TIM_Base_SetConfig+0x120>)
 800dac6:	4293      	cmp	r3, r2
 800dac8:	d00f      	beq.n	800daea <TIM_Base_SetConfig+0x9a>
 800daca:	687b      	ldr	r3, [r7, #4]
 800dacc:	4a29      	ldr	r2, [pc, #164]	; (800db74 <TIM_Base_SetConfig+0x124>)
 800dace:	4293      	cmp	r3, r2
 800dad0:	d00b      	beq.n	800daea <TIM_Base_SetConfig+0x9a>
 800dad2:	687b      	ldr	r3, [r7, #4]
 800dad4:	4a28      	ldr	r2, [pc, #160]	; (800db78 <TIM_Base_SetConfig+0x128>)
 800dad6:	4293      	cmp	r3, r2
 800dad8:	d007      	beq.n	800daea <TIM_Base_SetConfig+0x9a>
 800dada:	687b      	ldr	r3, [r7, #4]
 800dadc:	4a27      	ldr	r2, [pc, #156]	; (800db7c <TIM_Base_SetConfig+0x12c>)
 800dade:	4293      	cmp	r3, r2
 800dae0:	d003      	beq.n	800daea <TIM_Base_SetConfig+0x9a>
 800dae2:	687b      	ldr	r3, [r7, #4]
 800dae4:	4a26      	ldr	r2, [pc, #152]	; (800db80 <TIM_Base_SetConfig+0x130>)
 800dae6:	4293      	cmp	r3, r2
 800dae8:	d108      	bne.n	800dafc <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800daea:	68fb      	ldr	r3, [r7, #12]
 800daec:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800daf0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800daf2:	683b      	ldr	r3, [r7, #0]
 800daf4:	68db      	ldr	r3, [r3, #12]
 800daf6:	68fa      	ldr	r2, [r7, #12]
 800daf8:	4313      	orrs	r3, r2
 800dafa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800dafc:	68fb      	ldr	r3, [r7, #12]
 800dafe:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800db02:	683b      	ldr	r3, [r7, #0]
 800db04:	695b      	ldr	r3, [r3, #20]
 800db06:	4313      	orrs	r3, r2
 800db08:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800db0a:	687b      	ldr	r3, [r7, #4]
 800db0c:	68fa      	ldr	r2, [r7, #12]
 800db0e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800db10:	683b      	ldr	r3, [r7, #0]
 800db12:	689a      	ldr	r2, [r3, #8]
 800db14:	687b      	ldr	r3, [r7, #4]
 800db16:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800db18:	683b      	ldr	r3, [r7, #0]
 800db1a:	681a      	ldr	r2, [r3, #0]
 800db1c:	687b      	ldr	r3, [r7, #4]
 800db1e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800db20:	687b      	ldr	r3, [r7, #4]
 800db22:	4a10      	ldr	r2, [pc, #64]	; (800db64 <TIM_Base_SetConfig+0x114>)
 800db24:	4293      	cmp	r3, r2
 800db26:	d00f      	beq.n	800db48 <TIM_Base_SetConfig+0xf8>
 800db28:	687b      	ldr	r3, [r7, #4]
 800db2a:	4a12      	ldr	r2, [pc, #72]	; (800db74 <TIM_Base_SetConfig+0x124>)
 800db2c:	4293      	cmp	r3, r2
 800db2e:	d00b      	beq.n	800db48 <TIM_Base_SetConfig+0xf8>
 800db30:	687b      	ldr	r3, [r7, #4]
 800db32:	4a11      	ldr	r2, [pc, #68]	; (800db78 <TIM_Base_SetConfig+0x128>)
 800db34:	4293      	cmp	r3, r2
 800db36:	d007      	beq.n	800db48 <TIM_Base_SetConfig+0xf8>
 800db38:	687b      	ldr	r3, [r7, #4]
 800db3a:	4a10      	ldr	r2, [pc, #64]	; (800db7c <TIM_Base_SetConfig+0x12c>)
 800db3c:	4293      	cmp	r3, r2
 800db3e:	d003      	beq.n	800db48 <TIM_Base_SetConfig+0xf8>
 800db40:	687b      	ldr	r3, [r7, #4]
 800db42:	4a0f      	ldr	r2, [pc, #60]	; (800db80 <TIM_Base_SetConfig+0x130>)
 800db44:	4293      	cmp	r3, r2
 800db46:	d103      	bne.n	800db50 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800db48:	683b      	ldr	r3, [r7, #0]
 800db4a:	691a      	ldr	r2, [r3, #16]
 800db4c:	687b      	ldr	r3, [r7, #4]
 800db4e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800db50:	687b      	ldr	r3, [r7, #4]
 800db52:	2201      	movs	r2, #1
 800db54:	615a      	str	r2, [r3, #20]
}
 800db56:	bf00      	nop
 800db58:	3714      	adds	r7, #20
 800db5a:	46bd      	mov	sp, r7
 800db5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db60:	4770      	bx	lr
 800db62:	bf00      	nop
 800db64:	40010000 	.word	0x40010000
 800db68:	40000400 	.word	0x40000400
 800db6c:	40000800 	.word	0x40000800
 800db70:	40000c00 	.word	0x40000c00
 800db74:	40010400 	.word	0x40010400
 800db78:	40014000 	.word	0x40014000
 800db7c:	40014400 	.word	0x40014400
 800db80:	40014800 	.word	0x40014800

0800db84 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800db84:	b480      	push	{r7}
 800db86:	b087      	sub	sp, #28
 800db88:	af00      	add	r7, sp, #0
 800db8a:	60f8      	str	r0, [r7, #12]
 800db8c:	60b9      	str	r1, [r7, #8]
 800db8e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800db90:	68fb      	ldr	r3, [r7, #12]
 800db92:	6a1b      	ldr	r3, [r3, #32]
 800db94:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800db96:	68fb      	ldr	r3, [r7, #12]
 800db98:	6a1b      	ldr	r3, [r3, #32]
 800db9a:	f023 0201 	bic.w	r2, r3, #1
 800db9e:	68fb      	ldr	r3, [r7, #12]
 800dba0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800dba2:	68fb      	ldr	r3, [r7, #12]
 800dba4:	699b      	ldr	r3, [r3, #24]
 800dba6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800dba8:	693b      	ldr	r3, [r7, #16]
 800dbaa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800dbae:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800dbb0:	687b      	ldr	r3, [r7, #4]
 800dbb2:	011b      	lsls	r3, r3, #4
 800dbb4:	693a      	ldr	r2, [r7, #16]
 800dbb6:	4313      	orrs	r3, r2
 800dbb8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800dbba:	697b      	ldr	r3, [r7, #20]
 800dbbc:	f023 030a 	bic.w	r3, r3, #10
 800dbc0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800dbc2:	697a      	ldr	r2, [r7, #20]
 800dbc4:	68bb      	ldr	r3, [r7, #8]
 800dbc6:	4313      	orrs	r3, r2
 800dbc8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800dbca:	68fb      	ldr	r3, [r7, #12]
 800dbcc:	693a      	ldr	r2, [r7, #16]
 800dbce:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800dbd0:	68fb      	ldr	r3, [r7, #12]
 800dbd2:	697a      	ldr	r2, [r7, #20]
 800dbd4:	621a      	str	r2, [r3, #32]
}
 800dbd6:	bf00      	nop
 800dbd8:	371c      	adds	r7, #28
 800dbda:	46bd      	mov	sp, r7
 800dbdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbe0:	4770      	bx	lr

0800dbe2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800dbe2:	b480      	push	{r7}
 800dbe4:	b087      	sub	sp, #28
 800dbe6:	af00      	add	r7, sp, #0
 800dbe8:	60f8      	str	r0, [r7, #12]
 800dbea:	60b9      	str	r1, [r7, #8]
 800dbec:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800dbee:	68fb      	ldr	r3, [r7, #12]
 800dbf0:	6a1b      	ldr	r3, [r3, #32]
 800dbf2:	f023 0210 	bic.w	r2, r3, #16
 800dbf6:	68fb      	ldr	r3, [r7, #12]
 800dbf8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800dbfa:	68fb      	ldr	r3, [r7, #12]
 800dbfc:	699b      	ldr	r3, [r3, #24]
 800dbfe:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800dc00:	68fb      	ldr	r3, [r7, #12]
 800dc02:	6a1b      	ldr	r3, [r3, #32]
 800dc04:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800dc06:	697b      	ldr	r3, [r7, #20]
 800dc08:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800dc0c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800dc0e:	687b      	ldr	r3, [r7, #4]
 800dc10:	031b      	lsls	r3, r3, #12
 800dc12:	697a      	ldr	r2, [r7, #20]
 800dc14:	4313      	orrs	r3, r2
 800dc16:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800dc18:	693b      	ldr	r3, [r7, #16]
 800dc1a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800dc1e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800dc20:	68bb      	ldr	r3, [r7, #8]
 800dc22:	011b      	lsls	r3, r3, #4
 800dc24:	693a      	ldr	r2, [r7, #16]
 800dc26:	4313      	orrs	r3, r2
 800dc28:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800dc2a:	68fb      	ldr	r3, [r7, #12]
 800dc2c:	697a      	ldr	r2, [r7, #20]
 800dc2e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800dc30:	68fb      	ldr	r3, [r7, #12]
 800dc32:	693a      	ldr	r2, [r7, #16]
 800dc34:	621a      	str	r2, [r3, #32]
}
 800dc36:	bf00      	nop
 800dc38:	371c      	adds	r7, #28
 800dc3a:	46bd      	mov	sp, r7
 800dc3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc40:	4770      	bx	lr
	...

0800dc44 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800dc44:	b480      	push	{r7}
 800dc46:	b085      	sub	sp, #20
 800dc48:	af00      	add	r7, sp, #0
 800dc4a:	6078      	str	r0, [r7, #4]
 800dc4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800dc4e:	687b      	ldr	r3, [r7, #4]
 800dc50:	689b      	ldr	r3, [r3, #8]
 800dc52:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800dc54:	68fa      	ldr	r2, [r7, #12]
 800dc56:	4b09      	ldr	r3, [pc, #36]	; (800dc7c <TIM_ITRx_SetConfig+0x38>)
 800dc58:	4013      	ands	r3, r2
 800dc5a:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800dc5c:	683a      	ldr	r2, [r7, #0]
 800dc5e:	68fb      	ldr	r3, [r7, #12]
 800dc60:	4313      	orrs	r3, r2
 800dc62:	f043 0307 	orr.w	r3, r3, #7
 800dc66:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800dc68:	687b      	ldr	r3, [r7, #4]
 800dc6a:	68fa      	ldr	r2, [r7, #12]
 800dc6c:	609a      	str	r2, [r3, #8]
}
 800dc6e:	bf00      	nop
 800dc70:	3714      	adds	r7, #20
 800dc72:	46bd      	mov	sp, r7
 800dc74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc78:	4770      	bx	lr
 800dc7a:	bf00      	nop
 800dc7c:	ffcfff8f 	.word	0xffcfff8f

0800dc80 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800dc80:	b480      	push	{r7}
 800dc82:	b087      	sub	sp, #28
 800dc84:	af00      	add	r7, sp, #0
 800dc86:	60f8      	str	r0, [r7, #12]
 800dc88:	60b9      	str	r1, [r7, #8]
 800dc8a:	607a      	str	r2, [r7, #4]
 800dc8c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800dc8e:	68fb      	ldr	r3, [r7, #12]
 800dc90:	689b      	ldr	r3, [r3, #8]
 800dc92:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800dc94:	697b      	ldr	r3, [r7, #20]
 800dc96:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800dc9a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800dc9c:	683b      	ldr	r3, [r7, #0]
 800dc9e:	021a      	lsls	r2, r3, #8
 800dca0:	687b      	ldr	r3, [r7, #4]
 800dca2:	431a      	orrs	r2, r3
 800dca4:	68bb      	ldr	r3, [r7, #8]
 800dca6:	4313      	orrs	r3, r2
 800dca8:	697a      	ldr	r2, [r7, #20]
 800dcaa:	4313      	orrs	r3, r2
 800dcac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800dcae:	68fb      	ldr	r3, [r7, #12]
 800dcb0:	697a      	ldr	r2, [r7, #20]
 800dcb2:	609a      	str	r2, [r3, #8]
}
 800dcb4:	bf00      	nop
 800dcb6:	371c      	adds	r7, #28
 800dcb8:	46bd      	mov	sp, r7
 800dcba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcbe:	4770      	bx	lr

0800dcc0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800dcc0:	b480      	push	{r7}
 800dcc2:	b085      	sub	sp, #20
 800dcc4:	af00      	add	r7, sp, #0
 800dcc6:	6078      	str	r0, [r7, #4]
 800dcc8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800dcca:	687b      	ldr	r3, [r7, #4]
 800dccc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800dcd0:	2b01      	cmp	r3, #1
 800dcd2:	d101      	bne.n	800dcd8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800dcd4:	2302      	movs	r3, #2
 800dcd6:	e06d      	b.n	800ddb4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800dcd8:	687b      	ldr	r3, [r7, #4]
 800dcda:	2201      	movs	r2, #1
 800dcdc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800dce0:	687b      	ldr	r3, [r7, #4]
 800dce2:	2202      	movs	r2, #2
 800dce4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800dce8:	687b      	ldr	r3, [r7, #4]
 800dcea:	681b      	ldr	r3, [r3, #0]
 800dcec:	685b      	ldr	r3, [r3, #4]
 800dcee:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800dcf0:	687b      	ldr	r3, [r7, #4]
 800dcf2:	681b      	ldr	r3, [r3, #0]
 800dcf4:	689b      	ldr	r3, [r3, #8]
 800dcf6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800dcf8:	687b      	ldr	r3, [r7, #4]
 800dcfa:	681b      	ldr	r3, [r3, #0]
 800dcfc:	4a30      	ldr	r2, [pc, #192]	; (800ddc0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800dcfe:	4293      	cmp	r3, r2
 800dd00:	d004      	beq.n	800dd0c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800dd02:	687b      	ldr	r3, [r7, #4]
 800dd04:	681b      	ldr	r3, [r3, #0]
 800dd06:	4a2f      	ldr	r2, [pc, #188]	; (800ddc4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800dd08:	4293      	cmp	r3, r2
 800dd0a:	d108      	bne.n	800dd1e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800dd0c:	68fb      	ldr	r3, [r7, #12]
 800dd0e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800dd12:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800dd14:	683b      	ldr	r3, [r7, #0]
 800dd16:	685b      	ldr	r3, [r3, #4]
 800dd18:	68fa      	ldr	r2, [r7, #12]
 800dd1a:	4313      	orrs	r3, r2
 800dd1c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800dd1e:	68fb      	ldr	r3, [r7, #12]
 800dd20:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800dd24:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800dd26:	683b      	ldr	r3, [r7, #0]
 800dd28:	681b      	ldr	r3, [r3, #0]
 800dd2a:	68fa      	ldr	r2, [r7, #12]
 800dd2c:	4313      	orrs	r3, r2
 800dd2e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800dd30:	687b      	ldr	r3, [r7, #4]
 800dd32:	681b      	ldr	r3, [r3, #0]
 800dd34:	68fa      	ldr	r2, [r7, #12]
 800dd36:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800dd38:	687b      	ldr	r3, [r7, #4]
 800dd3a:	681b      	ldr	r3, [r3, #0]
 800dd3c:	4a20      	ldr	r2, [pc, #128]	; (800ddc0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800dd3e:	4293      	cmp	r3, r2
 800dd40:	d022      	beq.n	800dd88 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800dd42:	687b      	ldr	r3, [r7, #4]
 800dd44:	681b      	ldr	r3, [r3, #0]
 800dd46:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800dd4a:	d01d      	beq.n	800dd88 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800dd4c:	687b      	ldr	r3, [r7, #4]
 800dd4e:	681b      	ldr	r3, [r3, #0]
 800dd50:	4a1d      	ldr	r2, [pc, #116]	; (800ddc8 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800dd52:	4293      	cmp	r3, r2
 800dd54:	d018      	beq.n	800dd88 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800dd56:	687b      	ldr	r3, [r7, #4]
 800dd58:	681b      	ldr	r3, [r3, #0]
 800dd5a:	4a1c      	ldr	r2, [pc, #112]	; (800ddcc <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800dd5c:	4293      	cmp	r3, r2
 800dd5e:	d013      	beq.n	800dd88 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800dd60:	687b      	ldr	r3, [r7, #4]
 800dd62:	681b      	ldr	r3, [r3, #0]
 800dd64:	4a1a      	ldr	r2, [pc, #104]	; (800ddd0 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800dd66:	4293      	cmp	r3, r2
 800dd68:	d00e      	beq.n	800dd88 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800dd6a:	687b      	ldr	r3, [r7, #4]
 800dd6c:	681b      	ldr	r3, [r3, #0]
 800dd6e:	4a15      	ldr	r2, [pc, #84]	; (800ddc4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800dd70:	4293      	cmp	r3, r2
 800dd72:	d009      	beq.n	800dd88 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800dd74:	687b      	ldr	r3, [r7, #4]
 800dd76:	681b      	ldr	r3, [r3, #0]
 800dd78:	4a16      	ldr	r2, [pc, #88]	; (800ddd4 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800dd7a:	4293      	cmp	r3, r2
 800dd7c:	d004      	beq.n	800dd88 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800dd7e:	687b      	ldr	r3, [r7, #4]
 800dd80:	681b      	ldr	r3, [r3, #0]
 800dd82:	4a15      	ldr	r2, [pc, #84]	; (800ddd8 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800dd84:	4293      	cmp	r3, r2
 800dd86:	d10c      	bne.n	800dda2 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800dd88:	68bb      	ldr	r3, [r7, #8]
 800dd8a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800dd8e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800dd90:	683b      	ldr	r3, [r7, #0]
 800dd92:	689b      	ldr	r3, [r3, #8]
 800dd94:	68ba      	ldr	r2, [r7, #8]
 800dd96:	4313      	orrs	r3, r2
 800dd98:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800dd9a:	687b      	ldr	r3, [r7, #4]
 800dd9c:	681b      	ldr	r3, [r3, #0]
 800dd9e:	68ba      	ldr	r2, [r7, #8]
 800dda0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800dda2:	687b      	ldr	r3, [r7, #4]
 800dda4:	2201      	movs	r2, #1
 800dda6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800ddaa:	687b      	ldr	r3, [r7, #4]
 800ddac:	2200      	movs	r2, #0
 800ddae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800ddb2:	2300      	movs	r3, #0
}
 800ddb4:	4618      	mov	r0, r3
 800ddb6:	3714      	adds	r7, #20
 800ddb8:	46bd      	mov	sp, r7
 800ddba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddbe:	4770      	bx	lr
 800ddc0:	40010000 	.word	0x40010000
 800ddc4:	40010400 	.word	0x40010400
 800ddc8:	40000400 	.word	0x40000400
 800ddcc:	40000800 	.word	0x40000800
 800ddd0:	40000c00 	.word	0x40000c00
 800ddd4:	40001800 	.word	0x40001800
 800ddd8:	40014000 	.word	0x40014000

0800dddc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800dddc:	b580      	push	{r7, lr}
 800ddde:	b082      	sub	sp, #8
 800dde0:	af00      	add	r7, sp, #0
 800dde2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800dde4:	687b      	ldr	r3, [r7, #4]
 800dde6:	2b00      	cmp	r3, #0
 800dde8:	d101      	bne.n	800ddee <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800ddea:	2301      	movs	r3, #1
 800ddec:	e042      	b.n	800de74 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800ddee:	687b      	ldr	r3, [r7, #4]
 800ddf0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ddf4:	2b00      	cmp	r3, #0
 800ddf6:	d106      	bne.n	800de06 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800ddf8:	687b      	ldr	r3, [r7, #4]
 800ddfa:	2200      	movs	r2, #0
 800ddfc:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800de00:	6878      	ldr	r0, [r7, #4]
 800de02:	f7f5 fcf3 	bl	80037ec <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800de06:	687b      	ldr	r3, [r7, #4]
 800de08:	2224      	movs	r2, #36	; 0x24
 800de0a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 800de0e:	687b      	ldr	r3, [r7, #4]
 800de10:	681b      	ldr	r3, [r3, #0]
 800de12:	681a      	ldr	r2, [r3, #0]
 800de14:	687b      	ldr	r3, [r7, #4]
 800de16:	681b      	ldr	r3, [r3, #0]
 800de18:	f022 0201 	bic.w	r2, r2, #1
 800de1c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800de1e:	6878      	ldr	r0, [r7, #4]
 800de20:	f000 f8ba 	bl	800df98 <UART_SetConfig>
 800de24:	4603      	mov	r3, r0
 800de26:	2b01      	cmp	r3, #1
 800de28:	d101      	bne.n	800de2e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800de2a:	2301      	movs	r3, #1
 800de2c:	e022      	b.n	800de74 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800de2e:	687b      	ldr	r3, [r7, #4]
 800de30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800de32:	2b00      	cmp	r3, #0
 800de34:	d002      	beq.n	800de3c <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800de36:	6878      	ldr	r0, [r7, #4]
 800de38:	f000 fe16 	bl	800ea68 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800de3c:	687b      	ldr	r3, [r7, #4]
 800de3e:	681b      	ldr	r3, [r3, #0]
 800de40:	685a      	ldr	r2, [r3, #4]
 800de42:	687b      	ldr	r3, [r7, #4]
 800de44:	681b      	ldr	r3, [r3, #0]
 800de46:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800de4a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800de4c:	687b      	ldr	r3, [r7, #4]
 800de4e:	681b      	ldr	r3, [r3, #0]
 800de50:	689a      	ldr	r2, [r3, #8]
 800de52:	687b      	ldr	r3, [r7, #4]
 800de54:	681b      	ldr	r3, [r3, #0]
 800de56:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800de5a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800de5c:	687b      	ldr	r3, [r7, #4]
 800de5e:	681b      	ldr	r3, [r3, #0]
 800de60:	681a      	ldr	r2, [r3, #0]
 800de62:	687b      	ldr	r3, [r7, #4]
 800de64:	681b      	ldr	r3, [r3, #0]
 800de66:	f042 0201 	orr.w	r2, r2, #1
 800de6a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800de6c:	6878      	ldr	r0, [r7, #4]
 800de6e:	f000 fe9d 	bl	800ebac <UART_CheckIdleState>
 800de72:	4603      	mov	r3, r0
}
 800de74:	4618      	mov	r0, r3
 800de76:	3708      	adds	r7, #8
 800de78:	46bd      	mov	sp, r7
 800de7a:	bd80      	pop	{r7, pc}

0800de7c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800de7c:	b580      	push	{r7, lr}
 800de7e:	b08a      	sub	sp, #40	; 0x28
 800de80:	af02      	add	r7, sp, #8
 800de82:	60f8      	str	r0, [r7, #12]
 800de84:	60b9      	str	r1, [r7, #8]
 800de86:	603b      	str	r3, [r7, #0]
 800de88:	4613      	mov	r3, r2
 800de8a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800de8c:	68fb      	ldr	r3, [r7, #12]
 800de8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800de92:	2b20      	cmp	r3, #32
 800de94:	d17b      	bne.n	800df8e <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800de96:	68bb      	ldr	r3, [r7, #8]
 800de98:	2b00      	cmp	r3, #0
 800de9a:	d002      	beq.n	800dea2 <HAL_UART_Transmit+0x26>
 800de9c:	88fb      	ldrh	r3, [r7, #6]
 800de9e:	2b00      	cmp	r3, #0
 800dea0:	d101      	bne.n	800dea6 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800dea2:	2301      	movs	r3, #1
 800dea4:	e074      	b.n	800df90 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800dea6:	68fb      	ldr	r3, [r7, #12]
 800dea8:	2200      	movs	r2, #0
 800deaa:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800deae:	68fb      	ldr	r3, [r7, #12]
 800deb0:	2221      	movs	r2, #33	; 0x21
 800deb2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800deb6:	f7f6 f979 	bl	80041ac <HAL_GetTick>
 800deba:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800debc:	68fb      	ldr	r3, [r7, #12]
 800debe:	88fa      	ldrh	r2, [r7, #6]
 800dec0:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800dec4:	68fb      	ldr	r3, [r7, #12]
 800dec6:	88fa      	ldrh	r2, [r7, #6]
 800dec8:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800decc:	68fb      	ldr	r3, [r7, #12]
 800dece:	689b      	ldr	r3, [r3, #8]
 800ded0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ded4:	d108      	bne.n	800dee8 <HAL_UART_Transmit+0x6c>
 800ded6:	68fb      	ldr	r3, [r7, #12]
 800ded8:	691b      	ldr	r3, [r3, #16]
 800deda:	2b00      	cmp	r3, #0
 800dedc:	d104      	bne.n	800dee8 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800dede:	2300      	movs	r3, #0
 800dee0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800dee2:	68bb      	ldr	r3, [r7, #8]
 800dee4:	61bb      	str	r3, [r7, #24]
 800dee6:	e003      	b.n	800def0 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800dee8:	68bb      	ldr	r3, [r7, #8]
 800deea:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800deec:	2300      	movs	r3, #0
 800deee:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800def0:	e030      	b.n	800df54 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800def2:	683b      	ldr	r3, [r7, #0]
 800def4:	9300      	str	r3, [sp, #0]
 800def6:	697b      	ldr	r3, [r7, #20]
 800def8:	2200      	movs	r2, #0
 800defa:	2180      	movs	r1, #128	; 0x80
 800defc:	68f8      	ldr	r0, [r7, #12]
 800defe:	f000 feff 	bl	800ed00 <UART_WaitOnFlagUntilTimeout>
 800df02:	4603      	mov	r3, r0
 800df04:	2b00      	cmp	r3, #0
 800df06:	d005      	beq.n	800df14 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 800df08:	68fb      	ldr	r3, [r7, #12]
 800df0a:	2220      	movs	r2, #32
 800df0c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 800df10:	2303      	movs	r3, #3
 800df12:	e03d      	b.n	800df90 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 800df14:	69fb      	ldr	r3, [r7, #28]
 800df16:	2b00      	cmp	r3, #0
 800df18:	d10b      	bne.n	800df32 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800df1a:	69bb      	ldr	r3, [r7, #24]
 800df1c:	881b      	ldrh	r3, [r3, #0]
 800df1e:	461a      	mov	r2, r3
 800df20:	68fb      	ldr	r3, [r7, #12]
 800df22:	681b      	ldr	r3, [r3, #0]
 800df24:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800df28:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800df2a:	69bb      	ldr	r3, [r7, #24]
 800df2c:	3302      	adds	r3, #2
 800df2e:	61bb      	str	r3, [r7, #24]
 800df30:	e007      	b.n	800df42 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800df32:	69fb      	ldr	r3, [r7, #28]
 800df34:	781a      	ldrb	r2, [r3, #0]
 800df36:	68fb      	ldr	r3, [r7, #12]
 800df38:	681b      	ldr	r3, [r3, #0]
 800df3a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800df3c:	69fb      	ldr	r3, [r7, #28]
 800df3e:	3301      	adds	r3, #1
 800df40:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800df42:	68fb      	ldr	r3, [r7, #12]
 800df44:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800df48:	b29b      	uxth	r3, r3
 800df4a:	3b01      	subs	r3, #1
 800df4c:	b29a      	uxth	r2, r3
 800df4e:	68fb      	ldr	r3, [r7, #12]
 800df50:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800df54:	68fb      	ldr	r3, [r7, #12]
 800df56:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800df5a:	b29b      	uxth	r3, r3
 800df5c:	2b00      	cmp	r3, #0
 800df5e:	d1c8      	bne.n	800def2 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800df60:	683b      	ldr	r3, [r7, #0]
 800df62:	9300      	str	r3, [sp, #0]
 800df64:	697b      	ldr	r3, [r7, #20]
 800df66:	2200      	movs	r2, #0
 800df68:	2140      	movs	r1, #64	; 0x40
 800df6a:	68f8      	ldr	r0, [r7, #12]
 800df6c:	f000 fec8 	bl	800ed00 <UART_WaitOnFlagUntilTimeout>
 800df70:	4603      	mov	r3, r0
 800df72:	2b00      	cmp	r3, #0
 800df74:	d005      	beq.n	800df82 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800df76:	68fb      	ldr	r3, [r7, #12]
 800df78:	2220      	movs	r2, #32
 800df7a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 800df7e:	2303      	movs	r3, #3
 800df80:	e006      	b.n	800df90 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800df82:	68fb      	ldr	r3, [r7, #12]
 800df84:	2220      	movs	r2, #32
 800df86:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 800df8a:	2300      	movs	r3, #0
 800df8c:	e000      	b.n	800df90 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800df8e:	2302      	movs	r3, #2
  }
}
 800df90:	4618      	mov	r0, r3
 800df92:	3720      	adds	r7, #32
 800df94:	46bd      	mov	sp, r7
 800df96:	bd80      	pop	{r7, pc}

0800df98 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800df98:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800df9c:	b092      	sub	sp, #72	; 0x48
 800df9e:	af00      	add	r7, sp, #0
 800dfa0:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800dfa2:	2300      	movs	r3, #0
 800dfa4:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800dfa8:	697b      	ldr	r3, [r7, #20]
 800dfaa:	689a      	ldr	r2, [r3, #8]
 800dfac:	697b      	ldr	r3, [r7, #20]
 800dfae:	691b      	ldr	r3, [r3, #16]
 800dfb0:	431a      	orrs	r2, r3
 800dfb2:	697b      	ldr	r3, [r7, #20]
 800dfb4:	695b      	ldr	r3, [r3, #20]
 800dfb6:	431a      	orrs	r2, r3
 800dfb8:	697b      	ldr	r3, [r7, #20]
 800dfba:	69db      	ldr	r3, [r3, #28]
 800dfbc:	4313      	orrs	r3, r2
 800dfbe:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800dfc0:	697b      	ldr	r3, [r7, #20]
 800dfc2:	681b      	ldr	r3, [r3, #0]
 800dfc4:	681a      	ldr	r2, [r3, #0]
 800dfc6:	4bbe      	ldr	r3, [pc, #760]	; (800e2c0 <UART_SetConfig+0x328>)
 800dfc8:	4013      	ands	r3, r2
 800dfca:	697a      	ldr	r2, [r7, #20]
 800dfcc:	6812      	ldr	r2, [r2, #0]
 800dfce:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800dfd0:	430b      	orrs	r3, r1
 800dfd2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800dfd4:	697b      	ldr	r3, [r7, #20]
 800dfd6:	681b      	ldr	r3, [r3, #0]
 800dfd8:	685b      	ldr	r3, [r3, #4]
 800dfda:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800dfde:	697b      	ldr	r3, [r7, #20]
 800dfe0:	68da      	ldr	r2, [r3, #12]
 800dfe2:	697b      	ldr	r3, [r7, #20]
 800dfe4:	681b      	ldr	r3, [r3, #0]
 800dfe6:	430a      	orrs	r2, r1
 800dfe8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800dfea:	697b      	ldr	r3, [r7, #20]
 800dfec:	699b      	ldr	r3, [r3, #24]
 800dfee:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800dff0:	697b      	ldr	r3, [r7, #20]
 800dff2:	681b      	ldr	r3, [r3, #0]
 800dff4:	4ab3      	ldr	r2, [pc, #716]	; (800e2c4 <UART_SetConfig+0x32c>)
 800dff6:	4293      	cmp	r3, r2
 800dff8:	d004      	beq.n	800e004 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800dffa:	697b      	ldr	r3, [r7, #20]
 800dffc:	6a1b      	ldr	r3, [r3, #32]
 800dffe:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800e000:	4313      	orrs	r3, r2
 800e002:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800e004:	697b      	ldr	r3, [r7, #20]
 800e006:	681b      	ldr	r3, [r3, #0]
 800e008:	689a      	ldr	r2, [r3, #8]
 800e00a:	4baf      	ldr	r3, [pc, #700]	; (800e2c8 <UART_SetConfig+0x330>)
 800e00c:	4013      	ands	r3, r2
 800e00e:	697a      	ldr	r2, [r7, #20]
 800e010:	6812      	ldr	r2, [r2, #0]
 800e012:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800e014:	430b      	orrs	r3, r1
 800e016:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800e018:	697b      	ldr	r3, [r7, #20]
 800e01a:	681b      	ldr	r3, [r3, #0]
 800e01c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e01e:	f023 010f 	bic.w	r1, r3, #15
 800e022:	697b      	ldr	r3, [r7, #20]
 800e024:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e026:	697b      	ldr	r3, [r7, #20]
 800e028:	681b      	ldr	r3, [r3, #0]
 800e02a:	430a      	orrs	r2, r1
 800e02c:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800e02e:	697b      	ldr	r3, [r7, #20]
 800e030:	681b      	ldr	r3, [r3, #0]
 800e032:	4aa6      	ldr	r2, [pc, #664]	; (800e2cc <UART_SetConfig+0x334>)
 800e034:	4293      	cmp	r3, r2
 800e036:	d177      	bne.n	800e128 <UART_SetConfig+0x190>
 800e038:	4ba5      	ldr	r3, [pc, #660]	; (800e2d0 <UART_SetConfig+0x338>)
 800e03a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e03c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800e040:	2b28      	cmp	r3, #40	; 0x28
 800e042:	d86d      	bhi.n	800e120 <UART_SetConfig+0x188>
 800e044:	a201      	add	r2, pc, #4	; (adr r2, 800e04c <UART_SetConfig+0xb4>)
 800e046:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e04a:	bf00      	nop
 800e04c:	0800e0f1 	.word	0x0800e0f1
 800e050:	0800e121 	.word	0x0800e121
 800e054:	0800e121 	.word	0x0800e121
 800e058:	0800e121 	.word	0x0800e121
 800e05c:	0800e121 	.word	0x0800e121
 800e060:	0800e121 	.word	0x0800e121
 800e064:	0800e121 	.word	0x0800e121
 800e068:	0800e121 	.word	0x0800e121
 800e06c:	0800e0f9 	.word	0x0800e0f9
 800e070:	0800e121 	.word	0x0800e121
 800e074:	0800e121 	.word	0x0800e121
 800e078:	0800e121 	.word	0x0800e121
 800e07c:	0800e121 	.word	0x0800e121
 800e080:	0800e121 	.word	0x0800e121
 800e084:	0800e121 	.word	0x0800e121
 800e088:	0800e121 	.word	0x0800e121
 800e08c:	0800e101 	.word	0x0800e101
 800e090:	0800e121 	.word	0x0800e121
 800e094:	0800e121 	.word	0x0800e121
 800e098:	0800e121 	.word	0x0800e121
 800e09c:	0800e121 	.word	0x0800e121
 800e0a0:	0800e121 	.word	0x0800e121
 800e0a4:	0800e121 	.word	0x0800e121
 800e0a8:	0800e121 	.word	0x0800e121
 800e0ac:	0800e109 	.word	0x0800e109
 800e0b0:	0800e121 	.word	0x0800e121
 800e0b4:	0800e121 	.word	0x0800e121
 800e0b8:	0800e121 	.word	0x0800e121
 800e0bc:	0800e121 	.word	0x0800e121
 800e0c0:	0800e121 	.word	0x0800e121
 800e0c4:	0800e121 	.word	0x0800e121
 800e0c8:	0800e121 	.word	0x0800e121
 800e0cc:	0800e111 	.word	0x0800e111
 800e0d0:	0800e121 	.word	0x0800e121
 800e0d4:	0800e121 	.word	0x0800e121
 800e0d8:	0800e121 	.word	0x0800e121
 800e0dc:	0800e121 	.word	0x0800e121
 800e0e0:	0800e121 	.word	0x0800e121
 800e0e4:	0800e121 	.word	0x0800e121
 800e0e8:	0800e121 	.word	0x0800e121
 800e0ec:	0800e119 	.word	0x0800e119
 800e0f0:	2301      	movs	r3, #1
 800e0f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e0f6:	e222      	b.n	800e53e <UART_SetConfig+0x5a6>
 800e0f8:	2304      	movs	r3, #4
 800e0fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e0fe:	e21e      	b.n	800e53e <UART_SetConfig+0x5a6>
 800e100:	2308      	movs	r3, #8
 800e102:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e106:	e21a      	b.n	800e53e <UART_SetConfig+0x5a6>
 800e108:	2310      	movs	r3, #16
 800e10a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e10e:	e216      	b.n	800e53e <UART_SetConfig+0x5a6>
 800e110:	2320      	movs	r3, #32
 800e112:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e116:	e212      	b.n	800e53e <UART_SetConfig+0x5a6>
 800e118:	2340      	movs	r3, #64	; 0x40
 800e11a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e11e:	e20e      	b.n	800e53e <UART_SetConfig+0x5a6>
 800e120:	2380      	movs	r3, #128	; 0x80
 800e122:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e126:	e20a      	b.n	800e53e <UART_SetConfig+0x5a6>
 800e128:	697b      	ldr	r3, [r7, #20]
 800e12a:	681b      	ldr	r3, [r3, #0]
 800e12c:	4a69      	ldr	r2, [pc, #420]	; (800e2d4 <UART_SetConfig+0x33c>)
 800e12e:	4293      	cmp	r3, r2
 800e130:	d130      	bne.n	800e194 <UART_SetConfig+0x1fc>
 800e132:	4b67      	ldr	r3, [pc, #412]	; (800e2d0 <UART_SetConfig+0x338>)
 800e134:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e136:	f003 0307 	and.w	r3, r3, #7
 800e13a:	2b05      	cmp	r3, #5
 800e13c:	d826      	bhi.n	800e18c <UART_SetConfig+0x1f4>
 800e13e:	a201      	add	r2, pc, #4	; (adr r2, 800e144 <UART_SetConfig+0x1ac>)
 800e140:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e144:	0800e15d 	.word	0x0800e15d
 800e148:	0800e165 	.word	0x0800e165
 800e14c:	0800e16d 	.word	0x0800e16d
 800e150:	0800e175 	.word	0x0800e175
 800e154:	0800e17d 	.word	0x0800e17d
 800e158:	0800e185 	.word	0x0800e185
 800e15c:	2300      	movs	r3, #0
 800e15e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e162:	e1ec      	b.n	800e53e <UART_SetConfig+0x5a6>
 800e164:	2304      	movs	r3, #4
 800e166:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e16a:	e1e8      	b.n	800e53e <UART_SetConfig+0x5a6>
 800e16c:	2308      	movs	r3, #8
 800e16e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e172:	e1e4      	b.n	800e53e <UART_SetConfig+0x5a6>
 800e174:	2310      	movs	r3, #16
 800e176:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e17a:	e1e0      	b.n	800e53e <UART_SetConfig+0x5a6>
 800e17c:	2320      	movs	r3, #32
 800e17e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e182:	e1dc      	b.n	800e53e <UART_SetConfig+0x5a6>
 800e184:	2340      	movs	r3, #64	; 0x40
 800e186:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e18a:	e1d8      	b.n	800e53e <UART_SetConfig+0x5a6>
 800e18c:	2380      	movs	r3, #128	; 0x80
 800e18e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e192:	e1d4      	b.n	800e53e <UART_SetConfig+0x5a6>
 800e194:	697b      	ldr	r3, [r7, #20]
 800e196:	681b      	ldr	r3, [r3, #0]
 800e198:	4a4f      	ldr	r2, [pc, #316]	; (800e2d8 <UART_SetConfig+0x340>)
 800e19a:	4293      	cmp	r3, r2
 800e19c:	d130      	bne.n	800e200 <UART_SetConfig+0x268>
 800e19e:	4b4c      	ldr	r3, [pc, #304]	; (800e2d0 <UART_SetConfig+0x338>)
 800e1a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e1a2:	f003 0307 	and.w	r3, r3, #7
 800e1a6:	2b05      	cmp	r3, #5
 800e1a8:	d826      	bhi.n	800e1f8 <UART_SetConfig+0x260>
 800e1aa:	a201      	add	r2, pc, #4	; (adr r2, 800e1b0 <UART_SetConfig+0x218>)
 800e1ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e1b0:	0800e1c9 	.word	0x0800e1c9
 800e1b4:	0800e1d1 	.word	0x0800e1d1
 800e1b8:	0800e1d9 	.word	0x0800e1d9
 800e1bc:	0800e1e1 	.word	0x0800e1e1
 800e1c0:	0800e1e9 	.word	0x0800e1e9
 800e1c4:	0800e1f1 	.word	0x0800e1f1
 800e1c8:	2300      	movs	r3, #0
 800e1ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e1ce:	e1b6      	b.n	800e53e <UART_SetConfig+0x5a6>
 800e1d0:	2304      	movs	r3, #4
 800e1d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e1d6:	e1b2      	b.n	800e53e <UART_SetConfig+0x5a6>
 800e1d8:	2308      	movs	r3, #8
 800e1da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e1de:	e1ae      	b.n	800e53e <UART_SetConfig+0x5a6>
 800e1e0:	2310      	movs	r3, #16
 800e1e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e1e6:	e1aa      	b.n	800e53e <UART_SetConfig+0x5a6>
 800e1e8:	2320      	movs	r3, #32
 800e1ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e1ee:	e1a6      	b.n	800e53e <UART_SetConfig+0x5a6>
 800e1f0:	2340      	movs	r3, #64	; 0x40
 800e1f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e1f6:	e1a2      	b.n	800e53e <UART_SetConfig+0x5a6>
 800e1f8:	2380      	movs	r3, #128	; 0x80
 800e1fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e1fe:	e19e      	b.n	800e53e <UART_SetConfig+0x5a6>
 800e200:	697b      	ldr	r3, [r7, #20]
 800e202:	681b      	ldr	r3, [r3, #0]
 800e204:	4a35      	ldr	r2, [pc, #212]	; (800e2dc <UART_SetConfig+0x344>)
 800e206:	4293      	cmp	r3, r2
 800e208:	d130      	bne.n	800e26c <UART_SetConfig+0x2d4>
 800e20a:	4b31      	ldr	r3, [pc, #196]	; (800e2d0 <UART_SetConfig+0x338>)
 800e20c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e20e:	f003 0307 	and.w	r3, r3, #7
 800e212:	2b05      	cmp	r3, #5
 800e214:	d826      	bhi.n	800e264 <UART_SetConfig+0x2cc>
 800e216:	a201      	add	r2, pc, #4	; (adr r2, 800e21c <UART_SetConfig+0x284>)
 800e218:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e21c:	0800e235 	.word	0x0800e235
 800e220:	0800e23d 	.word	0x0800e23d
 800e224:	0800e245 	.word	0x0800e245
 800e228:	0800e24d 	.word	0x0800e24d
 800e22c:	0800e255 	.word	0x0800e255
 800e230:	0800e25d 	.word	0x0800e25d
 800e234:	2300      	movs	r3, #0
 800e236:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e23a:	e180      	b.n	800e53e <UART_SetConfig+0x5a6>
 800e23c:	2304      	movs	r3, #4
 800e23e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e242:	e17c      	b.n	800e53e <UART_SetConfig+0x5a6>
 800e244:	2308      	movs	r3, #8
 800e246:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e24a:	e178      	b.n	800e53e <UART_SetConfig+0x5a6>
 800e24c:	2310      	movs	r3, #16
 800e24e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e252:	e174      	b.n	800e53e <UART_SetConfig+0x5a6>
 800e254:	2320      	movs	r3, #32
 800e256:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e25a:	e170      	b.n	800e53e <UART_SetConfig+0x5a6>
 800e25c:	2340      	movs	r3, #64	; 0x40
 800e25e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e262:	e16c      	b.n	800e53e <UART_SetConfig+0x5a6>
 800e264:	2380      	movs	r3, #128	; 0x80
 800e266:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e26a:	e168      	b.n	800e53e <UART_SetConfig+0x5a6>
 800e26c:	697b      	ldr	r3, [r7, #20]
 800e26e:	681b      	ldr	r3, [r3, #0]
 800e270:	4a1b      	ldr	r2, [pc, #108]	; (800e2e0 <UART_SetConfig+0x348>)
 800e272:	4293      	cmp	r3, r2
 800e274:	d142      	bne.n	800e2fc <UART_SetConfig+0x364>
 800e276:	4b16      	ldr	r3, [pc, #88]	; (800e2d0 <UART_SetConfig+0x338>)
 800e278:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e27a:	f003 0307 	and.w	r3, r3, #7
 800e27e:	2b05      	cmp	r3, #5
 800e280:	d838      	bhi.n	800e2f4 <UART_SetConfig+0x35c>
 800e282:	a201      	add	r2, pc, #4	; (adr r2, 800e288 <UART_SetConfig+0x2f0>)
 800e284:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e288:	0800e2a1 	.word	0x0800e2a1
 800e28c:	0800e2a9 	.word	0x0800e2a9
 800e290:	0800e2b1 	.word	0x0800e2b1
 800e294:	0800e2b9 	.word	0x0800e2b9
 800e298:	0800e2e5 	.word	0x0800e2e5
 800e29c:	0800e2ed 	.word	0x0800e2ed
 800e2a0:	2300      	movs	r3, #0
 800e2a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e2a6:	e14a      	b.n	800e53e <UART_SetConfig+0x5a6>
 800e2a8:	2304      	movs	r3, #4
 800e2aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e2ae:	e146      	b.n	800e53e <UART_SetConfig+0x5a6>
 800e2b0:	2308      	movs	r3, #8
 800e2b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e2b6:	e142      	b.n	800e53e <UART_SetConfig+0x5a6>
 800e2b8:	2310      	movs	r3, #16
 800e2ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e2be:	e13e      	b.n	800e53e <UART_SetConfig+0x5a6>
 800e2c0:	cfff69f3 	.word	0xcfff69f3
 800e2c4:	58000c00 	.word	0x58000c00
 800e2c8:	11fff4ff 	.word	0x11fff4ff
 800e2cc:	40011000 	.word	0x40011000
 800e2d0:	58024400 	.word	0x58024400
 800e2d4:	40004400 	.word	0x40004400
 800e2d8:	40004800 	.word	0x40004800
 800e2dc:	40004c00 	.word	0x40004c00
 800e2e0:	40005000 	.word	0x40005000
 800e2e4:	2320      	movs	r3, #32
 800e2e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e2ea:	e128      	b.n	800e53e <UART_SetConfig+0x5a6>
 800e2ec:	2340      	movs	r3, #64	; 0x40
 800e2ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e2f2:	e124      	b.n	800e53e <UART_SetConfig+0x5a6>
 800e2f4:	2380      	movs	r3, #128	; 0x80
 800e2f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e2fa:	e120      	b.n	800e53e <UART_SetConfig+0x5a6>
 800e2fc:	697b      	ldr	r3, [r7, #20]
 800e2fe:	681b      	ldr	r3, [r3, #0]
 800e300:	4acb      	ldr	r2, [pc, #812]	; (800e630 <UART_SetConfig+0x698>)
 800e302:	4293      	cmp	r3, r2
 800e304:	d176      	bne.n	800e3f4 <UART_SetConfig+0x45c>
 800e306:	4bcb      	ldr	r3, [pc, #812]	; (800e634 <UART_SetConfig+0x69c>)
 800e308:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e30a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800e30e:	2b28      	cmp	r3, #40	; 0x28
 800e310:	d86c      	bhi.n	800e3ec <UART_SetConfig+0x454>
 800e312:	a201      	add	r2, pc, #4	; (adr r2, 800e318 <UART_SetConfig+0x380>)
 800e314:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e318:	0800e3bd 	.word	0x0800e3bd
 800e31c:	0800e3ed 	.word	0x0800e3ed
 800e320:	0800e3ed 	.word	0x0800e3ed
 800e324:	0800e3ed 	.word	0x0800e3ed
 800e328:	0800e3ed 	.word	0x0800e3ed
 800e32c:	0800e3ed 	.word	0x0800e3ed
 800e330:	0800e3ed 	.word	0x0800e3ed
 800e334:	0800e3ed 	.word	0x0800e3ed
 800e338:	0800e3c5 	.word	0x0800e3c5
 800e33c:	0800e3ed 	.word	0x0800e3ed
 800e340:	0800e3ed 	.word	0x0800e3ed
 800e344:	0800e3ed 	.word	0x0800e3ed
 800e348:	0800e3ed 	.word	0x0800e3ed
 800e34c:	0800e3ed 	.word	0x0800e3ed
 800e350:	0800e3ed 	.word	0x0800e3ed
 800e354:	0800e3ed 	.word	0x0800e3ed
 800e358:	0800e3cd 	.word	0x0800e3cd
 800e35c:	0800e3ed 	.word	0x0800e3ed
 800e360:	0800e3ed 	.word	0x0800e3ed
 800e364:	0800e3ed 	.word	0x0800e3ed
 800e368:	0800e3ed 	.word	0x0800e3ed
 800e36c:	0800e3ed 	.word	0x0800e3ed
 800e370:	0800e3ed 	.word	0x0800e3ed
 800e374:	0800e3ed 	.word	0x0800e3ed
 800e378:	0800e3d5 	.word	0x0800e3d5
 800e37c:	0800e3ed 	.word	0x0800e3ed
 800e380:	0800e3ed 	.word	0x0800e3ed
 800e384:	0800e3ed 	.word	0x0800e3ed
 800e388:	0800e3ed 	.word	0x0800e3ed
 800e38c:	0800e3ed 	.word	0x0800e3ed
 800e390:	0800e3ed 	.word	0x0800e3ed
 800e394:	0800e3ed 	.word	0x0800e3ed
 800e398:	0800e3dd 	.word	0x0800e3dd
 800e39c:	0800e3ed 	.word	0x0800e3ed
 800e3a0:	0800e3ed 	.word	0x0800e3ed
 800e3a4:	0800e3ed 	.word	0x0800e3ed
 800e3a8:	0800e3ed 	.word	0x0800e3ed
 800e3ac:	0800e3ed 	.word	0x0800e3ed
 800e3b0:	0800e3ed 	.word	0x0800e3ed
 800e3b4:	0800e3ed 	.word	0x0800e3ed
 800e3b8:	0800e3e5 	.word	0x0800e3e5
 800e3bc:	2301      	movs	r3, #1
 800e3be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e3c2:	e0bc      	b.n	800e53e <UART_SetConfig+0x5a6>
 800e3c4:	2304      	movs	r3, #4
 800e3c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e3ca:	e0b8      	b.n	800e53e <UART_SetConfig+0x5a6>
 800e3cc:	2308      	movs	r3, #8
 800e3ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e3d2:	e0b4      	b.n	800e53e <UART_SetConfig+0x5a6>
 800e3d4:	2310      	movs	r3, #16
 800e3d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e3da:	e0b0      	b.n	800e53e <UART_SetConfig+0x5a6>
 800e3dc:	2320      	movs	r3, #32
 800e3de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e3e2:	e0ac      	b.n	800e53e <UART_SetConfig+0x5a6>
 800e3e4:	2340      	movs	r3, #64	; 0x40
 800e3e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e3ea:	e0a8      	b.n	800e53e <UART_SetConfig+0x5a6>
 800e3ec:	2380      	movs	r3, #128	; 0x80
 800e3ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e3f2:	e0a4      	b.n	800e53e <UART_SetConfig+0x5a6>
 800e3f4:	697b      	ldr	r3, [r7, #20]
 800e3f6:	681b      	ldr	r3, [r3, #0]
 800e3f8:	4a8f      	ldr	r2, [pc, #572]	; (800e638 <UART_SetConfig+0x6a0>)
 800e3fa:	4293      	cmp	r3, r2
 800e3fc:	d130      	bne.n	800e460 <UART_SetConfig+0x4c8>
 800e3fe:	4b8d      	ldr	r3, [pc, #564]	; (800e634 <UART_SetConfig+0x69c>)
 800e400:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e402:	f003 0307 	and.w	r3, r3, #7
 800e406:	2b05      	cmp	r3, #5
 800e408:	d826      	bhi.n	800e458 <UART_SetConfig+0x4c0>
 800e40a:	a201      	add	r2, pc, #4	; (adr r2, 800e410 <UART_SetConfig+0x478>)
 800e40c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e410:	0800e429 	.word	0x0800e429
 800e414:	0800e431 	.word	0x0800e431
 800e418:	0800e439 	.word	0x0800e439
 800e41c:	0800e441 	.word	0x0800e441
 800e420:	0800e449 	.word	0x0800e449
 800e424:	0800e451 	.word	0x0800e451
 800e428:	2300      	movs	r3, #0
 800e42a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e42e:	e086      	b.n	800e53e <UART_SetConfig+0x5a6>
 800e430:	2304      	movs	r3, #4
 800e432:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e436:	e082      	b.n	800e53e <UART_SetConfig+0x5a6>
 800e438:	2308      	movs	r3, #8
 800e43a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e43e:	e07e      	b.n	800e53e <UART_SetConfig+0x5a6>
 800e440:	2310      	movs	r3, #16
 800e442:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e446:	e07a      	b.n	800e53e <UART_SetConfig+0x5a6>
 800e448:	2320      	movs	r3, #32
 800e44a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e44e:	e076      	b.n	800e53e <UART_SetConfig+0x5a6>
 800e450:	2340      	movs	r3, #64	; 0x40
 800e452:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e456:	e072      	b.n	800e53e <UART_SetConfig+0x5a6>
 800e458:	2380      	movs	r3, #128	; 0x80
 800e45a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e45e:	e06e      	b.n	800e53e <UART_SetConfig+0x5a6>
 800e460:	697b      	ldr	r3, [r7, #20]
 800e462:	681b      	ldr	r3, [r3, #0]
 800e464:	4a75      	ldr	r2, [pc, #468]	; (800e63c <UART_SetConfig+0x6a4>)
 800e466:	4293      	cmp	r3, r2
 800e468:	d130      	bne.n	800e4cc <UART_SetConfig+0x534>
 800e46a:	4b72      	ldr	r3, [pc, #456]	; (800e634 <UART_SetConfig+0x69c>)
 800e46c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e46e:	f003 0307 	and.w	r3, r3, #7
 800e472:	2b05      	cmp	r3, #5
 800e474:	d826      	bhi.n	800e4c4 <UART_SetConfig+0x52c>
 800e476:	a201      	add	r2, pc, #4	; (adr r2, 800e47c <UART_SetConfig+0x4e4>)
 800e478:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e47c:	0800e495 	.word	0x0800e495
 800e480:	0800e49d 	.word	0x0800e49d
 800e484:	0800e4a5 	.word	0x0800e4a5
 800e488:	0800e4ad 	.word	0x0800e4ad
 800e48c:	0800e4b5 	.word	0x0800e4b5
 800e490:	0800e4bd 	.word	0x0800e4bd
 800e494:	2300      	movs	r3, #0
 800e496:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e49a:	e050      	b.n	800e53e <UART_SetConfig+0x5a6>
 800e49c:	2304      	movs	r3, #4
 800e49e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e4a2:	e04c      	b.n	800e53e <UART_SetConfig+0x5a6>
 800e4a4:	2308      	movs	r3, #8
 800e4a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e4aa:	e048      	b.n	800e53e <UART_SetConfig+0x5a6>
 800e4ac:	2310      	movs	r3, #16
 800e4ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e4b2:	e044      	b.n	800e53e <UART_SetConfig+0x5a6>
 800e4b4:	2320      	movs	r3, #32
 800e4b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e4ba:	e040      	b.n	800e53e <UART_SetConfig+0x5a6>
 800e4bc:	2340      	movs	r3, #64	; 0x40
 800e4be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e4c2:	e03c      	b.n	800e53e <UART_SetConfig+0x5a6>
 800e4c4:	2380      	movs	r3, #128	; 0x80
 800e4c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e4ca:	e038      	b.n	800e53e <UART_SetConfig+0x5a6>
 800e4cc:	697b      	ldr	r3, [r7, #20]
 800e4ce:	681b      	ldr	r3, [r3, #0]
 800e4d0:	4a5b      	ldr	r2, [pc, #364]	; (800e640 <UART_SetConfig+0x6a8>)
 800e4d2:	4293      	cmp	r3, r2
 800e4d4:	d130      	bne.n	800e538 <UART_SetConfig+0x5a0>
 800e4d6:	4b57      	ldr	r3, [pc, #348]	; (800e634 <UART_SetConfig+0x69c>)
 800e4d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e4da:	f003 0307 	and.w	r3, r3, #7
 800e4de:	2b05      	cmp	r3, #5
 800e4e0:	d826      	bhi.n	800e530 <UART_SetConfig+0x598>
 800e4e2:	a201      	add	r2, pc, #4	; (adr r2, 800e4e8 <UART_SetConfig+0x550>)
 800e4e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e4e8:	0800e501 	.word	0x0800e501
 800e4ec:	0800e509 	.word	0x0800e509
 800e4f0:	0800e511 	.word	0x0800e511
 800e4f4:	0800e519 	.word	0x0800e519
 800e4f8:	0800e521 	.word	0x0800e521
 800e4fc:	0800e529 	.word	0x0800e529
 800e500:	2302      	movs	r3, #2
 800e502:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e506:	e01a      	b.n	800e53e <UART_SetConfig+0x5a6>
 800e508:	2304      	movs	r3, #4
 800e50a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e50e:	e016      	b.n	800e53e <UART_SetConfig+0x5a6>
 800e510:	2308      	movs	r3, #8
 800e512:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e516:	e012      	b.n	800e53e <UART_SetConfig+0x5a6>
 800e518:	2310      	movs	r3, #16
 800e51a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e51e:	e00e      	b.n	800e53e <UART_SetConfig+0x5a6>
 800e520:	2320      	movs	r3, #32
 800e522:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e526:	e00a      	b.n	800e53e <UART_SetConfig+0x5a6>
 800e528:	2340      	movs	r3, #64	; 0x40
 800e52a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e52e:	e006      	b.n	800e53e <UART_SetConfig+0x5a6>
 800e530:	2380      	movs	r3, #128	; 0x80
 800e532:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800e536:	e002      	b.n	800e53e <UART_SetConfig+0x5a6>
 800e538:	2380      	movs	r3, #128	; 0x80
 800e53a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800e53e:	697b      	ldr	r3, [r7, #20]
 800e540:	681b      	ldr	r3, [r3, #0]
 800e542:	4a3f      	ldr	r2, [pc, #252]	; (800e640 <UART_SetConfig+0x6a8>)
 800e544:	4293      	cmp	r3, r2
 800e546:	f040 80f8 	bne.w	800e73a <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800e54a:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800e54e:	2b20      	cmp	r3, #32
 800e550:	dc46      	bgt.n	800e5e0 <UART_SetConfig+0x648>
 800e552:	2b02      	cmp	r3, #2
 800e554:	f2c0 8082 	blt.w	800e65c <UART_SetConfig+0x6c4>
 800e558:	3b02      	subs	r3, #2
 800e55a:	2b1e      	cmp	r3, #30
 800e55c:	d87e      	bhi.n	800e65c <UART_SetConfig+0x6c4>
 800e55e:	a201      	add	r2, pc, #4	; (adr r2, 800e564 <UART_SetConfig+0x5cc>)
 800e560:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e564:	0800e5e7 	.word	0x0800e5e7
 800e568:	0800e65d 	.word	0x0800e65d
 800e56c:	0800e5ef 	.word	0x0800e5ef
 800e570:	0800e65d 	.word	0x0800e65d
 800e574:	0800e65d 	.word	0x0800e65d
 800e578:	0800e65d 	.word	0x0800e65d
 800e57c:	0800e5ff 	.word	0x0800e5ff
 800e580:	0800e65d 	.word	0x0800e65d
 800e584:	0800e65d 	.word	0x0800e65d
 800e588:	0800e65d 	.word	0x0800e65d
 800e58c:	0800e65d 	.word	0x0800e65d
 800e590:	0800e65d 	.word	0x0800e65d
 800e594:	0800e65d 	.word	0x0800e65d
 800e598:	0800e65d 	.word	0x0800e65d
 800e59c:	0800e60f 	.word	0x0800e60f
 800e5a0:	0800e65d 	.word	0x0800e65d
 800e5a4:	0800e65d 	.word	0x0800e65d
 800e5a8:	0800e65d 	.word	0x0800e65d
 800e5ac:	0800e65d 	.word	0x0800e65d
 800e5b0:	0800e65d 	.word	0x0800e65d
 800e5b4:	0800e65d 	.word	0x0800e65d
 800e5b8:	0800e65d 	.word	0x0800e65d
 800e5bc:	0800e65d 	.word	0x0800e65d
 800e5c0:	0800e65d 	.word	0x0800e65d
 800e5c4:	0800e65d 	.word	0x0800e65d
 800e5c8:	0800e65d 	.word	0x0800e65d
 800e5cc:	0800e65d 	.word	0x0800e65d
 800e5d0:	0800e65d 	.word	0x0800e65d
 800e5d4:	0800e65d 	.word	0x0800e65d
 800e5d8:	0800e65d 	.word	0x0800e65d
 800e5dc:	0800e64f 	.word	0x0800e64f
 800e5e0:	2b40      	cmp	r3, #64	; 0x40
 800e5e2:	d037      	beq.n	800e654 <UART_SetConfig+0x6bc>
 800e5e4:	e03a      	b.n	800e65c <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800e5e6:	f7fe fb19 	bl	800cc1c <HAL_RCCEx_GetD3PCLK1Freq>
 800e5ea:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800e5ec:	e03c      	b.n	800e668 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800e5ee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800e5f2:	4618      	mov	r0, r3
 800e5f4:	f7fe fb28 	bl	800cc48 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800e5f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e5fa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e5fc:	e034      	b.n	800e668 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800e5fe:	f107 0318 	add.w	r3, r7, #24
 800e602:	4618      	mov	r0, r3
 800e604:	f7fe fc74 	bl	800cef0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800e608:	69fb      	ldr	r3, [r7, #28]
 800e60a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e60c:	e02c      	b.n	800e668 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800e60e:	4b09      	ldr	r3, [pc, #36]	; (800e634 <UART_SetConfig+0x69c>)
 800e610:	681b      	ldr	r3, [r3, #0]
 800e612:	f003 0320 	and.w	r3, r3, #32
 800e616:	2b00      	cmp	r3, #0
 800e618:	d016      	beq.n	800e648 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800e61a:	4b06      	ldr	r3, [pc, #24]	; (800e634 <UART_SetConfig+0x69c>)
 800e61c:	681b      	ldr	r3, [r3, #0]
 800e61e:	08db      	lsrs	r3, r3, #3
 800e620:	f003 0303 	and.w	r3, r3, #3
 800e624:	4a07      	ldr	r2, [pc, #28]	; (800e644 <UART_SetConfig+0x6ac>)
 800e626:	fa22 f303 	lsr.w	r3, r2, r3
 800e62a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800e62c:	e01c      	b.n	800e668 <UART_SetConfig+0x6d0>
 800e62e:	bf00      	nop
 800e630:	40011400 	.word	0x40011400
 800e634:	58024400 	.word	0x58024400
 800e638:	40007800 	.word	0x40007800
 800e63c:	40007c00 	.word	0x40007c00
 800e640:	58000c00 	.word	0x58000c00
 800e644:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 800e648:	4b9d      	ldr	r3, [pc, #628]	; (800e8c0 <UART_SetConfig+0x928>)
 800e64a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e64c:	e00c      	b.n	800e668 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800e64e:	4b9d      	ldr	r3, [pc, #628]	; (800e8c4 <UART_SetConfig+0x92c>)
 800e650:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e652:	e009      	b.n	800e668 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800e654:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800e658:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e65a:	e005      	b.n	800e668 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 800e65c:	2300      	movs	r3, #0
 800e65e:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800e660:	2301      	movs	r3, #1
 800e662:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800e666:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800e668:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e66a:	2b00      	cmp	r3, #0
 800e66c:	f000 81de 	beq.w	800ea2c <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800e670:	697b      	ldr	r3, [r7, #20]
 800e672:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e674:	4a94      	ldr	r2, [pc, #592]	; (800e8c8 <UART_SetConfig+0x930>)
 800e676:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e67a:	461a      	mov	r2, r3
 800e67c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e67e:	fbb3 f3f2 	udiv	r3, r3, r2
 800e682:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800e684:	697b      	ldr	r3, [r7, #20]
 800e686:	685a      	ldr	r2, [r3, #4]
 800e688:	4613      	mov	r3, r2
 800e68a:	005b      	lsls	r3, r3, #1
 800e68c:	4413      	add	r3, r2
 800e68e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e690:	429a      	cmp	r2, r3
 800e692:	d305      	bcc.n	800e6a0 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800e694:	697b      	ldr	r3, [r7, #20]
 800e696:	685b      	ldr	r3, [r3, #4]
 800e698:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800e69a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e69c:	429a      	cmp	r2, r3
 800e69e:	d903      	bls.n	800e6a8 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 800e6a0:	2301      	movs	r3, #1
 800e6a2:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800e6a6:	e1c1      	b.n	800ea2c <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800e6a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e6aa:	2200      	movs	r2, #0
 800e6ac:	60bb      	str	r3, [r7, #8]
 800e6ae:	60fa      	str	r2, [r7, #12]
 800e6b0:	697b      	ldr	r3, [r7, #20]
 800e6b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e6b4:	4a84      	ldr	r2, [pc, #528]	; (800e8c8 <UART_SetConfig+0x930>)
 800e6b6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e6ba:	b29b      	uxth	r3, r3
 800e6bc:	2200      	movs	r2, #0
 800e6be:	603b      	str	r3, [r7, #0]
 800e6c0:	607a      	str	r2, [r7, #4]
 800e6c2:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e6c6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800e6ca:	f7f3 fc31 	bl	8001f30 <__aeabi_uldivmod>
 800e6ce:	4602      	mov	r2, r0
 800e6d0:	460b      	mov	r3, r1
 800e6d2:	4610      	mov	r0, r2
 800e6d4:	4619      	mov	r1, r3
 800e6d6:	f04f 0200 	mov.w	r2, #0
 800e6da:	f04f 0300 	mov.w	r3, #0
 800e6de:	020b      	lsls	r3, r1, #8
 800e6e0:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800e6e4:	0202      	lsls	r2, r0, #8
 800e6e6:	6979      	ldr	r1, [r7, #20]
 800e6e8:	6849      	ldr	r1, [r1, #4]
 800e6ea:	0849      	lsrs	r1, r1, #1
 800e6ec:	2000      	movs	r0, #0
 800e6ee:	460c      	mov	r4, r1
 800e6f0:	4605      	mov	r5, r0
 800e6f2:	eb12 0804 	adds.w	r8, r2, r4
 800e6f6:	eb43 0905 	adc.w	r9, r3, r5
 800e6fa:	697b      	ldr	r3, [r7, #20]
 800e6fc:	685b      	ldr	r3, [r3, #4]
 800e6fe:	2200      	movs	r2, #0
 800e700:	469a      	mov	sl, r3
 800e702:	4693      	mov	fp, r2
 800e704:	4652      	mov	r2, sl
 800e706:	465b      	mov	r3, fp
 800e708:	4640      	mov	r0, r8
 800e70a:	4649      	mov	r1, r9
 800e70c:	f7f3 fc10 	bl	8001f30 <__aeabi_uldivmod>
 800e710:	4602      	mov	r2, r0
 800e712:	460b      	mov	r3, r1
 800e714:	4613      	mov	r3, r2
 800e716:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800e718:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e71a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800e71e:	d308      	bcc.n	800e732 <UART_SetConfig+0x79a>
 800e720:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e722:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800e726:	d204      	bcs.n	800e732 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 800e728:	697b      	ldr	r3, [r7, #20]
 800e72a:	681b      	ldr	r3, [r3, #0]
 800e72c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e72e:	60da      	str	r2, [r3, #12]
 800e730:	e17c      	b.n	800ea2c <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 800e732:	2301      	movs	r3, #1
 800e734:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800e738:	e178      	b.n	800ea2c <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800e73a:	697b      	ldr	r3, [r7, #20]
 800e73c:	69db      	ldr	r3, [r3, #28]
 800e73e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800e742:	f040 80c5 	bne.w	800e8d0 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 800e746:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800e74a:	2b20      	cmp	r3, #32
 800e74c:	dc48      	bgt.n	800e7e0 <UART_SetConfig+0x848>
 800e74e:	2b00      	cmp	r3, #0
 800e750:	db7b      	blt.n	800e84a <UART_SetConfig+0x8b2>
 800e752:	2b20      	cmp	r3, #32
 800e754:	d879      	bhi.n	800e84a <UART_SetConfig+0x8b2>
 800e756:	a201      	add	r2, pc, #4	; (adr r2, 800e75c <UART_SetConfig+0x7c4>)
 800e758:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e75c:	0800e7e7 	.word	0x0800e7e7
 800e760:	0800e7ef 	.word	0x0800e7ef
 800e764:	0800e84b 	.word	0x0800e84b
 800e768:	0800e84b 	.word	0x0800e84b
 800e76c:	0800e7f7 	.word	0x0800e7f7
 800e770:	0800e84b 	.word	0x0800e84b
 800e774:	0800e84b 	.word	0x0800e84b
 800e778:	0800e84b 	.word	0x0800e84b
 800e77c:	0800e807 	.word	0x0800e807
 800e780:	0800e84b 	.word	0x0800e84b
 800e784:	0800e84b 	.word	0x0800e84b
 800e788:	0800e84b 	.word	0x0800e84b
 800e78c:	0800e84b 	.word	0x0800e84b
 800e790:	0800e84b 	.word	0x0800e84b
 800e794:	0800e84b 	.word	0x0800e84b
 800e798:	0800e84b 	.word	0x0800e84b
 800e79c:	0800e817 	.word	0x0800e817
 800e7a0:	0800e84b 	.word	0x0800e84b
 800e7a4:	0800e84b 	.word	0x0800e84b
 800e7a8:	0800e84b 	.word	0x0800e84b
 800e7ac:	0800e84b 	.word	0x0800e84b
 800e7b0:	0800e84b 	.word	0x0800e84b
 800e7b4:	0800e84b 	.word	0x0800e84b
 800e7b8:	0800e84b 	.word	0x0800e84b
 800e7bc:	0800e84b 	.word	0x0800e84b
 800e7c0:	0800e84b 	.word	0x0800e84b
 800e7c4:	0800e84b 	.word	0x0800e84b
 800e7c8:	0800e84b 	.word	0x0800e84b
 800e7cc:	0800e84b 	.word	0x0800e84b
 800e7d0:	0800e84b 	.word	0x0800e84b
 800e7d4:	0800e84b 	.word	0x0800e84b
 800e7d8:	0800e84b 	.word	0x0800e84b
 800e7dc:	0800e83d 	.word	0x0800e83d
 800e7e0:	2b40      	cmp	r3, #64	; 0x40
 800e7e2:	d02e      	beq.n	800e842 <UART_SetConfig+0x8aa>
 800e7e4:	e031      	b.n	800e84a <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800e7e6:	f7fc fa47 	bl	800ac78 <HAL_RCC_GetPCLK1Freq>
 800e7ea:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800e7ec:	e033      	b.n	800e856 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800e7ee:	f7fc fa59 	bl	800aca4 <HAL_RCC_GetPCLK2Freq>
 800e7f2:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800e7f4:	e02f      	b.n	800e856 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800e7f6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800e7fa:	4618      	mov	r0, r3
 800e7fc:	f7fe fa24 	bl	800cc48 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800e800:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e802:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e804:	e027      	b.n	800e856 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800e806:	f107 0318 	add.w	r3, r7, #24
 800e80a:	4618      	mov	r0, r3
 800e80c:	f7fe fb70 	bl	800cef0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800e810:	69fb      	ldr	r3, [r7, #28]
 800e812:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e814:	e01f      	b.n	800e856 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800e816:	4b2d      	ldr	r3, [pc, #180]	; (800e8cc <UART_SetConfig+0x934>)
 800e818:	681b      	ldr	r3, [r3, #0]
 800e81a:	f003 0320 	and.w	r3, r3, #32
 800e81e:	2b00      	cmp	r3, #0
 800e820:	d009      	beq.n	800e836 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800e822:	4b2a      	ldr	r3, [pc, #168]	; (800e8cc <UART_SetConfig+0x934>)
 800e824:	681b      	ldr	r3, [r3, #0]
 800e826:	08db      	lsrs	r3, r3, #3
 800e828:	f003 0303 	and.w	r3, r3, #3
 800e82c:	4a24      	ldr	r2, [pc, #144]	; (800e8c0 <UART_SetConfig+0x928>)
 800e82e:	fa22 f303 	lsr.w	r3, r2, r3
 800e832:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800e834:	e00f      	b.n	800e856 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800e836:	4b22      	ldr	r3, [pc, #136]	; (800e8c0 <UART_SetConfig+0x928>)
 800e838:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e83a:	e00c      	b.n	800e856 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800e83c:	4b21      	ldr	r3, [pc, #132]	; (800e8c4 <UART_SetConfig+0x92c>)
 800e83e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e840:	e009      	b.n	800e856 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800e842:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800e846:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e848:	e005      	b.n	800e856 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800e84a:	2300      	movs	r3, #0
 800e84c:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800e84e:	2301      	movs	r3, #1
 800e850:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800e854:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800e856:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e858:	2b00      	cmp	r3, #0
 800e85a:	f000 80e7 	beq.w	800ea2c <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800e85e:	697b      	ldr	r3, [r7, #20]
 800e860:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e862:	4a19      	ldr	r2, [pc, #100]	; (800e8c8 <UART_SetConfig+0x930>)
 800e864:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e868:	461a      	mov	r2, r3
 800e86a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e86c:	fbb3 f3f2 	udiv	r3, r3, r2
 800e870:	005a      	lsls	r2, r3, #1
 800e872:	697b      	ldr	r3, [r7, #20]
 800e874:	685b      	ldr	r3, [r3, #4]
 800e876:	085b      	lsrs	r3, r3, #1
 800e878:	441a      	add	r2, r3
 800e87a:	697b      	ldr	r3, [r7, #20]
 800e87c:	685b      	ldr	r3, [r3, #4]
 800e87e:	fbb2 f3f3 	udiv	r3, r2, r3
 800e882:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800e884:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e886:	2b0f      	cmp	r3, #15
 800e888:	d916      	bls.n	800e8b8 <UART_SetConfig+0x920>
 800e88a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e88c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e890:	d212      	bcs.n	800e8b8 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800e892:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e894:	b29b      	uxth	r3, r3
 800e896:	f023 030f 	bic.w	r3, r3, #15
 800e89a:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800e89c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e89e:	085b      	lsrs	r3, r3, #1
 800e8a0:	b29b      	uxth	r3, r3
 800e8a2:	f003 0307 	and.w	r3, r3, #7
 800e8a6:	b29a      	uxth	r2, r3
 800e8a8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800e8aa:	4313      	orrs	r3, r2
 800e8ac:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 800e8ae:	697b      	ldr	r3, [r7, #20]
 800e8b0:	681b      	ldr	r3, [r3, #0]
 800e8b2:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800e8b4:	60da      	str	r2, [r3, #12]
 800e8b6:	e0b9      	b.n	800ea2c <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800e8b8:	2301      	movs	r3, #1
 800e8ba:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800e8be:	e0b5      	b.n	800ea2c <UART_SetConfig+0xa94>
 800e8c0:	03d09000 	.word	0x03d09000
 800e8c4:	003d0900 	.word	0x003d0900
 800e8c8:	0801f460 	.word	0x0801f460
 800e8cc:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 800e8d0:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800e8d4:	2b20      	cmp	r3, #32
 800e8d6:	dc49      	bgt.n	800e96c <UART_SetConfig+0x9d4>
 800e8d8:	2b00      	cmp	r3, #0
 800e8da:	db7c      	blt.n	800e9d6 <UART_SetConfig+0xa3e>
 800e8dc:	2b20      	cmp	r3, #32
 800e8de:	d87a      	bhi.n	800e9d6 <UART_SetConfig+0xa3e>
 800e8e0:	a201      	add	r2, pc, #4	; (adr r2, 800e8e8 <UART_SetConfig+0x950>)
 800e8e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e8e6:	bf00      	nop
 800e8e8:	0800e973 	.word	0x0800e973
 800e8ec:	0800e97b 	.word	0x0800e97b
 800e8f0:	0800e9d7 	.word	0x0800e9d7
 800e8f4:	0800e9d7 	.word	0x0800e9d7
 800e8f8:	0800e983 	.word	0x0800e983
 800e8fc:	0800e9d7 	.word	0x0800e9d7
 800e900:	0800e9d7 	.word	0x0800e9d7
 800e904:	0800e9d7 	.word	0x0800e9d7
 800e908:	0800e993 	.word	0x0800e993
 800e90c:	0800e9d7 	.word	0x0800e9d7
 800e910:	0800e9d7 	.word	0x0800e9d7
 800e914:	0800e9d7 	.word	0x0800e9d7
 800e918:	0800e9d7 	.word	0x0800e9d7
 800e91c:	0800e9d7 	.word	0x0800e9d7
 800e920:	0800e9d7 	.word	0x0800e9d7
 800e924:	0800e9d7 	.word	0x0800e9d7
 800e928:	0800e9a3 	.word	0x0800e9a3
 800e92c:	0800e9d7 	.word	0x0800e9d7
 800e930:	0800e9d7 	.word	0x0800e9d7
 800e934:	0800e9d7 	.word	0x0800e9d7
 800e938:	0800e9d7 	.word	0x0800e9d7
 800e93c:	0800e9d7 	.word	0x0800e9d7
 800e940:	0800e9d7 	.word	0x0800e9d7
 800e944:	0800e9d7 	.word	0x0800e9d7
 800e948:	0800e9d7 	.word	0x0800e9d7
 800e94c:	0800e9d7 	.word	0x0800e9d7
 800e950:	0800e9d7 	.word	0x0800e9d7
 800e954:	0800e9d7 	.word	0x0800e9d7
 800e958:	0800e9d7 	.word	0x0800e9d7
 800e95c:	0800e9d7 	.word	0x0800e9d7
 800e960:	0800e9d7 	.word	0x0800e9d7
 800e964:	0800e9d7 	.word	0x0800e9d7
 800e968:	0800e9c9 	.word	0x0800e9c9
 800e96c:	2b40      	cmp	r3, #64	; 0x40
 800e96e:	d02e      	beq.n	800e9ce <UART_SetConfig+0xa36>
 800e970:	e031      	b.n	800e9d6 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800e972:	f7fc f981 	bl	800ac78 <HAL_RCC_GetPCLK1Freq>
 800e976:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800e978:	e033      	b.n	800e9e2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800e97a:	f7fc f993 	bl	800aca4 <HAL_RCC_GetPCLK2Freq>
 800e97e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800e980:	e02f      	b.n	800e9e2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800e982:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800e986:	4618      	mov	r0, r3
 800e988:	f7fe f95e 	bl	800cc48 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800e98c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e98e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e990:	e027      	b.n	800e9e2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800e992:	f107 0318 	add.w	r3, r7, #24
 800e996:	4618      	mov	r0, r3
 800e998:	f7fe faaa 	bl	800cef0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800e99c:	69fb      	ldr	r3, [r7, #28]
 800e99e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e9a0:	e01f      	b.n	800e9e2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800e9a2:	4b2d      	ldr	r3, [pc, #180]	; (800ea58 <UART_SetConfig+0xac0>)
 800e9a4:	681b      	ldr	r3, [r3, #0]
 800e9a6:	f003 0320 	and.w	r3, r3, #32
 800e9aa:	2b00      	cmp	r3, #0
 800e9ac:	d009      	beq.n	800e9c2 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800e9ae:	4b2a      	ldr	r3, [pc, #168]	; (800ea58 <UART_SetConfig+0xac0>)
 800e9b0:	681b      	ldr	r3, [r3, #0]
 800e9b2:	08db      	lsrs	r3, r3, #3
 800e9b4:	f003 0303 	and.w	r3, r3, #3
 800e9b8:	4a28      	ldr	r2, [pc, #160]	; (800ea5c <UART_SetConfig+0xac4>)
 800e9ba:	fa22 f303 	lsr.w	r3, r2, r3
 800e9be:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800e9c0:	e00f      	b.n	800e9e2 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 800e9c2:	4b26      	ldr	r3, [pc, #152]	; (800ea5c <UART_SetConfig+0xac4>)
 800e9c4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e9c6:	e00c      	b.n	800e9e2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800e9c8:	4b25      	ldr	r3, [pc, #148]	; (800ea60 <UART_SetConfig+0xac8>)
 800e9ca:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e9cc:	e009      	b.n	800e9e2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800e9ce:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800e9d2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800e9d4:	e005      	b.n	800e9e2 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 800e9d6:	2300      	movs	r3, #0
 800e9d8:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800e9da:	2301      	movs	r3, #1
 800e9dc:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800e9e0:	bf00      	nop
    }

    if (pclk != 0U)
 800e9e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e9e4:	2b00      	cmp	r3, #0
 800e9e6:	d021      	beq.n	800ea2c <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800e9e8:	697b      	ldr	r3, [r7, #20]
 800e9ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e9ec:	4a1d      	ldr	r2, [pc, #116]	; (800ea64 <UART_SetConfig+0xacc>)
 800e9ee:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800e9f2:	461a      	mov	r2, r3
 800e9f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e9f6:	fbb3 f2f2 	udiv	r2, r3, r2
 800e9fa:	697b      	ldr	r3, [r7, #20]
 800e9fc:	685b      	ldr	r3, [r3, #4]
 800e9fe:	085b      	lsrs	r3, r3, #1
 800ea00:	441a      	add	r2, r3
 800ea02:	697b      	ldr	r3, [r7, #20]
 800ea04:	685b      	ldr	r3, [r3, #4]
 800ea06:	fbb2 f3f3 	udiv	r3, r2, r3
 800ea0a:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800ea0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ea0e:	2b0f      	cmp	r3, #15
 800ea10:	d909      	bls.n	800ea26 <UART_SetConfig+0xa8e>
 800ea12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ea14:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ea18:	d205      	bcs.n	800ea26 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800ea1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ea1c:	b29a      	uxth	r2, r3
 800ea1e:	697b      	ldr	r3, [r7, #20]
 800ea20:	681b      	ldr	r3, [r3, #0]
 800ea22:	60da      	str	r2, [r3, #12]
 800ea24:	e002      	b.n	800ea2c <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800ea26:	2301      	movs	r3, #1
 800ea28:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800ea2c:	697b      	ldr	r3, [r7, #20]
 800ea2e:	2201      	movs	r2, #1
 800ea30:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800ea34:	697b      	ldr	r3, [r7, #20]
 800ea36:	2201      	movs	r2, #1
 800ea38:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800ea3c:	697b      	ldr	r3, [r7, #20]
 800ea3e:	2200      	movs	r2, #0
 800ea40:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 800ea42:	697b      	ldr	r3, [r7, #20]
 800ea44:	2200      	movs	r2, #0
 800ea46:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 800ea48:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 800ea4c:	4618      	mov	r0, r3
 800ea4e:	3748      	adds	r7, #72	; 0x48
 800ea50:	46bd      	mov	sp, r7
 800ea52:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800ea56:	bf00      	nop
 800ea58:	58024400 	.word	0x58024400
 800ea5c:	03d09000 	.word	0x03d09000
 800ea60:	003d0900 	.word	0x003d0900
 800ea64:	0801f460 	.word	0x0801f460

0800ea68 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800ea68:	b480      	push	{r7}
 800ea6a:	b083      	sub	sp, #12
 800ea6c:	af00      	add	r7, sp, #0
 800ea6e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800ea70:	687b      	ldr	r3, [r7, #4]
 800ea72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ea74:	f003 0301 	and.w	r3, r3, #1
 800ea78:	2b00      	cmp	r3, #0
 800ea7a:	d00a      	beq.n	800ea92 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800ea7c:	687b      	ldr	r3, [r7, #4]
 800ea7e:	681b      	ldr	r3, [r3, #0]
 800ea80:	685b      	ldr	r3, [r3, #4]
 800ea82:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800ea86:	687b      	ldr	r3, [r7, #4]
 800ea88:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ea8a:	687b      	ldr	r3, [r7, #4]
 800ea8c:	681b      	ldr	r3, [r3, #0]
 800ea8e:	430a      	orrs	r2, r1
 800ea90:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800ea92:	687b      	ldr	r3, [r7, #4]
 800ea94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ea96:	f003 0302 	and.w	r3, r3, #2
 800ea9a:	2b00      	cmp	r3, #0
 800ea9c:	d00a      	beq.n	800eab4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800ea9e:	687b      	ldr	r3, [r7, #4]
 800eaa0:	681b      	ldr	r3, [r3, #0]
 800eaa2:	685b      	ldr	r3, [r3, #4]
 800eaa4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800eaa8:	687b      	ldr	r3, [r7, #4]
 800eaaa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800eaac:	687b      	ldr	r3, [r7, #4]
 800eaae:	681b      	ldr	r3, [r3, #0]
 800eab0:	430a      	orrs	r2, r1
 800eab2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800eab4:	687b      	ldr	r3, [r7, #4]
 800eab6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800eab8:	f003 0304 	and.w	r3, r3, #4
 800eabc:	2b00      	cmp	r3, #0
 800eabe:	d00a      	beq.n	800ead6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800eac0:	687b      	ldr	r3, [r7, #4]
 800eac2:	681b      	ldr	r3, [r3, #0]
 800eac4:	685b      	ldr	r3, [r3, #4]
 800eac6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800eaca:	687b      	ldr	r3, [r7, #4]
 800eacc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800eace:	687b      	ldr	r3, [r7, #4]
 800ead0:	681b      	ldr	r3, [r3, #0]
 800ead2:	430a      	orrs	r2, r1
 800ead4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800ead6:	687b      	ldr	r3, [r7, #4]
 800ead8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800eada:	f003 0308 	and.w	r3, r3, #8
 800eade:	2b00      	cmp	r3, #0
 800eae0:	d00a      	beq.n	800eaf8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800eae2:	687b      	ldr	r3, [r7, #4]
 800eae4:	681b      	ldr	r3, [r3, #0]
 800eae6:	685b      	ldr	r3, [r3, #4]
 800eae8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800eaec:	687b      	ldr	r3, [r7, #4]
 800eaee:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800eaf0:	687b      	ldr	r3, [r7, #4]
 800eaf2:	681b      	ldr	r3, [r3, #0]
 800eaf4:	430a      	orrs	r2, r1
 800eaf6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800eaf8:	687b      	ldr	r3, [r7, #4]
 800eafa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800eafc:	f003 0310 	and.w	r3, r3, #16
 800eb00:	2b00      	cmp	r3, #0
 800eb02:	d00a      	beq.n	800eb1a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800eb04:	687b      	ldr	r3, [r7, #4]
 800eb06:	681b      	ldr	r3, [r3, #0]
 800eb08:	689b      	ldr	r3, [r3, #8]
 800eb0a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800eb0e:	687b      	ldr	r3, [r7, #4]
 800eb10:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800eb12:	687b      	ldr	r3, [r7, #4]
 800eb14:	681b      	ldr	r3, [r3, #0]
 800eb16:	430a      	orrs	r2, r1
 800eb18:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800eb1a:	687b      	ldr	r3, [r7, #4]
 800eb1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800eb1e:	f003 0320 	and.w	r3, r3, #32
 800eb22:	2b00      	cmp	r3, #0
 800eb24:	d00a      	beq.n	800eb3c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800eb26:	687b      	ldr	r3, [r7, #4]
 800eb28:	681b      	ldr	r3, [r3, #0]
 800eb2a:	689b      	ldr	r3, [r3, #8]
 800eb2c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800eb30:	687b      	ldr	r3, [r7, #4]
 800eb32:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800eb34:	687b      	ldr	r3, [r7, #4]
 800eb36:	681b      	ldr	r3, [r3, #0]
 800eb38:	430a      	orrs	r2, r1
 800eb3a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800eb3c:	687b      	ldr	r3, [r7, #4]
 800eb3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800eb40:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800eb44:	2b00      	cmp	r3, #0
 800eb46:	d01a      	beq.n	800eb7e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800eb48:	687b      	ldr	r3, [r7, #4]
 800eb4a:	681b      	ldr	r3, [r3, #0]
 800eb4c:	685b      	ldr	r3, [r3, #4]
 800eb4e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800eb52:	687b      	ldr	r3, [r7, #4]
 800eb54:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800eb56:	687b      	ldr	r3, [r7, #4]
 800eb58:	681b      	ldr	r3, [r3, #0]
 800eb5a:	430a      	orrs	r2, r1
 800eb5c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800eb5e:	687b      	ldr	r3, [r7, #4]
 800eb60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800eb62:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800eb66:	d10a      	bne.n	800eb7e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800eb68:	687b      	ldr	r3, [r7, #4]
 800eb6a:	681b      	ldr	r3, [r3, #0]
 800eb6c:	685b      	ldr	r3, [r3, #4]
 800eb6e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800eb72:	687b      	ldr	r3, [r7, #4]
 800eb74:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800eb76:	687b      	ldr	r3, [r7, #4]
 800eb78:	681b      	ldr	r3, [r3, #0]
 800eb7a:	430a      	orrs	r2, r1
 800eb7c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800eb7e:	687b      	ldr	r3, [r7, #4]
 800eb80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800eb82:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800eb86:	2b00      	cmp	r3, #0
 800eb88:	d00a      	beq.n	800eba0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800eb8a:	687b      	ldr	r3, [r7, #4]
 800eb8c:	681b      	ldr	r3, [r3, #0]
 800eb8e:	685b      	ldr	r3, [r3, #4]
 800eb90:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800eb94:	687b      	ldr	r3, [r7, #4]
 800eb96:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800eb98:	687b      	ldr	r3, [r7, #4]
 800eb9a:	681b      	ldr	r3, [r3, #0]
 800eb9c:	430a      	orrs	r2, r1
 800eb9e:	605a      	str	r2, [r3, #4]
  }
}
 800eba0:	bf00      	nop
 800eba2:	370c      	adds	r7, #12
 800eba4:	46bd      	mov	sp, r7
 800eba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebaa:	4770      	bx	lr

0800ebac <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800ebac:	b580      	push	{r7, lr}
 800ebae:	b098      	sub	sp, #96	; 0x60
 800ebb0:	af02      	add	r7, sp, #8
 800ebb2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ebb4:	687b      	ldr	r3, [r7, #4]
 800ebb6:	2200      	movs	r2, #0
 800ebb8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800ebbc:	f7f5 faf6 	bl	80041ac <HAL_GetTick>
 800ebc0:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800ebc2:	687b      	ldr	r3, [r7, #4]
 800ebc4:	681b      	ldr	r3, [r3, #0]
 800ebc6:	681b      	ldr	r3, [r3, #0]
 800ebc8:	f003 0308 	and.w	r3, r3, #8
 800ebcc:	2b08      	cmp	r3, #8
 800ebce:	d12f      	bne.n	800ec30 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800ebd0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800ebd4:	9300      	str	r3, [sp, #0]
 800ebd6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ebd8:	2200      	movs	r2, #0
 800ebda:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800ebde:	6878      	ldr	r0, [r7, #4]
 800ebe0:	f000 f88e 	bl	800ed00 <UART_WaitOnFlagUntilTimeout>
 800ebe4:	4603      	mov	r3, r0
 800ebe6:	2b00      	cmp	r3, #0
 800ebe8:	d022      	beq.n	800ec30 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800ebea:	687b      	ldr	r3, [r7, #4]
 800ebec:	681b      	ldr	r3, [r3, #0]
 800ebee:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ebf0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ebf2:	e853 3f00 	ldrex	r3, [r3]
 800ebf6:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800ebf8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ebfa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ebfe:	653b      	str	r3, [r7, #80]	; 0x50
 800ec00:	687b      	ldr	r3, [r7, #4]
 800ec02:	681b      	ldr	r3, [r3, #0]
 800ec04:	461a      	mov	r2, r3
 800ec06:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ec08:	647b      	str	r3, [r7, #68]	; 0x44
 800ec0a:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ec0c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800ec0e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ec10:	e841 2300 	strex	r3, r2, [r1]
 800ec14:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800ec16:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ec18:	2b00      	cmp	r3, #0
 800ec1a:	d1e6      	bne.n	800ebea <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800ec1c:	687b      	ldr	r3, [r7, #4]
 800ec1e:	2220      	movs	r2, #32
 800ec20:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 800ec24:	687b      	ldr	r3, [r7, #4]
 800ec26:	2200      	movs	r2, #0
 800ec28:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800ec2c:	2303      	movs	r3, #3
 800ec2e:	e063      	b.n	800ecf8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800ec30:	687b      	ldr	r3, [r7, #4]
 800ec32:	681b      	ldr	r3, [r3, #0]
 800ec34:	681b      	ldr	r3, [r3, #0]
 800ec36:	f003 0304 	and.w	r3, r3, #4
 800ec3a:	2b04      	cmp	r3, #4
 800ec3c:	d149      	bne.n	800ecd2 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800ec3e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800ec42:	9300      	str	r3, [sp, #0]
 800ec44:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ec46:	2200      	movs	r2, #0
 800ec48:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800ec4c:	6878      	ldr	r0, [r7, #4]
 800ec4e:	f000 f857 	bl	800ed00 <UART_WaitOnFlagUntilTimeout>
 800ec52:	4603      	mov	r3, r0
 800ec54:	2b00      	cmp	r3, #0
 800ec56:	d03c      	beq.n	800ecd2 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800ec58:	687b      	ldr	r3, [r7, #4]
 800ec5a:	681b      	ldr	r3, [r3, #0]
 800ec5c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ec5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ec60:	e853 3f00 	ldrex	r3, [r3]
 800ec64:	623b      	str	r3, [r7, #32]
   return(result);
 800ec66:	6a3b      	ldr	r3, [r7, #32]
 800ec68:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800ec6c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800ec6e:	687b      	ldr	r3, [r7, #4]
 800ec70:	681b      	ldr	r3, [r3, #0]
 800ec72:	461a      	mov	r2, r3
 800ec74:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ec76:	633b      	str	r3, [r7, #48]	; 0x30
 800ec78:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ec7a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800ec7c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ec7e:	e841 2300 	strex	r3, r2, [r1]
 800ec82:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800ec84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ec86:	2b00      	cmp	r3, #0
 800ec88:	d1e6      	bne.n	800ec58 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ec8a:	687b      	ldr	r3, [r7, #4]
 800ec8c:	681b      	ldr	r3, [r3, #0]
 800ec8e:	3308      	adds	r3, #8
 800ec90:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ec92:	693b      	ldr	r3, [r7, #16]
 800ec94:	e853 3f00 	ldrex	r3, [r3]
 800ec98:	60fb      	str	r3, [r7, #12]
   return(result);
 800ec9a:	68fb      	ldr	r3, [r7, #12]
 800ec9c:	f023 0301 	bic.w	r3, r3, #1
 800eca0:	64bb      	str	r3, [r7, #72]	; 0x48
 800eca2:	687b      	ldr	r3, [r7, #4]
 800eca4:	681b      	ldr	r3, [r3, #0]
 800eca6:	3308      	adds	r3, #8
 800eca8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ecaa:	61fa      	str	r2, [r7, #28]
 800ecac:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ecae:	69b9      	ldr	r1, [r7, #24]
 800ecb0:	69fa      	ldr	r2, [r7, #28]
 800ecb2:	e841 2300 	strex	r3, r2, [r1]
 800ecb6:	617b      	str	r3, [r7, #20]
   return(result);
 800ecb8:	697b      	ldr	r3, [r7, #20]
 800ecba:	2b00      	cmp	r3, #0
 800ecbc:	d1e5      	bne.n	800ec8a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800ecbe:	687b      	ldr	r3, [r7, #4]
 800ecc0:	2220      	movs	r2, #32
 800ecc2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800ecc6:	687b      	ldr	r3, [r7, #4]
 800ecc8:	2200      	movs	r2, #0
 800ecca:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800ecce:	2303      	movs	r3, #3
 800ecd0:	e012      	b.n	800ecf8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800ecd2:	687b      	ldr	r3, [r7, #4]
 800ecd4:	2220      	movs	r2, #32
 800ecd6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800ecda:	687b      	ldr	r3, [r7, #4]
 800ecdc:	2220      	movs	r2, #32
 800ecde:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ece2:	687b      	ldr	r3, [r7, #4]
 800ece4:	2200      	movs	r2, #0
 800ece6:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800ece8:	687b      	ldr	r3, [r7, #4]
 800ecea:	2200      	movs	r2, #0
 800ecec:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 800ecee:	687b      	ldr	r3, [r7, #4]
 800ecf0:	2200      	movs	r2, #0
 800ecf2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800ecf6:	2300      	movs	r3, #0
}
 800ecf8:	4618      	mov	r0, r3
 800ecfa:	3758      	adds	r7, #88	; 0x58
 800ecfc:	46bd      	mov	sp, r7
 800ecfe:	bd80      	pop	{r7, pc}

0800ed00 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800ed00:	b580      	push	{r7, lr}
 800ed02:	b084      	sub	sp, #16
 800ed04:	af00      	add	r7, sp, #0
 800ed06:	60f8      	str	r0, [r7, #12]
 800ed08:	60b9      	str	r1, [r7, #8]
 800ed0a:	603b      	str	r3, [r7, #0]
 800ed0c:	4613      	mov	r3, r2
 800ed0e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ed10:	e049      	b.n	800eda6 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800ed12:	69bb      	ldr	r3, [r7, #24]
 800ed14:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ed18:	d045      	beq.n	800eda6 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ed1a:	f7f5 fa47 	bl	80041ac <HAL_GetTick>
 800ed1e:	4602      	mov	r2, r0
 800ed20:	683b      	ldr	r3, [r7, #0]
 800ed22:	1ad3      	subs	r3, r2, r3
 800ed24:	69ba      	ldr	r2, [r7, #24]
 800ed26:	429a      	cmp	r2, r3
 800ed28:	d302      	bcc.n	800ed30 <UART_WaitOnFlagUntilTimeout+0x30>
 800ed2a:	69bb      	ldr	r3, [r7, #24]
 800ed2c:	2b00      	cmp	r3, #0
 800ed2e:	d101      	bne.n	800ed34 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800ed30:	2303      	movs	r3, #3
 800ed32:	e048      	b.n	800edc6 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800ed34:	68fb      	ldr	r3, [r7, #12]
 800ed36:	681b      	ldr	r3, [r3, #0]
 800ed38:	681b      	ldr	r3, [r3, #0]
 800ed3a:	f003 0304 	and.w	r3, r3, #4
 800ed3e:	2b00      	cmp	r3, #0
 800ed40:	d031      	beq.n	800eda6 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800ed42:	68fb      	ldr	r3, [r7, #12]
 800ed44:	681b      	ldr	r3, [r3, #0]
 800ed46:	69db      	ldr	r3, [r3, #28]
 800ed48:	f003 0308 	and.w	r3, r3, #8
 800ed4c:	2b08      	cmp	r3, #8
 800ed4e:	d110      	bne.n	800ed72 <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800ed50:	68fb      	ldr	r3, [r7, #12]
 800ed52:	681b      	ldr	r3, [r3, #0]
 800ed54:	2208      	movs	r2, #8
 800ed56:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 800ed58:	68f8      	ldr	r0, [r7, #12]
 800ed5a:	f000 f839 	bl	800edd0 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 800ed5e:	68fb      	ldr	r3, [r7, #12]
 800ed60:	2208      	movs	r2, #8
 800ed62:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 800ed66:	68fb      	ldr	r3, [r7, #12]
 800ed68:	2200      	movs	r2, #0
 800ed6a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

           return HAL_ERROR;
 800ed6e:	2301      	movs	r3, #1
 800ed70:	e029      	b.n	800edc6 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800ed72:	68fb      	ldr	r3, [r7, #12]
 800ed74:	681b      	ldr	r3, [r3, #0]
 800ed76:	69db      	ldr	r3, [r3, #28]
 800ed78:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800ed7c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800ed80:	d111      	bne.n	800eda6 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800ed82:	68fb      	ldr	r3, [r7, #12]
 800ed84:	681b      	ldr	r3, [r3, #0]
 800ed86:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800ed8a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800ed8c:	68f8      	ldr	r0, [r7, #12]
 800ed8e:	f000 f81f 	bl	800edd0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800ed92:	68fb      	ldr	r3, [r7, #12]
 800ed94:	2220      	movs	r2, #32
 800ed96:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800ed9a:	68fb      	ldr	r3, [r7, #12]
 800ed9c:	2200      	movs	r2, #0
 800ed9e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 800eda2:	2303      	movs	r3, #3
 800eda4:	e00f      	b.n	800edc6 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800eda6:	68fb      	ldr	r3, [r7, #12]
 800eda8:	681b      	ldr	r3, [r3, #0]
 800edaa:	69da      	ldr	r2, [r3, #28]
 800edac:	68bb      	ldr	r3, [r7, #8]
 800edae:	4013      	ands	r3, r2
 800edb0:	68ba      	ldr	r2, [r7, #8]
 800edb2:	429a      	cmp	r2, r3
 800edb4:	bf0c      	ite	eq
 800edb6:	2301      	moveq	r3, #1
 800edb8:	2300      	movne	r3, #0
 800edba:	b2db      	uxtb	r3, r3
 800edbc:	461a      	mov	r2, r3
 800edbe:	79fb      	ldrb	r3, [r7, #7]
 800edc0:	429a      	cmp	r2, r3
 800edc2:	d0a6      	beq.n	800ed12 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800edc4:	2300      	movs	r3, #0
}
 800edc6:	4618      	mov	r0, r3
 800edc8:	3710      	adds	r7, #16
 800edca:	46bd      	mov	sp, r7
 800edcc:	bd80      	pop	{r7, pc}
	...

0800edd0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800edd0:	b480      	push	{r7}
 800edd2:	b095      	sub	sp, #84	; 0x54
 800edd4:	af00      	add	r7, sp, #0
 800edd6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800edd8:	687b      	ldr	r3, [r7, #4]
 800edda:	681b      	ldr	r3, [r3, #0]
 800eddc:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800edde:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ede0:	e853 3f00 	ldrex	r3, [r3]
 800ede4:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800ede6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ede8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800edec:	64fb      	str	r3, [r7, #76]	; 0x4c
 800edee:	687b      	ldr	r3, [r7, #4]
 800edf0:	681b      	ldr	r3, [r3, #0]
 800edf2:	461a      	mov	r2, r3
 800edf4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800edf6:	643b      	str	r3, [r7, #64]	; 0x40
 800edf8:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800edfa:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800edfc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800edfe:	e841 2300 	strex	r3, r2, [r1]
 800ee02:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800ee04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ee06:	2b00      	cmp	r3, #0
 800ee08:	d1e6      	bne.n	800edd8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800ee0a:	687b      	ldr	r3, [r7, #4]
 800ee0c:	681b      	ldr	r3, [r3, #0]
 800ee0e:	3308      	adds	r3, #8
 800ee10:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ee12:	6a3b      	ldr	r3, [r7, #32]
 800ee14:	e853 3f00 	ldrex	r3, [r3]
 800ee18:	61fb      	str	r3, [r7, #28]
   return(result);
 800ee1a:	69fa      	ldr	r2, [r7, #28]
 800ee1c:	4b1e      	ldr	r3, [pc, #120]	; (800ee98 <UART_EndRxTransfer+0xc8>)
 800ee1e:	4013      	ands	r3, r2
 800ee20:	64bb      	str	r3, [r7, #72]	; 0x48
 800ee22:	687b      	ldr	r3, [r7, #4]
 800ee24:	681b      	ldr	r3, [r3, #0]
 800ee26:	3308      	adds	r3, #8
 800ee28:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ee2a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800ee2c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ee2e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800ee30:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800ee32:	e841 2300 	strex	r3, r2, [r1]
 800ee36:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800ee38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ee3a:	2b00      	cmp	r3, #0
 800ee3c:	d1e5      	bne.n	800ee0a <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800ee3e:	687b      	ldr	r3, [r7, #4]
 800ee40:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ee42:	2b01      	cmp	r3, #1
 800ee44:	d118      	bne.n	800ee78 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ee46:	687b      	ldr	r3, [r7, #4]
 800ee48:	681b      	ldr	r3, [r3, #0]
 800ee4a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ee4c:	68fb      	ldr	r3, [r7, #12]
 800ee4e:	e853 3f00 	ldrex	r3, [r3]
 800ee52:	60bb      	str	r3, [r7, #8]
   return(result);
 800ee54:	68bb      	ldr	r3, [r7, #8]
 800ee56:	f023 0310 	bic.w	r3, r3, #16
 800ee5a:	647b      	str	r3, [r7, #68]	; 0x44
 800ee5c:	687b      	ldr	r3, [r7, #4]
 800ee5e:	681b      	ldr	r3, [r3, #0]
 800ee60:	461a      	mov	r2, r3
 800ee62:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ee64:	61bb      	str	r3, [r7, #24]
 800ee66:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ee68:	6979      	ldr	r1, [r7, #20]
 800ee6a:	69ba      	ldr	r2, [r7, #24]
 800ee6c:	e841 2300 	strex	r3, r2, [r1]
 800ee70:	613b      	str	r3, [r7, #16]
   return(result);
 800ee72:	693b      	ldr	r3, [r7, #16]
 800ee74:	2b00      	cmp	r3, #0
 800ee76:	d1e6      	bne.n	800ee46 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800ee78:	687b      	ldr	r3, [r7, #4]
 800ee7a:	2220      	movs	r2, #32
 800ee7c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ee80:	687b      	ldr	r3, [r7, #4]
 800ee82:	2200      	movs	r2, #0
 800ee84:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800ee86:	687b      	ldr	r3, [r7, #4]
 800ee88:	2200      	movs	r2, #0
 800ee8a:	675a      	str	r2, [r3, #116]	; 0x74
}
 800ee8c:	bf00      	nop
 800ee8e:	3754      	adds	r7, #84	; 0x54
 800ee90:	46bd      	mov	sp, r7
 800ee92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee96:	4770      	bx	lr
 800ee98:	effffffe 	.word	0xeffffffe

0800ee9c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800ee9c:	b480      	push	{r7}
 800ee9e:	b085      	sub	sp, #20
 800eea0:	af00      	add	r7, sp, #0
 800eea2:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800eea4:	687b      	ldr	r3, [r7, #4]
 800eea6:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800eeaa:	2b01      	cmp	r3, #1
 800eeac:	d101      	bne.n	800eeb2 <HAL_UARTEx_DisableFifoMode+0x16>
 800eeae:	2302      	movs	r3, #2
 800eeb0:	e027      	b.n	800ef02 <HAL_UARTEx_DisableFifoMode+0x66>
 800eeb2:	687b      	ldr	r3, [r7, #4]
 800eeb4:	2201      	movs	r2, #1
 800eeb6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800eeba:	687b      	ldr	r3, [r7, #4]
 800eebc:	2224      	movs	r2, #36	; 0x24
 800eebe:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800eec2:	687b      	ldr	r3, [r7, #4]
 800eec4:	681b      	ldr	r3, [r3, #0]
 800eec6:	681b      	ldr	r3, [r3, #0]
 800eec8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800eeca:	687b      	ldr	r3, [r7, #4]
 800eecc:	681b      	ldr	r3, [r3, #0]
 800eece:	681a      	ldr	r2, [r3, #0]
 800eed0:	687b      	ldr	r3, [r7, #4]
 800eed2:	681b      	ldr	r3, [r3, #0]
 800eed4:	f022 0201 	bic.w	r2, r2, #1
 800eed8:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800eeda:	68fb      	ldr	r3, [r7, #12]
 800eedc:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800eee0:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800eee2:	687b      	ldr	r3, [r7, #4]
 800eee4:	2200      	movs	r2, #0
 800eee6:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800eee8:	687b      	ldr	r3, [r7, #4]
 800eeea:	681b      	ldr	r3, [r3, #0]
 800eeec:	68fa      	ldr	r2, [r7, #12]
 800eeee:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800eef0:	687b      	ldr	r3, [r7, #4]
 800eef2:	2220      	movs	r2, #32
 800eef4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800eef8:	687b      	ldr	r3, [r7, #4]
 800eefa:	2200      	movs	r2, #0
 800eefc:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800ef00:	2300      	movs	r3, #0
}
 800ef02:	4618      	mov	r0, r3
 800ef04:	3714      	adds	r7, #20
 800ef06:	46bd      	mov	sp, r7
 800ef08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef0c:	4770      	bx	lr

0800ef0e <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800ef0e:	b580      	push	{r7, lr}
 800ef10:	b084      	sub	sp, #16
 800ef12:	af00      	add	r7, sp, #0
 800ef14:	6078      	str	r0, [r7, #4]
 800ef16:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ef18:	687b      	ldr	r3, [r7, #4]
 800ef1a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800ef1e:	2b01      	cmp	r3, #1
 800ef20:	d101      	bne.n	800ef26 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800ef22:	2302      	movs	r3, #2
 800ef24:	e02d      	b.n	800ef82 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800ef26:	687b      	ldr	r3, [r7, #4]
 800ef28:	2201      	movs	r2, #1
 800ef2a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800ef2e:	687b      	ldr	r3, [r7, #4]
 800ef30:	2224      	movs	r2, #36	; 0x24
 800ef32:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800ef36:	687b      	ldr	r3, [r7, #4]
 800ef38:	681b      	ldr	r3, [r3, #0]
 800ef3a:	681b      	ldr	r3, [r3, #0]
 800ef3c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800ef3e:	687b      	ldr	r3, [r7, #4]
 800ef40:	681b      	ldr	r3, [r3, #0]
 800ef42:	681a      	ldr	r2, [r3, #0]
 800ef44:	687b      	ldr	r3, [r7, #4]
 800ef46:	681b      	ldr	r3, [r3, #0]
 800ef48:	f022 0201 	bic.w	r2, r2, #1
 800ef4c:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800ef4e:	687b      	ldr	r3, [r7, #4]
 800ef50:	681b      	ldr	r3, [r3, #0]
 800ef52:	689b      	ldr	r3, [r3, #8]
 800ef54:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800ef58:	687b      	ldr	r3, [r7, #4]
 800ef5a:	681b      	ldr	r3, [r3, #0]
 800ef5c:	683a      	ldr	r2, [r7, #0]
 800ef5e:	430a      	orrs	r2, r1
 800ef60:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800ef62:	6878      	ldr	r0, [r7, #4]
 800ef64:	f000 f850 	bl	800f008 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800ef68:	687b      	ldr	r3, [r7, #4]
 800ef6a:	681b      	ldr	r3, [r3, #0]
 800ef6c:	68fa      	ldr	r2, [r7, #12]
 800ef6e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800ef70:	687b      	ldr	r3, [r7, #4]
 800ef72:	2220      	movs	r2, #32
 800ef74:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800ef78:	687b      	ldr	r3, [r7, #4]
 800ef7a:	2200      	movs	r2, #0
 800ef7c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800ef80:	2300      	movs	r3, #0
}
 800ef82:	4618      	mov	r0, r3
 800ef84:	3710      	adds	r7, #16
 800ef86:	46bd      	mov	sp, r7
 800ef88:	bd80      	pop	{r7, pc}

0800ef8a <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800ef8a:	b580      	push	{r7, lr}
 800ef8c:	b084      	sub	sp, #16
 800ef8e:	af00      	add	r7, sp, #0
 800ef90:	6078      	str	r0, [r7, #4]
 800ef92:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800ef94:	687b      	ldr	r3, [r7, #4]
 800ef96:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800ef9a:	2b01      	cmp	r3, #1
 800ef9c:	d101      	bne.n	800efa2 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800ef9e:	2302      	movs	r3, #2
 800efa0:	e02d      	b.n	800effe <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800efa2:	687b      	ldr	r3, [r7, #4]
 800efa4:	2201      	movs	r2, #1
 800efa6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800efaa:	687b      	ldr	r3, [r7, #4]
 800efac:	2224      	movs	r2, #36	; 0x24
 800efae:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800efb2:	687b      	ldr	r3, [r7, #4]
 800efb4:	681b      	ldr	r3, [r3, #0]
 800efb6:	681b      	ldr	r3, [r3, #0]
 800efb8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800efba:	687b      	ldr	r3, [r7, #4]
 800efbc:	681b      	ldr	r3, [r3, #0]
 800efbe:	681a      	ldr	r2, [r3, #0]
 800efc0:	687b      	ldr	r3, [r7, #4]
 800efc2:	681b      	ldr	r3, [r3, #0]
 800efc4:	f022 0201 	bic.w	r2, r2, #1
 800efc8:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800efca:	687b      	ldr	r3, [r7, #4]
 800efcc:	681b      	ldr	r3, [r3, #0]
 800efce:	689b      	ldr	r3, [r3, #8]
 800efd0:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800efd4:	687b      	ldr	r3, [r7, #4]
 800efd6:	681b      	ldr	r3, [r3, #0]
 800efd8:	683a      	ldr	r2, [r7, #0]
 800efda:	430a      	orrs	r2, r1
 800efdc:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800efde:	6878      	ldr	r0, [r7, #4]
 800efe0:	f000 f812 	bl	800f008 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800efe4:	687b      	ldr	r3, [r7, #4]
 800efe6:	681b      	ldr	r3, [r3, #0]
 800efe8:	68fa      	ldr	r2, [r7, #12]
 800efea:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800efec:	687b      	ldr	r3, [r7, #4]
 800efee:	2220      	movs	r2, #32
 800eff0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800eff4:	687b      	ldr	r3, [r7, #4]
 800eff6:	2200      	movs	r2, #0
 800eff8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800effc:	2300      	movs	r3, #0
}
 800effe:	4618      	mov	r0, r3
 800f000:	3710      	adds	r7, #16
 800f002:	46bd      	mov	sp, r7
 800f004:	bd80      	pop	{r7, pc}
	...

0800f008 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800f008:	b480      	push	{r7}
 800f00a:	b085      	sub	sp, #20
 800f00c:	af00      	add	r7, sp, #0
 800f00e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800f010:	687b      	ldr	r3, [r7, #4]
 800f012:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800f014:	2b00      	cmp	r3, #0
 800f016:	d108      	bne.n	800f02a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800f018:	687b      	ldr	r3, [r7, #4]
 800f01a:	2201      	movs	r2, #1
 800f01c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800f020:	687b      	ldr	r3, [r7, #4]
 800f022:	2201      	movs	r2, #1
 800f024:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800f028:	e031      	b.n	800f08e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800f02a:	2310      	movs	r3, #16
 800f02c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800f02e:	2310      	movs	r3, #16
 800f030:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800f032:	687b      	ldr	r3, [r7, #4]
 800f034:	681b      	ldr	r3, [r3, #0]
 800f036:	689b      	ldr	r3, [r3, #8]
 800f038:	0e5b      	lsrs	r3, r3, #25
 800f03a:	b2db      	uxtb	r3, r3
 800f03c:	f003 0307 	and.w	r3, r3, #7
 800f040:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800f042:	687b      	ldr	r3, [r7, #4]
 800f044:	681b      	ldr	r3, [r3, #0]
 800f046:	689b      	ldr	r3, [r3, #8]
 800f048:	0f5b      	lsrs	r3, r3, #29
 800f04a:	b2db      	uxtb	r3, r3
 800f04c:	f003 0307 	and.w	r3, r3, #7
 800f050:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800f052:	7bbb      	ldrb	r3, [r7, #14]
 800f054:	7b3a      	ldrb	r2, [r7, #12]
 800f056:	4911      	ldr	r1, [pc, #68]	; (800f09c <UARTEx_SetNbDataToProcess+0x94>)
 800f058:	5c8a      	ldrb	r2, [r1, r2]
 800f05a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800f05e:	7b3a      	ldrb	r2, [r7, #12]
 800f060:	490f      	ldr	r1, [pc, #60]	; (800f0a0 <UARTEx_SetNbDataToProcess+0x98>)
 800f062:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800f064:	fb93 f3f2 	sdiv	r3, r3, r2
 800f068:	b29a      	uxth	r2, r3
 800f06a:	687b      	ldr	r3, [r7, #4]
 800f06c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800f070:	7bfb      	ldrb	r3, [r7, #15]
 800f072:	7b7a      	ldrb	r2, [r7, #13]
 800f074:	4909      	ldr	r1, [pc, #36]	; (800f09c <UARTEx_SetNbDataToProcess+0x94>)
 800f076:	5c8a      	ldrb	r2, [r1, r2]
 800f078:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800f07c:	7b7a      	ldrb	r2, [r7, #13]
 800f07e:	4908      	ldr	r1, [pc, #32]	; (800f0a0 <UARTEx_SetNbDataToProcess+0x98>)
 800f080:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800f082:	fb93 f3f2 	sdiv	r3, r3, r2
 800f086:	b29a      	uxth	r2, r3
 800f088:	687b      	ldr	r3, [r7, #4]
 800f08a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800f08e:	bf00      	nop
 800f090:	3714      	adds	r7, #20
 800f092:	46bd      	mov	sp, r7
 800f094:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f098:	4770      	bx	lr
 800f09a:	bf00      	nop
 800f09c:	0801f478 	.word	0x0801f478
 800f0a0:	0801f480 	.word	0x0801f480

0800f0a4 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 800f0a4:	b580      	push	{r7, lr}
 800f0a6:	b084      	sub	sp, #16
 800f0a8:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 192;
 800f0aa:	4b87      	ldr	r3, [pc, #540]	; (800f2c8 <MX_LWIP_Init+0x224>)
 800f0ac:	22c0      	movs	r2, #192	; 0xc0
 800f0ae:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 168;
 800f0b0:	4b85      	ldr	r3, [pc, #532]	; (800f2c8 <MX_LWIP_Init+0x224>)
 800f0b2:	22a8      	movs	r2, #168	; 0xa8
 800f0b4:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 1;
 800f0b6:	4b84      	ldr	r3, [pc, #528]	; (800f2c8 <MX_LWIP_Init+0x224>)
 800f0b8:	2201      	movs	r2, #1
 800f0ba:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 10;
 800f0bc:	4b82      	ldr	r3, [pc, #520]	; (800f2c8 <MX_LWIP_Init+0x224>)
 800f0be:	220a      	movs	r2, #10
 800f0c0:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 800f0c2:	4b82      	ldr	r3, [pc, #520]	; (800f2cc <MX_LWIP_Init+0x228>)
 800f0c4:	22ff      	movs	r2, #255	; 0xff
 800f0c6:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 800f0c8:	4b80      	ldr	r3, [pc, #512]	; (800f2cc <MX_LWIP_Init+0x228>)
 800f0ca:	22ff      	movs	r2, #255	; 0xff
 800f0cc:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 0;
 800f0ce:	4b7f      	ldr	r3, [pc, #508]	; (800f2cc <MX_LWIP_Init+0x228>)
 800f0d0:	2200      	movs	r2, #0
 800f0d2:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 800f0d4:	4b7d      	ldr	r3, [pc, #500]	; (800f2cc <MX_LWIP_Init+0x228>)
 800f0d6:	2200      	movs	r2, #0
 800f0d8:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 192;
 800f0da:	4b7d      	ldr	r3, [pc, #500]	; (800f2d0 <MX_LWIP_Init+0x22c>)
 800f0dc:	22c0      	movs	r2, #192	; 0xc0
 800f0de:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 168;
 800f0e0:	4b7b      	ldr	r3, [pc, #492]	; (800f2d0 <MX_LWIP_Init+0x22c>)
 800f0e2:	22a8      	movs	r2, #168	; 0xa8
 800f0e4:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 1;
 800f0e6:	4b7a      	ldr	r3, [pc, #488]	; (800f2d0 <MX_LWIP_Init+0x22c>)
 800f0e8:	2201      	movs	r2, #1
 800f0ea:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 1;
 800f0ec:	4b78      	ldr	r3, [pc, #480]	; (800f2d0 <MX_LWIP_Init+0x22c>)
 800f0ee:	2201      	movs	r2, #1
 800f0f0:	70da      	strb	r2, [r3, #3]

/* USER CODE BEGIN IP_ADDRESSES */
/* USER CODE END IP_ADDRESSES */

  /* Initilialize the LwIP stack without RTOS */
  lwip_init();
 800f0f2:	f000 fd31 	bl	800fb58 <lwip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 800f0f6:	4b74      	ldr	r3, [pc, #464]	; (800f2c8 <MX_LWIP_Init+0x224>)
 800f0f8:	781b      	ldrb	r3, [r3, #0]
 800f0fa:	061a      	lsls	r2, r3, #24
 800f0fc:	4b72      	ldr	r3, [pc, #456]	; (800f2c8 <MX_LWIP_Init+0x224>)
 800f0fe:	785b      	ldrb	r3, [r3, #1]
 800f100:	041b      	lsls	r3, r3, #16
 800f102:	431a      	orrs	r2, r3
 800f104:	4b70      	ldr	r3, [pc, #448]	; (800f2c8 <MX_LWIP_Init+0x224>)
 800f106:	789b      	ldrb	r3, [r3, #2]
 800f108:	021b      	lsls	r3, r3, #8
 800f10a:	4313      	orrs	r3, r2
 800f10c:	4a6e      	ldr	r2, [pc, #440]	; (800f2c8 <MX_LWIP_Init+0x224>)
 800f10e:	78d2      	ldrb	r2, [r2, #3]
 800f110:	4313      	orrs	r3, r2
 800f112:	061a      	lsls	r2, r3, #24
 800f114:	4b6c      	ldr	r3, [pc, #432]	; (800f2c8 <MX_LWIP_Init+0x224>)
 800f116:	781b      	ldrb	r3, [r3, #0]
 800f118:	0619      	lsls	r1, r3, #24
 800f11a:	4b6b      	ldr	r3, [pc, #428]	; (800f2c8 <MX_LWIP_Init+0x224>)
 800f11c:	785b      	ldrb	r3, [r3, #1]
 800f11e:	041b      	lsls	r3, r3, #16
 800f120:	4319      	orrs	r1, r3
 800f122:	4b69      	ldr	r3, [pc, #420]	; (800f2c8 <MX_LWIP_Init+0x224>)
 800f124:	789b      	ldrb	r3, [r3, #2]
 800f126:	021b      	lsls	r3, r3, #8
 800f128:	430b      	orrs	r3, r1
 800f12a:	4967      	ldr	r1, [pc, #412]	; (800f2c8 <MX_LWIP_Init+0x224>)
 800f12c:	78c9      	ldrb	r1, [r1, #3]
 800f12e:	430b      	orrs	r3, r1
 800f130:	021b      	lsls	r3, r3, #8
 800f132:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800f136:	431a      	orrs	r2, r3
 800f138:	4b63      	ldr	r3, [pc, #396]	; (800f2c8 <MX_LWIP_Init+0x224>)
 800f13a:	781b      	ldrb	r3, [r3, #0]
 800f13c:	0619      	lsls	r1, r3, #24
 800f13e:	4b62      	ldr	r3, [pc, #392]	; (800f2c8 <MX_LWIP_Init+0x224>)
 800f140:	785b      	ldrb	r3, [r3, #1]
 800f142:	041b      	lsls	r3, r3, #16
 800f144:	4319      	orrs	r1, r3
 800f146:	4b60      	ldr	r3, [pc, #384]	; (800f2c8 <MX_LWIP_Init+0x224>)
 800f148:	789b      	ldrb	r3, [r3, #2]
 800f14a:	021b      	lsls	r3, r3, #8
 800f14c:	430b      	orrs	r3, r1
 800f14e:	495e      	ldr	r1, [pc, #376]	; (800f2c8 <MX_LWIP_Init+0x224>)
 800f150:	78c9      	ldrb	r1, [r1, #3]
 800f152:	430b      	orrs	r3, r1
 800f154:	0a1b      	lsrs	r3, r3, #8
 800f156:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800f15a:	431a      	orrs	r2, r3
 800f15c:	4b5a      	ldr	r3, [pc, #360]	; (800f2c8 <MX_LWIP_Init+0x224>)
 800f15e:	781b      	ldrb	r3, [r3, #0]
 800f160:	0619      	lsls	r1, r3, #24
 800f162:	4b59      	ldr	r3, [pc, #356]	; (800f2c8 <MX_LWIP_Init+0x224>)
 800f164:	785b      	ldrb	r3, [r3, #1]
 800f166:	041b      	lsls	r3, r3, #16
 800f168:	4319      	orrs	r1, r3
 800f16a:	4b57      	ldr	r3, [pc, #348]	; (800f2c8 <MX_LWIP_Init+0x224>)
 800f16c:	789b      	ldrb	r3, [r3, #2]
 800f16e:	021b      	lsls	r3, r3, #8
 800f170:	430b      	orrs	r3, r1
 800f172:	4955      	ldr	r1, [pc, #340]	; (800f2c8 <MX_LWIP_Init+0x224>)
 800f174:	78c9      	ldrb	r1, [r1, #3]
 800f176:	430b      	orrs	r3, r1
 800f178:	0e1b      	lsrs	r3, r3, #24
 800f17a:	4313      	orrs	r3, r2
 800f17c:	4a55      	ldr	r2, [pc, #340]	; (800f2d4 <MX_LWIP_Init+0x230>)
 800f17e:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 800f180:	4b52      	ldr	r3, [pc, #328]	; (800f2cc <MX_LWIP_Init+0x228>)
 800f182:	781b      	ldrb	r3, [r3, #0]
 800f184:	061a      	lsls	r2, r3, #24
 800f186:	4b51      	ldr	r3, [pc, #324]	; (800f2cc <MX_LWIP_Init+0x228>)
 800f188:	785b      	ldrb	r3, [r3, #1]
 800f18a:	041b      	lsls	r3, r3, #16
 800f18c:	431a      	orrs	r2, r3
 800f18e:	4b4f      	ldr	r3, [pc, #316]	; (800f2cc <MX_LWIP_Init+0x228>)
 800f190:	789b      	ldrb	r3, [r3, #2]
 800f192:	021b      	lsls	r3, r3, #8
 800f194:	4313      	orrs	r3, r2
 800f196:	4a4d      	ldr	r2, [pc, #308]	; (800f2cc <MX_LWIP_Init+0x228>)
 800f198:	78d2      	ldrb	r2, [r2, #3]
 800f19a:	4313      	orrs	r3, r2
 800f19c:	061a      	lsls	r2, r3, #24
 800f19e:	4b4b      	ldr	r3, [pc, #300]	; (800f2cc <MX_LWIP_Init+0x228>)
 800f1a0:	781b      	ldrb	r3, [r3, #0]
 800f1a2:	0619      	lsls	r1, r3, #24
 800f1a4:	4b49      	ldr	r3, [pc, #292]	; (800f2cc <MX_LWIP_Init+0x228>)
 800f1a6:	785b      	ldrb	r3, [r3, #1]
 800f1a8:	041b      	lsls	r3, r3, #16
 800f1aa:	4319      	orrs	r1, r3
 800f1ac:	4b47      	ldr	r3, [pc, #284]	; (800f2cc <MX_LWIP_Init+0x228>)
 800f1ae:	789b      	ldrb	r3, [r3, #2]
 800f1b0:	021b      	lsls	r3, r3, #8
 800f1b2:	430b      	orrs	r3, r1
 800f1b4:	4945      	ldr	r1, [pc, #276]	; (800f2cc <MX_LWIP_Init+0x228>)
 800f1b6:	78c9      	ldrb	r1, [r1, #3]
 800f1b8:	430b      	orrs	r3, r1
 800f1ba:	021b      	lsls	r3, r3, #8
 800f1bc:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800f1c0:	431a      	orrs	r2, r3
 800f1c2:	4b42      	ldr	r3, [pc, #264]	; (800f2cc <MX_LWIP_Init+0x228>)
 800f1c4:	781b      	ldrb	r3, [r3, #0]
 800f1c6:	0619      	lsls	r1, r3, #24
 800f1c8:	4b40      	ldr	r3, [pc, #256]	; (800f2cc <MX_LWIP_Init+0x228>)
 800f1ca:	785b      	ldrb	r3, [r3, #1]
 800f1cc:	041b      	lsls	r3, r3, #16
 800f1ce:	4319      	orrs	r1, r3
 800f1d0:	4b3e      	ldr	r3, [pc, #248]	; (800f2cc <MX_LWIP_Init+0x228>)
 800f1d2:	789b      	ldrb	r3, [r3, #2]
 800f1d4:	021b      	lsls	r3, r3, #8
 800f1d6:	430b      	orrs	r3, r1
 800f1d8:	493c      	ldr	r1, [pc, #240]	; (800f2cc <MX_LWIP_Init+0x228>)
 800f1da:	78c9      	ldrb	r1, [r1, #3]
 800f1dc:	430b      	orrs	r3, r1
 800f1de:	0a1b      	lsrs	r3, r3, #8
 800f1e0:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800f1e4:	431a      	orrs	r2, r3
 800f1e6:	4b39      	ldr	r3, [pc, #228]	; (800f2cc <MX_LWIP_Init+0x228>)
 800f1e8:	781b      	ldrb	r3, [r3, #0]
 800f1ea:	0619      	lsls	r1, r3, #24
 800f1ec:	4b37      	ldr	r3, [pc, #220]	; (800f2cc <MX_LWIP_Init+0x228>)
 800f1ee:	785b      	ldrb	r3, [r3, #1]
 800f1f0:	041b      	lsls	r3, r3, #16
 800f1f2:	4319      	orrs	r1, r3
 800f1f4:	4b35      	ldr	r3, [pc, #212]	; (800f2cc <MX_LWIP_Init+0x228>)
 800f1f6:	789b      	ldrb	r3, [r3, #2]
 800f1f8:	021b      	lsls	r3, r3, #8
 800f1fa:	430b      	orrs	r3, r1
 800f1fc:	4933      	ldr	r1, [pc, #204]	; (800f2cc <MX_LWIP_Init+0x228>)
 800f1fe:	78c9      	ldrb	r1, [r1, #3]
 800f200:	430b      	orrs	r3, r1
 800f202:	0e1b      	lsrs	r3, r3, #24
 800f204:	4313      	orrs	r3, r2
 800f206:	4a34      	ldr	r2, [pc, #208]	; (800f2d8 <MX_LWIP_Init+0x234>)
 800f208:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 800f20a:	4b31      	ldr	r3, [pc, #196]	; (800f2d0 <MX_LWIP_Init+0x22c>)
 800f20c:	781b      	ldrb	r3, [r3, #0]
 800f20e:	061a      	lsls	r2, r3, #24
 800f210:	4b2f      	ldr	r3, [pc, #188]	; (800f2d0 <MX_LWIP_Init+0x22c>)
 800f212:	785b      	ldrb	r3, [r3, #1]
 800f214:	041b      	lsls	r3, r3, #16
 800f216:	431a      	orrs	r2, r3
 800f218:	4b2d      	ldr	r3, [pc, #180]	; (800f2d0 <MX_LWIP_Init+0x22c>)
 800f21a:	789b      	ldrb	r3, [r3, #2]
 800f21c:	021b      	lsls	r3, r3, #8
 800f21e:	4313      	orrs	r3, r2
 800f220:	4a2b      	ldr	r2, [pc, #172]	; (800f2d0 <MX_LWIP_Init+0x22c>)
 800f222:	78d2      	ldrb	r2, [r2, #3]
 800f224:	4313      	orrs	r3, r2
 800f226:	061a      	lsls	r2, r3, #24
 800f228:	4b29      	ldr	r3, [pc, #164]	; (800f2d0 <MX_LWIP_Init+0x22c>)
 800f22a:	781b      	ldrb	r3, [r3, #0]
 800f22c:	0619      	lsls	r1, r3, #24
 800f22e:	4b28      	ldr	r3, [pc, #160]	; (800f2d0 <MX_LWIP_Init+0x22c>)
 800f230:	785b      	ldrb	r3, [r3, #1]
 800f232:	041b      	lsls	r3, r3, #16
 800f234:	4319      	orrs	r1, r3
 800f236:	4b26      	ldr	r3, [pc, #152]	; (800f2d0 <MX_LWIP_Init+0x22c>)
 800f238:	789b      	ldrb	r3, [r3, #2]
 800f23a:	021b      	lsls	r3, r3, #8
 800f23c:	430b      	orrs	r3, r1
 800f23e:	4924      	ldr	r1, [pc, #144]	; (800f2d0 <MX_LWIP_Init+0x22c>)
 800f240:	78c9      	ldrb	r1, [r1, #3]
 800f242:	430b      	orrs	r3, r1
 800f244:	021b      	lsls	r3, r3, #8
 800f246:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800f24a:	431a      	orrs	r2, r3
 800f24c:	4b20      	ldr	r3, [pc, #128]	; (800f2d0 <MX_LWIP_Init+0x22c>)
 800f24e:	781b      	ldrb	r3, [r3, #0]
 800f250:	0619      	lsls	r1, r3, #24
 800f252:	4b1f      	ldr	r3, [pc, #124]	; (800f2d0 <MX_LWIP_Init+0x22c>)
 800f254:	785b      	ldrb	r3, [r3, #1]
 800f256:	041b      	lsls	r3, r3, #16
 800f258:	4319      	orrs	r1, r3
 800f25a:	4b1d      	ldr	r3, [pc, #116]	; (800f2d0 <MX_LWIP_Init+0x22c>)
 800f25c:	789b      	ldrb	r3, [r3, #2]
 800f25e:	021b      	lsls	r3, r3, #8
 800f260:	430b      	orrs	r3, r1
 800f262:	491b      	ldr	r1, [pc, #108]	; (800f2d0 <MX_LWIP_Init+0x22c>)
 800f264:	78c9      	ldrb	r1, [r1, #3]
 800f266:	430b      	orrs	r3, r1
 800f268:	0a1b      	lsrs	r3, r3, #8
 800f26a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800f26e:	431a      	orrs	r2, r3
 800f270:	4b17      	ldr	r3, [pc, #92]	; (800f2d0 <MX_LWIP_Init+0x22c>)
 800f272:	781b      	ldrb	r3, [r3, #0]
 800f274:	0619      	lsls	r1, r3, #24
 800f276:	4b16      	ldr	r3, [pc, #88]	; (800f2d0 <MX_LWIP_Init+0x22c>)
 800f278:	785b      	ldrb	r3, [r3, #1]
 800f27a:	041b      	lsls	r3, r3, #16
 800f27c:	4319      	orrs	r1, r3
 800f27e:	4b14      	ldr	r3, [pc, #80]	; (800f2d0 <MX_LWIP_Init+0x22c>)
 800f280:	789b      	ldrb	r3, [r3, #2]
 800f282:	021b      	lsls	r3, r3, #8
 800f284:	430b      	orrs	r3, r1
 800f286:	4912      	ldr	r1, [pc, #72]	; (800f2d0 <MX_LWIP_Init+0x22c>)
 800f288:	78c9      	ldrb	r1, [r1, #3]
 800f28a:	430b      	orrs	r3, r1
 800f28c:	0e1b      	lsrs	r3, r3, #24
 800f28e:	4313      	orrs	r3, r2
 800f290:	4a12      	ldr	r2, [pc, #72]	; (800f2dc <MX_LWIP_Init+0x238>)
 800f292:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) without RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &ethernet_input);
 800f294:	4b12      	ldr	r3, [pc, #72]	; (800f2e0 <MX_LWIP_Init+0x23c>)
 800f296:	9302      	str	r3, [sp, #8]
 800f298:	4b12      	ldr	r3, [pc, #72]	; (800f2e4 <MX_LWIP_Init+0x240>)
 800f29a:	9301      	str	r3, [sp, #4]
 800f29c:	2300      	movs	r3, #0
 800f29e:	9300      	str	r3, [sp, #0]
 800f2a0:	4b0e      	ldr	r3, [pc, #56]	; (800f2dc <MX_LWIP_Init+0x238>)
 800f2a2:	4a0d      	ldr	r2, [pc, #52]	; (800f2d8 <MX_LWIP_Init+0x234>)
 800f2a4:	490b      	ldr	r1, [pc, #44]	; (800f2d4 <MX_LWIP_Init+0x230>)
 800f2a6:	4810      	ldr	r0, [pc, #64]	; (800f2e8 <MX_LWIP_Init+0x244>)
 800f2a8:	f001 f92c 	bl	8010504 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 800f2ac:	480e      	ldr	r0, [pc, #56]	; (800f2e8 <MX_LWIP_Init+0x244>)
 800f2ae:	f001 fadb 	bl	8010868 <netif_set_default>

  /* We must always bring the network interface up connection or not... */
  netif_set_up(&gnetif);
 800f2b2:	480d      	ldr	r0, [pc, #52]	; (800f2e8 <MX_LWIP_Init+0x244>)
 800f2b4:	f001 fae8 	bl	8010888 <netif_set_up>

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernet_link_status_updated);
 800f2b8:	490c      	ldr	r1, [pc, #48]	; (800f2ec <MX_LWIP_Init+0x248>)
 800f2ba:	480b      	ldr	r0, [pc, #44]	; (800f2e8 <MX_LWIP_Init+0x244>)
 800f2bc:	f001 fbe6 	bl	8010a8c <netif_set_link_callback>
  /* Create the Ethernet link handler thread */

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 800f2c0:	bf00      	nop
 800f2c2:	46bd      	mov	sp, r7
 800f2c4:	bd80      	pop	{r7, pc}
 800f2c6:	bf00      	nop
 800f2c8:	200006dc 	.word	0x200006dc
 800f2cc:	200006e0 	.word	0x200006e0
 800f2d0:	200006e4 	.word	0x200006e4
 800f2d4:	200006d0 	.word	0x200006d0
 800f2d8:	200006d4 	.word	0x200006d4
 800f2dc:	200006d8 	.word	0x200006d8
 800f2e0:	080192d9 	.word	0x080192d9
 800f2e4:	0800f535 	.word	0x0800f535
 800f2e8:	2000069c 	.word	0x2000069c
 800f2ec:	0800f2f1 	.word	0x0800f2f1

0800f2f0 <ethernet_link_status_updated>:
  * @brief  Notify the User about the network interface config status
  * @param  netif: the network interface
  * @retval None
  */
static void ethernet_link_status_updated(struct netif *netif)
{
 800f2f0:	b480      	push	{r7}
 800f2f2:	b083      	sub	sp, #12
 800f2f4:	af00      	add	r7, sp, #0
 800f2f6:	6078      	str	r0, [r7, #4]
  else /* netif is down */
  {
/* USER CODE BEGIN 6 */
/* USER CODE END 6 */
  }
}
 800f2f8:	bf00      	nop
 800f2fa:	370c      	adds	r7, #12
 800f2fc:	46bd      	mov	sp, r7
 800f2fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f302:	4770      	bx	lr

0800f304 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 800f304:	b580      	push	{r7, lr}
 800f306:	b084      	sub	sp, #16
 800f308:	af00      	add	r7, sp, #0
 800f30a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_eth_init_status = HAL_OK;
 800f30c:	2300      	movs	r3, #0
 800f30e:	73fb      	strb	r3, [r7, #15]
  /* Start ETH HAL Init */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 800f310:	4b3f      	ldr	r3, [pc, #252]	; (800f410 <low_level_init+0x10c>)
 800f312:	4a40      	ldr	r2, [pc, #256]	; (800f414 <low_level_init+0x110>)
 800f314:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 800f316:	2300      	movs	r3, #0
 800f318:	723b      	strb	r3, [r7, #8]
  MACAddr[1] = 0x80;
 800f31a:	2380      	movs	r3, #128	; 0x80
 800f31c:	727b      	strb	r3, [r7, #9]
  MACAddr[2] = 0xE1;
 800f31e:	23e1      	movs	r3, #225	; 0xe1
 800f320:	72bb      	strb	r3, [r7, #10]
  MACAddr[3] = 0x00;
 800f322:	2300      	movs	r3, #0
 800f324:	72fb      	strb	r3, [r7, #11]
  MACAddr[4] = 0x00;
 800f326:	2300      	movs	r3, #0
 800f328:	733b      	strb	r3, [r7, #12]
  MACAddr[5] = 0x00;
 800f32a:	2300      	movs	r3, #0
 800f32c:	737b      	strb	r3, [r7, #13]
  heth.Init.MACAddr = &MACAddr[0];
 800f32e:	4a38      	ldr	r2, [pc, #224]	; (800f410 <low_level_init+0x10c>)
 800f330:	f107 0308 	add.w	r3, r7, #8
 800f334:	6053      	str	r3, [r2, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 800f336:	4b36      	ldr	r3, [pc, #216]	; (800f410 <low_level_init+0x10c>)
 800f338:	2201      	movs	r2, #1
 800f33a:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 800f33c:	4b34      	ldr	r3, [pc, #208]	; (800f410 <low_level_init+0x10c>)
 800f33e:	4a36      	ldr	r2, [pc, #216]	; (800f418 <low_level_init+0x114>)
 800f340:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 800f342:	4b33      	ldr	r3, [pc, #204]	; (800f410 <low_level_init+0x10c>)
 800f344:	4a35      	ldr	r2, [pc, #212]	; (800f41c <low_level_init+0x118>)
 800f346:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1536;
 800f348:	4b31      	ldr	r3, [pc, #196]	; (800f410 <low_level_init+0x10c>)
 800f34a:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 800f34e:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 800f350:	482f      	ldr	r0, [pc, #188]	; (800f410 <low_level_init+0x10c>)
 800f352:	f7f7 f85b 	bl	800640c <HAL_ETH_Init>
 800f356:	4603      	mov	r3, r0
 800f358:	73fb      	strb	r3, [r7, #15]

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 800f35a:	2238      	movs	r2, #56	; 0x38
 800f35c:	2100      	movs	r1, #0
 800f35e:	4830      	ldr	r0, [pc, #192]	; (800f420 <low_level_init+0x11c>)
 800f360:	f00a ff20 	bl	801a1a4 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 800f364:	4b2e      	ldr	r3, [pc, #184]	; (800f420 <low_level_init+0x11c>)
 800f366:	2221      	movs	r2, #33	; 0x21
 800f368:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 800f36a:	4b2d      	ldr	r3, [pc, #180]	; (800f420 <low_level_init+0x11c>)
 800f36c:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800f370:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 800f372:	4b2b      	ldr	r3, [pc, #172]	; (800f420 <low_level_init+0x11c>)
 800f374:	2200      	movs	r2, #0
 800f376:	611a      	str	r2, [r3, #16]

  /* End ETH HAL Init */

  /* Initialize the RX POOL */
  LWIP_MEMPOOL_INIT(RX_POOL);
 800f378:	482a      	ldr	r0, [pc, #168]	; (800f424 <low_level_init+0x120>)
 800f37a:	f000 ff8b 	bl	8010294 <memp_init_pool>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 800f37e:	687b      	ldr	r3, [r7, #4]
 800f380:	2206      	movs	r2, #6
 800f382:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 800f386:	4b22      	ldr	r3, [pc, #136]	; (800f410 <low_level_init+0x10c>)
 800f388:	685b      	ldr	r3, [r3, #4]
 800f38a:	781a      	ldrb	r2, [r3, #0]
 800f38c:	687b      	ldr	r3, [r7, #4]
 800f38e:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 800f392:	4b1f      	ldr	r3, [pc, #124]	; (800f410 <low_level_init+0x10c>)
 800f394:	685b      	ldr	r3, [r3, #4]
 800f396:	785a      	ldrb	r2, [r3, #1]
 800f398:	687b      	ldr	r3, [r7, #4]
 800f39a:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 800f39e:	4b1c      	ldr	r3, [pc, #112]	; (800f410 <low_level_init+0x10c>)
 800f3a0:	685b      	ldr	r3, [r3, #4]
 800f3a2:	789a      	ldrb	r2, [r3, #2]
 800f3a4:	687b      	ldr	r3, [r7, #4]
 800f3a6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 800f3aa:	4b19      	ldr	r3, [pc, #100]	; (800f410 <low_level_init+0x10c>)
 800f3ac:	685b      	ldr	r3, [r3, #4]
 800f3ae:	78da      	ldrb	r2, [r3, #3]
 800f3b0:	687b      	ldr	r3, [r7, #4]
 800f3b2:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 800f3b6:	4b16      	ldr	r3, [pc, #88]	; (800f410 <low_level_init+0x10c>)
 800f3b8:	685b      	ldr	r3, [r3, #4]
 800f3ba:	791a      	ldrb	r2, [r3, #4]
 800f3bc:	687b      	ldr	r3, [r7, #4]
 800f3be:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 800f3c2:	4b13      	ldr	r3, [pc, #76]	; (800f410 <low_level_init+0x10c>)
 800f3c4:	685b      	ldr	r3, [r3, #4]
 800f3c6:	795a      	ldrb	r2, [r3, #5]
 800f3c8:	687b      	ldr	r3, [r7, #4]
 800f3ca:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b

  /* maximum transfer unit */
  netif->mtu = ETH_MAX_PAYLOAD;
 800f3ce:	687b      	ldr	r3, [r7, #4]
 800f3d0:	f240 52dc 	movw	r2, #1500	; 0x5dc
 800f3d4:	849a      	strh	r2, [r3, #36]	; 0x24

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 800f3d6:	687b      	ldr	r3, [r7, #4]
 800f3d8:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800f3dc:	f043 030a 	orr.w	r3, r3, #10
 800f3e0:	b2da      	uxtb	r2, r3
 800f3e2:	687b      	ldr	r3, [r7, #4]
 800f3e4:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */
  /* Set PHY IO functions */
  LAN8742_RegisterBusIO(&LAN8742, &LAN8742_IOCtx);
 800f3e8:	490f      	ldr	r1, [pc, #60]	; (800f428 <low_level_init+0x124>)
 800f3ea:	4810      	ldr	r0, [pc, #64]	; (800f42c <low_level_init+0x128>)
 800f3ec:	f7f4 fcf7 	bl	8003dde <LAN8742_RegisterBusIO>

  /* Initialize the LAN8742 ETH PHY */
  LAN8742_Init(&LAN8742);
 800f3f0:	480e      	ldr	r0, [pc, #56]	; (800f42c <low_level_init+0x128>)
 800f3f2:	f7f4 fd26 	bl	8003e42 <LAN8742_Init>

  if (hal_eth_init_status == HAL_OK)
 800f3f6:	7bfb      	ldrb	r3, [r7, #15]
 800f3f8:	2b00      	cmp	r3, #0
 800f3fa:	d103      	bne.n	800f404 <low_level_init+0x100>
  {
  /* Get link state */
  ethernet_link_check_state(netif);
 800f3fc:	6878      	ldr	r0, [r7, #4]
 800f3fe:	f000 fa05 	bl	800f80c <ethernet_link_check_state>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 800f402:	e001      	b.n	800f408 <low_level_init+0x104>
    Error_Handler();
 800f404:	f7f3 ff94 	bl	8003330 <Error_Handler>
}
 800f408:	bf00      	nop
 800f40a:	3710      	adds	r7, #16
 800f40c:	46bd      	mov	sp, r7
 800f40e:	bd80      	pop	{r7, pc}
 800f410:	200006f0 	.word	0x200006f0
 800f414:	40028000 	.word	0x40028000
 800f418:	30040060 	.word	0x30040060
 800f41c:	30040000 	.word	0x30040000
 800f420:	200007a0 	.word	0x200007a0
 800f424:	0801f488 	.word	0x0801f488
 800f428:	20000044 	.word	0x20000044
 800f42c:	200007d8 	.word	0x200007d8

0800f430 <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 800f430:	b580      	push	{r7, lr}
 800f432:	b092      	sub	sp, #72	; 0x48
 800f434:	af00      	add	r7, sp, #0
 800f436:	6078      	str	r0, [r7, #4]
 800f438:	6039      	str	r1, [r7, #0]
  uint32_t i = 0U;
 800f43a:	2300      	movs	r3, #0
 800f43c:	647b      	str	r3, [r7, #68]	; 0x44
  struct pbuf *q = NULL;
 800f43e:	2300      	movs	r3, #0
 800f440:	643b      	str	r3, [r7, #64]	; 0x40
  err_t errval = ERR_OK;
 800f442:	2300      	movs	r3, #0
 800f444:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  ETH_BufferTypeDef Txbuffer[ETH_TX_DESC_CNT] = {0};
 800f448:	f107 030c 	add.w	r3, r7, #12
 800f44c:	2230      	movs	r2, #48	; 0x30
 800f44e:	2100      	movs	r1, #0
 800f450:	4618      	mov	r0, r3
 800f452:	f00a fea7 	bl	801a1a4 <memset>

  memset(Txbuffer, 0 , ETH_TX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 800f456:	f107 030c 	add.w	r3, r7, #12
 800f45a:	2230      	movs	r2, #48	; 0x30
 800f45c:	2100      	movs	r1, #0
 800f45e:	4618      	mov	r0, r3
 800f460:	f00a fea0 	bl	801a1a4 <memset>

  for(q = p; q != NULL; q = q->next)
 800f464:	683b      	ldr	r3, [r7, #0]
 800f466:	643b      	str	r3, [r7, #64]	; 0x40
 800f468:	e045      	b.n	800f4f6 <low_level_output+0xc6>
  {
    if(i >= ETH_TX_DESC_CNT)
 800f46a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f46c:	2b03      	cmp	r3, #3
 800f46e:	d902      	bls.n	800f476 <low_level_output+0x46>
      return ERR_IF;
 800f470:	f06f 030b 	mvn.w	r3, #11
 800f474:	e055      	b.n	800f522 <low_level_output+0xf2>

    Txbuffer[i].buffer = q->payload;
 800f476:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f478:	6859      	ldr	r1, [r3, #4]
 800f47a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800f47c:	4613      	mov	r3, r2
 800f47e:	005b      	lsls	r3, r3, #1
 800f480:	4413      	add	r3, r2
 800f482:	009b      	lsls	r3, r3, #2
 800f484:	3348      	adds	r3, #72	; 0x48
 800f486:	443b      	add	r3, r7
 800f488:	3b3c      	subs	r3, #60	; 0x3c
 800f48a:	6019      	str	r1, [r3, #0]
    Txbuffer[i].len = q->len;
 800f48c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f48e:	895b      	ldrh	r3, [r3, #10]
 800f490:	4619      	mov	r1, r3
 800f492:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800f494:	4613      	mov	r3, r2
 800f496:	005b      	lsls	r3, r3, #1
 800f498:	4413      	add	r3, r2
 800f49a:	009b      	lsls	r3, r3, #2
 800f49c:	3348      	adds	r3, #72	; 0x48
 800f49e:	443b      	add	r3, r7
 800f4a0:	3b38      	subs	r3, #56	; 0x38
 800f4a2:	6019      	str	r1, [r3, #0]

    if(i>0)
 800f4a4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f4a6:	2b00      	cmp	r3, #0
 800f4a8:	d011      	beq.n	800f4ce <low_level_output+0x9e>
    {
      Txbuffer[i-1].next = &Txbuffer[i];
 800f4aa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f4ac:	1e5a      	subs	r2, r3, #1
 800f4ae:	f107 000c 	add.w	r0, r7, #12
 800f4b2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800f4b4:	460b      	mov	r3, r1
 800f4b6:	005b      	lsls	r3, r3, #1
 800f4b8:	440b      	add	r3, r1
 800f4ba:	009b      	lsls	r3, r3, #2
 800f4bc:	18c1      	adds	r1, r0, r3
 800f4be:	4613      	mov	r3, r2
 800f4c0:	005b      	lsls	r3, r3, #1
 800f4c2:	4413      	add	r3, r2
 800f4c4:	009b      	lsls	r3, r3, #2
 800f4c6:	3348      	adds	r3, #72	; 0x48
 800f4c8:	443b      	add	r3, r7
 800f4ca:	3b34      	subs	r3, #52	; 0x34
 800f4cc:	6019      	str	r1, [r3, #0]
    }

    if(q->next == NULL)
 800f4ce:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f4d0:	681b      	ldr	r3, [r3, #0]
 800f4d2:	2b00      	cmp	r3, #0
 800f4d4:	d109      	bne.n	800f4ea <low_level_output+0xba>
    {
      Txbuffer[i].next = NULL;
 800f4d6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800f4d8:	4613      	mov	r3, r2
 800f4da:	005b      	lsls	r3, r3, #1
 800f4dc:	4413      	add	r3, r2
 800f4de:	009b      	lsls	r3, r3, #2
 800f4e0:	3348      	adds	r3, #72	; 0x48
 800f4e2:	443b      	add	r3, r7
 800f4e4:	3b34      	subs	r3, #52	; 0x34
 800f4e6:	2200      	movs	r2, #0
 800f4e8:	601a      	str	r2, [r3, #0]
    }

    i++;
 800f4ea:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f4ec:	3301      	adds	r3, #1
 800f4ee:	647b      	str	r3, [r7, #68]	; 0x44
  for(q = p; q != NULL; q = q->next)
 800f4f0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f4f2:	681b      	ldr	r3, [r3, #0]
 800f4f4:	643b      	str	r3, [r7, #64]	; 0x40
 800f4f6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f4f8:	2b00      	cmp	r3, #0
 800f4fa:	d1b6      	bne.n	800f46a <low_level_output+0x3a>
  }

  TxConfig.Length = p->tot_len;
 800f4fc:	683b      	ldr	r3, [r7, #0]
 800f4fe:	891b      	ldrh	r3, [r3, #8]
 800f500:	461a      	mov	r2, r3
 800f502:	4b0a      	ldr	r3, [pc, #40]	; (800f52c <low_level_output+0xfc>)
 800f504:	605a      	str	r2, [r3, #4]
  TxConfig.TxBuffer = Txbuffer;
 800f506:	4a09      	ldr	r2, [pc, #36]	; (800f52c <low_level_output+0xfc>)
 800f508:	f107 030c 	add.w	r3, r7, #12
 800f50c:	6093      	str	r3, [r2, #8]
  TxConfig.pData = p;
 800f50e:	4a07      	ldr	r2, [pc, #28]	; (800f52c <low_level_output+0xfc>)
 800f510:	683b      	ldr	r3, [r7, #0]
 800f512:	6353      	str	r3, [r2, #52]	; 0x34

  HAL_ETH_Transmit(&heth, &TxConfig, ETH_DMA_TRANSMIT_TIMEOUT);
 800f514:	2214      	movs	r2, #20
 800f516:	4905      	ldr	r1, [pc, #20]	; (800f52c <low_level_output+0xfc>)
 800f518:	4805      	ldr	r0, [pc, #20]	; (800f530 <low_level_output+0x100>)
 800f51a:	f7f7 f90f 	bl	800673c <HAL_ETH_Transmit>

  return errval;
 800f51e:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 800f522:	4618      	mov	r0, r3
 800f524:	3748      	adds	r7, #72	; 0x48
 800f526:	46bd      	mov	sp, r7
 800f528:	bd80      	pop	{r7, pc}
 800f52a:	bf00      	nop
 800f52c:	200007a0 	.word	0x200007a0
 800f530:	200006f0 	.word	0x200006f0

0800f534 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 800f534:	b580      	push	{r7, lr}
 800f536:	b082      	sub	sp, #8
 800f538:	af00      	add	r7, sp, #0
 800f53a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 800f53c:	687b      	ldr	r3, [r7, #4]
 800f53e:	2b00      	cmp	r3, #0
 800f540:	d106      	bne.n	800f550 <ethernetif_init+0x1c>
 800f542:	4b0e      	ldr	r3, [pc, #56]	; (800f57c <ethernetif_init+0x48>)
 800f544:	f240 1285 	movw	r2, #389	; 0x185
 800f548:	490d      	ldr	r1, [pc, #52]	; (800f580 <ethernetif_init+0x4c>)
 800f54a:	480e      	ldr	r0, [pc, #56]	; (800f584 <ethernetif_init+0x50>)
 800f54c:	f00a fcd4 	bl	8019ef8 <iprintf>
   * The last argument should be replaced with your link speed, in units
   * of bits per second.
   */
  // MIB2_INIT_NETIF(netif, snmp_ifType_ethernet_csmacd, LINK_SPEED_OF_YOUR_NETIF_IN_BPS);

  netif->name[0] = IFNAME0;
 800f550:	687b      	ldr	r3, [r7, #4]
 800f552:	2273      	movs	r2, #115	; 0x73
 800f554:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  netif->name[1] = IFNAME1;
 800f558:	687b      	ldr	r3, [r7, #4]
 800f55a:	2274      	movs	r2, #116	; 0x74
 800f55c:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 800f560:	687b      	ldr	r3, [r7, #4]
 800f562:	4a09      	ldr	r2, [pc, #36]	; (800f588 <ethernetif_init+0x54>)
 800f564:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 800f566:	687b      	ldr	r3, [r7, #4]
 800f568:	4a08      	ldr	r2, [pc, #32]	; (800f58c <ethernetif_init+0x58>)
 800f56a:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 800f56c:	6878      	ldr	r0, [r7, #4]
 800f56e:	f7ff fec9 	bl	800f304 <low_level_init>

  return ERR_OK;
 800f572:	2300      	movs	r3, #0
}
 800f574:	4618      	mov	r0, r3
 800f576:	3708      	adds	r7, #8
 800f578:	46bd      	mov	sp, r7
 800f57a:	bd80      	pop	{r7, pc}
 800f57c:	0801ca4c 	.word	0x0801ca4c
 800f580:	0801ca68 	.word	0x0801ca68
 800f584:	0801ca78 	.word	0x0801ca78
 800f588:	08017745 	.word	0x08017745
 800f58c:	0800f431 	.word	0x0800f431

0800f590 <pbuf_free_custom>:
  * @brief  Custom Rx pbuf free callback
  * @param  pbuf: pbuf to be freed
  * @retval None
  */
void pbuf_free_custom(struct pbuf *p)
{
 800f590:	b580      	push	{r7, lr}
 800f592:	b084      	sub	sp, #16
 800f594:	af00      	add	r7, sp, #0
 800f596:	6078      	str	r0, [r7, #4]
  struct pbuf_custom* custom_pbuf = (struct pbuf_custom*)p;
 800f598:	687b      	ldr	r3, [r7, #4]
 800f59a:	60fb      	str	r3, [r7, #12]
  LWIP_MEMPOOL_FREE(RX_POOL, custom_pbuf);
 800f59c:	68f9      	ldr	r1, [r7, #12]
 800f59e:	4807      	ldr	r0, [pc, #28]	; (800f5bc <pbuf_free_custom+0x2c>)
 800f5a0:	f000 ff5a 	bl	8010458 <memp_free_pool>

  /* If the Rx Buffer Pool was exhausted, signal the ethernetif_input task to
   * call HAL_ETH_GetRxDataBuffer to rebuild the Rx descriptors. */

  if (RxAllocStatus == RX_ALLOC_ERROR)
 800f5a4:	4b06      	ldr	r3, [pc, #24]	; (800f5c0 <pbuf_free_custom+0x30>)
 800f5a6:	781b      	ldrb	r3, [r3, #0]
 800f5a8:	2b01      	cmp	r3, #1
 800f5aa:	d102      	bne.n	800f5b2 <pbuf_free_custom+0x22>
  {
    RxAllocStatus = RX_ALLOC_OK;
 800f5ac:	4b04      	ldr	r3, [pc, #16]	; (800f5c0 <pbuf_free_custom+0x30>)
 800f5ae:	2200      	movs	r2, #0
 800f5b0:	701a      	strb	r2, [r3, #0]
  }
}
 800f5b2:	bf00      	nop
 800f5b4:	3710      	adds	r7, #16
 800f5b6:	46bd      	mov	sp, r7
 800f5b8:	bd80      	pop	{r7, pc}
 800f5ba:	bf00      	nop
 800f5bc:	0801f488 	.word	0x0801f488
 800f5c0:	200006ec 	.word	0x200006ec

0800f5c4 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Current Time value
*/
u32_t sys_now(void)
{
 800f5c4:	b580      	push	{r7, lr}
 800f5c6:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 800f5c8:	f7f4 fdf0 	bl	80041ac <HAL_GetTick>
 800f5cc:	4603      	mov	r3, r0
}
 800f5ce:	4618      	mov	r0, r3
 800f5d0:	bd80      	pop	{r7, pc}
	...

0800f5d4 <HAL_ETH_MspInit>:
  * @param  ethHandle: ETH handle
  * @retval None
  */

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 800f5d4:	b580      	push	{r7, lr}
 800f5d6:	b08e      	sub	sp, #56	; 0x38
 800f5d8:	af00      	add	r7, sp, #0
 800f5da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800f5dc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800f5e0:	2200      	movs	r2, #0
 800f5e2:	601a      	str	r2, [r3, #0]
 800f5e4:	605a      	str	r2, [r3, #4]
 800f5e6:	609a      	str	r2, [r3, #8]
 800f5e8:	60da      	str	r2, [r3, #12]
 800f5ea:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 800f5ec:	687b      	ldr	r3, [r7, #4]
 800f5ee:	681b      	ldr	r3, [r3, #0]
 800f5f0:	4a59      	ldr	r2, [pc, #356]	; (800f758 <HAL_ETH_MspInit+0x184>)
 800f5f2:	4293      	cmp	r3, r2
 800f5f4:	f040 80ab 	bne.w	800f74e <HAL_ETH_MspInit+0x17a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 800f5f8:	4b58      	ldr	r3, [pc, #352]	; (800f75c <HAL_ETH_MspInit+0x188>)
 800f5fa:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800f5fe:	4a57      	ldr	r2, [pc, #348]	; (800f75c <HAL_ETH_MspInit+0x188>)
 800f600:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800f604:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800f608:	4b54      	ldr	r3, [pc, #336]	; (800f75c <HAL_ETH_MspInit+0x188>)
 800f60a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800f60e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800f612:	623b      	str	r3, [r7, #32]
 800f614:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 800f616:	4b51      	ldr	r3, [pc, #324]	; (800f75c <HAL_ETH_MspInit+0x188>)
 800f618:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800f61c:	4a4f      	ldr	r2, [pc, #316]	; (800f75c <HAL_ETH_MspInit+0x188>)
 800f61e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800f622:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800f626:	4b4d      	ldr	r3, [pc, #308]	; (800f75c <HAL_ETH_MspInit+0x188>)
 800f628:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800f62c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800f630:	61fb      	str	r3, [r7, #28]
 800f632:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 800f634:	4b49      	ldr	r3, [pc, #292]	; (800f75c <HAL_ETH_MspInit+0x188>)
 800f636:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800f63a:	4a48      	ldr	r2, [pc, #288]	; (800f75c <HAL_ETH_MspInit+0x188>)
 800f63c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800f640:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800f644:	4b45      	ldr	r3, [pc, #276]	; (800f75c <HAL_ETH_MspInit+0x188>)
 800f646:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800f64a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800f64e:	61bb      	str	r3, [r7, #24]
 800f650:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800f652:	4b42      	ldr	r3, [pc, #264]	; (800f75c <HAL_ETH_MspInit+0x188>)
 800f654:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800f658:	4a40      	ldr	r2, [pc, #256]	; (800f75c <HAL_ETH_MspInit+0x188>)
 800f65a:	f043 0304 	orr.w	r3, r3, #4
 800f65e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800f662:	4b3e      	ldr	r3, [pc, #248]	; (800f75c <HAL_ETH_MspInit+0x188>)
 800f664:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800f668:	f003 0304 	and.w	r3, r3, #4
 800f66c:	617b      	str	r3, [r7, #20]
 800f66e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800f670:	4b3a      	ldr	r3, [pc, #232]	; (800f75c <HAL_ETH_MspInit+0x188>)
 800f672:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800f676:	4a39      	ldr	r2, [pc, #228]	; (800f75c <HAL_ETH_MspInit+0x188>)
 800f678:	f043 0301 	orr.w	r3, r3, #1
 800f67c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800f680:	4b36      	ldr	r3, [pc, #216]	; (800f75c <HAL_ETH_MspInit+0x188>)
 800f682:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800f686:	f003 0301 	and.w	r3, r3, #1
 800f68a:	613b      	str	r3, [r7, #16]
 800f68c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800f68e:	4b33      	ldr	r3, [pc, #204]	; (800f75c <HAL_ETH_MspInit+0x188>)
 800f690:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800f694:	4a31      	ldr	r2, [pc, #196]	; (800f75c <HAL_ETH_MspInit+0x188>)
 800f696:	f043 0302 	orr.w	r3, r3, #2
 800f69a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800f69e:	4b2f      	ldr	r3, [pc, #188]	; (800f75c <HAL_ETH_MspInit+0x188>)
 800f6a0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800f6a4:	f003 0302 	and.w	r3, r3, #2
 800f6a8:	60fb      	str	r3, [r7, #12]
 800f6aa:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800f6ac:	4b2b      	ldr	r3, [pc, #172]	; (800f75c <HAL_ETH_MspInit+0x188>)
 800f6ae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800f6b2:	4a2a      	ldr	r2, [pc, #168]	; (800f75c <HAL_ETH_MspInit+0x188>)
 800f6b4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f6b8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800f6bc:	4b27      	ldr	r3, [pc, #156]	; (800f75c <HAL_ETH_MspInit+0x188>)
 800f6be:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800f6c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f6c6:	60bb      	str	r3, [r7, #8]
 800f6c8:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 800f6ca:	2332      	movs	r3, #50	; 0x32
 800f6cc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800f6ce:	2302      	movs	r3, #2
 800f6d0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f6d2:	2300      	movs	r3, #0
 800f6d4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800f6d6:	2300      	movs	r3, #0
 800f6d8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800f6da:	230b      	movs	r3, #11
 800f6dc:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800f6de:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800f6e2:	4619      	mov	r1, r3
 800f6e4:	481e      	ldr	r0, [pc, #120]	; (800f760 <HAL_ETH_MspInit+0x18c>)
 800f6e6:	f7f8 f991 	bl	8007a0c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 800f6ea:	2386      	movs	r3, #134	; 0x86
 800f6ec:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800f6ee:	2302      	movs	r3, #2
 800f6f0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f6f2:	2300      	movs	r3, #0
 800f6f4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800f6f6:	2300      	movs	r3, #0
 800f6f8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800f6fa:	230b      	movs	r3, #11
 800f6fc:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800f6fe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800f702:	4619      	mov	r1, r3
 800f704:	4817      	ldr	r0, [pc, #92]	; (800f764 <HAL_ETH_MspInit+0x190>)
 800f706:	f7f8 f981 	bl	8007a0c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 800f70a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800f70e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800f710:	2302      	movs	r3, #2
 800f712:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f714:	2300      	movs	r3, #0
 800f716:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800f718:	2300      	movs	r3, #0
 800f71a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800f71c:	230b      	movs	r3, #11
 800f71e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800f720:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800f724:	4619      	mov	r1, r3
 800f726:	4810      	ldr	r0, [pc, #64]	; (800f768 <HAL_ETH_MspInit+0x194>)
 800f728:	f7f8 f970 	bl	8007a0c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 800f72c:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800f730:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800f732:	2302      	movs	r3, #2
 800f734:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800f736:	2300      	movs	r3, #0
 800f738:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800f73a:	2300      	movs	r3, #0
 800f73c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800f73e:	230b      	movs	r3, #11
 800f740:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800f742:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800f746:	4619      	mov	r1, r3
 800f748:	4808      	ldr	r0, [pc, #32]	; (800f76c <HAL_ETH_MspInit+0x198>)
 800f74a:	f7f8 f95f 	bl	8007a0c <HAL_GPIO_Init>

  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 800f74e:	bf00      	nop
 800f750:	3738      	adds	r7, #56	; 0x38
 800f752:	46bd      	mov	sp, r7
 800f754:	bd80      	pop	{r7, pc}
 800f756:	bf00      	nop
 800f758:	40028000 	.word	0x40028000
 800f75c:	58024400 	.word	0x58024400
 800f760:	58020800 	.word	0x58020800
 800f764:	58020000 	.word	0x58020000
 800f768:	58020400 	.word	0x58020400
 800f76c:	58021800 	.word	0x58021800

0800f770 <ETH_PHY_IO_Init>:
  * @brief  Initializes the MDIO interface GPIO and clocks.
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_Init(void)
{
 800f770:	b580      	push	{r7, lr}
 800f772:	af00      	add	r7, sp, #0
  /* We assume that MDIO GPIO configuration is already done
     in the ETH_MspInit() else it should be done here
  */

  /* Configure the MDIO Clock */
  HAL_ETH_SetMDIOClockRange(&heth);
 800f774:	4802      	ldr	r0, [pc, #8]	; (800f780 <ETH_PHY_IO_Init+0x10>)
 800f776:	f7f7 fb7d 	bl	8006e74 <HAL_ETH_SetMDIOClockRange>

  return 0;
 800f77a:	2300      	movs	r3, #0
}
 800f77c:	4618      	mov	r0, r3
 800f77e:	bd80      	pop	{r7, pc}
 800f780:	200006f0 	.word	0x200006f0

0800f784 <ETH_PHY_IO_DeInit>:
  * @brief  De-Initializes the MDIO interface .
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_DeInit (void)
{
 800f784:	b480      	push	{r7}
 800f786:	af00      	add	r7, sp, #0
  return 0;
 800f788:	2300      	movs	r3, #0
}
 800f78a:	4618      	mov	r0, r3
 800f78c:	46bd      	mov	sp, r7
 800f78e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f792:	4770      	bx	lr

0800f794 <ETH_PHY_IO_ReadReg>:
  * @param  RegAddr: PHY register address
  * @param  pRegVal: pointer to hold the register value
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_ReadReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t *pRegVal)
{
 800f794:	b580      	push	{r7, lr}
 800f796:	b084      	sub	sp, #16
 800f798:	af00      	add	r7, sp, #0
 800f79a:	60f8      	str	r0, [r7, #12]
 800f79c:	60b9      	str	r1, [r7, #8]
 800f79e:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_ReadPHYRegister(&heth, DevAddr, RegAddr, pRegVal) != HAL_OK)
 800f7a0:	687b      	ldr	r3, [r7, #4]
 800f7a2:	68ba      	ldr	r2, [r7, #8]
 800f7a4:	68f9      	ldr	r1, [r7, #12]
 800f7a6:	4807      	ldr	r0, [pc, #28]	; (800f7c4 <ETH_PHY_IO_ReadReg+0x30>)
 800f7a8:	f7f7 f8cd 	bl	8006946 <HAL_ETH_ReadPHYRegister>
 800f7ac:	4603      	mov	r3, r0
 800f7ae:	2b00      	cmp	r3, #0
 800f7b0:	d002      	beq.n	800f7b8 <ETH_PHY_IO_ReadReg+0x24>
  {
    return -1;
 800f7b2:	f04f 33ff 	mov.w	r3, #4294967295
 800f7b6:	e000      	b.n	800f7ba <ETH_PHY_IO_ReadReg+0x26>
  }

  return 0;
 800f7b8:	2300      	movs	r3, #0
}
 800f7ba:	4618      	mov	r0, r3
 800f7bc:	3710      	adds	r7, #16
 800f7be:	46bd      	mov	sp, r7
 800f7c0:	bd80      	pop	{r7, pc}
 800f7c2:	bf00      	nop
 800f7c4:	200006f0 	.word	0x200006f0

0800f7c8 <ETH_PHY_IO_WriteReg>:
  * @param  RegAddr: PHY register address
  * @param  RegVal: Value to be written
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_WriteReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t RegVal)
{
 800f7c8:	b580      	push	{r7, lr}
 800f7ca:	b084      	sub	sp, #16
 800f7cc:	af00      	add	r7, sp, #0
 800f7ce:	60f8      	str	r0, [r7, #12]
 800f7d0:	60b9      	str	r1, [r7, #8]
 800f7d2:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_WritePHYRegister(&heth, DevAddr, RegAddr, RegVal) != HAL_OK)
 800f7d4:	687b      	ldr	r3, [r7, #4]
 800f7d6:	68ba      	ldr	r2, [r7, #8]
 800f7d8:	68f9      	ldr	r1, [r7, #12]
 800f7da:	4807      	ldr	r0, [pc, #28]	; (800f7f8 <ETH_PHY_IO_WriteReg+0x30>)
 800f7dc:	f7f7 f908 	bl	80069f0 <HAL_ETH_WritePHYRegister>
 800f7e0:	4603      	mov	r3, r0
 800f7e2:	2b00      	cmp	r3, #0
 800f7e4:	d002      	beq.n	800f7ec <ETH_PHY_IO_WriteReg+0x24>
  {
    return -1;
 800f7e6:	f04f 33ff 	mov.w	r3, #4294967295
 800f7ea:	e000      	b.n	800f7ee <ETH_PHY_IO_WriteReg+0x26>
  }

  return 0;
 800f7ec:	2300      	movs	r3, #0
}
 800f7ee:	4618      	mov	r0, r3
 800f7f0:	3710      	adds	r7, #16
 800f7f2:	46bd      	mov	sp, r7
 800f7f4:	bd80      	pop	{r7, pc}
 800f7f6:	bf00      	nop
 800f7f8:	200006f0 	.word	0x200006f0

0800f7fc <ETH_PHY_IO_GetTick>:
/**
  * @brief  Get the time in millisecons used for internal PHY driver process.
  * @retval Time value
  */
int32_t ETH_PHY_IO_GetTick(void)
{
 800f7fc:	b580      	push	{r7, lr}
 800f7fe:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 800f800:	f7f4 fcd4 	bl	80041ac <HAL_GetTick>
 800f804:	4603      	mov	r3, r0
}
 800f806:	4618      	mov	r0, r3
 800f808:	bd80      	pop	{r7, pc}
	...

0800f80c <ethernet_link_check_state>:
/**
  * @brief  Check the ETH link state then update ETH driver and netif link accordingly.
  * @retval None
  */
void ethernet_link_check_state(struct netif *netif)
{
 800f80c:	b580      	push	{r7, lr}
 800f80e:	b0a0      	sub	sp, #128	; 0x80
 800f810:	af00      	add	r7, sp, #0
 800f812:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef MACConf = {0};
 800f814:	f107 030c 	add.w	r3, r7, #12
 800f818:	2264      	movs	r2, #100	; 0x64
 800f81a:	2100      	movs	r1, #0
 800f81c:	4618      	mov	r0, r3
 800f81e:	f00a fcc1 	bl	801a1a4 <memset>
  int32_t PHYLinkState = 0;
 800f822:	2300      	movs	r3, #0
 800f824:	673b      	str	r3, [r7, #112]	; 0x70
  uint32_t linkchanged = 0U, speed = 0U, duplex = 0U;
 800f826:	2300      	movs	r3, #0
 800f828:	67fb      	str	r3, [r7, #124]	; 0x7c
 800f82a:	2300      	movs	r3, #0
 800f82c:	67bb      	str	r3, [r7, #120]	; 0x78
 800f82e:	2300      	movs	r3, #0
 800f830:	677b      	str	r3, [r7, #116]	; 0x74

  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 800f832:	483a      	ldr	r0, [pc, #232]	; (800f91c <ethernet_link_check_state+0x110>)
 800f834:	f7f4 fbad 	bl	8003f92 <LAN8742_GetLinkState>
 800f838:	6738      	str	r0, [r7, #112]	; 0x70

  if(netif_is_link_up(netif) && (PHYLinkState <= LAN8742_STATUS_LINK_DOWN))
 800f83a:	687b      	ldr	r3, [r7, #4]
 800f83c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800f840:	089b      	lsrs	r3, r3, #2
 800f842:	f003 0301 	and.w	r3, r3, #1
 800f846:	b2db      	uxtb	r3, r3
 800f848:	2b00      	cmp	r3, #0
 800f84a:	d00c      	beq.n	800f866 <ethernet_link_check_state+0x5a>
 800f84c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800f84e:	2b01      	cmp	r3, #1
 800f850:	dc09      	bgt.n	800f866 <ethernet_link_check_state+0x5a>
  {
    HAL_ETH_Stop(&heth);
 800f852:	4833      	ldr	r0, [pc, #204]	; (800f920 <ethernet_link_check_state+0x114>)
 800f854:	f7f6 ff22 	bl	800669c <HAL_ETH_Stop>
    netif_set_down(netif);
 800f858:	6878      	ldr	r0, [r7, #4]
 800f85a:	f001 f881 	bl	8010960 <netif_set_down>
    netif_set_link_down(netif);
 800f85e:	6878      	ldr	r0, [r7, #4]
 800f860:	f001 f8e4 	bl	8010a2c <netif_set_link_down>
      netif_set_up(netif);
      netif_set_link_up(netif);
    }
  }

}
 800f864:	e055      	b.n	800f912 <ethernet_link_check_state+0x106>
  else if(!netif_is_link_up(netif) && (PHYLinkState > LAN8742_STATUS_LINK_DOWN))
 800f866:	687b      	ldr	r3, [r7, #4]
 800f868:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800f86c:	f003 0304 	and.w	r3, r3, #4
 800f870:	2b00      	cmp	r3, #0
 800f872:	d14e      	bne.n	800f912 <ethernet_link_check_state+0x106>
 800f874:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800f876:	2b01      	cmp	r3, #1
 800f878:	dd4b      	ble.n	800f912 <ethernet_link_check_state+0x106>
    switch (PHYLinkState)
 800f87a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800f87c:	3b02      	subs	r3, #2
 800f87e:	2b03      	cmp	r3, #3
 800f880:	d82a      	bhi.n	800f8d8 <ethernet_link_check_state+0xcc>
 800f882:	a201      	add	r2, pc, #4	; (adr r2, 800f888 <ethernet_link_check_state+0x7c>)
 800f884:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f888:	0800f899 	.word	0x0800f899
 800f88c:	0800f8ab 	.word	0x0800f8ab
 800f890:	0800f8bb 	.word	0x0800f8bb
 800f894:	0800f8cb 	.word	0x0800f8cb
      duplex = ETH_FULLDUPLEX_MODE;
 800f898:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800f89c:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_100M;
 800f89e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800f8a2:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 800f8a4:	2301      	movs	r3, #1
 800f8a6:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 800f8a8:	e017      	b.n	800f8da <ethernet_link_check_state+0xce>
      duplex = ETH_HALFDUPLEX_MODE;
 800f8aa:	2300      	movs	r3, #0
 800f8ac:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_100M;
 800f8ae:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800f8b2:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 800f8b4:	2301      	movs	r3, #1
 800f8b6:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 800f8b8:	e00f      	b.n	800f8da <ethernet_link_check_state+0xce>
      duplex = ETH_FULLDUPLEX_MODE;
 800f8ba:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800f8be:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_10M;
 800f8c0:	2300      	movs	r3, #0
 800f8c2:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 800f8c4:	2301      	movs	r3, #1
 800f8c6:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 800f8c8:	e007      	b.n	800f8da <ethernet_link_check_state+0xce>
      duplex = ETH_HALFDUPLEX_MODE;
 800f8ca:	2300      	movs	r3, #0
 800f8cc:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_10M;
 800f8ce:	2300      	movs	r3, #0
 800f8d0:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 800f8d2:	2301      	movs	r3, #1
 800f8d4:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 800f8d6:	e000      	b.n	800f8da <ethernet_link_check_state+0xce>
      break;
 800f8d8:	bf00      	nop
    if(linkchanged)
 800f8da:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800f8dc:	2b00      	cmp	r3, #0
 800f8de:	d018      	beq.n	800f912 <ethernet_link_check_state+0x106>
      HAL_ETH_GetMACConfig(&heth, &MACConf);
 800f8e0:	f107 030c 	add.w	r3, r7, #12
 800f8e4:	4619      	mov	r1, r3
 800f8e6:	480e      	ldr	r0, [pc, #56]	; (800f920 <ethernet_link_check_state+0x114>)
 800f8e8:	f7f7 f8d6 	bl	8006a98 <HAL_ETH_GetMACConfig>
      MACConf.DuplexMode = duplex;
 800f8ec:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800f8ee:	627b      	str	r3, [r7, #36]	; 0x24
      MACConf.Speed = speed;
 800f8f0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800f8f2:	623b      	str	r3, [r7, #32]
      HAL_ETH_SetMACConfig(&heth, &MACConf);
 800f8f4:	f107 030c 	add.w	r3, r7, #12
 800f8f8:	4619      	mov	r1, r3
 800f8fa:	4809      	ldr	r0, [pc, #36]	; (800f920 <ethernet_link_check_state+0x114>)
 800f8fc:	f7f7 faa0 	bl	8006e40 <HAL_ETH_SetMACConfig>
      HAL_ETH_Start(&heth);
 800f900:	4807      	ldr	r0, [pc, #28]	; (800f920 <ethernet_link_check_state+0x114>)
 800f902:	f7f6 fe69 	bl	80065d8 <HAL_ETH_Start>
      netif_set_up(netif);
 800f906:	6878      	ldr	r0, [r7, #4]
 800f908:	f000 ffbe 	bl	8010888 <netif_set_up>
      netif_set_link_up(netif);
 800f90c:	6878      	ldr	r0, [r7, #4]
 800f90e:	f001 f859 	bl	80109c4 <netif_set_link_up>
}
 800f912:	bf00      	nop
 800f914:	3780      	adds	r7, #128	; 0x80
 800f916:	46bd      	mov	sp, r7
 800f918:	bd80      	pop	{r7, pc}
 800f91a:	bf00      	nop
 800f91c:	200007d8 	.word	0x200007d8
 800f920:	200006f0 	.word	0x200006f0

0800f924 <HAL_ETH_RxAllocateCallback>:

void HAL_ETH_RxAllocateCallback(uint8_t **buff)
{
 800f924:	b580      	push	{r7, lr}
 800f926:	b086      	sub	sp, #24
 800f928:	af02      	add	r7, sp, #8
 800f92a:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH RxAllocateCallback */
  struct pbuf_custom *p = LWIP_MEMPOOL_ALLOC(RX_POOL);
 800f92c:	4812      	ldr	r0, [pc, #72]	; (800f978 <HAL_ETH_RxAllocateCallback+0x54>)
 800f92e:	f000 fd25 	bl	801037c <memp_malloc_pool>
 800f932:	60f8      	str	r0, [r7, #12]
  if (p)
 800f934:	68fb      	ldr	r3, [r7, #12]
 800f936:	2b00      	cmp	r3, #0
 800f938:	d014      	beq.n	800f964 <HAL_ETH_RxAllocateCallback+0x40>
  {
    /* Get the buff from the struct pbuf address. */
    *buff = (uint8_t *)p + offsetof(RxBuff_t, buff);
 800f93a:	68fb      	ldr	r3, [r7, #12]
 800f93c:	f103 0220 	add.w	r2, r3, #32
 800f940:	687b      	ldr	r3, [r7, #4]
 800f942:	601a      	str	r2, [r3, #0]
    p->custom_free_function = pbuf_free_custom;
 800f944:	68fb      	ldr	r3, [r7, #12]
 800f946:	4a0d      	ldr	r2, [pc, #52]	; (800f97c <HAL_ETH_RxAllocateCallback+0x58>)
 800f948:	611a      	str	r2, [r3, #16]
    /* Initialize the struct pbuf.
    * This must be performed whenever a buffer's allocated because it may be
    * changed by lwIP or the app, e.g., pbuf_free decrements ref. */
    pbuf_alloced_custom(PBUF_RAW, 0, PBUF_REF, p, *buff, ETH_RX_BUFFER_SIZE);
 800f94a:	687b      	ldr	r3, [r7, #4]
 800f94c:	681b      	ldr	r3, [r3, #0]
 800f94e:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 800f952:	9201      	str	r2, [sp, #4]
 800f954:	9300      	str	r3, [sp, #0]
 800f956:	68fb      	ldr	r3, [r7, #12]
 800f958:	2241      	movs	r2, #65	; 0x41
 800f95a:	2100      	movs	r1, #0
 800f95c:	2000      	movs	r0, #0
 800f95e:	f001 fa3d 	bl	8010ddc <pbuf_alloced_custom>
  {
    RxAllocStatus = RX_ALLOC_ERROR;
    *buff = NULL;
  }
/* USER CODE END HAL ETH RxAllocateCallback */
}
 800f962:	e005      	b.n	800f970 <HAL_ETH_RxAllocateCallback+0x4c>
    RxAllocStatus = RX_ALLOC_ERROR;
 800f964:	4b06      	ldr	r3, [pc, #24]	; (800f980 <HAL_ETH_RxAllocateCallback+0x5c>)
 800f966:	2201      	movs	r2, #1
 800f968:	701a      	strb	r2, [r3, #0]
    *buff = NULL;
 800f96a:	687b      	ldr	r3, [r7, #4]
 800f96c:	2200      	movs	r2, #0
 800f96e:	601a      	str	r2, [r3, #0]
}
 800f970:	bf00      	nop
 800f972:	3710      	adds	r7, #16
 800f974:	46bd      	mov	sp, r7
 800f976:	bd80      	pop	{r7, pc}
 800f978:	0801f488 	.word	0x0801f488
 800f97c:	0800f591 	.word	0x0800f591
 800f980:	200006ec 	.word	0x200006ec

0800f984 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 800f984:	b480      	push	{r7}
 800f986:	b083      	sub	sp, #12
 800f988:	af00      	add	r7, sp, #0
 800f98a:	4603      	mov	r3, r0
 800f98c:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 800f98e:	88fb      	ldrh	r3, [r7, #6]
 800f990:	021b      	lsls	r3, r3, #8
 800f992:	b21a      	sxth	r2, r3
 800f994:	88fb      	ldrh	r3, [r7, #6]
 800f996:	0a1b      	lsrs	r3, r3, #8
 800f998:	b29b      	uxth	r3, r3
 800f99a:	b21b      	sxth	r3, r3
 800f99c:	4313      	orrs	r3, r2
 800f99e:	b21b      	sxth	r3, r3
 800f9a0:	b29b      	uxth	r3, r3
}
 800f9a2:	4618      	mov	r0, r3
 800f9a4:	370c      	adds	r7, #12
 800f9a6:	46bd      	mov	sp, r7
 800f9a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9ac:	4770      	bx	lr

0800f9ae <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 800f9ae:	b480      	push	{r7}
 800f9b0:	b083      	sub	sp, #12
 800f9b2:	af00      	add	r7, sp, #0
 800f9b4:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 800f9b6:	687b      	ldr	r3, [r7, #4]
 800f9b8:	061a      	lsls	r2, r3, #24
 800f9ba:	687b      	ldr	r3, [r7, #4]
 800f9bc:	021b      	lsls	r3, r3, #8
 800f9be:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800f9c2:	431a      	orrs	r2, r3
 800f9c4:	687b      	ldr	r3, [r7, #4]
 800f9c6:	0a1b      	lsrs	r3, r3, #8
 800f9c8:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800f9cc:	431a      	orrs	r2, r3
 800f9ce:	687b      	ldr	r3, [r7, #4]
 800f9d0:	0e1b      	lsrs	r3, r3, #24
 800f9d2:	4313      	orrs	r3, r2
}
 800f9d4:	4618      	mov	r0, r3
 800f9d6:	370c      	adds	r7, #12
 800f9d8:	46bd      	mov	sp, r7
 800f9da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9de:	4770      	bx	lr

0800f9e0 <lwip_standard_chksum>:
 * @param len length of data to be summed
 * @return host order (!) lwip checksum (non-inverted Internet sum)
 */
u16_t
lwip_standard_chksum(const void *dataptr, int len)
{
 800f9e0:	b480      	push	{r7}
 800f9e2:	b089      	sub	sp, #36	; 0x24
 800f9e4:	af00      	add	r7, sp, #0
 800f9e6:	6078      	str	r0, [r7, #4]
 800f9e8:	6039      	str	r1, [r7, #0]
  const u8_t *pb = (const u8_t *)dataptr;
 800f9ea:	687b      	ldr	r3, [r7, #4]
 800f9ec:	61fb      	str	r3, [r7, #28]
  const u16_t *ps;
  u16_t t = 0;
 800f9ee:	2300      	movs	r3, #0
 800f9f0:	81fb      	strh	r3, [r7, #14]
  u32_t sum = 0;
 800f9f2:	2300      	movs	r3, #0
 800f9f4:	617b      	str	r3, [r7, #20]
  int odd = ((mem_ptr_t)pb & 1);
 800f9f6:	69fb      	ldr	r3, [r7, #28]
 800f9f8:	f003 0301 	and.w	r3, r3, #1
 800f9fc:	613b      	str	r3, [r7, #16]

  /* Get aligned to u16_t */
  if (odd && len > 0) {
 800f9fe:	693b      	ldr	r3, [r7, #16]
 800fa00:	2b00      	cmp	r3, #0
 800fa02:	d00d      	beq.n	800fa20 <lwip_standard_chksum+0x40>
 800fa04:	683b      	ldr	r3, [r7, #0]
 800fa06:	2b00      	cmp	r3, #0
 800fa08:	dd0a      	ble.n	800fa20 <lwip_standard_chksum+0x40>
    ((u8_t *)&t)[1] = *pb++;
 800fa0a:	69fa      	ldr	r2, [r7, #28]
 800fa0c:	1c53      	adds	r3, r2, #1
 800fa0e:	61fb      	str	r3, [r7, #28]
 800fa10:	f107 030e 	add.w	r3, r7, #14
 800fa14:	3301      	adds	r3, #1
 800fa16:	7812      	ldrb	r2, [r2, #0]
 800fa18:	701a      	strb	r2, [r3, #0]
    len--;
 800fa1a:	683b      	ldr	r3, [r7, #0]
 800fa1c:	3b01      	subs	r3, #1
 800fa1e:	603b      	str	r3, [r7, #0]
  }

  /* Add the bulk of the data */
  ps = (const u16_t *)(const void *)pb;
 800fa20:	69fb      	ldr	r3, [r7, #28]
 800fa22:	61bb      	str	r3, [r7, #24]
  while (len > 1) {
 800fa24:	e00a      	b.n	800fa3c <lwip_standard_chksum+0x5c>
    sum += *ps++;
 800fa26:	69bb      	ldr	r3, [r7, #24]
 800fa28:	1c9a      	adds	r2, r3, #2
 800fa2a:	61ba      	str	r2, [r7, #24]
 800fa2c:	881b      	ldrh	r3, [r3, #0]
 800fa2e:	461a      	mov	r2, r3
 800fa30:	697b      	ldr	r3, [r7, #20]
 800fa32:	4413      	add	r3, r2
 800fa34:	617b      	str	r3, [r7, #20]
    len -= 2;
 800fa36:	683b      	ldr	r3, [r7, #0]
 800fa38:	3b02      	subs	r3, #2
 800fa3a:	603b      	str	r3, [r7, #0]
  while (len > 1) {
 800fa3c:	683b      	ldr	r3, [r7, #0]
 800fa3e:	2b01      	cmp	r3, #1
 800fa40:	dcf1      	bgt.n	800fa26 <lwip_standard_chksum+0x46>
  }

  /* Consume left-over byte, if any */
  if (len > 0) {
 800fa42:	683b      	ldr	r3, [r7, #0]
 800fa44:	2b00      	cmp	r3, #0
 800fa46:	dd04      	ble.n	800fa52 <lwip_standard_chksum+0x72>
    ((u8_t *)&t)[0] = *(const u8_t *)ps;
 800fa48:	f107 030e 	add.w	r3, r7, #14
 800fa4c:	69ba      	ldr	r2, [r7, #24]
 800fa4e:	7812      	ldrb	r2, [r2, #0]
 800fa50:	701a      	strb	r2, [r3, #0]
  }

  /* Add end bytes */
  sum += t;
 800fa52:	89fb      	ldrh	r3, [r7, #14]
 800fa54:	461a      	mov	r2, r3
 800fa56:	697b      	ldr	r3, [r7, #20]
 800fa58:	4413      	add	r3, r2
 800fa5a:	617b      	str	r3, [r7, #20]

  /* Fold 32-bit sum to 16 bits
     calling this twice is probably faster than if statements... */
  sum = FOLD_U32T(sum);
 800fa5c:	697b      	ldr	r3, [r7, #20]
 800fa5e:	0c1a      	lsrs	r2, r3, #16
 800fa60:	697b      	ldr	r3, [r7, #20]
 800fa62:	b29b      	uxth	r3, r3
 800fa64:	4413      	add	r3, r2
 800fa66:	617b      	str	r3, [r7, #20]
  sum = FOLD_U32T(sum);
 800fa68:	697b      	ldr	r3, [r7, #20]
 800fa6a:	0c1a      	lsrs	r2, r3, #16
 800fa6c:	697b      	ldr	r3, [r7, #20]
 800fa6e:	b29b      	uxth	r3, r3
 800fa70:	4413      	add	r3, r2
 800fa72:	617b      	str	r3, [r7, #20]

  /* Swap if alignment was odd */
  if (odd) {
 800fa74:	693b      	ldr	r3, [r7, #16]
 800fa76:	2b00      	cmp	r3, #0
 800fa78:	d007      	beq.n	800fa8a <lwip_standard_chksum+0xaa>
    sum = SWAP_BYTES_IN_WORD(sum);
 800fa7a:	697b      	ldr	r3, [r7, #20]
 800fa7c:	021b      	lsls	r3, r3, #8
 800fa7e:	b29a      	uxth	r2, r3
 800fa80:	697b      	ldr	r3, [r7, #20]
 800fa82:	0a1b      	lsrs	r3, r3, #8
 800fa84:	b2db      	uxtb	r3, r3
 800fa86:	4313      	orrs	r3, r2
 800fa88:	617b      	str	r3, [r7, #20]
  }

  return (u16_t)sum;
 800fa8a:	697b      	ldr	r3, [r7, #20]
 800fa8c:	b29b      	uxth	r3, r3
}
 800fa8e:	4618      	mov	r0, r3
 800fa90:	3724      	adds	r7, #36	; 0x24
 800fa92:	46bd      	mov	sp, r7
 800fa94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa98:	4770      	bx	lr

0800fa9a <inet_chksum>:
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */

u16_t
inet_chksum(const void *dataptr, u16_t len)
{
 800fa9a:	b580      	push	{r7, lr}
 800fa9c:	b082      	sub	sp, #8
 800fa9e:	af00      	add	r7, sp, #0
 800faa0:	6078      	str	r0, [r7, #4]
 800faa2:	460b      	mov	r3, r1
 800faa4:	807b      	strh	r3, [r7, #2]
  return (u16_t)~(unsigned int)LWIP_CHKSUM(dataptr, len);
 800faa6:	887b      	ldrh	r3, [r7, #2]
 800faa8:	4619      	mov	r1, r3
 800faaa:	6878      	ldr	r0, [r7, #4]
 800faac:	f7ff ff98 	bl	800f9e0 <lwip_standard_chksum>
 800fab0:	4603      	mov	r3, r0
 800fab2:	43db      	mvns	r3, r3
 800fab4:	b29b      	uxth	r3, r3
}
 800fab6:	4618      	mov	r0, r3
 800fab8:	3708      	adds	r7, #8
 800faba:	46bd      	mov	sp, r7
 800fabc:	bd80      	pop	{r7, pc}

0800fabe <inet_chksum_pbuf>:
 * @param p pbuf chain over that the checksum should be calculated
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */
u16_t
inet_chksum_pbuf(struct pbuf *p)
{
 800fabe:	b580      	push	{r7, lr}
 800fac0:	b086      	sub	sp, #24
 800fac2:	af00      	add	r7, sp, #0
 800fac4:	6078      	str	r0, [r7, #4]
  u32_t acc;
  struct pbuf *q;
  int swapped = 0;
 800fac6:	2300      	movs	r3, #0
 800fac8:	60fb      	str	r3, [r7, #12]

  acc = 0;
 800faca:	2300      	movs	r3, #0
 800facc:	617b      	str	r3, [r7, #20]
  for (q = p; q != NULL; q = q->next) {
 800face:	687b      	ldr	r3, [r7, #4]
 800fad0:	613b      	str	r3, [r7, #16]
 800fad2:	e02b      	b.n	800fb2c <inet_chksum_pbuf+0x6e>
    acc += LWIP_CHKSUM(q->payload, q->len);
 800fad4:	693b      	ldr	r3, [r7, #16]
 800fad6:	685a      	ldr	r2, [r3, #4]
 800fad8:	693b      	ldr	r3, [r7, #16]
 800fada:	895b      	ldrh	r3, [r3, #10]
 800fadc:	4619      	mov	r1, r3
 800fade:	4610      	mov	r0, r2
 800fae0:	f7ff ff7e 	bl	800f9e0 <lwip_standard_chksum>
 800fae4:	4603      	mov	r3, r0
 800fae6:	461a      	mov	r2, r3
 800fae8:	697b      	ldr	r3, [r7, #20]
 800faea:	4413      	add	r3, r2
 800faec:	617b      	str	r3, [r7, #20]
    acc = FOLD_U32T(acc);
 800faee:	697b      	ldr	r3, [r7, #20]
 800faf0:	0c1a      	lsrs	r2, r3, #16
 800faf2:	697b      	ldr	r3, [r7, #20]
 800faf4:	b29b      	uxth	r3, r3
 800faf6:	4413      	add	r3, r2
 800faf8:	617b      	str	r3, [r7, #20]
    if (q->len % 2 != 0) {
 800fafa:	693b      	ldr	r3, [r7, #16]
 800fafc:	895b      	ldrh	r3, [r3, #10]
 800fafe:	f003 0301 	and.w	r3, r3, #1
 800fb02:	b29b      	uxth	r3, r3
 800fb04:	2b00      	cmp	r3, #0
 800fb06:	d00e      	beq.n	800fb26 <inet_chksum_pbuf+0x68>
      swapped = !swapped;
 800fb08:	68fb      	ldr	r3, [r7, #12]
 800fb0a:	2b00      	cmp	r3, #0
 800fb0c:	bf0c      	ite	eq
 800fb0e:	2301      	moveq	r3, #1
 800fb10:	2300      	movne	r3, #0
 800fb12:	b2db      	uxtb	r3, r3
 800fb14:	60fb      	str	r3, [r7, #12]
      acc = SWAP_BYTES_IN_WORD(acc);
 800fb16:	697b      	ldr	r3, [r7, #20]
 800fb18:	021b      	lsls	r3, r3, #8
 800fb1a:	b29a      	uxth	r2, r3
 800fb1c:	697b      	ldr	r3, [r7, #20]
 800fb1e:	0a1b      	lsrs	r3, r3, #8
 800fb20:	b2db      	uxtb	r3, r3
 800fb22:	4313      	orrs	r3, r2
 800fb24:	617b      	str	r3, [r7, #20]
  for (q = p; q != NULL; q = q->next) {
 800fb26:	693b      	ldr	r3, [r7, #16]
 800fb28:	681b      	ldr	r3, [r3, #0]
 800fb2a:	613b      	str	r3, [r7, #16]
 800fb2c:	693b      	ldr	r3, [r7, #16]
 800fb2e:	2b00      	cmp	r3, #0
 800fb30:	d1d0      	bne.n	800fad4 <inet_chksum_pbuf+0x16>
    }
  }

  if (swapped) {
 800fb32:	68fb      	ldr	r3, [r7, #12]
 800fb34:	2b00      	cmp	r3, #0
 800fb36:	d007      	beq.n	800fb48 <inet_chksum_pbuf+0x8a>
    acc = SWAP_BYTES_IN_WORD(acc);
 800fb38:	697b      	ldr	r3, [r7, #20]
 800fb3a:	021b      	lsls	r3, r3, #8
 800fb3c:	b29a      	uxth	r2, r3
 800fb3e:	697b      	ldr	r3, [r7, #20]
 800fb40:	0a1b      	lsrs	r3, r3, #8
 800fb42:	b2db      	uxtb	r3, r3
 800fb44:	4313      	orrs	r3, r2
 800fb46:	617b      	str	r3, [r7, #20]
  }
  return (u16_t)~(acc & 0xffffUL);
 800fb48:	697b      	ldr	r3, [r7, #20]
 800fb4a:	b29b      	uxth	r3, r3
 800fb4c:	43db      	mvns	r3, r3
 800fb4e:	b29b      	uxth	r3, r3
}
 800fb50:	4618      	mov	r0, r3
 800fb52:	3718      	adds	r7, #24
 800fb54:	46bd      	mov	sp, r7
 800fb56:	bd80      	pop	{r7, pc}

0800fb58 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 800fb58:	b580      	push	{r7, lr}
 800fb5a:	b082      	sub	sp, #8
 800fb5c:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 800fb5e:	2300      	movs	r3, #0
 800fb60:	607b      	str	r3, [r7, #4]
  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
#endif /* !NO_SYS */
  mem_init();
 800fb62:	f000 f8d3 	bl	800fd0c <mem_init>
  memp_init();
 800fb66:	f000 fbc5 	bl	80102f4 <memp_init>
  pbuf_init();
  netif_init();
 800fb6a:	f000 fcc3 	bl	80104f4 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 800fb6e:	f006 ffe3 	bl	8016b38 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 800fb72:	f001 fd79 	bl	8011668 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 800fb76:	f006 ff97 	bl	8016aa8 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 800fb7a:	bf00      	nop
 800fb7c:	3708      	adds	r7, #8
 800fb7e:	46bd      	mov	sp, r7
 800fb80:	bd80      	pop	{r7, pc}
	...

0800fb84 <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 800fb84:	b480      	push	{r7}
 800fb86:	b083      	sub	sp, #12
 800fb88:	af00      	add	r7, sp, #0
 800fb8a:	6078      	str	r0, [r7, #4]
  return (struct mem *)(void *)&ram[ptr];
 800fb8c:	4b04      	ldr	r3, [pc, #16]	; (800fba0 <ptr_to_mem+0x1c>)
 800fb8e:	681a      	ldr	r2, [r3, #0]
 800fb90:	687b      	ldr	r3, [r7, #4]
 800fb92:	4413      	add	r3, r2
}
 800fb94:	4618      	mov	r0, r3
 800fb96:	370c      	adds	r7, #12
 800fb98:	46bd      	mov	sp, r7
 800fb9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb9e:	4770      	bx	lr
 800fba0:	20000810 	.word	0x20000810

0800fba4 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 800fba4:	b480      	push	{r7}
 800fba6:	b083      	sub	sp, #12
 800fba8:	af00      	add	r7, sp, #0
 800fbaa:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 800fbac:	4b04      	ldr	r3, [pc, #16]	; (800fbc0 <mem_to_ptr+0x1c>)
 800fbae:	681b      	ldr	r3, [r3, #0]
 800fbb0:	687a      	ldr	r2, [r7, #4]
 800fbb2:	1ad3      	subs	r3, r2, r3
}
 800fbb4:	4618      	mov	r0, r3
 800fbb6:	370c      	adds	r7, #12
 800fbb8:	46bd      	mov	sp, r7
 800fbba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fbbe:	4770      	bx	lr
 800fbc0:	20000810 	.word	0x20000810

0800fbc4 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 800fbc4:	b590      	push	{r4, r7, lr}
 800fbc6:	b085      	sub	sp, #20
 800fbc8:	af00      	add	r7, sp, #0
 800fbca:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 800fbcc:	4b45      	ldr	r3, [pc, #276]	; (800fce4 <plug_holes+0x120>)
 800fbce:	681b      	ldr	r3, [r3, #0]
 800fbd0:	687a      	ldr	r2, [r7, #4]
 800fbd2:	429a      	cmp	r2, r3
 800fbd4:	d206      	bcs.n	800fbe4 <plug_holes+0x20>
 800fbd6:	4b44      	ldr	r3, [pc, #272]	; (800fce8 <plug_holes+0x124>)
 800fbd8:	f240 12df 	movw	r2, #479	; 0x1df
 800fbdc:	4943      	ldr	r1, [pc, #268]	; (800fcec <plug_holes+0x128>)
 800fbde:	4844      	ldr	r0, [pc, #272]	; (800fcf0 <plug_holes+0x12c>)
 800fbe0:	f00a f98a 	bl	8019ef8 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 800fbe4:	4b43      	ldr	r3, [pc, #268]	; (800fcf4 <plug_holes+0x130>)
 800fbe6:	681b      	ldr	r3, [r3, #0]
 800fbe8:	687a      	ldr	r2, [r7, #4]
 800fbea:	429a      	cmp	r2, r3
 800fbec:	d306      	bcc.n	800fbfc <plug_holes+0x38>
 800fbee:	4b3e      	ldr	r3, [pc, #248]	; (800fce8 <plug_holes+0x124>)
 800fbf0:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800fbf4:	4940      	ldr	r1, [pc, #256]	; (800fcf8 <plug_holes+0x134>)
 800fbf6:	483e      	ldr	r0, [pc, #248]	; (800fcf0 <plug_holes+0x12c>)
 800fbf8:	f00a f97e 	bl	8019ef8 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 800fbfc:	687b      	ldr	r3, [r7, #4]
 800fbfe:	7a1b      	ldrb	r3, [r3, #8]
 800fc00:	2b00      	cmp	r3, #0
 800fc02:	d006      	beq.n	800fc12 <plug_holes+0x4e>
 800fc04:	4b38      	ldr	r3, [pc, #224]	; (800fce8 <plug_holes+0x124>)
 800fc06:	f240 12e1 	movw	r2, #481	; 0x1e1
 800fc0a:	493c      	ldr	r1, [pc, #240]	; (800fcfc <plug_holes+0x138>)
 800fc0c:	4838      	ldr	r0, [pc, #224]	; (800fcf0 <plug_holes+0x12c>)
 800fc0e:	f00a f973 	bl	8019ef8 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 800fc12:	687b      	ldr	r3, [r7, #4]
 800fc14:	681b      	ldr	r3, [r3, #0]
 800fc16:	4a3a      	ldr	r2, [pc, #232]	; (800fd00 <plug_holes+0x13c>)
 800fc18:	4293      	cmp	r3, r2
 800fc1a:	d906      	bls.n	800fc2a <plug_holes+0x66>
 800fc1c:	4b32      	ldr	r3, [pc, #200]	; (800fce8 <plug_holes+0x124>)
 800fc1e:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 800fc22:	4938      	ldr	r1, [pc, #224]	; (800fd04 <plug_holes+0x140>)
 800fc24:	4832      	ldr	r0, [pc, #200]	; (800fcf0 <plug_holes+0x12c>)
 800fc26:	f00a f967 	bl	8019ef8 <iprintf>

  nmem = ptr_to_mem(mem->next);
 800fc2a:	687b      	ldr	r3, [r7, #4]
 800fc2c:	681b      	ldr	r3, [r3, #0]
 800fc2e:	4618      	mov	r0, r3
 800fc30:	f7ff ffa8 	bl	800fb84 <ptr_to_mem>
 800fc34:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 800fc36:	687a      	ldr	r2, [r7, #4]
 800fc38:	68fb      	ldr	r3, [r7, #12]
 800fc3a:	429a      	cmp	r2, r3
 800fc3c:	d024      	beq.n	800fc88 <plug_holes+0xc4>
 800fc3e:	68fb      	ldr	r3, [r7, #12]
 800fc40:	7a1b      	ldrb	r3, [r3, #8]
 800fc42:	2b00      	cmp	r3, #0
 800fc44:	d120      	bne.n	800fc88 <plug_holes+0xc4>
 800fc46:	4b2b      	ldr	r3, [pc, #172]	; (800fcf4 <plug_holes+0x130>)
 800fc48:	681b      	ldr	r3, [r3, #0]
 800fc4a:	68fa      	ldr	r2, [r7, #12]
 800fc4c:	429a      	cmp	r2, r3
 800fc4e:	d01b      	beq.n	800fc88 <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 800fc50:	4b2d      	ldr	r3, [pc, #180]	; (800fd08 <plug_holes+0x144>)
 800fc52:	681b      	ldr	r3, [r3, #0]
 800fc54:	68fa      	ldr	r2, [r7, #12]
 800fc56:	429a      	cmp	r2, r3
 800fc58:	d102      	bne.n	800fc60 <plug_holes+0x9c>
      lfree = mem;
 800fc5a:	4a2b      	ldr	r2, [pc, #172]	; (800fd08 <plug_holes+0x144>)
 800fc5c:	687b      	ldr	r3, [r7, #4]
 800fc5e:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 800fc60:	68fb      	ldr	r3, [r7, #12]
 800fc62:	681a      	ldr	r2, [r3, #0]
 800fc64:	687b      	ldr	r3, [r7, #4]
 800fc66:	601a      	str	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 800fc68:	68fb      	ldr	r3, [r7, #12]
 800fc6a:	681b      	ldr	r3, [r3, #0]
 800fc6c:	4a24      	ldr	r2, [pc, #144]	; (800fd00 <plug_holes+0x13c>)
 800fc6e:	4293      	cmp	r3, r2
 800fc70:	d00a      	beq.n	800fc88 <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 800fc72:	68fb      	ldr	r3, [r7, #12]
 800fc74:	681b      	ldr	r3, [r3, #0]
 800fc76:	4618      	mov	r0, r3
 800fc78:	f7ff ff84 	bl	800fb84 <ptr_to_mem>
 800fc7c:	4604      	mov	r4, r0
 800fc7e:	6878      	ldr	r0, [r7, #4]
 800fc80:	f7ff ff90 	bl	800fba4 <mem_to_ptr>
 800fc84:	4603      	mov	r3, r0
 800fc86:	6063      	str	r3, [r4, #4]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 800fc88:	687b      	ldr	r3, [r7, #4]
 800fc8a:	685b      	ldr	r3, [r3, #4]
 800fc8c:	4618      	mov	r0, r3
 800fc8e:	f7ff ff79 	bl	800fb84 <ptr_to_mem>
 800fc92:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 800fc94:	68ba      	ldr	r2, [r7, #8]
 800fc96:	687b      	ldr	r3, [r7, #4]
 800fc98:	429a      	cmp	r2, r3
 800fc9a:	d01f      	beq.n	800fcdc <plug_holes+0x118>
 800fc9c:	68bb      	ldr	r3, [r7, #8]
 800fc9e:	7a1b      	ldrb	r3, [r3, #8]
 800fca0:	2b00      	cmp	r3, #0
 800fca2:	d11b      	bne.n	800fcdc <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 800fca4:	4b18      	ldr	r3, [pc, #96]	; (800fd08 <plug_holes+0x144>)
 800fca6:	681b      	ldr	r3, [r3, #0]
 800fca8:	687a      	ldr	r2, [r7, #4]
 800fcaa:	429a      	cmp	r2, r3
 800fcac:	d102      	bne.n	800fcb4 <plug_holes+0xf0>
      lfree = pmem;
 800fcae:	4a16      	ldr	r2, [pc, #88]	; (800fd08 <plug_holes+0x144>)
 800fcb0:	68bb      	ldr	r3, [r7, #8]
 800fcb2:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 800fcb4:	687b      	ldr	r3, [r7, #4]
 800fcb6:	681a      	ldr	r2, [r3, #0]
 800fcb8:	68bb      	ldr	r3, [r7, #8]
 800fcba:	601a      	str	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 800fcbc:	687b      	ldr	r3, [r7, #4]
 800fcbe:	681b      	ldr	r3, [r3, #0]
 800fcc0:	4a0f      	ldr	r2, [pc, #60]	; (800fd00 <plug_holes+0x13c>)
 800fcc2:	4293      	cmp	r3, r2
 800fcc4:	d00a      	beq.n	800fcdc <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 800fcc6:	687b      	ldr	r3, [r7, #4]
 800fcc8:	681b      	ldr	r3, [r3, #0]
 800fcca:	4618      	mov	r0, r3
 800fccc:	f7ff ff5a 	bl	800fb84 <ptr_to_mem>
 800fcd0:	4604      	mov	r4, r0
 800fcd2:	68b8      	ldr	r0, [r7, #8]
 800fcd4:	f7ff ff66 	bl	800fba4 <mem_to_ptr>
 800fcd8:	4603      	mov	r3, r0
 800fcda:	6063      	str	r3, [r4, #4]
    }
  }
}
 800fcdc:	bf00      	nop
 800fcde:	3714      	adds	r7, #20
 800fce0:	46bd      	mov	sp, r7
 800fce2:	bd90      	pop	{r4, r7, pc}
 800fce4:	20000810 	.word	0x20000810
 800fce8:	0801caa0 	.word	0x0801caa0
 800fcec:	0801cad0 	.word	0x0801cad0
 800fcf0:	0801cae8 	.word	0x0801cae8
 800fcf4:	20000814 	.word	0x20000814
 800fcf8:	0801cb10 	.word	0x0801cb10
 800fcfc:	0801cb2c 	.word	0x0801cb2c
 800fd00:	0001ffe8 	.word	0x0001ffe8
 800fd04:	0801cb48 	.word	0x0801cb48
 800fd08:	20000818 	.word	0x20000818

0800fd0c <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 800fd0c:	b580      	push	{r7, lr}
 800fd0e:	b082      	sub	sp, #8
 800fd10:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 800fd12:	4b14      	ldr	r3, [pc, #80]	; (800fd64 <mem_init+0x58>)
 800fd14:	4a14      	ldr	r2, [pc, #80]	; (800fd68 <mem_init+0x5c>)
 800fd16:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 800fd18:	4b12      	ldr	r3, [pc, #72]	; (800fd64 <mem_init+0x58>)
 800fd1a:	681b      	ldr	r3, [r3, #0]
 800fd1c:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 800fd1e:	687b      	ldr	r3, [r7, #4]
 800fd20:	4a12      	ldr	r2, [pc, #72]	; (800fd6c <mem_init+0x60>)
 800fd22:	601a      	str	r2, [r3, #0]
  mem->prev = 0;
 800fd24:	687b      	ldr	r3, [r7, #4]
 800fd26:	2200      	movs	r2, #0
 800fd28:	605a      	str	r2, [r3, #4]
  mem->used = 0;
 800fd2a:	687b      	ldr	r3, [r7, #4]
 800fd2c:	2200      	movs	r2, #0
 800fd2e:	721a      	strb	r2, [r3, #8]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 800fd30:	480e      	ldr	r0, [pc, #56]	; (800fd6c <mem_init+0x60>)
 800fd32:	f7ff ff27 	bl	800fb84 <ptr_to_mem>
 800fd36:	4603      	mov	r3, r0
 800fd38:	4a0d      	ldr	r2, [pc, #52]	; (800fd70 <mem_init+0x64>)
 800fd3a:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 800fd3c:	4b0c      	ldr	r3, [pc, #48]	; (800fd70 <mem_init+0x64>)
 800fd3e:	681b      	ldr	r3, [r3, #0]
 800fd40:	2201      	movs	r2, #1
 800fd42:	721a      	strb	r2, [r3, #8]
  ram_end->next = MEM_SIZE_ALIGNED;
 800fd44:	4b0a      	ldr	r3, [pc, #40]	; (800fd70 <mem_init+0x64>)
 800fd46:	681b      	ldr	r3, [r3, #0]
 800fd48:	4a08      	ldr	r2, [pc, #32]	; (800fd6c <mem_init+0x60>)
 800fd4a:	601a      	str	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 800fd4c:	4b08      	ldr	r3, [pc, #32]	; (800fd70 <mem_init+0x64>)
 800fd4e:	681b      	ldr	r3, [r3, #0]
 800fd50:	4a06      	ldr	r2, [pc, #24]	; (800fd6c <mem_init+0x60>)
 800fd52:	605a      	str	r2, [r3, #4]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 800fd54:	4b03      	ldr	r3, [pc, #12]	; (800fd64 <mem_init+0x58>)
 800fd56:	681b      	ldr	r3, [r3, #0]
 800fd58:	4a06      	ldr	r2, [pc, #24]	; (800fd74 <mem_init+0x68>)
 800fd5a:	6013      	str	r3, [r2, #0]
  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
    LWIP_ASSERT("failed to create mem_mutex", 0);
  }
}
 800fd5c:	bf00      	nop
 800fd5e:	3708      	adds	r7, #8
 800fd60:	46bd      	mov	sp, r7
 800fd62:	bd80      	pop	{r7, pc}
 800fd64:	20000810 	.word	0x20000810
 800fd68:	30020000 	.word	0x30020000
 800fd6c:	0001ffe8 	.word	0x0001ffe8
 800fd70:	20000814 	.word	0x20000814
 800fd74:	20000818 	.word	0x20000818

0800fd78 <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 800fd78:	b580      	push	{r7, lr}
 800fd7a:	b086      	sub	sp, #24
 800fd7c:	af00      	add	r7, sp, #0
 800fd7e:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 800fd80:	6878      	ldr	r0, [r7, #4]
 800fd82:	f7ff ff0f 	bl	800fba4 <mem_to_ptr>
 800fd86:	6178      	str	r0, [r7, #20]
  nmem = ptr_to_mem(mem->next);
 800fd88:	687b      	ldr	r3, [r7, #4]
 800fd8a:	681b      	ldr	r3, [r3, #0]
 800fd8c:	4618      	mov	r0, r3
 800fd8e:	f7ff fef9 	bl	800fb84 <ptr_to_mem>
 800fd92:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 800fd94:	687b      	ldr	r3, [r7, #4]
 800fd96:	685b      	ldr	r3, [r3, #4]
 800fd98:	4618      	mov	r0, r3
 800fd9a:	f7ff fef3 	bl	800fb84 <ptr_to_mem>
 800fd9e:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800fda0:	687b      	ldr	r3, [r7, #4]
 800fda2:	681b      	ldr	r3, [r3, #0]
 800fda4:	4a11      	ldr	r2, [pc, #68]	; (800fdec <mem_link_valid+0x74>)
 800fda6:	4293      	cmp	r3, r2
 800fda8:	d818      	bhi.n	800fddc <mem_link_valid+0x64>
 800fdaa:	687b      	ldr	r3, [r7, #4]
 800fdac:	685b      	ldr	r3, [r3, #4]
 800fdae:	4a0f      	ldr	r2, [pc, #60]	; (800fdec <mem_link_valid+0x74>)
 800fdb0:	4293      	cmp	r3, r2
 800fdb2:	d813      	bhi.n	800fddc <mem_link_valid+0x64>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800fdb4:	687b      	ldr	r3, [r7, #4]
 800fdb6:	685b      	ldr	r3, [r3, #4]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800fdb8:	697a      	ldr	r2, [r7, #20]
 800fdba:	429a      	cmp	r2, r3
 800fdbc:	d004      	beq.n	800fdc8 <mem_link_valid+0x50>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800fdbe:	68fb      	ldr	r3, [r7, #12]
 800fdc0:	681b      	ldr	r3, [r3, #0]
 800fdc2:	697a      	ldr	r2, [r7, #20]
 800fdc4:	429a      	cmp	r2, r3
 800fdc6:	d109      	bne.n	800fddc <mem_link_valid+0x64>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800fdc8:	4b09      	ldr	r3, [pc, #36]	; (800fdf0 <mem_link_valid+0x78>)
 800fdca:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800fdcc:	693a      	ldr	r2, [r7, #16]
 800fdce:	429a      	cmp	r2, r3
 800fdd0:	d006      	beq.n	800fde0 <mem_link_valid+0x68>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800fdd2:	693b      	ldr	r3, [r7, #16]
 800fdd4:	685b      	ldr	r3, [r3, #4]
 800fdd6:	697a      	ldr	r2, [r7, #20]
 800fdd8:	429a      	cmp	r2, r3
 800fdda:	d001      	beq.n	800fde0 <mem_link_valid+0x68>
    return 0;
 800fddc:	2300      	movs	r3, #0
 800fdde:	e000      	b.n	800fde2 <mem_link_valid+0x6a>
  }
  return 1;
 800fde0:	2301      	movs	r3, #1
}
 800fde2:	4618      	mov	r0, r3
 800fde4:	3718      	adds	r7, #24
 800fde6:	46bd      	mov	sp, r7
 800fde8:	bd80      	pop	{r7, pc}
 800fdea:	bf00      	nop
 800fdec:	0001ffe8 	.word	0x0001ffe8
 800fdf0:	20000814 	.word	0x20000814

0800fdf4 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 800fdf4:	b580      	push	{r7, lr}
 800fdf6:	b084      	sub	sp, #16
 800fdf8:	af00      	add	r7, sp, #0
 800fdfa:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 800fdfc:	687b      	ldr	r3, [r7, #4]
 800fdfe:	2b00      	cmp	r3, #0
 800fe00:	d04c      	beq.n	800fe9c <mem_free+0xa8>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 800fe02:	687b      	ldr	r3, [r7, #4]
 800fe04:	f003 0303 	and.w	r3, r3, #3
 800fe08:	2b00      	cmp	r3, #0
 800fe0a:	d007      	beq.n	800fe1c <mem_free+0x28>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 800fe0c:	4b25      	ldr	r3, [pc, #148]	; (800fea4 <mem_free+0xb0>)
 800fe0e:	f240 2273 	movw	r2, #627	; 0x273
 800fe12:	4925      	ldr	r1, [pc, #148]	; (800fea8 <mem_free+0xb4>)
 800fe14:	4825      	ldr	r0, [pc, #148]	; (800feac <mem_free+0xb8>)
 800fe16:	f00a f86f 	bl	8019ef8 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 800fe1a:	e040      	b.n	800fe9e <mem_free+0xaa>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800fe1c:	687b      	ldr	r3, [r7, #4]
 800fe1e:	3b0c      	subs	r3, #12
 800fe20:	60fb      	str	r3, [r7, #12]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 800fe22:	4b23      	ldr	r3, [pc, #140]	; (800feb0 <mem_free+0xbc>)
 800fe24:	681b      	ldr	r3, [r3, #0]
 800fe26:	68fa      	ldr	r2, [r7, #12]
 800fe28:	429a      	cmp	r2, r3
 800fe2a:	d306      	bcc.n	800fe3a <mem_free+0x46>
 800fe2c:	687b      	ldr	r3, [r7, #4]
 800fe2e:	f103 020c 	add.w	r2, r3, #12
 800fe32:	4b20      	ldr	r3, [pc, #128]	; (800feb4 <mem_free+0xc0>)
 800fe34:	681b      	ldr	r3, [r3, #0]
 800fe36:	429a      	cmp	r2, r3
 800fe38:	d907      	bls.n	800fe4a <mem_free+0x56>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 800fe3a:	4b1a      	ldr	r3, [pc, #104]	; (800fea4 <mem_free+0xb0>)
 800fe3c:	f240 227f 	movw	r2, #639	; 0x27f
 800fe40:	491d      	ldr	r1, [pc, #116]	; (800feb8 <mem_free+0xc4>)
 800fe42:	481a      	ldr	r0, [pc, #104]	; (800feac <mem_free+0xb8>)
 800fe44:	f00a f858 	bl	8019ef8 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 800fe48:	e029      	b.n	800fe9e <mem_free+0xaa>
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
  /* mem has to be in a used state */
  if (!mem->used) {
 800fe4a:	68fb      	ldr	r3, [r7, #12]
 800fe4c:	7a1b      	ldrb	r3, [r3, #8]
 800fe4e:	2b00      	cmp	r3, #0
 800fe50:	d107      	bne.n	800fe62 <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 800fe52:	4b14      	ldr	r3, [pc, #80]	; (800fea4 <mem_free+0xb0>)
 800fe54:	f44f 7223 	mov.w	r2, #652	; 0x28c
 800fe58:	4918      	ldr	r1, [pc, #96]	; (800febc <mem_free+0xc8>)
 800fe5a:	4814      	ldr	r0, [pc, #80]	; (800feac <mem_free+0xb8>)
 800fe5c:	f00a f84c 	bl	8019ef8 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 800fe60:	e01d      	b.n	800fe9e <mem_free+0xaa>
  }

  if (!mem_link_valid(mem)) {
 800fe62:	68f8      	ldr	r0, [r7, #12]
 800fe64:	f7ff ff88 	bl	800fd78 <mem_link_valid>
 800fe68:	4603      	mov	r3, r0
 800fe6a:	2b00      	cmp	r3, #0
 800fe6c:	d107      	bne.n	800fe7e <mem_free+0x8a>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 800fe6e:	4b0d      	ldr	r3, [pc, #52]	; (800fea4 <mem_free+0xb0>)
 800fe70:	f240 2295 	movw	r2, #661	; 0x295
 800fe74:	4912      	ldr	r1, [pc, #72]	; (800fec0 <mem_free+0xcc>)
 800fe76:	480d      	ldr	r0, [pc, #52]	; (800feac <mem_free+0xb8>)
 800fe78:	f00a f83e 	bl	8019ef8 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 800fe7c:	e00f      	b.n	800fe9e <mem_free+0xaa>
  }

  /* mem is now unused. */
  mem->used = 0;
 800fe7e:	68fb      	ldr	r3, [r7, #12]
 800fe80:	2200      	movs	r2, #0
 800fe82:	721a      	strb	r2, [r3, #8]

  if (mem < lfree) {
 800fe84:	4b0f      	ldr	r3, [pc, #60]	; (800fec4 <mem_free+0xd0>)
 800fe86:	681b      	ldr	r3, [r3, #0]
 800fe88:	68fa      	ldr	r2, [r7, #12]
 800fe8a:	429a      	cmp	r2, r3
 800fe8c:	d202      	bcs.n	800fe94 <mem_free+0xa0>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 800fe8e:	4a0d      	ldr	r2, [pc, #52]	; (800fec4 <mem_free+0xd0>)
 800fe90:	68fb      	ldr	r3, [r7, #12]
 800fe92:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 800fe94:	68f8      	ldr	r0, [r7, #12]
 800fe96:	f7ff fe95 	bl	800fbc4 <plug_holes>
 800fe9a:	e000      	b.n	800fe9e <mem_free+0xaa>
    return;
 800fe9c:	bf00      	nop
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
}
 800fe9e:	3710      	adds	r7, #16
 800fea0:	46bd      	mov	sp, r7
 800fea2:	bd80      	pop	{r7, pc}
 800fea4:	0801caa0 	.word	0x0801caa0
 800fea8:	0801cb74 	.word	0x0801cb74
 800feac:	0801cae8 	.word	0x0801cae8
 800feb0:	20000810 	.word	0x20000810
 800feb4:	20000814 	.word	0x20000814
 800feb8:	0801cb98 	.word	0x0801cb98
 800febc:	0801cbb4 	.word	0x0801cbb4
 800fec0:	0801cbdc 	.word	0x0801cbdc
 800fec4:	20000818 	.word	0x20000818

0800fec8 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 800fec8:	b580      	push	{r7, lr}
 800feca:	b08a      	sub	sp, #40	; 0x28
 800fecc:	af00      	add	r7, sp, #0
 800fece:	6078      	str	r0, [r7, #4]
 800fed0:	6039      	str	r1, [r7, #0]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 800fed2:	683b      	ldr	r3, [r7, #0]
 800fed4:	3303      	adds	r3, #3
 800fed6:	f023 0303 	bic.w	r3, r3, #3
 800feda:	627b      	str	r3, [r7, #36]	; 0x24
  if (newsize < MIN_SIZE_ALIGNED) {
 800fedc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fede:	2b0b      	cmp	r3, #11
 800fee0:	d801      	bhi.n	800fee6 <mem_trim+0x1e>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 800fee2:	230c      	movs	r3, #12
 800fee4:	627b      	str	r3, [r7, #36]	; 0x24
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 800fee6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fee8:	4a68      	ldr	r2, [pc, #416]	; (801008c <mem_trim+0x1c4>)
 800feea:	4293      	cmp	r3, r2
 800feec:	d803      	bhi.n	800fef6 <mem_trim+0x2e>
 800feee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800fef0:	683b      	ldr	r3, [r7, #0]
 800fef2:	429a      	cmp	r2, r3
 800fef4:	d201      	bcs.n	800fefa <mem_trim+0x32>
    return NULL;
 800fef6:	2300      	movs	r3, #0
 800fef8:	e0c4      	b.n	8010084 <mem_trim+0x1bc>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 800fefa:	4b65      	ldr	r3, [pc, #404]	; (8010090 <mem_trim+0x1c8>)
 800fefc:	681b      	ldr	r3, [r3, #0]
 800fefe:	687a      	ldr	r2, [r7, #4]
 800ff00:	429a      	cmp	r2, r3
 800ff02:	d304      	bcc.n	800ff0e <mem_trim+0x46>
 800ff04:	4b63      	ldr	r3, [pc, #396]	; (8010094 <mem_trim+0x1cc>)
 800ff06:	681b      	ldr	r3, [r3, #0]
 800ff08:	687a      	ldr	r2, [r7, #4]
 800ff0a:	429a      	cmp	r2, r3
 800ff0c:	d306      	bcc.n	800ff1c <mem_trim+0x54>
 800ff0e:	4b62      	ldr	r3, [pc, #392]	; (8010098 <mem_trim+0x1d0>)
 800ff10:	f240 22d1 	movw	r2, #721	; 0x2d1
 800ff14:	4961      	ldr	r1, [pc, #388]	; (801009c <mem_trim+0x1d4>)
 800ff16:	4862      	ldr	r0, [pc, #392]	; (80100a0 <mem_trim+0x1d8>)
 800ff18:	f009 ffee 	bl	8019ef8 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 800ff1c:	4b5c      	ldr	r3, [pc, #368]	; (8010090 <mem_trim+0x1c8>)
 800ff1e:	681b      	ldr	r3, [r3, #0]
 800ff20:	687a      	ldr	r2, [r7, #4]
 800ff22:	429a      	cmp	r2, r3
 800ff24:	d304      	bcc.n	800ff30 <mem_trim+0x68>
 800ff26:	4b5b      	ldr	r3, [pc, #364]	; (8010094 <mem_trim+0x1cc>)
 800ff28:	681b      	ldr	r3, [r3, #0]
 800ff2a:	687a      	ldr	r2, [r7, #4]
 800ff2c:	429a      	cmp	r2, r3
 800ff2e:	d301      	bcc.n	800ff34 <mem_trim+0x6c>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return rmem;
 800ff30:	687b      	ldr	r3, [r7, #4]
 800ff32:	e0a7      	b.n	8010084 <mem_trim+0x1bc>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800ff34:	687b      	ldr	r3, [r7, #4]
 800ff36:	3b0c      	subs	r3, #12
 800ff38:	623b      	str	r3, [r7, #32]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 800ff3a:	6a38      	ldr	r0, [r7, #32]
 800ff3c:	f7ff fe32 	bl	800fba4 <mem_to_ptr>
 800ff40:	61f8      	str	r0, [r7, #28]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 800ff42:	6a3b      	ldr	r3, [r7, #32]
 800ff44:	681a      	ldr	r2, [r3, #0]
 800ff46:	69fb      	ldr	r3, [r7, #28]
 800ff48:	1ad3      	subs	r3, r2, r3
 800ff4a:	3b0c      	subs	r3, #12
 800ff4c:	61bb      	str	r3, [r7, #24]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 800ff4e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ff50:	69bb      	ldr	r3, [r7, #24]
 800ff52:	429a      	cmp	r2, r3
 800ff54:	d906      	bls.n	800ff64 <mem_trim+0x9c>
 800ff56:	4b50      	ldr	r3, [pc, #320]	; (8010098 <mem_trim+0x1d0>)
 800ff58:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 800ff5c:	4951      	ldr	r1, [pc, #324]	; (80100a4 <mem_trim+0x1dc>)
 800ff5e:	4850      	ldr	r0, [pc, #320]	; (80100a0 <mem_trim+0x1d8>)
 800ff60:	f009 ffca 	bl	8019ef8 <iprintf>
  if (newsize > size) {
 800ff64:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ff66:	69bb      	ldr	r3, [r7, #24]
 800ff68:	429a      	cmp	r2, r3
 800ff6a:	d901      	bls.n	800ff70 <mem_trim+0xa8>
    /* not supported */
    return NULL;
 800ff6c:	2300      	movs	r3, #0
 800ff6e:	e089      	b.n	8010084 <mem_trim+0x1bc>
  }
  if (newsize == size) {
 800ff70:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ff72:	69bb      	ldr	r3, [r7, #24]
 800ff74:	429a      	cmp	r2, r3
 800ff76:	d101      	bne.n	800ff7c <mem_trim+0xb4>
    /* No change in size, simply return */
    return rmem;
 800ff78:	687b      	ldr	r3, [r7, #4]
 800ff7a:	e083      	b.n	8010084 <mem_trim+0x1bc>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();

  mem2 = ptr_to_mem(mem->next);
 800ff7c:	6a3b      	ldr	r3, [r7, #32]
 800ff7e:	681b      	ldr	r3, [r3, #0]
 800ff80:	4618      	mov	r0, r3
 800ff82:	f7ff fdff 	bl	800fb84 <ptr_to_mem>
 800ff86:	6178      	str	r0, [r7, #20]
  if (mem2->used == 0) {
 800ff88:	697b      	ldr	r3, [r7, #20]
 800ff8a:	7a1b      	ldrb	r3, [r3, #8]
 800ff8c:	2b00      	cmp	r3, #0
 800ff8e:	d13c      	bne.n	801000a <mem_trim+0x142>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800ff90:	6a3b      	ldr	r3, [r7, #32]
 800ff92:	681b      	ldr	r3, [r3, #0]
 800ff94:	4a3d      	ldr	r2, [pc, #244]	; (801008c <mem_trim+0x1c4>)
 800ff96:	4293      	cmp	r3, r2
 800ff98:	d106      	bne.n	800ffa8 <mem_trim+0xe0>
 800ff9a:	4b3f      	ldr	r3, [pc, #252]	; (8010098 <mem_trim+0x1d0>)
 800ff9c:	f240 22f5 	movw	r2, #757	; 0x2f5
 800ffa0:	4941      	ldr	r1, [pc, #260]	; (80100a8 <mem_trim+0x1e0>)
 800ffa2:	483f      	ldr	r0, [pc, #252]	; (80100a0 <mem_trim+0x1d8>)
 800ffa4:	f009 ffa8 	bl	8019ef8 <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 800ffa8:	697b      	ldr	r3, [r7, #20]
 800ffaa:	681b      	ldr	r3, [r3, #0]
 800ffac:	60fb      	str	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800ffae:	69fa      	ldr	r2, [r7, #28]
 800ffb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ffb2:	4413      	add	r3, r2
 800ffb4:	330c      	adds	r3, #12
 800ffb6:	613b      	str	r3, [r7, #16]
    if (lfree == mem2) {
 800ffb8:	4b3c      	ldr	r3, [pc, #240]	; (80100ac <mem_trim+0x1e4>)
 800ffba:	681b      	ldr	r3, [r3, #0]
 800ffbc:	697a      	ldr	r2, [r7, #20]
 800ffbe:	429a      	cmp	r2, r3
 800ffc0:	d105      	bne.n	800ffce <mem_trim+0x106>
      lfree = ptr_to_mem(ptr2);
 800ffc2:	6938      	ldr	r0, [r7, #16]
 800ffc4:	f7ff fdde 	bl	800fb84 <ptr_to_mem>
 800ffc8:	4603      	mov	r3, r0
 800ffca:	4a38      	ldr	r2, [pc, #224]	; (80100ac <mem_trim+0x1e4>)
 800ffcc:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 800ffce:	6938      	ldr	r0, [r7, #16]
 800ffd0:	f7ff fdd8 	bl	800fb84 <ptr_to_mem>
 800ffd4:	6178      	str	r0, [r7, #20]
    mem2->used = 0;
 800ffd6:	697b      	ldr	r3, [r7, #20]
 800ffd8:	2200      	movs	r2, #0
 800ffda:	721a      	strb	r2, [r3, #8]
    /* restore the next pointer */
    mem2->next = next;
 800ffdc:	697b      	ldr	r3, [r7, #20]
 800ffde:	68fa      	ldr	r2, [r7, #12]
 800ffe0:	601a      	str	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 800ffe2:	697b      	ldr	r3, [r7, #20]
 800ffe4:	69fa      	ldr	r2, [r7, #28]
 800ffe6:	605a      	str	r2, [r3, #4]
    /* link mem to it */
    mem->next = ptr2;
 800ffe8:	6a3b      	ldr	r3, [r7, #32]
 800ffea:	693a      	ldr	r2, [r7, #16]
 800ffec:	601a      	str	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800ffee:	697b      	ldr	r3, [r7, #20]
 800fff0:	681b      	ldr	r3, [r3, #0]
 800fff2:	4a26      	ldr	r2, [pc, #152]	; (801008c <mem_trim+0x1c4>)
 800fff4:	4293      	cmp	r3, r2
 800fff6:	d044      	beq.n	8010082 <mem_trim+0x1ba>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800fff8:	697b      	ldr	r3, [r7, #20]
 800fffa:	681b      	ldr	r3, [r3, #0]
 800fffc:	4618      	mov	r0, r3
 800fffe:	f7ff fdc1 	bl	800fb84 <ptr_to_mem>
 8010002:	4602      	mov	r2, r0
 8010004:	693b      	ldr	r3, [r7, #16]
 8010006:	6053      	str	r3, [r2, #4]
 8010008:	e03b      	b.n	8010082 <mem_trim+0x1ba>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 801000a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801000c:	3318      	adds	r3, #24
 801000e:	69ba      	ldr	r2, [r7, #24]
 8010010:	429a      	cmp	r2, r3
 8010012:	d336      	bcc.n	8010082 <mem_trim+0x1ba>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8010014:	69fa      	ldr	r2, [r7, #28]
 8010016:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010018:	4413      	add	r3, r2
 801001a:	330c      	adds	r3, #12
 801001c:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 801001e:	6a3b      	ldr	r3, [r7, #32]
 8010020:	681b      	ldr	r3, [r3, #0]
 8010022:	4a1a      	ldr	r2, [pc, #104]	; (801008c <mem_trim+0x1c4>)
 8010024:	4293      	cmp	r3, r2
 8010026:	d106      	bne.n	8010036 <mem_trim+0x16e>
 8010028:	4b1b      	ldr	r3, [pc, #108]	; (8010098 <mem_trim+0x1d0>)
 801002a:	f240 3216 	movw	r2, #790	; 0x316
 801002e:	491e      	ldr	r1, [pc, #120]	; (80100a8 <mem_trim+0x1e0>)
 8010030:	481b      	ldr	r0, [pc, #108]	; (80100a0 <mem_trim+0x1d8>)
 8010032:	f009 ff61 	bl	8019ef8 <iprintf>
    mem2 = ptr_to_mem(ptr2);
 8010036:	6938      	ldr	r0, [r7, #16]
 8010038:	f7ff fda4 	bl	800fb84 <ptr_to_mem>
 801003c:	6178      	str	r0, [r7, #20]
    if (mem2 < lfree) {
 801003e:	4b1b      	ldr	r3, [pc, #108]	; (80100ac <mem_trim+0x1e4>)
 8010040:	681b      	ldr	r3, [r3, #0]
 8010042:	697a      	ldr	r2, [r7, #20]
 8010044:	429a      	cmp	r2, r3
 8010046:	d202      	bcs.n	801004e <mem_trim+0x186>
      lfree = mem2;
 8010048:	4a18      	ldr	r2, [pc, #96]	; (80100ac <mem_trim+0x1e4>)
 801004a:	697b      	ldr	r3, [r7, #20]
 801004c:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 801004e:	697b      	ldr	r3, [r7, #20]
 8010050:	2200      	movs	r2, #0
 8010052:	721a      	strb	r2, [r3, #8]
    mem2->next = mem->next;
 8010054:	6a3b      	ldr	r3, [r7, #32]
 8010056:	681a      	ldr	r2, [r3, #0]
 8010058:	697b      	ldr	r3, [r7, #20]
 801005a:	601a      	str	r2, [r3, #0]
    mem2->prev = ptr;
 801005c:	697b      	ldr	r3, [r7, #20]
 801005e:	69fa      	ldr	r2, [r7, #28]
 8010060:	605a      	str	r2, [r3, #4]
    mem->next = ptr2;
 8010062:	6a3b      	ldr	r3, [r7, #32]
 8010064:	693a      	ldr	r2, [r7, #16]
 8010066:	601a      	str	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8010068:	697b      	ldr	r3, [r7, #20]
 801006a:	681b      	ldr	r3, [r3, #0]
 801006c:	4a07      	ldr	r2, [pc, #28]	; (801008c <mem_trim+0x1c4>)
 801006e:	4293      	cmp	r3, r2
 8010070:	d007      	beq.n	8010082 <mem_trim+0x1ba>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8010072:	697b      	ldr	r3, [r7, #20]
 8010074:	681b      	ldr	r3, [r3, #0]
 8010076:	4618      	mov	r0, r3
 8010078:	f7ff fd84 	bl	800fb84 <ptr_to_mem>
 801007c:	4602      	mov	r2, r0
 801007e:	693b      	ldr	r3, [r7, #16]
 8010080:	6053      	str	r3, [r2, #4]
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
  return rmem;
 8010082:	687b      	ldr	r3, [r7, #4]
}
 8010084:	4618      	mov	r0, r3
 8010086:	3728      	adds	r7, #40	; 0x28
 8010088:	46bd      	mov	sp, r7
 801008a:	bd80      	pop	{r7, pc}
 801008c:	0001ffe8 	.word	0x0001ffe8
 8010090:	20000810 	.word	0x20000810
 8010094:	20000814 	.word	0x20000814
 8010098:	0801caa0 	.word	0x0801caa0
 801009c:	0801cc10 	.word	0x0801cc10
 80100a0:	0801cae8 	.word	0x0801cae8
 80100a4:	0801cc28 	.word	0x0801cc28
 80100a8:	0801cc48 	.word	0x0801cc48
 80100ac:	20000818 	.word	0x20000818

080100b0 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 80100b0:	b580      	push	{r7, lr}
 80100b2:	b088      	sub	sp, #32
 80100b4:	af00      	add	r7, sp, #0
 80100b6:	6078      	str	r0, [r7, #4]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 80100b8:	687b      	ldr	r3, [r7, #4]
 80100ba:	2b00      	cmp	r3, #0
 80100bc:	d101      	bne.n	80100c2 <mem_malloc+0x12>
    return NULL;
 80100be:	2300      	movs	r3, #0
 80100c0:	e0d0      	b.n	8010264 <mem_malloc+0x1b4>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 80100c2:	687b      	ldr	r3, [r7, #4]
 80100c4:	3303      	adds	r3, #3
 80100c6:	f023 0303 	bic.w	r3, r3, #3
 80100ca:	61bb      	str	r3, [r7, #24]
  if (size < MIN_SIZE_ALIGNED) {
 80100cc:	69bb      	ldr	r3, [r7, #24]
 80100ce:	2b0b      	cmp	r3, #11
 80100d0:	d801      	bhi.n	80100d6 <mem_malloc+0x26>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 80100d2:	230c      	movs	r3, #12
 80100d4:	61bb      	str	r3, [r7, #24]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 80100d6:	69bb      	ldr	r3, [r7, #24]
 80100d8:	4a64      	ldr	r2, [pc, #400]	; (801026c <mem_malloc+0x1bc>)
 80100da:	4293      	cmp	r3, r2
 80100dc:	d803      	bhi.n	80100e6 <mem_malloc+0x36>
 80100de:	69ba      	ldr	r2, [r7, #24]
 80100e0:	687b      	ldr	r3, [r7, #4]
 80100e2:	429a      	cmp	r2, r3
 80100e4:	d201      	bcs.n	80100ea <mem_malloc+0x3a>
    return NULL;
 80100e6:	2300      	movs	r3, #0
 80100e8:	e0bc      	b.n	8010264 <mem_malloc+0x1b4>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 80100ea:	4b61      	ldr	r3, [pc, #388]	; (8010270 <mem_malloc+0x1c0>)
 80100ec:	681b      	ldr	r3, [r3, #0]
 80100ee:	4618      	mov	r0, r3
 80100f0:	f7ff fd58 	bl	800fba4 <mem_to_ptr>
 80100f4:	61f8      	str	r0, [r7, #28]
 80100f6:	e0ad      	b.n	8010254 <mem_malloc+0x1a4>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 80100f8:	69f8      	ldr	r0, [r7, #28]
 80100fa:	f7ff fd43 	bl	800fb84 <ptr_to_mem>
 80100fe:	6138      	str	r0, [r7, #16]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 8010100:	693b      	ldr	r3, [r7, #16]
 8010102:	7a1b      	ldrb	r3, [r3, #8]
 8010104:	2b00      	cmp	r3, #0
 8010106:	f040 809f 	bne.w	8010248 <mem_malloc+0x198>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 801010a:	693b      	ldr	r3, [r7, #16]
 801010c:	681a      	ldr	r2, [r3, #0]
 801010e:	69fb      	ldr	r3, [r7, #28]
 8010110:	1ad3      	subs	r3, r2, r3
 8010112:	3b0c      	subs	r3, #12
      if ((!mem->used) &&
 8010114:	69ba      	ldr	r2, [r7, #24]
 8010116:	429a      	cmp	r2, r3
 8010118:	f200 8096 	bhi.w	8010248 <mem_malloc+0x198>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 801011c:	693b      	ldr	r3, [r7, #16]
 801011e:	681a      	ldr	r2, [r3, #0]
 8010120:	69fb      	ldr	r3, [r7, #28]
 8010122:	1ad3      	subs	r3, r2, r3
 8010124:	f1a3 020c 	sub.w	r2, r3, #12
 8010128:	69bb      	ldr	r3, [r7, #24]
 801012a:	3318      	adds	r3, #24
 801012c:	429a      	cmp	r2, r3
 801012e:	d331      	bcc.n	8010194 <mem_malloc+0xe4>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 8010130:	69fa      	ldr	r2, [r7, #28]
 8010132:	69bb      	ldr	r3, [r7, #24]
 8010134:	4413      	add	r3, r2
 8010136:	330c      	adds	r3, #12
 8010138:	60fb      	str	r3, [r7, #12]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 801013a:	68fb      	ldr	r3, [r7, #12]
 801013c:	4a4b      	ldr	r2, [pc, #300]	; (801026c <mem_malloc+0x1bc>)
 801013e:	4293      	cmp	r3, r2
 8010140:	d106      	bne.n	8010150 <mem_malloc+0xa0>
 8010142:	4b4c      	ldr	r3, [pc, #304]	; (8010274 <mem_malloc+0x1c4>)
 8010144:	f240 3287 	movw	r2, #903	; 0x387
 8010148:	494b      	ldr	r1, [pc, #300]	; (8010278 <mem_malloc+0x1c8>)
 801014a:	484c      	ldr	r0, [pc, #304]	; (801027c <mem_malloc+0x1cc>)
 801014c:	f009 fed4 	bl	8019ef8 <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 8010150:	68f8      	ldr	r0, [r7, #12]
 8010152:	f7ff fd17 	bl	800fb84 <ptr_to_mem>
 8010156:	60b8      	str	r0, [r7, #8]
          mem2->used = 0;
 8010158:	68bb      	ldr	r3, [r7, #8]
 801015a:	2200      	movs	r2, #0
 801015c:	721a      	strb	r2, [r3, #8]
          mem2->next = mem->next;
 801015e:	693b      	ldr	r3, [r7, #16]
 8010160:	681a      	ldr	r2, [r3, #0]
 8010162:	68bb      	ldr	r3, [r7, #8]
 8010164:	601a      	str	r2, [r3, #0]
          mem2->prev = ptr;
 8010166:	68bb      	ldr	r3, [r7, #8]
 8010168:	69fa      	ldr	r2, [r7, #28]
 801016a:	605a      	str	r2, [r3, #4]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 801016c:	693b      	ldr	r3, [r7, #16]
 801016e:	68fa      	ldr	r2, [r7, #12]
 8010170:	601a      	str	r2, [r3, #0]
          mem->used = 1;
 8010172:	693b      	ldr	r3, [r7, #16]
 8010174:	2201      	movs	r2, #1
 8010176:	721a      	strb	r2, [r3, #8]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 8010178:	68bb      	ldr	r3, [r7, #8]
 801017a:	681b      	ldr	r3, [r3, #0]
 801017c:	4a3b      	ldr	r2, [pc, #236]	; (801026c <mem_malloc+0x1bc>)
 801017e:	4293      	cmp	r3, r2
 8010180:	d00b      	beq.n	801019a <mem_malloc+0xea>
            ptr_to_mem(mem2->next)->prev = ptr2;
 8010182:	68bb      	ldr	r3, [r7, #8]
 8010184:	681b      	ldr	r3, [r3, #0]
 8010186:	4618      	mov	r0, r3
 8010188:	f7ff fcfc 	bl	800fb84 <ptr_to_mem>
 801018c:	4602      	mov	r2, r0
 801018e:	68fb      	ldr	r3, [r7, #12]
 8010190:	6053      	str	r3, [r2, #4]
 8010192:	e002      	b.n	801019a <mem_malloc+0xea>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 8010194:	693b      	ldr	r3, [r7, #16]
 8010196:	2201      	movs	r2, #1
 8010198:	721a      	strb	r2, [r3, #8]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 801019a:	4b35      	ldr	r3, [pc, #212]	; (8010270 <mem_malloc+0x1c0>)
 801019c:	681b      	ldr	r3, [r3, #0]
 801019e:	693a      	ldr	r2, [r7, #16]
 80101a0:	429a      	cmp	r2, r3
 80101a2:	d127      	bne.n	80101f4 <mem_malloc+0x144>
          struct mem *cur = lfree;
 80101a4:	4b32      	ldr	r3, [pc, #200]	; (8010270 <mem_malloc+0x1c0>)
 80101a6:	681b      	ldr	r3, [r3, #0]
 80101a8:	617b      	str	r3, [r7, #20]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 80101aa:	e005      	b.n	80101b8 <mem_malloc+0x108>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 80101ac:	697b      	ldr	r3, [r7, #20]
 80101ae:	681b      	ldr	r3, [r3, #0]
 80101b0:	4618      	mov	r0, r3
 80101b2:	f7ff fce7 	bl	800fb84 <ptr_to_mem>
 80101b6:	6178      	str	r0, [r7, #20]
          while (cur->used && cur != ram_end) {
 80101b8:	697b      	ldr	r3, [r7, #20]
 80101ba:	7a1b      	ldrb	r3, [r3, #8]
 80101bc:	2b00      	cmp	r3, #0
 80101be:	d004      	beq.n	80101ca <mem_malloc+0x11a>
 80101c0:	4b2f      	ldr	r3, [pc, #188]	; (8010280 <mem_malloc+0x1d0>)
 80101c2:	681b      	ldr	r3, [r3, #0]
 80101c4:	697a      	ldr	r2, [r7, #20]
 80101c6:	429a      	cmp	r2, r3
 80101c8:	d1f0      	bne.n	80101ac <mem_malloc+0xfc>
          }
          lfree = cur;
 80101ca:	4a29      	ldr	r2, [pc, #164]	; (8010270 <mem_malloc+0x1c0>)
 80101cc:	697b      	ldr	r3, [r7, #20]
 80101ce:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 80101d0:	4b27      	ldr	r3, [pc, #156]	; (8010270 <mem_malloc+0x1c0>)
 80101d2:	681a      	ldr	r2, [r3, #0]
 80101d4:	4b2a      	ldr	r3, [pc, #168]	; (8010280 <mem_malloc+0x1d0>)
 80101d6:	681b      	ldr	r3, [r3, #0]
 80101d8:	429a      	cmp	r2, r3
 80101da:	d00b      	beq.n	80101f4 <mem_malloc+0x144>
 80101dc:	4b24      	ldr	r3, [pc, #144]	; (8010270 <mem_malloc+0x1c0>)
 80101de:	681b      	ldr	r3, [r3, #0]
 80101e0:	7a1b      	ldrb	r3, [r3, #8]
 80101e2:	2b00      	cmp	r3, #0
 80101e4:	d006      	beq.n	80101f4 <mem_malloc+0x144>
 80101e6:	4b23      	ldr	r3, [pc, #140]	; (8010274 <mem_malloc+0x1c4>)
 80101e8:	f240 32b5 	movw	r2, #949	; 0x3b5
 80101ec:	4925      	ldr	r1, [pc, #148]	; (8010284 <mem_malloc+0x1d4>)
 80101ee:	4823      	ldr	r0, [pc, #140]	; (801027c <mem_malloc+0x1cc>)
 80101f0:	f009 fe82 	bl	8019ef8 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 80101f4:	693a      	ldr	r2, [r7, #16]
 80101f6:	69bb      	ldr	r3, [r7, #24]
 80101f8:	4413      	add	r3, r2
 80101fa:	330c      	adds	r3, #12
 80101fc:	4a20      	ldr	r2, [pc, #128]	; (8010280 <mem_malloc+0x1d0>)
 80101fe:	6812      	ldr	r2, [r2, #0]
 8010200:	4293      	cmp	r3, r2
 8010202:	d906      	bls.n	8010212 <mem_malloc+0x162>
 8010204:	4b1b      	ldr	r3, [pc, #108]	; (8010274 <mem_malloc+0x1c4>)
 8010206:	f240 32b9 	movw	r2, #953	; 0x3b9
 801020a:	491f      	ldr	r1, [pc, #124]	; (8010288 <mem_malloc+0x1d8>)
 801020c:	481b      	ldr	r0, [pc, #108]	; (801027c <mem_malloc+0x1cc>)
 801020e:	f009 fe73 	bl	8019ef8 <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 8010212:	693b      	ldr	r3, [r7, #16]
 8010214:	f003 0303 	and.w	r3, r3, #3
 8010218:	2b00      	cmp	r3, #0
 801021a:	d006      	beq.n	801022a <mem_malloc+0x17a>
 801021c:	4b15      	ldr	r3, [pc, #84]	; (8010274 <mem_malloc+0x1c4>)
 801021e:	f240 32bb 	movw	r2, #955	; 0x3bb
 8010222:	491a      	ldr	r1, [pc, #104]	; (801028c <mem_malloc+0x1dc>)
 8010224:	4815      	ldr	r0, [pc, #84]	; (801027c <mem_malloc+0x1cc>)
 8010226:	f009 fe67 	bl	8019ef8 <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 801022a:	693b      	ldr	r3, [r7, #16]
 801022c:	f003 0303 	and.w	r3, r3, #3
 8010230:	2b00      	cmp	r3, #0
 8010232:	d006      	beq.n	8010242 <mem_malloc+0x192>
 8010234:	4b0f      	ldr	r3, [pc, #60]	; (8010274 <mem_malloc+0x1c4>)
 8010236:	f240 32bd 	movw	r2, #957	; 0x3bd
 801023a:	4915      	ldr	r1, [pc, #84]	; (8010290 <mem_malloc+0x1e0>)
 801023c:	480f      	ldr	r0, [pc, #60]	; (801027c <mem_malloc+0x1cc>)
 801023e:	f009 fe5b 	bl	8019ef8 <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 8010242:	693b      	ldr	r3, [r7, #16]
 8010244:	330c      	adds	r3, #12
 8010246:	e00d      	b.n	8010264 <mem_malloc+0x1b4>
         ptr = ptr_to_mem(ptr)->next) {
 8010248:	69f8      	ldr	r0, [r7, #28]
 801024a:	f7ff fc9b 	bl	800fb84 <ptr_to_mem>
 801024e:	4603      	mov	r3, r0
 8010250:	681b      	ldr	r3, [r3, #0]
 8010252:	61fb      	str	r3, [r7, #28]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8010254:	69ba      	ldr	r2, [r7, #24]
 8010256:	4b05      	ldr	r3, [pc, #20]	; (801026c <mem_malloc+0x1bc>)
 8010258:	1a9b      	subs	r3, r3, r2
 801025a:	69fa      	ldr	r2, [r7, #28]
 801025c:	429a      	cmp	r2, r3
 801025e:	f4ff af4b 	bcc.w	80100f8 <mem_malloc+0x48>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 8010262:	2300      	movs	r3, #0
}
 8010264:	4618      	mov	r0, r3
 8010266:	3720      	adds	r7, #32
 8010268:	46bd      	mov	sp, r7
 801026a:	bd80      	pop	{r7, pc}
 801026c:	0001ffe8 	.word	0x0001ffe8
 8010270:	20000818 	.word	0x20000818
 8010274:	0801caa0 	.word	0x0801caa0
 8010278:	0801cc48 	.word	0x0801cc48
 801027c:	0801cae8 	.word	0x0801cae8
 8010280:	20000814 	.word	0x20000814
 8010284:	0801cc5c 	.word	0x0801cc5c
 8010288:	0801cc78 	.word	0x0801cc78
 801028c:	0801cca8 	.word	0x0801cca8
 8010290:	0801ccd8 	.word	0x0801ccd8

08010294 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 8010294:	b480      	push	{r7}
 8010296:	b085      	sub	sp, #20
 8010298:	af00      	add	r7, sp, #0
 801029a:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 801029c:	687b      	ldr	r3, [r7, #4]
 801029e:	689b      	ldr	r3, [r3, #8]
 80102a0:	2200      	movs	r2, #0
 80102a2:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 80102a4:	687b      	ldr	r3, [r7, #4]
 80102a6:	685b      	ldr	r3, [r3, #4]
 80102a8:	3303      	adds	r3, #3
 80102aa:	f023 0303 	bic.w	r3, r3, #3
 80102ae:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 80102b0:	2300      	movs	r3, #0
 80102b2:	60fb      	str	r3, [r7, #12]
 80102b4:	e011      	b.n	80102da <memp_init_pool+0x46>
    memp->next = *desc->tab;
 80102b6:	687b      	ldr	r3, [r7, #4]
 80102b8:	689b      	ldr	r3, [r3, #8]
 80102ba:	681a      	ldr	r2, [r3, #0]
 80102bc:	68bb      	ldr	r3, [r7, #8]
 80102be:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 80102c0:	687b      	ldr	r3, [r7, #4]
 80102c2:	689b      	ldr	r3, [r3, #8]
 80102c4:	68ba      	ldr	r2, [r7, #8]
 80102c6:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 80102c8:	687b      	ldr	r3, [r7, #4]
 80102ca:	881b      	ldrh	r3, [r3, #0]
 80102cc:	461a      	mov	r2, r3
 80102ce:	68bb      	ldr	r3, [r7, #8]
 80102d0:	4413      	add	r3, r2
 80102d2:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 80102d4:	68fb      	ldr	r3, [r7, #12]
 80102d6:	3301      	adds	r3, #1
 80102d8:	60fb      	str	r3, [r7, #12]
 80102da:	687b      	ldr	r3, [r7, #4]
 80102dc:	885b      	ldrh	r3, [r3, #2]
 80102de:	461a      	mov	r2, r3
 80102e0:	68fb      	ldr	r3, [r7, #12]
 80102e2:	4293      	cmp	r3, r2
 80102e4:	dbe7      	blt.n	80102b6 <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 80102e6:	bf00      	nop
 80102e8:	bf00      	nop
 80102ea:	3714      	adds	r7, #20
 80102ec:	46bd      	mov	sp, r7
 80102ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102f2:	4770      	bx	lr

080102f4 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 80102f4:	b580      	push	{r7, lr}
 80102f6:	b082      	sub	sp, #8
 80102f8:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 80102fa:	2300      	movs	r3, #0
 80102fc:	80fb      	strh	r3, [r7, #6]
 80102fe:	e009      	b.n	8010314 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 8010300:	88fb      	ldrh	r3, [r7, #6]
 8010302:	4a08      	ldr	r2, [pc, #32]	; (8010324 <memp_init+0x30>)
 8010304:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8010308:	4618      	mov	r0, r3
 801030a:	f7ff ffc3 	bl	8010294 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 801030e:	88fb      	ldrh	r3, [r7, #6]
 8010310:	3301      	adds	r3, #1
 8010312:	80fb      	strh	r3, [r7, #6]
 8010314:	88fb      	ldrh	r3, [r7, #6]
 8010316:	2b08      	cmp	r3, #8
 8010318:	d9f2      	bls.n	8010300 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 801031a:	bf00      	nop
 801031c:	bf00      	nop
 801031e:	3708      	adds	r7, #8
 8010320:	46bd      	mov	sp, r7
 8010322:	bd80      	pop	{r7, pc}
 8010324:	0801f500 	.word	0x0801f500

08010328 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 8010328:	b580      	push	{r7, lr}
 801032a:	b084      	sub	sp, #16
 801032c:	af00      	add	r7, sp, #0
 801032e:	6078      	str	r0, [r7, #4]
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);

  memp = *desc->tab;
 8010330:	687b      	ldr	r3, [r7, #4]
 8010332:	689b      	ldr	r3, [r3, #8]
 8010334:	681b      	ldr	r3, [r3, #0]
 8010336:	60fb      	str	r3, [r7, #12]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 8010338:	68fb      	ldr	r3, [r7, #12]
 801033a:	2b00      	cmp	r3, #0
 801033c:	d012      	beq.n	8010364 <do_memp_malloc_pool+0x3c>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 801033e:	687b      	ldr	r3, [r7, #4]
 8010340:	689b      	ldr	r3, [r3, #8]
 8010342:	68fa      	ldr	r2, [r7, #12]
 8010344:	6812      	ldr	r2, [r2, #0]
 8010346:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 8010348:	68fb      	ldr	r3, [r7, #12]
 801034a:	f003 0303 	and.w	r3, r3, #3
 801034e:	2b00      	cmp	r3, #0
 8010350:	d006      	beq.n	8010360 <do_memp_malloc_pool+0x38>
 8010352:	4b07      	ldr	r3, [pc, #28]	; (8010370 <do_memp_malloc_pool+0x48>)
 8010354:	f44f 728c 	mov.w	r2, #280	; 0x118
 8010358:	4906      	ldr	r1, [pc, #24]	; (8010374 <do_memp_malloc_pool+0x4c>)
 801035a:	4807      	ldr	r0, [pc, #28]	; (8010378 <do_memp_malloc_pool+0x50>)
 801035c:	f009 fdcc 	bl	8019ef8 <iprintf>
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 8010360:	68fb      	ldr	r3, [r7, #12]
 8010362:	e000      	b.n	8010366 <do_memp_malloc_pool+0x3e>
#endif
    SYS_ARCH_UNPROTECT(old_level);
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 8010364:	2300      	movs	r3, #0
}
 8010366:	4618      	mov	r0, r3
 8010368:	3710      	adds	r7, #16
 801036a:	46bd      	mov	sp, r7
 801036c:	bd80      	pop	{r7, pc}
 801036e:	bf00      	nop
 8010370:	0801ccfc 	.word	0x0801ccfc
 8010374:	0801cd2c 	.word	0x0801cd2c
 8010378:	0801cd50 	.word	0x0801cd50

0801037c <memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc_pool(const struct memp_desc *desc)
#else
memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 801037c:	b580      	push	{r7, lr}
 801037e:	b082      	sub	sp, #8
 8010380:	af00      	add	r7, sp, #0
 8010382:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 8010384:	687b      	ldr	r3, [r7, #4]
 8010386:	2b00      	cmp	r3, #0
 8010388:	d106      	bne.n	8010398 <memp_malloc_pool+0x1c>
 801038a:	4b0a      	ldr	r3, [pc, #40]	; (80103b4 <memp_malloc_pool+0x38>)
 801038c:	f44f 729e 	mov.w	r2, #316	; 0x13c
 8010390:	4909      	ldr	r1, [pc, #36]	; (80103b8 <memp_malloc_pool+0x3c>)
 8010392:	480a      	ldr	r0, [pc, #40]	; (80103bc <memp_malloc_pool+0x40>)
 8010394:	f009 fdb0 	bl	8019ef8 <iprintf>
  if (desc == NULL) {
 8010398:	687b      	ldr	r3, [r7, #4]
 801039a:	2b00      	cmp	r3, #0
 801039c:	d101      	bne.n	80103a2 <memp_malloc_pool+0x26>
    return NULL;
 801039e:	2300      	movs	r3, #0
 80103a0:	e003      	b.n	80103aa <memp_malloc_pool+0x2e>
  }

#if !MEMP_OVERFLOW_CHECK
  return do_memp_malloc_pool(desc);
 80103a2:	6878      	ldr	r0, [r7, #4]
 80103a4:	f7ff ffc0 	bl	8010328 <do_memp_malloc_pool>
 80103a8:	4603      	mov	r3, r0
#else
  return do_memp_malloc_pool_fn(desc, file, line);
#endif
}
 80103aa:	4618      	mov	r0, r3
 80103ac:	3708      	adds	r7, #8
 80103ae:	46bd      	mov	sp, r7
 80103b0:	bd80      	pop	{r7, pc}
 80103b2:	bf00      	nop
 80103b4:	0801ccfc 	.word	0x0801ccfc
 80103b8:	0801cd78 	.word	0x0801cd78
 80103bc:	0801cd50 	.word	0x0801cd50

080103c0 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 80103c0:	b580      	push	{r7, lr}
 80103c2:	b084      	sub	sp, #16
 80103c4:	af00      	add	r7, sp, #0
 80103c6:	4603      	mov	r3, r0
 80103c8:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 80103ca:	79fb      	ldrb	r3, [r7, #7]
 80103cc:	2b08      	cmp	r3, #8
 80103ce:	d908      	bls.n	80103e2 <memp_malloc+0x22>
 80103d0:	4b0a      	ldr	r3, [pc, #40]	; (80103fc <memp_malloc+0x3c>)
 80103d2:	f240 1257 	movw	r2, #343	; 0x157
 80103d6:	490a      	ldr	r1, [pc, #40]	; (8010400 <memp_malloc+0x40>)
 80103d8:	480a      	ldr	r0, [pc, #40]	; (8010404 <memp_malloc+0x44>)
 80103da:	f009 fd8d 	bl	8019ef8 <iprintf>
 80103de:	2300      	movs	r3, #0
 80103e0:	e008      	b.n	80103f4 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 80103e2:	79fb      	ldrb	r3, [r7, #7]
 80103e4:	4a08      	ldr	r2, [pc, #32]	; (8010408 <memp_malloc+0x48>)
 80103e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80103ea:	4618      	mov	r0, r3
 80103ec:	f7ff ff9c 	bl	8010328 <do_memp_malloc_pool>
 80103f0:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 80103f2:	68fb      	ldr	r3, [r7, #12]
}
 80103f4:	4618      	mov	r0, r3
 80103f6:	3710      	adds	r7, #16
 80103f8:	46bd      	mov	sp, r7
 80103fa:	bd80      	pop	{r7, pc}
 80103fc:	0801ccfc 	.word	0x0801ccfc
 8010400:	0801cd8c 	.word	0x0801cd8c
 8010404:	0801cd50 	.word	0x0801cd50
 8010408:	0801f500 	.word	0x0801f500

0801040c <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 801040c:	b580      	push	{r7, lr}
 801040e:	b084      	sub	sp, #16
 8010410:	af00      	add	r7, sp, #0
 8010412:	6078      	str	r0, [r7, #4]
 8010414:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 8010416:	683b      	ldr	r3, [r7, #0]
 8010418:	f003 0303 	and.w	r3, r3, #3
 801041c:	2b00      	cmp	r3, #0
 801041e:	d006      	beq.n	801042e <do_memp_free_pool+0x22>
 8010420:	4b0a      	ldr	r3, [pc, #40]	; (801044c <do_memp_free_pool+0x40>)
 8010422:	f44f 72b6 	mov.w	r2, #364	; 0x16c
 8010426:	490a      	ldr	r1, [pc, #40]	; (8010450 <do_memp_free_pool+0x44>)
 8010428:	480a      	ldr	r0, [pc, #40]	; (8010454 <do_memp_free_pool+0x48>)
 801042a:	f009 fd65 	bl	8019ef8 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 801042e:	683b      	ldr	r3, [r7, #0]
 8010430:	60fb      	str	r3, [r7, #12]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 8010432:	687b      	ldr	r3, [r7, #4]
 8010434:	689b      	ldr	r3, [r3, #8]
 8010436:	681a      	ldr	r2, [r3, #0]
 8010438:	68fb      	ldr	r3, [r7, #12]
 801043a:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 801043c:	687b      	ldr	r3, [r7, #4]
 801043e:	689b      	ldr	r3, [r3, #8]
 8010440:	68fa      	ldr	r2, [r7, #12]
 8010442:	601a      	str	r2, [r3, #0]
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
#endif /* !MEMP_MEM_MALLOC */
}
 8010444:	bf00      	nop
 8010446:	3710      	adds	r7, #16
 8010448:	46bd      	mov	sp, r7
 801044a:	bd80      	pop	{r7, pc}
 801044c:	0801ccfc 	.word	0x0801ccfc
 8010450:	0801cdac 	.word	0x0801cdac
 8010454:	0801cd50 	.word	0x0801cd50

08010458 <memp_free_pool>:
 * @param desc the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free_pool(const struct memp_desc *desc, void *mem)
{
 8010458:	b580      	push	{r7, lr}
 801045a:	b082      	sub	sp, #8
 801045c:	af00      	add	r7, sp, #0
 801045e:	6078      	str	r0, [r7, #4]
 8010460:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 8010462:	687b      	ldr	r3, [r7, #4]
 8010464:	2b00      	cmp	r3, #0
 8010466:	d106      	bne.n	8010476 <memp_free_pool+0x1e>
 8010468:	4b0a      	ldr	r3, [pc, #40]	; (8010494 <memp_free_pool+0x3c>)
 801046a:	f240 1295 	movw	r2, #405	; 0x195
 801046e:	490a      	ldr	r1, [pc, #40]	; (8010498 <memp_free_pool+0x40>)
 8010470:	480a      	ldr	r0, [pc, #40]	; (801049c <memp_free_pool+0x44>)
 8010472:	f009 fd41 	bl	8019ef8 <iprintf>
  if ((desc == NULL) || (mem == NULL)) {
 8010476:	687b      	ldr	r3, [r7, #4]
 8010478:	2b00      	cmp	r3, #0
 801047a:	d007      	beq.n	801048c <memp_free_pool+0x34>
 801047c:	683b      	ldr	r3, [r7, #0]
 801047e:	2b00      	cmp	r3, #0
 8010480:	d004      	beq.n	801048c <memp_free_pool+0x34>
    return;
  }

  do_memp_free_pool(desc, mem);
 8010482:	6839      	ldr	r1, [r7, #0]
 8010484:	6878      	ldr	r0, [r7, #4]
 8010486:	f7ff ffc1 	bl	801040c <do_memp_free_pool>
 801048a:	e000      	b.n	801048e <memp_free_pool+0x36>
    return;
 801048c:	bf00      	nop
}
 801048e:	3708      	adds	r7, #8
 8010490:	46bd      	mov	sp, r7
 8010492:	bd80      	pop	{r7, pc}
 8010494:	0801ccfc 	.word	0x0801ccfc
 8010498:	0801cd78 	.word	0x0801cd78
 801049c:	0801cd50 	.word	0x0801cd50

080104a0 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 80104a0:	b580      	push	{r7, lr}
 80104a2:	b082      	sub	sp, #8
 80104a4:	af00      	add	r7, sp, #0
 80104a6:	4603      	mov	r3, r0
 80104a8:	6039      	str	r1, [r7, #0]
 80104aa:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 80104ac:	79fb      	ldrb	r3, [r7, #7]
 80104ae:	2b08      	cmp	r3, #8
 80104b0:	d907      	bls.n	80104c2 <memp_free+0x22>
 80104b2:	4b0c      	ldr	r3, [pc, #48]	; (80104e4 <memp_free+0x44>)
 80104b4:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 80104b8:	490b      	ldr	r1, [pc, #44]	; (80104e8 <memp_free+0x48>)
 80104ba:	480c      	ldr	r0, [pc, #48]	; (80104ec <memp_free+0x4c>)
 80104bc:	f009 fd1c 	bl	8019ef8 <iprintf>
 80104c0:	e00c      	b.n	80104dc <memp_free+0x3c>

  if (mem == NULL) {
 80104c2:	683b      	ldr	r3, [r7, #0]
 80104c4:	2b00      	cmp	r3, #0
 80104c6:	d008      	beq.n	80104da <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 80104c8:	79fb      	ldrb	r3, [r7, #7]
 80104ca:	4a09      	ldr	r2, [pc, #36]	; (80104f0 <memp_free+0x50>)
 80104cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80104d0:	6839      	ldr	r1, [r7, #0]
 80104d2:	4618      	mov	r0, r3
 80104d4:	f7ff ff9a 	bl	801040c <do_memp_free_pool>
 80104d8:	e000      	b.n	80104dc <memp_free+0x3c>
    return;
 80104da:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 80104dc:	3708      	adds	r7, #8
 80104de:	46bd      	mov	sp, r7
 80104e0:	bd80      	pop	{r7, pc}
 80104e2:	bf00      	nop
 80104e4:	0801ccfc 	.word	0x0801ccfc
 80104e8:	0801cdcc 	.word	0x0801cdcc
 80104ec:	0801cd50 	.word	0x0801cd50
 80104f0:	0801f500 	.word	0x0801f500

080104f4 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 80104f4:	b480      	push	{r7}
 80104f6:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 80104f8:	bf00      	nop
 80104fa:	46bd      	mov	sp, r7
 80104fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010500:	4770      	bx	lr
	...

08010504 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 8010504:	b580      	push	{r7, lr}
 8010506:	b086      	sub	sp, #24
 8010508:	af00      	add	r7, sp, #0
 801050a:	60f8      	str	r0, [r7, #12]
 801050c:	60b9      	str	r1, [r7, #8]
 801050e:	607a      	str	r2, [r7, #4]
 8010510:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 8010512:	68fb      	ldr	r3, [r7, #12]
 8010514:	2b00      	cmp	r3, #0
 8010516:	d108      	bne.n	801052a <netif_add+0x26>
 8010518:	4b57      	ldr	r3, [pc, #348]	; (8010678 <netif_add+0x174>)
 801051a:	f240 1227 	movw	r2, #295	; 0x127
 801051e:	4957      	ldr	r1, [pc, #348]	; (801067c <netif_add+0x178>)
 8010520:	4857      	ldr	r0, [pc, #348]	; (8010680 <netif_add+0x17c>)
 8010522:	f009 fce9 	bl	8019ef8 <iprintf>
 8010526:	2300      	movs	r3, #0
 8010528:	e0a2      	b.n	8010670 <netif_add+0x16c>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 801052a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801052c:	2b00      	cmp	r3, #0
 801052e:	d108      	bne.n	8010542 <netif_add+0x3e>
 8010530:	4b51      	ldr	r3, [pc, #324]	; (8010678 <netif_add+0x174>)
 8010532:	f44f 7294 	mov.w	r2, #296	; 0x128
 8010536:	4953      	ldr	r1, [pc, #332]	; (8010684 <netif_add+0x180>)
 8010538:	4851      	ldr	r0, [pc, #324]	; (8010680 <netif_add+0x17c>)
 801053a:	f009 fcdd 	bl	8019ef8 <iprintf>
 801053e:	2300      	movs	r3, #0
 8010540:	e096      	b.n	8010670 <netif_add+0x16c>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 8010542:	68bb      	ldr	r3, [r7, #8]
 8010544:	2b00      	cmp	r3, #0
 8010546:	d101      	bne.n	801054c <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 8010548:	4b4f      	ldr	r3, [pc, #316]	; (8010688 <netif_add+0x184>)
 801054a:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 801054c:	687b      	ldr	r3, [r7, #4]
 801054e:	2b00      	cmp	r3, #0
 8010550:	d101      	bne.n	8010556 <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 8010552:	4b4d      	ldr	r3, [pc, #308]	; (8010688 <netif_add+0x184>)
 8010554:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 8010556:	683b      	ldr	r3, [r7, #0]
 8010558:	2b00      	cmp	r3, #0
 801055a:	d101      	bne.n	8010560 <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 801055c:	4b4a      	ldr	r3, [pc, #296]	; (8010688 <netif_add+0x184>)
 801055e:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 8010560:	68fb      	ldr	r3, [r7, #12]
 8010562:	2200      	movs	r2, #0
 8010564:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 8010566:	68fb      	ldr	r3, [r7, #12]
 8010568:	2200      	movs	r2, #0
 801056a:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 801056c:	68fb      	ldr	r3, [r7, #12]
 801056e:	2200      	movs	r2, #0
 8010570:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 8010572:	68fb      	ldr	r3, [r7, #12]
 8010574:	4a45      	ldr	r2, [pc, #276]	; (801068c <netif_add+0x188>)
 8010576:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 8010578:	68fb      	ldr	r3, [r7, #12]
 801057a:	2200      	movs	r2, #0
 801057c:	849a      	strh	r2, [r3, #36]	; 0x24
  netif->flags = 0;
 801057e:	68fb      	ldr	r3, [r7, #12]
 8010580:	2200      	movs	r2, #0
 8010582:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 8010586:	68fb      	ldr	r3, [r7, #12]
 8010588:	2200      	movs	r2, #0
 801058a:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 801058c:	68fb      	ldr	r3, [r7, #12]
 801058e:	6a3a      	ldr	r2, [r7, #32]
 8010590:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 8010592:	4b3f      	ldr	r3, [pc, #252]	; (8010690 <netif_add+0x18c>)
 8010594:	781a      	ldrb	r2, [r3, #0]
 8010596:	68fb      	ldr	r3, [r7, #12]
 8010598:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  netif->input = input;
 801059c:	68fb      	ldr	r3, [r7, #12]
 801059e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80105a0:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 80105a2:	683b      	ldr	r3, [r7, #0]
 80105a4:	687a      	ldr	r2, [r7, #4]
 80105a6:	68b9      	ldr	r1, [r7, #8]
 80105a8:	68f8      	ldr	r0, [r7, #12]
 80105aa:	f000 f913 	bl	80107d4 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 80105ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80105b0:	68f8      	ldr	r0, [r7, #12]
 80105b2:	4798      	blx	r3
 80105b4:	4603      	mov	r3, r0
 80105b6:	2b00      	cmp	r3, #0
 80105b8:	d001      	beq.n	80105be <netif_add+0xba>
    return NULL;
 80105ba:	2300      	movs	r3, #0
 80105bc:	e058      	b.n	8010670 <netif_add+0x16c>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 80105be:	68fb      	ldr	r3, [r7, #12]
 80105c0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80105c4:	2bff      	cmp	r3, #255	; 0xff
 80105c6:	d103      	bne.n	80105d0 <netif_add+0xcc>
        netif->num = 0;
 80105c8:	68fb      	ldr	r3, [r7, #12]
 80105ca:	2200      	movs	r2, #0
 80105cc:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      }
      num_netifs = 0;
 80105d0:	2300      	movs	r3, #0
 80105d2:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 80105d4:	4b2f      	ldr	r3, [pc, #188]	; (8010694 <netif_add+0x190>)
 80105d6:	681b      	ldr	r3, [r3, #0]
 80105d8:	617b      	str	r3, [r7, #20]
 80105da:	e02b      	b.n	8010634 <netif_add+0x130>
        LWIP_ASSERT("netif already added", netif2 != netif);
 80105dc:	697a      	ldr	r2, [r7, #20]
 80105de:	68fb      	ldr	r3, [r7, #12]
 80105e0:	429a      	cmp	r2, r3
 80105e2:	d106      	bne.n	80105f2 <netif_add+0xee>
 80105e4:	4b24      	ldr	r3, [pc, #144]	; (8010678 <netif_add+0x174>)
 80105e6:	f240 128b 	movw	r2, #395	; 0x18b
 80105ea:	492b      	ldr	r1, [pc, #172]	; (8010698 <netif_add+0x194>)
 80105ec:	4824      	ldr	r0, [pc, #144]	; (8010680 <netif_add+0x17c>)
 80105ee:	f009 fc83 	bl	8019ef8 <iprintf>
        num_netifs++;
 80105f2:	693b      	ldr	r3, [r7, #16]
 80105f4:	3301      	adds	r3, #1
 80105f6:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 80105f8:	693b      	ldr	r3, [r7, #16]
 80105fa:	2bff      	cmp	r3, #255	; 0xff
 80105fc:	dd06      	ble.n	801060c <netif_add+0x108>
 80105fe:	4b1e      	ldr	r3, [pc, #120]	; (8010678 <netif_add+0x174>)
 8010600:	f240 128d 	movw	r2, #397	; 0x18d
 8010604:	4925      	ldr	r1, [pc, #148]	; (801069c <netif_add+0x198>)
 8010606:	481e      	ldr	r0, [pc, #120]	; (8010680 <netif_add+0x17c>)
 8010608:	f009 fc76 	bl	8019ef8 <iprintf>
        if (netif2->num == netif->num) {
 801060c:	697b      	ldr	r3, [r7, #20]
 801060e:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 8010612:	68fb      	ldr	r3, [r7, #12]
 8010614:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8010618:	429a      	cmp	r2, r3
 801061a:	d108      	bne.n	801062e <netif_add+0x12a>
          netif->num++;
 801061c:	68fb      	ldr	r3, [r7, #12]
 801061e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8010622:	3301      	adds	r3, #1
 8010624:	b2da      	uxtb	r2, r3
 8010626:	68fb      	ldr	r3, [r7, #12]
 8010628:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
          break;
 801062c:	e005      	b.n	801063a <netif_add+0x136>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 801062e:	697b      	ldr	r3, [r7, #20]
 8010630:	681b      	ldr	r3, [r3, #0]
 8010632:	617b      	str	r3, [r7, #20]
 8010634:	697b      	ldr	r3, [r7, #20]
 8010636:	2b00      	cmp	r3, #0
 8010638:	d1d0      	bne.n	80105dc <netif_add+0xd8>
        }
      }
    } while (netif2 != NULL);
 801063a:	697b      	ldr	r3, [r7, #20]
 801063c:	2b00      	cmp	r3, #0
 801063e:	d1be      	bne.n	80105be <netif_add+0xba>
  }
  if (netif->num == 254) {
 8010640:	68fb      	ldr	r3, [r7, #12]
 8010642:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8010646:	2bfe      	cmp	r3, #254	; 0xfe
 8010648:	d103      	bne.n	8010652 <netif_add+0x14e>
    netif_num = 0;
 801064a:	4b11      	ldr	r3, [pc, #68]	; (8010690 <netif_add+0x18c>)
 801064c:	2200      	movs	r2, #0
 801064e:	701a      	strb	r2, [r3, #0]
 8010650:	e006      	b.n	8010660 <netif_add+0x15c>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 8010652:	68fb      	ldr	r3, [r7, #12]
 8010654:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8010658:	3301      	adds	r3, #1
 801065a:	b2da      	uxtb	r2, r3
 801065c:	4b0c      	ldr	r3, [pc, #48]	; (8010690 <netif_add+0x18c>)
 801065e:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 8010660:	4b0c      	ldr	r3, [pc, #48]	; (8010694 <netif_add+0x190>)
 8010662:	681a      	ldr	r2, [r3, #0]
 8010664:	68fb      	ldr	r3, [r7, #12]
 8010666:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 8010668:	4a0a      	ldr	r2, [pc, #40]	; (8010694 <netif_add+0x190>)
 801066a:	68fb      	ldr	r3, [r7, #12]
 801066c:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 801066e:	68fb      	ldr	r3, [r7, #12]
}
 8010670:	4618      	mov	r0, r3
 8010672:	3718      	adds	r7, #24
 8010674:	46bd      	mov	sp, r7
 8010676:	bd80      	pop	{r7, pc}
 8010678:	0801cde8 	.word	0x0801cde8
 801067c:	0801ce7c 	.word	0x0801ce7c
 8010680:	0801ce38 	.word	0x0801ce38
 8010684:	0801ce98 	.word	0x0801ce98
 8010688:	0801f564 	.word	0x0801f564
 801068c:	08010aaf 	.word	0x08010aaf
 8010690:	200070d0 	.word	0x200070d0
 8010694:	200070c8 	.word	0x200070c8
 8010698:	0801cebc 	.word	0x0801cebc
 801069c:	0801ced0 	.word	0x0801ced0

080106a0 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 80106a0:	b580      	push	{r7, lr}
 80106a2:	b082      	sub	sp, #8
 80106a4:	af00      	add	r7, sp, #0
 80106a6:	6078      	str	r0, [r7, #4]
 80106a8:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 80106aa:	6839      	ldr	r1, [r7, #0]
 80106ac:	6878      	ldr	r0, [r7, #4]
 80106ae:	f002 fb27 	bl	8012d00 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 80106b2:	6839      	ldr	r1, [r7, #0]
 80106b4:	6878      	ldr	r0, [r7, #4]
 80106b6:	f006 fbc9 	bl	8016e4c <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 80106ba:	bf00      	nop
 80106bc:	3708      	adds	r7, #8
 80106be:	46bd      	mov	sp, r7
 80106c0:	bd80      	pop	{r7, pc}
	...

080106c4 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 80106c4:	b580      	push	{r7, lr}
 80106c6:	b086      	sub	sp, #24
 80106c8:	af00      	add	r7, sp, #0
 80106ca:	60f8      	str	r0, [r7, #12]
 80106cc:	60b9      	str	r1, [r7, #8]
 80106ce:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 80106d0:	68bb      	ldr	r3, [r7, #8]
 80106d2:	2b00      	cmp	r3, #0
 80106d4:	d106      	bne.n	80106e4 <netif_do_set_ipaddr+0x20>
 80106d6:	4b1d      	ldr	r3, [pc, #116]	; (801074c <netif_do_set_ipaddr+0x88>)
 80106d8:	f240 12cb 	movw	r2, #459	; 0x1cb
 80106dc:	491c      	ldr	r1, [pc, #112]	; (8010750 <netif_do_set_ipaddr+0x8c>)
 80106de:	481d      	ldr	r0, [pc, #116]	; (8010754 <netif_do_set_ipaddr+0x90>)
 80106e0:	f009 fc0a 	bl	8019ef8 <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 80106e4:	687b      	ldr	r3, [r7, #4]
 80106e6:	2b00      	cmp	r3, #0
 80106e8:	d106      	bne.n	80106f8 <netif_do_set_ipaddr+0x34>
 80106ea:	4b18      	ldr	r3, [pc, #96]	; (801074c <netif_do_set_ipaddr+0x88>)
 80106ec:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 80106f0:	4917      	ldr	r1, [pc, #92]	; (8010750 <netif_do_set_ipaddr+0x8c>)
 80106f2:	4818      	ldr	r0, [pc, #96]	; (8010754 <netif_do_set_ipaddr+0x90>)
 80106f4:	f009 fc00 	bl	8019ef8 <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 80106f8:	68bb      	ldr	r3, [r7, #8]
 80106fa:	681a      	ldr	r2, [r3, #0]
 80106fc:	68fb      	ldr	r3, [r7, #12]
 80106fe:	3304      	adds	r3, #4
 8010700:	681b      	ldr	r3, [r3, #0]
 8010702:	429a      	cmp	r2, r3
 8010704:	d01c      	beq.n	8010740 <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 8010706:	68bb      	ldr	r3, [r7, #8]
 8010708:	681b      	ldr	r3, [r3, #0]
 801070a:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 801070c:	68fb      	ldr	r3, [r7, #12]
 801070e:	3304      	adds	r3, #4
 8010710:	681a      	ldr	r2, [r3, #0]
 8010712:	687b      	ldr	r3, [r7, #4]
 8010714:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 8010716:	f107 0314 	add.w	r3, r7, #20
 801071a:	4619      	mov	r1, r3
 801071c:	6878      	ldr	r0, [r7, #4]
 801071e:	f7ff ffbf 	bl	80106a0 <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 8010722:	68bb      	ldr	r3, [r7, #8]
 8010724:	2b00      	cmp	r3, #0
 8010726:	d002      	beq.n	801072e <netif_do_set_ipaddr+0x6a>
 8010728:	68bb      	ldr	r3, [r7, #8]
 801072a:	681b      	ldr	r3, [r3, #0]
 801072c:	e000      	b.n	8010730 <netif_do_set_ipaddr+0x6c>
 801072e:	2300      	movs	r3, #0
 8010730:	68fa      	ldr	r2, [r7, #12]
 8010732:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 8010734:	2101      	movs	r1, #1
 8010736:	68f8      	ldr	r0, [r7, #12]
 8010738:	f000 f8d2 	bl	80108e0 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 801073c:	2301      	movs	r3, #1
 801073e:	e000      	b.n	8010742 <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 8010740:	2300      	movs	r3, #0
}
 8010742:	4618      	mov	r0, r3
 8010744:	3718      	adds	r7, #24
 8010746:	46bd      	mov	sp, r7
 8010748:	bd80      	pop	{r7, pc}
 801074a:	bf00      	nop
 801074c:	0801cde8 	.word	0x0801cde8
 8010750:	0801cf00 	.word	0x0801cf00
 8010754:	0801ce38 	.word	0x0801ce38

08010758 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 8010758:	b480      	push	{r7}
 801075a:	b085      	sub	sp, #20
 801075c:	af00      	add	r7, sp, #0
 801075e:	60f8      	str	r0, [r7, #12]
 8010760:	60b9      	str	r1, [r7, #8]
 8010762:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 8010764:	68bb      	ldr	r3, [r7, #8]
 8010766:	681a      	ldr	r2, [r3, #0]
 8010768:	68fb      	ldr	r3, [r7, #12]
 801076a:	3308      	adds	r3, #8
 801076c:	681b      	ldr	r3, [r3, #0]
 801076e:	429a      	cmp	r2, r3
 8010770:	d00a      	beq.n	8010788 <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 8010772:	68bb      	ldr	r3, [r7, #8]
 8010774:	2b00      	cmp	r3, #0
 8010776:	d002      	beq.n	801077e <netif_do_set_netmask+0x26>
 8010778:	68bb      	ldr	r3, [r7, #8]
 801077a:	681b      	ldr	r3, [r3, #0]
 801077c:	e000      	b.n	8010780 <netif_do_set_netmask+0x28>
 801077e:	2300      	movs	r3, #0
 8010780:	68fa      	ldr	r2, [r7, #12]
 8010782:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 8010784:	2301      	movs	r3, #1
 8010786:	e000      	b.n	801078a <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 8010788:	2300      	movs	r3, #0
}
 801078a:	4618      	mov	r0, r3
 801078c:	3714      	adds	r7, #20
 801078e:	46bd      	mov	sp, r7
 8010790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010794:	4770      	bx	lr

08010796 <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 8010796:	b480      	push	{r7}
 8010798:	b085      	sub	sp, #20
 801079a:	af00      	add	r7, sp, #0
 801079c:	60f8      	str	r0, [r7, #12]
 801079e:	60b9      	str	r1, [r7, #8]
 80107a0:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 80107a2:	68bb      	ldr	r3, [r7, #8]
 80107a4:	681a      	ldr	r2, [r3, #0]
 80107a6:	68fb      	ldr	r3, [r7, #12]
 80107a8:	330c      	adds	r3, #12
 80107aa:	681b      	ldr	r3, [r3, #0]
 80107ac:	429a      	cmp	r2, r3
 80107ae:	d00a      	beq.n	80107c6 <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 80107b0:	68bb      	ldr	r3, [r7, #8]
 80107b2:	2b00      	cmp	r3, #0
 80107b4:	d002      	beq.n	80107bc <netif_do_set_gw+0x26>
 80107b6:	68bb      	ldr	r3, [r7, #8]
 80107b8:	681b      	ldr	r3, [r3, #0]
 80107ba:	e000      	b.n	80107be <netif_do_set_gw+0x28>
 80107bc:	2300      	movs	r3, #0
 80107be:	68fa      	ldr	r2, [r7, #12]
 80107c0:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 80107c2:	2301      	movs	r3, #1
 80107c4:	e000      	b.n	80107c8 <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 80107c6:	2300      	movs	r3, #0
}
 80107c8:	4618      	mov	r0, r3
 80107ca:	3714      	adds	r7, #20
 80107cc:	46bd      	mov	sp, r7
 80107ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80107d2:	4770      	bx	lr

080107d4 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 80107d4:	b580      	push	{r7, lr}
 80107d6:	b088      	sub	sp, #32
 80107d8:	af00      	add	r7, sp, #0
 80107da:	60f8      	str	r0, [r7, #12]
 80107dc:	60b9      	str	r1, [r7, #8]
 80107de:	607a      	str	r2, [r7, #4]
 80107e0:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 80107e2:	2300      	movs	r3, #0
 80107e4:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 80107e6:	2300      	movs	r3, #0
 80107e8:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 80107ea:	68bb      	ldr	r3, [r7, #8]
 80107ec:	2b00      	cmp	r3, #0
 80107ee:	d101      	bne.n	80107f4 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 80107f0:	4b1c      	ldr	r3, [pc, #112]	; (8010864 <netif_set_addr+0x90>)
 80107f2:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 80107f4:	687b      	ldr	r3, [r7, #4]
 80107f6:	2b00      	cmp	r3, #0
 80107f8:	d101      	bne.n	80107fe <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 80107fa:	4b1a      	ldr	r3, [pc, #104]	; (8010864 <netif_set_addr+0x90>)
 80107fc:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 80107fe:	683b      	ldr	r3, [r7, #0]
 8010800:	2b00      	cmp	r3, #0
 8010802:	d101      	bne.n	8010808 <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 8010804:	4b17      	ldr	r3, [pc, #92]	; (8010864 <netif_set_addr+0x90>)
 8010806:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 8010808:	68bb      	ldr	r3, [r7, #8]
 801080a:	2b00      	cmp	r3, #0
 801080c:	d003      	beq.n	8010816 <netif_set_addr+0x42>
 801080e:	68bb      	ldr	r3, [r7, #8]
 8010810:	681b      	ldr	r3, [r3, #0]
 8010812:	2b00      	cmp	r3, #0
 8010814:	d101      	bne.n	801081a <netif_set_addr+0x46>
 8010816:	2301      	movs	r3, #1
 8010818:	e000      	b.n	801081c <netif_set_addr+0x48>
 801081a:	2300      	movs	r3, #0
 801081c:	617b      	str	r3, [r7, #20]
  if (remove) {
 801081e:	697b      	ldr	r3, [r7, #20]
 8010820:	2b00      	cmp	r3, #0
 8010822:	d006      	beq.n	8010832 <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8010824:	f107 0310 	add.w	r3, r7, #16
 8010828:	461a      	mov	r2, r3
 801082a:	68b9      	ldr	r1, [r7, #8]
 801082c:	68f8      	ldr	r0, [r7, #12]
 801082e:	f7ff ff49 	bl	80106c4 <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 8010832:	69fa      	ldr	r2, [r7, #28]
 8010834:	6879      	ldr	r1, [r7, #4]
 8010836:	68f8      	ldr	r0, [r7, #12]
 8010838:	f7ff ff8e 	bl	8010758 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 801083c:	69ba      	ldr	r2, [r7, #24]
 801083e:	6839      	ldr	r1, [r7, #0]
 8010840:	68f8      	ldr	r0, [r7, #12]
 8010842:	f7ff ffa8 	bl	8010796 <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 8010846:	697b      	ldr	r3, [r7, #20]
 8010848:	2b00      	cmp	r3, #0
 801084a:	d106      	bne.n	801085a <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 801084c:	f107 0310 	add.w	r3, r7, #16
 8010850:	461a      	mov	r2, r3
 8010852:	68b9      	ldr	r1, [r7, #8]
 8010854:	68f8      	ldr	r0, [r7, #12]
 8010856:	f7ff ff35 	bl	80106c4 <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 801085a:	bf00      	nop
 801085c:	3720      	adds	r7, #32
 801085e:	46bd      	mov	sp, r7
 8010860:	bd80      	pop	{r7, pc}
 8010862:	bf00      	nop
 8010864:	0801f564 	.word	0x0801f564

08010868 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 8010868:	b480      	push	{r7}
 801086a:	b083      	sub	sp, #12
 801086c:	af00      	add	r7, sp, #0
 801086e:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 8010870:	4a04      	ldr	r2, [pc, #16]	; (8010884 <netif_set_default+0x1c>)
 8010872:	687b      	ldr	r3, [r7, #4]
 8010874:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 8010876:	bf00      	nop
 8010878:	370c      	adds	r7, #12
 801087a:	46bd      	mov	sp, r7
 801087c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010880:	4770      	bx	lr
 8010882:	bf00      	nop
 8010884:	200070cc 	.word	0x200070cc

08010888 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 8010888:	b580      	push	{r7, lr}
 801088a:	b082      	sub	sp, #8
 801088c:	af00      	add	r7, sp, #0
 801088e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 8010890:	687b      	ldr	r3, [r7, #4]
 8010892:	2b00      	cmp	r3, #0
 8010894:	d107      	bne.n	80108a6 <netif_set_up+0x1e>
 8010896:	4b0f      	ldr	r3, [pc, #60]	; (80108d4 <netif_set_up+0x4c>)
 8010898:	f44f 7254 	mov.w	r2, #848	; 0x350
 801089c:	490e      	ldr	r1, [pc, #56]	; (80108d8 <netif_set_up+0x50>)
 801089e:	480f      	ldr	r0, [pc, #60]	; (80108dc <netif_set_up+0x54>)
 80108a0:	f009 fb2a 	bl	8019ef8 <iprintf>
 80108a4:	e013      	b.n	80108ce <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 80108a6:	687b      	ldr	r3, [r7, #4]
 80108a8:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80108ac:	f003 0301 	and.w	r3, r3, #1
 80108b0:	2b00      	cmp	r3, #0
 80108b2:	d10c      	bne.n	80108ce <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 80108b4:	687b      	ldr	r3, [r7, #4]
 80108b6:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80108ba:	f043 0301 	orr.w	r3, r3, #1
 80108be:	b2da      	uxtb	r2, r3
 80108c0:	687b      	ldr	r3, [r7, #4]
 80108c2:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 80108c6:	2103      	movs	r1, #3
 80108c8:	6878      	ldr	r0, [r7, #4]
 80108ca:	f000 f809 	bl	80108e0 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 80108ce:	3708      	adds	r7, #8
 80108d0:	46bd      	mov	sp, r7
 80108d2:	bd80      	pop	{r7, pc}
 80108d4:	0801cde8 	.word	0x0801cde8
 80108d8:	0801cf70 	.word	0x0801cf70
 80108dc:	0801ce38 	.word	0x0801ce38

080108e0 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 80108e0:	b580      	push	{r7, lr}
 80108e2:	b082      	sub	sp, #8
 80108e4:	af00      	add	r7, sp, #0
 80108e6:	6078      	str	r0, [r7, #4]
 80108e8:	460b      	mov	r3, r1
 80108ea:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 80108ec:	687b      	ldr	r3, [r7, #4]
 80108ee:	2b00      	cmp	r3, #0
 80108f0:	d106      	bne.n	8010900 <netif_issue_reports+0x20>
 80108f2:	4b18      	ldr	r3, [pc, #96]	; (8010954 <netif_issue_reports+0x74>)
 80108f4:	f240 326d 	movw	r2, #877	; 0x36d
 80108f8:	4917      	ldr	r1, [pc, #92]	; (8010958 <netif_issue_reports+0x78>)
 80108fa:	4818      	ldr	r0, [pc, #96]	; (801095c <netif_issue_reports+0x7c>)
 80108fc:	f009 fafc 	bl	8019ef8 <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8010900:	687b      	ldr	r3, [r7, #4]
 8010902:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8010906:	f003 0304 	and.w	r3, r3, #4
 801090a:	2b00      	cmp	r3, #0
 801090c:	d01e      	beq.n	801094c <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 801090e:	687b      	ldr	r3, [r7, #4]
 8010910:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8010914:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8010918:	2b00      	cmp	r3, #0
 801091a:	d017      	beq.n	801094c <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 801091c:	78fb      	ldrb	r3, [r7, #3]
 801091e:	f003 0301 	and.w	r3, r3, #1
 8010922:	2b00      	cmp	r3, #0
 8010924:	d013      	beq.n	801094e <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8010926:	687b      	ldr	r3, [r7, #4]
 8010928:	3304      	adds	r3, #4
 801092a:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 801092c:	2b00      	cmp	r3, #0
 801092e:	d00e      	beq.n	801094e <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 8010930:	687b      	ldr	r3, [r7, #4]
 8010932:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8010936:	f003 0308 	and.w	r3, r3, #8
 801093a:	2b00      	cmp	r3, #0
 801093c:	d007      	beq.n	801094e <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 801093e:	687b      	ldr	r3, [r7, #4]
 8010940:	3304      	adds	r3, #4
 8010942:	4619      	mov	r1, r3
 8010944:	6878      	ldr	r0, [r7, #4]
 8010946:	f007 f9eb 	bl	8017d20 <etharp_request>
 801094a:	e000      	b.n	801094e <netif_issue_reports+0x6e>
    return;
 801094c:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 801094e:	3708      	adds	r7, #8
 8010950:	46bd      	mov	sp, r7
 8010952:	bd80      	pop	{r7, pc}
 8010954:	0801cde8 	.word	0x0801cde8
 8010958:	0801cf8c 	.word	0x0801cf8c
 801095c:	0801ce38 	.word	0x0801ce38

08010960 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 8010960:	b580      	push	{r7, lr}
 8010962:	b082      	sub	sp, #8
 8010964:	af00      	add	r7, sp, #0
 8010966:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 8010968:	687b      	ldr	r3, [r7, #4]
 801096a:	2b00      	cmp	r3, #0
 801096c:	d107      	bne.n	801097e <netif_set_down+0x1e>
 801096e:	4b12      	ldr	r3, [pc, #72]	; (80109b8 <netif_set_down+0x58>)
 8010970:	f240 329b 	movw	r2, #923	; 0x39b
 8010974:	4911      	ldr	r1, [pc, #68]	; (80109bc <netif_set_down+0x5c>)
 8010976:	4812      	ldr	r0, [pc, #72]	; (80109c0 <netif_set_down+0x60>)
 8010978:	f009 fabe 	bl	8019ef8 <iprintf>
 801097c:	e019      	b.n	80109b2 <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 801097e:	687b      	ldr	r3, [r7, #4]
 8010980:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8010984:	f003 0301 	and.w	r3, r3, #1
 8010988:	2b00      	cmp	r3, #0
 801098a:	d012      	beq.n	80109b2 <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 801098c:	687b      	ldr	r3, [r7, #4]
 801098e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8010992:	f023 0301 	bic.w	r3, r3, #1
 8010996:	b2da      	uxtb	r2, r3
 8010998:	687b      	ldr	r3, [r7, #4]
 801099a:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 801099e:	687b      	ldr	r3, [r7, #4]
 80109a0:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80109a4:	f003 0308 	and.w	r3, r3, #8
 80109a8:	2b00      	cmp	r3, #0
 80109aa:	d002      	beq.n	80109b2 <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 80109ac:	6878      	ldr	r0, [r7, #4]
 80109ae:	f006 fd75 	bl	801749c <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 80109b2:	3708      	adds	r7, #8
 80109b4:	46bd      	mov	sp, r7
 80109b6:	bd80      	pop	{r7, pc}
 80109b8:	0801cde8 	.word	0x0801cde8
 80109bc:	0801cfb0 	.word	0x0801cfb0
 80109c0:	0801ce38 	.word	0x0801ce38

080109c4 <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 80109c4:	b580      	push	{r7, lr}
 80109c6:	b082      	sub	sp, #8
 80109c8:	af00      	add	r7, sp, #0
 80109ca:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 80109cc:	687b      	ldr	r3, [r7, #4]
 80109ce:	2b00      	cmp	r3, #0
 80109d0:	d107      	bne.n	80109e2 <netif_set_link_up+0x1e>
 80109d2:	4b13      	ldr	r3, [pc, #76]	; (8010a20 <netif_set_link_up+0x5c>)
 80109d4:	f44f 7278 	mov.w	r2, #992	; 0x3e0
 80109d8:	4912      	ldr	r1, [pc, #72]	; (8010a24 <netif_set_link_up+0x60>)
 80109da:	4813      	ldr	r0, [pc, #76]	; (8010a28 <netif_set_link_up+0x64>)
 80109dc:	f009 fa8c 	bl	8019ef8 <iprintf>
 80109e0:	e01b      	b.n	8010a1a <netif_set_link_up+0x56>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 80109e2:	687b      	ldr	r3, [r7, #4]
 80109e4:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80109e8:	f003 0304 	and.w	r3, r3, #4
 80109ec:	2b00      	cmp	r3, #0
 80109ee:	d114      	bne.n	8010a1a <netif_set_link_up+0x56>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 80109f0:	687b      	ldr	r3, [r7, #4]
 80109f2:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80109f6:	f043 0304 	orr.w	r3, r3, #4
 80109fa:	b2da      	uxtb	r2, r3
 80109fc:	687b      	ldr	r3, [r7, #4]
 80109fe:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 8010a02:	2103      	movs	r1, #3
 8010a04:	6878      	ldr	r0, [r7, #4]
 8010a06:	f7ff ff6b 	bl	80108e0 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 8010a0a:	687b      	ldr	r3, [r7, #4]
 8010a0c:	69db      	ldr	r3, [r3, #28]
 8010a0e:	2b00      	cmp	r3, #0
 8010a10:	d003      	beq.n	8010a1a <netif_set_link_up+0x56>
 8010a12:	687b      	ldr	r3, [r7, #4]
 8010a14:	69db      	ldr	r3, [r3, #28]
 8010a16:	6878      	ldr	r0, [r7, #4]
 8010a18:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 8010a1a:	3708      	adds	r7, #8
 8010a1c:	46bd      	mov	sp, r7
 8010a1e:	bd80      	pop	{r7, pc}
 8010a20:	0801cde8 	.word	0x0801cde8
 8010a24:	0801cfd0 	.word	0x0801cfd0
 8010a28:	0801ce38 	.word	0x0801ce38

08010a2c <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 8010a2c:	b580      	push	{r7, lr}
 8010a2e:	b082      	sub	sp, #8
 8010a30:	af00      	add	r7, sp, #0
 8010a32:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 8010a34:	687b      	ldr	r3, [r7, #4]
 8010a36:	2b00      	cmp	r3, #0
 8010a38:	d107      	bne.n	8010a4a <netif_set_link_down+0x1e>
 8010a3a:	4b11      	ldr	r3, [pc, #68]	; (8010a80 <netif_set_link_down+0x54>)
 8010a3c:	f240 4206 	movw	r2, #1030	; 0x406
 8010a40:	4910      	ldr	r1, [pc, #64]	; (8010a84 <netif_set_link_down+0x58>)
 8010a42:	4811      	ldr	r0, [pc, #68]	; (8010a88 <netif_set_link_down+0x5c>)
 8010a44:	f009 fa58 	bl	8019ef8 <iprintf>
 8010a48:	e017      	b.n	8010a7a <netif_set_link_down+0x4e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 8010a4a:	687b      	ldr	r3, [r7, #4]
 8010a4c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8010a50:	f003 0304 	and.w	r3, r3, #4
 8010a54:	2b00      	cmp	r3, #0
 8010a56:	d010      	beq.n	8010a7a <netif_set_link_down+0x4e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 8010a58:	687b      	ldr	r3, [r7, #4]
 8010a5a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8010a5e:	f023 0304 	bic.w	r3, r3, #4
 8010a62:	b2da      	uxtb	r2, r3
 8010a64:	687b      	ldr	r3, [r7, #4]
 8010a66:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    NETIF_LINK_CALLBACK(netif);
 8010a6a:	687b      	ldr	r3, [r7, #4]
 8010a6c:	69db      	ldr	r3, [r3, #28]
 8010a6e:	2b00      	cmp	r3, #0
 8010a70:	d003      	beq.n	8010a7a <netif_set_link_down+0x4e>
 8010a72:	687b      	ldr	r3, [r7, #4]
 8010a74:	69db      	ldr	r3, [r3, #28]
 8010a76:	6878      	ldr	r0, [r7, #4]
 8010a78:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 8010a7a:	3708      	adds	r7, #8
 8010a7c:	46bd      	mov	sp, r7
 8010a7e:	bd80      	pop	{r7, pc}
 8010a80:	0801cde8 	.word	0x0801cde8
 8010a84:	0801cff4 	.word	0x0801cff4
 8010a88:	0801ce38 	.word	0x0801ce38

08010a8c <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 8010a8c:	b480      	push	{r7}
 8010a8e:	b083      	sub	sp, #12
 8010a90:	af00      	add	r7, sp, #0
 8010a92:	6078      	str	r0, [r7, #4]
 8010a94:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 8010a96:	687b      	ldr	r3, [r7, #4]
 8010a98:	2b00      	cmp	r3, #0
 8010a9a:	d002      	beq.n	8010aa2 <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 8010a9c:	687b      	ldr	r3, [r7, #4]
 8010a9e:	683a      	ldr	r2, [r7, #0]
 8010aa0:	61da      	str	r2, [r3, #28]
  }
}
 8010aa2:	bf00      	nop
 8010aa4:	370c      	adds	r7, #12
 8010aa6:	46bd      	mov	sp, r7
 8010aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010aac:	4770      	bx	lr

08010aae <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 8010aae:	b480      	push	{r7}
 8010ab0:	b085      	sub	sp, #20
 8010ab2:	af00      	add	r7, sp, #0
 8010ab4:	60f8      	str	r0, [r7, #12]
 8010ab6:	60b9      	str	r1, [r7, #8]
 8010ab8:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 8010aba:	f06f 030b 	mvn.w	r3, #11
}
 8010abe:	4618      	mov	r0, r3
 8010ac0:	3714      	adds	r7, #20
 8010ac2:	46bd      	mov	sp, r7
 8010ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ac8:	4770      	bx	lr
	...

08010acc <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 8010acc:	b480      	push	{r7}
 8010ace:	b085      	sub	sp, #20
 8010ad0:	af00      	add	r7, sp, #0
 8010ad2:	4603      	mov	r3, r0
 8010ad4:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 8010ad6:	79fb      	ldrb	r3, [r7, #7]
 8010ad8:	2b00      	cmp	r3, #0
 8010ada:	d013      	beq.n	8010b04 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 8010adc:	4b0d      	ldr	r3, [pc, #52]	; (8010b14 <netif_get_by_index+0x48>)
 8010ade:	681b      	ldr	r3, [r3, #0]
 8010ae0:	60fb      	str	r3, [r7, #12]
 8010ae2:	e00c      	b.n	8010afe <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 8010ae4:	68fb      	ldr	r3, [r7, #12]
 8010ae6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8010aea:	3301      	adds	r3, #1
 8010aec:	b2db      	uxtb	r3, r3
 8010aee:	79fa      	ldrb	r2, [r7, #7]
 8010af0:	429a      	cmp	r2, r3
 8010af2:	d101      	bne.n	8010af8 <netif_get_by_index+0x2c>
        return netif; /* found! */
 8010af4:	68fb      	ldr	r3, [r7, #12]
 8010af6:	e006      	b.n	8010b06 <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 8010af8:	68fb      	ldr	r3, [r7, #12]
 8010afa:	681b      	ldr	r3, [r3, #0]
 8010afc:	60fb      	str	r3, [r7, #12]
 8010afe:	68fb      	ldr	r3, [r7, #12]
 8010b00:	2b00      	cmp	r3, #0
 8010b02:	d1ef      	bne.n	8010ae4 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 8010b04:	2300      	movs	r3, #0
}
 8010b06:	4618      	mov	r0, r3
 8010b08:	3714      	adds	r7, #20
 8010b0a:	46bd      	mov	sp, r7
 8010b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b10:	4770      	bx	lr
 8010b12:	bf00      	nop
 8010b14:	200070c8 	.word	0x200070c8

08010b18 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 8010b18:	b480      	push	{r7}
 8010b1a:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
 8010b1c:	4b03      	ldr	r3, [pc, #12]	; (8010b2c <pbuf_pool_is_empty+0x14>)
 8010b1e:	2201      	movs	r2, #1
 8010b20:	701a      	strb	r2, [r3, #0]
  if (!queued) {
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 8010b22:	bf00      	nop
 8010b24:	46bd      	mov	sp, r7
 8010b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b2a:	4770      	bx	lr
 8010b2c:	200070d1 	.word	0x200070d1

08010b30 <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 8010b30:	b480      	push	{r7}
 8010b32:	b085      	sub	sp, #20
 8010b34:	af00      	add	r7, sp, #0
 8010b36:	60f8      	str	r0, [r7, #12]
 8010b38:	60b9      	str	r1, [r7, #8]
 8010b3a:	4611      	mov	r1, r2
 8010b3c:	461a      	mov	r2, r3
 8010b3e:	460b      	mov	r3, r1
 8010b40:	80fb      	strh	r3, [r7, #6]
 8010b42:	4613      	mov	r3, r2
 8010b44:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 8010b46:	68fb      	ldr	r3, [r7, #12]
 8010b48:	2200      	movs	r2, #0
 8010b4a:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 8010b4c:	68fb      	ldr	r3, [r7, #12]
 8010b4e:	68ba      	ldr	r2, [r7, #8]
 8010b50:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 8010b52:	68fb      	ldr	r3, [r7, #12]
 8010b54:	88fa      	ldrh	r2, [r7, #6]
 8010b56:	811a      	strh	r2, [r3, #8]
  p->len = len;
 8010b58:	68fb      	ldr	r3, [r7, #12]
 8010b5a:	88ba      	ldrh	r2, [r7, #4]
 8010b5c:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 8010b5e:	8b3b      	ldrh	r3, [r7, #24]
 8010b60:	b2da      	uxtb	r2, r3
 8010b62:	68fb      	ldr	r3, [r7, #12]
 8010b64:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 8010b66:	68fb      	ldr	r3, [r7, #12]
 8010b68:	7f3a      	ldrb	r2, [r7, #28]
 8010b6a:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 8010b6c:	68fb      	ldr	r3, [r7, #12]
 8010b6e:	2201      	movs	r2, #1
 8010b70:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 8010b72:	68fb      	ldr	r3, [r7, #12]
 8010b74:	2200      	movs	r2, #0
 8010b76:	73da      	strb	r2, [r3, #15]
}
 8010b78:	bf00      	nop
 8010b7a:	3714      	adds	r7, #20
 8010b7c:	46bd      	mov	sp, r7
 8010b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b82:	4770      	bx	lr

08010b84 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 8010b84:	b580      	push	{r7, lr}
 8010b86:	b08c      	sub	sp, #48	; 0x30
 8010b88:	af02      	add	r7, sp, #8
 8010b8a:	4603      	mov	r3, r0
 8010b8c:	71fb      	strb	r3, [r7, #7]
 8010b8e:	460b      	mov	r3, r1
 8010b90:	80bb      	strh	r3, [r7, #4]
 8010b92:	4613      	mov	r3, r2
 8010b94:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 8010b96:	79fb      	ldrb	r3, [r7, #7]
 8010b98:	847b      	strh	r3, [r7, #34]	; 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 8010b9a:	887b      	ldrh	r3, [r7, #2]
 8010b9c:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 8010ba0:	f000 8082 	beq.w	8010ca8 <pbuf_alloc+0x124>
 8010ba4:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 8010ba8:	f300 80c9 	bgt.w	8010d3e <pbuf_alloc+0x1ba>
 8010bac:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 8010bb0:	d010      	beq.n	8010bd4 <pbuf_alloc+0x50>
 8010bb2:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 8010bb6:	f300 80c2 	bgt.w	8010d3e <pbuf_alloc+0x1ba>
 8010bba:	2b01      	cmp	r3, #1
 8010bbc:	d002      	beq.n	8010bc4 <pbuf_alloc+0x40>
 8010bbe:	2b41      	cmp	r3, #65	; 0x41
 8010bc0:	f040 80bd 	bne.w	8010d3e <pbuf_alloc+0x1ba>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 8010bc4:	887a      	ldrh	r2, [r7, #2]
 8010bc6:	88bb      	ldrh	r3, [r7, #4]
 8010bc8:	4619      	mov	r1, r3
 8010bca:	2000      	movs	r0, #0
 8010bcc:	f000 f8d2 	bl	8010d74 <pbuf_alloc_reference>
 8010bd0:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 8010bd2:	e0be      	b.n	8010d52 <pbuf_alloc+0x1ce>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 8010bd4:	2300      	movs	r3, #0
 8010bd6:	627b      	str	r3, [r7, #36]	; 0x24
      last = NULL;
 8010bd8:	2300      	movs	r3, #0
 8010bda:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 8010bdc:	88bb      	ldrh	r3, [r7, #4]
 8010bde:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 8010be0:	2008      	movs	r0, #8
 8010be2:	f7ff fbed 	bl	80103c0 <memp_malloc>
 8010be6:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 8010be8:	693b      	ldr	r3, [r7, #16]
 8010bea:	2b00      	cmp	r3, #0
 8010bec:	d109      	bne.n	8010c02 <pbuf_alloc+0x7e>
          PBUF_POOL_IS_EMPTY();
 8010bee:	f7ff ff93 	bl	8010b18 <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 8010bf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010bf4:	2b00      	cmp	r3, #0
 8010bf6:	d002      	beq.n	8010bfe <pbuf_alloc+0x7a>
            pbuf_free(p);
 8010bf8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8010bfa:	f000 faa7 	bl	801114c <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 8010bfe:	2300      	movs	r3, #0
 8010c00:	e0a8      	b.n	8010d54 <pbuf_alloc+0x1d0>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 8010c02:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8010c04:	3303      	adds	r3, #3
 8010c06:	b29b      	uxth	r3, r3
 8010c08:	f023 0303 	bic.w	r3, r3, #3
 8010c0c:	b29a      	uxth	r2, r3
 8010c0e:	f240 53ec 	movw	r3, #1516	; 0x5ec
 8010c12:	1a9b      	subs	r3, r3, r2
 8010c14:	b29b      	uxth	r3, r3
 8010c16:	8b7a      	ldrh	r2, [r7, #26]
 8010c18:	4293      	cmp	r3, r2
 8010c1a:	bf28      	it	cs
 8010c1c:	4613      	movcs	r3, r2
 8010c1e:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 8010c20:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8010c22:	3310      	adds	r3, #16
 8010c24:	693a      	ldr	r2, [r7, #16]
 8010c26:	4413      	add	r3, r2
 8010c28:	3303      	adds	r3, #3
 8010c2a:	f023 0303 	bic.w	r3, r3, #3
 8010c2e:	4618      	mov	r0, r3
 8010c30:	89f9      	ldrh	r1, [r7, #14]
 8010c32:	8b7a      	ldrh	r2, [r7, #26]
 8010c34:	2300      	movs	r3, #0
 8010c36:	9301      	str	r3, [sp, #4]
 8010c38:	887b      	ldrh	r3, [r7, #2]
 8010c3a:	9300      	str	r3, [sp, #0]
 8010c3c:	460b      	mov	r3, r1
 8010c3e:	4601      	mov	r1, r0
 8010c40:	6938      	ldr	r0, [r7, #16]
 8010c42:	f7ff ff75 	bl	8010b30 <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 8010c46:	693b      	ldr	r3, [r7, #16]
 8010c48:	685b      	ldr	r3, [r3, #4]
 8010c4a:	f003 0303 	and.w	r3, r3, #3
 8010c4e:	2b00      	cmp	r3, #0
 8010c50:	d006      	beq.n	8010c60 <pbuf_alloc+0xdc>
 8010c52:	4b42      	ldr	r3, [pc, #264]	; (8010d5c <pbuf_alloc+0x1d8>)
 8010c54:	f44f 7280 	mov.w	r2, #256	; 0x100
 8010c58:	4941      	ldr	r1, [pc, #260]	; (8010d60 <pbuf_alloc+0x1dc>)
 8010c5a:	4842      	ldr	r0, [pc, #264]	; (8010d64 <pbuf_alloc+0x1e0>)
 8010c5c:	f009 f94c 	bl	8019ef8 <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 8010c60:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8010c62:	3303      	adds	r3, #3
 8010c64:	f023 0303 	bic.w	r3, r3, #3
 8010c68:	f240 52ec 	movw	r2, #1516	; 0x5ec
 8010c6c:	4293      	cmp	r3, r2
 8010c6e:	d106      	bne.n	8010c7e <pbuf_alloc+0xfa>
 8010c70:	4b3a      	ldr	r3, [pc, #232]	; (8010d5c <pbuf_alloc+0x1d8>)
 8010c72:	f44f 7281 	mov.w	r2, #258	; 0x102
 8010c76:	493c      	ldr	r1, [pc, #240]	; (8010d68 <pbuf_alloc+0x1e4>)
 8010c78:	483a      	ldr	r0, [pc, #232]	; (8010d64 <pbuf_alloc+0x1e0>)
 8010c7a:	f009 f93d 	bl	8019ef8 <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 8010c7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010c80:	2b00      	cmp	r3, #0
 8010c82:	d102      	bne.n	8010c8a <pbuf_alloc+0x106>
          /* allocated head of pbuf chain (into p) */
          p = q;
 8010c84:	693b      	ldr	r3, [r7, #16]
 8010c86:	627b      	str	r3, [r7, #36]	; 0x24
 8010c88:	e002      	b.n	8010c90 <pbuf_alloc+0x10c>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 8010c8a:	69fb      	ldr	r3, [r7, #28]
 8010c8c:	693a      	ldr	r2, [r7, #16]
 8010c8e:	601a      	str	r2, [r3, #0]
        }
        last = q;
 8010c90:	693b      	ldr	r3, [r7, #16]
 8010c92:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 8010c94:	8b7a      	ldrh	r2, [r7, #26]
 8010c96:	89fb      	ldrh	r3, [r7, #14]
 8010c98:	1ad3      	subs	r3, r2, r3
 8010c9a:	837b      	strh	r3, [r7, #26]
        offset = 0;
 8010c9c:	2300      	movs	r3, #0
 8010c9e:	847b      	strh	r3, [r7, #34]	; 0x22
      } while (rem_len > 0);
 8010ca0:	8b7b      	ldrh	r3, [r7, #26]
 8010ca2:	2b00      	cmp	r3, #0
 8010ca4:	d19c      	bne.n	8010be0 <pbuf_alloc+0x5c>
      break;
 8010ca6:	e054      	b.n	8010d52 <pbuf_alloc+0x1ce>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 8010ca8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8010caa:	3303      	adds	r3, #3
 8010cac:	b29b      	uxth	r3, r3
 8010cae:	f023 0303 	bic.w	r3, r3, #3
 8010cb2:	b29a      	uxth	r2, r3
 8010cb4:	88bb      	ldrh	r3, [r7, #4]
 8010cb6:	3303      	adds	r3, #3
 8010cb8:	b29b      	uxth	r3, r3
 8010cba:	f023 0303 	bic.w	r3, r3, #3
 8010cbe:	b29b      	uxth	r3, r3
 8010cc0:	4413      	add	r3, r2
 8010cc2:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 8010cc4:	8b3b      	ldrh	r3, [r7, #24]
 8010cc6:	3310      	adds	r3, #16
 8010cc8:	617b      	str	r3, [r7, #20]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8010cca:	8b3a      	ldrh	r2, [r7, #24]
 8010ccc:	88bb      	ldrh	r3, [r7, #4]
 8010cce:	3303      	adds	r3, #3
 8010cd0:	f023 0303 	bic.w	r3, r3, #3
 8010cd4:	429a      	cmp	r2, r3
 8010cd6:	d306      	bcc.n	8010ce6 <pbuf_alloc+0x162>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 8010cd8:	88bb      	ldrh	r3, [r7, #4]
 8010cda:	3303      	adds	r3, #3
 8010cdc:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8010ce0:	697a      	ldr	r2, [r7, #20]
 8010ce2:	429a      	cmp	r2, r3
 8010ce4:	d201      	bcs.n	8010cea <pbuf_alloc+0x166>
        return NULL;
 8010ce6:	2300      	movs	r3, #0
 8010ce8:	e034      	b.n	8010d54 <pbuf_alloc+0x1d0>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 8010cea:	6978      	ldr	r0, [r7, #20]
 8010cec:	f7ff f9e0 	bl	80100b0 <mem_malloc>
 8010cf0:	6278      	str	r0, [r7, #36]	; 0x24
      if (p == NULL) {
 8010cf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010cf4:	2b00      	cmp	r3, #0
 8010cf6:	d101      	bne.n	8010cfc <pbuf_alloc+0x178>
        return NULL;
 8010cf8:	2300      	movs	r3, #0
 8010cfa:	e02b      	b.n	8010d54 <pbuf_alloc+0x1d0>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 8010cfc:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8010cfe:	3310      	adds	r3, #16
 8010d00:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010d02:	4413      	add	r3, r2
 8010d04:	3303      	adds	r3, #3
 8010d06:	f023 0303 	bic.w	r3, r3, #3
 8010d0a:	4618      	mov	r0, r3
 8010d0c:	88b9      	ldrh	r1, [r7, #4]
 8010d0e:	88ba      	ldrh	r2, [r7, #4]
 8010d10:	2300      	movs	r3, #0
 8010d12:	9301      	str	r3, [sp, #4]
 8010d14:	887b      	ldrh	r3, [r7, #2]
 8010d16:	9300      	str	r3, [sp, #0]
 8010d18:	460b      	mov	r3, r1
 8010d1a:	4601      	mov	r1, r0
 8010d1c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8010d1e:	f7ff ff07 	bl	8010b30 <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 8010d22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010d24:	685b      	ldr	r3, [r3, #4]
 8010d26:	f003 0303 	and.w	r3, r3, #3
 8010d2a:	2b00      	cmp	r3, #0
 8010d2c:	d010      	beq.n	8010d50 <pbuf_alloc+0x1cc>
 8010d2e:	4b0b      	ldr	r3, [pc, #44]	; (8010d5c <pbuf_alloc+0x1d8>)
 8010d30:	f44f 7291 	mov.w	r2, #290	; 0x122
 8010d34:	490d      	ldr	r1, [pc, #52]	; (8010d6c <pbuf_alloc+0x1e8>)
 8010d36:	480b      	ldr	r0, [pc, #44]	; (8010d64 <pbuf_alloc+0x1e0>)
 8010d38:	f009 f8de 	bl	8019ef8 <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 8010d3c:	e008      	b.n	8010d50 <pbuf_alloc+0x1cc>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 8010d3e:	4b07      	ldr	r3, [pc, #28]	; (8010d5c <pbuf_alloc+0x1d8>)
 8010d40:	f240 1227 	movw	r2, #295	; 0x127
 8010d44:	490a      	ldr	r1, [pc, #40]	; (8010d70 <pbuf_alloc+0x1ec>)
 8010d46:	4807      	ldr	r0, [pc, #28]	; (8010d64 <pbuf_alloc+0x1e0>)
 8010d48:	f009 f8d6 	bl	8019ef8 <iprintf>
      return NULL;
 8010d4c:	2300      	movs	r3, #0
 8010d4e:	e001      	b.n	8010d54 <pbuf_alloc+0x1d0>
      break;
 8010d50:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 8010d52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8010d54:	4618      	mov	r0, r3
 8010d56:	3728      	adds	r7, #40	; 0x28
 8010d58:	46bd      	mov	sp, r7
 8010d5a:	bd80      	pop	{r7, pc}
 8010d5c:	0801d018 	.word	0x0801d018
 8010d60:	0801d048 	.word	0x0801d048
 8010d64:	0801d078 	.word	0x0801d078
 8010d68:	0801d0a0 	.word	0x0801d0a0
 8010d6c:	0801d0d4 	.word	0x0801d0d4
 8010d70:	0801d100 	.word	0x0801d100

08010d74 <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 8010d74:	b580      	push	{r7, lr}
 8010d76:	b086      	sub	sp, #24
 8010d78:	af02      	add	r7, sp, #8
 8010d7a:	6078      	str	r0, [r7, #4]
 8010d7c:	460b      	mov	r3, r1
 8010d7e:	807b      	strh	r3, [r7, #2]
 8010d80:	4613      	mov	r3, r2
 8010d82:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 8010d84:	883b      	ldrh	r3, [r7, #0]
 8010d86:	2b41      	cmp	r3, #65	; 0x41
 8010d88:	d009      	beq.n	8010d9e <pbuf_alloc_reference+0x2a>
 8010d8a:	883b      	ldrh	r3, [r7, #0]
 8010d8c:	2b01      	cmp	r3, #1
 8010d8e:	d006      	beq.n	8010d9e <pbuf_alloc_reference+0x2a>
 8010d90:	4b0f      	ldr	r3, [pc, #60]	; (8010dd0 <pbuf_alloc_reference+0x5c>)
 8010d92:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 8010d96:	490f      	ldr	r1, [pc, #60]	; (8010dd4 <pbuf_alloc_reference+0x60>)
 8010d98:	480f      	ldr	r0, [pc, #60]	; (8010dd8 <pbuf_alloc_reference+0x64>)
 8010d9a:	f009 f8ad 	bl	8019ef8 <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 8010d9e:	2007      	movs	r0, #7
 8010da0:	f7ff fb0e 	bl	80103c0 <memp_malloc>
 8010da4:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 8010da6:	68fb      	ldr	r3, [r7, #12]
 8010da8:	2b00      	cmp	r3, #0
 8010daa:	d101      	bne.n	8010db0 <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 8010dac:	2300      	movs	r3, #0
 8010dae:	e00b      	b.n	8010dc8 <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 8010db0:	8879      	ldrh	r1, [r7, #2]
 8010db2:	887a      	ldrh	r2, [r7, #2]
 8010db4:	2300      	movs	r3, #0
 8010db6:	9301      	str	r3, [sp, #4]
 8010db8:	883b      	ldrh	r3, [r7, #0]
 8010dba:	9300      	str	r3, [sp, #0]
 8010dbc:	460b      	mov	r3, r1
 8010dbe:	6879      	ldr	r1, [r7, #4]
 8010dc0:	68f8      	ldr	r0, [r7, #12]
 8010dc2:	f7ff feb5 	bl	8010b30 <pbuf_init_alloced_pbuf>
  return p;
 8010dc6:	68fb      	ldr	r3, [r7, #12]
}
 8010dc8:	4618      	mov	r0, r3
 8010dca:	3710      	adds	r7, #16
 8010dcc:	46bd      	mov	sp, r7
 8010dce:	bd80      	pop	{r7, pc}
 8010dd0:	0801d018 	.word	0x0801d018
 8010dd4:	0801d11c 	.word	0x0801d11c
 8010dd8:	0801d078 	.word	0x0801d078

08010ddc <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 8010ddc:	b580      	push	{r7, lr}
 8010dde:	b088      	sub	sp, #32
 8010de0:	af02      	add	r7, sp, #8
 8010de2:	607b      	str	r3, [r7, #4]
 8010de4:	4603      	mov	r3, r0
 8010de6:	73fb      	strb	r3, [r7, #15]
 8010de8:	460b      	mov	r3, r1
 8010dea:	81bb      	strh	r3, [r7, #12]
 8010dec:	4613      	mov	r3, r2
 8010dee:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 8010df0:	7bfb      	ldrb	r3, [r7, #15]
 8010df2:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 8010df4:	8a7b      	ldrh	r3, [r7, #18]
 8010df6:	3303      	adds	r3, #3
 8010df8:	f023 0203 	bic.w	r2, r3, #3
 8010dfc:	89bb      	ldrh	r3, [r7, #12]
 8010dfe:	441a      	add	r2, r3
 8010e00:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8010e02:	429a      	cmp	r2, r3
 8010e04:	d901      	bls.n	8010e0a <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 8010e06:	2300      	movs	r3, #0
 8010e08:	e018      	b.n	8010e3c <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 8010e0a:	6a3b      	ldr	r3, [r7, #32]
 8010e0c:	2b00      	cmp	r3, #0
 8010e0e:	d007      	beq.n	8010e20 <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 8010e10:	8a7b      	ldrh	r3, [r7, #18]
 8010e12:	3303      	adds	r3, #3
 8010e14:	f023 0303 	bic.w	r3, r3, #3
 8010e18:	6a3a      	ldr	r2, [r7, #32]
 8010e1a:	4413      	add	r3, r2
 8010e1c:	617b      	str	r3, [r7, #20]
 8010e1e:	e001      	b.n	8010e24 <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 8010e20:	2300      	movs	r3, #0
 8010e22:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 8010e24:	6878      	ldr	r0, [r7, #4]
 8010e26:	89b9      	ldrh	r1, [r7, #12]
 8010e28:	89ba      	ldrh	r2, [r7, #12]
 8010e2a:	2302      	movs	r3, #2
 8010e2c:	9301      	str	r3, [sp, #4]
 8010e2e:	897b      	ldrh	r3, [r7, #10]
 8010e30:	9300      	str	r3, [sp, #0]
 8010e32:	460b      	mov	r3, r1
 8010e34:	6979      	ldr	r1, [r7, #20]
 8010e36:	f7ff fe7b 	bl	8010b30 <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 8010e3a:	687b      	ldr	r3, [r7, #4]
}
 8010e3c:	4618      	mov	r0, r3
 8010e3e:	3718      	adds	r7, #24
 8010e40:	46bd      	mov	sp, r7
 8010e42:	bd80      	pop	{r7, pc}

08010e44 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 8010e44:	b580      	push	{r7, lr}
 8010e46:	b084      	sub	sp, #16
 8010e48:	af00      	add	r7, sp, #0
 8010e4a:	6078      	str	r0, [r7, #4]
 8010e4c:	460b      	mov	r3, r1
 8010e4e:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 8010e50:	687b      	ldr	r3, [r7, #4]
 8010e52:	2b00      	cmp	r3, #0
 8010e54:	d106      	bne.n	8010e64 <pbuf_realloc+0x20>
 8010e56:	4b39      	ldr	r3, [pc, #228]	; (8010f3c <pbuf_realloc+0xf8>)
 8010e58:	f44f 72cc 	mov.w	r2, #408	; 0x198
 8010e5c:	4938      	ldr	r1, [pc, #224]	; (8010f40 <pbuf_realloc+0xfc>)
 8010e5e:	4839      	ldr	r0, [pc, #228]	; (8010f44 <pbuf_realloc+0x100>)
 8010e60:	f009 f84a 	bl	8019ef8 <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 8010e64:	687b      	ldr	r3, [r7, #4]
 8010e66:	891b      	ldrh	r3, [r3, #8]
 8010e68:	887a      	ldrh	r2, [r7, #2]
 8010e6a:	429a      	cmp	r2, r3
 8010e6c:	d261      	bcs.n	8010f32 <pbuf_realloc+0xee>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 8010e6e:	687b      	ldr	r3, [r7, #4]
 8010e70:	891a      	ldrh	r2, [r3, #8]
 8010e72:	887b      	ldrh	r3, [r7, #2]
 8010e74:	1ad3      	subs	r3, r2, r3
 8010e76:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 8010e78:	887b      	ldrh	r3, [r7, #2]
 8010e7a:	817b      	strh	r3, [r7, #10]
  q = p;
 8010e7c:	687b      	ldr	r3, [r7, #4]
 8010e7e:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 8010e80:	e018      	b.n	8010eb4 <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 8010e82:	68fb      	ldr	r3, [r7, #12]
 8010e84:	895b      	ldrh	r3, [r3, #10]
 8010e86:	897a      	ldrh	r2, [r7, #10]
 8010e88:	1ad3      	subs	r3, r2, r3
 8010e8a:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 8010e8c:	68fb      	ldr	r3, [r7, #12]
 8010e8e:	891a      	ldrh	r2, [r3, #8]
 8010e90:	893b      	ldrh	r3, [r7, #8]
 8010e92:	1ad3      	subs	r3, r2, r3
 8010e94:	b29a      	uxth	r2, r3
 8010e96:	68fb      	ldr	r3, [r7, #12]
 8010e98:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 8010e9a:	68fb      	ldr	r3, [r7, #12]
 8010e9c:	681b      	ldr	r3, [r3, #0]
 8010e9e:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 8010ea0:	68fb      	ldr	r3, [r7, #12]
 8010ea2:	2b00      	cmp	r3, #0
 8010ea4:	d106      	bne.n	8010eb4 <pbuf_realloc+0x70>
 8010ea6:	4b25      	ldr	r3, [pc, #148]	; (8010f3c <pbuf_realloc+0xf8>)
 8010ea8:	f240 12af 	movw	r2, #431	; 0x1af
 8010eac:	4926      	ldr	r1, [pc, #152]	; (8010f48 <pbuf_realloc+0x104>)
 8010eae:	4825      	ldr	r0, [pc, #148]	; (8010f44 <pbuf_realloc+0x100>)
 8010eb0:	f009 f822 	bl	8019ef8 <iprintf>
  while (rem_len > q->len) {
 8010eb4:	68fb      	ldr	r3, [r7, #12]
 8010eb6:	895b      	ldrh	r3, [r3, #10]
 8010eb8:	897a      	ldrh	r2, [r7, #10]
 8010eba:	429a      	cmp	r2, r3
 8010ebc:	d8e1      	bhi.n	8010e82 <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 8010ebe:	68fb      	ldr	r3, [r7, #12]
 8010ec0:	7b1b      	ldrb	r3, [r3, #12]
 8010ec2:	f003 030f 	and.w	r3, r3, #15
 8010ec6:	2b00      	cmp	r3, #0
 8010ec8:	d11f      	bne.n	8010f0a <pbuf_realloc+0xc6>
 8010eca:	68fb      	ldr	r3, [r7, #12]
 8010ecc:	895b      	ldrh	r3, [r3, #10]
 8010ece:	897a      	ldrh	r2, [r7, #10]
 8010ed0:	429a      	cmp	r2, r3
 8010ed2:	d01a      	beq.n	8010f0a <pbuf_realloc+0xc6>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 8010ed4:	68fb      	ldr	r3, [r7, #12]
 8010ed6:	7b5b      	ldrb	r3, [r3, #13]
 8010ed8:	f003 0302 	and.w	r3, r3, #2
 8010edc:	2b00      	cmp	r3, #0
 8010ede:	d114      	bne.n	8010f0a <pbuf_realloc+0xc6>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 8010ee0:	68fb      	ldr	r3, [r7, #12]
 8010ee2:	685a      	ldr	r2, [r3, #4]
 8010ee4:	68fb      	ldr	r3, [r7, #12]
 8010ee6:	1ad2      	subs	r2, r2, r3
 8010ee8:	897b      	ldrh	r3, [r7, #10]
 8010eea:	4413      	add	r3, r2
 8010eec:	4619      	mov	r1, r3
 8010eee:	68f8      	ldr	r0, [r7, #12]
 8010ef0:	f7fe ffea 	bl	800fec8 <mem_trim>
 8010ef4:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 8010ef6:	68fb      	ldr	r3, [r7, #12]
 8010ef8:	2b00      	cmp	r3, #0
 8010efa:	d106      	bne.n	8010f0a <pbuf_realloc+0xc6>
 8010efc:	4b0f      	ldr	r3, [pc, #60]	; (8010f3c <pbuf_realloc+0xf8>)
 8010efe:	f240 12bd 	movw	r2, #445	; 0x1bd
 8010f02:	4912      	ldr	r1, [pc, #72]	; (8010f4c <pbuf_realloc+0x108>)
 8010f04:	480f      	ldr	r0, [pc, #60]	; (8010f44 <pbuf_realloc+0x100>)
 8010f06:	f008 fff7 	bl	8019ef8 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 8010f0a:	68fb      	ldr	r3, [r7, #12]
 8010f0c:	897a      	ldrh	r2, [r7, #10]
 8010f0e:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 8010f10:	68fb      	ldr	r3, [r7, #12]
 8010f12:	895a      	ldrh	r2, [r3, #10]
 8010f14:	68fb      	ldr	r3, [r7, #12]
 8010f16:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 8010f18:	68fb      	ldr	r3, [r7, #12]
 8010f1a:	681b      	ldr	r3, [r3, #0]
 8010f1c:	2b00      	cmp	r3, #0
 8010f1e:	d004      	beq.n	8010f2a <pbuf_realloc+0xe6>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 8010f20:	68fb      	ldr	r3, [r7, #12]
 8010f22:	681b      	ldr	r3, [r3, #0]
 8010f24:	4618      	mov	r0, r3
 8010f26:	f000 f911 	bl	801114c <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 8010f2a:	68fb      	ldr	r3, [r7, #12]
 8010f2c:	2200      	movs	r2, #0
 8010f2e:	601a      	str	r2, [r3, #0]
 8010f30:	e000      	b.n	8010f34 <pbuf_realloc+0xf0>
    return;
 8010f32:	bf00      	nop

}
 8010f34:	3710      	adds	r7, #16
 8010f36:	46bd      	mov	sp, r7
 8010f38:	bd80      	pop	{r7, pc}
 8010f3a:	bf00      	nop
 8010f3c:	0801d018 	.word	0x0801d018
 8010f40:	0801d130 	.word	0x0801d130
 8010f44:	0801d078 	.word	0x0801d078
 8010f48:	0801d148 	.word	0x0801d148
 8010f4c:	0801d160 	.word	0x0801d160

08010f50 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 8010f50:	b580      	push	{r7, lr}
 8010f52:	b086      	sub	sp, #24
 8010f54:	af00      	add	r7, sp, #0
 8010f56:	60f8      	str	r0, [r7, #12]
 8010f58:	60b9      	str	r1, [r7, #8]
 8010f5a:	4613      	mov	r3, r2
 8010f5c:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 8010f5e:	68fb      	ldr	r3, [r7, #12]
 8010f60:	2b00      	cmp	r3, #0
 8010f62:	d106      	bne.n	8010f72 <pbuf_add_header_impl+0x22>
 8010f64:	4b2b      	ldr	r3, [pc, #172]	; (8011014 <pbuf_add_header_impl+0xc4>)
 8010f66:	f240 12df 	movw	r2, #479	; 0x1df
 8010f6a:	492b      	ldr	r1, [pc, #172]	; (8011018 <pbuf_add_header_impl+0xc8>)
 8010f6c:	482b      	ldr	r0, [pc, #172]	; (801101c <pbuf_add_header_impl+0xcc>)
 8010f6e:	f008 ffc3 	bl	8019ef8 <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 8010f72:	68fb      	ldr	r3, [r7, #12]
 8010f74:	2b00      	cmp	r3, #0
 8010f76:	d003      	beq.n	8010f80 <pbuf_add_header_impl+0x30>
 8010f78:	68bb      	ldr	r3, [r7, #8]
 8010f7a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8010f7e:	d301      	bcc.n	8010f84 <pbuf_add_header_impl+0x34>
    return 1;
 8010f80:	2301      	movs	r3, #1
 8010f82:	e043      	b.n	801100c <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 8010f84:	68bb      	ldr	r3, [r7, #8]
 8010f86:	2b00      	cmp	r3, #0
 8010f88:	d101      	bne.n	8010f8e <pbuf_add_header_impl+0x3e>
    return 0;
 8010f8a:	2300      	movs	r3, #0
 8010f8c:	e03e      	b.n	801100c <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 8010f8e:	68bb      	ldr	r3, [r7, #8]
 8010f90:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 8010f92:	68fb      	ldr	r3, [r7, #12]
 8010f94:	891a      	ldrh	r2, [r3, #8]
 8010f96:	8a7b      	ldrh	r3, [r7, #18]
 8010f98:	4413      	add	r3, r2
 8010f9a:	b29b      	uxth	r3, r3
 8010f9c:	8a7a      	ldrh	r2, [r7, #18]
 8010f9e:	429a      	cmp	r2, r3
 8010fa0:	d901      	bls.n	8010fa6 <pbuf_add_header_impl+0x56>
    return 1;
 8010fa2:	2301      	movs	r3, #1
 8010fa4:	e032      	b.n	801100c <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 8010fa6:	68fb      	ldr	r3, [r7, #12]
 8010fa8:	7b1b      	ldrb	r3, [r3, #12]
 8010faa:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 8010fac:	8a3b      	ldrh	r3, [r7, #16]
 8010fae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010fb2:	2b00      	cmp	r3, #0
 8010fb4:	d00c      	beq.n	8010fd0 <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 8010fb6:	68fb      	ldr	r3, [r7, #12]
 8010fb8:	685a      	ldr	r2, [r3, #4]
 8010fba:	68bb      	ldr	r3, [r7, #8]
 8010fbc:	425b      	negs	r3, r3
 8010fbe:	4413      	add	r3, r2
 8010fc0:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 8010fc2:	68fb      	ldr	r3, [r7, #12]
 8010fc4:	3310      	adds	r3, #16
 8010fc6:	697a      	ldr	r2, [r7, #20]
 8010fc8:	429a      	cmp	r2, r3
 8010fca:	d20d      	bcs.n	8010fe8 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 8010fcc:	2301      	movs	r3, #1
 8010fce:	e01d      	b.n	801100c <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 8010fd0:	79fb      	ldrb	r3, [r7, #7]
 8010fd2:	2b00      	cmp	r3, #0
 8010fd4:	d006      	beq.n	8010fe4 <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 8010fd6:	68fb      	ldr	r3, [r7, #12]
 8010fd8:	685a      	ldr	r2, [r3, #4]
 8010fda:	68bb      	ldr	r3, [r7, #8]
 8010fdc:	425b      	negs	r3, r3
 8010fde:	4413      	add	r3, r2
 8010fe0:	617b      	str	r3, [r7, #20]
 8010fe2:	e001      	b.n	8010fe8 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 8010fe4:	2301      	movs	r3, #1
 8010fe6:	e011      	b.n	801100c <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 8010fe8:	68fb      	ldr	r3, [r7, #12]
 8010fea:	697a      	ldr	r2, [r7, #20]
 8010fec:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 8010fee:	68fb      	ldr	r3, [r7, #12]
 8010ff0:	895a      	ldrh	r2, [r3, #10]
 8010ff2:	8a7b      	ldrh	r3, [r7, #18]
 8010ff4:	4413      	add	r3, r2
 8010ff6:	b29a      	uxth	r2, r3
 8010ff8:	68fb      	ldr	r3, [r7, #12]
 8010ffa:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 8010ffc:	68fb      	ldr	r3, [r7, #12]
 8010ffe:	891a      	ldrh	r2, [r3, #8]
 8011000:	8a7b      	ldrh	r3, [r7, #18]
 8011002:	4413      	add	r3, r2
 8011004:	b29a      	uxth	r2, r3
 8011006:	68fb      	ldr	r3, [r7, #12]
 8011008:	811a      	strh	r2, [r3, #8]


  return 0;
 801100a:	2300      	movs	r3, #0
}
 801100c:	4618      	mov	r0, r3
 801100e:	3718      	adds	r7, #24
 8011010:	46bd      	mov	sp, r7
 8011012:	bd80      	pop	{r7, pc}
 8011014:	0801d018 	.word	0x0801d018
 8011018:	0801d17c 	.word	0x0801d17c
 801101c:	0801d078 	.word	0x0801d078

08011020 <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 8011020:	b580      	push	{r7, lr}
 8011022:	b082      	sub	sp, #8
 8011024:	af00      	add	r7, sp, #0
 8011026:	6078      	str	r0, [r7, #4]
 8011028:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 801102a:	2200      	movs	r2, #0
 801102c:	6839      	ldr	r1, [r7, #0]
 801102e:	6878      	ldr	r0, [r7, #4]
 8011030:	f7ff ff8e 	bl	8010f50 <pbuf_add_header_impl>
 8011034:	4603      	mov	r3, r0
}
 8011036:	4618      	mov	r0, r3
 8011038:	3708      	adds	r7, #8
 801103a:	46bd      	mov	sp, r7
 801103c:	bd80      	pop	{r7, pc}
	...

08011040 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 8011040:	b580      	push	{r7, lr}
 8011042:	b084      	sub	sp, #16
 8011044:	af00      	add	r7, sp, #0
 8011046:	6078      	str	r0, [r7, #4]
 8011048:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 801104a:	687b      	ldr	r3, [r7, #4]
 801104c:	2b00      	cmp	r3, #0
 801104e:	d106      	bne.n	801105e <pbuf_remove_header+0x1e>
 8011050:	4b20      	ldr	r3, [pc, #128]	; (80110d4 <pbuf_remove_header+0x94>)
 8011052:	f240 224b 	movw	r2, #587	; 0x24b
 8011056:	4920      	ldr	r1, [pc, #128]	; (80110d8 <pbuf_remove_header+0x98>)
 8011058:	4820      	ldr	r0, [pc, #128]	; (80110dc <pbuf_remove_header+0x9c>)
 801105a:	f008 ff4d 	bl	8019ef8 <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 801105e:	687b      	ldr	r3, [r7, #4]
 8011060:	2b00      	cmp	r3, #0
 8011062:	d003      	beq.n	801106c <pbuf_remove_header+0x2c>
 8011064:	683b      	ldr	r3, [r7, #0]
 8011066:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801106a:	d301      	bcc.n	8011070 <pbuf_remove_header+0x30>
    return 1;
 801106c:	2301      	movs	r3, #1
 801106e:	e02c      	b.n	80110ca <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 8011070:	683b      	ldr	r3, [r7, #0]
 8011072:	2b00      	cmp	r3, #0
 8011074:	d101      	bne.n	801107a <pbuf_remove_header+0x3a>
    return 0;
 8011076:	2300      	movs	r3, #0
 8011078:	e027      	b.n	80110ca <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 801107a:	683b      	ldr	r3, [r7, #0]
 801107c:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 801107e:	687b      	ldr	r3, [r7, #4]
 8011080:	895b      	ldrh	r3, [r3, #10]
 8011082:	89fa      	ldrh	r2, [r7, #14]
 8011084:	429a      	cmp	r2, r3
 8011086:	d908      	bls.n	801109a <pbuf_remove_header+0x5a>
 8011088:	4b12      	ldr	r3, [pc, #72]	; (80110d4 <pbuf_remove_header+0x94>)
 801108a:	f240 2255 	movw	r2, #597	; 0x255
 801108e:	4914      	ldr	r1, [pc, #80]	; (80110e0 <pbuf_remove_header+0xa0>)
 8011090:	4812      	ldr	r0, [pc, #72]	; (80110dc <pbuf_remove_header+0x9c>)
 8011092:	f008 ff31 	bl	8019ef8 <iprintf>
 8011096:	2301      	movs	r3, #1
 8011098:	e017      	b.n	80110ca <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 801109a:	687b      	ldr	r3, [r7, #4]
 801109c:	685b      	ldr	r3, [r3, #4]
 801109e:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 80110a0:	687b      	ldr	r3, [r7, #4]
 80110a2:	685a      	ldr	r2, [r3, #4]
 80110a4:	683b      	ldr	r3, [r7, #0]
 80110a6:	441a      	add	r2, r3
 80110a8:	687b      	ldr	r3, [r7, #4]
 80110aa:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 80110ac:	687b      	ldr	r3, [r7, #4]
 80110ae:	895a      	ldrh	r2, [r3, #10]
 80110b0:	89fb      	ldrh	r3, [r7, #14]
 80110b2:	1ad3      	subs	r3, r2, r3
 80110b4:	b29a      	uxth	r2, r3
 80110b6:	687b      	ldr	r3, [r7, #4]
 80110b8:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 80110ba:	687b      	ldr	r3, [r7, #4]
 80110bc:	891a      	ldrh	r2, [r3, #8]
 80110be:	89fb      	ldrh	r3, [r7, #14]
 80110c0:	1ad3      	subs	r3, r2, r3
 80110c2:	b29a      	uxth	r2, r3
 80110c4:	687b      	ldr	r3, [r7, #4]
 80110c6:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 80110c8:	2300      	movs	r3, #0
}
 80110ca:	4618      	mov	r0, r3
 80110cc:	3710      	adds	r7, #16
 80110ce:	46bd      	mov	sp, r7
 80110d0:	bd80      	pop	{r7, pc}
 80110d2:	bf00      	nop
 80110d4:	0801d018 	.word	0x0801d018
 80110d8:	0801d17c 	.word	0x0801d17c
 80110dc:	0801d078 	.word	0x0801d078
 80110e0:	0801d188 	.word	0x0801d188

080110e4 <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 80110e4:	b580      	push	{r7, lr}
 80110e6:	b082      	sub	sp, #8
 80110e8:	af00      	add	r7, sp, #0
 80110ea:	6078      	str	r0, [r7, #4]
 80110ec:	460b      	mov	r3, r1
 80110ee:	807b      	strh	r3, [r7, #2]
 80110f0:	4613      	mov	r3, r2
 80110f2:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 80110f4:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80110f8:	2b00      	cmp	r3, #0
 80110fa:	da08      	bge.n	801110e <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 80110fc:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8011100:	425b      	negs	r3, r3
 8011102:	4619      	mov	r1, r3
 8011104:	6878      	ldr	r0, [r7, #4]
 8011106:	f7ff ff9b 	bl	8011040 <pbuf_remove_header>
 801110a:	4603      	mov	r3, r0
 801110c:	e007      	b.n	801111e <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 801110e:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8011112:	787a      	ldrb	r2, [r7, #1]
 8011114:	4619      	mov	r1, r3
 8011116:	6878      	ldr	r0, [r7, #4]
 8011118:	f7ff ff1a 	bl	8010f50 <pbuf_add_header_impl>
 801111c:	4603      	mov	r3, r0
  }
}
 801111e:	4618      	mov	r0, r3
 8011120:	3708      	adds	r7, #8
 8011122:	46bd      	mov	sp, r7
 8011124:	bd80      	pop	{r7, pc}

08011126 <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 8011126:	b580      	push	{r7, lr}
 8011128:	b082      	sub	sp, #8
 801112a:	af00      	add	r7, sp, #0
 801112c:	6078      	str	r0, [r7, #4]
 801112e:	460b      	mov	r3, r1
 8011130:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 8011132:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8011136:	2201      	movs	r2, #1
 8011138:	4619      	mov	r1, r3
 801113a:	6878      	ldr	r0, [r7, #4]
 801113c:	f7ff ffd2 	bl	80110e4 <pbuf_header_impl>
 8011140:	4603      	mov	r3, r0
}
 8011142:	4618      	mov	r0, r3
 8011144:	3708      	adds	r7, #8
 8011146:	46bd      	mov	sp, r7
 8011148:	bd80      	pop	{r7, pc}
	...

0801114c <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 801114c:	b580      	push	{r7, lr}
 801114e:	b086      	sub	sp, #24
 8011150:	af00      	add	r7, sp, #0
 8011152:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 8011154:	687b      	ldr	r3, [r7, #4]
 8011156:	2b00      	cmp	r3, #0
 8011158:	d10b      	bne.n	8011172 <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 801115a:	687b      	ldr	r3, [r7, #4]
 801115c:	2b00      	cmp	r3, #0
 801115e:	d106      	bne.n	801116e <pbuf_free+0x22>
 8011160:	4b38      	ldr	r3, [pc, #224]	; (8011244 <pbuf_free+0xf8>)
 8011162:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 8011166:	4938      	ldr	r1, [pc, #224]	; (8011248 <pbuf_free+0xfc>)
 8011168:	4838      	ldr	r0, [pc, #224]	; (801124c <pbuf_free+0x100>)
 801116a:	f008 fec5 	bl	8019ef8 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 801116e:	2300      	movs	r3, #0
 8011170:	e063      	b.n	801123a <pbuf_free+0xee>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 8011172:	2300      	movs	r3, #0
 8011174:	75fb      	strb	r3, [r7, #23]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 8011176:	e05c      	b.n	8011232 <pbuf_free+0xe6>
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 8011178:	687b      	ldr	r3, [r7, #4]
 801117a:	7b9b      	ldrb	r3, [r3, #14]
 801117c:	2b00      	cmp	r3, #0
 801117e:	d106      	bne.n	801118e <pbuf_free+0x42>
 8011180:	4b30      	ldr	r3, [pc, #192]	; (8011244 <pbuf_free+0xf8>)
 8011182:	f240 22f1 	movw	r2, #753	; 0x2f1
 8011186:	4932      	ldr	r1, [pc, #200]	; (8011250 <pbuf_free+0x104>)
 8011188:	4830      	ldr	r0, [pc, #192]	; (801124c <pbuf_free+0x100>)
 801118a:	f008 feb5 	bl	8019ef8 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 801118e:	687b      	ldr	r3, [r7, #4]
 8011190:	7b9b      	ldrb	r3, [r3, #14]
 8011192:	3b01      	subs	r3, #1
 8011194:	b2da      	uxtb	r2, r3
 8011196:	687b      	ldr	r3, [r7, #4]
 8011198:	739a      	strb	r2, [r3, #14]
 801119a:	687b      	ldr	r3, [r7, #4]
 801119c:	7b9b      	ldrb	r3, [r3, #14]
 801119e:	75bb      	strb	r3, [r7, #22]
    SYS_ARCH_UNPROTECT(old_level);
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 80111a0:	7dbb      	ldrb	r3, [r7, #22]
 80111a2:	2b00      	cmp	r3, #0
 80111a4:	d143      	bne.n	801122e <pbuf_free+0xe2>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 80111a6:	687b      	ldr	r3, [r7, #4]
 80111a8:	681b      	ldr	r3, [r3, #0]
 80111aa:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 80111ac:	687b      	ldr	r3, [r7, #4]
 80111ae:	7b1b      	ldrb	r3, [r3, #12]
 80111b0:	f003 030f 	and.w	r3, r3, #15
 80111b4:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 80111b6:	687b      	ldr	r3, [r7, #4]
 80111b8:	7b5b      	ldrb	r3, [r3, #13]
 80111ba:	f003 0302 	and.w	r3, r3, #2
 80111be:	2b00      	cmp	r3, #0
 80111c0:	d011      	beq.n	80111e6 <pbuf_free+0x9a>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 80111c2:	687b      	ldr	r3, [r7, #4]
 80111c4:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 80111c6:	68bb      	ldr	r3, [r7, #8]
 80111c8:	691b      	ldr	r3, [r3, #16]
 80111ca:	2b00      	cmp	r3, #0
 80111cc:	d106      	bne.n	80111dc <pbuf_free+0x90>
 80111ce:	4b1d      	ldr	r3, [pc, #116]	; (8011244 <pbuf_free+0xf8>)
 80111d0:	f240 22ff 	movw	r2, #767	; 0x2ff
 80111d4:	491f      	ldr	r1, [pc, #124]	; (8011254 <pbuf_free+0x108>)
 80111d6:	481d      	ldr	r0, [pc, #116]	; (801124c <pbuf_free+0x100>)
 80111d8:	f008 fe8e 	bl	8019ef8 <iprintf>
        pc->custom_free_function(p);
 80111dc:	68bb      	ldr	r3, [r7, #8]
 80111de:	691b      	ldr	r3, [r3, #16]
 80111e0:	6878      	ldr	r0, [r7, #4]
 80111e2:	4798      	blx	r3
 80111e4:	e01d      	b.n	8011222 <pbuf_free+0xd6>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 80111e6:	7bfb      	ldrb	r3, [r7, #15]
 80111e8:	2b02      	cmp	r3, #2
 80111ea:	d104      	bne.n	80111f6 <pbuf_free+0xaa>
          memp_free(MEMP_PBUF_POOL, p);
 80111ec:	6879      	ldr	r1, [r7, #4]
 80111ee:	2008      	movs	r0, #8
 80111f0:	f7ff f956 	bl	80104a0 <memp_free>
 80111f4:	e015      	b.n	8011222 <pbuf_free+0xd6>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 80111f6:	7bfb      	ldrb	r3, [r7, #15]
 80111f8:	2b01      	cmp	r3, #1
 80111fa:	d104      	bne.n	8011206 <pbuf_free+0xba>
          memp_free(MEMP_PBUF, p);
 80111fc:	6879      	ldr	r1, [r7, #4]
 80111fe:	2007      	movs	r0, #7
 8011200:	f7ff f94e 	bl	80104a0 <memp_free>
 8011204:	e00d      	b.n	8011222 <pbuf_free+0xd6>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 8011206:	7bfb      	ldrb	r3, [r7, #15]
 8011208:	2b00      	cmp	r3, #0
 801120a:	d103      	bne.n	8011214 <pbuf_free+0xc8>
          mem_free(p);
 801120c:	6878      	ldr	r0, [r7, #4]
 801120e:	f7fe fdf1 	bl	800fdf4 <mem_free>
 8011212:	e006      	b.n	8011222 <pbuf_free+0xd6>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 8011214:	4b0b      	ldr	r3, [pc, #44]	; (8011244 <pbuf_free+0xf8>)
 8011216:	f240 320f 	movw	r2, #783	; 0x30f
 801121a:	490f      	ldr	r1, [pc, #60]	; (8011258 <pbuf_free+0x10c>)
 801121c:	480b      	ldr	r0, [pc, #44]	; (801124c <pbuf_free+0x100>)
 801121e:	f008 fe6b 	bl	8019ef8 <iprintf>
        }
      }
      count++;
 8011222:	7dfb      	ldrb	r3, [r7, #23]
 8011224:	3301      	adds	r3, #1
 8011226:	75fb      	strb	r3, [r7, #23]
      /* proceed to next pbuf */
      p = q;
 8011228:	693b      	ldr	r3, [r7, #16]
 801122a:	607b      	str	r3, [r7, #4]
 801122c:	e001      	b.n	8011232 <pbuf_free+0xe6>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 801122e:	2300      	movs	r3, #0
 8011230:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 8011232:	687b      	ldr	r3, [r7, #4]
 8011234:	2b00      	cmp	r3, #0
 8011236:	d19f      	bne.n	8011178 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 8011238:	7dfb      	ldrb	r3, [r7, #23]
}
 801123a:	4618      	mov	r0, r3
 801123c:	3718      	adds	r7, #24
 801123e:	46bd      	mov	sp, r7
 8011240:	bd80      	pop	{r7, pc}
 8011242:	bf00      	nop
 8011244:	0801d018 	.word	0x0801d018
 8011248:	0801d17c 	.word	0x0801d17c
 801124c:	0801d078 	.word	0x0801d078
 8011250:	0801d1a8 	.word	0x0801d1a8
 8011254:	0801d1c0 	.word	0x0801d1c0
 8011258:	0801d1e4 	.word	0x0801d1e4

0801125c <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 801125c:	b480      	push	{r7}
 801125e:	b085      	sub	sp, #20
 8011260:	af00      	add	r7, sp, #0
 8011262:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 8011264:	2300      	movs	r3, #0
 8011266:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 8011268:	e005      	b.n	8011276 <pbuf_clen+0x1a>
    ++len;
 801126a:	89fb      	ldrh	r3, [r7, #14]
 801126c:	3301      	adds	r3, #1
 801126e:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 8011270:	687b      	ldr	r3, [r7, #4]
 8011272:	681b      	ldr	r3, [r3, #0]
 8011274:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 8011276:	687b      	ldr	r3, [r7, #4]
 8011278:	2b00      	cmp	r3, #0
 801127a:	d1f6      	bne.n	801126a <pbuf_clen+0xe>
  }
  return len;
 801127c:	89fb      	ldrh	r3, [r7, #14]
}
 801127e:	4618      	mov	r0, r3
 8011280:	3714      	adds	r7, #20
 8011282:	46bd      	mov	sp, r7
 8011284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011288:	4770      	bx	lr
	...

0801128c <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 801128c:	b580      	push	{r7, lr}
 801128e:	b082      	sub	sp, #8
 8011290:	af00      	add	r7, sp, #0
 8011292:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 8011294:	687b      	ldr	r3, [r7, #4]
 8011296:	2b00      	cmp	r3, #0
 8011298:	d010      	beq.n	80112bc <pbuf_ref+0x30>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 801129a:	687b      	ldr	r3, [r7, #4]
 801129c:	7b9b      	ldrb	r3, [r3, #14]
 801129e:	3301      	adds	r3, #1
 80112a0:	b2da      	uxtb	r2, r3
 80112a2:	687b      	ldr	r3, [r7, #4]
 80112a4:	739a      	strb	r2, [r3, #14]
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 80112a6:	687b      	ldr	r3, [r7, #4]
 80112a8:	7b9b      	ldrb	r3, [r3, #14]
 80112aa:	2b00      	cmp	r3, #0
 80112ac:	d106      	bne.n	80112bc <pbuf_ref+0x30>
 80112ae:	4b05      	ldr	r3, [pc, #20]	; (80112c4 <pbuf_ref+0x38>)
 80112b0:	f240 3242 	movw	r2, #834	; 0x342
 80112b4:	4904      	ldr	r1, [pc, #16]	; (80112c8 <pbuf_ref+0x3c>)
 80112b6:	4805      	ldr	r0, [pc, #20]	; (80112cc <pbuf_ref+0x40>)
 80112b8:	f008 fe1e 	bl	8019ef8 <iprintf>
  }
}
 80112bc:	bf00      	nop
 80112be:	3708      	adds	r7, #8
 80112c0:	46bd      	mov	sp, r7
 80112c2:	bd80      	pop	{r7, pc}
 80112c4:	0801d018 	.word	0x0801d018
 80112c8:	0801d1f8 	.word	0x0801d1f8
 80112cc:	0801d078 	.word	0x0801d078

080112d0 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 80112d0:	b580      	push	{r7, lr}
 80112d2:	b084      	sub	sp, #16
 80112d4:	af00      	add	r7, sp, #0
 80112d6:	6078      	str	r0, [r7, #4]
 80112d8:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 80112da:	687b      	ldr	r3, [r7, #4]
 80112dc:	2b00      	cmp	r3, #0
 80112de:	d002      	beq.n	80112e6 <pbuf_cat+0x16>
 80112e0:	683b      	ldr	r3, [r7, #0]
 80112e2:	2b00      	cmp	r3, #0
 80112e4:	d107      	bne.n	80112f6 <pbuf_cat+0x26>
 80112e6:	4b20      	ldr	r3, [pc, #128]	; (8011368 <pbuf_cat+0x98>)
 80112e8:	f240 3259 	movw	r2, #857	; 0x359
 80112ec:	491f      	ldr	r1, [pc, #124]	; (801136c <pbuf_cat+0x9c>)
 80112ee:	4820      	ldr	r0, [pc, #128]	; (8011370 <pbuf_cat+0xa0>)
 80112f0:	f008 fe02 	bl	8019ef8 <iprintf>
 80112f4:	e034      	b.n	8011360 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 80112f6:	687b      	ldr	r3, [r7, #4]
 80112f8:	60fb      	str	r3, [r7, #12]
 80112fa:	e00a      	b.n	8011312 <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 80112fc:	68fb      	ldr	r3, [r7, #12]
 80112fe:	891a      	ldrh	r2, [r3, #8]
 8011300:	683b      	ldr	r3, [r7, #0]
 8011302:	891b      	ldrh	r3, [r3, #8]
 8011304:	4413      	add	r3, r2
 8011306:	b29a      	uxth	r2, r3
 8011308:	68fb      	ldr	r3, [r7, #12]
 801130a:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 801130c:	68fb      	ldr	r3, [r7, #12]
 801130e:	681b      	ldr	r3, [r3, #0]
 8011310:	60fb      	str	r3, [r7, #12]
 8011312:	68fb      	ldr	r3, [r7, #12]
 8011314:	681b      	ldr	r3, [r3, #0]
 8011316:	2b00      	cmp	r3, #0
 8011318:	d1f0      	bne.n	80112fc <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 801131a:	68fb      	ldr	r3, [r7, #12]
 801131c:	891a      	ldrh	r2, [r3, #8]
 801131e:	68fb      	ldr	r3, [r7, #12]
 8011320:	895b      	ldrh	r3, [r3, #10]
 8011322:	429a      	cmp	r2, r3
 8011324:	d006      	beq.n	8011334 <pbuf_cat+0x64>
 8011326:	4b10      	ldr	r3, [pc, #64]	; (8011368 <pbuf_cat+0x98>)
 8011328:	f240 3262 	movw	r2, #866	; 0x362
 801132c:	4911      	ldr	r1, [pc, #68]	; (8011374 <pbuf_cat+0xa4>)
 801132e:	4810      	ldr	r0, [pc, #64]	; (8011370 <pbuf_cat+0xa0>)
 8011330:	f008 fde2 	bl	8019ef8 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 8011334:	68fb      	ldr	r3, [r7, #12]
 8011336:	681b      	ldr	r3, [r3, #0]
 8011338:	2b00      	cmp	r3, #0
 801133a:	d006      	beq.n	801134a <pbuf_cat+0x7a>
 801133c:	4b0a      	ldr	r3, [pc, #40]	; (8011368 <pbuf_cat+0x98>)
 801133e:	f240 3263 	movw	r2, #867	; 0x363
 8011342:	490d      	ldr	r1, [pc, #52]	; (8011378 <pbuf_cat+0xa8>)
 8011344:	480a      	ldr	r0, [pc, #40]	; (8011370 <pbuf_cat+0xa0>)
 8011346:	f008 fdd7 	bl	8019ef8 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 801134a:	68fb      	ldr	r3, [r7, #12]
 801134c:	891a      	ldrh	r2, [r3, #8]
 801134e:	683b      	ldr	r3, [r7, #0]
 8011350:	891b      	ldrh	r3, [r3, #8]
 8011352:	4413      	add	r3, r2
 8011354:	b29a      	uxth	r2, r3
 8011356:	68fb      	ldr	r3, [r7, #12]
 8011358:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 801135a:	68fb      	ldr	r3, [r7, #12]
 801135c:	683a      	ldr	r2, [r7, #0]
 801135e:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 8011360:	3710      	adds	r7, #16
 8011362:	46bd      	mov	sp, r7
 8011364:	bd80      	pop	{r7, pc}
 8011366:	bf00      	nop
 8011368:	0801d018 	.word	0x0801d018
 801136c:	0801d20c 	.word	0x0801d20c
 8011370:	0801d078 	.word	0x0801d078
 8011374:	0801d244 	.word	0x0801d244
 8011378:	0801d274 	.word	0x0801d274

0801137c <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 801137c:	b580      	push	{r7, lr}
 801137e:	b086      	sub	sp, #24
 8011380:	af00      	add	r7, sp, #0
 8011382:	6078      	str	r0, [r7, #4]
 8011384:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 8011386:	2300      	movs	r3, #0
 8011388:	617b      	str	r3, [r7, #20]
 801138a:	2300      	movs	r3, #0
 801138c:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 801138e:	687b      	ldr	r3, [r7, #4]
 8011390:	2b00      	cmp	r3, #0
 8011392:	d008      	beq.n	80113a6 <pbuf_copy+0x2a>
 8011394:	683b      	ldr	r3, [r7, #0]
 8011396:	2b00      	cmp	r3, #0
 8011398:	d005      	beq.n	80113a6 <pbuf_copy+0x2a>
 801139a:	687b      	ldr	r3, [r7, #4]
 801139c:	891a      	ldrh	r2, [r3, #8]
 801139e:	683b      	ldr	r3, [r7, #0]
 80113a0:	891b      	ldrh	r3, [r3, #8]
 80113a2:	429a      	cmp	r2, r3
 80113a4:	d209      	bcs.n	80113ba <pbuf_copy+0x3e>
 80113a6:	4b57      	ldr	r3, [pc, #348]	; (8011504 <pbuf_copy+0x188>)
 80113a8:	f240 32c9 	movw	r2, #969	; 0x3c9
 80113ac:	4956      	ldr	r1, [pc, #344]	; (8011508 <pbuf_copy+0x18c>)
 80113ae:	4857      	ldr	r0, [pc, #348]	; (801150c <pbuf_copy+0x190>)
 80113b0:	f008 fda2 	bl	8019ef8 <iprintf>
 80113b4:	f06f 030f 	mvn.w	r3, #15
 80113b8:	e09f      	b.n	80114fa <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 80113ba:	687b      	ldr	r3, [r7, #4]
 80113bc:	895b      	ldrh	r3, [r3, #10]
 80113be:	461a      	mov	r2, r3
 80113c0:	697b      	ldr	r3, [r7, #20]
 80113c2:	1ad2      	subs	r2, r2, r3
 80113c4:	683b      	ldr	r3, [r7, #0]
 80113c6:	895b      	ldrh	r3, [r3, #10]
 80113c8:	4619      	mov	r1, r3
 80113ca:	693b      	ldr	r3, [r7, #16]
 80113cc:	1acb      	subs	r3, r1, r3
 80113ce:	429a      	cmp	r2, r3
 80113d0:	d306      	bcc.n	80113e0 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 80113d2:	683b      	ldr	r3, [r7, #0]
 80113d4:	895b      	ldrh	r3, [r3, #10]
 80113d6:	461a      	mov	r2, r3
 80113d8:	693b      	ldr	r3, [r7, #16]
 80113da:	1ad3      	subs	r3, r2, r3
 80113dc:	60fb      	str	r3, [r7, #12]
 80113de:	e005      	b.n	80113ec <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 80113e0:	687b      	ldr	r3, [r7, #4]
 80113e2:	895b      	ldrh	r3, [r3, #10]
 80113e4:	461a      	mov	r2, r3
 80113e6:	697b      	ldr	r3, [r7, #20]
 80113e8:	1ad3      	subs	r3, r2, r3
 80113ea:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 80113ec:	687b      	ldr	r3, [r7, #4]
 80113ee:	685a      	ldr	r2, [r3, #4]
 80113f0:	697b      	ldr	r3, [r7, #20]
 80113f2:	18d0      	adds	r0, r2, r3
 80113f4:	683b      	ldr	r3, [r7, #0]
 80113f6:	685a      	ldr	r2, [r3, #4]
 80113f8:	693b      	ldr	r3, [r7, #16]
 80113fa:	4413      	add	r3, r2
 80113fc:	68fa      	ldr	r2, [r7, #12]
 80113fe:	4619      	mov	r1, r3
 8011400:	f008 ff49 	bl	801a296 <memcpy>
    offset_to += len;
 8011404:	697a      	ldr	r2, [r7, #20]
 8011406:	68fb      	ldr	r3, [r7, #12]
 8011408:	4413      	add	r3, r2
 801140a:	617b      	str	r3, [r7, #20]
    offset_from += len;
 801140c:	693a      	ldr	r2, [r7, #16]
 801140e:	68fb      	ldr	r3, [r7, #12]
 8011410:	4413      	add	r3, r2
 8011412:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 8011414:	687b      	ldr	r3, [r7, #4]
 8011416:	895b      	ldrh	r3, [r3, #10]
 8011418:	461a      	mov	r2, r3
 801141a:	697b      	ldr	r3, [r7, #20]
 801141c:	4293      	cmp	r3, r2
 801141e:	d906      	bls.n	801142e <pbuf_copy+0xb2>
 8011420:	4b38      	ldr	r3, [pc, #224]	; (8011504 <pbuf_copy+0x188>)
 8011422:	f240 32d9 	movw	r2, #985	; 0x3d9
 8011426:	493a      	ldr	r1, [pc, #232]	; (8011510 <pbuf_copy+0x194>)
 8011428:	4838      	ldr	r0, [pc, #224]	; (801150c <pbuf_copy+0x190>)
 801142a:	f008 fd65 	bl	8019ef8 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 801142e:	683b      	ldr	r3, [r7, #0]
 8011430:	895b      	ldrh	r3, [r3, #10]
 8011432:	461a      	mov	r2, r3
 8011434:	693b      	ldr	r3, [r7, #16]
 8011436:	4293      	cmp	r3, r2
 8011438:	d906      	bls.n	8011448 <pbuf_copy+0xcc>
 801143a:	4b32      	ldr	r3, [pc, #200]	; (8011504 <pbuf_copy+0x188>)
 801143c:	f240 32da 	movw	r2, #986	; 0x3da
 8011440:	4934      	ldr	r1, [pc, #208]	; (8011514 <pbuf_copy+0x198>)
 8011442:	4832      	ldr	r0, [pc, #200]	; (801150c <pbuf_copy+0x190>)
 8011444:	f008 fd58 	bl	8019ef8 <iprintf>
    if (offset_from >= p_from->len) {
 8011448:	683b      	ldr	r3, [r7, #0]
 801144a:	895b      	ldrh	r3, [r3, #10]
 801144c:	461a      	mov	r2, r3
 801144e:	693b      	ldr	r3, [r7, #16]
 8011450:	4293      	cmp	r3, r2
 8011452:	d304      	bcc.n	801145e <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 8011454:	2300      	movs	r3, #0
 8011456:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 8011458:	683b      	ldr	r3, [r7, #0]
 801145a:	681b      	ldr	r3, [r3, #0]
 801145c:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 801145e:	687b      	ldr	r3, [r7, #4]
 8011460:	895b      	ldrh	r3, [r3, #10]
 8011462:	461a      	mov	r2, r3
 8011464:	697b      	ldr	r3, [r7, #20]
 8011466:	4293      	cmp	r3, r2
 8011468:	d114      	bne.n	8011494 <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 801146a:	2300      	movs	r3, #0
 801146c:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 801146e:	687b      	ldr	r3, [r7, #4]
 8011470:	681b      	ldr	r3, [r3, #0]
 8011472:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 8011474:	687b      	ldr	r3, [r7, #4]
 8011476:	2b00      	cmp	r3, #0
 8011478:	d10c      	bne.n	8011494 <pbuf_copy+0x118>
 801147a:	683b      	ldr	r3, [r7, #0]
 801147c:	2b00      	cmp	r3, #0
 801147e:	d009      	beq.n	8011494 <pbuf_copy+0x118>
 8011480:	4b20      	ldr	r3, [pc, #128]	; (8011504 <pbuf_copy+0x188>)
 8011482:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 8011486:	4924      	ldr	r1, [pc, #144]	; (8011518 <pbuf_copy+0x19c>)
 8011488:	4820      	ldr	r0, [pc, #128]	; (801150c <pbuf_copy+0x190>)
 801148a:	f008 fd35 	bl	8019ef8 <iprintf>
 801148e:	f06f 030f 	mvn.w	r3, #15
 8011492:	e032      	b.n	80114fa <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 8011494:	683b      	ldr	r3, [r7, #0]
 8011496:	2b00      	cmp	r3, #0
 8011498:	d013      	beq.n	80114c2 <pbuf_copy+0x146>
 801149a:	683b      	ldr	r3, [r7, #0]
 801149c:	895a      	ldrh	r2, [r3, #10]
 801149e:	683b      	ldr	r3, [r7, #0]
 80114a0:	891b      	ldrh	r3, [r3, #8]
 80114a2:	429a      	cmp	r2, r3
 80114a4:	d10d      	bne.n	80114c2 <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 80114a6:	683b      	ldr	r3, [r7, #0]
 80114a8:	681b      	ldr	r3, [r3, #0]
 80114aa:	2b00      	cmp	r3, #0
 80114ac:	d009      	beq.n	80114c2 <pbuf_copy+0x146>
 80114ae:	4b15      	ldr	r3, [pc, #84]	; (8011504 <pbuf_copy+0x188>)
 80114b0:	f240 32e9 	movw	r2, #1001	; 0x3e9
 80114b4:	4919      	ldr	r1, [pc, #100]	; (801151c <pbuf_copy+0x1a0>)
 80114b6:	4815      	ldr	r0, [pc, #84]	; (801150c <pbuf_copy+0x190>)
 80114b8:	f008 fd1e 	bl	8019ef8 <iprintf>
 80114bc:	f06f 0305 	mvn.w	r3, #5
 80114c0:	e01b      	b.n	80114fa <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 80114c2:	687b      	ldr	r3, [r7, #4]
 80114c4:	2b00      	cmp	r3, #0
 80114c6:	d013      	beq.n	80114f0 <pbuf_copy+0x174>
 80114c8:	687b      	ldr	r3, [r7, #4]
 80114ca:	895a      	ldrh	r2, [r3, #10]
 80114cc:	687b      	ldr	r3, [r7, #4]
 80114ce:	891b      	ldrh	r3, [r3, #8]
 80114d0:	429a      	cmp	r2, r3
 80114d2:	d10d      	bne.n	80114f0 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 80114d4:	687b      	ldr	r3, [r7, #4]
 80114d6:	681b      	ldr	r3, [r3, #0]
 80114d8:	2b00      	cmp	r3, #0
 80114da:	d009      	beq.n	80114f0 <pbuf_copy+0x174>
 80114dc:	4b09      	ldr	r3, [pc, #36]	; (8011504 <pbuf_copy+0x188>)
 80114de:	f240 32ee 	movw	r2, #1006	; 0x3ee
 80114e2:	490e      	ldr	r1, [pc, #56]	; (801151c <pbuf_copy+0x1a0>)
 80114e4:	4809      	ldr	r0, [pc, #36]	; (801150c <pbuf_copy+0x190>)
 80114e6:	f008 fd07 	bl	8019ef8 <iprintf>
 80114ea:	f06f 0305 	mvn.w	r3, #5
 80114ee:	e004      	b.n	80114fa <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 80114f0:	683b      	ldr	r3, [r7, #0]
 80114f2:	2b00      	cmp	r3, #0
 80114f4:	f47f af61 	bne.w	80113ba <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 80114f8:	2300      	movs	r3, #0
}
 80114fa:	4618      	mov	r0, r3
 80114fc:	3718      	adds	r7, #24
 80114fe:	46bd      	mov	sp, r7
 8011500:	bd80      	pop	{r7, pc}
 8011502:	bf00      	nop
 8011504:	0801d018 	.word	0x0801d018
 8011508:	0801d2c0 	.word	0x0801d2c0
 801150c:	0801d078 	.word	0x0801d078
 8011510:	0801d2f0 	.word	0x0801d2f0
 8011514:	0801d308 	.word	0x0801d308
 8011518:	0801d324 	.word	0x0801d324
 801151c:	0801d334 	.word	0x0801d334

08011520 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 8011520:	b580      	push	{r7, lr}
 8011522:	b088      	sub	sp, #32
 8011524:	af00      	add	r7, sp, #0
 8011526:	60f8      	str	r0, [r7, #12]
 8011528:	60b9      	str	r1, [r7, #8]
 801152a:	4611      	mov	r1, r2
 801152c:	461a      	mov	r2, r3
 801152e:	460b      	mov	r3, r1
 8011530:	80fb      	strh	r3, [r7, #6]
 8011532:	4613      	mov	r3, r2
 8011534:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 8011536:	2300      	movs	r3, #0
 8011538:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 801153a:	2300      	movs	r3, #0
 801153c:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 801153e:	68fb      	ldr	r3, [r7, #12]
 8011540:	2b00      	cmp	r3, #0
 8011542:	d108      	bne.n	8011556 <pbuf_copy_partial+0x36>
 8011544:	4b2b      	ldr	r3, [pc, #172]	; (80115f4 <pbuf_copy_partial+0xd4>)
 8011546:	f240 420a 	movw	r2, #1034	; 0x40a
 801154a:	492b      	ldr	r1, [pc, #172]	; (80115f8 <pbuf_copy_partial+0xd8>)
 801154c:	482b      	ldr	r0, [pc, #172]	; (80115fc <pbuf_copy_partial+0xdc>)
 801154e:	f008 fcd3 	bl	8019ef8 <iprintf>
 8011552:	2300      	movs	r3, #0
 8011554:	e04a      	b.n	80115ec <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 8011556:	68bb      	ldr	r3, [r7, #8]
 8011558:	2b00      	cmp	r3, #0
 801155a:	d108      	bne.n	801156e <pbuf_copy_partial+0x4e>
 801155c:	4b25      	ldr	r3, [pc, #148]	; (80115f4 <pbuf_copy_partial+0xd4>)
 801155e:	f240 420b 	movw	r2, #1035	; 0x40b
 8011562:	4927      	ldr	r1, [pc, #156]	; (8011600 <pbuf_copy_partial+0xe0>)
 8011564:	4825      	ldr	r0, [pc, #148]	; (80115fc <pbuf_copy_partial+0xdc>)
 8011566:	f008 fcc7 	bl	8019ef8 <iprintf>
 801156a:	2300      	movs	r3, #0
 801156c:	e03e      	b.n	80115ec <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 801156e:	68fb      	ldr	r3, [r7, #12]
 8011570:	61fb      	str	r3, [r7, #28]
 8011572:	e034      	b.n	80115de <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 8011574:	88bb      	ldrh	r3, [r7, #4]
 8011576:	2b00      	cmp	r3, #0
 8011578:	d00a      	beq.n	8011590 <pbuf_copy_partial+0x70>
 801157a:	69fb      	ldr	r3, [r7, #28]
 801157c:	895b      	ldrh	r3, [r3, #10]
 801157e:	88ba      	ldrh	r2, [r7, #4]
 8011580:	429a      	cmp	r2, r3
 8011582:	d305      	bcc.n	8011590 <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 8011584:	69fb      	ldr	r3, [r7, #28]
 8011586:	895b      	ldrh	r3, [r3, #10]
 8011588:	88ba      	ldrh	r2, [r7, #4]
 801158a:	1ad3      	subs	r3, r2, r3
 801158c:	80bb      	strh	r3, [r7, #4]
 801158e:	e023      	b.n	80115d8 <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 8011590:	69fb      	ldr	r3, [r7, #28]
 8011592:	895a      	ldrh	r2, [r3, #10]
 8011594:	88bb      	ldrh	r3, [r7, #4]
 8011596:	1ad3      	subs	r3, r2, r3
 8011598:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 801159a:	8b3a      	ldrh	r2, [r7, #24]
 801159c:	88fb      	ldrh	r3, [r7, #6]
 801159e:	429a      	cmp	r2, r3
 80115a0:	d901      	bls.n	80115a6 <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 80115a2:	88fb      	ldrh	r3, [r7, #6]
 80115a4:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 80115a6:	8b7b      	ldrh	r3, [r7, #26]
 80115a8:	68ba      	ldr	r2, [r7, #8]
 80115aa:	18d0      	adds	r0, r2, r3
 80115ac:	69fb      	ldr	r3, [r7, #28]
 80115ae:	685a      	ldr	r2, [r3, #4]
 80115b0:	88bb      	ldrh	r3, [r7, #4]
 80115b2:	4413      	add	r3, r2
 80115b4:	8b3a      	ldrh	r2, [r7, #24]
 80115b6:	4619      	mov	r1, r3
 80115b8:	f008 fe6d 	bl	801a296 <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 80115bc:	8afa      	ldrh	r2, [r7, #22]
 80115be:	8b3b      	ldrh	r3, [r7, #24]
 80115c0:	4413      	add	r3, r2
 80115c2:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 80115c4:	8b7a      	ldrh	r2, [r7, #26]
 80115c6:	8b3b      	ldrh	r3, [r7, #24]
 80115c8:	4413      	add	r3, r2
 80115ca:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 80115cc:	88fa      	ldrh	r2, [r7, #6]
 80115ce:	8b3b      	ldrh	r3, [r7, #24]
 80115d0:	1ad3      	subs	r3, r2, r3
 80115d2:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 80115d4:	2300      	movs	r3, #0
 80115d6:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 80115d8:	69fb      	ldr	r3, [r7, #28]
 80115da:	681b      	ldr	r3, [r3, #0]
 80115dc:	61fb      	str	r3, [r7, #28]
 80115de:	88fb      	ldrh	r3, [r7, #6]
 80115e0:	2b00      	cmp	r3, #0
 80115e2:	d002      	beq.n	80115ea <pbuf_copy_partial+0xca>
 80115e4:	69fb      	ldr	r3, [r7, #28]
 80115e6:	2b00      	cmp	r3, #0
 80115e8:	d1c4      	bne.n	8011574 <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 80115ea:	8afb      	ldrh	r3, [r7, #22]
}
 80115ec:	4618      	mov	r0, r3
 80115ee:	3720      	adds	r7, #32
 80115f0:	46bd      	mov	sp, r7
 80115f2:	bd80      	pop	{r7, pc}
 80115f4:	0801d018 	.word	0x0801d018
 80115f8:	0801d360 	.word	0x0801d360
 80115fc:	0801d078 	.word	0x0801d078
 8011600:	0801d380 	.word	0x0801d380

08011604 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 8011604:	b580      	push	{r7, lr}
 8011606:	b084      	sub	sp, #16
 8011608:	af00      	add	r7, sp, #0
 801160a:	4603      	mov	r3, r0
 801160c:	603a      	str	r2, [r7, #0]
 801160e:	71fb      	strb	r3, [r7, #7]
 8011610:	460b      	mov	r3, r1
 8011612:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 8011614:	683b      	ldr	r3, [r7, #0]
 8011616:	8919      	ldrh	r1, [r3, #8]
 8011618:	88ba      	ldrh	r2, [r7, #4]
 801161a:	79fb      	ldrb	r3, [r7, #7]
 801161c:	4618      	mov	r0, r3
 801161e:	f7ff fab1 	bl	8010b84 <pbuf_alloc>
 8011622:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 8011624:	68fb      	ldr	r3, [r7, #12]
 8011626:	2b00      	cmp	r3, #0
 8011628:	d101      	bne.n	801162e <pbuf_clone+0x2a>
    return NULL;
 801162a:	2300      	movs	r3, #0
 801162c:	e011      	b.n	8011652 <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 801162e:	6839      	ldr	r1, [r7, #0]
 8011630:	68f8      	ldr	r0, [r7, #12]
 8011632:	f7ff fea3 	bl	801137c <pbuf_copy>
 8011636:	4603      	mov	r3, r0
 8011638:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 801163a:	f997 300b 	ldrsb.w	r3, [r7, #11]
 801163e:	2b00      	cmp	r3, #0
 8011640:	d006      	beq.n	8011650 <pbuf_clone+0x4c>
 8011642:	4b06      	ldr	r3, [pc, #24]	; (801165c <pbuf_clone+0x58>)
 8011644:	f240 5224 	movw	r2, #1316	; 0x524
 8011648:	4905      	ldr	r1, [pc, #20]	; (8011660 <pbuf_clone+0x5c>)
 801164a:	4806      	ldr	r0, [pc, #24]	; (8011664 <pbuf_clone+0x60>)
 801164c:	f008 fc54 	bl	8019ef8 <iprintf>
  return q;
 8011650:	68fb      	ldr	r3, [r7, #12]
}
 8011652:	4618      	mov	r0, r3
 8011654:	3710      	adds	r7, #16
 8011656:	46bd      	mov	sp, r7
 8011658:	bd80      	pop	{r7, pc}
 801165a:	bf00      	nop
 801165c:	0801d018 	.word	0x0801d018
 8011660:	0801d48c 	.word	0x0801d48c
 8011664:	0801d078 	.word	0x0801d078

08011668 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 8011668:	b580      	push	{r7, lr}
 801166a:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 801166c:	f007 ff0a 	bl	8019484 <rand>
 8011670:	4603      	mov	r3, r0
 8011672:	b29b      	uxth	r3, r3
 8011674:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8011678:	b29b      	uxth	r3, r3
 801167a:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 801167e:	b29a      	uxth	r2, r3
 8011680:	4b01      	ldr	r3, [pc, #4]	; (8011688 <tcp_init+0x20>)
 8011682:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 8011684:	bf00      	nop
 8011686:	bd80      	pop	{r7, pc}
 8011688:	20000058 	.word	0x20000058

0801168c <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 801168c:	b580      	push	{r7, lr}
 801168e:	b082      	sub	sp, #8
 8011690:	af00      	add	r7, sp, #0
 8011692:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 8011694:	687b      	ldr	r3, [r7, #4]
 8011696:	7d1b      	ldrb	r3, [r3, #20]
 8011698:	2b01      	cmp	r3, #1
 801169a:	d105      	bne.n	80116a8 <tcp_free+0x1c>
 801169c:	4b06      	ldr	r3, [pc, #24]	; (80116b8 <tcp_free+0x2c>)
 801169e:	22d4      	movs	r2, #212	; 0xd4
 80116a0:	4906      	ldr	r1, [pc, #24]	; (80116bc <tcp_free+0x30>)
 80116a2:	4807      	ldr	r0, [pc, #28]	; (80116c0 <tcp_free+0x34>)
 80116a4:	f008 fc28 	bl	8019ef8 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 80116a8:	6879      	ldr	r1, [r7, #4]
 80116aa:	2001      	movs	r0, #1
 80116ac:	f7fe fef8 	bl	80104a0 <memp_free>
}
 80116b0:	bf00      	nop
 80116b2:	3708      	adds	r7, #8
 80116b4:	46bd      	mov	sp, r7
 80116b6:	bd80      	pop	{r7, pc}
 80116b8:	0801d518 	.word	0x0801d518
 80116bc:	0801d548 	.word	0x0801d548
 80116c0:	0801d55c 	.word	0x0801d55c

080116c4 <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 80116c4:	b580      	push	{r7, lr}
 80116c6:	b082      	sub	sp, #8
 80116c8:	af00      	add	r7, sp, #0
 80116ca:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 80116cc:	687b      	ldr	r3, [r7, #4]
 80116ce:	7d1b      	ldrb	r3, [r3, #20]
 80116d0:	2b01      	cmp	r3, #1
 80116d2:	d105      	bne.n	80116e0 <tcp_free_listen+0x1c>
 80116d4:	4b06      	ldr	r3, [pc, #24]	; (80116f0 <tcp_free_listen+0x2c>)
 80116d6:	22df      	movs	r2, #223	; 0xdf
 80116d8:	4906      	ldr	r1, [pc, #24]	; (80116f4 <tcp_free_listen+0x30>)
 80116da:	4807      	ldr	r0, [pc, #28]	; (80116f8 <tcp_free_listen+0x34>)
 80116dc:	f008 fc0c 	bl	8019ef8 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 80116e0:	6879      	ldr	r1, [r7, #4]
 80116e2:	2002      	movs	r0, #2
 80116e4:	f7fe fedc 	bl	80104a0 <memp_free>
}
 80116e8:	bf00      	nop
 80116ea:	3708      	adds	r7, #8
 80116ec:	46bd      	mov	sp, r7
 80116ee:	bd80      	pop	{r7, pc}
 80116f0:	0801d518 	.word	0x0801d518
 80116f4:	0801d584 	.word	0x0801d584
 80116f8:	0801d55c 	.word	0x0801d55c

080116fc <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 80116fc:	b580      	push	{r7, lr}
 80116fe:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 8011700:	f000 fea4 	bl	801244c <tcp_fasttmr>

  if (++tcp_timer & 1) {
 8011704:	4b07      	ldr	r3, [pc, #28]	; (8011724 <tcp_tmr+0x28>)
 8011706:	781b      	ldrb	r3, [r3, #0]
 8011708:	3301      	adds	r3, #1
 801170a:	b2da      	uxtb	r2, r3
 801170c:	4b05      	ldr	r3, [pc, #20]	; (8011724 <tcp_tmr+0x28>)
 801170e:	701a      	strb	r2, [r3, #0]
 8011710:	4b04      	ldr	r3, [pc, #16]	; (8011724 <tcp_tmr+0x28>)
 8011712:	781b      	ldrb	r3, [r3, #0]
 8011714:	f003 0301 	and.w	r3, r3, #1
 8011718:	2b00      	cmp	r3, #0
 801171a:	d001      	beq.n	8011720 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 801171c:	f000 fb56 	bl	8011dcc <tcp_slowtmr>
  }
}
 8011720:	bf00      	nop
 8011722:	bd80      	pop	{r7, pc}
 8011724:	200070e9 	.word	0x200070e9

08011728 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 8011728:	b580      	push	{r7, lr}
 801172a:	b084      	sub	sp, #16
 801172c:	af00      	add	r7, sp, #0
 801172e:	6078      	str	r0, [r7, #4]
 8011730:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 8011732:	683b      	ldr	r3, [r7, #0]
 8011734:	2b00      	cmp	r3, #0
 8011736:	d105      	bne.n	8011744 <tcp_remove_listener+0x1c>
 8011738:	4b0d      	ldr	r3, [pc, #52]	; (8011770 <tcp_remove_listener+0x48>)
 801173a:	22ff      	movs	r2, #255	; 0xff
 801173c:	490d      	ldr	r1, [pc, #52]	; (8011774 <tcp_remove_listener+0x4c>)
 801173e:	480e      	ldr	r0, [pc, #56]	; (8011778 <tcp_remove_listener+0x50>)
 8011740:	f008 fbda 	bl	8019ef8 <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8011744:	687b      	ldr	r3, [r7, #4]
 8011746:	60fb      	str	r3, [r7, #12]
 8011748:	e00a      	b.n	8011760 <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 801174a:	68fb      	ldr	r3, [r7, #12]
 801174c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801174e:	683a      	ldr	r2, [r7, #0]
 8011750:	429a      	cmp	r2, r3
 8011752:	d102      	bne.n	801175a <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 8011754:	68fb      	ldr	r3, [r7, #12]
 8011756:	2200      	movs	r2, #0
 8011758:	67da      	str	r2, [r3, #124]	; 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 801175a:	68fb      	ldr	r3, [r7, #12]
 801175c:	68db      	ldr	r3, [r3, #12]
 801175e:	60fb      	str	r3, [r7, #12]
 8011760:	68fb      	ldr	r3, [r7, #12]
 8011762:	2b00      	cmp	r3, #0
 8011764:	d1f1      	bne.n	801174a <tcp_remove_listener+0x22>
    }
  }
}
 8011766:	bf00      	nop
 8011768:	bf00      	nop
 801176a:	3710      	adds	r7, #16
 801176c:	46bd      	mov	sp, r7
 801176e:	bd80      	pop	{r7, pc}
 8011770:	0801d518 	.word	0x0801d518
 8011774:	0801d5a0 	.word	0x0801d5a0
 8011778:	0801d55c 	.word	0x0801d55c

0801177c <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 801177c:	b580      	push	{r7, lr}
 801177e:	b084      	sub	sp, #16
 8011780:	af00      	add	r7, sp, #0
 8011782:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8011784:	687b      	ldr	r3, [r7, #4]
 8011786:	2b00      	cmp	r3, #0
 8011788:	d106      	bne.n	8011798 <tcp_listen_closed+0x1c>
 801178a:	4b14      	ldr	r3, [pc, #80]	; (80117dc <tcp_listen_closed+0x60>)
 801178c:	f240 1211 	movw	r2, #273	; 0x111
 8011790:	4913      	ldr	r1, [pc, #76]	; (80117e0 <tcp_listen_closed+0x64>)
 8011792:	4814      	ldr	r0, [pc, #80]	; (80117e4 <tcp_listen_closed+0x68>)
 8011794:	f008 fbb0 	bl	8019ef8 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 8011798:	687b      	ldr	r3, [r7, #4]
 801179a:	7d1b      	ldrb	r3, [r3, #20]
 801179c:	2b01      	cmp	r3, #1
 801179e:	d006      	beq.n	80117ae <tcp_listen_closed+0x32>
 80117a0:	4b0e      	ldr	r3, [pc, #56]	; (80117dc <tcp_listen_closed+0x60>)
 80117a2:	f44f 7289 	mov.w	r2, #274	; 0x112
 80117a6:	4910      	ldr	r1, [pc, #64]	; (80117e8 <tcp_listen_closed+0x6c>)
 80117a8:	480e      	ldr	r0, [pc, #56]	; (80117e4 <tcp_listen_closed+0x68>)
 80117aa:	f008 fba5 	bl	8019ef8 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 80117ae:	2301      	movs	r3, #1
 80117b0:	60fb      	str	r3, [r7, #12]
 80117b2:	e00b      	b.n	80117cc <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 80117b4:	4a0d      	ldr	r2, [pc, #52]	; (80117ec <tcp_listen_closed+0x70>)
 80117b6:	68fb      	ldr	r3, [r7, #12]
 80117b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80117bc:	681b      	ldr	r3, [r3, #0]
 80117be:	6879      	ldr	r1, [r7, #4]
 80117c0:	4618      	mov	r0, r3
 80117c2:	f7ff ffb1 	bl	8011728 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 80117c6:	68fb      	ldr	r3, [r7, #12]
 80117c8:	3301      	adds	r3, #1
 80117ca:	60fb      	str	r3, [r7, #12]
 80117cc:	68fb      	ldr	r3, [r7, #12]
 80117ce:	2b03      	cmp	r3, #3
 80117d0:	d9f0      	bls.n	80117b4 <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 80117d2:	bf00      	nop
 80117d4:	bf00      	nop
 80117d6:	3710      	adds	r7, #16
 80117d8:	46bd      	mov	sp, r7
 80117da:	bd80      	pop	{r7, pc}
 80117dc:	0801d518 	.word	0x0801d518
 80117e0:	0801d5c8 	.word	0x0801d5c8
 80117e4:	0801d55c 	.word	0x0801d55c
 80117e8:	0801d5d4 	.word	0x0801d5d4
 80117ec:	0801f53c 	.word	0x0801f53c

080117f0 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 80117f0:	b5b0      	push	{r4, r5, r7, lr}
 80117f2:	b088      	sub	sp, #32
 80117f4:	af04      	add	r7, sp, #16
 80117f6:	6078      	str	r0, [r7, #4]
 80117f8:	460b      	mov	r3, r1
 80117fa:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 80117fc:	687b      	ldr	r3, [r7, #4]
 80117fe:	2b00      	cmp	r3, #0
 8011800:	d106      	bne.n	8011810 <tcp_close_shutdown+0x20>
 8011802:	4b63      	ldr	r3, [pc, #396]	; (8011990 <tcp_close_shutdown+0x1a0>)
 8011804:	f44f 72af 	mov.w	r2, #350	; 0x15e
 8011808:	4962      	ldr	r1, [pc, #392]	; (8011994 <tcp_close_shutdown+0x1a4>)
 801180a:	4863      	ldr	r0, [pc, #396]	; (8011998 <tcp_close_shutdown+0x1a8>)
 801180c:	f008 fb74 	bl	8019ef8 <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 8011810:	78fb      	ldrb	r3, [r7, #3]
 8011812:	2b00      	cmp	r3, #0
 8011814:	d067      	beq.n	80118e6 <tcp_close_shutdown+0xf6>
 8011816:	687b      	ldr	r3, [r7, #4]
 8011818:	7d1b      	ldrb	r3, [r3, #20]
 801181a:	2b04      	cmp	r3, #4
 801181c:	d003      	beq.n	8011826 <tcp_close_shutdown+0x36>
 801181e:	687b      	ldr	r3, [r7, #4]
 8011820:	7d1b      	ldrb	r3, [r3, #20]
 8011822:	2b07      	cmp	r3, #7
 8011824:	d15f      	bne.n	80118e6 <tcp_close_shutdown+0xf6>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 8011826:	687b      	ldr	r3, [r7, #4]
 8011828:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801182a:	2b00      	cmp	r3, #0
 801182c:	d105      	bne.n	801183a <tcp_close_shutdown+0x4a>
 801182e:	687b      	ldr	r3, [r7, #4]
 8011830:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8011832:	f241 62d0 	movw	r2, #5840	; 0x16d0
 8011836:	4293      	cmp	r3, r2
 8011838:	d055      	beq.n	80118e6 <tcp_close_shutdown+0xf6>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 801183a:	687b      	ldr	r3, [r7, #4]
 801183c:	8b5b      	ldrh	r3, [r3, #26]
 801183e:	f003 0310 	and.w	r3, r3, #16
 8011842:	2b00      	cmp	r3, #0
 8011844:	d106      	bne.n	8011854 <tcp_close_shutdown+0x64>
 8011846:	4b52      	ldr	r3, [pc, #328]	; (8011990 <tcp_close_shutdown+0x1a0>)
 8011848:	f44f 72b2 	mov.w	r2, #356	; 0x164
 801184c:	4953      	ldr	r1, [pc, #332]	; (801199c <tcp_close_shutdown+0x1ac>)
 801184e:	4852      	ldr	r0, [pc, #328]	; (8011998 <tcp_close_shutdown+0x1a8>)
 8011850:	f008 fb52 	bl	8019ef8 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8011854:	687b      	ldr	r3, [r7, #4]
 8011856:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8011858:	687b      	ldr	r3, [r7, #4]
 801185a:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 801185c:	687d      	ldr	r5, [r7, #4]
 801185e:	687b      	ldr	r3, [r7, #4]
 8011860:	3304      	adds	r3, #4
 8011862:	687a      	ldr	r2, [r7, #4]
 8011864:	8ad2      	ldrh	r2, [r2, #22]
 8011866:	6879      	ldr	r1, [r7, #4]
 8011868:	8b09      	ldrh	r1, [r1, #24]
 801186a:	9102      	str	r1, [sp, #8]
 801186c:	9201      	str	r2, [sp, #4]
 801186e:	9300      	str	r3, [sp, #0]
 8011870:	462b      	mov	r3, r5
 8011872:	4622      	mov	r2, r4
 8011874:	4601      	mov	r1, r0
 8011876:	6878      	ldr	r0, [r7, #4]
 8011878:	f004 fe94 	bl	80165a4 <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 801187c:	6878      	ldr	r0, [r7, #4]
 801187e:	f001 f8c9 	bl	8012a14 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 8011882:	4b47      	ldr	r3, [pc, #284]	; (80119a0 <tcp_close_shutdown+0x1b0>)
 8011884:	681b      	ldr	r3, [r3, #0]
 8011886:	687a      	ldr	r2, [r7, #4]
 8011888:	429a      	cmp	r2, r3
 801188a:	d105      	bne.n	8011898 <tcp_close_shutdown+0xa8>
 801188c:	4b44      	ldr	r3, [pc, #272]	; (80119a0 <tcp_close_shutdown+0x1b0>)
 801188e:	681b      	ldr	r3, [r3, #0]
 8011890:	68db      	ldr	r3, [r3, #12]
 8011892:	4a43      	ldr	r2, [pc, #268]	; (80119a0 <tcp_close_shutdown+0x1b0>)
 8011894:	6013      	str	r3, [r2, #0]
 8011896:	e013      	b.n	80118c0 <tcp_close_shutdown+0xd0>
 8011898:	4b41      	ldr	r3, [pc, #260]	; (80119a0 <tcp_close_shutdown+0x1b0>)
 801189a:	681b      	ldr	r3, [r3, #0]
 801189c:	60fb      	str	r3, [r7, #12]
 801189e:	e00c      	b.n	80118ba <tcp_close_shutdown+0xca>
 80118a0:	68fb      	ldr	r3, [r7, #12]
 80118a2:	68db      	ldr	r3, [r3, #12]
 80118a4:	687a      	ldr	r2, [r7, #4]
 80118a6:	429a      	cmp	r2, r3
 80118a8:	d104      	bne.n	80118b4 <tcp_close_shutdown+0xc4>
 80118aa:	687b      	ldr	r3, [r7, #4]
 80118ac:	68da      	ldr	r2, [r3, #12]
 80118ae:	68fb      	ldr	r3, [r7, #12]
 80118b0:	60da      	str	r2, [r3, #12]
 80118b2:	e005      	b.n	80118c0 <tcp_close_shutdown+0xd0>
 80118b4:	68fb      	ldr	r3, [r7, #12]
 80118b6:	68db      	ldr	r3, [r3, #12]
 80118b8:	60fb      	str	r3, [r7, #12]
 80118ba:	68fb      	ldr	r3, [r7, #12]
 80118bc:	2b00      	cmp	r3, #0
 80118be:	d1ef      	bne.n	80118a0 <tcp_close_shutdown+0xb0>
 80118c0:	687b      	ldr	r3, [r7, #4]
 80118c2:	2200      	movs	r2, #0
 80118c4:	60da      	str	r2, [r3, #12]
 80118c6:	4b37      	ldr	r3, [pc, #220]	; (80119a4 <tcp_close_shutdown+0x1b4>)
 80118c8:	2201      	movs	r2, #1
 80118ca:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 80118cc:	4b36      	ldr	r3, [pc, #216]	; (80119a8 <tcp_close_shutdown+0x1b8>)
 80118ce:	681b      	ldr	r3, [r3, #0]
 80118d0:	687a      	ldr	r2, [r7, #4]
 80118d2:	429a      	cmp	r2, r3
 80118d4:	d102      	bne.n	80118dc <tcp_close_shutdown+0xec>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 80118d6:	f003 fd61 	bl	801539c <tcp_trigger_input_pcb_close>
 80118da:	e002      	b.n	80118e2 <tcp_close_shutdown+0xf2>
      } else {
        tcp_free(pcb);
 80118dc:	6878      	ldr	r0, [r7, #4]
 80118de:	f7ff fed5 	bl	801168c <tcp_free>
      }
      return ERR_OK;
 80118e2:	2300      	movs	r3, #0
 80118e4:	e050      	b.n	8011988 <tcp_close_shutdown+0x198>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 80118e6:	687b      	ldr	r3, [r7, #4]
 80118e8:	7d1b      	ldrb	r3, [r3, #20]
 80118ea:	2b02      	cmp	r3, #2
 80118ec:	d03b      	beq.n	8011966 <tcp_close_shutdown+0x176>
 80118ee:	2b02      	cmp	r3, #2
 80118f0:	dc44      	bgt.n	801197c <tcp_close_shutdown+0x18c>
 80118f2:	2b00      	cmp	r3, #0
 80118f4:	d002      	beq.n	80118fc <tcp_close_shutdown+0x10c>
 80118f6:	2b01      	cmp	r3, #1
 80118f8:	d02a      	beq.n	8011950 <tcp_close_shutdown+0x160>
 80118fa:	e03f      	b.n	801197c <tcp_close_shutdown+0x18c>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 80118fc:	687b      	ldr	r3, [r7, #4]
 80118fe:	8adb      	ldrh	r3, [r3, #22]
 8011900:	2b00      	cmp	r3, #0
 8011902:	d021      	beq.n	8011948 <tcp_close_shutdown+0x158>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8011904:	4b29      	ldr	r3, [pc, #164]	; (80119ac <tcp_close_shutdown+0x1bc>)
 8011906:	681b      	ldr	r3, [r3, #0]
 8011908:	687a      	ldr	r2, [r7, #4]
 801190a:	429a      	cmp	r2, r3
 801190c:	d105      	bne.n	801191a <tcp_close_shutdown+0x12a>
 801190e:	4b27      	ldr	r3, [pc, #156]	; (80119ac <tcp_close_shutdown+0x1bc>)
 8011910:	681b      	ldr	r3, [r3, #0]
 8011912:	68db      	ldr	r3, [r3, #12]
 8011914:	4a25      	ldr	r2, [pc, #148]	; (80119ac <tcp_close_shutdown+0x1bc>)
 8011916:	6013      	str	r3, [r2, #0]
 8011918:	e013      	b.n	8011942 <tcp_close_shutdown+0x152>
 801191a:	4b24      	ldr	r3, [pc, #144]	; (80119ac <tcp_close_shutdown+0x1bc>)
 801191c:	681b      	ldr	r3, [r3, #0]
 801191e:	60bb      	str	r3, [r7, #8]
 8011920:	e00c      	b.n	801193c <tcp_close_shutdown+0x14c>
 8011922:	68bb      	ldr	r3, [r7, #8]
 8011924:	68db      	ldr	r3, [r3, #12]
 8011926:	687a      	ldr	r2, [r7, #4]
 8011928:	429a      	cmp	r2, r3
 801192a:	d104      	bne.n	8011936 <tcp_close_shutdown+0x146>
 801192c:	687b      	ldr	r3, [r7, #4]
 801192e:	68da      	ldr	r2, [r3, #12]
 8011930:	68bb      	ldr	r3, [r7, #8]
 8011932:	60da      	str	r2, [r3, #12]
 8011934:	e005      	b.n	8011942 <tcp_close_shutdown+0x152>
 8011936:	68bb      	ldr	r3, [r7, #8]
 8011938:	68db      	ldr	r3, [r3, #12]
 801193a:	60bb      	str	r3, [r7, #8]
 801193c:	68bb      	ldr	r3, [r7, #8]
 801193e:	2b00      	cmp	r3, #0
 8011940:	d1ef      	bne.n	8011922 <tcp_close_shutdown+0x132>
 8011942:	687b      	ldr	r3, [r7, #4]
 8011944:	2200      	movs	r2, #0
 8011946:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 8011948:	6878      	ldr	r0, [r7, #4]
 801194a:	f7ff fe9f 	bl	801168c <tcp_free>
      break;
 801194e:	e01a      	b.n	8011986 <tcp_close_shutdown+0x196>
    case LISTEN:
      tcp_listen_closed(pcb);
 8011950:	6878      	ldr	r0, [r7, #4]
 8011952:	f7ff ff13 	bl	801177c <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 8011956:	6879      	ldr	r1, [r7, #4]
 8011958:	4815      	ldr	r0, [pc, #84]	; (80119b0 <tcp_close_shutdown+0x1c0>)
 801195a:	f001 f8ab 	bl	8012ab4 <tcp_pcb_remove>
      tcp_free_listen(pcb);
 801195e:	6878      	ldr	r0, [r7, #4]
 8011960:	f7ff feb0 	bl	80116c4 <tcp_free_listen>
      break;
 8011964:	e00f      	b.n	8011986 <tcp_close_shutdown+0x196>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8011966:	6879      	ldr	r1, [r7, #4]
 8011968:	480d      	ldr	r0, [pc, #52]	; (80119a0 <tcp_close_shutdown+0x1b0>)
 801196a:	f001 f8a3 	bl	8012ab4 <tcp_pcb_remove>
 801196e:	4b0d      	ldr	r3, [pc, #52]	; (80119a4 <tcp_close_shutdown+0x1b4>)
 8011970:	2201      	movs	r2, #1
 8011972:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 8011974:	6878      	ldr	r0, [r7, #4]
 8011976:	f7ff fe89 	bl	801168c <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 801197a:	e004      	b.n	8011986 <tcp_close_shutdown+0x196>
    default:
      return tcp_close_shutdown_fin(pcb);
 801197c:	6878      	ldr	r0, [r7, #4]
 801197e:	f000 f819 	bl	80119b4 <tcp_close_shutdown_fin>
 8011982:	4603      	mov	r3, r0
 8011984:	e000      	b.n	8011988 <tcp_close_shutdown+0x198>
  }
  return ERR_OK;
 8011986:	2300      	movs	r3, #0
}
 8011988:	4618      	mov	r0, r3
 801198a:	3710      	adds	r7, #16
 801198c:	46bd      	mov	sp, r7
 801198e:	bdb0      	pop	{r4, r5, r7, pc}
 8011990:	0801d518 	.word	0x0801d518
 8011994:	0801d5ec 	.word	0x0801d5ec
 8011998:	0801d55c 	.word	0x0801d55c
 801199c:	0801d60c 	.word	0x0801d60c
 80119a0:	200070e0 	.word	0x200070e0
 80119a4:	200070e8 	.word	0x200070e8
 80119a8:	20007120 	.word	0x20007120
 80119ac:	200070d8 	.word	0x200070d8
 80119b0:	200070dc 	.word	0x200070dc

080119b4 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 80119b4:	b580      	push	{r7, lr}
 80119b6:	b084      	sub	sp, #16
 80119b8:	af00      	add	r7, sp, #0
 80119ba:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 80119bc:	687b      	ldr	r3, [r7, #4]
 80119be:	2b00      	cmp	r3, #0
 80119c0:	d106      	bne.n	80119d0 <tcp_close_shutdown_fin+0x1c>
 80119c2:	4b2e      	ldr	r3, [pc, #184]	; (8011a7c <tcp_close_shutdown_fin+0xc8>)
 80119c4:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 80119c8:	492d      	ldr	r1, [pc, #180]	; (8011a80 <tcp_close_shutdown_fin+0xcc>)
 80119ca:	482e      	ldr	r0, [pc, #184]	; (8011a84 <tcp_close_shutdown_fin+0xd0>)
 80119cc:	f008 fa94 	bl	8019ef8 <iprintf>

  switch (pcb->state) {
 80119d0:	687b      	ldr	r3, [r7, #4]
 80119d2:	7d1b      	ldrb	r3, [r3, #20]
 80119d4:	2b07      	cmp	r3, #7
 80119d6:	d020      	beq.n	8011a1a <tcp_close_shutdown_fin+0x66>
 80119d8:	2b07      	cmp	r3, #7
 80119da:	dc2b      	bgt.n	8011a34 <tcp_close_shutdown_fin+0x80>
 80119dc:	2b03      	cmp	r3, #3
 80119de:	d002      	beq.n	80119e6 <tcp_close_shutdown_fin+0x32>
 80119e0:	2b04      	cmp	r3, #4
 80119e2:	d00d      	beq.n	8011a00 <tcp_close_shutdown_fin+0x4c>
 80119e4:	e026      	b.n	8011a34 <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 80119e6:	6878      	ldr	r0, [r7, #4]
 80119e8:	f003 feea 	bl	80157c0 <tcp_send_fin>
 80119ec:	4603      	mov	r3, r0
 80119ee:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 80119f0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80119f4:	2b00      	cmp	r3, #0
 80119f6:	d11f      	bne.n	8011a38 <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 80119f8:	687b      	ldr	r3, [r7, #4]
 80119fa:	2205      	movs	r2, #5
 80119fc:	751a      	strb	r2, [r3, #20]
      }
      break;
 80119fe:	e01b      	b.n	8011a38 <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 8011a00:	6878      	ldr	r0, [r7, #4]
 8011a02:	f003 fedd 	bl	80157c0 <tcp_send_fin>
 8011a06:	4603      	mov	r3, r0
 8011a08:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8011a0a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011a0e:	2b00      	cmp	r3, #0
 8011a10:	d114      	bne.n	8011a3c <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 8011a12:	687b      	ldr	r3, [r7, #4]
 8011a14:	2205      	movs	r2, #5
 8011a16:	751a      	strb	r2, [r3, #20]
      }
      break;
 8011a18:	e010      	b.n	8011a3c <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 8011a1a:	6878      	ldr	r0, [r7, #4]
 8011a1c:	f003 fed0 	bl	80157c0 <tcp_send_fin>
 8011a20:	4603      	mov	r3, r0
 8011a22:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8011a24:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011a28:	2b00      	cmp	r3, #0
 8011a2a:	d109      	bne.n	8011a40 <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 8011a2c:	687b      	ldr	r3, [r7, #4]
 8011a2e:	2209      	movs	r2, #9
 8011a30:	751a      	strb	r2, [r3, #20]
      }
      break;
 8011a32:	e005      	b.n	8011a40 <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 8011a34:	2300      	movs	r3, #0
 8011a36:	e01c      	b.n	8011a72 <tcp_close_shutdown_fin+0xbe>
      break;
 8011a38:	bf00      	nop
 8011a3a:	e002      	b.n	8011a42 <tcp_close_shutdown_fin+0x8e>
      break;
 8011a3c:	bf00      	nop
 8011a3e:	e000      	b.n	8011a42 <tcp_close_shutdown_fin+0x8e>
      break;
 8011a40:	bf00      	nop
  }

  if (err == ERR_OK) {
 8011a42:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011a46:	2b00      	cmp	r3, #0
 8011a48:	d103      	bne.n	8011a52 <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 8011a4a:	6878      	ldr	r0, [r7, #4]
 8011a4c:	f003 fff6 	bl	8015a3c <tcp_output>
 8011a50:	e00d      	b.n	8011a6e <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 8011a52:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011a56:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011a5a:	d108      	bne.n	8011a6e <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 8011a5c:	687b      	ldr	r3, [r7, #4]
 8011a5e:	8b5b      	ldrh	r3, [r3, #26]
 8011a60:	f043 0308 	orr.w	r3, r3, #8
 8011a64:	b29a      	uxth	r2, r3
 8011a66:	687b      	ldr	r3, [r7, #4]
 8011a68:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 8011a6a:	2300      	movs	r3, #0
 8011a6c:	e001      	b.n	8011a72 <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 8011a6e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8011a72:	4618      	mov	r0, r3
 8011a74:	3710      	adds	r7, #16
 8011a76:	46bd      	mov	sp, r7
 8011a78:	bd80      	pop	{r7, pc}
 8011a7a:	bf00      	nop
 8011a7c:	0801d518 	.word	0x0801d518
 8011a80:	0801d5c8 	.word	0x0801d5c8
 8011a84:	0801d55c 	.word	0x0801d55c

08011a88 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 8011a88:	b580      	push	{r7, lr}
 8011a8a:	b082      	sub	sp, #8
 8011a8c:	af00      	add	r7, sp, #0
 8011a8e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 8011a90:	687b      	ldr	r3, [r7, #4]
 8011a92:	2b00      	cmp	r3, #0
 8011a94:	d109      	bne.n	8011aaa <tcp_close+0x22>
 8011a96:	4b0f      	ldr	r3, [pc, #60]	; (8011ad4 <tcp_close+0x4c>)
 8011a98:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 8011a9c:	490e      	ldr	r1, [pc, #56]	; (8011ad8 <tcp_close+0x50>)
 8011a9e:	480f      	ldr	r0, [pc, #60]	; (8011adc <tcp_close+0x54>)
 8011aa0:	f008 fa2a 	bl	8019ef8 <iprintf>
 8011aa4:	f06f 030f 	mvn.w	r3, #15
 8011aa8:	e00f      	b.n	8011aca <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 8011aaa:	687b      	ldr	r3, [r7, #4]
 8011aac:	7d1b      	ldrb	r3, [r3, #20]
 8011aae:	2b01      	cmp	r3, #1
 8011ab0:	d006      	beq.n	8011ac0 <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 8011ab2:	687b      	ldr	r3, [r7, #4]
 8011ab4:	8b5b      	ldrh	r3, [r3, #26]
 8011ab6:	f043 0310 	orr.w	r3, r3, #16
 8011aba:	b29a      	uxth	r2, r3
 8011abc:	687b      	ldr	r3, [r7, #4]
 8011abe:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 8011ac0:	2101      	movs	r1, #1
 8011ac2:	6878      	ldr	r0, [r7, #4]
 8011ac4:	f7ff fe94 	bl	80117f0 <tcp_close_shutdown>
 8011ac8:	4603      	mov	r3, r0
}
 8011aca:	4618      	mov	r0, r3
 8011acc:	3708      	adds	r7, #8
 8011ace:	46bd      	mov	sp, r7
 8011ad0:	bd80      	pop	{r7, pc}
 8011ad2:	bf00      	nop
 8011ad4:	0801d518 	.word	0x0801d518
 8011ad8:	0801d628 	.word	0x0801d628
 8011adc:	0801d55c 	.word	0x0801d55c

08011ae0 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 8011ae0:	b580      	push	{r7, lr}
 8011ae2:	b08e      	sub	sp, #56	; 0x38
 8011ae4:	af04      	add	r7, sp, #16
 8011ae6:	6078      	str	r0, [r7, #4]
 8011ae8:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 8011aea:	687b      	ldr	r3, [r7, #4]
 8011aec:	2b00      	cmp	r3, #0
 8011aee:	d107      	bne.n	8011b00 <tcp_abandon+0x20>
 8011af0:	4b52      	ldr	r3, [pc, #328]	; (8011c3c <tcp_abandon+0x15c>)
 8011af2:	f240 223d 	movw	r2, #573	; 0x23d
 8011af6:	4952      	ldr	r1, [pc, #328]	; (8011c40 <tcp_abandon+0x160>)
 8011af8:	4852      	ldr	r0, [pc, #328]	; (8011c44 <tcp_abandon+0x164>)
 8011afa:	f008 f9fd 	bl	8019ef8 <iprintf>
 8011afe:	e099      	b.n	8011c34 <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 8011b00:	687b      	ldr	r3, [r7, #4]
 8011b02:	7d1b      	ldrb	r3, [r3, #20]
 8011b04:	2b01      	cmp	r3, #1
 8011b06:	d106      	bne.n	8011b16 <tcp_abandon+0x36>
 8011b08:	4b4c      	ldr	r3, [pc, #304]	; (8011c3c <tcp_abandon+0x15c>)
 8011b0a:	f44f 7210 	mov.w	r2, #576	; 0x240
 8011b0e:	494e      	ldr	r1, [pc, #312]	; (8011c48 <tcp_abandon+0x168>)
 8011b10:	484c      	ldr	r0, [pc, #304]	; (8011c44 <tcp_abandon+0x164>)
 8011b12:	f008 f9f1 	bl	8019ef8 <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 8011b16:	687b      	ldr	r3, [r7, #4]
 8011b18:	7d1b      	ldrb	r3, [r3, #20]
 8011b1a:	2b0a      	cmp	r3, #10
 8011b1c:	d107      	bne.n	8011b2e <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 8011b1e:	6879      	ldr	r1, [r7, #4]
 8011b20:	484a      	ldr	r0, [pc, #296]	; (8011c4c <tcp_abandon+0x16c>)
 8011b22:	f000 ffc7 	bl	8012ab4 <tcp_pcb_remove>
    tcp_free(pcb);
 8011b26:	6878      	ldr	r0, [r7, #4]
 8011b28:	f7ff fdb0 	bl	801168c <tcp_free>
 8011b2c:	e082      	b.n	8011c34 <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 8011b2e:	2300      	movs	r3, #0
 8011b30:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 8011b32:	2300      	movs	r3, #0
 8011b34:	847b      	strh	r3, [r7, #34]	; 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 8011b36:	687b      	ldr	r3, [r7, #4]
 8011b38:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8011b3a:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 8011b3c:	687b      	ldr	r3, [r7, #4]
 8011b3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011b40:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 8011b42:	687b      	ldr	r3, [r7, #4]
 8011b44:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8011b48:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 8011b4a:	687b      	ldr	r3, [r7, #4]
 8011b4c:	691b      	ldr	r3, [r3, #16]
 8011b4e:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 8011b50:	687b      	ldr	r3, [r7, #4]
 8011b52:	7d1b      	ldrb	r3, [r3, #20]
 8011b54:	2b00      	cmp	r3, #0
 8011b56:	d126      	bne.n	8011ba6 <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 8011b58:	687b      	ldr	r3, [r7, #4]
 8011b5a:	8adb      	ldrh	r3, [r3, #22]
 8011b5c:	2b00      	cmp	r3, #0
 8011b5e:	d02e      	beq.n	8011bbe <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8011b60:	4b3b      	ldr	r3, [pc, #236]	; (8011c50 <tcp_abandon+0x170>)
 8011b62:	681b      	ldr	r3, [r3, #0]
 8011b64:	687a      	ldr	r2, [r7, #4]
 8011b66:	429a      	cmp	r2, r3
 8011b68:	d105      	bne.n	8011b76 <tcp_abandon+0x96>
 8011b6a:	4b39      	ldr	r3, [pc, #228]	; (8011c50 <tcp_abandon+0x170>)
 8011b6c:	681b      	ldr	r3, [r3, #0]
 8011b6e:	68db      	ldr	r3, [r3, #12]
 8011b70:	4a37      	ldr	r2, [pc, #220]	; (8011c50 <tcp_abandon+0x170>)
 8011b72:	6013      	str	r3, [r2, #0]
 8011b74:	e013      	b.n	8011b9e <tcp_abandon+0xbe>
 8011b76:	4b36      	ldr	r3, [pc, #216]	; (8011c50 <tcp_abandon+0x170>)
 8011b78:	681b      	ldr	r3, [r3, #0]
 8011b7a:	61fb      	str	r3, [r7, #28]
 8011b7c:	e00c      	b.n	8011b98 <tcp_abandon+0xb8>
 8011b7e:	69fb      	ldr	r3, [r7, #28]
 8011b80:	68db      	ldr	r3, [r3, #12]
 8011b82:	687a      	ldr	r2, [r7, #4]
 8011b84:	429a      	cmp	r2, r3
 8011b86:	d104      	bne.n	8011b92 <tcp_abandon+0xb2>
 8011b88:	687b      	ldr	r3, [r7, #4]
 8011b8a:	68da      	ldr	r2, [r3, #12]
 8011b8c:	69fb      	ldr	r3, [r7, #28]
 8011b8e:	60da      	str	r2, [r3, #12]
 8011b90:	e005      	b.n	8011b9e <tcp_abandon+0xbe>
 8011b92:	69fb      	ldr	r3, [r7, #28]
 8011b94:	68db      	ldr	r3, [r3, #12]
 8011b96:	61fb      	str	r3, [r7, #28]
 8011b98:	69fb      	ldr	r3, [r7, #28]
 8011b9a:	2b00      	cmp	r3, #0
 8011b9c:	d1ef      	bne.n	8011b7e <tcp_abandon+0x9e>
 8011b9e:	687b      	ldr	r3, [r7, #4]
 8011ba0:	2200      	movs	r2, #0
 8011ba2:	60da      	str	r2, [r3, #12]
 8011ba4:	e00b      	b.n	8011bbe <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 8011ba6:	683b      	ldr	r3, [r7, #0]
 8011ba8:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 8011baa:	687b      	ldr	r3, [r7, #4]
 8011bac:	8adb      	ldrh	r3, [r3, #22]
 8011bae:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8011bb0:	6879      	ldr	r1, [r7, #4]
 8011bb2:	4828      	ldr	r0, [pc, #160]	; (8011c54 <tcp_abandon+0x174>)
 8011bb4:	f000 ff7e 	bl	8012ab4 <tcp_pcb_remove>
 8011bb8:	4b27      	ldr	r3, [pc, #156]	; (8011c58 <tcp_abandon+0x178>)
 8011bba:	2201      	movs	r2, #1
 8011bbc:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 8011bbe:	687b      	ldr	r3, [r7, #4]
 8011bc0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011bc2:	2b00      	cmp	r3, #0
 8011bc4:	d004      	beq.n	8011bd0 <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 8011bc6:	687b      	ldr	r3, [r7, #4]
 8011bc8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011bca:	4618      	mov	r0, r3
 8011bcc:	f000 fd20 	bl	8012610 <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 8011bd0:	687b      	ldr	r3, [r7, #4]
 8011bd2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011bd4:	2b00      	cmp	r3, #0
 8011bd6:	d004      	beq.n	8011be2 <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 8011bd8:	687b      	ldr	r3, [r7, #4]
 8011bda:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011bdc:	4618      	mov	r0, r3
 8011bde:	f000 fd17 	bl	8012610 <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 8011be2:	687b      	ldr	r3, [r7, #4]
 8011be4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011be6:	2b00      	cmp	r3, #0
 8011be8:	d004      	beq.n	8011bf4 <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 8011bea:	687b      	ldr	r3, [r7, #4]
 8011bec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011bee:	4618      	mov	r0, r3
 8011bf0:	f000 fd0e 	bl	8012610 <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 8011bf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011bf6:	2b00      	cmp	r3, #0
 8011bf8:	d00e      	beq.n	8011c18 <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 8011bfa:	6879      	ldr	r1, [r7, #4]
 8011bfc:	687b      	ldr	r3, [r7, #4]
 8011bfe:	3304      	adds	r3, #4
 8011c00:	687a      	ldr	r2, [r7, #4]
 8011c02:	8b12      	ldrh	r2, [r2, #24]
 8011c04:	9202      	str	r2, [sp, #8]
 8011c06:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8011c08:	9201      	str	r2, [sp, #4]
 8011c0a:	9300      	str	r3, [sp, #0]
 8011c0c:	460b      	mov	r3, r1
 8011c0e:	697a      	ldr	r2, [r7, #20]
 8011c10:	69b9      	ldr	r1, [r7, #24]
 8011c12:	6878      	ldr	r0, [r7, #4]
 8011c14:	f004 fcc6 	bl	80165a4 <tcp_rst>
    }
    last_state = pcb->state;
 8011c18:	687b      	ldr	r3, [r7, #4]
 8011c1a:	7d1b      	ldrb	r3, [r3, #20]
 8011c1c:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 8011c1e:	6878      	ldr	r0, [r7, #4]
 8011c20:	f7ff fd34 	bl	801168c <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 8011c24:	693b      	ldr	r3, [r7, #16]
 8011c26:	2b00      	cmp	r3, #0
 8011c28:	d004      	beq.n	8011c34 <tcp_abandon+0x154>
 8011c2a:	693b      	ldr	r3, [r7, #16]
 8011c2c:	f06f 010c 	mvn.w	r1, #12
 8011c30:	68f8      	ldr	r0, [r7, #12]
 8011c32:	4798      	blx	r3
  }
}
 8011c34:	3728      	adds	r7, #40	; 0x28
 8011c36:	46bd      	mov	sp, r7
 8011c38:	bd80      	pop	{r7, pc}
 8011c3a:	bf00      	nop
 8011c3c:	0801d518 	.word	0x0801d518
 8011c40:	0801d65c 	.word	0x0801d65c
 8011c44:	0801d55c 	.word	0x0801d55c
 8011c48:	0801d678 	.word	0x0801d678
 8011c4c:	200070e4 	.word	0x200070e4
 8011c50:	200070d8 	.word	0x200070d8
 8011c54:	200070e0 	.word	0x200070e0
 8011c58:	200070e8 	.word	0x200070e8

08011c5c <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 8011c5c:	b580      	push	{r7, lr}
 8011c5e:	b082      	sub	sp, #8
 8011c60:	af00      	add	r7, sp, #0
 8011c62:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 8011c64:	2101      	movs	r1, #1
 8011c66:	6878      	ldr	r0, [r7, #4]
 8011c68:	f7ff ff3a 	bl	8011ae0 <tcp_abandon>
}
 8011c6c:	bf00      	nop
 8011c6e:	3708      	adds	r7, #8
 8011c70:	46bd      	mov	sp, r7
 8011c72:	bd80      	pop	{r7, pc}

08011c74 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 8011c74:	b580      	push	{r7, lr}
 8011c76:	b084      	sub	sp, #16
 8011c78:	af00      	add	r7, sp, #0
 8011c7a:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 8011c7c:	687b      	ldr	r3, [r7, #4]
 8011c7e:	2b00      	cmp	r3, #0
 8011c80:	d106      	bne.n	8011c90 <tcp_update_rcv_ann_wnd+0x1c>
 8011c82:	4b25      	ldr	r3, [pc, #148]	; (8011d18 <tcp_update_rcv_ann_wnd+0xa4>)
 8011c84:	f240 32a6 	movw	r2, #934	; 0x3a6
 8011c88:	4924      	ldr	r1, [pc, #144]	; (8011d1c <tcp_update_rcv_ann_wnd+0xa8>)
 8011c8a:	4825      	ldr	r0, [pc, #148]	; (8011d20 <tcp_update_rcv_ann_wnd+0xac>)
 8011c8c:	f008 f934 	bl	8019ef8 <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 8011c90:	687b      	ldr	r3, [r7, #4]
 8011c92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011c94:	687a      	ldr	r2, [r7, #4]
 8011c96:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 8011c98:	4413      	add	r3, r2
 8011c9a:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 8011c9c:	687b      	ldr	r3, [r7, #4]
 8011c9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011ca0:	687a      	ldr	r2, [r7, #4]
 8011ca2:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 8011ca4:	f640 3168 	movw	r1, #2920	; 0xb68
 8011ca8:	428a      	cmp	r2, r1
 8011caa:	bf28      	it	cs
 8011cac:	460a      	movcs	r2, r1
 8011cae:	b292      	uxth	r2, r2
 8011cb0:	4413      	add	r3, r2
 8011cb2:	68fa      	ldr	r2, [r7, #12]
 8011cb4:	1ad3      	subs	r3, r2, r3
 8011cb6:	2b00      	cmp	r3, #0
 8011cb8:	db08      	blt.n	8011ccc <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 8011cba:	687b      	ldr	r3, [r7, #4]
 8011cbc:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8011cbe:	687b      	ldr	r3, [r7, #4]
 8011cc0:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 8011cc2:	687b      	ldr	r3, [r7, #4]
 8011cc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011cc6:	68fa      	ldr	r2, [r7, #12]
 8011cc8:	1ad3      	subs	r3, r2, r3
 8011cca:	e020      	b.n	8011d0e <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 8011ccc:	687b      	ldr	r3, [r7, #4]
 8011cce:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8011cd0:	687b      	ldr	r3, [r7, #4]
 8011cd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011cd4:	1ad3      	subs	r3, r2, r3
 8011cd6:	2b00      	cmp	r3, #0
 8011cd8:	dd03      	ble.n	8011ce2 <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 8011cda:	687b      	ldr	r3, [r7, #4]
 8011cdc:	2200      	movs	r2, #0
 8011cde:	855a      	strh	r2, [r3, #42]	; 0x2a
 8011ce0:	e014      	b.n	8011d0c <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 8011ce2:	687b      	ldr	r3, [r7, #4]
 8011ce4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011ce6:	687b      	ldr	r3, [r7, #4]
 8011ce8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011cea:	1ad3      	subs	r3, r2, r3
 8011cec:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 8011cee:	68bb      	ldr	r3, [r7, #8]
 8011cf0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8011cf4:	d306      	bcc.n	8011d04 <tcp_update_rcv_ann_wnd+0x90>
 8011cf6:	4b08      	ldr	r3, [pc, #32]	; (8011d18 <tcp_update_rcv_ann_wnd+0xa4>)
 8011cf8:	f240 32b6 	movw	r2, #950	; 0x3b6
 8011cfc:	4909      	ldr	r1, [pc, #36]	; (8011d24 <tcp_update_rcv_ann_wnd+0xb0>)
 8011cfe:	4808      	ldr	r0, [pc, #32]	; (8011d20 <tcp_update_rcv_ann_wnd+0xac>)
 8011d00:	f008 f8fa 	bl	8019ef8 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 8011d04:	68bb      	ldr	r3, [r7, #8]
 8011d06:	b29a      	uxth	r2, r3
 8011d08:	687b      	ldr	r3, [r7, #4]
 8011d0a:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 8011d0c:	2300      	movs	r3, #0
  }
}
 8011d0e:	4618      	mov	r0, r3
 8011d10:	3710      	adds	r7, #16
 8011d12:	46bd      	mov	sp, r7
 8011d14:	bd80      	pop	{r7, pc}
 8011d16:	bf00      	nop
 8011d18:	0801d518 	.word	0x0801d518
 8011d1c:	0801d774 	.word	0x0801d774
 8011d20:	0801d55c 	.word	0x0801d55c
 8011d24:	0801d798 	.word	0x0801d798

08011d28 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 8011d28:	b580      	push	{r7, lr}
 8011d2a:	b084      	sub	sp, #16
 8011d2c:	af00      	add	r7, sp, #0
 8011d2e:	6078      	str	r0, [r7, #4]
 8011d30:	460b      	mov	r3, r1
 8011d32:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 8011d34:	687b      	ldr	r3, [r7, #4]
 8011d36:	2b00      	cmp	r3, #0
 8011d38:	d107      	bne.n	8011d4a <tcp_recved+0x22>
 8011d3a:	4b20      	ldr	r3, [pc, #128]	; (8011dbc <tcp_recved+0x94>)
 8011d3c:	f240 32cf 	movw	r2, #975	; 0x3cf
 8011d40:	491f      	ldr	r1, [pc, #124]	; (8011dc0 <tcp_recved+0x98>)
 8011d42:	4820      	ldr	r0, [pc, #128]	; (8011dc4 <tcp_recved+0x9c>)
 8011d44:	f008 f8d8 	bl	8019ef8 <iprintf>
 8011d48:	e034      	b.n	8011db4 <tcp_recved+0x8c>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 8011d4a:	687b      	ldr	r3, [r7, #4]
 8011d4c:	7d1b      	ldrb	r3, [r3, #20]
 8011d4e:	2b01      	cmp	r3, #1
 8011d50:	d106      	bne.n	8011d60 <tcp_recved+0x38>
 8011d52:	4b1a      	ldr	r3, [pc, #104]	; (8011dbc <tcp_recved+0x94>)
 8011d54:	f240 32d2 	movw	r2, #978	; 0x3d2
 8011d58:	491b      	ldr	r1, [pc, #108]	; (8011dc8 <tcp_recved+0xa0>)
 8011d5a:	481a      	ldr	r0, [pc, #104]	; (8011dc4 <tcp_recved+0x9c>)
 8011d5c:	f008 f8cc 	bl	8019ef8 <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 8011d60:	687b      	ldr	r3, [r7, #4]
 8011d62:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8011d64:	887b      	ldrh	r3, [r7, #2]
 8011d66:	4413      	add	r3, r2
 8011d68:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 8011d6a:	89fb      	ldrh	r3, [r7, #14]
 8011d6c:	f241 62d0 	movw	r2, #5840	; 0x16d0
 8011d70:	4293      	cmp	r3, r2
 8011d72:	d804      	bhi.n	8011d7e <tcp_recved+0x56>
 8011d74:	687b      	ldr	r3, [r7, #4]
 8011d76:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8011d78:	89fa      	ldrh	r2, [r7, #14]
 8011d7a:	429a      	cmp	r2, r3
 8011d7c:	d204      	bcs.n	8011d88 <tcp_recved+0x60>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 8011d7e:	687b      	ldr	r3, [r7, #4]
 8011d80:	f241 62d0 	movw	r2, #5840	; 0x16d0
 8011d84:	851a      	strh	r2, [r3, #40]	; 0x28
 8011d86:	e002      	b.n	8011d8e <tcp_recved+0x66>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 8011d88:	687b      	ldr	r3, [r7, #4]
 8011d8a:	89fa      	ldrh	r2, [r7, #14]
 8011d8c:	851a      	strh	r2, [r3, #40]	; 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 8011d8e:	6878      	ldr	r0, [r7, #4]
 8011d90:	f7ff ff70 	bl	8011c74 <tcp_update_rcv_ann_wnd>
 8011d94:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 8011d96:	68bb      	ldr	r3, [r7, #8]
 8011d98:	f240 52b3 	movw	r2, #1459	; 0x5b3
 8011d9c:	4293      	cmp	r3, r2
 8011d9e:	d909      	bls.n	8011db4 <tcp_recved+0x8c>
    tcp_ack_now(pcb);
 8011da0:	687b      	ldr	r3, [r7, #4]
 8011da2:	8b5b      	ldrh	r3, [r3, #26]
 8011da4:	f043 0302 	orr.w	r3, r3, #2
 8011da8:	b29a      	uxth	r2, r3
 8011daa:	687b      	ldr	r3, [r7, #4]
 8011dac:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8011dae:	6878      	ldr	r0, [r7, #4]
 8011db0:	f003 fe44 	bl	8015a3c <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 8011db4:	3710      	adds	r7, #16
 8011db6:	46bd      	mov	sp, r7
 8011db8:	bd80      	pop	{r7, pc}
 8011dba:	bf00      	nop
 8011dbc:	0801d518 	.word	0x0801d518
 8011dc0:	0801d7b4 	.word	0x0801d7b4
 8011dc4:	0801d55c 	.word	0x0801d55c
 8011dc8:	0801d7cc 	.word	0x0801d7cc

08011dcc <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 8011dcc:	b5b0      	push	{r4, r5, r7, lr}
 8011dce:	b090      	sub	sp, #64	; 0x40
 8011dd0:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 8011dd2:	2300      	movs	r3, #0
 8011dd4:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  ++tcp_ticks;
 8011dd8:	4b94      	ldr	r3, [pc, #592]	; (801202c <tcp_slowtmr+0x260>)
 8011dda:	681b      	ldr	r3, [r3, #0]
 8011ddc:	3301      	adds	r3, #1
 8011dde:	4a93      	ldr	r2, [pc, #588]	; (801202c <tcp_slowtmr+0x260>)
 8011de0:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 8011de2:	4b93      	ldr	r3, [pc, #588]	; (8012030 <tcp_slowtmr+0x264>)
 8011de4:	781b      	ldrb	r3, [r3, #0]
 8011de6:	3301      	adds	r3, #1
 8011de8:	b2da      	uxtb	r2, r3
 8011dea:	4b91      	ldr	r3, [pc, #580]	; (8012030 <tcp_slowtmr+0x264>)
 8011dec:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 8011dee:	2300      	movs	r3, #0
 8011df0:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_active_pcbs;
 8011df2:	4b90      	ldr	r3, [pc, #576]	; (8012034 <tcp_slowtmr+0x268>)
 8011df4:	681b      	ldr	r3, [r3, #0]
 8011df6:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 8011df8:	e29d      	b.n	8012336 <tcp_slowtmr+0x56a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 8011dfa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011dfc:	7d1b      	ldrb	r3, [r3, #20]
 8011dfe:	2b00      	cmp	r3, #0
 8011e00:	d106      	bne.n	8011e10 <tcp_slowtmr+0x44>
 8011e02:	4b8d      	ldr	r3, [pc, #564]	; (8012038 <tcp_slowtmr+0x26c>)
 8011e04:	f240 42be 	movw	r2, #1214	; 0x4be
 8011e08:	498c      	ldr	r1, [pc, #560]	; (801203c <tcp_slowtmr+0x270>)
 8011e0a:	488d      	ldr	r0, [pc, #564]	; (8012040 <tcp_slowtmr+0x274>)
 8011e0c:	f008 f874 	bl	8019ef8 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 8011e10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011e12:	7d1b      	ldrb	r3, [r3, #20]
 8011e14:	2b01      	cmp	r3, #1
 8011e16:	d106      	bne.n	8011e26 <tcp_slowtmr+0x5a>
 8011e18:	4b87      	ldr	r3, [pc, #540]	; (8012038 <tcp_slowtmr+0x26c>)
 8011e1a:	f240 42bf 	movw	r2, #1215	; 0x4bf
 8011e1e:	4989      	ldr	r1, [pc, #548]	; (8012044 <tcp_slowtmr+0x278>)
 8011e20:	4887      	ldr	r0, [pc, #540]	; (8012040 <tcp_slowtmr+0x274>)
 8011e22:	f008 f869 	bl	8019ef8 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 8011e26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011e28:	7d1b      	ldrb	r3, [r3, #20]
 8011e2a:	2b0a      	cmp	r3, #10
 8011e2c:	d106      	bne.n	8011e3c <tcp_slowtmr+0x70>
 8011e2e:	4b82      	ldr	r3, [pc, #520]	; (8012038 <tcp_slowtmr+0x26c>)
 8011e30:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 8011e34:	4984      	ldr	r1, [pc, #528]	; (8012048 <tcp_slowtmr+0x27c>)
 8011e36:	4882      	ldr	r0, [pc, #520]	; (8012040 <tcp_slowtmr+0x274>)
 8011e38:	f008 f85e 	bl	8019ef8 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 8011e3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011e3e:	7f9a      	ldrb	r2, [r3, #30]
 8011e40:	4b7b      	ldr	r3, [pc, #492]	; (8012030 <tcp_slowtmr+0x264>)
 8011e42:	781b      	ldrb	r3, [r3, #0]
 8011e44:	429a      	cmp	r2, r3
 8011e46:	d105      	bne.n	8011e54 <tcp_slowtmr+0x88>
      /* skip this pcb, we have already processed it */
      prev = pcb;
 8011e48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011e4a:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 8011e4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011e4e:	68db      	ldr	r3, [r3, #12]
 8011e50:	62fb      	str	r3, [r7, #44]	; 0x2c
      continue;
 8011e52:	e270      	b.n	8012336 <tcp_slowtmr+0x56a>
    }
    pcb->last_timer = tcp_timer_ctr;
 8011e54:	4b76      	ldr	r3, [pc, #472]	; (8012030 <tcp_slowtmr+0x264>)
 8011e56:	781a      	ldrb	r2, [r3, #0]
 8011e58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011e5a:	779a      	strb	r2, [r3, #30]

    pcb_remove = 0;
 8011e5c:	2300      	movs	r3, #0
 8011e5e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    pcb_reset = 0;
 8011e62:	2300      	movs	r3, #0
 8011e64:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 8011e68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011e6a:	7d1b      	ldrb	r3, [r3, #20]
 8011e6c:	2b02      	cmp	r3, #2
 8011e6e:	d10a      	bne.n	8011e86 <tcp_slowtmr+0xba>
 8011e70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011e72:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8011e76:	2b05      	cmp	r3, #5
 8011e78:	d905      	bls.n	8011e86 <tcp_slowtmr+0xba>
      ++pcb_remove;
 8011e7a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011e7e:	3301      	adds	r3, #1
 8011e80:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8011e84:	e11e      	b.n	80120c4 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 8011e86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011e88:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8011e8c:	2b0b      	cmp	r3, #11
 8011e8e:	d905      	bls.n	8011e9c <tcp_slowtmr+0xd0>
      ++pcb_remove;
 8011e90:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011e94:	3301      	adds	r3, #1
 8011e96:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8011e9a:	e113      	b.n	80120c4 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 8011e9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011e9e:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8011ea2:	2b00      	cmp	r3, #0
 8011ea4:	d075      	beq.n	8011f92 <tcp_slowtmr+0x1c6>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 8011ea6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011ea8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011eaa:	2b00      	cmp	r3, #0
 8011eac:	d006      	beq.n	8011ebc <tcp_slowtmr+0xf0>
 8011eae:	4b62      	ldr	r3, [pc, #392]	; (8012038 <tcp_slowtmr+0x26c>)
 8011eb0:	f240 42d4 	movw	r2, #1236	; 0x4d4
 8011eb4:	4965      	ldr	r1, [pc, #404]	; (801204c <tcp_slowtmr+0x280>)
 8011eb6:	4862      	ldr	r0, [pc, #392]	; (8012040 <tcp_slowtmr+0x274>)
 8011eb8:	f008 f81e 	bl	8019ef8 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 8011ebc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011ebe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011ec0:	2b00      	cmp	r3, #0
 8011ec2:	d106      	bne.n	8011ed2 <tcp_slowtmr+0x106>
 8011ec4:	4b5c      	ldr	r3, [pc, #368]	; (8012038 <tcp_slowtmr+0x26c>)
 8011ec6:	f240 42d5 	movw	r2, #1237	; 0x4d5
 8011eca:	4961      	ldr	r1, [pc, #388]	; (8012050 <tcp_slowtmr+0x284>)
 8011ecc:	485c      	ldr	r0, [pc, #368]	; (8012040 <tcp_slowtmr+0x274>)
 8011ece:	f008 f813 	bl	8019ef8 <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 8011ed2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011ed4:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 8011ed8:	2b0b      	cmp	r3, #11
 8011eda:	d905      	bls.n	8011ee8 <tcp_slowtmr+0x11c>
          ++pcb_remove; /* max probes reached */
 8011edc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011ee0:	3301      	adds	r3, #1
 8011ee2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8011ee6:	e0ed      	b.n	80120c4 <tcp_slowtmr+0x2f8>
        } else {
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 8011ee8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011eea:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8011eee:	3b01      	subs	r3, #1
 8011ef0:	4a58      	ldr	r2, [pc, #352]	; (8012054 <tcp_slowtmr+0x288>)
 8011ef2:	5cd3      	ldrb	r3, [r2, r3]
 8011ef4:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 8011ef6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011ef8:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8011efc:	7c7a      	ldrb	r2, [r7, #17]
 8011efe:	429a      	cmp	r2, r3
 8011f00:	d907      	bls.n	8011f12 <tcp_slowtmr+0x146>
            pcb->persist_cnt++;
 8011f02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011f04:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8011f08:	3301      	adds	r3, #1
 8011f0a:	b2da      	uxtb	r2, r3
 8011f0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011f0e:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
          }
          if (pcb->persist_cnt >= backoff_cnt) {
 8011f12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011f14:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8011f18:	7c7a      	ldrb	r2, [r7, #17]
 8011f1a:	429a      	cmp	r2, r3
 8011f1c:	f200 80d2 	bhi.w	80120c4 <tcp_slowtmr+0x2f8>
            int next_slot = 1; /* increment timer to next slot */
 8011f20:	2301      	movs	r3, #1
 8011f22:	623b      	str	r3, [r7, #32]
            /* If snd_wnd is zero, send 1 byte probes */
            if (pcb->snd_wnd == 0) {
 8011f24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011f26:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8011f2a:	2b00      	cmp	r3, #0
 8011f2c:	d108      	bne.n	8011f40 <tcp_slowtmr+0x174>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 8011f2e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8011f30:	f004 fc2c 	bl	801678c <tcp_zero_window_probe>
 8011f34:	4603      	mov	r3, r0
 8011f36:	2b00      	cmp	r3, #0
 8011f38:	d014      	beq.n	8011f64 <tcp_slowtmr+0x198>
                next_slot = 0; /* try probe again with current slot */
 8011f3a:	2300      	movs	r3, #0
 8011f3c:	623b      	str	r3, [r7, #32]
 8011f3e:	e011      	b.n	8011f64 <tcp_slowtmr+0x198>
              }
              /* snd_wnd not fully closed, split unsent head and fill window */
            } else {
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 8011f40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011f42:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8011f46:	4619      	mov	r1, r3
 8011f48:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8011f4a:	f003 faf1 	bl	8015530 <tcp_split_unsent_seg>
 8011f4e:	4603      	mov	r3, r0
 8011f50:	2b00      	cmp	r3, #0
 8011f52:	d107      	bne.n	8011f64 <tcp_slowtmr+0x198>
                if (tcp_output(pcb) == ERR_OK) {
 8011f54:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8011f56:	f003 fd71 	bl	8015a3c <tcp_output>
 8011f5a:	4603      	mov	r3, r0
 8011f5c:	2b00      	cmp	r3, #0
 8011f5e:	d101      	bne.n	8011f64 <tcp_slowtmr+0x198>
                  /* sending will cancel persist timer, else retry with current slot */
                  next_slot = 0;
 8011f60:	2300      	movs	r3, #0
 8011f62:	623b      	str	r3, [r7, #32]
                }
              }
            }
            if (next_slot) {
 8011f64:	6a3b      	ldr	r3, [r7, #32]
 8011f66:	2b00      	cmp	r3, #0
 8011f68:	f000 80ac 	beq.w	80120c4 <tcp_slowtmr+0x2f8>
              pcb->persist_cnt = 0;
 8011f6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011f6e:	2200      	movs	r2, #0
 8011f70:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 8011f74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011f76:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8011f7a:	2b06      	cmp	r3, #6
 8011f7c:	f200 80a2 	bhi.w	80120c4 <tcp_slowtmr+0x2f8>
                pcb->persist_backoff++;
 8011f80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011f82:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8011f86:	3301      	adds	r3, #1
 8011f88:	b2da      	uxtb	r2, r3
 8011f8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011f8c:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
 8011f90:	e098      	b.n	80120c4 <tcp_slowtmr+0x2f8>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 8011f92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011f94:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8011f98:	2b00      	cmp	r3, #0
 8011f9a:	db0f      	blt.n	8011fbc <tcp_slowtmr+0x1f0>
 8011f9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011f9e:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8011fa2:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8011fa6:	4293      	cmp	r3, r2
 8011fa8:	d008      	beq.n	8011fbc <tcp_slowtmr+0x1f0>
          ++pcb->rtime;
 8011faa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011fac:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8011fb0:	b29b      	uxth	r3, r3
 8011fb2:	3301      	adds	r3, #1
 8011fb4:	b29b      	uxth	r3, r3
 8011fb6:	b21a      	sxth	r2, r3
 8011fb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011fba:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->rtime >= pcb->rto) {
 8011fbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011fbe:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 8011fc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011fc4:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 8011fc8:	429a      	cmp	r2, r3
 8011fca:	db7b      	blt.n	80120c4 <tcp_slowtmr+0x2f8>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));
          /* If prepare phase fails but we have unsent data but no unacked data,
             still execute the backoff calculations below, as this means we somehow
             failed to send segment. */
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 8011fcc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8011fce:	f004 f829 	bl	8016024 <tcp_rexmit_rto_prepare>
 8011fd2:	4603      	mov	r3, r0
 8011fd4:	2b00      	cmp	r3, #0
 8011fd6:	d007      	beq.n	8011fe8 <tcp_slowtmr+0x21c>
 8011fd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011fda:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011fdc:	2b00      	cmp	r3, #0
 8011fde:	d171      	bne.n	80120c4 <tcp_slowtmr+0x2f8>
 8011fe0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011fe2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011fe4:	2b00      	cmp	r3, #0
 8011fe6:	d06d      	beq.n	80120c4 <tcp_slowtmr+0x2f8>
            /* Double retransmission time-out unless we are trying to
             * connect to somebody (i.e., we are in SYN_SENT). */
            if (pcb->state != SYN_SENT) {
 8011fe8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011fea:	7d1b      	ldrb	r3, [r3, #20]
 8011fec:	2b02      	cmp	r3, #2
 8011fee:	d03a      	beq.n	8012066 <tcp_slowtmr+0x29a>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 8011ff0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011ff2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8011ff6:	2b0c      	cmp	r3, #12
 8011ff8:	bf28      	it	cs
 8011ffa:	230c      	movcs	r3, #12
 8011ffc:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 8011ffe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012000:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8012004:	10db      	asrs	r3, r3, #3
 8012006:	b21b      	sxth	r3, r3
 8012008:	461a      	mov	r2, r3
 801200a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801200c:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8012010:	4413      	add	r3, r2
 8012012:	7efa      	ldrb	r2, [r7, #27]
 8012014:	4910      	ldr	r1, [pc, #64]	; (8012058 <tcp_slowtmr+0x28c>)
 8012016:	5c8a      	ldrb	r2, [r1, r2]
 8012018:	4093      	lsls	r3, r2
 801201a:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 801201c:	697b      	ldr	r3, [r7, #20]
 801201e:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 8012022:	4293      	cmp	r3, r2
 8012024:	dc1a      	bgt.n	801205c <tcp_slowtmr+0x290>
 8012026:	697b      	ldr	r3, [r7, #20]
 8012028:	b21a      	sxth	r2, r3
 801202a:	e019      	b.n	8012060 <tcp_slowtmr+0x294>
 801202c:	200070d4 	.word	0x200070d4
 8012030:	200070ea 	.word	0x200070ea
 8012034:	200070e0 	.word	0x200070e0
 8012038:	0801d518 	.word	0x0801d518
 801203c:	0801d85c 	.word	0x0801d85c
 8012040:	0801d55c 	.word	0x0801d55c
 8012044:	0801d888 	.word	0x0801d888
 8012048:	0801d8b4 	.word	0x0801d8b4
 801204c:	0801d8e4 	.word	0x0801d8e4
 8012050:	0801d918 	.word	0x0801d918
 8012054:	0801f534 	.word	0x0801f534
 8012058:	0801f524 	.word	0x0801f524
 801205c:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8012060:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012062:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
            }

            /* Reset the retransmission timer. */
            pcb->rtime = 0;
 8012066:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012068:	2200      	movs	r2, #0
 801206a:	861a      	strh	r2, [r3, #48]	; 0x30

            /* Reduce congestion window and ssthresh. */
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 801206c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801206e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8012072:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012074:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8012078:	4293      	cmp	r3, r2
 801207a:	bf28      	it	cs
 801207c:	4613      	movcs	r3, r2
 801207e:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 8012080:	8a7b      	ldrh	r3, [r7, #18]
 8012082:	085b      	lsrs	r3, r3, #1
 8012084:	b29a      	uxth	r2, r3
 8012086:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012088:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 801208c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801208e:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8012092:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012094:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8012096:	005b      	lsls	r3, r3, #1
 8012098:	b29b      	uxth	r3, r3
 801209a:	429a      	cmp	r2, r3
 801209c:	d206      	bcs.n	80120ac <tcp_slowtmr+0x2e0>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 801209e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80120a0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80120a2:	005b      	lsls	r3, r3, #1
 80120a4:	b29a      	uxth	r2, r3
 80120a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80120a8:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            }
            pcb->cwnd = pcb->mss;
 80120ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80120ae:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 80120b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80120b2:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
            LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: cwnd %"TCPWNDSIZE_F
                                         " ssthresh %"TCPWNDSIZE_F"\n",
                                         pcb->cwnd, pcb->ssthresh));
            pcb->bytes_acked = 0;
 80120b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80120b8:	2200      	movs	r2, #0
 80120ba:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

            /* The following needs to be called AFTER cwnd is set to one
               mss - STJ */
            tcp_rexmit_rto_commit(pcb);
 80120be:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80120c0:	f004 f820 	bl	8016104 <tcp_rexmit_rto_commit>
          }
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 80120c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80120c6:	7d1b      	ldrb	r3, [r3, #20]
 80120c8:	2b06      	cmp	r3, #6
 80120ca:	d111      	bne.n	80120f0 <tcp_slowtmr+0x324>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 80120cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80120ce:	8b5b      	ldrh	r3, [r3, #26]
 80120d0:	f003 0310 	and.w	r3, r3, #16
 80120d4:	2b00      	cmp	r3, #0
 80120d6:	d00b      	beq.n	80120f0 <tcp_slowtmr+0x324>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 80120d8:	4b9c      	ldr	r3, [pc, #624]	; (801234c <tcp_slowtmr+0x580>)
 80120da:	681a      	ldr	r2, [r3, #0]
 80120dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80120de:	6a1b      	ldr	r3, [r3, #32]
 80120e0:	1ad3      	subs	r3, r2, r3
 80120e2:	2b28      	cmp	r3, #40	; 0x28
 80120e4:	d904      	bls.n	80120f0 <tcp_slowtmr+0x324>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 80120e6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80120ea:	3301      	adds	r3, #1
 80120ec:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 80120f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80120f2:	7a5b      	ldrb	r3, [r3, #9]
 80120f4:	f003 0308 	and.w	r3, r3, #8
 80120f8:	2b00      	cmp	r3, #0
 80120fa:	d04a      	beq.n	8012192 <tcp_slowtmr+0x3c6>
        ((pcb->state == ESTABLISHED) ||
 80120fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80120fe:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8012100:	2b04      	cmp	r3, #4
 8012102:	d003      	beq.n	801210c <tcp_slowtmr+0x340>
         (pcb->state == CLOSE_WAIT))) {
 8012104:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012106:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 8012108:	2b07      	cmp	r3, #7
 801210a:	d142      	bne.n	8012192 <tcp_slowtmr+0x3c6>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 801210c:	4b8f      	ldr	r3, [pc, #572]	; (801234c <tcp_slowtmr+0x580>)
 801210e:	681a      	ldr	r2, [r3, #0]
 8012110:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012112:	6a1b      	ldr	r3, [r3, #32]
 8012114:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 8012116:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012118:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 801211c:	4b8c      	ldr	r3, [pc, #560]	; (8012350 <tcp_slowtmr+0x584>)
 801211e:	440b      	add	r3, r1
 8012120:	498c      	ldr	r1, [pc, #560]	; (8012354 <tcp_slowtmr+0x588>)
 8012122:	fba1 1303 	umull	r1, r3, r1, r3
 8012126:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8012128:	429a      	cmp	r2, r3
 801212a:	d90a      	bls.n	8012142 <tcp_slowtmr+0x376>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print_val(TCP_DEBUG, pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 801212c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012130:	3301      	adds	r3, #1
 8012132:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        ++pcb_reset;
 8012136:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801213a:	3301      	adds	r3, #1
 801213c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8012140:	e027      	b.n	8012192 <tcp_slowtmr+0x3c6>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 8012142:	4b82      	ldr	r3, [pc, #520]	; (801234c <tcp_slowtmr+0x580>)
 8012144:	681a      	ldr	r2, [r3, #0]
 8012146:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012148:	6a1b      	ldr	r3, [r3, #32]
 801214a:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 801214c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801214e:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 8012152:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012154:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 8012158:	4618      	mov	r0, r3
 801215a:	4b7f      	ldr	r3, [pc, #508]	; (8012358 <tcp_slowtmr+0x58c>)
 801215c:	fb00 f303 	mul.w	r3, r0, r3
 8012160:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 8012162:	497c      	ldr	r1, [pc, #496]	; (8012354 <tcp_slowtmr+0x588>)
 8012164:	fba1 1303 	umull	r1, r3, r1, r3
 8012168:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 801216a:	429a      	cmp	r2, r3
 801216c:	d911      	bls.n	8012192 <tcp_slowtmr+0x3c6>
        err = tcp_keepalive(pcb);
 801216e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8012170:	f004 facc 	bl	801670c <tcp_keepalive>
 8012174:	4603      	mov	r3, r0
 8012176:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (err == ERR_OK) {
 801217a:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 801217e:	2b00      	cmp	r3, #0
 8012180:	d107      	bne.n	8012192 <tcp_slowtmr+0x3c6>
          pcb->keep_cnt_sent++;
 8012182:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012184:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 8012188:	3301      	adds	r3, #1
 801218a:	b2da      	uxtb	r2, r3
 801218c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801218e:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 8012192:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012194:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8012196:	2b00      	cmp	r3, #0
 8012198:	d011      	beq.n	80121be <tcp_slowtmr+0x3f2>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 801219a:	4b6c      	ldr	r3, [pc, #432]	; (801234c <tcp_slowtmr+0x580>)
 801219c:	681a      	ldr	r2, [r3, #0]
 801219e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80121a0:	6a1b      	ldr	r3, [r3, #32]
 80121a2:	1ad2      	subs	r2, r2, r3
 80121a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80121a6:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 80121aa:	4619      	mov	r1, r3
 80121ac:	460b      	mov	r3, r1
 80121ae:	005b      	lsls	r3, r3, #1
 80121b0:	440b      	add	r3, r1
 80121b2:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 80121b4:	429a      	cmp	r2, r3
 80121b6:	d302      	bcc.n	80121be <tcp_slowtmr+0x3f2>
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
      tcp_free_ooseq(pcb);
 80121b8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80121ba:	f000 fddf 	bl	8012d7c <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 80121be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80121c0:	7d1b      	ldrb	r3, [r3, #20]
 80121c2:	2b03      	cmp	r3, #3
 80121c4:	d10b      	bne.n	80121de <tcp_slowtmr+0x412>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 80121c6:	4b61      	ldr	r3, [pc, #388]	; (801234c <tcp_slowtmr+0x580>)
 80121c8:	681a      	ldr	r2, [r3, #0]
 80121ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80121cc:	6a1b      	ldr	r3, [r3, #32]
 80121ce:	1ad3      	subs	r3, r2, r3
 80121d0:	2b28      	cmp	r3, #40	; 0x28
 80121d2:	d904      	bls.n	80121de <tcp_slowtmr+0x412>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 80121d4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80121d8:	3301      	adds	r3, #1
 80121da:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 80121de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80121e0:	7d1b      	ldrb	r3, [r3, #20]
 80121e2:	2b09      	cmp	r3, #9
 80121e4:	d10b      	bne.n	80121fe <tcp_slowtmr+0x432>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 80121e6:	4b59      	ldr	r3, [pc, #356]	; (801234c <tcp_slowtmr+0x580>)
 80121e8:	681a      	ldr	r2, [r3, #0]
 80121ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80121ec:	6a1b      	ldr	r3, [r3, #32]
 80121ee:	1ad3      	subs	r3, r2, r3
 80121f0:	2bf0      	cmp	r3, #240	; 0xf0
 80121f2:	d904      	bls.n	80121fe <tcp_slowtmr+0x432>
        ++pcb_remove;
 80121f4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80121f8:	3301      	adds	r3, #1
 80121fa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 80121fe:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012202:	2b00      	cmp	r3, #0
 8012204:	d060      	beq.n	80122c8 <tcp_slowtmr+0x4fc>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 8012206:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012208:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801220c:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 801220e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8012210:	f000 fc00 	bl	8012a14 <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 8012214:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012216:	2b00      	cmp	r3, #0
 8012218:	d010      	beq.n	801223c <tcp_slowtmr+0x470>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 801221a:	4b50      	ldr	r3, [pc, #320]	; (801235c <tcp_slowtmr+0x590>)
 801221c:	681b      	ldr	r3, [r3, #0]
 801221e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8012220:	429a      	cmp	r2, r3
 8012222:	d106      	bne.n	8012232 <tcp_slowtmr+0x466>
 8012224:	4b4e      	ldr	r3, [pc, #312]	; (8012360 <tcp_slowtmr+0x594>)
 8012226:	f240 526d 	movw	r2, #1389	; 0x56d
 801222a:	494e      	ldr	r1, [pc, #312]	; (8012364 <tcp_slowtmr+0x598>)
 801222c:	484e      	ldr	r0, [pc, #312]	; (8012368 <tcp_slowtmr+0x59c>)
 801222e:	f007 fe63 	bl	8019ef8 <iprintf>
        prev->next = pcb->next;
 8012232:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012234:	68da      	ldr	r2, [r3, #12]
 8012236:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012238:	60da      	str	r2, [r3, #12]
 801223a:	e00f      	b.n	801225c <tcp_slowtmr+0x490>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 801223c:	4b47      	ldr	r3, [pc, #284]	; (801235c <tcp_slowtmr+0x590>)
 801223e:	681b      	ldr	r3, [r3, #0]
 8012240:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8012242:	429a      	cmp	r2, r3
 8012244:	d006      	beq.n	8012254 <tcp_slowtmr+0x488>
 8012246:	4b46      	ldr	r3, [pc, #280]	; (8012360 <tcp_slowtmr+0x594>)
 8012248:	f240 5271 	movw	r2, #1393	; 0x571
 801224c:	4947      	ldr	r1, [pc, #284]	; (801236c <tcp_slowtmr+0x5a0>)
 801224e:	4846      	ldr	r0, [pc, #280]	; (8012368 <tcp_slowtmr+0x59c>)
 8012250:	f007 fe52 	bl	8019ef8 <iprintf>
        tcp_active_pcbs = pcb->next;
 8012254:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012256:	68db      	ldr	r3, [r3, #12]
 8012258:	4a40      	ldr	r2, [pc, #256]	; (801235c <tcp_slowtmr+0x590>)
 801225a:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 801225c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8012260:	2b00      	cmp	r3, #0
 8012262:	d013      	beq.n	801228c <tcp_slowtmr+0x4c0>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8012264:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012266:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8012268:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801226a:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 801226c:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 801226e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012270:	3304      	adds	r3, #4
 8012272:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8012274:	8ad2      	ldrh	r2, [r2, #22]
 8012276:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8012278:	8b09      	ldrh	r1, [r1, #24]
 801227a:	9102      	str	r1, [sp, #8]
 801227c:	9201      	str	r2, [sp, #4]
 801227e:	9300      	str	r3, [sp, #0]
 8012280:	462b      	mov	r3, r5
 8012282:	4622      	mov	r2, r4
 8012284:	4601      	mov	r1, r0
 8012286:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8012288:	f004 f98c 	bl	80165a4 <tcp_rst>
                pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 801228c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801228e:	691b      	ldr	r3, [r3, #16]
 8012290:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 8012292:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012294:	7d1b      	ldrb	r3, [r3, #20]
 8012296:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 8012298:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801229a:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 801229c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801229e:	68db      	ldr	r3, [r3, #12]
 80122a0:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 80122a2:	6838      	ldr	r0, [r7, #0]
 80122a4:	f7ff f9f2 	bl	801168c <tcp_free>

      tcp_active_pcbs_changed = 0;
 80122a8:	4b31      	ldr	r3, [pc, #196]	; (8012370 <tcp_slowtmr+0x5a4>)
 80122aa:	2200      	movs	r2, #0
 80122ac:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 80122ae:	68fb      	ldr	r3, [r7, #12]
 80122b0:	2b00      	cmp	r3, #0
 80122b2:	d004      	beq.n	80122be <tcp_slowtmr+0x4f2>
 80122b4:	68fb      	ldr	r3, [r7, #12]
 80122b6:	f06f 010c 	mvn.w	r1, #12
 80122ba:	68b8      	ldr	r0, [r7, #8]
 80122bc:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 80122be:	4b2c      	ldr	r3, [pc, #176]	; (8012370 <tcp_slowtmr+0x5a4>)
 80122c0:	781b      	ldrb	r3, [r3, #0]
 80122c2:	2b00      	cmp	r3, #0
 80122c4:	d037      	beq.n	8012336 <tcp_slowtmr+0x56a>
        goto tcp_slowtmr_start;
 80122c6:	e592      	b.n	8011dee <tcp_slowtmr+0x22>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 80122c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80122ca:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 80122cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80122ce:	68db      	ldr	r3, [r3, #12]
 80122d0:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 80122d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80122d4:	7f1b      	ldrb	r3, [r3, #28]
 80122d6:	3301      	adds	r3, #1
 80122d8:	b2da      	uxtb	r2, r3
 80122da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80122dc:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 80122de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80122e0:	7f1a      	ldrb	r2, [r3, #28]
 80122e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80122e4:	7f5b      	ldrb	r3, [r3, #29]
 80122e6:	429a      	cmp	r2, r3
 80122e8:	d325      	bcc.n	8012336 <tcp_slowtmr+0x56a>
        prev->polltmr = 0;
 80122ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80122ec:	2200      	movs	r2, #0
 80122ee:	771a      	strb	r2, [r3, #28]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 80122f0:	4b1f      	ldr	r3, [pc, #124]	; (8012370 <tcp_slowtmr+0x5a4>)
 80122f2:	2200      	movs	r2, #0
 80122f4:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 80122f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80122f8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80122fc:	2b00      	cmp	r3, #0
 80122fe:	d00b      	beq.n	8012318 <tcp_slowtmr+0x54c>
 8012300:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012302:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8012306:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8012308:	6912      	ldr	r2, [r2, #16]
 801230a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 801230c:	4610      	mov	r0, r2
 801230e:	4798      	blx	r3
 8012310:	4603      	mov	r3, r0
 8012312:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8012316:	e002      	b.n	801231e <tcp_slowtmr+0x552>
 8012318:	2300      	movs	r3, #0
 801231a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (tcp_active_pcbs_changed) {
 801231e:	4b14      	ldr	r3, [pc, #80]	; (8012370 <tcp_slowtmr+0x5a4>)
 8012320:	781b      	ldrb	r3, [r3, #0]
 8012322:	2b00      	cmp	r3, #0
 8012324:	d000      	beq.n	8012328 <tcp_slowtmr+0x55c>
          goto tcp_slowtmr_start;
 8012326:	e562      	b.n	8011dee <tcp_slowtmr+0x22>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 8012328:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 801232c:	2b00      	cmp	r3, #0
 801232e:	d102      	bne.n	8012336 <tcp_slowtmr+0x56a>
          tcp_output(prev);
 8012330:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8012332:	f003 fb83 	bl	8015a3c <tcp_output>
  while (pcb != NULL) {
 8012336:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012338:	2b00      	cmp	r3, #0
 801233a:	f47f ad5e 	bne.w	8011dfa <tcp_slowtmr+0x2e>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 801233e:	2300      	movs	r3, #0
 8012340:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_tw_pcbs;
 8012342:	4b0c      	ldr	r3, [pc, #48]	; (8012374 <tcp_slowtmr+0x5a8>)
 8012344:	681b      	ldr	r3, [r3, #0]
 8012346:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 8012348:	e069      	b.n	801241e <tcp_slowtmr+0x652>
 801234a:	bf00      	nop
 801234c:	200070d4 	.word	0x200070d4
 8012350:	000a4cb8 	.word	0x000a4cb8
 8012354:	10624dd3 	.word	0x10624dd3
 8012358:	000124f8 	.word	0x000124f8
 801235c:	200070e0 	.word	0x200070e0
 8012360:	0801d518 	.word	0x0801d518
 8012364:	0801d950 	.word	0x0801d950
 8012368:	0801d55c 	.word	0x0801d55c
 801236c:	0801d97c 	.word	0x0801d97c
 8012370:	200070e8 	.word	0x200070e8
 8012374:	200070e4 	.word	0x200070e4
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8012378:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801237a:	7d1b      	ldrb	r3, [r3, #20]
 801237c:	2b0a      	cmp	r3, #10
 801237e:	d006      	beq.n	801238e <tcp_slowtmr+0x5c2>
 8012380:	4b2b      	ldr	r3, [pc, #172]	; (8012430 <tcp_slowtmr+0x664>)
 8012382:	f240 52a1 	movw	r2, #1441	; 0x5a1
 8012386:	492b      	ldr	r1, [pc, #172]	; (8012434 <tcp_slowtmr+0x668>)
 8012388:	482b      	ldr	r0, [pc, #172]	; (8012438 <tcp_slowtmr+0x66c>)
 801238a:	f007 fdb5 	bl	8019ef8 <iprintf>
    pcb_remove = 0;
 801238e:	2300      	movs	r3, #0
 8012390:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8012394:	4b29      	ldr	r3, [pc, #164]	; (801243c <tcp_slowtmr+0x670>)
 8012396:	681a      	ldr	r2, [r3, #0]
 8012398:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801239a:	6a1b      	ldr	r3, [r3, #32]
 801239c:	1ad3      	subs	r3, r2, r3
 801239e:	2bf0      	cmp	r3, #240	; 0xf0
 80123a0:	d904      	bls.n	80123ac <tcp_slowtmr+0x5e0>
      ++pcb_remove;
 80123a2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80123a6:	3301      	adds	r3, #1
 80123a8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 80123ac:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80123b0:	2b00      	cmp	r3, #0
 80123b2:	d02f      	beq.n	8012414 <tcp_slowtmr+0x648>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 80123b4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80123b6:	f000 fb2d 	bl	8012a14 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 80123ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80123bc:	2b00      	cmp	r3, #0
 80123be:	d010      	beq.n	80123e2 <tcp_slowtmr+0x616>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 80123c0:	4b1f      	ldr	r3, [pc, #124]	; (8012440 <tcp_slowtmr+0x674>)
 80123c2:	681b      	ldr	r3, [r3, #0]
 80123c4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80123c6:	429a      	cmp	r2, r3
 80123c8:	d106      	bne.n	80123d8 <tcp_slowtmr+0x60c>
 80123ca:	4b19      	ldr	r3, [pc, #100]	; (8012430 <tcp_slowtmr+0x664>)
 80123cc:	f240 52af 	movw	r2, #1455	; 0x5af
 80123d0:	491c      	ldr	r1, [pc, #112]	; (8012444 <tcp_slowtmr+0x678>)
 80123d2:	4819      	ldr	r0, [pc, #100]	; (8012438 <tcp_slowtmr+0x66c>)
 80123d4:	f007 fd90 	bl	8019ef8 <iprintf>
        prev->next = pcb->next;
 80123d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80123da:	68da      	ldr	r2, [r3, #12]
 80123dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80123de:	60da      	str	r2, [r3, #12]
 80123e0:	e00f      	b.n	8012402 <tcp_slowtmr+0x636>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 80123e2:	4b17      	ldr	r3, [pc, #92]	; (8012440 <tcp_slowtmr+0x674>)
 80123e4:	681b      	ldr	r3, [r3, #0]
 80123e6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80123e8:	429a      	cmp	r2, r3
 80123ea:	d006      	beq.n	80123fa <tcp_slowtmr+0x62e>
 80123ec:	4b10      	ldr	r3, [pc, #64]	; (8012430 <tcp_slowtmr+0x664>)
 80123ee:	f240 52b3 	movw	r2, #1459	; 0x5b3
 80123f2:	4915      	ldr	r1, [pc, #84]	; (8012448 <tcp_slowtmr+0x67c>)
 80123f4:	4810      	ldr	r0, [pc, #64]	; (8012438 <tcp_slowtmr+0x66c>)
 80123f6:	f007 fd7f 	bl	8019ef8 <iprintf>
        tcp_tw_pcbs = pcb->next;
 80123fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80123fc:	68db      	ldr	r3, [r3, #12]
 80123fe:	4a10      	ldr	r2, [pc, #64]	; (8012440 <tcp_slowtmr+0x674>)
 8012400:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 8012402:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012404:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 8012406:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012408:	68db      	ldr	r3, [r3, #12]
 801240a:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 801240c:	69f8      	ldr	r0, [r7, #28]
 801240e:	f7ff f93d 	bl	801168c <tcp_free>
 8012412:	e004      	b.n	801241e <tcp_slowtmr+0x652>
    } else {
      prev = pcb;
 8012414:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012416:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 8012418:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801241a:	68db      	ldr	r3, [r3, #12]
 801241c:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 801241e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012420:	2b00      	cmp	r3, #0
 8012422:	d1a9      	bne.n	8012378 <tcp_slowtmr+0x5ac>
    }
  }
}
 8012424:	bf00      	nop
 8012426:	bf00      	nop
 8012428:	3730      	adds	r7, #48	; 0x30
 801242a:	46bd      	mov	sp, r7
 801242c:	bdb0      	pop	{r4, r5, r7, pc}
 801242e:	bf00      	nop
 8012430:	0801d518 	.word	0x0801d518
 8012434:	0801d9a8 	.word	0x0801d9a8
 8012438:	0801d55c 	.word	0x0801d55c
 801243c:	200070d4 	.word	0x200070d4
 8012440:	200070e4 	.word	0x200070e4
 8012444:	0801d9d8 	.word	0x0801d9d8
 8012448:	0801da00 	.word	0x0801da00

0801244c <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 801244c:	b580      	push	{r7, lr}
 801244e:	b082      	sub	sp, #8
 8012450:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 8012452:	4b2d      	ldr	r3, [pc, #180]	; (8012508 <tcp_fasttmr+0xbc>)
 8012454:	781b      	ldrb	r3, [r3, #0]
 8012456:	3301      	adds	r3, #1
 8012458:	b2da      	uxtb	r2, r3
 801245a:	4b2b      	ldr	r3, [pc, #172]	; (8012508 <tcp_fasttmr+0xbc>)
 801245c:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 801245e:	4b2b      	ldr	r3, [pc, #172]	; (801250c <tcp_fasttmr+0xc0>)
 8012460:	681b      	ldr	r3, [r3, #0]
 8012462:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8012464:	e048      	b.n	80124f8 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 8012466:	687b      	ldr	r3, [r7, #4]
 8012468:	7f9a      	ldrb	r2, [r3, #30]
 801246a:	4b27      	ldr	r3, [pc, #156]	; (8012508 <tcp_fasttmr+0xbc>)
 801246c:	781b      	ldrb	r3, [r3, #0]
 801246e:	429a      	cmp	r2, r3
 8012470:	d03f      	beq.n	80124f2 <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 8012472:	4b25      	ldr	r3, [pc, #148]	; (8012508 <tcp_fasttmr+0xbc>)
 8012474:	781a      	ldrb	r2, [r3, #0]
 8012476:	687b      	ldr	r3, [r7, #4]
 8012478:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 801247a:	687b      	ldr	r3, [r7, #4]
 801247c:	8b5b      	ldrh	r3, [r3, #26]
 801247e:	f003 0301 	and.w	r3, r3, #1
 8012482:	2b00      	cmp	r3, #0
 8012484:	d010      	beq.n	80124a8 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 8012486:	687b      	ldr	r3, [r7, #4]
 8012488:	8b5b      	ldrh	r3, [r3, #26]
 801248a:	f043 0302 	orr.w	r3, r3, #2
 801248e:	b29a      	uxth	r2, r3
 8012490:	687b      	ldr	r3, [r7, #4]
 8012492:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 8012494:	6878      	ldr	r0, [r7, #4]
 8012496:	f003 fad1 	bl	8015a3c <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801249a:	687b      	ldr	r3, [r7, #4]
 801249c:	8b5b      	ldrh	r3, [r3, #26]
 801249e:	f023 0303 	bic.w	r3, r3, #3
 80124a2:	b29a      	uxth	r2, r3
 80124a4:	687b      	ldr	r3, [r7, #4]
 80124a6:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 80124a8:	687b      	ldr	r3, [r7, #4]
 80124aa:	8b5b      	ldrh	r3, [r3, #26]
 80124ac:	f003 0308 	and.w	r3, r3, #8
 80124b0:	2b00      	cmp	r3, #0
 80124b2:	d009      	beq.n	80124c8 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 80124b4:	687b      	ldr	r3, [r7, #4]
 80124b6:	8b5b      	ldrh	r3, [r3, #26]
 80124b8:	f023 0308 	bic.w	r3, r3, #8
 80124bc:	b29a      	uxth	r2, r3
 80124be:	687b      	ldr	r3, [r7, #4]
 80124c0:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 80124c2:	6878      	ldr	r0, [r7, #4]
 80124c4:	f7ff fa76 	bl	80119b4 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 80124c8:	687b      	ldr	r3, [r7, #4]
 80124ca:	68db      	ldr	r3, [r3, #12]
 80124cc:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 80124ce:	687b      	ldr	r3, [r7, #4]
 80124d0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80124d2:	2b00      	cmp	r3, #0
 80124d4:	d00a      	beq.n	80124ec <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 80124d6:	4b0e      	ldr	r3, [pc, #56]	; (8012510 <tcp_fasttmr+0xc4>)
 80124d8:	2200      	movs	r2, #0
 80124da:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 80124dc:	6878      	ldr	r0, [r7, #4]
 80124de:	f000 f819 	bl	8012514 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 80124e2:	4b0b      	ldr	r3, [pc, #44]	; (8012510 <tcp_fasttmr+0xc4>)
 80124e4:	781b      	ldrb	r3, [r3, #0]
 80124e6:	2b00      	cmp	r3, #0
 80124e8:	d000      	beq.n	80124ec <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 80124ea:	e7b8      	b.n	801245e <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 80124ec:	683b      	ldr	r3, [r7, #0]
 80124ee:	607b      	str	r3, [r7, #4]
 80124f0:	e002      	b.n	80124f8 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 80124f2:	687b      	ldr	r3, [r7, #4]
 80124f4:	68db      	ldr	r3, [r3, #12]
 80124f6:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 80124f8:	687b      	ldr	r3, [r7, #4]
 80124fa:	2b00      	cmp	r3, #0
 80124fc:	d1b3      	bne.n	8012466 <tcp_fasttmr+0x1a>
    }
  }
}
 80124fe:	bf00      	nop
 8012500:	bf00      	nop
 8012502:	3708      	adds	r7, #8
 8012504:	46bd      	mov	sp, r7
 8012506:	bd80      	pop	{r7, pc}
 8012508:	200070ea 	.word	0x200070ea
 801250c:	200070e0 	.word	0x200070e0
 8012510:	200070e8 	.word	0x200070e8

08012514 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 8012514:	b590      	push	{r4, r7, lr}
 8012516:	b085      	sub	sp, #20
 8012518:	af00      	add	r7, sp, #0
 801251a:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 801251c:	687b      	ldr	r3, [r7, #4]
 801251e:	2b00      	cmp	r3, #0
 8012520:	d109      	bne.n	8012536 <tcp_process_refused_data+0x22>
 8012522:	4b38      	ldr	r3, [pc, #224]	; (8012604 <tcp_process_refused_data+0xf0>)
 8012524:	f240 6209 	movw	r2, #1545	; 0x609
 8012528:	4937      	ldr	r1, [pc, #220]	; (8012608 <tcp_process_refused_data+0xf4>)
 801252a:	4838      	ldr	r0, [pc, #224]	; (801260c <tcp_process_refused_data+0xf8>)
 801252c:	f007 fce4 	bl	8019ef8 <iprintf>
 8012530:	f06f 030f 	mvn.w	r3, #15
 8012534:	e061      	b.n	80125fa <tcp_process_refused_data+0xe6>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 8012536:	687b      	ldr	r3, [r7, #4]
 8012538:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801253a:	7b5b      	ldrb	r3, [r3, #13]
 801253c:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 801253e:	687b      	ldr	r3, [r7, #4]
 8012540:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8012542:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 8012544:	687b      	ldr	r3, [r7, #4]
 8012546:	2200      	movs	r2, #0
 8012548:	679a      	str	r2, [r3, #120]	; 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 801254a:	687b      	ldr	r3, [r7, #4]
 801254c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8012550:	2b00      	cmp	r3, #0
 8012552:	d00b      	beq.n	801256c <tcp_process_refused_data+0x58>
 8012554:	687b      	ldr	r3, [r7, #4]
 8012556:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 801255a:	687b      	ldr	r3, [r7, #4]
 801255c:	6918      	ldr	r0, [r3, #16]
 801255e:	2300      	movs	r3, #0
 8012560:	68ba      	ldr	r2, [r7, #8]
 8012562:	6879      	ldr	r1, [r7, #4]
 8012564:	47a0      	blx	r4
 8012566:	4603      	mov	r3, r0
 8012568:	73fb      	strb	r3, [r7, #15]
 801256a:	e007      	b.n	801257c <tcp_process_refused_data+0x68>
 801256c:	2300      	movs	r3, #0
 801256e:	68ba      	ldr	r2, [r7, #8]
 8012570:	6879      	ldr	r1, [r7, #4]
 8012572:	2000      	movs	r0, #0
 8012574:	f000 f8a6 	bl	80126c4 <tcp_recv_null>
 8012578:	4603      	mov	r3, r0
 801257a:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 801257c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8012580:	2b00      	cmp	r3, #0
 8012582:	d12b      	bne.n	80125dc <tcp_process_refused_data+0xc8>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 8012584:	7bbb      	ldrb	r3, [r7, #14]
 8012586:	f003 0320 	and.w	r3, r3, #32
 801258a:	2b00      	cmp	r3, #0
 801258c:	d034      	beq.n	80125f8 <tcp_process_refused_data+0xe4>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 801258e:	687b      	ldr	r3, [r7, #4]
 8012590:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8012592:	f241 62d0 	movw	r2, #5840	; 0x16d0
 8012596:	4293      	cmp	r3, r2
 8012598:	d005      	beq.n	80125a6 <tcp_process_refused_data+0x92>
          pcb->rcv_wnd++;
 801259a:	687b      	ldr	r3, [r7, #4]
 801259c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801259e:	3301      	adds	r3, #1
 80125a0:	b29a      	uxth	r2, r3
 80125a2:	687b      	ldr	r3, [r7, #4]
 80125a4:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 80125a6:	687b      	ldr	r3, [r7, #4]
 80125a8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80125ac:	2b00      	cmp	r3, #0
 80125ae:	d00b      	beq.n	80125c8 <tcp_process_refused_data+0xb4>
 80125b0:	687b      	ldr	r3, [r7, #4]
 80125b2:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 80125b6:	687b      	ldr	r3, [r7, #4]
 80125b8:	6918      	ldr	r0, [r3, #16]
 80125ba:	2300      	movs	r3, #0
 80125bc:	2200      	movs	r2, #0
 80125be:	6879      	ldr	r1, [r7, #4]
 80125c0:	47a0      	blx	r4
 80125c2:	4603      	mov	r3, r0
 80125c4:	73fb      	strb	r3, [r7, #15]
 80125c6:	e001      	b.n	80125cc <tcp_process_refused_data+0xb8>
 80125c8:	2300      	movs	r3, #0
 80125ca:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 80125cc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80125d0:	f113 0f0d 	cmn.w	r3, #13
 80125d4:	d110      	bne.n	80125f8 <tcp_process_refused_data+0xe4>
          return ERR_ABRT;
 80125d6:	f06f 030c 	mvn.w	r3, #12
 80125da:	e00e      	b.n	80125fa <tcp_process_refused_data+0xe6>
        }
      }
    } else if (err == ERR_ABRT) {
 80125dc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80125e0:	f113 0f0d 	cmn.w	r3, #13
 80125e4:	d102      	bne.n	80125ec <tcp_process_refused_data+0xd8>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 80125e6:	f06f 030c 	mvn.w	r3, #12
 80125ea:	e006      	b.n	80125fa <tcp_process_refused_data+0xe6>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 80125ec:	687b      	ldr	r3, [r7, #4]
 80125ee:	68ba      	ldr	r2, [r7, #8]
 80125f0:	679a      	str	r2, [r3, #120]	; 0x78
      return ERR_INPROGRESS;
 80125f2:	f06f 0304 	mvn.w	r3, #4
 80125f6:	e000      	b.n	80125fa <tcp_process_refused_data+0xe6>
    }
  }
  return ERR_OK;
 80125f8:	2300      	movs	r3, #0
}
 80125fa:	4618      	mov	r0, r3
 80125fc:	3714      	adds	r7, #20
 80125fe:	46bd      	mov	sp, r7
 8012600:	bd90      	pop	{r4, r7, pc}
 8012602:	bf00      	nop
 8012604:	0801d518 	.word	0x0801d518
 8012608:	0801da28 	.word	0x0801da28
 801260c:	0801d55c 	.word	0x0801d55c

08012610 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 8012610:	b580      	push	{r7, lr}
 8012612:	b084      	sub	sp, #16
 8012614:	af00      	add	r7, sp, #0
 8012616:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 8012618:	e007      	b.n	801262a <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 801261a:	687b      	ldr	r3, [r7, #4]
 801261c:	681b      	ldr	r3, [r3, #0]
 801261e:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 8012620:	6878      	ldr	r0, [r7, #4]
 8012622:	f000 f80a 	bl	801263a <tcp_seg_free>
    seg = next;
 8012626:	68fb      	ldr	r3, [r7, #12]
 8012628:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 801262a:	687b      	ldr	r3, [r7, #4]
 801262c:	2b00      	cmp	r3, #0
 801262e:	d1f4      	bne.n	801261a <tcp_segs_free+0xa>
  }
}
 8012630:	bf00      	nop
 8012632:	bf00      	nop
 8012634:	3710      	adds	r7, #16
 8012636:	46bd      	mov	sp, r7
 8012638:	bd80      	pop	{r7, pc}

0801263a <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 801263a:	b580      	push	{r7, lr}
 801263c:	b082      	sub	sp, #8
 801263e:	af00      	add	r7, sp, #0
 8012640:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 8012642:	687b      	ldr	r3, [r7, #4]
 8012644:	2b00      	cmp	r3, #0
 8012646:	d00c      	beq.n	8012662 <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 8012648:	687b      	ldr	r3, [r7, #4]
 801264a:	685b      	ldr	r3, [r3, #4]
 801264c:	2b00      	cmp	r3, #0
 801264e:	d004      	beq.n	801265a <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 8012650:	687b      	ldr	r3, [r7, #4]
 8012652:	685b      	ldr	r3, [r3, #4]
 8012654:	4618      	mov	r0, r3
 8012656:	f7fe fd79 	bl	801114c <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 801265a:	6879      	ldr	r1, [r7, #4]
 801265c:	2003      	movs	r0, #3
 801265e:	f7fd ff1f 	bl	80104a0 <memp_free>
  }
}
 8012662:	bf00      	nop
 8012664:	3708      	adds	r7, #8
 8012666:	46bd      	mov	sp, r7
 8012668:	bd80      	pop	{r7, pc}
	...

0801266c <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 801266c:	b580      	push	{r7, lr}
 801266e:	b084      	sub	sp, #16
 8012670:	af00      	add	r7, sp, #0
 8012672:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 8012674:	687b      	ldr	r3, [r7, #4]
 8012676:	2b00      	cmp	r3, #0
 8012678:	d106      	bne.n	8012688 <tcp_seg_copy+0x1c>
 801267a:	4b0f      	ldr	r3, [pc, #60]	; (80126b8 <tcp_seg_copy+0x4c>)
 801267c:	f240 6282 	movw	r2, #1666	; 0x682
 8012680:	490e      	ldr	r1, [pc, #56]	; (80126bc <tcp_seg_copy+0x50>)
 8012682:	480f      	ldr	r0, [pc, #60]	; (80126c0 <tcp_seg_copy+0x54>)
 8012684:	f007 fc38 	bl	8019ef8 <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 8012688:	2003      	movs	r0, #3
 801268a:	f7fd fe99 	bl	80103c0 <memp_malloc>
 801268e:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 8012690:	68fb      	ldr	r3, [r7, #12]
 8012692:	2b00      	cmp	r3, #0
 8012694:	d101      	bne.n	801269a <tcp_seg_copy+0x2e>
    return NULL;
 8012696:	2300      	movs	r3, #0
 8012698:	e00a      	b.n	80126b0 <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 801269a:	2210      	movs	r2, #16
 801269c:	6879      	ldr	r1, [r7, #4]
 801269e:	68f8      	ldr	r0, [r7, #12]
 80126a0:	f007 fdf9 	bl	801a296 <memcpy>
  pbuf_ref(cseg->p);
 80126a4:	68fb      	ldr	r3, [r7, #12]
 80126a6:	685b      	ldr	r3, [r3, #4]
 80126a8:	4618      	mov	r0, r3
 80126aa:	f7fe fdef 	bl	801128c <pbuf_ref>
  return cseg;
 80126ae:	68fb      	ldr	r3, [r7, #12]
}
 80126b0:	4618      	mov	r0, r3
 80126b2:	3710      	adds	r7, #16
 80126b4:	46bd      	mov	sp, r7
 80126b6:	bd80      	pop	{r7, pc}
 80126b8:	0801d518 	.word	0x0801d518
 80126bc:	0801da6c 	.word	0x0801da6c
 80126c0:	0801d55c 	.word	0x0801d55c

080126c4 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 80126c4:	b580      	push	{r7, lr}
 80126c6:	b084      	sub	sp, #16
 80126c8:	af00      	add	r7, sp, #0
 80126ca:	60f8      	str	r0, [r7, #12]
 80126cc:	60b9      	str	r1, [r7, #8]
 80126ce:	607a      	str	r2, [r7, #4]
 80126d0:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 80126d2:	68bb      	ldr	r3, [r7, #8]
 80126d4:	2b00      	cmp	r3, #0
 80126d6:	d109      	bne.n	80126ec <tcp_recv_null+0x28>
 80126d8:	4b12      	ldr	r3, [pc, #72]	; (8012724 <tcp_recv_null+0x60>)
 80126da:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 80126de:	4912      	ldr	r1, [pc, #72]	; (8012728 <tcp_recv_null+0x64>)
 80126e0:	4812      	ldr	r0, [pc, #72]	; (801272c <tcp_recv_null+0x68>)
 80126e2:	f007 fc09 	bl	8019ef8 <iprintf>
 80126e6:	f06f 030f 	mvn.w	r3, #15
 80126ea:	e016      	b.n	801271a <tcp_recv_null+0x56>

  if (p != NULL) {
 80126ec:	687b      	ldr	r3, [r7, #4]
 80126ee:	2b00      	cmp	r3, #0
 80126f0:	d009      	beq.n	8012706 <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 80126f2:	687b      	ldr	r3, [r7, #4]
 80126f4:	891b      	ldrh	r3, [r3, #8]
 80126f6:	4619      	mov	r1, r3
 80126f8:	68b8      	ldr	r0, [r7, #8]
 80126fa:	f7ff fb15 	bl	8011d28 <tcp_recved>
    pbuf_free(p);
 80126fe:	6878      	ldr	r0, [r7, #4]
 8012700:	f7fe fd24 	bl	801114c <pbuf_free>
 8012704:	e008      	b.n	8012718 <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 8012706:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801270a:	2b00      	cmp	r3, #0
 801270c:	d104      	bne.n	8012718 <tcp_recv_null+0x54>
    return tcp_close(pcb);
 801270e:	68b8      	ldr	r0, [r7, #8]
 8012710:	f7ff f9ba 	bl	8011a88 <tcp_close>
 8012714:	4603      	mov	r3, r0
 8012716:	e000      	b.n	801271a <tcp_recv_null+0x56>
  }
  return ERR_OK;
 8012718:	2300      	movs	r3, #0
}
 801271a:	4618      	mov	r0, r3
 801271c:	3710      	adds	r7, #16
 801271e:	46bd      	mov	sp, r7
 8012720:	bd80      	pop	{r7, pc}
 8012722:	bf00      	nop
 8012724:	0801d518 	.word	0x0801d518
 8012728:	0801da88 	.word	0x0801da88
 801272c:	0801d55c 	.word	0x0801d55c

08012730 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 8012730:	b580      	push	{r7, lr}
 8012732:	b086      	sub	sp, #24
 8012734:	af00      	add	r7, sp, #0
 8012736:	4603      	mov	r3, r0
 8012738:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 801273a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801273e:	2b00      	cmp	r3, #0
 8012740:	db01      	blt.n	8012746 <tcp_kill_prio+0x16>
 8012742:	79fb      	ldrb	r3, [r7, #7]
 8012744:	e000      	b.n	8012748 <tcp_kill_prio+0x18>
 8012746:	237f      	movs	r3, #127	; 0x7f
 8012748:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 801274a:	7afb      	ldrb	r3, [r7, #11]
 801274c:	2b00      	cmp	r3, #0
 801274e:	d034      	beq.n	80127ba <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 8012750:	7afb      	ldrb	r3, [r7, #11]
 8012752:	3b01      	subs	r3, #1
 8012754:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 8012756:	2300      	movs	r3, #0
 8012758:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 801275a:	2300      	movs	r3, #0
 801275c:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 801275e:	4b19      	ldr	r3, [pc, #100]	; (80127c4 <tcp_kill_prio+0x94>)
 8012760:	681b      	ldr	r3, [r3, #0]
 8012762:	617b      	str	r3, [r7, #20]
 8012764:	e01f      	b.n	80127a6 <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 8012766:	697b      	ldr	r3, [r7, #20]
 8012768:	7d5b      	ldrb	r3, [r3, #21]
 801276a:	7afa      	ldrb	r2, [r7, #11]
 801276c:	429a      	cmp	r2, r3
 801276e:	d80c      	bhi.n	801278a <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8012770:	697b      	ldr	r3, [r7, #20]
 8012772:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 8012774:	7afa      	ldrb	r2, [r7, #11]
 8012776:	429a      	cmp	r2, r3
 8012778:	d112      	bne.n	80127a0 <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 801277a:	4b13      	ldr	r3, [pc, #76]	; (80127c8 <tcp_kill_prio+0x98>)
 801277c:	681a      	ldr	r2, [r3, #0]
 801277e:	697b      	ldr	r3, [r7, #20]
 8012780:	6a1b      	ldr	r3, [r3, #32]
 8012782:	1ad3      	subs	r3, r2, r3
 8012784:	68fa      	ldr	r2, [r7, #12]
 8012786:	429a      	cmp	r2, r3
 8012788:	d80a      	bhi.n	80127a0 <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 801278a:	4b0f      	ldr	r3, [pc, #60]	; (80127c8 <tcp_kill_prio+0x98>)
 801278c:	681a      	ldr	r2, [r3, #0]
 801278e:	697b      	ldr	r3, [r7, #20]
 8012790:	6a1b      	ldr	r3, [r3, #32]
 8012792:	1ad3      	subs	r3, r2, r3
 8012794:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 8012796:	697b      	ldr	r3, [r7, #20]
 8012798:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 801279a:	697b      	ldr	r3, [r7, #20]
 801279c:	7d5b      	ldrb	r3, [r3, #21]
 801279e:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80127a0:	697b      	ldr	r3, [r7, #20]
 80127a2:	68db      	ldr	r3, [r3, #12]
 80127a4:	617b      	str	r3, [r7, #20]
 80127a6:	697b      	ldr	r3, [r7, #20]
 80127a8:	2b00      	cmp	r3, #0
 80127aa:	d1dc      	bne.n	8012766 <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 80127ac:	693b      	ldr	r3, [r7, #16]
 80127ae:	2b00      	cmp	r3, #0
 80127b0:	d004      	beq.n	80127bc <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 80127b2:	6938      	ldr	r0, [r7, #16]
 80127b4:	f7ff fa52 	bl	8011c5c <tcp_abort>
 80127b8:	e000      	b.n	80127bc <tcp_kill_prio+0x8c>
    return;
 80127ba:	bf00      	nop
  }
}
 80127bc:	3718      	adds	r7, #24
 80127be:	46bd      	mov	sp, r7
 80127c0:	bd80      	pop	{r7, pc}
 80127c2:	bf00      	nop
 80127c4:	200070e0 	.word	0x200070e0
 80127c8:	200070d4 	.word	0x200070d4

080127cc <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 80127cc:	b580      	push	{r7, lr}
 80127ce:	b086      	sub	sp, #24
 80127d0:	af00      	add	r7, sp, #0
 80127d2:	4603      	mov	r3, r0
 80127d4:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 80127d6:	79fb      	ldrb	r3, [r7, #7]
 80127d8:	2b08      	cmp	r3, #8
 80127da:	d009      	beq.n	80127f0 <tcp_kill_state+0x24>
 80127dc:	79fb      	ldrb	r3, [r7, #7]
 80127de:	2b09      	cmp	r3, #9
 80127e0:	d006      	beq.n	80127f0 <tcp_kill_state+0x24>
 80127e2:	4b1a      	ldr	r3, [pc, #104]	; (801284c <tcp_kill_state+0x80>)
 80127e4:	f240 62dd 	movw	r2, #1757	; 0x6dd
 80127e8:	4919      	ldr	r1, [pc, #100]	; (8012850 <tcp_kill_state+0x84>)
 80127ea:	481a      	ldr	r0, [pc, #104]	; (8012854 <tcp_kill_state+0x88>)
 80127ec:	f007 fb84 	bl	8019ef8 <iprintf>

  inactivity = 0;
 80127f0:	2300      	movs	r3, #0
 80127f2:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 80127f4:	2300      	movs	r3, #0
 80127f6:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80127f8:	4b17      	ldr	r3, [pc, #92]	; (8012858 <tcp_kill_state+0x8c>)
 80127fa:	681b      	ldr	r3, [r3, #0]
 80127fc:	617b      	str	r3, [r7, #20]
 80127fe:	e017      	b.n	8012830 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 8012800:	697b      	ldr	r3, [r7, #20]
 8012802:	7d1b      	ldrb	r3, [r3, #20]
 8012804:	79fa      	ldrb	r2, [r7, #7]
 8012806:	429a      	cmp	r2, r3
 8012808:	d10f      	bne.n	801282a <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 801280a:	4b14      	ldr	r3, [pc, #80]	; (801285c <tcp_kill_state+0x90>)
 801280c:	681a      	ldr	r2, [r3, #0]
 801280e:	697b      	ldr	r3, [r7, #20]
 8012810:	6a1b      	ldr	r3, [r3, #32]
 8012812:	1ad3      	subs	r3, r2, r3
 8012814:	68fa      	ldr	r2, [r7, #12]
 8012816:	429a      	cmp	r2, r3
 8012818:	d807      	bhi.n	801282a <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 801281a:	4b10      	ldr	r3, [pc, #64]	; (801285c <tcp_kill_state+0x90>)
 801281c:	681a      	ldr	r2, [r3, #0]
 801281e:	697b      	ldr	r3, [r7, #20]
 8012820:	6a1b      	ldr	r3, [r3, #32]
 8012822:	1ad3      	subs	r3, r2, r3
 8012824:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 8012826:	697b      	ldr	r3, [r7, #20]
 8012828:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 801282a:	697b      	ldr	r3, [r7, #20]
 801282c:	68db      	ldr	r3, [r3, #12]
 801282e:	617b      	str	r3, [r7, #20]
 8012830:	697b      	ldr	r3, [r7, #20]
 8012832:	2b00      	cmp	r3, #0
 8012834:	d1e4      	bne.n	8012800 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 8012836:	693b      	ldr	r3, [r7, #16]
 8012838:	2b00      	cmp	r3, #0
 801283a:	d003      	beq.n	8012844 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 801283c:	2100      	movs	r1, #0
 801283e:	6938      	ldr	r0, [r7, #16]
 8012840:	f7ff f94e 	bl	8011ae0 <tcp_abandon>
  }
}
 8012844:	bf00      	nop
 8012846:	3718      	adds	r7, #24
 8012848:	46bd      	mov	sp, r7
 801284a:	bd80      	pop	{r7, pc}
 801284c:	0801d518 	.word	0x0801d518
 8012850:	0801daa4 	.word	0x0801daa4
 8012854:	0801d55c 	.word	0x0801d55c
 8012858:	200070e0 	.word	0x200070e0
 801285c:	200070d4 	.word	0x200070d4

08012860 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 8012860:	b580      	push	{r7, lr}
 8012862:	b084      	sub	sp, #16
 8012864:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 8012866:	2300      	movs	r3, #0
 8012868:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 801286a:	2300      	movs	r3, #0
 801286c:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 801286e:	4b12      	ldr	r3, [pc, #72]	; (80128b8 <tcp_kill_timewait+0x58>)
 8012870:	681b      	ldr	r3, [r3, #0]
 8012872:	60fb      	str	r3, [r7, #12]
 8012874:	e012      	b.n	801289c <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8012876:	4b11      	ldr	r3, [pc, #68]	; (80128bc <tcp_kill_timewait+0x5c>)
 8012878:	681a      	ldr	r2, [r3, #0]
 801287a:	68fb      	ldr	r3, [r7, #12]
 801287c:	6a1b      	ldr	r3, [r3, #32]
 801287e:	1ad3      	subs	r3, r2, r3
 8012880:	687a      	ldr	r2, [r7, #4]
 8012882:	429a      	cmp	r2, r3
 8012884:	d807      	bhi.n	8012896 <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 8012886:	4b0d      	ldr	r3, [pc, #52]	; (80128bc <tcp_kill_timewait+0x5c>)
 8012888:	681a      	ldr	r2, [r3, #0]
 801288a:	68fb      	ldr	r3, [r7, #12]
 801288c:	6a1b      	ldr	r3, [r3, #32]
 801288e:	1ad3      	subs	r3, r2, r3
 8012890:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 8012892:	68fb      	ldr	r3, [r7, #12]
 8012894:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8012896:	68fb      	ldr	r3, [r7, #12]
 8012898:	68db      	ldr	r3, [r3, #12]
 801289a:	60fb      	str	r3, [r7, #12]
 801289c:	68fb      	ldr	r3, [r7, #12]
 801289e:	2b00      	cmp	r3, #0
 80128a0:	d1e9      	bne.n	8012876 <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 80128a2:	68bb      	ldr	r3, [r7, #8]
 80128a4:	2b00      	cmp	r3, #0
 80128a6:	d002      	beq.n	80128ae <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 80128a8:	68b8      	ldr	r0, [r7, #8]
 80128aa:	f7ff f9d7 	bl	8011c5c <tcp_abort>
  }
}
 80128ae:	bf00      	nop
 80128b0:	3710      	adds	r7, #16
 80128b2:	46bd      	mov	sp, r7
 80128b4:	bd80      	pop	{r7, pc}
 80128b6:	bf00      	nop
 80128b8:	200070e4 	.word	0x200070e4
 80128bc:	200070d4 	.word	0x200070d4

080128c0 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 80128c0:	b580      	push	{r7, lr}
 80128c2:	b082      	sub	sp, #8
 80128c4:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 80128c6:	4b10      	ldr	r3, [pc, #64]	; (8012908 <tcp_handle_closepend+0x48>)
 80128c8:	681b      	ldr	r3, [r3, #0]
 80128ca:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 80128cc:	e014      	b.n	80128f8 <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 80128ce:	687b      	ldr	r3, [r7, #4]
 80128d0:	68db      	ldr	r3, [r3, #12]
 80128d2:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 80128d4:	687b      	ldr	r3, [r7, #4]
 80128d6:	8b5b      	ldrh	r3, [r3, #26]
 80128d8:	f003 0308 	and.w	r3, r3, #8
 80128dc:	2b00      	cmp	r3, #0
 80128de:	d009      	beq.n	80128f4 <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 80128e0:	687b      	ldr	r3, [r7, #4]
 80128e2:	8b5b      	ldrh	r3, [r3, #26]
 80128e4:	f023 0308 	bic.w	r3, r3, #8
 80128e8:	b29a      	uxth	r2, r3
 80128ea:	687b      	ldr	r3, [r7, #4]
 80128ec:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 80128ee:	6878      	ldr	r0, [r7, #4]
 80128f0:	f7ff f860 	bl	80119b4 <tcp_close_shutdown_fin>
    }
    pcb = next;
 80128f4:	683b      	ldr	r3, [r7, #0]
 80128f6:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 80128f8:	687b      	ldr	r3, [r7, #4]
 80128fa:	2b00      	cmp	r3, #0
 80128fc:	d1e7      	bne.n	80128ce <tcp_handle_closepend+0xe>
  }
}
 80128fe:	bf00      	nop
 8012900:	bf00      	nop
 8012902:	3708      	adds	r7, #8
 8012904:	46bd      	mov	sp, r7
 8012906:	bd80      	pop	{r7, pc}
 8012908:	200070e0 	.word	0x200070e0

0801290c <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 801290c:	b580      	push	{r7, lr}
 801290e:	b084      	sub	sp, #16
 8012910:	af00      	add	r7, sp, #0
 8012912:	4603      	mov	r3, r0
 8012914:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8012916:	2001      	movs	r0, #1
 8012918:	f7fd fd52 	bl	80103c0 <memp_malloc>
 801291c:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 801291e:	68fb      	ldr	r3, [r7, #12]
 8012920:	2b00      	cmp	r3, #0
 8012922:	d126      	bne.n	8012972 <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 8012924:	f7ff ffcc 	bl	80128c0 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 8012928:	f7ff ff9a 	bl	8012860 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 801292c:	2001      	movs	r0, #1
 801292e:	f7fd fd47 	bl	80103c0 <memp_malloc>
 8012932:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 8012934:	68fb      	ldr	r3, [r7, #12]
 8012936:	2b00      	cmp	r3, #0
 8012938:	d11b      	bne.n	8012972 <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 801293a:	2009      	movs	r0, #9
 801293c:	f7ff ff46 	bl	80127cc <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8012940:	2001      	movs	r0, #1
 8012942:	f7fd fd3d 	bl	80103c0 <memp_malloc>
 8012946:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 8012948:	68fb      	ldr	r3, [r7, #12]
 801294a:	2b00      	cmp	r3, #0
 801294c:	d111      	bne.n	8012972 <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 801294e:	2008      	movs	r0, #8
 8012950:	f7ff ff3c 	bl	80127cc <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8012954:	2001      	movs	r0, #1
 8012956:	f7fd fd33 	bl	80103c0 <memp_malloc>
 801295a:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 801295c:	68fb      	ldr	r3, [r7, #12]
 801295e:	2b00      	cmp	r3, #0
 8012960:	d107      	bne.n	8012972 <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 8012962:	79fb      	ldrb	r3, [r7, #7]
 8012964:	4618      	mov	r0, r3
 8012966:	f7ff fee3 	bl	8012730 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 801296a:	2001      	movs	r0, #1
 801296c:	f7fd fd28 	bl	80103c0 <memp_malloc>
 8012970:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 8012972:	68fb      	ldr	r3, [r7, #12]
 8012974:	2b00      	cmp	r3, #0
 8012976:	d03f      	beq.n	80129f8 <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 8012978:	229c      	movs	r2, #156	; 0x9c
 801297a:	2100      	movs	r1, #0
 801297c:	68f8      	ldr	r0, [r7, #12]
 801297e:	f007 fc11 	bl	801a1a4 <memset>
    pcb->prio = prio;
 8012982:	68fb      	ldr	r3, [r7, #12]
 8012984:	79fa      	ldrb	r2, [r7, #7]
 8012986:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 8012988:	68fb      	ldr	r3, [r7, #12]
 801298a:	f241 62d0 	movw	r2, #5840	; 0x16d0
 801298e:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 8012992:	68fb      	ldr	r3, [r7, #12]
 8012994:	f241 62d0 	movw	r2, #5840	; 0x16d0
 8012998:	855a      	strh	r2, [r3, #42]	; 0x2a
 801299a:	68fb      	ldr	r3, [r7, #12]
 801299c:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 801299e:	68fb      	ldr	r3, [r7, #12]
 80129a0:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 80129a2:	68fb      	ldr	r3, [r7, #12]
 80129a4:	22ff      	movs	r2, #255	; 0xff
 80129a6:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 80129a8:	68fb      	ldr	r3, [r7, #12]
 80129aa:	f44f 7206 	mov.w	r2, #536	; 0x218
 80129ae:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 80129b0:	68fb      	ldr	r3, [r7, #12]
 80129b2:	2206      	movs	r2, #6
 80129b4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 80129b8:	68fb      	ldr	r3, [r7, #12]
 80129ba:	2206      	movs	r2, #6
 80129bc:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 80129be:	68fb      	ldr	r3, [r7, #12]
 80129c0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80129c4:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 80129c6:	68fb      	ldr	r3, [r7, #12]
 80129c8:	2201      	movs	r2, #1
 80129ca:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 80129ce:	4b0d      	ldr	r3, [pc, #52]	; (8012a04 <tcp_alloc+0xf8>)
 80129d0:	681a      	ldr	r2, [r3, #0]
 80129d2:	68fb      	ldr	r3, [r7, #12]
 80129d4:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 80129d6:	4b0c      	ldr	r3, [pc, #48]	; (8012a08 <tcp_alloc+0xfc>)
 80129d8:	781a      	ldrb	r2, [r3, #0]
 80129da:	68fb      	ldr	r3, [r7, #12]
 80129dc:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 80129de:	68fb      	ldr	r3, [r7, #12]
 80129e0:	f241 62d0 	movw	r2, #5840	; 0x16d0
 80129e4:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 80129e8:	68fb      	ldr	r3, [r7, #12]
 80129ea:	4a08      	ldr	r2, [pc, #32]	; (8012a0c <tcp_alloc+0x100>)
 80129ec:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 80129f0:	68fb      	ldr	r3, [r7, #12]
 80129f2:	4a07      	ldr	r2, [pc, #28]	; (8012a10 <tcp_alloc+0x104>)
 80129f4:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 80129f8:	68fb      	ldr	r3, [r7, #12]
}
 80129fa:	4618      	mov	r0, r3
 80129fc:	3710      	adds	r7, #16
 80129fe:	46bd      	mov	sp, r7
 8012a00:	bd80      	pop	{r7, pc}
 8012a02:	bf00      	nop
 8012a04:	200070d4 	.word	0x200070d4
 8012a08:	200070ea 	.word	0x200070ea
 8012a0c:	080126c5 	.word	0x080126c5
 8012a10:	006ddd00 	.word	0x006ddd00

08012a14 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 8012a14:	b580      	push	{r7, lr}
 8012a16:	b082      	sub	sp, #8
 8012a18:	af00      	add	r7, sp, #0
 8012a1a:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 8012a1c:	687b      	ldr	r3, [r7, #4]
 8012a1e:	2b00      	cmp	r3, #0
 8012a20:	d107      	bne.n	8012a32 <tcp_pcb_purge+0x1e>
 8012a22:	4b21      	ldr	r3, [pc, #132]	; (8012aa8 <tcp_pcb_purge+0x94>)
 8012a24:	f640 0251 	movw	r2, #2129	; 0x851
 8012a28:	4920      	ldr	r1, [pc, #128]	; (8012aac <tcp_pcb_purge+0x98>)
 8012a2a:	4821      	ldr	r0, [pc, #132]	; (8012ab0 <tcp_pcb_purge+0x9c>)
 8012a2c:	f007 fa64 	bl	8019ef8 <iprintf>
 8012a30:	e037      	b.n	8012aa2 <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 8012a32:	687b      	ldr	r3, [r7, #4]
 8012a34:	7d1b      	ldrb	r3, [r3, #20]
 8012a36:	2b00      	cmp	r3, #0
 8012a38:	d033      	beq.n	8012aa2 <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 8012a3a:	687b      	ldr	r3, [r7, #4]
 8012a3c:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 8012a3e:	2b0a      	cmp	r3, #10
 8012a40:	d02f      	beq.n	8012aa2 <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 8012a42:	687b      	ldr	r3, [r7, #4]
 8012a44:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 8012a46:	2b01      	cmp	r3, #1
 8012a48:	d02b      	beq.n	8012aa2 <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 8012a4a:	687b      	ldr	r3, [r7, #4]
 8012a4c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8012a4e:	2b00      	cmp	r3, #0
 8012a50:	d007      	beq.n	8012a62 <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 8012a52:	687b      	ldr	r3, [r7, #4]
 8012a54:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8012a56:	4618      	mov	r0, r3
 8012a58:	f7fe fb78 	bl	801114c <pbuf_free>
      pcb->refused_data = NULL;
 8012a5c:	687b      	ldr	r3, [r7, #4]
 8012a5e:	2200      	movs	r2, #0
 8012a60:	679a      	str	r2, [r3, #120]	; 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 8012a62:	687b      	ldr	r3, [r7, #4]
 8012a64:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8012a66:	2b00      	cmp	r3, #0
 8012a68:	d002      	beq.n	8012a70 <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 8012a6a:	6878      	ldr	r0, [r7, #4]
 8012a6c:	f000 f986 	bl	8012d7c <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 8012a70:	687b      	ldr	r3, [r7, #4]
 8012a72:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8012a76:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 8012a78:	687b      	ldr	r3, [r7, #4]
 8012a7a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012a7c:	4618      	mov	r0, r3
 8012a7e:	f7ff fdc7 	bl	8012610 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 8012a82:	687b      	ldr	r3, [r7, #4]
 8012a84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012a86:	4618      	mov	r0, r3
 8012a88:	f7ff fdc2 	bl	8012610 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 8012a8c:	687b      	ldr	r3, [r7, #4]
 8012a8e:	2200      	movs	r2, #0
 8012a90:	66da      	str	r2, [r3, #108]	; 0x6c
 8012a92:	687b      	ldr	r3, [r7, #4]
 8012a94:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8012a96:	687b      	ldr	r3, [r7, #4]
 8012a98:	671a      	str	r2, [r3, #112]	; 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 8012a9a:	687b      	ldr	r3, [r7, #4]
 8012a9c:	2200      	movs	r2, #0
 8012a9e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */
  }
}
 8012aa2:	3708      	adds	r7, #8
 8012aa4:	46bd      	mov	sp, r7
 8012aa6:	bd80      	pop	{r7, pc}
 8012aa8:	0801d518 	.word	0x0801d518
 8012aac:	0801db64 	.word	0x0801db64
 8012ab0:	0801d55c 	.word	0x0801d55c

08012ab4 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 8012ab4:	b580      	push	{r7, lr}
 8012ab6:	b084      	sub	sp, #16
 8012ab8:	af00      	add	r7, sp, #0
 8012aba:	6078      	str	r0, [r7, #4]
 8012abc:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 8012abe:	683b      	ldr	r3, [r7, #0]
 8012ac0:	2b00      	cmp	r3, #0
 8012ac2:	d106      	bne.n	8012ad2 <tcp_pcb_remove+0x1e>
 8012ac4:	4b3e      	ldr	r3, [pc, #248]	; (8012bc0 <tcp_pcb_remove+0x10c>)
 8012ac6:	f640 0283 	movw	r2, #2179	; 0x883
 8012aca:	493e      	ldr	r1, [pc, #248]	; (8012bc4 <tcp_pcb_remove+0x110>)
 8012acc:	483e      	ldr	r0, [pc, #248]	; (8012bc8 <tcp_pcb_remove+0x114>)
 8012ace:	f007 fa13 	bl	8019ef8 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 8012ad2:	687b      	ldr	r3, [r7, #4]
 8012ad4:	2b00      	cmp	r3, #0
 8012ad6:	d106      	bne.n	8012ae6 <tcp_pcb_remove+0x32>
 8012ad8:	4b39      	ldr	r3, [pc, #228]	; (8012bc0 <tcp_pcb_remove+0x10c>)
 8012ada:	f640 0284 	movw	r2, #2180	; 0x884
 8012ade:	493b      	ldr	r1, [pc, #236]	; (8012bcc <tcp_pcb_remove+0x118>)
 8012ae0:	4839      	ldr	r0, [pc, #228]	; (8012bc8 <tcp_pcb_remove+0x114>)
 8012ae2:	f007 fa09 	bl	8019ef8 <iprintf>

  TCP_RMV(pcblist, pcb);
 8012ae6:	687b      	ldr	r3, [r7, #4]
 8012ae8:	681b      	ldr	r3, [r3, #0]
 8012aea:	683a      	ldr	r2, [r7, #0]
 8012aec:	429a      	cmp	r2, r3
 8012aee:	d105      	bne.n	8012afc <tcp_pcb_remove+0x48>
 8012af0:	687b      	ldr	r3, [r7, #4]
 8012af2:	681b      	ldr	r3, [r3, #0]
 8012af4:	68da      	ldr	r2, [r3, #12]
 8012af6:	687b      	ldr	r3, [r7, #4]
 8012af8:	601a      	str	r2, [r3, #0]
 8012afa:	e013      	b.n	8012b24 <tcp_pcb_remove+0x70>
 8012afc:	687b      	ldr	r3, [r7, #4]
 8012afe:	681b      	ldr	r3, [r3, #0]
 8012b00:	60fb      	str	r3, [r7, #12]
 8012b02:	e00c      	b.n	8012b1e <tcp_pcb_remove+0x6a>
 8012b04:	68fb      	ldr	r3, [r7, #12]
 8012b06:	68db      	ldr	r3, [r3, #12]
 8012b08:	683a      	ldr	r2, [r7, #0]
 8012b0a:	429a      	cmp	r2, r3
 8012b0c:	d104      	bne.n	8012b18 <tcp_pcb_remove+0x64>
 8012b0e:	683b      	ldr	r3, [r7, #0]
 8012b10:	68da      	ldr	r2, [r3, #12]
 8012b12:	68fb      	ldr	r3, [r7, #12]
 8012b14:	60da      	str	r2, [r3, #12]
 8012b16:	e005      	b.n	8012b24 <tcp_pcb_remove+0x70>
 8012b18:	68fb      	ldr	r3, [r7, #12]
 8012b1a:	68db      	ldr	r3, [r3, #12]
 8012b1c:	60fb      	str	r3, [r7, #12]
 8012b1e:	68fb      	ldr	r3, [r7, #12]
 8012b20:	2b00      	cmp	r3, #0
 8012b22:	d1ef      	bne.n	8012b04 <tcp_pcb_remove+0x50>
 8012b24:	683b      	ldr	r3, [r7, #0]
 8012b26:	2200      	movs	r2, #0
 8012b28:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 8012b2a:	6838      	ldr	r0, [r7, #0]
 8012b2c:	f7ff ff72 	bl	8012a14 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 8012b30:	683b      	ldr	r3, [r7, #0]
 8012b32:	7d1b      	ldrb	r3, [r3, #20]
 8012b34:	2b0a      	cmp	r3, #10
 8012b36:	d013      	beq.n	8012b60 <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 8012b38:	683b      	ldr	r3, [r7, #0]
 8012b3a:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 8012b3c:	2b01      	cmp	r3, #1
 8012b3e:	d00f      	beq.n	8012b60 <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 8012b40:	683b      	ldr	r3, [r7, #0]
 8012b42:	8b5b      	ldrh	r3, [r3, #26]
 8012b44:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 8012b48:	2b00      	cmp	r3, #0
 8012b4a:	d009      	beq.n	8012b60 <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 8012b4c:	683b      	ldr	r3, [r7, #0]
 8012b4e:	8b5b      	ldrh	r3, [r3, #26]
 8012b50:	f043 0302 	orr.w	r3, r3, #2
 8012b54:	b29a      	uxth	r2, r3
 8012b56:	683b      	ldr	r3, [r7, #0]
 8012b58:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8012b5a:	6838      	ldr	r0, [r7, #0]
 8012b5c:	f002 ff6e 	bl	8015a3c <tcp_output>
  }

  if (pcb->state != LISTEN) {
 8012b60:	683b      	ldr	r3, [r7, #0]
 8012b62:	7d1b      	ldrb	r3, [r3, #20]
 8012b64:	2b01      	cmp	r3, #1
 8012b66:	d020      	beq.n	8012baa <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 8012b68:	683b      	ldr	r3, [r7, #0]
 8012b6a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012b6c:	2b00      	cmp	r3, #0
 8012b6e:	d006      	beq.n	8012b7e <tcp_pcb_remove+0xca>
 8012b70:	4b13      	ldr	r3, [pc, #76]	; (8012bc0 <tcp_pcb_remove+0x10c>)
 8012b72:	f640 0293 	movw	r2, #2195	; 0x893
 8012b76:	4916      	ldr	r1, [pc, #88]	; (8012bd0 <tcp_pcb_remove+0x11c>)
 8012b78:	4813      	ldr	r0, [pc, #76]	; (8012bc8 <tcp_pcb_remove+0x114>)
 8012b7a:	f007 f9bd 	bl	8019ef8 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 8012b7e:	683b      	ldr	r3, [r7, #0]
 8012b80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012b82:	2b00      	cmp	r3, #0
 8012b84:	d006      	beq.n	8012b94 <tcp_pcb_remove+0xe0>
 8012b86:	4b0e      	ldr	r3, [pc, #56]	; (8012bc0 <tcp_pcb_remove+0x10c>)
 8012b88:	f640 0294 	movw	r2, #2196	; 0x894
 8012b8c:	4911      	ldr	r1, [pc, #68]	; (8012bd4 <tcp_pcb_remove+0x120>)
 8012b8e:	480e      	ldr	r0, [pc, #56]	; (8012bc8 <tcp_pcb_remove+0x114>)
 8012b90:	f007 f9b2 	bl	8019ef8 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 8012b94:	683b      	ldr	r3, [r7, #0]
 8012b96:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8012b98:	2b00      	cmp	r3, #0
 8012b9a:	d006      	beq.n	8012baa <tcp_pcb_remove+0xf6>
 8012b9c:	4b08      	ldr	r3, [pc, #32]	; (8012bc0 <tcp_pcb_remove+0x10c>)
 8012b9e:	f640 0296 	movw	r2, #2198	; 0x896
 8012ba2:	490d      	ldr	r1, [pc, #52]	; (8012bd8 <tcp_pcb_remove+0x124>)
 8012ba4:	4808      	ldr	r0, [pc, #32]	; (8012bc8 <tcp_pcb_remove+0x114>)
 8012ba6:	f007 f9a7 	bl	8019ef8 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 8012baa:	683b      	ldr	r3, [r7, #0]
 8012bac:	2200      	movs	r2, #0
 8012bae:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 8012bb0:	683b      	ldr	r3, [r7, #0]
 8012bb2:	2200      	movs	r2, #0
 8012bb4:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 8012bb6:	bf00      	nop
 8012bb8:	3710      	adds	r7, #16
 8012bba:	46bd      	mov	sp, r7
 8012bbc:	bd80      	pop	{r7, pc}
 8012bbe:	bf00      	nop
 8012bc0:	0801d518 	.word	0x0801d518
 8012bc4:	0801db80 	.word	0x0801db80
 8012bc8:	0801d55c 	.word	0x0801d55c
 8012bcc:	0801db9c 	.word	0x0801db9c
 8012bd0:	0801dbbc 	.word	0x0801dbbc
 8012bd4:	0801dbd4 	.word	0x0801dbd4
 8012bd8:	0801dbf0 	.word	0x0801dbf0

08012bdc <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 8012bdc:	b580      	push	{r7, lr}
 8012bde:	b082      	sub	sp, #8
 8012be0:	af00      	add	r7, sp, #0
 8012be2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 8012be4:	687b      	ldr	r3, [r7, #4]
 8012be6:	2b00      	cmp	r3, #0
 8012be8:	d106      	bne.n	8012bf8 <tcp_next_iss+0x1c>
 8012bea:	4b0a      	ldr	r3, [pc, #40]	; (8012c14 <tcp_next_iss+0x38>)
 8012bec:	f640 02af 	movw	r2, #2223	; 0x8af
 8012bf0:	4909      	ldr	r1, [pc, #36]	; (8012c18 <tcp_next_iss+0x3c>)
 8012bf2:	480a      	ldr	r0, [pc, #40]	; (8012c1c <tcp_next_iss+0x40>)
 8012bf4:	f007 f980 	bl	8019ef8 <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 8012bf8:	4b09      	ldr	r3, [pc, #36]	; (8012c20 <tcp_next_iss+0x44>)
 8012bfa:	681a      	ldr	r2, [r3, #0]
 8012bfc:	4b09      	ldr	r3, [pc, #36]	; (8012c24 <tcp_next_iss+0x48>)
 8012bfe:	681b      	ldr	r3, [r3, #0]
 8012c00:	4413      	add	r3, r2
 8012c02:	4a07      	ldr	r2, [pc, #28]	; (8012c20 <tcp_next_iss+0x44>)
 8012c04:	6013      	str	r3, [r2, #0]
  return iss;
 8012c06:	4b06      	ldr	r3, [pc, #24]	; (8012c20 <tcp_next_iss+0x44>)
 8012c08:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 8012c0a:	4618      	mov	r0, r3
 8012c0c:	3708      	adds	r7, #8
 8012c0e:	46bd      	mov	sp, r7
 8012c10:	bd80      	pop	{r7, pc}
 8012c12:	bf00      	nop
 8012c14:	0801d518 	.word	0x0801d518
 8012c18:	0801dc08 	.word	0x0801dc08
 8012c1c:	0801d55c 	.word	0x0801d55c
 8012c20:	2000005c 	.word	0x2000005c
 8012c24:	200070d4 	.word	0x200070d4

08012c28 <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 8012c28:	b580      	push	{r7, lr}
 8012c2a:	b086      	sub	sp, #24
 8012c2c:	af00      	add	r7, sp, #0
 8012c2e:	4603      	mov	r3, r0
 8012c30:	60b9      	str	r1, [r7, #8]
 8012c32:	607a      	str	r2, [r7, #4]
 8012c34:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 8012c36:	687b      	ldr	r3, [r7, #4]
 8012c38:	2b00      	cmp	r3, #0
 8012c3a:	d106      	bne.n	8012c4a <tcp_eff_send_mss_netif+0x22>
 8012c3c:	4b14      	ldr	r3, [pc, #80]	; (8012c90 <tcp_eff_send_mss_netif+0x68>)
 8012c3e:	f640 02c5 	movw	r2, #2245	; 0x8c5
 8012c42:	4914      	ldr	r1, [pc, #80]	; (8012c94 <tcp_eff_send_mss_netif+0x6c>)
 8012c44:	4814      	ldr	r0, [pc, #80]	; (8012c98 <tcp_eff_send_mss_netif+0x70>)
 8012c46:	f007 f957 	bl	8019ef8 <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 8012c4a:	68bb      	ldr	r3, [r7, #8]
 8012c4c:	2b00      	cmp	r3, #0
 8012c4e:	d101      	bne.n	8012c54 <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 8012c50:	89fb      	ldrh	r3, [r7, #14]
 8012c52:	e019      	b.n	8012c88 <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 8012c54:	68bb      	ldr	r3, [r7, #8]
 8012c56:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8012c58:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 8012c5a:	8afb      	ldrh	r3, [r7, #22]
 8012c5c:	2b00      	cmp	r3, #0
 8012c5e:	d012      	beq.n	8012c86 <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 8012c60:	2328      	movs	r3, #40	; 0x28
 8012c62:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 8012c64:	8afa      	ldrh	r2, [r7, #22]
 8012c66:	8abb      	ldrh	r3, [r7, #20]
 8012c68:	429a      	cmp	r2, r3
 8012c6a:	d904      	bls.n	8012c76 <tcp_eff_send_mss_netif+0x4e>
 8012c6c:	8afa      	ldrh	r2, [r7, #22]
 8012c6e:	8abb      	ldrh	r3, [r7, #20]
 8012c70:	1ad3      	subs	r3, r2, r3
 8012c72:	b29b      	uxth	r3, r3
 8012c74:	e000      	b.n	8012c78 <tcp_eff_send_mss_netif+0x50>
 8012c76:	2300      	movs	r3, #0
 8012c78:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 8012c7a:	8a7a      	ldrh	r2, [r7, #18]
 8012c7c:	89fb      	ldrh	r3, [r7, #14]
 8012c7e:	4293      	cmp	r3, r2
 8012c80:	bf28      	it	cs
 8012c82:	4613      	movcs	r3, r2
 8012c84:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 8012c86:	89fb      	ldrh	r3, [r7, #14]
}
 8012c88:	4618      	mov	r0, r3
 8012c8a:	3718      	adds	r7, #24
 8012c8c:	46bd      	mov	sp, r7
 8012c8e:	bd80      	pop	{r7, pc}
 8012c90:	0801d518 	.word	0x0801d518
 8012c94:	0801dc24 	.word	0x0801dc24
 8012c98:	0801d55c 	.word	0x0801d55c

08012c9c <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 8012c9c:	b580      	push	{r7, lr}
 8012c9e:	b084      	sub	sp, #16
 8012ca0:	af00      	add	r7, sp, #0
 8012ca2:	6078      	str	r0, [r7, #4]
 8012ca4:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 8012ca6:	683b      	ldr	r3, [r7, #0]
 8012ca8:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 8012caa:	687b      	ldr	r3, [r7, #4]
 8012cac:	2b00      	cmp	r3, #0
 8012cae:	d119      	bne.n	8012ce4 <tcp_netif_ip_addr_changed_pcblist+0x48>
 8012cb0:	4b10      	ldr	r3, [pc, #64]	; (8012cf4 <tcp_netif_ip_addr_changed_pcblist+0x58>)
 8012cb2:	f44f 6210 	mov.w	r2, #2304	; 0x900
 8012cb6:	4910      	ldr	r1, [pc, #64]	; (8012cf8 <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 8012cb8:	4810      	ldr	r0, [pc, #64]	; (8012cfc <tcp_netif_ip_addr_changed_pcblist+0x60>)
 8012cba:	f007 f91d 	bl	8019ef8 <iprintf>

  while (pcb != NULL) {
 8012cbe:	e011      	b.n	8012ce4 <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 8012cc0:	68fb      	ldr	r3, [r7, #12]
 8012cc2:	681a      	ldr	r2, [r3, #0]
 8012cc4:	687b      	ldr	r3, [r7, #4]
 8012cc6:	681b      	ldr	r3, [r3, #0]
 8012cc8:	429a      	cmp	r2, r3
 8012cca:	d108      	bne.n	8012cde <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 8012ccc:	68fb      	ldr	r3, [r7, #12]
 8012cce:	68db      	ldr	r3, [r3, #12]
 8012cd0:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 8012cd2:	68f8      	ldr	r0, [r7, #12]
 8012cd4:	f7fe ffc2 	bl	8011c5c <tcp_abort>
      pcb = next;
 8012cd8:	68bb      	ldr	r3, [r7, #8]
 8012cda:	60fb      	str	r3, [r7, #12]
 8012cdc:	e002      	b.n	8012ce4 <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 8012cde:	68fb      	ldr	r3, [r7, #12]
 8012ce0:	68db      	ldr	r3, [r3, #12]
 8012ce2:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 8012ce4:	68fb      	ldr	r3, [r7, #12]
 8012ce6:	2b00      	cmp	r3, #0
 8012ce8:	d1ea      	bne.n	8012cc0 <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 8012cea:	bf00      	nop
 8012cec:	bf00      	nop
 8012cee:	3710      	adds	r7, #16
 8012cf0:	46bd      	mov	sp, r7
 8012cf2:	bd80      	pop	{r7, pc}
 8012cf4:	0801d518 	.word	0x0801d518
 8012cf8:	0801dc4c 	.word	0x0801dc4c
 8012cfc:	0801d55c 	.word	0x0801d55c

08012d00 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8012d00:	b580      	push	{r7, lr}
 8012d02:	b084      	sub	sp, #16
 8012d04:	af00      	add	r7, sp, #0
 8012d06:	6078      	str	r0, [r7, #4]
 8012d08:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 8012d0a:	687b      	ldr	r3, [r7, #4]
 8012d0c:	2b00      	cmp	r3, #0
 8012d0e:	d02a      	beq.n	8012d66 <tcp_netif_ip_addr_changed+0x66>
 8012d10:	687b      	ldr	r3, [r7, #4]
 8012d12:	681b      	ldr	r3, [r3, #0]
 8012d14:	2b00      	cmp	r3, #0
 8012d16:	d026      	beq.n	8012d66 <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 8012d18:	4b15      	ldr	r3, [pc, #84]	; (8012d70 <tcp_netif_ip_addr_changed+0x70>)
 8012d1a:	681b      	ldr	r3, [r3, #0]
 8012d1c:	4619      	mov	r1, r3
 8012d1e:	6878      	ldr	r0, [r7, #4]
 8012d20:	f7ff ffbc 	bl	8012c9c <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 8012d24:	4b13      	ldr	r3, [pc, #76]	; (8012d74 <tcp_netif_ip_addr_changed+0x74>)
 8012d26:	681b      	ldr	r3, [r3, #0]
 8012d28:	4619      	mov	r1, r3
 8012d2a:	6878      	ldr	r0, [r7, #4]
 8012d2c:	f7ff ffb6 	bl	8012c9c <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 8012d30:	683b      	ldr	r3, [r7, #0]
 8012d32:	2b00      	cmp	r3, #0
 8012d34:	d017      	beq.n	8012d66 <tcp_netif_ip_addr_changed+0x66>
 8012d36:	683b      	ldr	r3, [r7, #0]
 8012d38:	681b      	ldr	r3, [r3, #0]
 8012d3a:	2b00      	cmp	r3, #0
 8012d3c:	d013      	beq.n	8012d66 <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8012d3e:	4b0e      	ldr	r3, [pc, #56]	; (8012d78 <tcp_netif_ip_addr_changed+0x78>)
 8012d40:	681b      	ldr	r3, [r3, #0]
 8012d42:	60fb      	str	r3, [r7, #12]
 8012d44:	e00c      	b.n	8012d60 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 8012d46:	68fb      	ldr	r3, [r7, #12]
 8012d48:	681a      	ldr	r2, [r3, #0]
 8012d4a:	687b      	ldr	r3, [r7, #4]
 8012d4c:	681b      	ldr	r3, [r3, #0]
 8012d4e:	429a      	cmp	r2, r3
 8012d50:	d103      	bne.n	8012d5a <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 8012d52:	683b      	ldr	r3, [r7, #0]
 8012d54:	681a      	ldr	r2, [r3, #0]
 8012d56:	68fb      	ldr	r3, [r7, #12]
 8012d58:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8012d5a:	68fb      	ldr	r3, [r7, #12]
 8012d5c:	68db      	ldr	r3, [r3, #12]
 8012d5e:	60fb      	str	r3, [r7, #12]
 8012d60:	68fb      	ldr	r3, [r7, #12]
 8012d62:	2b00      	cmp	r3, #0
 8012d64:	d1ef      	bne.n	8012d46 <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 8012d66:	bf00      	nop
 8012d68:	3710      	adds	r7, #16
 8012d6a:	46bd      	mov	sp, r7
 8012d6c:	bd80      	pop	{r7, pc}
 8012d6e:	bf00      	nop
 8012d70:	200070e0 	.word	0x200070e0
 8012d74:	200070d8 	.word	0x200070d8
 8012d78:	200070dc 	.word	0x200070dc

08012d7c <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 8012d7c:	b580      	push	{r7, lr}
 8012d7e:	b082      	sub	sp, #8
 8012d80:	af00      	add	r7, sp, #0
 8012d82:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 8012d84:	687b      	ldr	r3, [r7, #4]
 8012d86:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8012d88:	2b00      	cmp	r3, #0
 8012d8a:	d007      	beq.n	8012d9c <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 8012d8c:	687b      	ldr	r3, [r7, #4]
 8012d8e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8012d90:	4618      	mov	r0, r3
 8012d92:	f7ff fc3d 	bl	8012610 <tcp_segs_free>
    pcb->ooseq = NULL;
 8012d96:	687b      	ldr	r3, [r7, #4]
 8012d98:	2200      	movs	r2, #0
 8012d9a:	675a      	str	r2, [r3, #116]	; 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 8012d9c:	bf00      	nop
 8012d9e:	3708      	adds	r7, #8
 8012da0:	46bd      	mov	sp, r7
 8012da2:	bd80      	pop	{r7, pc}

08012da4 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 8012da4:	b590      	push	{r4, r7, lr}
 8012da6:	b08d      	sub	sp, #52	; 0x34
 8012da8:	af04      	add	r7, sp, #16
 8012daa:	6078      	str	r0, [r7, #4]
 8012dac:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 8012dae:	687b      	ldr	r3, [r7, #4]
 8012db0:	2b00      	cmp	r3, #0
 8012db2:	d105      	bne.n	8012dc0 <tcp_input+0x1c>
 8012db4:	4b9b      	ldr	r3, [pc, #620]	; (8013024 <tcp_input+0x280>)
 8012db6:	2283      	movs	r2, #131	; 0x83
 8012db8:	499b      	ldr	r1, [pc, #620]	; (8013028 <tcp_input+0x284>)
 8012dba:	489c      	ldr	r0, [pc, #624]	; (801302c <tcp_input+0x288>)
 8012dbc:	f007 f89c 	bl	8019ef8 <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 8012dc0:	687b      	ldr	r3, [r7, #4]
 8012dc2:	685b      	ldr	r3, [r3, #4]
 8012dc4:	4a9a      	ldr	r2, [pc, #616]	; (8013030 <tcp_input+0x28c>)
 8012dc6:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 8012dc8:	687b      	ldr	r3, [r7, #4]
 8012dca:	895b      	ldrh	r3, [r3, #10]
 8012dcc:	2b13      	cmp	r3, #19
 8012dce:	f240 83d1 	bls.w	8013574 <tcp_input+0x7d0>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8012dd2:	4b98      	ldr	r3, [pc, #608]	; (8013034 <tcp_input+0x290>)
 8012dd4:	695b      	ldr	r3, [r3, #20]
 8012dd6:	4a97      	ldr	r2, [pc, #604]	; (8013034 <tcp_input+0x290>)
 8012dd8:	6812      	ldr	r2, [r2, #0]
 8012dda:	4611      	mov	r1, r2
 8012ddc:	4618      	mov	r0, r3
 8012dde:	f005 fbfb 	bl	80185d8 <ip4_addr_isbroadcast_u32>
 8012de2:	4603      	mov	r3, r0
 8012de4:	2b00      	cmp	r3, #0
 8012de6:	f040 83c7 	bne.w	8013578 <tcp_input+0x7d4>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 8012dea:	4b92      	ldr	r3, [pc, #584]	; (8013034 <tcp_input+0x290>)
 8012dec:	695b      	ldr	r3, [r3, #20]
 8012dee:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8012df2:	2be0      	cmp	r3, #224	; 0xe0
 8012df4:	f000 83c0 	beq.w	8013578 <tcp_input+0x7d4>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 8012df8:	4b8d      	ldr	r3, [pc, #564]	; (8013030 <tcp_input+0x28c>)
 8012dfa:	681b      	ldr	r3, [r3, #0]
 8012dfc:	899b      	ldrh	r3, [r3, #12]
 8012dfe:	b29b      	uxth	r3, r3
 8012e00:	4618      	mov	r0, r3
 8012e02:	f7fc fdbf 	bl	800f984 <lwip_htons>
 8012e06:	4603      	mov	r3, r0
 8012e08:	0b1b      	lsrs	r3, r3, #12
 8012e0a:	b29b      	uxth	r3, r3
 8012e0c:	b2db      	uxtb	r3, r3
 8012e0e:	009b      	lsls	r3, r3, #2
 8012e10:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 8012e12:	7cbb      	ldrb	r3, [r7, #18]
 8012e14:	2b13      	cmp	r3, #19
 8012e16:	f240 83b1 	bls.w	801357c <tcp_input+0x7d8>
 8012e1a:	7cbb      	ldrb	r3, [r7, #18]
 8012e1c:	b29a      	uxth	r2, r3
 8012e1e:	687b      	ldr	r3, [r7, #4]
 8012e20:	891b      	ldrh	r3, [r3, #8]
 8012e22:	429a      	cmp	r2, r3
 8012e24:	f200 83aa 	bhi.w	801357c <tcp_input+0x7d8>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 8012e28:	7cbb      	ldrb	r3, [r7, #18]
 8012e2a:	b29b      	uxth	r3, r3
 8012e2c:	3b14      	subs	r3, #20
 8012e2e:	b29a      	uxth	r2, r3
 8012e30:	4b81      	ldr	r3, [pc, #516]	; (8013038 <tcp_input+0x294>)
 8012e32:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 8012e34:	4b81      	ldr	r3, [pc, #516]	; (801303c <tcp_input+0x298>)
 8012e36:	2200      	movs	r2, #0
 8012e38:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 8012e3a:	687b      	ldr	r3, [r7, #4]
 8012e3c:	895a      	ldrh	r2, [r3, #10]
 8012e3e:	7cbb      	ldrb	r3, [r7, #18]
 8012e40:	b29b      	uxth	r3, r3
 8012e42:	429a      	cmp	r2, r3
 8012e44:	d309      	bcc.n	8012e5a <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 8012e46:	4b7c      	ldr	r3, [pc, #496]	; (8013038 <tcp_input+0x294>)
 8012e48:	881a      	ldrh	r2, [r3, #0]
 8012e4a:	4b7d      	ldr	r3, [pc, #500]	; (8013040 <tcp_input+0x29c>)
 8012e4c:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 8012e4e:	7cbb      	ldrb	r3, [r7, #18]
 8012e50:	4619      	mov	r1, r3
 8012e52:	6878      	ldr	r0, [r7, #4]
 8012e54:	f7fe f8f4 	bl	8011040 <pbuf_remove_header>
 8012e58:	e04e      	b.n	8012ef8 <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 8012e5a:	687b      	ldr	r3, [r7, #4]
 8012e5c:	681b      	ldr	r3, [r3, #0]
 8012e5e:	2b00      	cmp	r3, #0
 8012e60:	d105      	bne.n	8012e6e <tcp_input+0xca>
 8012e62:	4b70      	ldr	r3, [pc, #448]	; (8013024 <tcp_input+0x280>)
 8012e64:	22c2      	movs	r2, #194	; 0xc2
 8012e66:	4977      	ldr	r1, [pc, #476]	; (8013044 <tcp_input+0x2a0>)
 8012e68:	4870      	ldr	r0, [pc, #448]	; (801302c <tcp_input+0x288>)
 8012e6a:	f007 f845 	bl	8019ef8 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 8012e6e:	2114      	movs	r1, #20
 8012e70:	6878      	ldr	r0, [r7, #4]
 8012e72:	f7fe f8e5 	bl	8011040 <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 8012e76:	687b      	ldr	r3, [r7, #4]
 8012e78:	895a      	ldrh	r2, [r3, #10]
 8012e7a:	4b71      	ldr	r3, [pc, #452]	; (8013040 <tcp_input+0x29c>)
 8012e7c:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 8012e7e:	4b6e      	ldr	r3, [pc, #440]	; (8013038 <tcp_input+0x294>)
 8012e80:	881a      	ldrh	r2, [r3, #0]
 8012e82:	4b6f      	ldr	r3, [pc, #444]	; (8013040 <tcp_input+0x29c>)
 8012e84:	881b      	ldrh	r3, [r3, #0]
 8012e86:	1ad3      	subs	r3, r2, r3
 8012e88:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 8012e8a:	4b6d      	ldr	r3, [pc, #436]	; (8013040 <tcp_input+0x29c>)
 8012e8c:	881b      	ldrh	r3, [r3, #0]
 8012e8e:	4619      	mov	r1, r3
 8012e90:	6878      	ldr	r0, [r7, #4]
 8012e92:	f7fe f8d5 	bl	8011040 <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 8012e96:	687b      	ldr	r3, [r7, #4]
 8012e98:	681b      	ldr	r3, [r3, #0]
 8012e9a:	895b      	ldrh	r3, [r3, #10]
 8012e9c:	8a3a      	ldrh	r2, [r7, #16]
 8012e9e:	429a      	cmp	r2, r3
 8012ea0:	f200 836e 	bhi.w	8013580 <tcp_input+0x7dc>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 8012ea4:	687b      	ldr	r3, [r7, #4]
 8012ea6:	681b      	ldr	r3, [r3, #0]
 8012ea8:	685b      	ldr	r3, [r3, #4]
 8012eaa:	4a64      	ldr	r2, [pc, #400]	; (801303c <tcp_input+0x298>)
 8012eac:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 8012eae:	687b      	ldr	r3, [r7, #4]
 8012eb0:	681b      	ldr	r3, [r3, #0]
 8012eb2:	8a3a      	ldrh	r2, [r7, #16]
 8012eb4:	4611      	mov	r1, r2
 8012eb6:	4618      	mov	r0, r3
 8012eb8:	f7fe f8c2 	bl	8011040 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 8012ebc:	687b      	ldr	r3, [r7, #4]
 8012ebe:	891a      	ldrh	r2, [r3, #8]
 8012ec0:	8a3b      	ldrh	r3, [r7, #16]
 8012ec2:	1ad3      	subs	r3, r2, r3
 8012ec4:	b29a      	uxth	r2, r3
 8012ec6:	687b      	ldr	r3, [r7, #4]
 8012ec8:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 8012eca:	687b      	ldr	r3, [r7, #4]
 8012ecc:	895b      	ldrh	r3, [r3, #10]
 8012ece:	2b00      	cmp	r3, #0
 8012ed0:	d005      	beq.n	8012ede <tcp_input+0x13a>
 8012ed2:	4b54      	ldr	r3, [pc, #336]	; (8013024 <tcp_input+0x280>)
 8012ed4:	22df      	movs	r2, #223	; 0xdf
 8012ed6:	495c      	ldr	r1, [pc, #368]	; (8013048 <tcp_input+0x2a4>)
 8012ed8:	4854      	ldr	r0, [pc, #336]	; (801302c <tcp_input+0x288>)
 8012eda:	f007 f80d 	bl	8019ef8 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 8012ede:	687b      	ldr	r3, [r7, #4]
 8012ee0:	891a      	ldrh	r2, [r3, #8]
 8012ee2:	687b      	ldr	r3, [r7, #4]
 8012ee4:	681b      	ldr	r3, [r3, #0]
 8012ee6:	891b      	ldrh	r3, [r3, #8]
 8012ee8:	429a      	cmp	r2, r3
 8012eea:	d005      	beq.n	8012ef8 <tcp_input+0x154>
 8012eec:	4b4d      	ldr	r3, [pc, #308]	; (8013024 <tcp_input+0x280>)
 8012eee:	22e0      	movs	r2, #224	; 0xe0
 8012ef0:	4956      	ldr	r1, [pc, #344]	; (801304c <tcp_input+0x2a8>)
 8012ef2:	484e      	ldr	r0, [pc, #312]	; (801302c <tcp_input+0x288>)
 8012ef4:	f007 f800 	bl	8019ef8 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 8012ef8:	4b4d      	ldr	r3, [pc, #308]	; (8013030 <tcp_input+0x28c>)
 8012efa:	681b      	ldr	r3, [r3, #0]
 8012efc:	881b      	ldrh	r3, [r3, #0]
 8012efe:	b29b      	uxth	r3, r3
 8012f00:	4a4b      	ldr	r2, [pc, #300]	; (8013030 <tcp_input+0x28c>)
 8012f02:	6814      	ldr	r4, [r2, #0]
 8012f04:	4618      	mov	r0, r3
 8012f06:	f7fc fd3d 	bl	800f984 <lwip_htons>
 8012f0a:	4603      	mov	r3, r0
 8012f0c:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 8012f0e:	4b48      	ldr	r3, [pc, #288]	; (8013030 <tcp_input+0x28c>)
 8012f10:	681b      	ldr	r3, [r3, #0]
 8012f12:	885b      	ldrh	r3, [r3, #2]
 8012f14:	b29b      	uxth	r3, r3
 8012f16:	4a46      	ldr	r2, [pc, #280]	; (8013030 <tcp_input+0x28c>)
 8012f18:	6814      	ldr	r4, [r2, #0]
 8012f1a:	4618      	mov	r0, r3
 8012f1c:	f7fc fd32 	bl	800f984 <lwip_htons>
 8012f20:	4603      	mov	r3, r0
 8012f22:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 8012f24:	4b42      	ldr	r3, [pc, #264]	; (8013030 <tcp_input+0x28c>)
 8012f26:	681b      	ldr	r3, [r3, #0]
 8012f28:	685b      	ldr	r3, [r3, #4]
 8012f2a:	4a41      	ldr	r2, [pc, #260]	; (8013030 <tcp_input+0x28c>)
 8012f2c:	6814      	ldr	r4, [r2, #0]
 8012f2e:	4618      	mov	r0, r3
 8012f30:	f7fc fd3d 	bl	800f9ae <lwip_htonl>
 8012f34:	4603      	mov	r3, r0
 8012f36:	6063      	str	r3, [r4, #4]
 8012f38:	6863      	ldr	r3, [r4, #4]
 8012f3a:	4a45      	ldr	r2, [pc, #276]	; (8013050 <tcp_input+0x2ac>)
 8012f3c:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 8012f3e:	4b3c      	ldr	r3, [pc, #240]	; (8013030 <tcp_input+0x28c>)
 8012f40:	681b      	ldr	r3, [r3, #0]
 8012f42:	689b      	ldr	r3, [r3, #8]
 8012f44:	4a3a      	ldr	r2, [pc, #232]	; (8013030 <tcp_input+0x28c>)
 8012f46:	6814      	ldr	r4, [r2, #0]
 8012f48:	4618      	mov	r0, r3
 8012f4a:	f7fc fd30 	bl	800f9ae <lwip_htonl>
 8012f4e:	4603      	mov	r3, r0
 8012f50:	60a3      	str	r3, [r4, #8]
 8012f52:	68a3      	ldr	r3, [r4, #8]
 8012f54:	4a3f      	ldr	r2, [pc, #252]	; (8013054 <tcp_input+0x2b0>)
 8012f56:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 8012f58:	4b35      	ldr	r3, [pc, #212]	; (8013030 <tcp_input+0x28c>)
 8012f5a:	681b      	ldr	r3, [r3, #0]
 8012f5c:	89db      	ldrh	r3, [r3, #14]
 8012f5e:	b29b      	uxth	r3, r3
 8012f60:	4a33      	ldr	r2, [pc, #204]	; (8013030 <tcp_input+0x28c>)
 8012f62:	6814      	ldr	r4, [r2, #0]
 8012f64:	4618      	mov	r0, r3
 8012f66:	f7fc fd0d 	bl	800f984 <lwip_htons>
 8012f6a:	4603      	mov	r3, r0
 8012f6c:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 8012f6e:	4b30      	ldr	r3, [pc, #192]	; (8013030 <tcp_input+0x28c>)
 8012f70:	681b      	ldr	r3, [r3, #0]
 8012f72:	899b      	ldrh	r3, [r3, #12]
 8012f74:	b29b      	uxth	r3, r3
 8012f76:	4618      	mov	r0, r3
 8012f78:	f7fc fd04 	bl	800f984 <lwip_htons>
 8012f7c:	4603      	mov	r3, r0
 8012f7e:	b2db      	uxtb	r3, r3
 8012f80:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8012f84:	b2da      	uxtb	r2, r3
 8012f86:	4b34      	ldr	r3, [pc, #208]	; (8013058 <tcp_input+0x2b4>)
 8012f88:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 8012f8a:	687b      	ldr	r3, [r7, #4]
 8012f8c:	891a      	ldrh	r2, [r3, #8]
 8012f8e:	4b33      	ldr	r3, [pc, #204]	; (801305c <tcp_input+0x2b8>)
 8012f90:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 8012f92:	4b31      	ldr	r3, [pc, #196]	; (8013058 <tcp_input+0x2b4>)
 8012f94:	781b      	ldrb	r3, [r3, #0]
 8012f96:	f003 0303 	and.w	r3, r3, #3
 8012f9a:	2b00      	cmp	r3, #0
 8012f9c:	d00c      	beq.n	8012fb8 <tcp_input+0x214>
    tcplen++;
 8012f9e:	4b2f      	ldr	r3, [pc, #188]	; (801305c <tcp_input+0x2b8>)
 8012fa0:	881b      	ldrh	r3, [r3, #0]
 8012fa2:	3301      	adds	r3, #1
 8012fa4:	b29a      	uxth	r2, r3
 8012fa6:	4b2d      	ldr	r3, [pc, #180]	; (801305c <tcp_input+0x2b8>)
 8012fa8:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 8012faa:	687b      	ldr	r3, [r7, #4]
 8012fac:	891a      	ldrh	r2, [r3, #8]
 8012fae:	4b2b      	ldr	r3, [pc, #172]	; (801305c <tcp_input+0x2b8>)
 8012fb0:	881b      	ldrh	r3, [r3, #0]
 8012fb2:	429a      	cmp	r2, r3
 8012fb4:	f200 82e6 	bhi.w	8013584 <tcp_input+0x7e0>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 8012fb8:	2300      	movs	r3, #0
 8012fba:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8012fbc:	4b28      	ldr	r3, [pc, #160]	; (8013060 <tcp_input+0x2bc>)
 8012fbe:	681b      	ldr	r3, [r3, #0]
 8012fc0:	61fb      	str	r3, [r7, #28]
 8012fc2:	e09d      	b.n	8013100 <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 8012fc4:	69fb      	ldr	r3, [r7, #28]
 8012fc6:	7d1b      	ldrb	r3, [r3, #20]
 8012fc8:	2b00      	cmp	r3, #0
 8012fca:	d105      	bne.n	8012fd8 <tcp_input+0x234>
 8012fcc:	4b15      	ldr	r3, [pc, #84]	; (8013024 <tcp_input+0x280>)
 8012fce:	22fb      	movs	r2, #251	; 0xfb
 8012fd0:	4924      	ldr	r1, [pc, #144]	; (8013064 <tcp_input+0x2c0>)
 8012fd2:	4816      	ldr	r0, [pc, #88]	; (801302c <tcp_input+0x288>)
 8012fd4:	f006 ff90 	bl	8019ef8 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 8012fd8:	69fb      	ldr	r3, [r7, #28]
 8012fda:	7d1b      	ldrb	r3, [r3, #20]
 8012fdc:	2b0a      	cmp	r3, #10
 8012fde:	d105      	bne.n	8012fec <tcp_input+0x248>
 8012fe0:	4b10      	ldr	r3, [pc, #64]	; (8013024 <tcp_input+0x280>)
 8012fe2:	22fc      	movs	r2, #252	; 0xfc
 8012fe4:	4920      	ldr	r1, [pc, #128]	; (8013068 <tcp_input+0x2c4>)
 8012fe6:	4811      	ldr	r0, [pc, #68]	; (801302c <tcp_input+0x288>)
 8012fe8:	f006 ff86 	bl	8019ef8 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 8012fec:	69fb      	ldr	r3, [r7, #28]
 8012fee:	7d1b      	ldrb	r3, [r3, #20]
 8012ff0:	2b01      	cmp	r3, #1
 8012ff2:	d105      	bne.n	8013000 <tcp_input+0x25c>
 8012ff4:	4b0b      	ldr	r3, [pc, #44]	; (8013024 <tcp_input+0x280>)
 8012ff6:	22fd      	movs	r2, #253	; 0xfd
 8012ff8:	491c      	ldr	r1, [pc, #112]	; (801306c <tcp_input+0x2c8>)
 8012ffa:	480c      	ldr	r0, [pc, #48]	; (801302c <tcp_input+0x288>)
 8012ffc:	f006 ff7c 	bl	8019ef8 <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8013000:	69fb      	ldr	r3, [r7, #28]
 8013002:	7a1b      	ldrb	r3, [r3, #8]
 8013004:	2b00      	cmp	r3, #0
 8013006:	d033      	beq.n	8013070 <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8013008:	69fb      	ldr	r3, [r7, #28]
 801300a:	7a1a      	ldrb	r2, [r3, #8]
 801300c:	4b09      	ldr	r3, [pc, #36]	; (8013034 <tcp_input+0x290>)
 801300e:	685b      	ldr	r3, [r3, #4]
 8013010:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8013014:	3301      	adds	r3, #1
 8013016:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8013018:	429a      	cmp	r2, r3
 801301a:	d029      	beq.n	8013070 <tcp_input+0x2cc>
      prev = pcb;
 801301c:	69fb      	ldr	r3, [r7, #28]
 801301e:	61bb      	str	r3, [r7, #24]
      continue;
 8013020:	e06b      	b.n	80130fa <tcp_input+0x356>
 8013022:	bf00      	nop
 8013024:	0801dc80 	.word	0x0801dc80
 8013028:	0801dcb4 	.word	0x0801dcb4
 801302c:	0801dccc 	.word	0x0801dccc
 8013030:	200070fc 	.word	0x200070fc
 8013034:	200007f8 	.word	0x200007f8
 8013038:	20007100 	.word	0x20007100
 801303c:	20007104 	.word	0x20007104
 8013040:	20007102 	.word	0x20007102
 8013044:	0801dcf4 	.word	0x0801dcf4
 8013048:	0801dd04 	.word	0x0801dd04
 801304c:	0801dd10 	.word	0x0801dd10
 8013050:	2000710c 	.word	0x2000710c
 8013054:	20007110 	.word	0x20007110
 8013058:	20007118 	.word	0x20007118
 801305c:	20007116 	.word	0x20007116
 8013060:	200070e0 	.word	0x200070e0
 8013064:	0801dd30 	.word	0x0801dd30
 8013068:	0801dd58 	.word	0x0801dd58
 801306c:	0801dd84 	.word	0x0801dd84
    }

    if (pcb->remote_port == tcphdr->src &&
 8013070:	69fb      	ldr	r3, [r7, #28]
 8013072:	8b1a      	ldrh	r2, [r3, #24]
 8013074:	4b72      	ldr	r3, [pc, #456]	; (8013240 <tcp_input+0x49c>)
 8013076:	681b      	ldr	r3, [r3, #0]
 8013078:	881b      	ldrh	r3, [r3, #0]
 801307a:	b29b      	uxth	r3, r3
 801307c:	429a      	cmp	r2, r3
 801307e:	d13a      	bne.n	80130f6 <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 8013080:	69fb      	ldr	r3, [r7, #28]
 8013082:	8ada      	ldrh	r2, [r3, #22]
 8013084:	4b6e      	ldr	r3, [pc, #440]	; (8013240 <tcp_input+0x49c>)
 8013086:	681b      	ldr	r3, [r3, #0]
 8013088:	885b      	ldrh	r3, [r3, #2]
 801308a:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 801308c:	429a      	cmp	r2, r3
 801308e:	d132      	bne.n	80130f6 <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8013090:	69fb      	ldr	r3, [r7, #28]
 8013092:	685a      	ldr	r2, [r3, #4]
 8013094:	4b6b      	ldr	r3, [pc, #428]	; (8013244 <tcp_input+0x4a0>)
 8013096:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 8013098:	429a      	cmp	r2, r3
 801309a:	d12c      	bne.n	80130f6 <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 801309c:	69fb      	ldr	r3, [r7, #28]
 801309e:	681a      	ldr	r2, [r3, #0]
 80130a0:	4b68      	ldr	r3, [pc, #416]	; (8013244 <tcp_input+0x4a0>)
 80130a2:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 80130a4:	429a      	cmp	r2, r3
 80130a6:	d126      	bne.n	80130f6 <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 80130a8:	69fb      	ldr	r3, [r7, #28]
 80130aa:	68db      	ldr	r3, [r3, #12]
 80130ac:	69fa      	ldr	r2, [r7, #28]
 80130ae:	429a      	cmp	r2, r3
 80130b0:	d106      	bne.n	80130c0 <tcp_input+0x31c>
 80130b2:	4b65      	ldr	r3, [pc, #404]	; (8013248 <tcp_input+0x4a4>)
 80130b4:	f240 120d 	movw	r2, #269	; 0x10d
 80130b8:	4964      	ldr	r1, [pc, #400]	; (801324c <tcp_input+0x4a8>)
 80130ba:	4865      	ldr	r0, [pc, #404]	; (8013250 <tcp_input+0x4ac>)
 80130bc:	f006 ff1c 	bl	8019ef8 <iprintf>
      if (prev != NULL) {
 80130c0:	69bb      	ldr	r3, [r7, #24]
 80130c2:	2b00      	cmp	r3, #0
 80130c4:	d00a      	beq.n	80130dc <tcp_input+0x338>
        prev->next = pcb->next;
 80130c6:	69fb      	ldr	r3, [r7, #28]
 80130c8:	68da      	ldr	r2, [r3, #12]
 80130ca:	69bb      	ldr	r3, [r7, #24]
 80130cc:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 80130ce:	4b61      	ldr	r3, [pc, #388]	; (8013254 <tcp_input+0x4b0>)
 80130d0:	681a      	ldr	r2, [r3, #0]
 80130d2:	69fb      	ldr	r3, [r7, #28]
 80130d4:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 80130d6:	4a5f      	ldr	r2, [pc, #380]	; (8013254 <tcp_input+0x4b0>)
 80130d8:	69fb      	ldr	r3, [r7, #28]
 80130da:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 80130dc:	69fb      	ldr	r3, [r7, #28]
 80130de:	68db      	ldr	r3, [r3, #12]
 80130e0:	69fa      	ldr	r2, [r7, #28]
 80130e2:	429a      	cmp	r2, r3
 80130e4:	d111      	bne.n	801310a <tcp_input+0x366>
 80130e6:	4b58      	ldr	r3, [pc, #352]	; (8013248 <tcp_input+0x4a4>)
 80130e8:	f240 1215 	movw	r2, #277	; 0x115
 80130ec:	495a      	ldr	r1, [pc, #360]	; (8013258 <tcp_input+0x4b4>)
 80130ee:	4858      	ldr	r0, [pc, #352]	; (8013250 <tcp_input+0x4ac>)
 80130f0:	f006 ff02 	bl	8019ef8 <iprintf>
      break;
 80130f4:	e009      	b.n	801310a <tcp_input+0x366>
    }
    prev = pcb;
 80130f6:	69fb      	ldr	r3, [r7, #28]
 80130f8:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80130fa:	69fb      	ldr	r3, [r7, #28]
 80130fc:	68db      	ldr	r3, [r3, #12]
 80130fe:	61fb      	str	r3, [r7, #28]
 8013100:	69fb      	ldr	r3, [r7, #28]
 8013102:	2b00      	cmp	r3, #0
 8013104:	f47f af5e 	bne.w	8012fc4 <tcp_input+0x220>
 8013108:	e000      	b.n	801310c <tcp_input+0x368>
      break;
 801310a:	bf00      	nop
  }

  if (pcb == NULL) {
 801310c:	69fb      	ldr	r3, [r7, #28]
 801310e:	2b00      	cmp	r3, #0
 8013110:	f040 80aa 	bne.w	8013268 <tcp_input+0x4c4>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8013114:	4b51      	ldr	r3, [pc, #324]	; (801325c <tcp_input+0x4b8>)
 8013116:	681b      	ldr	r3, [r3, #0]
 8013118:	61fb      	str	r3, [r7, #28]
 801311a:	e03f      	b.n	801319c <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 801311c:	69fb      	ldr	r3, [r7, #28]
 801311e:	7d1b      	ldrb	r3, [r3, #20]
 8013120:	2b0a      	cmp	r3, #10
 8013122:	d006      	beq.n	8013132 <tcp_input+0x38e>
 8013124:	4b48      	ldr	r3, [pc, #288]	; (8013248 <tcp_input+0x4a4>)
 8013126:	f240 121f 	movw	r2, #287	; 0x11f
 801312a:	494d      	ldr	r1, [pc, #308]	; (8013260 <tcp_input+0x4bc>)
 801312c:	4848      	ldr	r0, [pc, #288]	; (8013250 <tcp_input+0x4ac>)
 801312e:	f006 fee3 	bl	8019ef8 <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8013132:	69fb      	ldr	r3, [r7, #28]
 8013134:	7a1b      	ldrb	r3, [r3, #8]
 8013136:	2b00      	cmp	r3, #0
 8013138:	d009      	beq.n	801314e <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 801313a:	69fb      	ldr	r3, [r7, #28]
 801313c:	7a1a      	ldrb	r2, [r3, #8]
 801313e:	4b41      	ldr	r3, [pc, #260]	; (8013244 <tcp_input+0x4a0>)
 8013140:	685b      	ldr	r3, [r3, #4]
 8013142:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8013146:	3301      	adds	r3, #1
 8013148:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801314a:	429a      	cmp	r2, r3
 801314c:	d122      	bne.n	8013194 <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 801314e:	69fb      	ldr	r3, [r7, #28]
 8013150:	8b1a      	ldrh	r2, [r3, #24]
 8013152:	4b3b      	ldr	r3, [pc, #236]	; (8013240 <tcp_input+0x49c>)
 8013154:	681b      	ldr	r3, [r3, #0]
 8013156:	881b      	ldrh	r3, [r3, #0]
 8013158:	b29b      	uxth	r3, r3
 801315a:	429a      	cmp	r2, r3
 801315c:	d11b      	bne.n	8013196 <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 801315e:	69fb      	ldr	r3, [r7, #28]
 8013160:	8ada      	ldrh	r2, [r3, #22]
 8013162:	4b37      	ldr	r3, [pc, #220]	; (8013240 <tcp_input+0x49c>)
 8013164:	681b      	ldr	r3, [r3, #0]
 8013166:	885b      	ldrh	r3, [r3, #2]
 8013168:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 801316a:	429a      	cmp	r2, r3
 801316c:	d113      	bne.n	8013196 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 801316e:	69fb      	ldr	r3, [r7, #28]
 8013170:	685a      	ldr	r2, [r3, #4]
 8013172:	4b34      	ldr	r3, [pc, #208]	; (8013244 <tcp_input+0x4a0>)
 8013174:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 8013176:	429a      	cmp	r2, r3
 8013178:	d10d      	bne.n	8013196 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 801317a:	69fb      	ldr	r3, [r7, #28]
 801317c:	681a      	ldr	r2, [r3, #0]
 801317e:	4b31      	ldr	r3, [pc, #196]	; (8013244 <tcp_input+0x4a0>)
 8013180:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8013182:	429a      	cmp	r2, r3
 8013184:	d107      	bne.n	8013196 <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 8013186:	69f8      	ldr	r0, [r7, #28]
 8013188:	f000 fb56 	bl	8013838 <tcp_timewait_input>
        }
        pbuf_free(p);
 801318c:	6878      	ldr	r0, [r7, #4]
 801318e:	f7fd ffdd 	bl	801114c <pbuf_free>
        return;
 8013192:	e1fd      	b.n	8013590 <tcp_input+0x7ec>
        continue;
 8013194:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8013196:	69fb      	ldr	r3, [r7, #28]
 8013198:	68db      	ldr	r3, [r3, #12]
 801319a:	61fb      	str	r3, [r7, #28]
 801319c:	69fb      	ldr	r3, [r7, #28]
 801319e:	2b00      	cmp	r3, #0
 80131a0:	d1bc      	bne.n	801311c <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 80131a2:	2300      	movs	r3, #0
 80131a4:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 80131a6:	4b2f      	ldr	r3, [pc, #188]	; (8013264 <tcp_input+0x4c0>)
 80131a8:	681b      	ldr	r3, [r3, #0]
 80131aa:	617b      	str	r3, [r7, #20]
 80131ac:	e02a      	b.n	8013204 <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 80131ae:	697b      	ldr	r3, [r7, #20]
 80131b0:	7a1b      	ldrb	r3, [r3, #8]
 80131b2:	2b00      	cmp	r3, #0
 80131b4:	d00c      	beq.n	80131d0 <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 80131b6:	697b      	ldr	r3, [r7, #20]
 80131b8:	7a1a      	ldrb	r2, [r3, #8]
 80131ba:	4b22      	ldr	r3, [pc, #136]	; (8013244 <tcp_input+0x4a0>)
 80131bc:	685b      	ldr	r3, [r3, #4]
 80131be:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80131c2:	3301      	adds	r3, #1
 80131c4:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 80131c6:	429a      	cmp	r2, r3
 80131c8:	d002      	beq.n	80131d0 <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 80131ca:	697b      	ldr	r3, [r7, #20]
 80131cc:	61bb      	str	r3, [r7, #24]
        continue;
 80131ce:	e016      	b.n	80131fe <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 80131d0:	697b      	ldr	r3, [r7, #20]
 80131d2:	8ada      	ldrh	r2, [r3, #22]
 80131d4:	4b1a      	ldr	r3, [pc, #104]	; (8013240 <tcp_input+0x49c>)
 80131d6:	681b      	ldr	r3, [r3, #0]
 80131d8:	885b      	ldrh	r3, [r3, #2]
 80131da:	b29b      	uxth	r3, r3
 80131dc:	429a      	cmp	r2, r3
 80131de:	d10c      	bne.n	80131fa <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 80131e0:	697b      	ldr	r3, [r7, #20]
 80131e2:	681a      	ldr	r2, [r3, #0]
 80131e4:	4b17      	ldr	r3, [pc, #92]	; (8013244 <tcp_input+0x4a0>)
 80131e6:	695b      	ldr	r3, [r3, #20]
 80131e8:	429a      	cmp	r2, r3
 80131ea:	d00f      	beq.n	801320c <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 80131ec:	697b      	ldr	r3, [r7, #20]
 80131ee:	2b00      	cmp	r3, #0
 80131f0:	d00d      	beq.n	801320e <tcp_input+0x46a>
 80131f2:	697b      	ldr	r3, [r7, #20]
 80131f4:	681b      	ldr	r3, [r3, #0]
 80131f6:	2b00      	cmp	r3, #0
 80131f8:	d009      	beq.n	801320e <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 80131fa:	697b      	ldr	r3, [r7, #20]
 80131fc:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 80131fe:	697b      	ldr	r3, [r7, #20]
 8013200:	68db      	ldr	r3, [r3, #12]
 8013202:	617b      	str	r3, [r7, #20]
 8013204:	697b      	ldr	r3, [r7, #20]
 8013206:	2b00      	cmp	r3, #0
 8013208:	d1d1      	bne.n	80131ae <tcp_input+0x40a>
 801320a:	e000      	b.n	801320e <tcp_input+0x46a>
            break;
 801320c:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 801320e:	697b      	ldr	r3, [r7, #20]
 8013210:	2b00      	cmp	r3, #0
 8013212:	d029      	beq.n	8013268 <tcp_input+0x4c4>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 8013214:	69bb      	ldr	r3, [r7, #24]
 8013216:	2b00      	cmp	r3, #0
 8013218:	d00a      	beq.n	8013230 <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 801321a:	697b      	ldr	r3, [r7, #20]
 801321c:	68da      	ldr	r2, [r3, #12]
 801321e:	69bb      	ldr	r3, [r7, #24]
 8013220:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 8013222:	4b10      	ldr	r3, [pc, #64]	; (8013264 <tcp_input+0x4c0>)
 8013224:	681a      	ldr	r2, [r3, #0]
 8013226:	697b      	ldr	r3, [r7, #20]
 8013228:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 801322a:	4a0e      	ldr	r2, [pc, #56]	; (8013264 <tcp_input+0x4c0>)
 801322c:	697b      	ldr	r3, [r7, #20]
 801322e:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 8013230:	6978      	ldr	r0, [r7, #20]
 8013232:	f000 fa03 	bl	801363c <tcp_listen_input>
      }
      pbuf_free(p);
 8013236:	6878      	ldr	r0, [r7, #4]
 8013238:	f7fd ff88 	bl	801114c <pbuf_free>
      return;
 801323c:	e1a8      	b.n	8013590 <tcp_input+0x7ec>
 801323e:	bf00      	nop
 8013240:	200070fc 	.word	0x200070fc
 8013244:	200007f8 	.word	0x200007f8
 8013248:	0801dc80 	.word	0x0801dc80
 801324c:	0801ddac 	.word	0x0801ddac
 8013250:	0801dccc 	.word	0x0801dccc
 8013254:	200070e0 	.word	0x200070e0
 8013258:	0801ddd8 	.word	0x0801ddd8
 801325c:	200070e4 	.word	0x200070e4
 8013260:	0801de04 	.word	0x0801de04
 8013264:	200070dc 	.word	0x200070dc
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 8013268:	69fb      	ldr	r3, [r7, #28]
 801326a:	2b00      	cmp	r3, #0
 801326c:	f000 8158 	beq.w	8013520 <tcp_input+0x77c>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 8013270:	4b95      	ldr	r3, [pc, #596]	; (80134c8 <tcp_input+0x724>)
 8013272:	2200      	movs	r2, #0
 8013274:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 8013276:	687b      	ldr	r3, [r7, #4]
 8013278:	891a      	ldrh	r2, [r3, #8]
 801327a:	4b93      	ldr	r3, [pc, #588]	; (80134c8 <tcp_input+0x724>)
 801327c:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 801327e:	4a92      	ldr	r2, [pc, #584]	; (80134c8 <tcp_input+0x724>)
 8013280:	687b      	ldr	r3, [r7, #4]
 8013282:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 8013284:	4b91      	ldr	r3, [pc, #580]	; (80134cc <tcp_input+0x728>)
 8013286:	681b      	ldr	r3, [r3, #0]
 8013288:	4a8f      	ldr	r2, [pc, #572]	; (80134c8 <tcp_input+0x724>)
 801328a:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 801328c:	4b90      	ldr	r3, [pc, #576]	; (80134d0 <tcp_input+0x72c>)
 801328e:	2200      	movs	r2, #0
 8013290:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 8013292:	4b90      	ldr	r3, [pc, #576]	; (80134d4 <tcp_input+0x730>)
 8013294:	2200      	movs	r2, #0
 8013296:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 8013298:	4b8f      	ldr	r3, [pc, #572]	; (80134d8 <tcp_input+0x734>)
 801329a:	2200      	movs	r2, #0
 801329c:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 801329e:	4b8f      	ldr	r3, [pc, #572]	; (80134dc <tcp_input+0x738>)
 80132a0:	781b      	ldrb	r3, [r3, #0]
 80132a2:	f003 0308 	and.w	r3, r3, #8
 80132a6:	2b00      	cmp	r3, #0
 80132a8:	d006      	beq.n	80132b8 <tcp_input+0x514>
      p->flags |= PBUF_FLAG_PUSH;
 80132aa:	687b      	ldr	r3, [r7, #4]
 80132ac:	7b5b      	ldrb	r3, [r3, #13]
 80132ae:	f043 0301 	orr.w	r3, r3, #1
 80132b2:	b2da      	uxtb	r2, r3
 80132b4:	687b      	ldr	r3, [r7, #4]
 80132b6:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 80132b8:	69fb      	ldr	r3, [r7, #28]
 80132ba:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80132bc:	2b00      	cmp	r3, #0
 80132be:	d017      	beq.n	80132f0 <tcp_input+0x54c>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 80132c0:	69f8      	ldr	r0, [r7, #28]
 80132c2:	f7ff f927 	bl	8012514 <tcp_process_refused_data>
 80132c6:	4603      	mov	r3, r0
 80132c8:	f113 0f0d 	cmn.w	r3, #13
 80132cc:	d007      	beq.n	80132de <tcp_input+0x53a>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 80132ce:	69fb      	ldr	r3, [r7, #28]
 80132d0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 80132d2:	2b00      	cmp	r3, #0
 80132d4:	d00c      	beq.n	80132f0 <tcp_input+0x54c>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 80132d6:	4b82      	ldr	r3, [pc, #520]	; (80134e0 <tcp_input+0x73c>)
 80132d8:	881b      	ldrh	r3, [r3, #0]
 80132da:	2b00      	cmp	r3, #0
 80132dc:	d008      	beq.n	80132f0 <tcp_input+0x54c>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 80132de:	69fb      	ldr	r3, [r7, #28]
 80132e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80132e2:	2b00      	cmp	r3, #0
 80132e4:	f040 80e4 	bne.w	80134b0 <tcp_input+0x70c>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 80132e8:	69f8      	ldr	r0, [r7, #28]
 80132ea:	f003 f9ad 	bl	8016648 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 80132ee:	e0df      	b.n	80134b0 <tcp_input+0x70c>
      }
    }
    tcp_input_pcb = pcb;
 80132f0:	4a7c      	ldr	r2, [pc, #496]	; (80134e4 <tcp_input+0x740>)
 80132f2:	69fb      	ldr	r3, [r7, #28]
 80132f4:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 80132f6:	69f8      	ldr	r0, [r7, #28]
 80132f8:	f000 fb18 	bl	801392c <tcp_process>
 80132fc:	4603      	mov	r3, r0
 80132fe:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 8013300:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8013304:	f113 0f0d 	cmn.w	r3, #13
 8013308:	f000 80d4 	beq.w	80134b4 <tcp_input+0x710>
      if (recv_flags & TF_RESET) {
 801330c:	4b71      	ldr	r3, [pc, #452]	; (80134d4 <tcp_input+0x730>)
 801330e:	781b      	ldrb	r3, [r3, #0]
 8013310:	f003 0308 	and.w	r3, r3, #8
 8013314:	2b00      	cmp	r3, #0
 8013316:	d015      	beq.n	8013344 <tcp_input+0x5a0>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 8013318:	69fb      	ldr	r3, [r7, #28]
 801331a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801331e:	2b00      	cmp	r3, #0
 8013320:	d008      	beq.n	8013334 <tcp_input+0x590>
 8013322:	69fb      	ldr	r3, [r7, #28]
 8013324:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8013328:	69fa      	ldr	r2, [r7, #28]
 801332a:	6912      	ldr	r2, [r2, #16]
 801332c:	f06f 010d 	mvn.w	r1, #13
 8013330:	4610      	mov	r0, r2
 8013332:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8013334:	69f9      	ldr	r1, [r7, #28]
 8013336:	486c      	ldr	r0, [pc, #432]	; (80134e8 <tcp_input+0x744>)
 8013338:	f7ff fbbc 	bl	8012ab4 <tcp_pcb_remove>
        tcp_free(pcb);
 801333c:	69f8      	ldr	r0, [r7, #28]
 801333e:	f7fe f9a5 	bl	801168c <tcp_free>
 8013342:	e0da      	b.n	80134fa <tcp_input+0x756>
      } else {
        err = ERR_OK;
 8013344:	2300      	movs	r3, #0
 8013346:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 8013348:	4b63      	ldr	r3, [pc, #396]	; (80134d8 <tcp_input+0x734>)
 801334a:	881b      	ldrh	r3, [r3, #0]
 801334c:	2b00      	cmp	r3, #0
 801334e:	d01d      	beq.n	801338c <tcp_input+0x5e8>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 8013350:	4b61      	ldr	r3, [pc, #388]	; (80134d8 <tcp_input+0x734>)
 8013352:	881b      	ldrh	r3, [r3, #0]
 8013354:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 8013356:	69fb      	ldr	r3, [r7, #28]
 8013358:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801335c:	2b00      	cmp	r3, #0
 801335e:	d00a      	beq.n	8013376 <tcp_input+0x5d2>
 8013360:	69fb      	ldr	r3, [r7, #28]
 8013362:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8013366:	69fa      	ldr	r2, [r7, #28]
 8013368:	6910      	ldr	r0, [r2, #16]
 801336a:	89fa      	ldrh	r2, [r7, #14]
 801336c:	69f9      	ldr	r1, [r7, #28]
 801336e:	4798      	blx	r3
 8013370:	4603      	mov	r3, r0
 8013372:	74fb      	strb	r3, [r7, #19]
 8013374:	e001      	b.n	801337a <tcp_input+0x5d6>
 8013376:	2300      	movs	r3, #0
 8013378:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 801337a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801337e:	f113 0f0d 	cmn.w	r3, #13
 8013382:	f000 8099 	beq.w	80134b8 <tcp_input+0x714>
              goto aborted;
            }
          }
          recv_acked = 0;
 8013386:	4b54      	ldr	r3, [pc, #336]	; (80134d8 <tcp_input+0x734>)
 8013388:	2200      	movs	r2, #0
 801338a:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 801338c:	69f8      	ldr	r0, [r7, #28]
 801338e:	f000 f915 	bl	80135bc <tcp_input_delayed_close>
 8013392:	4603      	mov	r3, r0
 8013394:	2b00      	cmp	r3, #0
 8013396:	f040 8091 	bne.w	80134bc <tcp_input+0x718>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 801339a:	4b4d      	ldr	r3, [pc, #308]	; (80134d0 <tcp_input+0x72c>)
 801339c:	681b      	ldr	r3, [r3, #0]
 801339e:	2b00      	cmp	r3, #0
 80133a0:	d041      	beq.n	8013426 <tcp_input+0x682>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 80133a2:	69fb      	ldr	r3, [r7, #28]
 80133a4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80133a6:	2b00      	cmp	r3, #0
 80133a8:	d006      	beq.n	80133b8 <tcp_input+0x614>
 80133aa:	4b50      	ldr	r3, [pc, #320]	; (80134ec <tcp_input+0x748>)
 80133ac:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 80133b0:	494f      	ldr	r1, [pc, #316]	; (80134f0 <tcp_input+0x74c>)
 80133b2:	4850      	ldr	r0, [pc, #320]	; (80134f4 <tcp_input+0x750>)
 80133b4:	f006 fda0 	bl	8019ef8 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 80133b8:	69fb      	ldr	r3, [r7, #28]
 80133ba:	8b5b      	ldrh	r3, [r3, #26]
 80133bc:	f003 0310 	and.w	r3, r3, #16
 80133c0:	2b00      	cmp	r3, #0
 80133c2:	d008      	beq.n	80133d6 <tcp_input+0x632>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 80133c4:	4b42      	ldr	r3, [pc, #264]	; (80134d0 <tcp_input+0x72c>)
 80133c6:	681b      	ldr	r3, [r3, #0]
 80133c8:	4618      	mov	r0, r3
 80133ca:	f7fd febf 	bl	801114c <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 80133ce:	69f8      	ldr	r0, [r7, #28]
 80133d0:	f7fe fc44 	bl	8011c5c <tcp_abort>
            goto aborted;
 80133d4:	e091      	b.n	80134fa <tcp_input+0x756>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 80133d6:	69fb      	ldr	r3, [r7, #28]
 80133d8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80133dc:	2b00      	cmp	r3, #0
 80133de:	d00c      	beq.n	80133fa <tcp_input+0x656>
 80133e0:	69fb      	ldr	r3, [r7, #28]
 80133e2:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 80133e6:	69fb      	ldr	r3, [r7, #28]
 80133e8:	6918      	ldr	r0, [r3, #16]
 80133ea:	4b39      	ldr	r3, [pc, #228]	; (80134d0 <tcp_input+0x72c>)
 80133ec:	681a      	ldr	r2, [r3, #0]
 80133ee:	2300      	movs	r3, #0
 80133f0:	69f9      	ldr	r1, [r7, #28]
 80133f2:	47a0      	blx	r4
 80133f4:	4603      	mov	r3, r0
 80133f6:	74fb      	strb	r3, [r7, #19]
 80133f8:	e008      	b.n	801340c <tcp_input+0x668>
 80133fa:	4b35      	ldr	r3, [pc, #212]	; (80134d0 <tcp_input+0x72c>)
 80133fc:	681a      	ldr	r2, [r3, #0]
 80133fe:	2300      	movs	r3, #0
 8013400:	69f9      	ldr	r1, [r7, #28]
 8013402:	2000      	movs	r0, #0
 8013404:	f7ff f95e 	bl	80126c4 <tcp_recv_null>
 8013408:	4603      	mov	r3, r0
 801340a:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 801340c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8013410:	f113 0f0d 	cmn.w	r3, #13
 8013414:	d054      	beq.n	80134c0 <tcp_input+0x71c>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 8013416:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801341a:	2b00      	cmp	r3, #0
 801341c:	d003      	beq.n	8013426 <tcp_input+0x682>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 801341e:	4b2c      	ldr	r3, [pc, #176]	; (80134d0 <tcp_input+0x72c>)
 8013420:	681a      	ldr	r2, [r3, #0]
 8013422:	69fb      	ldr	r3, [r7, #28]
 8013424:	679a      	str	r2, [r3, #120]	; 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 8013426:	4b2b      	ldr	r3, [pc, #172]	; (80134d4 <tcp_input+0x730>)
 8013428:	781b      	ldrb	r3, [r3, #0]
 801342a:	f003 0320 	and.w	r3, r3, #32
 801342e:	2b00      	cmp	r3, #0
 8013430:	d031      	beq.n	8013496 <tcp_input+0x6f2>
          if (pcb->refused_data != NULL) {
 8013432:	69fb      	ldr	r3, [r7, #28]
 8013434:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8013436:	2b00      	cmp	r3, #0
 8013438:	d009      	beq.n	801344e <tcp_input+0x6aa>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 801343a:	69fb      	ldr	r3, [r7, #28]
 801343c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801343e:	7b5a      	ldrb	r2, [r3, #13]
 8013440:	69fb      	ldr	r3, [r7, #28]
 8013442:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8013444:	f042 0220 	orr.w	r2, r2, #32
 8013448:	b2d2      	uxtb	r2, r2
 801344a:	735a      	strb	r2, [r3, #13]
 801344c:	e023      	b.n	8013496 <tcp_input+0x6f2>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 801344e:	69fb      	ldr	r3, [r7, #28]
 8013450:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8013452:	f241 62d0 	movw	r2, #5840	; 0x16d0
 8013456:	4293      	cmp	r3, r2
 8013458:	d005      	beq.n	8013466 <tcp_input+0x6c2>
              pcb->rcv_wnd++;
 801345a:	69fb      	ldr	r3, [r7, #28]
 801345c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801345e:	3301      	adds	r3, #1
 8013460:	b29a      	uxth	r2, r3
 8013462:	69fb      	ldr	r3, [r7, #28]
 8013464:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 8013466:	69fb      	ldr	r3, [r7, #28]
 8013468:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801346c:	2b00      	cmp	r3, #0
 801346e:	d00b      	beq.n	8013488 <tcp_input+0x6e4>
 8013470:	69fb      	ldr	r3, [r7, #28]
 8013472:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8013476:	69fb      	ldr	r3, [r7, #28]
 8013478:	6918      	ldr	r0, [r3, #16]
 801347a:	2300      	movs	r3, #0
 801347c:	2200      	movs	r2, #0
 801347e:	69f9      	ldr	r1, [r7, #28]
 8013480:	47a0      	blx	r4
 8013482:	4603      	mov	r3, r0
 8013484:	74fb      	strb	r3, [r7, #19]
 8013486:	e001      	b.n	801348c <tcp_input+0x6e8>
 8013488:	2300      	movs	r3, #0
 801348a:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 801348c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8013490:	f113 0f0d 	cmn.w	r3, #13
 8013494:	d016      	beq.n	80134c4 <tcp_input+0x720>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 8013496:	4b13      	ldr	r3, [pc, #76]	; (80134e4 <tcp_input+0x740>)
 8013498:	2200      	movs	r2, #0
 801349a:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 801349c:	69f8      	ldr	r0, [r7, #28]
 801349e:	f000 f88d 	bl	80135bc <tcp_input_delayed_close>
 80134a2:	4603      	mov	r3, r0
 80134a4:	2b00      	cmp	r3, #0
 80134a6:	d127      	bne.n	80134f8 <tcp_input+0x754>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 80134a8:	69f8      	ldr	r0, [r7, #28]
 80134aa:	f002 fac7 	bl	8015a3c <tcp_output>
 80134ae:	e024      	b.n	80134fa <tcp_input+0x756>
        goto aborted;
 80134b0:	bf00      	nop
 80134b2:	e022      	b.n	80134fa <tcp_input+0x756>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 80134b4:	bf00      	nop
 80134b6:	e020      	b.n	80134fa <tcp_input+0x756>
              goto aborted;
 80134b8:	bf00      	nop
 80134ba:	e01e      	b.n	80134fa <tcp_input+0x756>
          goto aborted;
 80134bc:	bf00      	nop
 80134be:	e01c      	b.n	80134fa <tcp_input+0x756>
            goto aborted;
 80134c0:	bf00      	nop
 80134c2:	e01a      	b.n	80134fa <tcp_input+0x756>
              goto aborted;
 80134c4:	bf00      	nop
 80134c6:	e018      	b.n	80134fa <tcp_input+0x756>
 80134c8:	200070ec 	.word	0x200070ec
 80134cc:	200070fc 	.word	0x200070fc
 80134d0:	2000711c 	.word	0x2000711c
 80134d4:	20007119 	.word	0x20007119
 80134d8:	20007114 	.word	0x20007114
 80134dc:	20007118 	.word	0x20007118
 80134e0:	20007116 	.word	0x20007116
 80134e4:	20007120 	.word	0x20007120
 80134e8:	200070e0 	.word	0x200070e0
 80134ec:	0801dc80 	.word	0x0801dc80
 80134f0:	0801de34 	.word	0x0801de34
 80134f4:	0801dccc 	.word	0x0801dccc
          goto aborted;
 80134f8:	bf00      	nop
    tcp_input_pcb = NULL;
 80134fa:	4b27      	ldr	r3, [pc, #156]	; (8013598 <tcp_input+0x7f4>)
 80134fc:	2200      	movs	r2, #0
 80134fe:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 8013500:	4b26      	ldr	r3, [pc, #152]	; (801359c <tcp_input+0x7f8>)
 8013502:	2200      	movs	r2, #0
 8013504:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 8013506:	4b26      	ldr	r3, [pc, #152]	; (80135a0 <tcp_input+0x7fc>)
 8013508:	685b      	ldr	r3, [r3, #4]
 801350a:	2b00      	cmp	r3, #0
 801350c:	d03f      	beq.n	801358e <tcp_input+0x7ea>
      pbuf_free(inseg.p);
 801350e:	4b24      	ldr	r3, [pc, #144]	; (80135a0 <tcp_input+0x7fc>)
 8013510:	685b      	ldr	r3, [r3, #4]
 8013512:	4618      	mov	r0, r3
 8013514:	f7fd fe1a 	bl	801114c <pbuf_free>
      inseg.p = NULL;
 8013518:	4b21      	ldr	r3, [pc, #132]	; (80135a0 <tcp_input+0x7fc>)
 801351a:	2200      	movs	r2, #0
 801351c:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 801351e:	e036      	b.n	801358e <tcp_input+0x7ea>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 8013520:	4b20      	ldr	r3, [pc, #128]	; (80135a4 <tcp_input+0x800>)
 8013522:	681b      	ldr	r3, [r3, #0]
 8013524:	899b      	ldrh	r3, [r3, #12]
 8013526:	b29b      	uxth	r3, r3
 8013528:	4618      	mov	r0, r3
 801352a:	f7fc fa2b 	bl	800f984 <lwip_htons>
 801352e:	4603      	mov	r3, r0
 8013530:	b2db      	uxtb	r3, r3
 8013532:	f003 0304 	and.w	r3, r3, #4
 8013536:	2b00      	cmp	r3, #0
 8013538:	d118      	bne.n	801356c <tcp_input+0x7c8>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 801353a:	4b1b      	ldr	r3, [pc, #108]	; (80135a8 <tcp_input+0x804>)
 801353c:	6819      	ldr	r1, [r3, #0]
 801353e:	4b1b      	ldr	r3, [pc, #108]	; (80135ac <tcp_input+0x808>)
 8013540:	881b      	ldrh	r3, [r3, #0]
 8013542:	461a      	mov	r2, r3
 8013544:	4b1a      	ldr	r3, [pc, #104]	; (80135b0 <tcp_input+0x80c>)
 8013546:	681b      	ldr	r3, [r3, #0]
 8013548:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801354a:	4b16      	ldr	r3, [pc, #88]	; (80135a4 <tcp_input+0x800>)
 801354c:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 801354e:	885b      	ldrh	r3, [r3, #2]
 8013550:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8013552:	4a14      	ldr	r2, [pc, #80]	; (80135a4 <tcp_input+0x800>)
 8013554:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8013556:	8812      	ldrh	r2, [r2, #0]
 8013558:	b292      	uxth	r2, r2
 801355a:	9202      	str	r2, [sp, #8]
 801355c:	9301      	str	r3, [sp, #4]
 801355e:	4b15      	ldr	r3, [pc, #84]	; (80135b4 <tcp_input+0x810>)
 8013560:	9300      	str	r3, [sp, #0]
 8013562:	4b15      	ldr	r3, [pc, #84]	; (80135b8 <tcp_input+0x814>)
 8013564:	4602      	mov	r2, r0
 8013566:	2000      	movs	r0, #0
 8013568:	f003 f81c 	bl	80165a4 <tcp_rst>
    pbuf_free(p);
 801356c:	6878      	ldr	r0, [r7, #4]
 801356e:	f7fd fded 	bl	801114c <pbuf_free>
  return;
 8013572:	e00c      	b.n	801358e <tcp_input+0x7ea>
    goto dropped;
 8013574:	bf00      	nop
 8013576:	e006      	b.n	8013586 <tcp_input+0x7e2>
    goto dropped;
 8013578:	bf00      	nop
 801357a:	e004      	b.n	8013586 <tcp_input+0x7e2>
    goto dropped;
 801357c:	bf00      	nop
 801357e:	e002      	b.n	8013586 <tcp_input+0x7e2>
      goto dropped;
 8013580:	bf00      	nop
 8013582:	e000      	b.n	8013586 <tcp_input+0x7e2>
      goto dropped;
 8013584:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 8013586:	6878      	ldr	r0, [r7, #4]
 8013588:	f7fd fde0 	bl	801114c <pbuf_free>
 801358c:	e000      	b.n	8013590 <tcp_input+0x7ec>
  return;
 801358e:	bf00      	nop
}
 8013590:	3724      	adds	r7, #36	; 0x24
 8013592:	46bd      	mov	sp, r7
 8013594:	bd90      	pop	{r4, r7, pc}
 8013596:	bf00      	nop
 8013598:	20007120 	.word	0x20007120
 801359c:	2000711c 	.word	0x2000711c
 80135a0:	200070ec 	.word	0x200070ec
 80135a4:	200070fc 	.word	0x200070fc
 80135a8:	20007110 	.word	0x20007110
 80135ac:	20007116 	.word	0x20007116
 80135b0:	2000710c 	.word	0x2000710c
 80135b4:	20000808 	.word	0x20000808
 80135b8:	2000080c 	.word	0x2000080c

080135bc <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 80135bc:	b580      	push	{r7, lr}
 80135be:	b082      	sub	sp, #8
 80135c0:	af00      	add	r7, sp, #0
 80135c2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 80135c4:	687b      	ldr	r3, [r7, #4]
 80135c6:	2b00      	cmp	r3, #0
 80135c8:	d106      	bne.n	80135d8 <tcp_input_delayed_close+0x1c>
 80135ca:	4b17      	ldr	r3, [pc, #92]	; (8013628 <tcp_input_delayed_close+0x6c>)
 80135cc:	f240 225a 	movw	r2, #602	; 0x25a
 80135d0:	4916      	ldr	r1, [pc, #88]	; (801362c <tcp_input_delayed_close+0x70>)
 80135d2:	4817      	ldr	r0, [pc, #92]	; (8013630 <tcp_input_delayed_close+0x74>)
 80135d4:	f006 fc90 	bl	8019ef8 <iprintf>

  if (recv_flags & TF_CLOSED) {
 80135d8:	4b16      	ldr	r3, [pc, #88]	; (8013634 <tcp_input_delayed_close+0x78>)
 80135da:	781b      	ldrb	r3, [r3, #0]
 80135dc:	f003 0310 	and.w	r3, r3, #16
 80135e0:	2b00      	cmp	r3, #0
 80135e2:	d01c      	beq.n	801361e <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 80135e4:	687b      	ldr	r3, [r7, #4]
 80135e6:	8b5b      	ldrh	r3, [r3, #26]
 80135e8:	f003 0310 	and.w	r3, r3, #16
 80135ec:	2b00      	cmp	r3, #0
 80135ee:	d10d      	bne.n	801360c <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 80135f0:	687b      	ldr	r3, [r7, #4]
 80135f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80135f6:	2b00      	cmp	r3, #0
 80135f8:	d008      	beq.n	801360c <tcp_input_delayed_close+0x50>
 80135fa:	687b      	ldr	r3, [r7, #4]
 80135fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8013600:	687a      	ldr	r2, [r7, #4]
 8013602:	6912      	ldr	r2, [r2, #16]
 8013604:	f06f 010e 	mvn.w	r1, #14
 8013608:	4610      	mov	r0, r2
 801360a:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 801360c:	6879      	ldr	r1, [r7, #4]
 801360e:	480a      	ldr	r0, [pc, #40]	; (8013638 <tcp_input_delayed_close+0x7c>)
 8013610:	f7ff fa50 	bl	8012ab4 <tcp_pcb_remove>
    tcp_free(pcb);
 8013614:	6878      	ldr	r0, [r7, #4]
 8013616:	f7fe f839 	bl	801168c <tcp_free>
    return 1;
 801361a:	2301      	movs	r3, #1
 801361c:	e000      	b.n	8013620 <tcp_input_delayed_close+0x64>
  }
  return 0;
 801361e:	2300      	movs	r3, #0
}
 8013620:	4618      	mov	r0, r3
 8013622:	3708      	adds	r7, #8
 8013624:	46bd      	mov	sp, r7
 8013626:	bd80      	pop	{r7, pc}
 8013628:	0801dc80 	.word	0x0801dc80
 801362c:	0801de50 	.word	0x0801de50
 8013630:	0801dccc 	.word	0x0801dccc
 8013634:	20007119 	.word	0x20007119
 8013638:	200070e0 	.word	0x200070e0

0801363c <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 801363c:	b590      	push	{r4, r7, lr}
 801363e:	b08b      	sub	sp, #44	; 0x2c
 8013640:	af04      	add	r7, sp, #16
 8013642:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 8013644:	4b6f      	ldr	r3, [pc, #444]	; (8013804 <tcp_listen_input+0x1c8>)
 8013646:	781b      	ldrb	r3, [r3, #0]
 8013648:	f003 0304 	and.w	r3, r3, #4
 801364c:	2b00      	cmp	r3, #0
 801364e:	f040 80d2 	bne.w	80137f6 <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 8013652:	687b      	ldr	r3, [r7, #4]
 8013654:	2b00      	cmp	r3, #0
 8013656:	d106      	bne.n	8013666 <tcp_listen_input+0x2a>
 8013658:	4b6b      	ldr	r3, [pc, #428]	; (8013808 <tcp_listen_input+0x1cc>)
 801365a:	f240 2281 	movw	r2, #641	; 0x281
 801365e:	496b      	ldr	r1, [pc, #428]	; (801380c <tcp_listen_input+0x1d0>)
 8013660:	486b      	ldr	r0, [pc, #428]	; (8013810 <tcp_listen_input+0x1d4>)
 8013662:	f006 fc49 	bl	8019ef8 <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 8013666:	4b67      	ldr	r3, [pc, #412]	; (8013804 <tcp_listen_input+0x1c8>)
 8013668:	781b      	ldrb	r3, [r3, #0]
 801366a:	f003 0310 	and.w	r3, r3, #16
 801366e:	2b00      	cmp	r3, #0
 8013670:	d019      	beq.n	80136a6 <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8013672:	4b68      	ldr	r3, [pc, #416]	; (8013814 <tcp_listen_input+0x1d8>)
 8013674:	6819      	ldr	r1, [r3, #0]
 8013676:	4b68      	ldr	r3, [pc, #416]	; (8013818 <tcp_listen_input+0x1dc>)
 8013678:	881b      	ldrh	r3, [r3, #0]
 801367a:	461a      	mov	r2, r3
 801367c:	4b67      	ldr	r3, [pc, #412]	; (801381c <tcp_listen_input+0x1e0>)
 801367e:	681b      	ldr	r3, [r3, #0]
 8013680:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8013682:	4b67      	ldr	r3, [pc, #412]	; (8013820 <tcp_listen_input+0x1e4>)
 8013684:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8013686:	885b      	ldrh	r3, [r3, #2]
 8013688:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801368a:	4a65      	ldr	r2, [pc, #404]	; (8013820 <tcp_listen_input+0x1e4>)
 801368c:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801368e:	8812      	ldrh	r2, [r2, #0]
 8013690:	b292      	uxth	r2, r2
 8013692:	9202      	str	r2, [sp, #8]
 8013694:	9301      	str	r3, [sp, #4]
 8013696:	4b63      	ldr	r3, [pc, #396]	; (8013824 <tcp_listen_input+0x1e8>)
 8013698:	9300      	str	r3, [sp, #0]
 801369a:	4b63      	ldr	r3, [pc, #396]	; (8013828 <tcp_listen_input+0x1ec>)
 801369c:	4602      	mov	r2, r0
 801369e:	6878      	ldr	r0, [r7, #4]
 80136a0:	f002 ff80 	bl	80165a4 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 80136a4:	e0a9      	b.n	80137fa <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 80136a6:	4b57      	ldr	r3, [pc, #348]	; (8013804 <tcp_listen_input+0x1c8>)
 80136a8:	781b      	ldrb	r3, [r3, #0]
 80136aa:	f003 0302 	and.w	r3, r3, #2
 80136ae:	2b00      	cmp	r3, #0
 80136b0:	f000 80a3 	beq.w	80137fa <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 80136b4:	687b      	ldr	r3, [r7, #4]
 80136b6:	7d5b      	ldrb	r3, [r3, #21]
 80136b8:	4618      	mov	r0, r3
 80136ba:	f7ff f927 	bl	801290c <tcp_alloc>
 80136be:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 80136c0:	697b      	ldr	r3, [r7, #20]
 80136c2:	2b00      	cmp	r3, #0
 80136c4:	d111      	bne.n	80136ea <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 80136c6:	687b      	ldr	r3, [r7, #4]
 80136c8:	699b      	ldr	r3, [r3, #24]
 80136ca:	2b00      	cmp	r3, #0
 80136cc:	d00a      	beq.n	80136e4 <tcp_listen_input+0xa8>
 80136ce:	687b      	ldr	r3, [r7, #4]
 80136d0:	699b      	ldr	r3, [r3, #24]
 80136d2:	687a      	ldr	r2, [r7, #4]
 80136d4:	6910      	ldr	r0, [r2, #16]
 80136d6:	f04f 32ff 	mov.w	r2, #4294967295
 80136da:	2100      	movs	r1, #0
 80136dc:	4798      	blx	r3
 80136de:	4603      	mov	r3, r0
 80136e0:	73bb      	strb	r3, [r7, #14]
      return;
 80136e2:	e08b      	b.n	80137fc <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 80136e4:	23f0      	movs	r3, #240	; 0xf0
 80136e6:	73bb      	strb	r3, [r7, #14]
      return;
 80136e8:	e088      	b.n	80137fc <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 80136ea:	4b50      	ldr	r3, [pc, #320]	; (801382c <tcp_listen_input+0x1f0>)
 80136ec:	695a      	ldr	r2, [r3, #20]
 80136ee:	697b      	ldr	r3, [r7, #20]
 80136f0:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 80136f2:	4b4e      	ldr	r3, [pc, #312]	; (801382c <tcp_listen_input+0x1f0>)
 80136f4:	691a      	ldr	r2, [r3, #16]
 80136f6:	697b      	ldr	r3, [r7, #20]
 80136f8:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 80136fa:	687b      	ldr	r3, [r7, #4]
 80136fc:	8ada      	ldrh	r2, [r3, #22]
 80136fe:	697b      	ldr	r3, [r7, #20]
 8013700:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 8013702:	4b47      	ldr	r3, [pc, #284]	; (8013820 <tcp_listen_input+0x1e4>)
 8013704:	681b      	ldr	r3, [r3, #0]
 8013706:	881b      	ldrh	r3, [r3, #0]
 8013708:	b29a      	uxth	r2, r3
 801370a:	697b      	ldr	r3, [r7, #20]
 801370c:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 801370e:	697b      	ldr	r3, [r7, #20]
 8013710:	2203      	movs	r2, #3
 8013712:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 8013714:	4b41      	ldr	r3, [pc, #260]	; (801381c <tcp_listen_input+0x1e0>)
 8013716:	681b      	ldr	r3, [r3, #0]
 8013718:	1c5a      	adds	r2, r3, #1
 801371a:	697b      	ldr	r3, [r7, #20]
 801371c:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 801371e:	697b      	ldr	r3, [r7, #20]
 8013720:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8013722:	697b      	ldr	r3, [r7, #20]
 8013724:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 8013726:	6978      	ldr	r0, [r7, #20]
 8013728:	f7ff fa58 	bl	8012bdc <tcp_next_iss>
 801372c:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 801372e:	697b      	ldr	r3, [r7, #20]
 8013730:	693a      	ldr	r2, [r7, #16]
 8013732:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_nxt = iss;
 8013734:	697b      	ldr	r3, [r7, #20]
 8013736:	693a      	ldr	r2, [r7, #16]
 8013738:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->lastack = iss;
 801373a:	697b      	ldr	r3, [r7, #20]
 801373c:	693a      	ldr	r2, [r7, #16]
 801373e:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 8013740:	697b      	ldr	r3, [r7, #20]
 8013742:	693a      	ldr	r2, [r7, #16]
 8013744:	65da      	str	r2, [r3, #92]	; 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 8013746:	4b35      	ldr	r3, [pc, #212]	; (801381c <tcp_listen_input+0x1e0>)
 8013748:	681b      	ldr	r3, [r3, #0]
 801374a:	1e5a      	subs	r2, r3, #1
 801374c:	697b      	ldr	r3, [r7, #20]
 801374e:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 8013750:	687b      	ldr	r3, [r7, #4]
 8013752:	691a      	ldr	r2, [r3, #16]
 8013754:	697b      	ldr	r3, [r7, #20]
 8013756:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 8013758:	697b      	ldr	r3, [r7, #20]
 801375a:	687a      	ldr	r2, [r7, #4]
 801375c:	67da      	str	r2, [r3, #124]	; 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 801375e:	687b      	ldr	r3, [r7, #4]
 8013760:	7a5b      	ldrb	r3, [r3, #9]
 8013762:	f003 030c 	and.w	r3, r3, #12
 8013766:	b2da      	uxtb	r2, r3
 8013768:	697b      	ldr	r3, [r7, #20]
 801376a:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 801376c:	687b      	ldr	r3, [r7, #4]
 801376e:	7a1a      	ldrb	r2, [r3, #8]
 8013770:	697b      	ldr	r3, [r7, #20]
 8013772:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 8013774:	4b2e      	ldr	r3, [pc, #184]	; (8013830 <tcp_listen_input+0x1f4>)
 8013776:	681a      	ldr	r2, [r3, #0]
 8013778:	697b      	ldr	r3, [r7, #20]
 801377a:	60da      	str	r2, [r3, #12]
 801377c:	4a2c      	ldr	r2, [pc, #176]	; (8013830 <tcp_listen_input+0x1f4>)
 801377e:	697b      	ldr	r3, [r7, #20]
 8013780:	6013      	str	r3, [r2, #0]
 8013782:	f003 f8d1 	bl	8016928 <tcp_timer_needed>
 8013786:	4b2b      	ldr	r3, [pc, #172]	; (8013834 <tcp_listen_input+0x1f8>)
 8013788:	2201      	movs	r2, #1
 801378a:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 801378c:	6978      	ldr	r0, [r7, #20]
 801378e:	f001 fd8f 	bl	80152b0 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 8013792:	4b23      	ldr	r3, [pc, #140]	; (8013820 <tcp_listen_input+0x1e4>)
 8013794:	681b      	ldr	r3, [r3, #0]
 8013796:	89db      	ldrh	r3, [r3, #14]
 8013798:	b29a      	uxth	r2, r3
 801379a:	697b      	ldr	r3, [r7, #20]
 801379c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 80137a0:	697b      	ldr	r3, [r7, #20]
 80137a2:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 80137a6:	697b      	ldr	r3, [r7, #20]
 80137a8:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 80137ac:	697b      	ldr	r3, [r7, #20]
 80137ae:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 80137b0:	697b      	ldr	r3, [r7, #20]
 80137b2:	3304      	adds	r3, #4
 80137b4:	4618      	mov	r0, r3
 80137b6:	f004 fc79 	bl	80180ac <ip4_route>
 80137ba:	4601      	mov	r1, r0
 80137bc:	697b      	ldr	r3, [r7, #20]
 80137be:	3304      	adds	r3, #4
 80137c0:	461a      	mov	r2, r3
 80137c2:	4620      	mov	r0, r4
 80137c4:	f7ff fa30 	bl	8012c28 <tcp_eff_send_mss_netif>
 80137c8:	4603      	mov	r3, r0
 80137ca:	461a      	mov	r2, r3
 80137cc:	697b      	ldr	r3, [r7, #20]
 80137ce:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 80137d0:	2112      	movs	r1, #18
 80137d2:	6978      	ldr	r0, [r7, #20]
 80137d4:	f002 f844 	bl	8015860 <tcp_enqueue_flags>
 80137d8:	4603      	mov	r3, r0
 80137da:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 80137dc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80137e0:	2b00      	cmp	r3, #0
 80137e2:	d004      	beq.n	80137ee <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 80137e4:	2100      	movs	r1, #0
 80137e6:	6978      	ldr	r0, [r7, #20]
 80137e8:	f7fe f97a 	bl	8011ae0 <tcp_abandon>
      return;
 80137ec:	e006      	b.n	80137fc <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 80137ee:	6978      	ldr	r0, [r7, #20]
 80137f0:	f002 f924 	bl	8015a3c <tcp_output>
  return;
 80137f4:	e001      	b.n	80137fa <tcp_listen_input+0x1be>
    return;
 80137f6:	bf00      	nop
 80137f8:	e000      	b.n	80137fc <tcp_listen_input+0x1c0>
  return;
 80137fa:	bf00      	nop
}
 80137fc:	371c      	adds	r7, #28
 80137fe:	46bd      	mov	sp, r7
 8013800:	bd90      	pop	{r4, r7, pc}
 8013802:	bf00      	nop
 8013804:	20007118 	.word	0x20007118
 8013808:	0801dc80 	.word	0x0801dc80
 801380c:	0801de78 	.word	0x0801de78
 8013810:	0801dccc 	.word	0x0801dccc
 8013814:	20007110 	.word	0x20007110
 8013818:	20007116 	.word	0x20007116
 801381c:	2000710c 	.word	0x2000710c
 8013820:	200070fc 	.word	0x200070fc
 8013824:	20000808 	.word	0x20000808
 8013828:	2000080c 	.word	0x2000080c
 801382c:	200007f8 	.word	0x200007f8
 8013830:	200070e0 	.word	0x200070e0
 8013834:	200070e8 	.word	0x200070e8

08013838 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 8013838:	b580      	push	{r7, lr}
 801383a:	b086      	sub	sp, #24
 801383c:	af04      	add	r7, sp, #16
 801383e:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 8013840:	4b2f      	ldr	r3, [pc, #188]	; (8013900 <tcp_timewait_input+0xc8>)
 8013842:	781b      	ldrb	r3, [r3, #0]
 8013844:	f003 0304 	and.w	r3, r3, #4
 8013848:	2b00      	cmp	r3, #0
 801384a:	d153      	bne.n	80138f4 <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 801384c:	687b      	ldr	r3, [r7, #4]
 801384e:	2b00      	cmp	r3, #0
 8013850:	d106      	bne.n	8013860 <tcp_timewait_input+0x28>
 8013852:	4b2c      	ldr	r3, [pc, #176]	; (8013904 <tcp_timewait_input+0xcc>)
 8013854:	f240 22ee 	movw	r2, #750	; 0x2ee
 8013858:	492b      	ldr	r1, [pc, #172]	; (8013908 <tcp_timewait_input+0xd0>)
 801385a:	482c      	ldr	r0, [pc, #176]	; (801390c <tcp_timewait_input+0xd4>)
 801385c:	f006 fb4c 	bl	8019ef8 <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 8013860:	4b27      	ldr	r3, [pc, #156]	; (8013900 <tcp_timewait_input+0xc8>)
 8013862:	781b      	ldrb	r3, [r3, #0]
 8013864:	f003 0302 	and.w	r3, r3, #2
 8013868:	2b00      	cmp	r3, #0
 801386a:	d02a      	beq.n	80138c2 <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 801386c:	4b28      	ldr	r3, [pc, #160]	; (8013910 <tcp_timewait_input+0xd8>)
 801386e:	681a      	ldr	r2, [r3, #0]
 8013870:	687b      	ldr	r3, [r7, #4]
 8013872:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013874:	1ad3      	subs	r3, r2, r3
 8013876:	2b00      	cmp	r3, #0
 8013878:	db2d      	blt.n	80138d6 <tcp_timewait_input+0x9e>
 801387a:	4b25      	ldr	r3, [pc, #148]	; (8013910 <tcp_timewait_input+0xd8>)
 801387c:	681a      	ldr	r2, [r3, #0]
 801387e:	687b      	ldr	r3, [r7, #4]
 8013880:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013882:	6879      	ldr	r1, [r7, #4]
 8013884:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8013886:	440b      	add	r3, r1
 8013888:	1ad3      	subs	r3, r2, r3
 801388a:	2b00      	cmp	r3, #0
 801388c:	dc23      	bgt.n	80138d6 <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801388e:	4b21      	ldr	r3, [pc, #132]	; (8013914 <tcp_timewait_input+0xdc>)
 8013890:	6819      	ldr	r1, [r3, #0]
 8013892:	4b21      	ldr	r3, [pc, #132]	; (8013918 <tcp_timewait_input+0xe0>)
 8013894:	881b      	ldrh	r3, [r3, #0]
 8013896:	461a      	mov	r2, r3
 8013898:	4b1d      	ldr	r3, [pc, #116]	; (8013910 <tcp_timewait_input+0xd8>)
 801389a:	681b      	ldr	r3, [r3, #0]
 801389c:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801389e:	4b1f      	ldr	r3, [pc, #124]	; (801391c <tcp_timewait_input+0xe4>)
 80138a0:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80138a2:	885b      	ldrh	r3, [r3, #2]
 80138a4:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80138a6:	4a1d      	ldr	r2, [pc, #116]	; (801391c <tcp_timewait_input+0xe4>)
 80138a8:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80138aa:	8812      	ldrh	r2, [r2, #0]
 80138ac:	b292      	uxth	r2, r2
 80138ae:	9202      	str	r2, [sp, #8]
 80138b0:	9301      	str	r3, [sp, #4]
 80138b2:	4b1b      	ldr	r3, [pc, #108]	; (8013920 <tcp_timewait_input+0xe8>)
 80138b4:	9300      	str	r3, [sp, #0]
 80138b6:	4b1b      	ldr	r3, [pc, #108]	; (8013924 <tcp_timewait_input+0xec>)
 80138b8:	4602      	mov	r2, r0
 80138ba:	6878      	ldr	r0, [r7, #4]
 80138bc:	f002 fe72 	bl	80165a4 <tcp_rst>
      return;
 80138c0:	e01b      	b.n	80138fa <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 80138c2:	4b0f      	ldr	r3, [pc, #60]	; (8013900 <tcp_timewait_input+0xc8>)
 80138c4:	781b      	ldrb	r3, [r3, #0]
 80138c6:	f003 0301 	and.w	r3, r3, #1
 80138ca:	2b00      	cmp	r3, #0
 80138cc:	d003      	beq.n	80138d6 <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 80138ce:	4b16      	ldr	r3, [pc, #88]	; (8013928 <tcp_timewait_input+0xf0>)
 80138d0:	681a      	ldr	r2, [r3, #0]
 80138d2:	687b      	ldr	r3, [r7, #4]
 80138d4:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 80138d6:	4b10      	ldr	r3, [pc, #64]	; (8013918 <tcp_timewait_input+0xe0>)
 80138d8:	881b      	ldrh	r3, [r3, #0]
 80138da:	2b00      	cmp	r3, #0
 80138dc:	d00c      	beq.n	80138f8 <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 80138de:	687b      	ldr	r3, [r7, #4]
 80138e0:	8b5b      	ldrh	r3, [r3, #26]
 80138e2:	f043 0302 	orr.w	r3, r3, #2
 80138e6:	b29a      	uxth	r2, r3
 80138e8:	687b      	ldr	r3, [r7, #4]
 80138ea:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 80138ec:	6878      	ldr	r0, [r7, #4]
 80138ee:	f002 f8a5 	bl	8015a3c <tcp_output>
  }
  return;
 80138f2:	e001      	b.n	80138f8 <tcp_timewait_input+0xc0>
    return;
 80138f4:	bf00      	nop
 80138f6:	e000      	b.n	80138fa <tcp_timewait_input+0xc2>
  return;
 80138f8:	bf00      	nop
}
 80138fa:	3708      	adds	r7, #8
 80138fc:	46bd      	mov	sp, r7
 80138fe:	bd80      	pop	{r7, pc}
 8013900:	20007118 	.word	0x20007118
 8013904:	0801dc80 	.word	0x0801dc80
 8013908:	0801de98 	.word	0x0801de98
 801390c:	0801dccc 	.word	0x0801dccc
 8013910:	2000710c 	.word	0x2000710c
 8013914:	20007110 	.word	0x20007110
 8013918:	20007116 	.word	0x20007116
 801391c:	200070fc 	.word	0x200070fc
 8013920:	20000808 	.word	0x20000808
 8013924:	2000080c 	.word	0x2000080c
 8013928:	200070d4 	.word	0x200070d4

0801392c <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 801392c:	b590      	push	{r4, r7, lr}
 801392e:	b08d      	sub	sp, #52	; 0x34
 8013930:	af04      	add	r7, sp, #16
 8013932:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 8013934:	2300      	movs	r3, #0
 8013936:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 8013938:	2300      	movs	r3, #0
 801393a:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 801393c:	687b      	ldr	r3, [r7, #4]
 801393e:	2b00      	cmp	r3, #0
 8013940:	d106      	bne.n	8013950 <tcp_process+0x24>
 8013942:	4b9d      	ldr	r3, [pc, #628]	; (8013bb8 <tcp_process+0x28c>)
 8013944:	f44f 7247 	mov.w	r2, #796	; 0x31c
 8013948:	499c      	ldr	r1, [pc, #624]	; (8013bbc <tcp_process+0x290>)
 801394a:	489d      	ldr	r0, [pc, #628]	; (8013bc0 <tcp_process+0x294>)
 801394c:	f006 fad4 	bl	8019ef8 <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 8013950:	4b9c      	ldr	r3, [pc, #624]	; (8013bc4 <tcp_process+0x298>)
 8013952:	781b      	ldrb	r3, [r3, #0]
 8013954:	f003 0304 	and.w	r3, r3, #4
 8013958:	2b00      	cmp	r3, #0
 801395a:	d04e      	beq.n	80139fa <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 801395c:	687b      	ldr	r3, [r7, #4]
 801395e:	7d1b      	ldrb	r3, [r3, #20]
 8013960:	2b02      	cmp	r3, #2
 8013962:	d108      	bne.n	8013976 <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 8013964:	687b      	ldr	r3, [r7, #4]
 8013966:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8013968:	4b97      	ldr	r3, [pc, #604]	; (8013bc8 <tcp_process+0x29c>)
 801396a:	681b      	ldr	r3, [r3, #0]
 801396c:	429a      	cmp	r2, r3
 801396e:	d123      	bne.n	80139b8 <tcp_process+0x8c>
        acceptable = 1;
 8013970:	2301      	movs	r3, #1
 8013972:	76fb      	strb	r3, [r7, #27]
 8013974:	e020      	b.n	80139b8 <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 8013976:	687b      	ldr	r3, [r7, #4]
 8013978:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801397a:	4b94      	ldr	r3, [pc, #592]	; (8013bcc <tcp_process+0x2a0>)
 801397c:	681b      	ldr	r3, [r3, #0]
 801397e:	429a      	cmp	r2, r3
 8013980:	d102      	bne.n	8013988 <tcp_process+0x5c>
        acceptable = 1;
 8013982:	2301      	movs	r3, #1
 8013984:	76fb      	strb	r3, [r7, #27]
 8013986:	e017      	b.n	80139b8 <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8013988:	4b90      	ldr	r3, [pc, #576]	; (8013bcc <tcp_process+0x2a0>)
 801398a:	681a      	ldr	r2, [r3, #0]
 801398c:	687b      	ldr	r3, [r7, #4]
 801398e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013990:	1ad3      	subs	r3, r2, r3
 8013992:	2b00      	cmp	r3, #0
 8013994:	db10      	blt.n	80139b8 <tcp_process+0x8c>
 8013996:	4b8d      	ldr	r3, [pc, #564]	; (8013bcc <tcp_process+0x2a0>)
 8013998:	681a      	ldr	r2, [r3, #0]
 801399a:	687b      	ldr	r3, [r7, #4]
 801399c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801399e:	6879      	ldr	r1, [r7, #4]
 80139a0:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 80139a2:	440b      	add	r3, r1
 80139a4:	1ad3      	subs	r3, r2, r3
 80139a6:	2b00      	cmp	r3, #0
 80139a8:	dc06      	bgt.n	80139b8 <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 80139aa:	687b      	ldr	r3, [r7, #4]
 80139ac:	8b5b      	ldrh	r3, [r3, #26]
 80139ae:	f043 0302 	orr.w	r3, r3, #2
 80139b2:	b29a      	uxth	r2, r3
 80139b4:	687b      	ldr	r3, [r7, #4]
 80139b6:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 80139b8:	7efb      	ldrb	r3, [r7, #27]
 80139ba:	2b00      	cmp	r3, #0
 80139bc:	d01b      	beq.n	80139f6 <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 80139be:	687b      	ldr	r3, [r7, #4]
 80139c0:	7d1b      	ldrb	r3, [r3, #20]
 80139c2:	2b00      	cmp	r3, #0
 80139c4:	d106      	bne.n	80139d4 <tcp_process+0xa8>
 80139c6:	4b7c      	ldr	r3, [pc, #496]	; (8013bb8 <tcp_process+0x28c>)
 80139c8:	f44f 724e 	mov.w	r2, #824	; 0x338
 80139cc:	4980      	ldr	r1, [pc, #512]	; (8013bd0 <tcp_process+0x2a4>)
 80139ce:	487c      	ldr	r0, [pc, #496]	; (8013bc0 <tcp_process+0x294>)
 80139d0:	f006 fa92 	bl	8019ef8 <iprintf>
      recv_flags |= TF_RESET;
 80139d4:	4b7f      	ldr	r3, [pc, #508]	; (8013bd4 <tcp_process+0x2a8>)
 80139d6:	781b      	ldrb	r3, [r3, #0]
 80139d8:	f043 0308 	orr.w	r3, r3, #8
 80139dc:	b2da      	uxtb	r2, r3
 80139de:	4b7d      	ldr	r3, [pc, #500]	; (8013bd4 <tcp_process+0x2a8>)
 80139e0:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 80139e2:	687b      	ldr	r3, [r7, #4]
 80139e4:	8b5b      	ldrh	r3, [r3, #26]
 80139e6:	f023 0301 	bic.w	r3, r3, #1
 80139ea:	b29a      	uxth	r2, r3
 80139ec:	687b      	ldr	r3, [r7, #4]
 80139ee:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 80139f0:	f06f 030d 	mvn.w	r3, #13
 80139f4:	e37a      	b.n	80140ec <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 80139f6:	2300      	movs	r3, #0
 80139f8:	e378      	b.n	80140ec <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 80139fa:	4b72      	ldr	r3, [pc, #456]	; (8013bc4 <tcp_process+0x298>)
 80139fc:	781b      	ldrb	r3, [r3, #0]
 80139fe:	f003 0302 	and.w	r3, r3, #2
 8013a02:	2b00      	cmp	r3, #0
 8013a04:	d010      	beq.n	8013a28 <tcp_process+0xfc>
 8013a06:	687b      	ldr	r3, [r7, #4]
 8013a08:	7d1b      	ldrb	r3, [r3, #20]
 8013a0a:	2b02      	cmp	r3, #2
 8013a0c:	d00c      	beq.n	8013a28 <tcp_process+0xfc>
 8013a0e:	687b      	ldr	r3, [r7, #4]
 8013a10:	7d1b      	ldrb	r3, [r3, #20]
 8013a12:	2b03      	cmp	r3, #3
 8013a14:	d008      	beq.n	8013a28 <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 8013a16:	687b      	ldr	r3, [r7, #4]
 8013a18:	8b5b      	ldrh	r3, [r3, #26]
 8013a1a:	f043 0302 	orr.w	r3, r3, #2
 8013a1e:	b29a      	uxth	r2, r3
 8013a20:	687b      	ldr	r3, [r7, #4]
 8013a22:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 8013a24:	2300      	movs	r3, #0
 8013a26:	e361      	b.n	80140ec <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 8013a28:	687b      	ldr	r3, [r7, #4]
 8013a2a:	8b5b      	ldrh	r3, [r3, #26]
 8013a2c:	f003 0310 	and.w	r3, r3, #16
 8013a30:	2b00      	cmp	r3, #0
 8013a32:	d103      	bne.n	8013a3c <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 8013a34:	4b68      	ldr	r3, [pc, #416]	; (8013bd8 <tcp_process+0x2ac>)
 8013a36:	681a      	ldr	r2, [r3, #0]
 8013a38:	687b      	ldr	r3, [r7, #4]
 8013a3a:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 8013a3c:	687b      	ldr	r3, [r7, #4]
 8013a3e:	2200      	movs	r2, #0
 8013a40:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
  pcb->persist_probe = 0;
 8013a44:	687b      	ldr	r3, [r7, #4]
 8013a46:	2200      	movs	r2, #0
 8013a48:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a

  tcp_parseopt(pcb);
 8013a4c:	6878      	ldr	r0, [r7, #4]
 8013a4e:	f001 fc2f 	bl	80152b0 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 8013a52:	687b      	ldr	r3, [r7, #4]
 8013a54:	7d1b      	ldrb	r3, [r3, #20]
 8013a56:	3b02      	subs	r3, #2
 8013a58:	2b07      	cmp	r3, #7
 8013a5a:	f200 8337 	bhi.w	80140cc <tcp_process+0x7a0>
 8013a5e:	a201      	add	r2, pc, #4	; (adr r2, 8013a64 <tcp_process+0x138>)
 8013a60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013a64:	08013a85 	.word	0x08013a85
 8013a68:	08013cb5 	.word	0x08013cb5
 8013a6c:	08013e2d 	.word	0x08013e2d
 8013a70:	08013e57 	.word	0x08013e57
 8013a74:	08013f7b 	.word	0x08013f7b
 8013a78:	08013e2d 	.word	0x08013e2d
 8013a7c:	08014007 	.word	0x08014007
 8013a80:	08014097 	.word	0x08014097
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 8013a84:	4b4f      	ldr	r3, [pc, #316]	; (8013bc4 <tcp_process+0x298>)
 8013a86:	781b      	ldrb	r3, [r3, #0]
 8013a88:	f003 0310 	and.w	r3, r3, #16
 8013a8c:	2b00      	cmp	r3, #0
 8013a8e:	f000 80e4 	beq.w	8013c5a <tcp_process+0x32e>
 8013a92:	4b4c      	ldr	r3, [pc, #304]	; (8013bc4 <tcp_process+0x298>)
 8013a94:	781b      	ldrb	r3, [r3, #0]
 8013a96:	f003 0302 	and.w	r3, r3, #2
 8013a9a:	2b00      	cmp	r3, #0
 8013a9c:	f000 80dd 	beq.w	8013c5a <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 8013aa0:	687b      	ldr	r3, [r7, #4]
 8013aa2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8013aa4:	1c5a      	adds	r2, r3, #1
 8013aa6:	4b48      	ldr	r3, [pc, #288]	; (8013bc8 <tcp_process+0x29c>)
 8013aa8:	681b      	ldr	r3, [r3, #0]
 8013aaa:	429a      	cmp	r2, r3
 8013aac:	f040 80d5 	bne.w	8013c5a <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 8013ab0:	4b46      	ldr	r3, [pc, #280]	; (8013bcc <tcp_process+0x2a0>)
 8013ab2:	681b      	ldr	r3, [r3, #0]
 8013ab4:	1c5a      	adds	r2, r3, #1
 8013ab6:	687b      	ldr	r3, [r7, #4]
 8013ab8:	625a      	str	r2, [r3, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 8013aba:	687b      	ldr	r3, [r7, #4]
 8013abc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8013abe:	687b      	ldr	r3, [r7, #4]
 8013ac0:	62da      	str	r2, [r3, #44]	; 0x2c
        pcb->lastack = ackno;
 8013ac2:	4b41      	ldr	r3, [pc, #260]	; (8013bc8 <tcp_process+0x29c>)
 8013ac4:	681a      	ldr	r2, [r3, #0]
 8013ac6:	687b      	ldr	r3, [r7, #4]
 8013ac8:	645a      	str	r2, [r3, #68]	; 0x44
        pcb->snd_wnd = tcphdr->wnd;
 8013aca:	4b44      	ldr	r3, [pc, #272]	; (8013bdc <tcp_process+0x2b0>)
 8013acc:	681b      	ldr	r3, [r3, #0]
 8013ace:	89db      	ldrh	r3, [r3, #14]
 8013ad0:	b29a      	uxth	r2, r3
 8013ad2:	687b      	ldr	r3, [r7, #4]
 8013ad4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 8013ad8:	687b      	ldr	r3, [r7, #4]
 8013ada:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8013ade:	687b      	ldr	r3, [r7, #4]
 8013ae0:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 8013ae4:	4b39      	ldr	r3, [pc, #228]	; (8013bcc <tcp_process+0x2a0>)
 8013ae6:	681b      	ldr	r3, [r3, #0]
 8013ae8:	1e5a      	subs	r2, r3, #1
 8013aea:	687b      	ldr	r3, [r7, #4]
 8013aec:	655a      	str	r2, [r3, #84]	; 0x54
        pcb->state = ESTABLISHED;
 8013aee:	687b      	ldr	r3, [r7, #4]
 8013af0:	2204      	movs	r2, #4
 8013af2:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 8013af4:	687b      	ldr	r3, [r7, #4]
 8013af6:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 8013af8:	687b      	ldr	r3, [r7, #4]
 8013afa:	3304      	adds	r3, #4
 8013afc:	4618      	mov	r0, r3
 8013afe:	f004 fad5 	bl	80180ac <ip4_route>
 8013b02:	4601      	mov	r1, r0
 8013b04:	687b      	ldr	r3, [r7, #4]
 8013b06:	3304      	adds	r3, #4
 8013b08:	461a      	mov	r2, r3
 8013b0a:	4620      	mov	r0, r4
 8013b0c:	f7ff f88c 	bl	8012c28 <tcp_eff_send_mss_netif>
 8013b10:	4603      	mov	r3, r0
 8013b12:	461a      	mov	r2, r3
 8013b14:	687b      	ldr	r3, [r7, #4]
 8013b16:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8013b18:	687b      	ldr	r3, [r7, #4]
 8013b1a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8013b1c:	009a      	lsls	r2, r3, #2
 8013b1e:	687b      	ldr	r3, [r7, #4]
 8013b20:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8013b22:	005b      	lsls	r3, r3, #1
 8013b24:	f241 111c 	movw	r1, #4380	; 0x111c
 8013b28:	428b      	cmp	r3, r1
 8013b2a:	bf38      	it	cc
 8013b2c:	460b      	movcc	r3, r1
 8013b2e:	429a      	cmp	r2, r3
 8013b30:	d204      	bcs.n	8013b3c <tcp_process+0x210>
 8013b32:	687b      	ldr	r3, [r7, #4]
 8013b34:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8013b36:	009b      	lsls	r3, r3, #2
 8013b38:	b29b      	uxth	r3, r3
 8013b3a:	e00d      	b.n	8013b58 <tcp_process+0x22c>
 8013b3c:	687b      	ldr	r3, [r7, #4]
 8013b3e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8013b40:	005b      	lsls	r3, r3, #1
 8013b42:	f241 121c 	movw	r2, #4380	; 0x111c
 8013b46:	4293      	cmp	r3, r2
 8013b48:	d904      	bls.n	8013b54 <tcp_process+0x228>
 8013b4a:	687b      	ldr	r3, [r7, #4]
 8013b4c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8013b4e:	005b      	lsls	r3, r3, #1
 8013b50:	b29b      	uxth	r3, r3
 8013b52:	e001      	b.n	8013b58 <tcp_process+0x22c>
 8013b54:	f241 131c 	movw	r3, #4380	; 0x111c
 8013b58:	687a      	ldr	r2, [r7, #4]
 8013b5a:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 8013b5e:	687b      	ldr	r3, [r7, #4]
 8013b60:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8013b64:	2b00      	cmp	r3, #0
 8013b66:	d106      	bne.n	8013b76 <tcp_process+0x24a>
 8013b68:	4b13      	ldr	r3, [pc, #76]	; (8013bb8 <tcp_process+0x28c>)
 8013b6a:	f44f 725b 	mov.w	r2, #876	; 0x36c
 8013b6e:	491c      	ldr	r1, [pc, #112]	; (8013be0 <tcp_process+0x2b4>)
 8013b70:	4813      	ldr	r0, [pc, #76]	; (8013bc0 <tcp_process+0x294>)
 8013b72:	f006 f9c1 	bl	8019ef8 <iprintf>
        --pcb->snd_queuelen;
 8013b76:	687b      	ldr	r3, [r7, #4]
 8013b78:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8013b7c:	3b01      	subs	r3, #1
 8013b7e:	b29a      	uxth	r2, r3
 8013b80:	687b      	ldr	r3, [r7, #4]
 8013b82:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 8013b86:	687b      	ldr	r3, [r7, #4]
 8013b88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013b8a:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 8013b8c:	69fb      	ldr	r3, [r7, #28]
 8013b8e:	2b00      	cmp	r3, #0
 8013b90:	d12a      	bne.n	8013be8 <tcp_process+0x2bc>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 8013b92:	687b      	ldr	r3, [r7, #4]
 8013b94:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013b96:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 8013b98:	69fb      	ldr	r3, [r7, #28]
 8013b9a:	2b00      	cmp	r3, #0
 8013b9c:	d106      	bne.n	8013bac <tcp_process+0x280>
 8013b9e:	4b06      	ldr	r3, [pc, #24]	; (8013bb8 <tcp_process+0x28c>)
 8013ba0:	f44f 725d 	mov.w	r2, #884	; 0x374
 8013ba4:	490f      	ldr	r1, [pc, #60]	; (8013be4 <tcp_process+0x2b8>)
 8013ba6:	4806      	ldr	r0, [pc, #24]	; (8013bc0 <tcp_process+0x294>)
 8013ba8:	f006 f9a6 	bl	8019ef8 <iprintf>
          pcb->unsent = rseg->next;
 8013bac:	69fb      	ldr	r3, [r7, #28]
 8013bae:	681a      	ldr	r2, [r3, #0]
 8013bb0:	687b      	ldr	r3, [r7, #4]
 8013bb2:	66da      	str	r2, [r3, #108]	; 0x6c
 8013bb4:	e01c      	b.n	8013bf0 <tcp_process+0x2c4>
 8013bb6:	bf00      	nop
 8013bb8:	0801dc80 	.word	0x0801dc80
 8013bbc:	0801deb8 	.word	0x0801deb8
 8013bc0:	0801dccc 	.word	0x0801dccc
 8013bc4:	20007118 	.word	0x20007118
 8013bc8:	20007110 	.word	0x20007110
 8013bcc:	2000710c 	.word	0x2000710c
 8013bd0:	0801ded4 	.word	0x0801ded4
 8013bd4:	20007119 	.word	0x20007119
 8013bd8:	200070d4 	.word	0x200070d4
 8013bdc:	200070fc 	.word	0x200070fc
 8013be0:	0801def4 	.word	0x0801def4
 8013be4:	0801df0c 	.word	0x0801df0c
        } else {
          pcb->unacked = rseg->next;
 8013be8:	69fb      	ldr	r3, [r7, #28]
 8013bea:	681a      	ldr	r2, [r3, #0]
 8013bec:	687b      	ldr	r3, [r7, #4]
 8013bee:	671a      	str	r2, [r3, #112]	; 0x70
        }
        tcp_seg_free(rseg);
 8013bf0:	69f8      	ldr	r0, [r7, #28]
 8013bf2:	f7fe fd22 	bl	801263a <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 8013bf6:	687b      	ldr	r3, [r7, #4]
 8013bf8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013bfa:	2b00      	cmp	r3, #0
 8013bfc:	d104      	bne.n	8013c08 <tcp_process+0x2dc>
          pcb->rtime = -1;
 8013bfe:	687b      	ldr	r3, [r7, #4]
 8013c00:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8013c04:	861a      	strh	r2, [r3, #48]	; 0x30
 8013c06:	e006      	b.n	8013c16 <tcp_process+0x2ea>
        } else {
          pcb->rtime = 0;
 8013c08:	687b      	ldr	r3, [r7, #4]
 8013c0a:	2200      	movs	r2, #0
 8013c0c:	861a      	strh	r2, [r3, #48]	; 0x30
          pcb->nrtx = 0;
 8013c0e:	687b      	ldr	r3, [r7, #4]
 8013c10:	2200      	movs	r2, #0
 8013c12:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 8013c16:	687b      	ldr	r3, [r7, #4]
 8013c18:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8013c1c:	2b00      	cmp	r3, #0
 8013c1e:	d00a      	beq.n	8013c36 <tcp_process+0x30a>
 8013c20:	687b      	ldr	r3, [r7, #4]
 8013c22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8013c26:	687a      	ldr	r2, [r7, #4]
 8013c28:	6910      	ldr	r0, [r2, #16]
 8013c2a:	2200      	movs	r2, #0
 8013c2c:	6879      	ldr	r1, [r7, #4]
 8013c2e:	4798      	blx	r3
 8013c30:	4603      	mov	r3, r0
 8013c32:	76bb      	strb	r3, [r7, #26]
 8013c34:	e001      	b.n	8013c3a <tcp_process+0x30e>
 8013c36:	2300      	movs	r3, #0
 8013c38:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 8013c3a:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8013c3e:	f113 0f0d 	cmn.w	r3, #13
 8013c42:	d102      	bne.n	8013c4a <tcp_process+0x31e>
          return ERR_ABRT;
 8013c44:	f06f 030c 	mvn.w	r3, #12
 8013c48:	e250      	b.n	80140ec <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 8013c4a:	687b      	ldr	r3, [r7, #4]
 8013c4c:	8b5b      	ldrh	r3, [r3, #26]
 8013c4e:	f043 0302 	orr.w	r3, r3, #2
 8013c52:	b29a      	uxth	r2, r3
 8013c54:	687b      	ldr	r3, [r7, #4]
 8013c56:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 8013c58:	e23a      	b.n	80140d0 <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 8013c5a:	4b98      	ldr	r3, [pc, #608]	; (8013ebc <tcp_process+0x590>)
 8013c5c:	781b      	ldrb	r3, [r3, #0]
 8013c5e:	f003 0310 	and.w	r3, r3, #16
 8013c62:	2b00      	cmp	r3, #0
 8013c64:	f000 8234 	beq.w	80140d0 <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8013c68:	4b95      	ldr	r3, [pc, #596]	; (8013ec0 <tcp_process+0x594>)
 8013c6a:	6819      	ldr	r1, [r3, #0]
 8013c6c:	4b95      	ldr	r3, [pc, #596]	; (8013ec4 <tcp_process+0x598>)
 8013c6e:	881b      	ldrh	r3, [r3, #0]
 8013c70:	461a      	mov	r2, r3
 8013c72:	4b95      	ldr	r3, [pc, #596]	; (8013ec8 <tcp_process+0x59c>)
 8013c74:	681b      	ldr	r3, [r3, #0]
 8013c76:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8013c78:	4b94      	ldr	r3, [pc, #592]	; (8013ecc <tcp_process+0x5a0>)
 8013c7a:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8013c7c:	885b      	ldrh	r3, [r3, #2]
 8013c7e:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8013c80:	4a92      	ldr	r2, [pc, #584]	; (8013ecc <tcp_process+0x5a0>)
 8013c82:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8013c84:	8812      	ldrh	r2, [r2, #0]
 8013c86:	b292      	uxth	r2, r2
 8013c88:	9202      	str	r2, [sp, #8]
 8013c8a:	9301      	str	r3, [sp, #4]
 8013c8c:	4b90      	ldr	r3, [pc, #576]	; (8013ed0 <tcp_process+0x5a4>)
 8013c8e:	9300      	str	r3, [sp, #0]
 8013c90:	4b90      	ldr	r3, [pc, #576]	; (8013ed4 <tcp_process+0x5a8>)
 8013c92:	4602      	mov	r2, r0
 8013c94:	6878      	ldr	r0, [r7, #4]
 8013c96:	f002 fc85 	bl	80165a4 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 8013c9a:	687b      	ldr	r3, [r7, #4]
 8013c9c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8013ca0:	2b05      	cmp	r3, #5
 8013ca2:	f200 8215 	bhi.w	80140d0 <tcp_process+0x7a4>
          pcb->rtime = 0;
 8013ca6:	687b      	ldr	r3, [r7, #4]
 8013ca8:	2200      	movs	r2, #0
 8013caa:	861a      	strh	r2, [r3, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 8013cac:	6878      	ldr	r0, [r7, #4]
 8013cae:	f002 fa51 	bl	8016154 <tcp_rexmit_rto>
      break;
 8013cb2:	e20d      	b.n	80140d0 <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 8013cb4:	4b81      	ldr	r3, [pc, #516]	; (8013ebc <tcp_process+0x590>)
 8013cb6:	781b      	ldrb	r3, [r3, #0]
 8013cb8:	f003 0310 	and.w	r3, r3, #16
 8013cbc:	2b00      	cmp	r3, #0
 8013cbe:	f000 80a1 	beq.w	8013e04 <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8013cc2:	4b7f      	ldr	r3, [pc, #508]	; (8013ec0 <tcp_process+0x594>)
 8013cc4:	681a      	ldr	r2, [r3, #0]
 8013cc6:	687b      	ldr	r3, [r7, #4]
 8013cc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8013cca:	1ad3      	subs	r3, r2, r3
 8013ccc:	3b01      	subs	r3, #1
 8013cce:	2b00      	cmp	r3, #0
 8013cd0:	db7e      	blt.n	8013dd0 <tcp_process+0x4a4>
 8013cd2:	4b7b      	ldr	r3, [pc, #492]	; (8013ec0 <tcp_process+0x594>)
 8013cd4:	681a      	ldr	r2, [r3, #0]
 8013cd6:	687b      	ldr	r3, [r7, #4]
 8013cd8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8013cda:	1ad3      	subs	r3, r2, r3
 8013cdc:	2b00      	cmp	r3, #0
 8013cde:	dc77      	bgt.n	8013dd0 <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 8013ce0:	687b      	ldr	r3, [r7, #4]
 8013ce2:	2204      	movs	r2, #4
 8013ce4:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 8013ce6:	687b      	ldr	r3, [r7, #4]
 8013ce8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8013cea:	2b00      	cmp	r3, #0
 8013cec:	d102      	bne.n	8013cf4 <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 8013cee:	23fa      	movs	r3, #250	; 0xfa
 8013cf0:	76bb      	strb	r3, [r7, #26]
 8013cf2:	e01d      	b.n	8013d30 <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 8013cf4:	687b      	ldr	r3, [r7, #4]
 8013cf6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8013cf8:	699b      	ldr	r3, [r3, #24]
 8013cfa:	2b00      	cmp	r3, #0
 8013cfc:	d106      	bne.n	8013d0c <tcp_process+0x3e0>
 8013cfe:	4b76      	ldr	r3, [pc, #472]	; (8013ed8 <tcp_process+0x5ac>)
 8013d00:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 8013d04:	4975      	ldr	r1, [pc, #468]	; (8013edc <tcp_process+0x5b0>)
 8013d06:	4876      	ldr	r0, [pc, #472]	; (8013ee0 <tcp_process+0x5b4>)
 8013d08:	f006 f8f6 	bl	8019ef8 <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 8013d0c:	687b      	ldr	r3, [r7, #4]
 8013d0e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8013d10:	699b      	ldr	r3, [r3, #24]
 8013d12:	2b00      	cmp	r3, #0
 8013d14:	d00a      	beq.n	8013d2c <tcp_process+0x400>
 8013d16:	687b      	ldr	r3, [r7, #4]
 8013d18:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8013d1a:	699b      	ldr	r3, [r3, #24]
 8013d1c:	687a      	ldr	r2, [r7, #4]
 8013d1e:	6910      	ldr	r0, [r2, #16]
 8013d20:	2200      	movs	r2, #0
 8013d22:	6879      	ldr	r1, [r7, #4]
 8013d24:	4798      	blx	r3
 8013d26:	4603      	mov	r3, r0
 8013d28:	76bb      	strb	r3, [r7, #26]
 8013d2a:	e001      	b.n	8013d30 <tcp_process+0x404>
 8013d2c:	23f0      	movs	r3, #240	; 0xf0
 8013d2e:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 8013d30:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8013d34:	2b00      	cmp	r3, #0
 8013d36:	d00a      	beq.n	8013d4e <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 8013d38:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8013d3c:	f113 0f0d 	cmn.w	r3, #13
 8013d40:	d002      	beq.n	8013d48 <tcp_process+0x41c>
              tcp_abort(pcb);
 8013d42:	6878      	ldr	r0, [r7, #4]
 8013d44:	f7fd ff8a 	bl	8011c5c <tcp_abort>
            }
            return ERR_ABRT;
 8013d48:	f06f 030c 	mvn.w	r3, #12
 8013d4c:	e1ce      	b.n	80140ec <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 8013d4e:	6878      	ldr	r0, [r7, #4]
 8013d50:	f000 fae0 	bl	8014314 <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 8013d54:	4b63      	ldr	r3, [pc, #396]	; (8013ee4 <tcp_process+0x5b8>)
 8013d56:	881b      	ldrh	r3, [r3, #0]
 8013d58:	2b00      	cmp	r3, #0
 8013d5a:	d005      	beq.n	8013d68 <tcp_process+0x43c>
            recv_acked--;
 8013d5c:	4b61      	ldr	r3, [pc, #388]	; (8013ee4 <tcp_process+0x5b8>)
 8013d5e:	881b      	ldrh	r3, [r3, #0]
 8013d60:	3b01      	subs	r3, #1
 8013d62:	b29a      	uxth	r2, r3
 8013d64:	4b5f      	ldr	r3, [pc, #380]	; (8013ee4 <tcp_process+0x5b8>)
 8013d66:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8013d68:	687b      	ldr	r3, [r7, #4]
 8013d6a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8013d6c:	009a      	lsls	r2, r3, #2
 8013d6e:	687b      	ldr	r3, [r7, #4]
 8013d70:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8013d72:	005b      	lsls	r3, r3, #1
 8013d74:	f241 111c 	movw	r1, #4380	; 0x111c
 8013d78:	428b      	cmp	r3, r1
 8013d7a:	bf38      	it	cc
 8013d7c:	460b      	movcc	r3, r1
 8013d7e:	429a      	cmp	r2, r3
 8013d80:	d204      	bcs.n	8013d8c <tcp_process+0x460>
 8013d82:	687b      	ldr	r3, [r7, #4]
 8013d84:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8013d86:	009b      	lsls	r3, r3, #2
 8013d88:	b29b      	uxth	r3, r3
 8013d8a:	e00d      	b.n	8013da8 <tcp_process+0x47c>
 8013d8c:	687b      	ldr	r3, [r7, #4]
 8013d8e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8013d90:	005b      	lsls	r3, r3, #1
 8013d92:	f241 121c 	movw	r2, #4380	; 0x111c
 8013d96:	4293      	cmp	r3, r2
 8013d98:	d904      	bls.n	8013da4 <tcp_process+0x478>
 8013d9a:	687b      	ldr	r3, [r7, #4]
 8013d9c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8013d9e:	005b      	lsls	r3, r3, #1
 8013da0:	b29b      	uxth	r3, r3
 8013da2:	e001      	b.n	8013da8 <tcp_process+0x47c>
 8013da4:	f241 131c 	movw	r3, #4380	; 0x111c
 8013da8:	687a      	ldr	r2, [r7, #4]
 8013daa:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 8013dae:	4b4e      	ldr	r3, [pc, #312]	; (8013ee8 <tcp_process+0x5bc>)
 8013db0:	781b      	ldrb	r3, [r3, #0]
 8013db2:	f003 0320 	and.w	r3, r3, #32
 8013db6:	2b00      	cmp	r3, #0
 8013db8:	d037      	beq.n	8013e2a <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 8013dba:	687b      	ldr	r3, [r7, #4]
 8013dbc:	8b5b      	ldrh	r3, [r3, #26]
 8013dbe:	f043 0302 	orr.w	r3, r3, #2
 8013dc2:	b29a      	uxth	r2, r3
 8013dc4:	687b      	ldr	r3, [r7, #4]
 8013dc6:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 8013dc8:	687b      	ldr	r3, [r7, #4]
 8013dca:	2207      	movs	r2, #7
 8013dcc:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 8013dce:	e02c      	b.n	8013e2a <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8013dd0:	4b3b      	ldr	r3, [pc, #236]	; (8013ec0 <tcp_process+0x594>)
 8013dd2:	6819      	ldr	r1, [r3, #0]
 8013dd4:	4b3b      	ldr	r3, [pc, #236]	; (8013ec4 <tcp_process+0x598>)
 8013dd6:	881b      	ldrh	r3, [r3, #0]
 8013dd8:	461a      	mov	r2, r3
 8013dda:	4b3b      	ldr	r3, [pc, #236]	; (8013ec8 <tcp_process+0x59c>)
 8013ddc:	681b      	ldr	r3, [r3, #0]
 8013dde:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8013de0:	4b3a      	ldr	r3, [pc, #232]	; (8013ecc <tcp_process+0x5a0>)
 8013de2:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8013de4:	885b      	ldrh	r3, [r3, #2]
 8013de6:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8013de8:	4a38      	ldr	r2, [pc, #224]	; (8013ecc <tcp_process+0x5a0>)
 8013dea:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8013dec:	8812      	ldrh	r2, [r2, #0]
 8013dee:	b292      	uxth	r2, r2
 8013df0:	9202      	str	r2, [sp, #8]
 8013df2:	9301      	str	r3, [sp, #4]
 8013df4:	4b36      	ldr	r3, [pc, #216]	; (8013ed0 <tcp_process+0x5a4>)
 8013df6:	9300      	str	r3, [sp, #0]
 8013df8:	4b36      	ldr	r3, [pc, #216]	; (8013ed4 <tcp_process+0x5a8>)
 8013dfa:	4602      	mov	r2, r0
 8013dfc:	6878      	ldr	r0, [r7, #4]
 8013dfe:	f002 fbd1 	bl	80165a4 <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 8013e02:	e167      	b.n	80140d4 <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 8013e04:	4b2d      	ldr	r3, [pc, #180]	; (8013ebc <tcp_process+0x590>)
 8013e06:	781b      	ldrb	r3, [r3, #0]
 8013e08:	f003 0302 	and.w	r3, r3, #2
 8013e0c:	2b00      	cmp	r3, #0
 8013e0e:	f000 8161 	beq.w	80140d4 <tcp_process+0x7a8>
 8013e12:	687b      	ldr	r3, [r7, #4]
 8013e14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013e16:	1e5a      	subs	r2, r3, #1
 8013e18:	4b2b      	ldr	r3, [pc, #172]	; (8013ec8 <tcp_process+0x59c>)
 8013e1a:	681b      	ldr	r3, [r3, #0]
 8013e1c:	429a      	cmp	r2, r3
 8013e1e:	f040 8159 	bne.w	80140d4 <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 8013e22:	6878      	ldr	r0, [r7, #4]
 8013e24:	f002 f9b8 	bl	8016198 <tcp_rexmit>
      break;
 8013e28:	e154      	b.n	80140d4 <tcp_process+0x7a8>
 8013e2a:	e153      	b.n	80140d4 <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 8013e2c:	6878      	ldr	r0, [r7, #4]
 8013e2e:	f000 fa71 	bl	8014314 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 8013e32:	4b2d      	ldr	r3, [pc, #180]	; (8013ee8 <tcp_process+0x5bc>)
 8013e34:	781b      	ldrb	r3, [r3, #0]
 8013e36:	f003 0320 	and.w	r3, r3, #32
 8013e3a:	2b00      	cmp	r3, #0
 8013e3c:	f000 814c 	beq.w	80140d8 <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 8013e40:	687b      	ldr	r3, [r7, #4]
 8013e42:	8b5b      	ldrh	r3, [r3, #26]
 8013e44:	f043 0302 	orr.w	r3, r3, #2
 8013e48:	b29a      	uxth	r2, r3
 8013e4a:	687b      	ldr	r3, [r7, #4]
 8013e4c:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 8013e4e:	687b      	ldr	r3, [r7, #4]
 8013e50:	2207      	movs	r2, #7
 8013e52:	751a      	strb	r2, [r3, #20]
      }
      break;
 8013e54:	e140      	b.n	80140d8 <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 8013e56:	6878      	ldr	r0, [r7, #4]
 8013e58:	f000 fa5c 	bl	8014314 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8013e5c:	4b22      	ldr	r3, [pc, #136]	; (8013ee8 <tcp_process+0x5bc>)
 8013e5e:	781b      	ldrb	r3, [r3, #0]
 8013e60:	f003 0320 	and.w	r3, r3, #32
 8013e64:	2b00      	cmp	r3, #0
 8013e66:	d071      	beq.n	8013f4c <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8013e68:	4b14      	ldr	r3, [pc, #80]	; (8013ebc <tcp_process+0x590>)
 8013e6a:	781b      	ldrb	r3, [r3, #0]
 8013e6c:	f003 0310 	and.w	r3, r3, #16
 8013e70:	2b00      	cmp	r3, #0
 8013e72:	d060      	beq.n	8013f36 <tcp_process+0x60a>
 8013e74:	687b      	ldr	r3, [r7, #4]
 8013e76:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8013e78:	4b11      	ldr	r3, [pc, #68]	; (8013ec0 <tcp_process+0x594>)
 8013e7a:	681b      	ldr	r3, [r3, #0]
 8013e7c:	429a      	cmp	r2, r3
 8013e7e:	d15a      	bne.n	8013f36 <tcp_process+0x60a>
            pcb->unsent == NULL) {
 8013e80:	687b      	ldr	r3, [r7, #4]
 8013e82:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8013e84:	2b00      	cmp	r3, #0
 8013e86:	d156      	bne.n	8013f36 <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 8013e88:	687b      	ldr	r3, [r7, #4]
 8013e8a:	8b5b      	ldrh	r3, [r3, #26]
 8013e8c:	f043 0302 	orr.w	r3, r3, #2
 8013e90:	b29a      	uxth	r2, r3
 8013e92:	687b      	ldr	r3, [r7, #4]
 8013e94:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 8013e96:	6878      	ldr	r0, [r7, #4]
 8013e98:	f7fe fdbc 	bl	8012a14 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 8013e9c:	4b13      	ldr	r3, [pc, #76]	; (8013eec <tcp_process+0x5c0>)
 8013e9e:	681b      	ldr	r3, [r3, #0]
 8013ea0:	687a      	ldr	r2, [r7, #4]
 8013ea2:	429a      	cmp	r2, r3
 8013ea4:	d105      	bne.n	8013eb2 <tcp_process+0x586>
 8013ea6:	4b11      	ldr	r3, [pc, #68]	; (8013eec <tcp_process+0x5c0>)
 8013ea8:	681b      	ldr	r3, [r3, #0]
 8013eaa:	68db      	ldr	r3, [r3, #12]
 8013eac:	4a0f      	ldr	r2, [pc, #60]	; (8013eec <tcp_process+0x5c0>)
 8013eae:	6013      	str	r3, [r2, #0]
 8013eb0:	e02e      	b.n	8013f10 <tcp_process+0x5e4>
 8013eb2:	4b0e      	ldr	r3, [pc, #56]	; (8013eec <tcp_process+0x5c0>)
 8013eb4:	681b      	ldr	r3, [r3, #0]
 8013eb6:	617b      	str	r3, [r7, #20]
 8013eb8:	e027      	b.n	8013f0a <tcp_process+0x5de>
 8013eba:	bf00      	nop
 8013ebc:	20007118 	.word	0x20007118
 8013ec0:	20007110 	.word	0x20007110
 8013ec4:	20007116 	.word	0x20007116
 8013ec8:	2000710c 	.word	0x2000710c
 8013ecc:	200070fc 	.word	0x200070fc
 8013ed0:	20000808 	.word	0x20000808
 8013ed4:	2000080c 	.word	0x2000080c
 8013ed8:	0801dc80 	.word	0x0801dc80
 8013edc:	0801df20 	.word	0x0801df20
 8013ee0:	0801dccc 	.word	0x0801dccc
 8013ee4:	20007114 	.word	0x20007114
 8013ee8:	20007119 	.word	0x20007119
 8013eec:	200070e0 	.word	0x200070e0
 8013ef0:	697b      	ldr	r3, [r7, #20]
 8013ef2:	68db      	ldr	r3, [r3, #12]
 8013ef4:	687a      	ldr	r2, [r7, #4]
 8013ef6:	429a      	cmp	r2, r3
 8013ef8:	d104      	bne.n	8013f04 <tcp_process+0x5d8>
 8013efa:	687b      	ldr	r3, [r7, #4]
 8013efc:	68da      	ldr	r2, [r3, #12]
 8013efe:	697b      	ldr	r3, [r7, #20]
 8013f00:	60da      	str	r2, [r3, #12]
 8013f02:	e005      	b.n	8013f10 <tcp_process+0x5e4>
 8013f04:	697b      	ldr	r3, [r7, #20]
 8013f06:	68db      	ldr	r3, [r3, #12]
 8013f08:	617b      	str	r3, [r7, #20]
 8013f0a:	697b      	ldr	r3, [r7, #20]
 8013f0c:	2b00      	cmp	r3, #0
 8013f0e:	d1ef      	bne.n	8013ef0 <tcp_process+0x5c4>
 8013f10:	687b      	ldr	r3, [r7, #4]
 8013f12:	2200      	movs	r2, #0
 8013f14:	60da      	str	r2, [r3, #12]
 8013f16:	4b77      	ldr	r3, [pc, #476]	; (80140f4 <tcp_process+0x7c8>)
 8013f18:	2201      	movs	r2, #1
 8013f1a:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 8013f1c:	687b      	ldr	r3, [r7, #4]
 8013f1e:	220a      	movs	r2, #10
 8013f20:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 8013f22:	4b75      	ldr	r3, [pc, #468]	; (80140f8 <tcp_process+0x7cc>)
 8013f24:	681a      	ldr	r2, [r3, #0]
 8013f26:	687b      	ldr	r3, [r7, #4]
 8013f28:	60da      	str	r2, [r3, #12]
 8013f2a:	4a73      	ldr	r2, [pc, #460]	; (80140f8 <tcp_process+0x7cc>)
 8013f2c:	687b      	ldr	r3, [r7, #4]
 8013f2e:	6013      	str	r3, [r2, #0]
 8013f30:	f002 fcfa 	bl	8016928 <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 8013f34:	e0d2      	b.n	80140dc <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 8013f36:	687b      	ldr	r3, [r7, #4]
 8013f38:	8b5b      	ldrh	r3, [r3, #26]
 8013f3a:	f043 0302 	orr.w	r3, r3, #2
 8013f3e:	b29a      	uxth	r2, r3
 8013f40:	687b      	ldr	r3, [r7, #4]
 8013f42:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 8013f44:	687b      	ldr	r3, [r7, #4]
 8013f46:	2208      	movs	r2, #8
 8013f48:	751a      	strb	r2, [r3, #20]
      break;
 8013f4a:	e0c7      	b.n	80140dc <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8013f4c:	4b6b      	ldr	r3, [pc, #428]	; (80140fc <tcp_process+0x7d0>)
 8013f4e:	781b      	ldrb	r3, [r3, #0]
 8013f50:	f003 0310 	and.w	r3, r3, #16
 8013f54:	2b00      	cmp	r3, #0
 8013f56:	f000 80c1 	beq.w	80140dc <tcp_process+0x7b0>
 8013f5a:	687b      	ldr	r3, [r7, #4]
 8013f5c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8013f5e:	4b68      	ldr	r3, [pc, #416]	; (8014100 <tcp_process+0x7d4>)
 8013f60:	681b      	ldr	r3, [r3, #0]
 8013f62:	429a      	cmp	r2, r3
 8013f64:	f040 80ba 	bne.w	80140dc <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 8013f68:	687b      	ldr	r3, [r7, #4]
 8013f6a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8013f6c:	2b00      	cmp	r3, #0
 8013f6e:	f040 80b5 	bne.w	80140dc <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 8013f72:	687b      	ldr	r3, [r7, #4]
 8013f74:	2206      	movs	r2, #6
 8013f76:	751a      	strb	r2, [r3, #20]
      break;
 8013f78:	e0b0      	b.n	80140dc <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 8013f7a:	6878      	ldr	r0, [r7, #4]
 8013f7c:	f000 f9ca 	bl	8014314 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8013f80:	4b60      	ldr	r3, [pc, #384]	; (8014104 <tcp_process+0x7d8>)
 8013f82:	781b      	ldrb	r3, [r3, #0]
 8013f84:	f003 0320 	and.w	r3, r3, #32
 8013f88:	2b00      	cmp	r3, #0
 8013f8a:	f000 80a9 	beq.w	80140e0 <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 8013f8e:	687b      	ldr	r3, [r7, #4]
 8013f90:	8b5b      	ldrh	r3, [r3, #26]
 8013f92:	f043 0302 	orr.w	r3, r3, #2
 8013f96:	b29a      	uxth	r2, r3
 8013f98:	687b      	ldr	r3, [r7, #4]
 8013f9a:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 8013f9c:	6878      	ldr	r0, [r7, #4]
 8013f9e:	f7fe fd39 	bl	8012a14 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8013fa2:	4b59      	ldr	r3, [pc, #356]	; (8014108 <tcp_process+0x7dc>)
 8013fa4:	681b      	ldr	r3, [r3, #0]
 8013fa6:	687a      	ldr	r2, [r7, #4]
 8013fa8:	429a      	cmp	r2, r3
 8013faa:	d105      	bne.n	8013fb8 <tcp_process+0x68c>
 8013fac:	4b56      	ldr	r3, [pc, #344]	; (8014108 <tcp_process+0x7dc>)
 8013fae:	681b      	ldr	r3, [r3, #0]
 8013fb0:	68db      	ldr	r3, [r3, #12]
 8013fb2:	4a55      	ldr	r2, [pc, #340]	; (8014108 <tcp_process+0x7dc>)
 8013fb4:	6013      	str	r3, [r2, #0]
 8013fb6:	e013      	b.n	8013fe0 <tcp_process+0x6b4>
 8013fb8:	4b53      	ldr	r3, [pc, #332]	; (8014108 <tcp_process+0x7dc>)
 8013fba:	681b      	ldr	r3, [r3, #0]
 8013fbc:	613b      	str	r3, [r7, #16]
 8013fbe:	e00c      	b.n	8013fda <tcp_process+0x6ae>
 8013fc0:	693b      	ldr	r3, [r7, #16]
 8013fc2:	68db      	ldr	r3, [r3, #12]
 8013fc4:	687a      	ldr	r2, [r7, #4]
 8013fc6:	429a      	cmp	r2, r3
 8013fc8:	d104      	bne.n	8013fd4 <tcp_process+0x6a8>
 8013fca:	687b      	ldr	r3, [r7, #4]
 8013fcc:	68da      	ldr	r2, [r3, #12]
 8013fce:	693b      	ldr	r3, [r7, #16]
 8013fd0:	60da      	str	r2, [r3, #12]
 8013fd2:	e005      	b.n	8013fe0 <tcp_process+0x6b4>
 8013fd4:	693b      	ldr	r3, [r7, #16]
 8013fd6:	68db      	ldr	r3, [r3, #12]
 8013fd8:	613b      	str	r3, [r7, #16]
 8013fda:	693b      	ldr	r3, [r7, #16]
 8013fdc:	2b00      	cmp	r3, #0
 8013fde:	d1ef      	bne.n	8013fc0 <tcp_process+0x694>
 8013fe0:	687b      	ldr	r3, [r7, #4]
 8013fe2:	2200      	movs	r2, #0
 8013fe4:	60da      	str	r2, [r3, #12]
 8013fe6:	4b43      	ldr	r3, [pc, #268]	; (80140f4 <tcp_process+0x7c8>)
 8013fe8:	2201      	movs	r2, #1
 8013fea:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8013fec:	687b      	ldr	r3, [r7, #4]
 8013fee:	220a      	movs	r2, #10
 8013ff0:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8013ff2:	4b41      	ldr	r3, [pc, #260]	; (80140f8 <tcp_process+0x7cc>)
 8013ff4:	681a      	ldr	r2, [r3, #0]
 8013ff6:	687b      	ldr	r3, [r7, #4]
 8013ff8:	60da      	str	r2, [r3, #12]
 8013ffa:	4a3f      	ldr	r2, [pc, #252]	; (80140f8 <tcp_process+0x7cc>)
 8013ffc:	687b      	ldr	r3, [r7, #4]
 8013ffe:	6013      	str	r3, [r2, #0]
 8014000:	f002 fc92 	bl	8016928 <tcp_timer_needed>
      }
      break;
 8014004:	e06c      	b.n	80140e0 <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 8014006:	6878      	ldr	r0, [r7, #4]
 8014008:	f000 f984 	bl	8014314 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 801400c:	4b3b      	ldr	r3, [pc, #236]	; (80140fc <tcp_process+0x7d0>)
 801400e:	781b      	ldrb	r3, [r3, #0]
 8014010:	f003 0310 	and.w	r3, r3, #16
 8014014:	2b00      	cmp	r3, #0
 8014016:	d065      	beq.n	80140e4 <tcp_process+0x7b8>
 8014018:	687b      	ldr	r3, [r7, #4]
 801401a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801401c:	4b38      	ldr	r3, [pc, #224]	; (8014100 <tcp_process+0x7d4>)
 801401e:	681b      	ldr	r3, [r3, #0]
 8014020:	429a      	cmp	r2, r3
 8014022:	d15f      	bne.n	80140e4 <tcp_process+0x7b8>
 8014024:	687b      	ldr	r3, [r7, #4]
 8014026:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014028:	2b00      	cmp	r3, #0
 801402a:	d15b      	bne.n	80140e4 <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 801402c:	6878      	ldr	r0, [r7, #4]
 801402e:	f7fe fcf1 	bl	8012a14 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8014032:	4b35      	ldr	r3, [pc, #212]	; (8014108 <tcp_process+0x7dc>)
 8014034:	681b      	ldr	r3, [r3, #0]
 8014036:	687a      	ldr	r2, [r7, #4]
 8014038:	429a      	cmp	r2, r3
 801403a:	d105      	bne.n	8014048 <tcp_process+0x71c>
 801403c:	4b32      	ldr	r3, [pc, #200]	; (8014108 <tcp_process+0x7dc>)
 801403e:	681b      	ldr	r3, [r3, #0]
 8014040:	68db      	ldr	r3, [r3, #12]
 8014042:	4a31      	ldr	r2, [pc, #196]	; (8014108 <tcp_process+0x7dc>)
 8014044:	6013      	str	r3, [r2, #0]
 8014046:	e013      	b.n	8014070 <tcp_process+0x744>
 8014048:	4b2f      	ldr	r3, [pc, #188]	; (8014108 <tcp_process+0x7dc>)
 801404a:	681b      	ldr	r3, [r3, #0]
 801404c:	60fb      	str	r3, [r7, #12]
 801404e:	e00c      	b.n	801406a <tcp_process+0x73e>
 8014050:	68fb      	ldr	r3, [r7, #12]
 8014052:	68db      	ldr	r3, [r3, #12]
 8014054:	687a      	ldr	r2, [r7, #4]
 8014056:	429a      	cmp	r2, r3
 8014058:	d104      	bne.n	8014064 <tcp_process+0x738>
 801405a:	687b      	ldr	r3, [r7, #4]
 801405c:	68da      	ldr	r2, [r3, #12]
 801405e:	68fb      	ldr	r3, [r7, #12]
 8014060:	60da      	str	r2, [r3, #12]
 8014062:	e005      	b.n	8014070 <tcp_process+0x744>
 8014064:	68fb      	ldr	r3, [r7, #12]
 8014066:	68db      	ldr	r3, [r3, #12]
 8014068:	60fb      	str	r3, [r7, #12]
 801406a:	68fb      	ldr	r3, [r7, #12]
 801406c:	2b00      	cmp	r3, #0
 801406e:	d1ef      	bne.n	8014050 <tcp_process+0x724>
 8014070:	687b      	ldr	r3, [r7, #4]
 8014072:	2200      	movs	r2, #0
 8014074:	60da      	str	r2, [r3, #12]
 8014076:	4b1f      	ldr	r3, [pc, #124]	; (80140f4 <tcp_process+0x7c8>)
 8014078:	2201      	movs	r2, #1
 801407a:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 801407c:	687b      	ldr	r3, [r7, #4]
 801407e:	220a      	movs	r2, #10
 8014080:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8014082:	4b1d      	ldr	r3, [pc, #116]	; (80140f8 <tcp_process+0x7cc>)
 8014084:	681a      	ldr	r2, [r3, #0]
 8014086:	687b      	ldr	r3, [r7, #4]
 8014088:	60da      	str	r2, [r3, #12]
 801408a:	4a1b      	ldr	r2, [pc, #108]	; (80140f8 <tcp_process+0x7cc>)
 801408c:	687b      	ldr	r3, [r7, #4]
 801408e:	6013      	str	r3, [r2, #0]
 8014090:	f002 fc4a 	bl	8016928 <tcp_timer_needed>
      }
      break;
 8014094:	e026      	b.n	80140e4 <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 8014096:	6878      	ldr	r0, [r7, #4]
 8014098:	f000 f93c 	bl	8014314 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 801409c:	4b17      	ldr	r3, [pc, #92]	; (80140fc <tcp_process+0x7d0>)
 801409e:	781b      	ldrb	r3, [r3, #0]
 80140a0:	f003 0310 	and.w	r3, r3, #16
 80140a4:	2b00      	cmp	r3, #0
 80140a6:	d01f      	beq.n	80140e8 <tcp_process+0x7bc>
 80140a8:	687b      	ldr	r3, [r7, #4]
 80140aa:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80140ac:	4b14      	ldr	r3, [pc, #80]	; (8014100 <tcp_process+0x7d4>)
 80140ae:	681b      	ldr	r3, [r3, #0]
 80140b0:	429a      	cmp	r2, r3
 80140b2:	d119      	bne.n	80140e8 <tcp_process+0x7bc>
 80140b4:	687b      	ldr	r3, [r7, #4]
 80140b6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80140b8:	2b00      	cmp	r3, #0
 80140ba:	d115      	bne.n	80140e8 <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 80140bc:	4b11      	ldr	r3, [pc, #68]	; (8014104 <tcp_process+0x7d8>)
 80140be:	781b      	ldrb	r3, [r3, #0]
 80140c0:	f043 0310 	orr.w	r3, r3, #16
 80140c4:	b2da      	uxtb	r2, r3
 80140c6:	4b0f      	ldr	r3, [pc, #60]	; (8014104 <tcp_process+0x7d8>)
 80140c8:	701a      	strb	r2, [r3, #0]
      }
      break;
 80140ca:	e00d      	b.n	80140e8 <tcp_process+0x7bc>
    default:
      break;
 80140cc:	bf00      	nop
 80140ce:	e00c      	b.n	80140ea <tcp_process+0x7be>
      break;
 80140d0:	bf00      	nop
 80140d2:	e00a      	b.n	80140ea <tcp_process+0x7be>
      break;
 80140d4:	bf00      	nop
 80140d6:	e008      	b.n	80140ea <tcp_process+0x7be>
      break;
 80140d8:	bf00      	nop
 80140da:	e006      	b.n	80140ea <tcp_process+0x7be>
      break;
 80140dc:	bf00      	nop
 80140de:	e004      	b.n	80140ea <tcp_process+0x7be>
      break;
 80140e0:	bf00      	nop
 80140e2:	e002      	b.n	80140ea <tcp_process+0x7be>
      break;
 80140e4:	bf00      	nop
 80140e6:	e000      	b.n	80140ea <tcp_process+0x7be>
      break;
 80140e8:	bf00      	nop
  }
  return ERR_OK;
 80140ea:	2300      	movs	r3, #0
}
 80140ec:	4618      	mov	r0, r3
 80140ee:	3724      	adds	r7, #36	; 0x24
 80140f0:	46bd      	mov	sp, r7
 80140f2:	bd90      	pop	{r4, r7, pc}
 80140f4:	200070e8 	.word	0x200070e8
 80140f8:	200070e4 	.word	0x200070e4
 80140fc:	20007118 	.word	0x20007118
 8014100:	20007110 	.word	0x20007110
 8014104:	20007119 	.word	0x20007119
 8014108:	200070e0 	.word	0x200070e0

0801410c <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 801410c:	b590      	push	{r4, r7, lr}
 801410e:	b085      	sub	sp, #20
 8014110:	af00      	add	r7, sp, #0
 8014112:	6078      	str	r0, [r7, #4]
 8014114:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 8014116:	687b      	ldr	r3, [r7, #4]
 8014118:	2b00      	cmp	r3, #0
 801411a:	d106      	bne.n	801412a <tcp_oos_insert_segment+0x1e>
 801411c:	4b3b      	ldr	r3, [pc, #236]	; (801420c <tcp_oos_insert_segment+0x100>)
 801411e:	f240 421f 	movw	r2, #1055	; 0x41f
 8014122:	493b      	ldr	r1, [pc, #236]	; (8014210 <tcp_oos_insert_segment+0x104>)
 8014124:	483b      	ldr	r0, [pc, #236]	; (8014214 <tcp_oos_insert_segment+0x108>)
 8014126:	f005 fee7 	bl	8019ef8 <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 801412a:	687b      	ldr	r3, [r7, #4]
 801412c:	68db      	ldr	r3, [r3, #12]
 801412e:	899b      	ldrh	r3, [r3, #12]
 8014130:	b29b      	uxth	r3, r3
 8014132:	4618      	mov	r0, r3
 8014134:	f7fb fc26 	bl	800f984 <lwip_htons>
 8014138:	4603      	mov	r3, r0
 801413a:	b2db      	uxtb	r3, r3
 801413c:	f003 0301 	and.w	r3, r3, #1
 8014140:	2b00      	cmp	r3, #0
 8014142:	d028      	beq.n	8014196 <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 8014144:	6838      	ldr	r0, [r7, #0]
 8014146:	f7fe fa63 	bl	8012610 <tcp_segs_free>
    next = NULL;
 801414a:	2300      	movs	r3, #0
 801414c:	603b      	str	r3, [r7, #0]
 801414e:	e056      	b.n	80141fe <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8014150:	683b      	ldr	r3, [r7, #0]
 8014152:	68db      	ldr	r3, [r3, #12]
 8014154:	899b      	ldrh	r3, [r3, #12]
 8014156:	b29b      	uxth	r3, r3
 8014158:	4618      	mov	r0, r3
 801415a:	f7fb fc13 	bl	800f984 <lwip_htons>
 801415e:	4603      	mov	r3, r0
 8014160:	b2db      	uxtb	r3, r3
 8014162:	f003 0301 	and.w	r3, r3, #1
 8014166:	2b00      	cmp	r3, #0
 8014168:	d00d      	beq.n	8014186 <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 801416a:	687b      	ldr	r3, [r7, #4]
 801416c:	68db      	ldr	r3, [r3, #12]
 801416e:	899b      	ldrh	r3, [r3, #12]
 8014170:	b29c      	uxth	r4, r3
 8014172:	2001      	movs	r0, #1
 8014174:	f7fb fc06 	bl	800f984 <lwip_htons>
 8014178:	4603      	mov	r3, r0
 801417a:	461a      	mov	r2, r3
 801417c:	687b      	ldr	r3, [r7, #4]
 801417e:	68db      	ldr	r3, [r3, #12]
 8014180:	4322      	orrs	r2, r4
 8014182:	b292      	uxth	r2, r2
 8014184:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 8014186:	683b      	ldr	r3, [r7, #0]
 8014188:	60fb      	str	r3, [r7, #12]
      next = next->next;
 801418a:	683b      	ldr	r3, [r7, #0]
 801418c:	681b      	ldr	r3, [r3, #0]
 801418e:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 8014190:	68f8      	ldr	r0, [r7, #12]
 8014192:	f7fe fa52 	bl	801263a <tcp_seg_free>
    while (next &&
 8014196:	683b      	ldr	r3, [r7, #0]
 8014198:	2b00      	cmp	r3, #0
 801419a:	d00e      	beq.n	80141ba <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 801419c:	687b      	ldr	r3, [r7, #4]
 801419e:	891b      	ldrh	r3, [r3, #8]
 80141a0:	461a      	mov	r2, r3
 80141a2:	4b1d      	ldr	r3, [pc, #116]	; (8014218 <tcp_oos_insert_segment+0x10c>)
 80141a4:	681b      	ldr	r3, [r3, #0]
 80141a6:	441a      	add	r2, r3
 80141a8:	683b      	ldr	r3, [r7, #0]
 80141aa:	68db      	ldr	r3, [r3, #12]
 80141ac:	685b      	ldr	r3, [r3, #4]
 80141ae:	6839      	ldr	r1, [r7, #0]
 80141b0:	8909      	ldrh	r1, [r1, #8]
 80141b2:	440b      	add	r3, r1
 80141b4:	1ad3      	subs	r3, r2, r3
    while (next &&
 80141b6:	2b00      	cmp	r3, #0
 80141b8:	daca      	bge.n	8014150 <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 80141ba:	683b      	ldr	r3, [r7, #0]
 80141bc:	2b00      	cmp	r3, #0
 80141be:	d01e      	beq.n	80141fe <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 80141c0:	687b      	ldr	r3, [r7, #4]
 80141c2:	891b      	ldrh	r3, [r3, #8]
 80141c4:	461a      	mov	r2, r3
 80141c6:	4b14      	ldr	r3, [pc, #80]	; (8014218 <tcp_oos_insert_segment+0x10c>)
 80141c8:	681b      	ldr	r3, [r3, #0]
 80141ca:	441a      	add	r2, r3
 80141cc:	683b      	ldr	r3, [r7, #0]
 80141ce:	68db      	ldr	r3, [r3, #12]
 80141d0:	685b      	ldr	r3, [r3, #4]
 80141d2:	1ad3      	subs	r3, r2, r3
    if (next &&
 80141d4:	2b00      	cmp	r3, #0
 80141d6:	dd12      	ble.n	80141fe <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 80141d8:	683b      	ldr	r3, [r7, #0]
 80141da:	68db      	ldr	r3, [r3, #12]
 80141dc:	685b      	ldr	r3, [r3, #4]
 80141de:	b29a      	uxth	r2, r3
 80141e0:	4b0d      	ldr	r3, [pc, #52]	; (8014218 <tcp_oos_insert_segment+0x10c>)
 80141e2:	681b      	ldr	r3, [r3, #0]
 80141e4:	b29b      	uxth	r3, r3
 80141e6:	1ad3      	subs	r3, r2, r3
 80141e8:	b29a      	uxth	r2, r3
 80141ea:	687b      	ldr	r3, [r7, #4]
 80141ec:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 80141ee:	687b      	ldr	r3, [r7, #4]
 80141f0:	685a      	ldr	r2, [r3, #4]
 80141f2:	687b      	ldr	r3, [r7, #4]
 80141f4:	891b      	ldrh	r3, [r3, #8]
 80141f6:	4619      	mov	r1, r3
 80141f8:	4610      	mov	r0, r2
 80141fa:	f7fc fe23 	bl	8010e44 <pbuf_realloc>
    }
  }
  cseg->next = next;
 80141fe:	687b      	ldr	r3, [r7, #4]
 8014200:	683a      	ldr	r2, [r7, #0]
 8014202:	601a      	str	r2, [r3, #0]
}
 8014204:	bf00      	nop
 8014206:	3714      	adds	r7, #20
 8014208:	46bd      	mov	sp, r7
 801420a:	bd90      	pop	{r4, r7, pc}
 801420c:	0801dc80 	.word	0x0801dc80
 8014210:	0801df40 	.word	0x0801df40
 8014214:	0801dccc 	.word	0x0801dccc
 8014218:	2000710c 	.word	0x2000710c

0801421c <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 801421c:	b5b0      	push	{r4, r5, r7, lr}
 801421e:	b086      	sub	sp, #24
 8014220:	af00      	add	r7, sp, #0
 8014222:	60f8      	str	r0, [r7, #12]
 8014224:	60b9      	str	r1, [r7, #8]
 8014226:	607a      	str	r2, [r7, #4]
 8014228:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 801422a:	e03e      	b.n	80142aa <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 801422c:	68bb      	ldr	r3, [r7, #8]
 801422e:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 8014230:	68bb      	ldr	r3, [r7, #8]
 8014232:	681b      	ldr	r3, [r3, #0]
 8014234:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 8014236:	697b      	ldr	r3, [r7, #20]
 8014238:	685b      	ldr	r3, [r3, #4]
 801423a:	4618      	mov	r0, r3
 801423c:	f7fd f80e 	bl	801125c <pbuf_clen>
 8014240:	4603      	mov	r3, r0
 8014242:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 8014244:	68fb      	ldr	r3, [r7, #12]
 8014246:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801424a:	8a7a      	ldrh	r2, [r7, #18]
 801424c:	429a      	cmp	r2, r3
 801424e:	d906      	bls.n	801425e <tcp_free_acked_segments+0x42>
 8014250:	4b2a      	ldr	r3, [pc, #168]	; (80142fc <tcp_free_acked_segments+0xe0>)
 8014252:	f240 4257 	movw	r2, #1111	; 0x457
 8014256:	492a      	ldr	r1, [pc, #168]	; (8014300 <tcp_free_acked_segments+0xe4>)
 8014258:	482a      	ldr	r0, [pc, #168]	; (8014304 <tcp_free_acked_segments+0xe8>)
 801425a:	f005 fe4d 	bl	8019ef8 <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 801425e:	68fb      	ldr	r3, [r7, #12]
 8014260:	f8b3 2066 	ldrh.w	r2, [r3, #102]	; 0x66
 8014264:	8a7b      	ldrh	r3, [r7, #18]
 8014266:	1ad3      	subs	r3, r2, r3
 8014268:	b29a      	uxth	r2, r3
 801426a:	68fb      	ldr	r3, [r7, #12]
 801426c:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 8014270:	697b      	ldr	r3, [r7, #20]
 8014272:	891a      	ldrh	r2, [r3, #8]
 8014274:	4b24      	ldr	r3, [pc, #144]	; (8014308 <tcp_free_acked_segments+0xec>)
 8014276:	881b      	ldrh	r3, [r3, #0]
 8014278:	4413      	add	r3, r2
 801427a:	b29a      	uxth	r2, r3
 801427c:	4b22      	ldr	r3, [pc, #136]	; (8014308 <tcp_free_acked_segments+0xec>)
 801427e:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 8014280:	6978      	ldr	r0, [r7, #20]
 8014282:	f7fe f9da 	bl	801263a <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 8014286:	68fb      	ldr	r3, [r7, #12]
 8014288:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801428c:	2b00      	cmp	r3, #0
 801428e:	d00c      	beq.n	80142aa <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 8014290:	68bb      	ldr	r3, [r7, #8]
 8014292:	2b00      	cmp	r3, #0
 8014294:	d109      	bne.n	80142aa <tcp_free_acked_segments+0x8e>
 8014296:	683b      	ldr	r3, [r7, #0]
 8014298:	2b00      	cmp	r3, #0
 801429a:	d106      	bne.n	80142aa <tcp_free_acked_segments+0x8e>
 801429c:	4b17      	ldr	r3, [pc, #92]	; (80142fc <tcp_free_acked_segments+0xe0>)
 801429e:	f240 4261 	movw	r2, #1121	; 0x461
 80142a2:	491a      	ldr	r1, [pc, #104]	; (801430c <tcp_free_acked_segments+0xf0>)
 80142a4:	4817      	ldr	r0, [pc, #92]	; (8014304 <tcp_free_acked_segments+0xe8>)
 80142a6:	f005 fe27 	bl	8019ef8 <iprintf>
  while (seg_list != NULL &&
 80142aa:	68bb      	ldr	r3, [r7, #8]
 80142ac:	2b00      	cmp	r3, #0
 80142ae:	d020      	beq.n	80142f2 <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 80142b0:	68bb      	ldr	r3, [r7, #8]
 80142b2:	68db      	ldr	r3, [r3, #12]
 80142b4:	685b      	ldr	r3, [r3, #4]
 80142b6:	4618      	mov	r0, r3
 80142b8:	f7fb fb79 	bl	800f9ae <lwip_htonl>
 80142bc:	4604      	mov	r4, r0
 80142be:	68bb      	ldr	r3, [r7, #8]
 80142c0:	891b      	ldrh	r3, [r3, #8]
 80142c2:	461d      	mov	r5, r3
 80142c4:	68bb      	ldr	r3, [r7, #8]
 80142c6:	68db      	ldr	r3, [r3, #12]
 80142c8:	899b      	ldrh	r3, [r3, #12]
 80142ca:	b29b      	uxth	r3, r3
 80142cc:	4618      	mov	r0, r3
 80142ce:	f7fb fb59 	bl	800f984 <lwip_htons>
 80142d2:	4603      	mov	r3, r0
 80142d4:	b2db      	uxtb	r3, r3
 80142d6:	f003 0303 	and.w	r3, r3, #3
 80142da:	2b00      	cmp	r3, #0
 80142dc:	d001      	beq.n	80142e2 <tcp_free_acked_segments+0xc6>
 80142de:	2301      	movs	r3, #1
 80142e0:	e000      	b.n	80142e4 <tcp_free_acked_segments+0xc8>
 80142e2:	2300      	movs	r3, #0
 80142e4:	442b      	add	r3, r5
 80142e6:	18e2      	adds	r2, r4, r3
 80142e8:	4b09      	ldr	r3, [pc, #36]	; (8014310 <tcp_free_acked_segments+0xf4>)
 80142ea:	681b      	ldr	r3, [r3, #0]
 80142ec:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 80142ee:	2b00      	cmp	r3, #0
 80142f0:	dd9c      	ble.n	801422c <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 80142f2:	68bb      	ldr	r3, [r7, #8]
}
 80142f4:	4618      	mov	r0, r3
 80142f6:	3718      	adds	r7, #24
 80142f8:	46bd      	mov	sp, r7
 80142fa:	bdb0      	pop	{r4, r5, r7, pc}
 80142fc:	0801dc80 	.word	0x0801dc80
 8014300:	0801df68 	.word	0x0801df68
 8014304:	0801dccc 	.word	0x0801dccc
 8014308:	20007114 	.word	0x20007114
 801430c:	0801df90 	.word	0x0801df90
 8014310:	20007110 	.word	0x20007110

08014314 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 8014314:	b5b0      	push	{r4, r5, r7, lr}
 8014316:	b094      	sub	sp, #80	; 0x50
 8014318:	af00      	add	r7, sp, #0
 801431a:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 801431c:	2300      	movs	r3, #0
 801431e:	64bb      	str	r3, [r7, #72]	; 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 8014320:	687b      	ldr	r3, [r7, #4]
 8014322:	2b00      	cmp	r3, #0
 8014324:	d106      	bne.n	8014334 <tcp_receive+0x20>
 8014326:	4b91      	ldr	r3, [pc, #580]	; (801456c <tcp_receive+0x258>)
 8014328:	f240 427b 	movw	r2, #1147	; 0x47b
 801432c:	4990      	ldr	r1, [pc, #576]	; (8014570 <tcp_receive+0x25c>)
 801432e:	4891      	ldr	r0, [pc, #580]	; (8014574 <tcp_receive+0x260>)
 8014330:	f005 fde2 	bl	8019ef8 <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 8014334:	687b      	ldr	r3, [r7, #4]
 8014336:	7d1b      	ldrb	r3, [r3, #20]
 8014338:	2b03      	cmp	r3, #3
 801433a:	d806      	bhi.n	801434a <tcp_receive+0x36>
 801433c:	4b8b      	ldr	r3, [pc, #556]	; (801456c <tcp_receive+0x258>)
 801433e:	f240 427c 	movw	r2, #1148	; 0x47c
 8014342:	498d      	ldr	r1, [pc, #564]	; (8014578 <tcp_receive+0x264>)
 8014344:	488b      	ldr	r0, [pc, #556]	; (8014574 <tcp_receive+0x260>)
 8014346:	f005 fdd7 	bl	8019ef8 <iprintf>

  if (flags & TCP_ACK) {
 801434a:	4b8c      	ldr	r3, [pc, #560]	; (801457c <tcp_receive+0x268>)
 801434c:	781b      	ldrb	r3, [r3, #0]
 801434e:	f003 0310 	and.w	r3, r3, #16
 8014352:	2b00      	cmp	r3, #0
 8014354:	f000 8264 	beq.w	8014820 <tcp_receive+0x50c>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 8014358:	687b      	ldr	r3, [r7, #4]
 801435a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801435e:	461a      	mov	r2, r3
 8014360:	687b      	ldr	r3, [r7, #4]
 8014362:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8014364:	4413      	add	r3, r2
 8014366:	633b      	str	r3, [r7, #48]	; 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8014368:	687b      	ldr	r3, [r7, #4]
 801436a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 801436c:	4b84      	ldr	r3, [pc, #528]	; (8014580 <tcp_receive+0x26c>)
 801436e:	681b      	ldr	r3, [r3, #0]
 8014370:	1ad3      	subs	r3, r2, r3
 8014372:	2b00      	cmp	r3, #0
 8014374:	db1b      	blt.n	80143ae <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8014376:	687b      	ldr	r3, [r7, #4]
 8014378:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 801437a:	4b81      	ldr	r3, [pc, #516]	; (8014580 <tcp_receive+0x26c>)
 801437c:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 801437e:	429a      	cmp	r2, r3
 8014380:	d106      	bne.n	8014390 <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8014382:	687b      	ldr	r3, [r7, #4]
 8014384:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8014386:	4b7f      	ldr	r3, [pc, #508]	; (8014584 <tcp_receive+0x270>)
 8014388:	681b      	ldr	r3, [r3, #0]
 801438a:	1ad3      	subs	r3, r2, r3
 801438c:	2b00      	cmp	r3, #0
 801438e:	db0e      	blt.n	80143ae <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8014390:	687b      	ldr	r3, [r7, #4]
 8014392:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8014394:	4b7b      	ldr	r3, [pc, #492]	; (8014584 <tcp_receive+0x270>)
 8014396:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8014398:	429a      	cmp	r2, r3
 801439a:	d125      	bne.n	80143e8 <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 801439c:	4b7a      	ldr	r3, [pc, #488]	; (8014588 <tcp_receive+0x274>)
 801439e:	681b      	ldr	r3, [r3, #0]
 80143a0:	89db      	ldrh	r3, [r3, #14]
 80143a2:	b29a      	uxth	r2, r3
 80143a4:	687b      	ldr	r3, [r7, #4]
 80143a6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80143aa:	429a      	cmp	r2, r3
 80143ac:	d91c      	bls.n	80143e8 <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 80143ae:	4b76      	ldr	r3, [pc, #472]	; (8014588 <tcp_receive+0x274>)
 80143b0:	681b      	ldr	r3, [r3, #0]
 80143b2:	89db      	ldrh	r3, [r3, #14]
 80143b4:	b29a      	uxth	r2, r3
 80143b6:	687b      	ldr	r3, [r7, #4]
 80143b8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 80143bc:	687b      	ldr	r3, [r7, #4]
 80143be:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
 80143c2:	687b      	ldr	r3, [r7, #4]
 80143c4:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80143c8:	429a      	cmp	r2, r3
 80143ca:	d205      	bcs.n	80143d8 <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 80143cc:	687b      	ldr	r3, [r7, #4]
 80143ce:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 80143d2:	687b      	ldr	r3, [r7, #4]
 80143d4:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      }
      pcb->snd_wl1 = seqno;
 80143d8:	4b69      	ldr	r3, [pc, #420]	; (8014580 <tcp_receive+0x26c>)
 80143da:	681a      	ldr	r2, [r3, #0]
 80143dc:	687b      	ldr	r3, [r7, #4]
 80143de:	655a      	str	r2, [r3, #84]	; 0x54
      pcb->snd_wl2 = ackno;
 80143e0:	4b68      	ldr	r3, [pc, #416]	; (8014584 <tcp_receive+0x270>)
 80143e2:	681a      	ldr	r2, [r3, #0]
 80143e4:	687b      	ldr	r3, [r7, #4]
 80143e6:	659a      	str	r2, [r3, #88]	; 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 80143e8:	4b66      	ldr	r3, [pc, #408]	; (8014584 <tcp_receive+0x270>)
 80143ea:	681a      	ldr	r2, [r3, #0]
 80143ec:	687b      	ldr	r3, [r7, #4]
 80143ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80143f0:	1ad3      	subs	r3, r2, r3
 80143f2:	2b00      	cmp	r3, #0
 80143f4:	dc58      	bgt.n	80144a8 <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 80143f6:	4b65      	ldr	r3, [pc, #404]	; (801458c <tcp_receive+0x278>)
 80143f8:	881b      	ldrh	r3, [r3, #0]
 80143fa:	2b00      	cmp	r3, #0
 80143fc:	d14b      	bne.n	8014496 <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 80143fe:	687b      	ldr	r3, [r7, #4]
 8014400:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8014402:	687a      	ldr	r2, [r7, #4]
 8014404:	f8b2 2060 	ldrh.w	r2, [r2, #96]	; 0x60
 8014408:	4413      	add	r3, r2
 801440a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801440c:	429a      	cmp	r2, r3
 801440e:	d142      	bne.n	8014496 <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 8014410:	687b      	ldr	r3, [r7, #4]
 8014412:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8014416:	2b00      	cmp	r3, #0
 8014418:	db3d      	blt.n	8014496 <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 801441a:	687b      	ldr	r3, [r7, #4]
 801441c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801441e:	4b59      	ldr	r3, [pc, #356]	; (8014584 <tcp_receive+0x270>)
 8014420:	681b      	ldr	r3, [r3, #0]
 8014422:	429a      	cmp	r2, r3
 8014424:	d137      	bne.n	8014496 <tcp_receive+0x182>
              found_dupack = 1;
 8014426:	2301      	movs	r3, #1
 8014428:	64bb      	str	r3, [r7, #72]	; 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 801442a:	687b      	ldr	r3, [r7, #4]
 801442c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8014430:	2bff      	cmp	r3, #255	; 0xff
 8014432:	d007      	beq.n	8014444 <tcp_receive+0x130>
                ++pcb->dupacks;
 8014434:	687b      	ldr	r3, [r7, #4]
 8014436:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 801443a:	3301      	adds	r3, #1
 801443c:	b2da      	uxtb	r2, r3
 801443e:	687b      	ldr	r3, [r7, #4]
 8014440:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 8014444:	687b      	ldr	r3, [r7, #4]
 8014446:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 801444a:	2b03      	cmp	r3, #3
 801444c:	d91b      	bls.n	8014486 <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 801444e:	687b      	ldr	r3, [r7, #4]
 8014450:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8014454:	687b      	ldr	r3, [r7, #4]
 8014456:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8014458:	4413      	add	r3, r2
 801445a:	b29a      	uxth	r2, r3
 801445c:	687b      	ldr	r3, [r7, #4]
 801445e:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8014462:	429a      	cmp	r2, r3
 8014464:	d30a      	bcc.n	801447c <tcp_receive+0x168>
 8014466:	687b      	ldr	r3, [r7, #4]
 8014468:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 801446c:	687b      	ldr	r3, [r7, #4]
 801446e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8014470:	4413      	add	r3, r2
 8014472:	b29a      	uxth	r2, r3
 8014474:	687b      	ldr	r3, [r7, #4]
 8014476:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 801447a:	e004      	b.n	8014486 <tcp_receive+0x172>
 801447c:	687b      	ldr	r3, [r7, #4]
 801447e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8014482:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
              }
              if (pcb->dupacks >= 3) {
 8014486:	687b      	ldr	r3, [r7, #4]
 8014488:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 801448c:	2b02      	cmp	r3, #2
 801448e:	d902      	bls.n	8014496 <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 8014490:	6878      	ldr	r0, [r7, #4]
 8014492:	f001 feed 	bl	8016270 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 8014496:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8014498:	2b00      	cmp	r3, #0
 801449a:	f040 8161 	bne.w	8014760 <tcp_receive+0x44c>
        pcb->dupacks = 0;
 801449e:	687b      	ldr	r3, [r7, #4]
 80144a0:	2200      	movs	r2, #0
 80144a2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80144a6:	e15b      	b.n	8014760 <tcp_receive+0x44c>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 80144a8:	4b36      	ldr	r3, [pc, #216]	; (8014584 <tcp_receive+0x270>)
 80144aa:	681a      	ldr	r2, [r3, #0]
 80144ac:	687b      	ldr	r3, [r7, #4]
 80144ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80144b0:	1ad3      	subs	r3, r2, r3
 80144b2:	3b01      	subs	r3, #1
 80144b4:	2b00      	cmp	r3, #0
 80144b6:	f2c0 814e 	blt.w	8014756 <tcp_receive+0x442>
 80144ba:	4b32      	ldr	r3, [pc, #200]	; (8014584 <tcp_receive+0x270>)
 80144bc:	681a      	ldr	r2, [r3, #0]
 80144be:	687b      	ldr	r3, [r7, #4]
 80144c0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80144c2:	1ad3      	subs	r3, r2, r3
 80144c4:	2b00      	cmp	r3, #0
 80144c6:	f300 8146 	bgt.w	8014756 <tcp_receive+0x442>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 80144ca:	687b      	ldr	r3, [r7, #4]
 80144cc:	8b5b      	ldrh	r3, [r3, #26]
 80144ce:	f003 0304 	and.w	r3, r3, #4
 80144d2:	2b00      	cmp	r3, #0
 80144d4:	d010      	beq.n	80144f8 <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 80144d6:	687b      	ldr	r3, [r7, #4]
 80144d8:	8b5b      	ldrh	r3, [r3, #26]
 80144da:	f023 0304 	bic.w	r3, r3, #4
 80144de:	b29a      	uxth	r2, r3
 80144e0:	687b      	ldr	r3, [r7, #4]
 80144e2:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 80144e4:	687b      	ldr	r3, [r7, #4]
 80144e6:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 80144ea:	687b      	ldr	r3, [r7, #4]
 80144ec:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        pcb->bytes_acked = 0;
 80144f0:	687b      	ldr	r3, [r7, #4]
 80144f2:	2200      	movs	r2, #0
 80144f4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 80144f8:	687b      	ldr	r3, [r7, #4]
 80144fa:	2200      	movs	r2, #0
 80144fc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8014500:	687b      	ldr	r3, [r7, #4]
 8014502:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8014506:	10db      	asrs	r3, r3, #3
 8014508:	b21b      	sxth	r3, r3
 801450a:	b29a      	uxth	r2, r3
 801450c:	687b      	ldr	r3, [r7, #4]
 801450e:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8014512:	b29b      	uxth	r3, r3
 8014514:	4413      	add	r3, r2
 8014516:	b29b      	uxth	r3, r3
 8014518:	b21a      	sxth	r2, r3
 801451a:	687b      	ldr	r3, [r7, #4]
 801451c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 8014520:	4b18      	ldr	r3, [pc, #96]	; (8014584 <tcp_receive+0x270>)
 8014522:	681b      	ldr	r3, [r3, #0]
 8014524:	b29a      	uxth	r2, r3
 8014526:	687b      	ldr	r3, [r7, #4]
 8014528:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801452a:	b29b      	uxth	r3, r3
 801452c:	1ad3      	subs	r3, r2, r3
 801452e:	85fb      	strh	r3, [r7, #46]	; 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 8014530:	687b      	ldr	r3, [r7, #4]
 8014532:	2200      	movs	r2, #0
 8014534:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 8014538:	4b12      	ldr	r3, [pc, #72]	; (8014584 <tcp_receive+0x270>)
 801453a:	681a      	ldr	r2, [r3, #0]
 801453c:	687b      	ldr	r3, [r7, #4]
 801453e:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 8014540:	687b      	ldr	r3, [r7, #4]
 8014542:	7d1b      	ldrb	r3, [r3, #20]
 8014544:	2b03      	cmp	r3, #3
 8014546:	f240 8097 	bls.w	8014678 <tcp_receive+0x364>
        if (pcb->cwnd < pcb->ssthresh) {
 801454a:	687b      	ldr	r3, [r7, #4]
 801454c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8014550:	687b      	ldr	r3, [r7, #4]
 8014552:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8014556:	429a      	cmp	r2, r3
 8014558:	d245      	bcs.n	80145e6 <tcp_receive+0x2d2>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 801455a:	687b      	ldr	r3, [r7, #4]
 801455c:	8b5b      	ldrh	r3, [r3, #26]
 801455e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8014562:	2b00      	cmp	r3, #0
 8014564:	d014      	beq.n	8014590 <tcp_receive+0x27c>
 8014566:	2301      	movs	r3, #1
 8014568:	e013      	b.n	8014592 <tcp_receive+0x27e>
 801456a:	bf00      	nop
 801456c:	0801dc80 	.word	0x0801dc80
 8014570:	0801dfb0 	.word	0x0801dfb0
 8014574:	0801dccc 	.word	0x0801dccc
 8014578:	0801dfcc 	.word	0x0801dfcc
 801457c:	20007118 	.word	0x20007118
 8014580:	2000710c 	.word	0x2000710c
 8014584:	20007110 	.word	0x20007110
 8014588:	200070fc 	.word	0x200070fc
 801458c:	20007116 	.word	0x20007116
 8014590:	2302      	movs	r3, #2
 8014592:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 8014596:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 801459a:	b29a      	uxth	r2, r3
 801459c:	687b      	ldr	r3, [r7, #4]
 801459e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80145a0:	fb12 f303 	smulbb	r3, r2, r3
 80145a4:	b29b      	uxth	r3, r3
 80145a6:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80145a8:	4293      	cmp	r3, r2
 80145aa:	bf28      	it	cs
 80145ac:	4613      	movcs	r3, r2
 80145ae:	857b      	strh	r3, [r7, #42]	; 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 80145b0:	687b      	ldr	r3, [r7, #4]
 80145b2:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80145b6:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80145b8:	4413      	add	r3, r2
 80145ba:	b29a      	uxth	r2, r3
 80145bc:	687b      	ldr	r3, [r7, #4]
 80145be:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80145c2:	429a      	cmp	r2, r3
 80145c4:	d309      	bcc.n	80145da <tcp_receive+0x2c6>
 80145c6:	687b      	ldr	r3, [r7, #4]
 80145c8:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80145cc:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80145ce:	4413      	add	r3, r2
 80145d0:	b29a      	uxth	r2, r3
 80145d2:	687b      	ldr	r3, [r7, #4]
 80145d4:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 80145d8:	e04e      	b.n	8014678 <tcp_receive+0x364>
 80145da:	687b      	ldr	r3, [r7, #4]
 80145dc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80145e0:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 80145e4:	e048      	b.n	8014678 <tcp_receive+0x364>
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 80145e6:	687b      	ldr	r3, [r7, #4]
 80145e8:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 80145ec:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80145ee:	4413      	add	r3, r2
 80145f0:	b29a      	uxth	r2, r3
 80145f2:	687b      	ldr	r3, [r7, #4]
 80145f4:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80145f8:	429a      	cmp	r2, r3
 80145fa:	d309      	bcc.n	8014610 <tcp_receive+0x2fc>
 80145fc:	687b      	ldr	r3, [r7, #4]
 80145fe:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8014602:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8014604:	4413      	add	r3, r2
 8014606:	b29a      	uxth	r2, r3
 8014608:	687b      	ldr	r3, [r7, #4]
 801460a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 801460e:	e004      	b.n	801461a <tcp_receive+0x306>
 8014610:	687b      	ldr	r3, [r7, #4]
 8014612:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8014616:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 801461a:	687b      	ldr	r3, [r7, #4]
 801461c:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8014620:	687b      	ldr	r3, [r7, #4]
 8014622:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8014626:	429a      	cmp	r2, r3
 8014628:	d326      	bcc.n	8014678 <tcp_receive+0x364>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 801462a:	687b      	ldr	r3, [r7, #4]
 801462c:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8014630:	687b      	ldr	r3, [r7, #4]
 8014632:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8014636:	1ad3      	subs	r3, r2, r3
 8014638:	b29a      	uxth	r2, r3
 801463a:	687b      	ldr	r3, [r7, #4]
 801463c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 8014640:	687b      	ldr	r3, [r7, #4]
 8014642:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8014646:	687b      	ldr	r3, [r7, #4]
 8014648:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801464a:	4413      	add	r3, r2
 801464c:	b29a      	uxth	r2, r3
 801464e:	687b      	ldr	r3, [r7, #4]
 8014650:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8014654:	429a      	cmp	r2, r3
 8014656:	d30a      	bcc.n	801466e <tcp_receive+0x35a>
 8014658:	687b      	ldr	r3, [r7, #4]
 801465a:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 801465e:	687b      	ldr	r3, [r7, #4]
 8014660:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8014662:	4413      	add	r3, r2
 8014664:	b29a      	uxth	r2, r3
 8014666:	687b      	ldr	r3, [r7, #4]
 8014668:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 801466c:	e004      	b.n	8014678 <tcp_receive+0x364>
 801466e:	687b      	ldr	r3, [r7, #4]
 8014670:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8014674:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 8014678:	687b      	ldr	r3, [r7, #4]
 801467a:	6f19      	ldr	r1, [r3, #112]	; 0x70
 801467c:	687b      	ldr	r3, [r7, #4]
 801467e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014680:	4a98      	ldr	r2, [pc, #608]	; (80148e4 <tcp_receive+0x5d0>)
 8014682:	6878      	ldr	r0, [r7, #4]
 8014684:	f7ff fdca 	bl	801421c <tcp_free_acked_segments>
 8014688:	4602      	mov	r2, r0
 801468a:	687b      	ldr	r3, [r7, #4]
 801468c:	671a      	str	r2, [r3, #112]	; 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 801468e:	687b      	ldr	r3, [r7, #4]
 8014690:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 8014692:	687b      	ldr	r3, [r7, #4]
 8014694:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8014696:	4a94      	ldr	r2, [pc, #592]	; (80148e8 <tcp_receive+0x5d4>)
 8014698:	6878      	ldr	r0, [r7, #4]
 801469a:	f7ff fdbf 	bl	801421c <tcp_free_acked_segments>
 801469e:	4602      	mov	r2, r0
 80146a0:	687b      	ldr	r3, [r7, #4]
 80146a2:	66da      	str	r2, [r3, #108]	; 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 80146a4:	687b      	ldr	r3, [r7, #4]
 80146a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80146a8:	2b00      	cmp	r3, #0
 80146aa:	d104      	bne.n	80146b6 <tcp_receive+0x3a2>
        pcb->rtime = -1;
 80146ac:	687b      	ldr	r3, [r7, #4]
 80146ae:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80146b2:	861a      	strh	r2, [r3, #48]	; 0x30
 80146b4:	e002      	b.n	80146bc <tcp_receive+0x3a8>
      } else {
        pcb->rtime = 0;
 80146b6:	687b      	ldr	r3, [r7, #4]
 80146b8:	2200      	movs	r2, #0
 80146ba:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 80146bc:	687b      	ldr	r3, [r7, #4]
 80146be:	2200      	movs	r2, #0
 80146c0:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 80146c2:	687b      	ldr	r3, [r7, #4]
 80146c4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80146c6:	2b00      	cmp	r3, #0
 80146c8:	d103      	bne.n	80146d2 <tcp_receive+0x3be>
        pcb->unsent_oversize = 0;
 80146ca:	687b      	ldr	r3, [r7, #4]
 80146cc:	2200      	movs	r2, #0
 80146ce:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 80146d2:	687b      	ldr	r3, [r7, #4]
 80146d4:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 80146d8:	4b84      	ldr	r3, [pc, #528]	; (80148ec <tcp_receive+0x5d8>)
 80146da:	881b      	ldrh	r3, [r3, #0]
 80146dc:	4413      	add	r3, r2
 80146de:	b29a      	uxth	r2, r3
 80146e0:	687b      	ldr	r3, [r7, #4]
 80146e2:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 80146e6:	687b      	ldr	r3, [r7, #4]
 80146e8:	8b5b      	ldrh	r3, [r3, #26]
 80146ea:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80146ee:	2b00      	cmp	r3, #0
 80146f0:	d035      	beq.n	801475e <tcp_receive+0x44a>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 80146f2:	687b      	ldr	r3, [r7, #4]
 80146f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80146f6:	2b00      	cmp	r3, #0
 80146f8:	d118      	bne.n	801472c <tcp_receive+0x418>
          if ((pcb->unsent == NULL) ||
 80146fa:	687b      	ldr	r3, [r7, #4]
 80146fc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80146fe:	2b00      	cmp	r3, #0
 8014700:	d00c      	beq.n	801471c <tcp_receive+0x408>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 8014702:	687b      	ldr	r3, [r7, #4]
 8014704:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 8014706:	687b      	ldr	r3, [r7, #4]
 8014708:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801470a:	68db      	ldr	r3, [r3, #12]
 801470c:	685b      	ldr	r3, [r3, #4]
 801470e:	4618      	mov	r0, r3
 8014710:	f7fb f94d 	bl	800f9ae <lwip_htonl>
 8014714:	4603      	mov	r3, r0
 8014716:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 8014718:	2b00      	cmp	r3, #0
 801471a:	dc20      	bgt.n	801475e <tcp_receive+0x44a>
            tcp_clear_flags(pcb, TF_RTO);
 801471c:	687b      	ldr	r3, [r7, #4]
 801471e:	8b5b      	ldrh	r3, [r3, #26]
 8014720:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8014724:	b29a      	uxth	r2, r3
 8014726:	687b      	ldr	r3, [r7, #4]
 8014728:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 801472a:	e018      	b.n	801475e <tcp_receive+0x44a>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 801472c:	687b      	ldr	r3, [r7, #4]
 801472e:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 8014730:	687b      	ldr	r3, [r7, #4]
 8014732:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8014734:	68db      	ldr	r3, [r3, #12]
 8014736:	685b      	ldr	r3, [r3, #4]
 8014738:	4618      	mov	r0, r3
 801473a:	f7fb f938 	bl	800f9ae <lwip_htonl>
 801473e:	4603      	mov	r3, r0
 8014740:	1ae3      	subs	r3, r4, r3
 8014742:	2b00      	cmp	r3, #0
 8014744:	dc0b      	bgt.n	801475e <tcp_receive+0x44a>
          tcp_clear_flags(pcb, TF_RTO);
 8014746:	687b      	ldr	r3, [r7, #4]
 8014748:	8b5b      	ldrh	r3, [r3, #26]
 801474a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 801474e:	b29a      	uxth	r2, r3
 8014750:	687b      	ldr	r3, [r7, #4]
 8014752:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8014754:	e003      	b.n	801475e <tcp_receive+0x44a>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 8014756:	6878      	ldr	r0, [r7, #4]
 8014758:	f001 ff76 	bl	8016648 <tcp_send_empty_ack>
 801475c:	e000      	b.n	8014760 <tcp_receive+0x44c>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 801475e:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 8014760:	687b      	ldr	r3, [r7, #4]
 8014762:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8014764:	2b00      	cmp	r3, #0
 8014766:	d05b      	beq.n	8014820 <tcp_receive+0x50c>
 8014768:	687b      	ldr	r3, [r7, #4]
 801476a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801476c:	4b60      	ldr	r3, [pc, #384]	; (80148f0 <tcp_receive+0x5dc>)
 801476e:	681b      	ldr	r3, [r3, #0]
 8014770:	1ad3      	subs	r3, r2, r3
 8014772:	2b00      	cmp	r3, #0
 8014774:	da54      	bge.n	8014820 <tcp_receive+0x50c>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 8014776:	4b5f      	ldr	r3, [pc, #380]	; (80148f4 <tcp_receive+0x5e0>)
 8014778:	681b      	ldr	r3, [r3, #0]
 801477a:	b29a      	uxth	r2, r3
 801477c:	687b      	ldr	r3, [r7, #4]
 801477e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8014780:	b29b      	uxth	r3, r3
 8014782:	1ad3      	subs	r3, r2, r3
 8014784:	b29b      	uxth	r3, r3
 8014786:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 801478a:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 801478e:	687b      	ldr	r3, [r7, #4]
 8014790:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8014794:	10db      	asrs	r3, r3, #3
 8014796:	b21b      	sxth	r3, r3
 8014798:	b29b      	uxth	r3, r3
 801479a:	1ad3      	subs	r3, r2, r3
 801479c:	b29b      	uxth	r3, r3
 801479e:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 80147a2:	687b      	ldr	r3, [r7, #4]
 80147a4:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 80147a8:	b29a      	uxth	r2, r3
 80147aa:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80147ae:	4413      	add	r3, r2
 80147b0:	b29b      	uxth	r3, r3
 80147b2:	b21a      	sxth	r2, r3
 80147b4:	687b      	ldr	r3, [r7, #4]
 80147b6:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 80147b8:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 80147bc:	2b00      	cmp	r3, #0
 80147be:	da05      	bge.n	80147cc <tcp_receive+0x4b8>
        m = (s16_t) - m;
 80147c0:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80147c4:	425b      	negs	r3, r3
 80147c6:	b29b      	uxth	r3, r3
 80147c8:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 80147cc:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 80147d0:	687b      	ldr	r3, [r7, #4]
 80147d2:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 80147d6:	109b      	asrs	r3, r3, #2
 80147d8:	b21b      	sxth	r3, r3
 80147da:	b29b      	uxth	r3, r3
 80147dc:	1ad3      	subs	r3, r2, r3
 80147de:	b29b      	uxth	r3, r3
 80147e0:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 80147e4:	687b      	ldr	r3, [r7, #4]
 80147e6:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 80147ea:	b29a      	uxth	r2, r3
 80147ec:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80147f0:	4413      	add	r3, r2
 80147f2:	b29b      	uxth	r3, r3
 80147f4:	b21a      	sxth	r2, r3
 80147f6:	687b      	ldr	r3, [r7, #4]
 80147f8:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 80147fa:	687b      	ldr	r3, [r7, #4]
 80147fc:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8014800:	10db      	asrs	r3, r3, #3
 8014802:	b21b      	sxth	r3, r3
 8014804:	b29a      	uxth	r2, r3
 8014806:	687b      	ldr	r3, [r7, #4]
 8014808:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 801480c:	b29b      	uxth	r3, r3
 801480e:	4413      	add	r3, r2
 8014810:	b29b      	uxth	r3, r3
 8014812:	b21a      	sxth	r2, r3
 8014814:	687b      	ldr	r3, [r7, #4]
 8014816:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 801481a:	687b      	ldr	r3, [r7, #4]
 801481c:	2200      	movs	r2, #0
 801481e:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 8014820:	4b35      	ldr	r3, [pc, #212]	; (80148f8 <tcp_receive+0x5e4>)
 8014822:	881b      	ldrh	r3, [r3, #0]
 8014824:	2b00      	cmp	r3, #0
 8014826:	f000 84e2 	beq.w	80151ee <tcp_receive+0xeda>
 801482a:	687b      	ldr	r3, [r7, #4]
 801482c:	7d1b      	ldrb	r3, [r3, #20]
 801482e:	2b06      	cmp	r3, #6
 8014830:	f200 84dd 	bhi.w	80151ee <tcp_receive+0xeda>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8014834:	687b      	ldr	r3, [r7, #4]
 8014836:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8014838:	4b30      	ldr	r3, [pc, #192]	; (80148fc <tcp_receive+0x5e8>)
 801483a:	681b      	ldr	r3, [r3, #0]
 801483c:	1ad3      	subs	r3, r2, r3
 801483e:	3b01      	subs	r3, #1
 8014840:	2b00      	cmp	r3, #0
 8014842:	f2c0 808f 	blt.w	8014964 <tcp_receive+0x650>
 8014846:	687b      	ldr	r3, [r7, #4]
 8014848:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801484a:	4b2b      	ldr	r3, [pc, #172]	; (80148f8 <tcp_receive+0x5e4>)
 801484c:	881b      	ldrh	r3, [r3, #0]
 801484e:	4619      	mov	r1, r3
 8014850:	4b2a      	ldr	r3, [pc, #168]	; (80148fc <tcp_receive+0x5e8>)
 8014852:	681b      	ldr	r3, [r3, #0]
 8014854:	440b      	add	r3, r1
 8014856:	1ad3      	subs	r3, r2, r3
 8014858:	3301      	adds	r3, #1
 801485a:	2b00      	cmp	r3, #0
 801485c:	f300 8082 	bgt.w	8014964 <tcp_receive+0x650>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 8014860:	4b27      	ldr	r3, [pc, #156]	; (8014900 <tcp_receive+0x5ec>)
 8014862:	685b      	ldr	r3, [r3, #4]
 8014864:	647b      	str	r3, [r7, #68]	; 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 8014866:	687b      	ldr	r3, [r7, #4]
 8014868:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801486a:	4b24      	ldr	r3, [pc, #144]	; (80148fc <tcp_receive+0x5e8>)
 801486c:	681b      	ldr	r3, [r3, #0]
 801486e:	1ad3      	subs	r3, r2, r3
 8014870:	627b      	str	r3, [r7, #36]	; 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 8014872:	4b23      	ldr	r3, [pc, #140]	; (8014900 <tcp_receive+0x5ec>)
 8014874:	685b      	ldr	r3, [r3, #4]
 8014876:	2b00      	cmp	r3, #0
 8014878:	d106      	bne.n	8014888 <tcp_receive+0x574>
 801487a:	4b22      	ldr	r3, [pc, #136]	; (8014904 <tcp_receive+0x5f0>)
 801487c:	f240 5294 	movw	r2, #1428	; 0x594
 8014880:	4921      	ldr	r1, [pc, #132]	; (8014908 <tcp_receive+0x5f4>)
 8014882:	4822      	ldr	r0, [pc, #136]	; (801490c <tcp_receive+0x5f8>)
 8014884:	f005 fb38 	bl	8019ef8 <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 8014888:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801488a:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801488e:	4293      	cmp	r3, r2
 8014890:	d906      	bls.n	80148a0 <tcp_receive+0x58c>
 8014892:	4b1c      	ldr	r3, [pc, #112]	; (8014904 <tcp_receive+0x5f0>)
 8014894:	f240 5295 	movw	r2, #1429	; 0x595
 8014898:	491d      	ldr	r1, [pc, #116]	; (8014910 <tcp_receive+0x5fc>)
 801489a:	481c      	ldr	r0, [pc, #112]	; (801490c <tcp_receive+0x5f8>)
 801489c:	f005 fb2c 	bl	8019ef8 <iprintf>
      off = (u16_t)off32;
 80148a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80148a2:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 80148a6:	4b16      	ldr	r3, [pc, #88]	; (8014900 <tcp_receive+0x5ec>)
 80148a8:	685b      	ldr	r3, [r3, #4]
 80148aa:	891b      	ldrh	r3, [r3, #8]
 80148ac:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80148b0:	429a      	cmp	r2, r3
 80148b2:	d906      	bls.n	80148c2 <tcp_receive+0x5ae>
 80148b4:	4b13      	ldr	r3, [pc, #76]	; (8014904 <tcp_receive+0x5f0>)
 80148b6:	f240 5297 	movw	r2, #1431	; 0x597
 80148ba:	4916      	ldr	r1, [pc, #88]	; (8014914 <tcp_receive+0x600>)
 80148bc:	4813      	ldr	r0, [pc, #76]	; (801490c <tcp_receive+0x5f8>)
 80148be:	f005 fb1b 	bl	8019ef8 <iprintf>
      inseg.len -= off;
 80148c2:	4b0f      	ldr	r3, [pc, #60]	; (8014900 <tcp_receive+0x5ec>)
 80148c4:	891a      	ldrh	r2, [r3, #8]
 80148c6:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80148ca:	1ad3      	subs	r3, r2, r3
 80148cc:	b29a      	uxth	r2, r3
 80148ce:	4b0c      	ldr	r3, [pc, #48]	; (8014900 <tcp_receive+0x5ec>)
 80148d0:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 80148d2:	4b0b      	ldr	r3, [pc, #44]	; (8014900 <tcp_receive+0x5ec>)
 80148d4:	685b      	ldr	r3, [r3, #4]
 80148d6:	891a      	ldrh	r2, [r3, #8]
 80148d8:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80148dc:	1ad3      	subs	r3, r2, r3
 80148de:	847b      	strh	r3, [r7, #34]	; 0x22
      while (p->len < off) {
 80148e0:	e02a      	b.n	8014938 <tcp_receive+0x624>
 80148e2:	bf00      	nop
 80148e4:	0801dfe8 	.word	0x0801dfe8
 80148e8:	0801dff0 	.word	0x0801dff0
 80148ec:	20007114 	.word	0x20007114
 80148f0:	20007110 	.word	0x20007110
 80148f4:	200070d4 	.word	0x200070d4
 80148f8:	20007116 	.word	0x20007116
 80148fc:	2000710c 	.word	0x2000710c
 8014900:	200070ec 	.word	0x200070ec
 8014904:	0801dc80 	.word	0x0801dc80
 8014908:	0801dff8 	.word	0x0801dff8
 801490c:	0801dccc 	.word	0x0801dccc
 8014910:	0801e008 	.word	0x0801e008
 8014914:	0801e018 	.word	0x0801e018
        off -= p->len;
 8014918:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801491a:	895b      	ldrh	r3, [r3, #10]
 801491c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8014920:	1ad3      	subs	r3, r2, r3
 8014922:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 8014926:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8014928:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 801492a:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 801492c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801492e:	2200      	movs	r2, #0
 8014930:	815a      	strh	r2, [r3, #10]
        p = p->next;
 8014932:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8014934:	681b      	ldr	r3, [r3, #0]
 8014936:	647b      	str	r3, [r7, #68]	; 0x44
      while (p->len < off) {
 8014938:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801493a:	895b      	ldrh	r3, [r3, #10]
 801493c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8014940:	429a      	cmp	r2, r3
 8014942:	d8e9      	bhi.n	8014918 <tcp_receive+0x604>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 8014944:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8014948:	4619      	mov	r1, r3
 801494a:	6c78      	ldr	r0, [r7, #68]	; 0x44
 801494c:	f7fc fb78 	bl	8011040 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 8014950:	687b      	ldr	r3, [r7, #4]
 8014952:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014954:	4a91      	ldr	r2, [pc, #580]	; (8014b9c <tcp_receive+0x888>)
 8014956:	6013      	str	r3, [r2, #0]
 8014958:	4b91      	ldr	r3, [pc, #580]	; (8014ba0 <tcp_receive+0x88c>)
 801495a:	68db      	ldr	r3, [r3, #12]
 801495c:	4a8f      	ldr	r2, [pc, #572]	; (8014b9c <tcp_receive+0x888>)
 801495e:	6812      	ldr	r2, [r2, #0]
 8014960:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8014962:	e00d      	b.n	8014980 <tcp_receive+0x66c>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 8014964:	4b8d      	ldr	r3, [pc, #564]	; (8014b9c <tcp_receive+0x888>)
 8014966:	681a      	ldr	r2, [r3, #0]
 8014968:	687b      	ldr	r3, [r7, #4]
 801496a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801496c:	1ad3      	subs	r3, r2, r3
 801496e:	2b00      	cmp	r3, #0
 8014970:	da06      	bge.n	8014980 <tcp_receive+0x66c>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 8014972:	687b      	ldr	r3, [r7, #4]
 8014974:	8b5b      	ldrh	r3, [r3, #26]
 8014976:	f043 0302 	orr.w	r3, r3, #2
 801497a:	b29a      	uxth	r2, r3
 801497c:	687b      	ldr	r3, [r7, #4]
 801497e:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8014980:	4b86      	ldr	r3, [pc, #536]	; (8014b9c <tcp_receive+0x888>)
 8014982:	681a      	ldr	r2, [r3, #0]
 8014984:	687b      	ldr	r3, [r7, #4]
 8014986:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014988:	1ad3      	subs	r3, r2, r3
 801498a:	2b00      	cmp	r3, #0
 801498c:	f2c0 842a 	blt.w	80151e4 <tcp_receive+0xed0>
 8014990:	4b82      	ldr	r3, [pc, #520]	; (8014b9c <tcp_receive+0x888>)
 8014992:	681a      	ldr	r2, [r3, #0]
 8014994:	687b      	ldr	r3, [r7, #4]
 8014996:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014998:	6879      	ldr	r1, [r7, #4]
 801499a:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 801499c:	440b      	add	r3, r1
 801499e:	1ad3      	subs	r3, r2, r3
 80149a0:	3301      	adds	r3, #1
 80149a2:	2b00      	cmp	r3, #0
 80149a4:	f300 841e 	bgt.w	80151e4 <tcp_receive+0xed0>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 80149a8:	687b      	ldr	r3, [r7, #4]
 80149aa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80149ac:	4b7b      	ldr	r3, [pc, #492]	; (8014b9c <tcp_receive+0x888>)
 80149ae:	681b      	ldr	r3, [r3, #0]
 80149b0:	429a      	cmp	r2, r3
 80149b2:	f040 829a 	bne.w	8014eea <tcp_receive+0xbd6>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 80149b6:	4b7a      	ldr	r3, [pc, #488]	; (8014ba0 <tcp_receive+0x88c>)
 80149b8:	891c      	ldrh	r4, [r3, #8]
 80149ba:	4b79      	ldr	r3, [pc, #484]	; (8014ba0 <tcp_receive+0x88c>)
 80149bc:	68db      	ldr	r3, [r3, #12]
 80149be:	899b      	ldrh	r3, [r3, #12]
 80149c0:	b29b      	uxth	r3, r3
 80149c2:	4618      	mov	r0, r3
 80149c4:	f7fa ffde 	bl	800f984 <lwip_htons>
 80149c8:	4603      	mov	r3, r0
 80149ca:	b2db      	uxtb	r3, r3
 80149cc:	f003 0303 	and.w	r3, r3, #3
 80149d0:	2b00      	cmp	r3, #0
 80149d2:	d001      	beq.n	80149d8 <tcp_receive+0x6c4>
 80149d4:	2301      	movs	r3, #1
 80149d6:	e000      	b.n	80149da <tcp_receive+0x6c6>
 80149d8:	2300      	movs	r3, #0
 80149da:	4423      	add	r3, r4
 80149dc:	b29a      	uxth	r2, r3
 80149de:	4b71      	ldr	r3, [pc, #452]	; (8014ba4 <tcp_receive+0x890>)
 80149e0:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 80149e2:	687b      	ldr	r3, [r7, #4]
 80149e4:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 80149e6:	4b6f      	ldr	r3, [pc, #444]	; (8014ba4 <tcp_receive+0x890>)
 80149e8:	881b      	ldrh	r3, [r3, #0]
 80149ea:	429a      	cmp	r2, r3
 80149ec:	d275      	bcs.n	8014ada <tcp_receive+0x7c6>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 80149ee:	4b6c      	ldr	r3, [pc, #432]	; (8014ba0 <tcp_receive+0x88c>)
 80149f0:	68db      	ldr	r3, [r3, #12]
 80149f2:	899b      	ldrh	r3, [r3, #12]
 80149f4:	b29b      	uxth	r3, r3
 80149f6:	4618      	mov	r0, r3
 80149f8:	f7fa ffc4 	bl	800f984 <lwip_htons>
 80149fc:	4603      	mov	r3, r0
 80149fe:	b2db      	uxtb	r3, r3
 8014a00:	f003 0301 	and.w	r3, r3, #1
 8014a04:	2b00      	cmp	r3, #0
 8014a06:	d01f      	beq.n	8014a48 <tcp_receive+0x734>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 8014a08:	4b65      	ldr	r3, [pc, #404]	; (8014ba0 <tcp_receive+0x88c>)
 8014a0a:	68db      	ldr	r3, [r3, #12]
 8014a0c:	899b      	ldrh	r3, [r3, #12]
 8014a0e:	b29b      	uxth	r3, r3
 8014a10:	b21b      	sxth	r3, r3
 8014a12:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8014a16:	b21c      	sxth	r4, r3
 8014a18:	4b61      	ldr	r3, [pc, #388]	; (8014ba0 <tcp_receive+0x88c>)
 8014a1a:	68db      	ldr	r3, [r3, #12]
 8014a1c:	899b      	ldrh	r3, [r3, #12]
 8014a1e:	b29b      	uxth	r3, r3
 8014a20:	4618      	mov	r0, r3
 8014a22:	f7fa ffaf 	bl	800f984 <lwip_htons>
 8014a26:	4603      	mov	r3, r0
 8014a28:	b2db      	uxtb	r3, r3
 8014a2a:	b29b      	uxth	r3, r3
 8014a2c:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8014a30:	b29b      	uxth	r3, r3
 8014a32:	4618      	mov	r0, r3
 8014a34:	f7fa ffa6 	bl	800f984 <lwip_htons>
 8014a38:	4603      	mov	r3, r0
 8014a3a:	b21b      	sxth	r3, r3
 8014a3c:	4323      	orrs	r3, r4
 8014a3e:	b21a      	sxth	r2, r3
 8014a40:	4b57      	ldr	r3, [pc, #348]	; (8014ba0 <tcp_receive+0x88c>)
 8014a42:	68db      	ldr	r3, [r3, #12]
 8014a44:	b292      	uxth	r2, r2
 8014a46:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 8014a48:	687b      	ldr	r3, [r7, #4]
 8014a4a:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8014a4c:	4b54      	ldr	r3, [pc, #336]	; (8014ba0 <tcp_receive+0x88c>)
 8014a4e:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8014a50:	4b53      	ldr	r3, [pc, #332]	; (8014ba0 <tcp_receive+0x88c>)
 8014a52:	68db      	ldr	r3, [r3, #12]
 8014a54:	899b      	ldrh	r3, [r3, #12]
 8014a56:	b29b      	uxth	r3, r3
 8014a58:	4618      	mov	r0, r3
 8014a5a:	f7fa ff93 	bl	800f984 <lwip_htons>
 8014a5e:	4603      	mov	r3, r0
 8014a60:	b2db      	uxtb	r3, r3
 8014a62:	f003 0302 	and.w	r3, r3, #2
 8014a66:	2b00      	cmp	r3, #0
 8014a68:	d005      	beq.n	8014a76 <tcp_receive+0x762>
            inseg.len -= 1;
 8014a6a:	4b4d      	ldr	r3, [pc, #308]	; (8014ba0 <tcp_receive+0x88c>)
 8014a6c:	891b      	ldrh	r3, [r3, #8]
 8014a6e:	3b01      	subs	r3, #1
 8014a70:	b29a      	uxth	r2, r3
 8014a72:	4b4b      	ldr	r3, [pc, #300]	; (8014ba0 <tcp_receive+0x88c>)
 8014a74:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 8014a76:	4b4a      	ldr	r3, [pc, #296]	; (8014ba0 <tcp_receive+0x88c>)
 8014a78:	685b      	ldr	r3, [r3, #4]
 8014a7a:	4a49      	ldr	r2, [pc, #292]	; (8014ba0 <tcp_receive+0x88c>)
 8014a7c:	8912      	ldrh	r2, [r2, #8]
 8014a7e:	4611      	mov	r1, r2
 8014a80:	4618      	mov	r0, r3
 8014a82:	f7fc f9df 	bl	8010e44 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 8014a86:	4b46      	ldr	r3, [pc, #280]	; (8014ba0 <tcp_receive+0x88c>)
 8014a88:	891c      	ldrh	r4, [r3, #8]
 8014a8a:	4b45      	ldr	r3, [pc, #276]	; (8014ba0 <tcp_receive+0x88c>)
 8014a8c:	68db      	ldr	r3, [r3, #12]
 8014a8e:	899b      	ldrh	r3, [r3, #12]
 8014a90:	b29b      	uxth	r3, r3
 8014a92:	4618      	mov	r0, r3
 8014a94:	f7fa ff76 	bl	800f984 <lwip_htons>
 8014a98:	4603      	mov	r3, r0
 8014a9a:	b2db      	uxtb	r3, r3
 8014a9c:	f003 0303 	and.w	r3, r3, #3
 8014aa0:	2b00      	cmp	r3, #0
 8014aa2:	d001      	beq.n	8014aa8 <tcp_receive+0x794>
 8014aa4:	2301      	movs	r3, #1
 8014aa6:	e000      	b.n	8014aaa <tcp_receive+0x796>
 8014aa8:	2300      	movs	r3, #0
 8014aaa:	4423      	add	r3, r4
 8014aac:	b29a      	uxth	r2, r3
 8014aae:	4b3d      	ldr	r3, [pc, #244]	; (8014ba4 <tcp_receive+0x890>)
 8014ab0:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8014ab2:	4b3c      	ldr	r3, [pc, #240]	; (8014ba4 <tcp_receive+0x890>)
 8014ab4:	881b      	ldrh	r3, [r3, #0]
 8014ab6:	461a      	mov	r2, r3
 8014ab8:	4b38      	ldr	r3, [pc, #224]	; (8014b9c <tcp_receive+0x888>)
 8014aba:	681b      	ldr	r3, [r3, #0]
 8014abc:	441a      	add	r2, r3
 8014abe:	687b      	ldr	r3, [r7, #4]
 8014ac0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014ac2:	6879      	ldr	r1, [r7, #4]
 8014ac4:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8014ac6:	440b      	add	r3, r1
 8014ac8:	429a      	cmp	r2, r3
 8014aca:	d006      	beq.n	8014ada <tcp_receive+0x7c6>
 8014acc:	4b36      	ldr	r3, [pc, #216]	; (8014ba8 <tcp_receive+0x894>)
 8014ace:	f240 52cb 	movw	r2, #1483	; 0x5cb
 8014ad2:	4936      	ldr	r1, [pc, #216]	; (8014bac <tcp_receive+0x898>)
 8014ad4:	4836      	ldr	r0, [pc, #216]	; (8014bb0 <tcp_receive+0x89c>)
 8014ad6:	f005 fa0f 	bl	8019ef8 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 8014ada:	687b      	ldr	r3, [r7, #4]
 8014adc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8014ade:	2b00      	cmp	r3, #0
 8014ae0:	f000 80e7 	beq.w	8014cb2 <tcp_receive+0x99e>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8014ae4:	4b2e      	ldr	r3, [pc, #184]	; (8014ba0 <tcp_receive+0x88c>)
 8014ae6:	68db      	ldr	r3, [r3, #12]
 8014ae8:	899b      	ldrh	r3, [r3, #12]
 8014aea:	b29b      	uxth	r3, r3
 8014aec:	4618      	mov	r0, r3
 8014aee:	f7fa ff49 	bl	800f984 <lwip_htons>
 8014af2:	4603      	mov	r3, r0
 8014af4:	b2db      	uxtb	r3, r3
 8014af6:	f003 0301 	and.w	r3, r3, #1
 8014afa:	2b00      	cmp	r3, #0
 8014afc:	d010      	beq.n	8014b20 <tcp_receive+0x80c>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 8014afe:	e00a      	b.n	8014b16 <tcp_receive+0x802>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 8014b00:	687b      	ldr	r3, [r7, #4]
 8014b02:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8014b04:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 8014b06:	687b      	ldr	r3, [r7, #4]
 8014b08:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8014b0a:	681a      	ldr	r2, [r3, #0]
 8014b0c:	687b      	ldr	r3, [r7, #4]
 8014b0e:	675a      	str	r2, [r3, #116]	; 0x74
              tcp_seg_free(old_ooseq);
 8014b10:	68f8      	ldr	r0, [r7, #12]
 8014b12:	f7fd fd92 	bl	801263a <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 8014b16:	687b      	ldr	r3, [r7, #4]
 8014b18:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8014b1a:	2b00      	cmp	r3, #0
 8014b1c:	d1f0      	bne.n	8014b00 <tcp_receive+0x7ec>
 8014b1e:	e0c8      	b.n	8014cb2 <tcp_receive+0x99e>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 8014b20:	687b      	ldr	r3, [r7, #4]
 8014b22:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8014b24:	63fb      	str	r3, [r7, #60]	; 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 8014b26:	e052      	b.n	8014bce <tcp_receive+0x8ba>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8014b28:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014b2a:	68db      	ldr	r3, [r3, #12]
 8014b2c:	899b      	ldrh	r3, [r3, #12]
 8014b2e:	b29b      	uxth	r3, r3
 8014b30:	4618      	mov	r0, r3
 8014b32:	f7fa ff27 	bl	800f984 <lwip_htons>
 8014b36:	4603      	mov	r3, r0
 8014b38:	b2db      	uxtb	r3, r3
 8014b3a:	f003 0301 	and.w	r3, r3, #1
 8014b3e:	2b00      	cmp	r3, #0
 8014b40:	d03d      	beq.n	8014bbe <tcp_receive+0x8aa>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 8014b42:	4b17      	ldr	r3, [pc, #92]	; (8014ba0 <tcp_receive+0x88c>)
 8014b44:	68db      	ldr	r3, [r3, #12]
 8014b46:	899b      	ldrh	r3, [r3, #12]
 8014b48:	b29b      	uxth	r3, r3
 8014b4a:	4618      	mov	r0, r3
 8014b4c:	f7fa ff1a 	bl	800f984 <lwip_htons>
 8014b50:	4603      	mov	r3, r0
 8014b52:	b2db      	uxtb	r3, r3
 8014b54:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8014b58:	2b00      	cmp	r3, #0
 8014b5a:	d130      	bne.n	8014bbe <tcp_receive+0x8aa>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 8014b5c:	4b10      	ldr	r3, [pc, #64]	; (8014ba0 <tcp_receive+0x88c>)
 8014b5e:	68db      	ldr	r3, [r3, #12]
 8014b60:	899b      	ldrh	r3, [r3, #12]
 8014b62:	b29c      	uxth	r4, r3
 8014b64:	2001      	movs	r0, #1
 8014b66:	f7fa ff0d 	bl	800f984 <lwip_htons>
 8014b6a:	4603      	mov	r3, r0
 8014b6c:	461a      	mov	r2, r3
 8014b6e:	4b0c      	ldr	r3, [pc, #48]	; (8014ba0 <tcp_receive+0x88c>)
 8014b70:	68db      	ldr	r3, [r3, #12]
 8014b72:	4322      	orrs	r2, r4
 8014b74:	b292      	uxth	r2, r2
 8014b76:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 8014b78:	4b09      	ldr	r3, [pc, #36]	; (8014ba0 <tcp_receive+0x88c>)
 8014b7a:	891c      	ldrh	r4, [r3, #8]
 8014b7c:	4b08      	ldr	r3, [pc, #32]	; (8014ba0 <tcp_receive+0x88c>)
 8014b7e:	68db      	ldr	r3, [r3, #12]
 8014b80:	899b      	ldrh	r3, [r3, #12]
 8014b82:	b29b      	uxth	r3, r3
 8014b84:	4618      	mov	r0, r3
 8014b86:	f7fa fefd 	bl	800f984 <lwip_htons>
 8014b8a:	4603      	mov	r3, r0
 8014b8c:	b2db      	uxtb	r3, r3
 8014b8e:	f003 0303 	and.w	r3, r3, #3
 8014b92:	2b00      	cmp	r3, #0
 8014b94:	d00e      	beq.n	8014bb4 <tcp_receive+0x8a0>
 8014b96:	2301      	movs	r3, #1
 8014b98:	e00d      	b.n	8014bb6 <tcp_receive+0x8a2>
 8014b9a:	bf00      	nop
 8014b9c:	2000710c 	.word	0x2000710c
 8014ba0:	200070ec 	.word	0x200070ec
 8014ba4:	20007116 	.word	0x20007116
 8014ba8:	0801dc80 	.word	0x0801dc80
 8014bac:	0801e028 	.word	0x0801e028
 8014bb0:	0801dccc 	.word	0x0801dccc
 8014bb4:	2300      	movs	r3, #0
 8014bb6:	4423      	add	r3, r4
 8014bb8:	b29a      	uxth	r2, r3
 8014bba:	4b98      	ldr	r3, [pc, #608]	; (8014e1c <tcp_receive+0xb08>)
 8014bbc:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 8014bbe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014bc0:	613b      	str	r3, [r7, #16]
              next = next->next;
 8014bc2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014bc4:	681b      	ldr	r3, [r3, #0]
 8014bc6:	63fb      	str	r3, [r7, #60]	; 0x3c
              tcp_seg_free(tmp);
 8014bc8:	6938      	ldr	r0, [r7, #16]
 8014bca:	f7fd fd36 	bl	801263a <tcp_seg_free>
            while (next &&
 8014bce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014bd0:	2b00      	cmp	r3, #0
 8014bd2:	d00e      	beq.n	8014bf2 <tcp_receive+0x8de>
                   TCP_SEQ_GEQ(seqno + tcplen,
 8014bd4:	4b91      	ldr	r3, [pc, #580]	; (8014e1c <tcp_receive+0xb08>)
 8014bd6:	881b      	ldrh	r3, [r3, #0]
 8014bd8:	461a      	mov	r2, r3
 8014bda:	4b91      	ldr	r3, [pc, #580]	; (8014e20 <tcp_receive+0xb0c>)
 8014bdc:	681b      	ldr	r3, [r3, #0]
 8014bde:	441a      	add	r2, r3
 8014be0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014be2:	68db      	ldr	r3, [r3, #12]
 8014be4:	685b      	ldr	r3, [r3, #4]
 8014be6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8014be8:	8909      	ldrh	r1, [r1, #8]
 8014bea:	440b      	add	r3, r1
 8014bec:	1ad3      	subs	r3, r2, r3
            while (next &&
 8014bee:	2b00      	cmp	r3, #0
 8014bf0:	da9a      	bge.n	8014b28 <tcp_receive+0x814>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 8014bf2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014bf4:	2b00      	cmp	r3, #0
 8014bf6:	d059      	beq.n	8014cac <tcp_receive+0x998>
                TCP_SEQ_GT(seqno + tcplen,
 8014bf8:	4b88      	ldr	r3, [pc, #544]	; (8014e1c <tcp_receive+0xb08>)
 8014bfa:	881b      	ldrh	r3, [r3, #0]
 8014bfc:	461a      	mov	r2, r3
 8014bfe:	4b88      	ldr	r3, [pc, #544]	; (8014e20 <tcp_receive+0xb0c>)
 8014c00:	681b      	ldr	r3, [r3, #0]
 8014c02:	441a      	add	r2, r3
 8014c04:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014c06:	68db      	ldr	r3, [r3, #12]
 8014c08:	685b      	ldr	r3, [r3, #4]
 8014c0a:	1ad3      	subs	r3, r2, r3
            if (next &&
 8014c0c:	2b00      	cmp	r3, #0
 8014c0e:	dd4d      	ble.n	8014cac <tcp_receive+0x998>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 8014c10:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014c12:	68db      	ldr	r3, [r3, #12]
 8014c14:	685b      	ldr	r3, [r3, #4]
 8014c16:	b29a      	uxth	r2, r3
 8014c18:	4b81      	ldr	r3, [pc, #516]	; (8014e20 <tcp_receive+0xb0c>)
 8014c1a:	681b      	ldr	r3, [r3, #0]
 8014c1c:	b29b      	uxth	r3, r3
 8014c1e:	1ad3      	subs	r3, r2, r3
 8014c20:	b29a      	uxth	r2, r3
 8014c22:	4b80      	ldr	r3, [pc, #512]	; (8014e24 <tcp_receive+0xb10>)
 8014c24:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8014c26:	4b7f      	ldr	r3, [pc, #508]	; (8014e24 <tcp_receive+0xb10>)
 8014c28:	68db      	ldr	r3, [r3, #12]
 8014c2a:	899b      	ldrh	r3, [r3, #12]
 8014c2c:	b29b      	uxth	r3, r3
 8014c2e:	4618      	mov	r0, r3
 8014c30:	f7fa fea8 	bl	800f984 <lwip_htons>
 8014c34:	4603      	mov	r3, r0
 8014c36:	b2db      	uxtb	r3, r3
 8014c38:	f003 0302 	and.w	r3, r3, #2
 8014c3c:	2b00      	cmp	r3, #0
 8014c3e:	d005      	beq.n	8014c4c <tcp_receive+0x938>
                inseg.len -= 1;
 8014c40:	4b78      	ldr	r3, [pc, #480]	; (8014e24 <tcp_receive+0xb10>)
 8014c42:	891b      	ldrh	r3, [r3, #8]
 8014c44:	3b01      	subs	r3, #1
 8014c46:	b29a      	uxth	r2, r3
 8014c48:	4b76      	ldr	r3, [pc, #472]	; (8014e24 <tcp_receive+0xb10>)
 8014c4a:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 8014c4c:	4b75      	ldr	r3, [pc, #468]	; (8014e24 <tcp_receive+0xb10>)
 8014c4e:	685b      	ldr	r3, [r3, #4]
 8014c50:	4a74      	ldr	r2, [pc, #464]	; (8014e24 <tcp_receive+0xb10>)
 8014c52:	8912      	ldrh	r2, [r2, #8]
 8014c54:	4611      	mov	r1, r2
 8014c56:	4618      	mov	r0, r3
 8014c58:	f7fc f8f4 	bl	8010e44 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 8014c5c:	4b71      	ldr	r3, [pc, #452]	; (8014e24 <tcp_receive+0xb10>)
 8014c5e:	891c      	ldrh	r4, [r3, #8]
 8014c60:	4b70      	ldr	r3, [pc, #448]	; (8014e24 <tcp_receive+0xb10>)
 8014c62:	68db      	ldr	r3, [r3, #12]
 8014c64:	899b      	ldrh	r3, [r3, #12]
 8014c66:	b29b      	uxth	r3, r3
 8014c68:	4618      	mov	r0, r3
 8014c6a:	f7fa fe8b 	bl	800f984 <lwip_htons>
 8014c6e:	4603      	mov	r3, r0
 8014c70:	b2db      	uxtb	r3, r3
 8014c72:	f003 0303 	and.w	r3, r3, #3
 8014c76:	2b00      	cmp	r3, #0
 8014c78:	d001      	beq.n	8014c7e <tcp_receive+0x96a>
 8014c7a:	2301      	movs	r3, #1
 8014c7c:	e000      	b.n	8014c80 <tcp_receive+0x96c>
 8014c7e:	2300      	movs	r3, #0
 8014c80:	4423      	add	r3, r4
 8014c82:	b29a      	uxth	r2, r3
 8014c84:	4b65      	ldr	r3, [pc, #404]	; (8014e1c <tcp_receive+0xb08>)
 8014c86:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 8014c88:	4b64      	ldr	r3, [pc, #400]	; (8014e1c <tcp_receive+0xb08>)
 8014c8a:	881b      	ldrh	r3, [r3, #0]
 8014c8c:	461a      	mov	r2, r3
 8014c8e:	4b64      	ldr	r3, [pc, #400]	; (8014e20 <tcp_receive+0xb0c>)
 8014c90:	681b      	ldr	r3, [r3, #0]
 8014c92:	441a      	add	r2, r3
 8014c94:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014c96:	68db      	ldr	r3, [r3, #12]
 8014c98:	685b      	ldr	r3, [r3, #4]
 8014c9a:	429a      	cmp	r2, r3
 8014c9c:	d006      	beq.n	8014cac <tcp_receive+0x998>
 8014c9e:	4b62      	ldr	r3, [pc, #392]	; (8014e28 <tcp_receive+0xb14>)
 8014ca0:	f240 52fc 	movw	r2, #1532	; 0x5fc
 8014ca4:	4961      	ldr	r1, [pc, #388]	; (8014e2c <tcp_receive+0xb18>)
 8014ca6:	4862      	ldr	r0, [pc, #392]	; (8014e30 <tcp_receive+0xb1c>)
 8014ca8:	f005 f926 	bl	8019ef8 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 8014cac:	687b      	ldr	r3, [r7, #4]
 8014cae:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8014cb0:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 8014cb2:	4b5a      	ldr	r3, [pc, #360]	; (8014e1c <tcp_receive+0xb08>)
 8014cb4:	881b      	ldrh	r3, [r3, #0]
 8014cb6:	461a      	mov	r2, r3
 8014cb8:	4b59      	ldr	r3, [pc, #356]	; (8014e20 <tcp_receive+0xb0c>)
 8014cba:	681b      	ldr	r3, [r3, #0]
 8014cbc:	441a      	add	r2, r3
 8014cbe:	687b      	ldr	r3, [r7, #4]
 8014cc0:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 8014cc2:	687b      	ldr	r3, [r7, #4]
 8014cc4:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8014cc6:	4b55      	ldr	r3, [pc, #340]	; (8014e1c <tcp_receive+0xb08>)
 8014cc8:	881b      	ldrh	r3, [r3, #0]
 8014cca:	429a      	cmp	r2, r3
 8014ccc:	d206      	bcs.n	8014cdc <tcp_receive+0x9c8>
 8014cce:	4b56      	ldr	r3, [pc, #344]	; (8014e28 <tcp_receive+0xb14>)
 8014cd0:	f240 6207 	movw	r2, #1543	; 0x607
 8014cd4:	4957      	ldr	r1, [pc, #348]	; (8014e34 <tcp_receive+0xb20>)
 8014cd6:	4856      	ldr	r0, [pc, #344]	; (8014e30 <tcp_receive+0xb1c>)
 8014cd8:	f005 f90e 	bl	8019ef8 <iprintf>
        pcb->rcv_wnd -= tcplen;
 8014cdc:	687b      	ldr	r3, [r7, #4]
 8014cde:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8014ce0:	4b4e      	ldr	r3, [pc, #312]	; (8014e1c <tcp_receive+0xb08>)
 8014ce2:	881b      	ldrh	r3, [r3, #0]
 8014ce4:	1ad3      	subs	r3, r2, r3
 8014ce6:	b29a      	uxth	r2, r3
 8014ce8:	687b      	ldr	r3, [r7, #4]
 8014cea:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 8014cec:	6878      	ldr	r0, [r7, #4]
 8014cee:	f7fc ffc1 	bl	8011c74 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 8014cf2:	4b4c      	ldr	r3, [pc, #304]	; (8014e24 <tcp_receive+0xb10>)
 8014cf4:	685b      	ldr	r3, [r3, #4]
 8014cf6:	891b      	ldrh	r3, [r3, #8]
 8014cf8:	2b00      	cmp	r3, #0
 8014cfa:	d006      	beq.n	8014d0a <tcp_receive+0x9f6>
          recv_data = inseg.p;
 8014cfc:	4b49      	ldr	r3, [pc, #292]	; (8014e24 <tcp_receive+0xb10>)
 8014cfe:	685b      	ldr	r3, [r3, #4]
 8014d00:	4a4d      	ldr	r2, [pc, #308]	; (8014e38 <tcp_receive+0xb24>)
 8014d02:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 8014d04:	4b47      	ldr	r3, [pc, #284]	; (8014e24 <tcp_receive+0xb10>)
 8014d06:	2200      	movs	r2, #0
 8014d08:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8014d0a:	4b46      	ldr	r3, [pc, #280]	; (8014e24 <tcp_receive+0xb10>)
 8014d0c:	68db      	ldr	r3, [r3, #12]
 8014d0e:	899b      	ldrh	r3, [r3, #12]
 8014d10:	b29b      	uxth	r3, r3
 8014d12:	4618      	mov	r0, r3
 8014d14:	f7fa fe36 	bl	800f984 <lwip_htons>
 8014d18:	4603      	mov	r3, r0
 8014d1a:	b2db      	uxtb	r3, r3
 8014d1c:	f003 0301 	and.w	r3, r3, #1
 8014d20:	2b00      	cmp	r3, #0
 8014d22:	f000 80b8 	beq.w	8014e96 <tcp_receive+0xb82>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 8014d26:	4b45      	ldr	r3, [pc, #276]	; (8014e3c <tcp_receive+0xb28>)
 8014d28:	781b      	ldrb	r3, [r3, #0]
 8014d2a:	f043 0320 	orr.w	r3, r3, #32
 8014d2e:	b2da      	uxtb	r2, r3
 8014d30:	4b42      	ldr	r3, [pc, #264]	; (8014e3c <tcp_receive+0xb28>)
 8014d32:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 8014d34:	e0af      	b.n	8014e96 <tcp_receive+0xb82>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 8014d36:	687b      	ldr	r3, [r7, #4]
 8014d38:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8014d3a:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 8014d3c:	687b      	ldr	r3, [r7, #4]
 8014d3e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8014d40:	68db      	ldr	r3, [r3, #12]
 8014d42:	685b      	ldr	r3, [r3, #4]
 8014d44:	4a36      	ldr	r2, [pc, #216]	; (8014e20 <tcp_receive+0xb0c>)
 8014d46:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 8014d48:	68bb      	ldr	r3, [r7, #8]
 8014d4a:	891b      	ldrh	r3, [r3, #8]
 8014d4c:	461c      	mov	r4, r3
 8014d4e:	68bb      	ldr	r3, [r7, #8]
 8014d50:	68db      	ldr	r3, [r3, #12]
 8014d52:	899b      	ldrh	r3, [r3, #12]
 8014d54:	b29b      	uxth	r3, r3
 8014d56:	4618      	mov	r0, r3
 8014d58:	f7fa fe14 	bl	800f984 <lwip_htons>
 8014d5c:	4603      	mov	r3, r0
 8014d5e:	b2db      	uxtb	r3, r3
 8014d60:	f003 0303 	and.w	r3, r3, #3
 8014d64:	2b00      	cmp	r3, #0
 8014d66:	d001      	beq.n	8014d6c <tcp_receive+0xa58>
 8014d68:	2301      	movs	r3, #1
 8014d6a:	e000      	b.n	8014d6e <tcp_receive+0xa5a>
 8014d6c:	2300      	movs	r3, #0
 8014d6e:	191a      	adds	r2, r3, r4
 8014d70:	687b      	ldr	r3, [r7, #4]
 8014d72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014d74:	441a      	add	r2, r3
 8014d76:	687b      	ldr	r3, [r7, #4]
 8014d78:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 8014d7a:	687b      	ldr	r3, [r7, #4]
 8014d7c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8014d7e:	461c      	mov	r4, r3
 8014d80:	68bb      	ldr	r3, [r7, #8]
 8014d82:	891b      	ldrh	r3, [r3, #8]
 8014d84:	461d      	mov	r5, r3
 8014d86:	68bb      	ldr	r3, [r7, #8]
 8014d88:	68db      	ldr	r3, [r3, #12]
 8014d8a:	899b      	ldrh	r3, [r3, #12]
 8014d8c:	b29b      	uxth	r3, r3
 8014d8e:	4618      	mov	r0, r3
 8014d90:	f7fa fdf8 	bl	800f984 <lwip_htons>
 8014d94:	4603      	mov	r3, r0
 8014d96:	b2db      	uxtb	r3, r3
 8014d98:	f003 0303 	and.w	r3, r3, #3
 8014d9c:	2b00      	cmp	r3, #0
 8014d9e:	d001      	beq.n	8014da4 <tcp_receive+0xa90>
 8014da0:	2301      	movs	r3, #1
 8014da2:	e000      	b.n	8014da6 <tcp_receive+0xa92>
 8014da4:	2300      	movs	r3, #0
 8014da6:	442b      	add	r3, r5
 8014da8:	429c      	cmp	r4, r3
 8014daa:	d206      	bcs.n	8014dba <tcp_receive+0xaa6>
 8014dac:	4b1e      	ldr	r3, [pc, #120]	; (8014e28 <tcp_receive+0xb14>)
 8014dae:	f240 622b 	movw	r2, #1579	; 0x62b
 8014db2:	4923      	ldr	r1, [pc, #140]	; (8014e40 <tcp_receive+0xb2c>)
 8014db4:	481e      	ldr	r0, [pc, #120]	; (8014e30 <tcp_receive+0xb1c>)
 8014db6:	f005 f89f 	bl	8019ef8 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 8014dba:	68bb      	ldr	r3, [r7, #8]
 8014dbc:	891b      	ldrh	r3, [r3, #8]
 8014dbe:	461c      	mov	r4, r3
 8014dc0:	68bb      	ldr	r3, [r7, #8]
 8014dc2:	68db      	ldr	r3, [r3, #12]
 8014dc4:	899b      	ldrh	r3, [r3, #12]
 8014dc6:	b29b      	uxth	r3, r3
 8014dc8:	4618      	mov	r0, r3
 8014dca:	f7fa fddb 	bl	800f984 <lwip_htons>
 8014dce:	4603      	mov	r3, r0
 8014dd0:	b2db      	uxtb	r3, r3
 8014dd2:	f003 0303 	and.w	r3, r3, #3
 8014dd6:	2b00      	cmp	r3, #0
 8014dd8:	d001      	beq.n	8014dde <tcp_receive+0xaca>
 8014dda:	2301      	movs	r3, #1
 8014ddc:	e000      	b.n	8014de0 <tcp_receive+0xacc>
 8014dde:	2300      	movs	r3, #0
 8014de0:	1919      	adds	r1, r3, r4
 8014de2:	687b      	ldr	r3, [r7, #4]
 8014de4:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8014de6:	b28b      	uxth	r3, r1
 8014de8:	1ad3      	subs	r3, r2, r3
 8014dea:	b29a      	uxth	r2, r3
 8014dec:	687b      	ldr	r3, [r7, #4]
 8014dee:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 8014df0:	6878      	ldr	r0, [r7, #4]
 8014df2:	f7fc ff3f 	bl	8011c74 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 8014df6:	68bb      	ldr	r3, [r7, #8]
 8014df8:	685b      	ldr	r3, [r3, #4]
 8014dfa:	891b      	ldrh	r3, [r3, #8]
 8014dfc:	2b00      	cmp	r3, #0
 8014dfe:	d028      	beq.n	8014e52 <tcp_receive+0xb3e>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 8014e00:	4b0d      	ldr	r3, [pc, #52]	; (8014e38 <tcp_receive+0xb24>)
 8014e02:	681b      	ldr	r3, [r3, #0]
 8014e04:	2b00      	cmp	r3, #0
 8014e06:	d01d      	beq.n	8014e44 <tcp_receive+0xb30>
              pbuf_cat(recv_data, cseg->p);
 8014e08:	4b0b      	ldr	r3, [pc, #44]	; (8014e38 <tcp_receive+0xb24>)
 8014e0a:	681a      	ldr	r2, [r3, #0]
 8014e0c:	68bb      	ldr	r3, [r7, #8]
 8014e0e:	685b      	ldr	r3, [r3, #4]
 8014e10:	4619      	mov	r1, r3
 8014e12:	4610      	mov	r0, r2
 8014e14:	f7fc fa5c 	bl	80112d0 <pbuf_cat>
 8014e18:	e018      	b.n	8014e4c <tcp_receive+0xb38>
 8014e1a:	bf00      	nop
 8014e1c:	20007116 	.word	0x20007116
 8014e20:	2000710c 	.word	0x2000710c
 8014e24:	200070ec 	.word	0x200070ec
 8014e28:	0801dc80 	.word	0x0801dc80
 8014e2c:	0801e060 	.word	0x0801e060
 8014e30:	0801dccc 	.word	0x0801dccc
 8014e34:	0801e09c 	.word	0x0801e09c
 8014e38:	2000711c 	.word	0x2000711c
 8014e3c:	20007119 	.word	0x20007119
 8014e40:	0801e0bc 	.word	0x0801e0bc
            } else {
              recv_data = cseg->p;
 8014e44:	68bb      	ldr	r3, [r7, #8]
 8014e46:	685b      	ldr	r3, [r3, #4]
 8014e48:	4a70      	ldr	r2, [pc, #448]	; (801500c <tcp_receive+0xcf8>)
 8014e4a:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 8014e4c:	68bb      	ldr	r3, [r7, #8]
 8014e4e:	2200      	movs	r2, #0
 8014e50:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8014e52:	68bb      	ldr	r3, [r7, #8]
 8014e54:	68db      	ldr	r3, [r3, #12]
 8014e56:	899b      	ldrh	r3, [r3, #12]
 8014e58:	b29b      	uxth	r3, r3
 8014e5a:	4618      	mov	r0, r3
 8014e5c:	f7fa fd92 	bl	800f984 <lwip_htons>
 8014e60:	4603      	mov	r3, r0
 8014e62:	b2db      	uxtb	r3, r3
 8014e64:	f003 0301 	and.w	r3, r3, #1
 8014e68:	2b00      	cmp	r3, #0
 8014e6a:	d00d      	beq.n	8014e88 <tcp_receive+0xb74>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 8014e6c:	4b68      	ldr	r3, [pc, #416]	; (8015010 <tcp_receive+0xcfc>)
 8014e6e:	781b      	ldrb	r3, [r3, #0]
 8014e70:	f043 0320 	orr.w	r3, r3, #32
 8014e74:	b2da      	uxtb	r2, r3
 8014e76:	4b66      	ldr	r3, [pc, #408]	; (8015010 <tcp_receive+0xcfc>)
 8014e78:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 8014e7a:	687b      	ldr	r3, [r7, #4]
 8014e7c:	7d1b      	ldrb	r3, [r3, #20]
 8014e7e:	2b04      	cmp	r3, #4
 8014e80:	d102      	bne.n	8014e88 <tcp_receive+0xb74>
              pcb->state = CLOSE_WAIT;
 8014e82:	687b      	ldr	r3, [r7, #4]
 8014e84:	2207      	movs	r2, #7
 8014e86:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 8014e88:	68bb      	ldr	r3, [r7, #8]
 8014e8a:	681a      	ldr	r2, [r3, #0]
 8014e8c:	687b      	ldr	r3, [r7, #4]
 8014e8e:	675a      	str	r2, [r3, #116]	; 0x74
          tcp_seg_free(cseg);
 8014e90:	68b8      	ldr	r0, [r7, #8]
 8014e92:	f7fd fbd2 	bl	801263a <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 8014e96:	687b      	ldr	r3, [r7, #4]
 8014e98:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8014e9a:	2b00      	cmp	r3, #0
 8014e9c:	d008      	beq.n	8014eb0 <tcp_receive+0xb9c>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 8014e9e:	687b      	ldr	r3, [r7, #4]
 8014ea0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8014ea2:	68db      	ldr	r3, [r3, #12]
 8014ea4:	685a      	ldr	r2, [r3, #4]
 8014ea6:	687b      	ldr	r3, [r7, #4]
 8014ea8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 8014eaa:	429a      	cmp	r2, r3
 8014eac:	f43f af43 	beq.w	8014d36 <tcp_receive+0xa22>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 8014eb0:	687b      	ldr	r3, [r7, #4]
 8014eb2:	8b5b      	ldrh	r3, [r3, #26]
 8014eb4:	f003 0301 	and.w	r3, r3, #1
 8014eb8:	2b00      	cmp	r3, #0
 8014eba:	d00e      	beq.n	8014eda <tcp_receive+0xbc6>
 8014ebc:	687b      	ldr	r3, [r7, #4]
 8014ebe:	8b5b      	ldrh	r3, [r3, #26]
 8014ec0:	f023 0301 	bic.w	r3, r3, #1
 8014ec4:	b29a      	uxth	r2, r3
 8014ec6:	687b      	ldr	r3, [r7, #4]
 8014ec8:	835a      	strh	r2, [r3, #26]
 8014eca:	687b      	ldr	r3, [r7, #4]
 8014ecc:	8b5b      	ldrh	r3, [r3, #26]
 8014ece:	f043 0302 	orr.w	r3, r3, #2
 8014ed2:	b29a      	uxth	r2, r3
 8014ed4:	687b      	ldr	r3, [r7, #4]
 8014ed6:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8014ed8:	e188      	b.n	80151ec <tcp_receive+0xed8>
        tcp_ack(pcb);
 8014eda:	687b      	ldr	r3, [r7, #4]
 8014edc:	8b5b      	ldrh	r3, [r3, #26]
 8014ede:	f043 0301 	orr.w	r3, r3, #1
 8014ee2:	b29a      	uxth	r2, r3
 8014ee4:	687b      	ldr	r3, [r7, #4]
 8014ee6:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8014ee8:	e180      	b.n	80151ec <tcp_receive+0xed8>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 8014eea:	687b      	ldr	r3, [r7, #4]
 8014eec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8014eee:	2b00      	cmp	r3, #0
 8014ef0:	d106      	bne.n	8014f00 <tcp_receive+0xbec>
          pcb->ooseq = tcp_seg_copy(&inseg);
 8014ef2:	4848      	ldr	r0, [pc, #288]	; (8015014 <tcp_receive+0xd00>)
 8014ef4:	f7fd fbba 	bl	801266c <tcp_seg_copy>
 8014ef8:	4602      	mov	r2, r0
 8014efa:	687b      	ldr	r3, [r7, #4]
 8014efc:	675a      	str	r2, [r3, #116]	; 0x74
 8014efe:	e16d      	b.n	80151dc <tcp_receive+0xec8>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 8014f00:	2300      	movs	r3, #0
 8014f02:	637b      	str	r3, [r7, #52]	; 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8014f04:	687b      	ldr	r3, [r7, #4]
 8014f06:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8014f08:	63bb      	str	r3, [r7, #56]	; 0x38
 8014f0a:	e157      	b.n	80151bc <tcp_receive+0xea8>
            if (seqno == next->tcphdr->seqno) {
 8014f0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014f0e:	68db      	ldr	r3, [r3, #12]
 8014f10:	685a      	ldr	r2, [r3, #4]
 8014f12:	4b41      	ldr	r3, [pc, #260]	; (8015018 <tcp_receive+0xd04>)
 8014f14:	681b      	ldr	r3, [r3, #0]
 8014f16:	429a      	cmp	r2, r3
 8014f18:	d11d      	bne.n	8014f56 <tcp_receive+0xc42>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 8014f1a:	4b3e      	ldr	r3, [pc, #248]	; (8015014 <tcp_receive+0xd00>)
 8014f1c:	891a      	ldrh	r2, [r3, #8]
 8014f1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014f20:	891b      	ldrh	r3, [r3, #8]
 8014f22:	429a      	cmp	r2, r3
 8014f24:	f240 814f 	bls.w	80151c6 <tcp_receive+0xeb2>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8014f28:	483a      	ldr	r0, [pc, #232]	; (8015014 <tcp_receive+0xd00>)
 8014f2a:	f7fd fb9f 	bl	801266c <tcp_seg_copy>
 8014f2e:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 8014f30:	697b      	ldr	r3, [r7, #20]
 8014f32:	2b00      	cmp	r3, #0
 8014f34:	f000 8149 	beq.w	80151ca <tcp_receive+0xeb6>
                  if (prev != NULL) {
 8014f38:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014f3a:	2b00      	cmp	r3, #0
 8014f3c:	d003      	beq.n	8014f46 <tcp_receive+0xc32>
                    prev->next = cseg;
 8014f3e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014f40:	697a      	ldr	r2, [r7, #20]
 8014f42:	601a      	str	r2, [r3, #0]
 8014f44:	e002      	b.n	8014f4c <tcp_receive+0xc38>
                  } else {
                    pcb->ooseq = cseg;
 8014f46:	687b      	ldr	r3, [r7, #4]
 8014f48:	697a      	ldr	r2, [r7, #20]
 8014f4a:	675a      	str	r2, [r3, #116]	; 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 8014f4c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8014f4e:	6978      	ldr	r0, [r7, #20]
 8014f50:	f7ff f8dc 	bl	801410c <tcp_oos_insert_segment>
                }
                break;
 8014f54:	e139      	b.n	80151ca <tcp_receive+0xeb6>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 8014f56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014f58:	2b00      	cmp	r3, #0
 8014f5a:	d117      	bne.n	8014f8c <tcp_receive+0xc78>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 8014f5c:	4b2e      	ldr	r3, [pc, #184]	; (8015018 <tcp_receive+0xd04>)
 8014f5e:	681a      	ldr	r2, [r3, #0]
 8014f60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014f62:	68db      	ldr	r3, [r3, #12]
 8014f64:	685b      	ldr	r3, [r3, #4]
 8014f66:	1ad3      	subs	r3, r2, r3
 8014f68:	2b00      	cmp	r3, #0
 8014f6a:	da57      	bge.n	801501c <tcp_receive+0xd08>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8014f6c:	4829      	ldr	r0, [pc, #164]	; (8015014 <tcp_receive+0xd00>)
 8014f6e:	f7fd fb7d 	bl	801266c <tcp_seg_copy>
 8014f72:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 8014f74:	69bb      	ldr	r3, [r7, #24]
 8014f76:	2b00      	cmp	r3, #0
 8014f78:	f000 8129 	beq.w	80151ce <tcp_receive+0xeba>
                    pcb->ooseq = cseg;
 8014f7c:	687b      	ldr	r3, [r7, #4]
 8014f7e:	69ba      	ldr	r2, [r7, #24]
 8014f80:	675a      	str	r2, [r3, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
 8014f82:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8014f84:	69b8      	ldr	r0, [r7, #24]
 8014f86:	f7ff f8c1 	bl	801410c <tcp_oos_insert_segment>
                  }
                  break;
 8014f8a:	e120      	b.n	80151ce <tcp_receive+0xeba>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 8014f8c:	4b22      	ldr	r3, [pc, #136]	; (8015018 <tcp_receive+0xd04>)
 8014f8e:	681a      	ldr	r2, [r3, #0]
 8014f90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014f92:	68db      	ldr	r3, [r3, #12]
 8014f94:	685b      	ldr	r3, [r3, #4]
 8014f96:	1ad3      	subs	r3, r2, r3
 8014f98:	3b01      	subs	r3, #1
 8014f9a:	2b00      	cmp	r3, #0
 8014f9c:	db3e      	blt.n	801501c <tcp_receive+0xd08>
 8014f9e:	4b1e      	ldr	r3, [pc, #120]	; (8015018 <tcp_receive+0xd04>)
 8014fa0:	681a      	ldr	r2, [r3, #0]
 8014fa2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014fa4:	68db      	ldr	r3, [r3, #12]
 8014fa6:	685b      	ldr	r3, [r3, #4]
 8014fa8:	1ad3      	subs	r3, r2, r3
 8014faa:	3301      	adds	r3, #1
 8014fac:	2b00      	cmp	r3, #0
 8014fae:	dc35      	bgt.n	801501c <tcp_receive+0xd08>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8014fb0:	4818      	ldr	r0, [pc, #96]	; (8015014 <tcp_receive+0xd00>)
 8014fb2:	f7fd fb5b 	bl	801266c <tcp_seg_copy>
 8014fb6:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 8014fb8:	69fb      	ldr	r3, [r7, #28]
 8014fba:	2b00      	cmp	r3, #0
 8014fbc:	f000 8109 	beq.w	80151d2 <tcp_receive+0xebe>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 8014fc0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014fc2:	68db      	ldr	r3, [r3, #12]
 8014fc4:	685b      	ldr	r3, [r3, #4]
 8014fc6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8014fc8:	8912      	ldrh	r2, [r2, #8]
 8014fca:	441a      	add	r2, r3
 8014fcc:	4b12      	ldr	r3, [pc, #72]	; (8015018 <tcp_receive+0xd04>)
 8014fce:	681b      	ldr	r3, [r3, #0]
 8014fd0:	1ad3      	subs	r3, r2, r3
 8014fd2:	2b00      	cmp	r3, #0
 8014fd4:	dd12      	ble.n	8014ffc <tcp_receive+0xce8>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 8014fd6:	4b10      	ldr	r3, [pc, #64]	; (8015018 <tcp_receive+0xd04>)
 8014fd8:	681b      	ldr	r3, [r3, #0]
 8014fda:	b29a      	uxth	r2, r3
 8014fdc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014fde:	68db      	ldr	r3, [r3, #12]
 8014fe0:	685b      	ldr	r3, [r3, #4]
 8014fe2:	b29b      	uxth	r3, r3
 8014fe4:	1ad3      	subs	r3, r2, r3
 8014fe6:	b29a      	uxth	r2, r3
 8014fe8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014fea:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 8014fec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014fee:	685a      	ldr	r2, [r3, #4]
 8014ff0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014ff2:	891b      	ldrh	r3, [r3, #8]
 8014ff4:	4619      	mov	r1, r3
 8014ff6:	4610      	mov	r0, r2
 8014ff8:	f7fb ff24 	bl	8010e44 <pbuf_realloc>
                    }
                    prev->next = cseg;
 8014ffc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014ffe:	69fa      	ldr	r2, [r7, #28]
 8015000:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 8015002:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8015004:	69f8      	ldr	r0, [r7, #28]
 8015006:	f7ff f881 	bl	801410c <tcp_oos_insert_segment>
                  }
                  break;
 801500a:	e0e2      	b.n	80151d2 <tcp_receive+0xebe>
 801500c:	2000711c 	.word	0x2000711c
 8015010:	20007119 	.word	0x20007119
 8015014:	200070ec 	.word	0x200070ec
 8015018:	2000710c 	.word	0x2000710c
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 801501c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801501e:	637b      	str	r3, [r7, #52]	; 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 8015020:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015022:	681b      	ldr	r3, [r3, #0]
 8015024:	2b00      	cmp	r3, #0
 8015026:	f040 80c6 	bne.w	80151b6 <tcp_receive+0xea2>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 801502a:	4b80      	ldr	r3, [pc, #512]	; (801522c <tcp_receive+0xf18>)
 801502c:	681a      	ldr	r2, [r3, #0]
 801502e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015030:	68db      	ldr	r3, [r3, #12]
 8015032:	685b      	ldr	r3, [r3, #4]
 8015034:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 8015036:	2b00      	cmp	r3, #0
 8015038:	f340 80bd 	ble.w	80151b6 <tcp_receive+0xea2>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 801503c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801503e:	68db      	ldr	r3, [r3, #12]
 8015040:	899b      	ldrh	r3, [r3, #12]
 8015042:	b29b      	uxth	r3, r3
 8015044:	4618      	mov	r0, r3
 8015046:	f7fa fc9d 	bl	800f984 <lwip_htons>
 801504a:	4603      	mov	r3, r0
 801504c:	b2db      	uxtb	r3, r3
 801504e:	f003 0301 	and.w	r3, r3, #1
 8015052:	2b00      	cmp	r3, #0
 8015054:	f040 80bf 	bne.w	80151d6 <tcp_receive+0xec2>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 8015058:	4875      	ldr	r0, [pc, #468]	; (8015230 <tcp_receive+0xf1c>)
 801505a:	f7fd fb07 	bl	801266c <tcp_seg_copy>
 801505e:	4602      	mov	r2, r0
 8015060:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015062:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 8015064:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015066:	681b      	ldr	r3, [r3, #0]
 8015068:	2b00      	cmp	r3, #0
 801506a:	f000 80b6 	beq.w	80151da <tcp_receive+0xec6>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 801506e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015070:	68db      	ldr	r3, [r3, #12]
 8015072:	685b      	ldr	r3, [r3, #4]
 8015074:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8015076:	8912      	ldrh	r2, [r2, #8]
 8015078:	441a      	add	r2, r3
 801507a:	4b6c      	ldr	r3, [pc, #432]	; (801522c <tcp_receive+0xf18>)
 801507c:	681b      	ldr	r3, [r3, #0]
 801507e:	1ad3      	subs	r3, r2, r3
 8015080:	2b00      	cmp	r3, #0
 8015082:	dd12      	ble.n	80150aa <tcp_receive+0xd96>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 8015084:	4b69      	ldr	r3, [pc, #420]	; (801522c <tcp_receive+0xf18>)
 8015086:	681b      	ldr	r3, [r3, #0]
 8015088:	b29a      	uxth	r2, r3
 801508a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801508c:	68db      	ldr	r3, [r3, #12]
 801508e:	685b      	ldr	r3, [r3, #4]
 8015090:	b29b      	uxth	r3, r3
 8015092:	1ad3      	subs	r3, r2, r3
 8015094:	b29a      	uxth	r2, r3
 8015096:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015098:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 801509a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801509c:	685a      	ldr	r2, [r3, #4]
 801509e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80150a0:	891b      	ldrh	r3, [r3, #8]
 80150a2:	4619      	mov	r1, r3
 80150a4:	4610      	mov	r0, r2
 80150a6:	f7fb fecd 	bl	8010e44 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 80150aa:	4b62      	ldr	r3, [pc, #392]	; (8015234 <tcp_receive+0xf20>)
 80150ac:	881b      	ldrh	r3, [r3, #0]
 80150ae:	461a      	mov	r2, r3
 80150b0:	4b5e      	ldr	r3, [pc, #376]	; (801522c <tcp_receive+0xf18>)
 80150b2:	681b      	ldr	r3, [r3, #0]
 80150b4:	441a      	add	r2, r3
 80150b6:	687b      	ldr	r3, [r7, #4]
 80150b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80150ba:	6879      	ldr	r1, [r7, #4]
 80150bc:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 80150be:	440b      	add	r3, r1
 80150c0:	1ad3      	subs	r3, r2, r3
 80150c2:	2b00      	cmp	r3, #0
 80150c4:	f340 8089 	ble.w	80151da <tcp_receive+0xec6>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 80150c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80150ca:	681b      	ldr	r3, [r3, #0]
 80150cc:	68db      	ldr	r3, [r3, #12]
 80150ce:	899b      	ldrh	r3, [r3, #12]
 80150d0:	b29b      	uxth	r3, r3
 80150d2:	4618      	mov	r0, r3
 80150d4:	f7fa fc56 	bl	800f984 <lwip_htons>
 80150d8:	4603      	mov	r3, r0
 80150da:	b2db      	uxtb	r3, r3
 80150dc:	f003 0301 	and.w	r3, r3, #1
 80150e0:	2b00      	cmp	r3, #0
 80150e2:	d022      	beq.n	801512a <tcp_receive+0xe16>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 80150e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80150e6:	681b      	ldr	r3, [r3, #0]
 80150e8:	68db      	ldr	r3, [r3, #12]
 80150ea:	899b      	ldrh	r3, [r3, #12]
 80150ec:	b29b      	uxth	r3, r3
 80150ee:	b21b      	sxth	r3, r3
 80150f0:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80150f4:	b21c      	sxth	r4, r3
 80150f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80150f8:	681b      	ldr	r3, [r3, #0]
 80150fa:	68db      	ldr	r3, [r3, #12]
 80150fc:	899b      	ldrh	r3, [r3, #12]
 80150fe:	b29b      	uxth	r3, r3
 8015100:	4618      	mov	r0, r3
 8015102:	f7fa fc3f 	bl	800f984 <lwip_htons>
 8015106:	4603      	mov	r3, r0
 8015108:	b2db      	uxtb	r3, r3
 801510a:	b29b      	uxth	r3, r3
 801510c:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8015110:	b29b      	uxth	r3, r3
 8015112:	4618      	mov	r0, r3
 8015114:	f7fa fc36 	bl	800f984 <lwip_htons>
 8015118:	4603      	mov	r3, r0
 801511a:	b21b      	sxth	r3, r3
 801511c:	4323      	orrs	r3, r4
 801511e:	b21a      	sxth	r2, r3
 8015120:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015122:	681b      	ldr	r3, [r3, #0]
 8015124:	68db      	ldr	r3, [r3, #12]
 8015126:	b292      	uxth	r2, r2
 8015128:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 801512a:	687b      	ldr	r3, [r7, #4]
 801512c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801512e:	b29a      	uxth	r2, r3
 8015130:	687b      	ldr	r3, [r7, #4]
 8015132:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8015134:	4413      	add	r3, r2
 8015136:	b299      	uxth	r1, r3
 8015138:	4b3c      	ldr	r3, [pc, #240]	; (801522c <tcp_receive+0xf18>)
 801513a:	681b      	ldr	r3, [r3, #0]
 801513c:	b29a      	uxth	r2, r3
 801513e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015140:	681b      	ldr	r3, [r3, #0]
 8015142:	1a8a      	subs	r2, r1, r2
 8015144:	b292      	uxth	r2, r2
 8015146:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 8015148:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801514a:	681b      	ldr	r3, [r3, #0]
 801514c:	685a      	ldr	r2, [r3, #4]
 801514e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015150:	681b      	ldr	r3, [r3, #0]
 8015152:	891b      	ldrh	r3, [r3, #8]
 8015154:	4619      	mov	r1, r3
 8015156:	4610      	mov	r0, r2
 8015158:	f7fb fe74 	bl	8010e44 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 801515c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801515e:	681b      	ldr	r3, [r3, #0]
 8015160:	891c      	ldrh	r4, [r3, #8]
 8015162:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015164:	681b      	ldr	r3, [r3, #0]
 8015166:	68db      	ldr	r3, [r3, #12]
 8015168:	899b      	ldrh	r3, [r3, #12]
 801516a:	b29b      	uxth	r3, r3
 801516c:	4618      	mov	r0, r3
 801516e:	f7fa fc09 	bl	800f984 <lwip_htons>
 8015172:	4603      	mov	r3, r0
 8015174:	b2db      	uxtb	r3, r3
 8015176:	f003 0303 	and.w	r3, r3, #3
 801517a:	2b00      	cmp	r3, #0
 801517c:	d001      	beq.n	8015182 <tcp_receive+0xe6e>
 801517e:	2301      	movs	r3, #1
 8015180:	e000      	b.n	8015184 <tcp_receive+0xe70>
 8015182:	2300      	movs	r3, #0
 8015184:	4423      	add	r3, r4
 8015186:	b29a      	uxth	r2, r3
 8015188:	4b2a      	ldr	r3, [pc, #168]	; (8015234 <tcp_receive+0xf20>)
 801518a:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 801518c:	4b29      	ldr	r3, [pc, #164]	; (8015234 <tcp_receive+0xf20>)
 801518e:	881b      	ldrh	r3, [r3, #0]
 8015190:	461a      	mov	r2, r3
 8015192:	4b26      	ldr	r3, [pc, #152]	; (801522c <tcp_receive+0xf18>)
 8015194:	681b      	ldr	r3, [r3, #0]
 8015196:	441a      	add	r2, r3
 8015198:	687b      	ldr	r3, [r7, #4]
 801519a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801519c:	6879      	ldr	r1, [r7, #4]
 801519e:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 80151a0:	440b      	add	r3, r1
 80151a2:	429a      	cmp	r2, r3
 80151a4:	d019      	beq.n	80151da <tcp_receive+0xec6>
 80151a6:	4b24      	ldr	r3, [pc, #144]	; (8015238 <tcp_receive+0xf24>)
 80151a8:	f44f 62df 	mov.w	r2, #1784	; 0x6f8
 80151ac:	4923      	ldr	r1, [pc, #140]	; (801523c <tcp_receive+0xf28>)
 80151ae:	4824      	ldr	r0, [pc, #144]	; (8015240 <tcp_receive+0xf2c>)
 80151b0:	f004 fea2 	bl	8019ef8 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 80151b4:	e011      	b.n	80151da <tcp_receive+0xec6>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 80151b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80151b8:	681b      	ldr	r3, [r3, #0]
 80151ba:	63bb      	str	r3, [r7, #56]	; 0x38
 80151bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80151be:	2b00      	cmp	r3, #0
 80151c0:	f47f aea4 	bne.w	8014f0c <tcp_receive+0xbf8>
 80151c4:	e00a      	b.n	80151dc <tcp_receive+0xec8>
                break;
 80151c6:	bf00      	nop
 80151c8:	e008      	b.n	80151dc <tcp_receive+0xec8>
                break;
 80151ca:	bf00      	nop
 80151cc:	e006      	b.n	80151dc <tcp_receive+0xec8>
                  break;
 80151ce:	bf00      	nop
 80151d0:	e004      	b.n	80151dc <tcp_receive+0xec8>
                  break;
 80151d2:	bf00      	nop
 80151d4:	e002      	b.n	80151dc <tcp_receive+0xec8>
                  break;
 80151d6:	bf00      	nop
 80151d8:	e000      	b.n	80151dc <tcp_receive+0xec8>
                break;
 80151da:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 80151dc:	6878      	ldr	r0, [r7, #4]
 80151de:	f001 fa33 	bl	8016648 <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 80151e2:	e003      	b.n	80151ec <tcp_receive+0xed8>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 80151e4:	6878      	ldr	r0, [r7, #4]
 80151e6:	f001 fa2f 	bl	8016648 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 80151ea:	e01a      	b.n	8015222 <tcp_receive+0xf0e>
 80151ec:	e019      	b.n	8015222 <tcp_receive+0xf0e>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 80151ee:	4b0f      	ldr	r3, [pc, #60]	; (801522c <tcp_receive+0xf18>)
 80151f0:	681a      	ldr	r2, [r3, #0]
 80151f2:	687b      	ldr	r3, [r7, #4]
 80151f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80151f6:	1ad3      	subs	r3, r2, r3
 80151f8:	2b00      	cmp	r3, #0
 80151fa:	db0a      	blt.n	8015212 <tcp_receive+0xefe>
 80151fc:	4b0b      	ldr	r3, [pc, #44]	; (801522c <tcp_receive+0xf18>)
 80151fe:	681a      	ldr	r2, [r3, #0]
 8015200:	687b      	ldr	r3, [r7, #4]
 8015202:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015204:	6879      	ldr	r1, [r7, #4]
 8015206:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8015208:	440b      	add	r3, r1
 801520a:	1ad3      	subs	r3, r2, r3
 801520c:	3301      	adds	r3, #1
 801520e:	2b00      	cmp	r3, #0
 8015210:	dd07      	ble.n	8015222 <tcp_receive+0xf0e>
      tcp_ack_now(pcb);
 8015212:	687b      	ldr	r3, [r7, #4]
 8015214:	8b5b      	ldrh	r3, [r3, #26]
 8015216:	f043 0302 	orr.w	r3, r3, #2
 801521a:	b29a      	uxth	r2, r3
 801521c:	687b      	ldr	r3, [r7, #4]
 801521e:	835a      	strh	r2, [r3, #26]
    }
  }
}
 8015220:	e7ff      	b.n	8015222 <tcp_receive+0xf0e>
 8015222:	bf00      	nop
 8015224:	3750      	adds	r7, #80	; 0x50
 8015226:	46bd      	mov	sp, r7
 8015228:	bdb0      	pop	{r4, r5, r7, pc}
 801522a:	bf00      	nop
 801522c:	2000710c 	.word	0x2000710c
 8015230:	200070ec 	.word	0x200070ec
 8015234:	20007116 	.word	0x20007116
 8015238:	0801dc80 	.word	0x0801dc80
 801523c:	0801e028 	.word	0x0801e028
 8015240:	0801dccc 	.word	0x0801dccc

08015244 <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 8015244:	b480      	push	{r7}
 8015246:	b083      	sub	sp, #12
 8015248:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 801524a:	4b15      	ldr	r3, [pc, #84]	; (80152a0 <tcp_get_next_optbyte+0x5c>)
 801524c:	881b      	ldrh	r3, [r3, #0]
 801524e:	1c5a      	adds	r2, r3, #1
 8015250:	b291      	uxth	r1, r2
 8015252:	4a13      	ldr	r2, [pc, #76]	; (80152a0 <tcp_get_next_optbyte+0x5c>)
 8015254:	8011      	strh	r1, [r2, #0]
 8015256:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 8015258:	4b12      	ldr	r3, [pc, #72]	; (80152a4 <tcp_get_next_optbyte+0x60>)
 801525a:	681b      	ldr	r3, [r3, #0]
 801525c:	2b00      	cmp	r3, #0
 801525e:	d004      	beq.n	801526a <tcp_get_next_optbyte+0x26>
 8015260:	4b11      	ldr	r3, [pc, #68]	; (80152a8 <tcp_get_next_optbyte+0x64>)
 8015262:	881b      	ldrh	r3, [r3, #0]
 8015264:	88fa      	ldrh	r2, [r7, #6]
 8015266:	429a      	cmp	r2, r3
 8015268:	d208      	bcs.n	801527c <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 801526a:	4b10      	ldr	r3, [pc, #64]	; (80152ac <tcp_get_next_optbyte+0x68>)
 801526c:	681b      	ldr	r3, [r3, #0]
 801526e:	3314      	adds	r3, #20
 8015270:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 8015272:	88fb      	ldrh	r3, [r7, #6]
 8015274:	683a      	ldr	r2, [r7, #0]
 8015276:	4413      	add	r3, r2
 8015278:	781b      	ldrb	r3, [r3, #0]
 801527a:	e00b      	b.n	8015294 <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 801527c:	88fb      	ldrh	r3, [r7, #6]
 801527e:	b2da      	uxtb	r2, r3
 8015280:	4b09      	ldr	r3, [pc, #36]	; (80152a8 <tcp_get_next_optbyte+0x64>)
 8015282:	881b      	ldrh	r3, [r3, #0]
 8015284:	b2db      	uxtb	r3, r3
 8015286:	1ad3      	subs	r3, r2, r3
 8015288:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 801528a:	4b06      	ldr	r3, [pc, #24]	; (80152a4 <tcp_get_next_optbyte+0x60>)
 801528c:	681a      	ldr	r2, [r3, #0]
 801528e:	797b      	ldrb	r3, [r7, #5]
 8015290:	4413      	add	r3, r2
 8015292:	781b      	ldrb	r3, [r3, #0]
  }
}
 8015294:	4618      	mov	r0, r3
 8015296:	370c      	adds	r7, #12
 8015298:	46bd      	mov	sp, r7
 801529a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801529e:	4770      	bx	lr
 80152a0:	20007108 	.word	0x20007108
 80152a4:	20007104 	.word	0x20007104
 80152a8:	20007102 	.word	0x20007102
 80152ac:	200070fc 	.word	0x200070fc

080152b0 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 80152b0:	b580      	push	{r7, lr}
 80152b2:	b084      	sub	sp, #16
 80152b4:	af00      	add	r7, sp, #0
 80152b6:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 80152b8:	687b      	ldr	r3, [r7, #4]
 80152ba:	2b00      	cmp	r3, #0
 80152bc:	d106      	bne.n	80152cc <tcp_parseopt+0x1c>
 80152be:	4b32      	ldr	r3, [pc, #200]	; (8015388 <tcp_parseopt+0xd8>)
 80152c0:	f240 727d 	movw	r2, #1917	; 0x77d
 80152c4:	4931      	ldr	r1, [pc, #196]	; (801538c <tcp_parseopt+0xdc>)
 80152c6:	4832      	ldr	r0, [pc, #200]	; (8015390 <tcp_parseopt+0xe0>)
 80152c8:	f004 fe16 	bl	8019ef8 <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 80152cc:	4b31      	ldr	r3, [pc, #196]	; (8015394 <tcp_parseopt+0xe4>)
 80152ce:	881b      	ldrh	r3, [r3, #0]
 80152d0:	2b00      	cmp	r3, #0
 80152d2:	d056      	beq.n	8015382 <tcp_parseopt+0xd2>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 80152d4:	4b30      	ldr	r3, [pc, #192]	; (8015398 <tcp_parseopt+0xe8>)
 80152d6:	2200      	movs	r2, #0
 80152d8:	801a      	strh	r2, [r3, #0]
 80152da:	e046      	b.n	801536a <tcp_parseopt+0xba>
      u8_t opt = tcp_get_next_optbyte();
 80152dc:	f7ff ffb2 	bl	8015244 <tcp_get_next_optbyte>
 80152e0:	4603      	mov	r3, r0
 80152e2:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 80152e4:	7bfb      	ldrb	r3, [r7, #15]
 80152e6:	2b02      	cmp	r3, #2
 80152e8:	d006      	beq.n	80152f8 <tcp_parseopt+0x48>
 80152ea:	2b02      	cmp	r3, #2
 80152ec:	dc2c      	bgt.n	8015348 <tcp_parseopt+0x98>
 80152ee:	2b00      	cmp	r3, #0
 80152f0:	d042      	beq.n	8015378 <tcp_parseopt+0xc8>
 80152f2:	2b01      	cmp	r3, #1
 80152f4:	d128      	bne.n	8015348 <tcp_parseopt+0x98>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: EOL\n"));
          return;
        case LWIP_TCP_OPT_NOP:
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
 80152f6:	e038      	b.n	801536a <tcp_parseopt+0xba>
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 80152f8:	f7ff ffa4 	bl	8015244 <tcp_get_next_optbyte>
 80152fc:	4603      	mov	r3, r0
 80152fe:	2b04      	cmp	r3, #4
 8015300:	d13c      	bne.n	801537c <tcp_parseopt+0xcc>
 8015302:	4b25      	ldr	r3, [pc, #148]	; (8015398 <tcp_parseopt+0xe8>)
 8015304:	881b      	ldrh	r3, [r3, #0]
 8015306:	3301      	adds	r3, #1
 8015308:	4a22      	ldr	r2, [pc, #136]	; (8015394 <tcp_parseopt+0xe4>)
 801530a:	8812      	ldrh	r2, [r2, #0]
 801530c:	4293      	cmp	r3, r2
 801530e:	da35      	bge.n	801537c <tcp_parseopt+0xcc>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 8015310:	f7ff ff98 	bl	8015244 <tcp_get_next_optbyte>
 8015314:	4603      	mov	r3, r0
 8015316:	b29b      	uxth	r3, r3
 8015318:	021b      	lsls	r3, r3, #8
 801531a:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 801531c:	f7ff ff92 	bl	8015244 <tcp_get_next_optbyte>
 8015320:	4603      	mov	r3, r0
 8015322:	b29a      	uxth	r2, r3
 8015324:	89bb      	ldrh	r3, [r7, #12]
 8015326:	4313      	orrs	r3, r2
 8015328:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 801532a:	89bb      	ldrh	r3, [r7, #12]
 801532c:	f240 52b4 	movw	r2, #1460	; 0x5b4
 8015330:	4293      	cmp	r3, r2
 8015332:	d804      	bhi.n	801533e <tcp_parseopt+0x8e>
 8015334:	89bb      	ldrh	r3, [r7, #12]
 8015336:	2b00      	cmp	r3, #0
 8015338:	d001      	beq.n	801533e <tcp_parseopt+0x8e>
 801533a:	89ba      	ldrh	r2, [r7, #12]
 801533c:	e001      	b.n	8015342 <tcp_parseopt+0x92>
 801533e:	f240 52b4 	movw	r2, #1460	; 0x5b4
 8015342:	687b      	ldr	r3, [r7, #4]
 8015344:	865a      	strh	r2, [r3, #50]	; 0x32
          break;
 8015346:	e010      	b.n	801536a <tcp_parseopt+0xba>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 8015348:	f7ff ff7c 	bl	8015244 <tcp_get_next_optbyte>
 801534c:	4603      	mov	r3, r0
 801534e:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 8015350:	7afb      	ldrb	r3, [r7, #11]
 8015352:	2b01      	cmp	r3, #1
 8015354:	d914      	bls.n	8015380 <tcp_parseopt+0xd0>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 8015356:	7afb      	ldrb	r3, [r7, #11]
 8015358:	b29a      	uxth	r2, r3
 801535a:	4b0f      	ldr	r3, [pc, #60]	; (8015398 <tcp_parseopt+0xe8>)
 801535c:	881b      	ldrh	r3, [r3, #0]
 801535e:	4413      	add	r3, r2
 8015360:	b29b      	uxth	r3, r3
 8015362:	3b02      	subs	r3, #2
 8015364:	b29a      	uxth	r2, r3
 8015366:	4b0c      	ldr	r3, [pc, #48]	; (8015398 <tcp_parseopt+0xe8>)
 8015368:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 801536a:	4b0b      	ldr	r3, [pc, #44]	; (8015398 <tcp_parseopt+0xe8>)
 801536c:	881a      	ldrh	r2, [r3, #0]
 801536e:	4b09      	ldr	r3, [pc, #36]	; (8015394 <tcp_parseopt+0xe4>)
 8015370:	881b      	ldrh	r3, [r3, #0]
 8015372:	429a      	cmp	r2, r3
 8015374:	d3b2      	bcc.n	80152dc <tcp_parseopt+0x2c>
 8015376:	e004      	b.n	8015382 <tcp_parseopt+0xd2>
          return;
 8015378:	bf00      	nop
 801537a:	e002      	b.n	8015382 <tcp_parseopt+0xd2>
            return;
 801537c:	bf00      	nop
 801537e:	e000      	b.n	8015382 <tcp_parseopt+0xd2>
            return;
 8015380:	bf00      	nop
      }
    }
  }
}
 8015382:	3710      	adds	r7, #16
 8015384:	46bd      	mov	sp, r7
 8015386:	bd80      	pop	{r7, pc}
 8015388:	0801dc80 	.word	0x0801dc80
 801538c:	0801e0e4 	.word	0x0801e0e4
 8015390:	0801dccc 	.word	0x0801dccc
 8015394:	20007100 	.word	0x20007100
 8015398:	20007108 	.word	0x20007108

0801539c <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 801539c:	b480      	push	{r7}
 801539e:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 80153a0:	4b05      	ldr	r3, [pc, #20]	; (80153b8 <tcp_trigger_input_pcb_close+0x1c>)
 80153a2:	781b      	ldrb	r3, [r3, #0]
 80153a4:	f043 0310 	orr.w	r3, r3, #16
 80153a8:	b2da      	uxtb	r2, r3
 80153aa:	4b03      	ldr	r3, [pc, #12]	; (80153b8 <tcp_trigger_input_pcb_close+0x1c>)
 80153ac:	701a      	strb	r2, [r3, #0]
}
 80153ae:	bf00      	nop
 80153b0:	46bd      	mov	sp, r7
 80153b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80153b6:	4770      	bx	lr
 80153b8:	20007119 	.word	0x20007119

080153bc <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 80153bc:	b580      	push	{r7, lr}
 80153be:	b084      	sub	sp, #16
 80153c0:	af00      	add	r7, sp, #0
 80153c2:	60f8      	str	r0, [r7, #12]
 80153c4:	60b9      	str	r1, [r7, #8]
 80153c6:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 80153c8:	68fb      	ldr	r3, [r7, #12]
 80153ca:	2b00      	cmp	r3, #0
 80153cc:	d00a      	beq.n	80153e4 <tcp_route+0x28>
 80153ce:	68fb      	ldr	r3, [r7, #12]
 80153d0:	7a1b      	ldrb	r3, [r3, #8]
 80153d2:	2b00      	cmp	r3, #0
 80153d4:	d006      	beq.n	80153e4 <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 80153d6:	68fb      	ldr	r3, [r7, #12]
 80153d8:	7a1b      	ldrb	r3, [r3, #8]
 80153da:	4618      	mov	r0, r3
 80153dc:	f7fb fb76 	bl	8010acc <netif_get_by_index>
 80153e0:	4603      	mov	r3, r0
 80153e2:	e003      	b.n	80153ec <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 80153e4:	6878      	ldr	r0, [r7, #4]
 80153e6:	f002 fe61 	bl	80180ac <ip4_route>
 80153ea:	4603      	mov	r3, r0
  }
}
 80153ec:	4618      	mov	r0, r3
 80153ee:	3710      	adds	r7, #16
 80153f0:	46bd      	mov	sp, r7
 80153f2:	bd80      	pop	{r7, pc}

080153f4 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 80153f4:	b590      	push	{r4, r7, lr}
 80153f6:	b087      	sub	sp, #28
 80153f8:	af00      	add	r7, sp, #0
 80153fa:	60f8      	str	r0, [r7, #12]
 80153fc:	60b9      	str	r1, [r7, #8]
 80153fe:	603b      	str	r3, [r7, #0]
 8015400:	4613      	mov	r3, r2
 8015402:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 8015404:	68fb      	ldr	r3, [r7, #12]
 8015406:	2b00      	cmp	r3, #0
 8015408:	d105      	bne.n	8015416 <tcp_create_segment+0x22>
 801540a:	4b44      	ldr	r3, [pc, #272]	; (801551c <tcp_create_segment+0x128>)
 801540c:	22a3      	movs	r2, #163	; 0xa3
 801540e:	4944      	ldr	r1, [pc, #272]	; (8015520 <tcp_create_segment+0x12c>)
 8015410:	4844      	ldr	r0, [pc, #272]	; (8015524 <tcp_create_segment+0x130>)
 8015412:	f004 fd71 	bl	8019ef8 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 8015416:	68bb      	ldr	r3, [r7, #8]
 8015418:	2b00      	cmp	r3, #0
 801541a:	d105      	bne.n	8015428 <tcp_create_segment+0x34>
 801541c:	4b3f      	ldr	r3, [pc, #252]	; (801551c <tcp_create_segment+0x128>)
 801541e:	22a4      	movs	r2, #164	; 0xa4
 8015420:	4941      	ldr	r1, [pc, #260]	; (8015528 <tcp_create_segment+0x134>)
 8015422:	4840      	ldr	r0, [pc, #256]	; (8015524 <tcp_create_segment+0x130>)
 8015424:	f004 fd68 	bl	8019ef8 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8015428:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 801542c:	009b      	lsls	r3, r3, #2
 801542e:	b2db      	uxtb	r3, r3
 8015430:	f003 0304 	and.w	r3, r3, #4
 8015434:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 8015436:	2003      	movs	r0, #3
 8015438:	f7fa ffc2 	bl	80103c0 <memp_malloc>
 801543c:	6138      	str	r0, [r7, #16]
 801543e:	693b      	ldr	r3, [r7, #16]
 8015440:	2b00      	cmp	r3, #0
 8015442:	d104      	bne.n	801544e <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 8015444:	68b8      	ldr	r0, [r7, #8]
 8015446:	f7fb fe81 	bl	801114c <pbuf_free>
    return NULL;
 801544a:	2300      	movs	r3, #0
 801544c:	e061      	b.n	8015512 <tcp_create_segment+0x11e>
  }
  seg->flags = optflags;
 801544e:	693b      	ldr	r3, [r7, #16]
 8015450:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8015454:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 8015456:	693b      	ldr	r3, [r7, #16]
 8015458:	2200      	movs	r2, #0
 801545a:	601a      	str	r2, [r3, #0]
  seg->p = p;
 801545c:	693b      	ldr	r3, [r7, #16]
 801545e:	68ba      	ldr	r2, [r7, #8]
 8015460:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 8015462:	68bb      	ldr	r3, [r7, #8]
 8015464:	891a      	ldrh	r2, [r3, #8]
 8015466:	7dfb      	ldrb	r3, [r7, #23]
 8015468:	b29b      	uxth	r3, r3
 801546a:	429a      	cmp	r2, r3
 801546c:	d205      	bcs.n	801547a <tcp_create_segment+0x86>
 801546e:	4b2b      	ldr	r3, [pc, #172]	; (801551c <tcp_create_segment+0x128>)
 8015470:	22b0      	movs	r2, #176	; 0xb0
 8015472:	492e      	ldr	r1, [pc, #184]	; (801552c <tcp_create_segment+0x138>)
 8015474:	482b      	ldr	r0, [pc, #172]	; (8015524 <tcp_create_segment+0x130>)
 8015476:	f004 fd3f 	bl	8019ef8 <iprintf>
  seg->len = p->tot_len - optlen;
 801547a:	68bb      	ldr	r3, [r7, #8]
 801547c:	891a      	ldrh	r2, [r3, #8]
 801547e:	7dfb      	ldrb	r3, [r7, #23]
 8015480:	b29b      	uxth	r3, r3
 8015482:	1ad3      	subs	r3, r2, r3
 8015484:	b29a      	uxth	r2, r3
 8015486:	693b      	ldr	r3, [r7, #16]
 8015488:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 801548a:	2114      	movs	r1, #20
 801548c:	68b8      	ldr	r0, [r7, #8]
 801548e:	f7fb fdc7 	bl	8011020 <pbuf_add_header>
 8015492:	4603      	mov	r3, r0
 8015494:	2b00      	cmp	r3, #0
 8015496:	d004      	beq.n	80154a2 <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 8015498:	6938      	ldr	r0, [r7, #16]
 801549a:	f7fd f8ce 	bl	801263a <tcp_seg_free>
    return NULL;
 801549e:	2300      	movs	r3, #0
 80154a0:	e037      	b.n	8015512 <tcp_create_segment+0x11e>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 80154a2:	693b      	ldr	r3, [r7, #16]
 80154a4:	685b      	ldr	r3, [r3, #4]
 80154a6:	685a      	ldr	r2, [r3, #4]
 80154a8:	693b      	ldr	r3, [r7, #16]
 80154aa:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 80154ac:	68fb      	ldr	r3, [r7, #12]
 80154ae:	8ada      	ldrh	r2, [r3, #22]
 80154b0:	693b      	ldr	r3, [r7, #16]
 80154b2:	68dc      	ldr	r4, [r3, #12]
 80154b4:	4610      	mov	r0, r2
 80154b6:	f7fa fa65 	bl	800f984 <lwip_htons>
 80154ba:	4603      	mov	r3, r0
 80154bc:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 80154be:	68fb      	ldr	r3, [r7, #12]
 80154c0:	8b1a      	ldrh	r2, [r3, #24]
 80154c2:	693b      	ldr	r3, [r7, #16]
 80154c4:	68dc      	ldr	r4, [r3, #12]
 80154c6:	4610      	mov	r0, r2
 80154c8:	f7fa fa5c 	bl	800f984 <lwip_htons>
 80154cc:	4603      	mov	r3, r0
 80154ce:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 80154d0:	693b      	ldr	r3, [r7, #16]
 80154d2:	68dc      	ldr	r4, [r3, #12]
 80154d4:	6838      	ldr	r0, [r7, #0]
 80154d6:	f7fa fa6a 	bl	800f9ae <lwip_htonl>
 80154da:	4603      	mov	r3, r0
 80154dc:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 80154de:	7dfb      	ldrb	r3, [r7, #23]
 80154e0:	089b      	lsrs	r3, r3, #2
 80154e2:	b2db      	uxtb	r3, r3
 80154e4:	b29b      	uxth	r3, r3
 80154e6:	3305      	adds	r3, #5
 80154e8:	b29b      	uxth	r3, r3
 80154ea:	031b      	lsls	r3, r3, #12
 80154ec:	b29a      	uxth	r2, r3
 80154ee:	79fb      	ldrb	r3, [r7, #7]
 80154f0:	b29b      	uxth	r3, r3
 80154f2:	4313      	orrs	r3, r2
 80154f4:	b29a      	uxth	r2, r3
 80154f6:	693b      	ldr	r3, [r7, #16]
 80154f8:	68dc      	ldr	r4, [r3, #12]
 80154fa:	4610      	mov	r0, r2
 80154fc:	f7fa fa42 	bl	800f984 <lwip_htons>
 8015500:	4603      	mov	r3, r0
 8015502:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 8015504:	693b      	ldr	r3, [r7, #16]
 8015506:	68db      	ldr	r3, [r3, #12]
 8015508:	2200      	movs	r2, #0
 801550a:	749a      	strb	r2, [r3, #18]
 801550c:	2200      	movs	r2, #0
 801550e:	74da      	strb	r2, [r3, #19]
  return seg;
 8015510:	693b      	ldr	r3, [r7, #16]
}
 8015512:	4618      	mov	r0, r3
 8015514:	371c      	adds	r7, #28
 8015516:	46bd      	mov	sp, r7
 8015518:	bd90      	pop	{r4, r7, pc}
 801551a:	bf00      	nop
 801551c:	0801e100 	.word	0x0801e100
 8015520:	0801e134 	.word	0x0801e134
 8015524:	0801e154 	.word	0x0801e154
 8015528:	0801e17c 	.word	0x0801e17c
 801552c:	0801e1a0 	.word	0x0801e1a0

08015530 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 8015530:	b590      	push	{r4, r7, lr}
 8015532:	b08b      	sub	sp, #44	; 0x2c
 8015534:	af02      	add	r7, sp, #8
 8015536:	6078      	str	r0, [r7, #4]
 8015538:	460b      	mov	r3, r1
 801553a:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 801553c:	2300      	movs	r3, #0
 801553e:	61fb      	str	r3, [r7, #28]
 8015540:	2300      	movs	r3, #0
 8015542:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 8015544:	2300      	movs	r3, #0
 8015546:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 8015548:	687b      	ldr	r3, [r7, #4]
 801554a:	2b00      	cmp	r3, #0
 801554c:	d106      	bne.n	801555c <tcp_split_unsent_seg+0x2c>
 801554e:	4b95      	ldr	r3, [pc, #596]	; (80157a4 <tcp_split_unsent_seg+0x274>)
 8015550:	f240 324b 	movw	r2, #843	; 0x34b
 8015554:	4994      	ldr	r1, [pc, #592]	; (80157a8 <tcp_split_unsent_seg+0x278>)
 8015556:	4895      	ldr	r0, [pc, #596]	; (80157ac <tcp_split_unsent_seg+0x27c>)
 8015558:	f004 fcce 	bl	8019ef8 <iprintf>

  useg = pcb->unsent;
 801555c:	687b      	ldr	r3, [r7, #4]
 801555e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8015560:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 8015562:	697b      	ldr	r3, [r7, #20]
 8015564:	2b00      	cmp	r3, #0
 8015566:	d102      	bne.n	801556e <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 8015568:	f04f 33ff 	mov.w	r3, #4294967295
 801556c:	e116      	b.n	801579c <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 801556e:	887b      	ldrh	r3, [r7, #2]
 8015570:	2b00      	cmp	r3, #0
 8015572:	d109      	bne.n	8015588 <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 8015574:	4b8b      	ldr	r3, [pc, #556]	; (80157a4 <tcp_split_unsent_seg+0x274>)
 8015576:	f240 3253 	movw	r2, #851	; 0x353
 801557a:	498d      	ldr	r1, [pc, #564]	; (80157b0 <tcp_split_unsent_seg+0x280>)
 801557c:	488b      	ldr	r0, [pc, #556]	; (80157ac <tcp_split_unsent_seg+0x27c>)
 801557e:	f004 fcbb 	bl	8019ef8 <iprintf>
    return ERR_VAL;
 8015582:	f06f 0305 	mvn.w	r3, #5
 8015586:	e109      	b.n	801579c <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 8015588:	697b      	ldr	r3, [r7, #20]
 801558a:	891b      	ldrh	r3, [r3, #8]
 801558c:	887a      	ldrh	r2, [r7, #2]
 801558e:	429a      	cmp	r2, r3
 8015590:	d301      	bcc.n	8015596 <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 8015592:	2300      	movs	r3, #0
 8015594:	e102      	b.n	801579c <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 8015596:	687b      	ldr	r3, [r7, #4]
 8015598:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801559a:	887a      	ldrh	r2, [r7, #2]
 801559c:	429a      	cmp	r2, r3
 801559e:	d906      	bls.n	80155ae <tcp_split_unsent_seg+0x7e>
 80155a0:	4b80      	ldr	r3, [pc, #512]	; (80157a4 <tcp_split_unsent_seg+0x274>)
 80155a2:	f240 325b 	movw	r2, #859	; 0x35b
 80155a6:	4983      	ldr	r1, [pc, #524]	; (80157b4 <tcp_split_unsent_seg+0x284>)
 80155a8:	4880      	ldr	r0, [pc, #512]	; (80157ac <tcp_split_unsent_seg+0x27c>)
 80155aa:	f004 fca5 	bl	8019ef8 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 80155ae:	697b      	ldr	r3, [r7, #20]
 80155b0:	891b      	ldrh	r3, [r3, #8]
 80155b2:	2b00      	cmp	r3, #0
 80155b4:	d106      	bne.n	80155c4 <tcp_split_unsent_seg+0x94>
 80155b6:	4b7b      	ldr	r3, [pc, #492]	; (80157a4 <tcp_split_unsent_seg+0x274>)
 80155b8:	f44f 7257 	mov.w	r2, #860	; 0x35c
 80155bc:	497e      	ldr	r1, [pc, #504]	; (80157b8 <tcp_split_unsent_seg+0x288>)
 80155be:	487b      	ldr	r0, [pc, #492]	; (80157ac <tcp_split_unsent_seg+0x27c>)
 80155c0:	f004 fc9a 	bl	8019ef8 <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 80155c4:	697b      	ldr	r3, [r7, #20]
 80155c6:	7a9b      	ldrb	r3, [r3, #10]
 80155c8:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 80155ca:	7bfb      	ldrb	r3, [r7, #15]
 80155cc:	009b      	lsls	r3, r3, #2
 80155ce:	b2db      	uxtb	r3, r3
 80155d0:	f003 0304 	and.w	r3, r3, #4
 80155d4:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 80155d6:	697b      	ldr	r3, [r7, #20]
 80155d8:	891a      	ldrh	r2, [r3, #8]
 80155da:	887b      	ldrh	r3, [r7, #2]
 80155dc:	1ad3      	subs	r3, r2, r3
 80155de:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 80155e0:	7bbb      	ldrb	r3, [r7, #14]
 80155e2:	b29a      	uxth	r2, r3
 80155e4:	89bb      	ldrh	r3, [r7, #12]
 80155e6:	4413      	add	r3, r2
 80155e8:	b29b      	uxth	r3, r3
 80155ea:	f44f 7220 	mov.w	r2, #640	; 0x280
 80155ee:	4619      	mov	r1, r3
 80155f0:	2036      	movs	r0, #54	; 0x36
 80155f2:	f7fb fac7 	bl	8010b84 <pbuf_alloc>
 80155f6:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 80155f8:	693b      	ldr	r3, [r7, #16]
 80155fa:	2b00      	cmp	r3, #0
 80155fc:	f000 80b7 	beq.w	801576e <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 8015600:	697b      	ldr	r3, [r7, #20]
 8015602:	685b      	ldr	r3, [r3, #4]
 8015604:	891a      	ldrh	r2, [r3, #8]
 8015606:	697b      	ldr	r3, [r7, #20]
 8015608:	891b      	ldrh	r3, [r3, #8]
 801560a:	1ad3      	subs	r3, r2, r3
 801560c:	b29a      	uxth	r2, r3
 801560e:	887b      	ldrh	r3, [r7, #2]
 8015610:	4413      	add	r3, r2
 8015612:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 8015614:	697b      	ldr	r3, [r7, #20]
 8015616:	6858      	ldr	r0, [r3, #4]
 8015618:	693b      	ldr	r3, [r7, #16]
 801561a:	685a      	ldr	r2, [r3, #4]
 801561c:	7bbb      	ldrb	r3, [r7, #14]
 801561e:	18d1      	adds	r1, r2, r3
 8015620:	897b      	ldrh	r3, [r7, #10]
 8015622:	89ba      	ldrh	r2, [r7, #12]
 8015624:	f7fb ff7c 	bl	8011520 <pbuf_copy_partial>
 8015628:	4603      	mov	r3, r0
 801562a:	461a      	mov	r2, r3
 801562c:	89bb      	ldrh	r3, [r7, #12]
 801562e:	4293      	cmp	r3, r2
 8015630:	f040 809f 	bne.w	8015772 <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 8015634:	697b      	ldr	r3, [r7, #20]
 8015636:	68db      	ldr	r3, [r3, #12]
 8015638:	899b      	ldrh	r3, [r3, #12]
 801563a:	b29b      	uxth	r3, r3
 801563c:	4618      	mov	r0, r3
 801563e:	f7fa f9a1 	bl	800f984 <lwip_htons>
 8015642:	4603      	mov	r3, r0
 8015644:	b2db      	uxtb	r3, r3
 8015646:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801564a:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 801564c:	2300      	movs	r3, #0
 801564e:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 8015650:	7efb      	ldrb	r3, [r7, #27]
 8015652:	f003 0308 	and.w	r3, r3, #8
 8015656:	2b00      	cmp	r3, #0
 8015658:	d007      	beq.n	801566a <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 801565a:	7efb      	ldrb	r3, [r7, #27]
 801565c:	f023 0308 	bic.w	r3, r3, #8
 8015660:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 8015662:	7ebb      	ldrb	r3, [r7, #26]
 8015664:	f043 0308 	orr.w	r3, r3, #8
 8015668:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 801566a:	7efb      	ldrb	r3, [r7, #27]
 801566c:	f003 0301 	and.w	r3, r3, #1
 8015670:	2b00      	cmp	r3, #0
 8015672:	d007      	beq.n	8015684 <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 8015674:	7efb      	ldrb	r3, [r7, #27]
 8015676:	f023 0301 	bic.w	r3, r3, #1
 801567a:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 801567c:	7ebb      	ldrb	r3, [r7, #26]
 801567e:	f043 0301 	orr.w	r3, r3, #1
 8015682:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 8015684:	697b      	ldr	r3, [r7, #20]
 8015686:	68db      	ldr	r3, [r3, #12]
 8015688:	685b      	ldr	r3, [r3, #4]
 801568a:	4618      	mov	r0, r3
 801568c:	f7fa f98f 	bl	800f9ae <lwip_htonl>
 8015690:	4602      	mov	r2, r0
 8015692:	887b      	ldrh	r3, [r7, #2]
 8015694:	18d1      	adds	r1, r2, r3
 8015696:	7eba      	ldrb	r2, [r7, #26]
 8015698:	7bfb      	ldrb	r3, [r7, #15]
 801569a:	9300      	str	r3, [sp, #0]
 801569c:	460b      	mov	r3, r1
 801569e:	6939      	ldr	r1, [r7, #16]
 80156a0:	6878      	ldr	r0, [r7, #4]
 80156a2:	f7ff fea7 	bl	80153f4 <tcp_create_segment>
 80156a6:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 80156a8:	69fb      	ldr	r3, [r7, #28]
 80156aa:	2b00      	cmp	r3, #0
 80156ac:	d063      	beq.n	8015776 <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 80156ae:	697b      	ldr	r3, [r7, #20]
 80156b0:	685b      	ldr	r3, [r3, #4]
 80156b2:	4618      	mov	r0, r3
 80156b4:	f7fb fdd2 	bl	801125c <pbuf_clen>
 80156b8:	4603      	mov	r3, r0
 80156ba:	461a      	mov	r2, r3
 80156bc:	687b      	ldr	r3, [r7, #4]
 80156be:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80156c2:	1a9b      	subs	r3, r3, r2
 80156c4:	b29a      	uxth	r2, r3
 80156c6:	687b      	ldr	r3, [r7, #4]
 80156c8:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 80156cc:	697b      	ldr	r3, [r7, #20]
 80156ce:	6858      	ldr	r0, [r3, #4]
 80156d0:	697b      	ldr	r3, [r7, #20]
 80156d2:	685b      	ldr	r3, [r3, #4]
 80156d4:	891a      	ldrh	r2, [r3, #8]
 80156d6:	89bb      	ldrh	r3, [r7, #12]
 80156d8:	1ad3      	subs	r3, r2, r3
 80156da:	b29b      	uxth	r3, r3
 80156dc:	4619      	mov	r1, r3
 80156de:	f7fb fbb1 	bl	8010e44 <pbuf_realloc>
  useg->len -= remainder;
 80156e2:	697b      	ldr	r3, [r7, #20]
 80156e4:	891a      	ldrh	r2, [r3, #8]
 80156e6:	89bb      	ldrh	r3, [r7, #12]
 80156e8:	1ad3      	subs	r3, r2, r3
 80156ea:	b29a      	uxth	r2, r3
 80156ec:	697b      	ldr	r3, [r7, #20]
 80156ee:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 80156f0:	697b      	ldr	r3, [r7, #20]
 80156f2:	68db      	ldr	r3, [r3, #12]
 80156f4:	899b      	ldrh	r3, [r3, #12]
 80156f6:	b29c      	uxth	r4, r3
 80156f8:	7efb      	ldrb	r3, [r7, #27]
 80156fa:	b29b      	uxth	r3, r3
 80156fc:	4618      	mov	r0, r3
 80156fe:	f7fa f941 	bl	800f984 <lwip_htons>
 8015702:	4603      	mov	r3, r0
 8015704:	461a      	mov	r2, r3
 8015706:	697b      	ldr	r3, [r7, #20]
 8015708:	68db      	ldr	r3, [r3, #12]
 801570a:	4322      	orrs	r2, r4
 801570c:	b292      	uxth	r2, r2
 801570e:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 8015710:	697b      	ldr	r3, [r7, #20]
 8015712:	685b      	ldr	r3, [r3, #4]
 8015714:	4618      	mov	r0, r3
 8015716:	f7fb fda1 	bl	801125c <pbuf_clen>
 801571a:	4603      	mov	r3, r0
 801571c:	461a      	mov	r2, r3
 801571e:	687b      	ldr	r3, [r7, #4]
 8015720:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8015724:	4413      	add	r3, r2
 8015726:	b29a      	uxth	r2, r3
 8015728:	687b      	ldr	r3, [r7, #4]
 801572a:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 801572e:	69fb      	ldr	r3, [r7, #28]
 8015730:	685b      	ldr	r3, [r3, #4]
 8015732:	4618      	mov	r0, r3
 8015734:	f7fb fd92 	bl	801125c <pbuf_clen>
 8015738:	4603      	mov	r3, r0
 801573a:	461a      	mov	r2, r3
 801573c:	687b      	ldr	r3, [r7, #4]
 801573e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8015742:	4413      	add	r3, r2
 8015744:	b29a      	uxth	r2, r3
 8015746:	687b      	ldr	r3, [r7, #4]
 8015748:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 801574c:	697b      	ldr	r3, [r7, #20]
 801574e:	681a      	ldr	r2, [r3, #0]
 8015750:	69fb      	ldr	r3, [r7, #28]
 8015752:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 8015754:	697b      	ldr	r3, [r7, #20]
 8015756:	69fa      	ldr	r2, [r7, #28]
 8015758:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 801575a:	69fb      	ldr	r3, [r7, #28]
 801575c:	681b      	ldr	r3, [r3, #0]
 801575e:	2b00      	cmp	r3, #0
 8015760:	d103      	bne.n	801576a <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 8015762:	687b      	ldr	r3, [r7, #4]
 8015764:	2200      	movs	r2, #0
 8015766:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 801576a:	2300      	movs	r3, #0
 801576c:	e016      	b.n	801579c <tcp_split_unsent_seg+0x26c>
    goto memerr;
 801576e:	bf00      	nop
 8015770:	e002      	b.n	8015778 <tcp_split_unsent_seg+0x248>
    goto memerr;
 8015772:	bf00      	nop
 8015774:	e000      	b.n	8015778 <tcp_split_unsent_seg+0x248>
    goto memerr;
 8015776:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 8015778:	69fb      	ldr	r3, [r7, #28]
 801577a:	2b00      	cmp	r3, #0
 801577c:	d006      	beq.n	801578c <tcp_split_unsent_seg+0x25c>
 801577e:	4b09      	ldr	r3, [pc, #36]	; (80157a4 <tcp_split_unsent_seg+0x274>)
 8015780:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 8015784:	490d      	ldr	r1, [pc, #52]	; (80157bc <tcp_split_unsent_seg+0x28c>)
 8015786:	4809      	ldr	r0, [pc, #36]	; (80157ac <tcp_split_unsent_seg+0x27c>)
 8015788:	f004 fbb6 	bl	8019ef8 <iprintf>
  if (p != NULL) {
 801578c:	693b      	ldr	r3, [r7, #16]
 801578e:	2b00      	cmp	r3, #0
 8015790:	d002      	beq.n	8015798 <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 8015792:	6938      	ldr	r0, [r7, #16]
 8015794:	f7fb fcda 	bl	801114c <pbuf_free>
  }

  return ERR_MEM;
 8015798:	f04f 33ff 	mov.w	r3, #4294967295
}
 801579c:	4618      	mov	r0, r3
 801579e:	3724      	adds	r7, #36	; 0x24
 80157a0:	46bd      	mov	sp, r7
 80157a2:	bd90      	pop	{r4, r7, pc}
 80157a4:	0801e100 	.word	0x0801e100
 80157a8:	0801e494 	.word	0x0801e494
 80157ac:	0801e154 	.word	0x0801e154
 80157b0:	0801e4b8 	.word	0x0801e4b8
 80157b4:	0801e4dc 	.word	0x0801e4dc
 80157b8:	0801e4ec 	.word	0x0801e4ec
 80157bc:	0801e4fc 	.word	0x0801e4fc

080157c0 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 80157c0:	b590      	push	{r4, r7, lr}
 80157c2:	b085      	sub	sp, #20
 80157c4:	af00      	add	r7, sp, #0
 80157c6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 80157c8:	687b      	ldr	r3, [r7, #4]
 80157ca:	2b00      	cmp	r3, #0
 80157cc:	d106      	bne.n	80157dc <tcp_send_fin+0x1c>
 80157ce:	4b21      	ldr	r3, [pc, #132]	; (8015854 <tcp_send_fin+0x94>)
 80157d0:	f240 32eb 	movw	r2, #1003	; 0x3eb
 80157d4:	4920      	ldr	r1, [pc, #128]	; (8015858 <tcp_send_fin+0x98>)
 80157d6:	4821      	ldr	r0, [pc, #132]	; (801585c <tcp_send_fin+0x9c>)
 80157d8:	f004 fb8e 	bl	8019ef8 <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 80157dc:	687b      	ldr	r3, [r7, #4]
 80157de:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80157e0:	2b00      	cmp	r3, #0
 80157e2:	d02e      	beq.n	8015842 <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 80157e4:	687b      	ldr	r3, [r7, #4]
 80157e6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80157e8:	60fb      	str	r3, [r7, #12]
 80157ea:	e002      	b.n	80157f2 <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 80157ec:	68fb      	ldr	r3, [r7, #12]
 80157ee:	681b      	ldr	r3, [r3, #0]
 80157f0:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 80157f2:	68fb      	ldr	r3, [r7, #12]
 80157f4:	681b      	ldr	r3, [r3, #0]
 80157f6:	2b00      	cmp	r3, #0
 80157f8:	d1f8      	bne.n	80157ec <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 80157fa:	68fb      	ldr	r3, [r7, #12]
 80157fc:	68db      	ldr	r3, [r3, #12]
 80157fe:	899b      	ldrh	r3, [r3, #12]
 8015800:	b29b      	uxth	r3, r3
 8015802:	4618      	mov	r0, r3
 8015804:	f7fa f8be 	bl	800f984 <lwip_htons>
 8015808:	4603      	mov	r3, r0
 801580a:	b2db      	uxtb	r3, r3
 801580c:	f003 0307 	and.w	r3, r3, #7
 8015810:	2b00      	cmp	r3, #0
 8015812:	d116      	bne.n	8015842 <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 8015814:	68fb      	ldr	r3, [r7, #12]
 8015816:	68db      	ldr	r3, [r3, #12]
 8015818:	899b      	ldrh	r3, [r3, #12]
 801581a:	b29c      	uxth	r4, r3
 801581c:	2001      	movs	r0, #1
 801581e:	f7fa f8b1 	bl	800f984 <lwip_htons>
 8015822:	4603      	mov	r3, r0
 8015824:	461a      	mov	r2, r3
 8015826:	68fb      	ldr	r3, [r7, #12]
 8015828:	68db      	ldr	r3, [r3, #12]
 801582a:	4322      	orrs	r2, r4
 801582c:	b292      	uxth	r2, r2
 801582e:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 8015830:	687b      	ldr	r3, [r7, #4]
 8015832:	8b5b      	ldrh	r3, [r3, #26]
 8015834:	f043 0320 	orr.w	r3, r3, #32
 8015838:	b29a      	uxth	r2, r3
 801583a:	687b      	ldr	r3, [r7, #4]
 801583c:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 801583e:	2300      	movs	r3, #0
 8015840:	e004      	b.n	801584c <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 8015842:	2101      	movs	r1, #1
 8015844:	6878      	ldr	r0, [r7, #4]
 8015846:	f000 f80b 	bl	8015860 <tcp_enqueue_flags>
 801584a:	4603      	mov	r3, r0
}
 801584c:	4618      	mov	r0, r3
 801584e:	3714      	adds	r7, #20
 8015850:	46bd      	mov	sp, r7
 8015852:	bd90      	pop	{r4, r7, pc}
 8015854:	0801e100 	.word	0x0801e100
 8015858:	0801e508 	.word	0x0801e508
 801585c:	0801e154 	.word	0x0801e154

08015860 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 8015860:	b580      	push	{r7, lr}
 8015862:	b08a      	sub	sp, #40	; 0x28
 8015864:	af02      	add	r7, sp, #8
 8015866:	6078      	str	r0, [r7, #4]
 8015868:	460b      	mov	r3, r1
 801586a:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 801586c:	2300      	movs	r3, #0
 801586e:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 8015870:	2300      	movs	r3, #0
 8015872:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 8015874:	78fb      	ldrb	r3, [r7, #3]
 8015876:	f003 0303 	and.w	r3, r3, #3
 801587a:	2b00      	cmp	r3, #0
 801587c:	d106      	bne.n	801588c <tcp_enqueue_flags+0x2c>
 801587e:	4b67      	ldr	r3, [pc, #412]	; (8015a1c <tcp_enqueue_flags+0x1bc>)
 8015880:	f240 4211 	movw	r2, #1041	; 0x411
 8015884:	4966      	ldr	r1, [pc, #408]	; (8015a20 <tcp_enqueue_flags+0x1c0>)
 8015886:	4867      	ldr	r0, [pc, #412]	; (8015a24 <tcp_enqueue_flags+0x1c4>)
 8015888:	f004 fb36 	bl	8019ef8 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 801588c:	687b      	ldr	r3, [r7, #4]
 801588e:	2b00      	cmp	r3, #0
 8015890:	d106      	bne.n	80158a0 <tcp_enqueue_flags+0x40>
 8015892:	4b62      	ldr	r3, [pc, #392]	; (8015a1c <tcp_enqueue_flags+0x1bc>)
 8015894:	f240 4213 	movw	r2, #1043	; 0x413
 8015898:	4963      	ldr	r1, [pc, #396]	; (8015a28 <tcp_enqueue_flags+0x1c8>)
 801589a:	4862      	ldr	r0, [pc, #392]	; (8015a24 <tcp_enqueue_flags+0x1c4>)
 801589c:	f004 fb2c 	bl	8019ef8 <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 80158a0:	78fb      	ldrb	r3, [r7, #3]
 80158a2:	f003 0302 	and.w	r3, r3, #2
 80158a6:	2b00      	cmp	r3, #0
 80158a8:	d001      	beq.n	80158ae <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 80158aa:	2301      	movs	r3, #1
 80158ac:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 80158ae:	7ffb      	ldrb	r3, [r7, #31]
 80158b0:	009b      	lsls	r3, r3, #2
 80158b2:	b2db      	uxtb	r3, r3
 80158b4:	f003 0304 	and.w	r3, r3, #4
 80158b8:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 80158ba:	7dfb      	ldrb	r3, [r7, #23]
 80158bc:	b29b      	uxth	r3, r3
 80158be:	f44f 7220 	mov.w	r2, #640	; 0x280
 80158c2:	4619      	mov	r1, r3
 80158c4:	2036      	movs	r0, #54	; 0x36
 80158c6:	f7fb f95d 	bl	8010b84 <pbuf_alloc>
 80158ca:	6138      	str	r0, [r7, #16]
 80158cc:	693b      	ldr	r3, [r7, #16]
 80158ce:	2b00      	cmp	r3, #0
 80158d0:	d109      	bne.n	80158e6 <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 80158d2:	687b      	ldr	r3, [r7, #4]
 80158d4:	8b5b      	ldrh	r3, [r3, #26]
 80158d6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80158da:	b29a      	uxth	r2, r3
 80158dc:	687b      	ldr	r3, [r7, #4]
 80158de:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 80158e0:	f04f 33ff 	mov.w	r3, #4294967295
 80158e4:	e095      	b.n	8015a12 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 80158e6:	693b      	ldr	r3, [r7, #16]
 80158e8:	895a      	ldrh	r2, [r3, #10]
 80158ea:	7dfb      	ldrb	r3, [r7, #23]
 80158ec:	b29b      	uxth	r3, r3
 80158ee:	429a      	cmp	r2, r3
 80158f0:	d206      	bcs.n	8015900 <tcp_enqueue_flags+0xa0>
 80158f2:	4b4a      	ldr	r3, [pc, #296]	; (8015a1c <tcp_enqueue_flags+0x1bc>)
 80158f4:	f240 4239 	movw	r2, #1081	; 0x439
 80158f8:	494c      	ldr	r1, [pc, #304]	; (8015a2c <tcp_enqueue_flags+0x1cc>)
 80158fa:	484a      	ldr	r0, [pc, #296]	; (8015a24 <tcp_enqueue_flags+0x1c4>)
 80158fc:	f004 fafc 	bl	8019ef8 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 8015900:	687b      	ldr	r3, [r7, #4]
 8015902:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 8015904:	78fa      	ldrb	r2, [r7, #3]
 8015906:	7ffb      	ldrb	r3, [r7, #31]
 8015908:	9300      	str	r3, [sp, #0]
 801590a:	460b      	mov	r3, r1
 801590c:	6939      	ldr	r1, [r7, #16]
 801590e:	6878      	ldr	r0, [r7, #4]
 8015910:	f7ff fd70 	bl	80153f4 <tcp_create_segment>
 8015914:	60f8      	str	r0, [r7, #12]
 8015916:	68fb      	ldr	r3, [r7, #12]
 8015918:	2b00      	cmp	r3, #0
 801591a:	d109      	bne.n	8015930 <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801591c:	687b      	ldr	r3, [r7, #4]
 801591e:	8b5b      	ldrh	r3, [r3, #26]
 8015920:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8015924:	b29a      	uxth	r2, r3
 8015926:	687b      	ldr	r3, [r7, #4]
 8015928:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 801592a:	f04f 33ff 	mov.w	r3, #4294967295
 801592e:	e070      	b.n	8015a12 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 8015930:	68fb      	ldr	r3, [r7, #12]
 8015932:	68db      	ldr	r3, [r3, #12]
 8015934:	f003 0303 	and.w	r3, r3, #3
 8015938:	2b00      	cmp	r3, #0
 801593a:	d006      	beq.n	801594a <tcp_enqueue_flags+0xea>
 801593c:	4b37      	ldr	r3, [pc, #220]	; (8015a1c <tcp_enqueue_flags+0x1bc>)
 801593e:	f240 4242 	movw	r2, #1090	; 0x442
 8015942:	493b      	ldr	r1, [pc, #236]	; (8015a30 <tcp_enqueue_flags+0x1d0>)
 8015944:	4837      	ldr	r0, [pc, #220]	; (8015a24 <tcp_enqueue_flags+0x1c4>)
 8015946:	f004 fad7 	bl	8019ef8 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 801594a:	68fb      	ldr	r3, [r7, #12]
 801594c:	891b      	ldrh	r3, [r3, #8]
 801594e:	2b00      	cmp	r3, #0
 8015950:	d006      	beq.n	8015960 <tcp_enqueue_flags+0x100>
 8015952:	4b32      	ldr	r3, [pc, #200]	; (8015a1c <tcp_enqueue_flags+0x1bc>)
 8015954:	f240 4243 	movw	r2, #1091	; 0x443
 8015958:	4936      	ldr	r1, [pc, #216]	; (8015a34 <tcp_enqueue_flags+0x1d4>)
 801595a:	4832      	ldr	r0, [pc, #200]	; (8015a24 <tcp_enqueue_flags+0x1c4>)
 801595c:	f004 facc 	bl	8019ef8 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 8015960:	687b      	ldr	r3, [r7, #4]
 8015962:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8015964:	2b00      	cmp	r3, #0
 8015966:	d103      	bne.n	8015970 <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 8015968:	687b      	ldr	r3, [r7, #4]
 801596a:	68fa      	ldr	r2, [r7, #12]
 801596c:	66da      	str	r2, [r3, #108]	; 0x6c
 801596e:	e00d      	b.n	801598c <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 8015970:	687b      	ldr	r3, [r7, #4]
 8015972:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8015974:	61bb      	str	r3, [r7, #24]
 8015976:	e002      	b.n	801597e <tcp_enqueue_flags+0x11e>
 8015978:	69bb      	ldr	r3, [r7, #24]
 801597a:	681b      	ldr	r3, [r3, #0]
 801597c:	61bb      	str	r3, [r7, #24]
 801597e:	69bb      	ldr	r3, [r7, #24]
 8015980:	681b      	ldr	r3, [r3, #0]
 8015982:	2b00      	cmp	r3, #0
 8015984:	d1f8      	bne.n	8015978 <tcp_enqueue_flags+0x118>
    useg->next = seg;
 8015986:	69bb      	ldr	r3, [r7, #24]
 8015988:	68fa      	ldr	r2, [r7, #12]
 801598a:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 801598c:	687b      	ldr	r3, [r7, #4]
 801598e:	2200      	movs	r2, #0
 8015990:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 8015994:	78fb      	ldrb	r3, [r7, #3]
 8015996:	f003 0302 	and.w	r3, r3, #2
 801599a:	2b00      	cmp	r3, #0
 801599c:	d104      	bne.n	80159a8 <tcp_enqueue_flags+0x148>
 801599e:	78fb      	ldrb	r3, [r7, #3]
 80159a0:	f003 0301 	and.w	r3, r3, #1
 80159a4:	2b00      	cmp	r3, #0
 80159a6:	d004      	beq.n	80159b2 <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 80159a8:	687b      	ldr	r3, [r7, #4]
 80159aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80159ac:	1c5a      	adds	r2, r3, #1
 80159ae:	687b      	ldr	r3, [r7, #4]
 80159b0:	65da      	str	r2, [r3, #92]	; 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 80159b2:	78fb      	ldrb	r3, [r7, #3]
 80159b4:	f003 0301 	and.w	r3, r3, #1
 80159b8:	2b00      	cmp	r3, #0
 80159ba:	d006      	beq.n	80159ca <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 80159bc:	687b      	ldr	r3, [r7, #4]
 80159be:	8b5b      	ldrh	r3, [r3, #26]
 80159c0:	f043 0320 	orr.w	r3, r3, #32
 80159c4:	b29a      	uxth	r2, r3
 80159c6:	687b      	ldr	r3, [r7, #4]
 80159c8:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 80159ca:	68fb      	ldr	r3, [r7, #12]
 80159cc:	685b      	ldr	r3, [r3, #4]
 80159ce:	4618      	mov	r0, r3
 80159d0:	f7fb fc44 	bl	801125c <pbuf_clen>
 80159d4:	4603      	mov	r3, r0
 80159d6:	461a      	mov	r2, r3
 80159d8:	687b      	ldr	r3, [r7, #4]
 80159da:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80159de:	4413      	add	r3, r2
 80159e0:	b29a      	uxth	r2, r3
 80159e2:	687b      	ldr	r3, [r7, #4]
 80159e4:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 80159e8:	687b      	ldr	r3, [r7, #4]
 80159ea:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80159ee:	2b00      	cmp	r3, #0
 80159f0:	d00e      	beq.n	8015a10 <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 80159f2:	687b      	ldr	r3, [r7, #4]
 80159f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80159f6:	2b00      	cmp	r3, #0
 80159f8:	d10a      	bne.n	8015a10 <tcp_enqueue_flags+0x1b0>
 80159fa:	687b      	ldr	r3, [r7, #4]
 80159fc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80159fe:	2b00      	cmp	r3, #0
 8015a00:	d106      	bne.n	8015a10 <tcp_enqueue_flags+0x1b0>
 8015a02:	4b06      	ldr	r3, [pc, #24]	; (8015a1c <tcp_enqueue_flags+0x1bc>)
 8015a04:	f240 4265 	movw	r2, #1125	; 0x465
 8015a08:	490b      	ldr	r1, [pc, #44]	; (8015a38 <tcp_enqueue_flags+0x1d8>)
 8015a0a:	4806      	ldr	r0, [pc, #24]	; (8015a24 <tcp_enqueue_flags+0x1c4>)
 8015a0c:	f004 fa74 	bl	8019ef8 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 8015a10:	2300      	movs	r3, #0
}
 8015a12:	4618      	mov	r0, r3
 8015a14:	3720      	adds	r7, #32
 8015a16:	46bd      	mov	sp, r7
 8015a18:	bd80      	pop	{r7, pc}
 8015a1a:	bf00      	nop
 8015a1c:	0801e100 	.word	0x0801e100
 8015a20:	0801e524 	.word	0x0801e524
 8015a24:	0801e154 	.word	0x0801e154
 8015a28:	0801e57c 	.word	0x0801e57c
 8015a2c:	0801e59c 	.word	0x0801e59c
 8015a30:	0801e5d8 	.word	0x0801e5d8
 8015a34:	0801e5f0 	.word	0x0801e5f0
 8015a38:	0801e61c 	.word	0x0801e61c

08015a3c <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 8015a3c:	b5b0      	push	{r4, r5, r7, lr}
 8015a3e:	b08a      	sub	sp, #40	; 0x28
 8015a40:	af00      	add	r7, sp, #0
 8015a42:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 8015a44:	687b      	ldr	r3, [r7, #4]
 8015a46:	2b00      	cmp	r3, #0
 8015a48:	d106      	bne.n	8015a58 <tcp_output+0x1c>
 8015a4a:	4b8a      	ldr	r3, [pc, #552]	; (8015c74 <tcp_output+0x238>)
 8015a4c:	f240 42e1 	movw	r2, #1249	; 0x4e1
 8015a50:	4989      	ldr	r1, [pc, #548]	; (8015c78 <tcp_output+0x23c>)
 8015a52:	488a      	ldr	r0, [pc, #552]	; (8015c7c <tcp_output+0x240>)
 8015a54:	f004 fa50 	bl	8019ef8 <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 8015a58:	687b      	ldr	r3, [r7, #4]
 8015a5a:	7d1b      	ldrb	r3, [r3, #20]
 8015a5c:	2b01      	cmp	r3, #1
 8015a5e:	d106      	bne.n	8015a6e <tcp_output+0x32>
 8015a60:	4b84      	ldr	r3, [pc, #528]	; (8015c74 <tcp_output+0x238>)
 8015a62:	f240 42e3 	movw	r2, #1251	; 0x4e3
 8015a66:	4986      	ldr	r1, [pc, #536]	; (8015c80 <tcp_output+0x244>)
 8015a68:	4884      	ldr	r0, [pc, #528]	; (8015c7c <tcp_output+0x240>)
 8015a6a:	f004 fa45 	bl	8019ef8 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 8015a6e:	4b85      	ldr	r3, [pc, #532]	; (8015c84 <tcp_output+0x248>)
 8015a70:	681b      	ldr	r3, [r3, #0]
 8015a72:	687a      	ldr	r2, [r7, #4]
 8015a74:	429a      	cmp	r2, r3
 8015a76:	d101      	bne.n	8015a7c <tcp_output+0x40>
    return ERR_OK;
 8015a78:	2300      	movs	r3, #0
 8015a7a:	e1ce      	b.n	8015e1a <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 8015a7c:	687b      	ldr	r3, [r7, #4]
 8015a7e:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8015a82:	687b      	ldr	r3, [r7, #4]
 8015a84:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8015a88:	4293      	cmp	r3, r2
 8015a8a:	bf28      	it	cs
 8015a8c:	4613      	movcs	r3, r2
 8015a8e:	b29b      	uxth	r3, r3
 8015a90:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 8015a92:	687b      	ldr	r3, [r7, #4]
 8015a94:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8015a96:	627b      	str	r3, [r7, #36]	; 0x24

  if (seg == NULL) {
 8015a98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015a9a:	2b00      	cmp	r3, #0
 8015a9c:	d10b      	bne.n	8015ab6 <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 8015a9e:	687b      	ldr	r3, [r7, #4]
 8015aa0:	8b5b      	ldrh	r3, [r3, #26]
 8015aa2:	f003 0302 	and.w	r3, r3, #2
 8015aa6:	2b00      	cmp	r3, #0
 8015aa8:	f000 81aa 	beq.w	8015e00 <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 8015aac:	6878      	ldr	r0, [r7, #4]
 8015aae:	f000 fdcb 	bl	8016648 <tcp_send_empty_ack>
 8015ab2:	4603      	mov	r3, r0
 8015ab4:	e1b1      	b.n	8015e1a <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 8015ab6:	6879      	ldr	r1, [r7, #4]
 8015ab8:	687b      	ldr	r3, [r7, #4]
 8015aba:	3304      	adds	r3, #4
 8015abc:	461a      	mov	r2, r3
 8015abe:	6878      	ldr	r0, [r7, #4]
 8015ac0:	f7ff fc7c 	bl	80153bc <tcp_route>
 8015ac4:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 8015ac6:	697b      	ldr	r3, [r7, #20]
 8015ac8:	2b00      	cmp	r3, #0
 8015aca:	d102      	bne.n	8015ad2 <tcp_output+0x96>
    return ERR_RTE;
 8015acc:	f06f 0303 	mvn.w	r3, #3
 8015ad0:	e1a3      	b.n	8015e1a <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 8015ad2:	687b      	ldr	r3, [r7, #4]
 8015ad4:	2b00      	cmp	r3, #0
 8015ad6:	d003      	beq.n	8015ae0 <tcp_output+0xa4>
 8015ad8:	687b      	ldr	r3, [r7, #4]
 8015ada:	681b      	ldr	r3, [r3, #0]
 8015adc:	2b00      	cmp	r3, #0
 8015ade:	d111      	bne.n	8015b04 <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 8015ae0:	697b      	ldr	r3, [r7, #20]
 8015ae2:	2b00      	cmp	r3, #0
 8015ae4:	d002      	beq.n	8015aec <tcp_output+0xb0>
 8015ae6:	697b      	ldr	r3, [r7, #20]
 8015ae8:	3304      	adds	r3, #4
 8015aea:	e000      	b.n	8015aee <tcp_output+0xb2>
 8015aec:	2300      	movs	r3, #0
 8015aee:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 8015af0:	693b      	ldr	r3, [r7, #16]
 8015af2:	2b00      	cmp	r3, #0
 8015af4:	d102      	bne.n	8015afc <tcp_output+0xc0>
      return ERR_RTE;
 8015af6:	f06f 0303 	mvn.w	r3, #3
 8015afa:	e18e      	b.n	8015e1a <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 8015afc:	693b      	ldr	r3, [r7, #16]
 8015afe:	681a      	ldr	r2, [r3, #0]
 8015b00:	687b      	ldr	r3, [r7, #4]
 8015b02:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 8015b04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015b06:	68db      	ldr	r3, [r3, #12]
 8015b08:	685b      	ldr	r3, [r3, #4]
 8015b0a:	4618      	mov	r0, r3
 8015b0c:	f7f9 ff4f 	bl	800f9ae <lwip_htonl>
 8015b10:	4602      	mov	r2, r0
 8015b12:	687b      	ldr	r3, [r7, #4]
 8015b14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8015b16:	1ad3      	subs	r3, r2, r3
 8015b18:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8015b1a:	8912      	ldrh	r2, [r2, #8]
 8015b1c:	4413      	add	r3, r2
 8015b1e:	69ba      	ldr	r2, [r7, #24]
 8015b20:	429a      	cmp	r2, r3
 8015b22:	d227      	bcs.n	8015b74 <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 8015b24:	687b      	ldr	r3, [r7, #4]
 8015b26:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8015b2a:	461a      	mov	r2, r3
 8015b2c:	69bb      	ldr	r3, [r7, #24]
 8015b2e:	4293      	cmp	r3, r2
 8015b30:	d114      	bne.n	8015b5c <tcp_output+0x120>
 8015b32:	687b      	ldr	r3, [r7, #4]
 8015b34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8015b36:	2b00      	cmp	r3, #0
 8015b38:	d110      	bne.n	8015b5c <tcp_output+0x120>
 8015b3a:	687b      	ldr	r3, [r7, #4]
 8015b3c:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8015b40:	2b00      	cmp	r3, #0
 8015b42:	d10b      	bne.n	8015b5c <tcp_output+0x120>
      pcb->persist_cnt = 0;
 8015b44:	687b      	ldr	r3, [r7, #4]
 8015b46:	2200      	movs	r2, #0
 8015b48:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
      pcb->persist_backoff = 1;
 8015b4c:	687b      	ldr	r3, [r7, #4]
 8015b4e:	2201      	movs	r2, #1
 8015b50:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
      pcb->persist_probe = 0;
 8015b54:	687b      	ldr	r3, [r7, #4]
 8015b56:	2200      	movs	r2, #0
 8015b58:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 8015b5c:	687b      	ldr	r3, [r7, #4]
 8015b5e:	8b5b      	ldrh	r3, [r3, #26]
 8015b60:	f003 0302 	and.w	r3, r3, #2
 8015b64:	2b00      	cmp	r3, #0
 8015b66:	f000 814d 	beq.w	8015e04 <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 8015b6a:	6878      	ldr	r0, [r7, #4]
 8015b6c:	f000 fd6c 	bl	8016648 <tcp_send_empty_ack>
 8015b70:	4603      	mov	r3, r0
 8015b72:	e152      	b.n	8015e1a <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 8015b74:	687b      	ldr	r3, [r7, #4]
 8015b76:	2200      	movs	r2, #0
 8015b78:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 8015b7c:	687b      	ldr	r3, [r7, #4]
 8015b7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8015b80:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 8015b82:	6a3b      	ldr	r3, [r7, #32]
 8015b84:	2b00      	cmp	r3, #0
 8015b86:	f000 811c 	beq.w	8015dc2 <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 8015b8a:	e002      	b.n	8015b92 <tcp_output+0x156>
 8015b8c:	6a3b      	ldr	r3, [r7, #32]
 8015b8e:	681b      	ldr	r3, [r3, #0]
 8015b90:	623b      	str	r3, [r7, #32]
 8015b92:	6a3b      	ldr	r3, [r7, #32]
 8015b94:	681b      	ldr	r3, [r3, #0]
 8015b96:	2b00      	cmp	r3, #0
 8015b98:	d1f8      	bne.n	8015b8c <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 8015b9a:	e112      	b.n	8015dc2 <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 8015b9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015b9e:	68db      	ldr	r3, [r3, #12]
 8015ba0:	899b      	ldrh	r3, [r3, #12]
 8015ba2:	b29b      	uxth	r3, r3
 8015ba4:	4618      	mov	r0, r3
 8015ba6:	f7f9 feed 	bl	800f984 <lwip_htons>
 8015baa:	4603      	mov	r3, r0
 8015bac:	b2db      	uxtb	r3, r3
 8015bae:	f003 0304 	and.w	r3, r3, #4
 8015bb2:	2b00      	cmp	r3, #0
 8015bb4:	d006      	beq.n	8015bc4 <tcp_output+0x188>
 8015bb6:	4b2f      	ldr	r3, [pc, #188]	; (8015c74 <tcp_output+0x238>)
 8015bb8:	f240 5236 	movw	r2, #1334	; 0x536
 8015bbc:	4932      	ldr	r1, [pc, #200]	; (8015c88 <tcp_output+0x24c>)
 8015bbe:	482f      	ldr	r0, [pc, #188]	; (8015c7c <tcp_output+0x240>)
 8015bc0:	f004 f99a 	bl	8019ef8 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8015bc4:	687b      	ldr	r3, [r7, #4]
 8015bc6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8015bc8:	2b00      	cmp	r3, #0
 8015bca:	d01f      	beq.n	8015c0c <tcp_output+0x1d0>
 8015bcc:	687b      	ldr	r3, [r7, #4]
 8015bce:	8b5b      	ldrh	r3, [r3, #26]
 8015bd0:	f003 0344 	and.w	r3, r3, #68	; 0x44
 8015bd4:	2b00      	cmp	r3, #0
 8015bd6:	d119      	bne.n	8015c0c <tcp_output+0x1d0>
 8015bd8:	687b      	ldr	r3, [r7, #4]
 8015bda:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8015bdc:	2b00      	cmp	r3, #0
 8015bde:	d00b      	beq.n	8015bf8 <tcp_output+0x1bc>
 8015be0:	687b      	ldr	r3, [r7, #4]
 8015be2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8015be4:	681b      	ldr	r3, [r3, #0]
 8015be6:	2b00      	cmp	r3, #0
 8015be8:	d110      	bne.n	8015c0c <tcp_output+0x1d0>
 8015bea:	687b      	ldr	r3, [r7, #4]
 8015bec:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8015bee:	891a      	ldrh	r2, [r3, #8]
 8015bf0:	687b      	ldr	r3, [r7, #4]
 8015bf2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8015bf4:	429a      	cmp	r2, r3
 8015bf6:	d209      	bcs.n	8015c0c <tcp_output+0x1d0>
 8015bf8:	687b      	ldr	r3, [r7, #4]
 8015bfa:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8015bfe:	2b00      	cmp	r3, #0
 8015c00:	d004      	beq.n	8015c0c <tcp_output+0x1d0>
 8015c02:	687b      	ldr	r3, [r7, #4]
 8015c04:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8015c08:	2b0f      	cmp	r3, #15
 8015c0a:	d901      	bls.n	8015c10 <tcp_output+0x1d4>
 8015c0c:	2301      	movs	r3, #1
 8015c0e:	e000      	b.n	8015c12 <tcp_output+0x1d6>
 8015c10:	2300      	movs	r3, #0
 8015c12:	2b00      	cmp	r3, #0
 8015c14:	d106      	bne.n	8015c24 <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 8015c16:	687b      	ldr	r3, [r7, #4]
 8015c18:	8b5b      	ldrh	r3, [r3, #26]
 8015c1a:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8015c1e:	2b00      	cmp	r3, #0
 8015c20:	f000 80e4 	beq.w	8015dec <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 8015c24:	687b      	ldr	r3, [r7, #4]
 8015c26:	7d1b      	ldrb	r3, [r3, #20]
 8015c28:	2b02      	cmp	r3, #2
 8015c2a:	d00d      	beq.n	8015c48 <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 8015c2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015c2e:	68db      	ldr	r3, [r3, #12]
 8015c30:	899b      	ldrh	r3, [r3, #12]
 8015c32:	b29c      	uxth	r4, r3
 8015c34:	2010      	movs	r0, #16
 8015c36:	f7f9 fea5 	bl	800f984 <lwip_htons>
 8015c3a:	4603      	mov	r3, r0
 8015c3c:	461a      	mov	r2, r3
 8015c3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015c40:	68db      	ldr	r3, [r3, #12]
 8015c42:	4322      	orrs	r2, r4
 8015c44:	b292      	uxth	r2, r2
 8015c46:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 8015c48:	697a      	ldr	r2, [r7, #20]
 8015c4a:	6879      	ldr	r1, [r7, #4]
 8015c4c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8015c4e:	f000 f909 	bl	8015e64 <tcp_output_segment>
 8015c52:	4603      	mov	r3, r0
 8015c54:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 8015c56:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8015c5a:	2b00      	cmp	r3, #0
 8015c5c:	d016      	beq.n	8015c8c <tcp_output+0x250>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8015c5e:	687b      	ldr	r3, [r7, #4]
 8015c60:	8b5b      	ldrh	r3, [r3, #26]
 8015c62:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8015c66:	b29a      	uxth	r2, r3
 8015c68:	687b      	ldr	r3, [r7, #4]
 8015c6a:	835a      	strh	r2, [r3, #26]
      return err;
 8015c6c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8015c70:	e0d3      	b.n	8015e1a <tcp_output+0x3de>
 8015c72:	bf00      	nop
 8015c74:	0801e100 	.word	0x0801e100
 8015c78:	0801e644 	.word	0x0801e644
 8015c7c:	0801e154 	.word	0x0801e154
 8015c80:	0801e65c 	.word	0x0801e65c
 8015c84:	20007120 	.word	0x20007120
 8015c88:	0801e684 	.word	0x0801e684
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 8015c8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015c8e:	681a      	ldr	r2, [r3, #0]
 8015c90:	687b      	ldr	r3, [r7, #4]
 8015c92:	66da      	str	r2, [r3, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 8015c94:	687b      	ldr	r3, [r7, #4]
 8015c96:	7d1b      	ldrb	r3, [r3, #20]
 8015c98:	2b02      	cmp	r3, #2
 8015c9a:	d006      	beq.n	8015caa <tcp_output+0x26e>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8015c9c:	687b      	ldr	r3, [r7, #4]
 8015c9e:	8b5b      	ldrh	r3, [r3, #26]
 8015ca0:	f023 0303 	bic.w	r3, r3, #3
 8015ca4:	b29a      	uxth	r2, r3
 8015ca6:	687b      	ldr	r3, [r7, #4]
 8015ca8:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8015caa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015cac:	68db      	ldr	r3, [r3, #12]
 8015cae:	685b      	ldr	r3, [r3, #4]
 8015cb0:	4618      	mov	r0, r3
 8015cb2:	f7f9 fe7c 	bl	800f9ae <lwip_htonl>
 8015cb6:	4604      	mov	r4, r0
 8015cb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015cba:	891b      	ldrh	r3, [r3, #8]
 8015cbc:	461d      	mov	r5, r3
 8015cbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015cc0:	68db      	ldr	r3, [r3, #12]
 8015cc2:	899b      	ldrh	r3, [r3, #12]
 8015cc4:	b29b      	uxth	r3, r3
 8015cc6:	4618      	mov	r0, r3
 8015cc8:	f7f9 fe5c 	bl	800f984 <lwip_htons>
 8015ccc:	4603      	mov	r3, r0
 8015cce:	b2db      	uxtb	r3, r3
 8015cd0:	f003 0303 	and.w	r3, r3, #3
 8015cd4:	2b00      	cmp	r3, #0
 8015cd6:	d001      	beq.n	8015cdc <tcp_output+0x2a0>
 8015cd8:	2301      	movs	r3, #1
 8015cda:	e000      	b.n	8015cde <tcp_output+0x2a2>
 8015cdc:	2300      	movs	r3, #0
 8015cde:	442b      	add	r3, r5
 8015ce0:	4423      	add	r3, r4
 8015ce2:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8015ce4:	687b      	ldr	r3, [r7, #4]
 8015ce6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8015ce8:	68bb      	ldr	r3, [r7, #8]
 8015cea:	1ad3      	subs	r3, r2, r3
 8015cec:	2b00      	cmp	r3, #0
 8015cee:	da02      	bge.n	8015cf6 <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 8015cf0:	687b      	ldr	r3, [r7, #4]
 8015cf2:	68ba      	ldr	r2, [r7, #8]
 8015cf4:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 8015cf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015cf8:	891b      	ldrh	r3, [r3, #8]
 8015cfa:	461c      	mov	r4, r3
 8015cfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015cfe:	68db      	ldr	r3, [r3, #12]
 8015d00:	899b      	ldrh	r3, [r3, #12]
 8015d02:	b29b      	uxth	r3, r3
 8015d04:	4618      	mov	r0, r3
 8015d06:	f7f9 fe3d 	bl	800f984 <lwip_htons>
 8015d0a:	4603      	mov	r3, r0
 8015d0c:	b2db      	uxtb	r3, r3
 8015d0e:	f003 0303 	and.w	r3, r3, #3
 8015d12:	2b00      	cmp	r3, #0
 8015d14:	d001      	beq.n	8015d1a <tcp_output+0x2de>
 8015d16:	2301      	movs	r3, #1
 8015d18:	e000      	b.n	8015d1c <tcp_output+0x2e0>
 8015d1a:	2300      	movs	r3, #0
 8015d1c:	4423      	add	r3, r4
 8015d1e:	2b00      	cmp	r3, #0
 8015d20:	d049      	beq.n	8015db6 <tcp_output+0x37a>
      seg->next = NULL;
 8015d22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015d24:	2200      	movs	r2, #0
 8015d26:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 8015d28:	687b      	ldr	r3, [r7, #4]
 8015d2a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8015d2c:	2b00      	cmp	r3, #0
 8015d2e:	d105      	bne.n	8015d3c <tcp_output+0x300>
        pcb->unacked = seg;
 8015d30:	687b      	ldr	r3, [r7, #4]
 8015d32:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8015d34:	671a      	str	r2, [r3, #112]	; 0x70
        useg = seg;
 8015d36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015d38:	623b      	str	r3, [r7, #32]
 8015d3a:	e03f      	b.n	8015dbc <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 8015d3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015d3e:	68db      	ldr	r3, [r3, #12]
 8015d40:	685b      	ldr	r3, [r3, #4]
 8015d42:	4618      	mov	r0, r3
 8015d44:	f7f9 fe33 	bl	800f9ae <lwip_htonl>
 8015d48:	4604      	mov	r4, r0
 8015d4a:	6a3b      	ldr	r3, [r7, #32]
 8015d4c:	68db      	ldr	r3, [r3, #12]
 8015d4e:	685b      	ldr	r3, [r3, #4]
 8015d50:	4618      	mov	r0, r3
 8015d52:	f7f9 fe2c 	bl	800f9ae <lwip_htonl>
 8015d56:	4603      	mov	r3, r0
 8015d58:	1ae3      	subs	r3, r4, r3
 8015d5a:	2b00      	cmp	r3, #0
 8015d5c:	da24      	bge.n	8015da8 <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 8015d5e:	687b      	ldr	r3, [r7, #4]
 8015d60:	3370      	adds	r3, #112	; 0x70
 8015d62:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8015d64:	e002      	b.n	8015d6c <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 8015d66:	69fb      	ldr	r3, [r7, #28]
 8015d68:	681b      	ldr	r3, [r3, #0]
 8015d6a:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8015d6c:	69fb      	ldr	r3, [r7, #28]
 8015d6e:	681b      	ldr	r3, [r3, #0]
 8015d70:	2b00      	cmp	r3, #0
 8015d72:	d011      	beq.n	8015d98 <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8015d74:	69fb      	ldr	r3, [r7, #28]
 8015d76:	681b      	ldr	r3, [r3, #0]
 8015d78:	68db      	ldr	r3, [r3, #12]
 8015d7a:	685b      	ldr	r3, [r3, #4]
 8015d7c:	4618      	mov	r0, r3
 8015d7e:	f7f9 fe16 	bl	800f9ae <lwip_htonl>
 8015d82:	4604      	mov	r4, r0
 8015d84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015d86:	68db      	ldr	r3, [r3, #12]
 8015d88:	685b      	ldr	r3, [r3, #4]
 8015d8a:	4618      	mov	r0, r3
 8015d8c:	f7f9 fe0f 	bl	800f9ae <lwip_htonl>
 8015d90:	4603      	mov	r3, r0
 8015d92:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 8015d94:	2b00      	cmp	r3, #0
 8015d96:	dbe6      	blt.n	8015d66 <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 8015d98:	69fb      	ldr	r3, [r7, #28]
 8015d9a:	681a      	ldr	r2, [r3, #0]
 8015d9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015d9e:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 8015da0:	69fb      	ldr	r3, [r7, #28]
 8015da2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8015da4:	601a      	str	r2, [r3, #0]
 8015da6:	e009      	b.n	8015dbc <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 8015da8:	6a3b      	ldr	r3, [r7, #32]
 8015daa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8015dac:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 8015dae:	6a3b      	ldr	r3, [r7, #32]
 8015db0:	681b      	ldr	r3, [r3, #0]
 8015db2:	623b      	str	r3, [r7, #32]
 8015db4:	e002      	b.n	8015dbc <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 8015db6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8015db8:	f7fc fc3f 	bl	801263a <tcp_seg_free>
    }
    seg = pcb->unsent;
 8015dbc:	687b      	ldr	r3, [r7, #4]
 8015dbe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8015dc0:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 8015dc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015dc4:	2b00      	cmp	r3, #0
 8015dc6:	d012      	beq.n	8015dee <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 8015dc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015dca:	68db      	ldr	r3, [r3, #12]
 8015dcc:	685b      	ldr	r3, [r3, #4]
 8015dce:	4618      	mov	r0, r3
 8015dd0:	f7f9 fded 	bl	800f9ae <lwip_htonl>
 8015dd4:	4602      	mov	r2, r0
 8015dd6:	687b      	ldr	r3, [r7, #4]
 8015dd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8015dda:	1ad3      	subs	r3, r2, r3
 8015ddc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8015dde:	8912      	ldrh	r2, [r2, #8]
 8015de0:	4413      	add	r3, r2
  while (seg != NULL &&
 8015de2:	69ba      	ldr	r2, [r7, #24]
 8015de4:	429a      	cmp	r2, r3
 8015de6:	f4bf aed9 	bcs.w	8015b9c <tcp_output+0x160>
 8015dea:	e000      	b.n	8015dee <tcp_output+0x3b2>
      break;
 8015dec:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 8015dee:	687b      	ldr	r3, [r7, #4]
 8015df0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8015df2:	2b00      	cmp	r3, #0
 8015df4:	d108      	bne.n	8015e08 <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 8015df6:	687b      	ldr	r3, [r7, #4]
 8015df8:	2200      	movs	r2, #0
 8015dfa:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 8015dfe:	e004      	b.n	8015e0a <tcp_output+0x3ce>
    goto output_done;
 8015e00:	bf00      	nop
 8015e02:	e002      	b.n	8015e0a <tcp_output+0x3ce>
    goto output_done;
 8015e04:	bf00      	nop
 8015e06:	e000      	b.n	8015e0a <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 8015e08:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 8015e0a:	687b      	ldr	r3, [r7, #4]
 8015e0c:	8b5b      	ldrh	r3, [r3, #26]
 8015e0e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8015e12:	b29a      	uxth	r2, r3
 8015e14:	687b      	ldr	r3, [r7, #4]
 8015e16:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 8015e18:	2300      	movs	r3, #0
}
 8015e1a:	4618      	mov	r0, r3
 8015e1c:	3728      	adds	r7, #40	; 0x28
 8015e1e:	46bd      	mov	sp, r7
 8015e20:	bdb0      	pop	{r4, r5, r7, pc}
 8015e22:	bf00      	nop

08015e24 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 8015e24:	b580      	push	{r7, lr}
 8015e26:	b082      	sub	sp, #8
 8015e28:	af00      	add	r7, sp, #0
 8015e2a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 8015e2c:	687b      	ldr	r3, [r7, #4]
 8015e2e:	2b00      	cmp	r3, #0
 8015e30:	d106      	bne.n	8015e40 <tcp_output_segment_busy+0x1c>
 8015e32:	4b09      	ldr	r3, [pc, #36]	; (8015e58 <tcp_output_segment_busy+0x34>)
 8015e34:	f240 529a 	movw	r2, #1434	; 0x59a
 8015e38:	4908      	ldr	r1, [pc, #32]	; (8015e5c <tcp_output_segment_busy+0x38>)
 8015e3a:	4809      	ldr	r0, [pc, #36]	; (8015e60 <tcp_output_segment_busy+0x3c>)
 8015e3c:	f004 f85c 	bl	8019ef8 <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 8015e40:	687b      	ldr	r3, [r7, #4]
 8015e42:	685b      	ldr	r3, [r3, #4]
 8015e44:	7b9b      	ldrb	r3, [r3, #14]
 8015e46:	2b01      	cmp	r3, #1
 8015e48:	d001      	beq.n	8015e4e <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 8015e4a:	2301      	movs	r3, #1
 8015e4c:	e000      	b.n	8015e50 <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 8015e4e:	2300      	movs	r3, #0
}
 8015e50:	4618      	mov	r0, r3
 8015e52:	3708      	adds	r7, #8
 8015e54:	46bd      	mov	sp, r7
 8015e56:	bd80      	pop	{r7, pc}
 8015e58:	0801e100 	.word	0x0801e100
 8015e5c:	0801e69c 	.word	0x0801e69c
 8015e60:	0801e154 	.word	0x0801e154

08015e64 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 8015e64:	b5b0      	push	{r4, r5, r7, lr}
 8015e66:	b08c      	sub	sp, #48	; 0x30
 8015e68:	af04      	add	r7, sp, #16
 8015e6a:	60f8      	str	r0, [r7, #12]
 8015e6c:	60b9      	str	r1, [r7, #8]
 8015e6e:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 8015e70:	68fb      	ldr	r3, [r7, #12]
 8015e72:	2b00      	cmp	r3, #0
 8015e74:	d106      	bne.n	8015e84 <tcp_output_segment+0x20>
 8015e76:	4b64      	ldr	r3, [pc, #400]	; (8016008 <tcp_output_segment+0x1a4>)
 8015e78:	f44f 62b7 	mov.w	r2, #1464	; 0x5b8
 8015e7c:	4963      	ldr	r1, [pc, #396]	; (801600c <tcp_output_segment+0x1a8>)
 8015e7e:	4864      	ldr	r0, [pc, #400]	; (8016010 <tcp_output_segment+0x1ac>)
 8015e80:	f004 f83a 	bl	8019ef8 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 8015e84:	68bb      	ldr	r3, [r7, #8]
 8015e86:	2b00      	cmp	r3, #0
 8015e88:	d106      	bne.n	8015e98 <tcp_output_segment+0x34>
 8015e8a:	4b5f      	ldr	r3, [pc, #380]	; (8016008 <tcp_output_segment+0x1a4>)
 8015e8c:	f240 52b9 	movw	r2, #1465	; 0x5b9
 8015e90:	4960      	ldr	r1, [pc, #384]	; (8016014 <tcp_output_segment+0x1b0>)
 8015e92:	485f      	ldr	r0, [pc, #380]	; (8016010 <tcp_output_segment+0x1ac>)
 8015e94:	f004 f830 	bl	8019ef8 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 8015e98:	687b      	ldr	r3, [r7, #4]
 8015e9a:	2b00      	cmp	r3, #0
 8015e9c:	d106      	bne.n	8015eac <tcp_output_segment+0x48>
 8015e9e:	4b5a      	ldr	r3, [pc, #360]	; (8016008 <tcp_output_segment+0x1a4>)
 8015ea0:	f240 52ba 	movw	r2, #1466	; 0x5ba
 8015ea4:	495c      	ldr	r1, [pc, #368]	; (8016018 <tcp_output_segment+0x1b4>)
 8015ea6:	485a      	ldr	r0, [pc, #360]	; (8016010 <tcp_output_segment+0x1ac>)
 8015ea8:	f004 f826 	bl	8019ef8 <iprintf>

  if (tcp_output_segment_busy(seg)) {
 8015eac:	68f8      	ldr	r0, [r7, #12]
 8015eae:	f7ff ffb9 	bl	8015e24 <tcp_output_segment_busy>
 8015eb2:	4603      	mov	r3, r0
 8015eb4:	2b00      	cmp	r3, #0
 8015eb6:	d001      	beq.n	8015ebc <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 8015eb8:	2300      	movs	r3, #0
 8015eba:	e0a1      	b.n	8016000 <tcp_output_segment+0x19c>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 8015ebc:	68bb      	ldr	r3, [r7, #8]
 8015ebe:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8015ec0:	68fb      	ldr	r3, [r7, #12]
 8015ec2:	68dc      	ldr	r4, [r3, #12]
 8015ec4:	4610      	mov	r0, r2
 8015ec6:	f7f9 fd72 	bl	800f9ae <lwip_htonl>
 8015eca:	4603      	mov	r3, r0
 8015ecc:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 8015ece:	68bb      	ldr	r3, [r7, #8]
 8015ed0:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 8015ed2:	68fb      	ldr	r3, [r7, #12]
 8015ed4:	68dc      	ldr	r4, [r3, #12]
 8015ed6:	4610      	mov	r0, r2
 8015ed8:	f7f9 fd54 	bl	800f984 <lwip_htons>
 8015edc:	4603      	mov	r3, r0
 8015ede:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8015ee0:	68bb      	ldr	r3, [r7, #8]
 8015ee2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015ee4:	68ba      	ldr	r2, [r7, #8]
 8015ee6:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 8015ee8:	441a      	add	r2, r3
 8015eea:	68bb      	ldr	r3, [r7, #8]
 8015eec:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 8015eee:	68fb      	ldr	r3, [r7, #12]
 8015ef0:	68db      	ldr	r3, [r3, #12]
 8015ef2:	3314      	adds	r3, #20
 8015ef4:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 8015ef6:	68fb      	ldr	r3, [r7, #12]
 8015ef8:	7a9b      	ldrb	r3, [r3, #10]
 8015efa:	f003 0301 	and.w	r3, r3, #1
 8015efe:	2b00      	cmp	r3, #0
 8015f00:	d015      	beq.n	8015f2e <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 8015f02:	68bb      	ldr	r3, [r7, #8]
 8015f04:	3304      	adds	r3, #4
 8015f06:	461a      	mov	r2, r3
 8015f08:	6879      	ldr	r1, [r7, #4]
 8015f0a:	f240 50b4 	movw	r0, #1460	; 0x5b4
 8015f0e:	f7fc fe8b 	bl	8012c28 <tcp_eff_send_mss_netif>
 8015f12:	4603      	mov	r3, r0
 8015f14:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 8015f16:	8b7b      	ldrh	r3, [r7, #26]
 8015f18:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 8015f1c:	4618      	mov	r0, r3
 8015f1e:	f7f9 fd46 	bl	800f9ae <lwip_htonl>
 8015f22:	4602      	mov	r2, r0
 8015f24:	69fb      	ldr	r3, [r7, #28]
 8015f26:	601a      	str	r2, [r3, #0]
    opts += 1;
 8015f28:	69fb      	ldr	r3, [r7, #28]
 8015f2a:	3304      	adds	r3, #4
 8015f2c:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 8015f2e:	68bb      	ldr	r3, [r7, #8]
 8015f30:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8015f34:	2b00      	cmp	r3, #0
 8015f36:	da02      	bge.n	8015f3e <tcp_output_segment+0xda>
    pcb->rtime = 0;
 8015f38:	68bb      	ldr	r3, [r7, #8]
 8015f3a:	2200      	movs	r2, #0
 8015f3c:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 8015f3e:	68bb      	ldr	r3, [r7, #8]
 8015f40:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8015f42:	2b00      	cmp	r3, #0
 8015f44:	d10c      	bne.n	8015f60 <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 8015f46:	4b35      	ldr	r3, [pc, #212]	; (801601c <tcp_output_segment+0x1b8>)
 8015f48:	681a      	ldr	r2, [r3, #0]
 8015f4a:	68bb      	ldr	r3, [r7, #8]
 8015f4c:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 8015f4e:	68fb      	ldr	r3, [r7, #12]
 8015f50:	68db      	ldr	r3, [r3, #12]
 8015f52:	685b      	ldr	r3, [r3, #4]
 8015f54:	4618      	mov	r0, r3
 8015f56:	f7f9 fd2a 	bl	800f9ae <lwip_htonl>
 8015f5a:	4602      	mov	r2, r0
 8015f5c:	68bb      	ldr	r3, [r7, #8]
 8015f5e:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 8015f60:	68fb      	ldr	r3, [r7, #12]
 8015f62:	68da      	ldr	r2, [r3, #12]
 8015f64:	68fb      	ldr	r3, [r7, #12]
 8015f66:	685b      	ldr	r3, [r3, #4]
 8015f68:	685b      	ldr	r3, [r3, #4]
 8015f6a:	1ad3      	subs	r3, r2, r3
 8015f6c:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 8015f6e:	68fb      	ldr	r3, [r7, #12]
 8015f70:	685b      	ldr	r3, [r3, #4]
 8015f72:	8959      	ldrh	r1, [r3, #10]
 8015f74:	68fb      	ldr	r3, [r7, #12]
 8015f76:	685b      	ldr	r3, [r3, #4]
 8015f78:	8b3a      	ldrh	r2, [r7, #24]
 8015f7a:	1a8a      	subs	r2, r1, r2
 8015f7c:	b292      	uxth	r2, r2
 8015f7e:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 8015f80:	68fb      	ldr	r3, [r7, #12]
 8015f82:	685b      	ldr	r3, [r3, #4]
 8015f84:	8919      	ldrh	r1, [r3, #8]
 8015f86:	68fb      	ldr	r3, [r7, #12]
 8015f88:	685b      	ldr	r3, [r3, #4]
 8015f8a:	8b3a      	ldrh	r2, [r7, #24]
 8015f8c:	1a8a      	subs	r2, r1, r2
 8015f8e:	b292      	uxth	r2, r2
 8015f90:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 8015f92:	68fb      	ldr	r3, [r7, #12]
 8015f94:	685b      	ldr	r3, [r3, #4]
 8015f96:	68fa      	ldr	r2, [r7, #12]
 8015f98:	68d2      	ldr	r2, [r2, #12]
 8015f9a:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 8015f9c:	68fb      	ldr	r3, [r7, #12]
 8015f9e:	68db      	ldr	r3, [r3, #12]
 8015fa0:	2200      	movs	r2, #0
 8015fa2:	741a      	strb	r2, [r3, #16]
 8015fa4:	2200      	movs	r2, #0
 8015fa6:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 8015fa8:	68fb      	ldr	r3, [r7, #12]
 8015faa:	68da      	ldr	r2, [r3, #12]
 8015fac:	68fb      	ldr	r3, [r7, #12]
 8015fae:	7a9b      	ldrb	r3, [r3, #10]
 8015fb0:	f003 0301 	and.w	r3, r3, #1
 8015fb4:	2b00      	cmp	r3, #0
 8015fb6:	d001      	beq.n	8015fbc <tcp_output_segment+0x158>
 8015fb8:	2318      	movs	r3, #24
 8015fba:	e000      	b.n	8015fbe <tcp_output_segment+0x15a>
 8015fbc:	2314      	movs	r3, #20
 8015fbe:	4413      	add	r3, r2
 8015fc0:	69fa      	ldr	r2, [r7, #28]
 8015fc2:	429a      	cmp	r2, r3
 8015fc4:	d006      	beq.n	8015fd4 <tcp_output_segment+0x170>
 8015fc6:	4b10      	ldr	r3, [pc, #64]	; (8016008 <tcp_output_segment+0x1a4>)
 8015fc8:	f240 621c 	movw	r2, #1564	; 0x61c
 8015fcc:	4914      	ldr	r1, [pc, #80]	; (8016020 <tcp_output_segment+0x1bc>)
 8015fce:	4810      	ldr	r0, [pc, #64]	; (8016010 <tcp_output_segment+0x1ac>)
 8015fd0:	f003 ff92 	bl	8019ef8 <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 8015fd4:	68fb      	ldr	r3, [r7, #12]
 8015fd6:	6858      	ldr	r0, [r3, #4]
 8015fd8:	68b9      	ldr	r1, [r7, #8]
 8015fda:	68bb      	ldr	r3, [r7, #8]
 8015fdc:	1d1c      	adds	r4, r3, #4
 8015fde:	68bb      	ldr	r3, [r7, #8]
 8015fe0:	7add      	ldrb	r5, [r3, #11]
 8015fe2:	68bb      	ldr	r3, [r7, #8]
 8015fe4:	7a9b      	ldrb	r3, [r3, #10]
 8015fe6:	687a      	ldr	r2, [r7, #4]
 8015fe8:	9202      	str	r2, [sp, #8]
 8015fea:	2206      	movs	r2, #6
 8015fec:	9201      	str	r2, [sp, #4]
 8015fee:	9300      	str	r3, [sp, #0]
 8015ff0:	462b      	mov	r3, r5
 8015ff2:	4622      	mov	r2, r4
 8015ff4:	f002 fa18 	bl	8018428 <ip4_output_if>
 8015ff8:	4603      	mov	r3, r0
 8015ffa:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 8015ffc:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8016000:	4618      	mov	r0, r3
 8016002:	3720      	adds	r7, #32
 8016004:	46bd      	mov	sp, r7
 8016006:	bdb0      	pop	{r4, r5, r7, pc}
 8016008:	0801e100 	.word	0x0801e100
 801600c:	0801e6c4 	.word	0x0801e6c4
 8016010:	0801e154 	.word	0x0801e154
 8016014:	0801e6e4 	.word	0x0801e6e4
 8016018:	0801e704 	.word	0x0801e704
 801601c:	200070d4 	.word	0x200070d4
 8016020:	0801e728 	.word	0x0801e728

08016024 <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 8016024:	b5b0      	push	{r4, r5, r7, lr}
 8016026:	b084      	sub	sp, #16
 8016028:	af00      	add	r7, sp, #0
 801602a:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 801602c:	687b      	ldr	r3, [r7, #4]
 801602e:	2b00      	cmp	r3, #0
 8016030:	d106      	bne.n	8016040 <tcp_rexmit_rto_prepare+0x1c>
 8016032:	4b31      	ldr	r3, [pc, #196]	; (80160f8 <tcp_rexmit_rto_prepare+0xd4>)
 8016034:	f240 6263 	movw	r2, #1635	; 0x663
 8016038:	4930      	ldr	r1, [pc, #192]	; (80160fc <tcp_rexmit_rto_prepare+0xd8>)
 801603a:	4831      	ldr	r0, [pc, #196]	; (8016100 <tcp_rexmit_rto_prepare+0xdc>)
 801603c:	f003 ff5c 	bl	8019ef8 <iprintf>

  if (pcb->unacked == NULL) {
 8016040:	687b      	ldr	r3, [r7, #4]
 8016042:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8016044:	2b00      	cmp	r3, #0
 8016046:	d102      	bne.n	801604e <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 8016048:	f06f 0305 	mvn.w	r3, #5
 801604c:	e050      	b.n	80160f0 <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 801604e:	687b      	ldr	r3, [r7, #4]
 8016050:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8016052:	60fb      	str	r3, [r7, #12]
 8016054:	e00b      	b.n	801606e <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 8016056:	68f8      	ldr	r0, [r7, #12]
 8016058:	f7ff fee4 	bl	8015e24 <tcp_output_segment_busy>
 801605c:	4603      	mov	r3, r0
 801605e:	2b00      	cmp	r3, #0
 8016060:	d002      	beq.n	8016068 <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 8016062:	f06f 0305 	mvn.w	r3, #5
 8016066:	e043      	b.n	80160f0 <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 8016068:	68fb      	ldr	r3, [r7, #12]
 801606a:	681b      	ldr	r3, [r3, #0]
 801606c:	60fb      	str	r3, [r7, #12]
 801606e:	68fb      	ldr	r3, [r7, #12]
 8016070:	681b      	ldr	r3, [r3, #0]
 8016072:	2b00      	cmp	r3, #0
 8016074:	d1ef      	bne.n	8016056 <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 8016076:	68f8      	ldr	r0, [r7, #12]
 8016078:	f7ff fed4 	bl	8015e24 <tcp_output_segment_busy>
 801607c:	4603      	mov	r3, r0
 801607e:	2b00      	cmp	r3, #0
 8016080:	d002      	beq.n	8016088 <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 8016082:	f06f 0305 	mvn.w	r3, #5
 8016086:	e033      	b.n	80160f0 <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 8016088:	687b      	ldr	r3, [r7, #4]
 801608a:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 801608c:	68fb      	ldr	r3, [r7, #12]
 801608e:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 8016090:	687b      	ldr	r3, [r7, #4]
 8016092:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8016094:	687b      	ldr	r3, [r7, #4]
 8016096:	66da      	str	r2, [r3, #108]	; 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 8016098:	687b      	ldr	r3, [r7, #4]
 801609a:	2200      	movs	r2, #0
 801609c:	671a      	str	r2, [r3, #112]	; 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 801609e:	687b      	ldr	r3, [r7, #4]
 80160a0:	8b5b      	ldrh	r3, [r3, #26]
 80160a2:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80160a6:	b29a      	uxth	r2, r3
 80160a8:	687b      	ldr	r3, [r7, #4]
 80160aa:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 80160ac:	68fb      	ldr	r3, [r7, #12]
 80160ae:	68db      	ldr	r3, [r3, #12]
 80160b0:	685b      	ldr	r3, [r3, #4]
 80160b2:	4618      	mov	r0, r3
 80160b4:	f7f9 fc7b 	bl	800f9ae <lwip_htonl>
 80160b8:	4604      	mov	r4, r0
 80160ba:	68fb      	ldr	r3, [r7, #12]
 80160bc:	891b      	ldrh	r3, [r3, #8]
 80160be:	461d      	mov	r5, r3
 80160c0:	68fb      	ldr	r3, [r7, #12]
 80160c2:	68db      	ldr	r3, [r3, #12]
 80160c4:	899b      	ldrh	r3, [r3, #12]
 80160c6:	b29b      	uxth	r3, r3
 80160c8:	4618      	mov	r0, r3
 80160ca:	f7f9 fc5b 	bl	800f984 <lwip_htons>
 80160ce:	4603      	mov	r3, r0
 80160d0:	b2db      	uxtb	r3, r3
 80160d2:	f003 0303 	and.w	r3, r3, #3
 80160d6:	2b00      	cmp	r3, #0
 80160d8:	d001      	beq.n	80160de <tcp_rexmit_rto_prepare+0xba>
 80160da:	2301      	movs	r3, #1
 80160dc:	e000      	b.n	80160e0 <tcp_rexmit_rto_prepare+0xbc>
 80160de:	2300      	movs	r3, #0
 80160e0:	442b      	add	r3, r5
 80160e2:	18e2      	adds	r2, r4, r3
 80160e4:	687b      	ldr	r3, [r7, #4]
 80160e6:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 80160e8:	687b      	ldr	r3, [r7, #4]
 80160ea:	2200      	movs	r2, #0
 80160ec:	635a      	str	r2, [r3, #52]	; 0x34

  return ERR_OK;
 80160ee:	2300      	movs	r3, #0
}
 80160f0:	4618      	mov	r0, r3
 80160f2:	3710      	adds	r7, #16
 80160f4:	46bd      	mov	sp, r7
 80160f6:	bdb0      	pop	{r4, r5, r7, pc}
 80160f8:	0801e100 	.word	0x0801e100
 80160fc:	0801e73c 	.word	0x0801e73c
 8016100:	0801e154 	.word	0x0801e154

08016104 <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 8016104:	b580      	push	{r7, lr}
 8016106:	b082      	sub	sp, #8
 8016108:	af00      	add	r7, sp, #0
 801610a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 801610c:	687b      	ldr	r3, [r7, #4]
 801610e:	2b00      	cmp	r3, #0
 8016110:	d106      	bne.n	8016120 <tcp_rexmit_rto_commit+0x1c>
 8016112:	4b0d      	ldr	r3, [pc, #52]	; (8016148 <tcp_rexmit_rto_commit+0x44>)
 8016114:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 8016118:	490c      	ldr	r1, [pc, #48]	; (801614c <tcp_rexmit_rto_commit+0x48>)
 801611a:	480d      	ldr	r0, [pc, #52]	; (8016150 <tcp_rexmit_rto_commit+0x4c>)
 801611c:	f003 feec 	bl	8019ef8 <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 8016120:	687b      	ldr	r3, [r7, #4]
 8016122:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8016126:	2bff      	cmp	r3, #255	; 0xff
 8016128:	d007      	beq.n	801613a <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 801612a:	687b      	ldr	r3, [r7, #4]
 801612c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8016130:	3301      	adds	r3, #1
 8016132:	b2da      	uxtb	r2, r3
 8016134:	687b      	ldr	r3, [r7, #4]
 8016136:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 801613a:	6878      	ldr	r0, [r7, #4]
 801613c:	f7ff fc7e 	bl	8015a3c <tcp_output>
}
 8016140:	bf00      	nop
 8016142:	3708      	adds	r7, #8
 8016144:	46bd      	mov	sp, r7
 8016146:	bd80      	pop	{r7, pc}
 8016148:	0801e100 	.word	0x0801e100
 801614c:	0801e760 	.word	0x0801e760
 8016150:	0801e154 	.word	0x0801e154

08016154 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 8016154:	b580      	push	{r7, lr}
 8016156:	b082      	sub	sp, #8
 8016158:	af00      	add	r7, sp, #0
 801615a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 801615c:	687b      	ldr	r3, [r7, #4]
 801615e:	2b00      	cmp	r3, #0
 8016160:	d106      	bne.n	8016170 <tcp_rexmit_rto+0x1c>
 8016162:	4b0a      	ldr	r3, [pc, #40]	; (801618c <tcp_rexmit_rto+0x38>)
 8016164:	f240 62ad 	movw	r2, #1709	; 0x6ad
 8016168:	4909      	ldr	r1, [pc, #36]	; (8016190 <tcp_rexmit_rto+0x3c>)
 801616a:	480a      	ldr	r0, [pc, #40]	; (8016194 <tcp_rexmit_rto+0x40>)
 801616c:	f003 fec4 	bl	8019ef8 <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 8016170:	6878      	ldr	r0, [r7, #4]
 8016172:	f7ff ff57 	bl	8016024 <tcp_rexmit_rto_prepare>
 8016176:	4603      	mov	r3, r0
 8016178:	2b00      	cmp	r3, #0
 801617a:	d102      	bne.n	8016182 <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 801617c:	6878      	ldr	r0, [r7, #4]
 801617e:	f7ff ffc1 	bl	8016104 <tcp_rexmit_rto_commit>
  }
}
 8016182:	bf00      	nop
 8016184:	3708      	adds	r7, #8
 8016186:	46bd      	mov	sp, r7
 8016188:	bd80      	pop	{r7, pc}
 801618a:	bf00      	nop
 801618c:	0801e100 	.word	0x0801e100
 8016190:	0801e784 	.word	0x0801e784
 8016194:	0801e154 	.word	0x0801e154

08016198 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 8016198:	b590      	push	{r4, r7, lr}
 801619a:	b085      	sub	sp, #20
 801619c:	af00      	add	r7, sp, #0
 801619e:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 80161a0:	687b      	ldr	r3, [r7, #4]
 80161a2:	2b00      	cmp	r3, #0
 80161a4:	d106      	bne.n	80161b4 <tcp_rexmit+0x1c>
 80161a6:	4b2f      	ldr	r3, [pc, #188]	; (8016264 <tcp_rexmit+0xcc>)
 80161a8:	f240 62c1 	movw	r2, #1729	; 0x6c1
 80161ac:	492e      	ldr	r1, [pc, #184]	; (8016268 <tcp_rexmit+0xd0>)
 80161ae:	482f      	ldr	r0, [pc, #188]	; (801626c <tcp_rexmit+0xd4>)
 80161b0:	f003 fea2 	bl	8019ef8 <iprintf>

  if (pcb->unacked == NULL) {
 80161b4:	687b      	ldr	r3, [r7, #4]
 80161b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80161b8:	2b00      	cmp	r3, #0
 80161ba:	d102      	bne.n	80161c2 <tcp_rexmit+0x2a>
    return ERR_VAL;
 80161bc:	f06f 0305 	mvn.w	r3, #5
 80161c0:	e04c      	b.n	801625c <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 80161c2:	687b      	ldr	r3, [r7, #4]
 80161c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80161c6:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 80161c8:	68b8      	ldr	r0, [r7, #8]
 80161ca:	f7ff fe2b 	bl	8015e24 <tcp_output_segment_busy>
 80161ce:	4603      	mov	r3, r0
 80161d0:	2b00      	cmp	r3, #0
 80161d2:	d002      	beq.n	80161da <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 80161d4:	f06f 0305 	mvn.w	r3, #5
 80161d8:	e040      	b.n	801625c <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 80161da:	68bb      	ldr	r3, [r7, #8]
 80161dc:	681a      	ldr	r2, [r3, #0]
 80161de:	687b      	ldr	r3, [r7, #4]
 80161e0:	671a      	str	r2, [r3, #112]	; 0x70

  cur_seg = &(pcb->unsent);
 80161e2:	687b      	ldr	r3, [r7, #4]
 80161e4:	336c      	adds	r3, #108	; 0x6c
 80161e6:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 80161e8:	e002      	b.n	80161f0 <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 80161ea:	68fb      	ldr	r3, [r7, #12]
 80161ec:	681b      	ldr	r3, [r3, #0]
 80161ee:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 80161f0:	68fb      	ldr	r3, [r7, #12]
 80161f2:	681b      	ldr	r3, [r3, #0]
 80161f4:	2b00      	cmp	r3, #0
 80161f6:	d011      	beq.n	801621c <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 80161f8:	68fb      	ldr	r3, [r7, #12]
 80161fa:	681b      	ldr	r3, [r3, #0]
 80161fc:	68db      	ldr	r3, [r3, #12]
 80161fe:	685b      	ldr	r3, [r3, #4]
 8016200:	4618      	mov	r0, r3
 8016202:	f7f9 fbd4 	bl	800f9ae <lwip_htonl>
 8016206:	4604      	mov	r4, r0
 8016208:	68bb      	ldr	r3, [r7, #8]
 801620a:	68db      	ldr	r3, [r3, #12]
 801620c:	685b      	ldr	r3, [r3, #4]
 801620e:	4618      	mov	r0, r3
 8016210:	f7f9 fbcd 	bl	800f9ae <lwip_htonl>
 8016214:	4603      	mov	r3, r0
 8016216:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 8016218:	2b00      	cmp	r3, #0
 801621a:	dbe6      	blt.n	80161ea <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 801621c:	68fb      	ldr	r3, [r7, #12]
 801621e:	681a      	ldr	r2, [r3, #0]
 8016220:	68bb      	ldr	r3, [r7, #8]
 8016222:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 8016224:	68fb      	ldr	r3, [r7, #12]
 8016226:	68ba      	ldr	r2, [r7, #8]
 8016228:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 801622a:	68bb      	ldr	r3, [r7, #8]
 801622c:	681b      	ldr	r3, [r3, #0]
 801622e:	2b00      	cmp	r3, #0
 8016230:	d103      	bne.n	801623a <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 8016232:	687b      	ldr	r3, [r7, #4]
 8016234:	2200      	movs	r2, #0
 8016236:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 801623a:	687b      	ldr	r3, [r7, #4]
 801623c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8016240:	2bff      	cmp	r3, #255	; 0xff
 8016242:	d007      	beq.n	8016254 <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 8016244:	687b      	ldr	r3, [r7, #4]
 8016246:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801624a:	3301      	adds	r3, #1
 801624c:	b2da      	uxtb	r2, r3
 801624e:	687b      	ldr	r3, [r7, #4]
 8016250:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 8016254:	687b      	ldr	r3, [r7, #4]
 8016256:	2200      	movs	r2, #0
 8016258:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 801625a:	2300      	movs	r3, #0
}
 801625c:	4618      	mov	r0, r3
 801625e:	3714      	adds	r7, #20
 8016260:	46bd      	mov	sp, r7
 8016262:	bd90      	pop	{r4, r7, pc}
 8016264:	0801e100 	.word	0x0801e100
 8016268:	0801e7a0 	.word	0x0801e7a0
 801626c:	0801e154 	.word	0x0801e154

08016270 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 8016270:	b580      	push	{r7, lr}
 8016272:	b082      	sub	sp, #8
 8016274:	af00      	add	r7, sp, #0
 8016276:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 8016278:	687b      	ldr	r3, [r7, #4]
 801627a:	2b00      	cmp	r3, #0
 801627c:	d106      	bne.n	801628c <tcp_rexmit_fast+0x1c>
 801627e:	4b2a      	ldr	r3, [pc, #168]	; (8016328 <tcp_rexmit_fast+0xb8>)
 8016280:	f240 62f9 	movw	r2, #1785	; 0x6f9
 8016284:	4929      	ldr	r1, [pc, #164]	; (801632c <tcp_rexmit_fast+0xbc>)
 8016286:	482a      	ldr	r0, [pc, #168]	; (8016330 <tcp_rexmit_fast+0xc0>)
 8016288:	f003 fe36 	bl	8019ef8 <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 801628c:	687b      	ldr	r3, [r7, #4]
 801628e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8016290:	2b00      	cmp	r3, #0
 8016292:	d045      	beq.n	8016320 <tcp_rexmit_fast+0xb0>
 8016294:	687b      	ldr	r3, [r7, #4]
 8016296:	8b5b      	ldrh	r3, [r3, #26]
 8016298:	f003 0304 	and.w	r3, r3, #4
 801629c:	2b00      	cmp	r3, #0
 801629e:	d13f      	bne.n	8016320 <tcp_rexmit_fast+0xb0>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 80162a0:	6878      	ldr	r0, [r7, #4]
 80162a2:	f7ff ff79 	bl	8016198 <tcp_rexmit>
 80162a6:	4603      	mov	r3, r0
 80162a8:	2b00      	cmp	r3, #0
 80162aa:	d139      	bne.n	8016320 <tcp_rexmit_fast+0xb0>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 80162ac:	687b      	ldr	r3, [r7, #4]
 80162ae:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 80162b2:	687b      	ldr	r3, [r7, #4]
 80162b4:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80162b8:	4293      	cmp	r3, r2
 80162ba:	bf28      	it	cs
 80162bc:	4613      	movcs	r3, r2
 80162be:	b29b      	uxth	r3, r3
 80162c0:	2b00      	cmp	r3, #0
 80162c2:	da00      	bge.n	80162c6 <tcp_rexmit_fast+0x56>
 80162c4:	3301      	adds	r3, #1
 80162c6:	105b      	asrs	r3, r3, #1
 80162c8:	b29a      	uxth	r2, r3
 80162ca:	687b      	ldr	r3, [r7, #4]
 80162cc:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 80162d0:	687b      	ldr	r3, [r7, #4]
 80162d2:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 80162d6:	461a      	mov	r2, r3
 80162d8:	687b      	ldr	r3, [r7, #4]
 80162da:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80162dc:	005b      	lsls	r3, r3, #1
 80162de:	429a      	cmp	r2, r3
 80162e0:	d206      	bcs.n	80162f0 <tcp_rexmit_fast+0x80>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 80162e2:	687b      	ldr	r3, [r7, #4]
 80162e4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80162e6:	005b      	lsls	r3, r3, #1
 80162e8:	b29a      	uxth	r2, r3
 80162ea:	687b      	ldr	r3, [r7, #4]
 80162ec:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 80162f0:	687b      	ldr	r3, [r7, #4]
 80162f2:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 80162f6:	687b      	ldr	r3, [r7, #4]
 80162f8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80162fa:	4619      	mov	r1, r3
 80162fc:	0049      	lsls	r1, r1, #1
 80162fe:	440b      	add	r3, r1
 8016300:	b29b      	uxth	r3, r3
 8016302:	4413      	add	r3, r2
 8016304:	b29a      	uxth	r2, r3
 8016306:	687b      	ldr	r3, [r7, #4]
 8016308:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 801630c:	687b      	ldr	r3, [r7, #4]
 801630e:	8b5b      	ldrh	r3, [r3, #26]
 8016310:	f043 0304 	orr.w	r3, r3, #4
 8016314:	b29a      	uxth	r2, r3
 8016316:	687b      	ldr	r3, [r7, #4]
 8016318:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 801631a:	687b      	ldr	r3, [r7, #4]
 801631c:	2200      	movs	r2, #0
 801631e:	861a      	strh	r2, [r3, #48]	; 0x30
    }
  }
}
 8016320:	bf00      	nop
 8016322:	3708      	adds	r7, #8
 8016324:	46bd      	mov	sp, r7
 8016326:	bd80      	pop	{r7, pc}
 8016328:	0801e100 	.word	0x0801e100
 801632c:	0801e7b8 	.word	0x0801e7b8
 8016330:	0801e154 	.word	0x0801e154

08016334 <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 8016334:	b580      	push	{r7, lr}
 8016336:	b086      	sub	sp, #24
 8016338:	af00      	add	r7, sp, #0
 801633a:	60f8      	str	r0, [r7, #12]
 801633c:	607b      	str	r3, [r7, #4]
 801633e:	460b      	mov	r3, r1
 8016340:	817b      	strh	r3, [r7, #10]
 8016342:	4613      	mov	r3, r2
 8016344:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 8016346:	897a      	ldrh	r2, [r7, #10]
 8016348:	893b      	ldrh	r3, [r7, #8]
 801634a:	4413      	add	r3, r2
 801634c:	b29b      	uxth	r3, r3
 801634e:	3314      	adds	r3, #20
 8016350:	b29b      	uxth	r3, r3
 8016352:	f44f 7220 	mov.w	r2, #640	; 0x280
 8016356:	4619      	mov	r1, r3
 8016358:	2022      	movs	r0, #34	; 0x22
 801635a:	f7fa fc13 	bl	8010b84 <pbuf_alloc>
 801635e:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 8016360:	697b      	ldr	r3, [r7, #20]
 8016362:	2b00      	cmp	r3, #0
 8016364:	d04d      	beq.n	8016402 <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 8016366:	897b      	ldrh	r3, [r7, #10]
 8016368:	3313      	adds	r3, #19
 801636a:	697a      	ldr	r2, [r7, #20]
 801636c:	8952      	ldrh	r2, [r2, #10]
 801636e:	4293      	cmp	r3, r2
 8016370:	db06      	blt.n	8016380 <tcp_output_alloc_header_common+0x4c>
 8016372:	4b26      	ldr	r3, [pc, #152]	; (801640c <tcp_output_alloc_header_common+0xd8>)
 8016374:	f240 7223 	movw	r2, #1827	; 0x723
 8016378:	4925      	ldr	r1, [pc, #148]	; (8016410 <tcp_output_alloc_header_common+0xdc>)
 801637a:	4826      	ldr	r0, [pc, #152]	; (8016414 <tcp_output_alloc_header_common+0xe0>)
 801637c:	f003 fdbc 	bl	8019ef8 <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 8016380:	697b      	ldr	r3, [r7, #20]
 8016382:	685b      	ldr	r3, [r3, #4]
 8016384:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 8016386:	8c3b      	ldrh	r3, [r7, #32]
 8016388:	4618      	mov	r0, r3
 801638a:	f7f9 fafb 	bl	800f984 <lwip_htons>
 801638e:	4603      	mov	r3, r0
 8016390:	461a      	mov	r2, r3
 8016392:	693b      	ldr	r3, [r7, #16]
 8016394:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 8016396:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8016398:	4618      	mov	r0, r3
 801639a:	f7f9 faf3 	bl	800f984 <lwip_htons>
 801639e:	4603      	mov	r3, r0
 80163a0:	461a      	mov	r2, r3
 80163a2:	693b      	ldr	r3, [r7, #16]
 80163a4:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 80163a6:	693b      	ldr	r3, [r7, #16]
 80163a8:	687a      	ldr	r2, [r7, #4]
 80163aa:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 80163ac:	68f8      	ldr	r0, [r7, #12]
 80163ae:	f7f9 fafe 	bl	800f9ae <lwip_htonl>
 80163b2:	4602      	mov	r2, r0
 80163b4:	693b      	ldr	r3, [r7, #16]
 80163b6:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 80163b8:	897b      	ldrh	r3, [r7, #10]
 80163ba:	089b      	lsrs	r3, r3, #2
 80163bc:	b29b      	uxth	r3, r3
 80163be:	3305      	adds	r3, #5
 80163c0:	b29b      	uxth	r3, r3
 80163c2:	031b      	lsls	r3, r3, #12
 80163c4:	b29a      	uxth	r2, r3
 80163c6:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80163ca:	b29b      	uxth	r3, r3
 80163cc:	4313      	orrs	r3, r2
 80163ce:	b29b      	uxth	r3, r3
 80163d0:	4618      	mov	r0, r3
 80163d2:	f7f9 fad7 	bl	800f984 <lwip_htons>
 80163d6:	4603      	mov	r3, r0
 80163d8:	461a      	mov	r2, r3
 80163da:	693b      	ldr	r3, [r7, #16]
 80163dc:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 80163de:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80163e0:	4618      	mov	r0, r3
 80163e2:	f7f9 facf 	bl	800f984 <lwip_htons>
 80163e6:	4603      	mov	r3, r0
 80163e8:	461a      	mov	r2, r3
 80163ea:	693b      	ldr	r3, [r7, #16]
 80163ec:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 80163ee:	693b      	ldr	r3, [r7, #16]
 80163f0:	2200      	movs	r2, #0
 80163f2:	741a      	strb	r2, [r3, #16]
 80163f4:	2200      	movs	r2, #0
 80163f6:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 80163f8:	693b      	ldr	r3, [r7, #16]
 80163fa:	2200      	movs	r2, #0
 80163fc:	749a      	strb	r2, [r3, #18]
 80163fe:	2200      	movs	r2, #0
 8016400:	74da      	strb	r2, [r3, #19]
  }
  return p;
 8016402:	697b      	ldr	r3, [r7, #20]
}
 8016404:	4618      	mov	r0, r3
 8016406:	3718      	adds	r7, #24
 8016408:	46bd      	mov	sp, r7
 801640a:	bd80      	pop	{r7, pc}
 801640c:	0801e100 	.word	0x0801e100
 8016410:	0801e7d8 	.word	0x0801e7d8
 8016414:	0801e154 	.word	0x0801e154

08016418 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 8016418:	b5b0      	push	{r4, r5, r7, lr}
 801641a:	b08a      	sub	sp, #40	; 0x28
 801641c:	af04      	add	r7, sp, #16
 801641e:	60f8      	str	r0, [r7, #12]
 8016420:	607b      	str	r3, [r7, #4]
 8016422:	460b      	mov	r3, r1
 8016424:	817b      	strh	r3, [r7, #10]
 8016426:	4613      	mov	r3, r2
 8016428:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 801642a:	68fb      	ldr	r3, [r7, #12]
 801642c:	2b00      	cmp	r3, #0
 801642e:	d106      	bne.n	801643e <tcp_output_alloc_header+0x26>
 8016430:	4b15      	ldr	r3, [pc, #84]	; (8016488 <tcp_output_alloc_header+0x70>)
 8016432:	f240 7242 	movw	r2, #1858	; 0x742
 8016436:	4915      	ldr	r1, [pc, #84]	; (801648c <tcp_output_alloc_header+0x74>)
 8016438:	4815      	ldr	r0, [pc, #84]	; (8016490 <tcp_output_alloc_header+0x78>)
 801643a:	f003 fd5d 	bl	8019ef8 <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 801643e:	68fb      	ldr	r3, [r7, #12]
 8016440:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8016442:	68fb      	ldr	r3, [r7, #12]
 8016444:	8adb      	ldrh	r3, [r3, #22]
 8016446:	68fa      	ldr	r2, [r7, #12]
 8016448:	8b12      	ldrh	r2, [r2, #24]
 801644a:	68f9      	ldr	r1, [r7, #12]
 801644c:	8d49      	ldrh	r1, [r1, #42]	; 0x2a
 801644e:	893d      	ldrh	r5, [r7, #8]
 8016450:	897c      	ldrh	r4, [r7, #10]
 8016452:	9103      	str	r1, [sp, #12]
 8016454:	2110      	movs	r1, #16
 8016456:	9102      	str	r1, [sp, #8]
 8016458:	9201      	str	r2, [sp, #4]
 801645a:	9300      	str	r3, [sp, #0]
 801645c:	687b      	ldr	r3, [r7, #4]
 801645e:	462a      	mov	r2, r5
 8016460:	4621      	mov	r1, r4
 8016462:	f7ff ff67 	bl	8016334 <tcp_output_alloc_header_common>
 8016466:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 8016468:	697b      	ldr	r3, [r7, #20]
 801646a:	2b00      	cmp	r3, #0
 801646c:	d006      	beq.n	801647c <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 801646e:	68fb      	ldr	r3, [r7, #12]
 8016470:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016472:	68fa      	ldr	r2, [r7, #12]
 8016474:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 8016476:	441a      	add	r2, r3
 8016478:	68fb      	ldr	r3, [r7, #12]
 801647a:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 801647c:	697b      	ldr	r3, [r7, #20]
}
 801647e:	4618      	mov	r0, r3
 8016480:	3718      	adds	r7, #24
 8016482:	46bd      	mov	sp, r7
 8016484:	bdb0      	pop	{r4, r5, r7, pc}
 8016486:	bf00      	nop
 8016488:	0801e100 	.word	0x0801e100
 801648c:	0801e808 	.word	0x0801e808
 8016490:	0801e154 	.word	0x0801e154

08016494 <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 8016494:	b580      	push	{r7, lr}
 8016496:	b088      	sub	sp, #32
 8016498:	af00      	add	r7, sp, #0
 801649a:	60f8      	str	r0, [r7, #12]
 801649c:	60b9      	str	r1, [r7, #8]
 801649e:	4611      	mov	r1, r2
 80164a0:	461a      	mov	r2, r3
 80164a2:	460b      	mov	r3, r1
 80164a4:	71fb      	strb	r3, [r7, #7]
 80164a6:	4613      	mov	r3, r2
 80164a8:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 80164aa:	2300      	movs	r3, #0
 80164ac:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 80164ae:	68bb      	ldr	r3, [r7, #8]
 80164b0:	2b00      	cmp	r3, #0
 80164b2:	d106      	bne.n	80164c2 <tcp_output_fill_options+0x2e>
 80164b4:	4b12      	ldr	r3, [pc, #72]	; (8016500 <tcp_output_fill_options+0x6c>)
 80164b6:	f240 7256 	movw	r2, #1878	; 0x756
 80164ba:	4912      	ldr	r1, [pc, #72]	; (8016504 <tcp_output_fill_options+0x70>)
 80164bc:	4812      	ldr	r0, [pc, #72]	; (8016508 <tcp_output_fill_options+0x74>)
 80164be:	f003 fd1b 	bl	8019ef8 <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 80164c2:	68bb      	ldr	r3, [r7, #8]
 80164c4:	685b      	ldr	r3, [r3, #4]
 80164c6:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 80164c8:	69bb      	ldr	r3, [r7, #24]
 80164ca:	3314      	adds	r3, #20
 80164cc:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 80164ce:	8bfb      	ldrh	r3, [r7, #30]
 80164d0:	009b      	lsls	r3, r3, #2
 80164d2:	461a      	mov	r2, r3
 80164d4:	79fb      	ldrb	r3, [r7, #7]
 80164d6:	009b      	lsls	r3, r3, #2
 80164d8:	f003 0304 	and.w	r3, r3, #4
 80164dc:	4413      	add	r3, r2
 80164de:	3314      	adds	r3, #20
 80164e0:	69ba      	ldr	r2, [r7, #24]
 80164e2:	4413      	add	r3, r2
 80164e4:	697a      	ldr	r2, [r7, #20]
 80164e6:	429a      	cmp	r2, r3
 80164e8:	d006      	beq.n	80164f8 <tcp_output_fill_options+0x64>
 80164ea:	4b05      	ldr	r3, [pc, #20]	; (8016500 <tcp_output_fill_options+0x6c>)
 80164ec:	f240 7275 	movw	r2, #1909	; 0x775
 80164f0:	4906      	ldr	r1, [pc, #24]	; (801650c <tcp_output_fill_options+0x78>)
 80164f2:	4805      	ldr	r0, [pc, #20]	; (8016508 <tcp_output_fill_options+0x74>)
 80164f4:	f003 fd00 	bl	8019ef8 <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 80164f8:	bf00      	nop
 80164fa:	3720      	adds	r7, #32
 80164fc:	46bd      	mov	sp, r7
 80164fe:	bd80      	pop	{r7, pc}
 8016500:	0801e100 	.word	0x0801e100
 8016504:	0801e830 	.word	0x0801e830
 8016508:	0801e154 	.word	0x0801e154
 801650c:	0801e728 	.word	0x0801e728

08016510 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 8016510:	b580      	push	{r7, lr}
 8016512:	b08a      	sub	sp, #40	; 0x28
 8016514:	af04      	add	r7, sp, #16
 8016516:	60f8      	str	r0, [r7, #12]
 8016518:	60b9      	str	r1, [r7, #8]
 801651a:	607a      	str	r2, [r7, #4]
 801651c:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 801651e:	68bb      	ldr	r3, [r7, #8]
 8016520:	2b00      	cmp	r3, #0
 8016522:	d106      	bne.n	8016532 <tcp_output_control_segment+0x22>
 8016524:	4b1c      	ldr	r3, [pc, #112]	; (8016598 <tcp_output_control_segment+0x88>)
 8016526:	f240 7287 	movw	r2, #1927	; 0x787
 801652a:	491c      	ldr	r1, [pc, #112]	; (801659c <tcp_output_control_segment+0x8c>)
 801652c:	481c      	ldr	r0, [pc, #112]	; (80165a0 <tcp_output_control_segment+0x90>)
 801652e:	f003 fce3 	bl	8019ef8 <iprintf>

  netif = tcp_route(pcb, src, dst);
 8016532:	683a      	ldr	r2, [r7, #0]
 8016534:	6879      	ldr	r1, [r7, #4]
 8016536:	68f8      	ldr	r0, [r7, #12]
 8016538:	f7fe ff40 	bl	80153bc <tcp_route>
 801653c:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 801653e:	693b      	ldr	r3, [r7, #16]
 8016540:	2b00      	cmp	r3, #0
 8016542:	d102      	bne.n	801654a <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 8016544:	23fc      	movs	r3, #252	; 0xfc
 8016546:	75fb      	strb	r3, [r7, #23]
 8016548:	e01c      	b.n	8016584 <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 801654a:	68fb      	ldr	r3, [r7, #12]
 801654c:	2b00      	cmp	r3, #0
 801654e:	d006      	beq.n	801655e <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 8016550:	68fb      	ldr	r3, [r7, #12]
 8016552:	7adb      	ldrb	r3, [r3, #11]
 8016554:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 8016556:	68fb      	ldr	r3, [r7, #12]
 8016558:	7a9b      	ldrb	r3, [r3, #10]
 801655a:	757b      	strb	r3, [r7, #21]
 801655c:	e003      	b.n	8016566 <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 801655e:	23ff      	movs	r3, #255	; 0xff
 8016560:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 8016562:	2300      	movs	r3, #0
 8016564:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 8016566:	7dba      	ldrb	r2, [r7, #22]
 8016568:	693b      	ldr	r3, [r7, #16]
 801656a:	9302      	str	r3, [sp, #8]
 801656c:	2306      	movs	r3, #6
 801656e:	9301      	str	r3, [sp, #4]
 8016570:	7d7b      	ldrb	r3, [r7, #21]
 8016572:	9300      	str	r3, [sp, #0]
 8016574:	4613      	mov	r3, r2
 8016576:	683a      	ldr	r2, [r7, #0]
 8016578:	6879      	ldr	r1, [r7, #4]
 801657a:	68b8      	ldr	r0, [r7, #8]
 801657c:	f001 ff54 	bl	8018428 <ip4_output_if>
 8016580:	4603      	mov	r3, r0
 8016582:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 8016584:	68b8      	ldr	r0, [r7, #8]
 8016586:	f7fa fde1 	bl	801114c <pbuf_free>
  return err;
 801658a:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801658e:	4618      	mov	r0, r3
 8016590:	3718      	adds	r7, #24
 8016592:	46bd      	mov	sp, r7
 8016594:	bd80      	pop	{r7, pc}
 8016596:	bf00      	nop
 8016598:	0801e100 	.word	0x0801e100
 801659c:	0801e858 	.word	0x0801e858
 80165a0:	0801e154 	.word	0x0801e154

080165a4 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 80165a4:	b590      	push	{r4, r7, lr}
 80165a6:	b08b      	sub	sp, #44	; 0x2c
 80165a8:	af04      	add	r7, sp, #16
 80165aa:	60f8      	str	r0, [r7, #12]
 80165ac:	60b9      	str	r1, [r7, #8]
 80165ae:	607a      	str	r2, [r7, #4]
 80165b0:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 80165b2:	683b      	ldr	r3, [r7, #0]
 80165b4:	2b00      	cmp	r3, #0
 80165b6:	d106      	bne.n	80165c6 <tcp_rst+0x22>
 80165b8:	4b1f      	ldr	r3, [pc, #124]	; (8016638 <tcp_rst+0x94>)
 80165ba:	f240 72c4 	movw	r2, #1988	; 0x7c4
 80165be:	491f      	ldr	r1, [pc, #124]	; (801663c <tcp_rst+0x98>)
 80165c0:	481f      	ldr	r0, [pc, #124]	; (8016640 <tcp_rst+0x9c>)
 80165c2:	f003 fc99 	bl	8019ef8 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 80165c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80165c8:	2b00      	cmp	r3, #0
 80165ca:	d106      	bne.n	80165da <tcp_rst+0x36>
 80165cc:	4b1a      	ldr	r3, [pc, #104]	; (8016638 <tcp_rst+0x94>)
 80165ce:	f240 72c5 	movw	r2, #1989	; 0x7c5
 80165d2:	491c      	ldr	r1, [pc, #112]	; (8016644 <tcp_rst+0xa0>)
 80165d4:	481a      	ldr	r0, [pc, #104]	; (8016640 <tcp_rst+0x9c>)
 80165d6:	f003 fc8f 	bl	8019ef8 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 80165da:	2300      	movs	r3, #0
 80165dc:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 80165de:	f24d 0316 	movw	r3, #53270	; 0xd016
 80165e2:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 80165e4:	7dfb      	ldrb	r3, [r7, #23]
 80165e6:	b29c      	uxth	r4, r3
 80165e8:	68b8      	ldr	r0, [r7, #8]
 80165ea:	f7f9 f9e0 	bl	800f9ae <lwip_htonl>
 80165ee:	4602      	mov	r2, r0
 80165f0:	8abb      	ldrh	r3, [r7, #20]
 80165f2:	9303      	str	r3, [sp, #12]
 80165f4:	2314      	movs	r3, #20
 80165f6:	9302      	str	r3, [sp, #8]
 80165f8:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80165fa:	9301      	str	r3, [sp, #4]
 80165fc:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80165fe:	9300      	str	r3, [sp, #0]
 8016600:	4613      	mov	r3, r2
 8016602:	2200      	movs	r2, #0
 8016604:	4621      	mov	r1, r4
 8016606:	6878      	ldr	r0, [r7, #4]
 8016608:	f7ff fe94 	bl	8016334 <tcp_output_alloc_header_common>
 801660c:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 801660e:	693b      	ldr	r3, [r7, #16]
 8016610:	2b00      	cmp	r3, #0
 8016612:	d00c      	beq.n	801662e <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8016614:	7dfb      	ldrb	r3, [r7, #23]
 8016616:	2200      	movs	r2, #0
 8016618:	6939      	ldr	r1, [r7, #16]
 801661a:	68f8      	ldr	r0, [r7, #12]
 801661c:	f7ff ff3a 	bl	8016494 <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 8016620:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016622:	683a      	ldr	r2, [r7, #0]
 8016624:	6939      	ldr	r1, [r7, #16]
 8016626:	68f8      	ldr	r0, [r7, #12]
 8016628:	f7ff ff72 	bl	8016510 <tcp_output_control_segment>
 801662c:	e000      	b.n	8016630 <tcp_rst+0x8c>
    return;
 801662e:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 8016630:	371c      	adds	r7, #28
 8016632:	46bd      	mov	sp, r7
 8016634:	bd90      	pop	{r4, r7, pc}
 8016636:	bf00      	nop
 8016638:	0801e100 	.word	0x0801e100
 801663c:	0801e884 	.word	0x0801e884
 8016640:	0801e154 	.word	0x0801e154
 8016644:	0801e8a0 	.word	0x0801e8a0

08016648 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 8016648:	b590      	push	{r4, r7, lr}
 801664a:	b087      	sub	sp, #28
 801664c:	af00      	add	r7, sp, #0
 801664e:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 8016650:	2300      	movs	r3, #0
 8016652:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 8016654:	2300      	movs	r3, #0
 8016656:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 8016658:	687b      	ldr	r3, [r7, #4]
 801665a:	2b00      	cmp	r3, #0
 801665c:	d106      	bne.n	801666c <tcp_send_empty_ack+0x24>
 801665e:	4b28      	ldr	r3, [pc, #160]	; (8016700 <tcp_send_empty_ack+0xb8>)
 8016660:	f240 72ea 	movw	r2, #2026	; 0x7ea
 8016664:	4927      	ldr	r1, [pc, #156]	; (8016704 <tcp_send_empty_ack+0xbc>)
 8016666:	4828      	ldr	r0, [pc, #160]	; (8016708 <tcp_send_empty_ack+0xc0>)
 8016668:	f003 fc46 	bl	8019ef8 <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 801666c:	7dfb      	ldrb	r3, [r7, #23]
 801666e:	009b      	lsls	r3, r3, #2
 8016670:	b2db      	uxtb	r3, r3
 8016672:	f003 0304 	and.w	r3, r3, #4
 8016676:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 8016678:	7d7b      	ldrb	r3, [r7, #21]
 801667a:	b29c      	uxth	r4, r3
 801667c:	687b      	ldr	r3, [r7, #4]
 801667e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8016680:	4618      	mov	r0, r3
 8016682:	f7f9 f994 	bl	800f9ae <lwip_htonl>
 8016686:	4603      	mov	r3, r0
 8016688:	2200      	movs	r2, #0
 801668a:	4621      	mov	r1, r4
 801668c:	6878      	ldr	r0, [r7, #4]
 801668e:	f7ff fec3 	bl	8016418 <tcp_output_alloc_header>
 8016692:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8016694:	693b      	ldr	r3, [r7, #16]
 8016696:	2b00      	cmp	r3, #0
 8016698:	d109      	bne.n	80166ae <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801669a:	687b      	ldr	r3, [r7, #4]
 801669c:	8b5b      	ldrh	r3, [r3, #26]
 801669e:	f043 0303 	orr.w	r3, r3, #3
 80166a2:	b29a      	uxth	r2, r3
 80166a4:	687b      	ldr	r3, [r7, #4]
 80166a6:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 80166a8:	f06f 0301 	mvn.w	r3, #1
 80166ac:	e023      	b.n	80166f6 <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 80166ae:	7dbb      	ldrb	r3, [r7, #22]
 80166b0:	7dfa      	ldrb	r2, [r7, #23]
 80166b2:	6939      	ldr	r1, [r7, #16]
 80166b4:	6878      	ldr	r0, [r7, #4]
 80166b6:	f7ff feed 	bl	8016494 <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 80166ba:	687a      	ldr	r2, [r7, #4]
 80166bc:	687b      	ldr	r3, [r7, #4]
 80166be:	3304      	adds	r3, #4
 80166c0:	6939      	ldr	r1, [r7, #16]
 80166c2:	6878      	ldr	r0, [r7, #4]
 80166c4:	f7ff ff24 	bl	8016510 <tcp_output_control_segment>
 80166c8:	4603      	mov	r3, r0
 80166ca:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 80166cc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80166d0:	2b00      	cmp	r3, #0
 80166d2:	d007      	beq.n	80166e4 <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 80166d4:	687b      	ldr	r3, [r7, #4]
 80166d6:	8b5b      	ldrh	r3, [r3, #26]
 80166d8:	f043 0303 	orr.w	r3, r3, #3
 80166dc:	b29a      	uxth	r2, r3
 80166de:	687b      	ldr	r3, [r7, #4]
 80166e0:	835a      	strh	r2, [r3, #26]
 80166e2:	e006      	b.n	80166f2 <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 80166e4:	687b      	ldr	r3, [r7, #4]
 80166e6:	8b5b      	ldrh	r3, [r3, #26]
 80166e8:	f023 0303 	bic.w	r3, r3, #3
 80166ec:	b29a      	uxth	r2, r3
 80166ee:	687b      	ldr	r3, [r7, #4]
 80166f0:	835a      	strh	r2, [r3, #26]
  }

  return err;
 80166f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80166f6:	4618      	mov	r0, r3
 80166f8:	371c      	adds	r7, #28
 80166fa:	46bd      	mov	sp, r7
 80166fc:	bd90      	pop	{r4, r7, pc}
 80166fe:	bf00      	nop
 8016700:	0801e100 	.word	0x0801e100
 8016704:	0801e8bc 	.word	0x0801e8bc
 8016708:	0801e154 	.word	0x0801e154

0801670c <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 801670c:	b590      	push	{r4, r7, lr}
 801670e:	b087      	sub	sp, #28
 8016710:	af00      	add	r7, sp, #0
 8016712:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8016714:	2300      	movs	r3, #0
 8016716:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 8016718:	687b      	ldr	r3, [r7, #4]
 801671a:	2b00      	cmp	r3, #0
 801671c:	d106      	bne.n	801672c <tcp_keepalive+0x20>
 801671e:	4b18      	ldr	r3, [pc, #96]	; (8016780 <tcp_keepalive+0x74>)
 8016720:	f640 0224 	movw	r2, #2084	; 0x824
 8016724:	4917      	ldr	r1, [pc, #92]	; (8016784 <tcp_keepalive+0x78>)
 8016726:	4818      	ldr	r0, [pc, #96]	; (8016788 <tcp_keepalive+0x7c>)
 8016728:	f003 fbe6 	bl	8019ef8 <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 801672c:	7dfb      	ldrb	r3, [r7, #23]
 801672e:	b29c      	uxth	r4, r3
 8016730:	687b      	ldr	r3, [r7, #4]
 8016732:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8016734:	3b01      	subs	r3, #1
 8016736:	4618      	mov	r0, r3
 8016738:	f7f9 f939 	bl	800f9ae <lwip_htonl>
 801673c:	4603      	mov	r3, r0
 801673e:	2200      	movs	r2, #0
 8016740:	4621      	mov	r1, r4
 8016742:	6878      	ldr	r0, [r7, #4]
 8016744:	f7ff fe68 	bl	8016418 <tcp_output_alloc_header>
 8016748:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 801674a:	693b      	ldr	r3, [r7, #16]
 801674c:	2b00      	cmp	r3, #0
 801674e:	d102      	bne.n	8016756 <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 8016750:	f04f 33ff 	mov.w	r3, #4294967295
 8016754:	e010      	b.n	8016778 <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8016756:	7dfb      	ldrb	r3, [r7, #23]
 8016758:	2200      	movs	r2, #0
 801675a:	6939      	ldr	r1, [r7, #16]
 801675c:	6878      	ldr	r0, [r7, #4]
 801675e:	f7ff fe99 	bl	8016494 <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8016762:	687a      	ldr	r2, [r7, #4]
 8016764:	687b      	ldr	r3, [r7, #4]
 8016766:	3304      	adds	r3, #4
 8016768:	6939      	ldr	r1, [r7, #16]
 801676a:	6878      	ldr	r0, [r7, #4]
 801676c:	f7ff fed0 	bl	8016510 <tcp_output_control_segment>
 8016770:	4603      	mov	r3, r0
 8016772:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8016774:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8016778:	4618      	mov	r0, r3
 801677a:	371c      	adds	r7, #28
 801677c:	46bd      	mov	sp, r7
 801677e:	bd90      	pop	{r4, r7, pc}
 8016780:	0801e100 	.word	0x0801e100
 8016784:	0801e8dc 	.word	0x0801e8dc
 8016788:	0801e154 	.word	0x0801e154

0801678c <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 801678c:	b590      	push	{r4, r7, lr}
 801678e:	b08b      	sub	sp, #44	; 0x2c
 8016790:	af00      	add	r7, sp, #0
 8016792:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8016794:	2300      	movs	r3, #0
 8016796:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 801679a:	687b      	ldr	r3, [r7, #4]
 801679c:	2b00      	cmp	r3, #0
 801679e:	d106      	bne.n	80167ae <tcp_zero_window_probe+0x22>
 80167a0:	4b4c      	ldr	r3, [pc, #304]	; (80168d4 <tcp_zero_window_probe+0x148>)
 80167a2:	f640 024f 	movw	r2, #2127	; 0x84f
 80167a6:	494c      	ldr	r1, [pc, #304]	; (80168d8 <tcp_zero_window_probe+0x14c>)
 80167a8:	484c      	ldr	r0, [pc, #304]	; (80168dc <tcp_zero_window_probe+0x150>)
 80167aa:	f003 fba5 	bl	8019ef8 <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 80167ae:	687b      	ldr	r3, [r7, #4]
 80167b0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80167b2:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 80167b4:	6a3b      	ldr	r3, [r7, #32]
 80167b6:	2b00      	cmp	r3, #0
 80167b8:	d101      	bne.n	80167be <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 80167ba:	2300      	movs	r3, #0
 80167bc:	e086      	b.n	80168cc <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 80167be:	687b      	ldr	r3, [r7, #4]
 80167c0:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 80167c4:	2bff      	cmp	r3, #255	; 0xff
 80167c6:	d007      	beq.n	80167d8 <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 80167c8:	687b      	ldr	r3, [r7, #4]
 80167ca:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 80167ce:	3301      	adds	r3, #1
 80167d0:	b2da      	uxtb	r2, r3
 80167d2:	687b      	ldr	r3, [r7, #4]
 80167d4:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 80167d8:	6a3b      	ldr	r3, [r7, #32]
 80167da:	68db      	ldr	r3, [r3, #12]
 80167dc:	899b      	ldrh	r3, [r3, #12]
 80167de:	b29b      	uxth	r3, r3
 80167e0:	4618      	mov	r0, r3
 80167e2:	f7f9 f8cf 	bl	800f984 <lwip_htons>
 80167e6:	4603      	mov	r3, r0
 80167e8:	b2db      	uxtb	r3, r3
 80167ea:	f003 0301 	and.w	r3, r3, #1
 80167ee:	2b00      	cmp	r3, #0
 80167f0:	d005      	beq.n	80167fe <tcp_zero_window_probe+0x72>
 80167f2:	6a3b      	ldr	r3, [r7, #32]
 80167f4:	891b      	ldrh	r3, [r3, #8]
 80167f6:	2b00      	cmp	r3, #0
 80167f8:	d101      	bne.n	80167fe <tcp_zero_window_probe+0x72>
 80167fa:	2301      	movs	r3, #1
 80167fc:	e000      	b.n	8016800 <tcp_zero_window_probe+0x74>
 80167fe:	2300      	movs	r3, #0
 8016800:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 8016802:	7ffb      	ldrb	r3, [r7, #31]
 8016804:	2b00      	cmp	r3, #0
 8016806:	bf0c      	ite	eq
 8016808:	2301      	moveq	r3, #1
 801680a:	2300      	movne	r3, #0
 801680c:	b2db      	uxtb	r3, r3
 801680e:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 8016810:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8016814:	b299      	uxth	r1, r3
 8016816:	6a3b      	ldr	r3, [r7, #32]
 8016818:	68db      	ldr	r3, [r3, #12]
 801681a:	685b      	ldr	r3, [r3, #4]
 801681c:	8bba      	ldrh	r2, [r7, #28]
 801681e:	6878      	ldr	r0, [r7, #4]
 8016820:	f7ff fdfa 	bl	8016418 <tcp_output_alloc_header>
 8016824:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 8016826:	69bb      	ldr	r3, [r7, #24]
 8016828:	2b00      	cmp	r3, #0
 801682a:	d102      	bne.n	8016832 <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 801682c:	f04f 33ff 	mov.w	r3, #4294967295
 8016830:	e04c      	b.n	80168cc <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 8016832:	69bb      	ldr	r3, [r7, #24]
 8016834:	685b      	ldr	r3, [r3, #4]
 8016836:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 8016838:	7ffb      	ldrb	r3, [r7, #31]
 801683a:	2b00      	cmp	r3, #0
 801683c:	d011      	beq.n	8016862 <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 801683e:	697b      	ldr	r3, [r7, #20]
 8016840:	899b      	ldrh	r3, [r3, #12]
 8016842:	b29b      	uxth	r3, r3
 8016844:	b21b      	sxth	r3, r3
 8016846:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 801684a:	b21c      	sxth	r4, r3
 801684c:	2011      	movs	r0, #17
 801684e:	f7f9 f899 	bl	800f984 <lwip_htons>
 8016852:	4603      	mov	r3, r0
 8016854:	b21b      	sxth	r3, r3
 8016856:	4323      	orrs	r3, r4
 8016858:	b21b      	sxth	r3, r3
 801685a:	b29a      	uxth	r2, r3
 801685c:	697b      	ldr	r3, [r7, #20]
 801685e:	819a      	strh	r2, [r3, #12]
 8016860:	e010      	b.n	8016884 <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 8016862:	69bb      	ldr	r3, [r7, #24]
 8016864:	685b      	ldr	r3, [r3, #4]
 8016866:	3314      	adds	r3, #20
 8016868:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 801686a:	6a3b      	ldr	r3, [r7, #32]
 801686c:	6858      	ldr	r0, [r3, #4]
 801686e:	6a3b      	ldr	r3, [r7, #32]
 8016870:	685b      	ldr	r3, [r3, #4]
 8016872:	891a      	ldrh	r2, [r3, #8]
 8016874:	6a3b      	ldr	r3, [r7, #32]
 8016876:	891b      	ldrh	r3, [r3, #8]
 8016878:	1ad3      	subs	r3, r2, r3
 801687a:	b29b      	uxth	r3, r3
 801687c:	2201      	movs	r2, #1
 801687e:	6939      	ldr	r1, [r7, #16]
 8016880:	f7fa fe4e 	bl	8011520 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 8016884:	6a3b      	ldr	r3, [r7, #32]
 8016886:	68db      	ldr	r3, [r3, #12]
 8016888:	685b      	ldr	r3, [r3, #4]
 801688a:	4618      	mov	r0, r3
 801688c:	f7f9 f88f 	bl	800f9ae <lwip_htonl>
 8016890:	4603      	mov	r3, r0
 8016892:	3301      	adds	r3, #1
 8016894:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8016896:	687b      	ldr	r3, [r7, #4]
 8016898:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801689a:	68fb      	ldr	r3, [r7, #12]
 801689c:	1ad3      	subs	r3, r2, r3
 801689e:	2b00      	cmp	r3, #0
 80168a0:	da02      	bge.n	80168a8 <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 80168a2:	687b      	ldr	r3, [r7, #4]
 80168a4:	68fa      	ldr	r2, [r7, #12]
 80168a6:	651a      	str	r2, [r3, #80]	; 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 80168a8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80168ac:	2200      	movs	r2, #0
 80168ae:	69b9      	ldr	r1, [r7, #24]
 80168b0:	6878      	ldr	r0, [r7, #4]
 80168b2:	f7ff fdef 	bl	8016494 <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 80168b6:	687a      	ldr	r2, [r7, #4]
 80168b8:	687b      	ldr	r3, [r7, #4]
 80168ba:	3304      	adds	r3, #4
 80168bc:	69b9      	ldr	r1, [r7, #24]
 80168be:	6878      	ldr	r0, [r7, #4]
 80168c0:	f7ff fe26 	bl	8016510 <tcp_output_control_segment>
 80168c4:	4603      	mov	r3, r0
 80168c6:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 80168c8:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 80168cc:	4618      	mov	r0, r3
 80168ce:	372c      	adds	r7, #44	; 0x2c
 80168d0:	46bd      	mov	sp, r7
 80168d2:	bd90      	pop	{r4, r7, pc}
 80168d4:	0801e100 	.word	0x0801e100
 80168d8:	0801e8f8 	.word	0x0801e8f8
 80168dc:	0801e154 	.word	0x0801e154

080168e0 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 80168e0:	b580      	push	{r7, lr}
 80168e2:	b082      	sub	sp, #8
 80168e4:	af00      	add	r7, sp, #0
 80168e6:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 80168e8:	f7fa ff08 	bl	80116fc <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 80168ec:	4b0a      	ldr	r3, [pc, #40]	; (8016918 <tcpip_tcp_timer+0x38>)
 80168ee:	681b      	ldr	r3, [r3, #0]
 80168f0:	2b00      	cmp	r3, #0
 80168f2:	d103      	bne.n	80168fc <tcpip_tcp_timer+0x1c>
 80168f4:	4b09      	ldr	r3, [pc, #36]	; (801691c <tcpip_tcp_timer+0x3c>)
 80168f6:	681b      	ldr	r3, [r3, #0]
 80168f8:	2b00      	cmp	r3, #0
 80168fa:	d005      	beq.n	8016908 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 80168fc:	2200      	movs	r2, #0
 80168fe:	4908      	ldr	r1, [pc, #32]	; (8016920 <tcpip_tcp_timer+0x40>)
 8016900:	20fa      	movs	r0, #250	; 0xfa
 8016902:	f000 f8f3 	bl	8016aec <sys_timeout>
 8016906:	e003      	b.n	8016910 <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 8016908:	4b06      	ldr	r3, [pc, #24]	; (8016924 <tcpip_tcp_timer+0x44>)
 801690a:	2200      	movs	r2, #0
 801690c:	601a      	str	r2, [r3, #0]
  }
}
 801690e:	bf00      	nop
 8016910:	bf00      	nop
 8016912:	3708      	adds	r7, #8
 8016914:	46bd      	mov	sp, r7
 8016916:	bd80      	pop	{r7, pc}
 8016918:	200070e0 	.word	0x200070e0
 801691c:	200070e4 	.word	0x200070e4
 8016920:	080168e1 	.word	0x080168e1
 8016924:	2000712c 	.word	0x2000712c

08016928 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 8016928:	b580      	push	{r7, lr}
 801692a:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 801692c:	4b0a      	ldr	r3, [pc, #40]	; (8016958 <tcp_timer_needed+0x30>)
 801692e:	681b      	ldr	r3, [r3, #0]
 8016930:	2b00      	cmp	r3, #0
 8016932:	d10f      	bne.n	8016954 <tcp_timer_needed+0x2c>
 8016934:	4b09      	ldr	r3, [pc, #36]	; (801695c <tcp_timer_needed+0x34>)
 8016936:	681b      	ldr	r3, [r3, #0]
 8016938:	2b00      	cmp	r3, #0
 801693a:	d103      	bne.n	8016944 <tcp_timer_needed+0x1c>
 801693c:	4b08      	ldr	r3, [pc, #32]	; (8016960 <tcp_timer_needed+0x38>)
 801693e:	681b      	ldr	r3, [r3, #0]
 8016940:	2b00      	cmp	r3, #0
 8016942:	d007      	beq.n	8016954 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 8016944:	4b04      	ldr	r3, [pc, #16]	; (8016958 <tcp_timer_needed+0x30>)
 8016946:	2201      	movs	r2, #1
 8016948:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 801694a:	2200      	movs	r2, #0
 801694c:	4905      	ldr	r1, [pc, #20]	; (8016964 <tcp_timer_needed+0x3c>)
 801694e:	20fa      	movs	r0, #250	; 0xfa
 8016950:	f000 f8cc 	bl	8016aec <sys_timeout>
  }
}
 8016954:	bf00      	nop
 8016956:	bd80      	pop	{r7, pc}
 8016958:	2000712c 	.word	0x2000712c
 801695c:	200070e0 	.word	0x200070e0
 8016960:	200070e4 	.word	0x200070e4
 8016964:	080168e1 	.word	0x080168e1

08016968 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 8016968:	b580      	push	{r7, lr}
 801696a:	b086      	sub	sp, #24
 801696c:	af00      	add	r7, sp, #0
 801696e:	60f8      	str	r0, [r7, #12]
 8016970:	60b9      	str	r1, [r7, #8]
 8016972:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 8016974:	2006      	movs	r0, #6
 8016976:	f7f9 fd23 	bl	80103c0 <memp_malloc>
 801697a:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 801697c:	693b      	ldr	r3, [r7, #16]
 801697e:	2b00      	cmp	r3, #0
 8016980:	d109      	bne.n	8016996 <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 8016982:	693b      	ldr	r3, [r7, #16]
 8016984:	2b00      	cmp	r3, #0
 8016986:	d151      	bne.n	8016a2c <sys_timeout_abs+0xc4>
 8016988:	4b2a      	ldr	r3, [pc, #168]	; (8016a34 <sys_timeout_abs+0xcc>)
 801698a:	22be      	movs	r2, #190	; 0xbe
 801698c:	492a      	ldr	r1, [pc, #168]	; (8016a38 <sys_timeout_abs+0xd0>)
 801698e:	482b      	ldr	r0, [pc, #172]	; (8016a3c <sys_timeout_abs+0xd4>)
 8016990:	f003 fab2 	bl	8019ef8 <iprintf>
    return;
 8016994:	e04a      	b.n	8016a2c <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 8016996:	693b      	ldr	r3, [r7, #16]
 8016998:	2200      	movs	r2, #0
 801699a:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 801699c:	693b      	ldr	r3, [r7, #16]
 801699e:	68ba      	ldr	r2, [r7, #8]
 80169a0:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 80169a2:	693b      	ldr	r3, [r7, #16]
 80169a4:	687a      	ldr	r2, [r7, #4]
 80169a6:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 80169a8:	693b      	ldr	r3, [r7, #16]
 80169aa:	68fa      	ldr	r2, [r7, #12]
 80169ac:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 80169ae:	4b24      	ldr	r3, [pc, #144]	; (8016a40 <sys_timeout_abs+0xd8>)
 80169b0:	681b      	ldr	r3, [r3, #0]
 80169b2:	2b00      	cmp	r3, #0
 80169b4:	d103      	bne.n	80169be <sys_timeout_abs+0x56>
    next_timeout = timeout;
 80169b6:	4a22      	ldr	r2, [pc, #136]	; (8016a40 <sys_timeout_abs+0xd8>)
 80169b8:	693b      	ldr	r3, [r7, #16]
 80169ba:	6013      	str	r3, [r2, #0]
    return;
 80169bc:	e037      	b.n	8016a2e <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 80169be:	693b      	ldr	r3, [r7, #16]
 80169c0:	685a      	ldr	r2, [r3, #4]
 80169c2:	4b1f      	ldr	r3, [pc, #124]	; (8016a40 <sys_timeout_abs+0xd8>)
 80169c4:	681b      	ldr	r3, [r3, #0]
 80169c6:	685b      	ldr	r3, [r3, #4]
 80169c8:	1ad3      	subs	r3, r2, r3
 80169ca:	0fdb      	lsrs	r3, r3, #31
 80169cc:	f003 0301 	and.w	r3, r3, #1
 80169d0:	b2db      	uxtb	r3, r3
 80169d2:	2b00      	cmp	r3, #0
 80169d4:	d007      	beq.n	80169e6 <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 80169d6:	4b1a      	ldr	r3, [pc, #104]	; (8016a40 <sys_timeout_abs+0xd8>)
 80169d8:	681a      	ldr	r2, [r3, #0]
 80169da:	693b      	ldr	r3, [r7, #16]
 80169dc:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 80169de:	4a18      	ldr	r2, [pc, #96]	; (8016a40 <sys_timeout_abs+0xd8>)
 80169e0:	693b      	ldr	r3, [r7, #16]
 80169e2:	6013      	str	r3, [r2, #0]
 80169e4:	e023      	b.n	8016a2e <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 80169e6:	4b16      	ldr	r3, [pc, #88]	; (8016a40 <sys_timeout_abs+0xd8>)
 80169e8:	681b      	ldr	r3, [r3, #0]
 80169ea:	617b      	str	r3, [r7, #20]
 80169ec:	e01a      	b.n	8016a24 <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 80169ee:	697b      	ldr	r3, [r7, #20]
 80169f0:	681b      	ldr	r3, [r3, #0]
 80169f2:	2b00      	cmp	r3, #0
 80169f4:	d00b      	beq.n	8016a0e <sys_timeout_abs+0xa6>
 80169f6:	693b      	ldr	r3, [r7, #16]
 80169f8:	685a      	ldr	r2, [r3, #4]
 80169fa:	697b      	ldr	r3, [r7, #20]
 80169fc:	681b      	ldr	r3, [r3, #0]
 80169fe:	685b      	ldr	r3, [r3, #4]
 8016a00:	1ad3      	subs	r3, r2, r3
 8016a02:	0fdb      	lsrs	r3, r3, #31
 8016a04:	f003 0301 	and.w	r3, r3, #1
 8016a08:	b2db      	uxtb	r3, r3
 8016a0a:	2b00      	cmp	r3, #0
 8016a0c:	d007      	beq.n	8016a1e <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 8016a0e:	697b      	ldr	r3, [r7, #20]
 8016a10:	681a      	ldr	r2, [r3, #0]
 8016a12:	693b      	ldr	r3, [r7, #16]
 8016a14:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 8016a16:	697b      	ldr	r3, [r7, #20]
 8016a18:	693a      	ldr	r2, [r7, #16]
 8016a1a:	601a      	str	r2, [r3, #0]
        break;
 8016a1c:	e007      	b.n	8016a2e <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 8016a1e:	697b      	ldr	r3, [r7, #20]
 8016a20:	681b      	ldr	r3, [r3, #0]
 8016a22:	617b      	str	r3, [r7, #20]
 8016a24:	697b      	ldr	r3, [r7, #20]
 8016a26:	2b00      	cmp	r3, #0
 8016a28:	d1e1      	bne.n	80169ee <sys_timeout_abs+0x86>
 8016a2a:	e000      	b.n	8016a2e <sys_timeout_abs+0xc6>
    return;
 8016a2c:	bf00      	nop
      }
    }
  }
}
 8016a2e:	3718      	adds	r7, #24
 8016a30:	46bd      	mov	sp, r7
 8016a32:	bd80      	pop	{r7, pc}
 8016a34:	0801e91c 	.word	0x0801e91c
 8016a38:	0801e950 	.word	0x0801e950
 8016a3c:	0801e990 	.word	0x0801e990
 8016a40:	20007124 	.word	0x20007124

08016a44 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 8016a44:	b580      	push	{r7, lr}
 8016a46:	b086      	sub	sp, #24
 8016a48:	af00      	add	r7, sp, #0
 8016a4a:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 8016a4c:	687b      	ldr	r3, [r7, #4]
 8016a4e:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 8016a50:	697b      	ldr	r3, [r7, #20]
 8016a52:	685b      	ldr	r3, [r3, #4]
 8016a54:	4798      	blx	r3

  now = sys_now();
 8016a56:	f7f8 fdb5 	bl	800f5c4 <sys_now>
 8016a5a:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 8016a5c:	697b      	ldr	r3, [r7, #20]
 8016a5e:	681a      	ldr	r2, [r3, #0]
 8016a60:	4b0f      	ldr	r3, [pc, #60]	; (8016aa0 <lwip_cyclic_timer+0x5c>)
 8016a62:	681b      	ldr	r3, [r3, #0]
 8016a64:	4413      	add	r3, r2
 8016a66:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 8016a68:	68fa      	ldr	r2, [r7, #12]
 8016a6a:	693b      	ldr	r3, [r7, #16]
 8016a6c:	1ad3      	subs	r3, r2, r3
 8016a6e:	0fdb      	lsrs	r3, r3, #31
 8016a70:	f003 0301 	and.w	r3, r3, #1
 8016a74:	b2db      	uxtb	r3, r3
 8016a76:	2b00      	cmp	r3, #0
 8016a78:	d009      	beq.n	8016a8e <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 8016a7a:	697b      	ldr	r3, [r7, #20]
 8016a7c:	681a      	ldr	r2, [r3, #0]
 8016a7e:	693b      	ldr	r3, [r7, #16]
 8016a80:	4413      	add	r3, r2
 8016a82:	687a      	ldr	r2, [r7, #4]
 8016a84:	4907      	ldr	r1, [pc, #28]	; (8016aa4 <lwip_cyclic_timer+0x60>)
 8016a86:	4618      	mov	r0, r3
 8016a88:	f7ff ff6e 	bl	8016968 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 8016a8c:	e004      	b.n	8016a98 <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 8016a8e:	687a      	ldr	r2, [r7, #4]
 8016a90:	4904      	ldr	r1, [pc, #16]	; (8016aa4 <lwip_cyclic_timer+0x60>)
 8016a92:	68f8      	ldr	r0, [r7, #12]
 8016a94:	f7ff ff68 	bl	8016968 <sys_timeout_abs>
}
 8016a98:	bf00      	nop
 8016a9a:	3718      	adds	r7, #24
 8016a9c:	46bd      	mov	sp, r7
 8016a9e:	bd80      	pop	{r7, pc}
 8016aa0:	20007128 	.word	0x20007128
 8016aa4:	08016a45 	.word	0x08016a45

08016aa8 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 8016aa8:	b580      	push	{r7, lr}
 8016aaa:	b082      	sub	sp, #8
 8016aac:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8016aae:	2301      	movs	r3, #1
 8016ab0:	607b      	str	r3, [r7, #4]
 8016ab2:	e00e      	b.n	8016ad2 <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 8016ab4:	4a0b      	ldr	r2, [pc, #44]	; (8016ae4 <sys_timeouts_init+0x3c>)
 8016ab6:	687b      	ldr	r3, [r7, #4]
 8016ab8:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8016abc:	687b      	ldr	r3, [r7, #4]
 8016abe:	00db      	lsls	r3, r3, #3
 8016ac0:	4a08      	ldr	r2, [pc, #32]	; (8016ae4 <sys_timeouts_init+0x3c>)
 8016ac2:	4413      	add	r3, r2
 8016ac4:	461a      	mov	r2, r3
 8016ac6:	4908      	ldr	r1, [pc, #32]	; (8016ae8 <sys_timeouts_init+0x40>)
 8016ac8:	f000 f810 	bl	8016aec <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8016acc:	687b      	ldr	r3, [r7, #4]
 8016ace:	3301      	adds	r3, #1
 8016ad0:	607b      	str	r3, [r7, #4]
 8016ad2:	687b      	ldr	r3, [r7, #4]
 8016ad4:	2b02      	cmp	r3, #2
 8016ad6:	d9ed      	bls.n	8016ab4 <sys_timeouts_init+0xc>
  }
}
 8016ad8:	bf00      	nop
 8016ada:	bf00      	nop
 8016adc:	3708      	adds	r7, #8
 8016ade:	46bd      	mov	sp, r7
 8016ae0:	bd80      	pop	{r7, pc}
 8016ae2:	bf00      	nop
 8016ae4:	0801f54c 	.word	0x0801f54c
 8016ae8:	08016a45 	.word	0x08016a45

08016aec <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 8016aec:	b580      	push	{r7, lr}
 8016aee:	b086      	sub	sp, #24
 8016af0:	af00      	add	r7, sp, #0
 8016af2:	60f8      	str	r0, [r7, #12]
 8016af4:	60b9      	str	r1, [r7, #8]
 8016af6:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 8016af8:	68fb      	ldr	r3, [r7, #12]
 8016afa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8016afe:	d306      	bcc.n	8016b0e <sys_timeout+0x22>
 8016b00:	4b0a      	ldr	r3, [pc, #40]	; (8016b2c <sys_timeout+0x40>)
 8016b02:	f240 1229 	movw	r2, #297	; 0x129
 8016b06:	490a      	ldr	r1, [pc, #40]	; (8016b30 <sys_timeout+0x44>)
 8016b08:	480a      	ldr	r0, [pc, #40]	; (8016b34 <sys_timeout+0x48>)
 8016b0a:	f003 f9f5 	bl	8019ef8 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 8016b0e:	f7f8 fd59 	bl	800f5c4 <sys_now>
 8016b12:	4602      	mov	r2, r0
 8016b14:	68fb      	ldr	r3, [r7, #12]
 8016b16:	4413      	add	r3, r2
 8016b18:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 8016b1a:	687a      	ldr	r2, [r7, #4]
 8016b1c:	68b9      	ldr	r1, [r7, #8]
 8016b1e:	6978      	ldr	r0, [r7, #20]
 8016b20:	f7ff ff22 	bl	8016968 <sys_timeout_abs>
#endif
}
 8016b24:	bf00      	nop
 8016b26:	3718      	adds	r7, #24
 8016b28:	46bd      	mov	sp, r7
 8016b2a:	bd80      	pop	{r7, pc}
 8016b2c:	0801e91c 	.word	0x0801e91c
 8016b30:	0801e9b8 	.word	0x0801e9b8
 8016b34:	0801e990 	.word	0x0801e990

08016b38 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 8016b38:	b580      	push	{r7, lr}
 8016b3a:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8016b3c:	f002 fca2 	bl	8019484 <rand>
 8016b40:	4603      	mov	r3, r0
 8016b42:	b29b      	uxth	r3, r3
 8016b44:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8016b48:	b29b      	uxth	r3, r3
 8016b4a:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 8016b4e:	b29a      	uxth	r2, r3
 8016b50:	4b01      	ldr	r3, [pc, #4]	; (8016b58 <udp_init+0x20>)
 8016b52:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 8016b54:	bf00      	nop
 8016b56:	bd80      	pop	{r7, pc}
 8016b58:	20000060 	.word	0x20000060

08016b5c <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 8016b5c:	b580      	push	{r7, lr}
 8016b5e:	b084      	sub	sp, #16
 8016b60:	af00      	add	r7, sp, #0
 8016b62:	60f8      	str	r0, [r7, #12]
 8016b64:	60b9      	str	r1, [r7, #8]
 8016b66:	4613      	mov	r3, r2
 8016b68:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 8016b6a:	68fb      	ldr	r3, [r7, #12]
 8016b6c:	2b00      	cmp	r3, #0
 8016b6e:	d105      	bne.n	8016b7c <udp_input_local_match+0x20>
 8016b70:	4b27      	ldr	r3, [pc, #156]	; (8016c10 <udp_input_local_match+0xb4>)
 8016b72:	2287      	movs	r2, #135	; 0x87
 8016b74:	4927      	ldr	r1, [pc, #156]	; (8016c14 <udp_input_local_match+0xb8>)
 8016b76:	4828      	ldr	r0, [pc, #160]	; (8016c18 <udp_input_local_match+0xbc>)
 8016b78:	f003 f9be 	bl	8019ef8 <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 8016b7c:	68bb      	ldr	r3, [r7, #8]
 8016b7e:	2b00      	cmp	r3, #0
 8016b80:	d105      	bne.n	8016b8e <udp_input_local_match+0x32>
 8016b82:	4b23      	ldr	r3, [pc, #140]	; (8016c10 <udp_input_local_match+0xb4>)
 8016b84:	2288      	movs	r2, #136	; 0x88
 8016b86:	4925      	ldr	r1, [pc, #148]	; (8016c1c <udp_input_local_match+0xc0>)
 8016b88:	4823      	ldr	r0, [pc, #140]	; (8016c18 <udp_input_local_match+0xbc>)
 8016b8a:	f003 f9b5 	bl	8019ef8 <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8016b8e:	68fb      	ldr	r3, [r7, #12]
 8016b90:	7a1b      	ldrb	r3, [r3, #8]
 8016b92:	2b00      	cmp	r3, #0
 8016b94:	d00b      	beq.n	8016bae <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8016b96:	68fb      	ldr	r3, [r7, #12]
 8016b98:	7a1a      	ldrb	r2, [r3, #8]
 8016b9a:	4b21      	ldr	r3, [pc, #132]	; (8016c20 <udp_input_local_match+0xc4>)
 8016b9c:	685b      	ldr	r3, [r3, #4]
 8016b9e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8016ba2:	3301      	adds	r3, #1
 8016ba4:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8016ba6:	429a      	cmp	r2, r3
 8016ba8:	d001      	beq.n	8016bae <udp_input_local_match+0x52>
    return 0;
 8016baa:	2300      	movs	r3, #0
 8016bac:	e02b      	b.n	8016c06 <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 8016bae:	79fb      	ldrb	r3, [r7, #7]
 8016bb0:	2b00      	cmp	r3, #0
 8016bb2:	d018      	beq.n	8016be6 <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8016bb4:	68fb      	ldr	r3, [r7, #12]
 8016bb6:	2b00      	cmp	r3, #0
 8016bb8:	d013      	beq.n	8016be2 <udp_input_local_match+0x86>
 8016bba:	68fb      	ldr	r3, [r7, #12]
 8016bbc:	681b      	ldr	r3, [r3, #0]
 8016bbe:	2b00      	cmp	r3, #0
 8016bc0:	d00f      	beq.n	8016be2 <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8016bc2:	4b17      	ldr	r3, [pc, #92]	; (8016c20 <udp_input_local_match+0xc4>)
 8016bc4:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8016bc6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016bca:	d00a      	beq.n	8016be2 <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 8016bcc:	68fb      	ldr	r3, [r7, #12]
 8016bce:	681a      	ldr	r2, [r3, #0]
 8016bd0:	4b13      	ldr	r3, [pc, #76]	; (8016c20 <udp_input_local_match+0xc4>)
 8016bd2:	695b      	ldr	r3, [r3, #20]
 8016bd4:	405a      	eors	r2, r3
 8016bd6:	68bb      	ldr	r3, [r7, #8]
 8016bd8:	3308      	adds	r3, #8
 8016bda:	681b      	ldr	r3, [r3, #0]
 8016bdc:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8016bde:	2b00      	cmp	r3, #0
 8016be0:	d110      	bne.n	8016c04 <udp_input_local_match+0xa8>
          return 1;
 8016be2:	2301      	movs	r3, #1
 8016be4:	e00f      	b.n	8016c06 <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8016be6:	68fb      	ldr	r3, [r7, #12]
 8016be8:	2b00      	cmp	r3, #0
 8016bea:	d009      	beq.n	8016c00 <udp_input_local_match+0xa4>
 8016bec:	68fb      	ldr	r3, [r7, #12]
 8016bee:	681b      	ldr	r3, [r3, #0]
 8016bf0:	2b00      	cmp	r3, #0
 8016bf2:	d005      	beq.n	8016c00 <udp_input_local_match+0xa4>
 8016bf4:	68fb      	ldr	r3, [r7, #12]
 8016bf6:	681a      	ldr	r2, [r3, #0]
 8016bf8:	4b09      	ldr	r3, [pc, #36]	; (8016c20 <udp_input_local_match+0xc4>)
 8016bfa:	695b      	ldr	r3, [r3, #20]
 8016bfc:	429a      	cmp	r2, r3
 8016bfe:	d101      	bne.n	8016c04 <udp_input_local_match+0xa8>
        return 1;
 8016c00:	2301      	movs	r3, #1
 8016c02:	e000      	b.n	8016c06 <udp_input_local_match+0xaa>
      }
  }

  return 0;
 8016c04:	2300      	movs	r3, #0
}
 8016c06:	4618      	mov	r0, r3
 8016c08:	3710      	adds	r7, #16
 8016c0a:	46bd      	mov	sp, r7
 8016c0c:	bd80      	pop	{r7, pc}
 8016c0e:	bf00      	nop
 8016c10:	0801ea04 	.word	0x0801ea04
 8016c14:	0801ea34 	.word	0x0801ea34
 8016c18:	0801ea58 	.word	0x0801ea58
 8016c1c:	0801ea80 	.word	0x0801ea80
 8016c20:	200007f8 	.word	0x200007f8

08016c24 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 8016c24:	b590      	push	{r4, r7, lr}
 8016c26:	b08d      	sub	sp, #52	; 0x34
 8016c28:	af02      	add	r7, sp, #8
 8016c2a:	6078      	str	r0, [r7, #4]
 8016c2c:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 8016c2e:	2300      	movs	r3, #0
 8016c30:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 8016c32:	687b      	ldr	r3, [r7, #4]
 8016c34:	2b00      	cmp	r3, #0
 8016c36:	d105      	bne.n	8016c44 <udp_input+0x20>
 8016c38:	4b7c      	ldr	r3, [pc, #496]	; (8016e2c <udp_input+0x208>)
 8016c3a:	22cf      	movs	r2, #207	; 0xcf
 8016c3c:	497c      	ldr	r1, [pc, #496]	; (8016e30 <udp_input+0x20c>)
 8016c3e:	487d      	ldr	r0, [pc, #500]	; (8016e34 <udp_input+0x210>)
 8016c40:	f003 f95a 	bl	8019ef8 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 8016c44:	683b      	ldr	r3, [r7, #0]
 8016c46:	2b00      	cmp	r3, #0
 8016c48:	d105      	bne.n	8016c56 <udp_input+0x32>
 8016c4a:	4b78      	ldr	r3, [pc, #480]	; (8016e2c <udp_input+0x208>)
 8016c4c:	22d0      	movs	r2, #208	; 0xd0
 8016c4e:	497a      	ldr	r1, [pc, #488]	; (8016e38 <udp_input+0x214>)
 8016c50:	4878      	ldr	r0, [pc, #480]	; (8016e34 <udp_input+0x210>)
 8016c52:	f003 f951 	bl	8019ef8 <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 8016c56:	687b      	ldr	r3, [r7, #4]
 8016c58:	895b      	ldrh	r3, [r3, #10]
 8016c5a:	2b07      	cmp	r3, #7
 8016c5c:	d803      	bhi.n	8016c66 <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 8016c5e:	6878      	ldr	r0, [r7, #4]
 8016c60:	f7fa fa74 	bl	801114c <pbuf_free>
    goto end;
 8016c64:	e0de      	b.n	8016e24 <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 8016c66:	687b      	ldr	r3, [r7, #4]
 8016c68:	685b      	ldr	r3, [r3, #4]
 8016c6a:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 8016c6c:	4b73      	ldr	r3, [pc, #460]	; (8016e3c <udp_input+0x218>)
 8016c6e:	695b      	ldr	r3, [r3, #20]
 8016c70:	4a72      	ldr	r2, [pc, #456]	; (8016e3c <udp_input+0x218>)
 8016c72:	6812      	ldr	r2, [r2, #0]
 8016c74:	4611      	mov	r1, r2
 8016c76:	4618      	mov	r0, r3
 8016c78:	f001 fcae 	bl	80185d8 <ip4_addr_isbroadcast_u32>
 8016c7c:	4603      	mov	r3, r0
 8016c7e:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 8016c80:	697b      	ldr	r3, [r7, #20]
 8016c82:	881b      	ldrh	r3, [r3, #0]
 8016c84:	b29b      	uxth	r3, r3
 8016c86:	4618      	mov	r0, r3
 8016c88:	f7f8 fe7c 	bl	800f984 <lwip_htons>
 8016c8c:	4603      	mov	r3, r0
 8016c8e:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 8016c90:	697b      	ldr	r3, [r7, #20]
 8016c92:	885b      	ldrh	r3, [r3, #2]
 8016c94:	b29b      	uxth	r3, r3
 8016c96:	4618      	mov	r0, r3
 8016c98:	f7f8 fe74 	bl	800f984 <lwip_htons>
 8016c9c:	4603      	mov	r3, r0
 8016c9e:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 8016ca0:	2300      	movs	r3, #0
 8016ca2:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 8016ca4:	2300      	movs	r3, #0
 8016ca6:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 8016ca8:	2300      	movs	r3, #0
 8016caa:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8016cac:	4b64      	ldr	r3, [pc, #400]	; (8016e40 <udp_input+0x21c>)
 8016cae:	681b      	ldr	r3, [r3, #0]
 8016cb0:	627b      	str	r3, [r7, #36]	; 0x24
 8016cb2:	e054      	b.n	8016d5e <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 8016cb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016cb6:	8a5b      	ldrh	r3, [r3, #18]
 8016cb8:	89fa      	ldrh	r2, [r7, #14]
 8016cba:	429a      	cmp	r2, r3
 8016cbc:	d14a      	bne.n	8016d54 <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 8016cbe:	7cfb      	ldrb	r3, [r7, #19]
 8016cc0:	461a      	mov	r2, r3
 8016cc2:	6839      	ldr	r1, [r7, #0]
 8016cc4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8016cc6:	f7ff ff49 	bl	8016b5c <udp_input_local_match>
 8016cca:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 8016ccc:	2b00      	cmp	r3, #0
 8016cce:	d041      	beq.n	8016d54 <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 8016cd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016cd2:	7c1b      	ldrb	r3, [r3, #16]
 8016cd4:	f003 0304 	and.w	r3, r3, #4
 8016cd8:	2b00      	cmp	r3, #0
 8016cda:	d11d      	bne.n	8016d18 <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 8016cdc:	69fb      	ldr	r3, [r7, #28]
 8016cde:	2b00      	cmp	r3, #0
 8016ce0:	d102      	bne.n	8016ce8 <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 8016ce2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016ce4:	61fb      	str	r3, [r7, #28]
 8016ce6:	e017      	b.n	8016d18 <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 8016ce8:	7cfb      	ldrb	r3, [r7, #19]
 8016cea:	2b00      	cmp	r3, #0
 8016cec:	d014      	beq.n	8016d18 <udp_input+0xf4>
 8016cee:	4b53      	ldr	r3, [pc, #332]	; (8016e3c <udp_input+0x218>)
 8016cf0:	695b      	ldr	r3, [r3, #20]
 8016cf2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016cf6:	d10f      	bne.n	8016d18 <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 8016cf8:	69fb      	ldr	r3, [r7, #28]
 8016cfa:	681a      	ldr	r2, [r3, #0]
 8016cfc:	683b      	ldr	r3, [r7, #0]
 8016cfe:	3304      	adds	r3, #4
 8016d00:	681b      	ldr	r3, [r3, #0]
 8016d02:	429a      	cmp	r2, r3
 8016d04:	d008      	beq.n	8016d18 <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 8016d06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016d08:	681a      	ldr	r2, [r3, #0]
 8016d0a:	683b      	ldr	r3, [r7, #0]
 8016d0c:	3304      	adds	r3, #4
 8016d0e:	681b      	ldr	r3, [r3, #0]
 8016d10:	429a      	cmp	r2, r3
 8016d12:	d101      	bne.n	8016d18 <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 8016d14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016d16:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 8016d18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016d1a:	8a9b      	ldrh	r3, [r3, #20]
 8016d1c:	8a3a      	ldrh	r2, [r7, #16]
 8016d1e:	429a      	cmp	r2, r3
 8016d20:	d118      	bne.n	8016d54 <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 8016d22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016d24:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 8016d26:	2b00      	cmp	r3, #0
 8016d28:	d005      	beq.n	8016d36 <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 8016d2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016d2c:	685a      	ldr	r2, [r3, #4]
 8016d2e:	4b43      	ldr	r3, [pc, #268]	; (8016e3c <udp_input+0x218>)
 8016d30:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 8016d32:	429a      	cmp	r2, r3
 8016d34:	d10e      	bne.n	8016d54 <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 8016d36:	6a3b      	ldr	r3, [r7, #32]
 8016d38:	2b00      	cmp	r3, #0
 8016d3a:	d014      	beq.n	8016d66 <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 8016d3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016d3e:	68da      	ldr	r2, [r3, #12]
 8016d40:	6a3b      	ldr	r3, [r7, #32]
 8016d42:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 8016d44:	4b3e      	ldr	r3, [pc, #248]	; (8016e40 <udp_input+0x21c>)
 8016d46:	681a      	ldr	r2, [r3, #0]
 8016d48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016d4a:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 8016d4c:	4a3c      	ldr	r2, [pc, #240]	; (8016e40 <udp_input+0x21c>)
 8016d4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016d50:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 8016d52:	e008      	b.n	8016d66 <udp_input+0x142>
      }
    }

    prev = pcb;
 8016d54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016d56:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8016d58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016d5a:	68db      	ldr	r3, [r3, #12]
 8016d5c:	627b      	str	r3, [r7, #36]	; 0x24
 8016d5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016d60:	2b00      	cmp	r3, #0
 8016d62:	d1a7      	bne.n	8016cb4 <udp_input+0x90>
 8016d64:	e000      	b.n	8016d68 <udp_input+0x144>
        break;
 8016d66:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 8016d68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016d6a:	2b00      	cmp	r3, #0
 8016d6c:	d101      	bne.n	8016d72 <udp_input+0x14e>
    pcb = uncon_pcb;
 8016d6e:	69fb      	ldr	r3, [r7, #28]
 8016d70:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 8016d72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016d74:	2b00      	cmp	r3, #0
 8016d76:	d002      	beq.n	8016d7e <udp_input+0x15a>
    for_us = 1;
 8016d78:	2301      	movs	r3, #1
 8016d7a:	76fb      	strb	r3, [r7, #27]
 8016d7c:	e00a      	b.n	8016d94 <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 8016d7e:	683b      	ldr	r3, [r7, #0]
 8016d80:	3304      	adds	r3, #4
 8016d82:	681a      	ldr	r2, [r3, #0]
 8016d84:	4b2d      	ldr	r3, [pc, #180]	; (8016e3c <udp_input+0x218>)
 8016d86:	695b      	ldr	r3, [r3, #20]
 8016d88:	429a      	cmp	r2, r3
 8016d8a:	bf0c      	ite	eq
 8016d8c:	2301      	moveq	r3, #1
 8016d8e:	2300      	movne	r3, #0
 8016d90:	b2db      	uxtb	r3, r3
 8016d92:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 8016d94:	7efb      	ldrb	r3, [r7, #27]
 8016d96:	2b00      	cmp	r3, #0
 8016d98:	d041      	beq.n	8016e1e <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 8016d9a:	2108      	movs	r1, #8
 8016d9c:	6878      	ldr	r0, [r7, #4]
 8016d9e:	f7fa f94f 	bl	8011040 <pbuf_remove_header>
 8016da2:	4603      	mov	r3, r0
 8016da4:	2b00      	cmp	r3, #0
 8016da6:	d00a      	beq.n	8016dbe <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 8016da8:	4b20      	ldr	r3, [pc, #128]	; (8016e2c <udp_input+0x208>)
 8016daa:	f44f 72b8 	mov.w	r2, #368	; 0x170
 8016dae:	4925      	ldr	r1, [pc, #148]	; (8016e44 <udp_input+0x220>)
 8016db0:	4820      	ldr	r0, [pc, #128]	; (8016e34 <udp_input+0x210>)
 8016db2:	f003 f8a1 	bl	8019ef8 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 8016db6:	6878      	ldr	r0, [r7, #4]
 8016db8:	f7fa f9c8 	bl	801114c <pbuf_free>
      goto end;
 8016dbc:	e032      	b.n	8016e24 <udp_input+0x200>
    }

    if (pcb != NULL) {
 8016dbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016dc0:	2b00      	cmp	r3, #0
 8016dc2:	d012      	beq.n	8016dea <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 8016dc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016dc6:	699b      	ldr	r3, [r3, #24]
 8016dc8:	2b00      	cmp	r3, #0
 8016dca:	d00a      	beq.n	8016de2 <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 8016dcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016dce:	699c      	ldr	r4, [r3, #24]
 8016dd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016dd2:	69d8      	ldr	r0, [r3, #28]
 8016dd4:	8a3b      	ldrh	r3, [r7, #16]
 8016dd6:	9300      	str	r3, [sp, #0]
 8016dd8:	4b1b      	ldr	r3, [pc, #108]	; (8016e48 <udp_input+0x224>)
 8016dda:	687a      	ldr	r2, [r7, #4]
 8016ddc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8016dde:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 8016de0:	e021      	b.n	8016e26 <udp_input+0x202>
        pbuf_free(p);
 8016de2:	6878      	ldr	r0, [r7, #4]
 8016de4:	f7fa f9b2 	bl	801114c <pbuf_free>
        goto end;
 8016de8:	e01c      	b.n	8016e24 <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 8016dea:	7cfb      	ldrb	r3, [r7, #19]
 8016dec:	2b00      	cmp	r3, #0
 8016dee:	d112      	bne.n	8016e16 <udp_input+0x1f2>
 8016df0:	4b12      	ldr	r3, [pc, #72]	; (8016e3c <udp_input+0x218>)
 8016df2:	695b      	ldr	r3, [r3, #20]
 8016df4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8016df8:	2be0      	cmp	r3, #224	; 0xe0
 8016dfa:	d00c      	beq.n	8016e16 <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 8016dfc:	4b0f      	ldr	r3, [pc, #60]	; (8016e3c <udp_input+0x218>)
 8016dfe:	899b      	ldrh	r3, [r3, #12]
 8016e00:	3308      	adds	r3, #8
 8016e02:	b29b      	uxth	r3, r3
 8016e04:	b21b      	sxth	r3, r3
 8016e06:	4619      	mov	r1, r3
 8016e08:	6878      	ldr	r0, [r7, #4]
 8016e0a:	f7fa f98c 	bl	8011126 <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 8016e0e:	2103      	movs	r1, #3
 8016e10:	6878      	ldr	r0, [r7, #4]
 8016e12:	f001 f8b7 	bl	8017f84 <icmp_dest_unreach>
      pbuf_free(p);
 8016e16:	6878      	ldr	r0, [r7, #4]
 8016e18:	f7fa f998 	bl	801114c <pbuf_free>
  return;
 8016e1c:	e003      	b.n	8016e26 <udp_input+0x202>
    pbuf_free(p);
 8016e1e:	6878      	ldr	r0, [r7, #4]
 8016e20:	f7fa f994 	bl	801114c <pbuf_free>
  return;
 8016e24:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 8016e26:	372c      	adds	r7, #44	; 0x2c
 8016e28:	46bd      	mov	sp, r7
 8016e2a:	bd90      	pop	{r4, r7, pc}
 8016e2c:	0801ea04 	.word	0x0801ea04
 8016e30:	0801eaa8 	.word	0x0801eaa8
 8016e34:	0801ea58 	.word	0x0801ea58
 8016e38:	0801eac0 	.word	0x0801eac0
 8016e3c:	200007f8 	.word	0x200007f8
 8016e40:	20007130 	.word	0x20007130
 8016e44:	0801eadc 	.word	0x0801eadc
 8016e48:	20000808 	.word	0x20000808

08016e4c <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8016e4c:	b480      	push	{r7}
 8016e4e:	b085      	sub	sp, #20
 8016e50:	af00      	add	r7, sp, #0
 8016e52:	6078      	str	r0, [r7, #4]
 8016e54:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 8016e56:	687b      	ldr	r3, [r7, #4]
 8016e58:	2b00      	cmp	r3, #0
 8016e5a:	d01e      	beq.n	8016e9a <udp_netif_ip_addr_changed+0x4e>
 8016e5c:	687b      	ldr	r3, [r7, #4]
 8016e5e:	681b      	ldr	r3, [r3, #0]
 8016e60:	2b00      	cmp	r3, #0
 8016e62:	d01a      	beq.n	8016e9a <udp_netif_ip_addr_changed+0x4e>
 8016e64:	683b      	ldr	r3, [r7, #0]
 8016e66:	2b00      	cmp	r3, #0
 8016e68:	d017      	beq.n	8016e9a <udp_netif_ip_addr_changed+0x4e>
 8016e6a:	683b      	ldr	r3, [r7, #0]
 8016e6c:	681b      	ldr	r3, [r3, #0]
 8016e6e:	2b00      	cmp	r3, #0
 8016e70:	d013      	beq.n	8016e9a <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8016e72:	4b0d      	ldr	r3, [pc, #52]	; (8016ea8 <udp_netif_ip_addr_changed+0x5c>)
 8016e74:	681b      	ldr	r3, [r3, #0]
 8016e76:	60fb      	str	r3, [r7, #12]
 8016e78:	e00c      	b.n	8016e94 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 8016e7a:	68fb      	ldr	r3, [r7, #12]
 8016e7c:	681a      	ldr	r2, [r3, #0]
 8016e7e:	687b      	ldr	r3, [r7, #4]
 8016e80:	681b      	ldr	r3, [r3, #0]
 8016e82:	429a      	cmp	r2, r3
 8016e84:	d103      	bne.n	8016e8e <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 8016e86:	683b      	ldr	r3, [r7, #0]
 8016e88:	681a      	ldr	r2, [r3, #0]
 8016e8a:	68fb      	ldr	r3, [r7, #12]
 8016e8c:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8016e8e:	68fb      	ldr	r3, [r7, #12]
 8016e90:	68db      	ldr	r3, [r3, #12]
 8016e92:	60fb      	str	r3, [r7, #12]
 8016e94:	68fb      	ldr	r3, [r7, #12]
 8016e96:	2b00      	cmp	r3, #0
 8016e98:	d1ef      	bne.n	8016e7a <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 8016e9a:	bf00      	nop
 8016e9c:	3714      	adds	r7, #20
 8016e9e:	46bd      	mov	sp, r7
 8016ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016ea4:	4770      	bx	lr
 8016ea6:	bf00      	nop
 8016ea8:	20007130 	.word	0x20007130

08016eac <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 8016eac:	b580      	push	{r7, lr}
 8016eae:	b082      	sub	sp, #8
 8016eb0:	af00      	add	r7, sp, #0
 8016eb2:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 8016eb4:	4915      	ldr	r1, [pc, #84]	; (8016f0c <etharp_free_entry+0x60>)
 8016eb6:	687a      	ldr	r2, [r7, #4]
 8016eb8:	4613      	mov	r3, r2
 8016eba:	005b      	lsls	r3, r3, #1
 8016ebc:	4413      	add	r3, r2
 8016ebe:	00db      	lsls	r3, r3, #3
 8016ec0:	440b      	add	r3, r1
 8016ec2:	681b      	ldr	r3, [r3, #0]
 8016ec4:	2b00      	cmp	r3, #0
 8016ec6:	d013      	beq.n	8016ef0 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 8016ec8:	4910      	ldr	r1, [pc, #64]	; (8016f0c <etharp_free_entry+0x60>)
 8016eca:	687a      	ldr	r2, [r7, #4]
 8016ecc:	4613      	mov	r3, r2
 8016ece:	005b      	lsls	r3, r3, #1
 8016ed0:	4413      	add	r3, r2
 8016ed2:	00db      	lsls	r3, r3, #3
 8016ed4:	440b      	add	r3, r1
 8016ed6:	681b      	ldr	r3, [r3, #0]
 8016ed8:	4618      	mov	r0, r3
 8016eda:	f7fa f937 	bl	801114c <pbuf_free>
    arp_table[i].q = NULL;
 8016ede:	490b      	ldr	r1, [pc, #44]	; (8016f0c <etharp_free_entry+0x60>)
 8016ee0:	687a      	ldr	r2, [r7, #4]
 8016ee2:	4613      	mov	r3, r2
 8016ee4:	005b      	lsls	r3, r3, #1
 8016ee6:	4413      	add	r3, r2
 8016ee8:	00db      	lsls	r3, r3, #3
 8016eea:	440b      	add	r3, r1
 8016eec:	2200      	movs	r2, #0
 8016eee:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 8016ef0:	4906      	ldr	r1, [pc, #24]	; (8016f0c <etharp_free_entry+0x60>)
 8016ef2:	687a      	ldr	r2, [r7, #4]
 8016ef4:	4613      	mov	r3, r2
 8016ef6:	005b      	lsls	r3, r3, #1
 8016ef8:	4413      	add	r3, r2
 8016efa:	00db      	lsls	r3, r3, #3
 8016efc:	440b      	add	r3, r1
 8016efe:	3314      	adds	r3, #20
 8016f00:	2200      	movs	r2, #0
 8016f02:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 8016f04:	bf00      	nop
 8016f06:	3708      	adds	r7, #8
 8016f08:	46bd      	mov	sp, r7
 8016f0a:	bd80      	pop	{r7, pc}
 8016f0c:	20007134 	.word	0x20007134

08016f10 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 8016f10:	b580      	push	{r7, lr}
 8016f12:	b082      	sub	sp, #8
 8016f14:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8016f16:	2300      	movs	r3, #0
 8016f18:	607b      	str	r3, [r7, #4]
 8016f1a:	e096      	b.n	801704a <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 8016f1c:	494f      	ldr	r1, [pc, #316]	; (801705c <etharp_tmr+0x14c>)
 8016f1e:	687a      	ldr	r2, [r7, #4]
 8016f20:	4613      	mov	r3, r2
 8016f22:	005b      	lsls	r3, r3, #1
 8016f24:	4413      	add	r3, r2
 8016f26:	00db      	lsls	r3, r3, #3
 8016f28:	440b      	add	r3, r1
 8016f2a:	3314      	adds	r3, #20
 8016f2c:	781b      	ldrb	r3, [r3, #0]
 8016f2e:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 8016f30:	78fb      	ldrb	r3, [r7, #3]
 8016f32:	2b00      	cmp	r3, #0
 8016f34:	f000 8086 	beq.w	8017044 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 8016f38:	4948      	ldr	r1, [pc, #288]	; (801705c <etharp_tmr+0x14c>)
 8016f3a:	687a      	ldr	r2, [r7, #4]
 8016f3c:	4613      	mov	r3, r2
 8016f3e:	005b      	lsls	r3, r3, #1
 8016f40:	4413      	add	r3, r2
 8016f42:	00db      	lsls	r3, r3, #3
 8016f44:	440b      	add	r3, r1
 8016f46:	3312      	adds	r3, #18
 8016f48:	881b      	ldrh	r3, [r3, #0]
 8016f4a:	3301      	adds	r3, #1
 8016f4c:	b298      	uxth	r0, r3
 8016f4e:	4943      	ldr	r1, [pc, #268]	; (801705c <etharp_tmr+0x14c>)
 8016f50:	687a      	ldr	r2, [r7, #4]
 8016f52:	4613      	mov	r3, r2
 8016f54:	005b      	lsls	r3, r3, #1
 8016f56:	4413      	add	r3, r2
 8016f58:	00db      	lsls	r3, r3, #3
 8016f5a:	440b      	add	r3, r1
 8016f5c:	3312      	adds	r3, #18
 8016f5e:	4602      	mov	r2, r0
 8016f60:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8016f62:	493e      	ldr	r1, [pc, #248]	; (801705c <etharp_tmr+0x14c>)
 8016f64:	687a      	ldr	r2, [r7, #4]
 8016f66:	4613      	mov	r3, r2
 8016f68:	005b      	lsls	r3, r3, #1
 8016f6a:	4413      	add	r3, r2
 8016f6c:	00db      	lsls	r3, r3, #3
 8016f6e:	440b      	add	r3, r1
 8016f70:	3312      	adds	r3, #18
 8016f72:	881b      	ldrh	r3, [r3, #0]
 8016f74:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8016f78:	d215      	bcs.n	8016fa6 <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8016f7a:	4938      	ldr	r1, [pc, #224]	; (801705c <etharp_tmr+0x14c>)
 8016f7c:	687a      	ldr	r2, [r7, #4]
 8016f7e:	4613      	mov	r3, r2
 8016f80:	005b      	lsls	r3, r3, #1
 8016f82:	4413      	add	r3, r2
 8016f84:	00db      	lsls	r3, r3, #3
 8016f86:	440b      	add	r3, r1
 8016f88:	3314      	adds	r3, #20
 8016f8a:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8016f8c:	2b01      	cmp	r3, #1
 8016f8e:	d10e      	bne.n	8016fae <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 8016f90:	4932      	ldr	r1, [pc, #200]	; (801705c <etharp_tmr+0x14c>)
 8016f92:	687a      	ldr	r2, [r7, #4]
 8016f94:	4613      	mov	r3, r2
 8016f96:	005b      	lsls	r3, r3, #1
 8016f98:	4413      	add	r3, r2
 8016f9a:	00db      	lsls	r3, r3, #3
 8016f9c:	440b      	add	r3, r1
 8016f9e:	3312      	adds	r3, #18
 8016fa0:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8016fa2:	2b04      	cmp	r3, #4
 8016fa4:	d903      	bls.n	8016fae <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 8016fa6:	6878      	ldr	r0, [r7, #4]
 8016fa8:	f7ff ff80 	bl	8016eac <etharp_free_entry>
 8016fac:	e04a      	b.n	8017044 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 8016fae:	492b      	ldr	r1, [pc, #172]	; (801705c <etharp_tmr+0x14c>)
 8016fb0:	687a      	ldr	r2, [r7, #4]
 8016fb2:	4613      	mov	r3, r2
 8016fb4:	005b      	lsls	r3, r3, #1
 8016fb6:	4413      	add	r3, r2
 8016fb8:	00db      	lsls	r3, r3, #3
 8016fba:	440b      	add	r3, r1
 8016fbc:	3314      	adds	r3, #20
 8016fbe:	781b      	ldrb	r3, [r3, #0]
 8016fc0:	2b03      	cmp	r3, #3
 8016fc2:	d10a      	bne.n	8016fda <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 8016fc4:	4925      	ldr	r1, [pc, #148]	; (801705c <etharp_tmr+0x14c>)
 8016fc6:	687a      	ldr	r2, [r7, #4]
 8016fc8:	4613      	mov	r3, r2
 8016fca:	005b      	lsls	r3, r3, #1
 8016fcc:	4413      	add	r3, r2
 8016fce:	00db      	lsls	r3, r3, #3
 8016fd0:	440b      	add	r3, r1
 8016fd2:	3314      	adds	r3, #20
 8016fd4:	2204      	movs	r2, #4
 8016fd6:	701a      	strb	r2, [r3, #0]
 8016fd8:	e034      	b.n	8017044 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 8016fda:	4920      	ldr	r1, [pc, #128]	; (801705c <etharp_tmr+0x14c>)
 8016fdc:	687a      	ldr	r2, [r7, #4]
 8016fde:	4613      	mov	r3, r2
 8016fe0:	005b      	lsls	r3, r3, #1
 8016fe2:	4413      	add	r3, r2
 8016fe4:	00db      	lsls	r3, r3, #3
 8016fe6:	440b      	add	r3, r1
 8016fe8:	3314      	adds	r3, #20
 8016fea:	781b      	ldrb	r3, [r3, #0]
 8016fec:	2b04      	cmp	r3, #4
 8016fee:	d10a      	bne.n	8017006 <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 8016ff0:	491a      	ldr	r1, [pc, #104]	; (801705c <etharp_tmr+0x14c>)
 8016ff2:	687a      	ldr	r2, [r7, #4]
 8016ff4:	4613      	mov	r3, r2
 8016ff6:	005b      	lsls	r3, r3, #1
 8016ff8:	4413      	add	r3, r2
 8016ffa:	00db      	lsls	r3, r3, #3
 8016ffc:	440b      	add	r3, r1
 8016ffe:	3314      	adds	r3, #20
 8017000:	2202      	movs	r2, #2
 8017002:	701a      	strb	r2, [r3, #0]
 8017004:	e01e      	b.n	8017044 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8017006:	4915      	ldr	r1, [pc, #84]	; (801705c <etharp_tmr+0x14c>)
 8017008:	687a      	ldr	r2, [r7, #4]
 801700a:	4613      	mov	r3, r2
 801700c:	005b      	lsls	r3, r3, #1
 801700e:	4413      	add	r3, r2
 8017010:	00db      	lsls	r3, r3, #3
 8017012:	440b      	add	r3, r1
 8017014:	3314      	adds	r3, #20
 8017016:	781b      	ldrb	r3, [r3, #0]
 8017018:	2b01      	cmp	r3, #1
 801701a:	d113      	bne.n	8017044 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 801701c:	490f      	ldr	r1, [pc, #60]	; (801705c <etharp_tmr+0x14c>)
 801701e:	687a      	ldr	r2, [r7, #4]
 8017020:	4613      	mov	r3, r2
 8017022:	005b      	lsls	r3, r3, #1
 8017024:	4413      	add	r3, r2
 8017026:	00db      	lsls	r3, r3, #3
 8017028:	440b      	add	r3, r1
 801702a:	3308      	adds	r3, #8
 801702c:	6818      	ldr	r0, [r3, #0]
 801702e:	687a      	ldr	r2, [r7, #4]
 8017030:	4613      	mov	r3, r2
 8017032:	005b      	lsls	r3, r3, #1
 8017034:	4413      	add	r3, r2
 8017036:	00db      	lsls	r3, r3, #3
 8017038:	4a08      	ldr	r2, [pc, #32]	; (801705c <etharp_tmr+0x14c>)
 801703a:	4413      	add	r3, r2
 801703c:	3304      	adds	r3, #4
 801703e:	4619      	mov	r1, r3
 8017040:	f000 fe6e 	bl	8017d20 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8017044:	687b      	ldr	r3, [r7, #4]
 8017046:	3301      	adds	r3, #1
 8017048:	607b      	str	r3, [r7, #4]
 801704a:	687b      	ldr	r3, [r7, #4]
 801704c:	2b09      	cmp	r3, #9
 801704e:	f77f af65 	ble.w	8016f1c <etharp_tmr+0xc>
      }
    }
  }
}
 8017052:	bf00      	nop
 8017054:	bf00      	nop
 8017056:	3708      	adds	r7, #8
 8017058:	46bd      	mov	sp, r7
 801705a:	bd80      	pop	{r7, pc}
 801705c:	20007134 	.word	0x20007134

08017060 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 8017060:	b580      	push	{r7, lr}
 8017062:	b08a      	sub	sp, #40	; 0x28
 8017064:	af00      	add	r7, sp, #0
 8017066:	60f8      	str	r0, [r7, #12]
 8017068:	460b      	mov	r3, r1
 801706a:	607a      	str	r2, [r7, #4]
 801706c:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 801706e:	230a      	movs	r3, #10
 8017070:	84fb      	strh	r3, [r7, #38]	; 0x26
 8017072:	230a      	movs	r3, #10
 8017074:	84bb      	strh	r3, [r7, #36]	; 0x24
  s16_t empty = ARP_TABLE_SIZE;
 8017076:	230a      	movs	r3, #10
 8017078:	847b      	strh	r3, [r7, #34]	; 0x22
  s16_t i = 0;
 801707a:	2300      	movs	r3, #0
 801707c:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 801707e:	230a      	movs	r3, #10
 8017080:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 8017082:	2300      	movs	r3, #0
 8017084:	83bb      	strh	r3, [r7, #28]
 8017086:	2300      	movs	r3, #0
 8017088:	837b      	strh	r3, [r7, #26]
 801708a:	2300      	movs	r3, #0
 801708c:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801708e:	2300      	movs	r3, #0
 8017090:	843b      	strh	r3, [r7, #32]
 8017092:	e0ae      	b.n	80171f2 <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 8017094:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8017098:	49a6      	ldr	r1, [pc, #664]	; (8017334 <etharp_find_entry+0x2d4>)
 801709a:	4613      	mov	r3, r2
 801709c:	005b      	lsls	r3, r3, #1
 801709e:	4413      	add	r3, r2
 80170a0:	00db      	lsls	r3, r3, #3
 80170a2:	440b      	add	r3, r1
 80170a4:	3314      	adds	r3, #20
 80170a6:	781b      	ldrb	r3, [r3, #0]
 80170a8:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 80170aa:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 80170ae:	2b0a      	cmp	r3, #10
 80170b0:	d105      	bne.n	80170be <etharp_find_entry+0x5e>
 80170b2:	7dfb      	ldrb	r3, [r7, #23]
 80170b4:	2b00      	cmp	r3, #0
 80170b6:	d102      	bne.n	80170be <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 80170b8:	8c3b      	ldrh	r3, [r7, #32]
 80170ba:	847b      	strh	r3, [r7, #34]	; 0x22
 80170bc:	e095      	b.n	80171ea <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 80170be:	7dfb      	ldrb	r3, [r7, #23]
 80170c0:	2b00      	cmp	r3, #0
 80170c2:	f000 8092 	beq.w	80171ea <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 80170c6:	7dfb      	ldrb	r3, [r7, #23]
 80170c8:	2b01      	cmp	r3, #1
 80170ca:	d009      	beq.n	80170e0 <etharp_find_entry+0x80>
 80170cc:	7dfb      	ldrb	r3, [r7, #23]
 80170ce:	2b01      	cmp	r3, #1
 80170d0:	d806      	bhi.n	80170e0 <etharp_find_entry+0x80>
 80170d2:	4b99      	ldr	r3, [pc, #612]	; (8017338 <etharp_find_entry+0x2d8>)
 80170d4:	f240 1223 	movw	r2, #291	; 0x123
 80170d8:	4998      	ldr	r1, [pc, #608]	; (801733c <etharp_find_entry+0x2dc>)
 80170da:	4899      	ldr	r0, [pc, #612]	; (8017340 <etharp_find_entry+0x2e0>)
 80170dc:	f002 ff0c 	bl	8019ef8 <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 80170e0:	68fb      	ldr	r3, [r7, #12]
 80170e2:	2b00      	cmp	r3, #0
 80170e4:	d020      	beq.n	8017128 <etharp_find_entry+0xc8>
 80170e6:	68fb      	ldr	r3, [r7, #12]
 80170e8:	6819      	ldr	r1, [r3, #0]
 80170ea:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80170ee:	4891      	ldr	r0, [pc, #580]	; (8017334 <etharp_find_entry+0x2d4>)
 80170f0:	4613      	mov	r3, r2
 80170f2:	005b      	lsls	r3, r3, #1
 80170f4:	4413      	add	r3, r2
 80170f6:	00db      	lsls	r3, r3, #3
 80170f8:	4403      	add	r3, r0
 80170fa:	3304      	adds	r3, #4
 80170fc:	681b      	ldr	r3, [r3, #0]
 80170fe:	4299      	cmp	r1, r3
 8017100:	d112      	bne.n	8017128 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 8017102:	687b      	ldr	r3, [r7, #4]
 8017104:	2b00      	cmp	r3, #0
 8017106:	d00c      	beq.n	8017122 <etharp_find_entry+0xc2>
 8017108:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801710c:	4989      	ldr	r1, [pc, #548]	; (8017334 <etharp_find_entry+0x2d4>)
 801710e:	4613      	mov	r3, r2
 8017110:	005b      	lsls	r3, r3, #1
 8017112:	4413      	add	r3, r2
 8017114:	00db      	lsls	r3, r3, #3
 8017116:	440b      	add	r3, r1
 8017118:	3308      	adds	r3, #8
 801711a:	681b      	ldr	r3, [r3, #0]
 801711c:	687a      	ldr	r2, [r7, #4]
 801711e:	429a      	cmp	r2, r3
 8017120:	d102      	bne.n	8017128 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 8017122:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8017126:	e100      	b.n	801732a <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 8017128:	7dfb      	ldrb	r3, [r7, #23]
 801712a:	2b01      	cmp	r3, #1
 801712c:	d140      	bne.n	80171b0 <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 801712e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8017132:	4980      	ldr	r1, [pc, #512]	; (8017334 <etharp_find_entry+0x2d4>)
 8017134:	4613      	mov	r3, r2
 8017136:	005b      	lsls	r3, r3, #1
 8017138:	4413      	add	r3, r2
 801713a:	00db      	lsls	r3, r3, #3
 801713c:	440b      	add	r3, r1
 801713e:	681b      	ldr	r3, [r3, #0]
 8017140:	2b00      	cmp	r3, #0
 8017142:	d01a      	beq.n	801717a <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 8017144:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8017148:	497a      	ldr	r1, [pc, #488]	; (8017334 <etharp_find_entry+0x2d4>)
 801714a:	4613      	mov	r3, r2
 801714c:	005b      	lsls	r3, r3, #1
 801714e:	4413      	add	r3, r2
 8017150:	00db      	lsls	r3, r3, #3
 8017152:	440b      	add	r3, r1
 8017154:	3312      	adds	r3, #18
 8017156:	881b      	ldrh	r3, [r3, #0]
 8017158:	8bba      	ldrh	r2, [r7, #28]
 801715a:	429a      	cmp	r2, r3
 801715c:	d845      	bhi.n	80171ea <etharp_find_entry+0x18a>
            old_queue = i;
 801715e:	8c3b      	ldrh	r3, [r7, #32]
 8017160:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 8017162:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8017166:	4973      	ldr	r1, [pc, #460]	; (8017334 <etharp_find_entry+0x2d4>)
 8017168:	4613      	mov	r3, r2
 801716a:	005b      	lsls	r3, r3, #1
 801716c:	4413      	add	r3, r2
 801716e:	00db      	lsls	r3, r3, #3
 8017170:	440b      	add	r3, r1
 8017172:	3312      	adds	r3, #18
 8017174:	881b      	ldrh	r3, [r3, #0]
 8017176:	83bb      	strh	r3, [r7, #28]
 8017178:	e037      	b.n	80171ea <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 801717a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801717e:	496d      	ldr	r1, [pc, #436]	; (8017334 <etharp_find_entry+0x2d4>)
 8017180:	4613      	mov	r3, r2
 8017182:	005b      	lsls	r3, r3, #1
 8017184:	4413      	add	r3, r2
 8017186:	00db      	lsls	r3, r3, #3
 8017188:	440b      	add	r3, r1
 801718a:	3312      	adds	r3, #18
 801718c:	881b      	ldrh	r3, [r3, #0]
 801718e:	8b7a      	ldrh	r2, [r7, #26]
 8017190:	429a      	cmp	r2, r3
 8017192:	d82a      	bhi.n	80171ea <etharp_find_entry+0x18a>
            old_pending = i;
 8017194:	8c3b      	ldrh	r3, [r7, #32]
 8017196:	84fb      	strh	r3, [r7, #38]	; 0x26
            age_pending = arp_table[i].ctime;
 8017198:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801719c:	4965      	ldr	r1, [pc, #404]	; (8017334 <etharp_find_entry+0x2d4>)
 801719e:	4613      	mov	r3, r2
 80171a0:	005b      	lsls	r3, r3, #1
 80171a2:	4413      	add	r3, r2
 80171a4:	00db      	lsls	r3, r3, #3
 80171a6:	440b      	add	r3, r1
 80171a8:	3312      	adds	r3, #18
 80171aa:	881b      	ldrh	r3, [r3, #0]
 80171ac:	837b      	strh	r3, [r7, #26]
 80171ae:	e01c      	b.n	80171ea <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 80171b0:	7dfb      	ldrb	r3, [r7, #23]
 80171b2:	2b01      	cmp	r3, #1
 80171b4:	d919      	bls.n	80171ea <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 80171b6:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80171ba:	495e      	ldr	r1, [pc, #376]	; (8017334 <etharp_find_entry+0x2d4>)
 80171bc:	4613      	mov	r3, r2
 80171be:	005b      	lsls	r3, r3, #1
 80171c0:	4413      	add	r3, r2
 80171c2:	00db      	lsls	r3, r3, #3
 80171c4:	440b      	add	r3, r1
 80171c6:	3312      	adds	r3, #18
 80171c8:	881b      	ldrh	r3, [r3, #0]
 80171ca:	8b3a      	ldrh	r2, [r7, #24]
 80171cc:	429a      	cmp	r2, r3
 80171ce:	d80c      	bhi.n	80171ea <etharp_find_entry+0x18a>
            old_stable = i;
 80171d0:	8c3b      	ldrh	r3, [r7, #32]
 80171d2:	84bb      	strh	r3, [r7, #36]	; 0x24
            age_stable = arp_table[i].ctime;
 80171d4:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80171d8:	4956      	ldr	r1, [pc, #344]	; (8017334 <etharp_find_entry+0x2d4>)
 80171da:	4613      	mov	r3, r2
 80171dc:	005b      	lsls	r3, r3, #1
 80171de:	4413      	add	r3, r2
 80171e0:	00db      	lsls	r3, r3, #3
 80171e2:	440b      	add	r3, r1
 80171e4:	3312      	adds	r3, #18
 80171e6:	881b      	ldrh	r3, [r3, #0]
 80171e8:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80171ea:	8c3b      	ldrh	r3, [r7, #32]
 80171ec:	3301      	adds	r3, #1
 80171ee:	b29b      	uxth	r3, r3
 80171f0:	843b      	strh	r3, [r7, #32]
 80171f2:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80171f6:	2b09      	cmp	r3, #9
 80171f8:	f77f af4c 	ble.w	8017094 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 80171fc:	7afb      	ldrb	r3, [r7, #11]
 80171fe:	f003 0302 	and.w	r3, r3, #2
 8017202:	2b00      	cmp	r3, #0
 8017204:	d108      	bne.n	8017218 <etharp_find_entry+0x1b8>
 8017206:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 801720a:	2b0a      	cmp	r3, #10
 801720c:	d107      	bne.n	801721e <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 801720e:	7afb      	ldrb	r3, [r7, #11]
 8017210:	f003 0301 	and.w	r3, r3, #1
 8017214:	2b00      	cmp	r3, #0
 8017216:	d102      	bne.n	801721e <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 8017218:	f04f 33ff 	mov.w	r3, #4294967295
 801721c:	e085      	b.n	801732a <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 801721e:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8017222:	2b09      	cmp	r3, #9
 8017224:	dc02      	bgt.n	801722c <etharp_find_entry+0x1cc>
    i = empty;
 8017226:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8017228:	843b      	strh	r3, [r7, #32]
 801722a:	e039      	b.n	80172a0 <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 801722c:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8017230:	2b09      	cmp	r3, #9
 8017232:	dc14      	bgt.n	801725e <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 8017234:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8017236:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 8017238:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801723c:	493d      	ldr	r1, [pc, #244]	; (8017334 <etharp_find_entry+0x2d4>)
 801723e:	4613      	mov	r3, r2
 8017240:	005b      	lsls	r3, r3, #1
 8017242:	4413      	add	r3, r2
 8017244:	00db      	lsls	r3, r3, #3
 8017246:	440b      	add	r3, r1
 8017248:	681b      	ldr	r3, [r3, #0]
 801724a:	2b00      	cmp	r3, #0
 801724c:	d018      	beq.n	8017280 <etharp_find_entry+0x220>
 801724e:	4b3a      	ldr	r3, [pc, #232]	; (8017338 <etharp_find_entry+0x2d8>)
 8017250:	f240 126d 	movw	r2, #365	; 0x16d
 8017254:	493b      	ldr	r1, [pc, #236]	; (8017344 <etharp_find_entry+0x2e4>)
 8017256:	483a      	ldr	r0, [pc, #232]	; (8017340 <etharp_find_entry+0x2e0>)
 8017258:	f002 fe4e 	bl	8019ef8 <iprintf>
 801725c:	e010      	b.n	8017280 <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 801725e:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8017262:	2b09      	cmp	r3, #9
 8017264:	dc02      	bgt.n	801726c <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 8017266:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8017268:	843b      	strh	r3, [r7, #32]
 801726a:	e009      	b.n	8017280 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 801726c:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8017270:	2b09      	cmp	r3, #9
 8017272:	dc02      	bgt.n	801727a <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 8017274:	8bfb      	ldrh	r3, [r7, #30]
 8017276:	843b      	strh	r3, [r7, #32]
 8017278:	e002      	b.n	8017280 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 801727a:	f04f 33ff 	mov.w	r3, #4294967295
 801727e:	e054      	b.n	801732a <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8017280:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8017284:	2b09      	cmp	r3, #9
 8017286:	dd06      	ble.n	8017296 <etharp_find_entry+0x236>
 8017288:	4b2b      	ldr	r3, [pc, #172]	; (8017338 <etharp_find_entry+0x2d8>)
 801728a:	f240 127f 	movw	r2, #383	; 0x17f
 801728e:	492e      	ldr	r1, [pc, #184]	; (8017348 <etharp_find_entry+0x2e8>)
 8017290:	482b      	ldr	r0, [pc, #172]	; (8017340 <etharp_find_entry+0x2e0>)
 8017292:	f002 fe31 	bl	8019ef8 <iprintf>
    etharp_free_entry(i);
 8017296:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801729a:	4618      	mov	r0, r3
 801729c:	f7ff fe06 	bl	8016eac <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 80172a0:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80172a4:	2b09      	cmp	r3, #9
 80172a6:	dd06      	ble.n	80172b6 <etharp_find_entry+0x256>
 80172a8:	4b23      	ldr	r3, [pc, #140]	; (8017338 <etharp_find_entry+0x2d8>)
 80172aa:	f240 1283 	movw	r2, #387	; 0x183
 80172ae:	4926      	ldr	r1, [pc, #152]	; (8017348 <etharp_find_entry+0x2e8>)
 80172b0:	4823      	ldr	r0, [pc, #140]	; (8017340 <etharp_find_entry+0x2e0>)
 80172b2:	f002 fe21 	bl	8019ef8 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 80172b6:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80172ba:	491e      	ldr	r1, [pc, #120]	; (8017334 <etharp_find_entry+0x2d4>)
 80172bc:	4613      	mov	r3, r2
 80172be:	005b      	lsls	r3, r3, #1
 80172c0:	4413      	add	r3, r2
 80172c2:	00db      	lsls	r3, r3, #3
 80172c4:	440b      	add	r3, r1
 80172c6:	3314      	adds	r3, #20
 80172c8:	781b      	ldrb	r3, [r3, #0]
 80172ca:	2b00      	cmp	r3, #0
 80172cc:	d006      	beq.n	80172dc <etharp_find_entry+0x27c>
 80172ce:	4b1a      	ldr	r3, [pc, #104]	; (8017338 <etharp_find_entry+0x2d8>)
 80172d0:	f44f 72c2 	mov.w	r2, #388	; 0x184
 80172d4:	491d      	ldr	r1, [pc, #116]	; (801734c <etharp_find_entry+0x2ec>)
 80172d6:	481a      	ldr	r0, [pc, #104]	; (8017340 <etharp_find_entry+0x2e0>)
 80172d8:	f002 fe0e 	bl	8019ef8 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 80172dc:	68fb      	ldr	r3, [r7, #12]
 80172de:	2b00      	cmp	r3, #0
 80172e0:	d00b      	beq.n	80172fa <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 80172e2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80172e6:	68fb      	ldr	r3, [r7, #12]
 80172e8:	6819      	ldr	r1, [r3, #0]
 80172ea:	4812      	ldr	r0, [pc, #72]	; (8017334 <etharp_find_entry+0x2d4>)
 80172ec:	4613      	mov	r3, r2
 80172ee:	005b      	lsls	r3, r3, #1
 80172f0:	4413      	add	r3, r2
 80172f2:	00db      	lsls	r3, r3, #3
 80172f4:	4403      	add	r3, r0
 80172f6:	3304      	adds	r3, #4
 80172f8:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 80172fa:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80172fe:	490d      	ldr	r1, [pc, #52]	; (8017334 <etharp_find_entry+0x2d4>)
 8017300:	4613      	mov	r3, r2
 8017302:	005b      	lsls	r3, r3, #1
 8017304:	4413      	add	r3, r2
 8017306:	00db      	lsls	r3, r3, #3
 8017308:	440b      	add	r3, r1
 801730a:	3312      	adds	r3, #18
 801730c:	2200      	movs	r2, #0
 801730e:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 8017310:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8017314:	4907      	ldr	r1, [pc, #28]	; (8017334 <etharp_find_entry+0x2d4>)
 8017316:	4613      	mov	r3, r2
 8017318:	005b      	lsls	r3, r3, #1
 801731a:	4413      	add	r3, r2
 801731c:	00db      	lsls	r3, r3, #3
 801731e:	440b      	add	r3, r1
 8017320:	3308      	adds	r3, #8
 8017322:	687a      	ldr	r2, [r7, #4]
 8017324:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 8017326:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 801732a:	4618      	mov	r0, r3
 801732c:	3728      	adds	r7, #40	; 0x28
 801732e:	46bd      	mov	sp, r7
 8017330:	bd80      	pop	{r7, pc}
 8017332:	bf00      	nop
 8017334:	20007134 	.word	0x20007134
 8017338:	0801ed68 	.word	0x0801ed68
 801733c:	0801eda0 	.word	0x0801eda0
 8017340:	0801ede0 	.word	0x0801ede0
 8017344:	0801ee08 	.word	0x0801ee08
 8017348:	0801ee20 	.word	0x0801ee20
 801734c:	0801ee34 	.word	0x0801ee34

08017350 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 8017350:	b580      	push	{r7, lr}
 8017352:	b088      	sub	sp, #32
 8017354:	af02      	add	r7, sp, #8
 8017356:	60f8      	str	r0, [r7, #12]
 8017358:	60b9      	str	r1, [r7, #8]
 801735a:	607a      	str	r2, [r7, #4]
 801735c:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 801735e:	68fb      	ldr	r3, [r7, #12]
 8017360:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8017364:	2b06      	cmp	r3, #6
 8017366:	d006      	beq.n	8017376 <etharp_update_arp_entry+0x26>
 8017368:	4b48      	ldr	r3, [pc, #288]	; (801748c <etharp_update_arp_entry+0x13c>)
 801736a:	f240 12a9 	movw	r2, #425	; 0x1a9
 801736e:	4948      	ldr	r1, [pc, #288]	; (8017490 <etharp_update_arp_entry+0x140>)
 8017370:	4848      	ldr	r0, [pc, #288]	; (8017494 <etharp_update_arp_entry+0x144>)
 8017372:	f002 fdc1 	bl	8019ef8 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 8017376:	68bb      	ldr	r3, [r7, #8]
 8017378:	2b00      	cmp	r3, #0
 801737a:	d012      	beq.n	80173a2 <etharp_update_arp_entry+0x52>
 801737c:	68bb      	ldr	r3, [r7, #8]
 801737e:	681b      	ldr	r3, [r3, #0]
 8017380:	2b00      	cmp	r3, #0
 8017382:	d00e      	beq.n	80173a2 <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8017384:	68bb      	ldr	r3, [r7, #8]
 8017386:	681b      	ldr	r3, [r3, #0]
 8017388:	68f9      	ldr	r1, [r7, #12]
 801738a:	4618      	mov	r0, r3
 801738c:	f001 f924 	bl	80185d8 <ip4_addr_isbroadcast_u32>
 8017390:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 8017392:	2b00      	cmp	r3, #0
 8017394:	d105      	bne.n	80173a2 <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 8017396:	68bb      	ldr	r3, [r7, #8]
 8017398:	681b      	ldr	r3, [r3, #0]
 801739a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 801739e:	2be0      	cmp	r3, #224	; 0xe0
 80173a0:	d102      	bne.n	80173a8 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 80173a2:	f06f 030f 	mvn.w	r3, #15
 80173a6:	e06c      	b.n	8017482 <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 80173a8:	78fb      	ldrb	r3, [r7, #3]
 80173aa:	68fa      	ldr	r2, [r7, #12]
 80173ac:	4619      	mov	r1, r3
 80173ae:	68b8      	ldr	r0, [r7, #8]
 80173b0:	f7ff fe56 	bl	8017060 <etharp_find_entry>
 80173b4:	4603      	mov	r3, r0
 80173b6:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 80173b8:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80173bc:	2b00      	cmp	r3, #0
 80173be:	da02      	bge.n	80173c6 <etharp_update_arp_entry+0x76>
    return (err_t)i;
 80173c0:	8afb      	ldrh	r3, [r7, #22]
 80173c2:	b25b      	sxtb	r3, r3
 80173c4:	e05d      	b.n	8017482 <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 80173c6:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80173ca:	4933      	ldr	r1, [pc, #204]	; (8017498 <etharp_update_arp_entry+0x148>)
 80173cc:	4613      	mov	r3, r2
 80173ce:	005b      	lsls	r3, r3, #1
 80173d0:	4413      	add	r3, r2
 80173d2:	00db      	lsls	r3, r3, #3
 80173d4:	440b      	add	r3, r1
 80173d6:	3314      	adds	r3, #20
 80173d8:	2202      	movs	r2, #2
 80173da:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 80173dc:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80173e0:	492d      	ldr	r1, [pc, #180]	; (8017498 <etharp_update_arp_entry+0x148>)
 80173e2:	4613      	mov	r3, r2
 80173e4:	005b      	lsls	r3, r3, #1
 80173e6:	4413      	add	r3, r2
 80173e8:	00db      	lsls	r3, r3, #3
 80173ea:	440b      	add	r3, r1
 80173ec:	3308      	adds	r3, #8
 80173ee:	68fa      	ldr	r2, [r7, #12]
 80173f0:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 80173f2:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80173f6:	4613      	mov	r3, r2
 80173f8:	005b      	lsls	r3, r3, #1
 80173fa:	4413      	add	r3, r2
 80173fc:	00db      	lsls	r3, r3, #3
 80173fe:	3308      	adds	r3, #8
 8017400:	4a25      	ldr	r2, [pc, #148]	; (8017498 <etharp_update_arp_entry+0x148>)
 8017402:	4413      	add	r3, r2
 8017404:	3304      	adds	r3, #4
 8017406:	2206      	movs	r2, #6
 8017408:	6879      	ldr	r1, [r7, #4]
 801740a:	4618      	mov	r0, r3
 801740c:	f002 ff43 	bl	801a296 <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 8017410:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8017414:	4920      	ldr	r1, [pc, #128]	; (8017498 <etharp_update_arp_entry+0x148>)
 8017416:	4613      	mov	r3, r2
 8017418:	005b      	lsls	r3, r3, #1
 801741a:	4413      	add	r3, r2
 801741c:	00db      	lsls	r3, r3, #3
 801741e:	440b      	add	r3, r1
 8017420:	3312      	adds	r3, #18
 8017422:	2200      	movs	r2, #0
 8017424:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 8017426:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801742a:	491b      	ldr	r1, [pc, #108]	; (8017498 <etharp_update_arp_entry+0x148>)
 801742c:	4613      	mov	r3, r2
 801742e:	005b      	lsls	r3, r3, #1
 8017430:	4413      	add	r3, r2
 8017432:	00db      	lsls	r3, r3, #3
 8017434:	440b      	add	r3, r1
 8017436:	681b      	ldr	r3, [r3, #0]
 8017438:	2b00      	cmp	r3, #0
 801743a:	d021      	beq.n	8017480 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 801743c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8017440:	4915      	ldr	r1, [pc, #84]	; (8017498 <etharp_update_arp_entry+0x148>)
 8017442:	4613      	mov	r3, r2
 8017444:	005b      	lsls	r3, r3, #1
 8017446:	4413      	add	r3, r2
 8017448:	00db      	lsls	r3, r3, #3
 801744a:	440b      	add	r3, r1
 801744c:	681b      	ldr	r3, [r3, #0]
 801744e:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 8017450:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8017454:	4910      	ldr	r1, [pc, #64]	; (8017498 <etharp_update_arp_entry+0x148>)
 8017456:	4613      	mov	r3, r2
 8017458:	005b      	lsls	r3, r3, #1
 801745a:	4413      	add	r3, r2
 801745c:	00db      	lsls	r3, r3, #3
 801745e:	440b      	add	r3, r1
 8017460:	2200      	movs	r2, #0
 8017462:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 8017464:	68fb      	ldr	r3, [r7, #12]
 8017466:	f103 0226 	add.w	r2, r3, #38	; 0x26
 801746a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 801746e:	9300      	str	r3, [sp, #0]
 8017470:	687b      	ldr	r3, [r7, #4]
 8017472:	6939      	ldr	r1, [r7, #16]
 8017474:	68f8      	ldr	r0, [r7, #12]
 8017476:	f001 ffbd 	bl	80193f4 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 801747a:	6938      	ldr	r0, [r7, #16]
 801747c:	f7f9 fe66 	bl	801114c <pbuf_free>
  }
  return ERR_OK;
 8017480:	2300      	movs	r3, #0
}
 8017482:	4618      	mov	r0, r3
 8017484:	3718      	adds	r7, #24
 8017486:	46bd      	mov	sp, r7
 8017488:	bd80      	pop	{r7, pc}
 801748a:	bf00      	nop
 801748c:	0801ed68 	.word	0x0801ed68
 8017490:	0801ee60 	.word	0x0801ee60
 8017494:	0801ede0 	.word	0x0801ede0
 8017498:	20007134 	.word	0x20007134

0801749c <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 801749c:	b580      	push	{r7, lr}
 801749e:	b084      	sub	sp, #16
 80174a0:	af00      	add	r7, sp, #0
 80174a2:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80174a4:	2300      	movs	r3, #0
 80174a6:	60fb      	str	r3, [r7, #12]
 80174a8:	e01e      	b.n	80174e8 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 80174aa:	4913      	ldr	r1, [pc, #76]	; (80174f8 <etharp_cleanup_netif+0x5c>)
 80174ac:	68fa      	ldr	r2, [r7, #12]
 80174ae:	4613      	mov	r3, r2
 80174b0:	005b      	lsls	r3, r3, #1
 80174b2:	4413      	add	r3, r2
 80174b4:	00db      	lsls	r3, r3, #3
 80174b6:	440b      	add	r3, r1
 80174b8:	3314      	adds	r3, #20
 80174ba:	781b      	ldrb	r3, [r3, #0]
 80174bc:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 80174be:	7afb      	ldrb	r3, [r7, #11]
 80174c0:	2b00      	cmp	r3, #0
 80174c2:	d00e      	beq.n	80174e2 <etharp_cleanup_netif+0x46>
 80174c4:	490c      	ldr	r1, [pc, #48]	; (80174f8 <etharp_cleanup_netif+0x5c>)
 80174c6:	68fa      	ldr	r2, [r7, #12]
 80174c8:	4613      	mov	r3, r2
 80174ca:	005b      	lsls	r3, r3, #1
 80174cc:	4413      	add	r3, r2
 80174ce:	00db      	lsls	r3, r3, #3
 80174d0:	440b      	add	r3, r1
 80174d2:	3308      	adds	r3, #8
 80174d4:	681b      	ldr	r3, [r3, #0]
 80174d6:	687a      	ldr	r2, [r7, #4]
 80174d8:	429a      	cmp	r2, r3
 80174da:	d102      	bne.n	80174e2 <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 80174dc:	68f8      	ldr	r0, [r7, #12]
 80174de:	f7ff fce5 	bl	8016eac <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80174e2:	68fb      	ldr	r3, [r7, #12]
 80174e4:	3301      	adds	r3, #1
 80174e6:	60fb      	str	r3, [r7, #12]
 80174e8:	68fb      	ldr	r3, [r7, #12]
 80174ea:	2b09      	cmp	r3, #9
 80174ec:	dddd      	ble.n	80174aa <etharp_cleanup_netif+0xe>
    }
  }
}
 80174ee:	bf00      	nop
 80174f0:	bf00      	nop
 80174f2:	3710      	adds	r7, #16
 80174f4:	46bd      	mov	sp, r7
 80174f6:	bd80      	pop	{r7, pc}
 80174f8:	20007134 	.word	0x20007134

080174fc <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 80174fc:	b5b0      	push	{r4, r5, r7, lr}
 80174fe:	b08a      	sub	sp, #40	; 0x28
 8017500:	af04      	add	r7, sp, #16
 8017502:	6078      	str	r0, [r7, #4]
 8017504:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 8017506:	683b      	ldr	r3, [r7, #0]
 8017508:	2b00      	cmp	r3, #0
 801750a:	d107      	bne.n	801751c <etharp_input+0x20>
 801750c:	4b3d      	ldr	r3, [pc, #244]	; (8017604 <etharp_input+0x108>)
 801750e:	f240 228a 	movw	r2, #650	; 0x28a
 8017512:	493d      	ldr	r1, [pc, #244]	; (8017608 <etharp_input+0x10c>)
 8017514:	483d      	ldr	r0, [pc, #244]	; (801760c <etharp_input+0x110>)
 8017516:	f002 fcef 	bl	8019ef8 <iprintf>
 801751a:	e06f      	b.n	80175fc <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 801751c:	687b      	ldr	r3, [r7, #4]
 801751e:	685b      	ldr	r3, [r3, #4]
 8017520:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 8017522:	693b      	ldr	r3, [r7, #16]
 8017524:	881b      	ldrh	r3, [r3, #0]
 8017526:	b29b      	uxth	r3, r3
 8017528:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801752c:	d10c      	bne.n	8017548 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 801752e:	693b      	ldr	r3, [r7, #16]
 8017530:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 8017532:	2b06      	cmp	r3, #6
 8017534:	d108      	bne.n	8017548 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8017536:	693b      	ldr	r3, [r7, #16]
 8017538:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 801753a:	2b04      	cmp	r3, #4
 801753c:	d104      	bne.n	8017548 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 801753e:	693b      	ldr	r3, [r7, #16]
 8017540:	885b      	ldrh	r3, [r3, #2]
 8017542:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8017544:	2b08      	cmp	r3, #8
 8017546:	d003      	beq.n	8017550 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 8017548:	6878      	ldr	r0, [r7, #4]
 801754a:	f7f9 fdff 	bl	801114c <pbuf_free>
    return;
 801754e:	e055      	b.n	80175fc <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 8017550:	693b      	ldr	r3, [r7, #16]
 8017552:	330e      	adds	r3, #14
 8017554:	681b      	ldr	r3, [r3, #0]
 8017556:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 8017558:	693b      	ldr	r3, [r7, #16]
 801755a:	3318      	adds	r3, #24
 801755c:	681b      	ldr	r3, [r3, #0]
 801755e:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8017560:	683b      	ldr	r3, [r7, #0]
 8017562:	3304      	adds	r3, #4
 8017564:	681b      	ldr	r3, [r3, #0]
 8017566:	2b00      	cmp	r3, #0
 8017568:	d102      	bne.n	8017570 <etharp_input+0x74>
    for_us = 0;
 801756a:	2300      	movs	r3, #0
 801756c:	75fb      	strb	r3, [r7, #23]
 801756e:	e009      	b.n	8017584 <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 8017570:	68ba      	ldr	r2, [r7, #8]
 8017572:	683b      	ldr	r3, [r7, #0]
 8017574:	3304      	adds	r3, #4
 8017576:	681b      	ldr	r3, [r3, #0]
 8017578:	429a      	cmp	r2, r3
 801757a:	bf0c      	ite	eq
 801757c:	2301      	moveq	r3, #1
 801757e:	2300      	movne	r3, #0
 8017580:	b2db      	uxtb	r3, r3
 8017582:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 8017584:	693b      	ldr	r3, [r7, #16]
 8017586:	f103 0208 	add.w	r2, r3, #8
 801758a:	7dfb      	ldrb	r3, [r7, #23]
 801758c:	2b00      	cmp	r3, #0
 801758e:	d001      	beq.n	8017594 <etharp_input+0x98>
 8017590:	2301      	movs	r3, #1
 8017592:	e000      	b.n	8017596 <etharp_input+0x9a>
 8017594:	2302      	movs	r3, #2
 8017596:	f107 010c 	add.w	r1, r7, #12
 801759a:	6838      	ldr	r0, [r7, #0]
 801759c:	f7ff fed8 	bl	8017350 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 80175a0:	693b      	ldr	r3, [r7, #16]
 80175a2:	88db      	ldrh	r3, [r3, #6]
 80175a4:	b29b      	uxth	r3, r3
 80175a6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80175aa:	d003      	beq.n	80175b4 <etharp_input+0xb8>
 80175ac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80175b0:	d01e      	beq.n	80175f0 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 80175b2:	e020      	b.n	80175f6 <etharp_input+0xfa>
      if (for_us) {
 80175b4:	7dfb      	ldrb	r3, [r7, #23]
 80175b6:	2b00      	cmp	r3, #0
 80175b8:	d01c      	beq.n	80175f4 <etharp_input+0xf8>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 80175ba:	683b      	ldr	r3, [r7, #0]
 80175bc:	f103 0026 	add.w	r0, r3, #38	; 0x26
 80175c0:	693b      	ldr	r3, [r7, #16]
 80175c2:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 80175c6:	683b      	ldr	r3, [r7, #0]
 80175c8:	f103 0526 	add.w	r5, r3, #38	; 0x26
 80175cc:	683b      	ldr	r3, [r7, #0]
 80175ce:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 80175d0:	693a      	ldr	r2, [r7, #16]
 80175d2:	3208      	adds	r2, #8
        etharp_raw(netif,
 80175d4:	2102      	movs	r1, #2
 80175d6:	9103      	str	r1, [sp, #12]
 80175d8:	f107 010c 	add.w	r1, r7, #12
 80175dc:	9102      	str	r1, [sp, #8]
 80175de:	9201      	str	r2, [sp, #4]
 80175e0:	9300      	str	r3, [sp, #0]
 80175e2:	462b      	mov	r3, r5
 80175e4:	4622      	mov	r2, r4
 80175e6:	4601      	mov	r1, r0
 80175e8:	6838      	ldr	r0, [r7, #0]
 80175ea:	f000 faeb 	bl	8017bc4 <etharp_raw>
      break;
 80175ee:	e001      	b.n	80175f4 <etharp_input+0xf8>
      break;
 80175f0:	bf00      	nop
 80175f2:	e000      	b.n	80175f6 <etharp_input+0xfa>
      break;
 80175f4:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 80175f6:	6878      	ldr	r0, [r7, #4]
 80175f8:	f7f9 fda8 	bl	801114c <pbuf_free>
}
 80175fc:	3718      	adds	r7, #24
 80175fe:	46bd      	mov	sp, r7
 8017600:	bdb0      	pop	{r4, r5, r7, pc}
 8017602:	bf00      	nop
 8017604:	0801ed68 	.word	0x0801ed68
 8017608:	0801eeb8 	.word	0x0801eeb8
 801760c:	0801ede0 	.word	0x0801ede0

08017610 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 8017610:	b580      	push	{r7, lr}
 8017612:	b086      	sub	sp, #24
 8017614:	af02      	add	r7, sp, #8
 8017616:	60f8      	str	r0, [r7, #12]
 8017618:	60b9      	str	r1, [r7, #8]
 801761a:	4613      	mov	r3, r2
 801761c:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 801761e:	79fa      	ldrb	r2, [r7, #7]
 8017620:	4944      	ldr	r1, [pc, #272]	; (8017734 <etharp_output_to_arp_index+0x124>)
 8017622:	4613      	mov	r3, r2
 8017624:	005b      	lsls	r3, r3, #1
 8017626:	4413      	add	r3, r2
 8017628:	00db      	lsls	r3, r3, #3
 801762a:	440b      	add	r3, r1
 801762c:	3314      	adds	r3, #20
 801762e:	781b      	ldrb	r3, [r3, #0]
 8017630:	2b01      	cmp	r3, #1
 8017632:	d806      	bhi.n	8017642 <etharp_output_to_arp_index+0x32>
 8017634:	4b40      	ldr	r3, [pc, #256]	; (8017738 <etharp_output_to_arp_index+0x128>)
 8017636:	f240 22ee 	movw	r2, #750	; 0x2ee
 801763a:	4940      	ldr	r1, [pc, #256]	; (801773c <etharp_output_to_arp_index+0x12c>)
 801763c:	4840      	ldr	r0, [pc, #256]	; (8017740 <etharp_output_to_arp_index+0x130>)
 801763e:	f002 fc5b 	bl	8019ef8 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 8017642:	79fa      	ldrb	r2, [r7, #7]
 8017644:	493b      	ldr	r1, [pc, #236]	; (8017734 <etharp_output_to_arp_index+0x124>)
 8017646:	4613      	mov	r3, r2
 8017648:	005b      	lsls	r3, r3, #1
 801764a:	4413      	add	r3, r2
 801764c:	00db      	lsls	r3, r3, #3
 801764e:	440b      	add	r3, r1
 8017650:	3314      	adds	r3, #20
 8017652:	781b      	ldrb	r3, [r3, #0]
 8017654:	2b02      	cmp	r3, #2
 8017656:	d153      	bne.n	8017700 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 8017658:	79fa      	ldrb	r2, [r7, #7]
 801765a:	4936      	ldr	r1, [pc, #216]	; (8017734 <etharp_output_to_arp_index+0x124>)
 801765c:	4613      	mov	r3, r2
 801765e:	005b      	lsls	r3, r3, #1
 8017660:	4413      	add	r3, r2
 8017662:	00db      	lsls	r3, r3, #3
 8017664:	440b      	add	r3, r1
 8017666:	3312      	adds	r3, #18
 8017668:	881b      	ldrh	r3, [r3, #0]
 801766a:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 801766e:	d919      	bls.n	80176a4 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 8017670:	79fa      	ldrb	r2, [r7, #7]
 8017672:	4613      	mov	r3, r2
 8017674:	005b      	lsls	r3, r3, #1
 8017676:	4413      	add	r3, r2
 8017678:	00db      	lsls	r3, r3, #3
 801767a:	4a2e      	ldr	r2, [pc, #184]	; (8017734 <etharp_output_to_arp_index+0x124>)
 801767c:	4413      	add	r3, r2
 801767e:	3304      	adds	r3, #4
 8017680:	4619      	mov	r1, r3
 8017682:	68f8      	ldr	r0, [r7, #12]
 8017684:	f000 fb4c 	bl	8017d20 <etharp_request>
 8017688:	4603      	mov	r3, r0
 801768a:	2b00      	cmp	r3, #0
 801768c:	d138      	bne.n	8017700 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 801768e:	79fa      	ldrb	r2, [r7, #7]
 8017690:	4928      	ldr	r1, [pc, #160]	; (8017734 <etharp_output_to_arp_index+0x124>)
 8017692:	4613      	mov	r3, r2
 8017694:	005b      	lsls	r3, r3, #1
 8017696:	4413      	add	r3, r2
 8017698:	00db      	lsls	r3, r3, #3
 801769a:	440b      	add	r3, r1
 801769c:	3314      	adds	r3, #20
 801769e:	2203      	movs	r2, #3
 80176a0:	701a      	strb	r2, [r3, #0]
 80176a2:	e02d      	b.n	8017700 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 80176a4:	79fa      	ldrb	r2, [r7, #7]
 80176a6:	4923      	ldr	r1, [pc, #140]	; (8017734 <etharp_output_to_arp_index+0x124>)
 80176a8:	4613      	mov	r3, r2
 80176aa:	005b      	lsls	r3, r3, #1
 80176ac:	4413      	add	r3, r2
 80176ae:	00db      	lsls	r3, r3, #3
 80176b0:	440b      	add	r3, r1
 80176b2:	3312      	adds	r3, #18
 80176b4:	881b      	ldrh	r3, [r3, #0]
 80176b6:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 80176ba:	d321      	bcc.n	8017700 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 80176bc:	79fa      	ldrb	r2, [r7, #7]
 80176be:	4613      	mov	r3, r2
 80176c0:	005b      	lsls	r3, r3, #1
 80176c2:	4413      	add	r3, r2
 80176c4:	00db      	lsls	r3, r3, #3
 80176c6:	4a1b      	ldr	r2, [pc, #108]	; (8017734 <etharp_output_to_arp_index+0x124>)
 80176c8:	4413      	add	r3, r2
 80176ca:	1d19      	adds	r1, r3, #4
 80176cc:	79fa      	ldrb	r2, [r7, #7]
 80176ce:	4613      	mov	r3, r2
 80176d0:	005b      	lsls	r3, r3, #1
 80176d2:	4413      	add	r3, r2
 80176d4:	00db      	lsls	r3, r3, #3
 80176d6:	3308      	adds	r3, #8
 80176d8:	4a16      	ldr	r2, [pc, #88]	; (8017734 <etharp_output_to_arp_index+0x124>)
 80176da:	4413      	add	r3, r2
 80176dc:	3304      	adds	r3, #4
 80176de:	461a      	mov	r2, r3
 80176e0:	68f8      	ldr	r0, [r7, #12]
 80176e2:	f000 fafb 	bl	8017cdc <etharp_request_dst>
 80176e6:	4603      	mov	r3, r0
 80176e8:	2b00      	cmp	r3, #0
 80176ea:	d109      	bne.n	8017700 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 80176ec:	79fa      	ldrb	r2, [r7, #7]
 80176ee:	4911      	ldr	r1, [pc, #68]	; (8017734 <etharp_output_to_arp_index+0x124>)
 80176f0:	4613      	mov	r3, r2
 80176f2:	005b      	lsls	r3, r3, #1
 80176f4:	4413      	add	r3, r2
 80176f6:	00db      	lsls	r3, r3, #3
 80176f8:	440b      	add	r3, r1
 80176fa:	3314      	adds	r3, #20
 80176fc:	2203      	movs	r2, #3
 80176fe:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 8017700:	68fb      	ldr	r3, [r7, #12]
 8017702:	f103 0126 	add.w	r1, r3, #38	; 0x26
 8017706:	79fa      	ldrb	r2, [r7, #7]
 8017708:	4613      	mov	r3, r2
 801770a:	005b      	lsls	r3, r3, #1
 801770c:	4413      	add	r3, r2
 801770e:	00db      	lsls	r3, r3, #3
 8017710:	3308      	adds	r3, #8
 8017712:	4a08      	ldr	r2, [pc, #32]	; (8017734 <etharp_output_to_arp_index+0x124>)
 8017714:	4413      	add	r3, r2
 8017716:	3304      	adds	r3, #4
 8017718:	f44f 6200 	mov.w	r2, #2048	; 0x800
 801771c:	9200      	str	r2, [sp, #0]
 801771e:	460a      	mov	r2, r1
 8017720:	68b9      	ldr	r1, [r7, #8]
 8017722:	68f8      	ldr	r0, [r7, #12]
 8017724:	f001 fe66 	bl	80193f4 <ethernet_output>
 8017728:	4603      	mov	r3, r0
}
 801772a:	4618      	mov	r0, r3
 801772c:	3710      	adds	r7, #16
 801772e:	46bd      	mov	sp, r7
 8017730:	bd80      	pop	{r7, pc}
 8017732:	bf00      	nop
 8017734:	20007134 	.word	0x20007134
 8017738:	0801ed68 	.word	0x0801ed68
 801773c:	0801eed8 	.word	0x0801eed8
 8017740:	0801ede0 	.word	0x0801ede0

08017744 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 8017744:	b580      	push	{r7, lr}
 8017746:	b08a      	sub	sp, #40	; 0x28
 8017748:	af02      	add	r7, sp, #8
 801774a:	60f8      	str	r0, [r7, #12]
 801774c:	60b9      	str	r1, [r7, #8]
 801774e:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 8017750:	687b      	ldr	r3, [r7, #4]
 8017752:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 8017754:	68fb      	ldr	r3, [r7, #12]
 8017756:	2b00      	cmp	r3, #0
 8017758:	d106      	bne.n	8017768 <etharp_output+0x24>
 801775a:	4b73      	ldr	r3, [pc, #460]	; (8017928 <etharp_output+0x1e4>)
 801775c:	f240 321e 	movw	r2, #798	; 0x31e
 8017760:	4972      	ldr	r1, [pc, #456]	; (801792c <etharp_output+0x1e8>)
 8017762:	4873      	ldr	r0, [pc, #460]	; (8017930 <etharp_output+0x1ec>)
 8017764:	f002 fbc8 	bl	8019ef8 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 8017768:	68bb      	ldr	r3, [r7, #8]
 801776a:	2b00      	cmp	r3, #0
 801776c:	d106      	bne.n	801777c <etharp_output+0x38>
 801776e:	4b6e      	ldr	r3, [pc, #440]	; (8017928 <etharp_output+0x1e4>)
 8017770:	f240 321f 	movw	r2, #799	; 0x31f
 8017774:	496f      	ldr	r1, [pc, #444]	; (8017934 <etharp_output+0x1f0>)
 8017776:	486e      	ldr	r0, [pc, #440]	; (8017930 <etharp_output+0x1ec>)
 8017778:	f002 fbbe 	bl	8019ef8 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 801777c:	687b      	ldr	r3, [r7, #4]
 801777e:	2b00      	cmp	r3, #0
 8017780:	d106      	bne.n	8017790 <etharp_output+0x4c>
 8017782:	4b69      	ldr	r3, [pc, #420]	; (8017928 <etharp_output+0x1e4>)
 8017784:	f44f 7248 	mov.w	r2, #800	; 0x320
 8017788:	496b      	ldr	r1, [pc, #428]	; (8017938 <etharp_output+0x1f4>)
 801778a:	4869      	ldr	r0, [pc, #420]	; (8017930 <etharp_output+0x1ec>)
 801778c:	f002 fbb4 	bl	8019ef8 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 8017790:	687b      	ldr	r3, [r7, #4]
 8017792:	681b      	ldr	r3, [r3, #0]
 8017794:	68f9      	ldr	r1, [r7, #12]
 8017796:	4618      	mov	r0, r3
 8017798:	f000 ff1e 	bl	80185d8 <ip4_addr_isbroadcast_u32>
 801779c:	4603      	mov	r3, r0
 801779e:	2b00      	cmp	r3, #0
 80177a0:	d002      	beq.n	80177a8 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 80177a2:	4b66      	ldr	r3, [pc, #408]	; (801793c <etharp_output+0x1f8>)
 80177a4:	61fb      	str	r3, [r7, #28]
 80177a6:	e0af      	b.n	8017908 <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 80177a8:	687b      	ldr	r3, [r7, #4]
 80177aa:	681b      	ldr	r3, [r3, #0]
 80177ac:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80177b0:	2be0      	cmp	r3, #224	; 0xe0
 80177b2:	d118      	bne.n	80177e6 <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 80177b4:	2301      	movs	r3, #1
 80177b6:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 80177b8:	2300      	movs	r3, #0
 80177ba:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 80177bc:	235e      	movs	r3, #94	; 0x5e
 80177be:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 80177c0:	687b      	ldr	r3, [r7, #4]
 80177c2:	3301      	adds	r3, #1
 80177c4:	781b      	ldrb	r3, [r3, #0]
 80177c6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80177ca:	b2db      	uxtb	r3, r3
 80177cc:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 80177ce:	687b      	ldr	r3, [r7, #4]
 80177d0:	3302      	adds	r3, #2
 80177d2:	781b      	ldrb	r3, [r3, #0]
 80177d4:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 80177d6:	687b      	ldr	r3, [r7, #4]
 80177d8:	3303      	adds	r3, #3
 80177da:	781b      	ldrb	r3, [r3, #0]
 80177dc:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 80177de:	f107 0310 	add.w	r3, r7, #16
 80177e2:	61fb      	str	r3, [r7, #28]
 80177e4:	e090      	b.n	8017908 <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 80177e6:	687b      	ldr	r3, [r7, #4]
 80177e8:	681a      	ldr	r2, [r3, #0]
 80177ea:	68fb      	ldr	r3, [r7, #12]
 80177ec:	3304      	adds	r3, #4
 80177ee:	681b      	ldr	r3, [r3, #0]
 80177f0:	405a      	eors	r2, r3
 80177f2:	68fb      	ldr	r3, [r7, #12]
 80177f4:	3308      	adds	r3, #8
 80177f6:	681b      	ldr	r3, [r3, #0]
 80177f8:	4013      	ands	r3, r2
 80177fa:	2b00      	cmp	r3, #0
 80177fc:	d012      	beq.n	8017824 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 80177fe:	687b      	ldr	r3, [r7, #4]
 8017800:	681b      	ldr	r3, [r3, #0]
 8017802:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8017804:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 8017808:	4293      	cmp	r3, r2
 801780a:	d00b      	beq.n	8017824 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 801780c:	68fb      	ldr	r3, [r7, #12]
 801780e:	330c      	adds	r3, #12
 8017810:	681b      	ldr	r3, [r3, #0]
 8017812:	2b00      	cmp	r3, #0
 8017814:	d003      	beq.n	801781e <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 8017816:	68fb      	ldr	r3, [r7, #12]
 8017818:	330c      	adds	r3, #12
 801781a:	61bb      	str	r3, [r7, #24]
 801781c:	e002      	b.n	8017824 <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 801781e:	f06f 0303 	mvn.w	r3, #3
 8017822:	e07d      	b.n	8017920 <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8017824:	4b46      	ldr	r3, [pc, #280]	; (8017940 <etharp_output+0x1fc>)
 8017826:	781b      	ldrb	r3, [r3, #0]
 8017828:	4619      	mov	r1, r3
 801782a:	4a46      	ldr	r2, [pc, #280]	; (8017944 <etharp_output+0x200>)
 801782c:	460b      	mov	r3, r1
 801782e:	005b      	lsls	r3, r3, #1
 8017830:	440b      	add	r3, r1
 8017832:	00db      	lsls	r3, r3, #3
 8017834:	4413      	add	r3, r2
 8017836:	3314      	adds	r3, #20
 8017838:	781b      	ldrb	r3, [r3, #0]
 801783a:	2b01      	cmp	r3, #1
 801783c:	d925      	bls.n	801788a <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 801783e:	4b40      	ldr	r3, [pc, #256]	; (8017940 <etharp_output+0x1fc>)
 8017840:	781b      	ldrb	r3, [r3, #0]
 8017842:	4619      	mov	r1, r3
 8017844:	4a3f      	ldr	r2, [pc, #252]	; (8017944 <etharp_output+0x200>)
 8017846:	460b      	mov	r3, r1
 8017848:	005b      	lsls	r3, r3, #1
 801784a:	440b      	add	r3, r1
 801784c:	00db      	lsls	r3, r3, #3
 801784e:	4413      	add	r3, r2
 8017850:	3308      	adds	r3, #8
 8017852:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8017854:	68fa      	ldr	r2, [r7, #12]
 8017856:	429a      	cmp	r2, r3
 8017858:	d117      	bne.n	801788a <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 801785a:	69bb      	ldr	r3, [r7, #24]
 801785c:	681a      	ldr	r2, [r3, #0]
 801785e:	4b38      	ldr	r3, [pc, #224]	; (8017940 <etharp_output+0x1fc>)
 8017860:	781b      	ldrb	r3, [r3, #0]
 8017862:	4618      	mov	r0, r3
 8017864:	4937      	ldr	r1, [pc, #220]	; (8017944 <etharp_output+0x200>)
 8017866:	4603      	mov	r3, r0
 8017868:	005b      	lsls	r3, r3, #1
 801786a:	4403      	add	r3, r0
 801786c:	00db      	lsls	r3, r3, #3
 801786e:	440b      	add	r3, r1
 8017870:	3304      	adds	r3, #4
 8017872:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 8017874:	429a      	cmp	r2, r3
 8017876:	d108      	bne.n	801788a <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 8017878:	4b31      	ldr	r3, [pc, #196]	; (8017940 <etharp_output+0x1fc>)
 801787a:	781b      	ldrb	r3, [r3, #0]
 801787c:	461a      	mov	r2, r3
 801787e:	68b9      	ldr	r1, [r7, #8]
 8017880:	68f8      	ldr	r0, [r7, #12]
 8017882:	f7ff fec5 	bl	8017610 <etharp_output_to_arp_index>
 8017886:	4603      	mov	r3, r0
 8017888:	e04a      	b.n	8017920 <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 801788a:	2300      	movs	r3, #0
 801788c:	75fb      	strb	r3, [r7, #23]
 801788e:	e031      	b.n	80178f4 <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8017890:	7dfa      	ldrb	r2, [r7, #23]
 8017892:	492c      	ldr	r1, [pc, #176]	; (8017944 <etharp_output+0x200>)
 8017894:	4613      	mov	r3, r2
 8017896:	005b      	lsls	r3, r3, #1
 8017898:	4413      	add	r3, r2
 801789a:	00db      	lsls	r3, r3, #3
 801789c:	440b      	add	r3, r1
 801789e:	3314      	adds	r3, #20
 80178a0:	781b      	ldrb	r3, [r3, #0]
 80178a2:	2b01      	cmp	r3, #1
 80178a4:	d923      	bls.n	80178ee <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 80178a6:	7dfa      	ldrb	r2, [r7, #23]
 80178a8:	4926      	ldr	r1, [pc, #152]	; (8017944 <etharp_output+0x200>)
 80178aa:	4613      	mov	r3, r2
 80178ac:	005b      	lsls	r3, r3, #1
 80178ae:	4413      	add	r3, r2
 80178b0:	00db      	lsls	r3, r3, #3
 80178b2:	440b      	add	r3, r1
 80178b4:	3308      	adds	r3, #8
 80178b6:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 80178b8:	68fa      	ldr	r2, [r7, #12]
 80178ba:	429a      	cmp	r2, r3
 80178bc:	d117      	bne.n	80178ee <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 80178be:	69bb      	ldr	r3, [r7, #24]
 80178c0:	6819      	ldr	r1, [r3, #0]
 80178c2:	7dfa      	ldrb	r2, [r7, #23]
 80178c4:	481f      	ldr	r0, [pc, #124]	; (8017944 <etharp_output+0x200>)
 80178c6:	4613      	mov	r3, r2
 80178c8:	005b      	lsls	r3, r3, #1
 80178ca:	4413      	add	r3, r2
 80178cc:	00db      	lsls	r3, r3, #3
 80178ce:	4403      	add	r3, r0
 80178d0:	3304      	adds	r3, #4
 80178d2:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 80178d4:	4299      	cmp	r1, r3
 80178d6:	d10a      	bne.n	80178ee <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 80178d8:	4a19      	ldr	r2, [pc, #100]	; (8017940 <etharp_output+0x1fc>)
 80178da:	7dfb      	ldrb	r3, [r7, #23]
 80178dc:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 80178de:	7dfb      	ldrb	r3, [r7, #23]
 80178e0:	461a      	mov	r2, r3
 80178e2:	68b9      	ldr	r1, [r7, #8]
 80178e4:	68f8      	ldr	r0, [r7, #12]
 80178e6:	f7ff fe93 	bl	8017610 <etharp_output_to_arp_index>
 80178ea:	4603      	mov	r3, r0
 80178ec:	e018      	b.n	8017920 <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 80178ee:	7dfb      	ldrb	r3, [r7, #23]
 80178f0:	3301      	adds	r3, #1
 80178f2:	75fb      	strb	r3, [r7, #23]
 80178f4:	7dfb      	ldrb	r3, [r7, #23]
 80178f6:	2b09      	cmp	r3, #9
 80178f8:	d9ca      	bls.n	8017890 <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 80178fa:	68ba      	ldr	r2, [r7, #8]
 80178fc:	69b9      	ldr	r1, [r7, #24]
 80178fe:	68f8      	ldr	r0, [r7, #12]
 8017900:	f000 f822 	bl	8017948 <etharp_query>
 8017904:	4603      	mov	r3, r0
 8017906:	e00b      	b.n	8017920 <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 8017908:	68fb      	ldr	r3, [r7, #12]
 801790a:	f103 0226 	add.w	r2, r3, #38	; 0x26
 801790e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8017912:	9300      	str	r3, [sp, #0]
 8017914:	69fb      	ldr	r3, [r7, #28]
 8017916:	68b9      	ldr	r1, [r7, #8]
 8017918:	68f8      	ldr	r0, [r7, #12]
 801791a:	f001 fd6b 	bl	80193f4 <ethernet_output>
 801791e:	4603      	mov	r3, r0
}
 8017920:	4618      	mov	r0, r3
 8017922:	3720      	adds	r7, #32
 8017924:	46bd      	mov	sp, r7
 8017926:	bd80      	pop	{r7, pc}
 8017928:	0801ed68 	.word	0x0801ed68
 801792c:	0801eeb8 	.word	0x0801eeb8
 8017930:	0801ede0 	.word	0x0801ede0
 8017934:	0801ef08 	.word	0x0801ef08
 8017938:	0801eea8 	.word	0x0801eea8
 801793c:	0801f568 	.word	0x0801f568
 8017940:	20007224 	.word	0x20007224
 8017944:	20007134 	.word	0x20007134

08017948 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 8017948:	b580      	push	{r7, lr}
 801794a:	b08c      	sub	sp, #48	; 0x30
 801794c:	af02      	add	r7, sp, #8
 801794e:	60f8      	str	r0, [r7, #12]
 8017950:	60b9      	str	r1, [r7, #8]
 8017952:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 8017954:	68fb      	ldr	r3, [r7, #12]
 8017956:	3326      	adds	r3, #38	; 0x26
 8017958:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 801795a:	23ff      	movs	r3, #255	; 0xff
 801795c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 8017960:	2300      	movs	r3, #0
 8017962:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8017964:	68bb      	ldr	r3, [r7, #8]
 8017966:	681b      	ldr	r3, [r3, #0]
 8017968:	68f9      	ldr	r1, [r7, #12]
 801796a:	4618      	mov	r0, r3
 801796c:	f000 fe34 	bl	80185d8 <ip4_addr_isbroadcast_u32>
 8017970:	4603      	mov	r3, r0
 8017972:	2b00      	cmp	r3, #0
 8017974:	d10c      	bne.n	8017990 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8017976:	68bb      	ldr	r3, [r7, #8]
 8017978:	681b      	ldr	r3, [r3, #0]
 801797a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 801797e:	2be0      	cmp	r3, #224	; 0xe0
 8017980:	d006      	beq.n	8017990 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8017982:	68bb      	ldr	r3, [r7, #8]
 8017984:	2b00      	cmp	r3, #0
 8017986:	d003      	beq.n	8017990 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 8017988:	68bb      	ldr	r3, [r7, #8]
 801798a:	681b      	ldr	r3, [r3, #0]
 801798c:	2b00      	cmp	r3, #0
 801798e:	d102      	bne.n	8017996 <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8017990:	f06f 030f 	mvn.w	r3, #15
 8017994:	e101      	b.n	8017b9a <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 8017996:	68fa      	ldr	r2, [r7, #12]
 8017998:	2101      	movs	r1, #1
 801799a:	68b8      	ldr	r0, [r7, #8]
 801799c:	f7ff fb60 	bl	8017060 <etharp_find_entry>
 80179a0:	4603      	mov	r3, r0
 80179a2:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 80179a4:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80179a8:	2b00      	cmp	r3, #0
 80179aa:	da02      	bge.n	80179b2 <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 80179ac:	8a7b      	ldrh	r3, [r7, #18]
 80179ae:	b25b      	sxtb	r3, r3
 80179b0:	e0f3      	b.n	8017b9a <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 80179b2:	8a7b      	ldrh	r3, [r7, #18]
 80179b4:	2b7e      	cmp	r3, #126	; 0x7e
 80179b6:	d906      	bls.n	80179c6 <etharp_query+0x7e>
 80179b8:	4b7a      	ldr	r3, [pc, #488]	; (8017ba4 <etharp_query+0x25c>)
 80179ba:	f240 32c1 	movw	r2, #961	; 0x3c1
 80179be:	497a      	ldr	r1, [pc, #488]	; (8017ba8 <etharp_query+0x260>)
 80179c0:	487a      	ldr	r0, [pc, #488]	; (8017bac <etharp_query+0x264>)
 80179c2:	f002 fa99 	bl	8019ef8 <iprintf>
  i = (netif_addr_idx_t)i_err;
 80179c6:	8a7b      	ldrh	r3, [r7, #18]
 80179c8:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 80179ca:	7c7a      	ldrb	r2, [r7, #17]
 80179cc:	4978      	ldr	r1, [pc, #480]	; (8017bb0 <etharp_query+0x268>)
 80179ce:	4613      	mov	r3, r2
 80179d0:	005b      	lsls	r3, r3, #1
 80179d2:	4413      	add	r3, r2
 80179d4:	00db      	lsls	r3, r3, #3
 80179d6:	440b      	add	r3, r1
 80179d8:	3314      	adds	r3, #20
 80179da:	781b      	ldrb	r3, [r3, #0]
 80179dc:	2b00      	cmp	r3, #0
 80179de:	d115      	bne.n	8017a0c <etharp_query+0xc4>
    is_new_entry = 1;
 80179e0:	2301      	movs	r3, #1
 80179e2:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 80179e4:	7c7a      	ldrb	r2, [r7, #17]
 80179e6:	4972      	ldr	r1, [pc, #456]	; (8017bb0 <etharp_query+0x268>)
 80179e8:	4613      	mov	r3, r2
 80179ea:	005b      	lsls	r3, r3, #1
 80179ec:	4413      	add	r3, r2
 80179ee:	00db      	lsls	r3, r3, #3
 80179f0:	440b      	add	r3, r1
 80179f2:	3314      	adds	r3, #20
 80179f4:	2201      	movs	r2, #1
 80179f6:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 80179f8:	7c7a      	ldrb	r2, [r7, #17]
 80179fa:	496d      	ldr	r1, [pc, #436]	; (8017bb0 <etharp_query+0x268>)
 80179fc:	4613      	mov	r3, r2
 80179fe:	005b      	lsls	r3, r3, #1
 8017a00:	4413      	add	r3, r2
 8017a02:	00db      	lsls	r3, r3, #3
 8017a04:	440b      	add	r3, r1
 8017a06:	3308      	adds	r3, #8
 8017a08:	68fa      	ldr	r2, [r7, #12]
 8017a0a:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 8017a0c:	7c7a      	ldrb	r2, [r7, #17]
 8017a0e:	4968      	ldr	r1, [pc, #416]	; (8017bb0 <etharp_query+0x268>)
 8017a10:	4613      	mov	r3, r2
 8017a12:	005b      	lsls	r3, r3, #1
 8017a14:	4413      	add	r3, r2
 8017a16:	00db      	lsls	r3, r3, #3
 8017a18:	440b      	add	r3, r1
 8017a1a:	3314      	adds	r3, #20
 8017a1c:	781b      	ldrb	r3, [r3, #0]
 8017a1e:	2b01      	cmp	r3, #1
 8017a20:	d011      	beq.n	8017a46 <etharp_query+0xfe>
 8017a22:	7c7a      	ldrb	r2, [r7, #17]
 8017a24:	4962      	ldr	r1, [pc, #392]	; (8017bb0 <etharp_query+0x268>)
 8017a26:	4613      	mov	r3, r2
 8017a28:	005b      	lsls	r3, r3, #1
 8017a2a:	4413      	add	r3, r2
 8017a2c:	00db      	lsls	r3, r3, #3
 8017a2e:	440b      	add	r3, r1
 8017a30:	3314      	adds	r3, #20
 8017a32:	781b      	ldrb	r3, [r3, #0]
 8017a34:	2b01      	cmp	r3, #1
 8017a36:	d806      	bhi.n	8017a46 <etharp_query+0xfe>
 8017a38:	4b5a      	ldr	r3, [pc, #360]	; (8017ba4 <etharp_query+0x25c>)
 8017a3a:	f240 32cd 	movw	r2, #973	; 0x3cd
 8017a3e:	495d      	ldr	r1, [pc, #372]	; (8017bb4 <etharp_query+0x26c>)
 8017a40:	485a      	ldr	r0, [pc, #360]	; (8017bac <etharp_query+0x264>)
 8017a42:	f002 fa59 	bl	8019ef8 <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 8017a46:	6a3b      	ldr	r3, [r7, #32]
 8017a48:	2b00      	cmp	r3, #0
 8017a4a:	d102      	bne.n	8017a52 <etharp_query+0x10a>
 8017a4c:	687b      	ldr	r3, [r7, #4]
 8017a4e:	2b00      	cmp	r3, #0
 8017a50:	d10c      	bne.n	8017a6c <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 8017a52:	68b9      	ldr	r1, [r7, #8]
 8017a54:	68f8      	ldr	r0, [r7, #12]
 8017a56:	f000 f963 	bl	8017d20 <etharp_request>
 8017a5a:	4603      	mov	r3, r0
 8017a5c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 8017a60:	687b      	ldr	r3, [r7, #4]
 8017a62:	2b00      	cmp	r3, #0
 8017a64:	d102      	bne.n	8017a6c <etharp_query+0x124>
      return result;
 8017a66:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8017a6a:	e096      	b.n	8017b9a <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 8017a6c:	687b      	ldr	r3, [r7, #4]
 8017a6e:	2b00      	cmp	r3, #0
 8017a70:	d106      	bne.n	8017a80 <etharp_query+0x138>
 8017a72:	4b4c      	ldr	r3, [pc, #304]	; (8017ba4 <etharp_query+0x25c>)
 8017a74:	f240 32e1 	movw	r2, #993	; 0x3e1
 8017a78:	494f      	ldr	r1, [pc, #316]	; (8017bb8 <etharp_query+0x270>)
 8017a7a:	484c      	ldr	r0, [pc, #304]	; (8017bac <etharp_query+0x264>)
 8017a7c:	f002 fa3c 	bl	8019ef8 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 8017a80:	7c7a      	ldrb	r2, [r7, #17]
 8017a82:	494b      	ldr	r1, [pc, #300]	; (8017bb0 <etharp_query+0x268>)
 8017a84:	4613      	mov	r3, r2
 8017a86:	005b      	lsls	r3, r3, #1
 8017a88:	4413      	add	r3, r2
 8017a8a:	00db      	lsls	r3, r3, #3
 8017a8c:	440b      	add	r3, r1
 8017a8e:	3314      	adds	r3, #20
 8017a90:	781b      	ldrb	r3, [r3, #0]
 8017a92:	2b01      	cmp	r3, #1
 8017a94:	d917      	bls.n	8017ac6 <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 8017a96:	4a49      	ldr	r2, [pc, #292]	; (8017bbc <etharp_query+0x274>)
 8017a98:	7c7b      	ldrb	r3, [r7, #17]
 8017a9a:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 8017a9c:	7c7a      	ldrb	r2, [r7, #17]
 8017a9e:	4613      	mov	r3, r2
 8017aa0:	005b      	lsls	r3, r3, #1
 8017aa2:	4413      	add	r3, r2
 8017aa4:	00db      	lsls	r3, r3, #3
 8017aa6:	3308      	adds	r3, #8
 8017aa8:	4a41      	ldr	r2, [pc, #260]	; (8017bb0 <etharp_query+0x268>)
 8017aaa:	4413      	add	r3, r2
 8017aac:	3304      	adds	r3, #4
 8017aae:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8017ab2:	9200      	str	r2, [sp, #0]
 8017ab4:	697a      	ldr	r2, [r7, #20]
 8017ab6:	6879      	ldr	r1, [r7, #4]
 8017ab8:	68f8      	ldr	r0, [r7, #12]
 8017aba:	f001 fc9b 	bl	80193f4 <ethernet_output>
 8017abe:	4603      	mov	r3, r0
 8017ac0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8017ac4:	e067      	b.n	8017b96 <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8017ac6:	7c7a      	ldrb	r2, [r7, #17]
 8017ac8:	4939      	ldr	r1, [pc, #228]	; (8017bb0 <etharp_query+0x268>)
 8017aca:	4613      	mov	r3, r2
 8017acc:	005b      	lsls	r3, r3, #1
 8017ace:	4413      	add	r3, r2
 8017ad0:	00db      	lsls	r3, r3, #3
 8017ad2:	440b      	add	r3, r1
 8017ad4:	3314      	adds	r3, #20
 8017ad6:	781b      	ldrb	r3, [r3, #0]
 8017ad8:	2b01      	cmp	r3, #1
 8017ada:	d15c      	bne.n	8017b96 <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 8017adc:	2300      	movs	r3, #0
 8017ade:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 8017ae0:	687b      	ldr	r3, [r7, #4]
 8017ae2:	61fb      	str	r3, [r7, #28]
    while (p) {
 8017ae4:	e01c      	b.n	8017b20 <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 8017ae6:	69fb      	ldr	r3, [r7, #28]
 8017ae8:	895a      	ldrh	r2, [r3, #10]
 8017aea:	69fb      	ldr	r3, [r7, #28]
 8017aec:	891b      	ldrh	r3, [r3, #8]
 8017aee:	429a      	cmp	r2, r3
 8017af0:	d10a      	bne.n	8017b08 <etharp_query+0x1c0>
 8017af2:	69fb      	ldr	r3, [r7, #28]
 8017af4:	681b      	ldr	r3, [r3, #0]
 8017af6:	2b00      	cmp	r3, #0
 8017af8:	d006      	beq.n	8017b08 <etharp_query+0x1c0>
 8017afa:	4b2a      	ldr	r3, [pc, #168]	; (8017ba4 <etharp_query+0x25c>)
 8017afc:	f240 32f1 	movw	r2, #1009	; 0x3f1
 8017b00:	492f      	ldr	r1, [pc, #188]	; (8017bc0 <etharp_query+0x278>)
 8017b02:	482a      	ldr	r0, [pc, #168]	; (8017bac <etharp_query+0x264>)
 8017b04:	f002 f9f8 	bl	8019ef8 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 8017b08:	69fb      	ldr	r3, [r7, #28]
 8017b0a:	7b1b      	ldrb	r3, [r3, #12]
 8017b0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8017b10:	2b00      	cmp	r3, #0
 8017b12:	d002      	beq.n	8017b1a <etharp_query+0x1d2>
        copy_needed = 1;
 8017b14:	2301      	movs	r3, #1
 8017b16:	61bb      	str	r3, [r7, #24]
        break;
 8017b18:	e005      	b.n	8017b26 <etharp_query+0x1de>
      }
      p = p->next;
 8017b1a:	69fb      	ldr	r3, [r7, #28]
 8017b1c:	681b      	ldr	r3, [r3, #0]
 8017b1e:	61fb      	str	r3, [r7, #28]
    while (p) {
 8017b20:	69fb      	ldr	r3, [r7, #28]
 8017b22:	2b00      	cmp	r3, #0
 8017b24:	d1df      	bne.n	8017ae6 <etharp_query+0x19e>
    }
    if (copy_needed) {
 8017b26:	69bb      	ldr	r3, [r7, #24]
 8017b28:	2b00      	cmp	r3, #0
 8017b2a:	d007      	beq.n	8017b3c <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 8017b2c:	687a      	ldr	r2, [r7, #4]
 8017b2e:	f44f 7120 	mov.w	r1, #640	; 0x280
 8017b32:	200e      	movs	r0, #14
 8017b34:	f7f9 fd66 	bl	8011604 <pbuf_clone>
 8017b38:	61f8      	str	r0, [r7, #28]
 8017b3a:	e004      	b.n	8017b46 <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 8017b3c:	687b      	ldr	r3, [r7, #4]
 8017b3e:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 8017b40:	69f8      	ldr	r0, [r7, #28]
 8017b42:	f7f9 fba3 	bl	801128c <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 8017b46:	69fb      	ldr	r3, [r7, #28]
 8017b48:	2b00      	cmp	r3, #0
 8017b4a:	d021      	beq.n	8017b90 <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 8017b4c:	7c7a      	ldrb	r2, [r7, #17]
 8017b4e:	4918      	ldr	r1, [pc, #96]	; (8017bb0 <etharp_query+0x268>)
 8017b50:	4613      	mov	r3, r2
 8017b52:	005b      	lsls	r3, r3, #1
 8017b54:	4413      	add	r3, r2
 8017b56:	00db      	lsls	r3, r3, #3
 8017b58:	440b      	add	r3, r1
 8017b5a:	681b      	ldr	r3, [r3, #0]
 8017b5c:	2b00      	cmp	r3, #0
 8017b5e:	d00a      	beq.n	8017b76 <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 8017b60:	7c7a      	ldrb	r2, [r7, #17]
 8017b62:	4913      	ldr	r1, [pc, #76]	; (8017bb0 <etharp_query+0x268>)
 8017b64:	4613      	mov	r3, r2
 8017b66:	005b      	lsls	r3, r3, #1
 8017b68:	4413      	add	r3, r2
 8017b6a:	00db      	lsls	r3, r3, #3
 8017b6c:	440b      	add	r3, r1
 8017b6e:	681b      	ldr	r3, [r3, #0]
 8017b70:	4618      	mov	r0, r3
 8017b72:	f7f9 faeb 	bl	801114c <pbuf_free>
      }
      arp_table[i].q = p;
 8017b76:	7c7a      	ldrb	r2, [r7, #17]
 8017b78:	490d      	ldr	r1, [pc, #52]	; (8017bb0 <etharp_query+0x268>)
 8017b7a:	4613      	mov	r3, r2
 8017b7c:	005b      	lsls	r3, r3, #1
 8017b7e:	4413      	add	r3, r2
 8017b80:	00db      	lsls	r3, r3, #3
 8017b82:	440b      	add	r3, r1
 8017b84:	69fa      	ldr	r2, [r7, #28]
 8017b86:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 8017b88:	2300      	movs	r3, #0
 8017b8a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8017b8e:	e002      	b.n	8017b96 <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 8017b90:	23ff      	movs	r3, #255	; 0xff
 8017b92:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 8017b96:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8017b9a:	4618      	mov	r0, r3
 8017b9c:	3728      	adds	r7, #40	; 0x28
 8017b9e:	46bd      	mov	sp, r7
 8017ba0:	bd80      	pop	{r7, pc}
 8017ba2:	bf00      	nop
 8017ba4:	0801ed68 	.word	0x0801ed68
 8017ba8:	0801ef14 	.word	0x0801ef14
 8017bac:	0801ede0 	.word	0x0801ede0
 8017bb0:	20007134 	.word	0x20007134
 8017bb4:	0801ef24 	.word	0x0801ef24
 8017bb8:	0801ef08 	.word	0x0801ef08
 8017bbc:	20007224 	.word	0x20007224
 8017bc0:	0801ef4c 	.word	0x0801ef4c

08017bc4 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 8017bc4:	b580      	push	{r7, lr}
 8017bc6:	b08a      	sub	sp, #40	; 0x28
 8017bc8:	af02      	add	r7, sp, #8
 8017bca:	60f8      	str	r0, [r7, #12]
 8017bcc:	60b9      	str	r1, [r7, #8]
 8017bce:	607a      	str	r2, [r7, #4]
 8017bd0:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 8017bd2:	2300      	movs	r3, #0
 8017bd4:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 8017bd6:	68fb      	ldr	r3, [r7, #12]
 8017bd8:	2b00      	cmp	r3, #0
 8017bda:	d106      	bne.n	8017bea <etharp_raw+0x26>
 8017bdc:	4b3a      	ldr	r3, [pc, #232]	; (8017cc8 <etharp_raw+0x104>)
 8017bde:	f240 4257 	movw	r2, #1111	; 0x457
 8017be2:	493a      	ldr	r1, [pc, #232]	; (8017ccc <etharp_raw+0x108>)
 8017be4:	483a      	ldr	r0, [pc, #232]	; (8017cd0 <etharp_raw+0x10c>)
 8017be6:	f002 f987 	bl	8019ef8 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 8017bea:	f44f 7220 	mov.w	r2, #640	; 0x280
 8017bee:	211c      	movs	r1, #28
 8017bf0:	200e      	movs	r0, #14
 8017bf2:	f7f8 ffc7 	bl	8010b84 <pbuf_alloc>
 8017bf6:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 8017bf8:	69bb      	ldr	r3, [r7, #24]
 8017bfa:	2b00      	cmp	r3, #0
 8017bfc:	d102      	bne.n	8017c04 <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 8017bfe:	f04f 33ff 	mov.w	r3, #4294967295
 8017c02:	e05d      	b.n	8017cc0 <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 8017c04:	69bb      	ldr	r3, [r7, #24]
 8017c06:	895b      	ldrh	r3, [r3, #10]
 8017c08:	2b1b      	cmp	r3, #27
 8017c0a:	d806      	bhi.n	8017c1a <etharp_raw+0x56>
 8017c0c:	4b2e      	ldr	r3, [pc, #184]	; (8017cc8 <etharp_raw+0x104>)
 8017c0e:	f240 4262 	movw	r2, #1122	; 0x462
 8017c12:	4930      	ldr	r1, [pc, #192]	; (8017cd4 <etharp_raw+0x110>)
 8017c14:	482e      	ldr	r0, [pc, #184]	; (8017cd0 <etharp_raw+0x10c>)
 8017c16:	f002 f96f 	bl	8019ef8 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 8017c1a:	69bb      	ldr	r3, [r7, #24]
 8017c1c:	685b      	ldr	r3, [r3, #4]
 8017c1e:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 8017c20:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8017c22:	4618      	mov	r0, r3
 8017c24:	f7f7 feae 	bl	800f984 <lwip_htons>
 8017c28:	4603      	mov	r3, r0
 8017c2a:	461a      	mov	r2, r3
 8017c2c:	697b      	ldr	r3, [r7, #20]
 8017c2e:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 8017c30:	68fb      	ldr	r3, [r7, #12]
 8017c32:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8017c36:	2b06      	cmp	r3, #6
 8017c38:	d006      	beq.n	8017c48 <etharp_raw+0x84>
 8017c3a:	4b23      	ldr	r3, [pc, #140]	; (8017cc8 <etharp_raw+0x104>)
 8017c3c:	f240 4269 	movw	r2, #1129	; 0x469
 8017c40:	4925      	ldr	r1, [pc, #148]	; (8017cd8 <etharp_raw+0x114>)
 8017c42:	4823      	ldr	r0, [pc, #140]	; (8017cd0 <etharp_raw+0x10c>)
 8017c44:	f002 f958 	bl	8019ef8 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 8017c48:	697b      	ldr	r3, [r7, #20]
 8017c4a:	3308      	adds	r3, #8
 8017c4c:	2206      	movs	r2, #6
 8017c4e:	6839      	ldr	r1, [r7, #0]
 8017c50:	4618      	mov	r0, r3
 8017c52:	f002 fb20 	bl	801a296 <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 8017c56:	697b      	ldr	r3, [r7, #20]
 8017c58:	3312      	adds	r3, #18
 8017c5a:	2206      	movs	r2, #6
 8017c5c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8017c5e:	4618      	mov	r0, r3
 8017c60:	f002 fb19 	bl	801a296 <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 8017c64:	697b      	ldr	r3, [r7, #20]
 8017c66:	330e      	adds	r3, #14
 8017c68:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8017c6a:	6812      	ldr	r2, [r2, #0]
 8017c6c:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 8017c6e:	697b      	ldr	r3, [r7, #20]
 8017c70:	3318      	adds	r3, #24
 8017c72:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8017c74:	6812      	ldr	r2, [r2, #0]
 8017c76:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 8017c78:	697b      	ldr	r3, [r7, #20]
 8017c7a:	2200      	movs	r2, #0
 8017c7c:	701a      	strb	r2, [r3, #0]
 8017c7e:	2200      	movs	r2, #0
 8017c80:	f042 0201 	orr.w	r2, r2, #1
 8017c84:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 8017c86:	697b      	ldr	r3, [r7, #20]
 8017c88:	2200      	movs	r2, #0
 8017c8a:	f042 0208 	orr.w	r2, r2, #8
 8017c8e:	709a      	strb	r2, [r3, #2]
 8017c90:	2200      	movs	r2, #0
 8017c92:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 8017c94:	697b      	ldr	r3, [r7, #20]
 8017c96:	2206      	movs	r2, #6
 8017c98:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 8017c9a:	697b      	ldr	r3, [r7, #20]
 8017c9c:	2204      	movs	r2, #4
 8017c9e:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 8017ca0:	f640 0306 	movw	r3, #2054	; 0x806
 8017ca4:	9300      	str	r3, [sp, #0]
 8017ca6:	687b      	ldr	r3, [r7, #4]
 8017ca8:	68ba      	ldr	r2, [r7, #8]
 8017caa:	69b9      	ldr	r1, [r7, #24]
 8017cac:	68f8      	ldr	r0, [r7, #12]
 8017cae:	f001 fba1 	bl	80193f4 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 8017cb2:	69b8      	ldr	r0, [r7, #24]
 8017cb4:	f7f9 fa4a 	bl	801114c <pbuf_free>
  p = NULL;
 8017cb8:	2300      	movs	r3, #0
 8017cba:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 8017cbc:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8017cc0:	4618      	mov	r0, r3
 8017cc2:	3720      	adds	r7, #32
 8017cc4:	46bd      	mov	sp, r7
 8017cc6:	bd80      	pop	{r7, pc}
 8017cc8:	0801ed68 	.word	0x0801ed68
 8017ccc:	0801eeb8 	.word	0x0801eeb8
 8017cd0:	0801ede0 	.word	0x0801ede0
 8017cd4:	0801ef68 	.word	0x0801ef68
 8017cd8:	0801ef9c 	.word	0x0801ef9c

08017cdc <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 8017cdc:	b580      	push	{r7, lr}
 8017cde:	b088      	sub	sp, #32
 8017ce0:	af04      	add	r7, sp, #16
 8017ce2:	60f8      	str	r0, [r7, #12]
 8017ce4:	60b9      	str	r1, [r7, #8]
 8017ce6:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8017ce8:	68fb      	ldr	r3, [r7, #12]
 8017cea:	f103 0126 	add.w	r1, r3, #38	; 0x26
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 8017cee:	68fb      	ldr	r3, [r7, #12]
 8017cf0:	f103 0026 	add.w	r0, r3, #38	; 0x26
 8017cf4:	68fb      	ldr	r3, [r7, #12]
 8017cf6:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8017cf8:	2201      	movs	r2, #1
 8017cfa:	9203      	str	r2, [sp, #12]
 8017cfc:	68ba      	ldr	r2, [r7, #8]
 8017cfe:	9202      	str	r2, [sp, #8]
 8017d00:	4a06      	ldr	r2, [pc, #24]	; (8017d1c <etharp_request_dst+0x40>)
 8017d02:	9201      	str	r2, [sp, #4]
 8017d04:	9300      	str	r3, [sp, #0]
 8017d06:	4603      	mov	r3, r0
 8017d08:	687a      	ldr	r2, [r7, #4]
 8017d0a:	68f8      	ldr	r0, [r7, #12]
 8017d0c:	f7ff ff5a 	bl	8017bc4 <etharp_raw>
 8017d10:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 8017d12:	4618      	mov	r0, r3
 8017d14:	3710      	adds	r7, #16
 8017d16:	46bd      	mov	sp, r7
 8017d18:	bd80      	pop	{r7, pc}
 8017d1a:	bf00      	nop
 8017d1c:	0801f570 	.word	0x0801f570

08017d20 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 8017d20:	b580      	push	{r7, lr}
 8017d22:	b082      	sub	sp, #8
 8017d24:	af00      	add	r7, sp, #0
 8017d26:	6078      	str	r0, [r7, #4]
 8017d28:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 8017d2a:	4a05      	ldr	r2, [pc, #20]	; (8017d40 <etharp_request+0x20>)
 8017d2c:	6839      	ldr	r1, [r7, #0]
 8017d2e:	6878      	ldr	r0, [r7, #4]
 8017d30:	f7ff ffd4 	bl	8017cdc <etharp_request_dst>
 8017d34:	4603      	mov	r3, r0
}
 8017d36:	4618      	mov	r0, r3
 8017d38:	3708      	adds	r7, #8
 8017d3a:	46bd      	mov	sp, r7
 8017d3c:	bd80      	pop	{r7, pc}
 8017d3e:	bf00      	nop
 8017d40:	0801f568 	.word	0x0801f568

08017d44 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 8017d44:	b580      	push	{r7, lr}
 8017d46:	b08e      	sub	sp, #56	; 0x38
 8017d48:	af04      	add	r7, sp, #16
 8017d4a:	6078      	str	r0, [r7, #4]
 8017d4c:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 8017d4e:	4b87      	ldr	r3, [pc, #540]	; (8017f6c <icmp_input+0x228>)
 8017d50:	689b      	ldr	r3, [r3, #8]
 8017d52:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 8017d54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017d56:	781b      	ldrb	r3, [r3, #0]
 8017d58:	f003 030f 	and.w	r3, r3, #15
 8017d5c:	b2db      	uxtb	r3, r3
 8017d5e:	009b      	lsls	r3, r3, #2
 8017d60:	b2db      	uxtb	r3, r3
 8017d62:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 8017d64:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8017d66:	2b13      	cmp	r3, #19
 8017d68:	f240 80e8 	bls.w	8017f3c <icmp_input+0x1f8>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 8017d6c:	687b      	ldr	r3, [r7, #4]
 8017d6e:	895b      	ldrh	r3, [r3, #10]
 8017d70:	2b03      	cmp	r3, #3
 8017d72:	f240 80e5 	bls.w	8017f40 <icmp_input+0x1fc>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 8017d76:	687b      	ldr	r3, [r7, #4]
 8017d78:	685b      	ldr	r3, [r3, #4]
 8017d7a:	781b      	ldrb	r3, [r3, #0]
 8017d7c:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 8017d80:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 8017d84:	2b00      	cmp	r3, #0
 8017d86:	f000 80d2 	beq.w	8017f2e <icmp_input+0x1ea>
 8017d8a:	2b08      	cmp	r3, #8
 8017d8c:	f040 80d2 	bne.w	8017f34 <icmp_input+0x1f0>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 8017d90:	4b77      	ldr	r3, [pc, #476]	; (8017f70 <icmp_input+0x22c>)
 8017d92:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8017d94:	4b75      	ldr	r3, [pc, #468]	; (8017f6c <icmp_input+0x228>)
 8017d96:	695b      	ldr	r3, [r3, #20]
 8017d98:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8017d9c:	2be0      	cmp	r3, #224	; 0xe0
 8017d9e:	f000 80d6 	beq.w	8017f4e <icmp_input+0x20a>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 8017da2:	4b72      	ldr	r3, [pc, #456]	; (8017f6c <icmp_input+0x228>)
 8017da4:	695b      	ldr	r3, [r3, #20]
 8017da6:	4a71      	ldr	r2, [pc, #452]	; (8017f6c <icmp_input+0x228>)
 8017da8:	6812      	ldr	r2, [r2, #0]
 8017daa:	4611      	mov	r1, r2
 8017dac:	4618      	mov	r0, r3
 8017dae:	f000 fc13 	bl	80185d8 <ip4_addr_isbroadcast_u32>
 8017db2:	4603      	mov	r3, r0
 8017db4:	2b00      	cmp	r3, #0
 8017db6:	f040 80cc 	bne.w	8017f52 <icmp_input+0x20e>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 8017dba:	687b      	ldr	r3, [r7, #4]
 8017dbc:	891b      	ldrh	r3, [r3, #8]
 8017dbe:	2b07      	cmp	r3, #7
 8017dc0:	f240 80c0 	bls.w	8017f44 <icmp_input+0x200>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: bad ICMP echo received\n"));
        goto lenerr;
      }
#if CHECKSUM_CHECK_ICMP
      IF__NETIF_CHECKSUM_ENABLED(inp, NETIF_CHECKSUM_CHECK_ICMP) {
        if (inet_chksum_pbuf(p) != 0) {
 8017dc4:	6878      	ldr	r0, [r7, #4]
 8017dc6:	f7f7 fe7a 	bl	800fabe <inet_chksum_pbuf>
 8017dca:	4603      	mov	r3, r0
 8017dcc:	2b00      	cmp	r3, #0
 8017dce:	d003      	beq.n	8017dd8 <icmp_input+0x94>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: checksum failed for received ICMP echo\n"));
          pbuf_free(p);
 8017dd0:	6878      	ldr	r0, [r7, #4]
 8017dd2:	f7f9 f9bb 	bl	801114c <pbuf_free>
          ICMP_STATS_INC(icmp.chkerr);
          MIB2_STATS_INC(mib2.icmpinerrors);
          return;
 8017dd6:	e0c5      	b.n	8017f64 <icmp_input+0x220>
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8017dd8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8017dda:	330e      	adds	r3, #14
 8017ddc:	4619      	mov	r1, r3
 8017dde:	6878      	ldr	r0, [r7, #4]
 8017de0:	f7f9 f91e 	bl	8011020 <pbuf_add_header>
 8017de4:	4603      	mov	r3, r0
 8017de6:	2b00      	cmp	r3, #0
 8017de8:	d04b      	beq.n	8017e82 <icmp_input+0x13e>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 8017dea:	687b      	ldr	r3, [r7, #4]
 8017dec:	891a      	ldrh	r2, [r3, #8]
 8017dee:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8017df0:	4413      	add	r3, r2
 8017df2:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 8017df4:	687b      	ldr	r3, [r7, #4]
 8017df6:	891b      	ldrh	r3, [r3, #8]
 8017df8:	8b7a      	ldrh	r2, [r7, #26]
 8017dfa:	429a      	cmp	r2, r3
 8017dfc:	f0c0 80ab 	bcc.w	8017f56 <icmp_input+0x212>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 8017e00:	8b7b      	ldrh	r3, [r7, #26]
 8017e02:	f44f 7220 	mov.w	r2, #640	; 0x280
 8017e06:	4619      	mov	r1, r3
 8017e08:	200e      	movs	r0, #14
 8017e0a:	f7f8 febb 	bl	8010b84 <pbuf_alloc>
 8017e0e:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 8017e10:	697b      	ldr	r3, [r7, #20]
 8017e12:	2b00      	cmp	r3, #0
 8017e14:	f000 80a1 	beq.w	8017f5a <icmp_input+0x216>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 8017e18:	697b      	ldr	r3, [r7, #20]
 8017e1a:	895b      	ldrh	r3, [r3, #10]
 8017e1c:	461a      	mov	r2, r3
 8017e1e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8017e20:	3308      	adds	r3, #8
 8017e22:	429a      	cmp	r2, r3
 8017e24:	d203      	bcs.n	8017e2e <icmp_input+0xea>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 8017e26:	6978      	ldr	r0, [r7, #20]
 8017e28:	f7f9 f990 	bl	801114c <pbuf_free>
          goto icmperr;
 8017e2c:	e096      	b.n	8017f5c <icmp_input+0x218>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 8017e2e:	697b      	ldr	r3, [r7, #20]
 8017e30:	685b      	ldr	r3, [r3, #4]
 8017e32:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8017e34:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8017e36:	4618      	mov	r0, r3
 8017e38:	f002 fa2d 	bl	801a296 <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 8017e3c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8017e3e:	4619      	mov	r1, r3
 8017e40:	6978      	ldr	r0, [r7, #20]
 8017e42:	f7f9 f8fd 	bl	8011040 <pbuf_remove_header>
 8017e46:	4603      	mov	r3, r0
 8017e48:	2b00      	cmp	r3, #0
 8017e4a:	d009      	beq.n	8017e60 <icmp_input+0x11c>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 8017e4c:	4b49      	ldr	r3, [pc, #292]	; (8017f74 <icmp_input+0x230>)
 8017e4e:	22b6      	movs	r2, #182	; 0xb6
 8017e50:	4949      	ldr	r1, [pc, #292]	; (8017f78 <icmp_input+0x234>)
 8017e52:	484a      	ldr	r0, [pc, #296]	; (8017f7c <icmp_input+0x238>)
 8017e54:	f002 f850 	bl	8019ef8 <iprintf>
          pbuf_free(r);
 8017e58:	6978      	ldr	r0, [r7, #20]
 8017e5a:	f7f9 f977 	bl	801114c <pbuf_free>
          goto icmperr;
 8017e5e:	e07d      	b.n	8017f5c <icmp_input+0x218>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 8017e60:	6879      	ldr	r1, [r7, #4]
 8017e62:	6978      	ldr	r0, [r7, #20]
 8017e64:	f7f9 fa8a 	bl	801137c <pbuf_copy>
 8017e68:	4603      	mov	r3, r0
 8017e6a:	2b00      	cmp	r3, #0
 8017e6c:	d003      	beq.n	8017e76 <icmp_input+0x132>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 8017e6e:	6978      	ldr	r0, [r7, #20]
 8017e70:	f7f9 f96c 	bl	801114c <pbuf_free>
          goto icmperr;
 8017e74:	e072      	b.n	8017f5c <icmp_input+0x218>
        }
        /* free the original p */
        pbuf_free(p);
 8017e76:	6878      	ldr	r0, [r7, #4]
 8017e78:	f7f9 f968 	bl	801114c <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 8017e7c:	697b      	ldr	r3, [r7, #20]
 8017e7e:	607b      	str	r3, [r7, #4]
 8017e80:	e00f      	b.n	8017ea2 <icmp_input+0x15e>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8017e82:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8017e84:	330e      	adds	r3, #14
 8017e86:	4619      	mov	r1, r3
 8017e88:	6878      	ldr	r0, [r7, #4]
 8017e8a:	f7f9 f8d9 	bl	8011040 <pbuf_remove_header>
 8017e8e:	4603      	mov	r3, r0
 8017e90:	2b00      	cmp	r3, #0
 8017e92:	d006      	beq.n	8017ea2 <icmp_input+0x15e>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 8017e94:	4b37      	ldr	r3, [pc, #220]	; (8017f74 <icmp_input+0x230>)
 8017e96:	22c7      	movs	r2, #199	; 0xc7
 8017e98:	4939      	ldr	r1, [pc, #228]	; (8017f80 <icmp_input+0x23c>)
 8017e9a:	4838      	ldr	r0, [pc, #224]	; (8017f7c <icmp_input+0x238>)
 8017e9c:	f002 f82c 	bl	8019ef8 <iprintf>
          goto icmperr;
 8017ea0:	e05c      	b.n	8017f5c <icmp_input+0x218>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 8017ea2:	687b      	ldr	r3, [r7, #4]
 8017ea4:	685b      	ldr	r3, [r3, #4]
 8017ea6:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 8017ea8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8017eaa:	4619      	mov	r1, r3
 8017eac:	6878      	ldr	r0, [r7, #4]
 8017eae:	f7f9 f8b7 	bl	8011020 <pbuf_add_header>
 8017eb2:	4603      	mov	r3, r0
 8017eb4:	2b00      	cmp	r3, #0
 8017eb6:	d13c      	bne.n	8017f32 <icmp_input+0x1ee>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 8017eb8:	687b      	ldr	r3, [r7, #4]
 8017eba:	685b      	ldr	r3, [r3, #4]
 8017ebc:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 8017ebe:	69fb      	ldr	r3, [r7, #28]
 8017ec0:	681a      	ldr	r2, [r3, #0]
 8017ec2:	68fb      	ldr	r3, [r7, #12]
 8017ec4:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 8017ec6:	4b29      	ldr	r3, [pc, #164]	; (8017f6c <icmp_input+0x228>)
 8017ec8:	691a      	ldr	r2, [r3, #16]
 8017eca:	68fb      	ldr	r3, [r7, #12]
 8017ecc:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 8017ece:	693b      	ldr	r3, [r7, #16]
 8017ed0:	2200      	movs	r2, #0
 8017ed2:	701a      	strb	r2, [r3, #0]
#if CHECKSUM_GEN_ICMP
        IF__NETIF_CHECKSUM_ENABLED(inp, NETIF_CHECKSUM_GEN_ICMP) {
          /* adjust the checksum */
          if (iecho->chksum > PP_HTONS(0xffffU - (ICMP_ECHO << 8))) {
 8017ed4:	693b      	ldr	r3, [r7, #16]
 8017ed6:	885b      	ldrh	r3, [r3, #2]
 8017ed8:	b29b      	uxth	r3, r3
 8017eda:	f64f 72f7 	movw	r2, #65527	; 0xfff7
 8017ede:	4293      	cmp	r3, r2
 8017ee0:	d907      	bls.n	8017ef2 <icmp_input+0x1ae>
            iecho->chksum = (u16_t)(iecho->chksum + PP_HTONS((u16_t)(ICMP_ECHO << 8)) + 1);
 8017ee2:	693b      	ldr	r3, [r7, #16]
 8017ee4:	885b      	ldrh	r3, [r3, #2]
 8017ee6:	b29b      	uxth	r3, r3
 8017ee8:	3309      	adds	r3, #9
 8017eea:	b29a      	uxth	r2, r3
 8017eec:	693b      	ldr	r3, [r7, #16]
 8017eee:	805a      	strh	r2, [r3, #2]
 8017ef0:	e006      	b.n	8017f00 <icmp_input+0x1bc>
          } else {
            iecho->chksum = (u16_t)(iecho->chksum + PP_HTONS(ICMP_ECHO << 8));
 8017ef2:	693b      	ldr	r3, [r7, #16]
 8017ef4:	885b      	ldrh	r3, [r3, #2]
 8017ef6:	b29b      	uxth	r3, r3
 8017ef8:	3308      	adds	r3, #8
 8017efa:	b29a      	uxth	r2, r3
 8017efc:	693b      	ldr	r3, [r7, #16]
 8017efe:	805a      	strh	r2, [r3, #2]
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 8017f00:	68fb      	ldr	r3, [r7, #12]
 8017f02:	22ff      	movs	r2, #255	; 0xff
 8017f04:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 8017f06:	68fb      	ldr	r3, [r7, #12]
 8017f08:	2200      	movs	r2, #0
 8017f0a:	729a      	strb	r2, [r3, #10]
 8017f0c:	2200      	movs	r2, #0
 8017f0e:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 8017f10:	683b      	ldr	r3, [r7, #0]
 8017f12:	9302      	str	r3, [sp, #8]
 8017f14:	2301      	movs	r3, #1
 8017f16:	9301      	str	r3, [sp, #4]
 8017f18:	2300      	movs	r3, #0
 8017f1a:	9300      	str	r3, [sp, #0]
 8017f1c:	23ff      	movs	r3, #255	; 0xff
 8017f1e:	2200      	movs	r2, #0
 8017f20:	69f9      	ldr	r1, [r7, #28]
 8017f22:	6878      	ldr	r0, [r7, #4]
 8017f24:	f000 fa80 	bl	8018428 <ip4_output_if>
 8017f28:	4603      	mov	r3, r0
 8017f2a:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 8017f2c:	e001      	b.n	8017f32 <icmp_input+0x1ee>
      break;
 8017f2e:	bf00      	nop
 8017f30:	e000      	b.n	8017f34 <icmp_input+0x1f0>
      break;
 8017f32:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 8017f34:	6878      	ldr	r0, [r7, #4]
 8017f36:	f7f9 f909 	bl	801114c <pbuf_free>
  return;
 8017f3a:	e013      	b.n	8017f64 <icmp_input+0x220>
    goto lenerr;
 8017f3c:	bf00      	nop
 8017f3e:	e002      	b.n	8017f46 <icmp_input+0x202>
    goto lenerr;
 8017f40:	bf00      	nop
 8017f42:	e000      	b.n	8017f46 <icmp_input+0x202>
        goto lenerr;
 8017f44:	bf00      	nop
lenerr:
  pbuf_free(p);
 8017f46:	6878      	ldr	r0, [r7, #4]
 8017f48:	f7f9 f900 	bl	801114c <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8017f4c:	e00a      	b.n	8017f64 <icmp_input+0x220>
        goto icmperr;
 8017f4e:	bf00      	nop
 8017f50:	e004      	b.n	8017f5c <icmp_input+0x218>
        goto icmperr;
 8017f52:	bf00      	nop
 8017f54:	e002      	b.n	8017f5c <icmp_input+0x218>
          goto icmperr;
 8017f56:	bf00      	nop
 8017f58:	e000      	b.n	8017f5c <icmp_input+0x218>
          goto icmperr;
 8017f5a:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 8017f5c:	6878      	ldr	r0, [r7, #4]
 8017f5e:	f7f9 f8f5 	bl	801114c <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8017f62:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 8017f64:	3728      	adds	r7, #40	; 0x28
 8017f66:	46bd      	mov	sp, r7
 8017f68:	bd80      	pop	{r7, pc}
 8017f6a:	bf00      	nop
 8017f6c:	200007f8 	.word	0x200007f8
 8017f70:	2000080c 	.word	0x2000080c
 8017f74:	0801efe0 	.word	0x0801efe0
 8017f78:	0801f018 	.word	0x0801f018
 8017f7c:	0801f050 	.word	0x0801f050
 8017f80:	0801f078 	.word	0x0801f078

08017f84 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 8017f84:	b580      	push	{r7, lr}
 8017f86:	b082      	sub	sp, #8
 8017f88:	af00      	add	r7, sp, #0
 8017f8a:	6078      	str	r0, [r7, #4]
 8017f8c:	460b      	mov	r3, r1
 8017f8e:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 8017f90:	78fb      	ldrb	r3, [r7, #3]
 8017f92:	461a      	mov	r2, r3
 8017f94:	2103      	movs	r1, #3
 8017f96:	6878      	ldr	r0, [r7, #4]
 8017f98:	f000 f814 	bl	8017fc4 <icmp_send_response>
}
 8017f9c:	bf00      	nop
 8017f9e:	3708      	adds	r7, #8
 8017fa0:	46bd      	mov	sp, r7
 8017fa2:	bd80      	pop	{r7, pc}

08017fa4 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 8017fa4:	b580      	push	{r7, lr}
 8017fa6:	b082      	sub	sp, #8
 8017fa8:	af00      	add	r7, sp, #0
 8017faa:	6078      	str	r0, [r7, #4]
 8017fac:	460b      	mov	r3, r1
 8017fae:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 8017fb0:	78fb      	ldrb	r3, [r7, #3]
 8017fb2:	461a      	mov	r2, r3
 8017fb4:	210b      	movs	r1, #11
 8017fb6:	6878      	ldr	r0, [r7, #4]
 8017fb8:	f000 f804 	bl	8017fc4 <icmp_send_response>
}
 8017fbc:	bf00      	nop
 8017fbe:	3708      	adds	r7, #8
 8017fc0:	46bd      	mov	sp, r7
 8017fc2:	bd80      	pop	{r7, pc}

08017fc4 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 8017fc4:	b580      	push	{r7, lr}
 8017fc6:	b08c      	sub	sp, #48	; 0x30
 8017fc8:	af04      	add	r7, sp, #16
 8017fca:	6078      	str	r0, [r7, #4]
 8017fcc:	460b      	mov	r3, r1
 8017fce:	70fb      	strb	r3, [r7, #3]
 8017fd0:	4613      	mov	r3, r2
 8017fd2:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 8017fd4:	f44f 7220 	mov.w	r2, #640	; 0x280
 8017fd8:	2124      	movs	r1, #36	; 0x24
 8017fda:	2022      	movs	r0, #34	; 0x22
 8017fdc:	f7f8 fdd2 	bl	8010b84 <pbuf_alloc>
 8017fe0:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 8017fe2:	69fb      	ldr	r3, [r7, #28]
 8017fe4:	2b00      	cmp	r3, #0
 8017fe6:	d056      	beq.n	8018096 <icmp_send_response+0xd2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 8017fe8:	69fb      	ldr	r3, [r7, #28]
 8017fea:	895b      	ldrh	r3, [r3, #10]
 8017fec:	2b23      	cmp	r3, #35	; 0x23
 8017fee:	d806      	bhi.n	8017ffe <icmp_send_response+0x3a>
 8017ff0:	4b2b      	ldr	r3, [pc, #172]	; (80180a0 <icmp_send_response+0xdc>)
 8017ff2:	f44f 72b4 	mov.w	r2, #360	; 0x168
 8017ff6:	492b      	ldr	r1, [pc, #172]	; (80180a4 <icmp_send_response+0xe0>)
 8017ff8:	482b      	ldr	r0, [pc, #172]	; (80180a8 <icmp_send_response+0xe4>)
 8017ffa:	f001 ff7d 	bl	8019ef8 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 8017ffe:	687b      	ldr	r3, [r7, #4]
 8018000:	685b      	ldr	r3, [r3, #4]
 8018002:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 8018004:	69fb      	ldr	r3, [r7, #28]
 8018006:	685b      	ldr	r3, [r3, #4]
 8018008:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 801800a:	697b      	ldr	r3, [r7, #20]
 801800c:	78fa      	ldrb	r2, [r7, #3]
 801800e:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 8018010:	697b      	ldr	r3, [r7, #20]
 8018012:	78ba      	ldrb	r2, [r7, #2]
 8018014:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 8018016:	697b      	ldr	r3, [r7, #20]
 8018018:	2200      	movs	r2, #0
 801801a:	711a      	strb	r2, [r3, #4]
 801801c:	2200      	movs	r2, #0
 801801e:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 8018020:	697b      	ldr	r3, [r7, #20]
 8018022:	2200      	movs	r2, #0
 8018024:	719a      	strb	r2, [r3, #6]
 8018026:	2200      	movs	r2, #0
 8018028:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 801802a:	69fb      	ldr	r3, [r7, #28]
 801802c:	685b      	ldr	r3, [r3, #4]
 801802e:	f103 0008 	add.w	r0, r3, #8
 8018032:	687b      	ldr	r3, [r7, #4]
 8018034:	685b      	ldr	r3, [r3, #4]
 8018036:	221c      	movs	r2, #28
 8018038:	4619      	mov	r1, r3
 801803a:	f002 f92c 	bl	801a296 <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 801803e:	69bb      	ldr	r3, [r7, #24]
 8018040:	68db      	ldr	r3, [r3, #12]
 8018042:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 8018044:	f107 030c 	add.w	r3, r7, #12
 8018048:	4618      	mov	r0, r3
 801804a:	f000 f82f 	bl	80180ac <ip4_route>
 801804e:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 8018050:	693b      	ldr	r3, [r7, #16]
 8018052:	2b00      	cmp	r3, #0
 8018054:	d01b      	beq.n	801808e <icmp_send_response+0xca>
    /* calculate checksum */
    icmphdr->chksum = 0;
 8018056:	697b      	ldr	r3, [r7, #20]
 8018058:	2200      	movs	r2, #0
 801805a:	709a      	strb	r2, [r3, #2]
 801805c:	2200      	movs	r2, #0
 801805e:	70da      	strb	r2, [r3, #3]
#if CHECKSUM_GEN_ICMP
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
 8018060:	69fb      	ldr	r3, [r7, #28]
 8018062:	895b      	ldrh	r3, [r3, #10]
 8018064:	4619      	mov	r1, r3
 8018066:	6978      	ldr	r0, [r7, #20]
 8018068:	f7f7 fd17 	bl	800fa9a <inet_chksum>
 801806c:	4603      	mov	r3, r0
 801806e:	461a      	mov	r2, r3
 8018070:	697b      	ldr	r3, [r7, #20]
 8018072:	805a      	strh	r2, [r3, #2]
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 8018074:	f107 020c 	add.w	r2, r7, #12
 8018078:	693b      	ldr	r3, [r7, #16]
 801807a:	9302      	str	r3, [sp, #8]
 801807c:	2301      	movs	r3, #1
 801807e:	9301      	str	r3, [sp, #4]
 8018080:	2300      	movs	r3, #0
 8018082:	9300      	str	r3, [sp, #0]
 8018084:	23ff      	movs	r3, #255	; 0xff
 8018086:	2100      	movs	r1, #0
 8018088:	69f8      	ldr	r0, [r7, #28]
 801808a:	f000 f9cd 	bl	8018428 <ip4_output_if>
  }
  pbuf_free(q);
 801808e:	69f8      	ldr	r0, [r7, #28]
 8018090:	f7f9 f85c 	bl	801114c <pbuf_free>
 8018094:	e000      	b.n	8018098 <icmp_send_response+0xd4>
    return;
 8018096:	bf00      	nop
}
 8018098:	3720      	adds	r7, #32
 801809a:	46bd      	mov	sp, r7
 801809c:	bd80      	pop	{r7, pc}
 801809e:	bf00      	nop
 80180a0:	0801efe0 	.word	0x0801efe0
 80180a4:	0801f0ac 	.word	0x0801f0ac
 80180a8:	0801f050 	.word	0x0801f050

080180ac <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 80180ac:	b480      	push	{r7}
 80180ae:	b085      	sub	sp, #20
 80180b0:	af00      	add	r7, sp, #0
 80180b2:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 80180b4:	4b33      	ldr	r3, [pc, #204]	; (8018184 <ip4_route+0xd8>)
 80180b6:	681b      	ldr	r3, [r3, #0]
 80180b8:	60fb      	str	r3, [r7, #12]
 80180ba:	e036      	b.n	801812a <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 80180bc:	68fb      	ldr	r3, [r7, #12]
 80180be:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80180c2:	f003 0301 	and.w	r3, r3, #1
 80180c6:	b2db      	uxtb	r3, r3
 80180c8:	2b00      	cmp	r3, #0
 80180ca:	d02b      	beq.n	8018124 <ip4_route+0x78>
 80180cc:	68fb      	ldr	r3, [r7, #12]
 80180ce:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80180d2:	089b      	lsrs	r3, r3, #2
 80180d4:	f003 0301 	and.w	r3, r3, #1
 80180d8:	b2db      	uxtb	r3, r3
 80180da:	2b00      	cmp	r3, #0
 80180dc:	d022      	beq.n	8018124 <ip4_route+0x78>
 80180de:	68fb      	ldr	r3, [r7, #12]
 80180e0:	3304      	adds	r3, #4
 80180e2:	681b      	ldr	r3, [r3, #0]
 80180e4:	2b00      	cmp	r3, #0
 80180e6:	d01d      	beq.n	8018124 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 80180e8:	687b      	ldr	r3, [r7, #4]
 80180ea:	681a      	ldr	r2, [r3, #0]
 80180ec:	68fb      	ldr	r3, [r7, #12]
 80180ee:	3304      	adds	r3, #4
 80180f0:	681b      	ldr	r3, [r3, #0]
 80180f2:	405a      	eors	r2, r3
 80180f4:	68fb      	ldr	r3, [r7, #12]
 80180f6:	3308      	adds	r3, #8
 80180f8:	681b      	ldr	r3, [r3, #0]
 80180fa:	4013      	ands	r3, r2
 80180fc:	2b00      	cmp	r3, #0
 80180fe:	d101      	bne.n	8018104 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 8018100:	68fb      	ldr	r3, [r7, #12]
 8018102:	e038      	b.n	8018176 <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 8018104:	68fb      	ldr	r3, [r7, #12]
 8018106:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801810a:	f003 0302 	and.w	r3, r3, #2
 801810e:	2b00      	cmp	r3, #0
 8018110:	d108      	bne.n	8018124 <ip4_route+0x78>
 8018112:	687b      	ldr	r3, [r7, #4]
 8018114:	681a      	ldr	r2, [r3, #0]
 8018116:	68fb      	ldr	r3, [r7, #12]
 8018118:	330c      	adds	r3, #12
 801811a:	681b      	ldr	r3, [r3, #0]
 801811c:	429a      	cmp	r2, r3
 801811e:	d101      	bne.n	8018124 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 8018120:	68fb      	ldr	r3, [r7, #12]
 8018122:	e028      	b.n	8018176 <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 8018124:	68fb      	ldr	r3, [r7, #12]
 8018126:	681b      	ldr	r3, [r3, #0]
 8018128:	60fb      	str	r3, [r7, #12]
 801812a:	68fb      	ldr	r3, [r7, #12]
 801812c:	2b00      	cmp	r3, #0
 801812e:	d1c5      	bne.n	80180bc <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8018130:	4b15      	ldr	r3, [pc, #84]	; (8018188 <ip4_route+0xdc>)
 8018132:	681b      	ldr	r3, [r3, #0]
 8018134:	2b00      	cmp	r3, #0
 8018136:	d01a      	beq.n	801816e <ip4_route+0xc2>
 8018138:	4b13      	ldr	r3, [pc, #76]	; (8018188 <ip4_route+0xdc>)
 801813a:	681b      	ldr	r3, [r3, #0]
 801813c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8018140:	f003 0301 	and.w	r3, r3, #1
 8018144:	2b00      	cmp	r3, #0
 8018146:	d012      	beq.n	801816e <ip4_route+0xc2>
 8018148:	4b0f      	ldr	r3, [pc, #60]	; (8018188 <ip4_route+0xdc>)
 801814a:	681b      	ldr	r3, [r3, #0]
 801814c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8018150:	f003 0304 	and.w	r3, r3, #4
 8018154:	2b00      	cmp	r3, #0
 8018156:	d00a      	beq.n	801816e <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8018158:	4b0b      	ldr	r3, [pc, #44]	; (8018188 <ip4_route+0xdc>)
 801815a:	681b      	ldr	r3, [r3, #0]
 801815c:	3304      	adds	r3, #4
 801815e:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8018160:	2b00      	cmp	r3, #0
 8018162:	d004      	beq.n	801816e <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8018164:	687b      	ldr	r3, [r7, #4]
 8018166:	681b      	ldr	r3, [r3, #0]
 8018168:	b2db      	uxtb	r3, r3
 801816a:	2b7f      	cmp	r3, #127	; 0x7f
 801816c:	d101      	bne.n	8018172 <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 801816e:	2300      	movs	r3, #0
 8018170:	e001      	b.n	8018176 <ip4_route+0xca>
  }

  return netif_default;
 8018172:	4b05      	ldr	r3, [pc, #20]	; (8018188 <ip4_route+0xdc>)
 8018174:	681b      	ldr	r3, [r3, #0]
}
 8018176:	4618      	mov	r0, r3
 8018178:	3714      	adds	r7, #20
 801817a:	46bd      	mov	sp, r7
 801817c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018180:	4770      	bx	lr
 8018182:	bf00      	nop
 8018184:	200070c8 	.word	0x200070c8
 8018188:	200070cc 	.word	0x200070cc

0801818c <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 801818c:	b580      	push	{r7, lr}
 801818e:	b082      	sub	sp, #8
 8018190:	af00      	add	r7, sp, #0
 8018192:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 8018194:	687b      	ldr	r3, [r7, #4]
 8018196:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801819a:	f003 0301 	and.w	r3, r3, #1
 801819e:	b2db      	uxtb	r3, r3
 80181a0:	2b00      	cmp	r3, #0
 80181a2:	d016      	beq.n	80181d2 <ip4_input_accept+0x46>
 80181a4:	687b      	ldr	r3, [r7, #4]
 80181a6:	3304      	adds	r3, #4
 80181a8:	681b      	ldr	r3, [r3, #0]
 80181aa:	2b00      	cmp	r3, #0
 80181ac:	d011      	beq.n	80181d2 <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 80181ae:	4b0b      	ldr	r3, [pc, #44]	; (80181dc <ip4_input_accept+0x50>)
 80181b0:	695a      	ldr	r2, [r3, #20]
 80181b2:	687b      	ldr	r3, [r7, #4]
 80181b4:	3304      	adds	r3, #4
 80181b6:	681b      	ldr	r3, [r3, #0]
 80181b8:	429a      	cmp	r2, r3
 80181ba:	d008      	beq.n	80181ce <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 80181bc:	4b07      	ldr	r3, [pc, #28]	; (80181dc <ip4_input_accept+0x50>)
 80181be:	695b      	ldr	r3, [r3, #20]
 80181c0:	6879      	ldr	r1, [r7, #4]
 80181c2:	4618      	mov	r0, r3
 80181c4:	f000 fa08 	bl	80185d8 <ip4_addr_isbroadcast_u32>
 80181c8:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 80181ca:	2b00      	cmp	r3, #0
 80181cc:	d001      	beq.n	80181d2 <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 80181ce:	2301      	movs	r3, #1
 80181d0:	e000      	b.n	80181d4 <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 80181d2:	2300      	movs	r3, #0
}
 80181d4:	4618      	mov	r0, r3
 80181d6:	3708      	adds	r7, #8
 80181d8:	46bd      	mov	sp, r7
 80181da:	bd80      	pop	{r7, pc}
 80181dc:	200007f8 	.word	0x200007f8

080181e0 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 80181e0:	b580      	push	{r7, lr}
 80181e2:	b086      	sub	sp, #24
 80181e4:	af00      	add	r7, sp, #0
 80181e6:	6078      	str	r0, [r7, #4]
 80181e8:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 80181ea:	687b      	ldr	r3, [r7, #4]
 80181ec:	685b      	ldr	r3, [r3, #4]
 80181ee:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 80181f0:	697b      	ldr	r3, [r7, #20]
 80181f2:	781b      	ldrb	r3, [r3, #0]
 80181f4:	091b      	lsrs	r3, r3, #4
 80181f6:	b2db      	uxtb	r3, r3
 80181f8:	2b04      	cmp	r3, #4
 80181fa:	d004      	beq.n	8018206 <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 80181fc:	6878      	ldr	r0, [r7, #4]
 80181fe:	f7f8 ffa5 	bl	801114c <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 8018202:	2300      	movs	r3, #0
 8018204:	e107      	b.n	8018416 <ip4_input+0x236>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 8018206:	697b      	ldr	r3, [r7, #20]
 8018208:	781b      	ldrb	r3, [r3, #0]
 801820a:	f003 030f 	and.w	r3, r3, #15
 801820e:	b2db      	uxtb	r3, r3
 8018210:	009b      	lsls	r3, r3, #2
 8018212:	b2db      	uxtb	r3, r3
 8018214:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 8018216:	697b      	ldr	r3, [r7, #20]
 8018218:	885b      	ldrh	r3, [r3, #2]
 801821a:	b29b      	uxth	r3, r3
 801821c:	4618      	mov	r0, r3
 801821e:	f7f7 fbb1 	bl	800f984 <lwip_htons>
 8018222:	4603      	mov	r3, r0
 8018224:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 8018226:	687b      	ldr	r3, [r7, #4]
 8018228:	891b      	ldrh	r3, [r3, #8]
 801822a:	89ba      	ldrh	r2, [r7, #12]
 801822c:	429a      	cmp	r2, r3
 801822e:	d204      	bcs.n	801823a <ip4_input+0x5a>
    pbuf_realloc(p, iphdr_len);
 8018230:	89bb      	ldrh	r3, [r7, #12]
 8018232:	4619      	mov	r1, r3
 8018234:	6878      	ldr	r0, [r7, #4]
 8018236:	f7f8 fe05 	bl	8010e44 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 801823a:	687b      	ldr	r3, [r7, #4]
 801823c:	895b      	ldrh	r3, [r3, #10]
 801823e:	89fa      	ldrh	r2, [r7, #14]
 8018240:	429a      	cmp	r2, r3
 8018242:	d807      	bhi.n	8018254 <ip4_input+0x74>
 8018244:	687b      	ldr	r3, [r7, #4]
 8018246:	891b      	ldrh	r3, [r3, #8]
 8018248:	89ba      	ldrh	r2, [r7, #12]
 801824a:	429a      	cmp	r2, r3
 801824c:	d802      	bhi.n	8018254 <ip4_input+0x74>
 801824e:	89fb      	ldrh	r3, [r7, #14]
 8018250:	2b13      	cmp	r3, #19
 8018252:	d804      	bhi.n	801825e <ip4_input+0x7e>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 8018254:	6878      	ldr	r0, [r7, #4]
 8018256:	f7f8 ff79 	bl	801114c <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 801825a:	2300      	movs	r3, #0
 801825c:	e0db      	b.n	8018416 <ip4_input+0x236>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 801825e:	697b      	ldr	r3, [r7, #20]
 8018260:	691b      	ldr	r3, [r3, #16]
 8018262:	4a6f      	ldr	r2, [pc, #444]	; (8018420 <ip4_input+0x240>)
 8018264:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 8018266:	697b      	ldr	r3, [r7, #20]
 8018268:	68db      	ldr	r3, [r3, #12]
 801826a:	4a6d      	ldr	r2, [pc, #436]	; (8018420 <ip4_input+0x240>)
 801826c:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 801826e:	4b6c      	ldr	r3, [pc, #432]	; (8018420 <ip4_input+0x240>)
 8018270:	695b      	ldr	r3, [r3, #20]
 8018272:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8018276:	2be0      	cmp	r3, #224	; 0xe0
 8018278:	d112      	bne.n	80182a0 <ip4_input+0xc0>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 801827a:	683b      	ldr	r3, [r7, #0]
 801827c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8018280:	f003 0301 	and.w	r3, r3, #1
 8018284:	b2db      	uxtb	r3, r3
 8018286:	2b00      	cmp	r3, #0
 8018288:	d007      	beq.n	801829a <ip4_input+0xba>
 801828a:	683b      	ldr	r3, [r7, #0]
 801828c:	3304      	adds	r3, #4
 801828e:	681b      	ldr	r3, [r3, #0]
 8018290:	2b00      	cmp	r3, #0
 8018292:	d002      	beq.n	801829a <ip4_input+0xba>
      netif = inp;
 8018294:	683b      	ldr	r3, [r7, #0]
 8018296:	613b      	str	r3, [r7, #16]
 8018298:	e02a      	b.n	80182f0 <ip4_input+0x110>
    } else {
      netif = NULL;
 801829a:	2300      	movs	r3, #0
 801829c:	613b      	str	r3, [r7, #16]
 801829e:	e027      	b.n	80182f0 <ip4_input+0x110>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 80182a0:	6838      	ldr	r0, [r7, #0]
 80182a2:	f7ff ff73 	bl	801818c <ip4_input_accept>
 80182a6:	4603      	mov	r3, r0
 80182a8:	2b00      	cmp	r3, #0
 80182aa:	d002      	beq.n	80182b2 <ip4_input+0xd2>
      netif = inp;
 80182ac:	683b      	ldr	r3, [r7, #0]
 80182ae:	613b      	str	r3, [r7, #16]
 80182b0:	e01e      	b.n	80182f0 <ip4_input+0x110>
    } else {
      netif = NULL;
 80182b2:	2300      	movs	r3, #0
 80182b4:	613b      	str	r3, [r7, #16]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 80182b6:	4b5a      	ldr	r3, [pc, #360]	; (8018420 <ip4_input+0x240>)
 80182b8:	695b      	ldr	r3, [r3, #20]
 80182ba:	b2db      	uxtb	r3, r3
 80182bc:	2b7f      	cmp	r3, #127	; 0x7f
 80182be:	d017      	beq.n	80182f0 <ip4_input+0x110>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 80182c0:	4b58      	ldr	r3, [pc, #352]	; (8018424 <ip4_input+0x244>)
 80182c2:	681b      	ldr	r3, [r3, #0]
 80182c4:	613b      	str	r3, [r7, #16]
 80182c6:	e00e      	b.n	80182e6 <ip4_input+0x106>
          if (netif == inp) {
 80182c8:	693a      	ldr	r2, [r7, #16]
 80182ca:	683b      	ldr	r3, [r7, #0]
 80182cc:	429a      	cmp	r2, r3
 80182ce:	d006      	beq.n	80182de <ip4_input+0xfe>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 80182d0:	6938      	ldr	r0, [r7, #16]
 80182d2:	f7ff ff5b 	bl	801818c <ip4_input_accept>
 80182d6:	4603      	mov	r3, r0
 80182d8:	2b00      	cmp	r3, #0
 80182da:	d108      	bne.n	80182ee <ip4_input+0x10e>
 80182dc:	e000      	b.n	80182e0 <ip4_input+0x100>
            continue;
 80182de:	bf00      	nop
        NETIF_FOREACH(netif) {
 80182e0:	693b      	ldr	r3, [r7, #16]
 80182e2:	681b      	ldr	r3, [r3, #0]
 80182e4:	613b      	str	r3, [r7, #16]
 80182e6:	693b      	ldr	r3, [r7, #16]
 80182e8:	2b00      	cmp	r3, #0
 80182ea:	d1ed      	bne.n	80182c8 <ip4_input+0xe8>
 80182ec:	e000      	b.n	80182f0 <ip4_input+0x110>
            break;
 80182ee:	bf00      	nop
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 80182f0:	4b4b      	ldr	r3, [pc, #300]	; (8018420 <ip4_input+0x240>)
 80182f2:	691b      	ldr	r3, [r3, #16]
 80182f4:	6839      	ldr	r1, [r7, #0]
 80182f6:	4618      	mov	r0, r3
 80182f8:	f000 f96e 	bl	80185d8 <ip4_addr_isbroadcast_u32>
 80182fc:	4603      	mov	r3, r0
 80182fe:	2b00      	cmp	r3, #0
 8018300:	d105      	bne.n	801830e <ip4_input+0x12e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 8018302:	4b47      	ldr	r3, [pc, #284]	; (8018420 <ip4_input+0x240>)
 8018304:	691b      	ldr	r3, [r3, #16]
 8018306:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 801830a:	2be0      	cmp	r3, #224	; 0xe0
 801830c:	d104      	bne.n	8018318 <ip4_input+0x138>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 801830e:	6878      	ldr	r0, [r7, #4]
 8018310:	f7f8 ff1c 	bl	801114c <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 8018314:	2300      	movs	r3, #0
 8018316:	e07e      	b.n	8018416 <ip4_input+0x236>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 8018318:	693b      	ldr	r3, [r7, #16]
 801831a:	2b00      	cmp	r3, #0
 801831c:	d104      	bne.n	8018328 <ip4_input+0x148>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 801831e:	6878      	ldr	r0, [r7, #4]
 8018320:	f7f8 ff14 	bl	801114c <pbuf_free>
    return ERR_OK;
 8018324:	2300      	movs	r3, #0
 8018326:	e076      	b.n	8018416 <ip4_input+0x236>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 8018328:	697b      	ldr	r3, [r7, #20]
 801832a:	88db      	ldrh	r3, [r3, #6]
 801832c:	b29b      	uxth	r3, r3
 801832e:	461a      	mov	r2, r3
 8018330:	f64f 733f 	movw	r3, #65343	; 0xff3f
 8018334:	4013      	ands	r3, r2
 8018336:	2b00      	cmp	r3, #0
 8018338:	d00b      	beq.n	8018352 <ip4_input+0x172>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 801833a:	6878      	ldr	r0, [r7, #4]
 801833c:	f000 fc92 	bl	8018c64 <ip4_reass>
 8018340:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 8018342:	687b      	ldr	r3, [r7, #4]
 8018344:	2b00      	cmp	r3, #0
 8018346:	d101      	bne.n	801834c <ip4_input+0x16c>
      return ERR_OK;
 8018348:	2300      	movs	r3, #0
 801834a:	e064      	b.n	8018416 <ip4_input+0x236>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 801834c:	687b      	ldr	r3, [r7, #4]
 801834e:	685b      	ldr	r3, [r3, #4]
 8018350:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 8018352:	4a33      	ldr	r2, [pc, #204]	; (8018420 <ip4_input+0x240>)
 8018354:	693b      	ldr	r3, [r7, #16]
 8018356:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 8018358:	4a31      	ldr	r2, [pc, #196]	; (8018420 <ip4_input+0x240>)
 801835a:	683b      	ldr	r3, [r7, #0]
 801835c:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 801835e:	4a30      	ldr	r2, [pc, #192]	; (8018420 <ip4_input+0x240>)
 8018360:	697b      	ldr	r3, [r7, #20]
 8018362:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 8018364:	697b      	ldr	r3, [r7, #20]
 8018366:	781b      	ldrb	r3, [r3, #0]
 8018368:	f003 030f 	and.w	r3, r3, #15
 801836c:	b2db      	uxtb	r3, r3
 801836e:	009b      	lsls	r3, r3, #2
 8018370:	b2db      	uxtb	r3, r3
 8018372:	b29a      	uxth	r2, r3
 8018374:	4b2a      	ldr	r3, [pc, #168]	; (8018420 <ip4_input+0x240>)
 8018376:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 8018378:	89fb      	ldrh	r3, [r7, #14]
 801837a:	4619      	mov	r1, r3
 801837c:	6878      	ldr	r0, [r7, #4]
 801837e:	f7f8 fe5f 	bl	8011040 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 8018382:	697b      	ldr	r3, [r7, #20]
 8018384:	7a5b      	ldrb	r3, [r3, #9]
 8018386:	2b11      	cmp	r3, #17
 8018388:	d006      	beq.n	8018398 <ip4_input+0x1b8>
 801838a:	2b11      	cmp	r3, #17
 801838c:	dc13      	bgt.n	80183b6 <ip4_input+0x1d6>
 801838e:	2b01      	cmp	r3, #1
 8018390:	d00c      	beq.n	80183ac <ip4_input+0x1cc>
 8018392:	2b06      	cmp	r3, #6
 8018394:	d005      	beq.n	80183a2 <ip4_input+0x1c2>
 8018396:	e00e      	b.n	80183b6 <ip4_input+0x1d6>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 8018398:	6839      	ldr	r1, [r7, #0]
 801839a:	6878      	ldr	r0, [r7, #4]
 801839c:	f7fe fc42 	bl	8016c24 <udp_input>
        break;
 80183a0:	e026      	b.n	80183f0 <ip4_input+0x210>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 80183a2:	6839      	ldr	r1, [r7, #0]
 80183a4:	6878      	ldr	r0, [r7, #4]
 80183a6:	f7fa fcfd 	bl	8012da4 <tcp_input>
        break;
 80183aa:	e021      	b.n	80183f0 <ip4_input+0x210>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 80183ac:	6839      	ldr	r1, [r7, #0]
 80183ae:	6878      	ldr	r0, [r7, #4]
 80183b0:	f7ff fcc8 	bl	8017d44 <icmp_input>
        break;
 80183b4:	e01c      	b.n	80183f0 <ip4_input+0x210>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 80183b6:	4b1a      	ldr	r3, [pc, #104]	; (8018420 <ip4_input+0x240>)
 80183b8:	695b      	ldr	r3, [r3, #20]
 80183ba:	6939      	ldr	r1, [r7, #16]
 80183bc:	4618      	mov	r0, r3
 80183be:	f000 f90b 	bl	80185d8 <ip4_addr_isbroadcast_u32>
 80183c2:	4603      	mov	r3, r0
 80183c4:	2b00      	cmp	r3, #0
 80183c6:	d10f      	bne.n	80183e8 <ip4_input+0x208>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 80183c8:	4b15      	ldr	r3, [pc, #84]	; (8018420 <ip4_input+0x240>)
 80183ca:	695b      	ldr	r3, [r3, #20]
 80183cc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 80183d0:	2be0      	cmp	r3, #224	; 0xe0
 80183d2:	d009      	beq.n	80183e8 <ip4_input+0x208>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 80183d4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80183d8:	4619      	mov	r1, r3
 80183da:	6878      	ldr	r0, [r7, #4]
 80183dc:	f7f8 fea3 	bl	8011126 <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 80183e0:	2102      	movs	r1, #2
 80183e2:	6878      	ldr	r0, [r7, #4]
 80183e4:	f7ff fdce 	bl	8017f84 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 80183e8:	6878      	ldr	r0, [r7, #4]
 80183ea:	f7f8 feaf 	bl	801114c <pbuf_free>
        break;
 80183ee:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 80183f0:	4b0b      	ldr	r3, [pc, #44]	; (8018420 <ip4_input+0x240>)
 80183f2:	2200      	movs	r2, #0
 80183f4:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 80183f6:	4b0a      	ldr	r3, [pc, #40]	; (8018420 <ip4_input+0x240>)
 80183f8:	2200      	movs	r2, #0
 80183fa:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 80183fc:	4b08      	ldr	r3, [pc, #32]	; (8018420 <ip4_input+0x240>)
 80183fe:	2200      	movs	r2, #0
 8018400:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 8018402:	4b07      	ldr	r3, [pc, #28]	; (8018420 <ip4_input+0x240>)
 8018404:	2200      	movs	r2, #0
 8018406:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 8018408:	4b05      	ldr	r3, [pc, #20]	; (8018420 <ip4_input+0x240>)
 801840a:	2200      	movs	r2, #0
 801840c:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 801840e:	4b04      	ldr	r3, [pc, #16]	; (8018420 <ip4_input+0x240>)
 8018410:	2200      	movs	r2, #0
 8018412:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 8018414:	2300      	movs	r3, #0
}
 8018416:	4618      	mov	r0, r3
 8018418:	3718      	adds	r7, #24
 801841a:	46bd      	mov	sp, r7
 801841c:	bd80      	pop	{r7, pc}
 801841e:	bf00      	nop
 8018420:	200007f8 	.word	0x200007f8
 8018424:	200070c8 	.word	0x200070c8

08018428 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 8018428:	b580      	push	{r7, lr}
 801842a:	b08a      	sub	sp, #40	; 0x28
 801842c:	af04      	add	r7, sp, #16
 801842e:	60f8      	str	r0, [r7, #12]
 8018430:	60b9      	str	r1, [r7, #8]
 8018432:	607a      	str	r2, [r7, #4]
 8018434:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 8018436:	68bb      	ldr	r3, [r7, #8]
 8018438:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 801843a:	687b      	ldr	r3, [r7, #4]
 801843c:	2b00      	cmp	r3, #0
 801843e:	d009      	beq.n	8018454 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 8018440:	68bb      	ldr	r3, [r7, #8]
 8018442:	2b00      	cmp	r3, #0
 8018444:	d003      	beq.n	801844e <ip4_output_if+0x26>
 8018446:	68bb      	ldr	r3, [r7, #8]
 8018448:	681b      	ldr	r3, [r3, #0]
 801844a:	2b00      	cmp	r3, #0
 801844c:	d102      	bne.n	8018454 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 801844e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018450:	3304      	adds	r3, #4
 8018452:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 8018454:	78fa      	ldrb	r2, [r7, #3]
 8018456:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018458:	9302      	str	r3, [sp, #8]
 801845a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 801845e:	9301      	str	r3, [sp, #4]
 8018460:	f897 3020 	ldrb.w	r3, [r7, #32]
 8018464:	9300      	str	r3, [sp, #0]
 8018466:	4613      	mov	r3, r2
 8018468:	687a      	ldr	r2, [r7, #4]
 801846a:	6979      	ldr	r1, [r7, #20]
 801846c:	68f8      	ldr	r0, [r7, #12]
 801846e:	f000 f805 	bl	801847c <ip4_output_if_src>
 8018472:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 8018474:	4618      	mov	r0, r3
 8018476:	3718      	adds	r7, #24
 8018478:	46bd      	mov	sp, r7
 801847a:	bd80      	pop	{r7, pc}

0801847c <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 801847c:	b580      	push	{r7, lr}
 801847e:	b088      	sub	sp, #32
 8018480:	af00      	add	r7, sp, #0
 8018482:	60f8      	str	r0, [r7, #12]
 8018484:	60b9      	str	r1, [r7, #8]
 8018486:	607a      	str	r2, [r7, #4]
 8018488:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 801848a:	68fb      	ldr	r3, [r7, #12]
 801848c:	7b9b      	ldrb	r3, [r3, #14]
 801848e:	2b01      	cmp	r3, #1
 8018490:	d006      	beq.n	80184a0 <ip4_output_if_src+0x24>
 8018492:	4b4b      	ldr	r3, [pc, #300]	; (80185c0 <ip4_output_if_src+0x144>)
 8018494:	f44f 7255 	mov.w	r2, #852	; 0x354
 8018498:	494a      	ldr	r1, [pc, #296]	; (80185c4 <ip4_output_if_src+0x148>)
 801849a:	484b      	ldr	r0, [pc, #300]	; (80185c8 <ip4_output_if_src+0x14c>)
 801849c:	f001 fd2c 	bl	8019ef8 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 80184a0:	687b      	ldr	r3, [r7, #4]
 80184a2:	2b00      	cmp	r3, #0
 80184a4:	d060      	beq.n	8018568 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 80184a6:	2314      	movs	r3, #20
 80184a8:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 80184aa:	2114      	movs	r1, #20
 80184ac:	68f8      	ldr	r0, [r7, #12]
 80184ae:	f7f8 fdb7 	bl	8011020 <pbuf_add_header>
 80184b2:	4603      	mov	r3, r0
 80184b4:	2b00      	cmp	r3, #0
 80184b6:	d002      	beq.n	80184be <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 80184b8:	f06f 0301 	mvn.w	r3, #1
 80184bc:	e07c      	b.n	80185b8 <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 80184be:	68fb      	ldr	r3, [r7, #12]
 80184c0:	685b      	ldr	r3, [r3, #4]
 80184c2:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 80184c4:	68fb      	ldr	r3, [r7, #12]
 80184c6:	895b      	ldrh	r3, [r3, #10]
 80184c8:	2b13      	cmp	r3, #19
 80184ca:	d806      	bhi.n	80184da <ip4_output_if_src+0x5e>
 80184cc:	4b3c      	ldr	r3, [pc, #240]	; (80185c0 <ip4_output_if_src+0x144>)
 80184ce:	f44f 7262 	mov.w	r2, #904	; 0x388
 80184d2:	493e      	ldr	r1, [pc, #248]	; (80185cc <ip4_output_if_src+0x150>)
 80184d4:	483c      	ldr	r0, [pc, #240]	; (80185c8 <ip4_output_if_src+0x14c>)
 80184d6:	f001 fd0f 	bl	8019ef8 <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 80184da:	69fb      	ldr	r3, [r7, #28]
 80184dc:	78fa      	ldrb	r2, [r7, #3]
 80184de:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 80184e0:	69fb      	ldr	r3, [r7, #28]
 80184e2:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 80184e6:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 80184e8:	687b      	ldr	r3, [r7, #4]
 80184ea:	681a      	ldr	r2, [r3, #0]
 80184ec:	69fb      	ldr	r3, [r7, #28]
 80184ee:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 80184f0:	8b7b      	ldrh	r3, [r7, #26]
 80184f2:	089b      	lsrs	r3, r3, #2
 80184f4:	b29b      	uxth	r3, r3
 80184f6:	b2db      	uxtb	r3, r3
 80184f8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80184fc:	b2da      	uxtb	r2, r3
 80184fe:	69fb      	ldr	r3, [r7, #28]
 8018500:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 8018502:	69fb      	ldr	r3, [r7, #28]
 8018504:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8018508:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 801850a:	68fb      	ldr	r3, [r7, #12]
 801850c:	891b      	ldrh	r3, [r3, #8]
 801850e:	4618      	mov	r0, r3
 8018510:	f7f7 fa38 	bl	800f984 <lwip_htons>
 8018514:	4603      	mov	r3, r0
 8018516:	461a      	mov	r2, r3
 8018518:	69fb      	ldr	r3, [r7, #28]
 801851a:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 801851c:	69fb      	ldr	r3, [r7, #28]
 801851e:	2200      	movs	r2, #0
 8018520:	719a      	strb	r2, [r3, #6]
 8018522:	2200      	movs	r2, #0
 8018524:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 8018526:	4b2a      	ldr	r3, [pc, #168]	; (80185d0 <ip4_output_if_src+0x154>)
 8018528:	881b      	ldrh	r3, [r3, #0]
 801852a:	4618      	mov	r0, r3
 801852c:	f7f7 fa2a 	bl	800f984 <lwip_htons>
 8018530:	4603      	mov	r3, r0
 8018532:	461a      	mov	r2, r3
 8018534:	69fb      	ldr	r3, [r7, #28]
 8018536:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 8018538:	4b25      	ldr	r3, [pc, #148]	; (80185d0 <ip4_output_if_src+0x154>)
 801853a:	881b      	ldrh	r3, [r3, #0]
 801853c:	3301      	adds	r3, #1
 801853e:	b29a      	uxth	r2, r3
 8018540:	4b23      	ldr	r3, [pc, #140]	; (80185d0 <ip4_output_if_src+0x154>)
 8018542:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 8018544:	68bb      	ldr	r3, [r7, #8]
 8018546:	2b00      	cmp	r3, #0
 8018548:	d104      	bne.n	8018554 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 801854a:	4b22      	ldr	r3, [pc, #136]	; (80185d4 <ip4_output_if_src+0x158>)
 801854c:	681a      	ldr	r2, [r3, #0]
 801854e:	69fb      	ldr	r3, [r7, #28]
 8018550:	60da      	str	r2, [r3, #12]
 8018552:	e003      	b.n	801855c <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 8018554:	68bb      	ldr	r3, [r7, #8]
 8018556:	681a      	ldr	r2, [r3, #0]
 8018558:	69fb      	ldr	r3, [r7, #28]
 801855a:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 801855c:	69fb      	ldr	r3, [r7, #28]
 801855e:	2200      	movs	r2, #0
 8018560:	729a      	strb	r2, [r3, #10]
 8018562:	2200      	movs	r2, #0
 8018564:	72da      	strb	r2, [r3, #11]
 8018566:	e00f      	b.n	8018588 <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 8018568:	68fb      	ldr	r3, [r7, #12]
 801856a:	895b      	ldrh	r3, [r3, #10]
 801856c:	2b13      	cmp	r3, #19
 801856e:	d802      	bhi.n	8018576 <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8018570:	f06f 0301 	mvn.w	r3, #1
 8018574:	e020      	b.n	80185b8 <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 8018576:	68fb      	ldr	r3, [r7, #12]
 8018578:	685b      	ldr	r3, [r3, #4]
 801857a:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 801857c:	69fb      	ldr	r3, [r7, #28]
 801857e:	691b      	ldr	r3, [r3, #16]
 8018580:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 8018582:	f107 0314 	add.w	r3, r7, #20
 8018586:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 8018588:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801858a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 801858c:	2b00      	cmp	r3, #0
 801858e:	d00c      	beq.n	80185aa <ip4_output_if_src+0x12e>
 8018590:	68fb      	ldr	r3, [r7, #12]
 8018592:	891a      	ldrh	r2, [r3, #8]
 8018594:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018596:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8018598:	429a      	cmp	r2, r3
 801859a:	d906      	bls.n	80185aa <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 801859c:	687a      	ldr	r2, [r7, #4]
 801859e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80185a0:	68f8      	ldr	r0, [r7, #12]
 80185a2:	f000 fd53 	bl	801904c <ip4_frag>
 80185a6:	4603      	mov	r3, r0
 80185a8:	e006      	b.n	80185b8 <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 80185aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80185ac:	695b      	ldr	r3, [r3, #20]
 80185ae:	687a      	ldr	r2, [r7, #4]
 80185b0:	68f9      	ldr	r1, [r7, #12]
 80185b2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80185b4:	4798      	blx	r3
 80185b6:	4603      	mov	r3, r0
}
 80185b8:	4618      	mov	r0, r3
 80185ba:	3720      	adds	r7, #32
 80185bc:	46bd      	mov	sp, r7
 80185be:	bd80      	pop	{r7, pc}
 80185c0:	0801f0d8 	.word	0x0801f0d8
 80185c4:	0801f10c 	.word	0x0801f10c
 80185c8:	0801f118 	.word	0x0801f118
 80185cc:	0801f140 	.word	0x0801f140
 80185d0:	20007226 	.word	0x20007226
 80185d4:	0801f564 	.word	0x0801f564

080185d8 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 80185d8:	b480      	push	{r7}
 80185da:	b085      	sub	sp, #20
 80185dc:	af00      	add	r7, sp, #0
 80185de:	6078      	str	r0, [r7, #4]
 80185e0:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 80185e2:	687b      	ldr	r3, [r7, #4]
 80185e4:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 80185e6:	687b      	ldr	r3, [r7, #4]
 80185e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80185ec:	d002      	beq.n	80185f4 <ip4_addr_isbroadcast_u32+0x1c>
 80185ee:	687b      	ldr	r3, [r7, #4]
 80185f0:	2b00      	cmp	r3, #0
 80185f2:	d101      	bne.n	80185f8 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 80185f4:	2301      	movs	r3, #1
 80185f6:	e02a      	b.n	801864e <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 80185f8:	683b      	ldr	r3, [r7, #0]
 80185fa:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80185fe:	f003 0302 	and.w	r3, r3, #2
 8018602:	2b00      	cmp	r3, #0
 8018604:	d101      	bne.n	801860a <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 8018606:	2300      	movs	r3, #0
 8018608:	e021      	b.n	801864e <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 801860a:	683b      	ldr	r3, [r7, #0]
 801860c:	3304      	adds	r3, #4
 801860e:	681b      	ldr	r3, [r3, #0]
 8018610:	687a      	ldr	r2, [r7, #4]
 8018612:	429a      	cmp	r2, r3
 8018614:	d101      	bne.n	801861a <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 8018616:	2300      	movs	r3, #0
 8018618:	e019      	b.n	801864e <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 801861a:	68fa      	ldr	r2, [r7, #12]
 801861c:	683b      	ldr	r3, [r7, #0]
 801861e:	3304      	adds	r3, #4
 8018620:	681b      	ldr	r3, [r3, #0]
 8018622:	405a      	eors	r2, r3
 8018624:	683b      	ldr	r3, [r7, #0]
 8018626:	3308      	adds	r3, #8
 8018628:	681b      	ldr	r3, [r3, #0]
 801862a:	4013      	ands	r3, r2
 801862c:	2b00      	cmp	r3, #0
 801862e:	d10d      	bne.n	801864c <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8018630:	683b      	ldr	r3, [r7, #0]
 8018632:	3308      	adds	r3, #8
 8018634:	681b      	ldr	r3, [r3, #0]
 8018636:	43da      	mvns	r2, r3
 8018638:	687b      	ldr	r3, [r7, #4]
 801863a:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 801863c:	683b      	ldr	r3, [r7, #0]
 801863e:	3308      	adds	r3, #8
 8018640:	681b      	ldr	r3, [r3, #0]
 8018642:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8018644:	429a      	cmp	r2, r3
 8018646:	d101      	bne.n	801864c <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 8018648:	2301      	movs	r3, #1
 801864a:	e000      	b.n	801864e <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 801864c:	2300      	movs	r3, #0
  }
}
 801864e:	4618      	mov	r0, r3
 8018650:	3714      	adds	r7, #20
 8018652:	46bd      	mov	sp, r7
 8018654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018658:	4770      	bx	lr
	...

0801865c <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 801865c:	b580      	push	{r7, lr}
 801865e:	b084      	sub	sp, #16
 8018660:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 8018662:	2300      	movs	r3, #0
 8018664:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 8018666:	4b12      	ldr	r3, [pc, #72]	; (80186b0 <ip_reass_tmr+0x54>)
 8018668:	681b      	ldr	r3, [r3, #0]
 801866a:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 801866c:	e018      	b.n	80186a0 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 801866e:	68fb      	ldr	r3, [r7, #12]
 8018670:	7fdb      	ldrb	r3, [r3, #31]
 8018672:	2b00      	cmp	r3, #0
 8018674:	d00b      	beq.n	801868e <ip_reass_tmr+0x32>
      r->timer--;
 8018676:	68fb      	ldr	r3, [r7, #12]
 8018678:	7fdb      	ldrb	r3, [r3, #31]
 801867a:	3b01      	subs	r3, #1
 801867c:	b2da      	uxtb	r2, r3
 801867e:	68fb      	ldr	r3, [r7, #12]
 8018680:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 8018682:	68fb      	ldr	r3, [r7, #12]
 8018684:	60bb      	str	r3, [r7, #8]
      r = r->next;
 8018686:	68fb      	ldr	r3, [r7, #12]
 8018688:	681b      	ldr	r3, [r3, #0]
 801868a:	60fb      	str	r3, [r7, #12]
 801868c:	e008      	b.n	80186a0 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 801868e:	68fb      	ldr	r3, [r7, #12]
 8018690:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 8018692:	68fb      	ldr	r3, [r7, #12]
 8018694:	681b      	ldr	r3, [r3, #0]
 8018696:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 8018698:	68b9      	ldr	r1, [r7, #8]
 801869a:	6878      	ldr	r0, [r7, #4]
 801869c:	f000 f80a 	bl	80186b4 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 80186a0:	68fb      	ldr	r3, [r7, #12]
 80186a2:	2b00      	cmp	r3, #0
 80186a4:	d1e3      	bne.n	801866e <ip_reass_tmr+0x12>
    }
  }
}
 80186a6:	bf00      	nop
 80186a8:	bf00      	nop
 80186aa:	3710      	adds	r7, #16
 80186ac:	46bd      	mov	sp, r7
 80186ae:	bd80      	pop	{r7, pc}
 80186b0:	20007228 	.word	0x20007228

080186b4 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 80186b4:	b580      	push	{r7, lr}
 80186b6:	b088      	sub	sp, #32
 80186b8:	af00      	add	r7, sp, #0
 80186ba:	6078      	str	r0, [r7, #4]
 80186bc:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 80186be:	2300      	movs	r3, #0
 80186c0:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 80186c2:	683a      	ldr	r2, [r7, #0]
 80186c4:	687b      	ldr	r3, [r7, #4]
 80186c6:	429a      	cmp	r2, r3
 80186c8:	d105      	bne.n	80186d6 <ip_reass_free_complete_datagram+0x22>
 80186ca:	4b45      	ldr	r3, [pc, #276]	; (80187e0 <ip_reass_free_complete_datagram+0x12c>)
 80186cc:	22ab      	movs	r2, #171	; 0xab
 80186ce:	4945      	ldr	r1, [pc, #276]	; (80187e4 <ip_reass_free_complete_datagram+0x130>)
 80186d0:	4845      	ldr	r0, [pc, #276]	; (80187e8 <ip_reass_free_complete_datagram+0x134>)
 80186d2:	f001 fc11 	bl	8019ef8 <iprintf>
  if (prev != NULL) {
 80186d6:	683b      	ldr	r3, [r7, #0]
 80186d8:	2b00      	cmp	r3, #0
 80186da:	d00a      	beq.n	80186f2 <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 80186dc:	683b      	ldr	r3, [r7, #0]
 80186de:	681b      	ldr	r3, [r3, #0]
 80186e0:	687a      	ldr	r2, [r7, #4]
 80186e2:	429a      	cmp	r2, r3
 80186e4:	d005      	beq.n	80186f2 <ip_reass_free_complete_datagram+0x3e>
 80186e6:	4b3e      	ldr	r3, [pc, #248]	; (80187e0 <ip_reass_free_complete_datagram+0x12c>)
 80186e8:	22ad      	movs	r2, #173	; 0xad
 80186ea:	4940      	ldr	r1, [pc, #256]	; (80187ec <ip_reass_free_complete_datagram+0x138>)
 80186ec:	483e      	ldr	r0, [pc, #248]	; (80187e8 <ip_reass_free_complete_datagram+0x134>)
 80186ee:	f001 fc03 	bl	8019ef8 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 80186f2:	687b      	ldr	r3, [r7, #4]
 80186f4:	685b      	ldr	r3, [r3, #4]
 80186f6:	685b      	ldr	r3, [r3, #4]
 80186f8:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 80186fa:	697b      	ldr	r3, [r7, #20]
 80186fc:	889b      	ldrh	r3, [r3, #4]
 80186fe:	b29b      	uxth	r3, r3
 8018700:	2b00      	cmp	r3, #0
 8018702:	d12a      	bne.n	801875a <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 8018704:	687b      	ldr	r3, [r7, #4]
 8018706:	685b      	ldr	r3, [r3, #4]
 8018708:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 801870a:	697b      	ldr	r3, [r7, #20]
 801870c:	681a      	ldr	r2, [r3, #0]
 801870e:	687b      	ldr	r3, [r7, #4]
 8018710:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 8018712:	69bb      	ldr	r3, [r7, #24]
 8018714:	6858      	ldr	r0, [r3, #4]
 8018716:	687b      	ldr	r3, [r7, #4]
 8018718:	3308      	adds	r3, #8
 801871a:	2214      	movs	r2, #20
 801871c:	4619      	mov	r1, r3
 801871e:	f001 fdba 	bl	801a296 <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 8018722:	2101      	movs	r1, #1
 8018724:	69b8      	ldr	r0, [r7, #24]
 8018726:	f7ff fc3d 	bl	8017fa4 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 801872a:	69b8      	ldr	r0, [r7, #24]
 801872c:	f7f8 fd96 	bl	801125c <pbuf_clen>
 8018730:	4603      	mov	r3, r0
 8018732:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8018734:	8bfa      	ldrh	r2, [r7, #30]
 8018736:	8a7b      	ldrh	r3, [r7, #18]
 8018738:	4413      	add	r3, r2
 801873a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801873e:	db05      	blt.n	801874c <ip_reass_free_complete_datagram+0x98>
 8018740:	4b27      	ldr	r3, [pc, #156]	; (80187e0 <ip_reass_free_complete_datagram+0x12c>)
 8018742:	22bc      	movs	r2, #188	; 0xbc
 8018744:	492a      	ldr	r1, [pc, #168]	; (80187f0 <ip_reass_free_complete_datagram+0x13c>)
 8018746:	4828      	ldr	r0, [pc, #160]	; (80187e8 <ip_reass_free_complete_datagram+0x134>)
 8018748:	f001 fbd6 	bl	8019ef8 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 801874c:	8bfa      	ldrh	r2, [r7, #30]
 801874e:	8a7b      	ldrh	r3, [r7, #18]
 8018750:	4413      	add	r3, r2
 8018752:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 8018754:	69b8      	ldr	r0, [r7, #24]
 8018756:	f7f8 fcf9 	bl	801114c <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 801875a:	687b      	ldr	r3, [r7, #4]
 801875c:	685b      	ldr	r3, [r3, #4]
 801875e:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 8018760:	e01f      	b.n	80187a2 <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 8018762:	69bb      	ldr	r3, [r7, #24]
 8018764:	685b      	ldr	r3, [r3, #4]
 8018766:	617b      	str	r3, [r7, #20]
    pcur = p;
 8018768:	69bb      	ldr	r3, [r7, #24]
 801876a:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 801876c:	697b      	ldr	r3, [r7, #20]
 801876e:	681b      	ldr	r3, [r3, #0]
 8018770:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 8018772:	68f8      	ldr	r0, [r7, #12]
 8018774:	f7f8 fd72 	bl	801125c <pbuf_clen>
 8018778:	4603      	mov	r3, r0
 801877a:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 801877c:	8bfa      	ldrh	r2, [r7, #30]
 801877e:	8a7b      	ldrh	r3, [r7, #18]
 8018780:	4413      	add	r3, r2
 8018782:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8018786:	db05      	blt.n	8018794 <ip_reass_free_complete_datagram+0xe0>
 8018788:	4b15      	ldr	r3, [pc, #84]	; (80187e0 <ip_reass_free_complete_datagram+0x12c>)
 801878a:	22cc      	movs	r2, #204	; 0xcc
 801878c:	4918      	ldr	r1, [pc, #96]	; (80187f0 <ip_reass_free_complete_datagram+0x13c>)
 801878e:	4816      	ldr	r0, [pc, #88]	; (80187e8 <ip_reass_free_complete_datagram+0x134>)
 8018790:	f001 fbb2 	bl	8019ef8 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8018794:	8bfa      	ldrh	r2, [r7, #30]
 8018796:	8a7b      	ldrh	r3, [r7, #18]
 8018798:	4413      	add	r3, r2
 801879a:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 801879c:	68f8      	ldr	r0, [r7, #12]
 801879e:	f7f8 fcd5 	bl	801114c <pbuf_free>
  while (p != NULL) {
 80187a2:	69bb      	ldr	r3, [r7, #24]
 80187a4:	2b00      	cmp	r3, #0
 80187a6:	d1dc      	bne.n	8018762 <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 80187a8:	6839      	ldr	r1, [r7, #0]
 80187aa:	6878      	ldr	r0, [r7, #4]
 80187ac:	f000 f8c2 	bl	8018934 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 80187b0:	4b10      	ldr	r3, [pc, #64]	; (80187f4 <ip_reass_free_complete_datagram+0x140>)
 80187b2:	881b      	ldrh	r3, [r3, #0]
 80187b4:	8bfa      	ldrh	r2, [r7, #30]
 80187b6:	429a      	cmp	r2, r3
 80187b8:	d905      	bls.n	80187c6 <ip_reass_free_complete_datagram+0x112>
 80187ba:	4b09      	ldr	r3, [pc, #36]	; (80187e0 <ip_reass_free_complete_datagram+0x12c>)
 80187bc:	22d2      	movs	r2, #210	; 0xd2
 80187be:	490e      	ldr	r1, [pc, #56]	; (80187f8 <ip_reass_free_complete_datagram+0x144>)
 80187c0:	4809      	ldr	r0, [pc, #36]	; (80187e8 <ip_reass_free_complete_datagram+0x134>)
 80187c2:	f001 fb99 	bl	8019ef8 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 80187c6:	4b0b      	ldr	r3, [pc, #44]	; (80187f4 <ip_reass_free_complete_datagram+0x140>)
 80187c8:	881a      	ldrh	r2, [r3, #0]
 80187ca:	8bfb      	ldrh	r3, [r7, #30]
 80187cc:	1ad3      	subs	r3, r2, r3
 80187ce:	b29a      	uxth	r2, r3
 80187d0:	4b08      	ldr	r3, [pc, #32]	; (80187f4 <ip_reass_free_complete_datagram+0x140>)
 80187d2:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 80187d4:	8bfb      	ldrh	r3, [r7, #30]
}
 80187d6:	4618      	mov	r0, r3
 80187d8:	3720      	adds	r7, #32
 80187da:	46bd      	mov	sp, r7
 80187dc:	bd80      	pop	{r7, pc}
 80187de:	bf00      	nop
 80187e0:	0801f170 	.word	0x0801f170
 80187e4:	0801f1ac 	.word	0x0801f1ac
 80187e8:	0801f1b8 	.word	0x0801f1b8
 80187ec:	0801f1e0 	.word	0x0801f1e0
 80187f0:	0801f1f4 	.word	0x0801f1f4
 80187f4:	2000722c 	.word	0x2000722c
 80187f8:	0801f214 	.word	0x0801f214

080187fc <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 80187fc:	b580      	push	{r7, lr}
 80187fe:	b08a      	sub	sp, #40	; 0x28
 8018800:	af00      	add	r7, sp, #0
 8018802:	6078      	str	r0, [r7, #4]
 8018804:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 8018806:	2300      	movs	r3, #0
 8018808:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 801880a:	2300      	movs	r3, #0
 801880c:	623b      	str	r3, [r7, #32]
    prev = NULL;
 801880e:	2300      	movs	r3, #0
 8018810:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 8018812:	2300      	movs	r3, #0
 8018814:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 8018816:	2300      	movs	r3, #0
 8018818:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 801881a:	4b28      	ldr	r3, [pc, #160]	; (80188bc <ip_reass_remove_oldest_datagram+0xc0>)
 801881c:	681b      	ldr	r3, [r3, #0]
 801881e:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 8018820:	e030      	b.n	8018884 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 8018822:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018824:	695a      	ldr	r2, [r3, #20]
 8018826:	687b      	ldr	r3, [r7, #4]
 8018828:	68db      	ldr	r3, [r3, #12]
 801882a:	429a      	cmp	r2, r3
 801882c:	d10c      	bne.n	8018848 <ip_reass_remove_oldest_datagram+0x4c>
 801882e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018830:	699a      	ldr	r2, [r3, #24]
 8018832:	687b      	ldr	r3, [r7, #4]
 8018834:	691b      	ldr	r3, [r3, #16]
 8018836:	429a      	cmp	r2, r3
 8018838:	d106      	bne.n	8018848 <ip_reass_remove_oldest_datagram+0x4c>
 801883a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801883c:	899a      	ldrh	r2, [r3, #12]
 801883e:	687b      	ldr	r3, [r7, #4]
 8018840:	889b      	ldrh	r3, [r3, #4]
 8018842:	b29b      	uxth	r3, r3
 8018844:	429a      	cmp	r2, r3
 8018846:	d014      	beq.n	8018872 <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 8018848:	693b      	ldr	r3, [r7, #16]
 801884a:	3301      	adds	r3, #1
 801884c:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 801884e:	6a3b      	ldr	r3, [r7, #32]
 8018850:	2b00      	cmp	r3, #0
 8018852:	d104      	bne.n	801885e <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 8018854:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018856:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8018858:	69fb      	ldr	r3, [r7, #28]
 801885a:	61bb      	str	r3, [r7, #24]
 801885c:	e009      	b.n	8018872 <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 801885e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018860:	7fda      	ldrb	r2, [r3, #31]
 8018862:	6a3b      	ldr	r3, [r7, #32]
 8018864:	7fdb      	ldrb	r3, [r3, #31]
 8018866:	429a      	cmp	r2, r3
 8018868:	d803      	bhi.n	8018872 <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 801886a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801886c:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 801886e:	69fb      	ldr	r3, [r7, #28]
 8018870:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 8018872:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018874:	681b      	ldr	r3, [r3, #0]
 8018876:	2b00      	cmp	r3, #0
 8018878:	d001      	beq.n	801887e <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 801887a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801887c:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 801887e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018880:	681b      	ldr	r3, [r3, #0]
 8018882:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 8018884:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018886:	2b00      	cmp	r3, #0
 8018888:	d1cb      	bne.n	8018822 <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 801888a:	6a3b      	ldr	r3, [r7, #32]
 801888c:	2b00      	cmp	r3, #0
 801888e:	d008      	beq.n	80188a2 <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 8018890:	69b9      	ldr	r1, [r7, #24]
 8018892:	6a38      	ldr	r0, [r7, #32]
 8018894:	f7ff ff0e 	bl	80186b4 <ip_reass_free_complete_datagram>
 8018898:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 801889a:	697a      	ldr	r2, [r7, #20]
 801889c:	68fb      	ldr	r3, [r7, #12]
 801889e:	4413      	add	r3, r2
 80188a0:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 80188a2:	697a      	ldr	r2, [r7, #20]
 80188a4:	683b      	ldr	r3, [r7, #0]
 80188a6:	429a      	cmp	r2, r3
 80188a8:	da02      	bge.n	80188b0 <ip_reass_remove_oldest_datagram+0xb4>
 80188aa:	693b      	ldr	r3, [r7, #16]
 80188ac:	2b01      	cmp	r3, #1
 80188ae:	dcac      	bgt.n	801880a <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 80188b0:	697b      	ldr	r3, [r7, #20]
}
 80188b2:	4618      	mov	r0, r3
 80188b4:	3728      	adds	r7, #40	; 0x28
 80188b6:	46bd      	mov	sp, r7
 80188b8:	bd80      	pop	{r7, pc}
 80188ba:	bf00      	nop
 80188bc:	20007228 	.word	0x20007228

080188c0 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 80188c0:	b580      	push	{r7, lr}
 80188c2:	b084      	sub	sp, #16
 80188c4:	af00      	add	r7, sp, #0
 80188c6:	6078      	str	r0, [r7, #4]
 80188c8:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 80188ca:	2004      	movs	r0, #4
 80188cc:	f7f7 fd78 	bl	80103c0 <memp_malloc>
 80188d0:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 80188d2:	68fb      	ldr	r3, [r7, #12]
 80188d4:	2b00      	cmp	r3, #0
 80188d6:	d110      	bne.n	80188fa <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 80188d8:	6839      	ldr	r1, [r7, #0]
 80188da:	6878      	ldr	r0, [r7, #4]
 80188dc:	f7ff ff8e 	bl	80187fc <ip_reass_remove_oldest_datagram>
 80188e0:	4602      	mov	r2, r0
 80188e2:	683b      	ldr	r3, [r7, #0]
 80188e4:	4293      	cmp	r3, r2
 80188e6:	dc03      	bgt.n	80188f0 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 80188e8:	2004      	movs	r0, #4
 80188ea:	f7f7 fd69 	bl	80103c0 <memp_malloc>
 80188ee:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 80188f0:	68fb      	ldr	r3, [r7, #12]
 80188f2:	2b00      	cmp	r3, #0
 80188f4:	d101      	bne.n	80188fa <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 80188f6:	2300      	movs	r3, #0
 80188f8:	e016      	b.n	8018928 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 80188fa:	2220      	movs	r2, #32
 80188fc:	2100      	movs	r1, #0
 80188fe:	68f8      	ldr	r0, [r7, #12]
 8018900:	f001 fc50 	bl	801a1a4 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 8018904:	68fb      	ldr	r3, [r7, #12]
 8018906:	220f      	movs	r2, #15
 8018908:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 801890a:	4b09      	ldr	r3, [pc, #36]	; (8018930 <ip_reass_enqueue_new_datagram+0x70>)
 801890c:	681a      	ldr	r2, [r3, #0]
 801890e:	68fb      	ldr	r3, [r7, #12]
 8018910:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 8018912:	4a07      	ldr	r2, [pc, #28]	; (8018930 <ip_reass_enqueue_new_datagram+0x70>)
 8018914:	68fb      	ldr	r3, [r7, #12]
 8018916:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 8018918:	68fb      	ldr	r3, [r7, #12]
 801891a:	3308      	adds	r3, #8
 801891c:	2214      	movs	r2, #20
 801891e:	6879      	ldr	r1, [r7, #4]
 8018920:	4618      	mov	r0, r3
 8018922:	f001 fcb8 	bl	801a296 <memcpy>
  return ipr;
 8018926:	68fb      	ldr	r3, [r7, #12]
}
 8018928:	4618      	mov	r0, r3
 801892a:	3710      	adds	r7, #16
 801892c:	46bd      	mov	sp, r7
 801892e:	bd80      	pop	{r7, pc}
 8018930:	20007228 	.word	0x20007228

08018934 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8018934:	b580      	push	{r7, lr}
 8018936:	b082      	sub	sp, #8
 8018938:	af00      	add	r7, sp, #0
 801893a:	6078      	str	r0, [r7, #4]
 801893c:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 801893e:	4b10      	ldr	r3, [pc, #64]	; (8018980 <ip_reass_dequeue_datagram+0x4c>)
 8018940:	681b      	ldr	r3, [r3, #0]
 8018942:	687a      	ldr	r2, [r7, #4]
 8018944:	429a      	cmp	r2, r3
 8018946:	d104      	bne.n	8018952 <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 8018948:	687b      	ldr	r3, [r7, #4]
 801894a:	681b      	ldr	r3, [r3, #0]
 801894c:	4a0c      	ldr	r2, [pc, #48]	; (8018980 <ip_reass_dequeue_datagram+0x4c>)
 801894e:	6013      	str	r3, [r2, #0]
 8018950:	e00d      	b.n	801896e <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 8018952:	683b      	ldr	r3, [r7, #0]
 8018954:	2b00      	cmp	r3, #0
 8018956:	d106      	bne.n	8018966 <ip_reass_dequeue_datagram+0x32>
 8018958:	4b0a      	ldr	r3, [pc, #40]	; (8018984 <ip_reass_dequeue_datagram+0x50>)
 801895a:	f240 1245 	movw	r2, #325	; 0x145
 801895e:	490a      	ldr	r1, [pc, #40]	; (8018988 <ip_reass_dequeue_datagram+0x54>)
 8018960:	480a      	ldr	r0, [pc, #40]	; (801898c <ip_reass_dequeue_datagram+0x58>)
 8018962:	f001 fac9 	bl	8019ef8 <iprintf>
    prev->next = ipr->next;
 8018966:	687b      	ldr	r3, [r7, #4]
 8018968:	681a      	ldr	r2, [r3, #0]
 801896a:	683b      	ldr	r3, [r7, #0]
 801896c:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 801896e:	6879      	ldr	r1, [r7, #4]
 8018970:	2004      	movs	r0, #4
 8018972:	f7f7 fd95 	bl	80104a0 <memp_free>
}
 8018976:	bf00      	nop
 8018978:	3708      	adds	r7, #8
 801897a:	46bd      	mov	sp, r7
 801897c:	bd80      	pop	{r7, pc}
 801897e:	bf00      	nop
 8018980:	20007228 	.word	0x20007228
 8018984:	0801f170 	.word	0x0801f170
 8018988:	0801f238 	.word	0x0801f238
 801898c:	0801f1b8 	.word	0x0801f1b8

08018990 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 8018990:	b580      	push	{r7, lr}
 8018992:	b08c      	sub	sp, #48	; 0x30
 8018994:	af00      	add	r7, sp, #0
 8018996:	60f8      	str	r0, [r7, #12]
 8018998:	60b9      	str	r1, [r7, #8]
 801899a:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 801899c:	2300      	movs	r3, #0
 801899e:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 80189a0:	2301      	movs	r3, #1
 80189a2:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 80189a4:	68bb      	ldr	r3, [r7, #8]
 80189a6:	685b      	ldr	r3, [r3, #4]
 80189a8:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 80189aa:	69fb      	ldr	r3, [r7, #28]
 80189ac:	885b      	ldrh	r3, [r3, #2]
 80189ae:	b29b      	uxth	r3, r3
 80189b0:	4618      	mov	r0, r3
 80189b2:	f7f6 ffe7 	bl	800f984 <lwip_htons>
 80189b6:	4603      	mov	r3, r0
 80189b8:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 80189ba:	69fb      	ldr	r3, [r7, #28]
 80189bc:	781b      	ldrb	r3, [r3, #0]
 80189be:	f003 030f 	and.w	r3, r3, #15
 80189c2:	b2db      	uxtb	r3, r3
 80189c4:	009b      	lsls	r3, r3, #2
 80189c6:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 80189c8:	7e7b      	ldrb	r3, [r7, #25]
 80189ca:	b29b      	uxth	r3, r3
 80189cc:	8b7a      	ldrh	r2, [r7, #26]
 80189ce:	429a      	cmp	r2, r3
 80189d0:	d202      	bcs.n	80189d8 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 80189d2:	f04f 33ff 	mov.w	r3, #4294967295
 80189d6:	e135      	b.n	8018c44 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 80189d8:	7e7b      	ldrb	r3, [r7, #25]
 80189da:	b29b      	uxth	r3, r3
 80189dc:	8b7a      	ldrh	r2, [r7, #26]
 80189de:	1ad3      	subs	r3, r2, r3
 80189e0:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 80189e2:	69fb      	ldr	r3, [r7, #28]
 80189e4:	88db      	ldrh	r3, [r3, #6]
 80189e6:	b29b      	uxth	r3, r3
 80189e8:	4618      	mov	r0, r3
 80189ea:	f7f6 ffcb 	bl	800f984 <lwip_htons>
 80189ee:	4603      	mov	r3, r0
 80189f0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80189f4:	b29b      	uxth	r3, r3
 80189f6:	00db      	lsls	r3, r3, #3
 80189f8:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 80189fa:	68bb      	ldr	r3, [r7, #8]
 80189fc:	685b      	ldr	r3, [r3, #4]
 80189fe:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 8018a00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018a02:	2200      	movs	r2, #0
 8018a04:	701a      	strb	r2, [r3, #0]
 8018a06:	2200      	movs	r2, #0
 8018a08:	705a      	strb	r2, [r3, #1]
 8018a0a:	2200      	movs	r2, #0
 8018a0c:	709a      	strb	r2, [r3, #2]
 8018a0e:	2200      	movs	r2, #0
 8018a10:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 8018a12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018a14:	8afa      	ldrh	r2, [r7, #22]
 8018a16:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 8018a18:	8afa      	ldrh	r2, [r7, #22]
 8018a1a:	8b7b      	ldrh	r3, [r7, #26]
 8018a1c:	4413      	add	r3, r2
 8018a1e:	b29a      	uxth	r2, r3
 8018a20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018a22:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 8018a24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018a26:	88db      	ldrh	r3, [r3, #6]
 8018a28:	b29b      	uxth	r3, r3
 8018a2a:	8afa      	ldrh	r2, [r7, #22]
 8018a2c:	429a      	cmp	r2, r3
 8018a2e:	d902      	bls.n	8018a36 <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8018a30:	f04f 33ff 	mov.w	r3, #4294967295
 8018a34:	e106      	b.n	8018c44 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 8018a36:	68fb      	ldr	r3, [r7, #12]
 8018a38:	685b      	ldr	r3, [r3, #4]
 8018a3a:	627b      	str	r3, [r7, #36]	; 0x24
 8018a3c:	e068      	b.n	8018b10 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 8018a3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018a40:	685b      	ldr	r3, [r3, #4]
 8018a42:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 8018a44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018a46:	889b      	ldrh	r3, [r3, #4]
 8018a48:	b29a      	uxth	r2, r3
 8018a4a:	693b      	ldr	r3, [r7, #16]
 8018a4c:	889b      	ldrh	r3, [r3, #4]
 8018a4e:	b29b      	uxth	r3, r3
 8018a50:	429a      	cmp	r2, r3
 8018a52:	d235      	bcs.n	8018ac0 <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 8018a54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018a56:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8018a58:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 8018a5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018a5c:	2b00      	cmp	r3, #0
 8018a5e:	d020      	beq.n	8018aa2 <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 8018a60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018a62:	889b      	ldrh	r3, [r3, #4]
 8018a64:	b29a      	uxth	r2, r3
 8018a66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018a68:	88db      	ldrh	r3, [r3, #6]
 8018a6a:	b29b      	uxth	r3, r3
 8018a6c:	429a      	cmp	r2, r3
 8018a6e:	d307      	bcc.n	8018a80 <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 8018a70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018a72:	88db      	ldrh	r3, [r3, #6]
 8018a74:	b29a      	uxth	r2, r3
 8018a76:	693b      	ldr	r3, [r7, #16]
 8018a78:	889b      	ldrh	r3, [r3, #4]
 8018a7a:	b29b      	uxth	r3, r3
 8018a7c:	429a      	cmp	r2, r3
 8018a7e:	d902      	bls.n	8018a86 <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8018a80:	f04f 33ff 	mov.w	r3, #4294967295
 8018a84:	e0de      	b.n	8018c44 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 8018a86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018a88:	68ba      	ldr	r2, [r7, #8]
 8018a8a:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 8018a8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018a8e:	88db      	ldrh	r3, [r3, #6]
 8018a90:	b29a      	uxth	r2, r3
 8018a92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018a94:	889b      	ldrh	r3, [r3, #4]
 8018a96:	b29b      	uxth	r3, r3
 8018a98:	429a      	cmp	r2, r3
 8018a9a:	d03d      	beq.n	8018b18 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8018a9c:	2300      	movs	r3, #0
 8018a9e:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 8018aa0:	e03a      	b.n	8018b18 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 8018aa2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018aa4:	88db      	ldrh	r3, [r3, #6]
 8018aa6:	b29a      	uxth	r2, r3
 8018aa8:	693b      	ldr	r3, [r7, #16]
 8018aaa:	889b      	ldrh	r3, [r3, #4]
 8018aac:	b29b      	uxth	r3, r3
 8018aae:	429a      	cmp	r2, r3
 8018ab0:	d902      	bls.n	8018ab8 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8018ab2:	f04f 33ff 	mov.w	r3, #4294967295
 8018ab6:	e0c5      	b.n	8018c44 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 8018ab8:	68fb      	ldr	r3, [r7, #12]
 8018aba:	68ba      	ldr	r2, [r7, #8]
 8018abc:	605a      	str	r2, [r3, #4]
      break;
 8018abe:	e02b      	b.n	8018b18 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 8018ac0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018ac2:	889b      	ldrh	r3, [r3, #4]
 8018ac4:	b29a      	uxth	r2, r3
 8018ac6:	693b      	ldr	r3, [r7, #16]
 8018ac8:	889b      	ldrh	r3, [r3, #4]
 8018aca:	b29b      	uxth	r3, r3
 8018acc:	429a      	cmp	r2, r3
 8018ace:	d102      	bne.n	8018ad6 <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8018ad0:	f04f 33ff 	mov.w	r3, #4294967295
 8018ad4:	e0b6      	b.n	8018c44 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 8018ad6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018ad8:	889b      	ldrh	r3, [r3, #4]
 8018ada:	b29a      	uxth	r2, r3
 8018adc:	693b      	ldr	r3, [r7, #16]
 8018ade:	88db      	ldrh	r3, [r3, #6]
 8018ae0:	b29b      	uxth	r3, r3
 8018ae2:	429a      	cmp	r2, r3
 8018ae4:	d202      	bcs.n	8018aec <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8018ae6:	f04f 33ff 	mov.w	r3, #4294967295
 8018aea:	e0ab      	b.n	8018c44 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 8018aec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018aee:	2b00      	cmp	r3, #0
 8018af0:	d009      	beq.n	8018b06 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 8018af2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018af4:	88db      	ldrh	r3, [r3, #6]
 8018af6:	b29a      	uxth	r2, r3
 8018af8:	693b      	ldr	r3, [r7, #16]
 8018afa:	889b      	ldrh	r3, [r3, #4]
 8018afc:	b29b      	uxth	r3, r3
 8018afe:	429a      	cmp	r2, r3
 8018b00:	d001      	beq.n	8018b06 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8018b02:	2300      	movs	r3, #0
 8018b04:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 8018b06:	693b      	ldr	r3, [r7, #16]
 8018b08:	681b      	ldr	r3, [r3, #0]
 8018b0a:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 8018b0c:	693b      	ldr	r3, [r7, #16]
 8018b0e:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 8018b10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018b12:	2b00      	cmp	r3, #0
 8018b14:	d193      	bne.n	8018a3e <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 8018b16:	e000      	b.n	8018b1a <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 8018b18:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 8018b1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018b1c:	2b00      	cmp	r3, #0
 8018b1e:	d12d      	bne.n	8018b7c <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 8018b20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018b22:	2b00      	cmp	r3, #0
 8018b24:	d01c      	beq.n	8018b60 <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 8018b26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018b28:	88db      	ldrh	r3, [r3, #6]
 8018b2a:	b29a      	uxth	r2, r3
 8018b2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018b2e:	889b      	ldrh	r3, [r3, #4]
 8018b30:	b29b      	uxth	r3, r3
 8018b32:	429a      	cmp	r2, r3
 8018b34:	d906      	bls.n	8018b44 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 8018b36:	4b45      	ldr	r3, [pc, #276]	; (8018c4c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8018b38:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 8018b3c:	4944      	ldr	r1, [pc, #272]	; (8018c50 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 8018b3e:	4845      	ldr	r0, [pc, #276]	; (8018c54 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8018b40:	f001 f9da 	bl	8019ef8 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 8018b44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018b46:	68ba      	ldr	r2, [r7, #8]
 8018b48:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 8018b4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018b4c:	88db      	ldrh	r3, [r3, #6]
 8018b4e:	b29a      	uxth	r2, r3
 8018b50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018b52:	889b      	ldrh	r3, [r3, #4]
 8018b54:	b29b      	uxth	r3, r3
 8018b56:	429a      	cmp	r2, r3
 8018b58:	d010      	beq.n	8018b7c <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 8018b5a:	2300      	movs	r3, #0
 8018b5c:	623b      	str	r3, [r7, #32]
 8018b5e:	e00d      	b.n	8018b7c <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 8018b60:	68fb      	ldr	r3, [r7, #12]
 8018b62:	685b      	ldr	r3, [r3, #4]
 8018b64:	2b00      	cmp	r3, #0
 8018b66:	d006      	beq.n	8018b76 <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 8018b68:	4b38      	ldr	r3, [pc, #224]	; (8018c4c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8018b6a:	f44f 72df 	mov.w	r2, #446	; 0x1be
 8018b6e:	493a      	ldr	r1, [pc, #232]	; (8018c58 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 8018b70:	4838      	ldr	r0, [pc, #224]	; (8018c54 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8018b72:	f001 f9c1 	bl	8019ef8 <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 8018b76:	68fb      	ldr	r3, [r7, #12]
 8018b78:	68ba      	ldr	r2, [r7, #8]
 8018b7a:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 8018b7c:	687b      	ldr	r3, [r7, #4]
 8018b7e:	2b00      	cmp	r3, #0
 8018b80:	d105      	bne.n	8018b8e <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 8018b82:	68fb      	ldr	r3, [r7, #12]
 8018b84:	7f9b      	ldrb	r3, [r3, #30]
 8018b86:	f003 0301 	and.w	r3, r3, #1
 8018b8a:	2b00      	cmp	r3, #0
 8018b8c:	d059      	beq.n	8018c42 <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 8018b8e:	6a3b      	ldr	r3, [r7, #32]
 8018b90:	2b00      	cmp	r3, #0
 8018b92:	d04f      	beq.n	8018c34 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 8018b94:	68fb      	ldr	r3, [r7, #12]
 8018b96:	685b      	ldr	r3, [r3, #4]
 8018b98:	2b00      	cmp	r3, #0
 8018b9a:	d006      	beq.n	8018baa <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 8018b9c:	68fb      	ldr	r3, [r7, #12]
 8018b9e:	685b      	ldr	r3, [r3, #4]
 8018ba0:	685b      	ldr	r3, [r3, #4]
 8018ba2:	889b      	ldrh	r3, [r3, #4]
 8018ba4:	b29b      	uxth	r3, r3
 8018ba6:	2b00      	cmp	r3, #0
 8018ba8:	d002      	beq.n	8018bb0 <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 8018baa:	2300      	movs	r3, #0
 8018bac:	623b      	str	r3, [r7, #32]
 8018bae:	e041      	b.n	8018c34 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 8018bb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018bb2:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 8018bb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018bb6:	681b      	ldr	r3, [r3, #0]
 8018bb8:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 8018bba:	e012      	b.n	8018be2 <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 8018bbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018bbe:	685b      	ldr	r3, [r3, #4]
 8018bc0:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 8018bc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018bc4:	88db      	ldrh	r3, [r3, #6]
 8018bc6:	b29a      	uxth	r2, r3
 8018bc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018bca:	889b      	ldrh	r3, [r3, #4]
 8018bcc:	b29b      	uxth	r3, r3
 8018bce:	429a      	cmp	r2, r3
 8018bd0:	d002      	beq.n	8018bd8 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 8018bd2:	2300      	movs	r3, #0
 8018bd4:	623b      	str	r3, [r7, #32]
            break;
 8018bd6:	e007      	b.n	8018be8 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 8018bd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018bda:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 8018bdc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018bde:	681b      	ldr	r3, [r3, #0]
 8018be0:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 8018be2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018be4:	2b00      	cmp	r3, #0
 8018be6:	d1e9      	bne.n	8018bbc <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 8018be8:	6a3b      	ldr	r3, [r7, #32]
 8018bea:	2b00      	cmp	r3, #0
 8018bec:	d022      	beq.n	8018c34 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 8018bee:	68fb      	ldr	r3, [r7, #12]
 8018bf0:	685b      	ldr	r3, [r3, #4]
 8018bf2:	2b00      	cmp	r3, #0
 8018bf4:	d106      	bne.n	8018c04 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 8018bf6:	4b15      	ldr	r3, [pc, #84]	; (8018c4c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8018bf8:	f240 12df 	movw	r2, #479	; 0x1df
 8018bfc:	4917      	ldr	r1, [pc, #92]	; (8018c5c <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8018bfe:	4815      	ldr	r0, [pc, #84]	; (8018c54 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8018c00:	f001 f97a 	bl	8019ef8 <iprintf>
          LWIP_ASSERT("sanity check",
 8018c04:	68fb      	ldr	r3, [r7, #12]
 8018c06:	685b      	ldr	r3, [r3, #4]
 8018c08:	685b      	ldr	r3, [r3, #4]
 8018c0a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8018c0c:	429a      	cmp	r2, r3
 8018c0e:	d106      	bne.n	8018c1e <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 8018c10:	4b0e      	ldr	r3, [pc, #56]	; (8018c4c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8018c12:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8018c16:	4911      	ldr	r1, [pc, #68]	; (8018c5c <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8018c18:	480e      	ldr	r0, [pc, #56]	; (8018c54 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8018c1a:	f001 f96d 	bl	8019ef8 <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 8018c1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018c20:	681b      	ldr	r3, [r3, #0]
 8018c22:	2b00      	cmp	r3, #0
 8018c24:	d006      	beq.n	8018c34 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 8018c26:	4b09      	ldr	r3, [pc, #36]	; (8018c4c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8018c28:	f44f 72f1 	mov.w	r2, #482	; 0x1e2
 8018c2c:	490c      	ldr	r1, [pc, #48]	; (8018c60 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 8018c2e:	4809      	ldr	r0, [pc, #36]	; (8018c54 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8018c30:	f001 f962 	bl	8019ef8 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 8018c34:	6a3b      	ldr	r3, [r7, #32]
 8018c36:	2b00      	cmp	r3, #0
 8018c38:	bf14      	ite	ne
 8018c3a:	2301      	movne	r3, #1
 8018c3c:	2300      	moveq	r3, #0
 8018c3e:	b2db      	uxtb	r3, r3
 8018c40:	e000      	b.n	8018c44 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 8018c42:	2300      	movs	r3, #0
}
 8018c44:	4618      	mov	r0, r3
 8018c46:	3730      	adds	r7, #48	; 0x30
 8018c48:	46bd      	mov	sp, r7
 8018c4a:	bd80      	pop	{r7, pc}
 8018c4c:	0801f170 	.word	0x0801f170
 8018c50:	0801f254 	.word	0x0801f254
 8018c54:	0801f1b8 	.word	0x0801f1b8
 8018c58:	0801f274 	.word	0x0801f274
 8018c5c:	0801f2ac 	.word	0x0801f2ac
 8018c60:	0801f2bc 	.word	0x0801f2bc

08018c64 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 8018c64:	b580      	push	{r7, lr}
 8018c66:	b08e      	sub	sp, #56	; 0x38
 8018c68:	af00      	add	r7, sp, #0
 8018c6a:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 8018c6c:	687b      	ldr	r3, [r7, #4]
 8018c6e:	685b      	ldr	r3, [r3, #4]
 8018c70:	62bb      	str	r3, [r7, #40]	; 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 8018c72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018c74:	781b      	ldrb	r3, [r3, #0]
 8018c76:	f003 030f 	and.w	r3, r3, #15
 8018c7a:	b2db      	uxtb	r3, r3
 8018c7c:	009b      	lsls	r3, r3, #2
 8018c7e:	b2db      	uxtb	r3, r3
 8018c80:	2b14      	cmp	r3, #20
 8018c82:	f040 8171 	bne.w	8018f68 <ip4_reass+0x304>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 8018c86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018c88:	88db      	ldrh	r3, [r3, #6]
 8018c8a:	b29b      	uxth	r3, r3
 8018c8c:	4618      	mov	r0, r3
 8018c8e:	f7f6 fe79 	bl	800f984 <lwip_htons>
 8018c92:	4603      	mov	r3, r0
 8018c94:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8018c98:	b29b      	uxth	r3, r3
 8018c9a:	00db      	lsls	r3, r3, #3
 8018c9c:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8018c9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018ca0:	885b      	ldrh	r3, [r3, #2]
 8018ca2:	b29b      	uxth	r3, r3
 8018ca4:	4618      	mov	r0, r3
 8018ca6:	f7f6 fe6d 	bl	800f984 <lwip_htons>
 8018caa:	4603      	mov	r3, r0
 8018cac:	84bb      	strh	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 8018cae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018cb0:	781b      	ldrb	r3, [r3, #0]
 8018cb2:	f003 030f 	and.w	r3, r3, #15
 8018cb6:	b2db      	uxtb	r3, r3
 8018cb8:	009b      	lsls	r3, r3, #2
 8018cba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (hlen > len) {
 8018cbe:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8018cc2:	b29b      	uxth	r3, r3
 8018cc4:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8018cc6:	429a      	cmp	r2, r3
 8018cc8:	f0c0 8150 	bcc.w	8018f6c <ip4_reass+0x308>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 8018ccc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8018cd0:	b29b      	uxth	r3, r3
 8018cd2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8018cd4:	1ad3      	subs	r3, r2, r3
 8018cd6:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 8018cd8:	6878      	ldr	r0, [r7, #4]
 8018cda:	f7f8 fabf 	bl	801125c <pbuf_clen>
 8018cde:	4603      	mov	r3, r0
 8018ce0:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 8018ce2:	4b8c      	ldr	r3, [pc, #560]	; (8018f14 <ip4_reass+0x2b0>)
 8018ce4:	881b      	ldrh	r3, [r3, #0]
 8018ce6:	461a      	mov	r2, r3
 8018ce8:	8c3b      	ldrh	r3, [r7, #32]
 8018cea:	4413      	add	r3, r2
 8018cec:	2b0a      	cmp	r3, #10
 8018cee:	dd10      	ble.n	8018d12 <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8018cf0:	8c3b      	ldrh	r3, [r7, #32]
 8018cf2:	4619      	mov	r1, r3
 8018cf4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8018cf6:	f7ff fd81 	bl	80187fc <ip_reass_remove_oldest_datagram>
 8018cfa:	4603      	mov	r3, r0
 8018cfc:	2b00      	cmp	r3, #0
 8018cfe:	f000 8137 	beq.w	8018f70 <ip4_reass+0x30c>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 8018d02:	4b84      	ldr	r3, [pc, #528]	; (8018f14 <ip4_reass+0x2b0>)
 8018d04:	881b      	ldrh	r3, [r3, #0]
 8018d06:	461a      	mov	r2, r3
 8018d08:	8c3b      	ldrh	r3, [r7, #32]
 8018d0a:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8018d0c:	2b0a      	cmp	r3, #10
 8018d0e:	f300 812f 	bgt.w	8018f70 <ip4_reass+0x30c>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8018d12:	4b81      	ldr	r3, [pc, #516]	; (8018f18 <ip4_reass+0x2b4>)
 8018d14:	681b      	ldr	r3, [r3, #0]
 8018d16:	633b      	str	r3, [r7, #48]	; 0x30
 8018d18:	e015      	b.n	8018d46 <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 8018d1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018d1c:	695a      	ldr	r2, [r3, #20]
 8018d1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018d20:	68db      	ldr	r3, [r3, #12]
 8018d22:	429a      	cmp	r2, r3
 8018d24:	d10c      	bne.n	8018d40 <ip4_reass+0xdc>
 8018d26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018d28:	699a      	ldr	r2, [r3, #24]
 8018d2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018d2c:	691b      	ldr	r3, [r3, #16]
 8018d2e:	429a      	cmp	r2, r3
 8018d30:	d106      	bne.n	8018d40 <ip4_reass+0xdc>
 8018d32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018d34:	899a      	ldrh	r2, [r3, #12]
 8018d36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018d38:	889b      	ldrh	r3, [r3, #4]
 8018d3a:	b29b      	uxth	r3, r3
 8018d3c:	429a      	cmp	r2, r3
 8018d3e:	d006      	beq.n	8018d4e <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8018d40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018d42:	681b      	ldr	r3, [r3, #0]
 8018d44:	633b      	str	r3, [r7, #48]	; 0x30
 8018d46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018d48:	2b00      	cmp	r3, #0
 8018d4a:	d1e6      	bne.n	8018d1a <ip4_reass+0xb6>
 8018d4c:	e000      	b.n	8018d50 <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 8018d4e:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 8018d50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018d52:	2b00      	cmp	r3, #0
 8018d54:	d109      	bne.n	8018d6a <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 8018d56:	8c3b      	ldrh	r3, [r7, #32]
 8018d58:	4619      	mov	r1, r3
 8018d5a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8018d5c:	f7ff fdb0 	bl	80188c0 <ip_reass_enqueue_new_datagram>
 8018d60:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 8018d62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018d64:	2b00      	cmp	r3, #0
 8018d66:	d11c      	bne.n	8018da2 <ip4_reass+0x13e>
      goto nullreturn;
 8018d68:	e105      	b.n	8018f76 <ip4_reass+0x312>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8018d6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018d6c:	88db      	ldrh	r3, [r3, #6]
 8018d6e:	b29b      	uxth	r3, r3
 8018d70:	4618      	mov	r0, r3
 8018d72:	f7f6 fe07 	bl	800f984 <lwip_htons>
 8018d76:	4603      	mov	r3, r0
 8018d78:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8018d7c:	2b00      	cmp	r3, #0
 8018d7e:	d110      	bne.n	8018da2 <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 8018d80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018d82:	89db      	ldrh	r3, [r3, #14]
 8018d84:	4618      	mov	r0, r3
 8018d86:	f7f6 fdfd 	bl	800f984 <lwip_htons>
 8018d8a:	4603      	mov	r3, r0
 8018d8c:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8018d90:	2b00      	cmp	r3, #0
 8018d92:	d006      	beq.n	8018da2 <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 8018d94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018d96:	3308      	adds	r3, #8
 8018d98:	2214      	movs	r2, #20
 8018d9a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8018d9c:	4618      	mov	r0, r3
 8018d9e:	f001 fa7a 	bl	801a296 <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 8018da2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018da4:	88db      	ldrh	r3, [r3, #6]
 8018da6:	b29b      	uxth	r3, r3
 8018da8:	f003 0320 	and.w	r3, r3, #32
 8018dac:	2b00      	cmp	r3, #0
 8018dae:	bf0c      	ite	eq
 8018db0:	2301      	moveq	r3, #1
 8018db2:	2300      	movne	r3, #0
 8018db4:	b2db      	uxtb	r3, r3
 8018db6:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 8018db8:	69fb      	ldr	r3, [r7, #28]
 8018dba:	2b00      	cmp	r3, #0
 8018dbc:	d00e      	beq.n	8018ddc <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 8018dbe:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8018dc0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8018dc2:	4413      	add	r3, r2
 8018dc4:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 8018dc6:	8b7a      	ldrh	r2, [r7, #26]
 8018dc8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8018dca:	429a      	cmp	r2, r3
 8018dcc:	f0c0 80a0 	bcc.w	8018f10 <ip4_reass+0x2ac>
 8018dd0:	8b7b      	ldrh	r3, [r7, #26]
 8018dd2:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 8018dd6:	4293      	cmp	r3, r2
 8018dd8:	f200 809a 	bhi.w	8018f10 <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 8018ddc:	69fa      	ldr	r2, [r7, #28]
 8018dde:	6879      	ldr	r1, [r7, #4]
 8018de0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8018de2:	f7ff fdd5 	bl	8018990 <ip_reass_chain_frag_into_datagram_and_validate>
 8018de6:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 8018de8:	697b      	ldr	r3, [r7, #20]
 8018dea:	f1b3 3fff 	cmp.w	r3, #4294967295
 8018dee:	f000 809b 	beq.w	8018f28 <ip4_reass+0x2c4>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 8018df2:	4b48      	ldr	r3, [pc, #288]	; (8018f14 <ip4_reass+0x2b0>)
 8018df4:	881a      	ldrh	r2, [r3, #0]
 8018df6:	8c3b      	ldrh	r3, [r7, #32]
 8018df8:	4413      	add	r3, r2
 8018dfa:	b29a      	uxth	r2, r3
 8018dfc:	4b45      	ldr	r3, [pc, #276]	; (8018f14 <ip4_reass+0x2b0>)
 8018dfe:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 8018e00:	69fb      	ldr	r3, [r7, #28]
 8018e02:	2b00      	cmp	r3, #0
 8018e04:	d00d      	beq.n	8018e22 <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 8018e06:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8018e08:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8018e0a:	4413      	add	r3, r2
 8018e0c:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 8018e0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018e10:	8a7a      	ldrh	r2, [r7, #18]
 8018e12:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 8018e14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018e16:	7f9b      	ldrb	r3, [r3, #30]
 8018e18:	f043 0301 	orr.w	r3, r3, #1
 8018e1c:	b2da      	uxtb	r2, r3
 8018e1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018e20:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 8018e22:	697b      	ldr	r3, [r7, #20]
 8018e24:	2b01      	cmp	r3, #1
 8018e26:	d171      	bne.n	8018f0c <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 8018e28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018e2a:	8b9b      	ldrh	r3, [r3, #28]
 8018e2c:	3314      	adds	r3, #20
 8018e2e:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 8018e30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018e32:	685b      	ldr	r3, [r3, #4]
 8018e34:	685b      	ldr	r3, [r3, #4]
 8018e36:	681b      	ldr	r3, [r3, #0]
 8018e38:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 8018e3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018e3c:	685b      	ldr	r3, [r3, #4]
 8018e3e:	685b      	ldr	r3, [r3, #4]
 8018e40:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 8018e42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018e44:	3308      	adds	r3, #8
 8018e46:	2214      	movs	r2, #20
 8018e48:	4619      	mov	r1, r3
 8018e4a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8018e4c:	f001 fa23 	bl	801a296 <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 8018e50:	8a3b      	ldrh	r3, [r7, #16]
 8018e52:	4618      	mov	r0, r3
 8018e54:	f7f6 fd96 	bl	800f984 <lwip_htons>
 8018e58:	4603      	mov	r3, r0
 8018e5a:	461a      	mov	r2, r3
 8018e5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018e5e:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 8018e60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018e62:	2200      	movs	r2, #0
 8018e64:	719a      	strb	r2, [r3, #6]
 8018e66:	2200      	movs	r2, #0
 8018e68:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 8018e6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018e6c:	2200      	movs	r2, #0
 8018e6e:	729a      	strb	r2, [r3, #10]
 8018e70:	2200      	movs	r2, #0
 8018e72:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 8018e74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018e76:	685b      	ldr	r3, [r3, #4]
 8018e78:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 8018e7a:	e00d      	b.n	8018e98 <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 8018e7c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8018e7e:	685b      	ldr	r3, [r3, #4]
 8018e80:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 8018e82:	2114      	movs	r1, #20
 8018e84:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8018e86:	f7f8 f8db 	bl	8011040 <pbuf_remove_header>
      pbuf_cat(p, r);
 8018e8a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8018e8c:	6878      	ldr	r0, [r7, #4]
 8018e8e:	f7f8 fa1f 	bl	80112d0 <pbuf_cat>
      r = iprh->next_pbuf;
 8018e92:	68fb      	ldr	r3, [r7, #12]
 8018e94:	681b      	ldr	r3, [r3, #0]
 8018e96:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 8018e98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8018e9a:	2b00      	cmp	r3, #0
 8018e9c:	d1ee      	bne.n	8018e7c <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 8018e9e:	4b1e      	ldr	r3, [pc, #120]	; (8018f18 <ip4_reass+0x2b4>)
 8018ea0:	681b      	ldr	r3, [r3, #0]
 8018ea2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8018ea4:	429a      	cmp	r2, r3
 8018ea6:	d102      	bne.n	8018eae <ip4_reass+0x24a>
      ipr_prev = NULL;
 8018ea8:	2300      	movs	r3, #0
 8018eaa:	62fb      	str	r3, [r7, #44]	; 0x2c
 8018eac:	e010      	b.n	8018ed0 <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8018eae:	4b1a      	ldr	r3, [pc, #104]	; (8018f18 <ip4_reass+0x2b4>)
 8018eb0:	681b      	ldr	r3, [r3, #0]
 8018eb2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8018eb4:	e007      	b.n	8018ec6 <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 8018eb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018eb8:	681b      	ldr	r3, [r3, #0]
 8018eba:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8018ebc:	429a      	cmp	r2, r3
 8018ebe:	d006      	beq.n	8018ece <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8018ec0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018ec2:	681b      	ldr	r3, [r3, #0]
 8018ec4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8018ec6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8018ec8:	2b00      	cmp	r3, #0
 8018eca:	d1f4      	bne.n	8018eb6 <ip4_reass+0x252>
 8018ecc:	e000      	b.n	8018ed0 <ip4_reass+0x26c>
          break;
 8018ece:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 8018ed0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8018ed2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8018ed4:	f7ff fd2e 	bl	8018934 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 8018ed8:	6878      	ldr	r0, [r7, #4]
 8018eda:	f7f8 f9bf 	bl	801125c <pbuf_clen>
 8018ede:	4603      	mov	r3, r0
 8018ee0:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 8018ee2:	4b0c      	ldr	r3, [pc, #48]	; (8018f14 <ip4_reass+0x2b0>)
 8018ee4:	881b      	ldrh	r3, [r3, #0]
 8018ee6:	8c3a      	ldrh	r2, [r7, #32]
 8018ee8:	429a      	cmp	r2, r3
 8018eea:	d906      	bls.n	8018efa <ip4_reass+0x296>
 8018eec:	4b0b      	ldr	r3, [pc, #44]	; (8018f1c <ip4_reass+0x2b8>)
 8018eee:	f240 229b 	movw	r2, #667	; 0x29b
 8018ef2:	490b      	ldr	r1, [pc, #44]	; (8018f20 <ip4_reass+0x2bc>)
 8018ef4:	480b      	ldr	r0, [pc, #44]	; (8018f24 <ip4_reass+0x2c0>)
 8018ef6:	f000 ffff 	bl	8019ef8 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 8018efa:	4b06      	ldr	r3, [pc, #24]	; (8018f14 <ip4_reass+0x2b0>)
 8018efc:	881a      	ldrh	r2, [r3, #0]
 8018efe:	8c3b      	ldrh	r3, [r7, #32]
 8018f00:	1ad3      	subs	r3, r2, r3
 8018f02:	b29a      	uxth	r2, r3
 8018f04:	4b03      	ldr	r3, [pc, #12]	; (8018f14 <ip4_reass+0x2b0>)
 8018f06:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 8018f08:	687b      	ldr	r3, [r7, #4]
 8018f0a:	e038      	b.n	8018f7e <ip4_reass+0x31a>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 8018f0c:	2300      	movs	r3, #0
 8018f0e:	e036      	b.n	8018f7e <ip4_reass+0x31a>
      goto nullreturn_ipr;
 8018f10:	bf00      	nop
 8018f12:	e00a      	b.n	8018f2a <ip4_reass+0x2c6>
 8018f14:	2000722c 	.word	0x2000722c
 8018f18:	20007228 	.word	0x20007228
 8018f1c:	0801f170 	.word	0x0801f170
 8018f20:	0801f2e0 	.word	0x0801f2e0
 8018f24:	0801f1b8 	.word	0x0801f1b8
    goto nullreturn_ipr;
 8018f28:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 8018f2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018f2c:	2b00      	cmp	r3, #0
 8018f2e:	d106      	bne.n	8018f3e <ip4_reass+0x2da>
 8018f30:	4b15      	ldr	r3, [pc, #84]	; (8018f88 <ip4_reass+0x324>)
 8018f32:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 8018f36:	4915      	ldr	r1, [pc, #84]	; (8018f8c <ip4_reass+0x328>)
 8018f38:	4815      	ldr	r0, [pc, #84]	; (8018f90 <ip4_reass+0x32c>)
 8018f3a:	f000 ffdd 	bl	8019ef8 <iprintf>
  if (ipr->p == NULL) {
 8018f3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8018f40:	685b      	ldr	r3, [r3, #4]
 8018f42:	2b00      	cmp	r3, #0
 8018f44:	d116      	bne.n	8018f74 <ip4_reass+0x310>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 8018f46:	4b13      	ldr	r3, [pc, #76]	; (8018f94 <ip4_reass+0x330>)
 8018f48:	681b      	ldr	r3, [r3, #0]
 8018f4a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8018f4c:	429a      	cmp	r2, r3
 8018f4e:	d006      	beq.n	8018f5e <ip4_reass+0x2fa>
 8018f50:	4b0d      	ldr	r3, [pc, #52]	; (8018f88 <ip4_reass+0x324>)
 8018f52:	f240 22ab 	movw	r2, #683	; 0x2ab
 8018f56:	4910      	ldr	r1, [pc, #64]	; (8018f98 <ip4_reass+0x334>)
 8018f58:	480d      	ldr	r0, [pc, #52]	; (8018f90 <ip4_reass+0x32c>)
 8018f5a:	f000 ffcd 	bl	8019ef8 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 8018f5e:	2100      	movs	r1, #0
 8018f60:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8018f62:	f7ff fce7 	bl	8018934 <ip_reass_dequeue_datagram>
 8018f66:	e006      	b.n	8018f76 <ip4_reass+0x312>
    goto nullreturn;
 8018f68:	bf00      	nop
 8018f6a:	e004      	b.n	8018f76 <ip4_reass+0x312>
    goto nullreturn;
 8018f6c:	bf00      	nop
 8018f6e:	e002      	b.n	8018f76 <ip4_reass+0x312>
      goto nullreturn;
 8018f70:	bf00      	nop
 8018f72:	e000      	b.n	8018f76 <ip4_reass+0x312>
  }

nullreturn:
 8018f74:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 8018f76:	6878      	ldr	r0, [r7, #4]
 8018f78:	f7f8 f8e8 	bl	801114c <pbuf_free>
  return NULL;
 8018f7c:	2300      	movs	r3, #0
}
 8018f7e:	4618      	mov	r0, r3
 8018f80:	3738      	adds	r7, #56	; 0x38
 8018f82:	46bd      	mov	sp, r7
 8018f84:	bd80      	pop	{r7, pc}
 8018f86:	bf00      	nop
 8018f88:	0801f170 	.word	0x0801f170
 8018f8c:	0801f2fc 	.word	0x0801f2fc
 8018f90:	0801f1b8 	.word	0x0801f1b8
 8018f94:	20007228 	.word	0x20007228
 8018f98:	0801f308 	.word	0x0801f308

08018f9c <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 8018f9c:	b580      	push	{r7, lr}
 8018f9e:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 8018fa0:	2005      	movs	r0, #5
 8018fa2:	f7f7 fa0d 	bl	80103c0 <memp_malloc>
 8018fa6:	4603      	mov	r3, r0
}
 8018fa8:	4618      	mov	r0, r3
 8018faa:	bd80      	pop	{r7, pc}

08018fac <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 8018fac:	b580      	push	{r7, lr}
 8018fae:	b082      	sub	sp, #8
 8018fb0:	af00      	add	r7, sp, #0
 8018fb2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 8018fb4:	687b      	ldr	r3, [r7, #4]
 8018fb6:	2b00      	cmp	r3, #0
 8018fb8:	d106      	bne.n	8018fc8 <ip_frag_free_pbuf_custom_ref+0x1c>
 8018fba:	4b07      	ldr	r3, [pc, #28]	; (8018fd8 <ip_frag_free_pbuf_custom_ref+0x2c>)
 8018fbc:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 8018fc0:	4906      	ldr	r1, [pc, #24]	; (8018fdc <ip_frag_free_pbuf_custom_ref+0x30>)
 8018fc2:	4807      	ldr	r0, [pc, #28]	; (8018fe0 <ip_frag_free_pbuf_custom_ref+0x34>)
 8018fc4:	f000 ff98 	bl	8019ef8 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 8018fc8:	6879      	ldr	r1, [r7, #4]
 8018fca:	2005      	movs	r0, #5
 8018fcc:	f7f7 fa68 	bl	80104a0 <memp_free>
}
 8018fd0:	bf00      	nop
 8018fd2:	3708      	adds	r7, #8
 8018fd4:	46bd      	mov	sp, r7
 8018fd6:	bd80      	pop	{r7, pc}
 8018fd8:	0801f170 	.word	0x0801f170
 8018fdc:	0801f328 	.word	0x0801f328
 8018fe0:	0801f1b8 	.word	0x0801f1b8

08018fe4 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 8018fe4:	b580      	push	{r7, lr}
 8018fe6:	b084      	sub	sp, #16
 8018fe8:	af00      	add	r7, sp, #0
 8018fea:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 8018fec:	687b      	ldr	r3, [r7, #4]
 8018fee:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 8018ff0:	68fb      	ldr	r3, [r7, #12]
 8018ff2:	2b00      	cmp	r3, #0
 8018ff4:	d106      	bne.n	8019004 <ipfrag_free_pbuf_custom+0x20>
 8018ff6:	4b11      	ldr	r3, [pc, #68]	; (801903c <ipfrag_free_pbuf_custom+0x58>)
 8018ff8:	f240 22ce 	movw	r2, #718	; 0x2ce
 8018ffc:	4910      	ldr	r1, [pc, #64]	; (8019040 <ipfrag_free_pbuf_custom+0x5c>)
 8018ffe:	4811      	ldr	r0, [pc, #68]	; (8019044 <ipfrag_free_pbuf_custom+0x60>)
 8019000:	f000 ff7a 	bl	8019ef8 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 8019004:	68fa      	ldr	r2, [r7, #12]
 8019006:	687b      	ldr	r3, [r7, #4]
 8019008:	429a      	cmp	r2, r3
 801900a:	d006      	beq.n	801901a <ipfrag_free_pbuf_custom+0x36>
 801900c:	4b0b      	ldr	r3, [pc, #44]	; (801903c <ipfrag_free_pbuf_custom+0x58>)
 801900e:	f240 22cf 	movw	r2, #719	; 0x2cf
 8019012:	490d      	ldr	r1, [pc, #52]	; (8019048 <ipfrag_free_pbuf_custom+0x64>)
 8019014:	480b      	ldr	r0, [pc, #44]	; (8019044 <ipfrag_free_pbuf_custom+0x60>)
 8019016:	f000 ff6f 	bl	8019ef8 <iprintf>
  if (pcr->original != NULL) {
 801901a:	68fb      	ldr	r3, [r7, #12]
 801901c:	695b      	ldr	r3, [r3, #20]
 801901e:	2b00      	cmp	r3, #0
 8019020:	d004      	beq.n	801902c <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 8019022:	68fb      	ldr	r3, [r7, #12]
 8019024:	695b      	ldr	r3, [r3, #20]
 8019026:	4618      	mov	r0, r3
 8019028:	f7f8 f890 	bl	801114c <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 801902c:	68f8      	ldr	r0, [r7, #12]
 801902e:	f7ff ffbd 	bl	8018fac <ip_frag_free_pbuf_custom_ref>
}
 8019032:	bf00      	nop
 8019034:	3710      	adds	r7, #16
 8019036:	46bd      	mov	sp, r7
 8019038:	bd80      	pop	{r7, pc}
 801903a:	bf00      	nop
 801903c:	0801f170 	.word	0x0801f170
 8019040:	0801f334 	.word	0x0801f334
 8019044:	0801f1b8 	.word	0x0801f1b8
 8019048:	0801f340 	.word	0x0801f340

0801904c <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 801904c:	b580      	push	{r7, lr}
 801904e:	b094      	sub	sp, #80	; 0x50
 8019050:	af02      	add	r7, sp, #8
 8019052:	60f8      	str	r0, [r7, #12]
 8019054:	60b9      	str	r1, [r7, #8]
 8019056:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 8019058:	2300      	movs	r3, #0
 801905a:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 801905e:	68bb      	ldr	r3, [r7, #8]
 8019060:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8019062:	3b14      	subs	r3, #20
 8019064:	2b00      	cmp	r3, #0
 8019066:	da00      	bge.n	801906a <ip4_frag+0x1e>
 8019068:	3307      	adds	r3, #7
 801906a:	10db      	asrs	r3, r3, #3
 801906c:	877b      	strh	r3, [r7, #58]	; 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 801906e:	2314      	movs	r3, #20
 8019070:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 8019072:	68fb      	ldr	r3, [r7, #12]
 8019074:	685b      	ldr	r3, [r3, #4]
 8019076:	637b      	str	r3, [r7, #52]	; 0x34
  iphdr = original_iphdr;
 8019078:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801907a:	633b      	str	r3, [r7, #48]	; 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 801907c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801907e:	781b      	ldrb	r3, [r3, #0]
 8019080:	f003 030f 	and.w	r3, r3, #15
 8019084:	b2db      	uxtb	r3, r3
 8019086:	009b      	lsls	r3, r3, #2
 8019088:	b2db      	uxtb	r3, r3
 801908a:	2b14      	cmp	r3, #20
 801908c:	d002      	beq.n	8019094 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 801908e:	f06f 0305 	mvn.w	r3, #5
 8019092:	e110      	b.n	80192b6 <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 8019094:	68fb      	ldr	r3, [r7, #12]
 8019096:	895b      	ldrh	r3, [r3, #10]
 8019098:	2b13      	cmp	r3, #19
 801909a:	d809      	bhi.n	80190b0 <ip4_frag+0x64>
 801909c:	4b88      	ldr	r3, [pc, #544]	; (80192c0 <ip4_frag+0x274>)
 801909e:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 80190a2:	4988      	ldr	r1, [pc, #544]	; (80192c4 <ip4_frag+0x278>)
 80190a4:	4888      	ldr	r0, [pc, #544]	; (80192c8 <ip4_frag+0x27c>)
 80190a6:	f000 ff27 	bl	8019ef8 <iprintf>
 80190aa:	f06f 0305 	mvn.w	r3, #5
 80190ae:	e102      	b.n	80192b6 <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 80190b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80190b2:	88db      	ldrh	r3, [r3, #6]
 80190b4:	b29b      	uxth	r3, r3
 80190b6:	4618      	mov	r0, r3
 80190b8:	f7f6 fc64 	bl	800f984 <lwip_htons>
 80190bc:	4603      	mov	r3, r0
 80190be:	87bb      	strh	r3, [r7, #60]	; 0x3c
  ofo = tmp & IP_OFFMASK;
 80190c0:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80190c2:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80190c6:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 80190ca:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80190cc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80190d0:	62fb      	str	r3, [r7, #44]	; 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 80190d2:	68fb      	ldr	r3, [r7, #12]
 80190d4:	891b      	ldrh	r3, [r3, #8]
 80190d6:	3b14      	subs	r3, #20
 80190d8:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

  while (left) {
 80190dc:	e0e1      	b.n	80192a2 <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 80190de:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80190e0:	00db      	lsls	r3, r3, #3
 80190e2:	b29b      	uxth	r3, r3
 80190e4:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80190e8:	4293      	cmp	r3, r2
 80190ea:	bf28      	it	cs
 80190ec:	4613      	movcs	r3, r2
 80190ee:	857b      	strh	r3, [r7, #42]	; 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 80190f0:	f44f 7220 	mov.w	r2, #640	; 0x280
 80190f4:	2114      	movs	r1, #20
 80190f6:	200e      	movs	r0, #14
 80190f8:	f7f7 fd44 	bl	8010b84 <pbuf_alloc>
 80190fc:	6278      	str	r0, [r7, #36]	; 0x24
    if (rambuf == NULL) {
 80190fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019100:	2b00      	cmp	r3, #0
 8019102:	f000 80d5 	beq.w	80192b0 <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 8019106:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019108:	895b      	ldrh	r3, [r3, #10]
 801910a:	2b13      	cmp	r3, #19
 801910c:	d806      	bhi.n	801911c <ip4_frag+0xd0>
 801910e:	4b6c      	ldr	r3, [pc, #432]	; (80192c0 <ip4_frag+0x274>)
 8019110:	f44f 7249 	mov.w	r2, #804	; 0x324
 8019114:	496d      	ldr	r1, [pc, #436]	; (80192cc <ip4_frag+0x280>)
 8019116:	486c      	ldr	r0, [pc, #432]	; (80192c8 <ip4_frag+0x27c>)
 8019118:	f000 feee 	bl	8019ef8 <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 801911c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801911e:	685b      	ldr	r3, [r3, #4]
 8019120:	2214      	movs	r2, #20
 8019122:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8019124:	4618      	mov	r0, r3
 8019126:	f001 f8b6 	bl	801a296 <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 801912a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801912c:	685b      	ldr	r3, [r3, #4]
 801912e:	633b      	str	r3, [r7, #48]	; 0x30

    left_to_copy = fragsize;
 8019130:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8019132:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    while (left_to_copy) {
 8019136:	e064      	b.n	8019202 <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 8019138:	68fb      	ldr	r3, [r7, #12]
 801913a:	895a      	ldrh	r2, [r3, #10]
 801913c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801913e:	1ad3      	subs	r3, r2, r3
 8019140:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 8019142:	68fb      	ldr	r3, [r7, #12]
 8019144:	895b      	ldrh	r3, [r3, #10]
 8019146:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8019148:	429a      	cmp	r2, r3
 801914a:	d906      	bls.n	801915a <ip4_frag+0x10e>
 801914c:	4b5c      	ldr	r3, [pc, #368]	; (80192c0 <ip4_frag+0x274>)
 801914e:	f240 322d 	movw	r2, #813	; 0x32d
 8019152:	495f      	ldr	r1, [pc, #380]	; (80192d0 <ip4_frag+0x284>)
 8019154:	485c      	ldr	r0, [pc, #368]	; (80192c8 <ip4_frag+0x27c>)
 8019156:	f000 fecf 	bl	8019ef8 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 801915a:	8bfa      	ldrh	r2, [r7, #30]
 801915c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8019160:	4293      	cmp	r3, r2
 8019162:	bf28      	it	cs
 8019164:	4613      	movcs	r3, r2
 8019166:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 801916a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 801916e:	2b00      	cmp	r3, #0
 8019170:	d105      	bne.n	801917e <ip4_frag+0x132>
        poff = 0;
 8019172:	2300      	movs	r3, #0
 8019174:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 8019176:	68fb      	ldr	r3, [r7, #12]
 8019178:	681b      	ldr	r3, [r3, #0]
 801917a:	60fb      	str	r3, [r7, #12]
        continue;
 801917c:	e041      	b.n	8019202 <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 801917e:	f7ff ff0d 	bl	8018f9c <ip_frag_alloc_pbuf_custom_ref>
 8019182:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 8019184:	69bb      	ldr	r3, [r7, #24]
 8019186:	2b00      	cmp	r3, #0
 8019188:	d103      	bne.n	8019192 <ip4_frag+0x146>
        pbuf_free(rambuf);
 801918a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801918c:	f7f7 ffde 	bl	801114c <pbuf_free>
        goto memerr;
 8019190:	e08f      	b.n	80192b2 <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8019192:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 8019194:	68fb      	ldr	r3, [r7, #12]
 8019196:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8019198:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801919a:	4413      	add	r3, r2
 801919c:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 80191a0:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 80191a4:	9201      	str	r2, [sp, #4]
 80191a6:	9300      	str	r3, [sp, #0]
 80191a8:	4603      	mov	r3, r0
 80191aa:	2241      	movs	r2, #65	; 0x41
 80191ac:	2000      	movs	r0, #0
 80191ae:	f7f7 fe15 	bl	8010ddc <pbuf_alloced_custom>
 80191b2:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 80191b4:	697b      	ldr	r3, [r7, #20]
 80191b6:	2b00      	cmp	r3, #0
 80191b8:	d106      	bne.n	80191c8 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 80191ba:	69b8      	ldr	r0, [r7, #24]
 80191bc:	f7ff fef6 	bl	8018fac <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 80191c0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80191c2:	f7f7 ffc3 	bl	801114c <pbuf_free>
        goto memerr;
 80191c6:	e074      	b.n	80192b2 <ip4_frag+0x266>
      }
      pbuf_ref(p);
 80191c8:	68f8      	ldr	r0, [r7, #12]
 80191ca:	f7f8 f85f 	bl	801128c <pbuf_ref>
      pcr->original = p;
 80191ce:	69bb      	ldr	r3, [r7, #24]
 80191d0:	68fa      	ldr	r2, [r7, #12]
 80191d2:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 80191d4:	69bb      	ldr	r3, [r7, #24]
 80191d6:	4a3f      	ldr	r2, [pc, #252]	; (80192d4 <ip4_frag+0x288>)
 80191d8:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 80191da:	6979      	ldr	r1, [r7, #20]
 80191dc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80191de:	f7f8 f877 	bl	80112d0 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 80191e2:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 80191e6:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80191ea:	1ad3      	subs	r3, r2, r3
 80191ec:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
      if (left_to_copy) {
 80191f0:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80191f4:	2b00      	cmp	r3, #0
 80191f6:	d004      	beq.n	8019202 <ip4_frag+0x1b6>
        poff = 0;
 80191f8:	2300      	movs	r3, #0
 80191fa:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 80191fc:	68fb      	ldr	r3, [r7, #12]
 80191fe:	681b      	ldr	r3, [r3, #0]
 8019200:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 8019202:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8019206:	2b00      	cmp	r3, #0
 8019208:	d196      	bne.n	8019138 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 801920a:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 801920c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8019210:	4413      	add	r3, r2
 8019212:	87fb      	strh	r3, [r7, #62]	; 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 8019214:	68bb      	ldr	r3, [r7, #8]
 8019216:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8019218:	f1a3 0213 	sub.w	r2, r3, #19
 801921c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8019220:	429a      	cmp	r2, r3
 8019222:	bfcc      	ite	gt
 8019224:	2301      	movgt	r3, #1
 8019226:	2300      	movle	r3, #0
 8019228:	b2db      	uxtb	r3, r3
 801922a:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 801922c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8019230:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8019234:	87bb      	strh	r3, [r7, #60]	; 0x3c
    if (!last || mf_set) {
 8019236:	6a3b      	ldr	r3, [r7, #32]
 8019238:	2b00      	cmp	r3, #0
 801923a:	d002      	beq.n	8019242 <ip4_frag+0x1f6>
 801923c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801923e:	2b00      	cmp	r3, #0
 8019240:	d003      	beq.n	801924a <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 8019242:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8019244:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8019248:	87bb      	strh	r3, [r7, #60]	; 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 801924a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801924c:	4618      	mov	r0, r3
 801924e:	f7f6 fb99 	bl	800f984 <lwip_htons>
 8019252:	4603      	mov	r3, r0
 8019254:	461a      	mov	r2, r3
 8019256:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019258:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 801925a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 801925c:	3314      	adds	r3, #20
 801925e:	b29b      	uxth	r3, r3
 8019260:	4618      	mov	r0, r3
 8019262:	f7f6 fb8f 	bl	800f984 <lwip_htons>
 8019266:	4603      	mov	r3, r0
 8019268:	461a      	mov	r2, r3
 801926a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801926c:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 801926e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8019270:	2200      	movs	r2, #0
 8019272:	729a      	strb	r2, [r3, #10]
 8019274:	2200      	movs	r2, #0
 8019276:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 8019278:	68bb      	ldr	r3, [r7, #8]
 801927a:	695b      	ldr	r3, [r3, #20]
 801927c:	687a      	ldr	r2, [r7, #4]
 801927e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8019280:	68b8      	ldr	r0, [r7, #8]
 8019282:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 8019284:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8019286:	f7f7 ff61 	bl	801114c <pbuf_free>
    left = (u16_t)(left - fragsize);
 801928a:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801928e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8019290:	1ad3      	subs	r3, r2, r3
 8019292:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    ofo = (u16_t)(ofo + nfb);
 8019296:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 801929a:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801929c:	4413      	add	r3, r2
 801929e:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  while (left) {
 80192a2:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80192a6:	2b00      	cmp	r3, #0
 80192a8:	f47f af19 	bne.w	80190de <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 80192ac:	2300      	movs	r3, #0
 80192ae:	e002      	b.n	80192b6 <ip4_frag+0x26a>
      goto memerr;
 80192b0:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 80192b2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80192b6:	4618      	mov	r0, r3
 80192b8:	3748      	adds	r7, #72	; 0x48
 80192ba:	46bd      	mov	sp, r7
 80192bc:	bd80      	pop	{r7, pc}
 80192be:	bf00      	nop
 80192c0:	0801f170 	.word	0x0801f170
 80192c4:	0801f34c 	.word	0x0801f34c
 80192c8:	0801f1b8 	.word	0x0801f1b8
 80192cc:	0801f368 	.word	0x0801f368
 80192d0:	0801f388 	.word	0x0801f388
 80192d4:	08018fe5 	.word	0x08018fe5

080192d8 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 80192d8:	b580      	push	{r7, lr}
 80192da:	b086      	sub	sp, #24
 80192dc:	af00      	add	r7, sp, #0
 80192de:	6078      	str	r0, [r7, #4]
 80192e0:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 80192e2:	230e      	movs	r3, #14
 80192e4:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 80192e6:	687b      	ldr	r3, [r7, #4]
 80192e8:	895b      	ldrh	r3, [r3, #10]
 80192ea:	2b0e      	cmp	r3, #14
 80192ec:	d96e      	bls.n	80193cc <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 80192ee:	687b      	ldr	r3, [r7, #4]
 80192f0:	7bdb      	ldrb	r3, [r3, #15]
 80192f2:	2b00      	cmp	r3, #0
 80192f4:	d106      	bne.n	8019304 <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 80192f6:	683b      	ldr	r3, [r7, #0]
 80192f8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80192fc:	3301      	adds	r3, #1
 80192fe:	b2da      	uxtb	r2, r3
 8019300:	687b      	ldr	r3, [r7, #4]
 8019302:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 8019304:	687b      	ldr	r3, [r7, #4]
 8019306:	685b      	ldr	r3, [r3, #4]
 8019308:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 801930a:	693b      	ldr	r3, [r7, #16]
 801930c:	7b1a      	ldrb	r2, [r3, #12]
 801930e:	7b5b      	ldrb	r3, [r3, #13]
 8019310:	021b      	lsls	r3, r3, #8
 8019312:	4313      	orrs	r3, r2
 8019314:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 8019316:	693b      	ldr	r3, [r7, #16]
 8019318:	781b      	ldrb	r3, [r3, #0]
 801931a:	f003 0301 	and.w	r3, r3, #1
 801931e:	2b00      	cmp	r3, #0
 8019320:	d023      	beq.n	801936a <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 8019322:	693b      	ldr	r3, [r7, #16]
 8019324:	781b      	ldrb	r3, [r3, #0]
 8019326:	2b01      	cmp	r3, #1
 8019328:	d10f      	bne.n	801934a <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 801932a:	693b      	ldr	r3, [r7, #16]
 801932c:	785b      	ldrb	r3, [r3, #1]
 801932e:	2b00      	cmp	r3, #0
 8019330:	d11b      	bne.n	801936a <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 8019332:	693b      	ldr	r3, [r7, #16]
 8019334:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8019336:	2b5e      	cmp	r3, #94	; 0x5e
 8019338:	d117      	bne.n	801936a <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 801933a:	687b      	ldr	r3, [r7, #4]
 801933c:	7b5b      	ldrb	r3, [r3, #13]
 801933e:	f043 0310 	orr.w	r3, r3, #16
 8019342:	b2da      	uxtb	r2, r3
 8019344:	687b      	ldr	r3, [r7, #4]
 8019346:	735a      	strb	r2, [r3, #13]
 8019348:	e00f      	b.n	801936a <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 801934a:	693b      	ldr	r3, [r7, #16]
 801934c:	2206      	movs	r2, #6
 801934e:	4928      	ldr	r1, [pc, #160]	; (80193f0 <ethernet_input+0x118>)
 8019350:	4618      	mov	r0, r3
 8019352:	f000 ff17 	bl	801a184 <memcmp>
 8019356:	4603      	mov	r3, r0
 8019358:	2b00      	cmp	r3, #0
 801935a:	d106      	bne.n	801936a <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 801935c:	687b      	ldr	r3, [r7, #4]
 801935e:	7b5b      	ldrb	r3, [r3, #13]
 8019360:	f043 0308 	orr.w	r3, r3, #8
 8019364:	b2da      	uxtb	r2, r3
 8019366:	687b      	ldr	r3, [r7, #4]
 8019368:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 801936a:	89fb      	ldrh	r3, [r7, #14]
 801936c:	2b08      	cmp	r3, #8
 801936e:	d003      	beq.n	8019378 <ethernet_input+0xa0>
 8019370:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 8019374:	d014      	beq.n	80193a0 <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 8019376:	e032      	b.n	80193de <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8019378:	683b      	ldr	r3, [r7, #0]
 801937a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801937e:	f003 0308 	and.w	r3, r3, #8
 8019382:	2b00      	cmp	r3, #0
 8019384:	d024      	beq.n	80193d0 <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8019386:	8afb      	ldrh	r3, [r7, #22]
 8019388:	4619      	mov	r1, r3
 801938a:	6878      	ldr	r0, [r7, #4]
 801938c:	f7f7 fe58 	bl	8011040 <pbuf_remove_header>
 8019390:	4603      	mov	r3, r0
 8019392:	2b00      	cmp	r3, #0
 8019394:	d11e      	bne.n	80193d4 <ethernet_input+0xfc>
        ip4_input(p, netif);
 8019396:	6839      	ldr	r1, [r7, #0]
 8019398:	6878      	ldr	r0, [r7, #4]
 801939a:	f7fe ff21 	bl	80181e0 <ip4_input>
      break;
 801939e:	e013      	b.n	80193c8 <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 80193a0:	683b      	ldr	r3, [r7, #0]
 80193a2:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80193a6:	f003 0308 	and.w	r3, r3, #8
 80193aa:	2b00      	cmp	r3, #0
 80193ac:	d014      	beq.n	80193d8 <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 80193ae:	8afb      	ldrh	r3, [r7, #22]
 80193b0:	4619      	mov	r1, r3
 80193b2:	6878      	ldr	r0, [r7, #4]
 80193b4:	f7f7 fe44 	bl	8011040 <pbuf_remove_header>
 80193b8:	4603      	mov	r3, r0
 80193ba:	2b00      	cmp	r3, #0
 80193bc:	d10e      	bne.n	80193dc <ethernet_input+0x104>
        etharp_input(p, netif);
 80193be:	6839      	ldr	r1, [r7, #0]
 80193c0:	6878      	ldr	r0, [r7, #4]
 80193c2:	f7fe f89b 	bl	80174fc <etharp_input>
      break;
 80193c6:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 80193c8:	2300      	movs	r3, #0
 80193ca:	e00c      	b.n	80193e6 <ethernet_input+0x10e>
    goto free_and_return;
 80193cc:	bf00      	nop
 80193ce:	e006      	b.n	80193de <ethernet_input+0x106>
        goto free_and_return;
 80193d0:	bf00      	nop
 80193d2:	e004      	b.n	80193de <ethernet_input+0x106>
        goto free_and_return;
 80193d4:	bf00      	nop
 80193d6:	e002      	b.n	80193de <ethernet_input+0x106>
        goto free_and_return;
 80193d8:	bf00      	nop
 80193da:	e000      	b.n	80193de <ethernet_input+0x106>
        goto free_and_return;
 80193dc:	bf00      	nop

free_and_return:
  pbuf_free(p);
 80193de:	6878      	ldr	r0, [r7, #4]
 80193e0:	f7f7 feb4 	bl	801114c <pbuf_free>
  return ERR_OK;
 80193e4:	2300      	movs	r3, #0
}
 80193e6:	4618      	mov	r0, r3
 80193e8:	3718      	adds	r7, #24
 80193ea:	46bd      	mov	sp, r7
 80193ec:	bd80      	pop	{r7, pc}
 80193ee:	bf00      	nop
 80193f0:	0801f568 	.word	0x0801f568

080193f4 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 80193f4:	b580      	push	{r7, lr}
 80193f6:	b086      	sub	sp, #24
 80193f8:	af00      	add	r7, sp, #0
 80193fa:	60f8      	str	r0, [r7, #12]
 80193fc:	60b9      	str	r1, [r7, #8]
 80193fe:	607a      	str	r2, [r7, #4]
 8019400:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 8019402:	8c3b      	ldrh	r3, [r7, #32]
 8019404:	4618      	mov	r0, r3
 8019406:	f7f6 fabd 	bl	800f984 <lwip_htons>
 801940a:	4603      	mov	r3, r0
 801940c:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 801940e:	210e      	movs	r1, #14
 8019410:	68b8      	ldr	r0, [r7, #8]
 8019412:	f7f7 fe05 	bl	8011020 <pbuf_add_header>
 8019416:	4603      	mov	r3, r0
 8019418:	2b00      	cmp	r3, #0
 801941a:	d125      	bne.n	8019468 <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 801941c:	68bb      	ldr	r3, [r7, #8]
 801941e:	685b      	ldr	r3, [r3, #4]
 8019420:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 8019422:	693b      	ldr	r3, [r7, #16]
 8019424:	8afa      	ldrh	r2, [r7, #22]
 8019426:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 8019428:	693b      	ldr	r3, [r7, #16]
 801942a:	2206      	movs	r2, #6
 801942c:	6839      	ldr	r1, [r7, #0]
 801942e:	4618      	mov	r0, r3
 8019430:	f000 ff31 	bl	801a296 <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 8019434:	693b      	ldr	r3, [r7, #16]
 8019436:	3306      	adds	r3, #6
 8019438:	2206      	movs	r2, #6
 801943a:	6879      	ldr	r1, [r7, #4]
 801943c:	4618      	mov	r0, r3
 801943e:	f000 ff2a 	bl	801a296 <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 8019442:	68fb      	ldr	r3, [r7, #12]
 8019444:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8019448:	2b06      	cmp	r3, #6
 801944a:	d006      	beq.n	801945a <ethernet_output+0x66>
 801944c:	4b0a      	ldr	r3, [pc, #40]	; (8019478 <ethernet_output+0x84>)
 801944e:	f44f 7299 	mov.w	r2, #306	; 0x132
 8019452:	490a      	ldr	r1, [pc, #40]	; (801947c <ethernet_output+0x88>)
 8019454:	480a      	ldr	r0, [pc, #40]	; (8019480 <ethernet_output+0x8c>)
 8019456:	f000 fd4f 	bl	8019ef8 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 801945a:	68fb      	ldr	r3, [r7, #12]
 801945c:	699b      	ldr	r3, [r3, #24]
 801945e:	68b9      	ldr	r1, [r7, #8]
 8019460:	68f8      	ldr	r0, [r7, #12]
 8019462:	4798      	blx	r3
 8019464:	4603      	mov	r3, r0
 8019466:	e002      	b.n	801946e <ethernet_output+0x7a>
      goto pbuf_header_failed;
 8019468:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 801946a:	f06f 0301 	mvn.w	r3, #1
}
 801946e:	4618      	mov	r0, r3
 8019470:	3718      	adds	r7, #24
 8019472:	46bd      	mov	sp, r7
 8019474:	bd80      	pop	{r7, pc}
 8019476:	bf00      	nop
 8019478:	0801f398 	.word	0x0801f398
 801947c:	0801f3d0 	.word	0x0801f3d0
 8019480:	0801f404 	.word	0x0801f404

08019484 <rand>:
 8019484:	4b16      	ldr	r3, [pc, #88]	; (80194e0 <rand+0x5c>)
 8019486:	b510      	push	{r4, lr}
 8019488:	681c      	ldr	r4, [r3, #0]
 801948a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 801948c:	b9b3      	cbnz	r3, 80194bc <rand+0x38>
 801948e:	2018      	movs	r0, #24
 8019490:	f001 fd6e 	bl	801af70 <malloc>
 8019494:	4602      	mov	r2, r0
 8019496:	6320      	str	r0, [r4, #48]	; 0x30
 8019498:	b920      	cbnz	r0, 80194a4 <rand+0x20>
 801949a:	4b12      	ldr	r3, [pc, #72]	; (80194e4 <rand+0x60>)
 801949c:	4812      	ldr	r0, [pc, #72]	; (80194e8 <rand+0x64>)
 801949e:	2152      	movs	r1, #82	; 0x52
 80194a0:	f000 ff08 	bl	801a2b4 <__assert_func>
 80194a4:	4911      	ldr	r1, [pc, #68]	; (80194ec <rand+0x68>)
 80194a6:	4b12      	ldr	r3, [pc, #72]	; (80194f0 <rand+0x6c>)
 80194a8:	e9c0 1300 	strd	r1, r3, [r0]
 80194ac:	4b11      	ldr	r3, [pc, #68]	; (80194f4 <rand+0x70>)
 80194ae:	6083      	str	r3, [r0, #8]
 80194b0:	230b      	movs	r3, #11
 80194b2:	8183      	strh	r3, [r0, #12]
 80194b4:	2100      	movs	r1, #0
 80194b6:	2001      	movs	r0, #1
 80194b8:	e9c2 0104 	strd	r0, r1, [r2, #16]
 80194bc:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80194be:	480e      	ldr	r0, [pc, #56]	; (80194f8 <rand+0x74>)
 80194c0:	690b      	ldr	r3, [r1, #16]
 80194c2:	694c      	ldr	r4, [r1, #20]
 80194c4:	4a0d      	ldr	r2, [pc, #52]	; (80194fc <rand+0x78>)
 80194c6:	4358      	muls	r0, r3
 80194c8:	fb02 0004 	mla	r0, r2, r4, r0
 80194cc:	fba3 3202 	umull	r3, r2, r3, r2
 80194d0:	3301      	adds	r3, #1
 80194d2:	eb40 0002 	adc.w	r0, r0, r2
 80194d6:	e9c1 3004 	strd	r3, r0, [r1, #16]
 80194da:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 80194de:	bd10      	pop	{r4, pc}
 80194e0:	200000bc 	.word	0x200000bc
 80194e4:	0801f576 	.word	0x0801f576
 80194e8:	0801f58d 	.word	0x0801f58d
 80194ec:	abcd330e 	.word	0xabcd330e
 80194f0:	e66d1234 	.word	0xe66d1234
 80194f4:	0005deec 	.word	0x0005deec
 80194f8:	5851f42d 	.word	0x5851f42d
 80194fc:	4c957f2d 	.word	0x4c957f2d

08019500 <__cvt>:
 8019500:	b5f0      	push	{r4, r5, r6, r7, lr}
 8019502:	ed2d 8b02 	vpush	{d8}
 8019506:	eeb0 8b40 	vmov.f64	d8, d0
 801950a:	b085      	sub	sp, #20
 801950c:	4617      	mov	r7, r2
 801950e:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8019510:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8019512:	ee18 2a90 	vmov	r2, s17
 8019516:	f025 0520 	bic.w	r5, r5, #32
 801951a:	2a00      	cmp	r2, #0
 801951c:	bfb6      	itet	lt
 801951e:	222d      	movlt	r2, #45	; 0x2d
 8019520:	2200      	movge	r2, #0
 8019522:	eeb1 8b40 	vneglt.f64	d8, d0
 8019526:	2d46      	cmp	r5, #70	; 0x46
 8019528:	460c      	mov	r4, r1
 801952a:	701a      	strb	r2, [r3, #0]
 801952c:	d004      	beq.n	8019538 <__cvt+0x38>
 801952e:	2d45      	cmp	r5, #69	; 0x45
 8019530:	d100      	bne.n	8019534 <__cvt+0x34>
 8019532:	3401      	adds	r4, #1
 8019534:	2102      	movs	r1, #2
 8019536:	e000      	b.n	801953a <__cvt+0x3a>
 8019538:	2103      	movs	r1, #3
 801953a:	ab03      	add	r3, sp, #12
 801953c:	9301      	str	r3, [sp, #4]
 801953e:	ab02      	add	r3, sp, #8
 8019540:	9300      	str	r3, [sp, #0]
 8019542:	4622      	mov	r2, r4
 8019544:	4633      	mov	r3, r6
 8019546:	eeb0 0b48 	vmov.f64	d0, d8
 801954a:	f000 ff59 	bl	801a400 <_dtoa_r>
 801954e:	2d47      	cmp	r5, #71	; 0x47
 8019550:	d101      	bne.n	8019556 <__cvt+0x56>
 8019552:	07fb      	lsls	r3, r7, #31
 8019554:	d51a      	bpl.n	801958c <__cvt+0x8c>
 8019556:	2d46      	cmp	r5, #70	; 0x46
 8019558:	eb00 0204 	add.w	r2, r0, r4
 801955c:	d10c      	bne.n	8019578 <__cvt+0x78>
 801955e:	7803      	ldrb	r3, [r0, #0]
 8019560:	2b30      	cmp	r3, #48	; 0x30
 8019562:	d107      	bne.n	8019574 <__cvt+0x74>
 8019564:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8019568:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801956c:	bf1c      	itt	ne
 801956e:	f1c4 0401 	rsbne	r4, r4, #1
 8019572:	6034      	strne	r4, [r6, #0]
 8019574:	6833      	ldr	r3, [r6, #0]
 8019576:	441a      	add	r2, r3
 8019578:	eeb5 8b40 	vcmp.f64	d8, #0.0
 801957c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019580:	bf08      	it	eq
 8019582:	9203      	streq	r2, [sp, #12]
 8019584:	2130      	movs	r1, #48	; 0x30
 8019586:	9b03      	ldr	r3, [sp, #12]
 8019588:	4293      	cmp	r3, r2
 801958a:	d307      	bcc.n	801959c <__cvt+0x9c>
 801958c:	9b03      	ldr	r3, [sp, #12]
 801958e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8019590:	1a1b      	subs	r3, r3, r0
 8019592:	6013      	str	r3, [r2, #0]
 8019594:	b005      	add	sp, #20
 8019596:	ecbd 8b02 	vpop	{d8}
 801959a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801959c:	1c5c      	adds	r4, r3, #1
 801959e:	9403      	str	r4, [sp, #12]
 80195a0:	7019      	strb	r1, [r3, #0]
 80195a2:	e7f0      	b.n	8019586 <__cvt+0x86>

080195a4 <__exponent>:
 80195a4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80195a6:	4603      	mov	r3, r0
 80195a8:	2900      	cmp	r1, #0
 80195aa:	bfb8      	it	lt
 80195ac:	4249      	neglt	r1, r1
 80195ae:	f803 2b02 	strb.w	r2, [r3], #2
 80195b2:	bfb4      	ite	lt
 80195b4:	222d      	movlt	r2, #45	; 0x2d
 80195b6:	222b      	movge	r2, #43	; 0x2b
 80195b8:	2909      	cmp	r1, #9
 80195ba:	7042      	strb	r2, [r0, #1]
 80195bc:	dd2a      	ble.n	8019614 <__exponent+0x70>
 80195be:	f10d 0207 	add.w	r2, sp, #7
 80195c2:	4617      	mov	r7, r2
 80195c4:	260a      	movs	r6, #10
 80195c6:	4694      	mov	ip, r2
 80195c8:	fb91 f5f6 	sdiv	r5, r1, r6
 80195cc:	fb06 1415 	mls	r4, r6, r5, r1
 80195d0:	3430      	adds	r4, #48	; 0x30
 80195d2:	f80c 4c01 	strb.w	r4, [ip, #-1]
 80195d6:	460c      	mov	r4, r1
 80195d8:	2c63      	cmp	r4, #99	; 0x63
 80195da:	f102 32ff 	add.w	r2, r2, #4294967295
 80195de:	4629      	mov	r1, r5
 80195e0:	dcf1      	bgt.n	80195c6 <__exponent+0x22>
 80195e2:	3130      	adds	r1, #48	; 0x30
 80195e4:	f1ac 0402 	sub.w	r4, ip, #2
 80195e8:	f802 1c01 	strb.w	r1, [r2, #-1]
 80195ec:	1c41      	adds	r1, r0, #1
 80195ee:	4622      	mov	r2, r4
 80195f0:	42ba      	cmp	r2, r7
 80195f2:	d30a      	bcc.n	801960a <__exponent+0x66>
 80195f4:	f10d 0209 	add.w	r2, sp, #9
 80195f8:	eba2 020c 	sub.w	r2, r2, ip
 80195fc:	42bc      	cmp	r4, r7
 80195fe:	bf88      	it	hi
 8019600:	2200      	movhi	r2, #0
 8019602:	4413      	add	r3, r2
 8019604:	1a18      	subs	r0, r3, r0
 8019606:	b003      	add	sp, #12
 8019608:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801960a:	f812 5b01 	ldrb.w	r5, [r2], #1
 801960e:	f801 5f01 	strb.w	r5, [r1, #1]!
 8019612:	e7ed      	b.n	80195f0 <__exponent+0x4c>
 8019614:	2330      	movs	r3, #48	; 0x30
 8019616:	3130      	adds	r1, #48	; 0x30
 8019618:	7083      	strb	r3, [r0, #2]
 801961a:	70c1      	strb	r1, [r0, #3]
 801961c:	1d03      	adds	r3, r0, #4
 801961e:	e7f1      	b.n	8019604 <__exponent+0x60>

08019620 <_printf_float>:
 8019620:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019624:	b08b      	sub	sp, #44	; 0x2c
 8019626:	460c      	mov	r4, r1
 8019628:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 801962c:	4616      	mov	r6, r2
 801962e:	461f      	mov	r7, r3
 8019630:	4605      	mov	r5, r0
 8019632:	f000 fdbf 	bl	801a1b4 <_localeconv_r>
 8019636:	f8d0 b000 	ldr.w	fp, [r0]
 801963a:	4658      	mov	r0, fp
 801963c:	f7e8 fc70 	bl	8001f20 <strlen>
 8019640:	2300      	movs	r3, #0
 8019642:	9308      	str	r3, [sp, #32]
 8019644:	f8d8 3000 	ldr.w	r3, [r8]
 8019648:	f894 9018 	ldrb.w	r9, [r4, #24]
 801964c:	6822      	ldr	r2, [r4, #0]
 801964e:	3307      	adds	r3, #7
 8019650:	f023 0307 	bic.w	r3, r3, #7
 8019654:	f103 0108 	add.w	r1, r3, #8
 8019658:	f8c8 1000 	str.w	r1, [r8]
 801965c:	ed93 0b00 	vldr	d0, [r3]
 8019660:	ed9f 6b97 	vldr	d6, [pc, #604]	; 80198c0 <_printf_float+0x2a0>
 8019664:	eeb0 7bc0 	vabs.f64	d7, d0
 8019668:	eeb4 7b46 	vcmp.f64	d7, d6
 801966c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019670:	ed84 0b12 	vstr	d0, [r4, #72]	; 0x48
 8019674:	4682      	mov	sl, r0
 8019676:	dd24      	ble.n	80196c2 <_printf_float+0xa2>
 8019678:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 801967c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019680:	d502      	bpl.n	8019688 <_printf_float+0x68>
 8019682:	232d      	movs	r3, #45	; 0x2d
 8019684:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8019688:	498f      	ldr	r1, [pc, #572]	; (80198c8 <_printf_float+0x2a8>)
 801968a:	4b90      	ldr	r3, [pc, #576]	; (80198cc <_printf_float+0x2ac>)
 801968c:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8019690:	bf94      	ite	ls
 8019692:	4688      	movls	r8, r1
 8019694:	4698      	movhi	r8, r3
 8019696:	2303      	movs	r3, #3
 8019698:	6123      	str	r3, [r4, #16]
 801969a:	f022 0204 	bic.w	r2, r2, #4
 801969e:	2300      	movs	r3, #0
 80196a0:	6022      	str	r2, [r4, #0]
 80196a2:	9304      	str	r3, [sp, #16]
 80196a4:	9700      	str	r7, [sp, #0]
 80196a6:	4633      	mov	r3, r6
 80196a8:	aa09      	add	r2, sp, #36	; 0x24
 80196aa:	4621      	mov	r1, r4
 80196ac:	4628      	mov	r0, r5
 80196ae:	f000 f9d1 	bl	8019a54 <_printf_common>
 80196b2:	3001      	adds	r0, #1
 80196b4:	f040 808a 	bne.w	80197cc <_printf_float+0x1ac>
 80196b8:	f04f 30ff 	mov.w	r0, #4294967295
 80196bc:	b00b      	add	sp, #44	; 0x2c
 80196be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80196c2:	eeb4 0b40 	vcmp.f64	d0, d0
 80196c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80196ca:	d709      	bvc.n	80196e0 <_printf_float+0xc0>
 80196cc:	ee10 3a90 	vmov	r3, s1
 80196d0:	2b00      	cmp	r3, #0
 80196d2:	bfbc      	itt	lt
 80196d4:	232d      	movlt	r3, #45	; 0x2d
 80196d6:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80196da:	497d      	ldr	r1, [pc, #500]	; (80198d0 <_printf_float+0x2b0>)
 80196dc:	4b7d      	ldr	r3, [pc, #500]	; (80198d4 <_printf_float+0x2b4>)
 80196de:	e7d5      	b.n	801968c <_printf_float+0x6c>
 80196e0:	6863      	ldr	r3, [r4, #4]
 80196e2:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 80196e6:	9104      	str	r1, [sp, #16]
 80196e8:	1c59      	adds	r1, r3, #1
 80196ea:	d13c      	bne.n	8019766 <_printf_float+0x146>
 80196ec:	2306      	movs	r3, #6
 80196ee:	6063      	str	r3, [r4, #4]
 80196f0:	2300      	movs	r3, #0
 80196f2:	9303      	str	r3, [sp, #12]
 80196f4:	ab08      	add	r3, sp, #32
 80196f6:	e9cd 9301 	strd	r9, r3, [sp, #4]
 80196fa:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80196fe:	ab07      	add	r3, sp, #28
 8019700:	6861      	ldr	r1, [r4, #4]
 8019702:	9300      	str	r3, [sp, #0]
 8019704:	6022      	str	r2, [r4, #0]
 8019706:	f10d 031b 	add.w	r3, sp, #27
 801970a:	4628      	mov	r0, r5
 801970c:	f7ff fef8 	bl	8019500 <__cvt>
 8019710:	9b04      	ldr	r3, [sp, #16]
 8019712:	9907      	ldr	r1, [sp, #28]
 8019714:	2b47      	cmp	r3, #71	; 0x47
 8019716:	4680      	mov	r8, r0
 8019718:	d108      	bne.n	801972c <_printf_float+0x10c>
 801971a:	1cc8      	adds	r0, r1, #3
 801971c:	db02      	blt.n	8019724 <_printf_float+0x104>
 801971e:	6863      	ldr	r3, [r4, #4]
 8019720:	4299      	cmp	r1, r3
 8019722:	dd41      	ble.n	80197a8 <_printf_float+0x188>
 8019724:	f1a9 0902 	sub.w	r9, r9, #2
 8019728:	fa5f f989 	uxtb.w	r9, r9
 801972c:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8019730:	d820      	bhi.n	8019774 <_printf_float+0x154>
 8019732:	3901      	subs	r1, #1
 8019734:	464a      	mov	r2, r9
 8019736:	f104 0050 	add.w	r0, r4, #80	; 0x50
 801973a:	9107      	str	r1, [sp, #28]
 801973c:	f7ff ff32 	bl	80195a4 <__exponent>
 8019740:	9a08      	ldr	r2, [sp, #32]
 8019742:	9004      	str	r0, [sp, #16]
 8019744:	1813      	adds	r3, r2, r0
 8019746:	2a01      	cmp	r2, #1
 8019748:	6123      	str	r3, [r4, #16]
 801974a:	dc02      	bgt.n	8019752 <_printf_float+0x132>
 801974c:	6822      	ldr	r2, [r4, #0]
 801974e:	07d2      	lsls	r2, r2, #31
 8019750:	d501      	bpl.n	8019756 <_printf_float+0x136>
 8019752:	3301      	adds	r3, #1
 8019754:	6123      	str	r3, [r4, #16]
 8019756:	f89d 301b 	ldrb.w	r3, [sp, #27]
 801975a:	2b00      	cmp	r3, #0
 801975c:	d0a2      	beq.n	80196a4 <_printf_float+0x84>
 801975e:	232d      	movs	r3, #45	; 0x2d
 8019760:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8019764:	e79e      	b.n	80196a4 <_printf_float+0x84>
 8019766:	9904      	ldr	r1, [sp, #16]
 8019768:	2947      	cmp	r1, #71	; 0x47
 801976a:	d1c1      	bne.n	80196f0 <_printf_float+0xd0>
 801976c:	2b00      	cmp	r3, #0
 801976e:	d1bf      	bne.n	80196f0 <_printf_float+0xd0>
 8019770:	2301      	movs	r3, #1
 8019772:	e7bc      	b.n	80196ee <_printf_float+0xce>
 8019774:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8019778:	d118      	bne.n	80197ac <_printf_float+0x18c>
 801977a:	2900      	cmp	r1, #0
 801977c:	6863      	ldr	r3, [r4, #4]
 801977e:	dd0b      	ble.n	8019798 <_printf_float+0x178>
 8019780:	6121      	str	r1, [r4, #16]
 8019782:	b913      	cbnz	r3, 801978a <_printf_float+0x16a>
 8019784:	6822      	ldr	r2, [r4, #0]
 8019786:	07d0      	lsls	r0, r2, #31
 8019788:	d502      	bpl.n	8019790 <_printf_float+0x170>
 801978a:	3301      	adds	r3, #1
 801978c:	440b      	add	r3, r1
 801978e:	6123      	str	r3, [r4, #16]
 8019790:	2300      	movs	r3, #0
 8019792:	65a1      	str	r1, [r4, #88]	; 0x58
 8019794:	9304      	str	r3, [sp, #16]
 8019796:	e7de      	b.n	8019756 <_printf_float+0x136>
 8019798:	b913      	cbnz	r3, 80197a0 <_printf_float+0x180>
 801979a:	6822      	ldr	r2, [r4, #0]
 801979c:	07d2      	lsls	r2, r2, #31
 801979e:	d501      	bpl.n	80197a4 <_printf_float+0x184>
 80197a0:	3302      	adds	r3, #2
 80197a2:	e7f4      	b.n	801978e <_printf_float+0x16e>
 80197a4:	2301      	movs	r3, #1
 80197a6:	e7f2      	b.n	801978e <_printf_float+0x16e>
 80197a8:	f04f 0967 	mov.w	r9, #103	; 0x67
 80197ac:	9b08      	ldr	r3, [sp, #32]
 80197ae:	4299      	cmp	r1, r3
 80197b0:	db05      	blt.n	80197be <_printf_float+0x19e>
 80197b2:	6823      	ldr	r3, [r4, #0]
 80197b4:	6121      	str	r1, [r4, #16]
 80197b6:	07d8      	lsls	r0, r3, #31
 80197b8:	d5ea      	bpl.n	8019790 <_printf_float+0x170>
 80197ba:	1c4b      	adds	r3, r1, #1
 80197bc:	e7e7      	b.n	801978e <_printf_float+0x16e>
 80197be:	2900      	cmp	r1, #0
 80197c0:	bfd4      	ite	le
 80197c2:	f1c1 0202 	rsble	r2, r1, #2
 80197c6:	2201      	movgt	r2, #1
 80197c8:	4413      	add	r3, r2
 80197ca:	e7e0      	b.n	801978e <_printf_float+0x16e>
 80197cc:	6823      	ldr	r3, [r4, #0]
 80197ce:	055a      	lsls	r2, r3, #21
 80197d0:	d407      	bmi.n	80197e2 <_printf_float+0x1c2>
 80197d2:	6923      	ldr	r3, [r4, #16]
 80197d4:	4642      	mov	r2, r8
 80197d6:	4631      	mov	r1, r6
 80197d8:	4628      	mov	r0, r5
 80197da:	47b8      	blx	r7
 80197dc:	3001      	adds	r0, #1
 80197de:	d12a      	bne.n	8019836 <_printf_float+0x216>
 80197e0:	e76a      	b.n	80196b8 <_printf_float+0x98>
 80197e2:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80197e6:	f240 80e0 	bls.w	80199aa <_printf_float+0x38a>
 80197ea:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 80197ee:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80197f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80197f6:	d133      	bne.n	8019860 <_printf_float+0x240>
 80197f8:	4a37      	ldr	r2, [pc, #220]	; (80198d8 <_printf_float+0x2b8>)
 80197fa:	2301      	movs	r3, #1
 80197fc:	4631      	mov	r1, r6
 80197fe:	4628      	mov	r0, r5
 8019800:	47b8      	blx	r7
 8019802:	3001      	adds	r0, #1
 8019804:	f43f af58 	beq.w	80196b8 <_printf_float+0x98>
 8019808:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 801980c:	429a      	cmp	r2, r3
 801980e:	db02      	blt.n	8019816 <_printf_float+0x1f6>
 8019810:	6823      	ldr	r3, [r4, #0]
 8019812:	07d8      	lsls	r0, r3, #31
 8019814:	d50f      	bpl.n	8019836 <_printf_float+0x216>
 8019816:	4653      	mov	r3, sl
 8019818:	465a      	mov	r2, fp
 801981a:	4631      	mov	r1, r6
 801981c:	4628      	mov	r0, r5
 801981e:	47b8      	blx	r7
 8019820:	3001      	adds	r0, #1
 8019822:	f43f af49 	beq.w	80196b8 <_printf_float+0x98>
 8019826:	f04f 0800 	mov.w	r8, #0
 801982a:	f104 091a 	add.w	r9, r4, #26
 801982e:	9b08      	ldr	r3, [sp, #32]
 8019830:	3b01      	subs	r3, #1
 8019832:	4543      	cmp	r3, r8
 8019834:	dc09      	bgt.n	801984a <_printf_float+0x22a>
 8019836:	6823      	ldr	r3, [r4, #0]
 8019838:	079b      	lsls	r3, r3, #30
 801983a:	f100 8106 	bmi.w	8019a4a <_printf_float+0x42a>
 801983e:	68e0      	ldr	r0, [r4, #12]
 8019840:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8019842:	4298      	cmp	r0, r3
 8019844:	bfb8      	it	lt
 8019846:	4618      	movlt	r0, r3
 8019848:	e738      	b.n	80196bc <_printf_float+0x9c>
 801984a:	2301      	movs	r3, #1
 801984c:	464a      	mov	r2, r9
 801984e:	4631      	mov	r1, r6
 8019850:	4628      	mov	r0, r5
 8019852:	47b8      	blx	r7
 8019854:	3001      	adds	r0, #1
 8019856:	f43f af2f 	beq.w	80196b8 <_printf_float+0x98>
 801985a:	f108 0801 	add.w	r8, r8, #1
 801985e:	e7e6      	b.n	801982e <_printf_float+0x20e>
 8019860:	9b07      	ldr	r3, [sp, #28]
 8019862:	2b00      	cmp	r3, #0
 8019864:	dc3a      	bgt.n	80198dc <_printf_float+0x2bc>
 8019866:	4a1c      	ldr	r2, [pc, #112]	; (80198d8 <_printf_float+0x2b8>)
 8019868:	2301      	movs	r3, #1
 801986a:	4631      	mov	r1, r6
 801986c:	4628      	mov	r0, r5
 801986e:	47b8      	blx	r7
 8019870:	3001      	adds	r0, #1
 8019872:	f43f af21 	beq.w	80196b8 <_printf_float+0x98>
 8019876:	e9dd 3207 	ldrd	r3, r2, [sp, #28]
 801987a:	4313      	orrs	r3, r2
 801987c:	d102      	bne.n	8019884 <_printf_float+0x264>
 801987e:	6823      	ldr	r3, [r4, #0]
 8019880:	07d9      	lsls	r1, r3, #31
 8019882:	d5d8      	bpl.n	8019836 <_printf_float+0x216>
 8019884:	4653      	mov	r3, sl
 8019886:	465a      	mov	r2, fp
 8019888:	4631      	mov	r1, r6
 801988a:	4628      	mov	r0, r5
 801988c:	47b8      	blx	r7
 801988e:	3001      	adds	r0, #1
 8019890:	f43f af12 	beq.w	80196b8 <_printf_float+0x98>
 8019894:	f04f 0900 	mov.w	r9, #0
 8019898:	f104 0a1a 	add.w	sl, r4, #26
 801989c:	9b07      	ldr	r3, [sp, #28]
 801989e:	425b      	negs	r3, r3
 80198a0:	454b      	cmp	r3, r9
 80198a2:	dc01      	bgt.n	80198a8 <_printf_float+0x288>
 80198a4:	9b08      	ldr	r3, [sp, #32]
 80198a6:	e795      	b.n	80197d4 <_printf_float+0x1b4>
 80198a8:	2301      	movs	r3, #1
 80198aa:	4652      	mov	r2, sl
 80198ac:	4631      	mov	r1, r6
 80198ae:	4628      	mov	r0, r5
 80198b0:	47b8      	blx	r7
 80198b2:	3001      	adds	r0, #1
 80198b4:	f43f af00 	beq.w	80196b8 <_printf_float+0x98>
 80198b8:	f109 0901 	add.w	r9, r9, #1
 80198bc:	e7ee      	b.n	801989c <_printf_float+0x27c>
 80198be:	bf00      	nop
 80198c0:	ffffffff 	.word	0xffffffff
 80198c4:	7fefffff 	.word	0x7fefffff
 80198c8:	0801f6e6 	.word	0x0801f6e6
 80198cc:	0801f6ea 	.word	0x0801f6ea
 80198d0:	0801f6ee 	.word	0x0801f6ee
 80198d4:	0801f6f2 	.word	0x0801f6f2
 80198d8:	0801f6f6 	.word	0x0801f6f6
 80198dc:	9a08      	ldr	r2, [sp, #32]
 80198de:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80198e0:	429a      	cmp	r2, r3
 80198e2:	bfa8      	it	ge
 80198e4:	461a      	movge	r2, r3
 80198e6:	2a00      	cmp	r2, #0
 80198e8:	4691      	mov	r9, r2
 80198ea:	dc38      	bgt.n	801995e <_printf_float+0x33e>
 80198ec:	2300      	movs	r3, #0
 80198ee:	9305      	str	r3, [sp, #20]
 80198f0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80198f4:	f104 021a 	add.w	r2, r4, #26
 80198f8:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80198fa:	9905      	ldr	r1, [sp, #20]
 80198fc:	9304      	str	r3, [sp, #16]
 80198fe:	eba3 0309 	sub.w	r3, r3, r9
 8019902:	428b      	cmp	r3, r1
 8019904:	dc33      	bgt.n	801996e <_printf_float+0x34e>
 8019906:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 801990a:	429a      	cmp	r2, r3
 801990c:	db3c      	blt.n	8019988 <_printf_float+0x368>
 801990e:	6823      	ldr	r3, [r4, #0]
 8019910:	07da      	lsls	r2, r3, #31
 8019912:	d439      	bmi.n	8019988 <_printf_float+0x368>
 8019914:	e9dd 3207 	ldrd	r3, r2, [sp, #28]
 8019918:	eba2 0903 	sub.w	r9, r2, r3
 801991c:	9b04      	ldr	r3, [sp, #16]
 801991e:	1ad2      	subs	r2, r2, r3
 8019920:	4591      	cmp	r9, r2
 8019922:	bfa8      	it	ge
 8019924:	4691      	movge	r9, r2
 8019926:	f1b9 0f00 	cmp.w	r9, #0
 801992a:	dc35      	bgt.n	8019998 <_printf_float+0x378>
 801992c:	f04f 0800 	mov.w	r8, #0
 8019930:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8019934:	f104 0a1a 	add.w	sl, r4, #26
 8019938:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 801993c:	1a9b      	subs	r3, r3, r2
 801993e:	eba3 0309 	sub.w	r3, r3, r9
 8019942:	4543      	cmp	r3, r8
 8019944:	f77f af77 	ble.w	8019836 <_printf_float+0x216>
 8019948:	2301      	movs	r3, #1
 801994a:	4652      	mov	r2, sl
 801994c:	4631      	mov	r1, r6
 801994e:	4628      	mov	r0, r5
 8019950:	47b8      	blx	r7
 8019952:	3001      	adds	r0, #1
 8019954:	f43f aeb0 	beq.w	80196b8 <_printf_float+0x98>
 8019958:	f108 0801 	add.w	r8, r8, #1
 801995c:	e7ec      	b.n	8019938 <_printf_float+0x318>
 801995e:	4613      	mov	r3, r2
 8019960:	4631      	mov	r1, r6
 8019962:	4642      	mov	r2, r8
 8019964:	4628      	mov	r0, r5
 8019966:	47b8      	blx	r7
 8019968:	3001      	adds	r0, #1
 801996a:	d1bf      	bne.n	80198ec <_printf_float+0x2cc>
 801996c:	e6a4      	b.n	80196b8 <_printf_float+0x98>
 801996e:	2301      	movs	r3, #1
 8019970:	4631      	mov	r1, r6
 8019972:	4628      	mov	r0, r5
 8019974:	9204      	str	r2, [sp, #16]
 8019976:	47b8      	blx	r7
 8019978:	3001      	adds	r0, #1
 801997a:	f43f ae9d 	beq.w	80196b8 <_printf_float+0x98>
 801997e:	9b05      	ldr	r3, [sp, #20]
 8019980:	9a04      	ldr	r2, [sp, #16]
 8019982:	3301      	adds	r3, #1
 8019984:	9305      	str	r3, [sp, #20]
 8019986:	e7b7      	b.n	80198f8 <_printf_float+0x2d8>
 8019988:	4653      	mov	r3, sl
 801998a:	465a      	mov	r2, fp
 801998c:	4631      	mov	r1, r6
 801998e:	4628      	mov	r0, r5
 8019990:	47b8      	blx	r7
 8019992:	3001      	adds	r0, #1
 8019994:	d1be      	bne.n	8019914 <_printf_float+0x2f4>
 8019996:	e68f      	b.n	80196b8 <_printf_float+0x98>
 8019998:	9a04      	ldr	r2, [sp, #16]
 801999a:	464b      	mov	r3, r9
 801999c:	4442      	add	r2, r8
 801999e:	4631      	mov	r1, r6
 80199a0:	4628      	mov	r0, r5
 80199a2:	47b8      	blx	r7
 80199a4:	3001      	adds	r0, #1
 80199a6:	d1c1      	bne.n	801992c <_printf_float+0x30c>
 80199a8:	e686      	b.n	80196b8 <_printf_float+0x98>
 80199aa:	9a08      	ldr	r2, [sp, #32]
 80199ac:	2a01      	cmp	r2, #1
 80199ae:	dc01      	bgt.n	80199b4 <_printf_float+0x394>
 80199b0:	07db      	lsls	r3, r3, #31
 80199b2:	d537      	bpl.n	8019a24 <_printf_float+0x404>
 80199b4:	2301      	movs	r3, #1
 80199b6:	4642      	mov	r2, r8
 80199b8:	4631      	mov	r1, r6
 80199ba:	4628      	mov	r0, r5
 80199bc:	47b8      	blx	r7
 80199be:	3001      	adds	r0, #1
 80199c0:	f43f ae7a 	beq.w	80196b8 <_printf_float+0x98>
 80199c4:	4653      	mov	r3, sl
 80199c6:	465a      	mov	r2, fp
 80199c8:	4631      	mov	r1, r6
 80199ca:	4628      	mov	r0, r5
 80199cc:	47b8      	blx	r7
 80199ce:	3001      	adds	r0, #1
 80199d0:	f43f ae72 	beq.w	80196b8 <_printf_float+0x98>
 80199d4:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 80199d8:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80199dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80199e0:	9b08      	ldr	r3, [sp, #32]
 80199e2:	d01a      	beq.n	8019a1a <_printf_float+0x3fa>
 80199e4:	3b01      	subs	r3, #1
 80199e6:	f108 0201 	add.w	r2, r8, #1
 80199ea:	4631      	mov	r1, r6
 80199ec:	4628      	mov	r0, r5
 80199ee:	47b8      	blx	r7
 80199f0:	3001      	adds	r0, #1
 80199f2:	d10e      	bne.n	8019a12 <_printf_float+0x3f2>
 80199f4:	e660      	b.n	80196b8 <_printf_float+0x98>
 80199f6:	2301      	movs	r3, #1
 80199f8:	464a      	mov	r2, r9
 80199fa:	4631      	mov	r1, r6
 80199fc:	4628      	mov	r0, r5
 80199fe:	47b8      	blx	r7
 8019a00:	3001      	adds	r0, #1
 8019a02:	f43f ae59 	beq.w	80196b8 <_printf_float+0x98>
 8019a06:	f108 0801 	add.w	r8, r8, #1
 8019a0a:	9b08      	ldr	r3, [sp, #32]
 8019a0c:	3b01      	subs	r3, #1
 8019a0e:	4543      	cmp	r3, r8
 8019a10:	dcf1      	bgt.n	80199f6 <_printf_float+0x3d6>
 8019a12:	9b04      	ldr	r3, [sp, #16]
 8019a14:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8019a18:	e6dd      	b.n	80197d6 <_printf_float+0x1b6>
 8019a1a:	f04f 0800 	mov.w	r8, #0
 8019a1e:	f104 091a 	add.w	r9, r4, #26
 8019a22:	e7f2      	b.n	8019a0a <_printf_float+0x3ea>
 8019a24:	2301      	movs	r3, #1
 8019a26:	4642      	mov	r2, r8
 8019a28:	e7df      	b.n	80199ea <_printf_float+0x3ca>
 8019a2a:	2301      	movs	r3, #1
 8019a2c:	464a      	mov	r2, r9
 8019a2e:	4631      	mov	r1, r6
 8019a30:	4628      	mov	r0, r5
 8019a32:	47b8      	blx	r7
 8019a34:	3001      	adds	r0, #1
 8019a36:	f43f ae3f 	beq.w	80196b8 <_printf_float+0x98>
 8019a3a:	f108 0801 	add.w	r8, r8, #1
 8019a3e:	68e3      	ldr	r3, [r4, #12]
 8019a40:	9909      	ldr	r1, [sp, #36]	; 0x24
 8019a42:	1a5b      	subs	r3, r3, r1
 8019a44:	4543      	cmp	r3, r8
 8019a46:	dcf0      	bgt.n	8019a2a <_printf_float+0x40a>
 8019a48:	e6f9      	b.n	801983e <_printf_float+0x21e>
 8019a4a:	f04f 0800 	mov.w	r8, #0
 8019a4e:	f104 0919 	add.w	r9, r4, #25
 8019a52:	e7f4      	b.n	8019a3e <_printf_float+0x41e>

08019a54 <_printf_common>:
 8019a54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8019a58:	4616      	mov	r6, r2
 8019a5a:	4699      	mov	r9, r3
 8019a5c:	688a      	ldr	r2, [r1, #8]
 8019a5e:	690b      	ldr	r3, [r1, #16]
 8019a60:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8019a64:	4293      	cmp	r3, r2
 8019a66:	bfb8      	it	lt
 8019a68:	4613      	movlt	r3, r2
 8019a6a:	6033      	str	r3, [r6, #0]
 8019a6c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8019a70:	4607      	mov	r7, r0
 8019a72:	460c      	mov	r4, r1
 8019a74:	b10a      	cbz	r2, 8019a7a <_printf_common+0x26>
 8019a76:	3301      	adds	r3, #1
 8019a78:	6033      	str	r3, [r6, #0]
 8019a7a:	6823      	ldr	r3, [r4, #0]
 8019a7c:	0699      	lsls	r1, r3, #26
 8019a7e:	bf42      	ittt	mi
 8019a80:	6833      	ldrmi	r3, [r6, #0]
 8019a82:	3302      	addmi	r3, #2
 8019a84:	6033      	strmi	r3, [r6, #0]
 8019a86:	6825      	ldr	r5, [r4, #0]
 8019a88:	f015 0506 	ands.w	r5, r5, #6
 8019a8c:	d106      	bne.n	8019a9c <_printf_common+0x48>
 8019a8e:	f104 0a19 	add.w	sl, r4, #25
 8019a92:	68e3      	ldr	r3, [r4, #12]
 8019a94:	6832      	ldr	r2, [r6, #0]
 8019a96:	1a9b      	subs	r3, r3, r2
 8019a98:	42ab      	cmp	r3, r5
 8019a9a:	dc26      	bgt.n	8019aea <_printf_common+0x96>
 8019a9c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8019aa0:	1e13      	subs	r3, r2, #0
 8019aa2:	6822      	ldr	r2, [r4, #0]
 8019aa4:	bf18      	it	ne
 8019aa6:	2301      	movne	r3, #1
 8019aa8:	0692      	lsls	r2, r2, #26
 8019aaa:	d42b      	bmi.n	8019b04 <_printf_common+0xb0>
 8019aac:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8019ab0:	4649      	mov	r1, r9
 8019ab2:	4638      	mov	r0, r7
 8019ab4:	47c0      	blx	r8
 8019ab6:	3001      	adds	r0, #1
 8019ab8:	d01e      	beq.n	8019af8 <_printf_common+0xa4>
 8019aba:	6823      	ldr	r3, [r4, #0]
 8019abc:	6922      	ldr	r2, [r4, #16]
 8019abe:	f003 0306 	and.w	r3, r3, #6
 8019ac2:	2b04      	cmp	r3, #4
 8019ac4:	bf02      	ittt	eq
 8019ac6:	68e5      	ldreq	r5, [r4, #12]
 8019ac8:	6833      	ldreq	r3, [r6, #0]
 8019aca:	1aed      	subeq	r5, r5, r3
 8019acc:	68a3      	ldr	r3, [r4, #8]
 8019ace:	bf0c      	ite	eq
 8019ad0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8019ad4:	2500      	movne	r5, #0
 8019ad6:	4293      	cmp	r3, r2
 8019ad8:	bfc4      	itt	gt
 8019ada:	1a9b      	subgt	r3, r3, r2
 8019adc:	18ed      	addgt	r5, r5, r3
 8019ade:	2600      	movs	r6, #0
 8019ae0:	341a      	adds	r4, #26
 8019ae2:	42b5      	cmp	r5, r6
 8019ae4:	d11a      	bne.n	8019b1c <_printf_common+0xc8>
 8019ae6:	2000      	movs	r0, #0
 8019ae8:	e008      	b.n	8019afc <_printf_common+0xa8>
 8019aea:	2301      	movs	r3, #1
 8019aec:	4652      	mov	r2, sl
 8019aee:	4649      	mov	r1, r9
 8019af0:	4638      	mov	r0, r7
 8019af2:	47c0      	blx	r8
 8019af4:	3001      	adds	r0, #1
 8019af6:	d103      	bne.n	8019b00 <_printf_common+0xac>
 8019af8:	f04f 30ff 	mov.w	r0, #4294967295
 8019afc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019b00:	3501      	adds	r5, #1
 8019b02:	e7c6      	b.n	8019a92 <_printf_common+0x3e>
 8019b04:	18e1      	adds	r1, r4, r3
 8019b06:	1c5a      	adds	r2, r3, #1
 8019b08:	2030      	movs	r0, #48	; 0x30
 8019b0a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8019b0e:	4422      	add	r2, r4
 8019b10:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8019b14:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8019b18:	3302      	adds	r3, #2
 8019b1a:	e7c7      	b.n	8019aac <_printf_common+0x58>
 8019b1c:	2301      	movs	r3, #1
 8019b1e:	4622      	mov	r2, r4
 8019b20:	4649      	mov	r1, r9
 8019b22:	4638      	mov	r0, r7
 8019b24:	47c0      	blx	r8
 8019b26:	3001      	adds	r0, #1
 8019b28:	d0e6      	beq.n	8019af8 <_printf_common+0xa4>
 8019b2a:	3601      	adds	r6, #1
 8019b2c:	e7d9      	b.n	8019ae2 <_printf_common+0x8e>
	...

08019b30 <_printf_i>:
 8019b30:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8019b34:	7e0f      	ldrb	r7, [r1, #24]
 8019b36:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8019b38:	2f78      	cmp	r7, #120	; 0x78
 8019b3a:	4691      	mov	r9, r2
 8019b3c:	4680      	mov	r8, r0
 8019b3e:	460c      	mov	r4, r1
 8019b40:	469a      	mov	sl, r3
 8019b42:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8019b46:	d807      	bhi.n	8019b58 <_printf_i+0x28>
 8019b48:	2f62      	cmp	r7, #98	; 0x62
 8019b4a:	d80a      	bhi.n	8019b62 <_printf_i+0x32>
 8019b4c:	2f00      	cmp	r7, #0
 8019b4e:	f000 80d4 	beq.w	8019cfa <_printf_i+0x1ca>
 8019b52:	2f58      	cmp	r7, #88	; 0x58
 8019b54:	f000 80c0 	beq.w	8019cd8 <_printf_i+0x1a8>
 8019b58:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8019b5c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8019b60:	e03a      	b.n	8019bd8 <_printf_i+0xa8>
 8019b62:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8019b66:	2b15      	cmp	r3, #21
 8019b68:	d8f6      	bhi.n	8019b58 <_printf_i+0x28>
 8019b6a:	a101      	add	r1, pc, #4	; (adr r1, 8019b70 <_printf_i+0x40>)
 8019b6c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8019b70:	08019bc9 	.word	0x08019bc9
 8019b74:	08019bdd 	.word	0x08019bdd
 8019b78:	08019b59 	.word	0x08019b59
 8019b7c:	08019b59 	.word	0x08019b59
 8019b80:	08019b59 	.word	0x08019b59
 8019b84:	08019b59 	.word	0x08019b59
 8019b88:	08019bdd 	.word	0x08019bdd
 8019b8c:	08019b59 	.word	0x08019b59
 8019b90:	08019b59 	.word	0x08019b59
 8019b94:	08019b59 	.word	0x08019b59
 8019b98:	08019b59 	.word	0x08019b59
 8019b9c:	08019ce1 	.word	0x08019ce1
 8019ba0:	08019c09 	.word	0x08019c09
 8019ba4:	08019c9b 	.word	0x08019c9b
 8019ba8:	08019b59 	.word	0x08019b59
 8019bac:	08019b59 	.word	0x08019b59
 8019bb0:	08019d03 	.word	0x08019d03
 8019bb4:	08019b59 	.word	0x08019b59
 8019bb8:	08019c09 	.word	0x08019c09
 8019bbc:	08019b59 	.word	0x08019b59
 8019bc0:	08019b59 	.word	0x08019b59
 8019bc4:	08019ca3 	.word	0x08019ca3
 8019bc8:	682b      	ldr	r3, [r5, #0]
 8019bca:	1d1a      	adds	r2, r3, #4
 8019bcc:	681b      	ldr	r3, [r3, #0]
 8019bce:	602a      	str	r2, [r5, #0]
 8019bd0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8019bd4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8019bd8:	2301      	movs	r3, #1
 8019bda:	e09f      	b.n	8019d1c <_printf_i+0x1ec>
 8019bdc:	6820      	ldr	r0, [r4, #0]
 8019bde:	682b      	ldr	r3, [r5, #0]
 8019be0:	0607      	lsls	r7, r0, #24
 8019be2:	f103 0104 	add.w	r1, r3, #4
 8019be6:	6029      	str	r1, [r5, #0]
 8019be8:	d501      	bpl.n	8019bee <_printf_i+0xbe>
 8019bea:	681e      	ldr	r6, [r3, #0]
 8019bec:	e003      	b.n	8019bf6 <_printf_i+0xc6>
 8019bee:	0646      	lsls	r6, r0, #25
 8019bf0:	d5fb      	bpl.n	8019bea <_printf_i+0xba>
 8019bf2:	f9b3 6000 	ldrsh.w	r6, [r3]
 8019bf6:	2e00      	cmp	r6, #0
 8019bf8:	da03      	bge.n	8019c02 <_printf_i+0xd2>
 8019bfa:	232d      	movs	r3, #45	; 0x2d
 8019bfc:	4276      	negs	r6, r6
 8019bfe:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8019c02:	485a      	ldr	r0, [pc, #360]	; (8019d6c <_printf_i+0x23c>)
 8019c04:	230a      	movs	r3, #10
 8019c06:	e012      	b.n	8019c2e <_printf_i+0xfe>
 8019c08:	682b      	ldr	r3, [r5, #0]
 8019c0a:	6820      	ldr	r0, [r4, #0]
 8019c0c:	1d19      	adds	r1, r3, #4
 8019c0e:	6029      	str	r1, [r5, #0]
 8019c10:	0605      	lsls	r5, r0, #24
 8019c12:	d501      	bpl.n	8019c18 <_printf_i+0xe8>
 8019c14:	681e      	ldr	r6, [r3, #0]
 8019c16:	e002      	b.n	8019c1e <_printf_i+0xee>
 8019c18:	0641      	lsls	r1, r0, #25
 8019c1a:	d5fb      	bpl.n	8019c14 <_printf_i+0xe4>
 8019c1c:	881e      	ldrh	r6, [r3, #0]
 8019c1e:	4853      	ldr	r0, [pc, #332]	; (8019d6c <_printf_i+0x23c>)
 8019c20:	2f6f      	cmp	r7, #111	; 0x6f
 8019c22:	bf0c      	ite	eq
 8019c24:	2308      	moveq	r3, #8
 8019c26:	230a      	movne	r3, #10
 8019c28:	2100      	movs	r1, #0
 8019c2a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8019c2e:	6865      	ldr	r5, [r4, #4]
 8019c30:	60a5      	str	r5, [r4, #8]
 8019c32:	2d00      	cmp	r5, #0
 8019c34:	bfa2      	ittt	ge
 8019c36:	6821      	ldrge	r1, [r4, #0]
 8019c38:	f021 0104 	bicge.w	r1, r1, #4
 8019c3c:	6021      	strge	r1, [r4, #0]
 8019c3e:	b90e      	cbnz	r6, 8019c44 <_printf_i+0x114>
 8019c40:	2d00      	cmp	r5, #0
 8019c42:	d04b      	beq.n	8019cdc <_printf_i+0x1ac>
 8019c44:	4615      	mov	r5, r2
 8019c46:	fbb6 f1f3 	udiv	r1, r6, r3
 8019c4a:	fb03 6711 	mls	r7, r3, r1, r6
 8019c4e:	5dc7      	ldrb	r7, [r0, r7]
 8019c50:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8019c54:	4637      	mov	r7, r6
 8019c56:	42bb      	cmp	r3, r7
 8019c58:	460e      	mov	r6, r1
 8019c5a:	d9f4      	bls.n	8019c46 <_printf_i+0x116>
 8019c5c:	2b08      	cmp	r3, #8
 8019c5e:	d10b      	bne.n	8019c78 <_printf_i+0x148>
 8019c60:	6823      	ldr	r3, [r4, #0]
 8019c62:	07de      	lsls	r6, r3, #31
 8019c64:	d508      	bpl.n	8019c78 <_printf_i+0x148>
 8019c66:	6923      	ldr	r3, [r4, #16]
 8019c68:	6861      	ldr	r1, [r4, #4]
 8019c6a:	4299      	cmp	r1, r3
 8019c6c:	bfde      	ittt	le
 8019c6e:	2330      	movle	r3, #48	; 0x30
 8019c70:	f805 3c01 	strble.w	r3, [r5, #-1]
 8019c74:	f105 35ff 	addle.w	r5, r5, #4294967295
 8019c78:	1b52      	subs	r2, r2, r5
 8019c7a:	6122      	str	r2, [r4, #16]
 8019c7c:	f8cd a000 	str.w	sl, [sp]
 8019c80:	464b      	mov	r3, r9
 8019c82:	aa03      	add	r2, sp, #12
 8019c84:	4621      	mov	r1, r4
 8019c86:	4640      	mov	r0, r8
 8019c88:	f7ff fee4 	bl	8019a54 <_printf_common>
 8019c8c:	3001      	adds	r0, #1
 8019c8e:	d14a      	bne.n	8019d26 <_printf_i+0x1f6>
 8019c90:	f04f 30ff 	mov.w	r0, #4294967295
 8019c94:	b004      	add	sp, #16
 8019c96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019c9a:	6823      	ldr	r3, [r4, #0]
 8019c9c:	f043 0320 	orr.w	r3, r3, #32
 8019ca0:	6023      	str	r3, [r4, #0]
 8019ca2:	4833      	ldr	r0, [pc, #204]	; (8019d70 <_printf_i+0x240>)
 8019ca4:	2778      	movs	r7, #120	; 0x78
 8019ca6:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8019caa:	6823      	ldr	r3, [r4, #0]
 8019cac:	6829      	ldr	r1, [r5, #0]
 8019cae:	061f      	lsls	r7, r3, #24
 8019cb0:	f851 6b04 	ldr.w	r6, [r1], #4
 8019cb4:	d402      	bmi.n	8019cbc <_printf_i+0x18c>
 8019cb6:	065f      	lsls	r7, r3, #25
 8019cb8:	bf48      	it	mi
 8019cba:	b2b6      	uxthmi	r6, r6
 8019cbc:	07df      	lsls	r7, r3, #31
 8019cbe:	bf48      	it	mi
 8019cc0:	f043 0320 	orrmi.w	r3, r3, #32
 8019cc4:	6029      	str	r1, [r5, #0]
 8019cc6:	bf48      	it	mi
 8019cc8:	6023      	strmi	r3, [r4, #0]
 8019cca:	b91e      	cbnz	r6, 8019cd4 <_printf_i+0x1a4>
 8019ccc:	6823      	ldr	r3, [r4, #0]
 8019cce:	f023 0320 	bic.w	r3, r3, #32
 8019cd2:	6023      	str	r3, [r4, #0]
 8019cd4:	2310      	movs	r3, #16
 8019cd6:	e7a7      	b.n	8019c28 <_printf_i+0xf8>
 8019cd8:	4824      	ldr	r0, [pc, #144]	; (8019d6c <_printf_i+0x23c>)
 8019cda:	e7e4      	b.n	8019ca6 <_printf_i+0x176>
 8019cdc:	4615      	mov	r5, r2
 8019cde:	e7bd      	b.n	8019c5c <_printf_i+0x12c>
 8019ce0:	682b      	ldr	r3, [r5, #0]
 8019ce2:	6826      	ldr	r6, [r4, #0]
 8019ce4:	6961      	ldr	r1, [r4, #20]
 8019ce6:	1d18      	adds	r0, r3, #4
 8019ce8:	6028      	str	r0, [r5, #0]
 8019cea:	0635      	lsls	r5, r6, #24
 8019cec:	681b      	ldr	r3, [r3, #0]
 8019cee:	d501      	bpl.n	8019cf4 <_printf_i+0x1c4>
 8019cf0:	6019      	str	r1, [r3, #0]
 8019cf2:	e002      	b.n	8019cfa <_printf_i+0x1ca>
 8019cf4:	0670      	lsls	r0, r6, #25
 8019cf6:	d5fb      	bpl.n	8019cf0 <_printf_i+0x1c0>
 8019cf8:	8019      	strh	r1, [r3, #0]
 8019cfa:	2300      	movs	r3, #0
 8019cfc:	6123      	str	r3, [r4, #16]
 8019cfe:	4615      	mov	r5, r2
 8019d00:	e7bc      	b.n	8019c7c <_printf_i+0x14c>
 8019d02:	682b      	ldr	r3, [r5, #0]
 8019d04:	1d1a      	adds	r2, r3, #4
 8019d06:	602a      	str	r2, [r5, #0]
 8019d08:	681d      	ldr	r5, [r3, #0]
 8019d0a:	6862      	ldr	r2, [r4, #4]
 8019d0c:	2100      	movs	r1, #0
 8019d0e:	4628      	mov	r0, r5
 8019d10:	f7e8 f8b6 	bl	8001e80 <memchr>
 8019d14:	b108      	cbz	r0, 8019d1a <_printf_i+0x1ea>
 8019d16:	1b40      	subs	r0, r0, r5
 8019d18:	6060      	str	r0, [r4, #4]
 8019d1a:	6863      	ldr	r3, [r4, #4]
 8019d1c:	6123      	str	r3, [r4, #16]
 8019d1e:	2300      	movs	r3, #0
 8019d20:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8019d24:	e7aa      	b.n	8019c7c <_printf_i+0x14c>
 8019d26:	6923      	ldr	r3, [r4, #16]
 8019d28:	462a      	mov	r2, r5
 8019d2a:	4649      	mov	r1, r9
 8019d2c:	4640      	mov	r0, r8
 8019d2e:	47d0      	blx	sl
 8019d30:	3001      	adds	r0, #1
 8019d32:	d0ad      	beq.n	8019c90 <_printf_i+0x160>
 8019d34:	6823      	ldr	r3, [r4, #0]
 8019d36:	079b      	lsls	r3, r3, #30
 8019d38:	d413      	bmi.n	8019d62 <_printf_i+0x232>
 8019d3a:	68e0      	ldr	r0, [r4, #12]
 8019d3c:	9b03      	ldr	r3, [sp, #12]
 8019d3e:	4298      	cmp	r0, r3
 8019d40:	bfb8      	it	lt
 8019d42:	4618      	movlt	r0, r3
 8019d44:	e7a6      	b.n	8019c94 <_printf_i+0x164>
 8019d46:	2301      	movs	r3, #1
 8019d48:	4632      	mov	r2, r6
 8019d4a:	4649      	mov	r1, r9
 8019d4c:	4640      	mov	r0, r8
 8019d4e:	47d0      	blx	sl
 8019d50:	3001      	adds	r0, #1
 8019d52:	d09d      	beq.n	8019c90 <_printf_i+0x160>
 8019d54:	3501      	adds	r5, #1
 8019d56:	68e3      	ldr	r3, [r4, #12]
 8019d58:	9903      	ldr	r1, [sp, #12]
 8019d5a:	1a5b      	subs	r3, r3, r1
 8019d5c:	42ab      	cmp	r3, r5
 8019d5e:	dcf2      	bgt.n	8019d46 <_printf_i+0x216>
 8019d60:	e7eb      	b.n	8019d3a <_printf_i+0x20a>
 8019d62:	2500      	movs	r5, #0
 8019d64:	f104 0619 	add.w	r6, r4, #25
 8019d68:	e7f5      	b.n	8019d56 <_printf_i+0x226>
 8019d6a:	bf00      	nop
 8019d6c:	0801f6f8 	.word	0x0801f6f8
 8019d70:	0801f709 	.word	0x0801f709

08019d74 <std>:
 8019d74:	2300      	movs	r3, #0
 8019d76:	b510      	push	{r4, lr}
 8019d78:	4604      	mov	r4, r0
 8019d7a:	e9c0 3300 	strd	r3, r3, [r0]
 8019d7e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8019d82:	6083      	str	r3, [r0, #8]
 8019d84:	8181      	strh	r1, [r0, #12]
 8019d86:	6643      	str	r3, [r0, #100]	; 0x64
 8019d88:	81c2      	strh	r2, [r0, #14]
 8019d8a:	6183      	str	r3, [r0, #24]
 8019d8c:	4619      	mov	r1, r3
 8019d8e:	2208      	movs	r2, #8
 8019d90:	305c      	adds	r0, #92	; 0x5c
 8019d92:	f000 fa07 	bl	801a1a4 <memset>
 8019d96:	4b0d      	ldr	r3, [pc, #52]	; (8019dcc <std+0x58>)
 8019d98:	6263      	str	r3, [r4, #36]	; 0x24
 8019d9a:	4b0d      	ldr	r3, [pc, #52]	; (8019dd0 <std+0x5c>)
 8019d9c:	62a3      	str	r3, [r4, #40]	; 0x28
 8019d9e:	4b0d      	ldr	r3, [pc, #52]	; (8019dd4 <std+0x60>)
 8019da0:	62e3      	str	r3, [r4, #44]	; 0x2c
 8019da2:	4b0d      	ldr	r3, [pc, #52]	; (8019dd8 <std+0x64>)
 8019da4:	6323      	str	r3, [r4, #48]	; 0x30
 8019da6:	4b0d      	ldr	r3, [pc, #52]	; (8019ddc <std+0x68>)
 8019da8:	6224      	str	r4, [r4, #32]
 8019daa:	429c      	cmp	r4, r3
 8019dac:	d006      	beq.n	8019dbc <std+0x48>
 8019dae:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8019db2:	4294      	cmp	r4, r2
 8019db4:	d002      	beq.n	8019dbc <std+0x48>
 8019db6:	33d0      	adds	r3, #208	; 0xd0
 8019db8:	429c      	cmp	r4, r3
 8019dba:	d105      	bne.n	8019dc8 <std+0x54>
 8019dbc:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8019dc0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8019dc4:	f000 ba64 	b.w	801a290 <__retarget_lock_init_recursive>
 8019dc8:	bd10      	pop	{r4, pc}
 8019dca:	bf00      	nop
 8019dcc:	08019fd5 	.word	0x08019fd5
 8019dd0:	08019ff7 	.word	0x08019ff7
 8019dd4:	0801a02f 	.word	0x0801a02f
 8019dd8:	0801a053 	.word	0x0801a053
 8019ddc:	20007230 	.word	0x20007230

08019de0 <stdio_exit_handler>:
 8019de0:	4a02      	ldr	r2, [pc, #8]	; (8019dec <stdio_exit_handler+0xc>)
 8019de2:	4903      	ldr	r1, [pc, #12]	; (8019df0 <stdio_exit_handler+0x10>)
 8019de4:	4803      	ldr	r0, [pc, #12]	; (8019df4 <stdio_exit_handler+0x14>)
 8019de6:	f000 b869 	b.w	8019ebc <_fwalk_sglue>
 8019dea:	bf00      	nop
 8019dec:	20000064 	.word	0x20000064
 8019df0:	0801bb65 	.word	0x0801bb65
 8019df4:	20000070 	.word	0x20000070

08019df8 <cleanup_stdio>:
 8019df8:	6841      	ldr	r1, [r0, #4]
 8019dfa:	4b0c      	ldr	r3, [pc, #48]	; (8019e2c <cleanup_stdio+0x34>)
 8019dfc:	4299      	cmp	r1, r3
 8019dfe:	b510      	push	{r4, lr}
 8019e00:	4604      	mov	r4, r0
 8019e02:	d001      	beq.n	8019e08 <cleanup_stdio+0x10>
 8019e04:	f001 feae 	bl	801bb64 <_fflush_r>
 8019e08:	68a1      	ldr	r1, [r4, #8]
 8019e0a:	4b09      	ldr	r3, [pc, #36]	; (8019e30 <cleanup_stdio+0x38>)
 8019e0c:	4299      	cmp	r1, r3
 8019e0e:	d002      	beq.n	8019e16 <cleanup_stdio+0x1e>
 8019e10:	4620      	mov	r0, r4
 8019e12:	f001 fea7 	bl	801bb64 <_fflush_r>
 8019e16:	68e1      	ldr	r1, [r4, #12]
 8019e18:	4b06      	ldr	r3, [pc, #24]	; (8019e34 <cleanup_stdio+0x3c>)
 8019e1a:	4299      	cmp	r1, r3
 8019e1c:	d004      	beq.n	8019e28 <cleanup_stdio+0x30>
 8019e1e:	4620      	mov	r0, r4
 8019e20:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8019e24:	f001 be9e 	b.w	801bb64 <_fflush_r>
 8019e28:	bd10      	pop	{r4, pc}
 8019e2a:	bf00      	nop
 8019e2c:	20007230 	.word	0x20007230
 8019e30:	20007298 	.word	0x20007298
 8019e34:	20007300 	.word	0x20007300

08019e38 <global_stdio_init.part.0>:
 8019e38:	b510      	push	{r4, lr}
 8019e3a:	4b0b      	ldr	r3, [pc, #44]	; (8019e68 <global_stdio_init.part.0+0x30>)
 8019e3c:	4c0b      	ldr	r4, [pc, #44]	; (8019e6c <global_stdio_init.part.0+0x34>)
 8019e3e:	4a0c      	ldr	r2, [pc, #48]	; (8019e70 <global_stdio_init.part.0+0x38>)
 8019e40:	601a      	str	r2, [r3, #0]
 8019e42:	4620      	mov	r0, r4
 8019e44:	2200      	movs	r2, #0
 8019e46:	2104      	movs	r1, #4
 8019e48:	f7ff ff94 	bl	8019d74 <std>
 8019e4c:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8019e50:	2201      	movs	r2, #1
 8019e52:	2109      	movs	r1, #9
 8019e54:	f7ff ff8e 	bl	8019d74 <std>
 8019e58:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8019e5c:	2202      	movs	r2, #2
 8019e5e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8019e62:	2112      	movs	r1, #18
 8019e64:	f7ff bf86 	b.w	8019d74 <std>
 8019e68:	20007368 	.word	0x20007368
 8019e6c:	20007230 	.word	0x20007230
 8019e70:	08019de1 	.word	0x08019de1

08019e74 <__sfp_lock_acquire>:
 8019e74:	4801      	ldr	r0, [pc, #4]	; (8019e7c <__sfp_lock_acquire+0x8>)
 8019e76:	f000 ba0c 	b.w	801a292 <__retarget_lock_acquire_recursive>
 8019e7a:	bf00      	nop
 8019e7c:	20007371 	.word	0x20007371

08019e80 <__sfp_lock_release>:
 8019e80:	4801      	ldr	r0, [pc, #4]	; (8019e88 <__sfp_lock_release+0x8>)
 8019e82:	f000 ba07 	b.w	801a294 <__retarget_lock_release_recursive>
 8019e86:	bf00      	nop
 8019e88:	20007371 	.word	0x20007371

08019e8c <__sinit>:
 8019e8c:	b510      	push	{r4, lr}
 8019e8e:	4604      	mov	r4, r0
 8019e90:	f7ff fff0 	bl	8019e74 <__sfp_lock_acquire>
 8019e94:	6a23      	ldr	r3, [r4, #32]
 8019e96:	b11b      	cbz	r3, 8019ea0 <__sinit+0x14>
 8019e98:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8019e9c:	f7ff bff0 	b.w	8019e80 <__sfp_lock_release>
 8019ea0:	4b04      	ldr	r3, [pc, #16]	; (8019eb4 <__sinit+0x28>)
 8019ea2:	6223      	str	r3, [r4, #32]
 8019ea4:	4b04      	ldr	r3, [pc, #16]	; (8019eb8 <__sinit+0x2c>)
 8019ea6:	681b      	ldr	r3, [r3, #0]
 8019ea8:	2b00      	cmp	r3, #0
 8019eaa:	d1f5      	bne.n	8019e98 <__sinit+0xc>
 8019eac:	f7ff ffc4 	bl	8019e38 <global_stdio_init.part.0>
 8019eb0:	e7f2      	b.n	8019e98 <__sinit+0xc>
 8019eb2:	bf00      	nop
 8019eb4:	08019df9 	.word	0x08019df9
 8019eb8:	20007368 	.word	0x20007368

08019ebc <_fwalk_sglue>:
 8019ebc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8019ec0:	4607      	mov	r7, r0
 8019ec2:	4688      	mov	r8, r1
 8019ec4:	4614      	mov	r4, r2
 8019ec6:	2600      	movs	r6, #0
 8019ec8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8019ecc:	f1b9 0901 	subs.w	r9, r9, #1
 8019ed0:	d505      	bpl.n	8019ede <_fwalk_sglue+0x22>
 8019ed2:	6824      	ldr	r4, [r4, #0]
 8019ed4:	2c00      	cmp	r4, #0
 8019ed6:	d1f7      	bne.n	8019ec8 <_fwalk_sglue+0xc>
 8019ed8:	4630      	mov	r0, r6
 8019eda:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8019ede:	89ab      	ldrh	r3, [r5, #12]
 8019ee0:	2b01      	cmp	r3, #1
 8019ee2:	d907      	bls.n	8019ef4 <_fwalk_sglue+0x38>
 8019ee4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8019ee8:	3301      	adds	r3, #1
 8019eea:	d003      	beq.n	8019ef4 <_fwalk_sglue+0x38>
 8019eec:	4629      	mov	r1, r5
 8019eee:	4638      	mov	r0, r7
 8019ef0:	47c0      	blx	r8
 8019ef2:	4306      	orrs	r6, r0
 8019ef4:	3568      	adds	r5, #104	; 0x68
 8019ef6:	e7e9      	b.n	8019ecc <_fwalk_sglue+0x10>

08019ef8 <iprintf>:
 8019ef8:	b40f      	push	{r0, r1, r2, r3}
 8019efa:	b507      	push	{r0, r1, r2, lr}
 8019efc:	4906      	ldr	r1, [pc, #24]	; (8019f18 <iprintf+0x20>)
 8019efe:	ab04      	add	r3, sp, #16
 8019f00:	6808      	ldr	r0, [r1, #0]
 8019f02:	f853 2b04 	ldr.w	r2, [r3], #4
 8019f06:	6881      	ldr	r1, [r0, #8]
 8019f08:	9301      	str	r3, [sp, #4]
 8019f0a:	f001 fc8b 	bl	801b824 <_vfiprintf_r>
 8019f0e:	b003      	add	sp, #12
 8019f10:	f85d eb04 	ldr.w	lr, [sp], #4
 8019f14:	b004      	add	sp, #16
 8019f16:	4770      	bx	lr
 8019f18:	200000bc 	.word	0x200000bc

08019f1c <_puts_r>:
 8019f1c:	6a03      	ldr	r3, [r0, #32]
 8019f1e:	b570      	push	{r4, r5, r6, lr}
 8019f20:	6884      	ldr	r4, [r0, #8]
 8019f22:	4605      	mov	r5, r0
 8019f24:	460e      	mov	r6, r1
 8019f26:	b90b      	cbnz	r3, 8019f2c <_puts_r+0x10>
 8019f28:	f7ff ffb0 	bl	8019e8c <__sinit>
 8019f2c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8019f2e:	07db      	lsls	r3, r3, #31
 8019f30:	d405      	bmi.n	8019f3e <_puts_r+0x22>
 8019f32:	89a3      	ldrh	r3, [r4, #12]
 8019f34:	0598      	lsls	r0, r3, #22
 8019f36:	d402      	bmi.n	8019f3e <_puts_r+0x22>
 8019f38:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8019f3a:	f000 f9aa 	bl	801a292 <__retarget_lock_acquire_recursive>
 8019f3e:	89a3      	ldrh	r3, [r4, #12]
 8019f40:	0719      	lsls	r1, r3, #28
 8019f42:	d513      	bpl.n	8019f6c <_puts_r+0x50>
 8019f44:	6923      	ldr	r3, [r4, #16]
 8019f46:	b18b      	cbz	r3, 8019f6c <_puts_r+0x50>
 8019f48:	3e01      	subs	r6, #1
 8019f4a:	68a3      	ldr	r3, [r4, #8]
 8019f4c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8019f50:	3b01      	subs	r3, #1
 8019f52:	60a3      	str	r3, [r4, #8]
 8019f54:	b9e9      	cbnz	r1, 8019f92 <_puts_r+0x76>
 8019f56:	2b00      	cmp	r3, #0
 8019f58:	da2e      	bge.n	8019fb8 <_puts_r+0x9c>
 8019f5a:	4622      	mov	r2, r4
 8019f5c:	210a      	movs	r1, #10
 8019f5e:	4628      	mov	r0, r5
 8019f60:	f000 f87b 	bl	801a05a <__swbuf_r>
 8019f64:	3001      	adds	r0, #1
 8019f66:	d007      	beq.n	8019f78 <_puts_r+0x5c>
 8019f68:	250a      	movs	r5, #10
 8019f6a:	e007      	b.n	8019f7c <_puts_r+0x60>
 8019f6c:	4621      	mov	r1, r4
 8019f6e:	4628      	mov	r0, r5
 8019f70:	f000 f8b0 	bl	801a0d4 <__swsetup_r>
 8019f74:	2800      	cmp	r0, #0
 8019f76:	d0e7      	beq.n	8019f48 <_puts_r+0x2c>
 8019f78:	f04f 35ff 	mov.w	r5, #4294967295
 8019f7c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8019f7e:	07da      	lsls	r2, r3, #31
 8019f80:	d405      	bmi.n	8019f8e <_puts_r+0x72>
 8019f82:	89a3      	ldrh	r3, [r4, #12]
 8019f84:	059b      	lsls	r3, r3, #22
 8019f86:	d402      	bmi.n	8019f8e <_puts_r+0x72>
 8019f88:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8019f8a:	f000 f983 	bl	801a294 <__retarget_lock_release_recursive>
 8019f8e:	4628      	mov	r0, r5
 8019f90:	bd70      	pop	{r4, r5, r6, pc}
 8019f92:	2b00      	cmp	r3, #0
 8019f94:	da04      	bge.n	8019fa0 <_puts_r+0x84>
 8019f96:	69a2      	ldr	r2, [r4, #24]
 8019f98:	429a      	cmp	r2, r3
 8019f9a:	dc06      	bgt.n	8019faa <_puts_r+0x8e>
 8019f9c:	290a      	cmp	r1, #10
 8019f9e:	d004      	beq.n	8019faa <_puts_r+0x8e>
 8019fa0:	6823      	ldr	r3, [r4, #0]
 8019fa2:	1c5a      	adds	r2, r3, #1
 8019fa4:	6022      	str	r2, [r4, #0]
 8019fa6:	7019      	strb	r1, [r3, #0]
 8019fa8:	e7cf      	b.n	8019f4a <_puts_r+0x2e>
 8019faa:	4622      	mov	r2, r4
 8019fac:	4628      	mov	r0, r5
 8019fae:	f000 f854 	bl	801a05a <__swbuf_r>
 8019fb2:	3001      	adds	r0, #1
 8019fb4:	d1c9      	bne.n	8019f4a <_puts_r+0x2e>
 8019fb6:	e7df      	b.n	8019f78 <_puts_r+0x5c>
 8019fb8:	6823      	ldr	r3, [r4, #0]
 8019fba:	250a      	movs	r5, #10
 8019fbc:	1c5a      	adds	r2, r3, #1
 8019fbe:	6022      	str	r2, [r4, #0]
 8019fc0:	701d      	strb	r5, [r3, #0]
 8019fc2:	e7db      	b.n	8019f7c <_puts_r+0x60>

08019fc4 <puts>:
 8019fc4:	4b02      	ldr	r3, [pc, #8]	; (8019fd0 <puts+0xc>)
 8019fc6:	4601      	mov	r1, r0
 8019fc8:	6818      	ldr	r0, [r3, #0]
 8019fca:	f7ff bfa7 	b.w	8019f1c <_puts_r>
 8019fce:	bf00      	nop
 8019fd0:	200000bc 	.word	0x200000bc

08019fd4 <__sread>:
 8019fd4:	b510      	push	{r4, lr}
 8019fd6:	460c      	mov	r4, r1
 8019fd8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8019fdc:	f000 f910 	bl	801a200 <_read_r>
 8019fe0:	2800      	cmp	r0, #0
 8019fe2:	bfab      	itete	ge
 8019fe4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8019fe6:	89a3      	ldrhlt	r3, [r4, #12]
 8019fe8:	181b      	addge	r3, r3, r0
 8019fea:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8019fee:	bfac      	ite	ge
 8019ff0:	6563      	strge	r3, [r4, #84]	; 0x54
 8019ff2:	81a3      	strhlt	r3, [r4, #12]
 8019ff4:	bd10      	pop	{r4, pc}

08019ff6 <__swrite>:
 8019ff6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019ffa:	461f      	mov	r7, r3
 8019ffc:	898b      	ldrh	r3, [r1, #12]
 8019ffe:	05db      	lsls	r3, r3, #23
 801a000:	4605      	mov	r5, r0
 801a002:	460c      	mov	r4, r1
 801a004:	4616      	mov	r6, r2
 801a006:	d505      	bpl.n	801a014 <__swrite+0x1e>
 801a008:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801a00c:	2302      	movs	r3, #2
 801a00e:	2200      	movs	r2, #0
 801a010:	f000 f8e4 	bl	801a1dc <_lseek_r>
 801a014:	89a3      	ldrh	r3, [r4, #12]
 801a016:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801a01a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801a01e:	81a3      	strh	r3, [r4, #12]
 801a020:	4632      	mov	r2, r6
 801a022:	463b      	mov	r3, r7
 801a024:	4628      	mov	r0, r5
 801a026:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801a02a:	f000 b8fb 	b.w	801a224 <_write_r>

0801a02e <__sseek>:
 801a02e:	b510      	push	{r4, lr}
 801a030:	460c      	mov	r4, r1
 801a032:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801a036:	f000 f8d1 	bl	801a1dc <_lseek_r>
 801a03a:	1c43      	adds	r3, r0, #1
 801a03c:	89a3      	ldrh	r3, [r4, #12]
 801a03e:	bf15      	itete	ne
 801a040:	6560      	strne	r0, [r4, #84]	; 0x54
 801a042:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801a046:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801a04a:	81a3      	strheq	r3, [r4, #12]
 801a04c:	bf18      	it	ne
 801a04e:	81a3      	strhne	r3, [r4, #12]
 801a050:	bd10      	pop	{r4, pc}

0801a052 <__sclose>:
 801a052:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801a056:	f000 b8b1 	b.w	801a1bc <_close_r>

0801a05a <__swbuf_r>:
 801a05a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a05c:	460e      	mov	r6, r1
 801a05e:	4614      	mov	r4, r2
 801a060:	4605      	mov	r5, r0
 801a062:	b118      	cbz	r0, 801a06c <__swbuf_r+0x12>
 801a064:	6a03      	ldr	r3, [r0, #32]
 801a066:	b90b      	cbnz	r3, 801a06c <__swbuf_r+0x12>
 801a068:	f7ff ff10 	bl	8019e8c <__sinit>
 801a06c:	69a3      	ldr	r3, [r4, #24]
 801a06e:	60a3      	str	r3, [r4, #8]
 801a070:	89a3      	ldrh	r3, [r4, #12]
 801a072:	071a      	lsls	r2, r3, #28
 801a074:	d525      	bpl.n	801a0c2 <__swbuf_r+0x68>
 801a076:	6923      	ldr	r3, [r4, #16]
 801a078:	b31b      	cbz	r3, 801a0c2 <__swbuf_r+0x68>
 801a07a:	6823      	ldr	r3, [r4, #0]
 801a07c:	6922      	ldr	r2, [r4, #16]
 801a07e:	1a98      	subs	r0, r3, r2
 801a080:	6963      	ldr	r3, [r4, #20]
 801a082:	b2f6      	uxtb	r6, r6
 801a084:	4283      	cmp	r3, r0
 801a086:	4637      	mov	r7, r6
 801a088:	dc04      	bgt.n	801a094 <__swbuf_r+0x3a>
 801a08a:	4621      	mov	r1, r4
 801a08c:	4628      	mov	r0, r5
 801a08e:	f001 fd69 	bl	801bb64 <_fflush_r>
 801a092:	b9e0      	cbnz	r0, 801a0ce <__swbuf_r+0x74>
 801a094:	68a3      	ldr	r3, [r4, #8]
 801a096:	3b01      	subs	r3, #1
 801a098:	60a3      	str	r3, [r4, #8]
 801a09a:	6823      	ldr	r3, [r4, #0]
 801a09c:	1c5a      	adds	r2, r3, #1
 801a09e:	6022      	str	r2, [r4, #0]
 801a0a0:	701e      	strb	r6, [r3, #0]
 801a0a2:	6962      	ldr	r2, [r4, #20]
 801a0a4:	1c43      	adds	r3, r0, #1
 801a0a6:	429a      	cmp	r2, r3
 801a0a8:	d004      	beq.n	801a0b4 <__swbuf_r+0x5a>
 801a0aa:	89a3      	ldrh	r3, [r4, #12]
 801a0ac:	07db      	lsls	r3, r3, #31
 801a0ae:	d506      	bpl.n	801a0be <__swbuf_r+0x64>
 801a0b0:	2e0a      	cmp	r6, #10
 801a0b2:	d104      	bne.n	801a0be <__swbuf_r+0x64>
 801a0b4:	4621      	mov	r1, r4
 801a0b6:	4628      	mov	r0, r5
 801a0b8:	f001 fd54 	bl	801bb64 <_fflush_r>
 801a0bc:	b938      	cbnz	r0, 801a0ce <__swbuf_r+0x74>
 801a0be:	4638      	mov	r0, r7
 801a0c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801a0c2:	4621      	mov	r1, r4
 801a0c4:	4628      	mov	r0, r5
 801a0c6:	f000 f805 	bl	801a0d4 <__swsetup_r>
 801a0ca:	2800      	cmp	r0, #0
 801a0cc:	d0d5      	beq.n	801a07a <__swbuf_r+0x20>
 801a0ce:	f04f 37ff 	mov.w	r7, #4294967295
 801a0d2:	e7f4      	b.n	801a0be <__swbuf_r+0x64>

0801a0d4 <__swsetup_r>:
 801a0d4:	b538      	push	{r3, r4, r5, lr}
 801a0d6:	4b2a      	ldr	r3, [pc, #168]	; (801a180 <__swsetup_r+0xac>)
 801a0d8:	4605      	mov	r5, r0
 801a0da:	6818      	ldr	r0, [r3, #0]
 801a0dc:	460c      	mov	r4, r1
 801a0de:	b118      	cbz	r0, 801a0e8 <__swsetup_r+0x14>
 801a0e0:	6a03      	ldr	r3, [r0, #32]
 801a0e2:	b90b      	cbnz	r3, 801a0e8 <__swsetup_r+0x14>
 801a0e4:	f7ff fed2 	bl	8019e8c <__sinit>
 801a0e8:	89a3      	ldrh	r3, [r4, #12]
 801a0ea:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801a0ee:	0718      	lsls	r0, r3, #28
 801a0f0:	d422      	bmi.n	801a138 <__swsetup_r+0x64>
 801a0f2:	06d9      	lsls	r1, r3, #27
 801a0f4:	d407      	bmi.n	801a106 <__swsetup_r+0x32>
 801a0f6:	2309      	movs	r3, #9
 801a0f8:	602b      	str	r3, [r5, #0]
 801a0fa:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 801a0fe:	81a3      	strh	r3, [r4, #12]
 801a100:	f04f 30ff 	mov.w	r0, #4294967295
 801a104:	e034      	b.n	801a170 <__swsetup_r+0x9c>
 801a106:	0758      	lsls	r0, r3, #29
 801a108:	d512      	bpl.n	801a130 <__swsetup_r+0x5c>
 801a10a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801a10c:	b141      	cbz	r1, 801a120 <__swsetup_r+0x4c>
 801a10e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801a112:	4299      	cmp	r1, r3
 801a114:	d002      	beq.n	801a11c <__swsetup_r+0x48>
 801a116:	4628      	mov	r0, r5
 801a118:	f000 fede 	bl	801aed8 <_free_r>
 801a11c:	2300      	movs	r3, #0
 801a11e:	6363      	str	r3, [r4, #52]	; 0x34
 801a120:	89a3      	ldrh	r3, [r4, #12]
 801a122:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801a126:	81a3      	strh	r3, [r4, #12]
 801a128:	2300      	movs	r3, #0
 801a12a:	6063      	str	r3, [r4, #4]
 801a12c:	6923      	ldr	r3, [r4, #16]
 801a12e:	6023      	str	r3, [r4, #0]
 801a130:	89a3      	ldrh	r3, [r4, #12]
 801a132:	f043 0308 	orr.w	r3, r3, #8
 801a136:	81a3      	strh	r3, [r4, #12]
 801a138:	6923      	ldr	r3, [r4, #16]
 801a13a:	b94b      	cbnz	r3, 801a150 <__swsetup_r+0x7c>
 801a13c:	89a3      	ldrh	r3, [r4, #12]
 801a13e:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801a142:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801a146:	d003      	beq.n	801a150 <__swsetup_r+0x7c>
 801a148:	4621      	mov	r1, r4
 801a14a:	4628      	mov	r0, r5
 801a14c:	f001 fd6a 	bl	801bc24 <__smakebuf_r>
 801a150:	89a0      	ldrh	r0, [r4, #12]
 801a152:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801a156:	f010 0301 	ands.w	r3, r0, #1
 801a15a:	d00a      	beq.n	801a172 <__swsetup_r+0x9e>
 801a15c:	2300      	movs	r3, #0
 801a15e:	60a3      	str	r3, [r4, #8]
 801a160:	6963      	ldr	r3, [r4, #20]
 801a162:	425b      	negs	r3, r3
 801a164:	61a3      	str	r3, [r4, #24]
 801a166:	6923      	ldr	r3, [r4, #16]
 801a168:	b943      	cbnz	r3, 801a17c <__swsetup_r+0xa8>
 801a16a:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801a16e:	d1c4      	bne.n	801a0fa <__swsetup_r+0x26>
 801a170:	bd38      	pop	{r3, r4, r5, pc}
 801a172:	0781      	lsls	r1, r0, #30
 801a174:	bf58      	it	pl
 801a176:	6963      	ldrpl	r3, [r4, #20]
 801a178:	60a3      	str	r3, [r4, #8]
 801a17a:	e7f4      	b.n	801a166 <__swsetup_r+0x92>
 801a17c:	2000      	movs	r0, #0
 801a17e:	e7f7      	b.n	801a170 <__swsetup_r+0x9c>
 801a180:	200000bc 	.word	0x200000bc

0801a184 <memcmp>:
 801a184:	b510      	push	{r4, lr}
 801a186:	3901      	subs	r1, #1
 801a188:	4402      	add	r2, r0
 801a18a:	4290      	cmp	r0, r2
 801a18c:	d101      	bne.n	801a192 <memcmp+0xe>
 801a18e:	2000      	movs	r0, #0
 801a190:	e005      	b.n	801a19e <memcmp+0x1a>
 801a192:	7803      	ldrb	r3, [r0, #0]
 801a194:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 801a198:	42a3      	cmp	r3, r4
 801a19a:	d001      	beq.n	801a1a0 <memcmp+0x1c>
 801a19c:	1b18      	subs	r0, r3, r4
 801a19e:	bd10      	pop	{r4, pc}
 801a1a0:	3001      	adds	r0, #1
 801a1a2:	e7f2      	b.n	801a18a <memcmp+0x6>

0801a1a4 <memset>:
 801a1a4:	4402      	add	r2, r0
 801a1a6:	4603      	mov	r3, r0
 801a1a8:	4293      	cmp	r3, r2
 801a1aa:	d100      	bne.n	801a1ae <memset+0xa>
 801a1ac:	4770      	bx	lr
 801a1ae:	f803 1b01 	strb.w	r1, [r3], #1
 801a1b2:	e7f9      	b.n	801a1a8 <memset+0x4>

0801a1b4 <_localeconv_r>:
 801a1b4:	4800      	ldr	r0, [pc, #0]	; (801a1b8 <_localeconv_r+0x4>)
 801a1b6:	4770      	bx	lr
 801a1b8:	200001b0 	.word	0x200001b0

0801a1bc <_close_r>:
 801a1bc:	b538      	push	{r3, r4, r5, lr}
 801a1be:	4d06      	ldr	r5, [pc, #24]	; (801a1d8 <_close_r+0x1c>)
 801a1c0:	2300      	movs	r3, #0
 801a1c2:	4604      	mov	r4, r0
 801a1c4:	4608      	mov	r0, r1
 801a1c6:	602b      	str	r3, [r5, #0]
 801a1c8:	f7e9 fc41 	bl	8003a4e <_close>
 801a1cc:	1c43      	adds	r3, r0, #1
 801a1ce:	d102      	bne.n	801a1d6 <_close_r+0x1a>
 801a1d0:	682b      	ldr	r3, [r5, #0]
 801a1d2:	b103      	cbz	r3, 801a1d6 <_close_r+0x1a>
 801a1d4:	6023      	str	r3, [r4, #0]
 801a1d6:	bd38      	pop	{r3, r4, r5, pc}
 801a1d8:	2000736c 	.word	0x2000736c

0801a1dc <_lseek_r>:
 801a1dc:	b538      	push	{r3, r4, r5, lr}
 801a1de:	4d07      	ldr	r5, [pc, #28]	; (801a1fc <_lseek_r+0x20>)
 801a1e0:	4604      	mov	r4, r0
 801a1e2:	4608      	mov	r0, r1
 801a1e4:	4611      	mov	r1, r2
 801a1e6:	2200      	movs	r2, #0
 801a1e8:	602a      	str	r2, [r5, #0]
 801a1ea:	461a      	mov	r2, r3
 801a1ec:	f7e9 fc56 	bl	8003a9c <_lseek>
 801a1f0:	1c43      	adds	r3, r0, #1
 801a1f2:	d102      	bne.n	801a1fa <_lseek_r+0x1e>
 801a1f4:	682b      	ldr	r3, [r5, #0]
 801a1f6:	b103      	cbz	r3, 801a1fa <_lseek_r+0x1e>
 801a1f8:	6023      	str	r3, [r4, #0]
 801a1fa:	bd38      	pop	{r3, r4, r5, pc}
 801a1fc:	2000736c 	.word	0x2000736c

0801a200 <_read_r>:
 801a200:	b538      	push	{r3, r4, r5, lr}
 801a202:	4d07      	ldr	r5, [pc, #28]	; (801a220 <_read_r+0x20>)
 801a204:	4604      	mov	r4, r0
 801a206:	4608      	mov	r0, r1
 801a208:	4611      	mov	r1, r2
 801a20a:	2200      	movs	r2, #0
 801a20c:	602a      	str	r2, [r5, #0]
 801a20e:	461a      	mov	r2, r3
 801a210:	f7e9 fbe4 	bl	80039dc <_read>
 801a214:	1c43      	adds	r3, r0, #1
 801a216:	d102      	bne.n	801a21e <_read_r+0x1e>
 801a218:	682b      	ldr	r3, [r5, #0]
 801a21a:	b103      	cbz	r3, 801a21e <_read_r+0x1e>
 801a21c:	6023      	str	r3, [r4, #0]
 801a21e:	bd38      	pop	{r3, r4, r5, pc}
 801a220:	2000736c 	.word	0x2000736c

0801a224 <_write_r>:
 801a224:	b538      	push	{r3, r4, r5, lr}
 801a226:	4d07      	ldr	r5, [pc, #28]	; (801a244 <_write_r+0x20>)
 801a228:	4604      	mov	r4, r0
 801a22a:	4608      	mov	r0, r1
 801a22c:	4611      	mov	r1, r2
 801a22e:	2200      	movs	r2, #0
 801a230:	602a      	str	r2, [r5, #0]
 801a232:	461a      	mov	r2, r3
 801a234:	f7e9 fbef 	bl	8003a16 <_write>
 801a238:	1c43      	adds	r3, r0, #1
 801a23a:	d102      	bne.n	801a242 <_write_r+0x1e>
 801a23c:	682b      	ldr	r3, [r5, #0]
 801a23e:	b103      	cbz	r3, 801a242 <_write_r+0x1e>
 801a240:	6023      	str	r3, [r4, #0]
 801a242:	bd38      	pop	{r3, r4, r5, pc}
 801a244:	2000736c 	.word	0x2000736c

0801a248 <__libc_init_array>:
 801a248:	b570      	push	{r4, r5, r6, lr}
 801a24a:	4d0d      	ldr	r5, [pc, #52]	; (801a280 <__libc_init_array+0x38>)
 801a24c:	4c0d      	ldr	r4, [pc, #52]	; (801a284 <__libc_init_array+0x3c>)
 801a24e:	1b64      	subs	r4, r4, r5
 801a250:	10a4      	asrs	r4, r4, #2
 801a252:	2600      	movs	r6, #0
 801a254:	42a6      	cmp	r6, r4
 801a256:	d109      	bne.n	801a26c <__libc_init_array+0x24>
 801a258:	4d0b      	ldr	r5, [pc, #44]	; (801a288 <__libc_init_array+0x40>)
 801a25a:	4c0c      	ldr	r4, [pc, #48]	; (801a28c <__libc_init_array+0x44>)
 801a25c:	f001 fdd0 	bl	801be00 <_init>
 801a260:	1b64      	subs	r4, r4, r5
 801a262:	10a4      	asrs	r4, r4, #2
 801a264:	2600      	movs	r6, #0
 801a266:	42a6      	cmp	r6, r4
 801a268:	d105      	bne.n	801a276 <__libc_init_array+0x2e>
 801a26a:	bd70      	pop	{r4, r5, r6, pc}
 801a26c:	f855 3b04 	ldr.w	r3, [r5], #4
 801a270:	4798      	blx	r3
 801a272:	3601      	adds	r6, #1
 801a274:	e7ee      	b.n	801a254 <__libc_init_array+0xc>
 801a276:	f855 3b04 	ldr.w	r3, [r5], #4
 801a27a:	4798      	blx	r3
 801a27c:	3601      	adds	r6, #1
 801a27e:	e7f2      	b.n	801a266 <__libc_init_array+0x1e>
 801a280:	0801f948 	.word	0x0801f948
 801a284:	0801f948 	.word	0x0801f948
 801a288:	0801f948 	.word	0x0801f948
 801a28c:	0801f94c 	.word	0x0801f94c

0801a290 <__retarget_lock_init_recursive>:
 801a290:	4770      	bx	lr

0801a292 <__retarget_lock_acquire_recursive>:
 801a292:	4770      	bx	lr

0801a294 <__retarget_lock_release_recursive>:
 801a294:	4770      	bx	lr

0801a296 <memcpy>:
 801a296:	440a      	add	r2, r1
 801a298:	4291      	cmp	r1, r2
 801a29a:	f100 33ff 	add.w	r3, r0, #4294967295
 801a29e:	d100      	bne.n	801a2a2 <memcpy+0xc>
 801a2a0:	4770      	bx	lr
 801a2a2:	b510      	push	{r4, lr}
 801a2a4:	f811 4b01 	ldrb.w	r4, [r1], #1
 801a2a8:	f803 4f01 	strb.w	r4, [r3, #1]!
 801a2ac:	4291      	cmp	r1, r2
 801a2ae:	d1f9      	bne.n	801a2a4 <memcpy+0xe>
 801a2b0:	bd10      	pop	{r4, pc}
	...

0801a2b4 <__assert_func>:
 801a2b4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801a2b6:	4614      	mov	r4, r2
 801a2b8:	461a      	mov	r2, r3
 801a2ba:	4b09      	ldr	r3, [pc, #36]	; (801a2e0 <__assert_func+0x2c>)
 801a2bc:	681b      	ldr	r3, [r3, #0]
 801a2be:	4605      	mov	r5, r0
 801a2c0:	68d8      	ldr	r0, [r3, #12]
 801a2c2:	b14c      	cbz	r4, 801a2d8 <__assert_func+0x24>
 801a2c4:	4b07      	ldr	r3, [pc, #28]	; (801a2e4 <__assert_func+0x30>)
 801a2c6:	9100      	str	r1, [sp, #0]
 801a2c8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801a2cc:	4906      	ldr	r1, [pc, #24]	; (801a2e8 <__assert_func+0x34>)
 801a2ce:	462b      	mov	r3, r5
 801a2d0:	f001 fc70 	bl	801bbb4 <fiprintf>
 801a2d4:	f001 fd14 	bl	801bd00 <abort>
 801a2d8:	4b04      	ldr	r3, [pc, #16]	; (801a2ec <__assert_func+0x38>)
 801a2da:	461c      	mov	r4, r3
 801a2dc:	e7f3      	b.n	801a2c6 <__assert_func+0x12>
 801a2de:	bf00      	nop
 801a2e0:	200000bc 	.word	0x200000bc
 801a2e4:	0801f71a 	.word	0x0801f71a
 801a2e8:	0801f727 	.word	0x0801f727
 801a2ec:	0801f755 	.word	0x0801f755

0801a2f0 <quorem>:
 801a2f0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a2f4:	6903      	ldr	r3, [r0, #16]
 801a2f6:	690c      	ldr	r4, [r1, #16]
 801a2f8:	42a3      	cmp	r3, r4
 801a2fa:	4607      	mov	r7, r0
 801a2fc:	db7e      	blt.n	801a3fc <quorem+0x10c>
 801a2fe:	3c01      	subs	r4, #1
 801a300:	f101 0814 	add.w	r8, r1, #20
 801a304:	f100 0514 	add.w	r5, r0, #20
 801a308:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801a30c:	9301      	str	r3, [sp, #4]
 801a30e:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 801a312:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801a316:	3301      	adds	r3, #1
 801a318:	429a      	cmp	r2, r3
 801a31a:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 801a31e:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 801a322:	fbb2 f6f3 	udiv	r6, r2, r3
 801a326:	d331      	bcc.n	801a38c <quorem+0x9c>
 801a328:	f04f 0e00 	mov.w	lr, #0
 801a32c:	4640      	mov	r0, r8
 801a32e:	46ac      	mov	ip, r5
 801a330:	46f2      	mov	sl, lr
 801a332:	f850 2b04 	ldr.w	r2, [r0], #4
 801a336:	b293      	uxth	r3, r2
 801a338:	fb06 e303 	mla	r3, r6, r3, lr
 801a33c:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 801a340:	0c1a      	lsrs	r2, r3, #16
 801a342:	b29b      	uxth	r3, r3
 801a344:	ebaa 0303 	sub.w	r3, sl, r3
 801a348:	f8dc a000 	ldr.w	sl, [ip]
 801a34c:	fa13 f38a 	uxtah	r3, r3, sl
 801a350:	fb06 220e 	mla	r2, r6, lr, r2
 801a354:	9300      	str	r3, [sp, #0]
 801a356:	9b00      	ldr	r3, [sp, #0]
 801a358:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 801a35c:	b292      	uxth	r2, r2
 801a35e:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 801a362:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801a366:	f8bd 3000 	ldrh.w	r3, [sp]
 801a36a:	4581      	cmp	r9, r0
 801a36c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801a370:	f84c 3b04 	str.w	r3, [ip], #4
 801a374:	ea4f 4a22 	mov.w	sl, r2, asr #16
 801a378:	d2db      	bcs.n	801a332 <quorem+0x42>
 801a37a:	f855 300b 	ldr.w	r3, [r5, fp]
 801a37e:	b92b      	cbnz	r3, 801a38c <quorem+0x9c>
 801a380:	9b01      	ldr	r3, [sp, #4]
 801a382:	3b04      	subs	r3, #4
 801a384:	429d      	cmp	r5, r3
 801a386:	461a      	mov	r2, r3
 801a388:	d32c      	bcc.n	801a3e4 <quorem+0xf4>
 801a38a:	613c      	str	r4, [r7, #16]
 801a38c:	4638      	mov	r0, r7
 801a38e:	f001 f91f 	bl	801b5d0 <__mcmp>
 801a392:	2800      	cmp	r0, #0
 801a394:	db22      	blt.n	801a3dc <quorem+0xec>
 801a396:	3601      	adds	r6, #1
 801a398:	4629      	mov	r1, r5
 801a39a:	2000      	movs	r0, #0
 801a39c:	f858 2b04 	ldr.w	r2, [r8], #4
 801a3a0:	f8d1 c000 	ldr.w	ip, [r1]
 801a3a4:	b293      	uxth	r3, r2
 801a3a6:	1ac3      	subs	r3, r0, r3
 801a3a8:	0c12      	lsrs	r2, r2, #16
 801a3aa:	fa13 f38c 	uxtah	r3, r3, ip
 801a3ae:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 801a3b2:	eb02 4223 	add.w	r2, r2, r3, asr #16
 801a3b6:	b29b      	uxth	r3, r3
 801a3b8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801a3bc:	45c1      	cmp	r9, r8
 801a3be:	f841 3b04 	str.w	r3, [r1], #4
 801a3c2:	ea4f 4022 	mov.w	r0, r2, asr #16
 801a3c6:	d2e9      	bcs.n	801a39c <quorem+0xac>
 801a3c8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 801a3cc:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 801a3d0:	b922      	cbnz	r2, 801a3dc <quorem+0xec>
 801a3d2:	3b04      	subs	r3, #4
 801a3d4:	429d      	cmp	r5, r3
 801a3d6:	461a      	mov	r2, r3
 801a3d8:	d30a      	bcc.n	801a3f0 <quorem+0x100>
 801a3da:	613c      	str	r4, [r7, #16]
 801a3dc:	4630      	mov	r0, r6
 801a3de:	b003      	add	sp, #12
 801a3e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a3e4:	6812      	ldr	r2, [r2, #0]
 801a3e6:	3b04      	subs	r3, #4
 801a3e8:	2a00      	cmp	r2, #0
 801a3ea:	d1ce      	bne.n	801a38a <quorem+0x9a>
 801a3ec:	3c01      	subs	r4, #1
 801a3ee:	e7c9      	b.n	801a384 <quorem+0x94>
 801a3f0:	6812      	ldr	r2, [r2, #0]
 801a3f2:	3b04      	subs	r3, #4
 801a3f4:	2a00      	cmp	r2, #0
 801a3f6:	d1f0      	bne.n	801a3da <quorem+0xea>
 801a3f8:	3c01      	subs	r4, #1
 801a3fa:	e7eb      	b.n	801a3d4 <quorem+0xe4>
 801a3fc:	2000      	movs	r0, #0
 801a3fe:	e7ee      	b.n	801a3de <quorem+0xee>

0801a400 <_dtoa_r>:
 801a400:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a404:	ed2d 8b02 	vpush	{d8}
 801a408:	69c5      	ldr	r5, [r0, #28]
 801a40a:	b091      	sub	sp, #68	; 0x44
 801a40c:	ed8d 0b02 	vstr	d0, [sp, #8]
 801a410:	ec59 8b10 	vmov	r8, r9, d0
 801a414:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 801a416:	9106      	str	r1, [sp, #24]
 801a418:	4606      	mov	r6, r0
 801a41a:	9208      	str	r2, [sp, #32]
 801a41c:	930c      	str	r3, [sp, #48]	; 0x30
 801a41e:	b975      	cbnz	r5, 801a43e <_dtoa_r+0x3e>
 801a420:	2010      	movs	r0, #16
 801a422:	f000 fda5 	bl	801af70 <malloc>
 801a426:	4602      	mov	r2, r0
 801a428:	61f0      	str	r0, [r6, #28]
 801a42a:	b920      	cbnz	r0, 801a436 <_dtoa_r+0x36>
 801a42c:	4ba6      	ldr	r3, [pc, #664]	; (801a6c8 <_dtoa_r+0x2c8>)
 801a42e:	21ef      	movs	r1, #239	; 0xef
 801a430:	48a6      	ldr	r0, [pc, #664]	; (801a6cc <_dtoa_r+0x2cc>)
 801a432:	f7ff ff3f 	bl	801a2b4 <__assert_func>
 801a436:	e9c0 5501 	strd	r5, r5, [r0, #4]
 801a43a:	6005      	str	r5, [r0, #0]
 801a43c:	60c5      	str	r5, [r0, #12]
 801a43e:	69f3      	ldr	r3, [r6, #28]
 801a440:	6819      	ldr	r1, [r3, #0]
 801a442:	b151      	cbz	r1, 801a45a <_dtoa_r+0x5a>
 801a444:	685a      	ldr	r2, [r3, #4]
 801a446:	604a      	str	r2, [r1, #4]
 801a448:	2301      	movs	r3, #1
 801a44a:	4093      	lsls	r3, r2
 801a44c:	608b      	str	r3, [r1, #8]
 801a44e:	4630      	mov	r0, r6
 801a450:	f000 fe82 	bl	801b158 <_Bfree>
 801a454:	69f3      	ldr	r3, [r6, #28]
 801a456:	2200      	movs	r2, #0
 801a458:	601a      	str	r2, [r3, #0]
 801a45a:	f1b9 0300 	subs.w	r3, r9, #0
 801a45e:	bfbb      	ittet	lt
 801a460:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 801a464:	9303      	strlt	r3, [sp, #12]
 801a466:	2300      	movge	r3, #0
 801a468:	2201      	movlt	r2, #1
 801a46a:	bfac      	ite	ge
 801a46c:	6023      	strge	r3, [r4, #0]
 801a46e:	6022      	strlt	r2, [r4, #0]
 801a470:	4b97      	ldr	r3, [pc, #604]	; (801a6d0 <_dtoa_r+0x2d0>)
 801a472:	9c03      	ldr	r4, [sp, #12]
 801a474:	43a3      	bics	r3, r4
 801a476:	d11c      	bne.n	801a4b2 <_dtoa_r+0xb2>
 801a478:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801a47a:	f242 730f 	movw	r3, #9999	; 0x270f
 801a47e:	6013      	str	r3, [r2, #0]
 801a480:	f3c4 0313 	ubfx	r3, r4, #0, #20
 801a484:	ea53 0308 	orrs.w	r3, r3, r8
 801a488:	f000 84fb 	beq.w	801ae82 <_dtoa_r+0xa82>
 801a48c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801a48e:	b963      	cbnz	r3, 801a4aa <_dtoa_r+0xaa>
 801a490:	4b90      	ldr	r3, [pc, #576]	; (801a6d4 <_dtoa_r+0x2d4>)
 801a492:	e020      	b.n	801a4d6 <_dtoa_r+0xd6>
 801a494:	4b90      	ldr	r3, [pc, #576]	; (801a6d8 <_dtoa_r+0x2d8>)
 801a496:	9301      	str	r3, [sp, #4]
 801a498:	3308      	adds	r3, #8
 801a49a:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 801a49c:	6013      	str	r3, [r2, #0]
 801a49e:	9801      	ldr	r0, [sp, #4]
 801a4a0:	b011      	add	sp, #68	; 0x44
 801a4a2:	ecbd 8b02 	vpop	{d8}
 801a4a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a4aa:	4b8a      	ldr	r3, [pc, #552]	; (801a6d4 <_dtoa_r+0x2d4>)
 801a4ac:	9301      	str	r3, [sp, #4]
 801a4ae:	3303      	adds	r3, #3
 801a4b0:	e7f3      	b.n	801a49a <_dtoa_r+0x9a>
 801a4b2:	ed9d 8b02 	vldr	d8, [sp, #8]
 801a4b6:	eeb5 8b40 	vcmp.f64	d8, #0.0
 801a4ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a4be:	d10c      	bne.n	801a4da <_dtoa_r+0xda>
 801a4c0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801a4c2:	2301      	movs	r3, #1
 801a4c4:	6013      	str	r3, [r2, #0]
 801a4c6:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801a4c8:	2b00      	cmp	r3, #0
 801a4ca:	f000 84d7 	beq.w	801ae7c <_dtoa_r+0xa7c>
 801a4ce:	4b83      	ldr	r3, [pc, #524]	; (801a6dc <_dtoa_r+0x2dc>)
 801a4d0:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 801a4d2:	6013      	str	r3, [r2, #0]
 801a4d4:	3b01      	subs	r3, #1
 801a4d6:	9301      	str	r3, [sp, #4]
 801a4d8:	e7e1      	b.n	801a49e <_dtoa_r+0x9e>
 801a4da:	aa0e      	add	r2, sp, #56	; 0x38
 801a4dc:	a90f      	add	r1, sp, #60	; 0x3c
 801a4de:	4630      	mov	r0, r6
 801a4e0:	eeb0 0b48 	vmov.f64	d0, d8
 801a4e4:	f001 f91a 	bl	801b71c <__d2b>
 801a4e8:	f3c4 530a 	ubfx	r3, r4, #20, #11
 801a4ec:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801a4ee:	4605      	mov	r5, r0
 801a4f0:	2b00      	cmp	r3, #0
 801a4f2:	d046      	beq.n	801a582 <_dtoa_r+0x182>
 801a4f4:	eeb0 7b48 	vmov.f64	d7, d8
 801a4f8:	ee18 1a90 	vmov	r1, s17
 801a4fc:	f3c1 0113 	ubfx	r1, r1, #0, #20
 801a500:	f041 517f 	orr.w	r1, r1, #1069547520	; 0x3fc00000
 801a504:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 801a508:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 801a50c:	2000      	movs	r0, #0
 801a50e:	ee07 1a90 	vmov	s15, r1
 801a512:	eeb7 6b08 	vmov.f64	d6, #120	; 0x3fc00000  1.5
 801a516:	ed9f 5b66 	vldr	d5, [pc, #408]	; 801a6b0 <_dtoa_r+0x2b0>
 801a51a:	ee37 7b46 	vsub.f64	d7, d7, d6
 801a51e:	ed9f 6b66 	vldr	d6, [pc, #408]	; 801a6b8 <_dtoa_r+0x2b8>
 801a522:	eea7 6b05 	vfma.f64	d6, d7, d5
 801a526:	ed9f 5b66 	vldr	d5, [pc, #408]	; 801a6c0 <_dtoa_r+0x2c0>
 801a52a:	ee07 3a90 	vmov	s15, r3
 801a52e:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 801a532:	eeb0 7b46 	vmov.f64	d7, d6
 801a536:	eea4 7b05 	vfma.f64	d7, d4, d5
 801a53a:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 801a53e:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 801a542:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a546:	ee16 ba90 	vmov	fp, s13
 801a54a:	9009      	str	r0, [sp, #36]	; 0x24
 801a54c:	d508      	bpl.n	801a560 <_dtoa_r+0x160>
 801a54e:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 801a552:	eeb4 6b47 	vcmp.f64	d6, d7
 801a556:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a55a:	bf18      	it	ne
 801a55c:	f10b 3bff 	addne.w	fp, fp, #4294967295
 801a560:	f1bb 0f16 	cmp.w	fp, #22
 801a564:	d82b      	bhi.n	801a5be <_dtoa_r+0x1be>
 801a566:	495e      	ldr	r1, [pc, #376]	; (801a6e0 <_dtoa_r+0x2e0>)
 801a568:	eb01 01cb 	add.w	r1, r1, fp, lsl #3
 801a56c:	ed91 7b00 	vldr	d7, [r1]
 801a570:	eeb4 8bc7 	vcmpe.f64	d8, d7
 801a574:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a578:	d501      	bpl.n	801a57e <_dtoa_r+0x17e>
 801a57a:	f10b 3bff 	add.w	fp, fp, #4294967295
 801a57e:	2100      	movs	r1, #0
 801a580:	e01e      	b.n	801a5c0 <_dtoa_r+0x1c0>
 801a582:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801a584:	4413      	add	r3, r2
 801a586:	f203 4132 	addw	r1, r3, #1074	; 0x432
 801a58a:	2920      	cmp	r1, #32
 801a58c:	bfc1      	itttt	gt
 801a58e:	f1c1 0140 	rsbgt	r1, r1, #64	; 0x40
 801a592:	408c      	lslgt	r4, r1
 801a594:	f203 4112 	addwgt	r1, r3, #1042	; 0x412
 801a598:	fa28 f101 	lsrgt.w	r1, r8, r1
 801a59c:	bfd6      	itet	le
 801a59e:	f1c1 0120 	rsble	r1, r1, #32
 801a5a2:	4321      	orrgt	r1, r4
 801a5a4:	fa08 f101 	lslle.w	r1, r8, r1
 801a5a8:	ee07 1a90 	vmov	s15, r1
 801a5ac:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 801a5b0:	3b01      	subs	r3, #1
 801a5b2:	ee17 1a90 	vmov	r1, s15
 801a5b6:	2001      	movs	r0, #1
 801a5b8:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 801a5bc:	e7a7      	b.n	801a50e <_dtoa_r+0x10e>
 801a5be:	2101      	movs	r1, #1
 801a5c0:	1ad2      	subs	r2, r2, r3
 801a5c2:	1e53      	subs	r3, r2, #1
 801a5c4:	9305      	str	r3, [sp, #20]
 801a5c6:	bf45      	ittet	mi
 801a5c8:	f1c2 0301 	rsbmi	r3, r2, #1
 801a5cc:	9304      	strmi	r3, [sp, #16]
 801a5ce:	2300      	movpl	r3, #0
 801a5d0:	2300      	movmi	r3, #0
 801a5d2:	bf4c      	ite	mi
 801a5d4:	9305      	strmi	r3, [sp, #20]
 801a5d6:	9304      	strpl	r3, [sp, #16]
 801a5d8:	f1bb 0f00 	cmp.w	fp, #0
 801a5dc:	910b      	str	r1, [sp, #44]	; 0x2c
 801a5de:	db18      	blt.n	801a612 <_dtoa_r+0x212>
 801a5e0:	9b05      	ldr	r3, [sp, #20]
 801a5e2:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 801a5e6:	445b      	add	r3, fp
 801a5e8:	9305      	str	r3, [sp, #20]
 801a5ea:	2300      	movs	r3, #0
 801a5ec:	9a06      	ldr	r2, [sp, #24]
 801a5ee:	2a09      	cmp	r2, #9
 801a5f0:	d848      	bhi.n	801a684 <_dtoa_r+0x284>
 801a5f2:	2a05      	cmp	r2, #5
 801a5f4:	bfc4      	itt	gt
 801a5f6:	3a04      	subgt	r2, #4
 801a5f8:	9206      	strgt	r2, [sp, #24]
 801a5fa:	9a06      	ldr	r2, [sp, #24]
 801a5fc:	f1a2 0202 	sub.w	r2, r2, #2
 801a600:	bfcc      	ite	gt
 801a602:	2400      	movgt	r4, #0
 801a604:	2401      	movle	r4, #1
 801a606:	2a03      	cmp	r2, #3
 801a608:	d847      	bhi.n	801a69a <_dtoa_r+0x29a>
 801a60a:	e8df f002 	tbb	[pc, r2]
 801a60e:	2d0b      	.short	0x2d0b
 801a610:	392b      	.short	0x392b
 801a612:	9b04      	ldr	r3, [sp, #16]
 801a614:	2200      	movs	r2, #0
 801a616:	eba3 030b 	sub.w	r3, r3, fp
 801a61a:	9304      	str	r3, [sp, #16]
 801a61c:	920a      	str	r2, [sp, #40]	; 0x28
 801a61e:	f1cb 0300 	rsb	r3, fp, #0
 801a622:	e7e3      	b.n	801a5ec <_dtoa_r+0x1ec>
 801a624:	2200      	movs	r2, #0
 801a626:	9207      	str	r2, [sp, #28]
 801a628:	9a08      	ldr	r2, [sp, #32]
 801a62a:	2a00      	cmp	r2, #0
 801a62c:	dc38      	bgt.n	801a6a0 <_dtoa_r+0x2a0>
 801a62e:	f04f 0a01 	mov.w	sl, #1
 801a632:	46d1      	mov	r9, sl
 801a634:	4652      	mov	r2, sl
 801a636:	f8cd a020 	str.w	sl, [sp, #32]
 801a63a:	69f7      	ldr	r7, [r6, #28]
 801a63c:	2100      	movs	r1, #0
 801a63e:	2004      	movs	r0, #4
 801a640:	f100 0c14 	add.w	ip, r0, #20
 801a644:	4594      	cmp	ip, r2
 801a646:	d930      	bls.n	801a6aa <_dtoa_r+0x2aa>
 801a648:	6079      	str	r1, [r7, #4]
 801a64a:	4630      	mov	r0, r6
 801a64c:	930d      	str	r3, [sp, #52]	; 0x34
 801a64e:	f000 fd43 	bl	801b0d8 <_Balloc>
 801a652:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801a654:	9001      	str	r0, [sp, #4]
 801a656:	4602      	mov	r2, r0
 801a658:	2800      	cmp	r0, #0
 801a65a:	d145      	bne.n	801a6e8 <_dtoa_r+0x2e8>
 801a65c:	4b21      	ldr	r3, [pc, #132]	; (801a6e4 <_dtoa_r+0x2e4>)
 801a65e:	f240 11af 	movw	r1, #431	; 0x1af
 801a662:	e6e5      	b.n	801a430 <_dtoa_r+0x30>
 801a664:	2201      	movs	r2, #1
 801a666:	e7de      	b.n	801a626 <_dtoa_r+0x226>
 801a668:	2200      	movs	r2, #0
 801a66a:	9207      	str	r2, [sp, #28]
 801a66c:	9a08      	ldr	r2, [sp, #32]
 801a66e:	eb0b 0a02 	add.w	sl, fp, r2
 801a672:	f10a 0901 	add.w	r9, sl, #1
 801a676:	464a      	mov	r2, r9
 801a678:	2a01      	cmp	r2, #1
 801a67a:	bfb8      	it	lt
 801a67c:	2201      	movlt	r2, #1
 801a67e:	e7dc      	b.n	801a63a <_dtoa_r+0x23a>
 801a680:	2201      	movs	r2, #1
 801a682:	e7f2      	b.n	801a66a <_dtoa_r+0x26a>
 801a684:	2401      	movs	r4, #1
 801a686:	2200      	movs	r2, #0
 801a688:	e9cd 2406 	strd	r2, r4, [sp, #24]
 801a68c:	f04f 3aff 	mov.w	sl, #4294967295
 801a690:	2100      	movs	r1, #0
 801a692:	46d1      	mov	r9, sl
 801a694:	2212      	movs	r2, #18
 801a696:	9108      	str	r1, [sp, #32]
 801a698:	e7cf      	b.n	801a63a <_dtoa_r+0x23a>
 801a69a:	2201      	movs	r2, #1
 801a69c:	9207      	str	r2, [sp, #28]
 801a69e:	e7f5      	b.n	801a68c <_dtoa_r+0x28c>
 801a6a0:	f8dd a020 	ldr.w	sl, [sp, #32]
 801a6a4:	46d1      	mov	r9, sl
 801a6a6:	4652      	mov	r2, sl
 801a6a8:	e7c7      	b.n	801a63a <_dtoa_r+0x23a>
 801a6aa:	3101      	adds	r1, #1
 801a6ac:	0040      	lsls	r0, r0, #1
 801a6ae:	e7c7      	b.n	801a640 <_dtoa_r+0x240>
 801a6b0:	636f4361 	.word	0x636f4361
 801a6b4:	3fd287a7 	.word	0x3fd287a7
 801a6b8:	8b60c8b3 	.word	0x8b60c8b3
 801a6bc:	3fc68a28 	.word	0x3fc68a28
 801a6c0:	509f79fb 	.word	0x509f79fb
 801a6c4:	3fd34413 	.word	0x3fd34413
 801a6c8:	0801f576 	.word	0x0801f576
 801a6cc:	0801f763 	.word	0x0801f763
 801a6d0:	7ff00000 	.word	0x7ff00000
 801a6d4:	0801f75f 	.word	0x0801f75f
 801a6d8:	0801f756 	.word	0x0801f756
 801a6dc:	0801f6f7 	.word	0x0801f6f7
 801a6e0:	0801f850 	.word	0x0801f850
 801a6e4:	0801f7bb 	.word	0x0801f7bb
 801a6e8:	69f2      	ldr	r2, [r6, #28]
 801a6ea:	9901      	ldr	r1, [sp, #4]
 801a6ec:	6011      	str	r1, [r2, #0]
 801a6ee:	f1b9 0f0e 	cmp.w	r9, #14
 801a6f2:	d86c      	bhi.n	801a7ce <_dtoa_r+0x3ce>
 801a6f4:	2c00      	cmp	r4, #0
 801a6f6:	d06a      	beq.n	801a7ce <_dtoa_r+0x3ce>
 801a6f8:	f1bb 0f00 	cmp.w	fp, #0
 801a6fc:	f340 80a0 	ble.w	801a840 <_dtoa_r+0x440>
 801a700:	4ac1      	ldr	r2, [pc, #772]	; (801aa08 <_dtoa_r+0x608>)
 801a702:	f00b 010f 	and.w	r1, fp, #15
 801a706:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 801a70a:	f41b 7f80 	tst.w	fp, #256	; 0x100
 801a70e:	ed92 7b00 	vldr	d7, [r2]
 801a712:	ea4f 122b 	mov.w	r2, fp, asr #4
 801a716:	f000 8087 	beq.w	801a828 <_dtoa_r+0x428>
 801a71a:	49bc      	ldr	r1, [pc, #752]	; (801aa0c <_dtoa_r+0x60c>)
 801a71c:	ed91 6b08 	vldr	d6, [r1, #32]
 801a720:	ee88 6b06 	vdiv.f64	d6, d8, d6
 801a724:	ed8d 6b02 	vstr	d6, [sp, #8]
 801a728:	f002 020f 	and.w	r2, r2, #15
 801a72c:	2103      	movs	r1, #3
 801a72e:	48b7      	ldr	r0, [pc, #732]	; (801aa0c <_dtoa_r+0x60c>)
 801a730:	2a00      	cmp	r2, #0
 801a732:	d17b      	bne.n	801a82c <_dtoa_r+0x42c>
 801a734:	ed9d 6b02 	vldr	d6, [sp, #8]
 801a738:	ee86 7b07 	vdiv.f64	d7, d6, d7
 801a73c:	ed8d 7b02 	vstr	d7, [sp, #8]
 801a740:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801a742:	ed9d 7b02 	vldr	d7, [sp, #8]
 801a746:	2a00      	cmp	r2, #0
 801a748:	f000 80a0 	beq.w	801a88c <_dtoa_r+0x48c>
 801a74c:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 801a750:	eeb4 7bc6 	vcmpe.f64	d7, d6
 801a754:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a758:	f140 8098 	bpl.w	801a88c <_dtoa_r+0x48c>
 801a75c:	f1b9 0f00 	cmp.w	r9, #0
 801a760:	f000 8094 	beq.w	801a88c <_dtoa_r+0x48c>
 801a764:	f1ba 0f00 	cmp.w	sl, #0
 801a768:	dd2f      	ble.n	801a7ca <_dtoa_r+0x3ca>
 801a76a:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 801a76e:	ee27 7b06 	vmul.f64	d7, d7, d6
 801a772:	ed8d 7b02 	vstr	d7, [sp, #8]
 801a776:	f10b 32ff 	add.w	r2, fp, #4294967295
 801a77a:	3101      	adds	r1, #1
 801a77c:	4654      	mov	r4, sl
 801a77e:	ed9d 6b02 	vldr	d6, [sp, #8]
 801a782:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 801a786:	ee07 1a90 	vmov	s15, r1
 801a78a:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 801a78e:	eea7 5b06 	vfma.f64	d5, d7, d6
 801a792:	ee15 7a90 	vmov	r7, s11
 801a796:	ec51 0b15 	vmov	r0, r1, d5
 801a79a:	f1a7 7150 	sub.w	r1, r7, #54525952	; 0x3400000
 801a79e:	2c00      	cmp	r4, #0
 801a7a0:	d177      	bne.n	801a892 <_dtoa_r+0x492>
 801a7a2:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 801a7a6:	ee36 6b47 	vsub.f64	d6, d6, d7
 801a7aa:	ec41 0b17 	vmov	d7, r0, r1
 801a7ae:	eeb4 6bc7 	vcmpe.f64	d6, d7
 801a7b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a7b6:	f300 826a 	bgt.w	801ac8e <_dtoa_r+0x88e>
 801a7ba:	eeb1 7b47 	vneg.f64	d7, d7
 801a7be:	eeb4 6bc7 	vcmpe.f64	d6, d7
 801a7c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a7c6:	f100 8260 	bmi.w	801ac8a <_dtoa_r+0x88a>
 801a7ca:	ed8d 8b02 	vstr	d8, [sp, #8]
 801a7ce:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 801a7d0:	2a00      	cmp	r2, #0
 801a7d2:	f2c0 811d 	blt.w	801aa10 <_dtoa_r+0x610>
 801a7d6:	f1bb 0f0e 	cmp.w	fp, #14
 801a7da:	f300 8119 	bgt.w	801aa10 <_dtoa_r+0x610>
 801a7de:	4b8a      	ldr	r3, [pc, #552]	; (801aa08 <_dtoa_r+0x608>)
 801a7e0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 801a7e4:	ed93 6b00 	vldr	d6, [r3]
 801a7e8:	9b08      	ldr	r3, [sp, #32]
 801a7ea:	2b00      	cmp	r3, #0
 801a7ec:	f280 80b7 	bge.w	801a95e <_dtoa_r+0x55e>
 801a7f0:	f1b9 0f00 	cmp.w	r9, #0
 801a7f4:	f300 80b3 	bgt.w	801a95e <_dtoa_r+0x55e>
 801a7f8:	f040 8246 	bne.w	801ac88 <_dtoa_r+0x888>
 801a7fc:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 801a800:	ee26 6b07 	vmul.f64	d6, d6, d7
 801a804:	ed9d 7b02 	vldr	d7, [sp, #8]
 801a808:	eeb4 6bc7 	vcmpe.f64	d6, d7
 801a80c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a810:	464c      	mov	r4, r9
 801a812:	464f      	mov	r7, r9
 801a814:	f280 821c 	bge.w	801ac50 <_dtoa_r+0x850>
 801a818:	f8dd 8004 	ldr.w	r8, [sp, #4]
 801a81c:	2331      	movs	r3, #49	; 0x31
 801a81e:	f808 3b01 	strb.w	r3, [r8], #1
 801a822:	f10b 0b01 	add.w	fp, fp, #1
 801a826:	e218      	b.n	801ac5a <_dtoa_r+0x85a>
 801a828:	2102      	movs	r1, #2
 801a82a:	e780      	b.n	801a72e <_dtoa_r+0x32e>
 801a82c:	07d4      	lsls	r4, r2, #31
 801a82e:	d504      	bpl.n	801a83a <_dtoa_r+0x43a>
 801a830:	ed90 6b00 	vldr	d6, [r0]
 801a834:	3101      	adds	r1, #1
 801a836:	ee27 7b06 	vmul.f64	d7, d7, d6
 801a83a:	1052      	asrs	r2, r2, #1
 801a83c:	3008      	adds	r0, #8
 801a83e:	e777      	b.n	801a730 <_dtoa_r+0x330>
 801a840:	d022      	beq.n	801a888 <_dtoa_r+0x488>
 801a842:	f1cb 0200 	rsb	r2, fp, #0
 801a846:	4970      	ldr	r1, [pc, #448]	; (801aa08 <_dtoa_r+0x608>)
 801a848:	f002 000f 	and.w	r0, r2, #15
 801a84c:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 801a850:	ed91 7b00 	vldr	d7, [r1]
 801a854:	ee28 7b07 	vmul.f64	d7, d8, d7
 801a858:	ed8d 7b02 	vstr	d7, [sp, #8]
 801a85c:	486b      	ldr	r0, [pc, #428]	; (801aa0c <_dtoa_r+0x60c>)
 801a85e:	1112      	asrs	r2, r2, #4
 801a860:	2400      	movs	r4, #0
 801a862:	2102      	movs	r1, #2
 801a864:	b92a      	cbnz	r2, 801a872 <_dtoa_r+0x472>
 801a866:	2c00      	cmp	r4, #0
 801a868:	f43f af6a 	beq.w	801a740 <_dtoa_r+0x340>
 801a86c:	ed8d 7b02 	vstr	d7, [sp, #8]
 801a870:	e766      	b.n	801a740 <_dtoa_r+0x340>
 801a872:	07d7      	lsls	r7, r2, #31
 801a874:	d505      	bpl.n	801a882 <_dtoa_r+0x482>
 801a876:	ed90 6b00 	vldr	d6, [r0]
 801a87a:	3101      	adds	r1, #1
 801a87c:	2401      	movs	r4, #1
 801a87e:	ee27 7b06 	vmul.f64	d7, d7, d6
 801a882:	1052      	asrs	r2, r2, #1
 801a884:	3008      	adds	r0, #8
 801a886:	e7ed      	b.n	801a864 <_dtoa_r+0x464>
 801a888:	2102      	movs	r1, #2
 801a88a:	e759      	b.n	801a740 <_dtoa_r+0x340>
 801a88c:	465a      	mov	r2, fp
 801a88e:	464c      	mov	r4, r9
 801a890:	e775      	b.n	801a77e <_dtoa_r+0x37e>
 801a892:	ec41 0b17 	vmov	d7, r0, r1
 801a896:	495c      	ldr	r1, [pc, #368]	; (801aa08 <_dtoa_r+0x608>)
 801a898:	eb01 01c4 	add.w	r1, r1, r4, lsl #3
 801a89c:	ed11 4b02 	vldr	d4, [r1, #-8]
 801a8a0:	9901      	ldr	r1, [sp, #4]
 801a8a2:	440c      	add	r4, r1
 801a8a4:	9907      	ldr	r1, [sp, #28]
 801a8a6:	b351      	cbz	r1, 801a8fe <_dtoa_r+0x4fe>
 801a8a8:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 801a8ac:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 801a8b0:	f8dd 8004 	ldr.w	r8, [sp, #4]
 801a8b4:	ee83 5b04 	vdiv.f64	d5, d3, d4
 801a8b8:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 801a8bc:	ee35 7b47 	vsub.f64	d7, d5, d7
 801a8c0:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 801a8c4:	ee14 1a90 	vmov	r1, s9
 801a8c8:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 801a8cc:	3130      	adds	r1, #48	; 0x30
 801a8ce:	ee36 6b45 	vsub.f64	d6, d6, d5
 801a8d2:	eeb4 6bc7 	vcmpe.f64	d6, d7
 801a8d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a8da:	f808 1b01 	strb.w	r1, [r8], #1
 801a8de:	d439      	bmi.n	801a954 <_dtoa_r+0x554>
 801a8e0:	ee32 5b46 	vsub.f64	d5, d2, d6
 801a8e4:	eeb4 5bc7 	vcmpe.f64	d5, d7
 801a8e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a8ec:	d472      	bmi.n	801a9d4 <_dtoa_r+0x5d4>
 801a8ee:	45a0      	cmp	r8, r4
 801a8f0:	f43f af6b 	beq.w	801a7ca <_dtoa_r+0x3ca>
 801a8f4:	ee27 7b03 	vmul.f64	d7, d7, d3
 801a8f8:	ee26 6b03 	vmul.f64	d6, d6, d3
 801a8fc:	e7e0      	b.n	801a8c0 <_dtoa_r+0x4c0>
 801a8fe:	f8dd 8004 	ldr.w	r8, [sp, #4]
 801a902:	ee27 7b04 	vmul.f64	d7, d7, d4
 801a906:	4620      	mov	r0, r4
 801a908:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 801a90c:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 801a910:	ee14 1a90 	vmov	r1, s9
 801a914:	3130      	adds	r1, #48	; 0x30
 801a916:	f808 1b01 	strb.w	r1, [r8], #1
 801a91a:	45a0      	cmp	r8, r4
 801a91c:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 801a920:	ee36 6b45 	vsub.f64	d6, d6, d5
 801a924:	d118      	bne.n	801a958 <_dtoa_r+0x558>
 801a926:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 801a92a:	ee37 4b05 	vadd.f64	d4, d7, d5
 801a92e:	eeb4 6bc4 	vcmpe.f64	d6, d4
 801a932:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a936:	dc4d      	bgt.n	801a9d4 <_dtoa_r+0x5d4>
 801a938:	ee35 5b47 	vsub.f64	d5, d5, d7
 801a93c:	eeb4 6bc5 	vcmpe.f64	d6, d5
 801a940:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a944:	f57f af41 	bpl.w	801a7ca <_dtoa_r+0x3ca>
 801a948:	4680      	mov	r8, r0
 801a94a:	3801      	subs	r0, #1
 801a94c:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 801a950:	2b30      	cmp	r3, #48	; 0x30
 801a952:	d0f9      	beq.n	801a948 <_dtoa_r+0x548>
 801a954:	4693      	mov	fp, r2
 801a956:	e02a      	b.n	801a9ae <_dtoa_r+0x5ae>
 801a958:	ee26 6b03 	vmul.f64	d6, d6, d3
 801a95c:	e7d6      	b.n	801a90c <_dtoa_r+0x50c>
 801a95e:	ed9d 7b02 	vldr	d7, [sp, #8]
 801a962:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 801a966:	f8dd 8004 	ldr.w	r8, [sp, #4]
 801a96a:	ee87 5b06 	vdiv.f64	d5, d7, d6
 801a96e:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 801a972:	ee15 3a10 	vmov	r3, s10
 801a976:	3330      	adds	r3, #48	; 0x30
 801a978:	f808 3b01 	strb.w	r3, [r8], #1
 801a97c:	9b01      	ldr	r3, [sp, #4]
 801a97e:	eba8 0303 	sub.w	r3, r8, r3
 801a982:	4599      	cmp	r9, r3
 801a984:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 801a988:	eea3 7b46 	vfms.f64	d7, d3, d6
 801a98c:	d133      	bne.n	801a9f6 <_dtoa_r+0x5f6>
 801a98e:	ee37 7b07 	vadd.f64	d7, d7, d7
 801a992:	eeb4 7bc6 	vcmpe.f64	d7, d6
 801a996:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a99a:	dc1a      	bgt.n	801a9d2 <_dtoa_r+0x5d2>
 801a99c:	eeb4 7b46 	vcmp.f64	d7, d6
 801a9a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a9a4:	d103      	bne.n	801a9ae <_dtoa_r+0x5ae>
 801a9a6:	ee15 3a10 	vmov	r3, s10
 801a9aa:	07d9      	lsls	r1, r3, #31
 801a9ac:	d411      	bmi.n	801a9d2 <_dtoa_r+0x5d2>
 801a9ae:	4629      	mov	r1, r5
 801a9b0:	4630      	mov	r0, r6
 801a9b2:	f000 fbd1 	bl	801b158 <_Bfree>
 801a9b6:	2300      	movs	r3, #0
 801a9b8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801a9ba:	f888 3000 	strb.w	r3, [r8]
 801a9be:	f10b 0301 	add.w	r3, fp, #1
 801a9c2:	6013      	str	r3, [r2, #0]
 801a9c4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801a9c6:	2b00      	cmp	r3, #0
 801a9c8:	f43f ad69 	beq.w	801a49e <_dtoa_r+0x9e>
 801a9cc:	f8c3 8000 	str.w	r8, [r3]
 801a9d0:	e565      	b.n	801a49e <_dtoa_r+0x9e>
 801a9d2:	465a      	mov	r2, fp
 801a9d4:	4643      	mov	r3, r8
 801a9d6:	4698      	mov	r8, r3
 801a9d8:	f813 1d01 	ldrb.w	r1, [r3, #-1]!
 801a9dc:	2939      	cmp	r1, #57	; 0x39
 801a9de:	d106      	bne.n	801a9ee <_dtoa_r+0x5ee>
 801a9e0:	9901      	ldr	r1, [sp, #4]
 801a9e2:	4299      	cmp	r1, r3
 801a9e4:	d1f7      	bne.n	801a9d6 <_dtoa_r+0x5d6>
 801a9e6:	9801      	ldr	r0, [sp, #4]
 801a9e8:	2130      	movs	r1, #48	; 0x30
 801a9ea:	3201      	adds	r2, #1
 801a9ec:	7001      	strb	r1, [r0, #0]
 801a9ee:	7819      	ldrb	r1, [r3, #0]
 801a9f0:	3101      	adds	r1, #1
 801a9f2:	7019      	strb	r1, [r3, #0]
 801a9f4:	e7ae      	b.n	801a954 <_dtoa_r+0x554>
 801a9f6:	ee27 7b04 	vmul.f64	d7, d7, d4
 801a9fa:	eeb5 7b40 	vcmp.f64	d7, #0.0
 801a9fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801aa02:	d1b2      	bne.n	801a96a <_dtoa_r+0x56a>
 801aa04:	e7d3      	b.n	801a9ae <_dtoa_r+0x5ae>
 801aa06:	bf00      	nop
 801aa08:	0801f850 	.word	0x0801f850
 801aa0c:	0801f828 	.word	0x0801f828
 801aa10:	9907      	ldr	r1, [sp, #28]
 801aa12:	2900      	cmp	r1, #0
 801aa14:	f000 80d0 	beq.w	801abb8 <_dtoa_r+0x7b8>
 801aa18:	9906      	ldr	r1, [sp, #24]
 801aa1a:	2901      	cmp	r1, #1
 801aa1c:	f300 80b4 	bgt.w	801ab88 <_dtoa_r+0x788>
 801aa20:	9909      	ldr	r1, [sp, #36]	; 0x24
 801aa22:	2900      	cmp	r1, #0
 801aa24:	f000 80ac 	beq.w	801ab80 <_dtoa_r+0x780>
 801aa28:	f202 4233 	addw	r2, r2, #1075	; 0x433
 801aa2c:	f8dd 8010 	ldr.w	r8, [sp, #16]
 801aa30:	461c      	mov	r4, r3
 801aa32:	9309      	str	r3, [sp, #36]	; 0x24
 801aa34:	9b04      	ldr	r3, [sp, #16]
 801aa36:	4413      	add	r3, r2
 801aa38:	9304      	str	r3, [sp, #16]
 801aa3a:	9b05      	ldr	r3, [sp, #20]
 801aa3c:	2101      	movs	r1, #1
 801aa3e:	4413      	add	r3, r2
 801aa40:	4630      	mov	r0, r6
 801aa42:	9305      	str	r3, [sp, #20]
 801aa44:	f000 fc3e 	bl	801b2c4 <__i2b>
 801aa48:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801aa4a:	4607      	mov	r7, r0
 801aa4c:	f1b8 0f00 	cmp.w	r8, #0
 801aa50:	d00d      	beq.n	801aa6e <_dtoa_r+0x66e>
 801aa52:	9a05      	ldr	r2, [sp, #20]
 801aa54:	2a00      	cmp	r2, #0
 801aa56:	dd0a      	ble.n	801aa6e <_dtoa_r+0x66e>
 801aa58:	4542      	cmp	r2, r8
 801aa5a:	9904      	ldr	r1, [sp, #16]
 801aa5c:	bfa8      	it	ge
 801aa5e:	4642      	movge	r2, r8
 801aa60:	1a89      	subs	r1, r1, r2
 801aa62:	9104      	str	r1, [sp, #16]
 801aa64:	9905      	ldr	r1, [sp, #20]
 801aa66:	eba8 0802 	sub.w	r8, r8, r2
 801aa6a:	1a8a      	subs	r2, r1, r2
 801aa6c:	9205      	str	r2, [sp, #20]
 801aa6e:	b303      	cbz	r3, 801aab2 <_dtoa_r+0x6b2>
 801aa70:	9a07      	ldr	r2, [sp, #28]
 801aa72:	2a00      	cmp	r2, #0
 801aa74:	f000 80a5 	beq.w	801abc2 <_dtoa_r+0x7c2>
 801aa78:	2c00      	cmp	r4, #0
 801aa7a:	dd13      	ble.n	801aaa4 <_dtoa_r+0x6a4>
 801aa7c:	4639      	mov	r1, r7
 801aa7e:	4622      	mov	r2, r4
 801aa80:	4630      	mov	r0, r6
 801aa82:	930d      	str	r3, [sp, #52]	; 0x34
 801aa84:	f000 fcde 	bl	801b444 <__pow5mult>
 801aa88:	462a      	mov	r2, r5
 801aa8a:	4601      	mov	r1, r0
 801aa8c:	4607      	mov	r7, r0
 801aa8e:	4630      	mov	r0, r6
 801aa90:	f000 fc2e 	bl	801b2f0 <__multiply>
 801aa94:	4629      	mov	r1, r5
 801aa96:	9009      	str	r0, [sp, #36]	; 0x24
 801aa98:	4630      	mov	r0, r6
 801aa9a:	f000 fb5d 	bl	801b158 <_Bfree>
 801aa9e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801aaa0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801aaa2:	4615      	mov	r5, r2
 801aaa4:	1b1a      	subs	r2, r3, r4
 801aaa6:	d004      	beq.n	801aab2 <_dtoa_r+0x6b2>
 801aaa8:	4629      	mov	r1, r5
 801aaaa:	4630      	mov	r0, r6
 801aaac:	f000 fcca 	bl	801b444 <__pow5mult>
 801aab0:	4605      	mov	r5, r0
 801aab2:	2101      	movs	r1, #1
 801aab4:	4630      	mov	r0, r6
 801aab6:	f000 fc05 	bl	801b2c4 <__i2b>
 801aaba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801aabc:	2b00      	cmp	r3, #0
 801aabe:	4604      	mov	r4, r0
 801aac0:	f340 8081 	ble.w	801abc6 <_dtoa_r+0x7c6>
 801aac4:	461a      	mov	r2, r3
 801aac6:	4601      	mov	r1, r0
 801aac8:	4630      	mov	r0, r6
 801aaca:	f000 fcbb 	bl	801b444 <__pow5mult>
 801aace:	9b06      	ldr	r3, [sp, #24]
 801aad0:	2b01      	cmp	r3, #1
 801aad2:	4604      	mov	r4, r0
 801aad4:	dd7a      	ble.n	801abcc <_dtoa_r+0x7cc>
 801aad6:	2300      	movs	r3, #0
 801aad8:	9309      	str	r3, [sp, #36]	; 0x24
 801aada:	6922      	ldr	r2, [r4, #16]
 801aadc:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 801aae0:	6910      	ldr	r0, [r2, #16]
 801aae2:	f000 fba1 	bl	801b228 <__hi0bits>
 801aae6:	f1c0 0020 	rsb	r0, r0, #32
 801aaea:	9b05      	ldr	r3, [sp, #20]
 801aaec:	4418      	add	r0, r3
 801aaee:	f010 001f 	ands.w	r0, r0, #31
 801aaf2:	f000 8093 	beq.w	801ac1c <_dtoa_r+0x81c>
 801aaf6:	f1c0 0220 	rsb	r2, r0, #32
 801aafa:	2a04      	cmp	r2, #4
 801aafc:	f340 8085 	ble.w	801ac0a <_dtoa_r+0x80a>
 801ab00:	9b04      	ldr	r3, [sp, #16]
 801ab02:	f1c0 001c 	rsb	r0, r0, #28
 801ab06:	4403      	add	r3, r0
 801ab08:	9304      	str	r3, [sp, #16]
 801ab0a:	9b05      	ldr	r3, [sp, #20]
 801ab0c:	4480      	add	r8, r0
 801ab0e:	4403      	add	r3, r0
 801ab10:	9305      	str	r3, [sp, #20]
 801ab12:	9b04      	ldr	r3, [sp, #16]
 801ab14:	2b00      	cmp	r3, #0
 801ab16:	dd05      	ble.n	801ab24 <_dtoa_r+0x724>
 801ab18:	4629      	mov	r1, r5
 801ab1a:	461a      	mov	r2, r3
 801ab1c:	4630      	mov	r0, r6
 801ab1e:	f000 fceb 	bl	801b4f8 <__lshift>
 801ab22:	4605      	mov	r5, r0
 801ab24:	9b05      	ldr	r3, [sp, #20]
 801ab26:	2b00      	cmp	r3, #0
 801ab28:	dd05      	ble.n	801ab36 <_dtoa_r+0x736>
 801ab2a:	4621      	mov	r1, r4
 801ab2c:	461a      	mov	r2, r3
 801ab2e:	4630      	mov	r0, r6
 801ab30:	f000 fce2 	bl	801b4f8 <__lshift>
 801ab34:	4604      	mov	r4, r0
 801ab36:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 801ab38:	2b00      	cmp	r3, #0
 801ab3a:	d071      	beq.n	801ac20 <_dtoa_r+0x820>
 801ab3c:	4621      	mov	r1, r4
 801ab3e:	4628      	mov	r0, r5
 801ab40:	f000 fd46 	bl	801b5d0 <__mcmp>
 801ab44:	2800      	cmp	r0, #0
 801ab46:	da6b      	bge.n	801ac20 <_dtoa_r+0x820>
 801ab48:	2300      	movs	r3, #0
 801ab4a:	4629      	mov	r1, r5
 801ab4c:	220a      	movs	r2, #10
 801ab4e:	4630      	mov	r0, r6
 801ab50:	f000 fb24 	bl	801b19c <__multadd>
 801ab54:	9b07      	ldr	r3, [sp, #28]
 801ab56:	f10b 3bff 	add.w	fp, fp, #4294967295
 801ab5a:	4605      	mov	r5, r0
 801ab5c:	2b00      	cmp	r3, #0
 801ab5e:	f000 8197 	beq.w	801ae90 <_dtoa_r+0xa90>
 801ab62:	4639      	mov	r1, r7
 801ab64:	2300      	movs	r3, #0
 801ab66:	220a      	movs	r2, #10
 801ab68:	4630      	mov	r0, r6
 801ab6a:	f000 fb17 	bl	801b19c <__multadd>
 801ab6e:	f1ba 0f00 	cmp.w	sl, #0
 801ab72:	4607      	mov	r7, r0
 801ab74:	f300 8093 	bgt.w	801ac9e <_dtoa_r+0x89e>
 801ab78:	9b06      	ldr	r3, [sp, #24]
 801ab7a:	2b02      	cmp	r3, #2
 801ab7c:	dc57      	bgt.n	801ac2e <_dtoa_r+0x82e>
 801ab7e:	e08e      	b.n	801ac9e <_dtoa_r+0x89e>
 801ab80:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 801ab82:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 801ab86:	e751      	b.n	801aa2c <_dtoa_r+0x62c>
 801ab88:	f109 34ff 	add.w	r4, r9, #4294967295
 801ab8c:	42a3      	cmp	r3, r4
 801ab8e:	bfbf      	itttt	lt
 801ab90:	1ae2      	sublt	r2, r4, r3
 801ab92:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 801ab94:	189b      	addlt	r3, r3, r2
 801ab96:	930a      	strlt	r3, [sp, #40]	; 0x28
 801ab98:	bfae      	itee	ge
 801ab9a:	1b1c      	subge	r4, r3, r4
 801ab9c:	4623      	movlt	r3, r4
 801ab9e:	2400      	movlt	r4, #0
 801aba0:	f1b9 0f00 	cmp.w	r9, #0
 801aba4:	bfb5      	itete	lt
 801aba6:	9a04      	ldrlt	r2, [sp, #16]
 801aba8:	f8dd 8010 	ldrge.w	r8, [sp, #16]
 801abac:	eba2 0809 	sublt.w	r8, r2, r9
 801abb0:	464a      	movge	r2, r9
 801abb2:	bfb8      	it	lt
 801abb4:	2200      	movlt	r2, #0
 801abb6:	e73c      	b.n	801aa32 <_dtoa_r+0x632>
 801abb8:	f8dd 8010 	ldr.w	r8, [sp, #16]
 801abbc:	9f07      	ldr	r7, [sp, #28]
 801abbe:	461c      	mov	r4, r3
 801abc0:	e744      	b.n	801aa4c <_dtoa_r+0x64c>
 801abc2:	461a      	mov	r2, r3
 801abc4:	e770      	b.n	801aaa8 <_dtoa_r+0x6a8>
 801abc6:	9b06      	ldr	r3, [sp, #24]
 801abc8:	2b01      	cmp	r3, #1
 801abca:	dc18      	bgt.n	801abfe <_dtoa_r+0x7fe>
 801abcc:	9b02      	ldr	r3, [sp, #8]
 801abce:	b9b3      	cbnz	r3, 801abfe <_dtoa_r+0x7fe>
 801abd0:	9b03      	ldr	r3, [sp, #12]
 801abd2:	f3c3 0213 	ubfx	r2, r3, #0, #20
 801abd6:	b9a2      	cbnz	r2, 801ac02 <_dtoa_r+0x802>
 801abd8:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 801abdc:	0d12      	lsrs	r2, r2, #20
 801abde:	0512      	lsls	r2, r2, #20
 801abe0:	b18a      	cbz	r2, 801ac06 <_dtoa_r+0x806>
 801abe2:	9b04      	ldr	r3, [sp, #16]
 801abe4:	3301      	adds	r3, #1
 801abe6:	9304      	str	r3, [sp, #16]
 801abe8:	9b05      	ldr	r3, [sp, #20]
 801abea:	3301      	adds	r3, #1
 801abec:	9305      	str	r3, [sp, #20]
 801abee:	2301      	movs	r3, #1
 801abf0:	9309      	str	r3, [sp, #36]	; 0x24
 801abf2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801abf4:	2b00      	cmp	r3, #0
 801abf6:	f47f af70 	bne.w	801aada <_dtoa_r+0x6da>
 801abfa:	2001      	movs	r0, #1
 801abfc:	e775      	b.n	801aaea <_dtoa_r+0x6ea>
 801abfe:	2300      	movs	r3, #0
 801ac00:	e7f6      	b.n	801abf0 <_dtoa_r+0x7f0>
 801ac02:	9b02      	ldr	r3, [sp, #8]
 801ac04:	e7f4      	b.n	801abf0 <_dtoa_r+0x7f0>
 801ac06:	9209      	str	r2, [sp, #36]	; 0x24
 801ac08:	e7f3      	b.n	801abf2 <_dtoa_r+0x7f2>
 801ac0a:	d082      	beq.n	801ab12 <_dtoa_r+0x712>
 801ac0c:	9b04      	ldr	r3, [sp, #16]
 801ac0e:	321c      	adds	r2, #28
 801ac10:	4413      	add	r3, r2
 801ac12:	9304      	str	r3, [sp, #16]
 801ac14:	9b05      	ldr	r3, [sp, #20]
 801ac16:	4490      	add	r8, r2
 801ac18:	4413      	add	r3, r2
 801ac1a:	e779      	b.n	801ab10 <_dtoa_r+0x710>
 801ac1c:	4602      	mov	r2, r0
 801ac1e:	e7f5      	b.n	801ac0c <_dtoa_r+0x80c>
 801ac20:	f1b9 0f00 	cmp.w	r9, #0
 801ac24:	dc36      	bgt.n	801ac94 <_dtoa_r+0x894>
 801ac26:	9b06      	ldr	r3, [sp, #24]
 801ac28:	2b02      	cmp	r3, #2
 801ac2a:	dd33      	ble.n	801ac94 <_dtoa_r+0x894>
 801ac2c:	46ca      	mov	sl, r9
 801ac2e:	f1ba 0f00 	cmp.w	sl, #0
 801ac32:	d10d      	bne.n	801ac50 <_dtoa_r+0x850>
 801ac34:	4621      	mov	r1, r4
 801ac36:	4653      	mov	r3, sl
 801ac38:	2205      	movs	r2, #5
 801ac3a:	4630      	mov	r0, r6
 801ac3c:	f000 faae 	bl	801b19c <__multadd>
 801ac40:	4601      	mov	r1, r0
 801ac42:	4604      	mov	r4, r0
 801ac44:	4628      	mov	r0, r5
 801ac46:	f000 fcc3 	bl	801b5d0 <__mcmp>
 801ac4a:	2800      	cmp	r0, #0
 801ac4c:	f73f ade4 	bgt.w	801a818 <_dtoa_r+0x418>
 801ac50:	9b08      	ldr	r3, [sp, #32]
 801ac52:	f8dd 8004 	ldr.w	r8, [sp, #4]
 801ac56:	ea6f 0b03 	mvn.w	fp, r3
 801ac5a:	f04f 0900 	mov.w	r9, #0
 801ac5e:	4621      	mov	r1, r4
 801ac60:	4630      	mov	r0, r6
 801ac62:	f000 fa79 	bl	801b158 <_Bfree>
 801ac66:	2f00      	cmp	r7, #0
 801ac68:	f43f aea1 	beq.w	801a9ae <_dtoa_r+0x5ae>
 801ac6c:	f1b9 0f00 	cmp.w	r9, #0
 801ac70:	d005      	beq.n	801ac7e <_dtoa_r+0x87e>
 801ac72:	45b9      	cmp	r9, r7
 801ac74:	d003      	beq.n	801ac7e <_dtoa_r+0x87e>
 801ac76:	4649      	mov	r1, r9
 801ac78:	4630      	mov	r0, r6
 801ac7a:	f000 fa6d 	bl	801b158 <_Bfree>
 801ac7e:	4639      	mov	r1, r7
 801ac80:	4630      	mov	r0, r6
 801ac82:	f000 fa69 	bl	801b158 <_Bfree>
 801ac86:	e692      	b.n	801a9ae <_dtoa_r+0x5ae>
 801ac88:	2400      	movs	r4, #0
 801ac8a:	4627      	mov	r7, r4
 801ac8c:	e7e0      	b.n	801ac50 <_dtoa_r+0x850>
 801ac8e:	4693      	mov	fp, r2
 801ac90:	4627      	mov	r7, r4
 801ac92:	e5c1      	b.n	801a818 <_dtoa_r+0x418>
 801ac94:	9b07      	ldr	r3, [sp, #28]
 801ac96:	46ca      	mov	sl, r9
 801ac98:	2b00      	cmp	r3, #0
 801ac9a:	f000 8100 	beq.w	801ae9e <_dtoa_r+0xa9e>
 801ac9e:	f1b8 0f00 	cmp.w	r8, #0
 801aca2:	dd05      	ble.n	801acb0 <_dtoa_r+0x8b0>
 801aca4:	4639      	mov	r1, r7
 801aca6:	4642      	mov	r2, r8
 801aca8:	4630      	mov	r0, r6
 801acaa:	f000 fc25 	bl	801b4f8 <__lshift>
 801acae:	4607      	mov	r7, r0
 801acb0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801acb2:	2b00      	cmp	r3, #0
 801acb4:	d05d      	beq.n	801ad72 <_dtoa_r+0x972>
 801acb6:	6879      	ldr	r1, [r7, #4]
 801acb8:	4630      	mov	r0, r6
 801acba:	f000 fa0d 	bl	801b0d8 <_Balloc>
 801acbe:	4680      	mov	r8, r0
 801acc0:	b928      	cbnz	r0, 801acce <_dtoa_r+0x8ce>
 801acc2:	4b82      	ldr	r3, [pc, #520]	; (801aecc <_dtoa_r+0xacc>)
 801acc4:	4602      	mov	r2, r0
 801acc6:	f240 21ef 	movw	r1, #751	; 0x2ef
 801acca:	f7ff bbb1 	b.w	801a430 <_dtoa_r+0x30>
 801acce:	693a      	ldr	r2, [r7, #16]
 801acd0:	3202      	adds	r2, #2
 801acd2:	0092      	lsls	r2, r2, #2
 801acd4:	f107 010c 	add.w	r1, r7, #12
 801acd8:	300c      	adds	r0, #12
 801acda:	f7ff fadc 	bl	801a296 <memcpy>
 801acde:	2201      	movs	r2, #1
 801ace0:	4641      	mov	r1, r8
 801ace2:	4630      	mov	r0, r6
 801ace4:	f000 fc08 	bl	801b4f8 <__lshift>
 801ace8:	9b01      	ldr	r3, [sp, #4]
 801acea:	3301      	adds	r3, #1
 801acec:	9304      	str	r3, [sp, #16]
 801acee:	9b01      	ldr	r3, [sp, #4]
 801acf0:	4453      	add	r3, sl
 801acf2:	9308      	str	r3, [sp, #32]
 801acf4:	9b02      	ldr	r3, [sp, #8]
 801acf6:	f003 0301 	and.w	r3, r3, #1
 801acfa:	46b9      	mov	r9, r7
 801acfc:	9307      	str	r3, [sp, #28]
 801acfe:	4607      	mov	r7, r0
 801ad00:	9b04      	ldr	r3, [sp, #16]
 801ad02:	4621      	mov	r1, r4
 801ad04:	3b01      	subs	r3, #1
 801ad06:	4628      	mov	r0, r5
 801ad08:	9302      	str	r3, [sp, #8]
 801ad0a:	f7ff faf1 	bl	801a2f0 <quorem>
 801ad0e:	4603      	mov	r3, r0
 801ad10:	3330      	adds	r3, #48	; 0x30
 801ad12:	9005      	str	r0, [sp, #20]
 801ad14:	4649      	mov	r1, r9
 801ad16:	4628      	mov	r0, r5
 801ad18:	9309      	str	r3, [sp, #36]	; 0x24
 801ad1a:	f000 fc59 	bl	801b5d0 <__mcmp>
 801ad1e:	463a      	mov	r2, r7
 801ad20:	4682      	mov	sl, r0
 801ad22:	4621      	mov	r1, r4
 801ad24:	4630      	mov	r0, r6
 801ad26:	f000 fc6f 	bl	801b608 <__mdiff>
 801ad2a:	68c2      	ldr	r2, [r0, #12]
 801ad2c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801ad2e:	4680      	mov	r8, r0
 801ad30:	bb0a      	cbnz	r2, 801ad76 <_dtoa_r+0x976>
 801ad32:	4601      	mov	r1, r0
 801ad34:	4628      	mov	r0, r5
 801ad36:	f000 fc4b 	bl	801b5d0 <__mcmp>
 801ad3a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801ad3c:	4602      	mov	r2, r0
 801ad3e:	4641      	mov	r1, r8
 801ad40:	4630      	mov	r0, r6
 801ad42:	e9cd 3209 	strd	r3, r2, [sp, #36]	; 0x24
 801ad46:	f000 fa07 	bl	801b158 <_Bfree>
 801ad4a:	9b06      	ldr	r3, [sp, #24]
 801ad4c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801ad4e:	f8dd 8010 	ldr.w	r8, [sp, #16]
 801ad52:	ea43 0102 	orr.w	r1, r3, r2
 801ad56:	9b07      	ldr	r3, [sp, #28]
 801ad58:	4319      	orrs	r1, r3
 801ad5a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801ad5c:	d10d      	bne.n	801ad7a <_dtoa_r+0x97a>
 801ad5e:	2b39      	cmp	r3, #57	; 0x39
 801ad60:	d029      	beq.n	801adb6 <_dtoa_r+0x9b6>
 801ad62:	f1ba 0f00 	cmp.w	sl, #0
 801ad66:	dd01      	ble.n	801ad6c <_dtoa_r+0x96c>
 801ad68:	9b05      	ldr	r3, [sp, #20]
 801ad6a:	3331      	adds	r3, #49	; 0x31
 801ad6c:	9a02      	ldr	r2, [sp, #8]
 801ad6e:	7013      	strb	r3, [r2, #0]
 801ad70:	e775      	b.n	801ac5e <_dtoa_r+0x85e>
 801ad72:	4638      	mov	r0, r7
 801ad74:	e7b8      	b.n	801ace8 <_dtoa_r+0x8e8>
 801ad76:	2201      	movs	r2, #1
 801ad78:	e7e1      	b.n	801ad3e <_dtoa_r+0x93e>
 801ad7a:	f1ba 0f00 	cmp.w	sl, #0
 801ad7e:	db06      	blt.n	801ad8e <_dtoa_r+0x98e>
 801ad80:	9906      	ldr	r1, [sp, #24]
 801ad82:	ea41 0a0a 	orr.w	sl, r1, sl
 801ad86:	9907      	ldr	r1, [sp, #28]
 801ad88:	ea5a 0a01 	orrs.w	sl, sl, r1
 801ad8c:	d120      	bne.n	801add0 <_dtoa_r+0x9d0>
 801ad8e:	2a00      	cmp	r2, #0
 801ad90:	ddec      	ble.n	801ad6c <_dtoa_r+0x96c>
 801ad92:	4629      	mov	r1, r5
 801ad94:	2201      	movs	r2, #1
 801ad96:	4630      	mov	r0, r6
 801ad98:	9304      	str	r3, [sp, #16]
 801ad9a:	f000 fbad 	bl	801b4f8 <__lshift>
 801ad9e:	4621      	mov	r1, r4
 801ada0:	4605      	mov	r5, r0
 801ada2:	f000 fc15 	bl	801b5d0 <__mcmp>
 801ada6:	2800      	cmp	r0, #0
 801ada8:	9b04      	ldr	r3, [sp, #16]
 801adaa:	dc02      	bgt.n	801adb2 <_dtoa_r+0x9b2>
 801adac:	d1de      	bne.n	801ad6c <_dtoa_r+0x96c>
 801adae:	07da      	lsls	r2, r3, #31
 801adb0:	d5dc      	bpl.n	801ad6c <_dtoa_r+0x96c>
 801adb2:	2b39      	cmp	r3, #57	; 0x39
 801adb4:	d1d8      	bne.n	801ad68 <_dtoa_r+0x968>
 801adb6:	9a02      	ldr	r2, [sp, #8]
 801adb8:	2339      	movs	r3, #57	; 0x39
 801adba:	7013      	strb	r3, [r2, #0]
 801adbc:	4643      	mov	r3, r8
 801adbe:	4698      	mov	r8, r3
 801adc0:	3b01      	subs	r3, #1
 801adc2:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 801adc6:	2a39      	cmp	r2, #57	; 0x39
 801adc8:	d051      	beq.n	801ae6e <_dtoa_r+0xa6e>
 801adca:	3201      	adds	r2, #1
 801adcc:	701a      	strb	r2, [r3, #0]
 801adce:	e746      	b.n	801ac5e <_dtoa_r+0x85e>
 801add0:	2a00      	cmp	r2, #0
 801add2:	dd03      	ble.n	801addc <_dtoa_r+0x9dc>
 801add4:	2b39      	cmp	r3, #57	; 0x39
 801add6:	d0ee      	beq.n	801adb6 <_dtoa_r+0x9b6>
 801add8:	3301      	adds	r3, #1
 801adda:	e7c7      	b.n	801ad6c <_dtoa_r+0x96c>
 801addc:	9a04      	ldr	r2, [sp, #16]
 801adde:	9908      	ldr	r1, [sp, #32]
 801ade0:	f802 3c01 	strb.w	r3, [r2, #-1]
 801ade4:	428a      	cmp	r2, r1
 801ade6:	d02b      	beq.n	801ae40 <_dtoa_r+0xa40>
 801ade8:	4629      	mov	r1, r5
 801adea:	2300      	movs	r3, #0
 801adec:	220a      	movs	r2, #10
 801adee:	4630      	mov	r0, r6
 801adf0:	f000 f9d4 	bl	801b19c <__multadd>
 801adf4:	45b9      	cmp	r9, r7
 801adf6:	4605      	mov	r5, r0
 801adf8:	f04f 0300 	mov.w	r3, #0
 801adfc:	f04f 020a 	mov.w	r2, #10
 801ae00:	4649      	mov	r1, r9
 801ae02:	4630      	mov	r0, r6
 801ae04:	d107      	bne.n	801ae16 <_dtoa_r+0xa16>
 801ae06:	f000 f9c9 	bl	801b19c <__multadd>
 801ae0a:	4681      	mov	r9, r0
 801ae0c:	4607      	mov	r7, r0
 801ae0e:	9b04      	ldr	r3, [sp, #16]
 801ae10:	3301      	adds	r3, #1
 801ae12:	9304      	str	r3, [sp, #16]
 801ae14:	e774      	b.n	801ad00 <_dtoa_r+0x900>
 801ae16:	f000 f9c1 	bl	801b19c <__multadd>
 801ae1a:	4639      	mov	r1, r7
 801ae1c:	4681      	mov	r9, r0
 801ae1e:	2300      	movs	r3, #0
 801ae20:	220a      	movs	r2, #10
 801ae22:	4630      	mov	r0, r6
 801ae24:	f000 f9ba 	bl	801b19c <__multadd>
 801ae28:	4607      	mov	r7, r0
 801ae2a:	e7f0      	b.n	801ae0e <_dtoa_r+0xa0e>
 801ae2c:	f1ba 0f00 	cmp.w	sl, #0
 801ae30:	9a01      	ldr	r2, [sp, #4]
 801ae32:	bfcc      	ite	gt
 801ae34:	46d0      	movgt	r8, sl
 801ae36:	f04f 0801 	movle.w	r8, #1
 801ae3a:	4490      	add	r8, r2
 801ae3c:	f04f 0900 	mov.w	r9, #0
 801ae40:	4629      	mov	r1, r5
 801ae42:	2201      	movs	r2, #1
 801ae44:	4630      	mov	r0, r6
 801ae46:	9302      	str	r3, [sp, #8]
 801ae48:	f000 fb56 	bl	801b4f8 <__lshift>
 801ae4c:	4621      	mov	r1, r4
 801ae4e:	4605      	mov	r5, r0
 801ae50:	f000 fbbe 	bl	801b5d0 <__mcmp>
 801ae54:	2800      	cmp	r0, #0
 801ae56:	dcb1      	bgt.n	801adbc <_dtoa_r+0x9bc>
 801ae58:	d102      	bne.n	801ae60 <_dtoa_r+0xa60>
 801ae5a:	9b02      	ldr	r3, [sp, #8]
 801ae5c:	07db      	lsls	r3, r3, #31
 801ae5e:	d4ad      	bmi.n	801adbc <_dtoa_r+0x9bc>
 801ae60:	4643      	mov	r3, r8
 801ae62:	4698      	mov	r8, r3
 801ae64:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 801ae68:	2a30      	cmp	r2, #48	; 0x30
 801ae6a:	d0fa      	beq.n	801ae62 <_dtoa_r+0xa62>
 801ae6c:	e6f7      	b.n	801ac5e <_dtoa_r+0x85e>
 801ae6e:	9a01      	ldr	r2, [sp, #4]
 801ae70:	429a      	cmp	r2, r3
 801ae72:	d1a4      	bne.n	801adbe <_dtoa_r+0x9be>
 801ae74:	f10b 0b01 	add.w	fp, fp, #1
 801ae78:	2331      	movs	r3, #49	; 0x31
 801ae7a:	e778      	b.n	801ad6e <_dtoa_r+0x96e>
 801ae7c:	4b14      	ldr	r3, [pc, #80]	; (801aed0 <_dtoa_r+0xad0>)
 801ae7e:	f7ff bb2a 	b.w	801a4d6 <_dtoa_r+0xd6>
 801ae82:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 801ae84:	2b00      	cmp	r3, #0
 801ae86:	f47f ab05 	bne.w	801a494 <_dtoa_r+0x94>
 801ae8a:	4b12      	ldr	r3, [pc, #72]	; (801aed4 <_dtoa_r+0xad4>)
 801ae8c:	f7ff bb23 	b.w	801a4d6 <_dtoa_r+0xd6>
 801ae90:	f1ba 0f00 	cmp.w	sl, #0
 801ae94:	dc03      	bgt.n	801ae9e <_dtoa_r+0xa9e>
 801ae96:	9b06      	ldr	r3, [sp, #24]
 801ae98:	2b02      	cmp	r3, #2
 801ae9a:	f73f aec8 	bgt.w	801ac2e <_dtoa_r+0x82e>
 801ae9e:	f8dd 8004 	ldr.w	r8, [sp, #4]
 801aea2:	4621      	mov	r1, r4
 801aea4:	4628      	mov	r0, r5
 801aea6:	f7ff fa23 	bl	801a2f0 <quorem>
 801aeaa:	f100 0330 	add.w	r3, r0, #48	; 0x30
 801aeae:	f808 3b01 	strb.w	r3, [r8], #1
 801aeb2:	9a01      	ldr	r2, [sp, #4]
 801aeb4:	eba8 0202 	sub.w	r2, r8, r2
 801aeb8:	4592      	cmp	sl, r2
 801aeba:	ddb7      	ble.n	801ae2c <_dtoa_r+0xa2c>
 801aebc:	4629      	mov	r1, r5
 801aebe:	2300      	movs	r3, #0
 801aec0:	220a      	movs	r2, #10
 801aec2:	4630      	mov	r0, r6
 801aec4:	f000 f96a 	bl	801b19c <__multadd>
 801aec8:	4605      	mov	r5, r0
 801aeca:	e7ea      	b.n	801aea2 <_dtoa_r+0xaa2>
 801aecc:	0801f7bb 	.word	0x0801f7bb
 801aed0:	0801f6f6 	.word	0x0801f6f6
 801aed4:	0801f756 	.word	0x0801f756

0801aed8 <_free_r>:
 801aed8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801aeda:	2900      	cmp	r1, #0
 801aedc:	d044      	beq.n	801af68 <_free_r+0x90>
 801aede:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801aee2:	9001      	str	r0, [sp, #4]
 801aee4:	2b00      	cmp	r3, #0
 801aee6:	f1a1 0404 	sub.w	r4, r1, #4
 801aeea:	bfb8      	it	lt
 801aeec:	18e4      	addlt	r4, r4, r3
 801aeee:	f000 f8e7 	bl	801b0c0 <__malloc_lock>
 801aef2:	4a1e      	ldr	r2, [pc, #120]	; (801af6c <_free_r+0x94>)
 801aef4:	9801      	ldr	r0, [sp, #4]
 801aef6:	6813      	ldr	r3, [r2, #0]
 801aef8:	b933      	cbnz	r3, 801af08 <_free_r+0x30>
 801aefa:	6063      	str	r3, [r4, #4]
 801aefc:	6014      	str	r4, [r2, #0]
 801aefe:	b003      	add	sp, #12
 801af00:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801af04:	f000 b8e2 	b.w	801b0cc <__malloc_unlock>
 801af08:	42a3      	cmp	r3, r4
 801af0a:	d908      	bls.n	801af1e <_free_r+0x46>
 801af0c:	6825      	ldr	r5, [r4, #0]
 801af0e:	1961      	adds	r1, r4, r5
 801af10:	428b      	cmp	r3, r1
 801af12:	bf01      	itttt	eq
 801af14:	6819      	ldreq	r1, [r3, #0]
 801af16:	685b      	ldreq	r3, [r3, #4]
 801af18:	1949      	addeq	r1, r1, r5
 801af1a:	6021      	streq	r1, [r4, #0]
 801af1c:	e7ed      	b.n	801aefa <_free_r+0x22>
 801af1e:	461a      	mov	r2, r3
 801af20:	685b      	ldr	r3, [r3, #4]
 801af22:	b10b      	cbz	r3, 801af28 <_free_r+0x50>
 801af24:	42a3      	cmp	r3, r4
 801af26:	d9fa      	bls.n	801af1e <_free_r+0x46>
 801af28:	6811      	ldr	r1, [r2, #0]
 801af2a:	1855      	adds	r5, r2, r1
 801af2c:	42a5      	cmp	r5, r4
 801af2e:	d10b      	bne.n	801af48 <_free_r+0x70>
 801af30:	6824      	ldr	r4, [r4, #0]
 801af32:	4421      	add	r1, r4
 801af34:	1854      	adds	r4, r2, r1
 801af36:	42a3      	cmp	r3, r4
 801af38:	6011      	str	r1, [r2, #0]
 801af3a:	d1e0      	bne.n	801aefe <_free_r+0x26>
 801af3c:	681c      	ldr	r4, [r3, #0]
 801af3e:	685b      	ldr	r3, [r3, #4]
 801af40:	6053      	str	r3, [r2, #4]
 801af42:	440c      	add	r4, r1
 801af44:	6014      	str	r4, [r2, #0]
 801af46:	e7da      	b.n	801aefe <_free_r+0x26>
 801af48:	d902      	bls.n	801af50 <_free_r+0x78>
 801af4a:	230c      	movs	r3, #12
 801af4c:	6003      	str	r3, [r0, #0]
 801af4e:	e7d6      	b.n	801aefe <_free_r+0x26>
 801af50:	6825      	ldr	r5, [r4, #0]
 801af52:	1961      	adds	r1, r4, r5
 801af54:	428b      	cmp	r3, r1
 801af56:	bf04      	itt	eq
 801af58:	6819      	ldreq	r1, [r3, #0]
 801af5a:	685b      	ldreq	r3, [r3, #4]
 801af5c:	6063      	str	r3, [r4, #4]
 801af5e:	bf04      	itt	eq
 801af60:	1949      	addeq	r1, r1, r5
 801af62:	6021      	streq	r1, [r4, #0]
 801af64:	6054      	str	r4, [r2, #4]
 801af66:	e7ca      	b.n	801aefe <_free_r+0x26>
 801af68:	b003      	add	sp, #12
 801af6a:	bd30      	pop	{r4, r5, pc}
 801af6c:	20007374 	.word	0x20007374

0801af70 <malloc>:
 801af70:	4b02      	ldr	r3, [pc, #8]	; (801af7c <malloc+0xc>)
 801af72:	4601      	mov	r1, r0
 801af74:	6818      	ldr	r0, [r3, #0]
 801af76:	f000 b823 	b.w	801afc0 <_malloc_r>
 801af7a:	bf00      	nop
 801af7c:	200000bc 	.word	0x200000bc

0801af80 <sbrk_aligned>:
 801af80:	b570      	push	{r4, r5, r6, lr}
 801af82:	4e0e      	ldr	r6, [pc, #56]	; (801afbc <sbrk_aligned+0x3c>)
 801af84:	460c      	mov	r4, r1
 801af86:	6831      	ldr	r1, [r6, #0]
 801af88:	4605      	mov	r5, r0
 801af8a:	b911      	cbnz	r1, 801af92 <sbrk_aligned+0x12>
 801af8c:	f000 fea8 	bl	801bce0 <_sbrk_r>
 801af90:	6030      	str	r0, [r6, #0]
 801af92:	4621      	mov	r1, r4
 801af94:	4628      	mov	r0, r5
 801af96:	f000 fea3 	bl	801bce0 <_sbrk_r>
 801af9a:	1c43      	adds	r3, r0, #1
 801af9c:	d00a      	beq.n	801afb4 <sbrk_aligned+0x34>
 801af9e:	1cc4      	adds	r4, r0, #3
 801afa0:	f024 0403 	bic.w	r4, r4, #3
 801afa4:	42a0      	cmp	r0, r4
 801afa6:	d007      	beq.n	801afb8 <sbrk_aligned+0x38>
 801afa8:	1a21      	subs	r1, r4, r0
 801afaa:	4628      	mov	r0, r5
 801afac:	f000 fe98 	bl	801bce0 <_sbrk_r>
 801afb0:	3001      	adds	r0, #1
 801afb2:	d101      	bne.n	801afb8 <sbrk_aligned+0x38>
 801afb4:	f04f 34ff 	mov.w	r4, #4294967295
 801afb8:	4620      	mov	r0, r4
 801afba:	bd70      	pop	{r4, r5, r6, pc}
 801afbc:	20007378 	.word	0x20007378

0801afc0 <_malloc_r>:
 801afc0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801afc4:	1ccd      	adds	r5, r1, #3
 801afc6:	f025 0503 	bic.w	r5, r5, #3
 801afca:	3508      	adds	r5, #8
 801afcc:	2d0c      	cmp	r5, #12
 801afce:	bf38      	it	cc
 801afd0:	250c      	movcc	r5, #12
 801afd2:	2d00      	cmp	r5, #0
 801afd4:	4607      	mov	r7, r0
 801afd6:	db01      	blt.n	801afdc <_malloc_r+0x1c>
 801afd8:	42a9      	cmp	r1, r5
 801afda:	d905      	bls.n	801afe8 <_malloc_r+0x28>
 801afdc:	230c      	movs	r3, #12
 801afde:	603b      	str	r3, [r7, #0]
 801afe0:	2600      	movs	r6, #0
 801afe2:	4630      	mov	r0, r6
 801afe4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801afe8:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 801b0bc <_malloc_r+0xfc>
 801afec:	f000 f868 	bl	801b0c0 <__malloc_lock>
 801aff0:	f8d8 3000 	ldr.w	r3, [r8]
 801aff4:	461c      	mov	r4, r3
 801aff6:	bb5c      	cbnz	r4, 801b050 <_malloc_r+0x90>
 801aff8:	4629      	mov	r1, r5
 801affa:	4638      	mov	r0, r7
 801affc:	f7ff ffc0 	bl	801af80 <sbrk_aligned>
 801b000:	1c43      	adds	r3, r0, #1
 801b002:	4604      	mov	r4, r0
 801b004:	d155      	bne.n	801b0b2 <_malloc_r+0xf2>
 801b006:	f8d8 4000 	ldr.w	r4, [r8]
 801b00a:	4626      	mov	r6, r4
 801b00c:	2e00      	cmp	r6, #0
 801b00e:	d145      	bne.n	801b09c <_malloc_r+0xdc>
 801b010:	2c00      	cmp	r4, #0
 801b012:	d048      	beq.n	801b0a6 <_malloc_r+0xe6>
 801b014:	6823      	ldr	r3, [r4, #0]
 801b016:	4631      	mov	r1, r6
 801b018:	4638      	mov	r0, r7
 801b01a:	eb04 0903 	add.w	r9, r4, r3
 801b01e:	f000 fe5f 	bl	801bce0 <_sbrk_r>
 801b022:	4581      	cmp	r9, r0
 801b024:	d13f      	bne.n	801b0a6 <_malloc_r+0xe6>
 801b026:	6821      	ldr	r1, [r4, #0]
 801b028:	1a6d      	subs	r5, r5, r1
 801b02a:	4629      	mov	r1, r5
 801b02c:	4638      	mov	r0, r7
 801b02e:	f7ff ffa7 	bl	801af80 <sbrk_aligned>
 801b032:	3001      	adds	r0, #1
 801b034:	d037      	beq.n	801b0a6 <_malloc_r+0xe6>
 801b036:	6823      	ldr	r3, [r4, #0]
 801b038:	442b      	add	r3, r5
 801b03a:	6023      	str	r3, [r4, #0]
 801b03c:	f8d8 3000 	ldr.w	r3, [r8]
 801b040:	2b00      	cmp	r3, #0
 801b042:	d038      	beq.n	801b0b6 <_malloc_r+0xf6>
 801b044:	685a      	ldr	r2, [r3, #4]
 801b046:	42a2      	cmp	r2, r4
 801b048:	d12b      	bne.n	801b0a2 <_malloc_r+0xe2>
 801b04a:	2200      	movs	r2, #0
 801b04c:	605a      	str	r2, [r3, #4]
 801b04e:	e00f      	b.n	801b070 <_malloc_r+0xb0>
 801b050:	6822      	ldr	r2, [r4, #0]
 801b052:	1b52      	subs	r2, r2, r5
 801b054:	d41f      	bmi.n	801b096 <_malloc_r+0xd6>
 801b056:	2a0b      	cmp	r2, #11
 801b058:	d917      	bls.n	801b08a <_malloc_r+0xca>
 801b05a:	1961      	adds	r1, r4, r5
 801b05c:	42a3      	cmp	r3, r4
 801b05e:	6025      	str	r5, [r4, #0]
 801b060:	bf18      	it	ne
 801b062:	6059      	strne	r1, [r3, #4]
 801b064:	6863      	ldr	r3, [r4, #4]
 801b066:	bf08      	it	eq
 801b068:	f8c8 1000 	streq.w	r1, [r8]
 801b06c:	5162      	str	r2, [r4, r5]
 801b06e:	604b      	str	r3, [r1, #4]
 801b070:	4638      	mov	r0, r7
 801b072:	f104 060b 	add.w	r6, r4, #11
 801b076:	f000 f829 	bl	801b0cc <__malloc_unlock>
 801b07a:	f026 0607 	bic.w	r6, r6, #7
 801b07e:	1d23      	adds	r3, r4, #4
 801b080:	1af2      	subs	r2, r6, r3
 801b082:	d0ae      	beq.n	801afe2 <_malloc_r+0x22>
 801b084:	1b9b      	subs	r3, r3, r6
 801b086:	50a3      	str	r3, [r4, r2]
 801b088:	e7ab      	b.n	801afe2 <_malloc_r+0x22>
 801b08a:	42a3      	cmp	r3, r4
 801b08c:	6862      	ldr	r2, [r4, #4]
 801b08e:	d1dd      	bne.n	801b04c <_malloc_r+0x8c>
 801b090:	f8c8 2000 	str.w	r2, [r8]
 801b094:	e7ec      	b.n	801b070 <_malloc_r+0xb0>
 801b096:	4623      	mov	r3, r4
 801b098:	6864      	ldr	r4, [r4, #4]
 801b09a:	e7ac      	b.n	801aff6 <_malloc_r+0x36>
 801b09c:	4634      	mov	r4, r6
 801b09e:	6876      	ldr	r6, [r6, #4]
 801b0a0:	e7b4      	b.n	801b00c <_malloc_r+0x4c>
 801b0a2:	4613      	mov	r3, r2
 801b0a4:	e7cc      	b.n	801b040 <_malloc_r+0x80>
 801b0a6:	230c      	movs	r3, #12
 801b0a8:	603b      	str	r3, [r7, #0]
 801b0aa:	4638      	mov	r0, r7
 801b0ac:	f000 f80e 	bl	801b0cc <__malloc_unlock>
 801b0b0:	e797      	b.n	801afe2 <_malloc_r+0x22>
 801b0b2:	6025      	str	r5, [r4, #0]
 801b0b4:	e7dc      	b.n	801b070 <_malloc_r+0xb0>
 801b0b6:	605b      	str	r3, [r3, #4]
 801b0b8:	deff      	udf	#255	; 0xff
 801b0ba:	bf00      	nop
 801b0bc:	20007374 	.word	0x20007374

0801b0c0 <__malloc_lock>:
 801b0c0:	4801      	ldr	r0, [pc, #4]	; (801b0c8 <__malloc_lock+0x8>)
 801b0c2:	f7ff b8e6 	b.w	801a292 <__retarget_lock_acquire_recursive>
 801b0c6:	bf00      	nop
 801b0c8:	20007370 	.word	0x20007370

0801b0cc <__malloc_unlock>:
 801b0cc:	4801      	ldr	r0, [pc, #4]	; (801b0d4 <__malloc_unlock+0x8>)
 801b0ce:	f7ff b8e1 	b.w	801a294 <__retarget_lock_release_recursive>
 801b0d2:	bf00      	nop
 801b0d4:	20007370 	.word	0x20007370

0801b0d8 <_Balloc>:
 801b0d8:	b570      	push	{r4, r5, r6, lr}
 801b0da:	69c6      	ldr	r6, [r0, #28]
 801b0dc:	4604      	mov	r4, r0
 801b0de:	460d      	mov	r5, r1
 801b0e0:	b976      	cbnz	r6, 801b100 <_Balloc+0x28>
 801b0e2:	2010      	movs	r0, #16
 801b0e4:	f7ff ff44 	bl	801af70 <malloc>
 801b0e8:	4602      	mov	r2, r0
 801b0ea:	61e0      	str	r0, [r4, #28]
 801b0ec:	b920      	cbnz	r0, 801b0f8 <_Balloc+0x20>
 801b0ee:	4b18      	ldr	r3, [pc, #96]	; (801b150 <_Balloc+0x78>)
 801b0f0:	4818      	ldr	r0, [pc, #96]	; (801b154 <_Balloc+0x7c>)
 801b0f2:	216b      	movs	r1, #107	; 0x6b
 801b0f4:	f7ff f8de 	bl	801a2b4 <__assert_func>
 801b0f8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801b0fc:	6006      	str	r6, [r0, #0]
 801b0fe:	60c6      	str	r6, [r0, #12]
 801b100:	69e6      	ldr	r6, [r4, #28]
 801b102:	68f3      	ldr	r3, [r6, #12]
 801b104:	b183      	cbz	r3, 801b128 <_Balloc+0x50>
 801b106:	69e3      	ldr	r3, [r4, #28]
 801b108:	68db      	ldr	r3, [r3, #12]
 801b10a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 801b10e:	b9b8      	cbnz	r0, 801b140 <_Balloc+0x68>
 801b110:	2101      	movs	r1, #1
 801b112:	fa01 f605 	lsl.w	r6, r1, r5
 801b116:	1d72      	adds	r2, r6, #5
 801b118:	0092      	lsls	r2, r2, #2
 801b11a:	4620      	mov	r0, r4
 801b11c:	f000 fdf7 	bl	801bd0e <_calloc_r>
 801b120:	b160      	cbz	r0, 801b13c <_Balloc+0x64>
 801b122:	e9c0 5601 	strd	r5, r6, [r0, #4]
 801b126:	e00e      	b.n	801b146 <_Balloc+0x6e>
 801b128:	2221      	movs	r2, #33	; 0x21
 801b12a:	2104      	movs	r1, #4
 801b12c:	4620      	mov	r0, r4
 801b12e:	f000 fdee 	bl	801bd0e <_calloc_r>
 801b132:	69e3      	ldr	r3, [r4, #28]
 801b134:	60f0      	str	r0, [r6, #12]
 801b136:	68db      	ldr	r3, [r3, #12]
 801b138:	2b00      	cmp	r3, #0
 801b13a:	d1e4      	bne.n	801b106 <_Balloc+0x2e>
 801b13c:	2000      	movs	r0, #0
 801b13e:	bd70      	pop	{r4, r5, r6, pc}
 801b140:	6802      	ldr	r2, [r0, #0]
 801b142:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 801b146:	2300      	movs	r3, #0
 801b148:	e9c0 3303 	strd	r3, r3, [r0, #12]
 801b14c:	e7f7      	b.n	801b13e <_Balloc+0x66>
 801b14e:	bf00      	nop
 801b150:	0801f576 	.word	0x0801f576
 801b154:	0801f7cc 	.word	0x0801f7cc

0801b158 <_Bfree>:
 801b158:	b570      	push	{r4, r5, r6, lr}
 801b15a:	69c6      	ldr	r6, [r0, #28]
 801b15c:	4605      	mov	r5, r0
 801b15e:	460c      	mov	r4, r1
 801b160:	b976      	cbnz	r6, 801b180 <_Bfree+0x28>
 801b162:	2010      	movs	r0, #16
 801b164:	f7ff ff04 	bl	801af70 <malloc>
 801b168:	4602      	mov	r2, r0
 801b16a:	61e8      	str	r0, [r5, #28]
 801b16c:	b920      	cbnz	r0, 801b178 <_Bfree+0x20>
 801b16e:	4b09      	ldr	r3, [pc, #36]	; (801b194 <_Bfree+0x3c>)
 801b170:	4809      	ldr	r0, [pc, #36]	; (801b198 <_Bfree+0x40>)
 801b172:	218f      	movs	r1, #143	; 0x8f
 801b174:	f7ff f89e 	bl	801a2b4 <__assert_func>
 801b178:	e9c0 6601 	strd	r6, r6, [r0, #4]
 801b17c:	6006      	str	r6, [r0, #0]
 801b17e:	60c6      	str	r6, [r0, #12]
 801b180:	b13c      	cbz	r4, 801b192 <_Bfree+0x3a>
 801b182:	69eb      	ldr	r3, [r5, #28]
 801b184:	6862      	ldr	r2, [r4, #4]
 801b186:	68db      	ldr	r3, [r3, #12]
 801b188:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 801b18c:	6021      	str	r1, [r4, #0]
 801b18e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 801b192:	bd70      	pop	{r4, r5, r6, pc}
 801b194:	0801f576 	.word	0x0801f576
 801b198:	0801f7cc 	.word	0x0801f7cc

0801b19c <__multadd>:
 801b19c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801b1a0:	690d      	ldr	r5, [r1, #16]
 801b1a2:	4607      	mov	r7, r0
 801b1a4:	460c      	mov	r4, r1
 801b1a6:	461e      	mov	r6, r3
 801b1a8:	f101 0c14 	add.w	ip, r1, #20
 801b1ac:	2000      	movs	r0, #0
 801b1ae:	f8dc 3000 	ldr.w	r3, [ip]
 801b1b2:	b299      	uxth	r1, r3
 801b1b4:	fb02 6101 	mla	r1, r2, r1, r6
 801b1b8:	0c1e      	lsrs	r6, r3, #16
 801b1ba:	0c0b      	lsrs	r3, r1, #16
 801b1bc:	fb02 3306 	mla	r3, r2, r6, r3
 801b1c0:	b289      	uxth	r1, r1
 801b1c2:	3001      	adds	r0, #1
 801b1c4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 801b1c8:	4285      	cmp	r5, r0
 801b1ca:	f84c 1b04 	str.w	r1, [ip], #4
 801b1ce:	ea4f 4613 	mov.w	r6, r3, lsr #16
 801b1d2:	dcec      	bgt.n	801b1ae <__multadd+0x12>
 801b1d4:	b30e      	cbz	r6, 801b21a <__multadd+0x7e>
 801b1d6:	68a3      	ldr	r3, [r4, #8]
 801b1d8:	42ab      	cmp	r3, r5
 801b1da:	dc19      	bgt.n	801b210 <__multadd+0x74>
 801b1dc:	6861      	ldr	r1, [r4, #4]
 801b1de:	4638      	mov	r0, r7
 801b1e0:	3101      	adds	r1, #1
 801b1e2:	f7ff ff79 	bl	801b0d8 <_Balloc>
 801b1e6:	4680      	mov	r8, r0
 801b1e8:	b928      	cbnz	r0, 801b1f6 <__multadd+0x5a>
 801b1ea:	4602      	mov	r2, r0
 801b1ec:	4b0c      	ldr	r3, [pc, #48]	; (801b220 <__multadd+0x84>)
 801b1ee:	480d      	ldr	r0, [pc, #52]	; (801b224 <__multadd+0x88>)
 801b1f0:	21ba      	movs	r1, #186	; 0xba
 801b1f2:	f7ff f85f 	bl	801a2b4 <__assert_func>
 801b1f6:	6922      	ldr	r2, [r4, #16]
 801b1f8:	3202      	adds	r2, #2
 801b1fa:	f104 010c 	add.w	r1, r4, #12
 801b1fe:	0092      	lsls	r2, r2, #2
 801b200:	300c      	adds	r0, #12
 801b202:	f7ff f848 	bl	801a296 <memcpy>
 801b206:	4621      	mov	r1, r4
 801b208:	4638      	mov	r0, r7
 801b20a:	f7ff ffa5 	bl	801b158 <_Bfree>
 801b20e:	4644      	mov	r4, r8
 801b210:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 801b214:	3501      	adds	r5, #1
 801b216:	615e      	str	r6, [r3, #20]
 801b218:	6125      	str	r5, [r4, #16]
 801b21a:	4620      	mov	r0, r4
 801b21c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801b220:	0801f7bb 	.word	0x0801f7bb
 801b224:	0801f7cc 	.word	0x0801f7cc

0801b228 <__hi0bits>:
 801b228:	0c03      	lsrs	r3, r0, #16
 801b22a:	041b      	lsls	r3, r3, #16
 801b22c:	b9d3      	cbnz	r3, 801b264 <__hi0bits+0x3c>
 801b22e:	0400      	lsls	r0, r0, #16
 801b230:	2310      	movs	r3, #16
 801b232:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 801b236:	bf04      	itt	eq
 801b238:	0200      	lsleq	r0, r0, #8
 801b23a:	3308      	addeq	r3, #8
 801b23c:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 801b240:	bf04      	itt	eq
 801b242:	0100      	lsleq	r0, r0, #4
 801b244:	3304      	addeq	r3, #4
 801b246:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 801b24a:	bf04      	itt	eq
 801b24c:	0080      	lsleq	r0, r0, #2
 801b24e:	3302      	addeq	r3, #2
 801b250:	2800      	cmp	r0, #0
 801b252:	db05      	blt.n	801b260 <__hi0bits+0x38>
 801b254:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 801b258:	f103 0301 	add.w	r3, r3, #1
 801b25c:	bf08      	it	eq
 801b25e:	2320      	moveq	r3, #32
 801b260:	4618      	mov	r0, r3
 801b262:	4770      	bx	lr
 801b264:	2300      	movs	r3, #0
 801b266:	e7e4      	b.n	801b232 <__hi0bits+0xa>

0801b268 <__lo0bits>:
 801b268:	6803      	ldr	r3, [r0, #0]
 801b26a:	f013 0207 	ands.w	r2, r3, #7
 801b26e:	d00c      	beq.n	801b28a <__lo0bits+0x22>
 801b270:	07d9      	lsls	r1, r3, #31
 801b272:	d422      	bmi.n	801b2ba <__lo0bits+0x52>
 801b274:	079a      	lsls	r2, r3, #30
 801b276:	bf49      	itett	mi
 801b278:	085b      	lsrmi	r3, r3, #1
 801b27a:	089b      	lsrpl	r3, r3, #2
 801b27c:	6003      	strmi	r3, [r0, #0]
 801b27e:	2201      	movmi	r2, #1
 801b280:	bf5c      	itt	pl
 801b282:	6003      	strpl	r3, [r0, #0]
 801b284:	2202      	movpl	r2, #2
 801b286:	4610      	mov	r0, r2
 801b288:	4770      	bx	lr
 801b28a:	b299      	uxth	r1, r3
 801b28c:	b909      	cbnz	r1, 801b292 <__lo0bits+0x2a>
 801b28e:	0c1b      	lsrs	r3, r3, #16
 801b290:	2210      	movs	r2, #16
 801b292:	b2d9      	uxtb	r1, r3
 801b294:	b909      	cbnz	r1, 801b29a <__lo0bits+0x32>
 801b296:	3208      	adds	r2, #8
 801b298:	0a1b      	lsrs	r3, r3, #8
 801b29a:	0719      	lsls	r1, r3, #28
 801b29c:	bf04      	itt	eq
 801b29e:	091b      	lsreq	r3, r3, #4
 801b2a0:	3204      	addeq	r2, #4
 801b2a2:	0799      	lsls	r1, r3, #30
 801b2a4:	bf04      	itt	eq
 801b2a6:	089b      	lsreq	r3, r3, #2
 801b2a8:	3202      	addeq	r2, #2
 801b2aa:	07d9      	lsls	r1, r3, #31
 801b2ac:	d403      	bmi.n	801b2b6 <__lo0bits+0x4e>
 801b2ae:	085b      	lsrs	r3, r3, #1
 801b2b0:	f102 0201 	add.w	r2, r2, #1
 801b2b4:	d003      	beq.n	801b2be <__lo0bits+0x56>
 801b2b6:	6003      	str	r3, [r0, #0]
 801b2b8:	e7e5      	b.n	801b286 <__lo0bits+0x1e>
 801b2ba:	2200      	movs	r2, #0
 801b2bc:	e7e3      	b.n	801b286 <__lo0bits+0x1e>
 801b2be:	2220      	movs	r2, #32
 801b2c0:	e7e1      	b.n	801b286 <__lo0bits+0x1e>
	...

0801b2c4 <__i2b>:
 801b2c4:	b510      	push	{r4, lr}
 801b2c6:	460c      	mov	r4, r1
 801b2c8:	2101      	movs	r1, #1
 801b2ca:	f7ff ff05 	bl	801b0d8 <_Balloc>
 801b2ce:	4602      	mov	r2, r0
 801b2d0:	b928      	cbnz	r0, 801b2de <__i2b+0x1a>
 801b2d2:	4b05      	ldr	r3, [pc, #20]	; (801b2e8 <__i2b+0x24>)
 801b2d4:	4805      	ldr	r0, [pc, #20]	; (801b2ec <__i2b+0x28>)
 801b2d6:	f240 1145 	movw	r1, #325	; 0x145
 801b2da:	f7fe ffeb 	bl	801a2b4 <__assert_func>
 801b2de:	2301      	movs	r3, #1
 801b2e0:	6144      	str	r4, [r0, #20]
 801b2e2:	6103      	str	r3, [r0, #16]
 801b2e4:	bd10      	pop	{r4, pc}
 801b2e6:	bf00      	nop
 801b2e8:	0801f7bb 	.word	0x0801f7bb
 801b2ec:	0801f7cc 	.word	0x0801f7cc

0801b2f0 <__multiply>:
 801b2f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b2f4:	4691      	mov	r9, r2
 801b2f6:	690a      	ldr	r2, [r1, #16]
 801b2f8:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801b2fc:	429a      	cmp	r2, r3
 801b2fe:	bfb8      	it	lt
 801b300:	460b      	movlt	r3, r1
 801b302:	460c      	mov	r4, r1
 801b304:	bfbc      	itt	lt
 801b306:	464c      	movlt	r4, r9
 801b308:	4699      	movlt	r9, r3
 801b30a:	6927      	ldr	r7, [r4, #16]
 801b30c:	f8d9 a010 	ldr.w	sl, [r9, #16]
 801b310:	68a3      	ldr	r3, [r4, #8]
 801b312:	6861      	ldr	r1, [r4, #4]
 801b314:	eb07 060a 	add.w	r6, r7, sl
 801b318:	42b3      	cmp	r3, r6
 801b31a:	b085      	sub	sp, #20
 801b31c:	bfb8      	it	lt
 801b31e:	3101      	addlt	r1, #1
 801b320:	f7ff feda 	bl	801b0d8 <_Balloc>
 801b324:	b930      	cbnz	r0, 801b334 <__multiply+0x44>
 801b326:	4602      	mov	r2, r0
 801b328:	4b44      	ldr	r3, [pc, #272]	; (801b43c <__multiply+0x14c>)
 801b32a:	4845      	ldr	r0, [pc, #276]	; (801b440 <__multiply+0x150>)
 801b32c:	f44f 71b1 	mov.w	r1, #354	; 0x162
 801b330:	f7fe ffc0 	bl	801a2b4 <__assert_func>
 801b334:	f100 0514 	add.w	r5, r0, #20
 801b338:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 801b33c:	462b      	mov	r3, r5
 801b33e:	2200      	movs	r2, #0
 801b340:	4543      	cmp	r3, r8
 801b342:	d321      	bcc.n	801b388 <__multiply+0x98>
 801b344:	f104 0314 	add.w	r3, r4, #20
 801b348:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 801b34c:	f109 0314 	add.w	r3, r9, #20
 801b350:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 801b354:	9202      	str	r2, [sp, #8]
 801b356:	1b3a      	subs	r2, r7, r4
 801b358:	3a15      	subs	r2, #21
 801b35a:	f022 0203 	bic.w	r2, r2, #3
 801b35e:	3204      	adds	r2, #4
 801b360:	f104 0115 	add.w	r1, r4, #21
 801b364:	428f      	cmp	r7, r1
 801b366:	bf38      	it	cc
 801b368:	2204      	movcc	r2, #4
 801b36a:	9201      	str	r2, [sp, #4]
 801b36c:	9a02      	ldr	r2, [sp, #8]
 801b36e:	9303      	str	r3, [sp, #12]
 801b370:	429a      	cmp	r2, r3
 801b372:	d80c      	bhi.n	801b38e <__multiply+0x9e>
 801b374:	2e00      	cmp	r6, #0
 801b376:	dd03      	ble.n	801b380 <__multiply+0x90>
 801b378:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 801b37c:	2b00      	cmp	r3, #0
 801b37e:	d05b      	beq.n	801b438 <__multiply+0x148>
 801b380:	6106      	str	r6, [r0, #16]
 801b382:	b005      	add	sp, #20
 801b384:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b388:	f843 2b04 	str.w	r2, [r3], #4
 801b38c:	e7d8      	b.n	801b340 <__multiply+0x50>
 801b38e:	f8b3 a000 	ldrh.w	sl, [r3]
 801b392:	f1ba 0f00 	cmp.w	sl, #0
 801b396:	d024      	beq.n	801b3e2 <__multiply+0xf2>
 801b398:	f104 0e14 	add.w	lr, r4, #20
 801b39c:	46a9      	mov	r9, r5
 801b39e:	f04f 0c00 	mov.w	ip, #0
 801b3a2:	f85e 2b04 	ldr.w	r2, [lr], #4
 801b3a6:	f8d9 1000 	ldr.w	r1, [r9]
 801b3aa:	fa1f fb82 	uxth.w	fp, r2
 801b3ae:	b289      	uxth	r1, r1
 801b3b0:	fb0a 110b 	mla	r1, sl, fp, r1
 801b3b4:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 801b3b8:	f8d9 2000 	ldr.w	r2, [r9]
 801b3bc:	4461      	add	r1, ip
 801b3be:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 801b3c2:	fb0a c20b 	mla	r2, sl, fp, ip
 801b3c6:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 801b3ca:	b289      	uxth	r1, r1
 801b3cc:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 801b3d0:	4577      	cmp	r7, lr
 801b3d2:	f849 1b04 	str.w	r1, [r9], #4
 801b3d6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 801b3da:	d8e2      	bhi.n	801b3a2 <__multiply+0xb2>
 801b3dc:	9a01      	ldr	r2, [sp, #4]
 801b3de:	f845 c002 	str.w	ip, [r5, r2]
 801b3e2:	9a03      	ldr	r2, [sp, #12]
 801b3e4:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 801b3e8:	3304      	adds	r3, #4
 801b3ea:	f1b9 0f00 	cmp.w	r9, #0
 801b3ee:	d021      	beq.n	801b434 <__multiply+0x144>
 801b3f0:	6829      	ldr	r1, [r5, #0]
 801b3f2:	f104 0c14 	add.w	ip, r4, #20
 801b3f6:	46ae      	mov	lr, r5
 801b3f8:	f04f 0a00 	mov.w	sl, #0
 801b3fc:	f8bc b000 	ldrh.w	fp, [ip]
 801b400:	f8be 2002 	ldrh.w	r2, [lr, #2]
 801b404:	fb09 220b 	mla	r2, r9, fp, r2
 801b408:	4452      	add	r2, sl
 801b40a:	b289      	uxth	r1, r1
 801b40c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 801b410:	f84e 1b04 	str.w	r1, [lr], #4
 801b414:	f85c 1b04 	ldr.w	r1, [ip], #4
 801b418:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 801b41c:	f8be 1000 	ldrh.w	r1, [lr]
 801b420:	fb09 110a 	mla	r1, r9, sl, r1
 801b424:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 801b428:	4567      	cmp	r7, ip
 801b42a:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 801b42e:	d8e5      	bhi.n	801b3fc <__multiply+0x10c>
 801b430:	9a01      	ldr	r2, [sp, #4]
 801b432:	50a9      	str	r1, [r5, r2]
 801b434:	3504      	adds	r5, #4
 801b436:	e799      	b.n	801b36c <__multiply+0x7c>
 801b438:	3e01      	subs	r6, #1
 801b43a:	e79b      	b.n	801b374 <__multiply+0x84>
 801b43c:	0801f7bb 	.word	0x0801f7bb
 801b440:	0801f7cc 	.word	0x0801f7cc

0801b444 <__pow5mult>:
 801b444:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801b448:	4615      	mov	r5, r2
 801b44a:	f012 0203 	ands.w	r2, r2, #3
 801b44e:	4606      	mov	r6, r0
 801b450:	460f      	mov	r7, r1
 801b452:	d007      	beq.n	801b464 <__pow5mult+0x20>
 801b454:	4c25      	ldr	r4, [pc, #148]	; (801b4ec <__pow5mult+0xa8>)
 801b456:	3a01      	subs	r2, #1
 801b458:	2300      	movs	r3, #0
 801b45a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801b45e:	f7ff fe9d 	bl	801b19c <__multadd>
 801b462:	4607      	mov	r7, r0
 801b464:	10ad      	asrs	r5, r5, #2
 801b466:	d03d      	beq.n	801b4e4 <__pow5mult+0xa0>
 801b468:	69f4      	ldr	r4, [r6, #28]
 801b46a:	b97c      	cbnz	r4, 801b48c <__pow5mult+0x48>
 801b46c:	2010      	movs	r0, #16
 801b46e:	f7ff fd7f 	bl	801af70 <malloc>
 801b472:	4602      	mov	r2, r0
 801b474:	61f0      	str	r0, [r6, #28]
 801b476:	b928      	cbnz	r0, 801b484 <__pow5mult+0x40>
 801b478:	4b1d      	ldr	r3, [pc, #116]	; (801b4f0 <__pow5mult+0xac>)
 801b47a:	481e      	ldr	r0, [pc, #120]	; (801b4f4 <__pow5mult+0xb0>)
 801b47c:	f240 11b3 	movw	r1, #435	; 0x1b3
 801b480:	f7fe ff18 	bl	801a2b4 <__assert_func>
 801b484:	e9c0 4401 	strd	r4, r4, [r0, #4]
 801b488:	6004      	str	r4, [r0, #0]
 801b48a:	60c4      	str	r4, [r0, #12]
 801b48c:	f8d6 801c 	ldr.w	r8, [r6, #28]
 801b490:	f8d8 4008 	ldr.w	r4, [r8, #8]
 801b494:	b94c      	cbnz	r4, 801b4aa <__pow5mult+0x66>
 801b496:	f240 2171 	movw	r1, #625	; 0x271
 801b49a:	4630      	mov	r0, r6
 801b49c:	f7ff ff12 	bl	801b2c4 <__i2b>
 801b4a0:	2300      	movs	r3, #0
 801b4a2:	f8c8 0008 	str.w	r0, [r8, #8]
 801b4a6:	4604      	mov	r4, r0
 801b4a8:	6003      	str	r3, [r0, #0]
 801b4aa:	f04f 0900 	mov.w	r9, #0
 801b4ae:	07eb      	lsls	r3, r5, #31
 801b4b0:	d50a      	bpl.n	801b4c8 <__pow5mult+0x84>
 801b4b2:	4639      	mov	r1, r7
 801b4b4:	4622      	mov	r2, r4
 801b4b6:	4630      	mov	r0, r6
 801b4b8:	f7ff ff1a 	bl	801b2f0 <__multiply>
 801b4bc:	4639      	mov	r1, r7
 801b4be:	4680      	mov	r8, r0
 801b4c0:	4630      	mov	r0, r6
 801b4c2:	f7ff fe49 	bl	801b158 <_Bfree>
 801b4c6:	4647      	mov	r7, r8
 801b4c8:	106d      	asrs	r5, r5, #1
 801b4ca:	d00b      	beq.n	801b4e4 <__pow5mult+0xa0>
 801b4cc:	6820      	ldr	r0, [r4, #0]
 801b4ce:	b938      	cbnz	r0, 801b4e0 <__pow5mult+0x9c>
 801b4d0:	4622      	mov	r2, r4
 801b4d2:	4621      	mov	r1, r4
 801b4d4:	4630      	mov	r0, r6
 801b4d6:	f7ff ff0b 	bl	801b2f0 <__multiply>
 801b4da:	6020      	str	r0, [r4, #0]
 801b4dc:	f8c0 9000 	str.w	r9, [r0]
 801b4e0:	4604      	mov	r4, r0
 801b4e2:	e7e4      	b.n	801b4ae <__pow5mult+0x6a>
 801b4e4:	4638      	mov	r0, r7
 801b4e6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801b4ea:	bf00      	nop
 801b4ec:	0801f918 	.word	0x0801f918
 801b4f0:	0801f576 	.word	0x0801f576
 801b4f4:	0801f7cc 	.word	0x0801f7cc

0801b4f8 <__lshift>:
 801b4f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801b4fc:	460c      	mov	r4, r1
 801b4fe:	6849      	ldr	r1, [r1, #4]
 801b500:	6923      	ldr	r3, [r4, #16]
 801b502:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801b506:	68a3      	ldr	r3, [r4, #8]
 801b508:	4607      	mov	r7, r0
 801b50a:	4691      	mov	r9, r2
 801b50c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 801b510:	f108 0601 	add.w	r6, r8, #1
 801b514:	42b3      	cmp	r3, r6
 801b516:	db0b      	blt.n	801b530 <__lshift+0x38>
 801b518:	4638      	mov	r0, r7
 801b51a:	f7ff fddd 	bl	801b0d8 <_Balloc>
 801b51e:	4605      	mov	r5, r0
 801b520:	b948      	cbnz	r0, 801b536 <__lshift+0x3e>
 801b522:	4602      	mov	r2, r0
 801b524:	4b28      	ldr	r3, [pc, #160]	; (801b5c8 <__lshift+0xd0>)
 801b526:	4829      	ldr	r0, [pc, #164]	; (801b5cc <__lshift+0xd4>)
 801b528:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 801b52c:	f7fe fec2 	bl	801a2b4 <__assert_func>
 801b530:	3101      	adds	r1, #1
 801b532:	005b      	lsls	r3, r3, #1
 801b534:	e7ee      	b.n	801b514 <__lshift+0x1c>
 801b536:	2300      	movs	r3, #0
 801b538:	f100 0114 	add.w	r1, r0, #20
 801b53c:	f100 0210 	add.w	r2, r0, #16
 801b540:	4618      	mov	r0, r3
 801b542:	4553      	cmp	r3, sl
 801b544:	db33      	blt.n	801b5ae <__lshift+0xb6>
 801b546:	6920      	ldr	r0, [r4, #16]
 801b548:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 801b54c:	f104 0314 	add.w	r3, r4, #20
 801b550:	f019 091f 	ands.w	r9, r9, #31
 801b554:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 801b558:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 801b55c:	d02b      	beq.n	801b5b6 <__lshift+0xbe>
 801b55e:	f1c9 0e20 	rsb	lr, r9, #32
 801b562:	468a      	mov	sl, r1
 801b564:	2200      	movs	r2, #0
 801b566:	6818      	ldr	r0, [r3, #0]
 801b568:	fa00 f009 	lsl.w	r0, r0, r9
 801b56c:	4310      	orrs	r0, r2
 801b56e:	f84a 0b04 	str.w	r0, [sl], #4
 801b572:	f853 2b04 	ldr.w	r2, [r3], #4
 801b576:	459c      	cmp	ip, r3
 801b578:	fa22 f20e 	lsr.w	r2, r2, lr
 801b57c:	d8f3      	bhi.n	801b566 <__lshift+0x6e>
 801b57e:	ebac 0304 	sub.w	r3, ip, r4
 801b582:	3b15      	subs	r3, #21
 801b584:	f023 0303 	bic.w	r3, r3, #3
 801b588:	3304      	adds	r3, #4
 801b58a:	f104 0015 	add.w	r0, r4, #21
 801b58e:	4584      	cmp	ip, r0
 801b590:	bf38      	it	cc
 801b592:	2304      	movcc	r3, #4
 801b594:	50ca      	str	r2, [r1, r3]
 801b596:	b10a      	cbz	r2, 801b59c <__lshift+0xa4>
 801b598:	f108 0602 	add.w	r6, r8, #2
 801b59c:	3e01      	subs	r6, #1
 801b59e:	4638      	mov	r0, r7
 801b5a0:	612e      	str	r6, [r5, #16]
 801b5a2:	4621      	mov	r1, r4
 801b5a4:	f7ff fdd8 	bl	801b158 <_Bfree>
 801b5a8:	4628      	mov	r0, r5
 801b5aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801b5ae:	f842 0f04 	str.w	r0, [r2, #4]!
 801b5b2:	3301      	adds	r3, #1
 801b5b4:	e7c5      	b.n	801b542 <__lshift+0x4a>
 801b5b6:	3904      	subs	r1, #4
 801b5b8:	f853 2b04 	ldr.w	r2, [r3], #4
 801b5bc:	f841 2f04 	str.w	r2, [r1, #4]!
 801b5c0:	459c      	cmp	ip, r3
 801b5c2:	d8f9      	bhi.n	801b5b8 <__lshift+0xc0>
 801b5c4:	e7ea      	b.n	801b59c <__lshift+0xa4>
 801b5c6:	bf00      	nop
 801b5c8:	0801f7bb 	.word	0x0801f7bb
 801b5cc:	0801f7cc 	.word	0x0801f7cc

0801b5d0 <__mcmp>:
 801b5d0:	b530      	push	{r4, r5, lr}
 801b5d2:	6902      	ldr	r2, [r0, #16]
 801b5d4:	690c      	ldr	r4, [r1, #16]
 801b5d6:	1b12      	subs	r2, r2, r4
 801b5d8:	d10e      	bne.n	801b5f8 <__mcmp+0x28>
 801b5da:	f100 0314 	add.w	r3, r0, #20
 801b5de:	3114      	adds	r1, #20
 801b5e0:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 801b5e4:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 801b5e8:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 801b5ec:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 801b5f0:	42a5      	cmp	r5, r4
 801b5f2:	d003      	beq.n	801b5fc <__mcmp+0x2c>
 801b5f4:	d305      	bcc.n	801b602 <__mcmp+0x32>
 801b5f6:	2201      	movs	r2, #1
 801b5f8:	4610      	mov	r0, r2
 801b5fa:	bd30      	pop	{r4, r5, pc}
 801b5fc:	4283      	cmp	r3, r0
 801b5fe:	d3f3      	bcc.n	801b5e8 <__mcmp+0x18>
 801b600:	e7fa      	b.n	801b5f8 <__mcmp+0x28>
 801b602:	f04f 32ff 	mov.w	r2, #4294967295
 801b606:	e7f7      	b.n	801b5f8 <__mcmp+0x28>

0801b608 <__mdiff>:
 801b608:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b60c:	460c      	mov	r4, r1
 801b60e:	4606      	mov	r6, r0
 801b610:	4611      	mov	r1, r2
 801b612:	4620      	mov	r0, r4
 801b614:	4690      	mov	r8, r2
 801b616:	f7ff ffdb 	bl	801b5d0 <__mcmp>
 801b61a:	1e05      	subs	r5, r0, #0
 801b61c:	d110      	bne.n	801b640 <__mdiff+0x38>
 801b61e:	4629      	mov	r1, r5
 801b620:	4630      	mov	r0, r6
 801b622:	f7ff fd59 	bl	801b0d8 <_Balloc>
 801b626:	b930      	cbnz	r0, 801b636 <__mdiff+0x2e>
 801b628:	4b3a      	ldr	r3, [pc, #232]	; (801b714 <__mdiff+0x10c>)
 801b62a:	4602      	mov	r2, r0
 801b62c:	f240 2137 	movw	r1, #567	; 0x237
 801b630:	4839      	ldr	r0, [pc, #228]	; (801b718 <__mdiff+0x110>)
 801b632:	f7fe fe3f 	bl	801a2b4 <__assert_func>
 801b636:	2301      	movs	r3, #1
 801b638:	e9c0 3504 	strd	r3, r5, [r0, #16]
 801b63c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b640:	bfa4      	itt	ge
 801b642:	4643      	movge	r3, r8
 801b644:	46a0      	movge	r8, r4
 801b646:	4630      	mov	r0, r6
 801b648:	f8d8 1004 	ldr.w	r1, [r8, #4]
 801b64c:	bfa6      	itte	ge
 801b64e:	461c      	movge	r4, r3
 801b650:	2500      	movge	r5, #0
 801b652:	2501      	movlt	r5, #1
 801b654:	f7ff fd40 	bl	801b0d8 <_Balloc>
 801b658:	b920      	cbnz	r0, 801b664 <__mdiff+0x5c>
 801b65a:	4b2e      	ldr	r3, [pc, #184]	; (801b714 <__mdiff+0x10c>)
 801b65c:	4602      	mov	r2, r0
 801b65e:	f240 2145 	movw	r1, #581	; 0x245
 801b662:	e7e5      	b.n	801b630 <__mdiff+0x28>
 801b664:	f8d8 7010 	ldr.w	r7, [r8, #16]
 801b668:	6926      	ldr	r6, [r4, #16]
 801b66a:	60c5      	str	r5, [r0, #12]
 801b66c:	f104 0914 	add.w	r9, r4, #20
 801b670:	f108 0514 	add.w	r5, r8, #20
 801b674:	f100 0e14 	add.w	lr, r0, #20
 801b678:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 801b67c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 801b680:	f108 0210 	add.w	r2, r8, #16
 801b684:	46f2      	mov	sl, lr
 801b686:	2100      	movs	r1, #0
 801b688:	f859 3b04 	ldr.w	r3, [r9], #4
 801b68c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 801b690:	fa11 f88b 	uxtah	r8, r1, fp
 801b694:	b299      	uxth	r1, r3
 801b696:	0c1b      	lsrs	r3, r3, #16
 801b698:	eba8 0801 	sub.w	r8, r8, r1
 801b69c:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 801b6a0:	eb03 4328 	add.w	r3, r3, r8, asr #16
 801b6a4:	fa1f f888 	uxth.w	r8, r8
 801b6a8:	1419      	asrs	r1, r3, #16
 801b6aa:	454e      	cmp	r6, r9
 801b6ac:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 801b6b0:	f84a 3b04 	str.w	r3, [sl], #4
 801b6b4:	d8e8      	bhi.n	801b688 <__mdiff+0x80>
 801b6b6:	1b33      	subs	r3, r6, r4
 801b6b8:	3b15      	subs	r3, #21
 801b6ba:	f023 0303 	bic.w	r3, r3, #3
 801b6be:	3304      	adds	r3, #4
 801b6c0:	3415      	adds	r4, #21
 801b6c2:	42a6      	cmp	r6, r4
 801b6c4:	bf38      	it	cc
 801b6c6:	2304      	movcc	r3, #4
 801b6c8:	441d      	add	r5, r3
 801b6ca:	4473      	add	r3, lr
 801b6cc:	469e      	mov	lr, r3
 801b6ce:	462e      	mov	r6, r5
 801b6d0:	4566      	cmp	r6, ip
 801b6d2:	d30e      	bcc.n	801b6f2 <__mdiff+0xea>
 801b6d4:	f10c 0203 	add.w	r2, ip, #3
 801b6d8:	1b52      	subs	r2, r2, r5
 801b6da:	f022 0203 	bic.w	r2, r2, #3
 801b6de:	3d03      	subs	r5, #3
 801b6e0:	45ac      	cmp	ip, r5
 801b6e2:	bf38      	it	cc
 801b6e4:	2200      	movcc	r2, #0
 801b6e6:	4413      	add	r3, r2
 801b6e8:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 801b6ec:	b17a      	cbz	r2, 801b70e <__mdiff+0x106>
 801b6ee:	6107      	str	r7, [r0, #16]
 801b6f0:	e7a4      	b.n	801b63c <__mdiff+0x34>
 801b6f2:	f856 8b04 	ldr.w	r8, [r6], #4
 801b6f6:	fa11 f288 	uxtah	r2, r1, r8
 801b6fa:	1414      	asrs	r4, r2, #16
 801b6fc:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 801b700:	b292      	uxth	r2, r2
 801b702:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 801b706:	f84e 2b04 	str.w	r2, [lr], #4
 801b70a:	1421      	asrs	r1, r4, #16
 801b70c:	e7e0      	b.n	801b6d0 <__mdiff+0xc8>
 801b70e:	3f01      	subs	r7, #1
 801b710:	e7ea      	b.n	801b6e8 <__mdiff+0xe0>
 801b712:	bf00      	nop
 801b714:	0801f7bb 	.word	0x0801f7bb
 801b718:	0801f7cc 	.word	0x0801f7cc

0801b71c <__d2b>:
 801b71c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801b720:	460f      	mov	r7, r1
 801b722:	2101      	movs	r1, #1
 801b724:	ec59 8b10 	vmov	r8, r9, d0
 801b728:	4616      	mov	r6, r2
 801b72a:	f7ff fcd5 	bl	801b0d8 <_Balloc>
 801b72e:	4604      	mov	r4, r0
 801b730:	b930      	cbnz	r0, 801b740 <__d2b+0x24>
 801b732:	4602      	mov	r2, r0
 801b734:	4b24      	ldr	r3, [pc, #144]	; (801b7c8 <__d2b+0xac>)
 801b736:	4825      	ldr	r0, [pc, #148]	; (801b7cc <__d2b+0xb0>)
 801b738:	f240 310f 	movw	r1, #783	; 0x30f
 801b73c:	f7fe fdba 	bl	801a2b4 <__assert_func>
 801b740:	f3c9 550a 	ubfx	r5, r9, #20, #11
 801b744:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801b748:	bb2d      	cbnz	r5, 801b796 <__d2b+0x7a>
 801b74a:	9301      	str	r3, [sp, #4]
 801b74c:	f1b8 0300 	subs.w	r3, r8, #0
 801b750:	d026      	beq.n	801b7a0 <__d2b+0x84>
 801b752:	4668      	mov	r0, sp
 801b754:	9300      	str	r3, [sp, #0]
 801b756:	f7ff fd87 	bl	801b268 <__lo0bits>
 801b75a:	e9dd 1200 	ldrd	r1, r2, [sp]
 801b75e:	b1e8      	cbz	r0, 801b79c <__d2b+0x80>
 801b760:	f1c0 0320 	rsb	r3, r0, #32
 801b764:	fa02 f303 	lsl.w	r3, r2, r3
 801b768:	430b      	orrs	r3, r1
 801b76a:	40c2      	lsrs	r2, r0
 801b76c:	6163      	str	r3, [r4, #20]
 801b76e:	9201      	str	r2, [sp, #4]
 801b770:	9b01      	ldr	r3, [sp, #4]
 801b772:	61a3      	str	r3, [r4, #24]
 801b774:	2b00      	cmp	r3, #0
 801b776:	bf14      	ite	ne
 801b778:	2202      	movne	r2, #2
 801b77a:	2201      	moveq	r2, #1
 801b77c:	6122      	str	r2, [r4, #16]
 801b77e:	b1bd      	cbz	r5, 801b7b0 <__d2b+0x94>
 801b780:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 801b784:	4405      	add	r5, r0
 801b786:	603d      	str	r5, [r7, #0]
 801b788:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 801b78c:	6030      	str	r0, [r6, #0]
 801b78e:	4620      	mov	r0, r4
 801b790:	b003      	add	sp, #12
 801b792:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801b796:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801b79a:	e7d6      	b.n	801b74a <__d2b+0x2e>
 801b79c:	6161      	str	r1, [r4, #20]
 801b79e:	e7e7      	b.n	801b770 <__d2b+0x54>
 801b7a0:	a801      	add	r0, sp, #4
 801b7a2:	f7ff fd61 	bl	801b268 <__lo0bits>
 801b7a6:	9b01      	ldr	r3, [sp, #4]
 801b7a8:	6163      	str	r3, [r4, #20]
 801b7aa:	3020      	adds	r0, #32
 801b7ac:	2201      	movs	r2, #1
 801b7ae:	e7e5      	b.n	801b77c <__d2b+0x60>
 801b7b0:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 801b7b4:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 801b7b8:	6038      	str	r0, [r7, #0]
 801b7ba:	6918      	ldr	r0, [r3, #16]
 801b7bc:	f7ff fd34 	bl	801b228 <__hi0bits>
 801b7c0:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 801b7c4:	e7e2      	b.n	801b78c <__d2b+0x70>
 801b7c6:	bf00      	nop
 801b7c8:	0801f7bb 	.word	0x0801f7bb
 801b7cc:	0801f7cc 	.word	0x0801f7cc

0801b7d0 <__sfputc_r>:
 801b7d0:	6893      	ldr	r3, [r2, #8]
 801b7d2:	3b01      	subs	r3, #1
 801b7d4:	2b00      	cmp	r3, #0
 801b7d6:	b410      	push	{r4}
 801b7d8:	6093      	str	r3, [r2, #8]
 801b7da:	da08      	bge.n	801b7ee <__sfputc_r+0x1e>
 801b7dc:	6994      	ldr	r4, [r2, #24]
 801b7de:	42a3      	cmp	r3, r4
 801b7e0:	db01      	blt.n	801b7e6 <__sfputc_r+0x16>
 801b7e2:	290a      	cmp	r1, #10
 801b7e4:	d103      	bne.n	801b7ee <__sfputc_r+0x1e>
 801b7e6:	f85d 4b04 	ldr.w	r4, [sp], #4
 801b7ea:	f7fe bc36 	b.w	801a05a <__swbuf_r>
 801b7ee:	6813      	ldr	r3, [r2, #0]
 801b7f0:	1c58      	adds	r0, r3, #1
 801b7f2:	6010      	str	r0, [r2, #0]
 801b7f4:	7019      	strb	r1, [r3, #0]
 801b7f6:	4608      	mov	r0, r1
 801b7f8:	f85d 4b04 	ldr.w	r4, [sp], #4
 801b7fc:	4770      	bx	lr

0801b7fe <__sfputs_r>:
 801b7fe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b800:	4606      	mov	r6, r0
 801b802:	460f      	mov	r7, r1
 801b804:	4614      	mov	r4, r2
 801b806:	18d5      	adds	r5, r2, r3
 801b808:	42ac      	cmp	r4, r5
 801b80a:	d101      	bne.n	801b810 <__sfputs_r+0x12>
 801b80c:	2000      	movs	r0, #0
 801b80e:	e007      	b.n	801b820 <__sfputs_r+0x22>
 801b810:	f814 1b01 	ldrb.w	r1, [r4], #1
 801b814:	463a      	mov	r2, r7
 801b816:	4630      	mov	r0, r6
 801b818:	f7ff ffda 	bl	801b7d0 <__sfputc_r>
 801b81c:	1c43      	adds	r3, r0, #1
 801b81e:	d1f3      	bne.n	801b808 <__sfputs_r+0xa>
 801b820:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801b824 <_vfiprintf_r>:
 801b824:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b828:	460d      	mov	r5, r1
 801b82a:	b09d      	sub	sp, #116	; 0x74
 801b82c:	4614      	mov	r4, r2
 801b82e:	4698      	mov	r8, r3
 801b830:	4606      	mov	r6, r0
 801b832:	b118      	cbz	r0, 801b83c <_vfiprintf_r+0x18>
 801b834:	6a03      	ldr	r3, [r0, #32]
 801b836:	b90b      	cbnz	r3, 801b83c <_vfiprintf_r+0x18>
 801b838:	f7fe fb28 	bl	8019e8c <__sinit>
 801b83c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801b83e:	07d9      	lsls	r1, r3, #31
 801b840:	d405      	bmi.n	801b84e <_vfiprintf_r+0x2a>
 801b842:	89ab      	ldrh	r3, [r5, #12]
 801b844:	059a      	lsls	r2, r3, #22
 801b846:	d402      	bmi.n	801b84e <_vfiprintf_r+0x2a>
 801b848:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801b84a:	f7fe fd22 	bl	801a292 <__retarget_lock_acquire_recursive>
 801b84e:	89ab      	ldrh	r3, [r5, #12]
 801b850:	071b      	lsls	r3, r3, #28
 801b852:	d501      	bpl.n	801b858 <_vfiprintf_r+0x34>
 801b854:	692b      	ldr	r3, [r5, #16]
 801b856:	b99b      	cbnz	r3, 801b880 <_vfiprintf_r+0x5c>
 801b858:	4629      	mov	r1, r5
 801b85a:	4630      	mov	r0, r6
 801b85c:	f7fe fc3a 	bl	801a0d4 <__swsetup_r>
 801b860:	b170      	cbz	r0, 801b880 <_vfiprintf_r+0x5c>
 801b862:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801b864:	07dc      	lsls	r4, r3, #31
 801b866:	d504      	bpl.n	801b872 <_vfiprintf_r+0x4e>
 801b868:	f04f 30ff 	mov.w	r0, #4294967295
 801b86c:	b01d      	add	sp, #116	; 0x74
 801b86e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b872:	89ab      	ldrh	r3, [r5, #12]
 801b874:	0598      	lsls	r0, r3, #22
 801b876:	d4f7      	bmi.n	801b868 <_vfiprintf_r+0x44>
 801b878:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801b87a:	f7fe fd0b 	bl	801a294 <__retarget_lock_release_recursive>
 801b87e:	e7f3      	b.n	801b868 <_vfiprintf_r+0x44>
 801b880:	2300      	movs	r3, #0
 801b882:	9309      	str	r3, [sp, #36]	; 0x24
 801b884:	2320      	movs	r3, #32
 801b886:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801b88a:	f8cd 800c 	str.w	r8, [sp, #12]
 801b88e:	2330      	movs	r3, #48	; 0x30
 801b890:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 801ba44 <_vfiprintf_r+0x220>
 801b894:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801b898:	f04f 0901 	mov.w	r9, #1
 801b89c:	4623      	mov	r3, r4
 801b89e:	469a      	mov	sl, r3
 801b8a0:	f813 2b01 	ldrb.w	r2, [r3], #1
 801b8a4:	b10a      	cbz	r2, 801b8aa <_vfiprintf_r+0x86>
 801b8a6:	2a25      	cmp	r2, #37	; 0x25
 801b8a8:	d1f9      	bne.n	801b89e <_vfiprintf_r+0x7a>
 801b8aa:	ebba 0b04 	subs.w	fp, sl, r4
 801b8ae:	d00b      	beq.n	801b8c8 <_vfiprintf_r+0xa4>
 801b8b0:	465b      	mov	r3, fp
 801b8b2:	4622      	mov	r2, r4
 801b8b4:	4629      	mov	r1, r5
 801b8b6:	4630      	mov	r0, r6
 801b8b8:	f7ff ffa1 	bl	801b7fe <__sfputs_r>
 801b8bc:	3001      	adds	r0, #1
 801b8be:	f000 80a9 	beq.w	801ba14 <_vfiprintf_r+0x1f0>
 801b8c2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801b8c4:	445a      	add	r2, fp
 801b8c6:	9209      	str	r2, [sp, #36]	; 0x24
 801b8c8:	f89a 3000 	ldrb.w	r3, [sl]
 801b8cc:	2b00      	cmp	r3, #0
 801b8ce:	f000 80a1 	beq.w	801ba14 <_vfiprintf_r+0x1f0>
 801b8d2:	2300      	movs	r3, #0
 801b8d4:	f04f 32ff 	mov.w	r2, #4294967295
 801b8d8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801b8dc:	f10a 0a01 	add.w	sl, sl, #1
 801b8e0:	9304      	str	r3, [sp, #16]
 801b8e2:	9307      	str	r3, [sp, #28]
 801b8e4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801b8e8:	931a      	str	r3, [sp, #104]	; 0x68
 801b8ea:	4654      	mov	r4, sl
 801b8ec:	2205      	movs	r2, #5
 801b8ee:	f814 1b01 	ldrb.w	r1, [r4], #1
 801b8f2:	4854      	ldr	r0, [pc, #336]	; (801ba44 <_vfiprintf_r+0x220>)
 801b8f4:	f7e6 fac4 	bl	8001e80 <memchr>
 801b8f8:	9a04      	ldr	r2, [sp, #16]
 801b8fa:	b9d8      	cbnz	r0, 801b934 <_vfiprintf_r+0x110>
 801b8fc:	06d1      	lsls	r1, r2, #27
 801b8fe:	bf44      	itt	mi
 801b900:	2320      	movmi	r3, #32
 801b902:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801b906:	0713      	lsls	r3, r2, #28
 801b908:	bf44      	itt	mi
 801b90a:	232b      	movmi	r3, #43	; 0x2b
 801b90c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801b910:	f89a 3000 	ldrb.w	r3, [sl]
 801b914:	2b2a      	cmp	r3, #42	; 0x2a
 801b916:	d015      	beq.n	801b944 <_vfiprintf_r+0x120>
 801b918:	9a07      	ldr	r2, [sp, #28]
 801b91a:	4654      	mov	r4, sl
 801b91c:	2000      	movs	r0, #0
 801b91e:	f04f 0c0a 	mov.w	ip, #10
 801b922:	4621      	mov	r1, r4
 801b924:	f811 3b01 	ldrb.w	r3, [r1], #1
 801b928:	3b30      	subs	r3, #48	; 0x30
 801b92a:	2b09      	cmp	r3, #9
 801b92c:	d94d      	bls.n	801b9ca <_vfiprintf_r+0x1a6>
 801b92e:	b1b0      	cbz	r0, 801b95e <_vfiprintf_r+0x13a>
 801b930:	9207      	str	r2, [sp, #28]
 801b932:	e014      	b.n	801b95e <_vfiprintf_r+0x13a>
 801b934:	eba0 0308 	sub.w	r3, r0, r8
 801b938:	fa09 f303 	lsl.w	r3, r9, r3
 801b93c:	4313      	orrs	r3, r2
 801b93e:	9304      	str	r3, [sp, #16]
 801b940:	46a2      	mov	sl, r4
 801b942:	e7d2      	b.n	801b8ea <_vfiprintf_r+0xc6>
 801b944:	9b03      	ldr	r3, [sp, #12]
 801b946:	1d19      	adds	r1, r3, #4
 801b948:	681b      	ldr	r3, [r3, #0]
 801b94a:	9103      	str	r1, [sp, #12]
 801b94c:	2b00      	cmp	r3, #0
 801b94e:	bfbb      	ittet	lt
 801b950:	425b      	neglt	r3, r3
 801b952:	f042 0202 	orrlt.w	r2, r2, #2
 801b956:	9307      	strge	r3, [sp, #28]
 801b958:	9307      	strlt	r3, [sp, #28]
 801b95a:	bfb8      	it	lt
 801b95c:	9204      	strlt	r2, [sp, #16]
 801b95e:	7823      	ldrb	r3, [r4, #0]
 801b960:	2b2e      	cmp	r3, #46	; 0x2e
 801b962:	d10c      	bne.n	801b97e <_vfiprintf_r+0x15a>
 801b964:	7863      	ldrb	r3, [r4, #1]
 801b966:	2b2a      	cmp	r3, #42	; 0x2a
 801b968:	d134      	bne.n	801b9d4 <_vfiprintf_r+0x1b0>
 801b96a:	9b03      	ldr	r3, [sp, #12]
 801b96c:	1d1a      	adds	r2, r3, #4
 801b96e:	681b      	ldr	r3, [r3, #0]
 801b970:	9203      	str	r2, [sp, #12]
 801b972:	2b00      	cmp	r3, #0
 801b974:	bfb8      	it	lt
 801b976:	f04f 33ff 	movlt.w	r3, #4294967295
 801b97a:	3402      	adds	r4, #2
 801b97c:	9305      	str	r3, [sp, #20]
 801b97e:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 801ba54 <_vfiprintf_r+0x230>
 801b982:	7821      	ldrb	r1, [r4, #0]
 801b984:	2203      	movs	r2, #3
 801b986:	4650      	mov	r0, sl
 801b988:	f7e6 fa7a 	bl	8001e80 <memchr>
 801b98c:	b138      	cbz	r0, 801b99e <_vfiprintf_r+0x17a>
 801b98e:	9b04      	ldr	r3, [sp, #16]
 801b990:	eba0 000a 	sub.w	r0, r0, sl
 801b994:	2240      	movs	r2, #64	; 0x40
 801b996:	4082      	lsls	r2, r0
 801b998:	4313      	orrs	r3, r2
 801b99a:	3401      	adds	r4, #1
 801b99c:	9304      	str	r3, [sp, #16]
 801b99e:	f814 1b01 	ldrb.w	r1, [r4], #1
 801b9a2:	4829      	ldr	r0, [pc, #164]	; (801ba48 <_vfiprintf_r+0x224>)
 801b9a4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801b9a8:	2206      	movs	r2, #6
 801b9aa:	f7e6 fa69 	bl	8001e80 <memchr>
 801b9ae:	2800      	cmp	r0, #0
 801b9b0:	d03f      	beq.n	801ba32 <_vfiprintf_r+0x20e>
 801b9b2:	4b26      	ldr	r3, [pc, #152]	; (801ba4c <_vfiprintf_r+0x228>)
 801b9b4:	bb1b      	cbnz	r3, 801b9fe <_vfiprintf_r+0x1da>
 801b9b6:	9b03      	ldr	r3, [sp, #12]
 801b9b8:	3307      	adds	r3, #7
 801b9ba:	f023 0307 	bic.w	r3, r3, #7
 801b9be:	3308      	adds	r3, #8
 801b9c0:	9303      	str	r3, [sp, #12]
 801b9c2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801b9c4:	443b      	add	r3, r7
 801b9c6:	9309      	str	r3, [sp, #36]	; 0x24
 801b9c8:	e768      	b.n	801b89c <_vfiprintf_r+0x78>
 801b9ca:	fb0c 3202 	mla	r2, ip, r2, r3
 801b9ce:	460c      	mov	r4, r1
 801b9d0:	2001      	movs	r0, #1
 801b9d2:	e7a6      	b.n	801b922 <_vfiprintf_r+0xfe>
 801b9d4:	2300      	movs	r3, #0
 801b9d6:	3401      	adds	r4, #1
 801b9d8:	9305      	str	r3, [sp, #20]
 801b9da:	4619      	mov	r1, r3
 801b9dc:	f04f 0c0a 	mov.w	ip, #10
 801b9e0:	4620      	mov	r0, r4
 801b9e2:	f810 2b01 	ldrb.w	r2, [r0], #1
 801b9e6:	3a30      	subs	r2, #48	; 0x30
 801b9e8:	2a09      	cmp	r2, #9
 801b9ea:	d903      	bls.n	801b9f4 <_vfiprintf_r+0x1d0>
 801b9ec:	2b00      	cmp	r3, #0
 801b9ee:	d0c6      	beq.n	801b97e <_vfiprintf_r+0x15a>
 801b9f0:	9105      	str	r1, [sp, #20]
 801b9f2:	e7c4      	b.n	801b97e <_vfiprintf_r+0x15a>
 801b9f4:	fb0c 2101 	mla	r1, ip, r1, r2
 801b9f8:	4604      	mov	r4, r0
 801b9fa:	2301      	movs	r3, #1
 801b9fc:	e7f0      	b.n	801b9e0 <_vfiprintf_r+0x1bc>
 801b9fe:	ab03      	add	r3, sp, #12
 801ba00:	9300      	str	r3, [sp, #0]
 801ba02:	462a      	mov	r2, r5
 801ba04:	4b12      	ldr	r3, [pc, #72]	; (801ba50 <_vfiprintf_r+0x22c>)
 801ba06:	a904      	add	r1, sp, #16
 801ba08:	4630      	mov	r0, r6
 801ba0a:	f7fd fe09 	bl	8019620 <_printf_float>
 801ba0e:	4607      	mov	r7, r0
 801ba10:	1c78      	adds	r0, r7, #1
 801ba12:	d1d6      	bne.n	801b9c2 <_vfiprintf_r+0x19e>
 801ba14:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801ba16:	07d9      	lsls	r1, r3, #31
 801ba18:	d405      	bmi.n	801ba26 <_vfiprintf_r+0x202>
 801ba1a:	89ab      	ldrh	r3, [r5, #12]
 801ba1c:	059a      	lsls	r2, r3, #22
 801ba1e:	d402      	bmi.n	801ba26 <_vfiprintf_r+0x202>
 801ba20:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801ba22:	f7fe fc37 	bl	801a294 <__retarget_lock_release_recursive>
 801ba26:	89ab      	ldrh	r3, [r5, #12]
 801ba28:	065b      	lsls	r3, r3, #25
 801ba2a:	f53f af1d 	bmi.w	801b868 <_vfiprintf_r+0x44>
 801ba2e:	9809      	ldr	r0, [sp, #36]	; 0x24
 801ba30:	e71c      	b.n	801b86c <_vfiprintf_r+0x48>
 801ba32:	ab03      	add	r3, sp, #12
 801ba34:	9300      	str	r3, [sp, #0]
 801ba36:	462a      	mov	r2, r5
 801ba38:	4b05      	ldr	r3, [pc, #20]	; (801ba50 <_vfiprintf_r+0x22c>)
 801ba3a:	a904      	add	r1, sp, #16
 801ba3c:	4630      	mov	r0, r6
 801ba3e:	f7fe f877 	bl	8019b30 <_printf_i>
 801ba42:	e7e4      	b.n	801ba0e <_vfiprintf_r+0x1ea>
 801ba44:	0801f924 	.word	0x0801f924
 801ba48:	0801f92e 	.word	0x0801f92e
 801ba4c:	08019621 	.word	0x08019621
 801ba50:	0801b7ff 	.word	0x0801b7ff
 801ba54:	0801f92a 	.word	0x0801f92a

0801ba58 <__sflush_r>:
 801ba58:	898a      	ldrh	r2, [r1, #12]
 801ba5a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801ba5e:	4605      	mov	r5, r0
 801ba60:	0710      	lsls	r0, r2, #28
 801ba62:	460c      	mov	r4, r1
 801ba64:	d458      	bmi.n	801bb18 <__sflush_r+0xc0>
 801ba66:	684b      	ldr	r3, [r1, #4]
 801ba68:	2b00      	cmp	r3, #0
 801ba6a:	dc05      	bgt.n	801ba78 <__sflush_r+0x20>
 801ba6c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801ba6e:	2b00      	cmp	r3, #0
 801ba70:	dc02      	bgt.n	801ba78 <__sflush_r+0x20>
 801ba72:	2000      	movs	r0, #0
 801ba74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801ba78:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801ba7a:	2e00      	cmp	r6, #0
 801ba7c:	d0f9      	beq.n	801ba72 <__sflush_r+0x1a>
 801ba7e:	2300      	movs	r3, #0
 801ba80:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801ba84:	682f      	ldr	r7, [r5, #0]
 801ba86:	6a21      	ldr	r1, [r4, #32]
 801ba88:	602b      	str	r3, [r5, #0]
 801ba8a:	d032      	beq.n	801baf2 <__sflush_r+0x9a>
 801ba8c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801ba8e:	89a3      	ldrh	r3, [r4, #12]
 801ba90:	075a      	lsls	r2, r3, #29
 801ba92:	d505      	bpl.n	801baa0 <__sflush_r+0x48>
 801ba94:	6863      	ldr	r3, [r4, #4]
 801ba96:	1ac0      	subs	r0, r0, r3
 801ba98:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801ba9a:	b10b      	cbz	r3, 801baa0 <__sflush_r+0x48>
 801ba9c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801ba9e:	1ac0      	subs	r0, r0, r3
 801baa0:	2300      	movs	r3, #0
 801baa2:	4602      	mov	r2, r0
 801baa4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801baa6:	6a21      	ldr	r1, [r4, #32]
 801baa8:	4628      	mov	r0, r5
 801baaa:	47b0      	blx	r6
 801baac:	1c43      	adds	r3, r0, #1
 801baae:	89a3      	ldrh	r3, [r4, #12]
 801bab0:	d106      	bne.n	801bac0 <__sflush_r+0x68>
 801bab2:	6829      	ldr	r1, [r5, #0]
 801bab4:	291d      	cmp	r1, #29
 801bab6:	d82b      	bhi.n	801bb10 <__sflush_r+0xb8>
 801bab8:	4a29      	ldr	r2, [pc, #164]	; (801bb60 <__sflush_r+0x108>)
 801baba:	410a      	asrs	r2, r1
 801babc:	07d6      	lsls	r6, r2, #31
 801babe:	d427      	bmi.n	801bb10 <__sflush_r+0xb8>
 801bac0:	2200      	movs	r2, #0
 801bac2:	6062      	str	r2, [r4, #4]
 801bac4:	04d9      	lsls	r1, r3, #19
 801bac6:	6922      	ldr	r2, [r4, #16]
 801bac8:	6022      	str	r2, [r4, #0]
 801baca:	d504      	bpl.n	801bad6 <__sflush_r+0x7e>
 801bacc:	1c42      	adds	r2, r0, #1
 801bace:	d101      	bne.n	801bad4 <__sflush_r+0x7c>
 801bad0:	682b      	ldr	r3, [r5, #0]
 801bad2:	b903      	cbnz	r3, 801bad6 <__sflush_r+0x7e>
 801bad4:	6560      	str	r0, [r4, #84]	; 0x54
 801bad6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801bad8:	602f      	str	r7, [r5, #0]
 801bada:	2900      	cmp	r1, #0
 801badc:	d0c9      	beq.n	801ba72 <__sflush_r+0x1a>
 801bade:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801bae2:	4299      	cmp	r1, r3
 801bae4:	d002      	beq.n	801baec <__sflush_r+0x94>
 801bae6:	4628      	mov	r0, r5
 801bae8:	f7ff f9f6 	bl	801aed8 <_free_r>
 801baec:	2000      	movs	r0, #0
 801baee:	6360      	str	r0, [r4, #52]	; 0x34
 801baf0:	e7c0      	b.n	801ba74 <__sflush_r+0x1c>
 801baf2:	2301      	movs	r3, #1
 801baf4:	4628      	mov	r0, r5
 801baf6:	47b0      	blx	r6
 801baf8:	1c41      	adds	r1, r0, #1
 801bafa:	d1c8      	bne.n	801ba8e <__sflush_r+0x36>
 801bafc:	682b      	ldr	r3, [r5, #0]
 801bafe:	2b00      	cmp	r3, #0
 801bb00:	d0c5      	beq.n	801ba8e <__sflush_r+0x36>
 801bb02:	2b1d      	cmp	r3, #29
 801bb04:	d001      	beq.n	801bb0a <__sflush_r+0xb2>
 801bb06:	2b16      	cmp	r3, #22
 801bb08:	d101      	bne.n	801bb0e <__sflush_r+0xb6>
 801bb0a:	602f      	str	r7, [r5, #0]
 801bb0c:	e7b1      	b.n	801ba72 <__sflush_r+0x1a>
 801bb0e:	89a3      	ldrh	r3, [r4, #12]
 801bb10:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801bb14:	81a3      	strh	r3, [r4, #12]
 801bb16:	e7ad      	b.n	801ba74 <__sflush_r+0x1c>
 801bb18:	690f      	ldr	r7, [r1, #16]
 801bb1a:	2f00      	cmp	r7, #0
 801bb1c:	d0a9      	beq.n	801ba72 <__sflush_r+0x1a>
 801bb1e:	0793      	lsls	r3, r2, #30
 801bb20:	680e      	ldr	r6, [r1, #0]
 801bb22:	bf08      	it	eq
 801bb24:	694b      	ldreq	r3, [r1, #20]
 801bb26:	600f      	str	r7, [r1, #0]
 801bb28:	bf18      	it	ne
 801bb2a:	2300      	movne	r3, #0
 801bb2c:	eba6 0807 	sub.w	r8, r6, r7
 801bb30:	608b      	str	r3, [r1, #8]
 801bb32:	f1b8 0f00 	cmp.w	r8, #0
 801bb36:	dd9c      	ble.n	801ba72 <__sflush_r+0x1a>
 801bb38:	6a21      	ldr	r1, [r4, #32]
 801bb3a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801bb3c:	4643      	mov	r3, r8
 801bb3e:	463a      	mov	r2, r7
 801bb40:	4628      	mov	r0, r5
 801bb42:	47b0      	blx	r6
 801bb44:	2800      	cmp	r0, #0
 801bb46:	dc06      	bgt.n	801bb56 <__sflush_r+0xfe>
 801bb48:	89a3      	ldrh	r3, [r4, #12]
 801bb4a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801bb4e:	81a3      	strh	r3, [r4, #12]
 801bb50:	f04f 30ff 	mov.w	r0, #4294967295
 801bb54:	e78e      	b.n	801ba74 <__sflush_r+0x1c>
 801bb56:	4407      	add	r7, r0
 801bb58:	eba8 0800 	sub.w	r8, r8, r0
 801bb5c:	e7e9      	b.n	801bb32 <__sflush_r+0xda>
 801bb5e:	bf00      	nop
 801bb60:	dfbffffe 	.word	0xdfbffffe

0801bb64 <_fflush_r>:
 801bb64:	b538      	push	{r3, r4, r5, lr}
 801bb66:	690b      	ldr	r3, [r1, #16]
 801bb68:	4605      	mov	r5, r0
 801bb6a:	460c      	mov	r4, r1
 801bb6c:	b913      	cbnz	r3, 801bb74 <_fflush_r+0x10>
 801bb6e:	2500      	movs	r5, #0
 801bb70:	4628      	mov	r0, r5
 801bb72:	bd38      	pop	{r3, r4, r5, pc}
 801bb74:	b118      	cbz	r0, 801bb7e <_fflush_r+0x1a>
 801bb76:	6a03      	ldr	r3, [r0, #32]
 801bb78:	b90b      	cbnz	r3, 801bb7e <_fflush_r+0x1a>
 801bb7a:	f7fe f987 	bl	8019e8c <__sinit>
 801bb7e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801bb82:	2b00      	cmp	r3, #0
 801bb84:	d0f3      	beq.n	801bb6e <_fflush_r+0xa>
 801bb86:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801bb88:	07d0      	lsls	r0, r2, #31
 801bb8a:	d404      	bmi.n	801bb96 <_fflush_r+0x32>
 801bb8c:	0599      	lsls	r1, r3, #22
 801bb8e:	d402      	bmi.n	801bb96 <_fflush_r+0x32>
 801bb90:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801bb92:	f7fe fb7e 	bl	801a292 <__retarget_lock_acquire_recursive>
 801bb96:	4628      	mov	r0, r5
 801bb98:	4621      	mov	r1, r4
 801bb9a:	f7ff ff5d 	bl	801ba58 <__sflush_r>
 801bb9e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801bba0:	07da      	lsls	r2, r3, #31
 801bba2:	4605      	mov	r5, r0
 801bba4:	d4e4      	bmi.n	801bb70 <_fflush_r+0xc>
 801bba6:	89a3      	ldrh	r3, [r4, #12]
 801bba8:	059b      	lsls	r3, r3, #22
 801bbaa:	d4e1      	bmi.n	801bb70 <_fflush_r+0xc>
 801bbac:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801bbae:	f7fe fb71 	bl	801a294 <__retarget_lock_release_recursive>
 801bbb2:	e7dd      	b.n	801bb70 <_fflush_r+0xc>

0801bbb4 <fiprintf>:
 801bbb4:	b40e      	push	{r1, r2, r3}
 801bbb6:	b503      	push	{r0, r1, lr}
 801bbb8:	4601      	mov	r1, r0
 801bbba:	ab03      	add	r3, sp, #12
 801bbbc:	4805      	ldr	r0, [pc, #20]	; (801bbd4 <fiprintf+0x20>)
 801bbbe:	f853 2b04 	ldr.w	r2, [r3], #4
 801bbc2:	6800      	ldr	r0, [r0, #0]
 801bbc4:	9301      	str	r3, [sp, #4]
 801bbc6:	f7ff fe2d 	bl	801b824 <_vfiprintf_r>
 801bbca:	b002      	add	sp, #8
 801bbcc:	f85d eb04 	ldr.w	lr, [sp], #4
 801bbd0:	b003      	add	sp, #12
 801bbd2:	4770      	bx	lr
 801bbd4:	200000bc 	.word	0x200000bc

0801bbd8 <__swhatbuf_r>:
 801bbd8:	b570      	push	{r4, r5, r6, lr}
 801bbda:	460c      	mov	r4, r1
 801bbdc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801bbe0:	2900      	cmp	r1, #0
 801bbe2:	b096      	sub	sp, #88	; 0x58
 801bbe4:	4615      	mov	r5, r2
 801bbe6:	461e      	mov	r6, r3
 801bbe8:	da0d      	bge.n	801bc06 <__swhatbuf_r+0x2e>
 801bbea:	89a3      	ldrh	r3, [r4, #12]
 801bbec:	f013 0f80 	tst.w	r3, #128	; 0x80
 801bbf0:	f04f 0100 	mov.w	r1, #0
 801bbf4:	bf0c      	ite	eq
 801bbf6:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 801bbfa:	2340      	movne	r3, #64	; 0x40
 801bbfc:	2000      	movs	r0, #0
 801bbfe:	6031      	str	r1, [r6, #0]
 801bc00:	602b      	str	r3, [r5, #0]
 801bc02:	b016      	add	sp, #88	; 0x58
 801bc04:	bd70      	pop	{r4, r5, r6, pc}
 801bc06:	466a      	mov	r2, sp
 801bc08:	f000 f848 	bl	801bc9c <_fstat_r>
 801bc0c:	2800      	cmp	r0, #0
 801bc0e:	dbec      	blt.n	801bbea <__swhatbuf_r+0x12>
 801bc10:	9901      	ldr	r1, [sp, #4]
 801bc12:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 801bc16:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 801bc1a:	4259      	negs	r1, r3
 801bc1c:	4159      	adcs	r1, r3
 801bc1e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801bc22:	e7eb      	b.n	801bbfc <__swhatbuf_r+0x24>

0801bc24 <__smakebuf_r>:
 801bc24:	898b      	ldrh	r3, [r1, #12]
 801bc26:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801bc28:	079d      	lsls	r5, r3, #30
 801bc2a:	4606      	mov	r6, r0
 801bc2c:	460c      	mov	r4, r1
 801bc2e:	d507      	bpl.n	801bc40 <__smakebuf_r+0x1c>
 801bc30:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801bc34:	6023      	str	r3, [r4, #0]
 801bc36:	6123      	str	r3, [r4, #16]
 801bc38:	2301      	movs	r3, #1
 801bc3a:	6163      	str	r3, [r4, #20]
 801bc3c:	b002      	add	sp, #8
 801bc3e:	bd70      	pop	{r4, r5, r6, pc}
 801bc40:	ab01      	add	r3, sp, #4
 801bc42:	466a      	mov	r2, sp
 801bc44:	f7ff ffc8 	bl	801bbd8 <__swhatbuf_r>
 801bc48:	9900      	ldr	r1, [sp, #0]
 801bc4a:	4605      	mov	r5, r0
 801bc4c:	4630      	mov	r0, r6
 801bc4e:	f7ff f9b7 	bl	801afc0 <_malloc_r>
 801bc52:	b948      	cbnz	r0, 801bc68 <__smakebuf_r+0x44>
 801bc54:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801bc58:	059a      	lsls	r2, r3, #22
 801bc5a:	d4ef      	bmi.n	801bc3c <__smakebuf_r+0x18>
 801bc5c:	f023 0303 	bic.w	r3, r3, #3
 801bc60:	f043 0302 	orr.w	r3, r3, #2
 801bc64:	81a3      	strh	r3, [r4, #12]
 801bc66:	e7e3      	b.n	801bc30 <__smakebuf_r+0xc>
 801bc68:	89a3      	ldrh	r3, [r4, #12]
 801bc6a:	6020      	str	r0, [r4, #0]
 801bc6c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801bc70:	81a3      	strh	r3, [r4, #12]
 801bc72:	9b00      	ldr	r3, [sp, #0]
 801bc74:	6163      	str	r3, [r4, #20]
 801bc76:	9b01      	ldr	r3, [sp, #4]
 801bc78:	6120      	str	r0, [r4, #16]
 801bc7a:	b15b      	cbz	r3, 801bc94 <__smakebuf_r+0x70>
 801bc7c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801bc80:	4630      	mov	r0, r6
 801bc82:	f000 f81d 	bl	801bcc0 <_isatty_r>
 801bc86:	b128      	cbz	r0, 801bc94 <__smakebuf_r+0x70>
 801bc88:	89a3      	ldrh	r3, [r4, #12]
 801bc8a:	f023 0303 	bic.w	r3, r3, #3
 801bc8e:	f043 0301 	orr.w	r3, r3, #1
 801bc92:	81a3      	strh	r3, [r4, #12]
 801bc94:	89a3      	ldrh	r3, [r4, #12]
 801bc96:	431d      	orrs	r5, r3
 801bc98:	81a5      	strh	r5, [r4, #12]
 801bc9a:	e7cf      	b.n	801bc3c <__smakebuf_r+0x18>

0801bc9c <_fstat_r>:
 801bc9c:	b538      	push	{r3, r4, r5, lr}
 801bc9e:	4d07      	ldr	r5, [pc, #28]	; (801bcbc <_fstat_r+0x20>)
 801bca0:	2300      	movs	r3, #0
 801bca2:	4604      	mov	r4, r0
 801bca4:	4608      	mov	r0, r1
 801bca6:	4611      	mov	r1, r2
 801bca8:	602b      	str	r3, [r5, #0]
 801bcaa:	f7e7 fedc 	bl	8003a66 <_fstat>
 801bcae:	1c43      	adds	r3, r0, #1
 801bcb0:	d102      	bne.n	801bcb8 <_fstat_r+0x1c>
 801bcb2:	682b      	ldr	r3, [r5, #0]
 801bcb4:	b103      	cbz	r3, 801bcb8 <_fstat_r+0x1c>
 801bcb6:	6023      	str	r3, [r4, #0]
 801bcb8:	bd38      	pop	{r3, r4, r5, pc}
 801bcba:	bf00      	nop
 801bcbc:	2000736c 	.word	0x2000736c

0801bcc0 <_isatty_r>:
 801bcc0:	b538      	push	{r3, r4, r5, lr}
 801bcc2:	4d06      	ldr	r5, [pc, #24]	; (801bcdc <_isatty_r+0x1c>)
 801bcc4:	2300      	movs	r3, #0
 801bcc6:	4604      	mov	r4, r0
 801bcc8:	4608      	mov	r0, r1
 801bcca:	602b      	str	r3, [r5, #0]
 801bccc:	f7e7 fedb 	bl	8003a86 <_isatty>
 801bcd0:	1c43      	adds	r3, r0, #1
 801bcd2:	d102      	bne.n	801bcda <_isatty_r+0x1a>
 801bcd4:	682b      	ldr	r3, [r5, #0]
 801bcd6:	b103      	cbz	r3, 801bcda <_isatty_r+0x1a>
 801bcd8:	6023      	str	r3, [r4, #0]
 801bcda:	bd38      	pop	{r3, r4, r5, pc}
 801bcdc:	2000736c 	.word	0x2000736c

0801bce0 <_sbrk_r>:
 801bce0:	b538      	push	{r3, r4, r5, lr}
 801bce2:	4d06      	ldr	r5, [pc, #24]	; (801bcfc <_sbrk_r+0x1c>)
 801bce4:	2300      	movs	r3, #0
 801bce6:	4604      	mov	r4, r0
 801bce8:	4608      	mov	r0, r1
 801bcea:	602b      	str	r3, [r5, #0]
 801bcec:	f7e7 fee4 	bl	8003ab8 <_sbrk>
 801bcf0:	1c43      	adds	r3, r0, #1
 801bcf2:	d102      	bne.n	801bcfa <_sbrk_r+0x1a>
 801bcf4:	682b      	ldr	r3, [r5, #0]
 801bcf6:	b103      	cbz	r3, 801bcfa <_sbrk_r+0x1a>
 801bcf8:	6023      	str	r3, [r4, #0]
 801bcfa:	bd38      	pop	{r3, r4, r5, pc}
 801bcfc:	2000736c 	.word	0x2000736c

0801bd00 <abort>:
 801bd00:	b508      	push	{r3, lr}
 801bd02:	2006      	movs	r0, #6
 801bd04:	f000 f860 	bl	801bdc8 <raise>
 801bd08:	2001      	movs	r0, #1
 801bd0a:	f7e7 fe5d 	bl	80039c8 <_exit>

0801bd0e <_calloc_r>:
 801bd0e:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801bd10:	fba1 2402 	umull	r2, r4, r1, r2
 801bd14:	b94c      	cbnz	r4, 801bd2a <_calloc_r+0x1c>
 801bd16:	4611      	mov	r1, r2
 801bd18:	9201      	str	r2, [sp, #4]
 801bd1a:	f7ff f951 	bl	801afc0 <_malloc_r>
 801bd1e:	9a01      	ldr	r2, [sp, #4]
 801bd20:	4605      	mov	r5, r0
 801bd22:	b930      	cbnz	r0, 801bd32 <_calloc_r+0x24>
 801bd24:	4628      	mov	r0, r5
 801bd26:	b003      	add	sp, #12
 801bd28:	bd30      	pop	{r4, r5, pc}
 801bd2a:	220c      	movs	r2, #12
 801bd2c:	6002      	str	r2, [r0, #0]
 801bd2e:	2500      	movs	r5, #0
 801bd30:	e7f8      	b.n	801bd24 <_calloc_r+0x16>
 801bd32:	4621      	mov	r1, r4
 801bd34:	f7fe fa36 	bl	801a1a4 <memset>
 801bd38:	e7f4      	b.n	801bd24 <_calloc_r+0x16>

0801bd3a <__ascii_mbtowc>:
 801bd3a:	b082      	sub	sp, #8
 801bd3c:	b901      	cbnz	r1, 801bd40 <__ascii_mbtowc+0x6>
 801bd3e:	a901      	add	r1, sp, #4
 801bd40:	b142      	cbz	r2, 801bd54 <__ascii_mbtowc+0x1a>
 801bd42:	b14b      	cbz	r3, 801bd58 <__ascii_mbtowc+0x1e>
 801bd44:	7813      	ldrb	r3, [r2, #0]
 801bd46:	600b      	str	r3, [r1, #0]
 801bd48:	7812      	ldrb	r2, [r2, #0]
 801bd4a:	1e10      	subs	r0, r2, #0
 801bd4c:	bf18      	it	ne
 801bd4e:	2001      	movne	r0, #1
 801bd50:	b002      	add	sp, #8
 801bd52:	4770      	bx	lr
 801bd54:	4610      	mov	r0, r2
 801bd56:	e7fb      	b.n	801bd50 <__ascii_mbtowc+0x16>
 801bd58:	f06f 0001 	mvn.w	r0, #1
 801bd5c:	e7f8      	b.n	801bd50 <__ascii_mbtowc+0x16>

0801bd5e <__ascii_wctomb>:
 801bd5e:	b149      	cbz	r1, 801bd74 <__ascii_wctomb+0x16>
 801bd60:	2aff      	cmp	r2, #255	; 0xff
 801bd62:	bf85      	ittet	hi
 801bd64:	238a      	movhi	r3, #138	; 0x8a
 801bd66:	6003      	strhi	r3, [r0, #0]
 801bd68:	700a      	strbls	r2, [r1, #0]
 801bd6a:	f04f 30ff 	movhi.w	r0, #4294967295
 801bd6e:	bf98      	it	ls
 801bd70:	2001      	movls	r0, #1
 801bd72:	4770      	bx	lr
 801bd74:	4608      	mov	r0, r1
 801bd76:	4770      	bx	lr

0801bd78 <_raise_r>:
 801bd78:	291f      	cmp	r1, #31
 801bd7a:	b538      	push	{r3, r4, r5, lr}
 801bd7c:	4604      	mov	r4, r0
 801bd7e:	460d      	mov	r5, r1
 801bd80:	d904      	bls.n	801bd8c <_raise_r+0x14>
 801bd82:	2316      	movs	r3, #22
 801bd84:	6003      	str	r3, [r0, #0]
 801bd86:	f04f 30ff 	mov.w	r0, #4294967295
 801bd8a:	bd38      	pop	{r3, r4, r5, pc}
 801bd8c:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 801bd8e:	b112      	cbz	r2, 801bd96 <_raise_r+0x1e>
 801bd90:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801bd94:	b94b      	cbnz	r3, 801bdaa <_raise_r+0x32>
 801bd96:	4620      	mov	r0, r4
 801bd98:	f000 f830 	bl	801bdfc <_getpid_r>
 801bd9c:	462a      	mov	r2, r5
 801bd9e:	4601      	mov	r1, r0
 801bda0:	4620      	mov	r0, r4
 801bda2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801bda6:	f000 b817 	b.w	801bdd8 <_kill_r>
 801bdaa:	2b01      	cmp	r3, #1
 801bdac:	d00a      	beq.n	801bdc4 <_raise_r+0x4c>
 801bdae:	1c59      	adds	r1, r3, #1
 801bdb0:	d103      	bne.n	801bdba <_raise_r+0x42>
 801bdb2:	2316      	movs	r3, #22
 801bdb4:	6003      	str	r3, [r0, #0]
 801bdb6:	2001      	movs	r0, #1
 801bdb8:	e7e7      	b.n	801bd8a <_raise_r+0x12>
 801bdba:	2400      	movs	r4, #0
 801bdbc:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 801bdc0:	4628      	mov	r0, r5
 801bdc2:	4798      	blx	r3
 801bdc4:	2000      	movs	r0, #0
 801bdc6:	e7e0      	b.n	801bd8a <_raise_r+0x12>

0801bdc8 <raise>:
 801bdc8:	4b02      	ldr	r3, [pc, #8]	; (801bdd4 <raise+0xc>)
 801bdca:	4601      	mov	r1, r0
 801bdcc:	6818      	ldr	r0, [r3, #0]
 801bdce:	f7ff bfd3 	b.w	801bd78 <_raise_r>
 801bdd2:	bf00      	nop
 801bdd4:	200000bc 	.word	0x200000bc

0801bdd8 <_kill_r>:
 801bdd8:	b538      	push	{r3, r4, r5, lr}
 801bdda:	4d07      	ldr	r5, [pc, #28]	; (801bdf8 <_kill_r+0x20>)
 801bddc:	2300      	movs	r3, #0
 801bdde:	4604      	mov	r4, r0
 801bde0:	4608      	mov	r0, r1
 801bde2:	4611      	mov	r1, r2
 801bde4:	602b      	str	r3, [r5, #0]
 801bde6:	f7e7 fddd 	bl	80039a4 <_kill>
 801bdea:	1c43      	adds	r3, r0, #1
 801bdec:	d102      	bne.n	801bdf4 <_kill_r+0x1c>
 801bdee:	682b      	ldr	r3, [r5, #0]
 801bdf0:	b103      	cbz	r3, 801bdf4 <_kill_r+0x1c>
 801bdf2:	6023      	str	r3, [r4, #0]
 801bdf4:	bd38      	pop	{r3, r4, r5, pc}
 801bdf6:	bf00      	nop
 801bdf8:	2000736c 	.word	0x2000736c

0801bdfc <_getpid_r>:
 801bdfc:	f7e7 bdca 	b.w	8003994 <_getpid>

0801be00 <_init>:
 801be00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801be02:	bf00      	nop
 801be04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801be06:	bc08      	pop	{r3}
 801be08:	469e      	mov	lr, r3
 801be0a:	4770      	bx	lr

0801be0c <_fini>:
 801be0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801be0e:	bf00      	nop
 801be10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801be12:	bc08      	pop	{r3}
 801be14:	469e      	mov	lr, r3
 801be16:	4770      	bx	lr

0801be18 <__init_synthesiser_veneer>:
 801be18:	f85f f000 	ldr.w	pc, [pc]	; 801be1c <__init_synthesiser_veneer+0x4>
 801be1c:	00000849 	.word	0x00000849

0801be20 <__start_pop_veneer>:
 801be20:	f85f f000 	ldr.w	pc, [pc]	; 801be24 <__start_pop_veneer+0x4>
 801be24:	00001a71 	.word	0x00001a71

0801be28 <__MW_update_veneer>:
 801be28:	f85f f000 	ldr.w	pc, [pc]	; 801be2c <__MW_update_veneer+0x4>
 801be2c:	0000151d 	.word	0x0000151d

0801be30 <__stop_pop_veneer>:
 801be30:	f85f f000 	ldr.w	pc, [pc]	; 801be34 <__stop_pop_veneer+0x4>
 801be34:	00001acd 	.word	0x00001acd

0801be38 <__measure_POP_cycle_time_veneer>:
 801be38:	f85f f000 	ldr.w	pc, [pc]	; 801be3c <__measure_POP_cycle_time_veneer+0x4>
 801be3c:	00000605 	.word	0x00000605

0801be40 <__timer_delay_veneer>:
 801be40:	f85f f000 	ldr.w	pc, [pc]	; 801be44 <__timer_delay_veneer+0x4>
 801be44:	00001a45 	.word	0x00001a45

0801be48 <__start_laser_ramp_veneer>:
 801be48:	f85f f000 	ldr.w	pc, [pc]	; 801be4c <__start_laser_ramp_veneer+0x4>
 801be4c:	00000081 	.word	0x00000081

0801be50 <__laser_update_veneer>:
 801be50:	f85f f000 	ldr.w	pc, [pc]	; 801be54 <__laser_update_veneer+0x4>
 801be54:	00000135 	.word	0x00000135

0801be58 <__calc_fixed_time_MW_sweep_veneer>:
 801be58:	f85f f000 	ldr.w	pc, [pc]	; 801be5c <__calc_fixed_time_MW_sweep_veneer+0x4>
 801be5c:	00000f59 	.word	0x00000f59
