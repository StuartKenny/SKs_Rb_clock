
atomic_clock.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .itcm         00000b10  00000000  08000298  00020000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00019bc8  08000db0  08000db0  00020db0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .user_flash   00000000  08100000  08100000  000402e8  2**0
                  CONTENTS
  4 .rodata       000033b8  0801a978  0801a978  0003a978  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .ARM          00000008  0801dd30  0801dd30  0003dd30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .init_array   00000004  0801dd38  0801dd38  0003dd38  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801dd3c  0801dd3c  0003dd3c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000228  20000000  0801dd40  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 00000060  20000228  0801df68  00040228  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 00000060  20000288  0801dfc8  00040288  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          00007f98  200002e8  0801e028  000402e8  2**2
                  ALLOC
 12 ._user_heap_stack 00000600  20008280  0801e028  00048280  2**0
                  ALLOC
 13 .ARM.attributes 0000002e  00000000  00000000  000402e8  2**0
                  CONTENTS, READONLY
 14 .comment      00000043  00000000  00000000  00040316  2**0
                  CONTENTS, READONLY
 15 .debug_info   00038752  00000000  00000000  00040359  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_abbrev 000073ea  00000000  00000000  00078aab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 00002958  00000000  00000000  0007fe98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_rnglists 000020df  00000000  00000000  000827f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  00011b6d  00000000  00000000  000848cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line   000402f8  00000000  00000000  0009643c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_str    001a906f  00000000  00000000  000d6734  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_frame  0000be70  00000000  00000000  0027f7a4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 00000051  00000000  00000000  0028b614  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .itcm:

00000000 <synth_writereg>:
extern uint32_t start_timer(TIM_TypeDef * timer);
extern uint32_t stop_timer(TIM_TypeDef * timer);
extern void timer_delay(TIM_TypeDef *timer, uint32_t delay_us);
extern void Error_Handler(void);

static uint32_t synth_writereg(const uint32_t data, const uint32_t reg_address, const uint32_t chip_address, const bool verify) {
   0:	b580      	push	{r7, lr}
   2:	b08a      	sub	sp, #40	; 0x28
   4:	af00      	add	r7, sp, #0
   6:	60f8      	str	r0, [r7, #12]
   8:	60b9      	str	r1, [r7, #8]
   a:	607a      	str	r2, [r7, #4]
   c:	70fb      	strb	r3, [r7, #3]

	uint32_t read_data = 0;
   e:	2300      	movs	r3, #0
  10:	627b      	str	r3, [r7, #36]	; 0x24
	const uint32_t write_data = (data << 8) | (reg_address << 3) | chip_address; // This is what we will write, 32 bits in total.
  12:	68fb      	ldr	r3, [r7, #12]
  14:	021a      	lsls	r2, r3, #8
  16:	68bb      	ldr	r3, [r7, #8]
  18:	00db      	lsls	r3, r3, #3
  1a:	4313      	orrs	r3, r2
  1c:	687a      	ldr	r2, [r7, #4]
  1e:	4313      	orrs	r3, r2
  20:	61fb      	str	r3, [r7, #28]
#ifdef SPI_DEBUG
	printf("SPI BYTES WRITTEN: 0x%X \r\n", write_data);
#endif
	HAL_GPIO_WritePin(SCLK_GPIO_Port, SCLK_Pin, 0);
  22:	2200      	movs	r2, #0
  24:	f44f 7180 	mov.w	r1, #256	; 0x100
  28:	4830      	ldr	r0, [pc, #192]	; (ec <synth_writereg+0xec>)
  2a:	f000 fd55 	bl	ad8 <__HAL_GPIO_WritePin_veneer>
	HAL_GPIO_WritePin(SEN_GPIO_Port, SEN_Pin, 0); // Take SEN low to indicate we are sending data
  2e:	2200      	movs	r2, #0
  30:	f44f 6100 	mov.w	r1, #2048	; 0x800
  34:	482d      	ldr	r0, [pc, #180]	; (ec <synth_writereg+0xec>)
  36:	f000 fd4f 	bl	ad8 <__HAL_GPIO_WritePin_veneer>

	/* Clock in the data */
	for (uint32_t i = 0; i < SYNTH_SPI_BITS; i++) {
  3a:	2300      	movs	r3, #0
  3c:	623b      	str	r3, [r7, #32]
  3e:	e036      	b.n	ae <synth_writereg+0xae>

		/* Data written on the rising edge */
		uint32_t bit = (SYNTH_SPI_BITS - 1 - i);
  40:	2220      	movs	r2, #32
  42:	6a3b      	ldr	r3, [r7, #32]
  44:	1ad3      	subs	r3, r2, r3
  46:	3b01      	subs	r3, #1
  48:	617b      	str	r3, [r7, #20]
		HAL_GPIO_WritePin(MOSI_GPIO_Port, MOSI_Pin, !!(write_data & (1 << bit)));
  4a:	2201      	movs	r2, #1
  4c:	697b      	ldr	r3, [r7, #20]
  4e:	fa02 f303 	lsl.w	r3, r2, r3
  52:	461a      	mov	r2, r3
  54:	69fb      	ldr	r3, [r7, #28]
  56:	4013      	ands	r3, r2
  58:	2b00      	cmp	r3, #0
  5a:	bf14      	ite	ne
  5c:	2301      	movne	r3, #1
  5e:	2300      	moveq	r3, #0
  60:	b2db      	uxtb	r3, r3
  62:	461a      	mov	r2, r3
  64:	f44f 7100 	mov.w	r1, #512	; 0x200
  68:	4820      	ldr	r0, [pc, #128]	; (ec <synth_writereg+0xec>)
  6a:	f000 fd35 	bl	ad8 <__HAL_GPIO_WritePin_veneer>
		HAL_GPIO_WritePin(SCLK_GPIO_Port, SCLK_Pin, 1);
  6e:	2201      	movs	r2, #1
  70:	f44f 7180 	mov.w	r1, #256	; 0x100
  74:	481d      	ldr	r0, [pc, #116]	; (ec <synth_writereg+0xec>)
  76:	f000 fd2f 	bl	ad8 <__HAL_GPIO_WritePin_veneer>
		HAL_GPIO_WritePin(SCLK_GPIO_Port, SCLK_Pin, 0);
  7a:	2200      	movs	r2, #0
  7c:	f44f 7180 	mov.w	r1, #256	; 0x100
  80:	481a      	ldr	r0, [pc, #104]	; (ec <synth_writereg+0xec>)
  82:	f000 fd29 	bl	ad8 <__HAL_GPIO_WritePin_veneer>

		/* Data read on the falling edge */
		read_data = read_data
				| (HAL_GPIO_ReadPin(MISO_GPIO_Port, MISO_Pin)
  86:	f44f 6180 	mov.w	r1, #1024	; 0x400
  8a:	4818      	ldr	r0, [pc, #96]	; (ec <synth_writereg+0xec>)
  8c:	f000 fd20 	bl	ad0 <__HAL_GPIO_ReadPin_veneer>
  90:	4603      	mov	r3, r0
  92:	4619      	mov	r1, r3
						<< (SYNTH_SPI_BITS - 1 - i));
  94:	2220      	movs	r2, #32
  96:	6a3b      	ldr	r3, [r7, #32]
  98:	1ad3      	subs	r3, r2, r3
  9a:	3b01      	subs	r3, #1
  9c:	fa01 f303 	lsl.w	r3, r1, r3
  a0:	461a      	mov	r2, r3
		read_data = read_data
  a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  a4:	4313      	orrs	r3, r2
  a6:	627b      	str	r3, [r7, #36]	; 0x24
	for (uint32_t i = 0; i < SYNTH_SPI_BITS; i++) {
  a8:	6a3b      	ldr	r3, [r7, #32]
  aa:	3301      	adds	r3, #1
  ac:	623b      	str	r3, [r7, #32]
  ae:	2220      	movs	r2, #32
  b0:	6a3b      	ldr	r3, [r7, #32]
  b2:	4293      	cmp	r3, r2
  b4:	d3c4      	bcc.n	40 <synth_writereg+0x40>
	}

	HAL_GPIO_WritePin(SEN_GPIO_Port, SEN_Pin, 1); // Assert the SEN line to register the transmitted data
  b6:	2201      	movs	r2, #1
  b8:	f44f 6100 	mov.w	r1, #2048	; 0x800
  bc:	480b      	ldr	r0, [pc, #44]	; (ec <synth_writereg+0xec>)
  be:	f000 fd0b 	bl	ad8 <__HAL_GPIO_WritePin_veneer>

	if (verify) {
  c2:	78fb      	ldrb	r3, [r7, #3]
  c4:	2b00      	cmp	r3, #0
  c6:	d00c      	beq.n	e2 <synth_writereg+0xe2>
		const uint32_t verify_data = synth_readreg(reg_address); // Data returned on the second cycle
  c8:	68b8      	ldr	r0, [r7, #8]
  ca:	f000 f813 	bl	f4 <synth_readreg>
  ce:	61b8      	str	r0, [r7, #24]
		if (verify_data != data) {
  d0:	69ba      	ldr	r2, [r7, #24]
  d2:	68fb      	ldr	r3, [r7, #12]
  d4:	429a      	cmp	r2, r3
  d6:	d004      	beq.n	e2 <synth_writereg+0xe2>
			printf("SPI transmission error!\n");
  d8:	4805      	ldr	r0, [pc, #20]	; (f0 <synth_writereg+0xf0>)
  da:	f000 fd15 	bl	b08 <__puts_veneer>
			Error_Handler(); // We enter an infinite loop here
  de:	f000 fcf3 	bl	ac8 <__Error_Handler_veneer>
		}
	}

	return read_data;
  e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
  e4:	4618      	mov	r0, r3
  e6:	3728      	adds	r7, #40	; 0x28
  e8:	46bd      	mov	sp, r7
  ea:	bd80      	pop	{r7, pc}
  ec:	58020800 	.word	0x58020800
  f0:	0801abdc 	.word	0x0801abdc

000000f4 <synth_readreg>:

static uint32_t synth_readreg(const uint32_t reg_address){
  f4:	b580      	push	{r7, lr}
  f6:	b084      	sub	sp, #16
  f8:	af00      	add	r7, sp, #0
  fa:	6078      	str	r0, [r7, #4]

    synth_writereg(reg_address, 0x0, 0x0, DONT_VERIFY); // First cycle to send the read address
  fc:	2300      	movs	r3, #0
  fe:	2200      	movs	r2, #0
 100:	2100      	movs	r1, #0
 102:	6878      	ldr	r0, [r7, #4]
 104:	f7ff ff7c 	bl	0 <synth_writereg>
    const uint32_t read_data = synth_writereg(reg_address, 0x0, 0x0, DONT_VERIFY);  // Data returned on the second cycle
 108:	2300      	movs	r3, #0
 10a:	2200      	movs	r2, #0
 10c:	2100      	movs	r1, #0
 10e:	6878      	ldr	r0, [r7, #4]
 110:	f7ff ff76 	bl	0 <synth_writereg>
 114:	60f8      	str	r0, [r7, #12]

    return (read_data >> 8); // We only care about the first 24 bits returned.
 116:	68fb      	ldr	r3, [r7, #12]
 118:	0a1b      	lsrs	r3, r3, #8

}
 11a:	4618      	mov	r0, r3
 11c:	3710      	adds	r7, #16
 11e:	46bd      	mov	sp, r7
 120:	bd80      	pop	{r7, pc}

00000122 <set_MW_power>:

/* Program LO2 output gain */
uint32_t set_MW_power (const uint8_t mw_power) {
 122:	b580      	push	{r7, lr}
 124:	b084      	sub	sp, #16
 126:	af00      	add	r7, sp, #0
 128:	4603      	mov	r3, r0
 12a:	71fb      	strb	r3, [r7, #7]
	if (mw_power > 3) {//check that LO2GAIN is an integer from 0 to 3 inclusive
 12c:	79fb      	ldrb	r3, [r7, #7]
 12e:	2b03      	cmp	r3, #3
 130:	d904      	bls.n	13c <set_MW_power+0x1a>
		printf("illegal mw_power - must be an integer from 0 to 3!\n");
 132:	4811      	ldr	r0, [pc, #68]	; (178 <set_MW_power+0x56>)
 134:	f000 fce8 	bl	b08 <__puts_veneer>
		Error_Handler(); // We enter an infinite loop here
 138:	f000 fcc6 	bl	ac8 <__Error_Handler_veneer>
	}
	uint32_t read_data = synth_readreg(GAIN_DIVIDER_REGISTER); // Get the current value.
 13c:	2016      	movs	r0, #22
 13e:	f7ff ffd9 	bl	f4 <synth_readreg>
 142:	60f8      	str	r0, [r7, #12]
	read_data &= 0xFFFFFCFF; 		// Zero bits 8:9.
 144:	68fb      	ldr	r3, [r7, #12]
 146:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 14a:	60fb      	str	r3, [r7, #12]
	read_data |= (mw_power << 8);	// Set LO2GAIN value.
 14c:	79fb      	ldrb	r3, [r7, #7]
 14e:	021b      	lsls	r3, r3, #8
 150:	461a      	mov	r2, r3
 152:	68fb      	ldr	r3, [r7, #12]
 154:	4313      	orrs	r3, r2
 156:	60fb      	str	r3, [r7, #12]
	synth_writereg(read_data, GAIN_DIVIDER_REGISTER, 0x0, VERIFY); // Update the VCO divide register.
 158:	2301      	movs	r3, #1
 15a:	2200      	movs	r2, #0
 15c:	2116      	movs	r1, #22
 15e:	68f8      	ldr	r0, [r7, #12]
 160:	f7ff ff4e 	bl	0 <synth_writereg>
	#ifdef MW_VERBOSE
		printf("PROGRAMMED GAIN DIVIDER REGISTER: 0x%lX \r\n", read_data);
	#endif
	printf("LO2 gain setting: %u \r\n", mw_power);
 164:	79fb      	ldrb	r3, [r7, #7]
 166:	4619      	mov	r1, r3
 168:	4804      	ldr	r0, [pc, #16]	; (17c <set_MW_power+0x5a>)
 16a:	f000 fcc9 	bl	b00 <__printf_veneer>
	return SUCCESS;
 16e:	2300      	movs	r3, #0
}
 170:	4618      	mov	r0, r3
 172:	3710      	adds	r7, #16
 174:	46bd      	mov	sp, r7
 176:	bd80      	pop	{r7, pc}
 178:	0801abf4 	.word	0x0801abf4
 17c:	0801ac28 	.word	0x0801ac28

00000180 <init_synthesiser>:

uint32_t init_synthesiser(const uint8_t mw_power) {
 180:	b580      	push	{r7, lr}
 182:	b084      	sub	sp, #16
 184:	af00      	add	r7, sp, #0
 186:	4603      	mov	r3, r0
 188:	71fb      	strb	r3, [r7, #7]

	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET); // Turn off the amber lock LED
 18a:	2200      	movs	r2, #0
 18c:	2102      	movs	r1, #2
 18e:	4854      	ldr	r0, [pc, #336]	; (2e0 <_Min_Heap_Size+0xe0>)
 190:	f000 fca2 	bl	ad8 <__HAL_GPIO_WritePin_veneer>
	HAL_GPIO_WritePin(SCOPE_TRIG_OUT_GPIO_Port, SCOPE_TRIG_OUT_Pin, GPIO_PIN_SET); // Sets trigger output high
 194:	2201      	movs	r2, #1
 196:	2101      	movs	r1, #1
 198:	4852      	ldr	r0, [pc, #328]	; (2e4 <_Min_Heap_Size+0xe4>)
 19a:	f000 fc9d 	bl	ad8 <__HAL_GPIO_WritePin_veneer>

	HAL_GPIO_WritePin(SCLK_GPIO_Port, SCLK_Pin, 0);
 19e:	2200      	movs	r2, #0
 1a0:	f44f 7180 	mov.w	r1, #256	; 0x100
 1a4:	4850      	ldr	r0, [pc, #320]	; (2e8 <_Min_Heap_Size+0xe8>)
 1a6:	f000 fc97 	bl	ad8 <__HAL_GPIO_WritePin_veneer>
	HAL_GPIO_WritePin(SEN_GPIO_Port, SEN_Pin, 1);
 1aa:	2201      	movs	r2, #1
 1ac:	f44f 6100 	mov.w	r1, #2048	; 0x800
 1b0:	484d      	ldr	r0, [pc, #308]	; (2e8 <_Min_Heap_Size+0xe8>)
 1b2:	f000 fc91 	bl	ad8 <__HAL_GPIO_WritePin_veneer>

	HAL_GPIO_WritePin(REG_EN_GPIO_Port, REG_EN_Pin, 1); // Enable the main regulator.
 1b6:	2201      	movs	r2, #1
 1b8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 1bc:	484a      	ldr	r0, [pc, #296]	; (2e8 <_Min_Heap_Size+0xe8>)
 1be:	f000 fc8b 	bl	ad8 <__HAL_GPIO_WritePin_veneer>

	HAL_Delay(100); // Wait 100 ms for the supply to stabilise.
 1c2:	2064      	movs	r0, #100	; 0x64
 1c4:	f000 fc98 	bl	af8 <__HAL_Delay_veneer>

	synth_writereg(0x1UL << 5, OPEN_MODE_READ_ADDRESS, 0x0, DONT_VERIFY); // Soft reset.
 1c8:	2300      	movs	r3, #0
 1ca:	2200      	movs	r2, #0
 1cc:	2100      	movs	r1, #0
 1ce:	2020      	movs	r0, #32
 1d0:	f7ff ff16 	bl	0 <synth_writereg>
	synth_writereg(0x41BFFF, ANALOG_EN_REGISTER, 0x0, VERIFY); // Set the SDO output level to 3.3 Volts
 1d4:	2301      	movs	r3, #1
 1d6:	2200      	movs	r2, #0
 1d8:	2108      	movs	r1, #8
 1da:	4844      	ldr	r0, [pc, #272]	; (2ec <_Min_Heap_Size+0xec>)
 1dc:	f7ff ff10 	bl	0 <synth_writereg>

	uint32_t read_data = synth_readreg(ID_REGISTER); // Read the ID register to check the chip is communicating
 1e0:	2000      	movs	r0, #0
 1e2:	f7ff ff87 	bl	f4 <synth_readreg>
 1e6:	60f8      	str	r0, [r7, #12]
	/* Check we have the correct ID */
	if (read_data != SYNTH_ID) {
 1e8:	4a41      	ldr	r2, [pc, #260]	; (2f0 <_Min_Heap_Size+0xf0>)
 1ea:	68fb      	ldr	r3, [r7, #12]
 1ec:	4293      	cmp	r3, r2
 1ee:	d00a      	beq.n	206 <_Min_Heap_Size+0x6>
		HAL_GPIO_WritePin(REG_EN_GPIO_Port, REG_EN_Pin, 0); // Disable the main regulator.
 1f0:	2200      	movs	r2, #0
 1f2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 1f6:	483c      	ldr	r0, [pc, #240]	; (2e8 <_Min_Heap_Size+0xe8>)
 1f8:	f000 fc6e 	bl	ad8 <__HAL_GPIO_WritePin_veneer>
		printf("Incorrect synthesiser ID!\r\n");
 1fc:	483d      	ldr	r0, [pc, #244]	; (2f4 <_Min_Heap_Size+0xf4>)
 1fe:	f000 fc83 	bl	b08 <__puts_veneer>
		return ERROR;
 202:	2301      	movs	r3, #1
 204:	e062      	b.n	2cc <_Min_Heap_Size+0xcc>
	}

	/* Everything looks good, we can communicate with the chip :-) */
	printf("HMC835 Detected.\r\n");
 206:	483c      	ldr	r0, [pc, #240]	; (2f8 <_Min_Heap_Size+0xf8>)
 208:	f000 fc7e 	bl	b08 <__puts_veneer>

	/* Enables Single-Ended output mode for LO2 output */
	read_data = synth_readreg(MODES_REGISTER); // Get the current value of the modes register
 20c:	2017      	movs	r0, #23
 20e:	f7ff ff71 	bl	f4 <synth_readreg>
 212:	60f8      	str	r0, [r7, #12]
#ifdef MW_VERBOSE
	printf("READ MODES REGISTER: 0x%lX \r\n", read_data);
#endif
	read_data |= (0x1UL << 9);     // Enable single ended output for LO2 (LO2_P)
 214:	68fb      	ldr	r3, [r7, #12]
 216:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 21a:	60fb      	str	r3, [r7, #12]
	read_data  &= ~(!AUTO_MUTE << 7); //can disable auto_mute - see variable declarations
 21c:	2301      	movs	r3, #1
 21e:	f083 0301 	eor.w	r3, r3, #1
 222:	b2db      	uxtb	r3, r3
 224:	01db      	lsls	r3, r3, #7
 226:	43db      	mvns	r3, r3
 228:	461a      	mov	r2, r3
 22a:	68fb      	ldr	r3, [r7, #12]
 22c:	4013      	ands	r3, r2
 22e:	60fb      	str	r3, [r7, #12]
	synth_writereg(read_data, MODES_REGISTER, 0x0, VERIFY); // Send
 230:	2301      	movs	r3, #1
 232:	2200      	movs	r2, #0
 234:	2117      	movs	r1, #23
 236:	68f8      	ldr	r0, [r7, #12]
 238:	f7ff fee2 	bl	0 <synth_writereg>
	//read_data = synth_readreg(LOCK_DETECT_REGISTER); // Get the current value.
	//read_data &= 0xFFFFFFF8; // Zero the first 3 LSBs.
	//read_data |= 0x07;
	//synth_writereg(read_data, LOCK_DETECT_REGISTER, 0x0, VERIFY); // Update the VCO divide register.

	synth_writereg(1, REFDIV_REGISTER, 0x0, VERIFY); // Reference divider setting.
 23c:	2301      	movs	r3, #1
 23e:	2200      	movs	r2, #0
 240:	2102      	movs	r1, #2
 242:	2001      	movs	r0, #1
 244:	f7ff fedc 	bl	0 <synth_writereg>
	printf("PROGRAMMED DIVIDER REGISTER: 0x01 \r\n");
#endif

	/* Lock detect training: This must be done after any change to the PD
	 * reference frequency or after power cycle. */
	read_data = synth_readreg(LOCK_DETECT_REGISTER); // Get contents of lock detect register
 248:	2007      	movs	r0, #7
 24a:	f7ff ff53 	bl	f4 <synth_readreg>
 24e:	60f8      	str	r0, [r7, #12]
#ifdef MW_VERBOSE
	printf("READ LOCK_DETECT_REGISTER: 0x%lX \r\n", read_data);
#endif
	read_data |= (0x1UL << 11);      // Enable lock-detect counters.
 250:	68fb      	ldr	r3, [r7, #12]
 252:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 256:	60fb      	str	r3, [r7, #12]
	read_data |= (0x1UL << 14);      // Enable the lock-detect timer.
 258:	68fb      	ldr	r3, [r7, #12]
 25a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 25e:	60fb      	str	r3, [r7, #12]
	read_data |= (0x1UL << 20);      // Train the lock-detect timer.
 260:	68fb      	ldr	r3, [r7, #12]
 262:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 266:	60fb      	str	r3, [r7, #12]
	synth_writereg(read_data, LOCK_DETECT_REGISTER, 0x0, VERIFY); // Send
 268:	2301      	movs	r3, #1
 26a:	2200      	movs	r2, #0
 26c:	2107      	movs	r1, #7
 26e:	68f8      	ldr	r0, [r7, #12]
 270:	f7ff fec6 	bl	0 <synth_writereg>
#ifdef MW_VERBOSE
	printf("PROGRAMMED LOCK DETECT REGISTER: 0x%lX \r\n", read_data);
#endif
	HAL_Delay(10); // Wait 10 ms for training to complete, not sure if we really need to do this.
 274:	200a      	movs	r0, #10
 276:	f000 fc3f 	bl	af8 <__HAL_Delay_veneer>

	/* Program LO2 output gain */
	if (mw_power > 3) {//check that LO2GAIN is an integer from 0 to 3 inclusive
 27a:	79fb      	ldrb	r3, [r7, #7]
 27c:	2b03      	cmp	r3, #3
 27e:	d904      	bls.n	28a <_Min_Heap_Size+0x8a>
		printf("illegal mw_power - must be an integer from 0 to 3!\n");
 280:	481e      	ldr	r0, [pc, #120]	; (2fc <_Min_Heap_Size+0xfc>)
 282:	f000 fc41 	bl	b08 <__puts_veneer>
		Error_Handler(); // We enter an infinite loop here
 286:	f000 fc1f 	bl	ac8 <__Error_Handler_veneer>
	}
	read_data = synth_readreg(GAIN_DIVIDER_REGISTER); // Get the current value.
 28a:	2016      	movs	r0, #22
 28c:	f7ff ff32 	bl	f4 <synth_readreg>
 290:	60f8      	str	r0, [r7, #12]
	read_data &= 0xFFFFFCFF; 		// Zero bits 8:9.
 292:	68fb      	ldr	r3, [r7, #12]
 294:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 298:	60fb      	str	r3, [r7, #12]
	read_data |= (mw_power << 8);	// Set LO2GAIN value.
 29a:	79fb      	ldrb	r3, [r7, #7]
 29c:	021b      	lsls	r3, r3, #8
 29e:	461a      	mov	r2, r3
 2a0:	68fb      	ldr	r3, [r7, #12]
 2a2:	4313      	orrs	r3, r2
 2a4:	60fb      	str	r3, [r7, #12]
	synth_writereg(read_data, GAIN_DIVIDER_REGISTER, 0x0, VERIFY); // Update the VCO divide register.
 2a6:	2301      	movs	r3, #1
 2a8:	2200      	movs	r2, #0
 2aa:	2116      	movs	r1, #22
 2ac:	68f8      	ldr	r0, [r7, #12]
 2ae:	f7ff fea7 	bl	0 <synth_writereg>
	printf("PROGRAMMED GAIN DIVIDER REGISTER: 0x%lX \r\n", read_data);
	printf("LO2 gain setting: %u \r\n", mw_power);
#endif

	/* Sets output frequency to the hyperfine value */
	set_frequency_hz(HYPERFINE);
 2b2:	ed9f 7b09 	vldr	d7, [pc, #36]	; 2d8 <_Min_Heap_Size+0xd8>
 2b6:	eeb0 0b47 	vmov.f64	d0, d7
 2ba:	f000 f8e3 	bl	484 <set_frequency_hz>
	printf("Single frequency output: %f Hz \r\n", HYPERFINE);
 2be:	a306      	add	r3, pc, #24	; (adr r3, 2d8 <_Min_Heap_Size+0xd8>)
 2c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 2c4:	480e      	ldr	r0, [pc, #56]	; (300 <_Min_Heap_Size+0x100>)
 2c6:	f000 fc1b 	bl	b00 <__printf_veneer>
	return SUCCESS;
 2ca:	2300      	movs	r3, #0
}
 2cc:	4618      	mov	r0, r3
 2ce:	3710      	adds	r7, #16
 2d0:	46bd      	mov	sp, r7
 2d2:	bd80      	pop	{r7, pc}
 2d4:	f3af 8000 	nop.w
 2d8:	6d600000 	.word	0x6d600000
 2dc:	41e69e35 	.word	0x41e69e35
 2e0:	58021000 	.word	0x58021000
 2e4:	58021800 	.word	0x58021800
 2e8:	58020800 	.word	0x58020800
 2ec:	0041bfff 	.word	0x0041bfff
 2f0:	00c7701a 	.word	0x00c7701a
 2f4:	0801ac40 	.word	0x0801ac40
 2f8:	0801ac5c 	.word	0x0801ac5c
 2fc:	0801abf4 	.word	0x0801abf4
 300:	0801ac70 	.word	0x0801ac70

00000304 <poll_until_locked>:

static const bool poll_until_locked(uint32_t timeout) {
 304:	b580      	push	{r7, lr}
 306:	b084      	sub	sp, #16
 308:	af00      	add	r7, sp, #0
 30a:	6078      	str	r0, [r7, #4]

	bool locked = false;
 30c:	2300      	movs	r3, #0
 30e:	73fb      	strb	r3, [r7, #15]

	/* Check for lock */
	uint32_t start = start_timer(FAST_TIMER);
 310:	4b16      	ldr	r3, [pc, #88]	; (36c <poll_until_locked+0x68>)
 312:	681b      	ldr	r3, [r3, #0]
 314:	4618      	mov	r0, r3
 316:	f000 fabd 	bl	894 <start_timer>
 31a:	60b8      	str	r0, [r7, #8]

	while ((FAST_TIMER->CNT - start) < timeout) {
 31c:	e014      	b.n	348 <poll_until_locked+0x44>
		//printf("Debug lock while condition\r\n");
		locked = synth_readreg(GPOLD_REGISTER) & (1UL << 1);
 31e:	2012      	movs	r0, #18
 320:	f7ff fee8 	bl	f4 <synth_readreg>
 324:	4603      	mov	r3, r0
 326:	f003 0302 	and.w	r3, r3, #2
 32a:	2b00      	cmp	r3, #0
 32c:	bf14      	ite	ne
 32e:	2301      	movne	r3, #1
 330:	2300      	moveq	r3, #0
 332:	73fb      	strb	r3, [r7, #15]
		if (locked) {
 334:	7bfb      	ldrb	r3, [r7, #15]
 336:	2b00      	cmp	r3, #0
 338:	d006      	beq.n	348 <poll_until_locked+0x44>
			stop_timer(FAST_TIMER);
 33a:	4b0c      	ldr	r3, [pc, #48]	; (36c <poll_until_locked+0x68>)
 33c:	681b      	ldr	r3, [r3, #0]
 33e:	4618      	mov	r0, r3
 340:	f000 fac6 	bl	8d0 <stop_timer>
			return true;
 344:	2301      	movs	r3, #1
 346:	e00d      	b.n	364 <poll_until_locked+0x60>
	while ((FAST_TIMER->CNT - start) < timeout) {
 348:	4b08      	ldr	r3, [pc, #32]	; (36c <poll_until_locked+0x68>)
 34a:	681b      	ldr	r3, [r3, #0]
 34c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 34e:	68bb      	ldr	r3, [r7, #8]
 350:	1ad3      	subs	r3, r2, r3
 352:	687a      	ldr	r2, [r7, #4]
 354:	429a      	cmp	r2, r3
 356:	d8e2      	bhi.n	31e <poll_until_locked+0x1a>
		}
	}

	stop_timer(FAST_TIMER);
 358:	4b04      	ldr	r3, [pc, #16]	; (36c <poll_until_locked+0x68>)
 35a:	681b      	ldr	r3, [r3, #0]
 35c:	4618      	mov	r0, r3
 35e:	f000 fab7 	bl	8d0 <stop_timer>
	return false;
 362:	2300      	movs	r3, #0
}
 364:	4618      	mov	r0, r3
 366:	3710      	adds	r7, #16
 368:	46bd      	mov	sp, r7
 36a:	bd80      	pop	{r7, pc}
 36c:	2000001c 	.word	0x2000001c

00000370 <lock_status>:

static const bool lock_status(void) {
 370:	b580      	push	{r7, lr}
 372:	b082      	sub	sp, #8
 374:	af00      	add	r7, sp, #0

	bool locked = synth_readreg(GPOLD_REGISTER) & (1UL << 1);
 376:	2012      	movs	r0, #18
 378:	f7ff febc 	bl	f4 <synth_readreg>
 37c:	4603      	mov	r3, r0
 37e:	f003 0302 	and.w	r3, r3, #2
 382:	2b00      	cmp	r3, #0
 384:	bf14      	ite	ne
 386:	2301      	movne	r3, #1
 388:	2300      	moveq	r3, #0
 38a:	71fb      	strb	r3, [r7, #7]
	return locked;
 38c:	79fb      	ldrb	r3, [r7, #7]

}
 38e:	4618      	mov	r0, r3
 390:	3708      	adds	r7, #8
 392:	46bd      	mov	sp, r7
 394:	bd80      	pop	{r7, pc}

00000396 <mute_mw_outputs>:

static void mute_mw_outputs() {
 396:	b580      	push	{r7, lr}
 398:	b082      	sub	sp, #8
 39a:	af00      	add	r7, sp, #0
	uint32_t read_data = 0x0;
 39c:	2300      	movs	r3, #0
 39e:	607b      	str	r3, [r7, #4]

	/* Mute the outputs by setting k value to zero */
	read_data = synth_readreg(GAIN_DIVIDER_REGISTER); // Get the current value.
 3a0:	2016      	movs	r0, #22
 3a2:	f7ff fea7 	bl	f4 <synth_readreg>
 3a6:	6078      	str	r0, [r7, #4]
	read_data &= 0xFFFFFFC0; // Zero the first 6 LSBs (VCO division value - mute).
 3a8:	687b      	ldr	r3, [r7, #4]
 3aa:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 3ae:	607b      	str	r3, [r7, #4]
	synth_writereg(read_data, GAIN_DIVIDER_REGISTER, 0x0, VERIFY); // Update the VCO divide register.
 3b0:	2301      	movs	r3, #1
 3b2:	2200      	movs	r2, #0
 3b4:	2116      	movs	r1, #22
 3b6:	6878      	ldr	r0, [r7, #4]
 3b8:	f7ff fe22 	bl	0 <synth_writereg>
}
 3bc:	bf00      	nop
 3be:	3708      	adds	r7, #8
 3c0:	46bd      	mov	sp, r7
 3c2:	bd80      	pop	{r7, pc}

000003c4 <set_frequency>:

static void set_frequency(const uint32_t integer, const uint32_t fraction, const uint32_t vco_divider, bool mute) {
 3c4:	b580      	push	{r7, lr}
 3c6:	b086      	sub	sp, #24
 3c8:	af00      	add	r7, sp, #0
 3ca:	60f8      	str	r0, [r7, #12]
 3cc:	60b9      	str	r1, [r7, #8]
 3ce:	607a      	str	r2, [r7, #4]
 3d0:	70fb      	strb	r3, [r7, #3]

	static uint32_t last_integer = -1, last_fraction = -1, last_vcodiv = -1;

	uint32_t read_data = 0x0;
 3d2:	2300      	movs	r3, #0
 3d4:	617b      	str	r3, [r7, #20]

	if (mute) {
 3d6:	78fb      	ldrb	r3, [r7, #3]
 3d8:	2b00      	cmp	r3, #0
 3da:	d001      	beq.n	3e0 <set_frequency+0x1c>
		mute_mw_outputs();
 3dc:	f7ff ffdb 	bl	396 <mute_mw_outputs>
	}

	if (last_integer == -1 || (last_integer != integer)) {
 3e0:	4b25      	ldr	r3, [pc, #148]	; (478 <_Min_Stack_Size+0x78>)
 3e2:	681b      	ldr	r3, [r3, #0]
 3e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 3e8:	d004      	beq.n	3f4 <set_frequency+0x30>
 3ea:	4b23      	ldr	r3, [pc, #140]	; (478 <_Min_Stack_Size+0x78>)
 3ec:	681b      	ldr	r3, [r3, #0]
 3ee:	68fa      	ldr	r2, [r7, #12]
 3f0:	429a      	cmp	r2, r3
 3f2:	d008      	beq.n	406 <_Min_Stack_Size+0x6>
		synth_writereg(integer, INTEGER_FREQUENCY_REGISTER, 0x0, VERIFY);   // Integer register.
 3f4:	2301      	movs	r3, #1
 3f6:	2200      	movs	r2, #0
 3f8:	2103      	movs	r1, #3
 3fa:	68f8      	ldr	r0, [r7, #12]
 3fc:	f7ff fe00 	bl	0 <synth_writereg>
		last_integer = integer;
 400:	4a1d      	ldr	r2, [pc, #116]	; (478 <_Min_Stack_Size+0x78>)
 402:	68fb      	ldr	r3, [r7, #12]
 404:	6013      	str	r3, [r2, #0]
	}

	if (last_fraction == -1 || (last_fraction != fraction)) {
 406:	4b1d      	ldr	r3, [pc, #116]	; (47c <_Min_Stack_Size+0x7c>)
 408:	681b      	ldr	r3, [r3, #0]
 40a:	f1b3 3fff 	cmp.w	r3, #4294967295
 40e:	d004      	beq.n	41a <_Min_Stack_Size+0x1a>
 410:	4b1a      	ldr	r3, [pc, #104]	; (47c <_Min_Stack_Size+0x7c>)
 412:	681b      	ldr	r3, [r3, #0]
 414:	68ba      	ldr	r2, [r7, #8]
 416:	429a      	cmp	r2, r3
 418:	d008      	beq.n	42c <_Min_Stack_Size+0x2c>
		synth_writereg(fraction, FRACTIONAL_FREQUENCY_REGISTER, 0x0, VERIFY);  // Fractional register.
 41a:	2301      	movs	r3, #1
 41c:	2200      	movs	r2, #0
 41e:	2104      	movs	r1, #4
 420:	68b8      	ldr	r0, [r7, #8]
 422:	f7ff fded 	bl	0 <synth_writereg>
		last_fraction = fraction;
 426:	4a15      	ldr	r2, [pc, #84]	; (47c <_Min_Stack_Size+0x7c>)
 428:	68bb      	ldr	r3, [r7, #8]
 42a:	6013      	str	r3, [r2, #0]
	}

	if (last_vcodiv == -1 || (last_vcodiv != vco_divider) || mute) {
 42c:	4b14      	ldr	r3, [pc, #80]	; (480 <_Min_Stack_Size+0x80>)
 42e:	681b      	ldr	r3, [r3, #0]
 430:	f1b3 3fff 	cmp.w	r3, #4294967295
 434:	d007      	beq.n	446 <_Min_Stack_Size+0x46>
 436:	4b12      	ldr	r3, [pc, #72]	; (480 <_Min_Stack_Size+0x80>)
 438:	681b      	ldr	r3, [r3, #0]
 43a:	687a      	ldr	r2, [r7, #4]
 43c:	429a      	cmp	r2, r3
 43e:	d102      	bne.n	446 <_Min_Stack_Size+0x46>
 440:	78fb      	ldrb	r3, [r7, #3]
 442:	2b00      	cmp	r3, #0
 444:	d014      	beq.n	470 <_Min_Stack_Size+0x70>
		read_data = synth_readreg(GAIN_DIVIDER_REGISTER); // Get the current value.
 446:	2016      	movs	r0, #22
 448:	f7ff fe54 	bl	f4 <synth_readreg>
 44c:	6178      	str	r0, [r7, #20]
		read_data &= 0xFFFFFFC0; // Zero the first 6 LSBs (VCO division value - mute).
 44e:	697b      	ldr	r3, [r7, #20]
 450:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 454:	617b      	str	r3, [r7, #20]
		read_data |= vco_divider; // This will set k which will un-mute the outputs */
 456:	697a      	ldr	r2, [r7, #20]
 458:	687b      	ldr	r3, [r7, #4]
 45a:	4313      	orrs	r3, r2
 45c:	617b      	str	r3, [r7, #20]
		synth_writereg(read_data, GAIN_DIVIDER_REGISTER, 0x0, VERIFY); // Update the VCO divide register.
 45e:	2301      	movs	r3, #1
 460:	2200      	movs	r2, #0
 462:	2116      	movs	r1, #22
 464:	6978      	ldr	r0, [r7, #20]
 466:	f7ff fdcb 	bl	0 <synth_writereg>
		last_vcodiv = vco_divider;
 46a:	4a05      	ldr	r2, [pc, #20]	; (480 <_Min_Stack_Size+0x80>)
 46c:	687b      	ldr	r3, [r7, #4]
 46e:	6013      	str	r3, [r2, #0]
	}

}
 470:	bf00      	nop
 472:	3718      	adds	r7, #24
 474:	46bd      	mov	sp, r7
 476:	bd80      	pop	{r7, pc}
 478:	20000004 	.word	0x20000004
 47c:	20000008 	.word	0x20000008
 480:	2000000c 	.word	0x2000000c

00000484 <set_frequency_hz>:

void set_frequency_hz(const double fo) {
 484:	b580      	push	{r7, lr}
 486:	b088      	sub	sp, #32
 488:	af00      	add	r7, sp, #0
 48a:	ed87 0b00 	vstr	d0, [r7]

	/* For the k divider we need to find the smallest even integer or use a max of 62*/
	uint32_t k = VCO_MAX_FREQ / fo;
 48e:	ed9f 5b3c 	vldr	d5, [pc, #240]	; 580 <set_frequency_hz+0xfc>
 492:	ed97 6b00 	vldr	d6, [r7]
 496:	ee85 7b06 	vdiv.f64	d7, d5, d6
 49a:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 49e:	ee17 3a90 	vmov	r3, s15
 4a2:	61fb      	str	r3, [r7, #28]

	if (k != 1) {
 4a4:	69fb      	ldr	r3, [r7, #28]
 4a6:	2b01      	cmp	r3, #1
 4a8:	d00b      	beq.n	4c2 <set_frequency_hz+0x3e>
		while (k > 62 || k % 2) {
 4aa:	e002      	b.n	4b2 <set_frequency_hz+0x2e>
			k = k - 1;
 4ac:	69fb      	ldr	r3, [r7, #28]
 4ae:	3b01      	subs	r3, #1
 4b0:	61fb      	str	r3, [r7, #28]
		while (k > 62 || k % 2) {
 4b2:	69fb      	ldr	r3, [r7, #28]
 4b4:	2b3e      	cmp	r3, #62	; 0x3e
 4b6:	d8f9      	bhi.n	4ac <set_frequency_hz+0x28>
 4b8:	69fb      	ldr	r3, [r7, #28]
 4ba:	f003 0301 	and.w	r3, r3, #1
 4be:	2b00      	cmp	r3, #0
 4c0:	d1f4      	bne.n	4ac <set_frequency_hz+0x28>
		}
	}

	/* Calculate the N division ratio */
	const double N = ((fo * k) / REF_FREQ);
 4c2:	69fb      	ldr	r3, [r7, #28]
 4c4:	ee07 3a90 	vmov	s15, r3
 4c8:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 4cc:	ed97 7b00 	vldr	d7, [r7]
 4d0:	ee26 6b07 	vmul.f64	d6, d6, d7
 4d4:	ed9f 5b2c 	vldr	d5, [pc, #176]	; 588 <set_frequency_hz+0x104>
 4d8:	ee86 7b05 	vdiv.f64	d7, d6, d5
 4dc:	ed87 7b04 	vstr	d7, [r7, #16]

	/* Extract the fractional and integer parts */
	const uint32_t NINT = N;
 4e0:	ed97 7b04 	vldr	d7, [r7, #16]
 4e4:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 4e8:	ee17 3a90 	vmov	r3, s15
 4ec:	60fb      	str	r3, [r7, #12]
	const uint32_t NFRAC = ((N - NINT) * (1 << 24)) + 0.5;
 4ee:	68fb      	ldr	r3, [r7, #12]
 4f0:	ee07 3a90 	vmov	s15, r3
 4f4:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 4f8:	ed97 6b04 	vldr	d6, [r7, #16]
 4fc:	ee36 7b47 	vsub.f64	d7, d6, d7
 500:	ed9f 6b23 	vldr	d6, [pc, #140]	; 590 <set_frequency_hz+0x10c>
 504:	ee27 7b06 	vmul.f64	d7, d7, d6
 508:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
 50c:	ee37 7b06 	vadd.f64	d7, d7, d6
 510:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 514:	ee17 3a90 	vmov	r3, s15
 518:	60bb      	str	r3, [r7, #8]
		printf("Failed to establish synthesiser frequency accurately\r\n");
		Error_Handler();
	}
#endif

	HAL_GPIO_WritePin(MW_INVALID_GPIO_Port, MW_INVALID_Pin, GPIO_PIN_SET); //Sets MW_invalid pin high
 51a:	2201      	movs	r2, #1
 51c:	2102      	movs	r1, #2
 51e:	481e      	ldr	r0, [pc, #120]	; (598 <set_frequency_hz+0x114>)
 520:	f000 fada 	bl	ad8 <__HAL_GPIO_WritePin_veneer>
	set_frequency(NINT, NFRAC, k, MANUAL_MUTE); //Sets only the necessary Hittite registers
 524:	2301      	movs	r3, #1
 526:	69fa      	ldr	r2, [r7, #28]
 528:	68b9      	ldr	r1, [r7, #8]
 52a:	68f8      	ldr	r0, [r7, #12]
 52c:	f7ff ff4a 	bl	3c4 <set_frequency>

	//MW stabilisation delay and check for lock
	timer_delay(FAST_TIMER, MW_STABILISE_TIME_US);
 530:	4b1a      	ldr	r3, [pc, #104]	; (59c <set_frequency_hz+0x118>)
 532:	681b      	ldr	r3, [r3, #0]
 534:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 538:	4611      	mov	r1, r2
 53a:	4618      	mov	r0, r3
 53c:	f000 f9da 	bl	8f4 <timer_delay>
	//if (!poll_until_locked(LOCK_WAIT_US)) {
	if (!lock_status()) {
 540:	f7ff ff16 	bl	370 <lock_status>
 544:	4603      	mov	r3, r0
 546:	f083 0301 	eor.w	r3, r3, #1
 54a:	b2db      	uxtb	r3, r3
 54c:	2b00      	cmp	r3, #0
 54e:	d011      	beq.n	574 <set_frequency_hz+0xf0>
		HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET); //turn off amber LED
 550:	2200      	movs	r2, #0
 552:	2102      	movs	r1, #2
 554:	4812      	ldr	r0, [pc, #72]	; (5a0 <set_frequency_hz+0x11c>)
 556:	f000 fabf 	bl	ad8 <__HAL_GPIO_WritePin_veneer>
		printf("Failed to establish MW Lock within %ld us of setting frequency!\r\n", MW_STABILISE_TIME_US);
 55a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 55e:	4619      	mov	r1, r3
 560:	4810      	ldr	r0, [pc, #64]	; (5a4 <set_frequency_hz+0x120>)
 562:	f000 facd 	bl	b00 <__printf_veneer>
#ifdef HALT_ON_LOSS_OF_LOCK
		Error_Handler();
 566:	f000 faaf 	bl	ac8 <__Error_Handler_veneer>
#endif //HALT_ON_LOSS_OF_LOCK
		HAL_GPIO_WritePin(MW_INVALID_GPIO_Port, MW_INVALID_Pin, GPIO_PIN_RESET); //Sets MW_invalid pin low
 56a:	2200      	movs	r2, #0
 56c:	2102      	movs	r1, #2
 56e:	480a      	ldr	r0, [pc, #40]	; (598 <set_frequency_hz+0x114>)
 570:	f000 fab2 	bl	ad8 <__HAL_GPIO_WritePin_veneer>
	}

}
 574:	bf00      	nop
 576:	3720      	adds	r7, #32
 578:	46bd      	mov	sp, r7
 57a:	bd80      	pop	{r7, pc}
 57c:	f3af 8000 	nop.w
 580:	20000000 	.word	0x20000000
 584:	41ee8c21 	.word	0x41ee8c21
 588:	00000000 	.word	0x00000000
 58c:	4187d784 	.word	0x4187d784
 590:	00000000 	.word	0x00000000
 594:	41700000 	.word	0x41700000
 598:	58020400 	.word	0x58020400
 59c:	2000001c 	.word	0x2000001c
 5a0:	58021000 	.word	0x58021000
 5a4:	0801ac94 	.word	0x0801ac94

000005a8 <run_sweep>:

void run_sweep() {
 5a8:	b580      	push	{r7, lr}
 5aa:	b084      	sub	sp, #16
 5ac:	af00      	add	r7, sp, #0

	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET); // Assume we are locked, the LED will be disabled if lock fails.
 5ae:	2201      	movs	r2, #1
 5b0:	2102      	movs	r1, #2
 5b2:	482f      	ldr	r0, [pc, #188]	; (670 <run_sweep+0xc8>)
 5b4:	f000 fa90 	bl	ad8 <__HAL_GPIO_WritePin_veneer>
#endif

	//__disable_irq(); //Simon's code had IRQs disabled

	/* Output used for triggering external scope */
	HAL_GPIO_WritePin(SCOPE_TRIG_OUT_GPIO_Port, SCOPE_TRIG_OUT_Pin, GPIO_PIN_RESET); // Sets trigger output low
 5b8:	2200      	movs	r2, #0
 5ba:	2101      	movs	r1, #1
 5bc:	482d      	ldr	r0, [pc, #180]	; (674 <run_sweep+0xcc>)
 5be:	f000 fa8b 	bl	ad8 <__HAL_GPIO_WritePin_veneer>
#ifdef MW_VERBOSE
	printf("Setting trigger output low \r\n");
#endif

	for (uint32_t i = 0; i < num_points; i++) {
 5c2:	2300      	movs	r3, #0
 5c4:	60fb      	str	r3, [r7, #12]
 5c6:	e039      	b.n	63c <run_sweep+0x94>

		double fo = start_freq + (i * sweep_settings.step_size);
 5c8:	68fb      	ldr	r3, [r7, #12]
 5ca:	ee07 3a90 	vmov	s15, r3
 5ce:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 5d2:	ed9f 6b25 	vldr	d6, [pc, #148]	; 668 <run_sweep+0xc0>
 5d6:	ee27 6b06 	vmul.f64	d6, d7, d6
 5da:	4b27      	ldr	r3, [pc, #156]	; (678 <run_sweep+0xd0>)
 5dc:	ed93 7b00 	vldr	d7, [r3]
 5e0:	ee36 7b07 	vadd.f64	d7, d6, d7
 5e4:	ed87 7b00 	vstr	d7, [r7]
		set_frequency_hz(fo);
 5e8:	ed97 0b00 	vldr	d0, [r7]
 5ec:	f7ff ff4a 	bl	484 <set_frequency_hz>
			printf("Failure to program value to DAC \r\n");
			Error_Handler();
		}
#endif

		timer_delay(FAST_TIMER, DWELL_TIME_US);
 5f0:	4b22      	ldr	r3, [pc, #136]	; (67c <run_sweep+0xd4>)
 5f2:	681b      	ldr	r3, [r3, #0]
 5f4:	f240 429c 	movw	r2, #1180	; 0x49c
 5f8:	4611      	mov	r1, r2
 5fa:	4618      	mov	r0, r3
 5fc:	f000 f97a 	bl	8f4 <timer_delay>

		blue_button_status = HAL_GPIO_ReadPin(BLUE_BUTTON_GPIO_Port, BLUE_BUTTON_Pin);
 600:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 604:	481e      	ldr	r0, [pc, #120]	; (680 <run_sweep+0xd8>)
 606:	f000 fa63 	bl	ad0 <__HAL_GPIO_ReadPin_veneer>
 60a:	4603      	mov	r3, r0
 60c:	2b00      	cmp	r3, #0
 60e:	bf14      	ite	ne
 610:	2301      	movne	r3, #1
 612:	2300      	moveq	r3, #0
 614:	b2da      	uxtb	r2, r3
 616:	4b1b      	ldr	r3, [pc, #108]	; (684 <run_sweep+0xdc>)
 618:	701a      	strb	r2, [r3, #0]
		if (blue_button_status) {// If blue button is pressed
 61a:	4b1a      	ldr	r3, [pc, #104]	; (684 <run_sweep+0xdc>)
 61c:	781b      	ldrb	r3, [r3, #0]
 61e:	b2db      	uxtb	r3, r3
 620:	2b00      	cmp	r3, #0
 622:	d008      	beq.n	636 <run_sweep+0x8e>
			printf("Terminating sweep early as blue button pressed \r\n");
 624:	4818      	ldr	r0, [pc, #96]	; (688 <run_sweep+0xe0>)
 626:	f000 fa6f 	bl	b08 <__puts_veneer>
			HAL_GPIO_WritePin(SCOPE_TRIG_OUT_GPIO_Port, SCOPE_TRIG_OUT_Pin, GPIO_PIN_SET); // Sets trigger output high
 62a:	2201      	movs	r2, #1
 62c:	2101      	movs	r1, #1
 62e:	4811      	ldr	r0, [pc, #68]	; (674 <run_sweep+0xcc>)
 630:	f000 fa52 	bl	ad8 <__HAL_GPIO_WritePin_veneer>
			break;
 634:	e007      	b.n	646 <run_sweep+0x9e>
	for (uint32_t i = 0; i < num_points; i++) {
 636:	68fb      	ldr	r3, [r7, #12]
 638:	3301      	adds	r3, #1
 63a:	60fb      	str	r3, [r7, #12]
 63c:	4b13      	ldr	r3, [pc, #76]	; (68c <run_sweep+0xe4>)
 63e:	681b      	ldr	r3, [r3, #0]
 640:	68fa      	ldr	r2, [r7, #12]
 642:	429a      	cmp	r2, r3
 644:	d3c0      	bcc.n	5c8 <run_sweep+0x20>
		}
	}

	//__enable_irq(); //Simon's code had IRQs disabled

	HAL_GPIO_WritePin(SCOPE_TRIG_OUT_GPIO_Port, SCOPE_TRIG_OUT_Pin, GPIO_PIN_SET); // Sets trigger output high
 646:	2201      	movs	r2, #1
 648:	2101      	movs	r1, #1
 64a:	480a      	ldr	r0, [pc, #40]	; (674 <run_sweep+0xcc>)
 64c:	f000 fa44 	bl	ad8 <__HAL_GPIO_WritePin_veneer>
	printf("Sweep complete: %lu points\r\n", num_points);
 650:	4b0e      	ldr	r3, [pc, #56]	; (68c <run_sweep+0xe4>)
 652:	681b      	ldr	r3, [r3, #0]
 654:	4619      	mov	r1, r3
 656:	480e      	ldr	r0, [pc, #56]	; (690 <run_sweep+0xe8>)
 658:	f000 fa52 	bl	b00 <__printf_veneer>
	/* Zero and stop the DAC */
	HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R, 0);
	//HAL_DAC_Stop(&hdac1, DAC_CHANNEL_1);
#endif

}
 65c:	bf00      	nop
 65e:	3710      	adds	r7, #16
 660:	46bd      	mov	sp, r7
 662:	bd80      	pop	{r7, pc}
 664:	f3af 8000 	nop.w
 668:	00000000 	.word	0x00000000
 66c:	4007d784 	.word	0x4007d784
 670:	58021000 	.word	0x58021000
 674:	58021800 	.word	0x58021800
 678:	0801d830 	.word	0x0801d830
 67c:	2000001c 	.word	0x2000001c
 680:	58020800 	.word	0x58020800
 684:	200005bd 	.word	0x200005bd
 688:	0801acd8 	.word	0x0801acd8
 68c:	0801d838 	.word	0x0801d838
 690:	0801ad0c 	.word	0x0801ad0c

00000694 <MW_frequency_toggle>:

/* Function to check MW settling time
 * Toggles between two MW frequencies
 */
void MW_frequency_toggle (const double f_one, const double f_two) {
 694:	b580      	push	{r7, lr}
 696:	b090      	sub	sp, #64	; 0x40
 698:	af02      	add	r7, sp, #8
 69a:	ed87 0b02 	vstr	d0, [r7, #8]
 69e:	ed87 1b00 	vstr	d1, [r7]
	printf("MW frequency toggling experiment\r\n");
 6a2:	4865      	ldr	r0, [pc, #404]	; (838 <MW_frequency_toggle+0x1a4>)
 6a4:	f000 fa30 	bl	b08 <__puts_veneer>
	printf("Toggling between %f and %f Hz\r\n", f_one, f_two);
 6a8:	e9d7 2300 	ldrd	r2, r3, [r7]
 6ac:	e9cd 2300 	strd	r2, r3, [sp]
 6b0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 6b4:	4861      	ldr	r0, [pc, #388]	; (83c <MW_frequency_toggle+0x1a8>)
 6b6:	f000 fa23 	bl	b00 <__printf_veneer>

	/* For the k divider we need to find the smallest even integer or use a max of 62*/
	uint32_t k_one = VCO_MAX_FREQ / f_one;
 6ba:	ed9f 5b59 	vldr	d5, [pc, #356]	; 820 <MW_frequency_toggle+0x18c>
 6be:	ed97 6b02 	vldr	d6, [r7, #8]
 6c2:	ee85 7b06 	vdiv.f64	d7, d5, d6
 6c6:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 6ca:	ee17 3a90 	vmov	r3, s15
 6ce:	637b      	str	r3, [r7, #52]	; 0x34
	if (k_one != 1) {
 6d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 6d2:	2b01      	cmp	r3, #1
 6d4:	d00b      	beq.n	6ee <MW_frequency_toggle+0x5a>
		while (k_one > 62 || k_one % 2) {
 6d6:	e002      	b.n	6de <MW_frequency_toggle+0x4a>
			k_one--;
 6d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 6da:	3b01      	subs	r3, #1
 6dc:	637b      	str	r3, [r7, #52]	; 0x34
		while (k_one > 62 || k_one % 2) {
 6de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 6e0:	2b3e      	cmp	r3, #62	; 0x3e
 6e2:	d8f9      	bhi.n	6d8 <MW_frequency_toggle+0x44>
 6e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 6e6:	f003 0301 	and.w	r3, r3, #1
 6ea:	2b00      	cmp	r3, #0
 6ec:	d1f4      	bne.n	6d8 <MW_frequency_toggle+0x44>
		}
	}
	uint32_t k_two = VCO_MAX_FREQ / f_two;
 6ee:	ed9f 5b4c 	vldr	d5, [pc, #304]	; 820 <MW_frequency_toggle+0x18c>
 6f2:	ed97 6b00 	vldr	d6, [r7]
 6f6:	ee85 7b06 	vdiv.f64	d7, d5, d6
 6fa:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 6fe:	ee17 3a90 	vmov	r3, s15
 702:	633b      	str	r3, [r7, #48]	; 0x30
	if (k_two != 1) {
 704:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 706:	2b01      	cmp	r3, #1
 708:	d00b      	beq.n	722 <MW_frequency_toggle+0x8e>
		while (k_two > 62 || k_two % 2) {
 70a:	e002      	b.n	712 <MW_frequency_toggle+0x7e>
			k_two--;
 70c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 70e:	3b01      	subs	r3, #1
 710:	633b      	str	r3, [r7, #48]	; 0x30
		while (k_two > 62 || k_two % 2) {
 712:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 714:	2b3e      	cmp	r3, #62	; 0x3e
 716:	d8f9      	bhi.n	70c <MW_frequency_toggle+0x78>
 718:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 71a:	f003 0301 	and.w	r3, r3, #1
 71e:	2b00      	cmp	r3, #0
 720:	d1f4      	bne.n	70c <MW_frequency_toggle+0x78>
		}
	}

	const double N_one = ((f_one * k_one) / REF_FREQ);
 722:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 724:	ee07 3a90 	vmov	s15, r3
 728:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 72c:	ed97 7b02 	vldr	d7, [r7, #8]
 730:	ee26 6b07 	vmul.f64	d6, d6, d7
 734:	ed9f 5b3c 	vldr	d5, [pc, #240]	; 828 <MW_frequency_toggle+0x194>
 738:	ee86 7b05 	vdiv.f64	d7, d6, d5
 73c:	ed87 7b0a 	vstr	d7, [r7, #40]	; 0x28
	const double N_two = ((f_two * k_two) / REF_FREQ);
 740:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 742:	ee07 3a90 	vmov	s15, r3
 746:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 74a:	ed97 7b00 	vldr	d7, [r7]
 74e:	ee26 6b07 	vmul.f64	d6, d6, d7
 752:	ed9f 5b35 	vldr	d5, [pc, #212]	; 828 <MW_frequency_toggle+0x194>
 756:	ee86 7b05 	vdiv.f64	d7, d6, d5
 75a:	ed87 7b08 	vstr	d7, [r7, #32]

	/* Extract the fractional and integer parts */
	const uint32_t N_one_INT = N_one;
 75e:	ed97 7b0a 	vldr	d7, [r7, #40]	; 0x28
 762:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 766:	ee17 3a90 	vmov	r3, s15
 76a:	61fb      	str	r3, [r7, #28]
	const uint32_t N_one_FRAC = ((N_one - N_one_INT) * (1 << 24)) + 0.5;
 76c:	69fb      	ldr	r3, [r7, #28]
 76e:	ee07 3a90 	vmov	s15, r3
 772:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 776:	ed97 6b0a 	vldr	d6, [r7, #40]	; 0x28
 77a:	ee36 7b47 	vsub.f64	d7, d6, d7
 77e:	ed9f 6b2c 	vldr	d6, [pc, #176]	; 830 <MW_frequency_toggle+0x19c>
 782:	ee27 7b06 	vmul.f64	d7, d7, d6
 786:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
 78a:	ee37 7b06 	vadd.f64	d7, d7, d6
 78e:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 792:	ee17 3a90 	vmov	r3, s15
 796:	61bb      	str	r3, [r7, #24]
	const uint32_t N_two_INT = N_two;
 798:	ed97 7b08 	vldr	d7, [r7, #32]
 79c:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 7a0:	ee17 3a90 	vmov	r3, s15
 7a4:	617b      	str	r3, [r7, #20]
	const uint32_t N_two_FRAC = ((N_two - N_two_INT) * (1 << 24)) + 0.5;
 7a6:	697b      	ldr	r3, [r7, #20]
 7a8:	ee07 3a90 	vmov	s15, r3
 7ac:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 7b0:	ed97 6b08 	vldr	d6, [r7, #32]
 7b4:	ee36 7b47 	vsub.f64	d7, d6, d7
 7b8:	ed9f 6b1d 	vldr	d6, [pc, #116]	; 830 <MW_frequency_toggle+0x19c>
 7bc:	ee27 7b06 	vmul.f64	d7, d7, d6
 7c0:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
 7c4:	ee37 7b06 	vadd.f64	d7, d7, d6
 7c8:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 7cc:	ee17 3a90 	vmov	r3, s15
 7d0:	613b      	str	r3, [r7, #16]

	while (1) {
	set_frequency(N_one_INT, N_one_FRAC, k_one, MANUAL_MUTE); //Program necessary values for f_one
 7d2:	2301      	movs	r3, #1
 7d4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 7d6:	69b9      	ldr	r1, [r7, #24]
 7d8:	69f8      	ldr	r0, [r7, #28]
 7da:	f7ff fdf3 	bl	3c4 <set_frequency>
	HAL_GPIO_WritePin(SCOPE_TRIG_OUT_GPIO_Port, SCOPE_TRIG_OUT_Pin, GPIO_PIN_RESET); // Sets trigger output low
 7de:	2200      	movs	r2, #0
 7e0:	2101      	movs	r1, #1
 7e2:	4817      	ldr	r0, [pc, #92]	; (840 <MW_frequency_toggle+0x1ac>)
 7e4:	f000 f978 	bl	ad8 <__HAL_GPIO_WritePin_veneer>
	timer_delay(SLOW_TIMER, 1000); //100ms delay
 7e8:	4b16      	ldr	r3, [pc, #88]	; (844 <MW_frequency_toggle+0x1b0>)
 7ea:	681b      	ldr	r3, [r3, #0]
 7ec:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 7f0:	4618      	mov	r0, r3
 7f2:	f000 f87f 	bl	8f4 <timer_delay>
	set_frequency(N_two_INT, N_two_FRAC, k_two, MANUAL_MUTE); //Program necessary values for f_two
 7f6:	2301      	movs	r3, #1
 7f8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 7fa:	6939      	ldr	r1, [r7, #16]
 7fc:	6978      	ldr	r0, [r7, #20]
 7fe:	f7ff fde1 	bl	3c4 <set_frequency>
	HAL_GPIO_WritePin(SCOPE_TRIG_OUT_GPIO_Port, SCOPE_TRIG_OUT_Pin, GPIO_PIN_SET); // Sets trigger output high
 802:	2201      	movs	r2, #1
 804:	2101      	movs	r1, #1
 806:	480e      	ldr	r0, [pc, #56]	; (840 <MW_frequency_toggle+0x1ac>)
 808:	f000 f966 	bl	ad8 <__HAL_GPIO_WritePin_veneer>
	timer_delay(SLOW_TIMER, 1000); //100ms delay
 80c:	4b0d      	ldr	r3, [pc, #52]	; (844 <MW_frequency_toggle+0x1b0>)
 80e:	681b      	ldr	r3, [r3, #0]
 810:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 814:	4618      	mov	r0, r3
 816:	f000 f86d 	bl	8f4 <timer_delay>
	set_frequency(N_one_INT, N_one_FRAC, k_one, MANUAL_MUTE); //Program necessary values for f_one
 81a:	e7da      	b.n	7d2 <MW_frequency_toggle+0x13e>
 81c:	f3af 8000 	nop.w
 820:	20000000 	.word	0x20000000
 824:	41ee8c21 	.word	0x41ee8c21
 828:	00000000 	.word	0x00000000
 82c:	4187d784 	.word	0x4187d784
 830:	00000000 	.word	0x00000000
 834:	41700000 	.word	0x41700000
 838:	0801ad2c 	.word	0x0801ad2c
 83c:	0801ad50 	.word	0x0801ad50
 840:	58021800 	.word	0x58021800
 844:	20000018 	.word	0x20000018

00000848 <set_SDO_output>:
/* Selects SDO pin connectivity/functionality
 * By default, the SDO pin will output 'Lock detect' but can be connected
 * to other internal signals. See table 2.15 of HMC835 datasheet (v04.1113)
 * for more details all options
 */
 void set_SDO_output(const uint32_t GPO_setting) {
 848:	b580      	push	{r7, lr}
 84a:	b084      	sub	sp, #16
 84c:	af00      	add	r7, sp, #0
 84e:	6078      	str	r0, [r7, #4]
	//Default output on SDO pin is 'Lock detect output', value 0x01
	//VCO divider is 0x0A
	//See table 2.15 of HMC835 datasheet for more details (v04.1113)
	uint32_t read_data = 0x0;
 850:	2300      	movs	r3, #0
 852:	60fb      	str	r3, [r7, #12]

	if (GPO_setting > 31) {
 854:	687b      	ldr	r3, [r7, #4]
 856:	2b1f      	cmp	r3, #31
 858:	d904      	bls.n	864 <set_SDO_output+0x1c>
		printf("SDO pin value must be less that 32\r\n");
 85a:	480d      	ldr	r0, [pc, #52]	; (890 <set_SDO_output+0x48>)
 85c:	f000 f954 	bl	b08 <__puts_veneer>
		Error_Handler();
 860:	f000 f932 	bl	ac8 <__Error_Handler_veneer>
	}
	read_data = synth_readreg(GPO_REGISTER); // Get the current value.
 864:	200f      	movs	r0, #15
 866:	f7ff fc45 	bl	f4 <synth_readreg>
 86a:	60f8      	str	r0, [r7, #12]
	read_data &= 0xFFFFFFE0; // Zero the first 5 LSBs.
 86c:	68fb      	ldr	r3, [r7, #12]
 86e:	f023 031f 	bic.w	r3, r3, #31
 872:	60fb      	str	r3, [r7, #12]
	//read_data |= 0x0A; //Select VCO divider output
	read_data |= GPO_setting; //Select GPO output dependent on function input value
 874:	68fa      	ldr	r2, [r7, #12]
 876:	687b      	ldr	r3, [r7, #4]
 878:	4313      	orrs	r3, r2
 87a:	60fb      	str	r3, [r7, #12]
	synth_writereg(read_data, GPO_REGISTER, 0x0, VERIFY); // Update the GPO register.
 87c:	2301      	movs	r3, #1
 87e:	2200      	movs	r2, #0
 880:	210f      	movs	r1, #15
 882:	68f8      	ldr	r0, [r7, #12]
 884:	f7ff fbbc 	bl	0 <synth_writereg>
}
 888:	bf00      	nop
 88a:	3710      	adds	r7, #16
 88c:	46bd      	mov	sp, r7
 88e:	bd80      	pop	{r7, pc}
 890:	0801ad70 	.word	0x0801ad70

00000894 <start_timer>:
	HAL_GPIO_WritePin(ATT_8_GPIO_Port, ATT_8_Pin, a.ATT_8DB);
	HAL_GPIO_WritePin(ATT_16_GPIO_Port, ATT_16_Pin, a.ATT_16DB);
}
#endif //ATTENUATOR_CODE

uint32_t start_timer(TIM_TypeDef * timer) {
 894:	b480      	push	{r7}
 896:	b083      	sub	sp, #12
 898:	af00      	add	r7, sp, #0
 89a:	6078      	str	r0, [r7, #4]

	timer->CR1 &= ~(TIM_CR1_CEN);
 89c:	687b      	ldr	r3, [r7, #4]
 89e:	681b      	ldr	r3, [r3, #0]
 8a0:	f023 0201 	bic.w	r2, r3, #1
 8a4:	687b      	ldr	r3, [r7, #4]
 8a6:	601a      	str	r2, [r3, #0]
	timer->EGR |= TIM_EGR_UG;  // Reset CNT and PSC
 8a8:	687b      	ldr	r3, [r7, #4]
 8aa:	695b      	ldr	r3, [r3, #20]
 8ac:	f043 0201 	orr.w	r2, r3, #1
 8b0:	687b      	ldr	r3, [r7, #4]
 8b2:	615a      	str	r2, [r3, #20]
	timer->CR1 |= TIM_CR1_CEN;
 8b4:	687b      	ldr	r3, [r7, #4]
 8b6:	681b      	ldr	r3, [r3, #0]
 8b8:	f043 0201 	orr.w	r2, r3, #1
 8bc:	687b      	ldr	r3, [r7, #4]
 8be:	601a      	str	r2, [r3, #0]
	return timer->CNT;
 8c0:	687b      	ldr	r3, [r7, #4]
 8c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24

}
 8c4:	4618      	mov	r0, r3
 8c6:	370c      	adds	r7, #12
 8c8:	46bd      	mov	sp, r7
 8ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8ce:	4770      	bx	lr

000008d0 <stop_timer>:

uint32_t stop_timer(TIM_TypeDef *timer) {
 8d0:	b480      	push	{r7}
 8d2:	b083      	sub	sp, #12
 8d4:	af00      	add	r7, sp, #0
 8d6:	6078      	str	r0, [r7, #4]

	timer->CR1 &= ~(TIM_CR1_CEN);
 8d8:	687b      	ldr	r3, [r7, #4]
 8da:	681b      	ldr	r3, [r3, #0]
 8dc:	f023 0201 	bic.w	r2, r3, #1
 8e0:	687b      	ldr	r3, [r7, #4]
 8e2:	601a      	str	r2, [r3, #0]
	return timer->CNT;
 8e4:	687b      	ldr	r3, [r7, #4]
 8e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
}
 8e8:	4618      	mov	r0, r3
 8ea:	370c      	adds	r7, #12
 8ec:	46bd      	mov	sp, r7
 8ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8f2:	4770      	bx	lr

000008f4 <timer_delay>:

void timer_delay(TIM_TypeDef *timer, const uint32_t delay_count){
 8f4:	b480      	push	{r7}
 8f6:	b085      	sub	sp, #20
 8f8:	af00      	add	r7, sp, #0
 8fa:	6078      	str	r0, [r7, #4]
 8fc:	6039      	str	r1, [r7, #0]

	timer->CR1 &= ~(TIM_CR1_CEN); // Disable the timer
 8fe:	687b      	ldr	r3, [r7, #4]
 900:	681b      	ldr	r3, [r3, #0]
 902:	f023 0201 	bic.w	r2, r3, #1
 906:	687b      	ldr	r3, [r7, #4]
 908:	601a      	str	r2, [r3, #0]
	timer->EGR |= TIM_EGR_UG;  // Reset CNT and PSC
 90a:	687b      	ldr	r3, [r7, #4]
 90c:	695b      	ldr	r3, [r3, #20]
 90e:	f043 0201 	orr.w	r2, r3, #1
 912:	687b      	ldr	r3, [r7, #4]
 914:	615a      	str	r2, [r3, #20]
	timer->CR1 |= TIM_CR1_CEN; // Enable the timer
 916:	687b      	ldr	r3, [r7, #4]
 918:	681b      	ldr	r3, [r3, #0]
 91a:	f043 0201 	orr.w	r2, r3, #1
 91e:	687b      	ldr	r3, [r7, #4]
 920:	601a      	str	r2, [r3, #0]
	uint32_t start = timer->CNT; // Get the start value of the timer
 922:	687b      	ldr	r3, [r7, #4]
 924:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 926:	60fb      	str	r3, [r7, #12]

	/* Note that we don't consider overflow, if the timer is clocked at 1 MHz
	 * a 16 bit counter will take approximately 65 ms to overflow. */

	while((timer->CNT - start) < delay_count){} // Loop until delay_us has expired
 928:	bf00      	nop
 92a:	687b      	ldr	r3, [r7, #4]
 92c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 92e:	68fb      	ldr	r3, [r7, #12]
 930:	1ad3      	subs	r3, r2, r3
 932:	683a      	ldr	r2, [r7, #0]
 934:	429a      	cmp	r2, r3
 936:	d8f8      	bhi.n	92a <timer_delay+0x36>
	timer->CR1 &= ~(TIM_CR1_CEN); // Disable the timer
 938:	687b      	ldr	r3, [r7, #4]
 93a:	681b      	ldr	r3, [r3, #0]
 93c:	f023 0201 	bic.w	r2, r3, #1
 940:	687b      	ldr	r3, [r7, #4]
 942:	601a      	str	r2, [r3, #0]

}
 944:	bf00      	nop
 946:	3714      	adds	r7, #20
 948:	46bd      	mov	sp, r7
 94a:	f85d 7b04 	ldr.w	r7, [sp], #4
 94e:	4770      	bx	lr

00000950 <start_pop>:

	printf("POP cycle stopped!\r\n");

}

void start_pop() {
 950:	b580      	push	{r7, lr}
 952:	af00      	add	r7, sp, #0

	/* Timer A is the LASER enable, Timer E is the microwave pulse */
	if (HAL_HRTIM_WaveformOutputStart(&hhrtim,
 954:	f240 1103 	movw	r1, #259	; 0x103
 958:	480f      	ldr	r0, [pc, #60]	; (998 <start_pop+0x48>)
 95a:	f000 f8b1 	bl	ac0 <__HAL_HRTIM_WaveformOutputStart_veneer>
 95e:	4603      	mov	r3, r0
 960:	2b00      	cmp	r3, #0
 962:	d004      	beq.n	96e <start_pop+0x1e>
	HRTIM_OUTPUT_TA1 | HRTIM_OUTPUT_TA2 | HRTIM_OUTPUT_TE1) != HAL_OK) {
		printf("Failed to start POP!\r\n");
 964:	480d      	ldr	r0, [pc, #52]	; (99c <start_pop+0x4c>)
 966:	f000 f8cf 	bl	b08 <__puts_veneer>
		Error_Handler();
 96a:	f000 f8ad 	bl	ac8 <__Error_Handler_veneer>
		Error_Handler();
	}

#endif

	if (HAL_HRTIM_WaveformCounterStart_IT(&hhrtim,
 96e:	f44f 1108 	mov.w	r1, #2228224	; 0x220000
 972:	4809      	ldr	r0, [pc, #36]	; (998 <start_pop+0x48>)
 974:	f000 f8b8 	bl	ae8 <__HAL_HRTIM_WaveformCountStart_IT_veneer>
 978:	4603      	mov	r3, r0
 97a:	2b00      	cmp	r3, #0
 97c:	d004      	beq.n	988 <start_pop+0x38>
	HRTIM_TIMERID_TIMER_A | HRTIM_TIMERID_TIMER_E) != HAL_OK) {
		printf("POP failure point E!\r\n");
 97e:	4808      	ldr	r0, [pc, #32]	; (9a0 <start_pop+0x50>)
 980:	f000 f8c2 	bl	b08 <__puts_veneer>
		Error_Handler();
 984:	f000 f8a0 	bl	ac8 <__Error_Handler_veneer>
	}

	pop_running = true;
 988:	4b06      	ldr	r3, [pc, #24]	; (9a4 <start_pop+0x54>)
 98a:	2201      	movs	r2, #1
 98c:	701a      	strb	r2, [r3, #0]

	printf("POP cycle running!\r\n");
 98e:	4806      	ldr	r0, [pc, #24]	; (9a8 <start_pop+0x58>)
 990:	f000 f8ba 	bl	b08 <__puts_veneer>

}
 994:	bf00      	nop
 996:	bd80      	pop	{r7, pc}
 998:	2000037c 	.word	0x2000037c
 99c:	0801ad94 	.word	0x0801ad94
 9a0:	0801adac 	.word	0x0801adac
 9a4:	200005d0 	.word	0x200005d0
 9a8:	0801adc4 	.word	0x0801adc4

000009ac <stop_pop>:
void stop_pop() {
 9ac:	b580      	push	{r7, lr}
 9ae:	af00      	add	r7, sp, #0
	if (HAL_HRTIM_WaveformOutputStop(&hhrtim,
 9b0:	f240 1103 	movw	r1, #259	; 0x103
 9b4:	4813      	ldr	r0, [pc, #76]	; (a04 <stop_pop+0x58>)
 9b6:	f000 f89b 	bl	af0 <__HAL_HRTIM_WaveformOutputStop_veneer>
 9ba:	4603      	mov	r3, r0
 9bc:	2b00      	cmp	r3, #0
 9be:	d004      	beq.n	9ca <stop_pop+0x1e>
		printf("POP failure point A!\r\n");
 9c0:	4811      	ldr	r0, [pc, #68]	; (a08 <stop_pop+0x5c>)
 9c2:	f000 f8a1 	bl	b08 <__puts_veneer>
		Error_Handler();
 9c6:	f000 f87f 	bl	ac8 <__Error_Handler_veneer>
	if (HAL_HRTIM_WaveformCounterStop_IT(&hhrtim,
 9ca:	f44f 1108 	mov.w	r1, #2228224	; 0x220000
 9ce:	480d      	ldr	r0, [pc, #52]	; (a04 <stop_pop+0x58>)
 9d0:	f000 f886 	bl	ae0 <__HAL_HRTIM_WaveformCountStop_IT_veneer>
 9d4:	4603      	mov	r3, r0
 9d6:	2b00      	cmp	r3, #0
 9d8:	d004      	beq.n	9e4 <stop_pop+0x38>
		printf("POP failure point B!\r\n");
 9da:	480c      	ldr	r0, [pc, #48]	; (a0c <stop_pop+0x60>)
 9dc:	f000 f894 	bl	b08 <__puts_veneer>
		Error_Handler();
 9e0:	f000 f872 	bl	ac8 <__Error_Handler_veneer>
	pop_cycle_count = 0;
 9e4:	4b0a      	ldr	r3, [pc, #40]	; (a10 <stop_pop+0x64>)
 9e6:	2200      	movs	r2, #0
 9e8:	601a      	str	r2, [r3, #0]
	pop_running = false;
 9ea:	4b0a      	ldr	r3, [pc, #40]	; (a14 <stop_pop+0x68>)
 9ec:	2200      	movs	r2, #0
 9ee:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, 0); //turn off amber LED
 9f0:	2200      	movs	r2, #0
 9f2:	2102      	movs	r1, #2
 9f4:	4808      	ldr	r0, [pc, #32]	; (a18 <stop_pop+0x6c>)
 9f6:	f000 f86f 	bl	ad8 <__HAL_GPIO_WritePin_veneer>
	printf("POP cycle stopped!\r\n");
 9fa:	4808      	ldr	r0, [pc, #32]	; (a1c <stop_pop+0x70>)
 9fc:	f000 f884 	bl	b08 <__puts_veneer>
}
 a00:	bf00      	nop
 a02:	bd80      	pop	{r7, pc}
 a04:	2000037c 	.word	0x2000037c
 a08:	0801add8 	.word	0x0801add8
 a0c:	0801adf0 	.word	0x0801adf0
 a10:	200005cc 	.word	0x200005cc
 a14:	200005d0 	.word	0x200005d0
 a18:	58021000 	.word	0x58021000
 a1c:	0801ae08 	.word	0x0801ae08

00000a20 <set_aom_atten>:
static void set_aom_atten(const struct AttenuatorSettings a) {
 a20:	b580      	push	{r7, lr}
 a22:	b082      	sub	sp, #8
 a24:	af00      	add	r7, sp, #0
 a26:	7138      	strb	r0, [r7, #4]
	HAL_GPIO_WritePin(ATT_LE_GPIO_Port, ATT_LE_Pin, GPIO_PIN_SET);
 a28:	2201      	movs	r2, #1
 a2a:	2180      	movs	r1, #128	; 0x80
 a2c:	4822      	ldr	r0, [pc, #136]	; (ab8 <set_aom_atten+0x98>)
 a2e:	f000 f853 	bl	ad8 <__HAL_GPIO_WritePin_veneer>
	HAL_GPIO_WritePin(ATT_025_GPIO_Port, ATT_025_Pin, a.ATT_0DB25);
 a32:	793b      	ldrb	r3, [r7, #4]
 a34:	f3c3 0300 	ubfx	r3, r3, #0, #1
 a38:	b2db      	uxtb	r3, r3
 a3a:	461a      	mov	r2, r3
 a3c:	2140      	movs	r1, #64	; 0x40
 a3e:	481e      	ldr	r0, [pc, #120]	; (ab8 <set_aom_atten+0x98>)
 a40:	f000 f84a 	bl	ad8 <__HAL_GPIO_WritePin_veneer>
	HAL_GPIO_WritePin(ATT_05_GPIO_Port, ATT_05_Pin, a.ATT_0DB5);
 a44:	793b      	ldrb	r3, [r7, #4]
 a46:	f3c3 0340 	ubfx	r3, r3, #1, #1
 a4a:	b2db      	uxtb	r3, r3
 a4c:	461a      	mov	r2, r3
 a4e:	2120      	movs	r1, #32
 a50:	4819      	ldr	r0, [pc, #100]	; (ab8 <set_aom_atten+0x98>)
 a52:	f000 f841 	bl	ad8 <__HAL_GPIO_WritePin_veneer>
	HAL_GPIO_WritePin(ATT_1_GPIO_Port, ATT_1_Pin, a.ATT_1DB);
 a56:	793b      	ldrb	r3, [r7, #4]
 a58:	f3c3 0380 	ubfx	r3, r3, #2, #1
 a5c:	b2db      	uxtb	r3, r3
 a5e:	461a      	mov	r2, r3
 a60:	2110      	movs	r1, #16
 a62:	4815      	ldr	r0, [pc, #84]	; (ab8 <set_aom_atten+0x98>)
 a64:	f000 f838 	bl	ad8 <__HAL_GPIO_WritePin_veneer>
	HAL_GPIO_WritePin(ATT_2_GPIO_Port, ATT_2_Pin, a.ATT_2DB);
 a68:	793b      	ldrb	r3, [r7, #4]
 a6a:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 a6e:	b2db      	uxtb	r3, r3
 a70:	461a      	mov	r2, r3
 a72:	2108      	movs	r1, #8
 a74:	4810      	ldr	r0, [pc, #64]	; (ab8 <set_aom_atten+0x98>)
 a76:	f000 f82f 	bl	ad8 <__HAL_GPIO_WritePin_veneer>
	HAL_GPIO_WritePin(ATT_4_GPIO_Port, ATT_4_Pin, a.ATT_4DB);
 a7a:	793b      	ldrb	r3, [r7, #4]
 a7c:	f3c3 1300 	ubfx	r3, r3, #4, #1
 a80:	b2db      	uxtb	r3, r3
 a82:	461a      	mov	r2, r3
 a84:	2104      	movs	r1, #4
 a86:	480d      	ldr	r0, [pc, #52]	; (abc <set_aom_atten+0x9c>)
 a88:	f000 f826 	bl	ad8 <__HAL_GPIO_WritePin_veneer>
	HAL_GPIO_WritePin(ATT_8_GPIO_Port, ATT_8_Pin, a.ATT_8DB);
 a8c:	793b      	ldrb	r3, [r7, #4]
 a8e:	f3c3 1340 	ubfx	r3, r3, #5, #1
 a92:	b2db      	uxtb	r3, r3
 a94:	461a      	mov	r2, r3
 a96:	2110      	movs	r1, #16
 a98:	4808      	ldr	r0, [pc, #32]	; (abc <set_aom_atten+0x9c>)
 a9a:	f000 f81d 	bl	ad8 <__HAL_GPIO_WritePin_veneer>
	HAL_GPIO_WritePin(ATT_16_GPIO_Port, ATT_16_Pin, a.ATT_16DB);
 a9e:	793b      	ldrb	r3, [r7, #4]
 aa0:	f3c3 1380 	ubfx	r3, r3, #6, #1
 aa4:	b2db      	uxtb	r3, r3
 aa6:	461a      	mov	r2, r3
 aa8:	2120      	movs	r1, #32
 aaa:	4804      	ldr	r0, [pc, #16]	; (abc <set_aom_atten+0x9c>)
 aac:	f000 f814 	bl	ad8 <__HAL_GPIO_WritePin_veneer>
}
 ab0:	bf00      	nop
 ab2:	3708      	adds	r7, #8
 ab4:	46bd      	mov	sp, r7
 ab6:	bd80      	pop	{r7, pc}
 ab8:	58020c00 	.word	0x58020c00
 abc:	58021000 	.word	0x58021000

00000ac0 <__HAL_HRTIM_WaveformOutputStart_veneer>:
      /* and other ADC of the common group are enabled, internal              */
      /* measurement paths cannot be enabled.                                 */
      else
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 ac0:	f85f f000 	ldr.w	pc, [pc]	; ac4 <__HAL_HRTIM_WaveformOutputStart_veneer+0x4>
 ac4:	08006f7b 	.word	0x08006f7b

00000ac8 <__Error_Handler_veneer>:

        tmp_hal_status = HAL_ERROR;
 ac8:	f85f f000 	ldr.w	pc, [pc]	; acc <__Error_Handler_veneer+0x4>
    }

  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 acc:	08001fa1 	.word	0x08001fa1

00000ad0 <__HAL_GPIO_ReadPin_veneer>:
 ad0:	f85f f000 	ldr.w	pc, [pc]	; ad4 <__HAL_GPIO_ReadPin_veneer+0x4>

  /* Return function status */
  return tmp_hal_status;
 ad4:	08006889 	.word	0x08006889

00000ad8 <__HAL_GPIO_WritePin_veneer>:
}
 ad8:	f85f f000 	ldr.w	pc, [pc]	; adc <__HAL_GPIO_WritePin_veneer+0x4>
 adc:	080068b9 	.word	0x080068b9

00000ae0 <__HAL_HRTIM_WaveformCountStop_IT_veneer>:
 ae0:	f85f f000 	ldr.w	pc, [pc]	; ae4 <__HAL_HRTIM_WaveformCountStop_IT_veneer+0x4>
 ae4:	08007111 	.word	0x08007111

00000ae8 <__HAL_HRTIM_WaveformCountStart_IT_veneer>:
 ae8:	f85f f000 	ldr.w	pc, [pc]	; aec <__HAL_HRTIM_WaveformCountStart_IT_veneer+0x4>
 aec:	08007031 	.word	0x08007031

00000af0 <__HAL_HRTIM_WaveformOutputStop_veneer>:
 af0:	f85f f000 	ldr.w	pc, [pc]	; af4 <__HAL_HRTIM_WaveformOutputStop_veneer+0x4>
 af4:	08006fd5 	.word	0x08006fd5

00000af8 <__HAL_Delay_veneer>:
 af8:	f85f f000 	ldr.w	pc, [pc]	; afc <__HAL_Delay_veneer+0x4>
 afc:	08002ddd 	.word	0x08002ddd

00000b00 <__printf_veneer>:
 b00:	f85f f000 	ldr.w	pc, [pc]	; b04 <__printf_veneer+0x4>
 b04:	08018a25 	.word	0x08018a25

00000b08 <__puts_veneer>:
 b08:	f85f f000 	ldr.w	pc, [pc]	; b0c <__puts_veneer+0x4>
 b0c:	08018af1 	.word	0x08018af1

Disassembly of section .text:

08000db0 <__do_global_dtors_aux>:
 8000db0:	b510      	push	{r4, lr}
 8000db2:	4c05      	ldr	r4, [pc, #20]	; (8000dc8 <__do_global_dtors_aux+0x18>)
 8000db4:	7823      	ldrb	r3, [r4, #0]
 8000db6:	b933      	cbnz	r3, 8000dc6 <__do_global_dtors_aux+0x16>
 8000db8:	4b04      	ldr	r3, [pc, #16]	; (8000dcc <__do_global_dtors_aux+0x1c>)
 8000dba:	b113      	cbz	r3, 8000dc2 <__do_global_dtors_aux+0x12>
 8000dbc:	4804      	ldr	r0, [pc, #16]	; (8000dd0 <__do_global_dtors_aux+0x20>)
 8000dbe:	f3af 8000 	nop.w
 8000dc2:	2301      	movs	r3, #1
 8000dc4:	7023      	strb	r3, [r4, #0]
 8000dc6:	bd10      	pop	{r4, pc}
 8000dc8:	200002e8 	.word	0x200002e8
 8000dcc:	00000000 	.word	0x00000000
 8000dd0:	0801a928 	.word	0x0801a928

08000dd4 <frame_dummy>:
 8000dd4:	b508      	push	{r3, lr}
 8000dd6:	4b03      	ldr	r3, [pc, #12]	; (8000de4 <frame_dummy+0x10>)
 8000dd8:	b11b      	cbz	r3, 8000de2 <frame_dummy+0xe>
 8000dda:	4903      	ldr	r1, [pc, #12]	; (8000de8 <frame_dummy+0x14>)
 8000ddc:	4803      	ldr	r0, [pc, #12]	; (8000dec <frame_dummy+0x18>)
 8000dde:	f3af 8000 	nop.w
 8000de2:	bd08      	pop	{r3, pc}
 8000de4:	00000000 	.word	0x00000000
 8000de8:	200002ec 	.word	0x200002ec
 8000dec:	0801a928 	.word	0x0801a928

08000df0 <memchr>:
 8000df0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000df4:	2a10      	cmp	r2, #16
 8000df6:	db2b      	blt.n	8000e50 <memchr+0x60>
 8000df8:	f010 0f07 	tst.w	r0, #7
 8000dfc:	d008      	beq.n	8000e10 <memchr+0x20>
 8000dfe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000e02:	3a01      	subs	r2, #1
 8000e04:	428b      	cmp	r3, r1
 8000e06:	d02d      	beq.n	8000e64 <memchr+0x74>
 8000e08:	f010 0f07 	tst.w	r0, #7
 8000e0c:	b342      	cbz	r2, 8000e60 <memchr+0x70>
 8000e0e:	d1f6      	bne.n	8000dfe <memchr+0xe>
 8000e10:	b4f0      	push	{r4, r5, r6, r7}
 8000e12:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000e16:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 8000e1a:	f022 0407 	bic.w	r4, r2, #7
 8000e1e:	f07f 0700 	mvns.w	r7, #0
 8000e22:	2300      	movs	r3, #0
 8000e24:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000e28:	3c08      	subs	r4, #8
 8000e2a:	ea85 0501 	eor.w	r5, r5, r1
 8000e2e:	ea86 0601 	eor.w	r6, r6, r1
 8000e32:	fa85 f547 	uadd8	r5, r5, r7
 8000e36:	faa3 f587 	sel	r5, r3, r7
 8000e3a:	fa86 f647 	uadd8	r6, r6, r7
 8000e3e:	faa5 f687 	sel	r6, r5, r7
 8000e42:	b98e      	cbnz	r6, 8000e68 <memchr+0x78>
 8000e44:	d1ee      	bne.n	8000e24 <memchr+0x34>
 8000e46:	bcf0      	pop	{r4, r5, r6, r7}
 8000e48:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000e4c:	f002 0207 	and.w	r2, r2, #7
 8000e50:	b132      	cbz	r2, 8000e60 <memchr+0x70>
 8000e52:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000e56:	3a01      	subs	r2, #1
 8000e58:	ea83 0301 	eor.w	r3, r3, r1
 8000e5c:	b113      	cbz	r3, 8000e64 <memchr+0x74>
 8000e5e:	d1f8      	bne.n	8000e52 <memchr+0x62>
 8000e60:	2000      	movs	r0, #0
 8000e62:	4770      	bx	lr
 8000e64:	3801      	subs	r0, #1
 8000e66:	4770      	bx	lr
 8000e68:	2d00      	cmp	r5, #0
 8000e6a:	bf06      	itte	eq
 8000e6c:	4635      	moveq	r5, r6
 8000e6e:	3803      	subeq	r0, #3
 8000e70:	3807      	subne	r0, #7
 8000e72:	f015 0f01 	tst.w	r5, #1
 8000e76:	d107      	bne.n	8000e88 <memchr+0x98>
 8000e78:	3001      	adds	r0, #1
 8000e7a:	f415 7f80 	tst.w	r5, #256	; 0x100
 8000e7e:	bf02      	ittt	eq
 8000e80:	3001      	addeq	r0, #1
 8000e82:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000e86:	3001      	addeq	r0, #1
 8000e88:	bcf0      	pop	{r4, r5, r6, r7}
 8000e8a:	3801      	subs	r0, #1
 8000e8c:	4770      	bx	lr
 8000e8e:	bf00      	nop

08000e90 <strlen>:
 8000e90:	4603      	mov	r3, r0
 8000e92:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000e96:	2a00      	cmp	r2, #0
 8000e98:	d1fb      	bne.n	8000e92 <strlen+0x2>
 8000e9a:	1a18      	subs	r0, r3, r0
 8000e9c:	3801      	subs	r0, #1
 8000e9e:	4770      	bx	lr

08000ea0 <__aeabi_uldivmod>:
 8000ea0:	b953      	cbnz	r3, 8000eb8 <__aeabi_uldivmod+0x18>
 8000ea2:	b94a      	cbnz	r2, 8000eb8 <__aeabi_uldivmod+0x18>
 8000ea4:	2900      	cmp	r1, #0
 8000ea6:	bf08      	it	eq
 8000ea8:	2800      	cmpeq	r0, #0
 8000eaa:	bf1c      	itt	ne
 8000eac:	f04f 31ff 	movne.w	r1, #4294967295
 8000eb0:	f04f 30ff 	movne.w	r0, #4294967295
 8000eb4:	f000 b970 	b.w	8001198 <__aeabi_idiv0>
 8000eb8:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ebc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ec0:	f000 f806 	bl	8000ed0 <__udivmoddi4>
 8000ec4:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ec8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ecc:	b004      	add	sp, #16
 8000ece:	4770      	bx	lr

08000ed0 <__udivmoddi4>:
 8000ed0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ed4:	9e08      	ldr	r6, [sp, #32]
 8000ed6:	460d      	mov	r5, r1
 8000ed8:	4604      	mov	r4, r0
 8000eda:	460f      	mov	r7, r1
 8000edc:	2b00      	cmp	r3, #0
 8000ede:	d14a      	bne.n	8000f76 <__udivmoddi4+0xa6>
 8000ee0:	428a      	cmp	r2, r1
 8000ee2:	4694      	mov	ip, r2
 8000ee4:	d965      	bls.n	8000fb2 <__udivmoddi4+0xe2>
 8000ee6:	fab2 f382 	clz	r3, r2
 8000eea:	b143      	cbz	r3, 8000efe <__udivmoddi4+0x2e>
 8000eec:	fa02 fc03 	lsl.w	ip, r2, r3
 8000ef0:	f1c3 0220 	rsb	r2, r3, #32
 8000ef4:	409f      	lsls	r7, r3
 8000ef6:	fa20 f202 	lsr.w	r2, r0, r2
 8000efa:	4317      	orrs	r7, r2
 8000efc:	409c      	lsls	r4, r3
 8000efe:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000f02:	fa1f f58c 	uxth.w	r5, ip
 8000f06:	fbb7 f1fe 	udiv	r1, r7, lr
 8000f0a:	0c22      	lsrs	r2, r4, #16
 8000f0c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000f10:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000f14:	fb01 f005 	mul.w	r0, r1, r5
 8000f18:	4290      	cmp	r0, r2
 8000f1a:	d90a      	bls.n	8000f32 <__udivmoddi4+0x62>
 8000f1c:	eb1c 0202 	adds.w	r2, ip, r2
 8000f20:	f101 37ff 	add.w	r7, r1, #4294967295
 8000f24:	f080 811c 	bcs.w	8001160 <__udivmoddi4+0x290>
 8000f28:	4290      	cmp	r0, r2
 8000f2a:	f240 8119 	bls.w	8001160 <__udivmoddi4+0x290>
 8000f2e:	3902      	subs	r1, #2
 8000f30:	4462      	add	r2, ip
 8000f32:	1a12      	subs	r2, r2, r0
 8000f34:	b2a4      	uxth	r4, r4
 8000f36:	fbb2 f0fe 	udiv	r0, r2, lr
 8000f3a:	fb0e 2210 	mls	r2, lr, r0, r2
 8000f3e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000f42:	fb00 f505 	mul.w	r5, r0, r5
 8000f46:	42a5      	cmp	r5, r4
 8000f48:	d90a      	bls.n	8000f60 <__udivmoddi4+0x90>
 8000f4a:	eb1c 0404 	adds.w	r4, ip, r4
 8000f4e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000f52:	f080 8107 	bcs.w	8001164 <__udivmoddi4+0x294>
 8000f56:	42a5      	cmp	r5, r4
 8000f58:	f240 8104 	bls.w	8001164 <__udivmoddi4+0x294>
 8000f5c:	4464      	add	r4, ip
 8000f5e:	3802      	subs	r0, #2
 8000f60:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000f64:	1b64      	subs	r4, r4, r5
 8000f66:	2100      	movs	r1, #0
 8000f68:	b11e      	cbz	r6, 8000f72 <__udivmoddi4+0xa2>
 8000f6a:	40dc      	lsrs	r4, r3
 8000f6c:	2300      	movs	r3, #0
 8000f6e:	e9c6 4300 	strd	r4, r3, [r6]
 8000f72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f76:	428b      	cmp	r3, r1
 8000f78:	d908      	bls.n	8000f8c <__udivmoddi4+0xbc>
 8000f7a:	2e00      	cmp	r6, #0
 8000f7c:	f000 80ed 	beq.w	800115a <__udivmoddi4+0x28a>
 8000f80:	2100      	movs	r1, #0
 8000f82:	e9c6 0500 	strd	r0, r5, [r6]
 8000f86:	4608      	mov	r0, r1
 8000f88:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f8c:	fab3 f183 	clz	r1, r3
 8000f90:	2900      	cmp	r1, #0
 8000f92:	d149      	bne.n	8001028 <__udivmoddi4+0x158>
 8000f94:	42ab      	cmp	r3, r5
 8000f96:	d302      	bcc.n	8000f9e <__udivmoddi4+0xce>
 8000f98:	4282      	cmp	r2, r0
 8000f9a:	f200 80f8 	bhi.w	800118e <__udivmoddi4+0x2be>
 8000f9e:	1a84      	subs	r4, r0, r2
 8000fa0:	eb65 0203 	sbc.w	r2, r5, r3
 8000fa4:	2001      	movs	r0, #1
 8000fa6:	4617      	mov	r7, r2
 8000fa8:	2e00      	cmp	r6, #0
 8000faa:	d0e2      	beq.n	8000f72 <__udivmoddi4+0xa2>
 8000fac:	e9c6 4700 	strd	r4, r7, [r6]
 8000fb0:	e7df      	b.n	8000f72 <__udivmoddi4+0xa2>
 8000fb2:	b902      	cbnz	r2, 8000fb6 <__udivmoddi4+0xe6>
 8000fb4:	deff      	udf	#255	; 0xff
 8000fb6:	fab2 f382 	clz	r3, r2
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	f040 8090 	bne.w	80010e0 <__udivmoddi4+0x210>
 8000fc0:	1a8a      	subs	r2, r1, r2
 8000fc2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000fc6:	fa1f fe8c 	uxth.w	lr, ip
 8000fca:	2101      	movs	r1, #1
 8000fcc:	fbb2 f5f7 	udiv	r5, r2, r7
 8000fd0:	fb07 2015 	mls	r0, r7, r5, r2
 8000fd4:	0c22      	lsrs	r2, r4, #16
 8000fd6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000fda:	fb0e f005 	mul.w	r0, lr, r5
 8000fde:	4290      	cmp	r0, r2
 8000fe0:	d908      	bls.n	8000ff4 <__udivmoddi4+0x124>
 8000fe2:	eb1c 0202 	adds.w	r2, ip, r2
 8000fe6:	f105 38ff 	add.w	r8, r5, #4294967295
 8000fea:	d202      	bcs.n	8000ff2 <__udivmoddi4+0x122>
 8000fec:	4290      	cmp	r0, r2
 8000fee:	f200 80cb 	bhi.w	8001188 <__udivmoddi4+0x2b8>
 8000ff2:	4645      	mov	r5, r8
 8000ff4:	1a12      	subs	r2, r2, r0
 8000ff6:	b2a4      	uxth	r4, r4
 8000ff8:	fbb2 f0f7 	udiv	r0, r2, r7
 8000ffc:	fb07 2210 	mls	r2, r7, r0, r2
 8001000:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8001004:	fb0e fe00 	mul.w	lr, lr, r0
 8001008:	45a6      	cmp	lr, r4
 800100a:	d908      	bls.n	800101e <__udivmoddi4+0x14e>
 800100c:	eb1c 0404 	adds.w	r4, ip, r4
 8001010:	f100 32ff 	add.w	r2, r0, #4294967295
 8001014:	d202      	bcs.n	800101c <__udivmoddi4+0x14c>
 8001016:	45a6      	cmp	lr, r4
 8001018:	f200 80bb 	bhi.w	8001192 <__udivmoddi4+0x2c2>
 800101c:	4610      	mov	r0, r2
 800101e:	eba4 040e 	sub.w	r4, r4, lr
 8001022:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8001026:	e79f      	b.n	8000f68 <__udivmoddi4+0x98>
 8001028:	f1c1 0720 	rsb	r7, r1, #32
 800102c:	408b      	lsls	r3, r1
 800102e:	fa22 fc07 	lsr.w	ip, r2, r7
 8001032:	ea4c 0c03 	orr.w	ip, ip, r3
 8001036:	fa05 f401 	lsl.w	r4, r5, r1
 800103a:	fa20 f307 	lsr.w	r3, r0, r7
 800103e:	40fd      	lsrs	r5, r7
 8001040:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8001044:	4323      	orrs	r3, r4
 8001046:	fbb5 f8f9 	udiv	r8, r5, r9
 800104a:	fa1f fe8c 	uxth.w	lr, ip
 800104e:	fb09 5518 	mls	r5, r9, r8, r5
 8001052:	0c1c      	lsrs	r4, r3, #16
 8001054:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8001058:	fb08 f50e 	mul.w	r5, r8, lr
 800105c:	42a5      	cmp	r5, r4
 800105e:	fa02 f201 	lsl.w	r2, r2, r1
 8001062:	fa00 f001 	lsl.w	r0, r0, r1
 8001066:	d90b      	bls.n	8001080 <__udivmoddi4+0x1b0>
 8001068:	eb1c 0404 	adds.w	r4, ip, r4
 800106c:	f108 3aff 	add.w	sl, r8, #4294967295
 8001070:	f080 8088 	bcs.w	8001184 <__udivmoddi4+0x2b4>
 8001074:	42a5      	cmp	r5, r4
 8001076:	f240 8085 	bls.w	8001184 <__udivmoddi4+0x2b4>
 800107a:	f1a8 0802 	sub.w	r8, r8, #2
 800107e:	4464      	add	r4, ip
 8001080:	1b64      	subs	r4, r4, r5
 8001082:	b29d      	uxth	r5, r3
 8001084:	fbb4 f3f9 	udiv	r3, r4, r9
 8001088:	fb09 4413 	mls	r4, r9, r3, r4
 800108c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8001090:	fb03 fe0e 	mul.w	lr, r3, lr
 8001094:	45a6      	cmp	lr, r4
 8001096:	d908      	bls.n	80010aa <__udivmoddi4+0x1da>
 8001098:	eb1c 0404 	adds.w	r4, ip, r4
 800109c:	f103 35ff 	add.w	r5, r3, #4294967295
 80010a0:	d26c      	bcs.n	800117c <__udivmoddi4+0x2ac>
 80010a2:	45a6      	cmp	lr, r4
 80010a4:	d96a      	bls.n	800117c <__udivmoddi4+0x2ac>
 80010a6:	3b02      	subs	r3, #2
 80010a8:	4464      	add	r4, ip
 80010aa:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80010ae:	fba3 9502 	umull	r9, r5, r3, r2
 80010b2:	eba4 040e 	sub.w	r4, r4, lr
 80010b6:	42ac      	cmp	r4, r5
 80010b8:	46c8      	mov	r8, r9
 80010ba:	46ae      	mov	lr, r5
 80010bc:	d356      	bcc.n	800116c <__udivmoddi4+0x29c>
 80010be:	d053      	beq.n	8001168 <__udivmoddi4+0x298>
 80010c0:	b156      	cbz	r6, 80010d8 <__udivmoddi4+0x208>
 80010c2:	ebb0 0208 	subs.w	r2, r0, r8
 80010c6:	eb64 040e 	sbc.w	r4, r4, lr
 80010ca:	fa04 f707 	lsl.w	r7, r4, r7
 80010ce:	40ca      	lsrs	r2, r1
 80010d0:	40cc      	lsrs	r4, r1
 80010d2:	4317      	orrs	r7, r2
 80010d4:	e9c6 7400 	strd	r7, r4, [r6]
 80010d8:	4618      	mov	r0, r3
 80010da:	2100      	movs	r1, #0
 80010dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80010e0:	f1c3 0120 	rsb	r1, r3, #32
 80010e4:	fa02 fc03 	lsl.w	ip, r2, r3
 80010e8:	fa20 f201 	lsr.w	r2, r0, r1
 80010ec:	fa25 f101 	lsr.w	r1, r5, r1
 80010f0:	409d      	lsls	r5, r3
 80010f2:	432a      	orrs	r2, r5
 80010f4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80010f8:	fa1f fe8c 	uxth.w	lr, ip
 80010fc:	fbb1 f0f7 	udiv	r0, r1, r7
 8001100:	fb07 1510 	mls	r5, r7, r0, r1
 8001104:	0c11      	lsrs	r1, r2, #16
 8001106:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800110a:	fb00 f50e 	mul.w	r5, r0, lr
 800110e:	428d      	cmp	r5, r1
 8001110:	fa04 f403 	lsl.w	r4, r4, r3
 8001114:	d908      	bls.n	8001128 <__udivmoddi4+0x258>
 8001116:	eb1c 0101 	adds.w	r1, ip, r1
 800111a:	f100 38ff 	add.w	r8, r0, #4294967295
 800111e:	d22f      	bcs.n	8001180 <__udivmoddi4+0x2b0>
 8001120:	428d      	cmp	r5, r1
 8001122:	d92d      	bls.n	8001180 <__udivmoddi4+0x2b0>
 8001124:	3802      	subs	r0, #2
 8001126:	4461      	add	r1, ip
 8001128:	1b49      	subs	r1, r1, r5
 800112a:	b292      	uxth	r2, r2
 800112c:	fbb1 f5f7 	udiv	r5, r1, r7
 8001130:	fb07 1115 	mls	r1, r7, r5, r1
 8001134:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8001138:	fb05 f10e 	mul.w	r1, r5, lr
 800113c:	4291      	cmp	r1, r2
 800113e:	d908      	bls.n	8001152 <__udivmoddi4+0x282>
 8001140:	eb1c 0202 	adds.w	r2, ip, r2
 8001144:	f105 38ff 	add.w	r8, r5, #4294967295
 8001148:	d216      	bcs.n	8001178 <__udivmoddi4+0x2a8>
 800114a:	4291      	cmp	r1, r2
 800114c:	d914      	bls.n	8001178 <__udivmoddi4+0x2a8>
 800114e:	3d02      	subs	r5, #2
 8001150:	4462      	add	r2, ip
 8001152:	1a52      	subs	r2, r2, r1
 8001154:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8001158:	e738      	b.n	8000fcc <__udivmoddi4+0xfc>
 800115a:	4631      	mov	r1, r6
 800115c:	4630      	mov	r0, r6
 800115e:	e708      	b.n	8000f72 <__udivmoddi4+0xa2>
 8001160:	4639      	mov	r1, r7
 8001162:	e6e6      	b.n	8000f32 <__udivmoddi4+0x62>
 8001164:	4610      	mov	r0, r2
 8001166:	e6fb      	b.n	8000f60 <__udivmoddi4+0x90>
 8001168:	4548      	cmp	r0, r9
 800116a:	d2a9      	bcs.n	80010c0 <__udivmoddi4+0x1f0>
 800116c:	ebb9 0802 	subs.w	r8, r9, r2
 8001170:	eb65 0e0c 	sbc.w	lr, r5, ip
 8001174:	3b01      	subs	r3, #1
 8001176:	e7a3      	b.n	80010c0 <__udivmoddi4+0x1f0>
 8001178:	4645      	mov	r5, r8
 800117a:	e7ea      	b.n	8001152 <__udivmoddi4+0x282>
 800117c:	462b      	mov	r3, r5
 800117e:	e794      	b.n	80010aa <__udivmoddi4+0x1da>
 8001180:	4640      	mov	r0, r8
 8001182:	e7d1      	b.n	8001128 <__udivmoddi4+0x258>
 8001184:	46d0      	mov	r8, sl
 8001186:	e77b      	b.n	8001080 <__udivmoddi4+0x1b0>
 8001188:	3d02      	subs	r5, #2
 800118a:	4462      	add	r2, ip
 800118c:	e732      	b.n	8000ff4 <__udivmoddi4+0x124>
 800118e:	4608      	mov	r0, r1
 8001190:	e70a      	b.n	8000fa8 <__udivmoddi4+0xd8>
 8001192:	4464      	add	r4, ip
 8001194:	3802      	subs	r0, #2
 8001196:	e742      	b.n	800101e <__udivmoddi4+0x14e>

08001198 <__aeabi_idiv0>:
 8001198:	4770      	bx	lr
 800119a:	bf00      	nop

0800119c <__io_putchar>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

PUTCHAR_PROTOTYPE {
 800119c:	b580      	push	{r7, lr}
 800119e:	b082      	sub	sp, #8
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart3, (uint8_t*) &ch, 1, 0xFFFF);
 80011a4:	1d39      	adds	r1, r7, #4
 80011a6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80011aa:	2201      	movs	r2, #1
 80011ac:	4803      	ldr	r0, [pc, #12]	; (80011bc <__io_putchar+0x20>)
 80011ae:	f00b fbf3 	bl	800c998 <HAL_UART_Transmit>
	return ch;
 80011b2:	687b      	ldr	r3, [r7, #4]
}
 80011b4:	4618      	mov	r0, r3
 80011b6:	3708      	adds	r7, #8
 80011b8:	46bd      	mov	sp, r7
 80011ba:	bd80      	pop	{r7, pc}
 80011bc:	20000528 	.word	0x20000528

080011c0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	b084      	sub	sp, #16
 80011c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* Copy from FLASH to itcm */
  memcpy(&_sitcm, &_siitcm, ((void*) &_eitcm - (void*) &_sitcm));
 80011c6:	4ab5      	ldr	r2, [pc, #724]	; (800149c <main+0x2dc>)
 80011c8:	4bb5      	ldr	r3, [pc, #724]	; (80014a0 <main+0x2e0>)
 80011ca:	1ad3      	subs	r3, r2, r3
 80011cc:	461a      	mov	r2, r3
 80011ce:	49b5      	ldr	r1, [pc, #724]	; (80014a4 <main+0x2e4>)
 80011d0:	48b3      	ldr	r0, [pc, #716]	; (80014a0 <main+0x2e0>)
 80011d2:	f017 fdf5 	bl	8018dc0 <memcpy>
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 80011d6:	4bb4      	ldr	r3, [pc, #720]	; (80014a8 <main+0x2e8>)
 80011d8:	695b      	ldr	r3, [r3, #20]
 80011da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d11b      	bne.n	800121a <main+0x5a>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80011e2:	f3bf 8f4f 	dsb	sy
}
 80011e6:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80011e8:	f3bf 8f6f 	isb	sy
}
 80011ec:	bf00      	nop

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 80011ee:	4bae      	ldr	r3, [pc, #696]	; (80014a8 <main+0x2e8>)
 80011f0:	2200      	movs	r2, #0
 80011f2:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 80011f6:	f3bf 8f4f 	dsb	sy
}
 80011fa:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80011fc:	f3bf 8f6f 	isb	sy
}
 8001200:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8001202:	4ba9      	ldr	r3, [pc, #676]	; (80014a8 <main+0x2e8>)
 8001204:	695b      	ldr	r3, [r3, #20]
 8001206:	4aa8      	ldr	r2, [pc, #672]	; (80014a8 <main+0x2e8>)
 8001208:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800120c:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 800120e:	f3bf 8f4f 	dsb	sy
}
 8001212:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001214:	f3bf 8f6f 	isb	sy
}
 8001218:	e000      	b.n	800121c <main+0x5c>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 800121a:	bf00      	nop
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 800121c:	4ba2      	ldr	r3, [pc, #648]	; (80014a8 <main+0x2e8>)
 800121e:	695b      	ldr	r3, [r3, #20]
 8001220:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001224:	2b00      	cmp	r3, #0
 8001226:	d138      	bne.n	800129a <main+0xda>

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 8001228:	4b9f      	ldr	r3, [pc, #636]	; (80014a8 <main+0x2e8>)
 800122a:	2200      	movs	r2, #0
 800122c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8001230:	f3bf 8f4f 	dsb	sy
}
 8001234:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 8001236:	4b9c      	ldr	r3, [pc, #624]	; (80014a8 <main+0x2e8>)
 8001238:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800123c:	60fb      	str	r3, [r7, #12]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 800123e:	68fb      	ldr	r3, [r7, #12]
 8001240:	0b5b      	lsrs	r3, r3, #13
 8001242:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8001246:	60bb      	str	r3, [r7, #8]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8001248:	68fb      	ldr	r3, [r7, #12]
 800124a:	08db      	lsrs	r3, r3, #3
 800124c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001250:	607b      	str	r3, [r7, #4]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8001252:	68bb      	ldr	r3, [r7, #8]
 8001254:	015a      	lsls	r2, r3, #5
 8001256:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 800125a:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 800125c:	687a      	ldr	r2, [r7, #4]
 800125e:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8001260:	4991      	ldr	r1, [pc, #580]	; (80014a8 <main+0x2e8>)
 8001262:	4313      	orrs	r3, r2
 8001264:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	1e5a      	subs	r2, r3, #1
 800126c:	607a      	str	r2, [r7, #4]
 800126e:	2b00      	cmp	r3, #0
 8001270:	d1ef      	bne.n	8001252 <main+0x92>
    } while(sets-- != 0U);
 8001272:	68bb      	ldr	r3, [r7, #8]
 8001274:	1e5a      	subs	r2, r3, #1
 8001276:	60ba      	str	r2, [r7, #8]
 8001278:	2b00      	cmp	r3, #0
 800127a:	d1e5      	bne.n	8001248 <main+0x88>
  __ASM volatile ("dsb 0xF":::"memory");
 800127c:	f3bf 8f4f 	dsb	sy
}
 8001280:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8001282:	4b89      	ldr	r3, [pc, #548]	; (80014a8 <main+0x2e8>)
 8001284:	695b      	ldr	r3, [r3, #20]
 8001286:	4a88      	ldr	r2, [pc, #544]	; (80014a8 <main+0x2e8>)
 8001288:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800128c:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 800128e:	f3bf 8f4f 	dsb	sy
}
 8001292:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8001294:	f3bf 8f6f 	isb	sy
}
 8001298:	e000      	b.n	800129c <main+0xdc>
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 800129a:	bf00      	nop
  SCB_EnableDCache();

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800129c:	f001 fd0c 	bl	8002cb8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80012a0:	f000 f93e 	bl	8001520 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80012a4:	f000 fcfe 	bl	8001ca4 <MX_GPIO_Init>
  MX_LPTIM1_Init();
 80012a8:	f000 fbde 	bl	8001a68 <MX_LPTIM1_Init>
  MX_DAC1_Init();
 80012ac:	f000 fa58 	bl	8001760 <MX_DAC1_Init>
  MX_USART3_UART_Init();
 80012b0:	f000 fcaa 	bl	8001c08 <MX_USART3_UART_Init>
  MX_TIM3_Init();
 80012b4:	f000 fc5a 	bl	8001b6c <MX_TIM3_Init>
  MX_TIM1_Init();
 80012b8:	f000 fc04 	bl	8001ac4 <MX_TIM1_Init>
  MX_HRTIM_Init();
 80012bc:	f000 fa82 	bl	80017c4 <MX_HRTIM_Init>
  MX_ADC3_Init();
 80012c0:	f000 f9ec 	bl	800169c <MX_ADC3_Init>
  MX_LWIP_Init();
 80012c4:	f00c fc7c 	bl	800dbc0 <MX_LWIP_Init>
  /* USER CODE BEGIN 2 */
  printf("\033c"); //clears screen
 80012c8:	4878      	ldr	r0, [pc, #480]	; (80014ac <main+0x2ec>)
 80012ca:	f017 fbab 	bl	8018a24 <iprintf>
  printf("Atomic Clock - Source __TIMESTAMP__: %s\r\n", __TIMESTAMP__);
 80012ce:	4978      	ldr	r1, [pc, #480]	; (80014b0 <main+0x2f0>)
 80012d0:	4878      	ldr	r0, [pc, #480]	; (80014b4 <main+0x2f4>)
 80012d2:	f017 fba7 	bl	8018a24 <iprintf>

#ifdef SYNTH_ENABLE
	if (init_synthesiser(MW_power) != SUCCESS) {
 80012d6:	4b78      	ldr	r3, [pc, #480]	; (80014b8 <main+0x2f8>)
 80012d8:	781b      	ldrb	r3, [r3, #0]
 80012da:	4618      	mov	r0, r3
 80012dc:	f019 fb3c 	bl	801a958 <__init_synthesiser_veneer>
 80012e0:	4603      	mov	r3, r0
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d004      	beq.n	80012f0 <main+0x130>
		printf("Synthesiser initialisation failed!\r\n");
 80012e6:	4875      	ldr	r0, [pc, #468]	; (80014bc <main+0x2fc>)
 80012e8:	f017 fc02 	bl	8018af0 <puts>
		Error_Handler();
 80012ec:	f000 fe58 	bl	8001fa0 <Error_Handler>
	}
#ifdef MW_VERBOSE
	printf("LO2GAIN set at: 0x%x \r\n", MW_power);
 80012f0:	4b71      	ldr	r3, [pc, #452]	; (80014b8 <main+0x2f8>)
 80012f2:	781b      	ldrb	r3, [r3, #0]
 80012f4:	4619      	mov	r1, r3
 80012f6:	4872      	ldr	r0, [pc, #456]	; (80014c0 <main+0x300>)
 80012f8:	f017 fb94 	bl	8018a24 <iprintf>
#endif	//MW_VERBOSE
#endif //SYNTH_ENABLE

	/* Start a low power timer to flash an LED approximately every second */
	if (HAL_LPTIM_Counter_Start_IT(&hlptim1, 1024) != HAL_OK) {
 80012fc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001300:	4870      	ldr	r0, [pc, #448]	; (80014c4 <main+0x304>)
 8001302:	f006 fee5 	bl	80080d0 <HAL_LPTIM_Counter_Start_IT>
 8001306:	4603      	mov	r3, r0
 8001308:	2b00      	cmp	r3, #0
 800130a:	d004      	beq.n	8001316 <main+0x156>
		printf("Failed to start slow flashing LED!\r\n");
 800130c:	486e      	ldr	r0, [pc, #440]	; (80014c8 <main+0x308>)
 800130e:	f017 fbef 	bl	8018af0 <puts>
		Error_Handler();
 8001312:	f000 fe45 	bl	8001fa0 <Error_Handler>
	}

	/* Start the DAC and zero its output */
	if (HAL_DAC_Start(&hdac1, DAC_CHANNEL_1) != HAL_OK) {
 8001316:	2100      	movs	r1, #0
 8001318:	486c      	ldr	r0, [pc, #432]	; (80014cc <main+0x30c>)
 800131a:	f003 fc50 	bl	8004bbe <HAL_DAC_Start>
 800131e:	4603      	mov	r3, r0
 8001320:	2b00      	cmp	r3, #0
 8001322:	d004      	beq.n	800132e <main+0x16e>
		printf("Failure to initialise DAC \r\n");
 8001324:	486a      	ldr	r0, [pc, #424]	; (80014d0 <main+0x310>)
 8001326:	f017 fbe3 	bl	8018af0 <puts>
		Error_Handler();
 800132a:	f000 fe39 	bl	8001fa0 <Error_Handler>
	}
	printf("Setting DAC output to 1.00V \r\n");
 800132e:	4869      	ldr	r0, [pc, #420]	; (80014d4 <main+0x314>)
 8001330:	f017 fbde 	bl	8018af0 <puts>
	if(HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R, 1241) != HAL_OK){
 8001334:	f240 43d9 	movw	r3, #1241	; 0x4d9
 8001338:	2200      	movs	r2, #0
 800133a:	2100      	movs	r1, #0
 800133c:	4863      	ldr	r0, [pc, #396]	; (80014cc <main+0x30c>)
 800133e:	f003 fc90 	bl	8004c62 <HAL_DAC_SetValue>
 8001342:	4603      	mov	r3, r0
 8001344:	2b00      	cmp	r3, #0
 8001346:	d004      	beq.n	8001352 <main+0x192>
			printf("DAC setup failed!\r\n");
 8001348:	4863      	ldr	r0, [pc, #396]	; (80014d8 <main+0x318>)
 800134a:	f017 fbd1 	bl	8018af0 <puts>
		Error_Handler();
 800134e:	f000 fe27 	bl	8001fa0 <Error_Handler>
//	printf("Setting spare SMA output high \r\n");
//	HAL_GPIO_WritePin(SPARE_OUT_GPIO_Port, SPARE_OUT_Pin, GPIO_PIN_RESET); // Sets spare SMA output low

	/* Laser tuning pin */
//	LASER_TUNING_GPIO_Port, LASER_TUNING_Pin
	HAL_GPIO_WritePin(LASER_TUNING_GPIO_Port, LASER_TUNING_Pin, GPIO_PIN_SET); // Laser_tuning output high
 8001352:	2201      	movs	r2, #1
 8001354:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001358:	4860      	ldr	r0, [pc, #384]	; (80014dc <main+0x31c>)
 800135a:	f005 faad 	bl	80068b8 <HAL_GPIO_WritePin>
	printf("Requesting FPGA CW absorption \r\n");
 800135e:	4860      	ldr	r0, [pc, #384]	; (80014e0 <main+0x320>)
 8001360:	f017 fbc6 	bl	8018af0 <puts>
//	HAL_GPIO_WritePin(LASER_TUNING_GPIO_Port, LASER_TUNING_Pin, GPIO_PIN_RESET); // Laser_tuning SMA output low

	/* MW invalid */
//	MW_INVALID_GPIO_Port, MW_INVALID_Pin
//	HAL_GPIO_WritePin(MW_INVALID_GPIO_Port, MW_INVALID_Pin, GPIO_PIN_SET); // MW_invalid output high
	printf("Setting MW invalid output low \r\n");
 8001364:	485f      	ldr	r0, [pc, #380]	; (80014e4 <main+0x324>)
 8001366:	f017 fbc3 	bl	8018af0 <puts>
	HAL_GPIO_WritePin(MW_INVALID_GPIO_Port, MW_INVALID_Pin, GPIO_PIN_RESET); // MW_invalid output low
 800136a:	2200      	movs	r2, #0
 800136c:	2102      	movs	r1, #2
 800136e:	485b      	ldr	r0, [pc, #364]	; (80014dc <main+0x31c>)
 8001370:	f005 faa2 	bl	80068b8 <HAL_GPIO_WritePin>

	/* Fire up the ADC */
	// external trigger, single conversion selected in ioc file
	// calibrate ADC for better accuracy and start it w/ interrupt
	if(HAL_ADCEx_Calibration_Start(&hadc3, ADC_CALIB_OFFSET, ADC_SINGLE_ENDED) != HAL_OK){
 8001374:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8001378:	2100      	movs	r1, #0
 800137a:	485b      	ldr	r0, [pc, #364]	; (80014e8 <main+0x328>)
 800137c:	f003 fa58 	bl	8004830 <HAL_ADCEx_Calibration_Start>
 8001380:	4603      	mov	r3, r0
 8001382:	2b00      	cmp	r3, #0
 8001384:	d004      	beq.n	8001390 <main+0x1d0>
		printf("ADC calibration failure \r\n");
 8001386:	4859      	ldr	r0, [pc, #356]	; (80014ec <main+0x32c>)
 8001388:	f017 fbb2 	bl	8018af0 <puts>
		Error_Handler();
 800138c:	f000 fe08 	bl	8001fa0 <Error_Handler>
	}
	printf("ADC calibrated successfully \r\n");
 8001390:	4857      	ldr	r0, [pc, #348]	; (80014f0 <main+0x330>)
 8001392:	f017 fbad 	bl	8018af0 <puts>
	//Start the ADC with interrupts enabled
	if(HAL_ADC_Start_IT(&hadc3) != HAL_OK){
 8001396:	4854      	ldr	r0, [pc, #336]	; (80014e8 <main+0x328>)
 8001398:	f002 f938 	bl	800360c <HAL_ADC_Start_IT>
 800139c:	4603      	mov	r3, r0
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d004      	beq.n	80013ac <main+0x1ec>
		printf("Failed to start ADC with interrupt capability \r\n");
 80013a2:	4854      	ldr	r0, [pc, #336]	; (80014f4 <main+0x334>)
 80013a4:	f017 fba4 	bl	8018af0 <puts>
	                Error_Handler();
 80013a8:	f000 fdfa 	bl	8001fa0 <Error_Handler>
	}
	printf("ADC interrupt callback enabled \r\n");
 80013ac:	4852      	ldr	r0, [pc, #328]	; (80014f8 <main+0x338>)
 80013ae:	f017 fb9f 	bl	8018af0 <puts>
//		if (pin_status != last_pin_status) {
//			printf("Blue button status: %u \r\n", pin_status);
//			last_pin_status = pin_status;
//		}

		blue_button_status = HAL_GPIO_ReadPin(BLUE_BUTTON_GPIO_Port, BLUE_BUTTON_Pin);
 80013b2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80013b6:	4851      	ldr	r0, [pc, #324]	; (80014fc <main+0x33c>)
 80013b8:	f005 fa66 	bl	8006888 <HAL_GPIO_ReadPin>
 80013bc:	4603      	mov	r3, r0
 80013be:	2b00      	cmp	r3, #0
 80013c0:	bf14      	ite	ne
 80013c2:	2301      	movne	r3, #1
 80013c4:	2300      	moveq	r3, #0
 80013c6:	b2da      	uxtb	r2, r3
 80013c8:	4b4d      	ldr	r3, [pc, #308]	; (8001500 <main+0x340>)
 80013ca:	701a      	strb	r2, [r3, #0]
		if (blue_button_status) {// If blue button is pressed
 80013cc:	4b4c      	ldr	r3, [pc, #304]	; (8001500 <main+0x340>)
 80013ce:	781b      	ldrb	r3, [r3, #0]
 80013d0:	b2db      	uxtb	r3, r3
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d048      	beq.n	8001468 <main+0x2a8>
			printf("Blue button pressed....\r\n");
 80013d6:	484b      	ldr	r0, [pc, #300]	; (8001504 <main+0x344>)
 80013d8:	f017 fb8a 	bl	8018af0 <puts>
			printf("Requesting FPGA POP \r\n");
 80013dc:	484a      	ldr	r0, [pc, #296]	; (8001508 <main+0x348>)
 80013de:	f017 fb87 	bl	8018af0 <puts>
			HAL_GPIO_WritePin(LASER_TUNING_GPIO_Port, LASER_TUNING_Pin, GPIO_PIN_RESET); // Laser_tuning SMA output low
 80013e2:	2200      	movs	r2, #0
 80013e4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80013e8:	483c      	ldr	r0, [pc, #240]	; (80014dc <main+0x31c>)
 80013ea:	f005 fa65 	bl	80068b8 <HAL_GPIO_WritePin>
			//set_MW_power(0x03); //set maximum MW power to improve contrast
			//MW_frequency_toggle (3035733689, 3035733789); //infinite loop toggling 100Hz on left of DR dip
			//MW_frequency_toggle (3035733689, 3035733699); //infinite loop toggling 10Hz on left of DR dip

			//change the MW power each time the button is pressed, unless it's the first time round this loop
			if (mw_sweep_started) {
 80013ee:	4b47      	ldr	r3, [pc, #284]	; (800150c <main+0x34c>)
 80013f0:	781b      	ldrb	r3, [r3, #0]
 80013f2:	b2db      	uxtb	r3, r3
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d018      	beq.n	800142a <main+0x26a>
				++MW_power; //increase MW_power value by 1
 80013f8:	4b2f      	ldr	r3, [pc, #188]	; (80014b8 <main+0x2f8>)
 80013fa:	781b      	ldrb	r3, [r3, #0]
 80013fc:	3301      	adds	r3, #1
 80013fe:	b2da      	uxtb	r2, r3
 8001400:	4b2d      	ldr	r3, [pc, #180]	; (80014b8 <main+0x2f8>)
 8001402:	701a      	strb	r2, [r3, #0]
				if (MW_power>3) { //Loop MW_power back round to 0 if above maximum permissible value i.e. 3
 8001404:	4b2c      	ldr	r3, [pc, #176]	; (80014b8 <main+0x2f8>)
 8001406:	781b      	ldrb	r3, [r3, #0]
 8001408:	2b03      	cmp	r3, #3
 800140a:	d902      	bls.n	8001412 <main+0x252>
					MW_power = 0;
 800140c:	4b2a      	ldr	r3, [pc, #168]	; (80014b8 <main+0x2f8>)
 800140e:	2200      	movs	r2, #0
 8001410:	701a      	strb	r2, [r3, #0]
				}
				set_MW_power(MW_power);
 8001412:	4b29      	ldr	r3, [pc, #164]	; (80014b8 <main+0x2f8>)
 8001414:	781b      	ldrb	r3, [r3, #0]
 8001416:	4618      	mov	r0, r3
 8001418:	f019 faa2 	bl	801a960 <__set_MW_power_veneer>
#ifdef MW_VERBOSE
				printf("LO2GAIN changed to: 0x%x \r\n", MW_power);
 800141c:	4b26      	ldr	r3, [pc, #152]	; (80014b8 <main+0x2f8>)
 800141e:	781b      	ldrb	r3, [r3, #0]
 8001420:	4619      	mov	r1, r3
 8001422:	483b      	ldr	r0, [pc, #236]	; (8001510 <main+0x350>)
 8001424:	f017 fafe 	bl	8018a24 <iprintf>
 8001428:	e019      	b.n	800145e <main+0x29e>
#endif //MW_VERBOSE
			} else {
					printf("Initiating sweep.\r\n");
 800142a:	483a      	ldr	r0, [pc, #232]	; (8001514 <main+0x354>)
 800142c:	f017 fb60 	bl	8018af0 <puts>
					mw_sweep_started = true;
 8001430:	4b36      	ldr	r3, [pc, #216]	; (800150c <main+0x34c>)
 8001432:	2201      	movs	r2, #1
 8001434:	701a      	strb	r2, [r3, #0]
			}
			while(blue_button_status) {//remain here polling button until it is released
 8001436:	e012      	b.n	800145e <main+0x29e>
				timer_delay(SLOW_TIMER, 100); //10ms delay
 8001438:	4b37      	ldr	r3, [pc, #220]	; (8001518 <main+0x358>)
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	2164      	movs	r1, #100	; 0x64
 800143e:	4618      	mov	r0, r3
 8001440:	f019 fa7e 	bl	801a940 <__timer_delay_veneer>
				blue_button_status = HAL_GPIO_ReadPin(BLUE_BUTTON_GPIO_Port, BLUE_BUTTON_Pin);
 8001444:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001448:	482c      	ldr	r0, [pc, #176]	; (80014fc <main+0x33c>)
 800144a:	f005 fa1d 	bl	8006888 <HAL_GPIO_ReadPin>
 800144e:	4603      	mov	r3, r0
 8001450:	2b00      	cmp	r3, #0
 8001452:	bf14      	ite	ne
 8001454:	2301      	movne	r3, #1
 8001456:	2300      	moveq	r3, #0
 8001458:	b2da      	uxtb	r2, r3
 800145a:	4b29      	ldr	r3, [pc, #164]	; (8001500 <main+0x340>)
 800145c:	701a      	strb	r2, [r3, #0]
			while(blue_button_status) {//remain here polling button until it is released
 800145e:	4b28      	ldr	r3, [pc, #160]	; (8001500 <main+0x340>)
 8001460:	781b      	ldrb	r3, [r3, #0]
 8001462:	b2db      	uxtb	r3, r3
 8001464:	2b00      	cmp	r3, #0
 8001466:	d1e7      	bne.n	8001438 <main+0x278>
			}
		}

		if (mw_sweep_started) {//won't execute until the first time the blue button is pressed
 8001468:	4b28      	ldr	r3, [pc, #160]	; (800150c <main+0x34c>)
 800146a:	781b      	ldrb	r3, [r3, #0]
 800146c:	b2db      	uxtb	r3, r3
 800146e:	2b00      	cmp	r3, #0
 8001470:	d09f      	beq.n	80013b2 <main+0x1f2>
			/* Run the frequency sweep */
			HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_SET); //turn on red LED
 8001472:	2201      	movs	r2, #1
 8001474:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001478:	4818      	ldr	r0, [pc, #96]	; (80014dc <main+0x31c>)
 800147a:	f005 fa1d 	bl	80068b8 <HAL_GPIO_WritePin>
			run_sweep();
 800147e:	f019 fa67 	bl	801a950 <__run_sweep_veneer>
			HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET); //turn off red LED
 8001482:	2200      	movs	r2, #0
 8001484:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001488:	4814      	ldr	r0, [pc, #80]	; (80014dc <main+0x31c>)
 800148a:	f005 fa15 	bl	80068b8 <HAL_GPIO_WritePin>
			//printf("Sweep complete.\r\n");
			printf("LO2GAIN: 0x%x \r\n", MW_power);
 800148e:	4b0a      	ldr	r3, [pc, #40]	; (80014b8 <main+0x2f8>)
 8001490:	781b      	ldrb	r3, [r3, #0]
 8001492:	4619      	mov	r1, r3
 8001494:	4821      	ldr	r0, [pc, #132]	; (800151c <main+0x35c>)
 8001496:	f017 fac5 	bl	8018a24 <iprintf>
		blue_button_status = HAL_GPIO_ReadPin(BLUE_BUTTON_GPIO_Port, BLUE_BUTTON_Pin);
 800149a:	e78a      	b.n	80013b2 <main+0x1f2>
 800149c:	00000b10 	.word	0x00000b10
 80014a0:	00000000 	.word	0x00000000
 80014a4:	08000298 	.word	0x08000298
 80014a8:	e000ed00 	.word	0xe000ed00
 80014ac:	0801a978 	.word	0x0801a978
 80014b0:	0801a97c 	.word	0x0801a97c
 80014b4:	0801a998 	.word	0x0801a998
 80014b8:	20000000 	.word	0x20000000
 80014bc:	0801a9c4 	.word	0x0801a9c4
 80014c0:	0801a9e8 	.word	0x0801a9e8
 80014c4:	20000458 	.word	0x20000458
 80014c8:	0801aa00 	.word	0x0801aa00
 80014cc:	20000368 	.word	0x20000368
 80014d0:	0801aa24 	.word	0x0801aa24
 80014d4:	0801aa40 	.word	0x0801aa40
 80014d8:	0801aa60 	.word	0x0801aa60
 80014dc:	58020400 	.word	0x58020400
 80014e0:	0801aa74 	.word	0x0801aa74
 80014e4:	0801aa94 	.word	0x0801aa94
 80014e8:	20000304 	.word	0x20000304
 80014ec:	0801aab4 	.word	0x0801aab4
 80014f0:	0801aad0 	.word	0x0801aad0
 80014f4:	0801aaf0 	.word	0x0801aaf0
 80014f8:	0801ab20 	.word	0x0801ab20
 80014fc:	58020800 	.word	0x58020800
 8001500:	200005bd 	.word	0x200005bd
 8001504:	0801ab44 	.word	0x0801ab44
 8001508:	0801ab60 	.word	0x0801ab60
 800150c:	200005bc 	.word	0x200005bc
 8001510:	0801ab78 	.word	0x0801ab78
 8001514:	0801ab94 	.word	0x0801ab94
 8001518:	20000018 	.word	0x20000018
 800151c:	0801aba8 	.word	0x0801aba8

08001520 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001520:	b580      	push	{r7, lr}
 8001522:	b0a4      	sub	sp, #144	; 0x90
 8001524:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001526:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800152a:	224c      	movs	r2, #76	; 0x4c
 800152c:	2100      	movs	r1, #0
 800152e:	4618      	mov	r0, r3
 8001530:	f017 fbce 	bl	8018cd0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001534:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001538:	2220      	movs	r2, #32
 800153a:	2100      	movs	r1, #0
 800153c:	4618      	mov	r0, r3
 800153e:	f017 fbc7 	bl	8018cd0 <memset>
  RCC_CRSInitTypeDef RCC_CRSInitStruct = {0};
 8001542:	f107 030c 	add.w	r3, r7, #12
 8001546:	2200      	movs	r2, #0
 8001548:	601a      	str	r2, [r3, #0]
 800154a:	605a      	str	r2, [r3, #4]
 800154c:	609a      	str	r2, [r3, #8]
 800154e:	60da      	str	r2, [r3, #12]
 8001550:	611a      	str	r2, [r3, #16]
 8001552:	615a      	str	r2, [r3, #20]

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8001554:	2002      	movs	r0, #2
 8001556:	f007 f919 	bl	800878c <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800155a:	2300      	movs	r3, #0
 800155c:	60bb      	str	r3, [r7, #8]
 800155e:	4b4c      	ldr	r3, [pc, #304]	; (8001690 <SystemClock_Config+0x170>)
 8001560:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001562:	4a4b      	ldr	r2, [pc, #300]	; (8001690 <SystemClock_Config+0x170>)
 8001564:	f023 0301 	bic.w	r3, r3, #1
 8001568:	62d3      	str	r3, [r2, #44]	; 0x2c
 800156a:	4b49      	ldr	r3, [pc, #292]	; (8001690 <SystemClock_Config+0x170>)
 800156c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800156e:	f003 0301 	and.w	r3, r3, #1
 8001572:	60bb      	str	r3, [r7, #8]
 8001574:	4b47      	ldr	r3, [pc, #284]	; (8001694 <SystemClock_Config+0x174>)
 8001576:	699b      	ldr	r3, [r3, #24]
 8001578:	4a46      	ldr	r2, [pc, #280]	; (8001694 <SystemClock_Config+0x174>)
 800157a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800157e:	6193      	str	r3, [r2, #24]
 8001580:	4b44      	ldr	r3, [pc, #272]	; (8001694 <SystemClock_Config+0x174>)
 8001582:	699b      	ldr	r3, [r3, #24]
 8001584:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001588:	60bb      	str	r3, [r7, #8]
 800158a:	68bb      	ldr	r3, [r7, #8]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 800158c:	bf00      	nop
 800158e:	4b41      	ldr	r3, [pc, #260]	; (8001694 <SystemClock_Config+0x174>)
 8001590:	699b      	ldr	r3, [r3, #24]
 8001592:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001596:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800159a:	d1f8      	bne.n	800158e <SystemClock_Config+0x6e>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 800159c:	f007 f8e6 	bl	800876c <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80015a0:	f001 fc40 	bl	8002e24 <HAL_GetREVID>
 80015a4:	4b3c      	ldr	r3, [pc, #240]	; (8001698 <SystemClock_Config+0x178>)
 80015a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015a8:	4a3b      	ldr	r2, [pc, #236]	; (8001698 <SystemClock_Config+0x178>)
 80015aa:	f023 0318 	bic.w	r3, r3, #24
 80015ae:	6713      	str	r3, [r2, #112]	; 0x70

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE
 80015b0:	2325      	movs	r3, #37	; 0x25
 80015b2:	647b      	str	r3, [r7, #68]	; 0x44
                              |RCC_OSCILLATORTYPE_LSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80015b4:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80015b8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80015ba:	2301      	movs	r3, #1
 80015bc:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80015be:	2301      	movs	r3, #1
 80015c0:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80015c2:	2302      	movs	r3, #2
 80015c4:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80015c6:	2302      	movs	r3, #2
 80015c8:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLM = 1;
 80015ca:	2301      	movs	r3, #1
 80015cc:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLN = 80;
 80015ce:	2350      	movs	r3, #80	; 0x50
 80015d0:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_OscInitStruct.PLL.PLLP = 2;
 80015d2:	2302      	movs	r3, #2
 80015d4:	67bb      	str	r3, [r7, #120]	; 0x78
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80015d6:	2304      	movs	r3, #4
 80015d8:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80015da:	2302      	movs	r3, #2
 80015dc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 80015e0:	230c      	movs	r3, #12
 80015e2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80015e6:	2300      	movs	r3, #0
 80015e8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80015ec:	2300      	movs	r3, #0
 80015ee:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80015f2:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80015f6:	4618      	mov	r0, r3
 80015f8:	f007 f902 	bl	8008800 <HAL_RCC_OscConfig>
 80015fc:	4603      	mov	r3, r0
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d001      	beq.n	8001606 <SystemClock_Config+0xe6>
  {
    Error_Handler();
 8001602:	f000 fccd 	bl	8001fa0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001606:	233f      	movs	r3, #63	; 0x3f
 8001608:	627b      	str	r3, [r7, #36]	; 0x24
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800160a:	2303      	movs	r3, #3
 800160c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800160e:	2300      	movs	r3, #0
 8001610:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV4;
 8001612:	2309      	movs	r3, #9
 8001614:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8001616:	2300      	movs	r3, #0
 8001618:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 800161a:	2300      	movs	r3, #0
 800161c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV16;
 800161e:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8001622:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8001624:	2300      	movs	r3, #0
 8001626:	643b      	str	r3, [r7, #64]	; 0x40

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001628:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800162c:	2101      	movs	r1, #1
 800162e:	4618      	mov	r0, r3
 8001630:	f007 fd40 	bl	80090b4 <HAL_RCC_ClockConfig>
 8001634:	4603      	mov	r3, r0
 8001636:	2b00      	cmp	r3, #0
 8001638:	d001      	beq.n	800163e <SystemClock_Config+0x11e>
  {
    Error_Handler();
 800163a:	f000 fcb1 	bl	8001fa0 <Error_Handler>
  }

  /** Enables the Clock Security System
  */
  HAL_RCC_EnableCSS();
 800163e:	f007 feef 	bl	8009420 <HAL_RCC_EnableCSS>

  /** Enable the SYSCFG APB clock
  */
  __HAL_RCC_CRS_CLK_ENABLE();
 8001642:	4b15      	ldr	r3, [pc, #84]	; (8001698 <SystemClock_Config+0x178>)
 8001644:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8001648:	4a13      	ldr	r2, [pc, #76]	; (8001698 <SystemClock_Config+0x178>)
 800164a:	f043 0302 	orr.w	r3, r3, #2
 800164e:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 8001652:	4b11      	ldr	r3, [pc, #68]	; (8001698 <SystemClock_Config+0x178>)
 8001654:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8001658:	f003 0302 	and.w	r3, r3, #2
 800165c:	607b      	str	r3, [r7, #4]
 800165e:	687b      	ldr	r3, [r7, #4]

  /** Configures CRS
  */
  RCC_CRSInitStruct.Prescaler = RCC_CRS_SYNC_DIV1;
 8001660:	2300      	movs	r3, #0
 8001662:	60fb      	str	r3, [r7, #12]
  RCC_CRSInitStruct.Source = RCC_CRS_SYNC_SOURCE_LSE;
 8001664:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8001668:	613b      	str	r3, [r7, #16]
  RCC_CRSInitStruct.Polarity = RCC_CRS_SYNC_POLARITY_RISING;
 800166a:	2300      	movs	r3, #0
 800166c:	617b      	str	r3, [r7, #20]
  RCC_CRSInitStruct.ReloadValue = __HAL_RCC_CRS_RELOADVALUE_CALCULATE(48000000,32768);
 800166e:	f240 53b7 	movw	r3, #1463	; 0x5b7
 8001672:	61bb      	str	r3, [r7, #24]
  RCC_CRSInitStruct.ErrorLimitValue = 34;
 8001674:	2322      	movs	r3, #34	; 0x22
 8001676:	61fb      	str	r3, [r7, #28]
  RCC_CRSInitStruct.HSI48CalibrationValue = 32;
 8001678:	2320      	movs	r3, #32
 800167a:	623b      	str	r3, [r7, #32]

  HAL_RCCEx_CRSConfig(&RCC_CRSInitStruct);
 800167c:	f107 030c 	add.w	r3, r7, #12
 8001680:	4618      	mov	r0, r3
 8001682:	f00a fc69 	bl	800bf58 <HAL_RCCEx_CRSConfig>
}
 8001686:	bf00      	nop
 8001688:	3790      	adds	r7, #144	; 0x90
 800168a:	46bd      	mov	sp, r7
 800168c:	bd80      	pop	{r7, pc}
 800168e:	bf00      	nop
 8001690:	58000400 	.word	0x58000400
 8001694:	58024800 	.word	0x58024800
 8001698:	58024400 	.word	0x58024400

0800169c <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 800169c:	b580      	push	{r7, lr}
 800169e:	b088      	sub	sp, #32
 80016a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80016a2:	1d3b      	adds	r3, r7, #4
 80016a4:	2200      	movs	r2, #0
 80016a6:	601a      	str	r2, [r3, #0]
 80016a8:	605a      	str	r2, [r3, #4]
 80016aa:	609a      	str	r2, [r3, #8]
 80016ac:	60da      	str	r2, [r3, #12]
 80016ae:	611a      	str	r2, [r3, #16]
 80016b0:	615a      	str	r2, [r3, #20]
 80016b2:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 80016b4:	4b28      	ldr	r3, [pc, #160]	; (8001758 <MX_ADC3_Init+0xbc>)
 80016b6:	4a29      	ldr	r2, [pc, #164]	; (800175c <MX_ADC3_Init+0xc0>)
 80016b8:	601a      	str	r2, [r3, #0]
  hadc3.Init.Resolution = ADC_RESOLUTION_16B;
 80016ba:	4b27      	ldr	r3, [pc, #156]	; (8001758 <MX_ADC3_Init+0xbc>)
 80016bc:	2200      	movs	r2, #0
 80016be:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80016c0:	4b25      	ldr	r3, [pc, #148]	; (8001758 <MX_ADC3_Init+0xbc>)
 80016c2:	2200      	movs	r2, #0
 80016c4:	60da      	str	r2, [r3, #12]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80016c6:	4b24      	ldr	r3, [pc, #144]	; (8001758 <MX_ADC3_Init+0xbc>)
 80016c8:	2204      	movs	r2, #4
 80016ca:	611a      	str	r2, [r3, #16]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 80016cc:	4b22      	ldr	r3, [pc, #136]	; (8001758 <MX_ADC3_Init+0xbc>)
 80016ce:	2200      	movs	r2, #0
 80016d0:	751a      	strb	r2, [r3, #20]
  hadc3.Init.ContinuousConvMode = DISABLE;
 80016d2:	4b21      	ldr	r3, [pc, #132]	; (8001758 <MX_ADC3_Init+0xbc>)
 80016d4:	2200      	movs	r2, #0
 80016d6:	755a      	strb	r2, [r3, #21]
  hadc3.Init.NbrOfConversion = 1;
 80016d8:	4b1f      	ldr	r3, [pc, #124]	; (8001758 <MX_ADC3_Init+0xbc>)
 80016da:	2201      	movs	r2, #1
 80016dc:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 80016de:	4b1e      	ldr	r3, [pc, #120]	; (8001758 <MX_ADC3_Init+0xbc>)
 80016e0:	2200      	movs	r2, #0
 80016e2:	771a      	strb	r2, [r3, #28]
  hadc3.Init.ExternalTrigConv = ADC_EXTERNALTRIG_EXT_IT11;
 80016e4:	4b1c      	ldr	r3, [pc, #112]	; (8001758 <MX_ADC3_Init+0xbc>)
 80016e6:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 80016ea:	625a      	str	r2, [r3, #36]	; 0x24
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 80016ec:	4b1a      	ldr	r3, [pc, #104]	; (8001758 <MX_ADC3_Init+0xbc>)
 80016ee:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80016f2:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 80016f4:	4b18      	ldr	r3, [pc, #96]	; (8001758 <MX_ADC3_Init+0xbc>)
 80016f6:	2200      	movs	r2, #0
 80016f8:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80016fa:	4b17      	ldr	r3, [pc, #92]	; (8001758 <MX_ADC3_Init+0xbc>)
 80016fc:	2200      	movs	r2, #0
 80016fe:	631a      	str	r2, [r3, #48]	; 0x30
  hadc3.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8001700:	4b15      	ldr	r3, [pc, #84]	; (8001758 <MX_ADC3_Init+0xbc>)
 8001702:	2200      	movs	r2, #0
 8001704:	635a      	str	r2, [r3, #52]	; 0x34
  hadc3.Init.OversamplingMode = DISABLE;
 8001706:	4b14      	ldr	r3, [pc, #80]	; (8001758 <MX_ADC3_Init+0xbc>)
 8001708:	2200      	movs	r2, #0
 800170a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 800170e:	4812      	ldr	r0, [pc, #72]	; (8001758 <MX_ADC3_Init+0xbc>)
 8001710:	f001 fdda 	bl	80032c8 <HAL_ADC_Init>
 8001714:	4603      	mov	r3, r0
 8001716:	2b00      	cmp	r3, #0
 8001718:	d001      	beq.n	800171e <MX_ADC3_Init+0x82>
  {
    Error_Handler();
 800171a:	f000 fc41 	bl	8001fa0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 800171e:	2301      	movs	r3, #1
 8001720:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001722:	2306      	movs	r3, #6
 8001724:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8001726:	2300      	movs	r3, #0
 8001728:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800172a:	f240 73ff 	movw	r3, #2047	; 0x7ff
 800172e:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001730:	2304      	movs	r3, #4
 8001732:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8001734:	2300      	movs	r3, #0
 8001736:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 8001738:	2300      	movs	r3, #0
 800173a:	777b      	strb	r3, [r7, #29]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 800173c:	1d3b      	adds	r3, r7, #4
 800173e:	4619      	mov	r1, r3
 8001740:	4805      	ldr	r0, [pc, #20]	; (8001758 <MX_ADC3_Init+0xbc>)
 8001742:	f002 fafd 	bl	8003d40 <HAL_ADC_ConfigChannel>
 8001746:	4603      	mov	r3, r0
 8001748:	2b00      	cmp	r3, #0
 800174a:	d001      	beq.n	8001750 <MX_ADC3_Init+0xb4>
  {
    Error_Handler();
 800174c:	f000 fc28 	bl	8001fa0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8001750:	bf00      	nop
 8001752:	3720      	adds	r7, #32
 8001754:	46bd      	mov	sp, r7
 8001756:	bd80      	pop	{r7, pc}
 8001758:	20000304 	.word	0x20000304
 800175c:	58026000 	.word	0x58026000

08001760 <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 8001760:	b580      	push	{r7, lr}
 8001762:	b08a      	sub	sp, #40	; 0x28
 8001764:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8001766:	1d3b      	adds	r3, r7, #4
 8001768:	2224      	movs	r2, #36	; 0x24
 800176a:	2100      	movs	r1, #0
 800176c:	4618      	mov	r0, r3
 800176e:	f017 faaf 	bl	8018cd0 <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 8001772:	4b12      	ldr	r3, [pc, #72]	; (80017bc <MX_DAC1_Init+0x5c>)
 8001774:	4a12      	ldr	r2, [pc, #72]	; (80017c0 <MX_DAC1_Init+0x60>)
 8001776:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8001778:	4810      	ldr	r0, [pc, #64]	; (80017bc <MX_DAC1_Init+0x5c>)
 800177a:	f003 f9fe 	bl	8004b7a <HAL_DAC_Init>
 800177e:	4603      	mov	r3, r0
 8001780:	2b00      	cmp	r3, #0
 8001782:	d001      	beq.n	8001788 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 8001784:	f000 fc0c 	bl	8001fa0 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8001788:	2300      	movs	r3, #0
 800178a:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 800178c:	2300      	movs	r3, #0
 800178e:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8001790:	2300      	movs	r3, #0
 8001792:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 8001794:	2301      	movs	r3, #1
 8001796:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8001798:	2300      	movs	r3, #0
 800179a:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 800179c:	1d3b      	adds	r3, r7, #4
 800179e:	2200      	movs	r2, #0
 80017a0:	4619      	mov	r1, r3
 80017a2:	4806      	ldr	r0, [pc, #24]	; (80017bc <MX_DAC1_Init+0x5c>)
 80017a4:	f003 fa82 	bl	8004cac <HAL_DAC_ConfigChannel>
 80017a8:	4603      	mov	r3, r0
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d001      	beq.n	80017b2 <MX_DAC1_Init+0x52>
  {
    Error_Handler();
 80017ae:	f000 fbf7 	bl	8001fa0 <Error_Handler>
//    Error_Handler();
//  }

  /* USER CODE END DAC1_Init 2 */

}
 80017b2:	bf00      	nop
 80017b4:	3728      	adds	r7, #40	; 0x28
 80017b6:	46bd      	mov	sp, r7
 80017b8:	bd80      	pop	{r7, pc}
 80017ba:	bf00      	nop
 80017bc:	20000368 	.word	0x20000368
 80017c0:	40007400 	.word	0x40007400

080017c4 <MX_HRTIM_Init>:
  * @brief HRTIM Initialization Function
  * @param None
  * @retval None
  */
static void MX_HRTIM_Init(void)
{
 80017c4:	b580      	push	{r7, lr}
 80017c6:	b0a4      	sub	sp, #144	; 0x90
 80017c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN HRTIM_Init 0 */

  /* USER CODE END HRTIM_Init 0 */

  HRTIM_TimeBaseCfgTypeDef pTimeBaseCfg = {0};
 80017ca:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80017ce:	2200      	movs	r2, #0
 80017d0:	601a      	str	r2, [r3, #0]
 80017d2:	605a      	str	r2, [r3, #4]
 80017d4:	609a      	str	r2, [r3, #8]
 80017d6:	60da      	str	r2, [r3, #12]
  HRTIM_TimerCfgTypeDef pTimerCfg = {0};
 80017d8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80017dc:	2254      	movs	r2, #84	; 0x54
 80017de:	2100      	movs	r1, #0
 80017e0:	4618      	mov	r0, r3
 80017e2:	f017 fa75 	bl	8018cd0 <memset>
  HRTIM_CompareCfgTypeDef pCompareCfg = {0};
 80017e6:	f107 0320 	add.w	r3, r7, #32
 80017ea:	2200      	movs	r2, #0
 80017ec:	601a      	str	r2, [r3, #0]
 80017ee:	605a      	str	r2, [r3, #4]
 80017f0:	609a      	str	r2, [r3, #8]
  HRTIM_OutputCfgTypeDef pOutputCfg = {0};
 80017f2:	463b      	mov	r3, r7
 80017f4:	2220      	movs	r2, #32
 80017f6:	2100      	movs	r1, #0
 80017f8:	4618      	mov	r0, r3
 80017fa:	f017 fa69 	bl	8018cd0 <memset>

  /* USER CODE BEGIN HRTIM_Init 1 */

  /* USER CODE END HRTIM_Init 1 */
  hhrtim.Instance = HRTIM1;
 80017fe:	4b98      	ldr	r3, [pc, #608]	; (8001a60 <MX_HRTIM_Init+0x29c>)
 8001800:	4a98      	ldr	r2, [pc, #608]	; (8001a64 <MX_HRTIM_Init+0x2a0>)
 8001802:	601a      	str	r2, [r3, #0]
  hhrtim.Init.HRTIMInterruptResquests = HRTIM_IT_NONE;
 8001804:	4b96      	ldr	r3, [pc, #600]	; (8001a60 <MX_HRTIM_Init+0x29c>)
 8001806:	2200      	movs	r2, #0
 8001808:	605a      	str	r2, [r3, #4]
  hhrtim.Init.SyncOptions = HRTIM_SYNCOPTION_NONE;
 800180a:	4b95      	ldr	r3, [pc, #596]	; (8001a60 <MX_HRTIM_Init+0x29c>)
 800180c:	2200      	movs	r2, #0
 800180e:	609a      	str	r2, [r3, #8]
  if (HAL_HRTIM_Init(&hhrtim) != HAL_OK)
 8001810:	4893      	ldr	r0, [pc, #588]	; (8001a60 <MX_HRTIM_Init+0x29c>)
 8001812:	f005 f8a9 	bl	8006968 <HAL_HRTIM_Init>
 8001816:	4603      	mov	r3, r0
 8001818:	2b00      	cmp	r3, #0
 800181a:	d001      	beq.n	8001820 <MX_HRTIM_Init+0x5c>
  {
    Error_Handler();
 800181c:	f000 fbc0 	bl	8001fa0 <Error_Handler>
  }
  pTimeBaseCfg.Period = PUMP_WIDTH+(2*MICROWAVE_DELAY)+(2*MICROWAVE_WIDTH)+RAMSEY_TIME+PROBE_WIDTH+POP_CYCLE_DELAY;
 8001820:	f24c 2318 	movw	r3, #49688	; 0xc218
 8001824:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  pTimeBaseCfg.RepetitionCounter = 0x00;
 8001828:	2300      	movs	r3, #0
 800182a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  pTimeBaseCfg.PrescalerRatio = HRTIM_PRESCALERRATIO_DIV4;
 800182e:	2307      	movs	r3, #7
 8001830:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  pTimeBaseCfg.Mode = HRTIM_MODE_CONTINUOUS;
 8001834:	2308      	movs	r3, #8
 8001836:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (HAL_HRTIM_TimeBaseConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_A, &pTimeBaseCfg) != HAL_OK)
 800183a:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800183e:	461a      	mov	r2, r3
 8001840:	2100      	movs	r1, #0
 8001842:	4887      	ldr	r0, [pc, #540]	; (8001a60 <MX_HRTIM_Init+0x29c>)
 8001844:	f005 f960 	bl	8006b08 <HAL_HRTIM_TimeBaseConfig>
 8001848:	4603      	mov	r3, r0
 800184a:	2b00      	cmp	r3, #0
 800184c:	d001      	beq.n	8001852 <MX_HRTIM_Init+0x8e>
  {
    Error_Handler();
 800184e:	f000 fba7 	bl	8001fa0 <Error_Handler>
  }
  pTimerCfg.InterruptRequests = HRTIM_TIM_IT_CMP3|HRTIM_TIM_IT_REP;
 8001852:	2314      	movs	r3, #20
 8001854:	62fb      	str	r3, [r7, #44]	; 0x2c
  pTimerCfg.DMARequests = HRTIM_TIM_DMA_NONE;
 8001856:	2300      	movs	r3, #0
 8001858:	633b      	str	r3, [r7, #48]	; 0x30
  pTimerCfg.DMASrcAddress = 0x0000;
 800185a:	2300      	movs	r3, #0
 800185c:	637b      	str	r3, [r7, #52]	; 0x34
  pTimerCfg.DMADstAddress = 0x0000;
 800185e:	2300      	movs	r3, #0
 8001860:	63bb      	str	r3, [r7, #56]	; 0x38
  pTimerCfg.DMASize = 0x1;
 8001862:	2301      	movs	r3, #1
 8001864:	63fb      	str	r3, [r7, #60]	; 0x3c
  pTimerCfg.HalfModeEnable = HRTIM_HALFMODE_DISABLED;
 8001866:	2300      	movs	r3, #0
 8001868:	643b      	str	r3, [r7, #64]	; 0x40
  pTimerCfg.StartOnSync = HRTIM_SYNCSTART_DISABLED;
 800186a:	2300      	movs	r3, #0
 800186c:	647b      	str	r3, [r7, #68]	; 0x44
  pTimerCfg.ResetOnSync = HRTIM_SYNCRESET_DISABLED;
 800186e:	2300      	movs	r3, #0
 8001870:	64bb      	str	r3, [r7, #72]	; 0x48
  pTimerCfg.DACSynchro = HRTIM_DACSYNC_NONE;
 8001872:	2300      	movs	r3, #0
 8001874:	64fb      	str	r3, [r7, #76]	; 0x4c
  pTimerCfg.PreloadEnable = HRTIM_PRELOAD_DISABLED;
 8001876:	2300      	movs	r3, #0
 8001878:	653b      	str	r3, [r7, #80]	; 0x50
  pTimerCfg.UpdateGating = HRTIM_UPDATEGATING_INDEPENDENT;
 800187a:	2300      	movs	r3, #0
 800187c:	657b      	str	r3, [r7, #84]	; 0x54
  pTimerCfg.BurstMode = HRTIM_TIMERBURSTMODE_MAINTAINCLOCK;
 800187e:	2300      	movs	r3, #0
 8001880:	65bb      	str	r3, [r7, #88]	; 0x58
  pTimerCfg.RepetitionUpdate = HRTIM_UPDATEONREPETITION_DISABLED;
 8001882:	2300      	movs	r3, #0
 8001884:	65fb      	str	r3, [r7, #92]	; 0x5c
  pTimerCfg.PushPull = HRTIM_TIMPUSHPULLMODE_DISABLED;
 8001886:	2300      	movs	r3, #0
 8001888:	663b      	str	r3, [r7, #96]	; 0x60
  pTimerCfg.FaultEnable = HRTIM_TIMFAULTENABLE_NONE;
 800188a:	2300      	movs	r3, #0
 800188c:	667b      	str	r3, [r7, #100]	; 0x64
  pTimerCfg.FaultLock = HRTIM_TIMFAULTLOCK_READWRITE;
 800188e:	2300      	movs	r3, #0
 8001890:	66bb      	str	r3, [r7, #104]	; 0x68
  pTimerCfg.DeadTimeInsertion = HRTIM_TIMDEADTIMEINSERTION_DISABLED;
 8001892:	2300      	movs	r3, #0
 8001894:	66fb      	str	r3, [r7, #108]	; 0x6c
  pTimerCfg.DelayedProtectionMode = HRTIM_TIMER_A_B_C_DELAYEDPROTECTION_DISABLED;
 8001896:	2300      	movs	r3, #0
 8001898:	673b      	str	r3, [r7, #112]	; 0x70
  pTimerCfg.UpdateTrigger = HRTIM_TIMUPDATETRIGGER_NONE;
 800189a:	2300      	movs	r3, #0
 800189c:	677b      	str	r3, [r7, #116]	; 0x74
  pTimerCfg.ResetTrigger = HRTIM_TIMRESETTRIGGER_NONE;
 800189e:	2300      	movs	r3, #0
 80018a0:	67bb      	str	r3, [r7, #120]	; 0x78
  pTimerCfg.ResetUpdate = HRTIM_TIMUPDATEONRESET_DISABLED;
 80018a2:	2300      	movs	r3, #0
 80018a4:	67fb      	str	r3, [r7, #124]	; 0x7c
  if (HAL_HRTIM_WaveformTimerConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_A, &pTimerCfg) != HAL_OK)
 80018a6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80018aa:	461a      	mov	r2, r3
 80018ac:	2100      	movs	r1, #0
 80018ae:	486c      	ldr	r0, [pc, #432]	; (8001a60 <MX_HRTIM_Init+0x29c>)
 80018b0:	f005 f952 	bl	8006b58 <HAL_HRTIM_WaveformTimerConfig>
 80018b4:	4603      	mov	r3, r0
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d001      	beq.n	80018be <MX_HRTIM_Init+0xfa>
  {
    Error_Handler();
 80018ba:	f000 fb71 	bl	8001fa0 <Error_Handler>
  }
  pTimerCfg.InterruptRequests = HRTIM_TIM_IT_CMP2|HRTIM_TIM_IT_CMP3;
 80018be:	2306      	movs	r3, #6
 80018c0:	62fb      	str	r3, [r7, #44]	; 0x2c
  pTimerCfg.DelayedProtectionMode = HRTIM_TIMER_D_E_DELAYEDPROTECTION_DISABLED;
 80018c2:	2300      	movs	r3, #0
 80018c4:	673b      	str	r3, [r7, #112]	; 0x70
  if (HAL_HRTIM_WaveformTimerConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_E, &pTimerCfg) != HAL_OK)
 80018c6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80018ca:	461a      	mov	r2, r3
 80018cc:	2104      	movs	r1, #4
 80018ce:	4864      	ldr	r0, [pc, #400]	; (8001a60 <MX_HRTIM_Init+0x29c>)
 80018d0:	f005 f942 	bl	8006b58 <HAL_HRTIM_WaveformTimerConfig>
 80018d4:	4603      	mov	r3, r0
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d001      	beq.n	80018de <MX_HRTIM_Init+0x11a>
  {
    Error_Handler();
 80018da:	f000 fb61 	bl	8001fa0 <Error_Handler>
  }
  pCompareCfg.CompareValue = PUMP_WIDTH;
 80018de:	f240 631b 	movw	r3, #1563	; 0x61b
 80018e2:	623b      	str	r3, [r7, #32]
  if (HAL_HRTIM_WaveformCompareConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_A, HRTIM_COMPAREUNIT_1, &pCompareCfg) != HAL_OK)
 80018e4:	f107 0320 	add.w	r3, r7, #32
 80018e8:	2201      	movs	r2, #1
 80018ea:	2100      	movs	r1, #0
 80018ec:	485c      	ldr	r0, [pc, #368]	; (8001a60 <MX_HRTIM_Init+0x29c>)
 80018ee:	f005 f9a5 	bl	8006c3c <HAL_HRTIM_WaveformCompareConfig>
 80018f2:	4603      	mov	r3, r0
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d001      	beq.n	80018fc <MX_HRTIM_Init+0x138>
  {
    Error_Handler();
 80018f8:	f000 fb52 	bl	8001fa0 <Error_Handler>
  }
  pCompareCfg.CompareValue = PUMP_WIDTH+(2*MICROWAVE_DELAY)+(2*MICROWAVE_WIDTH)+RAMSEY_TIME;
 80018fc:	f244 5395 	movw	r3, #17813	; 0x4595
 8001900:	623b      	str	r3, [r7, #32]
  pCompareCfg.AutoDelayedMode = HRTIM_AUTODELAYEDMODE_REGULAR;
 8001902:	2300      	movs	r3, #0
 8001904:	627b      	str	r3, [r7, #36]	; 0x24
  pCompareCfg.AutoDelayedTimeout = 0x0000;
 8001906:	2300      	movs	r3, #0
 8001908:	62bb      	str	r3, [r7, #40]	; 0x28

  if (HAL_HRTIM_WaveformCompareConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_A, HRTIM_COMPAREUNIT_2, &pCompareCfg) != HAL_OK)
 800190a:	f107 0320 	add.w	r3, r7, #32
 800190e:	2202      	movs	r2, #2
 8001910:	2100      	movs	r1, #0
 8001912:	4853      	ldr	r0, [pc, #332]	; (8001a60 <MX_HRTIM_Init+0x29c>)
 8001914:	f005 f992 	bl	8006c3c <HAL_HRTIM_WaveformCompareConfig>
 8001918:	4603      	mov	r3, r0
 800191a:	2b00      	cmp	r3, #0
 800191c:	d001      	beq.n	8001922 <MX_HRTIM_Init+0x15e>
  {
    Error_Handler();
 800191e:	f000 fb3f 	bl	8001fa0 <Error_Handler>
  }
  pCompareCfg.CompareValue = PUMP_WIDTH+MICROWAVE_DELAY+MICROWAVE_WIDTH;
 8001922:	f640 536e 	movw	r3, #3438	; 0xd6e
 8001926:	623b      	str	r3, [r7, #32]

  if (HAL_HRTIM_WaveformCompareConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_E, HRTIM_COMPAREUNIT_2, &pCompareCfg) != HAL_OK)
 8001928:	f107 0320 	add.w	r3, r7, #32
 800192c:	2202      	movs	r2, #2
 800192e:	2104      	movs	r1, #4
 8001930:	484b      	ldr	r0, [pc, #300]	; (8001a60 <MX_HRTIM_Init+0x29c>)
 8001932:	f005 f983 	bl	8006c3c <HAL_HRTIM_WaveformCompareConfig>
 8001936:	4603      	mov	r3, r0
 8001938:	2b00      	cmp	r3, #0
 800193a:	d001      	beq.n	8001940 <MX_HRTIM_Init+0x17c>
  {
    Error_Handler();
 800193c:	f000 fb30 	bl	8001fa0 <Error_Handler>
  }
  pCompareCfg.CompareValue = PUMP_WIDTH+(2*MICROWAVE_DELAY)+(2*MICROWAVE_WIDTH)+RAMSEY_TIME+PROBE_WIDTH;
 8001940:	f644 0306 	movw	r3, #18438	; 0x4806
 8001944:	623b      	str	r3, [r7, #32]
  if (HAL_HRTIM_WaveformCompareConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_A, HRTIM_COMPAREUNIT_3, &pCompareCfg) != HAL_OK)
 8001946:	f107 0320 	add.w	r3, r7, #32
 800194a:	2204      	movs	r2, #4
 800194c:	2100      	movs	r1, #0
 800194e:	4844      	ldr	r0, [pc, #272]	; (8001a60 <MX_HRTIM_Init+0x29c>)
 8001950:	f005 f974 	bl	8006c3c <HAL_HRTIM_WaveformCompareConfig>
 8001954:	4603      	mov	r3, r0
 8001956:	2b00      	cmp	r3, #0
 8001958:	d001      	beq.n	800195e <MX_HRTIM_Init+0x19a>
  {
    Error_Handler();
 800195a:	f000 fb21 	bl	8001fa0 <Error_Handler>
  }
  pCompareCfg.CompareValue = PUMP_WIDTH+MICROWAVE_DELAY+MICROWAVE_WIDTH+RAMSEY_TIME+MICROWAVE_WIDTH;
 800195e:	f244 435d 	movw	r3, #17501	; 0x445d
 8001962:	623b      	str	r3, [r7, #32]

  if (HAL_HRTIM_WaveformCompareConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_E, HRTIM_COMPAREUNIT_4, &pCompareCfg) != HAL_OK)
 8001964:	f107 0320 	add.w	r3, r7, #32
 8001968:	2208      	movs	r2, #8
 800196a:	2104      	movs	r1, #4
 800196c:	483c      	ldr	r0, [pc, #240]	; (8001a60 <MX_HRTIM_Init+0x29c>)
 800196e:	f005 f965 	bl	8006c3c <HAL_HRTIM_WaveformCompareConfig>
 8001972:	4603      	mov	r3, r0
 8001974:	2b00      	cmp	r3, #0
 8001976:	d001      	beq.n	800197c <MX_HRTIM_Init+0x1b8>
  {
    Error_Handler();
 8001978:	f000 fb12 	bl	8001fa0 <Error_Handler>
  }
  pOutputCfg.Polarity = HRTIM_OUTPUTPOLARITY_LOW;
 800197c:	2302      	movs	r3, #2
 800197e:	603b      	str	r3, [r7, #0]
  pOutputCfg.SetSource = HRTIM_OUTPUTSET_TIMCMP1|HRTIM_OUTPUTSET_TIMCMP3;
 8001980:	2328      	movs	r3, #40	; 0x28
 8001982:	607b      	str	r3, [r7, #4]
  pOutputCfg.ResetSource = HRTIM_OUTPUTRESET_TIMCMP2|HRTIM_OUTPUTRESET_TIMPER;
 8001984:	2314      	movs	r3, #20
 8001986:	60bb      	str	r3, [r7, #8]
  pOutputCfg.IdleMode = HRTIM_OUTPUTIDLEMODE_NONE;
 8001988:	2300      	movs	r3, #0
 800198a:	60fb      	str	r3, [r7, #12]
  pOutputCfg.IdleLevel = HRTIM_OUTPUTIDLELEVEL_ACTIVE;
 800198c:	2308      	movs	r3, #8
 800198e:	613b      	str	r3, [r7, #16]
  pOutputCfg.FaultLevel = HRTIM_OUTPUTFAULTLEVEL_NONE;
 8001990:	2300      	movs	r3, #0
 8001992:	617b      	str	r3, [r7, #20]
  pOutputCfg.ChopperModeEnable = HRTIM_OUTPUTCHOPPERMODE_DISABLED;
 8001994:	2300      	movs	r3, #0
 8001996:	61bb      	str	r3, [r7, #24]
  pOutputCfg.BurstModeEntryDelayed = HRTIM_OUTPUTBURSTMODEENTRY_REGULAR;
 8001998:	2300      	movs	r3, #0
 800199a:	61fb      	str	r3, [r7, #28]
  if (HAL_HRTIM_WaveformOutputConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_A, HRTIM_OUTPUT_TA1, &pOutputCfg) != HAL_OK)
 800199c:	463b      	mov	r3, r7
 800199e:	2201      	movs	r2, #1
 80019a0:	2100      	movs	r1, #0
 80019a2:	482f      	ldr	r0, [pc, #188]	; (8001a60 <MX_HRTIM_Init+0x29c>)
 80019a4:	f005 fab8 	bl	8006f18 <HAL_HRTIM_WaveformOutputConfig>
 80019a8:	4603      	mov	r3, r0
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d001      	beq.n	80019b2 <MX_HRTIM_Init+0x1ee>
  {
    Error_Handler();
 80019ae:	f000 faf7 	bl	8001fa0 <Error_Handler>
  }
  pOutputCfg.Polarity = HRTIM_OUTPUTPOLARITY_HIGH;
 80019b2:	2300      	movs	r3, #0
 80019b4:	603b      	str	r3, [r7, #0]
  pOutputCfg.ResetSource = HRTIM_OUTPUTRESET_TIMCMP2|HRTIM_OUTPUTRESET_TIMCMP4;
 80019b6:	2350      	movs	r3, #80	; 0x50
 80019b8:	60bb      	str	r3, [r7, #8]
  pOutputCfg.IdleLevel = HRTIM_OUTPUTIDLELEVEL_INACTIVE;
 80019ba:	2300      	movs	r3, #0
 80019bc:	613b      	str	r3, [r7, #16]
  if (HAL_HRTIM_WaveformOutputConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_E, HRTIM_OUTPUT_TE1, &pOutputCfg) != HAL_OK)
 80019be:	463b      	mov	r3, r7
 80019c0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80019c4:	2104      	movs	r1, #4
 80019c6:	4826      	ldr	r0, [pc, #152]	; (8001a60 <MX_HRTIM_Init+0x29c>)
 80019c8:	f005 faa6 	bl	8006f18 <HAL_HRTIM_WaveformOutputConfig>
 80019cc:	4603      	mov	r3, r0
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d001      	beq.n	80019d6 <MX_HRTIM_Init+0x212>
  {
    Error_Handler();
 80019d2:	f000 fae5 	bl	8001fa0 <Error_Handler>
  }
  pOutputCfg.Polarity = HRTIM_OUTPUTPOLARITY_LOW;
 80019d6:	2302      	movs	r3, #2
 80019d8:	603b      	str	r3, [r7, #0]
  pOutputCfg.SetSource = HRTIM_OUTPUTSET_TIMCMP3;
 80019da:	2320      	movs	r3, #32
 80019dc:	607b      	str	r3, [r7, #4]
  pOutputCfg.ResetSource = HRTIM_OUTPUTRESET_TIMCMP2;
 80019de:	2310      	movs	r3, #16
 80019e0:	60bb      	str	r3, [r7, #8]
  pOutputCfg.IdleLevel = HRTIM_OUTPUTIDLELEVEL_ACTIVE;
 80019e2:	2308      	movs	r3, #8
 80019e4:	613b      	str	r3, [r7, #16]
  if (HAL_HRTIM_WaveformOutputConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_A, HRTIM_OUTPUT_TA2, &pOutputCfg) != HAL_OK)
 80019e6:	463b      	mov	r3, r7
 80019e8:	2202      	movs	r2, #2
 80019ea:	2100      	movs	r1, #0
 80019ec:	481c      	ldr	r0, [pc, #112]	; (8001a60 <MX_HRTIM_Init+0x29c>)
 80019ee:	f005 fa93 	bl	8006f18 <HAL_HRTIM_WaveformOutputConfig>
 80019f2:	4603      	mov	r3, r0
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d001      	beq.n	80019fc <MX_HRTIM_Init+0x238>
  {
    Error_Handler();
 80019f8:	f000 fad2 	bl	8001fa0 <Error_Handler>
  }
  if (HAL_HRTIM_TimeBaseConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_E, &pTimeBaseCfg) != HAL_OK)
 80019fc:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8001a00:	461a      	mov	r2, r3
 8001a02:	2104      	movs	r1, #4
 8001a04:	4816      	ldr	r0, [pc, #88]	; (8001a60 <MX_HRTIM_Init+0x29c>)
 8001a06:	f005 f87f 	bl	8006b08 <HAL_HRTIM_TimeBaseConfig>
 8001a0a:	4603      	mov	r3, r0
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d001      	beq.n	8001a14 <MX_HRTIM_Init+0x250>
  {
    Error_Handler();
 8001a10:	f000 fac6 	bl	8001fa0 <Error_Handler>
  }
  pCompareCfg.CompareValue = PUMP_WIDTH+MICROWAVE_DELAY;
 8001a14:	f240 7353 	movw	r3, #1875	; 0x753
 8001a18:	623b      	str	r3, [r7, #32]
  if (HAL_HRTIM_WaveformCompareConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_E, HRTIM_COMPAREUNIT_1, &pCompareCfg) != HAL_OK)
 8001a1a:	f107 0320 	add.w	r3, r7, #32
 8001a1e:	2201      	movs	r2, #1
 8001a20:	2104      	movs	r1, #4
 8001a22:	480f      	ldr	r0, [pc, #60]	; (8001a60 <MX_HRTIM_Init+0x29c>)
 8001a24:	f005 f90a 	bl	8006c3c <HAL_HRTIM_WaveformCompareConfig>
 8001a28:	4603      	mov	r3, r0
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d001      	beq.n	8001a32 <MX_HRTIM_Init+0x26e>
  {
    Error_Handler();
 8001a2e:	f000 fab7 	bl	8001fa0 <Error_Handler>
  }
  pCompareCfg.CompareValue = PUMP_WIDTH+MICROWAVE_DELAY+MICROWAVE_WIDTH+RAMSEY_TIME;
 8001a32:	f643 6342 	movw	r3, #15938	; 0x3e42
 8001a36:	623b      	str	r3, [r7, #32]
  if (HAL_HRTIM_WaveformCompareConfig(&hhrtim, HRTIM_TIMERINDEX_TIMER_E, HRTIM_COMPAREUNIT_3, &pCompareCfg) != HAL_OK)
 8001a38:	f107 0320 	add.w	r3, r7, #32
 8001a3c:	2204      	movs	r2, #4
 8001a3e:	2104      	movs	r1, #4
 8001a40:	4807      	ldr	r0, [pc, #28]	; (8001a60 <MX_HRTIM_Init+0x29c>)
 8001a42:	f005 f8fb 	bl	8006c3c <HAL_HRTIM_WaveformCompareConfig>
 8001a46:	4603      	mov	r3, r0
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d001      	beq.n	8001a50 <MX_HRTIM_Init+0x28c>
  {
    Error_Handler();
 8001a4c:	f000 faa8 	bl	8001fa0 <Error_Handler>
  }
  /* USER CODE BEGIN HRTIM_Init 2 */

  /* USER CODE END HRTIM_Init 2 */
  HAL_HRTIM_MspPostInit(&hhrtim);
 8001a50:	4803      	ldr	r0, [pc, #12]	; (8001a60 <MX_HRTIM_Init+0x29c>)
 8001a52:	f000 fbe7 	bl	8002224 <HAL_HRTIM_MspPostInit>

}
 8001a56:	bf00      	nop
 8001a58:	3790      	adds	r7, #144	; 0x90
 8001a5a:	46bd      	mov	sp, r7
 8001a5c:	bd80      	pop	{r7, pc}
 8001a5e:	bf00      	nop
 8001a60:	2000037c 	.word	0x2000037c
 8001a64:	40017400 	.word	0x40017400

08001a68 <MX_LPTIM1_Init>:
  * @brief LPTIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPTIM1_Init(void)
{
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	af00      	add	r7, sp, #0
  /* USER CODE END LPTIM1_Init 0 */

  /* USER CODE BEGIN LPTIM1_Init 1 */

  /* USER CODE END LPTIM1_Init 1 */
  hlptim1.Instance = LPTIM1;
 8001a6c:	4b13      	ldr	r3, [pc, #76]	; (8001abc <MX_LPTIM1_Init+0x54>)
 8001a6e:	4a14      	ldr	r2, [pc, #80]	; (8001ac0 <MX_LPTIM1_Init+0x58>)
 8001a70:	601a      	str	r2, [r3, #0]
  hlptim1.Init.Clock.Source = LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC;
 8001a72:	4b12      	ldr	r3, [pc, #72]	; (8001abc <MX_LPTIM1_Init+0x54>)
 8001a74:	2200      	movs	r2, #0
 8001a76:	605a      	str	r2, [r3, #4]
  hlptim1.Init.Clock.Prescaler = LPTIM_PRESCALER_DIV32;
 8001a78:	4b10      	ldr	r3, [pc, #64]	; (8001abc <MX_LPTIM1_Init+0x54>)
 8001a7a:	f44f 6220 	mov.w	r2, #2560	; 0xa00
 8001a7e:	609a      	str	r2, [r3, #8]
  hlptim1.Init.Trigger.Source = LPTIM_TRIGSOURCE_SOFTWARE;
 8001a80:	4b0e      	ldr	r3, [pc, #56]	; (8001abc <MX_LPTIM1_Init+0x54>)
 8001a82:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001a86:	615a      	str	r2, [r3, #20]
  hlptim1.Init.OutputPolarity = LPTIM_OUTPUTPOLARITY_HIGH;
 8001a88:	4b0c      	ldr	r3, [pc, #48]	; (8001abc <MX_LPTIM1_Init+0x54>)
 8001a8a:	2200      	movs	r2, #0
 8001a8c:	621a      	str	r2, [r3, #32]
  hlptim1.Init.UpdateMode = LPTIM_UPDATE_IMMEDIATE;
 8001a8e:	4b0b      	ldr	r3, [pc, #44]	; (8001abc <MX_LPTIM1_Init+0x54>)
 8001a90:	2200      	movs	r2, #0
 8001a92:	625a      	str	r2, [r3, #36]	; 0x24
  hlptim1.Init.CounterSource = LPTIM_COUNTERSOURCE_INTERNAL;
 8001a94:	4b09      	ldr	r3, [pc, #36]	; (8001abc <MX_LPTIM1_Init+0x54>)
 8001a96:	2200      	movs	r2, #0
 8001a98:	629a      	str	r2, [r3, #40]	; 0x28
  hlptim1.Init.Input1Source = LPTIM_INPUT1SOURCE_GPIO;
 8001a9a:	4b08      	ldr	r3, [pc, #32]	; (8001abc <MX_LPTIM1_Init+0x54>)
 8001a9c:	2200      	movs	r2, #0
 8001a9e:	62da      	str	r2, [r3, #44]	; 0x2c
  hlptim1.Init.Input2Source = LPTIM_INPUT2SOURCE_GPIO;
 8001aa0:	4b06      	ldr	r3, [pc, #24]	; (8001abc <MX_LPTIM1_Init+0x54>)
 8001aa2:	2200      	movs	r2, #0
 8001aa4:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_LPTIM_Init(&hlptim1) != HAL_OK)
 8001aa6:	4805      	ldr	r0, [pc, #20]	; (8001abc <MX_LPTIM1_Init+0x54>)
 8001aa8:	f006 fa62 	bl	8007f70 <HAL_LPTIM_Init>
 8001aac:	4603      	mov	r3, r0
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d001      	beq.n	8001ab6 <MX_LPTIM1_Init+0x4e>
  {
    Error_Handler();
 8001ab2:	f000 fa75 	bl	8001fa0 <Error_Handler>
  }
  /* USER CODE BEGIN LPTIM1_Init 2 */

  /* USER CODE END LPTIM1_Init 2 */

}
 8001ab6:	bf00      	nop
 8001ab8:	bd80      	pop	{r7, pc}
 8001aba:	bf00      	nop
 8001abc:	20000458 	.word	0x20000458
 8001ac0:	40002400 	.word	0x40002400

08001ac4 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001ac4:	b580      	push	{r7, lr}
 8001ac6:	b088      	sub	sp, #32
 8001ac8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001aca:	f107 0310 	add.w	r3, r7, #16
 8001ace:	2200      	movs	r2, #0
 8001ad0:	601a      	str	r2, [r3, #0]
 8001ad2:	605a      	str	r2, [r3, #4]
 8001ad4:	609a      	str	r2, [r3, #8]
 8001ad6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ad8:	1d3b      	adds	r3, r7, #4
 8001ada:	2200      	movs	r2, #0
 8001adc:	601a      	str	r2, [r3, #0]
 8001ade:	605a      	str	r2, [r3, #4]
 8001ae0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001ae2:	4b20      	ldr	r3, [pc, #128]	; (8001b64 <MX_TIM1_Init+0xa0>)
 8001ae4:	4a20      	ldr	r2, [pc, #128]	; (8001b68 <MX_TIM1_Init+0xa4>)
 8001ae6:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 1249;
 8001ae8:	4b1e      	ldr	r3, [pc, #120]	; (8001b64 <MX_TIM1_Init+0xa0>)
 8001aea:	f240 42e1 	movw	r2, #1249	; 0x4e1
 8001aee:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001af0:	4b1c      	ldr	r3, [pc, #112]	; (8001b64 <MX_TIM1_Init+0xa0>)
 8001af2:	2200      	movs	r2, #0
 8001af4:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001af6:	4b1b      	ldr	r3, [pc, #108]	; (8001b64 <MX_TIM1_Init+0xa0>)
 8001af8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001afc:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001afe:	4b19      	ldr	r3, [pc, #100]	; (8001b64 <MX_TIM1_Init+0xa0>)
 8001b00:	2200      	movs	r2, #0
 8001b02:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001b04:	4b17      	ldr	r3, [pc, #92]	; (8001b64 <MX_TIM1_Init+0xa0>)
 8001b06:	2200      	movs	r2, #0
 8001b08:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b0a:	4b16      	ldr	r3, [pc, #88]	; (8001b64 <MX_TIM1_Init+0xa0>)
 8001b0c:	2200      	movs	r2, #0
 8001b0e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001b10:	4814      	ldr	r0, [pc, #80]	; (8001b64 <MX_TIM1_Init+0xa0>)
 8001b12:	f00a fbdb 	bl	800c2cc <HAL_TIM_Base_Init>
 8001b16:	4603      	mov	r3, r0
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d001      	beq.n	8001b20 <MX_TIM1_Init+0x5c>
  {
    Error_Handler();
 8001b1c:	f000 fa40 	bl	8001fa0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001b20:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001b24:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001b26:	f107 0310 	add.w	r3, r7, #16
 8001b2a:	4619      	mov	r1, r3
 8001b2c:	480d      	ldr	r0, [pc, #52]	; (8001b64 <MX_TIM1_Init+0xa0>)
 8001b2e:	f00a fc25 	bl	800c37c <HAL_TIM_ConfigClockSource>
 8001b32:	4603      	mov	r3, r0
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d001      	beq.n	8001b3c <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 8001b38:	f000 fa32 	bl	8001fa0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b3c:	2300      	movs	r3, #0
 8001b3e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001b40:	2300      	movs	r3, #0
 8001b42:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b44:	2300      	movs	r3, #0
 8001b46:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001b48:	1d3b      	adds	r3, r7, #4
 8001b4a:	4619      	mov	r1, r3
 8001b4c:	4805      	ldr	r0, [pc, #20]	; (8001b64 <MX_TIM1_Init+0xa0>)
 8001b4e:	f00a fe45 	bl	800c7dc <HAL_TIMEx_MasterConfigSynchronization>
 8001b52:	4603      	mov	r3, r0
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d001      	beq.n	8001b5c <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8001b58:	f000 fa22 	bl	8001fa0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001b5c:	bf00      	nop
 8001b5e:	3720      	adds	r7, #32
 8001b60:	46bd      	mov	sp, r7
 8001b62:	bd80      	pop	{r7, pc}
 8001b64:	20000490 	.word	0x20000490
 8001b68:	40010000 	.word	0x40010000

08001b6c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001b6c:	b580      	push	{r7, lr}
 8001b6e:	b088      	sub	sp, #32
 8001b70:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001b72:	f107 0310 	add.w	r3, r7, #16
 8001b76:	2200      	movs	r2, #0
 8001b78:	601a      	str	r2, [r3, #0]
 8001b7a:	605a      	str	r2, [r3, #4]
 8001b7c:	609a      	str	r2, [r3, #8]
 8001b7e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b80:	1d3b      	adds	r3, r7, #4
 8001b82:	2200      	movs	r2, #0
 8001b84:	601a      	str	r2, [r3, #0]
 8001b86:	605a      	str	r2, [r3, #4]
 8001b88:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001b8a:	4b1d      	ldr	r3, [pc, #116]	; (8001c00 <MX_TIM3_Init+0x94>)
 8001b8c:	4a1d      	ldr	r2, [pc, #116]	; (8001c04 <MX_TIM3_Init+0x98>)
 8001b8e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 124;
 8001b90:	4b1b      	ldr	r3, [pc, #108]	; (8001c00 <MX_TIM3_Init+0x94>)
 8001b92:	227c      	movs	r2, #124	; 0x7c
 8001b94:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b96:	4b1a      	ldr	r3, [pc, #104]	; (8001c00 <MX_TIM3_Init+0x94>)
 8001b98:	2200      	movs	r2, #0
 8001b9a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001b9c:	4b18      	ldr	r3, [pc, #96]	; (8001c00 <MX_TIM3_Init+0x94>)
 8001b9e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001ba2:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ba4:	4b16      	ldr	r3, [pc, #88]	; (8001c00 <MX_TIM3_Init+0x94>)
 8001ba6:	2200      	movs	r2, #0
 8001ba8:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001baa:	4b15      	ldr	r3, [pc, #84]	; (8001c00 <MX_TIM3_Init+0x94>)
 8001bac:	2200      	movs	r2, #0
 8001bae:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001bb0:	4813      	ldr	r0, [pc, #76]	; (8001c00 <MX_TIM3_Init+0x94>)
 8001bb2:	f00a fb8b 	bl	800c2cc <HAL_TIM_Base_Init>
 8001bb6:	4603      	mov	r3, r0
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d001      	beq.n	8001bc0 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8001bbc:	f000 f9f0 	bl	8001fa0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001bc0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001bc4:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001bc6:	f107 0310 	add.w	r3, r7, #16
 8001bca:	4619      	mov	r1, r3
 8001bcc:	480c      	ldr	r0, [pc, #48]	; (8001c00 <MX_TIM3_Init+0x94>)
 8001bce:	f00a fbd5 	bl	800c37c <HAL_TIM_ConfigClockSource>
 8001bd2:	4603      	mov	r3, r0
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d001      	beq.n	8001bdc <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8001bd8:	f000 f9e2 	bl	8001fa0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001bdc:	2300      	movs	r3, #0
 8001bde:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001be0:	2300      	movs	r3, #0
 8001be2:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001be4:	1d3b      	adds	r3, r7, #4
 8001be6:	4619      	mov	r1, r3
 8001be8:	4805      	ldr	r0, [pc, #20]	; (8001c00 <MX_TIM3_Init+0x94>)
 8001bea:	f00a fdf7 	bl	800c7dc <HAL_TIMEx_MasterConfigSynchronization>
 8001bee:	4603      	mov	r3, r0
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d001      	beq.n	8001bf8 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8001bf4:	f000 f9d4 	bl	8001fa0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001bf8:	bf00      	nop
 8001bfa:	3720      	adds	r7, #32
 8001bfc:	46bd      	mov	sp, r7
 8001bfe:	bd80      	pop	{r7, pc}
 8001c00:	200004dc 	.word	0x200004dc
 8001c04:	40000400 	.word	0x40000400

08001c08 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001c08:	b580      	push	{r7, lr}
 8001c0a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001c0c:	4b22      	ldr	r3, [pc, #136]	; (8001c98 <MX_USART3_UART_Init+0x90>)
 8001c0e:	4a23      	ldr	r2, [pc, #140]	; (8001c9c <MX_USART3_UART_Init+0x94>)
 8001c10:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 1000000;
 8001c12:	4b21      	ldr	r3, [pc, #132]	; (8001c98 <MX_USART3_UART_Init+0x90>)
 8001c14:	4a22      	ldr	r2, [pc, #136]	; (8001ca0 <MX_USART3_UART_Init+0x98>)
 8001c16:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001c18:	4b1f      	ldr	r3, [pc, #124]	; (8001c98 <MX_USART3_UART_Init+0x90>)
 8001c1a:	2200      	movs	r2, #0
 8001c1c:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001c1e:	4b1e      	ldr	r3, [pc, #120]	; (8001c98 <MX_USART3_UART_Init+0x90>)
 8001c20:	2200      	movs	r2, #0
 8001c22:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001c24:	4b1c      	ldr	r3, [pc, #112]	; (8001c98 <MX_USART3_UART_Init+0x90>)
 8001c26:	2200      	movs	r2, #0
 8001c28:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001c2a:	4b1b      	ldr	r3, [pc, #108]	; (8001c98 <MX_USART3_UART_Init+0x90>)
 8001c2c:	220c      	movs	r2, #12
 8001c2e:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001c30:	4b19      	ldr	r3, [pc, #100]	; (8001c98 <MX_USART3_UART_Init+0x90>)
 8001c32:	2200      	movs	r2, #0
 8001c34:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001c36:	4b18      	ldr	r3, [pc, #96]	; (8001c98 <MX_USART3_UART_Init+0x90>)
 8001c38:	2200      	movs	r2, #0
 8001c3a:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001c3c:	4b16      	ldr	r3, [pc, #88]	; (8001c98 <MX_USART3_UART_Init+0x90>)
 8001c3e:	2200      	movs	r2, #0
 8001c40:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001c42:	4b15      	ldr	r3, [pc, #84]	; (8001c98 <MX_USART3_UART_Init+0x90>)
 8001c44:	2200      	movs	r2, #0
 8001c46:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001c48:	4b13      	ldr	r3, [pc, #76]	; (8001c98 <MX_USART3_UART_Init+0x90>)
 8001c4a:	2200      	movs	r2, #0
 8001c4c:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001c4e:	4812      	ldr	r0, [pc, #72]	; (8001c98 <MX_USART3_UART_Init+0x90>)
 8001c50:	f00a fe52 	bl	800c8f8 <HAL_UART_Init>
 8001c54:	4603      	mov	r3, r0
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d001      	beq.n	8001c5e <MX_USART3_UART_Init+0x56>
  {
    Error_Handler();
 8001c5a:	f000 f9a1 	bl	8001fa0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001c5e:	2100      	movs	r1, #0
 8001c60:	480d      	ldr	r0, [pc, #52]	; (8001c98 <MX_USART3_UART_Init+0x90>)
 8001c62:	f00b fee2 	bl	800da2a <HAL_UARTEx_SetTxFifoThreshold>
 8001c66:	4603      	mov	r3, r0
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d001      	beq.n	8001c70 <MX_USART3_UART_Init+0x68>
  {
    Error_Handler();
 8001c6c:	f000 f998 	bl	8001fa0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001c70:	2100      	movs	r1, #0
 8001c72:	4809      	ldr	r0, [pc, #36]	; (8001c98 <MX_USART3_UART_Init+0x90>)
 8001c74:	f00b ff17 	bl	800daa6 <HAL_UARTEx_SetRxFifoThreshold>
 8001c78:	4603      	mov	r3, r0
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d001      	beq.n	8001c82 <MX_USART3_UART_Init+0x7a>
  {
    Error_Handler();
 8001c7e:	f000 f98f 	bl	8001fa0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8001c82:	4805      	ldr	r0, [pc, #20]	; (8001c98 <MX_USART3_UART_Init+0x90>)
 8001c84:	f00b fe98 	bl	800d9b8 <HAL_UARTEx_DisableFifoMode>
 8001c88:	4603      	mov	r3, r0
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d001      	beq.n	8001c92 <MX_USART3_UART_Init+0x8a>
  {
    Error_Handler();
 8001c8e:	f000 f987 	bl	8001fa0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001c92:	bf00      	nop
 8001c94:	bd80      	pop	{r7, pc}
 8001c96:	bf00      	nop
 8001c98:	20000528 	.word	0x20000528
 8001c9c:	40004800 	.word	0x40004800
 8001ca0:	000f4240 	.word	0x000f4240

08001ca4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001ca4:	b580      	push	{r7, lr}
 8001ca6:	b08e      	sub	sp, #56	; 0x38
 8001ca8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001caa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001cae:	2200      	movs	r2, #0
 8001cb0:	601a      	str	r2, [r3, #0]
 8001cb2:	605a      	str	r2, [r3, #4]
 8001cb4:	609a      	str	r2, [r3, #8]
 8001cb6:	60da      	str	r2, [r3, #12]
 8001cb8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001cba:	4ba0      	ldr	r3, [pc, #640]	; (8001f3c <MX_GPIO_Init+0x298>)
 8001cbc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001cc0:	4a9e      	ldr	r2, [pc, #632]	; (8001f3c <MX_GPIO_Init+0x298>)
 8001cc2:	f043 0310 	orr.w	r3, r3, #16
 8001cc6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001cca:	4b9c      	ldr	r3, [pc, #624]	; (8001f3c <MX_GPIO_Init+0x298>)
 8001ccc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001cd0:	f003 0310 	and.w	r3, r3, #16
 8001cd4:	623b      	str	r3, [r7, #32]
 8001cd6:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001cd8:	4b98      	ldr	r3, [pc, #608]	; (8001f3c <MX_GPIO_Init+0x298>)
 8001cda:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001cde:	4a97      	ldr	r2, [pc, #604]	; (8001f3c <MX_GPIO_Init+0x298>)
 8001ce0:	f043 0304 	orr.w	r3, r3, #4
 8001ce4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001ce8:	4b94      	ldr	r3, [pc, #592]	; (8001f3c <MX_GPIO_Init+0x298>)
 8001cea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001cee:	f003 0304 	and.w	r3, r3, #4
 8001cf2:	61fb      	str	r3, [r7, #28]
 8001cf4:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001cf6:	4b91      	ldr	r3, [pc, #580]	; (8001f3c <MX_GPIO_Init+0x298>)
 8001cf8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001cfc:	4a8f      	ldr	r2, [pc, #572]	; (8001f3c <MX_GPIO_Init+0x298>)
 8001cfe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001d02:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001d06:	4b8d      	ldr	r3, [pc, #564]	; (8001f3c <MX_GPIO_Init+0x298>)
 8001d08:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001d0c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d10:	61bb      	str	r3, [r7, #24]
 8001d12:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d14:	4b89      	ldr	r3, [pc, #548]	; (8001f3c <MX_GPIO_Init+0x298>)
 8001d16:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001d1a:	4a88      	ldr	r2, [pc, #544]	; (8001f3c <MX_GPIO_Init+0x298>)
 8001d1c:	f043 0301 	orr.w	r3, r3, #1
 8001d20:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001d24:	4b85      	ldr	r3, [pc, #532]	; (8001f3c <MX_GPIO_Init+0x298>)
 8001d26:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001d2a:	f003 0301 	and.w	r3, r3, #1
 8001d2e:	617b      	str	r3, [r7, #20]
 8001d30:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d32:	4b82      	ldr	r3, [pc, #520]	; (8001f3c <MX_GPIO_Init+0x298>)
 8001d34:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001d38:	4a80      	ldr	r2, [pc, #512]	; (8001f3c <MX_GPIO_Init+0x298>)
 8001d3a:	f043 0302 	orr.w	r3, r3, #2
 8001d3e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001d42:	4b7e      	ldr	r3, [pc, #504]	; (8001f3c <MX_GPIO_Init+0x298>)
 8001d44:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001d48:	f003 0302 	and.w	r3, r3, #2
 8001d4c:	613b      	str	r3, [r7, #16]
 8001d4e:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001d50:	4b7a      	ldr	r3, [pc, #488]	; (8001f3c <MX_GPIO_Init+0x298>)
 8001d52:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001d56:	4a79      	ldr	r2, [pc, #484]	; (8001f3c <MX_GPIO_Init+0x298>)
 8001d58:	f043 0320 	orr.w	r3, r3, #32
 8001d5c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001d60:	4b76      	ldr	r3, [pc, #472]	; (8001f3c <MX_GPIO_Init+0x298>)
 8001d62:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001d66:	f003 0320 	and.w	r3, r3, #32
 8001d6a:	60fb      	str	r3, [r7, #12]
 8001d6c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001d6e:	4b73      	ldr	r3, [pc, #460]	; (8001f3c <MX_GPIO_Init+0x298>)
 8001d70:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001d74:	4a71      	ldr	r2, [pc, #452]	; (8001f3c <MX_GPIO_Init+0x298>)
 8001d76:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001d7a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001d7e:	4b6f      	ldr	r3, [pc, #444]	; (8001f3c <MX_GPIO_Init+0x298>)
 8001d80:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001d84:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d88:	60bb      	str	r3, [r7, #8]
 8001d8a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001d8c:	4b6b      	ldr	r3, [pc, #428]	; (8001f3c <MX_GPIO_Init+0x298>)
 8001d8e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001d92:	4a6a      	ldr	r2, [pc, #424]	; (8001f3c <MX_GPIO_Init+0x298>)
 8001d94:	f043 0308 	orr.w	r3, r3, #8
 8001d98:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001d9c:	4b67      	ldr	r3, [pc, #412]	; (8001f3c <MX_GPIO_Init+0x298>)
 8001d9e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001da2:	f003 0308 	and.w	r3, r3, #8
 8001da6:	607b      	str	r3, [r7, #4]
 8001da8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, ATT_4_Pin|ATT_8_Pin|ATT_16_Pin, GPIO_PIN_SET);
 8001daa:	2201      	movs	r2, #1
 8001dac:	2134      	movs	r1, #52	; 0x34
 8001dae:	4864      	ldr	r0, [pc, #400]	; (8001f40 <MX_GPIO_Init+0x29c>)
 8001db0:	f004 fd82 	bl	80068b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|MW_INVALID_Pin|LASER_TUNING_Pin|LD3_Pin
 8001db4:	2200      	movs	r2, #0
 8001db6:	f245 1103 	movw	r1, #20739	; 0x5103
 8001dba:	4862      	ldr	r0, [pc, #392]	; (8001f44 <MX_GPIO_Init+0x2a0>)
 8001dbc:	f004 fd7c 	bl	80068b8 <HAL_GPIO_WritePin>
                          |SPARE_OUT_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SCOPE_TRIG_OUT_GPIO_Port, SCOPE_TRIG_OUT_Pin, GPIO_PIN_RESET);
 8001dc0:	2200      	movs	r2, #0
 8001dc2:	2101      	movs	r1, #1
 8001dc4:	4860      	ldr	r0, [pc, #384]	; (8001f48 <MX_GPIO_Init+0x2a4>)
 8001dc6:	f004 fd77 	bl	80068b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_OTG_FS_PWR_EN_GPIO_Port, USB_OTG_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 8001dca:	2200      	movs	r2, #0
 8001dcc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001dd0:	485e      	ldr	r0, [pc, #376]	; (8001f4c <MX_GPIO_Init+0x2a8>)
 8001dd2:	f004 fd71 	bl	80068b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, SCLK_Pin|MOSI_Pin|REG_EN_Pin, GPIO_PIN_RESET);
 8001dd6:	2200      	movs	r2, #0
 8001dd8:	f44f 5198 	mov.w	r1, #4864	; 0x1300
 8001ddc:	485c      	ldr	r0, [pc, #368]	; (8001f50 <MX_GPIO_Init+0x2ac>)
 8001dde:	f004 fd6b 	bl	80068b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SEN_GPIO_Port, SEN_Pin, GPIO_PIN_SET);
 8001de2:	2201      	movs	r2, #1
 8001de4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001de8:	4859      	ldr	r0, [pc, #356]	; (8001f50 <MX_GPIO_Init+0x2ac>)
 8001dea:	f004 fd65 	bl	80068b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, ATT_2_Pin|ATT_1_Pin|ATT_05_Pin|ATT_025_Pin
 8001dee:	2201      	movs	r2, #1
 8001df0:	21f8      	movs	r1, #248	; 0xf8
 8001df2:	4856      	ldr	r0, [pc, #344]	; (8001f4c <MX_GPIO_Init+0x2a8>)
 8001df4:	f004 fd60 	bl	80068b8 <HAL_GPIO_WritePin>
                          |ATT_LE_Pin, GPIO_PIN_SET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001df8:	2200      	movs	r2, #0
 8001dfa:	2102      	movs	r1, #2
 8001dfc:	4850      	ldr	r0, [pc, #320]	; (8001f40 <MX_GPIO_Init+0x29c>)
 8001dfe:	f004 fd5b 	bl	80068b8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : ATT_4_Pin ATT_8_Pin ATT_16_Pin LD2_Pin */
  GPIO_InitStruct.Pin = ATT_4_Pin|ATT_8_Pin|ATT_16_Pin|LD2_Pin;
 8001e02:	2336      	movs	r3, #54	; 0x36
 8001e04:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e06:	2301      	movs	r3, #1
 8001e08:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e0a:	2300      	movs	r3, #0
 8001e0c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e0e:	2300      	movs	r3, #0
 8001e10:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001e12:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e16:	4619      	mov	r1, r3
 8001e18:	4849      	ldr	r0, [pc, #292]	; (8001f40 <MX_GPIO_Init+0x29c>)
 8001e1a:	f004 fb85 	bl	8006528 <HAL_GPIO_Init>

  /*Configure GPIO pin : BLUE_BUTTON_Pin */
  GPIO_InitStruct.Pin = BLUE_BUTTON_Pin;
 8001e1e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001e22:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001e24:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001e28:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e2a:	2300      	movs	r3, #0
 8001e2c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(BLUE_BUTTON_GPIO_Port, &GPIO_InitStruct);
 8001e2e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e32:	4619      	mov	r1, r3
 8001e34:	4846      	ldr	r0, [pc, #280]	; (8001f50 <MX_GPIO_Init+0x2ac>)
 8001e36:	f004 fb77 	bl	8006528 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin MW_INVALID_Pin LASER_TUNING_Pin LD3_Pin
                           SPARE_OUT_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|MW_INVALID_Pin|LASER_TUNING_Pin|LD3_Pin
 8001e3a:	f245 1303 	movw	r3, #20739	; 0x5103
 8001e3e:	627b      	str	r3, [r7, #36]	; 0x24
                          |SPARE_OUT_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e40:	2301      	movs	r3, #1
 8001e42:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e44:	2300      	movs	r3, #0
 8001e46:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e48:	2300      	movs	r3, #0
 8001e4a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e4c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e50:	4619      	mov	r1, r3
 8001e52:	483c      	ldr	r0, [pc, #240]	; (8001f44 <MX_GPIO_Init+0x2a0>)
 8001e54:	f004 fb68 	bl	8006528 <HAL_GPIO_Init>

  /*Configure GPIO pin : PF11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001e58:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001e5c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001e5e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001e62:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e64:	2300      	movs	r3, #0
 8001e66:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001e68:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e6c:	4619      	mov	r1, r3
 8001e6e:	4839      	ldr	r0, [pc, #228]	; (8001f54 <MX_GPIO_Init+0x2b0>)
 8001e70:	f004 fb5a 	bl	8006528 <HAL_GPIO_Init>

  /*Configure GPIO pin : SCOPE_TRIG_OUT_Pin */
  GPIO_InitStruct.Pin = SCOPE_TRIG_OUT_Pin;
 8001e74:	2301      	movs	r3, #1
 8001e76:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e78:	2301      	movs	r3, #1
 8001e7a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e7c:	2300      	movs	r3, #0
 8001e7e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e80:	2300      	movs	r3, #0
 8001e82:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(SCOPE_TRIG_OUT_GPIO_Port, &GPIO_InitStruct);
 8001e84:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e88:	4619      	mov	r1, r3
 8001e8a:	482f      	ldr	r0, [pc, #188]	; (8001f48 <MX_GPIO_Init+0x2a4>)
 8001e8c:	f004 fb4c 	bl	8006528 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS_PWR_EN_Pin ATT_2_Pin ATT_1_Pin ATT_05_Pin
                           ATT_025_Pin ATT_LE_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_PWR_EN_Pin|ATT_2_Pin|ATT_1_Pin|ATT_05_Pin
 8001e90:	f44f 639f 	mov.w	r3, #1272	; 0x4f8
 8001e94:	627b      	str	r3, [r7, #36]	; 0x24
                          |ATT_025_Pin|ATT_LE_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e96:	2301      	movs	r3, #1
 8001e98:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e9a:	2300      	movs	r3, #0
 8001e9c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e9e:	2300      	movs	r3, #0
 8001ea0:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001ea2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ea6:	4619      	mov	r1, r3
 8001ea8:	4828      	ldr	r0, [pc, #160]	; (8001f4c <MX_GPIO_Init+0x2a8>)
 8001eaa:	f004 fb3d 	bl	8006528 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS_OVCR_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS_OVCR_Pin;
 8001eae:	2380      	movs	r3, #128	; 0x80
 8001eb0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001eb2:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001eb6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eb8:	2300      	movs	r3, #0
 8001eba:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_OTG_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 8001ebc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ec0:	4619      	mov	r1, r3
 8001ec2:	4821      	ldr	r0, [pc, #132]	; (8001f48 <MX_GPIO_Init+0x2a4>)
 8001ec4:	f004 fb30 	bl	8006528 <HAL_GPIO_Init>

  /*Configure GPIO pins : SCLK_Pin MOSI_Pin SEN_Pin REG_EN_Pin */
  GPIO_InitStruct.Pin = SCLK_Pin|MOSI_Pin|SEN_Pin|REG_EN_Pin;
 8001ec8:	f44f 53d8 	mov.w	r3, #6912	; 0x1b00
 8001ecc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ece:	2301      	movs	r3, #1
 8001ed0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001ed2:	2302      	movs	r3, #2
 8001ed4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ed6:	2300      	movs	r3, #0
 8001ed8:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001eda:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ede:	4619      	mov	r1, r3
 8001ee0:	481b      	ldr	r0, [pc, #108]	; (8001f50 <MX_GPIO_Init+0x2ac>)
 8001ee2:	f004 fb21 	bl	8006528 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 8001ee6:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 8001eea:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001eec:	2302      	movs	r3, #2
 8001eee:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ef0:	2300      	movs	r3, #0
 8001ef2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ef4:	2300      	movs	r3, #0
 8001ef6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8001ef8:	230a      	movs	r3, #10
 8001efa:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001efc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f00:	4619      	mov	r1, r3
 8001f02:	4815      	ldr	r0, [pc, #84]	; (8001f58 <MX_GPIO_Init+0x2b4>)
 8001f04:	f004 fb10 	bl	8006528 <HAL_GPIO_Init>

  /*Configure GPIO pin : MISO_Pin */
  GPIO_InitStruct.Pin = MISO_Pin;
 8001f08:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001f0c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001f0e:	2300      	movs	r3, #0
 8001f10:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f12:	2300      	movs	r3, #0
 8001f14:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(MISO_GPIO_Port, &GPIO_InitStruct);
 8001f16:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f1a:	4619      	mov	r1, r3
 8001f1c:	480c      	ldr	r0, [pc, #48]	; (8001f50 <MX_GPIO_Init+0x2ac>)
 8001f1e:	f004 fb03 	bl	8006528 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001f22:	2200      	movs	r2, #0
 8001f24:	2100      	movs	r1, #0
 8001f26:	2028      	movs	r0, #40	; 0x28
 8001f28:	f002 fdf3 	bl	8004b12 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001f2c:	2028      	movs	r0, #40	; 0x28
 8001f2e:	f002 fe0a 	bl	8004b46 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001f32:	bf00      	nop
 8001f34:	3738      	adds	r7, #56	; 0x38
 8001f36:	46bd      	mov	sp, r7
 8001f38:	bd80      	pop	{r7, pc}
 8001f3a:	bf00      	nop
 8001f3c:	58024400 	.word	0x58024400
 8001f40:	58021000 	.word	0x58021000
 8001f44:	58020400 	.word	0x58020400
 8001f48:	58021800 	.word	0x58021800
 8001f4c:	58020c00 	.word	0x58020c00
 8001f50:	58020800 	.word	0x58020800
 8001f54:	58021400 	.word	0x58021400
 8001f58:	58020000 	.word	0x58020000

08001f5c <HAL_ADC_ConvCpltCallback>:

/* USER CODE BEGIN 4 */

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001f5c:	b580      	push	{r7, lr}
 8001f5e:	b082      	sub	sp, #8
 8001f60:	af00      	add	r7, sp, #0
 8001f62:	6078      	str	r0, [r7, #4]
  adc_val = HAL_ADC_GetValue(&hadc3);
 8001f64:	480a      	ldr	r0, [pc, #40]	; (8001f90 <HAL_ADC_ConvCpltCallback+0x34>)
 8001f66:	f001 fc8f 	bl	8003888 <HAL_ADC_GetValue>
 8001f6a:	4603      	mov	r3, r0
 8001f6c:	4a09      	ldr	r2, [pc, #36]	; (8001f94 <HAL_ADC_ConvCpltCallback+0x38>)
 8001f6e:	6013      	str	r3, [r2, #0]
  //printf("ADC value: %lu \r\n", adc_val);
  dac_val = adc_val >> 4;
 8001f70:	4b08      	ldr	r3, [pc, #32]	; (8001f94 <HAL_ADC_ConvCpltCallback+0x38>)
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	091b      	lsrs	r3, r3, #4
 8001f76:	4a08      	ldr	r2, [pc, #32]	; (8001f98 <HAL_ADC_ConvCpltCallback+0x3c>)
 8001f78:	6013      	str	r3, [r2, #0]
	  printf("ADC reading: %lu, max: %lu, min: %lu \r\n", adc_val, adc_max, adc_min);
  }
  //printf("ADC reading: %lu, max: %lu, min: %lu \r\n", adc_val, adc_max, adc_min);
#endif //QUANTIFY_ADC_NOISE
  //printf("ADC value: %lu, DAC value: %lu \r\n", adc_val, dac_val);
  HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R, dac_val);
 8001f7a:	4b07      	ldr	r3, [pc, #28]	; (8001f98 <HAL_ADC_ConvCpltCallback+0x3c>)
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	2200      	movs	r2, #0
 8001f80:	2100      	movs	r1, #0
 8001f82:	4806      	ldr	r0, [pc, #24]	; (8001f9c <HAL_ADC_ConvCpltCallback+0x40>)
 8001f84:	f002 fe6d 	bl	8004c62 <HAL_DAC_SetValue>
  //HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R, 2048);
}
 8001f88:	bf00      	nop
 8001f8a:	3708      	adds	r7, #8
 8001f8c:	46bd      	mov	sp, r7
 8001f8e:	bd80      	pop	{r7, pc}
 8001f90:	20000304 	.word	0x20000304
 8001f94:	200005c0 	.word	0x200005c0
 8001f98:	200005c4 	.word	0x200005c4
 8001f9c:	20000368 	.word	0x20000368

08001fa0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001fa0:	b580      	push	{r7, lr}
 8001fa2:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001fa4:	b672      	cpsid	i
}
 8001fa6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	__disable_irq();

	printf("Error handler routine called\r\n");
 8001fa8:	4810      	ldr	r0, [pc, #64]	; (8001fec <Error_Handler+0x4c>)
 8001faa:	f016 fda1 	bl	8018af0 <puts>

	/* Disable the AOM */
	HAL_HRTIM_WaveformOutputStop(&hhrtim, HRTIM_OUTPUT_TA1 | HRTIM_OUTPUT_TA2 | HRTIM_OUTPUT_TE1);
 8001fae:	f240 1103 	movw	r1, #259	; 0x103
 8001fb2:	480f      	ldr	r0, [pc, #60]	; (8001ff0 <Error_Handler+0x50>)
 8001fb4:	f005 f80e 	bl	8006fd4 <HAL_HRTIM_WaveformOutputStop>
	HAL_HRTIM_WaveformCounterStop_IT(&hhrtim, HRTIM_TIMERID_TIMER_A | HRTIM_TIMERID_TIMER_E);
 8001fb8:	f44f 1108 	mov.w	r1, #2228224	; 0x220000
 8001fbc:	480c      	ldr	r0, [pc, #48]	; (8001ff0 <Error_Handler+0x50>)
 8001fbe:	f005 f8a7 	bl	8007110 <HAL_HRTIM_WaveformCountStop_IT>

	/* Power down the synthesiser */
	HAL_GPIO_WritePin(REG_EN_GPIO_Port, REG_EN_Pin, 0);
 8001fc2:	2200      	movs	r2, #0
 8001fc4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001fc8:	480a      	ldr	r0, [pc, #40]	; (8001ff4 <Error_Handler+0x54>)
 8001fca:	f004 fc75 	bl	80068b8 <HAL_GPIO_WritePin>

	while (1) {
		HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin); //toggle red LED
 8001fce:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001fd2:	4809      	ldr	r0, [pc, #36]	; (8001ff8 <Error_Handler+0x58>)
 8001fd4:	f004 fc89 	bl	80068ea <HAL_GPIO_TogglePin>
		timer_delay(SLOW_TIMER, ERROR_LED_DELAY);
 8001fd8:	4b08      	ldr	r3, [pc, #32]	; (8001ffc <Error_Handler+0x5c>)
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001fe0:	4611      	mov	r1, r2
 8001fe2:	4618      	mov	r0, r3
 8001fe4:	f018 fcac 	bl	801a940 <__timer_delay_veneer>
		HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin); //toggle red LED
 8001fe8:	e7f1      	b.n	8001fce <Error_Handler+0x2e>
 8001fea:	bf00      	nop
 8001fec:	0801abbc 	.word	0x0801abbc
 8001ff0:	2000037c 	.word	0x2000037c
 8001ff4:	58020800 	.word	0x58020800
 8001ff8:	58020400 	.word	0x58020400
 8001ffc:	20000018 	.word	0x20000018

08002000 <HAL_MspInit>:
void HAL_HRTIM_MspPostInit(HRTIM_HandleTypeDef *hhrtim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002000:	b480      	push	{r7}
 8002002:	b083      	sub	sp, #12
 8002004:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002006:	4b0a      	ldr	r3, [pc, #40]	; (8002030 <HAL_MspInit+0x30>)
 8002008:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800200c:	4a08      	ldr	r2, [pc, #32]	; (8002030 <HAL_MspInit+0x30>)
 800200e:	f043 0302 	orr.w	r3, r3, #2
 8002012:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8002016:	4b06      	ldr	r3, [pc, #24]	; (8002030 <HAL_MspInit+0x30>)
 8002018:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800201c:	f003 0302 	and.w	r3, r3, #2
 8002020:	607b      	str	r3, [r7, #4]
 8002022:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002024:	bf00      	nop
 8002026:	370c      	adds	r7, #12
 8002028:	46bd      	mov	sp, r7
 800202a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800202e:	4770      	bx	lr
 8002030:	58024400 	.word	0x58024400

08002034 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002034:	b580      	push	{r7, lr}
 8002036:	b0b4      	sub	sp, #208	; 0xd0
 8002038:	af00      	add	r7, sp, #0
 800203a:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800203c:	f107 0310 	add.w	r3, r7, #16
 8002040:	22c0      	movs	r2, #192	; 0xc0
 8002042:	2100      	movs	r1, #0
 8002044:	4618      	mov	r0, r3
 8002046:	f016 fe43 	bl	8018cd0 <memset>
  if(hadc->Instance==ADC3)
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	4a2b      	ldr	r2, [pc, #172]	; (80020fc <HAL_ADC_MspInit+0xc8>)
 8002050:	4293      	cmp	r3, r2
 8002052:	d14e      	bne.n	80020f2 <HAL_ADC_MspInit+0xbe>

  /* USER CODE END ADC3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8002054:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8002058:	f04f 0300 	mov.w	r3, #0
 800205c:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.PLL2.PLL2M = 1;
 8002060:	2301      	movs	r3, #1
 8002062:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLL2.PLL2N = 19;
 8002064:	2313      	movs	r3, #19
 8002066:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLL2.PLL2P = 79;
 8002068:	234f      	movs	r3, #79	; 0x4f
 800206a:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLL2.PLL2Q = 2;
 800206c:	2302      	movs	r3, #2
 800206e:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.PLL2.PLL2R = 2;
 8002070:	2302      	movs	r3, #2
 8002072:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 8002074:	23c0      	movs	r3, #192	; 0xc0
 8002076:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 8002078:	2320      	movs	r3, #32
 800207a:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 800207c:	2300      	movs	r3, #0
 800207e:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 8002080:	2300      	movs	r3, #0
 8002082:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002086:	f107 0310 	add.w	r3, r7, #16
 800208a:	4618      	mov	r0, r3
 800208c:	f007 fbca 	bl	8009824 <HAL_RCCEx_PeriphCLKConfig>
 8002090:	4603      	mov	r3, r0
 8002092:	2b00      	cmp	r3, #0
 8002094:	d001      	beq.n	800209a <HAL_ADC_MspInit+0x66>
    {
      Error_Handler();
 8002096:	f7ff ff83 	bl	8001fa0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC3_CLK_ENABLE();
 800209a:	4b19      	ldr	r3, [pc, #100]	; (8002100 <HAL_ADC_MspInit+0xcc>)
 800209c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80020a0:	4a17      	ldr	r2, [pc, #92]	; (8002100 <HAL_ADC_MspInit+0xcc>)
 80020a2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80020a6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80020aa:	4b15      	ldr	r3, [pc, #84]	; (8002100 <HAL_ADC_MspInit+0xcc>)
 80020ac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80020b0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80020b4:	60fb      	str	r3, [r7, #12]
 80020b6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80020b8:	4b11      	ldr	r3, [pc, #68]	; (8002100 <HAL_ADC_MspInit+0xcc>)
 80020ba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80020be:	4a10      	ldr	r2, [pc, #64]	; (8002100 <HAL_ADC_MspInit+0xcc>)
 80020c0:	f043 0304 	orr.w	r3, r3, #4
 80020c4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80020c8:	4b0d      	ldr	r3, [pc, #52]	; (8002100 <HAL_ADC_MspInit+0xcc>)
 80020ca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80020ce:	f003 0304 	and.w	r3, r3, #4
 80020d2:	60bb      	str	r3, [r7, #8]
 80020d4:	68bb      	ldr	r3, [r7, #8]
    /**ADC3 GPIO Configuration
    PC2_C     ------> ADC3_INP0
    */
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC2, SYSCFG_SWITCH_PC2_OPEN);
 80020d6:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
 80020da:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 80020de:	f000 fec1 	bl	8002e64 <HAL_SYSCFG_AnalogSwitchConfig>

    /* ADC3 interrupt Init */
    HAL_NVIC_SetPriority(ADC3_IRQn, 0, 0);
 80020e2:	2200      	movs	r2, #0
 80020e4:	2100      	movs	r1, #0
 80020e6:	207f      	movs	r0, #127	; 0x7f
 80020e8:	f002 fd13 	bl	8004b12 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC3_IRQn);
 80020ec:	207f      	movs	r0, #127	; 0x7f
 80020ee:	f002 fd2a 	bl	8004b46 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 80020f2:	bf00      	nop
 80020f4:	37d0      	adds	r7, #208	; 0xd0
 80020f6:	46bd      	mov	sp, r7
 80020f8:	bd80      	pop	{r7, pc}
 80020fa:	bf00      	nop
 80020fc:	58026000 	.word	0x58026000
 8002100:	58024400 	.word	0x58024400

08002104 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8002104:	b580      	push	{r7, lr}
 8002106:	b08a      	sub	sp, #40	; 0x28
 8002108:	af00      	add	r7, sp, #0
 800210a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800210c:	f107 0314 	add.w	r3, r7, #20
 8002110:	2200      	movs	r2, #0
 8002112:	601a      	str	r2, [r3, #0]
 8002114:	605a      	str	r2, [r3, #4]
 8002116:	609a      	str	r2, [r3, #8]
 8002118:	60da      	str	r2, [r3, #12]
 800211a:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	4a18      	ldr	r2, [pc, #96]	; (8002184 <HAL_DAC_MspInit+0x80>)
 8002122:	4293      	cmp	r3, r2
 8002124:	d129      	bne.n	800217a <HAL_DAC_MspInit+0x76>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC12_CLK_ENABLE();
 8002126:	4b18      	ldr	r3, [pc, #96]	; (8002188 <HAL_DAC_MspInit+0x84>)
 8002128:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800212c:	4a16      	ldr	r2, [pc, #88]	; (8002188 <HAL_DAC_MspInit+0x84>)
 800212e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002132:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002136:	4b14      	ldr	r3, [pc, #80]	; (8002188 <HAL_DAC_MspInit+0x84>)
 8002138:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800213c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002140:	613b      	str	r3, [r7, #16]
 8002142:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002144:	4b10      	ldr	r3, [pc, #64]	; (8002188 <HAL_DAC_MspInit+0x84>)
 8002146:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800214a:	4a0f      	ldr	r2, [pc, #60]	; (8002188 <HAL_DAC_MspInit+0x84>)
 800214c:	f043 0301 	orr.w	r3, r3, #1
 8002150:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002154:	4b0c      	ldr	r3, [pc, #48]	; (8002188 <HAL_DAC_MspInit+0x84>)
 8002156:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800215a:	f003 0301 	and.w	r3, r3, #1
 800215e:	60fb      	str	r3, [r7, #12]
 8002160:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8002162:	2310      	movs	r3, #16
 8002164:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002166:	2303      	movs	r3, #3
 8002168:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800216a:	2300      	movs	r3, #0
 800216c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800216e:	f107 0314 	add.w	r3, r7, #20
 8002172:	4619      	mov	r1, r3
 8002174:	4805      	ldr	r0, [pc, #20]	; (800218c <HAL_DAC_MspInit+0x88>)
 8002176:	f004 f9d7 	bl	8006528 <HAL_GPIO_Init>
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 800217a:	bf00      	nop
 800217c:	3728      	adds	r7, #40	; 0x28
 800217e:	46bd      	mov	sp, r7
 8002180:	bd80      	pop	{r7, pc}
 8002182:	bf00      	nop
 8002184:	40007400 	.word	0x40007400
 8002188:	58024400 	.word	0x58024400
 800218c:	58020000 	.word	0x58020000

08002190 <HAL_HRTIM_MspInit>:
* This function configures the hardware resources used in this example
* @param hhrtim: HRTIM handle pointer
* @retval None
*/
void HAL_HRTIM_MspInit(HRTIM_HandleTypeDef* hhrtim)
{
 8002190:	b580      	push	{r7, lr}
 8002192:	b0b4      	sub	sp, #208	; 0xd0
 8002194:	af00      	add	r7, sp, #0
 8002196:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002198:	f107 0310 	add.w	r3, r7, #16
 800219c:	22c0      	movs	r2, #192	; 0xc0
 800219e:	2100      	movs	r1, #0
 80021a0:	4618      	mov	r0, r3
 80021a2:	f016 fd95 	bl	8018cd0 <memset>
  if(hhrtim->Instance==HRTIM1)
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	4a1c      	ldr	r2, [pc, #112]	; (800221c <HAL_HRTIM_MspInit+0x8c>)
 80021ac:	4293      	cmp	r3, r2
 80021ae:	d131      	bne.n	8002214 <HAL_HRTIM_MspInit+0x84>

  /* USER CODE END HRTIM1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_HRTIM1;
 80021b0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80021b4:	f04f 0300 	mov.w	r3, #0
 80021b8:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Hrtim1ClockSelection = RCC_HRTIM1CLK_TIMCLK;
 80021bc:	2300      	movs	r3, #0
 80021be:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80021c2:	f107 0310 	add.w	r3, r7, #16
 80021c6:	4618      	mov	r0, r3
 80021c8:	f007 fb2c 	bl	8009824 <HAL_RCCEx_PeriphCLKConfig>
 80021cc:	4603      	mov	r3, r0
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d001      	beq.n	80021d6 <HAL_HRTIM_MspInit+0x46>
    {
      Error_Handler();
 80021d2:	f7ff fee5 	bl	8001fa0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_HRTIM1_CLK_ENABLE();
 80021d6:	4b12      	ldr	r3, [pc, #72]	; (8002220 <HAL_HRTIM_MspInit+0x90>)
 80021d8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80021dc:	4a10      	ldr	r2, [pc, #64]	; (8002220 <HAL_HRTIM_MspInit+0x90>)
 80021de:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80021e2:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80021e6:	4b0e      	ldr	r3, [pc, #56]	; (8002220 <HAL_HRTIM_MspInit+0x90>)
 80021e8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80021ec:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80021f0:	60fb      	str	r3, [r7, #12]
 80021f2:	68fb      	ldr	r3, [r7, #12]
    /* HRTIM1 interrupt Init */
    HAL_NVIC_SetPriority(HRTIM1_TIMA_IRQn, 0, 0);
 80021f4:	2200      	movs	r2, #0
 80021f6:	2100      	movs	r1, #0
 80021f8:	2068      	movs	r0, #104	; 0x68
 80021fa:	f002 fc8a 	bl	8004b12 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(HRTIM1_TIMA_IRQn);
 80021fe:	2068      	movs	r0, #104	; 0x68
 8002200:	f002 fca1 	bl	8004b46 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(HRTIM1_TIME_IRQn, 0, 0);
 8002204:	2200      	movs	r2, #0
 8002206:	2100      	movs	r1, #0
 8002208:	206c      	movs	r0, #108	; 0x6c
 800220a:	f002 fc82 	bl	8004b12 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(HRTIM1_TIME_IRQn);
 800220e:	206c      	movs	r0, #108	; 0x6c
 8002210:	f002 fc99 	bl	8004b46 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN HRTIM1_MspInit 1 */

  /* USER CODE END HRTIM1_MspInit 1 */
  }

}
 8002214:	bf00      	nop
 8002216:	37d0      	adds	r7, #208	; 0xd0
 8002218:	46bd      	mov	sp, r7
 800221a:	bd80      	pop	{r7, pc}
 800221c:	40017400 	.word	0x40017400
 8002220:	58024400 	.word	0x58024400

08002224 <HAL_HRTIM_MspPostInit>:

void HAL_HRTIM_MspPostInit(HRTIM_HandleTypeDef* hhrtim)
{
 8002224:	b580      	push	{r7, lr}
 8002226:	b08a      	sub	sp, #40	; 0x28
 8002228:	af00      	add	r7, sp, #0
 800222a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800222c:	f107 0314 	add.w	r3, r7, #20
 8002230:	2200      	movs	r2, #0
 8002232:	601a      	str	r2, [r3, #0]
 8002234:	605a      	str	r2, [r3, #4]
 8002236:	609a      	str	r2, [r3, #8]
 8002238:	60da      	str	r2, [r3, #12]
 800223a:	611a      	str	r2, [r3, #16]
  if(hhrtim->Instance==HRTIM1)
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	4a22      	ldr	r2, [pc, #136]	; (80022cc <HAL_HRTIM_MspPostInit+0xa8>)
 8002242:	4293      	cmp	r3, r2
 8002244:	d13d      	bne.n	80022c2 <HAL_HRTIM_MspPostInit+0x9e>
  {
  /* USER CODE BEGIN HRTIM1_MspPostInit 0 */

  /* USER CODE END HRTIM1_MspPostInit 0 */

    __HAL_RCC_GPIOG_CLK_ENABLE();
 8002246:	4b22      	ldr	r3, [pc, #136]	; (80022d0 <HAL_HRTIM_MspPostInit+0xac>)
 8002248:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800224c:	4a20      	ldr	r2, [pc, #128]	; (80022d0 <HAL_HRTIM_MspPostInit+0xac>)
 800224e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002252:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002256:	4b1e      	ldr	r3, [pc, #120]	; (80022d0 <HAL_HRTIM_MspPostInit+0xac>)
 8002258:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800225c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002260:	613b      	str	r3, [r7, #16]
 8002262:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002264:	4b1a      	ldr	r3, [pc, #104]	; (80022d0 <HAL_HRTIM_MspPostInit+0xac>)
 8002266:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800226a:	4a19      	ldr	r2, [pc, #100]	; (80022d0 <HAL_HRTIM_MspPostInit+0xac>)
 800226c:	f043 0304 	orr.w	r3, r3, #4
 8002270:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8002274:	4b16      	ldr	r3, [pc, #88]	; (80022d0 <HAL_HRTIM_MspPostInit+0xac>)
 8002276:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800227a:	f003 0304 	and.w	r3, r3, #4
 800227e:	60fb      	str	r3, [r7, #12]
 8002280:	68fb      	ldr	r3, [r7, #12]
    /**HRTIM GPIO Configuration
    PG6     ------> HRTIM_CHE1
    PC6     ------> HRTIM_CHA1
    PC7     ------> HRTIM_CHA2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002282:	2340      	movs	r3, #64	; 0x40
 8002284:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002286:	2302      	movs	r3, #2
 8002288:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800228a:	2300      	movs	r3, #0
 800228c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800228e:	2303      	movs	r3, #3
 8002290:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_HRTIM1;
 8002292:	2302      	movs	r3, #2
 8002294:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002296:	f107 0314 	add.w	r3, r7, #20
 800229a:	4619      	mov	r1, r3
 800229c:	480d      	ldr	r0, [pc, #52]	; (80022d4 <HAL_HRTIM_MspPostInit+0xb0>)
 800229e:	f004 f943 	bl	8006528 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80022a2:	23c0      	movs	r3, #192	; 0xc0
 80022a4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022a6:	2302      	movs	r3, #2
 80022a8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022aa:	2300      	movs	r3, #0
 80022ac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80022ae:	2303      	movs	r3, #3
 80022b0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_HRTIM1;
 80022b2:	2301      	movs	r3, #1
 80022b4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80022b6:	f107 0314 	add.w	r3, r7, #20
 80022ba:	4619      	mov	r1, r3
 80022bc:	4806      	ldr	r0, [pc, #24]	; (80022d8 <HAL_HRTIM_MspPostInit+0xb4>)
 80022be:	f004 f933 	bl	8006528 <HAL_GPIO_Init>
  /* USER CODE BEGIN HRTIM1_MspPostInit 1 */

  /* USER CODE END HRTIM1_MspPostInit 1 */
  }

}
 80022c2:	bf00      	nop
 80022c4:	3728      	adds	r7, #40	; 0x28
 80022c6:	46bd      	mov	sp, r7
 80022c8:	bd80      	pop	{r7, pc}
 80022ca:	bf00      	nop
 80022cc:	40017400 	.word	0x40017400
 80022d0:	58024400 	.word	0x58024400
 80022d4:	58021800 	.word	0x58021800
 80022d8:	58020800 	.word	0x58020800

080022dc <HAL_LPTIM_MspInit>:
* This function configures the hardware resources used in this example
* @param hlptim: LPTIM handle pointer
* @retval None
*/
void HAL_LPTIM_MspInit(LPTIM_HandleTypeDef* hlptim)
{
 80022dc:	b580      	push	{r7, lr}
 80022de:	b0b4      	sub	sp, #208	; 0xd0
 80022e0:	af00      	add	r7, sp, #0
 80022e2:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80022e4:	f107 0310 	add.w	r3, r7, #16
 80022e8:	22c0      	movs	r2, #192	; 0xc0
 80022ea:	2100      	movs	r1, #0
 80022ec:	4618      	mov	r0, r3
 80022ee:	f016 fcef 	bl	8018cd0 <memset>
  if(hlptim->Instance==LPTIM1)
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	4a19      	ldr	r2, [pc, #100]	; (800235c <HAL_LPTIM_MspInit+0x80>)
 80022f8:	4293      	cmp	r3, r2
 80022fa:	d12a      	bne.n	8002352 <HAL_LPTIM_MspInit+0x76>

  /* USER CODE END LPTIM1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LPTIM1;
 80022fc:	f04f 0220 	mov.w	r2, #32
 8002300:	f04f 0300 	mov.w	r3, #0
 8002304:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Lptim1ClockSelection = RCC_LPTIM1CLKSOURCE_LSE;
 8002308:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 800230c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002310:	f107 0310 	add.w	r3, r7, #16
 8002314:	4618      	mov	r0, r3
 8002316:	f007 fa85 	bl	8009824 <HAL_RCCEx_PeriphCLKConfig>
 800231a:	4603      	mov	r3, r0
 800231c:	2b00      	cmp	r3, #0
 800231e:	d001      	beq.n	8002324 <HAL_LPTIM_MspInit+0x48>
    {
      Error_Handler();
 8002320:	f7ff fe3e 	bl	8001fa0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPTIM1_CLK_ENABLE();
 8002324:	4b0e      	ldr	r3, [pc, #56]	; (8002360 <HAL_LPTIM_MspInit+0x84>)
 8002326:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800232a:	4a0d      	ldr	r2, [pc, #52]	; (8002360 <HAL_LPTIM_MspInit+0x84>)
 800232c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002330:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8002334:	4b0a      	ldr	r3, [pc, #40]	; (8002360 <HAL_LPTIM_MspInit+0x84>)
 8002336:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800233a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800233e:	60fb      	str	r3, [r7, #12]
 8002340:	68fb      	ldr	r3, [r7, #12]
    /* LPTIM1 interrupt Init */
    HAL_NVIC_SetPriority(LPTIM1_IRQn, 0, 0);
 8002342:	2200      	movs	r2, #0
 8002344:	2100      	movs	r1, #0
 8002346:	205d      	movs	r0, #93	; 0x5d
 8002348:	f002 fbe3 	bl	8004b12 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPTIM1_IRQn);
 800234c:	205d      	movs	r0, #93	; 0x5d
 800234e:	f002 fbfa 	bl	8004b46 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LPTIM1_MspInit 1 */

  /* USER CODE END LPTIM1_MspInit 1 */
  }

}
 8002352:	bf00      	nop
 8002354:	37d0      	adds	r7, #208	; 0xd0
 8002356:	46bd      	mov	sp, r7
 8002358:	bd80      	pop	{r7, pc}
 800235a:	bf00      	nop
 800235c:	40002400 	.word	0x40002400
 8002360:	58024400 	.word	0x58024400

08002364 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002364:	b480      	push	{r7}
 8002366:	b085      	sub	sp, #20
 8002368:	af00      	add	r7, sp, #0
 800236a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	4a16      	ldr	r2, [pc, #88]	; (80023cc <HAL_TIM_Base_MspInit+0x68>)
 8002372:	4293      	cmp	r3, r2
 8002374:	d10f      	bne.n	8002396 <HAL_TIM_Base_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002376:	4b16      	ldr	r3, [pc, #88]	; (80023d0 <HAL_TIM_Base_MspInit+0x6c>)
 8002378:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800237c:	4a14      	ldr	r2, [pc, #80]	; (80023d0 <HAL_TIM_Base_MspInit+0x6c>)
 800237e:	f043 0301 	orr.w	r3, r3, #1
 8002382:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8002386:	4b12      	ldr	r3, [pc, #72]	; (80023d0 <HAL_TIM_Base_MspInit+0x6c>)
 8002388:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800238c:	f003 0301 	and.w	r3, r3, #1
 8002390:	60fb      	str	r3, [r7, #12]
 8002392:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8002394:	e013      	b.n	80023be <HAL_TIM_Base_MspInit+0x5a>
  else if(htim_base->Instance==TIM3)
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	4a0e      	ldr	r2, [pc, #56]	; (80023d4 <HAL_TIM_Base_MspInit+0x70>)
 800239c:	4293      	cmp	r3, r2
 800239e:	d10e      	bne.n	80023be <HAL_TIM_Base_MspInit+0x5a>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80023a0:	4b0b      	ldr	r3, [pc, #44]	; (80023d0 <HAL_TIM_Base_MspInit+0x6c>)
 80023a2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80023a6:	4a0a      	ldr	r2, [pc, #40]	; (80023d0 <HAL_TIM_Base_MspInit+0x6c>)
 80023a8:	f043 0302 	orr.w	r3, r3, #2
 80023ac:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 80023b0:	4b07      	ldr	r3, [pc, #28]	; (80023d0 <HAL_TIM_Base_MspInit+0x6c>)
 80023b2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80023b6:	f003 0302 	and.w	r3, r3, #2
 80023ba:	60bb      	str	r3, [r7, #8]
 80023bc:	68bb      	ldr	r3, [r7, #8]
}
 80023be:	bf00      	nop
 80023c0:	3714      	adds	r7, #20
 80023c2:	46bd      	mov	sp, r7
 80023c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c8:	4770      	bx	lr
 80023ca:	bf00      	nop
 80023cc:	40010000 	.word	0x40010000
 80023d0:	58024400 	.word	0x58024400
 80023d4:	40000400 	.word	0x40000400

080023d8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80023d8:	b580      	push	{r7, lr}
 80023da:	b0ba      	sub	sp, #232	; 0xe8
 80023dc:	af00      	add	r7, sp, #0
 80023de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023e0:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80023e4:	2200      	movs	r2, #0
 80023e6:	601a      	str	r2, [r3, #0]
 80023e8:	605a      	str	r2, [r3, #4]
 80023ea:	609a      	str	r2, [r3, #8]
 80023ec:	60da      	str	r2, [r3, #12]
 80023ee:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80023f0:	f107 0310 	add.w	r3, r7, #16
 80023f4:	22c0      	movs	r2, #192	; 0xc0
 80023f6:	2100      	movs	r1, #0
 80023f8:	4618      	mov	r0, r3
 80023fa:	f016 fc69 	bl	8018cd0 <memset>
  if(huart->Instance==USART3)
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	4a27      	ldr	r2, [pc, #156]	; (80024a0 <HAL_UART_MspInit+0xc8>)
 8002404:	4293      	cmp	r3, r2
 8002406:	d146      	bne.n	8002496 <HAL_UART_MspInit+0xbe>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8002408:	f04f 0202 	mov.w	r2, #2
 800240c:	f04f 0300 	mov.w	r3, #0
 8002410:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8002414:	2300      	movs	r3, #0
 8002416:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800241a:	f107 0310 	add.w	r3, r7, #16
 800241e:	4618      	mov	r0, r3
 8002420:	f007 fa00 	bl	8009824 <HAL_RCCEx_PeriphCLKConfig>
 8002424:	4603      	mov	r3, r0
 8002426:	2b00      	cmp	r3, #0
 8002428:	d001      	beq.n	800242e <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 800242a:	f7ff fdb9 	bl	8001fa0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800242e:	4b1d      	ldr	r3, [pc, #116]	; (80024a4 <HAL_UART_MspInit+0xcc>)
 8002430:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002434:	4a1b      	ldr	r2, [pc, #108]	; (80024a4 <HAL_UART_MspInit+0xcc>)
 8002436:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800243a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800243e:	4b19      	ldr	r3, [pc, #100]	; (80024a4 <HAL_UART_MspInit+0xcc>)
 8002440:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8002444:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002448:	60fb      	str	r3, [r7, #12]
 800244a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800244c:	4b15      	ldr	r3, [pc, #84]	; (80024a4 <HAL_UART_MspInit+0xcc>)
 800244e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002452:	4a14      	ldr	r2, [pc, #80]	; (80024a4 <HAL_UART_MspInit+0xcc>)
 8002454:	f043 0308 	orr.w	r3, r3, #8
 8002458:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800245c:	4b11      	ldr	r3, [pc, #68]	; (80024a4 <HAL_UART_MspInit+0xcc>)
 800245e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8002462:	f003 0308 	and.w	r3, r3, #8
 8002466:	60bb      	str	r3, [r7, #8]
 8002468:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 800246a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800246e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002472:	2302      	movs	r3, #2
 8002474:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002478:	2300      	movs	r3, #0
 800247a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800247e:	2300      	movs	r3, #0
 8002480:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002484:	2307      	movs	r3, #7
 8002486:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800248a:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800248e:	4619      	mov	r1, r3
 8002490:	4805      	ldr	r0, [pc, #20]	; (80024a8 <HAL_UART_MspInit+0xd0>)
 8002492:	f004 f849 	bl	8006528 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8002496:	bf00      	nop
 8002498:	37e8      	adds	r7, #232	; 0xe8
 800249a:	46bd      	mov	sp, r7
 800249c:	bd80      	pop	{r7, pc}
 800249e:	bf00      	nop
 80024a0:	40004800 	.word	0x40004800
 80024a4:	58024400 	.word	0x58024400
 80024a8:	58020c00 	.word	0x58020c00

080024ac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80024ac:	b580      	push	{r7, lr}
 80024ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */
  /* USER CODE END NonMaskableInt_IRQn 0 */
  HAL_RCC_NMI_IRQHandler();
 80024b0:	f007 f99c 	bl	80097ec <HAL_RCC_NMI_IRQHandler>
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1) {
		Error_Handler();
 80024b4:	f7ff fd74 	bl	8001fa0 <Error_Handler>
 80024b8:	e7fc      	b.n	80024b4 <NMI_Handler+0x8>

080024ba <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80024ba:	b580      	push	{r7, lr}
 80024bc:	af00      	add	r7, sp, #0

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_HardFault_IRQn 0 */
	  Error_Handler();
 80024be:	f7ff fd6f 	bl	8001fa0 <Error_Handler>
 80024c2:	e7fc      	b.n	80024be <HardFault_Handler+0x4>

080024c4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80024c4:	b580      	push	{r7, lr}
 80024c6:	af00      	add	r7, sp, #0

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_MemoryManagement_IRQn 0 */
	  Error_Handler();
 80024c8:	f7ff fd6a 	bl	8001fa0 <Error_Handler>
 80024cc:	e7fc      	b.n	80024c8 <MemManage_Handler+0x4>

080024ce <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80024ce:	b580      	push	{r7, lr}
 80024d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */
  /* USER CODE END BusFault_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_BusFault_IRQn 0 */
	  Error_Handler();
 80024d2:	f7ff fd65 	bl	8001fa0 <Error_Handler>
 80024d6:	e7fc      	b.n	80024d2 <BusFault_Handler+0x4>

080024d8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80024d8:	b580      	push	{r7, lr}
 80024da:	af00      	add	r7, sp, #0

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_UsageFault_IRQn 0 */
	  Error_Handler();
 80024dc:	f7ff fd60 	bl	8001fa0 <Error_Handler>
 80024e0:	e7fc      	b.n	80024dc <UsageFault_Handler+0x4>

080024e2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80024e2:	b480      	push	{r7}
 80024e4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80024e6:	bf00      	nop
 80024e8:	46bd      	mov	sp, r7
 80024ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ee:	4770      	bx	lr

080024f0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80024f0:	b480      	push	{r7}
 80024f2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80024f4:	bf00      	nop
 80024f6:	46bd      	mov	sp, r7
 80024f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024fc:	4770      	bx	lr

080024fe <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80024fe:	b480      	push	{r7}
 8002500:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002502:	bf00      	nop
 8002504:	46bd      	mov	sp, r7
 8002506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800250a:	4770      	bx	lr

0800250c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800250c:	b580      	push	{r7, lr}
 800250e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002510:	f000 fc44 	bl	8002d9c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002514:	bf00      	nop
 8002516:	bd80      	pop	{r7, pc}

08002518 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002518:	b580      	push	{r7, lr}
 800251a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 800251c:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8002520:	f004 f9fd 	bl	800691e <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(BLUE_BUTTON_Pin);
 8002524:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8002528:	f004 f9f9 	bl	800691e <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800252c:	bf00      	nop
 800252e:	bd80      	pop	{r7, pc}

08002530 <LPTIM1_IRQHandler>:

/**
  * @brief This function handles LPTIM1 global interrupt.
  */
void LPTIM1_IRQHandler(void)
{
 8002530:	b580      	push	{r7, lr}
 8002532:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPTIM1_IRQn 0 */
  /* USER CODE END LPTIM1_IRQn 0 */
  HAL_LPTIM_IRQHandler(&hlptim1);
 8002534:	4802      	ldr	r0, [pc, #8]	; (8002540 <LPTIM1_IRQHandler+0x10>)
 8002536:	f005 fe32 	bl	800819e <HAL_LPTIM_IRQHandler>
  /* USER CODE BEGIN LPTIM1_IRQn 1 */
  /* USER CODE END LPTIM1_IRQn 1 */
}
 800253a:	bf00      	nop
 800253c:	bd80      	pop	{r7, pc}
 800253e:	bf00      	nop
 8002540:	20000458 	.word	0x20000458

08002544 <HRTIM1_TIMA_IRQHandler>:

/**
  * @brief This function handles HRTIM timer A global interrupt.
  */
void HRTIM1_TIMA_IRQHandler(void)
{
 8002544:	b580      	push	{r7, lr}
 8002546:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HRTIM1_TIMA_IRQn 0 */

  /* USER CODE END HRTIM1_TIMA_IRQn 0 */
  HAL_HRTIM_IRQHandler(&hhrtim,HRTIM_TIMERINDEX_TIMER_A);
 8002548:	2100      	movs	r1, #0
 800254a:	4802      	ldr	r0, [pc, #8]	; (8002554 <HRTIM1_TIMA_IRQHandler+0x10>)
 800254c:	f004 fe5e 	bl	800720c <HAL_HRTIM_IRQHandler>
  /* USER CODE BEGIN HRTIM1_TIMA_IRQn 1 */

  /* USER CODE END HRTIM1_TIMA_IRQn 1 */
}
 8002550:	bf00      	nop
 8002552:	bd80      	pop	{r7, pc}
 8002554:	2000037c 	.word	0x2000037c

08002558 <HRTIM1_TIME_IRQHandler>:

/**
  * @brief This function handles HRTIM timer E global interrupt.
  */
void HRTIM1_TIME_IRQHandler(void)
{
 8002558:	b580      	push	{r7, lr}
 800255a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HRTIM1_TIME_IRQn 0 */

  /* USER CODE END HRTIM1_TIME_IRQn 0 */
  HAL_HRTIM_IRQHandler(&hhrtim,HRTIM_TIMERINDEX_TIMER_E);
 800255c:	2104      	movs	r1, #4
 800255e:	4802      	ldr	r0, [pc, #8]	; (8002568 <HRTIM1_TIME_IRQHandler+0x10>)
 8002560:	f004 fe54 	bl	800720c <HAL_HRTIM_IRQHandler>
  /* USER CODE BEGIN HRTIM1_TIME_IRQn 1 */

  /* USER CODE END HRTIM1_TIME_IRQn 1 */
}
 8002564:	bf00      	nop
 8002566:	bd80      	pop	{r7, pc}
 8002568:	2000037c 	.word	0x2000037c

0800256c <ADC3_IRQHandler>:

/**
  * @brief This function handles ADC3 global interrupt.
  */
void ADC3_IRQHandler(void)
{
 800256c:	b580      	push	{r7, lr}
 800256e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC3_IRQn 0 */

  /* USER CODE END ADC3_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc3);
 8002570:	4802      	ldr	r0, [pc, #8]	; (800257c <ADC3_IRQHandler+0x10>)
 8002572:	f001 f997 	bl	80038a4 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC3_IRQn 1 */

  /* USER CODE END ADC3_IRQn 1 */
}
 8002576:	bf00      	nop
 8002578:	bd80      	pop	{r7, pc}
 800257a:	bf00      	nop
 800257c:	20000304 	.word	0x20000304

08002580 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002580:	b480      	push	{r7}
 8002582:	af00      	add	r7, sp, #0
	return 1;
 8002584:	2301      	movs	r3, #1
}
 8002586:	4618      	mov	r0, r3
 8002588:	46bd      	mov	sp, r7
 800258a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800258e:	4770      	bx	lr

08002590 <_kill>:

int _kill(int pid, int sig)
{
 8002590:	b480      	push	{r7}
 8002592:	b083      	sub	sp, #12
 8002594:	af00      	add	r7, sp, #0
 8002596:	6078      	str	r0, [r7, #4]
 8002598:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800259a:	4b05      	ldr	r3, [pc, #20]	; (80025b0 <_kill+0x20>)
 800259c:	2216      	movs	r2, #22
 800259e:	601a      	str	r2, [r3, #0]
	return -1;
 80025a0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80025a4:	4618      	mov	r0, r3
 80025a6:	370c      	adds	r7, #12
 80025a8:	46bd      	mov	sp, r7
 80025aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ae:	4770      	bx	lr
 80025b0:	20008270 	.word	0x20008270

080025b4 <_exit>:

void _exit (int status)
{
 80025b4:	b580      	push	{r7, lr}
 80025b6:	b082      	sub	sp, #8
 80025b8:	af00      	add	r7, sp, #0
 80025ba:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80025bc:	f04f 31ff 	mov.w	r1, #4294967295
 80025c0:	6878      	ldr	r0, [r7, #4]
 80025c2:	f7ff ffe5 	bl	8002590 <_kill>
	while (1) {}		/* Make sure we hang here */
 80025c6:	e7fe      	b.n	80025c6 <_exit+0x12>

080025c8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80025c8:	b580      	push	{r7, lr}
 80025ca:	b086      	sub	sp, #24
 80025cc:	af00      	add	r7, sp, #0
 80025ce:	60f8      	str	r0, [r7, #12]
 80025d0:	60b9      	str	r1, [r7, #8]
 80025d2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80025d4:	2300      	movs	r3, #0
 80025d6:	617b      	str	r3, [r7, #20]
 80025d8:	e00a      	b.n	80025f0 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80025da:	f3af 8000 	nop.w
 80025de:	4601      	mov	r1, r0
 80025e0:	68bb      	ldr	r3, [r7, #8]
 80025e2:	1c5a      	adds	r2, r3, #1
 80025e4:	60ba      	str	r2, [r7, #8]
 80025e6:	b2ca      	uxtb	r2, r1
 80025e8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80025ea:	697b      	ldr	r3, [r7, #20]
 80025ec:	3301      	adds	r3, #1
 80025ee:	617b      	str	r3, [r7, #20]
 80025f0:	697a      	ldr	r2, [r7, #20]
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	429a      	cmp	r2, r3
 80025f6:	dbf0      	blt.n	80025da <_read+0x12>
	}

return len;
 80025f8:	687b      	ldr	r3, [r7, #4]
}
 80025fa:	4618      	mov	r0, r3
 80025fc:	3718      	adds	r7, #24
 80025fe:	46bd      	mov	sp, r7
 8002600:	bd80      	pop	{r7, pc}

08002602 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002602:	b580      	push	{r7, lr}
 8002604:	b086      	sub	sp, #24
 8002606:	af00      	add	r7, sp, #0
 8002608:	60f8      	str	r0, [r7, #12]
 800260a:	60b9      	str	r1, [r7, #8]
 800260c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800260e:	2300      	movs	r3, #0
 8002610:	617b      	str	r3, [r7, #20]
 8002612:	e009      	b.n	8002628 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002614:	68bb      	ldr	r3, [r7, #8]
 8002616:	1c5a      	adds	r2, r3, #1
 8002618:	60ba      	str	r2, [r7, #8]
 800261a:	781b      	ldrb	r3, [r3, #0]
 800261c:	4618      	mov	r0, r3
 800261e:	f7fe fdbd 	bl	800119c <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002622:	697b      	ldr	r3, [r7, #20]
 8002624:	3301      	adds	r3, #1
 8002626:	617b      	str	r3, [r7, #20]
 8002628:	697a      	ldr	r2, [r7, #20]
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	429a      	cmp	r2, r3
 800262e:	dbf1      	blt.n	8002614 <_write+0x12>
	}
	return len;
 8002630:	687b      	ldr	r3, [r7, #4]
}
 8002632:	4618      	mov	r0, r3
 8002634:	3718      	adds	r7, #24
 8002636:	46bd      	mov	sp, r7
 8002638:	bd80      	pop	{r7, pc}

0800263a <_close>:

int _close(int file)
{
 800263a:	b480      	push	{r7}
 800263c:	b083      	sub	sp, #12
 800263e:	af00      	add	r7, sp, #0
 8002640:	6078      	str	r0, [r7, #4]
	return -1;
 8002642:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002646:	4618      	mov	r0, r3
 8002648:	370c      	adds	r7, #12
 800264a:	46bd      	mov	sp, r7
 800264c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002650:	4770      	bx	lr

08002652 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002652:	b480      	push	{r7}
 8002654:	b083      	sub	sp, #12
 8002656:	af00      	add	r7, sp, #0
 8002658:	6078      	str	r0, [r7, #4]
 800265a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800265c:	683b      	ldr	r3, [r7, #0]
 800265e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002662:	605a      	str	r2, [r3, #4]
	return 0;
 8002664:	2300      	movs	r3, #0
}
 8002666:	4618      	mov	r0, r3
 8002668:	370c      	adds	r7, #12
 800266a:	46bd      	mov	sp, r7
 800266c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002670:	4770      	bx	lr

08002672 <_isatty>:

int _isatty(int file)
{
 8002672:	b480      	push	{r7}
 8002674:	b083      	sub	sp, #12
 8002676:	af00      	add	r7, sp, #0
 8002678:	6078      	str	r0, [r7, #4]
	return 1;
 800267a:	2301      	movs	r3, #1
}
 800267c:	4618      	mov	r0, r3
 800267e:	370c      	adds	r7, #12
 8002680:	46bd      	mov	sp, r7
 8002682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002686:	4770      	bx	lr

08002688 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002688:	b480      	push	{r7}
 800268a:	b085      	sub	sp, #20
 800268c:	af00      	add	r7, sp, #0
 800268e:	60f8      	str	r0, [r7, #12]
 8002690:	60b9      	str	r1, [r7, #8]
 8002692:	607a      	str	r2, [r7, #4]
	return 0;
 8002694:	2300      	movs	r3, #0
}
 8002696:	4618      	mov	r0, r3
 8002698:	3714      	adds	r7, #20
 800269a:	46bd      	mov	sp, r7
 800269c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a0:	4770      	bx	lr
	...

080026a4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80026a4:	b480      	push	{r7}
 80026a6:	b087      	sub	sp, #28
 80026a8:	af00      	add	r7, sp, #0
 80026aa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80026ac:	4a14      	ldr	r2, [pc, #80]	; (8002700 <_sbrk+0x5c>)
 80026ae:	4b15      	ldr	r3, [pc, #84]	; (8002704 <_sbrk+0x60>)
 80026b0:	1ad3      	subs	r3, r2, r3
 80026b2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80026b4:	697b      	ldr	r3, [r7, #20]
 80026b6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80026b8:	4b13      	ldr	r3, [pc, #76]	; (8002708 <_sbrk+0x64>)
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d102      	bne.n	80026c6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80026c0:	4b11      	ldr	r3, [pc, #68]	; (8002708 <_sbrk+0x64>)
 80026c2:	4a12      	ldr	r2, [pc, #72]	; (800270c <_sbrk+0x68>)
 80026c4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80026c6:	4b10      	ldr	r3, [pc, #64]	; (8002708 <_sbrk+0x64>)
 80026c8:	681a      	ldr	r2, [r3, #0]
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	4413      	add	r3, r2
 80026ce:	693a      	ldr	r2, [r7, #16]
 80026d0:	429a      	cmp	r2, r3
 80026d2:	d205      	bcs.n	80026e0 <_sbrk+0x3c>
  {
    errno = ENOMEM;
 80026d4:	4b0e      	ldr	r3, [pc, #56]	; (8002710 <_sbrk+0x6c>)
 80026d6:	220c      	movs	r2, #12
 80026d8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80026da:	f04f 33ff 	mov.w	r3, #4294967295
 80026de:	e009      	b.n	80026f4 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 80026e0:	4b09      	ldr	r3, [pc, #36]	; (8002708 <_sbrk+0x64>)
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80026e6:	4b08      	ldr	r3, [pc, #32]	; (8002708 <_sbrk+0x64>)
 80026e8:	681a      	ldr	r2, [r3, #0]
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	4413      	add	r3, r2
 80026ee:	4a06      	ldr	r2, [pc, #24]	; (8002708 <_sbrk+0x64>)
 80026f0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80026f2:	68fb      	ldr	r3, [r7, #12]
}
 80026f4:	4618      	mov	r0, r3
 80026f6:	371c      	adds	r7, #28
 80026f8:	46bd      	mov	sp, r7
 80026fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026fe:	4770      	bx	lr
 8002700:	20020000 	.word	0x20020000
 8002704:	00000400 	.word	0x00000400
 8002708:	200005c8 	.word	0x200005c8
 800270c:	20008280 	.word	0x20008280
 8002710:	20008270 	.word	0x20008270

08002714 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002714:	b480      	push	{r7}
 8002716:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8002718:	4b37      	ldr	r3, [pc, #220]	; (80027f8 <SystemInit+0xe4>)
 800271a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800271e:	4a36      	ldr	r2, [pc, #216]	; (80027f8 <SystemInit+0xe4>)
 8002720:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002724:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8002728:	4b34      	ldr	r3, [pc, #208]	; (80027fc <SystemInit+0xe8>)
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	f003 030f 	and.w	r3, r3, #15
 8002730:	2b06      	cmp	r3, #6
 8002732:	d807      	bhi.n	8002744 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */

	  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8002734:	4b31      	ldr	r3, [pc, #196]	; (80027fc <SystemInit+0xe8>)
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	f023 030f 	bic.w	r3, r3, #15
 800273c:	4a2f      	ldr	r2, [pc, #188]	; (80027fc <SystemInit+0xe8>)
 800273e:	f043 0307 	orr.w	r3, r3, #7
 8002742:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8002744:	4b2e      	ldr	r3, [pc, #184]	; (8002800 <SystemInit+0xec>)
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	4a2d      	ldr	r2, [pc, #180]	; (8002800 <SystemInit+0xec>)
 800274a:	f043 0301 	orr.w	r3, r3, #1
 800274e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8002750:	4b2b      	ldr	r3, [pc, #172]	; (8002800 <SystemInit+0xec>)
 8002752:	2200      	movs	r2, #0
 8002754:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8002756:	4b2a      	ldr	r3, [pc, #168]	; (8002800 <SystemInit+0xec>)
 8002758:	681a      	ldr	r2, [r3, #0]
 800275a:	4929      	ldr	r1, [pc, #164]	; (8002800 <SystemInit+0xec>)
 800275c:	4b29      	ldr	r3, [pc, #164]	; (8002804 <SystemInit+0xf0>)
 800275e:	4013      	ands	r3, r2
 8002760:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8002762:	4b26      	ldr	r3, [pc, #152]	; (80027fc <SystemInit+0xe8>)
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	f003 0308 	and.w	r3, r3, #8
 800276a:	2b00      	cmp	r3, #0
 800276c:	d007      	beq.n	800277e <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800276e:	4b23      	ldr	r3, [pc, #140]	; (80027fc <SystemInit+0xe8>)
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	f023 030f 	bic.w	r3, r3, #15
 8002776:	4a21      	ldr	r2, [pc, #132]	; (80027fc <SystemInit+0xe8>)
 8002778:	f043 0307 	orr.w	r3, r3, #7
 800277c:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800277e:	4b20      	ldr	r3, [pc, #128]	; (8002800 <SystemInit+0xec>)
 8002780:	2200      	movs	r2, #0
 8002782:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8002784:	4b1e      	ldr	r3, [pc, #120]	; (8002800 <SystemInit+0xec>)
 8002786:	2200      	movs	r2, #0
 8002788:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800278a:	4b1d      	ldr	r3, [pc, #116]	; (8002800 <SystemInit+0xec>)
 800278c:	2200      	movs	r2, #0
 800278e:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8002790:	4b1b      	ldr	r3, [pc, #108]	; (8002800 <SystemInit+0xec>)
 8002792:	4a1d      	ldr	r2, [pc, #116]	; (8002808 <SystemInit+0xf4>)
 8002794:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8002796:	4b1a      	ldr	r3, [pc, #104]	; (8002800 <SystemInit+0xec>)
 8002798:	4a1c      	ldr	r2, [pc, #112]	; (800280c <SystemInit+0xf8>)
 800279a:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 800279c:	4b18      	ldr	r3, [pc, #96]	; (8002800 <SystemInit+0xec>)
 800279e:	4a1c      	ldr	r2, [pc, #112]	; (8002810 <SystemInit+0xfc>)
 80027a0:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80027a2:	4b17      	ldr	r3, [pc, #92]	; (8002800 <SystemInit+0xec>)
 80027a4:	2200      	movs	r2, #0
 80027a6:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80027a8:	4b15      	ldr	r3, [pc, #84]	; (8002800 <SystemInit+0xec>)
 80027aa:	4a19      	ldr	r2, [pc, #100]	; (8002810 <SystemInit+0xfc>)
 80027ac:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80027ae:	4b14      	ldr	r3, [pc, #80]	; (8002800 <SystemInit+0xec>)
 80027b0:	2200      	movs	r2, #0
 80027b2:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80027b4:	4b12      	ldr	r3, [pc, #72]	; (8002800 <SystemInit+0xec>)
 80027b6:	4a16      	ldr	r2, [pc, #88]	; (8002810 <SystemInit+0xfc>)
 80027b8:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80027ba:	4b11      	ldr	r3, [pc, #68]	; (8002800 <SystemInit+0xec>)
 80027bc:	2200      	movs	r2, #0
 80027be:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80027c0:	4b0f      	ldr	r3, [pc, #60]	; (8002800 <SystemInit+0xec>)
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	4a0e      	ldr	r2, [pc, #56]	; (8002800 <SystemInit+0xec>)
 80027c6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80027ca:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80027cc:	4b0c      	ldr	r3, [pc, #48]	; (8002800 <SystemInit+0xec>)
 80027ce:	2200      	movs	r2, #0
 80027d0:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80027d2:	4b10      	ldr	r3, [pc, #64]	; (8002814 <SystemInit+0x100>)
 80027d4:	681a      	ldr	r2, [r3, #0]
 80027d6:	4b10      	ldr	r3, [pc, #64]	; (8002818 <SystemInit+0x104>)
 80027d8:	4013      	ands	r3, r2
 80027da:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80027de:	d202      	bcs.n	80027e6 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80027e0:	4b0e      	ldr	r3, [pc, #56]	; (800281c <SystemInit+0x108>)
 80027e2:	2201      	movs	r2, #1
 80027e4:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80027e6:	4b0e      	ldr	r3, [pc, #56]	; (8002820 <SystemInit+0x10c>)
 80027e8:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80027ec:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 80027ee:	bf00      	nop
 80027f0:	46bd      	mov	sp, r7
 80027f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f6:	4770      	bx	lr
 80027f8:	e000ed00 	.word	0xe000ed00
 80027fc:	52002000 	.word	0x52002000
 8002800:	58024400 	.word	0x58024400
 8002804:	eaf6ed7f 	.word	0xeaf6ed7f
 8002808:	02020200 	.word	0x02020200
 800280c:	01ff0000 	.word	0x01ff0000
 8002810:	01010280 	.word	0x01010280
 8002814:	5c001000 	.word	0x5c001000
 8002818:	ffff0000 	.word	0xffff0000
 800281c:	51008108 	.word	0x51008108
 8002820:	52004000 	.word	0x52004000

08002824 <HAL_LPTIM_AutoReloadMatchCallback>:
//		}
//
//	}
//}

void HAL_LPTIM_AutoReloadMatchCallback(LPTIM_HandleTypeDef *hlptim){
 8002824:	b580      	push	{r7, lr}
 8002826:	b082      	sub	sp, #8
 8002828:	af00      	add	r7, sp, #0
 800282a:	6078      	str	r0, [r7, #4]
	HAL_GPIO_TogglePin(LD1_GPIO_Port, LD1_Pin); //toggle green LED
 800282c:	2101      	movs	r1, #1
 800282e:	4803      	ldr	r0, [pc, #12]	; (800283c <HAL_LPTIM_AutoReloadMatchCallback+0x18>)
 8002830:	f004 f85b 	bl	80068ea <HAL_GPIO_TogglePin>
}
 8002834:	bf00      	nop
 8002836:	3708      	adds	r7, #8
 8002838:	46bd      	mov	sp, r7
 800283a:	bd80      	pop	{r7, pc}
 800283c:	58020400 	.word	0x58020400

08002840 <HAL_HRTIM_Compare2EventCallback>:

void HAL_HRTIM_Compare2EventCallback(HRTIM_HandleTypeDef *hhrtim, uint32_t TimerIdx) {
 8002840:	b580      	push	{r7, lr}
 8002842:	b084      	sub	sp, #16
 8002844:	af00      	add	r7, sp, #0
 8002846:	6078      	str	r0, [r7, #4]
 8002848:	6039      	str	r1, [r7, #0]

	/* Called when the first microwave pulse goes low */
	if (TimerIdx == HRTIM_TIMERINDEX_TIMER_E) {
 800284a:	683b      	ldr	r3, [r7, #0]
 800284c:	2b04      	cmp	r3, #4
 800284e:	d11e      	bne.n	800288e <HAL_HRTIM_Compare2EventCallback+0x4e>
#ifdef ATTENUATOR_CODE
		/* Configure the LASER AOM drive attenuator */
		const struct AttenuatorSettings a = {0,0,0,0,0,1,0}; // 8 dB
 8002850:	7b3b      	ldrb	r3, [r7, #12]
 8002852:	f36f 0300 	bfc	r3, #0, #1
 8002856:	733b      	strb	r3, [r7, #12]
 8002858:	7b3b      	ldrb	r3, [r7, #12]
 800285a:	f36f 0341 	bfc	r3, #1, #1
 800285e:	733b      	strb	r3, [r7, #12]
 8002860:	7b3b      	ldrb	r3, [r7, #12]
 8002862:	f36f 0382 	bfc	r3, #2, #1
 8002866:	733b      	strb	r3, [r7, #12]
 8002868:	7b3b      	ldrb	r3, [r7, #12]
 800286a:	f36f 03c3 	bfc	r3, #3, #1
 800286e:	733b      	strb	r3, [r7, #12]
 8002870:	7b3b      	ldrb	r3, [r7, #12]
 8002872:	f36f 1304 	bfc	r3, #4, #1
 8002876:	733b      	strb	r3, [r7, #12]
 8002878:	7b3b      	ldrb	r3, [r7, #12]
 800287a:	f043 0320 	orr.w	r3, r3, #32
 800287e:	733b      	strb	r3, [r7, #12]
 8002880:	7b3b      	ldrb	r3, [r7, #12]
 8002882:	f36f 1386 	bfc	r3, #6, #1
 8002886:	733b      	strb	r3, [r7, #12]
		set_aom_atten(a);
 8002888:	7b38      	ldrb	r0, [r7, #12]
 800288a:	f018 f86d 	bl	801a968 <__set_aom_atten_veneer>
#endif //ATTENUATOR_CODE
	}

}
 800288e:	bf00      	nop
 8002890:	3710      	adds	r7, #16
 8002892:	46bd      	mov	sp, r7
 8002894:	bd80      	pop	{r7, pc}
	...

08002898 <HAL_HRTIM_Compare3EventCallback>:

void HAL_HRTIM_Compare3EventCallback(HRTIM_HandleTypeDef *hhrtim, uint32_t TimerIdx) {
 8002898:	b580      	push	{r7, lr}
 800289a:	b088      	sub	sp, #32
 800289c:	af00      	add	r7, sp, #0
 800289e:	6078      	str	r0, [r7, #4]
 80028a0:	6039      	str	r1, [r7, #0]

	/* Called at the end of a POP cycle */
	if (TimerIdx == HRTIM_TIMERINDEX_TIMER_A) {
 80028a2:	683b      	ldr	r3, [r7, #0]
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d162      	bne.n	800296e <HAL_HRTIM_Compare3EventCallback+0xd6>
#ifdef ATTENUATOR_CODE
		/* Reset the attenuator to 0 dB */
		const struct AttenuatorSettings a = { 0, 0, 0, 0, 0, 0, 0 }; // 0 dB
 80028a8:	2300      	movs	r3, #0
 80028aa:	723b      	strb	r3, [r7, #8]
		set_aom_atten(a);
 80028ac:	7a38      	ldrb	r0, [r7, #8]
 80028ae:	f018 f85b 	bl	801a968 <__set_aom_atten_veneer>
#endif //ATTENUATOR_CODE

		const double start_freq = ((long)(sweep_settings.req_start_freq/sweep_settings.step_size)) * sweep_settings.step_size;
 80028b2:	4b31      	ldr	r3, [pc, #196]	; (8002978 <HAL_HRTIM_Compare3EventCallback+0xe0>)
 80028b4:	ed93 5b00 	vldr	d5, [r3]
 80028b8:	4b2f      	ldr	r3, [pc, #188]	; (8002978 <HAL_HRTIM_Compare3EventCallback+0xe0>)
 80028ba:	ed93 6b04 	vldr	d6, [r3, #16]
 80028be:	ee85 7b06 	vdiv.f64	d7, d5, d6
 80028c2:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 80028c6:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 80028ca:	4b2b      	ldr	r3, [pc, #172]	; (8002978 <HAL_HRTIM_Compare3EventCallback+0xe0>)
 80028cc:	ed93 7b04 	vldr	d7, [r3, #16]
 80028d0:	ee26 7b07 	vmul.f64	d7, d6, d7
 80028d4:	ed87 7b06 	vstr	d7, [r7, #24]
		const double stop_freq = ((long)((sweep_settings.req_stop_freq/sweep_settings.step_size) + 0.5)) * sweep_settings.step_size;
 80028d8:	4b27      	ldr	r3, [pc, #156]	; (8002978 <HAL_HRTIM_Compare3EventCallback+0xe0>)
 80028da:	ed93 5b02 	vldr	d5, [r3, #8]
 80028de:	4b26      	ldr	r3, [pc, #152]	; (8002978 <HAL_HRTIM_Compare3EventCallback+0xe0>)
 80028e0:	ed93 6b04 	vldr	d6, [r3, #16]
 80028e4:	ee85 7b06 	vdiv.f64	d7, d5, d6
 80028e8:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
 80028ec:	ee37 7b06 	vadd.f64	d7, d7, d6
 80028f0:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 80028f4:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 80028f8:	4b1f      	ldr	r3, [pc, #124]	; (8002978 <HAL_HRTIM_Compare3EventCallback+0xe0>)
 80028fa:	ed93 7b04 	vldr	d7, [r3, #16]
 80028fe:	ee26 7b07 	vmul.f64	d7, d6, d7
 8002902:	ed87 7b04 	vstr	d7, [r7, #16]
		const uint32_t num_points = ((stop_freq - start_freq)/sweep_settings.step_size) + 1;
 8002906:	ed97 6b04 	vldr	d6, [r7, #16]
 800290a:	ed97 7b06 	vldr	d7, [r7, #24]
 800290e:	ee36 5b47 	vsub.f64	d5, d6, d7
 8002912:	4b19      	ldr	r3, [pc, #100]	; (8002978 <HAL_HRTIM_Compare3EventCallback+0xe0>)
 8002914:	ed93 6b04 	vldr	d6, [r3, #16]
 8002918:	ee85 7b06 	vdiv.f64	d7, d5, d6
 800291c:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8002920:	ee37 7b06 	vadd.f64	d7, d7, d6
 8002924:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8002928:	ee17 3a90 	vmov	r3, s15
 800292c:	60fb      	str	r3, [r7, #12]
		static uint32_t i = 0;

		/* Configure the Microwave frequency */
		if (i == num_points) {
 800292e:	4b13      	ldr	r3, [pc, #76]	; (800297c <HAL_HRTIM_Compare3EventCallback+0xe4>)
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	68fa      	ldr	r2, [r7, #12]
 8002934:	429a      	cmp	r2, r3
 8002936:	d106      	bne.n	8002946 <HAL_HRTIM_Compare3EventCallback+0xae>
			stop_pop();
 8002938:	f018 f81a 	bl	801a970 <__stop_pop_veneer>
			i = 0;
 800293c:	4b0f      	ldr	r3, [pc, #60]	; (800297c <HAL_HRTIM_Compare3EventCallback+0xe4>)
 800293e:	2200      	movs	r2, #0
 8002940:	601a      	str	r2, [r3, #0]
			start_pop();
 8002942:	f018 f801 	bl	801a948 <__start_pop_veneer>

#ifdef SYNTH_ENABLE
		set_frequency_hz(start_freq + (i * sweep_settings.step_size));
#endif

		i = i + 1;
 8002946:	4b0d      	ldr	r3, [pc, #52]	; (800297c <HAL_HRTIM_Compare3EventCallback+0xe4>)
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	3301      	adds	r3, #1
 800294c:	4a0b      	ldr	r2, [pc, #44]	; (800297c <HAL_HRTIM_Compare3EventCallback+0xe4>)
 800294e:	6013      	str	r3, [r2, #0]

		pop_cycle_count = pop_cycle_count + 1;
 8002950:	4b0b      	ldr	r3, [pc, #44]	; (8002980 <HAL_HRTIM_Compare3EventCallback+0xe8>)
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	3301      	adds	r3, #1
 8002956:	4a0a      	ldr	r2, [pc, #40]	; (8002980 <HAL_HRTIM_Compare3EventCallback+0xe8>)
 8002958:	6013      	str	r3, [r2, #0]
		HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin); //toggle amber LED
 800295a:	2102      	movs	r1, #2
 800295c:	4809      	ldr	r0, [pc, #36]	; (8002984 <HAL_HRTIM_Compare3EventCallback+0xec>)
 800295e:	f003 ffc4 	bl	80068ea <HAL_GPIO_TogglePin>
		printf("POP Cycle %lu done.\r\n", pop_cycle_count);
 8002962:	4b07      	ldr	r3, [pc, #28]	; (8002980 <HAL_HRTIM_Compare3EventCallback+0xe8>)
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	4619      	mov	r1, r3
 8002968:	4807      	ldr	r0, [pc, #28]	; (8002988 <HAL_HRTIM_Compare3EventCallback+0xf0>)
 800296a:	f016 f85b 	bl	8018a24 <iprintf>

	/* Called when the second microwave pulse goes high */
	if (TimerIdx == HRTIM_TIMERINDEX_TIMER_E) {
	}

}
 800296e:	bf00      	nop
 8002970:	3720      	adds	r7, #32
 8002972:	46bd      	mov	sp, r7
 8002974:	bd80      	pop	{r7, pc}
 8002976:	bf00      	nop
 8002978:	0801d818 	.word	0x0801d818
 800297c:	200005d4 	.word	0x200005d4
 8002980:	200005cc 	.word	0x200005cc
 8002984:	58021000 	.word	0x58021000
 8002988:	0801ae1c 	.word	0x0801ae1c

0800298c <HAL_HRTIM_RepetitionEventCallback>:

void HAL_HRTIM_RepetitionEventCallback(HRTIM_HandleTypeDef *hhrtim,
		uint32_t TimerIdx) {
 800298c:	b480      	push	{r7}
 800298e:	b083      	sub	sp, #12
 8002990:	af00      	add	r7, sp, #0
 8002992:	6078      	str	r0, [r7, #4]
 8002994:	6039      	str	r1, [r7, #0]

	/* Called at the start of the next POP cycle */
	if (TimerIdx == HRTIM_TIMERINDEX_TIMER_A) {
	}
}
 8002996:	bf00      	nop
 8002998:	370c      	adds	r7, #12
 800299a:	46bd      	mov	sp, r7
 800299c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a0:	4770      	bx	lr
	...

080029a4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80029a4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80029dc <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80029a8:	f7ff feb4 	bl	8002714 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80029ac:	480c      	ldr	r0, [pc, #48]	; (80029e0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80029ae:	490d      	ldr	r1, [pc, #52]	; (80029e4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80029b0:	4a0d      	ldr	r2, [pc, #52]	; (80029e8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80029b2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80029b4:	e002      	b.n	80029bc <LoopCopyDataInit>

080029b6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80029b6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80029b8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80029ba:	3304      	adds	r3, #4

080029bc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80029bc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80029be:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80029c0:	d3f9      	bcc.n	80029b6 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80029c2:	4a0a      	ldr	r2, [pc, #40]	; (80029ec <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80029c4:	4c0a      	ldr	r4, [pc, #40]	; (80029f0 <LoopFillZerobss+0x22>)
  movs r3, #0
 80029c6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80029c8:	e001      	b.n	80029ce <LoopFillZerobss>

080029ca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80029ca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80029cc:	3204      	adds	r2, #4

080029ce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80029ce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80029d0:	d3fb      	bcc.n	80029ca <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80029d2:	f016 f9cf 	bl	8018d74 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80029d6:	f7fe fbf3 	bl	80011c0 <main>
  bx  lr
 80029da:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80029dc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80029e0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80029e4:	20000228 	.word	0x20000228
  ldr r2, =_sidata
 80029e8:	0801dd40 	.word	0x0801dd40
  ldr r2, =_sbss
 80029ec:	200002e8 	.word	0x200002e8
  ldr r4, =_ebss
 80029f0:	20008280 	.word	0x20008280

080029f4 <ADC_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80029f4:	e7fe      	b.n	80029f4 <ADC_IRQHandler>

080029f6 <LAN8742_RegisterBusIO>:
  * @param  ioctx: holds device IO functions.  
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ERROR if missing mandatory function
  */
int32_t  LAN8742_RegisterBusIO(lan8742_Object_t *pObj, lan8742_IOCtx_t *ioctx)
{
 80029f6:	b480      	push	{r7}
 80029f8:	b083      	sub	sp, #12
 80029fa:	af00      	add	r7, sp, #0
 80029fc:	6078      	str	r0, [r7, #4]
 80029fe:	6039      	str	r1, [r7, #0]
  if(!pObj || !ioctx->ReadReg || !ioctx->WriteReg || !ioctx->GetTick)
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d00b      	beq.n	8002a1e <LAN8742_RegisterBusIO+0x28>
 8002a06:	683b      	ldr	r3, [r7, #0]
 8002a08:	68db      	ldr	r3, [r3, #12]
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d007      	beq.n	8002a1e <LAN8742_RegisterBusIO+0x28>
 8002a0e:	683b      	ldr	r3, [r7, #0]
 8002a10:	689b      	ldr	r3, [r3, #8]
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d003      	beq.n	8002a1e <LAN8742_RegisterBusIO+0x28>
 8002a16:	683b      	ldr	r3, [r7, #0]
 8002a18:	691b      	ldr	r3, [r3, #16]
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d102      	bne.n	8002a24 <LAN8742_RegisterBusIO+0x2e>
  {
    return LAN8742_STATUS_ERROR;
 8002a1e:	f04f 33ff 	mov.w	r3, #4294967295
 8002a22:	e014      	b.n	8002a4e <LAN8742_RegisterBusIO+0x58>
  }
  
  pObj->IO.Init = ioctx->Init;
 8002a24:	683b      	ldr	r3, [r7, #0]
 8002a26:	681a      	ldr	r2, [r3, #0]
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	609a      	str	r2, [r3, #8]
  pObj->IO.DeInit = ioctx->DeInit;
 8002a2c:	683b      	ldr	r3, [r7, #0]
 8002a2e:	685a      	ldr	r2, [r3, #4]
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	60da      	str	r2, [r3, #12]
  pObj->IO.ReadReg = ioctx->ReadReg;
 8002a34:	683b      	ldr	r3, [r7, #0]
 8002a36:	68da      	ldr	r2, [r3, #12]
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	615a      	str	r2, [r3, #20]
  pObj->IO.WriteReg = ioctx->WriteReg;
 8002a3c:	683b      	ldr	r3, [r7, #0]
 8002a3e:	689a      	ldr	r2, [r3, #8]
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	611a      	str	r2, [r3, #16]
  pObj->IO.GetTick = ioctx->GetTick;
 8002a44:	683b      	ldr	r3, [r7, #0]
 8002a46:	691a      	ldr	r2, [r3, #16]
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	619a      	str	r2, [r3, #24]
  
  return LAN8742_STATUS_OK;
 8002a4c:	2300      	movs	r3, #0
}
 8002a4e:	4618      	mov	r0, r3
 8002a50:	370c      	adds	r7, #12
 8002a52:	46bd      	mov	sp, r7
 8002a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a58:	4770      	bx	lr

08002a5a <LAN8742_Init>:
  *         LAN8742_STATUS_READ_ERROR if connot read register
  *         LAN8742_STATUS_WRITE_ERROR if connot write to register
  *         LAN8742_STATUS_RESET_TIMEOUT if cannot perform a software reset
  */
 int32_t LAN8742_Init(lan8742_Object_t *pObj)
 {
 8002a5a:	b580      	push	{r7, lr}
 8002a5c:	b086      	sub	sp, #24
 8002a5e:	af00      	add	r7, sp, #0
 8002a60:	6078      	str	r0, [r7, #4]
   uint32_t tickstart = 0, regvalue = 0, addr = 0;
 8002a62:	2300      	movs	r3, #0
 8002a64:	60fb      	str	r3, [r7, #12]
 8002a66:	2300      	movs	r3, #0
 8002a68:	60bb      	str	r3, [r7, #8]
 8002a6a:	2300      	movs	r3, #0
 8002a6c:	617b      	str	r3, [r7, #20]
   int32_t status = LAN8742_STATUS_OK;
 8002a6e:	2300      	movs	r3, #0
 8002a70:	613b      	str	r3, [r7, #16]
   
   if(pObj->Is_Initialized == 0)
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	685b      	ldr	r3, [r3, #4]
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d17c      	bne.n	8002b74 <LAN8742_Init+0x11a>
   {
     if(pObj->IO.Init != 0)
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	689b      	ldr	r3, [r3, #8]
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d002      	beq.n	8002a88 <LAN8742_Init+0x2e>
     {
       /* GPIO and Clocks initialization */
       pObj->IO.Init();
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	689b      	ldr	r3, [r3, #8]
 8002a86:	4798      	blx	r3
     }
   
     /* for later check */
     pObj->DevAddr = LAN8742_MAX_DEV_ADDR + 1;
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	2220      	movs	r2, #32
 8002a8c:	601a      	str	r2, [r3, #0]
   
     /* Get the device address from special mode register */  
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8002a8e:	2300      	movs	r3, #0
 8002a90:	617b      	str	r3, [r7, #20]
 8002a92:	e01c      	b.n	8002ace <LAN8742_Init+0x74>
     {
       if(pObj->IO.ReadReg(addr, LAN8742_SMR, &regvalue) < 0)
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	695b      	ldr	r3, [r3, #20]
 8002a98:	f107 0208 	add.w	r2, r7, #8
 8002a9c:	2112      	movs	r1, #18
 8002a9e:	6978      	ldr	r0, [r7, #20]
 8002aa0:	4798      	blx	r3
 8002aa2:	4603      	mov	r3, r0
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	da03      	bge.n	8002ab0 <LAN8742_Init+0x56>
       { 
         status = LAN8742_STATUS_READ_ERROR;
 8002aa8:	f06f 0304 	mvn.w	r3, #4
 8002aac:	613b      	str	r3, [r7, #16]
         /* Can't read from this device address 
            continue with next address */
         continue;
 8002aae:	e00b      	b.n	8002ac8 <LAN8742_Init+0x6e>
       }
     
       if((regvalue & LAN8742_SMR_PHY_ADDR) == addr)
 8002ab0:	68bb      	ldr	r3, [r7, #8]
 8002ab2:	f003 031f 	and.w	r3, r3, #31
 8002ab6:	697a      	ldr	r2, [r7, #20]
 8002ab8:	429a      	cmp	r2, r3
 8002aba:	d105      	bne.n	8002ac8 <LAN8742_Init+0x6e>
       {
         pObj->DevAddr = addr;
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	697a      	ldr	r2, [r7, #20]
 8002ac0:	601a      	str	r2, [r3, #0]
         status = LAN8742_STATUS_OK;
 8002ac2:	2300      	movs	r3, #0
 8002ac4:	613b      	str	r3, [r7, #16]
         break;
 8002ac6:	e005      	b.n	8002ad4 <LAN8742_Init+0x7a>
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8002ac8:	697b      	ldr	r3, [r7, #20]
 8002aca:	3301      	adds	r3, #1
 8002acc:	617b      	str	r3, [r7, #20]
 8002ace:	697b      	ldr	r3, [r7, #20]
 8002ad0:	2b1f      	cmp	r3, #31
 8002ad2:	d9df      	bls.n	8002a94 <LAN8742_Init+0x3a>
       }
     }
   
     if(pObj->DevAddr > LAN8742_MAX_DEV_ADDR)
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	2b1f      	cmp	r3, #31
 8002ada:	d902      	bls.n	8002ae2 <LAN8742_Init+0x88>
     {
       status = LAN8742_STATUS_ADDRESS_ERROR;
 8002adc:	f06f 0302 	mvn.w	r3, #2
 8002ae0:	613b      	str	r3, [r7, #16]
     }
     
     /* if device address is matched */
     if(status == LAN8742_STATUS_OK)
 8002ae2:	693b      	ldr	r3, [r7, #16]
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d145      	bne.n	8002b74 <LAN8742_Init+0x11a>
     {
       /* set a software reset  */
       if(pObj->IO.WriteReg(pObj->DevAddr, LAN8742_BCR, LAN8742_BCR_SOFT_RESET) >= 0)
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	691b      	ldr	r3, [r3, #16]
 8002aec:	687a      	ldr	r2, [r7, #4]
 8002aee:	6810      	ldr	r0, [r2, #0]
 8002af0:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8002af4:	2100      	movs	r1, #0
 8002af6:	4798      	blx	r3
 8002af8:	4603      	mov	r3, r0
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	db37      	blt.n	8002b6e <LAN8742_Init+0x114>
       { 
         /* get software reset status */
         if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) >= 0)
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	695b      	ldr	r3, [r3, #20]
 8002b02:	687a      	ldr	r2, [r7, #4]
 8002b04:	6810      	ldr	r0, [r2, #0]
 8002b06:	f107 0208 	add.w	r2, r7, #8
 8002b0a:	2100      	movs	r1, #0
 8002b0c:	4798      	blx	r3
 8002b0e:	4603      	mov	r3, r0
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	db28      	blt.n	8002b66 <LAN8742_Init+0x10c>
         { 
           tickstart = pObj->IO.GetTick();
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	699b      	ldr	r3, [r3, #24]
 8002b18:	4798      	blx	r3
 8002b1a:	4603      	mov	r3, r0
 8002b1c:	60fb      	str	r3, [r7, #12]
           
           /* wait until software reset is done or timeout occured  */
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 8002b1e:	e01c      	b.n	8002b5a <LAN8742_Init+0x100>
           {
             if((pObj->IO.GetTick() - tickstart) <= LAN8742_SW_RESET_TO)
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	699b      	ldr	r3, [r3, #24]
 8002b24:	4798      	blx	r3
 8002b26:	4603      	mov	r3, r0
 8002b28:	461a      	mov	r2, r3
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	1ad3      	subs	r3, r2, r3
 8002b2e:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002b32:	d80e      	bhi.n	8002b52 <LAN8742_Init+0xf8>
             {
               if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) < 0)
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	695b      	ldr	r3, [r3, #20]
 8002b38:	687a      	ldr	r2, [r7, #4]
 8002b3a:	6810      	ldr	r0, [r2, #0]
 8002b3c:	f107 0208 	add.w	r2, r7, #8
 8002b40:	2100      	movs	r1, #0
 8002b42:	4798      	blx	r3
 8002b44:	4603      	mov	r3, r0
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	da07      	bge.n	8002b5a <LAN8742_Init+0x100>
               { 
                 status = LAN8742_STATUS_READ_ERROR;
 8002b4a:	f06f 0304 	mvn.w	r3, #4
 8002b4e:	613b      	str	r3, [r7, #16]
                 break;
 8002b50:	e010      	b.n	8002b74 <LAN8742_Init+0x11a>
               }
             }
             else
             {
               status = LAN8742_STATUS_RESET_TIMEOUT;
 8002b52:	f06f 0301 	mvn.w	r3, #1
 8002b56:	613b      	str	r3, [r7, #16]
               break;
 8002b58:	e00c      	b.n	8002b74 <LAN8742_Init+0x11a>
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 8002b5a:	68bb      	ldr	r3, [r7, #8]
 8002b5c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d1dd      	bne.n	8002b20 <LAN8742_Init+0xc6>
 8002b64:	e006      	b.n	8002b74 <LAN8742_Init+0x11a>
             }
           } 
         }
         else
         {
           status = LAN8742_STATUS_READ_ERROR;
 8002b66:	f06f 0304 	mvn.w	r3, #4
 8002b6a:	613b      	str	r3, [r7, #16]
 8002b6c:	e002      	b.n	8002b74 <LAN8742_Init+0x11a>
         }
       }
       else
       {
         status = LAN8742_STATUS_WRITE_ERROR;
 8002b6e:	f06f 0303 	mvn.w	r3, #3
 8002b72:	613b      	str	r3, [r7, #16]
       }
     }
   }
      
   if(status == LAN8742_STATUS_OK)
 8002b74:	693b      	ldr	r3, [r7, #16]
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d112      	bne.n	8002ba0 <LAN8742_Init+0x146>
   {
     tickstart =  pObj->IO.GetTick();
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	699b      	ldr	r3, [r3, #24]
 8002b7e:	4798      	blx	r3
 8002b80:	4603      	mov	r3, r0
 8002b82:	60fb      	str	r3, [r7, #12]
     
     /* Wait for 2s to perform initialization */
     while((pObj->IO.GetTick() - tickstart) <= LAN8742_INIT_TO)
 8002b84:	bf00      	nop
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	699b      	ldr	r3, [r3, #24]
 8002b8a:	4798      	blx	r3
 8002b8c:	4603      	mov	r3, r0
 8002b8e:	461a      	mov	r2, r3
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	1ad3      	subs	r3, r2, r3
 8002b94:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8002b98:	d9f5      	bls.n	8002b86 <LAN8742_Init+0x12c>
     {
     }
     pObj->Is_Initialized = 1;
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	2201      	movs	r2, #1
 8002b9e:	605a      	str	r2, [r3, #4]
   }
   
   return status;
 8002ba0:	693b      	ldr	r3, [r7, #16]
 }
 8002ba2:	4618      	mov	r0, r3
 8002ba4:	3718      	adds	r7, #24
 8002ba6:	46bd      	mov	sp, r7
 8002ba8:	bd80      	pop	{r7, pc}

08002baa <LAN8742_GetLinkState>:
  *         LAN8742_STATUS_10MBITS_HALFDUPLEX  if 10Mb/s HD       
  *         LAN8742_STATUS_READ_ERROR if connot read register
  *         LAN8742_STATUS_WRITE_ERROR if connot write to register
  */
int32_t LAN8742_GetLinkState(lan8742_Object_t *pObj)
{
 8002baa:	b580      	push	{r7, lr}
 8002bac:	b084      	sub	sp, #16
 8002bae:	af00      	add	r7, sp, #0
 8002bb0:	6078      	str	r0, [r7, #4]
  uint32_t readval = 0;
 8002bb2:	2300      	movs	r3, #0
 8002bb4:	60fb      	str	r3, [r7, #12]
  
  /* Read Status register  */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	695b      	ldr	r3, [r3, #20]
 8002bba:	687a      	ldr	r2, [r7, #4]
 8002bbc:	6810      	ldr	r0, [r2, #0]
 8002bbe:	f107 020c 	add.w	r2, r7, #12
 8002bc2:	2101      	movs	r1, #1
 8002bc4:	4798      	blx	r3
 8002bc6:	4603      	mov	r3, r0
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	da02      	bge.n	8002bd2 <LAN8742_GetLinkState+0x28>
  {
    return LAN8742_STATUS_READ_ERROR;
 8002bcc:	f06f 0304 	mvn.w	r3, #4
 8002bd0:	e06e      	b.n	8002cb0 <LAN8742_GetLinkState+0x106>
  }
  
  /* Read Status register again */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	695b      	ldr	r3, [r3, #20]
 8002bd6:	687a      	ldr	r2, [r7, #4]
 8002bd8:	6810      	ldr	r0, [r2, #0]
 8002bda:	f107 020c 	add.w	r2, r7, #12
 8002bde:	2101      	movs	r1, #1
 8002be0:	4798      	blx	r3
 8002be2:	4603      	mov	r3, r0
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	da02      	bge.n	8002bee <LAN8742_GetLinkState+0x44>
  {
    return LAN8742_STATUS_READ_ERROR;
 8002be8:	f06f 0304 	mvn.w	r3, #4
 8002bec:	e060      	b.n	8002cb0 <LAN8742_GetLinkState+0x106>
  }
  
  if((readval & LAN8742_BSR_LINK_STATUS) == 0)
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	f003 0304 	and.w	r3, r3, #4
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d101      	bne.n	8002bfc <LAN8742_GetLinkState+0x52>
  {
    /* Return Link Down status */
    return LAN8742_STATUS_LINK_DOWN;    
 8002bf8:	2301      	movs	r3, #1
 8002bfa:	e059      	b.n	8002cb0 <LAN8742_GetLinkState+0x106>
  }
  
  /* Check Auto negotiaition */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &readval) < 0)
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	695b      	ldr	r3, [r3, #20]
 8002c00:	687a      	ldr	r2, [r7, #4]
 8002c02:	6810      	ldr	r0, [r2, #0]
 8002c04:	f107 020c 	add.w	r2, r7, #12
 8002c08:	2100      	movs	r1, #0
 8002c0a:	4798      	blx	r3
 8002c0c:	4603      	mov	r3, r0
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	da02      	bge.n	8002c18 <LAN8742_GetLinkState+0x6e>
  {
    return LAN8742_STATUS_READ_ERROR;
 8002c12:	f06f 0304 	mvn.w	r3, #4
 8002c16:	e04b      	b.n	8002cb0 <LAN8742_GetLinkState+0x106>
  }
  
  if((readval & LAN8742_BCR_AUTONEGO_EN) != LAN8742_BCR_AUTONEGO_EN)
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d11b      	bne.n	8002c5a <LAN8742_GetLinkState+0xb0>
  {
    if(((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT) && ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)) 
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d006      	beq.n	8002c3a <LAN8742_GetLinkState+0x90>
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d001      	beq.n	8002c3a <LAN8742_GetLinkState+0x90>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 8002c36:	2302      	movs	r3, #2
 8002c38:	e03a      	b.n	8002cb0 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT)
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d001      	beq.n	8002c48 <LAN8742_GetLinkState+0x9e>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 8002c44:	2303      	movs	r3, #3
 8002c46:	e033      	b.n	8002cb0 <LAN8742_GetLinkState+0x106>
    }        
    else if ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d001      	beq.n	8002c56 <LAN8742_GetLinkState+0xac>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 8002c52:	2304      	movs	r3, #4
 8002c54:	e02c      	b.n	8002cb0 <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 8002c56:	2305      	movs	r3, #5
 8002c58:	e02a      	b.n	8002cb0 <LAN8742_GetLinkState+0x106>
    }  		
  }
  else /* Auto Nego enabled */
  {
    if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_PHYSCSR, &readval) < 0)
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	695b      	ldr	r3, [r3, #20]
 8002c5e:	687a      	ldr	r2, [r7, #4]
 8002c60:	6810      	ldr	r0, [r2, #0]
 8002c62:	f107 020c 	add.w	r2, r7, #12
 8002c66:	211f      	movs	r1, #31
 8002c68:	4798      	blx	r3
 8002c6a:	4603      	mov	r3, r0
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	da02      	bge.n	8002c76 <LAN8742_GetLinkState+0xcc>
    {
      return LAN8742_STATUS_READ_ERROR;
 8002c70:	f06f 0304 	mvn.w	r3, #4
 8002c74:	e01c      	b.n	8002cb0 <LAN8742_GetLinkState+0x106>
    }
    
    /* Check if auto nego not done */
    if((readval & LAN8742_PHYSCSR_AUTONEGO_DONE) == 0)
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d101      	bne.n	8002c84 <LAN8742_GetLinkState+0xda>
    {
      return LAN8742_STATUS_AUTONEGO_NOTDONE;
 8002c80:	2306      	movs	r3, #6
 8002c82:	e015      	b.n	8002cb0 <LAN8742_GetLinkState+0x106>
    }
    
    if((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_FD)
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	f003 031c 	and.w	r3, r3, #28
 8002c8a:	2b18      	cmp	r3, #24
 8002c8c:	d101      	bne.n	8002c92 <LAN8742_GetLinkState+0xe8>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 8002c8e:	2302      	movs	r3, #2
 8002c90:	e00e      	b.n	8002cb0 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_HD)
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	f003 031c 	and.w	r3, r3, #28
 8002c98:	2b08      	cmp	r3, #8
 8002c9a:	d101      	bne.n	8002ca0 <LAN8742_GetLinkState+0xf6>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 8002c9c:	2303      	movs	r3, #3
 8002c9e:	e007      	b.n	8002cb0 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_10BT_FD)
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	f003 031c 	and.w	r3, r3, #28
 8002ca6:	2b14      	cmp	r3, #20
 8002ca8:	d101      	bne.n	8002cae <LAN8742_GetLinkState+0x104>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 8002caa:	2304      	movs	r3, #4
 8002cac:	e000      	b.n	8002cb0 <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 8002cae:	2305      	movs	r3, #5
    }				
  }
}
 8002cb0:	4618      	mov	r0, r3
 8002cb2:	3710      	adds	r7, #16
 8002cb4:	46bd      	mov	sp, r7
 8002cb6:	bd80      	pop	{r7, pc}

08002cb8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002cb8:	b580      	push	{r7, lr}
 8002cba:	b082      	sub	sp, #8
 8002cbc:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002cbe:	2003      	movs	r0, #3
 8002cc0:	f001 ff1c 	bl	8004afc <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002cc4:	f006 fbbc 	bl	8009440 <HAL_RCC_GetSysClockFreq>
 8002cc8:	4602      	mov	r2, r0
 8002cca:	4b15      	ldr	r3, [pc, #84]	; (8002d20 <HAL_Init+0x68>)
 8002ccc:	699b      	ldr	r3, [r3, #24]
 8002cce:	0a1b      	lsrs	r3, r3, #8
 8002cd0:	f003 030f 	and.w	r3, r3, #15
 8002cd4:	4913      	ldr	r1, [pc, #76]	; (8002d24 <HAL_Init+0x6c>)
 8002cd6:	5ccb      	ldrb	r3, [r1, r3]
 8002cd8:	f003 031f 	and.w	r3, r3, #31
 8002cdc:	fa22 f303 	lsr.w	r3, r2, r3
 8002ce0:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002ce2:	4b0f      	ldr	r3, [pc, #60]	; (8002d20 <HAL_Init+0x68>)
 8002ce4:	699b      	ldr	r3, [r3, #24]
 8002ce6:	f003 030f 	and.w	r3, r3, #15
 8002cea:	4a0e      	ldr	r2, [pc, #56]	; (8002d24 <HAL_Init+0x6c>)
 8002cec:	5cd3      	ldrb	r3, [r2, r3]
 8002cee:	f003 031f 	and.w	r3, r3, #31
 8002cf2:	687a      	ldr	r2, [r7, #4]
 8002cf4:	fa22 f303 	lsr.w	r3, r2, r3
 8002cf8:	4a0b      	ldr	r2, [pc, #44]	; (8002d28 <HAL_Init+0x70>)
 8002cfa:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002cfc:	4a0b      	ldr	r2, [pc, #44]	; (8002d2c <HAL_Init+0x74>)
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002d02:	2000      	movs	r0, #0
 8002d04:	f000 f814 	bl	8002d30 <HAL_InitTick>
 8002d08:	4603      	mov	r3, r0
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d001      	beq.n	8002d12 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8002d0e:	2301      	movs	r3, #1
 8002d10:	e002      	b.n	8002d18 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8002d12:	f7ff f975 	bl	8002000 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002d16:	2300      	movs	r3, #0
}
 8002d18:	4618      	mov	r0, r3
 8002d1a:	3708      	adds	r7, #8
 8002d1c:	46bd      	mov	sp, r7
 8002d1e:	bd80      	pop	{r7, pc}
 8002d20:	58024400 	.word	0x58024400
 8002d24:	0801d83c 	.word	0x0801d83c
 8002d28:	20000014 	.word	0x20000014
 8002d2c:	20000010 	.word	0x20000010

08002d30 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002d30:	b580      	push	{r7, lr}
 8002d32:	b082      	sub	sp, #8
 8002d34:	af00      	add	r7, sp, #0
 8002d36:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8002d38:	4b15      	ldr	r3, [pc, #84]	; (8002d90 <HAL_InitTick+0x60>)
 8002d3a:	781b      	ldrb	r3, [r3, #0]
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d101      	bne.n	8002d44 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8002d40:	2301      	movs	r3, #1
 8002d42:	e021      	b.n	8002d88 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8002d44:	4b13      	ldr	r3, [pc, #76]	; (8002d94 <HAL_InitTick+0x64>)
 8002d46:	681a      	ldr	r2, [r3, #0]
 8002d48:	4b11      	ldr	r3, [pc, #68]	; (8002d90 <HAL_InitTick+0x60>)
 8002d4a:	781b      	ldrb	r3, [r3, #0]
 8002d4c:	4619      	mov	r1, r3
 8002d4e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002d52:	fbb3 f3f1 	udiv	r3, r3, r1
 8002d56:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d5a:	4618      	mov	r0, r3
 8002d5c:	f001 ff01 	bl	8004b62 <HAL_SYSTICK_Config>
 8002d60:	4603      	mov	r3, r0
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d001      	beq.n	8002d6a <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8002d66:	2301      	movs	r3, #1
 8002d68:	e00e      	b.n	8002d88 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	2b0f      	cmp	r3, #15
 8002d6e:	d80a      	bhi.n	8002d86 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002d70:	2200      	movs	r2, #0
 8002d72:	6879      	ldr	r1, [r7, #4]
 8002d74:	f04f 30ff 	mov.w	r0, #4294967295
 8002d78:	f001 fecb 	bl	8004b12 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002d7c:	4a06      	ldr	r2, [pc, #24]	; (8002d98 <HAL_InitTick+0x68>)
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002d82:	2300      	movs	r3, #0
 8002d84:	e000      	b.n	8002d88 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8002d86:	2301      	movs	r3, #1
}
 8002d88:	4618      	mov	r0, r3
 8002d8a:	3708      	adds	r7, #8
 8002d8c:	46bd      	mov	sp, r7
 8002d8e:	bd80      	pop	{r7, pc}
 8002d90:	20000024 	.word	0x20000024
 8002d94:	20000010 	.word	0x20000010
 8002d98:	20000020 	.word	0x20000020

08002d9c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002d9c:	b480      	push	{r7}
 8002d9e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8002da0:	4b06      	ldr	r3, [pc, #24]	; (8002dbc <HAL_IncTick+0x20>)
 8002da2:	781b      	ldrb	r3, [r3, #0]
 8002da4:	461a      	mov	r2, r3
 8002da6:	4b06      	ldr	r3, [pc, #24]	; (8002dc0 <HAL_IncTick+0x24>)
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	4413      	add	r3, r2
 8002dac:	4a04      	ldr	r2, [pc, #16]	; (8002dc0 <HAL_IncTick+0x24>)
 8002dae:	6013      	str	r3, [r2, #0]
}
 8002db0:	bf00      	nop
 8002db2:	46bd      	mov	sp, r7
 8002db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db8:	4770      	bx	lr
 8002dba:	bf00      	nop
 8002dbc:	20000024 	.word	0x20000024
 8002dc0:	200005d8 	.word	0x200005d8

08002dc4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002dc4:	b480      	push	{r7}
 8002dc6:	af00      	add	r7, sp, #0
  return uwTick;
 8002dc8:	4b03      	ldr	r3, [pc, #12]	; (8002dd8 <HAL_GetTick+0x14>)
 8002dca:	681b      	ldr	r3, [r3, #0]
}
 8002dcc:	4618      	mov	r0, r3
 8002dce:	46bd      	mov	sp, r7
 8002dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd4:	4770      	bx	lr
 8002dd6:	bf00      	nop
 8002dd8:	200005d8 	.word	0x200005d8

08002ddc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002ddc:	b580      	push	{r7, lr}
 8002dde:	b084      	sub	sp, #16
 8002de0:	af00      	add	r7, sp, #0
 8002de2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002de4:	f7ff ffee 	bl	8002dc4 <HAL_GetTick>
 8002de8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002df4:	d005      	beq.n	8002e02 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002df6:	4b0a      	ldr	r3, [pc, #40]	; (8002e20 <HAL_Delay+0x44>)
 8002df8:	781b      	ldrb	r3, [r3, #0]
 8002dfa:	461a      	mov	r2, r3
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	4413      	add	r3, r2
 8002e00:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002e02:	bf00      	nop
 8002e04:	f7ff ffde 	bl	8002dc4 <HAL_GetTick>
 8002e08:	4602      	mov	r2, r0
 8002e0a:	68bb      	ldr	r3, [r7, #8]
 8002e0c:	1ad3      	subs	r3, r2, r3
 8002e0e:	68fa      	ldr	r2, [r7, #12]
 8002e10:	429a      	cmp	r2, r3
 8002e12:	d8f7      	bhi.n	8002e04 <HAL_Delay+0x28>
  {
  }
}
 8002e14:	bf00      	nop
 8002e16:	bf00      	nop
 8002e18:	3710      	adds	r7, #16
 8002e1a:	46bd      	mov	sp, r7
 8002e1c:	bd80      	pop	{r7, pc}
 8002e1e:	bf00      	nop
 8002e20:	20000024 	.word	0x20000024

08002e24 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8002e24:	b480      	push	{r7}
 8002e26:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8002e28:	4b03      	ldr	r3, [pc, #12]	; (8002e38 <HAL_GetREVID+0x14>)
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	0c1b      	lsrs	r3, r3, #16
}
 8002e2e:	4618      	mov	r0, r3
 8002e30:	46bd      	mov	sp, r7
 8002e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e36:	4770      	bx	lr
 8002e38:	5c001000 	.word	0x5c001000

08002e3c <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 8002e3c:	b480      	push	{r7}
 8002e3e:	b083      	sub	sp, #12
 8002e40:	af00      	add	r7, sp, #0
 8002e42:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 8002e44:	4b06      	ldr	r3, [pc, #24]	; (8002e60 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8002e46:	685b      	ldr	r3, [r3, #4]
 8002e48:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8002e4c:	4904      	ldr	r1, [pc, #16]	; (8002e60 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	4313      	orrs	r3, r2
 8002e52:	604b      	str	r3, [r1, #4]
}
 8002e54:	bf00      	nop
 8002e56:	370c      	adds	r7, #12
 8002e58:	46bd      	mov	sp, r7
 8002e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e5e:	4770      	bx	lr
 8002e60:	58000400 	.word	0x58000400

08002e64 <HAL_SYSCFG_AnalogSwitchConfig>:
  *   @arg SYSCFG_SWITCH_PC3_CLOSE
  * @retval None
  */

void HAL_SYSCFG_AnalogSwitchConfig(uint32_t SYSCFG_AnalogSwitch , uint32_t SYSCFG_SwitchState )
{
 8002e64:	b480      	push	{r7}
 8002e66:	b083      	sub	sp, #12
 8002e68:	af00      	add	r7, sp, #0
 8002e6a:	6078      	str	r0, [r7, #4]
 8002e6c:	6039      	str	r1, [r7, #0]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ANALOG_SWITCH(SYSCFG_AnalogSwitch));
  assert_param(IS_SYSCFG_SWITCH_STATE(SYSCFG_SwitchState));

  MODIFY_REG(SYSCFG->PMCR, (uint32_t) SYSCFG_AnalogSwitch, (uint32_t)(SYSCFG_SwitchState));
 8002e6e:	4b07      	ldr	r3, [pc, #28]	; (8002e8c <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 8002e70:	685a      	ldr	r2, [r3, #4]
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	43db      	mvns	r3, r3
 8002e76:	401a      	ands	r2, r3
 8002e78:	4904      	ldr	r1, [pc, #16]	; (8002e8c <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 8002e7a:	683b      	ldr	r3, [r7, #0]
 8002e7c:	4313      	orrs	r3, r2
 8002e7e:	604b      	str	r3, [r1, #4]
}
 8002e80:	bf00      	nop
 8002e82:	370c      	adds	r7, #12
 8002e84:	46bd      	mov	sp, r7
 8002e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e8a:	4770      	bx	lr
 8002e8c:	58000400 	.word	0x58000400

08002e90 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002e90:	b480      	push	{r7}
 8002e92:	b083      	sub	sp, #12
 8002e94:	af00      	add	r7, sp, #0
 8002e96:	6078      	str	r0, [r7, #4]
 8002e98:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	689b      	ldr	r3, [r3, #8]
 8002e9e:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8002ea2:	683b      	ldr	r3, [r7, #0]
 8002ea4:	431a      	orrs	r2, r3
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	609a      	str	r2, [r3, #8]
}
 8002eaa:	bf00      	nop
 8002eac:	370c      	adds	r7, #12
 8002eae:	46bd      	mov	sp, r7
 8002eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb4:	4770      	bx	lr

08002eb6 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8002eb6:	b480      	push	{r7}
 8002eb8:	b083      	sub	sp, #12
 8002eba:	af00      	add	r7, sp, #0
 8002ebc:	6078      	str	r0, [r7, #4]
 8002ebe:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	689b      	ldr	r3, [r3, #8]
 8002ec4:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8002ec8:	683b      	ldr	r3, [r7, #0]
 8002eca:	431a      	orrs	r2, r3
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	609a      	str	r2, [r3, #8]
}
 8002ed0:	bf00      	nop
 8002ed2:	370c      	adds	r7, #12
 8002ed4:	46bd      	mov	sp, r7
 8002ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eda:	4770      	bx	lr

08002edc <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002edc:	b480      	push	{r7}
 8002ede:	b083      	sub	sp, #12
 8002ee0:	af00      	add	r7, sp, #0
 8002ee2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	689b      	ldr	r3, [r3, #8]
 8002ee8:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8002eec:	4618      	mov	r0, r3
 8002eee:	370c      	adds	r7, #12
 8002ef0:	46bd      	mov	sp, r7
 8002ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef6:	4770      	bx	lr

08002ef8 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002ef8:	b480      	push	{r7}
 8002efa:	b087      	sub	sp, #28
 8002efc:	af00      	add	r7, sp, #0
 8002efe:	60f8      	str	r0, [r7, #12]
 8002f00:	60b9      	str	r1, [r7, #8]
 8002f02:	607a      	str	r2, [r7, #4]
 8002f04:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	3360      	adds	r3, #96	; 0x60
 8002f0a:	461a      	mov	r2, r3
 8002f0c:	68bb      	ldr	r3, [r7, #8]
 8002f0e:	009b      	lsls	r3, r3, #2
 8002f10:	4413      	add	r3, r2
 8002f12:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 8002f14:	697b      	ldr	r3, [r7, #20]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 8002f22:	683b      	ldr	r3, [r7, #0]
 8002f24:	430b      	orrs	r3, r1
 8002f26:	431a      	orrs	r2, r3
 8002f28:	697b      	ldr	r3, [r7, #20]
 8002f2a:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8002f2c:	bf00      	nop
 8002f2e:	371c      	adds	r7, #28
 8002f30:	46bd      	mov	sp, r7
 8002f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f36:	4770      	bx	lr

08002f38 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8002f38:	b480      	push	{r7}
 8002f3a:	b085      	sub	sp, #20
 8002f3c:	af00      	add	r7, sp, #0
 8002f3e:	60f8      	str	r0, [r7, #12]
 8002f40:	60b9      	str	r1, [r7, #8]
 8002f42:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	691b      	ldr	r3, [r3, #16]
 8002f48:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 8002f4c:	68bb      	ldr	r3, [r7, #8]
 8002f4e:	f003 031f 	and.w	r3, r3, #31
 8002f52:	6879      	ldr	r1, [r7, #4]
 8002f54:	fa01 f303 	lsl.w	r3, r1, r3
 8002f58:	431a      	orrs	r2, r3
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	611a      	str	r2, [r3, #16]
}
 8002f5e:	bf00      	nop
 8002f60:	3714      	adds	r7, #20
 8002f62:	46bd      	mov	sp, r7
 8002f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f68:	4770      	bx	lr

08002f6a <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8002f6a:	b480      	push	{r7}
 8002f6c:	b087      	sub	sp, #28
 8002f6e:	af00      	add	r7, sp, #0
 8002f70:	60f8      	str	r0, [r7, #12]
 8002f72:	60b9      	str	r1, [r7, #8]
 8002f74:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	3360      	adds	r3, #96	; 0x60
 8002f7a:	461a      	mov	r2, r3
 8002f7c:	68bb      	ldr	r3, [r7, #8]
 8002f7e:	009b      	lsls	r3, r3, #2
 8002f80:	4413      	add	r3, r2
 8002f82:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 8002f84:	697b      	ldr	r3, [r7, #20]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	431a      	orrs	r2, r3
 8002f90:	697b      	ldr	r3, [r7, #20]
 8002f92:	601a      	str	r2, [r3, #0]
  }
}
 8002f94:	bf00      	nop
 8002f96:	371c      	adds	r7, #28
 8002f98:	46bd      	mov	sp, r7
 8002f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f9e:	4770      	bx	lr

08002fa0 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8002fa0:	b480      	push	{r7}
 8002fa2:	b083      	sub	sp, #12
 8002fa4:	af00      	add	r7, sp, #0
 8002fa6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	68db      	ldr	r3, [r3, #12]
 8002fac:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d101      	bne.n	8002fb8 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8002fb4:	2301      	movs	r3, #1
 8002fb6:	e000      	b.n	8002fba <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8002fb8:	2300      	movs	r3, #0
}
 8002fba:	4618      	mov	r0, r3
 8002fbc:	370c      	adds	r7, #12
 8002fbe:	46bd      	mov	sp, r7
 8002fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc4:	4770      	bx	lr

08002fc6 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002fc6:	b480      	push	{r7}
 8002fc8:	b087      	sub	sp, #28
 8002fca:	af00      	add	r7, sp, #0
 8002fcc:	60f8      	str	r0, [r7, #12]
 8002fce:	60b9      	str	r1, [r7, #8]
 8002fd0:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	3330      	adds	r3, #48	; 0x30
 8002fd6:	461a      	mov	r2, r3
 8002fd8:	68bb      	ldr	r3, [r7, #8]
 8002fda:	0a1b      	lsrs	r3, r3, #8
 8002fdc:	009b      	lsls	r3, r3, #2
 8002fde:	f003 030c 	and.w	r3, r3, #12
 8002fe2:	4413      	add	r3, r2
 8002fe4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002fe6:	697b      	ldr	r3, [r7, #20]
 8002fe8:	681a      	ldr	r2, [r3, #0]
 8002fea:	68bb      	ldr	r3, [r7, #8]
 8002fec:	f003 031f 	and.w	r3, r3, #31
 8002ff0:	211f      	movs	r1, #31
 8002ff2:	fa01 f303 	lsl.w	r3, r1, r3
 8002ff6:	43db      	mvns	r3, r3
 8002ff8:	401a      	ands	r2, r3
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	0e9b      	lsrs	r3, r3, #26
 8002ffe:	f003 011f 	and.w	r1, r3, #31
 8003002:	68bb      	ldr	r3, [r7, #8]
 8003004:	f003 031f 	and.w	r3, r3, #31
 8003008:	fa01 f303 	lsl.w	r3, r1, r3
 800300c:	431a      	orrs	r2, r3
 800300e:	697b      	ldr	r3, [r7, #20]
 8003010:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8003012:	bf00      	nop
 8003014:	371c      	adds	r7, #28
 8003016:	46bd      	mov	sp, r7
 8003018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800301c:	4770      	bx	lr

0800301e <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 800301e:	b480      	push	{r7}
 8003020:	b083      	sub	sp, #12
 8003022:	af00      	add	r7, sp, #0
 8003024:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800302a:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 800302e:	2b00      	cmp	r3, #0
 8003030:	d101      	bne.n	8003036 <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8003032:	2301      	movs	r3, #1
 8003034:	e000      	b.n	8003038 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8003036:	2300      	movs	r3, #0
}
 8003038:	4618      	mov	r0, r3
 800303a:	370c      	adds	r7, #12
 800303c:	46bd      	mov	sp, r7
 800303e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003042:	4770      	bx	lr

08003044 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8003044:	b480      	push	{r7}
 8003046:	b087      	sub	sp, #28
 8003048:	af00      	add	r7, sp, #0
 800304a:	60f8      	str	r0, [r7, #12]
 800304c:	60b9      	str	r1, [r7, #8]
 800304e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	3314      	adds	r3, #20
 8003054:	461a      	mov	r2, r3
 8003056:	68bb      	ldr	r3, [r7, #8]
 8003058:	0e5b      	lsrs	r3, r3, #25
 800305a:	009b      	lsls	r3, r3, #2
 800305c:	f003 0304 	and.w	r3, r3, #4
 8003060:	4413      	add	r3, r2
 8003062:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003064:	697b      	ldr	r3, [r7, #20]
 8003066:	681a      	ldr	r2, [r3, #0]
 8003068:	68bb      	ldr	r3, [r7, #8]
 800306a:	0d1b      	lsrs	r3, r3, #20
 800306c:	f003 031f 	and.w	r3, r3, #31
 8003070:	2107      	movs	r1, #7
 8003072:	fa01 f303 	lsl.w	r3, r1, r3
 8003076:	43db      	mvns	r3, r3
 8003078:	401a      	ands	r2, r3
 800307a:	68bb      	ldr	r3, [r7, #8]
 800307c:	0d1b      	lsrs	r3, r3, #20
 800307e:	f003 031f 	and.w	r3, r3, #31
 8003082:	6879      	ldr	r1, [r7, #4]
 8003084:	fa01 f303 	lsl.w	r3, r1, r3
 8003088:	431a      	orrs	r2, r3
 800308a:	697b      	ldr	r3, [r7, #20]
 800308c:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800308e:	bf00      	nop
 8003090:	371c      	adds	r7, #28
 8003092:	46bd      	mov	sp, r7
 8003094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003098:	4770      	bx	lr
	...

0800309c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 800309c:	b480      	push	{r7}
 800309e:	b085      	sub	sp, #20
 80030a0:	af00      	add	r7, sp, #0
 80030a2:	60f8      	str	r0, [r7, #12]
 80030a4:	60b9      	str	r1, [r7, #8]
 80030a6:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 80030ae:	68bb      	ldr	r3, [r7, #8]
 80030b0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80030b4:	43db      	mvns	r3, r3
 80030b6:	401a      	ands	r2, r3
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	f003 0318 	and.w	r3, r3, #24
 80030be:	4908      	ldr	r1, [pc, #32]	; (80030e0 <LL_ADC_SetChannelSingleDiff+0x44>)
 80030c0:	40d9      	lsrs	r1, r3
 80030c2:	68bb      	ldr	r3, [r7, #8]
 80030c4:	400b      	ands	r3, r1
 80030c6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80030ca:	431a      	orrs	r2, r3
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 80030d2:	bf00      	nop
 80030d4:	3714      	adds	r7, #20
 80030d6:	46bd      	mov	sp, r7
 80030d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030dc:	4770      	bx	lr
 80030de:	bf00      	nop
 80030e0:	000fffff 	.word	0x000fffff

080030e4 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80030e4:	b480      	push	{r7}
 80030e6:	b083      	sub	sp, #12
 80030e8:	af00      	add	r7, sp, #0
 80030ea:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	689b      	ldr	r3, [r3, #8]
 80030f0:	f003 031f 	and.w	r3, r3, #31
}
 80030f4:	4618      	mov	r0, r3
 80030f6:	370c      	adds	r7, #12
 80030f8:	46bd      	mov	sp, r7
 80030fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030fe:	4770      	bx	lr

08003100 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_EACH_ADC
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_32_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_8B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003100:	b480      	push	{r7}
 8003102:	b083      	sub	sp, #12
 8003104:	af00      	add	r7, sp, #0
 8003106:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DAMDF));
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	689b      	ldr	r3, [r3, #8]
 800310c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
}
 8003110:	4618      	mov	r0, r3
 8003112:	370c      	adds	r7, #12
 8003114:	46bd      	mov	sp, r7
 8003116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800311a:	4770      	bx	lr

0800311c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 800311c:	b480      	push	{r7}
 800311e:	b083      	sub	sp, #12
 8003120:	af00      	add	r7, sp, #0
 8003122:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	689a      	ldr	r2, [r3, #8]
 8003128:	4b04      	ldr	r3, [pc, #16]	; (800313c <LL_ADC_DisableDeepPowerDown+0x20>)
 800312a:	4013      	ands	r3, r2
 800312c:	687a      	ldr	r2, [r7, #4]
 800312e:	6093      	str	r3, [r2, #8]
}
 8003130:	bf00      	nop
 8003132:	370c      	adds	r7, #12
 8003134:	46bd      	mov	sp, r7
 8003136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800313a:	4770      	bx	lr
 800313c:	5fffffc0 	.word	0x5fffffc0

08003140 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8003140:	b480      	push	{r7}
 8003142:	b083      	sub	sp, #12
 8003144:	af00      	add	r7, sp, #0
 8003146:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	689b      	ldr	r3, [r3, #8]
 800314c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003150:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003154:	d101      	bne.n	800315a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8003156:	2301      	movs	r3, #1
 8003158:	e000      	b.n	800315c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800315a:	2300      	movs	r3, #0
}
 800315c:	4618      	mov	r0, r3
 800315e:	370c      	adds	r7, #12
 8003160:	46bd      	mov	sp, r7
 8003162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003166:	4770      	bx	lr

08003168 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8003168:	b480      	push	{r7}
 800316a:	b083      	sub	sp, #12
 800316c:	af00      	add	r7, sp, #0
 800316e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	689a      	ldr	r2, [r3, #8]
 8003174:	4b05      	ldr	r3, [pc, #20]	; (800318c <LL_ADC_EnableInternalRegulator+0x24>)
 8003176:	4013      	ands	r3, r2
 8003178:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8003180:	bf00      	nop
 8003182:	370c      	adds	r7, #12
 8003184:	46bd      	mov	sp, r7
 8003186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800318a:	4770      	bx	lr
 800318c:	6fffffc0 	.word	0x6fffffc0

08003190 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8003190:	b480      	push	{r7}
 8003192:	b083      	sub	sp, #12
 8003194:	af00      	add	r7, sp, #0
 8003196:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	689b      	ldr	r3, [r3, #8]
 800319c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031a0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80031a4:	d101      	bne.n	80031aa <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80031a6:	2301      	movs	r3, #1
 80031a8:	e000      	b.n	80031ac <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80031aa:	2300      	movs	r3, #0
}
 80031ac:	4618      	mov	r0, r3
 80031ae:	370c      	adds	r7, #12
 80031b0:	46bd      	mov	sp, r7
 80031b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b6:	4770      	bx	lr

080031b8 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80031b8:	b480      	push	{r7}
 80031ba:	b083      	sub	sp, #12
 80031bc:	af00      	add	r7, sp, #0
 80031be:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	689a      	ldr	r2, [r3, #8]
 80031c4:	4b05      	ldr	r3, [pc, #20]	; (80031dc <LL_ADC_Enable+0x24>)
 80031c6:	4013      	ands	r3, r2
 80031c8:	f043 0201 	orr.w	r2, r3, #1
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80031d0:	bf00      	nop
 80031d2:	370c      	adds	r7, #12
 80031d4:	46bd      	mov	sp, r7
 80031d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031da:	4770      	bx	lr
 80031dc:	7fffffc0 	.word	0x7fffffc0

080031e0 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 80031e0:	b480      	push	{r7}
 80031e2:	b083      	sub	sp, #12
 80031e4:	af00      	add	r7, sp, #0
 80031e6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	689a      	ldr	r2, [r3, #8]
 80031ec:	4b05      	ldr	r3, [pc, #20]	; (8003204 <LL_ADC_Disable+0x24>)
 80031ee:	4013      	ands	r3, r2
 80031f0:	f043 0202 	orr.w	r2, r3, #2
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 80031f8:	bf00      	nop
 80031fa:	370c      	adds	r7, #12
 80031fc:	46bd      	mov	sp, r7
 80031fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003202:	4770      	bx	lr
 8003204:	7fffffc0 	.word	0x7fffffc0

08003208 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8003208:	b480      	push	{r7}
 800320a:	b083      	sub	sp, #12
 800320c:	af00      	add	r7, sp, #0
 800320e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	689b      	ldr	r3, [r3, #8]
 8003214:	f003 0301 	and.w	r3, r3, #1
 8003218:	2b01      	cmp	r3, #1
 800321a:	d101      	bne.n	8003220 <LL_ADC_IsEnabled+0x18>
 800321c:	2301      	movs	r3, #1
 800321e:	e000      	b.n	8003222 <LL_ADC_IsEnabled+0x1a>
 8003220:	2300      	movs	r3, #0
}
 8003222:	4618      	mov	r0, r3
 8003224:	370c      	adds	r7, #12
 8003226:	46bd      	mov	sp, r7
 8003228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800322c:	4770      	bx	lr

0800322e <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 800322e:	b480      	push	{r7}
 8003230:	b083      	sub	sp, #12
 8003232:	af00      	add	r7, sp, #0
 8003234:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	689b      	ldr	r3, [r3, #8]
 800323a:	f003 0302 	and.w	r3, r3, #2
 800323e:	2b02      	cmp	r3, #2
 8003240:	d101      	bne.n	8003246 <LL_ADC_IsDisableOngoing+0x18>
 8003242:	2301      	movs	r3, #1
 8003244:	e000      	b.n	8003248 <LL_ADC_IsDisableOngoing+0x1a>
 8003246:	2300      	movs	r3, #0
}
 8003248:	4618      	mov	r0, r3
 800324a:	370c      	adds	r7, #12
 800324c:	46bd      	mov	sp, r7
 800324e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003252:	4770      	bx	lr

08003254 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8003254:	b480      	push	{r7}
 8003256:	b083      	sub	sp, #12
 8003258:	af00      	add	r7, sp, #0
 800325a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	689a      	ldr	r2, [r3, #8]
 8003260:	4b05      	ldr	r3, [pc, #20]	; (8003278 <LL_ADC_REG_StartConversion+0x24>)
 8003262:	4013      	ands	r3, r2
 8003264:	f043 0204 	orr.w	r2, r3, #4
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 800326c:	bf00      	nop
 800326e:	370c      	adds	r7, #12
 8003270:	46bd      	mov	sp, r7
 8003272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003276:	4770      	bx	lr
 8003278:	7fffffc0 	.word	0x7fffffc0

0800327c <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800327c:	b480      	push	{r7}
 800327e:	b083      	sub	sp, #12
 8003280:	af00      	add	r7, sp, #0
 8003282:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	689b      	ldr	r3, [r3, #8]
 8003288:	f003 0304 	and.w	r3, r3, #4
 800328c:	2b04      	cmp	r3, #4
 800328e:	d101      	bne.n	8003294 <LL_ADC_REG_IsConversionOngoing+0x18>
 8003290:	2301      	movs	r3, #1
 8003292:	e000      	b.n	8003296 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003294:	2300      	movs	r3, #0
}
 8003296:	4618      	mov	r0, r3
 8003298:	370c      	adds	r7, #12
 800329a:	46bd      	mov	sp, r7
 800329c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a0:	4770      	bx	lr

080032a2 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80032a2:	b480      	push	{r7}
 80032a4:	b083      	sub	sp, #12
 80032a6:	af00      	add	r7, sp, #0
 80032a8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	689b      	ldr	r3, [r3, #8]
 80032ae:	f003 0308 	and.w	r3, r3, #8
 80032b2:	2b08      	cmp	r3, #8
 80032b4:	d101      	bne.n	80032ba <LL_ADC_INJ_IsConversionOngoing+0x18>
 80032b6:	2301      	movs	r3, #1
 80032b8:	e000      	b.n	80032bc <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80032ba:	2300      	movs	r3, #0
}
 80032bc:	4618      	mov	r0, r3
 80032be:	370c      	adds	r7, #12
 80032c0:	46bd      	mov	sp, r7
 80032c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c6:	4770      	bx	lr

080032c8 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80032c8:	b590      	push	{r4, r7, lr}
 80032ca:	b089      	sub	sp, #36	; 0x24
 80032cc:	af00      	add	r7, sp, #0
 80032ce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80032d0:	2300      	movs	r3, #0
 80032d2:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80032d4:	2300      	movs	r3, #0
 80032d6:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d101      	bne.n	80032e2 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80032de:	2301      	movs	r3, #1
 80032e0:	e18f      	b.n	8003602 <HAL_ADC_Init+0x33a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	68db      	ldr	r3, [r3, #12]
 80032e6:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d109      	bne.n	8003304 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80032f0:	6878      	ldr	r0, [r7, #4]
 80032f2:	f7fe fe9f 	bl	8002034 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	2200      	movs	r2, #0
 80032fa:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	2200      	movs	r2, #0
 8003300:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	4618      	mov	r0, r3
 800330a:	f7ff ff19 	bl	8003140 <LL_ADC_IsDeepPowerDownEnabled>
 800330e:	4603      	mov	r3, r0
 8003310:	2b00      	cmp	r3, #0
 8003312:	d004      	beq.n	800331e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	4618      	mov	r0, r3
 800331a:	f7ff feff 	bl	800311c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	4618      	mov	r0, r3
 8003324:	f7ff ff34 	bl	8003190 <LL_ADC_IsInternalRegulatorEnabled>
 8003328:	4603      	mov	r3, r0
 800332a:	2b00      	cmp	r3, #0
 800332c:	d114      	bne.n	8003358 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	4618      	mov	r0, r3
 8003334:	f7ff ff18 	bl	8003168 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003338:	4b87      	ldr	r3, [pc, #540]	; (8003558 <HAL_ADC_Init+0x290>)
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	099b      	lsrs	r3, r3, #6
 800333e:	4a87      	ldr	r2, [pc, #540]	; (800355c <HAL_ADC_Init+0x294>)
 8003340:	fba2 2303 	umull	r2, r3, r2, r3
 8003344:	099b      	lsrs	r3, r3, #6
 8003346:	3301      	adds	r3, #1
 8003348:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800334a:	e002      	b.n	8003352 <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 800334c:	68bb      	ldr	r3, [r7, #8]
 800334e:	3b01      	subs	r3, #1
 8003350:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8003352:	68bb      	ldr	r3, [r7, #8]
 8003354:	2b00      	cmp	r3, #0
 8003356:	d1f9      	bne.n	800334c <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	4618      	mov	r0, r3
 800335e:	f7ff ff17 	bl	8003190 <LL_ADC_IsInternalRegulatorEnabled>
 8003362:	4603      	mov	r3, r0
 8003364:	2b00      	cmp	r3, #0
 8003366:	d10d      	bne.n	8003384 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800336c:	f043 0210 	orr.w	r2, r3, #16
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003378:	f043 0201 	orr.w	r2, r3, #1
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8003380:	2301      	movs	r3, #1
 8003382:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	4618      	mov	r0, r3
 800338a:	f7ff ff77 	bl	800327c <LL_ADC_REG_IsConversionOngoing>
 800338e:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003394:	f003 0310 	and.w	r3, r3, #16
 8003398:	2b00      	cmp	r3, #0
 800339a:	f040 8129 	bne.w	80035f0 <HAL_ADC_Init+0x328>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 800339e:	697b      	ldr	r3, [r7, #20]
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	f040 8125 	bne.w	80035f0 <HAL_ADC_Init+0x328>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033aa:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80033ae:	f043 0202 	orr.w	r2, r3, #2
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	4618      	mov	r0, r3
 80033bc:	f7ff ff24 	bl	8003208 <LL_ADC_IsEnabled>
 80033c0:	4603      	mov	r3, r0
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d136      	bne.n	8003434 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	4a65      	ldr	r2, [pc, #404]	; (8003560 <HAL_ADC_Init+0x298>)
 80033cc:	4293      	cmp	r3, r2
 80033ce:	d004      	beq.n	80033da <HAL_ADC_Init+0x112>
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	4a63      	ldr	r2, [pc, #396]	; (8003564 <HAL_ADC_Init+0x29c>)
 80033d6:	4293      	cmp	r3, r2
 80033d8:	d10e      	bne.n	80033f8 <HAL_ADC_Init+0x130>
 80033da:	4861      	ldr	r0, [pc, #388]	; (8003560 <HAL_ADC_Init+0x298>)
 80033dc:	f7ff ff14 	bl	8003208 <LL_ADC_IsEnabled>
 80033e0:	4604      	mov	r4, r0
 80033e2:	4860      	ldr	r0, [pc, #384]	; (8003564 <HAL_ADC_Init+0x29c>)
 80033e4:	f7ff ff10 	bl	8003208 <LL_ADC_IsEnabled>
 80033e8:	4603      	mov	r3, r0
 80033ea:	4323      	orrs	r3, r4
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	bf0c      	ite	eq
 80033f0:	2301      	moveq	r3, #1
 80033f2:	2300      	movne	r3, #0
 80033f4:	b2db      	uxtb	r3, r3
 80033f6:	e008      	b.n	800340a <HAL_ADC_Init+0x142>
 80033f8:	485b      	ldr	r0, [pc, #364]	; (8003568 <HAL_ADC_Init+0x2a0>)
 80033fa:	f7ff ff05 	bl	8003208 <LL_ADC_IsEnabled>
 80033fe:	4603      	mov	r3, r0
 8003400:	2b00      	cmp	r3, #0
 8003402:	bf0c      	ite	eq
 8003404:	2301      	moveq	r3, #1
 8003406:	2300      	movne	r3, #0
 8003408:	b2db      	uxtb	r3, r3
 800340a:	2b00      	cmp	r3, #0
 800340c:	d012      	beq.n	8003434 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	4a53      	ldr	r2, [pc, #332]	; (8003560 <HAL_ADC_Init+0x298>)
 8003414:	4293      	cmp	r3, r2
 8003416:	d004      	beq.n	8003422 <HAL_ADC_Init+0x15a>
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	4a51      	ldr	r2, [pc, #324]	; (8003564 <HAL_ADC_Init+0x29c>)
 800341e:	4293      	cmp	r3, r2
 8003420:	d101      	bne.n	8003426 <HAL_ADC_Init+0x15e>
 8003422:	4a52      	ldr	r2, [pc, #328]	; (800356c <HAL_ADC_Init+0x2a4>)
 8003424:	e000      	b.n	8003428 <HAL_ADC_Init+0x160>
 8003426:	4a52      	ldr	r2, [pc, #328]	; (8003570 <HAL_ADC_Init+0x2a8>)
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	685b      	ldr	r3, [r3, #4]
 800342c:	4619      	mov	r1, r3
 800342e:	4610      	mov	r0, r2
 8003430:	f7ff fd2e 	bl	8002e90 <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 8003434:	f7ff fcf6 	bl	8002e24 <HAL_GetREVID>
 8003438:	4603      	mov	r3, r0
 800343a:	f241 0203 	movw	r2, #4099	; 0x1003
 800343e:	4293      	cmp	r3, r2
 8003440:	d914      	bls.n	800346c <HAL_ADC_Init+0x1a4>
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	689b      	ldr	r3, [r3, #8]
 8003446:	2b10      	cmp	r3, #16
 8003448:	d110      	bne.n	800346c <HAL_ADC_Init+0x1a4>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	7d5b      	ldrb	r3, [r3, #21]
 800344e:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003454:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 800345a:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	7f1b      	ldrb	r3, [r3, #28]
 8003460:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8003462:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003464:	f043 030c 	orr.w	r3, r3, #12
 8003468:	61bb      	str	r3, [r7, #24]
 800346a:	e00d      	b.n	8003488 <HAL_ADC_Init+0x1c0>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	7d5b      	ldrb	r3, [r3, #21]
 8003470:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003476:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 800347c:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	7f1b      	ldrb	r3, [r3, #28]
 8003482:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8003484:	4313      	orrs	r3, r2
 8003486:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	7f1b      	ldrb	r3, [r3, #28]
 800348c:	2b01      	cmp	r3, #1
 800348e:	d106      	bne.n	800349e <HAL_ADC_Init+0x1d6>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	6a1b      	ldr	r3, [r3, #32]
 8003494:	3b01      	subs	r3, #1
 8003496:	045b      	lsls	r3, r3, #17
 8003498:	69ba      	ldr	r2, [r7, #24]
 800349a:	4313      	orrs	r3, r2
 800349c:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d009      	beq.n	80034ba <HAL_ADC_Init+0x1f2>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034aa:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034b2:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80034b4:	69ba      	ldr	r2, [r7, #24]
 80034b6:	4313      	orrs	r3, r2
 80034b8:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	68da      	ldr	r2, [r3, #12]
 80034c0:	4b2c      	ldr	r3, [pc, #176]	; (8003574 <HAL_ADC_Init+0x2ac>)
 80034c2:	4013      	ands	r3, r2
 80034c4:	687a      	ldr	r2, [r7, #4]
 80034c6:	6812      	ldr	r2, [r2, #0]
 80034c8:	69b9      	ldr	r1, [r7, #24]
 80034ca:	430b      	orrs	r3, r1
 80034cc:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	4618      	mov	r0, r3
 80034d4:	f7ff fed2 	bl	800327c <LL_ADC_REG_IsConversionOngoing>
 80034d8:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	4618      	mov	r0, r3
 80034e0:	f7ff fedf 	bl	80032a2 <LL_ADC_INJ_IsConversionOngoing>
 80034e4:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80034e6:	693b      	ldr	r3, [r7, #16]
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d15f      	bne.n	80035ac <HAL_ADC_Init+0x2e4>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d15c      	bne.n	80035ac <HAL_ADC_Init+0x2e4>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	7d1b      	ldrb	r3, [r3, #20]
 80034f6:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      tmpCFGR = (
 80034fc:	4313      	orrs	r3, r2
 80034fe:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	68da      	ldr	r2, [r3, #12]
 8003506:	4b1c      	ldr	r3, [pc, #112]	; (8003578 <HAL_ADC_Init+0x2b0>)
 8003508:	4013      	ands	r3, r2
 800350a:	687a      	ldr	r2, [r7, #4]
 800350c:	6812      	ldr	r2, [r2, #0]
 800350e:	69b9      	ldr	r1, [r7, #24]
 8003510:	430b      	orrs	r3, r1
 8003512:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800351a:	2b01      	cmp	r3, #1
 800351c:	d130      	bne.n	8003580 <HAL_ADC_Init+0x2b8>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003522:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	691a      	ldr	r2, [r3, #16]
 800352a:	4b14      	ldr	r3, [pc, #80]	; (800357c <HAL_ADC_Init+0x2b4>)
 800352c:	4013      	ands	r3, r2
 800352e:	687a      	ldr	r2, [r7, #4]
 8003530:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003532:	3a01      	subs	r2, #1
 8003534:	0411      	lsls	r1, r2, #16
 8003536:	687a      	ldr	r2, [r7, #4]
 8003538:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800353a:	4311      	orrs	r1, r2
 800353c:	687a      	ldr	r2, [r7, #4]
 800353e:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8003540:	4311      	orrs	r1, r2
 8003542:	687a      	ldr	r2, [r7, #4]
 8003544:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8003546:	430a      	orrs	r2, r1
 8003548:	431a      	orrs	r2, r3
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	f042 0201 	orr.w	r2, r2, #1
 8003552:	611a      	str	r2, [r3, #16]
 8003554:	e01c      	b.n	8003590 <HAL_ADC_Init+0x2c8>
 8003556:	bf00      	nop
 8003558:	20000010 	.word	0x20000010
 800355c:	053e2d63 	.word	0x053e2d63
 8003560:	40022000 	.word	0x40022000
 8003564:	40022100 	.word	0x40022100
 8003568:	58026000 	.word	0x58026000
 800356c:	40022300 	.word	0x40022300
 8003570:	58026300 	.word	0x58026300
 8003574:	fff0c003 	.word	0xfff0c003
 8003578:	ffffbffc 	.word	0xffffbffc
 800357c:	fc00f81e 	.word	0xfc00f81e

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	691a      	ldr	r2, [r3, #16]
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	f022 0201 	bic.w	r2, r2, #1
 800358e:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	691b      	ldr	r3, [r3, #16]
 8003596:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	430a      	orrs	r2, r1
 80035a4:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 80035a6:	6878      	ldr	r0, [r7, #4]
 80035a8:	f001 f804 	bl	80045b4 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	68db      	ldr	r3, [r3, #12]
 80035b0:	2b01      	cmp	r3, #1
 80035b2:	d10c      	bne.n	80035ce <HAL_ADC_Init+0x306>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035ba:	f023 010f 	bic.w	r1, r3, #15
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	699b      	ldr	r3, [r3, #24]
 80035c2:	1e5a      	subs	r2, r3, #1
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	430a      	orrs	r2, r1
 80035ca:	631a      	str	r2, [r3, #48]	; 0x30
 80035cc:	e007      	b.n	80035de <HAL_ADC_Init+0x316>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	f022 020f 	bic.w	r2, r2, #15
 80035dc:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035e2:	f023 0303 	bic.w	r3, r3, #3
 80035e6:	f043 0201 	orr.w	r2, r3, #1
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	655a      	str	r2, [r3, #84]	; 0x54
 80035ee:	e007      	b.n	8003600 <HAL_ADC_Init+0x338>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035f4:	f043 0210 	orr.w	r2, r3, #16
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80035fc:	2301      	movs	r3, #1
 80035fe:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8003600:	7ffb      	ldrb	r3, [r7, #31]
}
 8003602:	4618      	mov	r0, r3
 8003604:	3724      	adds	r7, #36	; 0x24
 8003606:	46bd      	mov	sp, r7
 8003608:	bd90      	pop	{r4, r7, pc}
 800360a:	bf00      	nop

0800360c <HAL_ADC_Start_IT>:
  *          before calling HAL_ADC_Start_IT().
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef *hadc)
{
 800360c:	b580      	push	{r7, lr}
 800360e:	b086      	sub	sp, #24
 8003610:	af00      	add	r7, sp, #0
 8003612:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	4a92      	ldr	r2, [pc, #584]	; (8003864 <HAL_ADC_Start_IT+0x258>)
 800361a:	4293      	cmp	r3, r2
 800361c:	d004      	beq.n	8003628 <HAL_ADC_Start_IT+0x1c>
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	4a91      	ldr	r2, [pc, #580]	; (8003868 <HAL_ADC_Start_IT+0x25c>)
 8003624:	4293      	cmp	r3, r2
 8003626:	d101      	bne.n	800362c <HAL_ADC_Start_IT+0x20>
 8003628:	4b90      	ldr	r3, [pc, #576]	; (800386c <HAL_ADC_Start_IT+0x260>)
 800362a:	e000      	b.n	800362e <HAL_ADC_Start_IT+0x22>
 800362c:	4b90      	ldr	r3, [pc, #576]	; (8003870 <HAL_ADC_Start_IT+0x264>)
 800362e:	4618      	mov	r0, r3
 8003630:	f7ff fd58 	bl	80030e4 <LL_ADC_GetMultimode>
 8003634:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	4618      	mov	r0, r3
 800363c:	f7ff fe1e 	bl	800327c <LL_ADC_REG_IsConversionOngoing>
 8003640:	4603      	mov	r3, r0
 8003642:	2b00      	cmp	r3, #0
 8003644:	f040 8118 	bne.w	8003878 <HAL_ADC_Start_IT+0x26c>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800364e:	2b01      	cmp	r3, #1
 8003650:	d101      	bne.n	8003656 <HAL_ADC_Start_IT+0x4a>
 8003652:	2302      	movs	r3, #2
 8003654:	e113      	b.n	800387e <HAL_ADC_Start_IT+0x272>
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	2201      	movs	r2, #1
 800365a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 800365e:	6878      	ldr	r0, [r7, #4]
 8003660:	f000 febe 	bl	80043e0 <ADC_Enable>
 8003664:	4603      	mov	r3, r0
 8003666:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8003668:	7dfb      	ldrb	r3, [r7, #23]
 800366a:	2b00      	cmp	r3, #0
 800366c:	f040 80f5 	bne.w	800385a <HAL_ADC_Start_IT+0x24e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003674:	4b7f      	ldr	r3, [pc, #508]	; (8003874 <HAL_ADC_Start_IT+0x268>)
 8003676:	4013      	ands	r3, r2
 8003678:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	655a      	str	r2, [r3, #84]	; 0x54
                        HAL_ADC_STATE_REG_BUSY);

      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	4a78      	ldr	r2, [pc, #480]	; (8003868 <HAL_ADC_Start_IT+0x25c>)
 8003686:	4293      	cmp	r3, r2
 8003688:	d002      	beq.n	8003690 <HAL_ADC_Start_IT+0x84>
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	e000      	b.n	8003692 <HAL_ADC_Start_IT+0x86>
 8003690:	4b74      	ldr	r3, [pc, #464]	; (8003864 <HAL_ADC_Start_IT+0x258>)
 8003692:	687a      	ldr	r2, [r7, #4]
 8003694:	6812      	ldr	r2, [r2, #0]
 8003696:	4293      	cmp	r3, r2
 8003698:	d002      	beq.n	80036a0 <HAL_ADC_Start_IT+0x94>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800369a:	693b      	ldr	r3, [r7, #16]
 800369c:	2b00      	cmp	r3, #0
 800369e:	d105      	bne.n	80036ac <HAL_ADC_Start_IT+0xa0>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036a4:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	655a      	str	r2, [r3, #84]	; 0x54
      }

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036b0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d006      	beq.n	80036c6 <HAL_ADC_Start_IT+0xba>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036bc:	f023 0206 	bic.w	r2, r3, #6
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	659a      	str	r2, [r3, #88]	; 0x58
 80036c4:	e002      	b.n	80036cc <HAL_ADC_Start_IT+0xc0>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	2200      	movs	r2, #0
 80036ca:	659a      	str	r2, [r3, #88]	; 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	221c      	movs	r2, #28
 80036d2:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	2200      	movs	r2, #0
 80036d8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

      /* Disable all interruptions before enabling the desired ones */
      __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_EOS | ADC_IT_OVR));
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	685a      	ldr	r2, [r3, #4]
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	f022 021c 	bic.w	r2, r2, #28
 80036ea:	605a      	str	r2, [r3, #4]

      /* Enable ADC end of conversion interrupt */
      switch (hadc->Init.EOCSelection)
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	691b      	ldr	r3, [r3, #16]
 80036f0:	2b08      	cmp	r3, #8
 80036f2:	d108      	bne.n	8003706 <HAL_ADC_Start_IT+0xfa>
      {
        case ADC_EOC_SEQ_CONV:
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOS);
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	685a      	ldr	r2, [r3, #4]
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	f042 0208 	orr.w	r2, r2, #8
 8003702:	605a      	str	r2, [r3, #4]
          break;
 8003704:	e008      	b.n	8003718 <HAL_ADC_Start_IT+0x10c>
        /* case ADC_EOC_SINGLE_CONV */
        default:
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOC);
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	685a      	ldr	r2, [r3, #4]
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	f042 0204 	orr.w	r2, r2, #4
 8003714:	605a      	str	r2, [r3, #4]
          break;
 8003716:	bf00      	nop

      /* Enable ADC overrun interrupt */
      /* If hadc->Init.Overrun is set to ADC_OVR_DATA_PRESERVED, only then is
         ADC_IT_OVR enabled; otherwise data overwrite is considered as normal
         behavior and no CPU time is lost for a non-processed interruption */
      if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800371c:	2b00      	cmp	r3, #0
 800371e:	d107      	bne.n	8003730 <HAL_ADC_Start_IT+0x124>
      {
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	685a      	ldr	r2, [r3, #4]
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	f042 0210 	orr.w	r2, r2, #16
 800372e:	605a      	str	r2, [r3, #4]
      /* trigger event.                                                       */
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	4a4c      	ldr	r2, [pc, #304]	; (8003868 <HAL_ADC_Start_IT+0x25c>)
 8003736:	4293      	cmp	r3, r2
 8003738:	d002      	beq.n	8003740 <HAL_ADC_Start_IT+0x134>
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	e000      	b.n	8003742 <HAL_ADC_Start_IT+0x136>
 8003740:	4b48      	ldr	r3, [pc, #288]	; (8003864 <HAL_ADC_Start_IT+0x258>)
 8003742:	687a      	ldr	r2, [r7, #4]
 8003744:	6812      	ldr	r2, [r2, #0]
 8003746:	4293      	cmp	r3, r2
 8003748:	d008      	beq.n	800375c <HAL_ADC_Start_IT+0x150>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800374a:	693b      	ldr	r3, [r7, #16]
 800374c:	2b00      	cmp	r3, #0
 800374e:	d005      	beq.n	800375c <HAL_ADC_Start_IT+0x150>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8003750:	693b      	ldr	r3, [r7, #16]
 8003752:	2b05      	cmp	r3, #5
 8003754:	d002      	beq.n	800375c <HAL_ADC_Start_IT+0x150>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8003756:	693b      	ldr	r3, [r7, #16]
 8003758:	2b09      	cmp	r3, #9
 800375a:	d13a      	bne.n	80037d2 <HAL_ADC_Start_IT+0x1c6>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	68db      	ldr	r3, [r3, #12]
 8003762:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003766:	2b00      	cmp	r3, #0
 8003768:	d02d      	beq.n	80037c6 <HAL_ADC_Start_IT+0x1ba>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800376e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003772:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	655a      	str	r2, [r3, #84]	; 0x54

          /* Enable as well injected interruptions in case
           HAL_ADCEx_InjectedStart_IT() has not been called beforehand. This
           allows to start regular and injected conversions when JAUTO is
           set with a single call to HAL_ADC_Start_IT() */
          switch (hadc->Init.EOCSelection)
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	691b      	ldr	r3, [r3, #16]
 800377e:	2b08      	cmp	r3, #8
 8003780:	d110      	bne.n	80037a4 <HAL_ADC_Start_IT+0x198>
          {
            case ADC_EOC_SEQ_CONV:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	685a      	ldr	r2, [r3, #4]
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	f022 0220 	bic.w	r2, r2, #32
 8003790:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOS);
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	685a      	ldr	r2, [r3, #4]
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80037a0:	605a      	str	r2, [r3, #4]
              break;
 80037a2:	e010      	b.n	80037c6 <HAL_ADC_Start_IT+0x1ba>
            /* case ADC_EOC_SINGLE_CONV */
            default:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOS);
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	685a      	ldr	r2, [r3, #4]
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80037b2:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	685a      	ldr	r2, [r3, #4]
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	f042 0220 	orr.w	r2, r2, #32
 80037c2:	605a      	str	r2, [r3, #4]
              break;
 80037c4:	bf00      	nop
          }
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	4618      	mov	r0, r3
 80037cc:	f7ff fd42 	bl	8003254 <LL_ADC_REG_StartConversion>
 80037d0:	e054      	b.n	800387c <HAL_ADC_Start_IT+0x270>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037d6:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	655a      	str	r2, [r3, #84]	; 0x54
        /* if Master ADC JAUTO bit is set, Slave injected interruptions
           are enabled nevertheless (for same reason as above) */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	4a21      	ldr	r2, [pc, #132]	; (8003868 <HAL_ADC_Start_IT+0x25c>)
 80037e4:	4293      	cmp	r3, r2
 80037e6:	d002      	beq.n	80037ee <HAL_ADC_Start_IT+0x1e2>
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	e000      	b.n	80037f0 <HAL_ADC_Start_IT+0x1e4>
 80037ee:	4b1d      	ldr	r3, [pc, #116]	; (8003864 <HAL_ADC_Start_IT+0x258>)
 80037f0:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	68db      	ldr	r3, [r3, #12]
 80037f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d03e      	beq.n	800387c <HAL_ADC_Start_IT+0x270>
        {
          /* First, update Slave State in setting HAL_ADC_STATE_INJ_BUSY bit
             and in resetting HAL_ADC_STATE_INJ_EOC bit */
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003802:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003806:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	655a      	str	r2, [r3, #84]	; 0x54
          /* Next, set Slave injected interruptions */
          switch (hadc->Init.EOCSelection)
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	691b      	ldr	r3, [r3, #16]
 8003812:	2b08      	cmp	r3, #8
 8003814:	d110      	bne.n	8003838 <HAL_ADC_Start_IT+0x22c>
          {
            case ADC_EOC_SEQ_CONV:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	685a      	ldr	r2, [r3, #4]
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	f022 0220 	bic.w	r2, r2, #32
 8003824:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOS);
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	685a      	ldr	r2, [r3, #4]
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003834:	605a      	str	r2, [r3, #4]
              break;
 8003836:	e021      	b.n	800387c <HAL_ADC_Start_IT+0x270>
            /* case ADC_EOC_SINGLE_CONV */
            default:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOS);
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	685a      	ldr	r2, [r3, #4]
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003846:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	685a      	ldr	r2, [r3, #4]
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	f042 0220 	orr.w	r2, r2, #32
 8003856:	605a      	str	r2, [r3, #4]
              break;
 8003858:	e010      	b.n	800387c <HAL_ADC_Start_IT+0x270>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	2200      	movs	r2, #0
 800385e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8003862:	e00b      	b.n	800387c <HAL_ADC_Start_IT+0x270>
 8003864:	40022000 	.word	0x40022000
 8003868:	40022100 	.word	0x40022100
 800386c:	40022300 	.word	0x40022300
 8003870:	58026300 	.word	0x58026300
 8003874:	fffff0fe 	.word	0xfffff0fe
    }

  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8003878:	2302      	movs	r3, #2
 800387a:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 800387c:	7dfb      	ldrb	r3, [r7, #23]
}
 800387e:	4618      	mov	r0, r3
 8003880:	3718      	adds	r7, #24
 8003882:	46bd      	mov	sp, r7
 8003884:	bd80      	pop	{r7, pc}
 8003886:	bf00      	nop

08003888 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8003888:	b480      	push	{r7}
 800388a:	b083      	sub	sp, #12
 800388c:	af00      	add	r7, sp, #0
 800388e:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8003896:	4618      	mov	r0, r3
 8003898:	370c      	adds	r7, #12
 800389a:	46bd      	mov	sp, r7
 800389c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a0:	4770      	bx	lr
	...

080038a4 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 80038a4:	b580      	push	{r7, lr}
 80038a6:	b08a      	sub	sp, #40	; 0x28
 80038a8:	af00      	add	r7, sp, #0
 80038aa:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 80038ac:	2300      	movs	r3, #0
 80038ae:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	685b      	ldr	r3, [r3, #4]
 80038be:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	4a87      	ldr	r2, [pc, #540]	; (8003ae4 <HAL_ADC_IRQHandler+0x240>)
 80038c6:	4293      	cmp	r3, r2
 80038c8:	d004      	beq.n	80038d4 <HAL_ADC_IRQHandler+0x30>
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	4a86      	ldr	r2, [pc, #536]	; (8003ae8 <HAL_ADC_IRQHandler+0x244>)
 80038d0:	4293      	cmp	r3, r2
 80038d2:	d101      	bne.n	80038d8 <HAL_ADC_IRQHandler+0x34>
 80038d4:	4b85      	ldr	r3, [pc, #532]	; (8003aec <HAL_ADC_IRQHandler+0x248>)
 80038d6:	e000      	b.n	80038da <HAL_ADC_IRQHandler+0x36>
 80038d8:	4b85      	ldr	r3, [pc, #532]	; (8003af0 <HAL_ADC_IRQHandler+0x24c>)
 80038da:	4618      	mov	r0, r3
 80038dc:	f7ff fc02 	bl	80030e4 <LL_ADC_GetMultimode>
 80038e0:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 80038e2:	69fb      	ldr	r3, [r7, #28]
 80038e4:	f003 0302 	and.w	r3, r3, #2
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d017      	beq.n	800391c <HAL_ADC_IRQHandler+0x78>
 80038ec:	69bb      	ldr	r3, [r7, #24]
 80038ee:	f003 0302 	and.w	r3, r3, #2
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d012      	beq.n	800391c <HAL_ADC_IRQHandler+0x78>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038fa:	f003 0310 	and.w	r3, r3, #16
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d105      	bne.n	800390e <HAL_ADC_IRQHandler+0x6a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003906:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	655a      	str	r2, [r3, #84]	; 0x54

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 800390e:	6878      	ldr	r0, [r7, #4]
 8003910:	f001 f81a 	bl	8004948 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	2202      	movs	r2, #2
 800391a:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 800391c:	69fb      	ldr	r3, [r7, #28]
 800391e:	f003 0304 	and.w	r3, r3, #4
 8003922:	2b00      	cmp	r3, #0
 8003924:	d004      	beq.n	8003930 <HAL_ADC_IRQHandler+0x8c>
 8003926:	69bb      	ldr	r3, [r7, #24]
 8003928:	f003 0304 	and.w	r3, r3, #4
 800392c:	2b00      	cmp	r3, #0
 800392e:	d10a      	bne.n	8003946 <HAL_ADC_IRQHandler+0xa2>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8003930:	69fb      	ldr	r3, [r7, #28]
 8003932:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8003936:	2b00      	cmp	r3, #0
 8003938:	f000 8083 	beq.w	8003a42 <HAL_ADC_IRQHandler+0x19e>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 800393c:	69bb      	ldr	r3, [r7, #24]
 800393e:	f003 0308 	and.w	r3, r3, #8
 8003942:	2b00      	cmp	r3, #0
 8003944:	d07d      	beq.n	8003a42 <HAL_ADC_IRQHandler+0x19e>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800394a:	f003 0310 	and.w	r3, r3, #16
 800394e:	2b00      	cmp	r3, #0
 8003950:	d105      	bne.n	800395e <HAL_ADC_IRQHandler+0xba>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003956:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	4618      	mov	r0, r3
 8003964:	f7ff fb1c 	bl	8002fa0 <LL_ADC_REG_IsTriggerSourceSWStart>
 8003968:	4603      	mov	r3, r0
 800396a:	2b00      	cmp	r3, #0
 800396c:	d062      	beq.n	8003a34 <HAL_ADC_IRQHandler+0x190>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	4a5d      	ldr	r2, [pc, #372]	; (8003ae8 <HAL_ADC_IRQHandler+0x244>)
 8003974:	4293      	cmp	r3, r2
 8003976:	d002      	beq.n	800397e <HAL_ADC_IRQHandler+0xda>
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	e000      	b.n	8003980 <HAL_ADC_IRQHandler+0xdc>
 800397e:	4b59      	ldr	r3, [pc, #356]	; (8003ae4 <HAL_ADC_IRQHandler+0x240>)
 8003980:	687a      	ldr	r2, [r7, #4]
 8003982:	6812      	ldr	r2, [r2, #0]
 8003984:	4293      	cmp	r3, r2
 8003986:	d008      	beq.n	800399a <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003988:	697b      	ldr	r3, [r7, #20]
 800398a:	2b00      	cmp	r3, #0
 800398c:	d005      	beq.n	800399a <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800398e:	697b      	ldr	r3, [r7, #20]
 8003990:	2b05      	cmp	r3, #5
 8003992:	d002      	beq.n	800399a <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8003994:	697b      	ldr	r3, [r7, #20]
 8003996:	2b09      	cmp	r3, #9
 8003998:	d104      	bne.n	80039a4 <HAL_ADC_IRQHandler+0x100>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	68db      	ldr	r3, [r3, #12]
 80039a0:	623b      	str	r3, [r7, #32]
 80039a2:	e00c      	b.n	80039be <HAL_ADC_IRQHandler+0x11a>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	4a4f      	ldr	r2, [pc, #316]	; (8003ae8 <HAL_ADC_IRQHandler+0x244>)
 80039aa:	4293      	cmp	r3, r2
 80039ac:	d002      	beq.n	80039b4 <HAL_ADC_IRQHandler+0x110>
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	e000      	b.n	80039b6 <HAL_ADC_IRQHandler+0x112>
 80039b4:	4b4b      	ldr	r3, [pc, #300]	; (8003ae4 <HAL_ADC_IRQHandler+0x240>)
 80039b6:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 80039b8:	693b      	ldr	r3, [r7, #16]
 80039ba:	68db      	ldr	r3, [r3, #12]
 80039bc:	623b      	str	r3, [r7, #32]
      }

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 80039be:	6a3b      	ldr	r3, [r7, #32]
 80039c0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d135      	bne.n	8003a34 <HAL_ADC_IRQHandler+0x190>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	f003 0308 	and.w	r3, r3, #8
 80039d2:	2b08      	cmp	r3, #8
 80039d4:	d12e      	bne.n	8003a34 <HAL_ADC_IRQHandler+0x190>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	4618      	mov	r0, r3
 80039dc:	f7ff fc4e 	bl	800327c <LL_ADC_REG_IsConversionOngoing>
 80039e0:	4603      	mov	r3, r0
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d11a      	bne.n	8003a1c <HAL_ADC_IRQHandler+0x178>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	685a      	ldr	r2, [r3, #4]
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	f022 020c 	bic.w	r2, r2, #12
 80039f4:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039fa:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	655a      	str	r2, [r3, #84]	; 0x54

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a06:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d112      	bne.n	8003a34 <HAL_ADC_IRQHandler+0x190>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a12:	f043 0201 	orr.w	r2, r3, #1
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	655a      	str	r2, [r3, #84]	; 0x54
 8003a1a:	e00b      	b.n	8003a34 <HAL_ADC_IRQHandler+0x190>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a20:	f043 0210 	orr.w	r2, r3, #16
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a2c:	f043 0201 	orr.w	r2, r3, #1
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	659a      	str	r2, [r3, #88]	; 0x58
    /*       possibility to use:                                              */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003a34:	6878      	ldr	r0, [r7, #4]
 8003a36:	f7fe fa91 	bl	8001f5c <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	220c      	movs	r2, #12
 8003a40:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8003a42:	69fb      	ldr	r3, [r7, #28]
 8003a44:	f003 0320 	and.w	r3, r3, #32
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d004      	beq.n	8003a56 <HAL_ADC_IRQHandler+0x1b2>
 8003a4c:	69bb      	ldr	r3, [r7, #24]
 8003a4e:	f003 0320 	and.w	r3, r3, #32
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d10b      	bne.n	8003a6e <HAL_ADC_IRQHandler+0x1ca>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8003a56:	69fb      	ldr	r3, [r7, #28]
 8003a58:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	f000 80a0 	beq.w	8003ba2 <HAL_ADC_IRQHandler+0x2fe>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8003a62:	69bb      	ldr	r3, [r7, #24]
 8003a64:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	f000 809a 	beq.w	8003ba2 <HAL_ADC_IRQHandler+0x2fe>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a72:	f003 0310 	and.w	r3, r3, #16
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d105      	bne.n	8003a86 <HAL_ADC_IRQHandler+0x1e2>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a7e:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	4618      	mov	r0, r3
 8003a8c:	f7ff fac7 	bl	800301e <LL_ADC_INJ_IsTriggerSourceSWStart>
 8003a90:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	4618      	mov	r0, r3
 8003a98:	f7ff fa82 	bl	8002fa0 <LL_ADC_REG_IsTriggerSourceSWStart>
 8003a9c:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	4a11      	ldr	r2, [pc, #68]	; (8003ae8 <HAL_ADC_IRQHandler+0x244>)
 8003aa4:	4293      	cmp	r3, r2
 8003aa6:	d002      	beq.n	8003aae <HAL_ADC_IRQHandler+0x20a>
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	e000      	b.n	8003ab0 <HAL_ADC_IRQHandler+0x20c>
 8003aae:	4b0d      	ldr	r3, [pc, #52]	; (8003ae4 <HAL_ADC_IRQHandler+0x240>)
 8003ab0:	687a      	ldr	r2, [r7, #4]
 8003ab2:	6812      	ldr	r2, [r2, #0]
 8003ab4:	4293      	cmp	r3, r2
 8003ab6:	d008      	beq.n	8003aca <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003ab8:	697b      	ldr	r3, [r7, #20]
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d005      	beq.n	8003aca <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 8003abe:	697b      	ldr	r3, [r7, #20]
 8003ac0:	2b06      	cmp	r3, #6
 8003ac2:	d002      	beq.n	8003aca <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8003ac4:	697b      	ldr	r3, [r7, #20]
 8003ac6:	2b07      	cmp	r3, #7
 8003ac8:	d104      	bne.n	8003ad4 <HAL_ADC_IRQHandler+0x230>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	68db      	ldr	r3, [r3, #12]
 8003ad0:	623b      	str	r3, [r7, #32]
 8003ad2:	e014      	b.n	8003afe <HAL_ADC_IRQHandler+0x25a>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	4a03      	ldr	r2, [pc, #12]	; (8003ae8 <HAL_ADC_IRQHandler+0x244>)
 8003ada:	4293      	cmp	r3, r2
 8003adc:	d00a      	beq.n	8003af4 <HAL_ADC_IRQHandler+0x250>
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	e008      	b.n	8003af6 <HAL_ADC_IRQHandler+0x252>
 8003ae4:	40022000 	.word	0x40022000
 8003ae8:	40022100 	.word	0x40022100
 8003aec:	40022300 	.word	0x40022300
 8003af0:	58026300 	.word	0x58026300
 8003af4:	4b84      	ldr	r3, [pc, #528]	; (8003d08 <HAL_ADC_IRQHandler+0x464>)
 8003af6:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8003af8:	693b      	ldr	r3, [r7, #16]
 8003afa:	68db      	ldr	r3, [r3, #12]
 8003afc:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d047      	beq.n	8003b94 <HAL_ADC_IRQHandler+0x2f0>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8003b04:	6a3b      	ldr	r3, [r7, #32]
 8003b06:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d007      	beq.n	8003b1e <HAL_ADC_IRQHandler+0x27a>
 8003b0e:	68bb      	ldr	r3, [r7, #8]
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d03f      	beq.n	8003b94 <HAL_ADC_IRQHandler+0x2f0>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8003b14:	6a3b      	ldr	r3, [r7, #32]
 8003b16:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d13a      	bne.n	8003b94 <HAL_ADC_IRQHandler+0x2f0>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b28:	2b40      	cmp	r3, #64	; 0x40
 8003b2a:	d133      	bne.n	8003b94 <HAL_ADC_IRQHandler+0x2f0>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8003b2c:	6a3b      	ldr	r3, [r7, #32]
 8003b2e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d12e      	bne.n	8003b94 <HAL_ADC_IRQHandler+0x2f0>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	4618      	mov	r0, r3
 8003b3c:	f7ff fbb1 	bl	80032a2 <LL_ADC_INJ_IsConversionOngoing>
 8003b40:	4603      	mov	r3, r0
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d11a      	bne.n	8003b7c <HAL_ADC_IRQHandler+0x2d8>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	685a      	ldr	r2, [r3, #4]
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003b54:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b5a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	655a      	str	r2, [r3, #84]	; 0x54

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b66:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d112      	bne.n	8003b94 <HAL_ADC_IRQHandler+0x2f0>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b72:	f043 0201 	orr.w	r2, r3, #1
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	655a      	str	r2, [r3, #84]	; 0x54
 8003b7a:	e00b      	b.n	8003b94 <HAL_ADC_IRQHandler+0x2f0>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b80:	f043 0210 	orr.w	r2, r3, #16
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	655a      	str	r2, [r3, #84]	; 0x54

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b8c:	f043 0201 	orr.w	r2, r3, #1
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	659a      	str	r2, [r3, #88]	; 0x58
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8003b94:	6878      	ldr	r0, [r7, #4]
 8003b96:	f000 feaf 	bl	80048f8 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	2260      	movs	r2, #96	; 0x60
 8003ba0:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8003ba2:	69fb      	ldr	r3, [r7, #28]
 8003ba4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d011      	beq.n	8003bd0 <HAL_ADC_IRQHandler+0x32c>
 8003bac:	69bb      	ldr	r3, [r7, #24]
 8003bae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d00c      	beq.n	8003bd0 <HAL_ADC_IRQHandler+0x32c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003bba:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8003bc2:	6878      	ldr	r0, [r7, #4]
 8003bc4:	f000 f8a8 	bl	8003d18 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	2280      	movs	r2, #128	; 0x80
 8003bce:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8003bd0:	69fb      	ldr	r3, [r7, #28]
 8003bd2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d012      	beq.n	8003c00 <HAL_ADC_IRQHandler+0x35c>
 8003bda:	69bb      	ldr	r3, [r7, #24]
 8003bdc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d00d      	beq.n	8003c00 <HAL_ADC_IRQHandler+0x35c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003be8:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8003bf0:	6878      	ldr	r0, [r7, #4]
 8003bf2:	f000 fe95 	bl	8004920 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003bfe:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8003c00:	69fb      	ldr	r3, [r7, #28]
 8003c02:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d012      	beq.n	8003c30 <HAL_ADC_IRQHandler+0x38c>
 8003c0a:	69bb      	ldr	r3, [r7, #24]
 8003c0c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d00d      	beq.n	8003c30 <HAL_ADC_IRQHandler+0x38c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c18:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8003c20:	6878      	ldr	r0, [r7, #4]
 8003c22:	f000 fe87 	bl	8004934 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003c2e:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8003c30:	69fb      	ldr	r3, [r7, #28]
 8003c32:	f003 0310 	and.w	r3, r3, #16
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d043      	beq.n	8003cc2 <HAL_ADC_IRQHandler+0x41e>
 8003c3a:	69bb      	ldr	r3, [r7, #24]
 8003c3c:	f003 0310 	and.w	r3, r3, #16
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d03e      	beq.n	8003cc2 <HAL_ADC_IRQHandler+0x41e>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d102      	bne.n	8003c52 <HAL_ADC_IRQHandler+0x3ae>
    {
      overrun_error = 1UL;
 8003c4c:	2301      	movs	r3, #1
 8003c4e:	627b      	str	r3, [r7, #36]	; 0x24
 8003c50:	e021      	b.n	8003c96 <HAL_ADC_IRQHandler+0x3f2>
    }
    else
    {
      /* Check DMA configuration */
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 8003c52:	697b      	ldr	r3, [r7, #20]
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d015      	beq.n	8003c84 <HAL_ADC_IRQHandler+0x3e0>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	4a2a      	ldr	r2, [pc, #168]	; (8003d08 <HAL_ADC_IRQHandler+0x464>)
 8003c5e:	4293      	cmp	r3, r2
 8003c60:	d004      	beq.n	8003c6c <HAL_ADC_IRQHandler+0x3c8>
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	4a29      	ldr	r2, [pc, #164]	; (8003d0c <HAL_ADC_IRQHandler+0x468>)
 8003c68:	4293      	cmp	r3, r2
 8003c6a:	d101      	bne.n	8003c70 <HAL_ADC_IRQHandler+0x3cc>
 8003c6c:	4b28      	ldr	r3, [pc, #160]	; (8003d10 <HAL_ADC_IRQHandler+0x46c>)
 8003c6e:	e000      	b.n	8003c72 <HAL_ADC_IRQHandler+0x3ce>
 8003c70:	4b28      	ldr	r3, [pc, #160]	; (8003d14 <HAL_ADC_IRQHandler+0x470>)
 8003c72:	4618      	mov	r0, r3
 8003c74:	f7ff fa44 	bl	8003100 <LL_ADC_GetMultiDMATransfer>
 8003c78:	4603      	mov	r3, r0
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d00b      	beq.n	8003c96 <HAL_ADC_IRQHandler+0x3f2>
        {
          overrun_error = 1UL;
 8003c7e:	2301      	movs	r3, #1
 8003c80:	627b      	str	r3, [r7, #36]	; 0x24
 8003c82:	e008      	b.n	8003c96 <HAL_ADC_IRQHandler+0x3f2>
        }
      }
      else
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMNGT) != 0UL)
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	68db      	ldr	r3, [r3, #12]
 8003c8a:	f003 0303 	and.w	r3, r3, #3
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d001      	beq.n	8003c96 <HAL_ADC_IRQHandler+0x3f2>
        {
          overrun_error = 1UL;
 8003c92:	2301      	movs	r3, #1
 8003c94:	627b      	str	r3, [r7, #36]	; 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 8003c96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c98:	2b01      	cmp	r3, #1
 8003c9a:	d10e      	bne.n	8003cba <HAL_ADC_IRQHandler+0x416>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ca0:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003cac:	f043 0202 	orr.w	r2, r3, #2
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	659a      	str	r2, [r3, #88]	; 0x58
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8003cb4:	6878      	ldr	r0, [r7, #4]
 8003cb6:	f000 f839 	bl	8003d2c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	2210      	movs	r2, #16
 8003cc0:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8003cc2:	69fb      	ldr	r3, [r7, #28]
 8003cc4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d018      	beq.n	8003cfe <HAL_ADC_IRQHandler+0x45a>
 8003ccc:	69bb      	ldr	r3, [r7, #24]
 8003cce:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	d013      	beq.n	8003cfe <HAL_ADC_IRQHandler+0x45a>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003cda:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ce6:	f043 0208 	orr.w	r2, r3, #8
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	659a      	str	r2, [r3, #88]	; 0x58

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003cf6:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8003cf8:	6878      	ldr	r0, [r7, #4]
 8003cfa:	f000 fe07 	bl	800490c <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 8003cfe:	bf00      	nop
 8003d00:	3728      	adds	r7, #40	; 0x28
 8003d02:	46bd      	mov	sp, r7
 8003d04:	bd80      	pop	{r7, pc}
 8003d06:	bf00      	nop
 8003d08:	40022000 	.word	0x40022000
 8003d0c:	40022100 	.word	0x40022100
 8003d10:	40022300 	.word	0x40022300
 8003d14:	58026300 	.word	0x58026300

08003d18 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8003d18:	b480      	push	{r7}
 8003d1a:	b083      	sub	sp, #12
 8003d1c:	af00      	add	r7, sp, #0
 8003d1e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8003d20:	bf00      	nop
 8003d22:	370c      	adds	r7, #12
 8003d24:	46bd      	mov	sp, r7
 8003d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d2a:	4770      	bx	lr

08003d2c <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003d2c:	b480      	push	{r7}
 8003d2e:	b083      	sub	sp, #12
 8003d30:	af00      	add	r7, sp, #0
 8003d32:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8003d34:	bf00      	nop
 8003d36:	370c      	adds	r7, #12
 8003d38:	46bd      	mov	sp, r7
 8003d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d3e:	4770      	bx	lr

08003d40 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8003d40:	b590      	push	{r4, r7, lr}
 8003d42:	b0a1      	sub	sp, #132	; 0x84
 8003d44:	af00      	add	r7, sp, #0
 8003d46:	6078      	str	r0, [r7, #4]
 8003d48:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003d4a:	2300      	movs	r3, #0
 8003d4c:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8003d50:	2300      	movs	r3, #0
 8003d52:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8003d54:	683b      	ldr	r3, [r7, #0]
 8003d56:	68db      	ldr	r3, [r3, #12]
 8003d58:	4a9d      	ldr	r2, [pc, #628]	; (8003fd0 <HAL_ADC_ConfigChannel+0x290>)
 8003d5a:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003d62:	2b01      	cmp	r3, #1
 8003d64:	d101      	bne.n	8003d6a <HAL_ADC_ConfigChannel+0x2a>
 8003d66:	2302      	movs	r3, #2
 8003d68:	e321      	b.n	80043ae <HAL_ADC_ConfigChannel+0x66e>
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	2201      	movs	r2, #1
 8003d6e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	4618      	mov	r0, r3
 8003d78:	f7ff fa80 	bl	800327c <LL_ADC_REG_IsConversionOngoing>
 8003d7c:	4603      	mov	r3, r0
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	f040 8306 	bne.w	8004390 <HAL_ADC_ConfigChannel+0x650>
      /* ADC channels preselection */
      hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
    }
#else
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8003d84:	683b      	ldr	r3, [r7, #0]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d108      	bne.n	8003da2 <HAL_ADC_ConfigChannel+0x62>
 8003d90:	683b      	ldr	r3, [r7, #0]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	0e9b      	lsrs	r3, r3, #26
 8003d96:	f003 031f 	and.w	r3, r3, #31
 8003d9a:	2201      	movs	r2, #1
 8003d9c:	fa02 f303 	lsl.w	r3, r2, r3
 8003da0:	e016      	b.n	8003dd0 <HAL_ADC_ConfigChannel+0x90>
 8003da2:	683b      	ldr	r3, [r7, #0]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	667b      	str	r3, [r7, #100]	; 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003da8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003daa:	fa93 f3a3 	rbit	r3, r3
 8003dae:	663b      	str	r3, [r7, #96]	; 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003db0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003db2:	66bb      	str	r3, [r7, #104]	; 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8003db4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d101      	bne.n	8003dbe <HAL_ADC_ConfigChannel+0x7e>
  {
    return 32U;
 8003dba:	2320      	movs	r3, #32
 8003dbc:	e003      	b.n	8003dc6 <HAL_ADC_ConfigChannel+0x86>
  }
  return __builtin_clz(value);
 8003dbe:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003dc0:	fab3 f383 	clz	r3, r3
 8003dc4:	b2db      	uxtb	r3, r3
 8003dc6:	f003 031f 	and.w	r3, r3, #31
 8003dca:	2201      	movs	r2, #1
 8003dcc:	fa02 f303 	lsl.w	r3, r2, r3
 8003dd0:	687a      	ldr	r2, [r7, #4]
 8003dd2:	6812      	ldr	r2, [r2, #0]
 8003dd4:	69d1      	ldr	r1, [r2, #28]
 8003dd6:	687a      	ldr	r2, [r7, #4]
 8003dd8:	6812      	ldr	r2, [r2, #0]
 8003dda:	430b      	orrs	r3, r1
 8003ddc:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	6818      	ldr	r0, [r3, #0]
 8003de2:	683b      	ldr	r3, [r7, #0]
 8003de4:	6859      	ldr	r1, [r3, #4]
 8003de6:	683b      	ldr	r3, [r7, #0]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	461a      	mov	r2, r3
 8003dec:	f7ff f8eb 	bl	8002fc6 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	4618      	mov	r0, r3
 8003df6:	f7ff fa41 	bl	800327c <LL_ADC_REG_IsConversionOngoing>
 8003dfa:	67b8      	str	r0, [r7, #120]	; 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	4618      	mov	r0, r3
 8003e02:	f7ff fa4e 	bl	80032a2 <LL_ADC_INJ_IsConversionOngoing>
 8003e06:	6778      	str	r0, [r7, #116]	; 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003e08:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	f040 80b3 	bne.w	8003f76 <HAL_ADC_ConfigChannel+0x236>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003e10:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	f040 80af 	bne.w	8003f76 <HAL_ADC_ConfigChannel+0x236>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	6818      	ldr	r0, [r3, #0]
 8003e1c:	683b      	ldr	r3, [r7, #0]
 8003e1e:	6819      	ldr	r1, [r3, #0]
 8003e20:	683b      	ldr	r3, [r7, #0]
 8003e22:	689b      	ldr	r3, [r3, #8]
 8003e24:	461a      	mov	r2, r3
 8003e26:	f7ff f90d 	bl	8003044 <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8003e2a:	4b6a      	ldr	r3, [pc, #424]	; (8003fd4 <HAL_ADC_ConfigChannel+0x294>)
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8003e32:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003e36:	d10b      	bne.n	8003e50 <HAL_ADC_ConfigChannel+0x110>
 8003e38:	683b      	ldr	r3, [r7, #0]
 8003e3a:	695a      	ldr	r2, [r3, #20]
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	68db      	ldr	r3, [r3, #12]
 8003e42:	089b      	lsrs	r3, r3, #2
 8003e44:	f003 0307 	and.w	r3, r3, #7
 8003e48:	005b      	lsls	r3, r3, #1
 8003e4a:	fa02 f303 	lsl.w	r3, r2, r3
 8003e4e:	e01d      	b.n	8003e8c <HAL_ADC_ConfigChannel+0x14c>
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	68db      	ldr	r3, [r3, #12]
 8003e56:	f003 0310 	and.w	r3, r3, #16
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d10b      	bne.n	8003e76 <HAL_ADC_ConfigChannel+0x136>
 8003e5e:	683b      	ldr	r3, [r7, #0]
 8003e60:	695a      	ldr	r2, [r3, #20]
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	68db      	ldr	r3, [r3, #12]
 8003e68:	089b      	lsrs	r3, r3, #2
 8003e6a:	f003 0307 	and.w	r3, r3, #7
 8003e6e:	005b      	lsls	r3, r3, #1
 8003e70:	fa02 f303 	lsl.w	r3, r2, r3
 8003e74:	e00a      	b.n	8003e8c <HAL_ADC_ConfigChannel+0x14c>
 8003e76:	683b      	ldr	r3, [r7, #0]
 8003e78:	695a      	ldr	r2, [r3, #20]
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	68db      	ldr	r3, [r3, #12]
 8003e80:	089b      	lsrs	r3, r3, #2
 8003e82:	f003 0304 	and.w	r3, r3, #4
 8003e86:	005b      	lsls	r3, r3, #1
 8003e88:	fa02 f303 	lsl.w	r3, r2, r3
 8003e8c:	673b      	str	r3, [r7, #112]	; 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8003e8e:	683b      	ldr	r3, [r7, #0]
 8003e90:	691b      	ldr	r3, [r3, #16]
 8003e92:	2b04      	cmp	r3, #4
 8003e94:	d027      	beq.n	8003ee6 <HAL_ADC_ConfigChannel+0x1a6>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	6818      	ldr	r0, [r3, #0]
 8003e9a:	683b      	ldr	r3, [r7, #0]
 8003e9c:	6919      	ldr	r1, [r3, #16]
 8003e9e:	683b      	ldr	r3, [r7, #0]
 8003ea0:	681a      	ldr	r2, [r3, #0]
 8003ea2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003ea4:	f7ff f828 	bl	8002ef8 <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	6818      	ldr	r0, [r3, #0]
 8003eac:	683b      	ldr	r3, [r7, #0]
 8003eae:	6919      	ldr	r1, [r3, #16]
 8003eb0:	683b      	ldr	r3, [r7, #0]
 8003eb2:	7e5b      	ldrb	r3, [r3, #25]
 8003eb4:	2b01      	cmp	r3, #1
 8003eb6:	d102      	bne.n	8003ebe <HAL_ADC_ConfigChannel+0x17e>
 8003eb8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8003ebc:	e000      	b.n	8003ec0 <HAL_ADC_ConfigChannel+0x180>
 8003ebe:	2300      	movs	r3, #0
 8003ec0:	461a      	mov	r2, r3
 8003ec2:	f7ff f852 	bl	8002f6a <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	6818      	ldr	r0, [r3, #0]
 8003eca:	683b      	ldr	r3, [r7, #0]
 8003ecc:	6919      	ldr	r1, [r3, #16]
 8003ece:	683b      	ldr	r3, [r7, #0]
 8003ed0:	7e1b      	ldrb	r3, [r3, #24]
 8003ed2:	2b01      	cmp	r3, #1
 8003ed4:	d102      	bne.n	8003edc <HAL_ADC_ConfigChannel+0x19c>
 8003ed6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003eda:	e000      	b.n	8003ede <HAL_ADC_ConfigChannel+0x19e>
 8003edc:	2300      	movs	r3, #0
 8003ede:	461a      	mov	r2, r3
 8003ee0:	f7ff f82a 	bl	8002f38 <LL_ADC_SetDataRightShift>
 8003ee4:	e047      	b.n	8003f76 <HAL_ADC_ConfigChannel+0x236>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003eec:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003ef0:	683b      	ldr	r3, [r7, #0]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	069b      	lsls	r3, r3, #26
 8003ef6:	429a      	cmp	r2, r3
 8003ef8:	d107      	bne.n	8003f0a <HAL_ADC_ConfigChannel+0x1ca>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003f08:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003f10:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003f14:	683b      	ldr	r3, [r7, #0]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	069b      	lsls	r3, r3, #26
 8003f1a:	429a      	cmp	r2, r3
 8003f1c:	d107      	bne.n	8003f2e <HAL_ADC_ConfigChannel+0x1ee>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003f2c:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003f34:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003f38:	683b      	ldr	r3, [r7, #0]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	069b      	lsls	r3, r3, #26
 8003f3e:	429a      	cmp	r2, r3
 8003f40:	d107      	bne.n	8003f52 <HAL_ADC_ConfigChannel+0x212>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003f50:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003f58:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003f5c:	683b      	ldr	r3, [r7, #0]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	069b      	lsls	r3, r3, #26
 8003f62:	429a      	cmp	r2, r3
 8003f64:	d107      	bne.n	8003f76 <HAL_ADC_ConfigChannel+0x236>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8003f74:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	4618      	mov	r0, r3
 8003f7c:	f7ff f944 	bl	8003208 <LL_ADC_IsEnabled>
 8003f80:	4603      	mov	r3, r0
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	f040 820d 	bne.w	80043a2 <HAL_ADC_ConfigChannel+0x662>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	6818      	ldr	r0, [r3, #0]
 8003f8c:	683b      	ldr	r3, [r7, #0]
 8003f8e:	6819      	ldr	r1, [r3, #0]
 8003f90:	683b      	ldr	r3, [r7, #0]
 8003f92:	68db      	ldr	r3, [r3, #12]
 8003f94:	461a      	mov	r2, r3
 8003f96:	f7ff f881 	bl	800309c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8003f9a:	683b      	ldr	r3, [r7, #0]
 8003f9c:	68db      	ldr	r3, [r3, #12]
 8003f9e:	4a0c      	ldr	r2, [pc, #48]	; (8003fd0 <HAL_ADC_ConfigChannel+0x290>)
 8003fa0:	4293      	cmp	r3, r2
 8003fa2:	f040 8133 	bne.w	800420c <HAL_ADC_ConfigChannel+0x4cc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003faa:	683b      	ldr	r3, [r7, #0]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d110      	bne.n	8003fd8 <HAL_ADC_ConfigChannel+0x298>
 8003fb6:	683b      	ldr	r3, [r7, #0]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	0e9b      	lsrs	r3, r3, #26
 8003fbc:	3301      	adds	r3, #1
 8003fbe:	f003 031f 	and.w	r3, r3, #31
 8003fc2:	2b09      	cmp	r3, #9
 8003fc4:	bf94      	ite	ls
 8003fc6:	2301      	movls	r3, #1
 8003fc8:	2300      	movhi	r3, #0
 8003fca:	b2db      	uxtb	r3, r3
 8003fcc:	e01e      	b.n	800400c <HAL_ADC_ConfigChannel+0x2cc>
 8003fce:	bf00      	nop
 8003fd0:	47ff0000 	.word	0x47ff0000
 8003fd4:	5c001000 	.word	0x5c001000
 8003fd8:	683b      	ldr	r3, [r7, #0]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003fde:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003fe0:	fa93 f3a3 	rbit	r3, r3
 8003fe4:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8003fe6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003fe8:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 8003fea:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d101      	bne.n	8003ff4 <HAL_ADC_ConfigChannel+0x2b4>
    return 32U;
 8003ff0:	2320      	movs	r3, #32
 8003ff2:	e003      	b.n	8003ffc <HAL_ADC_ConfigChannel+0x2bc>
  return __builtin_clz(value);
 8003ff4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003ff6:	fab3 f383 	clz	r3, r3
 8003ffa:	b2db      	uxtb	r3, r3
 8003ffc:	3301      	adds	r3, #1
 8003ffe:	f003 031f 	and.w	r3, r3, #31
 8004002:	2b09      	cmp	r3, #9
 8004004:	bf94      	ite	ls
 8004006:	2301      	movls	r3, #1
 8004008:	2300      	movhi	r3, #0
 800400a:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800400c:	2b00      	cmp	r3, #0
 800400e:	d079      	beq.n	8004104 <HAL_ADC_ConfigChannel+0x3c4>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004010:	683b      	ldr	r3, [r7, #0]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004018:	2b00      	cmp	r3, #0
 800401a:	d107      	bne.n	800402c <HAL_ADC_ConfigChannel+0x2ec>
 800401c:	683b      	ldr	r3, [r7, #0]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	0e9b      	lsrs	r3, r3, #26
 8004022:	3301      	adds	r3, #1
 8004024:	069b      	lsls	r3, r3, #26
 8004026:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800402a:	e015      	b.n	8004058 <HAL_ADC_ConfigChannel+0x318>
 800402c:	683b      	ldr	r3, [r7, #0]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004032:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004034:	fa93 f3a3 	rbit	r3, r3
 8004038:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 800403a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800403c:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 800403e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004040:	2b00      	cmp	r3, #0
 8004042:	d101      	bne.n	8004048 <HAL_ADC_ConfigChannel+0x308>
    return 32U;
 8004044:	2320      	movs	r3, #32
 8004046:	e003      	b.n	8004050 <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 8004048:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800404a:	fab3 f383 	clz	r3, r3
 800404e:	b2db      	uxtb	r3, r3
 8004050:	3301      	adds	r3, #1
 8004052:	069b      	lsls	r3, r3, #26
 8004054:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004058:	683b      	ldr	r3, [r7, #0]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004060:	2b00      	cmp	r3, #0
 8004062:	d109      	bne.n	8004078 <HAL_ADC_ConfigChannel+0x338>
 8004064:	683b      	ldr	r3, [r7, #0]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	0e9b      	lsrs	r3, r3, #26
 800406a:	3301      	adds	r3, #1
 800406c:	f003 031f 	and.w	r3, r3, #31
 8004070:	2101      	movs	r1, #1
 8004072:	fa01 f303 	lsl.w	r3, r1, r3
 8004076:	e017      	b.n	80040a8 <HAL_ADC_ConfigChannel+0x368>
 8004078:	683b      	ldr	r3, [r7, #0]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800407e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004080:	fa93 f3a3 	rbit	r3, r3
 8004084:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8004086:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004088:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 800408a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800408c:	2b00      	cmp	r3, #0
 800408e:	d101      	bne.n	8004094 <HAL_ADC_ConfigChannel+0x354>
    return 32U;
 8004090:	2320      	movs	r3, #32
 8004092:	e003      	b.n	800409c <HAL_ADC_ConfigChannel+0x35c>
  return __builtin_clz(value);
 8004094:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004096:	fab3 f383 	clz	r3, r3
 800409a:	b2db      	uxtb	r3, r3
 800409c:	3301      	adds	r3, #1
 800409e:	f003 031f 	and.w	r3, r3, #31
 80040a2:	2101      	movs	r1, #1
 80040a4:	fa01 f303 	lsl.w	r3, r1, r3
 80040a8:	ea42 0103 	orr.w	r1, r2, r3
 80040ac:	683b      	ldr	r3, [r7, #0]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d10a      	bne.n	80040ce <HAL_ADC_ConfigChannel+0x38e>
 80040b8:	683b      	ldr	r3, [r7, #0]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	0e9b      	lsrs	r3, r3, #26
 80040be:	3301      	adds	r3, #1
 80040c0:	f003 021f 	and.w	r2, r3, #31
 80040c4:	4613      	mov	r3, r2
 80040c6:	005b      	lsls	r3, r3, #1
 80040c8:	4413      	add	r3, r2
 80040ca:	051b      	lsls	r3, r3, #20
 80040cc:	e018      	b.n	8004100 <HAL_ADC_ConfigChannel+0x3c0>
 80040ce:	683b      	ldr	r3, [r7, #0]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80040d6:	fa93 f3a3 	rbit	r3, r3
 80040da:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 80040dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040de:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 80040e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d101      	bne.n	80040ea <HAL_ADC_ConfigChannel+0x3aa>
    return 32U;
 80040e6:	2320      	movs	r3, #32
 80040e8:	e003      	b.n	80040f2 <HAL_ADC_ConfigChannel+0x3b2>
  return __builtin_clz(value);
 80040ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80040ec:	fab3 f383 	clz	r3, r3
 80040f0:	b2db      	uxtb	r3, r3
 80040f2:	3301      	adds	r3, #1
 80040f4:	f003 021f 	and.w	r2, r3, #31
 80040f8:	4613      	mov	r3, r2
 80040fa:	005b      	lsls	r3, r3, #1
 80040fc:	4413      	add	r3, r2
 80040fe:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004100:	430b      	orrs	r3, r1
 8004102:	e07e      	b.n	8004202 <HAL_ADC_ConfigChannel+0x4c2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004104:	683b      	ldr	r3, [r7, #0]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800410c:	2b00      	cmp	r3, #0
 800410e:	d107      	bne.n	8004120 <HAL_ADC_ConfigChannel+0x3e0>
 8004110:	683b      	ldr	r3, [r7, #0]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	0e9b      	lsrs	r3, r3, #26
 8004116:	3301      	adds	r3, #1
 8004118:	069b      	lsls	r3, r3, #26
 800411a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800411e:	e015      	b.n	800414c <HAL_ADC_ConfigChannel+0x40c>
 8004120:	683b      	ldr	r3, [r7, #0]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004126:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004128:	fa93 f3a3 	rbit	r3, r3
 800412c:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 800412e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004130:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 8004132:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004134:	2b00      	cmp	r3, #0
 8004136:	d101      	bne.n	800413c <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 8004138:	2320      	movs	r3, #32
 800413a:	e003      	b.n	8004144 <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 800413c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800413e:	fab3 f383 	clz	r3, r3
 8004142:	b2db      	uxtb	r3, r3
 8004144:	3301      	adds	r3, #1
 8004146:	069b      	lsls	r3, r3, #26
 8004148:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800414c:	683b      	ldr	r3, [r7, #0]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004154:	2b00      	cmp	r3, #0
 8004156:	d109      	bne.n	800416c <HAL_ADC_ConfigChannel+0x42c>
 8004158:	683b      	ldr	r3, [r7, #0]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	0e9b      	lsrs	r3, r3, #26
 800415e:	3301      	adds	r3, #1
 8004160:	f003 031f 	and.w	r3, r3, #31
 8004164:	2101      	movs	r1, #1
 8004166:	fa01 f303 	lsl.w	r3, r1, r3
 800416a:	e017      	b.n	800419c <HAL_ADC_ConfigChannel+0x45c>
 800416c:	683b      	ldr	r3, [r7, #0]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004172:	69fb      	ldr	r3, [r7, #28]
 8004174:	fa93 f3a3 	rbit	r3, r3
 8004178:	61bb      	str	r3, [r7, #24]
  return result;
 800417a:	69bb      	ldr	r3, [r7, #24]
 800417c:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 800417e:	6a3b      	ldr	r3, [r7, #32]
 8004180:	2b00      	cmp	r3, #0
 8004182:	d101      	bne.n	8004188 <HAL_ADC_ConfigChannel+0x448>
    return 32U;
 8004184:	2320      	movs	r3, #32
 8004186:	e003      	b.n	8004190 <HAL_ADC_ConfigChannel+0x450>
  return __builtin_clz(value);
 8004188:	6a3b      	ldr	r3, [r7, #32]
 800418a:	fab3 f383 	clz	r3, r3
 800418e:	b2db      	uxtb	r3, r3
 8004190:	3301      	adds	r3, #1
 8004192:	f003 031f 	and.w	r3, r3, #31
 8004196:	2101      	movs	r1, #1
 8004198:	fa01 f303 	lsl.w	r3, r1, r3
 800419c:	ea42 0103 	orr.w	r1, r2, r3
 80041a0:	683b      	ldr	r3, [r7, #0]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d10d      	bne.n	80041c8 <HAL_ADC_ConfigChannel+0x488>
 80041ac:	683b      	ldr	r3, [r7, #0]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	0e9b      	lsrs	r3, r3, #26
 80041b2:	3301      	adds	r3, #1
 80041b4:	f003 021f 	and.w	r2, r3, #31
 80041b8:	4613      	mov	r3, r2
 80041ba:	005b      	lsls	r3, r3, #1
 80041bc:	4413      	add	r3, r2
 80041be:	3b1e      	subs	r3, #30
 80041c0:	051b      	lsls	r3, r3, #20
 80041c2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80041c6:	e01b      	b.n	8004200 <HAL_ADC_ConfigChannel+0x4c0>
 80041c8:	683b      	ldr	r3, [r7, #0]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041ce:	693b      	ldr	r3, [r7, #16]
 80041d0:	fa93 f3a3 	rbit	r3, r3
 80041d4:	60fb      	str	r3, [r7, #12]
  return result;
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 80041da:	697b      	ldr	r3, [r7, #20]
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d101      	bne.n	80041e4 <HAL_ADC_ConfigChannel+0x4a4>
    return 32U;
 80041e0:	2320      	movs	r3, #32
 80041e2:	e003      	b.n	80041ec <HAL_ADC_ConfigChannel+0x4ac>
  return __builtin_clz(value);
 80041e4:	697b      	ldr	r3, [r7, #20]
 80041e6:	fab3 f383 	clz	r3, r3
 80041ea:	b2db      	uxtb	r3, r3
 80041ec:	3301      	adds	r3, #1
 80041ee:	f003 021f 	and.w	r2, r3, #31
 80041f2:	4613      	mov	r3, r2
 80041f4:	005b      	lsls	r3, r3, #1
 80041f6:	4413      	add	r3, r2
 80041f8:	3b1e      	subs	r3, #30
 80041fa:	051b      	lsls	r3, r3, #20
 80041fc:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004200:	430b      	orrs	r3, r1
 8004202:	683a      	ldr	r2, [r7, #0]
 8004204:	6892      	ldr	r2, [r2, #8]
 8004206:	4619      	mov	r1, r3
 8004208:	f7fe ff1c 	bl	8003044 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800420c:	683b      	ldr	r3, [r7, #0]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	2b00      	cmp	r3, #0
 8004212:	f280 80c6 	bge.w	80043a2 <HAL_ADC_ConfigChannel+0x662>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	4a67      	ldr	r2, [pc, #412]	; (80043b8 <HAL_ADC_ConfigChannel+0x678>)
 800421c:	4293      	cmp	r3, r2
 800421e:	d004      	beq.n	800422a <HAL_ADC_ConfigChannel+0x4ea>
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	4a65      	ldr	r2, [pc, #404]	; (80043bc <HAL_ADC_ConfigChannel+0x67c>)
 8004226:	4293      	cmp	r3, r2
 8004228:	d101      	bne.n	800422e <HAL_ADC_ConfigChannel+0x4ee>
 800422a:	4b65      	ldr	r3, [pc, #404]	; (80043c0 <HAL_ADC_ConfigChannel+0x680>)
 800422c:	e000      	b.n	8004230 <HAL_ADC_ConfigChannel+0x4f0>
 800422e:	4b65      	ldr	r3, [pc, #404]	; (80043c4 <HAL_ADC_ConfigChannel+0x684>)
 8004230:	4618      	mov	r0, r3
 8004232:	f7fe fe53 	bl	8002edc <LL_ADC_GetCommonPathInternalCh>
 8004236:	66f8      	str	r0, [r7, #108]	; 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	4a5e      	ldr	r2, [pc, #376]	; (80043b8 <HAL_ADC_ConfigChannel+0x678>)
 800423e:	4293      	cmp	r3, r2
 8004240:	d004      	beq.n	800424c <HAL_ADC_ConfigChannel+0x50c>
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	4a5d      	ldr	r2, [pc, #372]	; (80043bc <HAL_ADC_ConfigChannel+0x67c>)
 8004248:	4293      	cmp	r3, r2
 800424a:	d10e      	bne.n	800426a <HAL_ADC_ConfigChannel+0x52a>
 800424c:	485a      	ldr	r0, [pc, #360]	; (80043b8 <HAL_ADC_ConfigChannel+0x678>)
 800424e:	f7fe ffdb 	bl	8003208 <LL_ADC_IsEnabled>
 8004252:	4604      	mov	r4, r0
 8004254:	4859      	ldr	r0, [pc, #356]	; (80043bc <HAL_ADC_ConfigChannel+0x67c>)
 8004256:	f7fe ffd7 	bl	8003208 <LL_ADC_IsEnabled>
 800425a:	4603      	mov	r3, r0
 800425c:	4323      	orrs	r3, r4
 800425e:	2b00      	cmp	r3, #0
 8004260:	bf0c      	ite	eq
 8004262:	2301      	moveq	r3, #1
 8004264:	2300      	movne	r3, #0
 8004266:	b2db      	uxtb	r3, r3
 8004268:	e008      	b.n	800427c <HAL_ADC_ConfigChannel+0x53c>
 800426a:	4857      	ldr	r0, [pc, #348]	; (80043c8 <HAL_ADC_ConfigChannel+0x688>)
 800426c:	f7fe ffcc 	bl	8003208 <LL_ADC_IsEnabled>
 8004270:	4603      	mov	r3, r0
 8004272:	2b00      	cmp	r3, #0
 8004274:	bf0c      	ite	eq
 8004276:	2301      	moveq	r3, #1
 8004278:	2300      	movne	r3, #0
 800427a:	b2db      	uxtb	r3, r3
 800427c:	2b00      	cmp	r3, #0
 800427e:	d07d      	beq.n	800437c <HAL_ADC_ConfigChannel+0x63c>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8004280:	683b      	ldr	r3, [r7, #0]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	4a51      	ldr	r2, [pc, #324]	; (80043cc <HAL_ADC_ConfigChannel+0x68c>)
 8004286:	4293      	cmp	r3, r2
 8004288:	d130      	bne.n	80042ec <HAL_ADC_ConfigChannel+0x5ac>
 800428a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800428c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004290:	2b00      	cmp	r3, #0
 8004292:	d12b      	bne.n	80042ec <HAL_ADC_ConfigChannel+0x5ac>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	4a4b      	ldr	r2, [pc, #300]	; (80043c8 <HAL_ADC_ConfigChannel+0x688>)
 800429a:	4293      	cmp	r3, r2
 800429c:	f040 8081 	bne.w	80043a2 <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	4a44      	ldr	r2, [pc, #272]	; (80043b8 <HAL_ADC_ConfigChannel+0x678>)
 80042a6:	4293      	cmp	r3, r2
 80042a8:	d004      	beq.n	80042b4 <HAL_ADC_ConfigChannel+0x574>
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	4a43      	ldr	r2, [pc, #268]	; (80043bc <HAL_ADC_ConfigChannel+0x67c>)
 80042b0:	4293      	cmp	r3, r2
 80042b2:	d101      	bne.n	80042b8 <HAL_ADC_ConfigChannel+0x578>
 80042b4:	4a42      	ldr	r2, [pc, #264]	; (80043c0 <HAL_ADC_ConfigChannel+0x680>)
 80042b6:	e000      	b.n	80042ba <HAL_ADC_ConfigChannel+0x57a>
 80042b8:	4a42      	ldr	r2, [pc, #264]	; (80043c4 <HAL_ADC_ConfigChannel+0x684>)
 80042ba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80042bc:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80042c0:	4619      	mov	r1, r3
 80042c2:	4610      	mov	r0, r2
 80042c4:	f7fe fdf7 	bl	8002eb6 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80042c8:	4b41      	ldr	r3, [pc, #260]	; (80043d0 <HAL_ADC_ConfigChannel+0x690>)
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	099b      	lsrs	r3, r3, #6
 80042ce:	4a41      	ldr	r2, [pc, #260]	; (80043d4 <HAL_ADC_ConfigChannel+0x694>)
 80042d0:	fba2 2303 	umull	r2, r3, r2, r3
 80042d4:	099b      	lsrs	r3, r3, #6
 80042d6:	3301      	adds	r3, #1
 80042d8:	005b      	lsls	r3, r3, #1
 80042da:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 80042dc:	e002      	b.n	80042e4 <HAL_ADC_ConfigChannel+0x5a4>
              {
                wait_loop_index--;
 80042de:	68bb      	ldr	r3, [r7, #8]
 80042e0:	3b01      	subs	r3, #1
 80042e2:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 80042e4:	68bb      	ldr	r3, [r7, #8]
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d1f9      	bne.n	80042de <HAL_ADC_ConfigChannel+0x59e>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80042ea:	e05a      	b.n	80043a2 <HAL_ADC_ConfigChannel+0x662>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80042ec:	683b      	ldr	r3, [r7, #0]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	4a39      	ldr	r2, [pc, #228]	; (80043d8 <HAL_ADC_ConfigChannel+0x698>)
 80042f2:	4293      	cmp	r3, r2
 80042f4:	d11e      	bne.n	8004334 <HAL_ADC_ConfigChannel+0x5f4>
 80042f6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80042f8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d119      	bne.n	8004334 <HAL_ADC_ConfigChannel+0x5f4>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	4a30      	ldr	r2, [pc, #192]	; (80043c8 <HAL_ADC_ConfigChannel+0x688>)
 8004306:	4293      	cmp	r3, r2
 8004308:	d14b      	bne.n	80043a2 <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	4a2a      	ldr	r2, [pc, #168]	; (80043b8 <HAL_ADC_ConfigChannel+0x678>)
 8004310:	4293      	cmp	r3, r2
 8004312:	d004      	beq.n	800431e <HAL_ADC_ConfigChannel+0x5de>
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	4a28      	ldr	r2, [pc, #160]	; (80043bc <HAL_ADC_ConfigChannel+0x67c>)
 800431a:	4293      	cmp	r3, r2
 800431c:	d101      	bne.n	8004322 <HAL_ADC_ConfigChannel+0x5e2>
 800431e:	4a28      	ldr	r2, [pc, #160]	; (80043c0 <HAL_ADC_ConfigChannel+0x680>)
 8004320:	e000      	b.n	8004324 <HAL_ADC_ConfigChannel+0x5e4>
 8004322:	4a28      	ldr	r2, [pc, #160]	; (80043c4 <HAL_ADC_ConfigChannel+0x684>)
 8004324:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004326:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800432a:	4619      	mov	r1, r3
 800432c:	4610      	mov	r0, r2
 800432e:	f7fe fdc2 	bl	8002eb6 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004332:	e036      	b.n	80043a2 <HAL_ADC_ConfigChannel+0x662>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8004334:	683b      	ldr	r3, [r7, #0]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	4a28      	ldr	r2, [pc, #160]	; (80043dc <HAL_ADC_ConfigChannel+0x69c>)
 800433a:	4293      	cmp	r3, r2
 800433c:	d131      	bne.n	80043a2 <HAL_ADC_ConfigChannel+0x662>
 800433e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004340:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004344:	2b00      	cmp	r3, #0
 8004346:	d12c      	bne.n	80043a2 <HAL_ADC_ConfigChannel+0x662>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	4a1e      	ldr	r2, [pc, #120]	; (80043c8 <HAL_ADC_ConfigChannel+0x688>)
 800434e:	4293      	cmp	r3, r2
 8004350:	d127      	bne.n	80043a2 <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	4a18      	ldr	r2, [pc, #96]	; (80043b8 <HAL_ADC_ConfigChannel+0x678>)
 8004358:	4293      	cmp	r3, r2
 800435a:	d004      	beq.n	8004366 <HAL_ADC_ConfigChannel+0x626>
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	4a16      	ldr	r2, [pc, #88]	; (80043bc <HAL_ADC_ConfigChannel+0x67c>)
 8004362:	4293      	cmp	r3, r2
 8004364:	d101      	bne.n	800436a <HAL_ADC_ConfigChannel+0x62a>
 8004366:	4a16      	ldr	r2, [pc, #88]	; (80043c0 <HAL_ADC_ConfigChannel+0x680>)
 8004368:	e000      	b.n	800436c <HAL_ADC_ConfigChannel+0x62c>
 800436a:	4a16      	ldr	r2, [pc, #88]	; (80043c4 <HAL_ADC_ConfigChannel+0x684>)
 800436c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800436e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004372:	4619      	mov	r1, r3
 8004374:	4610      	mov	r0, r2
 8004376:	f7fe fd9e 	bl	8002eb6 <LL_ADC_SetCommonPathInternalCh>
 800437a:	e012      	b.n	80043a2 <HAL_ADC_ConfigChannel+0x662>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004380:	f043 0220 	orr.w	r2, r3, #32
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 8004388:	2301      	movs	r3, #1
 800438a:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 800438e:	e008      	b.n	80043a2 <HAL_ADC_ConfigChannel+0x662>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004394:	f043 0220 	orr.w	r2, r3, #32
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 800439c:	2301      	movs	r3, #1
 800439e:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	2200      	movs	r2, #0
 80043a6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80043aa:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 80043ae:	4618      	mov	r0, r3
 80043b0:	3784      	adds	r7, #132	; 0x84
 80043b2:	46bd      	mov	sp, r7
 80043b4:	bd90      	pop	{r4, r7, pc}
 80043b6:	bf00      	nop
 80043b8:	40022000 	.word	0x40022000
 80043bc:	40022100 	.word	0x40022100
 80043c0:	40022300 	.word	0x40022300
 80043c4:	58026300 	.word	0x58026300
 80043c8:	58026000 	.word	0x58026000
 80043cc:	cb840000 	.word	0xcb840000
 80043d0:	20000010 	.word	0x20000010
 80043d4:	053e2d63 	.word	0x053e2d63
 80043d8:	c7520000 	.word	0xc7520000
 80043dc:	cfb80000 	.word	0xcfb80000

080043e0 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80043e0:	b580      	push	{r7, lr}
 80043e2:	b084      	sub	sp, #16
 80043e4:	af00      	add	r7, sp, #0
 80043e6:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	4618      	mov	r0, r3
 80043ee:	f7fe ff0b 	bl	8003208 <LL_ADC_IsEnabled>
 80043f2:	4603      	mov	r3, r0
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d16e      	bne.n	80044d6 <ADC_Enable+0xf6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	689a      	ldr	r2, [r3, #8]
 80043fe:	4b38      	ldr	r3, [pc, #224]	; (80044e0 <ADC_Enable+0x100>)
 8004400:	4013      	ands	r3, r2
 8004402:	2b00      	cmp	r3, #0
 8004404:	d00d      	beq.n	8004422 <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800440a:	f043 0210 	orr.w	r2, r3, #16
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004416:	f043 0201 	orr.w	r2, r3, #1
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 800441e:	2301      	movs	r3, #1
 8004420:	e05a      	b.n	80044d8 <ADC_Enable+0xf8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	4618      	mov	r0, r3
 8004428:	f7fe fec6 	bl	80031b8 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 800442c:	f7fe fcca 	bl	8002dc4 <HAL_GetTick>
 8004430:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	4a2b      	ldr	r2, [pc, #172]	; (80044e4 <ADC_Enable+0x104>)
 8004438:	4293      	cmp	r3, r2
 800443a:	d004      	beq.n	8004446 <ADC_Enable+0x66>
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	4a29      	ldr	r2, [pc, #164]	; (80044e8 <ADC_Enable+0x108>)
 8004442:	4293      	cmp	r3, r2
 8004444:	d101      	bne.n	800444a <ADC_Enable+0x6a>
 8004446:	4b29      	ldr	r3, [pc, #164]	; (80044ec <ADC_Enable+0x10c>)
 8004448:	e000      	b.n	800444c <ADC_Enable+0x6c>
 800444a:	4b29      	ldr	r3, [pc, #164]	; (80044f0 <ADC_Enable+0x110>)
 800444c:	4618      	mov	r0, r3
 800444e:	f7fe fe49 	bl	80030e4 <LL_ADC_GetMultimode>
 8004452:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	4a23      	ldr	r2, [pc, #140]	; (80044e8 <ADC_Enable+0x108>)
 800445a:	4293      	cmp	r3, r2
 800445c:	d002      	beq.n	8004464 <ADC_Enable+0x84>
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	e000      	b.n	8004466 <ADC_Enable+0x86>
 8004464:	4b1f      	ldr	r3, [pc, #124]	; (80044e4 <ADC_Enable+0x104>)
 8004466:	687a      	ldr	r2, [r7, #4]
 8004468:	6812      	ldr	r2, [r2, #0]
 800446a:	4293      	cmp	r3, r2
 800446c:	d02c      	beq.n	80044c8 <ADC_Enable+0xe8>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800446e:	68bb      	ldr	r3, [r7, #8]
 8004470:	2b00      	cmp	r3, #0
 8004472:	d130      	bne.n	80044d6 <ADC_Enable+0xf6>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004474:	e028      	b.n	80044c8 <ADC_Enable+0xe8>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	4618      	mov	r0, r3
 800447c:	f7fe fec4 	bl	8003208 <LL_ADC_IsEnabled>
 8004480:	4603      	mov	r3, r0
 8004482:	2b00      	cmp	r3, #0
 8004484:	d104      	bne.n	8004490 <ADC_Enable+0xb0>
        {
          LL_ADC_Enable(hadc->Instance);
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	4618      	mov	r0, r3
 800448c:	f7fe fe94 	bl	80031b8 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8004490:	f7fe fc98 	bl	8002dc4 <HAL_GetTick>
 8004494:	4602      	mov	r2, r0
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	1ad3      	subs	r3, r2, r3
 800449a:	2b02      	cmp	r3, #2
 800449c:	d914      	bls.n	80044c8 <ADC_Enable+0xe8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	f003 0301 	and.w	r3, r3, #1
 80044a8:	2b01      	cmp	r3, #1
 80044aa:	d00d      	beq.n	80044c8 <ADC_Enable+0xe8>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80044b0:	f043 0210 	orr.w	r2, r3, #16
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80044bc:	f043 0201 	orr.w	r2, r3, #1
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	659a      	str	r2, [r3, #88]	; 0x58

            return HAL_ERROR;
 80044c4:	2301      	movs	r3, #1
 80044c6:	e007      	b.n	80044d8 <ADC_Enable+0xf8>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	f003 0301 	and.w	r3, r3, #1
 80044d2:	2b01      	cmp	r3, #1
 80044d4:	d1cf      	bne.n	8004476 <ADC_Enable+0x96>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80044d6:	2300      	movs	r3, #0
}
 80044d8:	4618      	mov	r0, r3
 80044da:	3710      	adds	r7, #16
 80044dc:	46bd      	mov	sp, r7
 80044de:	bd80      	pop	{r7, pc}
 80044e0:	8000003f 	.word	0x8000003f
 80044e4:	40022000 	.word	0x40022000
 80044e8:	40022100 	.word	0x40022100
 80044ec:	40022300 	.word	0x40022300
 80044f0:	58026300 	.word	0x58026300

080044f4 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 80044f4:	b580      	push	{r7, lr}
 80044f6:	b084      	sub	sp, #16
 80044f8:	af00      	add	r7, sp, #0
 80044fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	4618      	mov	r0, r3
 8004502:	f7fe fe94 	bl	800322e <LL_ADC_IsDisableOngoing>
 8004506:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	4618      	mov	r0, r3
 800450e:	f7fe fe7b 	bl	8003208 <LL_ADC_IsEnabled>
 8004512:	4603      	mov	r3, r0
 8004514:	2b00      	cmp	r3, #0
 8004516:	d047      	beq.n	80045a8 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	2b00      	cmp	r3, #0
 800451c:	d144      	bne.n	80045a8 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	689b      	ldr	r3, [r3, #8]
 8004524:	f003 030d 	and.w	r3, r3, #13
 8004528:	2b01      	cmp	r3, #1
 800452a:	d10c      	bne.n	8004546 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	4618      	mov	r0, r3
 8004532:	f7fe fe55 	bl	80031e0 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	2203      	movs	r2, #3
 800453c:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 800453e:	f7fe fc41 	bl	8002dc4 <HAL_GetTick>
 8004542:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004544:	e029      	b.n	800459a <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800454a:	f043 0210 	orr.w	r2, r3, #16
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	655a      	str	r2, [r3, #84]	; 0x54
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004556:	f043 0201 	orr.w	r2, r3, #1
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	659a      	str	r2, [r3, #88]	; 0x58
      return HAL_ERROR;
 800455e:	2301      	movs	r3, #1
 8004560:	e023      	b.n	80045aa <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8004562:	f7fe fc2f 	bl	8002dc4 <HAL_GetTick>
 8004566:	4602      	mov	r2, r0
 8004568:	68bb      	ldr	r3, [r7, #8]
 800456a:	1ad3      	subs	r3, r2, r3
 800456c:	2b02      	cmp	r3, #2
 800456e:	d914      	bls.n	800459a <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	689b      	ldr	r3, [r3, #8]
 8004576:	f003 0301 	and.w	r3, r3, #1
 800457a:	2b00      	cmp	r3, #0
 800457c:	d00d      	beq.n	800459a <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004582:	f043 0210 	orr.w	r2, r3, #16
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	655a      	str	r2, [r3, #84]	; 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800458e:	f043 0201 	orr.w	r2, r3, #1
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	659a      	str	r2, [r3, #88]	; 0x58

          return HAL_ERROR;
 8004596:	2301      	movs	r3, #1
 8004598:	e007      	b.n	80045aa <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	689b      	ldr	r3, [r3, #8]
 80045a0:	f003 0301 	and.w	r3, r3, #1
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d1dc      	bne.n	8004562 <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80045a8:	2300      	movs	r3, #0
}
 80045aa:	4618      	mov	r0, r3
 80045ac:	3710      	adds	r7, #16
 80045ae:	46bd      	mov	sp, r7
 80045b0:	bd80      	pop	{r7, pc}
	...

080045b4 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 80045b4:	b580      	push	{r7, lr}
 80045b6:	b084      	sub	sp, #16
 80045b8:	af00      	add	r7, sp, #0
 80045ba:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	4a7a      	ldr	r2, [pc, #488]	; (80047ac <ADC_ConfigureBoostMode+0x1f8>)
 80045c2:	4293      	cmp	r3, r2
 80045c4:	d004      	beq.n	80045d0 <ADC_ConfigureBoostMode+0x1c>
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	4a79      	ldr	r2, [pc, #484]	; (80047b0 <ADC_ConfigureBoostMode+0x1fc>)
 80045cc:	4293      	cmp	r3, r2
 80045ce:	d109      	bne.n	80045e4 <ADC_ConfigureBoostMode+0x30>
 80045d0:	4b78      	ldr	r3, [pc, #480]	; (80047b4 <ADC_ConfigureBoostMode+0x200>)
 80045d2:	689b      	ldr	r3, [r3, #8]
 80045d4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80045d8:	2b00      	cmp	r3, #0
 80045da:	bf14      	ite	ne
 80045dc:	2301      	movne	r3, #1
 80045de:	2300      	moveq	r3, #0
 80045e0:	b2db      	uxtb	r3, r3
 80045e2:	e008      	b.n	80045f6 <ADC_ConfigureBoostMode+0x42>
 80045e4:	4b74      	ldr	r3, [pc, #464]	; (80047b8 <ADC_ConfigureBoostMode+0x204>)
 80045e6:	689b      	ldr	r3, [r3, #8]
 80045e8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	bf14      	ite	ne
 80045f0:	2301      	movne	r3, #1
 80045f2:	2300      	moveq	r3, #0
 80045f4:	b2db      	uxtb	r3, r3
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d01c      	beq.n	8004634 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 80045fa:	f005 f89b 	bl	8009734 <HAL_RCC_GetHCLKFreq>
 80045fe:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	685b      	ldr	r3, [r3, #4]
 8004604:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004608:	d010      	beq.n	800462c <ADC_ConfigureBoostMode+0x78>
 800460a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800460e:	d873      	bhi.n	80046f8 <ADC_ConfigureBoostMode+0x144>
 8004610:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004614:	d002      	beq.n	800461c <ADC_ConfigureBoostMode+0x68>
 8004616:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800461a:	d16d      	bne.n	80046f8 <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	685b      	ldr	r3, [r3, #4]
 8004620:	0c1b      	lsrs	r3, r3, #16
 8004622:	68fa      	ldr	r2, [r7, #12]
 8004624:	fbb2 f3f3 	udiv	r3, r2, r3
 8004628:	60fb      	str	r3, [r7, #12]
        break;
 800462a:	e068      	b.n	80046fe <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	089b      	lsrs	r3, r3, #2
 8004630:	60fb      	str	r3, [r7, #12]
        break;
 8004632:	e064      	b.n	80046fe <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8004634:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8004638:	f04f 0100 	mov.w	r1, #0
 800463c:	f006 fafc 	bl	800ac38 <HAL_RCCEx_GetPeriphCLKFreq>
 8004640:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	685b      	ldr	r3, [r3, #4]
 8004646:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 800464a:	d051      	beq.n	80046f0 <ADC_ConfigureBoostMode+0x13c>
 800464c:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8004650:	d854      	bhi.n	80046fc <ADC_ConfigureBoostMode+0x148>
 8004652:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8004656:	d047      	beq.n	80046e8 <ADC_ConfigureBoostMode+0x134>
 8004658:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 800465c:	d84e      	bhi.n	80046fc <ADC_ConfigureBoostMode+0x148>
 800465e:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8004662:	d03d      	beq.n	80046e0 <ADC_ConfigureBoostMode+0x12c>
 8004664:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8004668:	d848      	bhi.n	80046fc <ADC_ConfigureBoostMode+0x148>
 800466a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800466e:	d033      	beq.n	80046d8 <ADC_ConfigureBoostMode+0x124>
 8004670:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004674:	d842      	bhi.n	80046fc <ADC_ConfigureBoostMode+0x148>
 8004676:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 800467a:	d029      	beq.n	80046d0 <ADC_ConfigureBoostMode+0x11c>
 800467c:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8004680:	d83c      	bhi.n	80046fc <ADC_ConfigureBoostMode+0x148>
 8004682:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8004686:	d01a      	beq.n	80046be <ADC_ConfigureBoostMode+0x10a>
 8004688:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 800468c:	d836      	bhi.n	80046fc <ADC_ConfigureBoostMode+0x148>
 800468e:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8004692:	d014      	beq.n	80046be <ADC_ConfigureBoostMode+0x10a>
 8004694:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8004698:	d830      	bhi.n	80046fc <ADC_ConfigureBoostMode+0x148>
 800469a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800469e:	d00e      	beq.n	80046be <ADC_ConfigureBoostMode+0x10a>
 80046a0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80046a4:	d82a      	bhi.n	80046fc <ADC_ConfigureBoostMode+0x148>
 80046a6:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80046aa:	d008      	beq.n	80046be <ADC_ConfigureBoostMode+0x10a>
 80046ac:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80046b0:	d824      	bhi.n	80046fc <ADC_ConfigureBoostMode+0x148>
 80046b2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80046b6:	d002      	beq.n	80046be <ADC_ConfigureBoostMode+0x10a>
 80046b8:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80046bc:	d11e      	bne.n	80046fc <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	685b      	ldr	r3, [r3, #4]
 80046c2:	0c9b      	lsrs	r3, r3, #18
 80046c4:	005b      	lsls	r3, r3, #1
 80046c6:	68fa      	ldr	r2, [r7, #12]
 80046c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80046cc:	60fb      	str	r3, [r7, #12]
        break;
 80046ce:	e016      	b.n	80046fe <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	091b      	lsrs	r3, r3, #4
 80046d4:	60fb      	str	r3, [r7, #12]
        break;
 80046d6:	e012      	b.n	80046fe <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	095b      	lsrs	r3, r3, #5
 80046dc:	60fb      	str	r3, [r7, #12]
        break;
 80046de:	e00e      	b.n	80046fe <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	099b      	lsrs	r3, r3, #6
 80046e4:	60fb      	str	r3, [r7, #12]
        break;
 80046e6:	e00a      	b.n	80046fe <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	09db      	lsrs	r3, r3, #7
 80046ec:	60fb      	str	r3, [r7, #12]
        break;
 80046ee:	e006      	b.n	80046fe <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	0a1b      	lsrs	r3, r3, #8
 80046f4:	60fb      	str	r3, [r7, #12]
        break;
 80046f6:	e002      	b.n	80046fe <ADC_ConfigureBoostMode+0x14a>
        break;
 80046f8:	bf00      	nop
 80046fa:	e000      	b.n	80046fe <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 80046fc:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 80046fe:	f7fe fb91 	bl	8002e24 <HAL_GetREVID>
 8004702:	4603      	mov	r3, r0
 8004704:	f241 0203 	movw	r2, #4099	; 0x1003
 8004708:	4293      	cmp	r3, r2
 800470a:	d815      	bhi.n	8004738 <ADC_ConfigureBoostMode+0x184>
  {
    if (freq > 20000000UL)
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	4a2b      	ldr	r2, [pc, #172]	; (80047bc <ADC_ConfigureBoostMode+0x208>)
 8004710:	4293      	cmp	r3, r2
 8004712:	d908      	bls.n	8004726 <ADC_ConfigureBoostMode+0x172>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	689a      	ldr	r2, [r3, #8]
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004722:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8004724:	e03e      	b.n	80047a4 <ADC_ConfigureBoostMode+0x1f0>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	689a      	ldr	r2, [r3, #8]
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004734:	609a      	str	r2, [r3, #8]
}
 8004736:	e035      	b.n	80047a4 <ADC_ConfigureBoostMode+0x1f0>
    freq /= 2U; /* divider by 2 for Rev.V */
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	085b      	lsrs	r3, r3, #1
 800473c:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	4a1f      	ldr	r2, [pc, #124]	; (80047c0 <ADC_ConfigureBoostMode+0x20c>)
 8004742:	4293      	cmp	r3, r2
 8004744:	d808      	bhi.n	8004758 <ADC_ConfigureBoostMode+0x1a4>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	689a      	ldr	r2, [r3, #8]
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8004754:	609a      	str	r2, [r3, #8]
}
 8004756:	e025      	b.n	80047a4 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 12500000UL)
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	4a1a      	ldr	r2, [pc, #104]	; (80047c4 <ADC_ConfigureBoostMode+0x210>)
 800475c:	4293      	cmp	r3, r2
 800475e:	d80a      	bhi.n	8004776 <ADC_ConfigureBoostMode+0x1c2>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	689b      	ldr	r3, [r3, #8]
 8004766:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004772:	609a      	str	r2, [r3, #8]
}
 8004774:	e016      	b.n	80047a4 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 25000000UL)
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	4a13      	ldr	r2, [pc, #76]	; (80047c8 <ADC_ConfigureBoostMode+0x214>)
 800477a:	4293      	cmp	r3, r2
 800477c:	d80a      	bhi.n	8004794 <ADC_ConfigureBoostMode+0x1e0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	689b      	ldr	r3, [r3, #8]
 8004784:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004790:	609a      	str	r2, [r3, #8]
}
 8004792:	e007      	b.n	80047a4 <ADC_ConfigureBoostMode+0x1f0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	689a      	ldr	r2, [r3, #8]
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 80047a2:	609a      	str	r2, [r3, #8]
}
 80047a4:	bf00      	nop
 80047a6:	3710      	adds	r7, #16
 80047a8:	46bd      	mov	sp, r7
 80047aa:	bd80      	pop	{r7, pc}
 80047ac:	40022000 	.word	0x40022000
 80047b0:	40022100 	.word	0x40022100
 80047b4:	40022300 	.word	0x40022300
 80047b8:	58026300 	.word	0x58026300
 80047bc:	01312d00 	.word	0x01312d00
 80047c0:	005f5e10 	.word	0x005f5e10
 80047c4:	00bebc20 	.word	0x00bebc20
 80047c8:	017d7840 	.word	0x017d7840

080047cc <LL_ADC_StartCalibration>:
{
 80047cc:	b480      	push	{r7}
 80047ce:	b085      	sub	sp, #20
 80047d0:	af00      	add	r7, sp, #0
 80047d2:	60f8      	str	r0, [r7, #12]
 80047d4:	60b9      	str	r1, [r7, #8]
 80047d6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CR,
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	689a      	ldr	r2, [r3, #8]
 80047dc:	4b09      	ldr	r3, [pc, #36]	; (8004804 <LL_ADC_StartCalibration+0x38>)
 80047de:	4013      	ands	r3, r2
 80047e0:	68ba      	ldr	r2, [r7, #8]
 80047e2:	f402 3180 	and.w	r1, r2, #65536	; 0x10000
 80047e6:	687a      	ldr	r2, [r7, #4]
 80047e8:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80047ec:	430a      	orrs	r2, r1
 80047ee:	4313      	orrs	r3, r2
 80047f0:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	609a      	str	r2, [r3, #8]
}
 80047f8:	bf00      	nop
 80047fa:	3714      	adds	r7, #20
 80047fc:	46bd      	mov	sp, r7
 80047fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004802:	4770      	bx	lr
 8004804:	3ffeffc0 	.word	0x3ffeffc0

08004808 <LL_ADC_IsCalibrationOnGoing>:
{
 8004808:	b480      	push	{r7}
 800480a:	b083      	sub	sp, #12
 800480c:	af00      	add	r7, sp, #0
 800480e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	689b      	ldr	r3, [r3, #8]
 8004814:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004818:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800481c:	d101      	bne.n	8004822 <LL_ADC_IsCalibrationOnGoing+0x1a>
 800481e:	2301      	movs	r3, #1
 8004820:	e000      	b.n	8004824 <LL_ADC_IsCalibrationOnGoing+0x1c>
 8004822:	2300      	movs	r3, #0
}
 8004824:	4618      	mov	r0, r3
 8004826:	370c      	adds	r7, #12
 8004828:	46bd      	mov	sp, r7
 800482a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800482e:	4770      	bx	lr

08004830 <HAL_ADCEx_Calibration_Start>:
{
 8004830:	b580      	push	{r7, lr}
 8004832:	b086      	sub	sp, #24
 8004834:	af00      	add	r7, sp, #0
 8004836:	60f8      	str	r0, [r7, #12]
 8004838:	60b9      	str	r1, [r7, #8]
 800483a:	607a      	str	r2, [r7, #4]
  __IO uint32_t wait_loop_index = 0UL;
 800483c:	2300      	movs	r3, #0
 800483e:	613b      	str	r3, [r7, #16]
  __HAL_LOCK(hadc);
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004846:	2b01      	cmp	r3, #1
 8004848:	d101      	bne.n	800484e <HAL_ADCEx_Calibration_Start+0x1e>
 800484a:	2302      	movs	r3, #2
 800484c:	e04c      	b.n	80048e8 <HAL_ADCEx_Calibration_Start+0xb8>
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	2201      	movs	r2, #1
 8004852:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  tmp_hal_status = ADC_Disable(hadc);
 8004856:	68f8      	ldr	r0, [r7, #12]
 8004858:	f7ff fe4c 	bl	80044f4 <ADC_Disable>
 800485c:	4603      	mov	r3, r0
 800485e:	75fb      	strb	r3, [r7, #23]
  if (tmp_hal_status == HAL_OK)
 8004860:	7dfb      	ldrb	r3, [r7, #23]
 8004862:	2b00      	cmp	r3, #0
 8004864:	d135      	bne.n	80048d2 <HAL_ADCEx_Calibration_Start+0xa2>
    ADC_STATE_CLR_SET(hadc->State,
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800486a:	4b21      	ldr	r3, [pc, #132]	; (80048f0 <HAL_ADCEx_Calibration_Start+0xc0>)
 800486c:	4013      	ands	r3, r2
 800486e:	f043 0202 	orr.w	r2, r3, #2
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	655a      	str	r2, [r3, #84]	; 0x54
    LL_ADC_StartCalibration(hadc->Instance, CalibrationMode, SingleDiff);
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	687a      	ldr	r2, [r7, #4]
 800487c:	68b9      	ldr	r1, [r7, #8]
 800487e:	4618      	mov	r0, r3
 8004880:	f7ff ffa4 	bl	80047cc <LL_ADC_StartCalibration>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8004884:	e014      	b.n	80048b0 <HAL_ADCEx_Calibration_Start+0x80>
      wait_loop_index++;
 8004886:	693b      	ldr	r3, [r7, #16]
 8004888:	3301      	adds	r3, #1
 800488a:	613b      	str	r3, [r7, #16]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 800488c:	693b      	ldr	r3, [r7, #16]
 800488e:	4a19      	ldr	r2, [pc, #100]	; (80048f4 <HAL_ADCEx_Calibration_Start+0xc4>)
 8004890:	4293      	cmp	r3, r2
 8004892:	d30d      	bcc.n	80048b0 <HAL_ADCEx_Calibration_Start+0x80>
        ADC_STATE_CLR_SET(hadc->State,
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004898:	f023 0312 	bic.w	r3, r3, #18
 800489c:	f043 0210 	orr.w	r2, r3, #16
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_UNLOCK(hadc);
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	2200      	movs	r2, #0
 80048a8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
        return HAL_ERROR;
 80048ac:	2301      	movs	r3, #1
 80048ae:	e01b      	b.n	80048e8 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	4618      	mov	r0, r3
 80048b6:	f7ff ffa7 	bl	8004808 <LL_ADC_IsCalibrationOnGoing>
 80048ba:	4603      	mov	r3, r0
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d1e2      	bne.n	8004886 <HAL_ADCEx_Calibration_Start+0x56>
    ADC_STATE_CLR_SET(hadc->State,
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80048c4:	f023 0303 	bic.w	r3, r3, #3
 80048c8:	f043 0201 	orr.w	r2, r3, #1
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	655a      	str	r2, [r3, #84]	; 0x54
 80048d0:	e005      	b.n	80048de <HAL_ADCEx_Calibration_Start+0xae>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80048d6:	f043 0210 	orr.w	r2, r3, #16
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	655a      	str	r2, [r3, #84]	; 0x54
  __HAL_UNLOCK(hadc);
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	2200      	movs	r2, #0
 80048e2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return tmp_hal_status;
 80048e6:	7dfb      	ldrb	r3, [r7, #23]
}
 80048e8:	4618      	mov	r0, r3
 80048ea:	3718      	adds	r7, #24
 80048ec:	46bd      	mov	sp, r7
 80048ee:	bd80      	pop	{r7, pc}
 80048f0:	ffffeefd 	.word	0xffffeefd
 80048f4:	25c3f800 	.word	0x25c3f800

080048f8 <HAL_ADCEx_InjectedConvCpltCallback>:
{
 80048f8:	b480      	push	{r7}
 80048fa:	b083      	sub	sp, #12
 80048fc:	af00      	add	r7, sp, #0
 80048fe:	6078      	str	r0, [r7, #4]
}
 8004900:	bf00      	nop
 8004902:	370c      	adds	r7, #12
 8004904:	46bd      	mov	sp, r7
 8004906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800490a:	4770      	bx	lr

0800490c <HAL_ADCEx_InjectedQueueOverflowCallback>:
{
 800490c:	b480      	push	{r7}
 800490e:	b083      	sub	sp, #12
 8004910:	af00      	add	r7, sp, #0
 8004912:	6078      	str	r0, [r7, #4]
}
 8004914:	bf00      	nop
 8004916:	370c      	adds	r7, #12
 8004918:	46bd      	mov	sp, r7
 800491a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800491e:	4770      	bx	lr

08004920 <HAL_ADCEx_LevelOutOfWindow2Callback>:
{
 8004920:	b480      	push	{r7}
 8004922:	b083      	sub	sp, #12
 8004924:	af00      	add	r7, sp, #0
 8004926:	6078      	str	r0, [r7, #4]
}
 8004928:	bf00      	nop
 800492a:	370c      	adds	r7, #12
 800492c:	46bd      	mov	sp, r7
 800492e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004932:	4770      	bx	lr

08004934 <HAL_ADCEx_LevelOutOfWindow3Callback>:
{
 8004934:	b480      	push	{r7}
 8004936:	b083      	sub	sp, #12
 8004938:	af00      	add	r7, sp, #0
 800493a:	6078      	str	r0, [r7, #4]
}
 800493c:	bf00      	nop
 800493e:	370c      	adds	r7, #12
 8004940:	46bd      	mov	sp, r7
 8004942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004946:	4770      	bx	lr

08004948 <HAL_ADCEx_EndOfSamplingCallback>:
{
 8004948:	b480      	push	{r7}
 800494a:	b083      	sub	sp, #12
 800494c:	af00      	add	r7, sp, #0
 800494e:	6078      	str	r0, [r7, #4]
}
 8004950:	bf00      	nop
 8004952:	370c      	adds	r7, #12
 8004954:	46bd      	mov	sp, r7
 8004956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800495a:	4770      	bx	lr

0800495c <__NVIC_SetPriorityGrouping>:
{
 800495c:	b480      	push	{r7}
 800495e:	b085      	sub	sp, #20
 8004960:	af00      	add	r7, sp, #0
 8004962:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	f003 0307 	and.w	r3, r3, #7
 800496a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800496c:	4b0b      	ldr	r3, [pc, #44]	; (800499c <__NVIC_SetPriorityGrouping+0x40>)
 800496e:	68db      	ldr	r3, [r3, #12]
 8004970:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004972:	68ba      	ldr	r2, [r7, #8]
 8004974:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004978:	4013      	ands	r3, r2
 800497a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004980:	68bb      	ldr	r3, [r7, #8]
 8004982:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8004984:	4b06      	ldr	r3, [pc, #24]	; (80049a0 <__NVIC_SetPriorityGrouping+0x44>)
 8004986:	4313      	orrs	r3, r2
 8004988:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800498a:	4a04      	ldr	r2, [pc, #16]	; (800499c <__NVIC_SetPriorityGrouping+0x40>)
 800498c:	68bb      	ldr	r3, [r7, #8]
 800498e:	60d3      	str	r3, [r2, #12]
}
 8004990:	bf00      	nop
 8004992:	3714      	adds	r7, #20
 8004994:	46bd      	mov	sp, r7
 8004996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800499a:	4770      	bx	lr
 800499c:	e000ed00 	.word	0xe000ed00
 80049a0:	05fa0000 	.word	0x05fa0000

080049a4 <__NVIC_GetPriorityGrouping>:
{
 80049a4:	b480      	push	{r7}
 80049a6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80049a8:	4b04      	ldr	r3, [pc, #16]	; (80049bc <__NVIC_GetPriorityGrouping+0x18>)
 80049aa:	68db      	ldr	r3, [r3, #12]
 80049ac:	0a1b      	lsrs	r3, r3, #8
 80049ae:	f003 0307 	and.w	r3, r3, #7
}
 80049b2:	4618      	mov	r0, r3
 80049b4:	46bd      	mov	sp, r7
 80049b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ba:	4770      	bx	lr
 80049bc:	e000ed00 	.word	0xe000ed00

080049c0 <__NVIC_EnableIRQ>:
{
 80049c0:	b480      	push	{r7}
 80049c2:	b083      	sub	sp, #12
 80049c4:	af00      	add	r7, sp, #0
 80049c6:	4603      	mov	r3, r0
 80049c8:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80049ca:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	db0b      	blt.n	80049ea <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80049d2:	88fb      	ldrh	r3, [r7, #6]
 80049d4:	f003 021f 	and.w	r2, r3, #31
 80049d8:	4907      	ldr	r1, [pc, #28]	; (80049f8 <__NVIC_EnableIRQ+0x38>)
 80049da:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80049de:	095b      	lsrs	r3, r3, #5
 80049e0:	2001      	movs	r0, #1
 80049e2:	fa00 f202 	lsl.w	r2, r0, r2
 80049e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80049ea:	bf00      	nop
 80049ec:	370c      	adds	r7, #12
 80049ee:	46bd      	mov	sp, r7
 80049f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049f4:	4770      	bx	lr
 80049f6:	bf00      	nop
 80049f8:	e000e100 	.word	0xe000e100

080049fc <__NVIC_SetPriority>:
{
 80049fc:	b480      	push	{r7}
 80049fe:	b083      	sub	sp, #12
 8004a00:	af00      	add	r7, sp, #0
 8004a02:	4603      	mov	r3, r0
 8004a04:	6039      	str	r1, [r7, #0]
 8004a06:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8004a08:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	db0a      	blt.n	8004a26 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004a10:	683b      	ldr	r3, [r7, #0]
 8004a12:	b2da      	uxtb	r2, r3
 8004a14:	490c      	ldr	r1, [pc, #48]	; (8004a48 <__NVIC_SetPriority+0x4c>)
 8004a16:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004a1a:	0112      	lsls	r2, r2, #4
 8004a1c:	b2d2      	uxtb	r2, r2
 8004a1e:	440b      	add	r3, r1
 8004a20:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8004a24:	e00a      	b.n	8004a3c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004a26:	683b      	ldr	r3, [r7, #0]
 8004a28:	b2da      	uxtb	r2, r3
 8004a2a:	4908      	ldr	r1, [pc, #32]	; (8004a4c <__NVIC_SetPriority+0x50>)
 8004a2c:	88fb      	ldrh	r3, [r7, #6]
 8004a2e:	f003 030f 	and.w	r3, r3, #15
 8004a32:	3b04      	subs	r3, #4
 8004a34:	0112      	lsls	r2, r2, #4
 8004a36:	b2d2      	uxtb	r2, r2
 8004a38:	440b      	add	r3, r1
 8004a3a:	761a      	strb	r2, [r3, #24]
}
 8004a3c:	bf00      	nop
 8004a3e:	370c      	adds	r7, #12
 8004a40:	46bd      	mov	sp, r7
 8004a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a46:	4770      	bx	lr
 8004a48:	e000e100 	.word	0xe000e100
 8004a4c:	e000ed00 	.word	0xe000ed00

08004a50 <NVIC_EncodePriority>:
{
 8004a50:	b480      	push	{r7}
 8004a52:	b089      	sub	sp, #36	; 0x24
 8004a54:	af00      	add	r7, sp, #0
 8004a56:	60f8      	str	r0, [r7, #12]
 8004a58:	60b9      	str	r1, [r7, #8]
 8004a5a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	f003 0307 	and.w	r3, r3, #7
 8004a62:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004a64:	69fb      	ldr	r3, [r7, #28]
 8004a66:	f1c3 0307 	rsb	r3, r3, #7
 8004a6a:	2b04      	cmp	r3, #4
 8004a6c:	bf28      	it	cs
 8004a6e:	2304      	movcs	r3, #4
 8004a70:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004a72:	69fb      	ldr	r3, [r7, #28]
 8004a74:	3304      	adds	r3, #4
 8004a76:	2b06      	cmp	r3, #6
 8004a78:	d902      	bls.n	8004a80 <NVIC_EncodePriority+0x30>
 8004a7a:	69fb      	ldr	r3, [r7, #28]
 8004a7c:	3b03      	subs	r3, #3
 8004a7e:	e000      	b.n	8004a82 <NVIC_EncodePriority+0x32>
 8004a80:	2300      	movs	r3, #0
 8004a82:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004a84:	f04f 32ff 	mov.w	r2, #4294967295
 8004a88:	69bb      	ldr	r3, [r7, #24]
 8004a8a:	fa02 f303 	lsl.w	r3, r2, r3
 8004a8e:	43da      	mvns	r2, r3
 8004a90:	68bb      	ldr	r3, [r7, #8]
 8004a92:	401a      	ands	r2, r3
 8004a94:	697b      	ldr	r3, [r7, #20]
 8004a96:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004a98:	f04f 31ff 	mov.w	r1, #4294967295
 8004a9c:	697b      	ldr	r3, [r7, #20]
 8004a9e:	fa01 f303 	lsl.w	r3, r1, r3
 8004aa2:	43d9      	mvns	r1, r3
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004aa8:	4313      	orrs	r3, r2
}
 8004aaa:	4618      	mov	r0, r3
 8004aac:	3724      	adds	r7, #36	; 0x24
 8004aae:	46bd      	mov	sp, r7
 8004ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ab4:	4770      	bx	lr
	...

08004ab8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004ab8:	b580      	push	{r7, lr}
 8004aba:	b082      	sub	sp, #8
 8004abc:	af00      	add	r7, sp, #0
 8004abe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	3b01      	subs	r3, #1
 8004ac4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004ac8:	d301      	bcc.n	8004ace <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004aca:	2301      	movs	r3, #1
 8004acc:	e00f      	b.n	8004aee <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004ace:	4a0a      	ldr	r2, [pc, #40]	; (8004af8 <SysTick_Config+0x40>)
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	3b01      	subs	r3, #1
 8004ad4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004ad6:	210f      	movs	r1, #15
 8004ad8:	f04f 30ff 	mov.w	r0, #4294967295
 8004adc:	f7ff ff8e 	bl	80049fc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004ae0:	4b05      	ldr	r3, [pc, #20]	; (8004af8 <SysTick_Config+0x40>)
 8004ae2:	2200      	movs	r2, #0
 8004ae4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004ae6:	4b04      	ldr	r3, [pc, #16]	; (8004af8 <SysTick_Config+0x40>)
 8004ae8:	2207      	movs	r2, #7
 8004aea:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004aec:	2300      	movs	r3, #0
}
 8004aee:	4618      	mov	r0, r3
 8004af0:	3708      	adds	r7, #8
 8004af2:	46bd      	mov	sp, r7
 8004af4:	bd80      	pop	{r7, pc}
 8004af6:	bf00      	nop
 8004af8:	e000e010 	.word	0xe000e010

08004afc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004afc:	b580      	push	{r7, lr}
 8004afe:	b082      	sub	sp, #8
 8004b00:	af00      	add	r7, sp, #0
 8004b02:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004b04:	6878      	ldr	r0, [r7, #4]
 8004b06:	f7ff ff29 	bl	800495c <__NVIC_SetPriorityGrouping>
}
 8004b0a:	bf00      	nop
 8004b0c:	3708      	adds	r7, #8
 8004b0e:	46bd      	mov	sp, r7
 8004b10:	bd80      	pop	{r7, pc}

08004b12 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004b12:	b580      	push	{r7, lr}
 8004b14:	b086      	sub	sp, #24
 8004b16:	af00      	add	r7, sp, #0
 8004b18:	4603      	mov	r3, r0
 8004b1a:	60b9      	str	r1, [r7, #8]
 8004b1c:	607a      	str	r2, [r7, #4]
 8004b1e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004b20:	f7ff ff40 	bl	80049a4 <__NVIC_GetPriorityGrouping>
 8004b24:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004b26:	687a      	ldr	r2, [r7, #4]
 8004b28:	68b9      	ldr	r1, [r7, #8]
 8004b2a:	6978      	ldr	r0, [r7, #20]
 8004b2c:	f7ff ff90 	bl	8004a50 <NVIC_EncodePriority>
 8004b30:	4602      	mov	r2, r0
 8004b32:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004b36:	4611      	mov	r1, r2
 8004b38:	4618      	mov	r0, r3
 8004b3a:	f7ff ff5f 	bl	80049fc <__NVIC_SetPriority>
}
 8004b3e:	bf00      	nop
 8004b40:	3718      	adds	r7, #24
 8004b42:	46bd      	mov	sp, r7
 8004b44:	bd80      	pop	{r7, pc}

08004b46 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004b46:	b580      	push	{r7, lr}
 8004b48:	b082      	sub	sp, #8
 8004b4a:	af00      	add	r7, sp, #0
 8004b4c:	4603      	mov	r3, r0
 8004b4e:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004b50:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004b54:	4618      	mov	r0, r3
 8004b56:	f7ff ff33 	bl	80049c0 <__NVIC_EnableIRQ>
}
 8004b5a:	bf00      	nop
 8004b5c:	3708      	adds	r7, #8
 8004b5e:	46bd      	mov	sp, r7
 8004b60:	bd80      	pop	{r7, pc}

08004b62 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004b62:	b580      	push	{r7, lr}
 8004b64:	b082      	sub	sp, #8
 8004b66:	af00      	add	r7, sp, #0
 8004b68:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004b6a:	6878      	ldr	r0, [r7, #4]
 8004b6c:	f7ff ffa4 	bl	8004ab8 <SysTick_Config>
 8004b70:	4603      	mov	r3, r0
}
 8004b72:	4618      	mov	r0, r3
 8004b74:	3708      	adds	r7, #8
 8004b76:	46bd      	mov	sp, r7
 8004b78:	bd80      	pop	{r7, pc}

08004b7a <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8004b7a:	b580      	push	{r7, lr}
 8004b7c:	b082      	sub	sp, #8
 8004b7e:	af00      	add	r7, sp, #0
 8004b80:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d101      	bne.n	8004b8c <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8004b88:	2301      	movs	r3, #1
 8004b8a:	e014      	b.n	8004bb6 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	791b      	ldrb	r3, [r3, #4]
 8004b90:	b2db      	uxtb	r3, r3
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d105      	bne.n	8004ba2 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	2200      	movs	r2, #0
 8004b9a:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8004b9c:	6878      	ldr	r0, [r7, #4]
 8004b9e:	f7fd fab1 	bl	8002104 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	2202      	movs	r2, #2
 8004ba6:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	2200      	movs	r2, #0
 8004bac:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	2201      	movs	r2, #1
 8004bb2:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8004bb4:	2300      	movs	r3, #0
}
 8004bb6:	4618      	mov	r0, r3
 8004bb8:	3708      	adds	r7, #8
 8004bba:	46bd      	mov	sp, r7
 8004bbc:	bd80      	pop	{r7, pc}

08004bbe <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8004bbe:	b480      	push	{r7}
 8004bc0:	b083      	sub	sp, #12
 8004bc2:	af00      	add	r7, sp, #0
 8004bc4:	6078      	str	r0, [r7, #4]
 8004bc6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	795b      	ldrb	r3, [r3, #5]
 8004bcc:	2b01      	cmp	r3, #1
 8004bce:	d101      	bne.n	8004bd4 <HAL_DAC_Start+0x16>
 8004bd0:	2302      	movs	r3, #2
 8004bd2:	e040      	b.n	8004c56 <HAL_DAC_Start+0x98>
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	2201      	movs	r2, #1
 8004bd8:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	2202      	movs	r2, #2
 8004bde:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	6819      	ldr	r1, [r3, #0]
 8004be6:	683b      	ldr	r3, [r7, #0]
 8004be8:	f003 0310 	and.w	r3, r3, #16
 8004bec:	2201      	movs	r2, #1
 8004bee:	409a      	lsls	r2, r3
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	430a      	orrs	r2, r1
 8004bf6:	601a      	str	r2, [r3, #0]

  if (Channel == DAC_CHANNEL_1)
 8004bf8:	683b      	ldr	r3, [r7, #0]
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d10f      	bne.n	8004c1e <HAL_DAC_Start+0x60>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8004c08:	2b02      	cmp	r3, #2
 8004c0a:	d11d      	bne.n	8004c48 <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	685a      	ldr	r2, [r3, #4]
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	f042 0201 	orr.w	r2, r2, #1
 8004c1a:	605a      	str	r2, [r3, #4]
 8004c1c:	e014      	b.n	8004c48 <HAL_DAC_Start+0x8a>
  }

  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	f403 1278 	and.w	r2, r3, #4063232	; 0x3e0000
 8004c28:	683b      	ldr	r3, [r7, #0]
 8004c2a:	f003 0310 	and.w	r3, r3, #16
 8004c2e:	2102      	movs	r1, #2
 8004c30:	fa01 f303 	lsl.w	r3, r1, r3
 8004c34:	429a      	cmp	r2, r3
 8004c36:	d107      	bne.n	8004c48 <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	685a      	ldr	r2, [r3, #4]
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	f042 0202 	orr.w	r2, r2, #2
 8004c46:	605a      	str	r2, [r3, #4]
    }
  }


  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	2201      	movs	r2, #1
 8004c4c:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	2200      	movs	r2, #0
 8004c52:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8004c54:	2300      	movs	r3, #0
}
 8004c56:	4618      	mov	r0, r3
 8004c58:	370c      	adds	r7, #12
 8004c5a:	46bd      	mov	sp, r7
 8004c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c60:	4770      	bx	lr

08004c62 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 8004c62:	b480      	push	{r7}
 8004c64:	b087      	sub	sp, #28
 8004c66:	af00      	add	r7, sp, #0
 8004c68:	60f8      	str	r0, [r7, #12]
 8004c6a:	60b9      	str	r1, [r7, #8]
 8004c6c:	607a      	str	r2, [r7, #4]
 8004c6e:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0UL;
 8004c70:	2300      	movs	r3, #0
 8004c72:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 8004c7a:	68bb      	ldr	r3, [r7, #8]
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d105      	bne.n	8004c8c <HAL_DAC_SetValue+0x2a>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 8004c80:	697a      	ldr	r2, [r7, #20]
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	4413      	add	r3, r2
 8004c86:	3308      	adds	r3, #8
 8004c88:	617b      	str	r3, [r7, #20]
 8004c8a:	e004      	b.n	8004c96 <HAL_DAC_SetValue+0x34>
  }

  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 8004c8c:	697a      	ldr	r2, [r7, #20]
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	4413      	add	r3, r2
 8004c92:	3314      	adds	r3, #20
 8004c94:	617b      	str	r3, [r7, #20]
  }


  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8004c96:	697b      	ldr	r3, [r7, #20]
 8004c98:	461a      	mov	r2, r3
 8004c9a:	683b      	ldr	r3, [r7, #0]
 8004c9c:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8004c9e:	2300      	movs	r3, #0
}
 8004ca0:	4618      	mov	r0, r3
 8004ca2:	371c      	adds	r7, #28
 8004ca4:	46bd      	mov	sp, r7
 8004ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004caa:	4770      	bx	lr

08004cac <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8004cac:	b580      	push	{r7, lr}
 8004cae:	b088      	sub	sp, #32
 8004cb0:	af00      	add	r7, sp, #0
 8004cb2:	60f8      	str	r0, [r7, #12]
 8004cb4:	60b9      	str	r1, [r7, #8]
 8004cb6:	607a      	str	r2, [r7, #4]
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	795b      	ldrb	r3, [r3, #5]
 8004cbc:	2b01      	cmp	r3, #1
 8004cbe:	d101      	bne.n	8004cc4 <HAL_DAC_ConfigChannel+0x18>
 8004cc0:	2302      	movs	r3, #2
 8004cc2:	e12a      	b.n	8004f1a <HAL_DAC_ConfigChannel+0x26e>
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	2201      	movs	r2, #1
 8004cc8:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	2202      	movs	r2, #2
 8004cce:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8004cd0:	68bb      	ldr	r3, [r7, #8]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	2b04      	cmp	r3, #4
 8004cd6:	f040 8081 	bne.w	8004ddc <HAL_DAC_ConfigChannel+0x130>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8004cda:	f7fe f873 	bl	8002dc4 <HAL_GetTick>
 8004cde:	61b8      	str	r0, [r7, #24]

    if (Channel == DAC_CHANNEL_1)
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d140      	bne.n	8004d68 <HAL_DAC_ConfigChannel+0xbc>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8004ce6:	e018      	b.n	8004d1a <HAL_DAC_ConfigChannel+0x6e>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8004ce8:	f7fe f86c 	bl	8002dc4 <HAL_GetTick>
 8004cec:	4602      	mov	r2, r0
 8004cee:	69bb      	ldr	r3, [r7, #24]
 8004cf0:	1ad3      	subs	r3, r2, r3
 8004cf2:	2b01      	cmp	r3, #1
 8004cf4:	d911      	bls.n	8004d1a <HAL_DAC_ConfigChannel+0x6e>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004cfc:	4b89      	ldr	r3, [pc, #548]	; (8004f24 <HAL_DAC_ConfigChannel+0x278>)
 8004cfe:	4013      	ands	r3, r2
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d00a      	beq.n	8004d1a <HAL_DAC_ConfigChannel+0x6e>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	691b      	ldr	r3, [r3, #16]
 8004d08:	f043 0208 	orr.w	r2, r3, #8
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	2203      	movs	r2, #3
 8004d14:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8004d16:	2303      	movs	r3, #3
 8004d18:	e0ff      	b.n	8004f1a <HAL_DAC_ConfigChannel+0x26e>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004d20:	4b80      	ldr	r3, [pc, #512]	; (8004f24 <HAL_DAC_ConfigChannel+0x278>)
 8004d22:	4013      	ands	r3, r2
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d1df      	bne.n	8004ce8 <HAL_DAC_ConfigChannel+0x3c>
          }
        }
      }
      HAL_Delay(1);
 8004d28:	2001      	movs	r0, #1
 8004d2a:	f7fe f857 	bl	8002ddc <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	68ba      	ldr	r2, [r7, #8]
 8004d34:	6992      	ldr	r2, [r2, #24]
 8004d36:	641a      	str	r2, [r3, #64]	; 0x40
 8004d38:	e023      	b.n	8004d82 <HAL_DAC_ConfigChannel+0xd6>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8004d3a:	f7fe f843 	bl	8002dc4 <HAL_GetTick>
 8004d3e:	4602      	mov	r2, r0
 8004d40:	69bb      	ldr	r3, [r7, #24]
 8004d42:	1ad3      	subs	r3, r2, r3
 8004d44:	2b01      	cmp	r3, #1
 8004d46:	d90f      	bls.n	8004d68 <HAL_DAC_ConfigChannel+0xbc>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	da0a      	bge.n	8004d68 <HAL_DAC_ConfigChannel+0xbc>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	691b      	ldr	r3, [r3, #16]
 8004d56:	f043 0208 	orr.w	r2, r3, #8
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	2203      	movs	r2, #3
 8004d62:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8004d64:	2303      	movs	r3, #3
 8004d66:	e0d8      	b.n	8004f1a <HAL_DAC_ConfigChannel+0x26e>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	dbe3      	blt.n	8004d3a <HAL_DAC_ConfigChannel+0x8e>
          }
        }
      }
      HAL_Delay(1U);
 8004d72:	2001      	movs	r0, #1
 8004d74:	f7fe f832 	bl	8002ddc <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	68ba      	ldr	r2, [r7, #8]
 8004d7e:	6992      	ldr	r2, [r2, #24]
 8004d80:	645a      	str	r2, [r3, #68]	; 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	f003 0310 	and.w	r3, r3, #16
 8004d8e:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8004d92:	fa01 f303 	lsl.w	r3, r1, r3
 8004d96:	43db      	mvns	r3, r3
 8004d98:	ea02 0103 	and.w	r1, r2, r3
 8004d9c:	68bb      	ldr	r3, [r7, #8]
 8004d9e:	69da      	ldr	r2, [r3, #28]
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	f003 0310 	and.w	r3, r3, #16
 8004da6:	409a      	lsls	r2, r3
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	430a      	orrs	r2, r1
 8004dae:	649a      	str	r2, [r3, #72]	; 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	f003 0310 	and.w	r3, r3, #16
 8004dbc:	21ff      	movs	r1, #255	; 0xff
 8004dbe:	fa01 f303 	lsl.w	r3, r1, r3
 8004dc2:	43db      	mvns	r3, r3
 8004dc4:	ea02 0103 	and.w	r1, r2, r3
 8004dc8:	68bb      	ldr	r3, [r7, #8]
 8004dca:	6a1a      	ldr	r2, [r3, #32]
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	f003 0310 	and.w	r3, r3, #16
 8004dd2:	409a      	lsls	r2, r3
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	430a      	orrs	r2, r1
 8004dda:	64da      	str	r2, [r3, #76]	; 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8004ddc:	68bb      	ldr	r3, [r7, #8]
 8004dde:	691b      	ldr	r3, [r3, #16]
 8004de0:	2b01      	cmp	r3, #1
 8004de2:	d11d      	bne.n	8004e20 <HAL_DAC_ConfigChannel+0x174>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004dea:	617b      	str	r3, [r7, #20]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	f003 0310 	and.w	r3, r3, #16
 8004df2:	221f      	movs	r2, #31
 8004df4:	fa02 f303 	lsl.w	r3, r2, r3
 8004df8:	43db      	mvns	r3, r3
 8004dfa:	697a      	ldr	r2, [r7, #20]
 8004dfc:	4013      	ands	r3, r2
 8004dfe:	617b      	str	r3, [r7, #20]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8004e00:	68bb      	ldr	r3, [r7, #8]
 8004e02:	695b      	ldr	r3, [r3, #20]
 8004e04:	613b      	str	r3, [r7, #16]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	f003 0310 	and.w	r3, r3, #16
 8004e0c:	693a      	ldr	r2, [r7, #16]
 8004e0e:	fa02 f303 	lsl.w	r3, r2, r3
 8004e12:	697a      	ldr	r2, [r7, #20]
 8004e14:	4313      	orrs	r3, r2
 8004e16:	617b      	str	r3, [r7, #20]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	697a      	ldr	r2, [r7, #20]
 8004e1e:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e26:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	f003 0310 	and.w	r3, r3, #16
 8004e2e:	2207      	movs	r2, #7
 8004e30:	fa02 f303 	lsl.w	r3, r2, r3
 8004e34:	43db      	mvns	r3, r3
 8004e36:	697a      	ldr	r2, [r7, #20]
 8004e38:	4013      	ands	r3, r2
 8004e3a:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 8004e3c:	68bb      	ldr	r3, [r7, #8]
 8004e3e:	68db      	ldr	r3, [r3, #12]
 8004e40:	2b01      	cmp	r3, #1
 8004e42:	d102      	bne.n	8004e4a <HAL_DAC_ConfigChannel+0x19e>
  {
    connectOnChip = 0x00000000UL;
 8004e44:	2300      	movs	r3, #0
 8004e46:	61fb      	str	r3, [r7, #28]
 8004e48:	e00f      	b.n	8004e6a <HAL_DAC_ConfigChannel+0x1be>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 8004e4a:	68bb      	ldr	r3, [r7, #8]
 8004e4c:	68db      	ldr	r3, [r3, #12]
 8004e4e:	2b02      	cmp	r3, #2
 8004e50:	d102      	bne.n	8004e58 <HAL_DAC_ConfigChannel+0x1ac>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 8004e52:	2301      	movs	r3, #1
 8004e54:	61fb      	str	r3, [r7, #28]
 8004e56:	e008      	b.n	8004e6a <HAL_DAC_ConfigChannel+0x1be>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 8004e58:	68bb      	ldr	r3, [r7, #8]
 8004e5a:	689b      	ldr	r3, [r3, #8]
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d102      	bne.n	8004e66 <HAL_DAC_ConfigChannel+0x1ba>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 8004e60:	2301      	movs	r3, #1
 8004e62:	61fb      	str	r3, [r7, #28]
 8004e64:	e001      	b.n	8004e6a <HAL_DAC_ConfigChannel+0x1be>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 8004e66:	2300      	movs	r3, #0
 8004e68:	61fb      	str	r3, [r7, #28]
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 8004e6a:	68bb      	ldr	r3, [r7, #8]
 8004e6c:	681a      	ldr	r2, [r3, #0]
 8004e6e:	68bb      	ldr	r3, [r7, #8]
 8004e70:	689b      	ldr	r3, [r3, #8]
 8004e72:	4313      	orrs	r3, r2
 8004e74:	69fa      	ldr	r2, [r7, #28]
 8004e76:	4313      	orrs	r3, r2
 8004e78:	613b      	str	r3, [r7, #16]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	f003 0310 	and.w	r3, r3, #16
 8004e80:	693a      	ldr	r2, [r7, #16]
 8004e82:	fa02 f303 	lsl.w	r3, r2, r3
 8004e86:	697a      	ldr	r2, [r7, #20]
 8004e88:	4313      	orrs	r3, r2
 8004e8a:	617b      	str	r3, [r7, #20]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	697a      	ldr	r2, [r7, #20]
 8004e92:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	6819      	ldr	r1, [r3, #0]
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	f003 0310 	and.w	r3, r3, #16
 8004ea0:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8004ea4:	fa02 f303 	lsl.w	r3, r2, r3
 8004ea8:	43da      	mvns	r2, r3
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	400a      	ands	r2, r1
 8004eb0:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	617b      	str	r3, [r7, #20]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	f003 0310 	and.w	r3, r3, #16
 8004ec0:	f640 72fe 	movw	r2, #4094	; 0xffe
 8004ec4:	fa02 f303 	lsl.w	r3, r2, r3
 8004ec8:	43db      	mvns	r3, r3
 8004eca:	697a      	ldr	r2, [r7, #20]
 8004ecc:	4013      	ands	r3, r2
 8004ece:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8004ed0:	68bb      	ldr	r3, [r7, #8]
 8004ed2:	685b      	ldr	r3, [r3, #4]
 8004ed4:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	f003 0310 	and.w	r3, r3, #16
 8004edc:	693a      	ldr	r2, [r7, #16]
 8004ede:	fa02 f303 	lsl.w	r3, r2, r3
 8004ee2:	697a      	ldr	r2, [r7, #20]
 8004ee4:	4313      	orrs	r3, r2
 8004ee6:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	697a      	ldr	r2, [r7, #20]
 8004eee:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	6819      	ldr	r1, [r3, #0]
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	f003 0310 	and.w	r3, r3, #16
 8004efc:	22c0      	movs	r2, #192	; 0xc0
 8004efe:	fa02 f303 	lsl.w	r3, r2, r3
 8004f02:	43da      	mvns	r2, r3
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	400a      	ands	r2, r1
 8004f0a:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	2201      	movs	r2, #1
 8004f10:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	2200      	movs	r2, #0
 8004f16:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8004f18:	2300      	movs	r3, #0
}
 8004f1a:	4618      	mov	r0, r3
 8004f1c:	3720      	adds	r7, #32
 8004f1e:	46bd      	mov	sp, r7
 8004f20:	bd80      	pop	{r7, pc}
 8004f22:	bf00      	nop
 8004f24:	20008000 	.word	0x20008000

08004f28 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8004f28:	b580      	push	{r7, lr}
 8004f2a:	b084      	sub	sp, #16
 8004f2c:	af00      	add	r7, sp, #0
 8004f2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d101      	bne.n	8004f3a <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8004f36:	2301      	movs	r3, #1
 8004f38:	e0cf      	b.n	80050da <HAL_ETH_Init+0x1b2>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d106      	bne.n	8004f52 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	2223      	movs	r2, #35	; 0x23
 8004f48:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8004f4c:	6878      	ldr	r0, [r7, #4]
 8004f4e:	f009 f8db 	bl	800e108 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004f52:	4b64      	ldr	r3, [pc, #400]	; (80050e4 <HAL_ETH_Init+0x1bc>)
 8004f54:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004f58:	4a62      	ldr	r2, [pc, #392]	; (80050e4 <HAL_ETH_Init+0x1bc>)
 8004f5a:	f043 0302 	orr.w	r3, r3, #2
 8004f5e:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8004f62:	4b60      	ldr	r3, [pc, #384]	; (80050e4 <HAL_ETH_Init+0x1bc>)
 8004f64:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8004f68:	f003 0302 	and.w	r3, r3, #2
 8004f6c:	60bb      	str	r3, [r7, #8]
 8004f6e:	68bb      	ldr	r3, [r7, #8]

  if (heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	7a1b      	ldrb	r3, [r3, #8]
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d103      	bne.n	8004f80 <HAL_ETH_Init+0x58>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 8004f78:	2000      	movs	r0, #0
 8004f7a:	f7fd ff5f 	bl	8002e3c <HAL_SYSCFG_ETHInterfaceSelect>
 8004f7e:	e003      	b.n	8004f88 <HAL_ETH_Init+0x60>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 8004f80:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8004f84:	f7fd ff5a 	bl	8002e3c <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Dummy read to sync with ETH */
  (void)SYSCFG->PMCR;
 8004f88:	4b57      	ldr	r3, [pc, #348]	; (80050e8 <HAL_ETH_Init+0x1c0>)
 8004f8a:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	687a      	ldr	r2, [r7, #4]
 8004f98:	6812      	ldr	r2, [r2, #0]
 8004f9a:	f043 0301 	orr.w	r3, r3, #1
 8004f9e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004fa2:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004fa4:	f7fd ff0e 	bl	8002dc4 <HAL_GetTick>
 8004fa8:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8004faa:	e011      	b.n	8004fd0 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8004fac:	f7fd ff0a 	bl	8002dc4 <HAL_GetTick>
 8004fb0:	4602      	mov	r2, r0
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	1ad3      	subs	r3, r2, r3
 8004fb6:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8004fba:	d909      	bls.n	8004fd0 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	2204      	movs	r2, #4
 8004fc0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	22e0      	movs	r2, #224	; 0xe0
 8004fc8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 8004fcc:	2301      	movs	r3, #1
 8004fce:	e084      	b.n	80050da <HAL_ETH_Init+0x1b2>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	f003 0301 	and.w	r3, r3, #1
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d1e4      	bne.n	8004fac <HAL_ETH_Init+0x84>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  HAL_ETH_SetMDIOClockRange(heth);
 8004fe2:	6878      	ldr	r0, [r7, #4]
 8004fe4:	f000 fcd4 	bl	8005990 <HAL_ETH_SetMDIOClockRange>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 8004fe8:	f004 fba4 	bl	8009734 <HAL_RCC_GetHCLKFreq>
 8004fec:	4603      	mov	r3, r0
 8004fee:	4a3f      	ldr	r2, [pc, #252]	; (80050ec <HAL_ETH_Init+0x1c4>)
 8004ff0:	fba2 2303 	umull	r2, r3, r2, r3
 8004ff4:	0c9a      	lsrs	r2, r3, #18
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	3a01      	subs	r2, #1
 8004ffc:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8005000:	6878      	ldr	r0, [r7, #4]
 8005002:	f000 febf 	bl	8005d84 <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800500e:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 8005012:	f423 13e0 	bic.w	r3, r3, #1835008	; 0x1c0000
 8005016:	687a      	ldr	r2, [r7, #4]
 8005018:	6812      	ldr	r2, [r2, #0]
 800501a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800501e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8005022:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	695b      	ldr	r3, [r3, #20]
 800502a:	f003 0303 	and.w	r3, r3, #3
 800502e:	2b00      	cmp	r3, #0
 8005030:	d009      	beq.n	8005046 <HAL_ETH_Init+0x11e>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	2201      	movs	r2, #1
 8005036:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	22e0      	movs	r2, #224	; 0xe0
 800503e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    /* Return Error */
    return HAL_ERROR;
 8005042:	2301      	movs	r3, #1
 8005044:	e049      	b.n	80050da <HAL_ETH_Init+0x1b2>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800504e:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 8005052:	4b27      	ldr	r3, [pc, #156]	; (80050f0 <HAL_ETH_Init+0x1c8>)
 8005054:	4013      	ands	r3, r2
 8005056:	687a      	ldr	r2, [r7, #4]
 8005058:	6952      	ldr	r2, [r2, #20]
 800505a:	0051      	lsls	r1, r2, #1
 800505c:	687a      	ldr	r2, [r7, #4]
 800505e:	6812      	ldr	r2, [r2, #0]
 8005060:	430b      	orrs	r3, r1
 8005062:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8005066:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 800506a:	6878      	ldr	r0, [r7, #4]
 800506c:	f000 ff27 	bl	8005ebe <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8005070:	6878      	ldr	r0, [r7, #4]
 8005072:	f000 ff6d 	bl	8005f50 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	685b      	ldr	r3, [r3, #4]
 800507a:	3305      	adds	r3, #5
 800507c:	781b      	ldrb	r3, [r3, #0]
 800507e:	021a      	lsls	r2, r3, #8
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	685b      	ldr	r3, [r3, #4]
 8005084:	3304      	adds	r3, #4
 8005086:	781b      	ldrb	r3, [r3, #0]
 8005088:	4619      	mov	r1, r3
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	430a      	orrs	r2, r1
 8005090:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	685b      	ldr	r3, [r3, #4]
 8005098:	3303      	adds	r3, #3
 800509a:	781b      	ldrb	r3, [r3, #0]
 800509c:	061a      	lsls	r2, r3, #24
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	685b      	ldr	r3, [r3, #4]
 80050a2:	3302      	adds	r3, #2
 80050a4:	781b      	ldrb	r3, [r3, #0]
 80050a6:	041b      	lsls	r3, r3, #16
 80050a8:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	685b      	ldr	r3, [r3, #4]
 80050ae:	3301      	adds	r3, #1
 80050b0:	781b      	ldrb	r3, [r3, #0]
 80050b2:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80050b4:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	685b      	ldr	r3, [r3, #4]
 80050ba:	781b      	ldrb	r3, [r3, #0]
 80050bc:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 80050c2:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80050c4:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	2200      	movs	r2, #0
 80050cc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	2210      	movs	r2, #16
 80050d4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80050d8:	2300      	movs	r3, #0
}
 80050da:	4618      	mov	r0, r3
 80050dc:	3710      	adds	r7, #16
 80050de:	46bd      	mov	sp, r7
 80050e0:	bd80      	pop	{r7, pc}
 80050e2:	bf00      	nop
 80050e4:	58024400 	.word	0x58024400
 80050e8:	58000400 	.word	0x58000400
 80050ec:	431bde83 	.word	0x431bde83
 80050f0:	ffff8001 	.word	0xffff8001

080050f4 <HAL_ETH_Start>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start(ETH_HandleTypeDef *heth)
{
 80050f4:	b580      	push	{r7, lr}
 80050f6:	b082      	sub	sp, #8
 80050f8:	af00      	add	r7, sp, #0
 80050fa:	6078      	str	r0, [r7, #4]
  if (heth->gState == HAL_ETH_STATE_READY)
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005102:	2b10      	cmp	r3, #16
 8005104:	d153      	bne.n	80051ae <HAL_ETH_Start+0xba>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	2223      	movs	r2, #35	; 0x23
 800510a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Set nombre of descriptors to build */
    heth->RxDescList.RxBuildDescCnt = ETH_RX_DESC_CNT;
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	2204      	movs	r2, #4
 8005112:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Build all descriptors */
    ETH_UpdateDescriptor(heth);
 8005114:	6878      	ldr	r0, [r7, #4]
 8005116:	f000 f936 	bl	8005386 <ETH_UpdateDescriptor>

    /* Enable the MAC transmission */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	681a      	ldr	r2, [r3, #0]
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	f042 0202 	orr.w	r2, r2, #2
 8005128:	601a      	str	r2, [r3, #0]

    /* Enable the MAC reception */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	681a      	ldr	r2, [r3, #0]
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	f042 0201 	orr.w	r2, r2, #1
 8005138:	601a      	str	r2, [r3, #0]

    /* Set the Flush Transmit FIFO bit */
    SET_BIT(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_FTQ);
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	; 0xd00
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	f042 0201 	orr.w	r2, r2, #1
 800514a:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

    /* Enable the DMA transmission */
    SET_BIT(heth->Instance->DMACTCR, ETH_DMACTCR_ST);
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005156:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 800515a:	687a      	ldr	r2, [r7, #4]
 800515c:	6812      	ldr	r2, [r2, #0]
 800515e:	f043 0301 	orr.w	r3, r3, #1
 8005162:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8005166:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104

    /* Enable the DMA reception */
    SET_BIT(heth->Instance->DMACRCR, ETH_DMACRCR_SR);
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005172:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 8005176:	687a      	ldr	r2, [r7, #4]
 8005178:	6812      	ldr	r2, [r2, #0]
 800517a:	f043 0301 	orr.w	r3, r3, #1
 800517e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8005182:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108

    /* Clear Tx and Rx process stopped flags */
    heth->Instance->DMACSR |= (ETH_DMACSR_TPS | ETH_DMACSR_RPS);
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800518e:	f8d3 3160 	ldr.w	r3, [r3, #352]	; 0x160
 8005192:	687a      	ldr	r2, [r7, #4]
 8005194:	6812      	ldr	r2, [r2, #0]
 8005196:	f443 7381 	orr.w	r3, r3, #258	; 0x102
 800519a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800519e:	f8c2 3160 	str.w	r3, [r2, #352]	; 0x160

    heth->gState = HAL_ETH_STATE_STARTED;
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	2223      	movs	r2, #35	; 0x23
 80051a6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 80051aa:	2300      	movs	r3, #0
 80051ac:	e000      	b.n	80051b0 <HAL_ETH_Start+0xbc>
  }
  else
  {
    return HAL_ERROR;
 80051ae:	2301      	movs	r3, #1
  }
}
 80051b0:	4618      	mov	r0, r3
 80051b2:	3708      	adds	r7, #8
 80051b4:	46bd      	mov	sp, r7
 80051b6:	bd80      	pop	{r7, pc}

080051b8 <HAL_ETH_Stop>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop(ETH_HandleTypeDef *heth)
{
 80051b8:	b480      	push	{r7}
 80051ba:	b083      	sub	sp, #12
 80051bc:	af00      	add	r7, sp, #0
 80051be:	6078      	str	r0, [r7, #4]
  if (heth->gState == HAL_ETH_STATE_STARTED)
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80051c6:	2b23      	cmp	r3, #35	; 0x23
 80051c8:	d13f      	bne.n	800524a <HAL_ETH_Stop+0x92>
  {
    /* Set the ETH peripheral state to BUSY */
    heth->gState = HAL_ETH_STATE_BUSY;
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	2223      	movs	r2, #35	; 0x23
 80051ce:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    /* Disable the DMA transmission */
    CLEAR_BIT(heth->Instance->DMACTCR, ETH_DMACTCR_ST);
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80051da:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 80051de:	687a      	ldr	r2, [r7, #4]
 80051e0:	6812      	ldr	r2, [r2, #0]
 80051e2:	f023 0301 	bic.w	r3, r3, #1
 80051e6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80051ea:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104

    /* Disable the DMA reception */
    CLEAR_BIT(heth->Instance->DMACRCR, ETH_DMACRCR_SR);
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80051f6:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 80051fa:	687a      	ldr	r2, [r7, #4]
 80051fc:	6812      	ldr	r2, [r2, #0]
 80051fe:	f023 0301 	bic.w	r3, r3, #1
 8005202:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8005206:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108

    /* Disable the MAC reception */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	681a      	ldr	r2, [r3, #0]
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	f022 0201 	bic.w	r2, r2, #1
 8005218:	601a      	str	r2, [r3, #0]

    /* Set the Flush Transmit FIFO bit */
    SET_BIT(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_FTQ);
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	; 0xd00
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	f042 0201 	orr.w	r2, r2, #1
 800522a:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

    /* Disable the MAC transmission */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	681a      	ldr	r2, [r3, #0]
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	f022 0202 	bic.w	r2, r2, #2
 800523c:	601a      	str	r2, [r3, #0]

    heth->gState = HAL_ETH_STATE_READY;
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	2210      	movs	r2, #16
 8005242:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Return function status */
    return HAL_OK;
 8005246:	2300      	movs	r3, #0
 8005248:	e000      	b.n	800524c <HAL_ETH_Stop+0x94>
  }
  else
  {
    return HAL_ERROR;
 800524a:	2301      	movs	r3, #1
  }
}
 800524c:	4618      	mov	r0, r3
 800524e:	370c      	adds	r7, #12
 8005250:	46bd      	mov	sp, r7
 8005252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005256:	4770      	bx	lr

08005258 <HAL_ETH_Transmit>:
  * @param  pTxConfig: Hold the configuration of packet to be transmitted
  * @param  Timeout: timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Transmit(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig, uint32_t Timeout)
{
 8005258:	b580      	push	{r7, lr}
 800525a:	b086      	sub	sp, #24
 800525c:	af00      	add	r7, sp, #0
 800525e:	60f8      	str	r0, [r7, #12]
 8005260:	60b9      	str	r1, [r7, #8]
 8005262:	607a      	str	r2, [r7, #4]
  uint32_t tickstart;
  ETH_DMADescTypeDef *dmatxdesc;

  if (pTxConfig == NULL)
 8005264:	68bb      	ldr	r3, [r7, #8]
 8005266:	2b00      	cmp	r3, #0
 8005268:	d109      	bne.n	800527e <HAL_ETH_Transmit+0x26>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005270:	f043 0201 	orr.w	r2, r3, #1
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    return HAL_ERROR;
 800527a:	2301      	movs	r3, #1
 800527c:	e07f      	b.n	800537e <HAL_ETH_Transmit+0x126>
  }

  if (heth->gState == HAL_ETH_STATE_STARTED)
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005284:	2b23      	cmp	r3, #35	; 0x23
 8005286:	d179      	bne.n	800537c <HAL_ETH_Transmit+0x124>
  {
    /* Config DMA Tx descriptor by Tx Packet info */
    if (ETH_Prepare_Tx_Descriptors(heth, pTxConfig, 0) != HAL_ETH_ERROR_NONE)
 8005288:	2200      	movs	r2, #0
 800528a:	68b9      	ldr	r1, [r7, #8]
 800528c:	68f8      	ldr	r0, [r7, #12]
 800528e:	f000 febd 	bl	800600c <ETH_Prepare_Tx_Descriptors>
 8005292:	4603      	mov	r3, r0
 8005294:	2b00      	cmp	r3, #0
 8005296:	d009      	beq.n	80052ac <HAL_ETH_Transmit+0x54>
    {
      /* Set the ETH error code */
      heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800529e:	f043 0202 	orr.w	r2, r3, #2
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      return HAL_ERROR;
 80052a8:	2301      	movs	r3, #1
 80052aa:	e068      	b.n	800537e <HAL_ETH_Transmit+0x126>
  __ASM volatile ("dsb 0xF":::"memory");
 80052ac:	f3bf 8f4f 	dsb	sy
}
 80052b0:	bf00      	nop
    }

    /* Ensure completion of descriptor preparation before transmission start */
    __DSB();

    dmatxdesc = (ETH_DMADescTypeDef *)(&heth->TxDescList)->TxDesc[heth->TxDescList.CurTxDesc];
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	3206      	adds	r2, #6
 80052ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80052be:	617b      	str	r3, [r7, #20]

    /* Incr current tx desc index */
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052c4:	1c5a      	adds	r2, r3, #1
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	629a      	str	r2, [r3, #40]	; 0x28
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052ce:	2b03      	cmp	r3, #3
 80052d0:	d904      	bls.n	80052dc <HAL_ETH_Transmit+0x84>
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052d6:	1f1a      	subs	r2, r3, #4
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	629a      	str	r2, [r3, #40]	; 0x28

    /* Start transmission */
    /* issue a poll command to Tx DMA by writing address of next immediate free descriptor */
    WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t)(heth->TxDescList.TxDesc[heth->TxDescList.CurTxDesc]));
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	6a99      	ldr	r1, [r3, #40]	; 0x28
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	681a      	ldr	r2, [r3, #0]
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	3106      	adds	r1, #6
 80052e8:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80052ec:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80052f0:	f8c2 3120 	str.w	r3, [r2, #288]	; 0x120

    tickstart = HAL_GetTick();
 80052f4:	f7fd fd66 	bl	8002dc4 <HAL_GetTick>
 80052f8:	6138      	str	r0, [r7, #16]

    /* Wait for data to be transmitted or timeout occurred */
    while ((dmatxdesc->DESC3 & ETH_DMATXNDESCWBF_OWN) != (uint32_t)RESET)
 80052fa:	e039      	b.n	8005370 <HAL_ETH_Transmit+0x118>
    {
      if ((heth->Instance->DMACSR & ETH_DMACSR_FBE) != (uint32_t)RESET)
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005304:	f8d3 3160 	ldr.w	r3, [r3, #352]	; 0x160
 8005308:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800530c:	2b00      	cmp	r3, #0
 800530e:	d012      	beq.n	8005336 <HAL_ETH_Transmit+0xde>
      {
        heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005316:	f043 0208 	orr.w	r2, r3, #8
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        heth->DMAErrorCode = heth->Instance->DMACSR;
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005328:	f8d3 2160 	ldr.w	r2, [r3, #352]	; 0x160
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        /* Return function status */
        return HAL_ERROR;
 8005332:	2301      	movs	r3, #1
 8005334:	e023      	b.n	800537e <HAL_ETH_Transmit+0x126>
      }

      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	f1b3 3fff 	cmp.w	r3, #4294967295
 800533c:	d018      	beq.n	8005370 <HAL_ETH_Transmit+0x118>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800533e:	f7fd fd41 	bl	8002dc4 <HAL_GetTick>
 8005342:	4602      	mov	r2, r0
 8005344:	693b      	ldr	r3, [r7, #16]
 8005346:	1ad3      	subs	r3, r2, r3
 8005348:	687a      	ldr	r2, [r7, #4]
 800534a:	429a      	cmp	r2, r3
 800534c:	d302      	bcc.n	8005354 <HAL_ETH_Transmit+0xfc>
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	2b00      	cmp	r3, #0
 8005352:	d10d      	bne.n	8005370 <HAL_ETH_Transmit+0x118>
        {
          heth->ErrorCode |= HAL_ETH_ERROR_TIMEOUT;
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800535a:	f043 0204 	orr.w	r2, r3, #4
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          /* Clear TX descriptor so that we can proceed */
          dmatxdesc->DESC3 = (ETH_DMATXNDESCWBF_FD | ETH_DMATXNDESCWBF_LD);
 8005364:	697b      	ldr	r3, [r7, #20]
 8005366:	f04f 5240 	mov.w	r2, #805306368	; 0x30000000
 800536a:	60da      	str	r2, [r3, #12]
          return HAL_ERROR;
 800536c:	2301      	movs	r3, #1
 800536e:	e006      	b.n	800537e <HAL_ETH_Transmit+0x126>
    while ((dmatxdesc->DESC3 & ETH_DMATXNDESCWBF_OWN) != (uint32_t)RESET)
 8005370:	697b      	ldr	r3, [r7, #20]
 8005372:	68db      	ldr	r3, [r3, #12]
 8005374:	2b00      	cmp	r3, #0
 8005376:	dbc1      	blt.n	80052fc <HAL_ETH_Transmit+0xa4>
        }
      }
    }

    /* Return function status */
    return HAL_OK;
 8005378:	2300      	movs	r3, #0
 800537a:	e000      	b.n	800537e <HAL_ETH_Transmit+0x126>
  }
  else
  {
    return HAL_ERROR;
 800537c:	2301      	movs	r3, #1
  }
}
 800537e:	4618      	mov	r0, r3
 8005380:	3718      	adds	r7, #24
 8005382:	46bd      	mov	sp, r7
 8005384:	bd80      	pop	{r7, pc}

08005386 <ETH_UpdateDescriptor>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_UpdateDescriptor(ETH_HandleTypeDef *heth)
{
 8005386:	b580      	push	{r7, lr}
 8005388:	b088      	sub	sp, #32
 800538a:	af00      	add	r7, sp, #0
 800538c:	6078      	str	r0, [r7, #4]
  uint32_t descidx;
  uint32_t desccount;
  ETH_DMADescTypeDef *dmarxdesc;
  uint8_t *buff = NULL;
 800538e:	2300      	movs	r3, #0
 8005390:	60fb      	str	r3, [r7, #12]
  uint8_t allocStatus = 1U;
 8005392:	2301      	movs	r3, #1
 8005394:	74fb      	strb	r3, [r7, #19]

  descidx = heth->RxDescList.RxBuildDescIdx;
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800539a:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	69fa      	ldr	r2, [r7, #28]
 80053a0:	3212      	adds	r2, #18
 80053a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80053a6:	617b      	str	r3, [r7, #20]
  desccount = heth->RxDescList.RxBuildDescCnt;
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80053ac:	61bb      	str	r3, [r7, #24]

  while ((desccount > 0U) && (allocStatus != 0U))
 80053ae:	e03b      	b.n	8005428 <ETH_UpdateDescriptor+0xa2>
  {
    /* Check if a buffer's attached the descriptor */
    if (READ_REG(dmarxdesc->BackupAddr0) == 0U)
 80053b0:	697b      	ldr	r3, [r7, #20]
 80053b2:	691b      	ldr	r3, [r3, #16]
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	d112      	bne.n	80053de <ETH_UpdateDescriptor+0x58>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Allocate callback*/
      heth->rxAllocateCallback(&buff);
#else
      /* Allocate callback */
      HAL_ETH_RxAllocateCallback(&buff);
 80053b8:	f107 030c 	add.w	r3, r7, #12
 80053bc:	4618      	mov	r0, r3
 80053be:	f009 f84b 	bl	800e458 <HAL_ETH_RxAllocateCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      if (buff == NULL)
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d102      	bne.n	80053ce <ETH_UpdateDescriptor+0x48>
      {
        allocStatus = 0U;
 80053c8:	2300      	movs	r3, #0
 80053ca:	74fb      	strb	r3, [r7, #19]
 80053cc:	e007      	b.n	80053de <ETH_UpdateDescriptor+0x58>
      }
      else
      {
        WRITE_REG(dmarxdesc->BackupAddr0, (uint32_t)buff);
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	461a      	mov	r2, r3
 80053d2:	697b      	ldr	r3, [r7, #20]
 80053d4:	611a      	str	r2, [r3, #16]
        WRITE_REG(dmarxdesc->DESC0, (uint32_t)buff);
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	461a      	mov	r2, r3
 80053da:	697b      	ldr	r3, [r7, #20]
 80053dc:	601a      	str	r2, [r3, #0]
      }
    }

    if (allocStatus != 0U)
 80053de:	7cfb      	ldrb	r3, [r7, #19]
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d021      	beq.n	8005428 <ETH_UpdateDescriptor+0xa2>
  __ASM volatile ("dmb 0xF":::"memory");
 80053e4:	f3bf 8f5f 	dmb	sy
}
 80053e8:	bf00      	nop
    {
      /* Ensure rest of descriptor is written to RAM before the OWN bit */
      __DMB();

      if (heth->RxDescList.ItMode != 0U)
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d004      	beq.n	80053fc <ETH_UpdateDescriptor+0x76>
      {
        WRITE_REG(dmarxdesc->DESC3, ETH_DMARXNDESCRF_OWN | ETH_DMARXNDESCRF_BUF1V | ETH_DMARXNDESCRF_IOC);
 80053f2:	697b      	ldr	r3, [r7, #20]
 80053f4:	f04f 4241 	mov.w	r2, #3238002688	; 0xc1000000
 80053f8:	60da      	str	r2, [r3, #12]
 80053fa:	e003      	b.n	8005404 <ETH_UpdateDescriptor+0x7e>
      }
      else
      {
        WRITE_REG(dmarxdesc->DESC3, ETH_DMARXNDESCRF_OWN | ETH_DMARXNDESCRF_BUF1V);
 80053fc:	697b      	ldr	r3, [r7, #20]
 80053fe:	f04f 4201 	mov.w	r2, #2164260864	; 0x81000000
 8005402:	60da      	str	r2, [r3, #12]
      }

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 8005404:	69fb      	ldr	r3, [r7, #28]
 8005406:	3301      	adds	r3, #1
 8005408:	61fb      	str	r3, [r7, #28]
 800540a:	69fb      	ldr	r3, [r7, #28]
 800540c:	2b03      	cmp	r3, #3
 800540e:	d902      	bls.n	8005416 <ETH_UpdateDescriptor+0x90>
 8005410:	69fb      	ldr	r3, [r7, #28]
 8005412:	3b04      	subs	r3, #4
 8005414:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	69fa      	ldr	r2, [r7, #28]
 800541a:	3212      	adds	r2, #18
 800541c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005420:	617b      	str	r3, [r7, #20]
      desccount--;
 8005422:	69bb      	ldr	r3, [r7, #24]
 8005424:	3b01      	subs	r3, #1
 8005426:	61bb      	str	r3, [r7, #24]
  while ((desccount > 0U) && (allocStatus != 0U))
 8005428:	69bb      	ldr	r3, [r7, #24]
 800542a:	2b00      	cmp	r3, #0
 800542c:	d002      	beq.n	8005434 <ETH_UpdateDescriptor+0xae>
 800542e:	7cfb      	ldrb	r3, [r7, #19]
 8005430:	2b00      	cmp	r3, #0
 8005432:	d1bd      	bne.n	80053b0 <ETH_UpdateDescriptor+0x2a>
    }
  }

  if (heth->RxDescList.RxBuildDescCnt != desccount)
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005438:	69ba      	ldr	r2, [r7, #24]
 800543a:	429a      	cmp	r2, r3
 800543c:	d00d      	beq.n	800545a <ETH_UpdateDescriptor+0xd4>
  {
    /* Set the Tail pointer address */
    WRITE_REG(heth->Instance->DMACRDTPR, 0);
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005446:	461a      	mov	r2, r3
 8005448:	2300      	movs	r3, #0
 800544a:	f8c2 3128 	str.w	r3, [r2, #296]	; 0x128

    heth->RxDescList.RxBuildDescIdx = descidx;
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	69fa      	ldr	r2, [r7, #28]
 8005452:	669a      	str	r2, [r3, #104]	; 0x68
    heth->RxDescList.RxBuildDescCnt = desccount;
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	69ba      	ldr	r2, [r7, #24]
 8005458:	66da      	str	r2, [r3, #108]	; 0x6c
  }
}
 800545a:	bf00      	nop
 800545c:	3720      	adds	r7, #32
 800545e:	46bd      	mov	sp, r7
 8005460:	bd80      	pop	{r7, pc}

08005462 <HAL_ETH_ReadPHYRegister>:
  * @param pRegValue: parameter to hold read value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                          uint32_t *pRegValue)
{
 8005462:	b580      	push	{r7, lr}
 8005464:	b086      	sub	sp, #24
 8005466:	af00      	add	r7, sp, #0
 8005468:	60f8      	str	r0, [r7, #12]
 800546a:	60b9      	str	r1, [r7, #8]
 800546c:	607a      	str	r2, [r7, #4]
 800546e:	603b      	str	r3, [r7, #0]
  uint32_t tickstart;
  uint32_t tmpreg;

  /* Check for the Busy flag */
  if (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) != (uint32_t)RESET)
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8005478:	f003 0301 	and.w	r3, r3, #1
 800547c:	2b00      	cmp	r3, #0
 800547e:	d001      	beq.n	8005484 <HAL_ETH_ReadPHYRegister+0x22>
  {
    return HAL_ERROR;
 8005480:	2301      	movs	r3, #1
 8005482:	e03e      	b.n	8005502 <HAL_ETH_ReadPHYRegister+0xa0>
  }

  /* Get the  MACMDIOAR value */
  WRITE_REG(tmpreg, heth->Instance->MACMDIOAR);
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800548c:	617b      	str	r3, [r7, #20]
     - Set the PHY device address
     - Set the PHY register address
     - Set the read mode
     - Set the MII Busy bit */

  MODIFY_REG(tmpreg, ETH_MACMDIOAR_PA, (PHYAddr << 21));
 800548e:	697b      	ldr	r3, [r7, #20]
 8005490:	f023 7278 	bic.w	r2, r3, #65011712	; 0x3e00000
 8005494:	68bb      	ldr	r3, [r7, #8]
 8005496:	055b      	lsls	r3, r3, #21
 8005498:	4313      	orrs	r3, r2
 800549a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_RDA, (PHYReg << 16));
 800549c:	697b      	ldr	r3, [r7, #20]
 800549e:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	041b      	lsls	r3, r3, #16
 80054a6:	4313      	orrs	r3, r2
 80054a8:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_MOC, ETH_MACMDIOAR_MOC_RD);
 80054aa:	697b      	ldr	r3, [r7, #20]
 80054ac:	f043 030c 	orr.w	r3, r3, #12
 80054b0:	617b      	str	r3, [r7, #20]
  SET_BIT(tmpreg, ETH_MACMDIOAR_MB);
 80054b2:	697b      	ldr	r3, [r7, #20]
 80054b4:	f043 0301 	orr.w	r3, r3, #1
 80054b8:	617b      	str	r3, [r7, #20]

  /* Write the result value into the MDII Address register */
  WRITE_REG(heth->Instance->MACMDIOAR, tmpreg);
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	697a      	ldr	r2, [r7, #20]
 80054c0:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

  tickstart = HAL_GetTick();
 80054c4:	f7fd fc7e 	bl	8002dc4 <HAL_GetTick>
 80054c8:	6138      	str	r0, [r7, #16]

  /* Wait for the Busy flag */
  while (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 80054ca:	e009      	b.n	80054e0 <HAL_ETH_ReadPHYRegister+0x7e>
  {
    if (((HAL_GetTick() - tickstart) > ETH_MDIO_BUS_TIMEOUT))
 80054cc:	f7fd fc7a 	bl	8002dc4 <HAL_GetTick>
 80054d0:	4602      	mov	r2, r0
 80054d2:	693b      	ldr	r3, [r7, #16]
 80054d4:	1ad3      	subs	r3, r2, r3
 80054d6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80054da:	d901      	bls.n	80054e0 <HAL_ETH_ReadPHYRegister+0x7e>
    {
      return HAL_ERROR;
 80054dc:	2301      	movs	r3, #1
 80054de:	e010      	b.n	8005502 <HAL_ETH_ReadPHYRegister+0xa0>
  while (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80054e8:	f003 0301 	and.w	r3, r3, #1
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	d1ed      	bne.n	80054cc <HAL_ETH_ReadPHYRegister+0x6a>
    }
  }

  /* Get MACMIIDR value */
  WRITE_REG(*pRegValue, (uint16_t)heth->Instance->MACMDIODR);
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80054f8:	b29b      	uxth	r3, r3
 80054fa:	461a      	mov	r2, r3
 80054fc:	683b      	ldr	r3, [r7, #0]
 80054fe:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8005500:	2300      	movs	r3, #0
}
 8005502:	4618      	mov	r0, r3
 8005504:	3718      	adds	r7, #24
 8005506:	46bd      	mov	sp, r7
 8005508:	bd80      	pop	{r7, pc}
	...

0800550c <HAL_ETH_WritePHYRegister>:
  * @param  RegValue: the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                           uint32_t RegValue)
{
 800550c:	b580      	push	{r7, lr}
 800550e:	b086      	sub	sp, #24
 8005510:	af00      	add	r7, sp, #0
 8005512:	60f8      	str	r0, [r7, #12]
 8005514:	60b9      	str	r1, [r7, #8]
 8005516:	607a      	str	r2, [r7, #4]
 8005518:	603b      	str	r3, [r7, #0]
  uint32_t tickstart;
  uint32_t tmpreg;

  /* Check for the Busy flag */
  if (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) != (uint32_t)RESET)
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8005522:	f003 0301 	and.w	r3, r3, #1
 8005526:	2b00      	cmp	r3, #0
 8005528:	d001      	beq.n	800552e <HAL_ETH_WritePHYRegister+0x22>
  {
    return HAL_ERROR;
 800552a:	2301      	movs	r3, #1
 800552c:	e03c      	b.n	80055a8 <HAL_ETH_WritePHYRegister+0x9c>
  }

  /* Get the  MACMDIOAR value */
  WRITE_REG(tmpreg, heth->Instance->MACMDIOAR);
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8005536:	617b      	str	r3, [r7, #20]
     - Set the PHY device address
     - Set the PHY register address
     - Set the write mode
     - Set the MII Busy bit */

  MODIFY_REG(tmpreg, ETH_MACMDIOAR_PA, (PHYAddr << 21));
 8005538:	697b      	ldr	r3, [r7, #20]
 800553a:	f023 7278 	bic.w	r2, r3, #65011712	; 0x3e00000
 800553e:	68bb      	ldr	r3, [r7, #8]
 8005540:	055b      	lsls	r3, r3, #21
 8005542:	4313      	orrs	r3, r2
 8005544:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_RDA, (PHYReg << 16));
 8005546:	697b      	ldr	r3, [r7, #20]
 8005548:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	041b      	lsls	r3, r3, #16
 8005550:	4313      	orrs	r3, r2
 8005552:	617b      	str	r3, [r7, #20]
  MODIFY_REG(tmpreg, ETH_MACMDIOAR_MOC, ETH_MACMDIOAR_MOC_WR);
 8005554:	697b      	ldr	r3, [r7, #20]
 8005556:	f023 030c 	bic.w	r3, r3, #12
 800555a:	f043 0304 	orr.w	r3, r3, #4
 800555e:	617b      	str	r3, [r7, #20]
  SET_BIT(tmpreg, ETH_MACMDIOAR_MB);
 8005560:	697b      	ldr	r3, [r7, #20]
 8005562:	f043 0301 	orr.w	r3, r3, #1
 8005566:	617b      	str	r3, [r7, #20]


  /* Give the value to the MII data register */
  WRITE_REG(ETH->MACMDIODR, (uint16_t)RegValue);
 8005568:	683b      	ldr	r3, [r7, #0]
 800556a:	b29a      	uxth	r2, r3
 800556c:	4b10      	ldr	r3, [pc, #64]	; (80055b0 <HAL_ETH_WritePHYRegister+0xa4>)
 800556e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Write the result value into the MII Address register */
  WRITE_REG(ETH->MACMDIOAR, tmpreg);
 8005572:	4a0f      	ldr	r2, [pc, #60]	; (80055b0 <HAL_ETH_WritePHYRegister+0xa4>)
 8005574:	697b      	ldr	r3, [r7, #20]
 8005576:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

  tickstart = HAL_GetTick();
 800557a:	f7fd fc23 	bl	8002dc4 <HAL_GetTick>
 800557e:	6138      	str	r0, [r7, #16]

  /* Wait for the Busy flag */
  while (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 8005580:	e009      	b.n	8005596 <HAL_ETH_WritePHYRegister+0x8a>
  {
    if (((HAL_GetTick() - tickstart) > ETH_MDIO_BUS_TIMEOUT))
 8005582:	f7fd fc1f 	bl	8002dc4 <HAL_GetTick>
 8005586:	4602      	mov	r2, r0
 8005588:	693b      	ldr	r3, [r7, #16]
 800558a:	1ad3      	subs	r3, r2, r3
 800558c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005590:	d901      	bls.n	8005596 <HAL_ETH_WritePHYRegister+0x8a>
    {
      return HAL_ERROR;
 8005592:	2301      	movs	r3, #1
 8005594:	e008      	b.n	80055a8 <HAL_ETH_WritePHYRegister+0x9c>
  while (READ_BIT(heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB) > 0U)
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800559e:	f003 0301 	and.w	r3, r3, #1
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d1ed      	bne.n	8005582 <HAL_ETH_WritePHYRegister+0x76>
    }
  }

  return HAL_OK;
 80055a6:	2300      	movs	r3, #0
}
 80055a8:	4618      	mov	r0, r3
 80055aa:	3718      	adds	r7, #24
 80055ac:	46bd      	mov	sp, r7
 80055ae:	bd80      	pop	{r7, pc}
 80055b0:	40028000 	.word	0x40028000

080055b4 <HAL_ETH_GetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that will hold
  *         the configuration of the MAC.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_ETH_GetMACConfig(ETH_HandleTypeDef *heth, ETH_MACConfigTypeDef *macconf)
{
 80055b4:	b480      	push	{r7}
 80055b6:	b083      	sub	sp, #12
 80055b8:	af00      	add	r7, sp, #0
 80055ba:	6078      	str	r0, [r7, #4]
 80055bc:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 80055be:	683b      	ldr	r3, [r7, #0]
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	d101      	bne.n	80055c8 <HAL_ETH_GetMACConfig+0x14>
  {
    return HAL_ERROR;
 80055c4:	2301      	movs	r3, #1
 80055c6:	e1c3      	b.n	8005950 <HAL_ETH_GetMACConfig+0x39c>
  }

  /* Get MAC parameters */
  macconf->PreambleLength = READ_BIT(heth->Instance->MACCR, ETH_MACCR_PRELEN);
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	f003 020c 	and.w	r2, r3, #12
 80055d2:	683b      	ldr	r3, [r7, #0]
 80055d4:	62da      	str	r2, [r3, #44]	; 0x2c
  macconf->DeferralCheck = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DC) >> 4) > 0U) ? ENABLE : DISABLE;
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	f003 0310 	and.w	r3, r3, #16
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	bf14      	ite	ne
 80055e4:	2301      	movne	r3, #1
 80055e6:	2300      	moveq	r3, #0
 80055e8:	b2db      	uxtb	r3, r3
 80055ea:	461a      	mov	r2, r3
 80055ec:	683b      	ldr	r3, [r7, #0]
 80055ee:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  macconf->BackOffLimit = READ_BIT(heth->Instance->MACCR, ETH_MACCR_BL);
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	f003 0260 	and.w	r2, r3, #96	; 0x60
 80055fc:	683b      	ldr	r3, [r7, #0]
 80055fe:	625a      	str	r2, [r3, #36]	; 0x24
  macconf->RetryTransmission = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DR) >> 8) == 0U) ? ENABLE : DISABLE;
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800560a:	2b00      	cmp	r3, #0
 800560c:	bf0c      	ite	eq
 800560e:	2301      	moveq	r3, #1
 8005610:	2300      	movne	r3, #0
 8005612:	b2db      	uxtb	r3, r3
 8005614:	461a      	mov	r2, r3
 8005616:	683b      	ldr	r3, [r7, #0]
 8005618:	f883 2020 	strb.w	r2, [r3, #32]
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DCRS) >> 9) > 0U)
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	f403 7300 	and.w	r3, r3, #512	; 0x200
                                        ? ENABLE : DISABLE;
 8005626:	2b00      	cmp	r3, #0
 8005628:	bf14      	ite	ne
 800562a:	2301      	movne	r3, #1
 800562c:	2300      	moveq	r3, #0
 800562e:	b2db      	uxtb	r3, r3
 8005630:	461a      	mov	r2, r3
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DCRS) >> 9) > 0U)
 8005632:	683b      	ldr	r3, [r7, #0]
 8005634:	77da      	strb	r2, [r3, #31]
  macconf->ReceiveOwn = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DO) >> 10) == 0U) ? ENABLE : DISABLE;
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005640:	2b00      	cmp	r3, #0
 8005642:	bf0c      	ite	eq
 8005644:	2301      	moveq	r3, #1
 8005646:	2300      	movne	r3, #0
 8005648:	b2db      	uxtb	r3, r3
 800564a:	461a      	mov	r2, r3
 800564c:	683b      	ldr	r3, [r7, #0]
 800564e:	779a      	strb	r2, [r3, #30]
  macconf->CarrierSenseBeforeTransmit = ((READ_BIT(heth->Instance->MACCR,
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	681b      	ldr	r3, [r3, #0]
                                                   ETH_MACCR_ECRSFD) >> 11) > 0U) ? ENABLE : DISABLE;
 8005656:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800565a:	2b00      	cmp	r3, #0
 800565c:	bf14      	ite	ne
 800565e:	2301      	movne	r3, #1
 8005660:	2300      	moveq	r3, #0
 8005662:	b2db      	uxtb	r3, r3
 8005664:	461a      	mov	r2, r3
  macconf->CarrierSenseBeforeTransmit = ((READ_BIT(heth->Instance->MACCR,
 8005666:	683b      	ldr	r3, [r7, #0]
 8005668:	775a      	strb	r2, [r3, #29]
  macconf->LoopbackMode = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_LM) >> 12) > 0U) ? ENABLE : DISABLE;
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005674:	2b00      	cmp	r3, #0
 8005676:	bf14      	ite	ne
 8005678:	2301      	movne	r3, #1
 800567a:	2300      	moveq	r3, #0
 800567c:	b2db      	uxtb	r3, r3
 800567e:	461a      	mov	r2, r3
 8005680:	683b      	ldr	r3, [r7, #0]
 8005682:	771a      	strb	r2, [r3, #28]
  macconf->DuplexMode = READ_BIT(heth->Instance->MACCR, ETH_MACCR_DM);
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800568e:	683b      	ldr	r3, [r7, #0]
 8005690:	619a      	str	r2, [r3, #24]
  macconf->Speed = READ_BIT(heth->Instance->MACCR, ETH_MACCR_FES);
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	f403 4280 	and.w	r2, r3, #16384	; 0x4000
 800569c:	683b      	ldr	r3, [r7, #0]
 800569e:	615a      	str	r2, [r3, #20]
  macconf->JumboPacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JE) >> 16) > 0U) ? ENABLE : DISABLE;
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	bf14      	ite	ne
 80056ae:	2301      	movne	r3, #1
 80056b0:	2300      	moveq	r3, #0
 80056b2:	b2db      	uxtb	r3, r3
 80056b4:	461a      	mov	r2, r3
 80056b6:	683b      	ldr	r3, [r7, #0]
 80056b8:	749a      	strb	r2, [r3, #18]
  macconf->Jabber = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JD) >> 17) == 0U) ? ENABLE : DISABLE;
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80056c4:	2b00      	cmp	r3, #0
 80056c6:	bf0c      	ite	eq
 80056c8:	2301      	moveq	r3, #1
 80056ca:	2300      	movne	r3, #0
 80056cc:	b2db      	uxtb	r3, r3
 80056ce:	461a      	mov	r2, r3
 80056d0:	683b      	ldr	r3, [r7, #0]
 80056d2:	745a      	strb	r2, [r3, #17]
  macconf->Watchdog = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_WD) >> 19) == 0U) ? ENABLE : DISABLE;
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80056de:	2b00      	cmp	r3, #0
 80056e0:	bf0c      	ite	eq
 80056e2:	2301      	moveq	r3, #1
 80056e4:	2300      	movne	r3, #0
 80056e6:	b2db      	uxtb	r3, r3
 80056e8:	461a      	mov	r2, r3
 80056ea:	683b      	ldr	r3, [r7, #0]
 80056ec:	741a      	strb	r2, [r3, #16]
  macconf->AutomaticPadCRCStrip = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ACS) >> 20) > 0U) ? ENABLE : DISABLE;
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	bf14      	ite	ne
 80056fc:	2301      	movne	r3, #1
 80056fe:	2300      	moveq	r3, #0
 8005700:	b2db      	uxtb	r3, r3
 8005702:	461a      	mov	r2, r3
 8005704:	683b      	ldr	r3, [r7, #0]
 8005706:	73da      	strb	r2, [r3, #15]
  macconf->CRCStripTypePacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CST) >> 21) > 0U) ? ENABLE : DISABLE;
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005712:	2b00      	cmp	r3, #0
 8005714:	bf14      	ite	ne
 8005716:	2301      	movne	r3, #1
 8005718:	2300      	moveq	r3, #0
 800571a:	b2db      	uxtb	r3, r3
 800571c:	461a      	mov	r2, r3
 800571e:	683b      	ldr	r3, [r7, #0]
 8005720:	739a      	strb	r2, [r3, #14]
  macconf->Support2KPacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_S2KP) >> 22) > 0U) ? ENABLE : DISABLE;
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	681b      	ldr	r3, [r3, #0]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800572c:	2b00      	cmp	r3, #0
 800572e:	bf14      	ite	ne
 8005730:	2301      	movne	r3, #1
 8005732:	2300      	moveq	r3, #0
 8005734:	b2db      	uxtb	r3, r3
 8005736:	461a      	mov	r2, r3
 8005738:	683b      	ldr	r3, [r7, #0]
 800573a:	735a      	strb	r2, [r3, #13]
  macconf->GiantPacketSizeLimitControl = ((READ_BIT(heth->Instance->MACCR,
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	681b      	ldr	r3, [r3, #0]
                                                    ETH_MACCR_GPSLCE) >> 23) > 0U) ? ENABLE : DISABLE;
 8005742:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005746:	2b00      	cmp	r3, #0
 8005748:	bf14      	ite	ne
 800574a:	2301      	movne	r3, #1
 800574c:	2300      	moveq	r3, #0
 800574e:	b2db      	uxtb	r3, r3
 8005750:	461a      	mov	r2, r3
  macconf->GiantPacketSizeLimitControl = ((READ_BIT(heth->Instance->MACCR,
 8005752:	683b      	ldr	r3, [r7, #0]
 8005754:	731a      	strb	r2, [r3, #12]
  macconf->InterPacketGapVal = READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPG);
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	f003 62e0 	and.w	r2, r3, #117440512	; 0x7000000
 8005760:	683b      	ldr	r3, [r7, #0]
 8005762:	609a      	str	r2, [r3, #8]
  macconf->ChecksumOffload = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPC) >> 27) > 0U) ? ENABLE : DISABLE;
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800576e:	2b00      	cmp	r3, #0
 8005770:	bf14      	ite	ne
 8005772:	2301      	movne	r3, #1
 8005774:	2300      	moveq	r3, #0
 8005776:	b2db      	uxtb	r3, r3
 8005778:	461a      	mov	r2, r3
 800577a:	683b      	ldr	r3, [r7, #0]
 800577c:	711a      	strb	r2, [r3, #4]
  macconf->SourceAddrControl = READ_BIT(heth->Instance->MACCR, ETH_MACCR_SARC);
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8005788:	683b      	ldr	r3, [r7, #0]
 800578a:	601a      	str	r2, [r3, #0]

  macconf->GiantPacketSizeLimit = READ_BIT(heth->Instance->MACECR, ETH_MACECR_GPSL);
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	685b      	ldr	r3, [r3, #4]
 8005792:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8005796:	683b      	ldr	r3, [r7, #0]
 8005798:	635a      	str	r2, [r3, #52]	; 0x34
  macconf->CRCCheckingRxPackets = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_DCRCC) >> 16) == 0U) ? ENABLE : DISABLE;
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	685b      	ldr	r3, [r3, #4]
 80057a0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	bf0c      	ite	eq
 80057a8:	2301      	moveq	r3, #1
 80057aa:	2300      	movne	r3, #0
 80057ac:	b2db      	uxtb	r3, r3
 80057ae:	461a      	mov	r2, r3
 80057b0:	683b      	ldr	r3, [r7, #0]
 80057b2:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
  macconf->SlowProtocolDetect = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_SPEN) >> 17) > 0U) ? ENABLE : DISABLE;
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	685b      	ldr	r3, [r3, #4]
 80057bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80057c0:	2b00      	cmp	r3, #0
 80057c2:	bf14      	ite	ne
 80057c4:	2301      	movne	r3, #1
 80057c6:	2300      	moveq	r3, #0
 80057c8:	b2db      	uxtb	r3, r3
 80057ca:	461a      	mov	r2, r3
 80057cc:	683b      	ldr	r3, [r7, #0]
 80057ce:	f883 2031 	strb.w	r2, [r3, #49]	; 0x31
  macconf->UnicastSlowProtocolPacketDetect = ((READ_BIT(heth->Instance->MACECR,
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	685b      	ldr	r3, [r3, #4]
                                                        ETH_MACECR_USP) >> 18) > 0U) ? ENABLE : DISABLE;
 80057d8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80057dc:	2b00      	cmp	r3, #0
 80057de:	bf14      	ite	ne
 80057e0:	2301      	movne	r3, #1
 80057e2:	2300      	moveq	r3, #0
 80057e4:	b2db      	uxtb	r3, r3
 80057e6:	461a      	mov	r2, r3
  macconf->UnicastSlowProtocolPacketDetect = ((READ_BIT(heth->Instance->MACECR,
 80057e8:	683b      	ldr	r3, [r7, #0]
 80057ea:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  macconf->ExtendedInterPacketGap = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_EIPGEN) >> 24) > 0U)
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	685b      	ldr	r3, [r3, #4]
 80057f4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
                                    ? ENABLE : DISABLE;
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	bf14      	ite	ne
 80057fc:	2301      	movne	r3, #1
 80057fe:	2300      	moveq	r3, #0
 8005800:	b2db      	uxtb	r3, r3
 8005802:	461a      	mov	r2, r3
  macconf->ExtendedInterPacketGap = ((READ_BIT(heth->Instance->MACECR, ETH_MACECR_EIPGEN) >> 24) > 0U)
 8005804:	683b      	ldr	r3, [r7, #0]
 8005806:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  macconf->ExtendedInterPacketGapVal = READ_BIT(heth->Instance->MACECR, ETH_MACECR_EIPG) >> 25;
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	685b      	ldr	r3, [r3, #4]
 8005810:	0e5b      	lsrs	r3, r3, #25
 8005812:	f003 021f 	and.w	r2, r3, #31
 8005816:	683b      	ldr	r3, [r7, #0]
 8005818:	63da      	str	r2, [r3, #60]	; 0x3c


  macconf->ProgrammableWatchdog = ((READ_BIT(heth->Instance->MACWTR, ETH_MACWTR_PWE) >> 8) > 0U) ? ENABLE : DISABLE;
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	68db      	ldr	r3, [r3, #12]
 8005820:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005824:	2b00      	cmp	r3, #0
 8005826:	bf14      	ite	ne
 8005828:	2301      	movne	r3, #1
 800582a:	2300      	moveq	r3, #0
 800582c:	b2db      	uxtb	r3, r3
 800582e:	461a      	mov	r2, r3
 8005830:	683b      	ldr	r3, [r7, #0]
 8005832:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  macconf->WatchdogTimeout = READ_BIT(heth->Instance->MACWTR, ETH_MACWTR_WTO);
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	68db      	ldr	r3, [r3, #12]
 800583c:	f003 020f 	and.w	r2, r3, #15
 8005840:	683b      	ldr	r3, [r7, #0]
 8005842:	645a      	str	r2, [r3, #68]	; 0x44

  macconf->TransmitFlowControl = ((READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_TFE) >> 1) > 0U) ? ENABLE : DISABLE;
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800584a:	f003 0302 	and.w	r3, r3, #2
 800584e:	2b00      	cmp	r3, #0
 8005850:	bf14      	ite	ne
 8005852:	2301      	movne	r3, #1
 8005854:	2300      	moveq	r3, #0
 8005856:	b2db      	uxtb	r3, r3
 8005858:	461a      	mov	r2, r3
 800585a:	683b      	ldr	r3, [r7, #0]
 800585c:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  macconf->ZeroQuantaPause = ((READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_DZPQ) >> 7) == 0U) ? ENABLE : DISABLE;
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005866:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800586a:	2b00      	cmp	r3, #0
 800586c:	bf0c      	ite	eq
 800586e:	2301      	moveq	r3, #1
 8005870:	2300      	movne	r3, #0
 8005872:	b2db      	uxtb	r3, r3
 8005874:	461a      	mov	r2, r3
 8005876:	683b      	ldr	r3, [r7, #0]
 8005878:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
  macconf->PauseLowThreshold = READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_PLT);
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005882:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8005886:	683b      	ldr	r3, [r7, #0]
 8005888:	651a      	str	r2, [r3, #80]	; 0x50
  macconf->PauseTime = (READ_BIT(heth->Instance->MACTFCR, ETH_MACTFCR_PT) >> 16);
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005890:	0c1b      	lsrs	r3, r3, #16
 8005892:	b29a      	uxth	r2, r3
 8005894:	683b      	ldr	r3, [r7, #0]
 8005896:	649a      	str	r2, [r3, #72]	; 0x48


  macconf->ReceiveFlowControl = (READ_BIT(heth->Instance->MACRFCR, ETH_MACRFCR_RFE) > 0U) ? ENABLE : DISABLE;
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80058a0:	f003 0301 	and.w	r3, r3, #1
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	bf14      	ite	ne
 80058a8:	2301      	movne	r3, #1
 80058aa:	2300      	moveq	r3, #0
 80058ac:	b2db      	uxtb	r3, r3
 80058ae:	461a      	mov	r2, r3
 80058b0:	683b      	ldr	r3, [r7, #0]
 80058b2:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACRFCR, ETH_MACRFCR_UP) >> 1) > 0U)
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80058be:	f003 0302 	and.w	r3, r3, #2
                                      ? ENABLE : DISABLE;
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	bf14      	ite	ne
 80058c6:	2301      	movne	r3, #1
 80058c8:	2300      	moveq	r3, #0
 80058ca:	b2db      	uxtb	r3, r3
 80058cc:	461a      	mov	r2, r3
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACRFCR, ETH_MACRFCR_UP) >> 1) > 0U)
 80058ce:	683b      	ldr	r3, [r7, #0]
 80058d0:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55

  macconf->TransmitQueueMode = READ_BIT(heth->Instance->MTLTQOMR, (ETH_MTLTQOMR_TTC | ETH_MTLTQOMR_TSF));
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 80058dc:	f003 0272 	and.w	r2, r3, #114	; 0x72
 80058e0:	683b      	ldr	r3, [r7, #0]
 80058e2:	659a      	str	r2, [r3, #88]	; 0x58

  macconf->ReceiveQueueMode = READ_BIT(heth->Instance->MTLRQOMR, (ETH_MTLRQOMR_RTC | ETH_MTLRQOMR_RSF));
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 80058ec:	f003 0223 	and.w	r2, r3, #35	; 0x23
 80058f0:	683b      	ldr	r3, [r7, #0]
 80058f2:	65da      	str	r2, [r3, #92]	; 0x5c
  macconf->ForwardRxUndersizedGoodPacket = ((READ_BIT(heth->Instance->MTLRQOMR,
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
                                                      ETH_MTLRQOMR_FUP) >> 3) > 0U) ? ENABLE : DISABLE;
 80058fc:	f003 0308 	and.w	r3, r3, #8
 8005900:	2b00      	cmp	r3, #0
 8005902:	bf14      	ite	ne
 8005904:	2301      	movne	r3, #1
 8005906:	2300      	moveq	r3, #0
 8005908:	b2db      	uxtb	r3, r3
 800590a:	461a      	mov	r2, r3
  macconf->ForwardRxUndersizedGoodPacket = ((READ_BIT(heth->Instance->MTLRQOMR,
 800590c:	683b      	ldr	r3, [r7, #0]
 800590e:	f883 2062 	strb.w	r2, [r3, #98]	; 0x62
  macconf->ForwardRxErrorPacket = ((READ_BIT(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_FEP) >> 4) > 0U) ? ENABLE : DISABLE;
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 800591a:	f003 0310 	and.w	r3, r3, #16
 800591e:	2b00      	cmp	r3, #0
 8005920:	bf14      	ite	ne
 8005922:	2301      	movne	r3, #1
 8005924:	2300      	moveq	r3, #0
 8005926:	b2db      	uxtb	r3, r3
 8005928:	461a      	mov	r2, r3
 800592a:	683b      	ldr	r3, [r7, #0]
 800592c:	f883 2061 	strb.w	r2, [r3, #97]	; 0x61
  macconf->DropTCPIPChecksumErrorPacket = ((READ_BIT(heth->Instance->MTLRQOMR,
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
                                                     ETH_MTLRQOMR_DISTCPEF) >> 6) == 0U) ? ENABLE : DISABLE;
 8005938:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800593c:	2b00      	cmp	r3, #0
 800593e:	bf0c      	ite	eq
 8005940:	2301      	moveq	r3, #1
 8005942:	2300      	movne	r3, #0
 8005944:	b2db      	uxtb	r3, r3
 8005946:	461a      	mov	r2, r3
  macconf->DropTCPIPChecksumErrorPacket = ((READ_BIT(heth->Instance->MTLRQOMR,
 8005948:	683b      	ldr	r3, [r7, #0]
 800594a:	f883 2060 	strb.w	r2, [r3, #96]	; 0x60

  return HAL_OK;
 800594e:	2300      	movs	r3, #0
}
 8005950:	4618      	mov	r0, r3
 8005952:	370c      	adds	r7, #12
 8005954:	46bd      	mov	sp, r7
 8005956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800595a:	4770      	bx	lr

0800595c <HAL_ETH_SetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that contains
  *         the configuration of the MAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 800595c:	b580      	push	{r7, lr}
 800595e:	b082      	sub	sp, #8
 8005960:	af00      	add	r7, sp, #0
 8005962:	6078      	str	r0, [r7, #4]
 8005964:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 8005966:	683b      	ldr	r3, [r7, #0]
 8005968:	2b00      	cmp	r3, #0
 800596a:	d101      	bne.n	8005970 <HAL_ETH_SetMACConfig+0x14>
  {
    return HAL_ERROR;
 800596c:	2301      	movs	r3, #1
 800596e:	e00b      	b.n	8005988 <HAL_ETH_SetMACConfig+0x2c>
  }

  if (heth->gState == HAL_ETH_STATE_READY)
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005976:	2b10      	cmp	r3, #16
 8005978:	d105      	bne.n	8005986 <HAL_ETH_SetMACConfig+0x2a>
  {
    ETH_SetMACConfig(heth, macconf);
 800597a:	6839      	ldr	r1, [r7, #0]
 800597c:	6878      	ldr	r0, [r7, #4]
 800597e:	f000 f85f 	bl	8005a40 <ETH_SetMACConfig>

    return HAL_OK;
 8005982:	2300      	movs	r3, #0
 8005984:	e000      	b.n	8005988 <HAL_ETH_SetMACConfig+0x2c>
  }
  else
  {
    return HAL_ERROR;
 8005986:	2301      	movs	r3, #1
  }
}
 8005988:	4618      	mov	r0, r3
 800598a:	3708      	adds	r7, #8
 800598c:	46bd      	mov	sp, r7
 800598e:	bd80      	pop	{r7, pc}

08005990 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 8005990:	b580      	push	{r7, lr}
 8005992:	b084      	sub	sp, #16
 8005994:	af00      	add	r7, sp, #0
 8005996:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80059a0:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80059a8:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 80059aa:	f003 fec3 	bl	8009734 <HAL_RCC_GetHCLKFreq>
 80059ae:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if ((hclk >= 20000000U) && (hclk < 35000000U))
 80059b0:	68bb      	ldr	r3, [r7, #8]
 80059b2:	4a1e      	ldr	r2, [pc, #120]	; (8005a2c <HAL_ETH_SetMDIOClockRange+0x9c>)
 80059b4:	4293      	cmp	r3, r2
 80059b6:	d908      	bls.n	80059ca <HAL_ETH_SetMDIOClockRange+0x3a>
 80059b8:	68bb      	ldr	r3, [r7, #8]
 80059ba:	4a1d      	ldr	r2, [pc, #116]	; (8005a30 <HAL_ETH_SetMDIOClockRange+0xa0>)
 80059bc:	4293      	cmp	r3, r2
 80059be:	d804      	bhi.n	80059ca <HAL_ETH_SetMDIOClockRange+0x3a>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80059c6:	60fb      	str	r3, [r7, #12]
 80059c8:	e027      	b.n	8005a1a <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if ((hclk >= 35000000U) && (hclk < 60000000U))
 80059ca:	68bb      	ldr	r3, [r7, #8]
 80059cc:	4a18      	ldr	r2, [pc, #96]	; (8005a30 <HAL_ETH_SetMDIOClockRange+0xa0>)
 80059ce:	4293      	cmp	r3, r2
 80059d0:	d908      	bls.n	80059e4 <HAL_ETH_SetMDIOClockRange+0x54>
 80059d2:	68bb      	ldr	r3, [r7, #8]
 80059d4:	4a17      	ldr	r2, [pc, #92]	; (8005a34 <HAL_ETH_SetMDIOClockRange+0xa4>)
 80059d6:	4293      	cmp	r3, r2
 80059d8:	d204      	bcs.n	80059e4 <HAL_ETH_SetMDIOClockRange+0x54>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 80059e0:	60fb      	str	r3, [r7, #12]
 80059e2:	e01a      	b.n	8005a1a <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if ((hclk >= 60000000U) && (hclk < 100000000U))
 80059e4:	68bb      	ldr	r3, [r7, #8]
 80059e6:	4a13      	ldr	r2, [pc, #76]	; (8005a34 <HAL_ETH_SetMDIOClockRange+0xa4>)
 80059e8:	4293      	cmp	r3, r2
 80059ea:	d303      	bcc.n	80059f4 <HAL_ETH_SetMDIOClockRange+0x64>
 80059ec:	68bb      	ldr	r3, [r7, #8]
 80059ee:	4a12      	ldr	r2, [pc, #72]	; (8005a38 <HAL_ETH_SetMDIOClockRange+0xa8>)
 80059f0:	4293      	cmp	r3, r2
 80059f2:	d911      	bls.n	8005a18 <HAL_ETH_SetMDIOClockRange+0x88>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if ((hclk >= 100000000U) && (hclk < 150000000U))
 80059f4:	68bb      	ldr	r3, [r7, #8]
 80059f6:	4a10      	ldr	r2, [pc, #64]	; (8005a38 <HAL_ETH_SetMDIOClockRange+0xa8>)
 80059f8:	4293      	cmp	r3, r2
 80059fa:	d908      	bls.n	8005a0e <HAL_ETH_SetMDIOClockRange+0x7e>
 80059fc:	68bb      	ldr	r3, [r7, #8]
 80059fe:	4a0f      	ldr	r2, [pc, #60]	; (8005a3c <HAL_ETH_SetMDIOClockRange+0xac>)
 8005a00:	4293      	cmp	r3, r2
 8005a02:	d804      	bhi.n	8005a0e <HAL_ETH_SetMDIOClockRange+0x7e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005a0a:	60fb      	str	r3, [r7, #12]
 8005a0c:	e005      	b.n	8005a1a <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else /* (hclk >= 150000000)&&(hclk <= 200000000) */
  {
    /* CSR Clock Range between 150-200 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005a14:	60fb      	str	r3, [r7, #12]
 8005a16:	e000      	b.n	8005a1a <HAL_ETH_SetMDIOClockRange+0x8a>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
 8005a18:	bf00      	nop
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	68fa      	ldr	r2, [r7, #12]
 8005a20:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 8005a24:	bf00      	nop
 8005a26:	3710      	adds	r7, #16
 8005a28:	46bd      	mov	sp, r7
 8005a2a:	bd80      	pop	{r7, pc}
 8005a2c:	01312cff 	.word	0x01312cff
 8005a30:	02160ebf 	.word	0x02160ebf
 8005a34:	03938700 	.word	0x03938700
 8005a38:	05f5e0ff 	.word	0x05f5e0ff
 8005a3c:	08f0d17f 	.word	0x08f0d17f

08005a40 <ETH_SetMACConfig>:
  * @{
  */


static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8005a40:	b480      	push	{r7}
 8005a42:	b085      	sub	sp, #20
 8005a44:	af00      	add	r7, sp, #0
 8005a46:	6078      	str	r0, [r7, #4]
 8005a48:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval = (macconf->InterPacketGapVal |
 8005a4a:	683b      	ldr	r3, [r7, #0]
 8005a4c:	689a      	ldr	r2, [r3, #8]
               macconf->SourceAddrControl |
 8005a4e:	683b      	ldr	r3, [r7, #0]
 8005a50:	681b      	ldr	r3, [r3, #0]
  macregval = (macconf->InterPacketGapVal |
 8005a52:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ChecksumOffload << 27) |
 8005a54:	683b      	ldr	r3, [r7, #0]
 8005a56:	791b      	ldrb	r3, [r3, #4]
 8005a58:	06db      	lsls	r3, r3, #27
               macconf->SourceAddrControl |
 8005a5a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8005a5c:	683b      	ldr	r3, [r7, #0]
 8005a5e:	7b1b      	ldrb	r3, [r3, #12]
 8005a60:	05db      	lsls	r3, r3, #23
               ((uint32_t)macconf->ChecksumOffload << 27) |
 8005a62:	431a      	orrs	r2, r3
               ((uint32_t)macconf->Support2KPacket  << 22) |
 8005a64:	683b      	ldr	r3, [r7, #0]
 8005a66:	7b5b      	ldrb	r3, [r3, #13]
 8005a68:	059b      	lsls	r3, r3, #22
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8005a6a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8005a6c:	683b      	ldr	r3, [r7, #0]
 8005a6e:	7b9b      	ldrb	r3, [r3, #14]
 8005a70:	055b      	lsls	r3, r3, #21
               ((uint32_t)macconf->Support2KPacket  << 22) |
 8005a72:	431a      	orrs	r2, r3
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8005a74:	683b      	ldr	r3, [r7, #0]
 8005a76:	7bdb      	ldrb	r3, [r3, #15]
 8005a78:	051b      	lsls	r3, r3, #20
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8005a7a:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8005a7c:	683a      	ldr	r2, [r7, #0]
 8005a7e:	7c12      	ldrb	r2, [r2, #16]
 8005a80:	2a00      	cmp	r2, #0
 8005a82:	d102      	bne.n	8005a8a <ETH_SetMACConfig+0x4a>
 8005a84:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8005a88:	e000      	b.n	8005a8c <ETH_SetMACConfig+0x4c>
 8005a8a:	2200      	movs	r2, #0
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8005a8c:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8005a8e:	683a      	ldr	r2, [r7, #0]
 8005a90:	7c52      	ldrb	r2, [r2, #17]
 8005a92:	2a00      	cmp	r2, #0
 8005a94:	d102      	bne.n	8005a9c <ETH_SetMACConfig+0x5c>
 8005a96:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8005a9a:	e000      	b.n	8005a9e <ETH_SetMACConfig+0x5e>
 8005a9c:	2200      	movs	r2, #0
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8005a9e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->JumboPacket << 16) |
 8005aa0:	683b      	ldr	r3, [r7, #0]
 8005aa2:	7c9b      	ldrb	r3, [r3, #18]
 8005aa4:	041b      	lsls	r3, r3, #16
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8005aa6:	431a      	orrs	r2, r3
               macconf->Speed |
 8005aa8:	683b      	ldr	r3, [r7, #0]
 8005aaa:	695b      	ldr	r3, [r3, #20]
               ((uint32_t)macconf->JumboPacket << 16) |
 8005aac:	431a      	orrs	r2, r3
               macconf->DuplexMode |
 8005aae:	683b      	ldr	r3, [r7, #0]
 8005ab0:	699b      	ldr	r3, [r3, #24]
               macconf->Speed |
 8005ab2:	431a      	orrs	r2, r3
               ((uint32_t)macconf->LoopbackMode << 12) |
 8005ab4:	683b      	ldr	r3, [r7, #0]
 8005ab6:	7f1b      	ldrb	r3, [r3, #28]
 8005ab8:	031b      	lsls	r3, r3, #12
               macconf->DuplexMode |
 8005aba:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8005abc:	683b      	ldr	r3, [r7, #0]
 8005abe:	7f5b      	ldrb	r3, [r3, #29]
 8005ac0:	02db      	lsls	r3, r3, #11
               ((uint32_t)macconf->LoopbackMode << 12) |
 8005ac2:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8005ac4:	683a      	ldr	r2, [r7, #0]
 8005ac6:	7f92      	ldrb	r2, [r2, #30]
 8005ac8:	2a00      	cmp	r2, #0
 8005aca:	d102      	bne.n	8005ad2 <ETH_SetMACConfig+0x92>
 8005acc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005ad0:	e000      	b.n	8005ad4 <ETH_SetMACConfig+0x94>
 8005ad2:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 8005ad4:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 8005ad6:	683b      	ldr	r3, [r7, #0]
 8005ad8:	7fdb      	ldrb	r3, [r3, #31]
 8005ada:	025b      	lsls	r3, r3, #9
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 8005adc:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 8005ade:	683a      	ldr	r2, [r7, #0]
 8005ae0:	f892 2020 	ldrb.w	r2, [r2, #32]
 8005ae4:	2a00      	cmp	r2, #0
 8005ae6:	d102      	bne.n	8005aee <ETH_SetMACConfig+0xae>
 8005ae8:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005aec:	e000      	b.n	8005af0 <ETH_SetMACConfig+0xb0>
 8005aee:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 8005af0:	431a      	orrs	r2, r3
               macconf->BackOffLimit |
 8005af2:	683b      	ldr	r3, [r7, #0]
 8005af4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 8005af6:	431a      	orrs	r2, r3
               ((uint32_t)macconf->DeferralCheck << 4) |
 8005af8:	683b      	ldr	r3, [r7, #0]
 8005afa:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005afe:	011b      	lsls	r3, r3, #4
               macconf->BackOffLimit |
 8005b00:	431a      	orrs	r2, r3
               macconf->PreambleLength);
 8005b02:	683b      	ldr	r3, [r7, #0]
 8005b04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  macregval = (macconf->InterPacketGapVal |
 8005b06:	4313      	orrs	r3, r2
 8005b08:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	681a      	ldr	r2, [r3, #0]
 8005b10:	4b56      	ldr	r3, [pc, #344]	; (8005c6c <ETH_SetMACConfig+0x22c>)
 8005b12:	4013      	ands	r3, r2
 8005b14:	687a      	ldr	r2, [r7, #4]
 8005b16:	6812      	ldr	r2, [r2, #0]
 8005b18:	68f9      	ldr	r1, [r7, #12]
 8005b1a:	430b      	orrs	r3, r1
 8005b1c:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8005b1e:	683b      	ldr	r3, [r7, #0]
 8005b20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b22:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 8005b24:	683b      	ldr	r3, [r7, #0]
 8005b26:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005b2a:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8005b2c:	431a      	orrs	r2, r3
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 8005b2e:	683b      	ldr	r3, [r7, #0]
 8005b30:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005b34:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 8005b36:	431a      	orrs	r2, r3
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8005b38:	683b      	ldr	r3, [r7, #0]
 8005b3a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8005b3e:	045b      	lsls	r3, r3, #17
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 8005b40:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U) << 16) |
 8005b42:	683a      	ldr	r2, [r7, #0]
 8005b44:	f892 2032 	ldrb.w	r2, [r2, #50]	; 0x32
 8005b48:	2a00      	cmp	r2, #0
 8005b4a:	d102      	bne.n	8005b52 <ETH_SetMACConfig+0x112>
 8005b4c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8005b50:	e000      	b.n	8005b54 <ETH_SetMACConfig+0x114>
 8005b52:	2200      	movs	r2, #0
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8005b54:	431a      	orrs	r2, r3
               macconf->GiantPacketSizeLimit);
 8005b56:	683b      	ldr	r3, [r7, #0]
 8005b58:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 8005b5a:	4313      	orrs	r3, r2
 8005b5c:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	685a      	ldr	r2, [r3, #4]
 8005b64:	4b42      	ldr	r3, [pc, #264]	; (8005c70 <ETH_SetMACConfig+0x230>)
 8005b66:	4013      	ands	r3, r2
 8005b68:	687a      	ldr	r2, [r7, #4]
 8005b6a:	6812      	ldr	r2, [r2, #0]
 8005b6c:	68f9      	ldr	r1, [r7, #12]
 8005b6e:	430b      	orrs	r3, r1
 8005b70:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8005b72:	683b      	ldr	r3, [r7, #0]
 8005b74:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005b78:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 8005b7a:	683b      	ldr	r3, [r7, #0]
 8005b7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8005b7e:	4313      	orrs	r3, r2
 8005b80:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	68da      	ldr	r2, [r3, #12]
 8005b88:	4b3a      	ldr	r3, [pc, #232]	; (8005c74 <ETH_SetMACConfig+0x234>)
 8005b8a:	4013      	ands	r3, r2
 8005b8c:	687a      	ldr	r2, [r7, #4]
 8005b8e:	6812      	ldr	r2, [r2, #0]
 8005b90:	68f9      	ldr	r1, [r7, #12]
 8005b92:	430b      	orrs	r3, r1
 8005b94:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8005b96:	683b      	ldr	r3, [r7, #0]
 8005b98:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8005b9c:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 8005b9e:	683b      	ldr	r3, [r7, #0]
 8005ba0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8005ba2:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7) |
 8005ba4:	683a      	ldr	r2, [r7, #0]
 8005ba6:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8005baa:	2a00      	cmp	r2, #0
 8005bac:	d101      	bne.n	8005bb2 <ETH_SetMACConfig+0x172>
 8005bae:	2280      	movs	r2, #128	; 0x80
 8005bb0:	e000      	b.n	8005bb4 <ETH_SetMACConfig+0x174>
 8005bb2:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 8005bb4:	431a      	orrs	r2, r3
               (macconf->PauseTime << 16));
 8005bb6:	683b      	ldr	r3, [r7, #0]
 8005bb8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005bba:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8005bbc:	4313      	orrs	r3, r2
 8005bbe:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005bc6:	f64f 730d 	movw	r3, #65293	; 0xff0d
 8005bca:	4013      	ands	r3, r2
 8005bcc:	687a      	ldr	r2, [r7, #4]
 8005bce:	6812      	ldr	r2, [r2, #0]
 8005bd0:	68f9      	ldr	r1, [r7, #12]
 8005bd2:	430b      	orrs	r3, r1
 8005bd4:	6713      	str	r3, [r2, #112]	; 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8005bd6:	683b      	ldr	r3, [r7, #0]
 8005bd8:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8005bdc:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 8005bde:	683b      	ldr	r3, [r7, #0]
 8005be0:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 8005be4:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8005be6:	4313      	orrs	r3, r2
 8005be8:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005bf2:	f023 0103 	bic.w	r1, r3, #3
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	68fa      	ldr	r2, [r7, #12]
 8005bfc:	430a      	orrs	r2, r1
 8005bfe:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 8005c0a:	f023 0172 	bic.w	r1, r3, #114	; 0x72
 8005c0e:	683b      	ldr	r3, [r7, #0]
 8005c10:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	430a      	orrs	r2, r1
 8005c18:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 8005c1c:	683b      	ldr	r3, [r7, #0]
 8005c1e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8005c20:	683a      	ldr	r2, [r7, #0]
 8005c22:	f892 2060 	ldrb.w	r2, [r2, #96]	; 0x60
 8005c26:	2a00      	cmp	r2, #0
 8005c28:	d101      	bne.n	8005c2e <ETH_SetMACConfig+0x1ee>
 8005c2a:	2240      	movs	r2, #64	; 0x40
 8005c2c:	e000      	b.n	8005c30 <ETH_SetMACConfig+0x1f0>
 8005c2e:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 8005c30:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 8005c32:	683b      	ldr	r3, [r7, #0]
 8005c34:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8005c38:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8005c3a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 8005c3c:	683b      	ldr	r3, [r7, #0]
 8005c3e:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 8005c42:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 8005c44:	4313      	orrs	r3, r2
 8005c46:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 8005c50:	f023 017b 	bic.w	r1, r3, #123	; 0x7b
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	68fa      	ldr	r2, [r7, #12]
 8005c5a:	430a      	orrs	r2, r1
 8005c5c:	f8c3 2d30 	str.w	r2, [r3, #3376]	; 0xd30
}
 8005c60:	bf00      	nop
 8005c62:	3714      	adds	r7, #20
 8005c64:	46bd      	mov	sp, r7
 8005c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c6a:	4770      	bx	lr
 8005c6c:	00048083 	.word	0x00048083
 8005c70:	c0f88000 	.word	0xc0f88000
 8005c74:	fffffef0 	.word	0xfffffef0

08005c78 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8005c78:	b480      	push	{r7}
 8005c7a:	b085      	sub	sp, #20
 8005c7c:	af00      	add	r7, sp, #0
 8005c7e:	6078      	str	r0, [r7, #4]
 8005c80:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005c8a:	681a      	ldr	r2, [r3, #0]
 8005c8c:	4b38      	ldr	r3, [pc, #224]	; (8005d70 <ETH_SetDMAConfig+0xf8>)
 8005c8e:	4013      	ands	r3, r2
 8005c90:	683a      	ldr	r2, [r7, #0]
 8005c92:	6811      	ldr	r1, [r2, #0]
 8005c94:	687a      	ldr	r2, [r7, #4]
 8005c96:	6812      	ldr	r2, [r2, #0]
 8005c98:	430b      	orrs	r3, r1
 8005c9a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8005c9e:	6013      	str	r3, [r2, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8005ca0:	683b      	ldr	r3, [r7, #0]
 8005ca2:	791b      	ldrb	r3, [r3, #4]
 8005ca4:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 8005ca6:	683b      	ldr	r3, [r7, #0]
 8005ca8:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8005caa:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 8005cac:	683b      	ldr	r3, [r7, #0]
 8005cae:	7b1b      	ldrb	r3, [r3, #12]
 8005cb0:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8005cb2:	4313      	orrs	r3, r2
 8005cb4:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005cbe:	685a      	ldr	r2, [r3, #4]
 8005cc0:	4b2c      	ldr	r3, [pc, #176]	; (8005d74 <ETH_SetDMAConfig+0xfc>)
 8005cc2:	4013      	ands	r3, r2
 8005cc4:	687a      	ldr	r2, [r7, #4]
 8005cc6:	6812      	ldr	r2, [r2, #0]
 8005cc8:	68f9      	ldr	r1, [r7, #12]
 8005cca:	430b      	orrs	r3, r1
 8005ccc:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8005cd0:	6053      	str	r3, [r2, #4]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8005cd2:	683b      	ldr	r3, [r7, #0]
 8005cd4:	7b5b      	ldrb	r3, [r3, #13]
 8005cd6:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 8005cd8:	683b      	ldr	r3, [r7, #0]
 8005cda:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8005cdc:	4313      	orrs	r3, r2
 8005cde:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005ce8:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
 8005cec:	4b22      	ldr	r3, [pc, #136]	; (8005d78 <ETH_SetDMAConfig+0x100>)
 8005cee:	4013      	ands	r3, r2
 8005cf0:	687a      	ldr	r2, [r7, #4]
 8005cf2:	6812      	ldr	r2, [r2, #0]
 8005cf4:	68f9      	ldr	r1, [r7, #12]
 8005cf6:	430b      	orrs	r3, r1
 8005cf8:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8005cfc:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 8005d00:	683b      	ldr	r3, [r7, #0]
 8005d02:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4) |
 8005d04:	683b      	ldr	r3, [r7, #0]
 8005d06:	7d1b      	ldrb	r3, [r3, #20]
 8005d08:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 8005d0a:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->TCPSegmentation << 12));
 8005d0c:	683b      	ldr	r3, [r7, #0]
 8005d0e:	7f5b      	ldrb	r3, [r3, #29]
 8005d10:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 8005d12:	4313      	orrs	r3, r2
 8005d14:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005d1e:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
 8005d22:	4b16      	ldr	r3, [pc, #88]	; (8005d7c <ETH_SetDMAConfig+0x104>)
 8005d24:	4013      	ands	r3, r2
 8005d26:	687a      	ldr	r2, [r7, #4]
 8005d28:	6812      	ldr	r2, [r2, #0]
 8005d2a:	68f9      	ldr	r1, [r7, #12]
 8005d2c:	430b      	orrs	r3, r1
 8005d2e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8005d32:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8005d36:	683b      	ldr	r3, [r7, #0]
 8005d38:	7f1b      	ldrb	r3, [r3, #28]
 8005d3a:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 8005d3c:	683b      	ldr	r3, [r7, #0]
 8005d3e:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8005d40:	4313      	orrs	r3, r2
 8005d42:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005d4c:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 8005d50:	4b0b      	ldr	r3, [pc, #44]	; (8005d80 <ETH_SetDMAConfig+0x108>)
 8005d52:	4013      	ands	r3, r2
 8005d54:	687a      	ldr	r2, [r7, #4]
 8005d56:	6812      	ldr	r2, [r2, #0]
 8005d58:	68f9      	ldr	r1, [r7, #12]
 8005d5a:	430b      	orrs	r3, r1
 8005d5c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8005d60:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
}
 8005d64:	bf00      	nop
 8005d66:	3714      	adds	r7, #20
 8005d68:	46bd      	mov	sp, r7
 8005d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d6e:	4770      	bx	lr
 8005d70:	ffff87fd 	.word	0xffff87fd
 8005d74:	ffff2ffe 	.word	0xffff2ffe
 8005d78:	fffec000 	.word	0xfffec000
 8005d7c:	ffc0efef 	.word	0xffc0efef
 8005d80:	7fc0ffff 	.word	0x7fc0ffff

08005d84 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8005d84:	b580      	push	{r7, lr}
 8005d86:	b0a4      	sub	sp, #144	; 0x90
 8005d88:	af00      	add	r7, sp, #0
 8005d8a:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 8005d8c:	2301      	movs	r3, #1
 8005d8e:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8005d92:	2300      	movs	r3, #0
 8005d94:	653b      	str	r3, [r7, #80]	; 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 8005d96:	2300      	movs	r3, #0
 8005d98:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8005d9c:	2300      	movs	r3, #0
 8005d9e:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 8005da2:	2301      	movs	r3, #1
 8005da4:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 8005da8:	2301      	movs	r3, #1
 8005daa:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 8005dae:	2301      	movs	r3, #1
 8005db0:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 8005db4:	2300      	movs	r3, #0
 8005db6:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 8005dba:	2301      	movs	r3, #1
 8005dbc:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8005dc0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005dc4:	647b      	str	r3, [r7, #68]	; 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 8005dc6:	2300      	movs	r3, #0
 8005dc8:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0;
 8005dcc:	2300      	movs	r3, #0
 8005dce:	66bb      	str	r3, [r7, #104]	; 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 8005dd0:	2300      	movs	r3, #0
 8005dd2:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 8005dd6:	2300      	movs	r3, #0
 8005dd8:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618;
 8005ddc:	f44f 63c3 	mov.w	r3, #1560	; 0x618
 8005de0:	663b      	str	r3, [r7, #96]	; 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 8005de2:	2300      	movs	r3, #0
 8005de4:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 8005de8:	2300      	movs	r3, #0
 8005dea:	637b      	str	r3, [r7, #52]	; 0x34
  macDefaultConf.Jabber = ENABLE;
 8005dec:	2301      	movs	r3, #1
 8005dee:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 8005df2:	2300      	movs	r3, #0
 8005df4:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 8005df8:	2300      	movs	r3, #0
 8005dfa:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 8005dfe:	2300      	movs	r3, #0
 8005e00:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.PauseTime = 0x0;
 8005e02:	2300      	movs	r3, #0
 8005e04:	677b      	str	r3, [r7, #116]	; 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 8005e06:	2300      	movs	r3, #0
 8005e08:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 8005e0a:	2300      	movs	r3, #0
 8005e0c:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8005e10:	2300      	movs	r3, #0
 8005e12:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 8005e16:	2301      	movs	r3, #1
 8005e18:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 8005e1c:	2320      	movs	r3, #32
 8005e1e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 8005e22:	2301      	movs	r3, #1
 8005e24:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 8005e28:	2300      	movs	r3, #0
 8005e2a:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 8005e2e:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 8005e32:	62fb      	str	r3, [r7, #44]	; 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 8005e34:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8005e38:	643b      	str	r3, [r7, #64]	; 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 8005e3a:	2300      	movs	r3, #0
 8005e3c:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 8005e40:	2302      	movs	r3, #2
 8005e42:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 8005e46:	2300      	movs	r3, #0
 8005e48:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8005e4c:	2300      	movs	r3, #0
 8005e4e:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 8005e52:	2300      	movs	r3, #0
 8005e54:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.Watchdog = ENABLE;
 8005e58:	2301      	movs	r3, #1
 8005e5a:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 8005e5e:	2300      	movs	r3, #0
 8005e60:	673b      	str	r3, [r7, #112]	; 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 8005e62:	2301      	movs	r3, #1
 8005e64:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8005e68:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005e6c:	4619      	mov	r1, r3
 8005e6e:	6878      	ldr	r0, [r7, #4]
 8005e70:	f7ff fde6 	bl	8005a40 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8005e74:	2301      	movs	r3, #1
 8005e76:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8005e78:	2301      	movs	r3, #1
 8005e7a:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 8005e7c:	2300      	movs	r3, #0
 8005e7e:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 8005e80:	2300      	movs	r3, #0
 8005e82:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 8005e86:	2300      	movs	r3, #0
 8005e88:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 8005e8a:	2300      	movs	r3, #0
 8005e8c:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8005e8e:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8005e92:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 8005e94:	2300      	movs	r3, #0
 8005e96:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8005e98:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8005e9c:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 8005e9e:	2300      	movs	r3, #0
 8005ea0:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.MaximumSegmentSize = ETH_SEGMENT_SIZE_DEFAULT;
 8005ea4:	f44f 7306 	mov.w	r3, #536	; 0x218
 8005ea8:	62bb      	str	r3, [r7, #40]	; 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8005eaa:	f107 0308 	add.w	r3, r7, #8
 8005eae:	4619      	mov	r1, r3
 8005eb0:	6878      	ldr	r0, [r7, #4]
 8005eb2:	f7ff fee1 	bl	8005c78 <ETH_SetDMAConfig>
}
 8005eb6:	bf00      	nop
 8005eb8:	3790      	adds	r7, #144	; 0x90
 8005eba:	46bd      	mov	sp, r7
 8005ebc:	bd80      	pop	{r7, pc}

08005ebe <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8005ebe:	b480      	push	{r7}
 8005ec0:	b085      	sub	sp, #20
 8005ec2:	af00      	add	r7, sp, #0
 8005ec4:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8005ec6:	2300      	movs	r3, #0
 8005ec8:	60fb      	str	r3, [r7, #12]
 8005eca:	e01d      	b.n	8005f08 <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	68d9      	ldr	r1, [r3, #12]
 8005ed0:	68fa      	ldr	r2, [r7, #12]
 8005ed2:	4613      	mov	r3, r2
 8005ed4:	005b      	lsls	r3, r3, #1
 8005ed6:	4413      	add	r3, r2
 8005ed8:	00db      	lsls	r3, r3, #3
 8005eda:	440b      	add	r3, r1
 8005edc:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8005ede:	68bb      	ldr	r3, [r7, #8]
 8005ee0:	2200      	movs	r2, #0
 8005ee2:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8005ee4:	68bb      	ldr	r3, [r7, #8]
 8005ee6:	2200      	movs	r2, #0
 8005ee8:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8005eea:	68bb      	ldr	r3, [r7, #8]
 8005eec:	2200      	movs	r2, #0
 8005eee:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8005ef0:	68bb      	ldr	r3, [r7, #8]
 8005ef2:	2200      	movs	r2, #0
 8005ef4:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8005ef6:	68b9      	ldr	r1, [r7, #8]
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	68fa      	ldr	r2, [r7, #12]
 8005efc:	3206      	adds	r2, #6
 8005efe:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	3301      	adds	r3, #1
 8005f06:	60fb      	str	r3, [r7, #12]
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	2b03      	cmp	r3, #3
 8005f0c:	d9de      	bls.n	8005ecc <ETH_DMATxDescListInit+0xe>

  }

  heth->TxDescList.CurTxDesc = 0;
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	2200      	movs	r2, #0
 8005f12:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT - 1U));
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005f1c:	461a      	mov	r2, r3
 8005f1e:	2303      	movs	r3, #3
 8005f20:	f8c2 312c 	str.w	r3, [r2, #300]	; 0x12c

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	68da      	ldr	r2, [r3, #12]
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005f30:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	68da      	ldr	r2, [r3, #12]
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005f40:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
}
 8005f44:	bf00      	nop
 8005f46:	3714      	adds	r7, #20
 8005f48:	46bd      	mov	sp, r7
 8005f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f4e:	4770      	bx	lr

08005f50 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8005f50:	b480      	push	{r7}
 8005f52:	b085      	sub	sp, #20
 8005f54:	af00      	add	r7, sp, #0
 8005f56:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8005f58:	2300      	movs	r3, #0
 8005f5a:	60fb      	str	r3, [r7, #12]
 8005f5c:	e023      	b.n	8005fa6 <ETH_DMARxDescListInit+0x56>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	6919      	ldr	r1, [r3, #16]
 8005f62:	68fa      	ldr	r2, [r7, #12]
 8005f64:	4613      	mov	r3, r2
 8005f66:	005b      	lsls	r3, r3, #1
 8005f68:	4413      	add	r3, r2
 8005f6a:	00db      	lsls	r3, r3, #3
 8005f6c:	440b      	add	r3, r1
 8005f6e:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8005f70:	68bb      	ldr	r3, [r7, #8]
 8005f72:	2200      	movs	r2, #0
 8005f74:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8005f76:	68bb      	ldr	r3, [r7, #8]
 8005f78:	2200      	movs	r2, #0
 8005f7a:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8005f7c:	68bb      	ldr	r3, [r7, #8]
 8005f7e:	2200      	movs	r2, #0
 8005f80:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8005f82:	68bb      	ldr	r3, [r7, #8]
 8005f84:	2200      	movs	r2, #0
 8005f86:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8005f88:	68bb      	ldr	r3, [r7, #8]
 8005f8a:	2200      	movs	r2, #0
 8005f8c:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8005f8e:	68bb      	ldr	r3, [r7, #8]
 8005f90:	2200      	movs	r2, #0
 8005f92:	615a      	str	r2, [r3, #20]


    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8005f94:	68b9      	ldr	r1, [r7, #8]
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	68fa      	ldr	r2, [r7, #12]
 8005f9a:	3212      	adds	r2, #18
 8005f9c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	3301      	adds	r3, #1
 8005fa4:	60fb      	str	r3, [r7, #12]
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	2b03      	cmp	r3, #3
 8005faa:	d9d8      	bls.n	8005f5e <ETH_DMARxDescListInit+0xe>

  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	2200      	movs	r2, #0
 8005fb0:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	2200      	movs	r2, #0
 8005fb6:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	2200      	movs	r2, #0
 8005fbc:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	2200      	movs	r2, #0
 8005fc2:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	2200      	movs	r2, #0
 8005fc8:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1U)));
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005fd2:	461a      	mov	r2, r3
 8005fd4:	2303      	movs	r3, #3
 8005fd6:	f8c2 3130 	str.w	r3, [r2, #304]	; 0x130

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	691a      	ldr	r2, [r3, #16]
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005fe6:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1U))));
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	691b      	ldr	r3, [r3, #16]
 8005fee:	f103 0248 	add.w	r2, r3, #72	; 0x48
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005ffa:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
}
 8005ffe:	bf00      	nop
 8006000:	3714      	adds	r7, #20
 8006002:	46bd      	mov	sp, r7
 8006004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006008:	4770      	bx	lr
	...

0800600c <ETH_Prepare_Tx_Descriptors>:
  * @param  pTxConfig: Tx packet configuration
  * @param  ItMode: Enable or disable Tx EOT interrept
  * @retval Status
  */
static uint32_t ETH_Prepare_Tx_Descriptors(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig, uint32_t ItMode)
{
 800600c:	b480      	push	{r7}
 800600e:	b08d      	sub	sp, #52	; 0x34
 8006010:	af00      	add	r7, sp, #0
 8006012:	60f8      	str	r0, [r7, #12]
 8006014:	60b9      	str	r1, [r7, #8]
 8006016:	607a      	str	r2, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	3318      	adds	r3, #24
 800601c:	617b      	str	r3, [r7, #20]
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 800601e:	697b      	ldr	r3, [r7, #20]
 8006020:	691b      	ldr	r3, [r3, #16]
 8006022:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t firstdescidx = dmatxdesclist->CurTxDesc;
 8006024:	697b      	ldr	r3, [r7, #20]
 8006026:	691b      	ldr	r3, [r3, #16]
 8006028:	613b      	str	r3, [r7, #16]
  uint32_t idx;
  uint32_t descnbr = 0;
 800602a:	2300      	movs	r3, #0
 800602c:	627b      	str	r3, [r7, #36]	; 0x24
  ETH_DMADescTypeDef *dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 800602e:	697b      	ldr	r3, [r7, #20]
 8006030:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006032:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006036:	623b      	str	r3, [r7, #32]

  ETH_BufferTypeDef  *txbuffer = pTxConfig->TxBuffer;
 8006038:	68bb      	ldr	r3, [r7, #8]
 800603a:	689b      	ldr	r3, [r3, #8]
 800603c:	61fb      	str	r3, [r7, #28]
  uint32_t           bd_count = 0;
 800603e:	2300      	movs	r3, #0
 8006040:	61bb      	str	r3, [r7, #24]

  /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
  if ((READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCWBF_OWN) == ETH_DMATXNDESCWBF_OWN)
 8006042:	6a3b      	ldr	r3, [r7, #32]
 8006044:	68db      	ldr	r3, [r3, #12]
 8006046:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800604a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800604e:	d007      	beq.n	8006060 <ETH_Prepare_Tx_Descriptors+0x54>
      || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8006050:	697a      	ldr	r2, [r7, #20]
 8006052:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006054:	3304      	adds	r3, #4
 8006056:	009b      	lsls	r3, r3, #2
 8006058:	4413      	add	r3, r2
 800605a:	685b      	ldr	r3, [r3, #4]
 800605c:	2b00      	cmp	r3, #0
 800605e:	d001      	beq.n	8006064 <ETH_Prepare_Tx_Descriptors+0x58>
  {
    return HAL_ETH_ERROR_BUSY;
 8006060:	2302      	movs	r3, #2
 8006062:	e259      	b.n	8006518 <ETH_Prepare_Tx_Descriptors+0x50c>

  /***************************************************************************/
  /*****************    Context descriptor configuration (Optional) **********/
  /***************************************************************************/
  /* If VLAN tag is enabled for this packet */
  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != (uint32_t)RESET)
 8006064:	68bb      	ldr	r3, [r7, #8]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	f003 0304 	and.w	r3, r3, #4
 800606c:	2b00      	cmp	r3, #0
 800606e:	d044      	beq.n	80060fa <ETH_Prepare_Tx_Descriptors+0xee>
  {
    /* Set vlan tag value */
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXCDESC_VT, pTxConfig->VlanTag);
 8006070:	6a3b      	ldr	r3, [r7, #32]
 8006072:	68da      	ldr	r2, [r3, #12]
 8006074:	4b75      	ldr	r3, [pc, #468]	; (800624c <ETH_Prepare_Tx_Descriptors+0x240>)
 8006076:	4013      	ands	r3, r2
 8006078:	68ba      	ldr	r2, [r7, #8]
 800607a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800607c:	431a      	orrs	r2, r3
 800607e:	6a3b      	ldr	r3, [r7, #32]
 8006080:	60da      	str	r2, [r3, #12]
    /* Set vlan tag valid bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_VLTV);
 8006082:	6a3b      	ldr	r3, [r7, #32]
 8006084:	68db      	ldr	r3, [r3, #12]
 8006086:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800608a:	6a3b      	ldr	r3, [r7, #32]
 800608c:	60da      	str	r2, [r3, #12]
    /* Set the descriptor as the vlan input source */
    SET_BIT(heth->Instance->MACVIR, ETH_MACVIR_VLTI);
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800609c:	661a      	str	r2, [r3, #96]	; 0x60

    /* if inner VLAN is enabled */
    if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_INNERVLANTAG) != (uint32_t)RESET)
 800609e:	68bb      	ldr	r3, [r7, #8]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	f003 0308 	and.w	r3, r3, #8
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	d027      	beq.n	80060fa <ETH_Prepare_Tx_Descriptors+0xee>
    {
      /* Set inner vlan tag value */
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXCDESC_IVT, (pTxConfig->InnerVlanTag << 16));
 80060aa:	6a3b      	ldr	r3, [r7, #32]
 80060ac:	689b      	ldr	r3, [r3, #8]
 80060ae:	b29a      	uxth	r2, r3
 80060b0:	68bb      	ldr	r3, [r7, #8]
 80060b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060b4:	041b      	lsls	r3, r3, #16
 80060b6:	431a      	orrs	r2, r3
 80060b8:	6a3b      	ldr	r3, [r7, #32]
 80060ba:	609a      	str	r2, [r3, #8]
      /* Set inner vlan tag valid bit */
      SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_IVLTV);
 80060bc:	6a3b      	ldr	r3, [r7, #32]
 80060be:	68db      	ldr	r3, [r3, #12]
 80060c0:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80060c4:	6a3b      	ldr	r3, [r7, #32]
 80060c6:	60da      	str	r2, [r3, #12]

      /* Set Vlan Tag control */
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXCDESC_IVTIR, pTxConfig->InnerVlanCtrl);
 80060c8:	6a3b      	ldr	r3, [r7, #32]
 80060ca:	68db      	ldr	r3, [r3, #12]
 80060cc:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80060d0:	68bb      	ldr	r3, [r7, #8]
 80060d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060d4:	431a      	orrs	r2, r3
 80060d6:	6a3b      	ldr	r3, [r7, #32]
 80060d8:	60da      	str	r2, [r3, #12]

      /* Set the descriptor as the inner vlan input source */
      SET_BIT(heth->Instance->MACIVIR, ETH_MACIVIR_VLTI);
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80060e8:	665a      	str	r2, [r3, #100]	; 0x64
      /* Enable double VLAN processing */
      SET_BIT(heth->Instance->MACVTR, ETH_MACVTR_EDVLP);
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 80060f8:	651a      	str	r2, [r3, #80]	; 0x50
    }
  }

  /* if tcp segmentation is enabled for this packet */
  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != (uint32_t)RESET)
 80060fa:	68bb      	ldr	r3, [r7, #8]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	f003 0310 	and.w	r3, r3, #16
 8006102:	2b00      	cmp	r3, #0
 8006104:	d00e      	beq.n	8006124 <ETH_Prepare_Tx_Descriptors+0x118>
  {
    /* Set MSS value */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXCDESC_MSS, pTxConfig->MaxSegmentSize);
 8006106:	6a3b      	ldr	r3, [r7, #32]
 8006108:	689a      	ldr	r2, [r3, #8]
 800610a:	4b51      	ldr	r3, [pc, #324]	; (8006250 <ETH_Prepare_Tx_Descriptors+0x244>)
 800610c:	4013      	ands	r3, r2
 800610e:	68ba      	ldr	r2, [r7, #8]
 8006110:	6992      	ldr	r2, [r2, #24]
 8006112:	431a      	orrs	r2, r3
 8006114:	6a3b      	ldr	r3, [r7, #32]
 8006116:	609a      	str	r2, [r3, #8]
    /* Set MSS valid bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_TCMSSV);
 8006118:	6a3b      	ldr	r3, [r7, #32]
 800611a:	68db      	ldr	r3, [r3, #12]
 800611c:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 8006120:	6a3b      	ldr	r3, [r7, #32]
 8006122:	60da      	str	r2, [r3, #12]
  }

  if ((READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != (uint32_t)RESET)
 8006124:	68bb      	ldr	r3, [r7, #8]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	f003 0304 	and.w	r3, r3, #4
 800612c:	2b00      	cmp	r3, #0
 800612e:	d105      	bne.n	800613c <ETH_Prepare_Tx_Descriptors+0x130>
      || (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != (uint32_t)RESET))
 8006130:	68bb      	ldr	r3, [r7, #8]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	f003 0310 	and.w	r3, r3, #16
 8006138:	2b00      	cmp	r3, #0
 800613a:	d036      	beq.n	80061aa <ETH_Prepare_Tx_Descriptors+0x19e>
  {
    /* Set as context descriptor */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_CTXT);
 800613c:	6a3b      	ldr	r3, [r7, #32]
 800613e:	68db      	ldr	r3, [r3, #12]
 8006140:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8006144:	6a3b      	ldr	r3, [r7, #32]
 8006146:	60da      	str	r2, [r3, #12]
  __ASM volatile ("dmb 0xF":::"memory");
 8006148:	f3bf 8f5f 	dmb	sy
}
 800614c:	bf00      	nop
    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set own bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_OWN);
 800614e:	6a3b      	ldr	r3, [r7, #32]
 8006150:	68db      	ldr	r3, [r3, #12]
 8006152:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8006156:	6a3b      	ldr	r3, [r7, #32]
 8006158:	60da      	str	r2, [r3, #12]
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 800615a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800615c:	3301      	adds	r3, #1
 800615e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006160:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006162:	2b03      	cmp	r3, #3
 8006164:	d902      	bls.n	800616c <ETH_Prepare_Tx_Descriptors+0x160>
 8006166:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006168:	3b04      	subs	r3, #4
 800616a:	62fb      	str	r3, [r7, #44]	; 0x2c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 800616c:	697b      	ldr	r3, [r7, #20]
 800616e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006170:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006174:	623b      	str	r3, [r7, #32]

    descnbr += 1U;
 8006176:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006178:	3301      	adds	r3, #1
 800617a:	627b      	str	r3, [r7, #36]	; 0x24

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if (READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCWBF_OWN) == ETH_DMATXNDESCWBF_OWN)
 800617c:	6a3b      	ldr	r3, [r7, #32]
 800617e:	68db      	ldr	r3, [r3, #12]
 8006180:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006184:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006188:	d10f      	bne.n	80061aa <ETH_Prepare_Tx_Descriptors+0x19e>
    {
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[firstdescidx];
 800618a:	697b      	ldr	r3, [r7, #20]
 800618c:	693a      	ldr	r2, [r7, #16]
 800618e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006192:	623b      	str	r3, [r7, #32]
  __ASM volatile ("dmb 0xF":::"memory");
 8006194:	f3bf 8f5f 	dmb	sy
}
 8006198:	bf00      	nop
      /* Ensure rest of descriptor is written to RAM before the OWN bit */
      __DMB();
      /* Clear own bit */
      CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXCDESC_OWN);
 800619a:	6a3b      	ldr	r3, [r7, #32]
 800619c:	68db      	ldr	r3, [r3, #12]
 800619e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80061a2:	6a3b      	ldr	r3, [r7, #32]
 80061a4:	60da      	str	r2, [r3, #12]

      return HAL_ETH_ERROR_BUSY;
 80061a6:	2302      	movs	r3, #2
 80061a8:	e1b6      	b.n	8006518 <ETH_Prepare_Tx_Descriptors+0x50c>

  /***************************************************************************/
  /*****************    Normal descriptors configuration     *****************/
  /***************************************************************************/

  descnbr += 1U;
 80061aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061ac:	3301      	adds	r3, #1
 80061ae:	627b      	str	r3, [r7, #36]	; 0x24

  /* Set header or buffer 1 address */
  WRITE_REG(dmatxdesc->DESC0, (uint32_t)txbuffer->buffer);
 80061b0:	69fb      	ldr	r3, [r7, #28]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	461a      	mov	r2, r3
 80061b6:	6a3b      	ldr	r3, [r7, #32]
 80061b8:	601a      	str	r2, [r3, #0]
  /* Set header or buffer 1 Length */
  MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B1L, txbuffer->len);
 80061ba:	6a3b      	ldr	r3, [r7, #32]
 80061bc:	689a      	ldr	r2, [r3, #8]
 80061be:	4b24      	ldr	r3, [pc, #144]	; (8006250 <ETH_Prepare_Tx_Descriptors+0x244>)
 80061c0:	4013      	ands	r3, r2
 80061c2:	69fa      	ldr	r2, [r7, #28]
 80061c4:	6852      	ldr	r2, [r2, #4]
 80061c6:	431a      	orrs	r2, r3
 80061c8:	6a3b      	ldr	r3, [r7, #32]
 80061ca:	609a      	str	r2, [r3, #8]

  if (txbuffer->next != NULL)
 80061cc:	69fb      	ldr	r3, [r7, #28]
 80061ce:	689b      	ldr	r3, [r3, #8]
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	d012      	beq.n	80061fa <ETH_Prepare_Tx_Descriptors+0x1ee>
  {
    txbuffer = txbuffer->next;
 80061d4:	69fb      	ldr	r3, [r7, #28]
 80061d6:	689b      	ldr	r3, [r3, #8]
 80061d8:	61fb      	str	r3, [r7, #28]
    /* Set buffer 2 address */
    WRITE_REG(dmatxdesc->DESC1, (uint32_t)txbuffer->buffer);
 80061da:	69fb      	ldr	r3, [r7, #28]
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	461a      	mov	r2, r3
 80061e0:	6a3b      	ldr	r3, [r7, #32]
 80061e2:	605a      	str	r2, [r3, #4]
    /* Set buffer 2 Length */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, (txbuffer->len << 16));
 80061e4:	6a3b      	ldr	r3, [r7, #32]
 80061e6:	689a      	ldr	r2, [r3, #8]
 80061e8:	4b1a      	ldr	r3, [pc, #104]	; (8006254 <ETH_Prepare_Tx_Descriptors+0x248>)
 80061ea:	4013      	ands	r3, r2
 80061ec:	69fa      	ldr	r2, [r7, #28]
 80061ee:	6852      	ldr	r2, [r2, #4]
 80061f0:	0412      	lsls	r2, r2, #16
 80061f2:	431a      	orrs	r2, r3
 80061f4:	6a3b      	ldr	r3, [r7, #32]
 80061f6:	609a      	str	r2, [r3, #8]
 80061f8:	e008      	b.n	800620c <ETH_Prepare_Tx_Descriptors+0x200>
  }
  else
  {
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 80061fa:	6a3b      	ldr	r3, [r7, #32]
 80061fc:	2200      	movs	r2, #0
 80061fe:	605a      	str	r2, [r3, #4]
    /* Set buffer 2 Length */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, 0x0U);
 8006200:	6a3b      	ldr	r3, [r7, #32]
 8006202:	689a      	ldr	r2, [r3, #8]
 8006204:	4b13      	ldr	r3, [pc, #76]	; (8006254 <ETH_Prepare_Tx_Descriptors+0x248>)
 8006206:	4013      	ands	r3, r2
 8006208:	6a3a      	ldr	r2, [r7, #32]
 800620a:	6093      	str	r3, [r2, #8]
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != (uint32_t)RESET)
 800620c:	68bb      	ldr	r3, [r7, #8]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	f003 0310 	and.w	r3, r3, #16
 8006214:	2b00      	cmp	r3, #0
 8006216:	d021      	beq.n	800625c <ETH_Prepare_Tx_Descriptors+0x250>
  {
    /* Set TCP Header length */
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_THL, (pTxConfig->TCPHeaderLen << 19));
 8006218:	6a3b      	ldr	r3, [r7, #32]
 800621a:	68db      	ldr	r3, [r3, #12]
 800621c:	f423 02f0 	bic.w	r2, r3, #7864320	; 0x780000
 8006220:	68bb      	ldr	r3, [r7, #8]
 8006222:	6a1b      	ldr	r3, [r3, #32]
 8006224:	04db      	lsls	r3, r3, #19
 8006226:	431a      	orrs	r2, r3
 8006228:	6a3b      	ldr	r3, [r7, #32]
 800622a:	60da      	str	r2, [r3, #12]
    /* Set TCP payload length */
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TPL, pTxConfig->PayloadLen);
 800622c:	6a3b      	ldr	r3, [r7, #32]
 800622e:	68da      	ldr	r2, [r3, #12]
 8006230:	4b09      	ldr	r3, [pc, #36]	; (8006258 <ETH_Prepare_Tx_Descriptors+0x24c>)
 8006232:	4013      	ands	r3, r2
 8006234:	68ba      	ldr	r2, [r7, #8]
 8006236:	69d2      	ldr	r2, [r2, #28]
 8006238:	431a      	orrs	r2, r3
 800623a:	6a3b      	ldr	r3, [r7, #32]
 800623c:	60da      	str	r2, [r3, #12]
    /* Set TCP Segmentation Enabled bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TSE);
 800623e:	6a3b      	ldr	r3, [r7, #32]
 8006240:	68db      	ldr	r3, [r3, #12]
 8006242:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8006246:	6a3b      	ldr	r3, [r7, #32]
 8006248:	60da      	str	r2, [r3, #12]
 800624a:	e02e      	b.n	80062aa <ETH_Prepare_Tx_Descriptors+0x29e>
 800624c:	ffff0000 	.word	0xffff0000
 8006250:	ffffc000 	.word	0xffffc000
 8006254:	c000ffff 	.word	0xc000ffff
 8006258:	fffc0000 	.word	0xfffc0000
  }
  else
  {
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FL, pTxConfig->Length);
 800625c:	6a3b      	ldr	r3, [r7, #32]
 800625e:	68da      	ldr	r2, [r3, #12]
 8006260:	4b7b      	ldr	r3, [pc, #492]	; (8006450 <ETH_Prepare_Tx_Descriptors+0x444>)
 8006262:	4013      	ands	r3, r2
 8006264:	68ba      	ldr	r2, [r7, #8]
 8006266:	6852      	ldr	r2, [r2, #4]
 8006268:	431a      	orrs	r2, r3
 800626a:	6a3b      	ldr	r3, [r7, #32]
 800626c:	60da      	str	r2, [r3, #12]

    if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != (uint32_t)RESET)
 800626e:	68bb      	ldr	r3, [r7, #8]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	f003 0301 	and.w	r3, r3, #1
 8006276:	2b00      	cmp	r3, #0
 8006278:	d008      	beq.n	800628c <ETH_Prepare_Tx_Descriptors+0x280>
    {
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CIC, pTxConfig->ChecksumCtrl);
 800627a:	6a3b      	ldr	r3, [r7, #32]
 800627c:	68db      	ldr	r3, [r3, #12]
 800627e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006282:	68bb      	ldr	r3, [r7, #8]
 8006284:	695b      	ldr	r3, [r3, #20]
 8006286:	431a      	orrs	r2, r3
 8006288:	6a3b      	ldr	r3, [r7, #32]
 800628a:	60da      	str	r2, [r3, #12]
    }

    if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CRCPAD) != (uint32_t)RESET)
 800628c:	68bb      	ldr	r3, [r7, #8]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	f003 0320 	and.w	r3, r3, #32
 8006294:	2b00      	cmp	r3, #0
 8006296:	d008      	beq.n	80062aa <ETH_Prepare_Tx_Descriptors+0x29e>
    {
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CPC, pTxConfig->CRCPadCtrl);
 8006298:	6a3b      	ldr	r3, [r7, #32]
 800629a:	68db      	ldr	r3, [r3, #12]
 800629c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80062a0:	68bb      	ldr	r3, [r7, #8]
 80062a2:	691b      	ldr	r3, [r3, #16]
 80062a4:	431a      	orrs	r2, r3
 80062a6:	6a3b      	ldr	r3, [r7, #32]
 80062a8:	60da      	str	r2, [r3, #12]
    }
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != (uint32_t)RESET)
 80062aa:	68bb      	ldr	r3, [r7, #8]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	f003 0304 	and.w	r3, r3, #4
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	d008      	beq.n	80062c8 <ETH_Prepare_Tx_Descriptors+0x2bc>
  {
    /* Set Vlan Tag control */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_VTIR, pTxConfig->VlanCtrl);
 80062b6:	6a3b      	ldr	r3, [r7, #32]
 80062b8:	689b      	ldr	r3, [r3, #8]
 80062ba:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80062be:	68bb      	ldr	r3, [r7, #8]
 80062c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80062c2:	431a      	orrs	r2, r3
 80062c4:	6a3b      	ldr	r3, [r7, #32]
 80062c6:	609a      	str	r2, [r3, #8]
  }

  /* Mark it as First Descriptor */
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FD);
 80062c8:	6a3b      	ldr	r3, [r7, #32]
 80062ca:	68db      	ldr	r3, [r3, #12]
 80062cc:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80062d0:	6a3b      	ldr	r3, [r7, #32]
 80062d2:	60da      	str	r2, [r3, #12]
  /* Mark it as NORMAL descriptor */
  CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CTXT);
 80062d4:	6a3b      	ldr	r3, [r7, #32]
 80062d6:	68db      	ldr	r3, [r3, #12]
 80062d8:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80062dc:	6a3b      	ldr	r3, [r7, #32]
 80062de:	60da      	str	r2, [r3, #12]
  __ASM volatile ("dmb 0xF":::"memory");
 80062e0:	f3bf 8f5f 	dmb	sy
}
 80062e4:	bf00      	nop
  /* Ensure rest of descriptor is written to RAM before the OWN bit */
  __DMB();
  /* set OWN bit of FIRST descriptor */
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 80062e6:	6a3b      	ldr	r3, [r7, #32]
 80062e8:	68db      	ldr	r3, [r3, #12]
 80062ea:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80062ee:	6a3b      	ldr	r3, [r7, #32]
 80062f0:	60da      	str	r2, [r3, #12]

  /* If source address insertion/replacement is enabled for this packet */
  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_SAIC) != (uint32_t)RESET)
 80062f2:	68bb      	ldr	r3, [r7, #8]
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	f003 0302 	and.w	r3, r3, #2
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	f000 80da 	beq.w	80064b4 <ETH_Prepare_Tx_Descriptors+0x4a8>
  {
    MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_SAIC, pTxConfig->SrcAddrCtrl);
 8006300:	6a3b      	ldr	r3, [r7, #32]
 8006302:	68db      	ldr	r3, [r3, #12]
 8006304:	f023 7260 	bic.w	r2, r3, #58720256	; 0x3800000
 8006308:	68bb      	ldr	r3, [r7, #8]
 800630a:	68db      	ldr	r3, [r3, #12]
 800630c:	431a      	orrs	r2, r3
 800630e:	6a3b      	ldr	r3, [r7, #32]
 8006310:	60da      	str	r2, [r3, #12]
  }

  /* only if the packet is split into more than one descriptors > 1 */
  while (txbuffer->next != NULL)
 8006312:	e0cf      	b.n	80064b4 <ETH_Prepare_Tx_Descriptors+0x4a8>
  {
    /* Clear the LD bit of previous descriptor */
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_LD);
 8006314:	6a3b      	ldr	r3, [r7, #32]
 8006316:	68db      	ldr	r3, [r3, #12]
 8006318:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800631c:	6a3b      	ldr	r3, [r7, #32]
 800631e:	60da      	str	r2, [r3, #12]
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 8006320:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006322:	3301      	adds	r3, #1
 8006324:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006326:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006328:	2b03      	cmp	r3, #3
 800632a:	d902      	bls.n	8006332 <ETH_Prepare_Tx_Descriptors+0x326>
 800632c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800632e:	3b04      	subs	r3, #4
 8006330:	62fb      	str	r3, [r7, #44]	; 0x2c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8006332:	697b      	ldr	r3, [r7, #20]
 8006334:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006336:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800633a:	623b      	str	r3, [r7, #32]

    /* Clear the FD bit of new Descriptor */
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FD);
 800633c:	6a3b      	ldr	r3, [r7, #32]
 800633e:	68db      	ldr	r3, [r3, #12]
 8006340:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8006344:	6a3b      	ldr	r3, [r7, #32]
 8006346:	60da      	str	r2, [r3, #12]

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if ((READ_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN) == ETH_DMATXNDESCRF_OWN)
 8006348:	6a3b      	ldr	r3, [r7, #32]
 800634a:	68db      	ldr	r3, [r3, #12]
 800634c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006350:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006354:	d007      	beq.n	8006366 <ETH_Prepare_Tx_Descriptors+0x35a>
        || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8006356:	697a      	ldr	r2, [r7, #20]
 8006358:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800635a:	3304      	adds	r3, #4
 800635c:	009b      	lsls	r3, r3, #2
 800635e:	4413      	add	r3, r2
 8006360:	685b      	ldr	r3, [r3, #4]
 8006362:	2b00      	cmp	r3, #0
 8006364:	d029      	beq.n	80063ba <ETH_Prepare_Tx_Descriptors+0x3ae>
    {
      descidx = firstdescidx;
 8006366:	693b      	ldr	r3, [r7, #16]
 8006368:	62fb      	str	r3, [r7, #44]	; 0x2c
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 800636a:	697b      	ldr	r3, [r7, #20]
 800636c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800636e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006372:	623b      	str	r3, [r7, #32]

      /* clear previous desc own bit */
      for (idx = 0; idx < descnbr; idx ++)
 8006374:	2300      	movs	r3, #0
 8006376:	62bb      	str	r3, [r7, #40]	; 0x28
 8006378:	e019      	b.n	80063ae <ETH_Prepare_Tx_Descriptors+0x3a2>
  __ASM volatile ("dmb 0xF":::"memory");
 800637a:	f3bf 8f5f 	dmb	sy
}
 800637e:	bf00      	nop
      {
        /* Ensure rest of descriptor is written to RAM before the OWN bit */
        __DMB();

        CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 8006380:	6a3b      	ldr	r3, [r7, #32]
 8006382:	68db      	ldr	r3, [r3, #12]
 8006384:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8006388:	6a3b      	ldr	r3, [r7, #32]
 800638a:	60da      	str	r2, [r3, #12]

        /* Increment current tx descriptor index */
        INCR_TX_DESC_INDEX(descidx, 1U);
 800638c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800638e:	3301      	adds	r3, #1
 8006390:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006392:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006394:	2b03      	cmp	r3, #3
 8006396:	d902      	bls.n	800639e <ETH_Prepare_Tx_Descriptors+0x392>
 8006398:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800639a:	3b04      	subs	r3, #4
 800639c:	62fb      	str	r3, [r7, #44]	; 0x2c
        /* Get current descriptor address */
        dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 800639e:	697b      	ldr	r3, [r7, #20]
 80063a0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80063a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80063a6:	623b      	str	r3, [r7, #32]
      for (idx = 0; idx < descnbr; idx ++)
 80063a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063aa:	3301      	adds	r3, #1
 80063ac:	62bb      	str	r3, [r7, #40]	; 0x28
 80063ae:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80063b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063b2:	429a      	cmp	r2, r3
 80063b4:	d3e1      	bcc.n	800637a <ETH_Prepare_Tx_Descriptors+0x36e>
      }

      return HAL_ETH_ERROR_BUSY;
 80063b6:	2302      	movs	r3, #2
 80063b8:	e0ae      	b.n	8006518 <ETH_Prepare_Tx_Descriptors+0x50c>
    }

    descnbr += 1U;
 80063ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063bc:	3301      	adds	r3, #1
 80063be:	627b      	str	r3, [r7, #36]	; 0x24

    /* Get the next Tx buffer in the list */
    txbuffer = txbuffer->next;
 80063c0:	69fb      	ldr	r3, [r7, #28]
 80063c2:	689b      	ldr	r3, [r3, #8]
 80063c4:	61fb      	str	r3, [r7, #28]

    /* Set header or buffer 1 address */
    WRITE_REG(dmatxdesc->DESC0, (uint32_t)txbuffer->buffer);
 80063c6:	69fb      	ldr	r3, [r7, #28]
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	461a      	mov	r2, r3
 80063cc:	6a3b      	ldr	r3, [r7, #32]
 80063ce:	601a      	str	r2, [r3, #0]
    /* Set header or buffer 1 Length */
    MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B1L, txbuffer->len);
 80063d0:	6a3b      	ldr	r3, [r7, #32]
 80063d2:	689a      	ldr	r2, [r3, #8]
 80063d4:	4b1f      	ldr	r3, [pc, #124]	; (8006454 <ETH_Prepare_Tx_Descriptors+0x448>)
 80063d6:	4013      	ands	r3, r2
 80063d8:	69fa      	ldr	r2, [r7, #28]
 80063da:	6852      	ldr	r2, [r2, #4]
 80063dc:	431a      	orrs	r2, r3
 80063de:	6a3b      	ldr	r3, [r7, #32]
 80063e0:	609a      	str	r2, [r3, #8]

    if (txbuffer->next != NULL)
 80063e2:	69fb      	ldr	r3, [r7, #28]
 80063e4:	689b      	ldr	r3, [r3, #8]
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	d012      	beq.n	8006410 <ETH_Prepare_Tx_Descriptors+0x404>
    {
      /* Get the next Tx buffer in the list */
      txbuffer = txbuffer->next;
 80063ea:	69fb      	ldr	r3, [r7, #28]
 80063ec:	689b      	ldr	r3, [r3, #8]
 80063ee:	61fb      	str	r3, [r7, #28]
      /* Set buffer 2 address */
      WRITE_REG(dmatxdesc->DESC1, (uint32_t)txbuffer->buffer);
 80063f0:	69fb      	ldr	r3, [r7, #28]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	461a      	mov	r2, r3
 80063f6:	6a3b      	ldr	r3, [r7, #32]
 80063f8:	605a      	str	r2, [r3, #4]
      /* Set buffer 2 Length */
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, (txbuffer->len << 16));
 80063fa:	6a3b      	ldr	r3, [r7, #32]
 80063fc:	689a      	ldr	r2, [r3, #8]
 80063fe:	4b16      	ldr	r3, [pc, #88]	; (8006458 <ETH_Prepare_Tx_Descriptors+0x44c>)
 8006400:	4013      	ands	r3, r2
 8006402:	69fa      	ldr	r2, [r7, #28]
 8006404:	6852      	ldr	r2, [r2, #4]
 8006406:	0412      	lsls	r2, r2, #16
 8006408:	431a      	orrs	r2, r3
 800640a:	6a3b      	ldr	r3, [r7, #32]
 800640c:	609a      	str	r2, [r3, #8]
 800640e:	e008      	b.n	8006422 <ETH_Prepare_Tx_Descriptors+0x416>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC1, 0x0);
 8006410:	6a3b      	ldr	r3, [r7, #32]
 8006412:	2200      	movs	r2, #0
 8006414:	605a      	str	r2, [r3, #4]
      /* Set buffer 2 Length */
      MODIFY_REG(dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, 0x0U);
 8006416:	6a3b      	ldr	r3, [r7, #32]
 8006418:	689a      	ldr	r2, [r3, #8]
 800641a:	4b0f      	ldr	r3, [pc, #60]	; (8006458 <ETH_Prepare_Tx_Descriptors+0x44c>)
 800641c:	4013      	ands	r3, r2
 800641e:	6a3a      	ldr	r2, [r7, #32]
 8006420:	6093      	str	r3, [r2, #8]
    }

    if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_TSO) != (uint32_t)RESET)
 8006422:	68bb      	ldr	r3, [r7, #8]
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	f003 0310 	and.w	r3, r3, #16
 800642a:	2b00      	cmp	r3, #0
 800642c:	d018      	beq.n	8006460 <ETH_Prepare_Tx_Descriptors+0x454>
    {
      /* Set TCP payload length */
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TPL, pTxConfig->PayloadLen);
 800642e:	6a3b      	ldr	r3, [r7, #32]
 8006430:	68da      	ldr	r2, [r3, #12]
 8006432:	4b0a      	ldr	r3, [pc, #40]	; (800645c <ETH_Prepare_Tx_Descriptors+0x450>)
 8006434:	4013      	ands	r3, r2
 8006436:	68ba      	ldr	r2, [r7, #8]
 8006438:	69d2      	ldr	r2, [r2, #28]
 800643a:	431a      	orrs	r2, r3
 800643c:	6a3b      	ldr	r3, [r7, #32]
 800643e:	60da      	str	r2, [r3, #12]
      /* Set TCP Segmentation Enabled bit */
      SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_TSE);
 8006440:	6a3b      	ldr	r3, [r7, #32]
 8006442:	68db      	ldr	r3, [r3, #12]
 8006444:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8006448:	6a3b      	ldr	r3, [r7, #32]
 800644a:	60da      	str	r2, [r3, #12]
 800644c:	e020      	b.n	8006490 <ETH_Prepare_Tx_Descriptors+0x484>
 800644e:	bf00      	nop
 8006450:	ffff8000 	.word	0xffff8000
 8006454:	ffffc000 	.word	0xffffc000
 8006458:	c000ffff 	.word	0xc000ffff
 800645c:	fffc0000 	.word	0xfffc0000
    }
    else
    {
      /* Set the packet length */
      MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_FL, pTxConfig->Length);
 8006460:	6a3b      	ldr	r3, [r7, #32]
 8006462:	68da      	ldr	r2, [r3, #12]
 8006464:	4b2f      	ldr	r3, [pc, #188]	; (8006524 <ETH_Prepare_Tx_Descriptors+0x518>)
 8006466:	4013      	ands	r3, r2
 8006468:	68ba      	ldr	r2, [r7, #8]
 800646a:	6852      	ldr	r2, [r2, #4]
 800646c:	431a      	orrs	r2, r3
 800646e:	6a3b      	ldr	r3, [r7, #32]
 8006470:	60da      	str	r2, [r3, #12]

      if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != (uint32_t)RESET)
 8006472:	68bb      	ldr	r3, [r7, #8]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	f003 0301 	and.w	r3, r3, #1
 800647a:	2b00      	cmp	r3, #0
 800647c:	d008      	beq.n	8006490 <ETH_Prepare_Tx_Descriptors+0x484>
      {
        /* Checksum Insertion Control */
        MODIFY_REG(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CIC, pTxConfig->ChecksumCtrl);
 800647e:	6a3b      	ldr	r3, [r7, #32]
 8006480:	68db      	ldr	r3, [r3, #12]
 8006482:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8006486:	68bb      	ldr	r3, [r7, #8]
 8006488:	695b      	ldr	r3, [r3, #20]
 800648a:	431a      	orrs	r2, r3
 800648c:	6a3b      	ldr	r3, [r7, #32]
 800648e:	60da      	str	r2, [r3, #12]
      }
    }

    bd_count += 1U;
 8006490:	69bb      	ldr	r3, [r7, #24]
 8006492:	3301      	adds	r3, #1
 8006494:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("dmb 0xF":::"memory");
 8006496:	f3bf 8f5f 	dmb	sy
}
 800649a:	bf00      	nop

    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set Own bit */
    SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_OWN);
 800649c:	6a3b      	ldr	r3, [r7, #32]
 800649e:	68db      	ldr	r3, [r3, #12]
 80064a0:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80064a4:	6a3b      	ldr	r3, [r7, #32]
 80064a6:	60da      	str	r2, [r3, #12]
    /* Mark it as NORMAL descriptor */
    CLEAR_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_CTXT);
 80064a8:	6a3b      	ldr	r3, [r7, #32]
 80064aa:	68db      	ldr	r3, [r3, #12]
 80064ac:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80064b0:	6a3b      	ldr	r3, [r7, #32]
 80064b2:	60da      	str	r2, [r3, #12]
  while (txbuffer->next != NULL)
 80064b4:	69fb      	ldr	r3, [r7, #28]
 80064b6:	689b      	ldr	r3, [r3, #8]
 80064b8:	2b00      	cmp	r3, #0
 80064ba:	f47f af2b 	bne.w	8006314 <ETH_Prepare_Tx_Descriptors+0x308>
  }

  if (ItMode != ((uint32_t)RESET))
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	2b00      	cmp	r3, #0
 80064c2:	d006      	beq.n	80064d2 <ETH_Prepare_Tx_Descriptors+0x4c6>
  {
    /* Set Interrupt on completion bit */
    SET_BIT(dmatxdesc->DESC2, ETH_DMATXNDESCRF_IOC);
 80064c4:	6a3b      	ldr	r3, [r7, #32]
 80064c6:	689b      	ldr	r3, [r3, #8]
 80064c8:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80064cc:	6a3b      	ldr	r3, [r7, #32]
 80064ce:	609a      	str	r2, [r3, #8]
 80064d0:	e005      	b.n	80064de <ETH_Prepare_Tx_Descriptors+0x4d2>
  }
  else
  {
    /* Clear Interrupt on completion bit */
    CLEAR_BIT(dmatxdesc->DESC2, ETH_DMATXNDESCRF_IOC);
 80064d2:	6a3b      	ldr	r3, [r7, #32]
 80064d4:	689b      	ldr	r3, [r3, #8]
 80064d6:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80064da:	6a3b      	ldr	r3, [r7, #32]
 80064dc:	609a      	str	r2, [r3, #8]
  }

  /* Mark it as LAST descriptor */
  SET_BIT(dmatxdesc->DESC3, ETH_DMATXNDESCRF_LD);
 80064de:	6a3b      	ldr	r3, [r7, #32]
 80064e0:	68db      	ldr	r3, [r3, #12]
 80064e2:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80064e6:	6a3b      	ldr	r3, [r7, #32]
 80064e8:	60da      	str	r2, [r3, #12]
  /* Save the current packet address to expose it to the application */
  dmatxdesclist->PacketAddress[descidx] = dmatxdesclist->CurrentPacketAddress;
 80064ea:	697b      	ldr	r3, [r7, #20]
 80064ec:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80064ee:	6979      	ldr	r1, [r7, #20]
 80064f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064f2:	3304      	adds	r3, #4
 80064f4:	009b      	lsls	r3, r3, #2
 80064f6:	440b      	add	r3, r1
 80064f8:	605a      	str	r2, [r3, #4]

  dmatxdesclist->CurTxDesc = descidx;
 80064fa:	697b      	ldr	r3, [r7, #20]
 80064fc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80064fe:	611a      	str	r2, [r3, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8006500:	b672      	cpsid	i
}
 8006502:	bf00      	nop

  /* disable the interrupt */
  __disable_irq();

  dmatxdesclist->BuffersInUse += bd_count + 1U;
 8006504:	697b      	ldr	r3, [r7, #20]
 8006506:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006508:	69bb      	ldr	r3, [r7, #24]
 800650a:	4413      	add	r3, r2
 800650c:	1c5a      	adds	r2, r3, #1
 800650e:	697b      	ldr	r3, [r7, #20]
 8006510:	629a      	str	r2, [r3, #40]	; 0x28
  __ASM volatile ("cpsie i" : : : "memory");
 8006512:	b662      	cpsie	i
}
 8006514:	bf00      	nop
  /* Enable interrupts back */
  __enable_irq();


  /* Return function status */
  return HAL_ETH_ERROR_NONE;
 8006516:	2300      	movs	r3, #0
}
 8006518:	4618      	mov	r0, r3
 800651a:	3734      	adds	r7, #52	; 0x34
 800651c:	46bd      	mov	sp, r7
 800651e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006522:	4770      	bx	lr
 8006524:	ffff8000 	.word	0xffff8000

08006528 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006528:	b480      	push	{r7}
 800652a:	b089      	sub	sp, #36	; 0x24
 800652c:	af00      	add	r7, sp, #0
 800652e:	6078      	str	r0, [r7, #4]
 8006530:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8006532:	2300      	movs	r3, #0
 8006534:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8006536:	4b89      	ldr	r3, [pc, #548]	; (800675c <HAL_GPIO_Init+0x234>)
 8006538:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800653a:	e194      	b.n	8006866 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800653c:	683b      	ldr	r3, [r7, #0]
 800653e:	681a      	ldr	r2, [r3, #0]
 8006540:	2101      	movs	r1, #1
 8006542:	69fb      	ldr	r3, [r7, #28]
 8006544:	fa01 f303 	lsl.w	r3, r1, r3
 8006548:	4013      	ands	r3, r2
 800654a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 800654c:	693b      	ldr	r3, [r7, #16]
 800654e:	2b00      	cmp	r3, #0
 8006550:	f000 8186 	beq.w	8006860 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8006554:	683b      	ldr	r3, [r7, #0]
 8006556:	685b      	ldr	r3, [r3, #4]
 8006558:	f003 0303 	and.w	r3, r3, #3
 800655c:	2b01      	cmp	r3, #1
 800655e:	d005      	beq.n	800656c <HAL_GPIO_Init+0x44>
 8006560:	683b      	ldr	r3, [r7, #0]
 8006562:	685b      	ldr	r3, [r3, #4]
 8006564:	f003 0303 	and.w	r3, r3, #3
 8006568:	2b02      	cmp	r3, #2
 800656a:	d130      	bne.n	80065ce <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	689b      	ldr	r3, [r3, #8]
 8006570:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8006572:	69fb      	ldr	r3, [r7, #28]
 8006574:	005b      	lsls	r3, r3, #1
 8006576:	2203      	movs	r2, #3
 8006578:	fa02 f303 	lsl.w	r3, r2, r3
 800657c:	43db      	mvns	r3, r3
 800657e:	69ba      	ldr	r2, [r7, #24]
 8006580:	4013      	ands	r3, r2
 8006582:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8006584:	683b      	ldr	r3, [r7, #0]
 8006586:	68da      	ldr	r2, [r3, #12]
 8006588:	69fb      	ldr	r3, [r7, #28]
 800658a:	005b      	lsls	r3, r3, #1
 800658c:	fa02 f303 	lsl.w	r3, r2, r3
 8006590:	69ba      	ldr	r2, [r7, #24]
 8006592:	4313      	orrs	r3, r2
 8006594:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	69ba      	ldr	r2, [r7, #24]
 800659a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	685b      	ldr	r3, [r3, #4]
 80065a0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80065a2:	2201      	movs	r2, #1
 80065a4:	69fb      	ldr	r3, [r7, #28]
 80065a6:	fa02 f303 	lsl.w	r3, r2, r3
 80065aa:	43db      	mvns	r3, r3
 80065ac:	69ba      	ldr	r2, [r7, #24]
 80065ae:	4013      	ands	r3, r2
 80065b0:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80065b2:	683b      	ldr	r3, [r7, #0]
 80065b4:	685b      	ldr	r3, [r3, #4]
 80065b6:	091b      	lsrs	r3, r3, #4
 80065b8:	f003 0201 	and.w	r2, r3, #1
 80065bc:	69fb      	ldr	r3, [r7, #28]
 80065be:	fa02 f303 	lsl.w	r3, r2, r3
 80065c2:	69ba      	ldr	r2, [r7, #24]
 80065c4:	4313      	orrs	r3, r2
 80065c6:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	69ba      	ldr	r2, [r7, #24]
 80065cc:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80065ce:	683b      	ldr	r3, [r7, #0]
 80065d0:	685b      	ldr	r3, [r3, #4]
 80065d2:	f003 0303 	and.w	r3, r3, #3
 80065d6:	2b03      	cmp	r3, #3
 80065d8:	d017      	beq.n	800660a <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	68db      	ldr	r3, [r3, #12]
 80065de:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80065e0:	69fb      	ldr	r3, [r7, #28]
 80065e2:	005b      	lsls	r3, r3, #1
 80065e4:	2203      	movs	r2, #3
 80065e6:	fa02 f303 	lsl.w	r3, r2, r3
 80065ea:	43db      	mvns	r3, r3
 80065ec:	69ba      	ldr	r2, [r7, #24]
 80065ee:	4013      	ands	r3, r2
 80065f0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80065f2:	683b      	ldr	r3, [r7, #0]
 80065f4:	689a      	ldr	r2, [r3, #8]
 80065f6:	69fb      	ldr	r3, [r7, #28]
 80065f8:	005b      	lsls	r3, r3, #1
 80065fa:	fa02 f303 	lsl.w	r3, r2, r3
 80065fe:	69ba      	ldr	r2, [r7, #24]
 8006600:	4313      	orrs	r3, r2
 8006602:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	69ba      	ldr	r2, [r7, #24]
 8006608:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800660a:	683b      	ldr	r3, [r7, #0]
 800660c:	685b      	ldr	r3, [r3, #4]
 800660e:	f003 0303 	and.w	r3, r3, #3
 8006612:	2b02      	cmp	r3, #2
 8006614:	d123      	bne.n	800665e <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8006616:	69fb      	ldr	r3, [r7, #28]
 8006618:	08da      	lsrs	r2, r3, #3
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	3208      	adds	r2, #8
 800661e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006622:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8006624:	69fb      	ldr	r3, [r7, #28]
 8006626:	f003 0307 	and.w	r3, r3, #7
 800662a:	009b      	lsls	r3, r3, #2
 800662c:	220f      	movs	r2, #15
 800662e:	fa02 f303 	lsl.w	r3, r2, r3
 8006632:	43db      	mvns	r3, r3
 8006634:	69ba      	ldr	r2, [r7, #24]
 8006636:	4013      	ands	r3, r2
 8006638:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800663a:	683b      	ldr	r3, [r7, #0]
 800663c:	691a      	ldr	r2, [r3, #16]
 800663e:	69fb      	ldr	r3, [r7, #28]
 8006640:	f003 0307 	and.w	r3, r3, #7
 8006644:	009b      	lsls	r3, r3, #2
 8006646:	fa02 f303 	lsl.w	r3, r2, r3
 800664a:	69ba      	ldr	r2, [r7, #24]
 800664c:	4313      	orrs	r3, r2
 800664e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8006650:	69fb      	ldr	r3, [r7, #28]
 8006652:	08da      	lsrs	r2, r3, #3
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	3208      	adds	r2, #8
 8006658:	69b9      	ldr	r1, [r7, #24]
 800665a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8006664:	69fb      	ldr	r3, [r7, #28]
 8006666:	005b      	lsls	r3, r3, #1
 8006668:	2203      	movs	r2, #3
 800666a:	fa02 f303 	lsl.w	r3, r2, r3
 800666e:	43db      	mvns	r3, r3
 8006670:	69ba      	ldr	r2, [r7, #24]
 8006672:	4013      	ands	r3, r2
 8006674:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8006676:	683b      	ldr	r3, [r7, #0]
 8006678:	685b      	ldr	r3, [r3, #4]
 800667a:	f003 0203 	and.w	r2, r3, #3
 800667e:	69fb      	ldr	r3, [r7, #28]
 8006680:	005b      	lsls	r3, r3, #1
 8006682:	fa02 f303 	lsl.w	r3, r2, r3
 8006686:	69ba      	ldr	r2, [r7, #24]
 8006688:	4313      	orrs	r3, r2
 800668a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	69ba      	ldr	r2, [r7, #24]
 8006690:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8006692:	683b      	ldr	r3, [r7, #0]
 8006694:	685b      	ldr	r3, [r3, #4]
 8006696:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800669a:	2b00      	cmp	r3, #0
 800669c:	f000 80e0 	beq.w	8006860 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80066a0:	4b2f      	ldr	r3, [pc, #188]	; (8006760 <HAL_GPIO_Init+0x238>)
 80066a2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80066a6:	4a2e      	ldr	r2, [pc, #184]	; (8006760 <HAL_GPIO_Init+0x238>)
 80066a8:	f043 0302 	orr.w	r3, r3, #2
 80066ac:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80066b0:	4b2b      	ldr	r3, [pc, #172]	; (8006760 <HAL_GPIO_Init+0x238>)
 80066b2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80066b6:	f003 0302 	and.w	r3, r3, #2
 80066ba:	60fb      	str	r3, [r7, #12]
 80066bc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80066be:	4a29      	ldr	r2, [pc, #164]	; (8006764 <HAL_GPIO_Init+0x23c>)
 80066c0:	69fb      	ldr	r3, [r7, #28]
 80066c2:	089b      	lsrs	r3, r3, #2
 80066c4:	3302      	adds	r3, #2
 80066c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80066ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80066cc:	69fb      	ldr	r3, [r7, #28]
 80066ce:	f003 0303 	and.w	r3, r3, #3
 80066d2:	009b      	lsls	r3, r3, #2
 80066d4:	220f      	movs	r2, #15
 80066d6:	fa02 f303 	lsl.w	r3, r2, r3
 80066da:	43db      	mvns	r3, r3
 80066dc:	69ba      	ldr	r2, [r7, #24]
 80066de:	4013      	ands	r3, r2
 80066e0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	4a20      	ldr	r2, [pc, #128]	; (8006768 <HAL_GPIO_Init+0x240>)
 80066e6:	4293      	cmp	r3, r2
 80066e8:	d052      	beq.n	8006790 <HAL_GPIO_Init+0x268>
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	4a1f      	ldr	r2, [pc, #124]	; (800676c <HAL_GPIO_Init+0x244>)
 80066ee:	4293      	cmp	r3, r2
 80066f0:	d031      	beq.n	8006756 <HAL_GPIO_Init+0x22e>
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	4a1e      	ldr	r2, [pc, #120]	; (8006770 <HAL_GPIO_Init+0x248>)
 80066f6:	4293      	cmp	r3, r2
 80066f8:	d02b      	beq.n	8006752 <HAL_GPIO_Init+0x22a>
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	4a1d      	ldr	r2, [pc, #116]	; (8006774 <HAL_GPIO_Init+0x24c>)
 80066fe:	4293      	cmp	r3, r2
 8006700:	d025      	beq.n	800674e <HAL_GPIO_Init+0x226>
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	4a1c      	ldr	r2, [pc, #112]	; (8006778 <HAL_GPIO_Init+0x250>)
 8006706:	4293      	cmp	r3, r2
 8006708:	d01f      	beq.n	800674a <HAL_GPIO_Init+0x222>
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	4a1b      	ldr	r2, [pc, #108]	; (800677c <HAL_GPIO_Init+0x254>)
 800670e:	4293      	cmp	r3, r2
 8006710:	d019      	beq.n	8006746 <HAL_GPIO_Init+0x21e>
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	4a1a      	ldr	r2, [pc, #104]	; (8006780 <HAL_GPIO_Init+0x258>)
 8006716:	4293      	cmp	r3, r2
 8006718:	d013      	beq.n	8006742 <HAL_GPIO_Init+0x21a>
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	4a19      	ldr	r2, [pc, #100]	; (8006784 <HAL_GPIO_Init+0x25c>)
 800671e:	4293      	cmp	r3, r2
 8006720:	d00d      	beq.n	800673e <HAL_GPIO_Init+0x216>
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	4a18      	ldr	r2, [pc, #96]	; (8006788 <HAL_GPIO_Init+0x260>)
 8006726:	4293      	cmp	r3, r2
 8006728:	d007      	beq.n	800673a <HAL_GPIO_Init+0x212>
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	4a17      	ldr	r2, [pc, #92]	; (800678c <HAL_GPIO_Init+0x264>)
 800672e:	4293      	cmp	r3, r2
 8006730:	d101      	bne.n	8006736 <HAL_GPIO_Init+0x20e>
 8006732:	2309      	movs	r3, #9
 8006734:	e02d      	b.n	8006792 <HAL_GPIO_Init+0x26a>
 8006736:	230a      	movs	r3, #10
 8006738:	e02b      	b.n	8006792 <HAL_GPIO_Init+0x26a>
 800673a:	2308      	movs	r3, #8
 800673c:	e029      	b.n	8006792 <HAL_GPIO_Init+0x26a>
 800673e:	2307      	movs	r3, #7
 8006740:	e027      	b.n	8006792 <HAL_GPIO_Init+0x26a>
 8006742:	2306      	movs	r3, #6
 8006744:	e025      	b.n	8006792 <HAL_GPIO_Init+0x26a>
 8006746:	2305      	movs	r3, #5
 8006748:	e023      	b.n	8006792 <HAL_GPIO_Init+0x26a>
 800674a:	2304      	movs	r3, #4
 800674c:	e021      	b.n	8006792 <HAL_GPIO_Init+0x26a>
 800674e:	2303      	movs	r3, #3
 8006750:	e01f      	b.n	8006792 <HAL_GPIO_Init+0x26a>
 8006752:	2302      	movs	r3, #2
 8006754:	e01d      	b.n	8006792 <HAL_GPIO_Init+0x26a>
 8006756:	2301      	movs	r3, #1
 8006758:	e01b      	b.n	8006792 <HAL_GPIO_Init+0x26a>
 800675a:	bf00      	nop
 800675c:	58000080 	.word	0x58000080
 8006760:	58024400 	.word	0x58024400
 8006764:	58000400 	.word	0x58000400
 8006768:	58020000 	.word	0x58020000
 800676c:	58020400 	.word	0x58020400
 8006770:	58020800 	.word	0x58020800
 8006774:	58020c00 	.word	0x58020c00
 8006778:	58021000 	.word	0x58021000
 800677c:	58021400 	.word	0x58021400
 8006780:	58021800 	.word	0x58021800
 8006784:	58021c00 	.word	0x58021c00
 8006788:	58022000 	.word	0x58022000
 800678c:	58022400 	.word	0x58022400
 8006790:	2300      	movs	r3, #0
 8006792:	69fa      	ldr	r2, [r7, #28]
 8006794:	f002 0203 	and.w	r2, r2, #3
 8006798:	0092      	lsls	r2, r2, #2
 800679a:	4093      	lsls	r3, r2
 800679c:	69ba      	ldr	r2, [r7, #24]
 800679e:	4313      	orrs	r3, r2
 80067a0:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80067a2:	4938      	ldr	r1, [pc, #224]	; (8006884 <HAL_GPIO_Init+0x35c>)
 80067a4:	69fb      	ldr	r3, [r7, #28]
 80067a6:	089b      	lsrs	r3, r3, #2
 80067a8:	3302      	adds	r3, #2
 80067aa:	69ba      	ldr	r2, [r7, #24]
 80067ac:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80067b0:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80067b8:	693b      	ldr	r3, [r7, #16]
 80067ba:	43db      	mvns	r3, r3
 80067bc:	69ba      	ldr	r2, [r7, #24]
 80067be:	4013      	ands	r3, r2
 80067c0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80067c2:	683b      	ldr	r3, [r7, #0]
 80067c4:	685b      	ldr	r3, [r3, #4]
 80067c6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	d003      	beq.n	80067d6 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80067ce:	69ba      	ldr	r2, [r7, #24]
 80067d0:	693b      	ldr	r3, [r7, #16]
 80067d2:	4313      	orrs	r3, r2
 80067d4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80067d6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80067da:	69bb      	ldr	r3, [r7, #24]
 80067dc:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80067de:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80067e2:	685b      	ldr	r3, [r3, #4]
 80067e4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80067e6:	693b      	ldr	r3, [r7, #16]
 80067e8:	43db      	mvns	r3, r3
 80067ea:	69ba      	ldr	r2, [r7, #24]
 80067ec:	4013      	ands	r3, r2
 80067ee:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80067f0:	683b      	ldr	r3, [r7, #0]
 80067f2:	685b      	ldr	r3, [r3, #4]
 80067f4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80067f8:	2b00      	cmp	r3, #0
 80067fa:	d003      	beq.n	8006804 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80067fc:	69ba      	ldr	r2, [r7, #24]
 80067fe:	693b      	ldr	r3, [r7, #16]
 8006800:	4313      	orrs	r3, r2
 8006802:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8006804:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8006808:	69bb      	ldr	r3, [r7, #24]
 800680a:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 800680c:	697b      	ldr	r3, [r7, #20]
 800680e:	685b      	ldr	r3, [r3, #4]
 8006810:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8006812:	693b      	ldr	r3, [r7, #16]
 8006814:	43db      	mvns	r3, r3
 8006816:	69ba      	ldr	r2, [r7, #24]
 8006818:	4013      	ands	r3, r2
 800681a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800681c:	683b      	ldr	r3, [r7, #0]
 800681e:	685b      	ldr	r3, [r3, #4]
 8006820:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006824:	2b00      	cmp	r3, #0
 8006826:	d003      	beq.n	8006830 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8006828:	69ba      	ldr	r2, [r7, #24]
 800682a:	693b      	ldr	r3, [r7, #16]
 800682c:	4313      	orrs	r3, r2
 800682e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8006830:	697b      	ldr	r3, [r7, #20]
 8006832:	69ba      	ldr	r2, [r7, #24]
 8006834:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8006836:	697b      	ldr	r3, [r7, #20]
 8006838:	681b      	ldr	r3, [r3, #0]
 800683a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800683c:	693b      	ldr	r3, [r7, #16]
 800683e:	43db      	mvns	r3, r3
 8006840:	69ba      	ldr	r2, [r7, #24]
 8006842:	4013      	ands	r3, r2
 8006844:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8006846:	683b      	ldr	r3, [r7, #0]
 8006848:	685b      	ldr	r3, [r3, #4]
 800684a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800684e:	2b00      	cmp	r3, #0
 8006850:	d003      	beq.n	800685a <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8006852:	69ba      	ldr	r2, [r7, #24]
 8006854:	693b      	ldr	r3, [r7, #16]
 8006856:	4313      	orrs	r3, r2
 8006858:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800685a:	697b      	ldr	r3, [r7, #20]
 800685c:	69ba      	ldr	r2, [r7, #24]
 800685e:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8006860:	69fb      	ldr	r3, [r7, #28]
 8006862:	3301      	adds	r3, #1
 8006864:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8006866:	683b      	ldr	r3, [r7, #0]
 8006868:	681a      	ldr	r2, [r3, #0]
 800686a:	69fb      	ldr	r3, [r7, #28]
 800686c:	fa22 f303 	lsr.w	r3, r2, r3
 8006870:	2b00      	cmp	r3, #0
 8006872:	f47f ae63 	bne.w	800653c <HAL_GPIO_Init+0x14>
  }
}
 8006876:	bf00      	nop
 8006878:	bf00      	nop
 800687a:	3724      	adds	r7, #36	; 0x24
 800687c:	46bd      	mov	sp, r7
 800687e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006882:	4770      	bx	lr
 8006884:	58000400 	.word	0x58000400

08006888 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8006888:	b480      	push	{r7}
 800688a:	b085      	sub	sp, #20
 800688c:	af00      	add	r7, sp, #0
 800688e:	6078      	str	r0, [r7, #4]
 8006890:	460b      	mov	r3, r1
 8006892:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	691a      	ldr	r2, [r3, #16]
 8006898:	887b      	ldrh	r3, [r7, #2]
 800689a:	4013      	ands	r3, r2
 800689c:	2b00      	cmp	r3, #0
 800689e:	d002      	beq.n	80068a6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80068a0:	2301      	movs	r3, #1
 80068a2:	73fb      	strb	r3, [r7, #15]
 80068a4:	e001      	b.n	80068aa <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80068a6:	2300      	movs	r3, #0
 80068a8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80068aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80068ac:	4618      	mov	r0, r3
 80068ae:	3714      	adds	r7, #20
 80068b0:	46bd      	mov	sp, r7
 80068b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068b6:	4770      	bx	lr

080068b8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80068b8:	b480      	push	{r7}
 80068ba:	b083      	sub	sp, #12
 80068bc:	af00      	add	r7, sp, #0
 80068be:	6078      	str	r0, [r7, #4]
 80068c0:	460b      	mov	r3, r1
 80068c2:	807b      	strh	r3, [r7, #2]
 80068c4:	4613      	mov	r3, r2
 80068c6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80068c8:	787b      	ldrb	r3, [r7, #1]
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	d003      	beq.n	80068d6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80068ce:	887a      	ldrh	r2, [r7, #2]
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80068d4:	e003      	b.n	80068de <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80068d6:	887b      	ldrh	r3, [r7, #2]
 80068d8:	041a      	lsls	r2, r3, #16
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	619a      	str	r2, [r3, #24]
}
 80068de:	bf00      	nop
 80068e0:	370c      	adds	r7, #12
 80068e2:	46bd      	mov	sp, r7
 80068e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068e8:	4770      	bx	lr

080068ea <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80068ea:	b480      	push	{r7}
 80068ec:	b085      	sub	sp, #20
 80068ee:	af00      	add	r7, sp, #0
 80068f0:	6078      	str	r0, [r7, #4]
 80068f2:	460b      	mov	r3, r1
 80068f4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	695b      	ldr	r3, [r3, #20]
 80068fa:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80068fc:	887a      	ldrh	r2, [r7, #2]
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	4013      	ands	r3, r2
 8006902:	041a      	lsls	r2, r3, #16
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	43d9      	mvns	r1, r3
 8006908:	887b      	ldrh	r3, [r7, #2]
 800690a:	400b      	ands	r3, r1
 800690c:	431a      	orrs	r2, r3
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	619a      	str	r2, [r3, #24]
}
 8006912:	bf00      	nop
 8006914:	3714      	adds	r7, #20
 8006916:	46bd      	mov	sp, r7
 8006918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800691c:	4770      	bx	lr

0800691e <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800691e:	b580      	push	{r7, lr}
 8006920:	b082      	sub	sp, #8
 8006922:	af00      	add	r7, sp, #0
 8006924:	4603      	mov	r3, r0
 8006926:	80fb      	strh	r3, [r7, #6]
    __HAL_GPIO_EXTID2_CLEAR_IT(GPIO_Pin);
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
#else
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00U)
 8006928:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800692c:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8006930:	88fb      	ldrh	r3, [r7, #6]
 8006932:	4013      	ands	r3, r2
 8006934:	2b00      	cmp	r3, #0
 8006936:	d008      	beq.n	800694a <HAL_GPIO_EXTI_IRQHandler+0x2c>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8006938:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800693c:	88fb      	ldrh	r3, [r7, #6]
 800693e:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8006942:	88fb      	ldrh	r3, [r7, #6]
 8006944:	4618      	mov	r0, r3
 8006946:	f000 f804 	bl	8006952 <HAL_GPIO_EXTI_Callback>
  }
#endif
}
 800694a:	bf00      	nop
 800694c:	3708      	adds	r7, #8
 800694e:	46bd      	mov	sp, r7
 8006950:	bd80      	pop	{r7, pc}

08006952 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8006952:	b480      	push	{r7}
 8006954:	b083      	sub	sp, #12
 8006956:	af00      	add	r7, sp, #0
 8006958:	4603      	mov	r3, r0
 800695a:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800695c:	bf00      	nop
 800695e:	370c      	adds	r7, #12
 8006960:	46bd      	mov	sp, r7
 8006962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006966:	4770      	bx	lr

08006968 <HAL_HRTIM_Init>:
  * @brief  Initialize a HRTIM instance
  * @param  hhrtim pointer to HAL HRTIM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HRTIM_Init(HRTIM_HandleTypeDef * hhrtim)
{
 8006968:	b580      	push	{r7, lr}
 800696a:	b086      	sub	sp, #24
 800696c:	af00      	add	r7, sp, #0
 800696e:	6078      	str	r0, [r7, #4]
  uint8_t timer_idx;
  uint32_t hrtim_mcr;

  /* Check the HRTIM handle allocation */
  if(hhrtim == NULL)
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	2b00      	cmp	r3, #0
 8006974:	d101      	bne.n	800697a <HAL_HRTIM_Init+0x12>
  {
    return HAL_ERROR;
 8006976:	2301      	movs	r3, #1
 8006978:	e0bd      	b.n	8006af6 <HAL_HRTIM_Init+0x18e>
    }
  }
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */

  /* Set the HRTIM state */
  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	2202      	movs	r2, #2
 800697e:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  /* Initialize the DMA handles */
  hhrtim->hdmaMaster = (DMA_HandleTypeDef *)NULL;
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	2200      	movs	r2, #0
 8006986:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
  hhrtim->hdmaTimerA = (DMA_HandleTypeDef *)NULL;
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	2200      	movs	r2, #0
 800698e:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  hhrtim->hdmaTimerB = (DMA_HandleTypeDef *)NULL;
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	2200      	movs	r2, #0
 8006996:	f8c3 20cc 	str.w	r2, [r3, #204]	; 0xcc
  hhrtim->hdmaTimerC = (DMA_HandleTypeDef *)NULL;
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	2200      	movs	r2, #0
 800699e:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0
  hhrtim->hdmaTimerD = (DMA_HandleTypeDef *)NULL;
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	2200      	movs	r2, #0
 80069a6:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
  hhrtim->hdmaTimerE = (DMA_HandleTypeDef *)NULL;
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	2200      	movs	r2, #0
 80069ae:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8

  /* HRTIM output synchronization configuration (if required) */
  if ((hhrtim->Init.SyncOptions & HRTIM_SYNCOPTION_MASTER) != (uint32_t)RESET)
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	689b      	ldr	r3, [r3, #8]
 80069b6:	f003 0301 	and.w	r3, r3, #1
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	d031      	beq.n	8006a22 <HAL_HRTIM_Init+0xba>
    assert_param(IS_HRTIM_SYNCOUTPUTPOLARITY(hhrtim->Init.SyncOutputPolarity));

    /* The synchronization output initialization procedure must be done prior
       to the configuration of the MCU outputs (done within HAL_HRTIM_MspInit)
    */
    if (hhrtim->Instance == HRTIM1)
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	681b      	ldr	r3, [r3, #0]
 80069c2:	4a4f      	ldr	r2, [pc, #316]	; (8006b00 <HAL_HRTIM_Init+0x198>)
 80069c4:	4293      	cmp	r3, r2
 80069c6:	d10e      	bne.n	80069e6 <HAL_HRTIM_Init+0x7e>
    {
      /* Enable the HRTIM peripheral clock */
      __HAL_RCC_HRTIM1_CLK_ENABLE();
 80069c8:	4b4e      	ldr	r3, [pc, #312]	; (8006b04 <HAL_HRTIM_Init+0x19c>)
 80069ca:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80069ce:	4a4d      	ldr	r2, [pc, #308]	; (8006b04 <HAL_HRTIM_Init+0x19c>)
 80069d0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80069d4:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 80069d8:	4b4a      	ldr	r3, [pc, #296]	; (8006b04 <HAL_HRTIM_Init+0x19c>)
 80069da:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 80069de:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80069e2:	60fb      	str	r3, [r7, #12]
 80069e4:	68fb      	ldr	r3, [r7, #12]
    }

    hrtim_mcr = hhrtim->Instance->sMasterRegs.MCR;
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	613b      	str	r3, [r7, #16]

    /* Set the event to be sent on the synchronization output */
    hrtim_mcr &= ~(HRTIM_MCR_SYNC_SRC);
 80069ee:	693b      	ldr	r3, [r7, #16]
 80069f0:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80069f4:	613b      	str	r3, [r7, #16]
    hrtim_mcr |= (hhrtim->Init.SyncOutputSource & HRTIM_MCR_SYNC_SRC);
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	691b      	ldr	r3, [r3, #16]
 80069fa:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80069fe:	693a      	ldr	r2, [r7, #16]
 8006a00:	4313      	orrs	r3, r2
 8006a02:	613b      	str	r3, [r7, #16]

    /* Set the polarity of the synchronization output */
    hrtim_mcr &= ~(HRTIM_MCR_SYNC_OUT);
 8006a04:	693b      	ldr	r3, [r7, #16]
 8006a06:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8006a0a:	613b      	str	r3, [r7, #16]
    hrtim_mcr |= (hhrtim->Init.SyncOutputPolarity & HRTIM_MCR_SYNC_OUT);
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	695b      	ldr	r3, [r3, #20]
 8006a10:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8006a14:	693a      	ldr	r2, [r7, #16]
 8006a16:	4313      	orrs	r3, r2
 8006a18:	613b      	str	r3, [r7, #16]

    /* Update the HRTIM registers */
    hhrtim->Instance->sMasterRegs.MCR = hrtim_mcr;
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	693a      	ldr	r2, [r7, #16]
 8006a20:	601a      	str	r2, [r3, #0]

  /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
  hhrtim->MspInitCallback(hhrtim);
#else
  HAL_HRTIM_MspInit(hhrtim);
 8006a22:	6878      	ldr	r0, [r7, #4]
 8006a24:	f7fb fbb4 	bl	8002190 <HAL_HRTIM_MspInit>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */

  /* HRTIM input synchronization configuration (if required) */
  if ((hhrtim->Init.SyncOptions & HRTIM_SYNCOPTION_SLAVE) != (uint32_t)RESET)
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	689b      	ldr	r3, [r3, #8]
 8006a2c:	f003 0302 	and.w	r3, r3, #2
 8006a30:	2b00      	cmp	r3, #0
 8006a32:	d012      	beq.n	8006a5a <HAL_HRTIM_Init+0xf2>
  {
    /* Check parameters */
    assert_param(IS_HRTIM_SYNCINPUTSOURCE(hhrtim->Init.SyncInputSource));

    hrtim_mcr = hhrtim->Instance->sMasterRegs.MCR;
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	613b      	str	r3, [r7, #16]

    /* Set the synchronization input source */
    hrtim_mcr &= ~(HRTIM_MCR_SYNC_IN);
 8006a3c:	693b      	ldr	r3, [r7, #16]
 8006a3e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006a42:	613b      	str	r3, [r7, #16]
    hrtim_mcr |= (hhrtim->Init.SyncInputSource & HRTIM_MCR_SYNC_IN);
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	68db      	ldr	r3, [r3, #12]
 8006a48:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006a4c:	693a      	ldr	r2, [r7, #16]
 8006a4e:	4313      	orrs	r3, r2
 8006a50:	613b      	str	r3, [r7, #16]

    /* Update the HRTIM registers */
    hhrtim->Instance->sMasterRegs.MCR = hrtim_mcr;
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	693a      	ldr	r2, [r7, #16]
 8006a58:	601a      	str	r2, [r3, #0]
  }

  /* Initialize the HRTIM state*/
  hhrtim->State = HAL_HRTIM_STATE_READY;
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	2201      	movs	r2, #1
 8006a5e:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  /* Initialize the lock status of the HRTIM HAL API */
  __HAL_UNLOCK(hhrtim);
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	2200      	movs	r2, #0
 8006a66:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

  /* Initialize timer related parameters */
  for (timer_idx = HRTIM_TIMERINDEX_TIMER_A ;
 8006a6a:	2300      	movs	r3, #0
 8006a6c:	75fb      	strb	r3, [r7, #23]
 8006a6e:	e03e      	b.n	8006aee <HAL_HRTIM_Init+0x186>
       timer_idx <= HRTIM_TIMERINDEX_MASTER ;
       timer_idx++)
  {
    hhrtim->TimerParam[timer_idx].CaptureTrigger1 = HRTIM_CAPTURETRIGGER_NONE;
 8006a70:	7dfa      	ldrb	r2, [r7, #23]
 8006a72:	6879      	ldr	r1, [r7, #4]
 8006a74:	4613      	mov	r3, r2
 8006a76:	00db      	lsls	r3, r3, #3
 8006a78:	1a9b      	subs	r3, r3, r2
 8006a7a:	009b      	lsls	r3, r3, #2
 8006a7c:	440b      	add	r3, r1
 8006a7e:	3318      	adds	r3, #24
 8006a80:	2200      	movs	r2, #0
 8006a82:	601a      	str	r2, [r3, #0]
    hhrtim->TimerParam[timer_idx].CaptureTrigger2 = HRTIM_CAPTURETRIGGER_NONE;
 8006a84:	7dfa      	ldrb	r2, [r7, #23]
 8006a86:	6879      	ldr	r1, [r7, #4]
 8006a88:	4613      	mov	r3, r2
 8006a8a:	00db      	lsls	r3, r3, #3
 8006a8c:	1a9b      	subs	r3, r3, r2
 8006a8e:	009b      	lsls	r3, r3, #2
 8006a90:	440b      	add	r3, r1
 8006a92:	331c      	adds	r3, #28
 8006a94:	2200      	movs	r2, #0
 8006a96:	601a      	str	r2, [r3, #0]
    hhrtim->TimerParam[timer_idx].InterruptRequests = HRTIM_IT_NONE;
 8006a98:	7dfa      	ldrb	r2, [r7, #23]
 8006a9a:	6879      	ldr	r1, [r7, #4]
 8006a9c:	4613      	mov	r3, r2
 8006a9e:	00db      	lsls	r3, r3, #3
 8006aa0:	1a9b      	subs	r3, r3, r2
 8006aa2:	009b      	lsls	r3, r3, #2
 8006aa4:	440b      	add	r3, r1
 8006aa6:	3320      	adds	r3, #32
 8006aa8:	2200      	movs	r2, #0
 8006aaa:	601a      	str	r2, [r3, #0]
    hhrtim->TimerParam[timer_idx].DMARequests = HRTIM_IT_NONE;
 8006aac:	7dfa      	ldrb	r2, [r7, #23]
 8006aae:	6879      	ldr	r1, [r7, #4]
 8006ab0:	4613      	mov	r3, r2
 8006ab2:	00db      	lsls	r3, r3, #3
 8006ab4:	1a9b      	subs	r3, r3, r2
 8006ab6:	009b      	lsls	r3, r3, #2
 8006ab8:	440b      	add	r3, r1
 8006aba:	3324      	adds	r3, #36	; 0x24
 8006abc:	2200      	movs	r2, #0
 8006abe:	601a      	str	r2, [r3, #0]
    hhrtim->TimerParam[timer_idx].DMASrcAddress = 0U;
 8006ac0:	7dfa      	ldrb	r2, [r7, #23]
 8006ac2:	6879      	ldr	r1, [r7, #4]
 8006ac4:	4613      	mov	r3, r2
 8006ac6:	00db      	lsls	r3, r3, #3
 8006ac8:	1a9b      	subs	r3, r3, r2
 8006aca:	009b      	lsls	r3, r3, #2
 8006acc:	440b      	add	r3, r1
 8006ace:	3328      	adds	r3, #40	; 0x28
 8006ad0:	2200      	movs	r2, #0
 8006ad2:	601a      	str	r2, [r3, #0]
    hhrtim->TimerParam[timer_idx].DMASize = 0U;
 8006ad4:	7dfa      	ldrb	r2, [r7, #23]
 8006ad6:	6879      	ldr	r1, [r7, #4]
 8006ad8:	4613      	mov	r3, r2
 8006ada:	00db      	lsls	r3, r3, #3
 8006adc:	1a9b      	subs	r3, r3, r2
 8006ade:	009b      	lsls	r3, r3, #2
 8006ae0:	440b      	add	r3, r1
 8006ae2:	3330      	adds	r3, #48	; 0x30
 8006ae4:	2200      	movs	r2, #0
 8006ae6:	601a      	str	r2, [r3, #0]
       timer_idx++)
 8006ae8:	7dfb      	ldrb	r3, [r7, #23]
 8006aea:	3301      	adds	r3, #1
 8006aec:	75fb      	strb	r3, [r7, #23]
       timer_idx <= HRTIM_TIMERINDEX_MASTER ;
 8006aee:	7dfb      	ldrb	r3, [r7, #23]
 8006af0:	2b05      	cmp	r3, #5
 8006af2:	d9bd      	bls.n	8006a70 <HAL_HRTIM_Init+0x108>
  }

  return HAL_OK;
 8006af4:	2300      	movs	r3, #0
}
 8006af6:	4618      	mov	r0, r3
 8006af8:	3718      	adds	r7, #24
 8006afa:	46bd      	mov	sp, r7
 8006afc:	bd80      	pop	{r7, pc}
 8006afe:	bf00      	nop
 8006b00:	40017400 	.word	0x40017400
 8006b04:	58024400 	.word	0x58024400

08006b08 <HAL_HRTIM_TimeBaseConfig>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HRTIM_TimeBaseConfig(HRTIM_HandleTypeDef *hhrtim,
                                           uint32_t TimerIdx,
                                           const HRTIM_TimeBaseCfgTypeDef * pTimeBaseCfg)
{
 8006b08:	b580      	push	{r7, lr}
 8006b0a:	b084      	sub	sp, #16
 8006b0c:	af00      	add	r7, sp, #0
 8006b0e:	60f8      	str	r0, [r7, #12]
 8006b10:	60b9      	str	r1, [r7, #8]
 8006b12:	607a      	str	r2, [r7, #4]
  /* Check the parameters */
  assert_param(IS_HRTIM_TIMERINDEX(TimerIdx));
  assert_param(IS_HRTIM_PRESCALERRATIO(pTimeBaseCfg->PrescalerRatio));
  assert_param(IS_HRTIM_MODE(pTimeBaseCfg->Mode));

  if(hhrtim->State == HAL_HRTIM_STATE_BUSY)
 8006b14:	68fb      	ldr	r3, [r7, #12]
 8006b16:	f893 30c1 	ldrb.w	r3, [r3, #193]	; 0xc1
 8006b1a:	b2db      	uxtb	r3, r3
 8006b1c:	2b02      	cmp	r3, #2
 8006b1e:	d101      	bne.n	8006b24 <HAL_HRTIM_TimeBaseConfig+0x1c>
  {
     return HAL_BUSY;
 8006b20:	2302      	movs	r3, #2
 8006b22:	e015      	b.n	8006b50 <HAL_HRTIM_TimeBaseConfig+0x48>
  }

  /* Set the HRTIM state */
  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	2202      	movs	r2, #2
 8006b28:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  if (TimerIdx == HRTIM_TIMERINDEX_MASTER)
 8006b2c:	68bb      	ldr	r3, [r7, #8]
 8006b2e:	2b05      	cmp	r3, #5
 8006b30:	d104      	bne.n	8006b3c <HAL_HRTIM_TimeBaseConfig+0x34>
  {
    /* Configure master timer time base unit */
    HRTIM_MasterBase_Config(hhrtim, pTimeBaseCfg);
 8006b32:	6879      	ldr	r1, [r7, #4]
 8006b34:	68f8      	ldr	r0, [r7, #12]
 8006b36:	f000 fc4d 	bl	80073d4 <HRTIM_MasterBase_Config>
 8006b3a:	e004      	b.n	8006b46 <HAL_HRTIM_TimeBaseConfig+0x3e>
  }
  else
  {
    /* Configure timing unit time base unit */
    HRTIM_TimingUnitBase_Config(hhrtim, TimerIdx, pTimeBaseCfg);
 8006b3c:	687a      	ldr	r2, [r7, #4]
 8006b3e:	68b9      	ldr	r1, [r7, #8]
 8006b40:	68f8      	ldr	r0, [r7, #12]
 8006b42:	f000 fc76 	bl	8007432 <HRTIM_TimingUnitBase_Config>
  }

  /* Set HRTIM state */
  hhrtim->State = HAL_HRTIM_STATE_READY;
 8006b46:	68fb      	ldr	r3, [r7, #12]
 8006b48:	2201      	movs	r2, #1
 8006b4a:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  return HAL_OK;
 8006b4e:	2300      	movs	r3, #0
}
 8006b50:	4618      	mov	r0, r3
 8006b52:	3710      	adds	r7, #16
 8006b54:	46bd      	mov	sp, r7
 8006b56:	bd80      	pop	{r7, pc}

08006b58 <HAL_HRTIM_WaveformTimerConfig>:
  * @note This function must be called before starting the timer
  */
HAL_StatusTypeDef HAL_HRTIM_WaveformTimerConfig(HRTIM_HandleTypeDef * hhrtim,
                                                uint32_t TimerIdx,
                                                const HRTIM_TimerCfgTypeDef * pTimerCfg)
{
 8006b58:	b580      	push	{r7, lr}
 8006b5a:	b084      	sub	sp, #16
 8006b5c:	af00      	add	r7, sp, #0
 8006b5e:	60f8      	str	r0, [r7, #12]
 8006b60:	60b9      	str	r1, [r7, #8]
 8006b62:	607a      	str	r2, [r7, #4]
  assert_param(IS_HRTIM_DACSYNC(pTimerCfg->DACSynchro));
  assert_param(IS_HRTIM_PRELOAD(pTimerCfg->PreloadEnable));
  assert_param(IS_HRTIM_TIMERBURSTMODE(pTimerCfg->BurstMode));
  assert_param(IS_HRTIM_UPDATEONREPETITION(pTimerCfg->RepetitionUpdate));

  if(hhrtim->State == HAL_HRTIM_STATE_BUSY)
 8006b64:	68fb      	ldr	r3, [r7, #12]
 8006b66:	f893 30c1 	ldrb.w	r3, [r3, #193]	; 0xc1
 8006b6a:	b2db      	uxtb	r3, r3
 8006b6c:	2b02      	cmp	r3, #2
 8006b6e:	d101      	bne.n	8006b74 <HAL_HRTIM_WaveformTimerConfig+0x1c>
  {
     return HAL_BUSY;
 8006b70:	2302      	movs	r3, #2
 8006b72:	e05f      	b.n	8006c34 <HAL_HRTIM_WaveformTimerConfig+0xdc>
  }

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 8006b74:	68fb      	ldr	r3, [r7, #12]
 8006b76:	f893 30c0 	ldrb.w	r3, [r3, #192]	; 0xc0
 8006b7a:	2b01      	cmp	r3, #1
 8006b7c:	d101      	bne.n	8006b82 <HAL_HRTIM_WaveformTimerConfig+0x2a>
 8006b7e:	2302      	movs	r3, #2
 8006b80:	e058      	b.n	8006c34 <HAL_HRTIM_WaveformTimerConfig+0xdc>
 8006b82:	68fb      	ldr	r3, [r7, #12]
 8006b84:	2201      	movs	r2, #1
 8006b86:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8006b8a:	68fb      	ldr	r3, [r7, #12]
 8006b8c:	2202      	movs	r2, #2
 8006b8e:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  if (TimerIdx == HRTIM_TIMERINDEX_MASTER)
 8006b92:	68bb      	ldr	r3, [r7, #8]
 8006b94:	2b05      	cmp	r3, #5
 8006b96:	d104      	bne.n	8006ba2 <HAL_HRTIM_WaveformTimerConfig+0x4a>
    assert_param(IS_HRTIM_UPDATEGATING_MASTER(pTimerCfg->UpdateGating));
    assert_param(IS_HRTIM_MASTER_IT(pTimerCfg->InterruptRequests));
    assert_param(IS_HRTIM_MASTER_DMA(pTimerCfg->DMARequests));

    /* Configure master timer */
    HRTIM_MasterWaveform_Config(hhrtim, pTimerCfg);
 8006b98:	6879      	ldr	r1, [r7, #4]
 8006b9a:	68f8      	ldr	r0, [r7, #12]
 8006b9c:	f000 fc89 	bl	80074b2 <HRTIM_MasterWaveform_Config>
 8006ba0:	e004      	b.n	8006bac <HAL_HRTIM_WaveformTimerConfig+0x54>
    assert_param(IS_HRTIM_TIMUPDATETRIGGER(pTimerCfg->UpdateTrigger));
    assert_param(IS_HRTIM_TIMRESETTRIGGER(pTimerCfg->ResetTrigger));
    assert_param(IS_HRTIM_TIMUPDATEONRESET(pTimerCfg->ResetUpdate));

    /* Configure timing unit */
    HRTIM_TimingUnitWaveform_Config(hhrtim, TimerIdx, pTimerCfg);
 8006ba2:	687a      	ldr	r2, [r7, #4]
 8006ba4:	68b9      	ldr	r1, [r7, #8]
 8006ba6:	68f8      	ldr	r0, [r7, #12]
 8006ba8:	f000 fcea 	bl	8007580 <HRTIM_TimingUnitWaveform_Config>
  }

  /* Update timer parameters */
  hhrtim->TimerParam[TimerIdx].InterruptRequests = pTimerCfg->InterruptRequests;
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	6819      	ldr	r1, [r3, #0]
 8006bb0:	68f8      	ldr	r0, [r7, #12]
 8006bb2:	68ba      	ldr	r2, [r7, #8]
 8006bb4:	4613      	mov	r3, r2
 8006bb6:	00db      	lsls	r3, r3, #3
 8006bb8:	1a9b      	subs	r3, r3, r2
 8006bba:	009b      	lsls	r3, r3, #2
 8006bbc:	4403      	add	r3, r0
 8006bbe:	3320      	adds	r3, #32
 8006bc0:	6019      	str	r1, [r3, #0]
  hhrtim->TimerParam[TimerIdx].DMARequests = pTimerCfg->DMARequests;
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	6859      	ldr	r1, [r3, #4]
 8006bc6:	68f8      	ldr	r0, [r7, #12]
 8006bc8:	68ba      	ldr	r2, [r7, #8]
 8006bca:	4613      	mov	r3, r2
 8006bcc:	00db      	lsls	r3, r3, #3
 8006bce:	1a9b      	subs	r3, r3, r2
 8006bd0:	009b      	lsls	r3, r3, #2
 8006bd2:	4403      	add	r3, r0
 8006bd4:	3324      	adds	r3, #36	; 0x24
 8006bd6:	6019      	str	r1, [r3, #0]
  hhrtim->TimerParam[TimerIdx].DMASrcAddress = pTimerCfg->DMASrcAddress;
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	6899      	ldr	r1, [r3, #8]
 8006bdc:	68f8      	ldr	r0, [r7, #12]
 8006bde:	68ba      	ldr	r2, [r7, #8]
 8006be0:	4613      	mov	r3, r2
 8006be2:	00db      	lsls	r3, r3, #3
 8006be4:	1a9b      	subs	r3, r3, r2
 8006be6:	009b      	lsls	r3, r3, #2
 8006be8:	4403      	add	r3, r0
 8006bea:	3328      	adds	r3, #40	; 0x28
 8006bec:	6019      	str	r1, [r3, #0]
  hhrtim->TimerParam[TimerIdx].DMADstAddress = pTimerCfg->DMADstAddress;
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	68d9      	ldr	r1, [r3, #12]
 8006bf2:	68f8      	ldr	r0, [r7, #12]
 8006bf4:	68ba      	ldr	r2, [r7, #8]
 8006bf6:	4613      	mov	r3, r2
 8006bf8:	00db      	lsls	r3, r3, #3
 8006bfa:	1a9b      	subs	r3, r3, r2
 8006bfc:	009b      	lsls	r3, r3, #2
 8006bfe:	4403      	add	r3, r0
 8006c00:	332c      	adds	r3, #44	; 0x2c
 8006c02:	6019      	str	r1, [r3, #0]
  hhrtim->TimerParam[TimerIdx].DMASize = pTimerCfg->DMASize;
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	6919      	ldr	r1, [r3, #16]
 8006c08:	68f8      	ldr	r0, [r7, #12]
 8006c0a:	68ba      	ldr	r2, [r7, #8]
 8006c0c:	4613      	mov	r3, r2
 8006c0e:	00db      	lsls	r3, r3, #3
 8006c10:	1a9b      	subs	r3, r3, r2
 8006c12:	009b      	lsls	r3, r3, #2
 8006c14:	4403      	add	r3, r0
 8006c16:	3330      	adds	r3, #48	; 0x30
 8006c18:	6019      	str	r1, [r3, #0]

  /* Force a software update */
  HRTIM_ForceRegistersUpdate(hhrtim, TimerIdx);
 8006c1a:	68b9      	ldr	r1, [r7, #8]
 8006c1c:	68f8      	ldr	r0, [r7, #12]
 8006c1e:	f000 fec7 	bl	80079b0 <HRTIM_ForceRegistersUpdate>

  hhrtim->State = HAL_HRTIM_STATE_READY;
 8006c22:	68fb      	ldr	r3, [r7, #12]
 8006c24:	2201      	movs	r2, #1
 8006c26:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 8006c2a:	68fb      	ldr	r3, [r7, #12]
 8006c2c:	2200      	movs	r2, #0
 8006c2e:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

  return HAL_OK;
 8006c32:	2300      	movs	r3, #0
}
 8006c34:	4618      	mov	r0, r3
 8006c36:	3710      	adds	r7, #16
 8006c38:	46bd      	mov	sp, r7
 8006c3a:	bd80      	pop	{r7, pc}

08006c3c <HAL_HRTIM_WaveformCompareConfig>:
  */
HAL_StatusTypeDef HAL_HRTIM_WaveformCompareConfig(HRTIM_HandleTypeDef * hhrtim,
                                                  uint32_t TimerIdx,
                                                  uint32_t CompareUnit,
                                                  const HRTIM_CompareCfgTypeDef* pCompareCfg)
{
 8006c3c:	b480      	push	{r7}
 8006c3e:	b085      	sub	sp, #20
 8006c40:	af00      	add	r7, sp, #0
 8006c42:	60f8      	str	r0, [r7, #12]
 8006c44:	60b9      	str	r1, [r7, #8]
 8006c46:	607a      	str	r2, [r7, #4]
 8006c48:	603b      	str	r3, [r7, #0]
  /* Check parameters */
  assert_param(IS_HRTIM_TIMERINDEX(TimerIdx));

  if(hhrtim->State == HAL_HRTIM_STATE_BUSY)
 8006c4a:	68fb      	ldr	r3, [r7, #12]
 8006c4c:	f893 30c1 	ldrb.w	r3, [r3, #193]	; 0xc1
 8006c50:	b2db      	uxtb	r3, r3
 8006c52:	2b02      	cmp	r3, #2
 8006c54:	d101      	bne.n	8006c5a <HAL_HRTIM_WaveformCompareConfig+0x1e>
  {
     return HAL_BUSY;
 8006c56:	2302      	movs	r3, #2
 8006c58:	e157      	b.n	8006f0a <HAL_HRTIM_WaveformCompareConfig+0x2ce>
  }

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 8006c5a:	68fb      	ldr	r3, [r7, #12]
 8006c5c:	f893 30c0 	ldrb.w	r3, [r3, #192]	; 0xc0
 8006c60:	2b01      	cmp	r3, #1
 8006c62:	d101      	bne.n	8006c68 <HAL_HRTIM_WaveformCompareConfig+0x2c>
 8006c64:	2302      	movs	r3, #2
 8006c66:	e150      	b.n	8006f0a <HAL_HRTIM_WaveformCompareConfig+0x2ce>
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	2201      	movs	r2, #1
 8006c6c:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8006c70:	68fb      	ldr	r3, [r7, #12]
 8006c72:	2202      	movs	r2, #2
 8006c74:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  /* Configure the compare unit */
  if (TimerIdx == HRTIM_TIMERINDEX_MASTER)
 8006c78:	68bb      	ldr	r3, [r7, #8]
 8006c7a:	2b05      	cmp	r3, #5
 8006c7c:	d140      	bne.n	8006d00 <HAL_HRTIM_WaveformCompareConfig+0xc4>
  {
    switch (CompareUnit)
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	3b01      	subs	r3, #1
 8006c82:	2b07      	cmp	r3, #7
 8006c84:	d82a      	bhi.n	8006cdc <HAL_HRTIM_WaveformCompareConfig+0xa0>
 8006c86:	a201      	add	r2, pc, #4	; (adr r2, 8006c8c <HAL_HRTIM_WaveformCompareConfig+0x50>)
 8006c88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c8c:	08006cad 	.word	0x08006cad
 8006c90:	08006cb9 	.word	0x08006cb9
 8006c94:	08006cdd 	.word	0x08006cdd
 8006c98:	08006cc5 	.word	0x08006cc5
 8006c9c:	08006cdd 	.word	0x08006cdd
 8006ca0:	08006cdd 	.word	0x08006cdd
 8006ca4:	08006cdd 	.word	0x08006cdd
 8006ca8:	08006cd1 	.word	0x08006cd1
    {
      case HRTIM_COMPAREUNIT_1:
        {
        hhrtim->Instance->sMasterRegs.MCMP1R = pCompareCfg->CompareValue;
 8006cac:	68fb      	ldr	r3, [r7, #12]
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	683a      	ldr	r2, [r7, #0]
 8006cb2:	6812      	ldr	r2, [r2, #0]
 8006cb4:	61da      	str	r2, [r3, #28]
        break;
 8006cb6:	e01a      	b.n	8006cee <HAL_HRTIM_WaveformCompareConfig+0xb2>
        }

      case HRTIM_COMPAREUNIT_2:
        {
        hhrtim->Instance->sMasterRegs.MCMP2R = pCompareCfg->CompareValue;
 8006cb8:	68fb      	ldr	r3, [r7, #12]
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	683a      	ldr	r2, [r7, #0]
 8006cbe:	6812      	ldr	r2, [r2, #0]
 8006cc0:	625a      	str	r2, [r3, #36]	; 0x24
        break;
 8006cc2:	e014      	b.n	8006cee <HAL_HRTIM_WaveformCompareConfig+0xb2>
        }

      case HRTIM_COMPAREUNIT_3:
        {
        hhrtim->Instance->sMasterRegs.MCMP3R = pCompareCfg->CompareValue;
 8006cc4:	68fb      	ldr	r3, [r7, #12]
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	683a      	ldr	r2, [r7, #0]
 8006cca:	6812      	ldr	r2, [r2, #0]
 8006ccc:	629a      	str	r2, [r3, #40]	; 0x28
        break;
 8006cce:	e00e      	b.n	8006cee <HAL_HRTIM_WaveformCompareConfig+0xb2>
        }

      case HRTIM_COMPAREUNIT_4:
        {
        hhrtim->Instance->sMasterRegs.MCMP4R = pCompareCfg->CompareValue;
 8006cd0:	68fb      	ldr	r3, [r7, #12]
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	683a      	ldr	r2, [r7, #0]
 8006cd6:	6812      	ldr	r2, [r2, #0]
 8006cd8:	62da      	str	r2, [r3, #44]	; 0x2c
        break;
 8006cda:	e008      	b.n	8006cee <HAL_HRTIM_WaveformCompareConfig+0xb2>
        }

      default:
        {
        hhrtim->State = HAL_HRTIM_STATE_ERROR;
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	2207      	movs	r2, #7
 8006ce0:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

        /* Process Unlocked */
        __HAL_UNLOCK(hhrtim);
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	2200      	movs	r2, #0
 8006ce8:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

        break;
 8006cec:	bf00      	nop
        }
    }

    if(hhrtim->State == HAL_HRTIM_STATE_ERROR)
 8006cee:	68fb      	ldr	r3, [r7, #12]
 8006cf0:	f893 30c1 	ldrb.w	r3, [r3, #193]	; 0xc1
 8006cf4:	b2db      	uxtb	r3, r3
 8006cf6:	2b07      	cmp	r3, #7
 8006cf8:	f040 80fe 	bne.w	8006ef8 <HAL_HRTIM_WaveformCompareConfig+0x2bc>
    {
     return HAL_ERROR;
 8006cfc:	2301      	movs	r3, #1
 8006cfe:	e104      	b.n	8006f0a <HAL_HRTIM_WaveformCompareConfig+0x2ce>
    }

  }
  else
  {
    switch (CompareUnit)
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	3b01      	subs	r3, #1
 8006d04:	2b07      	cmp	r3, #7
 8006d06:	f200 80e3 	bhi.w	8006ed0 <HAL_HRTIM_WaveformCompareConfig+0x294>
 8006d0a:	a201      	add	r2, pc, #4	; (adr r2, 8006d10 <HAL_HRTIM_WaveformCompareConfig+0xd4>)
 8006d0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d10:	08006d31 	.word	0x08006d31
 8006d14:	08006d45 	.word	0x08006d45
 8006d18:	08006ed1 	.word	0x08006ed1
 8006d1c:	08006e01 	.word	0x08006e01
 8006d20:	08006ed1 	.word	0x08006ed1
 8006d24:	08006ed1 	.word	0x08006ed1
 8006d28:	08006ed1 	.word	0x08006ed1
 8006d2c:	08006e15 	.word	0x08006e15
    {
    case HRTIM_COMPAREUNIT_1:
      {
        /* Set the compare value */
        hhrtim->Instance->sTimerxRegs[TimerIdx].CMP1xR = pCompareCfg->CompareValue;
 8006d30:	68fb      	ldr	r3, [r7, #12]
 8006d32:	6819      	ldr	r1, [r3, #0]
 8006d34:	683b      	ldr	r3, [r7, #0]
 8006d36:	681a      	ldr	r2, [r3, #0]
 8006d38:	68bb      	ldr	r3, [r7, #8]
 8006d3a:	01db      	lsls	r3, r3, #7
 8006d3c:	440b      	add	r3, r1
 8006d3e:	339c      	adds	r3, #156	; 0x9c
 8006d40:	601a      	str	r2, [r3, #0]
        break;
 8006d42:	e0d1      	b.n	8006ee8 <HAL_HRTIM_WaveformCompareConfig+0x2ac>
      {
        /* Check parameters */
        assert_param(IS_HRTIM_COMPAREUNIT_AUTODELAYEDMODE(CompareUnit, pCompareCfg->AutoDelayedMode));

        /* Set the compare value */
        hhrtim->Instance->sTimerxRegs[TimerIdx].CMP2xR = pCompareCfg->CompareValue;
 8006d44:	68fb      	ldr	r3, [r7, #12]
 8006d46:	6819      	ldr	r1, [r3, #0]
 8006d48:	683b      	ldr	r3, [r7, #0]
 8006d4a:	681a      	ldr	r2, [r3, #0]
 8006d4c:	68bb      	ldr	r3, [r7, #8]
 8006d4e:	01db      	lsls	r3, r3, #7
 8006d50:	440b      	add	r3, r1
 8006d52:	33a4      	adds	r3, #164	; 0xa4
 8006d54:	601a      	str	r2, [r3, #0]

        if (pCompareCfg->AutoDelayedMode != HRTIM_AUTODELAYEDMODE_REGULAR)
 8006d56:	683b      	ldr	r3, [r7, #0]
 8006d58:	685b      	ldr	r3, [r3, #4]
 8006d5a:	2b00      	cmp	r3, #0
 8006d5c:	d03f      	beq.n	8006dde <HAL_HRTIM_WaveformCompareConfig+0x1a2>
        {
          /* Configure auto-delayed mode */
          /* DELCMP2 bitfield must be reset when reprogrammed from one value */
          /* to the other to reinitialize properly the auto-delayed mechanism */
          hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR &= ~HRTIM_TIMCR_DELCMP2;
 8006d5e:	68fb      	ldr	r3, [r7, #12]
 8006d60:	681a      	ldr	r2, [r3, #0]
 8006d62:	68bb      	ldr	r3, [r7, #8]
 8006d64:	3301      	adds	r3, #1
 8006d66:	01db      	lsls	r3, r3, #7
 8006d68:	4413      	add	r3, r2
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	68fa      	ldr	r2, [r7, #12]
 8006d6e:	6811      	ldr	r1, [r2, #0]
 8006d70:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8006d74:	68bb      	ldr	r3, [r7, #8]
 8006d76:	3301      	adds	r3, #1
 8006d78:	01db      	lsls	r3, r3, #7
 8006d7a:	440b      	add	r3, r1
 8006d7c:	601a      	str	r2, [r3, #0]
          hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR |= pCompareCfg->AutoDelayedMode;
 8006d7e:	68fb      	ldr	r3, [r7, #12]
 8006d80:	681a      	ldr	r2, [r3, #0]
 8006d82:	68bb      	ldr	r3, [r7, #8]
 8006d84:	3301      	adds	r3, #1
 8006d86:	01db      	lsls	r3, r3, #7
 8006d88:	4413      	add	r3, r2
 8006d8a:	681a      	ldr	r2, [r3, #0]
 8006d8c:	683b      	ldr	r3, [r7, #0]
 8006d8e:	685b      	ldr	r3, [r3, #4]
 8006d90:	68f9      	ldr	r1, [r7, #12]
 8006d92:	6809      	ldr	r1, [r1, #0]
 8006d94:	431a      	orrs	r2, r3
 8006d96:	68bb      	ldr	r3, [r7, #8]
 8006d98:	3301      	adds	r3, #1
 8006d9a:	01db      	lsls	r3, r3, #7
 8006d9c:	440b      	add	r3, r1
 8006d9e:	601a      	str	r2, [r3, #0]

          /* Set the compare value for timeout compare unit (if any) */
          if (pCompareCfg->AutoDelayedMode == HRTIM_AUTODELAYEDMODE_AUTODELAYED_TIMEOUTCMP1)
 8006da0:	683b      	ldr	r3, [r7, #0]
 8006da2:	685b      	ldr	r3, [r3, #4]
 8006da4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006da8:	d109      	bne.n	8006dbe <HAL_HRTIM_WaveformCompareConfig+0x182>
          {
            hhrtim->Instance->sTimerxRegs[TimerIdx].CMP1xR = pCompareCfg->AutoDelayedTimeout;
 8006daa:	68fb      	ldr	r3, [r7, #12]
 8006dac:	6819      	ldr	r1, [r3, #0]
 8006dae:	683b      	ldr	r3, [r7, #0]
 8006db0:	689a      	ldr	r2, [r3, #8]
 8006db2:	68bb      	ldr	r3, [r7, #8]
 8006db4:	01db      	lsls	r3, r3, #7
 8006db6:	440b      	add	r3, r1
 8006db8:	339c      	adds	r3, #156	; 0x9c
 8006dba:	601a      	str	r2, [r3, #0]
        else
        {
          /* Clear HRTIM_TIMxCR.DELCMP2 bitfield */
          MODIFY_REG(hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR, HRTIM_TIMCR_DELCMP2, 0U);
        }
         break;
 8006dbc:	e091      	b.n	8006ee2 <HAL_HRTIM_WaveformCompareConfig+0x2a6>
          else if (pCompareCfg->AutoDelayedMode == HRTIM_AUTODELAYEDMODE_AUTODELAYED_TIMEOUTCMP3)
 8006dbe:	683b      	ldr	r3, [r7, #0]
 8006dc0:	685b      	ldr	r3, [r3, #4]
 8006dc2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006dc6:	f040 808c 	bne.w	8006ee2 <HAL_HRTIM_WaveformCompareConfig+0x2a6>
            hhrtim->Instance->sTimerxRegs[TimerIdx].CMP3xR = pCompareCfg->AutoDelayedTimeout;
 8006dca:	68fb      	ldr	r3, [r7, #12]
 8006dcc:	6819      	ldr	r1, [r3, #0]
 8006dce:	683b      	ldr	r3, [r7, #0]
 8006dd0:	689a      	ldr	r2, [r3, #8]
 8006dd2:	68bb      	ldr	r3, [r7, #8]
 8006dd4:	01db      	lsls	r3, r3, #7
 8006dd6:	440b      	add	r3, r1
 8006dd8:	33a8      	adds	r3, #168	; 0xa8
 8006dda:	601a      	str	r2, [r3, #0]
         break;
 8006ddc:	e081      	b.n	8006ee2 <HAL_HRTIM_WaveformCompareConfig+0x2a6>
          MODIFY_REG(hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR, HRTIM_TIMCR_DELCMP2, 0U);
 8006dde:	68fb      	ldr	r3, [r7, #12]
 8006de0:	681a      	ldr	r2, [r3, #0]
 8006de2:	68bb      	ldr	r3, [r7, #8]
 8006de4:	3301      	adds	r3, #1
 8006de6:	01db      	lsls	r3, r3, #7
 8006de8:	4413      	add	r3, r2
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	68fa      	ldr	r2, [r7, #12]
 8006dee:	6811      	ldr	r1, [r2, #0]
 8006df0:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8006df4:	68bb      	ldr	r3, [r7, #8]
 8006df6:	3301      	adds	r3, #1
 8006df8:	01db      	lsls	r3, r3, #7
 8006dfa:	440b      	add	r3, r1
 8006dfc:	601a      	str	r2, [r3, #0]
         break;
 8006dfe:	e070      	b.n	8006ee2 <HAL_HRTIM_WaveformCompareConfig+0x2a6>
      }

    case HRTIM_COMPAREUNIT_3:
      {
        /* Set the compare value */
        hhrtim->Instance->sTimerxRegs[TimerIdx].CMP3xR = pCompareCfg->CompareValue;
 8006e00:	68fb      	ldr	r3, [r7, #12]
 8006e02:	6819      	ldr	r1, [r3, #0]
 8006e04:	683b      	ldr	r3, [r7, #0]
 8006e06:	681a      	ldr	r2, [r3, #0]
 8006e08:	68bb      	ldr	r3, [r7, #8]
 8006e0a:	01db      	lsls	r3, r3, #7
 8006e0c:	440b      	add	r3, r1
 8006e0e:	33a8      	adds	r3, #168	; 0xa8
 8006e10:	601a      	str	r2, [r3, #0]
        break;
 8006e12:	e069      	b.n	8006ee8 <HAL_HRTIM_WaveformCompareConfig+0x2ac>
      {
        /* Check parameters */
        assert_param(IS_HRTIM_COMPAREUNIT_AUTODELAYEDMODE(CompareUnit, pCompareCfg->AutoDelayedMode));

        /* Set the compare value */
        hhrtim->Instance->sTimerxRegs[TimerIdx].CMP4xR = pCompareCfg->CompareValue;
 8006e14:	68fb      	ldr	r3, [r7, #12]
 8006e16:	6819      	ldr	r1, [r3, #0]
 8006e18:	683b      	ldr	r3, [r7, #0]
 8006e1a:	681a      	ldr	r2, [r3, #0]
 8006e1c:	68bb      	ldr	r3, [r7, #8]
 8006e1e:	01db      	lsls	r3, r3, #7
 8006e20:	440b      	add	r3, r1
 8006e22:	33ac      	adds	r3, #172	; 0xac
 8006e24:	601a      	str	r2, [r3, #0]

        if (pCompareCfg->AutoDelayedMode != HRTIM_AUTODELAYEDMODE_REGULAR)
 8006e26:	683b      	ldr	r3, [r7, #0]
 8006e28:	685b      	ldr	r3, [r3, #4]
 8006e2a:	2b00      	cmp	r3, #0
 8006e2c:	d03f      	beq.n	8006eae <HAL_HRTIM_WaveformCompareConfig+0x272>
        {
          /* Configure auto-delayed mode */
          /* DELCMP4 bitfield must be reset when reprogrammed from one value */
          /* to the other to reinitialize properly the auto-delayed mechanism */
          hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR &= ~HRTIM_TIMCR_DELCMP4;
 8006e2e:	68fb      	ldr	r3, [r7, #12]
 8006e30:	681a      	ldr	r2, [r3, #0]
 8006e32:	68bb      	ldr	r3, [r7, #8]
 8006e34:	3301      	adds	r3, #1
 8006e36:	01db      	lsls	r3, r3, #7
 8006e38:	4413      	add	r3, r2
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	68fa      	ldr	r2, [r7, #12]
 8006e3e:	6811      	ldr	r1, [r2, #0]
 8006e40:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8006e44:	68bb      	ldr	r3, [r7, #8]
 8006e46:	3301      	adds	r3, #1
 8006e48:	01db      	lsls	r3, r3, #7
 8006e4a:	440b      	add	r3, r1
 8006e4c:	601a      	str	r2, [r3, #0]
          hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR |= (pCompareCfg->AutoDelayedMode << 2U);
 8006e4e:	68fb      	ldr	r3, [r7, #12]
 8006e50:	681a      	ldr	r2, [r3, #0]
 8006e52:	68bb      	ldr	r3, [r7, #8]
 8006e54:	3301      	adds	r3, #1
 8006e56:	01db      	lsls	r3, r3, #7
 8006e58:	4413      	add	r3, r2
 8006e5a:	681a      	ldr	r2, [r3, #0]
 8006e5c:	683b      	ldr	r3, [r7, #0]
 8006e5e:	685b      	ldr	r3, [r3, #4]
 8006e60:	009b      	lsls	r3, r3, #2
 8006e62:	68f9      	ldr	r1, [r7, #12]
 8006e64:	6809      	ldr	r1, [r1, #0]
 8006e66:	431a      	orrs	r2, r3
 8006e68:	68bb      	ldr	r3, [r7, #8]
 8006e6a:	3301      	adds	r3, #1
 8006e6c:	01db      	lsls	r3, r3, #7
 8006e6e:	440b      	add	r3, r1
 8006e70:	601a      	str	r2, [r3, #0]

          /* Set the compare value for timeout compare unit (if any) */
          if (pCompareCfg->AutoDelayedMode == HRTIM_AUTODELAYEDMODE_AUTODELAYED_TIMEOUTCMP1)
 8006e72:	683b      	ldr	r3, [r7, #0]
 8006e74:	685b      	ldr	r3, [r3, #4]
 8006e76:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006e7a:	d109      	bne.n	8006e90 <HAL_HRTIM_WaveformCompareConfig+0x254>
          {
            hhrtim->Instance->sTimerxRegs[TimerIdx].CMP1xR = pCompareCfg->AutoDelayedTimeout;
 8006e7c:	68fb      	ldr	r3, [r7, #12]
 8006e7e:	6819      	ldr	r1, [r3, #0]
 8006e80:	683b      	ldr	r3, [r7, #0]
 8006e82:	689a      	ldr	r2, [r3, #8]
 8006e84:	68bb      	ldr	r3, [r7, #8]
 8006e86:	01db      	lsls	r3, r3, #7
 8006e88:	440b      	add	r3, r1
 8006e8a:	339c      	adds	r3, #156	; 0x9c
 8006e8c:	601a      	str	r2, [r3, #0]
        else
        {
          /* Clear HRTIM_TIMxCR.DELCMP4 bitfield */
          MODIFY_REG(hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR, HRTIM_TIMCR_DELCMP4, 0U);
        }
         break;
 8006e8e:	e02a      	b.n	8006ee6 <HAL_HRTIM_WaveformCompareConfig+0x2aa>
          else if (pCompareCfg->AutoDelayedMode == HRTIM_AUTODELAYEDMODE_AUTODELAYED_TIMEOUTCMP3)
 8006e90:	683b      	ldr	r3, [r7, #0]
 8006e92:	685b      	ldr	r3, [r3, #4]
 8006e94:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006e98:	d125      	bne.n	8006ee6 <HAL_HRTIM_WaveformCompareConfig+0x2aa>
            hhrtim->Instance->sTimerxRegs[TimerIdx].CMP3xR = pCompareCfg->AutoDelayedTimeout;
 8006e9a:	68fb      	ldr	r3, [r7, #12]
 8006e9c:	6819      	ldr	r1, [r3, #0]
 8006e9e:	683b      	ldr	r3, [r7, #0]
 8006ea0:	689a      	ldr	r2, [r3, #8]
 8006ea2:	68bb      	ldr	r3, [r7, #8]
 8006ea4:	01db      	lsls	r3, r3, #7
 8006ea6:	440b      	add	r3, r1
 8006ea8:	33a8      	adds	r3, #168	; 0xa8
 8006eaa:	601a      	str	r2, [r3, #0]
         break;
 8006eac:	e01b      	b.n	8006ee6 <HAL_HRTIM_WaveformCompareConfig+0x2aa>
          MODIFY_REG(hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR, HRTIM_TIMCR_DELCMP4, 0U);
 8006eae:	68fb      	ldr	r3, [r7, #12]
 8006eb0:	681a      	ldr	r2, [r3, #0]
 8006eb2:	68bb      	ldr	r3, [r7, #8]
 8006eb4:	3301      	adds	r3, #1
 8006eb6:	01db      	lsls	r3, r3, #7
 8006eb8:	4413      	add	r3, r2
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	68fa      	ldr	r2, [r7, #12]
 8006ebe:	6811      	ldr	r1, [r2, #0]
 8006ec0:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8006ec4:	68bb      	ldr	r3, [r7, #8]
 8006ec6:	3301      	adds	r3, #1
 8006ec8:	01db      	lsls	r3, r3, #7
 8006eca:	440b      	add	r3, r1
 8006ecc:	601a      	str	r2, [r3, #0]
         break;
 8006ece:	e00a      	b.n	8006ee6 <HAL_HRTIM_WaveformCompareConfig+0x2aa>
      }

  default:
     {
      hhrtim->State = HAL_HRTIM_STATE_ERROR;
 8006ed0:	68fb      	ldr	r3, [r7, #12]
 8006ed2:	2207      	movs	r2, #7
 8006ed4:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

      /* Process Unlocked */
      __HAL_UNLOCK(hhrtim);
 8006ed8:	68fb      	ldr	r3, [r7, #12]
 8006eda:	2200      	movs	r2, #0
 8006edc:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

      break;
 8006ee0:	e002      	b.n	8006ee8 <HAL_HRTIM_WaveformCompareConfig+0x2ac>
         break;
 8006ee2:	bf00      	nop
 8006ee4:	e000      	b.n	8006ee8 <HAL_HRTIM_WaveformCompareConfig+0x2ac>
         break;
 8006ee6:	bf00      	nop
     }
   }

   if(hhrtim->State == HAL_HRTIM_STATE_ERROR)
 8006ee8:	68fb      	ldr	r3, [r7, #12]
 8006eea:	f893 30c1 	ldrb.w	r3, [r3, #193]	; 0xc1
 8006eee:	b2db      	uxtb	r3, r3
 8006ef0:	2b07      	cmp	r3, #7
 8006ef2:	d101      	bne.n	8006ef8 <HAL_HRTIM_WaveformCompareConfig+0x2bc>
   {
     return HAL_ERROR;
 8006ef4:	2301      	movs	r3, #1
 8006ef6:	e008      	b.n	8006f0a <HAL_HRTIM_WaveformCompareConfig+0x2ce>
   }

  }
  hhrtim->State = HAL_HRTIM_STATE_READY;
 8006ef8:	68fb      	ldr	r3, [r7, #12]
 8006efa:	2201      	movs	r2, #1
 8006efc:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 8006f00:	68fb      	ldr	r3, [r7, #12]
 8006f02:	2200      	movs	r2, #0
 8006f04:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

  return HAL_OK;
 8006f08:	2300      	movs	r3, #0
}
 8006f0a:	4618      	mov	r0, r3
 8006f0c:	3714      	adds	r7, #20
 8006f0e:	46bd      	mov	sp, r7
 8006f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f14:	4770      	bx	lr
 8006f16:	bf00      	nop

08006f18 <HAL_HRTIM_WaveformOutputConfig>:
  */
HAL_StatusTypeDef HAL_HRTIM_WaveformOutputConfig(HRTIM_HandleTypeDef * hhrtim,
                                                uint32_t TimerIdx,
                                                uint32_t Output,
                                                const HRTIM_OutputCfgTypeDef * pOutputCfg)
{
 8006f18:	b580      	push	{r7, lr}
 8006f1a:	b084      	sub	sp, #16
 8006f1c:	af00      	add	r7, sp, #0
 8006f1e:	60f8      	str	r0, [r7, #12]
 8006f20:	60b9      	str	r1, [r7, #8]
 8006f22:	607a      	str	r2, [r7, #4]
 8006f24:	603b      	str	r3, [r7, #0]
  assert_param(IS_HRTIM_OUTPUTIDLEMODE(pOutputCfg->IdleMode));
  assert_param(IS_HRTIM_OUTPUTFAULTLEVEL(pOutputCfg->FaultLevel));
  assert_param(IS_HRTIM_OUTPUTCHOPPERMODE(pOutputCfg->ChopperModeEnable));
  assert_param(IS_HRTIM_OUTPUTBURSTMODEENTRY(pOutputCfg->BurstModeEntryDelayed));

  if(hhrtim->State == HAL_HRTIM_STATE_BUSY)
 8006f26:	68fb      	ldr	r3, [r7, #12]
 8006f28:	f893 30c1 	ldrb.w	r3, [r3, #193]	; 0xc1
 8006f2c:	b2db      	uxtb	r3, r3
 8006f2e:	2b02      	cmp	r3, #2
 8006f30:	d101      	bne.n	8006f36 <HAL_HRTIM_WaveformOutputConfig+0x1e>
  {
     return HAL_BUSY;
 8006f32:	2302      	movs	r3, #2
 8006f34:	e01d      	b.n	8006f72 <HAL_HRTIM_WaveformOutputConfig+0x5a>
  }

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 8006f36:	68fb      	ldr	r3, [r7, #12]
 8006f38:	f893 30c0 	ldrb.w	r3, [r3, #192]	; 0xc0
 8006f3c:	2b01      	cmp	r3, #1
 8006f3e:	d101      	bne.n	8006f44 <HAL_HRTIM_WaveformOutputConfig+0x2c>
 8006f40:	2302      	movs	r3, #2
 8006f42:	e016      	b.n	8006f72 <HAL_HRTIM_WaveformOutputConfig+0x5a>
 8006f44:	68fb      	ldr	r3, [r7, #12]
 8006f46:	2201      	movs	r2, #1
 8006f48:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8006f4c:	68fb      	ldr	r3, [r7, #12]
 8006f4e:	2202      	movs	r2, #2
 8006f50:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  /* Configure the timer output */
  HRTIM_OutputConfig(hhrtim,
 8006f54:	683b      	ldr	r3, [r7, #0]
 8006f56:	687a      	ldr	r2, [r7, #4]
 8006f58:	68b9      	ldr	r1, [r7, #8]
 8006f5a:	68f8      	ldr	r0, [r7, #12]
 8006f5c:	f000 fc50 	bl	8007800 <HRTIM_OutputConfig>
                     TimerIdx,
                     Output,
                     pOutputCfg);

  hhrtim->State = HAL_HRTIM_STATE_READY;
 8006f60:	68fb      	ldr	r3, [r7, #12]
 8006f62:	2201      	movs	r2, #1
 8006f64:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 8006f68:	68fb      	ldr	r3, [r7, #12]
 8006f6a:	2200      	movs	r2, #0
 8006f6c:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

  return HAL_OK;
 8006f70:	2300      	movs	r3, #0
}
 8006f72:	4618      	mov	r0, r3
 8006f74:	3710      	adds	r7, #16
 8006f76:	46bd      	mov	sp, r7
 8006f78:	bd80      	pop	{r7, pc}

08006f7a <HAL_HRTIM_WaveformOutputStart>:
  *                    @arg HRTIM_OUTPUT_TE2: Timer E - Output 2
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HRTIM_WaveformOutputStart(HRTIM_HandleTypeDef * hhrtim,
                                                uint32_t OutputsToStart)
{
 8006f7a:	b480      	push	{r7}
 8006f7c:	b083      	sub	sp, #12
 8006f7e:	af00      	add	r7, sp, #0
 8006f80:	6078      	str	r0, [r7, #4]
 8006f82:	6039      	str	r1, [r7, #0]
   /* Check the parameters */
  assert_param(IS_HRTIM_OUTPUT(OutputsToStart));

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	f893 30c0 	ldrb.w	r3, [r3, #192]	; 0xc0
 8006f8a:	2b01      	cmp	r3, #1
 8006f8c:	d101      	bne.n	8006f92 <HAL_HRTIM_WaveformOutputStart+0x18>
 8006f8e:	2302      	movs	r3, #2
 8006f90:	e01a      	b.n	8006fc8 <HAL_HRTIM_WaveformOutputStart+0x4e>
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	2201      	movs	r2, #1
 8006f96:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	2202      	movs	r2, #2
 8006f9e:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  /* Enable the HRTIM outputs */
  hhrtim->Instance->sCommonRegs.OENR |= (OutputsToStart);
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	f8d3 1394 	ldr.w	r1, [r3, #916]	; 0x394
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	683a      	ldr	r2, [r7, #0]
 8006fb0:	430a      	orrs	r2, r1
 8006fb2:	f8c3 2394 	str.w	r2, [r3, #916]	; 0x394

  hhrtim->State = HAL_HRTIM_STATE_READY;
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	2201      	movs	r2, #1
 8006fba:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	2200      	movs	r2, #0
 8006fc2:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

  return HAL_OK;
 8006fc6:	2300      	movs	r3, #0
}
 8006fc8:	4618      	mov	r0, r3
 8006fca:	370c      	adds	r7, #12
 8006fcc:	46bd      	mov	sp, r7
 8006fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fd2:	4770      	bx	lr

08006fd4 <HAL_HRTIM_WaveformOutputStop>:
  *                    @arg HRTIM_OUTPUT_TE2: Timer E - Output 2
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HRTIM_WaveformOutputStop(HRTIM_HandleTypeDef * hhrtim,
                                               uint32_t OutputsToStop)
{
 8006fd4:	b480      	push	{r7}
 8006fd6:	b083      	sub	sp, #12
 8006fd8:	af00      	add	r7, sp, #0
 8006fda:	6078      	str	r0, [r7, #4]
 8006fdc:	6039      	str	r1, [r7, #0]
   /* Check the parameters */
  assert_param(IS_HRTIM_OUTPUT(OutputsToStop));

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	f893 30c0 	ldrb.w	r3, [r3, #192]	; 0xc0
 8006fe4:	2b01      	cmp	r3, #1
 8006fe6:	d101      	bne.n	8006fec <HAL_HRTIM_WaveformOutputStop+0x18>
 8006fe8:	2302      	movs	r3, #2
 8006fea:	e01a      	b.n	8007022 <HAL_HRTIM_WaveformOutputStop+0x4e>
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	2201      	movs	r2, #1
 8006ff0:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	2202      	movs	r2, #2
 8006ff8:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  /* Enable the HRTIM outputs */
  hhrtim->Instance->sCommonRegs.ODISR |= (OutputsToStop);
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	f8d3 1398 	ldr.w	r1, [r3, #920]	; 0x398
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	683a      	ldr	r2, [r7, #0]
 800700a:	430a      	orrs	r2, r1
 800700c:	f8c3 2398 	str.w	r2, [r3, #920]	; 0x398

  hhrtim->State = HAL_HRTIM_STATE_READY;
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	2201      	movs	r2, #1
 8007014:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	2200      	movs	r2, #0
 800701c:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

  return HAL_OK;
 8007020:	2300      	movs	r3, #0
}
 8007022:	4618      	mov	r0, r3
 8007024:	370c      	adds	r7, #12
 8007026:	46bd      	mov	sp, r7
 8007028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800702c:	4770      	bx	lr
	...

08007030 <HAL_HRTIM_WaveformCountStart_IT>:
  *       function.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HRTIM_WaveformCountStart_IT(HRTIM_HandleTypeDef * hhrtim,
                                                    uint32_t Timers)
{
 8007030:	b480      	push	{r7}
 8007032:	b085      	sub	sp, #20
 8007034:	af00      	add	r7, sp, #0
 8007036:	6078      	str	r0, [r7, #4]
 8007038:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_HRTIM_TIMERID(Timers));

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	f893 30c0 	ldrb.w	r3, [r3, #192]	; 0xc0
 8007040:	2b01      	cmp	r3, #1
 8007042:	d101      	bne.n	8007048 <HAL_HRTIM_WaveformCountStart_IT+0x18>
 8007044:	2302      	movs	r3, #2
 8007046:	e05b      	b.n	8007100 <HAL_HRTIM_WaveformCountStart_IT+0xd0>
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	2201      	movs	r2, #1
 800704c:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	2202      	movs	r2, #2
 8007054:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  /* Enable HRTIM interrupts (if required) */
  __HAL_HRTIM_ENABLE_IT(hhrtim, hhrtim->Init.HRTIMInterruptResquests);
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	f8d3 1390 	ldr.w	r1, [r3, #912]	; 0x390
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	685a      	ldr	r2, [r3, #4]
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	430a      	orrs	r2, r1
 800706a:	f8c3 2390 	str.w	r2, [r3, #912]	; 0x390

  /* Enable master timer related interrupts (if required) */
  if ((Timers & HRTIM_TIMERID_MASTER) != 0U)
 800706e:	683b      	ldr	r3, [r7, #0]
 8007070:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007074:	2b00      	cmp	r3, #0
 8007076:	d009      	beq.n	800708c <HAL_HRTIM_WaveformCountStart_IT+0x5c>
  {
    __HAL_HRTIM_MASTER_ENABLE_IT(hhrtim,
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	68d9      	ldr	r1, [r3, #12]
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	430a      	orrs	r2, r1
 800708a:	60da      	str	r2, [r3, #12]
                                 hhrtim->TimerParam[HRTIM_TIMERINDEX_MASTER].InterruptRequests);
  }

  /* Enable timing unit related interrupts (if required) */
  for (timer_idx = HRTIM_TIMERINDEX_TIMER_A ;
 800708c:	2300      	movs	r3, #0
 800708e:	73fb      	strb	r3, [r7, #15]
 8007090:	e022      	b.n	80070d8 <HAL_HRTIM_WaveformCountStart_IT+0xa8>
       timer_idx < HRTIM_TIMERINDEX_MASTER ;
       timer_idx++)
  {
    if ((Timers & TimerIdxToTimerId[timer_idx]) != 0U)
 8007092:	7bfb      	ldrb	r3, [r7, #15]
 8007094:	4a1d      	ldr	r2, [pc, #116]	; (800710c <HAL_HRTIM_WaveformCountStart_IT+0xdc>)
 8007096:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800709a:	683b      	ldr	r3, [r7, #0]
 800709c:	4013      	ands	r3, r2
 800709e:	2b00      	cmp	r3, #0
 80070a0:	d017      	beq.n	80070d2 <HAL_HRTIM_WaveformCountStart_IT+0xa2>
    {
      __HAL_HRTIM_TIMER_ENABLE_IT(hhrtim,
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	681a      	ldr	r2, [r3, #0]
 80070a6:	7bfb      	ldrb	r3, [r7, #15]
 80070a8:	01db      	lsls	r3, r3, #7
 80070aa:	4413      	add	r3, r2
 80070ac:	338c      	adds	r3, #140	; 0x8c
 80070ae:	6818      	ldr	r0, [r3, #0]
 80070b0:	7bfa      	ldrb	r2, [r7, #15]
 80070b2:	6879      	ldr	r1, [r7, #4]
 80070b4:	4613      	mov	r3, r2
 80070b6:	00db      	lsls	r3, r3, #3
 80070b8:	1a9b      	subs	r3, r3, r2
 80070ba:	009b      	lsls	r3, r3, #2
 80070bc:	440b      	add	r3, r1
 80070be:	3320      	adds	r3, #32
 80070c0:	681a      	ldr	r2, [r3, #0]
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	6819      	ldr	r1, [r3, #0]
 80070c6:	7bfb      	ldrb	r3, [r7, #15]
 80070c8:	4302      	orrs	r2, r0
 80070ca:	01db      	lsls	r3, r3, #7
 80070cc:	440b      	add	r3, r1
 80070ce:	338c      	adds	r3, #140	; 0x8c
 80070d0:	601a      	str	r2, [r3, #0]
       timer_idx++)
 80070d2:	7bfb      	ldrb	r3, [r7, #15]
 80070d4:	3301      	adds	r3, #1
 80070d6:	73fb      	strb	r3, [r7, #15]
       timer_idx < HRTIM_TIMERINDEX_MASTER ;
 80070d8:	7bfb      	ldrb	r3, [r7, #15]
 80070da:	2b04      	cmp	r3, #4
 80070dc:	d9d9      	bls.n	8007092 <HAL_HRTIM_WaveformCountStart_IT+0x62>
                                  hhrtim->TimerParam[timer_idx].InterruptRequests);
    }
  }

  /* Enable timer(s) counter */
  hhrtim->Instance->sMasterRegs.MCR |= (Timers);
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	6819      	ldr	r1, [r3, #0]
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	683a      	ldr	r2, [r7, #0]
 80070ea:	430a      	orrs	r2, r1
 80070ec:	601a      	str	r2, [r3, #0]

  hhrtim->State = HAL_HRTIM_STATE_READY;
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	2201      	movs	r2, #1
 80070f2:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	2200      	movs	r2, #0
 80070fa:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

  return HAL_OK;}
 80070fe:	2300      	movs	r3, #0
 8007100:	4618      	mov	r0, r3
 8007102:	3714      	adds	r7, #20
 8007104:	46bd      	mov	sp, r7
 8007106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800710a:	4770      	bx	lr
 800710c:	20000028 	.word	0x20000028

08007110 <HAL_HRTIM_WaveformCountStop_IT>:
  * @note The counter of a timer is stopped only if all timer outputs are disabled
  * @note All enabled timer related interrupts are disabled.
  */
HAL_StatusTypeDef HAL_HRTIM_WaveformCountStop_IT(HRTIM_HandleTypeDef * hhrtim,
                                                   uint32_t Timers)
{
 8007110:	b480      	push	{r7}
 8007112:	b085      	sub	sp, #20
 8007114:	af00      	add	r7, sp, #0
 8007116:	6078      	str	r0, [r7, #4]
 8007118:	6039      	str	r1, [r7, #0]
  /* ++ WA */
  __IO uint32_t delai = (uint32_t)(0x17FU);
 800711a:	f240 137f 	movw	r3, #383	; 0x17f
 800711e:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_HRTIM_TIMERID(Timers));

  /* Process Locked */
  __HAL_LOCK(hhrtim);
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	f893 30c0 	ldrb.w	r3, [r3, #192]	; 0xc0
 8007126:	2b01      	cmp	r3, #1
 8007128:	d101      	bne.n	800712e <HAL_HRTIM_WaveformCountStop_IT+0x1e>
 800712a:	2302      	movs	r3, #2
 800712c:	e065      	b.n	80071fa <HAL_HRTIM_WaveformCountStop_IT+0xea>
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	2201      	movs	r2, #1
 8007132:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

  hhrtim->State = HAL_HRTIM_STATE_BUSY;
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	2202      	movs	r2, #2
 800713a:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  /* Disable HRTIM interrupts (if required) */
  __HAL_HRTIM_DISABLE_IT(hhrtim, hhrtim->Init.HRTIMInterruptResquests);
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	f8d3 1390 	ldr.w	r1, [r3, #912]	; 0x390
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	685b      	ldr	r3, [r3, #4]
 800714a:	43da      	mvns	r2, r3
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	400a      	ands	r2, r1
 8007152:	f8c3 2390 	str.w	r2, [r3, #912]	; 0x390

  /* Disable master timer related interrupts (if required) */
  if ((Timers & HRTIM_TIMERID_MASTER) != 0U)
 8007156:	683b      	ldr	r3, [r7, #0]
 8007158:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800715c:	2b00      	cmp	r3, #0
 800715e:	d00a      	beq.n	8007176 <HAL_HRTIM_WaveformCountStop_IT+0x66>
  {
    /* Interrupts enable flag must be cleared one by one */
    __HAL_HRTIM_MASTER_DISABLE_IT(hhrtim, hhrtim->TimerParam[HRTIM_TIMERINDEX_MASTER].InterruptRequests);
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	68d9      	ldr	r1, [r3, #12]
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800716c:	43da      	mvns	r2, r3
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	400a      	ands	r2, r1
 8007174:	60da      	str	r2, [r3, #12]
  }

  /* Disable timing unit related interrupts (if required) */
  for (timer_idx = HRTIM_TIMERINDEX_TIMER_A ;
 8007176:	2300      	movs	r3, #0
 8007178:	73fb      	strb	r3, [r7, #15]
 800717a:	e023      	b.n	80071c4 <HAL_HRTIM_WaveformCountStop_IT+0xb4>
       timer_idx < HRTIM_TIMERINDEX_MASTER ;
       timer_idx++)
  {
    if ((Timers & TimerIdxToTimerId[timer_idx]) != 0U)
 800717c:	7bfb      	ldrb	r3, [r7, #15]
 800717e:	4a22      	ldr	r2, [pc, #136]	; (8007208 <HAL_HRTIM_WaveformCountStop_IT+0xf8>)
 8007180:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8007184:	683b      	ldr	r3, [r7, #0]
 8007186:	4013      	ands	r3, r2
 8007188:	2b00      	cmp	r3, #0
 800718a:	d018      	beq.n	80071be <HAL_HRTIM_WaveformCountStop_IT+0xae>
    {
      __HAL_HRTIM_TIMER_DISABLE_IT(hhrtim, timer_idx, hhrtim->TimerParam[timer_idx].InterruptRequests);
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	681a      	ldr	r2, [r3, #0]
 8007190:	7bfb      	ldrb	r3, [r7, #15]
 8007192:	01db      	lsls	r3, r3, #7
 8007194:	4413      	add	r3, r2
 8007196:	338c      	adds	r3, #140	; 0x8c
 8007198:	6818      	ldr	r0, [r3, #0]
 800719a:	7bfa      	ldrb	r2, [r7, #15]
 800719c:	6879      	ldr	r1, [r7, #4]
 800719e:	4613      	mov	r3, r2
 80071a0:	00db      	lsls	r3, r3, #3
 80071a2:	1a9b      	subs	r3, r3, r2
 80071a4:	009b      	lsls	r3, r3, #2
 80071a6:	440b      	add	r3, r1
 80071a8:	3320      	adds	r3, #32
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	43da      	mvns	r2, r3
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	6819      	ldr	r1, [r3, #0]
 80071b2:	7bfb      	ldrb	r3, [r7, #15]
 80071b4:	4002      	ands	r2, r0
 80071b6:	01db      	lsls	r3, r3, #7
 80071b8:	440b      	add	r3, r1
 80071ba:	338c      	adds	r3, #140	; 0x8c
 80071bc:	601a      	str	r2, [r3, #0]
       timer_idx++)
 80071be:	7bfb      	ldrb	r3, [r7, #15]
 80071c0:	3301      	adds	r3, #1
 80071c2:	73fb      	strb	r3, [r7, #15]
       timer_idx < HRTIM_TIMERINDEX_MASTER ;
 80071c4:	7bfb      	ldrb	r3, [r7, #15]
 80071c6:	2b04      	cmp	r3, #4
 80071c8:	d9d8      	bls.n	800717c <HAL_HRTIM_WaveformCountStop_IT+0x6c>
    }
  }

  /* ++ WA */
  do { delai--; } while (delai != 0U);
 80071ca:	68bb      	ldr	r3, [r7, #8]
 80071cc:	3b01      	subs	r3, #1
 80071ce:	60bb      	str	r3, [r7, #8]
 80071d0:	68bb      	ldr	r3, [r7, #8]
 80071d2:	2b00      	cmp	r3, #0
 80071d4:	d1f9      	bne.n	80071ca <HAL_HRTIM_WaveformCountStop_IT+0xba>
  /* -- WA */

  /* Disable timer(s) counter */
  hhrtim->Instance->sMasterRegs.MCR &= ~(Timers);
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	6819      	ldr	r1, [r3, #0]
 80071dc:	683b      	ldr	r3, [r7, #0]
 80071de:	43da      	mvns	r2, r3
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	400a      	ands	r2, r1
 80071e6:	601a      	str	r2, [r3, #0]

  hhrtim->State = HAL_HRTIM_STATE_READY;
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	2201      	movs	r2, #1
 80071ec:	f883 20c1 	strb.w	r2, [r3, #193]	; 0xc1

  /* Process Unlocked */
  __HAL_UNLOCK(hhrtim);
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	2200      	movs	r2, #0
 80071f4:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0

  return HAL_OK;
 80071f8:	2300      	movs	r3, #0
}
 80071fa:	4618      	mov	r0, r3
 80071fc:	3714      	adds	r7, #20
 80071fe:	46bd      	mov	sp, r7
 8007200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007204:	4770      	bx	lr
 8007206:	bf00      	nop
 8007208:	20000028 	.word	0x20000028

0800720c <HAL_HRTIM_IRQHandler>:
  *                   This parameter can be any value of HRTIM_Timer_Index
  * @retval None
  */
void HAL_HRTIM_IRQHandler(HRTIM_HandleTypeDef * hhrtim,
                          uint32_t TimerIdx)
{
 800720c:	b580      	push	{r7, lr}
 800720e:	b082      	sub	sp, #8
 8007210:	af00      	add	r7, sp, #0
 8007212:	6078      	str	r0, [r7, #4]
 8007214:	6039      	str	r1, [r7, #0]
  /* HRTIM interrupts handling */
  if (TimerIdx == HRTIM_TIMERINDEX_COMMON)
 8007216:	683b      	ldr	r3, [r7, #0]
 8007218:	2bff      	cmp	r3, #255	; 0xff
 800721a:	d103      	bne.n	8007224 <HAL_HRTIM_IRQHandler+0x18>
  {
    HRTIM_HRTIM_ISR(hhrtim);
 800721c:	6878      	ldr	r0, [r7, #4]
 800721e:	f000 fc29 	bl	8007a74 <HRTIM_HRTIM_ISR>
  {
    /* Timing unit related interrupts handling */
    HRTIM_Timer_ISR(hhrtim, TimerIdx);
  }

}
 8007222:	e00a      	b.n	800723a <HAL_HRTIM_IRQHandler+0x2e>
  else if (TimerIdx == HRTIM_TIMERINDEX_MASTER)
 8007224:	683b      	ldr	r3, [r7, #0]
 8007226:	2b05      	cmp	r3, #5
 8007228:	d103      	bne.n	8007232 <HAL_HRTIM_IRQHandler+0x26>
    HRTIM_Master_ISR(hhrtim);
 800722a:	6878      	ldr	r0, [r7, #4]
 800722c:	f000 fca0 	bl	8007b70 <HRTIM_Master_ISR>
}
 8007230:	e003      	b.n	800723a <HAL_HRTIM_IRQHandler+0x2e>
    HRTIM_Timer_ISR(hhrtim, TimerIdx);
 8007232:	6839      	ldr	r1, [r7, #0]
 8007234:	6878      	ldr	r0, [r7, #4]
 8007236:	f000 fd45 	bl	8007cc4 <HRTIM_Timer_ISR>
}
 800723a:	bf00      	nop
 800723c:	3708      	adds	r7, #8
 800723e:	46bd      	mov	sp, r7
 8007240:	bd80      	pop	{r7, pc}

08007242 <HAL_HRTIM_Fault1Callback>:
  * @brief  Callback function invoked when a fault 1 interrupt occurred
  * @param  hhrtim pointer to HAL HRTIM handle  * @retval None
  * @retval None
  */
__weak void HAL_HRTIM_Fault1Callback(HRTIM_HandleTypeDef * hhrtim)
{
 8007242:	b480      	push	{r7}
 8007244:	b083      	sub	sp, #12
 8007246:	af00      	add	r7, sp, #0
 8007248:	6078      	str	r0, [r7, #4]
  UNUSED(hhrtim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Fault1Callback could be implemented in the user file
   */
}
 800724a:	bf00      	nop
 800724c:	370c      	adds	r7, #12
 800724e:	46bd      	mov	sp, r7
 8007250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007254:	4770      	bx	lr

08007256 <HAL_HRTIM_Fault2Callback>:
  * @brief  Callback function invoked when a fault 2 interrupt occurred
  * @param  hhrtim pointer to HAL HRTIM handle
  * @retval None
  */
__weak void HAL_HRTIM_Fault2Callback(HRTIM_HandleTypeDef * hhrtim)
{
 8007256:	b480      	push	{r7}
 8007258:	b083      	sub	sp, #12
 800725a:	af00      	add	r7, sp, #0
 800725c:	6078      	str	r0, [r7, #4]
  UNUSED(hhrtim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Fault2Callback could be implemented in the user file
   */
}
 800725e:	bf00      	nop
 8007260:	370c      	adds	r7, #12
 8007262:	46bd      	mov	sp, r7
 8007264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007268:	4770      	bx	lr

0800726a <HAL_HRTIM_Fault3Callback>:
  * @brief  Callback function invoked when a fault 3 interrupt occurred
  * @param  hhrtim pointer to HAL HRTIM handle
  * @retval None
  */
__weak void HAL_HRTIM_Fault3Callback(HRTIM_HandleTypeDef * hhrtim)
{
 800726a:	b480      	push	{r7}
 800726c:	b083      	sub	sp, #12
 800726e:	af00      	add	r7, sp, #0
 8007270:	6078      	str	r0, [r7, #4]
  UNUSED(hhrtim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Fault3Callback could be implemented in the user file
   */
}
 8007272:	bf00      	nop
 8007274:	370c      	adds	r7, #12
 8007276:	46bd      	mov	sp, r7
 8007278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800727c:	4770      	bx	lr

0800727e <HAL_HRTIM_Fault4Callback>:
  * @brief  Callback function invoked when a fault 4 interrupt occurred
  * @param  hhrtim pointer to HAL HRTIM handle
  * @retval None
  */
__weak void HAL_HRTIM_Fault4Callback(HRTIM_HandleTypeDef * hhrtim)
{
 800727e:	b480      	push	{r7}
 8007280:	b083      	sub	sp, #12
 8007282:	af00      	add	r7, sp, #0
 8007284:	6078      	str	r0, [r7, #4]
  UNUSED(hhrtim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Fault4Callback could be implemented in the user file
   */
}
 8007286:	bf00      	nop
 8007288:	370c      	adds	r7, #12
 800728a:	46bd      	mov	sp, r7
 800728c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007290:	4770      	bx	lr

08007292 <HAL_HRTIM_Fault5Callback>:
  * @brief  Callback function invoked when a fault 5 interrupt occurred
  * @param  hhrtim pointer to HAL HRTIM handle
  * @retval None
  */
__weak void HAL_HRTIM_Fault5Callback(HRTIM_HandleTypeDef * hhrtim)
{
 8007292:	b480      	push	{r7}
 8007294:	b083      	sub	sp, #12
 8007296:	af00      	add	r7, sp, #0
 8007298:	6078      	str	r0, [r7, #4]
  UNUSED(hhrtim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Fault5Callback could be implemented in the user file
   */
}
 800729a:	bf00      	nop
 800729c:	370c      	adds	r7, #12
 800729e:	46bd      	mov	sp, r7
 80072a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072a4:	4770      	bx	lr

080072a6 <HAL_HRTIM_SystemFaultCallback>:
  * @brief  Callback function invoked when a system fault interrupt occurred
  * @param  hhrtim pointer to HAL HRTIM handle
  * @retval None
  */
__weak void HAL_HRTIM_SystemFaultCallback(HRTIM_HandleTypeDef * hhrtim)
{
 80072a6:	b480      	push	{r7}
 80072a8:	b083      	sub	sp, #12
 80072aa:	af00      	add	r7, sp, #0
 80072ac:	6078      	str	r0, [r7, #4]
  UNUSED(hhrtim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_SystemFaultCallback could be implemented in the user file
   */
}
 80072ae:	bf00      	nop
 80072b0:	370c      	adds	r7, #12
 80072b2:	46bd      	mov	sp, r7
 80072b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072b8:	4770      	bx	lr

080072ba <HAL_HRTIM_BurstModePeriodCallback>:
  * @brief  Callback function invoked when the end of the burst mode period is reached
  * @param  hhrtim pointer to HAL HRTIM handle
  * @retval None
  */
__weak void HAL_HRTIM_BurstModePeriodCallback(HRTIM_HandleTypeDef * hhrtim)
{
 80072ba:	b480      	push	{r7}
 80072bc:	b083      	sub	sp, #12
 80072be:	af00      	add	r7, sp, #0
 80072c0:	6078      	str	r0, [r7, #4]
  UNUSED(hhrtim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_BurstModeCallback could be implemented in the user file
   */
}
 80072c2:	bf00      	nop
 80072c4:	370c      	adds	r7, #12
 80072c6:	46bd      	mov	sp, r7
 80072c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072cc:	4770      	bx	lr

080072ce <HAL_HRTIM_SynchronizationEventCallback>:
  * @brief  Callback function invoked when a synchronization input event is received
  * @param  hhrtim pointer to HAL HRTIM handle
  * @retval None
  */
__weak void HAL_HRTIM_SynchronizationEventCallback(HRTIM_HandleTypeDef * hhrtim)
{
 80072ce:	b480      	push	{r7}
 80072d0:	b083      	sub	sp, #12
 80072d2:	af00      	add	r7, sp, #0
 80072d4:	6078      	str	r0, [r7, #4]
  UNUSED(hhrtim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_SynchronizationEventCallback could be implemented in the user file
   */
}
 80072d6:	bf00      	nop
 80072d8:	370c      	adds	r7, #12
 80072da:	46bd      	mov	sp, r7
 80072dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072e0:	4770      	bx	lr

080072e2 <HAL_HRTIM_RegistersUpdateCallback>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_E for timer E
  * @retval None
  */
__weak void HAL_HRTIM_RegistersUpdateCallback(HRTIM_HandleTypeDef * hhrtim,
                                              uint32_t TimerIdx)
{
 80072e2:	b480      	push	{r7}
 80072e4:	b083      	sub	sp, #12
 80072e6:	af00      	add	r7, sp, #0
 80072e8:	6078      	str	r0, [r7, #4]
 80072ea:	6039      	str	r1, [r7, #0]
  UNUSED(TimerIdx);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Master_RegistersUpdateCallback could be implemented in the user file
   */
}
 80072ec:	bf00      	nop
 80072ee:	370c      	adds	r7, #12
 80072f0:	46bd      	mov	sp, r7
 80072f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072f6:	4770      	bx	lr

080072f8 <HAL_HRTIM_Compare1EventCallback>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_E for timer E
  * @retval None
  */
__weak void HAL_HRTIM_Compare1EventCallback(HRTIM_HandleTypeDef * hhrtim,
                                              uint32_t TimerIdx)
{
 80072f8:	b480      	push	{r7}
 80072fa:	b083      	sub	sp, #12
 80072fc:	af00      	add	r7, sp, #0
 80072fe:	6078      	str	r0, [r7, #4]
 8007300:	6039      	str	r1, [r7, #0]
  UNUSED(TimerIdx);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Master_Compare1EventCallback could be implemented in the user file
   */
}
 8007302:	bf00      	nop
 8007304:	370c      	adds	r7, #12
 8007306:	46bd      	mov	sp, r7
 8007308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800730c:	4770      	bx	lr

0800730e <HAL_HRTIM_Compare4EventCallback>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_E for timer E
  * @retval None
  */
__weak void HAL_HRTIM_Compare4EventCallback(HRTIM_HandleTypeDef * hhrtim,
                                              uint32_t TimerIdx)
{
 800730e:	b480      	push	{r7}
 8007310:	b083      	sub	sp, #12
 8007312:	af00      	add	r7, sp, #0
 8007314:	6078      	str	r0, [r7, #4]
 8007316:	6039      	str	r1, [r7, #0]
  UNUSED(TimerIdx);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Master_Compare4EventCallback could be implemented in the user file
   */
}
 8007318:	bf00      	nop
 800731a:	370c      	adds	r7, #12
 800731c:	46bd      	mov	sp, r7
 800731e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007322:	4770      	bx	lr

08007324 <HAL_HRTIM_Capture1EventCallback>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_E for timer E
  * @retval None
  */
__weak void HAL_HRTIM_Capture1EventCallback(HRTIM_HandleTypeDef * hhrtim,
                                              uint32_t TimerIdx)
{
 8007324:	b480      	push	{r7}
 8007326:	b083      	sub	sp, #12
 8007328:	af00      	add	r7, sp, #0
 800732a:	6078      	str	r0, [r7, #4]
 800732c:	6039      	str	r1, [r7, #0]
  UNUSED(TimerIdx);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Timer_Capture1EventCallback could be implemented in the user file
   */
}
 800732e:	bf00      	nop
 8007330:	370c      	adds	r7, #12
 8007332:	46bd      	mov	sp, r7
 8007334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007338:	4770      	bx	lr

0800733a <HAL_HRTIM_Capture2EventCallback>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_E for timer E
  * @retval None
  */
__weak void HAL_HRTIM_Capture2EventCallback(HRTIM_HandleTypeDef * hhrtim,
                                              uint32_t TimerIdx)
{
 800733a:	b480      	push	{r7}
 800733c:	b083      	sub	sp, #12
 800733e:	af00      	add	r7, sp, #0
 8007340:	6078      	str	r0, [r7, #4]
 8007342:	6039      	str	r1, [r7, #0]
  UNUSED(TimerIdx);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Timer_Capture2EventCallback could be implemented in the user file
   */
}
 8007344:	bf00      	nop
 8007346:	370c      	adds	r7, #12
 8007348:	46bd      	mov	sp, r7
 800734a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800734e:	4770      	bx	lr

08007350 <HAL_HRTIM_DelayedProtectionCallback>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_E for timer E
  * @retval None
  */
__weak void HAL_HRTIM_DelayedProtectionCallback(HRTIM_HandleTypeDef * hhrtim,
                                              uint32_t TimerIdx)
{
 8007350:	b480      	push	{r7}
 8007352:	b083      	sub	sp, #12
 8007354:	af00      	add	r7, sp, #0
 8007356:	6078      	str	r0, [r7, #4]
 8007358:	6039      	str	r1, [r7, #0]
  UNUSED(TimerIdx);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Timer_DelayedProtectionCallback could be implemented in the user file
   */
}
 800735a:	bf00      	nop
 800735c:	370c      	adds	r7, #12
 800735e:	46bd      	mov	sp, r7
 8007360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007364:	4770      	bx	lr

08007366 <HAL_HRTIM_CounterResetCallback>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_E for timer E
  * @retval None
  */
__weak void HAL_HRTIM_CounterResetCallback(HRTIM_HandleTypeDef * hhrtim,
                                              uint32_t TimerIdx)
{
 8007366:	b480      	push	{r7}
 8007368:	b083      	sub	sp, #12
 800736a:	af00      	add	r7, sp, #0
 800736c:	6078      	str	r0, [r7, #4]
 800736e:	6039      	str	r1, [r7, #0]
  UNUSED(TimerIdx);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Timer_CounterResetCallback could be implemented in the user file
   */
}
 8007370:	bf00      	nop
 8007372:	370c      	adds	r7, #12
 8007374:	46bd      	mov	sp, r7
 8007376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800737a:	4770      	bx	lr

0800737c <HAL_HRTIM_Output1SetCallback>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_E for timer E
  * @retval None
  */
__weak void HAL_HRTIM_Output1SetCallback(HRTIM_HandleTypeDef * hhrtim,
                                              uint32_t TimerIdx)
{
 800737c:	b480      	push	{r7}
 800737e:	b083      	sub	sp, #12
 8007380:	af00      	add	r7, sp, #0
 8007382:	6078      	str	r0, [r7, #4]
 8007384:	6039      	str	r1, [r7, #0]
  UNUSED(TimerIdx);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Timer_Output1SetCallback could be implemented in the user file
   */
}
 8007386:	bf00      	nop
 8007388:	370c      	adds	r7, #12
 800738a:	46bd      	mov	sp, r7
 800738c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007390:	4770      	bx	lr

08007392 <HAL_HRTIM_Output1ResetCallback>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_E for timer E
  * @retval None
  */
__weak void HAL_HRTIM_Output1ResetCallback(HRTIM_HandleTypeDef * hhrtim,
                                              uint32_t TimerIdx)
{
 8007392:	b480      	push	{r7}
 8007394:	b083      	sub	sp, #12
 8007396:	af00      	add	r7, sp, #0
 8007398:	6078      	str	r0, [r7, #4]
 800739a:	6039      	str	r1, [r7, #0]
  UNUSED(TimerIdx);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Timer_Output1ResetCallback could be implemented in the user file
   */
}
 800739c:	bf00      	nop
 800739e:	370c      	adds	r7, #12
 80073a0:	46bd      	mov	sp, r7
 80073a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073a6:	4770      	bx	lr

080073a8 <HAL_HRTIM_Output2SetCallback>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_E for timer E
  * @retval None
  */
__weak void HAL_HRTIM_Output2SetCallback(HRTIM_HandleTypeDef * hhrtim,
                                              uint32_t TimerIdx)
{
 80073a8:	b480      	push	{r7}
 80073aa:	b083      	sub	sp, #12
 80073ac:	af00      	add	r7, sp, #0
 80073ae:	6078      	str	r0, [r7, #4]
 80073b0:	6039      	str	r1, [r7, #0]
  UNUSED(TimerIdx);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Timer_Output2SetCallback could be implemented in the user file
   */
}
 80073b2:	bf00      	nop
 80073b4:	370c      	adds	r7, #12
 80073b6:	46bd      	mov	sp, r7
 80073b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073bc:	4770      	bx	lr

080073be <HAL_HRTIM_Output2ResetCallback>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_E for timer E
  * @retval None
  */
__weak void HAL_HRTIM_Output2ResetCallback(HRTIM_HandleTypeDef * hhrtim,
                                              uint32_t TimerIdx)
{
 80073be:	b480      	push	{r7}
 80073c0:	b083      	sub	sp, #12
 80073c2:	af00      	add	r7, sp, #0
 80073c4:	6078      	str	r0, [r7, #4]
 80073c6:	6039      	str	r1, [r7, #0]
  UNUSED(TimerIdx);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_HRTIM_Timer_Output2ResetCallback could be implemented in the user file
   */
}
 80073c8:	bf00      	nop
 80073ca:	370c      	adds	r7, #12
 80073cc:	46bd      	mov	sp, r7
 80073ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073d2:	4770      	bx	lr

080073d4 <HRTIM_MasterBase_Config>:
  * @param  pTimeBaseCfg pointer to the time base configuration structure
  * @retval None
  */
static void HRTIM_MasterBase_Config(HRTIM_HandleTypeDef * hhrtim,
                                    const HRTIM_TimeBaseCfgTypeDef * pTimeBaseCfg)
{
 80073d4:	b480      	push	{r7}
 80073d6:	b085      	sub	sp, #20
 80073d8:	af00      	add	r7, sp, #0
 80073da:	6078      	str	r0, [r7, #4]
 80073dc:	6039      	str	r1, [r7, #0]
  uint32_t hrtim_mcr;

  /* Configure master timer */
  hrtim_mcr = hhrtim->Instance->sMasterRegs.MCR;
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	60fb      	str	r3, [r7, #12]

  /* Set the prescaler ratio */
  hrtim_mcr &= (uint32_t) ~(HRTIM_MCR_CK_PSC);
 80073e6:	68fb      	ldr	r3, [r7, #12]
 80073e8:	f023 0307 	bic.w	r3, r3, #7
 80073ec:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= (uint32_t)pTimeBaseCfg->PrescalerRatio;
 80073ee:	683b      	ldr	r3, [r7, #0]
 80073f0:	689b      	ldr	r3, [r3, #8]
 80073f2:	68fa      	ldr	r2, [r7, #12]
 80073f4:	4313      	orrs	r3, r2
 80073f6:	60fb      	str	r3, [r7, #12]

  /* Set the operating mode */
  hrtim_mcr &= (uint32_t) ~(HRTIM_MCR_CONT | HRTIM_MCR_RETRIG);
 80073f8:	68fb      	ldr	r3, [r7, #12]
 80073fa:	f023 0318 	bic.w	r3, r3, #24
 80073fe:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= (uint32_t)pTimeBaseCfg->Mode;
 8007400:	683b      	ldr	r3, [r7, #0]
 8007402:	68db      	ldr	r3, [r3, #12]
 8007404:	68fa      	ldr	r2, [r7, #12]
 8007406:	4313      	orrs	r3, r2
 8007408:	60fb      	str	r3, [r7, #12]

  /* Update the HRTIM registers */
  hhrtim->Instance->sMasterRegs.MCR = hrtim_mcr;
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	68fa      	ldr	r2, [r7, #12]
 8007410:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sMasterRegs.MPER = pTimeBaseCfg->Period;
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	683a      	ldr	r2, [r7, #0]
 8007418:	6812      	ldr	r2, [r2, #0]
 800741a:	615a      	str	r2, [r3, #20]
  hhrtim->Instance->sMasterRegs.MREP = pTimeBaseCfg->RepetitionCounter;
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	683a      	ldr	r2, [r7, #0]
 8007422:	6852      	ldr	r2, [r2, #4]
 8007424:	619a      	str	r2, [r3, #24]
}
 8007426:	bf00      	nop
 8007428:	3714      	adds	r7, #20
 800742a:	46bd      	mov	sp, r7
 800742c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007430:	4770      	bx	lr

08007432 <HRTIM_TimingUnitBase_Config>:
  * @retval None
  */
static void HRTIM_TimingUnitBase_Config(HRTIM_HandleTypeDef * hhrtim,
                                        uint32_t TimerIdx ,
                                        const HRTIM_TimeBaseCfgTypeDef * pTimeBaseCfg)
{
 8007432:	b480      	push	{r7}
 8007434:	b087      	sub	sp, #28
 8007436:	af00      	add	r7, sp, #0
 8007438:	60f8      	str	r0, [r7, #12]
 800743a:	60b9      	str	r1, [r7, #8]
 800743c:	607a      	str	r2, [r7, #4]
  uint32_t hrtim_timcr;

  /* Configure master timing unit */
  hrtim_timcr = hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR;
 800743e:	68fb      	ldr	r3, [r7, #12]
 8007440:	681a      	ldr	r2, [r3, #0]
 8007442:	68bb      	ldr	r3, [r7, #8]
 8007444:	3301      	adds	r3, #1
 8007446:	01db      	lsls	r3, r3, #7
 8007448:	4413      	add	r3, r2
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	617b      	str	r3, [r7, #20]

  /* Set the prescaler ratio */
  hrtim_timcr &= (uint32_t) ~(HRTIM_TIMCR_CK_PSC);
 800744e:	697b      	ldr	r3, [r7, #20]
 8007450:	f023 0307 	bic.w	r3, r3, #7
 8007454:	617b      	str	r3, [r7, #20]
  hrtim_timcr |= (uint32_t)pTimeBaseCfg->PrescalerRatio;
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	689b      	ldr	r3, [r3, #8]
 800745a:	697a      	ldr	r2, [r7, #20]
 800745c:	4313      	orrs	r3, r2
 800745e:	617b      	str	r3, [r7, #20]

  /* Set the operating mode */
  hrtim_timcr &= (uint32_t) ~(HRTIM_TIMCR_CONT | HRTIM_TIMCR_RETRIG);
 8007460:	697b      	ldr	r3, [r7, #20]
 8007462:	f023 0318 	bic.w	r3, r3, #24
 8007466:	617b      	str	r3, [r7, #20]
  hrtim_timcr |= (uint32_t)pTimeBaseCfg->Mode;
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	68db      	ldr	r3, [r3, #12]
 800746c:	697a      	ldr	r2, [r7, #20]
 800746e:	4313      	orrs	r3, r2
 8007470:	617b      	str	r3, [r7, #20]

  /* Update the HRTIM registers */
  hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR = hrtim_timcr;
 8007472:	68fb      	ldr	r3, [r7, #12]
 8007474:	681a      	ldr	r2, [r3, #0]
 8007476:	68bb      	ldr	r3, [r7, #8]
 8007478:	3301      	adds	r3, #1
 800747a:	01db      	lsls	r3, r3, #7
 800747c:	4413      	add	r3, r2
 800747e:	697a      	ldr	r2, [r7, #20]
 8007480:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sTimerxRegs[TimerIdx].PERxR = pTimeBaseCfg->Period;
 8007482:	68fb      	ldr	r3, [r7, #12]
 8007484:	6819      	ldr	r1, [r3, #0]
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	681a      	ldr	r2, [r3, #0]
 800748a:	68bb      	ldr	r3, [r7, #8]
 800748c:	01db      	lsls	r3, r3, #7
 800748e:	440b      	add	r3, r1
 8007490:	3394      	adds	r3, #148	; 0x94
 8007492:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sTimerxRegs[TimerIdx].REPxR = pTimeBaseCfg->RepetitionCounter;
 8007494:	68fb      	ldr	r3, [r7, #12]
 8007496:	6819      	ldr	r1, [r3, #0]
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	685a      	ldr	r2, [r3, #4]
 800749c:	68bb      	ldr	r3, [r7, #8]
 800749e:	01db      	lsls	r3, r3, #7
 80074a0:	440b      	add	r3, r1
 80074a2:	3398      	adds	r3, #152	; 0x98
 80074a4:	601a      	str	r2, [r3, #0]
}
 80074a6:	bf00      	nop
 80074a8:	371c      	adds	r7, #28
 80074aa:	46bd      	mov	sp, r7
 80074ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074b0:	4770      	bx	lr

080074b2 <HRTIM_MasterWaveform_Config>:
  * @param  pTimerCfg pointer to the timer configuration data structure
  * @retval None
  */
static void HRTIM_MasterWaveform_Config(HRTIM_HandleTypeDef * hhrtim,
                                        const HRTIM_TimerCfgTypeDef * pTimerCfg)
{
 80074b2:	b480      	push	{r7}
 80074b4:	b085      	sub	sp, #20
 80074b6:	af00      	add	r7, sp, #0
 80074b8:	6078      	str	r0, [r7, #4]
 80074ba:	6039      	str	r1, [r7, #0]
  uint32_t hrtim_mcr;
  uint32_t hrtim_bmcr;

  /* Configure master timer */
  hrtim_mcr = hhrtim->Instance->sMasterRegs.MCR;
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	60fb      	str	r3, [r7, #12]
  hrtim_bmcr = hhrtim->Instance->sCommonRegs.BMCR;
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	f8d3 33a0 	ldr.w	r3, [r3, #928]	; 0x3a0
 80074cc:	60bb      	str	r3, [r7, #8]

  /* Enable/Disable the half mode */
  hrtim_mcr &= ~(HRTIM_MCR_HALF);
 80074ce:	68fb      	ldr	r3, [r7, #12]
 80074d0:	f023 0320 	bic.w	r3, r3, #32
 80074d4:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->HalfModeEnable;
 80074d6:	683b      	ldr	r3, [r7, #0]
 80074d8:	695b      	ldr	r3, [r3, #20]
 80074da:	68fa      	ldr	r2, [r7, #12]
 80074dc:	4313      	orrs	r3, r2
 80074de:	60fb      	str	r3, [r7, #12]

  /* Enable/Disable the timer start upon synchronization event reception */
  hrtim_mcr &= ~(HRTIM_MCR_SYNCSTRTM);
 80074e0:	68fb      	ldr	r3, [r7, #12]
 80074e2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80074e6:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->StartOnSync;
 80074e8:	683b      	ldr	r3, [r7, #0]
 80074ea:	699b      	ldr	r3, [r3, #24]
 80074ec:	68fa      	ldr	r2, [r7, #12]
 80074ee:	4313      	orrs	r3, r2
 80074f0:	60fb      	str	r3, [r7, #12]

  /* Enable/Disable the timer reset upon synchronization event reception */
  hrtim_mcr &= ~(HRTIM_MCR_SYNCRSTM);
 80074f2:	68fb      	ldr	r3, [r7, #12]
 80074f4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80074f8:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->ResetOnSync;
 80074fa:	683b      	ldr	r3, [r7, #0]
 80074fc:	69db      	ldr	r3, [r3, #28]
 80074fe:	68fa      	ldr	r2, [r7, #12]
 8007500:	4313      	orrs	r3, r2
 8007502:	60fb      	str	r3, [r7, #12]

  /* Enable/Disable the DAC synchronization event generation */
  hrtim_mcr &= ~(HRTIM_MCR_DACSYNC);
 8007504:	68fb      	ldr	r3, [r7, #12]
 8007506:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800750a:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->DACSynchro;
 800750c:	683b      	ldr	r3, [r7, #0]
 800750e:	6a1b      	ldr	r3, [r3, #32]
 8007510:	68fa      	ldr	r2, [r7, #12]
 8007512:	4313      	orrs	r3, r2
 8007514:	60fb      	str	r3, [r7, #12]

  /* Enable/Disable preload mechanism for timer registers */
  hrtim_mcr &= ~(HRTIM_MCR_PREEN);
 8007516:	68fb      	ldr	r3, [r7, #12]
 8007518:	f023 6300 	bic.w	r3, r3, #134217728	; 0x8000000
 800751c:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->PreloadEnable;
 800751e:	683b      	ldr	r3, [r7, #0]
 8007520:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007522:	68fa      	ldr	r2, [r7, #12]
 8007524:	4313      	orrs	r3, r2
 8007526:	60fb      	str	r3, [r7, #12]

  /* Master timer registers update handling */
  hrtim_mcr &= ~(HRTIM_MCR_BRSTDMA);
 8007528:	68fb      	ldr	r3, [r7, #12]
 800752a:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 800752e:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= (pTimerCfg->UpdateGating << 2U);
 8007530:	683b      	ldr	r3, [r7, #0]
 8007532:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007534:	009b      	lsls	r3, r3, #2
 8007536:	68fa      	ldr	r2, [r7, #12]
 8007538:	4313      	orrs	r3, r2
 800753a:	60fb      	str	r3, [r7, #12]

  /* Enable/Disable registers update on repetition */
  hrtim_mcr &= ~(HRTIM_MCR_MREPU);
 800753c:	68fb      	ldr	r3, [r7, #12]
 800753e:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8007542:	60fb      	str	r3, [r7, #12]
  hrtim_mcr |= pTimerCfg->RepetitionUpdate;
 8007544:	683b      	ldr	r3, [r7, #0]
 8007546:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007548:	68fa      	ldr	r2, [r7, #12]
 800754a:	4313      	orrs	r3, r2
 800754c:	60fb      	str	r3, [r7, #12]

  /* Set the timer burst mode */
  hrtim_bmcr &= ~(HRTIM_BMCR_MTBM);
 800754e:	68bb      	ldr	r3, [r7, #8]
 8007550:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007554:	60bb      	str	r3, [r7, #8]
  hrtim_bmcr |= pTimerCfg->BurstMode;
 8007556:	683b      	ldr	r3, [r7, #0]
 8007558:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800755a:	68ba      	ldr	r2, [r7, #8]
 800755c:	4313      	orrs	r3, r2
 800755e:	60bb      	str	r3, [r7, #8]

  /* Update the HRTIM registers */
  hhrtim->Instance->sMasterRegs.MCR = hrtim_mcr;
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	681b      	ldr	r3, [r3, #0]
 8007564:	68fa      	ldr	r2, [r7, #12]
 8007566:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sCommonRegs.BMCR = hrtim_bmcr;
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	68ba      	ldr	r2, [r7, #8]
 800756e:	f8c3 23a0 	str.w	r2, [r3, #928]	; 0x3a0
}
 8007572:	bf00      	nop
 8007574:	3714      	adds	r7, #20
 8007576:	46bd      	mov	sp, r7
 8007578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800757c:	4770      	bx	lr
	...

08007580 <HRTIM_TimingUnitWaveform_Config>:
  * @retval None
  */
static void  HRTIM_TimingUnitWaveform_Config(HRTIM_HandleTypeDef * hhrtim,
                                             uint32_t TimerIdx,
                                             const HRTIM_TimerCfgTypeDef * pTimerCfg)
{
 8007580:	b480      	push	{r7}
 8007582:	b08b      	sub	sp, #44	; 0x2c
 8007584:	af00      	add	r7, sp, #0
 8007586:	60f8      	str	r0, [r7, #12]
 8007588:	60b9      	str	r1, [r7, #8]
 800758a:	607a      	str	r2, [r7, #4]
  uint32_t hrtim_timoutr;
  uint32_t hrtim_timrstr;
  uint32_t hrtim_bmcr;

  /* UPDGAT bitfield must be reset before programming a new value */
  hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR &= ~(HRTIM_TIMCR_UPDGAT);
 800758c:	68fb      	ldr	r3, [r7, #12]
 800758e:	681a      	ldr	r2, [r3, #0]
 8007590:	68bb      	ldr	r3, [r7, #8]
 8007592:	3301      	adds	r3, #1
 8007594:	01db      	lsls	r3, r3, #7
 8007596:	4413      	add	r3, r2
 8007598:	681b      	ldr	r3, [r3, #0]
 800759a:	68fa      	ldr	r2, [r7, #12]
 800759c:	6811      	ldr	r1, [r2, #0]
 800759e:	f023 4270 	bic.w	r2, r3, #4026531840	; 0xf0000000
 80075a2:	68bb      	ldr	r3, [r7, #8]
 80075a4:	3301      	adds	r3, #1
 80075a6:	01db      	lsls	r3, r3, #7
 80075a8:	440b      	add	r3, r1
 80075aa:	601a      	str	r2, [r3, #0]

  /* Configure timing unit (Timer A to Timer E) */
  hrtim_timcr = hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR;
 80075ac:	68fb      	ldr	r3, [r7, #12]
 80075ae:	681a      	ldr	r2, [r3, #0]
 80075b0:	68bb      	ldr	r3, [r7, #8]
 80075b2:	3301      	adds	r3, #1
 80075b4:	01db      	lsls	r3, r3, #7
 80075b6:	4413      	add	r3, r2
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timfltr = hhrtim->Instance->sTimerxRegs[TimerIdx].FLTxR;
 80075bc:	68fb      	ldr	r3, [r7, #12]
 80075be:	681a      	ldr	r2, [r3, #0]
 80075c0:	68bb      	ldr	r3, [r7, #8]
 80075c2:	01db      	lsls	r3, r3, #7
 80075c4:	4413      	add	r3, r2
 80075c6:	33e8      	adds	r3, #232	; 0xe8
 80075c8:	681b      	ldr	r3, [r3, #0]
 80075ca:	61bb      	str	r3, [r7, #24]
  hrtim_timoutr = hhrtim->Instance->sTimerxRegs[TimerIdx].OUTxR;
 80075cc:	68fb      	ldr	r3, [r7, #12]
 80075ce:	681a      	ldr	r2, [r3, #0]
 80075d0:	68bb      	ldr	r3, [r7, #8]
 80075d2:	01db      	lsls	r3, r3, #7
 80075d4:	4413      	add	r3, r2
 80075d6:	33e4      	adds	r3, #228	; 0xe4
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	623b      	str	r3, [r7, #32]
  hrtim_bmcr = hhrtim->Instance->sCommonRegs.BMCR;
 80075dc:	68fb      	ldr	r3, [r7, #12]
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	f8d3 33a0 	ldr.w	r3, [r3, #928]	; 0x3a0
 80075e4:	61fb      	str	r3, [r7, #28]

  /* Enable/Disable the half mode */
  hrtim_timcr &= ~(HRTIM_TIMCR_HALF);
 80075e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075e8:	f023 0320 	bic.w	r3, r3, #32
 80075ec:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timcr |= pTimerCfg->HalfModeEnable;
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	695b      	ldr	r3, [r3, #20]
 80075f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80075f4:	4313      	orrs	r3, r2
 80075f6:	627b      	str	r3, [r7, #36]	; 0x24

  /* Enable/Disable the timer start upon synchronization event reception */
  hrtim_timcr &= ~(HRTIM_TIMCR_SYNCSTRT);
 80075f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075fa:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80075fe:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timcr |= pTimerCfg->StartOnSync;
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	699b      	ldr	r3, [r3, #24]
 8007604:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007606:	4313      	orrs	r3, r2
 8007608:	627b      	str	r3, [r7, #36]	; 0x24

  /* Enable/Disable the timer reset upon synchronization event reception */
  hrtim_timcr &= ~(HRTIM_TIMCR_SYNCRST);
 800760a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800760c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007610:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timcr |= pTimerCfg->ResetOnSync;
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	69db      	ldr	r3, [r3, #28]
 8007616:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007618:	4313      	orrs	r3, r2
 800761a:	627b      	str	r3, [r7, #36]	; 0x24

  /* Enable/Disable the DAC synchronization event generation */
  hrtim_timcr &= ~(HRTIM_TIMCR_DACSYNC);
 800761c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800761e:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8007622:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timcr |= pTimerCfg->DACSynchro;
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	6a1b      	ldr	r3, [r3, #32]
 8007628:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800762a:	4313      	orrs	r3, r2
 800762c:	627b      	str	r3, [r7, #36]	; 0x24

  /* Enable/Disable preload mechanism for timer registers */
  hrtim_timcr &= ~(HRTIM_TIMCR_PREEN);
 800762e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007630:	f023 6300 	bic.w	r3, r3, #134217728	; 0x8000000
 8007634:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timcr |= pTimerCfg->PreloadEnable;
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800763a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800763c:	4313      	orrs	r3, r2
 800763e:	627b      	str	r3, [r7, #36]	; 0x24

  /* Timing unit registers update handling */
  hrtim_timcr &= ~(HRTIM_TIMCR_UPDGAT);
 8007640:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007642:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8007646:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timcr |= pTimerCfg->UpdateGating;
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800764c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800764e:	4313      	orrs	r3, r2
 8007650:	627b      	str	r3, [r7, #36]	; 0x24

  /* Enable/Disable registers update on repetition */
  hrtim_timcr &= ~(HRTIM_TIMCR_TREPU);
 8007652:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007654:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8007658:	627b      	str	r3, [r7, #36]	; 0x24
  if (pTimerCfg->RepetitionUpdate == HRTIM_UPDATEONREPETITION_ENABLED)
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800765e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007662:	d103      	bne.n	800766c <HRTIM_TimingUnitWaveform_Config+0xec>
  {
    hrtim_timcr |= HRTIM_TIMCR_TREPU;
 8007664:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007666:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800766a:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Set the push-pull mode */
  hrtim_timcr &= ~(HRTIM_TIMCR_PSHPLL);
 800766c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800766e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007672:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timcr |= pTimerCfg->PushPull;
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007678:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800767a:	4313      	orrs	r3, r2
 800767c:	627b      	str	r3, [r7, #36]	; 0x24

  /* Enable/Disable registers update on timer counter reset */
  hrtim_timcr &= ~(HRTIM_TIMCR_TRSTU);
 800767e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007680:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007684:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timcr |= pTimerCfg->ResetUpdate;
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800768a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800768c:	4313      	orrs	r3, r2
 800768e:	627b      	str	r3, [r7, #36]	; 0x24

  /* Set the timer update trigger */
  hrtim_timcr &= ~(HRTIM_TIMCR_TIMUPDATETRIGGER);
 8007690:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007692:	f023 73fc 	bic.w	r3, r3, #33030144	; 0x1f80000
 8007696:	627b      	str	r3, [r7, #36]	; 0x24
  hrtim_timcr |= pTimerCfg->UpdateTrigger;
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800769c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800769e:	4313      	orrs	r3, r2
 80076a0:	627b      	str	r3, [r7, #36]	; 0x24

  /* Enable/Disable the fault channel at timer level */
  hrtim_timfltr &= ~(HRTIM_FLTR_FLTxEN);
 80076a2:	69bb      	ldr	r3, [r7, #24]
 80076a4:	f023 031f 	bic.w	r3, r3, #31
 80076a8:	61bb      	str	r3, [r7, #24]
  hrtim_timfltr |= (pTimerCfg->FaultEnable & HRTIM_FLTR_FLTxEN);
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80076ae:	f003 031f 	and.w	r3, r3, #31
 80076b2:	69ba      	ldr	r2, [r7, #24]
 80076b4:	4313      	orrs	r3, r2
 80076b6:	61bb      	str	r3, [r7, #24]

  /* Lock/Unlock fault sources at timer level */
  hrtim_timfltr &= ~(HRTIM_FLTR_FLTLCK);
 80076b8:	69bb      	ldr	r3, [r7, #24]
 80076ba:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80076be:	61bb      	str	r3, [r7, #24]
  hrtim_timfltr |= pTimerCfg->FaultLock;
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80076c4:	69ba      	ldr	r2, [r7, #24]
 80076c6:	4313      	orrs	r3, r2
 80076c8:	61bb      	str	r3, [r7, #24]

  /* The deadtime cannot be used simultaneously with the push-pull mode */
  if (pTimerCfg->PushPull == HRTIM_TIMPUSHPULLMODE_DISABLED)
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80076ce:	2b00      	cmp	r3, #0
 80076d0:	d108      	bne.n	80076e4 <HRTIM_TimingUnitWaveform_Config+0x164>
  {
    /* Enable/Disable dead time insertion at timer level */
    hrtim_timoutr &= ~(HRTIM_OUTR_DTEN);
 80076d2:	6a3b      	ldr	r3, [r7, #32]
 80076d4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80076d8:	623b      	str	r3, [r7, #32]
    hrtim_timoutr |= pTimerCfg->DeadTimeInsertion;
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076de:	6a3a      	ldr	r2, [r7, #32]
 80076e0:	4313      	orrs	r3, r2
 80076e2:	623b      	str	r3, [r7, #32]

  /* Enable/Disable delayed protection at timer level
     Delayed Idle is available whatever the timer operating mode (regular, push-pull)
     Balanced Idle is only available in push-pull mode
  */
  if ( ((pTimerCfg->DelayedProtectionMode != HRTIM_TIMER_A_B_C_DELAYEDPROTECTION_BALANCED_EEV6)
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80076e8:	f5b3 6f60 	cmp.w	r3, #3584	; 0xe00
 80076ec:	d004      	beq.n	80076f8 <HRTIM_TimingUnitWaveform_Config+0x178>
       && (pTimerCfg->DelayedProtectionMode != HRTIM_TIMER_A_B_C_DELAYEDPROTECTION_BALANCED_EEV7))
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80076f2:	f5b3 5ff0 	cmp.w	r3, #7680	; 0x1e00
 80076f6:	d103      	bne.n	8007700 <HRTIM_TimingUnitWaveform_Config+0x180>
       || (pTimerCfg->PushPull == HRTIM_TIMPUSHPULLMODE_ENABLED))
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80076fc:	2b40      	cmp	r3, #64	; 0x40
 80076fe:	d108      	bne.n	8007712 <HRTIM_TimingUnitWaveform_Config+0x192>
  {
    hrtim_timoutr &= ~(HRTIM_OUTR_DLYPRT| HRTIM_OUTR_DLYPRTEN);
 8007700:	6a3b      	ldr	r3, [r7, #32]
 8007702:	f423 53f0 	bic.w	r3, r3, #7680	; 0x1e00
 8007706:	623b      	str	r3, [r7, #32]
    hrtim_timoutr |= pTimerCfg->DelayedProtectionMode;
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800770c:	6a3a      	ldr	r2, [r7, #32]
 800770e:	4313      	orrs	r3, r2
 8007710:	623b      	str	r3, [r7, #32]
  }

  /* Set the timer counter reset trigger */
  hrtim_timrstr = pTimerCfg->ResetTrigger;
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007716:	617b      	str	r3, [r7, #20]

  /* Set the timer burst mode */
  switch (TimerIdx)
 8007718:	68bb      	ldr	r3, [r7, #8]
 800771a:	2b04      	cmp	r3, #4
 800771c:	d843      	bhi.n	80077a6 <HRTIM_TimingUnitWaveform_Config+0x226>
 800771e:	a201      	add	r2, pc, #4	; (adr r2, 8007724 <HRTIM_TimingUnitWaveform_Config+0x1a4>)
 8007720:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007724:	08007739 	.word	0x08007739
 8007728:	0800774f 	.word	0x0800774f
 800772c:	08007765 	.word	0x08007765
 8007730:	0800777b 	.word	0x0800777b
 8007734:	08007791 	.word	0x08007791
  {
  case HRTIM_TIMERINDEX_TIMER_A:
    {
      hrtim_bmcr &= ~(HRTIM_BMCR_TABM);
 8007738:	69fb      	ldr	r3, [r7, #28]
 800773a:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800773e:	61fb      	str	r3, [r7, #28]
      hrtim_bmcr |= ( pTimerCfg->BurstMode << 1U);
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007744:	005b      	lsls	r3, r3, #1
 8007746:	69fa      	ldr	r2, [r7, #28]
 8007748:	4313      	orrs	r3, r2
 800774a:	61fb      	str	r3, [r7, #28]
      break;
 800774c:	e02c      	b.n	80077a8 <HRTIM_TimingUnitWaveform_Config+0x228>
    }

  case HRTIM_TIMERINDEX_TIMER_B:
    {
      hrtim_bmcr &= ~(HRTIM_BMCR_TBBM);
 800774e:	69fb      	ldr	r3, [r7, #28]
 8007750:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007754:	61fb      	str	r3, [r7, #28]
      hrtim_bmcr |= ( pTimerCfg->BurstMode << 2U);
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800775a:	009b      	lsls	r3, r3, #2
 800775c:	69fa      	ldr	r2, [r7, #28]
 800775e:	4313      	orrs	r3, r2
 8007760:	61fb      	str	r3, [r7, #28]
      break;
 8007762:	e021      	b.n	80077a8 <HRTIM_TimingUnitWaveform_Config+0x228>
    }

  case HRTIM_TIMERINDEX_TIMER_C:
    {
      hrtim_bmcr &= ~(HRTIM_BMCR_TCBM);
 8007764:	69fb      	ldr	r3, [r7, #28]
 8007766:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 800776a:	61fb      	str	r3, [r7, #28]
      hrtim_bmcr |= ( pTimerCfg->BurstMode << 3U);
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007770:	00db      	lsls	r3, r3, #3
 8007772:	69fa      	ldr	r2, [r7, #28]
 8007774:	4313      	orrs	r3, r2
 8007776:	61fb      	str	r3, [r7, #28]
      break;
 8007778:	e016      	b.n	80077a8 <HRTIM_TimingUnitWaveform_Config+0x228>
    }

  case HRTIM_TIMERINDEX_TIMER_D:
    {
      hrtim_bmcr &= ~(HRTIM_BMCR_TDBM);
 800777a:	69fb      	ldr	r3, [r7, #28]
 800777c:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8007780:	61fb      	str	r3, [r7, #28]
      hrtim_bmcr |= ( pTimerCfg->BurstMode << 4U);
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007786:	011b      	lsls	r3, r3, #4
 8007788:	69fa      	ldr	r2, [r7, #28]
 800778a:	4313      	orrs	r3, r2
 800778c:	61fb      	str	r3, [r7, #28]
      break;
 800778e:	e00b      	b.n	80077a8 <HRTIM_TimingUnitWaveform_Config+0x228>
    }

  case HRTIM_TIMERINDEX_TIMER_E:
    {
      hrtim_bmcr &= ~(HRTIM_BMCR_TEBM);
 8007790:	69fb      	ldr	r3, [r7, #28]
 8007792:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8007796:	61fb      	str	r3, [r7, #28]
      hrtim_bmcr |= ( pTimerCfg->BurstMode << 5U);
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800779c:	015b      	lsls	r3, r3, #5
 800779e:	69fa      	ldr	r2, [r7, #28]
 80077a0:	4313      	orrs	r3, r2
 80077a2:	61fb      	str	r3, [r7, #28]
      break;
 80077a4:	e000      	b.n	80077a8 <HRTIM_TimingUnitWaveform_Config+0x228>
    }

  default:
    break;
 80077a6:	bf00      	nop
  }

  /* Update the HRTIM registers */
  hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxCR = hrtim_timcr;
 80077a8:	68fb      	ldr	r3, [r7, #12]
 80077aa:	681a      	ldr	r2, [r3, #0]
 80077ac:	68bb      	ldr	r3, [r7, #8]
 80077ae:	3301      	adds	r3, #1
 80077b0:	01db      	lsls	r3, r3, #7
 80077b2:	4413      	add	r3, r2
 80077b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80077b6:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sTimerxRegs[TimerIdx].FLTxR = hrtim_timfltr;
 80077b8:	68fb      	ldr	r3, [r7, #12]
 80077ba:	681a      	ldr	r2, [r3, #0]
 80077bc:	68bb      	ldr	r3, [r7, #8]
 80077be:	01db      	lsls	r3, r3, #7
 80077c0:	4413      	add	r3, r2
 80077c2:	33e8      	adds	r3, #232	; 0xe8
 80077c4:	69ba      	ldr	r2, [r7, #24]
 80077c6:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sTimerxRegs[TimerIdx].OUTxR = hrtim_timoutr;
 80077c8:	68fb      	ldr	r3, [r7, #12]
 80077ca:	681a      	ldr	r2, [r3, #0]
 80077cc:	68bb      	ldr	r3, [r7, #8]
 80077ce:	01db      	lsls	r3, r3, #7
 80077d0:	4413      	add	r3, r2
 80077d2:	33e4      	adds	r3, #228	; 0xe4
 80077d4:	6a3a      	ldr	r2, [r7, #32]
 80077d6:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sTimerxRegs[TimerIdx].RSTxR = hrtim_timrstr;
 80077d8:	68fb      	ldr	r3, [r7, #12]
 80077da:	681a      	ldr	r2, [r3, #0]
 80077dc:	68bb      	ldr	r3, [r7, #8]
 80077de:	01db      	lsls	r3, r3, #7
 80077e0:	4413      	add	r3, r2
 80077e2:	33d4      	adds	r3, #212	; 0xd4
 80077e4:	697a      	ldr	r2, [r7, #20]
 80077e6:	601a      	str	r2, [r3, #0]
  hhrtim->Instance->sCommonRegs.BMCR = hrtim_bmcr;
 80077e8:	68fb      	ldr	r3, [r7, #12]
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	69fa      	ldr	r2, [r7, #28]
 80077ee:	f8c3 23a0 	str.w	r2, [r3, #928]	; 0x3a0
}
 80077f2:	bf00      	nop
 80077f4:	372c      	adds	r7, #44	; 0x2c
 80077f6:	46bd      	mov	sp, r7
 80077f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077fc:	4770      	bx	lr
 80077fe:	bf00      	nop

08007800 <HRTIM_OutputConfig>:
  */
static void  HRTIM_OutputConfig(HRTIM_HandleTypeDef * hhrtim,
                                uint32_t TimerIdx,
                                uint32_t Output,
                                const HRTIM_OutputCfgTypeDef * pOutputCfg)
{
 8007800:	b480      	push	{r7}
 8007802:	b089      	sub	sp, #36	; 0x24
 8007804:	af00      	add	r7, sp, #0
 8007806:	60f8      	str	r0, [r7, #12]
 8007808:	60b9      	str	r1, [r7, #8]
 800780a:	607a      	str	r2, [r7, #4]
 800780c:	603b      	str	r3, [r7, #0]
  uint32_t hrtim_outr;
  uint32_t hrtim_dtr;

  uint32_t shift = 0U;
 800780e:	2300      	movs	r3, #0
 8007810:	61bb      	str	r3, [r7, #24]

  hrtim_outr = hhrtim->Instance->sTimerxRegs[TimerIdx].OUTxR;
 8007812:	68fb      	ldr	r3, [r7, #12]
 8007814:	681a      	ldr	r2, [r3, #0]
 8007816:	68bb      	ldr	r3, [r7, #8]
 8007818:	01db      	lsls	r3, r3, #7
 800781a:	4413      	add	r3, r2
 800781c:	33e4      	adds	r3, #228	; 0xe4
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	61fb      	str	r3, [r7, #28]
  hrtim_dtr = hhrtim->Instance->sTimerxRegs[TimerIdx].DTxR;
 8007822:	68fb      	ldr	r3, [r7, #12]
 8007824:	681a      	ldr	r2, [r3, #0]
 8007826:	68bb      	ldr	r3, [r7, #8]
 8007828:	01db      	lsls	r3, r3, #7
 800782a:	4413      	add	r3, r2
 800782c:	33b8      	adds	r3, #184	; 0xb8
 800782e:	681b      	ldr	r3, [r3, #0]
 8007830:	617b      	str	r3, [r7, #20]

  switch (Output)
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007838:	d04d      	beq.n	80078d6 <HRTIM_OutputConfig+0xd6>
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007840:	d85e      	bhi.n	8007900 <HRTIM_OutputConfig+0x100>
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007848:	d032      	beq.n	80078b0 <HRTIM_OutputConfig+0xb0>
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007850:	d856      	bhi.n	8007900 <HRTIM_OutputConfig+0x100>
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	2b80      	cmp	r3, #128	; 0x80
 8007856:	d03e      	beq.n	80078d6 <HRTIM_OutputConfig+0xd6>
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	2b80      	cmp	r3, #128	; 0x80
 800785c:	d850      	bhi.n	8007900 <HRTIM_OutputConfig+0x100>
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	2b40      	cmp	r3, #64	; 0x40
 8007862:	d025      	beq.n	80078b0 <HRTIM_OutputConfig+0xb0>
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	2b40      	cmp	r3, #64	; 0x40
 8007868:	d84a      	bhi.n	8007900 <HRTIM_OutputConfig+0x100>
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	2b01      	cmp	r3, #1
 800786e:	d01f      	beq.n	80078b0 <HRTIM_OutputConfig+0xb0>
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	2b00      	cmp	r3, #0
 8007874:	d044      	beq.n	8007900 <HRTIM_OutputConfig+0x100>
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	2b20      	cmp	r3, #32
 800787a:	d841      	bhi.n	8007900 <HRTIM_OutputConfig+0x100>
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	2b02      	cmp	r3, #2
 8007880:	d33e      	bcc.n	8007900 <HRTIM_OutputConfig+0x100>
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	3b02      	subs	r3, #2
 8007886:	2201      	movs	r2, #1
 8007888:	409a      	lsls	r2, r3
 800788a:	4b48      	ldr	r3, [pc, #288]	; (80079ac <HRTIM_OutputConfig+0x1ac>)
 800788c:	4013      	ands	r3, r2
 800788e:	2b00      	cmp	r3, #0
 8007890:	bf14      	ite	ne
 8007892:	2301      	movne	r3, #1
 8007894:	2300      	moveq	r3, #0
 8007896:	b2db      	uxtb	r3, r3
 8007898:	2b00      	cmp	r3, #0
 800789a:	d11c      	bne.n	80078d6 <HRTIM_OutputConfig+0xd6>
 800789c:	f244 0304 	movw	r3, #16388	; 0x4004
 80078a0:	4013      	ands	r3, r2
 80078a2:	2b00      	cmp	r3, #0
 80078a4:	bf14      	ite	ne
 80078a6:	2301      	movne	r3, #1
 80078a8:	2300      	moveq	r3, #0
 80078aa:	b2db      	uxtb	r3, r3
 80078ac:	2b00      	cmp	r3, #0
 80078ae:	d027      	beq.n	8007900 <HRTIM_OutputConfig+0x100>
  case HRTIM_OUTPUT_TC1:
  case HRTIM_OUTPUT_TD1:
  case HRTIM_OUTPUT_TE1:
    {
      /* Set the output set/reset crossbar */
      hhrtim->Instance->sTimerxRegs[TimerIdx].SETx1R = pOutputCfg->SetSource;
 80078b0:	68fb      	ldr	r3, [r7, #12]
 80078b2:	6819      	ldr	r1, [r3, #0]
 80078b4:	683b      	ldr	r3, [r7, #0]
 80078b6:	685a      	ldr	r2, [r3, #4]
 80078b8:	68bb      	ldr	r3, [r7, #8]
 80078ba:	01db      	lsls	r3, r3, #7
 80078bc:	440b      	add	r3, r1
 80078be:	33bc      	adds	r3, #188	; 0xbc
 80078c0:	601a      	str	r2, [r3, #0]
      hhrtim->Instance->sTimerxRegs[TimerIdx].RSTx1R = pOutputCfg->ResetSource;
 80078c2:	68fb      	ldr	r3, [r7, #12]
 80078c4:	6819      	ldr	r1, [r3, #0]
 80078c6:	683b      	ldr	r3, [r7, #0]
 80078c8:	689a      	ldr	r2, [r3, #8]
 80078ca:	68bb      	ldr	r3, [r7, #8]
 80078cc:	01db      	lsls	r3, r3, #7
 80078ce:	440b      	add	r3, r1
 80078d0:	33c0      	adds	r3, #192	; 0xc0
 80078d2:	601a      	str	r2, [r3, #0]
      break;
 80078d4:	e015      	b.n	8007902 <HRTIM_OutputConfig+0x102>
  case HRTIM_OUTPUT_TC2:
  case HRTIM_OUTPUT_TD2:
  case HRTIM_OUTPUT_TE2:
    {
      /* Set the output set/reset crossbar */
      hhrtim->Instance->sTimerxRegs[TimerIdx].SETx2R = pOutputCfg->SetSource;
 80078d6:	68fb      	ldr	r3, [r7, #12]
 80078d8:	6819      	ldr	r1, [r3, #0]
 80078da:	683b      	ldr	r3, [r7, #0]
 80078dc:	685a      	ldr	r2, [r3, #4]
 80078de:	68bb      	ldr	r3, [r7, #8]
 80078e0:	01db      	lsls	r3, r3, #7
 80078e2:	440b      	add	r3, r1
 80078e4:	33c4      	adds	r3, #196	; 0xc4
 80078e6:	601a      	str	r2, [r3, #0]
      hhrtim->Instance->sTimerxRegs[TimerIdx].RSTx2R = pOutputCfg->ResetSource;
 80078e8:	68fb      	ldr	r3, [r7, #12]
 80078ea:	6819      	ldr	r1, [r3, #0]
 80078ec:	683b      	ldr	r3, [r7, #0]
 80078ee:	689a      	ldr	r2, [r3, #8]
 80078f0:	68bb      	ldr	r3, [r7, #8]
 80078f2:	01db      	lsls	r3, r3, #7
 80078f4:	440b      	add	r3, r1
 80078f6:	33c8      	adds	r3, #200	; 0xc8
 80078f8:	601a      	str	r2, [r3, #0]
      shift = 16U;
 80078fa:	2310      	movs	r3, #16
 80078fc:	61bb      	str	r3, [r7, #24]
      break;
 80078fe:	e000      	b.n	8007902 <HRTIM_OutputConfig+0x102>
    }

  default:
    break;
 8007900:	bf00      	nop
  hrtim_outr &= ~((HRTIM_OUTR_POL1 |
                   HRTIM_OUTR_IDLM1 |
                   HRTIM_OUTR_IDLES1|
                   HRTIM_OUTR_FAULT1|
                   HRTIM_OUTR_CHP1 |
                   HRTIM_OUTR_DIDL1) << shift);
 8007902:	22fe      	movs	r2, #254	; 0xfe
 8007904:	69bb      	ldr	r3, [r7, #24]
 8007906:	fa02 f303 	lsl.w	r3, r2, r3
  hrtim_outr &= ~((HRTIM_OUTR_POL1 |
 800790a:	43db      	mvns	r3, r3
 800790c:	69fa      	ldr	r2, [r7, #28]
 800790e:	4013      	ands	r3, r2
 8007910:	61fb      	str	r3, [r7, #28]

  /* Set the polarity */
  hrtim_outr |= (pOutputCfg->Polarity << shift);
 8007912:	683b      	ldr	r3, [r7, #0]
 8007914:	681a      	ldr	r2, [r3, #0]
 8007916:	69bb      	ldr	r3, [r7, #24]
 8007918:	fa02 f303 	lsl.w	r3, r2, r3
 800791c:	69fa      	ldr	r2, [r7, #28]
 800791e:	4313      	orrs	r3, r2
 8007920:	61fb      	str	r3, [r7, #28]

  /* Set the IDLE mode */
  hrtim_outr |= (pOutputCfg->IdleMode << shift);
 8007922:	683b      	ldr	r3, [r7, #0]
 8007924:	68da      	ldr	r2, [r3, #12]
 8007926:	69bb      	ldr	r3, [r7, #24]
 8007928:	fa02 f303 	lsl.w	r3, r2, r3
 800792c:	69fa      	ldr	r2, [r7, #28]
 800792e:	4313      	orrs	r3, r2
 8007930:	61fb      	str	r3, [r7, #28]

  /* Set the IDLE state */
  hrtim_outr |= (pOutputCfg->IdleLevel << shift);
 8007932:	683b      	ldr	r3, [r7, #0]
 8007934:	691a      	ldr	r2, [r3, #16]
 8007936:	69bb      	ldr	r3, [r7, #24]
 8007938:	fa02 f303 	lsl.w	r3, r2, r3
 800793c:	69fa      	ldr	r2, [r7, #28]
 800793e:	4313      	orrs	r3, r2
 8007940:	61fb      	str	r3, [r7, #28]

  /* Set the FAULT state */
  hrtim_outr |= (pOutputCfg->FaultLevel << shift);
 8007942:	683b      	ldr	r3, [r7, #0]
 8007944:	695a      	ldr	r2, [r3, #20]
 8007946:	69bb      	ldr	r3, [r7, #24]
 8007948:	fa02 f303 	lsl.w	r3, r2, r3
 800794c:	69fa      	ldr	r2, [r7, #28]
 800794e:	4313      	orrs	r3, r2
 8007950:	61fb      	str	r3, [r7, #28]

  /* Set the chopper mode */
  hrtim_outr |= (pOutputCfg->ChopperModeEnable << shift);
 8007952:	683b      	ldr	r3, [r7, #0]
 8007954:	699a      	ldr	r2, [r3, #24]
 8007956:	69bb      	ldr	r3, [r7, #24]
 8007958:	fa02 f303 	lsl.w	r3, r2, r3
 800795c:	69fa      	ldr	r2, [r7, #28]
 800795e:	4313      	orrs	r3, r2
 8007960:	61fb      	str	r3, [r7, #28]
     state during a burst mode operation is allowed only under the following
     conditions:
     - the outputs is active during the burst mode (IDLES=1U)
     - positive deadtimes (SDTR/SDTF set to 0U)
  */
  if ((pOutputCfg->IdleLevel == HRTIM_OUTPUTIDLELEVEL_ACTIVE) &&
 8007962:	683b      	ldr	r3, [r7, #0]
 8007964:	691b      	ldr	r3, [r3, #16]
 8007966:	2b08      	cmp	r3, #8
 8007968:	d111      	bne.n	800798e <HRTIM_OutputConfig+0x18e>
      ((hrtim_dtr & HRTIM_DTR_SDTR) == (uint32_t)RESET) &&
 800796a:	697b      	ldr	r3, [r7, #20]
 800796c:	f403 7300 	and.w	r3, r3, #512	; 0x200
  if ((pOutputCfg->IdleLevel == HRTIM_OUTPUTIDLELEVEL_ACTIVE) &&
 8007970:	2b00      	cmp	r3, #0
 8007972:	d10c      	bne.n	800798e <HRTIM_OutputConfig+0x18e>
      ((hrtim_dtr & HRTIM_DTR_SDTF) == (uint32_t)RESET))
 8007974:	697b      	ldr	r3, [r7, #20]
 8007976:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
      ((hrtim_dtr & HRTIM_DTR_SDTR) == (uint32_t)RESET) &&
 800797a:	2b00      	cmp	r3, #0
 800797c:	d107      	bne.n	800798e <HRTIM_OutputConfig+0x18e>
  {
    hrtim_outr |= (pOutputCfg->BurstModeEntryDelayed << shift);
 800797e:	683b      	ldr	r3, [r7, #0]
 8007980:	69da      	ldr	r2, [r3, #28]
 8007982:	69bb      	ldr	r3, [r7, #24]
 8007984:	fa02 f303 	lsl.w	r3, r2, r3
 8007988:	69fa      	ldr	r2, [r7, #28]
 800798a:	4313      	orrs	r3, r2
 800798c:	61fb      	str	r3, [r7, #28]
  }

  /* Update HRTIM register */
  hhrtim->Instance->sTimerxRegs[TimerIdx].OUTxR = hrtim_outr;
 800798e:	68fb      	ldr	r3, [r7, #12]
 8007990:	681a      	ldr	r2, [r3, #0]
 8007992:	68bb      	ldr	r3, [r7, #8]
 8007994:	01db      	lsls	r3, r3, #7
 8007996:	4413      	add	r3, r2
 8007998:	33e4      	adds	r3, #228	; 0xe4
 800799a:	69fa      	ldr	r2, [r7, #28]
 800799c:	601a      	str	r2, [r3, #0]
}
 800799e:	bf00      	nop
 80079a0:	3724      	adds	r7, #36	; 0x24
 80079a2:	46bd      	mov	sp, r7
 80079a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079a8:	4770      	bx	lr
 80079aa:	bf00      	nop
 80079ac:	40000041 	.word	0x40000041

080079b0 <HRTIM_ForceRegistersUpdate>:
  * @param  TimerIdx Timer index
  * @retval None
  */
static void HRTIM_ForceRegistersUpdate(HRTIM_HandleTypeDef * hhrtim,
                                       uint32_t TimerIdx)
{
 80079b0:	b480      	push	{r7}
 80079b2:	b083      	sub	sp, #12
 80079b4:	af00      	add	r7, sp, #0
 80079b6:	6078      	str	r0, [r7, #4]
 80079b8:	6039      	str	r1, [r7, #0]
  switch (TimerIdx)
 80079ba:	683b      	ldr	r3, [r7, #0]
 80079bc:	2b05      	cmp	r3, #5
 80079be:	d851      	bhi.n	8007a64 <HRTIM_ForceRegistersUpdate+0xb4>
 80079c0:	a201      	add	r2, pc, #4	; (adr r2, 80079c8 <HRTIM_ForceRegistersUpdate+0x18>)
 80079c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80079c6:	bf00      	nop
 80079c8:	080079f7 	.word	0x080079f7
 80079cc:	08007a0d 	.word	0x08007a0d
 80079d0:	08007a23 	.word	0x08007a23
 80079d4:	08007a39 	.word	0x08007a39
 80079d8:	08007a4f 	.word	0x08007a4f
 80079dc:	080079e1 	.word	0x080079e1
  {
  case HRTIM_TIMERINDEX_MASTER:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_MSWU;
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	681b      	ldr	r3, [r3, #0]
 80079e4:	f8d3 2384 	ldr.w	r2, [r3, #900]	; 0x384
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	681b      	ldr	r3, [r3, #0]
 80079ec:	f042 0201 	orr.w	r2, r2, #1
 80079f0:	f8c3 2384 	str.w	r2, [r3, #900]	; 0x384
      break;
 80079f4:	e037      	b.n	8007a66 <HRTIM_ForceRegistersUpdate+0xb6>
    }

  case HRTIM_TIMERINDEX_TIMER_A:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TASWU;
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	f8d3 2384 	ldr.w	r2, [r3, #900]	; 0x384
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	681b      	ldr	r3, [r3, #0]
 8007a02:	f042 0202 	orr.w	r2, r2, #2
 8007a06:	f8c3 2384 	str.w	r2, [r3, #900]	; 0x384
      break;
 8007a0a:	e02c      	b.n	8007a66 <HRTIM_ForceRegistersUpdate+0xb6>
    }

  case HRTIM_TIMERINDEX_TIMER_B:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TBSWU;
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	f8d3 2384 	ldr.w	r2, [r3, #900]	; 0x384
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	681b      	ldr	r3, [r3, #0]
 8007a18:	f042 0204 	orr.w	r2, r2, #4
 8007a1c:	f8c3 2384 	str.w	r2, [r3, #900]	; 0x384
      break;
 8007a20:	e021      	b.n	8007a66 <HRTIM_ForceRegistersUpdate+0xb6>
    }

  case HRTIM_TIMERINDEX_TIMER_C:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TCSWU;
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	681b      	ldr	r3, [r3, #0]
 8007a26:	f8d3 2384 	ldr.w	r2, [r3, #900]	; 0x384
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	681b      	ldr	r3, [r3, #0]
 8007a2e:	f042 0208 	orr.w	r2, r2, #8
 8007a32:	f8c3 2384 	str.w	r2, [r3, #900]	; 0x384
      break;
 8007a36:	e016      	b.n	8007a66 <HRTIM_ForceRegistersUpdate+0xb6>
    }

  case HRTIM_TIMERINDEX_TIMER_D:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TDSWU;
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	f8d3 2384 	ldr.w	r2, [r3, #900]	; 0x384
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	f042 0210 	orr.w	r2, r2, #16
 8007a48:	f8c3 2384 	str.w	r2, [r3, #900]	; 0x384
      break;
 8007a4c:	e00b      	b.n	8007a66 <HRTIM_ForceRegistersUpdate+0xb6>
    }

  case HRTIM_TIMERINDEX_TIMER_E:
    {
      hhrtim->Instance->sCommonRegs.CR2 |= HRTIM_CR2_TESWU;
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	681b      	ldr	r3, [r3, #0]
 8007a52:	f8d3 2384 	ldr.w	r2, [r3, #900]	; 0x384
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	681b      	ldr	r3, [r3, #0]
 8007a5a:	f042 0220 	orr.w	r2, r2, #32
 8007a5e:	f8c3 2384 	str.w	r2, [r3, #900]	; 0x384
      break;
 8007a62:	e000      	b.n	8007a66 <HRTIM_ForceRegistersUpdate+0xb6>
    }

  default:
    break;
 8007a64:	bf00      	nop
  }
}
 8007a66:	bf00      	nop
 8007a68:	370c      	adds	r7, #12
 8007a6a:	46bd      	mov	sp, r7
 8007a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a70:	4770      	bx	lr
 8007a72:	bf00      	nop

08007a74 <HRTIM_HRTIM_ISR>:
  * @brief  HRTIM interrupts service routine
  * @param  hhrtim pointer to HAL HRTIM handle
  * @retval None
  */
static void HRTIM_HRTIM_ISR(HRTIM_HandleTypeDef * hhrtim)
{
 8007a74:	b580      	push	{r7, lr}
 8007a76:	b084      	sub	sp, #16
 8007a78:	af00      	add	r7, sp, #0
 8007a7a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags = READ_REG(hhrtim->Instance->sCommonRegs.ISR);
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	f8d3 3388 	ldr.w	r3, [r3, #904]	; 0x388
 8007a84:	60fb      	str	r3, [r7, #12]
  uint32_t ierits   = READ_REG(hhrtim->Instance->sCommonRegs.IER);
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	681b      	ldr	r3, [r3, #0]
 8007a8a:	f8d3 3390 	ldr.w	r3, [r3, #912]	; 0x390
 8007a8e:	60bb      	str	r3, [r7, #8]

  /* Fault 1 event */
  if((uint32_t)(isrflags & HRTIM_FLAG_FLT1) != (uint32_t)RESET)
 8007a90:	68fb      	ldr	r3, [r7, #12]
 8007a92:	f003 0301 	and.w	r3, r3, #1
 8007a96:	2b00      	cmp	r3, #0
 8007a98:	d00c      	beq.n	8007ab4 <HRTIM_HRTIM_ISR+0x40>
  {
    if((uint32_t)(ierits & HRTIM_IT_FLT1) != (uint32_t)RESET)
 8007a9a:	68bb      	ldr	r3, [r7, #8]
 8007a9c:	f003 0301 	and.w	r3, r3, #1
 8007aa0:	2b00      	cmp	r3, #0
 8007aa2:	d007      	beq.n	8007ab4 <HRTIM_HRTIM_ISR+0x40>
    {
      __HAL_HRTIM_CLEAR_IT(hhrtim, HRTIM_IT_FLT1);
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	681b      	ldr	r3, [r3, #0]
 8007aa8:	2201      	movs	r2, #1
 8007aaa:	f8c3 238c 	str.w	r2, [r3, #908]	; 0x38c

      /* Invoke Fault 1 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Fault1Callback(hhrtim);
#else
      HAL_HRTIM_Fault1Callback(hhrtim);
 8007aae:	6878      	ldr	r0, [r7, #4]
 8007ab0:	f7ff fbc7 	bl	8007242 <HAL_HRTIM_Fault1Callback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Fault 2 event */
  if((uint32_t)(isrflags & HRTIM_FLAG_FLT2) != (uint32_t)RESET)
 8007ab4:	68fb      	ldr	r3, [r7, #12]
 8007ab6:	f003 0302 	and.w	r3, r3, #2
 8007aba:	2b00      	cmp	r3, #0
 8007abc:	d00c      	beq.n	8007ad8 <HRTIM_HRTIM_ISR+0x64>
  {
    if((uint32_t)(ierits & HRTIM_IT_FLT2) != (uint32_t)RESET)
 8007abe:	68bb      	ldr	r3, [r7, #8]
 8007ac0:	f003 0302 	and.w	r3, r3, #2
 8007ac4:	2b00      	cmp	r3, #0
 8007ac6:	d007      	beq.n	8007ad8 <HRTIM_HRTIM_ISR+0x64>
    {
      __HAL_HRTIM_CLEAR_IT(hhrtim, HRTIM_IT_FLT2);
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	2202      	movs	r2, #2
 8007ace:	f8c3 238c 	str.w	r2, [r3, #908]	; 0x38c

      /* Invoke Fault 2 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Fault2Callback(hhrtim);
#else
      HAL_HRTIM_Fault2Callback(hhrtim);
 8007ad2:	6878      	ldr	r0, [r7, #4]
 8007ad4:	f7ff fbbf 	bl	8007256 <HAL_HRTIM_Fault2Callback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Fault 3 event */
  if((uint32_t)(isrflags & HRTIM_FLAG_FLT3) != (uint32_t)RESET)
 8007ad8:	68fb      	ldr	r3, [r7, #12]
 8007ada:	f003 0304 	and.w	r3, r3, #4
 8007ade:	2b00      	cmp	r3, #0
 8007ae0:	d00c      	beq.n	8007afc <HRTIM_HRTIM_ISR+0x88>
  {
    if((uint32_t)(ierits & HRTIM_IT_FLT3) != (uint32_t)RESET)
 8007ae2:	68bb      	ldr	r3, [r7, #8]
 8007ae4:	f003 0304 	and.w	r3, r3, #4
 8007ae8:	2b00      	cmp	r3, #0
 8007aea:	d007      	beq.n	8007afc <HRTIM_HRTIM_ISR+0x88>
    {
      __HAL_HRTIM_CLEAR_IT(hhrtim, HRTIM_IT_FLT3);
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	2204      	movs	r2, #4
 8007af2:	f8c3 238c 	str.w	r2, [r3, #908]	; 0x38c

      /* Invoke Fault 3 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Fault3Callback(hhrtim);
#else
      HAL_HRTIM_Fault3Callback(hhrtim);
 8007af6:	6878      	ldr	r0, [r7, #4]
 8007af8:	f7ff fbb7 	bl	800726a <HAL_HRTIM_Fault3Callback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Fault 4 event */
  if((uint32_t)(isrflags & HRTIM_FLAG_FLT4) != (uint32_t)RESET)
 8007afc:	68fb      	ldr	r3, [r7, #12]
 8007afe:	f003 0308 	and.w	r3, r3, #8
 8007b02:	2b00      	cmp	r3, #0
 8007b04:	d00c      	beq.n	8007b20 <HRTIM_HRTIM_ISR+0xac>
  {
    if((uint32_t)(ierits & HRTIM_IT_FLT4) != (uint32_t)RESET)
 8007b06:	68bb      	ldr	r3, [r7, #8]
 8007b08:	f003 0308 	and.w	r3, r3, #8
 8007b0c:	2b00      	cmp	r3, #0
 8007b0e:	d007      	beq.n	8007b20 <HRTIM_HRTIM_ISR+0xac>
    {
      __HAL_HRTIM_CLEAR_IT(hhrtim, HRTIM_IT_FLT4);
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	681b      	ldr	r3, [r3, #0]
 8007b14:	2208      	movs	r2, #8
 8007b16:	f8c3 238c 	str.w	r2, [r3, #908]	; 0x38c

      /* Invoke Fault 4 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Fault4Callback(hhrtim);
#else
      HAL_HRTIM_Fault4Callback(hhrtim);
 8007b1a:	6878      	ldr	r0, [r7, #4]
 8007b1c:	f7ff fbaf 	bl	800727e <HAL_HRTIM_Fault4Callback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Fault 5 event */
  if((uint32_t)(isrflags & HRTIM_FLAG_FLT5) != (uint32_t)RESET)
 8007b20:	68fb      	ldr	r3, [r7, #12]
 8007b22:	f003 0310 	and.w	r3, r3, #16
 8007b26:	2b00      	cmp	r3, #0
 8007b28:	d00c      	beq.n	8007b44 <HRTIM_HRTIM_ISR+0xd0>
  {
    if((uint32_t)(ierits & HRTIM_IT_FLT5) != (uint32_t)RESET)
 8007b2a:	68bb      	ldr	r3, [r7, #8]
 8007b2c:	f003 0310 	and.w	r3, r3, #16
 8007b30:	2b00      	cmp	r3, #0
 8007b32:	d007      	beq.n	8007b44 <HRTIM_HRTIM_ISR+0xd0>
    {
      __HAL_HRTIM_CLEAR_IT(hhrtim, HRTIM_IT_FLT5);
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	681b      	ldr	r3, [r3, #0]
 8007b38:	2210      	movs	r2, #16
 8007b3a:	f8c3 238c 	str.w	r2, [r3, #908]	; 0x38c

      /* Invoke Fault 5 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Fault5Callback(hhrtim);
#else
      HAL_HRTIM_Fault5Callback(hhrtim);
 8007b3e:	6878      	ldr	r0, [r7, #4]
 8007b40:	f7ff fba7 	bl	8007292 <HAL_HRTIM_Fault5Callback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* System fault event */
  if((uint32_t)(isrflags & HRTIM_FLAG_SYSFLT) != (uint32_t)RESET)
 8007b44:	68fb      	ldr	r3, [r7, #12]
 8007b46:	f003 0320 	and.w	r3, r3, #32
 8007b4a:	2b00      	cmp	r3, #0
 8007b4c:	d00c      	beq.n	8007b68 <HRTIM_HRTIM_ISR+0xf4>
  {
    if((uint32_t)(ierits & HRTIM_IT_SYSFLT) != (uint32_t)RESET)
 8007b4e:	68bb      	ldr	r3, [r7, #8]
 8007b50:	f003 0320 	and.w	r3, r3, #32
 8007b54:	2b00      	cmp	r3, #0
 8007b56:	d007      	beq.n	8007b68 <HRTIM_HRTIM_ISR+0xf4>
    {
      __HAL_HRTIM_CLEAR_IT(hhrtim, HRTIM_IT_SYSFLT);
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	681b      	ldr	r3, [r3, #0]
 8007b5c:	2220      	movs	r2, #32
 8007b5e:	f8c3 238c 	str.w	r2, [r3, #908]	; 0x38c

      /* Invoke System fault event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->SystemFaultCallback(hhrtim);
#else
      HAL_HRTIM_SystemFaultCallback(hhrtim);
 8007b62:	6878      	ldr	r0, [r7, #4]
 8007b64:	f7ff fb9f 	bl	80072a6 <HAL_HRTIM_SystemFaultCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }
}
 8007b68:	bf00      	nop
 8007b6a:	3710      	adds	r7, #16
 8007b6c:	46bd      	mov	sp, r7
 8007b6e:	bd80      	pop	{r7, pc}

08007b70 <HRTIM_Master_ISR>:
* @brief  Master timer interrupts service routine
* @param  hhrtim pointer to HAL HRTIM handle
* @retval None
*/
static void HRTIM_Master_ISR(HRTIM_HandleTypeDef * hhrtim)
{
 8007b70:	b580      	push	{r7, lr}
 8007b72:	b086      	sub	sp, #24
 8007b74:	af00      	add	r7, sp, #0
 8007b76:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hhrtim->Instance->sCommonRegs.ISR);
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	f8d3 3388 	ldr.w	r3, [r3, #904]	; 0x388
 8007b80:	617b      	str	r3, [r7, #20]
  uint32_t ierits    = READ_REG(hhrtim->Instance->sCommonRegs.IER);
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	681b      	ldr	r3, [r3, #0]
 8007b86:	f8d3 3390 	ldr.w	r3, [r3, #912]	; 0x390
 8007b8a:	613b      	str	r3, [r7, #16]
  uint32_t misrflags = READ_REG(hhrtim->Instance->sMasterRegs.MISR);
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	681b      	ldr	r3, [r3, #0]
 8007b90:	685b      	ldr	r3, [r3, #4]
 8007b92:	60fb      	str	r3, [r7, #12]
  uint32_t mdierits  = READ_REG(hhrtim->Instance->sMasterRegs.MDIER);
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	68db      	ldr	r3, [r3, #12]
 8007b9a:	60bb      	str	r3, [r7, #8]

  /* Burst mode period event */
  if((uint32_t)(isrflags & HRTIM_FLAG_BMPER) != (uint32_t)RESET)
 8007b9c:	697b      	ldr	r3, [r7, #20]
 8007b9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007ba2:	2b00      	cmp	r3, #0
 8007ba4:	d00d      	beq.n	8007bc2 <HRTIM_Master_ISR+0x52>
  {
    if((uint32_t)(ierits & HRTIM_IT_BMPER) != (uint32_t)RESET)
 8007ba6:	693b      	ldr	r3, [r7, #16]
 8007ba8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007bac:	2b00      	cmp	r3, #0
 8007bae:	d008      	beq.n	8007bc2 <HRTIM_Master_ISR+0x52>
    {
      __HAL_HRTIM_CLEAR_IT(hhrtim, HRTIM_IT_BMPER);
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	681b      	ldr	r3, [r3, #0]
 8007bb4:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8007bb8:	f8c3 238c 	str.w	r2, [r3, #908]	; 0x38c

      /* Invoke Burst mode period event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->BurstModePeriodCallback(hhrtim);
#else
      HAL_HRTIM_BurstModePeriodCallback(hhrtim);
 8007bbc:	6878      	ldr	r0, [r7, #4]
 8007bbe:	f7ff fb7c 	bl	80072ba <HAL_HRTIM_BurstModePeriodCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Master timer compare 1 event */
  if((uint32_t)(misrflags & HRTIM_MASTER_FLAG_MCMP1) != (uint32_t)RESET)
 8007bc2:	68fb      	ldr	r3, [r7, #12]
 8007bc4:	f003 0301 	and.w	r3, r3, #1
 8007bc8:	2b00      	cmp	r3, #0
 8007bca:	d00c      	beq.n	8007be6 <HRTIM_Master_ISR+0x76>
  {
    if((uint32_t)(mdierits & HRTIM_MASTER_IT_MCMP1) != (uint32_t)RESET)
 8007bcc:	68bb      	ldr	r3, [r7, #8]
 8007bce:	f003 0301 	and.w	r3, r3, #1
 8007bd2:	2b00      	cmp	r3, #0
 8007bd4:	d007      	beq.n	8007be6 <HRTIM_Master_ISR+0x76>
    {
      __HAL_HRTIM_MASTER_CLEAR_IT(hhrtim, HRTIM_MASTER_IT_MCMP1);
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	681b      	ldr	r3, [r3, #0]
 8007bda:	2201      	movs	r2, #1
 8007bdc:	609a      	str	r2, [r3, #8]

      /* Invoke compare 1 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Compare1EventCallback(hhrtim, HRTIM_TIMERINDEX_MASTER);
#else
      HAL_HRTIM_Compare1EventCallback(hhrtim, HRTIM_TIMERINDEX_MASTER);
 8007bde:	2105      	movs	r1, #5
 8007be0:	6878      	ldr	r0, [r7, #4]
 8007be2:	f7ff fb89 	bl	80072f8 <HAL_HRTIM_Compare1EventCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Master timer compare 2 event */
  if((uint32_t)(misrflags & HRTIM_MASTER_FLAG_MCMP2) != (uint32_t)RESET)
 8007be6:	68fb      	ldr	r3, [r7, #12]
 8007be8:	f003 0302 	and.w	r3, r3, #2
 8007bec:	2b00      	cmp	r3, #0
 8007bee:	d00c      	beq.n	8007c0a <HRTIM_Master_ISR+0x9a>
  {
    if((uint32_t)(mdierits & HRTIM_MASTER_IT_MCMP2) != (uint32_t)RESET)
 8007bf0:	68bb      	ldr	r3, [r7, #8]
 8007bf2:	f003 0302 	and.w	r3, r3, #2
 8007bf6:	2b00      	cmp	r3, #0
 8007bf8:	d007      	beq.n	8007c0a <HRTIM_Master_ISR+0x9a>
    {
      __HAL_HRTIM_MASTER_CLEAR_IT(hhrtim, HRTIM_MASTER_IT_MCMP2);
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	681b      	ldr	r3, [r3, #0]
 8007bfe:	2202      	movs	r2, #2
 8007c00:	609a      	str	r2, [r3, #8]

      /* Invoke compare 2 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Compare2EventCallback(hhrtim, HRTIM_TIMERINDEX_MASTER);
#else
      HAL_HRTIM_Compare2EventCallback(hhrtim, HRTIM_TIMERINDEX_MASTER);
 8007c02:	2105      	movs	r1, #5
 8007c04:	6878      	ldr	r0, [r7, #4]
 8007c06:	f7fa fe1b 	bl	8002840 <HAL_HRTIM_Compare2EventCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Master timer compare 3 event */
  if((uint32_t)(misrflags & HRTIM_MASTER_FLAG_MCMP3) != (uint32_t)RESET)
 8007c0a:	68fb      	ldr	r3, [r7, #12]
 8007c0c:	f003 0304 	and.w	r3, r3, #4
 8007c10:	2b00      	cmp	r3, #0
 8007c12:	d00c      	beq.n	8007c2e <HRTIM_Master_ISR+0xbe>
  {
    if((uint32_t)(mdierits & HRTIM_MASTER_IT_MCMP3) != (uint32_t)RESET)
 8007c14:	68bb      	ldr	r3, [r7, #8]
 8007c16:	f003 0304 	and.w	r3, r3, #4
 8007c1a:	2b00      	cmp	r3, #0
 8007c1c:	d007      	beq.n	8007c2e <HRTIM_Master_ISR+0xbe>
    {
      __HAL_HRTIM_MASTER_CLEAR_IT(hhrtim, HRTIM_MASTER_IT_MCMP3);
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	681b      	ldr	r3, [r3, #0]
 8007c22:	2204      	movs	r2, #4
 8007c24:	609a      	str	r2, [r3, #8]

      /* Invoke compare 3 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Compare3EventCallback(hhrtim, HRTIM_TIMERINDEX_MASTER);
#else
      HAL_HRTIM_Compare3EventCallback(hhrtim, HRTIM_TIMERINDEX_MASTER);
 8007c26:	2105      	movs	r1, #5
 8007c28:	6878      	ldr	r0, [r7, #4]
 8007c2a:	f7fa fe35 	bl	8002898 <HAL_HRTIM_Compare3EventCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Master timer compare 4 event */
  if((uint32_t)(misrflags & HRTIM_MASTER_FLAG_MCMP4) != (uint32_t)RESET)
 8007c2e:	68fb      	ldr	r3, [r7, #12]
 8007c30:	f003 0308 	and.w	r3, r3, #8
 8007c34:	2b00      	cmp	r3, #0
 8007c36:	d00c      	beq.n	8007c52 <HRTIM_Master_ISR+0xe2>
  {
    if((uint32_t)(mdierits & HRTIM_MASTER_IT_MCMP4) != (uint32_t)RESET)
 8007c38:	68bb      	ldr	r3, [r7, #8]
 8007c3a:	f003 0308 	and.w	r3, r3, #8
 8007c3e:	2b00      	cmp	r3, #0
 8007c40:	d007      	beq.n	8007c52 <HRTIM_Master_ISR+0xe2>
    {
      __HAL_HRTIM_MASTER_CLEAR_IT(hhrtim, HRTIM_MASTER_IT_MCMP4);
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	681b      	ldr	r3, [r3, #0]
 8007c46:	2208      	movs	r2, #8
 8007c48:	609a      	str	r2, [r3, #8]

      /* Invoke compare 4 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Compare4EventCallback(hhrtim, HRTIM_TIMERINDEX_MASTER);
#else
      HAL_HRTIM_Compare4EventCallback(hhrtim, HRTIM_TIMERINDEX_MASTER);
 8007c4a:	2105      	movs	r1, #5
 8007c4c:	6878      	ldr	r0, [r7, #4]
 8007c4e:	f7ff fb5e 	bl	800730e <HAL_HRTIM_Compare4EventCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Master timer repetition event */
  if((uint32_t)(misrflags & HRTIM_MASTER_FLAG_MREP) != (uint32_t)RESET)
 8007c52:	68fb      	ldr	r3, [r7, #12]
 8007c54:	f003 0310 	and.w	r3, r3, #16
 8007c58:	2b00      	cmp	r3, #0
 8007c5a:	d00c      	beq.n	8007c76 <HRTIM_Master_ISR+0x106>
  {
    if((uint32_t)(mdierits & HRTIM_MASTER_IT_MREP) != (uint32_t)RESET)
 8007c5c:	68bb      	ldr	r3, [r7, #8]
 8007c5e:	f003 0310 	and.w	r3, r3, #16
 8007c62:	2b00      	cmp	r3, #0
 8007c64:	d007      	beq.n	8007c76 <HRTIM_Master_ISR+0x106>
    {
      __HAL_HRTIM_MASTER_CLEAR_IT(hhrtim, HRTIM_MASTER_IT_MREP);
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	681b      	ldr	r3, [r3, #0]
 8007c6a:	2210      	movs	r2, #16
 8007c6c:	609a      	str	r2, [r3, #8]

      /* Invoke repetition event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->RepetitionEventCallback(hhrtim, HRTIM_TIMERINDEX_MASTER);
#else
      HAL_HRTIM_RepetitionEventCallback(hhrtim, HRTIM_TIMERINDEX_MASTER);
 8007c6e:	2105      	movs	r1, #5
 8007c70:	6878      	ldr	r0, [r7, #4]
 8007c72:	f7fa fe8b 	bl	800298c <HAL_HRTIM_RepetitionEventCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Synchronization input event */
  if((uint32_t)(misrflags & HRTIM_MASTER_FLAG_SYNC) != (uint32_t)RESET)
 8007c76:	68fb      	ldr	r3, [r7, #12]
 8007c78:	f003 0320 	and.w	r3, r3, #32
 8007c7c:	2b00      	cmp	r3, #0
 8007c7e:	d00b      	beq.n	8007c98 <HRTIM_Master_ISR+0x128>
  {
    if((uint32_t)(mdierits & HRTIM_MASTER_IT_SYNC) != (uint32_t)RESET)
 8007c80:	68bb      	ldr	r3, [r7, #8]
 8007c82:	f003 0320 	and.w	r3, r3, #32
 8007c86:	2b00      	cmp	r3, #0
 8007c88:	d006      	beq.n	8007c98 <HRTIM_Master_ISR+0x128>
    {
      __HAL_HRTIM_MASTER_CLEAR_IT(hhrtim, HRTIM_MASTER_IT_SYNC);
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	681b      	ldr	r3, [r3, #0]
 8007c8e:	2220      	movs	r2, #32
 8007c90:	609a      	str	r2, [r3, #8]

      /* Invoke synchronization event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->SynchronizationEventCallback(hhrtim);
#else
      HAL_HRTIM_SynchronizationEventCallback(hhrtim);
 8007c92:	6878      	ldr	r0, [r7, #4]
 8007c94:	f7ff fb1b 	bl	80072ce <HAL_HRTIM_SynchronizationEventCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Master timer registers update event */
  if((uint32_t)(misrflags & HRTIM_MASTER_FLAG_MUPD) != (uint32_t)RESET)
 8007c98:	68fb      	ldr	r3, [r7, #12]
 8007c9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007c9e:	2b00      	cmp	r3, #0
 8007ca0:	d00c      	beq.n	8007cbc <HRTIM_Master_ISR+0x14c>
  {
    if((uint32_t)(mdierits & HRTIM_MASTER_IT_MUPD) != (uint32_t)RESET)
 8007ca2:	68bb      	ldr	r3, [r7, #8]
 8007ca4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007ca8:	2b00      	cmp	r3, #0
 8007caa:	d007      	beq.n	8007cbc <HRTIM_Master_ISR+0x14c>
    {
      __HAL_HRTIM_MASTER_CLEAR_IT(hhrtim, HRTIM_MASTER_IT_MUPD);
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	681b      	ldr	r3, [r3, #0]
 8007cb0:	2240      	movs	r2, #64	; 0x40
 8007cb2:	609a      	str	r2, [r3, #8]

      /* Invoke registers update event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->RegistersUpdateCallback(hhrtim, HRTIM_TIMERINDEX_MASTER);
#else
      HAL_HRTIM_RegistersUpdateCallback(hhrtim, HRTIM_TIMERINDEX_MASTER);
 8007cb4:	2105      	movs	r1, #5
 8007cb6:	6878      	ldr	r0, [r7, #4]
 8007cb8:	f7ff fb13 	bl	80072e2 <HAL_HRTIM_RegistersUpdateCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }
}
 8007cbc:	bf00      	nop
 8007cbe:	3718      	adds	r7, #24
 8007cc0:	46bd      	mov	sp, r7
 8007cc2:	bd80      	pop	{r7, pc}

08007cc4 <HRTIM_Timer_ISR>:
  *                   @arg HRTIM_TIMERINDEX_TIMER_E for timer E
  * @retval None
*/
static void HRTIM_Timer_ISR(HRTIM_HandleTypeDef * hhrtim,
                     uint32_t TimerIdx)
{
 8007cc4:	b580      	push	{r7, lr}
 8007cc6:	b084      	sub	sp, #16
 8007cc8:	af00      	add	r7, sp, #0
 8007cca:	6078      	str	r0, [r7, #4]
 8007ccc:	6039      	str	r1, [r7, #0]
  uint32_t tisrflags = READ_REG(hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxISR);
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	681a      	ldr	r2, [r3, #0]
 8007cd2:	683b      	ldr	r3, [r7, #0]
 8007cd4:	3301      	adds	r3, #1
 8007cd6:	01db      	lsls	r3, r3, #7
 8007cd8:	4413      	add	r3, r2
 8007cda:	3304      	adds	r3, #4
 8007cdc:	681b      	ldr	r3, [r3, #0]
 8007cde:	60fb      	str	r3, [r7, #12]
  uint32_t tdierits  = READ_REG(hhrtim->Instance->sTimerxRegs[TimerIdx].TIMxDIER);
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	681a      	ldr	r2, [r3, #0]
 8007ce4:	683b      	ldr	r3, [r7, #0]
 8007ce6:	01db      	lsls	r3, r3, #7
 8007ce8:	4413      	add	r3, r2
 8007cea:	338c      	adds	r3, #140	; 0x8c
 8007cec:	681b      	ldr	r3, [r3, #0]
 8007cee:	60bb      	str	r3, [r7, #8]

  /* Timer compare 1 event */
  if((uint32_t)(tisrflags & HRTIM_TIM_FLAG_CMP1) != (uint32_t)RESET)
 8007cf0:	68fb      	ldr	r3, [r7, #12]
 8007cf2:	f003 0301 	and.w	r3, r3, #1
 8007cf6:	2b00      	cmp	r3, #0
 8007cf8:	d010      	beq.n	8007d1c <HRTIM_Timer_ISR+0x58>
  {
    if((uint32_t)(tdierits & HRTIM_TIM_IT_CMP1) != (uint32_t)RESET)
 8007cfa:	68bb      	ldr	r3, [r7, #8]
 8007cfc:	f003 0301 	and.w	r3, r3, #1
 8007d00:	2b00      	cmp	r3, #0
 8007d02:	d00b      	beq.n	8007d1c <HRTIM_Timer_ISR+0x58>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_CMP1);
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	681a      	ldr	r2, [r3, #0]
 8007d08:	683b      	ldr	r3, [r7, #0]
 8007d0a:	01db      	lsls	r3, r3, #7
 8007d0c:	4413      	add	r3, r2
 8007d0e:	3388      	adds	r3, #136	; 0x88
 8007d10:	2201      	movs	r2, #1
 8007d12:	601a      	str	r2, [r3, #0]

      /* Invoke compare 1 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Compare1EventCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_Compare1EventCallback(hhrtim, TimerIdx);
 8007d14:	6839      	ldr	r1, [r7, #0]
 8007d16:	6878      	ldr	r0, [r7, #4]
 8007d18:	f7ff faee 	bl	80072f8 <HAL_HRTIM_Compare1EventCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Timer compare 2 event */
  if((uint32_t)(tisrflags & HRTIM_TIM_FLAG_CMP2) != (uint32_t)RESET)
 8007d1c:	68fb      	ldr	r3, [r7, #12]
 8007d1e:	f003 0302 	and.w	r3, r3, #2
 8007d22:	2b00      	cmp	r3, #0
 8007d24:	d010      	beq.n	8007d48 <HRTIM_Timer_ISR+0x84>
  {
    if((uint32_t)(tdierits & HRTIM_TIM_IT_CMP2) != (uint32_t)RESET)
 8007d26:	68bb      	ldr	r3, [r7, #8]
 8007d28:	f003 0302 	and.w	r3, r3, #2
 8007d2c:	2b00      	cmp	r3, #0
 8007d2e:	d00b      	beq.n	8007d48 <HRTIM_Timer_ISR+0x84>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_CMP2);
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	681a      	ldr	r2, [r3, #0]
 8007d34:	683b      	ldr	r3, [r7, #0]
 8007d36:	01db      	lsls	r3, r3, #7
 8007d38:	4413      	add	r3, r2
 8007d3a:	3388      	adds	r3, #136	; 0x88
 8007d3c:	2202      	movs	r2, #2
 8007d3e:	601a      	str	r2, [r3, #0]

      /* Invoke compare 2 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Compare2EventCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_Compare2EventCallback(hhrtim, TimerIdx);
 8007d40:	6839      	ldr	r1, [r7, #0]
 8007d42:	6878      	ldr	r0, [r7, #4]
 8007d44:	f7fa fd7c 	bl	8002840 <HAL_HRTIM_Compare2EventCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Timer compare 3 event */
  if((uint32_t)(tisrflags & HRTIM_TIM_FLAG_CMP3) != (uint32_t)RESET)
 8007d48:	68fb      	ldr	r3, [r7, #12]
 8007d4a:	f003 0304 	and.w	r3, r3, #4
 8007d4e:	2b00      	cmp	r3, #0
 8007d50:	d010      	beq.n	8007d74 <HRTIM_Timer_ISR+0xb0>
  {
    if((uint32_t)(tdierits & HRTIM_TIM_IT_CMP3) != (uint32_t)RESET)
 8007d52:	68bb      	ldr	r3, [r7, #8]
 8007d54:	f003 0304 	and.w	r3, r3, #4
 8007d58:	2b00      	cmp	r3, #0
 8007d5a:	d00b      	beq.n	8007d74 <HRTIM_Timer_ISR+0xb0>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_CMP3);
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	681a      	ldr	r2, [r3, #0]
 8007d60:	683b      	ldr	r3, [r7, #0]
 8007d62:	01db      	lsls	r3, r3, #7
 8007d64:	4413      	add	r3, r2
 8007d66:	3388      	adds	r3, #136	; 0x88
 8007d68:	2204      	movs	r2, #4
 8007d6a:	601a      	str	r2, [r3, #0]

      /* Invoke compare 3 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Compare3EventCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_Compare3EventCallback(hhrtim, TimerIdx);
 8007d6c:	6839      	ldr	r1, [r7, #0]
 8007d6e:	6878      	ldr	r0, [r7, #4]
 8007d70:	f7fa fd92 	bl	8002898 <HAL_HRTIM_Compare3EventCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Timer compare 4 event */
  if((uint32_t)(tisrflags & HRTIM_TIM_FLAG_CMP4) != (uint32_t)RESET)
 8007d74:	68fb      	ldr	r3, [r7, #12]
 8007d76:	f003 0308 	and.w	r3, r3, #8
 8007d7a:	2b00      	cmp	r3, #0
 8007d7c:	d010      	beq.n	8007da0 <HRTIM_Timer_ISR+0xdc>
  {
    if((uint32_t)(tdierits & HRTIM_TIM_IT_CMP4) != (uint32_t)RESET)
 8007d7e:	68bb      	ldr	r3, [r7, #8]
 8007d80:	f003 0308 	and.w	r3, r3, #8
 8007d84:	2b00      	cmp	r3, #0
 8007d86:	d00b      	beq.n	8007da0 <HRTIM_Timer_ISR+0xdc>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_CMP4);
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	681a      	ldr	r2, [r3, #0]
 8007d8c:	683b      	ldr	r3, [r7, #0]
 8007d8e:	01db      	lsls	r3, r3, #7
 8007d90:	4413      	add	r3, r2
 8007d92:	3388      	adds	r3, #136	; 0x88
 8007d94:	2208      	movs	r2, #8
 8007d96:	601a      	str	r2, [r3, #0]

      /* Invoke compare 4 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Compare4EventCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_Compare4EventCallback(hhrtim, TimerIdx);
 8007d98:	6839      	ldr	r1, [r7, #0]
 8007d9a:	6878      	ldr	r0, [r7, #4]
 8007d9c:	f7ff fab7 	bl	800730e <HAL_HRTIM_Compare4EventCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Timer repetition event */
  if((uint32_t)(tisrflags & HRTIM_TIM_FLAG_REP) != (uint32_t)RESET)
 8007da0:	68fb      	ldr	r3, [r7, #12]
 8007da2:	f003 0310 	and.w	r3, r3, #16
 8007da6:	2b00      	cmp	r3, #0
 8007da8:	d010      	beq.n	8007dcc <HRTIM_Timer_ISR+0x108>
  {
    if((uint32_t)(tdierits & HRTIM_TIM_IT_REP) != (uint32_t)RESET)
 8007daa:	68bb      	ldr	r3, [r7, #8]
 8007dac:	f003 0310 	and.w	r3, r3, #16
 8007db0:	2b00      	cmp	r3, #0
 8007db2:	d00b      	beq.n	8007dcc <HRTIM_Timer_ISR+0x108>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_REP);
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	681a      	ldr	r2, [r3, #0]
 8007db8:	683b      	ldr	r3, [r7, #0]
 8007dba:	01db      	lsls	r3, r3, #7
 8007dbc:	4413      	add	r3, r2
 8007dbe:	3388      	adds	r3, #136	; 0x88
 8007dc0:	2210      	movs	r2, #16
 8007dc2:	601a      	str	r2, [r3, #0]

      /* Invoke repetition event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->RepetitionEventCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_RepetitionEventCallback(hhrtim, TimerIdx);
 8007dc4:	6839      	ldr	r1, [r7, #0]
 8007dc6:	6878      	ldr	r0, [r7, #4]
 8007dc8:	f7fa fde0 	bl	800298c <HAL_HRTIM_RepetitionEventCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Timer registers update event */
  if((uint32_t)(tisrflags & HRTIM_TIM_FLAG_UPD) != (uint32_t)RESET)
 8007dcc:	68fb      	ldr	r3, [r7, #12]
 8007dce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007dd2:	2b00      	cmp	r3, #0
 8007dd4:	d010      	beq.n	8007df8 <HRTIM_Timer_ISR+0x134>
  {
    if((uint32_t)(tdierits & HRTIM_TIM_IT_UPD) != (uint32_t)RESET)
 8007dd6:	68bb      	ldr	r3, [r7, #8]
 8007dd8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007ddc:	2b00      	cmp	r3, #0
 8007dde:	d00b      	beq.n	8007df8 <HRTIM_Timer_ISR+0x134>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_UPD);
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	681a      	ldr	r2, [r3, #0]
 8007de4:	683b      	ldr	r3, [r7, #0]
 8007de6:	01db      	lsls	r3, r3, #7
 8007de8:	4413      	add	r3, r2
 8007dea:	3388      	adds	r3, #136	; 0x88
 8007dec:	2240      	movs	r2, #64	; 0x40
 8007dee:	601a      	str	r2, [r3, #0]

      /* Invoke registers update event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->RegistersUpdateCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_RegistersUpdateCallback(hhrtim, TimerIdx);
 8007df0:	6839      	ldr	r1, [r7, #0]
 8007df2:	6878      	ldr	r0, [r7, #4]
 8007df4:	f7ff fa75 	bl	80072e2 <HAL_HRTIM_RegistersUpdateCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Timer capture 1 event */
  if((uint32_t)(tisrflags & HRTIM_TIM_FLAG_CPT1) != (uint32_t)RESET)
 8007df8:	68fb      	ldr	r3, [r7, #12]
 8007dfa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007dfe:	2b00      	cmp	r3, #0
 8007e00:	d010      	beq.n	8007e24 <HRTIM_Timer_ISR+0x160>
  {
    if((uint32_t)(tdierits & HRTIM_TIM_IT_CPT1) != (uint32_t)RESET)
 8007e02:	68bb      	ldr	r3, [r7, #8]
 8007e04:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007e08:	2b00      	cmp	r3, #0
 8007e0a:	d00b      	beq.n	8007e24 <HRTIM_Timer_ISR+0x160>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_CPT1);
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	681a      	ldr	r2, [r3, #0]
 8007e10:	683b      	ldr	r3, [r7, #0]
 8007e12:	01db      	lsls	r3, r3, #7
 8007e14:	4413      	add	r3, r2
 8007e16:	3388      	adds	r3, #136	; 0x88
 8007e18:	2280      	movs	r2, #128	; 0x80
 8007e1a:	601a      	str	r2, [r3, #0]

      /* Invoke capture 1 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Capture1EventCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_Capture1EventCallback(hhrtim, TimerIdx);
 8007e1c:	6839      	ldr	r1, [r7, #0]
 8007e1e:	6878      	ldr	r0, [r7, #4]
 8007e20:	f7ff fa80 	bl	8007324 <HAL_HRTIM_Capture1EventCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Timer capture 2 event */
  if((uint32_t)(tisrflags & HRTIM_TIM_FLAG_CPT2) != (uint32_t)RESET)
 8007e24:	68fb      	ldr	r3, [r7, #12]
 8007e26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007e2a:	2b00      	cmp	r3, #0
 8007e2c:	d011      	beq.n	8007e52 <HRTIM_Timer_ISR+0x18e>
  {
    if((uint32_t)(tdierits & HRTIM_TIM_IT_CPT2) != (uint32_t)RESET)
 8007e2e:	68bb      	ldr	r3, [r7, #8]
 8007e30:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007e34:	2b00      	cmp	r3, #0
 8007e36:	d00c      	beq.n	8007e52 <HRTIM_Timer_ISR+0x18e>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_CPT2);
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	681a      	ldr	r2, [r3, #0]
 8007e3c:	683b      	ldr	r3, [r7, #0]
 8007e3e:	01db      	lsls	r3, r3, #7
 8007e40:	4413      	add	r3, r2
 8007e42:	3388      	adds	r3, #136	; 0x88
 8007e44:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007e48:	601a      	str	r2, [r3, #0]

      /* Invoke capture 2 event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Capture2EventCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_Capture2EventCallback(hhrtim, TimerIdx);
 8007e4a:	6839      	ldr	r1, [r7, #0]
 8007e4c:	6878      	ldr	r0, [r7, #4]
 8007e4e:	f7ff fa74 	bl	800733a <HAL_HRTIM_Capture2EventCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Timer output 1 set event */
  if((uint32_t)(tisrflags & HRTIM_TIM_FLAG_SET1) != (uint32_t)RESET)
 8007e52:	68fb      	ldr	r3, [r7, #12]
 8007e54:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007e58:	2b00      	cmp	r3, #0
 8007e5a:	d011      	beq.n	8007e80 <HRTIM_Timer_ISR+0x1bc>
  {
    if((uint32_t)(tdierits & HRTIM_TIM_IT_SET1) != (uint32_t)RESET)
 8007e5c:	68bb      	ldr	r3, [r7, #8]
 8007e5e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007e62:	2b00      	cmp	r3, #0
 8007e64:	d00c      	beq.n	8007e80 <HRTIM_Timer_ISR+0x1bc>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_SET1);
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	681a      	ldr	r2, [r3, #0]
 8007e6a:	683b      	ldr	r3, [r7, #0]
 8007e6c:	01db      	lsls	r3, r3, #7
 8007e6e:	4413      	add	r3, r2
 8007e70:	3388      	adds	r3, #136	; 0x88
 8007e72:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007e76:	601a      	str	r2, [r3, #0]

      /* Invoke output 1 set event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Output1SetCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_Output1SetCallback(hhrtim, TimerIdx);
 8007e78:	6839      	ldr	r1, [r7, #0]
 8007e7a:	6878      	ldr	r0, [r7, #4]
 8007e7c:	f7ff fa7e 	bl	800737c <HAL_HRTIM_Output1SetCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Timer output 1 reset event */
  if((uint32_t)(tisrflags & HRTIM_TIM_FLAG_RST1) != (uint32_t)RESET)
 8007e80:	68fb      	ldr	r3, [r7, #12]
 8007e82:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007e86:	2b00      	cmp	r3, #0
 8007e88:	d011      	beq.n	8007eae <HRTIM_Timer_ISR+0x1ea>
  {
    if((uint32_t)(tdierits & HRTIM_TIM_IT_RST1) != (uint32_t)RESET)
 8007e8a:	68bb      	ldr	r3, [r7, #8]
 8007e8c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007e90:	2b00      	cmp	r3, #0
 8007e92:	d00c      	beq.n	8007eae <HRTIM_Timer_ISR+0x1ea>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_RST1);
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	681a      	ldr	r2, [r3, #0]
 8007e98:	683b      	ldr	r3, [r7, #0]
 8007e9a:	01db      	lsls	r3, r3, #7
 8007e9c:	4413      	add	r3, r2
 8007e9e:	3388      	adds	r3, #136	; 0x88
 8007ea0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8007ea4:	601a      	str	r2, [r3, #0]

      /* Invoke output 1 reset event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Output1ResetCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_Output1ResetCallback(hhrtim, TimerIdx);
 8007ea6:	6839      	ldr	r1, [r7, #0]
 8007ea8:	6878      	ldr	r0, [r7, #4]
 8007eaa:	f7ff fa72 	bl	8007392 <HAL_HRTIM_Output1ResetCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Timer output 2 set event */
  if((uint32_t)(tisrflags & HRTIM_TIM_FLAG_SET2) != (uint32_t)RESET)
 8007eae:	68fb      	ldr	r3, [r7, #12]
 8007eb0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007eb4:	2b00      	cmp	r3, #0
 8007eb6:	d011      	beq.n	8007edc <HRTIM_Timer_ISR+0x218>
  {
    if((uint32_t)(tdierits & HRTIM_TIM_IT_SET2) != (uint32_t)RESET)
 8007eb8:	68bb      	ldr	r3, [r7, #8]
 8007eba:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007ebe:	2b00      	cmp	r3, #0
 8007ec0:	d00c      	beq.n	8007edc <HRTIM_Timer_ISR+0x218>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_SET2);
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	681a      	ldr	r2, [r3, #0]
 8007ec6:	683b      	ldr	r3, [r7, #0]
 8007ec8:	01db      	lsls	r3, r3, #7
 8007eca:	4413      	add	r3, r2
 8007ecc:	3388      	adds	r3, #136	; 0x88
 8007ece:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007ed2:	601a      	str	r2, [r3, #0]

      /* Invoke output 2 set event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Output2SetCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_Output2SetCallback(hhrtim, TimerIdx);
 8007ed4:	6839      	ldr	r1, [r7, #0]
 8007ed6:	6878      	ldr	r0, [r7, #4]
 8007ed8:	f7ff fa66 	bl	80073a8 <HAL_HRTIM_Output2SetCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Timer output 2 reset event */
  if((uint32_t)(tisrflags & HRTIM_TIM_FLAG_RST2) != (uint32_t)RESET)
 8007edc:	68fb      	ldr	r3, [r7, #12]
 8007ede:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007ee2:	2b00      	cmp	r3, #0
 8007ee4:	d011      	beq.n	8007f0a <HRTIM_Timer_ISR+0x246>
  {
    if((uint32_t)(tdierits & HRTIM_TIM_IT_RST2) != (uint32_t)RESET)
 8007ee6:	68bb      	ldr	r3, [r7, #8]
 8007ee8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007eec:	2b00      	cmp	r3, #0
 8007eee:	d00c      	beq.n	8007f0a <HRTIM_Timer_ISR+0x246>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_RST2);
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	681a      	ldr	r2, [r3, #0]
 8007ef4:	683b      	ldr	r3, [r7, #0]
 8007ef6:	01db      	lsls	r3, r3, #7
 8007ef8:	4413      	add	r3, r2
 8007efa:	3388      	adds	r3, #136	; 0x88
 8007efc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8007f00:	601a      	str	r2, [r3, #0]

      /* Invoke output 2 reset event callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->Output2ResetCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_Output2ResetCallback(hhrtim, TimerIdx);
 8007f02:	6839      	ldr	r1, [r7, #0]
 8007f04:	6878      	ldr	r0, [r7, #4]
 8007f06:	f7ff fa5a 	bl	80073be <HAL_HRTIM_Output2ResetCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Timer reset event */
  if((uint32_t)(tisrflags & HRTIM_TIM_FLAG_RST) != (uint32_t)RESET)
 8007f0a:	68fb      	ldr	r3, [r7, #12]
 8007f0c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007f10:	2b00      	cmp	r3, #0
 8007f12:	d011      	beq.n	8007f38 <HRTIM_Timer_ISR+0x274>
  {
    if((uint32_t)(tdierits & HRTIM_TIM_IT_RST) != (uint32_t)RESET)
 8007f14:	68bb      	ldr	r3, [r7, #8]
 8007f16:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007f1a:	2b00      	cmp	r3, #0
 8007f1c:	d00c      	beq.n	8007f38 <HRTIM_Timer_ISR+0x274>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_RST);
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	681a      	ldr	r2, [r3, #0]
 8007f22:	683b      	ldr	r3, [r7, #0]
 8007f24:	01db      	lsls	r3, r3, #7
 8007f26:	4413      	add	r3, r2
 8007f28:	3388      	adds	r3, #136	; 0x88
 8007f2a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8007f2e:	601a      	str	r2, [r3, #0]

      /* Invoke timer reset callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->CounterResetCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_CounterResetCallback(hhrtim, TimerIdx);
 8007f30:	6839      	ldr	r1, [r7, #0]
 8007f32:	6878      	ldr	r0, [r7, #4]
 8007f34:	f7ff fa17 	bl	8007366 <HAL_HRTIM_CounterResetCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }

  /* Delayed protection event */
  if((uint32_t)(tisrflags & HRTIM_TIM_FLAG_DLYPRT) != (uint32_t)RESET)
 8007f38:	68fb      	ldr	r3, [r7, #12]
 8007f3a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007f3e:	2b00      	cmp	r3, #0
 8007f40:	d011      	beq.n	8007f66 <HRTIM_Timer_ISR+0x2a2>
  {
    if((uint32_t)(tdierits & HRTIM_TIM_IT_DLYPRT) != (uint32_t)RESET)
 8007f42:	68bb      	ldr	r3, [r7, #8]
 8007f44:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007f48:	2b00      	cmp	r3, #0
 8007f4a:	d00c      	beq.n	8007f66 <HRTIM_Timer_ISR+0x2a2>
    {
      __HAL_HRTIM_TIMER_CLEAR_IT(hhrtim, TimerIdx, HRTIM_TIM_IT_DLYPRT);
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	681a      	ldr	r2, [r3, #0]
 8007f50:	683b      	ldr	r3, [r7, #0]
 8007f52:	01db      	lsls	r3, r3, #7
 8007f54:	4413      	add	r3, r2
 8007f56:	3388      	adds	r3, #136	; 0x88
 8007f58:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8007f5c:	601a      	str	r2, [r3, #0]

      /* Invoke delayed protection callback */
#if (USE_HAL_HRTIM_REGISTER_CALLBACKS == 1)
      hhrtim->DelayedProtectionCallback(hhrtim, TimerIdx);
#else
      HAL_HRTIM_DelayedProtectionCallback(hhrtim, TimerIdx);
 8007f5e:	6839      	ldr	r1, [r7, #0]
 8007f60:	6878      	ldr	r0, [r7, #4]
 8007f62:	f7ff f9f5 	bl	8007350 <HAL_HRTIM_DelayedProtectionCallback>
#endif /* USE_HAL_HRTIM_REGISTER_CALLBACKS */
    }
  }
}
 8007f66:	bf00      	nop
 8007f68:	3710      	adds	r7, #16
 8007f6a:	46bd      	mov	sp, r7
 8007f6c:	bd80      	pop	{r7, pc}
	...

08007f70 <HAL_LPTIM_Init>:
  *         LPTIM_InitTypeDef and initialize the associated handle.
  * @param  hlptim LPTIM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LPTIM_Init(LPTIM_HandleTypeDef *hlptim)
{
 8007f70:	b580      	push	{r7, lr}
 8007f72:	b084      	sub	sp, #16
 8007f74:	af00      	add	r7, sp, #0
 8007f76:	6078      	str	r0, [r7, #4]
  uint32_t tmpcfgr;

  /* Check the LPTIM handle allocation */
  if (hlptim == NULL)
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	2b00      	cmp	r3, #0
 8007f7c:	d101      	bne.n	8007f82 <HAL_LPTIM_Init+0x12>
  {
    return HAL_ERROR;
 8007f7e:	2301      	movs	r3, #1
 8007f80:	e097      	b.n	80080b2 <HAL_LPTIM_Init+0x142>
  /* Check the parameters */
  assert_param(IS_LPTIM_INSTANCE(hlptim->Instance));

  assert_param(IS_LPTIM_CLOCK_SOURCE(hlptim->Init.Clock.Source));
  assert_param(IS_LPTIM_CLOCK_PRESCALER(hlptim->Init.Clock.Prescaler));
  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	685b      	ldr	r3, [r3, #4]
 8007f86:	2b01      	cmp	r3, #1
  }
  assert_param(IS_LPTIM_OUTPUT_POLARITY(hlptim->Init.OutputPolarity));
  assert_param(IS_LPTIM_UPDATE_MODE(hlptim->Init.UpdateMode));
  assert_param(IS_LPTIM_COUNTER_SOURCE(hlptim->Init.CounterSource));

  if (hlptim->State == HAL_LPTIM_STATE_RESET)
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8007f8e:	b2db      	uxtb	r3, r3
 8007f90:	2b00      	cmp	r3, #0
 8007f92:	d106      	bne.n	8007fa2 <HAL_LPTIM_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hlptim->Lock = HAL_UNLOCKED;
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	2200      	movs	r2, #0
 8007f98:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hlptim->MspInitCallback(hlptim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_LPTIM_MspInit(hlptim);
 8007f9c:	6878      	ldr	r0, [r7, #4]
 8007f9e:	f7fa f99d 	bl	80022dc <HAL_LPTIM_MspInit>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
  }

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	2202      	movs	r2, #2
 8007fa6:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36

  /* Get the LPTIMx CFGR value */
  tmpcfgr = hlptim->Instance->CFGR;
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	681b      	ldr	r3, [r3, #0]
 8007fae:	68db      	ldr	r3, [r3, #12]
 8007fb0:	60fb      	str	r3, [r7, #12]

  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	685b      	ldr	r3, [r3, #4]
 8007fb6:	2b01      	cmp	r3, #1
 8007fb8:	d004      	beq.n	8007fc4 <HAL_LPTIM_Init+0x54>
      || (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007fbe:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007fc2:	d103      	bne.n	8007fcc <HAL_LPTIM_Init+0x5c>
  {
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKPOL | LPTIM_CFGR_CKFLT));
 8007fc4:	68fb      	ldr	r3, [r7, #12]
 8007fc6:	f023 031e 	bic.w	r3, r3, #30
 8007fca:	60fb      	str	r3, [r7, #12]
  }
  if (hlptim->Init.Trigger.Source != LPTIM_TRIGSOURCE_SOFTWARE)
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	695b      	ldr	r3, [r3, #20]
 8007fd0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007fd4:	4293      	cmp	r3, r2
 8007fd6:	d003      	beq.n	8007fe0 <HAL_LPTIM_Init+0x70>
  {
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_TRGFLT | LPTIM_CFGR_TRIGSEL));
 8007fd8:	68fa      	ldr	r2, [r7, #12]
 8007fda:	4b38      	ldr	r3, [pc, #224]	; (80080bc <HAL_LPTIM_Init+0x14c>)
 8007fdc:	4013      	ands	r3, r2
 8007fde:	60fb      	str	r3, [r7, #12]
  }

  /* Clear CKSEL, PRESC, TRIGEN, TRGFLT, WAVPOL, PRELOAD & COUNTMODE bits */
  tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKSEL | LPTIM_CFGR_TRIGEN | LPTIM_CFGR_PRELOAD |
 8007fe0:	68fa      	ldr	r2, [r7, #12]
 8007fe2:	4b37      	ldr	r3, [pc, #220]	; (80080c0 <HAL_LPTIM_Init+0x150>)
 8007fe4:	4013      	ands	r3, r2
 8007fe6:	60fb      	str	r3, [r7, #12]
                          LPTIM_CFGR_WAVPOL | LPTIM_CFGR_PRESC | LPTIM_CFGR_COUNTMODE));

  /* Set initialization parameters */
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	685a      	ldr	r2, [r3, #4]
              hlptim->Init.Clock.Prescaler |
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	689b      	ldr	r3, [r3, #8]
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 8007ff0:	431a      	orrs	r2, r3
              hlptim->Init.OutputPolarity  |
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	6a1b      	ldr	r3, [r3, #32]
              hlptim->Init.Clock.Prescaler |
 8007ff6:	431a      	orrs	r2, r3
              hlptim->Init.UpdateMode      |
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
              hlptim->Init.OutputPolarity  |
 8007ffc:	431a      	orrs	r2, r3
              hlptim->Init.CounterSource);
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	6a9b      	ldr	r3, [r3, #40]	; 0x28
              hlptim->Init.UpdateMode      |
 8008002:	4313      	orrs	r3, r2
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 8008004:	68fa      	ldr	r2, [r7, #12]
 8008006:	4313      	orrs	r3, r2
 8008008:	60fb      	str	r3, [r7, #12]

  /* Glitch filters for internal triggers and  external inputs are configured
   * only if an internal clock source is provided to the LPTIM
   */
  if (hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC)
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	685b      	ldr	r3, [r3, #4]
 800800e:	2b00      	cmp	r3, #0
 8008010:	d107      	bne.n	8008022 <HAL_LPTIM_Init+0xb2>
  {
    tmpcfgr |= (hlptim->Init.Trigger.SampleTime |
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	69da      	ldr	r2, [r3, #28]
                hlptim->Init.UltraLowPowerClock.SampleTime);
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	691b      	ldr	r3, [r3, #16]
    tmpcfgr |= (hlptim->Init.Trigger.SampleTime |
 800801a:	4313      	orrs	r3, r2
 800801c:	68fa      	ldr	r2, [r7, #12]
 800801e:	4313      	orrs	r3, r2
 8008020:	60fb      	str	r3, [r7, #12]
  }

  /* Configure LPTIM external clock polarity and digital filter */
  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	685b      	ldr	r3, [r3, #4]
 8008026:	2b01      	cmp	r3, #1
 8008028:	d004      	beq.n	8008034 <HAL_LPTIM_Init+0xc4>
      || (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800802e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8008032:	d107      	bne.n	8008044 <HAL_LPTIM_Init+0xd4>
  {
    tmpcfgr |= (hlptim->Init.UltraLowPowerClock.Polarity |
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	68da      	ldr	r2, [r3, #12]
                hlptim->Init.UltraLowPowerClock.SampleTime);
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	691b      	ldr	r3, [r3, #16]
    tmpcfgr |= (hlptim->Init.UltraLowPowerClock.Polarity |
 800803c:	4313      	orrs	r3, r2
 800803e:	68fa      	ldr	r2, [r7, #12]
 8008040:	4313      	orrs	r3, r2
 8008042:	60fb      	str	r3, [r7, #12]
  }

  /* Configure LPTIM external trigger */
  if (hlptim->Init.Trigger.Source != LPTIM_TRIGSOURCE_SOFTWARE)
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	695b      	ldr	r3, [r3, #20]
 8008048:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800804c:	4293      	cmp	r3, r2
 800804e:	d00a      	beq.n	8008066 <HAL_LPTIM_Init+0xf6>
  {
    /* Enable External trigger and set the trigger source */
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	695a      	ldr	r2, [r3, #20]
                hlptim->Init.Trigger.ActiveEdge |
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	699b      	ldr	r3, [r3, #24]
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 8008058:	431a      	orrs	r2, r3
                hlptim->Init.Trigger.SampleTime);
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	69db      	ldr	r3, [r3, #28]
                hlptim->Init.Trigger.ActiveEdge |
 800805e:	4313      	orrs	r3, r2
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 8008060:	68fa      	ldr	r2, [r7, #12]
 8008062:	4313      	orrs	r3, r2
 8008064:	60fb      	str	r3, [r7, #12]
  }

  /* Write to LPTIMx CFGR */
  hlptim->Instance->CFGR = tmpcfgr;
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	681b      	ldr	r3, [r3, #0]
 800806a:	68fa      	ldr	r2, [r7, #12]
 800806c:	60da      	str	r2, [r3, #12]

  /* Configure LPTIM input sources */
  if ((hlptim->Instance == LPTIM1) || (hlptim->Instance == LPTIM2))
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	681b      	ldr	r3, [r3, #0]
 8008072:	4a14      	ldr	r2, [pc, #80]	; (80080c4 <HAL_LPTIM_Init+0x154>)
 8008074:	4293      	cmp	r3, r2
 8008076:	d004      	beq.n	8008082 <HAL_LPTIM_Init+0x112>
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	681b      	ldr	r3, [r3, #0]
 800807c:	4a12      	ldr	r2, [pc, #72]	; (80080c8 <HAL_LPTIM_Init+0x158>)
 800807e:	4293      	cmp	r3, r2
 8008080:	d108      	bne.n	8008094 <HAL_LPTIM_Init+0x124>
    /* Check LPTIM Input1 and Input2 sources */
    assert_param(IS_LPTIM_INPUT1_SOURCE(hlptim->Instance, hlptim->Init.Input1Source));
    assert_param(IS_LPTIM_INPUT2_SOURCE(hlptim->Instance, hlptim->Init.Input2Source));

    /* Configure LPTIM Input1 and Input2 sources */
    hlptim->Instance->CFGR2 = (hlptim->Init.Input1Source | hlptim->Init.Input2Source);
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	681b      	ldr	r3, [r3, #0]
 800808e:	430a      	orrs	r2, r1
 8008090:	625a      	str	r2, [r3, #36]	; 0x24
 8008092:	e009      	b.n	80080a8 <HAL_LPTIM_Init+0x138>
  }
  else
  {
    if (hlptim->Instance == LPTIM3)
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	681b      	ldr	r3, [r3, #0]
 8008098:	4a0c      	ldr	r2, [pc, #48]	; (80080cc <HAL_LPTIM_Init+0x15c>)
 800809a:	4293      	cmp	r3, r2
 800809c:	d104      	bne.n	80080a8 <HAL_LPTIM_Init+0x138>
    {
      /* Check LPTIM3 Input1 source */
      assert_param(IS_LPTIM_INPUT1_SOURCE(hlptim->Instance, hlptim->Init.Input1Source));

      /* Configure LPTIM3 Input1 source */
      hlptim->Instance->CFGR2 = hlptim->Init.Input1Source;
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	681b      	ldr	r3, [r3, #0]
 80080a2:	687a      	ldr	r2, [r7, #4]
 80080a4:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80080a6:	625a      	str	r2, [r3, #36]	; 0x24
    }
  }

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_READY;
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	2201      	movs	r2, #1
 80080ac:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36

  /* Return function status */
  return HAL_OK;
 80080b0:	2300      	movs	r3, #0
}
 80080b2:	4618      	mov	r0, r3
 80080b4:	3710      	adds	r7, #16
 80080b6:	46bd      	mov	sp, r7
 80080b8:	bd80      	pop	{r7, pc}
 80080ba:	bf00      	nop
 80080bc:	ffff1f3f 	.word	0xffff1f3f
 80080c0:	ff19f1fe 	.word	0xff19f1fe
 80080c4:	40002400 	.word	0x40002400
 80080c8:	58002400 	.word	0x58002400
 80080cc:	58002800 	.word	0x58002800

080080d0 <HAL_LPTIM_Counter_Start_IT>:
  * @param  Period Specifies the Autoreload value.
  *         This parameter must be a value between 0x0001 and 0xFFFF.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LPTIM_Counter_Start_IT(LPTIM_HandleTypeDef *hlptim, uint32_t Period)
{
 80080d0:	b580      	push	{r7, lr}
 80080d2:	b082      	sub	sp, #8
 80080d4:	af00      	add	r7, sp, #0
 80080d6:	6078      	str	r0, [r7, #4]
 80080d8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_LPTIM_INSTANCE(hlptim->Instance));
  assert_param(IS_LPTIM_PERIOD(Period));

  /* Set the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	2202      	movs	r2, #2
 80080de:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36

  /* If clock source is not ULPTIM clock and counter source is external, then it must not be prescaled */
  if ((hlptim->Init.Clock.Source != LPTIM_CLOCKSOURCE_ULPTIM)
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	685b      	ldr	r3, [r3, #4]
 80080e6:	2b01      	cmp	r3, #1
 80080e8:	d00c      	beq.n	8008104 <HAL_LPTIM_Counter_Start_IT+0x34>
      && (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80080ee:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80080f2:	d107      	bne.n	8008104 <HAL_LPTIM_Counter_Start_IT+0x34>
  {
    /* Check if clock is prescaled */
    assert_param(IS_LPTIM_CLOCK_PRESCALERDIV1(hlptim->Init.Clock.Prescaler));
    /* Set clock prescaler to 0 */
    hlptim->Instance->CFGR &= ~LPTIM_CFGR_PRESC;
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	681b      	ldr	r3, [r3, #0]
 80080f8:	68da      	ldr	r2, [r3, #12]
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	681b      	ldr	r3, [r3, #0]
 80080fe:	f422 6260 	bic.w	r2, r2, #3584	; 0xe00
 8008102:	60da      	str	r2, [r3, #12]
  }

  /* Enable the Peripheral */
  __HAL_LPTIM_ENABLE(hlptim);
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	681b      	ldr	r3, [r3, #0]
 8008108:	691a      	ldr	r2, [r3, #16]
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	681b      	ldr	r3, [r3, #0]
 800810e:	f042 0201 	orr.w	r2, r2, #1
 8008112:	611a      	str	r2, [r3, #16]

  /* Clear flag */
  __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARROK);
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	681b      	ldr	r3, [r3, #0]
 8008118:	2210      	movs	r2, #16
 800811a:	605a      	str	r2, [r3, #4]

  /* Load the period value in the autoreload register */
  __HAL_LPTIM_AUTORELOAD_SET(hlptim, Period);
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	681b      	ldr	r3, [r3, #0]
 8008120:	683a      	ldr	r2, [r7, #0]
 8008122:	619a      	str	r2, [r3, #24]

  /* Wait for the completion of the write operation to the LPTIM_ARR register */
  if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_ARROK) == HAL_TIMEOUT)
 8008124:	2110      	movs	r1, #16
 8008126:	6878      	ldr	r0, [r7, #4]
 8008128:	f000 f91e 	bl	8008368 <LPTIM_WaitForFlag>
 800812c:	4603      	mov	r3, r0
 800812e:	2b03      	cmp	r3, #3
 8008130:	d101      	bne.n	8008136 <HAL_LPTIM_Counter_Start_IT+0x66>
  {
    return HAL_TIMEOUT;
 8008132:	2303      	movs	r3, #3
 8008134:	e02f      	b.n	8008196 <HAL_LPTIM_Counter_Start_IT+0xc6>
  }

  /* Disable the Peripheral */
  __HAL_LPTIM_DISABLE(hlptim);
 8008136:	6878      	ldr	r0, [r7, #4]
 8008138:	f000 f946 	bl	80083c8 <LPTIM_Disable>

  if (HAL_LPTIM_GetState(hlptim) == HAL_LPTIM_STATE_TIMEOUT)
 800813c:	6878      	ldr	r0, [r7, #4]
 800813e:	f000 f905 	bl	800834c <HAL_LPTIM_GetState>
 8008142:	4603      	mov	r3, r0
 8008144:	2b03      	cmp	r3, #3
 8008146:	d101      	bne.n	800814c <HAL_LPTIM_Counter_Start_IT+0x7c>
  {
    return HAL_TIMEOUT;
 8008148:	2303      	movs	r3, #3
 800814a:	e024      	b.n	8008196 <HAL_LPTIM_Counter_Start_IT+0xc6>
  }

  /* Enable Autoreload write complete interrupt */
  __HAL_LPTIM_ENABLE_IT(hlptim, LPTIM_IT_ARROK);
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	681b      	ldr	r3, [r3, #0]
 8008150:	689a      	ldr	r2, [r3, #8]
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	681b      	ldr	r3, [r3, #0]
 8008156:	f042 0210 	orr.w	r2, r2, #16
 800815a:	609a      	str	r2, [r3, #8]

  /* Enable Autoreload match interrupt */
  __HAL_LPTIM_ENABLE_IT(hlptim, LPTIM_IT_ARRM);
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	681b      	ldr	r3, [r3, #0]
 8008160:	689a      	ldr	r2, [r3, #8]
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	681b      	ldr	r3, [r3, #0]
 8008166:	f042 0202 	orr.w	r2, r2, #2
 800816a:	609a      	str	r2, [r3, #8]

  /* Enable the Peripheral */
  __HAL_LPTIM_ENABLE(hlptim);
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	681b      	ldr	r3, [r3, #0]
 8008170:	691a      	ldr	r2, [r3, #16]
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	681b      	ldr	r3, [r3, #0]
 8008176:	f042 0201 	orr.w	r2, r2, #1
 800817a:	611a      	str	r2, [r3, #16]

  /* Start timer in continuous mode */
  __HAL_LPTIM_START_CONTINUOUS(hlptim);
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	681b      	ldr	r3, [r3, #0]
 8008180:	691a      	ldr	r2, [r3, #16]
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	681b      	ldr	r3, [r3, #0]
 8008186:	f042 0204 	orr.w	r2, r2, #4
 800818a:	611a      	str	r2, [r3, #16]

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_READY;
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	2201      	movs	r2, #1
 8008190:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36

  /* Return function status */
  return HAL_OK;
 8008194:	2300      	movs	r3, #0
}
 8008196:	4618      	mov	r0, r3
 8008198:	3708      	adds	r7, #8
 800819a:	46bd      	mov	sp, r7
 800819c:	bd80      	pop	{r7, pc}

0800819e <HAL_LPTIM_IRQHandler>:
  * @brief  Handle LPTIM interrupt request.
  * @param  hlptim LPTIM handle
  * @retval None
  */
void HAL_LPTIM_IRQHandler(LPTIM_HandleTypeDef *hlptim)
{
 800819e:	b580      	push	{r7, lr}
 80081a0:	b082      	sub	sp, #8
 80081a2:	af00      	add	r7, sp, #0
 80081a4:	6078      	str	r0, [r7, #4]
  /* Compare match interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_CMPM) != RESET)
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	681b      	ldr	r3, [r3, #0]
 80081aa:	681b      	ldr	r3, [r3, #0]
 80081ac:	f003 0301 	and.w	r3, r3, #1
 80081b0:	2b01      	cmp	r3, #1
 80081b2:	d10d      	bne.n	80081d0 <HAL_LPTIM_IRQHandler+0x32>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_CMPM) != RESET)
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	681b      	ldr	r3, [r3, #0]
 80081b8:	689b      	ldr	r3, [r3, #8]
 80081ba:	f003 0301 	and.w	r3, r3, #1
 80081be:	2b01      	cmp	r3, #1
 80081c0:	d106      	bne.n	80081d0 <HAL_LPTIM_IRQHandler+0x32>
    {
      /* Clear Compare match flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMPM);
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	681b      	ldr	r3, [r3, #0]
 80081c6:	2201      	movs	r2, #1
 80081c8:	605a      	str	r2, [r3, #4]

      /* Compare match Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->CompareMatchCallback(hlptim);
#else
      HAL_LPTIM_CompareMatchCallback(hlptim);
 80081ca:	6878      	ldr	r0, [r7, #4]
 80081cc:	f000 f882 	bl	80082d4 <HAL_LPTIM_CompareMatchCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Autoreload match interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_ARRM) != RESET)
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	681b      	ldr	r3, [r3, #0]
 80081d4:	681b      	ldr	r3, [r3, #0]
 80081d6:	f003 0302 	and.w	r3, r3, #2
 80081da:	2b02      	cmp	r3, #2
 80081dc:	d10d      	bne.n	80081fa <HAL_LPTIM_IRQHandler+0x5c>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_ARRM) != RESET)
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	681b      	ldr	r3, [r3, #0]
 80081e2:	689b      	ldr	r3, [r3, #8]
 80081e4:	f003 0302 	and.w	r3, r3, #2
 80081e8:	2b02      	cmp	r3, #2
 80081ea:	d106      	bne.n	80081fa <HAL_LPTIM_IRQHandler+0x5c>
    {
      /* Clear Autoreload match flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARRM);
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	681b      	ldr	r3, [r3, #0]
 80081f0:	2202      	movs	r2, #2
 80081f2:	605a      	str	r2, [r3, #4]

      /* Autoreload match Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->AutoReloadMatchCallback(hlptim);
#else
      HAL_LPTIM_AutoReloadMatchCallback(hlptim);
 80081f4:	6878      	ldr	r0, [r7, #4]
 80081f6:	f7fa fb15 	bl	8002824 <HAL_LPTIM_AutoReloadMatchCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Trigger detected interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_EXTTRIG) != RESET)
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	681b      	ldr	r3, [r3, #0]
 80081fe:	681b      	ldr	r3, [r3, #0]
 8008200:	f003 0304 	and.w	r3, r3, #4
 8008204:	2b04      	cmp	r3, #4
 8008206:	d10d      	bne.n	8008224 <HAL_LPTIM_IRQHandler+0x86>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_EXTTRIG) != RESET)
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	681b      	ldr	r3, [r3, #0]
 800820c:	689b      	ldr	r3, [r3, #8]
 800820e:	f003 0304 	and.w	r3, r3, #4
 8008212:	2b04      	cmp	r3, #4
 8008214:	d106      	bne.n	8008224 <HAL_LPTIM_IRQHandler+0x86>
    {
      /* Clear Trigger detected flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_EXTTRIG);
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	681b      	ldr	r3, [r3, #0]
 800821a:	2204      	movs	r2, #4
 800821c:	605a      	str	r2, [r3, #4]

      /* Trigger detected callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->TriggerCallback(hlptim);
#else
      HAL_LPTIM_TriggerCallback(hlptim);
 800821e:	6878      	ldr	r0, [r7, #4]
 8008220:	f000 f862 	bl	80082e8 <HAL_LPTIM_TriggerCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Compare write interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_CMPOK) != RESET)
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	681b      	ldr	r3, [r3, #0]
 8008228:	681b      	ldr	r3, [r3, #0]
 800822a:	f003 0308 	and.w	r3, r3, #8
 800822e:	2b08      	cmp	r3, #8
 8008230:	d10d      	bne.n	800824e <HAL_LPTIM_IRQHandler+0xb0>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_CMPOK) != RESET)
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	681b      	ldr	r3, [r3, #0]
 8008236:	689b      	ldr	r3, [r3, #8]
 8008238:	f003 0308 	and.w	r3, r3, #8
 800823c:	2b08      	cmp	r3, #8
 800823e:	d106      	bne.n	800824e <HAL_LPTIM_IRQHandler+0xb0>
    {
      /* Clear Compare write flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMPOK);
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	681b      	ldr	r3, [r3, #0]
 8008244:	2208      	movs	r2, #8
 8008246:	605a      	str	r2, [r3, #4]

      /* Compare write Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->CompareWriteCallback(hlptim);
#else
      HAL_LPTIM_CompareWriteCallback(hlptim);
 8008248:	6878      	ldr	r0, [r7, #4]
 800824a:	f000 f857 	bl	80082fc <HAL_LPTIM_CompareWriteCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Autoreload write interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_ARROK) != RESET)
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	681b      	ldr	r3, [r3, #0]
 8008252:	681b      	ldr	r3, [r3, #0]
 8008254:	f003 0310 	and.w	r3, r3, #16
 8008258:	2b10      	cmp	r3, #16
 800825a:	d10d      	bne.n	8008278 <HAL_LPTIM_IRQHandler+0xda>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_ARROK) != RESET)
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	681b      	ldr	r3, [r3, #0]
 8008260:	689b      	ldr	r3, [r3, #8]
 8008262:	f003 0310 	and.w	r3, r3, #16
 8008266:	2b10      	cmp	r3, #16
 8008268:	d106      	bne.n	8008278 <HAL_LPTIM_IRQHandler+0xda>
    {
      /* Clear Autoreload write flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARROK);
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	681b      	ldr	r3, [r3, #0]
 800826e:	2210      	movs	r2, #16
 8008270:	605a      	str	r2, [r3, #4]

      /* Autoreload write Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->AutoReloadWriteCallback(hlptim);
#else
      HAL_LPTIM_AutoReloadWriteCallback(hlptim);
 8008272:	6878      	ldr	r0, [r7, #4]
 8008274:	f000 f84c 	bl	8008310 <HAL_LPTIM_AutoReloadWriteCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Direction counter changed from Down to Up interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_UP) != RESET)
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	681b      	ldr	r3, [r3, #0]
 800827c:	681b      	ldr	r3, [r3, #0]
 800827e:	f003 0320 	and.w	r3, r3, #32
 8008282:	2b20      	cmp	r3, #32
 8008284:	d10d      	bne.n	80082a2 <HAL_LPTIM_IRQHandler+0x104>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_UP) != RESET)
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	681b      	ldr	r3, [r3, #0]
 800828a:	689b      	ldr	r3, [r3, #8]
 800828c:	f003 0320 	and.w	r3, r3, #32
 8008290:	2b20      	cmp	r3, #32
 8008292:	d106      	bne.n	80082a2 <HAL_LPTIM_IRQHandler+0x104>
    {
      /* Clear Direction counter changed from Down to Up flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_UP);
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	681b      	ldr	r3, [r3, #0]
 8008298:	2220      	movs	r2, #32
 800829a:	605a      	str	r2, [r3, #4]

      /* Direction counter changed from Down to Up Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->DirectionUpCallback(hlptim);
#else
      HAL_LPTIM_DirectionUpCallback(hlptim);
 800829c:	6878      	ldr	r0, [r7, #4]
 800829e:	f000 f841 	bl	8008324 <HAL_LPTIM_DirectionUpCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }

  /* Direction counter changed from Up to Down interrupt */
  if (__HAL_LPTIM_GET_FLAG(hlptim, LPTIM_FLAG_DOWN) != RESET)
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	681b      	ldr	r3, [r3, #0]
 80082a6:	681b      	ldr	r3, [r3, #0]
 80082a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80082ac:	2b40      	cmp	r3, #64	; 0x40
 80082ae:	d10d      	bne.n	80082cc <HAL_LPTIM_IRQHandler+0x12e>
  {
    if (__HAL_LPTIM_GET_IT_SOURCE(hlptim, LPTIM_IT_DOWN) != RESET)
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	681b      	ldr	r3, [r3, #0]
 80082b4:	689b      	ldr	r3, [r3, #8]
 80082b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80082ba:	2b40      	cmp	r3, #64	; 0x40
 80082bc:	d106      	bne.n	80082cc <HAL_LPTIM_IRQHandler+0x12e>
    {
      /* Clear Direction counter changed from Up to Down flag */
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_DOWN);
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	681b      	ldr	r3, [r3, #0]
 80082c2:	2240      	movs	r2, #64	; 0x40
 80082c4:	605a      	str	r2, [r3, #4]

      /* Direction counter changed from Up to Down Callback */
#if (USE_HAL_LPTIM_REGISTER_CALLBACKS == 1)
      hlptim->DirectionDownCallback(hlptim);
#else
      HAL_LPTIM_DirectionDownCallback(hlptim);
 80082c6:	6878      	ldr	r0, [r7, #4]
 80082c8:	f000 f836 	bl	8008338 <HAL_LPTIM_DirectionDownCallback>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
    }
  }
}
 80082cc:	bf00      	nop
 80082ce:	3708      	adds	r7, #8
 80082d0:	46bd      	mov	sp, r7
 80082d2:	bd80      	pop	{r7, pc}

080082d4 <HAL_LPTIM_CompareMatchCallback>:
  * @brief  Compare match callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_CompareMatchCallback(LPTIM_HandleTypeDef *hlptim)
{
 80082d4:	b480      	push	{r7}
 80082d6:	b083      	sub	sp, #12
 80082d8:	af00      	add	r7, sp, #0
 80082da:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_CompareMatchCallback could be implemented in the user file
   */
}
 80082dc:	bf00      	nop
 80082de:	370c      	adds	r7, #12
 80082e0:	46bd      	mov	sp, r7
 80082e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082e6:	4770      	bx	lr

080082e8 <HAL_LPTIM_TriggerCallback>:
  * @brief  Trigger detected callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_TriggerCallback(LPTIM_HandleTypeDef *hlptim)
{
 80082e8:	b480      	push	{r7}
 80082ea:	b083      	sub	sp, #12
 80082ec:	af00      	add	r7, sp, #0
 80082ee:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_TriggerCallback could be implemented in the user file
   */
}
 80082f0:	bf00      	nop
 80082f2:	370c      	adds	r7, #12
 80082f4:	46bd      	mov	sp, r7
 80082f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082fa:	4770      	bx	lr

080082fc <HAL_LPTIM_CompareWriteCallback>:
  * @brief  Compare write callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_CompareWriteCallback(LPTIM_HandleTypeDef *hlptim)
{
 80082fc:	b480      	push	{r7}
 80082fe:	b083      	sub	sp, #12
 8008300:	af00      	add	r7, sp, #0
 8008302:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_CompareWriteCallback could be implemented in the user file
   */
}
 8008304:	bf00      	nop
 8008306:	370c      	adds	r7, #12
 8008308:	46bd      	mov	sp, r7
 800830a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800830e:	4770      	bx	lr

08008310 <HAL_LPTIM_AutoReloadWriteCallback>:
  * @brief  Autoreload write callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_AutoReloadWriteCallback(LPTIM_HandleTypeDef *hlptim)
{
 8008310:	b480      	push	{r7}
 8008312:	b083      	sub	sp, #12
 8008314:	af00      	add	r7, sp, #0
 8008316:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_AutoReloadWriteCallback could be implemented in the user file
   */
}
 8008318:	bf00      	nop
 800831a:	370c      	adds	r7, #12
 800831c:	46bd      	mov	sp, r7
 800831e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008322:	4770      	bx	lr

08008324 <HAL_LPTIM_DirectionUpCallback>:
  * @brief  Direction counter changed from Down to Up callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_DirectionUpCallback(LPTIM_HandleTypeDef *hlptim)
{
 8008324:	b480      	push	{r7}
 8008326:	b083      	sub	sp, #12
 8008328:	af00      	add	r7, sp, #0
 800832a:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_DirectionUpCallback could be implemented in the user file
   */
}
 800832c:	bf00      	nop
 800832e:	370c      	adds	r7, #12
 8008330:	46bd      	mov	sp, r7
 8008332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008336:	4770      	bx	lr

08008338 <HAL_LPTIM_DirectionDownCallback>:
  * @brief  Direction counter changed from Up to Down callback in non-blocking mode.
  * @param  hlptim LPTIM handle
  * @retval None
  */
__weak void HAL_LPTIM_DirectionDownCallback(LPTIM_HandleTypeDef *hlptim)
{
 8008338:	b480      	push	{r7}
 800833a:	b083      	sub	sp, #12
 800833c:	af00      	add	r7, sp, #0
 800833e:	6078      	str	r0, [r7, #4]
  UNUSED(hlptim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LPTIM_DirectionDownCallback could be implemented in the user file
   */
}
 8008340:	bf00      	nop
 8008342:	370c      	adds	r7, #12
 8008344:	46bd      	mov	sp, r7
 8008346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800834a:	4770      	bx	lr

0800834c <HAL_LPTIM_GetState>:
  * @brief  Return the LPTIM handle state.
  * @param  hlptim LPTIM handle
  * @retval HAL state
  */
HAL_LPTIM_StateTypeDef HAL_LPTIM_GetState(LPTIM_HandleTypeDef *hlptim)
{
 800834c:	b480      	push	{r7}
 800834e:	b083      	sub	sp, #12
 8008350:	af00      	add	r7, sp, #0
 8008352:	6078      	str	r0, [r7, #4]
  /* Return LPTIM handle state */
  return hlptim->State;
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 800835a:	b2db      	uxtb	r3, r3
}
 800835c:	4618      	mov	r0, r3
 800835e:	370c      	adds	r7, #12
 8008360:	46bd      	mov	sp, r7
 8008362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008366:	4770      	bx	lr

08008368 <LPTIM_WaitForFlag>:
  *                the configuration information for LPTIM module.
  * @param  flag   The lptim flag
  * @retval HAL status
  */
static HAL_StatusTypeDef LPTIM_WaitForFlag(LPTIM_HandleTypeDef *hlptim, uint32_t flag)
{
 8008368:	b480      	push	{r7}
 800836a:	b085      	sub	sp, #20
 800836c:	af00      	add	r7, sp, #0
 800836e:	6078      	str	r0, [r7, #4]
 8008370:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef result = HAL_OK;
 8008372:	2300      	movs	r3, #0
 8008374:	73fb      	strb	r3, [r7, #15]
  uint32_t count = TIMEOUT * (SystemCoreClock / 20UL / 1000UL);
 8008376:	4b12      	ldr	r3, [pc, #72]	; (80083c0 <LPTIM_WaitForFlag+0x58>)
 8008378:	681b      	ldr	r3, [r3, #0]
 800837a:	4a12      	ldr	r2, [pc, #72]	; (80083c4 <LPTIM_WaitForFlag+0x5c>)
 800837c:	fba2 2303 	umull	r2, r3, r2, r3
 8008380:	0b9b      	lsrs	r3, r3, #14
 8008382:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8008386:	fb02 f303 	mul.w	r3, r2, r3
 800838a:	60bb      	str	r3, [r7, #8]
  do
  {
    count--;
 800838c:	68bb      	ldr	r3, [r7, #8]
 800838e:	3b01      	subs	r3, #1
 8008390:	60bb      	str	r3, [r7, #8]
    if (count == 0UL)
 8008392:	68bb      	ldr	r3, [r7, #8]
 8008394:	2b00      	cmp	r3, #0
 8008396:	d101      	bne.n	800839c <LPTIM_WaitForFlag+0x34>
    {
      result = HAL_TIMEOUT;
 8008398:	2303      	movs	r3, #3
 800839a:	73fb      	strb	r3, [r7, #15]
    }
  } while ((!(__HAL_LPTIM_GET_FLAG((hlptim), (flag)))) && (count != 0UL));
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	681b      	ldr	r3, [r3, #0]
 80083a0:	681a      	ldr	r2, [r3, #0]
 80083a2:	683b      	ldr	r3, [r7, #0]
 80083a4:	4013      	ands	r3, r2
 80083a6:	683a      	ldr	r2, [r7, #0]
 80083a8:	429a      	cmp	r2, r3
 80083aa:	d002      	beq.n	80083b2 <LPTIM_WaitForFlag+0x4a>
 80083ac:	68bb      	ldr	r3, [r7, #8]
 80083ae:	2b00      	cmp	r3, #0
 80083b0:	d1ec      	bne.n	800838c <LPTIM_WaitForFlag+0x24>

  return result;
 80083b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80083b4:	4618      	mov	r0, r3
 80083b6:	3714      	adds	r7, #20
 80083b8:	46bd      	mov	sp, r7
 80083ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083be:	4770      	bx	lr
 80083c0:	20000010 	.word	0x20000010
 80083c4:	d1b71759 	.word	0xd1b71759

080083c8 <LPTIM_Disable>:
  *         Please check Errata Sheet ES0335 for more details under "MCU may remain
  *         stuck in LPTIM interrupt when entering Stop mode" section.
  * @retval None
  */
void LPTIM_Disable(LPTIM_HandleTypeDef *hlptim)
{
 80083c8:	b580      	push	{r7, lr}
 80083ca:	b08c      	sub	sp, #48	; 0x30
 80083cc:	af00      	add	r7, sp, #0
 80083ce:	6078      	str	r0, [r7, #4]
  uint32_t tmpclksource = 0;
 80083d0:	2300      	movs	r3, #0
 80083d2:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80083d4:	f3ef 8310 	mrs	r3, PRIMASK
 80083d8:	60fb      	str	r3, [r7, #12]
  return(result);
 80083da:	68fb      	ldr	r3, [r7, #12]
  uint32_t tmpARR;
  uint32_t primask_bit;
  uint32_t tmpCFGR2;

  /* Enter critical section */
  primask_bit = __get_PRIMASK();
 80083dc:	62bb      	str	r3, [r7, #40]	; 0x28
 80083de:	2301      	movs	r3, #1
 80083e0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80083e2:	693b      	ldr	r3, [r7, #16]
 80083e4:	f383 8810 	msr	PRIMASK, r3
}
 80083e8:	bf00      	nop
  __set_PRIMASK(1) ;

  /*********** Save LPTIM Config ***********/
  /* Save LPTIM source clock */
  switch ((uint32_t)hlptim->Instance)
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	681b      	ldr	r3, [r3, #0]
 80083ee:	4a81      	ldr	r2, [pc, #516]	; (80085f4 <LPTIM_Disable+0x22c>)
 80083f0:	4293      	cmp	r3, r2
 80083f2:	d02d      	beq.n	8008450 <LPTIM_Disable+0x88>
 80083f4:	4a7f      	ldr	r2, [pc, #508]	; (80085f4 <LPTIM_Disable+0x22c>)
 80083f6:	4293      	cmp	r3, r2
 80083f8:	d830      	bhi.n	800845c <LPTIM_Disable+0x94>
 80083fa:	4a7f      	ldr	r2, [pc, #508]	; (80085f8 <LPTIM_Disable+0x230>)
 80083fc:	4293      	cmp	r3, r2
 80083fe:	d021      	beq.n	8008444 <LPTIM_Disable+0x7c>
 8008400:	4a7d      	ldr	r2, [pc, #500]	; (80085f8 <LPTIM_Disable+0x230>)
 8008402:	4293      	cmp	r3, r2
 8008404:	d82a      	bhi.n	800845c <LPTIM_Disable+0x94>
 8008406:	4a7d      	ldr	r2, [pc, #500]	; (80085fc <LPTIM_Disable+0x234>)
 8008408:	4293      	cmp	r3, r2
 800840a:	d015      	beq.n	8008438 <LPTIM_Disable+0x70>
 800840c:	4a7b      	ldr	r2, [pc, #492]	; (80085fc <LPTIM_Disable+0x234>)
 800840e:	4293      	cmp	r3, r2
 8008410:	d824      	bhi.n	800845c <LPTIM_Disable+0x94>
 8008412:	4a7b      	ldr	r2, [pc, #492]	; (8008600 <LPTIM_Disable+0x238>)
 8008414:	4293      	cmp	r3, r2
 8008416:	d003      	beq.n	8008420 <LPTIM_Disable+0x58>
 8008418:	4a7a      	ldr	r2, [pc, #488]	; (8008604 <LPTIM_Disable+0x23c>)
 800841a:	4293      	cmp	r3, r2
 800841c:	d006      	beq.n	800842c <LPTIM_Disable+0x64>
    case LPTIM5_BASE:
      tmpclksource = __HAL_RCC_GET_LPTIM5_SOURCE();
      break;
#endif /* LPTIM5 */
    default:
      break;
 800841e:	e01d      	b.n	800845c <LPTIM_Disable+0x94>
      tmpclksource = __HAL_RCC_GET_LPTIM1_SOURCE();
 8008420:	4b79      	ldr	r3, [pc, #484]	; (8008608 <LPTIM_Disable+0x240>)
 8008422:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008424:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 8008428:	62fb      	str	r3, [r7, #44]	; 0x2c
      break;
 800842a:	e018      	b.n	800845e <LPTIM_Disable+0x96>
      tmpclksource = __HAL_RCC_GET_LPTIM2_SOURCE();
 800842c:	4b76      	ldr	r3, [pc, #472]	; (8008608 <LPTIM_Disable+0x240>)
 800842e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008430:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 8008434:	62fb      	str	r3, [r7, #44]	; 0x2c
      break;
 8008436:	e012      	b.n	800845e <LPTIM_Disable+0x96>
      tmpclksource = __HAL_RCC_GET_LPTIM3_SOURCE();
 8008438:	4b73      	ldr	r3, [pc, #460]	; (8008608 <LPTIM_Disable+0x240>)
 800843a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800843c:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8008440:	62fb      	str	r3, [r7, #44]	; 0x2c
      break;
 8008442:	e00c      	b.n	800845e <LPTIM_Disable+0x96>
      tmpclksource = __HAL_RCC_GET_LPTIM4_SOURCE();
 8008444:	4b70      	ldr	r3, [pc, #448]	; (8008608 <LPTIM_Disable+0x240>)
 8008446:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008448:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800844c:	62fb      	str	r3, [r7, #44]	; 0x2c
      break;
 800844e:	e006      	b.n	800845e <LPTIM_Disable+0x96>
      tmpclksource = __HAL_RCC_GET_LPTIM5_SOURCE();
 8008450:	4b6d      	ldr	r3, [pc, #436]	; (8008608 <LPTIM_Disable+0x240>)
 8008452:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008454:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8008458:	62fb      	str	r3, [r7, #44]	; 0x2c
      break;
 800845a:	e000      	b.n	800845e <LPTIM_Disable+0x96>
      break;
 800845c:	bf00      	nop
  }

  /* Save LPTIM configuration registers */
  tmpIER = hlptim->Instance->IER;
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	681b      	ldr	r3, [r3, #0]
 8008462:	689b      	ldr	r3, [r3, #8]
 8008464:	627b      	str	r3, [r7, #36]	; 0x24
  tmpCFGR = hlptim->Instance->CFGR;
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	681b      	ldr	r3, [r3, #0]
 800846a:	68db      	ldr	r3, [r3, #12]
 800846c:	623b      	str	r3, [r7, #32]
  tmpCMP = hlptim->Instance->CMP;
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	681b      	ldr	r3, [r3, #0]
 8008472:	695b      	ldr	r3, [r3, #20]
 8008474:	61fb      	str	r3, [r7, #28]
  tmpARR = hlptim->Instance->ARR;
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	681b      	ldr	r3, [r3, #0]
 800847a:	699b      	ldr	r3, [r3, #24]
 800847c:	61bb      	str	r3, [r7, #24]
  tmpCFGR2 = hlptim->Instance->CFGR2;
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	681b      	ldr	r3, [r3, #0]
 8008482:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008484:	617b      	str	r3, [r7, #20]

  /*********** Reset LPTIM ***********/
  switch ((uint32_t)hlptim->Instance)
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	681b      	ldr	r3, [r3, #0]
 800848a:	4a5a      	ldr	r2, [pc, #360]	; (80085f4 <LPTIM_Disable+0x22c>)
 800848c:	4293      	cmp	r3, r2
 800848e:	d059      	beq.n	8008544 <LPTIM_Disable+0x17c>
 8008490:	4a58      	ldr	r2, [pc, #352]	; (80085f4 <LPTIM_Disable+0x22c>)
 8008492:	4293      	cmp	r3, r2
 8008494:	d867      	bhi.n	8008566 <LPTIM_Disable+0x19e>
 8008496:	4a58      	ldr	r2, [pc, #352]	; (80085f8 <LPTIM_Disable+0x230>)
 8008498:	4293      	cmp	r3, r2
 800849a:	d042      	beq.n	8008522 <LPTIM_Disable+0x15a>
 800849c:	4a56      	ldr	r2, [pc, #344]	; (80085f8 <LPTIM_Disable+0x230>)
 800849e:	4293      	cmp	r3, r2
 80084a0:	d861      	bhi.n	8008566 <LPTIM_Disable+0x19e>
 80084a2:	4a56      	ldr	r2, [pc, #344]	; (80085fc <LPTIM_Disable+0x234>)
 80084a4:	4293      	cmp	r3, r2
 80084a6:	d02b      	beq.n	8008500 <LPTIM_Disable+0x138>
 80084a8:	4a54      	ldr	r2, [pc, #336]	; (80085fc <LPTIM_Disable+0x234>)
 80084aa:	4293      	cmp	r3, r2
 80084ac:	d85b      	bhi.n	8008566 <LPTIM_Disable+0x19e>
 80084ae:	4a54      	ldr	r2, [pc, #336]	; (8008600 <LPTIM_Disable+0x238>)
 80084b0:	4293      	cmp	r3, r2
 80084b2:	d003      	beq.n	80084bc <LPTIM_Disable+0xf4>
 80084b4:	4a53      	ldr	r2, [pc, #332]	; (8008604 <LPTIM_Disable+0x23c>)
 80084b6:	4293      	cmp	r3, r2
 80084b8:	d011      	beq.n	80084de <LPTIM_Disable+0x116>
      __HAL_RCC_LPTIM5_FORCE_RESET();
      __HAL_RCC_LPTIM5_RELEASE_RESET();
      break;
#endif /* LPTIM5 */
    default:
      break;
 80084ba:	e054      	b.n	8008566 <LPTIM_Disable+0x19e>
      __HAL_RCC_LPTIM1_FORCE_RESET();
 80084bc:	4b52      	ldr	r3, [pc, #328]	; (8008608 <LPTIM_Disable+0x240>)
 80084be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80084c2:	4a51      	ldr	r2, [pc, #324]	; (8008608 <LPTIM_Disable+0x240>)
 80084c4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80084c8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      __HAL_RCC_LPTIM1_RELEASE_RESET();
 80084cc:	4b4e      	ldr	r3, [pc, #312]	; (8008608 <LPTIM_Disable+0x240>)
 80084ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80084d2:	4a4d      	ldr	r2, [pc, #308]	; (8008608 <LPTIM_Disable+0x240>)
 80084d4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80084d8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      break;
 80084dc:	e044      	b.n	8008568 <LPTIM_Disable+0x1a0>
      __HAL_RCC_LPTIM2_FORCE_RESET();
 80084de:	4b4a      	ldr	r3, [pc, #296]	; (8008608 <LPTIM_Disable+0x240>)
 80084e0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80084e4:	4a48      	ldr	r2, [pc, #288]	; (8008608 <LPTIM_Disable+0x240>)
 80084e6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80084ea:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
      __HAL_RCC_LPTIM2_RELEASE_RESET();
 80084ee:	4b46      	ldr	r3, [pc, #280]	; (8008608 <LPTIM_Disable+0x240>)
 80084f0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80084f4:	4a44      	ldr	r2, [pc, #272]	; (8008608 <LPTIM_Disable+0x240>)
 80084f6:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80084fa:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
      break;
 80084fe:	e033      	b.n	8008568 <LPTIM_Disable+0x1a0>
      __HAL_RCC_LPTIM3_FORCE_RESET();
 8008500:	4b41      	ldr	r3, [pc, #260]	; (8008608 <LPTIM_Disable+0x240>)
 8008502:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8008506:	4a40      	ldr	r2, [pc, #256]	; (8008608 <LPTIM_Disable+0x240>)
 8008508:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800850c:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
      __HAL_RCC_LPTIM3_RELEASE_RESET();
 8008510:	4b3d      	ldr	r3, [pc, #244]	; (8008608 <LPTIM_Disable+0x240>)
 8008512:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8008516:	4a3c      	ldr	r2, [pc, #240]	; (8008608 <LPTIM_Disable+0x240>)
 8008518:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800851c:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
      break;
 8008520:	e022      	b.n	8008568 <LPTIM_Disable+0x1a0>
      __HAL_RCC_LPTIM4_FORCE_RESET();
 8008522:	4b39      	ldr	r3, [pc, #228]	; (8008608 <LPTIM_Disable+0x240>)
 8008524:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8008528:	4a37      	ldr	r2, [pc, #220]	; (8008608 <LPTIM_Disable+0x240>)
 800852a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800852e:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
      __HAL_RCC_LPTIM4_RELEASE_RESET();
 8008532:	4b35      	ldr	r3, [pc, #212]	; (8008608 <LPTIM_Disable+0x240>)
 8008534:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8008538:	4a33      	ldr	r2, [pc, #204]	; (8008608 <LPTIM_Disable+0x240>)
 800853a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800853e:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
      break;
 8008542:	e011      	b.n	8008568 <LPTIM_Disable+0x1a0>
      __HAL_RCC_LPTIM5_FORCE_RESET();
 8008544:	4b30      	ldr	r3, [pc, #192]	; (8008608 <LPTIM_Disable+0x240>)
 8008546:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800854a:	4a2f      	ldr	r2, [pc, #188]	; (8008608 <LPTIM_Disable+0x240>)
 800854c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8008550:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
      __HAL_RCC_LPTIM5_RELEASE_RESET();
 8008554:	4b2c      	ldr	r3, [pc, #176]	; (8008608 <LPTIM_Disable+0x240>)
 8008556:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800855a:	4a2b      	ldr	r2, [pc, #172]	; (8008608 <LPTIM_Disable+0x240>)
 800855c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008560:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
      break;
 8008564:	e000      	b.n	8008568 <LPTIM_Disable+0x1a0>
      break;
 8008566:	bf00      	nop
  }

  /*********** Restore LPTIM Config ***********/
  if ((tmpCMP != 0UL) || (tmpARR != 0UL))
 8008568:	69fb      	ldr	r3, [r7, #28]
 800856a:	2b00      	cmp	r3, #0
 800856c:	d103      	bne.n	8008576 <LPTIM_Disable+0x1ae>
 800856e:	69bb      	ldr	r3, [r7, #24]
 8008570:	2b00      	cmp	r3, #0
 8008572:	f000 80d1 	beq.w	8008718 <LPTIM_Disable+0x350>
  {
    /* Force LPTIM source kernel clock from APB */
    switch ((uint32_t)hlptim->Instance)
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	681b      	ldr	r3, [r3, #0]
 800857a:	4a1e      	ldr	r2, [pc, #120]	; (80085f4 <LPTIM_Disable+0x22c>)
 800857c:	4293      	cmp	r3, r2
 800857e:	d031      	beq.n	80085e4 <LPTIM_Disable+0x21c>
 8008580:	4a1c      	ldr	r2, [pc, #112]	; (80085f4 <LPTIM_Disable+0x22c>)
 8008582:	4293      	cmp	r3, r2
 8008584:	d842      	bhi.n	800860c <LPTIM_Disable+0x244>
 8008586:	4a1c      	ldr	r2, [pc, #112]	; (80085f8 <LPTIM_Disable+0x230>)
 8008588:	4293      	cmp	r3, r2
 800858a:	d024      	beq.n	80085d6 <LPTIM_Disable+0x20e>
 800858c:	4a1a      	ldr	r2, [pc, #104]	; (80085f8 <LPTIM_Disable+0x230>)
 800858e:	4293      	cmp	r3, r2
 8008590:	d83c      	bhi.n	800860c <LPTIM_Disable+0x244>
 8008592:	4a1a      	ldr	r2, [pc, #104]	; (80085fc <LPTIM_Disable+0x234>)
 8008594:	4293      	cmp	r3, r2
 8008596:	d017      	beq.n	80085c8 <LPTIM_Disable+0x200>
 8008598:	4a18      	ldr	r2, [pc, #96]	; (80085fc <LPTIM_Disable+0x234>)
 800859a:	4293      	cmp	r3, r2
 800859c:	d836      	bhi.n	800860c <LPTIM_Disable+0x244>
 800859e:	4a18      	ldr	r2, [pc, #96]	; (8008600 <LPTIM_Disable+0x238>)
 80085a0:	4293      	cmp	r3, r2
 80085a2:	d003      	beq.n	80085ac <LPTIM_Disable+0x1e4>
 80085a4:	4a17      	ldr	r2, [pc, #92]	; (8008604 <LPTIM_Disable+0x23c>)
 80085a6:	4293      	cmp	r3, r2
 80085a8:	d007      	beq.n	80085ba <LPTIM_Disable+0x1f2>
      case LPTIM5_BASE:
        __HAL_RCC_LPTIM5_CONFIG(RCC_LPTIM5CLKSOURCE_D3PCLK1);
        break;
#endif /* LPTIM5 */
      default:
        break;
 80085aa:	e02f      	b.n	800860c <LPTIM_Disable+0x244>
        __HAL_RCC_LPTIM1_CONFIG(RCC_LPTIM1CLKSOURCE_D2PCLK1);
 80085ac:	4b16      	ldr	r3, [pc, #88]	; (8008608 <LPTIM_Disable+0x240>)
 80085ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80085b0:	4a15      	ldr	r2, [pc, #84]	; (8008608 <LPTIM_Disable+0x240>)
 80085b2:	f023 43e0 	bic.w	r3, r3, #1879048192	; 0x70000000
 80085b6:	6553      	str	r3, [r2, #84]	; 0x54
        break;
 80085b8:	e029      	b.n	800860e <LPTIM_Disable+0x246>
        __HAL_RCC_LPTIM2_CONFIG(RCC_LPTIM2CLKSOURCE_D3PCLK1);
 80085ba:	4b13      	ldr	r3, [pc, #76]	; (8008608 <LPTIM_Disable+0x240>)
 80085bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80085be:	4a12      	ldr	r2, [pc, #72]	; (8008608 <LPTIM_Disable+0x240>)
 80085c0:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 80085c4:	6593      	str	r3, [r2, #88]	; 0x58
        break;
 80085c6:	e022      	b.n	800860e <LPTIM_Disable+0x246>
        __HAL_RCC_LPTIM3_CONFIG(RCC_LPTIM3CLKSOURCE_D3PCLK1);
 80085c8:	4b0f      	ldr	r3, [pc, #60]	; (8008608 <LPTIM_Disable+0x240>)
 80085ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80085cc:	4a0e      	ldr	r2, [pc, #56]	; (8008608 <LPTIM_Disable+0x240>)
 80085ce:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 80085d2:	6593      	str	r3, [r2, #88]	; 0x58
        break;
 80085d4:	e01b      	b.n	800860e <LPTIM_Disable+0x246>
        __HAL_RCC_LPTIM4_CONFIG(RCC_LPTIM4CLKSOURCE_D3PCLK1);
 80085d6:	4b0c      	ldr	r3, [pc, #48]	; (8008608 <LPTIM_Disable+0x240>)
 80085d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80085da:	4a0b      	ldr	r2, [pc, #44]	; (8008608 <LPTIM_Disable+0x240>)
 80085dc:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 80085e0:	6593      	str	r3, [r2, #88]	; 0x58
        break;
 80085e2:	e014      	b.n	800860e <LPTIM_Disable+0x246>
        __HAL_RCC_LPTIM5_CONFIG(RCC_LPTIM5CLKSOURCE_D3PCLK1);
 80085e4:	4b08      	ldr	r3, [pc, #32]	; (8008608 <LPTIM_Disable+0x240>)
 80085e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80085e8:	4a07      	ldr	r2, [pc, #28]	; (8008608 <LPTIM_Disable+0x240>)
 80085ea:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 80085ee:	6593      	str	r3, [r2, #88]	; 0x58
        break;
 80085f0:	e00d      	b.n	800860e <LPTIM_Disable+0x246>
 80085f2:	bf00      	nop
 80085f4:	58003000 	.word	0x58003000
 80085f8:	58002c00 	.word	0x58002c00
 80085fc:	58002800 	.word	0x58002800
 8008600:	40002400 	.word	0x40002400
 8008604:	58002400 	.word	0x58002400
 8008608:	58024400 	.word	0x58024400
        break;
 800860c:	bf00      	nop
    }

    if (tmpCMP != 0UL)
 800860e:	69fb      	ldr	r3, [r7, #28]
 8008610:	2b00      	cmp	r3, #0
 8008612:	d01a      	beq.n	800864a <LPTIM_Disable+0x282>
    {
      /* Restore CMP register (LPTIM should be enabled first) */
      hlptim->Instance->CR |= LPTIM_CR_ENABLE;
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	681b      	ldr	r3, [r3, #0]
 8008618:	691a      	ldr	r2, [r3, #16]
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	681b      	ldr	r3, [r3, #0]
 800861e:	f042 0201 	orr.w	r2, r2, #1
 8008622:	611a      	str	r2, [r3, #16]
      hlptim->Instance->CMP = tmpCMP;
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	681b      	ldr	r3, [r3, #0]
 8008628:	69fa      	ldr	r2, [r7, #28]
 800862a:	615a      	str	r2, [r3, #20]

      /* Wait for the completion of the write operation to the LPTIM_CMP register */
      if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_CMPOK) == HAL_TIMEOUT)
 800862c:	2108      	movs	r1, #8
 800862e:	6878      	ldr	r0, [r7, #4]
 8008630:	f7ff fe9a 	bl	8008368 <LPTIM_WaitForFlag>
 8008634:	4603      	mov	r3, r0
 8008636:	2b03      	cmp	r3, #3
 8008638:	d103      	bne.n	8008642 <LPTIM_Disable+0x27a>
      {
        hlptim->State = HAL_LPTIM_STATE_TIMEOUT;
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	2203      	movs	r2, #3
 800863e:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
      }
      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_CMPOK);
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	681b      	ldr	r3, [r3, #0]
 8008646:	2208      	movs	r2, #8
 8008648:	605a      	str	r2, [r3, #4]
    }

    if (tmpARR != 0UL)
 800864a:	69bb      	ldr	r3, [r7, #24]
 800864c:	2b00      	cmp	r3, #0
 800864e:	d01a      	beq.n	8008686 <LPTIM_Disable+0x2be>
    {
      /* Restore ARR register (LPTIM should be enabled first) */
      hlptim->Instance->CR |= LPTIM_CR_ENABLE;
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	681b      	ldr	r3, [r3, #0]
 8008654:	691a      	ldr	r2, [r3, #16]
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	681b      	ldr	r3, [r3, #0]
 800865a:	f042 0201 	orr.w	r2, r2, #1
 800865e:	611a      	str	r2, [r3, #16]
      hlptim->Instance->ARR = tmpARR;
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	681b      	ldr	r3, [r3, #0]
 8008664:	69ba      	ldr	r2, [r7, #24]
 8008666:	619a      	str	r2, [r3, #24]

      /* Wait for the completion of the write operation to the LPTIM_ARR register */
      if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_ARROK) == HAL_TIMEOUT)
 8008668:	2110      	movs	r1, #16
 800866a:	6878      	ldr	r0, [r7, #4]
 800866c:	f7ff fe7c 	bl	8008368 <LPTIM_WaitForFlag>
 8008670:	4603      	mov	r3, r0
 8008672:	2b03      	cmp	r3, #3
 8008674:	d103      	bne.n	800867e <LPTIM_Disable+0x2b6>
      {
        hlptim->State = HAL_LPTIM_STATE_TIMEOUT;
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	2203      	movs	r2, #3
 800867a:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
      }

      __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARROK);
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	681b      	ldr	r3, [r3, #0]
 8008682:	2210      	movs	r2, #16
 8008684:	605a      	str	r2, [r3, #4]
    }

    /* Restore LPTIM source kernel clock */
    switch ((uint32_t)hlptim->Instance)
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	681b      	ldr	r3, [r3, #0]
 800868a:	4a32      	ldr	r2, [pc, #200]	; (8008754 <LPTIM_Disable+0x38c>)
 800868c:	4293      	cmp	r3, r2
 800868e:	d039      	beq.n	8008704 <LPTIM_Disable+0x33c>
 8008690:	4a30      	ldr	r2, [pc, #192]	; (8008754 <LPTIM_Disable+0x38c>)
 8008692:	4293      	cmp	r3, r2
 8008694:	d83f      	bhi.n	8008716 <LPTIM_Disable+0x34e>
 8008696:	4a30      	ldr	r2, [pc, #192]	; (8008758 <LPTIM_Disable+0x390>)
 8008698:	4293      	cmp	r3, r2
 800869a:	d02a      	beq.n	80086f2 <LPTIM_Disable+0x32a>
 800869c:	4a2e      	ldr	r2, [pc, #184]	; (8008758 <LPTIM_Disable+0x390>)
 800869e:	4293      	cmp	r3, r2
 80086a0:	d839      	bhi.n	8008716 <LPTIM_Disable+0x34e>
 80086a2:	4a2e      	ldr	r2, [pc, #184]	; (800875c <LPTIM_Disable+0x394>)
 80086a4:	4293      	cmp	r3, r2
 80086a6:	d01b      	beq.n	80086e0 <LPTIM_Disable+0x318>
 80086a8:	4a2c      	ldr	r2, [pc, #176]	; (800875c <LPTIM_Disable+0x394>)
 80086aa:	4293      	cmp	r3, r2
 80086ac:	d833      	bhi.n	8008716 <LPTIM_Disable+0x34e>
 80086ae:	4a2c      	ldr	r2, [pc, #176]	; (8008760 <LPTIM_Disable+0x398>)
 80086b0:	4293      	cmp	r3, r2
 80086b2:	d003      	beq.n	80086bc <LPTIM_Disable+0x2f4>
 80086b4:	4a2b      	ldr	r2, [pc, #172]	; (8008764 <LPTIM_Disable+0x39c>)
 80086b6:	4293      	cmp	r3, r2
 80086b8:	d009      	beq.n	80086ce <LPTIM_Disable+0x306>
      case LPTIM5_BASE:
        __HAL_RCC_LPTIM5_CONFIG(tmpclksource);
        break;
#endif /* LPTIM5 */
      default:
        break;
 80086ba:	e02c      	b.n	8008716 <LPTIM_Disable+0x34e>
        __HAL_RCC_LPTIM1_CONFIG(tmpclksource);
 80086bc:	4b2a      	ldr	r3, [pc, #168]	; (8008768 <LPTIM_Disable+0x3a0>)
 80086be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80086c0:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 80086c4:	4928      	ldr	r1, [pc, #160]	; (8008768 <LPTIM_Disable+0x3a0>)
 80086c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80086c8:	4313      	orrs	r3, r2
 80086ca:	654b      	str	r3, [r1, #84]	; 0x54
        break;
 80086cc:	e024      	b.n	8008718 <LPTIM_Disable+0x350>
        __HAL_RCC_LPTIM2_CONFIG(tmpclksource);
 80086ce:	4b26      	ldr	r3, [pc, #152]	; (8008768 <LPTIM_Disable+0x3a0>)
 80086d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80086d2:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80086d6:	4924      	ldr	r1, [pc, #144]	; (8008768 <LPTIM_Disable+0x3a0>)
 80086d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80086da:	4313      	orrs	r3, r2
 80086dc:	658b      	str	r3, [r1, #88]	; 0x58
        break;
 80086de:	e01b      	b.n	8008718 <LPTIM_Disable+0x350>
        __HAL_RCC_LPTIM3_CONFIG(tmpclksource);
 80086e0:	4b21      	ldr	r3, [pc, #132]	; (8008768 <LPTIM_Disable+0x3a0>)
 80086e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80086e4:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80086e8:	491f      	ldr	r1, [pc, #124]	; (8008768 <LPTIM_Disable+0x3a0>)
 80086ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80086ec:	4313      	orrs	r3, r2
 80086ee:	658b      	str	r3, [r1, #88]	; 0x58
        break;
 80086f0:	e012      	b.n	8008718 <LPTIM_Disable+0x350>
        __HAL_RCC_LPTIM4_CONFIG(tmpclksource);
 80086f2:	4b1d      	ldr	r3, [pc, #116]	; (8008768 <LPTIM_Disable+0x3a0>)
 80086f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80086f6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80086fa:	491b      	ldr	r1, [pc, #108]	; (8008768 <LPTIM_Disable+0x3a0>)
 80086fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80086fe:	4313      	orrs	r3, r2
 8008700:	658b      	str	r3, [r1, #88]	; 0x58
        break;
 8008702:	e009      	b.n	8008718 <LPTIM_Disable+0x350>
        __HAL_RCC_LPTIM5_CONFIG(tmpclksource);
 8008704:	4b18      	ldr	r3, [pc, #96]	; (8008768 <LPTIM_Disable+0x3a0>)
 8008706:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008708:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800870c:	4916      	ldr	r1, [pc, #88]	; (8008768 <LPTIM_Disable+0x3a0>)
 800870e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008710:	4313      	orrs	r3, r2
 8008712:	658b      	str	r3, [r1, #88]	; 0x58
        break;
 8008714:	e000      	b.n	8008718 <LPTIM_Disable+0x350>
        break;
 8008716:	bf00      	nop
    }
  }

  /* Restore configuration registers (LPTIM should be disabled first) */
  hlptim->Instance->CR &= ~(LPTIM_CR_ENABLE);
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	681b      	ldr	r3, [r3, #0]
 800871c:	691a      	ldr	r2, [r3, #16]
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	681b      	ldr	r3, [r3, #0]
 8008722:	f022 0201 	bic.w	r2, r2, #1
 8008726:	611a      	str	r2, [r3, #16]
  hlptim->Instance->IER = tmpIER;
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	681b      	ldr	r3, [r3, #0]
 800872c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800872e:	609a      	str	r2, [r3, #8]
  hlptim->Instance->CFGR = tmpCFGR;
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	681b      	ldr	r3, [r3, #0]
 8008734:	6a3a      	ldr	r2, [r7, #32]
 8008736:	60da      	str	r2, [r3, #12]
  hlptim->Instance->CFGR2 = tmpCFGR2;
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	681b      	ldr	r3, [r3, #0]
 800873c:	697a      	ldr	r2, [r7, #20]
 800873e:	625a      	str	r2, [r3, #36]	; 0x24
 8008740:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008742:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008744:	68bb      	ldr	r3, [r7, #8]
 8008746:	f383 8810 	msr	PRIMASK, r3
}
 800874a:	bf00      	nop

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);
}
 800874c:	bf00      	nop
 800874e:	3730      	adds	r7, #48	; 0x30
 8008750:	46bd      	mov	sp, r7
 8008752:	bd80      	pop	{r7, pc}
 8008754:	58003000 	.word	0x58003000
 8008758:	58002c00 	.word	0x58002c00
 800875c:	58002800 	.word	0x58002800
 8008760:	40002400 	.word	0x40002400
 8008764:	58002400 	.word	0x58002400
 8008768:	58024400 	.word	0x58024400

0800876c <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 2, 3, ..31 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None.
  */
void HAL_PWR_EnableBkUpAccess (void)
{
 800876c:	b480      	push	{r7}
 800876e:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT (PWR->CR1, PWR_CR1_DBP);
 8008770:	4b05      	ldr	r3, [pc, #20]	; (8008788 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8008772:	681b      	ldr	r3, [r3, #0]
 8008774:	4a04      	ldr	r2, [pc, #16]	; (8008788 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8008776:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800877a:	6013      	str	r3, [r2, #0]
}
 800877c:	bf00      	nop
 800877e:	46bd      	mov	sp, r7
 8008780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008784:	4770      	bx	lr
 8008786:	bf00      	nop
 8008788:	58024800 	.word	0x58024800

0800878c <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800878c:	b580      	push	{r7, lr}
 800878e:	b084      	sub	sp, #16
 8008790:	af00      	add	r7, sp, #0
 8008792:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8008794:	4b19      	ldr	r3, [pc, #100]	; (80087fc <HAL_PWREx_ConfigSupply+0x70>)
 8008796:	68db      	ldr	r3, [r3, #12]
 8008798:	f003 0304 	and.w	r3, r3, #4
 800879c:	2b04      	cmp	r3, #4
 800879e:	d00a      	beq.n	80087b6 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80087a0:	4b16      	ldr	r3, [pc, #88]	; (80087fc <HAL_PWREx_ConfigSupply+0x70>)
 80087a2:	68db      	ldr	r3, [r3, #12]
 80087a4:	f003 0307 	and.w	r3, r3, #7
 80087a8:	687a      	ldr	r2, [r7, #4]
 80087aa:	429a      	cmp	r2, r3
 80087ac:	d001      	beq.n	80087b2 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80087ae:	2301      	movs	r3, #1
 80087b0:	e01f      	b.n	80087f2 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80087b2:	2300      	movs	r3, #0
 80087b4:	e01d      	b.n	80087f2 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80087b6:	4b11      	ldr	r3, [pc, #68]	; (80087fc <HAL_PWREx_ConfigSupply+0x70>)
 80087b8:	68db      	ldr	r3, [r3, #12]
 80087ba:	f023 0207 	bic.w	r2, r3, #7
 80087be:	490f      	ldr	r1, [pc, #60]	; (80087fc <HAL_PWREx_ConfigSupply+0x70>)
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	4313      	orrs	r3, r2
 80087c4:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80087c6:	f7fa fafd 	bl	8002dc4 <HAL_GetTick>
 80087ca:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80087cc:	e009      	b.n	80087e2 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80087ce:	f7fa faf9 	bl	8002dc4 <HAL_GetTick>
 80087d2:	4602      	mov	r2, r0
 80087d4:	68fb      	ldr	r3, [r7, #12]
 80087d6:	1ad3      	subs	r3, r2, r3
 80087d8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80087dc:	d901      	bls.n	80087e2 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 80087de:	2301      	movs	r3, #1
 80087e0:	e007      	b.n	80087f2 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 80087e2:	4b06      	ldr	r3, [pc, #24]	; (80087fc <HAL_PWREx_ConfigSupply+0x70>)
 80087e4:	685b      	ldr	r3, [r3, #4]
 80087e6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80087ea:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80087ee:	d1ee      	bne.n	80087ce <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80087f0:	2300      	movs	r3, #0
}
 80087f2:	4618      	mov	r0, r3
 80087f4:	3710      	adds	r7, #16
 80087f6:	46bd      	mov	sp, r7
 80087f8:	bd80      	pop	{r7, pc}
 80087fa:	bf00      	nop
 80087fc:	58024800 	.word	0x58024800

08008800 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008800:	b580      	push	{r7, lr}
 8008802:	b08c      	sub	sp, #48	; 0x30
 8008804:	af00      	add	r7, sp, #0
 8008806:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	2b00      	cmp	r3, #0
 800880c:	d102      	bne.n	8008814 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800880e:	2301      	movs	r3, #1
 8008810:	f000 bc48 	b.w	80090a4 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	681b      	ldr	r3, [r3, #0]
 8008818:	f003 0301 	and.w	r3, r3, #1
 800881c:	2b00      	cmp	r3, #0
 800881e:	f000 8088 	beq.w	8008932 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008822:	4b99      	ldr	r3, [pc, #612]	; (8008a88 <HAL_RCC_OscConfig+0x288>)
 8008824:	691b      	ldr	r3, [r3, #16]
 8008826:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800882a:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800882c:	4b96      	ldr	r3, [pc, #600]	; (8008a88 <HAL_RCC_OscConfig+0x288>)
 800882e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008830:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8008832:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008834:	2b10      	cmp	r3, #16
 8008836:	d007      	beq.n	8008848 <HAL_RCC_OscConfig+0x48>
 8008838:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800883a:	2b18      	cmp	r3, #24
 800883c:	d111      	bne.n	8008862 <HAL_RCC_OscConfig+0x62>
 800883e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008840:	f003 0303 	and.w	r3, r3, #3
 8008844:	2b02      	cmp	r3, #2
 8008846:	d10c      	bne.n	8008862 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008848:	4b8f      	ldr	r3, [pc, #572]	; (8008a88 <HAL_RCC_OscConfig+0x288>)
 800884a:	681b      	ldr	r3, [r3, #0]
 800884c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008850:	2b00      	cmp	r3, #0
 8008852:	d06d      	beq.n	8008930 <HAL_RCC_OscConfig+0x130>
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	685b      	ldr	r3, [r3, #4]
 8008858:	2b00      	cmp	r3, #0
 800885a:	d169      	bne.n	8008930 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800885c:	2301      	movs	r3, #1
 800885e:	f000 bc21 	b.w	80090a4 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	685b      	ldr	r3, [r3, #4]
 8008866:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800886a:	d106      	bne.n	800887a <HAL_RCC_OscConfig+0x7a>
 800886c:	4b86      	ldr	r3, [pc, #536]	; (8008a88 <HAL_RCC_OscConfig+0x288>)
 800886e:	681b      	ldr	r3, [r3, #0]
 8008870:	4a85      	ldr	r2, [pc, #532]	; (8008a88 <HAL_RCC_OscConfig+0x288>)
 8008872:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008876:	6013      	str	r3, [r2, #0]
 8008878:	e02e      	b.n	80088d8 <HAL_RCC_OscConfig+0xd8>
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	685b      	ldr	r3, [r3, #4]
 800887e:	2b00      	cmp	r3, #0
 8008880:	d10c      	bne.n	800889c <HAL_RCC_OscConfig+0x9c>
 8008882:	4b81      	ldr	r3, [pc, #516]	; (8008a88 <HAL_RCC_OscConfig+0x288>)
 8008884:	681b      	ldr	r3, [r3, #0]
 8008886:	4a80      	ldr	r2, [pc, #512]	; (8008a88 <HAL_RCC_OscConfig+0x288>)
 8008888:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800888c:	6013      	str	r3, [r2, #0]
 800888e:	4b7e      	ldr	r3, [pc, #504]	; (8008a88 <HAL_RCC_OscConfig+0x288>)
 8008890:	681b      	ldr	r3, [r3, #0]
 8008892:	4a7d      	ldr	r2, [pc, #500]	; (8008a88 <HAL_RCC_OscConfig+0x288>)
 8008894:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008898:	6013      	str	r3, [r2, #0]
 800889a:	e01d      	b.n	80088d8 <HAL_RCC_OscConfig+0xd8>
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	685b      	ldr	r3, [r3, #4]
 80088a0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80088a4:	d10c      	bne.n	80088c0 <HAL_RCC_OscConfig+0xc0>
 80088a6:	4b78      	ldr	r3, [pc, #480]	; (8008a88 <HAL_RCC_OscConfig+0x288>)
 80088a8:	681b      	ldr	r3, [r3, #0]
 80088aa:	4a77      	ldr	r2, [pc, #476]	; (8008a88 <HAL_RCC_OscConfig+0x288>)
 80088ac:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80088b0:	6013      	str	r3, [r2, #0]
 80088b2:	4b75      	ldr	r3, [pc, #468]	; (8008a88 <HAL_RCC_OscConfig+0x288>)
 80088b4:	681b      	ldr	r3, [r3, #0]
 80088b6:	4a74      	ldr	r2, [pc, #464]	; (8008a88 <HAL_RCC_OscConfig+0x288>)
 80088b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80088bc:	6013      	str	r3, [r2, #0]
 80088be:	e00b      	b.n	80088d8 <HAL_RCC_OscConfig+0xd8>
 80088c0:	4b71      	ldr	r3, [pc, #452]	; (8008a88 <HAL_RCC_OscConfig+0x288>)
 80088c2:	681b      	ldr	r3, [r3, #0]
 80088c4:	4a70      	ldr	r2, [pc, #448]	; (8008a88 <HAL_RCC_OscConfig+0x288>)
 80088c6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80088ca:	6013      	str	r3, [r2, #0]
 80088cc:	4b6e      	ldr	r3, [pc, #440]	; (8008a88 <HAL_RCC_OscConfig+0x288>)
 80088ce:	681b      	ldr	r3, [r3, #0]
 80088d0:	4a6d      	ldr	r2, [pc, #436]	; (8008a88 <HAL_RCC_OscConfig+0x288>)
 80088d2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80088d6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	685b      	ldr	r3, [r3, #4]
 80088dc:	2b00      	cmp	r3, #0
 80088de:	d013      	beq.n	8008908 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80088e0:	f7fa fa70 	bl	8002dc4 <HAL_GetTick>
 80088e4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80088e6:	e008      	b.n	80088fa <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80088e8:	f7fa fa6c 	bl	8002dc4 <HAL_GetTick>
 80088ec:	4602      	mov	r2, r0
 80088ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088f0:	1ad3      	subs	r3, r2, r3
 80088f2:	2b64      	cmp	r3, #100	; 0x64
 80088f4:	d901      	bls.n	80088fa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80088f6:	2303      	movs	r3, #3
 80088f8:	e3d4      	b.n	80090a4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80088fa:	4b63      	ldr	r3, [pc, #396]	; (8008a88 <HAL_RCC_OscConfig+0x288>)
 80088fc:	681b      	ldr	r3, [r3, #0]
 80088fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008902:	2b00      	cmp	r3, #0
 8008904:	d0f0      	beq.n	80088e8 <HAL_RCC_OscConfig+0xe8>
 8008906:	e014      	b.n	8008932 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008908:	f7fa fa5c 	bl	8002dc4 <HAL_GetTick>
 800890c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800890e:	e008      	b.n	8008922 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008910:	f7fa fa58 	bl	8002dc4 <HAL_GetTick>
 8008914:	4602      	mov	r2, r0
 8008916:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008918:	1ad3      	subs	r3, r2, r3
 800891a:	2b64      	cmp	r3, #100	; 0x64
 800891c:	d901      	bls.n	8008922 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800891e:	2303      	movs	r3, #3
 8008920:	e3c0      	b.n	80090a4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8008922:	4b59      	ldr	r3, [pc, #356]	; (8008a88 <HAL_RCC_OscConfig+0x288>)
 8008924:	681b      	ldr	r3, [r3, #0]
 8008926:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800892a:	2b00      	cmp	r3, #0
 800892c:	d1f0      	bne.n	8008910 <HAL_RCC_OscConfig+0x110>
 800892e:	e000      	b.n	8008932 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008930:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	681b      	ldr	r3, [r3, #0]
 8008936:	f003 0302 	and.w	r3, r3, #2
 800893a:	2b00      	cmp	r3, #0
 800893c:	f000 80ca 	beq.w	8008ad4 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008940:	4b51      	ldr	r3, [pc, #324]	; (8008a88 <HAL_RCC_OscConfig+0x288>)
 8008942:	691b      	ldr	r3, [r3, #16]
 8008944:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008948:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800894a:	4b4f      	ldr	r3, [pc, #316]	; (8008a88 <HAL_RCC_OscConfig+0x288>)
 800894c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800894e:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8008950:	6a3b      	ldr	r3, [r7, #32]
 8008952:	2b00      	cmp	r3, #0
 8008954:	d007      	beq.n	8008966 <HAL_RCC_OscConfig+0x166>
 8008956:	6a3b      	ldr	r3, [r7, #32]
 8008958:	2b18      	cmp	r3, #24
 800895a:	d156      	bne.n	8008a0a <HAL_RCC_OscConfig+0x20a>
 800895c:	69fb      	ldr	r3, [r7, #28]
 800895e:	f003 0303 	and.w	r3, r3, #3
 8008962:	2b00      	cmp	r3, #0
 8008964:	d151      	bne.n	8008a0a <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008966:	4b48      	ldr	r3, [pc, #288]	; (8008a88 <HAL_RCC_OscConfig+0x288>)
 8008968:	681b      	ldr	r3, [r3, #0]
 800896a:	f003 0304 	and.w	r3, r3, #4
 800896e:	2b00      	cmp	r3, #0
 8008970:	d005      	beq.n	800897e <HAL_RCC_OscConfig+0x17e>
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	68db      	ldr	r3, [r3, #12]
 8008976:	2b00      	cmp	r3, #0
 8008978:	d101      	bne.n	800897e <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 800897a:	2301      	movs	r3, #1
 800897c:	e392      	b.n	80090a4 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800897e:	4b42      	ldr	r3, [pc, #264]	; (8008a88 <HAL_RCC_OscConfig+0x288>)
 8008980:	681b      	ldr	r3, [r3, #0]
 8008982:	f023 0219 	bic.w	r2, r3, #25
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	68db      	ldr	r3, [r3, #12]
 800898a:	493f      	ldr	r1, [pc, #252]	; (8008a88 <HAL_RCC_OscConfig+0x288>)
 800898c:	4313      	orrs	r3, r2
 800898e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008990:	f7fa fa18 	bl	8002dc4 <HAL_GetTick>
 8008994:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008996:	e008      	b.n	80089aa <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008998:	f7fa fa14 	bl	8002dc4 <HAL_GetTick>
 800899c:	4602      	mov	r2, r0
 800899e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089a0:	1ad3      	subs	r3, r2, r3
 80089a2:	2b02      	cmp	r3, #2
 80089a4:	d901      	bls.n	80089aa <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80089a6:	2303      	movs	r3, #3
 80089a8:	e37c      	b.n	80090a4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80089aa:	4b37      	ldr	r3, [pc, #220]	; (8008a88 <HAL_RCC_OscConfig+0x288>)
 80089ac:	681b      	ldr	r3, [r3, #0]
 80089ae:	f003 0304 	and.w	r3, r3, #4
 80089b2:	2b00      	cmp	r3, #0
 80089b4:	d0f0      	beq.n	8008998 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80089b6:	f7fa fa35 	bl	8002e24 <HAL_GetREVID>
 80089ba:	4603      	mov	r3, r0
 80089bc:	f241 0203 	movw	r2, #4099	; 0x1003
 80089c0:	4293      	cmp	r3, r2
 80089c2:	d817      	bhi.n	80089f4 <HAL_RCC_OscConfig+0x1f4>
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	691b      	ldr	r3, [r3, #16]
 80089c8:	2b40      	cmp	r3, #64	; 0x40
 80089ca:	d108      	bne.n	80089de <HAL_RCC_OscConfig+0x1de>
 80089cc:	4b2e      	ldr	r3, [pc, #184]	; (8008a88 <HAL_RCC_OscConfig+0x288>)
 80089ce:	685b      	ldr	r3, [r3, #4]
 80089d0:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80089d4:	4a2c      	ldr	r2, [pc, #176]	; (8008a88 <HAL_RCC_OscConfig+0x288>)
 80089d6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80089da:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80089dc:	e07a      	b.n	8008ad4 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80089de:	4b2a      	ldr	r3, [pc, #168]	; (8008a88 <HAL_RCC_OscConfig+0x288>)
 80089e0:	685b      	ldr	r3, [r3, #4]
 80089e2:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	691b      	ldr	r3, [r3, #16]
 80089ea:	031b      	lsls	r3, r3, #12
 80089ec:	4926      	ldr	r1, [pc, #152]	; (8008a88 <HAL_RCC_OscConfig+0x288>)
 80089ee:	4313      	orrs	r3, r2
 80089f0:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80089f2:	e06f      	b.n	8008ad4 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80089f4:	4b24      	ldr	r3, [pc, #144]	; (8008a88 <HAL_RCC_OscConfig+0x288>)
 80089f6:	685b      	ldr	r3, [r3, #4]
 80089f8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80089fc:	687b      	ldr	r3, [r7, #4]
 80089fe:	691b      	ldr	r3, [r3, #16]
 8008a00:	061b      	lsls	r3, r3, #24
 8008a02:	4921      	ldr	r1, [pc, #132]	; (8008a88 <HAL_RCC_OscConfig+0x288>)
 8008a04:	4313      	orrs	r3, r2
 8008a06:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008a08:	e064      	b.n	8008ad4 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	68db      	ldr	r3, [r3, #12]
 8008a0e:	2b00      	cmp	r3, #0
 8008a10:	d047      	beq.n	8008aa2 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8008a12:	4b1d      	ldr	r3, [pc, #116]	; (8008a88 <HAL_RCC_OscConfig+0x288>)
 8008a14:	681b      	ldr	r3, [r3, #0]
 8008a16:	f023 0219 	bic.w	r2, r3, #25
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	68db      	ldr	r3, [r3, #12]
 8008a1e:	491a      	ldr	r1, [pc, #104]	; (8008a88 <HAL_RCC_OscConfig+0x288>)
 8008a20:	4313      	orrs	r3, r2
 8008a22:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008a24:	f7fa f9ce 	bl	8002dc4 <HAL_GetTick>
 8008a28:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008a2a:	e008      	b.n	8008a3e <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008a2c:	f7fa f9ca 	bl	8002dc4 <HAL_GetTick>
 8008a30:	4602      	mov	r2, r0
 8008a32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a34:	1ad3      	subs	r3, r2, r3
 8008a36:	2b02      	cmp	r3, #2
 8008a38:	d901      	bls.n	8008a3e <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8008a3a:	2303      	movs	r3, #3
 8008a3c:	e332      	b.n	80090a4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8008a3e:	4b12      	ldr	r3, [pc, #72]	; (8008a88 <HAL_RCC_OscConfig+0x288>)
 8008a40:	681b      	ldr	r3, [r3, #0]
 8008a42:	f003 0304 	and.w	r3, r3, #4
 8008a46:	2b00      	cmp	r3, #0
 8008a48:	d0f0      	beq.n	8008a2c <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008a4a:	f7fa f9eb 	bl	8002e24 <HAL_GetREVID>
 8008a4e:	4603      	mov	r3, r0
 8008a50:	f241 0203 	movw	r2, #4099	; 0x1003
 8008a54:	4293      	cmp	r3, r2
 8008a56:	d819      	bhi.n	8008a8c <HAL_RCC_OscConfig+0x28c>
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	691b      	ldr	r3, [r3, #16]
 8008a5c:	2b40      	cmp	r3, #64	; 0x40
 8008a5e:	d108      	bne.n	8008a72 <HAL_RCC_OscConfig+0x272>
 8008a60:	4b09      	ldr	r3, [pc, #36]	; (8008a88 <HAL_RCC_OscConfig+0x288>)
 8008a62:	685b      	ldr	r3, [r3, #4]
 8008a64:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8008a68:	4a07      	ldr	r2, [pc, #28]	; (8008a88 <HAL_RCC_OscConfig+0x288>)
 8008a6a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008a6e:	6053      	str	r3, [r2, #4]
 8008a70:	e030      	b.n	8008ad4 <HAL_RCC_OscConfig+0x2d4>
 8008a72:	4b05      	ldr	r3, [pc, #20]	; (8008a88 <HAL_RCC_OscConfig+0x288>)
 8008a74:	685b      	ldr	r3, [r3, #4]
 8008a76:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	691b      	ldr	r3, [r3, #16]
 8008a7e:	031b      	lsls	r3, r3, #12
 8008a80:	4901      	ldr	r1, [pc, #4]	; (8008a88 <HAL_RCC_OscConfig+0x288>)
 8008a82:	4313      	orrs	r3, r2
 8008a84:	604b      	str	r3, [r1, #4]
 8008a86:	e025      	b.n	8008ad4 <HAL_RCC_OscConfig+0x2d4>
 8008a88:	58024400 	.word	0x58024400
 8008a8c:	4b9a      	ldr	r3, [pc, #616]	; (8008cf8 <HAL_RCC_OscConfig+0x4f8>)
 8008a8e:	685b      	ldr	r3, [r3, #4]
 8008a90:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8008a94:	687b      	ldr	r3, [r7, #4]
 8008a96:	691b      	ldr	r3, [r3, #16]
 8008a98:	061b      	lsls	r3, r3, #24
 8008a9a:	4997      	ldr	r1, [pc, #604]	; (8008cf8 <HAL_RCC_OscConfig+0x4f8>)
 8008a9c:	4313      	orrs	r3, r2
 8008a9e:	604b      	str	r3, [r1, #4]
 8008aa0:	e018      	b.n	8008ad4 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8008aa2:	4b95      	ldr	r3, [pc, #596]	; (8008cf8 <HAL_RCC_OscConfig+0x4f8>)
 8008aa4:	681b      	ldr	r3, [r3, #0]
 8008aa6:	4a94      	ldr	r2, [pc, #592]	; (8008cf8 <HAL_RCC_OscConfig+0x4f8>)
 8008aa8:	f023 0301 	bic.w	r3, r3, #1
 8008aac:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008aae:	f7fa f989 	bl	8002dc4 <HAL_GetTick>
 8008ab2:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8008ab4:	e008      	b.n	8008ac8 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008ab6:	f7fa f985 	bl	8002dc4 <HAL_GetTick>
 8008aba:	4602      	mov	r2, r0
 8008abc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008abe:	1ad3      	subs	r3, r2, r3
 8008ac0:	2b02      	cmp	r3, #2
 8008ac2:	d901      	bls.n	8008ac8 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8008ac4:	2303      	movs	r3, #3
 8008ac6:	e2ed      	b.n	80090a4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8008ac8:	4b8b      	ldr	r3, [pc, #556]	; (8008cf8 <HAL_RCC_OscConfig+0x4f8>)
 8008aca:	681b      	ldr	r3, [r3, #0]
 8008acc:	f003 0304 	and.w	r3, r3, #4
 8008ad0:	2b00      	cmp	r3, #0
 8008ad2:	d1f0      	bne.n	8008ab6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	681b      	ldr	r3, [r3, #0]
 8008ad8:	f003 0310 	and.w	r3, r3, #16
 8008adc:	2b00      	cmp	r3, #0
 8008ade:	f000 80a9 	beq.w	8008c34 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008ae2:	4b85      	ldr	r3, [pc, #532]	; (8008cf8 <HAL_RCC_OscConfig+0x4f8>)
 8008ae4:	691b      	ldr	r3, [r3, #16]
 8008ae6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008aea:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8008aec:	4b82      	ldr	r3, [pc, #520]	; (8008cf8 <HAL_RCC_OscConfig+0x4f8>)
 8008aee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008af0:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8008af2:	69bb      	ldr	r3, [r7, #24]
 8008af4:	2b08      	cmp	r3, #8
 8008af6:	d007      	beq.n	8008b08 <HAL_RCC_OscConfig+0x308>
 8008af8:	69bb      	ldr	r3, [r7, #24]
 8008afa:	2b18      	cmp	r3, #24
 8008afc:	d13a      	bne.n	8008b74 <HAL_RCC_OscConfig+0x374>
 8008afe:	697b      	ldr	r3, [r7, #20]
 8008b00:	f003 0303 	and.w	r3, r3, #3
 8008b04:	2b01      	cmp	r3, #1
 8008b06:	d135      	bne.n	8008b74 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8008b08:	4b7b      	ldr	r3, [pc, #492]	; (8008cf8 <HAL_RCC_OscConfig+0x4f8>)
 8008b0a:	681b      	ldr	r3, [r3, #0]
 8008b0c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008b10:	2b00      	cmp	r3, #0
 8008b12:	d005      	beq.n	8008b20 <HAL_RCC_OscConfig+0x320>
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	69db      	ldr	r3, [r3, #28]
 8008b18:	2b80      	cmp	r3, #128	; 0x80
 8008b1a:	d001      	beq.n	8008b20 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8008b1c:	2301      	movs	r3, #1
 8008b1e:	e2c1      	b.n	80090a4 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8008b20:	f7fa f980 	bl	8002e24 <HAL_GetREVID>
 8008b24:	4603      	mov	r3, r0
 8008b26:	f241 0203 	movw	r2, #4099	; 0x1003
 8008b2a:	4293      	cmp	r3, r2
 8008b2c:	d817      	bhi.n	8008b5e <HAL_RCC_OscConfig+0x35e>
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	6a1b      	ldr	r3, [r3, #32]
 8008b32:	2b20      	cmp	r3, #32
 8008b34:	d108      	bne.n	8008b48 <HAL_RCC_OscConfig+0x348>
 8008b36:	4b70      	ldr	r3, [pc, #448]	; (8008cf8 <HAL_RCC_OscConfig+0x4f8>)
 8008b38:	685b      	ldr	r3, [r3, #4]
 8008b3a:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8008b3e:	4a6e      	ldr	r2, [pc, #440]	; (8008cf8 <HAL_RCC_OscConfig+0x4f8>)
 8008b40:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008b44:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8008b46:	e075      	b.n	8008c34 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8008b48:	4b6b      	ldr	r3, [pc, #428]	; (8008cf8 <HAL_RCC_OscConfig+0x4f8>)
 8008b4a:	685b      	ldr	r3, [r3, #4]
 8008b4c:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	6a1b      	ldr	r3, [r3, #32]
 8008b54:	069b      	lsls	r3, r3, #26
 8008b56:	4968      	ldr	r1, [pc, #416]	; (8008cf8 <HAL_RCC_OscConfig+0x4f8>)
 8008b58:	4313      	orrs	r3, r2
 8008b5a:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8008b5c:	e06a      	b.n	8008c34 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8008b5e:	4b66      	ldr	r3, [pc, #408]	; (8008cf8 <HAL_RCC_OscConfig+0x4f8>)
 8008b60:	68db      	ldr	r3, [r3, #12]
 8008b62:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	6a1b      	ldr	r3, [r3, #32]
 8008b6a:	061b      	lsls	r3, r3, #24
 8008b6c:	4962      	ldr	r1, [pc, #392]	; (8008cf8 <HAL_RCC_OscConfig+0x4f8>)
 8008b6e:	4313      	orrs	r3, r2
 8008b70:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8008b72:	e05f      	b.n	8008c34 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	69db      	ldr	r3, [r3, #28]
 8008b78:	2b00      	cmp	r3, #0
 8008b7a:	d042      	beq.n	8008c02 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8008b7c:	4b5e      	ldr	r3, [pc, #376]	; (8008cf8 <HAL_RCC_OscConfig+0x4f8>)
 8008b7e:	681b      	ldr	r3, [r3, #0]
 8008b80:	4a5d      	ldr	r2, [pc, #372]	; (8008cf8 <HAL_RCC_OscConfig+0x4f8>)
 8008b82:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008b86:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008b88:	f7fa f91c 	bl	8002dc4 <HAL_GetTick>
 8008b8c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8008b8e:	e008      	b.n	8008ba2 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8008b90:	f7fa f918 	bl	8002dc4 <HAL_GetTick>
 8008b94:	4602      	mov	r2, r0
 8008b96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b98:	1ad3      	subs	r3, r2, r3
 8008b9a:	2b02      	cmp	r3, #2
 8008b9c:	d901      	bls.n	8008ba2 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8008b9e:	2303      	movs	r3, #3
 8008ba0:	e280      	b.n	80090a4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8008ba2:	4b55      	ldr	r3, [pc, #340]	; (8008cf8 <HAL_RCC_OscConfig+0x4f8>)
 8008ba4:	681b      	ldr	r3, [r3, #0]
 8008ba6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008baa:	2b00      	cmp	r3, #0
 8008bac:	d0f0      	beq.n	8008b90 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8008bae:	f7fa f939 	bl	8002e24 <HAL_GetREVID>
 8008bb2:	4603      	mov	r3, r0
 8008bb4:	f241 0203 	movw	r2, #4099	; 0x1003
 8008bb8:	4293      	cmp	r3, r2
 8008bba:	d817      	bhi.n	8008bec <HAL_RCC_OscConfig+0x3ec>
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	6a1b      	ldr	r3, [r3, #32]
 8008bc0:	2b20      	cmp	r3, #32
 8008bc2:	d108      	bne.n	8008bd6 <HAL_RCC_OscConfig+0x3d6>
 8008bc4:	4b4c      	ldr	r3, [pc, #304]	; (8008cf8 <HAL_RCC_OscConfig+0x4f8>)
 8008bc6:	685b      	ldr	r3, [r3, #4]
 8008bc8:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8008bcc:	4a4a      	ldr	r2, [pc, #296]	; (8008cf8 <HAL_RCC_OscConfig+0x4f8>)
 8008bce:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8008bd2:	6053      	str	r3, [r2, #4]
 8008bd4:	e02e      	b.n	8008c34 <HAL_RCC_OscConfig+0x434>
 8008bd6:	4b48      	ldr	r3, [pc, #288]	; (8008cf8 <HAL_RCC_OscConfig+0x4f8>)
 8008bd8:	685b      	ldr	r3, [r3, #4]
 8008bda:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	6a1b      	ldr	r3, [r3, #32]
 8008be2:	069b      	lsls	r3, r3, #26
 8008be4:	4944      	ldr	r1, [pc, #272]	; (8008cf8 <HAL_RCC_OscConfig+0x4f8>)
 8008be6:	4313      	orrs	r3, r2
 8008be8:	604b      	str	r3, [r1, #4]
 8008bea:	e023      	b.n	8008c34 <HAL_RCC_OscConfig+0x434>
 8008bec:	4b42      	ldr	r3, [pc, #264]	; (8008cf8 <HAL_RCC_OscConfig+0x4f8>)
 8008bee:	68db      	ldr	r3, [r3, #12]
 8008bf0:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	6a1b      	ldr	r3, [r3, #32]
 8008bf8:	061b      	lsls	r3, r3, #24
 8008bfa:	493f      	ldr	r1, [pc, #252]	; (8008cf8 <HAL_RCC_OscConfig+0x4f8>)
 8008bfc:	4313      	orrs	r3, r2
 8008bfe:	60cb      	str	r3, [r1, #12]
 8008c00:	e018      	b.n	8008c34 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8008c02:	4b3d      	ldr	r3, [pc, #244]	; (8008cf8 <HAL_RCC_OscConfig+0x4f8>)
 8008c04:	681b      	ldr	r3, [r3, #0]
 8008c06:	4a3c      	ldr	r2, [pc, #240]	; (8008cf8 <HAL_RCC_OscConfig+0x4f8>)
 8008c08:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008c0c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008c0e:	f7fa f8d9 	bl	8002dc4 <HAL_GetTick>
 8008c12:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8008c14:	e008      	b.n	8008c28 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8008c16:	f7fa f8d5 	bl	8002dc4 <HAL_GetTick>
 8008c1a:	4602      	mov	r2, r0
 8008c1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c1e:	1ad3      	subs	r3, r2, r3
 8008c20:	2b02      	cmp	r3, #2
 8008c22:	d901      	bls.n	8008c28 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8008c24:	2303      	movs	r3, #3
 8008c26:	e23d      	b.n	80090a4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8008c28:	4b33      	ldr	r3, [pc, #204]	; (8008cf8 <HAL_RCC_OscConfig+0x4f8>)
 8008c2a:	681b      	ldr	r3, [r3, #0]
 8008c2c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008c30:	2b00      	cmp	r3, #0
 8008c32:	d1f0      	bne.n	8008c16 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	681b      	ldr	r3, [r3, #0]
 8008c38:	f003 0308 	and.w	r3, r3, #8
 8008c3c:	2b00      	cmp	r3, #0
 8008c3e:	d036      	beq.n	8008cae <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	695b      	ldr	r3, [r3, #20]
 8008c44:	2b00      	cmp	r3, #0
 8008c46:	d019      	beq.n	8008c7c <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8008c48:	4b2b      	ldr	r3, [pc, #172]	; (8008cf8 <HAL_RCC_OscConfig+0x4f8>)
 8008c4a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008c4c:	4a2a      	ldr	r2, [pc, #168]	; (8008cf8 <HAL_RCC_OscConfig+0x4f8>)
 8008c4e:	f043 0301 	orr.w	r3, r3, #1
 8008c52:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008c54:	f7fa f8b6 	bl	8002dc4 <HAL_GetTick>
 8008c58:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8008c5a:	e008      	b.n	8008c6e <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008c5c:	f7fa f8b2 	bl	8002dc4 <HAL_GetTick>
 8008c60:	4602      	mov	r2, r0
 8008c62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c64:	1ad3      	subs	r3, r2, r3
 8008c66:	2b02      	cmp	r3, #2
 8008c68:	d901      	bls.n	8008c6e <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8008c6a:	2303      	movs	r3, #3
 8008c6c:	e21a      	b.n	80090a4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8008c6e:	4b22      	ldr	r3, [pc, #136]	; (8008cf8 <HAL_RCC_OscConfig+0x4f8>)
 8008c70:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008c72:	f003 0302 	and.w	r3, r3, #2
 8008c76:	2b00      	cmp	r3, #0
 8008c78:	d0f0      	beq.n	8008c5c <HAL_RCC_OscConfig+0x45c>
 8008c7a:	e018      	b.n	8008cae <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008c7c:	4b1e      	ldr	r3, [pc, #120]	; (8008cf8 <HAL_RCC_OscConfig+0x4f8>)
 8008c7e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008c80:	4a1d      	ldr	r2, [pc, #116]	; (8008cf8 <HAL_RCC_OscConfig+0x4f8>)
 8008c82:	f023 0301 	bic.w	r3, r3, #1
 8008c86:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008c88:	f7fa f89c 	bl	8002dc4 <HAL_GetTick>
 8008c8c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8008c8e:	e008      	b.n	8008ca2 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008c90:	f7fa f898 	bl	8002dc4 <HAL_GetTick>
 8008c94:	4602      	mov	r2, r0
 8008c96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c98:	1ad3      	subs	r3, r2, r3
 8008c9a:	2b02      	cmp	r3, #2
 8008c9c:	d901      	bls.n	8008ca2 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8008c9e:	2303      	movs	r3, #3
 8008ca0:	e200      	b.n	80090a4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8008ca2:	4b15      	ldr	r3, [pc, #84]	; (8008cf8 <HAL_RCC_OscConfig+0x4f8>)
 8008ca4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008ca6:	f003 0302 	and.w	r3, r3, #2
 8008caa:	2b00      	cmp	r3, #0
 8008cac:	d1f0      	bne.n	8008c90 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	681b      	ldr	r3, [r3, #0]
 8008cb2:	f003 0320 	and.w	r3, r3, #32
 8008cb6:	2b00      	cmp	r3, #0
 8008cb8:	d039      	beq.n	8008d2e <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	699b      	ldr	r3, [r3, #24]
 8008cbe:	2b00      	cmp	r3, #0
 8008cc0:	d01c      	beq.n	8008cfc <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8008cc2:	4b0d      	ldr	r3, [pc, #52]	; (8008cf8 <HAL_RCC_OscConfig+0x4f8>)
 8008cc4:	681b      	ldr	r3, [r3, #0]
 8008cc6:	4a0c      	ldr	r2, [pc, #48]	; (8008cf8 <HAL_RCC_OscConfig+0x4f8>)
 8008cc8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8008ccc:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8008cce:	f7fa f879 	bl	8002dc4 <HAL_GetTick>
 8008cd2:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8008cd4:	e008      	b.n	8008ce8 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8008cd6:	f7fa f875 	bl	8002dc4 <HAL_GetTick>
 8008cda:	4602      	mov	r2, r0
 8008cdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008cde:	1ad3      	subs	r3, r2, r3
 8008ce0:	2b02      	cmp	r3, #2
 8008ce2:	d901      	bls.n	8008ce8 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8008ce4:	2303      	movs	r3, #3
 8008ce6:	e1dd      	b.n	80090a4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8008ce8:	4b03      	ldr	r3, [pc, #12]	; (8008cf8 <HAL_RCC_OscConfig+0x4f8>)
 8008cea:	681b      	ldr	r3, [r3, #0]
 8008cec:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008cf0:	2b00      	cmp	r3, #0
 8008cf2:	d0f0      	beq.n	8008cd6 <HAL_RCC_OscConfig+0x4d6>
 8008cf4:	e01b      	b.n	8008d2e <HAL_RCC_OscConfig+0x52e>
 8008cf6:	bf00      	nop
 8008cf8:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8008cfc:	4b9b      	ldr	r3, [pc, #620]	; (8008f6c <HAL_RCC_OscConfig+0x76c>)
 8008cfe:	681b      	ldr	r3, [r3, #0]
 8008d00:	4a9a      	ldr	r2, [pc, #616]	; (8008f6c <HAL_RCC_OscConfig+0x76c>)
 8008d02:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008d06:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8008d08:	f7fa f85c 	bl	8002dc4 <HAL_GetTick>
 8008d0c:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8008d0e:	e008      	b.n	8008d22 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8008d10:	f7fa f858 	bl	8002dc4 <HAL_GetTick>
 8008d14:	4602      	mov	r2, r0
 8008d16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d18:	1ad3      	subs	r3, r2, r3
 8008d1a:	2b02      	cmp	r3, #2
 8008d1c:	d901      	bls.n	8008d22 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8008d1e:	2303      	movs	r3, #3
 8008d20:	e1c0      	b.n	80090a4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8008d22:	4b92      	ldr	r3, [pc, #584]	; (8008f6c <HAL_RCC_OscConfig+0x76c>)
 8008d24:	681b      	ldr	r3, [r3, #0]
 8008d26:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008d2a:	2b00      	cmp	r3, #0
 8008d2c:	d1f0      	bne.n	8008d10 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	681b      	ldr	r3, [r3, #0]
 8008d32:	f003 0304 	and.w	r3, r3, #4
 8008d36:	2b00      	cmp	r3, #0
 8008d38:	f000 8081 	beq.w	8008e3e <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8008d3c:	4b8c      	ldr	r3, [pc, #560]	; (8008f70 <HAL_RCC_OscConfig+0x770>)
 8008d3e:	681b      	ldr	r3, [r3, #0]
 8008d40:	4a8b      	ldr	r2, [pc, #556]	; (8008f70 <HAL_RCC_OscConfig+0x770>)
 8008d42:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008d46:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8008d48:	f7fa f83c 	bl	8002dc4 <HAL_GetTick>
 8008d4c:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008d4e:	e008      	b.n	8008d62 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008d50:	f7fa f838 	bl	8002dc4 <HAL_GetTick>
 8008d54:	4602      	mov	r2, r0
 8008d56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d58:	1ad3      	subs	r3, r2, r3
 8008d5a:	2b64      	cmp	r3, #100	; 0x64
 8008d5c:	d901      	bls.n	8008d62 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8008d5e:	2303      	movs	r3, #3
 8008d60:	e1a0      	b.n	80090a4 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8008d62:	4b83      	ldr	r3, [pc, #524]	; (8008f70 <HAL_RCC_OscConfig+0x770>)
 8008d64:	681b      	ldr	r3, [r3, #0]
 8008d66:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008d6a:	2b00      	cmp	r3, #0
 8008d6c:	d0f0      	beq.n	8008d50 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	689b      	ldr	r3, [r3, #8]
 8008d72:	2b01      	cmp	r3, #1
 8008d74:	d106      	bne.n	8008d84 <HAL_RCC_OscConfig+0x584>
 8008d76:	4b7d      	ldr	r3, [pc, #500]	; (8008f6c <HAL_RCC_OscConfig+0x76c>)
 8008d78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008d7a:	4a7c      	ldr	r2, [pc, #496]	; (8008f6c <HAL_RCC_OscConfig+0x76c>)
 8008d7c:	f043 0301 	orr.w	r3, r3, #1
 8008d80:	6713      	str	r3, [r2, #112]	; 0x70
 8008d82:	e02d      	b.n	8008de0 <HAL_RCC_OscConfig+0x5e0>
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	689b      	ldr	r3, [r3, #8]
 8008d88:	2b00      	cmp	r3, #0
 8008d8a:	d10c      	bne.n	8008da6 <HAL_RCC_OscConfig+0x5a6>
 8008d8c:	4b77      	ldr	r3, [pc, #476]	; (8008f6c <HAL_RCC_OscConfig+0x76c>)
 8008d8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008d90:	4a76      	ldr	r2, [pc, #472]	; (8008f6c <HAL_RCC_OscConfig+0x76c>)
 8008d92:	f023 0301 	bic.w	r3, r3, #1
 8008d96:	6713      	str	r3, [r2, #112]	; 0x70
 8008d98:	4b74      	ldr	r3, [pc, #464]	; (8008f6c <HAL_RCC_OscConfig+0x76c>)
 8008d9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008d9c:	4a73      	ldr	r2, [pc, #460]	; (8008f6c <HAL_RCC_OscConfig+0x76c>)
 8008d9e:	f023 0304 	bic.w	r3, r3, #4
 8008da2:	6713      	str	r3, [r2, #112]	; 0x70
 8008da4:	e01c      	b.n	8008de0 <HAL_RCC_OscConfig+0x5e0>
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	689b      	ldr	r3, [r3, #8]
 8008daa:	2b05      	cmp	r3, #5
 8008dac:	d10c      	bne.n	8008dc8 <HAL_RCC_OscConfig+0x5c8>
 8008dae:	4b6f      	ldr	r3, [pc, #444]	; (8008f6c <HAL_RCC_OscConfig+0x76c>)
 8008db0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008db2:	4a6e      	ldr	r2, [pc, #440]	; (8008f6c <HAL_RCC_OscConfig+0x76c>)
 8008db4:	f043 0304 	orr.w	r3, r3, #4
 8008db8:	6713      	str	r3, [r2, #112]	; 0x70
 8008dba:	4b6c      	ldr	r3, [pc, #432]	; (8008f6c <HAL_RCC_OscConfig+0x76c>)
 8008dbc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008dbe:	4a6b      	ldr	r2, [pc, #428]	; (8008f6c <HAL_RCC_OscConfig+0x76c>)
 8008dc0:	f043 0301 	orr.w	r3, r3, #1
 8008dc4:	6713      	str	r3, [r2, #112]	; 0x70
 8008dc6:	e00b      	b.n	8008de0 <HAL_RCC_OscConfig+0x5e0>
 8008dc8:	4b68      	ldr	r3, [pc, #416]	; (8008f6c <HAL_RCC_OscConfig+0x76c>)
 8008dca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008dcc:	4a67      	ldr	r2, [pc, #412]	; (8008f6c <HAL_RCC_OscConfig+0x76c>)
 8008dce:	f023 0301 	bic.w	r3, r3, #1
 8008dd2:	6713      	str	r3, [r2, #112]	; 0x70
 8008dd4:	4b65      	ldr	r3, [pc, #404]	; (8008f6c <HAL_RCC_OscConfig+0x76c>)
 8008dd6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008dd8:	4a64      	ldr	r2, [pc, #400]	; (8008f6c <HAL_RCC_OscConfig+0x76c>)
 8008dda:	f023 0304 	bic.w	r3, r3, #4
 8008dde:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	689b      	ldr	r3, [r3, #8]
 8008de4:	2b00      	cmp	r3, #0
 8008de6:	d015      	beq.n	8008e14 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008de8:	f7f9 ffec 	bl	8002dc4 <HAL_GetTick>
 8008dec:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008dee:	e00a      	b.n	8008e06 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008df0:	f7f9 ffe8 	bl	8002dc4 <HAL_GetTick>
 8008df4:	4602      	mov	r2, r0
 8008df6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008df8:	1ad3      	subs	r3, r2, r3
 8008dfa:	f241 3288 	movw	r2, #5000	; 0x1388
 8008dfe:	4293      	cmp	r3, r2
 8008e00:	d901      	bls.n	8008e06 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8008e02:	2303      	movs	r3, #3
 8008e04:	e14e      	b.n	80090a4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8008e06:	4b59      	ldr	r3, [pc, #356]	; (8008f6c <HAL_RCC_OscConfig+0x76c>)
 8008e08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008e0a:	f003 0302 	and.w	r3, r3, #2
 8008e0e:	2b00      	cmp	r3, #0
 8008e10:	d0ee      	beq.n	8008df0 <HAL_RCC_OscConfig+0x5f0>
 8008e12:	e014      	b.n	8008e3e <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008e14:	f7f9 ffd6 	bl	8002dc4 <HAL_GetTick>
 8008e18:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8008e1a:	e00a      	b.n	8008e32 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008e1c:	f7f9 ffd2 	bl	8002dc4 <HAL_GetTick>
 8008e20:	4602      	mov	r2, r0
 8008e22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e24:	1ad3      	subs	r3, r2, r3
 8008e26:	f241 3288 	movw	r2, #5000	; 0x1388
 8008e2a:	4293      	cmp	r3, r2
 8008e2c:	d901      	bls.n	8008e32 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8008e2e:	2303      	movs	r3, #3
 8008e30:	e138      	b.n	80090a4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8008e32:	4b4e      	ldr	r3, [pc, #312]	; (8008f6c <HAL_RCC_OscConfig+0x76c>)
 8008e34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008e36:	f003 0302 	and.w	r3, r3, #2
 8008e3a:	2b00      	cmp	r3, #0
 8008e3c:	d1ee      	bne.n	8008e1c <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e42:	2b00      	cmp	r3, #0
 8008e44:	f000 812d 	beq.w	80090a2 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8008e48:	4b48      	ldr	r3, [pc, #288]	; (8008f6c <HAL_RCC_OscConfig+0x76c>)
 8008e4a:	691b      	ldr	r3, [r3, #16]
 8008e4c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008e50:	2b18      	cmp	r3, #24
 8008e52:	f000 80bd 	beq.w	8008fd0 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e5a:	2b02      	cmp	r3, #2
 8008e5c:	f040 809e 	bne.w	8008f9c <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008e60:	4b42      	ldr	r3, [pc, #264]	; (8008f6c <HAL_RCC_OscConfig+0x76c>)
 8008e62:	681b      	ldr	r3, [r3, #0]
 8008e64:	4a41      	ldr	r2, [pc, #260]	; (8008f6c <HAL_RCC_OscConfig+0x76c>)
 8008e66:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008e6a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008e6c:	f7f9 ffaa 	bl	8002dc4 <HAL_GetTick>
 8008e70:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008e72:	e008      	b.n	8008e86 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008e74:	f7f9 ffa6 	bl	8002dc4 <HAL_GetTick>
 8008e78:	4602      	mov	r2, r0
 8008e7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e7c:	1ad3      	subs	r3, r2, r3
 8008e7e:	2b02      	cmp	r3, #2
 8008e80:	d901      	bls.n	8008e86 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8008e82:	2303      	movs	r3, #3
 8008e84:	e10e      	b.n	80090a4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008e86:	4b39      	ldr	r3, [pc, #228]	; (8008f6c <HAL_RCC_OscConfig+0x76c>)
 8008e88:	681b      	ldr	r3, [r3, #0]
 8008e8a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008e8e:	2b00      	cmp	r3, #0
 8008e90:	d1f0      	bne.n	8008e74 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8008e92:	4b36      	ldr	r3, [pc, #216]	; (8008f6c <HAL_RCC_OscConfig+0x76c>)
 8008e94:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008e96:	4b37      	ldr	r3, [pc, #220]	; (8008f74 <HAL_RCC_OscConfig+0x774>)
 8008e98:	4013      	ands	r3, r2
 8008e9a:	687a      	ldr	r2, [r7, #4]
 8008e9c:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8008e9e:	687a      	ldr	r2, [r7, #4]
 8008ea0:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8008ea2:	0112      	lsls	r2, r2, #4
 8008ea4:	430a      	orrs	r2, r1
 8008ea6:	4931      	ldr	r1, [pc, #196]	; (8008f6c <HAL_RCC_OscConfig+0x76c>)
 8008ea8:	4313      	orrs	r3, r2
 8008eaa:	628b      	str	r3, [r1, #40]	; 0x28
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008eb0:	3b01      	subs	r3, #1
 8008eb2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008eba:	3b01      	subs	r3, #1
 8008ebc:	025b      	lsls	r3, r3, #9
 8008ebe:	b29b      	uxth	r3, r3
 8008ec0:	431a      	orrs	r2, r3
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ec6:	3b01      	subs	r3, #1
 8008ec8:	041b      	lsls	r3, r3, #16
 8008eca:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8008ece:	431a      	orrs	r2, r3
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008ed4:	3b01      	subs	r3, #1
 8008ed6:	061b      	lsls	r3, r3, #24
 8008ed8:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8008edc:	4923      	ldr	r1, [pc, #140]	; (8008f6c <HAL_RCC_OscConfig+0x76c>)
 8008ede:	4313      	orrs	r3, r2
 8008ee0:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8008ee2:	4b22      	ldr	r3, [pc, #136]	; (8008f6c <HAL_RCC_OscConfig+0x76c>)
 8008ee4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ee6:	4a21      	ldr	r2, [pc, #132]	; (8008f6c <HAL_RCC_OscConfig+0x76c>)
 8008ee8:	f023 0301 	bic.w	r3, r3, #1
 8008eec:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8008eee:	4b1f      	ldr	r3, [pc, #124]	; (8008f6c <HAL_RCC_OscConfig+0x76c>)
 8008ef0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008ef2:	4b21      	ldr	r3, [pc, #132]	; (8008f78 <HAL_RCC_OscConfig+0x778>)
 8008ef4:	4013      	ands	r3, r2
 8008ef6:	687a      	ldr	r2, [r7, #4]
 8008ef8:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8008efa:	00d2      	lsls	r2, r2, #3
 8008efc:	491b      	ldr	r1, [pc, #108]	; (8008f6c <HAL_RCC_OscConfig+0x76c>)
 8008efe:	4313      	orrs	r3, r2
 8008f00:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8008f02:	4b1a      	ldr	r3, [pc, #104]	; (8008f6c <HAL_RCC_OscConfig+0x76c>)
 8008f04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f06:	f023 020c 	bic.w	r2, r3, #12
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f0e:	4917      	ldr	r1, [pc, #92]	; (8008f6c <HAL_RCC_OscConfig+0x76c>)
 8008f10:	4313      	orrs	r3, r2
 8008f12:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8008f14:	4b15      	ldr	r3, [pc, #84]	; (8008f6c <HAL_RCC_OscConfig+0x76c>)
 8008f16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f18:	f023 0202 	bic.w	r2, r3, #2
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008f20:	4912      	ldr	r1, [pc, #72]	; (8008f6c <HAL_RCC_OscConfig+0x76c>)
 8008f22:	4313      	orrs	r3, r2
 8008f24:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8008f26:	4b11      	ldr	r3, [pc, #68]	; (8008f6c <HAL_RCC_OscConfig+0x76c>)
 8008f28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f2a:	4a10      	ldr	r2, [pc, #64]	; (8008f6c <HAL_RCC_OscConfig+0x76c>)
 8008f2c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008f30:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8008f32:	4b0e      	ldr	r3, [pc, #56]	; (8008f6c <HAL_RCC_OscConfig+0x76c>)
 8008f34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f36:	4a0d      	ldr	r2, [pc, #52]	; (8008f6c <HAL_RCC_OscConfig+0x76c>)
 8008f38:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008f3c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8008f3e:	4b0b      	ldr	r3, [pc, #44]	; (8008f6c <HAL_RCC_OscConfig+0x76c>)
 8008f40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f42:	4a0a      	ldr	r2, [pc, #40]	; (8008f6c <HAL_RCC_OscConfig+0x76c>)
 8008f44:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008f48:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8008f4a:	4b08      	ldr	r3, [pc, #32]	; (8008f6c <HAL_RCC_OscConfig+0x76c>)
 8008f4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f4e:	4a07      	ldr	r2, [pc, #28]	; (8008f6c <HAL_RCC_OscConfig+0x76c>)
 8008f50:	f043 0301 	orr.w	r3, r3, #1
 8008f54:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008f56:	4b05      	ldr	r3, [pc, #20]	; (8008f6c <HAL_RCC_OscConfig+0x76c>)
 8008f58:	681b      	ldr	r3, [r3, #0]
 8008f5a:	4a04      	ldr	r2, [pc, #16]	; (8008f6c <HAL_RCC_OscConfig+0x76c>)
 8008f5c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008f60:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008f62:	f7f9 ff2f 	bl	8002dc4 <HAL_GetTick>
 8008f66:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8008f68:	e011      	b.n	8008f8e <HAL_RCC_OscConfig+0x78e>
 8008f6a:	bf00      	nop
 8008f6c:	58024400 	.word	0x58024400
 8008f70:	58024800 	.word	0x58024800
 8008f74:	fffffc0c 	.word	0xfffffc0c
 8008f78:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008f7c:	f7f9 ff22 	bl	8002dc4 <HAL_GetTick>
 8008f80:	4602      	mov	r2, r0
 8008f82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f84:	1ad3      	subs	r3, r2, r3
 8008f86:	2b02      	cmp	r3, #2
 8008f88:	d901      	bls.n	8008f8e <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8008f8a:	2303      	movs	r3, #3
 8008f8c:	e08a      	b.n	80090a4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8008f8e:	4b47      	ldr	r3, [pc, #284]	; (80090ac <HAL_RCC_OscConfig+0x8ac>)
 8008f90:	681b      	ldr	r3, [r3, #0]
 8008f92:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008f96:	2b00      	cmp	r3, #0
 8008f98:	d0f0      	beq.n	8008f7c <HAL_RCC_OscConfig+0x77c>
 8008f9a:	e082      	b.n	80090a2 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008f9c:	4b43      	ldr	r3, [pc, #268]	; (80090ac <HAL_RCC_OscConfig+0x8ac>)
 8008f9e:	681b      	ldr	r3, [r3, #0]
 8008fa0:	4a42      	ldr	r2, [pc, #264]	; (80090ac <HAL_RCC_OscConfig+0x8ac>)
 8008fa2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008fa6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008fa8:	f7f9 ff0c 	bl	8002dc4 <HAL_GetTick>
 8008fac:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008fae:	e008      	b.n	8008fc2 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008fb0:	f7f9 ff08 	bl	8002dc4 <HAL_GetTick>
 8008fb4:	4602      	mov	r2, r0
 8008fb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008fb8:	1ad3      	subs	r3, r2, r3
 8008fba:	2b02      	cmp	r3, #2
 8008fbc:	d901      	bls.n	8008fc2 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8008fbe:	2303      	movs	r3, #3
 8008fc0:	e070      	b.n	80090a4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8008fc2:	4b3a      	ldr	r3, [pc, #232]	; (80090ac <HAL_RCC_OscConfig+0x8ac>)
 8008fc4:	681b      	ldr	r3, [r3, #0]
 8008fc6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008fca:	2b00      	cmp	r3, #0
 8008fcc:	d1f0      	bne.n	8008fb0 <HAL_RCC_OscConfig+0x7b0>
 8008fce:	e068      	b.n	80090a2 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8008fd0:	4b36      	ldr	r3, [pc, #216]	; (80090ac <HAL_RCC_OscConfig+0x8ac>)
 8008fd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008fd4:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8008fd6:	4b35      	ldr	r3, [pc, #212]	; (80090ac <HAL_RCC_OscConfig+0x8ac>)
 8008fd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008fda:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008fe0:	2b01      	cmp	r3, #1
 8008fe2:	d031      	beq.n	8009048 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008fe4:	693b      	ldr	r3, [r7, #16]
 8008fe6:	f003 0203 	and.w	r2, r3, #3
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008fee:	429a      	cmp	r2, r3
 8008ff0:	d12a      	bne.n	8009048 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8008ff2:	693b      	ldr	r3, [r7, #16]
 8008ff4:	091b      	lsrs	r3, r3, #4
 8008ff6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008ffe:	429a      	cmp	r2, r3
 8009000:	d122      	bne.n	8009048 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8009002:	68fb      	ldr	r3, [r7, #12]
 8009004:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800900c:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800900e:	429a      	cmp	r2, r3
 8009010:	d11a      	bne.n	8009048 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8009012:	68fb      	ldr	r3, [r7, #12]
 8009014:	0a5b      	lsrs	r3, r3, #9
 8009016:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800901e:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8009020:	429a      	cmp	r2, r3
 8009022:	d111      	bne.n	8009048 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8009024:	68fb      	ldr	r3, [r7, #12]
 8009026:	0c1b      	lsrs	r3, r3, #16
 8009028:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009030:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8009032:	429a      	cmp	r2, r3
 8009034:	d108      	bne.n	8009048 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8009036:	68fb      	ldr	r3, [r7, #12]
 8009038:	0e1b      	lsrs	r3, r3, #24
 800903a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009042:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8009044:	429a      	cmp	r2, r3
 8009046:	d001      	beq.n	800904c <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8009048:	2301      	movs	r3, #1
 800904a:	e02b      	b.n	80090a4 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 800904c:	4b17      	ldr	r3, [pc, #92]	; (80090ac <HAL_RCC_OscConfig+0x8ac>)
 800904e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009050:	08db      	lsrs	r3, r3, #3
 8009052:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8009056:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800905c:	693a      	ldr	r2, [r7, #16]
 800905e:	429a      	cmp	r2, r3
 8009060:	d01f      	beq.n	80090a2 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8009062:	4b12      	ldr	r3, [pc, #72]	; (80090ac <HAL_RCC_OscConfig+0x8ac>)
 8009064:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009066:	4a11      	ldr	r2, [pc, #68]	; (80090ac <HAL_RCC_OscConfig+0x8ac>)
 8009068:	f023 0301 	bic.w	r3, r3, #1
 800906c:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800906e:	f7f9 fea9 	bl	8002dc4 <HAL_GetTick>
 8009072:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8009074:	bf00      	nop
 8009076:	f7f9 fea5 	bl	8002dc4 <HAL_GetTick>
 800907a:	4602      	mov	r2, r0
 800907c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800907e:	4293      	cmp	r3, r2
 8009080:	d0f9      	beq.n	8009076 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8009082:	4b0a      	ldr	r3, [pc, #40]	; (80090ac <HAL_RCC_OscConfig+0x8ac>)
 8009084:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009086:	4b0a      	ldr	r3, [pc, #40]	; (80090b0 <HAL_RCC_OscConfig+0x8b0>)
 8009088:	4013      	ands	r3, r2
 800908a:	687a      	ldr	r2, [r7, #4]
 800908c:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800908e:	00d2      	lsls	r2, r2, #3
 8009090:	4906      	ldr	r1, [pc, #24]	; (80090ac <HAL_RCC_OscConfig+0x8ac>)
 8009092:	4313      	orrs	r3, r2
 8009094:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8009096:	4b05      	ldr	r3, [pc, #20]	; (80090ac <HAL_RCC_OscConfig+0x8ac>)
 8009098:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800909a:	4a04      	ldr	r2, [pc, #16]	; (80090ac <HAL_RCC_OscConfig+0x8ac>)
 800909c:	f043 0301 	orr.w	r3, r3, #1
 80090a0:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 80090a2:	2300      	movs	r3, #0
}
 80090a4:	4618      	mov	r0, r3
 80090a6:	3730      	adds	r7, #48	; 0x30
 80090a8:	46bd      	mov	sp, r7
 80090aa:	bd80      	pop	{r7, pc}
 80090ac:	58024400 	.word	0x58024400
 80090b0:	ffff0007 	.word	0xffff0007

080090b4 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80090b4:	b580      	push	{r7, lr}
 80090b6:	b086      	sub	sp, #24
 80090b8:	af00      	add	r7, sp, #0
 80090ba:	6078      	str	r0, [r7, #4]
 80090bc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	2b00      	cmp	r3, #0
 80090c2:	d101      	bne.n	80090c8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80090c4:	2301      	movs	r3, #1
 80090c6:	e19c      	b.n	8009402 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80090c8:	4b8a      	ldr	r3, [pc, #552]	; (80092f4 <HAL_RCC_ClockConfig+0x240>)
 80090ca:	681b      	ldr	r3, [r3, #0]
 80090cc:	f003 030f 	and.w	r3, r3, #15
 80090d0:	683a      	ldr	r2, [r7, #0]
 80090d2:	429a      	cmp	r2, r3
 80090d4:	d910      	bls.n	80090f8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80090d6:	4b87      	ldr	r3, [pc, #540]	; (80092f4 <HAL_RCC_ClockConfig+0x240>)
 80090d8:	681b      	ldr	r3, [r3, #0]
 80090da:	f023 020f 	bic.w	r2, r3, #15
 80090de:	4985      	ldr	r1, [pc, #532]	; (80092f4 <HAL_RCC_ClockConfig+0x240>)
 80090e0:	683b      	ldr	r3, [r7, #0]
 80090e2:	4313      	orrs	r3, r2
 80090e4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80090e6:	4b83      	ldr	r3, [pc, #524]	; (80092f4 <HAL_RCC_ClockConfig+0x240>)
 80090e8:	681b      	ldr	r3, [r3, #0]
 80090ea:	f003 030f 	and.w	r3, r3, #15
 80090ee:	683a      	ldr	r2, [r7, #0]
 80090f0:	429a      	cmp	r2, r3
 80090f2:	d001      	beq.n	80090f8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80090f4:	2301      	movs	r3, #1
 80090f6:	e184      	b.n	8009402 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	681b      	ldr	r3, [r3, #0]
 80090fc:	f003 0304 	and.w	r3, r3, #4
 8009100:	2b00      	cmp	r3, #0
 8009102:	d010      	beq.n	8009126 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	691a      	ldr	r2, [r3, #16]
 8009108:	4b7b      	ldr	r3, [pc, #492]	; (80092f8 <HAL_RCC_ClockConfig+0x244>)
 800910a:	699b      	ldr	r3, [r3, #24]
 800910c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8009110:	429a      	cmp	r2, r3
 8009112:	d908      	bls.n	8009126 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8009114:	4b78      	ldr	r3, [pc, #480]	; (80092f8 <HAL_RCC_ClockConfig+0x244>)
 8009116:	699b      	ldr	r3, [r3, #24]
 8009118:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	691b      	ldr	r3, [r3, #16]
 8009120:	4975      	ldr	r1, [pc, #468]	; (80092f8 <HAL_RCC_ClockConfig+0x244>)
 8009122:	4313      	orrs	r3, r2
 8009124:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	681b      	ldr	r3, [r3, #0]
 800912a:	f003 0308 	and.w	r3, r3, #8
 800912e:	2b00      	cmp	r3, #0
 8009130:	d010      	beq.n	8009154 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	695a      	ldr	r2, [r3, #20]
 8009136:	4b70      	ldr	r3, [pc, #448]	; (80092f8 <HAL_RCC_ClockConfig+0x244>)
 8009138:	69db      	ldr	r3, [r3, #28]
 800913a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800913e:	429a      	cmp	r2, r3
 8009140:	d908      	bls.n	8009154 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8009142:	4b6d      	ldr	r3, [pc, #436]	; (80092f8 <HAL_RCC_ClockConfig+0x244>)
 8009144:	69db      	ldr	r3, [r3, #28]
 8009146:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	695b      	ldr	r3, [r3, #20]
 800914e:	496a      	ldr	r1, [pc, #424]	; (80092f8 <HAL_RCC_ClockConfig+0x244>)
 8009150:	4313      	orrs	r3, r2
 8009152:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	681b      	ldr	r3, [r3, #0]
 8009158:	f003 0310 	and.w	r3, r3, #16
 800915c:	2b00      	cmp	r3, #0
 800915e:	d010      	beq.n	8009182 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	699a      	ldr	r2, [r3, #24]
 8009164:	4b64      	ldr	r3, [pc, #400]	; (80092f8 <HAL_RCC_ClockConfig+0x244>)
 8009166:	69db      	ldr	r3, [r3, #28]
 8009168:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800916c:	429a      	cmp	r2, r3
 800916e:	d908      	bls.n	8009182 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8009170:	4b61      	ldr	r3, [pc, #388]	; (80092f8 <HAL_RCC_ClockConfig+0x244>)
 8009172:	69db      	ldr	r3, [r3, #28]
 8009174:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	699b      	ldr	r3, [r3, #24]
 800917c:	495e      	ldr	r1, [pc, #376]	; (80092f8 <HAL_RCC_ClockConfig+0x244>)
 800917e:	4313      	orrs	r3, r2
 8009180:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	681b      	ldr	r3, [r3, #0]
 8009186:	f003 0320 	and.w	r3, r3, #32
 800918a:	2b00      	cmp	r3, #0
 800918c:	d010      	beq.n	80091b0 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	69da      	ldr	r2, [r3, #28]
 8009192:	4b59      	ldr	r3, [pc, #356]	; (80092f8 <HAL_RCC_ClockConfig+0x244>)
 8009194:	6a1b      	ldr	r3, [r3, #32]
 8009196:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800919a:	429a      	cmp	r2, r3
 800919c:	d908      	bls.n	80091b0 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800919e:	4b56      	ldr	r3, [pc, #344]	; (80092f8 <HAL_RCC_ClockConfig+0x244>)
 80091a0:	6a1b      	ldr	r3, [r3, #32]
 80091a2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	69db      	ldr	r3, [r3, #28]
 80091aa:	4953      	ldr	r1, [pc, #332]	; (80092f8 <HAL_RCC_ClockConfig+0x244>)
 80091ac:	4313      	orrs	r3, r2
 80091ae:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	681b      	ldr	r3, [r3, #0]
 80091b4:	f003 0302 	and.w	r3, r3, #2
 80091b8:	2b00      	cmp	r3, #0
 80091ba:	d010      	beq.n	80091de <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	68da      	ldr	r2, [r3, #12]
 80091c0:	4b4d      	ldr	r3, [pc, #308]	; (80092f8 <HAL_RCC_ClockConfig+0x244>)
 80091c2:	699b      	ldr	r3, [r3, #24]
 80091c4:	f003 030f 	and.w	r3, r3, #15
 80091c8:	429a      	cmp	r2, r3
 80091ca:	d908      	bls.n	80091de <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80091cc:	4b4a      	ldr	r3, [pc, #296]	; (80092f8 <HAL_RCC_ClockConfig+0x244>)
 80091ce:	699b      	ldr	r3, [r3, #24]
 80091d0:	f023 020f 	bic.w	r2, r3, #15
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	68db      	ldr	r3, [r3, #12]
 80091d8:	4947      	ldr	r1, [pc, #284]	; (80092f8 <HAL_RCC_ClockConfig+0x244>)
 80091da:	4313      	orrs	r3, r2
 80091dc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80091de:	687b      	ldr	r3, [r7, #4]
 80091e0:	681b      	ldr	r3, [r3, #0]
 80091e2:	f003 0301 	and.w	r3, r3, #1
 80091e6:	2b00      	cmp	r3, #0
 80091e8:	d055      	beq.n	8009296 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80091ea:	4b43      	ldr	r3, [pc, #268]	; (80092f8 <HAL_RCC_ClockConfig+0x244>)
 80091ec:	699b      	ldr	r3, [r3, #24]
 80091ee:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	689b      	ldr	r3, [r3, #8]
 80091f6:	4940      	ldr	r1, [pc, #256]	; (80092f8 <HAL_RCC_ClockConfig+0x244>)
 80091f8:	4313      	orrs	r3, r2
 80091fa:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	685b      	ldr	r3, [r3, #4]
 8009200:	2b02      	cmp	r3, #2
 8009202:	d107      	bne.n	8009214 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8009204:	4b3c      	ldr	r3, [pc, #240]	; (80092f8 <HAL_RCC_ClockConfig+0x244>)
 8009206:	681b      	ldr	r3, [r3, #0]
 8009208:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800920c:	2b00      	cmp	r3, #0
 800920e:	d121      	bne.n	8009254 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8009210:	2301      	movs	r3, #1
 8009212:	e0f6      	b.n	8009402 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	685b      	ldr	r3, [r3, #4]
 8009218:	2b03      	cmp	r3, #3
 800921a:	d107      	bne.n	800922c <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800921c:	4b36      	ldr	r3, [pc, #216]	; (80092f8 <HAL_RCC_ClockConfig+0x244>)
 800921e:	681b      	ldr	r3, [r3, #0]
 8009220:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009224:	2b00      	cmp	r3, #0
 8009226:	d115      	bne.n	8009254 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8009228:	2301      	movs	r3, #1
 800922a:	e0ea      	b.n	8009402 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	685b      	ldr	r3, [r3, #4]
 8009230:	2b01      	cmp	r3, #1
 8009232:	d107      	bne.n	8009244 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8009234:	4b30      	ldr	r3, [pc, #192]	; (80092f8 <HAL_RCC_ClockConfig+0x244>)
 8009236:	681b      	ldr	r3, [r3, #0]
 8009238:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800923c:	2b00      	cmp	r3, #0
 800923e:	d109      	bne.n	8009254 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8009240:	2301      	movs	r3, #1
 8009242:	e0de      	b.n	8009402 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8009244:	4b2c      	ldr	r3, [pc, #176]	; (80092f8 <HAL_RCC_ClockConfig+0x244>)
 8009246:	681b      	ldr	r3, [r3, #0]
 8009248:	f003 0304 	and.w	r3, r3, #4
 800924c:	2b00      	cmp	r3, #0
 800924e:	d101      	bne.n	8009254 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8009250:	2301      	movs	r3, #1
 8009252:	e0d6      	b.n	8009402 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8009254:	4b28      	ldr	r3, [pc, #160]	; (80092f8 <HAL_RCC_ClockConfig+0x244>)
 8009256:	691b      	ldr	r3, [r3, #16]
 8009258:	f023 0207 	bic.w	r2, r3, #7
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	685b      	ldr	r3, [r3, #4]
 8009260:	4925      	ldr	r1, [pc, #148]	; (80092f8 <HAL_RCC_ClockConfig+0x244>)
 8009262:	4313      	orrs	r3, r2
 8009264:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009266:	f7f9 fdad 	bl	8002dc4 <HAL_GetTick>
 800926a:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800926c:	e00a      	b.n	8009284 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800926e:	f7f9 fda9 	bl	8002dc4 <HAL_GetTick>
 8009272:	4602      	mov	r2, r0
 8009274:	697b      	ldr	r3, [r7, #20]
 8009276:	1ad3      	subs	r3, r2, r3
 8009278:	f241 3288 	movw	r2, #5000	; 0x1388
 800927c:	4293      	cmp	r3, r2
 800927e:	d901      	bls.n	8009284 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8009280:	2303      	movs	r3, #3
 8009282:	e0be      	b.n	8009402 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009284:	4b1c      	ldr	r3, [pc, #112]	; (80092f8 <HAL_RCC_ClockConfig+0x244>)
 8009286:	691b      	ldr	r3, [r3, #16]
 8009288:	f003 0238 	and.w	r2, r3, #56	; 0x38
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	685b      	ldr	r3, [r3, #4]
 8009290:	00db      	lsls	r3, r3, #3
 8009292:	429a      	cmp	r2, r3
 8009294:	d1eb      	bne.n	800926e <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	681b      	ldr	r3, [r3, #0]
 800929a:	f003 0302 	and.w	r3, r3, #2
 800929e:	2b00      	cmp	r3, #0
 80092a0:	d010      	beq.n	80092c4 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	68da      	ldr	r2, [r3, #12]
 80092a6:	4b14      	ldr	r3, [pc, #80]	; (80092f8 <HAL_RCC_ClockConfig+0x244>)
 80092a8:	699b      	ldr	r3, [r3, #24]
 80092aa:	f003 030f 	and.w	r3, r3, #15
 80092ae:	429a      	cmp	r2, r3
 80092b0:	d208      	bcs.n	80092c4 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80092b2:	4b11      	ldr	r3, [pc, #68]	; (80092f8 <HAL_RCC_ClockConfig+0x244>)
 80092b4:	699b      	ldr	r3, [r3, #24]
 80092b6:	f023 020f 	bic.w	r2, r3, #15
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	68db      	ldr	r3, [r3, #12]
 80092be:	490e      	ldr	r1, [pc, #56]	; (80092f8 <HAL_RCC_ClockConfig+0x244>)
 80092c0:	4313      	orrs	r3, r2
 80092c2:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80092c4:	4b0b      	ldr	r3, [pc, #44]	; (80092f4 <HAL_RCC_ClockConfig+0x240>)
 80092c6:	681b      	ldr	r3, [r3, #0]
 80092c8:	f003 030f 	and.w	r3, r3, #15
 80092cc:	683a      	ldr	r2, [r7, #0]
 80092ce:	429a      	cmp	r2, r3
 80092d0:	d214      	bcs.n	80092fc <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80092d2:	4b08      	ldr	r3, [pc, #32]	; (80092f4 <HAL_RCC_ClockConfig+0x240>)
 80092d4:	681b      	ldr	r3, [r3, #0]
 80092d6:	f023 020f 	bic.w	r2, r3, #15
 80092da:	4906      	ldr	r1, [pc, #24]	; (80092f4 <HAL_RCC_ClockConfig+0x240>)
 80092dc:	683b      	ldr	r3, [r7, #0]
 80092de:	4313      	orrs	r3, r2
 80092e0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80092e2:	4b04      	ldr	r3, [pc, #16]	; (80092f4 <HAL_RCC_ClockConfig+0x240>)
 80092e4:	681b      	ldr	r3, [r3, #0]
 80092e6:	f003 030f 	and.w	r3, r3, #15
 80092ea:	683a      	ldr	r2, [r7, #0]
 80092ec:	429a      	cmp	r2, r3
 80092ee:	d005      	beq.n	80092fc <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80092f0:	2301      	movs	r3, #1
 80092f2:	e086      	b.n	8009402 <HAL_RCC_ClockConfig+0x34e>
 80092f4:	52002000 	.word	0x52002000
 80092f8:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	681b      	ldr	r3, [r3, #0]
 8009300:	f003 0304 	and.w	r3, r3, #4
 8009304:	2b00      	cmp	r3, #0
 8009306:	d010      	beq.n	800932a <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	691a      	ldr	r2, [r3, #16]
 800930c:	4b3f      	ldr	r3, [pc, #252]	; (800940c <HAL_RCC_ClockConfig+0x358>)
 800930e:	699b      	ldr	r3, [r3, #24]
 8009310:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8009314:	429a      	cmp	r2, r3
 8009316:	d208      	bcs.n	800932a <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8009318:	4b3c      	ldr	r3, [pc, #240]	; (800940c <HAL_RCC_ClockConfig+0x358>)
 800931a:	699b      	ldr	r3, [r3, #24]
 800931c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	691b      	ldr	r3, [r3, #16]
 8009324:	4939      	ldr	r1, [pc, #228]	; (800940c <HAL_RCC_ClockConfig+0x358>)
 8009326:	4313      	orrs	r3, r2
 8009328:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	681b      	ldr	r3, [r3, #0]
 800932e:	f003 0308 	and.w	r3, r3, #8
 8009332:	2b00      	cmp	r3, #0
 8009334:	d010      	beq.n	8009358 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	695a      	ldr	r2, [r3, #20]
 800933a:	4b34      	ldr	r3, [pc, #208]	; (800940c <HAL_RCC_ClockConfig+0x358>)
 800933c:	69db      	ldr	r3, [r3, #28]
 800933e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8009342:	429a      	cmp	r2, r3
 8009344:	d208      	bcs.n	8009358 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8009346:	4b31      	ldr	r3, [pc, #196]	; (800940c <HAL_RCC_ClockConfig+0x358>)
 8009348:	69db      	ldr	r3, [r3, #28]
 800934a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	695b      	ldr	r3, [r3, #20]
 8009352:	492e      	ldr	r1, [pc, #184]	; (800940c <HAL_RCC_ClockConfig+0x358>)
 8009354:	4313      	orrs	r3, r2
 8009356:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	681b      	ldr	r3, [r3, #0]
 800935c:	f003 0310 	and.w	r3, r3, #16
 8009360:	2b00      	cmp	r3, #0
 8009362:	d010      	beq.n	8009386 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	699a      	ldr	r2, [r3, #24]
 8009368:	4b28      	ldr	r3, [pc, #160]	; (800940c <HAL_RCC_ClockConfig+0x358>)
 800936a:	69db      	ldr	r3, [r3, #28]
 800936c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8009370:	429a      	cmp	r2, r3
 8009372:	d208      	bcs.n	8009386 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8009374:	4b25      	ldr	r3, [pc, #148]	; (800940c <HAL_RCC_ClockConfig+0x358>)
 8009376:	69db      	ldr	r3, [r3, #28]
 8009378:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	699b      	ldr	r3, [r3, #24]
 8009380:	4922      	ldr	r1, [pc, #136]	; (800940c <HAL_RCC_ClockConfig+0x358>)
 8009382:	4313      	orrs	r3, r2
 8009384:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	681b      	ldr	r3, [r3, #0]
 800938a:	f003 0320 	and.w	r3, r3, #32
 800938e:	2b00      	cmp	r3, #0
 8009390:	d010      	beq.n	80093b4 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8009392:	687b      	ldr	r3, [r7, #4]
 8009394:	69da      	ldr	r2, [r3, #28]
 8009396:	4b1d      	ldr	r3, [pc, #116]	; (800940c <HAL_RCC_ClockConfig+0x358>)
 8009398:	6a1b      	ldr	r3, [r3, #32]
 800939a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800939e:	429a      	cmp	r2, r3
 80093a0:	d208      	bcs.n	80093b4 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80093a2:	4b1a      	ldr	r3, [pc, #104]	; (800940c <HAL_RCC_ClockConfig+0x358>)
 80093a4:	6a1b      	ldr	r3, [r3, #32]
 80093a6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	69db      	ldr	r3, [r3, #28]
 80093ae:	4917      	ldr	r1, [pc, #92]	; (800940c <HAL_RCC_ClockConfig+0x358>)
 80093b0:	4313      	orrs	r3, r2
 80093b2:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80093b4:	f000 f844 	bl	8009440 <HAL_RCC_GetSysClockFreq>
 80093b8:	4602      	mov	r2, r0
 80093ba:	4b14      	ldr	r3, [pc, #80]	; (800940c <HAL_RCC_ClockConfig+0x358>)
 80093bc:	699b      	ldr	r3, [r3, #24]
 80093be:	0a1b      	lsrs	r3, r3, #8
 80093c0:	f003 030f 	and.w	r3, r3, #15
 80093c4:	4912      	ldr	r1, [pc, #72]	; (8009410 <HAL_RCC_ClockConfig+0x35c>)
 80093c6:	5ccb      	ldrb	r3, [r1, r3]
 80093c8:	f003 031f 	and.w	r3, r3, #31
 80093cc:	fa22 f303 	lsr.w	r3, r2, r3
 80093d0:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80093d2:	4b0e      	ldr	r3, [pc, #56]	; (800940c <HAL_RCC_ClockConfig+0x358>)
 80093d4:	699b      	ldr	r3, [r3, #24]
 80093d6:	f003 030f 	and.w	r3, r3, #15
 80093da:	4a0d      	ldr	r2, [pc, #52]	; (8009410 <HAL_RCC_ClockConfig+0x35c>)
 80093dc:	5cd3      	ldrb	r3, [r2, r3]
 80093de:	f003 031f 	and.w	r3, r3, #31
 80093e2:	693a      	ldr	r2, [r7, #16]
 80093e4:	fa22 f303 	lsr.w	r3, r2, r3
 80093e8:	4a0a      	ldr	r2, [pc, #40]	; (8009414 <HAL_RCC_ClockConfig+0x360>)
 80093ea:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80093ec:	4a0a      	ldr	r2, [pc, #40]	; (8009418 <HAL_RCC_ClockConfig+0x364>)
 80093ee:	693b      	ldr	r3, [r7, #16]
 80093f0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 80093f2:	4b0a      	ldr	r3, [pc, #40]	; (800941c <HAL_RCC_ClockConfig+0x368>)
 80093f4:	681b      	ldr	r3, [r3, #0]
 80093f6:	4618      	mov	r0, r3
 80093f8:	f7f9 fc9a 	bl	8002d30 <HAL_InitTick>
 80093fc:	4603      	mov	r3, r0
 80093fe:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8009400:	7bfb      	ldrb	r3, [r7, #15]
}
 8009402:	4618      	mov	r0, r3
 8009404:	3718      	adds	r7, #24
 8009406:	46bd      	mov	sp, r7
 8009408:	bd80      	pop	{r7, pc}
 800940a:	bf00      	nop
 800940c:	58024400 	.word	0x58024400
 8009410:	0801d83c 	.word	0x0801d83c
 8009414:	20000014 	.word	0x20000014
 8009418:	20000010 	.word	0x20000010
 800941c:	20000020 	.word	0x20000020

08009420 <HAL_RCC_EnableCSS>:
  *         allowing the MCU to perform rescue operations. The CSSI is linked to
  *         the Cortex-M NMI (Non-Mask-able Interrupt) exception vector.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 8009420:	b480      	push	{r7}
 8009422:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_CSSHSEON) ;
 8009424:	4b05      	ldr	r3, [pc, #20]	; (800943c <HAL_RCC_EnableCSS+0x1c>)
 8009426:	681b      	ldr	r3, [r3, #0]
 8009428:	4a04      	ldr	r2, [pc, #16]	; (800943c <HAL_RCC_EnableCSS+0x1c>)
 800942a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800942e:	6013      	str	r3, [r2, #0]
}
 8009430:	bf00      	nop
 8009432:	46bd      	mov	sp, r7
 8009434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009438:	4770      	bx	lr
 800943a:	bf00      	nop
 800943c:	58024400 	.word	0x58024400

08009440 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8009440:	b480      	push	{r7}
 8009442:	b089      	sub	sp, #36	; 0x24
 8009444:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8009446:	4bb3      	ldr	r3, [pc, #716]	; (8009714 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009448:	691b      	ldr	r3, [r3, #16]
 800944a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800944e:	2b18      	cmp	r3, #24
 8009450:	f200 8155 	bhi.w	80096fe <HAL_RCC_GetSysClockFreq+0x2be>
 8009454:	a201      	add	r2, pc, #4	; (adr r2, 800945c <HAL_RCC_GetSysClockFreq+0x1c>)
 8009456:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800945a:	bf00      	nop
 800945c:	080094c1 	.word	0x080094c1
 8009460:	080096ff 	.word	0x080096ff
 8009464:	080096ff 	.word	0x080096ff
 8009468:	080096ff 	.word	0x080096ff
 800946c:	080096ff 	.word	0x080096ff
 8009470:	080096ff 	.word	0x080096ff
 8009474:	080096ff 	.word	0x080096ff
 8009478:	080096ff 	.word	0x080096ff
 800947c:	080094e7 	.word	0x080094e7
 8009480:	080096ff 	.word	0x080096ff
 8009484:	080096ff 	.word	0x080096ff
 8009488:	080096ff 	.word	0x080096ff
 800948c:	080096ff 	.word	0x080096ff
 8009490:	080096ff 	.word	0x080096ff
 8009494:	080096ff 	.word	0x080096ff
 8009498:	080096ff 	.word	0x080096ff
 800949c:	080094ed 	.word	0x080094ed
 80094a0:	080096ff 	.word	0x080096ff
 80094a4:	080096ff 	.word	0x080096ff
 80094a8:	080096ff 	.word	0x080096ff
 80094ac:	080096ff 	.word	0x080096ff
 80094b0:	080096ff 	.word	0x080096ff
 80094b4:	080096ff 	.word	0x080096ff
 80094b8:	080096ff 	.word	0x080096ff
 80094bc:	080094f3 	.word	0x080094f3
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80094c0:	4b94      	ldr	r3, [pc, #592]	; (8009714 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80094c2:	681b      	ldr	r3, [r3, #0]
 80094c4:	f003 0320 	and.w	r3, r3, #32
 80094c8:	2b00      	cmp	r3, #0
 80094ca:	d009      	beq.n	80094e0 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80094cc:	4b91      	ldr	r3, [pc, #580]	; (8009714 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80094ce:	681b      	ldr	r3, [r3, #0]
 80094d0:	08db      	lsrs	r3, r3, #3
 80094d2:	f003 0303 	and.w	r3, r3, #3
 80094d6:	4a90      	ldr	r2, [pc, #576]	; (8009718 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80094d8:	fa22 f303 	lsr.w	r3, r2, r3
 80094dc:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 80094de:	e111      	b.n	8009704 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80094e0:	4b8d      	ldr	r3, [pc, #564]	; (8009718 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80094e2:	61bb      	str	r3, [r7, #24]
      break;
 80094e4:	e10e      	b.n	8009704 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 80094e6:	4b8d      	ldr	r3, [pc, #564]	; (800971c <HAL_RCC_GetSysClockFreq+0x2dc>)
 80094e8:	61bb      	str	r3, [r7, #24]
      break;
 80094ea:	e10b      	b.n	8009704 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 80094ec:	4b8c      	ldr	r3, [pc, #560]	; (8009720 <HAL_RCC_GetSysClockFreq+0x2e0>)
 80094ee:	61bb      	str	r3, [r7, #24]
      break;
 80094f0:	e108      	b.n	8009704 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80094f2:	4b88      	ldr	r3, [pc, #544]	; (8009714 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80094f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80094f6:	f003 0303 	and.w	r3, r3, #3
 80094fa:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 80094fc:	4b85      	ldr	r3, [pc, #532]	; (8009714 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80094fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009500:	091b      	lsrs	r3, r3, #4
 8009502:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009506:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8009508:	4b82      	ldr	r3, [pc, #520]	; (8009714 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800950a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800950c:	f003 0301 	and.w	r3, r3, #1
 8009510:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8009512:	4b80      	ldr	r3, [pc, #512]	; (8009714 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009514:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009516:	08db      	lsrs	r3, r3, #3
 8009518:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800951c:	68fa      	ldr	r2, [r7, #12]
 800951e:	fb02 f303 	mul.w	r3, r2, r3
 8009522:	ee07 3a90 	vmov	s15, r3
 8009526:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800952a:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800952e:	693b      	ldr	r3, [r7, #16]
 8009530:	2b00      	cmp	r3, #0
 8009532:	f000 80e1 	beq.w	80096f8 <HAL_RCC_GetSysClockFreq+0x2b8>
 8009536:	697b      	ldr	r3, [r7, #20]
 8009538:	2b02      	cmp	r3, #2
 800953a:	f000 8083 	beq.w	8009644 <HAL_RCC_GetSysClockFreq+0x204>
 800953e:	697b      	ldr	r3, [r7, #20]
 8009540:	2b02      	cmp	r3, #2
 8009542:	f200 80a1 	bhi.w	8009688 <HAL_RCC_GetSysClockFreq+0x248>
 8009546:	697b      	ldr	r3, [r7, #20]
 8009548:	2b00      	cmp	r3, #0
 800954a:	d003      	beq.n	8009554 <HAL_RCC_GetSysClockFreq+0x114>
 800954c:	697b      	ldr	r3, [r7, #20]
 800954e:	2b01      	cmp	r3, #1
 8009550:	d056      	beq.n	8009600 <HAL_RCC_GetSysClockFreq+0x1c0>
 8009552:	e099      	b.n	8009688 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8009554:	4b6f      	ldr	r3, [pc, #444]	; (8009714 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009556:	681b      	ldr	r3, [r3, #0]
 8009558:	f003 0320 	and.w	r3, r3, #32
 800955c:	2b00      	cmp	r3, #0
 800955e:	d02d      	beq.n	80095bc <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8009560:	4b6c      	ldr	r3, [pc, #432]	; (8009714 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009562:	681b      	ldr	r3, [r3, #0]
 8009564:	08db      	lsrs	r3, r3, #3
 8009566:	f003 0303 	and.w	r3, r3, #3
 800956a:	4a6b      	ldr	r2, [pc, #428]	; (8009718 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800956c:	fa22 f303 	lsr.w	r3, r2, r3
 8009570:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	ee07 3a90 	vmov	s15, r3
 8009578:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800957c:	693b      	ldr	r3, [r7, #16]
 800957e:	ee07 3a90 	vmov	s15, r3
 8009582:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009586:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800958a:	4b62      	ldr	r3, [pc, #392]	; (8009714 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800958c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800958e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009592:	ee07 3a90 	vmov	s15, r3
 8009596:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800959a:	ed97 6a02 	vldr	s12, [r7, #8]
 800959e:	eddf 5a61 	vldr	s11, [pc, #388]	; 8009724 <HAL_RCC_GetSysClockFreq+0x2e4>
 80095a2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80095a6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80095aa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80095ae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80095b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80095b6:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 80095ba:	e087      	b.n	80096cc <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80095bc:	693b      	ldr	r3, [r7, #16]
 80095be:	ee07 3a90 	vmov	s15, r3
 80095c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80095c6:	eddf 6a58 	vldr	s13, [pc, #352]	; 8009728 <HAL_RCC_GetSysClockFreq+0x2e8>
 80095ca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80095ce:	4b51      	ldr	r3, [pc, #324]	; (8009714 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80095d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80095d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80095d6:	ee07 3a90 	vmov	s15, r3
 80095da:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80095de:	ed97 6a02 	vldr	s12, [r7, #8]
 80095e2:	eddf 5a50 	vldr	s11, [pc, #320]	; 8009724 <HAL_RCC_GetSysClockFreq+0x2e4>
 80095e6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80095ea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80095ee:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80095f2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80095f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80095fa:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80095fe:	e065      	b.n	80096cc <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009600:	693b      	ldr	r3, [r7, #16]
 8009602:	ee07 3a90 	vmov	s15, r3
 8009606:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800960a:	eddf 6a48 	vldr	s13, [pc, #288]	; 800972c <HAL_RCC_GetSysClockFreq+0x2ec>
 800960e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009612:	4b40      	ldr	r3, [pc, #256]	; (8009714 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009614:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009616:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800961a:	ee07 3a90 	vmov	s15, r3
 800961e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009622:	ed97 6a02 	vldr	s12, [r7, #8]
 8009626:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8009724 <HAL_RCC_GetSysClockFreq+0x2e4>
 800962a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800962e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009632:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8009636:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800963a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800963e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8009642:	e043      	b.n	80096cc <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009644:	693b      	ldr	r3, [r7, #16]
 8009646:	ee07 3a90 	vmov	s15, r3
 800964a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800964e:	eddf 6a38 	vldr	s13, [pc, #224]	; 8009730 <HAL_RCC_GetSysClockFreq+0x2f0>
 8009652:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8009656:	4b2f      	ldr	r3, [pc, #188]	; (8009714 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8009658:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800965a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800965e:	ee07 3a90 	vmov	s15, r3
 8009662:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8009666:	ed97 6a02 	vldr	s12, [r7, #8]
 800966a:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8009724 <HAL_RCC_GetSysClockFreq+0x2e4>
 800966e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8009672:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8009676:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800967a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800967e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009682:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8009686:	e021      	b.n	80096cc <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8009688:	693b      	ldr	r3, [r7, #16]
 800968a:	ee07 3a90 	vmov	s15, r3
 800968e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8009692:	eddf 6a26 	vldr	s13, [pc, #152]	; 800972c <HAL_RCC_GetSysClockFreq+0x2ec>
 8009696:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800969a:	4b1e      	ldr	r3, [pc, #120]	; (8009714 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800969c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800969e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80096a2:	ee07 3a90 	vmov	s15, r3
 80096a6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80096aa:	ed97 6a02 	vldr	s12, [r7, #8]
 80096ae:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8009724 <HAL_RCC_GetSysClockFreq+0x2e4>
 80096b2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80096b6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80096ba:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80096be:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80096c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80096c6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80096ca:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 80096cc:	4b11      	ldr	r3, [pc, #68]	; (8009714 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80096ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80096d0:	0a5b      	lsrs	r3, r3, #9
 80096d2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80096d6:	3301      	adds	r3, #1
 80096d8:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 80096da:	683b      	ldr	r3, [r7, #0]
 80096dc:	ee07 3a90 	vmov	s15, r3
 80096e0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80096e4:	edd7 6a07 	vldr	s13, [r7, #28]
 80096e8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80096ec:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80096f0:	ee17 3a90 	vmov	r3, s15
 80096f4:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 80096f6:	e005      	b.n	8009704 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 80096f8:	2300      	movs	r3, #0
 80096fa:	61bb      	str	r3, [r7, #24]
      break;
 80096fc:	e002      	b.n	8009704 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 80096fe:	4b07      	ldr	r3, [pc, #28]	; (800971c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8009700:	61bb      	str	r3, [r7, #24]
      break;
 8009702:	bf00      	nop
  }

  return sysclockfreq;
 8009704:	69bb      	ldr	r3, [r7, #24]
}
 8009706:	4618      	mov	r0, r3
 8009708:	3724      	adds	r7, #36	; 0x24
 800970a:	46bd      	mov	sp, r7
 800970c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009710:	4770      	bx	lr
 8009712:	bf00      	nop
 8009714:	58024400 	.word	0x58024400
 8009718:	03d09000 	.word	0x03d09000
 800971c:	003d0900 	.word	0x003d0900
 8009720:	00989680 	.word	0x00989680
 8009724:	46000000 	.word	0x46000000
 8009728:	4c742400 	.word	0x4c742400
 800972c:	4a742400 	.word	0x4a742400
 8009730:	4b189680 	.word	0x4b189680

08009734 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8009734:	b580      	push	{r7, lr}
 8009736:	b082      	sub	sp, #8
 8009738:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800973a:	f7ff fe81 	bl	8009440 <HAL_RCC_GetSysClockFreq>
 800973e:	4602      	mov	r2, r0
 8009740:	4b10      	ldr	r3, [pc, #64]	; (8009784 <HAL_RCC_GetHCLKFreq+0x50>)
 8009742:	699b      	ldr	r3, [r3, #24]
 8009744:	0a1b      	lsrs	r3, r3, #8
 8009746:	f003 030f 	and.w	r3, r3, #15
 800974a:	490f      	ldr	r1, [pc, #60]	; (8009788 <HAL_RCC_GetHCLKFreq+0x54>)
 800974c:	5ccb      	ldrb	r3, [r1, r3]
 800974e:	f003 031f 	and.w	r3, r3, #31
 8009752:	fa22 f303 	lsr.w	r3, r2, r3
 8009756:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8009758:	4b0a      	ldr	r3, [pc, #40]	; (8009784 <HAL_RCC_GetHCLKFreq+0x50>)
 800975a:	699b      	ldr	r3, [r3, #24]
 800975c:	f003 030f 	and.w	r3, r3, #15
 8009760:	4a09      	ldr	r2, [pc, #36]	; (8009788 <HAL_RCC_GetHCLKFreq+0x54>)
 8009762:	5cd3      	ldrb	r3, [r2, r3]
 8009764:	f003 031f 	and.w	r3, r3, #31
 8009768:	687a      	ldr	r2, [r7, #4]
 800976a:	fa22 f303 	lsr.w	r3, r2, r3
 800976e:	4a07      	ldr	r2, [pc, #28]	; (800978c <HAL_RCC_GetHCLKFreq+0x58>)
 8009770:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8009772:	4a07      	ldr	r2, [pc, #28]	; (8009790 <HAL_RCC_GetHCLKFreq+0x5c>)
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8009778:	4b04      	ldr	r3, [pc, #16]	; (800978c <HAL_RCC_GetHCLKFreq+0x58>)
 800977a:	681b      	ldr	r3, [r3, #0]
}
 800977c:	4618      	mov	r0, r3
 800977e:	3708      	adds	r7, #8
 8009780:	46bd      	mov	sp, r7
 8009782:	bd80      	pop	{r7, pc}
 8009784:	58024400 	.word	0x58024400
 8009788:	0801d83c 	.word	0x0801d83c
 800978c:	20000014 	.word	0x20000014
 8009790:	20000010 	.word	0x20000010

08009794 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8009794:	b580      	push	{r7, lr}
 8009796:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8009798:	f7ff ffcc 	bl	8009734 <HAL_RCC_GetHCLKFreq>
 800979c:	4602      	mov	r2, r0
 800979e:	4b06      	ldr	r3, [pc, #24]	; (80097b8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80097a0:	69db      	ldr	r3, [r3, #28]
 80097a2:	091b      	lsrs	r3, r3, #4
 80097a4:	f003 0307 	and.w	r3, r3, #7
 80097a8:	4904      	ldr	r1, [pc, #16]	; (80097bc <HAL_RCC_GetPCLK1Freq+0x28>)
 80097aa:	5ccb      	ldrb	r3, [r1, r3]
 80097ac:	f003 031f 	and.w	r3, r3, #31
 80097b0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 80097b4:	4618      	mov	r0, r3
 80097b6:	bd80      	pop	{r7, pc}
 80097b8:	58024400 	.word	0x58024400
 80097bc:	0801d83c 	.word	0x0801d83c

080097c0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80097c0:	b580      	push	{r7, lr}
 80097c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 80097c4:	f7ff ffb6 	bl	8009734 <HAL_RCC_GetHCLKFreq>
 80097c8:	4602      	mov	r2, r0
 80097ca:	4b06      	ldr	r3, [pc, #24]	; (80097e4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80097cc:	69db      	ldr	r3, [r3, #28]
 80097ce:	0a1b      	lsrs	r3, r3, #8
 80097d0:	f003 0307 	and.w	r3, r3, #7
 80097d4:	4904      	ldr	r1, [pc, #16]	; (80097e8 <HAL_RCC_GetPCLK2Freq+0x28>)
 80097d6:	5ccb      	ldrb	r3, [r1, r3]
 80097d8:	f003 031f 	and.w	r3, r3, #31
 80097dc:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 80097e0:	4618      	mov	r0, r3
 80097e2:	bd80      	pop	{r7, pc}
 80097e4:	58024400 	.word	0x58024400
 80097e8:	0801d83c 	.word	0x0801d83c

080097ec <HAL_RCC_NMI_IRQHandler>:
  * @brief This function handles the RCC CSS interrupt request.
  * @note This API should be called under the NMI_Handler().
  * @retval None
  */
void HAL_RCC_NMI_IRQHandler(void)
{
 80097ec:	b580      	push	{r7, lr}
 80097ee:	af00      	add	r7, sp, #0
  /* Check RCC CSSF flag  */
  if (__HAL_RCC_GET_IT(RCC_IT_CSS))
 80097f0:	4b07      	ldr	r3, [pc, #28]	; (8009810 <HAL_RCC_NMI_IRQHandler+0x24>)
 80097f2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80097f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80097f8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80097fc:	d105      	bne.n	800980a <HAL_RCC_NMI_IRQHandler+0x1e>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_CSSCallback();
 80097fe:	f000 f809 	bl	8009814 <HAL_RCC_CSSCallback>

    /* Clear RCC CSS pending bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 8009802:	4b03      	ldr	r3, [pc, #12]	; (8009810 <HAL_RCC_NMI_IRQHandler+0x24>)
 8009804:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8009808:	669a      	str	r2, [r3, #104]	; 0x68
  }
}
 800980a:	bf00      	nop
 800980c:	bd80      	pop	{r7, pc}
 800980e:	bf00      	nop
 8009810:	58024400 	.word	0x58024400

08009814 <HAL_RCC_CSSCallback>:
/**
  * @brief  RCC Clock Security System interrupt callback
  * @retval none
  */
__weak void HAL_RCC_CSSCallback(void)
{
 8009814:	b480      	push	{r7}
 8009816:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RCC_CSSCallback could be implemented in the user file
   */
}
 8009818:	bf00      	nop
 800981a:	46bd      	mov	sp, r7
 800981c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009820:	4770      	bx	lr
	...

08009824 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8009824:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009828:	b0ca      	sub	sp, #296	; 0x128
 800982a:	af00      	add	r7, sp, #0
 800982c:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8009830:	2300      	movs	r3, #0
 8009832:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8009836:	2300      	movs	r3, #0
 8009838:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800983c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009840:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009844:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 8009848:	2500      	movs	r5, #0
 800984a:	ea54 0305 	orrs.w	r3, r4, r5
 800984e:	d049      	beq.n	80098e4 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8009850:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009854:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009856:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800985a:	d02f      	beq.n	80098bc <HAL_RCCEx_PeriphCLKConfig+0x98>
 800985c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8009860:	d828      	bhi.n	80098b4 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8009862:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009866:	d01a      	beq.n	800989e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8009868:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800986c:	d822      	bhi.n	80098b4 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800986e:	2b00      	cmp	r3, #0
 8009870:	d003      	beq.n	800987a <HAL_RCCEx_PeriphCLKConfig+0x56>
 8009872:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009876:	d007      	beq.n	8009888 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8009878:	e01c      	b.n	80098b4 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800987a:	4bb8      	ldr	r3, [pc, #736]	; (8009b5c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800987c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800987e:	4ab7      	ldr	r2, [pc, #732]	; (8009b5c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009880:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009884:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8009886:	e01a      	b.n	80098be <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8009888:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800988c:	3308      	adds	r3, #8
 800988e:	2102      	movs	r1, #2
 8009890:	4618      	mov	r0, r3
 8009892:	f002 fbb7 	bl	800c004 <RCCEx_PLL2_Config>
 8009896:	4603      	mov	r3, r0
 8009898:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800989c:	e00f      	b.n	80098be <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800989e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80098a2:	3328      	adds	r3, #40	; 0x28
 80098a4:	2102      	movs	r1, #2
 80098a6:	4618      	mov	r0, r3
 80098a8:	f002 fc5e 	bl	800c168 <RCCEx_PLL3_Config>
 80098ac:	4603      	mov	r3, r0
 80098ae:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80098b2:	e004      	b.n	80098be <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80098b4:	2301      	movs	r3, #1
 80098b6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80098ba:	e000      	b.n	80098be <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 80098bc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80098be:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80098c2:	2b00      	cmp	r3, #0
 80098c4:	d10a      	bne.n	80098dc <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80098c6:	4ba5      	ldr	r3, [pc, #660]	; (8009b5c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80098c8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80098ca:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 80098ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80098d2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80098d4:	4aa1      	ldr	r2, [pc, #644]	; (8009b5c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80098d6:	430b      	orrs	r3, r1
 80098d8:	6513      	str	r3, [r2, #80]	; 0x50
 80098da:	e003      	b.n	80098e4 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80098dc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80098e0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80098e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80098e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098ec:	f402 7880 	and.w	r8, r2, #256	; 0x100
 80098f0:	f04f 0900 	mov.w	r9, #0
 80098f4:	ea58 0309 	orrs.w	r3, r8, r9
 80098f8:	d047      	beq.n	800998a <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 80098fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80098fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009900:	2b04      	cmp	r3, #4
 8009902:	d82a      	bhi.n	800995a <HAL_RCCEx_PeriphCLKConfig+0x136>
 8009904:	a201      	add	r2, pc, #4	; (adr r2, 800990c <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8009906:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800990a:	bf00      	nop
 800990c:	08009921 	.word	0x08009921
 8009910:	0800992f 	.word	0x0800992f
 8009914:	08009945 	.word	0x08009945
 8009918:	08009963 	.word	0x08009963
 800991c:	08009963 	.word	0x08009963
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009920:	4b8e      	ldr	r3, [pc, #568]	; (8009b5c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009922:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009924:	4a8d      	ldr	r2, [pc, #564]	; (8009b5c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009926:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800992a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800992c:	e01a      	b.n	8009964 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800992e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009932:	3308      	adds	r3, #8
 8009934:	2100      	movs	r1, #0
 8009936:	4618      	mov	r0, r3
 8009938:	f002 fb64 	bl	800c004 <RCCEx_PLL2_Config>
 800993c:	4603      	mov	r3, r0
 800993e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8009942:	e00f      	b.n	8009964 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8009944:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009948:	3328      	adds	r3, #40	; 0x28
 800994a:	2100      	movs	r1, #0
 800994c:	4618      	mov	r0, r3
 800994e:	f002 fc0b 	bl	800c168 <RCCEx_PLL3_Config>
 8009952:	4603      	mov	r3, r0
 8009954:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8009958:	e004      	b.n	8009964 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800995a:	2301      	movs	r3, #1
 800995c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8009960:	e000      	b.n	8009964 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8009962:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009964:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009968:	2b00      	cmp	r3, #0
 800996a:	d10a      	bne.n	8009982 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800996c:	4b7b      	ldr	r3, [pc, #492]	; (8009b5c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800996e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009970:	f023 0107 	bic.w	r1, r3, #7
 8009974:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009978:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800997a:	4a78      	ldr	r2, [pc, #480]	; (8009b5c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800997c:	430b      	orrs	r3, r1
 800997e:	6513      	str	r3, [r2, #80]	; 0x50
 8009980:	e003      	b.n	800998a <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009982:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009986:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800998a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800998e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009992:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 8009996:	f04f 0b00 	mov.w	fp, #0
 800999a:	ea5a 030b 	orrs.w	r3, sl, fp
 800999e:	d04c      	beq.n	8009a3a <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 80099a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80099a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80099a6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80099aa:	d030      	beq.n	8009a0e <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 80099ac:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80099b0:	d829      	bhi.n	8009a06 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80099b2:	2bc0      	cmp	r3, #192	; 0xc0
 80099b4:	d02d      	beq.n	8009a12 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 80099b6:	2bc0      	cmp	r3, #192	; 0xc0
 80099b8:	d825      	bhi.n	8009a06 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80099ba:	2b80      	cmp	r3, #128	; 0x80
 80099bc:	d018      	beq.n	80099f0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 80099be:	2b80      	cmp	r3, #128	; 0x80
 80099c0:	d821      	bhi.n	8009a06 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80099c2:	2b00      	cmp	r3, #0
 80099c4:	d002      	beq.n	80099cc <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 80099c6:	2b40      	cmp	r3, #64	; 0x40
 80099c8:	d007      	beq.n	80099da <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 80099ca:	e01c      	b.n	8009a06 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80099cc:	4b63      	ldr	r3, [pc, #396]	; (8009b5c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80099ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80099d0:	4a62      	ldr	r2, [pc, #392]	; (8009b5c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80099d2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80099d6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80099d8:	e01c      	b.n	8009a14 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80099da:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80099de:	3308      	adds	r3, #8
 80099e0:	2100      	movs	r1, #0
 80099e2:	4618      	mov	r0, r3
 80099e4:	f002 fb0e 	bl	800c004 <RCCEx_PLL2_Config>
 80099e8:	4603      	mov	r3, r0
 80099ea:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80099ee:	e011      	b.n	8009a14 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80099f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80099f4:	3328      	adds	r3, #40	; 0x28
 80099f6:	2100      	movs	r1, #0
 80099f8:	4618      	mov	r0, r3
 80099fa:	f002 fbb5 	bl	800c168 <RCCEx_PLL3_Config>
 80099fe:	4603      	mov	r3, r0
 8009a00:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8009a04:	e006      	b.n	8009a14 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009a06:	2301      	movs	r3, #1
 8009a08:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8009a0c:	e002      	b.n	8009a14 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8009a0e:	bf00      	nop
 8009a10:	e000      	b.n	8009a14 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8009a12:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009a14:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009a18:	2b00      	cmp	r3, #0
 8009a1a:	d10a      	bne.n	8009a32 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8009a1c:	4b4f      	ldr	r3, [pc, #316]	; (8009b5c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009a1e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009a20:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 8009a24:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009a28:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009a2a:	4a4c      	ldr	r2, [pc, #304]	; (8009b5c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009a2c:	430b      	orrs	r3, r1
 8009a2e:	6513      	str	r3, [r2, #80]	; 0x50
 8009a30:	e003      	b.n	8009a3a <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009a32:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009a36:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8009a3a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009a3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a42:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 8009a46:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8009a4a:	2300      	movs	r3, #0
 8009a4c:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8009a50:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	; 0x108
 8009a54:	460b      	mov	r3, r1
 8009a56:	4313      	orrs	r3, r2
 8009a58:	d053      	beq.n	8009b02 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8009a5a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009a5e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8009a62:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8009a66:	d035      	beq.n	8009ad4 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8009a68:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8009a6c:	d82e      	bhi.n	8009acc <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8009a6e:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8009a72:	d031      	beq.n	8009ad8 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8009a74:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8009a78:	d828      	bhi.n	8009acc <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8009a7a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009a7e:	d01a      	beq.n	8009ab6 <HAL_RCCEx_PeriphCLKConfig+0x292>
 8009a80:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009a84:	d822      	bhi.n	8009acc <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8009a86:	2b00      	cmp	r3, #0
 8009a88:	d003      	beq.n	8009a92 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8009a8a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8009a8e:	d007      	beq.n	8009aa0 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8009a90:	e01c      	b.n	8009acc <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009a92:	4b32      	ldr	r3, [pc, #200]	; (8009b5c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009a94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a96:	4a31      	ldr	r2, [pc, #196]	; (8009b5c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009a98:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009a9c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8009a9e:	e01c      	b.n	8009ada <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009aa0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009aa4:	3308      	adds	r3, #8
 8009aa6:	2100      	movs	r1, #0
 8009aa8:	4618      	mov	r0, r3
 8009aaa:	f002 faab 	bl	800c004 <RCCEx_PLL2_Config>
 8009aae:	4603      	mov	r3, r0
 8009ab0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8009ab4:	e011      	b.n	8009ada <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8009ab6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009aba:	3328      	adds	r3, #40	; 0x28
 8009abc:	2100      	movs	r1, #0
 8009abe:	4618      	mov	r0, r3
 8009ac0:	f002 fb52 	bl	800c168 <RCCEx_PLL3_Config>
 8009ac4:	4603      	mov	r3, r0
 8009ac6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8009aca:	e006      	b.n	8009ada <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8009acc:	2301      	movs	r3, #1
 8009ace:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8009ad2:	e002      	b.n	8009ada <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8009ad4:	bf00      	nop
 8009ad6:	e000      	b.n	8009ada <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8009ad8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009ada:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009ade:	2b00      	cmp	r3, #0
 8009ae0:	d10b      	bne.n	8009afa <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8009ae2:	4b1e      	ldr	r3, [pc, #120]	; (8009b5c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009ae4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009ae6:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 8009aea:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009aee:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8009af2:	4a1a      	ldr	r2, [pc, #104]	; (8009b5c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8009af4:	430b      	orrs	r3, r1
 8009af6:	6593      	str	r3, [r2, #88]	; 0x58
 8009af8:	e003      	b.n	8009b02 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009afa:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009afe:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8009b02:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009b06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b0a:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 8009b0e:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8009b12:	2300      	movs	r3, #0
 8009b14:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8009b18:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 8009b1c:	460b      	mov	r3, r1
 8009b1e:	4313      	orrs	r3, r2
 8009b20:	d056      	beq.n	8009bd0 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8009b22:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009b26:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8009b2a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8009b2e:	d038      	beq.n	8009ba2 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8009b30:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8009b34:	d831      	bhi.n	8009b9a <HAL_RCCEx_PeriphCLKConfig+0x376>
 8009b36:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8009b3a:	d034      	beq.n	8009ba6 <HAL_RCCEx_PeriphCLKConfig+0x382>
 8009b3c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8009b40:	d82b      	bhi.n	8009b9a <HAL_RCCEx_PeriphCLKConfig+0x376>
 8009b42:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009b46:	d01d      	beq.n	8009b84 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8009b48:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009b4c:	d825      	bhi.n	8009b9a <HAL_RCCEx_PeriphCLKConfig+0x376>
 8009b4e:	2b00      	cmp	r3, #0
 8009b50:	d006      	beq.n	8009b60 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8009b52:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8009b56:	d00a      	beq.n	8009b6e <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8009b58:	e01f      	b.n	8009b9a <HAL_RCCEx_PeriphCLKConfig+0x376>
 8009b5a:	bf00      	nop
 8009b5c:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009b60:	4ba2      	ldr	r3, [pc, #648]	; (8009dec <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009b62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b64:	4aa1      	ldr	r2, [pc, #644]	; (8009dec <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009b66:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009b6a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8009b6c:	e01c      	b.n	8009ba8 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009b6e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009b72:	3308      	adds	r3, #8
 8009b74:	2100      	movs	r1, #0
 8009b76:	4618      	mov	r0, r3
 8009b78:	f002 fa44 	bl	800c004 <RCCEx_PLL2_Config>
 8009b7c:	4603      	mov	r3, r0
 8009b7e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8009b82:	e011      	b.n	8009ba8 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8009b84:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009b88:	3328      	adds	r3, #40	; 0x28
 8009b8a:	2100      	movs	r1, #0
 8009b8c:	4618      	mov	r0, r3
 8009b8e:	f002 faeb 	bl	800c168 <RCCEx_PLL3_Config>
 8009b92:	4603      	mov	r3, r0
 8009b94:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8009b98:	e006      	b.n	8009ba8 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8009b9a:	2301      	movs	r3, #1
 8009b9c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8009ba0:	e002      	b.n	8009ba8 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8009ba2:	bf00      	nop
 8009ba4:	e000      	b.n	8009ba8 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8009ba6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009ba8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009bac:	2b00      	cmp	r3, #0
 8009bae:	d10b      	bne.n	8009bc8 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8009bb0:	4b8e      	ldr	r3, [pc, #568]	; (8009dec <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009bb2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009bb4:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 8009bb8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009bbc:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8009bc0:	4a8a      	ldr	r2, [pc, #552]	; (8009dec <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009bc2:	430b      	orrs	r3, r1
 8009bc4:	6593      	str	r3, [r2, #88]	; 0x58
 8009bc6:	e003      	b.n	8009bd0 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009bc8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009bcc:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8009bd0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009bd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009bd8:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 8009bdc:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8009be0:	2300      	movs	r3, #0
 8009be2:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8009be6:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 8009bea:	460b      	mov	r3, r1
 8009bec:	4313      	orrs	r3, r2
 8009bee:	d03a      	beq.n	8009c66 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8009bf0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009bf4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009bf6:	2b30      	cmp	r3, #48	; 0x30
 8009bf8:	d01f      	beq.n	8009c3a <HAL_RCCEx_PeriphCLKConfig+0x416>
 8009bfa:	2b30      	cmp	r3, #48	; 0x30
 8009bfc:	d819      	bhi.n	8009c32 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8009bfe:	2b20      	cmp	r3, #32
 8009c00:	d00c      	beq.n	8009c1c <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8009c02:	2b20      	cmp	r3, #32
 8009c04:	d815      	bhi.n	8009c32 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8009c06:	2b00      	cmp	r3, #0
 8009c08:	d019      	beq.n	8009c3e <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8009c0a:	2b10      	cmp	r3, #16
 8009c0c:	d111      	bne.n	8009c32 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009c0e:	4b77      	ldr	r3, [pc, #476]	; (8009dec <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009c10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c12:	4a76      	ldr	r2, [pc, #472]	; (8009dec <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009c14:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009c18:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8009c1a:	e011      	b.n	8009c40 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8009c1c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009c20:	3308      	adds	r3, #8
 8009c22:	2102      	movs	r1, #2
 8009c24:	4618      	mov	r0, r3
 8009c26:	f002 f9ed 	bl	800c004 <RCCEx_PLL2_Config>
 8009c2a:	4603      	mov	r3, r0
 8009c2c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8009c30:	e006      	b.n	8009c40 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8009c32:	2301      	movs	r3, #1
 8009c34:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8009c38:	e002      	b.n	8009c40 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8009c3a:	bf00      	nop
 8009c3c:	e000      	b.n	8009c40 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8009c3e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009c40:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009c44:	2b00      	cmp	r3, #0
 8009c46:	d10a      	bne.n	8009c5e <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8009c48:	4b68      	ldr	r3, [pc, #416]	; (8009dec <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009c4a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009c4c:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 8009c50:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009c54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009c56:	4a65      	ldr	r2, [pc, #404]	; (8009dec <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009c58:	430b      	orrs	r3, r1
 8009c5a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8009c5c:	e003      	b.n	8009c66 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009c5e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009c62:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8009c66:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009c6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c6e:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 8009c72:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8009c76:	2300      	movs	r3, #0
 8009c78:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8009c7c:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 8009c80:	460b      	mov	r3, r1
 8009c82:	4313      	orrs	r3, r2
 8009c84:	d051      	beq.n	8009d2a <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8009c86:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009c8a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009c8c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009c90:	d035      	beq.n	8009cfe <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8009c92:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8009c96:	d82e      	bhi.n	8009cf6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8009c98:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8009c9c:	d031      	beq.n	8009d02 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8009c9e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8009ca2:	d828      	bhi.n	8009cf6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8009ca4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009ca8:	d01a      	beq.n	8009ce0 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8009caa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009cae:	d822      	bhi.n	8009cf6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8009cb0:	2b00      	cmp	r3, #0
 8009cb2:	d003      	beq.n	8009cbc <HAL_RCCEx_PeriphCLKConfig+0x498>
 8009cb4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009cb8:	d007      	beq.n	8009cca <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8009cba:	e01c      	b.n	8009cf6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009cbc:	4b4b      	ldr	r3, [pc, #300]	; (8009dec <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009cbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009cc0:	4a4a      	ldr	r2, [pc, #296]	; (8009dec <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009cc2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009cc6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8009cc8:	e01c      	b.n	8009d04 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8009cca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009cce:	3308      	adds	r3, #8
 8009cd0:	2100      	movs	r1, #0
 8009cd2:	4618      	mov	r0, r3
 8009cd4:	f002 f996 	bl	800c004 <RCCEx_PLL2_Config>
 8009cd8:	4603      	mov	r3, r0
 8009cda:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8009cde:	e011      	b.n	8009d04 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8009ce0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009ce4:	3328      	adds	r3, #40	; 0x28
 8009ce6:	2100      	movs	r1, #0
 8009ce8:	4618      	mov	r0, r3
 8009cea:	f002 fa3d 	bl	800c168 <RCCEx_PLL3_Config>
 8009cee:	4603      	mov	r3, r0
 8009cf0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8009cf4:	e006      	b.n	8009d04 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009cf6:	2301      	movs	r3, #1
 8009cf8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8009cfc:	e002      	b.n	8009d04 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8009cfe:	bf00      	nop
 8009d00:	e000      	b.n	8009d04 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8009d02:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009d04:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009d08:	2b00      	cmp	r3, #0
 8009d0a:	d10a      	bne.n	8009d22 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8009d0c:	4b37      	ldr	r3, [pc, #220]	; (8009dec <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009d0e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009d10:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 8009d14:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009d18:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009d1a:	4a34      	ldr	r2, [pc, #208]	; (8009dec <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009d1c:	430b      	orrs	r3, r1
 8009d1e:	6513      	str	r3, [r2, #80]	; 0x50
 8009d20:	e003      	b.n	8009d2a <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009d22:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009d26:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8009d2a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009d2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d32:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 8009d36:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8009d3a:	2300      	movs	r3, #0
 8009d3c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8009d40:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 8009d44:	460b      	mov	r3, r1
 8009d46:	4313      	orrs	r3, r2
 8009d48:	d056      	beq.n	8009df8 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8009d4a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009d4e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009d50:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8009d54:	d033      	beq.n	8009dbe <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8009d56:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8009d5a:	d82c      	bhi.n	8009db6 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8009d5c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8009d60:	d02f      	beq.n	8009dc2 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8009d62:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8009d66:	d826      	bhi.n	8009db6 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8009d68:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8009d6c:	d02b      	beq.n	8009dc6 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8009d6e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8009d72:	d820      	bhi.n	8009db6 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8009d74:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009d78:	d012      	beq.n	8009da0 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8009d7a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8009d7e:	d81a      	bhi.n	8009db6 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8009d80:	2b00      	cmp	r3, #0
 8009d82:	d022      	beq.n	8009dca <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8009d84:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009d88:	d115      	bne.n	8009db6 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009d8a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009d8e:	3308      	adds	r3, #8
 8009d90:	2101      	movs	r1, #1
 8009d92:	4618      	mov	r0, r3
 8009d94:	f002 f936 	bl	800c004 <RCCEx_PLL2_Config>
 8009d98:	4603      	mov	r3, r0
 8009d9a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8009d9e:	e015      	b.n	8009dcc <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8009da0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009da4:	3328      	adds	r3, #40	; 0x28
 8009da6:	2101      	movs	r1, #1
 8009da8:	4618      	mov	r0, r3
 8009daa:	f002 f9dd 	bl	800c168 <RCCEx_PLL3_Config>
 8009dae:	4603      	mov	r3, r0
 8009db0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8009db4:	e00a      	b.n	8009dcc <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009db6:	2301      	movs	r3, #1
 8009db8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8009dbc:	e006      	b.n	8009dcc <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8009dbe:	bf00      	nop
 8009dc0:	e004      	b.n	8009dcc <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8009dc2:	bf00      	nop
 8009dc4:	e002      	b.n	8009dcc <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8009dc6:	bf00      	nop
 8009dc8:	e000      	b.n	8009dcc <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8009dca:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009dcc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009dd0:	2b00      	cmp	r3, #0
 8009dd2:	d10d      	bne.n	8009df0 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8009dd4:	4b05      	ldr	r3, [pc, #20]	; (8009dec <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009dd6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009dd8:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8009ddc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009de0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009de2:	4a02      	ldr	r2, [pc, #8]	; (8009dec <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009de4:	430b      	orrs	r3, r1
 8009de6:	6513      	str	r3, [r2, #80]	; 0x50
 8009de8:	e006      	b.n	8009df8 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8009dea:	bf00      	nop
 8009dec:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009df0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009df4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8009df8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009dfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e00:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 8009e04:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8009e08:	2300      	movs	r3, #0
 8009e0a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8009e0e:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 8009e12:	460b      	mov	r3, r1
 8009e14:	4313      	orrs	r3, r2
 8009e16:	d055      	beq.n	8009ec4 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8009e18:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009e1c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8009e20:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009e24:	d033      	beq.n	8009e8e <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8009e26:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009e2a:	d82c      	bhi.n	8009e86 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8009e2c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009e30:	d02f      	beq.n	8009e92 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8009e32:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009e36:	d826      	bhi.n	8009e86 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8009e38:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8009e3c:	d02b      	beq.n	8009e96 <HAL_RCCEx_PeriphCLKConfig+0x672>
 8009e3e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8009e42:	d820      	bhi.n	8009e86 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8009e44:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009e48:	d012      	beq.n	8009e70 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8009e4a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009e4e:	d81a      	bhi.n	8009e86 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8009e50:	2b00      	cmp	r3, #0
 8009e52:	d022      	beq.n	8009e9a <HAL_RCCEx_PeriphCLKConfig+0x676>
 8009e54:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009e58:	d115      	bne.n	8009e86 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009e5a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009e5e:	3308      	adds	r3, #8
 8009e60:	2101      	movs	r1, #1
 8009e62:	4618      	mov	r0, r3
 8009e64:	f002 f8ce 	bl	800c004 <RCCEx_PLL2_Config>
 8009e68:	4603      	mov	r3, r0
 8009e6a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8009e6e:	e015      	b.n	8009e9c <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8009e70:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009e74:	3328      	adds	r3, #40	; 0x28
 8009e76:	2101      	movs	r1, #1
 8009e78:	4618      	mov	r0, r3
 8009e7a:	f002 f975 	bl	800c168 <RCCEx_PLL3_Config>
 8009e7e:	4603      	mov	r3, r0
 8009e80:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8009e84:	e00a      	b.n	8009e9c <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8009e86:	2301      	movs	r3, #1
 8009e88:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8009e8c:	e006      	b.n	8009e9c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8009e8e:	bf00      	nop
 8009e90:	e004      	b.n	8009e9c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8009e92:	bf00      	nop
 8009e94:	e002      	b.n	8009e9c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8009e96:	bf00      	nop
 8009e98:	e000      	b.n	8009e9c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8009e9a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009e9c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009ea0:	2b00      	cmp	r3, #0
 8009ea2:	d10b      	bne.n	8009ebc <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8009ea4:	4ba3      	ldr	r3, [pc, #652]	; (800a134 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009ea6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009ea8:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8009eac:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009eb0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8009eb4:	4a9f      	ldr	r2, [pc, #636]	; (800a134 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009eb6:	430b      	orrs	r3, r1
 8009eb8:	6593      	str	r3, [r2, #88]	; 0x58
 8009eba:	e003      	b.n	8009ec4 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009ebc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009ec0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8009ec4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009ec8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ecc:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 8009ed0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8009ed4:	2300      	movs	r3, #0
 8009ed6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8009eda:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8009ede:	460b      	mov	r3, r1
 8009ee0:	4313      	orrs	r3, r2
 8009ee2:	d037      	beq.n	8009f54 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8009ee4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009ee8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009eea:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009eee:	d00e      	beq.n	8009f0e <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8009ef0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009ef4:	d816      	bhi.n	8009f24 <HAL_RCCEx_PeriphCLKConfig+0x700>
 8009ef6:	2b00      	cmp	r3, #0
 8009ef8:	d018      	beq.n	8009f2c <HAL_RCCEx_PeriphCLKConfig+0x708>
 8009efa:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009efe:	d111      	bne.n	8009f24 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009f00:	4b8c      	ldr	r3, [pc, #560]	; (800a134 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009f02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f04:	4a8b      	ldr	r2, [pc, #556]	; (800a134 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009f06:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009f0a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8009f0c:	e00f      	b.n	8009f2e <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8009f0e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009f12:	3308      	adds	r3, #8
 8009f14:	2101      	movs	r1, #1
 8009f16:	4618      	mov	r0, r3
 8009f18:	f002 f874 	bl	800c004 <RCCEx_PLL2_Config>
 8009f1c:	4603      	mov	r3, r0
 8009f1e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8009f22:	e004      	b.n	8009f2e <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8009f24:	2301      	movs	r3, #1
 8009f26:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8009f2a:	e000      	b.n	8009f2e <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8009f2c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009f2e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009f32:	2b00      	cmp	r3, #0
 8009f34:	d10a      	bne.n	8009f4c <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8009f36:	4b7f      	ldr	r3, [pc, #508]	; (800a134 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009f38:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009f3a:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8009f3e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009f42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009f44:	4a7b      	ldr	r2, [pc, #492]	; (800a134 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009f46:	430b      	orrs	r3, r1
 8009f48:	6513      	str	r3, [r2, #80]	; 0x50
 8009f4a:	e003      	b.n	8009f54 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009f4c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009f50:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8009f54:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009f58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f5c:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 8009f60:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8009f64:	2300      	movs	r3, #0
 8009f66:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8009f6a:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 8009f6e:	460b      	mov	r3, r1
 8009f70:	4313      	orrs	r3, r2
 8009f72:	d039      	beq.n	8009fe8 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8009f74:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009f78:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009f7a:	2b03      	cmp	r3, #3
 8009f7c:	d81c      	bhi.n	8009fb8 <HAL_RCCEx_PeriphCLKConfig+0x794>
 8009f7e:	a201      	add	r2, pc, #4	; (adr r2, 8009f84 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8009f80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009f84:	08009fc1 	.word	0x08009fc1
 8009f88:	08009f95 	.word	0x08009f95
 8009f8c:	08009fa3 	.word	0x08009fa3
 8009f90:	08009fc1 	.word	0x08009fc1
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009f94:	4b67      	ldr	r3, [pc, #412]	; (800a134 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009f96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009f98:	4a66      	ldr	r2, [pc, #408]	; (800a134 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009f9a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009f9e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8009fa0:	e00f      	b.n	8009fc2 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8009fa2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009fa6:	3308      	adds	r3, #8
 8009fa8:	2102      	movs	r1, #2
 8009faa:	4618      	mov	r0, r3
 8009fac:	f002 f82a 	bl	800c004 <RCCEx_PLL2_Config>
 8009fb0:	4603      	mov	r3, r0
 8009fb2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8009fb6:	e004      	b.n	8009fc2 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8009fb8:	2301      	movs	r3, #1
 8009fba:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8009fbe:	e000      	b.n	8009fc2 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8009fc0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8009fc2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009fc6:	2b00      	cmp	r3, #0
 8009fc8:	d10a      	bne.n	8009fe0 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8009fca:	4b5a      	ldr	r3, [pc, #360]	; (800a134 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009fcc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009fce:	f023 0103 	bic.w	r1, r3, #3
 8009fd2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009fd6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009fd8:	4a56      	ldr	r2, [pc, #344]	; (800a134 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8009fda:	430b      	orrs	r3, r1
 8009fdc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8009fde:	e003      	b.n	8009fe8 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009fe0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8009fe4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8009fe8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8009fec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ff0:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 8009ff4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8009ff8:	2300      	movs	r3, #0
 8009ffa:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8009ffe:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 800a002:	460b      	mov	r3, r1
 800a004:	4313      	orrs	r3, r2
 800a006:	f000 809f 	beq.w	800a148 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800a00a:	4b4b      	ldr	r3, [pc, #300]	; (800a138 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800a00c:	681b      	ldr	r3, [r3, #0]
 800a00e:	4a4a      	ldr	r2, [pc, #296]	; (800a138 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800a010:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a014:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800a016:	f7f8 fed5 	bl	8002dc4 <HAL_GetTick>
 800a01a:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800a01e:	e00b      	b.n	800a038 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a020:	f7f8 fed0 	bl	8002dc4 <HAL_GetTick>
 800a024:	4602      	mov	r2, r0
 800a026:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800a02a:	1ad3      	subs	r3, r2, r3
 800a02c:	2b64      	cmp	r3, #100	; 0x64
 800a02e:	d903      	bls.n	800a038 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 800a030:	2303      	movs	r3, #3
 800a032:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800a036:	e005      	b.n	800a044 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800a038:	4b3f      	ldr	r3, [pc, #252]	; (800a138 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800a03a:	681b      	ldr	r3, [r3, #0]
 800a03c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a040:	2b00      	cmp	r3, #0
 800a042:	d0ed      	beq.n	800a020 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 800a044:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a048:	2b00      	cmp	r3, #0
 800a04a:	d179      	bne.n	800a140 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800a04c:	4b39      	ldr	r3, [pc, #228]	; (800a134 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a04e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800a050:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a054:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800a058:	4053      	eors	r3, r2
 800a05a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a05e:	2b00      	cmp	r3, #0
 800a060:	d015      	beq.n	800a08e <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800a062:	4b34      	ldr	r3, [pc, #208]	; (800a134 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a064:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a066:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a06a:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800a06e:	4b31      	ldr	r3, [pc, #196]	; (800a134 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a070:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a072:	4a30      	ldr	r2, [pc, #192]	; (800a134 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a074:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a078:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800a07a:	4b2e      	ldr	r3, [pc, #184]	; (800a134 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a07c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a07e:	4a2d      	ldr	r2, [pc, #180]	; (800a134 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a080:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a084:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800a086:	4a2b      	ldr	r2, [pc, #172]	; (800a134 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a088:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800a08c:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800a08e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a092:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800a096:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a09a:	d118      	bne.n	800a0ce <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a09c:	f7f8 fe92 	bl	8002dc4 <HAL_GetTick>
 800a0a0:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800a0a4:	e00d      	b.n	800a0c2 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a0a6:	f7f8 fe8d 	bl	8002dc4 <HAL_GetTick>
 800a0aa:	4602      	mov	r2, r0
 800a0ac:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800a0b0:	1ad2      	subs	r2, r2, r3
 800a0b2:	f241 3388 	movw	r3, #5000	; 0x1388
 800a0b6:	429a      	cmp	r2, r3
 800a0b8:	d903      	bls.n	800a0c2 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 800a0ba:	2303      	movs	r3, #3
 800a0bc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
            break;
 800a0c0:	e005      	b.n	800a0ce <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800a0c2:	4b1c      	ldr	r3, [pc, #112]	; (800a134 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a0c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a0c6:	f003 0302 	and.w	r3, r3, #2
 800a0ca:	2b00      	cmp	r3, #0
 800a0cc:	d0eb      	beq.n	800a0a6 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 800a0ce:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a0d2:	2b00      	cmp	r3, #0
 800a0d4:	d129      	bne.n	800a12a <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800a0d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a0da:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800a0de:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a0e2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a0e6:	d10e      	bne.n	800a106 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 800a0e8:	4b12      	ldr	r3, [pc, #72]	; (800a134 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a0ea:	691b      	ldr	r3, [r3, #16]
 800a0ec:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 800a0f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a0f4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800a0f8:	091a      	lsrs	r2, r3, #4
 800a0fa:	4b10      	ldr	r3, [pc, #64]	; (800a13c <HAL_RCCEx_PeriphCLKConfig+0x918>)
 800a0fc:	4013      	ands	r3, r2
 800a0fe:	4a0d      	ldr	r2, [pc, #52]	; (800a134 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a100:	430b      	orrs	r3, r1
 800a102:	6113      	str	r3, [r2, #16]
 800a104:	e005      	b.n	800a112 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 800a106:	4b0b      	ldr	r3, [pc, #44]	; (800a134 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a108:	691b      	ldr	r3, [r3, #16]
 800a10a:	4a0a      	ldr	r2, [pc, #40]	; (800a134 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a10c:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800a110:	6113      	str	r3, [r2, #16]
 800a112:	4b08      	ldr	r3, [pc, #32]	; (800a134 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a114:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800a116:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a11a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800a11e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a122:	4a04      	ldr	r2, [pc, #16]	; (800a134 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800a124:	430b      	orrs	r3, r1
 800a126:	6713      	str	r3, [r2, #112]	; 0x70
 800a128:	e00e      	b.n	800a148 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800a12a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a12e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
 800a132:	e009      	b.n	800a148 <HAL_RCCEx_PeriphCLKConfig+0x924>
 800a134:	58024400 	.word	0x58024400
 800a138:	58024800 	.word	0x58024800
 800a13c:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a140:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a144:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800a148:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a14c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a150:	f002 0301 	and.w	r3, r2, #1
 800a154:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800a158:	2300      	movs	r3, #0
 800a15a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800a15e:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800a162:	460b      	mov	r3, r1
 800a164:	4313      	orrs	r3, r2
 800a166:	f000 8089 	beq.w	800a27c <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800a16a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a16e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a170:	2b28      	cmp	r3, #40	; 0x28
 800a172:	d86b      	bhi.n	800a24c <HAL_RCCEx_PeriphCLKConfig+0xa28>
 800a174:	a201      	add	r2, pc, #4	; (adr r2, 800a17c <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800a176:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a17a:	bf00      	nop
 800a17c:	0800a255 	.word	0x0800a255
 800a180:	0800a24d 	.word	0x0800a24d
 800a184:	0800a24d 	.word	0x0800a24d
 800a188:	0800a24d 	.word	0x0800a24d
 800a18c:	0800a24d 	.word	0x0800a24d
 800a190:	0800a24d 	.word	0x0800a24d
 800a194:	0800a24d 	.word	0x0800a24d
 800a198:	0800a24d 	.word	0x0800a24d
 800a19c:	0800a221 	.word	0x0800a221
 800a1a0:	0800a24d 	.word	0x0800a24d
 800a1a4:	0800a24d 	.word	0x0800a24d
 800a1a8:	0800a24d 	.word	0x0800a24d
 800a1ac:	0800a24d 	.word	0x0800a24d
 800a1b0:	0800a24d 	.word	0x0800a24d
 800a1b4:	0800a24d 	.word	0x0800a24d
 800a1b8:	0800a24d 	.word	0x0800a24d
 800a1bc:	0800a237 	.word	0x0800a237
 800a1c0:	0800a24d 	.word	0x0800a24d
 800a1c4:	0800a24d 	.word	0x0800a24d
 800a1c8:	0800a24d 	.word	0x0800a24d
 800a1cc:	0800a24d 	.word	0x0800a24d
 800a1d0:	0800a24d 	.word	0x0800a24d
 800a1d4:	0800a24d 	.word	0x0800a24d
 800a1d8:	0800a24d 	.word	0x0800a24d
 800a1dc:	0800a255 	.word	0x0800a255
 800a1e0:	0800a24d 	.word	0x0800a24d
 800a1e4:	0800a24d 	.word	0x0800a24d
 800a1e8:	0800a24d 	.word	0x0800a24d
 800a1ec:	0800a24d 	.word	0x0800a24d
 800a1f0:	0800a24d 	.word	0x0800a24d
 800a1f4:	0800a24d 	.word	0x0800a24d
 800a1f8:	0800a24d 	.word	0x0800a24d
 800a1fc:	0800a255 	.word	0x0800a255
 800a200:	0800a24d 	.word	0x0800a24d
 800a204:	0800a24d 	.word	0x0800a24d
 800a208:	0800a24d 	.word	0x0800a24d
 800a20c:	0800a24d 	.word	0x0800a24d
 800a210:	0800a24d 	.word	0x0800a24d
 800a214:	0800a24d 	.word	0x0800a24d
 800a218:	0800a24d 	.word	0x0800a24d
 800a21c:	0800a255 	.word	0x0800a255
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800a220:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a224:	3308      	adds	r3, #8
 800a226:	2101      	movs	r1, #1
 800a228:	4618      	mov	r0, r3
 800a22a:	f001 feeb 	bl	800c004 <RCCEx_PLL2_Config>
 800a22e:	4603      	mov	r3, r0
 800a230:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800a234:	e00f      	b.n	800a256 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a236:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a23a:	3328      	adds	r3, #40	; 0x28
 800a23c:	2101      	movs	r1, #1
 800a23e:	4618      	mov	r0, r3
 800a240:	f001 ff92 	bl	800c168 <RCCEx_PLL3_Config>
 800a244:	4603      	mov	r3, r0
 800a246:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800a24a:	e004      	b.n	800a256 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a24c:	2301      	movs	r3, #1
 800a24e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800a252:	e000      	b.n	800a256 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 800a254:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a256:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a25a:	2b00      	cmp	r3, #0
 800a25c:	d10a      	bne.n	800a274 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800a25e:	4bbf      	ldr	r3, [pc, #764]	; (800a55c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800a260:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a262:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 800a266:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a26a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a26c:	4abb      	ldr	r2, [pc, #748]	; (800a55c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800a26e:	430b      	orrs	r3, r1
 800a270:	6553      	str	r3, [r2, #84]	; 0x54
 800a272:	e003      	b.n	800a27c <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a274:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a278:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800a27c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a280:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a284:	f002 0302 	and.w	r3, r2, #2
 800a288:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800a28c:	2300      	movs	r3, #0
 800a28e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800a292:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 800a296:	460b      	mov	r3, r1
 800a298:	4313      	orrs	r3, r2
 800a29a:	d041      	beq.n	800a320 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 800a29c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a2a0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a2a2:	2b05      	cmp	r3, #5
 800a2a4:	d824      	bhi.n	800a2f0 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 800a2a6:	a201      	add	r2, pc, #4	; (adr r2, 800a2ac <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 800a2a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a2ac:	0800a2f9 	.word	0x0800a2f9
 800a2b0:	0800a2c5 	.word	0x0800a2c5
 800a2b4:	0800a2db 	.word	0x0800a2db
 800a2b8:	0800a2f9 	.word	0x0800a2f9
 800a2bc:	0800a2f9 	.word	0x0800a2f9
 800a2c0:	0800a2f9 	.word	0x0800a2f9
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800a2c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a2c8:	3308      	adds	r3, #8
 800a2ca:	2101      	movs	r1, #1
 800a2cc:	4618      	mov	r0, r3
 800a2ce:	f001 fe99 	bl	800c004 <RCCEx_PLL2_Config>
 800a2d2:	4603      	mov	r3, r0
 800a2d4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800a2d8:	e00f      	b.n	800a2fa <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a2da:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a2de:	3328      	adds	r3, #40	; 0x28
 800a2e0:	2101      	movs	r1, #1
 800a2e2:	4618      	mov	r0, r3
 800a2e4:	f001 ff40 	bl	800c168 <RCCEx_PLL3_Config>
 800a2e8:	4603      	mov	r3, r0
 800a2ea:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800a2ee:	e004      	b.n	800a2fa <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a2f0:	2301      	movs	r3, #1
 800a2f2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800a2f6:	e000      	b.n	800a2fa <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 800a2f8:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a2fa:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a2fe:	2b00      	cmp	r3, #0
 800a300:	d10a      	bne.n	800a318 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800a302:	4b96      	ldr	r3, [pc, #600]	; (800a55c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800a304:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a306:	f023 0107 	bic.w	r1, r3, #7
 800a30a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a30e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a310:	4a92      	ldr	r2, [pc, #584]	; (800a55c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800a312:	430b      	orrs	r3, r1
 800a314:	6553      	str	r3, [r2, #84]	; 0x54
 800a316:	e003      	b.n	800a320 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a318:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a31c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800a320:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a324:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a328:	f002 0304 	and.w	r3, r2, #4
 800a32c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800a330:	2300      	movs	r3, #0
 800a332:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800a336:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 800a33a:	460b      	mov	r3, r1
 800a33c:	4313      	orrs	r3, r2
 800a33e:	d044      	beq.n	800a3ca <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800a340:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a344:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a348:	2b05      	cmp	r3, #5
 800a34a:	d825      	bhi.n	800a398 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 800a34c:	a201      	add	r2, pc, #4	; (adr r2, 800a354 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 800a34e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a352:	bf00      	nop
 800a354:	0800a3a1 	.word	0x0800a3a1
 800a358:	0800a36d 	.word	0x0800a36d
 800a35c:	0800a383 	.word	0x0800a383
 800a360:	0800a3a1 	.word	0x0800a3a1
 800a364:	0800a3a1 	.word	0x0800a3a1
 800a368:	0800a3a1 	.word	0x0800a3a1
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800a36c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a370:	3308      	adds	r3, #8
 800a372:	2101      	movs	r1, #1
 800a374:	4618      	mov	r0, r3
 800a376:	f001 fe45 	bl	800c004 <RCCEx_PLL2_Config>
 800a37a:	4603      	mov	r3, r0
 800a37c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800a380:	e00f      	b.n	800a3a2 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a382:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a386:	3328      	adds	r3, #40	; 0x28
 800a388:	2101      	movs	r1, #1
 800a38a:	4618      	mov	r0, r3
 800a38c:	f001 feec 	bl	800c168 <RCCEx_PLL3_Config>
 800a390:	4603      	mov	r3, r0
 800a392:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800a396:	e004      	b.n	800a3a2 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a398:	2301      	movs	r3, #1
 800a39a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800a39e:	e000      	b.n	800a3a2 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 800a3a0:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a3a2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a3a6:	2b00      	cmp	r3, #0
 800a3a8:	d10b      	bne.n	800a3c2 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800a3aa:	4b6c      	ldr	r3, [pc, #432]	; (800a55c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800a3ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a3ae:	f023 0107 	bic.w	r1, r3, #7
 800a3b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a3b6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a3ba:	4a68      	ldr	r2, [pc, #416]	; (800a55c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800a3bc:	430b      	orrs	r3, r1
 800a3be:	6593      	str	r3, [r2, #88]	; 0x58
 800a3c0:	e003      	b.n	800a3ca <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a3c2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a3c6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800a3ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a3ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3d2:	f002 0320 	and.w	r3, r2, #32
 800a3d6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800a3da:	2300      	movs	r3, #0
 800a3dc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800a3e0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800a3e4:	460b      	mov	r3, r1
 800a3e6:	4313      	orrs	r3, r2
 800a3e8:	d055      	beq.n	800a496 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800a3ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a3ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a3f2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a3f6:	d033      	beq.n	800a460 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 800a3f8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800a3fc:	d82c      	bhi.n	800a458 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800a3fe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a402:	d02f      	beq.n	800a464 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 800a404:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a408:	d826      	bhi.n	800a458 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800a40a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800a40e:	d02b      	beq.n	800a468 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 800a410:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800a414:	d820      	bhi.n	800a458 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800a416:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a41a:	d012      	beq.n	800a442 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 800a41c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800a420:	d81a      	bhi.n	800a458 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800a422:	2b00      	cmp	r3, #0
 800a424:	d022      	beq.n	800a46c <HAL_RCCEx_PeriphCLKConfig+0xc48>
 800a426:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a42a:	d115      	bne.n	800a458 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a42c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a430:	3308      	adds	r3, #8
 800a432:	2100      	movs	r1, #0
 800a434:	4618      	mov	r0, r3
 800a436:	f001 fde5 	bl	800c004 <RCCEx_PLL2_Config>
 800a43a:	4603      	mov	r3, r0
 800a43c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800a440:	e015      	b.n	800a46e <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800a442:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a446:	3328      	adds	r3, #40	; 0x28
 800a448:	2102      	movs	r1, #2
 800a44a:	4618      	mov	r0, r3
 800a44c:	f001 fe8c 	bl	800c168 <RCCEx_PLL3_Config>
 800a450:	4603      	mov	r3, r0
 800a452:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800a456:	e00a      	b.n	800a46e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a458:	2301      	movs	r3, #1
 800a45a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800a45e:	e006      	b.n	800a46e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800a460:	bf00      	nop
 800a462:	e004      	b.n	800a46e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800a464:	bf00      	nop
 800a466:	e002      	b.n	800a46e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800a468:	bf00      	nop
 800a46a:	e000      	b.n	800a46e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800a46c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a46e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a472:	2b00      	cmp	r3, #0
 800a474:	d10b      	bne.n	800a48e <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800a476:	4b39      	ldr	r3, [pc, #228]	; (800a55c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800a478:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a47a:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 800a47e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a482:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a486:	4a35      	ldr	r2, [pc, #212]	; (800a55c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800a488:	430b      	orrs	r3, r1
 800a48a:	6553      	str	r3, [r2, #84]	; 0x54
 800a48c:	e003      	b.n	800a496 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a48e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a492:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800a496:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a49a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a49e:	f002 0340 	and.w	r3, r2, #64	; 0x40
 800a4a2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800a4a6:	2300      	movs	r3, #0
 800a4a8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800a4ac:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 800a4b0:	460b      	mov	r3, r1
 800a4b2:	4313      	orrs	r3, r2
 800a4b4:	d058      	beq.n	800a568 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800a4b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a4ba:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800a4be:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800a4c2:	d033      	beq.n	800a52c <HAL_RCCEx_PeriphCLKConfig+0xd08>
 800a4c4:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800a4c8:	d82c      	bhi.n	800a524 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800a4ca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a4ce:	d02f      	beq.n	800a530 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 800a4d0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a4d4:	d826      	bhi.n	800a524 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800a4d6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800a4da:	d02b      	beq.n	800a534 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 800a4dc:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800a4e0:	d820      	bhi.n	800a524 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800a4e2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a4e6:	d012      	beq.n	800a50e <HAL_RCCEx_PeriphCLKConfig+0xcea>
 800a4e8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a4ec:	d81a      	bhi.n	800a524 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800a4ee:	2b00      	cmp	r3, #0
 800a4f0:	d022      	beq.n	800a538 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 800a4f2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a4f6:	d115      	bne.n	800a524 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a4f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a4fc:	3308      	adds	r3, #8
 800a4fe:	2100      	movs	r1, #0
 800a500:	4618      	mov	r0, r3
 800a502:	f001 fd7f 	bl	800c004 <RCCEx_PLL2_Config>
 800a506:	4603      	mov	r3, r0
 800a508:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800a50c:	e015      	b.n	800a53a <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800a50e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a512:	3328      	adds	r3, #40	; 0x28
 800a514:	2102      	movs	r1, #2
 800a516:	4618      	mov	r0, r3
 800a518:	f001 fe26 	bl	800c168 <RCCEx_PLL3_Config>
 800a51c:	4603      	mov	r3, r0
 800a51e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800a522:	e00a      	b.n	800a53a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a524:	2301      	movs	r3, #1
 800a526:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800a52a:	e006      	b.n	800a53a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800a52c:	bf00      	nop
 800a52e:	e004      	b.n	800a53a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800a530:	bf00      	nop
 800a532:	e002      	b.n	800a53a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800a534:	bf00      	nop
 800a536:	e000      	b.n	800a53a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800a538:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a53a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a53e:	2b00      	cmp	r3, #0
 800a540:	d10e      	bne.n	800a560 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800a542:	4b06      	ldr	r3, [pc, #24]	; (800a55c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800a544:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a546:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 800a54a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a54e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800a552:	4a02      	ldr	r2, [pc, #8]	; (800a55c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800a554:	430b      	orrs	r3, r1
 800a556:	6593      	str	r3, [r2, #88]	; 0x58
 800a558:	e006      	b.n	800a568 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 800a55a:	bf00      	nop
 800a55c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a560:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a564:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800a568:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a56c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a570:	f002 0380 	and.w	r3, r2, #128	; 0x80
 800a574:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800a578:	2300      	movs	r3, #0
 800a57a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800a57e:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 800a582:	460b      	mov	r3, r1
 800a584:	4313      	orrs	r3, r2
 800a586:	d055      	beq.n	800a634 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 800a588:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a58c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800a590:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800a594:	d033      	beq.n	800a5fe <HAL_RCCEx_PeriphCLKConfig+0xdda>
 800a596:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800a59a:	d82c      	bhi.n	800a5f6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800a59c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a5a0:	d02f      	beq.n	800a602 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 800a5a2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a5a6:	d826      	bhi.n	800a5f6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800a5a8:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800a5ac:	d02b      	beq.n	800a606 <HAL_RCCEx_PeriphCLKConfig+0xde2>
 800a5ae:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800a5b2:	d820      	bhi.n	800a5f6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800a5b4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a5b8:	d012      	beq.n	800a5e0 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 800a5ba:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a5be:	d81a      	bhi.n	800a5f6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800a5c0:	2b00      	cmp	r3, #0
 800a5c2:	d022      	beq.n	800a60a <HAL_RCCEx_PeriphCLKConfig+0xde6>
 800a5c4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a5c8:	d115      	bne.n	800a5f6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a5ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a5ce:	3308      	adds	r3, #8
 800a5d0:	2100      	movs	r1, #0
 800a5d2:	4618      	mov	r0, r3
 800a5d4:	f001 fd16 	bl	800c004 <RCCEx_PLL2_Config>
 800a5d8:	4603      	mov	r3, r0
 800a5da:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800a5de:	e015      	b.n	800a60c <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800a5e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a5e4:	3328      	adds	r3, #40	; 0x28
 800a5e6:	2102      	movs	r1, #2
 800a5e8:	4618      	mov	r0, r3
 800a5ea:	f001 fdbd 	bl	800c168 <RCCEx_PLL3_Config>
 800a5ee:	4603      	mov	r3, r0
 800a5f0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800a5f4:	e00a      	b.n	800a60c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a5f6:	2301      	movs	r3, #1
 800a5f8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800a5fc:	e006      	b.n	800a60c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800a5fe:	bf00      	nop
 800a600:	e004      	b.n	800a60c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800a602:	bf00      	nop
 800a604:	e002      	b.n	800a60c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800a606:	bf00      	nop
 800a608:	e000      	b.n	800a60c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800a60a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a60c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a610:	2b00      	cmp	r3, #0
 800a612:	d10b      	bne.n	800a62c <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800a614:	4ba1      	ldr	r3, [pc, #644]	; (800a89c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a616:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a618:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 800a61c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a620:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800a624:	4a9d      	ldr	r2, [pc, #628]	; (800a89c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a626:	430b      	orrs	r3, r1
 800a628:	6593      	str	r3, [r2, #88]	; 0x58
 800a62a:	e003      	b.n	800a634 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a62c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a630:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800a634:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a638:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a63c:	f002 0308 	and.w	r3, r2, #8
 800a640:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800a644:	2300      	movs	r3, #0
 800a646:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800a64a:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 800a64e:	460b      	mov	r3, r1
 800a650:	4313      	orrs	r3, r2
 800a652:	d01e      	beq.n	800a692 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 800a654:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a658:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a65c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a660:	d10c      	bne.n	800a67c <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800a662:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a666:	3328      	adds	r3, #40	; 0x28
 800a668:	2102      	movs	r1, #2
 800a66a:	4618      	mov	r0, r3
 800a66c:	f001 fd7c 	bl	800c168 <RCCEx_PLL3_Config>
 800a670:	4603      	mov	r3, r0
 800a672:	2b00      	cmp	r3, #0
 800a674:	d002      	beq.n	800a67c <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 800a676:	2301      	movs	r3, #1
 800a678:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800a67c:	4b87      	ldr	r3, [pc, #540]	; (800a89c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a67e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a680:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800a684:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a688:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a68c:	4a83      	ldr	r2, [pc, #524]	; (800a89c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a68e:	430b      	orrs	r3, r1
 800a690:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800a692:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a696:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a69a:	f002 0310 	and.w	r3, r2, #16
 800a69e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800a6a2:	2300      	movs	r3, #0
 800a6a4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800a6a8:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 800a6ac:	460b      	mov	r3, r1
 800a6ae:	4313      	orrs	r3, r2
 800a6b0:	d01e      	beq.n	800a6f0 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800a6b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a6b6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800a6ba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a6be:	d10c      	bne.n	800a6da <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800a6c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a6c4:	3328      	adds	r3, #40	; 0x28
 800a6c6:	2102      	movs	r1, #2
 800a6c8:	4618      	mov	r0, r3
 800a6ca:	f001 fd4d 	bl	800c168 <RCCEx_PLL3_Config>
 800a6ce:	4603      	mov	r3, r0
 800a6d0:	2b00      	cmp	r3, #0
 800a6d2:	d002      	beq.n	800a6da <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 800a6d4:	2301      	movs	r3, #1
 800a6d6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800a6da:	4b70      	ldr	r3, [pc, #448]	; (800a89c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a6dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a6de:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800a6e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a6e6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800a6ea:	4a6c      	ldr	r2, [pc, #432]	; (800a89c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a6ec:	430b      	orrs	r3, r1
 800a6ee:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800a6f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a6f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a6f8:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 800a6fc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800a700:	2300      	movs	r3, #0
 800a702:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800a706:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 800a70a:	460b      	mov	r3, r1
 800a70c:	4313      	orrs	r3, r2
 800a70e:	d03e      	beq.n	800a78e <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 800a710:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a714:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800a718:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a71c:	d022      	beq.n	800a764 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 800a71e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800a722:	d81b      	bhi.n	800a75c <HAL_RCCEx_PeriphCLKConfig+0xf38>
 800a724:	2b00      	cmp	r3, #0
 800a726:	d003      	beq.n	800a730 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 800a728:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a72c:	d00b      	beq.n	800a746 <HAL_RCCEx_PeriphCLKConfig+0xf22>
 800a72e:	e015      	b.n	800a75c <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a730:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a734:	3308      	adds	r3, #8
 800a736:	2100      	movs	r1, #0
 800a738:	4618      	mov	r0, r3
 800a73a:	f001 fc63 	bl	800c004 <RCCEx_PLL2_Config>
 800a73e:	4603      	mov	r3, r0
 800a740:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800a744:	e00f      	b.n	800a766 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800a746:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a74a:	3328      	adds	r3, #40	; 0x28
 800a74c:	2102      	movs	r1, #2
 800a74e:	4618      	mov	r0, r3
 800a750:	f001 fd0a 	bl	800c168 <RCCEx_PLL3_Config>
 800a754:	4603      	mov	r3, r0
 800a756:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800a75a:	e004      	b.n	800a766 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a75c:	2301      	movs	r3, #1
 800a75e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800a762:	e000      	b.n	800a766 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 800a764:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a766:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a76a:	2b00      	cmp	r3, #0
 800a76c:	d10b      	bne.n	800a786 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800a76e:	4b4b      	ldr	r3, [pc, #300]	; (800a89c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a770:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a772:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 800a776:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a77a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800a77e:	4a47      	ldr	r2, [pc, #284]	; (800a89c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a780:	430b      	orrs	r3, r1
 800a782:	6593      	str	r3, [r2, #88]	; 0x58
 800a784:	e003      	b.n	800a78e <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a786:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a78a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800a78e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a792:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a796:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 800a79a:	67bb      	str	r3, [r7, #120]	; 0x78
 800a79c:	2300      	movs	r3, #0
 800a79e:	67fb      	str	r3, [r7, #124]	; 0x7c
 800a7a0:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 800a7a4:	460b      	mov	r3, r1
 800a7a6:	4313      	orrs	r3, r2
 800a7a8:	d03b      	beq.n	800a822 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800a7aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a7ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a7b2:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800a7b6:	d01f      	beq.n	800a7f8 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 800a7b8:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800a7bc:	d818      	bhi.n	800a7f0 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 800a7be:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a7c2:	d003      	beq.n	800a7cc <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 800a7c4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800a7c8:	d007      	beq.n	800a7da <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 800a7ca:	e011      	b.n	800a7f0 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a7cc:	4b33      	ldr	r3, [pc, #204]	; (800a89c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a7ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a7d0:	4a32      	ldr	r2, [pc, #200]	; (800a89c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a7d2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a7d6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 800a7d8:	e00f      	b.n	800a7fa <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800a7da:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a7de:	3328      	adds	r3, #40	; 0x28
 800a7e0:	2101      	movs	r1, #1
 800a7e2:	4618      	mov	r0, r3
 800a7e4:	f001 fcc0 	bl	800c168 <RCCEx_PLL3_Config>
 800a7e8:	4603      	mov	r3, r0
 800a7ea:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 800a7ee:	e004      	b.n	800a7fa <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a7f0:	2301      	movs	r3, #1
 800a7f2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800a7f6:	e000      	b.n	800a7fa <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 800a7f8:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a7fa:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a7fe:	2b00      	cmp	r3, #0
 800a800:	d10b      	bne.n	800a81a <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800a802:	4b26      	ldr	r3, [pc, #152]	; (800a89c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a804:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a806:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800a80a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a80e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a812:	4a22      	ldr	r2, [pc, #136]	; (800a89c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a814:	430b      	orrs	r3, r1
 800a816:	6553      	str	r3, [r2, #84]	; 0x54
 800a818:	e003      	b.n	800a822 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a81a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a81e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800a822:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a826:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a82a:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 800a82e:	673b      	str	r3, [r7, #112]	; 0x70
 800a830:	2300      	movs	r3, #0
 800a832:	677b      	str	r3, [r7, #116]	; 0x74
 800a834:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 800a838:	460b      	mov	r3, r1
 800a83a:	4313      	orrs	r3, r2
 800a83c:	d034      	beq.n	800a8a8 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800a83e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a842:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a844:	2b00      	cmp	r3, #0
 800a846:	d003      	beq.n	800a850 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 800a848:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a84c:	d007      	beq.n	800a85e <HAL_RCCEx_PeriphCLKConfig+0x103a>
 800a84e:	e011      	b.n	800a874 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a850:	4b12      	ldr	r3, [pc, #72]	; (800a89c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a852:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a854:	4a11      	ldr	r2, [pc, #68]	; (800a89c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a856:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a85a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800a85c:	e00e      	b.n	800a87c <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800a85e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a862:	3308      	adds	r3, #8
 800a864:	2102      	movs	r1, #2
 800a866:	4618      	mov	r0, r3
 800a868:	f001 fbcc 	bl	800c004 <RCCEx_PLL2_Config>
 800a86c:	4603      	mov	r3, r0
 800a86e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800a872:	e003      	b.n	800a87c <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 800a874:	2301      	movs	r3, #1
 800a876:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800a87a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a87c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a880:	2b00      	cmp	r3, #0
 800a882:	d10d      	bne.n	800a8a0 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800a884:	4b05      	ldr	r3, [pc, #20]	; (800a89c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a886:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a888:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800a88c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a890:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a892:	4a02      	ldr	r2, [pc, #8]	; (800a89c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800a894:	430b      	orrs	r3, r1
 800a896:	64d3      	str	r3, [r2, #76]	; 0x4c
 800a898:	e006      	b.n	800a8a8 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 800a89a:	bf00      	nop
 800a89c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a8a0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a8a4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800a8a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a8ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8b0:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 800a8b4:	66bb      	str	r3, [r7, #104]	; 0x68
 800a8b6:	2300      	movs	r3, #0
 800a8b8:	66fb      	str	r3, [r7, #108]	; 0x6c
 800a8ba:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 800a8be:	460b      	mov	r3, r1
 800a8c0:	4313      	orrs	r3, r2
 800a8c2:	d00c      	beq.n	800a8de <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800a8c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a8c8:	3328      	adds	r3, #40	; 0x28
 800a8ca:	2102      	movs	r1, #2
 800a8cc:	4618      	mov	r0, r3
 800a8ce:	f001 fc4b 	bl	800c168 <RCCEx_PLL3_Config>
 800a8d2:	4603      	mov	r3, r0
 800a8d4:	2b00      	cmp	r3, #0
 800a8d6:	d002      	beq.n	800a8de <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 800a8d8:	2301      	movs	r3, #1
 800a8da:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800a8de:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a8e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8e6:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 800a8ea:	663b      	str	r3, [r7, #96]	; 0x60
 800a8ec:	2300      	movs	r3, #0
 800a8ee:	667b      	str	r3, [r7, #100]	; 0x64
 800a8f0:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 800a8f4:	460b      	mov	r3, r1
 800a8f6:	4313      	orrs	r3, r2
 800a8f8:	d038      	beq.n	800a96c <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 800a8fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a8fe:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a902:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a906:	d018      	beq.n	800a93a <HAL_RCCEx_PeriphCLKConfig+0x1116>
 800a908:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a90c:	d811      	bhi.n	800a932 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800a90e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a912:	d014      	beq.n	800a93e <HAL_RCCEx_PeriphCLKConfig+0x111a>
 800a914:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a918:	d80b      	bhi.n	800a932 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800a91a:	2b00      	cmp	r3, #0
 800a91c:	d011      	beq.n	800a942 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 800a91e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a922:	d106      	bne.n	800a932 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a924:	4bc3      	ldr	r3, [pc, #780]	; (800ac34 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a926:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a928:	4ac2      	ldr	r2, [pc, #776]	; (800ac34 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a92a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a92e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 800a930:	e008      	b.n	800a944 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800a932:	2301      	movs	r3, #1
 800a934:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800a938:	e004      	b.n	800a944 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800a93a:	bf00      	nop
 800a93c:	e002      	b.n	800a944 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800a93e:	bf00      	nop
 800a940:	e000      	b.n	800a944 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800a942:	bf00      	nop
    }

    if (ret == HAL_OK)
 800a944:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a948:	2b00      	cmp	r3, #0
 800a94a:	d10b      	bne.n	800a964 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800a94c:	4bb9      	ldr	r3, [pc, #740]	; (800ac34 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a94e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a950:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800a954:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a958:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a95c:	4ab5      	ldr	r2, [pc, #724]	; (800ac34 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a95e:	430b      	orrs	r3, r1
 800a960:	6553      	str	r3, [r2, #84]	; 0x54
 800a962:	e003      	b.n	800a96c <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a964:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800a968:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800a96c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a970:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a974:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 800a978:	65bb      	str	r3, [r7, #88]	; 0x58
 800a97a:	2300      	movs	r3, #0
 800a97c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a97e:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 800a982:	460b      	mov	r3, r1
 800a984:	4313      	orrs	r3, r2
 800a986:	d009      	beq.n	800a99c <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800a988:	4baa      	ldr	r3, [pc, #680]	; (800ac34 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a98a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a98c:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800a990:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a994:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a996:	4aa7      	ldr	r2, [pc, #668]	; (800ac34 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a998:	430b      	orrs	r3, r1
 800a99a:	6513      	str	r3, [r2, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800a99c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a9a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a9a4:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 800a9a8:	653b      	str	r3, [r7, #80]	; 0x50
 800a9aa:	2300      	movs	r3, #0
 800a9ac:	657b      	str	r3, [r7, #84]	; 0x54
 800a9ae:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 800a9b2:	460b      	mov	r3, r1
 800a9b4:	4313      	orrs	r3, r2
 800a9b6:	d00a      	beq.n	800a9ce <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800a9b8:	4b9e      	ldr	r3, [pc, #632]	; (800ac34 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a9ba:	691b      	ldr	r3, [r3, #16]
 800a9bc:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 800a9c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a9c4:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800a9c8:	4a9a      	ldr	r2, [pc, #616]	; (800ac34 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a9ca:	430b      	orrs	r3, r1
 800a9cc:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800a9ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a9d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a9d6:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 800a9da:	64bb      	str	r3, [r7, #72]	; 0x48
 800a9dc:	2300      	movs	r3, #0
 800a9de:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a9e0:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 800a9e4:	460b      	mov	r3, r1
 800a9e6:	4313      	orrs	r3, r2
 800a9e8:	d009      	beq.n	800a9fe <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800a9ea:	4b92      	ldr	r3, [pc, #584]	; (800ac34 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a9ec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a9ee:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 800a9f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800a9f6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a9f8:	4a8e      	ldr	r2, [pc, #568]	; (800ac34 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800a9fa:	430b      	orrs	r3, r1
 800a9fc:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800a9fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800aa02:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa06:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 800aa0a:	643b      	str	r3, [r7, #64]	; 0x40
 800aa0c:	2300      	movs	r3, #0
 800aa0e:	647b      	str	r3, [r7, #68]	; 0x44
 800aa10:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 800aa14:	460b      	mov	r3, r1
 800aa16:	4313      	orrs	r3, r2
 800aa18:	d00e      	beq.n	800aa38 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800aa1a:	4b86      	ldr	r3, [pc, #536]	; (800ac34 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800aa1c:	691b      	ldr	r3, [r3, #16]
 800aa1e:	4a85      	ldr	r2, [pc, #532]	; (800ac34 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800aa20:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800aa24:	6113      	str	r3, [r2, #16]
 800aa26:	4b83      	ldr	r3, [pc, #524]	; (800ac34 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800aa28:	6919      	ldr	r1, [r3, #16]
 800aa2a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800aa2e:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800aa32:	4a80      	ldr	r2, [pc, #512]	; (800ac34 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800aa34:	430b      	orrs	r3, r1
 800aa36:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800aa38:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800aa3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa40:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 800aa44:	63bb      	str	r3, [r7, #56]	; 0x38
 800aa46:	2300      	movs	r3, #0
 800aa48:	63fb      	str	r3, [r7, #60]	; 0x3c
 800aa4a:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 800aa4e:	460b      	mov	r3, r1
 800aa50:	4313      	orrs	r3, r2
 800aa52:	d009      	beq.n	800aa68 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800aa54:	4b77      	ldr	r3, [pc, #476]	; (800ac34 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800aa56:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800aa58:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 800aa5c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800aa60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800aa62:	4a74      	ldr	r2, [pc, #464]	; (800ac34 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800aa64:	430b      	orrs	r3, r1
 800aa66:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800aa68:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800aa6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa70:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 800aa74:	633b      	str	r3, [r7, #48]	; 0x30
 800aa76:	2300      	movs	r3, #0
 800aa78:	637b      	str	r3, [r7, #52]	; 0x34
 800aa7a:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 800aa7e:	460b      	mov	r3, r1
 800aa80:	4313      	orrs	r3, r2
 800aa82:	d00a      	beq.n	800aa9a <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800aa84:	4b6b      	ldr	r3, [pc, #428]	; (800ac34 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800aa86:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800aa88:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 800aa8c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800aa90:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800aa94:	4a67      	ldr	r2, [pc, #412]	; (800ac34 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800aa96:	430b      	orrs	r3, r1
 800aa98:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800aa9a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800aa9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aaa2:	2100      	movs	r1, #0
 800aaa4:	62b9      	str	r1, [r7, #40]	; 0x28
 800aaa6:	f003 0301 	and.w	r3, r3, #1
 800aaaa:	62fb      	str	r3, [r7, #44]	; 0x2c
 800aaac:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 800aab0:	460b      	mov	r3, r1
 800aab2:	4313      	orrs	r3, r2
 800aab4:	d011      	beq.n	800aada <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800aab6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800aaba:	3308      	adds	r3, #8
 800aabc:	2100      	movs	r1, #0
 800aabe:	4618      	mov	r0, r3
 800aac0:	f001 faa0 	bl	800c004 <RCCEx_PLL2_Config>
 800aac4:	4603      	mov	r3, r0
 800aac6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800aaca:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800aace:	2b00      	cmp	r3, #0
 800aad0:	d003      	beq.n	800aada <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800aad2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800aad6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800aada:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800aade:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aae2:	2100      	movs	r1, #0
 800aae4:	6239      	str	r1, [r7, #32]
 800aae6:	f003 0302 	and.w	r3, r3, #2
 800aaea:	627b      	str	r3, [r7, #36]	; 0x24
 800aaec:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800aaf0:	460b      	mov	r3, r1
 800aaf2:	4313      	orrs	r3, r2
 800aaf4:	d011      	beq.n	800ab1a <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800aaf6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800aafa:	3308      	adds	r3, #8
 800aafc:	2101      	movs	r1, #1
 800aafe:	4618      	mov	r0, r3
 800ab00:	f001 fa80 	bl	800c004 <RCCEx_PLL2_Config>
 800ab04:	4603      	mov	r3, r0
 800ab06:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800ab0a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ab0e:	2b00      	cmp	r3, #0
 800ab10:	d003      	beq.n	800ab1a <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ab12:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ab16:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800ab1a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ab1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab22:	2100      	movs	r1, #0
 800ab24:	61b9      	str	r1, [r7, #24]
 800ab26:	f003 0304 	and.w	r3, r3, #4
 800ab2a:	61fb      	str	r3, [r7, #28]
 800ab2c:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800ab30:	460b      	mov	r3, r1
 800ab32:	4313      	orrs	r3, r2
 800ab34:	d011      	beq.n	800ab5a <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800ab36:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ab3a:	3308      	adds	r3, #8
 800ab3c:	2102      	movs	r1, #2
 800ab3e:	4618      	mov	r0, r3
 800ab40:	f001 fa60 	bl	800c004 <RCCEx_PLL2_Config>
 800ab44:	4603      	mov	r3, r0
 800ab46:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800ab4a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ab4e:	2b00      	cmp	r3, #0
 800ab50:	d003      	beq.n	800ab5a <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ab52:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ab56:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800ab5a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ab5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab62:	2100      	movs	r1, #0
 800ab64:	6139      	str	r1, [r7, #16]
 800ab66:	f003 0308 	and.w	r3, r3, #8
 800ab6a:	617b      	str	r3, [r7, #20]
 800ab6c:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800ab70:	460b      	mov	r3, r1
 800ab72:	4313      	orrs	r3, r2
 800ab74:	d011      	beq.n	800ab9a <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800ab76:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ab7a:	3328      	adds	r3, #40	; 0x28
 800ab7c:	2100      	movs	r1, #0
 800ab7e:	4618      	mov	r0, r3
 800ab80:	f001 faf2 	bl	800c168 <RCCEx_PLL3_Config>
 800ab84:	4603      	mov	r3, r0
 800ab86:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  
    if (ret == HAL_OK)
 800ab8a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ab8e:	2b00      	cmp	r3, #0
 800ab90:	d003      	beq.n	800ab9a <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ab92:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ab96:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800ab9a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800ab9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aba2:	2100      	movs	r1, #0
 800aba4:	60b9      	str	r1, [r7, #8]
 800aba6:	f003 0310 	and.w	r3, r3, #16
 800abaa:	60fb      	str	r3, [r7, #12]
 800abac:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800abb0:	460b      	mov	r3, r1
 800abb2:	4313      	orrs	r3, r2
 800abb4:	d011      	beq.n	800abda <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800abb6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800abba:	3328      	adds	r3, #40	; 0x28
 800abbc:	2101      	movs	r1, #1
 800abbe:	4618      	mov	r0, r3
 800abc0:	f001 fad2 	bl	800c168 <RCCEx_PLL3_Config>
 800abc4:	4603      	mov	r3, r0
 800abc6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800abca:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800abce:	2b00      	cmp	r3, #0
 800abd0:	d003      	beq.n	800abda <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800abd2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800abd6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800abda:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800abde:	e9d3 2300 	ldrd	r2, r3, [r3]
 800abe2:	2100      	movs	r1, #0
 800abe4:	6039      	str	r1, [r7, #0]
 800abe6:	f003 0320 	and.w	r3, r3, #32
 800abea:	607b      	str	r3, [r7, #4]
 800abec:	e9d7 1200 	ldrd	r1, r2, [r7]
 800abf0:	460b      	mov	r3, r1
 800abf2:	4313      	orrs	r3, r2
 800abf4:	d011      	beq.n	800ac1a <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800abf6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800abfa:	3328      	adds	r3, #40	; 0x28
 800abfc:	2102      	movs	r1, #2
 800abfe:	4618      	mov	r0, r3
 800ac00:	f001 fab2 	bl	800c168 <RCCEx_PLL3_Config>
 800ac04:	4603      	mov	r3, r0
 800ac06:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800ac0a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ac0e:	2b00      	cmp	r3, #0
 800ac10:	d003      	beq.n	800ac1a <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ac12:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800ac16:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }

  if (status == HAL_OK)
 800ac1a:	f897 3126 	ldrb.w	r3, [r7, #294]	; 0x126
 800ac1e:	2b00      	cmp	r3, #0
 800ac20:	d101      	bne.n	800ac26 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 800ac22:	2300      	movs	r3, #0
 800ac24:	e000      	b.n	800ac28 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 800ac26:	2301      	movs	r3, #1
}
 800ac28:	4618      	mov	r0, r3
 800ac2a:	f507 7794 	add.w	r7, r7, #296	; 0x128
 800ac2e:	46bd      	mov	sp, r7
 800ac30:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800ac34:	58024400 	.word	0x58024400

0800ac38 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 800ac38:	b580      	push	{r7, lr}
 800ac3a:	b090      	sub	sp, #64	; 0x40
 800ac3c:	af00      	add	r7, sp, #0
 800ac3e:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800ac42:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ac46:	f5a2 7180 	sub.w	r1, r2, #256	; 0x100
 800ac4a:	430b      	orrs	r3, r1
 800ac4c:	f040 8094 	bne.w	800ad78 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 800ac50:	4b9e      	ldr	r3, [pc, #632]	; (800aecc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800ac52:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ac54:	f003 0307 	and.w	r3, r3, #7
 800ac58:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800ac5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac5c:	2b04      	cmp	r3, #4
 800ac5e:	f200 8087 	bhi.w	800ad70 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 800ac62:	a201      	add	r2, pc, #4	; (adr r2, 800ac68 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 800ac64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ac68:	0800ac7d 	.word	0x0800ac7d
 800ac6c:	0800aca5 	.word	0x0800aca5
 800ac70:	0800accd 	.word	0x0800accd
 800ac74:	0800ad69 	.word	0x0800ad69
 800ac78:	0800acf5 	.word	0x0800acf5
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800ac7c:	4b93      	ldr	r3, [pc, #588]	; (800aecc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800ac7e:	681b      	ldr	r3, [r3, #0]
 800ac80:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ac84:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800ac88:	d108      	bne.n	800ac9c <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800ac8a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ac8e:	4618      	mov	r0, r3
 800ac90:	f001 f810 	bl	800bcb4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800ac94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac96:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ac98:	f000 bd45 	b.w	800b726 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ac9c:	2300      	movs	r3, #0
 800ac9e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800aca0:	f000 bd41 	b.w	800b726 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800aca4:	4b89      	ldr	r3, [pc, #548]	; (800aecc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800aca6:	681b      	ldr	r3, [r3, #0]
 800aca8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800acac:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800acb0:	d108      	bne.n	800acc4 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800acb2:	f107 0318 	add.w	r3, r7, #24
 800acb6:	4618      	mov	r0, r3
 800acb8:	f000 fd54 	bl	800b764 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800acbc:	69bb      	ldr	r3, [r7, #24]
 800acbe:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800acc0:	f000 bd31 	b.w	800b726 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800acc4:	2300      	movs	r3, #0
 800acc6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800acc8:	f000 bd2d 	b.w	800b726 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800accc:	4b7f      	ldr	r3, [pc, #508]	; (800aecc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800acce:	681b      	ldr	r3, [r3, #0]
 800acd0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800acd4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800acd8:	d108      	bne.n	800acec <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800acda:	f107 030c 	add.w	r3, r7, #12
 800acde:	4618      	mov	r0, r3
 800ace0:	f000 fe94 	bl	800ba0c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800ace4:	68fb      	ldr	r3, [r7, #12]
 800ace6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ace8:	f000 bd1d 	b.w	800b726 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800acec:	2300      	movs	r3, #0
 800acee:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800acf0:	f000 bd19 	b.w	800b726 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800acf4:	4b75      	ldr	r3, [pc, #468]	; (800aecc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800acf6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800acf8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800acfc:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800acfe:	4b73      	ldr	r3, [pc, #460]	; (800aecc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800ad00:	681b      	ldr	r3, [r3, #0]
 800ad02:	f003 0304 	and.w	r3, r3, #4
 800ad06:	2b04      	cmp	r3, #4
 800ad08:	d10c      	bne.n	800ad24 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 800ad0a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ad0c:	2b00      	cmp	r3, #0
 800ad0e:	d109      	bne.n	800ad24 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800ad10:	4b6e      	ldr	r3, [pc, #440]	; (800aecc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800ad12:	681b      	ldr	r3, [r3, #0]
 800ad14:	08db      	lsrs	r3, r3, #3
 800ad16:	f003 0303 	and.w	r3, r3, #3
 800ad1a:	4a6d      	ldr	r2, [pc, #436]	; (800aed0 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800ad1c:	fa22 f303 	lsr.w	r3, r2, r3
 800ad20:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ad22:	e01f      	b.n	800ad64 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800ad24:	4b69      	ldr	r3, [pc, #420]	; (800aecc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800ad26:	681b      	ldr	r3, [r3, #0]
 800ad28:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ad2c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ad30:	d106      	bne.n	800ad40 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 800ad32:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ad34:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800ad38:	d102      	bne.n	800ad40 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800ad3a:	4b66      	ldr	r3, [pc, #408]	; (800aed4 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800ad3c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ad3e:	e011      	b.n	800ad64 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800ad40:	4b62      	ldr	r3, [pc, #392]	; (800aecc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800ad42:	681b      	ldr	r3, [r3, #0]
 800ad44:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ad48:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800ad4c:	d106      	bne.n	800ad5c <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 800ad4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ad50:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ad54:	d102      	bne.n	800ad5c <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800ad56:	4b60      	ldr	r3, [pc, #384]	; (800aed8 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 800ad58:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ad5a:	e003      	b.n	800ad64 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800ad5c:	2300      	movs	r3, #0
 800ad5e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800ad60:	f000 bce1 	b.w	800b726 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800ad64:	f000 bcdf 	b.w	800b726 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800ad68:	4b5c      	ldr	r3, [pc, #368]	; (800aedc <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800ad6a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ad6c:	f000 bcdb 	b.w	800b726 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800ad70:	2300      	movs	r3, #0
 800ad72:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ad74:	f000 bcd7 	b.w	800b726 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 800ad78:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ad7c:	f5a2 7100 	sub.w	r1, r2, #512	; 0x200
 800ad80:	430b      	orrs	r3, r1
 800ad82:	f040 80ad 	bne.w	800aee0 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {

    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 800ad86:	4b51      	ldr	r3, [pc, #324]	; (800aecc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800ad88:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ad8a:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 800ad8e:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800ad90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad92:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ad96:	d056      	beq.n	800ae46 <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 800ad98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ad9a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ad9e:	f200 8090 	bhi.w	800aec2 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800ada2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ada4:	2bc0      	cmp	r3, #192	; 0xc0
 800ada6:	f000 8088 	beq.w	800aeba <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 800adaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800adac:	2bc0      	cmp	r3, #192	; 0xc0
 800adae:	f200 8088 	bhi.w	800aec2 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800adb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800adb4:	2b80      	cmp	r3, #128	; 0x80
 800adb6:	d032      	beq.n	800ae1e <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 800adb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800adba:	2b80      	cmp	r3, #128	; 0x80
 800adbc:	f200 8081 	bhi.w	800aec2 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800adc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800adc2:	2b00      	cmp	r3, #0
 800adc4:	d003      	beq.n	800adce <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 800adc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800adc8:	2b40      	cmp	r3, #64	; 0x40
 800adca:	d014      	beq.n	800adf6 <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 800adcc:	e079      	b.n	800aec2 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
    {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800adce:	4b3f      	ldr	r3, [pc, #252]	; (800aecc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800add0:	681b      	ldr	r3, [r3, #0]
 800add2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800add6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800adda:	d108      	bne.n	800adee <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800addc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ade0:	4618      	mov	r0, r3
 800ade2:	f000 ff67 	bl	800bcb4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800ade6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ade8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800adea:	f000 bc9c 	b.w	800b726 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800adee:	2300      	movs	r3, #0
 800adf0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800adf2:	f000 bc98 	b.w	800b726 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800adf6:	4b35      	ldr	r3, [pc, #212]	; (800aecc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800adf8:	681b      	ldr	r3, [r3, #0]
 800adfa:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800adfe:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800ae02:	d108      	bne.n	800ae16 <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ae04:	f107 0318 	add.w	r3, r7, #24
 800ae08:	4618      	mov	r0, r3
 800ae0a:	f000 fcab 	bl	800b764 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800ae0e:	69bb      	ldr	r3, [r7, #24]
 800ae10:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ae12:	f000 bc88 	b.w	800b726 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ae16:	2300      	movs	r3, #0
 800ae18:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ae1a:	f000 bc84 	b.w	800b726 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800ae1e:	4b2b      	ldr	r3, [pc, #172]	; (800aecc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800ae20:	681b      	ldr	r3, [r3, #0]
 800ae22:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800ae26:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ae2a:	d108      	bne.n	800ae3e <HAL_RCCEx_GetPeriphCLKFreq+0x206>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ae2c:	f107 030c 	add.w	r3, r7, #12
 800ae30:	4618      	mov	r0, r3
 800ae32:	f000 fdeb 	bl	800ba0c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800ae36:	68fb      	ldr	r3, [r7, #12]
 800ae38:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ae3a:	f000 bc74 	b.w	800b726 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ae3e:	2300      	movs	r3, #0
 800ae40:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800ae42:	f000 bc70 	b.w	800b726 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800ae46:	4b21      	ldr	r3, [pc, #132]	; (800aecc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800ae48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ae4a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800ae4e:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800ae50:	4b1e      	ldr	r3, [pc, #120]	; (800aecc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800ae52:	681b      	ldr	r3, [r3, #0]
 800ae54:	f003 0304 	and.w	r3, r3, #4
 800ae58:	2b04      	cmp	r3, #4
 800ae5a:	d10c      	bne.n	800ae76 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 800ae5c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ae5e:	2b00      	cmp	r3, #0
 800ae60:	d109      	bne.n	800ae76 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800ae62:	4b1a      	ldr	r3, [pc, #104]	; (800aecc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800ae64:	681b      	ldr	r3, [r3, #0]
 800ae66:	08db      	lsrs	r3, r3, #3
 800ae68:	f003 0303 	and.w	r3, r3, #3
 800ae6c:	4a18      	ldr	r2, [pc, #96]	; (800aed0 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800ae6e:	fa22 f303 	lsr.w	r3, r2, r3
 800ae72:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ae74:	e01f      	b.n	800aeb6 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800ae76:	4b15      	ldr	r3, [pc, #84]	; (800aecc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800ae78:	681b      	ldr	r3, [r3, #0]
 800ae7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ae7e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ae82:	d106      	bne.n	800ae92 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 800ae84:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ae86:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800ae8a:	d102      	bne.n	800ae92 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800ae8c:	4b11      	ldr	r3, [pc, #68]	; (800aed4 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800ae8e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ae90:	e011      	b.n	800aeb6 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800ae92:	4b0e      	ldr	r3, [pc, #56]	; (800aecc <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800ae94:	681b      	ldr	r3, [r3, #0]
 800ae96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800ae9a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800ae9e:	d106      	bne.n	800aeae <HAL_RCCEx_GetPeriphCLKFreq+0x276>
 800aea0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aea2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800aea6:	d102      	bne.n	800aeae <HAL_RCCEx_GetPeriphCLKFreq+0x276>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800aea8:	4b0b      	ldr	r3, [pc, #44]	; (800aed8 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 800aeaa:	63fb      	str	r3, [r7, #60]	; 0x3c
 800aeac:	e003      	b.n	800aeb6 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800aeae:	2300      	movs	r3, #0
 800aeb0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800aeb2:	f000 bc38 	b.w	800b726 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800aeb6:	f000 bc36 	b.w	800b726 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800aeba:	4b08      	ldr	r3, [pc, #32]	; (800aedc <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800aebc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800aebe:	f000 bc32 	b.w	800b726 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800aec2:	2300      	movs	r3, #0
 800aec4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800aec6:	f000 bc2e 	b.w	800b726 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800aeca:	bf00      	nop
 800aecc:	58024400 	.word	0x58024400
 800aed0:	03d09000 	.word	0x03d09000
 800aed4:	003d0900 	.word	0x003d0900
 800aed8:	00989680 	.word	0x00989680
 800aedc:	00bb8000 	.word	0x00bb8000
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 800aee0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800aee4:	f5a2 6180 	sub.w	r1, r2, #1024	; 0x400
 800aee8:	430b      	orrs	r3, r1
 800aeea:	f040 809c 	bne.w	800b026 <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 800aeee:	4b9e      	ldr	r3, [pc, #632]	; (800b168 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800aef0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800aef2:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 800aef6:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800aef8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aefa:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800aefe:	d054      	beq.n	800afaa <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 800af00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af02:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800af06:	f200 808b 	bhi.w	800b020 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800af0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af0c:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800af10:	f000 8083 	beq.w	800b01a <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 800af14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af16:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800af1a:	f200 8081 	bhi.w	800b020 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800af1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af20:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800af24:	d02f      	beq.n	800af86 <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
 800af26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af28:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800af2c:	d878      	bhi.n	800b020 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800af2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af30:	2b00      	cmp	r3, #0
 800af32:	d004      	beq.n	800af3e <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 800af34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af36:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800af3a:	d012      	beq.n	800af62 <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 800af3c:	e070      	b.n	800b020 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800af3e:	4b8a      	ldr	r3, [pc, #552]	; (800b168 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800af40:	681b      	ldr	r3, [r3, #0]
 800af42:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800af46:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800af4a:	d107      	bne.n	800af5c <HAL_RCCEx_GetPeriphCLKFreq+0x324>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800af4c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800af50:	4618      	mov	r0, r3
 800af52:	f000 feaf 	bl	800bcb4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800af56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af58:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800af5a:	e3e4      	b.n	800b726 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800af5c:	2300      	movs	r3, #0
 800af5e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800af60:	e3e1      	b.n	800b726 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800af62:	4b81      	ldr	r3, [pc, #516]	; (800b168 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800af64:	681b      	ldr	r3, [r3, #0]
 800af66:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800af6a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800af6e:	d107      	bne.n	800af80 <HAL_RCCEx_GetPeriphCLKFreq+0x348>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800af70:	f107 0318 	add.w	r3, r7, #24
 800af74:	4618      	mov	r0, r3
 800af76:	f000 fbf5 	bl	800b764 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800af7a:	69bb      	ldr	r3, [r7, #24]
 800af7c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800af7e:	e3d2      	b.n	800b726 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800af80:	2300      	movs	r3, #0
 800af82:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800af84:	e3cf      	b.n	800b726 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800af86:	4b78      	ldr	r3, [pc, #480]	; (800b168 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800af88:	681b      	ldr	r3, [r3, #0]
 800af8a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800af8e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800af92:	d107      	bne.n	800afa4 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800af94:	f107 030c 	add.w	r3, r7, #12
 800af98:	4618      	mov	r0, r3
 800af9a:	f000 fd37 	bl	800ba0c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800af9e:	68fb      	ldr	r3, [r7, #12]
 800afa0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800afa2:	e3c0      	b.n	800b726 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800afa4:	2300      	movs	r3, #0
 800afa6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800afa8:	e3bd      	b.n	800b726 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800afaa:	4b6f      	ldr	r3, [pc, #444]	; (800b168 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800afac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800afae:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800afb2:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800afb4:	4b6c      	ldr	r3, [pc, #432]	; (800b168 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800afb6:	681b      	ldr	r3, [r3, #0]
 800afb8:	f003 0304 	and.w	r3, r3, #4
 800afbc:	2b04      	cmp	r3, #4
 800afbe:	d10c      	bne.n	800afda <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 800afc0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800afc2:	2b00      	cmp	r3, #0
 800afc4:	d109      	bne.n	800afda <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800afc6:	4b68      	ldr	r3, [pc, #416]	; (800b168 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800afc8:	681b      	ldr	r3, [r3, #0]
 800afca:	08db      	lsrs	r3, r3, #3
 800afcc:	f003 0303 	and.w	r3, r3, #3
 800afd0:	4a66      	ldr	r2, [pc, #408]	; (800b16c <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800afd2:	fa22 f303 	lsr.w	r3, r2, r3
 800afd6:	63fb      	str	r3, [r7, #60]	; 0x3c
 800afd8:	e01e      	b.n	800b018 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800afda:	4b63      	ldr	r3, [pc, #396]	; (800b168 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800afdc:	681b      	ldr	r3, [r3, #0]
 800afde:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800afe2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800afe6:	d106      	bne.n	800aff6 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 800afe8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800afea:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800afee:	d102      	bne.n	800aff6 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800aff0:	4b5f      	ldr	r3, [pc, #380]	; (800b170 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 800aff2:	63fb      	str	r3, [r7, #60]	; 0x3c
 800aff4:	e010      	b.n	800b018 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800aff6:	4b5c      	ldr	r3, [pc, #368]	; (800b168 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800aff8:	681b      	ldr	r3, [r3, #0]
 800affa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800affe:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b002:	d106      	bne.n	800b012 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
 800b004:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b006:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b00a:	d102      	bne.n	800b012 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800b00c:	4b59      	ldr	r3, [pc, #356]	; (800b174 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 800b00e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b010:	e002      	b.n	800b018 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800b012:	2300      	movs	r3, #0
 800b014:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800b016:	e386      	b.n	800b726 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800b018:	e385      	b.n	800b726 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800b01a:	4b57      	ldr	r3, [pc, #348]	; (800b178 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 800b01c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b01e:	e382      	b.n	800b726 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800b020:	2300      	movs	r3, #0
 800b022:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b024:	e37f      	b.n	800b726 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 800b026:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b02a:	f5a2 6100 	sub.w	r1, r2, #2048	; 0x800
 800b02e:	430b      	orrs	r3, r1
 800b030:	f040 80a7 	bne.w	800b182 <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 800b034:	4b4c      	ldr	r3, [pc, #304]	; (800b168 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800b036:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b038:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 800b03c:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800b03e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b040:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800b044:	d055      	beq.n	800b0f2 <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
 800b046:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b048:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800b04c:	f200 8096 	bhi.w	800b17c <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800b050:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b052:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800b056:	f000 8084 	beq.w	800b162 <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 800b05a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b05c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800b060:	f200 808c 	bhi.w	800b17c <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800b064:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b066:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b06a:	d030      	beq.n	800b0ce <HAL_RCCEx_GetPeriphCLKFreq+0x496>
 800b06c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b06e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b072:	f200 8083 	bhi.w	800b17c <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800b076:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b078:	2b00      	cmp	r3, #0
 800b07a:	d004      	beq.n	800b086 <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 800b07c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b07e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800b082:	d012      	beq.n	800b0aa <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 800b084:	e07a      	b.n	800b17c <HAL_RCCEx_GetPeriphCLKFreq+0x544>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800b086:	4b38      	ldr	r3, [pc, #224]	; (800b168 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800b088:	681b      	ldr	r3, [r3, #0]
 800b08a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b08e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b092:	d107      	bne.n	800b0a4 <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b094:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b098:	4618      	mov	r0, r3
 800b09a:	f000 fe0b 	bl	800bcb4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800b09e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b0a0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b0a2:	e340      	b.n	800b726 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b0a4:	2300      	movs	r3, #0
 800b0a6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b0a8:	e33d      	b.n	800b726 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b0aa:	4b2f      	ldr	r3, [pc, #188]	; (800b168 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800b0ac:	681b      	ldr	r3, [r3, #0]
 800b0ae:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b0b2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b0b6:	d107      	bne.n	800b0c8 <HAL_RCCEx_GetPeriphCLKFreq+0x490>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b0b8:	f107 0318 	add.w	r3, r7, #24
 800b0bc:	4618      	mov	r0, r3
 800b0be:	f000 fb51 	bl	800b764 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800b0c2:	69bb      	ldr	r3, [r7, #24]
 800b0c4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b0c6:	e32e      	b.n	800b726 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b0c8:	2300      	movs	r3, #0
 800b0ca:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b0cc:	e32b      	b.n	800b726 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800b0ce:	4b26      	ldr	r3, [pc, #152]	; (800b168 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800b0d0:	681b      	ldr	r3, [r3, #0]
 800b0d2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b0d6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b0da:	d107      	bne.n	800b0ec <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b0dc:	f107 030c 	add.w	r3, r7, #12
 800b0e0:	4618      	mov	r0, r3
 800b0e2:	f000 fc93 	bl	800ba0c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800b0e6:	68fb      	ldr	r3, [r7, #12]
 800b0e8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b0ea:	e31c      	b.n	800b726 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b0ec:	2300      	movs	r3, #0
 800b0ee:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b0f0:	e319      	b.n	800b726 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800b0f2:	4b1d      	ldr	r3, [pc, #116]	; (800b168 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800b0f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b0f6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800b0fa:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800b0fc:	4b1a      	ldr	r3, [pc, #104]	; (800b168 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800b0fe:	681b      	ldr	r3, [r3, #0]
 800b100:	f003 0304 	and.w	r3, r3, #4
 800b104:	2b04      	cmp	r3, #4
 800b106:	d10c      	bne.n	800b122 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 800b108:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b10a:	2b00      	cmp	r3, #0
 800b10c:	d109      	bne.n	800b122 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b10e:	4b16      	ldr	r3, [pc, #88]	; (800b168 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800b110:	681b      	ldr	r3, [r3, #0]
 800b112:	08db      	lsrs	r3, r3, #3
 800b114:	f003 0303 	and.w	r3, r3, #3
 800b118:	4a14      	ldr	r2, [pc, #80]	; (800b16c <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800b11a:	fa22 f303 	lsr.w	r3, r2, r3
 800b11e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b120:	e01e      	b.n	800b160 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800b122:	4b11      	ldr	r3, [pc, #68]	; (800b168 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800b124:	681b      	ldr	r3, [r3, #0]
 800b126:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b12a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b12e:	d106      	bne.n	800b13e <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 800b130:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b132:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b136:	d102      	bne.n	800b13e <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800b138:	4b0d      	ldr	r3, [pc, #52]	; (800b170 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 800b13a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b13c:	e010      	b.n	800b160 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800b13e:	4b0a      	ldr	r3, [pc, #40]	; (800b168 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800b140:	681b      	ldr	r3, [r3, #0]
 800b142:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b146:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b14a:	d106      	bne.n	800b15a <HAL_RCCEx_GetPeriphCLKFreq+0x522>
 800b14c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b14e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b152:	d102      	bne.n	800b15a <HAL_RCCEx_GetPeriphCLKFreq+0x522>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800b154:	4b07      	ldr	r3, [pc, #28]	; (800b174 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 800b156:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b158:	e002      	b.n	800b160 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800b15a:	2300      	movs	r3, #0
 800b15c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800b15e:	e2e2      	b.n	800b726 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800b160:	e2e1      	b.n	800b726 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800b162:	4b05      	ldr	r3, [pc, #20]	; (800b178 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 800b164:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b166:	e2de      	b.n	800b726 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800b168:	58024400 	.word	0x58024400
 800b16c:	03d09000 	.word	0x03d09000
 800b170:	003d0900 	.word	0x003d0900
 800b174:	00989680 	.word	0x00989680
 800b178:	00bb8000 	.word	0x00bb8000
      }

      default :
      {
        frequency = 0;
 800b17c:	2300      	movs	r3, #0
 800b17e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b180:	e2d1      	b.n	800b726 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800b182:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b186:	f5a2 5180 	sub.w	r1, r2, #4096	; 0x1000
 800b18a:	430b      	orrs	r3, r1
 800b18c:	f040 809c 	bne.w	800b2c8 <HAL_RCCEx_GetPeriphCLKFreq+0x690>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 800b190:	4b93      	ldr	r3, [pc, #588]	; (800b3e0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800b192:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b194:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 800b198:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800b19a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b19c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b1a0:	d054      	beq.n	800b24c <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 800b1a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b1a4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b1a8:	f200 808b 	bhi.w	800b2c2 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800b1ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b1ae:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800b1b2:	f000 8083 	beq.w	800b2bc <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 800b1b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b1b8:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800b1bc:	f200 8081 	bhi.w	800b2c2 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800b1c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b1c2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b1c6:	d02f      	beq.n	800b228 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 800b1c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b1ca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b1ce:	d878      	bhi.n	800b2c2 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800b1d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b1d2:	2b00      	cmp	r3, #0
 800b1d4:	d004      	beq.n	800b1e0 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 800b1d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b1d8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b1dc:	d012      	beq.n	800b204 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 800b1de:	e070      	b.n	800b2c2 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800b1e0:	4b7f      	ldr	r3, [pc, #508]	; (800b3e0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800b1e2:	681b      	ldr	r3, [r3, #0]
 800b1e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b1e8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b1ec:	d107      	bne.n	800b1fe <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b1ee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b1f2:	4618      	mov	r0, r3
 800b1f4:	f000 fd5e 	bl	800bcb4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800b1f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b1fa:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b1fc:	e293      	b.n	800b726 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b1fe:	2300      	movs	r3, #0
 800b200:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b202:	e290      	b.n	800b726 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b204:	4b76      	ldr	r3, [pc, #472]	; (800b3e0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800b206:	681b      	ldr	r3, [r3, #0]
 800b208:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b20c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b210:	d107      	bne.n	800b222 <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b212:	f107 0318 	add.w	r3, r7, #24
 800b216:	4618      	mov	r0, r3
 800b218:	f000 faa4 	bl	800b764 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800b21c:	69bb      	ldr	r3, [r7, #24]
 800b21e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b220:	e281      	b.n	800b726 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b222:	2300      	movs	r3, #0
 800b224:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b226:	e27e      	b.n	800b726 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800b228:	4b6d      	ldr	r3, [pc, #436]	; (800b3e0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800b22a:	681b      	ldr	r3, [r3, #0]
 800b22c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b230:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b234:	d107      	bne.n	800b246 <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b236:	f107 030c 	add.w	r3, r7, #12
 800b23a:	4618      	mov	r0, r3
 800b23c:	f000 fbe6 	bl	800ba0c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800b240:	68fb      	ldr	r3, [r7, #12]
 800b242:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b244:	e26f      	b.n	800b726 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b246:	2300      	movs	r3, #0
 800b248:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b24a:	e26c      	b.n	800b726 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800b24c:	4b64      	ldr	r3, [pc, #400]	; (800b3e0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800b24e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b250:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800b254:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800b256:	4b62      	ldr	r3, [pc, #392]	; (800b3e0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800b258:	681b      	ldr	r3, [r3, #0]
 800b25a:	f003 0304 	and.w	r3, r3, #4
 800b25e:	2b04      	cmp	r3, #4
 800b260:	d10c      	bne.n	800b27c <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 800b262:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b264:	2b00      	cmp	r3, #0
 800b266:	d109      	bne.n	800b27c <HAL_RCCEx_GetPeriphCLKFreq+0x644>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b268:	4b5d      	ldr	r3, [pc, #372]	; (800b3e0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800b26a:	681b      	ldr	r3, [r3, #0]
 800b26c:	08db      	lsrs	r3, r3, #3
 800b26e:	f003 0303 	and.w	r3, r3, #3
 800b272:	4a5c      	ldr	r2, [pc, #368]	; (800b3e4 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 800b274:	fa22 f303 	lsr.w	r3, r2, r3
 800b278:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b27a:	e01e      	b.n	800b2ba <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800b27c:	4b58      	ldr	r3, [pc, #352]	; (800b3e0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800b27e:	681b      	ldr	r3, [r3, #0]
 800b280:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b284:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b288:	d106      	bne.n	800b298 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 800b28a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b28c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b290:	d102      	bne.n	800b298 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800b292:	4b55      	ldr	r3, [pc, #340]	; (800b3e8 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800b294:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b296:	e010      	b.n	800b2ba <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800b298:	4b51      	ldr	r3, [pc, #324]	; (800b3e0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800b29a:	681b      	ldr	r3, [r3, #0]
 800b29c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b2a0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b2a4:	d106      	bne.n	800b2b4 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 800b2a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b2a8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b2ac:	d102      	bne.n	800b2b4 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800b2ae:	4b4f      	ldr	r3, [pc, #316]	; (800b3ec <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 800b2b0:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b2b2:	e002      	b.n	800b2ba <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800b2b4:	2300      	movs	r3, #0
 800b2b6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800b2b8:	e235      	b.n	800b726 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800b2ba:	e234      	b.n	800b726 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800b2bc:	4b4c      	ldr	r3, [pc, #304]	; (800b3f0 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 800b2be:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b2c0:	e231      	b.n	800b726 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800b2c2:	2300      	movs	r3, #0
 800b2c4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b2c6:	e22e      	b.n	800b726 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 800b2c8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b2cc:	f5a2 5100 	sub.w	r1, r2, #8192	; 0x2000
 800b2d0:	430b      	orrs	r3, r1
 800b2d2:	f040 808f 	bne.w	800b3f4 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 800b2d6:	4b42      	ldr	r3, [pc, #264]	; (800b3e0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800b2d8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b2da:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 800b2de:	63bb      	str	r3, [r7, #56]	; 0x38
    switch (srcclk)
 800b2e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b2e2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800b2e6:	d06b      	beq.n	800b3c0 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 800b2e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b2ea:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800b2ee:	d874      	bhi.n	800b3da <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800b2f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b2f2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800b2f6:	d056      	beq.n	800b3a6 <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 800b2f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b2fa:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800b2fe:	d86c      	bhi.n	800b3da <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800b300:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b302:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800b306:	d03b      	beq.n	800b380 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 800b308:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b30a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800b30e:	d864      	bhi.n	800b3da <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800b310:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b312:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b316:	d021      	beq.n	800b35c <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 800b318:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b31a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b31e:	d85c      	bhi.n	800b3da <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800b320:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b322:	2b00      	cmp	r3, #0
 800b324:	d004      	beq.n	800b330 <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 800b326:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b328:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b32c:	d004      	beq.n	800b338 <HAL_RCCEx_GetPeriphCLKFreq+0x700>
 800b32e:	e054      	b.n	800b3da <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 800b330:	f7fe fa30 	bl	8009794 <HAL_RCC_GetPCLK1Freq>
 800b334:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800b336:	e1f6      	b.n	800b726 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b338:	4b29      	ldr	r3, [pc, #164]	; (800b3e0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800b33a:	681b      	ldr	r3, [r3, #0]
 800b33c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b340:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b344:	d107      	bne.n	800b356 <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b346:	f107 0318 	add.w	r3, r7, #24
 800b34a:	4618      	mov	r0, r3
 800b34c:	f000 fa0a 	bl	800b764 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800b350:	69fb      	ldr	r3, [r7, #28]
 800b352:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b354:	e1e7      	b.n	800b726 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b356:	2300      	movs	r3, #0
 800b358:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b35a:	e1e4      	b.n	800b726 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800b35c:	4b20      	ldr	r3, [pc, #128]	; (800b3e0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800b35e:	681b      	ldr	r3, [r3, #0]
 800b360:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b364:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b368:	d107      	bne.n	800b37a <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b36a:	f107 030c 	add.w	r3, r7, #12
 800b36e:	4618      	mov	r0, r3
 800b370:	f000 fb4c 	bl	800ba0c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800b374:	693b      	ldr	r3, [r7, #16]
 800b376:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b378:	e1d5      	b.n	800b726 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b37a:	2300      	movs	r3, #0
 800b37c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b37e:	e1d2      	b.n	800b726 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800b380:	4b17      	ldr	r3, [pc, #92]	; (800b3e0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800b382:	681b      	ldr	r3, [r3, #0]
 800b384:	f003 0304 	and.w	r3, r3, #4
 800b388:	2b04      	cmp	r3, #4
 800b38a:	d109      	bne.n	800b3a0 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b38c:	4b14      	ldr	r3, [pc, #80]	; (800b3e0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800b38e:	681b      	ldr	r3, [r3, #0]
 800b390:	08db      	lsrs	r3, r3, #3
 800b392:	f003 0303 	and.w	r3, r3, #3
 800b396:	4a13      	ldr	r2, [pc, #76]	; (800b3e4 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 800b398:	fa22 f303 	lsr.w	r3, r2, r3
 800b39c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b39e:	e1c2      	b.n	800b726 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b3a0:	2300      	movs	r3, #0
 800b3a2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b3a4:	e1bf      	b.n	800b726 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800b3a6:	4b0e      	ldr	r3, [pc, #56]	; (800b3e0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800b3a8:	681b      	ldr	r3, [r3, #0]
 800b3aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b3ae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b3b2:	d102      	bne.n	800b3ba <HAL_RCCEx_GetPeriphCLKFreq+0x782>
        {
          frequency = CSI_VALUE;
 800b3b4:	4b0c      	ldr	r3, [pc, #48]	; (800b3e8 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800b3b6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b3b8:	e1b5      	b.n	800b726 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b3ba:	2300      	movs	r3, #0
 800b3bc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b3be:	e1b2      	b.n	800b726 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800b3c0:	4b07      	ldr	r3, [pc, #28]	; (800b3e0 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800b3c2:	681b      	ldr	r3, [r3, #0]
 800b3c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b3c8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b3cc:	d102      	bne.n	800b3d4 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
        {
          frequency = HSE_VALUE;
 800b3ce:	4b07      	ldr	r3, [pc, #28]	; (800b3ec <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 800b3d0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b3d2:	e1a8      	b.n	800b726 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b3d4:	2300      	movs	r3, #0
 800b3d6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b3d8:	e1a5      	b.n	800b726 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800b3da:	2300      	movs	r3, #0
 800b3dc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b3de:	e1a2      	b.n	800b726 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800b3e0:	58024400 	.word	0x58024400
 800b3e4:	03d09000 	.word	0x03d09000
 800b3e8:	003d0900 	.word	0x003d0900
 800b3ec:	00989680 	.word	0x00989680
 800b3f0:	00bb8000 	.word	0x00bb8000
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800b3f4:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b3f8:	f5a2 2100 	sub.w	r1, r2, #524288	; 0x80000
 800b3fc:	430b      	orrs	r3, r1
 800b3fe:	d173      	bne.n	800b4e8 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 800b400:	4b9c      	ldr	r3, [pc, #624]	; (800b674 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b402:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b404:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800b408:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800b40a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b40c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b410:	d02f      	beq.n	800b472 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 800b412:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b414:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b418:	d863      	bhi.n	800b4e2 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
 800b41a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b41c:	2b00      	cmp	r3, #0
 800b41e:	d004      	beq.n	800b42a <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 800b420:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b422:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b426:	d012      	beq.n	800b44e <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 800b428:	e05b      	b.n	800b4e2 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b42a:	4b92      	ldr	r3, [pc, #584]	; (800b674 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b42c:	681b      	ldr	r3, [r3, #0]
 800b42e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b432:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b436:	d107      	bne.n	800b448 <HAL_RCCEx_GetPeriphCLKFreq+0x810>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b438:	f107 0318 	add.w	r3, r7, #24
 800b43c:	4618      	mov	r0, r3
 800b43e:	f000 f991 	bl	800b764 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800b442:	69bb      	ldr	r3, [r7, #24]
 800b444:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b446:	e16e      	b.n	800b726 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b448:	2300      	movs	r3, #0
 800b44a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b44c:	e16b      	b.n	800b726 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800b44e:	4b89      	ldr	r3, [pc, #548]	; (800b674 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b450:	681b      	ldr	r3, [r3, #0]
 800b452:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b456:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b45a:	d107      	bne.n	800b46c <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b45c:	f107 030c 	add.w	r3, r7, #12
 800b460:	4618      	mov	r0, r3
 800b462:	f000 fad3 	bl	800ba0c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800b466:	697b      	ldr	r3, [r7, #20]
 800b468:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b46a:	e15c      	b.n	800b726 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b46c:	2300      	movs	r3, #0
 800b46e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b470:	e159      	b.n	800b726 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800b472:	4b80      	ldr	r3, [pc, #512]	; (800b674 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b474:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b476:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800b47a:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800b47c:	4b7d      	ldr	r3, [pc, #500]	; (800b674 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b47e:	681b      	ldr	r3, [r3, #0]
 800b480:	f003 0304 	and.w	r3, r3, #4
 800b484:	2b04      	cmp	r3, #4
 800b486:	d10c      	bne.n	800b4a2 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 800b488:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b48a:	2b00      	cmp	r3, #0
 800b48c:	d109      	bne.n	800b4a2 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b48e:	4b79      	ldr	r3, [pc, #484]	; (800b674 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b490:	681b      	ldr	r3, [r3, #0]
 800b492:	08db      	lsrs	r3, r3, #3
 800b494:	f003 0303 	and.w	r3, r3, #3
 800b498:	4a77      	ldr	r2, [pc, #476]	; (800b678 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 800b49a:	fa22 f303 	lsr.w	r3, r2, r3
 800b49e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b4a0:	e01e      	b.n	800b4e0 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800b4a2:	4b74      	ldr	r3, [pc, #464]	; (800b674 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b4a4:	681b      	ldr	r3, [r3, #0]
 800b4a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b4aa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b4ae:	d106      	bne.n	800b4be <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 800b4b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b4b2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b4b6:	d102      	bne.n	800b4be <HAL_RCCEx_GetPeriphCLKFreq+0x886>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800b4b8:	4b70      	ldr	r3, [pc, #448]	; (800b67c <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 800b4ba:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b4bc:	e010      	b.n	800b4e0 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800b4be:	4b6d      	ldr	r3, [pc, #436]	; (800b674 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b4c0:	681b      	ldr	r3, [r3, #0]
 800b4c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b4c6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b4ca:	d106      	bne.n	800b4da <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 800b4cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b4ce:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b4d2:	d102      	bne.n	800b4da <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800b4d4:	4b6a      	ldr	r3, [pc, #424]	; (800b680 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 800b4d6:	63fb      	str	r3, [r7, #60]	; 0x3c
 800b4d8:	e002      	b.n	800b4e0 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800b4da:	2300      	movs	r3, #0
 800b4dc:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800b4de:	e122      	b.n	800b726 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800b4e0:	e121      	b.n	800b726 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800b4e2:	2300      	movs	r3, #0
 800b4e4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b4e6:	e11e      	b.n	800b726 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800b4e8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b4ec:	f5a2 3180 	sub.w	r1, r2, #65536	; 0x10000
 800b4f0:	430b      	orrs	r3, r1
 800b4f2:	d133      	bne.n	800b55c <HAL_RCCEx_GetPeriphCLKFreq+0x924>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 800b4f4:	4b5f      	ldr	r3, [pc, #380]	; (800b674 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b4f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b4f8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800b4fc:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800b4fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b500:	2b00      	cmp	r3, #0
 800b502:	d004      	beq.n	800b50e <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 800b504:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b506:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b50a:	d012      	beq.n	800b532 <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
 800b50c:	e023      	b.n	800b556 <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800b50e:	4b59      	ldr	r3, [pc, #356]	; (800b674 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b510:	681b      	ldr	r3, [r3, #0]
 800b512:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b516:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b51a:	d107      	bne.n	800b52c <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b51c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b520:	4618      	mov	r0, r3
 800b522:	f000 fbc7 	bl	800bcb4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800b526:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b528:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b52a:	e0fc      	b.n	800b726 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b52c:	2300      	movs	r3, #0
 800b52e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b530:	e0f9      	b.n	800b726 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b532:	4b50      	ldr	r3, [pc, #320]	; (800b674 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b534:	681b      	ldr	r3, [r3, #0]
 800b536:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b53a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b53e:	d107      	bne.n	800b550 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b540:	f107 0318 	add.w	r3, r7, #24
 800b544:	4618      	mov	r0, r3
 800b546:	f000 f90d 	bl	800b764 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800b54a:	6a3b      	ldr	r3, [r7, #32]
 800b54c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b54e:	e0ea      	b.n	800b726 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b550:	2300      	movs	r3, #0
 800b552:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b554:	e0e7      	b.n	800b726 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800b556:	2300      	movs	r3, #0
 800b558:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b55a:	e0e4      	b.n	800b726 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 800b55c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b560:	f5a2 4180 	sub.w	r1, r2, #16384	; 0x4000
 800b564:	430b      	orrs	r3, r1
 800b566:	f040 808d 	bne.w	800b684 <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 800b56a:	4b42      	ldr	r3, [pc, #264]	; (800b674 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b56c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b56e:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 800b572:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800b574:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b576:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800b57a:	d06b      	beq.n	800b654 <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 800b57c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b57e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800b582:	d874      	bhi.n	800b66e <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800b584:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b586:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b58a:	d056      	beq.n	800b63a <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 800b58c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b58e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b592:	d86c      	bhi.n	800b66e <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800b594:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b596:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800b59a:	d03b      	beq.n	800b614 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
 800b59c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b59e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800b5a2:	d864      	bhi.n	800b66e <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800b5a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b5a6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b5aa:	d021      	beq.n	800b5f0 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 800b5ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b5ae:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b5b2:	d85c      	bhi.n	800b66e <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800b5b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b5b6:	2b00      	cmp	r3, #0
 800b5b8:	d004      	beq.n	800b5c4 <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
 800b5ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b5bc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b5c0:	d004      	beq.n	800b5cc <HAL_RCCEx_GetPeriphCLKFreq+0x994>
 800b5c2:	e054      	b.n	800b66e <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 800b5c4:	f000 f8b8 	bl	800b738 <HAL_RCCEx_GetD3PCLK1Freq>
 800b5c8:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800b5ca:	e0ac      	b.n	800b726 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b5cc:	4b29      	ldr	r3, [pc, #164]	; (800b674 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b5ce:	681b      	ldr	r3, [r3, #0]
 800b5d0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b5d4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b5d8:	d107      	bne.n	800b5ea <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b5da:	f107 0318 	add.w	r3, r7, #24
 800b5de:	4618      	mov	r0, r3
 800b5e0:	f000 f8c0 	bl	800b764 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800b5e4:	69fb      	ldr	r3, [r7, #28]
 800b5e6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b5e8:	e09d      	b.n	800b726 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b5ea:	2300      	movs	r3, #0
 800b5ec:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b5ee:	e09a      	b.n	800b726 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800b5f0:	4b20      	ldr	r3, [pc, #128]	; (800b674 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b5f2:	681b      	ldr	r3, [r3, #0]
 800b5f4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800b5f8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b5fc:	d107      	bne.n	800b60e <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800b5fe:	f107 030c 	add.w	r3, r7, #12
 800b602:	4618      	mov	r0, r3
 800b604:	f000 fa02 	bl	800ba0c <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800b608:	693b      	ldr	r3, [r7, #16]
 800b60a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b60c:	e08b      	b.n	800b726 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b60e:	2300      	movs	r3, #0
 800b610:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b612:	e088      	b.n	800b726 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800b614:	4b17      	ldr	r3, [pc, #92]	; (800b674 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b616:	681b      	ldr	r3, [r3, #0]
 800b618:	f003 0304 	and.w	r3, r3, #4
 800b61c:	2b04      	cmp	r3, #4
 800b61e:	d109      	bne.n	800b634 <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b620:	4b14      	ldr	r3, [pc, #80]	; (800b674 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b622:	681b      	ldr	r3, [r3, #0]
 800b624:	08db      	lsrs	r3, r3, #3
 800b626:	f003 0303 	and.w	r3, r3, #3
 800b62a:	4a13      	ldr	r2, [pc, #76]	; (800b678 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 800b62c:	fa22 f303 	lsr.w	r3, r2, r3
 800b630:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b632:	e078      	b.n	800b726 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b634:	2300      	movs	r3, #0
 800b636:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b638:	e075      	b.n	800b726 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800b63a:	4b0e      	ldr	r3, [pc, #56]	; (800b674 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b63c:	681b      	ldr	r3, [r3, #0]
 800b63e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b642:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b646:	d102      	bne.n	800b64e <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
        {
          frequency = CSI_VALUE;
 800b648:	4b0c      	ldr	r3, [pc, #48]	; (800b67c <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 800b64a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b64c:	e06b      	b.n	800b726 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b64e:	2300      	movs	r3, #0
 800b650:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b652:	e068      	b.n	800b726 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800b654:	4b07      	ldr	r3, [pc, #28]	; (800b674 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800b656:	681b      	ldr	r3, [r3, #0]
 800b658:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b65c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b660:	d102      	bne.n	800b668 <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
        {
          frequency = HSE_VALUE;
 800b662:	4b07      	ldr	r3, [pc, #28]	; (800b680 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 800b664:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b666:	e05e      	b.n	800b726 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b668:	2300      	movs	r3, #0
 800b66a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b66c:	e05b      	b.n	800b726 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 800b66e:	2300      	movs	r3, #0
 800b670:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b672:	e058      	b.n	800b726 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800b674:	58024400 	.word	0x58024400
 800b678:	03d09000 	.word	0x03d09000
 800b67c:	003d0900 	.word	0x003d0900
 800b680:	00989680 	.word	0x00989680
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 800b684:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b688:	f5a2 4100 	sub.w	r1, r2, #32768	; 0x8000
 800b68c:	430b      	orrs	r3, r1
 800b68e:	d148      	bne.n	800b722 <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 800b690:	4b27      	ldr	r3, [pc, #156]	; (800b730 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800b692:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b694:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800b698:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800b69a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b69c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b6a0:	d02a      	beq.n	800b6f8 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
 800b6a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b6a4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800b6a8:	d838      	bhi.n	800b71c <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 800b6aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b6ac:	2b00      	cmp	r3, #0
 800b6ae:	d004      	beq.n	800b6ba <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 800b6b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b6b2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b6b6:	d00d      	beq.n	800b6d4 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 800b6b8:	e030      	b.n	800b71c <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800b6ba:	4b1d      	ldr	r3, [pc, #116]	; (800b730 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800b6bc:	681b      	ldr	r3, [r3, #0]
 800b6be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800b6c2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800b6c6:	d102      	bne.n	800b6ce <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSE_VALUE;
 800b6c8:	4b1a      	ldr	r3, [pc, #104]	; (800b734 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 800b6ca:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b6cc:	e02b      	b.n	800b726 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b6ce:	2300      	movs	r3, #0
 800b6d0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b6d2:	e028      	b.n	800b726 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800b6d4:	4b16      	ldr	r3, [pc, #88]	; (800b730 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800b6d6:	681b      	ldr	r3, [r3, #0]
 800b6d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800b6dc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800b6e0:	d107      	bne.n	800b6f2 <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800b6e2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800b6e6:	4618      	mov	r0, r3
 800b6e8:	f000 fae4 	bl	800bcb4 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800b6ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b6ee:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b6f0:	e019      	b.n	800b726 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b6f2:	2300      	movs	r3, #0
 800b6f4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b6f6:	e016      	b.n	800b726 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800b6f8:	4b0d      	ldr	r3, [pc, #52]	; (800b730 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800b6fa:	681b      	ldr	r3, [r3, #0]
 800b6fc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b700:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b704:	d107      	bne.n	800b716 <HAL_RCCEx_GetPeriphCLKFreq+0xade>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800b706:	f107 0318 	add.w	r3, r7, #24
 800b70a:	4618      	mov	r0, r3
 800b70c:	f000 f82a 	bl	800b764 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800b710:	69fb      	ldr	r3, [r7, #28]
 800b712:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800b714:	e007      	b.n	800b726 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800b716:	2300      	movs	r3, #0
 800b718:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b71a:	e004      	b.n	800b726 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800b71c:	2300      	movs	r3, #0
 800b71e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800b720:	e001      	b.n	800b726 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else
  {
    frequency = 0;
 800b722:	2300      	movs	r3, #0
 800b724:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  return frequency;
 800b726:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800b728:	4618      	mov	r0, r3
 800b72a:	3740      	adds	r7, #64	; 0x40
 800b72c:	46bd      	mov	sp, r7
 800b72e:	bd80      	pop	{r7, pc}
 800b730:	58024400 	.word	0x58024400
 800b734:	00989680 	.word	0x00989680

0800b738 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800b738:	b580      	push	{r7, lr}
 800b73a:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800b73c:	f7fd fffa 	bl	8009734 <HAL_RCC_GetHCLKFreq>
 800b740:	4602      	mov	r2, r0
 800b742:	4b06      	ldr	r3, [pc, #24]	; (800b75c <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800b744:	6a1b      	ldr	r3, [r3, #32]
 800b746:	091b      	lsrs	r3, r3, #4
 800b748:	f003 0307 	and.w	r3, r3, #7
 800b74c:	4904      	ldr	r1, [pc, #16]	; (800b760 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800b74e:	5ccb      	ldrb	r3, [r1, r3]
 800b750:	f003 031f 	and.w	r3, r3, #31
 800b754:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800b758:	4618      	mov	r0, r3
 800b75a:	bd80      	pop	{r7, pc}
 800b75c:	58024400 	.word	0x58024400
 800b760:	0801d83c 	.word	0x0801d83c

0800b764 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800b764:	b480      	push	{r7}
 800b766:	b089      	sub	sp, #36	; 0x24
 800b768:	af00      	add	r7, sp, #0
 800b76a:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800b76c:	4ba1      	ldr	r3, [pc, #644]	; (800b9f4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b76e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b770:	f003 0303 	and.w	r3, r3, #3
 800b774:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800b776:	4b9f      	ldr	r3, [pc, #636]	; (800b9f4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b778:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b77a:	0b1b      	lsrs	r3, r3, #12
 800b77c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800b780:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800b782:	4b9c      	ldr	r3, [pc, #624]	; (800b9f4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b784:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b786:	091b      	lsrs	r3, r3, #4
 800b788:	f003 0301 	and.w	r3, r3, #1
 800b78c:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800b78e:	4b99      	ldr	r3, [pc, #612]	; (800b9f4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b790:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b792:	08db      	lsrs	r3, r3, #3
 800b794:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800b798:	693a      	ldr	r2, [r7, #16]
 800b79a:	fb02 f303 	mul.w	r3, r2, r3
 800b79e:	ee07 3a90 	vmov	s15, r3
 800b7a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b7a6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800b7aa:	697b      	ldr	r3, [r7, #20]
 800b7ac:	2b00      	cmp	r3, #0
 800b7ae:	f000 8111 	beq.w	800b9d4 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800b7b2:	69bb      	ldr	r3, [r7, #24]
 800b7b4:	2b02      	cmp	r3, #2
 800b7b6:	f000 8083 	beq.w	800b8c0 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800b7ba:	69bb      	ldr	r3, [r7, #24]
 800b7bc:	2b02      	cmp	r3, #2
 800b7be:	f200 80a1 	bhi.w	800b904 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800b7c2:	69bb      	ldr	r3, [r7, #24]
 800b7c4:	2b00      	cmp	r3, #0
 800b7c6:	d003      	beq.n	800b7d0 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800b7c8:	69bb      	ldr	r3, [r7, #24]
 800b7ca:	2b01      	cmp	r3, #1
 800b7cc:	d056      	beq.n	800b87c <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800b7ce:	e099      	b.n	800b904 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b7d0:	4b88      	ldr	r3, [pc, #544]	; (800b9f4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b7d2:	681b      	ldr	r3, [r3, #0]
 800b7d4:	f003 0320 	and.w	r3, r3, #32
 800b7d8:	2b00      	cmp	r3, #0
 800b7da:	d02d      	beq.n	800b838 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b7dc:	4b85      	ldr	r3, [pc, #532]	; (800b9f4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b7de:	681b      	ldr	r3, [r3, #0]
 800b7e0:	08db      	lsrs	r3, r3, #3
 800b7e2:	f003 0303 	and.w	r3, r3, #3
 800b7e6:	4a84      	ldr	r2, [pc, #528]	; (800b9f8 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800b7e8:	fa22 f303 	lsr.w	r3, r2, r3
 800b7ec:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800b7ee:	68bb      	ldr	r3, [r7, #8]
 800b7f0:	ee07 3a90 	vmov	s15, r3
 800b7f4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b7f8:	697b      	ldr	r3, [r7, #20]
 800b7fa:	ee07 3a90 	vmov	s15, r3
 800b7fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b802:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b806:	4b7b      	ldr	r3, [pc, #492]	; (800b9f4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b808:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b80a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b80e:	ee07 3a90 	vmov	s15, r3
 800b812:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b816:	ed97 6a03 	vldr	s12, [r7, #12]
 800b81a:	eddf 5a78 	vldr	s11, [pc, #480]	; 800b9fc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800b81e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b822:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b826:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b82a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b82e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b832:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800b836:	e087      	b.n	800b948 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800b838:	697b      	ldr	r3, [r7, #20]
 800b83a:	ee07 3a90 	vmov	s15, r3
 800b83e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b842:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800ba00 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800b846:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b84a:	4b6a      	ldr	r3, [pc, #424]	; (800b9f4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b84c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b84e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b852:	ee07 3a90 	vmov	s15, r3
 800b856:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b85a:	ed97 6a03 	vldr	s12, [r7, #12]
 800b85e:	eddf 5a67 	vldr	s11, [pc, #412]	; 800b9fc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800b862:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b866:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b86a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b86e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b872:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b876:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b87a:	e065      	b.n	800b948 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800b87c:	697b      	ldr	r3, [r7, #20]
 800b87e:	ee07 3a90 	vmov	s15, r3
 800b882:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b886:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800ba04 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800b88a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b88e:	4b59      	ldr	r3, [pc, #356]	; (800b9f4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b890:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b892:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b896:	ee07 3a90 	vmov	s15, r3
 800b89a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b89e:	ed97 6a03 	vldr	s12, [r7, #12]
 800b8a2:	eddf 5a56 	vldr	s11, [pc, #344]	; 800b9fc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800b8a6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b8aa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b8ae:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b8b2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b8b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b8ba:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b8be:	e043      	b.n	800b948 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800b8c0:	697b      	ldr	r3, [r7, #20]
 800b8c2:	ee07 3a90 	vmov	s15, r3
 800b8c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b8ca:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800ba08 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800b8ce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b8d2:	4b48      	ldr	r3, [pc, #288]	; (800b9f4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b8d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b8d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b8da:	ee07 3a90 	vmov	s15, r3
 800b8de:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b8e2:	ed97 6a03 	vldr	s12, [r7, #12]
 800b8e6:	eddf 5a45 	vldr	s11, [pc, #276]	; 800b9fc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800b8ea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b8ee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b8f2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b8f6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b8fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b8fe:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b902:	e021      	b.n	800b948 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800b904:	697b      	ldr	r3, [r7, #20]
 800b906:	ee07 3a90 	vmov	s15, r3
 800b90a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b90e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800ba04 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800b912:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b916:	4b37      	ldr	r3, [pc, #220]	; (800b9f4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b918:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b91a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b91e:	ee07 3a90 	vmov	s15, r3
 800b922:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800b926:	ed97 6a03 	vldr	s12, [r7, #12]
 800b92a:	eddf 5a34 	vldr	s11, [pc, #208]	; 800b9fc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800b92e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800b932:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800b936:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b93a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b93e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b942:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800b946:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800b948:	4b2a      	ldr	r3, [pc, #168]	; (800b9f4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b94a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b94c:	0a5b      	lsrs	r3, r3, #9
 800b94e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b952:	ee07 3a90 	vmov	s15, r3
 800b956:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b95a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b95e:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b962:	edd7 6a07 	vldr	s13, [r7, #28]
 800b966:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b96a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b96e:	ee17 2a90 	vmov	r2, s15
 800b972:	687b      	ldr	r3, [r7, #4]
 800b974:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800b976:	4b1f      	ldr	r3, [pc, #124]	; (800b9f4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b978:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b97a:	0c1b      	lsrs	r3, r3, #16
 800b97c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b980:	ee07 3a90 	vmov	s15, r3
 800b984:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b988:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b98c:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b990:	edd7 6a07 	vldr	s13, [r7, #28]
 800b994:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b998:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b99c:	ee17 2a90 	vmov	r2, s15
 800b9a0:	687b      	ldr	r3, [r7, #4]
 800b9a2:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800b9a4:	4b13      	ldr	r3, [pc, #76]	; (800b9f4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800b9a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b9a8:	0e1b      	lsrs	r3, r3, #24
 800b9aa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800b9ae:	ee07 3a90 	vmov	s15, r3
 800b9b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800b9b6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b9ba:	ee37 7a87 	vadd.f32	s14, s15, s14
 800b9be:	edd7 6a07 	vldr	s13, [r7, #28]
 800b9c2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b9c6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800b9ca:	ee17 2a90 	vmov	r2, s15
 800b9ce:	687b      	ldr	r3, [r7, #4]
 800b9d0:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800b9d2:	e008      	b.n	800b9e6 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800b9d4:	687b      	ldr	r3, [r7, #4]
 800b9d6:	2200      	movs	r2, #0
 800b9d8:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800b9da:	687b      	ldr	r3, [r7, #4]
 800b9dc:	2200      	movs	r2, #0
 800b9de:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800b9e0:	687b      	ldr	r3, [r7, #4]
 800b9e2:	2200      	movs	r2, #0
 800b9e4:	609a      	str	r2, [r3, #8]
}
 800b9e6:	bf00      	nop
 800b9e8:	3724      	adds	r7, #36	; 0x24
 800b9ea:	46bd      	mov	sp, r7
 800b9ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9f0:	4770      	bx	lr
 800b9f2:	bf00      	nop
 800b9f4:	58024400 	.word	0x58024400
 800b9f8:	03d09000 	.word	0x03d09000
 800b9fc:	46000000 	.word	0x46000000
 800ba00:	4c742400 	.word	0x4c742400
 800ba04:	4a742400 	.word	0x4a742400
 800ba08:	4b189680 	.word	0x4b189680

0800ba0c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800ba0c:	b480      	push	{r7}
 800ba0e:	b089      	sub	sp, #36	; 0x24
 800ba10:	af00      	add	r7, sp, #0
 800ba12:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800ba14:	4ba1      	ldr	r3, [pc, #644]	; (800bc9c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ba16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ba18:	f003 0303 	and.w	r3, r3, #3
 800ba1c:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800ba1e:	4b9f      	ldr	r3, [pc, #636]	; (800bc9c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ba20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ba22:	0d1b      	lsrs	r3, r3, #20
 800ba24:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800ba28:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800ba2a:	4b9c      	ldr	r3, [pc, #624]	; (800bc9c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ba2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ba2e:	0a1b      	lsrs	r3, r3, #8
 800ba30:	f003 0301 	and.w	r3, r3, #1
 800ba34:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800ba36:	4b99      	ldr	r3, [pc, #612]	; (800bc9c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ba38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ba3a:	08db      	lsrs	r3, r3, #3
 800ba3c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800ba40:	693a      	ldr	r2, [r7, #16]
 800ba42:	fb02 f303 	mul.w	r3, r2, r3
 800ba46:	ee07 3a90 	vmov	s15, r3
 800ba4a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ba4e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800ba52:	697b      	ldr	r3, [r7, #20]
 800ba54:	2b00      	cmp	r3, #0
 800ba56:	f000 8111 	beq.w	800bc7c <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800ba5a:	69bb      	ldr	r3, [r7, #24]
 800ba5c:	2b02      	cmp	r3, #2
 800ba5e:	f000 8083 	beq.w	800bb68 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800ba62:	69bb      	ldr	r3, [r7, #24]
 800ba64:	2b02      	cmp	r3, #2
 800ba66:	f200 80a1 	bhi.w	800bbac <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800ba6a:	69bb      	ldr	r3, [r7, #24]
 800ba6c:	2b00      	cmp	r3, #0
 800ba6e:	d003      	beq.n	800ba78 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800ba70:	69bb      	ldr	r3, [r7, #24]
 800ba72:	2b01      	cmp	r3, #1
 800ba74:	d056      	beq.n	800bb24 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800ba76:	e099      	b.n	800bbac <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ba78:	4b88      	ldr	r3, [pc, #544]	; (800bc9c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ba7a:	681b      	ldr	r3, [r3, #0]
 800ba7c:	f003 0320 	and.w	r3, r3, #32
 800ba80:	2b00      	cmp	r3, #0
 800ba82:	d02d      	beq.n	800bae0 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800ba84:	4b85      	ldr	r3, [pc, #532]	; (800bc9c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800ba86:	681b      	ldr	r3, [r3, #0]
 800ba88:	08db      	lsrs	r3, r3, #3
 800ba8a:	f003 0303 	and.w	r3, r3, #3
 800ba8e:	4a84      	ldr	r2, [pc, #528]	; (800bca0 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800ba90:	fa22 f303 	lsr.w	r3, r2, r3
 800ba94:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800ba96:	68bb      	ldr	r3, [r7, #8]
 800ba98:	ee07 3a90 	vmov	s15, r3
 800ba9c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800baa0:	697b      	ldr	r3, [r7, #20]
 800baa2:	ee07 3a90 	vmov	s15, r3
 800baa6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800baaa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800baae:	4b7b      	ldr	r3, [pc, #492]	; (800bc9c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bab0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bab2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bab6:	ee07 3a90 	vmov	s15, r3
 800baba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800babe:	ed97 6a03 	vldr	s12, [r7, #12]
 800bac2:	eddf 5a78 	vldr	s11, [pc, #480]	; 800bca4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800bac6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800baca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bace:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800bad2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bad6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bada:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800bade:	e087      	b.n	800bbf0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800bae0:	697b      	ldr	r3, [r7, #20]
 800bae2:	ee07 3a90 	vmov	s15, r3
 800bae6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800baea:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800bca8 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800baee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800baf2:	4b6a      	ldr	r3, [pc, #424]	; (800bc9c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800baf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800baf6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bafa:	ee07 3a90 	vmov	s15, r3
 800bafe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bb02:	ed97 6a03 	vldr	s12, [r7, #12]
 800bb06:	eddf 5a67 	vldr	s11, [pc, #412]	; 800bca4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800bb0a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bb0e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bb12:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800bb16:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bb1a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bb1e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800bb22:	e065      	b.n	800bbf0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800bb24:	697b      	ldr	r3, [r7, #20]
 800bb26:	ee07 3a90 	vmov	s15, r3
 800bb2a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bb2e:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800bcac <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800bb32:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bb36:	4b59      	ldr	r3, [pc, #356]	; (800bc9c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bb38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bb3a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bb3e:	ee07 3a90 	vmov	s15, r3
 800bb42:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bb46:	ed97 6a03 	vldr	s12, [r7, #12]
 800bb4a:	eddf 5a56 	vldr	s11, [pc, #344]	; 800bca4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800bb4e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bb52:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bb56:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800bb5a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bb5e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bb62:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800bb66:	e043      	b.n	800bbf0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800bb68:	697b      	ldr	r3, [r7, #20]
 800bb6a:	ee07 3a90 	vmov	s15, r3
 800bb6e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bb72:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800bcb0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800bb76:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bb7a:	4b48      	ldr	r3, [pc, #288]	; (800bc9c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bb7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bb7e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bb82:	ee07 3a90 	vmov	s15, r3
 800bb86:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bb8a:	ed97 6a03 	vldr	s12, [r7, #12]
 800bb8e:	eddf 5a45 	vldr	s11, [pc, #276]	; 800bca4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800bb92:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bb96:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bb9a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800bb9e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bba2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bba6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800bbaa:	e021      	b.n	800bbf0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800bbac:	697b      	ldr	r3, [r7, #20]
 800bbae:	ee07 3a90 	vmov	s15, r3
 800bbb2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bbb6:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800bcac <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800bbba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bbbe:	4b37      	ldr	r3, [pc, #220]	; (800bc9c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bbc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bbc2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bbc6:	ee07 3a90 	vmov	s15, r3
 800bbca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bbce:	ed97 6a03 	vldr	s12, [r7, #12]
 800bbd2:	eddf 5a34 	vldr	s11, [pc, #208]	; 800bca4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800bbd6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bbda:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bbde:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800bbe2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bbe6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bbea:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800bbee:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800bbf0:	4b2a      	ldr	r3, [pc, #168]	; (800bc9c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bbf2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bbf4:	0a5b      	lsrs	r3, r3, #9
 800bbf6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bbfa:	ee07 3a90 	vmov	s15, r3
 800bbfe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bc02:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800bc06:	ee37 7a87 	vadd.f32	s14, s15, s14
 800bc0a:	edd7 6a07 	vldr	s13, [r7, #28]
 800bc0e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800bc12:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bc16:	ee17 2a90 	vmov	r2, s15
 800bc1a:	687b      	ldr	r3, [r7, #4]
 800bc1c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800bc1e:	4b1f      	ldr	r3, [pc, #124]	; (800bc9c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bc20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bc22:	0c1b      	lsrs	r3, r3, #16
 800bc24:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bc28:	ee07 3a90 	vmov	s15, r3
 800bc2c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bc30:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800bc34:	ee37 7a87 	vadd.f32	s14, s15, s14
 800bc38:	edd7 6a07 	vldr	s13, [r7, #28]
 800bc3c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800bc40:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bc44:	ee17 2a90 	vmov	r2, s15
 800bc48:	687b      	ldr	r3, [r7, #4]
 800bc4a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800bc4c:	4b13      	ldr	r3, [pc, #76]	; (800bc9c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800bc4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bc50:	0e1b      	lsrs	r3, r3, #24
 800bc52:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bc56:	ee07 3a90 	vmov	s15, r3
 800bc5a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bc5e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800bc62:	ee37 7a87 	vadd.f32	s14, s15, s14
 800bc66:	edd7 6a07 	vldr	s13, [r7, #28]
 800bc6a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800bc6e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bc72:	ee17 2a90 	vmov	r2, s15
 800bc76:	687b      	ldr	r3, [r7, #4]
 800bc78:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800bc7a:	e008      	b.n	800bc8e <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800bc7c:	687b      	ldr	r3, [r7, #4]
 800bc7e:	2200      	movs	r2, #0
 800bc80:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800bc82:	687b      	ldr	r3, [r7, #4]
 800bc84:	2200      	movs	r2, #0
 800bc86:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800bc88:	687b      	ldr	r3, [r7, #4]
 800bc8a:	2200      	movs	r2, #0
 800bc8c:	609a      	str	r2, [r3, #8]
}
 800bc8e:	bf00      	nop
 800bc90:	3724      	adds	r7, #36	; 0x24
 800bc92:	46bd      	mov	sp, r7
 800bc94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc98:	4770      	bx	lr
 800bc9a:	bf00      	nop
 800bc9c:	58024400 	.word	0x58024400
 800bca0:	03d09000 	.word	0x03d09000
 800bca4:	46000000 	.word	0x46000000
 800bca8:	4c742400 	.word	0x4c742400
 800bcac:	4a742400 	.word	0x4a742400
 800bcb0:	4b189680 	.word	0x4b189680

0800bcb4 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 800bcb4:	b480      	push	{r7}
 800bcb6:	b089      	sub	sp, #36	; 0x24
 800bcb8:	af00      	add	r7, sp, #0
 800bcba:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800bcbc:	4ba0      	ldr	r3, [pc, #640]	; (800bf40 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800bcbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bcc0:	f003 0303 	and.w	r3, r3, #3
 800bcc4:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 800bcc6:	4b9e      	ldr	r3, [pc, #632]	; (800bf40 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800bcc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bcca:	091b      	lsrs	r3, r3, #4
 800bccc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800bcd0:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800bcd2:	4b9b      	ldr	r3, [pc, #620]	; (800bf40 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800bcd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bcd6:	f003 0301 	and.w	r3, r3, #1
 800bcda:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800bcdc:	4b98      	ldr	r3, [pc, #608]	; (800bf40 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800bcde:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800bce0:	08db      	lsrs	r3, r3, #3
 800bce2:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800bce6:	693a      	ldr	r2, [r7, #16]
 800bce8:	fb02 f303 	mul.w	r3, r2, r3
 800bcec:	ee07 3a90 	vmov	s15, r3
 800bcf0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bcf4:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 800bcf8:	697b      	ldr	r3, [r7, #20]
 800bcfa:	2b00      	cmp	r3, #0
 800bcfc:	f000 8111 	beq.w	800bf22 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 800bd00:	69bb      	ldr	r3, [r7, #24]
 800bd02:	2b02      	cmp	r3, #2
 800bd04:	f000 8083 	beq.w	800be0e <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 800bd08:	69bb      	ldr	r3, [r7, #24]
 800bd0a:	2b02      	cmp	r3, #2
 800bd0c:	f200 80a1 	bhi.w	800be52 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 800bd10:	69bb      	ldr	r3, [r7, #24]
 800bd12:	2b00      	cmp	r3, #0
 800bd14:	d003      	beq.n	800bd1e <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800bd16:	69bb      	ldr	r3, [r7, #24]
 800bd18:	2b01      	cmp	r3, #1
 800bd1a:	d056      	beq.n	800bdca <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 800bd1c:	e099      	b.n	800be52 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800bd1e:	4b88      	ldr	r3, [pc, #544]	; (800bf40 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800bd20:	681b      	ldr	r3, [r3, #0]
 800bd22:	f003 0320 	and.w	r3, r3, #32
 800bd26:	2b00      	cmp	r3, #0
 800bd28:	d02d      	beq.n	800bd86 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800bd2a:	4b85      	ldr	r3, [pc, #532]	; (800bf40 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800bd2c:	681b      	ldr	r3, [r3, #0]
 800bd2e:	08db      	lsrs	r3, r3, #3
 800bd30:	f003 0303 	and.w	r3, r3, #3
 800bd34:	4a83      	ldr	r2, [pc, #524]	; (800bf44 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800bd36:	fa22 f303 	lsr.w	r3, r2, r3
 800bd3a:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800bd3c:	68bb      	ldr	r3, [r7, #8]
 800bd3e:	ee07 3a90 	vmov	s15, r3
 800bd42:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bd46:	697b      	ldr	r3, [r7, #20]
 800bd48:	ee07 3a90 	vmov	s15, r3
 800bd4c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bd50:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bd54:	4b7a      	ldr	r3, [pc, #488]	; (800bf40 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800bd56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bd58:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bd5c:	ee07 3a90 	vmov	s15, r3
 800bd60:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bd64:	ed97 6a03 	vldr	s12, [r7, #12]
 800bd68:	eddf 5a77 	vldr	s11, [pc, #476]	; 800bf48 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800bd6c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bd70:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bd74:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800bd78:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bd7c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bd80:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800bd84:	e087      	b.n	800be96 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800bd86:	697b      	ldr	r3, [r7, #20]
 800bd88:	ee07 3a90 	vmov	s15, r3
 800bd8c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bd90:	eddf 6a6e 	vldr	s13, [pc, #440]	; 800bf4c <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800bd94:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bd98:	4b69      	ldr	r3, [pc, #420]	; (800bf40 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800bd9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bd9c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bda0:	ee07 3a90 	vmov	s15, r3
 800bda4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bda8:	ed97 6a03 	vldr	s12, [r7, #12]
 800bdac:	eddf 5a66 	vldr	s11, [pc, #408]	; 800bf48 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800bdb0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bdb4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bdb8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800bdbc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800bdc0:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bdc4:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800bdc8:	e065      	b.n	800be96 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800bdca:	697b      	ldr	r3, [r7, #20]
 800bdcc:	ee07 3a90 	vmov	s15, r3
 800bdd0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bdd4:	eddf 6a5e 	vldr	s13, [pc, #376]	; 800bf50 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 800bdd8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800bddc:	4b58      	ldr	r3, [pc, #352]	; (800bf40 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800bdde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bde0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800bde4:	ee07 3a90 	vmov	s15, r3
 800bde8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800bdec:	ed97 6a03 	vldr	s12, [r7, #12]
 800bdf0:	eddf 5a55 	vldr	s11, [pc, #340]	; 800bf48 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800bdf4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800bdf8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800bdfc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800be00:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800be04:	ee67 7a27 	vmul.f32	s15, s14, s15
 800be08:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800be0c:	e043      	b.n	800be96 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800be0e:	697b      	ldr	r3, [r7, #20]
 800be10:	ee07 3a90 	vmov	s15, r3
 800be14:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800be18:	eddf 6a4e 	vldr	s13, [pc, #312]	; 800bf54 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 800be1c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800be20:	4b47      	ldr	r3, [pc, #284]	; (800bf40 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800be22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800be24:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800be28:	ee07 3a90 	vmov	s15, r3
 800be2c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800be30:	ed97 6a03 	vldr	s12, [r7, #12]
 800be34:	eddf 5a44 	vldr	s11, [pc, #272]	; 800bf48 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800be38:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800be3c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800be40:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800be44:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800be48:	ee67 7a27 	vmul.f32	s15, s14, s15
 800be4c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800be50:	e021      	b.n	800be96 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800be52:	697b      	ldr	r3, [r7, #20]
 800be54:	ee07 3a90 	vmov	s15, r3
 800be58:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800be5c:	eddf 6a3b 	vldr	s13, [pc, #236]	; 800bf4c <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800be60:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800be64:	4b36      	ldr	r3, [pc, #216]	; (800bf40 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800be66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800be68:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800be6c:	ee07 3a90 	vmov	s15, r3
 800be70:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800be74:	ed97 6a03 	vldr	s12, [r7, #12]
 800be78:	eddf 5a33 	vldr	s11, [pc, #204]	; 800bf48 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800be7c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800be80:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800be84:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800be88:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800be8c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800be90:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800be94:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 800be96:	4b2a      	ldr	r3, [pc, #168]	; (800bf40 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800be98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800be9a:	0a5b      	lsrs	r3, r3, #9
 800be9c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bea0:	ee07 3a90 	vmov	s15, r3
 800bea4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bea8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800beac:	ee37 7a87 	vadd.f32	s14, s15, s14
 800beb0:	edd7 6a07 	vldr	s13, [r7, #28]
 800beb4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800beb8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bebc:	ee17 2a90 	vmov	r2, s15
 800bec0:	687b      	ldr	r3, [r7, #4]
 800bec2:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 800bec4:	4b1e      	ldr	r3, [pc, #120]	; (800bf40 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800bec6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bec8:	0c1b      	lsrs	r3, r3, #16
 800beca:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800bece:	ee07 3a90 	vmov	s15, r3
 800bed2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bed6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800beda:	ee37 7a87 	vadd.f32	s14, s15, s14
 800bede:	edd7 6a07 	vldr	s13, [r7, #28]
 800bee2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800bee6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800beea:	ee17 2a90 	vmov	r2, s15
 800beee:	687b      	ldr	r3, [r7, #4]
 800bef0:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 800bef2:	4b13      	ldr	r3, [pc, #76]	; (800bf40 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800bef4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bef6:	0e1b      	lsrs	r3, r3, #24
 800bef8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800befc:	ee07 3a90 	vmov	s15, r3
 800bf00:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800bf04:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800bf08:	ee37 7a87 	vadd.f32	s14, s15, s14
 800bf0c:	edd7 6a07 	vldr	s13, [r7, #28]
 800bf10:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800bf14:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800bf18:	ee17 2a90 	vmov	r2, s15
 800bf1c:	687b      	ldr	r3, [r7, #4]
 800bf1e:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800bf20:	e008      	b.n	800bf34 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800bf22:	687b      	ldr	r3, [r7, #4]
 800bf24:	2200      	movs	r2, #0
 800bf26:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800bf28:	687b      	ldr	r3, [r7, #4]
 800bf2a:	2200      	movs	r2, #0
 800bf2c:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800bf2e:	687b      	ldr	r3, [r7, #4]
 800bf30:	2200      	movs	r2, #0
 800bf32:	609a      	str	r2, [r3, #8]
}
 800bf34:	bf00      	nop
 800bf36:	3724      	adds	r7, #36	; 0x24
 800bf38:	46bd      	mov	sp, r7
 800bf3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf3e:	4770      	bx	lr
 800bf40:	58024400 	.word	0x58024400
 800bf44:	03d09000 	.word	0x03d09000
 800bf48:	46000000 	.word	0x46000000
 800bf4c:	4c742400 	.word	0x4c742400
 800bf50:	4a742400 	.word	0x4a742400
 800bf54:	4b189680 	.word	0x4b189680

0800bf58 <HAL_RCCEx_CRSConfig>:
  * @brief  Start automatic synchronization for polling mode
  * @param  pInit Pointer on RCC_CRSInitTypeDef structure
  * @retval None
  */
void HAL_RCCEx_CRSConfig(RCC_CRSInitTypeDef *pInit)
{
 800bf58:	b580      	push	{r7, lr}
 800bf5a:	b084      	sub	sp, #16
 800bf5c:	af00      	add	r7, sp, #0
 800bf5e:	6078      	str	r0, [r7, #4]
  assert_param(IS_RCC_CRS_HSI48CALIBRATION(pInit->HSI48CalibrationValue));

  /* CONFIGURATION */

  /* Before configuration, reset CRS registers to their default values*/
  __HAL_RCC_CRS_FORCE_RESET();
 800bf60:	4b26      	ldr	r3, [pc, #152]	; (800bffc <HAL_RCCEx_CRSConfig+0xa4>)
 800bf62:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800bf66:	4a25      	ldr	r2, [pc, #148]	; (800bffc <HAL_RCCEx_CRSConfig+0xa4>)
 800bf68:	f043 0302 	orr.w	r3, r3, #2
 800bf6c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
  __HAL_RCC_CRS_RELEASE_RESET();
 800bf70:	4b22      	ldr	r3, [pc, #136]	; (800bffc <HAL_RCCEx_CRSConfig+0xa4>)
 800bf72:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800bf76:	4a21      	ldr	r2, [pc, #132]	; (800bffc <HAL_RCCEx_CRSConfig+0xa4>)
 800bf78:	f023 0302 	bic.w	r3, r3, #2
 800bf7c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

  /* Set the SYNCDIV[2:0] bits according to Pre-scaler value */
  /* Set the SYNCSRC[1:0] bits according to Source value */
  /* Set the SYNCSPOL bit according to Polarity value */
  if ((HAL_GetREVID() <= REV_ID_Y) && (pInit->Source == RCC_CRS_SYNC_SOURCE_USB2))
 800bf80:	f7f6 ff50 	bl	8002e24 <HAL_GetREVID>
 800bf84:	4603      	mov	r3, r0
 800bf86:	f241 0203 	movw	r2, #4099	; 0x1003
 800bf8a:	4293      	cmp	r3, r2
 800bf8c:	d80b      	bhi.n	800bfa6 <HAL_RCCEx_CRSConfig+0x4e>
 800bf8e:	687b      	ldr	r3, [r7, #4]
 800bf90:	685b      	ldr	r3, [r3, #4]
 800bf92:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800bf96:	d106      	bne.n	800bfa6 <HAL_RCCEx_CRSConfig+0x4e>
  {
    /* Use Rev.Y value of USB2 */
    value = (pInit->Prescaler | RCC_CRS_SYNC_SOURCE_PIN | pInit->Polarity);
 800bf98:	687b      	ldr	r3, [r7, #4]
 800bf9a:	681a      	ldr	r2, [r3, #0]
 800bf9c:	687b      	ldr	r3, [r7, #4]
 800bf9e:	689b      	ldr	r3, [r3, #8]
 800bfa0:	4313      	orrs	r3, r2
 800bfa2:	60fb      	str	r3, [r7, #12]
 800bfa4:	e008      	b.n	800bfb8 <HAL_RCCEx_CRSConfig+0x60>
  }
  else
  {
    value = (pInit->Prescaler | pInit->Source | pInit->Polarity);
 800bfa6:	687b      	ldr	r3, [r7, #4]
 800bfa8:	681a      	ldr	r2, [r3, #0]
 800bfaa:	687b      	ldr	r3, [r7, #4]
 800bfac:	685b      	ldr	r3, [r3, #4]
 800bfae:	431a      	orrs	r2, r3
 800bfb0:	687b      	ldr	r3, [r7, #4]
 800bfb2:	689b      	ldr	r3, [r3, #8]
 800bfb4:	4313      	orrs	r3, r2
 800bfb6:	60fb      	str	r3, [r7, #12]
  }
  /* Set the RELOAD[15:0] bits according to ReloadValue value */
  value |= pInit->ReloadValue;
 800bfb8:	687b      	ldr	r3, [r7, #4]
 800bfba:	68db      	ldr	r3, [r3, #12]
 800bfbc:	68fa      	ldr	r2, [r7, #12]
 800bfbe:	4313      	orrs	r3, r2
 800bfc0:	60fb      	str	r3, [r7, #12]
  /* Set the FELIM[7:0] bits according to ErrorLimitValue value */
  value |= (pInit->ErrorLimitValue << CRS_CFGR_FELIM_Pos);
 800bfc2:	687b      	ldr	r3, [r7, #4]
 800bfc4:	691b      	ldr	r3, [r3, #16]
 800bfc6:	041b      	lsls	r3, r3, #16
 800bfc8:	68fa      	ldr	r2, [r7, #12]
 800bfca:	4313      	orrs	r3, r2
 800bfcc:	60fb      	str	r3, [r7, #12]
  WRITE_REG(CRS->CFGR, value);
 800bfce:	4a0c      	ldr	r2, [pc, #48]	; (800c000 <HAL_RCCEx_CRSConfig+0xa8>)
 800bfd0:	68fb      	ldr	r3, [r7, #12]
 800bfd2:	6053      	str	r3, [r2, #4]

  /* Adjust HSI48 oscillator smooth trimming */
  /* Set the TRIM[5:0] bits according to RCC_CRS_HSI48CalibrationValue value */
  MODIFY_REG(CRS->CR, CRS_CR_TRIM, (pInit->HSI48CalibrationValue << CRS_CR_TRIM_Pos));
 800bfd4:	4b0a      	ldr	r3, [pc, #40]	; (800c000 <HAL_RCCEx_CRSConfig+0xa8>)
 800bfd6:	681b      	ldr	r3, [r3, #0]
 800bfd8:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 800bfdc:	687b      	ldr	r3, [r7, #4]
 800bfde:	695b      	ldr	r3, [r3, #20]
 800bfe0:	021b      	lsls	r3, r3, #8
 800bfe2:	4907      	ldr	r1, [pc, #28]	; (800c000 <HAL_RCCEx_CRSConfig+0xa8>)
 800bfe4:	4313      	orrs	r3, r2
 800bfe6:	600b      	str	r3, [r1, #0]

  /* START AUTOMATIC SYNCHRONIZATION*/

  /* Enable Automatic trimming & Frequency error counter */
  SET_BIT(CRS->CR, CRS_CR_AUTOTRIMEN | CRS_CR_CEN);
 800bfe8:	4b05      	ldr	r3, [pc, #20]	; (800c000 <HAL_RCCEx_CRSConfig+0xa8>)
 800bfea:	681b      	ldr	r3, [r3, #0]
 800bfec:	4a04      	ldr	r2, [pc, #16]	; (800c000 <HAL_RCCEx_CRSConfig+0xa8>)
 800bfee:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800bff2:	6013      	str	r3, [r2, #0]
}
 800bff4:	bf00      	nop
 800bff6:	3710      	adds	r7, #16
 800bff8:	46bd      	mov	sp, r7
 800bffa:	bd80      	pop	{r7, pc}
 800bffc:	58024400 	.word	0x58024400
 800c000:	40008400 	.word	0x40008400

0800c004 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800c004:	b580      	push	{r7, lr}
 800c006:	b084      	sub	sp, #16
 800c008:	af00      	add	r7, sp, #0
 800c00a:	6078      	str	r0, [r7, #4]
 800c00c:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800c00e:	2300      	movs	r3, #0
 800c010:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800c012:	4b53      	ldr	r3, [pc, #332]	; (800c160 <RCCEx_PLL2_Config+0x15c>)
 800c014:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c016:	f003 0303 	and.w	r3, r3, #3
 800c01a:	2b03      	cmp	r3, #3
 800c01c:	d101      	bne.n	800c022 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800c01e:	2301      	movs	r3, #1
 800c020:	e099      	b.n	800c156 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800c022:	4b4f      	ldr	r3, [pc, #316]	; (800c160 <RCCEx_PLL2_Config+0x15c>)
 800c024:	681b      	ldr	r3, [r3, #0]
 800c026:	4a4e      	ldr	r2, [pc, #312]	; (800c160 <RCCEx_PLL2_Config+0x15c>)
 800c028:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800c02c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c02e:	f7f6 fec9 	bl	8002dc4 <HAL_GetTick>
 800c032:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800c034:	e008      	b.n	800c048 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800c036:	f7f6 fec5 	bl	8002dc4 <HAL_GetTick>
 800c03a:	4602      	mov	r2, r0
 800c03c:	68bb      	ldr	r3, [r7, #8]
 800c03e:	1ad3      	subs	r3, r2, r3
 800c040:	2b02      	cmp	r3, #2
 800c042:	d901      	bls.n	800c048 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800c044:	2303      	movs	r3, #3
 800c046:	e086      	b.n	800c156 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800c048:	4b45      	ldr	r3, [pc, #276]	; (800c160 <RCCEx_PLL2_Config+0x15c>)
 800c04a:	681b      	ldr	r3, [r3, #0]
 800c04c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c050:	2b00      	cmp	r3, #0
 800c052:	d1f0      	bne.n	800c036 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800c054:	4b42      	ldr	r3, [pc, #264]	; (800c160 <RCCEx_PLL2_Config+0x15c>)
 800c056:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c058:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800c05c:	687b      	ldr	r3, [r7, #4]
 800c05e:	681b      	ldr	r3, [r3, #0]
 800c060:	031b      	lsls	r3, r3, #12
 800c062:	493f      	ldr	r1, [pc, #252]	; (800c160 <RCCEx_PLL2_Config+0x15c>)
 800c064:	4313      	orrs	r3, r2
 800c066:	628b      	str	r3, [r1, #40]	; 0x28
 800c068:	687b      	ldr	r3, [r7, #4]
 800c06a:	685b      	ldr	r3, [r3, #4]
 800c06c:	3b01      	subs	r3, #1
 800c06e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800c072:	687b      	ldr	r3, [r7, #4]
 800c074:	689b      	ldr	r3, [r3, #8]
 800c076:	3b01      	subs	r3, #1
 800c078:	025b      	lsls	r3, r3, #9
 800c07a:	b29b      	uxth	r3, r3
 800c07c:	431a      	orrs	r2, r3
 800c07e:	687b      	ldr	r3, [r7, #4]
 800c080:	68db      	ldr	r3, [r3, #12]
 800c082:	3b01      	subs	r3, #1
 800c084:	041b      	lsls	r3, r3, #16
 800c086:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800c08a:	431a      	orrs	r2, r3
 800c08c:	687b      	ldr	r3, [r7, #4]
 800c08e:	691b      	ldr	r3, [r3, #16]
 800c090:	3b01      	subs	r3, #1
 800c092:	061b      	lsls	r3, r3, #24
 800c094:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800c098:	4931      	ldr	r1, [pc, #196]	; (800c160 <RCCEx_PLL2_Config+0x15c>)
 800c09a:	4313      	orrs	r3, r2
 800c09c:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800c09e:	4b30      	ldr	r3, [pc, #192]	; (800c160 <RCCEx_PLL2_Config+0x15c>)
 800c0a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c0a2:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800c0a6:	687b      	ldr	r3, [r7, #4]
 800c0a8:	695b      	ldr	r3, [r3, #20]
 800c0aa:	492d      	ldr	r1, [pc, #180]	; (800c160 <RCCEx_PLL2_Config+0x15c>)
 800c0ac:	4313      	orrs	r3, r2
 800c0ae:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800c0b0:	4b2b      	ldr	r3, [pc, #172]	; (800c160 <RCCEx_PLL2_Config+0x15c>)
 800c0b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c0b4:	f023 0220 	bic.w	r2, r3, #32
 800c0b8:	687b      	ldr	r3, [r7, #4]
 800c0ba:	699b      	ldr	r3, [r3, #24]
 800c0bc:	4928      	ldr	r1, [pc, #160]	; (800c160 <RCCEx_PLL2_Config+0x15c>)
 800c0be:	4313      	orrs	r3, r2
 800c0c0:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800c0c2:	4b27      	ldr	r3, [pc, #156]	; (800c160 <RCCEx_PLL2_Config+0x15c>)
 800c0c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c0c6:	4a26      	ldr	r2, [pc, #152]	; (800c160 <RCCEx_PLL2_Config+0x15c>)
 800c0c8:	f023 0310 	bic.w	r3, r3, #16
 800c0cc:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800c0ce:	4b24      	ldr	r3, [pc, #144]	; (800c160 <RCCEx_PLL2_Config+0x15c>)
 800c0d0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800c0d2:	4b24      	ldr	r3, [pc, #144]	; (800c164 <RCCEx_PLL2_Config+0x160>)
 800c0d4:	4013      	ands	r3, r2
 800c0d6:	687a      	ldr	r2, [r7, #4]
 800c0d8:	69d2      	ldr	r2, [r2, #28]
 800c0da:	00d2      	lsls	r2, r2, #3
 800c0dc:	4920      	ldr	r1, [pc, #128]	; (800c160 <RCCEx_PLL2_Config+0x15c>)
 800c0de:	4313      	orrs	r3, r2
 800c0e0:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800c0e2:	4b1f      	ldr	r3, [pc, #124]	; (800c160 <RCCEx_PLL2_Config+0x15c>)
 800c0e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c0e6:	4a1e      	ldr	r2, [pc, #120]	; (800c160 <RCCEx_PLL2_Config+0x15c>)
 800c0e8:	f043 0310 	orr.w	r3, r3, #16
 800c0ec:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800c0ee:	683b      	ldr	r3, [r7, #0]
 800c0f0:	2b00      	cmp	r3, #0
 800c0f2:	d106      	bne.n	800c102 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800c0f4:	4b1a      	ldr	r3, [pc, #104]	; (800c160 <RCCEx_PLL2_Config+0x15c>)
 800c0f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c0f8:	4a19      	ldr	r2, [pc, #100]	; (800c160 <RCCEx_PLL2_Config+0x15c>)
 800c0fa:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800c0fe:	62d3      	str	r3, [r2, #44]	; 0x2c
 800c100:	e00f      	b.n	800c122 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800c102:	683b      	ldr	r3, [r7, #0]
 800c104:	2b01      	cmp	r3, #1
 800c106:	d106      	bne.n	800c116 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800c108:	4b15      	ldr	r3, [pc, #84]	; (800c160 <RCCEx_PLL2_Config+0x15c>)
 800c10a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c10c:	4a14      	ldr	r2, [pc, #80]	; (800c160 <RCCEx_PLL2_Config+0x15c>)
 800c10e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800c112:	62d3      	str	r3, [r2, #44]	; 0x2c
 800c114:	e005      	b.n	800c122 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800c116:	4b12      	ldr	r3, [pc, #72]	; (800c160 <RCCEx_PLL2_Config+0x15c>)
 800c118:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c11a:	4a11      	ldr	r2, [pc, #68]	; (800c160 <RCCEx_PLL2_Config+0x15c>)
 800c11c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800c120:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800c122:	4b0f      	ldr	r3, [pc, #60]	; (800c160 <RCCEx_PLL2_Config+0x15c>)
 800c124:	681b      	ldr	r3, [r3, #0]
 800c126:	4a0e      	ldr	r2, [pc, #56]	; (800c160 <RCCEx_PLL2_Config+0x15c>)
 800c128:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800c12c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c12e:	f7f6 fe49 	bl	8002dc4 <HAL_GetTick>
 800c132:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800c134:	e008      	b.n	800c148 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800c136:	f7f6 fe45 	bl	8002dc4 <HAL_GetTick>
 800c13a:	4602      	mov	r2, r0
 800c13c:	68bb      	ldr	r3, [r7, #8]
 800c13e:	1ad3      	subs	r3, r2, r3
 800c140:	2b02      	cmp	r3, #2
 800c142:	d901      	bls.n	800c148 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800c144:	2303      	movs	r3, #3
 800c146:	e006      	b.n	800c156 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800c148:	4b05      	ldr	r3, [pc, #20]	; (800c160 <RCCEx_PLL2_Config+0x15c>)
 800c14a:	681b      	ldr	r3, [r3, #0]
 800c14c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800c150:	2b00      	cmp	r3, #0
 800c152:	d0f0      	beq.n	800c136 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800c154:	7bfb      	ldrb	r3, [r7, #15]
}
 800c156:	4618      	mov	r0, r3
 800c158:	3710      	adds	r7, #16
 800c15a:	46bd      	mov	sp, r7
 800c15c:	bd80      	pop	{r7, pc}
 800c15e:	bf00      	nop
 800c160:	58024400 	.word	0x58024400
 800c164:	ffff0007 	.word	0xffff0007

0800c168 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800c168:	b580      	push	{r7, lr}
 800c16a:	b084      	sub	sp, #16
 800c16c:	af00      	add	r7, sp, #0
 800c16e:	6078      	str	r0, [r7, #4]
 800c170:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800c172:	2300      	movs	r3, #0
 800c174:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800c176:	4b53      	ldr	r3, [pc, #332]	; (800c2c4 <RCCEx_PLL3_Config+0x15c>)
 800c178:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c17a:	f003 0303 	and.w	r3, r3, #3
 800c17e:	2b03      	cmp	r3, #3
 800c180:	d101      	bne.n	800c186 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800c182:	2301      	movs	r3, #1
 800c184:	e099      	b.n	800c2ba <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800c186:	4b4f      	ldr	r3, [pc, #316]	; (800c2c4 <RCCEx_PLL3_Config+0x15c>)
 800c188:	681b      	ldr	r3, [r3, #0]
 800c18a:	4a4e      	ldr	r2, [pc, #312]	; (800c2c4 <RCCEx_PLL3_Config+0x15c>)
 800c18c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800c190:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c192:	f7f6 fe17 	bl	8002dc4 <HAL_GetTick>
 800c196:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800c198:	e008      	b.n	800c1ac <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800c19a:	f7f6 fe13 	bl	8002dc4 <HAL_GetTick>
 800c19e:	4602      	mov	r2, r0
 800c1a0:	68bb      	ldr	r3, [r7, #8]
 800c1a2:	1ad3      	subs	r3, r2, r3
 800c1a4:	2b02      	cmp	r3, #2
 800c1a6:	d901      	bls.n	800c1ac <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800c1a8:	2303      	movs	r3, #3
 800c1aa:	e086      	b.n	800c2ba <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800c1ac:	4b45      	ldr	r3, [pc, #276]	; (800c2c4 <RCCEx_PLL3_Config+0x15c>)
 800c1ae:	681b      	ldr	r3, [r3, #0]
 800c1b0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c1b4:	2b00      	cmp	r3, #0
 800c1b6:	d1f0      	bne.n	800c19a <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800c1b8:	4b42      	ldr	r3, [pc, #264]	; (800c2c4 <RCCEx_PLL3_Config+0x15c>)
 800c1ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c1bc:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800c1c0:	687b      	ldr	r3, [r7, #4]
 800c1c2:	681b      	ldr	r3, [r3, #0]
 800c1c4:	051b      	lsls	r3, r3, #20
 800c1c6:	493f      	ldr	r1, [pc, #252]	; (800c2c4 <RCCEx_PLL3_Config+0x15c>)
 800c1c8:	4313      	orrs	r3, r2
 800c1ca:	628b      	str	r3, [r1, #40]	; 0x28
 800c1cc:	687b      	ldr	r3, [r7, #4]
 800c1ce:	685b      	ldr	r3, [r3, #4]
 800c1d0:	3b01      	subs	r3, #1
 800c1d2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800c1d6:	687b      	ldr	r3, [r7, #4]
 800c1d8:	689b      	ldr	r3, [r3, #8]
 800c1da:	3b01      	subs	r3, #1
 800c1dc:	025b      	lsls	r3, r3, #9
 800c1de:	b29b      	uxth	r3, r3
 800c1e0:	431a      	orrs	r2, r3
 800c1e2:	687b      	ldr	r3, [r7, #4]
 800c1e4:	68db      	ldr	r3, [r3, #12]
 800c1e6:	3b01      	subs	r3, #1
 800c1e8:	041b      	lsls	r3, r3, #16
 800c1ea:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800c1ee:	431a      	orrs	r2, r3
 800c1f0:	687b      	ldr	r3, [r7, #4]
 800c1f2:	691b      	ldr	r3, [r3, #16]
 800c1f4:	3b01      	subs	r3, #1
 800c1f6:	061b      	lsls	r3, r3, #24
 800c1f8:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800c1fc:	4931      	ldr	r1, [pc, #196]	; (800c2c4 <RCCEx_PLL3_Config+0x15c>)
 800c1fe:	4313      	orrs	r3, r2
 800c200:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800c202:	4b30      	ldr	r3, [pc, #192]	; (800c2c4 <RCCEx_PLL3_Config+0x15c>)
 800c204:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c206:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800c20a:	687b      	ldr	r3, [r7, #4]
 800c20c:	695b      	ldr	r3, [r3, #20]
 800c20e:	492d      	ldr	r1, [pc, #180]	; (800c2c4 <RCCEx_PLL3_Config+0x15c>)
 800c210:	4313      	orrs	r3, r2
 800c212:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800c214:	4b2b      	ldr	r3, [pc, #172]	; (800c2c4 <RCCEx_PLL3_Config+0x15c>)
 800c216:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c218:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800c21c:	687b      	ldr	r3, [r7, #4]
 800c21e:	699b      	ldr	r3, [r3, #24]
 800c220:	4928      	ldr	r1, [pc, #160]	; (800c2c4 <RCCEx_PLL3_Config+0x15c>)
 800c222:	4313      	orrs	r3, r2
 800c224:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800c226:	4b27      	ldr	r3, [pc, #156]	; (800c2c4 <RCCEx_PLL3_Config+0x15c>)
 800c228:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c22a:	4a26      	ldr	r2, [pc, #152]	; (800c2c4 <RCCEx_PLL3_Config+0x15c>)
 800c22c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c230:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800c232:	4b24      	ldr	r3, [pc, #144]	; (800c2c4 <RCCEx_PLL3_Config+0x15c>)
 800c234:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c236:	4b24      	ldr	r3, [pc, #144]	; (800c2c8 <RCCEx_PLL3_Config+0x160>)
 800c238:	4013      	ands	r3, r2
 800c23a:	687a      	ldr	r2, [r7, #4]
 800c23c:	69d2      	ldr	r2, [r2, #28]
 800c23e:	00d2      	lsls	r2, r2, #3
 800c240:	4920      	ldr	r1, [pc, #128]	; (800c2c4 <RCCEx_PLL3_Config+0x15c>)
 800c242:	4313      	orrs	r3, r2
 800c244:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800c246:	4b1f      	ldr	r3, [pc, #124]	; (800c2c4 <RCCEx_PLL3_Config+0x15c>)
 800c248:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c24a:	4a1e      	ldr	r2, [pc, #120]	; (800c2c4 <RCCEx_PLL3_Config+0x15c>)
 800c24c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c250:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800c252:	683b      	ldr	r3, [r7, #0]
 800c254:	2b00      	cmp	r3, #0
 800c256:	d106      	bne.n	800c266 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800c258:	4b1a      	ldr	r3, [pc, #104]	; (800c2c4 <RCCEx_PLL3_Config+0x15c>)
 800c25a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c25c:	4a19      	ldr	r2, [pc, #100]	; (800c2c4 <RCCEx_PLL3_Config+0x15c>)
 800c25e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800c262:	62d3      	str	r3, [r2, #44]	; 0x2c
 800c264:	e00f      	b.n	800c286 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800c266:	683b      	ldr	r3, [r7, #0]
 800c268:	2b01      	cmp	r3, #1
 800c26a:	d106      	bne.n	800c27a <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800c26c:	4b15      	ldr	r3, [pc, #84]	; (800c2c4 <RCCEx_PLL3_Config+0x15c>)
 800c26e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c270:	4a14      	ldr	r2, [pc, #80]	; (800c2c4 <RCCEx_PLL3_Config+0x15c>)
 800c272:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800c276:	62d3      	str	r3, [r2, #44]	; 0x2c
 800c278:	e005      	b.n	800c286 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800c27a:	4b12      	ldr	r3, [pc, #72]	; (800c2c4 <RCCEx_PLL3_Config+0x15c>)
 800c27c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c27e:	4a11      	ldr	r2, [pc, #68]	; (800c2c4 <RCCEx_PLL3_Config+0x15c>)
 800c280:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800c284:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800c286:	4b0f      	ldr	r3, [pc, #60]	; (800c2c4 <RCCEx_PLL3_Config+0x15c>)
 800c288:	681b      	ldr	r3, [r3, #0]
 800c28a:	4a0e      	ldr	r2, [pc, #56]	; (800c2c4 <RCCEx_PLL3_Config+0x15c>)
 800c28c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c290:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c292:	f7f6 fd97 	bl	8002dc4 <HAL_GetTick>
 800c296:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800c298:	e008      	b.n	800c2ac <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800c29a:	f7f6 fd93 	bl	8002dc4 <HAL_GetTick>
 800c29e:	4602      	mov	r2, r0
 800c2a0:	68bb      	ldr	r3, [r7, #8]
 800c2a2:	1ad3      	subs	r3, r2, r3
 800c2a4:	2b02      	cmp	r3, #2
 800c2a6:	d901      	bls.n	800c2ac <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800c2a8:	2303      	movs	r3, #3
 800c2aa:	e006      	b.n	800c2ba <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800c2ac:	4b05      	ldr	r3, [pc, #20]	; (800c2c4 <RCCEx_PLL3_Config+0x15c>)
 800c2ae:	681b      	ldr	r3, [r3, #0]
 800c2b0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800c2b4:	2b00      	cmp	r3, #0
 800c2b6:	d0f0      	beq.n	800c29a <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800c2b8:	7bfb      	ldrb	r3, [r7, #15]
}
 800c2ba:	4618      	mov	r0, r3
 800c2bc:	3710      	adds	r7, #16
 800c2be:	46bd      	mov	sp, r7
 800c2c0:	bd80      	pop	{r7, pc}
 800c2c2:	bf00      	nop
 800c2c4:	58024400 	.word	0x58024400
 800c2c8:	ffff0007 	.word	0xffff0007

0800c2cc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800c2cc:	b580      	push	{r7, lr}
 800c2ce:	b082      	sub	sp, #8
 800c2d0:	af00      	add	r7, sp, #0
 800c2d2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800c2d4:	687b      	ldr	r3, [r7, #4]
 800c2d6:	2b00      	cmp	r3, #0
 800c2d8:	d101      	bne.n	800c2de <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800c2da:	2301      	movs	r3, #1
 800c2dc:	e049      	b.n	800c372 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800c2de:	687b      	ldr	r3, [r7, #4]
 800c2e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800c2e4:	b2db      	uxtb	r3, r3
 800c2e6:	2b00      	cmp	r3, #0
 800c2e8:	d106      	bne.n	800c2f8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800c2ea:	687b      	ldr	r3, [r7, #4]
 800c2ec:	2200      	movs	r2, #0
 800c2ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800c2f2:	6878      	ldr	r0, [r7, #4]
 800c2f4:	f7f6 f836 	bl	8002364 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c2f8:	687b      	ldr	r3, [r7, #4]
 800c2fa:	2202      	movs	r2, #2
 800c2fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800c300:	687b      	ldr	r3, [r7, #4]
 800c302:	681a      	ldr	r2, [r3, #0]
 800c304:	687b      	ldr	r3, [r7, #4]
 800c306:	3304      	adds	r3, #4
 800c308:	4619      	mov	r1, r3
 800c30a:	4610      	mov	r0, r2
 800c30c:	f000 f92e 	bl	800c56c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800c310:	687b      	ldr	r3, [r7, #4]
 800c312:	2201      	movs	r2, #1
 800c314:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c318:	687b      	ldr	r3, [r7, #4]
 800c31a:	2201      	movs	r2, #1
 800c31c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800c320:	687b      	ldr	r3, [r7, #4]
 800c322:	2201      	movs	r2, #1
 800c324:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800c328:	687b      	ldr	r3, [r7, #4]
 800c32a:	2201      	movs	r2, #1
 800c32c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800c330:	687b      	ldr	r3, [r7, #4]
 800c332:	2201      	movs	r2, #1
 800c334:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800c338:	687b      	ldr	r3, [r7, #4]
 800c33a:	2201      	movs	r2, #1
 800c33c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800c340:	687b      	ldr	r3, [r7, #4]
 800c342:	2201      	movs	r2, #1
 800c344:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800c348:	687b      	ldr	r3, [r7, #4]
 800c34a:	2201      	movs	r2, #1
 800c34c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c350:	687b      	ldr	r3, [r7, #4]
 800c352:	2201      	movs	r2, #1
 800c354:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c358:	687b      	ldr	r3, [r7, #4]
 800c35a:	2201      	movs	r2, #1
 800c35c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800c360:	687b      	ldr	r3, [r7, #4]
 800c362:	2201      	movs	r2, #1
 800c364:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800c368:	687b      	ldr	r3, [r7, #4]
 800c36a:	2201      	movs	r2, #1
 800c36c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800c370:	2300      	movs	r3, #0
}
 800c372:	4618      	mov	r0, r3
 800c374:	3708      	adds	r7, #8
 800c376:	46bd      	mov	sp, r7
 800c378:	bd80      	pop	{r7, pc}
	...

0800c37c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800c37c:	b580      	push	{r7, lr}
 800c37e:	b084      	sub	sp, #16
 800c380:	af00      	add	r7, sp, #0
 800c382:	6078      	str	r0, [r7, #4]
 800c384:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800c386:	2300      	movs	r3, #0
 800c388:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800c38a:	687b      	ldr	r3, [r7, #4]
 800c38c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c390:	2b01      	cmp	r3, #1
 800c392:	d101      	bne.n	800c398 <HAL_TIM_ConfigClockSource+0x1c>
 800c394:	2302      	movs	r3, #2
 800c396:	e0dc      	b.n	800c552 <HAL_TIM_ConfigClockSource+0x1d6>
 800c398:	687b      	ldr	r3, [r7, #4]
 800c39a:	2201      	movs	r2, #1
 800c39c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800c3a0:	687b      	ldr	r3, [r7, #4]
 800c3a2:	2202      	movs	r2, #2
 800c3a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800c3a8:	687b      	ldr	r3, [r7, #4]
 800c3aa:	681b      	ldr	r3, [r3, #0]
 800c3ac:	689b      	ldr	r3, [r3, #8]
 800c3ae:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800c3b0:	68ba      	ldr	r2, [r7, #8]
 800c3b2:	4b6a      	ldr	r3, [pc, #424]	; (800c55c <HAL_TIM_ConfigClockSource+0x1e0>)
 800c3b4:	4013      	ands	r3, r2
 800c3b6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800c3b8:	68bb      	ldr	r3, [r7, #8]
 800c3ba:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800c3be:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800c3c0:	687b      	ldr	r3, [r7, #4]
 800c3c2:	681b      	ldr	r3, [r3, #0]
 800c3c4:	68ba      	ldr	r2, [r7, #8]
 800c3c6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800c3c8:	683b      	ldr	r3, [r7, #0]
 800c3ca:	681b      	ldr	r3, [r3, #0]
 800c3cc:	4a64      	ldr	r2, [pc, #400]	; (800c560 <HAL_TIM_ConfigClockSource+0x1e4>)
 800c3ce:	4293      	cmp	r3, r2
 800c3d0:	f000 80a9 	beq.w	800c526 <HAL_TIM_ConfigClockSource+0x1aa>
 800c3d4:	4a62      	ldr	r2, [pc, #392]	; (800c560 <HAL_TIM_ConfigClockSource+0x1e4>)
 800c3d6:	4293      	cmp	r3, r2
 800c3d8:	f200 80ae 	bhi.w	800c538 <HAL_TIM_ConfigClockSource+0x1bc>
 800c3dc:	4a61      	ldr	r2, [pc, #388]	; (800c564 <HAL_TIM_ConfigClockSource+0x1e8>)
 800c3de:	4293      	cmp	r3, r2
 800c3e0:	f000 80a1 	beq.w	800c526 <HAL_TIM_ConfigClockSource+0x1aa>
 800c3e4:	4a5f      	ldr	r2, [pc, #380]	; (800c564 <HAL_TIM_ConfigClockSource+0x1e8>)
 800c3e6:	4293      	cmp	r3, r2
 800c3e8:	f200 80a6 	bhi.w	800c538 <HAL_TIM_ConfigClockSource+0x1bc>
 800c3ec:	4a5e      	ldr	r2, [pc, #376]	; (800c568 <HAL_TIM_ConfigClockSource+0x1ec>)
 800c3ee:	4293      	cmp	r3, r2
 800c3f0:	f000 8099 	beq.w	800c526 <HAL_TIM_ConfigClockSource+0x1aa>
 800c3f4:	4a5c      	ldr	r2, [pc, #368]	; (800c568 <HAL_TIM_ConfigClockSource+0x1ec>)
 800c3f6:	4293      	cmp	r3, r2
 800c3f8:	f200 809e 	bhi.w	800c538 <HAL_TIM_ConfigClockSource+0x1bc>
 800c3fc:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800c400:	f000 8091 	beq.w	800c526 <HAL_TIM_ConfigClockSource+0x1aa>
 800c404:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800c408:	f200 8096 	bhi.w	800c538 <HAL_TIM_ConfigClockSource+0x1bc>
 800c40c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c410:	f000 8089 	beq.w	800c526 <HAL_TIM_ConfigClockSource+0x1aa>
 800c414:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c418:	f200 808e 	bhi.w	800c538 <HAL_TIM_ConfigClockSource+0x1bc>
 800c41c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c420:	d03e      	beq.n	800c4a0 <HAL_TIM_ConfigClockSource+0x124>
 800c422:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c426:	f200 8087 	bhi.w	800c538 <HAL_TIM_ConfigClockSource+0x1bc>
 800c42a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c42e:	f000 8086 	beq.w	800c53e <HAL_TIM_ConfigClockSource+0x1c2>
 800c432:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c436:	d87f      	bhi.n	800c538 <HAL_TIM_ConfigClockSource+0x1bc>
 800c438:	2b70      	cmp	r3, #112	; 0x70
 800c43a:	d01a      	beq.n	800c472 <HAL_TIM_ConfigClockSource+0xf6>
 800c43c:	2b70      	cmp	r3, #112	; 0x70
 800c43e:	d87b      	bhi.n	800c538 <HAL_TIM_ConfigClockSource+0x1bc>
 800c440:	2b60      	cmp	r3, #96	; 0x60
 800c442:	d050      	beq.n	800c4e6 <HAL_TIM_ConfigClockSource+0x16a>
 800c444:	2b60      	cmp	r3, #96	; 0x60
 800c446:	d877      	bhi.n	800c538 <HAL_TIM_ConfigClockSource+0x1bc>
 800c448:	2b50      	cmp	r3, #80	; 0x50
 800c44a:	d03c      	beq.n	800c4c6 <HAL_TIM_ConfigClockSource+0x14a>
 800c44c:	2b50      	cmp	r3, #80	; 0x50
 800c44e:	d873      	bhi.n	800c538 <HAL_TIM_ConfigClockSource+0x1bc>
 800c450:	2b40      	cmp	r3, #64	; 0x40
 800c452:	d058      	beq.n	800c506 <HAL_TIM_ConfigClockSource+0x18a>
 800c454:	2b40      	cmp	r3, #64	; 0x40
 800c456:	d86f      	bhi.n	800c538 <HAL_TIM_ConfigClockSource+0x1bc>
 800c458:	2b30      	cmp	r3, #48	; 0x30
 800c45a:	d064      	beq.n	800c526 <HAL_TIM_ConfigClockSource+0x1aa>
 800c45c:	2b30      	cmp	r3, #48	; 0x30
 800c45e:	d86b      	bhi.n	800c538 <HAL_TIM_ConfigClockSource+0x1bc>
 800c460:	2b20      	cmp	r3, #32
 800c462:	d060      	beq.n	800c526 <HAL_TIM_ConfigClockSource+0x1aa>
 800c464:	2b20      	cmp	r3, #32
 800c466:	d867      	bhi.n	800c538 <HAL_TIM_ConfigClockSource+0x1bc>
 800c468:	2b00      	cmp	r3, #0
 800c46a:	d05c      	beq.n	800c526 <HAL_TIM_ConfigClockSource+0x1aa>
 800c46c:	2b10      	cmp	r3, #16
 800c46e:	d05a      	beq.n	800c526 <HAL_TIM_ConfigClockSource+0x1aa>
 800c470:	e062      	b.n	800c538 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800c472:	687b      	ldr	r3, [r7, #4]
 800c474:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800c476:	683b      	ldr	r3, [r7, #0]
 800c478:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800c47a:	683b      	ldr	r3, [r7, #0]
 800c47c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800c47e:	683b      	ldr	r3, [r7, #0]
 800c480:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800c482:	f000 f98b 	bl	800c79c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800c486:	687b      	ldr	r3, [r7, #4]
 800c488:	681b      	ldr	r3, [r3, #0]
 800c48a:	689b      	ldr	r3, [r3, #8]
 800c48c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800c48e:	68bb      	ldr	r3, [r7, #8]
 800c490:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800c494:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800c496:	687b      	ldr	r3, [r7, #4]
 800c498:	681b      	ldr	r3, [r3, #0]
 800c49a:	68ba      	ldr	r2, [r7, #8]
 800c49c:	609a      	str	r2, [r3, #8]
      break;
 800c49e:	e04f      	b.n	800c540 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800c4a0:	687b      	ldr	r3, [r7, #4]
 800c4a2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800c4a4:	683b      	ldr	r3, [r7, #0]
 800c4a6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800c4a8:	683b      	ldr	r3, [r7, #0]
 800c4aa:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800c4ac:	683b      	ldr	r3, [r7, #0]
 800c4ae:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800c4b0:	f000 f974 	bl	800c79c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800c4b4:	687b      	ldr	r3, [r7, #4]
 800c4b6:	681b      	ldr	r3, [r3, #0]
 800c4b8:	689a      	ldr	r2, [r3, #8]
 800c4ba:	687b      	ldr	r3, [r7, #4]
 800c4bc:	681b      	ldr	r3, [r3, #0]
 800c4be:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800c4c2:	609a      	str	r2, [r3, #8]
      break;
 800c4c4:	e03c      	b.n	800c540 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800c4c6:	687b      	ldr	r3, [r7, #4]
 800c4c8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800c4ca:	683b      	ldr	r3, [r7, #0]
 800c4cc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800c4ce:	683b      	ldr	r3, [r7, #0]
 800c4d0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800c4d2:	461a      	mov	r2, r3
 800c4d4:	f000 f8e4 	bl	800c6a0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800c4d8:	687b      	ldr	r3, [r7, #4]
 800c4da:	681b      	ldr	r3, [r3, #0]
 800c4dc:	2150      	movs	r1, #80	; 0x50
 800c4de:	4618      	mov	r0, r3
 800c4e0:	f000 f93e 	bl	800c760 <TIM_ITRx_SetConfig>
      break;
 800c4e4:	e02c      	b.n	800c540 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800c4e6:	687b      	ldr	r3, [r7, #4]
 800c4e8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800c4ea:	683b      	ldr	r3, [r7, #0]
 800c4ec:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800c4ee:	683b      	ldr	r3, [r7, #0]
 800c4f0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800c4f2:	461a      	mov	r2, r3
 800c4f4:	f000 f903 	bl	800c6fe <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800c4f8:	687b      	ldr	r3, [r7, #4]
 800c4fa:	681b      	ldr	r3, [r3, #0]
 800c4fc:	2160      	movs	r1, #96	; 0x60
 800c4fe:	4618      	mov	r0, r3
 800c500:	f000 f92e 	bl	800c760 <TIM_ITRx_SetConfig>
      break;
 800c504:	e01c      	b.n	800c540 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800c506:	687b      	ldr	r3, [r7, #4]
 800c508:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800c50a:	683b      	ldr	r3, [r7, #0]
 800c50c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800c50e:	683b      	ldr	r3, [r7, #0]
 800c510:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800c512:	461a      	mov	r2, r3
 800c514:	f000 f8c4 	bl	800c6a0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800c518:	687b      	ldr	r3, [r7, #4]
 800c51a:	681b      	ldr	r3, [r3, #0]
 800c51c:	2140      	movs	r1, #64	; 0x40
 800c51e:	4618      	mov	r0, r3
 800c520:	f000 f91e 	bl	800c760 <TIM_ITRx_SetConfig>
      break;
 800c524:	e00c      	b.n	800c540 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800c526:	687b      	ldr	r3, [r7, #4]
 800c528:	681a      	ldr	r2, [r3, #0]
 800c52a:	683b      	ldr	r3, [r7, #0]
 800c52c:	681b      	ldr	r3, [r3, #0]
 800c52e:	4619      	mov	r1, r3
 800c530:	4610      	mov	r0, r2
 800c532:	f000 f915 	bl	800c760 <TIM_ITRx_SetConfig>
      break;
 800c536:	e003      	b.n	800c540 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 800c538:	2301      	movs	r3, #1
 800c53a:	73fb      	strb	r3, [r7, #15]
      break;
 800c53c:	e000      	b.n	800c540 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 800c53e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800c540:	687b      	ldr	r3, [r7, #4]
 800c542:	2201      	movs	r2, #1
 800c544:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800c548:	687b      	ldr	r3, [r7, #4]
 800c54a:	2200      	movs	r2, #0
 800c54c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800c550:	7bfb      	ldrb	r3, [r7, #15]
}
 800c552:	4618      	mov	r0, r3
 800c554:	3710      	adds	r7, #16
 800c556:	46bd      	mov	sp, r7
 800c558:	bd80      	pop	{r7, pc}
 800c55a:	bf00      	nop
 800c55c:	ffceff88 	.word	0xffceff88
 800c560:	00100040 	.word	0x00100040
 800c564:	00100030 	.word	0x00100030
 800c568:	00100020 	.word	0x00100020

0800c56c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800c56c:	b480      	push	{r7}
 800c56e:	b085      	sub	sp, #20
 800c570:	af00      	add	r7, sp, #0
 800c572:	6078      	str	r0, [r7, #4]
 800c574:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800c576:	687b      	ldr	r3, [r7, #4]
 800c578:	681b      	ldr	r3, [r3, #0]
 800c57a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800c57c:	687b      	ldr	r3, [r7, #4]
 800c57e:	4a40      	ldr	r2, [pc, #256]	; (800c680 <TIM_Base_SetConfig+0x114>)
 800c580:	4293      	cmp	r3, r2
 800c582:	d013      	beq.n	800c5ac <TIM_Base_SetConfig+0x40>
 800c584:	687b      	ldr	r3, [r7, #4]
 800c586:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c58a:	d00f      	beq.n	800c5ac <TIM_Base_SetConfig+0x40>
 800c58c:	687b      	ldr	r3, [r7, #4]
 800c58e:	4a3d      	ldr	r2, [pc, #244]	; (800c684 <TIM_Base_SetConfig+0x118>)
 800c590:	4293      	cmp	r3, r2
 800c592:	d00b      	beq.n	800c5ac <TIM_Base_SetConfig+0x40>
 800c594:	687b      	ldr	r3, [r7, #4]
 800c596:	4a3c      	ldr	r2, [pc, #240]	; (800c688 <TIM_Base_SetConfig+0x11c>)
 800c598:	4293      	cmp	r3, r2
 800c59a:	d007      	beq.n	800c5ac <TIM_Base_SetConfig+0x40>
 800c59c:	687b      	ldr	r3, [r7, #4]
 800c59e:	4a3b      	ldr	r2, [pc, #236]	; (800c68c <TIM_Base_SetConfig+0x120>)
 800c5a0:	4293      	cmp	r3, r2
 800c5a2:	d003      	beq.n	800c5ac <TIM_Base_SetConfig+0x40>
 800c5a4:	687b      	ldr	r3, [r7, #4]
 800c5a6:	4a3a      	ldr	r2, [pc, #232]	; (800c690 <TIM_Base_SetConfig+0x124>)
 800c5a8:	4293      	cmp	r3, r2
 800c5aa:	d108      	bne.n	800c5be <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800c5ac:	68fb      	ldr	r3, [r7, #12]
 800c5ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c5b2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800c5b4:	683b      	ldr	r3, [r7, #0]
 800c5b6:	685b      	ldr	r3, [r3, #4]
 800c5b8:	68fa      	ldr	r2, [r7, #12]
 800c5ba:	4313      	orrs	r3, r2
 800c5bc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800c5be:	687b      	ldr	r3, [r7, #4]
 800c5c0:	4a2f      	ldr	r2, [pc, #188]	; (800c680 <TIM_Base_SetConfig+0x114>)
 800c5c2:	4293      	cmp	r3, r2
 800c5c4:	d01f      	beq.n	800c606 <TIM_Base_SetConfig+0x9a>
 800c5c6:	687b      	ldr	r3, [r7, #4]
 800c5c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c5cc:	d01b      	beq.n	800c606 <TIM_Base_SetConfig+0x9a>
 800c5ce:	687b      	ldr	r3, [r7, #4]
 800c5d0:	4a2c      	ldr	r2, [pc, #176]	; (800c684 <TIM_Base_SetConfig+0x118>)
 800c5d2:	4293      	cmp	r3, r2
 800c5d4:	d017      	beq.n	800c606 <TIM_Base_SetConfig+0x9a>
 800c5d6:	687b      	ldr	r3, [r7, #4]
 800c5d8:	4a2b      	ldr	r2, [pc, #172]	; (800c688 <TIM_Base_SetConfig+0x11c>)
 800c5da:	4293      	cmp	r3, r2
 800c5dc:	d013      	beq.n	800c606 <TIM_Base_SetConfig+0x9a>
 800c5de:	687b      	ldr	r3, [r7, #4]
 800c5e0:	4a2a      	ldr	r2, [pc, #168]	; (800c68c <TIM_Base_SetConfig+0x120>)
 800c5e2:	4293      	cmp	r3, r2
 800c5e4:	d00f      	beq.n	800c606 <TIM_Base_SetConfig+0x9a>
 800c5e6:	687b      	ldr	r3, [r7, #4]
 800c5e8:	4a29      	ldr	r2, [pc, #164]	; (800c690 <TIM_Base_SetConfig+0x124>)
 800c5ea:	4293      	cmp	r3, r2
 800c5ec:	d00b      	beq.n	800c606 <TIM_Base_SetConfig+0x9a>
 800c5ee:	687b      	ldr	r3, [r7, #4]
 800c5f0:	4a28      	ldr	r2, [pc, #160]	; (800c694 <TIM_Base_SetConfig+0x128>)
 800c5f2:	4293      	cmp	r3, r2
 800c5f4:	d007      	beq.n	800c606 <TIM_Base_SetConfig+0x9a>
 800c5f6:	687b      	ldr	r3, [r7, #4]
 800c5f8:	4a27      	ldr	r2, [pc, #156]	; (800c698 <TIM_Base_SetConfig+0x12c>)
 800c5fa:	4293      	cmp	r3, r2
 800c5fc:	d003      	beq.n	800c606 <TIM_Base_SetConfig+0x9a>
 800c5fe:	687b      	ldr	r3, [r7, #4]
 800c600:	4a26      	ldr	r2, [pc, #152]	; (800c69c <TIM_Base_SetConfig+0x130>)
 800c602:	4293      	cmp	r3, r2
 800c604:	d108      	bne.n	800c618 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800c606:	68fb      	ldr	r3, [r7, #12]
 800c608:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c60c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800c60e:	683b      	ldr	r3, [r7, #0]
 800c610:	68db      	ldr	r3, [r3, #12]
 800c612:	68fa      	ldr	r2, [r7, #12]
 800c614:	4313      	orrs	r3, r2
 800c616:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800c618:	68fb      	ldr	r3, [r7, #12]
 800c61a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800c61e:	683b      	ldr	r3, [r7, #0]
 800c620:	695b      	ldr	r3, [r3, #20]
 800c622:	4313      	orrs	r3, r2
 800c624:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800c626:	687b      	ldr	r3, [r7, #4]
 800c628:	68fa      	ldr	r2, [r7, #12]
 800c62a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800c62c:	683b      	ldr	r3, [r7, #0]
 800c62e:	689a      	ldr	r2, [r3, #8]
 800c630:	687b      	ldr	r3, [r7, #4]
 800c632:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800c634:	683b      	ldr	r3, [r7, #0]
 800c636:	681a      	ldr	r2, [r3, #0]
 800c638:	687b      	ldr	r3, [r7, #4]
 800c63a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800c63c:	687b      	ldr	r3, [r7, #4]
 800c63e:	4a10      	ldr	r2, [pc, #64]	; (800c680 <TIM_Base_SetConfig+0x114>)
 800c640:	4293      	cmp	r3, r2
 800c642:	d00f      	beq.n	800c664 <TIM_Base_SetConfig+0xf8>
 800c644:	687b      	ldr	r3, [r7, #4]
 800c646:	4a12      	ldr	r2, [pc, #72]	; (800c690 <TIM_Base_SetConfig+0x124>)
 800c648:	4293      	cmp	r3, r2
 800c64a:	d00b      	beq.n	800c664 <TIM_Base_SetConfig+0xf8>
 800c64c:	687b      	ldr	r3, [r7, #4]
 800c64e:	4a11      	ldr	r2, [pc, #68]	; (800c694 <TIM_Base_SetConfig+0x128>)
 800c650:	4293      	cmp	r3, r2
 800c652:	d007      	beq.n	800c664 <TIM_Base_SetConfig+0xf8>
 800c654:	687b      	ldr	r3, [r7, #4]
 800c656:	4a10      	ldr	r2, [pc, #64]	; (800c698 <TIM_Base_SetConfig+0x12c>)
 800c658:	4293      	cmp	r3, r2
 800c65a:	d003      	beq.n	800c664 <TIM_Base_SetConfig+0xf8>
 800c65c:	687b      	ldr	r3, [r7, #4]
 800c65e:	4a0f      	ldr	r2, [pc, #60]	; (800c69c <TIM_Base_SetConfig+0x130>)
 800c660:	4293      	cmp	r3, r2
 800c662:	d103      	bne.n	800c66c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800c664:	683b      	ldr	r3, [r7, #0]
 800c666:	691a      	ldr	r2, [r3, #16]
 800c668:	687b      	ldr	r3, [r7, #4]
 800c66a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800c66c:	687b      	ldr	r3, [r7, #4]
 800c66e:	2201      	movs	r2, #1
 800c670:	615a      	str	r2, [r3, #20]
}
 800c672:	bf00      	nop
 800c674:	3714      	adds	r7, #20
 800c676:	46bd      	mov	sp, r7
 800c678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c67c:	4770      	bx	lr
 800c67e:	bf00      	nop
 800c680:	40010000 	.word	0x40010000
 800c684:	40000400 	.word	0x40000400
 800c688:	40000800 	.word	0x40000800
 800c68c:	40000c00 	.word	0x40000c00
 800c690:	40010400 	.word	0x40010400
 800c694:	40014000 	.word	0x40014000
 800c698:	40014400 	.word	0x40014400
 800c69c:	40014800 	.word	0x40014800

0800c6a0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800c6a0:	b480      	push	{r7}
 800c6a2:	b087      	sub	sp, #28
 800c6a4:	af00      	add	r7, sp, #0
 800c6a6:	60f8      	str	r0, [r7, #12]
 800c6a8:	60b9      	str	r1, [r7, #8]
 800c6aa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800c6ac:	68fb      	ldr	r3, [r7, #12]
 800c6ae:	6a1b      	ldr	r3, [r3, #32]
 800c6b0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800c6b2:	68fb      	ldr	r3, [r7, #12]
 800c6b4:	6a1b      	ldr	r3, [r3, #32]
 800c6b6:	f023 0201 	bic.w	r2, r3, #1
 800c6ba:	68fb      	ldr	r3, [r7, #12]
 800c6bc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800c6be:	68fb      	ldr	r3, [r7, #12]
 800c6c0:	699b      	ldr	r3, [r3, #24]
 800c6c2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800c6c4:	693b      	ldr	r3, [r7, #16]
 800c6c6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800c6ca:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800c6cc:	687b      	ldr	r3, [r7, #4]
 800c6ce:	011b      	lsls	r3, r3, #4
 800c6d0:	693a      	ldr	r2, [r7, #16]
 800c6d2:	4313      	orrs	r3, r2
 800c6d4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800c6d6:	697b      	ldr	r3, [r7, #20]
 800c6d8:	f023 030a 	bic.w	r3, r3, #10
 800c6dc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800c6de:	697a      	ldr	r2, [r7, #20]
 800c6e0:	68bb      	ldr	r3, [r7, #8]
 800c6e2:	4313      	orrs	r3, r2
 800c6e4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800c6e6:	68fb      	ldr	r3, [r7, #12]
 800c6e8:	693a      	ldr	r2, [r7, #16]
 800c6ea:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800c6ec:	68fb      	ldr	r3, [r7, #12]
 800c6ee:	697a      	ldr	r2, [r7, #20]
 800c6f0:	621a      	str	r2, [r3, #32]
}
 800c6f2:	bf00      	nop
 800c6f4:	371c      	adds	r7, #28
 800c6f6:	46bd      	mov	sp, r7
 800c6f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6fc:	4770      	bx	lr

0800c6fe <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800c6fe:	b480      	push	{r7}
 800c700:	b087      	sub	sp, #28
 800c702:	af00      	add	r7, sp, #0
 800c704:	60f8      	str	r0, [r7, #12]
 800c706:	60b9      	str	r1, [r7, #8]
 800c708:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800c70a:	68fb      	ldr	r3, [r7, #12]
 800c70c:	6a1b      	ldr	r3, [r3, #32]
 800c70e:	f023 0210 	bic.w	r2, r3, #16
 800c712:	68fb      	ldr	r3, [r7, #12]
 800c714:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800c716:	68fb      	ldr	r3, [r7, #12]
 800c718:	699b      	ldr	r3, [r3, #24]
 800c71a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800c71c:	68fb      	ldr	r3, [r7, #12]
 800c71e:	6a1b      	ldr	r3, [r3, #32]
 800c720:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800c722:	697b      	ldr	r3, [r7, #20]
 800c724:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800c728:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800c72a:	687b      	ldr	r3, [r7, #4]
 800c72c:	031b      	lsls	r3, r3, #12
 800c72e:	697a      	ldr	r2, [r7, #20]
 800c730:	4313      	orrs	r3, r2
 800c732:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800c734:	693b      	ldr	r3, [r7, #16]
 800c736:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800c73a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800c73c:	68bb      	ldr	r3, [r7, #8]
 800c73e:	011b      	lsls	r3, r3, #4
 800c740:	693a      	ldr	r2, [r7, #16]
 800c742:	4313      	orrs	r3, r2
 800c744:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800c746:	68fb      	ldr	r3, [r7, #12]
 800c748:	697a      	ldr	r2, [r7, #20]
 800c74a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800c74c:	68fb      	ldr	r3, [r7, #12]
 800c74e:	693a      	ldr	r2, [r7, #16]
 800c750:	621a      	str	r2, [r3, #32]
}
 800c752:	bf00      	nop
 800c754:	371c      	adds	r7, #28
 800c756:	46bd      	mov	sp, r7
 800c758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c75c:	4770      	bx	lr
	...

0800c760 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800c760:	b480      	push	{r7}
 800c762:	b085      	sub	sp, #20
 800c764:	af00      	add	r7, sp, #0
 800c766:	6078      	str	r0, [r7, #4]
 800c768:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800c76a:	687b      	ldr	r3, [r7, #4]
 800c76c:	689b      	ldr	r3, [r3, #8]
 800c76e:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800c770:	68fa      	ldr	r2, [r7, #12]
 800c772:	4b09      	ldr	r3, [pc, #36]	; (800c798 <TIM_ITRx_SetConfig+0x38>)
 800c774:	4013      	ands	r3, r2
 800c776:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800c778:	683a      	ldr	r2, [r7, #0]
 800c77a:	68fb      	ldr	r3, [r7, #12]
 800c77c:	4313      	orrs	r3, r2
 800c77e:	f043 0307 	orr.w	r3, r3, #7
 800c782:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800c784:	687b      	ldr	r3, [r7, #4]
 800c786:	68fa      	ldr	r2, [r7, #12]
 800c788:	609a      	str	r2, [r3, #8]
}
 800c78a:	bf00      	nop
 800c78c:	3714      	adds	r7, #20
 800c78e:	46bd      	mov	sp, r7
 800c790:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c794:	4770      	bx	lr
 800c796:	bf00      	nop
 800c798:	ffcfff8f 	.word	0xffcfff8f

0800c79c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800c79c:	b480      	push	{r7}
 800c79e:	b087      	sub	sp, #28
 800c7a0:	af00      	add	r7, sp, #0
 800c7a2:	60f8      	str	r0, [r7, #12]
 800c7a4:	60b9      	str	r1, [r7, #8]
 800c7a6:	607a      	str	r2, [r7, #4]
 800c7a8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800c7aa:	68fb      	ldr	r3, [r7, #12]
 800c7ac:	689b      	ldr	r3, [r3, #8]
 800c7ae:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800c7b0:	697b      	ldr	r3, [r7, #20]
 800c7b2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800c7b6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800c7b8:	683b      	ldr	r3, [r7, #0]
 800c7ba:	021a      	lsls	r2, r3, #8
 800c7bc:	687b      	ldr	r3, [r7, #4]
 800c7be:	431a      	orrs	r2, r3
 800c7c0:	68bb      	ldr	r3, [r7, #8]
 800c7c2:	4313      	orrs	r3, r2
 800c7c4:	697a      	ldr	r2, [r7, #20]
 800c7c6:	4313      	orrs	r3, r2
 800c7c8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800c7ca:	68fb      	ldr	r3, [r7, #12]
 800c7cc:	697a      	ldr	r2, [r7, #20]
 800c7ce:	609a      	str	r2, [r3, #8]
}
 800c7d0:	bf00      	nop
 800c7d2:	371c      	adds	r7, #28
 800c7d4:	46bd      	mov	sp, r7
 800c7d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7da:	4770      	bx	lr

0800c7dc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800c7dc:	b480      	push	{r7}
 800c7de:	b085      	sub	sp, #20
 800c7e0:	af00      	add	r7, sp, #0
 800c7e2:	6078      	str	r0, [r7, #4]
 800c7e4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800c7e6:	687b      	ldr	r3, [r7, #4]
 800c7e8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c7ec:	2b01      	cmp	r3, #1
 800c7ee:	d101      	bne.n	800c7f4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800c7f0:	2302      	movs	r3, #2
 800c7f2:	e06d      	b.n	800c8d0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800c7f4:	687b      	ldr	r3, [r7, #4]
 800c7f6:	2201      	movs	r2, #1
 800c7f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c7fc:	687b      	ldr	r3, [r7, #4]
 800c7fe:	2202      	movs	r2, #2
 800c800:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800c804:	687b      	ldr	r3, [r7, #4]
 800c806:	681b      	ldr	r3, [r3, #0]
 800c808:	685b      	ldr	r3, [r3, #4]
 800c80a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800c80c:	687b      	ldr	r3, [r7, #4]
 800c80e:	681b      	ldr	r3, [r3, #0]
 800c810:	689b      	ldr	r3, [r3, #8]
 800c812:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800c814:	687b      	ldr	r3, [r7, #4]
 800c816:	681b      	ldr	r3, [r3, #0]
 800c818:	4a30      	ldr	r2, [pc, #192]	; (800c8dc <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800c81a:	4293      	cmp	r3, r2
 800c81c:	d004      	beq.n	800c828 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800c81e:	687b      	ldr	r3, [r7, #4]
 800c820:	681b      	ldr	r3, [r3, #0]
 800c822:	4a2f      	ldr	r2, [pc, #188]	; (800c8e0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800c824:	4293      	cmp	r3, r2
 800c826:	d108      	bne.n	800c83a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800c828:	68fb      	ldr	r3, [r7, #12]
 800c82a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800c82e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800c830:	683b      	ldr	r3, [r7, #0]
 800c832:	685b      	ldr	r3, [r3, #4]
 800c834:	68fa      	ldr	r2, [r7, #12]
 800c836:	4313      	orrs	r3, r2
 800c838:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800c83a:	68fb      	ldr	r3, [r7, #12]
 800c83c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c840:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800c842:	683b      	ldr	r3, [r7, #0]
 800c844:	681b      	ldr	r3, [r3, #0]
 800c846:	68fa      	ldr	r2, [r7, #12]
 800c848:	4313      	orrs	r3, r2
 800c84a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800c84c:	687b      	ldr	r3, [r7, #4]
 800c84e:	681b      	ldr	r3, [r3, #0]
 800c850:	68fa      	ldr	r2, [r7, #12]
 800c852:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c854:	687b      	ldr	r3, [r7, #4]
 800c856:	681b      	ldr	r3, [r3, #0]
 800c858:	4a20      	ldr	r2, [pc, #128]	; (800c8dc <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800c85a:	4293      	cmp	r3, r2
 800c85c:	d022      	beq.n	800c8a4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800c85e:	687b      	ldr	r3, [r7, #4]
 800c860:	681b      	ldr	r3, [r3, #0]
 800c862:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c866:	d01d      	beq.n	800c8a4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800c868:	687b      	ldr	r3, [r7, #4]
 800c86a:	681b      	ldr	r3, [r3, #0]
 800c86c:	4a1d      	ldr	r2, [pc, #116]	; (800c8e4 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800c86e:	4293      	cmp	r3, r2
 800c870:	d018      	beq.n	800c8a4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800c872:	687b      	ldr	r3, [r7, #4]
 800c874:	681b      	ldr	r3, [r3, #0]
 800c876:	4a1c      	ldr	r2, [pc, #112]	; (800c8e8 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800c878:	4293      	cmp	r3, r2
 800c87a:	d013      	beq.n	800c8a4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800c87c:	687b      	ldr	r3, [r7, #4]
 800c87e:	681b      	ldr	r3, [r3, #0]
 800c880:	4a1a      	ldr	r2, [pc, #104]	; (800c8ec <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800c882:	4293      	cmp	r3, r2
 800c884:	d00e      	beq.n	800c8a4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800c886:	687b      	ldr	r3, [r7, #4]
 800c888:	681b      	ldr	r3, [r3, #0]
 800c88a:	4a15      	ldr	r2, [pc, #84]	; (800c8e0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800c88c:	4293      	cmp	r3, r2
 800c88e:	d009      	beq.n	800c8a4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800c890:	687b      	ldr	r3, [r7, #4]
 800c892:	681b      	ldr	r3, [r3, #0]
 800c894:	4a16      	ldr	r2, [pc, #88]	; (800c8f0 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800c896:	4293      	cmp	r3, r2
 800c898:	d004      	beq.n	800c8a4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800c89a:	687b      	ldr	r3, [r7, #4]
 800c89c:	681b      	ldr	r3, [r3, #0]
 800c89e:	4a15      	ldr	r2, [pc, #84]	; (800c8f4 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800c8a0:	4293      	cmp	r3, r2
 800c8a2:	d10c      	bne.n	800c8be <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800c8a4:	68bb      	ldr	r3, [r7, #8]
 800c8a6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c8aa:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800c8ac:	683b      	ldr	r3, [r7, #0]
 800c8ae:	689b      	ldr	r3, [r3, #8]
 800c8b0:	68ba      	ldr	r2, [r7, #8]
 800c8b2:	4313      	orrs	r3, r2
 800c8b4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800c8b6:	687b      	ldr	r3, [r7, #4]
 800c8b8:	681b      	ldr	r3, [r3, #0]
 800c8ba:	68ba      	ldr	r2, [r7, #8]
 800c8bc:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800c8be:	687b      	ldr	r3, [r7, #4]
 800c8c0:	2201      	movs	r2, #1
 800c8c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800c8c6:	687b      	ldr	r3, [r7, #4]
 800c8c8:	2200      	movs	r2, #0
 800c8ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800c8ce:	2300      	movs	r3, #0
}
 800c8d0:	4618      	mov	r0, r3
 800c8d2:	3714      	adds	r7, #20
 800c8d4:	46bd      	mov	sp, r7
 800c8d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8da:	4770      	bx	lr
 800c8dc:	40010000 	.word	0x40010000
 800c8e0:	40010400 	.word	0x40010400
 800c8e4:	40000400 	.word	0x40000400
 800c8e8:	40000800 	.word	0x40000800
 800c8ec:	40000c00 	.word	0x40000c00
 800c8f0:	40001800 	.word	0x40001800
 800c8f4:	40014000 	.word	0x40014000

0800c8f8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800c8f8:	b580      	push	{r7, lr}
 800c8fa:	b082      	sub	sp, #8
 800c8fc:	af00      	add	r7, sp, #0
 800c8fe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800c900:	687b      	ldr	r3, [r7, #4]
 800c902:	2b00      	cmp	r3, #0
 800c904:	d101      	bne.n	800c90a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800c906:	2301      	movs	r3, #1
 800c908:	e042      	b.n	800c990 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800c90a:	687b      	ldr	r3, [r7, #4]
 800c90c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c910:	2b00      	cmp	r3, #0
 800c912:	d106      	bne.n	800c922 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800c914:	687b      	ldr	r3, [r7, #4]
 800c916:	2200      	movs	r2, #0
 800c918:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800c91c:	6878      	ldr	r0, [r7, #4]
 800c91e:	f7f5 fd5b 	bl	80023d8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800c922:	687b      	ldr	r3, [r7, #4]
 800c924:	2224      	movs	r2, #36	; 0x24
 800c926:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 800c92a:	687b      	ldr	r3, [r7, #4]
 800c92c:	681b      	ldr	r3, [r3, #0]
 800c92e:	681a      	ldr	r2, [r3, #0]
 800c930:	687b      	ldr	r3, [r7, #4]
 800c932:	681b      	ldr	r3, [r3, #0]
 800c934:	f022 0201 	bic.w	r2, r2, #1
 800c938:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800c93a:	6878      	ldr	r0, [r7, #4]
 800c93c:	f000 f8ba 	bl	800cab4 <UART_SetConfig>
 800c940:	4603      	mov	r3, r0
 800c942:	2b01      	cmp	r3, #1
 800c944:	d101      	bne.n	800c94a <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800c946:	2301      	movs	r3, #1
 800c948:	e022      	b.n	800c990 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800c94a:	687b      	ldr	r3, [r7, #4]
 800c94c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c94e:	2b00      	cmp	r3, #0
 800c950:	d002      	beq.n	800c958 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800c952:	6878      	ldr	r0, [r7, #4]
 800c954:	f000 fe16 	bl	800d584 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800c958:	687b      	ldr	r3, [r7, #4]
 800c95a:	681b      	ldr	r3, [r3, #0]
 800c95c:	685a      	ldr	r2, [r3, #4]
 800c95e:	687b      	ldr	r3, [r7, #4]
 800c960:	681b      	ldr	r3, [r3, #0]
 800c962:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800c966:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800c968:	687b      	ldr	r3, [r7, #4]
 800c96a:	681b      	ldr	r3, [r3, #0]
 800c96c:	689a      	ldr	r2, [r3, #8]
 800c96e:	687b      	ldr	r3, [r7, #4]
 800c970:	681b      	ldr	r3, [r3, #0]
 800c972:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800c976:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800c978:	687b      	ldr	r3, [r7, #4]
 800c97a:	681b      	ldr	r3, [r3, #0]
 800c97c:	681a      	ldr	r2, [r3, #0]
 800c97e:	687b      	ldr	r3, [r7, #4]
 800c980:	681b      	ldr	r3, [r3, #0]
 800c982:	f042 0201 	orr.w	r2, r2, #1
 800c986:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800c988:	6878      	ldr	r0, [r7, #4]
 800c98a:	f000 fe9d 	bl	800d6c8 <UART_CheckIdleState>
 800c98e:	4603      	mov	r3, r0
}
 800c990:	4618      	mov	r0, r3
 800c992:	3708      	adds	r7, #8
 800c994:	46bd      	mov	sp, r7
 800c996:	bd80      	pop	{r7, pc}

0800c998 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800c998:	b580      	push	{r7, lr}
 800c99a:	b08a      	sub	sp, #40	; 0x28
 800c99c:	af02      	add	r7, sp, #8
 800c99e:	60f8      	str	r0, [r7, #12]
 800c9a0:	60b9      	str	r1, [r7, #8]
 800c9a2:	603b      	str	r3, [r7, #0]
 800c9a4:	4613      	mov	r3, r2
 800c9a6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800c9a8:	68fb      	ldr	r3, [r7, #12]
 800c9aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c9ae:	2b20      	cmp	r3, #32
 800c9b0:	d17b      	bne.n	800caaa <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800c9b2:	68bb      	ldr	r3, [r7, #8]
 800c9b4:	2b00      	cmp	r3, #0
 800c9b6:	d002      	beq.n	800c9be <HAL_UART_Transmit+0x26>
 800c9b8:	88fb      	ldrh	r3, [r7, #6]
 800c9ba:	2b00      	cmp	r3, #0
 800c9bc:	d101      	bne.n	800c9c2 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800c9be:	2301      	movs	r3, #1
 800c9c0:	e074      	b.n	800caac <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c9c2:	68fb      	ldr	r3, [r7, #12]
 800c9c4:	2200      	movs	r2, #0
 800c9c6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800c9ca:	68fb      	ldr	r3, [r7, #12]
 800c9cc:	2221      	movs	r2, #33	; 0x21
 800c9ce:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800c9d2:	f7f6 f9f7 	bl	8002dc4 <HAL_GetTick>
 800c9d6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800c9d8:	68fb      	ldr	r3, [r7, #12]
 800c9da:	88fa      	ldrh	r2, [r7, #6]
 800c9dc:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 800c9e0:	68fb      	ldr	r3, [r7, #12]
 800c9e2:	88fa      	ldrh	r2, [r7, #6]
 800c9e4:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800c9e8:	68fb      	ldr	r3, [r7, #12]
 800c9ea:	689b      	ldr	r3, [r3, #8]
 800c9ec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c9f0:	d108      	bne.n	800ca04 <HAL_UART_Transmit+0x6c>
 800c9f2:	68fb      	ldr	r3, [r7, #12]
 800c9f4:	691b      	ldr	r3, [r3, #16]
 800c9f6:	2b00      	cmp	r3, #0
 800c9f8:	d104      	bne.n	800ca04 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800c9fa:	2300      	movs	r3, #0
 800c9fc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800c9fe:	68bb      	ldr	r3, [r7, #8]
 800ca00:	61bb      	str	r3, [r7, #24]
 800ca02:	e003      	b.n	800ca0c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800ca04:	68bb      	ldr	r3, [r7, #8]
 800ca06:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800ca08:	2300      	movs	r3, #0
 800ca0a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800ca0c:	e030      	b.n	800ca70 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800ca0e:	683b      	ldr	r3, [r7, #0]
 800ca10:	9300      	str	r3, [sp, #0]
 800ca12:	697b      	ldr	r3, [r7, #20]
 800ca14:	2200      	movs	r2, #0
 800ca16:	2180      	movs	r1, #128	; 0x80
 800ca18:	68f8      	ldr	r0, [r7, #12]
 800ca1a:	f000 feff 	bl	800d81c <UART_WaitOnFlagUntilTimeout>
 800ca1e:	4603      	mov	r3, r0
 800ca20:	2b00      	cmp	r3, #0
 800ca22:	d005      	beq.n	800ca30 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 800ca24:	68fb      	ldr	r3, [r7, #12]
 800ca26:	2220      	movs	r2, #32
 800ca28:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 800ca2c:	2303      	movs	r3, #3
 800ca2e:	e03d      	b.n	800caac <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 800ca30:	69fb      	ldr	r3, [r7, #28]
 800ca32:	2b00      	cmp	r3, #0
 800ca34:	d10b      	bne.n	800ca4e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800ca36:	69bb      	ldr	r3, [r7, #24]
 800ca38:	881b      	ldrh	r3, [r3, #0]
 800ca3a:	461a      	mov	r2, r3
 800ca3c:	68fb      	ldr	r3, [r7, #12]
 800ca3e:	681b      	ldr	r3, [r3, #0]
 800ca40:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800ca44:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800ca46:	69bb      	ldr	r3, [r7, #24]
 800ca48:	3302      	adds	r3, #2
 800ca4a:	61bb      	str	r3, [r7, #24]
 800ca4c:	e007      	b.n	800ca5e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800ca4e:	69fb      	ldr	r3, [r7, #28]
 800ca50:	781a      	ldrb	r2, [r3, #0]
 800ca52:	68fb      	ldr	r3, [r7, #12]
 800ca54:	681b      	ldr	r3, [r3, #0]
 800ca56:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800ca58:	69fb      	ldr	r3, [r7, #28]
 800ca5a:	3301      	adds	r3, #1
 800ca5c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800ca5e:	68fb      	ldr	r3, [r7, #12]
 800ca60:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800ca64:	b29b      	uxth	r3, r3
 800ca66:	3b01      	subs	r3, #1
 800ca68:	b29a      	uxth	r2, r3
 800ca6a:	68fb      	ldr	r3, [r7, #12]
 800ca6c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800ca70:	68fb      	ldr	r3, [r7, #12]
 800ca72:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800ca76:	b29b      	uxth	r3, r3
 800ca78:	2b00      	cmp	r3, #0
 800ca7a:	d1c8      	bne.n	800ca0e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800ca7c:	683b      	ldr	r3, [r7, #0]
 800ca7e:	9300      	str	r3, [sp, #0]
 800ca80:	697b      	ldr	r3, [r7, #20]
 800ca82:	2200      	movs	r2, #0
 800ca84:	2140      	movs	r1, #64	; 0x40
 800ca86:	68f8      	ldr	r0, [r7, #12]
 800ca88:	f000 fec8 	bl	800d81c <UART_WaitOnFlagUntilTimeout>
 800ca8c:	4603      	mov	r3, r0
 800ca8e:	2b00      	cmp	r3, #0
 800ca90:	d005      	beq.n	800ca9e <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800ca92:	68fb      	ldr	r3, [r7, #12]
 800ca94:	2220      	movs	r2, #32
 800ca96:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 800ca9a:	2303      	movs	r3, #3
 800ca9c:	e006      	b.n	800caac <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800ca9e:	68fb      	ldr	r3, [r7, #12]
 800caa0:	2220      	movs	r2, #32
 800caa2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 800caa6:	2300      	movs	r3, #0
 800caa8:	e000      	b.n	800caac <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800caaa:	2302      	movs	r3, #2
  }
}
 800caac:	4618      	mov	r0, r3
 800caae:	3720      	adds	r7, #32
 800cab0:	46bd      	mov	sp, r7
 800cab2:	bd80      	pop	{r7, pc}

0800cab4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800cab4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800cab8:	b092      	sub	sp, #72	; 0x48
 800caba:	af00      	add	r7, sp, #0
 800cabc:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800cabe:	2300      	movs	r3, #0
 800cac0:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800cac4:	697b      	ldr	r3, [r7, #20]
 800cac6:	689a      	ldr	r2, [r3, #8]
 800cac8:	697b      	ldr	r3, [r7, #20]
 800caca:	691b      	ldr	r3, [r3, #16]
 800cacc:	431a      	orrs	r2, r3
 800cace:	697b      	ldr	r3, [r7, #20]
 800cad0:	695b      	ldr	r3, [r3, #20]
 800cad2:	431a      	orrs	r2, r3
 800cad4:	697b      	ldr	r3, [r7, #20]
 800cad6:	69db      	ldr	r3, [r3, #28]
 800cad8:	4313      	orrs	r3, r2
 800cada:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800cadc:	697b      	ldr	r3, [r7, #20]
 800cade:	681b      	ldr	r3, [r3, #0]
 800cae0:	681a      	ldr	r2, [r3, #0]
 800cae2:	4bbe      	ldr	r3, [pc, #760]	; (800cddc <UART_SetConfig+0x328>)
 800cae4:	4013      	ands	r3, r2
 800cae6:	697a      	ldr	r2, [r7, #20]
 800cae8:	6812      	ldr	r2, [r2, #0]
 800caea:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800caec:	430b      	orrs	r3, r1
 800caee:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800caf0:	697b      	ldr	r3, [r7, #20]
 800caf2:	681b      	ldr	r3, [r3, #0]
 800caf4:	685b      	ldr	r3, [r3, #4]
 800caf6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800cafa:	697b      	ldr	r3, [r7, #20]
 800cafc:	68da      	ldr	r2, [r3, #12]
 800cafe:	697b      	ldr	r3, [r7, #20]
 800cb00:	681b      	ldr	r3, [r3, #0]
 800cb02:	430a      	orrs	r2, r1
 800cb04:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800cb06:	697b      	ldr	r3, [r7, #20]
 800cb08:	699b      	ldr	r3, [r3, #24]
 800cb0a:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800cb0c:	697b      	ldr	r3, [r7, #20]
 800cb0e:	681b      	ldr	r3, [r3, #0]
 800cb10:	4ab3      	ldr	r2, [pc, #716]	; (800cde0 <UART_SetConfig+0x32c>)
 800cb12:	4293      	cmp	r3, r2
 800cb14:	d004      	beq.n	800cb20 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800cb16:	697b      	ldr	r3, [r7, #20]
 800cb18:	6a1b      	ldr	r3, [r3, #32]
 800cb1a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800cb1c:	4313      	orrs	r3, r2
 800cb1e:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800cb20:	697b      	ldr	r3, [r7, #20]
 800cb22:	681b      	ldr	r3, [r3, #0]
 800cb24:	689a      	ldr	r2, [r3, #8]
 800cb26:	4baf      	ldr	r3, [pc, #700]	; (800cde4 <UART_SetConfig+0x330>)
 800cb28:	4013      	ands	r3, r2
 800cb2a:	697a      	ldr	r2, [r7, #20]
 800cb2c:	6812      	ldr	r2, [r2, #0]
 800cb2e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800cb30:	430b      	orrs	r3, r1
 800cb32:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800cb34:	697b      	ldr	r3, [r7, #20]
 800cb36:	681b      	ldr	r3, [r3, #0]
 800cb38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cb3a:	f023 010f 	bic.w	r1, r3, #15
 800cb3e:	697b      	ldr	r3, [r7, #20]
 800cb40:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800cb42:	697b      	ldr	r3, [r7, #20]
 800cb44:	681b      	ldr	r3, [r3, #0]
 800cb46:	430a      	orrs	r2, r1
 800cb48:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800cb4a:	697b      	ldr	r3, [r7, #20]
 800cb4c:	681b      	ldr	r3, [r3, #0]
 800cb4e:	4aa6      	ldr	r2, [pc, #664]	; (800cde8 <UART_SetConfig+0x334>)
 800cb50:	4293      	cmp	r3, r2
 800cb52:	d177      	bne.n	800cc44 <UART_SetConfig+0x190>
 800cb54:	4ba5      	ldr	r3, [pc, #660]	; (800cdec <UART_SetConfig+0x338>)
 800cb56:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cb58:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800cb5c:	2b28      	cmp	r3, #40	; 0x28
 800cb5e:	d86d      	bhi.n	800cc3c <UART_SetConfig+0x188>
 800cb60:	a201      	add	r2, pc, #4	; (adr r2, 800cb68 <UART_SetConfig+0xb4>)
 800cb62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cb66:	bf00      	nop
 800cb68:	0800cc0d 	.word	0x0800cc0d
 800cb6c:	0800cc3d 	.word	0x0800cc3d
 800cb70:	0800cc3d 	.word	0x0800cc3d
 800cb74:	0800cc3d 	.word	0x0800cc3d
 800cb78:	0800cc3d 	.word	0x0800cc3d
 800cb7c:	0800cc3d 	.word	0x0800cc3d
 800cb80:	0800cc3d 	.word	0x0800cc3d
 800cb84:	0800cc3d 	.word	0x0800cc3d
 800cb88:	0800cc15 	.word	0x0800cc15
 800cb8c:	0800cc3d 	.word	0x0800cc3d
 800cb90:	0800cc3d 	.word	0x0800cc3d
 800cb94:	0800cc3d 	.word	0x0800cc3d
 800cb98:	0800cc3d 	.word	0x0800cc3d
 800cb9c:	0800cc3d 	.word	0x0800cc3d
 800cba0:	0800cc3d 	.word	0x0800cc3d
 800cba4:	0800cc3d 	.word	0x0800cc3d
 800cba8:	0800cc1d 	.word	0x0800cc1d
 800cbac:	0800cc3d 	.word	0x0800cc3d
 800cbb0:	0800cc3d 	.word	0x0800cc3d
 800cbb4:	0800cc3d 	.word	0x0800cc3d
 800cbb8:	0800cc3d 	.word	0x0800cc3d
 800cbbc:	0800cc3d 	.word	0x0800cc3d
 800cbc0:	0800cc3d 	.word	0x0800cc3d
 800cbc4:	0800cc3d 	.word	0x0800cc3d
 800cbc8:	0800cc25 	.word	0x0800cc25
 800cbcc:	0800cc3d 	.word	0x0800cc3d
 800cbd0:	0800cc3d 	.word	0x0800cc3d
 800cbd4:	0800cc3d 	.word	0x0800cc3d
 800cbd8:	0800cc3d 	.word	0x0800cc3d
 800cbdc:	0800cc3d 	.word	0x0800cc3d
 800cbe0:	0800cc3d 	.word	0x0800cc3d
 800cbe4:	0800cc3d 	.word	0x0800cc3d
 800cbe8:	0800cc2d 	.word	0x0800cc2d
 800cbec:	0800cc3d 	.word	0x0800cc3d
 800cbf0:	0800cc3d 	.word	0x0800cc3d
 800cbf4:	0800cc3d 	.word	0x0800cc3d
 800cbf8:	0800cc3d 	.word	0x0800cc3d
 800cbfc:	0800cc3d 	.word	0x0800cc3d
 800cc00:	0800cc3d 	.word	0x0800cc3d
 800cc04:	0800cc3d 	.word	0x0800cc3d
 800cc08:	0800cc35 	.word	0x0800cc35
 800cc0c:	2301      	movs	r3, #1
 800cc0e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cc12:	e222      	b.n	800d05a <UART_SetConfig+0x5a6>
 800cc14:	2304      	movs	r3, #4
 800cc16:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cc1a:	e21e      	b.n	800d05a <UART_SetConfig+0x5a6>
 800cc1c:	2308      	movs	r3, #8
 800cc1e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cc22:	e21a      	b.n	800d05a <UART_SetConfig+0x5a6>
 800cc24:	2310      	movs	r3, #16
 800cc26:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cc2a:	e216      	b.n	800d05a <UART_SetConfig+0x5a6>
 800cc2c:	2320      	movs	r3, #32
 800cc2e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cc32:	e212      	b.n	800d05a <UART_SetConfig+0x5a6>
 800cc34:	2340      	movs	r3, #64	; 0x40
 800cc36:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cc3a:	e20e      	b.n	800d05a <UART_SetConfig+0x5a6>
 800cc3c:	2380      	movs	r3, #128	; 0x80
 800cc3e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cc42:	e20a      	b.n	800d05a <UART_SetConfig+0x5a6>
 800cc44:	697b      	ldr	r3, [r7, #20]
 800cc46:	681b      	ldr	r3, [r3, #0]
 800cc48:	4a69      	ldr	r2, [pc, #420]	; (800cdf0 <UART_SetConfig+0x33c>)
 800cc4a:	4293      	cmp	r3, r2
 800cc4c:	d130      	bne.n	800ccb0 <UART_SetConfig+0x1fc>
 800cc4e:	4b67      	ldr	r3, [pc, #412]	; (800cdec <UART_SetConfig+0x338>)
 800cc50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cc52:	f003 0307 	and.w	r3, r3, #7
 800cc56:	2b05      	cmp	r3, #5
 800cc58:	d826      	bhi.n	800cca8 <UART_SetConfig+0x1f4>
 800cc5a:	a201      	add	r2, pc, #4	; (adr r2, 800cc60 <UART_SetConfig+0x1ac>)
 800cc5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cc60:	0800cc79 	.word	0x0800cc79
 800cc64:	0800cc81 	.word	0x0800cc81
 800cc68:	0800cc89 	.word	0x0800cc89
 800cc6c:	0800cc91 	.word	0x0800cc91
 800cc70:	0800cc99 	.word	0x0800cc99
 800cc74:	0800cca1 	.word	0x0800cca1
 800cc78:	2300      	movs	r3, #0
 800cc7a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cc7e:	e1ec      	b.n	800d05a <UART_SetConfig+0x5a6>
 800cc80:	2304      	movs	r3, #4
 800cc82:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cc86:	e1e8      	b.n	800d05a <UART_SetConfig+0x5a6>
 800cc88:	2308      	movs	r3, #8
 800cc8a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cc8e:	e1e4      	b.n	800d05a <UART_SetConfig+0x5a6>
 800cc90:	2310      	movs	r3, #16
 800cc92:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cc96:	e1e0      	b.n	800d05a <UART_SetConfig+0x5a6>
 800cc98:	2320      	movs	r3, #32
 800cc9a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cc9e:	e1dc      	b.n	800d05a <UART_SetConfig+0x5a6>
 800cca0:	2340      	movs	r3, #64	; 0x40
 800cca2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cca6:	e1d8      	b.n	800d05a <UART_SetConfig+0x5a6>
 800cca8:	2380      	movs	r3, #128	; 0x80
 800ccaa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ccae:	e1d4      	b.n	800d05a <UART_SetConfig+0x5a6>
 800ccb0:	697b      	ldr	r3, [r7, #20]
 800ccb2:	681b      	ldr	r3, [r3, #0]
 800ccb4:	4a4f      	ldr	r2, [pc, #316]	; (800cdf4 <UART_SetConfig+0x340>)
 800ccb6:	4293      	cmp	r3, r2
 800ccb8:	d130      	bne.n	800cd1c <UART_SetConfig+0x268>
 800ccba:	4b4c      	ldr	r3, [pc, #304]	; (800cdec <UART_SetConfig+0x338>)
 800ccbc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ccbe:	f003 0307 	and.w	r3, r3, #7
 800ccc2:	2b05      	cmp	r3, #5
 800ccc4:	d826      	bhi.n	800cd14 <UART_SetConfig+0x260>
 800ccc6:	a201      	add	r2, pc, #4	; (adr r2, 800cccc <UART_SetConfig+0x218>)
 800ccc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cccc:	0800cce5 	.word	0x0800cce5
 800ccd0:	0800cced 	.word	0x0800cced
 800ccd4:	0800ccf5 	.word	0x0800ccf5
 800ccd8:	0800ccfd 	.word	0x0800ccfd
 800ccdc:	0800cd05 	.word	0x0800cd05
 800cce0:	0800cd0d 	.word	0x0800cd0d
 800cce4:	2300      	movs	r3, #0
 800cce6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ccea:	e1b6      	b.n	800d05a <UART_SetConfig+0x5a6>
 800ccec:	2304      	movs	r3, #4
 800ccee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ccf2:	e1b2      	b.n	800d05a <UART_SetConfig+0x5a6>
 800ccf4:	2308      	movs	r3, #8
 800ccf6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ccfa:	e1ae      	b.n	800d05a <UART_SetConfig+0x5a6>
 800ccfc:	2310      	movs	r3, #16
 800ccfe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cd02:	e1aa      	b.n	800d05a <UART_SetConfig+0x5a6>
 800cd04:	2320      	movs	r3, #32
 800cd06:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cd0a:	e1a6      	b.n	800d05a <UART_SetConfig+0x5a6>
 800cd0c:	2340      	movs	r3, #64	; 0x40
 800cd0e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cd12:	e1a2      	b.n	800d05a <UART_SetConfig+0x5a6>
 800cd14:	2380      	movs	r3, #128	; 0x80
 800cd16:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cd1a:	e19e      	b.n	800d05a <UART_SetConfig+0x5a6>
 800cd1c:	697b      	ldr	r3, [r7, #20]
 800cd1e:	681b      	ldr	r3, [r3, #0]
 800cd20:	4a35      	ldr	r2, [pc, #212]	; (800cdf8 <UART_SetConfig+0x344>)
 800cd22:	4293      	cmp	r3, r2
 800cd24:	d130      	bne.n	800cd88 <UART_SetConfig+0x2d4>
 800cd26:	4b31      	ldr	r3, [pc, #196]	; (800cdec <UART_SetConfig+0x338>)
 800cd28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cd2a:	f003 0307 	and.w	r3, r3, #7
 800cd2e:	2b05      	cmp	r3, #5
 800cd30:	d826      	bhi.n	800cd80 <UART_SetConfig+0x2cc>
 800cd32:	a201      	add	r2, pc, #4	; (adr r2, 800cd38 <UART_SetConfig+0x284>)
 800cd34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cd38:	0800cd51 	.word	0x0800cd51
 800cd3c:	0800cd59 	.word	0x0800cd59
 800cd40:	0800cd61 	.word	0x0800cd61
 800cd44:	0800cd69 	.word	0x0800cd69
 800cd48:	0800cd71 	.word	0x0800cd71
 800cd4c:	0800cd79 	.word	0x0800cd79
 800cd50:	2300      	movs	r3, #0
 800cd52:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cd56:	e180      	b.n	800d05a <UART_SetConfig+0x5a6>
 800cd58:	2304      	movs	r3, #4
 800cd5a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cd5e:	e17c      	b.n	800d05a <UART_SetConfig+0x5a6>
 800cd60:	2308      	movs	r3, #8
 800cd62:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cd66:	e178      	b.n	800d05a <UART_SetConfig+0x5a6>
 800cd68:	2310      	movs	r3, #16
 800cd6a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cd6e:	e174      	b.n	800d05a <UART_SetConfig+0x5a6>
 800cd70:	2320      	movs	r3, #32
 800cd72:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cd76:	e170      	b.n	800d05a <UART_SetConfig+0x5a6>
 800cd78:	2340      	movs	r3, #64	; 0x40
 800cd7a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cd7e:	e16c      	b.n	800d05a <UART_SetConfig+0x5a6>
 800cd80:	2380      	movs	r3, #128	; 0x80
 800cd82:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cd86:	e168      	b.n	800d05a <UART_SetConfig+0x5a6>
 800cd88:	697b      	ldr	r3, [r7, #20]
 800cd8a:	681b      	ldr	r3, [r3, #0]
 800cd8c:	4a1b      	ldr	r2, [pc, #108]	; (800cdfc <UART_SetConfig+0x348>)
 800cd8e:	4293      	cmp	r3, r2
 800cd90:	d142      	bne.n	800ce18 <UART_SetConfig+0x364>
 800cd92:	4b16      	ldr	r3, [pc, #88]	; (800cdec <UART_SetConfig+0x338>)
 800cd94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cd96:	f003 0307 	and.w	r3, r3, #7
 800cd9a:	2b05      	cmp	r3, #5
 800cd9c:	d838      	bhi.n	800ce10 <UART_SetConfig+0x35c>
 800cd9e:	a201      	add	r2, pc, #4	; (adr r2, 800cda4 <UART_SetConfig+0x2f0>)
 800cda0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cda4:	0800cdbd 	.word	0x0800cdbd
 800cda8:	0800cdc5 	.word	0x0800cdc5
 800cdac:	0800cdcd 	.word	0x0800cdcd
 800cdb0:	0800cdd5 	.word	0x0800cdd5
 800cdb4:	0800ce01 	.word	0x0800ce01
 800cdb8:	0800ce09 	.word	0x0800ce09
 800cdbc:	2300      	movs	r3, #0
 800cdbe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cdc2:	e14a      	b.n	800d05a <UART_SetConfig+0x5a6>
 800cdc4:	2304      	movs	r3, #4
 800cdc6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cdca:	e146      	b.n	800d05a <UART_SetConfig+0x5a6>
 800cdcc:	2308      	movs	r3, #8
 800cdce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cdd2:	e142      	b.n	800d05a <UART_SetConfig+0x5a6>
 800cdd4:	2310      	movs	r3, #16
 800cdd6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cdda:	e13e      	b.n	800d05a <UART_SetConfig+0x5a6>
 800cddc:	cfff69f3 	.word	0xcfff69f3
 800cde0:	58000c00 	.word	0x58000c00
 800cde4:	11fff4ff 	.word	0x11fff4ff
 800cde8:	40011000 	.word	0x40011000
 800cdec:	58024400 	.word	0x58024400
 800cdf0:	40004400 	.word	0x40004400
 800cdf4:	40004800 	.word	0x40004800
 800cdf8:	40004c00 	.word	0x40004c00
 800cdfc:	40005000 	.word	0x40005000
 800ce00:	2320      	movs	r3, #32
 800ce02:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ce06:	e128      	b.n	800d05a <UART_SetConfig+0x5a6>
 800ce08:	2340      	movs	r3, #64	; 0x40
 800ce0a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ce0e:	e124      	b.n	800d05a <UART_SetConfig+0x5a6>
 800ce10:	2380      	movs	r3, #128	; 0x80
 800ce12:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ce16:	e120      	b.n	800d05a <UART_SetConfig+0x5a6>
 800ce18:	697b      	ldr	r3, [r7, #20]
 800ce1a:	681b      	ldr	r3, [r3, #0]
 800ce1c:	4acb      	ldr	r2, [pc, #812]	; (800d14c <UART_SetConfig+0x698>)
 800ce1e:	4293      	cmp	r3, r2
 800ce20:	d176      	bne.n	800cf10 <UART_SetConfig+0x45c>
 800ce22:	4bcb      	ldr	r3, [pc, #812]	; (800d150 <UART_SetConfig+0x69c>)
 800ce24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ce26:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800ce2a:	2b28      	cmp	r3, #40	; 0x28
 800ce2c:	d86c      	bhi.n	800cf08 <UART_SetConfig+0x454>
 800ce2e:	a201      	add	r2, pc, #4	; (adr r2, 800ce34 <UART_SetConfig+0x380>)
 800ce30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ce34:	0800ced9 	.word	0x0800ced9
 800ce38:	0800cf09 	.word	0x0800cf09
 800ce3c:	0800cf09 	.word	0x0800cf09
 800ce40:	0800cf09 	.word	0x0800cf09
 800ce44:	0800cf09 	.word	0x0800cf09
 800ce48:	0800cf09 	.word	0x0800cf09
 800ce4c:	0800cf09 	.word	0x0800cf09
 800ce50:	0800cf09 	.word	0x0800cf09
 800ce54:	0800cee1 	.word	0x0800cee1
 800ce58:	0800cf09 	.word	0x0800cf09
 800ce5c:	0800cf09 	.word	0x0800cf09
 800ce60:	0800cf09 	.word	0x0800cf09
 800ce64:	0800cf09 	.word	0x0800cf09
 800ce68:	0800cf09 	.word	0x0800cf09
 800ce6c:	0800cf09 	.word	0x0800cf09
 800ce70:	0800cf09 	.word	0x0800cf09
 800ce74:	0800cee9 	.word	0x0800cee9
 800ce78:	0800cf09 	.word	0x0800cf09
 800ce7c:	0800cf09 	.word	0x0800cf09
 800ce80:	0800cf09 	.word	0x0800cf09
 800ce84:	0800cf09 	.word	0x0800cf09
 800ce88:	0800cf09 	.word	0x0800cf09
 800ce8c:	0800cf09 	.word	0x0800cf09
 800ce90:	0800cf09 	.word	0x0800cf09
 800ce94:	0800cef1 	.word	0x0800cef1
 800ce98:	0800cf09 	.word	0x0800cf09
 800ce9c:	0800cf09 	.word	0x0800cf09
 800cea0:	0800cf09 	.word	0x0800cf09
 800cea4:	0800cf09 	.word	0x0800cf09
 800cea8:	0800cf09 	.word	0x0800cf09
 800ceac:	0800cf09 	.word	0x0800cf09
 800ceb0:	0800cf09 	.word	0x0800cf09
 800ceb4:	0800cef9 	.word	0x0800cef9
 800ceb8:	0800cf09 	.word	0x0800cf09
 800cebc:	0800cf09 	.word	0x0800cf09
 800cec0:	0800cf09 	.word	0x0800cf09
 800cec4:	0800cf09 	.word	0x0800cf09
 800cec8:	0800cf09 	.word	0x0800cf09
 800cecc:	0800cf09 	.word	0x0800cf09
 800ced0:	0800cf09 	.word	0x0800cf09
 800ced4:	0800cf01 	.word	0x0800cf01
 800ced8:	2301      	movs	r3, #1
 800ceda:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cede:	e0bc      	b.n	800d05a <UART_SetConfig+0x5a6>
 800cee0:	2304      	movs	r3, #4
 800cee2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cee6:	e0b8      	b.n	800d05a <UART_SetConfig+0x5a6>
 800cee8:	2308      	movs	r3, #8
 800ceea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800ceee:	e0b4      	b.n	800d05a <UART_SetConfig+0x5a6>
 800cef0:	2310      	movs	r3, #16
 800cef2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cef6:	e0b0      	b.n	800d05a <UART_SetConfig+0x5a6>
 800cef8:	2320      	movs	r3, #32
 800cefa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cefe:	e0ac      	b.n	800d05a <UART_SetConfig+0x5a6>
 800cf00:	2340      	movs	r3, #64	; 0x40
 800cf02:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cf06:	e0a8      	b.n	800d05a <UART_SetConfig+0x5a6>
 800cf08:	2380      	movs	r3, #128	; 0x80
 800cf0a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cf0e:	e0a4      	b.n	800d05a <UART_SetConfig+0x5a6>
 800cf10:	697b      	ldr	r3, [r7, #20]
 800cf12:	681b      	ldr	r3, [r3, #0]
 800cf14:	4a8f      	ldr	r2, [pc, #572]	; (800d154 <UART_SetConfig+0x6a0>)
 800cf16:	4293      	cmp	r3, r2
 800cf18:	d130      	bne.n	800cf7c <UART_SetConfig+0x4c8>
 800cf1a:	4b8d      	ldr	r3, [pc, #564]	; (800d150 <UART_SetConfig+0x69c>)
 800cf1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cf1e:	f003 0307 	and.w	r3, r3, #7
 800cf22:	2b05      	cmp	r3, #5
 800cf24:	d826      	bhi.n	800cf74 <UART_SetConfig+0x4c0>
 800cf26:	a201      	add	r2, pc, #4	; (adr r2, 800cf2c <UART_SetConfig+0x478>)
 800cf28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cf2c:	0800cf45 	.word	0x0800cf45
 800cf30:	0800cf4d 	.word	0x0800cf4d
 800cf34:	0800cf55 	.word	0x0800cf55
 800cf38:	0800cf5d 	.word	0x0800cf5d
 800cf3c:	0800cf65 	.word	0x0800cf65
 800cf40:	0800cf6d 	.word	0x0800cf6d
 800cf44:	2300      	movs	r3, #0
 800cf46:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cf4a:	e086      	b.n	800d05a <UART_SetConfig+0x5a6>
 800cf4c:	2304      	movs	r3, #4
 800cf4e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cf52:	e082      	b.n	800d05a <UART_SetConfig+0x5a6>
 800cf54:	2308      	movs	r3, #8
 800cf56:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cf5a:	e07e      	b.n	800d05a <UART_SetConfig+0x5a6>
 800cf5c:	2310      	movs	r3, #16
 800cf5e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cf62:	e07a      	b.n	800d05a <UART_SetConfig+0x5a6>
 800cf64:	2320      	movs	r3, #32
 800cf66:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cf6a:	e076      	b.n	800d05a <UART_SetConfig+0x5a6>
 800cf6c:	2340      	movs	r3, #64	; 0x40
 800cf6e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cf72:	e072      	b.n	800d05a <UART_SetConfig+0x5a6>
 800cf74:	2380      	movs	r3, #128	; 0x80
 800cf76:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cf7a:	e06e      	b.n	800d05a <UART_SetConfig+0x5a6>
 800cf7c:	697b      	ldr	r3, [r7, #20]
 800cf7e:	681b      	ldr	r3, [r3, #0]
 800cf80:	4a75      	ldr	r2, [pc, #468]	; (800d158 <UART_SetConfig+0x6a4>)
 800cf82:	4293      	cmp	r3, r2
 800cf84:	d130      	bne.n	800cfe8 <UART_SetConfig+0x534>
 800cf86:	4b72      	ldr	r3, [pc, #456]	; (800d150 <UART_SetConfig+0x69c>)
 800cf88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800cf8a:	f003 0307 	and.w	r3, r3, #7
 800cf8e:	2b05      	cmp	r3, #5
 800cf90:	d826      	bhi.n	800cfe0 <UART_SetConfig+0x52c>
 800cf92:	a201      	add	r2, pc, #4	; (adr r2, 800cf98 <UART_SetConfig+0x4e4>)
 800cf94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cf98:	0800cfb1 	.word	0x0800cfb1
 800cf9c:	0800cfb9 	.word	0x0800cfb9
 800cfa0:	0800cfc1 	.word	0x0800cfc1
 800cfa4:	0800cfc9 	.word	0x0800cfc9
 800cfa8:	0800cfd1 	.word	0x0800cfd1
 800cfac:	0800cfd9 	.word	0x0800cfd9
 800cfb0:	2300      	movs	r3, #0
 800cfb2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cfb6:	e050      	b.n	800d05a <UART_SetConfig+0x5a6>
 800cfb8:	2304      	movs	r3, #4
 800cfba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cfbe:	e04c      	b.n	800d05a <UART_SetConfig+0x5a6>
 800cfc0:	2308      	movs	r3, #8
 800cfc2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cfc6:	e048      	b.n	800d05a <UART_SetConfig+0x5a6>
 800cfc8:	2310      	movs	r3, #16
 800cfca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cfce:	e044      	b.n	800d05a <UART_SetConfig+0x5a6>
 800cfd0:	2320      	movs	r3, #32
 800cfd2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cfd6:	e040      	b.n	800d05a <UART_SetConfig+0x5a6>
 800cfd8:	2340      	movs	r3, #64	; 0x40
 800cfda:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cfde:	e03c      	b.n	800d05a <UART_SetConfig+0x5a6>
 800cfe0:	2380      	movs	r3, #128	; 0x80
 800cfe2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800cfe6:	e038      	b.n	800d05a <UART_SetConfig+0x5a6>
 800cfe8:	697b      	ldr	r3, [r7, #20]
 800cfea:	681b      	ldr	r3, [r3, #0]
 800cfec:	4a5b      	ldr	r2, [pc, #364]	; (800d15c <UART_SetConfig+0x6a8>)
 800cfee:	4293      	cmp	r3, r2
 800cff0:	d130      	bne.n	800d054 <UART_SetConfig+0x5a0>
 800cff2:	4b57      	ldr	r3, [pc, #348]	; (800d150 <UART_SetConfig+0x69c>)
 800cff4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800cff6:	f003 0307 	and.w	r3, r3, #7
 800cffa:	2b05      	cmp	r3, #5
 800cffc:	d826      	bhi.n	800d04c <UART_SetConfig+0x598>
 800cffe:	a201      	add	r2, pc, #4	; (adr r2, 800d004 <UART_SetConfig+0x550>)
 800d000:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d004:	0800d01d 	.word	0x0800d01d
 800d008:	0800d025 	.word	0x0800d025
 800d00c:	0800d02d 	.word	0x0800d02d
 800d010:	0800d035 	.word	0x0800d035
 800d014:	0800d03d 	.word	0x0800d03d
 800d018:	0800d045 	.word	0x0800d045
 800d01c:	2302      	movs	r3, #2
 800d01e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d022:	e01a      	b.n	800d05a <UART_SetConfig+0x5a6>
 800d024:	2304      	movs	r3, #4
 800d026:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d02a:	e016      	b.n	800d05a <UART_SetConfig+0x5a6>
 800d02c:	2308      	movs	r3, #8
 800d02e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d032:	e012      	b.n	800d05a <UART_SetConfig+0x5a6>
 800d034:	2310      	movs	r3, #16
 800d036:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d03a:	e00e      	b.n	800d05a <UART_SetConfig+0x5a6>
 800d03c:	2320      	movs	r3, #32
 800d03e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d042:	e00a      	b.n	800d05a <UART_SetConfig+0x5a6>
 800d044:	2340      	movs	r3, #64	; 0x40
 800d046:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d04a:	e006      	b.n	800d05a <UART_SetConfig+0x5a6>
 800d04c:	2380      	movs	r3, #128	; 0x80
 800d04e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800d052:	e002      	b.n	800d05a <UART_SetConfig+0x5a6>
 800d054:	2380      	movs	r3, #128	; 0x80
 800d056:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800d05a:	697b      	ldr	r3, [r7, #20]
 800d05c:	681b      	ldr	r3, [r3, #0]
 800d05e:	4a3f      	ldr	r2, [pc, #252]	; (800d15c <UART_SetConfig+0x6a8>)
 800d060:	4293      	cmp	r3, r2
 800d062:	f040 80f8 	bne.w	800d256 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800d066:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800d06a:	2b20      	cmp	r3, #32
 800d06c:	dc46      	bgt.n	800d0fc <UART_SetConfig+0x648>
 800d06e:	2b02      	cmp	r3, #2
 800d070:	f2c0 8082 	blt.w	800d178 <UART_SetConfig+0x6c4>
 800d074:	3b02      	subs	r3, #2
 800d076:	2b1e      	cmp	r3, #30
 800d078:	d87e      	bhi.n	800d178 <UART_SetConfig+0x6c4>
 800d07a:	a201      	add	r2, pc, #4	; (adr r2, 800d080 <UART_SetConfig+0x5cc>)
 800d07c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d080:	0800d103 	.word	0x0800d103
 800d084:	0800d179 	.word	0x0800d179
 800d088:	0800d10b 	.word	0x0800d10b
 800d08c:	0800d179 	.word	0x0800d179
 800d090:	0800d179 	.word	0x0800d179
 800d094:	0800d179 	.word	0x0800d179
 800d098:	0800d11b 	.word	0x0800d11b
 800d09c:	0800d179 	.word	0x0800d179
 800d0a0:	0800d179 	.word	0x0800d179
 800d0a4:	0800d179 	.word	0x0800d179
 800d0a8:	0800d179 	.word	0x0800d179
 800d0ac:	0800d179 	.word	0x0800d179
 800d0b0:	0800d179 	.word	0x0800d179
 800d0b4:	0800d179 	.word	0x0800d179
 800d0b8:	0800d12b 	.word	0x0800d12b
 800d0bc:	0800d179 	.word	0x0800d179
 800d0c0:	0800d179 	.word	0x0800d179
 800d0c4:	0800d179 	.word	0x0800d179
 800d0c8:	0800d179 	.word	0x0800d179
 800d0cc:	0800d179 	.word	0x0800d179
 800d0d0:	0800d179 	.word	0x0800d179
 800d0d4:	0800d179 	.word	0x0800d179
 800d0d8:	0800d179 	.word	0x0800d179
 800d0dc:	0800d179 	.word	0x0800d179
 800d0e0:	0800d179 	.word	0x0800d179
 800d0e4:	0800d179 	.word	0x0800d179
 800d0e8:	0800d179 	.word	0x0800d179
 800d0ec:	0800d179 	.word	0x0800d179
 800d0f0:	0800d179 	.word	0x0800d179
 800d0f4:	0800d179 	.word	0x0800d179
 800d0f8:	0800d16b 	.word	0x0800d16b
 800d0fc:	2b40      	cmp	r3, #64	; 0x40
 800d0fe:	d037      	beq.n	800d170 <UART_SetConfig+0x6bc>
 800d100:	e03a      	b.n	800d178 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800d102:	f7fe fb19 	bl	800b738 <HAL_RCCEx_GetD3PCLK1Freq>
 800d106:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800d108:	e03c      	b.n	800d184 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d10a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800d10e:	4618      	mov	r0, r3
 800d110:	f7fe fb28 	bl	800b764 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800d114:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d116:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d118:	e034      	b.n	800d184 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800d11a:	f107 0318 	add.w	r3, r7, #24
 800d11e:	4618      	mov	r0, r3
 800d120:	f7fe fc74 	bl	800ba0c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800d124:	69fb      	ldr	r3, [r7, #28]
 800d126:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d128:	e02c      	b.n	800d184 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800d12a:	4b09      	ldr	r3, [pc, #36]	; (800d150 <UART_SetConfig+0x69c>)
 800d12c:	681b      	ldr	r3, [r3, #0]
 800d12e:	f003 0320 	and.w	r3, r3, #32
 800d132:	2b00      	cmp	r3, #0
 800d134:	d016      	beq.n	800d164 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800d136:	4b06      	ldr	r3, [pc, #24]	; (800d150 <UART_SetConfig+0x69c>)
 800d138:	681b      	ldr	r3, [r3, #0]
 800d13a:	08db      	lsrs	r3, r3, #3
 800d13c:	f003 0303 	and.w	r3, r3, #3
 800d140:	4a07      	ldr	r2, [pc, #28]	; (800d160 <UART_SetConfig+0x6ac>)
 800d142:	fa22 f303 	lsr.w	r3, r2, r3
 800d146:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800d148:	e01c      	b.n	800d184 <UART_SetConfig+0x6d0>
 800d14a:	bf00      	nop
 800d14c:	40011400 	.word	0x40011400
 800d150:	58024400 	.word	0x58024400
 800d154:	40007800 	.word	0x40007800
 800d158:	40007c00 	.word	0x40007c00
 800d15c:	58000c00 	.word	0x58000c00
 800d160:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 800d164:	4b9d      	ldr	r3, [pc, #628]	; (800d3dc <UART_SetConfig+0x928>)
 800d166:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d168:	e00c      	b.n	800d184 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800d16a:	4b9d      	ldr	r3, [pc, #628]	; (800d3e0 <UART_SetConfig+0x92c>)
 800d16c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d16e:	e009      	b.n	800d184 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800d170:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800d174:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d176:	e005      	b.n	800d184 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 800d178:	2300      	movs	r3, #0
 800d17a:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800d17c:	2301      	movs	r3, #1
 800d17e:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800d182:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800d184:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d186:	2b00      	cmp	r3, #0
 800d188:	f000 81de 	beq.w	800d548 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800d18c:	697b      	ldr	r3, [r7, #20]
 800d18e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d190:	4a94      	ldr	r2, [pc, #592]	; (800d3e4 <UART_SetConfig+0x930>)
 800d192:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d196:	461a      	mov	r2, r3
 800d198:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d19a:	fbb3 f3f2 	udiv	r3, r3, r2
 800d19e:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800d1a0:	697b      	ldr	r3, [r7, #20]
 800d1a2:	685a      	ldr	r2, [r3, #4]
 800d1a4:	4613      	mov	r3, r2
 800d1a6:	005b      	lsls	r3, r3, #1
 800d1a8:	4413      	add	r3, r2
 800d1aa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d1ac:	429a      	cmp	r2, r3
 800d1ae:	d305      	bcc.n	800d1bc <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800d1b0:	697b      	ldr	r3, [r7, #20]
 800d1b2:	685b      	ldr	r3, [r3, #4]
 800d1b4:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800d1b6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d1b8:	429a      	cmp	r2, r3
 800d1ba:	d903      	bls.n	800d1c4 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 800d1bc:	2301      	movs	r3, #1
 800d1be:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800d1c2:	e1c1      	b.n	800d548 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800d1c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d1c6:	2200      	movs	r2, #0
 800d1c8:	60bb      	str	r3, [r7, #8]
 800d1ca:	60fa      	str	r2, [r7, #12]
 800d1cc:	697b      	ldr	r3, [r7, #20]
 800d1ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d1d0:	4a84      	ldr	r2, [pc, #528]	; (800d3e4 <UART_SetConfig+0x930>)
 800d1d2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d1d6:	b29b      	uxth	r3, r3
 800d1d8:	2200      	movs	r2, #0
 800d1da:	603b      	str	r3, [r7, #0]
 800d1dc:	607a      	str	r2, [r7, #4]
 800d1de:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d1e2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800d1e6:	f7f3 fe5b 	bl	8000ea0 <__aeabi_uldivmod>
 800d1ea:	4602      	mov	r2, r0
 800d1ec:	460b      	mov	r3, r1
 800d1ee:	4610      	mov	r0, r2
 800d1f0:	4619      	mov	r1, r3
 800d1f2:	f04f 0200 	mov.w	r2, #0
 800d1f6:	f04f 0300 	mov.w	r3, #0
 800d1fa:	020b      	lsls	r3, r1, #8
 800d1fc:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800d200:	0202      	lsls	r2, r0, #8
 800d202:	6979      	ldr	r1, [r7, #20]
 800d204:	6849      	ldr	r1, [r1, #4]
 800d206:	0849      	lsrs	r1, r1, #1
 800d208:	2000      	movs	r0, #0
 800d20a:	460c      	mov	r4, r1
 800d20c:	4605      	mov	r5, r0
 800d20e:	eb12 0804 	adds.w	r8, r2, r4
 800d212:	eb43 0905 	adc.w	r9, r3, r5
 800d216:	697b      	ldr	r3, [r7, #20]
 800d218:	685b      	ldr	r3, [r3, #4]
 800d21a:	2200      	movs	r2, #0
 800d21c:	469a      	mov	sl, r3
 800d21e:	4693      	mov	fp, r2
 800d220:	4652      	mov	r2, sl
 800d222:	465b      	mov	r3, fp
 800d224:	4640      	mov	r0, r8
 800d226:	4649      	mov	r1, r9
 800d228:	f7f3 fe3a 	bl	8000ea0 <__aeabi_uldivmod>
 800d22c:	4602      	mov	r2, r0
 800d22e:	460b      	mov	r3, r1
 800d230:	4613      	mov	r3, r2
 800d232:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800d234:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d236:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800d23a:	d308      	bcc.n	800d24e <UART_SetConfig+0x79a>
 800d23c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d23e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800d242:	d204      	bcs.n	800d24e <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 800d244:	697b      	ldr	r3, [r7, #20]
 800d246:	681b      	ldr	r3, [r3, #0]
 800d248:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d24a:	60da      	str	r2, [r3, #12]
 800d24c:	e17c      	b.n	800d548 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 800d24e:	2301      	movs	r3, #1
 800d250:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800d254:	e178      	b.n	800d548 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800d256:	697b      	ldr	r3, [r7, #20]
 800d258:	69db      	ldr	r3, [r3, #28]
 800d25a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800d25e:	f040 80c5 	bne.w	800d3ec <UART_SetConfig+0x938>
  {
    switch (clocksource)
 800d262:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800d266:	2b20      	cmp	r3, #32
 800d268:	dc48      	bgt.n	800d2fc <UART_SetConfig+0x848>
 800d26a:	2b00      	cmp	r3, #0
 800d26c:	db7b      	blt.n	800d366 <UART_SetConfig+0x8b2>
 800d26e:	2b20      	cmp	r3, #32
 800d270:	d879      	bhi.n	800d366 <UART_SetConfig+0x8b2>
 800d272:	a201      	add	r2, pc, #4	; (adr r2, 800d278 <UART_SetConfig+0x7c4>)
 800d274:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d278:	0800d303 	.word	0x0800d303
 800d27c:	0800d30b 	.word	0x0800d30b
 800d280:	0800d367 	.word	0x0800d367
 800d284:	0800d367 	.word	0x0800d367
 800d288:	0800d313 	.word	0x0800d313
 800d28c:	0800d367 	.word	0x0800d367
 800d290:	0800d367 	.word	0x0800d367
 800d294:	0800d367 	.word	0x0800d367
 800d298:	0800d323 	.word	0x0800d323
 800d29c:	0800d367 	.word	0x0800d367
 800d2a0:	0800d367 	.word	0x0800d367
 800d2a4:	0800d367 	.word	0x0800d367
 800d2a8:	0800d367 	.word	0x0800d367
 800d2ac:	0800d367 	.word	0x0800d367
 800d2b0:	0800d367 	.word	0x0800d367
 800d2b4:	0800d367 	.word	0x0800d367
 800d2b8:	0800d333 	.word	0x0800d333
 800d2bc:	0800d367 	.word	0x0800d367
 800d2c0:	0800d367 	.word	0x0800d367
 800d2c4:	0800d367 	.word	0x0800d367
 800d2c8:	0800d367 	.word	0x0800d367
 800d2cc:	0800d367 	.word	0x0800d367
 800d2d0:	0800d367 	.word	0x0800d367
 800d2d4:	0800d367 	.word	0x0800d367
 800d2d8:	0800d367 	.word	0x0800d367
 800d2dc:	0800d367 	.word	0x0800d367
 800d2e0:	0800d367 	.word	0x0800d367
 800d2e4:	0800d367 	.word	0x0800d367
 800d2e8:	0800d367 	.word	0x0800d367
 800d2ec:	0800d367 	.word	0x0800d367
 800d2f0:	0800d367 	.word	0x0800d367
 800d2f4:	0800d367 	.word	0x0800d367
 800d2f8:	0800d359 	.word	0x0800d359
 800d2fc:	2b40      	cmp	r3, #64	; 0x40
 800d2fe:	d02e      	beq.n	800d35e <UART_SetConfig+0x8aa>
 800d300:	e031      	b.n	800d366 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800d302:	f7fc fa47 	bl	8009794 <HAL_RCC_GetPCLK1Freq>
 800d306:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800d308:	e033      	b.n	800d372 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800d30a:	f7fc fa59 	bl	80097c0 <HAL_RCC_GetPCLK2Freq>
 800d30e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800d310:	e02f      	b.n	800d372 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d312:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800d316:	4618      	mov	r0, r3
 800d318:	f7fe fa24 	bl	800b764 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800d31c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d31e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d320:	e027      	b.n	800d372 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800d322:	f107 0318 	add.w	r3, r7, #24
 800d326:	4618      	mov	r0, r3
 800d328:	f7fe fb70 	bl	800ba0c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800d32c:	69fb      	ldr	r3, [r7, #28]
 800d32e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d330:	e01f      	b.n	800d372 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800d332:	4b2d      	ldr	r3, [pc, #180]	; (800d3e8 <UART_SetConfig+0x934>)
 800d334:	681b      	ldr	r3, [r3, #0]
 800d336:	f003 0320 	and.w	r3, r3, #32
 800d33a:	2b00      	cmp	r3, #0
 800d33c:	d009      	beq.n	800d352 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800d33e:	4b2a      	ldr	r3, [pc, #168]	; (800d3e8 <UART_SetConfig+0x934>)
 800d340:	681b      	ldr	r3, [r3, #0]
 800d342:	08db      	lsrs	r3, r3, #3
 800d344:	f003 0303 	and.w	r3, r3, #3
 800d348:	4a24      	ldr	r2, [pc, #144]	; (800d3dc <UART_SetConfig+0x928>)
 800d34a:	fa22 f303 	lsr.w	r3, r2, r3
 800d34e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800d350:	e00f      	b.n	800d372 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800d352:	4b22      	ldr	r3, [pc, #136]	; (800d3dc <UART_SetConfig+0x928>)
 800d354:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d356:	e00c      	b.n	800d372 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800d358:	4b21      	ldr	r3, [pc, #132]	; (800d3e0 <UART_SetConfig+0x92c>)
 800d35a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d35c:	e009      	b.n	800d372 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800d35e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800d362:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d364:	e005      	b.n	800d372 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800d366:	2300      	movs	r3, #0
 800d368:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800d36a:	2301      	movs	r3, #1
 800d36c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800d370:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800d372:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d374:	2b00      	cmp	r3, #0
 800d376:	f000 80e7 	beq.w	800d548 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800d37a:	697b      	ldr	r3, [r7, #20]
 800d37c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d37e:	4a19      	ldr	r2, [pc, #100]	; (800d3e4 <UART_SetConfig+0x930>)
 800d380:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d384:	461a      	mov	r2, r3
 800d386:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d388:	fbb3 f3f2 	udiv	r3, r3, r2
 800d38c:	005a      	lsls	r2, r3, #1
 800d38e:	697b      	ldr	r3, [r7, #20]
 800d390:	685b      	ldr	r3, [r3, #4]
 800d392:	085b      	lsrs	r3, r3, #1
 800d394:	441a      	add	r2, r3
 800d396:	697b      	ldr	r3, [r7, #20]
 800d398:	685b      	ldr	r3, [r3, #4]
 800d39a:	fbb2 f3f3 	udiv	r3, r2, r3
 800d39e:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800d3a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d3a2:	2b0f      	cmp	r3, #15
 800d3a4:	d916      	bls.n	800d3d4 <UART_SetConfig+0x920>
 800d3a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d3a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d3ac:	d212      	bcs.n	800d3d4 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800d3ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d3b0:	b29b      	uxth	r3, r3
 800d3b2:	f023 030f 	bic.w	r3, r3, #15
 800d3b6:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800d3b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d3ba:	085b      	lsrs	r3, r3, #1
 800d3bc:	b29b      	uxth	r3, r3
 800d3be:	f003 0307 	and.w	r3, r3, #7
 800d3c2:	b29a      	uxth	r2, r3
 800d3c4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800d3c6:	4313      	orrs	r3, r2
 800d3c8:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 800d3ca:	697b      	ldr	r3, [r7, #20]
 800d3cc:	681b      	ldr	r3, [r3, #0]
 800d3ce:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800d3d0:	60da      	str	r2, [r3, #12]
 800d3d2:	e0b9      	b.n	800d548 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800d3d4:	2301      	movs	r3, #1
 800d3d6:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800d3da:	e0b5      	b.n	800d548 <UART_SetConfig+0xa94>
 800d3dc:	03d09000 	.word	0x03d09000
 800d3e0:	003d0900 	.word	0x003d0900
 800d3e4:	0801d84c 	.word	0x0801d84c
 800d3e8:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 800d3ec:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800d3f0:	2b20      	cmp	r3, #32
 800d3f2:	dc49      	bgt.n	800d488 <UART_SetConfig+0x9d4>
 800d3f4:	2b00      	cmp	r3, #0
 800d3f6:	db7c      	blt.n	800d4f2 <UART_SetConfig+0xa3e>
 800d3f8:	2b20      	cmp	r3, #32
 800d3fa:	d87a      	bhi.n	800d4f2 <UART_SetConfig+0xa3e>
 800d3fc:	a201      	add	r2, pc, #4	; (adr r2, 800d404 <UART_SetConfig+0x950>)
 800d3fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d402:	bf00      	nop
 800d404:	0800d48f 	.word	0x0800d48f
 800d408:	0800d497 	.word	0x0800d497
 800d40c:	0800d4f3 	.word	0x0800d4f3
 800d410:	0800d4f3 	.word	0x0800d4f3
 800d414:	0800d49f 	.word	0x0800d49f
 800d418:	0800d4f3 	.word	0x0800d4f3
 800d41c:	0800d4f3 	.word	0x0800d4f3
 800d420:	0800d4f3 	.word	0x0800d4f3
 800d424:	0800d4af 	.word	0x0800d4af
 800d428:	0800d4f3 	.word	0x0800d4f3
 800d42c:	0800d4f3 	.word	0x0800d4f3
 800d430:	0800d4f3 	.word	0x0800d4f3
 800d434:	0800d4f3 	.word	0x0800d4f3
 800d438:	0800d4f3 	.word	0x0800d4f3
 800d43c:	0800d4f3 	.word	0x0800d4f3
 800d440:	0800d4f3 	.word	0x0800d4f3
 800d444:	0800d4bf 	.word	0x0800d4bf
 800d448:	0800d4f3 	.word	0x0800d4f3
 800d44c:	0800d4f3 	.word	0x0800d4f3
 800d450:	0800d4f3 	.word	0x0800d4f3
 800d454:	0800d4f3 	.word	0x0800d4f3
 800d458:	0800d4f3 	.word	0x0800d4f3
 800d45c:	0800d4f3 	.word	0x0800d4f3
 800d460:	0800d4f3 	.word	0x0800d4f3
 800d464:	0800d4f3 	.word	0x0800d4f3
 800d468:	0800d4f3 	.word	0x0800d4f3
 800d46c:	0800d4f3 	.word	0x0800d4f3
 800d470:	0800d4f3 	.word	0x0800d4f3
 800d474:	0800d4f3 	.word	0x0800d4f3
 800d478:	0800d4f3 	.word	0x0800d4f3
 800d47c:	0800d4f3 	.word	0x0800d4f3
 800d480:	0800d4f3 	.word	0x0800d4f3
 800d484:	0800d4e5 	.word	0x0800d4e5
 800d488:	2b40      	cmp	r3, #64	; 0x40
 800d48a:	d02e      	beq.n	800d4ea <UART_SetConfig+0xa36>
 800d48c:	e031      	b.n	800d4f2 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800d48e:	f7fc f981 	bl	8009794 <HAL_RCC_GetPCLK1Freq>
 800d492:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800d494:	e033      	b.n	800d4fe <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800d496:	f7fc f993 	bl	80097c0 <HAL_RCC_GetPCLK2Freq>
 800d49a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800d49c:	e02f      	b.n	800d4fe <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d49e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800d4a2:	4618      	mov	r0, r3
 800d4a4:	f7fe f95e 	bl	800b764 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800d4a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d4aa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d4ac:	e027      	b.n	800d4fe <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800d4ae:	f107 0318 	add.w	r3, r7, #24
 800d4b2:	4618      	mov	r0, r3
 800d4b4:	f7fe faaa 	bl	800ba0c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800d4b8:	69fb      	ldr	r3, [r7, #28]
 800d4ba:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d4bc:	e01f      	b.n	800d4fe <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800d4be:	4b2d      	ldr	r3, [pc, #180]	; (800d574 <UART_SetConfig+0xac0>)
 800d4c0:	681b      	ldr	r3, [r3, #0]
 800d4c2:	f003 0320 	and.w	r3, r3, #32
 800d4c6:	2b00      	cmp	r3, #0
 800d4c8:	d009      	beq.n	800d4de <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800d4ca:	4b2a      	ldr	r3, [pc, #168]	; (800d574 <UART_SetConfig+0xac0>)
 800d4cc:	681b      	ldr	r3, [r3, #0]
 800d4ce:	08db      	lsrs	r3, r3, #3
 800d4d0:	f003 0303 	and.w	r3, r3, #3
 800d4d4:	4a28      	ldr	r2, [pc, #160]	; (800d578 <UART_SetConfig+0xac4>)
 800d4d6:	fa22 f303 	lsr.w	r3, r2, r3
 800d4da:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800d4dc:	e00f      	b.n	800d4fe <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 800d4de:	4b26      	ldr	r3, [pc, #152]	; (800d578 <UART_SetConfig+0xac4>)
 800d4e0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d4e2:	e00c      	b.n	800d4fe <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800d4e4:	4b25      	ldr	r3, [pc, #148]	; (800d57c <UART_SetConfig+0xac8>)
 800d4e6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d4e8:	e009      	b.n	800d4fe <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800d4ea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800d4ee:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800d4f0:	e005      	b.n	800d4fe <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 800d4f2:	2300      	movs	r3, #0
 800d4f4:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800d4f6:	2301      	movs	r3, #1
 800d4f8:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800d4fc:	bf00      	nop
    }

    if (pclk != 0U)
 800d4fe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d500:	2b00      	cmp	r3, #0
 800d502:	d021      	beq.n	800d548 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800d504:	697b      	ldr	r3, [r7, #20]
 800d506:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d508:	4a1d      	ldr	r2, [pc, #116]	; (800d580 <UART_SetConfig+0xacc>)
 800d50a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800d50e:	461a      	mov	r2, r3
 800d510:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d512:	fbb3 f2f2 	udiv	r2, r3, r2
 800d516:	697b      	ldr	r3, [r7, #20]
 800d518:	685b      	ldr	r3, [r3, #4]
 800d51a:	085b      	lsrs	r3, r3, #1
 800d51c:	441a      	add	r2, r3
 800d51e:	697b      	ldr	r3, [r7, #20]
 800d520:	685b      	ldr	r3, [r3, #4]
 800d522:	fbb2 f3f3 	udiv	r3, r2, r3
 800d526:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800d528:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d52a:	2b0f      	cmp	r3, #15
 800d52c:	d909      	bls.n	800d542 <UART_SetConfig+0xa8e>
 800d52e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d530:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d534:	d205      	bcs.n	800d542 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800d536:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d538:	b29a      	uxth	r2, r3
 800d53a:	697b      	ldr	r3, [r7, #20]
 800d53c:	681b      	ldr	r3, [r3, #0]
 800d53e:	60da      	str	r2, [r3, #12]
 800d540:	e002      	b.n	800d548 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800d542:	2301      	movs	r3, #1
 800d544:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800d548:	697b      	ldr	r3, [r7, #20]
 800d54a:	2201      	movs	r2, #1
 800d54c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800d550:	697b      	ldr	r3, [r7, #20]
 800d552:	2201      	movs	r2, #1
 800d554:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800d558:	697b      	ldr	r3, [r7, #20]
 800d55a:	2200      	movs	r2, #0
 800d55c:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 800d55e:	697b      	ldr	r3, [r7, #20]
 800d560:	2200      	movs	r2, #0
 800d562:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 800d564:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 800d568:	4618      	mov	r0, r3
 800d56a:	3748      	adds	r7, #72	; 0x48
 800d56c:	46bd      	mov	sp, r7
 800d56e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800d572:	bf00      	nop
 800d574:	58024400 	.word	0x58024400
 800d578:	03d09000 	.word	0x03d09000
 800d57c:	003d0900 	.word	0x003d0900
 800d580:	0801d84c 	.word	0x0801d84c

0800d584 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800d584:	b480      	push	{r7}
 800d586:	b083      	sub	sp, #12
 800d588:	af00      	add	r7, sp, #0
 800d58a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800d58c:	687b      	ldr	r3, [r7, #4]
 800d58e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d590:	f003 0301 	and.w	r3, r3, #1
 800d594:	2b00      	cmp	r3, #0
 800d596:	d00a      	beq.n	800d5ae <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800d598:	687b      	ldr	r3, [r7, #4]
 800d59a:	681b      	ldr	r3, [r3, #0]
 800d59c:	685b      	ldr	r3, [r3, #4]
 800d59e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800d5a2:	687b      	ldr	r3, [r7, #4]
 800d5a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d5a6:	687b      	ldr	r3, [r7, #4]
 800d5a8:	681b      	ldr	r3, [r3, #0]
 800d5aa:	430a      	orrs	r2, r1
 800d5ac:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800d5ae:	687b      	ldr	r3, [r7, #4]
 800d5b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d5b2:	f003 0302 	and.w	r3, r3, #2
 800d5b6:	2b00      	cmp	r3, #0
 800d5b8:	d00a      	beq.n	800d5d0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800d5ba:	687b      	ldr	r3, [r7, #4]
 800d5bc:	681b      	ldr	r3, [r3, #0]
 800d5be:	685b      	ldr	r3, [r3, #4]
 800d5c0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800d5c4:	687b      	ldr	r3, [r7, #4]
 800d5c6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800d5c8:	687b      	ldr	r3, [r7, #4]
 800d5ca:	681b      	ldr	r3, [r3, #0]
 800d5cc:	430a      	orrs	r2, r1
 800d5ce:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800d5d0:	687b      	ldr	r3, [r7, #4]
 800d5d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d5d4:	f003 0304 	and.w	r3, r3, #4
 800d5d8:	2b00      	cmp	r3, #0
 800d5da:	d00a      	beq.n	800d5f2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800d5dc:	687b      	ldr	r3, [r7, #4]
 800d5de:	681b      	ldr	r3, [r3, #0]
 800d5e0:	685b      	ldr	r3, [r3, #4]
 800d5e2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800d5e6:	687b      	ldr	r3, [r7, #4]
 800d5e8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d5ea:	687b      	ldr	r3, [r7, #4]
 800d5ec:	681b      	ldr	r3, [r3, #0]
 800d5ee:	430a      	orrs	r2, r1
 800d5f0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800d5f2:	687b      	ldr	r3, [r7, #4]
 800d5f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d5f6:	f003 0308 	and.w	r3, r3, #8
 800d5fa:	2b00      	cmp	r3, #0
 800d5fc:	d00a      	beq.n	800d614 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800d5fe:	687b      	ldr	r3, [r7, #4]
 800d600:	681b      	ldr	r3, [r3, #0]
 800d602:	685b      	ldr	r3, [r3, #4]
 800d604:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800d608:	687b      	ldr	r3, [r7, #4]
 800d60a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d60c:	687b      	ldr	r3, [r7, #4]
 800d60e:	681b      	ldr	r3, [r3, #0]
 800d610:	430a      	orrs	r2, r1
 800d612:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800d614:	687b      	ldr	r3, [r7, #4]
 800d616:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d618:	f003 0310 	and.w	r3, r3, #16
 800d61c:	2b00      	cmp	r3, #0
 800d61e:	d00a      	beq.n	800d636 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800d620:	687b      	ldr	r3, [r7, #4]
 800d622:	681b      	ldr	r3, [r3, #0]
 800d624:	689b      	ldr	r3, [r3, #8]
 800d626:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800d62a:	687b      	ldr	r3, [r7, #4]
 800d62c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d62e:	687b      	ldr	r3, [r7, #4]
 800d630:	681b      	ldr	r3, [r3, #0]
 800d632:	430a      	orrs	r2, r1
 800d634:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800d636:	687b      	ldr	r3, [r7, #4]
 800d638:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d63a:	f003 0320 	and.w	r3, r3, #32
 800d63e:	2b00      	cmp	r3, #0
 800d640:	d00a      	beq.n	800d658 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800d642:	687b      	ldr	r3, [r7, #4]
 800d644:	681b      	ldr	r3, [r3, #0]
 800d646:	689b      	ldr	r3, [r3, #8]
 800d648:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800d64c:	687b      	ldr	r3, [r7, #4]
 800d64e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800d650:	687b      	ldr	r3, [r7, #4]
 800d652:	681b      	ldr	r3, [r3, #0]
 800d654:	430a      	orrs	r2, r1
 800d656:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800d658:	687b      	ldr	r3, [r7, #4]
 800d65a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d65c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d660:	2b00      	cmp	r3, #0
 800d662:	d01a      	beq.n	800d69a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800d664:	687b      	ldr	r3, [r7, #4]
 800d666:	681b      	ldr	r3, [r3, #0]
 800d668:	685b      	ldr	r3, [r3, #4]
 800d66a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800d66e:	687b      	ldr	r3, [r7, #4]
 800d670:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800d672:	687b      	ldr	r3, [r7, #4]
 800d674:	681b      	ldr	r3, [r3, #0]
 800d676:	430a      	orrs	r2, r1
 800d678:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800d67a:	687b      	ldr	r3, [r7, #4]
 800d67c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d67e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800d682:	d10a      	bne.n	800d69a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800d684:	687b      	ldr	r3, [r7, #4]
 800d686:	681b      	ldr	r3, [r3, #0]
 800d688:	685b      	ldr	r3, [r3, #4]
 800d68a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800d68e:	687b      	ldr	r3, [r7, #4]
 800d690:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800d692:	687b      	ldr	r3, [r7, #4]
 800d694:	681b      	ldr	r3, [r3, #0]
 800d696:	430a      	orrs	r2, r1
 800d698:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800d69a:	687b      	ldr	r3, [r7, #4]
 800d69c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d69e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d6a2:	2b00      	cmp	r3, #0
 800d6a4:	d00a      	beq.n	800d6bc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800d6a6:	687b      	ldr	r3, [r7, #4]
 800d6a8:	681b      	ldr	r3, [r3, #0]
 800d6aa:	685b      	ldr	r3, [r3, #4]
 800d6ac:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800d6b0:	687b      	ldr	r3, [r7, #4]
 800d6b2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800d6b4:	687b      	ldr	r3, [r7, #4]
 800d6b6:	681b      	ldr	r3, [r3, #0]
 800d6b8:	430a      	orrs	r2, r1
 800d6ba:	605a      	str	r2, [r3, #4]
  }
}
 800d6bc:	bf00      	nop
 800d6be:	370c      	adds	r7, #12
 800d6c0:	46bd      	mov	sp, r7
 800d6c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6c6:	4770      	bx	lr

0800d6c8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800d6c8:	b580      	push	{r7, lr}
 800d6ca:	b098      	sub	sp, #96	; 0x60
 800d6cc:	af02      	add	r7, sp, #8
 800d6ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d6d0:	687b      	ldr	r3, [r7, #4]
 800d6d2:	2200      	movs	r2, #0
 800d6d4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800d6d8:	f7f5 fb74 	bl	8002dc4 <HAL_GetTick>
 800d6dc:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800d6de:	687b      	ldr	r3, [r7, #4]
 800d6e0:	681b      	ldr	r3, [r3, #0]
 800d6e2:	681b      	ldr	r3, [r3, #0]
 800d6e4:	f003 0308 	and.w	r3, r3, #8
 800d6e8:	2b08      	cmp	r3, #8
 800d6ea:	d12f      	bne.n	800d74c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800d6ec:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800d6f0:	9300      	str	r3, [sp, #0]
 800d6f2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d6f4:	2200      	movs	r2, #0
 800d6f6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800d6fa:	6878      	ldr	r0, [r7, #4]
 800d6fc:	f000 f88e 	bl	800d81c <UART_WaitOnFlagUntilTimeout>
 800d700:	4603      	mov	r3, r0
 800d702:	2b00      	cmp	r3, #0
 800d704:	d022      	beq.n	800d74c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800d706:	687b      	ldr	r3, [r7, #4]
 800d708:	681b      	ldr	r3, [r3, #0]
 800d70a:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d70c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d70e:	e853 3f00 	ldrex	r3, [r3]
 800d712:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800d714:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d716:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800d71a:	653b      	str	r3, [r7, #80]	; 0x50
 800d71c:	687b      	ldr	r3, [r7, #4]
 800d71e:	681b      	ldr	r3, [r3, #0]
 800d720:	461a      	mov	r2, r3
 800d722:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d724:	647b      	str	r3, [r7, #68]	; 0x44
 800d726:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d728:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800d72a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800d72c:	e841 2300 	strex	r3, r2, [r1]
 800d730:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800d732:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d734:	2b00      	cmp	r3, #0
 800d736:	d1e6      	bne.n	800d706 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800d738:	687b      	ldr	r3, [r7, #4]
 800d73a:	2220      	movs	r2, #32
 800d73c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 800d740:	687b      	ldr	r3, [r7, #4]
 800d742:	2200      	movs	r2, #0
 800d744:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800d748:	2303      	movs	r3, #3
 800d74a:	e063      	b.n	800d814 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800d74c:	687b      	ldr	r3, [r7, #4]
 800d74e:	681b      	ldr	r3, [r3, #0]
 800d750:	681b      	ldr	r3, [r3, #0]
 800d752:	f003 0304 	and.w	r3, r3, #4
 800d756:	2b04      	cmp	r3, #4
 800d758:	d149      	bne.n	800d7ee <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800d75a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800d75e:	9300      	str	r3, [sp, #0]
 800d760:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d762:	2200      	movs	r2, #0
 800d764:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800d768:	6878      	ldr	r0, [r7, #4]
 800d76a:	f000 f857 	bl	800d81c <UART_WaitOnFlagUntilTimeout>
 800d76e:	4603      	mov	r3, r0
 800d770:	2b00      	cmp	r3, #0
 800d772:	d03c      	beq.n	800d7ee <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800d774:	687b      	ldr	r3, [r7, #4]
 800d776:	681b      	ldr	r3, [r3, #0]
 800d778:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d77a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d77c:	e853 3f00 	ldrex	r3, [r3]
 800d780:	623b      	str	r3, [r7, #32]
   return(result);
 800d782:	6a3b      	ldr	r3, [r7, #32]
 800d784:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800d788:	64fb      	str	r3, [r7, #76]	; 0x4c
 800d78a:	687b      	ldr	r3, [r7, #4]
 800d78c:	681b      	ldr	r3, [r3, #0]
 800d78e:	461a      	mov	r2, r3
 800d790:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d792:	633b      	str	r3, [r7, #48]	; 0x30
 800d794:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d796:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800d798:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d79a:	e841 2300 	strex	r3, r2, [r1]
 800d79e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800d7a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d7a2:	2b00      	cmp	r3, #0
 800d7a4:	d1e6      	bne.n	800d774 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d7a6:	687b      	ldr	r3, [r7, #4]
 800d7a8:	681b      	ldr	r3, [r3, #0]
 800d7aa:	3308      	adds	r3, #8
 800d7ac:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d7ae:	693b      	ldr	r3, [r7, #16]
 800d7b0:	e853 3f00 	ldrex	r3, [r3]
 800d7b4:	60fb      	str	r3, [r7, #12]
   return(result);
 800d7b6:	68fb      	ldr	r3, [r7, #12]
 800d7b8:	f023 0301 	bic.w	r3, r3, #1
 800d7bc:	64bb      	str	r3, [r7, #72]	; 0x48
 800d7be:	687b      	ldr	r3, [r7, #4]
 800d7c0:	681b      	ldr	r3, [r3, #0]
 800d7c2:	3308      	adds	r3, #8
 800d7c4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800d7c6:	61fa      	str	r2, [r7, #28]
 800d7c8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d7ca:	69b9      	ldr	r1, [r7, #24]
 800d7cc:	69fa      	ldr	r2, [r7, #28]
 800d7ce:	e841 2300 	strex	r3, r2, [r1]
 800d7d2:	617b      	str	r3, [r7, #20]
   return(result);
 800d7d4:	697b      	ldr	r3, [r7, #20]
 800d7d6:	2b00      	cmp	r3, #0
 800d7d8:	d1e5      	bne.n	800d7a6 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800d7da:	687b      	ldr	r3, [r7, #4]
 800d7dc:	2220      	movs	r2, #32
 800d7de:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800d7e2:	687b      	ldr	r3, [r7, #4]
 800d7e4:	2200      	movs	r2, #0
 800d7e6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800d7ea:	2303      	movs	r3, #3
 800d7ec:	e012      	b.n	800d814 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800d7ee:	687b      	ldr	r3, [r7, #4]
 800d7f0:	2220      	movs	r2, #32
 800d7f2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800d7f6:	687b      	ldr	r3, [r7, #4]
 800d7f8:	2220      	movs	r2, #32
 800d7fa:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d7fe:	687b      	ldr	r3, [r7, #4]
 800d800:	2200      	movs	r2, #0
 800d802:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800d804:	687b      	ldr	r3, [r7, #4]
 800d806:	2200      	movs	r2, #0
 800d808:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 800d80a:	687b      	ldr	r3, [r7, #4]
 800d80c:	2200      	movs	r2, #0
 800d80e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800d812:	2300      	movs	r3, #0
}
 800d814:	4618      	mov	r0, r3
 800d816:	3758      	adds	r7, #88	; 0x58
 800d818:	46bd      	mov	sp, r7
 800d81a:	bd80      	pop	{r7, pc}

0800d81c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800d81c:	b580      	push	{r7, lr}
 800d81e:	b084      	sub	sp, #16
 800d820:	af00      	add	r7, sp, #0
 800d822:	60f8      	str	r0, [r7, #12]
 800d824:	60b9      	str	r1, [r7, #8]
 800d826:	603b      	str	r3, [r7, #0]
 800d828:	4613      	mov	r3, r2
 800d82a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800d82c:	e049      	b.n	800d8c2 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800d82e:	69bb      	ldr	r3, [r7, #24]
 800d830:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d834:	d045      	beq.n	800d8c2 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800d836:	f7f5 fac5 	bl	8002dc4 <HAL_GetTick>
 800d83a:	4602      	mov	r2, r0
 800d83c:	683b      	ldr	r3, [r7, #0]
 800d83e:	1ad3      	subs	r3, r2, r3
 800d840:	69ba      	ldr	r2, [r7, #24]
 800d842:	429a      	cmp	r2, r3
 800d844:	d302      	bcc.n	800d84c <UART_WaitOnFlagUntilTimeout+0x30>
 800d846:	69bb      	ldr	r3, [r7, #24]
 800d848:	2b00      	cmp	r3, #0
 800d84a:	d101      	bne.n	800d850 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800d84c:	2303      	movs	r3, #3
 800d84e:	e048      	b.n	800d8e2 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800d850:	68fb      	ldr	r3, [r7, #12]
 800d852:	681b      	ldr	r3, [r3, #0]
 800d854:	681b      	ldr	r3, [r3, #0]
 800d856:	f003 0304 	and.w	r3, r3, #4
 800d85a:	2b00      	cmp	r3, #0
 800d85c:	d031      	beq.n	800d8c2 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800d85e:	68fb      	ldr	r3, [r7, #12]
 800d860:	681b      	ldr	r3, [r3, #0]
 800d862:	69db      	ldr	r3, [r3, #28]
 800d864:	f003 0308 	and.w	r3, r3, #8
 800d868:	2b08      	cmp	r3, #8
 800d86a:	d110      	bne.n	800d88e <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800d86c:	68fb      	ldr	r3, [r7, #12]
 800d86e:	681b      	ldr	r3, [r3, #0]
 800d870:	2208      	movs	r2, #8
 800d872:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 800d874:	68f8      	ldr	r0, [r7, #12]
 800d876:	f000 f839 	bl	800d8ec <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 800d87a:	68fb      	ldr	r3, [r7, #12]
 800d87c:	2208      	movs	r2, #8
 800d87e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 800d882:	68fb      	ldr	r3, [r7, #12]
 800d884:	2200      	movs	r2, #0
 800d886:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

           return HAL_ERROR;
 800d88a:	2301      	movs	r3, #1
 800d88c:	e029      	b.n	800d8e2 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800d88e:	68fb      	ldr	r3, [r7, #12]
 800d890:	681b      	ldr	r3, [r3, #0]
 800d892:	69db      	ldr	r3, [r3, #28]
 800d894:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800d898:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800d89c:	d111      	bne.n	800d8c2 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800d89e:	68fb      	ldr	r3, [r7, #12]
 800d8a0:	681b      	ldr	r3, [r3, #0]
 800d8a2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800d8a6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800d8a8:	68f8      	ldr	r0, [r7, #12]
 800d8aa:	f000 f81f 	bl	800d8ec <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800d8ae:	68fb      	ldr	r3, [r7, #12]
 800d8b0:	2220      	movs	r2, #32
 800d8b2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800d8b6:	68fb      	ldr	r3, [r7, #12]
 800d8b8:	2200      	movs	r2, #0
 800d8ba:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 800d8be:	2303      	movs	r3, #3
 800d8c0:	e00f      	b.n	800d8e2 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800d8c2:	68fb      	ldr	r3, [r7, #12]
 800d8c4:	681b      	ldr	r3, [r3, #0]
 800d8c6:	69da      	ldr	r2, [r3, #28]
 800d8c8:	68bb      	ldr	r3, [r7, #8]
 800d8ca:	4013      	ands	r3, r2
 800d8cc:	68ba      	ldr	r2, [r7, #8]
 800d8ce:	429a      	cmp	r2, r3
 800d8d0:	bf0c      	ite	eq
 800d8d2:	2301      	moveq	r3, #1
 800d8d4:	2300      	movne	r3, #0
 800d8d6:	b2db      	uxtb	r3, r3
 800d8d8:	461a      	mov	r2, r3
 800d8da:	79fb      	ldrb	r3, [r7, #7]
 800d8dc:	429a      	cmp	r2, r3
 800d8de:	d0a6      	beq.n	800d82e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800d8e0:	2300      	movs	r3, #0
}
 800d8e2:	4618      	mov	r0, r3
 800d8e4:	3710      	adds	r7, #16
 800d8e6:	46bd      	mov	sp, r7
 800d8e8:	bd80      	pop	{r7, pc}
	...

0800d8ec <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800d8ec:	b480      	push	{r7}
 800d8ee:	b095      	sub	sp, #84	; 0x54
 800d8f0:	af00      	add	r7, sp, #0
 800d8f2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800d8f4:	687b      	ldr	r3, [r7, #4]
 800d8f6:	681b      	ldr	r3, [r3, #0]
 800d8f8:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d8fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d8fc:	e853 3f00 	ldrex	r3, [r3]
 800d900:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800d902:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d904:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800d908:	64fb      	str	r3, [r7, #76]	; 0x4c
 800d90a:	687b      	ldr	r3, [r7, #4]
 800d90c:	681b      	ldr	r3, [r3, #0]
 800d90e:	461a      	mov	r2, r3
 800d910:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d912:	643b      	str	r3, [r7, #64]	; 0x40
 800d914:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d916:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800d918:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800d91a:	e841 2300 	strex	r3, r2, [r1]
 800d91e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800d920:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d922:	2b00      	cmp	r3, #0
 800d924:	d1e6      	bne.n	800d8f4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800d926:	687b      	ldr	r3, [r7, #4]
 800d928:	681b      	ldr	r3, [r3, #0]
 800d92a:	3308      	adds	r3, #8
 800d92c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d92e:	6a3b      	ldr	r3, [r7, #32]
 800d930:	e853 3f00 	ldrex	r3, [r3]
 800d934:	61fb      	str	r3, [r7, #28]
   return(result);
 800d936:	69fa      	ldr	r2, [r7, #28]
 800d938:	4b1e      	ldr	r3, [pc, #120]	; (800d9b4 <UART_EndRxTransfer+0xc8>)
 800d93a:	4013      	ands	r3, r2
 800d93c:	64bb      	str	r3, [r7, #72]	; 0x48
 800d93e:	687b      	ldr	r3, [r7, #4]
 800d940:	681b      	ldr	r3, [r3, #0]
 800d942:	3308      	adds	r3, #8
 800d944:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800d946:	62fa      	str	r2, [r7, #44]	; 0x2c
 800d948:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d94a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d94c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d94e:	e841 2300 	strex	r3, r2, [r1]
 800d952:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800d954:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d956:	2b00      	cmp	r3, #0
 800d958:	d1e5      	bne.n	800d926 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d95a:	687b      	ldr	r3, [r7, #4]
 800d95c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d95e:	2b01      	cmp	r3, #1
 800d960:	d118      	bne.n	800d994 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d962:	687b      	ldr	r3, [r7, #4]
 800d964:	681b      	ldr	r3, [r3, #0]
 800d966:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d968:	68fb      	ldr	r3, [r7, #12]
 800d96a:	e853 3f00 	ldrex	r3, [r3]
 800d96e:	60bb      	str	r3, [r7, #8]
   return(result);
 800d970:	68bb      	ldr	r3, [r7, #8]
 800d972:	f023 0310 	bic.w	r3, r3, #16
 800d976:	647b      	str	r3, [r7, #68]	; 0x44
 800d978:	687b      	ldr	r3, [r7, #4]
 800d97a:	681b      	ldr	r3, [r3, #0]
 800d97c:	461a      	mov	r2, r3
 800d97e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d980:	61bb      	str	r3, [r7, #24]
 800d982:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d984:	6979      	ldr	r1, [r7, #20]
 800d986:	69ba      	ldr	r2, [r7, #24]
 800d988:	e841 2300 	strex	r3, r2, [r1]
 800d98c:	613b      	str	r3, [r7, #16]
   return(result);
 800d98e:	693b      	ldr	r3, [r7, #16]
 800d990:	2b00      	cmp	r3, #0
 800d992:	d1e6      	bne.n	800d962 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800d994:	687b      	ldr	r3, [r7, #4]
 800d996:	2220      	movs	r2, #32
 800d998:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d99c:	687b      	ldr	r3, [r7, #4]
 800d99e:	2200      	movs	r2, #0
 800d9a0:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800d9a2:	687b      	ldr	r3, [r7, #4]
 800d9a4:	2200      	movs	r2, #0
 800d9a6:	675a      	str	r2, [r3, #116]	; 0x74
}
 800d9a8:	bf00      	nop
 800d9aa:	3754      	adds	r7, #84	; 0x54
 800d9ac:	46bd      	mov	sp, r7
 800d9ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9b2:	4770      	bx	lr
 800d9b4:	effffffe 	.word	0xeffffffe

0800d9b8 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800d9b8:	b480      	push	{r7}
 800d9ba:	b085      	sub	sp, #20
 800d9bc:	af00      	add	r7, sp, #0
 800d9be:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800d9c0:	687b      	ldr	r3, [r7, #4]
 800d9c2:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800d9c6:	2b01      	cmp	r3, #1
 800d9c8:	d101      	bne.n	800d9ce <HAL_UARTEx_DisableFifoMode+0x16>
 800d9ca:	2302      	movs	r3, #2
 800d9cc:	e027      	b.n	800da1e <HAL_UARTEx_DisableFifoMode+0x66>
 800d9ce:	687b      	ldr	r3, [r7, #4]
 800d9d0:	2201      	movs	r2, #1
 800d9d2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800d9d6:	687b      	ldr	r3, [r7, #4]
 800d9d8:	2224      	movs	r2, #36	; 0x24
 800d9da:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800d9de:	687b      	ldr	r3, [r7, #4]
 800d9e0:	681b      	ldr	r3, [r3, #0]
 800d9e2:	681b      	ldr	r3, [r3, #0]
 800d9e4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800d9e6:	687b      	ldr	r3, [r7, #4]
 800d9e8:	681b      	ldr	r3, [r3, #0]
 800d9ea:	681a      	ldr	r2, [r3, #0]
 800d9ec:	687b      	ldr	r3, [r7, #4]
 800d9ee:	681b      	ldr	r3, [r3, #0]
 800d9f0:	f022 0201 	bic.w	r2, r2, #1
 800d9f4:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800d9f6:	68fb      	ldr	r3, [r7, #12]
 800d9f8:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800d9fc:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800d9fe:	687b      	ldr	r3, [r7, #4]
 800da00:	2200      	movs	r2, #0
 800da02:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800da04:	687b      	ldr	r3, [r7, #4]
 800da06:	681b      	ldr	r3, [r3, #0]
 800da08:	68fa      	ldr	r2, [r7, #12]
 800da0a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800da0c:	687b      	ldr	r3, [r7, #4]
 800da0e:	2220      	movs	r2, #32
 800da10:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800da14:	687b      	ldr	r3, [r7, #4]
 800da16:	2200      	movs	r2, #0
 800da18:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800da1c:	2300      	movs	r3, #0
}
 800da1e:	4618      	mov	r0, r3
 800da20:	3714      	adds	r7, #20
 800da22:	46bd      	mov	sp, r7
 800da24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da28:	4770      	bx	lr

0800da2a <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800da2a:	b580      	push	{r7, lr}
 800da2c:	b084      	sub	sp, #16
 800da2e:	af00      	add	r7, sp, #0
 800da30:	6078      	str	r0, [r7, #4]
 800da32:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800da34:	687b      	ldr	r3, [r7, #4]
 800da36:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800da3a:	2b01      	cmp	r3, #1
 800da3c:	d101      	bne.n	800da42 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800da3e:	2302      	movs	r3, #2
 800da40:	e02d      	b.n	800da9e <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800da42:	687b      	ldr	r3, [r7, #4]
 800da44:	2201      	movs	r2, #1
 800da46:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800da4a:	687b      	ldr	r3, [r7, #4]
 800da4c:	2224      	movs	r2, #36	; 0x24
 800da4e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800da52:	687b      	ldr	r3, [r7, #4]
 800da54:	681b      	ldr	r3, [r3, #0]
 800da56:	681b      	ldr	r3, [r3, #0]
 800da58:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800da5a:	687b      	ldr	r3, [r7, #4]
 800da5c:	681b      	ldr	r3, [r3, #0]
 800da5e:	681a      	ldr	r2, [r3, #0]
 800da60:	687b      	ldr	r3, [r7, #4]
 800da62:	681b      	ldr	r3, [r3, #0]
 800da64:	f022 0201 	bic.w	r2, r2, #1
 800da68:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800da6a:	687b      	ldr	r3, [r7, #4]
 800da6c:	681b      	ldr	r3, [r3, #0]
 800da6e:	689b      	ldr	r3, [r3, #8]
 800da70:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800da74:	687b      	ldr	r3, [r7, #4]
 800da76:	681b      	ldr	r3, [r3, #0]
 800da78:	683a      	ldr	r2, [r7, #0]
 800da7a:	430a      	orrs	r2, r1
 800da7c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800da7e:	6878      	ldr	r0, [r7, #4]
 800da80:	f000 f850 	bl	800db24 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800da84:	687b      	ldr	r3, [r7, #4]
 800da86:	681b      	ldr	r3, [r3, #0]
 800da88:	68fa      	ldr	r2, [r7, #12]
 800da8a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800da8c:	687b      	ldr	r3, [r7, #4]
 800da8e:	2220      	movs	r2, #32
 800da90:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800da94:	687b      	ldr	r3, [r7, #4]
 800da96:	2200      	movs	r2, #0
 800da98:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800da9c:	2300      	movs	r3, #0
}
 800da9e:	4618      	mov	r0, r3
 800daa0:	3710      	adds	r7, #16
 800daa2:	46bd      	mov	sp, r7
 800daa4:	bd80      	pop	{r7, pc}

0800daa6 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800daa6:	b580      	push	{r7, lr}
 800daa8:	b084      	sub	sp, #16
 800daaa:	af00      	add	r7, sp, #0
 800daac:	6078      	str	r0, [r7, #4]
 800daae:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800dab0:	687b      	ldr	r3, [r7, #4]
 800dab2:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 800dab6:	2b01      	cmp	r3, #1
 800dab8:	d101      	bne.n	800dabe <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800daba:	2302      	movs	r3, #2
 800dabc:	e02d      	b.n	800db1a <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800dabe:	687b      	ldr	r3, [r7, #4]
 800dac0:	2201      	movs	r2, #1
 800dac2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800dac6:	687b      	ldr	r3, [r7, #4]
 800dac8:	2224      	movs	r2, #36	; 0x24
 800daca:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800dace:	687b      	ldr	r3, [r7, #4]
 800dad0:	681b      	ldr	r3, [r3, #0]
 800dad2:	681b      	ldr	r3, [r3, #0]
 800dad4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800dad6:	687b      	ldr	r3, [r7, #4]
 800dad8:	681b      	ldr	r3, [r3, #0]
 800dada:	681a      	ldr	r2, [r3, #0]
 800dadc:	687b      	ldr	r3, [r7, #4]
 800dade:	681b      	ldr	r3, [r3, #0]
 800dae0:	f022 0201 	bic.w	r2, r2, #1
 800dae4:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800dae6:	687b      	ldr	r3, [r7, #4]
 800dae8:	681b      	ldr	r3, [r3, #0]
 800daea:	689b      	ldr	r3, [r3, #8]
 800daec:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 800daf0:	687b      	ldr	r3, [r7, #4]
 800daf2:	681b      	ldr	r3, [r3, #0]
 800daf4:	683a      	ldr	r2, [r7, #0]
 800daf6:	430a      	orrs	r2, r1
 800daf8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800dafa:	6878      	ldr	r0, [r7, #4]
 800dafc:	f000 f812 	bl	800db24 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800db00:	687b      	ldr	r3, [r7, #4]
 800db02:	681b      	ldr	r3, [r3, #0]
 800db04:	68fa      	ldr	r2, [r7, #12]
 800db06:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800db08:	687b      	ldr	r3, [r7, #4]
 800db0a:	2220      	movs	r2, #32
 800db0c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800db10:	687b      	ldr	r3, [r7, #4]
 800db12:	2200      	movs	r2, #0
 800db14:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800db18:	2300      	movs	r3, #0
}
 800db1a:	4618      	mov	r0, r3
 800db1c:	3710      	adds	r7, #16
 800db1e:	46bd      	mov	sp, r7
 800db20:	bd80      	pop	{r7, pc}
	...

0800db24 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800db24:	b480      	push	{r7}
 800db26:	b085      	sub	sp, #20
 800db28:	af00      	add	r7, sp, #0
 800db2a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800db2c:	687b      	ldr	r3, [r7, #4]
 800db2e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800db30:	2b00      	cmp	r3, #0
 800db32:	d108      	bne.n	800db46 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 800db34:	687b      	ldr	r3, [r7, #4]
 800db36:	2201      	movs	r2, #1
 800db38:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 800db3c:	687b      	ldr	r3, [r7, #4]
 800db3e:	2201      	movs	r2, #1
 800db40:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800db44:	e031      	b.n	800dbaa <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800db46:	2310      	movs	r3, #16
 800db48:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800db4a:	2310      	movs	r3, #16
 800db4c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800db4e:	687b      	ldr	r3, [r7, #4]
 800db50:	681b      	ldr	r3, [r3, #0]
 800db52:	689b      	ldr	r3, [r3, #8]
 800db54:	0e5b      	lsrs	r3, r3, #25
 800db56:	b2db      	uxtb	r3, r3
 800db58:	f003 0307 	and.w	r3, r3, #7
 800db5c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800db5e:	687b      	ldr	r3, [r7, #4]
 800db60:	681b      	ldr	r3, [r3, #0]
 800db62:	689b      	ldr	r3, [r3, #8]
 800db64:	0f5b      	lsrs	r3, r3, #29
 800db66:	b2db      	uxtb	r3, r3
 800db68:	f003 0307 	and.w	r3, r3, #7
 800db6c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800db6e:	7bbb      	ldrb	r3, [r7, #14]
 800db70:	7b3a      	ldrb	r2, [r7, #12]
 800db72:	4911      	ldr	r1, [pc, #68]	; (800dbb8 <UARTEx_SetNbDataToProcess+0x94>)
 800db74:	5c8a      	ldrb	r2, [r1, r2]
 800db76:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800db7a:	7b3a      	ldrb	r2, [r7, #12]
 800db7c:	490f      	ldr	r1, [pc, #60]	; (800dbbc <UARTEx_SetNbDataToProcess+0x98>)
 800db7e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800db80:	fb93 f3f2 	sdiv	r3, r3, r2
 800db84:	b29a      	uxth	r2, r3
 800db86:	687b      	ldr	r3, [r7, #4]
 800db88:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800db8c:	7bfb      	ldrb	r3, [r7, #15]
 800db8e:	7b7a      	ldrb	r2, [r7, #13]
 800db90:	4909      	ldr	r1, [pc, #36]	; (800dbb8 <UARTEx_SetNbDataToProcess+0x94>)
 800db92:	5c8a      	ldrb	r2, [r1, r2]
 800db94:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800db98:	7b7a      	ldrb	r2, [r7, #13]
 800db9a:	4908      	ldr	r1, [pc, #32]	; (800dbbc <UARTEx_SetNbDataToProcess+0x98>)
 800db9c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800db9e:	fb93 f3f2 	sdiv	r3, r3, r2
 800dba2:	b29a      	uxth	r2, r3
 800dba4:	687b      	ldr	r3, [r7, #4]
 800dba6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800dbaa:	bf00      	nop
 800dbac:	3714      	adds	r7, #20
 800dbae:	46bd      	mov	sp, r7
 800dbb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbb4:	4770      	bx	lr
 800dbb6:	bf00      	nop
 800dbb8:	0801d864 	.word	0x0801d864
 800dbbc:	0801d86c 	.word	0x0801d86c

0800dbc0 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 800dbc0:	b580      	push	{r7, lr}
 800dbc2:	b084      	sub	sp, #16
 800dbc4:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 192;
 800dbc6:	4b8d      	ldr	r3, [pc, #564]	; (800ddfc <MX_LWIP_Init+0x23c>)
 800dbc8:	22c0      	movs	r2, #192	; 0xc0
 800dbca:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 168;
 800dbcc:	4b8b      	ldr	r3, [pc, #556]	; (800ddfc <MX_LWIP_Init+0x23c>)
 800dbce:	22a8      	movs	r2, #168	; 0xa8
 800dbd0:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 0;
 800dbd2:	4b8a      	ldr	r3, [pc, #552]	; (800ddfc <MX_LWIP_Init+0x23c>)
 800dbd4:	2200      	movs	r2, #0
 800dbd6:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 10;
 800dbd8:	4b88      	ldr	r3, [pc, #544]	; (800ddfc <MX_LWIP_Init+0x23c>)
 800dbda:	220a      	movs	r2, #10
 800dbdc:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 800dbde:	4b88      	ldr	r3, [pc, #544]	; (800de00 <MX_LWIP_Init+0x240>)
 800dbe0:	22ff      	movs	r2, #255	; 0xff
 800dbe2:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 800dbe4:	4b86      	ldr	r3, [pc, #536]	; (800de00 <MX_LWIP_Init+0x240>)
 800dbe6:	22ff      	movs	r2, #255	; 0xff
 800dbe8:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 0;
 800dbea:	4b85      	ldr	r3, [pc, #532]	; (800de00 <MX_LWIP_Init+0x240>)
 800dbec:	2200      	movs	r2, #0
 800dbee:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 800dbf0:	4b83      	ldr	r3, [pc, #524]	; (800de00 <MX_LWIP_Init+0x240>)
 800dbf2:	2200      	movs	r2, #0
 800dbf4:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 192;
 800dbf6:	4b83      	ldr	r3, [pc, #524]	; (800de04 <MX_LWIP_Init+0x244>)
 800dbf8:	22c0      	movs	r2, #192	; 0xc0
 800dbfa:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 168;
 800dbfc:	4b81      	ldr	r3, [pc, #516]	; (800de04 <MX_LWIP_Init+0x244>)
 800dbfe:	22a8      	movs	r2, #168	; 0xa8
 800dc00:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 0;
 800dc02:	4b80      	ldr	r3, [pc, #512]	; (800de04 <MX_LWIP_Init+0x244>)
 800dc04:	2200      	movs	r2, #0
 800dc06:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 1;
 800dc08:	4b7e      	ldr	r3, [pc, #504]	; (800de04 <MX_LWIP_Init+0x244>)
 800dc0a:	2201      	movs	r2, #1
 800dc0c:	70da      	strb	r2, [r3, #3]

/* USER CODE BEGIN IP_ADDRESSES */
/* USER CODE END IP_ADDRESSES */

  /* Initilialize the LwIP stack without RTOS */
  lwip_init();
 800dc0e:	f000 fd3d 	bl	800e68c <lwip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 800dc12:	4b7a      	ldr	r3, [pc, #488]	; (800ddfc <MX_LWIP_Init+0x23c>)
 800dc14:	781b      	ldrb	r3, [r3, #0]
 800dc16:	061a      	lsls	r2, r3, #24
 800dc18:	4b78      	ldr	r3, [pc, #480]	; (800ddfc <MX_LWIP_Init+0x23c>)
 800dc1a:	785b      	ldrb	r3, [r3, #1]
 800dc1c:	041b      	lsls	r3, r3, #16
 800dc1e:	431a      	orrs	r2, r3
 800dc20:	4b76      	ldr	r3, [pc, #472]	; (800ddfc <MX_LWIP_Init+0x23c>)
 800dc22:	789b      	ldrb	r3, [r3, #2]
 800dc24:	021b      	lsls	r3, r3, #8
 800dc26:	4313      	orrs	r3, r2
 800dc28:	4a74      	ldr	r2, [pc, #464]	; (800ddfc <MX_LWIP_Init+0x23c>)
 800dc2a:	78d2      	ldrb	r2, [r2, #3]
 800dc2c:	4313      	orrs	r3, r2
 800dc2e:	061a      	lsls	r2, r3, #24
 800dc30:	4b72      	ldr	r3, [pc, #456]	; (800ddfc <MX_LWIP_Init+0x23c>)
 800dc32:	781b      	ldrb	r3, [r3, #0]
 800dc34:	0619      	lsls	r1, r3, #24
 800dc36:	4b71      	ldr	r3, [pc, #452]	; (800ddfc <MX_LWIP_Init+0x23c>)
 800dc38:	785b      	ldrb	r3, [r3, #1]
 800dc3a:	041b      	lsls	r3, r3, #16
 800dc3c:	4319      	orrs	r1, r3
 800dc3e:	4b6f      	ldr	r3, [pc, #444]	; (800ddfc <MX_LWIP_Init+0x23c>)
 800dc40:	789b      	ldrb	r3, [r3, #2]
 800dc42:	021b      	lsls	r3, r3, #8
 800dc44:	430b      	orrs	r3, r1
 800dc46:	496d      	ldr	r1, [pc, #436]	; (800ddfc <MX_LWIP_Init+0x23c>)
 800dc48:	78c9      	ldrb	r1, [r1, #3]
 800dc4a:	430b      	orrs	r3, r1
 800dc4c:	021b      	lsls	r3, r3, #8
 800dc4e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800dc52:	431a      	orrs	r2, r3
 800dc54:	4b69      	ldr	r3, [pc, #420]	; (800ddfc <MX_LWIP_Init+0x23c>)
 800dc56:	781b      	ldrb	r3, [r3, #0]
 800dc58:	0619      	lsls	r1, r3, #24
 800dc5a:	4b68      	ldr	r3, [pc, #416]	; (800ddfc <MX_LWIP_Init+0x23c>)
 800dc5c:	785b      	ldrb	r3, [r3, #1]
 800dc5e:	041b      	lsls	r3, r3, #16
 800dc60:	4319      	orrs	r1, r3
 800dc62:	4b66      	ldr	r3, [pc, #408]	; (800ddfc <MX_LWIP_Init+0x23c>)
 800dc64:	789b      	ldrb	r3, [r3, #2]
 800dc66:	021b      	lsls	r3, r3, #8
 800dc68:	430b      	orrs	r3, r1
 800dc6a:	4964      	ldr	r1, [pc, #400]	; (800ddfc <MX_LWIP_Init+0x23c>)
 800dc6c:	78c9      	ldrb	r1, [r1, #3]
 800dc6e:	430b      	orrs	r3, r1
 800dc70:	0a1b      	lsrs	r3, r3, #8
 800dc72:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800dc76:	431a      	orrs	r2, r3
 800dc78:	4b60      	ldr	r3, [pc, #384]	; (800ddfc <MX_LWIP_Init+0x23c>)
 800dc7a:	781b      	ldrb	r3, [r3, #0]
 800dc7c:	0619      	lsls	r1, r3, #24
 800dc7e:	4b5f      	ldr	r3, [pc, #380]	; (800ddfc <MX_LWIP_Init+0x23c>)
 800dc80:	785b      	ldrb	r3, [r3, #1]
 800dc82:	041b      	lsls	r3, r3, #16
 800dc84:	4319      	orrs	r1, r3
 800dc86:	4b5d      	ldr	r3, [pc, #372]	; (800ddfc <MX_LWIP_Init+0x23c>)
 800dc88:	789b      	ldrb	r3, [r3, #2]
 800dc8a:	021b      	lsls	r3, r3, #8
 800dc8c:	430b      	orrs	r3, r1
 800dc8e:	495b      	ldr	r1, [pc, #364]	; (800ddfc <MX_LWIP_Init+0x23c>)
 800dc90:	78c9      	ldrb	r1, [r1, #3]
 800dc92:	430b      	orrs	r3, r1
 800dc94:	0e1b      	lsrs	r3, r3, #24
 800dc96:	4313      	orrs	r3, r2
 800dc98:	4a5b      	ldr	r2, [pc, #364]	; (800de08 <MX_LWIP_Init+0x248>)
 800dc9a:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 800dc9c:	4b58      	ldr	r3, [pc, #352]	; (800de00 <MX_LWIP_Init+0x240>)
 800dc9e:	781b      	ldrb	r3, [r3, #0]
 800dca0:	061a      	lsls	r2, r3, #24
 800dca2:	4b57      	ldr	r3, [pc, #348]	; (800de00 <MX_LWIP_Init+0x240>)
 800dca4:	785b      	ldrb	r3, [r3, #1]
 800dca6:	041b      	lsls	r3, r3, #16
 800dca8:	431a      	orrs	r2, r3
 800dcaa:	4b55      	ldr	r3, [pc, #340]	; (800de00 <MX_LWIP_Init+0x240>)
 800dcac:	789b      	ldrb	r3, [r3, #2]
 800dcae:	021b      	lsls	r3, r3, #8
 800dcb0:	4313      	orrs	r3, r2
 800dcb2:	4a53      	ldr	r2, [pc, #332]	; (800de00 <MX_LWIP_Init+0x240>)
 800dcb4:	78d2      	ldrb	r2, [r2, #3]
 800dcb6:	4313      	orrs	r3, r2
 800dcb8:	061a      	lsls	r2, r3, #24
 800dcba:	4b51      	ldr	r3, [pc, #324]	; (800de00 <MX_LWIP_Init+0x240>)
 800dcbc:	781b      	ldrb	r3, [r3, #0]
 800dcbe:	0619      	lsls	r1, r3, #24
 800dcc0:	4b4f      	ldr	r3, [pc, #316]	; (800de00 <MX_LWIP_Init+0x240>)
 800dcc2:	785b      	ldrb	r3, [r3, #1]
 800dcc4:	041b      	lsls	r3, r3, #16
 800dcc6:	4319      	orrs	r1, r3
 800dcc8:	4b4d      	ldr	r3, [pc, #308]	; (800de00 <MX_LWIP_Init+0x240>)
 800dcca:	789b      	ldrb	r3, [r3, #2]
 800dccc:	021b      	lsls	r3, r3, #8
 800dcce:	430b      	orrs	r3, r1
 800dcd0:	494b      	ldr	r1, [pc, #300]	; (800de00 <MX_LWIP_Init+0x240>)
 800dcd2:	78c9      	ldrb	r1, [r1, #3]
 800dcd4:	430b      	orrs	r3, r1
 800dcd6:	021b      	lsls	r3, r3, #8
 800dcd8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800dcdc:	431a      	orrs	r2, r3
 800dcde:	4b48      	ldr	r3, [pc, #288]	; (800de00 <MX_LWIP_Init+0x240>)
 800dce0:	781b      	ldrb	r3, [r3, #0]
 800dce2:	0619      	lsls	r1, r3, #24
 800dce4:	4b46      	ldr	r3, [pc, #280]	; (800de00 <MX_LWIP_Init+0x240>)
 800dce6:	785b      	ldrb	r3, [r3, #1]
 800dce8:	041b      	lsls	r3, r3, #16
 800dcea:	4319      	orrs	r1, r3
 800dcec:	4b44      	ldr	r3, [pc, #272]	; (800de00 <MX_LWIP_Init+0x240>)
 800dcee:	789b      	ldrb	r3, [r3, #2]
 800dcf0:	021b      	lsls	r3, r3, #8
 800dcf2:	430b      	orrs	r3, r1
 800dcf4:	4942      	ldr	r1, [pc, #264]	; (800de00 <MX_LWIP_Init+0x240>)
 800dcf6:	78c9      	ldrb	r1, [r1, #3]
 800dcf8:	430b      	orrs	r3, r1
 800dcfa:	0a1b      	lsrs	r3, r3, #8
 800dcfc:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800dd00:	431a      	orrs	r2, r3
 800dd02:	4b3f      	ldr	r3, [pc, #252]	; (800de00 <MX_LWIP_Init+0x240>)
 800dd04:	781b      	ldrb	r3, [r3, #0]
 800dd06:	0619      	lsls	r1, r3, #24
 800dd08:	4b3d      	ldr	r3, [pc, #244]	; (800de00 <MX_LWIP_Init+0x240>)
 800dd0a:	785b      	ldrb	r3, [r3, #1]
 800dd0c:	041b      	lsls	r3, r3, #16
 800dd0e:	4319      	orrs	r1, r3
 800dd10:	4b3b      	ldr	r3, [pc, #236]	; (800de00 <MX_LWIP_Init+0x240>)
 800dd12:	789b      	ldrb	r3, [r3, #2]
 800dd14:	021b      	lsls	r3, r3, #8
 800dd16:	430b      	orrs	r3, r1
 800dd18:	4939      	ldr	r1, [pc, #228]	; (800de00 <MX_LWIP_Init+0x240>)
 800dd1a:	78c9      	ldrb	r1, [r1, #3]
 800dd1c:	430b      	orrs	r3, r1
 800dd1e:	0e1b      	lsrs	r3, r3, #24
 800dd20:	4313      	orrs	r3, r2
 800dd22:	4a3a      	ldr	r2, [pc, #232]	; (800de0c <MX_LWIP_Init+0x24c>)
 800dd24:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 800dd26:	4b37      	ldr	r3, [pc, #220]	; (800de04 <MX_LWIP_Init+0x244>)
 800dd28:	781b      	ldrb	r3, [r3, #0]
 800dd2a:	061a      	lsls	r2, r3, #24
 800dd2c:	4b35      	ldr	r3, [pc, #212]	; (800de04 <MX_LWIP_Init+0x244>)
 800dd2e:	785b      	ldrb	r3, [r3, #1]
 800dd30:	041b      	lsls	r3, r3, #16
 800dd32:	431a      	orrs	r2, r3
 800dd34:	4b33      	ldr	r3, [pc, #204]	; (800de04 <MX_LWIP_Init+0x244>)
 800dd36:	789b      	ldrb	r3, [r3, #2]
 800dd38:	021b      	lsls	r3, r3, #8
 800dd3a:	4313      	orrs	r3, r2
 800dd3c:	4a31      	ldr	r2, [pc, #196]	; (800de04 <MX_LWIP_Init+0x244>)
 800dd3e:	78d2      	ldrb	r2, [r2, #3]
 800dd40:	4313      	orrs	r3, r2
 800dd42:	061a      	lsls	r2, r3, #24
 800dd44:	4b2f      	ldr	r3, [pc, #188]	; (800de04 <MX_LWIP_Init+0x244>)
 800dd46:	781b      	ldrb	r3, [r3, #0]
 800dd48:	0619      	lsls	r1, r3, #24
 800dd4a:	4b2e      	ldr	r3, [pc, #184]	; (800de04 <MX_LWIP_Init+0x244>)
 800dd4c:	785b      	ldrb	r3, [r3, #1]
 800dd4e:	041b      	lsls	r3, r3, #16
 800dd50:	4319      	orrs	r1, r3
 800dd52:	4b2c      	ldr	r3, [pc, #176]	; (800de04 <MX_LWIP_Init+0x244>)
 800dd54:	789b      	ldrb	r3, [r3, #2]
 800dd56:	021b      	lsls	r3, r3, #8
 800dd58:	430b      	orrs	r3, r1
 800dd5a:	492a      	ldr	r1, [pc, #168]	; (800de04 <MX_LWIP_Init+0x244>)
 800dd5c:	78c9      	ldrb	r1, [r1, #3]
 800dd5e:	430b      	orrs	r3, r1
 800dd60:	021b      	lsls	r3, r3, #8
 800dd62:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800dd66:	431a      	orrs	r2, r3
 800dd68:	4b26      	ldr	r3, [pc, #152]	; (800de04 <MX_LWIP_Init+0x244>)
 800dd6a:	781b      	ldrb	r3, [r3, #0]
 800dd6c:	0619      	lsls	r1, r3, #24
 800dd6e:	4b25      	ldr	r3, [pc, #148]	; (800de04 <MX_LWIP_Init+0x244>)
 800dd70:	785b      	ldrb	r3, [r3, #1]
 800dd72:	041b      	lsls	r3, r3, #16
 800dd74:	4319      	orrs	r1, r3
 800dd76:	4b23      	ldr	r3, [pc, #140]	; (800de04 <MX_LWIP_Init+0x244>)
 800dd78:	789b      	ldrb	r3, [r3, #2]
 800dd7a:	021b      	lsls	r3, r3, #8
 800dd7c:	430b      	orrs	r3, r1
 800dd7e:	4921      	ldr	r1, [pc, #132]	; (800de04 <MX_LWIP_Init+0x244>)
 800dd80:	78c9      	ldrb	r1, [r1, #3]
 800dd82:	430b      	orrs	r3, r1
 800dd84:	0a1b      	lsrs	r3, r3, #8
 800dd86:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800dd8a:	431a      	orrs	r2, r3
 800dd8c:	4b1d      	ldr	r3, [pc, #116]	; (800de04 <MX_LWIP_Init+0x244>)
 800dd8e:	781b      	ldrb	r3, [r3, #0]
 800dd90:	0619      	lsls	r1, r3, #24
 800dd92:	4b1c      	ldr	r3, [pc, #112]	; (800de04 <MX_LWIP_Init+0x244>)
 800dd94:	785b      	ldrb	r3, [r3, #1]
 800dd96:	041b      	lsls	r3, r3, #16
 800dd98:	4319      	orrs	r1, r3
 800dd9a:	4b1a      	ldr	r3, [pc, #104]	; (800de04 <MX_LWIP_Init+0x244>)
 800dd9c:	789b      	ldrb	r3, [r3, #2]
 800dd9e:	021b      	lsls	r3, r3, #8
 800dda0:	430b      	orrs	r3, r1
 800dda2:	4918      	ldr	r1, [pc, #96]	; (800de04 <MX_LWIP_Init+0x244>)
 800dda4:	78c9      	ldrb	r1, [r1, #3]
 800dda6:	430b      	orrs	r3, r1
 800dda8:	0e1b      	lsrs	r3, r3, #24
 800ddaa:	4313      	orrs	r3, r2
 800ddac:	4a18      	ldr	r2, [pc, #96]	; (800de10 <MX_LWIP_Init+0x250>)
 800ddae:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) without RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &ethernet_input);
 800ddb0:	4b18      	ldr	r3, [pc, #96]	; (800de14 <MX_LWIP_Init+0x254>)
 800ddb2:	9302      	str	r3, [sp, #8]
 800ddb4:	4b18      	ldr	r3, [pc, #96]	; (800de18 <MX_LWIP_Init+0x258>)
 800ddb6:	9301      	str	r3, [sp, #4]
 800ddb8:	2300      	movs	r3, #0
 800ddba:	9300      	str	r3, [sp, #0]
 800ddbc:	4b14      	ldr	r3, [pc, #80]	; (800de10 <MX_LWIP_Init+0x250>)
 800ddbe:	4a13      	ldr	r2, [pc, #76]	; (800de0c <MX_LWIP_Init+0x24c>)
 800ddc0:	4911      	ldr	r1, [pc, #68]	; (800de08 <MX_LWIP_Init+0x248>)
 800ddc2:	4816      	ldr	r0, [pc, #88]	; (800de1c <MX_LWIP_Init+0x25c>)
 800ddc4:	f001 f94a 	bl	800f05c <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 800ddc8:	4814      	ldr	r0, [pc, #80]	; (800de1c <MX_LWIP_Init+0x25c>)
 800ddca:	f001 faf9 	bl	800f3c0 <netif_set_default>

  if (netif_is_link_up(&gnetif))
 800ddce:	4b13      	ldr	r3, [pc, #76]	; (800de1c <MX_LWIP_Init+0x25c>)
 800ddd0:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800ddd4:	089b      	lsrs	r3, r3, #2
 800ddd6:	f003 0301 	and.w	r3, r3, #1
 800ddda:	b2db      	uxtb	r3, r3
 800dddc:	2b00      	cmp	r3, #0
 800ddde:	d003      	beq.n	800dde8 <MX_LWIP_Init+0x228>
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 800dde0:	480e      	ldr	r0, [pc, #56]	; (800de1c <MX_LWIP_Init+0x25c>)
 800dde2:	f001 fafd 	bl	800f3e0 <netif_set_up>
 800dde6:	e002      	b.n	800ddee <MX_LWIP_Init+0x22e>
  }
  else
  {
    /* When the netif link is down this function must be called */
    netif_set_down(&gnetif);
 800dde8:	480c      	ldr	r0, [pc, #48]	; (800de1c <MX_LWIP_Init+0x25c>)
 800ddea:	f001 fb65 	bl	800f4b8 <netif_set_down>
  }

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernet_link_status_updated);
 800ddee:	490c      	ldr	r1, [pc, #48]	; (800de20 <MX_LWIP_Init+0x260>)
 800ddf0:	480a      	ldr	r0, [pc, #40]	; (800de1c <MX_LWIP_Init+0x25c>)
 800ddf2:	f001 fbf7 	bl	800f5e4 <netif_set_link_callback>
  /* Create the Ethernet link handler thread */

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 800ddf6:	bf00      	nop
 800ddf8:	46bd      	mov	sp, r7
 800ddfa:	bd80      	pop	{r7, pc}
 800ddfc:	2000061c 	.word	0x2000061c
 800de00:	20000620 	.word	0x20000620
 800de04:	20000624 	.word	0x20000624
 800de08:	20000610 	.word	0x20000610
 800de0c:	20000614 	.word	0x20000614
 800de10:	20000618 	.word	0x20000618
 800de14:	08017e29 	.word	0x08017e29
 800de18:	0800e069 	.word	0x0800e069
 800de1c:	200005dc 	.word	0x200005dc
 800de20:	0800de25 	.word	0x0800de25

0800de24 <ethernet_link_status_updated>:
  * @brief  Notify the User about the network interface config status
  * @param  netif: the network interface
  * @retval None
  */
static void ethernet_link_status_updated(struct netif *netif)
{
 800de24:	b480      	push	{r7}
 800de26:	b083      	sub	sp, #12
 800de28:	af00      	add	r7, sp, #0
 800de2a:	6078      	str	r0, [r7, #4]
  else /* netif is down */
  {
/* USER CODE BEGIN 6 */
/* USER CODE END 6 */
  }
}
 800de2c:	bf00      	nop
 800de2e:	370c      	adds	r7, #12
 800de30:	46bd      	mov	sp, r7
 800de32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de36:	4770      	bx	lr

0800de38 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 800de38:	b580      	push	{r7, lr}
 800de3a:	b084      	sub	sp, #16
 800de3c:	af00      	add	r7, sp, #0
 800de3e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_eth_init_status = HAL_OK;
 800de40:	2300      	movs	r3, #0
 800de42:	73fb      	strb	r3, [r7, #15]
  /* Start ETH HAL Init */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 800de44:	4b3f      	ldr	r3, [pc, #252]	; (800df44 <low_level_init+0x10c>)
 800de46:	4a40      	ldr	r2, [pc, #256]	; (800df48 <low_level_init+0x110>)
 800de48:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 800de4a:	2300      	movs	r3, #0
 800de4c:	723b      	strb	r3, [r7, #8]
  MACAddr[1] = 0x80;
 800de4e:	2380      	movs	r3, #128	; 0x80
 800de50:	727b      	strb	r3, [r7, #9]
  MACAddr[2] = 0xE1;
 800de52:	23e1      	movs	r3, #225	; 0xe1
 800de54:	72bb      	strb	r3, [r7, #10]
  MACAddr[3] = 0x00;
 800de56:	2300      	movs	r3, #0
 800de58:	72fb      	strb	r3, [r7, #11]
  MACAddr[4] = 0x00;
 800de5a:	2300      	movs	r3, #0
 800de5c:	733b      	strb	r3, [r7, #12]
  MACAddr[5] = 0x00;
 800de5e:	2300      	movs	r3, #0
 800de60:	737b      	strb	r3, [r7, #13]
  heth.Init.MACAddr = &MACAddr[0];
 800de62:	4a38      	ldr	r2, [pc, #224]	; (800df44 <low_level_init+0x10c>)
 800de64:	f107 0308 	add.w	r3, r7, #8
 800de68:	6053      	str	r3, [r2, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 800de6a:	4b36      	ldr	r3, [pc, #216]	; (800df44 <low_level_init+0x10c>)
 800de6c:	2201      	movs	r2, #1
 800de6e:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 800de70:	4b34      	ldr	r3, [pc, #208]	; (800df44 <low_level_init+0x10c>)
 800de72:	4a36      	ldr	r2, [pc, #216]	; (800df4c <low_level_init+0x114>)
 800de74:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 800de76:	4b33      	ldr	r3, [pc, #204]	; (800df44 <low_level_init+0x10c>)
 800de78:	4a35      	ldr	r2, [pc, #212]	; (800df50 <low_level_init+0x118>)
 800de7a:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1536;
 800de7c:	4b31      	ldr	r3, [pc, #196]	; (800df44 <low_level_init+0x10c>)
 800de7e:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 800de82:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 800de84:	482f      	ldr	r0, [pc, #188]	; (800df44 <low_level_init+0x10c>)
 800de86:	f7f7 f84f 	bl	8004f28 <HAL_ETH_Init>
 800de8a:	4603      	mov	r3, r0
 800de8c:	73fb      	strb	r3, [r7, #15]

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 800de8e:	2238      	movs	r2, #56	; 0x38
 800de90:	2100      	movs	r1, #0
 800de92:	4830      	ldr	r0, [pc, #192]	; (800df54 <low_level_init+0x11c>)
 800de94:	f00a ff1c 	bl	8018cd0 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 800de98:	4b2e      	ldr	r3, [pc, #184]	; (800df54 <low_level_init+0x11c>)
 800de9a:	2221      	movs	r2, #33	; 0x21
 800de9c:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 800de9e:	4b2d      	ldr	r3, [pc, #180]	; (800df54 <low_level_init+0x11c>)
 800dea0:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800dea4:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 800dea6:	4b2b      	ldr	r3, [pc, #172]	; (800df54 <low_level_init+0x11c>)
 800dea8:	2200      	movs	r2, #0
 800deaa:	611a      	str	r2, [r3, #16]

  /* End ETH HAL Init */

  /* Initialize the RX POOL */
  LWIP_MEMPOOL_INIT(RX_POOL);
 800deac:	482a      	ldr	r0, [pc, #168]	; (800df58 <low_level_init+0x120>)
 800deae:	f000 ff9d 	bl	800edec <memp_init_pool>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 800deb2:	687b      	ldr	r3, [r7, #4]
 800deb4:	2206      	movs	r2, #6
 800deb6:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 800deba:	4b22      	ldr	r3, [pc, #136]	; (800df44 <low_level_init+0x10c>)
 800debc:	685b      	ldr	r3, [r3, #4]
 800debe:	781a      	ldrb	r2, [r3, #0]
 800dec0:	687b      	ldr	r3, [r7, #4]
 800dec2:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 800dec6:	4b1f      	ldr	r3, [pc, #124]	; (800df44 <low_level_init+0x10c>)
 800dec8:	685b      	ldr	r3, [r3, #4]
 800deca:	785a      	ldrb	r2, [r3, #1]
 800decc:	687b      	ldr	r3, [r7, #4]
 800dece:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 800ded2:	4b1c      	ldr	r3, [pc, #112]	; (800df44 <low_level_init+0x10c>)
 800ded4:	685b      	ldr	r3, [r3, #4]
 800ded6:	789a      	ldrb	r2, [r3, #2]
 800ded8:	687b      	ldr	r3, [r7, #4]
 800deda:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 800dede:	4b19      	ldr	r3, [pc, #100]	; (800df44 <low_level_init+0x10c>)
 800dee0:	685b      	ldr	r3, [r3, #4]
 800dee2:	78da      	ldrb	r2, [r3, #3]
 800dee4:	687b      	ldr	r3, [r7, #4]
 800dee6:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 800deea:	4b16      	ldr	r3, [pc, #88]	; (800df44 <low_level_init+0x10c>)
 800deec:	685b      	ldr	r3, [r3, #4]
 800deee:	791a      	ldrb	r2, [r3, #4]
 800def0:	687b      	ldr	r3, [r7, #4]
 800def2:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 800def6:	4b13      	ldr	r3, [pc, #76]	; (800df44 <low_level_init+0x10c>)
 800def8:	685b      	ldr	r3, [r3, #4]
 800defa:	795a      	ldrb	r2, [r3, #5]
 800defc:	687b      	ldr	r3, [r7, #4]
 800defe:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b

  /* maximum transfer unit */
  netif->mtu = ETH_MAX_PAYLOAD;
 800df02:	687b      	ldr	r3, [r7, #4]
 800df04:	f240 52dc 	movw	r2, #1500	; 0x5dc
 800df08:	849a      	strh	r2, [r3, #36]	; 0x24

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 800df0a:	687b      	ldr	r3, [r7, #4]
 800df0c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800df10:	f043 030a 	orr.w	r3, r3, #10
 800df14:	b2da      	uxtb	r2, r3
 800df16:	687b      	ldr	r3, [r7, #4]
 800df18:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */
  /* Set PHY IO functions */
  LAN8742_RegisterBusIO(&LAN8742, &LAN8742_IOCtx);
 800df1c:	490f      	ldr	r1, [pc, #60]	; (800df5c <low_level_init+0x124>)
 800df1e:	4810      	ldr	r0, [pc, #64]	; (800df60 <low_level_init+0x128>)
 800df20:	f7f4 fd69 	bl	80029f6 <LAN8742_RegisterBusIO>

  /* Initialize the LAN8742 ETH PHY */
  LAN8742_Init(&LAN8742);
 800df24:	480e      	ldr	r0, [pc, #56]	; (800df60 <low_level_init+0x128>)
 800df26:	f7f4 fd98 	bl	8002a5a <LAN8742_Init>

  if (hal_eth_init_status == HAL_OK)
 800df2a:	7bfb      	ldrb	r3, [r7, #15]
 800df2c:	2b00      	cmp	r3, #0
 800df2e:	d103      	bne.n	800df38 <low_level_init+0x100>
  {
  /* Get link state */
  ethernet_link_check_state(netif);
 800df30:	6878      	ldr	r0, [r7, #4]
 800df32:	f000 fa05 	bl	800e340 <ethernet_link_check_state>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 800df36:	e001      	b.n	800df3c <low_level_init+0x104>
    Error_Handler();
 800df38:	f7f4 f832 	bl	8001fa0 <Error_Handler>
}
 800df3c:	bf00      	nop
 800df3e:	3710      	adds	r7, #16
 800df40:	46bd      	mov	sp, r7
 800df42:	bd80      	pop	{r7, pc}
 800df44:	20004fb4 	.word	0x20004fb4
 800df48:	40028000 	.word	0x40028000
 800df4c:	20000288 	.word	0x20000288
 800df50:	20000228 	.word	0x20000228
 800df54:	20005064 	.word	0x20005064
 800df58:	0801d874 	.word	0x0801d874
 800df5c:	20000040 	.word	0x20000040
 800df60:	2000509c 	.word	0x2000509c

0800df64 <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 800df64:	b580      	push	{r7, lr}
 800df66:	b092      	sub	sp, #72	; 0x48
 800df68:	af00      	add	r7, sp, #0
 800df6a:	6078      	str	r0, [r7, #4]
 800df6c:	6039      	str	r1, [r7, #0]
  uint32_t i = 0U;
 800df6e:	2300      	movs	r3, #0
 800df70:	647b      	str	r3, [r7, #68]	; 0x44
  struct pbuf *q = NULL;
 800df72:	2300      	movs	r3, #0
 800df74:	643b      	str	r3, [r7, #64]	; 0x40
  err_t errval = ERR_OK;
 800df76:	2300      	movs	r3, #0
 800df78:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  ETH_BufferTypeDef Txbuffer[ETH_TX_DESC_CNT] = {0};
 800df7c:	f107 030c 	add.w	r3, r7, #12
 800df80:	2230      	movs	r2, #48	; 0x30
 800df82:	2100      	movs	r1, #0
 800df84:	4618      	mov	r0, r3
 800df86:	f00a fea3 	bl	8018cd0 <memset>

  memset(Txbuffer, 0 , ETH_TX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 800df8a:	f107 030c 	add.w	r3, r7, #12
 800df8e:	2230      	movs	r2, #48	; 0x30
 800df90:	2100      	movs	r1, #0
 800df92:	4618      	mov	r0, r3
 800df94:	f00a fe9c 	bl	8018cd0 <memset>

  for(q = p; q != NULL; q = q->next)
 800df98:	683b      	ldr	r3, [r7, #0]
 800df9a:	643b      	str	r3, [r7, #64]	; 0x40
 800df9c:	e045      	b.n	800e02a <low_level_output+0xc6>
  {
    if(i >= ETH_TX_DESC_CNT)
 800df9e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800dfa0:	2b03      	cmp	r3, #3
 800dfa2:	d902      	bls.n	800dfaa <low_level_output+0x46>
      return ERR_IF;
 800dfa4:	f06f 030b 	mvn.w	r3, #11
 800dfa8:	e055      	b.n	800e056 <low_level_output+0xf2>

    Txbuffer[i].buffer = q->payload;
 800dfaa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800dfac:	6859      	ldr	r1, [r3, #4]
 800dfae:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800dfb0:	4613      	mov	r3, r2
 800dfb2:	005b      	lsls	r3, r3, #1
 800dfb4:	4413      	add	r3, r2
 800dfb6:	009b      	lsls	r3, r3, #2
 800dfb8:	3348      	adds	r3, #72	; 0x48
 800dfba:	443b      	add	r3, r7
 800dfbc:	3b3c      	subs	r3, #60	; 0x3c
 800dfbe:	6019      	str	r1, [r3, #0]
    Txbuffer[i].len = q->len;
 800dfc0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800dfc2:	895b      	ldrh	r3, [r3, #10]
 800dfc4:	4619      	mov	r1, r3
 800dfc6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800dfc8:	4613      	mov	r3, r2
 800dfca:	005b      	lsls	r3, r3, #1
 800dfcc:	4413      	add	r3, r2
 800dfce:	009b      	lsls	r3, r3, #2
 800dfd0:	3348      	adds	r3, #72	; 0x48
 800dfd2:	443b      	add	r3, r7
 800dfd4:	3b38      	subs	r3, #56	; 0x38
 800dfd6:	6019      	str	r1, [r3, #0]

    if(i>0)
 800dfd8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800dfda:	2b00      	cmp	r3, #0
 800dfdc:	d011      	beq.n	800e002 <low_level_output+0x9e>
    {
      Txbuffer[i-1].next = &Txbuffer[i];
 800dfde:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800dfe0:	1e5a      	subs	r2, r3, #1
 800dfe2:	f107 000c 	add.w	r0, r7, #12
 800dfe6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800dfe8:	460b      	mov	r3, r1
 800dfea:	005b      	lsls	r3, r3, #1
 800dfec:	440b      	add	r3, r1
 800dfee:	009b      	lsls	r3, r3, #2
 800dff0:	18c1      	adds	r1, r0, r3
 800dff2:	4613      	mov	r3, r2
 800dff4:	005b      	lsls	r3, r3, #1
 800dff6:	4413      	add	r3, r2
 800dff8:	009b      	lsls	r3, r3, #2
 800dffa:	3348      	adds	r3, #72	; 0x48
 800dffc:	443b      	add	r3, r7
 800dffe:	3b34      	subs	r3, #52	; 0x34
 800e000:	6019      	str	r1, [r3, #0]
    }

    if(q->next == NULL)
 800e002:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e004:	681b      	ldr	r3, [r3, #0]
 800e006:	2b00      	cmp	r3, #0
 800e008:	d109      	bne.n	800e01e <low_level_output+0xba>
    {
      Txbuffer[i].next = NULL;
 800e00a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800e00c:	4613      	mov	r3, r2
 800e00e:	005b      	lsls	r3, r3, #1
 800e010:	4413      	add	r3, r2
 800e012:	009b      	lsls	r3, r3, #2
 800e014:	3348      	adds	r3, #72	; 0x48
 800e016:	443b      	add	r3, r7
 800e018:	3b34      	subs	r3, #52	; 0x34
 800e01a:	2200      	movs	r2, #0
 800e01c:	601a      	str	r2, [r3, #0]
    }

    i++;
 800e01e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e020:	3301      	adds	r3, #1
 800e022:	647b      	str	r3, [r7, #68]	; 0x44
  for(q = p; q != NULL; q = q->next)
 800e024:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e026:	681b      	ldr	r3, [r3, #0]
 800e028:	643b      	str	r3, [r7, #64]	; 0x40
 800e02a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e02c:	2b00      	cmp	r3, #0
 800e02e:	d1b6      	bne.n	800df9e <low_level_output+0x3a>
  }

  TxConfig.Length = p->tot_len;
 800e030:	683b      	ldr	r3, [r7, #0]
 800e032:	891b      	ldrh	r3, [r3, #8]
 800e034:	461a      	mov	r2, r3
 800e036:	4b0a      	ldr	r3, [pc, #40]	; (800e060 <low_level_output+0xfc>)
 800e038:	605a      	str	r2, [r3, #4]
  TxConfig.TxBuffer = Txbuffer;
 800e03a:	4a09      	ldr	r2, [pc, #36]	; (800e060 <low_level_output+0xfc>)
 800e03c:	f107 030c 	add.w	r3, r7, #12
 800e040:	6093      	str	r3, [r2, #8]
  TxConfig.pData = p;
 800e042:	4a07      	ldr	r2, [pc, #28]	; (800e060 <low_level_output+0xfc>)
 800e044:	683b      	ldr	r3, [r7, #0]
 800e046:	6353      	str	r3, [r2, #52]	; 0x34

  HAL_ETH_Transmit(&heth, &TxConfig, ETH_DMA_TRANSMIT_TIMEOUT);
 800e048:	2214      	movs	r2, #20
 800e04a:	4905      	ldr	r1, [pc, #20]	; (800e060 <low_level_output+0xfc>)
 800e04c:	4805      	ldr	r0, [pc, #20]	; (800e064 <low_level_output+0x100>)
 800e04e:	f7f7 f903 	bl	8005258 <HAL_ETH_Transmit>

  return errval;
 800e052:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 800e056:	4618      	mov	r0, r3
 800e058:	3748      	adds	r7, #72	; 0x48
 800e05a:	46bd      	mov	sp, r7
 800e05c:	bd80      	pop	{r7, pc}
 800e05e:	bf00      	nop
 800e060:	20005064 	.word	0x20005064
 800e064:	20004fb4 	.word	0x20004fb4

0800e068 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 800e068:	b580      	push	{r7, lr}
 800e06a:	b082      	sub	sp, #8
 800e06c:	af00      	add	r7, sp, #0
 800e06e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 800e070:	687b      	ldr	r3, [r7, #4]
 800e072:	2b00      	cmp	r3, #0
 800e074:	d106      	bne.n	800e084 <ethernetif_init+0x1c>
 800e076:	4b0e      	ldr	r3, [pc, #56]	; (800e0b0 <ethernetif_init+0x48>)
 800e078:	f240 127b 	movw	r2, #379	; 0x17b
 800e07c:	490d      	ldr	r1, [pc, #52]	; (800e0b4 <ethernetif_init+0x4c>)
 800e07e:	480e      	ldr	r0, [pc, #56]	; (800e0b8 <ethernetif_init+0x50>)
 800e080:	f00a fcd0 	bl	8018a24 <iprintf>
   * The last argument should be replaced with your link speed, in units
   * of bits per second.
   */
  // MIB2_INIT_NETIF(netif, snmp_ifType_ethernet_csmacd, LINK_SPEED_OF_YOUR_NETIF_IN_BPS);

  netif->name[0] = IFNAME0;
 800e084:	687b      	ldr	r3, [r7, #4]
 800e086:	2273      	movs	r2, #115	; 0x73
 800e088:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  netif->name[1] = IFNAME1;
 800e08c:	687b      	ldr	r3, [r7, #4]
 800e08e:	2274      	movs	r2, #116	; 0x74
 800e090:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 800e094:	687b      	ldr	r3, [r7, #4]
 800e096:	4a09      	ldr	r2, [pc, #36]	; (800e0bc <ethernetif_init+0x54>)
 800e098:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 800e09a:	687b      	ldr	r3, [r7, #4]
 800e09c:	4a08      	ldr	r2, [pc, #32]	; (800e0c0 <ethernetif_init+0x58>)
 800e09e:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 800e0a0:	6878      	ldr	r0, [r7, #4]
 800e0a2:	f7ff fec9 	bl	800de38 <low_level_init>

  return ERR_OK;
 800e0a6:	2300      	movs	r3, #0
}
 800e0a8:	4618      	mov	r0, r3
 800e0aa:	3708      	adds	r7, #8
 800e0ac:	46bd      	mov	sp, r7
 800e0ae:	bd80      	pop	{r7, pc}
 800e0b0:	0801ae34 	.word	0x0801ae34
 800e0b4:	0801ae50 	.word	0x0801ae50
 800e0b8:	0801ae60 	.word	0x0801ae60
 800e0bc:	08016295 	.word	0x08016295
 800e0c0:	0800df65 	.word	0x0800df65

0800e0c4 <pbuf_free_custom>:
  * @brief  Custom Rx pbuf free callback
  * @param  pbuf: pbuf to be freed
  * @retval None
  */
void pbuf_free_custom(struct pbuf *p)
{
 800e0c4:	b580      	push	{r7, lr}
 800e0c6:	b084      	sub	sp, #16
 800e0c8:	af00      	add	r7, sp, #0
 800e0ca:	6078      	str	r0, [r7, #4]
  struct pbuf_custom* custom_pbuf = (struct pbuf_custom*)p;
 800e0cc:	687b      	ldr	r3, [r7, #4]
 800e0ce:	60fb      	str	r3, [r7, #12]
  LWIP_MEMPOOL_FREE(RX_POOL, custom_pbuf);
 800e0d0:	68f9      	ldr	r1, [r7, #12]
 800e0d2:	4807      	ldr	r0, [pc, #28]	; (800e0f0 <pbuf_free_custom+0x2c>)
 800e0d4:	f000 ff6c 	bl	800efb0 <memp_free_pool>

  /* If the Rx Buffer Pool was exhausted, signal the ethernetif_input task to
   * call HAL_ETH_GetRxDataBuffer to rebuild the Rx descriptors. */

  if (RxAllocStatus == RX_ALLOC_ERROR)
 800e0d8:	4b06      	ldr	r3, [pc, #24]	; (800e0f4 <pbuf_free_custom+0x30>)
 800e0da:	781b      	ldrb	r3, [r3, #0]
 800e0dc:	2b01      	cmp	r3, #1
 800e0de:	d102      	bne.n	800e0e6 <pbuf_free_custom+0x22>
  {
    RxAllocStatus = RX_ALLOC_OK;
 800e0e0:	4b04      	ldr	r3, [pc, #16]	; (800e0f4 <pbuf_free_custom+0x30>)
 800e0e2:	2200      	movs	r2, #0
 800e0e4:	701a      	strb	r2, [r3, #0]
  }
}
 800e0e6:	bf00      	nop
 800e0e8:	3710      	adds	r7, #16
 800e0ea:	46bd      	mov	sp, r7
 800e0ec:	bd80      	pop	{r7, pc}
 800e0ee:	bf00      	nop
 800e0f0:	0801d874 	.word	0x0801d874
 800e0f4:	20004fb0 	.word	0x20004fb0

0800e0f8 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Current Time value
*/
u32_t sys_now(void)
{
 800e0f8:	b580      	push	{r7, lr}
 800e0fa:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 800e0fc:	f7f4 fe62 	bl	8002dc4 <HAL_GetTick>
 800e100:	4603      	mov	r3, r0
}
 800e102:	4618      	mov	r0, r3
 800e104:	bd80      	pop	{r7, pc}
	...

0800e108 <HAL_ETH_MspInit>:
  * @param  ethHandle: ETH handle
  * @retval None
  */

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 800e108:	b580      	push	{r7, lr}
 800e10a:	b08e      	sub	sp, #56	; 0x38
 800e10c:	af00      	add	r7, sp, #0
 800e10e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800e110:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800e114:	2200      	movs	r2, #0
 800e116:	601a      	str	r2, [r3, #0]
 800e118:	605a      	str	r2, [r3, #4]
 800e11a:	609a      	str	r2, [r3, #8]
 800e11c:	60da      	str	r2, [r3, #12]
 800e11e:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 800e120:	687b      	ldr	r3, [r7, #4]
 800e122:	681b      	ldr	r3, [r3, #0]
 800e124:	4a59      	ldr	r2, [pc, #356]	; (800e28c <HAL_ETH_MspInit+0x184>)
 800e126:	4293      	cmp	r3, r2
 800e128:	f040 80ab 	bne.w	800e282 <HAL_ETH_MspInit+0x17a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 800e12c:	4b58      	ldr	r3, [pc, #352]	; (800e290 <HAL_ETH_MspInit+0x188>)
 800e12e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800e132:	4a57      	ldr	r2, [pc, #348]	; (800e290 <HAL_ETH_MspInit+0x188>)
 800e134:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800e138:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800e13c:	4b54      	ldr	r3, [pc, #336]	; (800e290 <HAL_ETH_MspInit+0x188>)
 800e13e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800e142:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800e146:	623b      	str	r3, [r7, #32]
 800e148:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 800e14a:	4b51      	ldr	r3, [pc, #324]	; (800e290 <HAL_ETH_MspInit+0x188>)
 800e14c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800e150:	4a4f      	ldr	r2, [pc, #316]	; (800e290 <HAL_ETH_MspInit+0x188>)
 800e152:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800e156:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800e15a:	4b4d      	ldr	r3, [pc, #308]	; (800e290 <HAL_ETH_MspInit+0x188>)
 800e15c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800e160:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800e164:	61fb      	str	r3, [r7, #28]
 800e166:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 800e168:	4b49      	ldr	r3, [pc, #292]	; (800e290 <HAL_ETH_MspInit+0x188>)
 800e16a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800e16e:	4a48      	ldr	r2, [pc, #288]	; (800e290 <HAL_ETH_MspInit+0x188>)
 800e170:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800e174:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800e178:	4b45      	ldr	r3, [pc, #276]	; (800e290 <HAL_ETH_MspInit+0x188>)
 800e17a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800e17e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800e182:	61bb      	str	r3, [r7, #24]
 800e184:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800e186:	4b42      	ldr	r3, [pc, #264]	; (800e290 <HAL_ETH_MspInit+0x188>)
 800e188:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800e18c:	4a40      	ldr	r2, [pc, #256]	; (800e290 <HAL_ETH_MspInit+0x188>)
 800e18e:	f043 0304 	orr.w	r3, r3, #4
 800e192:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800e196:	4b3e      	ldr	r3, [pc, #248]	; (800e290 <HAL_ETH_MspInit+0x188>)
 800e198:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800e19c:	f003 0304 	and.w	r3, r3, #4
 800e1a0:	617b      	str	r3, [r7, #20]
 800e1a2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800e1a4:	4b3a      	ldr	r3, [pc, #232]	; (800e290 <HAL_ETH_MspInit+0x188>)
 800e1a6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800e1aa:	4a39      	ldr	r2, [pc, #228]	; (800e290 <HAL_ETH_MspInit+0x188>)
 800e1ac:	f043 0301 	orr.w	r3, r3, #1
 800e1b0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800e1b4:	4b36      	ldr	r3, [pc, #216]	; (800e290 <HAL_ETH_MspInit+0x188>)
 800e1b6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800e1ba:	f003 0301 	and.w	r3, r3, #1
 800e1be:	613b      	str	r3, [r7, #16]
 800e1c0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800e1c2:	4b33      	ldr	r3, [pc, #204]	; (800e290 <HAL_ETH_MspInit+0x188>)
 800e1c4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800e1c8:	4a31      	ldr	r2, [pc, #196]	; (800e290 <HAL_ETH_MspInit+0x188>)
 800e1ca:	f043 0302 	orr.w	r3, r3, #2
 800e1ce:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800e1d2:	4b2f      	ldr	r3, [pc, #188]	; (800e290 <HAL_ETH_MspInit+0x188>)
 800e1d4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800e1d8:	f003 0302 	and.w	r3, r3, #2
 800e1dc:	60fb      	str	r3, [r7, #12]
 800e1de:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800e1e0:	4b2b      	ldr	r3, [pc, #172]	; (800e290 <HAL_ETH_MspInit+0x188>)
 800e1e2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800e1e6:	4a2a      	ldr	r2, [pc, #168]	; (800e290 <HAL_ETH_MspInit+0x188>)
 800e1e8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e1ec:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800e1f0:	4b27      	ldr	r3, [pc, #156]	; (800e290 <HAL_ETH_MspInit+0x188>)
 800e1f2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800e1f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e1fa:	60bb      	str	r3, [r7, #8]
 800e1fc:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 800e1fe:	2332      	movs	r3, #50	; 0x32
 800e200:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e202:	2302      	movs	r3, #2
 800e204:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e206:	2300      	movs	r3, #0
 800e208:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800e20a:	2300      	movs	r3, #0
 800e20c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800e20e:	230b      	movs	r3, #11
 800e210:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800e212:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800e216:	4619      	mov	r1, r3
 800e218:	481e      	ldr	r0, [pc, #120]	; (800e294 <HAL_ETH_MspInit+0x18c>)
 800e21a:	f7f8 f985 	bl	8006528 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 800e21e:	2386      	movs	r3, #134	; 0x86
 800e220:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e222:	2302      	movs	r3, #2
 800e224:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e226:	2300      	movs	r3, #0
 800e228:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800e22a:	2300      	movs	r3, #0
 800e22c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800e22e:	230b      	movs	r3, #11
 800e230:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800e232:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800e236:	4619      	mov	r1, r3
 800e238:	4817      	ldr	r0, [pc, #92]	; (800e298 <HAL_ETH_MspInit+0x190>)
 800e23a:	f7f8 f975 	bl	8006528 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 800e23e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800e242:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e244:	2302      	movs	r3, #2
 800e246:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e248:	2300      	movs	r3, #0
 800e24a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800e24c:	2300      	movs	r3, #0
 800e24e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800e250:	230b      	movs	r3, #11
 800e252:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800e254:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800e258:	4619      	mov	r1, r3
 800e25a:	4810      	ldr	r0, [pc, #64]	; (800e29c <HAL_ETH_MspInit+0x194>)
 800e25c:	f7f8 f964 	bl	8006528 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 800e260:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800e264:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e266:	2302      	movs	r3, #2
 800e268:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e26a:	2300      	movs	r3, #0
 800e26c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800e26e:	2300      	movs	r3, #0
 800e270:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800e272:	230b      	movs	r3, #11
 800e274:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800e276:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800e27a:	4619      	mov	r1, r3
 800e27c:	4808      	ldr	r0, [pc, #32]	; (800e2a0 <HAL_ETH_MspInit+0x198>)
 800e27e:	f7f8 f953 	bl	8006528 <HAL_GPIO_Init>

  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 800e282:	bf00      	nop
 800e284:	3738      	adds	r7, #56	; 0x38
 800e286:	46bd      	mov	sp, r7
 800e288:	bd80      	pop	{r7, pc}
 800e28a:	bf00      	nop
 800e28c:	40028000 	.word	0x40028000
 800e290:	58024400 	.word	0x58024400
 800e294:	58020800 	.word	0x58020800
 800e298:	58020000 	.word	0x58020000
 800e29c:	58020400 	.word	0x58020400
 800e2a0:	58021800 	.word	0x58021800

0800e2a4 <ETH_PHY_IO_Init>:
  * @brief  Initializes the MDIO interface GPIO and clocks.
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_Init(void)
{
 800e2a4:	b580      	push	{r7, lr}
 800e2a6:	af00      	add	r7, sp, #0
  /* We assume that MDIO GPIO configuration is already done
     in the ETH_MspInit() else it should be done here
  */

  /* Configure the MDIO Clock */
  HAL_ETH_SetMDIOClockRange(&heth);
 800e2a8:	4802      	ldr	r0, [pc, #8]	; (800e2b4 <ETH_PHY_IO_Init+0x10>)
 800e2aa:	f7f7 fb71 	bl	8005990 <HAL_ETH_SetMDIOClockRange>

  return 0;
 800e2ae:	2300      	movs	r3, #0
}
 800e2b0:	4618      	mov	r0, r3
 800e2b2:	bd80      	pop	{r7, pc}
 800e2b4:	20004fb4 	.word	0x20004fb4

0800e2b8 <ETH_PHY_IO_DeInit>:
  * @brief  De-Initializes the MDIO interface .
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_DeInit (void)
{
 800e2b8:	b480      	push	{r7}
 800e2ba:	af00      	add	r7, sp, #0
  return 0;
 800e2bc:	2300      	movs	r3, #0
}
 800e2be:	4618      	mov	r0, r3
 800e2c0:	46bd      	mov	sp, r7
 800e2c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2c6:	4770      	bx	lr

0800e2c8 <ETH_PHY_IO_ReadReg>:
  * @param  RegAddr: PHY register address
  * @param  pRegVal: pointer to hold the register value
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_ReadReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t *pRegVal)
{
 800e2c8:	b580      	push	{r7, lr}
 800e2ca:	b084      	sub	sp, #16
 800e2cc:	af00      	add	r7, sp, #0
 800e2ce:	60f8      	str	r0, [r7, #12]
 800e2d0:	60b9      	str	r1, [r7, #8]
 800e2d2:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_ReadPHYRegister(&heth, DevAddr, RegAddr, pRegVal) != HAL_OK)
 800e2d4:	687b      	ldr	r3, [r7, #4]
 800e2d6:	68ba      	ldr	r2, [r7, #8]
 800e2d8:	68f9      	ldr	r1, [r7, #12]
 800e2da:	4807      	ldr	r0, [pc, #28]	; (800e2f8 <ETH_PHY_IO_ReadReg+0x30>)
 800e2dc:	f7f7 f8c1 	bl	8005462 <HAL_ETH_ReadPHYRegister>
 800e2e0:	4603      	mov	r3, r0
 800e2e2:	2b00      	cmp	r3, #0
 800e2e4:	d002      	beq.n	800e2ec <ETH_PHY_IO_ReadReg+0x24>
  {
    return -1;
 800e2e6:	f04f 33ff 	mov.w	r3, #4294967295
 800e2ea:	e000      	b.n	800e2ee <ETH_PHY_IO_ReadReg+0x26>
  }

  return 0;
 800e2ec:	2300      	movs	r3, #0
}
 800e2ee:	4618      	mov	r0, r3
 800e2f0:	3710      	adds	r7, #16
 800e2f2:	46bd      	mov	sp, r7
 800e2f4:	bd80      	pop	{r7, pc}
 800e2f6:	bf00      	nop
 800e2f8:	20004fb4 	.word	0x20004fb4

0800e2fc <ETH_PHY_IO_WriteReg>:
  * @param  RegAddr: PHY register address
  * @param  RegVal: Value to be written
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_WriteReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t RegVal)
{
 800e2fc:	b580      	push	{r7, lr}
 800e2fe:	b084      	sub	sp, #16
 800e300:	af00      	add	r7, sp, #0
 800e302:	60f8      	str	r0, [r7, #12]
 800e304:	60b9      	str	r1, [r7, #8]
 800e306:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_WritePHYRegister(&heth, DevAddr, RegAddr, RegVal) != HAL_OK)
 800e308:	687b      	ldr	r3, [r7, #4]
 800e30a:	68ba      	ldr	r2, [r7, #8]
 800e30c:	68f9      	ldr	r1, [r7, #12]
 800e30e:	4807      	ldr	r0, [pc, #28]	; (800e32c <ETH_PHY_IO_WriteReg+0x30>)
 800e310:	f7f7 f8fc 	bl	800550c <HAL_ETH_WritePHYRegister>
 800e314:	4603      	mov	r3, r0
 800e316:	2b00      	cmp	r3, #0
 800e318:	d002      	beq.n	800e320 <ETH_PHY_IO_WriteReg+0x24>
  {
    return -1;
 800e31a:	f04f 33ff 	mov.w	r3, #4294967295
 800e31e:	e000      	b.n	800e322 <ETH_PHY_IO_WriteReg+0x26>
  }

  return 0;
 800e320:	2300      	movs	r3, #0
}
 800e322:	4618      	mov	r0, r3
 800e324:	3710      	adds	r7, #16
 800e326:	46bd      	mov	sp, r7
 800e328:	bd80      	pop	{r7, pc}
 800e32a:	bf00      	nop
 800e32c:	20004fb4 	.word	0x20004fb4

0800e330 <ETH_PHY_IO_GetTick>:
/**
  * @brief  Get the time in millisecons used for internal PHY driver process.
  * @retval Time value
  */
int32_t ETH_PHY_IO_GetTick(void)
{
 800e330:	b580      	push	{r7, lr}
 800e332:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 800e334:	f7f4 fd46 	bl	8002dc4 <HAL_GetTick>
 800e338:	4603      	mov	r3, r0
}
 800e33a:	4618      	mov	r0, r3
 800e33c:	bd80      	pop	{r7, pc}
	...

0800e340 <ethernet_link_check_state>:
/**
  * @brief  Check the ETH link state then update ETH driver and netif link accordingly.
  * @retval None
  */
void ethernet_link_check_state(struct netif *netif)
{
 800e340:	b580      	push	{r7, lr}
 800e342:	b0a0      	sub	sp, #128	; 0x80
 800e344:	af00      	add	r7, sp, #0
 800e346:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef MACConf = {0};
 800e348:	f107 030c 	add.w	r3, r7, #12
 800e34c:	2264      	movs	r2, #100	; 0x64
 800e34e:	2100      	movs	r1, #0
 800e350:	4618      	mov	r0, r3
 800e352:	f00a fcbd 	bl	8018cd0 <memset>
  int32_t PHYLinkState = 0;
 800e356:	2300      	movs	r3, #0
 800e358:	673b      	str	r3, [r7, #112]	; 0x70
  uint32_t linkchanged = 0U, speed = 0U, duplex = 0U;
 800e35a:	2300      	movs	r3, #0
 800e35c:	67fb      	str	r3, [r7, #124]	; 0x7c
 800e35e:	2300      	movs	r3, #0
 800e360:	67bb      	str	r3, [r7, #120]	; 0x78
 800e362:	2300      	movs	r3, #0
 800e364:	677b      	str	r3, [r7, #116]	; 0x74

  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 800e366:	483a      	ldr	r0, [pc, #232]	; (800e450 <ethernet_link_check_state+0x110>)
 800e368:	f7f4 fc1f 	bl	8002baa <LAN8742_GetLinkState>
 800e36c:	6738      	str	r0, [r7, #112]	; 0x70

  if(netif_is_link_up(netif) && (PHYLinkState <= LAN8742_STATUS_LINK_DOWN))
 800e36e:	687b      	ldr	r3, [r7, #4]
 800e370:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800e374:	089b      	lsrs	r3, r3, #2
 800e376:	f003 0301 	and.w	r3, r3, #1
 800e37a:	b2db      	uxtb	r3, r3
 800e37c:	2b00      	cmp	r3, #0
 800e37e:	d00c      	beq.n	800e39a <ethernet_link_check_state+0x5a>
 800e380:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800e382:	2b01      	cmp	r3, #1
 800e384:	dc09      	bgt.n	800e39a <ethernet_link_check_state+0x5a>
  {
    HAL_ETH_Stop(&heth);
 800e386:	4833      	ldr	r0, [pc, #204]	; (800e454 <ethernet_link_check_state+0x114>)
 800e388:	f7f6 ff16 	bl	80051b8 <HAL_ETH_Stop>
    netif_set_down(netif);
 800e38c:	6878      	ldr	r0, [r7, #4]
 800e38e:	f001 f893 	bl	800f4b8 <netif_set_down>
    netif_set_link_down(netif);
 800e392:	6878      	ldr	r0, [r7, #4]
 800e394:	f001 f8f6 	bl	800f584 <netif_set_link_down>
      netif_set_up(netif);
      netif_set_link_up(netif);
    }
  }

}
 800e398:	e055      	b.n	800e446 <ethernet_link_check_state+0x106>
  else if(!netif_is_link_up(netif) && (PHYLinkState > LAN8742_STATUS_LINK_DOWN))
 800e39a:	687b      	ldr	r3, [r7, #4]
 800e39c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800e3a0:	f003 0304 	and.w	r3, r3, #4
 800e3a4:	2b00      	cmp	r3, #0
 800e3a6:	d14e      	bne.n	800e446 <ethernet_link_check_state+0x106>
 800e3a8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800e3aa:	2b01      	cmp	r3, #1
 800e3ac:	dd4b      	ble.n	800e446 <ethernet_link_check_state+0x106>
    switch (PHYLinkState)
 800e3ae:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800e3b0:	3b02      	subs	r3, #2
 800e3b2:	2b03      	cmp	r3, #3
 800e3b4:	d82a      	bhi.n	800e40c <ethernet_link_check_state+0xcc>
 800e3b6:	a201      	add	r2, pc, #4	; (adr r2, 800e3bc <ethernet_link_check_state+0x7c>)
 800e3b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e3bc:	0800e3cd 	.word	0x0800e3cd
 800e3c0:	0800e3df 	.word	0x0800e3df
 800e3c4:	0800e3ef 	.word	0x0800e3ef
 800e3c8:	0800e3ff 	.word	0x0800e3ff
      duplex = ETH_FULLDUPLEX_MODE;
 800e3cc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800e3d0:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_100M;
 800e3d2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800e3d6:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 800e3d8:	2301      	movs	r3, #1
 800e3da:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 800e3dc:	e017      	b.n	800e40e <ethernet_link_check_state+0xce>
      duplex = ETH_HALFDUPLEX_MODE;
 800e3de:	2300      	movs	r3, #0
 800e3e0:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_100M;
 800e3e2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800e3e6:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 800e3e8:	2301      	movs	r3, #1
 800e3ea:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 800e3ec:	e00f      	b.n	800e40e <ethernet_link_check_state+0xce>
      duplex = ETH_FULLDUPLEX_MODE;
 800e3ee:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800e3f2:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_10M;
 800e3f4:	2300      	movs	r3, #0
 800e3f6:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 800e3f8:	2301      	movs	r3, #1
 800e3fa:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 800e3fc:	e007      	b.n	800e40e <ethernet_link_check_state+0xce>
      duplex = ETH_HALFDUPLEX_MODE;
 800e3fe:	2300      	movs	r3, #0
 800e400:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_10M;
 800e402:	2300      	movs	r3, #0
 800e404:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 800e406:	2301      	movs	r3, #1
 800e408:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 800e40a:	e000      	b.n	800e40e <ethernet_link_check_state+0xce>
      break;
 800e40c:	bf00      	nop
    if(linkchanged)
 800e40e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800e410:	2b00      	cmp	r3, #0
 800e412:	d018      	beq.n	800e446 <ethernet_link_check_state+0x106>
      HAL_ETH_GetMACConfig(&heth, &MACConf);
 800e414:	f107 030c 	add.w	r3, r7, #12
 800e418:	4619      	mov	r1, r3
 800e41a:	480e      	ldr	r0, [pc, #56]	; (800e454 <ethernet_link_check_state+0x114>)
 800e41c:	f7f7 f8ca 	bl	80055b4 <HAL_ETH_GetMACConfig>
      MACConf.DuplexMode = duplex;
 800e420:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800e422:	627b      	str	r3, [r7, #36]	; 0x24
      MACConf.Speed = speed;
 800e424:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800e426:	623b      	str	r3, [r7, #32]
      HAL_ETH_SetMACConfig(&heth, &MACConf);
 800e428:	f107 030c 	add.w	r3, r7, #12
 800e42c:	4619      	mov	r1, r3
 800e42e:	4809      	ldr	r0, [pc, #36]	; (800e454 <ethernet_link_check_state+0x114>)
 800e430:	f7f7 fa94 	bl	800595c <HAL_ETH_SetMACConfig>
      HAL_ETH_Start(&heth);
 800e434:	4807      	ldr	r0, [pc, #28]	; (800e454 <ethernet_link_check_state+0x114>)
 800e436:	f7f6 fe5d 	bl	80050f4 <HAL_ETH_Start>
      netif_set_up(netif);
 800e43a:	6878      	ldr	r0, [r7, #4]
 800e43c:	f000 ffd0 	bl	800f3e0 <netif_set_up>
      netif_set_link_up(netif);
 800e440:	6878      	ldr	r0, [r7, #4]
 800e442:	f001 f86b 	bl	800f51c <netif_set_link_up>
}
 800e446:	bf00      	nop
 800e448:	3780      	adds	r7, #128	; 0x80
 800e44a:	46bd      	mov	sp, r7
 800e44c:	bd80      	pop	{r7, pc}
 800e44e:	bf00      	nop
 800e450:	2000509c 	.word	0x2000509c
 800e454:	20004fb4 	.word	0x20004fb4

0800e458 <HAL_ETH_RxAllocateCallback>:

void HAL_ETH_RxAllocateCallback(uint8_t **buff)
{
 800e458:	b580      	push	{r7, lr}
 800e45a:	b086      	sub	sp, #24
 800e45c:	af02      	add	r7, sp, #8
 800e45e:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH RxAllocateCallback */
  struct pbuf_custom *p = LWIP_MEMPOOL_ALLOC(RX_POOL);
 800e460:	4812      	ldr	r0, [pc, #72]	; (800e4ac <HAL_ETH_RxAllocateCallback+0x54>)
 800e462:	f000 fd37 	bl	800eed4 <memp_malloc_pool>
 800e466:	60f8      	str	r0, [r7, #12]
  if (p)
 800e468:	68fb      	ldr	r3, [r7, #12]
 800e46a:	2b00      	cmp	r3, #0
 800e46c:	d014      	beq.n	800e498 <HAL_ETH_RxAllocateCallback+0x40>
  {
    /* Get the buff from the struct pbuf address. */
    *buff = (uint8_t *)p + offsetof(RxBuff_t, buff);
 800e46e:	68fb      	ldr	r3, [r7, #12]
 800e470:	f103 0220 	add.w	r2, r3, #32
 800e474:	687b      	ldr	r3, [r7, #4]
 800e476:	601a      	str	r2, [r3, #0]
    p->custom_free_function = pbuf_free_custom;
 800e478:	68fb      	ldr	r3, [r7, #12]
 800e47a:	4a0d      	ldr	r2, [pc, #52]	; (800e4b0 <HAL_ETH_RxAllocateCallback+0x58>)
 800e47c:	611a      	str	r2, [r3, #16]
    /* Initialize the struct pbuf.
    * This must be performed whenever a buffer's allocated because it may be
    * changed by lwIP or the app, e.g., pbuf_free decrements ref. */
    pbuf_alloced_custom(PBUF_RAW, 0, PBUF_REF, p, *buff, ETH_RX_BUFFER_SIZE);
 800e47e:	687b      	ldr	r3, [r7, #4]
 800e480:	681b      	ldr	r3, [r3, #0]
 800e482:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 800e486:	9201      	str	r2, [sp, #4]
 800e488:	9300      	str	r3, [sp, #0]
 800e48a:	68fb      	ldr	r3, [r7, #12]
 800e48c:	2241      	movs	r2, #65	; 0x41
 800e48e:	2100      	movs	r1, #0
 800e490:	2000      	movs	r0, #0
 800e492:	f001 fa4d 	bl	800f930 <pbuf_alloced_custom>
  {
    RxAllocStatus = RX_ALLOC_ERROR;
    *buff = NULL;
  }
/* USER CODE END HAL ETH RxAllocateCallback */
}
 800e496:	e005      	b.n	800e4a4 <HAL_ETH_RxAllocateCallback+0x4c>
    RxAllocStatus = RX_ALLOC_ERROR;
 800e498:	4b06      	ldr	r3, [pc, #24]	; (800e4b4 <HAL_ETH_RxAllocateCallback+0x5c>)
 800e49a:	2201      	movs	r2, #1
 800e49c:	701a      	strb	r2, [r3, #0]
    *buff = NULL;
 800e49e:	687b      	ldr	r3, [r7, #4]
 800e4a0:	2200      	movs	r2, #0
 800e4a2:	601a      	str	r2, [r3, #0]
}
 800e4a4:	bf00      	nop
 800e4a6:	3710      	adds	r7, #16
 800e4a8:	46bd      	mov	sp, r7
 800e4aa:	bd80      	pop	{r7, pc}
 800e4ac:	0801d874 	.word	0x0801d874
 800e4b0:	0800e0c5 	.word	0x0800e0c5
 800e4b4:	20004fb0 	.word	0x20004fb0

0800e4b8 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 800e4b8:	b480      	push	{r7}
 800e4ba:	b083      	sub	sp, #12
 800e4bc:	af00      	add	r7, sp, #0
 800e4be:	4603      	mov	r3, r0
 800e4c0:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 800e4c2:	88fb      	ldrh	r3, [r7, #6]
 800e4c4:	021b      	lsls	r3, r3, #8
 800e4c6:	b21a      	sxth	r2, r3
 800e4c8:	88fb      	ldrh	r3, [r7, #6]
 800e4ca:	0a1b      	lsrs	r3, r3, #8
 800e4cc:	b29b      	uxth	r3, r3
 800e4ce:	b21b      	sxth	r3, r3
 800e4d0:	4313      	orrs	r3, r2
 800e4d2:	b21b      	sxth	r3, r3
 800e4d4:	b29b      	uxth	r3, r3
}
 800e4d6:	4618      	mov	r0, r3
 800e4d8:	370c      	adds	r7, #12
 800e4da:	46bd      	mov	sp, r7
 800e4dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4e0:	4770      	bx	lr

0800e4e2 <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 800e4e2:	b480      	push	{r7}
 800e4e4:	b083      	sub	sp, #12
 800e4e6:	af00      	add	r7, sp, #0
 800e4e8:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 800e4ea:	687b      	ldr	r3, [r7, #4]
 800e4ec:	061a      	lsls	r2, r3, #24
 800e4ee:	687b      	ldr	r3, [r7, #4]
 800e4f0:	021b      	lsls	r3, r3, #8
 800e4f2:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800e4f6:	431a      	orrs	r2, r3
 800e4f8:	687b      	ldr	r3, [r7, #4]
 800e4fa:	0a1b      	lsrs	r3, r3, #8
 800e4fc:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800e500:	431a      	orrs	r2, r3
 800e502:	687b      	ldr	r3, [r7, #4]
 800e504:	0e1b      	lsrs	r3, r3, #24
 800e506:	4313      	orrs	r3, r2
}
 800e508:	4618      	mov	r0, r3
 800e50a:	370c      	adds	r7, #12
 800e50c:	46bd      	mov	sp, r7
 800e50e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e512:	4770      	bx	lr

0800e514 <lwip_standard_chksum>:
 * @param len length of data to be summed
 * @return host order (!) lwip checksum (non-inverted Internet sum)
 */
u16_t
lwip_standard_chksum(const void *dataptr, int len)
{
 800e514:	b480      	push	{r7}
 800e516:	b089      	sub	sp, #36	; 0x24
 800e518:	af00      	add	r7, sp, #0
 800e51a:	6078      	str	r0, [r7, #4]
 800e51c:	6039      	str	r1, [r7, #0]
  const u8_t *pb = (const u8_t *)dataptr;
 800e51e:	687b      	ldr	r3, [r7, #4]
 800e520:	61fb      	str	r3, [r7, #28]
  const u16_t *ps;
  u16_t t = 0;
 800e522:	2300      	movs	r3, #0
 800e524:	81fb      	strh	r3, [r7, #14]
  u32_t sum = 0;
 800e526:	2300      	movs	r3, #0
 800e528:	617b      	str	r3, [r7, #20]
  int odd = ((mem_ptr_t)pb & 1);
 800e52a:	69fb      	ldr	r3, [r7, #28]
 800e52c:	f003 0301 	and.w	r3, r3, #1
 800e530:	613b      	str	r3, [r7, #16]

  /* Get aligned to u16_t */
  if (odd && len > 0) {
 800e532:	693b      	ldr	r3, [r7, #16]
 800e534:	2b00      	cmp	r3, #0
 800e536:	d00d      	beq.n	800e554 <lwip_standard_chksum+0x40>
 800e538:	683b      	ldr	r3, [r7, #0]
 800e53a:	2b00      	cmp	r3, #0
 800e53c:	dd0a      	ble.n	800e554 <lwip_standard_chksum+0x40>
    ((u8_t *)&t)[1] = *pb++;
 800e53e:	69fa      	ldr	r2, [r7, #28]
 800e540:	1c53      	adds	r3, r2, #1
 800e542:	61fb      	str	r3, [r7, #28]
 800e544:	f107 030e 	add.w	r3, r7, #14
 800e548:	3301      	adds	r3, #1
 800e54a:	7812      	ldrb	r2, [r2, #0]
 800e54c:	701a      	strb	r2, [r3, #0]
    len--;
 800e54e:	683b      	ldr	r3, [r7, #0]
 800e550:	3b01      	subs	r3, #1
 800e552:	603b      	str	r3, [r7, #0]
  }

  /* Add the bulk of the data */
  ps = (const u16_t *)(const void *)pb;
 800e554:	69fb      	ldr	r3, [r7, #28]
 800e556:	61bb      	str	r3, [r7, #24]
  while (len > 1) {
 800e558:	e00a      	b.n	800e570 <lwip_standard_chksum+0x5c>
    sum += *ps++;
 800e55a:	69bb      	ldr	r3, [r7, #24]
 800e55c:	1c9a      	adds	r2, r3, #2
 800e55e:	61ba      	str	r2, [r7, #24]
 800e560:	881b      	ldrh	r3, [r3, #0]
 800e562:	461a      	mov	r2, r3
 800e564:	697b      	ldr	r3, [r7, #20]
 800e566:	4413      	add	r3, r2
 800e568:	617b      	str	r3, [r7, #20]
    len -= 2;
 800e56a:	683b      	ldr	r3, [r7, #0]
 800e56c:	3b02      	subs	r3, #2
 800e56e:	603b      	str	r3, [r7, #0]
  while (len > 1) {
 800e570:	683b      	ldr	r3, [r7, #0]
 800e572:	2b01      	cmp	r3, #1
 800e574:	dcf1      	bgt.n	800e55a <lwip_standard_chksum+0x46>
  }

  /* Consume left-over byte, if any */
  if (len > 0) {
 800e576:	683b      	ldr	r3, [r7, #0]
 800e578:	2b00      	cmp	r3, #0
 800e57a:	dd04      	ble.n	800e586 <lwip_standard_chksum+0x72>
    ((u8_t *)&t)[0] = *(const u8_t *)ps;
 800e57c:	f107 030e 	add.w	r3, r7, #14
 800e580:	69ba      	ldr	r2, [r7, #24]
 800e582:	7812      	ldrb	r2, [r2, #0]
 800e584:	701a      	strb	r2, [r3, #0]
  }

  /* Add end bytes */
  sum += t;
 800e586:	89fb      	ldrh	r3, [r7, #14]
 800e588:	461a      	mov	r2, r3
 800e58a:	697b      	ldr	r3, [r7, #20]
 800e58c:	4413      	add	r3, r2
 800e58e:	617b      	str	r3, [r7, #20]

  /* Fold 32-bit sum to 16 bits
     calling this twice is probably faster than if statements... */
  sum = FOLD_U32T(sum);
 800e590:	697b      	ldr	r3, [r7, #20]
 800e592:	0c1a      	lsrs	r2, r3, #16
 800e594:	697b      	ldr	r3, [r7, #20]
 800e596:	b29b      	uxth	r3, r3
 800e598:	4413      	add	r3, r2
 800e59a:	617b      	str	r3, [r7, #20]
  sum = FOLD_U32T(sum);
 800e59c:	697b      	ldr	r3, [r7, #20]
 800e59e:	0c1a      	lsrs	r2, r3, #16
 800e5a0:	697b      	ldr	r3, [r7, #20]
 800e5a2:	b29b      	uxth	r3, r3
 800e5a4:	4413      	add	r3, r2
 800e5a6:	617b      	str	r3, [r7, #20]

  /* Swap if alignment was odd */
  if (odd) {
 800e5a8:	693b      	ldr	r3, [r7, #16]
 800e5aa:	2b00      	cmp	r3, #0
 800e5ac:	d007      	beq.n	800e5be <lwip_standard_chksum+0xaa>
    sum = SWAP_BYTES_IN_WORD(sum);
 800e5ae:	697b      	ldr	r3, [r7, #20]
 800e5b0:	021b      	lsls	r3, r3, #8
 800e5b2:	b29a      	uxth	r2, r3
 800e5b4:	697b      	ldr	r3, [r7, #20]
 800e5b6:	0a1b      	lsrs	r3, r3, #8
 800e5b8:	b2db      	uxtb	r3, r3
 800e5ba:	4313      	orrs	r3, r2
 800e5bc:	617b      	str	r3, [r7, #20]
  }

  return (u16_t)sum;
 800e5be:	697b      	ldr	r3, [r7, #20]
 800e5c0:	b29b      	uxth	r3, r3
}
 800e5c2:	4618      	mov	r0, r3
 800e5c4:	3724      	adds	r7, #36	; 0x24
 800e5c6:	46bd      	mov	sp, r7
 800e5c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5cc:	4770      	bx	lr

0800e5ce <inet_chksum>:
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */

u16_t
inet_chksum(const void *dataptr, u16_t len)
{
 800e5ce:	b580      	push	{r7, lr}
 800e5d0:	b082      	sub	sp, #8
 800e5d2:	af00      	add	r7, sp, #0
 800e5d4:	6078      	str	r0, [r7, #4]
 800e5d6:	460b      	mov	r3, r1
 800e5d8:	807b      	strh	r3, [r7, #2]
  return (u16_t)~(unsigned int)LWIP_CHKSUM(dataptr, len);
 800e5da:	887b      	ldrh	r3, [r7, #2]
 800e5dc:	4619      	mov	r1, r3
 800e5de:	6878      	ldr	r0, [r7, #4]
 800e5e0:	f7ff ff98 	bl	800e514 <lwip_standard_chksum>
 800e5e4:	4603      	mov	r3, r0
 800e5e6:	43db      	mvns	r3, r3
 800e5e8:	b29b      	uxth	r3, r3
}
 800e5ea:	4618      	mov	r0, r3
 800e5ec:	3708      	adds	r7, #8
 800e5ee:	46bd      	mov	sp, r7
 800e5f0:	bd80      	pop	{r7, pc}

0800e5f2 <inet_chksum_pbuf>:
 * @param p pbuf chain over that the checksum should be calculated
 * @return checksum (as u16_t) to be saved directly in the protocol header
 */
u16_t
inet_chksum_pbuf(struct pbuf *p)
{
 800e5f2:	b580      	push	{r7, lr}
 800e5f4:	b086      	sub	sp, #24
 800e5f6:	af00      	add	r7, sp, #0
 800e5f8:	6078      	str	r0, [r7, #4]
  u32_t acc;
  struct pbuf *q;
  int swapped = 0;
 800e5fa:	2300      	movs	r3, #0
 800e5fc:	60fb      	str	r3, [r7, #12]

  acc = 0;
 800e5fe:	2300      	movs	r3, #0
 800e600:	617b      	str	r3, [r7, #20]
  for (q = p; q != NULL; q = q->next) {
 800e602:	687b      	ldr	r3, [r7, #4]
 800e604:	613b      	str	r3, [r7, #16]
 800e606:	e02b      	b.n	800e660 <inet_chksum_pbuf+0x6e>
    acc += LWIP_CHKSUM(q->payload, q->len);
 800e608:	693b      	ldr	r3, [r7, #16]
 800e60a:	685a      	ldr	r2, [r3, #4]
 800e60c:	693b      	ldr	r3, [r7, #16]
 800e60e:	895b      	ldrh	r3, [r3, #10]
 800e610:	4619      	mov	r1, r3
 800e612:	4610      	mov	r0, r2
 800e614:	f7ff ff7e 	bl	800e514 <lwip_standard_chksum>
 800e618:	4603      	mov	r3, r0
 800e61a:	461a      	mov	r2, r3
 800e61c:	697b      	ldr	r3, [r7, #20]
 800e61e:	4413      	add	r3, r2
 800e620:	617b      	str	r3, [r7, #20]
    acc = FOLD_U32T(acc);
 800e622:	697b      	ldr	r3, [r7, #20]
 800e624:	0c1a      	lsrs	r2, r3, #16
 800e626:	697b      	ldr	r3, [r7, #20]
 800e628:	b29b      	uxth	r3, r3
 800e62a:	4413      	add	r3, r2
 800e62c:	617b      	str	r3, [r7, #20]
    if (q->len % 2 != 0) {
 800e62e:	693b      	ldr	r3, [r7, #16]
 800e630:	895b      	ldrh	r3, [r3, #10]
 800e632:	f003 0301 	and.w	r3, r3, #1
 800e636:	b29b      	uxth	r3, r3
 800e638:	2b00      	cmp	r3, #0
 800e63a:	d00e      	beq.n	800e65a <inet_chksum_pbuf+0x68>
      swapped = !swapped;
 800e63c:	68fb      	ldr	r3, [r7, #12]
 800e63e:	2b00      	cmp	r3, #0
 800e640:	bf0c      	ite	eq
 800e642:	2301      	moveq	r3, #1
 800e644:	2300      	movne	r3, #0
 800e646:	b2db      	uxtb	r3, r3
 800e648:	60fb      	str	r3, [r7, #12]
      acc = SWAP_BYTES_IN_WORD(acc);
 800e64a:	697b      	ldr	r3, [r7, #20]
 800e64c:	021b      	lsls	r3, r3, #8
 800e64e:	b29a      	uxth	r2, r3
 800e650:	697b      	ldr	r3, [r7, #20]
 800e652:	0a1b      	lsrs	r3, r3, #8
 800e654:	b2db      	uxtb	r3, r3
 800e656:	4313      	orrs	r3, r2
 800e658:	617b      	str	r3, [r7, #20]
  for (q = p; q != NULL; q = q->next) {
 800e65a:	693b      	ldr	r3, [r7, #16]
 800e65c:	681b      	ldr	r3, [r3, #0]
 800e65e:	613b      	str	r3, [r7, #16]
 800e660:	693b      	ldr	r3, [r7, #16]
 800e662:	2b00      	cmp	r3, #0
 800e664:	d1d0      	bne.n	800e608 <inet_chksum_pbuf+0x16>
    }
  }

  if (swapped) {
 800e666:	68fb      	ldr	r3, [r7, #12]
 800e668:	2b00      	cmp	r3, #0
 800e66a:	d007      	beq.n	800e67c <inet_chksum_pbuf+0x8a>
    acc = SWAP_BYTES_IN_WORD(acc);
 800e66c:	697b      	ldr	r3, [r7, #20]
 800e66e:	021b      	lsls	r3, r3, #8
 800e670:	b29a      	uxth	r2, r3
 800e672:	697b      	ldr	r3, [r7, #20]
 800e674:	0a1b      	lsrs	r3, r3, #8
 800e676:	b2db      	uxtb	r3, r3
 800e678:	4313      	orrs	r3, r2
 800e67a:	617b      	str	r3, [r7, #20]
  }
  return (u16_t)~(acc & 0xffffUL);
 800e67c:	697b      	ldr	r3, [r7, #20]
 800e67e:	b29b      	uxth	r3, r3
 800e680:	43db      	mvns	r3, r3
 800e682:	b29b      	uxth	r3, r3
}
 800e684:	4618      	mov	r0, r3
 800e686:	3718      	adds	r7, #24
 800e688:	46bd      	mov	sp, r7
 800e68a:	bd80      	pop	{r7, pc}

0800e68c <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 800e68c:	b580      	push	{r7, lr}
 800e68e:	b082      	sub	sp, #8
 800e690:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 800e692:	2300      	movs	r3, #0
 800e694:	607b      	str	r3, [r7, #4]
  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
#endif /* !NO_SYS */
  mem_init();
 800e696:	f000 f8d5 	bl	800e844 <mem_init>
  memp_init();
 800e69a:	f000 fbd7 	bl	800ee4c <memp_init>
  pbuf_init();
  netif_init();
 800e69e:	f000 fcd5 	bl	800f04c <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 800e6a2:	f006 fff1 	bl	8015688 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 800e6a6:	f001 fd8b 	bl	80101c0 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 800e6aa:	f006 ffa5 	bl	80155f8 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 800e6ae:	bf00      	nop
 800e6b0:	3708      	adds	r7, #8
 800e6b2:	46bd      	mov	sp, r7
 800e6b4:	bd80      	pop	{r7, pc}
	...

0800e6b8 <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 800e6b8:	b480      	push	{r7}
 800e6ba:	b083      	sub	sp, #12
 800e6bc:	af00      	add	r7, sp, #0
 800e6be:	4603      	mov	r3, r0
 800e6c0:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 800e6c2:	4b05      	ldr	r3, [pc, #20]	; (800e6d8 <ptr_to_mem+0x20>)
 800e6c4:	681a      	ldr	r2, [r3, #0]
 800e6c6:	88fb      	ldrh	r3, [r7, #6]
 800e6c8:	4413      	add	r3, r2
}
 800e6ca:	4618      	mov	r0, r3
 800e6cc:	370c      	adds	r7, #12
 800e6ce:	46bd      	mov	sp, r7
 800e6d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6d4:	4770      	bx	lr
 800e6d6:	bf00      	nop
 800e6d8:	200050d4 	.word	0x200050d4

0800e6dc <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 800e6dc:	b480      	push	{r7}
 800e6de:	b083      	sub	sp, #12
 800e6e0:	af00      	add	r7, sp, #0
 800e6e2:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 800e6e4:	4b05      	ldr	r3, [pc, #20]	; (800e6fc <mem_to_ptr+0x20>)
 800e6e6:	681b      	ldr	r3, [r3, #0]
 800e6e8:	687a      	ldr	r2, [r7, #4]
 800e6ea:	1ad3      	subs	r3, r2, r3
 800e6ec:	b29b      	uxth	r3, r3
}
 800e6ee:	4618      	mov	r0, r3
 800e6f0:	370c      	adds	r7, #12
 800e6f2:	46bd      	mov	sp, r7
 800e6f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6f8:	4770      	bx	lr
 800e6fa:	bf00      	nop
 800e6fc:	200050d4 	.word	0x200050d4

0800e700 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 800e700:	b590      	push	{r4, r7, lr}
 800e702:	b085      	sub	sp, #20
 800e704:	af00      	add	r7, sp, #0
 800e706:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 800e708:	4b45      	ldr	r3, [pc, #276]	; (800e820 <plug_holes+0x120>)
 800e70a:	681b      	ldr	r3, [r3, #0]
 800e70c:	687a      	ldr	r2, [r7, #4]
 800e70e:	429a      	cmp	r2, r3
 800e710:	d206      	bcs.n	800e720 <plug_holes+0x20>
 800e712:	4b44      	ldr	r3, [pc, #272]	; (800e824 <plug_holes+0x124>)
 800e714:	f240 12df 	movw	r2, #479	; 0x1df
 800e718:	4943      	ldr	r1, [pc, #268]	; (800e828 <plug_holes+0x128>)
 800e71a:	4844      	ldr	r0, [pc, #272]	; (800e82c <plug_holes+0x12c>)
 800e71c:	f00a f982 	bl	8018a24 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 800e720:	4b43      	ldr	r3, [pc, #268]	; (800e830 <plug_holes+0x130>)
 800e722:	681b      	ldr	r3, [r3, #0]
 800e724:	687a      	ldr	r2, [r7, #4]
 800e726:	429a      	cmp	r2, r3
 800e728:	d306      	bcc.n	800e738 <plug_holes+0x38>
 800e72a:	4b3e      	ldr	r3, [pc, #248]	; (800e824 <plug_holes+0x124>)
 800e72c:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800e730:	4940      	ldr	r1, [pc, #256]	; (800e834 <plug_holes+0x134>)
 800e732:	483e      	ldr	r0, [pc, #248]	; (800e82c <plug_holes+0x12c>)
 800e734:	f00a f976 	bl	8018a24 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 800e738:	687b      	ldr	r3, [r7, #4]
 800e73a:	791b      	ldrb	r3, [r3, #4]
 800e73c:	2b00      	cmp	r3, #0
 800e73e:	d006      	beq.n	800e74e <plug_holes+0x4e>
 800e740:	4b38      	ldr	r3, [pc, #224]	; (800e824 <plug_holes+0x124>)
 800e742:	f240 12e1 	movw	r2, #481	; 0x1e1
 800e746:	493c      	ldr	r1, [pc, #240]	; (800e838 <plug_holes+0x138>)
 800e748:	4838      	ldr	r0, [pc, #224]	; (800e82c <plug_holes+0x12c>)
 800e74a:	f00a f96b 	bl	8018a24 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 800e74e:	687b      	ldr	r3, [r7, #4]
 800e750:	881b      	ldrh	r3, [r3, #0]
 800e752:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800e756:	d906      	bls.n	800e766 <plug_holes+0x66>
 800e758:	4b32      	ldr	r3, [pc, #200]	; (800e824 <plug_holes+0x124>)
 800e75a:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 800e75e:	4937      	ldr	r1, [pc, #220]	; (800e83c <plug_holes+0x13c>)
 800e760:	4832      	ldr	r0, [pc, #200]	; (800e82c <plug_holes+0x12c>)
 800e762:	f00a f95f 	bl	8018a24 <iprintf>

  nmem = ptr_to_mem(mem->next);
 800e766:	687b      	ldr	r3, [r7, #4]
 800e768:	881b      	ldrh	r3, [r3, #0]
 800e76a:	4618      	mov	r0, r3
 800e76c:	f7ff ffa4 	bl	800e6b8 <ptr_to_mem>
 800e770:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 800e772:	687a      	ldr	r2, [r7, #4]
 800e774:	68fb      	ldr	r3, [r7, #12]
 800e776:	429a      	cmp	r2, r3
 800e778:	d024      	beq.n	800e7c4 <plug_holes+0xc4>
 800e77a:	68fb      	ldr	r3, [r7, #12]
 800e77c:	791b      	ldrb	r3, [r3, #4]
 800e77e:	2b00      	cmp	r3, #0
 800e780:	d120      	bne.n	800e7c4 <plug_holes+0xc4>
 800e782:	4b2b      	ldr	r3, [pc, #172]	; (800e830 <plug_holes+0x130>)
 800e784:	681b      	ldr	r3, [r3, #0]
 800e786:	68fa      	ldr	r2, [r7, #12]
 800e788:	429a      	cmp	r2, r3
 800e78a:	d01b      	beq.n	800e7c4 <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 800e78c:	4b2c      	ldr	r3, [pc, #176]	; (800e840 <plug_holes+0x140>)
 800e78e:	681b      	ldr	r3, [r3, #0]
 800e790:	68fa      	ldr	r2, [r7, #12]
 800e792:	429a      	cmp	r2, r3
 800e794:	d102      	bne.n	800e79c <plug_holes+0x9c>
      lfree = mem;
 800e796:	4a2a      	ldr	r2, [pc, #168]	; (800e840 <plug_holes+0x140>)
 800e798:	687b      	ldr	r3, [r7, #4]
 800e79a:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 800e79c:	68fb      	ldr	r3, [r7, #12]
 800e79e:	881a      	ldrh	r2, [r3, #0]
 800e7a0:	687b      	ldr	r3, [r7, #4]
 800e7a2:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 800e7a4:	68fb      	ldr	r3, [r7, #12]
 800e7a6:	881b      	ldrh	r3, [r3, #0]
 800e7a8:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800e7ac:	d00a      	beq.n	800e7c4 <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 800e7ae:	68fb      	ldr	r3, [r7, #12]
 800e7b0:	881b      	ldrh	r3, [r3, #0]
 800e7b2:	4618      	mov	r0, r3
 800e7b4:	f7ff ff80 	bl	800e6b8 <ptr_to_mem>
 800e7b8:	4604      	mov	r4, r0
 800e7ba:	6878      	ldr	r0, [r7, #4]
 800e7bc:	f7ff ff8e 	bl	800e6dc <mem_to_ptr>
 800e7c0:	4603      	mov	r3, r0
 800e7c2:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 800e7c4:	687b      	ldr	r3, [r7, #4]
 800e7c6:	885b      	ldrh	r3, [r3, #2]
 800e7c8:	4618      	mov	r0, r3
 800e7ca:	f7ff ff75 	bl	800e6b8 <ptr_to_mem>
 800e7ce:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 800e7d0:	68ba      	ldr	r2, [r7, #8]
 800e7d2:	687b      	ldr	r3, [r7, #4]
 800e7d4:	429a      	cmp	r2, r3
 800e7d6:	d01f      	beq.n	800e818 <plug_holes+0x118>
 800e7d8:	68bb      	ldr	r3, [r7, #8]
 800e7da:	791b      	ldrb	r3, [r3, #4]
 800e7dc:	2b00      	cmp	r3, #0
 800e7de:	d11b      	bne.n	800e818 <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 800e7e0:	4b17      	ldr	r3, [pc, #92]	; (800e840 <plug_holes+0x140>)
 800e7e2:	681b      	ldr	r3, [r3, #0]
 800e7e4:	687a      	ldr	r2, [r7, #4]
 800e7e6:	429a      	cmp	r2, r3
 800e7e8:	d102      	bne.n	800e7f0 <plug_holes+0xf0>
      lfree = pmem;
 800e7ea:	4a15      	ldr	r2, [pc, #84]	; (800e840 <plug_holes+0x140>)
 800e7ec:	68bb      	ldr	r3, [r7, #8]
 800e7ee:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 800e7f0:	687b      	ldr	r3, [r7, #4]
 800e7f2:	881a      	ldrh	r2, [r3, #0]
 800e7f4:	68bb      	ldr	r3, [r7, #8]
 800e7f6:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 800e7f8:	687b      	ldr	r3, [r7, #4]
 800e7fa:	881b      	ldrh	r3, [r3, #0]
 800e7fc:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800e800:	d00a      	beq.n	800e818 <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 800e802:	687b      	ldr	r3, [r7, #4]
 800e804:	881b      	ldrh	r3, [r3, #0]
 800e806:	4618      	mov	r0, r3
 800e808:	f7ff ff56 	bl	800e6b8 <ptr_to_mem>
 800e80c:	4604      	mov	r4, r0
 800e80e:	68b8      	ldr	r0, [r7, #8]
 800e810:	f7ff ff64 	bl	800e6dc <mem_to_ptr>
 800e814:	4603      	mov	r3, r0
 800e816:	8063      	strh	r3, [r4, #2]
    }
  }
}
 800e818:	bf00      	nop
 800e81a:	3714      	adds	r7, #20
 800e81c:	46bd      	mov	sp, r7
 800e81e:	bd90      	pop	{r4, r7, pc}
 800e820:	200050d4 	.word	0x200050d4
 800e824:	0801ae88 	.word	0x0801ae88
 800e828:	0801aeb8 	.word	0x0801aeb8
 800e82c:	0801aed0 	.word	0x0801aed0
 800e830:	200050d8 	.word	0x200050d8
 800e834:	0801aef8 	.word	0x0801aef8
 800e838:	0801af14 	.word	0x0801af14
 800e83c:	0801af30 	.word	0x0801af30
 800e840:	200050dc 	.word	0x200050dc

0800e844 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 800e844:	b580      	push	{r7, lr}
 800e846:	b082      	sub	sp, #8
 800e848:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 800e84a:	4b16      	ldr	r3, [pc, #88]	; (800e8a4 <mem_init+0x60>)
 800e84c:	4a16      	ldr	r2, [pc, #88]	; (800e8a8 <mem_init+0x64>)
 800e84e:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 800e850:	4b14      	ldr	r3, [pc, #80]	; (800e8a4 <mem_init+0x60>)
 800e852:	681b      	ldr	r3, [r3, #0]
 800e854:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 800e856:	687b      	ldr	r3, [r7, #4]
 800e858:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800e85c:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 800e85e:	687b      	ldr	r3, [r7, #4]
 800e860:	2200      	movs	r2, #0
 800e862:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 800e864:	687b      	ldr	r3, [r7, #4]
 800e866:	2200      	movs	r2, #0
 800e868:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 800e86a:	f44f 60c8 	mov.w	r0, #1600	; 0x640
 800e86e:	f7ff ff23 	bl	800e6b8 <ptr_to_mem>
 800e872:	4603      	mov	r3, r0
 800e874:	4a0d      	ldr	r2, [pc, #52]	; (800e8ac <mem_init+0x68>)
 800e876:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 800e878:	4b0c      	ldr	r3, [pc, #48]	; (800e8ac <mem_init+0x68>)
 800e87a:	681b      	ldr	r3, [r3, #0]
 800e87c:	2201      	movs	r2, #1
 800e87e:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 800e880:	4b0a      	ldr	r3, [pc, #40]	; (800e8ac <mem_init+0x68>)
 800e882:	681b      	ldr	r3, [r3, #0]
 800e884:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800e888:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 800e88a:	4b08      	ldr	r3, [pc, #32]	; (800e8ac <mem_init+0x68>)
 800e88c:	681b      	ldr	r3, [r3, #0]
 800e88e:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800e892:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 800e894:	4b03      	ldr	r3, [pc, #12]	; (800e8a4 <mem_init+0x60>)
 800e896:	681b      	ldr	r3, [r3, #0]
 800e898:	4a05      	ldr	r2, [pc, #20]	; (800e8b0 <mem_init+0x6c>)
 800e89a:	6013      	str	r3, [r2, #0]
  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
    LWIP_ASSERT("failed to create mem_mutex", 0);
  }
}
 800e89c:	bf00      	nop
 800e89e:	3708      	adds	r7, #8
 800e8a0:	46bd      	mov	sp, r7
 800e8a2:	bd80      	pop	{r7, pc}
 800e8a4:	200050d4 	.word	0x200050d4
 800e8a8:	30044000 	.word	0x30044000
 800e8ac:	200050d8 	.word	0x200050d8
 800e8b0:	200050dc 	.word	0x200050dc

0800e8b4 <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 800e8b4:	b580      	push	{r7, lr}
 800e8b6:	b086      	sub	sp, #24
 800e8b8:	af00      	add	r7, sp, #0
 800e8ba:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 800e8bc:	6878      	ldr	r0, [r7, #4]
 800e8be:	f7ff ff0d 	bl	800e6dc <mem_to_ptr>
 800e8c2:	4603      	mov	r3, r0
 800e8c4:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 800e8c6:	687b      	ldr	r3, [r7, #4]
 800e8c8:	881b      	ldrh	r3, [r3, #0]
 800e8ca:	4618      	mov	r0, r3
 800e8cc:	f7ff fef4 	bl	800e6b8 <ptr_to_mem>
 800e8d0:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 800e8d2:	687b      	ldr	r3, [r7, #4]
 800e8d4:	885b      	ldrh	r3, [r3, #2]
 800e8d6:	4618      	mov	r0, r3
 800e8d8:	f7ff feee 	bl	800e6b8 <ptr_to_mem>
 800e8dc:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800e8de:	687b      	ldr	r3, [r7, #4]
 800e8e0:	881b      	ldrh	r3, [r3, #0]
 800e8e2:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800e8e6:	d818      	bhi.n	800e91a <mem_link_valid+0x66>
 800e8e8:	687b      	ldr	r3, [r7, #4]
 800e8ea:	885b      	ldrh	r3, [r3, #2]
 800e8ec:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800e8f0:	d813      	bhi.n	800e91a <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800e8f2:	687b      	ldr	r3, [r7, #4]
 800e8f4:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800e8f6:	8afa      	ldrh	r2, [r7, #22]
 800e8f8:	429a      	cmp	r2, r3
 800e8fa:	d004      	beq.n	800e906 <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800e8fc:	68fb      	ldr	r3, [r7, #12]
 800e8fe:	881b      	ldrh	r3, [r3, #0]
 800e900:	8afa      	ldrh	r2, [r7, #22]
 800e902:	429a      	cmp	r2, r3
 800e904:	d109      	bne.n	800e91a <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800e906:	4b08      	ldr	r3, [pc, #32]	; (800e928 <mem_link_valid+0x74>)
 800e908:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800e90a:	693a      	ldr	r2, [r7, #16]
 800e90c:	429a      	cmp	r2, r3
 800e90e:	d006      	beq.n	800e91e <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800e910:	693b      	ldr	r3, [r7, #16]
 800e912:	885b      	ldrh	r3, [r3, #2]
 800e914:	8afa      	ldrh	r2, [r7, #22]
 800e916:	429a      	cmp	r2, r3
 800e918:	d001      	beq.n	800e91e <mem_link_valid+0x6a>
    return 0;
 800e91a:	2300      	movs	r3, #0
 800e91c:	e000      	b.n	800e920 <mem_link_valid+0x6c>
  }
  return 1;
 800e91e:	2301      	movs	r3, #1
}
 800e920:	4618      	mov	r0, r3
 800e922:	3718      	adds	r7, #24
 800e924:	46bd      	mov	sp, r7
 800e926:	bd80      	pop	{r7, pc}
 800e928:	200050d8 	.word	0x200050d8

0800e92c <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 800e92c:	b580      	push	{r7, lr}
 800e92e:	b084      	sub	sp, #16
 800e930:	af00      	add	r7, sp, #0
 800e932:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 800e934:	687b      	ldr	r3, [r7, #4]
 800e936:	2b00      	cmp	r3, #0
 800e938:	d04c      	beq.n	800e9d4 <mem_free+0xa8>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 800e93a:	687b      	ldr	r3, [r7, #4]
 800e93c:	f003 0303 	and.w	r3, r3, #3
 800e940:	2b00      	cmp	r3, #0
 800e942:	d007      	beq.n	800e954 <mem_free+0x28>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 800e944:	4b25      	ldr	r3, [pc, #148]	; (800e9dc <mem_free+0xb0>)
 800e946:	f240 2273 	movw	r2, #627	; 0x273
 800e94a:	4925      	ldr	r1, [pc, #148]	; (800e9e0 <mem_free+0xb4>)
 800e94c:	4825      	ldr	r0, [pc, #148]	; (800e9e4 <mem_free+0xb8>)
 800e94e:	f00a f869 	bl	8018a24 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 800e952:	e040      	b.n	800e9d6 <mem_free+0xaa>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800e954:	687b      	ldr	r3, [r7, #4]
 800e956:	3b08      	subs	r3, #8
 800e958:	60fb      	str	r3, [r7, #12]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 800e95a:	4b23      	ldr	r3, [pc, #140]	; (800e9e8 <mem_free+0xbc>)
 800e95c:	681b      	ldr	r3, [r3, #0]
 800e95e:	68fa      	ldr	r2, [r7, #12]
 800e960:	429a      	cmp	r2, r3
 800e962:	d306      	bcc.n	800e972 <mem_free+0x46>
 800e964:	687b      	ldr	r3, [r7, #4]
 800e966:	f103 020c 	add.w	r2, r3, #12
 800e96a:	4b20      	ldr	r3, [pc, #128]	; (800e9ec <mem_free+0xc0>)
 800e96c:	681b      	ldr	r3, [r3, #0]
 800e96e:	429a      	cmp	r2, r3
 800e970:	d907      	bls.n	800e982 <mem_free+0x56>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 800e972:	4b1a      	ldr	r3, [pc, #104]	; (800e9dc <mem_free+0xb0>)
 800e974:	f240 227f 	movw	r2, #639	; 0x27f
 800e978:	491d      	ldr	r1, [pc, #116]	; (800e9f0 <mem_free+0xc4>)
 800e97a:	481a      	ldr	r0, [pc, #104]	; (800e9e4 <mem_free+0xb8>)
 800e97c:	f00a f852 	bl	8018a24 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 800e980:	e029      	b.n	800e9d6 <mem_free+0xaa>
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
  /* mem has to be in a used state */
  if (!mem->used) {
 800e982:	68fb      	ldr	r3, [r7, #12]
 800e984:	791b      	ldrb	r3, [r3, #4]
 800e986:	2b00      	cmp	r3, #0
 800e988:	d107      	bne.n	800e99a <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 800e98a:	4b14      	ldr	r3, [pc, #80]	; (800e9dc <mem_free+0xb0>)
 800e98c:	f44f 7223 	mov.w	r2, #652	; 0x28c
 800e990:	4918      	ldr	r1, [pc, #96]	; (800e9f4 <mem_free+0xc8>)
 800e992:	4814      	ldr	r0, [pc, #80]	; (800e9e4 <mem_free+0xb8>)
 800e994:	f00a f846 	bl	8018a24 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 800e998:	e01d      	b.n	800e9d6 <mem_free+0xaa>
  }

  if (!mem_link_valid(mem)) {
 800e99a:	68f8      	ldr	r0, [r7, #12]
 800e99c:	f7ff ff8a 	bl	800e8b4 <mem_link_valid>
 800e9a0:	4603      	mov	r3, r0
 800e9a2:	2b00      	cmp	r3, #0
 800e9a4:	d107      	bne.n	800e9b6 <mem_free+0x8a>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 800e9a6:	4b0d      	ldr	r3, [pc, #52]	; (800e9dc <mem_free+0xb0>)
 800e9a8:	f240 2295 	movw	r2, #661	; 0x295
 800e9ac:	4912      	ldr	r1, [pc, #72]	; (800e9f8 <mem_free+0xcc>)
 800e9ae:	480d      	ldr	r0, [pc, #52]	; (800e9e4 <mem_free+0xb8>)
 800e9b0:	f00a f838 	bl	8018a24 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return;
 800e9b4:	e00f      	b.n	800e9d6 <mem_free+0xaa>
  }

  /* mem is now unused. */
  mem->used = 0;
 800e9b6:	68fb      	ldr	r3, [r7, #12]
 800e9b8:	2200      	movs	r2, #0
 800e9ba:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 800e9bc:	4b0f      	ldr	r3, [pc, #60]	; (800e9fc <mem_free+0xd0>)
 800e9be:	681b      	ldr	r3, [r3, #0]
 800e9c0:	68fa      	ldr	r2, [r7, #12]
 800e9c2:	429a      	cmp	r2, r3
 800e9c4:	d202      	bcs.n	800e9cc <mem_free+0xa0>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 800e9c6:	4a0d      	ldr	r2, [pc, #52]	; (800e9fc <mem_free+0xd0>)
 800e9c8:	68fb      	ldr	r3, [r7, #12]
 800e9ca:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 800e9cc:	68f8      	ldr	r0, [r7, #12]
 800e9ce:	f7ff fe97 	bl	800e700 <plug_holes>
 800e9d2:	e000      	b.n	800e9d6 <mem_free+0xaa>
    return;
 800e9d4:	bf00      	nop
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
}
 800e9d6:	3710      	adds	r7, #16
 800e9d8:	46bd      	mov	sp, r7
 800e9da:	bd80      	pop	{r7, pc}
 800e9dc:	0801ae88 	.word	0x0801ae88
 800e9e0:	0801af5c 	.word	0x0801af5c
 800e9e4:	0801aed0 	.word	0x0801aed0
 800e9e8:	200050d4 	.word	0x200050d4
 800e9ec:	200050d8 	.word	0x200050d8
 800e9f0:	0801af80 	.word	0x0801af80
 800e9f4:	0801af9c 	.word	0x0801af9c
 800e9f8:	0801afc4 	.word	0x0801afc4
 800e9fc:	200050dc 	.word	0x200050dc

0800ea00 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 800ea00:	b580      	push	{r7, lr}
 800ea02:	b088      	sub	sp, #32
 800ea04:	af00      	add	r7, sp, #0
 800ea06:	6078      	str	r0, [r7, #4]
 800ea08:	460b      	mov	r3, r1
 800ea0a:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 800ea0c:	887b      	ldrh	r3, [r7, #2]
 800ea0e:	3303      	adds	r3, #3
 800ea10:	b29b      	uxth	r3, r3
 800ea12:	f023 0303 	bic.w	r3, r3, #3
 800ea16:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 800ea18:	8bfb      	ldrh	r3, [r7, #30]
 800ea1a:	2b0b      	cmp	r3, #11
 800ea1c:	d801      	bhi.n	800ea22 <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 800ea1e:	230c      	movs	r3, #12
 800ea20:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 800ea22:	8bfb      	ldrh	r3, [r7, #30]
 800ea24:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800ea28:	d803      	bhi.n	800ea32 <mem_trim+0x32>
 800ea2a:	8bfa      	ldrh	r2, [r7, #30]
 800ea2c:	887b      	ldrh	r3, [r7, #2]
 800ea2e:	429a      	cmp	r2, r3
 800ea30:	d201      	bcs.n	800ea36 <mem_trim+0x36>
    return NULL;
 800ea32:	2300      	movs	r3, #0
 800ea34:	e0cc      	b.n	800ebd0 <mem_trim+0x1d0>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 800ea36:	4b68      	ldr	r3, [pc, #416]	; (800ebd8 <mem_trim+0x1d8>)
 800ea38:	681b      	ldr	r3, [r3, #0]
 800ea3a:	687a      	ldr	r2, [r7, #4]
 800ea3c:	429a      	cmp	r2, r3
 800ea3e:	d304      	bcc.n	800ea4a <mem_trim+0x4a>
 800ea40:	4b66      	ldr	r3, [pc, #408]	; (800ebdc <mem_trim+0x1dc>)
 800ea42:	681b      	ldr	r3, [r3, #0]
 800ea44:	687a      	ldr	r2, [r7, #4]
 800ea46:	429a      	cmp	r2, r3
 800ea48:	d306      	bcc.n	800ea58 <mem_trim+0x58>
 800ea4a:	4b65      	ldr	r3, [pc, #404]	; (800ebe0 <mem_trim+0x1e0>)
 800ea4c:	f240 22d1 	movw	r2, #721	; 0x2d1
 800ea50:	4964      	ldr	r1, [pc, #400]	; (800ebe4 <mem_trim+0x1e4>)
 800ea52:	4865      	ldr	r0, [pc, #404]	; (800ebe8 <mem_trim+0x1e8>)
 800ea54:	f009 ffe6 	bl	8018a24 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 800ea58:	4b5f      	ldr	r3, [pc, #380]	; (800ebd8 <mem_trim+0x1d8>)
 800ea5a:	681b      	ldr	r3, [r3, #0]
 800ea5c:	687a      	ldr	r2, [r7, #4]
 800ea5e:	429a      	cmp	r2, r3
 800ea60:	d304      	bcc.n	800ea6c <mem_trim+0x6c>
 800ea62:	4b5e      	ldr	r3, [pc, #376]	; (800ebdc <mem_trim+0x1dc>)
 800ea64:	681b      	ldr	r3, [r3, #0]
 800ea66:	687a      	ldr	r2, [r7, #4]
 800ea68:	429a      	cmp	r2, r3
 800ea6a:	d301      	bcc.n	800ea70 <mem_trim+0x70>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
    return rmem;
 800ea6c:	687b      	ldr	r3, [r7, #4]
 800ea6e:	e0af      	b.n	800ebd0 <mem_trim+0x1d0>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800ea70:	687b      	ldr	r3, [r7, #4]
 800ea72:	3b08      	subs	r3, #8
 800ea74:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 800ea76:	69b8      	ldr	r0, [r7, #24]
 800ea78:	f7ff fe30 	bl	800e6dc <mem_to_ptr>
 800ea7c:	4603      	mov	r3, r0
 800ea7e:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 800ea80:	69bb      	ldr	r3, [r7, #24]
 800ea82:	881a      	ldrh	r2, [r3, #0]
 800ea84:	8afb      	ldrh	r3, [r7, #22]
 800ea86:	1ad3      	subs	r3, r2, r3
 800ea88:	b29b      	uxth	r3, r3
 800ea8a:	3b08      	subs	r3, #8
 800ea8c:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 800ea8e:	8bfa      	ldrh	r2, [r7, #30]
 800ea90:	8abb      	ldrh	r3, [r7, #20]
 800ea92:	429a      	cmp	r2, r3
 800ea94:	d906      	bls.n	800eaa4 <mem_trim+0xa4>
 800ea96:	4b52      	ldr	r3, [pc, #328]	; (800ebe0 <mem_trim+0x1e0>)
 800ea98:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 800ea9c:	4953      	ldr	r1, [pc, #332]	; (800ebec <mem_trim+0x1ec>)
 800ea9e:	4852      	ldr	r0, [pc, #328]	; (800ebe8 <mem_trim+0x1e8>)
 800eaa0:	f009 ffc0 	bl	8018a24 <iprintf>
  if (newsize > size) {
 800eaa4:	8bfa      	ldrh	r2, [r7, #30]
 800eaa6:	8abb      	ldrh	r3, [r7, #20]
 800eaa8:	429a      	cmp	r2, r3
 800eaaa:	d901      	bls.n	800eab0 <mem_trim+0xb0>
    /* not supported */
    return NULL;
 800eaac:	2300      	movs	r3, #0
 800eaae:	e08f      	b.n	800ebd0 <mem_trim+0x1d0>
  }
  if (newsize == size) {
 800eab0:	8bfa      	ldrh	r2, [r7, #30]
 800eab2:	8abb      	ldrh	r3, [r7, #20]
 800eab4:	429a      	cmp	r2, r3
 800eab6:	d101      	bne.n	800eabc <mem_trim+0xbc>
    /* No change in size, simply return */
    return rmem;
 800eab8:	687b      	ldr	r3, [r7, #4]
 800eaba:	e089      	b.n	800ebd0 <mem_trim+0x1d0>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();

  mem2 = ptr_to_mem(mem->next);
 800eabc:	69bb      	ldr	r3, [r7, #24]
 800eabe:	881b      	ldrh	r3, [r3, #0]
 800eac0:	4618      	mov	r0, r3
 800eac2:	f7ff fdf9 	bl	800e6b8 <ptr_to_mem>
 800eac6:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 800eac8:	693b      	ldr	r3, [r7, #16]
 800eaca:	791b      	ldrb	r3, [r3, #4]
 800eacc:	2b00      	cmp	r3, #0
 800eace:	d13f      	bne.n	800eb50 <mem_trim+0x150>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800ead0:	69bb      	ldr	r3, [r7, #24]
 800ead2:	881b      	ldrh	r3, [r3, #0]
 800ead4:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800ead8:	d106      	bne.n	800eae8 <mem_trim+0xe8>
 800eada:	4b41      	ldr	r3, [pc, #260]	; (800ebe0 <mem_trim+0x1e0>)
 800eadc:	f240 22f5 	movw	r2, #757	; 0x2f5
 800eae0:	4943      	ldr	r1, [pc, #268]	; (800ebf0 <mem_trim+0x1f0>)
 800eae2:	4841      	ldr	r0, [pc, #260]	; (800ebe8 <mem_trim+0x1e8>)
 800eae4:	f009 ff9e 	bl	8018a24 <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 800eae8:	693b      	ldr	r3, [r7, #16]
 800eaea:	881b      	ldrh	r3, [r3, #0]
 800eaec:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800eaee:	8afa      	ldrh	r2, [r7, #22]
 800eaf0:	8bfb      	ldrh	r3, [r7, #30]
 800eaf2:	4413      	add	r3, r2
 800eaf4:	b29b      	uxth	r3, r3
 800eaf6:	3308      	adds	r3, #8
 800eaf8:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 800eafa:	4b3e      	ldr	r3, [pc, #248]	; (800ebf4 <mem_trim+0x1f4>)
 800eafc:	681b      	ldr	r3, [r3, #0]
 800eafe:	693a      	ldr	r2, [r7, #16]
 800eb00:	429a      	cmp	r2, r3
 800eb02:	d106      	bne.n	800eb12 <mem_trim+0x112>
      lfree = ptr_to_mem(ptr2);
 800eb04:	89fb      	ldrh	r3, [r7, #14]
 800eb06:	4618      	mov	r0, r3
 800eb08:	f7ff fdd6 	bl	800e6b8 <ptr_to_mem>
 800eb0c:	4603      	mov	r3, r0
 800eb0e:	4a39      	ldr	r2, [pc, #228]	; (800ebf4 <mem_trim+0x1f4>)
 800eb10:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 800eb12:	89fb      	ldrh	r3, [r7, #14]
 800eb14:	4618      	mov	r0, r3
 800eb16:	f7ff fdcf 	bl	800e6b8 <ptr_to_mem>
 800eb1a:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 800eb1c:	693b      	ldr	r3, [r7, #16]
 800eb1e:	2200      	movs	r2, #0
 800eb20:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 800eb22:	693b      	ldr	r3, [r7, #16]
 800eb24:	89ba      	ldrh	r2, [r7, #12]
 800eb26:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 800eb28:	693b      	ldr	r3, [r7, #16]
 800eb2a:	8afa      	ldrh	r2, [r7, #22]
 800eb2c:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 800eb2e:	69bb      	ldr	r3, [r7, #24]
 800eb30:	89fa      	ldrh	r2, [r7, #14]
 800eb32:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800eb34:	693b      	ldr	r3, [r7, #16]
 800eb36:	881b      	ldrh	r3, [r3, #0]
 800eb38:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800eb3c:	d047      	beq.n	800ebce <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800eb3e:	693b      	ldr	r3, [r7, #16]
 800eb40:	881b      	ldrh	r3, [r3, #0]
 800eb42:	4618      	mov	r0, r3
 800eb44:	f7ff fdb8 	bl	800e6b8 <ptr_to_mem>
 800eb48:	4602      	mov	r2, r0
 800eb4a:	89fb      	ldrh	r3, [r7, #14]
 800eb4c:	8053      	strh	r3, [r2, #2]
 800eb4e:	e03e      	b.n	800ebce <mem_trim+0x1ce>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 800eb50:	8bfb      	ldrh	r3, [r7, #30]
 800eb52:	f103 0214 	add.w	r2, r3, #20
 800eb56:	8abb      	ldrh	r3, [r7, #20]
 800eb58:	429a      	cmp	r2, r3
 800eb5a:	d838      	bhi.n	800ebce <mem_trim+0x1ce>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800eb5c:	8afa      	ldrh	r2, [r7, #22]
 800eb5e:	8bfb      	ldrh	r3, [r7, #30]
 800eb60:	4413      	add	r3, r2
 800eb62:	b29b      	uxth	r3, r3
 800eb64:	3308      	adds	r3, #8
 800eb66:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800eb68:	69bb      	ldr	r3, [r7, #24]
 800eb6a:	881b      	ldrh	r3, [r3, #0]
 800eb6c:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800eb70:	d106      	bne.n	800eb80 <mem_trim+0x180>
 800eb72:	4b1b      	ldr	r3, [pc, #108]	; (800ebe0 <mem_trim+0x1e0>)
 800eb74:	f240 3216 	movw	r2, #790	; 0x316
 800eb78:	491d      	ldr	r1, [pc, #116]	; (800ebf0 <mem_trim+0x1f0>)
 800eb7a:	481b      	ldr	r0, [pc, #108]	; (800ebe8 <mem_trim+0x1e8>)
 800eb7c:	f009 ff52 	bl	8018a24 <iprintf>
    mem2 = ptr_to_mem(ptr2);
 800eb80:	89fb      	ldrh	r3, [r7, #14]
 800eb82:	4618      	mov	r0, r3
 800eb84:	f7ff fd98 	bl	800e6b8 <ptr_to_mem>
 800eb88:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 800eb8a:	4b1a      	ldr	r3, [pc, #104]	; (800ebf4 <mem_trim+0x1f4>)
 800eb8c:	681b      	ldr	r3, [r3, #0]
 800eb8e:	693a      	ldr	r2, [r7, #16]
 800eb90:	429a      	cmp	r2, r3
 800eb92:	d202      	bcs.n	800eb9a <mem_trim+0x19a>
      lfree = mem2;
 800eb94:	4a17      	ldr	r2, [pc, #92]	; (800ebf4 <mem_trim+0x1f4>)
 800eb96:	693b      	ldr	r3, [r7, #16]
 800eb98:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 800eb9a:	693b      	ldr	r3, [r7, #16]
 800eb9c:	2200      	movs	r2, #0
 800eb9e:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 800eba0:	69bb      	ldr	r3, [r7, #24]
 800eba2:	881a      	ldrh	r2, [r3, #0]
 800eba4:	693b      	ldr	r3, [r7, #16]
 800eba6:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 800eba8:	693b      	ldr	r3, [r7, #16]
 800ebaa:	8afa      	ldrh	r2, [r7, #22]
 800ebac:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 800ebae:	69bb      	ldr	r3, [r7, #24]
 800ebb0:	89fa      	ldrh	r2, [r7, #14]
 800ebb2:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800ebb4:	693b      	ldr	r3, [r7, #16]
 800ebb6:	881b      	ldrh	r3, [r3, #0]
 800ebb8:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800ebbc:	d007      	beq.n	800ebce <mem_trim+0x1ce>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800ebbe:	693b      	ldr	r3, [r7, #16]
 800ebc0:	881b      	ldrh	r3, [r3, #0]
 800ebc2:	4618      	mov	r0, r3
 800ebc4:	f7ff fd78 	bl	800e6b8 <ptr_to_mem>
 800ebc8:	4602      	mov	r2, r0
 800ebca:	89fb      	ldrh	r3, [r7, #14]
 800ebcc:	8053      	strh	r3, [r2, #2]
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
  return rmem;
 800ebce:	687b      	ldr	r3, [r7, #4]
}
 800ebd0:	4618      	mov	r0, r3
 800ebd2:	3720      	adds	r7, #32
 800ebd4:	46bd      	mov	sp, r7
 800ebd6:	bd80      	pop	{r7, pc}
 800ebd8:	200050d4 	.word	0x200050d4
 800ebdc:	200050d8 	.word	0x200050d8
 800ebe0:	0801ae88 	.word	0x0801ae88
 800ebe4:	0801aff8 	.word	0x0801aff8
 800ebe8:	0801aed0 	.word	0x0801aed0
 800ebec:	0801b010 	.word	0x0801b010
 800ebf0:	0801b030 	.word	0x0801b030
 800ebf4:	200050dc 	.word	0x200050dc

0800ebf8 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 800ebf8:	b580      	push	{r7, lr}
 800ebfa:	b088      	sub	sp, #32
 800ebfc:	af00      	add	r7, sp, #0
 800ebfe:	4603      	mov	r3, r0
 800ec00:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 800ec02:	88fb      	ldrh	r3, [r7, #6]
 800ec04:	2b00      	cmp	r3, #0
 800ec06:	d101      	bne.n	800ec0c <mem_malloc+0x14>
    return NULL;
 800ec08:	2300      	movs	r3, #0
 800ec0a:	e0d9      	b.n	800edc0 <mem_malloc+0x1c8>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 800ec0c:	88fb      	ldrh	r3, [r7, #6]
 800ec0e:	3303      	adds	r3, #3
 800ec10:	b29b      	uxth	r3, r3
 800ec12:	f023 0303 	bic.w	r3, r3, #3
 800ec16:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 800ec18:	8bbb      	ldrh	r3, [r7, #28]
 800ec1a:	2b0b      	cmp	r3, #11
 800ec1c:	d801      	bhi.n	800ec22 <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 800ec1e:	230c      	movs	r3, #12
 800ec20:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 800ec22:	8bbb      	ldrh	r3, [r7, #28]
 800ec24:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800ec28:	d803      	bhi.n	800ec32 <mem_malloc+0x3a>
 800ec2a:	8bba      	ldrh	r2, [r7, #28]
 800ec2c:	88fb      	ldrh	r3, [r7, #6]
 800ec2e:	429a      	cmp	r2, r3
 800ec30:	d201      	bcs.n	800ec36 <mem_malloc+0x3e>
    return NULL;
 800ec32:	2300      	movs	r3, #0
 800ec34:	e0c4      	b.n	800edc0 <mem_malloc+0x1c8>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800ec36:	4b64      	ldr	r3, [pc, #400]	; (800edc8 <mem_malloc+0x1d0>)
 800ec38:	681b      	ldr	r3, [r3, #0]
 800ec3a:	4618      	mov	r0, r3
 800ec3c:	f7ff fd4e 	bl	800e6dc <mem_to_ptr>
 800ec40:	4603      	mov	r3, r0
 800ec42:	83fb      	strh	r3, [r7, #30]
 800ec44:	e0b4      	b.n	800edb0 <mem_malloc+0x1b8>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 800ec46:	8bfb      	ldrh	r3, [r7, #30]
 800ec48:	4618      	mov	r0, r3
 800ec4a:	f7ff fd35 	bl	800e6b8 <ptr_to_mem>
 800ec4e:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 800ec50:	697b      	ldr	r3, [r7, #20]
 800ec52:	791b      	ldrb	r3, [r3, #4]
 800ec54:	2b00      	cmp	r3, #0
 800ec56:	f040 80a4 	bne.w	800eda2 <mem_malloc+0x1aa>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 800ec5a:	697b      	ldr	r3, [r7, #20]
 800ec5c:	881b      	ldrh	r3, [r3, #0]
 800ec5e:	461a      	mov	r2, r3
 800ec60:	8bfb      	ldrh	r3, [r7, #30]
 800ec62:	1ad3      	subs	r3, r2, r3
 800ec64:	f1a3 0208 	sub.w	r2, r3, #8
 800ec68:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 800ec6a:	429a      	cmp	r2, r3
 800ec6c:	f0c0 8099 	bcc.w	800eda2 <mem_malloc+0x1aa>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 800ec70:	697b      	ldr	r3, [r7, #20]
 800ec72:	881b      	ldrh	r3, [r3, #0]
 800ec74:	461a      	mov	r2, r3
 800ec76:	8bfb      	ldrh	r3, [r7, #30]
 800ec78:	1ad3      	subs	r3, r2, r3
 800ec7a:	f1a3 0208 	sub.w	r2, r3, #8
 800ec7e:	8bbb      	ldrh	r3, [r7, #28]
 800ec80:	3314      	adds	r3, #20
 800ec82:	429a      	cmp	r2, r3
 800ec84:	d333      	bcc.n	800ecee <mem_malloc+0xf6>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 800ec86:	8bfa      	ldrh	r2, [r7, #30]
 800ec88:	8bbb      	ldrh	r3, [r7, #28]
 800ec8a:	4413      	add	r3, r2
 800ec8c:	b29b      	uxth	r3, r3
 800ec8e:	3308      	adds	r3, #8
 800ec90:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 800ec92:	8a7b      	ldrh	r3, [r7, #18]
 800ec94:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800ec98:	d106      	bne.n	800eca8 <mem_malloc+0xb0>
 800ec9a:	4b4c      	ldr	r3, [pc, #304]	; (800edcc <mem_malloc+0x1d4>)
 800ec9c:	f240 3287 	movw	r2, #903	; 0x387
 800eca0:	494b      	ldr	r1, [pc, #300]	; (800edd0 <mem_malloc+0x1d8>)
 800eca2:	484c      	ldr	r0, [pc, #304]	; (800edd4 <mem_malloc+0x1dc>)
 800eca4:	f009 febe 	bl	8018a24 <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 800eca8:	8a7b      	ldrh	r3, [r7, #18]
 800ecaa:	4618      	mov	r0, r3
 800ecac:	f7ff fd04 	bl	800e6b8 <ptr_to_mem>
 800ecb0:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 800ecb2:	68fb      	ldr	r3, [r7, #12]
 800ecb4:	2200      	movs	r2, #0
 800ecb6:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 800ecb8:	697b      	ldr	r3, [r7, #20]
 800ecba:	881a      	ldrh	r2, [r3, #0]
 800ecbc:	68fb      	ldr	r3, [r7, #12]
 800ecbe:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 800ecc0:	68fb      	ldr	r3, [r7, #12]
 800ecc2:	8bfa      	ldrh	r2, [r7, #30]
 800ecc4:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 800ecc6:	697b      	ldr	r3, [r7, #20]
 800ecc8:	8a7a      	ldrh	r2, [r7, #18]
 800ecca:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 800eccc:	697b      	ldr	r3, [r7, #20]
 800ecce:	2201      	movs	r2, #1
 800ecd0:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 800ecd2:	68fb      	ldr	r3, [r7, #12]
 800ecd4:	881b      	ldrh	r3, [r3, #0]
 800ecd6:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800ecda:	d00b      	beq.n	800ecf4 <mem_malloc+0xfc>
            ptr_to_mem(mem2->next)->prev = ptr2;
 800ecdc:	68fb      	ldr	r3, [r7, #12]
 800ecde:	881b      	ldrh	r3, [r3, #0]
 800ece0:	4618      	mov	r0, r3
 800ece2:	f7ff fce9 	bl	800e6b8 <ptr_to_mem>
 800ece6:	4602      	mov	r2, r0
 800ece8:	8a7b      	ldrh	r3, [r7, #18]
 800ecea:	8053      	strh	r3, [r2, #2]
 800ecec:	e002      	b.n	800ecf4 <mem_malloc+0xfc>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 800ecee:	697b      	ldr	r3, [r7, #20]
 800ecf0:	2201      	movs	r2, #1
 800ecf2:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 800ecf4:	4b34      	ldr	r3, [pc, #208]	; (800edc8 <mem_malloc+0x1d0>)
 800ecf6:	681b      	ldr	r3, [r3, #0]
 800ecf8:	697a      	ldr	r2, [r7, #20]
 800ecfa:	429a      	cmp	r2, r3
 800ecfc:	d127      	bne.n	800ed4e <mem_malloc+0x156>
          struct mem *cur = lfree;
 800ecfe:	4b32      	ldr	r3, [pc, #200]	; (800edc8 <mem_malloc+0x1d0>)
 800ed00:	681b      	ldr	r3, [r3, #0]
 800ed02:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 800ed04:	e005      	b.n	800ed12 <mem_malloc+0x11a>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 800ed06:	69bb      	ldr	r3, [r7, #24]
 800ed08:	881b      	ldrh	r3, [r3, #0]
 800ed0a:	4618      	mov	r0, r3
 800ed0c:	f7ff fcd4 	bl	800e6b8 <ptr_to_mem>
 800ed10:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 800ed12:	69bb      	ldr	r3, [r7, #24]
 800ed14:	791b      	ldrb	r3, [r3, #4]
 800ed16:	2b00      	cmp	r3, #0
 800ed18:	d004      	beq.n	800ed24 <mem_malloc+0x12c>
 800ed1a:	4b2f      	ldr	r3, [pc, #188]	; (800edd8 <mem_malloc+0x1e0>)
 800ed1c:	681b      	ldr	r3, [r3, #0]
 800ed1e:	69ba      	ldr	r2, [r7, #24]
 800ed20:	429a      	cmp	r2, r3
 800ed22:	d1f0      	bne.n	800ed06 <mem_malloc+0x10e>
          }
          lfree = cur;
 800ed24:	4a28      	ldr	r2, [pc, #160]	; (800edc8 <mem_malloc+0x1d0>)
 800ed26:	69bb      	ldr	r3, [r7, #24]
 800ed28:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 800ed2a:	4b27      	ldr	r3, [pc, #156]	; (800edc8 <mem_malloc+0x1d0>)
 800ed2c:	681a      	ldr	r2, [r3, #0]
 800ed2e:	4b2a      	ldr	r3, [pc, #168]	; (800edd8 <mem_malloc+0x1e0>)
 800ed30:	681b      	ldr	r3, [r3, #0]
 800ed32:	429a      	cmp	r2, r3
 800ed34:	d00b      	beq.n	800ed4e <mem_malloc+0x156>
 800ed36:	4b24      	ldr	r3, [pc, #144]	; (800edc8 <mem_malloc+0x1d0>)
 800ed38:	681b      	ldr	r3, [r3, #0]
 800ed3a:	791b      	ldrb	r3, [r3, #4]
 800ed3c:	2b00      	cmp	r3, #0
 800ed3e:	d006      	beq.n	800ed4e <mem_malloc+0x156>
 800ed40:	4b22      	ldr	r3, [pc, #136]	; (800edcc <mem_malloc+0x1d4>)
 800ed42:	f240 32b5 	movw	r2, #949	; 0x3b5
 800ed46:	4925      	ldr	r1, [pc, #148]	; (800eddc <mem_malloc+0x1e4>)
 800ed48:	4822      	ldr	r0, [pc, #136]	; (800edd4 <mem_malloc+0x1dc>)
 800ed4a:	f009 fe6b 	bl	8018a24 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 800ed4e:	8bba      	ldrh	r2, [r7, #28]
 800ed50:	697b      	ldr	r3, [r7, #20]
 800ed52:	4413      	add	r3, r2
 800ed54:	3308      	adds	r3, #8
 800ed56:	4a20      	ldr	r2, [pc, #128]	; (800edd8 <mem_malloc+0x1e0>)
 800ed58:	6812      	ldr	r2, [r2, #0]
 800ed5a:	4293      	cmp	r3, r2
 800ed5c:	d906      	bls.n	800ed6c <mem_malloc+0x174>
 800ed5e:	4b1b      	ldr	r3, [pc, #108]	; (800edcc <mem_malloc+0x1d4>)
 800ed60:	f240 32b9 	movw	r2, #953	; 0x3b9
 800ed64:	491e      	ldr	r1, [pc, #120]	; (800ede0 <mem_malloc+0x1e8>)
 800ed66:	481b      	ldr	r0, [pc, #108]	; (800edd4 <mem_malloc+0x1dc>)
 800ed68:	f009 fe5c 	bl	8018a24 <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 800ed6c:	697b      	ldr	r3, [r7, #20]
 800ed6e:	f003 0303 	and.w	r3, r3, #3
 800ed72:	2b00      	cmp	r3, #0
 800ed74:	d006      	beq.n	800ed84 <mem_malloc+0x18c>
 800ed76:	4b15      	ldr	r3, [pc, #84]	; (800edcc <mem_malloc+0x1d4>)
 800ed78:	f240 32bb 	movw	r2, #955	; 0x3bb
 800ed7c:	4919      	ldr	r1, [pc, #100]	; (800ede4 <mem_malloc+0x1ec>)
 800ed7e:	4815      	ldr	r0, [pc, #84]	; (800edd4 <mem_malloc+0x1dc>)
 800ed80:	f009 fe50 	bl	8018a24 <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 800ed84:	697b      	ldr	r3, [r7, #20]
 800ed86:	f003 0303 	and.w	r3, r3, #3
 800ed8a:	2b00      	cmp	r3, #0
 800ed8c:	d006      	beq.n	800ed9c <mem_malloc+0x1a4>
 800ed8e:	4b0f      	ldr	r3, [pc, #60]	; (800edcc <mem_malloc+0x1d4>)
 800ed90:	f240 32bd 	movw	r2, #957	; 0x3bd
 800ed94:	4914      	ldr	r1, [pc, #80]	; (800ede8 <mem_malloc+0x1f0>)
 800ed96:	480f      	ldr	r0, [pc, #60]	; (800edd4 <mem_malloc+0x1dc>)
 800ed98:	f009 fe44 	bl	8018a24 <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 800ed9c:	697b      	ldr	r3, [r7, #20]
 800ed9e:	3308      	adds	r3, #8
 800eda0:	e00e      	b.n	800edc0 <mem_malloc+0x1c8>
         ptr = ptr_to_mem(ptr)->next) {
 800eda2:	8bfb      	ldrh	r3, [r7, #30]
 800eda4:	4618      	mov	r0, r3
 800eda6:	f7ff fc87 	bl	800e6b8 <ptr_to_mem>
 800edaa:	4603      	mov	r3, r0
 800edac:	881b      	ldrh	r3, [r3, #0]
 800edae:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800edb0:	8bfa      	ldrh	r2, [r7, #30]
 800edb2:	8bbb      	ldrh	r3, [r7, #28]
 800edb4:	f5c3 63c8 	rsb	r3, r3, #1600	; 0x640
 800edb8:	429a      	cmp	r2, r3
 800edba:	f4ff af44 	bcc.w	800ec46 <mem_malloc+0x4e>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 800edbe:	2300      	movs	r3, #0
}
 800edc0:	4618      	mov	r0, r3
 800edc2:	3720      	adds	r7, #32
 800edc4:	46bd      	mov	sp, r7
 800edc6:	bd80      	pop	{r7, pc}
 800edc8:	200050dc 	.word	0x200050dc
 800edcc:	0801ae88 	.word	0x0801ae88
 800edd0:	0801b030 	.word	0x0801b030
 800edd4:	0801aed0 	.word	0x0801aed0
 800edd8:	200050d8 	.word	0x200050d8
 800eddc:	0801b044 	.word	0x0801b044
 800ede0:	0801b060 	.word	0x0801b060
 800ede4:	0801b090 	.word	0x0801b090
 800ede8:	0801b0c0 	.word	0x0801b0c0

0800edec <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 800edec:	b480      	push	{r7}
 800edee:	b085      	sub	sp, #20
 800edf0:	af00      	add	r7, sp, #0
 800edf2:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 800edf4:	687b      	ldr	r3, [r7, #4]
 800edf6:	689b      	ldr	r3, [r3, #8]
 800edf8:	2200      	movs	r2, #0
 800edfa:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 800edfc:	687b      	ldr	r3, [r7, #4]
 800edfe:	685b      	ldr	r3, [r3, #4]
 800ee00:	3303      	adds	r3, #3
 800ee02:	f023 0303 	bic.w	r3, r3, #3
 800ee06:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 800ee08:	2300      	movs	r3, #0
 800ee0a:	60fb      	str	r3, [r7, #12]
 800ee0c:	e011      	b.n	800ee32 <memp_init_pool+0x46>
    memp->next = *desc->tab;
 800ee0e:	687b      	ldr	r3, [r7, #4]
 800ee10:	689b      	ldr	r3, [r3, #8]
 800ee12:	681a      	ldr	r2, [r3, #0]
 800ee14:	68bb      	ldr	r3, [r7, #8]
 800ee16:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 800ee18:	687b      	ldr	r3, [r7, #4]
 800ee1a:	689b      	ldr	r3, [r3, #8]
 800ee1c:	68ba      	ldr	r2, [r7, #8]
 800ee1e:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 800ee20:	687b      	ldr	r3, [r7, #4]
 800ee22:	881b      	ldrh	r3, [r3, #0]
 800ee24:	461a      	mov	r2, r3
 800ee26:	68bb      	ldr	r3, [r7, #8]
 800ee28:	4413      	add	r3, r2
 800ee2a:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 800ee2c:	68fb      	ldr	r3, [r7, #12]
 800ee2e:	3301      	adds	r3, #1
 800ee30:	60fb      	str	r3, [r7, #12]
 800ee32:	687b      	ldr	r3, [r7, #4]
 800ee34:	885b      	ldrh	r3, [r3, #2]
 800ee36:	461a      	mov	r2, r3
 800ee38:	68fb      	ldr	r3, [r7, #12]
 800ee3a:	4293      	cmp	r3, r2
 800ee3c:	dbe7      	blt.n	800ee0e <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 800ee3e:	bf00      	nop
 800ee40:	bf00      	nop
 800ee42:	3714      	adds	r7, #20
 800ee44:	46bd      	mov	sp, r7
 800ee46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee4a:	4770      	bx	lr

0800ee4c <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 800ee4c:	b580      	push	{r7, lr}
 800ee4e:	b082      	sub	sp, #8
 800ee50:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800ee52:	2300      	movs	r3, #0
 800ee54:	80fb      	strh	r3, [r7, #6]
 800ee56:	e009      	b.n	800ee6c <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 800ee58:	88fb      	ldrh	r3, [r7, #6]
 800ee5a:	4a08      	ldr	r2, [pc, #32]	; (800ee7c <memp_init+0x30>)
 800ee5c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ee60:	4618      	mov	r0, r3
 800ee62:	f7ff ffc3 	bl	800edec <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800ee66:	88fb      	ldrh	r3, [r7, #6]
 800ee68:	3301      	adds	r3, #1
 800ee6a:	80fb      	strh	r3, [r7, #6]
 800ee6c:	88fb      	ldrh	r3, [r7, #6]
 800ee6e:	2b08      	cmp	r3, #8
 800ee70:	d9f2      	bls.n	800ee58 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 800ee72:	bf00      	nop
 800ee74:	bf00      	nop
 800ee76:	3708      	adds	r7, #8
 800ee78:	46bd      	mov	sp, r7
 800ee7a:	bd80      	pop	{r7, pc}
 800ee7c:	0801d8ec 	.word	0x0801d8ec

0800ee80 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 800ee80:	b580      	push	{r7, lr}
 800ee82:	b084      	sub	sp, #16
 800ee84:	af00      	add	r7, sp, #0
 800ee86:	6078      	str	r0, [r7, #4]
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);

  memp = *desc->tab;
 800ee88:	687b      	ldr	r3, [r7, #4]
 800ee8a:	689b      	ldr	r3, [r3, #8]
 800ee8c:	681b      	ldr	r3, [r3, #0]
 800ee8e:	60fb      	str	r3, [r7, #12]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 800ee90:	68fb      	ldr	r3, [r7, #12]
 800ee92:	2b00      	cmp	r3, #0
 800ee94:	d012      	beq.n	800eebc <do_memp_malloc_pool+0x3c>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 800ee96:	687b      	ldr	r3, [r7, #4]
 800ee98:	689b      	ldr	r3, [r3, #8]
 800ee9a:	68fa      	ldr	r2, [r7, #12]
 800ee9c:	6812      	ldr	r2, [r2, #0]
 800ee9e:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 800eea0:	68fb      	ldr	r3, [r7, #12]
 800eea2:	f003 0303 	and.w	r3, r3, #3
 800eea6:	2b00      	cmp	r3, #0
 800eea8:	d006      	beq.n	800eeb8 <do_memp_malloc_pool+0x38>
 800eeaa:	4b07      	ldr	r3, [pc, #28]	; (800eec8 <do_memp_malloc_pool+0x48>)
 800eeac:	f44f 728c 	mov.w	r2, #280	; 0x118
 800eeb0:	4906      	ldr	r1, [pc, #24]	; (800eecc <do_memp_malloc_pool+0x4c>)
 800eeb2:	4807      	ldr	r0, [pc, #28]	; (800eed0 <do_memp_malloc_pool+0x50>)
 800eeb4:	f009 fdb6 	bl	8018a24 <iprintf>
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 800eeb8:	68fb      	ldr	r3, [r7, #12]
 800eeba:	e000      	b.n	800eebe <do_memp_malloc_pool+0x3e>
#endif
    SYS_ARCH_UNPROTECT(old_level);
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 800eebc:	2300      	movs	r3, #0
}
 800eebe:	4618      	mov	r0, r3
 800eec0:	3710      	adds	r7, #16
 800eec2:	46bd      	mov	sp, r7
 800eec4:	bd80      	pop	{r7, pc}
 800eec6:	bf00      	nop
 800eec8:	0801b0e4 	.word	0x0801b0e4
 800eecc:	0801b114 	.word	0x0801b114
 800eed0:	0801b138 	.word	0x0801b138

0800eed4 <memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc_pool(const struct memp_desc *desc)
#else
memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 800eed4:	b580      	push	{r7, lr}
 800eed6:	b082      	sub	sp, #8
 800eed8:	af00      	add	r7, sp, #0
 800eeda:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 800eedc:	687b      	ldr	r3, [r7, #4]
 800eede:	2b00      	cmp	r3, #0
 800eee0:	d106      	bne.n	800eef0 <memp_malloc_pool+0x1c>
 800eee2:	4b0a      	ldr	r3, [pc, #40]	; (800ef0c <memp_malloc_pool+0x38>)
 800eee4:	f44f 729e 	mov.w	r2, #316	; 0x13c
 800eee8:	4909      	ldr	r1, [pc, #36]	; (800ef10 <memp_malloc_pool+0x3c>)
 800eeea:	480a      	ldr	r0, [pc, #40]	; (800ef14 <memp_malloc_pool+0x40>)
 800eeec:	f009 fd9a 	bl	8018a24 <iprintf>
  if (desc == NULL) {
 800eef0:	687b      	ldr	r3, [r7, #4]
 800eef2:	2b00      	cmp	r3, #0
 800eef4:	d101      	bne.n	800eefa <memp_malloc_pool+0x26>
    return NULL;
 800eef6:	2300      	movs	r3, #0
 800eef8:	e003      	b.n	800ef02 <memp_malloc_pool+0x2e>
  }

#if !MEMP_OVERFLOW_CHECK
  return do_memp_malloc_pool(desc);
 800eefa:	6878      	ldr	r0, [r7, #4]
 800eefc:	f7ff ffc0 	bl	800ee80 <do_memp_malloc_pool>
 800ef00:	4603      	mov	r3, r0
#else
  return do_memp_malloc_pool_fn(desc, file, line);
#endif
}
 800ef02:	4618      	mov	r0, r3
 800ef04:	3708      	adds	r7, #8
 800ef06:	46bd      	mov	sp, r7
 800ef08:	bd80      	pop	{r7, pc}
 800ef0a:	bf00      	nop
 800ef0c:	0801b0e4 	.word	0x0801b0e4
 800ef10:	0801b160 	.word	0x0801b160
 800ef14:	0801b138 	.word	0x0801b138

0800ef18 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 800ef18:	b580      	push	{r7, lr}
 800ef1a:	b084      	sub	sp, #16
 800ef1c:	af00      	add	r7, sp, #0
 800ef1e:	4603      	mov	r3, r0
 800ef20:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 800ef22:	79fb      	ldrb	r3, [r7, #7]
 800ef24:	2b08      	cmp	r3, #8
 800ef26:	d908      	bls.n	800ef3a <memp_malloc+0x22>
 800ef28:	4b0a      	ldr	r3, [pc, #40]	; (800ef54 <memp_malloc+0x3c>)
 800ef2a:	f240 1257 	movw	r2, #343	; 0x157
 800ef2e:	490a      	ldr	r1, [pc, #40]	; (800ef58 <memp_malloc+0x40>)
 800ef30:	480a      	ldr	r0, [pc, #40]	; (800ef5c <memp_malloc+0x44>)
 800ef32:	f009 fd77 	bl	8018a24 <iprintf>
 800ef36:	2300      	movs	r3, #0
 800ef38:	e008      	b.n	800ef4c <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 800ef3a:	79fb      	ldrb	r3, [r7, #7]
 800ef3c:	4a08      	ldr	r2, [pc, #32]	; (800ef60 <memp_malloc+0x48>)
 800ef3e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ef42:	4618      	mov	r0, r3
 800ef44:	f7ff ff9c 	bl	800ee80 <do_memp_malloc_pool>
 800ef48:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 800ef4a:	68fb      	ldr	r3, [r7, #12]
}
 800ef4c:	4618      	mov	r0, r3
 800ef4e:	3710      	adds	r7, #16
 800ef50:	46bd      	mov	sp, r7
 800ef52:	bd80      	pop	{r7, pc}
 800ef54:	0801b0e4 	.word	0x0801b0e4
 800ef58:	0801b174 	.word	0x0801b174
 800ef5c:	0801b138 	.word	0x0801b138
 800ef60:	0801d8ec 	.word	0x0801d8ec

0800ef64 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 800ef64:	b580      	push	{r7, lr}
 800ef66:	b084      	sub	sp, #16
 800ef68:	af00      	add	r7, sp, #0
 800ef6a:	6078      	str	r0, [r7, #4]
 800ef6c:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 800ef6e:	683b      	ldr	r3, [r7, #0]
 800ef70:	f003 0303 	and.w	r3, r3, #3
 800ef74:	2b00      	cmp	r3, #0
 800ef76:	d006      	beq.n	800ef86 <do_memp_free_pool+0x22>
 800ef78:	4b0a      	ldr	r3, [pc, #40]	; (800efa4 <do_memp_free_pool+0x40>)
 800ef7a:	f44f 72b6 	mov.w	r2, #364	; 0x16c
 800ef7e:	490a      	ldr	r1, [pc, #40]	; (800efa8 <do_memp_free_pool+0x44>)
 800ef80:	480a      	ldr	r0, [pc, #40]	; (800efac <do_memp_free_pool+0x48>)
 800ef82:	f009 fd4f 	bl	8018a24 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 800ef86:	683b      	ldr	r3, [r7, #0]
 800ef88:	60fb      	str	r3, [r7, #12]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 800ef8a:	687b      	ldr	r3, [r7, #4]
 800ef8c:	689b      	ldr	r3, [r3, #8]
 800ef8e:	681a      	ldr	r2, [r3, #0]
 800ef90:	68fb      	ldr	r3, [r7, #12]
 800ef92:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 800ef94:	687b      	ldr	r3, [r7, #4]
 800ef96:	689b      	ldr	r3, [r3, #8]
 800ef98:	68fa      	ldr	r2, [r7, #12]
 800ef9a:	601a      	str	r2, [r3, #0]
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
#endif /* !MEMP_MEM_MALLOC */
}
 800ef9c:	bf00      	nop
 800ef9e:	3710      	adds	r7, #16
 800efa0:	46bd      	mov	sp, r7
 800efa2:	bd80      	pop	{r7, pc}
 800efa4:	0801b0e4 	.word	0x0801b0e4
 800efa8:	0801b194 	.word	0x0801b194
 800efac:	0801b138 	.word	0x0801b138

0800efb0 <memp_free_pool>:
 * @param desc the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free_pool(const struct memp_desc *desc, void *mem)
{
 800efb0:	b580      	push	{r7, lr}
 800efb2:	b082      	sub	sp, #8
 800efb4:	af00      	add	r7, sp, #0
 800efb6:	6078      	str	r0, [r7, #4]
 800efb8:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 800efba:	687b      	ldr	r3, [r7, #4]
 800efbc:	2b00      	cmp	r3, #0
 800efbe:	d106      	bne.n	800efce <memp_free_pool+0x1e>
 800efc0:	4b0a      	ldr	r3, [pc, #40]	; (800efec <memp_free_pool+0x3c>)
 800efc2:	f240 1295 	movw	r2, #405	; 0x195
 800efc6:	490a      	ldr	r1, [pc, #40]	; (800eff0 <memp_free_pool+0x40>)
 800efc8:	480a      	ldr	r0, [pc, #40]	; (800eff4 <memp_free_pool+0x44>)
 800efca:	f009 fd2b 	bl	8018a24 <iprintf>
  if ((desc == NULL) || (mem == NULL)) {
 800efce:	687b      	ldr	r3, [r7, #4]
 800efd0:	2b00      	cmp	r3, #0
 800efd2:	d007      	beq.n	800efe4 <memp_free_pool+0x34>
 800efd4:	683b      	ldr	r3, [r7, #0]
 800efd6:	2b00      	cmp	r3, #0
 800efd8:	d004      	beq.n	800efe4 <memp_free_pool+0x34>
    return;
  }

  do_memp_free_pool(desc, mem);
 800efda:	6839      	ldr	r1, [r7, #0]
 800efdc:	6878      	ldr	r0, [r7, #4]
 800efde:	f7ff ffc1 	bl	800ef64 <do_memp_free_pool>
 800efe2:	e000      	b.n	800efe6 <memp_free_pool+0x36>
    return;
 800efe4:	bf00      	nop
}
 800efe6:	3708      	adds	r7, #8
 800efe8:	46bd      	mov	sp, r7
 800efea:	bd80      	pop	{r7, pc}
 800efec:	0801b0e4 	.word	0x0801b0e4
 800eff0:	0801b160 	.word	0x0801b160
 800eff4:	0801b138 	.word	0x0801b138

0800eff8 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 800eff8:	b580      	push	{r7, lr}
 800effa:	b082      	sub	sp, #8
 800effc:	af00      	add	r7, sp, #0
 800effe:	4603      	mov	r3, r0
 800f000:	6039      	str	r1, [r7, #0]
 800f002:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 800f004:	79fb      	ldrb	r3, [r7, #7]
 800f006:	2b08      	cmp	r3, #8
 800f008:	d907      	bls.n	800f01a <memp_free+0x22>
 800f00a:	4b0c      	ldr	r3, [pc, #48]	; (800f03c <memp_free+0x44>)
 800f00c:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 800f010:	490b      	ldr	r1, [pc, #44]	; (800f040 <memp_free+0x48>)
 800f012:	480c      	ldr	r0, [pc, #48]	; (800f044 <memp_free+0x4c>)
 800f014:	f009 fd06 	bl	8018a24 <iprintf>
 800f018:	e00c      	b.n	800f034 <memp_free+0x3c>

  if (mem == NULL) {
 800f01a:	683b      	ldr	r3, [r7, #0]
 800f01c:	2b00      	cmp	r3, #0
 800f01e:	d008      	beq.n	800f032 <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 800f020:	79fb      	ldrb	r3, [r7, #7]
 800f022:	4a09      	ldr	r2, [pc, #36]	; (800f048 <memp_free+0x50>)
 800f024:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f028:	6839      	ldr	r1, [r7, #0]
 800f02a:	4618      	mov	r0, r3
 800f02c:	f7ff ff9a 	bl	800ef64 <do_memp_free_pool>
 800f030:	e000      	b.n	800f034 <memp_free+0x3c>
    return;
 800f032:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 800f034:	3708      	adds	r7, #8
 800f036:	46bd      	mov	sp, r7
 800f038:	bd80      	pop	{r7, pc}
 800f03a:	bf00      	nop
 800f03c:	0801b0e4 	.word	0x0801b0e4
 800f040:	0801b1b4 	.word	0x0801b1b4
 800f044:	0801b138 	.word	0x0801b138
 800f048:	0801d8ec 	.word	0x0801d8ec

0800f04c <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 800f04c:	b480      	push	{r7}
 800f04e:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 800f050:	bf00      	nop
 800f052:	46bd      	mov	sp, r7
 800f054:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f058:	4770      	bx	lr
	...

0800f05c <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 800f05c:	b580      	push	{r7, lr}
 800f05e:	b086      	sub	sp, #24
 800f060:	af00      	add	r7, sp, #0
 800f062:	60f8      	str	r0, [r7, #12]
 800f064:	60b9      	str	r1, [r7, #8]
 800f066:	607a      	str	r2, [r7, #4]
 800f068:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 800f06a:	68fb      	ldr	r3, [r7, #12]
 800f06c:	2b00      	cmp	r3, #0
 800f06e:	d108      	bne.n	800f082 <netif_add+0x26>
 800f070:	4b57      	ldr	r3, [pc, #348]	; (800f1d0 <netif_add+0x174>)
 800f072:	f240 1227 	movw	r2, #295	; 0x127
 800f076:	4957      	ldr	r1, [pc, #348]	; (800f1d4 <netif_add+0x178>)
 800f078:	4857      	ldr	r0, [pc, #348]	; (800f1d8 <netif_add+0x17c>)
 800f07a:	f009 fcd3 	bl	8018a24 <iprintf>
 800f07e:	2300      	movs	r3, #0
 800f080:	e0a2      	b.n	800f1c8 <netif_add+0x16c>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 800f082:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f084:	2b00      	cmp	r3, #0
 800f086:	d108      	bne.n	800f09a <netif_add+0x3e>
 800f088:	4b51      	ldr	r3, [pc, #324]	; (800f1d0 <netif_add+0x174>)
 800f08a:	f44f 7294 	mov.w	r2, #296	; 0x128
 800f08e:	4953      	ldr	r1, [pc, #332]	; (800f1dc <netif_add+0x180>)
 800f090:	4851      	ldr	r0, [pc, #324]	; (800f1d8 <netif_add+0x17c>)
 800f092:	f009 fcc7 	bl	8018a24 <iprintf>
 800f096:	2300      	movs	r3, #0
 800f098:	e096      	b.n	800f1c8 <netif_add+0x16c>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 800f09a:	68bb      	ldr	r3, [r7, #8]
 800f09c:	2b00      	cmp	r3, #0
 800f09e:	d101      	bne.n	800f0a4 <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 800f0a0:	4b4f      	ldr	r3, [pc, #316]	; (800f1e0 <netif_add+0x184>)
 800f0a2:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800f0a4:	687b      	ldr	r3, [r7, #4]
 800f0a6:	2b00      	cmp	r3, #0
 800f0a8:	d101      	bne.n	800f0ae <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 800f0aa:	4b4d      	ldr	r3, [pc, #308]	; (800f1e0 <netif_add+0x184>)
 800f0ac:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800f0ae:	683b      	ldr	r3, [r7, #0]
 800f0b0:	2b00      	cmp	r3, #0
 800f0b2:	d101      	bne.n	800f0b8 <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 800f0b4:	4b4a      	ldr	r3, [pc, #296]	; (800f1e0 <netif_add+0x184>)
 800f0b6:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 800f0b8:	68fb      	ldr	r3, [r7, #12]
 800f0ba:	2200      	movs	r2, #0
 800f0bc:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 800f0be:	68fb      	ldr	r3, [r7, #12]
 800f0c0:	2200      	movs	r2, #0
 800f0c2:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 800f0c4:	68fb      	ldr	r3, [r7, #12]
 800f0c6:	2200      	movs	r2, #0
 800f0c8:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 800f0ca:	68fb      	ldr	r3, [r7, #12]
 800f0cc:	4a45      	ldr	r2, [pc, #276]	; (800f1e4 <netif_add+0x188>)
 800f0ce:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 800f0d0:	68fb      	ldr	r3, [r7, #12]
 800f0d2:	2200      	movs	r2, #0
 800f0d4:	849a      	strh	r2, [r3, #36]	; 0x24
  netif->flags = 0;
 800f0d6:	68fb      	ldr	r3, [r7, #12]
 800f0d8:	2200      	movs	r2, #0
 800f0da:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 800f0de:	68fb      	ldr	r3, [r7, #12]
 800f0e0:	2200      	movs	r2, #0
 800f0e2:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 800f0e4:	68fb      	ldr	r3, [r7, #12]
 800f0e6:	6a3a      	ldr	r2, [r7, #32]
 800f0e8:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 800f0ea:	4b3f      	ldr	r3, [pc, #252]	; (800f1e8 <netif_add+0x18c>)
 800f0ec:	781a      	ldrb	r2, [r3, #0]
 800f0ee:	68fb      	ldr	r3, [r7, #12]
 800f0f0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  netif->input = input;
 800f0f4:	68fb      	ldr	r3, [r7, #12]
 800f0f6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f0f8:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 800f0fa:	683b      	ldr	r3, [r7, #0]
 800f0fc:	687a      	ldr	r2, [r7, #4]
 800f0fe:	68b9      	ldr	r1, [r7, #8]
 800f100:	68f8      	ldr	r0, [r7, #12]
 800f102:	f000 f913 	bl	800f32c <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 800f106:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f108:	68f8      	ldr	r0, [r7, #12]
 800f10a:	4798      	blx	r3
 800f10c:	4603      	mov	r3, r0
 800f10e:	2b00      	cmp	r3, #0
 800f110:	d001      	beq.n	800f116 <netif_add+0xba>
    return NULL;
 800f112:	2300      	movs	r3, #0
 800f114:	e058      	b.n	800f1c8 <netif_add+0x16c>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 800f116:	68fb      	ldr	r3, [r7, #12]
 800f118:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800f11c:	2bff      	cmp	r3, #255	; 0xff
 800f11e:	d103      	bne.n	800f128 <netif_add+0xcc>
        netif->num = 0;
 800f120:	68fb      	ldr	r3, [r7, #12]
 800f122:	2200      	movs	r2, #0
 800f124:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      }
      num_netifs = 0;
 800f128:	2300      	movs	r3, #0
 800f12a:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800f12c:	4b2f      	ldr	r3, [pc, #188]	; (800f1ec <netif_add+0x190>)
 800f12e:	681b      	ldr	r3, [r3, #0]
 800f130:	617b      	str	r3, [r7, #20]
 800f132:	e02b      	b.n	800f18c <netif_add+0x130>
        LWIP_ASSERT("netif already added", netif2 != netif);
 800f134:	697a      	ldr	r2, [r7, #20]
 800f136:	68fb      	ldr	r3, [r7, #12]
 800f138:	429a      	cmp	r2, r3
 800f13a:	d106      	bne.n	800f14a <netif_add+0xee>
 800f13c:	4b24      	ldr	r3, [pc, #144]	; (800f1d0 <netif_add+0x174>)
 800f13e:	f240 128b 	movw	r2, #395	; 0x18b
 800f142:	492b      	ldr	r1, [pc, #172]	; (800f1f0 <netif_add+0x194>)
 800f144:	4824      	ldr	r0, [pc, #144]	; (800f1d8 <netif_add+0x17c>)
 800f146:	f009 fc6d 	bl	8018a24 <iprintf>
        num_netifs++;
 800f14a:	693b      	ldr	r3, [r7, #16]
 800f14c:	3301      	adds	r3, #1
 800f14e:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 800f150:	693b      	ldr	r3, [r7, #16]
 800f152:	2bff      	cmp	r3, #255	; 0xff
 800f154:	dd06      	ble.n	800f164 <netif_add+0x108>
 800f156:	4b1e      	ldr	r3, [pc, #120]	; (800f1d0 <netif_add+0x174>)
 800f158:	f240 128d 	movw	r2, #397	; 0x18d
 800f15c:	4925      	ldr	r1, [pc, #148]	; (800f1f4 <netif_add+0x198>)
 800f15e:	481e      	ldr	r0, [pc, #120]	; (800f1d8 <netif_add+0x17c>)
 800f160:	f009 fc60 	bl	8018a24 <iprintf>
        if (netif2->num == netif->num) {
 800f164:	697b      	ldr	r3, [r7, #20]
 800f166:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 800f16a:	68fb      	ldr	r3, [r7, #12]
 800f16c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800f170:	429a      	cmp	r2, r3
 800f172:	d108      	bne.n	800f186 <netif_add+0x12a>
          netif->num++;
 800f174:	68fb      	ldr	r3, [r7, #12]
 800f176:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800f17a:	3301      	adds	r3, #1
 800f17c:	b2da      	uxtb	r2, r3
 800f17e:	68fb      	ldr	r3, [r7, #12]
 800f180:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
          break;
 800f184:	e005      	b.n	800f192 <netif_add+0x136>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800f186:	697b      	ldr	r3, [r7, #20]
 800f188:	681b      	ldr	r3, [r3, #0]
 800f18a:	617b      	str	r3, [r7, #20]
 800f18c:	697b      	ldr	r3, [r7, #20]
 800f18e:	2b00      	cmp	r3, #0
 800f190:	d1d0      	bne.n	800f134 <netif_add+0xd8>
        }
      }
    } while (netif2 != NULL);
 800f192:	697b      	ldr	r3, [r7, #20]
 800f194:	2b00      	cmp	r3, #0
 800f196:	d1be      	bne.n	800f116 <netif_add+0xba>
  }
  if (netif->num == 254) {
 800f198:	68fb      	ldr	r3, [r7, #12]
 800f19a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800f19e:	2bfe      	cmp	r3, #254	; 0xfe
 800f1a0:	d103      	bne.n	800f1aa <netif_add+0x14e>
    netif_num = 0;
 800f1a2:	4b11      	ldr	r3, [pc, #68]	; (800f1e8 <netif_add+0x18c>)
 800f1a4:	2200      	movs	r2, #0
 800f1a6:	701a      	strb	r2, [r3, #0]
 800f1a8:	e006      	b.n	800f1b8 <netif_add+0x15c>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 800f1aa:	68fb      	ldr	r3, [r7, #12]
 800f1ac:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800f1b0:	3301      	adds	r3, #1
 800f1b2:	b2da      	uxtb	r2, r3
 800f1b4:	4b0c      	ldr	r3, [pc, #48]	; (800f1e8 <netif_add+0x18c>)
 800f1b6:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 800f1b8:	4b0c      	ldr	r3, [pc, #48]	; (800f1ec <netif_add+0x190>)
 800f1ba:	681a      	ldr	r2, [r3, #0]
 800f1bc:	68fb      	ldr	r3, [r7, #12]
 800f1be:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 800f1c0:	4a0a      	ldr	r2, [pc, #40]	; (800f1ec <netif_add+0x190>)
 800f1c2:	68fb      	ldr	r3, [r7, #12]
 800f1c4:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 800f1c6:	68fb      	ldr	r3, [r7, #12]
}
 800f1c8:	4618      	mov	r0, r3
 800f1ca:	3718      	adds	r7, #24
 800f1cc:	46bd      	mov	sp, r7
 800f1ce:	bd80      	pop	{r7, pc}
 800f1d0:	0801b1d0 	.word	0x0801b1d0
 800f1d4:	0801b264 	.word	0x0801b264
 800f1d8:	0801b220 	.word	0x0801b220
 800f1dc:	0801b280 	.word	0x0801b280
 800f1e0:	0801d950 	.word	0x0801d950
 800f1e4:	0800f607 	.word	0x0800f607
 800f1e8:	20007fd4 	.word	0x20007fd4
 800f1ec:	20007fcc 	.word	0x20007fcc
 800f1f0:	0801b2a4 	.word	0x0801b2a4
 800f1f4:	0801b2b8 	.word	0x0801b2b8

0800f1f8 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800f1f8:	b580      	push	{r7, lr}
 800f1fa:	b082      	sub	sp, #8
 800f1fc:	af00      	add	r7, sp, #0
 800f1fe:	6078      	str	r0, [r7, #4]
 800f200:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 800f202:	6839      	ldr	r1, [r7, #0]
 800f204:	6878      	ldr	r0, [r7, #4]
 800f206:	f002 fb23 	bl	8011850 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 800f20a:	6839      	ldr	r1, [r7, #0]
 800f20c:	6878      	ldr	r0, [r7, #4]
 800f20e:	f006 fbc5 	bl	801599c <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 800f212:	bf00      	nop
 800f214:	3708      	adds	r7, #8
 800f216:	46bd      	mov	sp, r7
 800f218:	bd80      	pop	{r7, pc}
	...

0800f21c <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 800f21c:	b580      	push	{r7, lr}
 800f21e:	b086      	sub	sp, #24
 800f220:	af00      	add	r7, sp, #0
 800f222:	60f8      	str	r0, [r7, #12]
 800f224:	60b9      	str	r1, [r7, #8]
 800f226:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 800f228:	68bb      	ldr	r3, [r7, #8]
 800f22a:	2b00      	cmp	r3, #0
 800f22c:	d106      	bne.n	800f23c <netif_do_set_ipaddr+0x20>
 800f22e:	4b1d      	ldr	r3, [pc, #116]	; (800f2a4 <netif_do_set_ipaddr+0x88>)
 800f230:	f240 12cb 	movw	r2, #459	; 0x1cb
 800f234:	491c      	ldr	r1, [pc, #112]	; (800f2a8 <netif_do_set_ipaddr+0x8c>)
 800f236:	481d      	ldr	r0, [pc, #116]	; (800f2ac <netif_do_set_ipaddr+0x90>)
 800f238:	f009 fbf4 	bl	8018a24 <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 800f23c:	687b      	ldr	r3, [r7, #4]
 800f23e:	2b00      	cmp	r3, #0
 800f240:	d106      	bne.n	800f250 <netif_do_set_ipaddr+0x34>
 800f242:	4b18      	ldr	r3, [pc, #96]	; (800f2a4 <netif_do_set_ipaddr+0x88>)
 800f244:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 800f248:	4917      	ldr	r1, [pc, #92]	; (800f2a8 <netif_do_set_ipaddr+0x8c>)
 800f24a:	4818      	ldr	r0, [pc, #96]	; (800f2ac <netif_do_set_ipaddr+0x90>)
 800f24c:	f009 fbea 	bl	8018a24 <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 800f250:	68bb      	ldr	r3, [r7, #8]
 800f252:	681a      	ldr	r2, [r3, #0]
 800f254:	68fb      	ldr	r3, [r7, #12]
 800f256:	3304      	adds	r3, #4
 800f258:	681b      	ldr	r3, [r3, #0]
 800f25a:	429a      	cmp	r2, r3
 800f25c:	d01c      	beq.n	800f298 <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 800f25e:	68bb      	ldr	r3, [r7, #8]
 800f260:	681b      	ldr	r3, [r3, #0]
 800f262:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 800f264:	68fb      	ldr	r3, [r7, #12]
 800f266:	3304      	adds	r3, #4
 800f268:	681a      	ldr	r2, [r3, #0]
 800f26a:	687b      	ldr	r3, [r7, #4]
 800f26c:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 800f26e:	f107 0314 	add.w	r3, r7, #20
 800f272:	4619      	mov	r1, r3
 800f274:	6878      	ldr	r0, [r7, #4]
 800f276:	f7ff ffbf 	bl	800f1f8 <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 800f27a:	68bb      	ldr	r3, [r7, #8]
 800f27c:	2b00      	cmp	r3, #0
 800f27e:	d002      	beq.n	800f286 <netif_do_set_ipaddr+0x6a>
 800f280:	68bb      	ldr	r3, [r7, #8]
 800f282:	681b      	ldr	r3, [r3, #0]
 800f284:	e000      	b.n	800f288 <netif_do_set_ipaddr+0x6c>
 800f286:	2300      	movs	r3, #0
 800f288:	68fa      	ldr	r2, [r7, #12]
 800f28a:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 800f28c:	2101      	movs	r1, #1
 800f28e:	68f8      	ldr	r0, [r7, #12]
 800f290:	f000 f8d2 	bl	800f438 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 800f294:	2301      	movs	r3, #1
 800f296:	e000      	b.n	800f29a <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 800f298:	2300      	movs	r3, #0
}
 800f29a:	4618      	mov	r0, r3
 800f29c:	3718      	adds	r7, #24
 800f29e:	46bd      	mov	sp, r7
 800f2a0:	bd80      	pop	{r7, pc}
 800f2a2:	bf00      	nop
 800f2a4:	0801b1d0 	.word	0x0801b1d0
 800f2a8:	0801b2e8 	.word	0x0801b2e8
 800f2ac:	0801b220 	.word	0x0801b220

0800f2b0 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 800f2b0:	b480      	push	{r7}
 800f2b2:	b085      	sub	sp, #20
 800f2b4:	af00      	add	r7, sp, #0
 800f2b6:	60f8      	str	r0, [r7, #12]
 800f2b8:	60b9      	str	r1, [r7, #8]
 800f2ba:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 800f2bc:	68bb      	ldr	r3, [r7, #8]
 800f2be:	681a      	ldr	r2, [r3, #0]
 800f2c0:	68fb      	ldr	r3, [r7, #12]
 800f2c2:	3308      	adds	r3, #8
 800f2c4:	681b      	ldr	r3, [r3, #0]
 800f2c6:	429a      	cmp	r2, r3
 800f2c8:	d00a      	beq.n	800f2e0 <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 800f2ca:	68bb      	ldr	r3, [r7, #8]
 800f2cc:	2b00      	cmp	r3, #0
 800f2ce:	d002      	beq.n	800f2d6 <netif_do_set_netmask+0x26>
 800f2d0:	68bb      	ldr	r3, [r7, #8]
 800f2d2:	681b      	ldr	r3, [r3, #0]
 800f2d4:	e000      	b.n	800f2d8 <netif_do_set_netmask+0x28>
 800f2d6:	2300      	movs	r3, #0
 800f2d8:	68fa      	ldr	r2, [r7, #12]
 800f2da:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 800f2dc:	2301      	movs	r3, #1
 800f2de:	e000      	b.n	800f2e2 <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 800f2e0:	2300      	movs	r3, #0
}
 800f2e2:	4618      	mov	r0, r3
 800f2e4:	3714      	adds	r7, #20
 800f2e6:	46bd      	mov	sp, r7
 800f2e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2ec:	4770      	bx	lr

0800f2ee <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 800f2ee:	b480      	push	{r7}
 800f2f0:	b085      	sub	sp, #20
 800f2f2:	af00      	add	r7, sp, #0
 800f2f4:	60f8      	str	r0, [r7, #12]
 800f2f6:	60b9      	str	r1, [r7, #8]
 800f2f8:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 800f2fa:	68bb      	ldr	r3, [r7, #8]
 800f2fc:	681a      	ldr	r2, [r3, #0]
 800f2fe:	68fb      	ldr	r3, [r7, #12]
 800f300:	330c      	adds	r3, #12
 800f302:	681b      	ldr	r3, [r3, #0]
 800f304:	429a      	cmp	r2, r3
 800f306:	d00a      	beq.n	800f31e <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 800f308:	68bb      	ldr	r3, [r7, #8]
 800f30a:	2b00      	cmp	r3, #0
 800f30c:	d002      	beq.n	800f314 <netif_do_set_gw+0x26>
 800f30e:	68bb      	ldr	r3, [r7, #8]
 800f310:	681b      	ldr	r3, [r3, #0]
 800f312:	e000      	b.n	800f316 <netif_do_set_gw+0x28>
 800f314:	2300      	movs	r3, #0
 800f316:	68fa      	ldr	r2, [r7, #12]
 800f318:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 800f31a:	2301      	movs	r3, #1
 800f31c:	e000      	b.n	800f320 <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 800f31e:	2300      	movs	r3, #0
}
 800f320:	4618      	mov	r0, r3
 800f322:	3714      	adds	r7, #20
 800f324:	46bd      	mov	sp, r7
 800f326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f32a:	4770      	bx	lr

0800f32c <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 800f32c:	b580      	push	{r7, lr}
 800f32e:	b088      	sub	sp, #32
 800f330:	af00      	add	r7, sp, #0
 800f332:	60f8      	str	r0, [r7, #12]
 800f334:	60b9      	str	r1, [r7, #8]
 800f336:	607a      	str	r2, [r7, #4]
 800f338:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 800f33a:	2300      	movs	r3, #0
 800f33c:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 800f33e:	2300      	movs	r3, #0
 800f340:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800f342:	68bb      	ldr	r3, [r7, #8]
 800f344:	2b00      	cmp	r3, #0
 800f346:	d101      	bne.n	800f34c <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 800f348:	4b1c      	ldr	r3, [pc, #112]	; (800f3bc <netif_set_addr+0x90>)
 800f34a:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800f34c:	687b      	ldr	r3, [r7, #4]
 800f34e:	2b00      	cmp	r3, #0
 800f350:	d101      	bne.n	800f356 <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 800f352:	4b1a      	ldr	r3, [pc, #104]	; (800f3bc <netif_set_addr+0x90>)
 800f354:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800f356:	683b      	ldr	r3, [r7, #0]
 800f358:	2b00      	cmp	r3, #0
 800f35a:	d101      	bne.n	800f360 <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 800f35c:	4b17      	ldr	r3, [pc, #92]	; (800f3bc <netif_set_addr+0x90>)
 800f35e:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 800f360:	68bb      	ldr	r3, [r7, #8]
 800f362:	2b00      	cmp	r3, #0
 800f364:	d003      	beq.n	800f36e <netif_set_addr+0x42>
 800f366:	68bb      	ldr	r3, [r7, #8]
 800f368:	681b      	ldr	r3, [r3, #0]
 800f36a:	2b00      	cmp	r3, #0
 800f36c:	d101      	bne.n	800f372 <netif_set_addr+0x46>
 800f36e:	2301      	movs	r3, #1
 800f370:	e000      	b.n	800f374 <netif_set_addr+0x48>
 800f372:	2300      	movs	r3, #0
 800f374:	617b      	str	r3, [r7, #20]
  if (remove) {
 800f376:	697b      	ldr	r3, [r7, #20]
 800f378:	2b00      	cmp	r3, #0
 800f37a:	d006      	beq.n	800f38a <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800f37c:	f107 0310 	add.w	r3, r7, #16
 800f380:	461a      	mov	r2, r3
 800f382:	68b9      	ldr	r1, [r7, #8]
 800f384:	68f8      	ldr	r0, [r7, #12]
 800f386:	f7ff ff49 	bl	800f21c <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 800f38a:	69fa      	ldr	r2, [r7, #28]
 800f38c:	6879      	ldr	r1, [r7, #4]
 800f38e:	68f8      	ldr	r0, [r7, #12]
 800f390:	f7ff ff8e 	bl	800f2b0 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 800f394:	69ba      	ldr	r2, [r7, #24]
 800f396:	6839      	ldr	r1, [r7, #0]
 800f398:	68f8      	ldr	r0, [r7, #12]
 800f39a:	f7ff ffa8 	bl	800f2ee <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 800f39e:	697b      	ldr	r3, [r7, #20]
 800f3a0:	2b00      	cmp	r3, #0
 800f3a2:	d106      	bne.n	800f3b2 <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800f3a4:	f107 0310 	add.w	r3, r7, #16
 800f3a8:	461a      	mov	r2, r3
 800f3aa:	68b9      	ldr	r1, [r7, #8]
 800f3ac:	68f8      	ldr	r0, [r7, #12]
 800f3ae:	f7ff ff35 	bl	800f21c <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 800f3b2:	bf00      	nop
 800f3b4:	3720      	adds	r7, #32
 800f3b6:	46bd      	mov	sp, r7
 800f3b8:	bd80      	pop	{r7, pc}
 800f3ba:	bf00      	nop
 800f3bc:	0801d950 	.word	0x0801d950

0800f3c0 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 800f3c0:	b480      	push	{r7}
 800f3c2:	b083      	sub	sp, #12
 800f3c4:	af00      	add	r7, sp, #0
 800f3c6:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 800f3c8:	4a04      	ldr	r2, [pc, #16]	; (800f3dc <netif_set_default+0x1c>)
 800f3ca:	687b      	ldr	r3, [r7, #4]
 800f3cc:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 800f3ce:	bf00      	nop
 800f3d0:	370c      	adds	r7, #12
 800f3d2:	46bd      	mov	sp, r7
 800f3d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3d8:	4770      	bx	lr
 800f3da:	bf00      	nop
 800f3dc:	20007fd0 	.word	0x20007fd0

0800f3e0 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 800f3e0:	b580      	push	{r7, lr}
 800f3e2:	b082      	sub	sp, #8
 800f3e4:	af00      	add	r7, sp, #0
 800f3e6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 800f3e8:	687b      	ldr	r3, [r7, #4]
 800f3ea:	2b00      	cmp	r3, #0
 800f3ec:	d107      	bne.n	800f3fe <netif_set_up+0x1e>
 800f3ee:	4b0f      	ldr	r3, [pc, #60]	; (800f42c <netif_set_up+0x4c>)
 800f3f0:	f44f 7254 	mov.w	r2, #848	; 0x350
 800f3f4:	490e      	ldr	r1, [pc, #56]	; (800f430 <netif_set_up+0x50>)
 800f3f6:	480f      	ldr	r0, [pc, #60]	; (800f434 <netif_set_up+0x54>)
 800f3f8:	f009 fb14 	bl	8018a24 <iprintf>
 800f3fc:	e013      	b.n	800f426 <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 800f3fe:	687b      	ldr	r3, [r7, #4]
 800f400:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800f404:	f003 0301 	and.w	r3, r3, #1
 800f408:	2b00      	cmp	r3, #0
 800f40a:	d10c      	bne.n	800f426 <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 800f40c:	687b      	ldr	r3, [r7, #4]
 800f40e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800f412:	f043 0301 	orr.w	r3, r3, #1
 800f416:	b2da      	uxtb	r2, r3
 800f418:	687b      	ldr	r3, [r7, #4]
 800f41a:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800f41e:	2103      	movs	r1, #3
 800f420:	6878      	ldr	r0, [r7, #4]
 800f422:	f000 f809 	bl	800f438 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 800f426:	3708      	adds	r7, #8
 800f428:	46bd      	mov	sp, r7
 800f42a:	bd80      	pop	{r7, pc}
 800f42c:	0801b1d0 	.word	0x0801b1d0
 800f430:	0801b358 	.word	0x0801b358
 800f434:	0801b220 	.word	0x0801b220

0800f438 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 800f438:	b580      	push	{r7, lr}
 800f43a:	b082      	sub	sp, #8
 800f43c:	af00      	add	r7, sp, #0
 800f43e:	6078      	str	r0, [r7, #4]
 800f440:	460b      	mov	r3, r1
 800f442:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 800f444:	687b      	ldr	r3, [r7, #4]
 800f446:	2b00      	cmp	r3, #0
 800f448:	d106      	bne.n	800f458 <netif_issue_reports+0x20>
 800f44a:	4b18      	ldr	r3, [pc, #96]	; (800f4ac <netif_issue_reports+0x74>)
 800f44c:	f240 326d 	movw	r2, #877	; 0x36d
 800f450:	4917      	ldr	r1, [pc, #92]	; (800f4b0 <netif_issue_reports+0x78>)
 800f452:	4818      	ldr	r0, [pc, #96]	; (800f4b4 <netif_issue_reports+0x7c>)
 800f454:	f009 fae6 	bl	8018a24 <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800f458:	687b      	ldr	r3, [r7, #4]
 800f45a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800f45e:	f003 0304 	and.w	r3, r3, #4
 800f462:	2b00      	cmp	r3, #0
 800f464:	d01e      	beq.n	800f4a4 <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 800f466:	687b      	ldr	r3, [r7, #4]
 800f468:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800f46c:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800f470:	2b00      	cmp	r3, #0
 800f472:	d017      	beq.n	800f4a4 <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800f474:	78fb      	ldrb	r3, [r7, #3]
 800f476:	f003 0301 	and.w	r3, r3, #1
 800f47a:	2b00      	cmp	r3, #0
 800f47c:	d013      	beq.n	800f4a6 <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800f47e:	687b      	ldr	r3, [r7, #4]
 800f480:	3304      	adds	r3, #4
 800f482:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800f484:	2b00      	cmp	r3, #0
 800f486:	d00e      	beq.n	800f4a6 <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 800f488:	687b      	ldr	r3, [r7, #4]
 800f48a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800f48e:	f003 0308 	and.w	r3, r3, #8
 800f492:	2b00      	cmp	r3, #0
 800f494:	d007      	beq.n	800f4a6 <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 800f496:	687b      	ldr	r3, [r7, #4]
 800f498:	3304      	adds	r3, #4
 800f49a:	4619      	mov	r1, r3
 800f49c:	6878      	ldr	r0, [r7, #4]
 800f49e:	f007 f9e7 	bl	8016870 <etharp_request>
 800f4a2:	e000      	b.n	800f4a6 <netif_issue_reports+0x6e>
    return;
 800f4a4:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 800f4a6:	3708      	adds	r7, #8
 800f4a8:	46bd      	mov	sp, r7
 800f4aa:	bd80      	pop	{r7, pc}
 800f4ac:	0801b1d0 	.word	0x0801b1d0
 800f4b0:	0801b374 	.word	0x0801b374
 800f4b4:	0801b220 	.word	0x0801b220

0800f4b8 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 800f4b8:	b580      	push	{r7, lr}
 800f4ba:	b082      	sub	sp, #8
 800f4bc:	af00      	add	r7, sp, #0
 800f4be:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 800f4c0:	687b      	ldr	r3, [r7, #4]
 800f4c2:	2b00      	cmp	r3, #0
 800f4c4:	d107      	bne.n	800f4d6 <netif_set_down+0x1e>
 800f4c6:	4b12      	ldr	r3, [pc, #72]	; (800f510 <netif_set_down+0x58>)
 800f4c8:	f240 329b 	movw	r2, #923	; 0x39b
 800f4cc:	4911      	ldr	r1, [pc, #68]	; (800f514 <netif_set_down+0x5c>)
 800f4ce:	4812      	ldr	r0, [pc, #72]	; (800f518 <netif_set_down+0x60>)
 800f4d0:	f009 faa8 	bl	8018a24 <iprintf>
 800f4d4:	e019      	b.n	800f50a <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 800f4d6:	687b      	ldr	r3, [r7, #4]
 800f4d8:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800f4dc:	f003 0301 	and.w	r3, r3, #1
 800f4e0:	2b00      	cmp	r3, #0
 800f4e2:	d012      	beq.n	800f50a <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 800f4e4:	687b      	ldr	r3, [r7, #4]
 800f4e6:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800f4ea:	f023 0301 	bic.w	r3, r3, #1
 800f4ee:	b2da      	uxtb	r2, r3
 800f4f0:	687b      	ldr	r3, [r7, #4]
 800f4f2:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 800f4f6:	687b      	ldr	r3, [r7, #4]
 800f4f8:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800f4fc:	f003 0308 	and.w	r3, r3, #8
 800f500:	2b00      	cmp	r3, #0
 800f502:	d002      	beq.n	800f50a <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 800f504:	6878      	ldr	r0, [r7, #4]
 800f506:	f006 fd71 	bl	8015fec <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 800f50a:	3708      	adds	r7, #8
 800f50c:	46bd      	mov	sp, r7
 800f50e:	bd80      	pop	{r7, pc}
 800f510:	0801b1d0 	.word	0x0801b1d0
 800f514:	0801b398 	.word	0x0801b398
 800f518:	0801b220 	.word	0x0801b220

0800f51c <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 800f51c:	b580      	push	{r7, lr}
 800f51e:	b082      	sub	sp, #8
 800f520:	af00      	add	r7, sp, #0
 800f522:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 800f524:	687b      	ldr	r3, [r7, #4]
 800f526:	2b00      	cmp	r3, #0
 800f528:	d107      	bne.n	800f53a <netif_set_link_up+0x1e>
 800f52a:	4b13      	ldr	r3, [pc, #76]	; (800f578 <netif_set_link_up+0x5c>)
 800f52c:	f44f 7278 	mov.w	r2, #992	; 0x3e0
 800f530:	4912      	ldr	r1, [pc, #72]	; (800f57c <netif_set_link_up+0x60>)
 800f532:	4813      	ldr	r0, [pc, #76]	; (800f580 <netif_set_link_up+0x64>)
 800f534:	f009 fa76 	bl	8018a24 <iprintf>
 800f538:	e01b      	b.n	800f572 <netif_set_link_up+0x56>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 800f53a:	687b      	ldr	r3, [r7, #4]
 800f53c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800f540:	f003 0304 	and.w	r3, r3, #4
 800f544:	2b00      	cmp	r3, #0
 800f546:	d114      	bne.n	800f572 <netif_set_link_up+0x56>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 800f548:	687b      	ldr	r3, [r7, #4]
 800f54a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800f54e:	f043 0304 	orr.w	r3, r3, #4
 800f552:	b2da      	uxtb	r2, r3
 800f554:	687b      	ldr	r3, [r7, #4]
 800f556:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800f55a:	2103      	movs	r1, #3
 800f55c:	6878      	ldr	r0, [r7, #4]
 800f55e:	f7ff ff6b 	bl	800f438 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 800f562:	687b      	ldr	r3, [r7, #4]
 800f564:	69db      	ldr	r3, [r3, #28]
 800f566:	2b00      	cmp	r3, #0
 800f568:	d003      	beq.n	800f572 <netif_set_link_up+0x56>
 800f56a:	687b      	ldr	r3, [r7, #4]
 800f56c:	69db      	ldr	r3, [r3, #28]
 800f56e:	6878      	ldr	r0, [r7, #4]
 800f570:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 800f572:	3708      	adds	r7, #8
 800f574:	46bd      	mov	sp, r7
 800f576:	bd80      	pop	{r7, pc}
 800f578:	0801b1d0 	.word	0x0801b1d0
 800f57c:	0801b3b8 	.word	0x0801b3b8
 800f580:	0801b220 	.word	0x0801b220

0800f584 <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 800f584:	b580      	push	{r7, lr}
 800f586:	b082      	sub	sp, #8
 800f588:	af00      	add	r7, sp, #0
 800f58a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 800f58c:	687b      	ldr	r3, [r7, #4]
 800f58e:	2b00      	cmp	r3, #0
 800f590:	d107      	bne.n	800f5a2 <netif_set_link_down+0x1e>
 800f592:	4b11      	ldr	r3, [pc, #68]	; (800f5d8 <netif_set_link_down+0x54>)
 800f594:	f240 4206 	movw	r2, #1030	; 0x406
 800f598:	4910      	ldr	r1, [pc, #64]	; (800f5dc <netif_set_link_down+0x58>)
 800f59a:	4811      	ldr	r0, [pc, #68]	; (800f5e0 <netif_set_link_down+0x5c>)
 800f59c:	f009 fa42 	bl	8018a24 <iprintf>
 800f5a0:	e017      	b.n	800f5d2 <netif_set_link_down+0x4e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 800f5a2:	687b      	ldr	r3, [r7, #4]
 800f5a4:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800f5a8:	f003 0304 	and.w	r3, r3, #4
 800f5ac:	2b00      	cmp	r3, #0
 800f5ae:	d010      	beq.n	800f5d2 <netif_set_link_down+0x4e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 800f5b0:	687b      	ldr	r3, [r7, #4]
 800f5b2:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800f5b6:	f023 0304 	bic.w	r3, r3, #4
 800f5ba:	b2da      	uxtb	r2, r3
 800f5bc:	687b      	ldr	r3, [r7, #4]
 800f5be:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    NETIF_LINK_CALLBACK(netif);
 800f5c2:	687b      	ldr	r3, [r7, #4]
 800f5c4:	69db      	ldr	r3, [r3, #28]
 800f5c6:	2b00      	cmp	r3, #0
 800f5c8:	d003      	beq.n	800f5d2 <netif_set_link_down+0x4e>
 800f5ca:	687b      	ldr	r3, [r7, #4]
 800f5cc:	69db      	ldr	r3, [r3, #28]
 800f5ce:	6878      	ldr	r0, [r7, #4]
 800f5d0:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 800f5d2:	3708      	adds	r7, #8
 800f5d4:	46bd      	mov	sp, r7
 800f5d6:	bd80      	pop	{r7, pc}
 800f5d8:	0801b1d0 	.word	0x0801b1d0
 800f5dc:	0801b3dc 	.word	0x0801b3dc
 800f5e0:	0801b220 	.word	0x0801b220

0800f5e4 <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 800f5e4:	b480      	push	{r7}
 800f5e6:	b083      	sub	sp, #12
 800f5e8:	af00      	add	r7, sp, #0
 800f5ea:	6078      	str	r0, [r7, #4]
 800f5ec:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 800f5ee:	687b      	ldr	r3, [r7, #4]
 800f5f0:	2b00      	cmp	r3, #0
 800f5f2:	d002      	beq.n	800f5fa <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 800f5f4:	687b      	ldr	r3, [r7, #4]
 800f5f6:	683a      	ldr	r2, [r7, #0]
 800f5f8:	61da      	str	r2, [r3, #28]
  }
}
 800f5fa:	bf00      	nop
 800f5fc:	370c      	adds	r7, #12
 800f5fe:	46bd      	mov	sp, r7
 800f600:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f604:	4770      	bx	lr

0800f606 <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 800f606:	b480      	push	{r7}
 800f608:	b085      	sub	sp, #20
 800f60a:	af00      	add	r7, sp, #0
 800f60c:	60f8      	str	r0, [r7, #12]
 800f60e:	60b9      	str	r1, [r7, #8]
 800f610:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 800f612:	f06f 030b 	mvn.w	r3, #11
}
 800f616:	4618      	mov	r0, r3
 800f618:	3714      	adds	r7, #20
 800f61a:	46bd      	mov	sp, r7
 800f61c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f620:	4770      	bx	lr
	...

0800f624 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 800f624:	b480      	push	{r7}
 800f626:	b085      	sub	sp, #20
 800f628:	af00      	add	r7, sp, #0
 800f62a:	4603      	mov	r3, r0
 800f62c:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 800f62e:	79fb      	ldrb	r3, [r7, #7]
 800f630:	2b00      	cmp	r3, #0
 800f632:	d013      	beq.n	800f65c <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 800f634:	4b0d      	ldr	r3, [pc, #52]	; (800f66c <netif_get_by_index+0x48>)
 800f636:	681b      	ldr	r3, [r3, #0]
 800f638:	60fb      	str	r3, [r7, #12]
 800f63a:	e00c      	b.n	800f656 <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 800f63c:	68fb      	ldr	r3, [r7, #12]
 800f63e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800f642:	3301      	adds	r3, #1
 800f644:	b2db      	uxtb	r3, r3
 800f646:	79fa      	ldrb	r2, [r7, #7]
 800f648:	429a      	cmp	r2, r3
 800f64a:	d101      	bne.n	800f650 <netif_get_by_index+0x2c>
        return netif; /* found! */
 800f64c:	68fb      	ldr	r3, [r7, #12]
 800f64e:	e006      	b.n	800f65e <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 800f650:	68fb      	ldr	r3, [r7, #12]
 800f652:	681b      	ldr	r3, [r3, #0]
 800f654:	60fb      	str	r3, [r7, #12]
 800f656:	68fb      	ldr	r3, [r7, #12]
 800f658:	2b00      	cmp	r3, #0
 800f65a:	d1ef      	bne.n	800f63c <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 800f65c:	2300      	movs	r3, #0
}
 800f65e:	4618      	mov	r0, r3
 800f660:	3714      	adds	r7, #20
 800f662:	46bd      	mov	sp, r7
 800f664:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f668:	4770      	bx	lr
 800f66a:	bf00      	nop
 800f66c:	20007fcc 	.word	0x20007fcc

0800f670 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 800f670:	b480      	push	{r7}
 800f672:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
 800f674:	4b03      	ldr	r3, [pc, #12]	; (800f684 <pbuf_pool_is_empty+0x14>)
 800f676:	2201      	movs	r2, #1
 800f678:	701a      	strb	r2, [r3, #0]
  if (!queued) {
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 800f67a:	bf00      	nop
 800f67c:	46bd      	mov	sp, r7
 800f67e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f682:	4770      	bx	lr
 800f684:	20007fd5 	.word	0x20007fd5

0800f688 <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 800f688:	b480      	push	{r7}
 800f68a:	b085      	sub	sp, #20
 800f68c:	af00      	add	r7, sp, #0
 800f68e:	60f8      	str	r0, [r7, #12]
 800f690:	60b9      	str	r1, [r7, #8]
 800f692:	4611      	mov	r1, r2
 800f694:	461a      	mov	r2, r3
 800f696:	460b      	mov	r3, r1
 800f698:	80fb      	strh	r3, [r7, #6]
 800f69a:	4613      	mov	r3, r2
 800f69c:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 800f69e:	68fb      	ldr	r3, [r7, #12]
 800f6a0:	2200      	movs	r2, #0
 800f6a2:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 800f6a4:	68fb      	ldr	r3, [r7, #12]
 800f6a6:	68ba      	ldr	r2, [r7, #8]
 800f6a8:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 800f6aa:	68fb      	ldr	r3, [r7, #12]
 800f6ac:	88fa      	ldrh	r2, [r7, #6]
 800f6ae:	811a      	strh	r2, [r3, #8]
  p->len = len;
 800f6b0:	68fb      	ldr	r3, [r7, #12]
 800f6b2:	88ba      	ldrh	r2, [r7, #4]
 800f6b4:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 800f6b6:	8b3b      	ldrh	r3, [r7, #24]
 800f6b8:	b2da      	uxtb	r2, r3
 800f6ba:	68fb      	ldr	r3, [r7, #12]
 800f6bc:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 800f6be:	68fb      	ldr	r3, [r7, #12]
 800f6c0:	7f3a      	ldrb	r2, [r7, #28]
 800f6c2:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 800f6c4:	68fb      	ldr	r3, [r7, #12]
 800f6c6:	2201      	movs	r2, #1
 800f6c8:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 800f6ca:	68fb      	ldr	r3, [r7, #12]
 800f6cc:	2200      	movs	r2, #0
 800f6ce:	73da      	strb	r2, [r3, #15]
}
 800f6d0:	bf00      	nop
 800f6d2:	3714      	adds	r7, #20
 800f6d4:	46bd      	mov	sp, r7
 800f6d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f6da:	4770      	bx	lr

0800f6dc <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 800f6dc:	b580      	push	{r7, lr}
 800f6de:	b08c      	sub	sp, #48	; 0x30
 800f6e0:	af02      	add	r7, sp, #8
 800f6e2:	4603      	mov	r3, r0
 800f6e4:	71fb      	strb	r3, [r7, #7]
 800f6e6:	460b      	mov	r3, r1
 800f6e8:	80bb      	strh	r3, [r7, #4]
 800f6ea:	4613      	mov	r3, r2
 800f6ec:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 800f6ee:	79fb      	ldrb	r3, [r7, #7]
 800f6f0:	847b      	strh	r3, [r7, #34]	; 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 800f6f2:	887b      	ldrh	r3, [r7, #2]
 800f6f4:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 800f6f8:	d07f      	beq.n	800f7fa <pbuf_alloc+0x11e>
 800f6fa:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 800f6fe:	f300 80c8 	bgt.w	800f892 <pbuf_alloc+0x1b6>
 800f702:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 800f706:	d010      	beq.n	800f72a <pbuf_alloc+0x4e>
 800f708:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 800f70c:	f300 80c1 	bgt.w	800f892 <pbuf_alloc+0x1b6>
 800f710:	2b01      	cmp	r3, #1
 800f712:	d002      	beq.n	800f71a <pbuf_alloc+0x3e>
 800f714:	2b41      	cmp	r3, #65	; 0x41
 800f716:	f040 80bc 	bne.w	800f892 <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 800f71a:	887a      	ldrh	r2, [r7, #2]
 800f71c:	88bb      	ldrh	r3, [r7, #4]
 800f71e:	4619      	mov	r1, r3
 800f720:	2000      	movs	r0, #0
 800f722:	f000 f8d1 	bl	800f8c8 <pbuf_alloc_reference>
 800f726:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 800f728:	e0bd      	b.n	800f8a6 <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 800f72a:	2300      	movs	r3, #0
 800f72c:	627b      	str	r3, [r7, #36]	; 0x24
      last = NULL;
 800f72e:	2300      	movs	r3, #0
 800f730:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 800f732:	88bb      	ldrh	r3, [r7, #4]
 800f734:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 800f736:	2008      	movs	r0, #8
 800f738:	f7ff fbee 	bl	800ef18 <memp_malloc>
 800f73c:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 800f73e:	693b      	ldr	r3, [r7, #16]
 800f740:	2b00      	cmp	r3, #0
 800f742:	d109      	bne.n	800f758 <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 800f744:	f7ff ff94 	bl	800f670 <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 800f748:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f74a:	2b00      	cmp	r3, #0
 800f74c:	d002      	beq.n	800f754 <pbuf_alloc+0x78>
            pbuf_free(p);
 800f74e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800f750:	f000 faa8 	bl	800fca4 <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 800f754:	2300      	movs	r3, #0
 800f756:	e0a7      	b.n	800f8a8 <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 800f758:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800f75a:	3303      	adds	r3, #3
 800f75c:	b29b      	uxth	r3, r3
 800f75e:	f023 0303 	bic.w	r3, r3, #3
 800f762:	b29b      	uxth	r3, r3
 800f764:	f5c3 7314 	rsb	r3, r3, #592	; 0x250
 800f768:	b29b      	uxth	r3, r3
 800f76a:	8b7a      	ldrh	r2, [r7, #26]
 800f76c:	4293      	cmp	r3, r2
 800f76e:	bf28      	it	cs
 800f770:	4613      	movcs	r3, r2
 800f772:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 800f774:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800f776:	3310      	adds	r3, #16
 800f778:	693a      	ldr	r2, [r7, #16]
 800f77a:	4413      	add	r3, r2
 800f77c:	3303      	adds	r3, #3
 800f77e:	f023 0303 	bic.w	r3, r3, #3
 800f782:	4618      	mov	r0, r3
 800f784:	89f9      	ldrh	r1, [r7, #14]
 800f786:	8b7a      	ldrh	r2, [r7, #26]
 800f788:	2300      	movs	r3, #0
 800f78a:	9301      	str	r3, [sp, #4]
 800f78c:	887b      	ldrh	r3, [r7, #2]
 800f78e:	9300      	str	r3, [sp, #0]
 800f790:	460b      	mov	r3, r1
 800f792:	4601      	mov	r1, r0
 800f794:	6938      	ldr	r0, [r7, #16]
 800f796:	f7ff ff77 	bl	800f688 <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 800f79a:	693b      	ldr	r3, [r7, #16]
 800f79c:	685b      	ldr	r3, [r3, #4]
 800f79e:	f003 0303 	and.w	r3, r3, #3
 800f7a2:	2b00      	cmp	r3, #0
 800f7a4:	d006      	beq.n	800f7b4 <pbuf_alloc+0xd8>
 800f7a6:	4b42      	ldr	r3, [pc, #264]	; (800f8b0 <pbuf_alloc+0x1d4>)
 800f7a8:	f44f 7280 	mov.w	r2, #256	; 0x100
 800f7ac:	4941      	ldr	r1, [pc, #260]	; (800f8b4 <pbuf_alloc+0x1d8>)
 800f7ae:	4842      	ldr	r0, [pc, #264]	; (800f8b8 <pbuf_alloc+0x1dc>)
 800f7b0:	f009 f938 	bl	8018a24 <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 800f7b4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800f7b6:	3303      	adds	r3, #3
 800f7b8:	f023 0303 	bic.w	r3, r3, #3
 800f7bc:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 800f7c0:	d106      	bne.n	800f7d0 <pbuf_alloc+0xf4>
 800f7c2:	4b3b      	ldr	r3, [pc, #236]	; (800f8b0 <pbuf_alloc+0x1d4>)
 800f7c4:	f44f 7281 	mov.w	r2, #258	; 0x102
 800f7c8:	493c      	ldr	r1, [pc, #240]	; (800f8bc <pbuf_alloc+0x1e0>)
 800f7ca:	483b      	ldr	r0, [pc, #236]	; (800f8b8 <pbuf_alloc+0x1dc>)
 800f7cc:	f009 f92a 	bl	8018a24 <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 800f7d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f7d2:	2b00      	cmp	r3, #0
 800f7d4:	d102      	bne.n	800f7dc <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 800f7d6:	693b      	ldr	r3, [r7, #16]
 800f7d8:	627b      	str	r3, [r7, #36]	; 0x24
 800f7da:	e002      	b.n	800f7e2 <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 800f7dc:	69fb      	ldr	r3, [r7, #28]
 800f7de:	693a      	ldr	r2, [r7, #16]
 800f7e0:	601a      	str	r2, [r3, #0]
        }
        last = q;
 800f7e2:	693b      	ldr	r3, [r7, #16]
 800f7e4:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 800f7e6:	8b7a      	ldrh	r2, [r7, #26]
 800f7e8:	89fb      	ldrh	r3, [r7, #14]
 800f7ea:	1ad3      	subs	r3, r2, r3
 800f7ec:	837b      	strh	r3, [r7, #26]
        offset = 0;
 800f7ee:	2300      	movs	r3, #0
 800f7f0:	847b      	strh	r3, [r7, #34]	; 0x22
      } while (rem_len > 0);
 800f7f2:	8b7b      	ldrh	r3, [r7, #26]
 800f7f4:	2b00      	cmp	r3, #0
 800f7f6:	d19e      	bne.n	800f736 <pbuf_alloc+0x5a>
      break;
 800f7f8:	e055      	b.n	800f8a6 <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 800f7fa:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800f7fc:	3303      	adds	r3, #3
 800f7fe:	b29b      	uxth	r3, r3
 800f800:	f023 0303 	bic.w	r3, r3, #3
 800f804:	b29a      	uxth	r2, r3
 800f806:	88bb      	ldrh	r3, [r7, #4]
 800f808:	3303      	adds	r3, #3
 800f80a:	b29b      	uxth	r3, r3
 800f80c:	f023 0303 	bic.w	r3, r3, #3
 800f810:	b29b      	uxth	r3, r3
 800f812:	4413      	add	r3, r2
 800f814:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 800f816:	8b3b      	ldrh	r3, [r7, #24]
 800f818:	3310      	adds	r3, #16
 800f81a:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800f81c:	8b3a      	ldrh	r2, [r7, #24]
 800f81e:	88bb      	ldrh	r3, [r7, #4]
 800f820:	3303      	adds	r3, #3
 800f822:	f023 0303 	bic.w	r3, r3, #3
 800f826:	429a      	cmp	r2, r3
 800f828:	d306      	bcc.n	800f838 <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 800f82a:	8afa      	ldrh	r2, [r7, #22]
 800f82c:	88bb      	ldrh	r3, [r7, #4]
 800f82e:	3303      	adds	r3, #3
 800f830:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800f834:	429a      	cmp	r2, r3
 800f836:	d201      	bcs.n	800f83c <pbuf_alloc+0x160>
        return NULL;
 800f838:	2300      	movs	r3, #0
 800f83a:	e035      	b.n	800f8a8 <pbuf_alloc+0x1cc>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 800f83c:	8afb      	ldrh	r3, [r7, #22]
 800f83e:	4618      	mov	r0, r3
 800f840:	f7ff f9da 	bl	800ebf8 <mem_malloc>
 800f844:	6278      	str	r0, [r7, #36]	; 0x24
      if (p == NULL) {
 800f846:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f848:	2b00      	cmp	r3, #0
 800f84a:	d101      	bne.n	800f850 <pbuf_alloc+0x174>
        return NULL;
 800f84c:	2300      	movs	r3, #0
 800f84e:	e02b      	b.n	800f8a8 <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 800f850:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800f852:	3310      	adds	r3, #16
 800f854:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f856:	4413      	add	r3, r2
 800f858:	3303      	adds	r3, #3
 800f85a:	f023 0303 	bic.w	r3, r3, #3
 800f85e:	4618      	mov	r0, r3
 800f860:	88b9      	ldrh	r1, [r7, #4]
 800f862:	88ba      	ldrh	r2, [r7, #4]
 800f864:	2300      	movs	r3, #0
 800f866:	9301      	str	r3, [sp, #4]
 800f868:	887b      	ldrh	r3, [r7, #2]
 800f86a:	9300      	str	r3, [sp, #0]
 800f86c:	460b      	mov	r3, r1
 800f86e:	4601      	mov	r1, r0
 800f870:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800f872:	f7ff ff09 	bl	800f688 <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 800f876:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f878:	685b      	ldr	r3, [r3, #4]
 800f87a:	f003 0303 	and.w	r3, r3, #3
 800f87e:	2b00      	cmp	r3, #0
 800f880:	d010      	beq.n	800f8a4 <pbuf_alloc+0x1c8>
 800f882:	4b0b      	ldr	r3, [pc, #44]	; (800f8b0 <pbuf_alloc+0x1d4>)
 800f884:	f44f 7291 	mov.w	r2, #290	; 0x122
 800f888:	490d      	ldr	r1, [pc, #52]	; (800f8c0 <pbuf_alloc+0x1e4>)
 800f88a:	480b      	ldr	r0, [pc, #44]	; (800f8b8 <pbuf_alloc+0x1dc>)
 800f88c:	f009 f8ca 	bl	8018a24 <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 800f890:	e008      	b.n	800f8a4 <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 800f892:	4b07      	ldr	r3, [pc, #28]	; (800f8b0 <pbuf_alloc+0x1d4>)
 800f894:	f240 1227 	movw	r2, #295	; 0x127
 800f898:	490a      	ldr	r1, [pc, #40]	; (800f8c4 <pbuf_alloc+0x1e8>)
 800f89a:	4807      	ldr	r0, [pc, #28]	; (800f8b8 <pbuf_alloc+0x1dc>)
 800f89c:	f009 f8c2 	bl	8018a24 <iprintf>
      return NULL;
 800f8a0:	2300      	movs	r3, #0
 800f8a2:	e001      	b.n	800f8a8 <pbuf_alloc+0x1cc>
      break;
 800f8a4:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 800f8a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800f8a8:	4618      	mov	r0, r3
 800f8aa:	3728      	adds	r7, #40	; 0x28
 800f8ac:	46bd      	mov	sp, r7
 800f8ae:	bd80      	pop	{r7, pc}
 800f8b0:	0801b400 	.word	0x0801b400
 800f8b4:	0801b430 	.word	0x0801b430
 800f8b8:	0801b460 	.word	0x0801b460
 800f8bc:	0801b488 	.word	0x0801b488
 800f8c0:	0801b4bc 	.word	0x0801b4bc
 800f8c4:	0801b4e8 	.word	0x0801b4e8

0800f8c8 <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 800f8c8:	b580      	push	{r7, lr}
 800f8ca:	b086      	sub	sp, #24
 800f8cc:	af02      	add	r7, sp, #8
 800f8ce:	6078      	str	r0, [r7, #4]
 800f8d0:	460b      	mov	r3, r1
 800f8d2:	807b      	strh	r3, [r7, #2]
 800f8d4:	4613      	mov	r3, r2
 800f8d6:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 800f8d8:	883b      	ldrh	r3, [r7, #0]
 800f8da:	2b41      	cmp	r3, #65	; 0x41
 800f8dc:	d009      	beq.n	800f8f2 <pbuf_alloc_reference+0x2a>
 800f8de:	883b      	ldrh	r3, [r7, #0]
 800f8e0:	2b01      	cmp	r3, #1
 800f8e2:	d006      	beq.n	800f8f2 <pbuf_alloc_reference+0x2a>
 800f8e4:	4b0f      	ldr	r3, [pc, #60]	; (800f924 <pbuf_alloc_reference+0x5c>)
 800f8e6:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 800f8ea:	490f      	ldr	r1, [pc, #60]	; (800f928 <pbuf_alloc_reference+0x60>)
 800f8ec:	480f      	ldr	r0, [pc, #60]	; (800f92c <pbuf_alloc_reference+0x64>)
 800f8ee:	f009 f899 	bl	8018a24 <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 800f8f2:	2007      	movs	r0, #7
 800f8f4:	f7ff fb10 	bl	800ef18 <memp_malloc>
 800f8f8:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 800f8fa:	68fb      	ldr	r3, [r7, #12]
 800f8fc:	2b00      	cmp	r3, #0
 800f8fe:	d101      	bne.n	800f904 <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 800f900:	2300      	movs	r3, #0
 800f902:	e00b      	b.n	800f91c <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 800f904:	8879      	ldrh	r1, [r7, #2]
 800f906:	887a      	ldrh	r2, [r7, #2]
 800f908:	2300      	movs	r3, #0
 800f90a:	9301      	str	r3, [sp, #4]
 800f90c:	883b      	ldrh	r3, [r7, #0]
 800f90e:	9300      	str	r3, [sp, #0]
 800f910:	460b      	mov	r3, r1
 800f912:	6879      	ldr	r1, [r7, #4]
 800f914:	68f8      	ldr	r0, [r7, #12]
 800f916:	f7ff feb7 	bl	800f688 <pbuf_init_alloced_pbuf>
  return p;
 800f91a:	68fb      	ldr	r3, [r7, #12]
}
 800f91c:	4618      	mov	r0, r3
 800f91e:	3710      	adds	r7, #16
 800f920:	46bd      	mov	sp, r7
 800f922:	bd80      	pop	{r7, pc}
 800f924:	0801b400 	.word	0x0801b400
 800f928:	0801b504 	.word	0x0801b504
 800f92c:	0801b460 	.word	0x0801b460

0800f930 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 800f930:	b580      	push	{r7, lr}
 800f932:	b088      	sub	sp, #32
 800f934:	af02      	add	r7, sp, #8
 800f936:	607b      	str	r3, [r7, #4]
 800f938:	4603      	mov	r3, r0
 800f93a:	73fb      	strb	r3, [r7, #15]
 800f93c:	460b      	mov	r3, r1
 800f93e:	81bb      	strh	r3, [r7, #12]
 800f940:	4613      	mov	r3, r2
 800f942:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 800f944:	7bfb      	ldrb	r3, [r7, #15]
 800f946:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 800f948:	8a7b      	ldrh	r3, [r7, #18]
 800f94a:	3303      	adds	r3, #3
 800f94c:	f023 0203 	bic.w	r2, r3, #3
 800f950:	89bb      	ldrh	r3, [r7, #12]
 800f952:	441a      	add	r2, r3
 800f954:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800f956:	429a      	cmp	r2, r3
 800f958:	d901      	bls.n	800f95e <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 800f95a:	2300      	movs	r3, #0
 800f95c:	e018      	b.n	800f990 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 800f95e:	6a3b      	ldr	r3, [r7, #32]
 800f960:	2b00      	cmp	r3, #0
 800f962:	d007      	beq.n	800f974 <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 800f964:	8a7b      	ldrh	r3, [r7, #18]
 800f966:	3303      	adds	r3, #3
 800f968:	f023 0303 	bic.w	r3, r3, #3
 800f96c:	6a3a      	ldr	r2, [r7, #32]
 800f96e:	4413      	add	r3, r2
 800f970:	617b      	str	r3, [r7, #20]
 800f972:	e001      	b.n	800f978 <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 800f974:	2300      	movs	r3, #0
 800f976:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 800f978:	6878      	ldr	r0, [r7, #4]
 800f97a:	89b9      	ldrh	r1, [r7, #12]
 800f97c:	89ba      	ldrh	r2, [r7, #12]
 800f97e:	2302      	movs	r3, #2
 800f980:	9301      	str	r3, [sp, #4]
 800f982:	897b      	ldrh	r3, [r7, #10]
 800f984:	9300      	str	r3, [sp, #0]
 800f986:	460b      	mov	r3, r1
 800f988:	6979      	ldr	r1, [r7, #20]
 800f98a:	f7ff fe7d 	bl	800f688 <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 800f98e:	687b      	ldr	r3, [r7, #4]
}
 800f990:	4618      	mov	r0, r3
 800f992:	3718      	adds	r7, #24
 800f994:	46bd      	mov	sp, r7
 800f996:	bd80      	pop	{r7, pc}

0800f998 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 800f998:	b580      	push	{r7, lr}
 800f99a:	b084      	sub	sp, #16
 800f99c:	af00      	add	r7, sp, #0
 800f99e:	6078      	str	r0, [r7, #4]
 800f9a0:	460b      	mov	r3, r1
 800f9a2:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 800f9a4:	687b      	ldr	r3, [r7, #4]
 800f9a6:	2b00      	cmp	r3, #0
 800f9a8:	d106      	bne.n	800f9b8 <pbuf_realloc+0x20>
 800f9aa:	4b3a      	ldr	r3, [pc, #232]	; (800fa94 <pbuf_realloc+0xfc>)
 800f9ac:	f44f 72cc 	mov.w	r2, #408	; 0x198
 800f9b0:	4939      	ldr	r1, [pc, #228]	; (800fa98 <pbuf_realloc+0x100>)
 800f9b2:	483a      	ldr	r0, [pc, #232]	; (800fa9c <pbuf_realloc+0x104>)
 800f9b4:	f009 f836 	bl	8018a24 <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 800f9b8:	687b      	ldr	r3, [r7, #4]
 800f9ba:	891b      	ldrh	r3, [r3, #8]
 800f9bc:	887a      	ldrh	r2, [r7, #2]
 800f9be:	429a      	cmp	r2, r3
 800f9c0:	d263      	bcs.n	800fa8a <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 800f9c2:	687b      	ldr	r3, [r7, #4]
 800f9c4:	891a      	ldrh	r2, [r3, #8]
 800f9c6:	887b      	ldrh	r3, [r7, #2]
 800f9c8:	1ad3      	subs	r3, r2, r3
 800f9ca:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 800f9cc:	887b      	ldrh	r3, [r7, #2]
 800f9ce:	817b      	strh	r3, [r7, #10]
  q = p;
 800f9d0:	687b      	ldr	r3, [r7, #4]
 800f9d2:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 800f9d4:	e018      	b.n	800fa08 <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 800f9d6:	68fb      	ldr	r3, [r7, #12]
 800f9d8:	895b      	ldrh	r3, [r3, #10]
 800f9da:	897a      	ldrh	r2, [r7, #10]
 800f9dc:	1ad3      	subs	r3, r2, r3
 800f9de:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 800f9e0:	68fb      	ldr	r3, [r7, #12]
 800f9e2:	891a      	ldrh	r2, [r3, #8]
 800f9e4:	893b      	ldrh	r3, [r7, #8]
 800f9e6:	1ad3      	subs	r3, r2, r3
 800f9e8:	b29a      	uxth	r2, r3
 800f9ea:	68fb      	ldr	r3, [r7, #12]
 800f9ec:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 800f9ee:	68fb      	ldr	r3, [r7, #12]
 800f9f0:	681b      	ldr	r3, [r3, #0]
 800f9f2:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 800f9f4:	68fb      	ldr	r3, [r7, #12]
 800f9f6:	2b00      	cmp	r3, #0
 800f9f8:	d106      	bne.n	800fa08 <pbuf_realloc+0x70>
 800f9fa:	4b26      	ldr	r3, [pc, #152]	; (800fa94 <pbuf_realloc+0xfc>)
 800f9fc:	f240 12af 	movw	r2, #431	; 0x1af
 800fa00:	4927      	ldr	r1, [pc, #156]	; (800faa0 <pbuf_realloc+0x108>)
 800fa02:	4826      	ldr	r0, [pc, #152]	; (800fa9c <pbuf_realloc+0x104>)
 800fa04:	f009 f80e 	bl	8018a24 <iprintf>
  while (rem_len > q->len) {
 800fa08:	68fb      	ldr	r3, [r7, #12]
 800fa0a:	895b      	ldrh	r3, [r3, #10]
 800fa0c:	897a      	ldrh	r2, [r7, #10]
 800fa0e:	429a      	cmp	r2, r3
 800fa10:	d8e1      	bhi.n	800f9d6 <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 800fa12:	68fb      	ldr	r3, [r7, #12]
 800fa14:	7b1b      	ldrb	r3, [r3, #12]
 800fa16:	f003 030f 	and.w	r3, r3, #15
 800fa1a:	2b00      	cmp	r3, #0
 800fa1c:	d121      	bne.n	800fa62 <pbuf_realloc+0xca>
 800fa1e:	68fb      	ldr	r3, [r7, #12]
 800fa20:	895b      	ldrh	r3, [r3, #10]
 800fa22:	897a      	ldrh	r2, [r7, #10]
 800fa24:	429a      	cmp	r2, r3
 800fa26:	d01c      	beq.n	800fa62 <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 800fa28:	68fb      	ldr	r3, [r7, #12]
 800fa2a:	7b5b      	ldrb	r3, [r3, #13]
 800fa2c:	f003 0302 	and.w	r3, r3, #2
 800fa30:	2b00      	cmp	r3, #0
 800fa32:	d116      	bne.n	800fa62 <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 800fa34:	68fb      	ldr	r3, [r7, #12]
 800fa36:	685a      	ldr	r2, [r3, #4]
 800fa38:	68fb      	ldr	r3, [r7, #12]
 800fa3a:	1ad3      	subs	r3, r2, r3
 800fa3c:	b29a      	uxth	r2, r3
 800fa3e:	897b      	ldrh	r3, [r7, #10]
 800fa40:	4413      	add	r3, r2
 800fa42:	b29b      	uxth	r3, r3
 800fa44:	4619      	mov	r1, r3
 800fa46:	68f8      	ldr	r0, [r7, #12]
 800fa48:	f7fe ffda 	bl	800ea00 <mem_trim>
 800fa4c:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 800fa4e:	68fb      	ldr	r3, [r7, #12]
 800fa50:	2b00      	cmp	r3, #0
 800fa52:	d106      	bne.n	800fa62 <pbuf_realloc+0xca>
 800fa54:	4b0f      	ldr	r3, [pc, #60]	; (800fa94 <pbuf_realloc+0xfc>)
 800fa56:	f240 12bd 	movw	r2, #445	; 0x1bd
 800fa5a:	4912      	ldr	r1, [pc, #72]	; (800faa4 <pbuf_realloc+0x10c>)
 800fa5c:	480f      	ldr	r0, [pc, #60]	; (800fa9c <pbuf_realloc+0x104>)
 800fa5e:	f008 ffe1 	bl	8018a24 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 800fa62:	68fb      	ldr	r3, [r7, #12]
 800fa64:	897a      	ldrh	r2, [r7, #10]
 800fa66:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 800fa68:	68fb      	ldr	r3, [r7, #12]
 800fa6a:	895a      	ldrh	r2, [r3, #10]
 800fa6c:	68fb      	ldr	r3, [r7, #12]
 800fa6e:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 800fa70:	68fb      	ldr	r3, [r7, #12]
 800fa72:	681b      	ldr	r3, [r3, #0]
 800fa74:	2b00      	cmp	r3, #0
 800fa76:	d004      	beq.n	800fa82 <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 800fa78:	68fb      	ldr	r3, [r7, #12]
 800fa7a:	681b      	ldr	r3, [r3, #0]
 800fa7c:	4618      	mov	r0, r3
 800fa7e:	f000 f911 	bl	800fca4 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 800fa82:	68fb      	ldr	r3, [r7, #12]
 800fa84:	2200      	movs	r2, #0
 800fa86:	601a      	str	r2, [r3, #0]
 800fa88:	e000      	b.n	800fa8c <pbuf_realloc+0xf4>
    return;
 800fa8a:	bf00      	nop

}
 800fa8c:	3710      	adds	r7, #16
 800fa8e:	46bd      	mov	sp, r7
 800fa90:	bd80      	pop	{r7, pc}
 800fa92:	bf00      	nop
 800fa94:	0801b400 	.word	0x0801b400
 800fa98:	0801b518 	.word	0x0801b518
 800fa9c:	0801b460 	.word	0x0801b460
 800faa0:	0801b530 	.word	0x0801b530
 800faa4:	0801b548 	.word	0x0801b548

0800faa8 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 800faa8:	b580      	push	{r7, lr}
 800faaa:	b086      	sub	sp, #24
 800faac:	af00      	add	r7, sp, #0
 800faae:	60f8      	str	r0, [r7, #12]
 800fab0:	60b9      	str	r1, [r7, #8]
 800fab2:	4613      	mov	r3, r2
 800fab4:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800fab6:	68fb      	ldr	r3, [r7, #12]
 800fab8:	2b00      	cmp	r3, #0
 800faba:	d106      	bne.n	800faca <pbuf_add_header_impl+0x22>
 800fabc:	4b2b      	ldr	r3, [pc, #172]	; (800fb6c <pbuf_add_header_impl+0xc4>)
 800fabe:	f240 12df 	movw	r2, #479	; 0x1df
 800fac2:	492b      	ldr	r1, [pc, #172]	; (800fb70 <pbuf_add_header_impl+0xc8>)
 800fac4:	482b      	ldr	r0, [pc, #172]	; (800fb74 <pbuf_add_header_impl+0xcc>)
 800fac6:	f008 ffad 	bl	8018a24 <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 800faca:	68fb      	ldr	r3, [r7, #12]
 800facc:	2b00      	cmp	r3, #0
 800face:	d003      	beq.n	800fad8 <pbuf_add_header_impl+0x30>
 800fad0:	68bb      	ldr	r3, [r7, #8]
 800fad2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800fad6:	d301      	bcc.n	800fadc <pbuf_add_header_impl+0x34>
    return 1;
 800fad8:	2301      	movs	r3, #1
 800fada:	e043      	b.n	800fb64 <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 800fadc:	68bb      	ldr	r3, [r7, #8]
 800fade:	2b00      	cmp	r3, #0
 800fae0:	d101      	bne.n	800fae6 <pbuf_add_header_impl+0x3e>
    return 0;
 800fae2:	2300      	movs	r3, #0
 800fae4:	e03e      	b.n	800fb64 <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 800fae6:	68bb      	ldr	r3, [r7, #8]
 800fae8:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 800faea:	68fb      	ldr	r3, [r7, #12]
 800faec:	891a      	ldrh	r2, [r3, #8]
 800faee:	8a7b      	ldrh	r3, [r7, #18]
 800faf0:	4413      	add	r3, r2
 800faf2:	b29b      	uxth	r3, r3
 800faf4:	8a7a      	ldrh	r2, [r7, #18]
 800faf6:	429a      	cmp	r2, r3
 800faf8:	d901      	bls.n	800fafe <pbuf_add_header_impl+0x56>
    return 1;
 800fafa:	2301      	movs	r3, #1
 800fafc:	e032      	b.n	800fb64 <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 800fafe:	68fb      	ldr	r3, [r7, #12]
 800fb00:	7b1b      	ldrb	r3, [r3, #12]
 800fb02:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 800fb04:	8a3b      	ldrh	r3, [r7, #16]
 800fb06:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800fb0a:	2b00      	cmp	r3, #0
 800fb0c:	d00c      	beq.n	800fb28 <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 800fb0e:	68fb      	ldr	r3, [r7, #12]
 800fb10:	685a      	ldr	r2, [r3, #4]
 800fb12:	68bb      	ldr	r3, [r7, #8]
 800fb14:	425b      	negs	r3, r3
 800fb16:	4413      	add	r3, r2
 800fb18:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 800fb1a:	68fb      	ldr	r3, [r7, #12]
 800fb1c:	3310      	adds	r3, #16
 800fb1e:	697a      	ldr	r2, [r7, #20]
 800fb20:	429a      	cmp	r2, r3
 800fb22:	d20d      	bcs.n	800fb40 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 800fb24:	2301      	movs	r3, #1
 800fb26:	e01d      	b.n	800fb64 <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 800fb28:	79fb      	ldrb	r3, [r7, #7]
 800fb2a:	2b00      	cmp	r3, #0
 800fb2c:	d006      	beq.n	800fb3c <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 800fb2e:	68fb      	ldr	r3, [r7, #12]
 800fb30:	685a      	ldr	r2, [r3, #4]
 800fb32:	68bb      	ldr	r3, [r7, #8]
 800fb34:	425b      	negs	r3, r3
 800fb36:	4413      	add	r3, r2
 800fb38:	617b      	str	r3, [r7, #20]
 800fb3a:	e001      	b.n	800fb40 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 800fb3c:	2301      	movs	r3, #1
 800fb3e:	e011      	b.n	800fb64 <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 800fb40:	68fb      	ldr	r3, [r7, #12]
 800fb42:	697a      	ldr	r2, [r7, #20]
 800fb44:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 800fb46:	68fb      	ldr	r3, [r7, #12]
 800fb48:	895a      	ldrh	r2, [r3, #10]
 800fb4a:	8a7b      	ldrh	r3, [r7, #18]
 800fb4c:	4413      	add	r3, r2
 800fb4e:	b29a      	uxth	r2, r3
 800fb50:	68fb      	ldr	r3, [r7, #12]
 800fb52:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 800fb54:	68fb      	ldr	r3, [r7, #12]
 800fb56:	891a      	ldrh	r2, [r3, #8]
 800fb58:	8a7b      	ldrh	r3, [r7, #18]
 800fb5a:	4413      	add	r3, r2
 800fb5c:	b29a      	uxth	r2, r3
 800fb5e:	68fb      	ldr	r3, [r7, #12]
 800fb60:	811a      	strh	r2, [r3, #8]


  return 0;
 800fb62:	2300      	movs	r3, #0
}
 800fb64:	4618      	mov	r0, r3
 800fb66:	3718      	adds	r7, #24
 800fb68:	46bd      	mov	sp, r7
 800fb6a:	bd80      	pop	{r7, pc}
 800fb6c:	0801b400 	.word	0x0801b400
 800fb70:	0801b564 	.word	0x0801b564
 800fb74:	0801b460 	.word	0x0801b460

0800fb78 <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 800fb78:	b580      	push	{r7, lr}
 800fb7a:	b082      	sub	sp, #8
 800fb7c:	af00      	add	r7, sp, #0
 800fb7e:	6078      	str	r0, [r7, #4]
 800fb80:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 800fb82:	2200      	movs	r2, #0
 800fb84:	6839      	ldr	r1, [r7, #0]
 800fb86:	6878      	ldr	r0, [r7, #4]
 800fb88:	f7ff ff8e 	bl	800faa8 <pbuf_add_header_impl>
 800fb8c:	4603      	mov	r3, r0
}
 800fb8e:	4618      	mov	r0, r3
 800fb90:	3708      	adds	r7, #8
 800fb92:	46bd      	mov	sp, r7
 800fb94:	bd80      	pop	{r7, pc}
	...

0800fb98 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 800fb98:	b580      	push	{r7, lr}
 800fb9a:	b084      	sub	sp, #16
 800fb9c:	af00      	add	r7, sp, #0
 800fb9e:	6078      	str	r0, [r7, #4]
 800fba0:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800fba2:	687b      	ldr	r3, [r7, #4]
 800fba4:	2b00      	cmp	r3, #0
 800fba6:	d106      	bne.n	800fbb6 <pbuf_remove_header+0x1e>
 800fba8:	4b20      	ldr	r3, [pc, #128]	; (800fc2c <pbuf_remove_header+0x94>)
 800fbaa:	f240 224b 	movw	r2, #587	; 0x24b
 800fbae:	4920      	ldr	r1, [pc, #128]	; (800fc30 <pbuf_remove_header+0x98>)
 800fbb0:	4820      	ldr	r0, [pc, #128]	; (800fc34 <pbuf_remove_header+0x9c>)
 800fbb2:	f008 ff37 	bl	8018a24 <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 800fbb6:	687b      	ldr	r3, [r7, #4]
 800fbb8:	2b00      	cmp	r3, #0
 800fbba:	d003      	beq.n	800fbc4 <pbuf_remove_header+0x2c>
 800fbbc:	683b      	ldr	r3, [r7, #0]
 800fbbe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800fbc2:	d301      	bcc.n	800fbc8 <pbuf_remove_header+0x30>
    return 1;
 800fbc4:	2301      	movs	r3, #1
 800fbc6:	e02c      	b.n	800fc22 <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 800fbc8:	683b      	ldr	r3, [r7, #0]
 800fbca:	2b00      	cmp	r3, #0
 800fbcc:	d101      	bne.n	800fbd2 <pbuf_remove_header+0x3a>
    return 0;
 800fbce:	2300      	movs	r3, #0
 800fbd0:	e027      	b.n	800fc22 <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 800fbd2:	683b      	ldr	r3, [r7, #0]
 800fbd4:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 800fbd6:	687b      	ldr	r3, [r7, #4]
 800fbd8:	895b      	ldrh	r3, [r3, #10]
 800fbda:	89fa      	ldrh	r2, [r7, #14]
 800fbdc:	429a      	cmp	r2, r3
 800fbde:	d908      	bls.n	800fbf2 <pbuf_remove_header+0x5a>
 800fbe0:	4b12      	ldr	r3, [pc, #72]	; (800fc2c <pbuf_remove_header+0x94>)
 800fbe2:	f240 2255 	movw	r2, #597	; 0x255
 800fbe6:	4914      	ldr	r1, [pc, #80]	; (800fc38 <pbuf_remove_header+0xa0>)
 800fbe8:	4812      	ldr	r0, [pc, #72]	; (800fc34 <pbuf_remove_header+0x9c>)
 800fbea:	f008 ff1b 	bl	8018a24 <iprintf>
 800fbee:	2301      	movs	r3, #1
 800fbf0:	e017      	b.n	800fc22 <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 800fbf2:	687b      	ldr	r3, [r7, #4]
 800fbf4:	685b      	ldr	r3, [r3, #4]
 800fbf6:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 800fbf8:	687b      	ldr	r3, [r7, #4]
 800fbfa:	685a      	ldr	r2, [r3, #4]
 800fbfc:	683b      	ldr	r3, [r7, #0]
 800fbfe:	441a      	add	r2, r3
 800fc00:	687b      	ldr	r3, [r7, #4]
 800fc02:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 800fc04:	687b      	ldr	r3, [r7, #4]
 800fc06:	895a      	ldrh	r2, [r3, #10]
 800fc08:	89fb      	ldrh	r3, [r7, #14]
 800fc0a:	1ad3      	subs	r3, r2, r3
 800fc0c:	b29a      	uxth	r2, r3
 800fc0e:	687b      	ldr	r3, [r7, #4]
 800fc10:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 800fc12:	687b      	ldr	r3, [r7, #4]
 800fc14:	891a      	ldrh	r2, [r3, #8]
 800fc16:	89fb      	ldrh	r3, [r7, #14]
 800fc18:	1ad3      	subs	r3, r2, r3
 800fc1a:	b29a      	uxth	r2, r3
 800fc1c:	687b      	ldr	r3, [r7, #4]
 800fc1e:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 800fc20:	2300      	movs	r3, #0
}
 800fc22:	4618      	mov	r0, r3
 800fc24:	3710      	adds	r7, #16
 800fc26:	46bd      	mov	sp, r7
 800fc28:	bd80      	pop	{r7, pc}
 800fc2a:	bf00      	nop
 800fc2c:	0801b400 	.word	0x0801b400
 800fc30:	0801b564 	.word	0x0801b564
 800fc34:	0801b460 	.word	0x0801b460
 800fc38:	0801b570 	.word	0x0801b570

0800fc3c <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 800fc3c:	b580      	push	{r7, lr}
 800fc3e:	b082      	sub	sp, #8
 800fc40:	af00      	add	r7, sp, #0
 800fc42:	6078      	str	r0, [r7, #4]
 800fc44:	460b      	mov	r3, r1
 800fc46:	807b      	strh	r3, [r7, #2]
 800fc48:	4613      	mov	r3, r2
 800fc4a:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 800fc4c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800fc50:	2b00      	cmp	r3, #0
 800fc52:	da08      	bge.n	800fc66 <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 800fc54:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800fc58:	425b      	negs	r3, r3
 800fc5a:	4619      	mov	r1, r3
 800fc5c:	6878      	ldr	r0, [r7, #4]
 800fc5e:	f7ff ff9b 	bl	800fb98 <pbuf_remove_header>
 800fc62:	4603      	mov	r3, r0
 800fc64:	e007      	b.n	800fc76 <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 800fc66:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800fc6a:	787a      	ldrb	r2, [r7, #1]
 800fc6c:	4619      	mov	r1, r3
 800fc6e:	6878      	ldr	r0, [r7, #4]
 800fc70:	f7ff ff1a 	bl	800faa8 <pbuf_add_header_impl>
 800fc74:	4603      	mov	r3, r0
  }
}
 800fc76:	4618      	mov	r0, r3
 800fc78:	3708      	adds	r7, #8
 800fc7a:	46bd      	mov	sp, r7
 800fc7c:	bd80      	pop	{r7, pc}

0800fc7e <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 800fc7e:	b580      	push	{r7, lr}
 800fc80:	b082      	sub	sp, #8
 800fc82:	af00      	add	r7, sp, #0
 800fc84:	6078      	str	r0, [r7, #4]
 800fc86:	460b      	mov	r3, r1
 800fc88:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 800fc8a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800fc8e:	2201      	movs	r2, #1
 800fc90:	4619      	mov	r1, r3
 800fc92:	6878      	ldr	r0, [r7, #4]
 800fc94:	f7ff ffd2 	bl	800fc3c <pbuf_header_impl>
 800fc98:	4603      	mov	r3, r0
}
 800fc9a:	4618      	mov	r0, r3
 800fc9c:	3708      	adds	r7, #8
 800fc9e:	46bd      	mov	sp, r7
 800fca0:	bd80      	pop	{r7, pc}
	...

0800fca4 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 800fca4:	b580      	push	{r7, lr}
 800fca6:	b086      	sub	sp, #24
 800fca8:	af00      	add	r7, sp, #0
 800fcaa:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 800fcac:	687b      	ldr	r3, [r7, #4]
 800fcae:	2b00      	cmp	r3, #0
 800fcb0:	d10b      	bne.n	800fcca <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 800fcb2:	687b      	ldr	r3, [r7, #4]
 800fcb4:	2b00      	cmp	r3, #0
 800fcb6:	d106      	bne.n	800fcc6 <pbuf_free+0x22>
 800fcb8:	4b38      	ldr	r3, [pc, #224]	; (800fd9c <pbuf_free+0xf8>)
 800fcba:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 800fcbe:	4938      	ldr	r1, [pc, #224]	; (800fda0 <pbuf_free+0xfc>)
 800fcc0:	4838      	ldr	r0, [pc, #224]	; (800fda4 <pbuf_free+0x100>)
 800fcc2:	f008 feaf 	bl	8018a24 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 800fcc6:	2300      	movs	r3, #0
 800fcc8:	e063      	b.n	800fd92 <pbuf_free+0xee>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 800fcca:	2300      	movs	r3, #0
 800fccc:	75fb      	strb	r3, [r7, #23]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 800fcce:	e05c      	b.n	800fd8a <pbuf_free+0xe6>
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 800fcd0:	687b      	ldr	r3, [r7, #4]
 800fcd2:	7b9b      	ldrb	r3, [r3, #14]
 800fcd4:	2b00      	cmp	r3, #0
 800fcd6:	d106      	bne.n	800fce6 <pbuf_free+0x42>
 800fcd8:	4b30      	ldr	r3, [pc, #192]	; (800fd9c <pbuf_free+0xf8>)
 800fcda:	f240 22f1 	movw	r2, #753	; 0x2f1
 800fcde:	4932      	ldr	r1, [pc, #200]	; (800fda8 <pbuf_free+0x104>)
 800fce0:	4830      	ldr	r0, [pc, #192]	; (800fda4 <pbuf_free+0x100>)
 800fce2:	f008 fe9f 	bl	8018a24 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 800fce6:	687b      	ldr	r3, [r7, #4]
 800fce8:	7b9b      	ldrb	r3, [r3, #14]
 800fcea:	3b01      	subs	r3, #1
 800fcec:	b2da      	uxtb	r2, r3
 800fcee:	687b      	ldr	r3, [r7, #4]
 800fcf0:	739a      	strb	r2, [r3, #14]
 800fcf2:	687b      	ldr	r3, [r7, #4]
 800fcf4:	7b9b      	ldrb	r3, [r3, #14]
 800fcf6:	75bb      	strb	r3, [r7, #22]
    SYS_ARCH_UNPROTECT(old_level);
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 800fcf8:	7dbb      	ldrb	r3, [r7, #22]
 800fcfa:	2b00      	cmp	r3, #0
 800fcfc:	d143      	bne.n	800fd86 <pbuf_free+0xe2>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 800fcfe:	687b      	ldr	r3, [r7, #4]
 800fd00:	681b      	ldr	r3, [r3, #0]
 800fd02:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 800fd04:	687b      	ldr	r3, [r7, #4]
 800fd06:	7b1b      	ldrb	r3, [r3, #12]
 800fd08:	f003 030f 	and.w	r3, r3, #15
 800fd0c:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 800fd0e:	687b      	ldr	r3, [r7, #4]
 800fd10:	7b5b      	ldrb	r3, [r3, #13]
 800fd12:	f003 0302 	and.w	r3, r3, #2
 800fd16:	2b00      	cmp	r3, #0
 800fd18:	d011      	beq.n	800fd3e <pbuf_free+0x9a>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 800fd1a:	687b      	ldr	r3, [r7, #4]
 800fd1c:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 800fd1e:	68bb      	ldr	r3, [r7, #8]
 800fd20:	691b      	ldr	r3, [r3, #16]
 800fd22:	2b00      	cmp	r3, #0
 800fd24:	d106      	bne.n	800fd34 <pbuf_free+0x90>
 800fd26:	4b1d      	ldr	r3, [pc, #116]	; (800fd9c <pbuf_free+0xf8>)
 800fd28:	f240 22ff 	movw	r2, #767	; 0x2ff
 800fd2c:	491f      	ldr	r1, [pc, #124]	; (800fdac <pbuf_free+0x108>)
 800fd2e:	481d      	ldr	r0, [pc, #116]	; (800fda4 <pbuf_free+0x100>)
 800fd30:	f008 fe78 	bl	8018a24 <iprintf>
        pc->custom_free_function(p);
 800fd34:	68bb      	ldr	r3, [r7, #8]
 800fd36:	691b      	ldr	r3, [r3, #16]
 800fd38:	6878      	ldr	r0, [r7, #4]
 800fd3a:	4798      	blx	r3
 800fd3c:	e01d      	b.n	800fd7a <pbuf_free+0xd6>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 800fd3e:	7bfb      	ldrb	r3, [r7, #15]
 800fd40:	2b02      	cmp	r3, #2
 800fd42:	d104      	bne.n	800fd4e <pbuf_free+0xaa>
          memp_free(MEMP_PBUF_POOL, p);
 800fd44:	6879      	ldr	r1, [r7, #4]
 800fd46:	2008      	movs	r0, #8
 800fd48:	f7ff f956 	bl	800eff8 <memp_free>
 800fd4c:	e015      	b.n	800fd7a <pbuf_free+0xd6>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 800fd4e:	7bfb      	ldrb	r3, [r7, #15]
 800fd50:	2b01      	cmp	r3, #1
 800fd52:	d104      	bne.n	800fd5e <pbuf_free+0xba>
          memp_free(MEMP_PBUF, p);
 800fd54:	6879      	ldr	r1, [r7, #4]
 800fd56:	2007      	movs	r0, #7
 800fd58:	f7ff f94e 	bl	800eff8 <memp_free>
 800fd5c:	e00d      	b.n	800fd7a <pbuf_free+0xd6>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 800fd5e:	7bfb      	ldrb	r3, [r7, #15]
 800fd60:	2b00      	cmp	r3, #0
 800fd62:	d103      	bne.n	800fd6c <pbuf_free+0xc8>
          mem_free(p);
 800fd64:	6878      	ldr	r0, [r7, #4]
 800fd66:	f7fe fde1 	bl	800e92c <mem_free>
 800fd6a:	e006      	b.n	800fd7a <pbuf_free+0xd6>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 800fd6c:	4b0b      	ldr	r3, [pc, #44]	; (800fd9c <pbuf_free+0xf8>)
 800fd6e:	f240 320f 	movw	r2, #783	; 0x30f
 800fd72:	490f      	ldr	r1, [pc, #60]	; (800fdb0 <pbuf_free+0x10c>)
 800fd74:	480b      	ldr	r0, [pc, #44]	; (800fda4 <pbuf_free+0x100>)
 800fd76:	f008 fe55 	bl	8018a24 <iprintf>
        }
      }
      count++;
 800fd7a:	7dfb      	ldrb	r3, [r7, #23]
 800fd7c:	3301      	adds	r3, #1
 800fd7e:	75fb      	strb	r3, [r7, #23]
      /* proceed to next pbuf */
      p = q;
 800fd80:	693b      	ldr	r3, [r7, #16]
 800fd82:	607b      	str	r3, [r7, #4]
 800fd84:	e001      	b.n	800fd8a <pbuf_free+0xe6>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 800fd86:	2300      	movs	r3, #0
 800fd88:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800fd8a:	687b      	ldr	r3, [r7, #4]
 800fd8c:	2b00      	cmp	r3, #0
 800fd8e:	d19f      	bne.n	800fcd0 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 800fd90:	7dfb      	ldrb	r3, [r7, #23]
}
 800fd92:	4618      	mov	r0, r3
 800fd94:	3718      	adds	r7, #24
 800fd96:	46bd      	mov	sp, r7
 800fd98:	bd80      	pop	{r7, pc}
 800fd9a:	bf00      	nop
 800fd9c:	0801b400 	.word	0x0801b400
 800fda0:	0801b564 	.word	0x0801b564
 800fda4:	0801b460 	.word	0x0801b460
 800fda8:	0801b590 	.word	0x0801b590
 800fdac:	0801b5a8 	.word	0x0801b5a8
 800fdb0:	0801b5cc 	.word	0x0801b5cc

0800fdb4 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 800fdb4:	b480      	push	{r7}
 800fdb6:	b085      	sub	sp, #20
 800fdb8:	af00      	add	r7, sp, #0
 800fdba:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 800fdbc:	2300      	movs	r3, #0
 800fdbe:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 800fdc0:	e005      	b.n	800fdce <pbuf_clen+0x1a>
    ++len;
 800fdc2:	89fb      	ldrh	r3, [r7, #14]
 800fdc4:	3301      	adds	r3, #1
 800fdc6:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 800fdc8:	687b      	ldr	r3, [r7, #4]
 800fdca:	681b      	ldr	r3, [r3, #0]
 800fdcc:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800fdce:	687b      	ldr	r3, [r7, #4]
 800fdd0:	2b00      	cmp	r3, #0
 800fdd2:	d1f6      	bne.n	800fdc2 <pbuf_clen+0xe>
  }
  return len;
 800fdd4:	89fb      	ldrh	r3, [r7, #14]
}
 800fdd6:	4618      	mov	r0, r3
 800fdd8:	3714      	adds	r7, #20
 800fdda:	46bd      	mov	sp, r7
 800fddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fde0:	4770      	bx	lr
	...

0800fde4 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 800fde4:	b580      	push	{r7, lr}
 800fde6:	b082      	sub	sp, #8
 800fde8:	af00      	add	r7, sp, #0
 800fdea:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 800fdec:	687b      	ldr	r3, [r7, #4]
 800fdee:	2b00      	cmp	r3, #0
 800fdf0:	d010      	beq.n	800fe14 <pbuf_ref+0x30>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 800fdf2:	687b      	ldr	r3, [r7, #4]
 800fdf4:	7b9b      	ldrb	r3, [r3, #14]
 800fdf6:	3301      	adds	r3, #1
 800fdf8:	b2da      	uxtb	r2, r3
 800fdfa:	687b      	ldr	r3, [r7, #4]
 800fdfc:	739a      	strb	r2, [r3, #14]
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 800fdfe:	687b      	ldr	r3, [r7, #4]
 800fe00:	7b9b      	ldrb	r3, [r3, #14]
 800fe02:	2b00      	cmp	r3, #0
 800fe04:	d106      	bne.n	800fe14 <pbuf_ref+0x30>
 800fe06:	4b05      	ldr	r3, [pc, #20]	; (800fe1c <pbuf_ref+0x38>)
 800fe08:	f240 3242 	movw	r2, #834	; 0x342
 800fe0c:	4904      	ldr	r1, [pc, #16]	; (800fe20 <pbuf_ref+0x3c>)
 800fe0e:	4805      	ldr	r0, [pc, #20]	; (800fe24 <pbuf_ref+0x40>)
 800fe10:	f008 fe08 	bl	8018a24 <iprintf>
  }
}
 800fe14:	bf00      	nop
 800fe16:	3708      	adds	r7, #8
 800fe18:	46bd      	mov	sp, r7
 800fe1a:	bd80      	pop	{r7, pc}
 800fe1c:	0801b400 	.word	0x0801b400
 800fe20:	0801b5e0 	.word	0x0801b5e0
 800fe24:	0801b460 	.word	0x0801b460

0800fe28 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 800fe28:	b580      	push	{r7, lr}
 800fe2a:	b084      	sub	sp, #16
 800fe2c:	af00      	add	r7, sp, #0
 800fe2e:	6078      	str	r0, [r7, #4]
 800fe30:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 800fe32:	687b      	ldr	r3, [r7, #4]
 800fe34:	2b00      	cmp	r3, #0
 800fe36:	d002      	beq.n	800fe3e <pbuf_cat+0x16>
 800fe38:	683b      	ldr	r3, [r7, #0]
 800fe3a:	2b00      	cmp	r3, #0
 800fe3c:	d107      	bne.n	800fe4e <pbuf_cat+0x26>
 800fe3e:	4b20      	ldr	r3, [pc, #128]	; (800fec0 <pbuf_cat+0x98>)
 800fe40:	f240 3259 	movw	r2, #857	; 0x359
 800fe44:	491f      	ldr	r1, [pc, #124]	; (800fec4 <pbuf_cat+0x9c>)
 800fe46:	4820      	ldr	r0, [pc, #128]	; (800fec8 <pbuf_cat+0xa0>)
 800fe48:	f008 fdec 	bl	8018a24 <iprintf>
 800fe4c:	e034      	b.n	800feb8 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 800fe4e:	687b      	ldr	r3, [r7, #4]
 800fe50:	60fb      	str	r3, [r7, #12]
 800fe52:	e00a      	b.n	800fe6a <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800fe54:	68fb      	ldr	r3, [r7, #12]
 800fe56:	891a      	ldrh	r2, [r3, #8]
 800fe58:	683b      	ldr	r3, [r7, #0]
 800fe5a:	891b      	ldrh	r3, [r3, #8]
 800fe5c:	4413      	add	r3, r2
 800fe5e:	b29a      	uxth	r2, r3
 800fe60:	68fb      	ldr	r3, [r7, #12]
 800fe62:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 800fe64:	68fb      	ldr	r3, [r7, #12]
 800fe66:	681b      	ldr	r3, [r3, #0]
 800fe68:	60fb      	str	r3, [r7, #12]
 800fe6a:	68fb      	ldr	r3, [r7, #12]
 800fe6c:	681b      	ldr	r3, [r3, #0]
 800fe6e:	2b00      	cmp	r3, #0
 800fe70:	d1f0      	bne.n	800fe54 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 800fe72:	68fb      	ldr	r3, [r7, #12]
 800fe74:	891a      	ldrh	r2, [r3, #8]
 800fe76:	68fb      	ldr	r3, [r7, #12]
 800fe78:	895b      	ldrh	r3, [r3, #10]
 800fe7a:	429a      	cmp	r2, r3
 800fe7c:	d006      	beq.n	800fe8c <pbuf_cat+0x64>
 800fe7e:	4b10      	ldr	r3, [pc, #64]	; (800fec0 <pbuf_cat+0x98>)
 800fe80:	f240 3262 	movw	r2, #866	; 0x362
 800fe84:	4911      	ldr	r1, [pc, #68]	; (800fecc <pbuf_cat+0xa4>)
 800fe86:	4810      	ldr	r0, [pc, #64]	; (800fec8 <pbuf_cat+0xa0>)
 800fe88:	f008 fdcc 	bl	8018a24 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 800fe8c:	68fb      	ldr	r3, [r7, #12]
 800fe8e:	681b      	ldr	r3, [r3, #0]
 800fe90:	2b00      	cmp	r3, #0
 800fe92:	d006      	beq.n	800fea2 <pbuf_cat+0x7a>
 800fe94:	4b0a      	ldr	r3, [pc, #40]	; (800fec0 <pbuf_cat+0x98>)
 800fe96:	f240 3263 	movw	r2, #867	; 0x363
 800fe9a:	490d      	ldr	r1, [pc, #52]	; (800fed0 <pbuf_cat+0xa8>)
 800fe9c:	480a      	ldr	r0, [pc, #40]	; (800fec8 <pbuf_cat+0xa0>)
 800fe9e:	f008 fdc1 	bl	8018a24 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800fea2:	68fb      	ldr	r3, [r7, #12]
 800fea4:	891a      	ldrh	r2, [r3, #8]
 800fea6:	683b      	ldr	r3, [r7, #0]
 800fea8:	891b      	ldrh	r3, [r3, #8]
 800feaa:	4413      	add	r3, r2
 800feac:	b29a      	uxth	r2, r3
 800feae:	68fb      	ldr	r3, [r7, #12]
 800feb0:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 800feb2:	68fb      	ldr	r3, [r7, #12]
 800feb4:	683a      	ldr	r2, [r7, #0]
 800feb6:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 800feb8:	3710      	adds	r7, #16
 800feba:	46bd      	mov	sp, r7
 800febc:	bd80      	pop	{r7, pc}
 800febe:	bf00      	nop
 800fec0:	0801b400 	.word	0x0801b400
 800fec4:	0801b5f4 	.word	0x0801b5f4
 800fec8:	0801b460 	.word	0x0801b460
 800fecc:	0801b62c 	.word	0x0801b62c
 800fed0:	0801b65c 	.word	0x0801b65c

0800fed4 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 800fed4:	b580      	push	{r7, lr}
 800fed6:	b086      	sub	sp, #24
 800fed8:	af00      	add	r7, sp, #0
 800feda:	6078      	str	r0, [r7, #4]
 800fedc:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 800fede:	2300      	movs	r3, #0
 800fee0:	617b      	str	r3, [r7, #20]
 800fee2:	2300      	movs	r3, #0
 800fee4:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 800fee6:	687b      	ldr	r3, [r7, #4]
 800fee8:	2b00      	cmp	r3, #0
 800feea:	d008      	beq.n	800fefe <pbuf_copy+0x2a>
 800feec:	683b      	ldr	r3, [r7, #0]
 800feee:	2b00      	cmp	r3, #0
 800fef0:	d005      	beq.n	800fefe <pbuf_copy+0x2a>
 800fef2:	687b      	ldr	r3, [r7, #4]
 800fef4:	891a      	ldrh	r2, [r3, #8]
 800fef6:	683b      	ldr	r3, [r7, #0]
 800fef8:	891b      	ldrh	r3, [r3, #8]
 800fefa:	429a      	cmp	r2, r3
 800fefc:	d209      	bcs.n	800ff12 <pbuf_copy+0x3e>
 800fefe:	4b57      	ldr	r3, [pc, #348]	; (801005c <pbuf_copy+0x188>)
 800ff00:	f240 32c9 	movw	r2, #969	; 0x3c9
 800ff04:	4956      	ldr	r1, [pc, #344]	; (8010060 <pbuf_copy+0x18c>)
 800ff06:	4857      	ldr	r0, [pc, #348]	; (8010064 <pbuf_copy+0x190>)
 800ff08:	f008 fd8c 	bl	8018a24 <iprintf>
 800ff0c:	f06f 030f 	mvn.w	r3, #15
 800ff10:	e09f      	b.n	8010052 <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 800ff12:	687b      	ldr	r3, [r7, #4]
 800ff14:	895b      	ldrh	r3, [r3, #10]
 800ff16:	461a      	mov	r2, r3
 800ff18:	697b      	ldr	r3, [r7, #20]
 800ff1a:	1ad2      	subs	r2, r2, r3
 800ff1c:	683b      	ldr	r3, [r7, #0]
 800ff1e:	895b      	ldrh	r3, [r3, #10]
 800ff20:	4619      	mov	r1, r3
 800ff22:	693b      	ldr	r3, [r7, #16]
 800ff24:	1acb      	subs	r3, r1, r3
 800ff26:	429a      	cmp	r2, r3
 800ff28:	d306      	bcc.n	800ff38 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 800ff2a:	683b      	ldr	r3, [r7, #0]
 800ff2c:	895b      	ldrh	r3, [r3, #10]
 800ff2e:	461a      	mov	r2, r3
 800ff30:	693b      	ldr	r3, [r7, #16]
 800ff32:	1ad3      	subs	r3, r2, r3
 800ff34:	60fb      	str	r3, [r7, #12]
 800ff36:	e005      	b.n	800ff44 <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 800ff38:	687b      	ldr	r3, [r7, #4]
 800ff3a:	895b      	ldrh	r3, [r3, #10]
 800ff3c:	461a      	mov	r2, r3
 800ff3e:	697b      	ldr	r3, [r7, #20]
 800ff40:	1ad3      	subs	r3, r2, r3
 800ff42:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 800ff44:	687b      	ldr	r3, [r7, #4]
 800ff46:	685a      	ldr	r2, [r3, #4]
 800ff48:	697b      	ldr	r3, [r7, #20]
 800ff4a:	18d0      	adds	r0, r2, r3
 800ff4c:	683b      	ldr	r3, [r7, #0]
 800ff4e:	685a      	ldr	r2, [r3, #4]
 800ff50:	693b      	ldr	r3, [r7, #16]
 800ff52:	4413      	add	r3, r2
 800ff54:	68fa      	ldr	r2, [r7, #12]
 800ff56:	4619      	mov	r1, r3
 800ff58:	f008 ff32 	bl	8018dc0 <memcpy>
    offset_to += len;
 800ff5c:	697a      	ldr	r2, [r7, #20]
 800ff5e:	68fb      	ldr	r3, [r7, #12]
 800ff60:	4413      	add	r3, r2
 800ff62:	617b      	str	r3, [r7, #20]
    offset_from += len;
 800ff64:	693a      	ldr	r2, [r7, #16]
 800ff66:	68fb      	ldr	r3, [r7, #12]
 800ff68:	4413      	add	r3, r2
 800ff6a:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 800ff6c:	687b      	ldr	r3, [r7, #4]
 800ff6e:	895b      	ldrh	r3, [r3, #10]
 800ff70:	461a      	mov	r2, r3
 800ff72:	697b      	ldr	r3, [r7, #20]
 800ff74:	4293      	cmp	r3, r2
 800ff76:	d906      	bls.n	800ff86 <pbuf_copy+0xb2>
 800ff78:	4b38      	ldr	r3, [pc, #224]	; (801005c <pbuf_copy+0x188>)
 800ff7a:	f240 32d9 	movw	r2, #985	; 0x3d9
 800ff7e:	493a      	ldr	r1, [pc, #232]	; (8010068 <pbuf_copy+0x194>)
 800ff80:	4838      	ldr	r0, [pc, #224]	; (8010064 <pbuf_copy+0x190>)
 800ff82:	f008 fd4f 	bl	8018a24 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 800ff86:	683b      	ldr	r3, [r7, #0]
 800ff88:	895b      	ldrh	r3, [r3, #10]
 800ff8a:	461a      	mov	r2, r3
 800ff8c:	693b      	ldr	r3, [r7, #16]
 800ff8e:	4293      	cmp	r3, r2
 800ff90:	d906      	bls.n	800ffa0 <pbuf_copy+0xcc>
 800ff92:	4b32      	ldr	r3, [pc, #200]	; (801005c <pbuf_copy+0x188>)
 800ff94:	f240 32da 	movw	r2, #986	; 0x3da
 800ff98:	4934      	ldr	r1, [pc, #208]	; (801006c <pbuf_copy+0x198>)
 800ff9a:	4832      	ldr	r0, [pc, #200]	; (8010064 <pbuf_copy+0x190>)
 800ff9c:	f008 fd42 	bl	8018a24 <iprintf>
    if (offset_from >= p_from->len) {
 800ffa0:	683b      	ldr	r3, [r7, #0]
 800ffa2:	895b      	ldrh	r3, [r3, #10]
 800ffa4:	461a      	mov	r2, r3
 800ffa6:	693b      	ldr	r3, [r7, #16]
 800ffa8:	4293      	cmp	r3, r2
 800ffaa:	d304      	bcc.n	800ffb6 <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 800ffac:	2300      	movs	r3, #0
 800ffae:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 800ffb0:	683b      	ldr	r3, [r7, #0]
 800ffb2:	681b      	ldr	r3, [r3, #0]
 800ffb4:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 800ffb6:	687b      	ldr	r3, [r7, #4]
 800ffb8:	895b      	ldrh	r3, [r3, #10]
 800ffba:	461a      	mov	r2, r3
 800ffbc:	697b      	ldr	r3, [r7, #20]
 800ffbe:	4293      	cmp	r3, r2
 800ffc0:	d114      	bne.n	800ffec <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 800ffc2:	2300      	movs	r3, #0
 800ffc4:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 800ffc6:	687b      	ldr	r3, [r7, #4]
 800ffc8:	681b      	ldr	r3, [r3, #0]
 800ffca:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 800ffcc:	687b      	ldr	r3, [r7, #4]
 800ffce:	2b00      	cmp	r3, #0
 800ffd0:	d10c      	bne.n	800ffec <pbuf_copy+0x118>
 800ffd2:	683b      	ldr	r3, [r7, #0]
 800ffd4:	2b00      	cmp	r3, #0
 800ffd6:	d009      	beq.n	800ffec <pbuf_copy+0x118>
 800ffd8:	4b20      	ldr	r3, [pc, #128]	; (801005c <pbuf_copy+0x188>)
 800ffda:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 800ffde:	4924      	ldr	r1, [pc, #144]	; (8010070 <pbuf_copy+0x19c>)
 800ffe0:	4820      	ldr	r0, [pc, #128]	; (8010064 <pbuf_copy+0x190>)
 800ffe2:	f008 fd1f 	bl	8018a24 <iprintf>
 800ffe6:	f06f 030f 	mvn.w	r3, #15
 800ffea:	e032      	b.n	8010052 <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 800ffec:	683b      	ldr	r3, [r7, #0]
 800ffee:	2b00      	cmp	r3, #0
 800fff0:	d013      	beq.n	801001a <pbuf_copy+0x146>
 800fff2:	683b      	ldr	r3, [r7, #0]
 800fff4:	895a      	ldrh	r2, [r3, #10]
 800fff6:	683b      	ldr	r3, [r7, #0]
 800fff8:	891b      	ldrh	r3, [r3, #8]
 800fffa:	429a      	cmp	r2, r3
 800fffc:	d10d      	bne.n	801001a <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800fffe:	683b      	ldr	r3, [r7, #0]
 8010000:	681b      	ldr	r3, [r3, #0]
 8010002:	2b00      	cmp	r3, #0
 8010004:	d009      	beq.n	801001a <pbuf_copy+0x146>
 8010006:	4b15      	ldr	r3, [pc, #84]	; (801005c <pbuf_copy+0x188>)
 8010008:	f240 32e9 	movw	r2, #1001	; 0x3e9
 801000c:	4919      	ldr	r1, [pc, #100]	; (8010074 <pbuf_copy+0x1a0>)
 801000e:	4815      	ldr	r0, [pc, #84]	; (8010064 <pbuf_copy+0x190>)
 8010010:	f008 fd08 	bl	8018a24 <iprintf>
 8010014:	f06f 0305 	mvn.w	r3, #5
 8010018:	e01b      	b.n	8010052 <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 801001a:	687b      	ldr	r3, [r7, #4]
 801001c:	2b00      	cmp	r3, #0
 801001e:	d013      	beq.n	8010048 <pbuf_copy+0x174>
 8010020:	687b      	ldr	r3, [r7, #4]
 8010022:	895a      	ldrh	r2, [r3, #10]
 8010024:	687b      	ldr	r3, [r7, #4]
 8010026:	891b      	ldrh	r3, [r3, #8]
 8010028:	429a      	cmp	r2, r3
 801002a:	d10d      	bne.n	8010048 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 801002c:	687b      	ldr	r3, [r7, #4]
 801002e:	681b      	ldr	r3, [r3, #0]
 8010030:	2b00      	cmp	r3, #0
 8010032:	d009      	beq.n	8010048 <pbuf_copy+0x174>
 8010034:	4b09      	ldr	r3, [pc, #36]	; (801005c <pbuf_copy+0x188>)
 8010036:	f240 32ee 	movw	r2, #1006	; 0x3ee
 801003a:	490e      	ldr	r1, [pc, #56]	; (8010074 <pbuf_copy+0x1a0>)
 801003c:	4809      	ldr	r0, [pc, #36]	; (8010064 <pbuf_copy+0x190>)
 801003e:	f008 fcf1 	bl	8018a24 <iprintf>
 8010042:	f06f 0305 	mvn.w	r3, #5
 8010046:	e004      	b.n	8010052 <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 8010048:	683b      	ldr	r3, [r7, #0]
 801004a:	2b00      	cmp	r3, #0
 801004c:	f47f af61 	bne.w	800ff12 <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 8010050:	2300      	movs	r3, #0
}
 8010052:	4618      	mov	r0, r3
 8010054:	3718      	adds	r7, #24
 8010056:	46bd      	mov	sp, r7
 8010058:	bd80      	pop	{r7, pc}
 801005a:	bf00      	nop
 801005c:	0801b400 	.word	0x0801b400
 8010060:	0801b6a8 	.word	0x0801b6a8
 8010064:	0801b460 	.word	0x0801b460
 8010068:	0801b6d8 	.word	0x0801b6d8
 801006c:	0801b6f0 	.word	0x0801b6f0
 8010070:	0801b70c 	.word	0x0801b70c
 8010074:	0801b71c 	.word	0x0801b71c

08010078 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 8010078:	b580      	push	{r7, lr}
 801007a:	b088      	sub	sp, #32
 801007c:	af00      	add	r7, sp, #0
 801007e:	60f8      	str	r0, [r7, #12]
 8010080:	60b9      	str	r1, [r7, #8]
 8010082:	4611      	mov	r1, r2
 8010084:	461a      	mov	r2, r3
 8010086:	460b      	mov	r3, r1
 8010088:	80fb      	strh	r3, [r7, #6]
 801008a:	4613      	mov	r3, r2
 801008c:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 801008e:	2300      	movs	r3, #0
 8010090:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 8010092:	2300      	movs	r3, #0
 8010094:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 8010096:	68fb      	ldr	r3, [r7, #12]
 8010098:	2b00      	cmp	r3, #0
 801009a:	d108      	bne.n	80100ae <pbuf_copy_partial+0x36>
 801009c:	4b2b      	ldr	r3, [pc, #172]	; (801014c <pbuf_copy_partial+0xd4>)
 801009e:	f240 420a 	movw	r2, #1034	; 0x40a
 80100a2:	492b      	ldr	r1, [pc, #172]	; (8010150 <pbuf_copy_partial+0xd8>)
 80100a4:	482b      	ldr	r0, [pc, #172]	; (8010154 <pbuf_copy_partial+0xdc>)
 80100a6:	f008 fcbd 	bl	8018a24 <iprintf>
 80100aa:	2300      	movs	r3, #0
 80100ac:	e04a      	b.n	8010144 <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 80100ae:	68bb      	ldr	r3, [r7, #8]
 80100b0:	2b00      	cmp	r3, #0
 80100b2:	d108      	bne.n	80100c6 <pbuf_copy_partial+0x4e>
 80100b4:	4b25      	ldr	r3, [pc, #148]	; (801014c <pbuf_copy_partial+0xd4>)
 80100b6:	f240 420b 	movw	r2, #1035	; 0x40b
 80100ba:	4927      	ldr	r1, [pc, #156]	; (8010158 <pbuf_copy_partial+0xe0>)
 80100bc:	4825      	ldr	r0, [pc, #148]	; (8010154 <pbuf_copy_partial+0xdc>)
 80100be:	f008 fcb1 	bl	8018a24 <iprintf>
 80100c2:	2300      	movs	r3, #0
 80100c4:	e03e      	b.n	8010144 <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 80100c6:	68fb      	ldr	r3, [r7, #12]
 80100c8:	61fb      	str	r3, [r7, #28]
 80100ca:	e034      	b.n	8010136 <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 80100cc:	88bb      	ldrh	r3, [r7, #4]
 80100ce:	2b00      	cmp	r3, #0
 80100d0:	d00a      	beq.n	80100e8 <pbuf_copy_partial+0x70>
 80100d2:	69fb      	ldr	r3, [r7, #28]
 80100d4:	895b      	ldrh	r3, [r3, #10]
 80100d6:	88ba      	ldrh	r2, [r7, #4]
 80100d8:	429a      	cmp	r2, r3
 80100da:	d305      	bcc.n	80100e8 <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 80100dc:	69fb      	ldr	r3, [r7, #28]
 80100de:	895b      	ldrh	r3, [r3, #10]
 80100e0:	88ba      	ldrh	r2, [r7, #4]
 80100e2:	1ad3      	subs	r3, r2, r3
 80100e4:	80bb      	strh	r3, [r7, #4]
 80100e6:	e023      	b.n	8010130 <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 80100e8:	69fb      	ldr	r3, [r7, #28]
 80100ea:	895a      	ldrh	r2, [r3, #10]
 80100ec:	88bb      	ldrh	r3, [r7, #4]
 80100ee:	1ad3      	subs	r3, r2, r3
 80100f0:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 80100f2:	8b3a      	ldrh	r2, [r7, #24]
 80100f4:	88fb      	ldrh	r3, [r7, #6]
 80100f6:	429a      	cmp	r2, r3
 80100f8:	d901      	bls.n	80100fe <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 80100fa:	88fb      	ldrh	r3, [r7, #6]
 80100fc:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 80100fe:	8b7b      	ldrh	r3, [r7, #26]
 8010100:	68ba      	ldr	r2, [r7, #8]
 8010102:	18d0      	adds	r0, r2, r3
 8010104:	69fb      	ldr	r3, [r7, #28]
 8010106:	685a      	ldr	r2, [r3, #4]
 8010108:	88bb      	ldrh	r3, [r7, #4]
 801010a:	4413      	add	r3, r2
 801010c:	8b3a      	ldrh	r2, [r7, #24]
 801010e:	4619      	mov	r1, r3
 8010110:	f008 fe56 	bl	8018dc0 <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 8010114:	8afa      	ldrh	r2, [r7, #22]
 8010116:	8b3b      	ldrh	r3, [r7, #24]
 8010118:	4413      	add	r3, r2
 801011a:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 801011c:	8b7a      	ldrh	r2, [r7, #26]
 801011e:	8b3b      	ldrh	r3, [r7, #24]
 8010120:	4413      	add	r3, r2
 8010122:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 8010124:	88fa      	ldrh	r2, [r7, #6]
 8010126:	8b3b      	ldrh	r3, [r7, #24]
 8010128:	1ad3      	subs	r3, r2, r3
 801012a:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 801012c:	2300      	movs	r3, #0
 801012e:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8010130:	69fb      	ldr	r3, [r7, #28]
 8010132:	681b      	ldr	r3, [r3, #0]
 8010134:	61fb      	str	r3, [r7, #28]
 8010136:	88fb      	ldrh	r3, [r7, #6]
 8010138:	2b00      	cmp	r3, #0
 801013a:	d002      	beq.n	8010142 <pbuf_copy_partial+0xca>
 801013c:	69fb      	ldr	r3, [r7, #28]
 801013e:	2b00      	cmp	r3, #0
 8010140:	d1c4      	bne.n	80100cc <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 8010142:	8afb      	ldrh	r3, [r7, #22]
}
 8010144:	4618      	mov	r0, r3
 8010146:	3720      	adds	r7, #32
 8010148:	46bd      	mov	sp, r7
 801014a:	bd80      	pop	{r7, pc}
 801014c:	0801b400 	.word	0x0801b400
 8010150:	0801b748 	.word	0x0801b748
 8010154:	0801b460 	.word	0x0801b460
 8010158:	0801b768 	.word	0x0801b768

0801015c <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 801015c:	b580      	push	{r7, lr}
 801015e:	b084      	sub	sp, #16
 8010160:	af00      	add	r7, sp, #0
 8010162:	4603      	mov	r3, r0
 8010164:	603a      	str	r2, [r7, #0]
 8010166:	71fb      	strb	r3, [r7, #7]
 8010168:	460b      	mov	r3, r1
 801016a:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 801016c:	683b      	ldr	r3, [r7, #0]
 801016e:	8919      	ldrh	r1, [r3, #8]
 8010170:	88ba      	ldrh	r2, [r7, #4]
 8010172:	79fb      	ldrb	r3, [r7, #7]
 8010174:	4618      	mov	r0, r3
 8010176:	f7ff fab1 	bl	800f6dc <pbuf_alloc>
 801017a:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 801017c:	68fb      	ldr	r3, [r7, #12]
 801017e:	2b00      	cmp	r3, #0
 8010180:	d101      	bne.n	8010186 <pbuf_clone+0x2a>
    return NULL;
 8010182:	2300      	movs	r3, #0
 8010184:	e011      	b.n	80101aa <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 8010186:	6839      	ldr	r1, [r7, #0]
 8010188:	68f8      	ldr	r0, [r7, #12]
 801018a:	f7ff fea3 	bl	800fed4 <pbuf_copy>
 801018e:	4603      	mov	r3, r0
 8010190:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 8010192:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8010196:	2b00      	cmp	r3, #0
 8010198:	d006      	beq.n	80101a8 <pbuf_clone+0x4c>
 801019a:	4b06      	ldr	r3, [pc, #24]	; (80101b4 <pbuf_clone+0x58>)
 801019c:	f240 5224 	movw	r2, #1316	; 0x524
 80101a0:	4905      	ldr	r1, [pc, #20]	; (80101b8 <pbuf_clone+0x5c>)
 80101a2:	4806      	ldr	r0, [pc, #24]	; (80101bc <pbuf_clone+0x60>)
 80101a4:	f008 fc3e 	bl	8018a24 <iprintf>
  return q;
 80101a8:	68fb      	ldr	r3, [r7, #12]
}
 80101aa:	4618      	mov	r0, r3
 80101ac:	3710      	adds	r7, #16
 80101ae:	46bd      	mov	sp, r7
 80101b0:	bd80      	pop	{r7, pc}
 80101b2:	bf00      	nop
 80101b4:	0801b400 	.word	0x0801b400
 80101b8:	0801b874 	.word	0x0801b874
 80101bc:	0801b460 	.word	0x0801b460

080101c0 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 80101c0:	b580      	push	{r7, lr}
 80101c2:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 80101c4:	f007 ff06 	bl	8017fd4 <rand>
 80101c8:	4603      	mov	r3, r0
 80101ca:	b29b      	uxth	r3, r3
 80101cc:	f3c3 030d 	ubfx	r3, r3, #0, #14
 80101d0:	b29b      	uxth	r3, r3
 80101d2:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 80101d6:	b29a      	uxth	r2, r3
 80101d8:	4b01      	ldr	r3, [pc, #4]	; (80101e0 <tcp_init+0x20>)
 80101da:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 80101dc:	bf00      	nop
 80101de:	bd80      	pop	{r7, pc}
 80101e0:	20000054 	.word	0x20000054

080101e4 <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 80101e4:	b580      	push	{r7, lr}
 80101e6:	b082      	sub	sp, #8
 80101e8:	af00      	add	r7, sp, #0
 80101ea:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 80101ec:	687b      	ldr	r3, [r7, #4]
 80101ee:	7d1b      	ldrb	r3, [r3, #20]
 80101f0:	2b01      	cmp	r3, #1
 80101f2:	d105      	bne.n	8010200 <tcp_free+0x1c>
 80101f4:	4b06      	ldr	r3, [pc, #24]	; (8010210 <tcp_free+0x2c>)
 80101f6:	22d4      	movs	r2, #212	; 0xd4
 80101f8:	4906      	ldr	r1, [pc, #24]	; (8010214 <tcp_free+0x30>)
 80101fa:	4807      	ldr	r0, [pc, #28]	; (8010218 <tcp_free+0x34>)
 80101fc:	f008 fc12 	bl	8018a24 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 8010200:	6879      	ldr	r1, [r7, #4]
 8010202:	2001      	movs	r0, #1
 8010204:	f7fe fef8 	bl	800eff8 <memp_free>
}
 8010208:	bf00      	nop
 801020a:	3708      	adds	r7, #8
 801020c:	46bd      	mov	sp, r7
 801020e:	bd80      	pop	{r7, pc}
 8010210:	0801b900 	.word	0x0801b900
 8010214:	0801b930 	.word	0x0801b930
 8010218:	0801b944 	.word	0x0801b944

0801021c <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 801021c:	b580      	push	{r7, lr}
 801021e:	b082      	sub	sp, #8
 8010220:	af00      	add	r7, sp, #0
 8010222:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 8010224:	687b      	ldr	r3, [r7, #4]
 8010226:	7d1b      	ldrb	r3, [r3, #20]
 8010228:	2b01      	cmp	r3, #1
 801022a:	d105      	bne.n	8010238 <tcp_free_listen+0x1c>
 801022c:	4b06      	ldr	r3, [pc, #24]	; (8010248 <tcp_free_listen+0x2c>)
 801022e:	22df      	movs	r2, #223	; 0xdf
 8010230:	4906      	ldr	r1, [pc, #24]	; (801024c <tcp_free_listen+0x30>)
 8010232:	4807      	ldr	r0, [pc, #28]	; (8010250 <tcp_free_listen+0x34>)
 8010234:	f008 fbf6 	bl	8018a24 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 8010238:	6879      	ldr	r1, [r7, #4]
 801023a:	2002      	movs	r0, #2
 801023c:	f7fe fedc 	bl	800eff8 <memp_free>
}
 8010240:	bf00      	nop
 8010242:	3708      	adds	r7, #8
 8010244:	46bd      	mov	sp, r7
 8010246:	bd80      	pop	{r7, pc}
 8010248:	0801b900 	.word	0x0801b900
 801024c:	0801b96c 	.word	0x0801b96c
 8010250:	0801b944 	.word	0x0801b944

08010254 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 8010254:	b580      	push	{r7, lr}
 8010256:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 8010258:	f000 fea2 	bl	8010fa0 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 801025c:	4b07      	ldr	r3, [pc, #28]	; (801027c <tcp_tmr+0x28>)
 801025e:	781b      	ldrb	r3, [r3, #0]
 8010260:	3301      	adds	r3, #1
 8010262:	b2da      	uxtb	r2, r3
 8010264:	4b05      	ldr	r3, [pc, #20]	; (801027c <tcp_tmr+0x28>)
 8010266:	701a      	strb	r2, [r3, #0]
 8010268:	4b04      	ldr	r3, [pc, #16]	; (801027c <tcp_tmr+0x28>)
 801026a:	781b      	ldrb	r3, [r3, #0]
 801026c:	f003 0301 	and.w	r3, r3, #1
 8010270:	2b00      	cmp	r3, #0
 8010272:	d001      	beq.n	8010278 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 8010274:	f000 fb54 	bl	8010920 <tcp_slowtmr>
  }
}
 8010278:	bf00      	nop
 801027a:	bd80      	pop	{r7, pc}
 801027c:	20007fed 	.word	0x20007fed

08010280 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 8010280:	b580      	push	{r7, lr}
 8010282:	b084      	sub	sp, #16
 8010284:	af00      	add	r7, sp, #0
 8010286:	6078      	str	r0, [r7, #4]
 8010288:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 801028a:	683b      	ldr	r3, [r7, #0]
 801028c:	2b00      	cmp	r3, #0
 801028e:	d105      	bne.n	801029c <tcp_remove_listener+0x1c>
 8010290:	4b0d      	ldr	r3, [pc, #52]	; (80102c8 <tcp_remove_listener+0x48>)
 8010292:	22ff      	movs	r2, #255	; 0xff
 8010294:	490d      	ldr	r1, [pc, #52]	; (80102cc <tcp_remove_listener+0x4c>)
 8010296:	480e      	ldr	r0, [pc, #56]	; (80102d0 <tcp_remove_listener+0x50>)
 8010298:	f008 fbc4 	bl	8018a24 <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 801029c:	687b      	ldr	r3, [r7, #4]
 801029e:	60fb      	str	r3, [r7, #12]
 80102a0:	e00a      	b.n	80102b8 <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 80102a2:	68fb      	ldr	r3, [r7, #12]
 80102a4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80102a6:	683a      	ldr	r2, [r7, #0]
 80102a8:	429a      	cmp	r2, r3
 80102aa:	d102      	bne.n	80102b2 <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 80102ac:	68fb      	ldr	r3, [r7, #12]
 80102ae:	2200      	movs	r2, #0
 80102b0:	67da      	str	r2, [r3, #124]	; 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 80102b2:	68fb      	ldr	r3, [r7, #12]
 80102b4:	68db      	ldr	r3, [r3, #12]
 80102b6:	60fb      	str	r3, [r7, #12]
 80102b8:	68fb      	ldr	r3, [r7, #12]
 80102ba:	2b00      	cmp	r3, #0
 80102bc:	d1f1      	bne.n	80102a2 <tcp_remove_listener+0x22>
    }
  }
}
 80102be:	bf00      	nop
 80102c0:	bf00      	nop
 80102c2:	3710      	adds	r7, #16
 80102c4:	46bd      	mov	sp, r7
 80102c6:	bd80      	pop	{r7, pc}
 80102c8:	0801b900 	.word	0x0801b900
 80102cc:	0801b988 	.word	0x0801b988
 80102d0:	0801b944 	.word	0x0801b944

080102d4 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 80102d4:	b580      	push	{r7, lr}
 80102d6:	b084      	sub	sp, #16
 80102d8:	af00      	add	r7, sp, #0
 80102da:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 80102dc:	687b      	ldr	r3, [r7, #4]
 80102de:	2b00      	cmp	r3, #0
 80102e0:	d106      	bne.n	80102f0 <tcp_listen_closed+0x1c>
 80102e2:	4b14      	ldr	r3, [pc, #80]	; (8010334 <tcp_listen_closed+0x60>)
 80102e4:	f240 1211 	movw	r2, #273	; 0x111
 80102e8:	4913      	ldr	r1, [pc, #76]	; (8010338 <tcp_listen_closed+0x64>)
 80102ea:	4814      	ldr	r0, [pc, #80]	; (801033c <tcp_listen_closed+0x68>)
 80102ec:	f008 fb9a 	bl	8018a24 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 80102f0:	687b      	ldr	r3, [r7, #4]
 80102f2:	7d1b      	ldrb	r3, [r3, #20]
 80102f4:	2b01      	cmp	r3, #1
 80102f6:	d006      	beq.n	8010306 <tcp_listen_closed+0x32>
 80102f8:	4b0e      	ldr	r3, [pc, #56]	; (8010334 <tcp_listen_closed+0x60>)
 80102fa:	f44f 7289 	mov.w	r2, #274	; 0x112
 80102fe:	4910      	ldr	r1, [pc, #64]	; (8010340 <tcp_listen_closed+0x6c>)
 8010300:	480e      	ldr	r0, [pc, #56]	; (801033c <tcp_listen_closed+0x68>)
 8010302:	f008 fb8f 	bl	8018a24 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8010306:	2301      	movs	r3, #1
 8010308:	60fb      	str	r3, [r7, #12]
 801030a:	e00b      	b.n	8010324 <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 801030c:	4a0d      	ldr	r2, [pc, #52]	; (8010344 <tcp_listen_closed+0x70>)
 801030e:	68fb      	ldr	r3, [r7, #12]
 8010310:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8010314:	681b      	ldr	r3, [r3, #0]
 8010316:	6879      	ldr	r1, [r7, #4]
 8010318:	4618      	mov	r0, r3
 801031a:	f7ff ffb1 	bl	8010280 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 801031e:	68fb      	ldr	r3, [r7, #12]
 8010320:	3301      	adds	r3, #1
 8010322:	60fb      	str	r3, [r7, #12]
 8010324:	68fb      	ldr	r3, [r7, #12]
 8010326:	2b03      	cmp	r3, #3
 8010328:	d9f0      	bls.n	801030c <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 801032a:	bf00      	nop
 801032c:	bf00      	nop
 801032e:	3710      	adds	r7, #16
 8010330:	46bd      	mov	sp, r7
 8010332:	bd80      	pop	{r7, pc}
 8010334:	0801b900 	.word	0x0801b900
 8010338:	0801b9b0 	.word	0x0801b9b0
 801033c:	0801b944 	.word	0x0801b944
 8010340:	0801b9bc 	.word	0x0801b9bc
 8010344:	0801d928 	.word	0x0801d928

08010348 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 8010348:	b5b0      	push	{r4, r5, r7, lr}
 801034a:	b088      	sub	sp, #32
 801034c:	af04      	add	r7, sp, #16
 801034e:	6078      	str	r0, [r7, #4]
 8010350:	460b      	mov	r3, r1
 8010352:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 8010354:	687b      	ldr	r3, [r7, #4]
 8010356:	2b00      	cmp	r3, #0
 8010358:	d106      	bne.n	8010368 <tcp_close_shutdown+0x20>
 801035a:	4b63      	ldr	r3, [pc, #396]	; (80104e8 <tcp_close_shutdown+0x1a0>)
 801035c:	f44f 72af 	mov.w	r2, #350	; 0x15e
 8010360:	4962      	ldr	r1, [pc, #392]	; (80104ec <tcp_close_shutdown+0x1a4>)
 8010362:	4863      	ldr	r0, [pc, #396]	; (80104f0 <tcp_close_shutdown+0x1a8>)
 8010364:	f008 fb5e 	bl	8018a24 <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 8010368:	78fb      	ldrb	r3, [r7, #3]
 801036a:	2b00      	cmp	r3, #0
 801036c:	d066      	beq.n	801043c <tcp_close_shutdown+0xf4>
 801036e:	687b      	ldr	r3, [r7, #4]
 8010370:	7d1b      	ldrb	r3, [r3, #20]
 8010372:	2b04      	cmp	r3, #4
 8010374:	d003      	beq.n	801037e <tcp_close_shutdown+0x36>
 8010376:	687b      	ldr	r3, [r7, #4]
 8010378:	7d1b      	ldrb	r3, [r3, #20]
 801037a:	2b07      	cmp	r3, #7
 801037c:	d15e      	bne.n	801043c <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 801037e:	687b      	ldr	r3, [r7, #4]
 8010380:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8010382:	2b00      	cmp	r3, #0
 8010384:	d104      	bne.n	8010390 <tcp_close_shutdown+0x48>
 8010386:	687b      	ldr	r3, [r7, #4]
 8010388:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801038a:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 801038e:	d055      	beq.n	801043c <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 8010390:	687b      	ldr	r3, [r7, #4]
 8010392:	8b5b      	ldrh	r3, [r3, #26]
 8010394:	f003 0310 	and.w	r3, r3, #16
 8010398:	2b00      	cmp	r3, #0
 801039a:	d106      	bne.n	80103aa <tcp_close_shutdown+0x62>
 801039c:	4b52      	ldr	r3, [pc, #328]	; (80104e8 <tcp_close_shutdown+0x1a0>)
 801039e:	f44f 72b2 	mov.w	r2, #356	; 0x164
 80103a2:	4954      	ldr	r1, [pc, #336]	; (80104f4 <tcp_close_shutdown+0x1ac>)
 80103a4:	4852      	ldr	r0, [pc, #328]	; (80104f0 <tcp_close_shutdown+0x1a8>)
 80103a6:	f008 fb3d 	bl	8018a24 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 80103aa:	687b      	ldr	r3, [r7, #4]
 80103ac:	6d18      	ldr	r0, [r3, #80]	; 0x50
 80103ae:	687b      	ldr	r3, [r7, #4]
 80103b0:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 80103b2:	687d      	ldr	r5, [r7, #4]
 80103b4:	687b      	ldr	r3, [r7, #4]
 80103b6:	3304      	adds	r3, #4
 80103b8:	687a      	ldr	r2, [r7, #4]
 80103ba:	8ad2      	ldrh	r2, [r2, #22]
 80103bc:	6879      	ldr	r1, [r7, #4]
 80103be:	8b09      	ldrh	r1, [r1, #24]
 80103c0:	9102      	str	r1, [sp, #8]
 80103c2:	9201      	str	r2, [sp, #4]
 80103c4:	9300      	str	r3, [sp, #0]
 80103c6:	462b      	mov	r3, r5
 80103c8:	4622      	mov	r2, r4
 80103ca:	4601      	mov	r1, r0
 80103cc:	6878      	ldr	r0, [r7, #4]
 80103ce:	f004 fe91 	bl	80150f4 <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 80103d2:	6878      	ldr	r0, [r7, #4]
 80103d4:	f001 f8c6 	bl	8011564 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 80103d8:	4b47      	ldr	r3, [pc, #284]	; (80104f8 <tcp_close_shutdown+0x1b0>)
 80103da:	681b      	ldr	r3, [r3, #0]
 80103dc:	687a      	ldr	r2, [r7, #4]
 80103de:	429a      	cmp	r2, r3
 80103e0:	d105      	bne.n	80103ee <tcp_close_shutdown+0xa6>
 80103e2:	4b45      	ldr	r3, [pc, #276]	; (80104f8 <tcp_close_shutdown+0x1b0>)
 80103e4:	681b      	ldr	r3, [r3, #0]
 80103e6:	68db      	ldr	r3, [r3, #12]
 80103e8:	4a43      	ldr	r2, [pc, #268]	; (80104f8 <tcp_close_shutdown+0x1b0>)
 80103ea:	6013      	str	r3, [r2, #0]
 80103ec:	e013      	b.n	8010416 <tcp_close_shutdown+0xce>
 80103ee:	4b42      	ldr	r3, [pc, #264]	; (80104f8 <tcp_close_shutdown+0x1b0>)
 80103f0:	681b      	ldr	r3, [r3, #0]
 80103f2:	60fb      	str	r3, [r7, #12]
 80103f4:	e00c      	b.n	8010410 <tcp_close_shutdown+0xc8>
 80103f6:	68fb      	ldr	r3, [r7, #12]
 80103f8:	68db      	ldr	r3, [r3, #12]
 80103fa:	687a      	ldr	r2, [r7, #4]
 80103fc:	429a      	cmp	r2, r3
 80103fe:	d104      	bne.n	801040a <tcp_close_shutdown+0xc2>
 8010400:	687b      	ldr	r3, [r7, #4]
 8010402:	68da      	ldr	r2, [r3, #12]
 8010404:	68fb      	ldr	r3, [r7, #12]
 8010406:	60da      	str	r2, [r3, #12]
 8010408:	e005      	b.n	8010416 <tcp_close_shutdown+0xce>
 801040a:	68fb      	ldr	r3, [r7, #12]
 801040c:	68db      	ldr	r3, [r3, #12]
 801040e:	60fb      	str	r3, [r7, #12]
 8010410:	68fb      	ldr	r3, [r7, #12]
 8010412:	2b00      	cmp	r3, #0
 8010414:	d1ef      	bne.n	80103f6 <tcp_close_shutdown+0xae>
 8010416:	687b      	ldr	r3, [r7, #4]
 8010418:	2200      	movs	r2, #0
 801041a:	60da      	str	r2, [r3, #12]
 801041c:	4b37      	ldr	r3, [pc, #220]	; (80104fc <tcp_close_shutdown+0x1b4>)
 801041e:	2201      	movs	r2, #1
 8010420:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 8010422:	4b37      	ldr	r3, [pc, #220]	; (8010500 <tcp_close_shutdown+0x1b8>)
 8010424:	681b      	ldr	r3, [r3, #0]
 8010426:	687a      	ldr	r2, [r7, #4]
 8010428:	429a      	cmp	r2, r3
 801042a:	d102      	bne.n	8010432 <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 801042c:	f003 fd5e 	bl	8013eec <tcp_trigger_input_pcb_close>
 8010430:	e002      	b.n	8010438 <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 8010432:	6878      	ldr	r0, [r7, #4]
 8010434:	f7ff fed6 	bl	80101e4 <tcp_free>
      }
      return ERR_OK;
 8010438:	2300      	movs	r3, #0
 801043a:	e050      	b.n	80104de <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 801043c:	687b      	ldr	r3, [r7, #4]
 801043e:	7d1b      	ldrb	r3, [r3, #20]
 8010440:	2b02      	cmp	r3, #2
 8010442:	d03b      	beq.n	80104bc <tcp_close_shutdown+0x174>
 8010444:	2b02      	cmp	r3, #2
 8010446:	dc44      	bgt.n	80104d2 <tcp_close_shutdown+0x18a>
 8010448:	2b00      	cmp	r3, #0
 801044a:	d002      	beq.n	8010452 <tcp_close_shutdown+0x10a>
 801044c:	2b01      	cmp	r3, #1
 801044e:	d02a      	beq.n	80104a6 <tcp_close_shutdown+0x15e>
 8010450:	e03f      	b.n	80104d2 <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 8010452:	687b      	ldr	r3, [r7, #4]
 8010454:	8adb      	ldrh	r3, [r3, #22]
 8010456:	2b00      	cmp	r3, #0
 8010458:	d021      	beq.n	801049e <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 801045a:	4b2a      	ldr	r3, [pc, #168]	; (8010504 <tcp_close_shutdown+0x1bc>)
 801045c:	681b      	ldr	r3, [r3, #0]
 801045e:	687a      	ldr	r2, [r7, #4]
 8010460:	429a      	cmp	r2, r3
 8010462:	d105      	bne.n	8010470 <tcp_close_shutdown+0x128>
 8010464:	4b27      	ldr	r3, [pc, #156]	; (8010504 <tcp_close_shutdown+0x1bc>)
 8010466:	681b      	ldr	r3, [r3, #0]
 8010468:	68db      	ldr	r3, [r3, #12]
 801046a:	4a26      	ldr	r2, [pc, #152]	; (8010504 <tcp_close_shutdown+0x1bc>)
 801046c:	6013      	str	r3, [r2, #0]
 801046e:	e013      	b.n	8010498 <tcp_close_shutdown+0x150>
 8010470:	4b24      	ldr	r3, [pc, #144]	; (8010504 <tcp_close_shutdown+0x1bc>)
 8010472:	681b      	ldr	r3, [r3, #0]
 8010474:	60bb      	str	r3, [r7, #8]
 8010476:	e00c      	b.n	8010492 <tcp_close_shutdown+0x14a>
 8010478:	68bb      	ldr	r3, [r7, #8]
 801047a:	68db      	ldr	r3, [r3, #12]
 801047c:	687a      	ldr	r2, [r7, #4]
 801047e:	429a      	cmp	r2, r3
 8010480:	d104      	bne.n	801048c <tcp_close_shutdown+0x144>
 8010482:	687b      	ldr	r3, [r7, #4]
 8010484:	68da      	ldr	r2, [r3, #12]
 8010486:	68bb      	ldr	r3, [r7, #8]
 8010488:	60da      	str	r2, [r3, #12]
 801048a:	e005      	b.n	8010498 <tcp_close_shutdown+0x150>
 801048c:	68bb      	ldr	r3, [r7, #8]
 801048e:	68db      	ldr	r3, [r3, #12]
 8010490:	60bb      	str	r3, [r7, #8]
 8010492:	68bb      	ldr	r3, [r7, #8]
 8010494:	2b00      	cmp	r3, #0
 8010496:	d1ef      	bne.n	8010478 <tcp_close_shutdown+0x130>
 8010498:	687b      	ldr	r3, [r7, #4]
 801049a:	2200      	movs	r2, #0
 801049c:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 801049e:	6878      	ldr	r0, [r7, #4]
 80104a0:	f7ff fea0 	bl	80101e4 <tcp_free>
      break;
 80104a4:	e01a      	b.n	80104dc <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 80104a6:	6878      	ldr	r0, [r7, #4]
 80104a8:	f7ff ff14 	bl	80102d4 <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 80104ac:	6879      	ldr	r1, [r7, #4]
 80104ae:	4816      	ldr	r0, [pc, #88]	; (8010508 <tcp_close_shutdown+0x1c0>)
 80104b0:	f001 f8a8 	bl	8011604 <tcp_pcb_remove>
      tcp_free_listen(pcb);
 80104b4:	6878      	ldr	r0, [r7, #4]
 80104b6:	f7ff feb1 	bl	801021c <tcp_free_listen>
      break;
 80104ba:	e00f      	b.n	80104dc <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 80104bc:	6879      	ldr	r1, [r7, #4]
 80104be:	480e      	ldr	r0, [pc, #56]	; (80104f8 <tcp_close_shutdown+0x1b0>)
 80104c0:	f001 f8a0 	bl	8011604 <tcp_pcb_remove>
 80104c4:	4b0d      	ldr	r3, [pc, #52]	; (80104fc <tcp_close_shutdown+0x1b4>)
 80104c6:	2201      	movs	r2, #1
 80104c8:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 80104ca:	6878      	ldr	r0, [r7, #4]
 80104cc:	f7ff fe8a 	bl	80101e4 <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 80104d0:	e004      	b.n	80104dc <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 80104d2:	6878      	ldr	r0, [r7, #4]
 80104d4:	f000 f81a 	bl	801050c <tcp_close_shutdown_fin>
 80104d8:	4603      	mov	r3, r0
 80104da:	e000      	b.n	80104de <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 80104dc:	2300      	movs	r3, #0
}
 80104de:	4618      	mov	r0, r3
 80104e0:	3710      	adds	r7, #16
 80104e2:	46bd      	mov	sp, r7
 80104e4:	bdb0      	pop	{r4, r5, r7, pc}
 80104e6:	bf00      	nop
 80104e8:	0801b900 	.word	0x0801b900
 80104ec:	0801b9d4 	.word	0x0801b9d4
 80104f0:	0801b944 	.word	0x0801b944
 80104f4:	0801b9f4 	.word	0x0801b9f4
 80104f8:	20007fe4 	.word	0x20007fe4
 80104fc:	20007fec 	.word	0x20007fec
 8010500:	20008024 	.word	0x20008024
 8010504:	20007fdc 	.word	0x20007fdc
 8010508:	20007fe0 	.word	0x20007fe0

0801050c <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 801050c:	b580      	push	{r7, lr}
 801050e:	b084      	sub	sp, #16
 8010510:	af00      	add	r7, sp, #0
 8010512:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8010514:	687b      	ldr	r3, [r7, #4]
 8010516:	2b00      	cmp	r3, #0
 8010518:	d106      	bne.n	8010528 <tcp_close_shutdown_fin+0x1c>
 801051a:	4b2e      	ldr	r3, [pc, #184]	; (80105d4 <tcp_close_shutdown_fin+0xc8>)
 801051c:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 8010520:	492d      	ldr	r1, [pc, #180]	; (80105d8 <tcp_close_shutdown_fin+0xcc>)
 8010522:	482e      	ldr	r0, [pc, #184]	; (80105dc <tcp_close_shutdown_fin+0xd0>)
 8010524:	f008 fa7e 	bl	8018a24 <iprintf>

  switch (pcb->state) {
 8010528:	687b      	ldr	r3, [r7, #4]
 801052a:	7d1b      	ldrb	r3, [r3, #20]
 801052c:	2b07      	cmp	r3, #7
 801052e:	d020      	beq.n	8010572 <tcp_close_shutdown_fin+0x66>
 8010530:	2b07      	cmp	r3, #7
 8010532:	dc2b      	bgt.n	801058c <tcp_close_shutdown_fin+0x80>
 8010534:	2b03      	cmp	r3, #3
 8010536:	d002      	beq.n	801053e <tcp_close_shutdown_fin+0x32>
 8010538:	2b04      	cmp	r3, #4
 801053a:	d00d      	beq.n	8010558 <tcp_close_shutdown_fin+0x4c>
 801053c:	e026      	b.n	801058c <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 801053e:	6878      	ldr	r0, [r7, #4]
 8010540:	f003 fee6 	bl	8014310 <tcp_send_fin>
 8010544:	4603      	mov	r3, r0
 8010546:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8010548:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801054c:	2b00      	cmp	r3, #0
 801054e:	d11f      	bne.n	8010590 <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 8010550:	687b      	ldr	r3, [r7, #4]
 8010552:	2205      	movs	r2, #5
 8010554:	751a      	strb	r2, [r3, #20]
      }
      break;
 8010556:	e01b      	b.n	8010590 <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 8010558:	6878      	ldr	r0, [r7, #4]
 801055a:	f003 fed9 	bl	8014310 <tcp_send_fin>
 801055e:	4603      	mov	r3, r0
 8010560:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8010562:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010566:	2b00      	cmp	r3, #0
 8010568:	d114      	bne.n	8010594 <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 801056a:	687b      	ldr	r3, [r7, #4]
 801056c:	2205      	movs	r2, #5
 801056e:	751a      	strb	r2, [r3, #20]
      }
      break;
 8010570:	e010      	b.n	8010594 <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 8010572:	6878      	ldr	r0, [r7, #4]
 8010574:	f003 fecc 	bl	8014310 <tcp_send_fin>
 8010578:	4603      	mov	r3, r0
 801057a:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 801057c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010580:	2b00      	cmp	r3, #0
 8010582:	d109      	bne.n	8010598 <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 8010584:	687b      	ldr	r3, [r7, #4]
 8010586:	2209      	movs	r2, #9
 8010588:	751a      	strb	r2, [r3, #20]
      }
      break;
 801058a:	e005      	b.n	8010598 <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 801058c:	2300      	movs	r3, #0
 801058e:	e01c      	b.n	80105ca <tcp_close_shutdown_fin+0xbe>
      break;
 8010590:	bf00      	nop
 8010592:	e002      	b.n	801059a <tcp_close_shutdown_fin+0x8e>
      break;
 8010594:	bf00      	nop
 8010596:	e000      	b.n	801059a <tcp_close_shutdown_fin+0x8e>
      break;
 8010598:	bf00      	nop
  }

  if (err == ERR_OK) {
 801059a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801059e:	2b00      	cmp	r3, #0
 80105a0:	d103      	bne.n	80105aa <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 80105a2:	6878      	ldr	r0, [r7, #4]
 80105a4:	f003 fff2 	bl	801458c <tcp_output>
 80105a8:	e00d      	b.n	80105c6 <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 80105aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80105ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80105b2:	d108      	bne.n	80105c6 <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 80105b4:	687b      	ldr	r3, [r7, #4]
 80105b6:	8b5b      	ldrh	r3, [r3, #26]
 80105b8:	f043 0308 	orr.w	r3, r3, #8
 80105bc:	b29a      	uxth	r2, r3
 80105be:	687b      	ldr	r3, [r7, #4]
 80105c0:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 80105c2:	2300      	movs	r3, #0
 80105c4:	e001      	b.n	80105ca <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 80105c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80105ca:	4618      	mov	r0, r3
 80105cc:	3710      	adds	r7, #16
 80105ce:	46bd      	mov	sp, r7
 80105d0:	bd80      	pop	{r7, pc}
 80105d2:	bf00      	nop
 80105d4:	0801b900 	.word	0x0801b900
 80105d8:	0801b9b0 	.word	0x0801b9b0
 80105dc:	0801b944 	.word	0x0801b944

080105e0 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 80105e0:	b580      	push	{r7, lr}
 80105e2:	b082      	sub	sp, #8
 80105e4:	af00      	add	r7, sp, #0
 80105e6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 80105e8:	687b      	ldr	r3, [r7, #4]
 80105ea:	2b00      	cmp	r3, #0
 80105ec:	d109      	bne.n	8010602 <tcp_close+0x22>
 80105ee:	4b0f      	ldr	r3, [pc, #60]	; (801062c <tcp_close+0x4c>)
 80105f0:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 80105f4:	490e      	ldr	r1, [pc, #56]	; (8010630 <tcp_close+0x50>)
 80105f6:	480f      	ldr	r0, [pc, #60]	; (8010634 <tcp_close+0x54>)
 80105f8:	f008 fa14 	bl	8018a24 <iprintf>
 80105fc:	f06f 030f 	mvn.w	r3, #15
 8010600:	e00f      	b.n	8010622 <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 8010602:	687b      	ldr	r3, [r7, #4]
 8010604:	7d1b      	ldrb	r3, [r3, #20]
 8010606:	2b01      	cmp	r3, #1
 8010608:	d006      	beq.n	8010618 <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 801060a:	687b      	ldr	r3, [r7, #4]
 801060c:	8b5b      	ldrh	r3, [r3, #26]
 801060e:	f043 0310 	orr.w	r3, r3, #16
 8010612:	b29a      	uxth	r2, r3
 8010614:	687b      	ldr	r3, [r7, #4]
 8010616:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 8010618:	2101      	movs	r1, #1
 801061a:	6878      	ldr	r0, [r7, #4]
 801061c:	f7ff fe94 	bl	8010348 <tcp_close_shutdown>
 8010620:	4603      	mov	r3, r0
}
 8010622:	4618      	mov	r0, r3
 8010624:	3708      	adds	r7, #8
 8010626:	46bd      	mov	sp, r7
 8010628:	bd80      	pop	{r7, pc}
 801062a:	bf00      	nop
 801062c:	0801b900 	.word	0x0801b900
 8010630:	0801ba10 	.word	0x0801ba10
 8010634:	0801b944 	.word	0x0801b944

08010638 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 8010638:	b580      	push	{r7, lr}
 801063a:	b08e      	sub	sp, #56	; 0x38
 801063c:	af04      	add	r7, sp, #16
 801063e:	6078      	str	r0, [r7, #4]
 8010640:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 8010642:	687b      	ldr	r3, [r7, #4]
 8010644:	2b00      	cmp	r3, #0
 8010646:	d107      	bne.n	8010658 <tcp_abandon+0x20>
 8010648:	4b52      	ldr	r3, [pc, #328]	; (8010794 <tcp_abandon+0x15c>)
 801064a:	f240 223d 	movw	r2, #573	; 0x23d
 801064e:	4952      	ldr	r1, [pc, #328]	; (8010798 <tcp_abandon+0x160>)
 8010650:	4852      	ldr	r0, [pc, #328]	; (801079c <tcp_abandon+0x164>)
 8010652:	f008 f9e7 	bl	8018a24 <iprintf>
 8010656:	e099      	b.n	801078c <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 8010658:	687b      	ldr	r3, [r7, #4]
 801065a:	7d1b      	ldrb	r3, [r3, #20]
 801065c:	2b01      	cmp	r3, #1
 801065e:	d106      	bne.n	801066e <tcp_abandon+0x36>
 8010660:	4b4c      	ldr	r3, [pc, #304]	; (8010794 <tcp_abandon+0x15c>)
 8010662:	f44f 7210 	mov.w	r2, #576	; 0x240
 8010666:	494e      	ldr	r1, [pc, #312]	; (80107a0 <tcp_abandon+0x168>)
 8010668:	484c      	ldr	r0, [pc, #304]	; (801079c <tcp_abandon+0x164>)
 801066a:	f008 f9db 	bl	8018a24 <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 801066e:	687b      	ldr	r3, [r7, #4]
 8010670:	7d1b      	ldrb	r3, [r3, #20]
 8010672:	2b0a      	cmp	r3, #10
 8010674:	d107      	bne.n	8010686 <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 8010676:	6879      	ldr	r1, [r7, #4]
 8010678:	484a      	ldr	r0, [pc, #296]	; (80107a4 <tcp_abandon+0x16c>)
 801067a:	f000 ffc3 	bl	8011604 <tcp_pcb_remove>
    tcp_free(pcb);
 801067e:	6878      	ldr	r0, [r7, #4]
 8010680:	f7ff fdb0 	bl	80101e4 <tcp_free>
 8010684:	e082      	b.n	801078c <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 8010686:	2300      	movs	r3, #0
 8010688:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 801068a:	2300      	movs	r3, #0
 801068c:	847b      	strh	r3, [r7, #34]	; 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 801068e:	687b      	ldr	r3, [r7, #4]
 8010690:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010692:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 8010694:	687b      	ldr	r3, [r7, #4]
 8010696:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010698:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 801069a:	687b      	ldr	r3, [r7, #4]
 801069c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80106a0:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 80106a2:	687b      	ldr	r3, [r7, #4]
 80106a4:	691b      	ldr	r3, [r3, #16]
 80106a6:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 80106a8:	687b      	ldr	r3, [r7, #4]
 80106aa:	7d1b      	ldrb	r3, [r3, #20]
 80106ac:	2b00      	cmp	r3, #0
 80106ae:	d126      	bne.n	80106fe <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 80106b0:	687b      	ldr	r3, [r7, #4]
 80106b2:	8adb      	ldrh	r3, [r3, #22]
 80106b4:	2b00      	cmp	r3, #0
 80106b6:	d02e      	beq.n	8010716 <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 80106b8:	4b3b      	ldr	r3, [pc, #236]	; (80107a8 <tcp_abandon+0x170>)
 80106ba:	681b      	ldr	r3, [r3, #0]
 80106bc:	687a      	ldr	r2, [r7, #4]
 80106be:	429a      	cmp	r2, r3
 80106c0:	d105      	bne.n	80106ce <tcp_abandon+0x96>
 80106c2:	4b39      	ldr	r3, [pc, #228]	; (80107a8 <tcp_abandon+0x170>)
 80106c4:	681b      	ldr	r3, [r3, #0]
 80106c6:	68db      	ldr	r3, [r3, #12]
 80106c8:	4a37      	ldr	r2, [pc, #220]	; (80107a8 <tcp_abandon+0x170>)
 80106ca:	6013      	str	r3, [r2, #0]
 80106cc:	e013      	b.n	80106f6 <tcp_abandon+0xbe>
 80106ce:	4b36      	ldr	r3, [pc, #216]	; (80107a8 <tcp_abandon+0x170>)
 80106d0:	681b      	ldr	r3, [r3, #0]
 80106d2:	61fb      	str	r3, [r7, #28]
 80106d4:	e00c      	b.n	80106f0 <tcp_abandon+0xb8>
 80106d6:	69fb      	ldr	r3, [r7, #28]
 80106d8:	68db      	ldr	r3, [r3, #12]
 80106da:	687a      	ldr	r2, [r7, #4]
 80106dc:	429a      	cmp	r2, r3
 80106de:	d104      	bne.n	80106ea <tcp_abandon+0xb2>
 80106e0:	687b      	ldr	r3, [r7, #4]
 80106e2:	68da      	ldr	r2, [r3, #12]
 80106e4:	69fb      	ldr	r3, [r7, #28]
 80106e6:	60da      	str	r2, [r3, #12]
 80106e8:	e005      	b.n	80106f6 <tcp_abandon+0xbe>
 80106ea:	69fb      	ldr	r3, [r7, #28]
 80106ec:	68db      	ldr	r3, [r3, #12]
 80106ee:	61fb      	str	r3, [r7, #28]
 80106f0:	69fb      	ldr	r3, [r7, #28]
 80106f2:	2b00      	cmp	r3, #0
 80106f4:	d1ef      	bne.n	80106d6 <tcp_abandon+0x9e>
 80106f6:	687b      	ldr	r3, [r7, #4]
 80106f8:	2200      	movs	r2, #0
 80106fa:	60da      	str	r2, [r3, #12]
 80106fc:	e00b      	b.n	8010716 <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 80106fe:	683b      	ldr	r3, [r7, #0]
 8010700:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 8010702:	687b      	ldr	r3, [r7, #4]
 8010704:	8adb      	ldrh	r3, [r3, #22]
 8010706:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8010708:	6879      	ldr	r1, [r7, #4]
 801070a:	4828      	ldr	r0, [pc, #160]	; (80107ac <tcp_abandon+0x174>)
 801070c:	f000 ff7a 	bl	8011604 <tcp_pcb_remove>
 8010710:	4b27      	ldr	r3, [pc, #156]	; (80107b0 <tcp_abandon+0x178>)
 8010712:	2201      	movs	r2, #1
 8010714:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 8010716:	687b      	ldr	r3, [r7, #4]
 8010718:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801071a:	2b00      	cmp	r3, #0
 801071c:	d004      	beq.n	8010728 <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 801071e:	687b      	ldr	r3, [r7, #4]
 8010720:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010722:	4618      	mov	r0, r3
 8010724:	f000 fd1c 	bl	8011160 <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 8010728:	687b      	ldr	r3, [r7, #4]
 801072a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801072c:	2b00      	cmp	r3, #0
 801072e:	d004      	beq.n	801073a <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 8010730:	687b      	ldr	r3, [r7, #4]
 8010732:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010734:	4618      	mov	r0, r3
 8010736:	f000 fd13 	bl	8011160 <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 801073a:	687b      	ldr	r3, [r7, #4]
 801073c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801073e:	2b00      	cmp	r3, #0
 8010740:	d004      	beq.n	801074c <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 8010742:	687b      	ldr	r3, [r7, #4]
 8010744:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010746:	4618      	mov	r0, r3
 8010748:	f000 fd0a 	bl	8011160 <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 801074c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801074e:	2b00      	cmp	r3, #0
 8010750:	d00e      	beq.n	8010770 <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 8010752:	6879      	ldr	r1, [r7, #4]
 8010754:	687b      	ldr	r3, [r7, #4]
 8010756:	3304      	adds	r3, #4
 8010758:	687a      	ldr	r2, [r7, #4]
 801075a:	8b12      	ldrh	r2, [r2, #24]
 801075c:	9202      	str	r2, [sp, #8]
 801075e:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8010760:	9201      	str	r2, [sp, #4]
 8010762:	9300      	str	r3, [sp, #0]
 8010764:	460b      	mov	r3, r1
 8010766:	697a      	ldr	r2, [r7, #20]
 8010768:	69b9      	ldr	r1, [r7, #24]
 801076a:	6878      	ldr	r0, [r7, #4]
 801076c:	f004 fcc2 	bl	80150f4 <tcp_rst>
    }
    last_state = pcb->state;
 8010770:	687b      	ldr	r3, [r7, #4]
 8010772:	7d1b      	ldrb	r3, [r3, #20]
 8010774:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 8010776:	6878      	ldr	r0, [r7, #4]
 8010778:	f7ff fd34 	bl	80101e4 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 801077c:	693b      	ldr	r3, [r7, #16]
 801077e:	2b00      	cmp	r3, #0
 8010780:	d004      	beq.n	801078c <tcp_abandon+0x154>
 8010782:	693b      	ldr	r3, [r7, #16]
 8010784:	f06f 010c 	mvn.w	r1, #12
 8010788:	68f8      	ldr	r0, [r7, #12]
 801078a:	4798      	blx	r3
  }
}
 801078c:	3728      	adds	r7, #40	; 0x28
 801078e:	46bd      	mov	sp, r7
 8010790:	bd80      	pop	{r7, pc}
 8010792:	bf00      	nop
 8010794:	0801b900 	.word	0x0801b900
 8010798:	0801ba44 	.word	0x0801ba44
 801079c:	0801b944 	.word	0x0801b944
 80107a0:	0801ba60 	.word	0x0801ba60
 80107a4:	20007fe8 	.word	0x20007fe8
 80107a8:	20007fdc 	.word	0x20007fdc
 80107ac:	20007fe4 	.word	0x20007fe4
 80107b0:	20007fec 	.word	0x20007fec

080107b4 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 80107b4:	b580      	push	{r7, lr}
 80107b6:	b082      	sub	sp, #8
 80107b8:	af00      	add	r7, sp, #0
 80107ba:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 80107bc:	2101      	movs	r1, #1
 80107be:	6878      	ldr	r0, [r7, #4]
 80107c0:	f7ff ff3a 	bl	8010638 <tcp_abandon>
}
 80107c4:	bf00      	nop
 80107c6:	3708      	adds	r7, #8
 80107c8:	46bd      	mov	sp, r7
 80107ca:	bd80      	pop	{r7, pc}

080107cc <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 80107cc:	b580      	push	{r7, lr}
 80107ce:	b084      	sub	sp, #16
 80107d0:	af00      	add	r7, sp, #0
 80107d2:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 80107d4:	687b      	ldr	r3, [r7, #4]
 80107d6:	2b00      	cmp	r3, #0
 80107d8:	d106      	bne.n	80107e8 <tcp_update_rcv_ann_wnd+0x1c>
 80107da:	4b25      	ldr	r3, [pc, #148]	; (8010870 <tcp_update_rcv_ann_wnd+0xa4>)
 80107dc:	f240 32a6 	movw	r2, #934	; 0x3a6
 80107e0:	4924      	ldr	r1, [pc, #144]	; (8010874 <tcp_update_rcv_ann_wnd+0xa8>)
 80107e2:	4825      	ldr	r0, [pc, #148]	; (8010878 <tcp_update_rcv_ann_wnd+0xac>)
 80107e4:	f008 f91e 	bl	8018a24 <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 80107e8:	687b      	ldr	r3, [r7, #4]
 80107ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80107ec:	687a      	ldr	r2, [r7, #4]
 80107ee:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 80107f0:	4413      	add	r3, r2
 80107f2:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 80107f4:	687b      	ldr	r3, [r7, #4]
 80107f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80107f8:	687a      	ldr	r2, [r7, #4]
 80107fa:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 80107fc:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 8010800:	bf28      	it	cs
 8010802:	f44f 6286 	movcs.w	r2, #1072	; 0x430
 8010806:	b292      	uxth	r2, r2
 8010808:	4413      	add	r3, r2
 801080a:	68fa      	ldr	r2, [r7, #12]
 801080c:	1ad3      	subs	r3, r2, r3
 801080e:	2b00      	cmp	r3, #0
 8010810:	db08      	blt.n	8010824 <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 8010812:	687b      	ldr	r3, [r7, #4]
 8010814:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8010816:	687b      	ldr	r3, [r7, #4]
 8010818:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 801081a:	687b      	ldr	r3, [r7, #4]
 801081c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801081e:	68fa      	ldr	r2, [r7, #12]
 8010820:	1ad3      	subs	r3, r2, r3
 8010822:	e020      	b.n	8010866 <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 8010824:	687b      	ldr	r3, [r7, #4]
 8010826:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8010828:	687b      	ldr	r3, [r7, #4]
 801082a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801082c:	1ad3      	subs	r3, r2, r3
 801082e:	2b00      	cmp	r3, #0
 8010830:	dd03      	ble.n	801083a <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 8010832:	687b      	ldr	r3, [r7, #4]
 8010834:	2200      	movs	r2, #0
 8010836:	855a      	strh	r2, [r3, #42]	; 0x2a
 8010838:	e014      	b.n	8010864 <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 801083a:	687b      	ldr	r3, [r7, #4]
 801083c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801083e:	687b      	ldr	r3, [r7, #4]
 8010840:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010842:	1ad3      	subs	r3, r2, r3
 8010844:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 8010846:	68bb      	ldr	r3, [r7, #8]
 8010848:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801084c:	d306      	bcc.n	801085c <tcp_update_rcv_ann_wnd+0x90>
 801084e:	4b08      	ldr	r3, [pc, #32]	; (8010870 <tcp_update_rcv_ann_wnd+0xa4>)
 8010850:	f240 32b6 	movw	r2, #950	; 0x3b6
 8010854:	4909      	ldr	r1, [pc, #36]	; (801087c <tcp_update_rcv_ann_wnd+0xb0>)
 8010856:	4808      	ldr	r0, [pc, #32]	; (8010878 <tcp_update_rcv_ann_wnd+0xac>)
 8010858:	f008 f8e4 	bl	8018a24 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 801085c:	68bb      	ldr	r3, [r7, #8]
 801085e:	b29a      	uxth	r2, r3
 8010860:	687b      	ldr	r3, [r7, #4]
 8010862:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 8010864:	2300      	movs	r3, #0
  }
}
 8010866:	4618      	mov	r0, r3
 8010868:	3710      	adds	r7, #16
 801086a:	46bd      	mov	sp, r7
 801086c:	bd80      	pop	{r7, pc}
 801086e:	bf00      	nop
 8010870:	0801b900 	.word	0x0801b900
 8010874:	0801bb5c 	.word	0x0801bb5c
 8010878:	0801b944 	.word	0x0801b944
 801087c:	0801bb80 	.word	0x0801bb80

08010880 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 8010880:	b580      	push	{r7, lr}
 8010882:	b084      	sub	sp, #16
 8010884:	af00      	add	r7, sp, #0
 8010886:	6078      	str	r0, [r7, #4]
 8010888:	460b      	mov	r3, r1
 801088a:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 801088c:	687b      	ldr	r3, [r7, #4]
 801088e:	2b00      	cmp	r3, #0
 8010890:	d107      	bne.n	80108a2 <tcp_recved+0x22>
 8010892:	4b1f      	ldr	r3, [pc, #124]	; (8010910 <tcp_recved+0x90>)
 8010894:	f240 32cf 	movw	r2, #975	; 0x3cf
 8010898:	491e      	ldr	r1, [pc, #120]	; (8010914 <tcp_recved+0x94>)
 801089a:	481f      	ldr	r0, [pc, #124]	; (8010918 <tcp_recved+0x98>)
 801089c:	f008 f8c2 	bl	8018a24 <iprintf>
 80108a0:	e032      	b.n	8010908 <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 80108a2:	687b      	ldr	r3, [r7, #4]
 80108a4:	7d1b      	ldrb	r3, [r3, #20]
 80108a6:	2b01      	cmp	r3, #1
 80108a8:	d106      	bne.n	80108b8 <tcp_recved+0x38>
 80108aa:	4b19      	ldr	r3, [pc, #100]	; (8010910 <tcp_recved+0x90>)
 80108ac:	f240 32d2 	movw	r2, #978	; 0x3d2
 80108b0:	491a      	ldr	r1, [pc, #104]	; (801091c <tcp_recved+0x9c>)
 80108b2:	4819      	ldr	r0, [pc, #100]	; (8010918 <tcp_recved+0x98>)
 80108b4:	f008 f8b6 	bl	8018a24 <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 80108b8:	687b      	ldr	r3, [r7, #4]
 80108ba:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 80108bc:	887b      	ldrh	r3, [r7, #2]
 80108be:	4413      	add	r3, r2
 80108c0:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 80108c2:	89fb      	ldrh	r3, [r7, #14]
 80108c4:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 80108c8:	d804      	bhi.n	80108d4 <tcp_recved+0x54>
 80108ca:	687b      	ldr	r3, [r7, #4]
 80108cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80108ce:	89fa      	ldrh	r2, [r7, #14]
 80108d0:	429a      	cmp	r2, r3
 80108d2:	d204      	bcs.n	80108de <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 80108d4:	687b      	ldr	r3, [r7, #4]
 80108d6:	f44f 6206 	mov.w	r2, #2144	; 0x860
 80108da:	851a      	strh	r2, [r3, #40]	; 0x28
 80108dc:	e002      	b.n	80108e4 <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 80108de:	687b      	ldr	r3, [r7, #4]
 80108e0:	89fa      	ldrh	r2, [r7, #14]
 80108e2:	851a      	strh	r2, [r3, #40]	; 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 80108e4:	6878      	ldr	r0, [r7, #4]
 80108e6:	f7ff ff71 	bl	80107cc <tcp_update_rcv_ann_wnd>
 80108ea:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 80108ec:	68bb      	ldr	r3, [r7, #8]
 80108ee:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 80108f2:	d309      	bcc.n	8010908 <tcp_recved+0x88>
    tcp_ack_now(pcb);
 80108f4:	687b      	ldr	r3, [r7, #4]
 80108f6:	8b5b      	ldrh	r3, [r3, #26]
 80108f8:	f043 0302 	orr.w	r3, r3, #2
 80108fc:	b29a      	uxth	r2, r3
 80108fe:	687b      	ldr	r3, [r7, #4]
 8010900:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8010902:	6878      	ldr	r0, [r7, #4]
 8010904:	f003 fe42 	bl	801458c <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 8010908:	3710      	adds	r7, #16
 801090a:	46bd      	mov	sp, r7
 801090c:	bd80      	pop	{r7, pc}
 801090e:	bf00      	nop
 8010910:	0801b900 	.word	0x0801b900
 8010914:	0801bb9c 	.word	0x0801bb9c
 8010918:	0801b944 	.word	0x0801b944
 801091c:	0801bbb4 	.word	0x0801bbb4

08010920 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 8010920:	b5b0      	push	{r4, r5, r7, lr}
 8010922:	b090      	sub	sp, #64	; 0x40
 8010924:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 8010926:	2300      	movs	r3, #0
 8010928:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  ++tcp_ticks;
 801092c:	4b94      	ldr	r3, [pc, #592]	; (8010b80 <tcp_slowtmr+0x260>)
 801092e:	681b      	ldr	r3, [r3, #0]
 8010930:	3301      	adds	r3, #1
 8010932:	4a93      	ldr	r2, [pc, #588]	; (8010b80 <tcp_slowtmr+0x260>)
 8010934:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 8010936:	4b93      	ldr	r3, [pc, #588]	; (8010b84 <tcp_slowtmr+0x264>)
 8010938:	781b      	ldrb	r3, [r3, #0]
 801093a:	3301      	adds	r3, #1
 801093c:	b2da      	uxtb	r2, r3
 801093e:	4b91      	ldr	r3, [pc, #580]	; (8010b84 <tcp_slowtmr+0x264>)
 8010940:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 8010942:	2300      	movs	r3, #0
 8010944:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_active_pcbs;
 8010946:	4b90      	ldr	r3, [pc, #576]	; (8010b88 <tcp_slowtmr+0x268>)
 8010948:	681b      	ldr	r3, [r3, #0]
 801094a:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 801094c:	e29d      	b.n	8010e8a <tcp_slowtmr+0x56a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 801094e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010950:	7d1b      	ldrb	r3, [r3, #20]
 8010952:	2b00      	cmp	r3, #0
 8010954:	d106      	bne.n	8010964 <tcp_slowtmr+0x44>
 8010956:	4b8d      	ldr	r3, [pc, #564]	; (8010b8c <tcp_slowtmr+0x26c>)
 8010958:	f240 42be 	movw	r2, #1214	; 0x4be
 801095c:	498c      	ldr	r1, [pc, #560]	; (8010b90 <tcp_slowtmr+0x270>)
 801095e:	488d      	ldr	r0, [pc, #564]	; (8010b94 <tcp_slowtmr+0x274>)
 8010960:	f008 f860 	bl	8018a24 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 8010964:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010966:	7d1b      	ldrb	r3, [r3, #20]
 8010968:	2b01      	cmp	r3, #1
 801096a:	d106      	bne.n	801097a <tcp_slowtmr+0x5a>
 801096c:	4b87      	ldr	r3, [pc, #540]	; (8010b8c <tcp_slowtmr+0x26c>)
 801096e:	f240 42bf 	movw	r2, #1215	; 0x4bf
 8010972:	4989      	ldr	r1, [pc, #548]	; (8010b98 <tcp_slowtmr+0x278>)
 8010974:	4887      	ldr	r0, [pc, #540]	; (8010b94 <tcp_slowtmr+0x274>)
 8010976:	f008 f855 	bl	8018a24 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 801097a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801097c:	7d1b      	ldrb	r3, [r3, #20]
 801097e:	2b0a      	cmp	r3, #10
 8010980:	d106      	bne.n	8010990 <tcp_slowtmr+0x70>
 8010982:	4b82      	ldr	r3, [pc, #520]	; (8010b8c <tcp_slowtmr+0x26c>)
 8010984:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 8010988:	4984      	ldr	r1, [pc, #528]	; (8010b9c <tcp_slowtmr+0x27c>)
 801098a:	4882      	ldr	r0, [pc, #520]	; (8010b94 <tcp_slowtmr+0x274>)
 801098c:	f008 f84a 	bl	8018a24 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 8010990:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010992:	7f9a      	ldrb	r2, [r3, #30]
 8010994:	4b7b      	ldr	r3, [pc, #492]	; (8010b84 <tcp_slowtmr+0x264>)
 8010996:	781b      	ldrb	r3, [r3, #0]
 8010998:	429a      	cmp	r2, r3
 801099a:	d105      	bne.n	80109a8 <tcp_slowtmr+0x88>
      /* skip this pcb, we have already processed it */
      prev = pcb;
 801099c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801099e:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 80109a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80109a2:	68db      	ldr	r3, [r3, #12]
 80109a4:	62fb      	str	r3, [r7, #44]	; 0x2c
      continue;
 80109a6:	e270      	b.n	8010e8a <tcp_slowtmr+0x56a>
    }
    pcb->last_timer = tcp_timer_ctr;
 80109a8:	4b76      	ldr	r3, [pc, #472]	; (8010b84 <tcp_slowtmr+0x264>)
 80109aa:	781a      	ldrb	r2, [r3, #0]
 80109ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80109ae:	779a      	strb	r2, [r3, #30]

    pcb_remove = 0;
 80109b0:	2300      	movs	r3, #0
 80109b2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    pcb_reset = 0;
 80109b6:	2300      	movs	r3, #0
 80109b8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 80109bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80109be:	7d1b      	ldrb	r3, [r3, #20]
 80109c0:	2b02      	cmp	r3, #2
 80109c2:	d10a      	bne.n	80109da <tcp_slowtmr+0xba>
 80109c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80109c6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80109ca:	2b05      	cmp	r3, #5
 80109cc:	d905      	bls.n	80109da <tcp_slowtmr+0xba>
      ++pcb_remove;
 80109ce:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80109d2:	3301      	adds	r3, #1
 80109d4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80109d8:	e11e      	b.n	8010c18 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 80109da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80109dc:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80109e0:	2b0b      	cmp	r3, #11
 80109e2:	d905      	bls.n	80109f0 <tcp_slowtmr+0xd0>
      ++pcb_remove;
 80109e4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80109e8:	3301      	adds	r3, #1
 80109ea:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80109ee:	e113      	b.n	8010c18 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 80109f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80109f2:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 80109f6:	2b00      	cmp	r3, #0
 80109f8:	d075      	beq.n	8010ae6 <tcp_slowtmr+0x1c6>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 80109fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80109fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80109fe:	2b00      	cmp	r3, #0
 8010a00:	d006      	beq.n	8010a10 <tcp_slowtmr+0xf0>
 8010a02:	4b62      	ldr	r3, [pc, #392]	; (8010b8c <tcp_slowtmr+0x26c>)
 8010a04:	f240 42d4 	movw	r2, #1236	; 0x4d4
 8010a08:	4965      	ldr	r1, [pc, #404]	; (8010ba0 <tcp_slowtmr+0x280>)
 8010a0a:	4862      	ldr	r0, [pc, #392]	; (8010b94 <tcp_slowtmr+0x274>)
 8010a0c:	f008 f80a 	bl	8018a24 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 8010a10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010a12:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010a14:	2b00      	cmp	r3, #0
 8010a16:	d106      	bne.n	8010a26 <tcp_slowtmr+0x106>
 8010a18:	4b5c      	ldr	r3, [pc, #368]	; (8010b8c <tcp_slowtmr+0x26c>)
 8010a1a:	f240 42d5 	movw	r2, #1237	; 0x4d5
 8010a1e:	4961      	ldr	r1, [pc, #388]	; (8010ba4 <tcp_slowtmr+0x284>)
 8010a20:	485c      	ldr	r0, [pc, #368]	; (8010b94 <tcp_slowtmr+0x274>)
 8010a22:	f007 ffff 	bl	8018a24 <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 8010a26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010a28:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 8010a2c:	2b0b      	cmp	r3, #11
 8010a2e:	d905      	bls.n	8010a3c <tcp_slowtmr+0x11c>
          ++pcb_remove; /* max probes reached */
 8010a30:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8010a34:	3301      	adds	r3, #1
 8010a36:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8010a3a:	e0ed      	b.n	8010c18 <tcp_slowtmr+0x2f8>
        } else {
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 8010a3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010a3e:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8010a42:	3b01      	subs	r3, #1
 8010a44:	4a58      	ldr	r2, [pc, #352]	; (8010ba8 <tcp_slowtmr+0x288>)
 8010a46:	5cd3      	ldrb	r3, [r2, r3]
 8010a48:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 8010a4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010a4c:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8010a50:	7c7a      	ldrb	r2, [r7, #17]
 8010a52:	429a      	cmp	r2, r3
 8010a54:	d907      	bls.n	8010a66 <tcp_slowtmr+0x146>
            pcb->persist_cnt++;
 8010a56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010a58:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8010a5c:	3301      	adds	r3, #1
 8010a5e:	b2da      	uxtb	r2, r3
 8010a60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010a62:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
          }
          if (pcb->persist_cnt >= backoff_cnt) {
 8010a66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010a68:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8010a6c:	7c7a      	ldrb	r2, [r7, #17]
 8010a6e:	429a      	cmp	r2, r3
 8010a70:	f200 80d2 	bhi.w	8010c18 <tcp_slowtmr+0x2f8>
            int next_slot = 1; /* increment timer to next slot */
 8010a74:	2301      	movs	r3, #1
 8010a76:	623b      	str	r3, [r7, #32]
            /* If snd_wnd is zero, send 1 byte probes */
            if (pcb->snd_wnd == 0) {
 8010a78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010a7a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8010a7e:	2b00      	cmp	r3, #0
 8010a80:	d108      	bne.n	8010a94 <tcp_slowtmr+0x174>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 8010a82:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8010a84:	f004 fc2a 	bl	80152dc <tcp_zero_window_probe>
 8010a88:	4603      	mov	r3, r0
 8010a8a:	2b00      	cmp	r3, #0
 8010a8c:	d014      	beq.n	8010ab8 <tcp_slowtmr+0x198>
                next_slot = 0; /* try probe again with current slot */
 8010a8e:	2300      	movs	r3, #0
 8010a90:	623b      	str	r3, [r7, #32]
 8010a92:	e011      	b.n	8010ab8 <tcp_slowtmr+0x198>
              }
              /* snd_wnd not fully closed, split unsent head and fill window */
            } else {
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 8010a94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010a96:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8010a9a:	4619      	mov	r1, r3
 8010a9c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8010a9e:	f003 faef 	bl	8014080 <tcp_split_unsent_seg>
 8010aa2:	4603      	mov	r3, r0
 8010aa4:	2b00      	cmp	r3, #0
 8010aa6:	d107      	bne.n	8010ab8 <tcp_slowtmr+0x198>
                if (tcp_output(pcb) == ERR_OK) {
 8010aa8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8010aaa:	f003 fd6f 	bl	801458c <tcp_output>
 8010aae:	4603      	mov	r3, r0
 8010ab0:	2b00      	cmp	r3, #0
 8010ab2:	d101      	bne.n	8010ab8 <tcp_slowtmr+0x198>
                  /* sending will cancel persist timer, else retry with current slot */
                  next_slot = 0;
 8010ab4:	2300      	movs	r3, #0
 8010ab6:	623b      	str	r3, [r7, #32]
                }
              }
            }
            if (next_slot) {
 8010ab8:	6a3b      	ldr	r3, [r7, #32]
 8010aba:	2b00      	cmp	r3, #0
 8010abc:	f000 80ac 	beq.w	8010c18 <tcp_slowtmr+0x2f8>
              pcb->persist_cnt = 0;
 8010ac0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010ac2:	2200      	movs	r2, #0
 8010ac4:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 8010ac8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010aca:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8010ace:	2b06      	cmp	r3, #6
 8010ad0:	f200 80a2 	bhi.w	8010c18 <tcp_slowtmr+0x2f8>
                pcb->persist_backoff++;
 8010ad4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010ad6:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8010ada:	3301      	adds	r3, #1
 8010adc:	b2da      	uxtb	r2, r3
 8010ade:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010ae0:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
 8010ae4:	e098      	b.n	8010c18 <tcp_slowtmr+0x2f8>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 8010ae6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010ae8:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8010aec:	2b00      	cmp	r3, #0
 8010aee:	db0f      	blt.n	8010b10 <tcp_slowtmr+0x1f0>
 8010af0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010af2:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8010af6:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8010afa:	4293      	cmp	r3, r2
 8010afc:	d008      	beq.n	8010b10 <tcp_slowtmr+0x1f0>
          ++pcb->rtime;
 8010afe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010b00:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8010b04:	b29b      	uxth	r3, r3
 8010b06:	3301      	adds	r3, #1
 8010b08:	b29b      	uxth	r3, r3
 8010b0a:	b21a      	sxth	r2, r3
 8010b0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010b0e:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->rtime >= pcb->rto) {
 8010b10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010b12:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 8010b16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010b18:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 8010b1c:	429a      	cmp	r2, r3
 8010b1e:	db7b      	blt.n	8010c18 <tcp_slowtmr+0x2f8>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));
          /* If prepare phase fails but we have unsent data but no unacked data,
             still execute the backoff calculations below, as this means we somehow
             failed to send segment. */
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 8010b20:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8010b22:	f004 f827 	bl	8014b74 <tcp_rexmit_rto_prepare>
 8010b26:	4603      	mov	r3, r0
 8010b28:	2b00      	cmp	r3, #0
 8010b2a:	d007      	beq.n	8010b3c <tcp_slowtmr+0x21c>
 8010b2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010b2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010b30:	2b00      	cmp	r3, #0
 8010b32:	d171      	bne.n	8010c18 <tcp_slowtmr+0x2f8>
 8010b34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010b36:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010b38:	2b00      	cmp	r3, #0
 8010b3a:	d06d      	beq.n	8010c18 <tcp_slowtmr+0x2f8>
            /* Double retransmission time-out unless we are trying to
             * connect to somebody (i.e., we are in SYN_SENT). */
            if (pcb->state != SYN_SENT) {
 8010b3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010b3e:	7d1b      	ldrb	r3, [r3, #20]
 8010b40:	2b02      	cmp	r3, #2
 8010b42:	d03a      	beq.n	8010bba <tcp_slowtmr+0x29a>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 8010b44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010b46:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8010b4a:	2b0c      	cmp	r3, #12
 8010b4c:	bf28      	it	cs
 8010b4e:	230c      	movcs	r3, #12
 8010b50:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 8010b52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010b54:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8010b58:	10db      	asrs	r3, r3, #3
 8010b5a:	b21b      	sxth	r3, r3
 8010b5c:	461a      	mov	r2, r3
 8010b5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010b60:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8010b64:	4413      	add	r3, r2
 8010b66:	7efa      	ldrb	r2, [r7, #27]
 8010b68:	4910      	ldr	r1, [pc, #64]	; (8010bac <tcp_slowtmr+0x28c>)
 8010b6a:	5c8a      	ldrb	r2, [r1, r2]
 8010b6c:	4093      	lsls	r3, r2
 8010b6e:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 8010b70:	697b      	ldr	r3, [r7, #20]
 8010b72:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 8010b76:	4293      	cmp	r3, r2
 8010b78:	dc1a      	bgt.n	8010bb0 <tcp_slowtmr+0x290>
 8010b7a:	697b      	ldr	r3, [r7, #20]
 8010b7c:	b21a      	sxth	r2, r3
 8010b7e:	e019      	b.n	8010bb4 <tcp_slowtmr+0x294>
 8010b80:	20007fd8 	.word	0x20007fd8
 8010b84:	20007fee 	.word	0x20007fee
 8010b88:	20007fe4 	.word	0x20007fe4
 8010b8c:	0801b900 	.word	0x0801b900
 8010b90:	0801bc44 	.word	0x0801bc44
 8010b94:	0801b944 	.word	0x0801b944
 8010b98:	0801bc70 	.word	0x0801bc70
 8010b9c:	0801bc9c 	.word	0x0801bc9c
 8010ba0:	0801bccc 	.word	0x0801bccc
 8010ba4:	0801bd00 	.word	0x0801bd00
 8010ba8:	0801d920 	.word	0x0801d920
 8010bac:	0801d910 	.word	0x0801d910
 8010bb0:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8010bb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010bb6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
            }

            /* Reset the retransmission timer. */
            pcb->rtime = 0;
 8010bba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010bbc:	2200      	movs	r2, #0
 8010bbe:	861a      	strh	r2, [r3, #48]	; 0x30

            /* Reduce congestion window and ssthresh. */
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 8010bc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010bc2:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8010bc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010bc8:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8010bcc:	4293      	cmp	r3, r2
 8010bce:	bf28      	it	cs
 8010bd0:	4613      	movcs	r3, r2
 8010bd2:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 8010bd4:	8a7b      	ldrh	r3, [r7, #18]
 8010bd6:	085b      	lsrs	r3, r3, #1
 8010bd8:	b29a      	uxth	r2, r3
 8010bda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010bdc:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 8010be0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010be2:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8010be6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010be8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010bea:	005b      	lsls	r3, r3, #1
 8010bec:	b29b      	uxth	r3, r3
 8010bee:	429a      	cmp	r2, r3
 8010bf0:	d206      	bcs.n	8010c00 <tcp_slowtmr+0x2e0>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 8010bf2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010bf4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010bf6:	005b      	lsls	r3, r3, #1
 8010bf8:	b29a      	uxth	r2, r3
 8010bfa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010bfc:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            }
            pcb->cwnd = pcb->mss;
 8010c00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010c02:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 8010c04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010c06:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
            LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: cwnd %"TCPWNDSIZE_F
                                         " ssthresh %"TCPWNDSIZE_F"\n",
                                         pcb->cwnd, pcb->ssthresh));
            pcb->bytes_acked = 0;
 8010c0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010c0c:	2200      	movs	r2, #0
 8010c0e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

            /* The following needs to be called AFTER cwnd is set to one
               mss - STJ */
            tcp_rexmit_rto_commit(pcb);
 8010c12:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8010c14:	f004 f81e 	bl	8014c54 <tcp_rexmit_rto_commit>
          }
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 8010c18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010c1a:	7d1b      	ldrb	r3, [r3, #20]
 8010c1c:	2b06      	cmp	r3, #6
 8010c1e:	d111      	bne.n	8010c44 <tcp_slowtmr+0x324>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 8010c20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010c22:	8b5b      	ldrh	r3, [r3, #26]
 8010c24:	f003 0310 	and.w	r3, r3, #16
 8010c28:	2b00      	cmp	r3, #0
 8010c2a:	d00b      	beq.n	8010c44 <tcp_slowtmr+0x324>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 8010c2c:	4b9c      	ldr	r3, [pc, #624]	; (8010ea0 <tcp_slowtmr+0x580>)
 8010c2e:	681a      	ldr	r2, [r3, #0]
 8010c30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010c32:	6a1b      	ldr	r3, [r3, #32]
 8010c34:	1ad3      	subs	r3, r2, r3
 8010c36:	2b28      	cmp	r3, #40	; 0x28
 8010c38:	d904      	bls.n	8010c44 <tcp_slowtmr+0x324>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 8010c3a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8010c3e:	3301      	adds	r3, #1
 8010c40:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8010c44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010c46:	7a5b      	ldrb	r3, [r3, #9]
 8010c48:	f003 0308 	and.w	r3, r3, #8
 8010c4c:	2b00      	cmp	r3, #0
 8010c4e:	d04a      	beq.n	8010ce6 <tcp_slowtmr+0x3c6>
        ((pcb->state == ESTABLISHED) ||
 8010c50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010c52:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8010c54:	2b04      	cmp	r3, #4
 8010c56:	d003      	beq.n	8010c60 <tcp_slowtmr+0x340>
         (pcb->state == CLOSE_WAIT))) {
 8010c58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010c5a:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 8010c5c:	2b07      	cmp	r3, #7
 8010c5e:	d142      	bne.n	8010ce6 <tcp_slowtmr+0x3c6>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8010c60:	4b8f      	ldr	r3, [pc, #572]	; (8010ea0 <tcp_slowtmr+0x580>)
 8010c62:	681a      	ldr	r2, [r3, #0]
 8010c64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010c66:	6a1b      	ldr	r3, [r3, #32]
 8010c68:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 8010c6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010c6c:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 8010c70:	4b8c      	ldr	r3, [pc, #560]	; (8010ea4 <tcp_slowtmr+0x584>)
 8010c72:	440b      	add	r3, r1
 8010c74:	498c      	ldr	r1, [pc, #560]	; (8010ea8 <tcp_slowtmr+0x588>)
 8010c76:	fba1 1303 	umull	r1, r3, r1, r3
 8010c7a:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8010c7c:	429a      	cmp	r2, r3
 8010c7e:	d90a      	bls.n	8010c96 <tcp_slowtmr+0x376>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print_val(TCP_DEBUG, pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 8010c80:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8010c84:	3301      	adds	r3, #1
 8010c86:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        ++pcb_reset;
 8010c8a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8010c8e:	3301      	adds	r3, #1
 8010c90:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8010c94:	e027      	b.n	8010ce6 <tcp_slowtmr+0x3c6>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 8010c96:	4b82      	ldr	r3, [pc, #520]	; (8010ea0 <tcp_slowtmr+0x580>)
 8010c98:	681a      	ldr	r2, [r3, #0]
 8010c9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010c9c:	6a1b      	ldr	r3, [r3, #32]
 8010c9e:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 8010ca0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010ca2:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 8010ca6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010ca8:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 8010cac:	4618      	mov	r0, r3
 8010cae:	4b7f      	ldr	r3, [pc, #508]	; (8010eac <tcp_slowtmr+0x58c>)
 8010cb0:	fb00 f303 	mul.w	r3, r0, r3
 8010cb4:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 8010cb6:	497c      	ldr	r1, [pc, #496]	; (8010ea8 <tcp_slowtmr+0x588>)
 8010cb8:	fba1 1303 	umull	r1, r3, r1, r3
 8010cbc:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 8010cbe:	429a      	cmp	r2, r3
 8010cc0:	d911      	bls.n	8010ce6 <tcp_slowtmr+0x3c6>
        err = tcp_keepalive(pcb);
 8010cc2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8010cc4:	f004 faca 	bl	801525c <tcp_keepalive>
 8010cc8:	4603      	mov	r3, r0
 8010cca:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (err == ERR_OK) {
 8010cce:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 8010cd2:	2b00      	cmp	r3, #0
 8010cd4:	d107      	bne.n	8010ce6 <tcp_slowtmr+0x3c6>
          pcb->keep_cnt_sent++;
 8010cd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010cd8:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 8010cdc:	3301      	adds	r3, #1
 8010cde:	b2da      	uxtb	r2, r3
 8010ce0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010ce2:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 8010ce6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010ce8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010cea:	2b00      	cmp	r3, #0
 8010cec:	d011      	beq.n	8010d12 <tcp_slowtmr+0x3f2>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 8010cee:	4b6c      	ldr	r3, [pc, #432]	; (8010ea0 <tcp_slowtmr+0x580>)
 8010cf0:	681a      	ldr	r2, [r3, #0]
 8010cf2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010cf4:	6a1b      	ldr	r3, [r3, #32]
 8010cf6:	1ad2      	subs	r2, r2, r3
 8010cf8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010cfa:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 8010cfe:	4619      	mov	r1, r3
 8010d00:	460b      	mov	r3, r1
 8010d02:	005b      	lsls	r3, r3, #1
 8010d04:	440b      	add	r3, r1
 8010d06:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 8010d08:	429a      	cmp	r2, r3
 8010d0a:	d302      	bcc.n	8010d12 <tcp_slowtmr+0x3f2>
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
      tcp_free_ooseq(pcb);
 8010d0c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8010d0e:	f000 fddd 	bl	80118cc <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 8010d12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010d14:	7d1b      	ldrb	r3, [r3, #20]
 8010d16:	2b03      	cmp	r3, #3
 8010d18:	d10b      	bne.n	8010d32 <tcp_slowtmr+0x412>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8010d1a:	4b61      	ldr	r3, [pc, #388]	; (8010ea0 <tcp_slowtmr+0x580>)
 8010d1c:	681a      	ldr	r2, [r3, #0]
 8010d1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010d20:	6a1b      	ldr	r3, [r3, #32]
 8010d22:	1ad3      	subs	r3, r2, r3
 8010d24:	2b28      	cmp	r3, #40	; 0x28
 8010d26:	d904      	bls.n	8010d32 <tcp_slowtmr+0x412>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 8010d28:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8010d2c:	3301      	adds	r3, #1
 8010d2e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 8010d32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010d34:	7d1b      	ldrb	r3, [r3, #20]
 8010d36:	2b09      	cmp	r3, #9
 8010d38:	d10b      	bne.n	8010d52 <tcp_slowtmr+0x432>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8010d3a:	4b59      	ldr	r3, [pc, #356]	; (8010ea0 <tcp_slowtmr+0x580>)
 8010d3c:	681a      	ldr	r2, [r3, #0]
 8010d3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010d40:	6a1b      	ldr	r3, [r3, #32]
 8010d42:	1ad3      	subs	r3, r2, r3
 8010d44:	2bf0      	cmp	r3, #240	; 0xf0
 8010d46:	d904      	bls.n	8010d52 <tcp_slowtmr+0x432>
        ++pcb_remove;
 8010d48:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8010d4c:	3301      	adds	r3, #1
 8010d4e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 8010d52:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8010d56:	2b00      	cmp	r3, #0
 8010d58:	d060      	beq.n	8010e1c <tcp_slowtmr+0x4fc>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 8010d5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010d5c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010d60:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 8010d62:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8010d64:	f000 fbfe 	bl	8011564 <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 8010d68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010d6a:	2b00      	cmp	r3, #0
 8010d6c:	d010      	beq.n	8010d90 <tcp_slowtmr+0x470>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 8010d6e:	4b50      	ldr	r3, [pc, #320]	; (8010eb0 <tcp_slowtmr+0x590>)
 8010d70:	681b      	ldr	r3, [r3, #0]
 8010d72:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010d74:	429a      	cmp	r2, r3
 8010d76:	d106      	bne.n	8010d86 <tcp_slowtmr+0x466>
 8010d78:	4b4e      	ldr	r3, [pc, #312]	; (8010eb4 <tcp_slowtmr+0x594>)
 8010d7a:	f240 526d 	movw	r2, #1389	; 0x56d
 8010d7e:	494e      	ldr	r1, [pc, #312]	; (8010eb8 <tcp_slowtmr+0x598>)
 8010d80:	484e      	ldr	r0, [pc, #312]	; (8010ebc <tcp_slowtmr+0x59c>)
 8010d82:	f007 fe4f 	bl	8018a24 <iprintf>
        prev->next = pcb->next;
 8010d86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010d88:	68da      	ldr	r2, [r3, #12]
 8010d8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010d8c:	60da      	str	r2, [r3, #12]
 8010d8e:	e00f      	b.n	8010db0 <tcp_slowtmr+0x490>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 8010d90:	4b47      	ldr	r3, [pc, #284]	; (8010eb0 <tcp_slowtmr+0x590>)
 8010d92:	681b      	ldr	r3, [r3, #0]
 8010d94:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010d96:	429a      	cmp	r2, r3
 8010d98:	d006      	beq.n	8010da8 <tcp_slowtmr+0x488>
 8010d9a:	4b46      	ldr	r3, [pc, #280]	; (8010eb4 <tcp_slowtmr+0x594>)
 8010d9c:	f240 5271 	movw	r2, #1393	; 0x571
 8010da0:	4947      	ldr	r1, [pc, #284]	; (8010ec0 <tcp_slowtmr+0x5a0>)
 8010da2:	4846      	ldr	r0, [pc, #280]	; (8010ebc <tcp_slowtmr+0x59c>)
 8010da4:	f007 fe3e 	bl	8018a24 <iprintf>
        tcp_active_pcbs = pcb->next;
 8010da8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010daa:	68db      	ldr	r3, [r3, #12]
 8010dac:	4a40      	ldr	r2, [pc, #256]	; (8010eb0 <tcp_slowtmr+0x590>)
 8010dae:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 8010db0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8010db4:	2b00      	cmp	r3, #0
 8010db6:	d013      	beq.n	8010de0 <tcp_slowtmr+0x4c0>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8010db8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010dba:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8010dbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010dbe:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8010dc0:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 8010dc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010dc4:	3304      	adds	r3, #4
 8010dc6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010dc8:	8ad2      	ldrh	r2, [r2, #22]
 8010dca:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8010dcc:	8b09      	ldrh	r1, [r1, #24]
 8010dce:	9102      	str	r1, [sp, #8]
 8010dd0:	9201      	str	r2, [sp, #4]
 8010dd2:	9300      	str	r3, [sp, #0]
 8010dd4:	462b      	mov	r3, r5
 8010dd6:	4622      	mov	r2, r4
 8010dd8:	4601      	mov	r1, r0
 8010dda:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8010ddc:	f004 f98a 	bl	80150f4 <tcp_rst>
                pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 8010de0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010de2:	691b      	ldr	r3, [r3, #16]
 8010de4:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 8010de6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010de8:	7d1b      	ldrb	r3, [r3, #20]
 8010dea:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 8010dec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010dee:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 8010df0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010df2:	68db      	ldr	r3, [r3, #12]
 8010df4:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 8010df6:	6838      	ldr	r0, [r7, #0]
 8010df8:	f7ff f9f4 	bl	80101e4 <tcp_free>

      tcp_active_pcbs_changed = 0;
 8010dfc:	4b31      	ldr	r3, [pc, #196]	; (8010ec4 <tcp_slowtmr+0x5a4>)
 8010dfe:	2200      	movs	r2, #0
 8010e00:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 8010e02:	68fb      	ldr	r3, [r7, #12]
 8010e04:	2b00      	cmp	r3, #0
 8010e06:	d004      	beq.n	8010e12 <tcp_slowtmr+0x4f2>
 8010e08:	68fb      	ldr	r3, [r7, #12]
 8010e0a:	f06f 010c 	mvn.w	r1, #12
 8010e0e:	68b8      	ldr	r0, [r7, #8]
 8010e10:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 8010e12:	4b2c      	ldr	r3, [pc, #176]	; (8010ec4 <tcp_slowtmr+0x5a4>)
 8010e14:	781b      	ldrb	r3, [r3, #0]
 8010e16:	2b00      	cmp	r3, #0
 8010e18:	d037      	beq.n	8010e8a <tcp_slowtmr+0x56a>
        goto tcp_slowtmr_start;
 8010e1a:	e592      	b.n	8010942 <tcp_slowtmr+0x22>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 8010e1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010e1e:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 8010e20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010e22:	68db      	ldr	r3, [r3, #12]
 8010e24:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 8010e26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010e28:	7f1b      	ldrb	r3, [r3, #28]
 8010e2a:	3301      	adds	r3, #1
 8010e2c:	b2da      	uxtb	r2, r3
 8010e2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010e30:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 8010e32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010e34:	7f1a      	ldrb	r2, [r3, #28]
 8010e36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010e38:	7f5b      	ldrb	r3, [r3, #29]
 8010e3a:	429a      	cmp	r2, r3
 8010e3c:	d325      	bcc.n	8010e8a <tcp_slowtmr+0x56a>
        prev->polltmr = 0;
 8010e3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010e40:	2200      	movs	r2, #0
 8010e42:	771a      	strb	r2, [r3, #28]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 8010e44:	4b1f      	ldr	r3, [pc, #124]	; (8010ec4 <tcp_slowtmr+0x5a4>)
 8010e46:	2200      	movs	r2, #0
 8010e48:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 8010e4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010e4c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8010e50:	2b00      	cmp	r3, #0
 8010e52:	d00b      	beq.n	8010e6c <tcp_slowtmr+0x54c>
 8010e54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010e56:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8010e5a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010e5c:	6912      	ldr	r2, [r2, #16]
 8010e5e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8010e60:	4610      	mov	r0, r2
 8010e62:	4798      	blx	r3
 8010e64:	4603      	mov	r3, r0
 8010e66:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8010e6a:	e002      	b.n	8010e72 <tcp_slowtmr+0x552>
 8010e6c:	2300      	movs	r3, #0
 8010e6e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (tcp_active_pcbs_changed) {
 8010e72:	4b14      	ldr	r3, [pc, #80]	; (8010ec4 <tcp_slowtmr+0x5a4>)
 8010e74:	781b      	ldrb	r3, [r3, #0]
 8010e76:	2b00      	cmp	r3, #0
 8010e78:	d000      	beq.n	8010e7c <tcp_slowtmr+0x55c>
          goto tcp_slowtmr_start;
 8010e7a:	e562      	b.n	8010942 <tcp_slowtmr+0x22>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 8010e7c:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 8010e80:	2b00      	cmp	r3, #0
 8010e82:	d102      	bne.n	8010e8a <tcp_slowtmr+0x56a>
          tcp_output(prev);
 8010e84:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010e86:	f003 fb81 	bl	801458c <tcp_output>
  while (pcb != NULL) {
 8010e8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010e8c:	2b00      	cmp	r3, #0
 8010e8e:	f47f ad5e 	bne.w	801094e <tcp_slowtmr+0x2e>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 8010e92:	2300      	movs	r3, #0
 8010e94:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_tw_pcbs;
 8010e96:	4b0c      	ldr	r3, [pc, #48]	; (8010ec8 <tcp_slowtmr+0x5a8>)
 8010e98:	681b      	ldr	r3, [r3, #0]
 8010e9a:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 8010e9c:	e069      	b.n	8010f72 <tcp_slowtmr+0x652>
 8010e9e:	bf00      	nop
 8010ea0:	20007fd8 	.word	0x20007fd8
 8010ea4:	000a4cb8 	.word	0x000a4cb8
 8010ea8:	10624dd3 	.word	0x10624dd3
 8010eac:	000124f8 	.word	0x000124f8
 8010eb0:	20007fe4 	.word	0x20007fe4
 8010eb4:	0801b900 	.word	0x0801b900
 8010eb8:	0801bd38 	.word	0x0801bd38
 8010ebc:	0801b944 	.word	0x0801b944
 8010ec0:	0801bd64 	.word	0x0801bd64
 8010ec4:	20007fec 	.word	0x20007fec
 8010ec8:	20007fe8 	.word	0x20007fe8
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8010ecc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010ece:	7d1b      	ldrb	r3, [r3, #20]
 8010ed0:	2b0a      	cmp	r3, #10
 8010ed2:	d006      	beq.n	8010ee2 <tcp_slowtmr+0x5c2>
 8010ed4:	4b2b      	ldr	r3, [pc, #172]	; (8010f84 <tcp_slowtmr+0x664>)
 8010ed6:	f240 52a1 	movw	r2, #1441	; 0x5a1
 8010eda:	492b      	ldr	r1, [pc, #172]	; (8010f88 <tcp_slowtmr+0x668>)
 8010edc:	482b      	ldr	r0, [pc, #172]	; (8010f8c <tcp_slowtmr+0x66c>)
 8010ede:	f007 fda1 	bl	8018a24 <iprintf>
    pcb_remove = 0;
 8010ee2:	2300      	movs	r3, #0
 8010ee4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8010ee8:	4b29      	ldr	r3, [pc, #164]	; (8010f90 <tcp_slowtmr+0x670>)
 8010eea:	681a      	ldr	r2, [r3, #0]
 8010eec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010eee:	6a1b      	ldr	r3, [r3, #32]
 8010ef0:	1ad3      	subs	r3, r2, r3
 8010ef2:	2bf0      	cmp	r3, #240	; 0xf0
 8010ef4:	d904      	bls.n	8010f00 <tcp_slowtmr+0x5e0>
      ++pcb_remove;
 8010ef6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8010efa:	3301      	adds	r3, #1
 8010efc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 8010f00:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8010f04:	2b00      	cmp	r3, #0
 8010f06:	d02f      	beq.n	8010f68 <tcp_slowtmr+0x648>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 8010f08:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8010f0a:	f000 fb2b 	bl	8011564 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 8010f0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010f10:	2b00      	cmp	r3, #0
 8010f12:	d010      	beq.n	8010f36 <tcp_slowtmr+0x616>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 8010f14:	4b1f      	ldr	r3, [pc, #124]	; (8010f94 <tcp_slowtmr+0x674>)
 8010f16:	681b      	ldr	r3, [r3, #0]
 8010f18:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010f1a:	429a      	cmp	r2, r3
 8010f1c:	d106      	bne.n	8010f2c <tcp_slowtmr+0x60c>
 8010f1e:	4b19      	ldr	r3, [pc, #100]	; (8010f84 <tcp_slowtmr+0x664>)
 8010f20:	f240 52af 	movw	r2, #1455	; 0x5af
 8010f24:	491c      	ldr	r1, [pc, #112]	; (8010f98 <tcp_slowtmr+0x678>)
 8010f26:	4819      	ldr	r0, [pc, #100]	; (8010f8c <tcp_slowtmr+0x66c>)
 8010f28:	f007 fd7c 	bl	8018a24 <iprintf>
        prev->next = pcb->next;
 8010f2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010f2e:	68da      	ldr	r2, [r3, #12]
 8010f30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010f32:	60da      	str	r2, [r3, #12]
 8010f34:	e00f      	b.n	8010f56 <tcp_slowtmr+0x636>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 8010f36:	4b17      	ldr	r3, [pc, #92]	; (8010f94 <tcp_slowtmr+0x674>)
 8010f38:	681b      	ldr	r3, [r3, #0]
 8010f3a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010f3c:	429a      	cmp	r2, r3
 8010f3e:	d006      	beq.n	8010f4e <tcp_slowtmr+0x62e>
 8010f40:	4b10      	ldr	r3, [pc, #64]	; (8010f84 <tcp_slowtmr+0x664>)
 8010f42:	f240 52b3 	movw	r2, #1459	; 0x5b3
 8010f46:	4915      	ldr	r1, [pc, #84]	; (8010f9c <tcp_slowtmr+0x67c>)
 8010f48:	4810      	ldr	r0, [pc, #64]	; (8010f8c <tcp_slowtmr+0x66c>)
 8010f4a:	f007 fd6b 	bl	8018a24 <iprintf>
        tcp_tw_pcbs = pcb->next;
 8010f4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010f50:	68db      	ldr	r3, [r3, #12]
 8010f52:	4a10      	ldr	r2, [pc, #64]	; (8010f94 <tcp_slowtmr+0x674>)
 8010f54:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 8010f56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010f58:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 8010f5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010f5c:	68db      	ldr	r3, [r3, #12]
 8010f5e:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 8010f60:	69f8      	ldr	r0, [r7, #28]
 8010f62:	f7ff f93f 	bl	80101e4 <tcp_free>
 8010f66:	e004      	b.n	8010f72 <tcp_slowtmr+0x652>
    } else {
      prev = pcb;
 8010f68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010f6a:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 8010f6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010f6e:	68db      	ldr	r3, [r3, #12]
 8010f70:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 8010f72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010f74:	2b00      	cmp	r3, #0
 8010f76:	d1a9      	bne.n	8010ecc <tcp_slowtmr+0x5ac>
    }
  }
}
 8010f78:	bf00      	nop
 8010f7a:	bf00      	nop
 8010f7c:	3730      	adds	r7, #48	; 0x30
 8010f7e:	46bd      	mov	sp, r7
 8010f80:	bdb0      	pop	{r4, r5, r7, pc}
 8010f82:	bf00      	nop
 8010f84:	0801b900 	.word	0x0801b900
 8010f88:	0801bd90 	.word	0x0801bd90
 8010f8c:	0801b944 	.word	0x0801b944
 8010f90:	20007fd8 	.word	0x20007fd8
 8010f94:	20007fe8 	.word	0x20007fe8
 8010f98:	0801bdc0 	.word	0x0801bdc0
 8010f9c:	0801bde8 	.word	0x0801bde8

08010fa0 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 8010fa0:	b580      	push	{r7, lr}
 8010fa2:	b082      	sub	sp, #8
 8010fa4:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 8010fa6:	4b2d      	ldr	r3, [pc, #180]	; (801105c <tcp_fasttmr+0xbc>)
 8010fa8:	781b      	ldrb	r3, [r3, #0]
 8010faa:	3301      	adds	r3, #1
 8010fac:	b2da      	uxtb	r2, r3
 8010fae:	4b2b      	ldr	r3, [pc, #172]	; (801105c <tcp_fasttmr+0xbc>)
 8010fb0:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 8010fb2:	4b2b      	ldr	r3, [pc, #172]	; (8011060 <tcp_fasttmr+0xc0>)
 8010fb4:	681b      	ldr	r3, [r3, #0]
 8010fb6:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8010fb8:	e048      	b.n	801104c <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 8010fba:	687b      	ldr	r3, [r7, #4]
 8010fbc:	7f9a      	ldrb	r2, [r3, #30]
 8010fbe:	4b27      	ldr	r3, [pc, #156]	; (801105c <tcp_fasttmr+0xbc>)
 8010fc0:	781b      	ldrb	r3, [r3, #0]
 8010fc2:	429a      	cmp	r2, r3
 8010fc4:	d03f      	beq.n	8011046 <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 8010fc6:	4b25      	ldr	r3, [pc, #148]	; (801105c <tcp_fasttmr+0xbc>)
 8010fc8:	781a      	ldrb	r2, [r3, #0]
 8010fca:	687b      	ldr	r3, [r7, #4]
 8010fcc:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 8010fce:	687b      	ldr	r3, [r7, #4]
 8010fd0:	8b5b      	ldrh	r3, [r3, #26]
 8010fd2:	f003 0301 	and.w	r3, r3, #1
 8010fd6:	2b00      	cmp	r3, #0
 8010fd8:	d010      	beq.n	8010ffc <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 8010fda:	687b      	ldr	r3, [r7, #4]
 8010fdc:	8b5b      	ldrh	r3, [r3, #26]
 8010fde:	f043 0302 	orr.w	r3, r3, #2
 8010fe2:	b29a      	uxth	r2, r3
 8010fe4:	687b      	ldr	r3, [r7, #4]
 8010fe6:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 8010fe8:	6878      	ldr	r0, [r7, #4]
 8010fea:	f003 facf 	bl	801458c <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8010fee:	687b      	ldr	r3, [r7, #4]
 8010ff0:	8b5b      	ldrh	r3, [r3, #26]
 8010ff2:	f023 0303 	bic.w	r3, r3, #3
 8010ff6:	b29a      	uxth	r2, r3
 8010ff8:	687b      	ldr	r3, [r7, #4]
 8010ffa:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 8010ffc:	687b      	ldr	r3, [r7, #4]
 8010ffe:	8b5b      	ldrh	r3, [r3, #26]
 8011000:	f003 0308 	and.w	r3, r3, #8
 8011004:	2b00      	cmp	r3, #0
 8011006:	d009      	beq.n	801101c <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 8011008:	687b      	ldr	r3, [r7, #4]
 801100a:	8b5b      	ldrh	r3, [r3, #26]
 801100c:	f023 0308 	bic.w	r3, r3, #8
 8011010:	b29a      	uxth	r2, r3
 8011012:	687b      	ldr	r3, [r7, #4]
 8011014:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 8011016:	6878      	ldr	r0, [r7, #4]
 8011018:	f7ff fa78 	bl	801050c <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 801101c:	687b      	ldr	r3, [r7, #4]
 801101e:	68db      	ldr	r3, [r3, #12]
 8011020:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 8011022:	687b      	ldr	r3, [r7, #4]
 8011024:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8011026:	2b00      	cmp	r3, #0
 8011028:	d00a      	beq.n	8011040 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 801102a:	4b0e      	ldr	r3, [pc, #56]	; (8011064 <tcp_fasttmr+0xc4>)
 801102c:	2200      	movs	r2, #0
 801102e:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 8011030:	6878      	ldr	r0, [r7, #4]
 8011032:	f000 f819 	bl	8011068 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 8011036:	4b0b      	ldr	r3, [pc, #44]	; (8011064 <tcp_fasttmr+0xc4>)
 8011038:	781b      	ldrb	r3, [r3, #0]
 801103a:	2b00      	cmp	r3, #0
 801103c:	d000      	beq.n	8011040 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 801103e:	e7b8      	b.n	8010fb2 <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 8011040:	683b      	ldr	r3, [r7, #0]
 8011042:	607b      	str	r3, [r7, #4]
 8011044:	e002      	b.n	801104c <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 8011046:	687b      	ldr	r3, [r7, #4]
 8011048:	68db      	ldr	r3, [r3, #12]
 801104a:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 801104c:	687b      	ldr	r3, [r7, #4]
 801104e:	2b00      	cmp	r3, #0
 8011050:	d1b3      	bne.n	8010fba <tcp_fasttmr+0x1a>
    }
  }
}
 8011052:	bf00      	nop
 8011054:	bf00      	nop
 8011056:	3708      	adds	r7, #8
 8011058:	46bd      	mov	sp, r7
 801105a:	bd80      	pop	{r7, pc}
 801105c:	20007fee 	.word	0x20007fee
 8011060:	20007fe4 	.word	0x20007fe4
 8011064:	20007fec 	.word	0x20007fec

08011068 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 8011068:	b590      	push	{r4, r7, lr}
 801106a:	b085      	sub	sp, #20
 801106c:	af00      	add	r7, sp, #0
 801106e:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 8011070:	687b      	ldr	r3, [r7, #4]
 8011072:	2b00      	cmp	r3, #0
 8011074:	d109      	bne.n	801108a <tcp_process_refused_data+0x22>
 8011076:	4b37      	ldr	r3, [pc, #220]	; (8011154 <tcp_process_refused_data+0xec>)
 8011078:	f240 6209 	movw	r2, #1545	; 0x609
 801107c:	4936      	ldr	r1, [pc, #216]	; (8011158 <tcp_process_refused_data+0xf0>)
 801107e:	4837      	ldr	r0, [pc, #220]	; (801115c <tcp_process_refused_data+0xf4>)
 8011080:	f007 fcd0 	bl	8018a24 <iprintf>
 8011084:	f06f 030f 	mvn.w	r3, #15
 8011088:	e060      	b.n	801114c <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 801108a:	687b      	ldr	r3, [r7, #4]
 801108c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801108e:	7b5b      	ldrb	r3, [r3, #13]
 8011090:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 8011092:	687b      	ldr	r3, [r7, #4]
 8011094:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8011096:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 8011098:	687b      	ldr	r3, [r7, #4]
 801109a:	2200      	movs	r2, #0
 801109c:	679a      	str	r2, [r3, #120]	; 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 801109e:	687b      	ldr	r3, [r7, #4]
 80110a0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80110a4:	2b00      	cmp	r3, #0
 80110a6:	d00b      	beq.n	80110c0 <tcp_process_refused_data+0x58>
 80110a8:	687b      	ldr	r3, [r7, #4]
 80110aa:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 80110ae:	687b      	ldr	r3, [r7, #4]
 80110b0:	6918      	ldr	r0, [r3, #16]
 80110b2:	2300      	movs	r3, #0
 80110b4:	68ba      	ldr	r2, [r7, #8]
 80110b6:	6879      	ldr	r1, [r7, #4]
 80110b8:	47a0      	blx	r4
 80110ba:	4603      	mov	r3, r0
 80110bc:	73fb      	strb	r3, [r7, #15]
 80110be:	e007      	b.n	80110d0 <tcp_process_refused_data+0x68>
 80110c0:	2300      	movs	r3, #0
 80110c2:	68ba      	ldr	r2, [r7, #8]
 80110c4:	6879      	ldr	r1, [r7, #4]
 80110c6:	2000      	movs	r0, #0
 80110c8:	f000 f8a4 	bl	8011214 <tcp_recv_null>
 80110cc:	4603      	mov	r3, r0
 80110ce:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 80110d0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80110d4:	2b00      	cmp	r3, #0
 80110d6:	d12a      	bne.n	801112e <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 80110d8:	7bbb      	ldrb	r3, [r7, #14]
 80110da:	f003 0320 	and.w	r3, r3, #32
 80110de:	2b00      	cmp	r3, #0
 80110e0:	d033      	beq.n	801114a <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 80110e2:	687b      	ldr	r3, [r7, #4]
 80110e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80110e6:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 80110ea:	d005      	beq.n	80110f8 <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 80110ec:	687b      	ldr	r3, [r7, #4]
 80110ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80110f0:	3301      	adds	r3, #1
 80110f2:	b29a      	uxth	r2, r3
 80110f4:	687b      	ldr	r3, [r7, #4]
 80110f6:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 80110f8:	687b      	ldr	r3, [r7, #4]
 80110fa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80110fe:	2b00      	cmp	r3, #0
 8011100:	d00b      	beq.n	801111a <tcp_process_refused_data+0xb2>
 8011102:	687b      	ldr	r3, [r7, #4]
 8011104:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8011108:	687b      	ldr	r3, [r7, #4]
 801110a:	6918      	ldr	r0, [r3, #16]
 801110c:	2300      	movs	r3, #0
 801110e:	2200      	movs	r2, #0
 8011110:	6879      	ldr	r1, [r7, #4]
 8011112:	47a0      	blx	r4
 8011114:	4603      	mov	r3, r0
 8011116:	73fb      	strb	r3, [r7, #15]
 8011118:	e001      	b.n	801111e <tcp_process_refused_data+0xb6>
 801111a:	2300      	movs	r3, #0
 801111c:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 801111e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011122:	f113 0f0d 	cmn.w	r3, #13
 8011126:	d110      	bne.n	801114a <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 8011128:	f06f 030c 	mvn.w	r3, #12
 801112c:	e00e      	b.n	801114c <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 801112e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011132:	f113 0f0d 	cmn.w	r3, #13
 8011136:	d102      	bne.n	801113e <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 8011138:	f06f 030c 	mvn.w	r3, #12
 801113c:	e006      	b.n	801114c <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 801113e:	687b      	ldr	r3, [r7, #4]
 8011140:	68ba      	ldr	r2, [r7, #8]
 8011142:	679a      	str	r2, [r3, #120]	; 0x78
      return ERR_INPROGRESS;
 8011144:	f06f 0304 	mvn.w	r3, #4
 8011148:	e000      	b.n	801114c <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 801114a:	2300      	movs	r3, #0
}
 801114c:	4618      	mov	r0, r3
 801114e:	3714      	adds	r7, #20
 8011150:	46bd      	mov	sp, r7
 8011152:	bd90      	pop	{r4, r7, pc}
 8011154:	0801b900 	.word	0x0801b900
 8011158:	0801be10 	.word	0x0801be10
 801115c:	0801b944 	.word	0x0801b944

08011160 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 8011160:	b580      	push	{r7, lr}
 8011162:	b084      	sub	sp, #16
 8011164:	af00      	add	r7, sp, #0
 8011166:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 8011168:	e007      	b.n	801117a <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 801116a:	687b      	ldr	r3, [r7, #4]
 801116c:	681b      	ldr	r3, [r3, #0]
 801116e:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 8011170:	6878      	ldr	r0, [r7, #4]
 8011172:	f000 f80a 	bl	801118a <tcp_seg_free>
    seg = next;
 8011176:	68fb      	ldr	r3, [r7, #12]
 8011178:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 801117a:	687b      	ldr	r3, [r7, #4]
 801117c:	2b00      	cmp	r3, #0
 801117e:	d1f4      	bne.n	801116a <tcp_segs_free+0xa>
  }
}
 8011180:	bf00      	nop
 8011182:	bf00      	nop
 8011184:	3710      	adds	r7, #16
 8011186:	46bd      	mov	sp, r7
 8011188:	bd80      	pop	{r7, pc}

0801118a <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 801118a:	b580      	push	{r7, lr}
 801118c:	b082      	sub	sp, #8
 801118e:	af00      	add	r7, sp, #0
 8011190:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 8011192:	687b      	ldr	r3, [r7, #4]
 8011194:	2b00      	cmp	r3, #0
 8011196:	d00c      	beq.n	80111b2 <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 8011198:	687b      	ldr	r3, [r7, #4]
 801119a:	685b      	ldr	r3, [r3, #4]
 801119c:	2b00      	cmp	r3, #0
 801119e:	d004      	beq.n	80111aa <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 80111a0:	687b      	ldr	r3, [r7, #4]
 80111a2:	685b      	ldr	r3, [r3, #4]
 80111a4:	4618      	mov	r0, r3
 80111a6:	f7fe fd7d 	bl	800fca4 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 80111aa:	6879      	ldr	r1, [r7, #4]
 80111ac:	2003      	movs	r0, #3
 80111ae:	f7fd ff23 	bl	800eff8 <memp_free>
  }
}
 80111b2:	bf00      	nop
 80111b4:	3708      	adds	r7, #8
 80111b6:	46bd      	mov	sp, r7
 80111b8:	bd80      	pop	{r7, pc}
	...

080111bc <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 80111bc:	b580      	push	{r7, lr}
 80111be:	b084      	sub	sp, #16
 80111c0:	af00      	add	r7, sp, #0
 80111c2:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 80111c4:	687b      	ldr	r3, [r7, #4]
 80111c6:	2b00      	cmp	r3, #0
 80111c8:	d106      	bne.n	80111d8 <tcp_seg_copy+0x1c>
 80111ca:	4b0f      	ldr	r3, [pc, #60]	; (8011208 <tcp_seg_copy+0x4c>)
 80111cc:	f240 6282 	movw	r2, #1666	; 0x682
 80111d0:	490e      	ldr	r1, [pc, #56]	; (801120c <tcp_seg_copy+0x50>)
 80111d2:	480f      	ldr	r0, [pc, #60]	; (8011210 <tcp_seg_copy+0x54>)
 80111d4:	f007 fc26 	bl	8018a24 <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 80111d8:	2003      	movs	r0, #3
 80111da:	f7fd fe9d 	bl	800ef18 <memp_malloc>
 80111de:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 80111e0:	68fb      	ldr	r3, [r7, #12]
 80111e2:	2b00      	cmp	r3, #0
 80111e4:	d101      	bne.n	80111ea <tcp_seg_copy+0x2e>
    return NULL;
 80111e6:	2300      	movs	r3, #0
 80111e8:	e00a      	b.n	8011200 <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 80111ea:	2210      	movs	r2, #16
 80111ec:	6879      	ldr	r1, [r7, #4]
 80111ee:	68f8      	ldr	r0, [r7, #12]
 80111f0:	f007 fde6 	bl	8018dc0 <memcpy>
  pbuf_ref(cseg->p);
 80111f4:	68fb      	ldr	r3, [r7, #12]
 80111f6:	685b      	ldr	r3, [r3, #4]
 80111f8:	4618      	mov	r0, r3
 80111fa:	f7fe fdf3 	bl	800fde4 <pbuf_ref>
  return cseg;
 80111fe:	68fb      	ldr	r3, [r7, #12]
}
 8011200:	4618      	mov	r0, r3
 8011202:	3710      	adds	r7, #16
 8011204:	46bd      	mov	sp, r7
 8011206:	bd80      	pop	{r7, pc}
 8011208:	0801b900 	.word	0x0801b900
 801120c:	0801be54 	.word	0x0801be54
 8011210:	0801b944 	.word	0x0801b944

08011214 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 8011214:	b580      	push	{r7, lr}
 8011216:	b084      	sub	sp, #16
 8011218:	af00      	add	r7, sp, #0
 801121a:	60f8      	str	r0, [r7, #12]
 801121c:	60b9      	str	r1, [r7, #8]
 801121e:	607a      	str	r2, [r7, #4]
 8011220:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 8011222:	68bb      	ldr	r3, [r7, #8]
 8011224:	2b00      	cmp	r3, #0
 8011226:	d109      	bne.n	801123c <tcp_recv_null+0x28>
 8011228:	4b12      	ldr	r3, [pc, #72]	; (8011274 <tcp_recv_null+0x60>)
 801122a:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 801122e:	4912      	ldr	r1, [pc, #72]	; (8011278 <tcp_recv_null+0x64>)
 8011230:	4812      	ldr	r0, [pc, #72]	; (801127c <tcp_recv_null+0x68>)
 8011232:	f007 fbf7 	bl	8018a24 <iprintf>
 8011236:	f06f 030f 	mvn.w	r3, #15
 801123a:	e016      	b.n	801126a <tcp_recv_null+0x56>

  if (p != NULL) {
 801123c:	687b      	ldr	r3, [r7, #4]
 801123e:	2b00      	cmp	r3, #0
 8011240:	d009      	beq.n	8011256 <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 8011242:	687b      	ldr	r3, [r7, #4]
 8011244:	891b      	ldrh	r3, [r3, #8]
 8011246:	4619      	mov	r1, r3
 8011248:	68b8      	ldr	r0, [r7, #8]
 801124a:	f7ff fb19 	bl	8010880 <tcp_recved>
    pbuf_free(p);
 801124e:	6878      	ldr	r0, [r7, #4]
 8011250:	f7fe fd28 	bl	800fca4 <pbuf_free>
 8011254:	e008      	b.n	8011268 <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 8011256:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801125a:	2b00      	cmp	r3, #0
 801125c:	d104      	bne.n	8011268 <tcp_recv_null+0x54>
    return tcp_close(pcb);
 801125e:	68b8      	ldr	r0, [r7, #8]
 8011260:	f7ff f9be 	bl	80105e0 <tcp_close>
 8011264:	4603      	mov	r3, r0
 8011266:	e000      	b.n	801126a <tcp_recv_null+0x56>
  }
  return ERR_OK;
 8011268:	2300      	movs	r3, #0
}
 801126a:	4618      	mov	r0, r3
 801126c:	3710      	adds	r7, #16
 801126e:	46bd      	mov	sp, r7
 8011270:	bd80      	pop	{r7, pc}
 8011272:	bf00      	nop
 8011274:	0801b900 	.word	0x0801b900
 8011278:	0801be70 	.word	0x0801be70
 801127c:	0801b944 	.word	0x0801b944

08011280 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 8011280:	b580      	push	{r7, lr}
 8011282:	b086      	sub	sp, #24
 8011284:	af00      	add	r7, sp, #0
 8011286:	4603      	mov	r3, r0
 8011288:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 801128a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801128e:	2b00      	cmp	r3, #0
 8011290:	db01      	blt.n	8011296 <tcp_kill_prio+0x16>
 8011292:	79fb      	ldrb	r3, [r7, #7]
 8011294:	e000      	b.n	8011298 <tcp_kill_prio+0x18>
 8011296:	237f      	movs	r3, #127	; 0x7f
 8011298:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 801129a:	7afb      	ldrb	r3, [r7, #11]
 801129c:	2b00      	cmp	r3, #0
 801129e:	d034      	beq.n	801130a <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 80112a0:	7afb      	ldrb	r3, [r7, #11]
 80112a2:	3b01      	subs	r3, #1
 80112a4:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 80112a6:	2300      	movs	r3, #0
 80112a8:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 80112aa:	2300      	movs	r3, #0
 80112ac:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80112ae:	4b19      	ldr	r3, [pc, #100]	; (8011314 <tcp_kill_prio+0x94>)
 80112b0:	681b      	ldr	r3, [r3, #0]
 80112b2:	617b      	str	r3, [r7, #20]
 80112b4:	e01f      	b.n	80112f6 <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 80112b6:	697b      	ldr	r3, [r7, #20]
 80112b8:	7d5b      	ldrb	r3, [r3, #21]
 80112ba:	7afa      	ldrb	r2, [r7, #11]
 80112bc:	429a      	cmp	r2, r3
 80112be:	d80c      	bhi.n	80112da <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 80112c0:	697b      	ldr	r3, [r7, #20]
 80112c2:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 80112c4:	7afa      	ldrb	r2, [r7, #11]
 80112c6:	429a      	cmp	r2, r3
 80112c8:	d112      	bne.n	80112f0 <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 80112ca:	4b13      	ldr	r3, [pc, #76]	; (8011318 <tcp_kill_prio+0x98>)
 80112cc:	681a      	ldr	r2, [r3, #0]
 80112ce:	697b      	ldr	r3, [r7, #20]
 80112d0:	6a1b      	ldr	r3, [r3, #32]
 80112d2:	1ad3      	subs	r3, r2, r3
 80112d4:	68fa      	ldr	r2, [r7, #12]
 80112d6:	429a      	cmp	r2, r3
 80112d8:	d80a      	bhi.n	80112f0 <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 80112da:	4b0f      	ldr	r3, [pc, #60]	; (8011318 <tcp_kill_prio+0x98>)
 80112dc:	681a      	ldr	r2, [r3, #0]
 80112de:	697b      	ldr	r3, [r7, #20]
 80112e0:	6a1b      	ldr	r3, [r3, #32]
 80112e2:	1ad3      	subs	r3, r2, r3
 80112e4:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 80112e6:	697b      	ldr	r3, [r7, #20]
 80112e8:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 80112ea:	697b      	ldr	r3, [r7, #20]
 80112ec:	7d5b      	ldrb	r3, [r3, #21]
 80112ee:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80112f0:	697b      	ldr	r3, [r7, #20]
 80112f2:	68db      	ldr	r3, [r3, #12]
 80112f4:	617b      	str	r3, [r7, #20]
 80112f6:	697b      	ldr	r3, [r7, #20]
 80112f8:	2b00      	cmp	r3, #0
 80112fa:	d1dc      	bne.n	80112b6 <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 80112fc:	693b      	ldr	r3, [r7, #16]
 80112fe:	2b00      	cmp	r3, #0
 8011300:	d004      	beq.n	801130c <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 8011302:	6938      	ldr	r0, [r7, #16]
 8011304:	f7ff fa56 	bl	80107b4 <tcp_abort>
 8011308:	e000      	b.n	801130c <tcp_kill_prio+0x8c>
    return;
 801130a:	bf00      	nop
  }
}
 801130c:	3718      	adds	r7, #24
 801130e:	46bd      	mov	sp, r7
 8011310:	bd80      	pop	{r7, pc}
 8011312:	bf00      	nop
 8011314:	20007fe4 	.word	0x20007fe4
 8011318:	20007fd8 	.word	0x20007fd8

0801131c <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 801131c:	b580      	push	{r7, lr}
 801131e:	b086      	sub	sp, #24
 8011320:	af00      	add	r7, sp, #0
 8011322:	4603      	mov	r3, r0
 8011324:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 8011326:	79fb      	ldrb	r3, [r7, #7]
 8011328:	2b08      	cmp	r3, #8
 801132a:	d009      	beq.n	8011340 <tcp_kill_state+0x24>
 801132c:	79fb      	ldrb	r3, [r7, #7]
 801132e:	2b09      	cmp	r3, #9
 8011330:	d006      	beq.n	8011340 <tcp_kill_state+0x24>
 8011332:	4b1a      	ldr	r3, [pc, #104]	; (801139c <tcp_kill_state+0x80>)
 8011334:	f240 62dd 	movw	r2, #1757	; 0x6dd
 8011338:	4919      	ldr	r1, [pc, #100]	; (80113a0 <tcp_kill_state+0x84>)
 801133a:	481a      	ldr	r0, [pc, #104]	; (80113a4 <tcp_kill_state+0x88>)
 801133c:	f007 fb72 	bl	8018a24 <iprintf>

  inactivity = 0;
 8011340:	2300      	movs	r3, #0
 8011342:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8011344:	2300      	movs	r3, #0
 8011346:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8011348:	4b17      	ldr	r3, [pc, #92]	; (80113a8 <tcp_kill_state+0x8c>)
 801134a:	681b      	ldr	r3, [r3, #0]
 801134c:	617b      	str	r3, [r7, #20]
 801134e:	e017      	b.n	8011380 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 8011350:	697b      	ldr	r3, [r7, #20]
 8011352:	7d1b      	ldrb	r3, [r3, #20]
 8011354:	79fa      	ldrb	r2, [r7, #7]
 8011356:	429a      	cmp	r2, r3
 8011358:	d10f      	bne.n	801137a <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 801135a:	4b14      	ldr	r3, [pc, #80]	; (80113ac <tcp_kill_state+0x90>)
 801135c:	681a      	ldr	r2, [r3, #0]
 801135e:	697b      	ldr	r3, [r7, #20]
 8011360:	6a1b      	ldr	r3, [r3, #32]
 8011362:	1ad3      	subs	r3, r2, r3
 8011364:	68fa      	ldr	r2, [r7, #12]
 8011366:	429a      	cmp	r2, r3
 8011368:	d807      	bhi.n	801137a <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 801136a:	4b10      	ldr	r3, [pc, #64]	; (80113ac <tcp_kill_state+0x90>)
 801136c:	681a      	ldr	r2, [r3, #0]
 801136e:	697b      	ldr	r3, [r7, #20]
 8011370:	6a1b      	ldr	r3, [r3, #32]
 8011372:	1ad3      	subs	r3, r2, r3
 8011374:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 8011376:	697b      	ldr	r3, [r7, #20]
 8011378:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 801137a:	697b      	ldr	r3, [r7, #20]
 801137c:	68db      	ldr	r3, [r3, #12]
 801137e:	617b      	str	r3, [r7, #20]
 8011380:	697b      	ldr	r3, [r7, #20]
 8011382:	2b00      	cmp	r3, #0
 8011384:	d1e4      	bne.n	8011350 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 8011386:	693b      	ldr	r3, [r7, #16]
 8011388:	2b00      	cmp	r3, #0
 801138a:	d003      	beq.n	8011394 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 801138c:	2100      	movs	r1, #0
 801138e:	6938      	ldr	r0, [r7, #16]
 8011390:	f7ff f952 	bl	8010638 <tcp_abandon>
  }
}
 8011394:	bf00      	nop
 8011396:	3718      	adds	r7, #24
 8011398:	46bd      	mov	sp, r7
 801139a:	bd80      	pop	{r7, pc}
 801139c:	0801b900 	.word	0x0801b900
 80113a0:	0801be8c 	.word	0x0801be8c
 80113a4:	0801b944 	.word	0x0801b944
 80113a8:	20007fe4 	.word	0x20007fe4
 80113ac:	20007fd8 	.word	0x20007fd8

080113b0 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 80113b0:	b580      	push	{r7, lr}
 80113b2:	b084      	sub	sp, #16
 80113b4:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 80113b6:	2300      	movs	r3, #0
 80113b8:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 80113ba:	2300      	movs	r3, #0
 80113bc:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 80113be:	4b12      	ldr	r3, [pc, #72]	; (8011408 <tcp_kill_timewait+0x58>)
 80113c0:	681b      	ldr	r3, [r3, #0]
 80113c2:	60fb      	str	r3, [r7, #12]
 80113c4:	e012      	b.n	80113ec <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 80113c6:	4b11      	ldr	r3, [pc, #68]	; (801140c <tcp_kill_timewait+0x5c>)
 80113c8:	681a      	ldr	r2, [r3, #0]
 80113ca:	68fb      	ldr	r3, [r7, #12]
 80113cc:	6a1b      	ldr	r3, [r3, #32]
 80113ce:	1ad3      	subs	r3, r2, r3
 80113d0:	687a      	ldr	r2, [r7, #4]
 80113d2:	429a      	cmp	r2, r3
 80113d4:	d807      	bhi.n	80113e6 <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 80113d6:	4b0d      	ldr	r3, [pc, #52]	; (801140c <tcp_kill_timewait+0x5c>)
 80113d8:	681a      	ldr	r2, [r3, #0]
 80113da:	68fb      	ldr	r3, [r7, #12]
 80113dc:	6a1b      	ldr	r3, [r3, #32]
 80113de:	1ad3      	subs	r3, r2, r3
 80113e0:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 80113e2:	68fb      	ldr	r3, [r7, #12]
 80113e4:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 80113e6:	68fb      	ldr	r3, [r7, #12]
 80113e8:	68db      	ldr	r3, [r3, #12]
 80113ea:	60fb      	str	r3, [r7, #12]
 80113ec:	68fb      	ldr	r3, [r7, #12]
 80113ee:	2b00      	cmp	r3, #0
 80113f0:	d1e9      	bne.n	80113c6 <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 80113f2:	68bb      	ldr	r3, [r7, #8]
 80113f4:	2b00      	cmp	r3, #0
 80113f6:	d002      	beq.n	80113fe <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 80113f8:	68b8      	ldr	r0, [r7, #8]
 80113fa:	f7ff f9db 	bl	80107b4 <tcp_abort>
  }
}
 80113fe:	bf00      	nop
 8011400:	3710      	adds	r7, #16
 8011402:	46bd      	mov	sp, r7
 8011404:	bd80      	pop	{r7, pc}
 8011406:	bf00      	nop
 8011408:	20007fe8 	.word	0x20007fe8
 801140c:	20007fd8 	.word	0x20007fd8

08011410 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 8011410:	b580      	push	{r7, lr}
 8011412:	b082      	sub	sp, #8
 8011414:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 8011416:	4b10      	ldr	r3, [pc, #64]	; (8011458 <tcp_handle_closepend+0x48>)
 8011418:	681b      	ldr	r3, [r3, #0]
 801141a:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 801141c:	e014      	b.n	8011448 <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 801141e:	687b      	ldr	r3, [r7, #4]
 8011420:	68db      	ldr	r3, [r3, #12]
 8011422:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 8011424:	687b      	ldr	r3, [r7, #4]
 8011426:	8b5b      	ldrh	r3, [r3, #26]
 8011428:	f003 0308 	and.w	r3, r3, #8
 801142c:	2b00      	cmp	r3, #0
 801142e:	d009      	beq.n	8011444 <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 8011430:	687b      	ldr	r3, [r7, #4]
 8011432:	8b5b      	ldrh	r3, [r3, #26]
 8011434:	f023 0308 	bic.w	r3, r3, #8
 8011438:	b29a      	uxth	r2, r3
 801143a:	687b      	ldr	r3, [r7, #4]
 801143c:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 801143e:	6878      	ldr	r0, [r7, #4]
 8011440:	f7ff f864 	bl	801050c <tcp_close_shutdown_fin>
    }
    pcb = next;
 8011444:	683b      	ldr	r3, [r7, #0]
 8011446:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 8011448:	687b      	ldr	r3, [r7, #4]
 801144a:	2b00      	cmp	r3, #0
 801144c:	d1e7      	bne.n	801141e <tcp_handle_closepend+0xe>
  }
}
 801144e:	bf00      	nop
 8011450:	bf00      	nop
 8011452:	3708      	adds	r7, #8
 8011454:	46bd      	mov	sp, r7
 8011456:	bd80      	pop	{r7, pc}
 8011458:	20007fe4 	.word	0x20007fe4

0801145c <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 801145c:	b580      	push	{r7, lr}
 801145e:	b084      	sub	sp, #16
 8011460:	af00      	add	r7, sp, #0
 8011462:	4603      	mov	r3, r0
 8011464:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8011466:	2001      	movs	r0, #1
 8011468:	f7fd fd56 	bl	800ef18 <memp_malloc>
 801146c:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 801146e:	68fb      	ldr	r3, [r7, #12]
 8011470:	2b00      	cmp	r3, #0
 8011472:	d126      	bne.n	80114c2 <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 8011474:	f7ff ffcc 	bl	8011410 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 8011478:	f7ff ff9a 	bl	80113b0 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 801147c:	2001      	movs	r0, #1
 801147e:	f7fd fd4b 	bl	800ef18 <memp_malloc>
 8011482:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 8011484:	68fb      	ldr	r3, [r7, #12]
 8011486:	2b00      	cmp	r3, #0
 8011488:	d11b      	bne.n	80114c2 <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 801148a:	2009      	movs	r0, #9
 801148c:	f7ff ff46 	bl	801131c <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8011490:	2001      	movs	r0, #1
 8011492:	f7fd fd41 	bl	800ef18 <memp_malloc>
 8011496:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 8011498:	68fb      	ldr	r3, [r7, #12]
 801149a:	2b00      	cmp	r3, #0
 801149c:	d111      	bne.n	80114c2 <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 801149e:	2008      	movs	r0, #8
 80114a0:	f7ff ff3c 	bl	801131c <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80114a4:	2001      	movs	r0, #1
 80114a6:	f7fd fd37 	bl	800ef18 <memp_malloc>
 80114aa:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 80114ac:	68fb      	ldr	r3, [r7, #12]
 80114ae:	2b00      	cmp	r3, #0
 80114b0:	d107      	bne.n	80114c2 <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 80114b2:	79fb      	ldrb	r3, [r7, #7]
 80114b4:	4618      	mov	r0, r3
 80114b6:	f7ff fee3 	bl	8011280 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80114ba:	2001      	movs	r0, #1
 80114bc:	f7fd fd2c 	bl	800ef18 <memp_malloc>
 80114c0:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 80114c2:	68fb      	ldr	r3, [r7, #12]
 80114c4:	2b00      	cmp	r3, #0
 80114c6:	d03f      	beq.n	8011548 <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 80114c8:	229c      	movs	r2, #156	; 0x9c
 80114ca:	2100      	movs	r1, #0
 80114cc:	68f8      	ldr	r0, [r7, #12]
 80114ce:	f007 fbff 	bl	8018cd0 <memset>
    pcb->prio = prio;
 80114d2:	68fb      	ldr	r3, [r7, #12]
 80114d4:	79fa      	ldrb	r2, [r7, #7]
 80114d6:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 80114d8:	68fb      	ldr	r3, [r7, #12]
 80114da:	f44f 6286 	mov.w	r2, #1072	; 0x430
 80114de:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 80114e2:	68fb      	ldr	r3, [r7, #12]
 80114e4:	f44f 6206 	mov.w	r2, #2144	; 0x860
 80114e8:	855a      	strh	r2, [r3, #42]	; 0x2a
 80114ea:	68fb      	ldr	r3, [r7, #12]
 80114ec:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 80114ee:	68fb      	ldr	r3, [r7, #12]
 80114f0:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 80114f2:	68fb      	ldr	r3, [r7, #12]
 80114f4:	22ff      	movs	r2, #255	; 0xff
 80114f6:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 80114f8:	68fb      	ldr	r3, [r7, #12]
 80114fa:	f44f 7206 	mov.w	r2, #536	; 0x218
 80114fe:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 8011500:	68fb      	ldr	r3, [r7, #12]
 8011502:	2206      	movs	r2, #6
 8011504:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 8011508:	68fb      	ldr	r3, [r7, #12]
 801150a:	2206      	movs	r2, #6
 801150c:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 801150e:	68fb      	ldr	r3, [r7, #12]
 8011510:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8011514:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 8011516:	68fb      	ldr	r3, [r7, #12]
 8011518:	2201      	movs	r2, #1
 801151a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 801151e:	4b0d      	ldr	r3, [pc, #52]	; (8011554 <tcp_alloc+0xf8>)
 8011520:	681a      	ldr	r2, [r3, #0]
 8011522:	68fb      	ldr	r3, [r7, #12]
 8011524:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 8011526:	4b0c      	ldr	r3, [pc, #48]	; (8011558 <tcp_alloc+0xfc>)
 8011528:	781a      	ldrb	r2, [r3, #0]
 801152a:	68fb      	ldr	r3, [r7, #12]
 801152c:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 801152e:	68fb      	ldr	r3, [r7, #12]
 8011530:	f44f 6286 	mov.w	r2, #1072	; 0x430
 8011534:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 8011538:	68fb      	ldr	r3, [r7, #12]
 801153a:	4a08      	ldr	r2, [pc, #32]	; (801155c <tcp_alloc+0x100>)
 801153c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 8011540:	68fb      	ldr	r3, [r7, #12]
 8011542:	4a07      	ldr	r2, [pc, #28]	; (8011560 <tcp_alloc+0x104>)
 8011544:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 8011548:	68fb      	ldr	r3, [r7, #12]
}
 801154a:	4618      	mov	r0, r3
 801154c:	3710      	adds	r7, #16
 801154e:	46bd      	mov	sp, r7
 8011550:	bd80      	pop	{r7, pc}
 8011552:	bf00      	nop
 8011554:	20007fd8 	.word	0x20007fd8
 8011558:	20007fee 	.word	0x20007fee
 801155c:	08011215 	.word	0x08011215
 8011560:	006ddd00 	.word	0x006ddd00

08011564 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 8011564:	b580      	push	{r7, lr}
 8011566:	b082      	sub	sp, #8
 8011568:	af00      	add	r7, sp, #0
 801156a:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 801156c:	687b      	ldr	r3, [r7, #4]
 801156e:	2b00      	cmp	r3, #0
 8011570:	d107      	bne.n	8011582 <tcp_pcb_purge+0x1e>
 8011572:	4b21      	ldr	r3, [pc, #132]	; (80115f8 <tcp_pcb_purge+0x94>)
 8011574:	f640 0251 	movw	r2, #2129	; 0x851
 8011578:	4920      	ldr	r1, [pc, #128]	; (80115fc <tcp_pcb_purge+0x98>)
 801157a:	4821      	ldr	r0, [pc, #132]	; (8011600 <tcp_pcb_purge+0x9c>)
 801157c:	f007 fa52 	bl	8018a24 <iprintf>
 8011580:	e037      	b.n	80115f2 <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 8011582:	687b      	ldr	r3, [r7, #4]
 8011584:	7d1b      	ldrb	r3, [r3, #20]
 8011586:	2b00      	cmp	r3, #0
 8011588:	d033      	beq.n	80115f2 <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 801158a:	687b      	ldr	r3, [r7, #4]
 801158c:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 801158e:	2b0a      	cmp	r3, #10
 8011590:	d02f      	beq.n	80115f2 <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 8011592:	687b      	ldr	r3, [r7, #4]
 8011594:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 8011596:	2b01      	cmp	r3, #1
 8011598:	d02b      	beq.n	80115f2 <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 801159a:	687b      	ldr	r3, [r7, #4]
 801159c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801159e:	2b00      	cmp	r3, #0
 80115a0:	d007      	beq.n	80115b2 <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 80115a2:	687b      	ldr	r3, [r7, #4]
 80115a4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80115a6:	4618      	mov	r0, r3
 80115a8:	f7fe fb7c 	bl	800fca4 <pbuf_free>
      pcb->refused_data = NULL;
 80115ac:	687b      	ldr	r3, [r7, #4]
 80115ae:	2200      	movs	r2, #0
 80115b0:	679a      	str	r2, [r3, #120]	; 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 80115b2:	687b      	ldr	r3, [r7, #4]
 80115b4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80115b6:	2b00      	cmp	r3, #0
 80115b8:	d002      	beq.n	80115c0 <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 80115ba:	6878      	ldr	r0, [r7, #4]
 80115bc:	f000 f986 	bl	80118cc <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 80115c0:	687b      	ldr	r3, [r7, #4]
 80115c2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80115c6:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 80115c8:	687b      	ldr	r3, [r7, #4]
 80115ca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80115cc:	4618      	mov	r0, r3
 80115ce:	f7ff fdc7 	bl	8011160 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 80115d2:	687b      	ldr	r3, [r7, #4]
 80115d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80115d6:	4618      	mov	r0, r3
 80115d8:	f7ff fdc2 	bl	8011160 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 80115dc:	687b      	ldr	r3, [r7, #4]
 80115de:	2200      	movs	r2, #0
 80115e0:	66da      	str	r2, [r3, #108]	; 0x6c
 80115e2:	687b      	ldr	r3, [r7, #4]
 80115e4:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80115e6:	687b      	ldr	r3, [r7, #4]
 80115e8:	671a      	str	r2, [r3, #112]	; 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 80115ea:	687b      	ldr	r3, [r7, #4]
 80115ec:	2200      	movs	r2, #0
 80115ee:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */
  }
}
 80115f2:	3708      	adds	r7, #8
 80115f4:	46bd      	mov	sp, r7
 80115f6:	bd80      	pop	{r7, pc}
 80115f8:	0801b900 	.word	0x0801b900
 80115fc:	0801bf4c 	.word	0x0801bf4c
 8011600:	0801b944 	.word	0x0801b944

08011604 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 8011604:	b580      	push	{r7, lr}
 8011606:	b084      	sub	sp, #16
 8011608:	af00      	add	r7, sp, #0
 801160a:	6078      	str	r0, [r7, #4]
 801160c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 801160e:	683b      	ldr	r3, [r7, #0]
 8011610:	2b00      	cmp	r3, #0
 8011612:	d106      	bne.n	8011622 <tcp_pcb_remove+0x1e>
 8011614:	4b3e      	ldr	r3, [pc, #248]	; (8011710 <tcp_pcb_remove+0x10c>)
 8011616:	f640 0283 	movw	r2, #2179	; 0x883
 801161a:	493e      	ldr	r1, [pc, #248]	; (8011714 <tcp_pcb_remove+0x110>)
 801161c:	483e      	ldr	r0, [pc, #248]	; (8011718 <tcp_pcb_remove+0x114>)
 801161e:	f007 fa01 	bl	8018a24 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 8011622:	687b      	ldr	r3, [r7, #4]
 8011624:	2b00      	cmp	r3, #0
 8011626:	d106      	bne.n	8011636 <tcp_pcb_remove+0x32>
 8011628:	4b39      	ldr	r3, [pc, #228]	; (8011710 <tcp_pcb_remove+0x10c>)
 801162a:	f640 0284 	movw	r2, #2180	; 0x884
 801162e:	493b      	ldr	r1, [pc, #236]	; (801171c <tcp_pcb_remove+0x118>)
 8011630:	4839      	ldr	r0, [pc, #228]	; (8011718 <tcp_pcb_remove+0x114>)
 8011632:	f007 f9f7 	bl	8018a24 <iprintf>

  TCP_RMV(pcblist, pcb);
 8011636:	687b      	ldr	r3, [r7, #4]
 8011638:	681b      	ldr	r3, [r3, #0]
 801163a:	683a      	ldr	r2, [r7, #0]
 801163c:	429a      	cmp	r2, r3
 801163e:	d105      	bne.n	801164c <tcp_pcb_remove+0x48>
 8011640:	687b      	ldr	r3, [r7, #4]
 8011642:	681b      	ldr	r3, [r3, #0]
 8011644:	68da      	ldr	r2, [r3, #12]
 8011646:	687b      	ldr	r3, [r7, #4]
 8011648:	601a      	str	r2, [r3, #0]
 801164a:	e013      	b.n	8011674 <tcp_pcb_remove+0x70>
 801164c:	687b      	ldr	r3, [r7, #4]
 801164e:	681b      	ldr	r3, [r3, #0]
 8011650:	60fb      	str	r3, [r7, #12]
 8011652:	e00c      	b.n	801166e <tcp_pcb_remove+0x6a>
 8011654:	68fb      	ldr	r3, [r7, #12]
 8011656:	68db      	ldr	r3, [r3, #12]
 8011658:	683a      	ldr	r2, [r7, #0]
 801165a:	429a      	cmp	r2, r3
 801165c:	d104      	bne.n	8011668 <tcp_pcb_remove+0x64>
 801165e:	683b      	ldr	r3, [r7, #0]
 8011660:	68da      	ldr	r2, [r3, #12]
 8011662:	68fb      	ldr	r3, [r7, #12]
 8011664:	60da      	str	r2, [r3, #12]
 8011666:	e005      	b.n	8011674 <tcp_pcb_remove+0x70>
 8011668:	68fb      	ldr	r3, [r7, #12]
 801166a:	68db      	ldr	r3, [r3, #12]
 801166c:	60fb      	str	r3, [r7, #12]
 801166e:	68fb      	ldr	r3, [r7, #12]
 8011670:	2b00      	cmp	r3, #0
 8011672:	d1ef      	bne.n	8011654 <tcp_pcb_remove+0x50>
 8011674:	683b      	ldr	r3, [r7, #0]
 8011676:	2200      	movs	r2, #0
 8011678:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 801167a:	6838      	ldr	r0, [r7, #0]
 801167c:	f7ff ff72 	bl	8011564 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 8011680:	683b      	ldr	r3, [r7, #0]
 8011682:	7d1b      	ldrb	r3, [r3, #20]
 8011684:	2b0a      	cmp	r3, #10
 8011686:	d013      	beq.n	80116b0 <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 8011688:	683b      	ldr	r3, [r7, #0]
 801168a:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 801168c:	2b01      	cmp	r3, #1
 801168e:	d00f      	beq.n	80116b0 <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 8011690:	683b      	ldr	r3, [r7, #0]
 8011692:	8b5b      	ldrh	r3, [r3, #26]
 8011694:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 8011698:	2b00      	cmp	r3, #0
 801169a:	d009      	beq.n	80116b0 <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 801169c:	683b      	ldr	r3, [r7, #0]
 801169e:	8b5b      	ldrh	r3, [r3, #26]
 80116a0:	f043 0302 	orr.w	r3, r3, #2
 80116a4:	b29a      	uxth	r2, r3
 80116a6:	683b      	ldr	r3, [r7, #0]
 80116a8:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 80116aa:	6838      	ldr	r0, [r7, #0]
 80116ac:	f002 ff6e 	bl	801458c <tcp_output>
  }

  if (pcb->state != LISTEN) {
 80116b0:	683b      	ldr	r3, [r7, #0]
 80116b2:	7d1b      	ldrb	r3, [r3, #20]
 80116b4:	2b01      	cmp	r3, #1
 80116b6:	d020      	beq.n	80116fa <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 80116b8:	683b      	ldr	r3, [r7, #0]
 80116ba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80116bc:	2b00      	cmp	r3, #0
 80116be:	d006      	beq.n	80116ce <tcp_pcb_remove+0xca>
 80116c0:	4b13      	ldr	r3, [pc, #76]	; (8011710 <tcp_pcb_remove+0x10c>)
 80116c2:	f640 0293 	movw	r2, #2195	; 0x893
 80116c6:	4916      	ldr	r1, [pc, #88]	; (8011720 <tcp_pcb_remove+0x11c>)
 80116c8:	4813      	ldr	r0, [pc, #76]	; (8011718 <tcp_pcb_remove+0x114>)
 80116ca:	f007 f9ab 	bl	8018a24 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 80116ce:	683b      	ldr	r3, [r7, #0]
 80116d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80116d2:	2b00      	cmp	r3, #0
 80116d4:	d006      	beq.n	80116e4 <tcp_pcb_remove+0xe0>
 80116d6:	4b0e      	ldr	r3, [pc, #56]	; (8011710 <tcp_pcb_remove+0x10c>)
 80116d8:	f640 0294 	movw	r2, #2196	; 0x894
 80116dc:	4911      	ldr	r1, [pc, #68]	; (8011724 <tcp_pcb_remove+0x120>)
 80116de:	480e      	ldr	r0, [pc, #56]	; (8011718 <tcp_pcb_remove+0x114>)
 80116e0:	f007 f9a0 	bl	8018a24 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 80116e4:	683b      	ldr	r3, [r7, #0]
 80116e6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80116e8:	2b00      	cmp	r3, #0
 80116ea:	d006      	beq.n	80116fa <tcp_pcb_remove+0xf6>
 80116ec:	4b08      	ldr	r3, [pc, #32]	; (8011710 <tcp_pcb_remove+0x10c>)
 80116ee:	f640 0296 	movw	r2, #2198	; 0x896
 80116f2:	490d      	ldr	r1, [pc, #52]	; (8011728 <tcp_pcb_remove+0x124>)
 80116f4:	4808      	ldr	r0, [pc, #32]	; (8011718 <tcp_pcb_remove+0x114>)
 80116f6:	f007 f995 	bl	8018a24 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 80116fa:	683b      	ldr	r3, [r7, #0]
 80116fc:	2200      	movs	r2, #0
 80116fe:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 8011700:	683b      	ldr	r3, [r7, #0]
 8011702:	2200      	movs	r2, #0
 8011704:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 8011706:	bf00      	nop
 8011708:	3710      	adds	r7, #16
 801170a:	46bd      	mov	sp, r7
 801170c:	bd80      	pop	{r7, pc}
 801170e:	bf00      	nop
 8011710:	0801b900 	.word	0x0801b900
 8011714:	0801bf68 	.word	0x0801bf68
 8011718:	0801b944 	.word	0x0801b944
 801171c:	0801bf84 	.word	0x0801bf84
 8011720:	0801bfa4 	.word	0x0801bfa4
 8011724:	0801bfbc 	.word	0x0801bfbc
 8011728:	0801bfd8 	.word	0x0801bfd8

0801172c <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 801172c:	b580      	push	{r7, lr}
 801172e:	b082      	sub	sp, #8
 8011730:	af00      	add	r7, sp, #0
 8011732:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 8011734:	687b      	ldr	r3, [r7, #4]
 8011736:	2b00      	cmp	r3, #0
 8011738:	d106      	bne.n	8011748 <tcp_next_iss+0x1c>
 801173a:	4b0a      	ldr	r3, [pc, #40]	; (8011764 <tcp_next_iss+0x38>)
 801173c:	f640 02af 	movw	r2, #2223	; 0x8af
 8011740:	4909      	ldr	r1, [pc, #36]	; (8011768 <tcp_next_iss+0x3c>)
 8011742:	480a      	ldr	r0, [pc, #40]	; (801176c <tcp_next_iss+0x40>)
 8011744:	f007 f96e 	bl	8018a24 <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 8011748:	4b09      	ldr	r3, [pc, #36]	; (8011770 <tcp_next_iss+0x44>)
 801174a:	681a      	ldr	r2, [r3, #0]
 801174c:	4b09      	ldr	r3, [pc, #36]	; (8011774 <tcp_next_iss+0x48>)
 801174e:	681b      	ldr	r3, [r3, #0]
 8011750:	4413      	add	r3, r2
 8011752:	4a07      	ldr	r2, [pc, #28]	; (8011770 <tcp_next_iss+0x44>)
 8011754:	6013      	str	r3, [r2, #0]
  return iss;
 8011756:	4b06      	ldr	r3, [pc, #24]	; (8011770 <tcp_next_iss+0x44>)
 8011758:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 801175a:	4618      	mov	r0, r3
 801175c:	3708      	adds	r7, #8
 801175e:	46bd      	mov	sp, r7
 8011760:	bd80      	pop	{r7, pc}
 8011762:	bf00      	nop
 8011764:	0801b900 	.word	0x0801b900
 8011768:	0801bff0 	.word	0x0801bff0
 801176c:	0801b944 	.word	0x0801b944
 8011770:	20000058 	.word	0x20000058
 8011774:	20007fd8 	.word	0x20007fd8

08011778 <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 8011778:	b580      	push	{r7, lr}
 801177a:	b086      	sub	sp, #24
 801177c:	af00      	add	r7, sp, #0
 801177e:	4603      	mov	r3, r0
 8011780:	60b9      	str	r1, [r7, #8]
 8011782:	607a      	str	r2, [r7, #4]
 8011784:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 8011786:	687b      	ldr	r3, [r7, #4]
 8011788:	2b00      	cmp	r3, #0
 801178a:	d106      	bne.n	801179a <tcp_eff_send_mss_netif+0x22>
 801178c:	4b14      	ldr	r3, [pc, #80]	; (80117e0 <tcp_eff_send_mss_netif+0x68>)
 801178e:	f640 02c5 	movw	r2, #2245	; 0x8c5
 8011792:	4914      	ldr	r1, [pc, #80]	; (80117e4 <tcp_eff_send_mss_netif+0x6c>)
 8011794:	4814      	ldr	r0, [pc, #80]	; (80117e8 <tcp_eff_send_mss_netif+0x70>)
 8011796:	f007 f945 	bl	8018a24 <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 801179a:	68bb      	ldr	r3, [r7, #8]
 801179c:	2b00      	cmp	r3, #0
 801179e:	d101      	bne.n	80117a4 <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 80117a0:	89fb      	ldrh	r3, [r7, #14]
 80117a2:	e019      	b.n	80117d8 <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 80117a4:	68bb      	ldr	r3, [r7, #8]
 80117a6:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80117a8:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 80117aa:	8afb      	ldrh	r3, [r7, #22]
 80117ac:	2b00      	cmp	r3, #0
 80117ae:	d012      	beq.n	80117d6 <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 80117b0:	2328      	movs	r3, #40	; 0x28
 80117b2:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 80117b4:	8afa      	ldrh	r2, [r7, #22]
 80117b6:	8abb      	ldrh	r3, [r7, #20]
 80117b8:	429a      	cmp	r2, r3
 80117ba:	d904      	bls.n	80117c6 <tcp_eff_send_mss_netif+0x4e>
 80117bc:	8afa      	ldrh	r2, [r7, #22]
 80117be:	8abb      	ldrh	r3, [r7, #20]
 80117c0:	1ad3      	subs	r3, r2, r3
 80117c2:	b29b      	uxth	r3, r3
 80117c4:	e000      	b.n	80117c8 <tcp_eff_send_mss_netif+0x50>
 80117c6:	2300      	movs	r3, #0
 80117c8:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 80117ca:	8a7a      	ldrh	r2, [r7, #18]
 80117cc:	89fb      	ldrh	r3, [r7, #14]
 80117ce:	4293      	cmp	r3, r2
 80117d0:	bf28      	it	cs
 80117d2:	4613      	movcs	r3, r2
 80117d4:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 80117d6:	89fb      	ldrh	r3, [r7, #14]
}
 80117d8:	4618      	mov	r0, r3
 80117da:	3718      	adds	r7, #24
 80117dc:	46bd      	mov	sp, r7
 80117de:	bd80      	pop	{r7, pc}
 80117e0:	0801b900 	.word	0x0801b900
 80117e4:	0801c00c 	.word	0x0801c00c
 80117e8:	0801b944 	.word	0x0801b944

080117ec <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 80117ec:	b580      	push	{r7, lr}
 80117ee:	b084      	sub	sp, #16
 80117f0:	af00      	add	r7, sp, #0
 80117f2:	6078      	str	r0, [r7, #4]
 80117f4:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 80117f6:	683b      	ldr	r3, [r7, #0]
 80117f8:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 80117fa:	687b      	ldr	r3, [r7, #4]
 80117fc:	2b00      	cmp	r3, #0
 80117fe:	d119      	bne.n	8011834 <tcp_netif_ip_addr_changed_pcblist+0x48>
 8011800:	4b10      	ldr	r3, [pc, #64]	; (8011844 <tcp_netif_ip_addr_changed_pcblist+0x58>)
 8011802:	f44f 6210 	mov.w	r2, #2304	; 0x900
 8011806:	4910      	ldr	r1, [pc, #64]	; (8011848 <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 8011808:	4810      	ldr	r0, [pc, #64]	; (801184c <tcp_netif_ip_addr_changed_pcblist+0x60>)
 801180a:	f007 f90b 	bl	8018a24 <iprintf>

  while (pcb != NULL) {
 801180e:	e011      	b.n	8011834 <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 8011810:	68fb      	ldr	r3, [r7, #12]
 8011812:	681a      	ldr	r2, [r3, #0]
 8011814:	687b      	ldr	r3, [r7, #4]
 8011816:	681b      	ldr	r3, [r3, #0]
 8011818:	429a      	cmp	r2, r3
 801181a:	d108      	bne.n	801182e <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 801181c:	68fb      	ldr	r3, [r7, #12]
 801181e:	68db      	ldr	r3, [r3, #12]
 8011820:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 8011822:	68f8      	ldr	r0, [r7, #12]
 8011824:	f7fe ffc6 	bl	80107b4 <tcp_abort>
      pcb = next;
 8011828:	68bb      	ldr	r3, [r7, #8]
 801182a:	60fb      	str	r3, [r7, #12]
 801182c:	e002      	b.n	8011834 <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 801182e:	68fb      	ldr	r3, [r7, #12]
 8011830:	68db      	ldr	r3, [r3, #12]
 8011832:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 8011834:	68fb      	ldr	r3, [r7, #12]
 8011836:	2b00      	cmp	r3, #0
 8011838:	d1ea      	bne.n	8011810 <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 801183a:	bf00      	nop
 801183c:	bf00      	nop
 801183e:	3710      	adds	r7, #16
 8011840:	46bd      	mov	sp, r7
 8011842:	bd80      	pop	{r7, pc}
 8011844:	0801b900 	.word	0x0801b900
 8011848:	0801c034 	.word	0x0801c034
 801184c:	0801b944 	.word	0x0801b944

08011850 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8011850:	b580      	push	{r7, lr}
 8011852:	b084      	sub	sp, #16
 8011854:	af00      	add	r7, sp, #0
 8011856:	6078      	str	r0, [r7, #4]
 8011858:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 801185a:	687b      	ldr	r3, [r7, #4]
 801185c:	2b00      	cmp	r3, #0
 801185e:	d02a      	beq.n	80118b6 <tcp_netif_ip_addr_changed+0x66>
 8011860:	687b      	ldr	r3, [r7, #4]
 8011862:	681b      	ldr	r3, [r3, #0]
 8011864:	2b00      	cmp	r3, #0
 8011866:	d026      	beq.n	80118b6 <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 8011868:	4b15      	ldr	r3, [pc, #84]	; (80118c0 <tcp_netif_ip_addr_changed+0x70>)
 801186a:	681b      	ldr	r3, [r3, #0]
 801186c:	4619      	mov	r1, r3
 801186e:	6878      	ldr	r0, [r7, #4]
 8011870:	f7ff ffbc 	bl	80117ec <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 8011874:	4b13      	ldr	r3, [pc, #76]	; (80118c4 <tcp_netif_ip_addr_changed+0x74>)
 8011876:	681b      	ldr	r3, [r3, #0]
 8011878:	4619      	mov	r1, r3
 801187a:	6878      	ldr	r0, [r7, #4]
 801187c:	f7ff ffb6 	bl	80117ec <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 8011880:	683b      	ldr	r3, [r7, #0]
 8011882:	2b00      	cmp	r3, #0
 8011884:	d017      	beq.n	80118b6 <tcp_netif_ip_addr_changed+0x66>
 8011886:	683b      	ldr	r3, [r7, #0]
 8011888:	681b      	ldr	r3, [r3, #0]
 801188a:	2b00      	cmp	r3, #0
 801188c:	d013      	beq.n	80118b6 <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 801188e:	4b0e      	ldr	r3, [pc, #56]	; (80118c8 <tcp_netif_ip_addr_changed+0x78>)
 8011890:	681b      	ldr	r3, [r3, #0]
 8011892:	60fb      	str	r3, [r7, #12]
 8011894:	e00c      	b.n	80118b0 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 8011896:	68fb      	ldr	r3, [r7, #12]
 8011898:	681a      	ldr	r2, [r3, #0]
 801189a:	687b      	ldr	r3, [r7, #4]
 801189c:	681b      	ldr	r3, [r3, #0]
 801189e:	429a      	cmp	r2, r3
 80118a0:	d103      	bne.n	80118aa <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 80118a2:	683b      	ldr	r3, [r7, #0]
 80118a4:	681a      	ldr	r2, [r3, #0]
 80118a6:	68fb      	ldr	r3, [r7, #12]
 80118a8:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 80118aa:	68fb      	ldr	r3, [r7, #12]
 80118ac:	68db      	ldr	r3, [r3, #12]
 80118ae:	60fb      	str	r3, [r7, #12]
 80118b0:	68fb      	ldr	r3, [r7, #12]
 80118b2:	2b00      	cmp	r3, #0
 80118b4:	d1ef      	bne.n	8011896 <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 80118b6:	bf00      	nop
 80118b8:	3710      	adds	r7, #16
 80118ba:	46bd      	mov	sp, r7
 80118bc:	bd80      	pop	{r7, pc}
 80118be:	bf00      	nop
 80118c0:	20007fe4 	.word	0x20007fe4
 80118c4:	20007fdc 	.word	0x20007fdc
 80118c8:	20007fe0 	.word	0x20007fe0

080118cc <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 80118cc:	b580      	push	{r7, lr}
 80118ce:	b082      	sub	sp, #8
 80118d0:	af00      	add	r7, sp, #0
 80118d2:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 80118d4:	687b      	ldr	r3, [r7, #4]
 80118d6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80118d8:	2b00      	cmp	r3, #0
 80118da:	d007      	beq.n	80118ec <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 80118dc:	687b      	ldr	r3, [r7, #4]
 80118de:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80118e0:	4618      	mov	r0, r3
 80118e2:	f7ff fc3d 	bl	8011160 <tcp_segs_free>
    pcb->ooseq = NULL;
 80118e6:	687b      	ldr	r3, [r7, #4]
 80118e8:	2200      	movs	r2, #0
 80118ea:	675a      	str	r2, [r3, #116]	; 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 80118ec:	bf00      	nop
 80118ee:	3708      	adds	r7, #8
 80118f0:	46bd      	mov	sp, r7
 80118f2:	bd80      	pop	{r7, pc}

080118f4 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 80118f4:	b590      	push	{r4, r7, lr}
 80118f6:	b08d      	sub	sp, #52	; 0x34
 80118f8:	af04      	add	r7, sp, #16
 80118fa:	6078      	str	r0, [r7, #4]
 80118fc:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 80118fe:	687b      	ldr	r3, [r7, #4]
 8011900:	2b00      	cmp	r3, #0
 8011902:	d105      	bne.n	8011910 <tcp_input+0x1c>
 8011904:	4b9b      	ldr	r3, [pc, #620]	; (8011b74 <tcp_input+0x280>)
 8011906:	2283      	movs	r2, #131	; 0x83
 8011908:	499b      	ldr	r1, [pc, #620]	; (8011b78 <tcp_input+0x284>)
 801190a:	489c      	ldr	r0, [pc, #624]	; (8011b7c <tcp_input+0x288>)
 801190c:	f007 f88a 	bl	8018a24 <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 8011910:	687b      	ldr	r3, [r7, #4]
 8011912:	685b      	ldr	r3, [r3, #4]
 8011914:	4a9a      	ldr	r2, [pc, #616]	; (8011b80 <tcp_input+0x28c>)
 8011916:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 8011918:	687b      	ldr	r3, [r7, #4]
 801191a:	895b      	ldrh	r3, [r3, #10]
 801191c:	2b13      	cmp	r3, #19
 801191e:	f240 83d1 	bls.w	80120c4 <tcp_input+0x7d0>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8011922:	4b98      	ldr	r3, [pc, #608]	; (8011b84 <tcp_input+0x290>)
 8011924:	695b      	ldr	r3, [r3, #20]
 8011926:	4a97      	ldr	r2, [pc, #604]	; (8011b84 <tcp_input+0x290>)
 8011928:	6812      	ldr	r2, [r2, #0]
 801192a:	4611      	mov	r1, r2
 801192c:	4618      	mov	r0, r3
 801192e:	f005 fbfb 	bl	8017128 <ip4_addr_isbroadcast_u32>
 8011932:	4603      	mov	r3, r0
 8011934:	2b00      	cmp	r3, #0
 8011936:	f040 83c7 	bne.w	80120c8 <tcp_input+0x7d4>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 801193a:	4b92      	ldr	r3, [pc, #584]	; (8011b84 <tcp_input+0x290>)
 801193c:	695b      	ldr	r3, [r3, #20]
 801193e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 8011942:	2be0      	cmp	r3, #224	; 0xe0
 8011944:	f000 83c0 	beq.w	80120c8 <tcp_input+0x7d4>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 8011948:	4b8d      	ldr	r3, [pc, #564]	; (8011b80 <tcp_input+0x28c>)
 801194a:	681b      	ldr	r3, [r3, #0]
 801194c:	899b      	ldrh	r3, [r3, #12]
 801194e:	b29b      	uxth	r3, r3
 8011950:	4618      	mov	r0, r3
 8011952:	f7fc fdb1 	bl	800e4b8 <lwip_htons>
 8011956:	4603      	mov	r3, r0
 8011958:	0b1b      	lsrs	r3, r3, #12
 801195a:	b29b      	uxth	r3, r3
 801195c:	b2db      	uxtb	r3, r3
 801195e:	009b      	lsls	r3, r3, #2
 8011960:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 8011962:	7cbb      	ldrb	r3, [r7, #18]
 8011964:	2b13      	cmp	r3, #19
 8011966:	f240 83b1 	bls.w	80120cc <tcp_input+0x7d8>
 801196a:	7cbb      	ldrb	r3, [r7, #18]
 801196c:	b29a      	uxth	r2, r3
 801196e:	687b      	ldr	r3, [r7, #4]
 8011970:	891b      	ldrh	r3, [r3, #8]
 8011972:	429a      	cmp	r2, r3
 8011974:	f200 83aa 	bhi.w	80120cc <tcp_input+0x7d8>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 8011978:	7cbb      	ldrb	r3, [r7, #18]
 801197a:	b29b      	uxth	r3, r3
 801197c:	3b14      	subs	r3, #20
 801197e:	b29a      	uxth	r2, r3
 8011980:	4b81      	ldr	r3, [pc, #516]	; (8011b88 <tcp_input+0x294>)
 8011982:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 8011984:	4b81      	ldr	r3, [pc, #516]	; (8011b8c <tcp_input+0x298>)
 8011986:	2200      	movs	r2, #0
 8011988:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 801198a:	687b      	ldr	r3, [r7, #4]
 801198c:	895a      	ldrh	r2, [r3, #10]
 801198e:	7cbb      	ldrb	r3, [r7, #18]
 8011990:	b29b      	uxth	r3, r3
 8011992:	429a      	cmp	r2, r3
 8011994:	d309      	bcc.n	80119aa <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 8011996:	4b7c      	ldr	r3, [pc, #496]	; (8011b88 <tcp_input+0x294>)
 8011998:	881a      	ldrh	r2, [r3, #0]
 801199a:	4b7d      	ldr	r3, [pc, #500]	; (8011b90 <tcp_input+0x29c>)
 801199c:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 801199e:	7cbb      	ldrb	r3, [r7, #18]
 80119a0:	4619      	mov	r1, r3
 80119a2:	6878      	ldr	r0, [r7, #4]
 80119a4:	f7fe f8f8 	bl	800fb98 <pbuf_remove_header>
 80119a8:	e04e      	b.n	8011a48 <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 80119aa:	687b      	ldr	r3, [r7, #4]
 80119ac:	681b      	ldr	r3, [r3, #0]
 80119ae:	2b00      	cmp	r3, #0
 80119b0:	d105      	bne.n	80119be <tcp_input+0xca>
 80119b2:	4b70      	ldr	r3, [pc, #448]	; (8011b74 <tcp_input+0x280>)
 80119b4:	22c2      	movs	r2, #194	; 0xc2
 80119b6:	4977      	ldr	r1, [pc, #476]	; (8011b94 <tcp_input+0x2a0>)
 80119b8:	4870      	ldr	r0, [pc, #448]	; (8011b7c <tcp_input+0x288>)
 80119ba:	f007 f833 	bl	8018a24 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 80119be:	2114      	movs	r1, #20
 80119c0:	6878      	ldr	r0, [r7, #4]
 80119c2:	f7fe f8e9 	bl	800fb98 <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 80119c6:	687b      	ldr	r3, [r7, #4]
 80119c8:	895a      	ldrh	r2, [r3, #10]
 80119ca:	4b71      	ldr	r3, [pc, #452]	; (8011b90 <tcp_input+0x29c>)
 80119cc:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 80119ce:	4b6e      	ldr	r3, [pc, #440]	; (8011b88 <tcp_input+0x294>)
 80119d0:	881a      	ldrh	r2, [r3, #0]
 80119d2:	4b6f      	ldr	r3, [pc, #444]	; (8011b90 <tcp_input+0x29c>)
 80119d4:	881b      	ldrh	r3, [r3, #0]
 80119d6:	1ad3      	subs	r3, r2, r3
 80119d8:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 80119da:	4b6d      	ldr	r3, [pc, #436]	; (8011b90 <tcp_input+0x29c>)
 80119dc:	881b      	ldrh	r3, [r3, #0]
 80119de:	4619      	mov	r1, r3
 80119e0:	6878      	ldr	r0, [r7, #4]
 80119e2:	f7fe f8d9 	bl	800fb98 <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 80119e6:	687b      	ldr	r3, [r7, #4]
 80119e8:	681b      	ldr	r3, [r3, #0]
 80119ea:	895b      	ldrh	r3, [r3, #10]
 80119ec:	8a3a      	ldrh	r2, [r7, #16]
 80119ee:	429a      	cmp	r2, r3
 80119f0:	f200 836e 	bhi.w	80120d0 <tcp_input+0x7dc>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 80119f4:	687b      	ldr	r3, [r7, #4]
 80119f6:	681b      	ldr	r3, [r3, #0]
 80119f8:	685b      	ldr	r3, [r3, #4]
 80119fa:	4a64      	ldr	r2, [pc, #400]	; (8011b8c <tcp_input+0x298>)
 80119fc:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 80119fe:	687b      	ldr	r3, [r7, #4]
 8011a00:	681b      	ldr	r3, [r3, #0]
 8011a02:	8a3a      	ldrh	r2, [r7, #16]
 8011a04:	4611      	mov	r1, r2
 8011a06:	4618      	mov	r0, r3
 8011a08:	f7fe f8c6 	bl	800fb98 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 8011a0c:	687b      	ldr	r3, [r7, #4]
 8011a0e:	891a      	ldrh	r2, [r3, #8]
 8011a10:	8a3b      	ldrh	r3, [r7, #16]
 8011a12:	1ad3      	subs	r3, r2, r3
 8011a14:	b29a      	uxth	r2, r3
 8011a16:	687b      	ldr	r3, [r7, #4]
 8011a18:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 8011a1a:	687b      	ldr	r3, [r7, #4]
 8011a1c:	895b      	ldrh	r3, [r3, #10]
 8011a1e:	2b00      	cmp	r3, #0
 8011a20:	d005      	beq.n	8011a2e <tcp_input+0x13a>
 8011a22:	4b54      	ldr	r3, [pc, #336]	; (8011b74 <tcp_input+0x280>)
 8011a24:	22df      	movs	r2, #223	; 0xdf
 8011a26:	495c      	ldr	r1, [pc, #368]	; (8011b98 <tcp_input+0x2a4>)
 8011a28:	4854      	ldr	r0, [pc, #336]	; (8011b7c <tcp_input+0x288>)
 8011a2a:	f006 fffb 	bl	8018a24 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 8011a2e:	687b      	ldr	r3, [r7, #4]
 8011a30:	891a      	ldrh	r2, [r3, #8]
 8011a32:	687b      	ldr	r3, [r7, #4]
 8011a34:	681b      	ldr	r3, [r3, #0]
 8011a36:	891b      	ldrh	r3, [r3, #8]
 8011a38:	429a      	cmp	r2, r3
 8011a3a:	d005      	beq.n	8011a48 <tcp_input+0x154>
 8011a3c:	4b4d      	ldr	r3, [pc, #308]	; (8011b74 <tcp_input+0x280>)
 8011a3e:	22e0      	movs	r2, #224	; 0xe0
 8011a40:	4956      	ldr	r1, [pc, #344]	; (8011b9c <tcp_input+0x2a8>)
 8011a42:	484e      	ldr	r0, [pc, #312]	; (8011b7c <tcp_input+0x288>)
 8011a44:	f006 ffee 	bl	8018a24 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 8011a48:	4b4d      	ldr	r3, [pc, #308]	; (8011b80 <tcp_input+0x28c>)
 8011a4a:	681b      	ldr	r3, [r3, #0]
 8011a4c:	881b      	ldrh	r3, [r3, #0]
 8011a4e:	b29b      	uxth	r3, r3
 8011a50:	4a4b      	ldr	r2, [pc, #300]	; (8011b80 <tcp_input+0x28c>)
 8011a52:	6814      	ldr	r4, [r2, #0]
 8011a54:	4618      	mov	r0, r3
 8011a56:	f7fc fd2f 	bl	800e4b8 <lwip_htons>
 8011a5a:	4603      	mov	r3, r0
 8011a5c:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 8011a5e:	4b48      	ldr	r3, [pc, #288]	; (8011b80 <tcp_input+0x28c>)
 8011a60:	681b      	ldr	r3, [r3, #0]
 8011a62:	885b      	ldrh	r3, [r3, #2]
 8011a64:	b29b      	uxth	r3, r3
 8011a66:	4a46      	ldr	r2, [pc, #280]	; (8011b80 <tcp_input+0x28c>)
 8011a68:	6814      	ldr	r4, [r2, #0]
 8011a6a:	4618      	mov	r0, r3
 8011a6c:	f7fc fd24 	bl	800e4b8 <lwip_htons>
 8011a70:	4603      	mov	r3, r0
 8011a72:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 8011a74:	4b42      	ldr	r3, [pc, #264]	; (8011b80 <tcp_input+0x28c>)
 8011a76:	681b      	ldr	r3, [r3, #0]
 8011a78:	685b      	ldr	r3, [r3, #4]
 8011a7a:	4a41      	ldr	r2, [pc, #260]	; (8011b80 <tcp_input+0x28c>)
 8011a7c:	6814      	ldr	r4, [r2, #0]
 8011a7e:	4618      	mov	r0, r3
 8011a80:	f7fc fd2f 	bl	800e4e2 <lwip_htonl>
 8011a84:	4603      	mov	r3, r0
 8011a86:	6063      	str	r3, [r4, #4]
 8011a88:	6863      	ldr	r3, [r4, #4]
 8011a8a:	4a45      	ldr	r2, [pc, #276]	; (8011ba0 <tcp_input+0x2ac>)
 8011a8c:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 8011a8e:	4b3c      	ldr	r3, [pc, #240]	; (8011b80 <tcp_input+0x28c>)
 8011a90:	681b      	ldr	r3, [r3, #0]
 8011a92:	689b      	ldr	r3, [r3, #8]
 8011a94:	4a3a      	ldr	r2, [pc, #232]	; (8011b80 <tcp_input+0x28c>)
 8011a96:	6814      	ldr	r4, [r2, #0]
 8011a98:	4618      	mov	r0, r3
 8011a9a:	f7fc fd22 	bl	800e4e2 <lwip_htonl>
 8011a9e:	4603      	mov	r3, r0
 8011aa0:	60a3      	str	r3, [r4, #8]
 8011aa2:	68a3      	ldr	r3, [r4, #8]
 8011aa4:	4a3f      	ldr	r2, [pc, #252]	; (8011ba4 <tcp_input+0x2b0>)
 8011aa6:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 8011aa8:	4b35      	ldr	r3, [pc, #212]	; (8011b80 <tcp_input+0x28c>)
 8011aaa:	681b      	ldr	r3, [r3, #0]
 8011aac:	89db      	ldrh	r3, [r3, #14]
 8011aae:	b29b      	uxth	r3, r3
 8011ab0:	4a33      	ldr	r2, [pc, #204]	; (8011b80 <tcp_input+0x28c>)
 8011ab2:	6814      	ldr	r4, [r2, #0]
 8011ab4:	4618      	mov	r0, r3
 8011ab6:	f7fc fcff 	bl	800e4b8 <lwip_htons>
 8011aba:	4603      	mov	r3, r0
 8011abc:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 8011abe:	4b30      	ldr	r3, [pc, #192]	; (8011b80 <tcp_input+0x28c>)
 8011ac0:	681b      	ldr	r3, [r3, #0]
 8011ac2:	899b      	ldrh	r3, [r3, #12]
 8011ac4:	b29b      	uxth	r3, r3
 8011ac6:	4618      	mov	r0, r3
 8011ac8:	f7fc fcf6 	bl	800e4b8 <lwip_htons>
 8011acc:	4603      	mov	r3, r0
 8011ace:	b2db      	uxtb	r3, r3
 8011ad0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8011ad4:	b2da      	uxtb	r2, r3
 8011ad6:	4b34      	ldr	r3, [pc, #208]	; (8011ba8 <tcp_input+0x2b4>)
 8011ad8:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 8011ada:	687b      	ldr	r3, [r7, #4]
 8011adc:	891a      	ldrh	r2, [r3, #8]
 8011ade:	4b33      	ldr	r3, [pc, #204]	; (8011bac <tcp_input+0x2b8>)
 8011ae0:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 8011ae2:	4b31      	ldr	r3, [pc, #196]	; (8011ba8 <tcp_input+0x2b4>)
 8011ae4:	781b      	ldrb	r3, [r3, #0]
 8011ae6:	f003 0303 	and.w	r3, r3, #3
 8011aea:	2b00      	cmp	r3, #0
 8011aec:	d00c      	beq.n	8011b08 <tcp_input+0x214>
    tcplen++;
 8011aee:	4b2f      	ldr	r3, [pc, #188]	; (8011bac <tcp_input+0x2b8>)
 8011af0:	881b      	ldrh	r3, [r3, #0]
 8011af2:	3301      	adds	r3, #1
 8011af4:	b29a      	uxth	r2, r3
 8011af6:	4b2d      	ldr	r3, [pc, #180]	; (8011bac <tcp_input+0x2b8>)
 8011af8:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 8011afa:	687b      	ldr	r3, [r7, #4]
 8011afc:	891a      	ldrh	r2, [r3, #8]
 8011afe:	4b2b      	ldr	r3, [pc, #172]	; (8011bac <tcp_input+0x2b8>)
 8011b00:	881b      	ldrh	r3, [r3, #0]
 8011b02:	429a      	cmp	r2, r3
 8011b04:	f200 82e6 	bhi.w	80120d4 <tcp_input+0x7e0>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 8011b08:	2300      	movs	r3, #0
 8011b0a:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8011b0c:	4b28      	ldr	r3, [pc, #160]	; (8011bb0 <tcp_input+0x2bc>)
 8011b0e:	681b      	ldr	r3, [r3, #0]
 8011b10:	61fb      	str	r3, [r7, #28]
 8011b12:	e09d      	b.n	8011c50 <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 8011b14:	69fb      	ldr	r3, [r7, #28]
 8011b16:	7d1b      	ldrb	r3, [r3, #20]
 8011b18:	2b00      	cmp	r3, #0
 8011b1a:	d105      	bne.n	8011b28 <tcp_input+0x234>
 8011b1c:	4b15      	ldr	r3, [pc, #84]	; (8011b74 <tcp_input+0x280>)
 8011b1e:	22fb      	movs	r2, #251	; 0xfb
 8011b20:	4924      	ldr	r1, [pc, #144]	; (8011bb4 <tcp_input+0x2c0>)
 8011b22:	4816      	ldr	r0, [pc, #88]	; (8011b7c <tcp_input+0x288>)
 8011b24:	f006 ff7e 	bl	8018a24 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 8011b28:	69fb      	ldr	r3, [r7, #28]
 8011b2a:	7d1b      	ldrb	r3, [r3, #20]
 8011b2c:	2b0a      	cmp	r3, #10
 8011b2e:	d105      	bne.n	8011b3c <tcp_input+0x248>
 8011b30:	4b10      	ldr	r3, [pc, #64]	; (8011b74 <tcp_input+0x280>)
 8011b32:	22fc      	movs	r2, #252	; 0xfc
 8011b34:	4920      	ldr	r1, [pc, #128]	; (8011bb8 <tcp_input+0x2c4>)
 8011b36:	4811      	ldr	r0, [pc, #68]	; (8011b7c <tcp_input+0x288>)
 8011b38:	f006 ff74 	bl	8018a24 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 8011b3c:	69fb      	ldr	r3, [r7, #28]
 8011b3e:	7d1b      	ldrb	r3, [r3, #20]
 8011b40:	2b01      	cmp	r3, #1
 8011b42:	d105      	bne.n	8011b50 <tcp_input+0x25c>
 8011b44:	4b0b      	ldr	r3, [pc, #44]	; (8011b74 <tcp_input+0x280>)
 8011b46:	22fd      	movs	r2, #253	; 0xfd
 8011b48:	491c      	ldr	r1, [pc, #112]	; (8011bbc <tcp_input+0x2c8>)
 8011b4a:	480c      	ldr	r0, [pc, #48]	; (8011b7c <tcp_input+0x288>)
 8011b4c:	f006 ff6a 	bl	8018a24 <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8011b50:	69fb      	ldr	r3, [r7, #28]
 8011b52:	7a1b      	ldrb	r3, [r3, #8]
 8011b54:	2b00      	cmp	r3, #0
 8011b56:	d033      	beq.n	8011bc0 <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8011b58:	69fb      	ldr	r3, [r7, #28]
 8011b5a:	7a1a      	ldrb	r2, [r3, #8]
 8011b5c:	4b09      	ldr	r3, [pc, #36]	; (8011b84 <tcp_input+0x290>)
 8011b5e:	685b      	ldr	r3, [r3, #4]
 8011b60:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8011b64:	3301      	adds	r3, #1
 8011b66:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8011b68:	429a      	cmp	r2, r3
 8011b6a:	d029      	beq.n	8011bc0 <tcp_input+0x2cc>
      prev = pcb;
 8011b6c:	69fb      	ldr	r3, [r7, #28]
 8011b6e:	61bb      	str	r3, [r7, #24]
      continue;
 8011b70:	e06b      	b.n	8011c4a <tcp_input+0x356>
 8011b72:	bf00      	nop
 8011b74:	0801c068 	.word	0x0801c068
 8011b78:	0801c09c 	.word	0x0801c09c
 8011b7c:	0801c0b4 	.word	0x0801c0b4
 8011b80:	20008000 	.word	0x20008000
 8011b84:	200050bc 	.word	0x200050bc
 8011b88:	20008004 	.word	0x20008004
 8011b8c:	20008008 	.word	0x20008008
 8011b90:	20008006 	.word	0x20008006
 8011b94:	0801c0dc 	.word	0x0801c0dc
 8011b98:	0801c0ec 	.word	0x0801c0ec
 8011b9c:	0801c0f8 	.word	0x0801c0f8
 8011ba0:	20008010 	.word	0x20008010
 8011ba4:	20008014 	.word	0x20008014
 8011ba8:	2000801c 	.word	0x2000801c
 8011bac:	2000801a 	.word	0x2000801a
 8011bb0:	20007fe4 	.word	0x20007fe4
 8011bb4:	0801c118 	.word	0x0801c118
 8011bb8:	0801c140 	.word	0x0801c140
 8011bbc:	0801c16c 	.word	0x0801c16c
    }

    if (pcb->remote_port == tcphdr->src &&
 8011bc0:	69fb      	ldr	r3, [r7, #28]
 8011bc2:	8b1a      	ldrh	r2, [r3, #24]
 8011bc4:	4b72      	ldr	r3, [pc, #456]	; (8011d90 <tcp_input+0x49c>)
 8011bc6:	681b      	ldr	r3, [r3, #0]
 8011bc8:	881b      	ldrh	r3, [r3, #0]
 8011bca:	b29b      	uxth	r3, r3
 8011bcc:	429a      	cmp	r2, r3
 8011bce:	d13a      	bne.n	8011c46 <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 8011bd0:	69fb      	ldr	r3, [r7, #28]
 8011bd2:	8ada      	ldrh	r2, [r3, #22]
 8011bd4:	4b6e      	ldr	r3, [pc, #440]	; (8011d90 <tcp_input+0x49c>)
 8011bd6:	681b      	ldr	r3, [r3, #0]
 8011bd8:	885b      	ldrh	r3, [r3, #2]
 8011bda:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 8011bdc:	429a      	cmp	r2, r3
 8011bde:	d132      	bne.n	8011c46 <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8011be0:	69fb      	ldr	r3, [r7, #28]
 8011be2:	685a      	ldr	r2, [r3, #4]
 8011be4:	4b6b      	ldr	r3, [pc, #428]	; (8011d94 <tcp_input+0x4a0>)
 8011be6:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 8011be8:	429a      	cmp	r2, r3
 8011bea:	d12c      	bne.n	8011c46 <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8011bec:	69fb      	ldr	r3, [r7, #28]
 8011bee:	681a      	ldr	r2, [r3, #0]
 8011bf0:	4b68      	ldr	r3, [pc, #416]	; (8011d94 <tcp_input+0x4a0>)
 8011bf2:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8011bf4:	429a      	cmp	r2, r3
 8011bf6:	d126      	bne.n	8011c46 <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 8011bf8:	69fb      	ldr	r3, [r7, #28]
 8011bfa:	68db      	ldr	r3, [r3, #12]
 8011bfc:	69fa      	ldr	r2, [r7, #28]
 8011bfe:	429a      	cmp	r2, r3
 8011c00:	d106      	bne.n	8011c10 <tcp_input+0x31c>
 8011c02:	4b65      	ldr	r3, [pc, #404]	; (8011d98 <tcp_input+0x4a4>)
 8011c04:	f240 120d 	movw	r2, #269	; 0x10d
 8011c08:	4964      	ldr	r1, [pc, #400]	; (8011d9c <tcp_input+0x4a8>)
 8011c0a:	4865      	ldr	r0, [pc, #404]	; (8011da0 <tcp_input+0x4ac>)
 8011c0c:	f006 ff0a 	bl	8018a24 <iprintf>
      if (prev != NULL) {
 8011c10:	69bb      	ldr	r3, [r7, #24]
 8011c12:	2b00      	cmp	r3, #0
 8011c14:	d00a      	beq.n	8011c2c <tcp_input+0x338>
        prev->next = pcb->next;
 8011c16:	69fb      	ldr	r3, [r7, #28]
 8011c18:	68da      	ldr	r2, [r3, #12]
 8011c1a:	69bb      	ldr	r3, [r7, #24]
 8011c1c:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 8011c1e:	4b61      	ldr	r3, [pc, #388]	; (8011da4 <tcp_input+0x4b0>)
 8011c20:	681a      	ldr	r2, [r3, #0]
 8011c22:	69fb      	ldr	r3, [r7, #28]
 8011c24:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 8011c26:	4a5f      	ldr	r2, [pc, #380]	; (8011da4 <tcp_input+0x4b0>)
 8011c28:	69fb      	ldr	r3, [r7, #28]
 8011c2a:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 8011c2c:	69fb      	ldr	r3, [r7, #28]
 8011c2e:	68db      	ldr	r3, [r3, #12]
 8011c30:	69fa      	ldr	r2, [r7, #28]
 8011c32:	429a      	cmp	r2, r3
 8011c34:	d111      	bne.n	8011c5a <tcp_input+0x366>
 8011c36:	4b58      	ldr	r3, [pc, #352]	; (8011d98 <tcp_input+0x4a4>)
 8011c38:	f240 1215 	movw	r2, #277	; 0x115
 8011c3c:	495a      	ldr	r1, [pc, #360]	; (8011da8 <tcp_input+0x4b4>)
 8011c3e:	4858      	ldr	r0, [pc, #352]	; (8011da0 <tcp_input+0x4ac>)
 8011c40:	f006 fef0 	bl	8018a24 <iprintf>
      break;
 8011c44:	e009      	b.n	8011c5a <tcp_input+0x366>
    }
    prev = pcb;
 8011c46:	69fb      	ldr	r3, [r7, #28]
 8011c48:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8011c4a:	69fb      	ldr	r3, [r7, #28]
 8011c4c:	68db      	ldr	r3, [r3, #12]
 8011c4e:	61fb      	str	r3, [r7, #28]
 8011c50:	69fb      	ldr	r3, [r7, #28]
 8011c52:	2b00      	cmp	r3, #0
 8011c54:	f47f af5e 	bne.w	8011b14 <tcp_input+0x220>
 8011c58:	e000      	b.n	8011c5c <tcp_input+0x368>
      break;
 8011c5a:	bf00      	nop
  }

  if (pcb == NULL) {
 8011c5c:	69fb      	ldr	r3, [r7, #28]
 8011c5e:	2b00      	cmp	r3, #0
 8011c60:	f040 80aa 	bne.w	8011db8 <tcp_input+0x4c4>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8011c64:	4b51      	ldr	r3, [pc, #324]	; (8011dac <tcp_input+0x4b8>)
 8011c66:	681b      	ldr	r3, [r3, #0]
 8011c68:	61fb      	str	r3, [r7, #28]
 8011c6a:	e03f      	b.n	8011cec <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8011c6c:	69fb      	ldr	r3, [r7, #28]
 8011c6e:	7d1b      	ldrb	r3, [r3, #20]
 8011c70:	2b0a      	cmp	r3, #10
 8011c72:	d006      	beq.n	8011c82 <tcp_input+0x38e>
 8011c74:	4b48      	ldr	r3, [pc, #288]	; (8011d98 <tcp_input+0x4a4>)
 8011c76:	f240 121f 	movw	r2, #287	; 0x11f
 8011c7a:	494d      	ldr	r1, [pc, #308]	; (8011db0 <tcp_input+0x4bc>)
 8011c7c:	4848      	ldr	r0, [pc, #288]	; (8011da0 <tcp_input+0x4ac>)
 8011c7e:	f006 fed1 	bl	8018a24 <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8011c82:	69fb      	ldr	r3, [r7, #28]
 8011c84:	7a1b      	ldrb	r3, [r3, #8]
 8011c86:	2b00      	cmp	r3, #0
 8011c88:	d009      	beq.n	8011c9e <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8011c8a:	69fb      	ldr	r3, [r7, #28]
 8011c8c:	7a1a      	ldrb	r2, [r3, #8]
 8011c8e:	4b41      	ldr	r3, [pc, #260]	; (8011d94 <tcp_input+0x4a0>)
 8011c90:	685b      	ldr	r3, [r3, #4]
 8011c92:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8011c96:	3301      	adds	r3, #1
 8011c98:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8011c9a:	429a      	cmp	r2, r3
 8011c9c:	d122      	bne.n	8011ce4 <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 8011c9e:	69fb      	ldr	r3, [r7, #28]
 8011ca0:	8b1a      	ldrh	r2, [r3, #24]
 8011ca2:	4b3b      	ldr	r3, [pc, #236]	; (8011d90 <tcp_input+0x49c>)
 8011ca4:	681b      	ldr	r3, [r3, #0]
 8011ca6:	881b      	ldrh	r3, [r3, #0]
 8011ca8:	b29b      	uxth	r3, r3
 8011caa:	429a      	cmp	r2, r3
 8011cac:	d11b      	bne.n	8011ce6 <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 8011cae:	69fb      	ldr	r3, [r7, #28]
 8011cb0:	8ada      	ldrh	r2, [r3, #22]
 8011cb2:	4b37      	ldr	r3, [pc, #220]	; (8011d90 <tcp_input+0x49c>)
 8011cb4:	681b      	ldr	r3, [r3, #0]
 8011cb6:	885b      	ldrh	r3, [r3, #2]
 8011cb8:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 8011cba:	429a      	cmp	r2, r3
 8011cbc:	d113      	bne.n	8011ce6 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8011cbe:	69fb      	ldr	r3, [r7, #28]
 8011cc0:	685a      	ldr	r2, [r3, #4]
 8011cc2:	4b34      	ldr	r3, [pc, #208]	; (8011d94 <tcp_input+0x4a0>)
 8011cc4:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 8011cc6:	429a      	cmp	r2, r3
 8011cc8:	d10d      	bne.n	8011ce6 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8011cca:	69fb      	ldr	r3, [r7, #28]
 8011ccc:	681a      	ldr	r2, [r3, #0]
 8011cce:	4b31      	ldr	r3, [pc, #196]	; (8011d94 <tcp_input+0x4a0>)
 8011cd0:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8011cd2:	429a      	cmp	r2, r3
 8011cd4:	d107      	bne.n	8011ce6 <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 8011cd6:	69f8      	ldr	r0, [r7, #28]
 8011cd8:	f000 fb56 	bl	8012388 <tcp_timewait_input>
        }
        pbuf_free(p);
 8011cdc:	6878      	ldr	r0, [r7, #4]
 8011cde:	f7fd ffe1 	bl	800fca4 <pbuf_free>
        return;
 8011ce2:	e1fd      	b.n	80120e0 <tcp_input+0x7ec>
        continue;
 8011ce4:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8011ce6:	69fb      	ldr	r3, [r7, #28]
 8011ce8:	68db      	ldr	r3, [r3, #12]
 8011cea:	61fb      	str	r3, [r7, #28]
 8011cec:	69fb      	ldr	r3, [r7, #28]
 8011cee:	2b00      	cmp	r3, #0
 8011cf0:	d1bc      	bne.n	8011c6c <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 8011cf2:	2300      	movs	r3, #0
 8011cf4:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8011cf6:	4b2f      	ldr	r3, [pc, #188]	; (8011db4 <tcp_input+0x4c0>)
 8011cf8:	681b      	ldr	r3, [r3, #0]
 8011cfa:	617b      	str	r3, [r7, #20]
 8011cfc:	e02a      	b.n	8011d54 <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 8011cfe:	697b      	ldr	r3, [r7, #20]
 8011d00:	7a1b      	ldrb	r3, [r3, #8]
 8011d02:	2b00      	cmp	r3, #0
 8011d04:	d00c      	beq.n	8011d20 <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8011d06:	697b      	ldr	r3, [r7, #20]
 8011d08:	7a1a      	ldrb	r2, [r3, #8]
 8011d0a:	4b22      	ldr	r3, [pc, #136]	; (8011d94 <tcp_input+0x4a0>)
 8011d0c:	685b      	ldr	r3, [r3, #4]
 8011d0e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8011d12:	3301      	adds	r3, #1
 8011d14:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 8011d16:	429a      	cmp	r2, r3
 8011d18:	d002      	beq.n	8011d20 <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 8011d1a:	697b      	ldr	r3, [r7, #20]
 8011d1c:	61bb      	str	r3, [r7, #24]
        continue;
 8011d1e:	e016      	b.n	8011d4e <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 8011d20:	697b      	ldr	r3, [r7, #20]
 8011d22:	8ada      	ldrh	r2, [r3, #22]
 8011d24:	4b1a      	ldr	r3, [pc, #104]	; (8011d90 <tcp_input+0x49c>)
 8011d26:	681b      	ldr	r3, [r3, #0]
 8011d28:	885b      	ldrh	r3, [r3, #2]
 8011d2a:	b29b      	uxth	r3, r3
 8011d2c:	429a      	cmp	r2, r3
 8011d2e:	d10c      	bne.n	8011d4a <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 8011d30:	697b      	ldr	r3, [r7, #20]
 8011d32:	681a      	ldr	r2, [r3, #0]
 8011d34:	4b17      	ldr	r3, [pc, #92]	; (8011d94 <tcp_input+0x4a0>)
 8011d36:	695b      	ldr	r3, [r3, #20]
 8011d38:	429a      	cmp	r2, r3
 8011d3a:	d00f      	beq.n	8011d5c <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 8011d3c:	697b      	ldr	r3, [r7, #20]
 8011d3e:	2b00      	cmp	r3, #0
 8011d40:	d00d      	beq.n	8011d5e <tcp_input+0x46a>
 8011d42:	697b      	ldr	r3, [r7, #20]
 8011d44:	681b      	ldr	r3, [r3, #0]
 8011d46:	2b00      	cmp	r3, #0
 8011d48:	d009      	beq.n	8011d5e <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 8011d4a:	697b      	ldr	r3, [r7, #20]
 8011d4c:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8011d4e:	697b      	ldr	r3, [r7, #20]
 8011d50:	68db      	ldr	r3, [r3, #12]
 8011d52:	617b      	str	r3, [r7, #20]
 8011d54:	697b      	ldr	r3, [r7, #20]
 8011d56:	2b00      	cmp	r3, #0
 8011d58:	d1d1      	bne.n	8011cfe <tcp_input+0x40a>
 8011d5a:	e000      	b.n	8011d5e <tcp_input+0x46a>
            break;
 8011d5c:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 8011d5e:	697b      	ldr	r3, [r7, #20]
 8011d60:	2b00      	cmp	r3, #0
 8011d62:	d029      	beq.n	8011db8 <tcp_input+0x4c4>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 8011d64:	69bb      	ldr	r3, [r7, #24]
 8011d66:	2b00      	cmp	r3, #0
 8011d68:	d00a      	beq.n	8011d80 <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 8011d6a:	697b      	ldr	r3, [r7, #20]
 8011d6c:	68da      	ldr	r2, [r3, #12]
 8011d6e:	69bb      	ldr	r3, [r7, #24]
 8011d70:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 8011d72:	4b10      	ldr	r3, [pc, #64]	; (8011db4 <tcp_input+0x4c0>)
 8011d74:	681a      	ldr	r2, [r3, #0]
 8011d76:	697b      	ldr	r3, [r7, #20]
 8011d78:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 8011d7a:	4a0e      	ldr	r2, [pc, #56]	; (8011db4 <tcp_input+0x4c0>)
 8011d7c:	697b      	ldr	r3, [r7, #20]
 8011d7e:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 8011d80:	6978      	ldr	r0, [r7, #20]
 8011d82:	f000 fa03 	bl	801218c <tcp_listen_input>
      }
      pbuf_free(p);
 8011d86:	6878      	ldr	r0, [r7, #4]
 8011d88:	f7fd ff8c 	bl	800fca4 <pbuf_free>
      return;
 8011d8c:	e1a8      	b.n	80120e0 <tcp_input+0x7ec>
 8011d8e:	bf00      	nop
 8011d90:	20008000 	.word	0x20008000
 8011d94:	200050bc 	.word	0x200050bc
 8011d98:	0801c068 	.word	0x0801c068
 8011d9c:	0801c194 	.word	0x0801c194
 8011da0:	0801c0b4 	.word	0x0801c0b4
 8011da4:	20007fe4 	.word	0x20007fe4
 8011da8:	0801c1c0 	.word	0x0801c1c0
 8011dac:	20007fe8 	.word	0x20007fe8
 8011db0:	0801c1ec 	.word	0x0801c1ec
 8011db4:	20007fe0 	.word	0x20007fe0
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 8011db8:	69fb      	ldr	r3, [r7, #28]
 8011dba:	2b00      	cmp	r3, #0
 8011dbc:	f000 8158 	beq.w	8012070 <tcp_input+0x77c>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 8011dc0:	4b95      	ldr	r3, [pc, #596]	; (8012018 <tcp_input+0x724>)
 8011dc2:	2200      	movs	r2, #0
 8011dc4:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 8011dc6:	687b      	ldr	r3, [r7, #4]
 8011dc8:	891a      	ldrh	r2, [r3, #8]
 8011dca:	4b93      	ldr	r3, [pc, #588]	; (8012018 <tcp_input+0x724>)
 8011dcc:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 8011dce:	4a92      	ldr	r2, [pc, #584]	; (8012018 <tcp_input+0x724>)
 8011dd0:	687b      	ldr	r3, [r7, #4]
 8011dd2:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 8011dd4:	4b91      	ldr	r3, [pc, #580]	; (801201c <tcp_input+0x728>)
 8011dd6:	681b      	ldr	r3, [r3, #0]
 8011dd8:	4a8f      	ldr	r2, [pc, #572]	; (8012018 <tcp_input+0x724>)
 8011dda:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 8011ddc:	4b90      	ldr	r3, [pc, #576]	; (8012020 <tcp_input+0x72c>)
 8011dde:	2200      	movs	r2, #0
 8011de0:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 8011de2:	4b90      	ldr	r3, [pc, #576]	; (8012024 <tcp_input+0x730>)
 8011de4:	2200      	movs	r2, #0
 8011de6:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 8011de8:	4b8f      	ldr	r3, [pc, #572]	; (8012028 <tcp_input+0x734>)
 8011dea:	2200      	movs	r2, #0
 8011dec:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 8011dee:	4b8f      	ldr	r3, [pc, #572]	; (801202c <tcp_input+0x738>)
 8011df0:	781b      	ldrb	r3, [r3, #0]
 8011df2:	f003 0308 	and.w	r3, r3, #8
 8011df6:	2b00      	cmp	r3, #0
 8011df8:	d006      	beq.n	8011e08 <tcp_input+0x514>
      p->flags |= PBUF_FLAG_PUSH;
 8011dfa:	687b      	ldr	r3, [r7, #4]
 8011dfc:	7b5b      	ldrb	r3, [r3, #13]
 8011dfe:	f043 0301 	orr.w	r3, r3, #1
 8011e02:	b2da      	uxtb	r2, r3
 8011e04:	687b      	ldr	r3, [r7, #4]
 8011e06:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 8011e08:	69fb      	ldr	r3, [r7, #28]
 8011e0a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8011e0c:	2b00      	cmp	r3, #0
 8011e0e:	d017      	beq.n	8011e40 <tcp_input+0x54c>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8011e10:	69f8      	ldr	r0, [r7, #28]
 8011e12:	f7ff f929 	bl	8011068 <tcp_process_refused_data>
 8011e16:	4603      	mov	r3, r0
 8011e18:	f113 0f0d 	cmn.w	r3, #13
 8011e1c:	d007      	beq.n	8011e2e <tcp_input+0x53a>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8011e1e:	69fb      	ldr	r3, [r7, #28]
 8011e20:	6f9b      	ldr	r3, [r3, #120]	; 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8011e22:	2b00      	cmp	r3, #0
 8011e24:	d00c      	beq.n	8011e40 <tcp_input+0x54c>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8011e26:	4b82      	ldr	r3, [pc, #520]	; (8012030 <tcp_input+0x73c>)
 8011e28:	881b      	ldrh	r3, [r3, #0]
 8011e2a:	2b00      	cmp	r3, #0
 8011e2c:	d008      	beq.n	8011e40 <tcp_input+0x54c>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 8011e2e:	69fb      	ldr	r3, [r7, #28]
 8011e30:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8011e32:	2b00      	cmp	r3, #0
 8011e34:	f040 80e3 	bne.w	8011ffe <tcp_input+0x70a>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 8011e38:	69f8      	ldr	r0, [r7, #28]
 8011e3a:	f003 f9ad 	bl	8015198 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 8011e3e:	e0de      	b.n	8011ffe <tcp_input+0x70a>
      }
    }
    tcp_input_pcb = pcb;
 8011e40:	4a7c      	ldr	r2, [pc, #496]	; (8012034 <tcp_input+0x740>)
 8011e42:	69fb      	ldr	r3, [r7, #28]
 8011e44:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 8011e46:	69f8      	ldr	r0, [r7, #28]
 8011e48:	f000 fb18 	bl	801247c <tcp_process>
 8011e4c:	4603      	mov	r3, r0
 8011e4e:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 8011e50:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8011e54:	f113 0f0d 	cmn.w	r3, #13
 8011e58:	f000 80d3 	beq.w	8012002 <tcp_input+0x70e>
      if (recv_flags & TF_RESET) {
 8011e5c:	4b71      	ldr	r3, [pc, #452]	; (8012024 <tcp_input+0x730>)
 8011e5e:	781b      	ldrb	r3, [r3, #0]
 8011e60:	f003 0308 	and.w	r3, r3, #8
 8011e64:	2b00      	cmp	r3, #0
 8011e66:	d015      	beq.n	8011e94 <tcp_input+0x5a0>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 8011e68:	69fb      	ldr	r3, [r7, #28]
 8011e6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8011e6e:	2b00      	cmp	r3, #0
 8011e70:	d008      	beq.n	8011e84 <tcp_input+0x590>
 8011e72:	69fb      	ldr	r3, [r7, #28]
 8011e74:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8011e78:	69fa      	ldr	r2, [r7, #28]
 8011e7a:	6912      	ldr	r2, [r2, #16]
 8011e7c:	f06f 010d 	mvn.w	r1, #13
 8011e80:	4610      	mov	r0, r2
 8011e82:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8011e84:	69f9      	ldr	r1, [r7, #28]
 8011e86:	486c      	ldr	r0, [pc, #432]	; (8012038 <tcp_input+0x744>)
 8011e88:	f7ff fbbc 	bl	8011604 <tcp_pcb_remove>
        tcp_free(pcb);
 8011e8c:	69f8      	ldr	r0, [r7, #28]
 8011e8e:	f7fe f9a9 	bl	80101e4 <tcp_free>
 8011e92:	e0da      	b.n	801204a <tcp_input+0x756>
      } else {
        err = ERR_OK;
 8011e94:	2300      	movs	r3, #0
 8011e96:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 8011e98:	4b63      	ldr	r3, [pc, #396]	; (8012028 <tcp_input+0x734>)
 8011e9a:	881b      	ldrh	r3, [r3, #0]
 8011e9c:	2b00      	cmp	r3, #0
 8011e9e:	d01d      	beq.n	8011edc <tcp_input+0x5e8>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 8011ea0:	4b61      	ldr	r3, [pc, #388]	; (8012028 <tcp_input+0x734>)
 8011ea2:	881b      	ldrh	r3, [r3, #0]
 8011ea4:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 8011ea6:	69fb      	ldr	r3, [r7, #28]
 8011ea8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8011eac:	2b00      	cmp	r3, #0
 8011eae:	d00a      	beq.n	8011ec6 <tcp_input+0x5d2>
 8011eb0:	69fb      	ldr	r3, [r7, #28]
 8011eb2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8011eb6:	69fa      	ldr	r2, [r7, #28]
 8011eb8:	6910      	ldr	r0, [r2, #16]
 8011eba:	89fa      	ldrh	r2, [r7, #14]
 8011ebc:	69f9      	ldr	r1, [r7, #28]
 8011ebe:	4798      	blx	r3
 8011ec0:	4603      	mov	r3, r0
 8011ec2:	74fb      	strb	r3, [r7, #19]
 8011ec4:	e001      	b.n	8011eca <tcp_input+0x5d6>
 8011ec6:	2300      	movs	r3, #0
 8011ec8:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 8011eca:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8011ece:	f113 0f0d 	cmn.w	r3, #13
 8011ed2:	f000 8098 	beq.w	8012006 <tcp_input+0x712>
              goto aborted;
            }
          }
          recv_acked = 0;
 8011ed6:	4b54      	ldr	r3, [pc, #336]	; (8012028 <tcp_input+0x734>)
 8011ed8:	2200      	movs	r2, #0
 8011eda:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 8011edc:	69f8      	ldr	r0, [r7, #28]
 8011ede:	f000 f915 	bl	801210c <tcp_input_delayed_close>
 8011ee2:	4603      	mov	r3, r0
 8011ee4:	2b00      	cmp	r3, #0
 8011ee6:	f040 8090 	bne.w	801200a <tcp_input+0x716>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 8011eea:	4b4d      	ldr	r3, [pc, #308]	; (8012020 <tcp_input+0x72c>)
 8011eec:	681b      	ldr	r3, [r3, #0]
 8011eee:	2b00      	cmp	r3, #0
 8011ef0:	d041      	beq.n	8011f76 <tcp_input+0x682>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 8011ef2:	69fb      	ldr	r3, [r7, #28]
 8011ef4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8011ef6:	2b00      	cmp	r3, #0
 8011ef8:	d006      	beq.n	8011f08 <tcp_input+0x614>
 8011efa:	4b50      	ldr	r3, [pc, #320]	; (801203c <tcp_input+0x748>)
 8011efc:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 8011f00:	494f      	ldr	r1, [pc, #316]	; (8012040 <tcp_input+0x74c>)
 8011f02:	4850      	ldr	r0, [pc, #320]	; (8012044 <tcp_input+0x750>)
 8011f04:	f006 fd8e 	bl	8018a24 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 8011f08:	69fb      	ldr	r3, [r7, #28]
 8011f0a:	8b5b      	ldrh	r3, [r3, #26]
 8011f0c:	f003 0310 	and.w	r3, r3, #16
 8011f10:	2b00      	cmp	r3, #0
 8011f12:	d008      	beq.n	8011f26 <tcp_input+0x632>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 8011f14:	4b42      	ldr	r3, [pc, #264]	; (8012020 <tcp_input+0x72c>)
 8011f16:	681b      	ldr	r3, [r3, #0]
 8011f18:	4618      	mov	r0, r3
 8011f1a:	f7fd fec3 	bl	800fca4 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 8011f1e:	69f8      	ldr	r0, [r7, #28]
 8011f20:	f7fe fc48 	bl	80107b4 <tcp_abort>
            goto aborted;
 8011f24:	e091      	b.n	801204a <tcp_input+0x756>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 8011f26:	69fb      	ldr	r3, [r7, #28]
 8011f28:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8011f2c:	2b00      	cmp	r3, #0
 8011f2e:	d00c      	beq.n	8011f4a <tcp_input+0x656>
 8011f30:	69fb      	ldr	r3, [r7, #28]
 8011f32:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8011f36:	69fb      	ldr	r3, [r7, #28]
 8011f38:	6918      	ldr	r0, [r3, #16]
 8011f3a:	4b39      	ldr	r3, [pc, #228]	; (8012020 <tcp_input+0x72c>)
 8011f3c:	681a      	ldr	r2, [r3, #0]
 8011f3e:	2300      	movs	r3, #0
 8011f40:	69f9      	ldr	r1, [r7, #28]
 8011f42:	47a0      	blx	r4
 8011f44:	4603      	mov	r3, r0
 8011f46:	74fb      	strb	r3, [r7, #19]
 8011f48:	e008      	b.n	8011f5c <tcp_input+0x668>
 8011f4a:	4b35      	ldr	r3, [pc, #212]	; (8012020 <tcp_input+0x72c>)
 8011f4c:	681a      	ldr	r2, [r3, #0]
 8011f4e:	2300      	movs	r3, #0
 8011f50:	69f9      	ldr	r1, [r7, #28]
 8011f52:	2000      	movs	r0, #0
 8011f54:	f7ff f95e 	bl	8011214 <tcp_recv_null>
 8011f58:	4603      	mov	r3, r0
 8011f5a:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 8011f5c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8011f60:	f113 0f0d 	cmn.w	r3, #13
 8011f64:	d053      	beq.n	801200e <tcp_input+0x71a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 8011f66:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8011f6a:	2b00      	cmp	r3, #0
 8011f6c:	d003      	beq.n	8011f76 <tcp_input+0x682>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 8011f6e:	4b2c      	ldr	r3, [pc, #176]	; (8012020 <tcp_input+0x72c>)
 8011f70:	681a      	ldr	r2, [r3, #0]
 8011f72:	69fb      	ldr	r3, [r7, #28]
 8011f74:	679a      	str	r2, [r3, #120]	; 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 8011f76:	4b2b      	ldr	r3, [pc, #172]	; (8012024 <tcp_input+0x730>)
 8011f78:	781b      	ldrb	r3, [r3, #0]
 8011f7a:	f003 0320 	and.w	r3, r3, #32
 8011f7e:	2b00      	cmp	r3, #0
 8011f80:	d030      	beq.n	8011fe4 <tcp_input+0x6f0>
          if (pcb->refused_data != NULL) {
 8011f82:	69fb      	ldr	r3, [r7, #28]
 8011f84:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8011f86:	2b00      	cmp	r3, #0
 8011f88:	d009      	beq.n	8011f9e <tcp_input+0x6aa>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 8011f8a:	69fb      	ldr	r3, [r7, #28]
 8011f8c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8011f8e:	7b5a      	ldrb	r2, [r3, #13]
 8011f90:	69fb      	ldr	r3, [r7, #28]
 8011f92:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8011f94:	f042 0220 	orr.w	r2, r2, #32
 8011f98:	b2d2      	uxtb	r2, r2
 8011f9a:	735a      	strb	r2, [r3, #13]
 8011f9c:	e022      	b.n	8011fe4 <tcp_input+0x6f0>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 8011f9e:	69fb      	ldr	r3, [r7, #28]
 8011fa0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8011fa2:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8011fa6:	d005      	beq.n	8011fb4 <tcp_input+0x6c0>
              pcb->rcv_wnd++;
 8011fa8:	69fb      	ldr	r3, [r7, #28]
 8011faa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8011fac:	3301      	adds	r3, #1
 8011fae:	b29a      	uxth	r2, r3
 8011fb0:	69fb      	ldr	r3, [r7, #28]
 8011fb2:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 8011fb4:	69fb      	ldr	r3, [r7, #28]
 8011fb6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8011fba:	2b00      	cmp	r3, #0
 8011fbc:	d00b      	beq.n	8011fd6 <tcp_input+0x6e2>
 8011fbe:	69fb      	ldr	r3, [r7, #28]
 8011fc0:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8011fc4:	69fb      	ldr	r3, [r7, #28]
 8011fc6:	6918      	ldr	r0, [r3, #16]
 8011fc8:	2300      	movs	r3, #0
 8011fca:	2200      	movs	r2, #0
 8011fcc:	69f9      	ldr	r1, [r7, #28]
 8011fce:	47a0      	blx	r4
 8011fd0:	4603      	mov	r3, r0
 8011fd2:	74fb      	strb	r3, [r7, #19]
 8011fd4:	e001      	b.n	8011fda <tcp_input+0x6e6>
 8011fd6:	2300      	movs	r3, #0
 8011fd8:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 8011fda:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8011fde:	f113 0f0d 	cmn.w	r3, #13
 8011fe2:	d016      	beq.n	8012012 <tcp_input+0x71e>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 8011fe4:	4b13      	ldr	r3, [pc, #76]	; (8012034 <tcp_input+0x740>)
 8011fe6:	2200      	movs	r2, #0
 8011fe8:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 8011fea:	69f8      	ldr	r0, [r7, #28]
 8011fec:	f000 f88e 	bl	801210c <tcp_input_delayed_close>
 8011ff0:	4603      	mov	r3, r0
 8011ff2:	2b00      	cmp	r3, #0
 8011ff4:	d128      	bne.n	8012048 <tcp_input+0x754>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 8011ff6:	69f8      	ldr	r0, [r7, #28]
 8011ff8:	f002 fac8 	bl	801458c <tcp_output>
 8011ffc:	e025      	b.n	801204a <tcp_input+0x756>
        goto aborted;
 8011ffe:	bf00      	nop
 8012000:	e023      	b.n	801204a <tcp_input+0x756>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 8012002:	bf00      	nop
 8012004:	e021      	b.n	801204a <tcp_input+0x756>
              goto aborted;
 8012006:	bf00      	nop
 8012008:	e01f      	b.n	801204a <tcp_input+0x756>
          goto aborted;
 801200a:	bf00      	nop
 801200c:	e01d      	b.n	801204a <tcp_input+0x756>
            goto aborted;
 801200e:	bf00      	nop
 8012010:	e01b      	b.n	801204a <tcp_input+0x756>
              goto aborted;
 8012012:	bf00      	nop
 8012014:	e019      	b.n	801204a <tcp_input+0x756>
 8012016:	bf00      	nop
 8012018:	20007ff0 	.word	0x20007ff0
 801201c:	20008000 	.word	0x20008000
 8012020:	20008020 	.word	0x20008020
 8012024:	2000801d 	.word	0x2000801d
 8012028:	20008018 	.word	0x20008018
 801202c:	2000801c 	.word	0x2000801c
 8012030:	2000801a 	.word	0x2000801a
 8012034:	20008024 	.word	0x20008024
 8012038:	20007fe4 	.word	0x20007fe4
 801203c:	0801c068 	.word	0x0801c068
 8012040:	0801c21c 	.word	0x0801c21c
 8012044:	0801c0b4 	.word	0x0801c0b4
          goto aborted;
 8012048:	bf00      	nop
    tcp_input_pcb = NULL;
 801204a:	4b27      	ldr	r3, [pc, #156]	; (80120e8 <tcp_input+0x7f4>)
 801204c:	2200      	movs	r2, #0
 801204e:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 8012050:	4b26      	ldr	r3, [pc, #152]	; (80120ec <tcp_input+0x7f8>)
 8012052:	2200      	movs	r2, #0
 8012054:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 8012056:	4b26      	ldr	r3, [pc, #152]	; (80120f0 <tcp_input+0x7fc>)
 8012058:	685b      	ldr	r3, [r3, #4]
 801205a:	2b00      	cmp	r3, #0
 801205c:	d03f      	beq.n	80120de <tcp_input+0x7ea>
      pbuf_free(inseg.p);
 801205e:	4b24      	ldr	r3, [pc, #144]	; (80120f0 <tcp_input+0x7fc>)
 8012060:	685b      	ldr	r3, [r3, #4]
 8012062:	4618      	mov	r0, r3
 8012064:	f7fd fe1e 	bl	800fca4 <pbuf_free>
      inseg.p = NULL;
 8012068:	4b21      	ldr	r3, [pc, #132]	; (80120f0 <tcp_input+0x7fc>)
 801206a:	2200      	movs	r2, #0
 801206c:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 801206e:	e036      	b.n	80120de <tcp_input+0x7ea>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 8012070:	4b20      	ldr	r3, [pc, #128]	; (80120f4 <tcp_input+0x800>)
 8012072:	681b      	ldr	r3, [r3, #0]
 8012074:	899b      	ldrh	r3, [r3, #12]
 8012076:	b29b      	uxth	r3, r3
 8012078:	4618      	mov	r0, r3
 801207a:	f7fc fa1d 	bl	800e4b8 <lwip_htons>
 801207e:	4603      	mov	r3, r0
 8012080:	b2db      	uxtb	r3, r3
 8012082:	f003 0304 	and.w	r3, r3, #4
 8012086:	2b00      	cmp	r3, #0
 8012088:	d118      	bne.n	80120bc <tcp_input+0x7c8>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 801208a:	4b1b      	ldr	r3, [pc, #108]	; (80120f8 <tcp_input+0x804>)
 801208c:	6819      	ldr	r1, [r3, #0]
 801208e:	4b1b      	ldr	r3, [pc, #108]	; (80120fc <tcp_input+0x808>)
 8012090:	881b      	ldrh	r3, [r3, #0]
 8012092:	461a      	mov	r2, r3
 8012094:	4b1a      	ldr	r3, [pc, #104]	; (8012100 <tcp_input+0x80c>)
 8012096:	681b      	ldr	r3, [r3, #0]
 8012098:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801209a:	4b16      	ldr	r3, [pc, #88]	; (80120f4 <tcp_input+0x800>)
 801209c:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 801209e:	885b      	ldrh	r3, [r3, #2]
 80120a0:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80120a2:	4a14      	ldr	r2, [pc, #80]	; (80120f4 <tcp_input+0x800>)
 80120a4:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 80120a6:	8812      	ldrh	r2, [r2, #0]
 80120a8:	b292      	uxth	r2, r2
 80120aa:	9202      	str	r2, [sp, #8]
 80120ac:	9301      	str	r3, [sp, #4]
 80120ae:	4b15      	ldr	r3, [pc, #84]	; (8012104 <tcp_input+0x810>)
 80120b0:	9300      	str	r3, [sp, #0]
 80120b2:	4b15      	ldr	r3, [pc, #84]	; (8012108 <tcp_input+0x814>)
 80120b4:	4602      	mov	r2, r0
 80120b6:	2000      	movs	r0, #0
 80120b8:	f003 f81c 	bl	80150f4 <tcp_rst>
    pbuf_free(p);
 80120bc:	6878      	ldr	r0, [r7, #4]
 80120be:	f7fd fdf1 	bl	800fca4 <pbuf_free>
  return;
 80120c2:	e00c      	b.n	80120de <tcp_input+0x7ea>
    goto dropped;
 80120c4:	bf00      	nop
 80120c6:	e006      	b.n	80120d6 <tcp_input+0x7e2>
    goto dropped;
 80120c8:	bf00      	nop
 80120ca:	e004      	b.n	80120d6 <tcp_input+0x7e2>
    goto dropped;
 80120cc:	bf00      	nop
 80120ce:	e002      	b.n	80120d6 <tcp_input+0x7e2>
      goto dropped;
 80120d0:	bf00      	nop
 80120d2:	e000      	b.n	80120d6 <tcp_input+0x7e2>
      goto dropped;
 80120d4:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 80120d6:	6878      	ldr	r0, [r7, #4]
 80120d8:	f7fd fde4 	bl	800fca4 <pbuf_free>
 80120dc:	e000      	b.n	80120e0 <tcp_input+0x7ec>
  return;
 80120de:	bf00      	nop
}
 80120e0:	3724      	adds	r7, #36	; 0x24
 80120e2:	46bd      	mov	sp, r7
 80120e4:	bd90      	pop	{r4, r7, pc}
 80120e6:	bf00      	nop
 80120e8:	20008024 	.word	0x20008024
 80120ec:	20008020 	.word	0x20008020
 80120f0:	20007ff0 	.word	0x20007ff0
 80120f4:	20008000 	.word	0x20008000
 80120f8:	20008014 	.word	0x20008014
 80120fc:	2000801a 	.word	0x2000801a
 8012100:	20008010 	.word	0x20008010
 8012104:	200050cc 	.word	0x200050cc
 8012108:	200050d0 	.word	0x200050d0

0801210c <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 801210c:	b580      	push	{r7, lr}
 801210e:	b082      	sub	sp, #8
 8012110:	af00      	add	r7, sp, #0
 8012112:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 8012114:	687b      	ldr	r3, [r7, #4]
 8012116:	2b00      	cmp	r3, #0
 8012118:	d106      	bne.n	8012128 <tcp_input_delayed_close+0x1c>
 801211a:	4b17      	ldr	r3, [pc, #92]	; (8012178 <tcp_input_delayed_close+0x6c>)
 801211c:	f240 225a 	movw	r2, #602	; 0x25a
 8012120:	4916      	ldr	r1, [pc, #88]	; (801217c <tcp_input_delayed_close+0x70>)
 8012122:	4817      	ldr	r0, [pc, #92]	; (8012180 <tcp_input_delayed_close+0x74>)
 8012124:	f006 fc7e 	bl	8018a24 <iprintf>

  if (recv_flags & TF_CLOSED) {
 8012128:	4b16      	ldr	r3, [pc, #88]	; (8012184 <tcp_input_delayed_close+0x78>)
 801212a:	781b      	ldrb	r3, [r3, #0]
 801212c:	f003 0310 	and.w	r3, r3, #16
 8012130:	2b00      	cmp	r3, #0
 8012132:	d01c      	beq.n	801216e <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 8012134:	687b      	ldr	r3, [r7, #4]
 8012136:	8b5b      	ldrh	r3, [r3, #26]
 8012138:	f003 0310 	and.w	r3, r3, #16
 801213c:	2b00      	cmp	r3, #0
 801213e:	d10d      	bne.n	801215c <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 8012140:	687b      	ldr	r3, [r7, #4]
 8012142:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8012146:	2b00      	cmp	r3, #0
 8012148:	d008      	beq.n	801215c <tcp_input_delayed_close+0x50>
 801214a:	687b      	ldr	r3, [r7, #4]
 801214c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8012150:	687a      	ldr	r2, [r7, #4]
 8012152:	6912      	ldr	r2, [r2, #16]
 8012154:	f06f 010e 	mvn.w	r1, #14
 8012158:	4610      	mov	r0, r2
 801215a:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 801215c:	6879      	ldr	r1, [r7, #4]
 801215e:	480a      	ldr	r0, [pc, #40]	; (8012188 <tcp_input_delayed_close+0x7c>)
 8012160:	f7ff fa50 	bl	8011604 <tcp_pcb_remove>
    tcp_free(pcb);
 8012164:	6878      	ldr	r0, [r7, #4]
 8012166:	f7fe f83d 	bl	80101e4 <tcp_free>
    return 1;
 801216a:	2301      	movs	r3, #1
 801216c:	e000      	b.n	8012170 <tcp_input_delayed_close+0x64>
  }
  return 0;
 801216e:	2300      	movs	r3, #0
}
 8012170:	4618      	mov	r0, r3
 8012172:	3708      	adds	r7, #8
 8012174:	46bd      	mov	sp, r7
 8012176:	bd80      	pop	{r7, pc}
 8012178:	0801c068 	.word	0x0801c068
 801217c:	0801c238 	.word	0x0801c238
 8012180:	0801c0b4 	.word	0x0801c0b4
 8012184:	2000801d 	.word	0x2000801d
 8012188:	20007fe4 	.word	0x20007fe4

0801218c <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 801218c:	b590      	push	{r4, r7, lr}
 801218e:	b08b      	sub	sp, #44	; 0x2c
 8012190:	af04      	add	r7, sp, #16
 8012192:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 8012194:	4b6f      	ldr	r3, [pc, #444]	; (8012354 <tcp_listen_input+0x1c8>)
 8012196:	781b      	ldrb	r3, [r3, #0]
 8012198:	f003 0304 	and.w	r3, r3, #4
 801219c:	2b00      	cmp	r3, #0
 801219e:	f040 80d2 	bne.w	8012346 <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 80121a2:	687b      	ldr	r3, [r7, #4]
 80121a4:	2b00      	cmp	r3, #0
 80121a6:	d106      	bne.n	80121b6 <tcp_listen_input+0x2a>
 80121a8:	4b6b      	ldr	r3, [pc, #428]	; (8012358 <tcp_listen_input+0x1cc>)
 80121aa:	f240 2281 	movw	r2, #641	; 0x281
 80121ae:	496b      	ldr	r1, [pc, #428]	; (801235c <tcp_listen_input+0x1d0>)
 80121b0:	486b      	ldr	r0, [pc, #428]	; (8012360 <tcp_listen_input+0x1d4>)
 80121b2:	f006 fc37 	bl	8018a24 <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 80121b6:	4b67      	ldr	r3, [pc, #412]	; (8012354 <tcp_listen_input+0x1c8>)
 80121b8:	781b      	ldrb	r3, [r3, #0]
 80121ba:	f003 0310 	and.w	r3, r3, #16
 80121be:	2b00      	cmp	r3, #0
 80121c0:	d019      	beq.n	80121f6 <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80121c2:	4b68      	ldr	r3, [pc, #416]	; (8012364 <tcp_listen_input+0x1d8>)
 80121c4:	6819      	ldr	r1, [r3, #0]
 80121c6:	4b68      	ldr	r3, [pc, #416]	; (8012368 <tcp_listen_input+0x1dc>)
 80121c8:	881b      	ldrh	r3, [r3, #0]
 80121ca:	461a      	mov	r2, r3
 80121cc:	4b67      	ldr	r3, [pc, #412]	; (801236c <tcp_listen_input+0x1e0>)
 80121ce:	681b      	ldr	r3, [r3, #0]
 80121d0:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80121d2:	4b67      	ldr	r3, [pc, #412]	; (8012370 <tcp_listen_input+0x1e4>)
 80121d4:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80121d6:	885b      	ldrh	r3, [r3, #2]
 80121d8:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80121da:	4a65      	ldr	r2, [pc, #404]	; (8012370 <tcp_listen_input+0x1e4>)
 80121dc:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80121de:	8812      	ldrh	r2, [r2, #0]
 80121e0:	b292      	uxth	r2, r2
 80121e2:	9202      	str	r2, [sp, #8]
 80121e4:	9301      	str	r3, [sp, #4]
 80121e6:	4b63      	ldr	r3, [pc, #396]	; (8012374 <tcp_listen_input+0x1e8>)
 80121e8:	9300      	str	r3, [sp, #0]
 80121ea:	4b63      	ldr	r3, [pc, #396]	; (8012378 <tcp_listen_input+0x1ec>)
 80121ec:	4602      	mov	r2, r0
 80121ee:	6878      	ldr	r0, [r7, #4]
 80121f0:	f002 ff80 	bl	80150f4 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 80121f4:	e0a9      	b.n	801234a <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 80121f6:	4b57      	ldr	r3, [pc, #348]	; (8012354 <tcp_listen_input+0x1c8>)
 80121f8:	781b      	ldrb	r3, [r3, #0]
 80121fa:	f003 0302 	and.w	r3, r3, #2
 80121fe:	2b00      	cmp	r3, #0
 8012200:	f000 80a3 	beq.w	801234a <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 8012204:	687b      	ldr	r3, [r7, #4]
 8012206:	7d5b      	ldrb	r3, [r3, #21]
 8012208:	4618      	mov	r0, r3
 801220a:	f7ff f927 	bl	801145c <tcp_alloc>
 801220e:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 8012210:	697b      	ldr	r3, [r7, #20]
 8012212:	2b00      	cmp	r3, #0
 8012214:	d111      	bne.n	801223a <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8012216:	687b      	ldr	r3, [r7, #4]
 8012218:	699b      	ldr	r3, [r3, #24]
 801221a:	2b00      	cmp	r3, #0
 801221c:	d00a      	beq.n	8012234 <tcp_listen_input+0xa8>
 801221e:	687b      	ldr	r3, [r7, #4]
 8012220:	699b      	ldr	r3, [r3, #24]
 8012222:	687a      	ldr	r2, [r7, #4]
 8012224:	6910      	ldr	r0, [r2, #16]
 8012226:	f04f 32ff 	mov.w	r2, #4294967295
 801222a:	2100      	movs	r1, #0
 801222c:	4798      	blx	r3
 801222e:	4603      	mov	r3, r0
 8012230:	73bb      	strb	r3, [r7, #14]
      return;
 8012232:	e08b      	b.n	801234c <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8012234:	23f0      	movs	r3, #240	; 0xf0
 8012236:	73bb      	strb	r3, [r7, #14]
      return;
 8012238:	e088      	b.n	801234c <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 801223a:	4b50      	ldr	r3, [pc, #320]	; (801237c <tcp_listen_input+0x1f0>)
 801223c:	695a      	ldr	r2, [r3, #20]
 801223e:	697b      	ldr	r3, [r7, #20]
 8012240:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 8012242:	4b4e      	ldr	r3, [pc, #312]	; (801237c <tcp_listen_input+0x1f0>)
 8012244:	691a      	ldr	r2, [r3, #16]
 8012246:	697b      	ldr	r3, [r7, #20]
 8012248:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 801224a:	687b      	ldr	r3, [r7, #4]
 801224c:	8ada      	ldrh	r2, [r3, #22]
 801224e:	697b      	ldr	r3, [r7, #20]
 8012250:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 8012252:	4b47      	ldr	r3, [pc, #284]	; (8012370 <tcp_listen_input+0x1e4>)
 8012254:	681b      	ldr	r3, [r3, #0]
 8012256:	881b      	ldrh	r3, [r3, #0]
 8012258:	b29a      	uxth	r2, r3
 801225a:	697b      	ldr	r3, [r7, #20]
 801225c:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 801225e:	697b      	ldr	r3, [r7, #20]
 8012260:	2203      	movs	r2, #3
 8012262:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 8012264:	4b41      	ldr	r3, [pc, #260]	; (801236c <tcp_listen_input+0x1e0>)
 8012266:	681b      	ldr	r3, [r3, #0]
 8012268:	1c5a      	adds	r2, r3, #1
 801226a:	697b      	ldr	r3, [r7, #20]
 801226c:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 801226e:	697b      	ldr	r3, [r7, #20]
 8012270:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8012272:	697b      	ldr	r3, [r7, #20]
 8012274:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 8012276:	6978      	ldr	r0, [r7, #20]
 8012278:	f7ff fa58 	bl	801172c <tcp_next_iss>
 801227c:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 801227e:	697b      	ldr	r3, [r7, #20]
 8012280:	693a      	ldr	r2, [r7, #16]
 8012282:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_nxt = iss;
 8012284:	697b      	ldr	r3, [r7, #20]
 8012286:	693a      	ldr	r2, [r7, #16]
 8012288:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->lastack = iss;
 801228a:	697b      	ldr	r3, [r7, #20]
 801228c:	693a      	ldr	r2, [r7, #16]
 801228e:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 8012290:	697b      	ldr	r3, [r7, #20]
 8012292:	693a      	ldr	r2, [r7, #16]
 8012294:	65da      	str	r2, [r3, #92]	; 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 8012296:	4b35      	ldr	r3, [pc, #212]	; (801236c <tcp_listen_input+0x1e0>)
 8012298:	681b      	ldr	r3, [r3, #0]
 801229a:	1e5a      	subs	r2, r3, #1
 801229c:	697b      	ldr	r3, [r7, #20]
 801229e:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 80122a0:	687b      	ldr	r3, [r7, #4]
 80122a2:	691a      	ldr	r2, [r3, #16]
 80122a4:	697b      	ldr	r3, [r7, #20]
 80122a6:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 80122a8:	697b      	ldr	r3, [r7, #20]
 80122aa:	687a      	ldr	r2, [r7, #4]
 80122ac:	67da      	str	r2, [r3, #124]	; 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 80122ae:	687b      	ldr	r3, [r7, #4]
 80122b0:	7a5b      	ldrb	r3, [r3, #9]
 80122b2:	f003 030c 	and.w	r3, r3, #12
 80122b6:	b2da      	uxtb	r2, r3
 80122b8:	697b      	ldr	r3, [r7, #20]
 80122ba:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 80122bc:	687b      	ldr	r3, [r7, #4]
 80122be:	7a1a      	ldrb	r2, [r3, #8]
 80122c0:	697b      	ldr	r3, [r7, #20]
 80122c2:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 80122c4:	4b2e      	ldr	r3, [pc, #184]	; (8012380 <tcp_listen_input+0x1f4>)
 80122c6:	681a      	ldr	r2, [r3, #0]
 80122c8:	697b      	ldr	r3, [r7, #20]
 80122ca:	60da      	str	r2, [r3, #12]
 80122cc:	4a2c      	ldr	r2, [pc, #176]	; (8012380 <tcp_listen_input+0x1f4>)
 80122ce:	697b      	ldr	r3, [r7, #20]
 80122d0:	6013      	str	r3, [r2, #0]
 80122d2:	f003 f8d1 	bl	8015478 <tcp_timer_needed>
 80122d6:	4b2b      	ldr	r3, [pc, #172]	; (8012384 <tcp_listen_input+0x1f8>)
 80122d8:	2201      	movs	r2, #1
 80122da:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 80122dc:	6978      	ldr	r0, [r7, #20]
 80122de:	f001 fd8f 	bl	8013e00 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 80122e2:	4b23      	ldr	r3, [pc, #140]	; (8012370 <tcp_listen_input+0x1e4>)
 80122e4:	681b      	ldr	r3, [r3, #0]
 80122e6:	89db      	ldrh	r3, [r3, #14]
 80122e8:	b29a      	uxth	r2, r3
 80122ea:	697b      	ldr	r3, [r7, #20]
 80122ec:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 80122f0:	697b      	ldr	r3, [r7, #20]
 80122f2:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 80122f6:	697b      	ldr	r3, [r7, #20]
 80122f8:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 80122fc:	697b      	ldr	r3, [r7, #20]
 80122fe:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 8012300:	697b      	ldr	r3, [r7, #20]
 8012302:	3304      	adds	r3, #4
 8012304:	4618      	mov	r0, r3
 8012306:	f004 fc79 	bl	8016bfc <ip4_route>
 801230a:	4601      	mov	r1, r0
 801230c:	697b      	ldr	r3, [r7, #20]
 801230e:	3304      	adds	r3, #4
 8012310:	461a      	mov	r2, r3
 8012312:	4620      	mov	r0, r4
 8012314:	f7ff fa30 	bl	8011778 <tcp_eff_send_mss_netif>
 8012318:	4603      	mov	r3, r0
 801231a:	461a      	mov	r2, r3
 801231c:	697b      	ldr	r3, [r7, #20]
 801231e:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 8012320:	2112      	movs	r1, #18
 8012322:	6978      	ldr	r0, [r7, #20]
 8012324:	f002 f844 	bl	80143b0 <tcp_enqueue_flags>
 8012328:	4603      	mov	r3, r0
 801232a:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 801232c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8012330:	2b00      	cmp	r3, #0
 8012332:	d004      	beq.n	801233e <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 8012334:	2100      	movs	r1, #0
 8012336:	6978      	ldr	r0, [r7, #20]
 8012338:	f7fe f97e 	bl	8010638 <tcp_abandon>
      return;
 801233c:	e006      	b.n	801234c <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 801233e:	6978      	ldr	r0, [r7, #20]
 8012340:	f002 f924 	bl	801458c <tcp_output>
  return;
 8012344:	e001      	b.n	801234a <tcp_listen_input+0x1be>
    return;
 8012346:	bf00      	nop
 8012348:	e000      	b.n	801234c <tcp_listen_input+0x1c0>
  return;
 801234a:	bf00      	nop
}
 801234c:	371c      	adds	r7, #28
 801234e:	46bd      	mov	sp, r7
 8012350:	bd90      	pop	{r4, r7, pc}
 8012352:	bf00      	nop
 8012354:	2000801c 	.word	0x2000801c
 8012358:	0801c068 	.word	0x0801c068
 801235c:	0801c260 	.word	0x0801c260
 8012360:	0801c0b4 	.word	0x0801c0b4
 8012364:	20008014 	.word	0x20008014
 8012368:	2000801a 	.word	0x2000801a
 801236c:	20008010 	.word	0x20008010
 8012370:	20008000 	.word	0x20008000
 8012374:	200050cc 	.word	0x200050cc
 8012378:	200050d0 	.word	0x200050d0
 801237c:	200050bc 	.word	0x200050bc
 8012380:	20007fe4 	.word	0x20007fe4
 8012384:	20007fec 	.word	0x20007fec

08012388 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 8012388:	b580      	push	{r7, lr}
 801238a:	b086      	sub	sp, #24
 801238c:	af04      	add	r7, sp, #16
 801238e:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 8012390:	4b2f      	ldr	r3, [pc, #188]	; (8012450 <tcp_timewait_input+0xc8>)
 8012392:	781b      	ldrb	r3, [r3, #0]
 8012394:	f003 0304 	and.w	r3, r3, #4
 8012398:	2b00      	cmp	r3, #0
 801239a:	d153      	bne.n	8012444 <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 801239c:	687b      	ldr	r3, [r7, #4]
 801239e:	2b00      	cmp	r3, #0
 80123a0:	d106      	bne.n	80123b0 <tcp_timewait_input+0x28>
 80123a2:	4b2c      	ldr	r3, [pc, #176]	; (8012454 <tcp_timewait_input+0xcc>)
 80123a4:	f240 22ee 	movw	r2, #750	; 0x2ee
 80123a8:	492b      	ldr	r1, [pc, #172]	; (8012458 <tcp_timewait_input+0xd0>)
 80123aa:	482c      	ldr	r0, [pc, #176]	; (801245c <tcp_timewait_input+0xd4>)
 80123ac:	f006 fb3a 	bl	8018a24 <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 80123b0:	4b27      	ldr	r3, [pc, #156]	; (8012450 <tcp_timewait_input+0xc8>)
 80123b2:	781b      	ldrb	r3, [r3, #0]
 80123b4:	f003 0302 	and.w	r3, r3, #2
 80123b8:	2b00      	cmp	r3, #0
 80123ba:	d02a      	beq.n	8012412 <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 80123bc:	4b28      	ldr	r3, [pc, #160]	; (8012460 <tcp_timewait_input+0xd8>)
 80123be:	681a      	ldr	r2, [r3, #0]
 80123c0:	687b      	ldr	r3, [r7, #4]
 80123c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80123c4:	1ad3      	subs	r3, r2, r3
 80123c6:	2b00      	cmp	r3, #0
 80123c8:	db2d      	blt.n	8012426 <tcp_timewait_input+0x9e>
 80123ca:	4b25      	ldr	r3, [pc, #148]	; (8012460 <tcp_timewait_input+0xd8>)
 80123cc:	681a      	ldr	r2, [r3, #0]
 80123ce:	687b      	ldr	r3, [r7, #4]
 80123d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80123d2:	6879      	ldr	r1, [r7, #4]
 80123d4:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 80123d6:	440b      	add	r3, r1
 80123d8:	1ad3      	subs	r3, r2, r3
 80123da:	2b00      	cmp	r3, #0
 80123dc:	dc23      	bgt.n	8012426 <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80123de:	4b21      	ldr	r3, [pc, #132]	; (8012464 <tcp_timewait_input+0xdc>)
 80123e0:	6819      	ldr	r1, [r3, #0]
 80123e2:	4b21      	ldr	r3, [pc, #132]	; (8012468 <tcp_timewait_input+0xe0>)
 80123e4:	881b      	ldrh	r3, [r3, #0]
 80123e6:	461a      	mov	r2, r3
 80123e8:	4b1d      	ldr	r3, [pc, #116]	; (8012460 <tcp_timewait_input+0xd8>)
 80123ea:	681b      	ldr	r3, [r3, #0]
 80123ec:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80123ee:	4b1f      	ldr	r3, [pc, #124]	; (801246c <tcp_timewait_input+0xe4>)
 80123f0:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80123f2:	885b      	ldrh	r3, [r3, #2]
 80123f4:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80123f6:	4a1d      	ldr	r2, [pc, #116]	; (801246c <tcp_timewait_input+0xe4>)
 80123f8:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80123fa:	8812      	ldrh	r2, [r2, #0]
 80123fc:	b292      	uxth	r2, r2
 80123fe:	9202      	str	r2, [sp, #8]
 8012400:	9301      	str	r3, [sp, #4]
 8012402:	4b1b      	ldr	r3, [pc, #108]	; (8012470 <tcp_timewait_input+0xe8>)
 8012404:	9300      	str	r3, [sp, #0]
 8012406:	4b1b      	ldr	r3, [pc, #108]	; (8012474 <tcp_timewait_input+0xec>)
 8012408:	4602      	mov	r2, r0
 801240a:	6878      	ldr	r0, [r7, #4]
 801240c:	f002 fe72 	bl	80150f4 <tcp_rst>
      return;
 8012410:	e01b      	b.n	801244a <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 8012412:	4b0f      	ldr	r3, [pc, #60]	; (8012450 <tcp_timewait_input+0xc8>)
 8012414:	781b      	ldrb	r3, [r3, #0]
 8012416:	f003 0301 	and.w	r3, r3, #1
 801241a:	2b00      	cmp	r3, #0
 801241c:	d003      	beq.n	8012426 <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 801241e:	4b16      	ldr	r3, [pc, #88]	; (8012478 <tcp_timewait_input+0xf0>)
 8012420:	681a      	ldr	r2, [r3, #0]
 8012422:	687b      	ldr	r3, [r7, #4]
 8012424:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 8012426:	4b10      	ldr	r3, [pc, #64]	; (8012468 <tcp_timewait_input+0xe0>)
 8012428:	881b      	ldrh	r3, [r3, #0]
 801242a:	2b00      	cmp	r3, #0
 801242c:	d00c      	beq.n	8012448 <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 801242e:	687b      	ldr	r3, [r7, #4]
 8012430:	8b5b      	ldrh	r3, [r3, #26]
 8012432:	f043 0302 	orr.w	r3, r3, #2
 8012436:	b29a      	uxth	r2, r3
 8012438:	687b      	ldr	r3, [r7, #4]
 801243a:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 801243c:	6878      	ldr	r0, [r7, #4]
 801243e:	f002 f8a5 	bl	801458c <tcp_output>
  }
  return;
 8012442:	e001      	b.n	8012448 <tcp_timewait_input+0xc0>
    return;
 8012444:	bf00      	nop
 8012446:	e000      	b.n	801244a <tcp_timewait_input+0xc2>
  return;
 8012448:	bf00      	nop
}
 801244a:	3708      	adds	r7, #8
 801244c:	46bd      	mov	sp, r7
 801244e:	bd80      	pop	{r7, pc}
 8012450:	2000801c 	.word	0x2000801c
 8012454:	0801c068 	.word	0x0801c068
 8012458:	0801c280 	.word	0x0801c280
 801245c:	0801c0b4 	.word	0x0801c0b4
 8012460:	20008010 	.word	0x20008010
 8012464:	20008014 	.word	0x20008014
 8012468:	2000801a 	.word	0x2000801a
 801246c:	20008000 	.word	0x20008000
 8012470:	200050cc 	.word	0x200050cc
 8012474:	200050d0 	.word	0x200050d0
 8012478:	20007fd8 	.word	0x20007fd8

0801247c <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 801247c:	b590      	push	{r4, r7, lr}
 801247e:	b08d      	sub	sp, #52	; 0x34
 8012480:	af04      	add	r7, sp, #16
 8012482:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 8012484:	2300      	movs	r3, #0
 8012486:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 8012488:	2300      	movs	r3, #0
 801248a:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 801248c:	687b      	ldr	r3, [r7, #4]
 801248e:	2b00      	cmp	r3, #0
 8012490:	d106      	bne.n	80124a0 <tcp_process+0x24>
 8012492:	4b9d      	ldr	r3, [pc, #628]	; (8012708 <tcp_process+0x28c>)
 8012494:	f44f 7247 	mov.w	r2, #796	; 0x31c
 8012498:	499c      	ldr	r1, [pc, #624]	; (801270c <tcp_process+0x290>)
 801249a:	489d      	ldr	r0, [pc, #628]	; (8012710 <tcp_process+0x294>)
 801249c:	f006 fac2 	bl	8018a24 <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 80124a0:	4b9c      	ldr	r3, [pc, #624]	; (8012714 <tcp_process+0x298>)
 80124a2:	781b      	ldrb	r3, [r3, #0]
 80124a4:	f003 0304 	and.w	r3, r3, #4
 80124a8:	2b00      	cmp	r3, #0
 80124aa:	d04e      	beq.n	801254a <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 80124ac:	687b      	ldr	r3, [r7, #4]
 80124ae:	7d1b      	ldrb	r3, [r3, #20]
 80124b0:	2b02      	cmp	r3, #2
 80124b2:	d108      	bne.n	80124c6 <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 80124b4:	687b      	ldr	r3, [r7, #4]
 80124b6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80124b8:	4b97      	ldr	r3, [pc, #604]	; (8012718 <tcp_process+0x29c>)
 80124ba:	681b      	ldr	r3, [r3, #0]
 80124bc:	429a      	cmp	r2, r3
 80124be:	d123      	bne.n	8012508 <tcp_process+0x8c>
        acceptable = 1;
 80124c0:	2301      	movs	r3, #1
 80124c2:	76fb      	strb	r3, [r7, #27]
 80124c4:	e020      	b.n	8012508 <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 80124c6:	687b      	ldr	r3, [r7, #4]
 80124c8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80124ca:	4b94      	ldr	r3, [pc, #592]	; (801271c <tcp_process+0x2a0>)
 80124cc:	681b      	ldr	r3, [r3, #0]
 80124ce:	429a      	cmp	r2, r3
 80124d0:	d102      	bne.n	80124d8 <tcp_process+0x5c>
        acceptable = 1;
 80124d2:	2301      	movs	r3, #1
 80124d4:	76fb      	strb	r3, [r7, #27]
 80124d6:	e017      	b.n	8012508 <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 80124d8:	4b90      	ldr	r3, [pc, #576]	; (801271c <tcp_process+0x2a0>)
 80124da:	681a      	ldr	r2, [r3, #0]
 80124dc:	687b      	ldr	r3, [r7, #4]
 80124de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80124e0:	1ad3      	subs	r3, r2, r3
 80124e2:	2b00      	cmp	r3, #0
 80124e4:	db10      	blt.n	8012508 <tcp_process+0x8c>
 80124e6:	4b8d      	ldr	r3, [pc, #564]	; (801271c <tcp_process+0x2a0>)
 80124e8:	681a      	ldr	r2, [r3, #0]
 80124ea:	687b      	ldr	r3, [r7, #4]
 80124ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80124ee:	6879      	ldr	r1, [r7, #4]
 80124f0:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 80124f2:	440b      	add	r3, r1
 80124f4:	1ad3      	subs	r3, r2, r3
 80124f6:	2b00      	cmp	r3, #0
 80124f8:	dc06      	bgt.n	8012508 <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 80124fa:	687b      	ldr	r3, [r7, #4]
 80124fc:	8b5b      	ldrh	r3, [r3, #26]
 80124fe:	f043 0302 	orr.w	r3, r3, #2
 8012502:	b29a      	uxth	r2, r3
 8012504:	687b      	ldr	r3, [r7, #4]
 8012506:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 8012508:	7efb      	ldrb	r3, [r7, #27]
 801250a:	2b00      	cmp	r3, #0
 801250c:	d01b      	beq.n	8012546 <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 801250e:	687b      	ldr	r3, [r7, #4]
 8012510:	7d1b      	ldrb	r3, [r3, #20]
 8012512:	2b00      	cmp	r3, #0
 8012514:	d106      	bne.n	8012524 <tcp_process+0xa8>
 8012516:	4b7c      	ldr	r3, [pc, #496]	; (8012708 <tcp_process+0x28c>)
 8012518:	f44f 724e 	mov.w	r2, #824	; 0x338
 801251c:	4980      	ldr	r1, [pc, #512]	; (8012720 <tcp_process+0x2a4>)
 801251e:	487c      	ldr	r0, [pc, #496]	; (8012710 <tcp_process+0x294>)
 8012520:	f006 fa80 	bl	8018a24 <iprintf>
      recv_flags |= TF_RESET;
 8012524:	4b7f      	ldr	r3, [pc, #508]	; (8012724 <tcp_process+0x2a8>)
 8012526:	781b      	ldrb	r3, [r3, #0]
 8012528:	f043 0308 	orr.w	r3, r3, #8
 801252c:	b2da      	uxtb	r2, r3
 801252e:	4b7d      	ldr	r3, [pc, #500]	; (8012724 <tcp_process+0x2a8>)
 8012530:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 8012532:	687b      	ldr	r3, [r7, #4]
 8012534:	8b5b      	ldrh	r3, [r3, #26]
 8012536:	f023 0301 	bic.w	r3, r3, #1
 801253a:	b29a      	uxth	r2, r3
 801253c:	687b      	ldr	r3, [r7, #4]
 801253e:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 8012540:	f06f 030d 	mvn.w	r3, #13
 8012544:	e37a      	b.n	8012c3c <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 8012546:	2300      	movs	r3, #0
 8012548:	e378      	b.n	8012c3c <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 801254a:	4b72      	ldr	r3, [pc, #456]	; (8012714 <tcp_process+0x298>)
 801254c:	781b      	ldrb	r3, [r3, #0]
 801254e:	f003 0302 	and.w	r3, r3, #2
 8012552:	2b00      	cmp	r3, #0
 8012554:	d010      	beq.n	8012578 <tcp_process+0xfc>
 8012556:	687b      	ldr	r3, [r7, #4]
 8012558:	7d1b      	ldrb	r3, [r3, #20]
 801255a:	2b02      	cmp	r3, #2
 801255c:	d00c      	beq.n	8012578 <tcp_process+0xfc>
 801255e:	687b      	ldr	r3, [r7, #4]
 8012560:	7d1b      	ldrb	r3, [r3, #20]
 8012562:	2b03      	cmp	r3, #3
 8012564:	d008      	beq.n	8012578 <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 8012566:	687b      	ldr	r3, [r7, #4]
 8012568:	8b5b      	ldrh	r3, [r3, #26]
 801256a:	f043 0302 	orr.w	r3, r3, #2
 801256e:	b29a      	uxth	r2, r3
 8012570:	687b      	ldr	r3, [r7, #4]
 8012572:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 8012574:	2300      	movs	r3, #0
 8012576:	e361      	b.n	8012c3c <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 8012578:	687b      	ldr	r3, [r7, #4]
 801257a:	8b5b      	ldrh	r3, [r3, #26]
 801257c:	f003 0310 	and.w	r3, r3, #16
 8012580:	2b00      	cmp	r3, #0
 8012582:	d103      	bne.n	801258c <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 8012584:	4b68      	ldr	r3, [pc, #416]	; (8012728 <tcp_process+0x2ac>)
 8012586:	681a      	ldr	r2, [r3, #0]
 8012588:	687b      	ldr	r3, [r7, #4]
 801258a:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 801258c:	687b      	ldr	r3, [r7, #4]
 801258e:	2200      	movs	r2, #0
 8012590:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
  pcb->persist_probe = 0;
 8012594:	687b      	ldr	r3, [r7, #4]
 8012596:	2200      	movs	r2, #0
 8012598:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a

  tcp_parseopt(pcb);
 801259c:	6878      	ldr	r0, [r7, #4]
 801259e:	f001 fc2f 	bl	8013e00 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 80125a2:	687b      	ldr	r3, [r7, #4]
 80125a4:	7d1b      	ldrb	r3, [r3, #20]
 80125a6:	3b02      	subs	r3, #2
 80125a8:	2b07      	cmp	r3, #7
 80125aa:	f200 8337 	bhi.w	8012c1c <tcp_process+0x7a0>
 80125ae:	a201      	add	r2, pc, #4	; (adr r2, 80125b4 <tcp_process+0x138>)
 80125b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80125b4:	080125d5 	.word	0x080125d5
 80125b8:	08012805 	.word	0x08012805
 80125bc:	0801297d 	.word	0x0801297d
 80125c0:	080129a7 	.word	0x080129a7
 80125c4:	08012acb 	.word	0x08012acb
 80125c8:	0801297d 	.word	0x0801297d
 80125cc:	08012b57 	.word	0x08012b57
 80125d0:	08012be7 	.word	0x08012be7
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 80125d4:	4b4f      	ldr	r3, [pc, #316]	; (8012714 <tcp_process+0x298>)
 80125d6:	781b      	ldrb	r3, [r3, #0]
 80125d8:	f003 0310 	and.w	r3, r3, #16
 80125dc:	2b00      	cmp	r3, #0
 80125de:	f000 80e4 	beq.w	80127aa <tcp_process+0x32e>
 80125e2:	4b4c      	ldr	r3, [pc, #304]	; (8012714 <tcp_process+0x298>)
 80125e4:	781b      	ldrb	r3, [r3, #0]
 80125e6:	f003 0302 	and.w	r3, r3, #2
 80125ea:	2b00      	cmp	r3, #0
 80125ec:	f000 80dd 	beq.w	80127aa <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 80125f0:	687b      	ldr	r3, [r7, #4]
 80125f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80125f4:	1c5a      	adds	r2, r3, #1
 80125f6:	4b48      	ldr	r3, [pc, #288]	; (8012718 <tcp_process+0x29c>)
 80125f8:	681b      	ldr	r3, [r3, #0]
 80125fa:	429a      	cmp	r2, r3
 80125fc:	f040 80d5 	bne.w	80127aa <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 8012600:	4b46      	ldr	r3, [pc, #280]	; (801271c <tcp_process+0x2a0>)
 8012602:	681b      	ldr	r3, [r3, #0]
 8012604:	1c5a      	adds	r2, r3, #1
 8012606:	687b      	ldr	r3, [r7, #4]
 8012608:	625a      	str	r2, [r3, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 801260a:	687b      	ldr	r3, [r7, #4]
 801260c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801260e:	687b      	ldr	r3, [r7, #4]
 8012610:	62da      	str	r2, [r3, #44]	; 0x2c
        pcb->lastack = ackno;
 8012612:	4b41      	ldr	r3, [pc, #260]	; (8012718 <tcp_process+0x29c>)
 8012614:	681a      	ldr	r2, [r3, #0]
 8012616:	687b      	ldr	r3, [r7, #4]
 8012618:	645a      	str	r2, [r3, #68]	; 0x44
        pcb->snd_wnd = tcphdr->wnd;
 801261a:	4b44      	ldr	r3, [pc, #272]	; (801272c <tcp_process+0x2b0>)
 801261c:	681b      	ldr	r3, [r3, #0]
 801261e:	89db      	ldrh	r3, [r3, #14]
 8012620:	b29a      	uxth	r2, r3
 8012622:	687b      	ldr	r3, [r7, #4]
 8012624:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 8012628:	687b      	ldr	r3, [r7, #4]
 801262a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 801262e:	687b      	ldr	r3, [r7, #4]
 8012630:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 8012634:	4b39      	ldr	r3, [pc, #228]	; (801271c <tcp_process+0x2a0>)
 8012636:	681b      	ldr	r3, [r3, #0]
 8012638:	1e5a      	subs	r2, r3, #1
 801263a:	687b      	ldr	r3, [r7, #4]
 801263c:	655a      	str	r2, [r3, #84]	; 0x54
        pcb->state = ESTABLISHED;
 801263e:	687b      	ldr	r3, [r7, #4]
 8012640:	2204      	movs	r2, #4
 8012642:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 8012644:	687b      	ldr	r3, [r7, #4]
 8012646:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 8012648:	687b      	ldr	r3, [r7, #4]
 801264a:	3304      	adds	r3, #4
 801264c:	4618      	mov	r0, r3
 801264e:	f004 fad5 	bl	8016bfc <ip4_route>
 8012652:	4601      	mov	r1, r0
 8012654:	687b      	ldr	r3, [r7, #4]
 8012656:	3304      	adds	r3, #4
 8012658:	461a      	mov	r2, r3
 801265a:	4620      	mov	r0, r4
 801265c:	f7ff f88c 	bl	8011778 <tcp_eff_send_mss_netif>
 8012660:	4603      	mov	r3, r0
 8012662:	461a      	mov	r2, r3
 8012664:	687b      	ldr	r3, [r7, #4]
 8012666:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8012668:	687b      	ldr	r3, [r7, #4]
 801266a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801266c:	009a      	lsls	r2, r3, #2
 801266e:	687b      	ldr	r3, [r7, #4]
 8012670:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8012672:	005b      	lsls	r3, r3, #1
 8012674:	f241 111c 	movw	r1, #4380	; 0x111c
 8012678:	428b      	cmp	r3, r1
 801267a:	bf38      	it	cc
 801267c:	460b      	movcc	r3, r1
 801267e:	429a      	cmp	r2, r3
 8012680:	d204      	bcs.n	801268c <tcp_process+0x210>
 8012682:	687b      	ldr	r3, [r7, #4]
 8012684:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8012686:	009b      	lsls	r3, r3, #2
 8012688:	b29b      	uxth	r3, r3
 801268a:	e00d      	b.n	80126a8 <tcp_process+0x22c>
 801268c:	687b      	ldr	r3, [r7, #4]
 801268e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8012690:	005b      	lsls	r3, r3, #1
 8012692:	f241 121c 	movw	r2, #4380	; 0x111c
 8012696:	4293      	cmp	r3, r2
 8012698:	d904      	bls.n	80126a4 <tcp_process+0x228>
 801269a:	687b      	ldr	r3, [r7, #4]
 801269c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801269e:	005b      	lsls	r3, r3, #1
 80126a0:	b29b      	uxth	r3, r3
 80126a2:	e001      	b.n	80126a8 <tcp_process+0x22c>
 80126a4:	f241 131c 	movw	r3, #4380	; 0x111c
 80126a8:	687a      	ldr	r2, [r7, #4]
 80126aa:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 80126ae:	687b      	ldr	r3, [r7, #4]
 80126b0:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80126b4:	2b00      	cmp	r3, #0
 80126b6:	d106      	bne.n	80126c6 <tcp_process+0x24a>
 80126b8:	4b13      	ldr	r3, [pc, #76]	; (8012708 <tcp_process+0x28c>)
 80126ba:	f44f 725b 	mov.w	r2, #876	; 0x36c
 80126be:	491c      	ldr	r1, [pc, #112]	; (8012730 <tcp_process+0x2b4>)
 80126c0:	4813      	ldr	r0, [pc, #76]	; (8012710 <tcp_process+0x294>)
 80126c2:	f006 f9af 	bl	8018a24 <iprintf>
        --pcb->snd_queuelen;
 80126c6:	687b      	ldr	r3, [r7, #4]
 80126c8:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80126cc:	3b01      	subs	r3, #1
 80126ce:	b29a      	uxth	r2, r3
 80126d0:	687b      	ldr	r3, [r7, #4]
 80126d2:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 80126d6:	687b      	ldr	r3, [r7, #4]
 80126d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80126da:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 80126dc:	69fb      	ldr	r3, [r7, #28]
 80126de:	2b00      	cmp	r3, #0
 80126e0:	d12a      	bne.n	8012738 <tcp_process+0x2bc>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 80126e2:	687b      	ldr	r3, [r7, #4]
 80126e4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80126e6:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 80126e8:	69fb      	ldr	r3, [r7, #28]
 80126ea:	2b00      	cmp	r3, #0
 80126ec:	d106      	bne.n	80126fc <tcp_process+0x280>
 80126ee:	4b06      	ldr	r3, [pc, #24]	; (8012708 <tcp_process+0x28c>)
 80126f0:	f44f 725d 	mov.w	r2, #884	; 0x374
 80126f4:	490f      	ldr	r1, [pc, #60]	; (8012734 <tcp_process+0x2b8>)
 80126f6:	4806      	ldr	r0, [pc, #24]	; (8012710 <tcp_process+0x294>)
 80126f8:	f006 f994 	bl	8018a24 <iprintf>
          pcb->unsent = rseg->next;
 80126fc:	69fb      	ldr	r3, [r7, #28]
 80126fe:	681a      	ldr	r2, [r3, #0]
 8012700:	687b      	ldr	r3, [r7, #4]
 8012702:	66da      	str	r2, [r3, #108]	; 0x6c
 8012704:	e01c      	b.n	8012740 <tcp_process+0x2c4>
 8012706:	bf00      	nop
 8012708:	0801c068 	.word	0x0801c068
 801270c:	0801c2a0 	.word	0x0801c2a0
 8012710:	0801c0b4 	.word	0x0801c0b4
 8012714:	2000801c 	.word	0x2000801c
 8012718:	20008014 	.word	0x20008014
 801271c:	20008010 	.word	0x20008010
 8012720:	0801c2bc 	.word	0x0801c2bc
 8012724:	2000801d 	.word	0x2000801d
 8012728:	20007fd8 	.word	0x20007fd8
 801272c:	20008000 	.word	0x20008000
 8012730:	0801c2dc 	.word	0x0801c2dc
 8012734:	0801c2f4 	.word	0x0801c2f4
        } else {
          pcb->unacked = rseg->next;
 8012738:	69fb      	ldr	r3, [r7, #28]
 801273a:	681a      	ldr	r2, [r3, #0]
 801273c:	687b      	ldr	r3, [r7, #4]
 801273e:	671a      	str	r2, [r3, #112]	; 0x70
        }
        tcp_seg_free(rseg);
 8012740:	69f8      	ldr	r0, [r7, #28]
 8012742:	f7fe fd22 	bl	801118a <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 8012746:	687b      	ldr	r3, [r7, #4]
 8012748:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801274a:	2b00      	cmp	r3, #0
 801274c:	d104      	bne.n	8012758 <tcp_process+0x2dc>
          pcb->rtime = -1;
 801274e:	687b      	ldr	r3, [r7, #4]
 8012750:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8012754:	861a      	strh	r2, [r3, #48]	; 0x30
 8012756:	e006      	b.n	8012766 <tcp_process+0x2ea>
        } else {
          pcb->rtime = 0;
 8012758:	687b      	ldr	r3, [r7, #4]
 801275a:	2200      	movs	r2, #0
 801275c:	861a      	strh	r2, [r3, #48]	; 0x30
          pcb->nrtx = 0;
 801275e:	687b      	ldr	r3, [r7, #4]
 8012760:	2200      	movs	r2, #0
 8012762:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 8012766:	687b      	ldr	r3, [r7, #4]
 8012768:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801276c:	2b00      	cmp	r3, #0
 801276e:	d00a      	beq.n	8012786 <tcp_process+0x30a>
 8012770:	687b      	ldr	r3, [r7, #4]
 8012772:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8012776:	687a      	ldr	r2, [r7, #4]
 8012778:	6910      	ldr	r0, [r2, #16]
 801277a:	2200      	movs	r2, #0
 801277c:	6879      	ldr	r1, [r7, #4]
 801277e:	4798      	blx	r3
 8012780:	4603      	mov	r3, r0
 8012782:	76bb      	strb	r3, [r7, #26]
 8012784:	e001      	b.n	801278a <tcp_process+0x30e>
 8012786:	2300      	movs	r3, #0
 8012788:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 801278a:	f997 301a 	ldrsb.w	r3, [r7, #26]
 801278e:	f113 0f0d 	cmn.w	r3, #13
 8012792:	d102      	bne.n	801279a <tcp_process+0x31e>
          return ERR_ABRT;
 8012794:	f06f 030c 	mvn.w	r3, #12
 8012798:	e250      	b.n	8012c3c <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 801279a:	687b      	ldr	r3, [r7, #4]
 801279c:	8b5b      	ldrh	r3, [r3, #26]
 801279e:	f043 0302 	orr.w	r3, r3, #2
 80127a2:	b29a      	uxth	r2, r3
 80127a4:	687b      	ldr	r3, [r7, #4]
 80127a6:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 80127a8:	e23a      	b.n	8012c20 <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 80127aa:	4b98      	ldr	r3, [pc, #608]	; (8012a0c <tcp_process+0x590>)
 80127ac:	781b      	ldrb	r3, [r3, #0]
 80127ae:	f003 0310 	and.w	r3, r3, #16
 80127b2:	2b00      	cmp	r3, #0
 80127b4:	f000 8234 	beq.w	8012c20 <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80127b8:	4b95      	ldr	r3, [pc, #596]	; (8012a10 <tcp_process+0x594>)
 80127ba:	6819      	ldr	r1, [r3, #0]
 80127bc:	4b95      	ldr	r3, [pc, #596]	; (8012a14 <tcp_process+0x598>)
 80127be:	881b      	ldrh	r3, [r3, #0]
 80127c0:	461a      	mov	r2, r3
 80127c2:	4b95      	ldr	r3, [pc, #596]	; (8012a18 <tcp_process+0x59c>)
 80127c4:	681b      	ldr	r3, [r3, #0]
 80127c6:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80127c8:	4b94      	ldr	r3, [pc, #592]	; (8012a1c <tcp_process+0x5a0>)
 80127ca:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80127cc:	885b      	ldrh	r3, [r3, #2]
 80127ce:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80127d0:	4a92      	ldr	r2, [pc, #584]	; (8012a1c <tcp_process+0x5a0>)
 80127d2:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80127d4:	8812      	ldrh	r2, [r2, #0]
 80127d6:	b292      	uxth	r2, r2
 80127d8:	9202      	str	r2, [sp, #8]
 80127da:	9301      	str	r3, [sp, #4]
 80127dc:	4b90      	ldr	r3, [pc, #576]	; (8012a20 <tcp_process+0x5a4>)
 80127de:	9300      	str	r3, [sp, #0]
 80127e0:	4b90      	ldr	r3, [pc, #576]	; (8012a24 <tcp_process+0x5a8>)
 80127e2:	4602      	mov	r2, r0
 80127e4:	6878      	ldr	r0, [r7, #4]
 80127e6:	f002 fc85 	bl	80150f4 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 80127ea:	687b      	ldr	r3, [r7, #4]
 80127ec:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80127f0:	2b05      	cmp	r3, #5
 80127f2:	f200 8215 	bhi.w	8012c20 <tcp_process+0x7a4>
          pcb->rtime = 0;
 80127f6:	687b      	ldr	r3, [r7, #4]
 80127f8:	2200      	movs	r2, #0
 80127fa:	861a      	strh	r2, [r3, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 80127fc:	6878      	ldr	r0, [r7, #4]
 80127fe:	f002 fa51 	bl	8014ca4 <tcp_rexmit_rto>
      break;
 8012802:	e20d      	b.n	8012c20 <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 8012804:	4b81      	ldr	r3, [pc, #516]	; (8012a0c <tcp_process+0x590>)
 8012806:	781b      	ldrb	r3, [r3, #0]
 8012808:	f003 0310 	and.w	r3, r3, #16
 801280c:	2b00      	cmp	r3, #0
 801280e:	f000 80a1 	beq.w	8012954 <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8012812:	4b7f      	ldr	r3, [pc, #508]	; (8012a10 <tcp_process+0x594>)
 8012814:	681a      	ldr	r2, [r3, #0]
 8012816:	687b      	ldr	r3, [r7, #4]
 8012818:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801281a:	1ad3      	subs	r3, r2, r3
 801281c:	3b01      	subs	r3, #1
 801281e:	2b00      	cmp	r3, #0
 8012820:	db7e      	blt.n	8012920 <tcp_process+0x4a4>
 8012822:	4b7b      	ldr	r3, [pc, #492]	; (8012a10 <tcp_process+0x594>)
 8012824:	681a      	ldr	r2, [r3, #0]
 8012826:	687b      	ldr	r3, [r7, #4]
 8012828:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801282a:	1ad3      	subs	r3, r2, r3
 801282c:	2b00      	cmp	r3, #0
 801282e:	dc77      	bgt.n	8012920 <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 8012830:	687b      	ldr	r3, [r7, #4]
 8012832:	2204      	movs	r2, #4
 8012834:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 8012836:	687b      	ldr	r3, [r7, #4]
 8012838:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801283a:	2b00      	cmp	r3, #0
 801283c:	d102      	bne.n	8012844 <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 801283e:	23fa      	movs	r3, #250	; 0xfa
 8012840:	76bb      	strb	r3, [r7, #26]
 8012842:	e01d      	b.n	8012880 <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 8012844:	687b      	ldr	r3, [r7, #4]
 8012846:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8012848:	699b      	ldr	r3, [r3, #24]
 801284a:	2b00      	cmp	r3, #0
 801284c:	d106      	bne.n	801285c <tcp_process+0x3e0>
 801284e:	4b76      	ldr	r3, [pc, #472]	; (8012a28 <tcp_process+0x5ac>)
 8012850:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 8012854:	4975      	ldr	r1, [pc, #468]	; (8012a2c <tcp_process+0x5b0>)
 8012856:	4876      	ldr	r0, [pc, #472]	; (8012a30 <tcp_process+0x5b4>)
 8012858:	f006 f8e4 	bl	8018a24 <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 801285c:	687b      	ldr	r3, [r7, #4]
 801285e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8012860:	699b      	ldr	r3, [r3, #24]
 8012862:	2b00      	cmp	r3, #0
 8012864:	d00a      	beq.n	801287c <tcp_process+0x400>
 8012866:	687b      	ldr	r3, [r7, #4]
 8012868:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801286a:	699b      	ldr	r3, [r3, #24]
 801286c:	687a      	ldr	r2, [r7, #4]
 801286e:	6910      	ldr	r0, [r2, #16]
 8012870:	2200      	movs	r2, #0
 8012872:	6879      	ldr	r1, [r7, #4]
 8012874:	4798      	blx	r3
 8012876:	4603      	mov	r3, r0
 8012878:	76bb      	strb	r3, [r7, #26]
 801287a:	e001      	b.n	8012880 <tcp_process+0x404>
 801287c:	23f0      	movs	r3, #240	; 0xf0
 801287e:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 8012880:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8012884:	2b00      	cmp	r3, #0
 8012886:	d00a      	beq.n	801289e <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 8012888:	f997 301a 	ldrsb.w	r3, [r7, #26]
 801288c:	f113 0f0d 	cmn.w	r3, #13
 8012890:	d002      	beq.n	8012898 <tcp_process+0x41c>
              tcp_abort(pcb);
 8012892:	6878      	ldr	r0, [r7, #4]
 8012894:	f7fd ff8e 	bl	80107b4 <tcp_abort>
            }
            return ERR_ABRT;
 8012898:	f06f 030c 	mvn.w	r3, #12
 801289c:	e1ce      	b.n	8012c3c <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 801289e:	6878      	ldr	r0, [r7, #4]
 80128a0:	f000 fae0 	bl	8012e64 <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 80128a4:	4b63      	ldr	r3, [pc, #396]	; (8012a34 <tcp_process+0x5b8>)
 80128a6:	881b      	ldrh	r3, [r3, #0]
 80128a8:	2b00      	cmp	r3, #0
 80128aa:	d005      	beq.n	80128b8 <tcp_process+0x43c>
            recv_acked--;
 80128ac:	4b61      	ldr	r3, [pc, #388]	; (8012a34 <tcp_process+0x5b8>)
 80128ae:	881b      	ldrh	r3, [r3, #0]
 80128b0:	3b01      	subs	r3, #1
 80128b2:	b29a      	uxth	r2, r3
 80128b4:	4b5f      	ldr	r3, [pc, #380]	; (8012a34 <tcp_process+0x5b8>)
 80128b6:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 80128b8:	687b      	ldr	r3, [r7, #4]
 80128ba:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80128bc:	009a      	lsls	r2, r3, #2
 80128be:	687b      	ldr	r3, [r7, #4]
 80128c0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80128c2:	005b      	lsls	r3, r3, #1
 80128c4:	f241 111c 	movw	r1, #4380	; 0x111c
 80128c8:	428b      	cmp	r3, r1
 80128ca:	bf38      	it	cc
 80128cc:	460b      	movcc	r3, r1
 80128ce:	429a      	cmp	r2, r3
 80128d0:	d204      	bcs.n	80128dc <tcp_process+0x460>
 80128d2:	687b      	ldr	r3, [r7, #4]
 80128d4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80128d6:	009b      	lsls	r3, r3, #2
 80128d8:	b29b      	uxth	r3, r3
 80128da:	e00d      	b.n	80128f8 <tcp_process+0x47c>
 80128dc:	687b      	ldr	r3, [r7, #4]
 80128de:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80128e0:	005b      	lsls	r3, r3, #1
 80128e2:	f241 121c 	movw	r2, #4380	; 0x111c
 80128e6:	4293      	cmp	r3, r2
 80128e8:	d904      	bls.n	80128f4 <tcp_process+0x478>
 80128ea:	687b      	ldr	r3, [r7, #4]
 80128ec:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80128ee:	005b      	lsls	r3, r3, #1
 80128f0:	b29b      	uxth	r3, r3
 80128f2:	e001      	b.n	80128f8 <tcp_process+0x47c>
 80128f4:	f241 131c 	movw	r3, #4380	; 0x111c
 80128f8:	687a      	ldr	r2, [r7, #4]
 80128fa:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 80128fe:	4b4e      	ldr	r3, [pc, #312]	; (8012a38 <tcp_process+0x5bc>)
 8012900:	781b      	ldrb	r3, [r3, #0]
 8012902:	f003 0320 	and.w	r3, r3, #32
 8012906:	2b00      	cmp	r3, #0
 8012908:	d037      	beq.n	801297a <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 801290a:	687b      	ldr	r3, [r7, #4]
 801290c:	8b5b      	ldrh	r3, [r3, #26]
 801290e:	f043 0302 	orr.w	r3, r3, #2
 8012912:	b29a      	uxth	r2, r3
 8012914:	687b      	ldr	r3, [r7, #4]
 8012916:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 8012918:	687b      	ldr	r3, [r7, #4]
 801291a:	2207      	movs	r2, #7
 801291c:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 801291e:	e02c      	b.n	801297a <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8012920:	4b3b      	ldr	r3, [pc, #236]	; (8012a10 <tcp_process+0x594>)
 8012922:	6819      	ldr	r1, [r3, #0]
 8012924:	4b3b      	ldr	r3, [pc, #236]	; (8012a14 <tcp_process+0x598>)
 8012926:	881b      	ldrh	r3, [r3, #0]
 8012928:	461a      	mov	r2, r3
 801292a:	4b3b      	ldr	r3, [pc, #236]	; (8012a18 <tcp_process+0x59c>)
 801292c:	681b      	ldr	r3, [r3, #0]
 801292e:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8012930:	4b3a      	ldr	r3, [pc, #232]	; (8012a1c <tcp_process+0x5a0>)
 8012932:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8012934:	885b      	ldrh	r3, [r3, #2]
 8012936:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8012938:	4a38      	ldr	r2, [pc, #224]	; (8012a1c <tcp_process+0x5a0>)
 801293a:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801293c:	8812      	ldrh	r2, [r2, #0]
 801293e:	b292      	uxth	r2, r2
 8012940:	9202      	str	r2, [sp, #8]
 8012942:	9301      	str	r3, [sp, #4]
 8012944:	4b36      	ldr	r3, [pc, #216]	; (8012a20 <tcp_process+0x5a4>)
 8012946:	9300      	str	r3, [sp, #0]
 8012948:	4b36      	ldr	r3, [pc, #216]	; (8012a24 <tcp_process+0x5a8>)
 801294a:	4602      	mov	r2, r0
 801294c:	6878      	ldr	r0, [r7, #4]
 801294e:	f002 fbd1 	bl	80150f4 <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 8012952:	e167      	b.n	8012c24 <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 8012954:	4b2d      	ldr	r3, [pc, #180]	; (8012a0c <tcp_process+0x590>)
 8012956:	781b      	ldrb	r3, [r3, #0]
 8012958:	f003 0302 	and.w	r3, r3, #2
 801295c:	2b00      	cmp	r3, #0
 801295e:	f000 8161 	beq.w	8012c24 <tcp_process+0x7a8>
 8012962:	687b      	ldr	r3, [r7, #4]
 8012964:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012966:	1e5a      	subs	r2, r3, #1
 8012968:	4b2b      	ldr	r3, [pc, #172]	; (8012a18 <tcp_process+0x59c>)
 801296a:	681b      	ldr	r3, [r3, #0]
 801296c:	429a      	cmp	r2, r3
 801296e:	f040 8159 	bne.w	8012c24 <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 8012972:	6878      	ldr	r0, [r7, #4]
 8012974:	f002 f9b8 	bl	8014ce8 <tcp_rexmit>
      break;
 8012978:	e154      	b.n	8012c24 <tcp_process+0x7a8>
 801297a:	e153      	b.n	8012c24 <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 801297c:	6878      	ldr	r0, [r7, #4]
 801297e:	f000 fa71 	bl	8012e64 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 8012982:	4b2d      	ldr	r3, [pc, #180]	; (8012a38 <tcp_process+0x5bc>)
 8012984:	781b      	ldrb	r3, [r3, #0]
 8012986:	f003 0320 	and.w	r3, r3, #32
 801298a:	2b00      	cmp	r3, #0
 801298c:	f000 814c 	beq.w	8012c28 <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 8012990:	687b      	ldr	r3, [r7, #4]
 8012992:	8b5b      	ldrh	r3, [r3, #26]
 8012994:	f043 0302 	orr.w	r3, r3, #2
 8012998:	b29a      	uxth	r2, r3
 801299a:	687b      	ldr	r3, [r7, #4]
 801299c:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 801299e:	687b      	ldr	r3, [r7, #4]
 80129a0:	2207      	movs	r2, #7
 80129a2:	751a      	strb	r2, [r3, #20]
      }
      break;
 80129a4:	e140      	b.n	8012c28 <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 80129a6:	6878      	ldr	r0, [r7, #4]
 80129a8:	f000 fa5c 	bl	8012e64 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 80129ac:	4b22      	ldr	r3, [pc, #136]	; (8012a38 <tcp_process+0x5bc>)
 80129ae:	781b      	ldrb	r3, [r3, #0]
 80129b0:	f003 0320 	and.w	r3, r3, #32
 80129b4:	2b00      	cmp	r3, #0
 80129b6:	d071      	beq.n	8012a9c <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 80129b8:	4b14      	ldr	r3, [pc, #80]	; (8012a0c <tcp_process+0x590>)
 80129ba:	781b      	ldrb	r3, [r3, #0]
 80129bc:	f003 0310 	and.w	r3, r3, #16
 80129c0:	2b00      	cmp	r3, #0
 80129c2:	d060      	beq.n	8012a86 <tcp_process+0x60a>
 80129c4:	687b      	ldr	r3, [r7, #4]
 80129c6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80129c8:	4b11      	ldr	r3, [pc, #68]	; (8012a10 <tcp_process+0x594>)
 80129ca:	681b      	ldr	r3, [r3, #0]
 80129cc:	429a      	cmp	r2, r3
 80129ce:	d15a      	bne.n	8012a86 <tcp_process+0x60a>
            pcb->unsent == NULL) {
 80129d0:	687b      	ldr	r3, [r7, #4]
 80129d2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 80129d4:	2b00      	cmp	r3, #0
 80129d6:	d156      	bne.n	8012a86 <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 80129d8:	687b      	ldr	r3, [r7, #4]
 80129da:	8b5b      	ldrh	r3, [r3, #26]
 80129dc:	f043 0302 	orr.w	r3, r3, #2
 80129e0:	b29a      	uxth	r2, r3
 80129e2:	687b      	ldr	r3, [r7, #4]
 80129e4:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 80129e6:	6878      	ldr	r0, [r7, #4]
 80129e8:	f7fe fdbc 	bl	8011564 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 80129ec:	4b13      	ldr	r3, [pc, #76]	; (8012a3c <tcp_process+0x5c0>)
 80129ee:	681b      	ldr	r3, [r3, #0]
 80129f0:	687a      	ldr	r2, [r7, #4]
 80129f2:	429a      	cmp	r2, r3
 80129f4:	d105      	bne.n	8012a02 <tcp_process+0x586>
 80129f6:	4b11      	ldr	r3, [pc, #68]	; (8012a3c <tcp_process+0x5c0>)
 80129f8:	681b      	ldr	r3, [r3, #0]
 80129fa:	68db      	ldr	r3, [r3, #12]
 80129fc:	4a0f      	ldr	r2, [pc, #60]	; (8012a3c <tcp_process+0x5c0>)
 80129fe:	6013      	str	r3, [r2, #0]
 8012a00:	e02e      	b.n	8012a60 <tcp_process+0x5e4>
 8012a02:	4b0e      	ldr	r3, [pc, #56]	; (8012a3c <tcp_process+0x5c0>)
 8012a04:	681b      	ldr	r3, [r3, #0]
 8012a06:	617b      	str	r3, [r7, #20]
 8012a08:	e027      	b.n	8012a5a <tcp_process+0x5de>
 8012a0a:	bf00      	nop
 8012a0c:	2000801c 	.word	0x2000801c
 8012a10:	20008014 	.word	0x20008014
 8012a14:	2000801a 	.word	0x2000801a
 8012a18:	20008010 	.word	0x20008010
 8012a1c:	20008000 	.word	0x20008000
 8012a20:	200050cc 	.word	0x200050cc
 8012a24:	200050d0 	.word	0x200050d0
 8012a28:	0801c068 	.word	0x0801c068
 8012a2c:	0801c308 	.word	0x0801c308
 8012a30:	0801c0b4 	.word	0x0801c0b4
 8012a34:	20008018 	.word	0x20008018
 8012a38:	2000801d 	.word	0x2000801d
 8012a3c:	20007fe4 	.word	0x20007fe4
 8012a40:	697b      	ldr	r3, [r7, #20]
 8012a42:	68db      	ldr	r3, [r3, #12]
 8012a44:	687a      	ldr	r2, [r7, #4]
 8012a46:	429a      	cmp	r2, r3
 8012a48:	d104      	bne.n	8012a54 <tcp_process+0x5d8>
 8012a4a:	687b      	ldr	r3, [r7, #4]
 8012a4c:	68da      	ldr	r2, [r3, #12]
 8012a4e:	697b      	ldr	r3, [r7, #20]
 8012a50:	60da      	str	r2, [r3, #12]
 8012a52:	e005      	b.n	8012a60 <tcp_process+0x5e4>
 8012a54:	697b      	ldr	r3, [r7, #20]
 8012a56:	68db      	ldr	r3, [r3, #12]
 8012a58:	617b      	str	r3, [r7, #20]
 8012a5a:	697b      	ldr	r3, [r7, #20]
 8012a5c:	2b00      	cmp	r3, #0
 8012a5e:	d1ef      	bne.n	8012a40 <tcp_process+0x5c4>
 8012a60:	687b      	ldr	r3, [r7, #4]
 8012a62:	2200      	movs	r2, #0
 8012a64:	60da      	str	r2, [r3, #12]
 8012a66:	4b77      	ldr	r3, [pc, #476]	; (8012c44 <tcp_process+0x7c8>)
 8012a68:	2201      	movs	r2, #1
 8012a6a:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 8012a6c:	687b      	ldr	r3, [r7, #4]
 8012a6e:	220a      	movs	r2, #10
 8012a70:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 8012a72:	4b75      	ldr	r3, [pc, #468]	; (8012c48 <tcp_process+0x7cc>)
 8012a74:	681a      	ldr	r2, [r3, #0]
 8012a76:	687b      	ldr	r3, [r7, #4]
 8012a78:	60da      	str	r2, [r3, #12]
 8012a7a:	4a73      	ldr	r2, [pc, #460]	; (8012c48 <tcp_process+0x7cc>)
 8012a7c:	687b      	ldr	r3, [r7, #4]
 8012a7e:	6013      	str	r3, [r2, #0]
 8012a80:	f002 fcfa 	bl	8015478 <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 8012a84:	e0d2      	b.n	8012c2c <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 8012a86:	687b      	ldr	r3, [r7, #4]
 8012a88:	8b5b      	ldrh	r3, [r3, #26]
 8012a8a:	f043 0302 	orr.w	r3, r3, #2
 8012a8e:	b29a      	uxth	r2, r3
 8012a90:	687b      	ldr	r3, [r7, #4]
 8012a92:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 8012a94:	687b      	ldr	r3, [r7, #4]
 8012a96:	2208      	movs	r2, #8
 8012a98:	751a      	strb	r2, [r3, #20]
      break;
 8012a9a:	e0c7      	b.n	8012c2c <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8012a9c:	4b6b      	ldr	r3, [pc, #428]	; (8012c4c <tcp_process+0x7d0>)
 8012a9e:	781b      	ldrb	r3, [r3, #0]
 8012aa0:	f003 0310 	and.w	r3, r3, #16
 8012aa4:	2b00      	cmp	r3, #0
 8012aa6:	f000 80c1 	beq.w	8012c2c <tcp_process+0x7b0>
 8012aaa:	687b      	ldr	r3, [r7, #4]
 8012aac:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8012aae:	4b68      	ldr	r3, [pc, #416]	; (8012c50 <tcp_process+0x7d4>)
 8012ab0:	681b      	ldr	r3, [r3, #0]
 8012ab2:	429a      	cmp	r2, r3
 8012ab4:	f040 80ba 	bne.w	8012c2c <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 8012ab8:	687b      	ldr	r3, [r7, #4]
 8012aba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8012abc:	2b00      	cmp	r3, #0
 8012abe:	f040 80b5 	bne.w	8012c2c <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 8012ac2:	687b      	ldr	r3, [r7, #4]
 8012ac4:	2206      	movs	r2, #6
 8012ac6:	751a      	strb	r2, [r3, #20]
      break;
 8012ac8:	e0b0      	b.n	8012c2c <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 8012aca:	6878      	ldr	r0, [r7, #4]
 8012acc:	f000 f9ca 	bl	8012e64 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8012ad0:	4b60      	ldr	r3, [pc, #384]	; (8012c54 <tcp_process+0x7d8>)
 8012ad2:	781b      	ldrb	r3, [r3, #0]
 8012ad4:	f003 0320 	and.w	r3, r3, #32
 8012ad8:	2b00      	cmp	r3, #0
 8012ada:	f000 80a9 	beq.w	8012c30 <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 8012ade:	687b      	ldr	r3, [r7, #4]
 8012ae0:	8b5b      	ldrh	r3, [r3, #26]
 8012ae2:	f043 0302 	orr.w	r3, r3, #2
 8012ae6:	b29a      	uxth	r2, r3
 8012ae8:	687b      	ldr	r3, [r7, #4]
 8012aea:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 8012aec:	6878      	ldr	r0, [r7, #4]
 8012aee:	f7fe fd39 	bl	8011564 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8012af2:	4b59      	ldr	r3, [pc, #356]	; (8012c58 <tcp_process+0x7dc>)
 8012af4:	681b      	ldr	r3, [r3, #0]
 8012af6:	687a      	ldr	r2, [r7, #4]
 8012af8:	429a      	cmp	r2, r3
 8012afa:	d105      	bne.n	8012b08 <tcp_process+0x68c>
 8012afc:	4b56      	ldr	r3, [pc, #344]	; (8012c58 <tcp_process+0x7dc>)
 8012afe:	681b      	ldr	r3, [r3, #0]
 8012b00:	68db      	ldr	r3, [r3, #12]
 8012b02:	4a55      	ldr	r2, [pc, #340]	; (8012c58 <tcp_process+0x7dc>)
 8012b04:	6013      	str	r3, [r2, #0]
 8012b06:	e013      	b.n	8012b30 <tcp_process+0x6b4>
 8012b08:	4b53      	ldr	r3, [pc, #332]	; (8012c58 <tcp_process+0x7dc>)
 8012b0a:	681b      	ldr	r3, [r3, #0]
 8012b0c:	613b      	str	r3, [r7, #16]
 8012b0e:	e00c      	b.n	8012b2a <tcp_process+0x6ae>
 8012b10:	693b      	ldr	r3, [r7, #16]
 8012b12:	68db      	ldr	r3, [r3, #12]
 8012b14:	687a      	ldr	r2, [r7, #4]
 8012b16:	429a      	cmp	r2, r3
 8012b18:	d104      	bne.n	8012b24 <tcp_process+0x6a8>
 8012b1a:	687b      	ldr	r3, [r7, #4]
 8012b1c:	68da      	ldr	r2, [r3, #12]
 8012b1e:	693b      	ldr	r3, [r7, #16]
 8012b20:	60da      	str	r2, [r3, #12]
 8012b22:	e005      	b.n	8012b30 <tcp_process+0x6b4>
 8012b24:	693b      	ldr	r3, [r7, #16]
 8012b26:	68db      	ldr	r3, [r3, #12]
 8012b28:	613b      	str	r3, [r7, #16]
 8012b2a:	693b      	ldr	r3, [r7, #16]
 8012b2c:	2b00      	cmp	r3, #0
 8012b2e:	d1ef      	bne.n	8012b10 <tcp_process+0x694>
 8012b30:	687b      	ldr	r3, [r7, #4]
 8012b32:	2200      	movs	r2, #0
 8012b34:	60da      	str	r2, [r3, #12]
 8012b36:	4b43      	ldr	r3, [pc, #268]	; (8012c44 <tcp_process+0x7c8>)
 8012b38:	2201      	movs	r2, #1
 8012b3a:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8012b3c:	687b      	ldr	r3, [r7, #4]
 8012b3e:	220a      	movs	r2, #10
 8012b40:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8012b42:	4b41      	ldr	r3, [pc, #260]	; (8012c48 <tcp_process+0x7cc>)
 8012b44:	681a      	ldr	r2, [r3, #0]
 8012b46:	687b      	ldr	r3, [r7, #4]
 8012b48:	60da      	str	r2, [r3, #12]
 8012b4a:	4a3f      	ldr	r2, [pc, #252]	; (8012c48 <tcp_process+0x7cc>)
 8012b4c:	687b      	ldr	r3, [r7, #4]
 8012b4e:	6013      	str	r3, [r2, #0]
 8012b50:	f002 fc92 	bl	8015478 <tcp_timer_needed>
      }
      break;
 8012b54:	e06c      	b.n	8012c30 <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 8012b56:	6878      	ldr	r0, [r7, #4]
 8012b58:	f000 f984 	bl	8012e64 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8012b5c:	4b3b      	ldr	r3, [pc, #236]	; (8012c4c <tcp_process+0x7d0>)
 8012b5e:	781b      	ldrb	r3, [r3, #0]
 8012b60:	f003 0310 	and.w	r3, r3, #16
 8012b64:	2b00      	cmp	r3, #0
 8012b66:	d065      	beq.n	8012c34 <tcp_process+0x7b8>
 8012b68:	687b      	ldr	r3, [r7, #4]
 8012b6a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8012b6c:	4b38      	ldr	r3, [pc, #224]	; (8012c50 <tcp_process+0x7d4>)
 8012b6e:	681b      	ldr	r3, [r3, #0]
 8012b70:	429a      	cmp	r2, r3
 8012b72:	d15f      	bne.n	8012c34 <tcp_process+0x7b8>
 8012b74:	687b      	ldr	r3, [r7, #4]
 8012b76:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012b78:	2b00      	cmp	r3, #0
 8012b7a:	d15b      	bne.n	8012c34 <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 8012b7c:	6878      	ldr	r0, [r7, #4]
 8012b7e:	f7fe fcf1 	bl	8011564 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8012b82:	4b35      	ldr	r3, [pc, #212]	; (8012c58 <tcp_process+0x7dc>)
 8012b84:	681b      	ldr	r3, [r3, #0]
 8012b86:	687a      	ldr	r2, [r7, #4]
 8012b88:	429a      	cmp	r2, r3
 8012b8a:	d105      	bne.n	8012b98 <tcp_process+0x71c>
 8012b8c:	4b32      	ldr	r3, [pc, #200]	; (8012c58 <tcp_process+0x7dc>)
 8012b8e:	681b      	ldr	r3, [r3, #0]
 8012b90:	68db      	ldr	r3, [r3, #12]
 8012b92:	4a31      	ldr	r2, [pc, #196]	; (8012c58 <tcp_process+0x7dc>)
 8012b94:	6013      	str	r3, [r2, #0]
 8012b96:	e013      	b.n	8012bc0 <tcp_process+0x744>
 8012b98:	4b2f      	ldr	r3, [pc, #188]	; (8012c58 <tcp_process+0x7dc>)
 8012b9a:	681b      	ldr	r3, [r3, #0]
 8012b9c:	60fb      	str	r3, [r7, #12]
 8012b9e:	e00c      	b.n	8012bba <tcp_process+0x73e>
 8012ba0:	68fb      	ldr	r3, [r7, #12]
 8012ba2:	68db      	ldr	r3, [r3, #12]
 8012ba4:	687a      	ldr	r2, [r7, #4]
 8012ba6:	429a      	cmp	r2, r3
 8012ba8:	d104      	bne.n	8012bb4 <tcp_process+0x738>
 8012baa:	687b      	ldr	r3, [r7, #4]
 8012bac:	68da      	ldr	r2, [r3, #12]
 8012bae:	68fb      	ldr	r3, [r7, #12]
 8012bb0:	60da      	str	r2, [r3, #12]
 8012bb2:	e005      	b.n	8012bc0 <tcp_process+0x744>
 8012bb4:	68fb      	ldr	r3, [r7, #12]
 8012bb6:	68db      	ldr	r3, [r3, #12]
 8012bb8:	60fb      	str	r3, [r7, #12]
 8012bba:	68fb      	ldr	r3, [r7, #12]
 8012bbc:	2b00      	cmp	r3, #0
 8012bbe:	d1ef      	bne.n	8012ba0 <tcp_process+0x724>
 8012bc0:	687b      	ldr	r3, [r7, #4]
 8012bc2:	2200      	movs	r2, #0
 8012bc4:	60da      	str	r2, [r3, #12]
 8012bc6:	4b1f      	ldr	r3, [pc, #124]	; (8012c44 <tcp_process+0x7c8>)
 8012bc8:	2201      	movs	r2, #1
 8012bca:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8012bcc:	687b      	ldr	r3, [r7, #4]
 8012bce:	220a      	movs	r2, #10
 8012bd0:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8012bd2:	4b1d      	ldr	r3, [pc, #116]	; (8012c48 <tcp_process+0x7cc>)
 8012bd4:	681a      	ldr	r2, [r3, #0]
 8012bd6:	687b      	ldr	r3, [r7, #4]
 8012bd8:	60da      	str	r2, [r3, #12]
 8012bda:	4a1b      	ldr	r2, [pc, #108]	; (8012c48 <tcp_process+0x7cc>)
 8012bdc:	687b      	ldr	r3, [r7, #4]
 8012bde:	6013      	str	r3, [r2, #0]
 8012be0:	f002 fc4a 	bl	8015478 <tcp_timer_needed>
      }
      break;
 8012be4:	e026      	b.n	8012c34 <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 8012be6:	6878      	ldr	r0, [r7, #4]
 8012be8:	f000 f93c 	bl	8012e64 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8012bec:	4b17      	ldr	r3, [pc, #92]	; (8012c4c <tcp_process+0x7d0>)
 8012bee:	781b      	ldrb	r3, [r3, #0]
 8012bf0:	f003 0310 	and.w	r3, r3, #16
 8012bf4:	2b00      	cmp	r3, #0
 8012bf6:	d01f      	beq.n	8012c38 <tcp_process+0x7bc>
 8012bf8:	687b      	ldr	r3, [r7, #4]
 8012bfa:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8012bfc:	4b14      	ldr	r3, [pc, #80]	; (8012c50 <tcp_process+0x7d4>)
 8012bfe:	681b      	ldr	r3, [r3, #0]
 8012c00:	429a      	cmp	r2, r3
 8012c02:	d119      	bne.n	8012c38 <tcp_process+0x7bc>
 8012c04:	687b      	ldr	r3, [r7, #4]
 8012c06:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012c08:	2b00      	cmp	r3, #0
 8012c0a:	d115      	bne.n	8012c38 <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 8012c0c:	4b11      	ldr	r3, [pc, #68]	; (8012c54 <tcp_process+0x7d8>)
 8012c0e:	781b      	ldrb	r3, [r3, #0]
 8012c10:	f043 0310 	orr.w	r3, r3, #16
 8012c14:	b2da      	uxtb	r2, r3
 8012c16:	4b0f      	ldr	r3, [pc, #60]	; (8012c54 <tcp_process+0x7d8>)
 8012c18:	701a      	strb	r2, [r3, #0]
      }
      break;
 8012c1a:	e00d      	b.n	8012c38 <tcp_process+0x7bc>
    default:
      break;
 8012c1c:	bf00      	nop
 8012c1e:	e00c      	b.n	8012c3a <tcp_process+0x7be>
      break;
 8012c20:	bf00      	nop
 8012c22:	e00a      	b.n	8012c3a <tcp_process+0x7be>
      break;
 8012c24:	bf00      	nop
 8012c26:	e008      	b.n	8012c3a <tcp_process+0x7be>
      break;
 8012c28:	bf00      	nop
 8012c2a:	e006      	b.n	8012c3a <tcp_process+0x7be>
      break;
 8012c2c:	bf00      	nop
 8012c2e:	e004      	b.n	8012c3a <tcp_process+0x7be>
      break;
 8012c30:	bf00      	nop
 8012c32:	e002      	b.n	8012c3a <tcp_process+0x7be>
      break;
 8012c34:	bf00      	nop
 8012c36:	e000      	b.n	8012c3a <tcp_process+0x7be>
      break;
 8012c38:	bf00      	nop
  }
  return ERR_OK;
 8012c3a:	2300      	movs	r3, #0
}
 8012c3c:	4618      	mov	r0, r3
 8012c3e:	3724      	adds	r7, #36	; 0x24
 8012c40:	46bd      	mov	sp, r7
 8012c42:	bd90      	pop	{r4, r7, pc}
 8012c44:	20007fec 	.word	0x20007fec
 8012c48:	20007fe8 	.word	0x20007fe8
 8012c4c:	2000801c 	.word	0x2000801c
 8012c50:	20008014 	.word	0x20008014
 8012c54:	2000801d 	.word	0x2000801d
 8012c58:	20007fe4 	.word	0x20007fe4

08012c5c <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 8012c5c:	b590      	push	{r4, r7, lr}
 8012c5e:	b085      	sub	sp, #20
 8012c60:	af00      	add	r7, sp, #0
 8012c62:	6078      	str	r0, [r7, #4]
 8012c64:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 8012c66:	687b      	ldr	r3, [r7, #4]
 8012c68:	2b00      	cmp	r3, #0
 8012c6a:	d106      	bne.n	8012c7a <tcp_oos_insert_segment+0x1e>
 8012c6c:	4b3b      	ldr	r3, [pc, #236]	; (8012d5c <tcp_oos_insert_segment+0x100>)
 8012c6e:	f240 421f 	movw	r2, #1055	; 0x41f
 8012c72:	493b      	ldr	r1, [pc, #236]	; (8012d60 <tcp_oos_insert_segment+0x104>)
 8012c74:	483b      	ldr	r0, [pc, #236]	; (8012d64 <tcp_oos_insert_segment+0x108>)
 8012c76:	f005 fed5 	bl	8018a24 <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8012c7a:	687b      	ldr	r3, [r7, #4]
 8012c7c:	68db      	ldr	r3, [r3, #12]
 8012c7e:	899b      	ldrh	r3, [r3, #12]
 8012c80:	b29b      	uxth	r3, r3
 8012c82:	4618      	mov	r0, r3
 8012c84:	f7fb fc18 	bl	800e4b8 <lwip_htons>
 8012c88:	4603      	mov	r3, r0
 8012c8a:	b2db      	uxtb	r3, r3
 8012c8c:	f003 0301 	and.w	r3, r3, #1
 8012c90:	2b00      	cmp	r3, #0
 8012c92:	d028      	beq.n	8012ce6 <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 8012c94:	6838      	ldr	r0, [r7, #0]
 8012c96:	f7fe fa63 	bl	8011160 <tcp_segs_free>
    next = NULL;
 8012c9a:	2300      	movs	r3, #0
 8012c9c:	603b      	str	r3, [r7, #0]
 8012c9e:	e056      	b.n	8012d4e <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8012ca0:	683b      	ldr	r3, [r7, #0]
 8012ca2:	68db      	ldr	r3, [r3, #12]
 8012ca4:	899b      	ldrh	r3, [r3, #12]
 8012ca6:	b29b      	uxth	r3, r3
 8012ca8:	4618      	mov	r0, r3
 8012caa:	f7fb fc05 	bl	800e4b8 <lwip_htons>
 8012cae:	4603      	mov	r3, r0
 8012cb0:	b2db      	uxtb	r3, r3
 8012cb2:	f003 0301 	and.w	r3, r3, #1
 8012cb6:	2b00      	cmp	r3, #0
 8012cb8:	d00d      	beq.n	8012cd6 <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 8012cba:	687b      	ldr	r3, [r7, #4]
 8012cbc:	68db      	ldr	r3, [r3, #12]
 8012cbe:	899b      	ldrh	r3, [r3, #12]
 8012cc0:	b29c      	uxth	r4, r3
 8012cc2:	2001      	movs	r0, #1
 8012cc4:	f7fb fbf8 	bl	800e4b8 <lwip_htons>
 8012cc8:	4603      	mov	r3, r0
 8012cca:	461a      	mov	r2, r3
 8012ccc:	687b      	ldr	r3, [r7, #4]
 8012cce:	68db      	ldr	r3, [r3, #12]
 8012cd0:	4322      	orrs	r2, r4
 8012cd2:	b292      	uxth	r2, r2
 8012cd4:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 8012cd6:	683b      	ldr	r3, [r7, #0]
 8012cd8:	60fb      	str	r3, [r7, #12]
      next = next->next;
 8012cda:	683b      	ldr	r3, [r7, #0]
 8012cdc:	681b      	ldr	r3, [r3, #0]
 8012cde:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 8012ce0:	68f8      	ldr	r0, [r7, #12]
 8012ce2:	f7fe fa52 	bl	801118a <tcp_seg_free>
    while (next &&
 8012ce6:	683b      	ldr	r3, [r7, #0]
 8012ce8:	2b00      	cmp	r3, #0
 8012cea:	d00e      	beq.n	8012d0a <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 8012cec:	687b      	ldr	r3, [r7, #4]
 8012cee:	891b      	ldrh	r3, [r3, #8]
 8012cf0:	461a      	mov	r2, r3
 8012cf2:	4b1d      	ldr	r3, [pc, #116]	; (8012d68 <tcp_oos_insert_segment+0x10c>)
 8012cf4:	681b      	ldr	r3, [r3, #0]
 8012cf6:	441a      	add	r2, r3
 8012cf8:	683b      	ldr	r3, [r7, #0]
 8012cfa:	68db      	ldr	r3, [r3, #12]
 8012cfc:	685b      	ldr	r3, [r3, #4]
 8012cfe:	6839      	ldr	r1, [r7, #0]
 8012d00:	8909      	ldrh	r1, [r1, #8]
 8012d02:	440b      	add	r3, r1
 8012d04:	1ad3      	subs	r3, r2, r3
    while (next &&
 8012d06:	2b00      	cmp	r3, #0
 8012d08:	daca      	bge.n	8012ca0 <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 8012d0a:	683b      	ldr	r3, [r7, #0]
 8012d0c:	2b00      	cmp	r3, #0
 8012d0e:	d01e      	beq.n	8012d4e <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 8012d10:	687b      	ldr	r3, [r7, #4]
 8012d12:	891b      	ldrh	r3, [r3, #8]
 8012d14:	461a      	mov	r2, r3
 8012d16:	4b14      	ldr	r3, [pc, #80]	; (8012d68 <tcp_oos_insert_segment+0x10c>)
 8012d18:	681b      	ldr	r3, [r3, #0]
 8012d1a:	441a      	add	r2, r3
 8012d1c:	683b      	ldr	r3, [r7, #0]
 8012d1e:	68db      	ldr	r3, [r3, #12]
 8012d20:	685b      	ldr	r3, [r3, #4]
 8012d22:	1ad3      	subs	r3, r2, r3
    if (next &&
 8012d24:	2b00      	cmp	r3, #0
 8012d26:	dd12      	ble.n	8012d4e <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 8012d28:	683b      	ldr	r3, [r7, #0]
 8012d2a:	68db      	ldr	r3, [r3, #12]
 8012d2c:	685b      	ldr	r3, [r3, #4]
 8012d2e:	b29a      	uxth	r2, r3
 8012d30:	4b0d      	ldr	r3, [pc, #52]	; (8012d68 <tcp_oos_insert_segment+0x10c>)
 8012d32:	681b      	ldr	r3, [r3, #0]
 8012d34:	b29b      	uxth	r3, r3
 8012d36:	1ad3      	subs	r3, r2, r3
 8012d38:	b29a      	uxth	r2, r3
 8012d3a:	687b      	ldr	r3, [r7, #4]
 8012d3c:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 8012d3e:	687b      	ldr	r3, [r7, #4]
 8012d40:	685a      	ldr	r2, [r3, #4]
 8012d42:	687b      	ldr	r3, [r7, #4]
 8012d44:	891b      	ldrh	r3, [r3, #8]
 8012d46:	4619      	mov	r1, r3
 8012d48:	4610      	mov	r0, r2
 8012d4a:	f7fc fe25 	bl	800f998 <pbuf_realloc>
    }
  }
  cseg->next = next;
 8012d4e:	687b      	ldr	r3, [r7, #4]
 8012d50:	683a      	ldr	r2, [r7, #0]
 8012d52:	601a      	str	r2, [r3, #0]
}
 8012d54:	bf00      	nop
 8012d56:	3714      	adds	r7, #20
 8012d58:	46bd      	mov	sp, r7
 8012d5a:	bd90      	pop	{r4, r7, pc}
 8012d5c:	0801c068 	.word	0x0801c068
 8012d60:	0801c328 	.word	0x0801c328
 8012d64:	0801c0b4 	.word	0x0801c0b4
 8012d68:	20008010 	.word	0x20008010

08012d6c <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 8012d6c:	b5b0      	push	{r4, r5, r7, lr}
 8012d6e:	b086      	sub	sp, #24
 8012d70:	af00      	add	r7, sp, #0
 8012d72:	60f8      	str	r0, [r7, #12]
 8012d74:	60b9      	str	r1, [r7, #8]
 8012d76:	607a      	str	r2, [r7, #4]
 8012d78:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 8012d7a:	e03e      	b.n	8012dfa <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 8012d7c:	68bb      	ldr	r3, [r7, #8]
 8012d7e:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 8012d80:	68bb      	ldr	r3, [r7, #8]
 8012d82:	681b      	ldr	r3, [r3, #0]
 8012d84:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 8012d86:	697b      	ldr	r3, [r7, #20]
 8012d88:	685b      	ldr	r3, [r3, #4]
 8012d8a:	4618      	mov	r0, r3
 8012d8c:	f7fd f812 	bl	800fdb4 <pbuf_clen>
 8012d90:	4603      	mov	r3, r0
 8012d92:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 8012d94:	68fb      	ldr	r3, [r7, #12]
 8012d96:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8012d9a:	8a7a      	ldrh	r2, [r7, #18]
 8012d9c:	429a      	cmp	r2, r3
 8012d9e:	d906      	bls.n	8012dae <tcp_free_acked_segments+0x42>
 8012da0:	4b2a      	ldr	r3, [pc, #168]	; (8012e4c <tcp_free_acked_segments+0xe0>)
 8012da2:	f240 4257 	movw	r2, #1111	; 0x457
 8012da6:	492a      	ldr	r1, [pc, #168]	; (8012e50 <tcp_free_acked_segments+0xe4>)
 8012da8:	482a      	ldr	r0, [pc, #168]	; (8012e54 <tcp_free_acked_segments+0xe8>)
 8012daa:	f005 fe3b 	bl	8018a24 <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 8012dae:	68fb      	ldr	r3, [r7, #12]
 8012db0:	f8b3 2066 	ldrh.w	r2, [r3, #102]	; 0x66
 8012db4:	8a7b      	ldrh	r3, [r7, #18]
 8012db6:	1ad3      	subs	r3, r2, r3
 8012db8:	b29a      	uxth	r2, r3
 8012dba:	68fb      	ldr	r3, [r7, #12]
 8012dbc:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 8012dc0:	697b      	ldr	r3, [r7, #20]
 8012dc2:	891a      	ldrh	r2, [r3, #8]
 8012dc4:	4b24      	ldr	r3, [pc, #144]	; (8012e58 <tcp_free_acked_segments+0xec>)
 8012dc6:	881b      	ldrh	r3, [r3, #0]
 8012dc8:	4413      	add	r3, r2
 8012dca:	b29a      	uxth	r2, r3
 8012dcc:	4b22      	ldr	r3, [pc, #136]	; (8012e58 <tcp_free_acked_segments+0xec>)
 8012dce:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 8012dd0:	6978      	ldr	r0, [r7, #20]
 8012dd2:	f7fe f9da 	bl	801118a <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 8012dd6:	68fb      	ldr	r3, [r7, #12]
 8012dd8:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8012ddc:	2b00      	cmp	r3, #0
 8012dde:	d00c      	beq.n	8012dfa <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 8012de0:	68bb      	ldr	r3, [r7, #8]
 8012de2:	2b00      	cmp	r3, #0
 8012de4:	d109      	bne.n	8012dfa <tcp_free_acked_segments+0x8e>
 8012de6:	683b      	ldr	r3, [r7, #0]
 8012de8:	2b00      	cmp	r3, #0
 8012dea:	d106      	bne.n	8012dfa <tcp_free_acked_segments+0x8e>
 8012dec:	4b17      	ldr	r3, [pc, #92]	; (8012e4c <tcp_free_acked_segments+0xe0>)
 8012dee:	f240 4261 	movw	r2, #1121	; 0x461
 8012df2:	491a      	ldr	r1, [pc, #104]	; (8012e5c <tcp_free_acked_segments+0xf0>)
 8012df4:	4817      	ldr	r0, [pc, #92]	; (8012e54 <tcp_free_acked_segments+0xe8>)
 8012df6:	f005 fe15 	bl	8018a24 <iprintf>
  while (seg_list != NULL &&
 8012dfa:	68bb      	ldr	r3, [r7, #8]
 8012dfc:	2b00      	cmp	r3, #0
 8012dfe:	d020      	beq.n	8012e42 <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 8012e00:	68bb      	ldr	r3, [r7, #8]
 8012e02:	68db      	ldr	r3, [r3, #12]
 8012e04:	685b      	ldr	r3, [r3, #4]
 8012e06:	4618      	mov	r0, r3
 8012e08:	f7fb fb6b 	bl	800e4e2 <lwip_htonl>
 8012e0c:	4604      	mov	r4, r0
 8012e0e:	68bb      	ldr	r3, [r7, #8]
 8012e10:	891b      	ldrh	r3, [r3, #8]
 8012e12:	461d      	mov	r5, r3
 8012e14:	68bb      	ldr	r3, [r7, #8]
 8012e16:	68db      	ldr	r3, [r3, #12]
 8012e18:	899b      	ldrh	r3, [r3, #12]
 8012e1a:	b29b      	uxth	r3, r3
 8012e1c:	4618      	mov	r0, r3
 8012e1e:	f7fb fb4b 	bl	800e4b8 <lwip_htons>
 8012e22:	4603      	mov	r3, r0
 8012e24:	b2db      	uxtb	r3, r3
 8012e26:	f003 0303 	and.w	r3, r3, #3
 8012e2a:	2b00      	cmp	r3, #0
 8012e2c:	d001      	beq.n	8012e32 <tcp_free_acked_segments+0xc6>
 8012e2e:	2301      	movs	r3, #1
 8012e30:	e000      	b.n	8012e34 <tcp_free_acked_segments+0xc8>
 8012e32:	2300      	movs	r3, #0
 8012e34:	442b      	add	r3, r5
 8012e36:	18e2      	adds	r2, r4, r3
 8012e38:	4b09      	ldr	r3, [pc, #36]	; (8012e60 <tcp_free_acked_segments+0xf4>)
 8012e3a:	681b      	ldr	r3, [r3, #0]
 8012e3c:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 8012e3e:	2b00      	cmp	r3, #0
 8012e40:	dd9c      	ble.n	8012d7c <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 8012e42:	68bb      	ldr	r3, [r7, #8]
}
 8012e44:	4618      	mov	r0, r3
 8012e46:	3718      	adds	r7, #24
 8012e48:	46bd      	mov	sp, r7
 8012e4a:	bdb0      	pop	{r4, r5, r7, pc}
 8012e4c:	0801c068 	.word	0x0801c068
 8012e50:	0801c350 	.word	0x0801c350
 8012e54:	0801c0b4 	.word	0x0801c0b4
 8012e58:	20008018 	.word	0x20008018
 8012e5c:	0801c378 	.word	0x0801c378
 8012e60:	20008014 	.word	0x20008014

08012e64 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 8012e64:	b5b0      	push	{r4, r5, r7, lr}
 8012e66:	b094      	sub	sp, #80	; 0x50
 8012e68:	af00      	add	r7, sp, #0
 8012e6a:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 8012e6c:	2300      	movs	r3, #0
 8012e6e:	64bb      	str	r3, [r7, #72]	; 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 8012e70:	687b      	ldr	r3, [r7, #4]
 8012e72:	2b00      	cmp	r3, #0
 8012e74:	d106      	bne.n	8012e84 <tcp_receive+0x20>
 8012e76:	4b91      	ldr	r3, [pc, #580]	; (80130bc <tcp_receive+0x258>)
 8012e78:	f240 427b 	movw	r2, #1147	; 0x47b
 8012e7c:	4990      	ldr	r1, [pc, #576]	; (80130c0 <tcp_receive+0x25c>)
 8012e7e:	4891      	ldr	r0, [pc, #580]	; (80130c4 <tcp_receive+0x260>)
 8012e80:	f005 fdd0 	bl	8018a24 <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 8012e84:	687b      	ldr	r3, [r7, #4]
 8012e86:	7d1b      	ldrb	r3, [r3, #20]
 8012e88:	2b03      	cmp	r3, #3
 8012e8a:	d806      	bhi.n	8012e9a <tcp_receive+0x36>
 8012e8c:	4b8b      	ldr	r3, [pc, #556]	; (80130bc <tcp_receive+0x258>)
 8012e8e:	f240 427c 	movw	r2, #1148	; 0x47c
 8012e92:	498d      	ldr	r1, [pc, #564]	; (80130c8 <tcp_receive+0x264>)
 8012e94:	488b      	ldr	r0, [pc, #556]	; (80130c4 <tcp_receive+0x260>)
 8012e96:	f005 fdc5 	bl	8018a24 <iprintf>

  if (flags & TCP_ACK) {
 8012e9a:	4b8c      	ldr	r3, [pc, #560]	; (80130cc <tcp_receive+0x268>)
 8012e9c:	781b      	ldrb	r3, [r3, #0]
 8012e9e:	f003 0310 	and.w	r3, r3, #16
 8012ea2:	2b00      	cmp	r3, #0
 8012ea4:	f000 8264 	beq.w	8013370 <tcp_receive+0x50c>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 8012ea8:	687b      	ldr	r3, [r7, #4]
 8012eaa:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8012eae:	461a      	mov	r2, r3
 8012eb0:	687b      	ldr	r3, [r7, #4]
 8012eb2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8012eb4:	4413      	add	r3, r2
 8012eb6:	633b      	str	r3, [r7, #48]	; 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8012eb8:	687b      	ldr	r3, [r7, #4]
 8012eba:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8012ebc:	4b84      	ldr	r3, [pc, #528]	; (80130d0 <tcp_receive+0x26c>)
 8012ebe:	681b      	ldr	r3, [r3, #0]
 8012ec0:	1ad3      	subs	r3, r2, r3
 8012ec2:	2b00      	cmp	r3, #0
 8012ec4:	db1b      	blt.n	8012efe <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8012ec6:	687b      	ldr	r3, [r7, #4]
 8012ec8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8012eca:	4b81      	ldr	r3, [pc, #516]	; (80130d0 <tcp_receive+0x26c>)
 8012ecc:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8012ece:	429a      	cmp	r2, r3
 8012ed0:	d106      	bne.n	8012ee0 <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8012ed2:	687b      	ldr	r3, [r7, #4]
 8012ed4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8012ed6:	4b7f      	ldr	r3, [pc, #508]	; (80130d4 <tcp_receive+0x270>)
 8012ed8:	681b      	ldr	r3, [r3, #0]
 8012eda:	1ad3      	subs	r3, r2, r3
 8012edc:	2b00      	cmp	r3, #0
 8012ede:	db0e      	blt.n	8012efe <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8012ee0:	687b      	ldr	r3, [r7, #4]
 8012ee2:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8012ee4:	4b7b      	ldr	r3, [pc, #492]	; (80130d4 <tcp_receive+0x270>)
 8012ee6:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8012ee8:	429a      	cmp	r2, r3
 8012eea:	d125      	bne.n	8012f38 <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8012eec:	4b7a      	ldr	r3, [pc, #488]	; (80130d8 <tcp_receive+0x274>)
 8012eee:	681b      	ldr	r3, [r3, #0]
 8012ef0:	89db      	ldrh	r3, [r3, #14]
 8012ef2:	b29a      	uxth	r2, r3
 8012ef4:	687b      	ldr	r3, [r7, #4]
 8012ef6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8012efa:	429a      	cmp	r2, r3
 8012efc:	d91c      	bls.n	8012f38 <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 8012efe:	4b76      	ldr	r3, [pc, #472]	; (80130d8 <tcp_receive+0x274>)
 8012f00:	681b      	ldr	r3, [r3, #0]
 8012f02:	89db      	ldrh	r3, [r3, #14]
 8012f04:	b29a      	uxth	r2, r3
 8012f06:	687b      	ldr	r3, [r7, #4]
 8012f08:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 8012f0c:	687b      	ldr	r3, [r7, #4]
 8012f0e:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
 8012f12:	687b      	ldr	r3, [r7, #4]
 8012f14:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8012f18:	429a      	cmp	r2, r3
 8012f1a:	d205      	bcs.n	8012f28 <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 8012f1c:	687b      	ldr	r3, [r7, #4]
 8012f1e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8012f22:	687b      	ldr	r3, [r7, #4]
 8012f24:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      }
      pcb->snd_wl1 = seqno;
 8012f28:	4b69      	ldr	r3, [pc, #420]	; (80130d0 <tcp_receive+0x26c>)
 8012f2a:	681a      	ldr	r2, [r3, #0]
 8012f2c:	687b      	ldr	r3, [r7, #4]
 8012f2e:	655a      	str	r2, [r3, #84]	; 0x54
      pcb->snd_wl2 = ackno;
 8012f30:	4b68      	ldr	r3, [pc, #416]	; (80130d4 <tcp_receive+0x270>)
 8012f32:	681a      	ldr	r2, [r3, #0]
 8012f34:	687b      	ldr	r3, [r7, #4]
 8012f36:	659a      	str	r2, [r3, #88]	; 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 8012f38:	4b66      	ldr	r3, [pc, #408]	; (80130d4 <tcp_receive+0x270>)
 8012f3a:	681a      	ldr	r2, [r3, #0]
 8012f3c:	687b      	ldr	r3, [r7, #4]
 8012f3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8012f40:	1ad3      	subs	r3, r2, r3
 8012f42:	2b00      	cmp	r3, #0
 8012f44:	dc58      	bgt.n	8012ff8 <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 8012f46:	4b65      	ldr	r3, [pc, #404]	; (80130dc <tcp_receive+0x278>)
 8012f48:	881b      	ldrh	r3, [r3, #0]
 8012f4a:	2b00      	cmp	r3, #0
 8012f4c:	d14b      	bne.n	8012fe6 <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 8012f4e:	687b      	ldr	r3, [r7, #4]
 8012f50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8012f52:	687a      	ldr	r2, [r7, #4]
 8012f54:	f8b2 2060 	ldrh.w	r2, [r2, #96]	; 0x60
 8012f58:	4413      	add	r3, r2
 8012f5a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8012f5c:	429a      	cmp	r2, r3
 8012f5e:	d142      	bne.n	8012fe6 <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 8012f60:	687b      	ldr	r3, [r7, #4]
 8012f62:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8012f66:	2b00      	cmp	r3, #0
 8012f68:	db3d      	blt.n	8012fe6 <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 8012f6a:	687b      	ldr	r3, [r7, #4]
 8012f6c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8012f6e:	4b59      	ldr	r3, [pc, #356]	; (80130d4 <tcp_receive+0x270>)
 8012f70:	681b      	ldr	r3, [r3, #0]
 8012f72:	429a      	cmp	r2, r3
 8012f74:	d137      	bne.n	8012fe6 <tcp_receive+0x182>
              found_dupack = 1;
 8012f76:	2301      	movs	r3, #1
 8012f78:	64bb      	str	r3, [r7, #72]	; 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 8012f7a:	687b      	ldr	r3, [r7, #4]
 8012f7c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8012f80:	2bff      	cmp	r3, #255	; 0xff
 8012f82:	d007      	beq.n	8012f94 <tcp_receive+0x130>
                ++pcb->dupacks;
 8012f84:	687b      	ldr	r3, [r7, #4]
 8012f86:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8012f8a:	3301      	adds	r3, #1
 8012f8c:	b2da      	uxtb	r2, r3
 8012f8e:	687b      	ldr	r3, [r7, #4]
 8012f90:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 8012f94:	687b      	ldr	r3, [r7, #4]
 8012f96:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8012f9a:	2b03      	cmp	r3, #3
 8012f9c:	d91b      	bls.n	8012fd6 <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 8012f9e:	687b      	ldr	r3, [r7, #4]
 8012fa0:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8012fa4:	687b      	ldr	r3, [r7, #4]
 8012fa6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8012fa8:	4413      	add	r3, r2
 8012faa:	b29a      	uxth	r2, r3
 8012fac:	687b      	ldr	r3, [r7, #4]
 8012fae:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8012fb2:	429a      	cmp	r2, r3
 8012fb4:	d30a      	bcc.n	8012fcc <tcp_receive+0x168>
 8012fb6:	687b      	ldr	r3, [r7, #4]
 8012fb8:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8012fbc:	687b      	ldr	r3, [r7, #4]
 8012fbe:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8012fc0:	4413      	add	r3, r2
 8012fc2:	b29a      	uxth	r2, r3
 8012fc4:	687b      	ldr	r3, [r7, #4]
 8012fc6:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8012fca:	e004      	b.n	8012fd6 <tcp_receive+0x172>
 8012fcc:	687b      	ldr	r3, [r7, #4]
 8012fce:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8012fd2:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
              }
              if (pcb->dupacks >= 3) {
 8012fd6:	687b      	ldr	r3, [r7, #4]
 8012fd8:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8012fdc:	2b02      	cmp	r3, #2
 8012fde:	d902      	bls.n	8012fe6 <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 8012fe0:	6878      	ldr	r0, [r7, #4]
 8012fe2:	f001 feed 	bl	8014dc0 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 8012fe6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012fe8:	2b00      	cmp	r3, #0
 8012fea:	f040 8161 	bne.w	80132b0 <tcp_receive+0x44c>
        pcb->dupacks = 0;
 8012fee:	687b      	ldr	r3, [r7, #4]
 8012ff0:	2200      	movs	r2, #0
 8012ff2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8012ff6:	e15b      	b.n	80132b0 <tcp_receive+0x44c>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8012ff8:	4b36      	ldr	r3, [pc, #216]	; (80130d4 <tcp_receive+0x270>)
 8012ffa:	681a      	ldr	r2, [r3, #0]
 8012ffc:	687b      	ldr	r3, [r7, #4]
 8012ffe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8013000:	1ad3      	subs	r3, r2, r3
 8013002:	3b01      	subs	r3, #1
 8013004:	2b00      	cmp	r3, #0
 8013006:	f2c0 814e 	blt.w	80132a6 <tcp_receive+0x442>
 801300a:	4b32      	ldr	r3, [pc, #200]	; (80130d4 <tcp_receive+0x270>)
 801300c:	681a      	ldr	r2, [r3, #0]
 801300e:	687b      	ldr	r3, [r7, #4]
 8013010:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8013012:	1ad3      	subs	r3, r2, r3
 8013014:	2b00      	cmp	r3, #0
 8013016:	f300 8146 	bgt.w	80132a6 <tcp_receive+0x442>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 801301a:	687b      	ldr	r3, [r7, #4]
 801301c:	8b5b      	ldrh	r3, [r3, #26]
 801301e:	f003 0304 	and.w	r3, r3, #4
 8013022:	2b00      	cmp	r3, #0
 8013024:	d010      	beq.n	8013048 <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 8013026:	687b      	ldr	r3, [r7, #4]
 8013028:	8b5b      	ldrh	r3, [r3, #26]
 801302a:	f023 0304 	bic.w	r3, r3, #4
 801302e:	b29a      	uxth	r2, r3
 8013030:	687b      	ldr	r3, [r7, #4]
 8013032:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 8013034:	687b      	ldr	r3, [r7, #4]
 8013036:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 801303a:	687b      	ldr	r3, [r7, #4]
 801303c:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        pcb->bytes_acked = 0;
 8013040:	687b      	ldr	r3, [r7, #4]
 8013042:	2200      	movs	r2, #0
 8013044:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 8013048:	687b      	ldr	r3, [r7, #4]
 801304a:	2200      	movs	r2, #0
 801304c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8013050:	687b      	ldr	r3, [r7, #4]
 8013052:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8013056:	10db      	asrs	r3, r3, #3
 8013058:	b21b      	sxth	r3, r3
 801305a:	b29a      	uxth	r2, r3
 801305c:	687b      	ldr	r3, [r7, #4]
 801305e:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8013062:	b29b      	uxth	r3, r3
 8013064:	4413      	add	r3, r2
 8013066:	b29b      	uxth	r3, r3
 8013068:	b21a      	sxth	r2, r3
 801306a:	687b      	ldr	r3, [r7, #4]
 801306c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 8013070:	4b18      	ldr	r3, [pc, #96]	; (80130d4 <tcp_receive+0x270>)
 8013072:	681b      	ldr	r3, [r3, #0]
 8013074:	b29a      	uxth	r2, r3
 8013076:	687b      	ldr	r3, [r7, #4]
 8013078:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801307a:	b29b      	uxth	r3, r3
 801307c:	1ad3      	subs	r3, r2, r3
 801307e:	85fb      	strh	r3, [r7, #46]	; 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 8013080:	687b      	ldr	r3, [r7, #4]
 8013082:	2200      	movs	r2, #0
 8013084:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 8013088:	4b12      	ldr	r3, [pc, #72]	; (80130d4 <tcp_receive+0x270>)
 801308a:	681a      	ldr	r2, [r3, #0]
 801308c:	687b      	ldr	r3, [r7, #4]
 801308e:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 8013090:	687b      	ldr	r3, [r7, #4]
 8013092:	7d1b      	ldrb	r3, [r3, #20]
 8013094:	2b03      	cmp	r3, #3
 8013096:	f240 8097 	bls.w	80131c8 <tcp_receive+0x364>
        if (pcb->cwnd < pcb->ssthresh) {
 801309a:	687b      	ldr	r3, [r7, #4]
 801309c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80130a0:	687b      	ldr	r3, [r7, #4]
 80130a2:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 80130a6:	429a      	cmp	r2, r3
 80130a8:	d245      	bcs.n	8013136 <tcp_receive+0x2d2>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 80130aa:	687b      	ldr	r3, [r7, #4]
 80130ac:	8b5b      	ldrh	r3, [r3, #26]
 80130ae:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80130b2:	2b00      	cmp	r3, #0
 80130b4:	d014      	beq.n	80130e0 <tcp_receive+0x27c>
 80130b6:	2301      	movs	r3, #1
 80130b8:	e013      	b.n	80130e2 <tcp_receive+0x27e>
 80130ba:	bf00      	nop
 80130bc:	0801c068 	.word	0x0801c068
 80130c0:	0801c398 	.word	0x0801c398
 80130c4:	0801c0b4 	.word	0x0801c0b4
 80130c8:	0801c3b4 	.word	0x0801c3b4
 80130cc:	2000801c 	.word	0x2000801c
 80130d0:	20008010 	.word	0x20008010
 80130d4:	20008014 	.word	0x20008014
 80130d8:	20008000 	.word	0x20008000
 80130dc:	2000801a 	.word	0x2000801a
 80130e0:	2302      	movs	r3, #2
 80130e2:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 80130e6:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80130ea:	b29a      	uxth	r2, r3
 80130ec:	687b      	ldr	r3, [r7, #4]
 80130ee:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80130f0:	fb12 f303 	smulbb	r3, r2, r3
 80130f4:	b29b      	uxth	r3, r3
 80130f6:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80130f8:	4293      	cmp	r3, r2
 80130fa:	bf28      	it	cs
 80130fc:	4613      	movcs	r3, r2
 80130fe:	857b      	strh	r3, [r7, #42]	; 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 8013100:	687b      	ldr	r3, [r7, #4]
 8013102:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8013106:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8013108:	4413      	add	r3, r2
 801310a:	b29a      	uxth	r2, r3
 801310c:	687b      	ldr	r3, [r7, #4]
 801310e:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8013112:	429a      	cmp	r2, r3
 8013114:	d309      	bcc.n	801312a <tcp_receive+0x2c6>
 8013116:	687b      	ldr	r3, [r7, #4]
 8013118:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 801311c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 801311e:	4413      	add	r3, r2
 8013120:	b29a      	uxth	r2, r3
 8013122:	687b      	ldr	r3, [r7, #4]
 8013124:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8013128:	e04e      	b.n	80131c8 <tcp_receive+0x364>
 801312a:	687b      	ldr	r3, [r7, #4]
 801312c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8013130:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8013134:	e048      	b.n	80131c8 <tcp_receive+0x364>
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 8013136:	687b      	ldr	r3, [r7, #4]
 8013138:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 801313c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 801313e:	4413      	add	r3, r2
 8013140:	b29a      	uxth	r2, r3
 8013142:	687b      	ldr	r3, [r7, #4]
 8013144:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8013148:	429a      	cmp	r2, r3
 801314a:	d309      	bcc.n	8013160 <tcp_receive+0x2fc>
 801314c:	687b      	ldr	r3, [r7, #4]
 801314e:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8013152:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8013154:	4413      	add	r3, r2
 8013156:	b29a      	uxth	r2, r3
 8013158:	687b      	ldr	r3, [r7, #4]
 801315a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 801315e:	e004      	b.n	801316a <tcp_receive+0x306>
 8013160:	687b      	ldr	r3, [r7, #4]
 8013162:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8013166:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 801316a:	687b      	ldr	r3, [r7, #4]
 801316c:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8013170:	687b      	ldr	r3, [r7, #4]
 8013172:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8013176:	429a      	cmp	r2, r3
 8013178:	d326      	bcc.n	80131c8 <tcp_receive+0x364>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 801317a:	687b      	ldr	r3, [r7, #4]
 801317c:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8013180:	687b      	ldr	r3, [r7, #4]
 8013182:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8013186:	1ad3      	subs	r3, r2, r3
 8013188:	b29a      	uxth	r2, r3
 801318a:	687b      	ldr	r3, [r7, #4]
 801318c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 8013190:	687b      	ldr	r3, [r7, #4]
 8013192:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8013196:	687b      	ldr	r3, [r7, #4]
 8013198:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801319a:	4413      	add	r3, r2
 801319c:	b29a      	uxth	r2, r3
 801319e:	687b      	ldr	r3, [r7, #4]
 80131a0:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80131a4:	429a      	cmp	r2, r3
 80131a6:	d30a      	bcc.n	80131be <tcp_receive+0x35a>
 80131a8:	687b      	ldr	r3, [r7, #4]
 80131aa:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80131ae:	687b      	ldr	r3, [r7, #4]
 80131b0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80131b2:	4413      	add	r3, r2
 80131b4:	b29a      	uxth	r2, r3
 80131b6:	687b      	ldr	r3, [r7, #4]
 80131b8:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 80131bc:	e004      	b.n	80131c8 <tcp_receive+0x364>
 80131be:	687b      	ldr	r3, [r7, #4]
 80131c0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80131c4:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 80131c8:	687b      	ldr	r3, [r7, #4]
 80131ca:	6f19      	ldr	r1, [r3, #112]	; 0x70
 80131cc:	687b      	ldr	r3, [r7, #4]
 80131ce:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80131d0:	4a98      	ldr	r2, [pc, #608]	; (8013434 <tcp_receive+0x5d0>)
 80131d2:	6878      	ldr	r0, [r7, #4]
 80131d4:	f7ff fdca 	bl	8012d6c <tcp_free_acked_segments>
 80131d8:	4602      	mov	r2, r0
 80131da:	687b      	ldr	r3, [r7, #4]
 80131dc:	671a      	str	r2, [r3, #112]	; 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 80131de:	687b      	ldr	r3, [r7, #4]
 80131e0:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 80131e2:	687b      	ldr	r3, [r7, #4]
 80131e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80131e6:	4a94      	ldr	r2, [pc, #592]	; (8013438 <tcp_receive+0x5d4>)
 80131e8:	6878      	ldr	r0, [r7, #4]
 80131ea:	f7ff fdbf 	bl	8012d6c <tcp_free_acked_segments>
 80131ee:	4602      	mov	r2, r0
 80131f0:	687b      	ldr	r3, [r7, #4]
 80131f2:	66da      	str	r2, [r3, #108]	; 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 80131f4:	687b      	ldr	r3, [r7, #4]
 80131f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80131f8:	2b00      	cmp	r3, #0
 80131fa:	d104      	bne.n	8013206 <tcp_receive+0x3a2>
        pcb->rtime = -1;
 80131fc:	687b      	ldr	r3, [r7, #4]
 80131fe:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8013202:	861a      	strh	r2, [r3, #48]	; 0x30
 8013204:	e002      	b.n	801320c <tcp_receive+0x3a8>
      } else {
        pcb->rtime = 0;
 8013206:	687b      	ldr	r3, [r7, #4]
 8013208:	2200      	movs	r2, #0
 801320a:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 801320c:	687b      	ldr	r3, [r7, #4]
 801320e:	2200      	movs	r2, #0
 8013210:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 8013212:	687b      	ldr	r3, [r7, #4]
 8013214:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013216:	2b00      	cmp	r3, #0
 8013218:	d103      	bne.n	8013222 <tcp_receive+0x3be>
        pcb->unsent_oversize = 0;
 801321a:	687b      	ldr	r3, [r7, #4]
 801321c:	2200      	movs	r2, #0
 801321e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 8013222:	687b      	ldr	r3, [r7, #4]
 8013224:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 8013228:	4b84      	ldr	r3, [pc, #528]	; (801343c <tcp_receive+0x5d8>)
 801322a:	881b      	ldrh	r3, [r3, #0]
 801322c:	4413      	add	r3, r2
 801322e:	b29a      	uxth	r2, r3
 8013230:	687b      	ldr	r3, [r7, #4]
 8013232:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 8013236:	687b      	ldr	r3, [r7, #4]
 8013238:	8b5b      	ldrh	r3, [r3, #26]
 801323a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801323e:	2b00      	cmp	r3, #0
 8013240:	d035      	beq.n	80132ae <tcp_receive+0x44a>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 8013242:	687b      	ldr	r3, [r7, #4]
 8013244:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013246:	2b00      	cmp	r3, #0
 8013248:	d118      	bne.n	801327c <tcp_receive+0x418>
          if ((pcb->unsent == NULL) ||
 801324a:	687b      	ldr	r3, [r7, #4]
 801324c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801324e:	2b00      	cmp	r3, #0
 8013250:	d00c      	beq.n	801326c <tcp_receive+0x408>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 8013252:	687b      	ldr	r3, [r7, #4]
 8013254:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 8013256:	687b      	ldr	r3, [r7, #4]
 8013258:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801325a:	68db      	ldr	r3, [r3, #12]
 801325c:	685b      	ldr	r3, [r3, #4]
 801325e:	4618      	mov	r0, r3
 8013260:	f7fb f93f 	bl	800e4e2 <lwip_htonl>
 8013264:	4603      	mov	r3, r0
 8013266:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 8013268:	2b00      	cmp	r3, #0
 801326a:	dc20      	bgt.n	80132ae <tcp_receive+0x44a>
            tcp_clear_flags(pcb, TF_RTO);
 801326c:	687b      	ldr	r3, [r7, #4]
 801326e:	8b5b      	ldrh	r3, [r3, #26]
 8013270:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8013274:	b29a      	uxth	r2, r3
 8013276:	687b      	ldr	r3, [r7, #4]
 8013278:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 801327a:	e018      	b.n	80132ae <tcp_receive+0x44a>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 801327c:	687b      	ldr	r3, [r7, #4]
 801327e:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 8013280:	687b      	ldr	r3, [r7, #4]
 8013282:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013284:	68db      	ldr	r3, [r3, #12]
 8013286:	685b      	ldr	r3, [r3, #4]
 8013288:	4618      	mov	r0, r3
 801328a:	f7fb f92a 	bl	800e4e2 <lwip_htonl>
 801328e:	4603      	mov	r3, r0
 8013290:	1ae3      	subs	r3, r4, r3
 8013292:	2b00      	cmp	r3, #0
 8013294:	dc0b      	bgt.n	80132ae <tcp_receive+0x44a>
          tcp_clear_flags(pcb, TF_RTO);
 8013296:	687b      	ldr	r3, [r7, #4]
 8013298:	8b5b      	ldrh	r3, [r3, #26]
 801329a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 801329e:	b29a      	uxth	r2, r3
 80132a0:	687b      	ldr	r3, [r7, #4]
 80132a2:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 80132a4:	e003      	b.n	80132ae <tcp_receive+0x44a>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 80132a6:	6878      	ldr	r0, [r7, #4]
 80132a8:	f001 ff76 	bl	8015198 <tcp_send_empty_ack>
 80132ac:	e000      	b.n	80132b0 <tcp_receive+0x44c>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 80132ae:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 80132b0:	687b      	ldr	r3, [r7, #4]
 80132b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80132b4:	2b00      	cmp	r3, #0
 80132b6:	d05b      	beq.n	8013370 <tcp_receive+0x50c>
 80132b8:	687b      	ldr	r3, [r7, #4]
 80132ba:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80132bc:	4b60      	ldr	r3, [pc, #384]	; (8013440 <tcp_receive+0x5dc>)
 80132be:	681b      	ldr	r3, [r3, #0]
 80132c0:	1ad3      	subs	r3, r2, r3
 80132c2:	2b00      	cmp	r3, #0
 80132c4:	da54      	bge.n	8013370 <tcp_receive+0x50c>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 80132c6:	4b5f      	ldr	r3, [pc, #380]	; (8013444 <tcp_receive+0x5e0>)
 80132c8:	681b      	ldr	r3, [r3, #0]
 80132ca:	b29a      	uxth	r2, r3
 80132cc:	687b      	ldr	r3, [r7, #4]
 80132ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80132d0:	b29b      	uxth	r3, r3
 80132d2:	1ad3      	subs	r3, r2, r3
 80132d4:	b29b      	uxth	r3, r3
 80132d6:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 80132da:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 80132de:	687b      	ldr	r3, [r7, #4]
 80132e0:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 80132e4:	10db      	asrs	r3, r3, #3
 80132e6:	b21b      	sxth	r3, r3
 80132e8:	b29b      	uxth	r3, r3
 80132ea:	1ad3      	subs	r3, r2, r3
 80132ec:	b29b      	uxth	r3, r3
 80132ee:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 80132f2:	687b      	ldr	r3, [r7, #4]
 80132f4:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 80132f8:	b29a      	uxth	r2, r3
 80132fa:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80132fe:	4413      	add	r3, r2
 8013300:	b29b      	uxth	r3, r3
 8013302:	b21a      	sxth	r2, r3
 8013304:	687b      	ldr	r3, [r7, #4]
 8013306:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 8013308:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 801330c:	2b00      	cmp	r3, #0
 801330e:	da05      	bge.n	801331c <tcp_receive+0x4b8>
        m = (s16_t) - m;
 8013310:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8013314:	425b      	negs	r3, r3
 8013316:	b29b      	uxth	r3, r3
 8013318:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 801331c:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 8013320:	687b      	ldr	r3, [r7, #4]
 8013322:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8013326:	109b      	asrs	r3, r3, #2
 8013328:	b21b      	sxth	r3, r3
 801332a:	b29b      	uxth	r3, r3
 801332c:	1ad3      	subs	r3, r2, r3
 801332e:	b29b      	uxth	r3, r3
 8013330:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 8013334:	687b      	ldr	r3, [r7, #4]
 8013336:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 801333a:	b29a      	uxth	r2, r3
 801333c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8013340:	4413      	add	r3, r2
 8013342:	b29b      	uxth	r3, r3
 8013344:	b21a      	sxth	r2, r3
 8013346:	687b      	ldr	r3, [r7, #4]
 8013348:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 801334a:	687b      	ldr	r3, [r7, #4]
 801334c:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8013350:	10db      	asrs	r3, r3, #3
 8013352:	b21b      	sxth	r3, r3
 8013354:	b29a      	uxth	r2, r3
 8013356:	687b      	ldr	r3, [r7, #4]
 8013358:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 801335c:	b29b      	uxth	r3, r3
 801335e:	4413      	add	r3, r2
 8013360:	b29b      	uxth	r3, r3
 8013362:	b21a      	sxth	r2, r3
 8013364:	687b      	ldr	r3, [r7, #4]
 8013366:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 801336a:	687b      	ldr	r3, [r7, #4]
 801336c:	2200      	movs	r2, #0
 801336e:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 8013370:	4b35      	ldr	r3, [pc, #212]	; (8013448 <tcp_receive+0x5e4>)
 8013372:	881b      	ldrh	r3, [r3, #0]
 8013374:	2b00      	cmp	r3, #0
 8013376:	f000 84e2 	beq.w	8013d3e <tcp_receive+0xeda>
 801337a:	687b      	ldr	r3, [r7, #4]
 801337c:	7d1b      	ldrb	r3, [r3, #20]
 801337e:	2b06      	cmp	r3, #6
 8013380:	f200 84dd 	bhi.w	8013d3e <tcp_receive+0xeda>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8013384:	687b      	ldr	r3, [r7, #4]
 8013386:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8013388:	4b30      	ldr	r3, [pc, #192]	; (801344c <tcp_receive+0x5e8>)
 801338a:	681b      	ldr	r3, [r3, #0]
 801338c:	1ad3      	subs	r3, r2, r3
 801338e:	3b01      	subs	r3, #1
 8013390:	2b00      	cmp	r3, #0
 8013392:	f2c0 808f 	blt.w	80134b4 <tcp_receive+0x650>
 8013396:	687b      	ldr	r3, [r7, #4]
 8013398:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801339a:	4b2b      	ldr	r3, [pc, #172]	; (8013448 <tcp_receive+0x5e4>)
 801339c:	881b      	ldrh	r3, [r3, #0]
 801339e:	4619      	mov	r1, r3
 80133a0:	4b2a      	ldr	r3, [pc, #168]	; (801344c <tcp_receive+0x5e8>)
 80133a2:	681b      	ldr	r3, [r3, #0]
 80133a4:	440b      	add	r3, r1
 80133a6:	1ad3      	subs	r3, r2, r3
 80133a8:	3301      	adds	r3, #1
 80133aa:	2b00      	cmp	r3, #0
 80133ac:	f300 8082 	bgt.w	80134b4 <tcp_receive+0x650>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 80133b0:	4b27      	ldr	r3, [pc, #156]	; (8013450 <tcp_receive+0x5ec>)
 80133b2:	685b      	ldr	r3, [r3, #4]
 80133b4:	647b      	str	r3, [r7, #68]	; 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 80133b6:	687b      	ldr	r3, [r7, #4]
 80133b8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80133ba:	4b24      	ldr	r3, [pc, #144]	; (801344c <tcp_receive+0x5e8>)
 80133bc:	681b      	ldr	r3, [r3, #0]
 80133be:	1ad3      	subs	r3, r2, r3
 80133c0:	627b      	str	r3, [r7, #36]	; 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 80133c2:	4b23      	ldr	r3, [pc, #140]	; (8013450 <tcp_receive+0x5ec>)
 80133c4:	685b      	ldr	r3, [r3, #4]
 80133c6:	2b00      	cmp	r3, #0
 80133c8:	d106      	bne.n	80133d8 <tcp_receive+0x574>
 80133ca:	4b22      	ldr	r3, [pc, #136]	; (8013454 <tcp_receive+0x5f0>)
 80133cc:	f240 5294 	movw	r2, #1428	; 0x594
 80133d0:	4921      	ldr	r1, [pc, #132]	; (8013458 <tcp_receive+0x5f4>)
 80133d2:	4822      	ldr	r0, [pc, #136]	; (801345c <tcp_receive+0x5f8>)
 80133d4:	f005 fb26 	bl	8018a24 <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 80133d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80133da:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80133de:	4293      	cmp	r3, r2
 80133e0:	d906      	bls.n	80133f0 <tcp_receive+0x58c>
 80133e2:	4b1c      	ldr	r3, [pc, #112]	; (8013454 <tcp_receive+0x5f0>)
 80133e4:	f240 5295 	movw	r2, #1429	; 0x595
 80133e8:	491d      	ldr	r1, [pc, #116]	; (8013460 <tcp_receive+0x5fc>)
 80133ea:	481c      	ldr	r0, [pc, #112]	; (801345c <tcp_receive+0x5f8>)
 80133ec:	f005 fb1a 	bl	8018a24 <iprintf>
      off = (u16_t)off32;
 80133f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80133f2:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 80133f6:	4b16      	ldr	r3, [pc, #88]	; (8013450 <tcp_receive+0x5ec>)
 80133f8:	685b      	ldr	r3, [r3, #4]
 80133fa:	891b      	ldrh	r3, [r3, #8]
 80133fc:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8013400:	429a      	cmp	r2, r3
 8013402:	d906      	bls.n	8013412 <tcp_receive+0x5ae>
 8013404:	4b13      	ldr	r3, [pc, #76]	; (8013454 <tcp_receive+0x5f0>)
 8013406:	f240 5297 	movw	r2, #1431	; 0x597
 801340a:	4916      	ldr	r1, [pc, #88]	; (8013464 <tcp_receive+0x600>)
 801340c:	4813      	ldr	r0, [pc, #76]	; (801345c <tcp_receive+0x5f8>)
 801340e:	f005 fb09 	bl	8018a24 <iprintf>
      inseg.len -= off;
 8013412:	4b0f      	ldr	r3, [pc, #60]	; (8013450 <tcp_receive+0x5ec>)
 8013414:	891a      	ldrh	r2, [r3, #8]
 8013416:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801341a:	1ad3      	subs	r3, r2, r3
 801341c:	b29a      	uxth	r2, r3
 801341e:	4b0c      	ldr	r3, [pc, #48]	; (8013450 <tcp_receive+0x5ec>)
 8013420:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 8013422:	4b0b      	ldr	r3, [pc, #44]	; (8013450 <tcp_receive+0x5ec>)
 8013424:	685b      	ldr	r3, [r3, #4]
 8013426:	891a      	ldrh	r2, [r3, #8]
 8013428:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801342c:	1ad3      	subs	r3, r2, r3
 801342e:	847b      	strh	r3, [r7, #34]	; 0x22
      while (p->len < off) {
 8013430:	e02a      	b.n	8013488 <tcp_receive+0x624>
 8013432:	bf00      	nop
 8013434:	0801c3d0 	.word	0x0801c3d0
 8013438:	0801c3d8 	.word	0x0801c3d8
 801343c:	20008018 	.word	0x20008018
 8013440:	20008014 	.word	0x20008014
 8013444:	20007fd8 	.word	0x20007fd8
 8013448:	2000801a 	.word	0x2000801a
 801344c:	20008010 	.word	0x20008010
 8013450:	20007ff0 	.word	0x20007ff0
 8013454:	0801c068 	.word	0x0801c068
 8013458:	0801c3e0 	.word	0x0801c3e0
 801345c:	0801c0b4 	.word	0x0801c0b4
 8013460:	0801c3f0 	.word	0x0801c3f0
 8013464:	0801c400 	.word	0x0801c400
        off -= p->len;
 8013468:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801346a:	895b      	ldrh	r3, [r3, #10]
 801346c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8013470:	1ad3      	subs	r3, r2, r3
 8013472:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 8013476:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013478:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 801347a:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 801347c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801347e:	2200      	movs	r2, #0
 8013480:	815a      	strh	r2, [r3, #10]
        p = p->next;
 8013482:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013484:	681b      	ldr	r3, [r3, #0]
 8013486:	647b      	str	r3, [r7, #68]	; 0x44
      while (p->len < off) {
 8013488:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801348a:	895b      	ldrh	r3, [r3, #10]
 801348c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8013490:	429a      	cmp	r2, r3
 8013492:	d8e9      	bhi.n	8013468 <tcp_receive+0x604>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 8013494:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8013498:	4619      	mov	r1, r3
 801349a:	6c78      	ldr	r0, [r7, #68]	; 0x44
 801349c:	f7fc fb7c 	bl	800fb98 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 80134a0:	687b      	ldr	r3, [r7, #4]
 80134a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80134a4:	4a91      	ldr	r2, [pc, #580]	; (80136ec <tcp_receive+0x888>)
 80134a6:	6013      	str	r3, [r2, #0]
 80134a8:	4b91      	ldr	r3, [pc, #580]	; (80136f0 <tcp_receive+0x88c>)
 80134aa:	68db      	ldr	r3, [r3, #12]
 80134ac:	4a8f      	ldr	r2, [pc, #572]	; (80136ec <tcp_receive+0x888>)
 80134ae:	6812      	ldr	r2, [r2, #0]
 80134b0:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 80134b2:	e00d      	b.n	80134d0 <tcp_receive+0x66c>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 80134b4:	4b8d      	ldr	r3, [pc, #564]	; (80136ec <tcp_receive+0x888>)
 80134b6:	681a      	ldr	r2, [r3, #0]
 80134b8:	687b      	ldr	r3, [r7, #4]
 80134ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80134bc:	1ad3      	subs	r3, r2, r3
 80134be:	2b00      	cmp	r3, #0
 80134c0:	da06      	bge.n	80134d0 <tcp_receive+0x66c>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 80134c2:	687b      	ldr	r3, [r7, #4]
 80134c4:	8b5b      	ldrh	r3, [r3, #26]
 80134c6:	f043 0302 	orr.w	r3, r3, #2
 80134ca:	b29a      	uxth	r2, r3
 80134cc:	687b      	ldr	r3, [r7, #4]
 80134ce:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 80134d0:	4b86      	ldr	r3, [pc, #536]	; (80136ec <tcp_receive+0x888>)
 80134d2:	681a      	ldr	r2, [r3, #0]
 80134d4:	687b      	ldr	r3, [r7, #4]
 80134d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80134d8:	1ad3      	subs	r3, r2, r3
 80134da:	2b00      	cmp	r3, #0
 80134dc:	f2c0 842a 	blt.w	8013d34 <tcp_receive+0xed0>
 80134e0:	4b82      	ldr	r3, [pc, #520]	; (80136ec <tcp_receive+0x888>)
 80134e2:	681a      	ldr	r2, [r3, #0]
 80134e4:	687b      	ldr	r3, [r7, #4]
 80134e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80134e8:	6879      	ldr	r1, [r7, #4]
 80134ea:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 80134ec:	440b      	add	r3, r1
 80134ee:	1ad3      	subs	r3, r2, r3
 80134f0:	3301      	adds	r3, #1
 80134f2:	2b00      	cmp	r3, #0
 80134f4:	f300 841e 	bgt.w	8013d34 <tcp_receive+0xed0>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 80134f8:	687b      	ldr	r3, [r7, #4]
 80134fa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80134fc:	4b7b      	ldr	r3, [pc, #492]	; (80136ec <tcp_receive+0x888>)
 80134fe:	681b      	ldr	r3, [r3, #0]
 8013500:	429a      	cmp	r2, r3
 8013502:	f040 829a 	bne.w	8013a3a <tcp_receive+0xbd6>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 8013506:	4b7a      	ldr	r3, [pc, #488]	; (80136f0 <tcp_receive+0x88c>)
 8013508:	891c      	ldrh	r4, [r3, #8]
 801350a:	4b79      	ldr	r3, [pc, #484]	; (80136f0 <tcp_receive+0x88c>)
 801350c:	68db      	ldr	r3, [r3, #12]
 801350e:	899b      	ldrh	r3, [r3, #12]
 8013510:	b29b      	uxth	r3, r3
 8013512:	4618      	mov	r0, r3
 8013514:	f7fa ffd0 	bl	800e4b8 <lwip_htons>
 8013518:	4603      	mov	r3, r0
 801351a:	b2db      	uxtb	r3, r3
 801351c:	f003 0303 	and.w	r3, r3, #3
 8013520:	2b00      	cmp	r3, #0
 8013522:	d001      	beq.n	8013528 <tcp_receive+0x6c4>
 8013524:	2301      	movs	r3, #1
 8013526:	e000      	b.n	801352a <tcp_receive+0x6c6>
 8013528:	2300      	movs	r3, #0
 801352a:	4423      	add	r3, r4
 801352c:	b29a      	uxth	r2, r3
 801352e:	4b71      	ldr	r3, [pc, #452]	; (80136f4 <tcp_receive+0x890>)
 8013530:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 8013532:	687b      	ldr	r3, [r7, #4]
 8013534:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8013536:	4b6f      	ldr	r3, [pc, #444]	; (80136f4 <tcp_receive+0x890>)
 8013538:	881b      	ldrh	r3, [r3, #0]
 801353a:	429a      	cmp	r2, r3
 801353c:	d275      	bcs.n	801362a <tcp_receive+0x7c6>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 801353e:	4b6c      	ldr	r3, [pc, #432]	; (80136f0 <tcp_receive+0x88c>)
 8013540:	68db      	ldr	r3, [r3, #12]
 8013542:	899b      	ldrh	r3, [r3, #12]
 8013544:	b29b      	uxth	r3, r3
 8013546:	4618      	mov	r0, r3
 8013548:	f7fa ffb6 	bl	800e4b8 <lwip_htons>
 801354c:	4603      	mov	r3, r0
 801354e:	b2db      	uxtb	r3, r3
 8013550:	f003 0301 	and.w	r3, r3, #1
 8013554:	2b00      	cmp	r3, #0
 8013556:	d01f      	beq.n	8013598 <tcp_receive+0x734>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 8013558:	4b65      	ldr	r3, [pc, #404]	; (80136f0 <tcp_receive+0x88c>)
 801355a:	68db      	ldr	r3, [r3, #12]
 801355c:	899b      	ldrh	r3, [r3, #12]
 801355e:	b29b      	uxth	r3, r3
 8013560:	b21b      	sxth	r3, r3
 8013562:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8013566:	b21c      	sxth	r4, r3
 8013568:	4b61      	ldr	r3, [pc, #388]	; (80136f0 <tcp_receive+0x88c>)
 801356a:	68db      	ldr	r3, [r3, #12]
 801356c:	899b      	ldrh	r3, [r3, #12]
 801356e:	b29b      	uxth	r3, r3
 8013570:	4618      	mov	r0, r3
 8013572:	f7fa ffa1 	bl	800e4b8 <lwip_htons>
 8013576:	4603      	mov	r3, r0
 8013578:	b2db      	uxtb	r3, r3
 801357a:	b29b      	uxth	r3, r3
 801357c:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8013580:	b29b      	uxth	r3, r3
 8013582:	4618      	mov	r0, r3
 8013584:	f7fa ff98 	bl	800e4b8 <lwip_htons>
 8013588:	4603      	mov	r3, r0
 801358a:	b21b      	sxth	r3, r3
 801358c:	4323      	orrs	r3, r4
 801358e:	b21a      	sxth	r2, r3
 8013590:	4b57      	ldr	r3, [pc, #348]	; (80136f0 <tcp_receive+0x88c>)
 8013592:	68db      	ldr	r3, [r3, #12]
 8013594:	b292      	uxth	r2, r2
 8013596:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 8013598:	687b      	ldr	r3, [r7, #4]
 801359a:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 801359c:	4b54      	ldr	r3, [pc, #336]	; (80136f0 <tcp_receive+0x88c>)
 801359e:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 80135a0:	4b53      	ldr	r3, [pc, #332]	; (80136f0 <tcp_receive+0x88c>)
 80135a2:	68db      	ldr	r3, [r3, #12]
 80135a4:	899b      	ldrh	r3, [r3, #12]
 80135a6:	b29b      	uxth	r3, r3
 80135a8:	4618      	mov	r0, r3
 80135aa:	f7fa ff85 	bl	800e4b8 <lwip_htons>
 80135ae:	4603      	mov	r3, r0
 80135b0:	b2db      	uxtb	r3, r3
 80135b2:	f003 0302 	and.w	r3, r3, #2
 80135b6:	2b00      	cmp	r3, #0
 80135b8:	d005      	beq.n	80135c6 <tcp_receive+0x762>
            inseg.len -= 1;
 80135ba:	4b4d      	ldr	r3, [pc, #308]	; (80136f0 <tcp_receive+0x88c>)
 80135bc:	891b      	ldrh	r3, [r3, #8]
 80135be:	3b01      	subs	r3, #1
 80135c0:	b29a      	uxth	r2, r3
 80135c2:	4b4b      	ldr	r3, [pc, #300]	; (80136f0 <tcp_receive+0x88c>)
 80135c4:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 80135c6:	4b4a      	ldr	r3, [pc, #296]	; (80136f0 <tcp_receive+0x88c>)
 80135c8:	685b      	ldr	r3, [r3, #4]
 80135ca:	4a49      	ldr	r2, [pc, #292]	; (80136f0 <tcp_receive+0x88c>)
 80135cc:	8912      	ldrh	r2, [r2, #8]
 80135ce:	4611      	mov	r1, r2
 80135d0:	4618      	mov	r0, r3
 80135d2:	f7fc f9e1 	bl	800f998 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 80135d6:	4b46      	ldr	r3, [pc, #280]	; (80136f0 <tcp_receive+0x88c>)
 80135d8:	891c      	ldrh	r4, [r3, #8]
 80135da:	4b45      	ldr	r3, [pc, #276]	; (80136f0 <tcp_receive+0x88c>)
 80135dc:	68db      	ldr	r3, [r3, #12]
 80135de:	899b      	ldrh	r3, [r3, #12]
 80135e0:	b29b      	uxth	r3, r3
 80135e2:	4618      	mov	r0, r3
 80135e4:	f7fa ff68 	bl	800e4b8 <lwip_htons>
 80135e8:	4603      	mov	r3, r0
 80135ea:	b2db      	uxtb	r3, r3
 80135ec:	f003 0303 	and.w	r3, r3, #3
 80135f0:	2b00      	cmp	r3, #0
 80135f2:	d001      	beq.n	80135f8 <tcp_receive+0x794>
 80135f4:	2301      	movs	r3, #1
 80135f6:	e000      	b.n	80135fa <tcp_receive+0x796>
 80135f8:	2300      	movs	r3, #0
 80135fa:	4423      	add	r3, r4
 80135fc:	b29a      	uxth	r2, r3
 80135fe:	4b3d      	ldr	r3, [pc, #244]	; (80136f4 <tcp_receive+0x890>)
 8013600:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8013602:	4b3c      	ldr	r3, [pc, #240]	; (80136f4 <tcp_receive+0x890>)
 8013604:	881b      	ldrh	r3, [r3, #0]
 8013606:	461a      	mov	r2, r3
 8013608:	4b38      	ldr	r3, [pc, #224]	; (80136ec <tcp_receive+0x888>)
 801360a:	681b      	ldr	r3, [r3, #0]
 801360c:	441a      	add	r2, r3
 801360e:	687b      	ldr	r3, [r7, #4]
 8013610:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013612:	6879      	ldr	r1, [r7, #4]
 8013614:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8013616:	440b      	add	r3, r1
 8013618:	429a      	cmp	r2, r3
 801361a:	d006      	beq.n	801362a <tcp_receive+0x7c6>
 801361c:	4b36      	ldr	r3, [pc, #216]	; (80136f8 <tcp_receive+0x894>)
 801361e:	f240 52cb 	movw	r2, #1483	; 0x5cb
 8013622:	4936      	ldr	r1, [pc, #216]	; (80136fc <tcp_receive+0x898>)
 8013624:	4836      	ldr	r0, [pc, #216]	; (8013700 <tcp_receive+0x89c>)
 8013626:	f005 f9fd 	bl	8018a24 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 801362a:	687b      	ldr	r3, [r7, #4]
 801362c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801362e:	2b00      	cmp	r3, #0
 8013630:	f000 80e7 	beq.w	8013802 <tcp_receive+0x99e>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8013634:	4b2e      	ldr	r3, [pc, #184]	; (80136f0 <tcp_receive+0x88c>)
 8013636:	68db      	ldr	r3, [r3, #12]
 8013638:	899b      	ldrh	r3, [r3, #12]
 801363a:	b29b      	uxth	r3, r3
 801363c:	4618      	mov	r0, r3
 801363e:	f7fa ff3b 	bl	800e4b8 <lwip_htons>
 8013642:	4603      	mov	r3, r0
 8013644:	b2db      	uxtb	r3, r3
 8013646:	f003 0301 	and.w	r3, r3, #1
 801364a:	2b00      	cmp	r3, #0
 801364c:	d010      	beq.n	8013670 <tcp_receive+0x80c>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 801364e:	e00a      	b.n	8013666 <tcp_receive+0x802>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 8013650:	687b      	ldr	r3, [r7, #4]
 8013652:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8013654:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 8013656:	687b      	ldr	r3, [r7, #4]
 8013658:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801365a:	681a      	ldr	r2, [r3, #0]
 801365c:	687b      	ldr	r3, [r7, #4]
 801365e:	675a      	str	r2, [r3, #116]	; 0x74
              tcp_seg_free(old_ooseq);
 8013660:	68f8      	ldr	r0, [r7, #12]
 8013662:	f7fd fd92 	bl	801118a <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 8013666:	687b      	ldr	r3, [r7, #4]
 8013668:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801366a:	2b00      	cmp	r3, #0
 801366c:	d1f0      	bne.n	8013650 <tcp_receive+0x7ec>
 801366e:	e0c8      	b.n	8013802 <tcp_receive+0x99e>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 8013670:	687b      	ldr	r3, [r7, #4]
 8013672:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8013674:	63fb      	str	r3, [r7, #60]	; 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 8013676:	e052      	b.n	801371e <tcp_receive+0x8ba>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8013678:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801367a:	68db      	ldr	r3, [r3, #12]
 801367c:	899b      	ldrh	r3, [r3, #12]
 801367e:	b29b      	uxth	r3, r3
 8013680:	4618      	mov	r0, r3
 8013682:	f7fa ff19 	bl	800e4b8 <lwip_htons>
 8013686:	4603      	mov	r3, r0
 8013688:	b2db      	uxtb	r3, r3
 801368a:	f003 0301 	and.w	r3, r3, #1
 801368e:	2b00      	cmp	r3, #0
 8013690:	d03d      	beq.n	801370e <tcp_receive+0x8aa>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 8013692:	4b17      	ldr	r3, [pc, #92]	; (80136f0 <tcp_receive+0x88c>)
 8013694:	68db      	ldr	r3, [r3, #12]
 8013696:	899b      	ldrh	r3, [r3, #12]
 8013698:	b29b      	uxth	r3, r3
 801369a:	4618      	mov	r0, r3
 801369c:	f7fa ff0c 	bl	800e4b8 <lwip_htons>
 80136a0:	4603      	mov	r3, r0
 80136a2:	b2db      	uxtb	r3, r3
 80136a4:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 80136a8:	2b00      	cmp	r3, #0
 80136aa:	d130      	bne.n	801370e <tcp_receive+0x8aa>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 80136ac:	4b10      	ldr	r3, [pc, #64]	; (80136f0 <tcp_receive+0x88c>)
 80136ae:	68db      	ldr	r3, [r3, #12]
 80136b0:	899b      	ldrh	r3, [r3, #12]
 80136b2:	b29c      	uxth	r4, r3
 80136b4:	2001      	movs	r0, #1
 80136b6:	f7fa feff 	bl	800e4b8 <lwip_htons>
 80136ba:	4603      	mov	r3, r0
 80136bc:	461a      	mov	r2, r3
 80136be:	4b0c      	ldr	r3, [pc, #48]	; (80136f0 <tcp_receive+0x88c>)
 80136c0:	68db      	ldr	r3, [r3, #12]
 80136c2:	4322      	orrs	r2, r4
 80136c4:	b292      	uxth	r2, r2
 80136c6:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 80136c8:	4b09      	ldr	r3, [pc, #36]	; (80136f0 <tcp_receive+0x88c>)
 80136ca:	891c      	ldrh	r4, [r3, #8]
 80136cc:	4b08      	ldr	r3, [pc, #32]	; (80136f0 <tcp_receive+0x88c>)
 80136ce:	68db      	ldr	r3, [r3, #12]
 80136d0:	899b      	ldrh	r3, [r3, #12]
 80136d2:	b29b      	uxth	r3, r3
 80136d4:	4618      	mov	r0, r3
 80136d6:	f7fa feef 	bl	800e4b8 <lwip_htons>
 80136da:	4603      	mov	r3, r0
 80136dc:	b2db      	uxtb	r3, r3
 80136de:	f003 0303 	and.w	r3, r3, #3
 80136e2:	2b00      	cmp	r3, #0
 80136e4:	d00e      	beq.n	8013704 <tcp_receive+0x8a0>
 80136e6:	2301      	movs	r3, #1
 80136e8:	e00d      	b.n	8013706 <tcp_receive+0x8a2>
 80136ea:	bf00      	nop
 80136ec:	20008010 	.word	0x20008010
 80136f0:	20007ff0 	.word	0x20007ff0
 80136f4:	2000801a 	.word	0x2000801a
 80136f8:	0801c068 	.word	0x0801c068
 80136fc:	0801c410 	.word	0x0801c410
 8013700:	0801c0b4 	.word	0x0801c0b4
 8013704:	2300      	movs	r3, #0
 8013706:	4423      	add	r3, r4
 8013708:	b29a      	uxth	r2, r3
 801370a:	4b98      	ldr	r3, [pc, #608]	; (801396c <tcp_receive+0xb08>)
 801370c:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 801370e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013710:	613b      	str	r3, [r7, #16]
              next = next->next;
 8013712:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013714:	681b      	ldr	r3, [r3, #0]
 8013716:	63fb      	str	r3, [r7, #60]	; 0x3c
              tcp_seg_free(tmp);
 8013718:	6938      	ldr	r0, [r7, #16]
 801371a:	f7fd fd36 	bl	801118a <tcp_seg_free>
            while (next &&
 801371e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013720:	2b00      	cmp	r3, #0
 8013722:	d00e      	beq.n	8013742 <tcp_receive+0x8de>
                   TCP_SEQ_GEQ(seqno + tcplen,
 8013724:	4b91      	ldr	r3, [pc, #580]	; (801396c <tcp_receive+0xb08>)
 8013726:	881b      	ldrh	r3, [r3, #0]
 8013728:	461a      	mov	r2, r3
 801372a:	4b91      	ldr	r3, [pc, #580]	; (8013970 <tcp_receive+0xb0c>)
 801372c:	681b      	ldr	r3, [r3, #0]
 801372e:	441a      	add	r2, r3
 8013730:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013732:	68db      	ldr	r3, [r3, #12]
 8013734:	685b      	ldr	r3, [r3, #4]
 8013736:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8013738:	8909      	ldrh	r1, [r1, #8]
 801373a:	440b      	add	r3, r1
 801373c:	1ad3      	subs	r3, r2, r3
            while (next &&
 801373e:	2b00      	cmp	r3, #0
 8013740:	da9a      	bge.n	8013678 <tcp_receive+0x814>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 8013742:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013744:	2b00      	cmp	r3, #0
 8013746:	d059      	beq.n	80137fc <tcp_receive+0x998>
                TCP_SEQ_GT(seqno + tcplen,
 8013748:	4b88      	ldr	r3, [pc, #544]	; (801396c <tcp_receive+0xb08>)
 801374a:	881b      	ldrh	r3, [r3, #0]
 801374c:	461a      	mov	r2, r3
 801374e:	4b88      	ldr	r3, [pc, #544]	; (8013970 <tcp_receive+0xb0c>)
 8013750:	681b      	ldr	r3, [r3, #0]
 8013752:	441a      	add	r2, r3
 8013754:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013756:	68db      	ldr	r3, [r3, #12]
 8013758:	685b      	ldr	r3, [r3, #4]
 801375a:	1ad3      	subs	r3, r2, r3
            if (next &&
 801375c:	2b00      	cmp	r3, #0
 801375e:	dd4d      	ble.n	80137fc <tcp_receive+0x998>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 8013760:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013762:	68db      	ldr	r3, [r3, #12]
 8013764:	685b      	ldr	r3, [r3, #4]
 8013766:	b29a      	uxth	r2, r3
 8013768:	4b81      	ldr	r3, [pc, #516]	; (8013970 <tcp_receive+0xb0c>)
 801376a:	681b      	ldr	r3, [r3, #0]
 801376c:	b29b      	uxth	r3, r3
 801376e:	1ad3      	subs	r3, r2, r3
 8013770:	b29a      	uxth	r2, r3
 8013772:	4b80      	ldr	r3, [pc, #512]	; (8013974 <tcp_receive+0xb10>)
 8013774:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8013776:	4b7f      	ldr	r3, [pc, #508]	; (8013974 <tcp_receive+0xb10>)
 8013778:	68db      	ldr	r3, [r3, #12]
 801377a:	899b      	ldrh	r3, [r3, #12]
 801377c:	b29b      	uxth	r3, r3
 801377e:	4618      	mov	r0, r3
 8013780:	f7fa fe9a 	bl	800e4b8 <lwip_htons>
 8013784:	4603      	mov	r3, r0
 8013786:	b2db      	uxtb	r3, r3
 8013788:	f003 0302 	and.w	r3, r3, #2
 801378c:	2b00      	cmp	r3, #0
 801378e:	d005      	beq.n	801379c <tcp_receive+0x938>
                inseg.len -= 1;
 8013790:	4b78      	ldr	r3, [pc, #480]	; (8013974 <tcp_receive+0xb10>)
 8013792:	891b      	ldrh	r3, [r3, #8]
 8013794:	3b01      	subs	r3, #1
 8013796:	b29a      	uxth	r2, r3
 8013798:	4b76      	ldr	r3, [pc, #472]	; (8013974 <tcp_receive+0xb10>)
 801379a:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 801379c:	4b75      	ldr	r3, [pc, #468]	; (8013974 <tcp_receive+0xb10>)
 801379e:	685b      	ldr	r3, [r3, #4]
 80137a0:	4a74      	ldr	r2, [pc, #464]	; (8013974 <tcp_receive+0xb10>)
 80137a2:	8912      	ldrh	r2, [r2, #8]
 80137a4:	4611      	mov	r1, r2
 80137a6:	4618      	mov	r0, r3
 80137a8:	f7fc f8f6 	bl	800f998 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 80137ac:	4b71      	ldr	r3, [pc, #452]	; (8013974 <tcp_receive+0xb10>)
 80137ae:	891c      	ldrh	r4, [r3, #8]
 80137b0:	4b70      	ldr	r3, [pc, #448]	; (8013974 <tcp_receive+0xb10>)
 80137b2:	68db      	ldr	r3, [r3, #12]
 80137b4:	899b      	ldrh	r3, [r3, #12]
 80137b6:	b29b      	uxth	r3, r3
 80137b8:	4618      	mov	r0, r3
 80137ba:	f7fa fe7d 	bl	800e4b8 <lwip_htons>
 80137be:	4603      	mov	r3, r0
 80137c0:	b2db      	uxtb	r3, r3
 80137c2:	f003 0303 	and.w	r3, r3, #3
 80137c6:	2b00      	cmp	r3, #0
 80137c8:	d001      	beq.n	80137ce <tcp_receive+0x96a>
 80137ca:	2301      	movs	r3, #1
 80137cc:	e000      	b.n	80137d0 <tcp_receive+0x96c>
 80137ce:	2300      	movs	r3, #0
 80137d0:	4423      	add	r3, r4
 80137d2:	b29a      	uxth	r2, r3
 80137d4:	4b65      	ldr	r3, [pc, #404]	; (801396c <tcp_receive+0xb08>)
 80137d6:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 80137d8:	4b64      	ldr	r3, [pc, #400]	; (801396c <tcp_receive+0xb08>)
 80137da:	881b      	ldrh	r3, [r3, #0]
 80137dc:	461a      	mov	r2, r3
 80137de:	4b64      	ldr	r3, [pc, #400]	; (8013970 <tcp_receive+0xb0c>)
 80137e0:	681b      	ldr	r3, [r3, #0]
 80137e2:	441a      	add	r2, r3
 80137e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80137e6:	68db      	ldr	r3, [r3, #12]
 80137e8:	685b      	ldr	r3, [r3, #4]
 80137ea:	429a      	cmp	r2, r3
 80137ec:	d006      	beq.n	80137fc <tcp_receive+0x998>
 80137ee:	4b62      	ldr	r3, [pc, #392]	; (8013978 <tcp_receive+0xb14>)
 80137f0:	f240 52fc 	movw	r2, #1532	; 0x5fc
 80137f4:	4961      	ldr	r1, [pc, #388]	; (801397c <tcp_receive+0xb18>)
 80137f6:	4862      	ldr	r0, [pc, #392]	; (8013980 <tcp_receive+0xb1c>)
 80137f8:	f005 f914 	bl	8018a24 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 80137fc:	687b      	ldr	r3, [r7, #4]
 80137fe:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8013800:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 8013802:	4b5a      	ldr	r3, [pc, #360]	; (801396c <tcp_receive+0xb08>)
 8013804:	881b      	ldrh	r3, [r3, #0]
 8013806:	461a      	mov	r2, r3
 8013808:	4b59      	ldr	r3, [pc, #356]	; (8013970 <tcp_receive+0xb0c>)
 801380a:	681b      	ldr	r3, [r3, #0]
 801380c:	441a      	add	r2, r3
 801380e:	687b      	ldr	r3, [r7, #4]
 8013810:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 8013812:	687b      	ldr	r3, [r7, #4]
 8013814:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8013816:	4b55      	ldr	r3, [pc, #340]	; (801396c <tcp_receive+0xb08>)
 8013818:	881b      	ldrh	r3, [r3, #0]
 801381a:	429a      	cmp	r2, r3
 801381c:	d206      	bcs.n	801382c <tcp_receive+0x9c8>
 801381e:	4b56      	ldr	r3, [pc, #344]	; (8013978 <tcp_receive+0xb14>)
 8013820:	f240 6207 	movw	r2, #1543	; 0x607
 8013824:	4957      	ldr	r1, [pc, #348]	; (8013984 <tcp_receive+0xb20>)
 8013826:	4856      	ldr	r0, [pc, #344]	; (8013980 <tcp_receive+0xb1c>)
 8013828:	f005 f8fc 	bl	8018a24 <iprintf>
        pcb->rcv_wnd -= tcplen;
 801382c:	687b      	ldr	r3, [r7, #4]
 801382e:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8013830:	4b4e      	ldr	r3, [pc, #312]	; (801396c <tcp_receive+0xb08>)
 8013832:	881b      	ldrh	r3, [r3, #0]
 8013834:	1ad3      	subs	r3, r2, r3
 8013836:	b29a      	uxth	r2, r3
 8013838:	687b      	ldr	r3, [r7, #4]
 801383a:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 801383c:	6878      	ldr	r0, [r7, #4]
 801383e:	f7fc ffc5 	bl	80107cc <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 8013842:	4b4c      	ldr	r3, [pc, #304]	; (8013974 <tcp_receive+0xb10>)
 8013844:	685b      	ldr	r3, [r3, #4]
 8013846:	891b      	ldrh	r3, [r3, #8]
 8013848:	2b00      	cmp	r3, #0
 801384a:	d006      	beq.n	801385a <tcp_receive+0x9f6>
          recv_data = inseg.p;
 801384c:	4b49      	ldr	r3, [pc, #292]	; (8013974 <tcp_receive+0xb10>)
 801384e:	685b      	ldr	r3, [r3, #4]
 8013850:	4a4d      	ldr	r2, [pc, #308]	; (8013988 <tcp_receive+0xb24>)
 8013852:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 8013854:	4b47      	ldr	r3, [pc, #284]	; (8013974 <tcp_receive+0xb10>)
 8013856:	2200      	movs	r2, #0
 8013858:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 801385a:	4b46      	ldr	r3, [pc, #280]	; (8013974 <tcp_receive+0xb10>)
 801385c:	68db      	ldr	r3, [r3, #12]
 801385e:	899b      	ldrh	r3, [r3, #12]
 8013860:	b29b      	uxth	r3, r3
 8013862:	4618      	mov	r0, r3
 8013864:	f7fa fe28 	bl	800e4b8 <lwip_htons>
 8013868:	4603      	mov	r3, r0
 801386a:	b2db      	uxtb	r3, r3
 801386c:	f003 0301 	and.w	r3, r3, #1
 8013870:	2b00      	cmp	r3, #0
 8013872:	f000 80b8 	beq.w	80139e6 <tcp_receive+0xb82>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 8013876:	4b45      	ldr	r3, [pc, #276]	; (801398c <tcp_receive+0xb28>)
 8013878:	781b      	ldrb	r3, [r3, #0]
 801387a:	f043 0320 	orr.w	r3, r3, #32
 801387e:	b2da      	uxtb	r2, r3
 8013880:	4b42      	ldr	r3, [pc, #264]	; (801398c <tcp_receive+0xb28>)
 8013882:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 8013884:	e0af      	b.n	80139e6 <tcp_receive+0xb82>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 8013886:	687b      	ldr	r3, [r7, #4]
 8013888:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801388a:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 801388c:	687b      	ldr	r3, [r7, #4]
 801388e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8013890:	68db      	ldr	r3, [r3, #12]
 8013892:	685b      	ldr	r3, [r3, #4]
 8013894:	4a36      	ldr	r2, [pc, #216]	; (8013970 <tcp_receive+0xb0c>)
 8013896:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 8013898:	68bb      	ldr	r3, [r7, #8]
 801389a:	891b      	ldrh	r3, [r3, #8]
 801389c:	461c      	mov	r4, r3
 801389e:	68bb      	ldr	r3, [r7, #8]
 80138a0:	68db      	ldr	r3, [r3, #12]
 80138a2:	899b      	ldrh	r3, [r3, #12]
 80138a4:	b29b      	uxth	r3, r3
 80138a6:	4618      	mov	r0, r3
 80138a8:	f7fa fe06 	bl	800e4b8 <lwip_htons>
 80138ac:	4603      	mov	r3, r0
 80138ae:	b2db      	uxtb	r3, r3
 80138b0:	f003 0303 	and.w	r3, r3, #3
 80138b4:	2b00      	cmp	r3, #0
 80138b6:	d001      	beq.n	80138bc <tcp_receive+0xa58>
 80138b8:	2301      	movs	r3, #1
 80138ba:	e000      	b.n	80138be <tcp_receive+0xa5a>
 80138bc:	2300      	movs	r3, #0
 80138be:	191a      	adds	r2, r3, r4
 80138c0:	687b      	ldr	r3, [r7, #4]
 80138c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80138c4:	441a      	add	r2, r3
 80138c6:	687b      	ldr	r3, [r7, #4]
 80138c8:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 80138ca:	687b      	ldr	r3, [r7, #4]
 80138cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80138ce:	461c      	mov	r4, r3
 80138d0:	68bb      	ldr	r3, [r7, #8]
 80138d2:	891b      	ldrh	r3, [r3, #8]
 80138d4:	461d      	mov	r5, r3
 80138d6:	68bb      	ldr	r3, [r7, #8]
 80138d8:	68db      	ldr	r3, [r3, #12]
 80138da:	899b      	ldrh	r3, [r3, #12]
 80138dc:	b29b      	uxth	r3, r3
 80138de:	4618      	mov	r0, r3
 80138e0:	f7fa fdea 	bl	800e4b8 <lwip_htons>
 80138e4:	4603      	mov	r3, r0
 80138e6:	b2db      	uxtb	r3, r3
 80138e8:	f003 0303 	and.w	r3, r3, #3
 80138ec:	2b00      	cmp	r3, #0
 80138ee:	d001      	beq.n	80138f4 <tcp_receive+0xa90>
 80138f0:	2301      	movs	r3, #1
 80138f2:	e000      	b.n	80138f6 <tcp_receive+0xa92>
 80138f4:	2300      	movs	r3, #0
 80138f6:	442b      	add	r3, r5
 80138f8:	429c      	cmp	r4, r3
 80138fa:	d206      	bcs.n	801390a <tcp_receive+0xaa6>
 80138fc:	4b1e      	ldr	r3, [pc, #120]	; (8013978 <tcp_receive+0xb14>)
 80138fe:	f240 622b 	movw	r2, #1579	; 0x62b
 8013902:	4923      	ldr	r1, [pc, #140]	; (8013990 <tcp_receive+0xb2c>)
 8013904:	481e      	ldr	r0, [pc, #120]	; (8013980 <tcp_receive+0xb1c>)
 8013906:	f005 f88d 	bl	8018a24 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 801390a:	68bb      	ldr	r3, [r7, #8]
 801390c:	891b      	ldrh	r3, [r3, #8]
 801390e:	461c      	mov	r4, r3
 8013910:	68bb      	ldr	r3, [r7, #8]
 8013912:	68db      	ldr	r3, [r3, #12]
 8013914:	899b      	ldrh	r3, [r3, #12]
 8013916:	b29b      	uxth	r3, r3
 8013918:	4618      	mov	r0, r3
 801391a:	f7fa fdcd 	bl	800e4b8 <lwip_htons>
 801391e:	4603      	mov	r3, r0
 8013920:	b2db      	uxtb	r3, r3
 8013922:	f003 0303 	and.w	r3, r3, #3
 8013926:	2b00      	cmp	r3, #0
 8013928:	d001      	beq.n	801392e <tcp_receive+0xaca>
 801392a:	2301      	movs	r3, #1
 801392c:	e000      	b.n	8013930 <tcp_receive+0xacc>
 801392e:	2300      	movs	r3, #0
 8013930:	1919      	adds	r1, r3, r4
 8013932:	687b      	ldr	r3, [r7, #4]
 8013934:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8013936:	b28b      	uxth	r3, r1
 8013938:	1ad3      	subs	r3, r2, r3
 801393a:	b29a      	uxth	r2, r3
 801393c:	687b      	ldr	r3, [r7, #4]
 801393e:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 8013940:	6878      	ldr	r0, [r7, #4]
 8013942:	f7fc ff43 	bl	80107cc <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 8013946:	68bb      	ldr	r3, [r7, #8]
 8013948:	685b      	ldr	r3, [r3, #4]
 801394a:	891b      	ldrh	r3, [r3, #8]
 801394c:	2b00      	cmp	r3, #0
 801394e:	d028      	beq.n	80139a2 <tcp_receive+0xb3e>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 8013950:	4b0d      	ldr	r3, [pc, #52]	; (8013988 <tcp_receive+0xb24>)
 8013952:	681b      	ldr	r3, [r3, #0]
 8013954:	2b00      	cmp	r3, #0
 8013956:	d01d      	beq.n	8013994 <tcp_receive+0xb30>
              pbuf_cat(recv_data, cseg->p);
 8013958:	4b0b      	ldr	r3, [pc, #44]	; (8013988 <tcp_receive+0xb24>)
 801395a:	681a      	ldr	r2, [r3, #0]
 801395c:	68bb      	ldr	r3, [r7, #8]
 801395e:	685b      	ldr	r3, [r3, #4]
 8013960:	4619      	mov	r1, r3
 8013962:	4610      	mov	r0, r2
 8013964:	f7fc fa60 	bl	800fe28 <pbuf_cat>
 8013968:	e018      	b.n	801399c <tcp_receive+0xb38>
 801396a:	bf00      	nop
 801396c:	2000801a 	.word	0x2000801a
 8013970:	20008010 	.word	0x20008010
 8013974:	20007ff0 	.word	0x20007ff0
 8013978:	0801c068 	.word	0x0801c068
 801397c:	0801c448 	.word	0x0801c448
 8013980:	0801c0b4 	.word	0x0801c0b4
 8013984:	0801c484 	.word	0x0801c484
 8013988:	20008020 	.word	0x20008020
 801398c:	2000801d 	.word	0x2000801d
 8013990:	0801c4a4 	.word	0x0801c4a4
            } else {
              recv_data = cseg->p;
 8013994:	68bb      	ldr	r3, [r7, #8]
 8013996:	685b      	ldr	r3, [r3, #4]
 8013998:	4a70      	ldr	r2, [pc, #448]	; (8013b5c <tcp_receive+0xcf8>)
 801399a:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 801399c:	68bb      	ldr	r3, [r7, #8]
 801399e:	2200      	movs	r2, #0
 80139a0:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 80139a2:	68bb      	ldr	r3, [r7, #8]
 80139a4:	68db      	ldr	r3, [r3, #12]
 80139a6:	899b      	ldrh	r3, [r3, #12]
 80139a8:	b29b      	uxth	r3, r3
 80139aa:	4618      	mov	r0, r3
 80139ac:	f7fa fd84 	bl	800e4b8 <lwip_htons>
 80139b0:	4603      	mov	r3, r0
 80139b2:	b2db      	uxtb	r3, r3
 80139b4:	f003 0301 	and.w	r3, r3, #1
 80139b8:	2b00      	cmp	r3, #0
 80139ba:	d00d      	beq.n	80139d8 <tcp_receive+0xb74>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 80139bc:	4b68      	ldr	r3, [pc, #416]	; (8013b60 <tcp_receive+0xcfc>)
 80139be:	781b      	ldrb	r3, [r3, #0]
 80139c0:	f043 0320 	orr.w	r3, r3, #32
 80139c4:	b2da      	uxtb	r2, r3
 80139c6:	4b66      	ldr	r3, [pc, #408]	; (8013b60 <tcp_receive+0xcfc>)
 80139c8:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 80139ca:	687b      	ldr	r3, [r7, #4]
 80139cc:	7d1b      	ldrb	r3, [r3, #20]
 80139ce:	2b04      	cmp	r3, #4
 80139d0:	d102      	bne.n	80139d8 <tcp_receive+0xb74>
              pcb->state = CLOSE_WAIT;
 80139d2:	687b      	ldr	r3, [r7, #4]
 80139d4:	2207      	movs	r2, #7
 80139d6:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 80139d8:	68bb      	ldr	r3, [r7, #8]
 80139da:	681a      	ldr	r2, [r3, #0]
 80139dc:	687b      	ldr	r3, [r7, #4]
 80139de:	675a      	str	r2, [r3, #116]	; 0x74
          tcp_seg_free(cseg);
 80139e0:	68b8      	ldr	r0, [r7, #8]
 80139e2:	f7fd fbd2 	bl	801118a <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 80139e6:	687b      	ldr	r3, [r7, #4]
 80139e8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80139ea:	2b00      	cmp	r3, #0
 80139ec:	d008      	beq.n	8013a00 <tcp_receive+0xb9c>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 80139ee:	687b      	ldr	r3, [r7, #4]
 80139f0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80139f2:	68db      	ldr	r3, [r3, #12]
 80139f4:	685a      	ldr	r2, [r3, #4]
 80139f6:	687b      	ldr	r3, [r7, #4]
 80139f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 80139fa:	429a      	cmp	r2, r3
 80139fc:	f43f af43 	beq.w	8013886 <tcp_receive+0xa22>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 8013a00:	687b      	ldr	r3, [r7, #4]
 8013a02:	8b5b      	ldrh	r3, [r3, #26]
 8013a04:	f003 0301 	and.w	r3, r3, #1
 8013a08:	2b00      	cmp	r3, #0
 8013a0a:	d00e      	beq.n	8013a2a <tcp_receive+0xbc6>
 8013a0c:	687b      	ldr	r3, [r7, #4]
 8013a0e:	8b5b      	ldrh	r3, [r3, #26]
 8013a10:	f023 0301 	bic.w	r3, r3, #1
 8013a14:	b29a      	uxth	r2, r3
 8013a16:	687b      	ldr	r3, [r7, #4]
 8013a18:	835a      	strh	r2, [r3, #26]
 8013a1a:	687b      	ldr	r3, [r7, #4]
 8013a1c:	8b5b      	ldrh	r3, [r3, #26]
 8013a1e:	f043 0302 	orr.w	r3, r3, #2
 8013a22:	b29a      	uxth	r2, r3
 8013a24:	687b      	ldr	r3, [r7, #4]
 8013a26:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8013a28:	e188      	b.n	8013d3c <tcp_receive+0xed8>
        tcp_ack(pcb);
 8013a2a:	687b      	ldr	r3, [r7, #4]
 8013a2c:	8b5b      	ldrh	r3, [r3, #26]
 8013a2e:	f043 0301 	orr.w	r3, r3, #1
 8013a32:	b29a      	uxth	r2, r3
 8013a34:	687b      	ldr	r3, [r7, #4]
 8013a36:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8013a38:	e180      	b.n	8013d3c <tcp_receive+0xed8>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 8013a3a:	687b      	ldr	r3, [r7, #4]
 8013a3c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8013a3e:	2b00      	cmp	r3, #0
 8013a40:	d106      	bne.n	8013a50 <tcp_receive+0xbec>
          pcb->ooseq = tcp_seg_copy(&inseg);
 8013a42:	4848      	ldr	r0, [pc, #288]	; (8013b64 <tcp_receive+0xd00>)
 8013a44:	f7fd fbba 	bl	80111bc <tcp_seg_copy>
 8013a48:	4602      	mov	r2, r0
 8013a4a:	687b      	ldr	r3, [r7, #4]
 8013a4c:	675a      	str	r2, [r3, #116]	; 0x74
 8013a4e:	e16d      	b.n	8013d2c <tcp_receive+0xec8>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 8013a50:	2300      	movs	r3, #0
 8013a52:	637b      	str	r3, [r7, #52]	; 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8013a54:	687b      	ldr	r3, [r7, #4]
 8013a56:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8013a58:	63bb      	str	r3, [r7, #56]	; 0x38
 8013a5a:	e157      	b.n	8013d0c <tcp_receive+0xea8>
            if (seqno == next->tcphdr->seqno) {
 8013a5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013a5e:	68db      	ldr	r3, [r3, #12]
 8013a60:	685a      	ldr	r2, [r3, #4]
 8013a62:	4b41      	ldr	r3, [pc, #260]	; (8013b68 <tcp_receive+0xd04>)
 8013a64:	681b      	ldr	r3, [r3, #0]
 8013a66:	429a      	cmp	r2, r3
 8013a68:	d11d      	bne.n	8013aa6 <tcp_receive+0xc42>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 8013a6a:	4b3e      	ldr	r3, [pc, #248]	; (8013b64 <tcp_receive+0xd00>)
 8013a6c:	891a      	ldrh	r2, [r3, #8]
 8013a6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013a70:	891b      	ldrh	r3, [r3, #8]
 8013a72:	429a      	cmp	r2, r3
 8013a74:	f240 814f 	bls.w	8013d16 <tcp_receive+0xeb2>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8013a78:	483a      	ldr	r0, [pc, #232]	; (8013b64 <tcp_receive+0xd00>)
 8013a7a:	f7fd fb9f 	bl	80111bc <tcp_seg_copy>
 8013a7e:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 8013a80:	697b      	ldr	r3, [r7, #20]
 8013a82:	2b00      	cmp	r3, #0
 8013a84:	f000 8149 	beq.w	8013d1a <tcp_receive+0xeb6>
                  if (prev != NULL) {
 8013a88:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013a8a:	2b00      	cmp	r3, #0
 8013a8c:	d003      	beq.n	8013a96 <tcp_receive+0xc32>
                    prev->next = cseg;
 8013a8e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013a90:	697a      	ldr	r2, [r7, #20]
 8013a92:	601a      	str	r2, [r3, #0]
 8013a94:	e002      	b.n	8013a9c <tcp_receive+0xc38>
                  } else {
                    pcb->ooseq = cseg;
 8013a96:	687b      	ldr	r3, [r7, #4]
 8013a98:	697a      	ldr	r2, [r7, #20]
 8013a9a:	675a      	str	r2, [r3, #116]	; 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 8013a9c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8013a9e:	6978      	ldr	r0, [r7, #20]
 8013aa0:	f7ff f8dc 	bl	8012c5c <tcp_oos_insert_segment>
                }
                break;
 8013aa4:	e139      	b.n	8013d1a <tcp_receive+0xeb6>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 8013aa6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013aa8:	2b00      	cmp	r3, #0
 8013aaa:	d117      	bne.n	8013adc <tcp_receive+0xc78>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 8013aac:	4b2e      	ldr	r3, [pc, #184]	; (8013b68 <tcp_receive+0xd04>)
 8013aae:	681a      	ldr	r2, [r3, #0]
 8013ab0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013ab2:	68db      	ldr	r3, [r3, #12]
 8013ab4:	685b      	ldr	r3, [r3, #4]
 8013ab6:	1ad3      	subs	r3, r2, r3
 8013ab8:	2b00      	cmp	r3, #0
 8013aba:	da57      	bge.n	8013b6c <tcp_receive+0xd08>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8013abc:	4829      	ldr	r0, [pc, #164]	; (8013b64 <tcp_receive+0xd00>)
 8013abe:	f7fd fb7d 	bl	80111bc <tcp_seg_copy>
 8013ac2:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 8013ac4:	69bb      	ldr	r3, [r7, #24]
 8013ac6:	2b00      	cmp	r3, #0
 8013ac8:	f000 8129 	beq.w	8013d1e <tcp_receive+0xeba>
                    pcb->ooseq = cseg;
 8013acc:	687b      	ldr	r3, [r7, #4]
 8013ace:	69ba      	ldr	r2, [r7, #24]
 8013ad0:	675a      	str	r2, [r3, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
 8013ad2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8013ad4:	69b8      	ldr	r0, [r7, #24]
 8013ad6:	f7ff f8c1 	bl	8012c5c <tcp_oos_insert_segment>
                  }
                  break;
 8013ada:	e120      	b.n	8013d1e <tcp_receive+0xeba>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 8013adc:	4b22      	ldr	r3, [pc, #136]	; (8013b68 <tcp_receive+0xd04>)
 8013ade:	681a      	ldr	r2, [r3, #0]
 8013ae0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013ae2:	68db      	ldr	r3, [r3, #12]
 8013ae4:	685b      	ldr	r3, [r3, #4]
 8013ae6:	1ad3      	subs	r3, r2, r3
 8013ae8:	3b01      	subs	r3, #1
 8013aea:	2b00      	cmp	r3, #0
 8013aec:	db3e      	blt.n	8013b6c <tcp_receive+0xd08>
 8013aee:	4b1e      	ldr	r3, [pc, #120]	; (8013b68 <tcp_receive+0xd04>)
 8013af0:	681a      	ldr	r2, [r3, #0]
 8013af2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013af4:	68db      	ldr	r3, [r3, #12]
 8013af6:	685b      	ldr	r3, [r3, #4]
 8013af8:	1ad3      	subs	r3, r2, r3
 8013afa:	3301      	adds	r3, #1
 8013afc:	2b00      	cmp	r3, #0
 8013afe:	dc35      	bgt.n	8013b6c <tcp_receive+0xd08>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8013b00:	4818      	ldr	r0, [pc, #96]	; (8013b64 <tcp_receive+0xd00>)
 8013b02:	f7fd fb5b 	bl	80111bc <tcp_seg_copy>
 8013b06:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 8013b08:	69fb      	ldr	r3, [r7, #28]
 8013b0a:	2b00      	cmp	r3, #0
 8013b0c:	f000 8109 	beq.w	8013d22 <tcp_receive+0xebe>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 8013b10:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013b12:	68db      	ldr	r3, [r3, #12]
 8013b14:	685b      	ldr	r3, [r3, #4]
 8013b16:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8013b18:	8912      	ldrh	r2, [r2, #8]
 8013b1a:	441a      	add	r2, r3
 8013b1c:	4b12      	ldr	r3, [pc, #72]	; (8013b68 <tcp_receive+0xd04>)
 8013b1e:	681b      	ldr	r3, [r3, #0]
 8013b20:	1ad3      	subs	r3, r2, r3
 8013b22:	2b00      	cmp	r3, #0
 8013b24:	dd12      	ble.n	8013b4c <tcp_receive+0xce8>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 8013b26:	4b10      	ldr	r3, [pc, #64]	; (8013b68 <tcp_receive+0xd04>)
 8013b28:	681b      	ldr	r3, [r3, #0]
 8013b2a:	b29a      	uxth	r2, r3
 8013b2c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013b2e:	68db      	ldr	r3, [r3, #12]
 8013b30:	685b      	ldr	r3, [r3, #4]
 8013b32:	b29b      	uxth	r3, r3
 8013b34:	1ad3      	subs	r3, r2, r3
 8013b36:	b29a      	uxth	r2, r3
 8013b38:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013b3a:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 8013b3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013b3e:	685a      	ldr	r2, [r3, #4]
 8013b40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013b42:	891b      	ldrh	r3, [r3, #8]
 8013b44:	4619      	mov	r1, r3
 8013b46:	4610      	mov	r0, r2
 8013b48:	f7fb ff26 	bl	800f998 <pbuf_realloc>
                    }
                    prev->next = cseg;
 8013b4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013b4e:	69fa      	ldr	r2, [r7, #28]
 8013b50:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 8013b52:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8013b54:	69f8      	ldr	r0, [r7, #28]
 8013b56:	f7ff f881 	bl	8012c5c <tcp_oos_insert_segment>
                  }
                  break;
 8013b5a:	e0e2      	b.n	8013d22 <tcp_receive+0xebe>
 8013b5c:	20008020 	.word	0x20008020
 8013b60:	2000801d 	.word	0x2000801d
 8013b64:	20007ff0 	.word	0x20007ff0
 8013b68:	20008010 	.word	0x20008010
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 8013b6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013b6e:	637b      	str	r3, [r7, #52]	; 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 8013b70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013b72:	681b      	ldr	r3, [r3, #0]
 8013b74:	2b00      	cmp	r3, #0
 8013b76:	f040 80c6 	bne.w	8013d06 <tcp_receive+0xea2>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 8013b7a:	4b80      	ldr	r3, [pc, #512]	; (8013d7c <tcp_receive+0xf18>)
 8013b7c:	681a      	ldr	r2, [r3, #0]
 8013b7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013b80:	68db      	ldr	r3, [r3, #12]
 8013b82:	685b      	ldr	r3, [r3, #4]
 8013b84:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 8013b86:	2b00      	cmp	r3, #0
 8013b88:	f340 80bd 	ble.w	8013d06 <tcp_receive+0xea2>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8013b8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013b8e:	68db      	ldr	r3, [r3, #12]
 8013b90:	899b      	ldrh	r3, [r3, #12]
 8013b92:	b29b      	uxth	r3, r3
 8013b94:	4618      	mov	r0, r3
 8013b96:	f7fa fc8f 	bl	800e4b8 <lwip_htons>
 8013b9a:	4603      	mov	r3, r0
 8013b9c:	b2db      	uxtb	r3, r3
 8013b9e:	f003 0301 	and.w	r3, r3, #1
 8013ba2:	2b00      	cmp	r3, #0
 8013ba4:	f040 80bf 	bne.w	8013d26 <tcp_receive+0xec2>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 8013ba8:	4875      	ldr	r0, [pc, #468]	; (8013d80 <tcp_receive+0xf1c>)
 8013baa:	f7fd fb07 	bl	80111bc <tcp_seg_copy>
 8013bae:	4602      	mov	r2, r0
 8013bb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013bb2:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 8013bb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013bb6:	681b      	ldr	r3, [r3, #0]
 8013bb8:	2b00      	cmp	r3, #0
 8013bba:	f000 80b6 	beq.w	8013d2a <tcp_receive+0xec6>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 8013bbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013bc0:	68db      	ldr	r3, [r3, #12]
 8013bc2:	685b      	ldr	r3, [r3, #4]
 8013bc4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8013bc6:	8912      	ldrh	r2, [r2, #8]
 8013bc8:	441a      	add	r2, r3
 8013bca:	4b6c      	ldr	r3, [pc, #432]	; (8013d7c <tcp_receive+0xf18>)
 8013bcc:	681b      	ldr	r3, [r3, #0]
 8013bce:	1ad3      	subs	r3, r2, r3
 8013bd0:	2b00      	cmp	r3, #0
 8013bd2:	dd12      	ble.n	8013bfa <tcp_receive+0xd96>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 8013bd4:	4b69      	ldr	r3, [pc, #420]	; (8013d7c <tcp_receive+0xf18>)
 8013bd6:	681b      	ldr	r3, [r3, #0]
 8013bd8:	b29a      	uxth	r2, r3
 8013bda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013bdc:	68db      	ldr	r3, [r3, #12]
 8013bde:	685b      	ldr	r3, [r3, #4]
 8013be0:	b29b      	uxth	r3, r3
 8013be2:	1ad3      	subs	r3, r2, r3
 8013be4:	b29a      	uxth	r2, r3
 8013be6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013be8:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 8013bea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013bec:	685a      	ldr	r2, [r3, #4]
 8013bee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013bf0:	891b      	ldrh	r3, [r3, #8]
 8013bf2:	4619      	mov	r1, r3
 8013bf4:	4610      	mov	r0, r2
 8013bf6:	f7fb fecf 	bl	800f998 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 8013bfa:	4b62      	ldr	r3, [pc, #392]	; (8013d84 <tcp_receive+0xf20>)
 8013bfc:	881b      	ldrh	r3, [r3, #0]
 8013bfe:	461a      	mov	r2, r3
 8013c00:	4b5e      	ldr	r3, [pc, #376]	; (8013d7c <tcp_receive+0xf18>)
 8013c02:	681b      	ldr	r3, [r3, #0]
 8013c04:	441a      	add	r2, r3
 8013c06:	687b      	ldr	r3, [r7, #4]
 8013c08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013c0a:	6879      	ldr	r1, [r7, #4]
 8013c0c:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8013c0e:	440b      	add	r3, r1
 8013c10:	1ad3      	subs	r3, r2, r3
 8013c12:	2b00      	cmp	r3, #0
 8013c14:	f340 8089 	ble.w	8013d2a <tcp_receive+0xec6>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 8013c18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013c1a:	681b      	ldr	r3, [r3, #0]
 8013c1c:	68db      	ldr	r3, [r3, #12]
 8013c1e:	899b      	ldrh	r3, [r3, #12]
 8013c20:	b29b      	uxth	r3, r3
 8013c22:	4618      	mov	r0, r3
 8013c24:	f7fa fc48 	bl	800e4b8 <lwip_htons>
 8013c28:	4603      	mov	r3, r0
 8013c2a:	b2db      	uxtb	r3, r3
 8013c2c:	f003 0301 	and.w	r3, r3, #1
 8013c30:	2b00      	cmp	r3, #0
 8013c32:	d022      	beq.n	8013c7a <tcp_receive+0xe16>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 8013c34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013c36:	681b      	ldr	r3, [r3, #0]
 8013c38:	68db      	ldr	r3, [r3, #12]
 8013c3a:	899b      	ldrh	r3, [r3, #12]
 8013c3c:	b29b      	uxth	r3, r3
 8013c3e:	b21b      	sxth	r3, r3
 8013c40:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8013c44:	b21c      	sxth	r4, r3
 8013c46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013c48:	681b      	ldr	r3, [r3, #0]
 8013c4a:	68db      	ldr	r3, [r3, #12]
 8013c4c:	899b      	ldrh	r3, [r3, #12]
 8013c4e:	b29b      	uxth	r3, r3
 8013c50:	4618      	mov	r0, r3
 8013c52:	f7fa fc31 	bl	800e4b8 <lwip_htons>
 8013c56:	4603      	mov	r3, r0
 8013c58:	b2db      	uxtb	r3, r3
 8013c5a:	b29b      	uxth	r3, r3
 8013c5c:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8013c60:	b29b      	uxth	r3, r3
 8013c62:	4618      	mov	r0, r3
 8013c64:	f7fa fc28 	bl	800e4b8 <lwip_htons>
 8013c68:	4603      	mov	r3, r0
 8013c6a:	b21b      	sxth	r3, r3
 8013c6c:	4323      	orrs	r3, r4
 8013c6e:	b21a      	sxth	r2, r3
 8013c70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013c72:	681b      	ldr	r3, [r3, #0]
 8013c74:	68db      	ldr	r3, [r3, #12]
 8013c76:	b292      	uxth	r2, r2
 8013c78:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 8013c7a:	687b      	ldr	r3, [r7, #4]
 8013c7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013c7e:	b29a      	uxth	r2, r3
 8013c80:	687b      	ldr	r3, [r7, #4]
 8013c82:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8013c84:	4413      	add	r3, r2
 8013c86:	b299      	uxth	r1, r3
 8013c88:	4b3c      	ldr	r3, [pc, #240]	; (8013d7c <tcp_receive+0xf18>)
 8013c8a:	681b      	ldr	r3, [r3, #0]
 8013c8c:	b29a      	uxth	r2, r3
 8013c8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013c90:	681b      	ldr	r3, [r3, #0]
 8013c92:	1a8a      	subs	r2, r1, r2
 8013c94:	b292      	uxth	r2, r2
 8013c96:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 8013c98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013c9a:	681b      	ldr	r3, [r3, #0]
 8013c9c:	685a      	ldr	r2, [r3, #4]
 8013c9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013ca0:	681b      	ldr	r3, [r3, #0]
 8013ca2:	891b      	ldrh	r3, [r3, #8]
 8013ca4:	4619      	mov	r1, r3
 8013ca6:	4610      	mov	r0, r2
 8013ca8:	f7fb fe76 	bl	800f998 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 8013cac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013cae:	681b      	ldr	r3, [r3, #0]
 8013cb0:	891c      	ldrh	r4, [r3, #8]
 8013cb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013cb4:	681b      	ldr	r3, [r3, #0]
 8013cb6:	68db      	ldr	r3, [r3, #12]
 8013cb8:	899b      	ldrh	r3, [r3, #12]
 8013cba:	b29b      	uxth	r3, r3
 8013cbc:	4618      	mov	r0, r3
 8013cbe:	f7fa fbfb 	bl	800e4b8 <lwip_htons>
 8013cc2:	4603      	mov	r3, r0
 8013cc4:	b2db      	uxtb	r3, r3
 8013cc6:	f003 0303 	and.w	r3, r3, #3
 8013cca:	2b00      	cmp	r3, #0
 8013ccc:	d001      	beq.n	8013cd2 <tcp_receive+0xe6e>
 8013cce:	2301      	movs	r3, #1
 8013cd0:	e000      	b.n	8013cd4 <tcp_receive+0xe70>
 8013cd2:	2300      	movs	r3, #0
 8013cd4:	4423      	add	r3, r4
 8013cd6:	b29a      	uxth	r2, r3
 8013cd8:	4b2a      	ldr	r3, [pc, #168]	; (8013d84 <tcp_receive+0xf20>)
 8013cda:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8013cdc:	4b29      	ldr	r3, [pc, #164]	; (8013d84 <tcp_receive+0xf20>)
 8013cde:	881b      	ldrh	r3, [r3, #0]
 8013ce0:	461a      	mov	r2, r3
 8013ce2:	4b26      	ldr	r3, [pc, #152]	; (8013d7c <tcp_receive+0xf18>)
 8013ce4:	681b      	ldr	r3, [r3, #0]
 8013ce6:	441a      	add	r2, r3
 8013ce8:	687b      	ldr	r3, [r7, #4]
 8013cea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013cec:	6879      	ldr	r1, [r7, #4]
 8013cee:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8013cf0:	440b      	add	r3, r1
 8013cf2:	429a      	cmp	r2, r3
 8013cf4:	d019      	beq.n	8013d2a <tcp_receive+0xec6>
 8013cf6:	4b24      	ldr	r3, [pc, #144]	; (8013d88 <tcp_receive+0xf24>)
 8013cf8:	f44f 62df 	mov.w	r2, #1784	; 0x6f8
 8013cfc:	4923      	ldr	r1, [pc, #140]	; (8013d8c <tcp_receive+0xf28>)
 8013cfe:	4824      	ldr	r0, [pc, #144]	; (8013d90 <tcp_receive+0xf2c>)
 8013d00:	f004 fe90 	bl	8018a24 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 8013d04:	e011      	b.n	8013d2a <tcp_receive+0xec6>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8013d06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013d08:	681b      	ldr	r3, [r3, #0]
 8013d0a:	63bb      	str	r3, [r7, #56]	; 0x38
 8013d0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013d0e:	2b00      	cmp	r3, #0
 8013d10:	f47f aea4 	bne.w	8013a5c <tcp_receive+0xbf8>
 8013d14:	e00a      	b.n	8013d2c <tcp_receive+0xec8>
                break;
 8013d16:	bf00      	nop
 8013d18:	e008      	b.n	8013d2c <tcp_receive+0xec8>
                break;
 8013d1a:	bf00      	nop
 8013d1c:	e006      	b.n	8013d2c <tcp_receive+0xec8>
                  break;
 8013d1e:	bf00      	nop
 8013d20:	e004      	b.n	8013d2c <tcp_receive+0xec8>
                  break;
 8013d22:	bf00      	nop
 8013d24:	e002      	b.n	8013d2c <tcp_receive+0xec8>
                  break;
 8013d26:	bf00      	nop
 8013d28:	e000      	b.n	8013d2c <tcp_receive+0xec8>
                break;
 8013d2a:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 8013d2c:	6878      	ldr	r0, [r7, #4]
 8013d2e:	f001 fa33 	bl	8015198 <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 8013d32:	e003      	b.n	8013d3c <tcp_receive+0xed8>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 8013d34:	6878      	ldr	r0, [r7, #4]
 8013d36:	f001 fa2f 	bl	8015198 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8013d3a:	e01a      	b.n	8013d72 <tcp_receive+0xf0e>
 8013d3c:	e019      	b.n	8013d72 <tcp_receive+0xf0e>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 8013d3e:	4b0f      	ldr	r3, [pc, #60]	; (8013d7c <tcp_receive+0xf18>)
 8013d40:	681a      	ldr	r2, [r3, #0]
 8013d42:	687b      	ldr	r3, [r7, #4]
 8013d44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013d46:	1ad3      	subs	r3, r2, r3
 8013d48:	2b00      	cmp	r3, #0
 8013d4a:	db0a      	blt.n	8013d62 <tcp_receive+0xefe>
 8013d4c:	4b0b      	ldr	r3, [pc, #44]	; (8013d7c <tcp_receive+0xf18>)
 8013d4e:	681a      	ldr	r2, [r3, #0]
 8013d50:	687b      	ldr	r3, [r7, #4]
 8013d52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013d54:	6879      	ldr	r1, [r7, #4]
 8013d56:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8013d58:	440b      	add	r3, r1
 8013d5a:	1ad3      	subs	r3, r2, r3
 8013d5c:	3301      	adds	r3, #1
 8013d5e:	2b00      	cmp	r3, #0
 8013d60:	dd07      	ble.n	8013d72 <tcp_receive+0xf0e>
      tcp_ack_now(pcb);
 8013d62:	687b      	ldr	r3, [r7, #4]
 8013d64:	8b5b      	ldrh	r3, [r3, #26]
 8013d66:	f043 0302 	orr.w	r3, r3, #2
 8013d6a:	b29a      	uxth	r2, r3
 8013d6c:	687b      	ldr	r3, [r7, #4]
 8013d6e:	835a      	strh	r2, [r3, #26]
    }
  }
}
 8013d70:	e7ff      	b.n	8013d72 <tcp_receive+0xf0e>
 8013d72:	bf00      	nop
 8013d74:	3750      	adds	r7, #80	; 0x50
 8013d76:	46bd      	mov	sp, r7
 8013d78:	bdb0      	pop	{r4, r5, r7, pc}
 8013d7a:	bf00      	nop
 8013d7c:	20008010 	.word	0x20008010
 8013d80:	20007ff0 	.word	0x20007ff0
 8013d84:	2000801a 	.word	0x2000801a
 8013d88:	0801c068 	.word	0x0801c068
 8013d8c:	0801c410 	.word	0x0801c410
 8013d90:	0801c0b4 	.word	0x0801c0b4

08013d94 <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 8013d94:	b480      	push	{r7}
 8013d96:	b083      	sub	sp, #12
 8013d98:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 8013d9a:	4b15      	ldr	r3, [pc, #84]	; (8013df0 <tcp_get_next_optbyte+0x5c>)
 8013d9c:	881b      	ldrh	r3, [r3, #0]
 8013d9e:	1c5a      	adds	r2, r3, #1
 8013da0:	b291      	uxth	r1, r2
 8013da2:	4a13      	ldr	r2, [pc, #76]	; (8013df0 <tcp_get_next_optbyte+0x5c>)
 8013da4:	8011      	strh	r1, [r2, #0]
 8013da6:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 8013da8:	4b12      	ldr	r3, [pc, #72]	; (8013df4 <tcp_get_next_optbyte+0x60>)
 8013daa:	681b      	ldr	r3, [r3, #0]
 8013dac:	2b00      	cmp	r3, #0
 8013dae:	d004      	beq.n	8013dba <tcp_get_next_optbyte+0x26>
 8013db0:	4b11      	ldr	r3, [pc, #68]	; (8013df8 <tcp_get_next_optbyte+0x64>)
 8013db2:	881b      	ldrh	r3, [r3, #0]
 8013db4:	88fa      	ldrh	r2, [r7, #6]
 8013db6:	429a      	cmp	r2, r3
 8013db8:	d208      	bcs.n	8013dcc <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 8013dba:	4b10      	ldr	r3, [pc, #64]	; (8013dfc <tcp_get_next_optbyte+0x68>)
 8013dbc:	681b      	ldr	r3, [r3, #0]
 8013dbe:	3314      	adds	r3, #20
 8013dc0:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 8013dc2:	88fb      	ldrh	r3, [r7, #6]
 8013dc4:	683a      	ldr	r2, [r7, #0]
 8013dc6:	4413      	add	r3, r2
 8013dc8:	781b      	ldrb	r3, [r3, #0]
 8013dca:	e00b      	b.n	8013de4 <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 8013dcc:	88fb      	ldrh	r3, [r7, #6]
 8013dce:	b2da      	uxtb	r2, r3
 8013dd0:	4b09      	ldr	r3, [pc, #36]	; (8013df8 <tcp_get_next_optbyte+0x64>)
 8013dd2:	881b      	ldrh	r3, [r3, #0]
 8013dd4:	b2db      	uxtb	r3, r3
 8013dd6:	1ad3      	subs	r3, r2, r3
 8013dd8:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 8013dda:	4b06      	ldr	r3, [pc, #24]	; (8013df4 <tcp_get_next_optbyte+0x60>)
 8013ddc:	681a      	ldr	r2, [r3, #0]
 8013dde:	797b      	ldrb	r3, [r7, #5]
 8013de0:	4413      	add	r3, r2
 8013de2:	781b      	ldrb	r3, [r3, #0]
  }
}
 8013de4:	4618      	mov	r0, r3
 8013de6:	370c      	adds	r7, #12
 8013de8:	46bd      	mov	sp, r7
 8013dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013dee:	4770      	bx	lr
 8013df0:	2000800c 	.word	0x2000800c
 8013df4:	20008008 	.word	0x20008008
 8013df8:	20008006 	.word	0x20008006
 8013dfc:	20008000 	.word	0x20008000

08013e00 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 8013e00:	b580      	push	{r7, lr}
 8013e02:	b084      	sub	sp, #16
 8013e04:	af00      	add	r7, sp, #0
 8013e06:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 8013e08:	687b      	ldr	r3, [r7, #4]
 8013e0a:	2b00      	cmp	r3, #0
 8013e0c:	d106      	bne.n	8013e1c <tcp_parseopt+0x1c>
 8013e0e:	4b32      	ldr	r3, [pc, #200]	; (8013ed8 <tcp_parseopt+0xd8>)
 8013e10:	f240 727d 	movw	r2, #1917	; 0x77d
 8013e14:	4931      	ldr	r1, [pc, #196]	; (8013edc <tcp_parseopt+0xdc>)
 8013e16:	4832      	ldr	r0, [pc, #200]	; (8013ee0 <tcp_parseopt+0xe0>)
 8013e18:	f004 fe04 	bl	8018a24 <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 8013e1c:	4b31      	ldr	r3, [pc, #196]	; (8013ee4 <tcp_parseopt+0xe4>)
 8013e1e:	881b      	ldrh	r3, [r3, #0]
 8013e20:	2b00      	cmp	r3, #0
 8013e22:	d055      	beq.n	8013ed0 <tcp_parseopt+0xd0>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8013e24:	4b30      	ldr	r3, [pc, #192]	; (8013ee8 <tcp_parseopt+0xe8>)
 8013e26:	2200      	movs	r2, #0
 8013e28:	801a      	strh	r2, [r3, #0]
 8013e2a:	e045      	b.n	8013eb8 <tcp_parseopt+0xb8>
      u8_t opt = tcp_get_next_optbyte();
 8013e2c:	f7ff ffb2 	bl	8013d94 <tcp_get_next_optbyte>
 8013e30:	4603      	mov	r3, r0
 8013e32:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 8013e34:	7bfb      	ldrb	r3, [r7, #15]
 8013e36:	2b02      	cmp	r3, #2
 8013e38:	d006      	beq.n	8013e48 <tcp_parseopt+0x48>
 8013e3a:	2b02      	cmp	r3, #2
 8013e3c:	dc2b      	bgt.n	8013e96 <tcp_parseopt+0x96>
 8013e3e:	2b00      	cmp	r3, #0
 8013e40:	d041      	beq.n	8013ec6 <tcp_parseopt+0xc6>
 8013e42:	2b01      	cmp	r3, #1
 8013e44:	d127      	bne.n	8013e96 <tcp_parseopt+0x96>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: EOL\n"));
          return;
        case LWIP_TCP_OPT_NOP:
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
 8013e46:	e037      	b.n	8013eb8 <tcp_parseopt+0xb8>
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 8013e48:	f7ff ffa4 	bl	8013d94 <tcp_get_next_optbyte>
 8013e4c:	4603      	mov	r3, r0
 8013e4e:	2b04      	cmp	r3, #4
 8013e50:	d13b      	bne.n	8013eca <tcp_parseopt+0xca>
 8013e52:	4b25      	ldr	r3, [pc, #148]	; (8013ee8 <tcp_parseopt+0xe8>)
 8013e54:	881b      	ldrh	r3, [r3, #0]
 8013e56:	3301      	adds	r3, #1
 8013e58:	4a22      	ldr	r2, [pc, #136]	; (8013ee4 <tcp_parseopt+0xe4>)
 8013e5a:	8812      	ldrh	r2, [r2, #0]
 8013e5c:	4293      	cmp	r3, r2
 8013e5e:	da34      	bge.n	8013eca <tcp_parseopt+0xca>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 8013e60:	f7ff ff98 	bl	8013d94 <tcp_get_next_optbyte>
 8013e64:	4603      	mov	r3, r0
 8013e66:	b29b      	uxth	r3, r3
 8013e68:	021b      	lsls	r3, r3, #8
 8013e6a:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 8013e6c:	f7ff ff92 	bl	8013d94 <tcp_get_next_optbyte>
 8013e70:	4603      	mov	r3, r0
 8013e72:	b29a      	uxth	r2, r3
 8013e74:	89bb      	ldrh	r3, [r7, #12]
 8013e76:	4313      	orrs	r3, r2
 8013e78:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 8013e7a:	89bb      	ldrh	r3, [r7, #12]
 8013e7c:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 8013e80:	d804      	bhi.n	8013e8c <tcp_parseopt+0x8c>
 8013e82:	89bb      	ldrh	r3, [r7, #12]
 8013e84:	2b00      	cmp	r3, #0
 8013e86:	d001      	beq.n	8013e8c <tcp_parseopt+0x8c>
 8013e88:	89ba      	ldrh	r2, [r7, #12]
 8013e8a:	e001      	b.n	8013e90 <tcp_parseopt+0x90>
 8013e8c:	f44f 7206 	mov.w	r2, #536	; 0x218
 8013e90:	687b      	ldr	r3, [r7, #4]
 8013e92:	865a      	strh	r2, [r3, #50]	; 0x32
          break;
 8013e94:	e010      	b.n	8013eb8 <tcp_parseopt+0xb8>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 8013e96:	f7ff ff7d 	bl	8013d94 <tcp_get_next_optbyte>
 8013e9a:	4603      	mov	r3, r0
 8013e9c:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 8013e9e:	7afb      	ldrb	r3, [r7, #11]
 8013ea0:	2b01      	cmp	r3, #1
 8013ea2:	d914      	bls.n	8013ece <tcp_parseopt+0xce>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 8013ea4:	7afb      	ldrb	r3, [r7, #11]
 8013ea6:	b29a      	uxth	r2, r3
 8013ea8:	4b0f      	ldr	r3, [pc, #60]	; (8013ee8 <tcp_parseopt+0xe8>)
 8013eaa:	881b      	ldrh	r3, [r3, #0]
 8013eac:	4413      	add	r3, r2
 8013eae:	b29b      	uxth	r3, r3
 8013eb0:	3b02      	subs	r3, #2
 8013eb2:	b29a      	uxth	r2, r3
 8013eb4:	4b0c      	ldr	r3, [pc, #48]	; (8013ee8 <tcp_parseopt+0xe8>)
 8013eb6:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8013eb8:	4b0b      	ldr	r3, [pc, #44]	; (8013ee8 <tcp_parseopt+0xe8>)
 8013eba:	881a      	ldrh	r2, [r3, #0]
 8013ebc:	4b09      	ldr	r3, [pc, #36]	; (8013ee4 <tcp_parseopt+0xe4>)
 8013ebe:	881b      	ldrh	r3, [r3, #0]
 8013ec0:	429a      	cmp	r2, r3
 8013ec2:	d3b3      	bcc.n	8013e2c <tcp_parseopt+0x2c>
 8013ec4:	e004      	b.n	8013ed0 <tcp_parseopt+0xd0>
          return;
 8013ec6:	bf00      	nop
 8013ec8:	e002      	b.n	8013ed0 <tcp_parseopt+0xd0>
            return;
 8013eca:	bf00      	nop
 8013ecc:	e000      	b.n	8013ed0 <tcp_parseopt+0xd0>
            return;
 8013ece:	bf00      	nop
      }
    }
  }
}
 8013ed0:	3710      	adds	r7, #16
 8013ed2:	46bd      	mov	sp, r7
 8013ed4:	bd80      	pop	{r7, pc}
 8013ed6:	bf00      	nop
 8013ed8:	0801c068 	.word	0x0801c068
 8013edc:	0801c4cc 	.word	0x0801c4cc
 8013ee0:	0801c0b4 	.word	0x0801c0b4
 8013ee4:	20008004 	.word	0x20008004
 8013ee8:	2000800c 	.word	0x2000800c

08013eec <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 8013eec:	b480      	push	{r7}
 8013eee:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 8013ef0:	4b05      	ldr	r3, [pc, #20]	; (8013f08 <tcp_trigger_input_pcb_close+0x1c>)
 8013ef2:	781b      	ldrb	r3, [r3, #0]
 8013ef4:	f043 0310 	orr.w	r3, r3, #16
 8013ef8:	b2da      	uxtb	r2, r3
 8013efa:	4b03      	ldr	r3, [pc, #12]	; (8013f08 <tcp_trigger_input_pcb_close+0x1c>)
 8013efc:	701a      	strb	r2, [r3, #0]
}
 8013efe:	bf00      	nop
 8013f00:	46bd      	mov	sp, r7
 8013f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013f06:	4770      	bx	lr
 8013f08:	2000801d 	.word	0x2000801d

08013f0c <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 8013f0c:	b580      	push	{r7, lr}
 8013f0e:	b084      	sub	sp, #16
 8013f10:	af00      	add	r7, sp, #0
 8013f12:	60f8      	str	r0, [r7, #12]
 8013f14:	60b9      	str	r1, [r7, #8]
 8013f16:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 8013f18:	68fb      	ldr	r3, [r7, #12]
 8013f1a:	2b00      	cmp	r3, #0
 8013f1c:	d00a      	beq.n	8013f34 <tcp_route+0x28>
 8013f1e:	68fb      	ldr	r3, [r7, #12]
 8013f20:	7a1b      	ldrb	r3, [r3, #8]
 8013f22:	2b00      	cmp	r3, #0
 8013f24:	d006      	beq.n	8013f34 <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 8013f26:	68fb      	ldr	r3, [r7, #12]
 8013f28:	7a1b      	ldrb	r3, [r3, #8]
 8013f2a:	4618      	mov	r0, r3
 8013f2c:	f7fb fb7a 	bl	800f624 <netif_get_by_index>
 8013f30:	4603      	mov	r3, r0
 8013f32:	e003      	b.n	8013f3c <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 8013f34:	6878      	ldr	r0, [r7, #4]
 8013f36:	f002 fe61 	bl	8016bfc <ip4_route>
 8013f3a:	4603      	mov	r3, r0
  }
}
 8013f3c:	4618      	mov	r0, r3
 8013f3e:	3710      	adds	r7, #16
 8013f40:	46bd      	mov	sp, r7
 8013f42:	bd80      	pop	{r7, pc}

08013f44 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 8013f44:	b590      	push	{r4, r7, lr}
 8013f46:	b087      	sub	sp, #28
 8013f48:	af00      	add	r7, sp, #0
 8013f4a:	60f8      	str	r0, [r7, #12]
 8013f4c:	60b9      	str	r1, [r7, #8]
 8013f4e:	603b      	str	r3, [r7, #0]
 8013f50:	4613      	mov	r3, r2
 8013f52:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 8013f54:	68fb      	ldr	r3, [r7, #12]
 8013f56:	2b00      	cmp	r3, #0
 8013f58:	d105      	bne.n	8013f66 <tcp_create_segment+0x22>
 8013f5a:	4b44      	ldr	r3, [pc, #272]	; (801406c <tcp_create_segment+0x128>)
 8013f5c:	22a3      	movs	r2, #163	; 0xa3
 8013f5e:	4944      	ldr	r1, [pc, #272]	; (8014070 <tcp_create_segment+0x12c>)
 8013f60:	4844      	ldr	r0, [pc, #272]	; (8014074 <tcp_create_segment+0x130>)
 8013f62:	f004 fd5f 	bl	8018a24 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 8013f66:	68bb      	ldr	r3, [r7, #8]
 8013f68:	2b00      	cmp	r3, #0
 8013f6a:	d105      	bne.n	8013f78 <tcp_create_segment+0x34>
 8013f6c:	4b3f      	ldr	r3, [pc, #252]	; (801406c <tcp_create_segment+0x128>)
 8013f6e:	22a4      	movs	r2, #164	; 0xa4
 8013f70:	4941      	ldr	r1, [pc, #260]	; (8014078 <tcp_create_segment+0x134>)
 8013f72:	4840      	ldr	r0, [pc, #256]	; (8014074 <tcp_create_segment+0x130>)
 8013f74:	f004 fd56 	bl	8018a24 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8013f78:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8013f7c:	009b      	lsls	r3, r3, #2
 8013f7e:	b2db      	uxtb	r3, r3
 8013f80:	f003 0304 	and.w	r3, r3, #4
 8013f84:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 8013f86:	2003      	movs	r0, #3
 8013f88:	f7fa ffc6 	bl	800ef18 <memp_malloc>
 8013f8c:	6138      	str	r0, [r7, #16]
 8013f8e:	693b      	ldr	r3, [r7, #16]
 8013f90:	2b00      	cmp	r3, #0
 8013f92:	d104      	bne.n	8013f9e <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 8013f94:	68b8      	ldr	r0, [r7, #8]
 8013f96:	f7fb fe85 	bl	800fca4 <pbuf_free>
    return NULL;
 8013f9a:	2300      	movs	r3, #0
 8013f9c:	e061      	b.n	8014062 <tcp_create_segment+0x11e>
  }
  seg->flags = optflags;
 8013f9e:	693b      	ldr	r3, [r7, #16]
 8013fa0:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8013fa4:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 8013fa6:	693b      	ldr	r3, [r7, #16]
 8013fa8:	2200      	movs	r2, #0
 8013faa:	601a      	str	r2, [r3, #0]
  seg->p = p;
 8013fac:	693b      	ldr	r3, [r7, #16]
 8013fae:	68ba      	ldr	r2, [r7, #8]
 8013fb0:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 8013fb2:	68bb      	ldr	r3, [r7, #8]
 8013fb4:	891a      	ldrh	r2, [r3, #8]
 8013fb6:	7dfb      	ldrb	r3, [r7, #23]
 8013fb8:	b29b      	uxth	r3, r3
 8013fba:	429a      	cmp	r2, r3
 8013fbc:	d205      	bcs.n	8013fca <tcp_create_segment+0x86>
 8013fbe:	4b2b      	ldr	r3, [pc, #172]	; (801406c <tcp_create_segment+0x128>)
 8013fc0:	22b0      	movs	r2, #176	; 0xb0
 8013fc2:	492e      	ldr	r1, [pc, #184]	; (801407c <tcp_create_segment+0x138>)
 8013fc4:	482b      	ldr	r0, [pc, #172]	; (8014074 <tcp_create_segment+0x130>)
 8013fc6:	f004 fd2d 	bl	8018a24 <iprintf>
  seg->len = p->tot_len - optlen;
 8013fca:	68bb      	ldr	r3, [r7, #8]
 8013fcc:	891a      	ldrh	r2, [r3, #8]
 8013fce:	7dfb      	ldrb	r3, [r7, #23]
 8013fd0:	b29b      	uxth	r3, r3
 8013fd2:	1ad3      	subs	r3, r2, r3
 8013fd4:	b29a      	uxth	r2, r3
 8013fd6:	693b      	ldr	r3, [r7, #16]
 8013fd8:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 8013fda:	2114      	movs	r1, #20
 8013fdc:	68b8      	ldr	r0, [r7, #8]
 8013fde:	f7fb fdcb 	bl	800fb78 <pbuf_add_header>
 8013fe2:	4603      	mov	r3, r0
 8013fe4:	2b00      	cmp	r3, #0
 8013fe6:	d004      	beq.n	8013ff2 <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 8013fe8:	6938      	ldr	r0, [r7, #16]
 8013fea:	f7fd f8ce 	bl	801118a <tcp_seg_free>
    return NULL;
 8013fee:	2300      	movs	r3, #0
 8013ff0:	e037      	b.n	8014062 <tcp_create_segment+0x11e>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 8013ff2:	693b      	ldr	r3, [r7, #16]
 8013ff4:	685b      	ldr	r3, [r3, #4]
 8013ff6:	685a      	ldr	r2, [r3, #4]
 8013ff8:	693b      	ldr	r3, [r7, #16]
 8013ffa:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 8013ffc:	68fb      	ldr	r3, [r7, #12]
 8013ffe:	8ada      	ldrh	r2, [r3, #22]
 8014000:	693b      	ldr	r3, [r7, #16]
 8014002:	68dc      	ldr	r4, [r3, #12]
 8014004:	4610      	mov	r0, r2
 8014006:	f7fa fa57 	bl	800e4b8 <lwip_htons>
 801400a:	4603      	mov	r3, r0
 801400c:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 801400e:	68fb      	ldr	r3, [r7, #12]
 8014010:	8b1a      	ldrh	r2, [r3, #24]
 8014012:	693b      	ldr	r3, [r7, #16]
 8014014:	68dc      	ldr	r4, [r3, #12]
 8014016:	4610      	mov	r0, r2
 8014018:	f7fa fa4e 	bl	800e4b8 <lwip_htons>
 801401c:	4603      	mov	r3, r0
 801401e:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 8014020:	693b      	ldr	r3, [r7, #16]
 8014022:	68dc      	ldr	r4, [r3, #12]
 8014024:	6838      	ldr	r0, [r7, #0]
 8014026:	f7fa fa5c 	bl	800e4e2 <lwip_htonl>
 801402a:	4603      	mov	r3, r0
 801402c:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 801402e:	7dfb      	ldrb	r3, [r7, #23]
 8014030:	089b      	lsrs	r3, r3, #2
 8014032:	b2db      	uxtb	r3, r3
 8014034:	b29b      	uxth	r3, r3
 8014036:	3305      	adds	r3, #5
 8014038:	b29b      	uxth	r3, r3
 801403a:	031b      	lsls	r3, r3, #12
 801403c:	b29a      	uxth	r2, r3
 801403e:	79fb      	ldrb	r3, [r7, #7]
 8014040:	b29b      	uxth	r3, r3
 8014042:	4313      	orrs	r3, r2
 8014044:	b29a      	uxth	r2, r3
 8014046:	693b      	ldr	r3, [r7, #16]
 8014048:	68dc      	ldr	r4, [r3, #12]
 801404a:	4610      	mov	r0, r2
 801404c:	f7fa fa34 	bl	800e4b8 <lwip_htons>
 8014050:	4603      	mov	r3, r0
 8014052:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 8014054:	693b      	ldr	r3, [r7, #16]
 8014056:	68db      	ldr	r3, [r3, #12]
 8014058:	2200      	movs	r2, #0
 801405a:	749a      	strb	r2, [r3, #18]
 801405c:	2200      	movs	r2, #0
 801405e:	74da      	strb	r2, [r3, #19]
  return seg;
 8014060:	693b      	ldr	r3, [r7, #16]
}
 8014062:	4618      	mov	r0, r3
 8014064:	371c      	adds	r7, #28
 8014066:	46bd      	mov	sp, r7
 8014068:	bd90      	pop	{r4, r7, pc}
 801406a:	bf00      	nop
 801406c:	0801c4e8 	.word	0x0801c4e8
 8014070:	0801c51c 	.word	0x0801c51c
 8014074:	0801c53c 	.word	0x0801c53c
 8014078:	0801c564 	.word	0x0801c564
 801407c:	0801c588 	.word	0x0801c588

08014080 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 8014080:	b590      	push	{r4, r7, lr}
 8014082:	b08b      	sub	sp, #44	; 0x2c
 8014084:	af02      	add	r7, sp, #8
 8014086:	6078      	str	r0, [r7, #4]
 8014088:	460b      	mov	r3, r1
 801408a:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 801408c:	2300      	movs	r3, #0
 801408e:	61fb      	str	r3, [r7, #28]
 8014090:	2300      	movs	r3, #0
 8014092:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 8014094:	2300      	movs	r3, #0
 8014096:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 8014098:	687b      	ldr	r3, [r7, #4]
 801409a:	2b00      	cmp	r3, #0
 801409c:	d106      	bne.n	80140ac <tcp_split_unsent_seg+0x2c>
 801409e:	4b95      	ldr	r3, [pc, #596]	; (80142f4 <tcp_split_unsent_seg+0x274>)
 80140a0:	f240 324b 	movw	r2, #843	; 0x34b
 80140a4:	4994      	ldr	r1, [pc, #592]	; (80142f8 <tcp_split_unsent_seg+0x278>)
 80140a6:	4895      	ldr	r0, [pc, #596]	; (80142fc <tcp_split_unsent_seg+0x27c>)
 80140a8:	f004 fcbc 	bl	8018a24 <iprintf>

  useg = pcb->unsent;
 80140ac:	687b      	ldr	r3, [r7, #4]
 80140ae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80140b0:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 80140b2:	697b      	ldr	r3, [r7, #20]
 80140b4:	2b00      	cmp	r3, #0
 80140b6:	d102      	bne.n	80140be <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 80140b8:	f04f 33ff 	mov.w	r3, #4294967295
 80140bc:	e116      	b.n	80142ec <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 80140be:	887b      	ldrh	r3, [r7, #2]
 80140c0:	2b00      	cmp	r3, #0
 80140c2:	d109      	bne.n	80140d8 <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 80140c4:	4b8b      	ldr	r3, [pc, #556]	; (80142f4 <tcp_split_unsent_seg+0x274>)
 80140c6:	f240 3253 	movw	r2, #851	; 0x353
 80140ca:	498d      	ldr	r1, [pc, #564]	; (8014300 <tcp_split_unsent_seg+0x280>)
 80140cc:	488b      	ldr	r0, [pc, #556]	; (80142fc <tcp_split_unsent_seg+0x27c>)
 80140ce:	f004 fca9 	bl	8018a24 <iprintf>
    return ERR_VAL;
 80140d2:	f06f 0305 	mvn.w	r3, #5
 80140d6:	e109      	b.n	80142ec <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 80140d8:	697b      	ldr	r3, [r7, #20]
 80140da:	891b      	ldrh	r3, [r3, #8]
 80140dc:	887a      	ldrh	r2, [r7, #2]
 80140de:	429a      	cmp	r2, r3
 80140e0:	d301      	bcc.n	80140e6 <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 80140e2:	2300      	movs	r3, #0
 80140e4:	e102      	b.n	80142ec <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 80140e6:	687b      	ldr	r3, [r7, #4]
 80140e8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80140ea:	887a      	ldrh	r2, [r7, #2]
 80140ec:	429a      	cmp	r2, r3
 80140ee:	d906      	bls.n	80140fe <tcp_split_unsent_seg+0x7e>
 80140f0:	4b80      	ldr	r3, [pc, #512]	; (80142f4 <tcp_split_unsent_seg+0x274>)
 80140f2:	f240 325b 	movw	r2, #859	; 0x35b
 80140f6:	4983      	ldr	r1, [pc, #524]	; (8014304 <tcp_split_unsent_seg+0x284>)
 80140f8:	4880      	ldr	r0, [pc, #512]	; (80142fc <tcp_split_unsent_seg+0x27c>)
 80140fa:	f004 fc93 	bl	8018a24 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 80140fe:	697b      	ldr	r3, [r7, #20]
 8014100:	891b      	ldrh	r3, [r3, #8]
 8014102:	2b00      	cmp	r3, #0
 8014104:	d106      	bne.n	8014114 <tcp_split_unsent_seg+0x94>
 8014106:	4b7b      	ldr	r3, [pc, #492]	; (80142f4 <tcp_split_unsent_seg+0x274>)
 8014108:	f44f 7257 	mov.w	r2, #860	; 0x35c
 801410c:	497e      	ldr	r1, [pc, #504]	; (8014308 <tcp_split_unsent_seg+0x288>)
 801410e:	487b      	ldr	r0, [pc, #492]	; (80142fc <tcp_split_unsent_seg+0x27c>)
 8014110:	f004 fc88 	bl	8018a24 <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 8014114:	697b      	ldr	r3, [r7, #20]
 8014116:	7a9b      	ldrb	r3, [r3, #10]
 8014118:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 801411a:	7bfb      	ldrb	r3, [r7, #15]
 801411c:	009b      	lsls	r3, r3, #2
 801411e:	b2db      	uxtb	r3, r3
 8014120:	f003 0304 	and.w	r3, r3, #4
 8014124:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 8014126:	697b      	ldr	r3, [r7, #20]
 8014128:	891a      	ldrh	r2, [r3, #8]
 801412a:	887b      	ldrh	r3, [r7, #2]
 801412c:	1ad3      	subs	r3, r2, r3
 801412e:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 8014130:	7bbb      	ldrb	r3, [r7, #14]
 8014132:	b29a      	uxth	r2, r3
 8014134:	89bb      	ldrh	r3, [r7, #12]
 8014136:	4413      	add	r3, r2
 8014138:	b29b      	uxth	r3, r3
 801413a:	f44f 7220 	mov.w	r2, #640	; 0x280
 801413e:	4619      	mov	r1, r3
 8014140:	2036      	movs	r0, #54	; 0x36
 8014142:	f7fb facb 	bl	800f6dc <pbuf_alloc>
 8014146:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8014148:	693b      	ldr	r3, [r7, #16]
 801414a:	2b00      	cmp	r3, #0
 801414c:	f000 80b7 	beq.w	80142be <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 8014150:	697b      	ldr	r3, [r7, #20]
 8014152:	685b      	ldr	r3, [r3, #4]
 8014154:	891a      	ldrh	r2, [r3, #8]
 8014156:	697b      	ldr	r3, [r7, #20]
 8014158:	891b      	ldrh	r3, [r3, #8]
 801415a:	1ad3      	subs	r3, r2, r3
 801415c:	b29a      	uxth	r2, r3
 801415e:	887b      	ldrh	r3, [r7, #2]
 8014160:	4413      	add	r3, r2
 8014162:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 8014164:	697b      	ldr	r3, [r7, #20]
 8014166:	6858      	ldr	r0, [r3, #4]
 8014168:	693b      	ldr	r3, [r7, #16]
 801416a:	685a      	ldr	r2, [r3, #4]
 801416c:	7bbb      	ldrb	r3, [r7, #14]
 801416e:	18d1      	adds	r1, r2, r3
 8014170:	897b      	ldrh	r3, [r7, #10]
 8014172:	89ba      	ldrh	r2, [r7, #12]
 8014174:	f7fb ff80 	bl	8010078 <pbuf_copy_partial>
 8014178:	4603      	mov	r3, r0
 801417a:	461a      	mov	r2, r3
 801417c:	89bb      	ldrh	r3, [r7, #12]
 801417e:	4293      	cmp	r3, r2
 8014180:	f040 809f 	bne.w	80142c2 <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 8014184:	697b      	ldr	r3, [r7, #20]
 8014186:	68db      	ldr	r3, [r3, #12]
 8014188:	899b      	ldrh	r3, [r3, #12]
 801418a:	b29b      	uxth	r3, r3
 801418c:	4618      	mov	r0, r3
 801418e:	f7fa f993 	bl	800e4b8 <lwip_htons>
 8014192:	4603      	mov	r3, r0
 8014194:	b2db      	uxtb	r3, r3
 8014196:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801419a:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 801419c:	2300      	movs	r3, #0
 801419e:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 80141a0:	7efb      	ldrb	r3, [r7, #27]
 80141a2:	f003 0308 	and.w	r3, r3, #8
 80141a6:	2b00      	cmp	r3, #0
 80141a8:	d007      	beq.n	80141ba <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 80141aa:	7efb      	ldrb	r3, [r7, #27]
 80141ac:	f023 0308 	bic.w	r3, r3, #8
 80141b0:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 80141b2:	7ebb      	ldrb	r3, [r7, #26]
 80141b4:	f043 0308 	orr.w	r3, r3, #8
 80141b8:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 80141ba:	7efb      	ldrb	r3, [r7, #27]
 80141bc:	f003 0301 	and.w	r3, r3, #1
 80141c0:	2b00      	cmp	r3, #0
 80141c2:	d007      	beq.n	80141d4 <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 80141c4:	7efb      	ldrb	r3, [r7, #27]
 80141c6:	f023 0301 	bic.w	r3, r3, #1
 80141ca:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 80141cc:	7ebb      	ldrb	r3, [r7, #26]
 80141ce:	f043 0301 	orr.w	r3, r3, #1
 80141d2:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 80141d4:	697b      	ldr	r3, [r7, #20]
 80141d6:	68db      	ldr	r3, [r3, #12]
 80141d8:	685b      	ldr	r3, [r3, #4]
 80141da:	4618      	mov	r0, r3
 80141dc:	f7fa f981 	bl	800e4e2 <lwip_htonl>
 80141e0:	4602      	mov	r2, r0
 80141e2:	887b      	ldrh	r3, [r7, #2]
 80141e4:	18d1      	adds	r1, r2, r3
 80141e6:	7eba      	ldrb	r2, [r7, #26]
 80141e8:	7bfb      	ldrb	r3, [r7, #15]
 80141ea:	9300      	str	r3, [sp, #0]
 80141ec:	460b      	mov	r3, r1
 80141ee:	6939      	ldr	r1, [r7, #16]
 80141f0:	6878      	ldr	r0, [r7, #4]
 80141f2:	f7ff fea7 	bl	8013f44 <tcp_create_segment>
 80141f6:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 80141f8:	69fb      	ldr	r3, [r7, #28]
 80141fa:	2b00      	cmp	r3, #0
 80141fc:	d063      	beq.n	80142c6 <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 80141fe:	697b      	ldr	r3, [r7, #20]
 8014200:	685b      	ldr	r3, [r3, #4]
 8014202:	4618      	mov	r0, r3
 8014204:	f7fb fdd6 	bl	800fdb4 <pbuf_clen>
 8014208:	4603      	mov	r3, r0
 801420a:	461a      	mov	r2, r3
 801420c:	687b      	ldr	r3, [r7, #4]
 801420e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8014212:	1a9b      	subs	r3, r3, r2
 8014214:	b29a      	uxth	r2, r3
 8014216:	687b      	ldr	r3, [r7, #4]
 8014218:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 801421c:	697b      	ldr	r3, [r7, #20]
 801421e:	6858      	ldr	r0, [r3, #4]
 8014220:	697b      	ldr	r3, [r7, #20]
 8014222:	685b      	ldr	r3, [r3, #4]
 8014224:	891a      	ldrh	r2, [r3, #8]
 8014226:	89bb      	ldrh	r3, [r7, #12]
 8014228:	1ad3      	subs	r3, r2, r3
 801422a:	b29b      	uxth	r3, r3
 801422c:	4619      	mov	r1, r3
 801422e:	f7fb fbb3 	bl	800f998 <pbuf_realloc>
  useg->len -= remainder;
 8014232:	697b      	ldr	r3, [r7, #20]
 8014234:	891a      	ldrh	r2, [r3, #8]
 8014236:	89bb      	ldrh	r3, [r7, #12]
 8014238:	1ad3      	subs	r3, r2, r3
 801423a:	b29a      	uxth	r2, r3
 801423c:	697b      	ldr	r3, [r7, #20]
 801423e:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 8014240:	697b      	ldr	r3, [r7, #20]
 8014242:	68db      	ldr	r3, [r3, #12]
 8014244:	899b      	ldrh	r3, [r3, #12]
 8014246:	b29c      	uxth	r4, r3
 8014248:	7efb      	ldrb	r3, [r7, #27]
 801424a:	b29b      	uxth	r3, r3
 801424c:	4618      	mov	r0, r3
 801424e:	f7fa f933 	bl	800e4b8 <lwip_htons>
 8014252:	4603      	mov	r3, r0
 8014254:	461a      	mov	r2, r3
 8014256:	697b      	ldr	r3, [r7, #20]
 8014258:	68db      	ldr	r3, [r3, #12]
 801425a:	4322      	orrs	r2, r4
 801425c:	b292      	uxth	r2, r2
 801425e:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 8014260:	697b      	ldr	r3, [r7, #20]
 8014262:	685b      	ldr	r3, [r3, #4]
 8014264:	4618      	mov	r0, r3
 8014266:	f7fb fda5 	bl	800fdb4 <pbuf_clen>
 801426a:	4603      	mov	r3, r0
 801426c:	461a      	mov	r2, r3
 801426e:	687b      	ldr	r3, [r7, #4]
 8014270:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8014274:	4413      	add	r3, r2
 8014276:	b29a      	uxth	r2, r3
 8014278:	687b      	ldr	r3, [r7, #4]
 801427a:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 801427e:	69fb      	ldr	r3, [r7, #28]
 8014280:	685b      	ldr	r3, [r3, #4]
 8014282:	4618      	mov	r0, r3
 8014284:	f7fb fd96 	bl	800fdb4 <pbuf_clen>
 8014288:	4603      	mov	r3, r0
 801428a:	461a      	mov	r2, r3
 801428c:	687b      	ldr	r3, [r7, #4]
 801428e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8014292:	4413      	add	r3, r2
 8014294:	b29a      	uxth	r2, r3
 8014296:	687b      	ldr	r3, [r7, #4]
 8014298:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 801429c:	697b      	ldr	r3, [r7, #20]
 801429e:	681a      	ldr	r2, [r3, #0]
 80142a0:	69fb      	ldr	r3, [r7, #28]
 80142a2:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 80142a4:	697b      	ldr	r3, [r7, #20]
 80142a6:	69fa      	ldr	r2, [r7, #28]
 80142a8:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 80142aa:	69fb      	ldr	r3, [r7, #28]
 80142ac:	681b      	ldr	r3, [r3, #0]
 80142ae:	2b00      	cmp	r3, #0
 80142b0:	d103      	bne.n	80142ba <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 80142b2:	687b      	ldr	r3, [r7, #4]
 80142b4:	2200      	movs	r2, #0
 80142b6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 80142ba:	2300      	movs	r3, #0
 80142bc:	e016      	b.n	80142ec <tcp_split_unsent_seg+0x26c>
    goto memerr;
 80142be:	bf00      	nop
 80142c0:	e002      	b.n	80142c8 <tcp_split_unsent_seg+0x248>
    goto memerr;
 80142c2:	bf00      	nop
 80142c4:	e000      	b.n	80142c8 <tcp_split_unsent_seg+0x248>
    goto memerr;
 80142c6:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 80142c8:	69fb      	ldr	r3, [r7, #28]
 80142ca:	2b00      	cmp	r3, #0
 80142cc:	d006      	beq.n	80142dc <tcp_split_unsent_seg+0x25c>
 80142ce:	4b09      	ldr	r3, [pc, #36]	; (80142f4 <tcp_split_unsent_seg+0x274>)
 80142d0:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 80142d4:	490d      	ldr	r1, [pc, #52]	; (801430c <tcp_split_unsent_seg+0x28c>)
 80142d6:	4809      	ldr	r0, [pc, #36]	; (80142fc <tcp_split_unsent_seg+0x27c>)
 80142d8:	f004 fba4 	bl	8018a24 <iprintf>
  if (p != NULL) {
 80142dc:	693b      	ldr	r3, [r7, #16]
 80142de:	2b00      	cmp	r3, #0
 80142e0:	d002      	beq.n	80142e8 <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 80142e2:	6938      	ldr	r0, [r7, #16]
 80142e4:	f7fb fcde 	bl	800fca4 <pbuf_free>
  }

  return ERR_MEM;
 80142e8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80142ec:	4618      	mov	r0, r3
 80142ee:	3724      	adds	r7, #36	; 0x24
 80142f0:	46bd      	mov	sp, r7
 80142f2:	bd90      	pop	{r4, r7, pc}
 80142f4:	0801c4e8 	.word	0x0801c4e8
 80142f8:	0801c87c 	.word	0x0801c87c
 80142fc:	0801c53c 	.word	0x0801c53c
 8014300:	0801c8a0 	.word	0x0801c8a0
 8014304:	0801c8c4 	.word	0x0801c8c4
 8014308:	0801c8d4 	.word	0x0801c8d4
 801430c:	0801c8e4 	.word	0x0801c8e4

08014310 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 8014310:	b590      	push	{r4, r7, lr}
 8014312:	b085      	sub	sp, #20
 8014314:	af00      	add	r7, sp, #0
 8014316:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 8014318:	687b      	ldr	r3, [r7, #4]
 801431a:	2b00      	cmp	r3, #0
 801431c:	d106      	bne.n	801432c <tcp_send_fin+0x1c>
 801431e:	4b21      	ldr	r3, [pc, #132]	; (80143a4 <tcp_send_fin+0x94>)
 8014320:	f240 32eb 	movw	r2, #1003	; 0x3eb
 8014324:	4920      	ldr	r1, [pc, #128]	; (80143a8 <tcp_send_fin+0x98>)
 8014326:	4821      	ldr	r0, [pc, #132]	; (80143ac <tcp_send_fin+0x9c>)
 8014328:	f004 fb7c 	bl	8018a24 <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 801432c:	687b      	ldr	r3, [r7, #4]
 801432e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014330:	2b00      	cmp	r3, #0
 8014332:	d02e      	beq.n	8014392 <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8014334:	687b      	ldr	r3, [r7, #4]
 8014336:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014338:	60fb      	str	r3, [r7, #12]
 801433a:	e002      	b.n	8014342 <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 801433c:	68fb      	ldr	r3, [r7, #12]
 801433e:	681b      	ldr	r3, [r3, #0]
 8014340:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8014342:	68fb      	ldr	r3, [r7, #12]
 8014344:	681b      	ldr	r3, [r3, #0]
 8014346:	2b00      	cmp	r3, #0
 8014348:	d1f8      	bne.n	801433c <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 801434a:	68fb      	ldr	r3, [r7, #12]
 801434c:	68db      	ldr	r3, [r3, #12]
 801434e:	899b      	ldrh	r3, [r3, #12]
 8014350:	b29b      	uxth	r3, r3
 8014352:	4618      	mov	r0, r3
 8014354:	f7fa f8b0 	bl	800e4b8 <lwip_htons>
 8014358:	4603      	mov	r3, r0
 801435a:	b2db      	uxtb	r3, r3
 801435c:	f003 0307 	and.w	r3, r3, #7
 8014360:	2b00      	cmp	r3, #0
 8014362:	d116      	bne.n	8014392 <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 8014364:	68fb      	ldr	r3, [r7, #12]
 8014366:	68db      	ldr	r3, [r3, #12]
 8014368:	899b      	ldrh	r3, [r3, #12]
 801436a:	b29c      	uxth	r4, r3
 801436c:	2001      	movs	r0, #1
 801436e:	f7fa f8a3 	bl	800e4b8 <lwip_htons>
 8014372:	4603      	mov	r3, r0
 8014374:	461a      	mov	r2, r3
 8014376:	68fb      	ldr	r3, [r7, #12]
 8014378:	68db      	ldr	r3, [r3, #12]
 801437a:	4322      	orrs	r2, r4
 801437c:	b292      	uxth	r2, r2
 801437e:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 8014380:	687b      	ldr	r3, [r7, #4]
 8014382:	8b5b      	ldrh	r3, [r3, #26]
 8014384:	f043 0320 	orr.w	r3, r3, #32
 8014388:	b29a      	uxth	r2, r3
 801438a:	687b      	ldr	r3, [r7, #4]
 801438c:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 801438e:	2300      	movs	r3, #0
 8014390:	e004      	b.n	801439c <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 8014392:	2101      	movs	r1, #1
 8014394:	6878      	ldr	r0, [r7, #4]
 8014396:	f000 f80b 	bl	80143b0 <tcp_enqueue_flags>
 801439a:	4603      	mov	r3, r0
}
 801439c:	4618      	mov	r0, r3
 801439e:	3714      	adds	r7, #20
 80143a0:	46bd      	mov	sp, r7
 80143a2:	bd90      	pop	{r4, r7, pc}
 80143a4:	0801c4e8 	.word	0x0801c4e8
 80143a8:	0801c8f0 	.word	0x0801c8f0
 80143ac:	0801c53c 	.word	0x0801c53c

080143b0 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 80143b0:	b580      	push	{r7, lr}
 80143b2:	b08a      	sub	sp, #40	; 0x28
 80143b4:	af02      	add	r7, sp, #8
 80143b6:	6078      	str	r0, [r7, #4]
 80143b8:	460b      	mov	r3, r1
 80143ba:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 80143bc:	2300      	movs	r3, #0
 80143be:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 80143c0:	2300      	movs	r3, #0
 80143c2:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 80143c4:	78fb      	ldrb	r3, [r7, #3]
 80143c6:	f003 0303 	and.w	r3, r3, #3
 80143ca:	2b00      	cmp	r3, #0
 80143cc:	d106      	bne.n	80143dc <tcp_enqueue_flags+0x2c>
 80143ce:	4b67      	ldr	r3, [pc, #412]	; (801456c <tcp_enqueue_flags+0x1bc>)
 80143d0:	f240 4211 	movw	r2, #1041	; 0x411
 80143d4:	4966      	ldr	r1, [pc, #408]	; (8014570 <tcp_enqueue_flags+0x1c0>)
 80143d6:	4867      	ldr	r0, [pc, #412]	; (8014574 <tcp_enqueue_flags+0x1c4>)
 80143d8:	f004 fb24 	bl	8018a24 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 80143dc:	687b      	ldr	r3, [r7, #4]
 80143de:	2b00      	cmp	r3, #0
 80143e0:	d106      	bne.n	80143f0 <tcp_enqueue_flags+0x40>
 80143e2:	4b62      	ldr	r3, [pc, #392]	; (801456c <tcp_enqueue_flags+0x1bc>)
 80143e4:	f240 4213 	movw	r2, #1043	; 0x413
 80143e8:	4963      	ldr	r1, [pc, #396]	; (8014578 <tcp_enqueue_flags+0x1c8>)
 80143ea:	4862      	ldr	r0, [pc, #392]	; (8014574 <tcp_enqueue_flags+0x1c4>)
 80143ec:	f004 fb1a 	bl	8018a24 <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 80143f0:	78fb      	ldrb	r3, [r7, #3]
 80143f2:	f003 0302 	and.w	r3, r3, #2
 80143f6:	2b00      	cmp	r3, #0
 80143f8:	d001      	beq.n	80143fe <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 80143fa:	2301      	movs	r3, #1
 80143fc:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 80143fe:	7ffb      	ldrb	r3, [r7, #31]
 8014400:	009b      	lsls	r3, r3, #2
 8014402:	b2db      	uxtb	r3, r3
 8014404:	f003 0304 	and.w	r3, r3, #4
 8014408:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 801440a:	7dfb      	ldrb	r3, [r7, #23]
 801440c:	b29b      	uxth	r3, r3
 801440e:	f44f 7220 	mov.w	r2, #640	; 0x280
 8014412:	4619      	mov	r1, r3
 8014414:	2036      	movs	r0, #54	; 0x36
 8014416:	f7fb f961 	bl	800f6dc <pbuf_alloc>
 801441a:	6138      	str	r0, [r7, #16]
 801441c:	693b      	ldr	r3, [r7, #16]
 801441e:	2b00      	cmp	r3, #0
 8014420:	d109      	bne.n	8014436 <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8014422:	687b      	ldr	r3, [r7, #4]
 8014424:	8b5b      	ldrh	r3, [r3, #26]
 8014426:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801442a:	b29a      	uxth	r2, r3
 801442c:	687b      	ldr	r3, [r7, #4]
 801442e:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8014430:	f04f 33ff 	mov.w	r3, #4294967295
 8014434:	e095      	b.n	8014562 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 8014436:	693b      	ldr	r3, [r7, #16]
 8014438:	895a      	ldrh	r2, [r3, #10]
 801443a:	7dfb      	ldrb	r3, [r7, #23]
 801443c:	b29b      	uxth	r3, r3
 801443e:	429a      	cmp	r2, r3
 8014440:	d206      	bcs.n	8014450 <tcp_enqueue_flags+0xa0>
 8014442:	4b4a      	ldr	r3, [pc, #296]	; (801456c <tcp_enqueue_flags+0x1bc>)
 8014444:	f240 4239 	movw	r2, #1081	; 0x439
 8014448:	494c      	ldr	r1, [pc, #304]	; (801457c <tcp_enqueue_flags+0x1cc>)
 801444a:	484a      	ldr	r0, [pc, #296]	; (8014574 <tcp_enqueue_flags+0x1c4>)
 801444c:	f004 faea 	bl	8018a24 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 8014450:	687b      	ldr	r3, [r7, #4]
 8014452:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 8014454:	78fa      	ldrb	r2, [r7, #3]
 8014456:	7ffb      	ldrb	r3, [r7, #31]
 8014458:	9300      	str	r3, [sp, #0]
 801445a:	460b      	mov	r3, r1
 801445c:	6939      	ldr	r1, [r7, #16]
 801445e:	6878      	ldr	r0, [r7, #4]
 8014460:	f7ff fd70 	bl	8013f44 <tcp_create_segment>
 8014464:	60f8      	str	r0, [r7, #12]
 8014466:	68fb      	ldr	r3, [r7, #12]
 8014468:	2b00      	cmp	r3, #0
 801446a:	d109      	bne.n	8014480 <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801446c:	687b      	ldr	r3, [r7, #4]
 801446e:	8b5b      	ldrh	r3, [r3, #26]
 8014470:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8014474:	b29a      	uxth	r2, r3
 8014476:	687b      	ldr	r3, [r7, #4]
 8014478:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 801447a:	f04f 33ff 	mov.w	r3, #4294967295
 801447e:	e070      	b.n	8014562 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 8014480:	68fb      	ldr	r3, [r7, #12]
 8014482:	68db      	ldr	r3, [r3, #12]
 8014484:	f003 0303 	and.w	r3, r3, #3
 8014488:	2b00      	cmp	r3, #0
 801448a:	d006      	beq.n	801449a <tcp_enqueue_flags+0xea>
 801448c:	4b37      	ldr	r3, [pc, #220]	; (801456c <tcp_enqueue_flags+0x1bc>)
 801448e:	f240 4242 	movw	r2, #1090	; 0x442
 8014492:	493b      	ldr	r1, [pc, #236]	; (8014580 <tcp_enqueue_flags+0x1d0>)
 8014494:	4837      	ldr	r0, [pc, #220]	; (8014574 <tcp_enqueue_flags+0x1c4>)
 8014496:	f004 fac5 	bl	8018a24 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 801449a:	68fb      	ldr	r3, [r7, #12]
 801449c:	891b      	ldrh	r3, [r3, #8]
 801449e:	2b00      	cmp	r3, #0
 80144a0:	d006      	beq.n	80144b0 <tcp_enqueue_flags+0x100>
 80144a2:	4b32      	ldr	r3, [pc, #200]	; (801456c <tcp_enqueue_flags+0x1bc>)
 80144a4:	f240 4243 	movw	r2, #1091	; 0x443
 80144a8:	4936      	ldr	r1, [pc, #216]	; (8014584 <tcp_enqueue_flags+0x1d4>)
 80144aa:	4832      	ldr	r0, [pc, #200]	; (8014574 <tcp_enqueue_flags+0x1c4>)
 80144ac:	f004 faba 	bl	8018a24 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 80144b0:	687b      	ldr	r3, [r7, #4]
 80144b2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80144b4:	2b00      	cmp	r3, #0
 80144b6:	d103      	bne.n	80144c0 <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 80144b8:	687b      	ldr	r3, [r7, #4]
 80144ba:	68fa      	ldr	r2, [r7, #12]
 80144bc:	66da      	str	r2, [r3, #108]	; 0x6c
 80144be:	e00d      	b.n	80144dc <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 80144c0:	687b      	ldr	r3, [r7, #4]
 80144c2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80144c4:	61bb      	str	r3, [r7, #24]
 80144c6:	e002      	b.n	80144ce <tcp_enqueue_flags+0x11e>
 80144c8:	69bb      	ldr	r3, [r7, #24]
 80144ca:	681b      	ldr	r3, [r3, #0]
 80144cc:	61bb      	str	r3, [r7, #24]
 80144ce:	69bb      	ldr	r3, [r7, #24]
 80144d0:	681b      	ldr	r3, [r3, #0]
 80144d2:	2b00      	cmp	r3, #0
 80144d4:	d1f8      	bne.n	80144c8 <tcp_enqueue_flags+0x118>
    useg->next = seg;
 80144d6:	69bb      	ldr	r3, [r7, #24]
 80144d8:	68fa      	ldr	r2, [r7, #12]
 80144da:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 80144dc:	687b      	ldr	r3, [r7, #4]
 80144de:	2200      	movs	r2, #0
 80144e0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 80144e4:	78fb      	ldrb	r3, [r7, #3]
 80144e6:	f003 0302 	and.w	r3, r3, #2
 80144ea:	2b00      	cmp	r3, #0
 80144ec:	d104      	bne.n	80144f8 <tcp_enqueue_flags+0x148>
 80144ee:	78fb      	ldrb	r3, [r7, #3]
 80144f0:	f003 0301 	and.w	r3, r3, #1
 80144f4:	2b00      	cmp	r3, #0
 80144f6:	d004      	beq.n	8014502 <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 80144f8:	687b      	ldr	r3, [r7, #4]
 80144fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80144fc:	1c5a      	adds	r2, r3, #1
 80144fe:	687b      	ldr	r3, [r7, #4]
 8014500:	65da      	str	r2, [r3, #92]	; 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 8014502:	78fb      	ldrb	r3, [r7, #3]
 8014504:	f003 0301 	and.w	r3, r3, #1
 8014508:	2b00      	cmp	r3, #0
 801450a:	d006      	beq.n	801451a <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 801450c:	687b      	ldr	r3, [r7, #4]
 801450e:	8b5b      	ldrh	r3, [r3, #26]
 8014510:	f043 0320 	orr.w	r3, r3, #32
 8014514:	b29a      	uxth	r2, r3
 8014516:	687b      	ldr	r3, [r7, #4]
 8014518:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 801451a:	68fb      	ldr	r3, [r7, #12]
 801451c:	685b      	ldr	r3, [r3, #4]
 801451e:	4618      	mov	r0, r3
 8014520:	f7fb fc48 	bl	800fdb4 <pbuf_clen>
 8014524:	4603      	mov	r3, r0
 8014526:	461a      	mov	r2, r3
 8014528:	687b      	ldr	r3, [r7, #4]
 801452a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801452e:	4413      	add	r3, r2
 8014530:	b29a      	uxth	r2, r3
 8014532:	687b      	ldr	r3, [r7, #4]
 8014534:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 8014538:	687b      	ldr	r3, [r7, #4]
 801453a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801453e:	2b00      	cmp	r3, #0
 8014540:	d00e      	beq.n	8014560 <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 8014542:	687b      	ldr	r3, [r7, #4]
 8014544:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8014546:	2b00      	cmp	r3, #0
 8014548:	d10a      	bne.n	8014560 <tcp_enqueue_flags+0x1b0>
 801454a:	687b      	ldr	r3, [r7, #4]
 801454c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801454e:	2b00      	cmp	r3, #0
 8014550:	d106      	bne.n	8014560 <tcp_enqueue_flags+0x1b0>
 8014552:	4b06      	ldr	r3, [pc, #24]	; (801456c <tcp_enqueue_flags+0x1bc>)
 8014554:	f240 4265 	movw	r2, #1125	; 0x465
 8014558:	490b      	ldr	r1, [pc, #44]	; (8014588 <tcp_enqueue_flags+0x1d8>)
 801455a:	4806      	ldr	r0, [pc, #24]	; (8014574 <tcp_enqueue_flags+0x1c4>)
 801455c:	f004 fa62 	bl	8018a24 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 8014560:	2300      	movs	r3, #0
}
 8014562:	4618      	mov	r0, r3
 8014564:	3720      	adds	r7, #32
 8014566:	46bd      	mov	sp, r7
 8014568:	bd80      	pop	{r7, pc}
 801456a:	bf00      	nop
 801456c:	0801c4e8 	.word	0x0801c4e8
 8014570:	0801c90c 	.word	0x0801c90c
 8014574:	0801c53c 	.word	0x0801c53c
 8014578:	0801c964 	.word	0x0801c964
 801457c:	0801c984 	.word	0x0801c984
 8014580:	0801c9c0 	.word	0x0801c9c0
 8014584:	0801c9d8 	.word	0x0801c9d8
 8014588:	0801ca04 	.word	0x0801ca04

0801458c <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 801458c:	b5b0      	push	{r4, r5, r7, lr}
 801458e:	b08a      	sub	sp, #40	; 0x28
 8014590:	af00      	add	r7, sp, #0
 8014592:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 8014594:	687b      	ldr	r3, [r7, #4]
 8014596:	2b00      	cmp	r3, #0
 8014598:	d106      	bne.n	80145a8 <tcp_output+0x1c>
 801459a:	4b8a      	ldr	r3, [pc, #552]	; (80147c4 <tcp_output+0x238>)
 801459c:	f240 42e1 	movw	r2, #1249	; 0x4e1
 80145a0:	4989      	ldr	r1, [pc, #548]	; (80147c8 <tcp_output+0x23c>)
 80145a2:	488a      	ldr	r0, [pc, #552]	; (80147cc <tcp_output+0x240>)
 80145a4:	f004 fa3e 	bl	8018a24 <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 80145a8:	687b      	ldr	r3, [r7, #4]
 80145aa:	7d1b      	ldrb	r3, [r3, #20]
 80145ac:	2b01      	cmp	r3, #1
 80145ae:	d106      	bne.n	80145be <tcp_output+0x32>
 80145b0:	4b84      	ldr	r3, [pc, #528]	; (80147c4 <tcp_output+0x238>)
 80145b2:	f240 42e3 	movw	r2, #1251	; 0x4e3
 80145b6:	4986      	ldr	r1, [pc, #536]	; (80147d0 <tcp_output+0x244>)
 80145b8:	4884      	ldr	r0, [pc, #528]	; (80147cc <tcp_output+0x240>)
 80145ba:	f004 fa33 	bl	8018a24 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 80145be:	4b85      	ldr	r3, [pc, #532]	; (80147d4 <tcp_output+0x248>)
 80145c0:	681b      	ldr	r3, [r3, #0]
 80145c2:	687a      	ldr	r2, [r7, #4]
 80145c4:	429a      	cmp	r2, r3
 80145c6:	d101      	bne.n	80145cc <tcp_output+0x40>
    return ERR_OK;
 80145c8:	2300      	movs	r3, #0
 80145ca:	e1ce      	b.n	801496a <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 80145cc:	687b      	ldr	r3, [r7, #4]
 80145ce:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80145d2:	687b      	ldr	r3, [r7, #4]
 80145d4:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80145d8:	4293      	cmp	r3, r2
 80145da:	bf28      	it	cs
 80145dc:	4613      	movcs	r3, r2
 80145de:	b29b      	uxth	r3, r3
 80145e0:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 80145e2:	687b      	ldr	r3, [r7, #4]
 80145e4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80145e6:	627b      	str	r3, [r7, #36]	; 0x24

  if (seg == NULL) {
 80145e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80145ea:	2b00      	cmp	r3, #0
 80145ec:	d10b      	bne.n	8014606 <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 80145ee:	687b      	ldr	r3, [r7, #4]
 80145f0:	8b5b      	ldrh	r3, [r3, #26]
 80145f2:	f003 0302 	and.w	r3, r3, #2
 80145f6:	2b00      	cmp	r3, #0
 80145f8:	f000 81aa 	beq.w	8014950 <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 80145fc:	6878      	ldr	r0, [r7, #4]
 80145fe:	f000 fdcb 	bl	8015198 <tcp_send_empty_ack>
 8014602:	4603      	mov	r3, r0
 8014604:	e1b1      	b.n	801496a <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 8014606:	6879      	ldr	r1, [r7, #4]
 8014608:	687b      	ldr	r3, [r7, #4]
 801460a:	3304      	adds	r3, #4
 801460c:	461a      	mov	r2, r3
 801460e:	6878      	ldr	r0, [r7, #4]
 8014610:	f7ff fc7c 	bl	8013f0c <tcp_route>
 8014614:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 8014616:	697b      	ldr	r3, [r7, #20]
 8014618:	2b00      	cmp	r3, #0
 801461a:	d102      	bne.n	8014622 <tcp_output+0x96>
    return ERR_RTE;
 801461c:	f06f 0303 	mvn.w	r3, #3
 8014620:	e1a3      	b.n	801496a <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 8014622:	687b      	ldr	r3, [r7, #4]
 8014624:	2b00      	cmp	r3, #0
 8014626:	d003      	beq.n	8014630 <tcp_output+0xa4>
 8014628:	687b      	ldr	r3, [r7, #4]
 801462a:	681b      	ldr	r3, [r3, #0]
 801462c:	2b00      	cmp	r3, #0
 801462e:	d111      	bne.n	8014654 <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 8014630:	697b      	ldr	r3, [r7, #20]
 8014632:	2b00      	cmp	r3, #0
 8014634:	d002      	beq.n	801463c <tcp_output+0xb0>
 8014636:	697b      	ldr	r3, [r7, #20]
 8014638:	3304      	adds	r3, #4
 801463a:	e000      	b.n	801463e <tcp_output+0xb2>
 801463c:	2300      	movs	r3, #0
 801463e:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 8014640:	693b      	ldr	r3, [r7, #16]
 8014642:	2b00      	cmp	r3, #0
 8014644:	d102      	bne.n	801464c <tcp_output+0xc0>
      return ERR_RTE;
 8014646:	f06f 0303 	mvn.w	r3, #3
 801464a:	e18e      	b.n	801496a <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 801464c:	693b      	ldr	r3, [r7, #16]
 801464e:	681a      	ldr	r2, [r3, #0]
 8014650:	687b      	ldr	r3, [r7, #4]
 8014652:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 8014654:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014656:	68db      	ldr	r3, [r3, #12]
 8014658:	685b      	ldr	r3, [r3, #4]
 801465a:	4618      	mov	r0, r3
 801465c:	f7f9 ff41 	bl	800e4e2 <lwip_htonl>
 8014660:	4602      	mov	r2, r0
 8014662:	687b      	ldr	r3, [r7, #4]
 8014664:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8014666:	1ad3      	subs	r3, r2, r3
 8014668:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801466a:	8912      	ldrh	r2, [r2, #8]
 801466c:	4413      	add	r3, r2
 801466e:	69ba      	ldr	r2, [r7, #24]
 8014670:	429a      	cmp	r2, r3
 8014672:	d227      	bcs.n	80146c4 <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 8014674:	687b      	ldr	r3, [r7, #4]
 8014676:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801467a:	461a      	mov	r2, r3
 801467c:	69bb      	ldr	r3, [r7, #24]
 801467e:	4293      	cmp	r3, r2
 8014680:	d114      	bne.n	80146ac <tcp_output+0x120>
 8014682:	687b      	ldr	r3, [r7, #4]
 8014684:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8014686:	2b00      	cmp	r3, #0
 8014688:	d110      	bne.n	80146ac <tcp_output+0x120>
 801468a:	687b      	ldr	r3, [r7, #4]
 801468c:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8014690:	2b00      	cmp	r3, #0
 8014692:	d10b      	bne.n	80146ac <tcp_output+0x120>
      pcb->persist_cnt = 0;
 8014694:	687b      	ldr	r3, [r7, #4]
 8014696:	2200      	movs	r2, #0
 8014698:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
      pcb->persist_backoff = 1;
 801469c:	687b      	ldr	r3, [r7, #4]
 801469e:	2201      	movs	r2, #1
 80146a0:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
      pcb->persist_probe = 0;
 80146a4:	687b      	ldr	r3, [r7, #4]
 80146a6:	2200      	movs	r2, #0
 80146a8:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 80146ac:	687b      	ldr	r3, [r7, #4]
 80146ae:	8b5b      	ldrh	r3, [r3, #26]
 80146b0:	f003 0302 	and.w	r3, r3, #2
 80146b4:	2b00      	cmp	r3, #0
 80146b6:	f000 814d 	beq.w	8014954 <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 80146ba:	6878      	ldr	r0, [r7, #4]
 80146bc:	f000 fd6c 	bl	8015198 <tcp_send_empty_ack>
 80146c0:	4603      	mov	r3, r0
 80146c2:	e152      	b.n	801496a <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 80146c4:	687b      	ldr	r3, [r7, #4]
 80146c6:	2200      	movs	r2, #0
 80146c8:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 80146cc:	687b      	ldr	r3, [r7, #4]
 80146ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80146d0:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 80146d2:	6a3b      	ldr	r3, [r7, #32]
 80146d4:	2b00      	cmp	r3, #0
 80146d6:	f000 811c 	beq.w	8014912 <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 80146da:	e002      	b.n	80146e2 <tcp_output+0x156>
 80146dc:	6a3b      	ldr	r3, [r7, #32]
 80146de:	681b      	ldr	r3, [r3, #0]
 80146e0:	623b      	str	r3, [r7, #32]
 80146e2:	6a3b      	ldr	r3, [r7, #32]
 80146e4:	681b      	ldr	r3, [r3, #0]
 80146e6:	2b00      	cmp	r3, #0
 80146e8:	d1f8      	bne.n	80146dc <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 80146ea:	e112      	b.n	8014912 <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 80146ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80146ee:	68db      	ldr	r3, [r3, #12]
 80146f0:	899b      	ldrh	r3, [r3, #12]
 80146f2:	b29b      	uxth	r3, r3
 80146f4:	4618      	mov	r0, r3
 80146f6:	f7f9 fedf 	bl	800e4b8 <lwip_htons>
 80146fa:	4603      	mov	r3, r0
 80146fc:	b2db      	uxtb	r3, r3
 80146fe:	f003 0304 	and.w	r3, r3, #4
 8014702:	2b00      	cmp	r3, #0
 8014704:	d006      	beq.n	8014714 <tcp_output+0x188>
 8014706:	4b2f      	ldr	r3, [pc, #188]	; (80147c4 <tcp_output+0x238>)
 8014708:	f240 5236 	movw	r2, #1334	; 0x536
 801470c:	4932      	ldr	r1, [pc, #200]	; (80147d8 <tcp_output+0x24c>)
 801470e:	482f      	ldr	r0, [pc, #188]	; (80147cc <tcp_output+0x240>)
 8014710:	f004 f988 	bl	8018a24 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8014714:	687b      	ldr	r3, [r7, #4]
 8014716:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8014718:	2b00      	cmp	r3, #0
 801471a:	d01f      	beq.n	801475c <tcp_output+0x1d0>
 801471c:	687b      	ldr	r3, [r7, #4]
 801471e:	8b5b      	ldrh	r3, [r3, #26]
 8014720:	f003 0344 	and.w	r3, r3, #68	; 0x44
 8014724:	2b00      	cmp	r3, #0
 8014726:	d119      	bne.n	801475c <tcp_output+0x1d0>
 8014728:	687b      	ldr	r3, [r7, #4]
 801472a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801472c:	2b00      	cmp	r3, #0
 801472e:	d00b      	beq.n	8014748 <tcp_output+0x1bc>
 8014730:	687b      	ldr	r3, [r7, #4]
 8014732:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014734:	681b      	ldr	r3, [r3, #0]
 8014736:	2b00      	cmp	r3, #0
 8014738:	d110      	bne.n	801475c <tcp_output+0x1d0>
 801473a:	687b      	ldr	r3, [r7, #4]
 801473c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801473e:	891a      	ldrh	r2, [r3, #8]
 8014740:	687b      	ldr	r3, [r7, #4]
 8014742:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8014744:	429a      	cmp	r2, r3
 8014746:	d209      	bcs.n	801475c <tcp_output+0x1d0>
 8014748:	687b      	ldr	r3, [r7, #4]
 801474a:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 801474e:	2b00      	cmp	r3, #0
 8014750:	d004      	beq.n	801475c <tcp_output+0x1d0>
 8014752:	687b      	ldr	r3, [r7, #4]
 8014754:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8014758:	2b08      	cmp	r3, #8
 801475a:	d901      	bls.n	8014760 <tcp_output+0x1d4>
 801475c:	2301      	movs	r3, #1
 801475e:	e000      	b.n	8014762 <tcp_output+0x1d6>
 8014760:	2300      	movs	r3, #0
 8014762:	2b00      	cmp	r3, #0
 8014764:	d106      	bne.n	8014774 <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 8014766:	687b      	ldr	r3, [r7, #4]
 8014768:	8b5b      	ldrh	r3, [r3, #26]
 801476a:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 801476e:	2b00      	cmp	r3, #0
 8014770:	f000 80e4 	beq.w	801493c <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 8014774:	687b      	ldr	r3, [r7, #4]
 8014776:	7d1b      	ldrb	r3, [r3, #20]
 8014778:	2b02      	cmp	r3, #2
 801477a:	d00d      	beq.n	8014798 <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 801477c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801477e:	68db      	ldr	r3, [r3, #12]
 8014780:	899b      	ldrh	r3, [r3, #12]
 8014782:	b29c      	uxth	r4, r3
 8014784:	2010      	movs	r0, #16
 8014786:	f7f9 fe97 	bl	800e4b8 <lwip_htons>
 801478a:	4603      	mov	r3, r0
 801478c:	461a      	mov	r2, r3
 801478e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014790:	68db      	ldr	r3, [r3, #12]
 8014792:	4322      	orrs	r2, r4
 8014794:	b292      	uxth	r2, r2
 8014796:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 8014798:	697a      	ldr	r2, [r7, #20]
 801479a:	6879      	ldr	r1, [r7, #4]
 801479c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801479e:	f000 f909 	bl	80149b4 <tcp_output_segment>
 80147a2:	4603      	mov	r3, r0
 80147a4:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 80147a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80147aa:	2b00      	cmp	r3, #0
 80147ac:	d016      	beq.n	80147dc <tcp_output+0x250>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 80147ae:	687b      	ldr	r3, [r7, #4]
 80147b0:	8b5b      	ldrh	r3, [r3, #26]
 80147b2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80147b6:	b29a      	uxth	r2, r3
 80147b8:	687b      	ldr	r3, [r7, #4]
 80147ba:	835a      	strh	r2, [r3, #26]
      return err;
 80147bc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80147c0:	e0d3      	b.n	801496a <tcp_output+0x3de>
 80147c2:	bf00      	nop
 80147c4:	0801c4e8 	.word	0x0801c4e8
 80147c8:	0801ca2c 	.word	0x0801ca2c
 80147cc:	0801c53c 	.word	0x0801c53c
 80147d0:	0801ca44 	.word	0x0801ca44
 80147d4:	20008024 	.word	0x20008024
 80147d8:	0801ca6c 	.word	0x0801ca6c
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 80147dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80147de:	681a      	ldr	r2, [r3, #0]
 80147e0:	687b      	ldr	r3, [r7, #4]
 80147e2:	66da      	str	r2, [r3, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 80147e4:	687b      	ldr	r3, [r7, #4]
 80147e6:	7d1b      	ldrb	r3, [r3, #20]
 80147e8:	2b02      	cmp	r3, #2
 80147ea:	d006      	beq.n	80147fa <tcp_output+0x26e>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 80147ec:	687b      	ldr	r3, [r7, #4]
 80147ee:	8b5b      	ldrh	r3, [r3, #26]
 80147f0:	f023 0303 	bic.w	r3, r3, #3
 80147f4:	b29a      	uxth	r2, r3
 80147f6:	687b      	ldr	r3, [r7, #4]
 80147f8:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 80147fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80147fc:	68db      	ldr	r3, [r3, #12]
 80147fe:	685b      	ldr	r3, [r3, #4]
 8014800:	4618      	mov	r0, r3
 8014802:	f7f9 fe6e 	bl	800e4e2 <lwip_htonl>
 8014806:	4604      	mov	r4, r0
 8014808:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801480a:	891b      	ldrh	r3, [r3, #8]
 801480c:	461d      	mov	r5, r3
 801480e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014810:	68db      	ldr	r3, [r3, #12]
 8014812:	899b      	ldrh	r3, [r3, #12]
 8014814:	b29b      	uxth	r3, r3
 8014816:	4618      	mov	r0, r3
 8014818:	f7f9 fe4e 	bl	800e4b8 <lwip_htons>
 801481c:	4603      	mov	r3, r0
 801481e:	b2db      	uxtb	r3, r3
 8014820:	f003 0303 	and.w	r3, r3, #3
 8014824:	2b00      	cmp	r3, #0
 8014826:	d001      	beq.n	801482c <tcp_output+0x2a0>
 8014828:	2301      	movs	r3, #1
 801482a:	e000      	b.n	801482e <tcp_output+0x2a2>
 801482c:	2300      	movs	r3, #0
 801482e:	442b      	add	r3, r5
 8014830:	4423      	add	r3, r4
 8014832:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8014834:	687b      	ldr	r3, [r7, #4]
 8014836:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8014838:	68bb      	ldr	r3, [r7, #8]
 801483a:	1ad3      	subs	r3, r2, r3
 801483c:	2b00      	cmp	r3, #0
 801483e:	da02      	bge.n	8014846 <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 8014840:	687b      	ldr	r3, [r7, #4]
 8014842:	68ba      	ldr	r2, [r7, #8]
 8014844:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 8014846:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014848:	891b      	ldrh	r3, [r3, #8]
 801484a:	461c      	mov	r4, r3
 801484c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801484e:	68db      	ldr	r3, [r3, #12]
 8014850:	899b      	ldrh	r3, [r3, #12]
 8014852:	b29b      	uxth	r3, r3
 8014854:	4618      	mov	r0, r3
 8014856:	f7f9 fe2f 	bl	800e4b8 <lwip_htons>
 801485a:	4603      	mov	r3, r0
 801485c:	b2db      	uxtb	r3, r3
 801485e:	f003 0303 	and.w	r3, r3, #3
 8014862:	2b00      	cmp	r3, #0
 8014864:	d001      	beq.n	801486a <tcp_output+0x2de>
 8014866:	2301      	movs	r3, #1
 8014868:	e000      	b.n	801486c <tcp_output+0x2e0>
 801486a:	2300      	movs	r3, #0
 801486c:	4423      	add	r3, r4
 801486e:	2b00      	cmp	r3, #0
 8014870:	d049      	beq.n	8014906 <tcp_output+0x37a>
      seg->next = NULL;
 8014872:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014874:	2200      	movs	r2, #0
 8014876:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 8014878:	687b      	ldr	r3, [r7, #4]
 801487a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801487c:	2b00      	cmp	r3, #0
 801487e:	d105      	bne.n	801488c <tcp_output+0x300>
        pcb->unacked = seg;
 8014880:	687b      	ldr	r3, [r7, #4]
 8014882:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8014884:	671a      	str	r2, [r3, #112]	; 0x70
        useg = seg;
 8014886:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014888:	623b      	str	r3, [r7, #32]
 801488a:	e03f      	b.n	801490c <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 801488c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801488e:	68db      	ldr	r3, [r3, #12]
 8014890:	685b      	ldr	r3, [r3, #4]
 8014892:	4618      	mov	r0, r3
 8014894:	f7f9 fe25 	bl	800e4e2 <lwip_htonl>
 8014898:	4604      	mov	r4, r0
 801489a:	6a3b      	ldr	r3, [r7, #32]
 801489c:	68db      	ldr	r3, [r3, #12]
 801489e:	685b      	ldr	r3, [r3, #4]
 80148a0:	4618      	mov	r0, r3
 80148a2:	f7f9 fe1e 	bl	800e4e2 <lwip_htonl>
 80148a6:	4603      	mov	r3, r0
 80148a8:	1ae3      	subs	r3, r4, r3
 80148aa:	2b00      	cmp	r3, #0
 80148ac:	da24      	bge.n	80148f8 <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 80148ae:	687b      	ldr	r3, [r7, #4]
 80148b0:	3370      	adds	r3, #112	; 0x70
 80148b2:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 80148b4:	e002      	b.n	80148bc <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 80148b6:	69fb      	ldr	r3, [r7, #28]
 80148b8:	681b      	ldr	r3, [r3, #0]
 80148ba:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 80148bc:	69fb      	ldr	r3, [r7, #28]
 80148be:	681b      	ldr	r3, [r3, #0]
 80148c0:	2b00      	cmp	r3, #0
 80148c2:	d011      	beq.n	80148e8 <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 80148c4:	69fb      	ldr	r3, [r7, #28]
 80148c6:	681b      	ldr	r3, [r3, #0]
 80148c8:	68db      	ldr	r3, [r3, #12]
 80148ca:	685b      	ldr	r3, [r3, #4]
 80148cc:	4618      	mov	r0, r3
 80148ce:	f7f9 fe08 	bl	800e4e2 <lwip_htonl>
 80148d2:	4604      	mov	r4, r0
 80148d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80148d6:	68db      	ldr	r3, [r3, #12]
 80148d8:	685b      	ldr	r3, [r3, #4]
 80148da:	4618      	mov	r0, r3
 80148dc:	f7f9 fe01 	bl	800e4e2 <lwip_htonl>
 80148e0:	4603      	mov	r3, r0
 80148e2:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 80148e4:	2b00      	cmp	r3, #0
 80148e6:	dbe6      	blt.n	80148b6 <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 80148e8:	69fb      	ldr	r3, [r7, #28]
 80148ea:	681a      	ldr	r2, [r3, #0]
 80148ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80148ee:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 80148f0:	69fb      	ldr	r3, [r7, #28]
 80148f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80148f4:	601a      	str	r2, [r3, #0]
 80148f6:	e009      	b.n	801490c <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 80148f8:	6a3b      	ldr	r3, [r7, #32]
 80148fa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80148fc:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 80148fe:	6a3b      	ldr	r3, [r7, #32]
 8014900:	681b      	ldr	r3, [r3, #0]
 8014902:	623b      	str	r3, [r7, #32]
 8014904:	e002      	b.n	801490c <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 8014906:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8014908:	f7fc fc3f 	bl	801118a <tcp_seg_free>
    }
    seg = pcb->unsent;
 801490c:	687b      	ldr	r3, [r7, #4]
 801490e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014910:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 8014912:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014914:	2b00      	cmp	r3, #0
 8014916:	d012      	beq.n	801493e <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 8014918:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801491a:	68db      	ldr	r3, [r3, #12]
 801491c:	685b      	ldr	r3, [r3, #4]
 801491e:	4618      	mov	r0, r3
 8014920:	f7f9 fddf 	bl	800e4e2 <lwip_htonl>
 8014924:	4602      	mov	r2, r0
 8014926:	687b      	ldr	r3, [r7, #4]
 8014928:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801492a:	1ad3      	subs	r3, r2, r3
 801492c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801492e:	8912      	ldrh	r2, [r2, #8]
 8014930:	4413      	add	r3, r2
  while (seg != NULL &&
 8014932:	69ba      	ldr	r2, [r7, #24]
 8014934:	429a      	cmp	r2, r3
 8014936:	f4bf aed9 	bcs.w	80146ec <tcp_output+0x160>
 801493a:	e000      	b.n	801493e <tcp_output+0x3b2>
      break;
 801493c:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 801493e:	687b      	ldr	r3, [r7, #4]
 8014940:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014942:	2b00      	cmp	r3, #0
 8014944:	d108      	bne.n	8014958 <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 8014946:	687b      	ldr	r3, [r7, #4]
 8014948:	2200      	movs	r2, #0
 801494a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 801494e:	e004      	b.n	801495a <tcp_output+0x3ce>
    goto output_done;
 8014950:	bf00      	nop
 8014952:	e002      	b.n	801495a <tcp_output+0x3ce>
    goto output_done;
 8014954:	bf00      	nop
 8014956:	e000      	b.n	801495a <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 8014958:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 801495a:	687b      	ldr	r3, [r7, #4]
 801495c:	8b5b      	ldrh	r3, [r3, #26]
 801495e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8014962:	b29a      	uxth	r2, r3
 8014964:	687b      	ldr	r3, [r7, #4]
 8014966:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 8014968:	2300      	movs	r3, #0
}
 801496a:	4618      	mov	r0, r3
 801496c:	3728      	adds	r7, #40	; 0x28
 801496e:	46bd      	mov	sp, r7
 8014970:	bdb0      	pop	{r4, r5, r7, pc}
 8014972:	bf00      	nop

08014974 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 8014974:	b580      	push	{r7, lr}
 8014976:	b082      	sub	sp, #8
 8014978:	af00      	add	r7, sp, #0
 801497a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 801497c:	687b      	ldr	r3, [r7, #4]
 801497e:	2b00      	cmp	r3, #0
 8014980:	d106      	bne.n	8014990 <tcp_output_segment_busy+0x1c>
 8014982:	4b09      	ldr	r3, [pc, #36]	; (80149a8 <tcp_output_segment_busy+0x34>)
 8014984:	f240 529a 	movw	r2, #1434	; 0x59a
 8014988:	4908      	ldr	r1, [pc, #32]	; (80149ac <tcp_output_segment_busy+0x38>)
 801498a:	4809      	ldr	r0, [pc, #36]	; (80149b0 <tcp_output_segment_busy+0x3c>)
 801498c:	f004 f84a 	bl	8018a24 <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 8014990:	687b      	ldr	r3, [r7, #4]
 8014992:	685b      	ldr	r3, [r3, #4]
 8014994:	7b9b      	ldrb	r3, [r3, #14]
 8014996:	2b01      	cmp	r3, #1
 8014998:	d001      	beq.n	801499e <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 801499a:	2301      	movs	r3, #1
 801499c:	e000      	b.n	80149a0 <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 801499e:	2300      	movs	r3, #0
}
 80149a0:	4618      	mov	r0, r3
 80149a2:	3708      	adds	r7, #8
 80149a4:	46bd      	mov	sp, r7
 80149a6:	bd80      	pop	{r7, pc}
 80149a8:	0801c4e8 	.word	0x0801c4e8
 80149ac:	0801ca84 	.word	0x0801ca84
 80149b0:	0801c53c 	.word	0x0801c53c

080149b4 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 80149b4:	b5b0      	push	{r4, r5, r7, lr}
 80149b6:	b08c      	sub	sp, #48	; 0x30
 80149b8:	af04      	add	r7, sp, #16
 80149ba:	60f8      	str	r0, [r7, #12]
 80149bc:	60b9      	str	r1, [r7, #8]
 80149be:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 80149c0:	68fb      	ldr	r3, [r7, #12]
 80149c2:	2b00      	cmp	r3, #0
 80149c4:	d106      	bne.n	80149d4 <tcp_output_segment+0x20>
 80149c6:	4b64      	ldr	r3, [pc, #400]	; (8014b58 <tcp_output_segment+0x1a4>)
 80149c8:	f44f 62b7 	mov.w	r2, #1464	; 0x5b8
 80149cc:	4963      	ldr	r1, [pc, #396]	; (8014b5c <tcp_output_segment+0x1a8>)
 80149ce:	4864      	ldr	r0, [pc, #400]	; (8014b60 <tcp_output_segment+0x1ac>)
 80149d0:	f004 f828 	bl	8018a24 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 80149d4:	68bb      	ldr	r3, [r7, #8]
 80149d6:	2b00      	cmp	r3, #0
 80149d8:	d106      	bne.n	80149e8 <tcp_output_segment+0x34>
 80149da:	4b5f      	ldr	r3, [pc, #380]	; (8014b58 <tcp_output_segment+0x1a4>)
 80149dc:	f240 52b9 	movw	r2, #1465	; 0x5b9
 80149e0:	4960      	ldr	r1, [pc, #384]	; (8014b64 <tcp_output_segment+0x1b0>)
 80149e2:	485f      	ldr	r0, [pc, #380]	; (8014b60 <tcp_output_segment+0x1ac>)
 80149e4:	f004 f81e 	bl	8018a24 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 80149e8:	687b      	ldr	r3, [r7, #4]
 80149ea:	2b00      	cmp	r3, #0
 80149ec:	d106      	bne.n	80149fc <tcp_output_segment+0x48>
 80149ee:	4b5a      	ldr	r3, [pc, #360]	; (8014b58 <tcp_output_segment+0x1a4>)
 80149f0:	f240 52ba 	movw	r2, #1466	; 0x5ba
 80149f4:	495c      	ldr	r1, [pc, #368]	; (8014b68 <tcp_output_segment+0x1b4>)
 80149f6:	485a      	ldr	r0, [pc, #360]	; (8014b60 <tcp_output_segment+0x1ac>)
 80149f8:	f004 f814 	bl	8018a24 <iprintf>

  if (tcp_output_segment_busy(seg)) {
 80149fc:	68f8      	ldr	r0, [r7, #12]
 80149fe:	f7ff ffb9 	bl	8014974 <tcp_output_segment_busy>
 8014a02:	4603      	mov	r3, r0
 8014a04:	2b00      	cmp	r3, #0
 8014a06:	d001      	beq.n	8014a0c <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 8014a08:	2300      	movs	r3, #0
 8014a0a:	e0a1      	b.n	8014b50 <tcp_output_segment+0x19c>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 8014a0c:	68bb      	ldr	r3, [r7, #8]
 8014a0e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8014a10:	68fb      	ldr	r3, [r7, #12]
 8014a12:	68dc      	ldr	r4, [r3, #12]
 8014a14:	4610      	mov	r0, r2
 8014a16:	f7f9 fd64 	bl	800e4e2 <lwip_htonl>
 8014a1a:	4603      	mov	r3, r0
 8014a1c:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 8014a1e:	68bb      	ldr	r3, [r7, #8]
 8014a20:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 8014a22:	68fb      	ldr	r3, [r7, #12]
 8014a24:	68dc      	ldr	r4, [r3, #12]
 8014a26:	4610      	mov	r0, r2
 8014a28:	f7f9 fd46 	bl	800e4b8 <lwip_htons>
 8014a2c:	4603      	mov	r3, r0
 8014a2e:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8014a30:	68bb      	ldr	r3, [r7, #8]
 8014a32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014a34:	68ba      	ldr	r2, [r7, #8]
 8014a36:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 8014a38:	441a      	add	r2, r3
 8014a3a:	68bb      	ldr	r3, [r7, #8]
 8014a3c:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 8014a3e:	68fb      	ldr	r3, [r7, #12]
 8014a40:	68db      	ldr	r3, [r3, #12]
 8014a42:	3314      	adds	r3, #20
 8014a44:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 8014a46:	68fb      	ldr	r3, [r7, #12]
 8014a48:	7a9b      	ldrb	r3, [r3, #10]
 8014a4a:	f003 0301 	and.w	r3, r3, #1
 8014a4e:	2b00      	cmp	r3, #0
 8014a50:	d015      	beq.n	8014a7e <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 8014a52:	68bb      	ldr	r3, [r7, #8]
 8014a54:	3304      	adds	r3, #4
 8014a56:	461a      	mov	r2, r3
 8014a58:	6879      	ldr	r1, [r7, #4]
 8014a5a:	f44f 7006 	mov.w	r0, #536	; 0x218
 8014a5e:	f7fc fe8b 	bl	8011778 <tcp_eff_send_mss_netif>
 8014a62:	4603      	mov	r3, r0
 8014a64:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 8014a66:	8b7b      	ldrh	r3, [r7, #26]
 8014a68:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 8014a6c:	4618      	mov	r0, r3
 8014a6e:	f7f9 fd38 	bl	800e4e2 <lwip_htonl>
 8014a72:	4602      	mov	r2, r0
 8014a74:	69fb      	ldr	r3, [r7, #28]
 8014a76:	601a      	str	r2, [r3, #0]
    opts += 1;
 8014a78:	69fb      	ldr	r3, [r7, #28]
 8014a7a:	3304      	adds	r3, #4
 8014a7c:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 8014a7e:	68bb      	ldr	r3, [r7, #8]
 8014a80:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8014a84:	2b00      	cmp	r3, #0
 8014a86:	da02      	bge.n	8014a8e <tcp_output_segment+0xda>
    pcb->rtime = 0;
 8014a88:	68bb      	ldr	r3, [r7, #8]
 8014a8a:	2200      	movs	r2, #0
 8014a8c:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 8014a8e:	68bb      	ldr	r3, [r7, #8]
 8014a90:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8014a92:	2b00      	cmp	r3, #0
 8014a94:	d10c      	bne.n	8014ab0 <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 8014a96:	4b35      	ldr	r3, [pc, #212]	; (8014b6c <tcp_output_segment+0x1b8>)
 8014a98:	681a      	ldr	r2, [r3, #0]
 8014a9a:	68bb      	ldr	r3, [r7, #8]
 8014a9c:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 8014a9e:	68fb      	ldr	r3, [r7, #12]
 8014aa0:	68db      	ldr	r3, [r3, #12]
 8014aa2:	685b      	ldr	r3, [r3, #4]
 8014aa4:	4618      	mov	r0, r3
 8014aa6:	f7f9 fd1c 	bl	800e4e2 <lwip_htonl>
 8014aaa:	4602      	mov	r2, r0
 8014aac:	68bb      	ldr	r3, [r7, #8]
 8014aae:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 8014ab0:	68fb      	ldr	r3, [r7, #12]
 8014ab2:	68da      	ldr	r2, [r3, #12]
 8014ab4:	68fb      	ldr	r3, [r7, #12]
 8014ab6:	685b      	ldr	r3, [r3, #4]
 8014ab8:	685b      	ldr	r3, [r3, #4]
 8014aba:	1ad3      	subs	r3, r2, r3
 8014abc:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 8014abe:	68fb      	ldr	r3, [r7, #12]
 8014ac0:	685b      	ldr	r3, [r3, #4]
 8014ac2:	8959      	ldrh	r1, [r3, #10]
 8014ac4:	68fb      	ldr	r3, [r7, #12]
 8014ac6:	685b      	ldr	r3, [r3, #4]
 8014ac8:	8b3a      	ldrh	r2, [r7, #24]
 8014aca:	1a8a      	subs	r2, r1, r2
 8014acc:	b292      	uxth	r2, r2
 8014ace:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 8014ad0:	68fb      	ldr	r3, [r7, #12]
 8014ad2:	685b      	ldr	r3, [r3, #4]
 8014ad4:	8919      	ldrh	r1, [r3, #8]
 8014ad6:	68fb      	ldr	r3, [r7, #12]
 8014ad8:	685b      	ldr	r3, [r3, #4]
 8014ada:	8b3a      	ldrh	r2, [r7, #24]
 8014adc:	1a8a      	subs	r2, r1, r2
 8014ade:	b292      	uxth	r2, r2
 8014ae0:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 8014ae2:	68fb      	ldr	r3, [r7, #12]
 8014ae4:	685b      	ldr	r3, [r3, #4]
 8014ae6:	68fa      	ldr	r2, [r7, #12]
 8014ae8:	68d2      	ldr	r2, [r2, #12]
 8014aea:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 8014aec:	68fb      	ldr	r3, [r7, #12]
 8014aee:	68db      	ldr	r3, [r3, #12]
 8014af0:	2200      	movs	r2, #0
 8014af2:	741a      	strb	r2, [r3, #16]
 8014af4:	2200      	movs	r2, #0
 8014af6:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 8014af8:	68fb      	ldr	r3, [r7, #12]
 8014afa:	68da      	ldr	r2, [r3, #12]
 8014afc:	68fb      	ldr	r3, [r7, #12]
 8014afe:	7a9b      	ldrb	r3, [r3, #10]
 8014b00:	f003 0301 	and.w	r3, r3, #1
 8014b04:	2b00      	cmp	r3, #0
 8014b06:	d001      	beq.n	8014b0c <tcp_output_segment+0x158>
 8014b08:	2318      	movs	r3, #24
 8014b0a:	e000      	b.n	8014b0e <tcp_output_segment+0x15a>
 8014b0c:	2314      	movs	r3, #20
 8014b0e:	4413      	add	r3, r2
 8014b10:	69fa      	ldr	r2, [r7, #28]
 8014b12:	429a      	cmp	r2, r3
 8014b14:	d006      	beq.n	8014b24 <tcp_output_segment+0x170>
 8014b16:	4b10      	ldr	r3, [pc, #64]	; (8014b58 <tcp_output_segment+0x1a4>)
 8014b18:	f240 621c 	movw	r2, #1564	; 0x61c
 8014b1c:	4914      	ldr	r1, [pc, #80]	; (8014b70 <tcp_output_segment+0x1bc>)
 8014b1e:	4810      	ldr	r0, [pc, #64]	; (8014b60 <tcp_output_segment+0x1ac>)
 8014b20:	f003 ff80 	bl	8018a24 <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 8014b24:	68fb      	ldr	r3, [r7, #12]
 8014b26:	6858      	ldr	r0, [r3, #4]
 8014b28:	68b9      	ldr	r1, [r7, #8]
 8014b2a:	68bb      	ldr	r3, [r7, #8]
 8014b2c:	1d1c      	adds	r4, r3, #4
 8014b2e:	68bb      	ldr	r3, [r7, #8]
 8014b30:	7add      	ldrb	r5, [r3, #11]
 8014b32:	68bb      	ldr	r3, [r7, #8]
 8014b34:	7a9b      	ldrb	r3, [r3, #10]
 8014b36:	687a      	ldr	r2, [r7, #4]
 8014b38:	9202      	str	r2, [sp, #8]
 8014b3a:	2206      	movs	r2, #6
 8014b3c:	9201      	str	r2, [sp, #4]
 8014b3e:	9300      	str	r3, [sp, #0]
 8014b40:	462b      	mov	r3, r5
 8014b42:	4622      	mov	r2, r4
 8014b44:	f002 fa18 	bl	8016f78 <ip4_output_if>
 8014b48:	4603      	mov	r3, r0
 8014b4a:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 8014b4c:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8014b50:	4618      	mov	r0, r3
 8014b52:	3720      	adds	r7, #32
 8014b54:	46bd      	mov	sp, r7
 8014b56:	bdb0      	pop	{r4, r5, r7, pc}
 8014b58:	0801c4e8 	.word	0x0801c4e8
 8014b5c:	0801caac 	.word	0x0801caac
 8014b60:	0801c53c 	.word	0x0801c53c
 8014b64:	0801cacc 	.word	0x0801cacc
 8014b68:	0801caec 	.word	0x0801caec
 8014b6c:	20007fd8 	.word	0x20007fd8
 8014b70:	0801cb10 	.word	0x0801cb10

08014b74 <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 8014b74:	b5b0      	push	{r4, r5, r7, lr}
 8014b76:	b084      	sub	sp, #16
 8014b78:	af00      	add	r7, sp, #0
 8014b7a:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 8014b7c:	687b      	ldr	r3, [r7, #4]
 8014b7e:	2b00      	cmp	r3, #0
 8014b80:	d106      	bne.n	8014b90 <tcp_rexmit_rto_prepare+0x1c>
 8014b82:	4b31      	ldr	r3, [pc, #196]	; (8014c48 <tcp_rexmit_rto_prepare+0xd4>)
 8014b84:	f240 6263 	movw	r2, #1635	; 0x663
 8014b88:	4930      	ldr	r1, [pc, #192]	; (8014c4c <tcp_rexmit_rto_prepare+0xd8>)
 8014b8a:	4831      	ldr	r0, [pc, #196]	; (8014c50 <tcp_rexmit_rto_prepare+0xdc>)
 8014b8c:	f003 ff4a 	bl	8018a24 <iprintf>

  if (pcb->unacked == NULL) {
 8014b90:	687b      	ldr	r3, [r7, #4]
 8014b92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8014b94:	2b00      	cmp	r3, #0
 8014b96:	d102      	bne.n	8014b9e <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 8014b98:	f06f 0305 	mvn.w	r3, #5
 8014b9c:	e050      	b.n	8014c40 <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 8014b9e:	687b      	ldr	r3, [r7, #4]
 8014ba0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8014ba2:	60fb      	str	r3, [r7, #12]
 8014ba4:	e00b      	b.n	8014bbe <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 8014ba6:	68f8      	ldr	r0, [r7, #12]
 8014ba8:	f7ff fee4 	bl	8014974 <tcp_output_segment_busy>
 8014bac:	4603      	mov	r3, r0
 8014bae:	2b00      	cmp	r3, #0
 8014bb0:	d002      	beq.n	8014bb8 <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 8014bb2:	f06f 0305 	mvn.w	r3, #5
 8014bb6:	e043      	b.n	8014c40 <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 8014bb8:	68fb      	ldr	r3, [r7, #12]
 8014bba:	681b      	ldr	r3, [r3, #0]
 8014bbc:	60fb      	str	r3, [r7, #12]
 8014bbe:	68fb      	ldr	r3, [r7, #12]
 8014bc0:	681b      	ldr	r3, [r3, #0]
 8014bc2:	2b00      	cmp	r3, #0
 8014bc4:	d1ef      	bne.n	8014ba6 <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 8014bc6:	68f8      	ldr	r0, [r7, #12]
 8014bc8:	f7ff fed4 	bl	8014974 <tcp_output_segment_busy>
 8014bcc:	4603      	mov	r3, r0
 8014bce:	2b00      	cmp	r3, #0
 8014bd0:	d002      	beq.n	8014bd8 <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 8014bd2:	f06f 0305 	mvn.w	r3, #5
 8014bd6:	e033      	b.n	8014c40 <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 8014bd8:	687b      	ldr	r3, [r7, #4]
 8014bda:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8014bdc:	68fb      	ldr	r3, [r7, #12]
 8014bde:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 8014be0:	687b      	ldr	r3, [r7, #4]
 8014be2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8014be4:	687b      	ldr	r3, [r7, #4]
 8014be6:	66da      	str	r2, [r3, #108]	; 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 8014be8:	687b      	ldr	r3, [r7, #4]
 8014bea:	2200      	movs	r2, #0
 8014bec:	671a      	str	r2, [r3, #112]	; 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 8014bee:	687b      	ldr	r3, [r7, #4]
 8014bf0:	8b5b      	ldrh	r3, [r3, #26]
 8014bf2:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8014bf6:	b29a      	uxth	r2, r3
 8014bf8:	687b      	ldr	r3, [r7, #4]
 8014bfa:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8014bfc:	68fb      	ldr	r3, [r7, #12]
 8014bfe:	68db      	ldr	r3, [r3, #12]
 8014c00:	685b      	ldr	r3, [r3, #4]
 8014c02:	4618      	mov	r0, r3
 8014c04:	f7f9 fc6d 	bl	800e4e2 <lwip_htonl>
 8014c08:	4604      	mov	r4, r0
 8014c0a:	68fb      	ldr	r3, [r7, #12]
 8014c0c:	891b      	ldrh	r3, [r3, #8]
 8014c0e:	461d      	mov	r5, r3
 8014c10:	68fb      	ldr	r3, [r7, #12]
 8014c12:	68db      	ldr	r3, [r3, #12]
 8014c14:	899b      	ldrh	r3, [r3, #12]
 8014c16:	b29b      	uxth	r3, r3
 8014c18:	4618      	mov	r0, r3
 8014c1a:	f7f9 fc4d 	bl	800e4b8 <lwip_htons>
 8014c1e:	4603      	mov	r3, r0
 8014c20:	b2db      	uxtb	r3, r3
 8014c22:	f003 0303 	and.w	r3, r3, #3
 8014c26:	2b00      	cmp	r3, #0
 8014c28:	d001      	beq.n	8014c2e <tcp_rexmit_rto_prepare+0xba>
 8014c2a:	2301      	movs	r3, #1
 8014c2c:	e000      	b.n	8014c30 <tcp_rexmit_rto_prepare+0xbc>
 8014c2e:	2300      	movs	r3, #0
 8014c30:	442b      	add	r3, r5
 8014c32:	18e2      	adds	r2, r4, r3
 8014c34:	687b      	ldr	r3, [r7, #4]
 8014c36:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 8014c38:	687b      	ldr	r3, [r7, #4]
 8014c3a:	2200      	movs	r2, #0
 8014c3c:	635a      	str	r2, [r3, #52]	; 0x34

  return ERR_OK;
 8014c3e:	2300      	movs	r3, #0
}
 8014c40:	4618      	mov	r0, r3
 8014c42:	3710      	adds	r7, #16
 8014c44:	46bd      	mov	sp, r7
 8014c46:	bdb0      	pop	{r4, r5, r7, pc}
 8014c48:	0801c4e8 	.word	0x0801c4e8
 8014c4c:	0801cb24 	.word	0x0801cb24
 8014c50:	0801c53c 	.word	0x0801c53c

08014c54 <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 8014c54:	b580      	push	{r7, lr}
 8014c56:	b082      	sub	sp, #8
 8014c58:	af00      	add	r7, sp, #0
 8014c5a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 8014c5c:	687b      	ldr	r3, [r7, #4]
 8014c5e:	2b00      	cmp	r3, #0
 8014c60:	d106      	bne.n	8014c70 <tcp_rexmit_rto_commit+0x1c>
 8014c62:	4b0d      	ldr	r3, [pc, #52]	; (8014c98 <tcp_rexmit_rto_commit+0x44>)
 8014c64:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 8014c68:	490c      	ldr	r1, [pc, #48]	; (8014c9c <tcp_rexmit_rto_commit+0x48>)
 8014c6a:	480d      	ldr	r0, [pc, #52]	; (8014ca0 <tcp_rexmit_rto_commit+0x4c>)
 8014c6c:	f003 feda 	bl	8018a24 <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 8014c70:	687b      	ldr	r3, [r7, #4]
 8014c72:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8014c76:	2bff      	cmp	r3, #255	; 0xff
 8014c78:	d007      	beq.n	8014c8a <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 8014c7a:	687b      	ldr	r3, [r7, #4]
 8014c7c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8014c80:	3301      	adds	r3, #1
 8014c82:	b2da      	uxtb	r2, r3
 8014c84:	687b      	ldr	r3, [r7, #4]
 8014c86:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 8014c8a:	6878      	ldr	r0, [r7, #4]
 8014c8c:	f7ff fc7e 	bl	801458c <tcp_output>
}
 8014c90:	bf00      	nop
 8014c92:	3708      	adds	r7, #8
 8014c94:	46bd      	mov	sp, r7
 8014c96:	bd80      	pop	{r7, pc}
 8014c98:	0801c4e8 	.word	0x0801c4e8
 8014c9c:	0801cb48 	.word	0x0801cb48
 8014ca0:	0801c53c 	.word	0x0801c53c

08014ca4 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 8014ca4:	b580      	push	{r7, lr}
 8014ca6:	b082      	sub	sp, #8
 8014ca8:	af00      	add	r7, sp, #0
 8014caa:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 8014cac:	687b      	ldr	r3, [r7, #4]
 8014cae:	2b00      	cmp	r3, #0
 8014cb0:	d106      	bne.n	8014cc0 <tcp_rexmit_rto+0x1c>
 8014cb2:	4b0a      	ldr	r3, [pc, #40]	; (8014cdc <tcp_rexmit_rto+0x38>)
 8014cb4:	f240 62ad 	movw	r2, #1709	; 0x6ad
 8014cb8:	4909      	ldr	r1, [pc, #36]	; (8014ce0 <tcp_rexmit_rto+0x3c>)
 8014cba:	480a      	ldr	r0, [pc, #40]	; (8014ce4 <tcp_rexmit_rto+0x40>)
 8014cbc:	f003 feb2 	bl	8018a24 <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 8014cc0:	6878      	ldr	r0, [r7, #4]
 8014cc2:	f7ff ff57 	bl	8014b74 <tcp_rexmit_rto_prepare>
 8014cc6:	4603      	mov	r3, r0
 8014cc8:	2b00      	cmp	r3, #0
 8014cca:	d102      	bne.n	8014cd2 <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 8014ccc:	6878      	ldr	r0, [r7, #4]
 8014cce:	f7ff ffc1 	bl	8014c54 <tcp_rexmit_rto_commit>
  }
}
 8014cd2:	bf00      	nop
 8014cd4:	3708      	adds	r7, #8
 8014cd6:	46bd      	mov	sp, r7
 8014cd8:	bd80      	pop	{r7, pc}
 8014cda:	bf00      	nop
 8014cdc:	0801c4e8 	.word	0x0801c4e8
 8014ce0:	0801cb6c 	.word	0x0801cb6c
 8014ce4:	0801c53c 	.word	0x0801c53c

08014ce8 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 8014ce8:	b590      	push	{r4, r7, lr}
 8014cea:	b085      	sub	sp, #20
 8014cec:	af00      	add	r7, sp, #0
 8014cee:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 8014cf0:	687b      	ldr	r3, [r7, #4]
 8014cf2:	2b00      	cmp	r3, #0
 8014cf4:	d106      	bne.n	8014d04 <tcp_rexmit+0x1c>
 8014cf6:	4b2f      	ldr	r3, [pc, #188]	; (8014db4 <tcp_rexmit+0xcc>)
 8014cf8:	f240 62c1 	movw	r2, #1729	; 0x6c1
 8014cfc:	492e      	ldr	r1, [pc, #184]	; (8014db8 <tcp_rexmit+0xd0>)
 8014cfe:	482f      	ldr	r0, [pc, #188]	; (8014dbc <tcp_rexmit+0xd4>)
 8014d00:	f003 fe90 	bl	8018a24 <iprintf>

  if (pcb->unacked == NULL) {
 8014d04:	687b      	ldr	r3, [r7, #4]
 8014d06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8014d08:	2b00      	cmp	r3, #0
 8014d0a:	d102      	bne.n	8014d12 <tcp_rexmit+0x2a>
    return ERR_VAL;
 8014d0c:	f06f 0305 	mvn.w	r3, #5
 8014d10:	e04c      	b.n	8014dac <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 8014d12:	687b      	ldr	r3, [r7, #4]
 8014d14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8014d16:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 8014d18:	68b8      	ldr	r0, [r7, #8]
 8014d1a:	f7ff fe2b 	bl	8014974 <tcp_output_segment_busy>
 8014d1e:	4603      	mov	r3, r0
 8014d20:	2b00      	cmp	r3, #0
 8014d22:	d002      	beq.n	8014d2a <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 8014d24:	f06f 0305 	mvn.w	r3, #5
 8014d28:	e040      	b.n	8014dac <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 8014d2a:	68bb      	ldr	r3, [r7, #8]
 8014d2c:	681a      	ldr	r2, [r3, #0]
 8014d2e:	687b      	ldr	r3, [r7, #4]
 8014d30:	671a      	str	r2, [r3, #112]	; 0x70

  cur_seg = &(pcb->unsent);
 8014d32:	687b      	ldr	r3, [r7, #4]
 8014d34:	336c      	adds	r3, #108	; 0x6c
 8014d36:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8014d38:	e002      	b.n	8014d40 <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 8014d3a:	68fb      	ldr	r3, [r7, #12]
 8014d3c:	681b      	ldr	r3, [r3, #0]
 8014d3e:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8014d40:	68fb      	ldr	r3, [r7, #12]
 8014d42:	681b      	ldr	r3, [r3, #0]
 8014d44:	2b00      	cmp	r3, #0
 8014d46:	d011      	beq.n	8014d6c <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8014d48:	68fb      	ldr	r3, [r7, #12]
 8014d4a:	681b      	ldr	r3, [r3, #0]
 8014d4c:	68db      	ldr	r3, [r3, #12]
 8014d4e:	685b      	ldr	r3, [r3, #4]
 8014d50:	4618      	mov	r0, r3
 8014d52:	f7f9 fbc6 	bl	800e4e2 <lwip_htonl>
 8014d56:	4604      	mov	r4, r0
 8014d58:	68bb      	ldr	r3, [r7, #8]
 8014d5a:	68db      	ldr	r3, [r3, #12]
 8014d5c:	685b      	ldr	r3, [r3, #4]
 8014d5e:	4618      	mov	r0, r3
 8014d60:	f7f9 fbbf 	bl	800e4e2 <lwip_htonl>
 8014d64:	4603      	mov	r3, r0
 8014d66:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 8014d68:	2b00      	cmp	r3, #0
 8014d6a:	dbe6      	blt.n	8014d3a <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 8014d6c:	68fb      	ldr	r3, [r7, #12]
 8014d6e:	681a      	ldr	r2, [r3, #0]
 8014d70:	68bb      	ldr	r3, [r7, #8]
 8014d72:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 8014d74:	68fb      	ldr	r3, [r7, #12]
 8014d76:	68ba      	ldr	r2, [r7, #8]
 8014d78:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 8014d7a:	68bb      	ldr	r3, [r7, #8]
 8014d7c:	681b      	ldr	r3, [r3, #0]
 8014d7e:	2b00      	cmp	r3, #0
 8014d80:	d103      	bne.n	8014d8a <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 8014d82:	687b      	ldr	r3, [r7, #4]
 8014d84:	2200      	movs	r2, #0
 8014d86:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 8014d8a:	687b      	ldr	r3, [r7, #4]
 8014d8c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8014d90:	2bff      	cmp	r3, #255	; 0xff
 8014d92:	d007      	beq.n	8014da4 <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 8014d94:	687b      	ldr	r3, [r7, #4]
 8014d96:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8014d9a:	3301      	adds	r3, #1
 8014d9c:	b2da      	uxtb	r2, r3
 8014d9e:	687b      	ldr	r3, [r7, #4]
 8014da0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 8014da4:	687b      	ldr	r3, [r7, #4]
 8014da6:	2200      	movs	r2, #0
 8014da8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 8014daa:	2300      	movs	r3, #0
}
 8014dac:	4618      	mov	r0, r3
 8014dae:	3714      	adds	r7, #20
 8014db0:	46bd      	mov	sp, r7
 8014db2:	bd90      	pop	{r4, r7, pc}
 8014db4:	0801c4e8 	.word	0x0801c4e8
 8014db8:	0801cb88 	.word	0x0801cb88
 8014dbc:	0801c53c 	.word	0x0801c53c

08014dc0 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 8014dc0:	b580      	push	{r7, lr}
 8014dc2:	b082      	sub	sp, #8
 8014dc4:	af00      	add	r7, sp, #0
 8014dc6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 8014dc8:	687b      	ldr	r3, [r7, #4]
 8014dca:	2b00      	cmp	r3, #0
 8014dcc:	d106      	bne.n	8014ddc <tcp_rexmit_fast+0x1c>
 8014dce:	4b2a      	ldr	r3, [pc, #168]	; (8014e78 <tcp_rexmit_fast+0xb8>)
 8014dd0:	f240 62f9 	movw	r2, #1785	; 0x6f9
 8014dd4:	4929      	ldr	r1, [pc, #164]	; (8014e7c <tcp_rexmit_fast+0xbc>)
 8014dd6:	482a      	ldr	r0, [pc, #168]	; (8014e80 <tcp_rexmit_fast+0xc0>)
 8014dd8:	f003 fe24 	bl	8018a24 <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 8014ddc:	687b      	ldr	r3, [r7, #4]
 8014dde:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8014de0:	2b00      	cmp	r3, #0
 8014de2:	d045      	beq.n	8014e70 <tcp_rexmit_fast+0xb0>
 8014de4:	687b      	ldr	r3, [r7, #4]
 8014de6:	8b5b      	ldrh	r3, [r3, #26]
 8014de8:	f003 0304 	and.w	r3, r3, #4
 8014dec:	2b00      	cmp	r3, #0
 8014dee:	d13f      	bne.n	8014e70 <tcp_rexmit_fast+0xb0>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 8014df0:	6878      	ldr	r0, [r7, #4]
 8014df2:	f7ff ff79 	bl	8014ce8 <tcp_rexmit>
 8014df6:	4603      	mov	r3, r0
 8014df8:	2b00      	cmp	r3, #0
 8014dfa:	d139      	bne.n	8014e70 <tcp_rexmit_fast+0xb0>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 8014dfc:	687b      	ldr	r3, [r7, #4]
 8014dfe:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8014e02:	687b      	ldr	r3, [r7, #4]
 8014e04:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8014e08:	4293      	cmp	r3, r2
 8014e0a:	bf28      	it	cs
 8014e0c:	4613      	movcs	r3, r2
 8014e0e:	b29b      	uxth	r3, r3
 8014e10:	2b00      	cmp	r3, #0
 8014e12:	da00      	bge.n	8014e16 <tcp_rexmit_fast+0x56>
 8014e14:	3301      	adds	r3, #1
 8014e16:	105b      	asrs	r3, r3, #1
 8014e18:	b29a      	uxth	r2, r3
 8014e1a:	687b      	ldr	r3, [r7, #4]
 8014e1c:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 8014e20:	687b      	ldr	r3, [r7, #4]
 8014e22:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8014e26:	461a      	mov	r2, r3
 8014e28:	687b      	ldr	r3, [r7, #4]
 8014e2a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8014e2c:	005b      	lsls	r3, r3, #1
 8014e2e:	429a      	cmp	r2, r3
 8014e30:	d206      	bcs.n	8014e40 <tcp_rexmit_fast+0x80>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 8014e32:	687b      	ldr	r3, [r7, #4]
 8014e34:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8014e36:	005b      	lsls	r3, r3, #1
 8014e38:	b29a      	uxth	r2, r3
 8014e3a:	687b      	ldr	r3, [r7, #4]
 8014e3c:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 8014e40:	687b      	ldr	r3, [r7, #4]
 8014e42:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8014e46:	687b      	ldr	r3, [r7, #4]
 8014e48:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8014e4a:	4619      	mov	r1, r3
 8014e4c:	0049      	lsls	r1, r1, #1
 8014e4e:	440b      	add	r3, r1
 8014e50:	b29b      	uxth	r3, r3
 8014e52:	4413      	add	r3, r2
 8014e54:	b29a      	uxth	r2, r3
 8014e56:	687b      	ldr	r3, [r7, #4]
 8014e58:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 8014e5c:	687b      	ldr	r3, [r7, #4]
 8014e5e:	8b5b      	ldrh	r3, [r3, #26]
 8014e60:	f043 0304 	orr.w	r3, r3, #4
 8014e64:	b29a      	uxth	r2, r3
 8014e66:	687b      	ldr	r3, [r7, #4]
 8014e68:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 8014e6a:	687b      	ldr	r3, [r7, #4]
 8014e6c:	2200      	movs	r2, #0
 8014e6e:	861a      	strh	r2, [r3, #48]	; 0x30
    }
  }
}
 8014e70:	bf00      	nop
 8014e72:	3708      	adds	r7, #8
 8014e74:	46bd      	mov	sp, r7
 8014e76:	bd80      	pop	{r7, pc}
 8014e78:	0801c4e8 	.word	0x0801c4e8
 8014e7c:	0801cba0 	.word	0x0801cba0
 8014e80:	0801c53c 	.word	0x0801c53c

08014e84 <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 8014e84:	b580      	push	{r7, lr}
 8014e86:	b086      	sub	sp, #24
 8014e88:	af00      	add	r7, sp, #0
 8014e8a:	60f8      	str	r0, [r7, #12]
 8014e8c:	607b      	str	r3, [r7, #4]
 8014e8e:	460b      	mov	r3, r1
 8014e90:	817b      	strh	r3, [r7, #10]
 8014e92:	4613      	mov	r3, r2
 8014e94:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 8014e96:	897a      	ldrh	r2, [r7, #10]
 8014e98:	893b      	ldrh	r3, [r7, #8]
 8014e9a:	4413      	add	r3, r2
 8014e9c:	b29b      	uxth	r3, r3
 8014e9e:	3314      	adds	r3, #20
 8014ea0:	b29b      	uxth	r3, r3
 8014ea2:	f44f 7220 	mov.w	r2, #640	; 0x280
 8014ea6:	4619      	mov	r1, r3
 8014ea8:	2022      	movs	r0, #34	; 0x22
 8014eaa:	f7fa fc17 	bl	800f6dc <pbuf_alloc>
 8014eae:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 8014eb0:	697b      	ldr	r3, [r7, #20]
 8014eb2:	2b00      	cmp	r3, #0
 8014eb4:	d04d      	beq.n	8014f52 <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 8014eb6:	897b      	ldrh	r3, [r7, #10]
 8014eb8:	3313      	adds	r3, #19
 8014eba:	697a      	ldr	r2, [r7, #20]
 8014ebc:	8952      	ldrh	r2, [r2, #10]
 8014ebe:	4293      	cmp	r3, r2
 8014ec0:	db06      	blt.n	8014ed0 <tcp_output_alloc_header_common+0x4c>
 8014ec2:	4b26      	ldr	r3, [pc, #152]	; (8014f5c <tcp_output_alloc_header_common+0xd8>)
 8014ec4:	f240 7223 	movw	r2, #1827	; 0x723
 8014ec8:	4925      	ldr	r1, [pc, #148]	; (8014f60 <tcp_output_alloc_header_common+0xdc>)
 8014eca:	4826      	ldr	r0, [pc, #152]	; (8014f64 <tcp_output_alloc_header_common+0xe0>)
 8014ecc:	f003 fdaa 	bl	8018a24 <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 8014ed0:	697b      	ldr	r3, [r7, #20]
 8014ed2:	685b      	ldr	r3, [r3, #4]
 8014ed4:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 8014ed6:	8c3b      	ldrh	r3, [r7, #32]
 8014ed8:	4618      	mov	r0, r3
 8014eda:	f7f9 faed 	bl	800e4b8 <lwip_htons>
 8014ede:	4603      	mov	r3, r0
 8014ee0:	461a      	mov	r2, r3
 8014ee2:	693b      	ldr	r3, [r7, #16]
 8014ee4:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 8014ee6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8014ee8:	4618      	mov	r0, r3
 8014eea:	f7f9 fae5 	bl	800e4b8 <lwip_htons>
 8014eee:	4603      	mov	r3, r0
 8014ef0:	461a      	mov	r2, r3
 8014ef2:	693b      	ldr	r3, [r7, #16]
 8014ef4:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 8014ef6:	693b      	ldr	r3, [r7, #16]
 8014ef8:	687a      	ldr	r2, [r7, #4]
 8014efa:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 8014efc:	68f8      	ldr	r0, [r7, #12]
 8014efe:	f7f9 faf0 	bl	800e4e2 <lwip_htonl>
 8014f02:	4602      	mov	r2, r0
 8014f04:	693b      	ldr	r3, [r7, #16]
 8014f06:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 8014f08:	897b      	ldrh	r3, [r7, #10]
 8014f0a:	089b      	lsrs	r3, r3, #2
 8014f0c:	b29b      	uxth	r3, r3
 8014f0e:	3305      	adds	r3, #5
 8014f10:	b29b      	uxth	r3, r3
 8014f12:	031b      	lsls	r3, r3, #12
 8014f14:	b29a      	uxth	r2, r3
 8014f16:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8014f1a:	b29b      	uxth	r3, r3
 8014f1c:	4313      	orrs	r3, r2
 8014f1e:	b29b      	uxth	r3, r3
 8014f20:	4618      	mov	r0, r3
 8014f22:	f7f9 fac9 	bl	800e4b8 <lwip_htons>
 8014f26:	4603      	mov	r3, r0
 8014f28:	461a      	mov	r2, r3
 8014f2a:	693b      	ldr	r3, [r7, #16]
 8014f2c:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 8014f2e:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8014f30:	4618      	mov	r0, r3
 8014f32:	f7f9 fac1 	bl	800e4b8 <lwip_htons>
 8014f36:	4603      	mov	r3, r0
 8014f38:	461a      	mov	r2, r3
 8014f3a:	693b      	ldr	r3, [r7, #16]
 8014f3c:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 8014f3e:	693b      	ldr	r3, [r7, #16]
 8014f40:	2200      	movs	r2, #0
 8014f42:	741a      	strb	r2, [r3, #16]
 8014f44:	2200      	movs	r2, #0
 8014f46:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 8014f48:	693b      	ldr	r3, [r7, #16]
 8014f4a:	2200      	movs	r2, #0
 8014f4c:	749a      	strb	r2, [r3, #18]
 8014f4e:	2200      	movs	r2, #0
 8014f50:	74da      	strb	r2, [r3, #19]
  }
  return p;
 8014f52:	697b      	ldr	r3, [r7, #20]
}
 8014f54:	4618      	mov	r0, r3
 8014f56:	3718      	adds	r7, #24
 8014f58:	46bd      	mov	sp, r7
 8014f5a:	bd80      	pop	{r7, pc}
 8014f5c:	0801c4e8 	.word	0x0801c4e8
 8014f60:	0801cbc0 	.word	0x0801cbc0
 8014f64:	0801c53c 	.word	0x0801c53c

08014f68 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 8014f68:	b5b0      	push	{r4, r5, r7, lr}
 8014f6a:	b08a      	sub	sp, #40	; 0x28
 8014f6c:	af04      	add	r7, sp, #16
 8014f6e:	60f8      	str	r0, [r7, #12]
 8014f70:	607b      	str	r3, [r7, #4]
 8014f72:	460b      	mov	r3, r1
 8014f74:	817b      	strh	r3, [r7, #10]
 8014f76:	4613      	mov	r3, r2
 8014f78:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 8014f7a:	68fb      	ldr	r3, [r7, #12]
 8014f7c:	2b00      	cmp	r3, #0
 8014f7e:	d106      	bne.n	8014f8e <tcp_output_alloc_header+0x26>
 8014f80:	4b15      	ldr	r3, [pc, #84]	; (8014fd8 <tcp_output_alloc_header+0x70>)
 8014f82:	f240 7242 	movw	r2, #1858	; 0x742
 8014f86:	4915      	ldr	r1, [pc, #84]	; (8014fdc <tcp_output_alloc_header+0x74>)
 8014f88:	4815      	ldr	r0, [pc, #84]	; (8014fe0 <tcp_output_alloc_header+0x78>)
 8014f8a:	f003 fd4b 	bl	8018a24 <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 8014f8e:	68fb      	ldr	r3, [r7, #12]
 8014f90:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8014f92:	68fb      	ldr	r3, [r7, #12]
 8014f94:	8adb      	ldrh	r3, [r3, #22]
 8014f96:	68fa      	ldr	r2, [r7, #12]
 8014f98:	8b12      	ldrh	r2, [r2, #24]
 8014f9a:	68f9      	ldr	r1, [r7, #12]
 8014f9c:	8d49      	ldrh	r1, [r1, #42]	; 0x2a
 8014f9e:	893d      	ldrh	r5, [r7, #8]
 8014fa0:	897c      	ldrh	r4, [r7, #10]
 8014fa2:	9103      	str	r1, [sp, #12]
 8014fa4:	2110      	movs	r1, #16
 8014fa6:	9102      	str	r1, [sp, #8]
 8014fa8:	9201      	str	r2, [sp, #4]
 8014faa:	9300      	str	r3, [sp, #0]
 8014fac:	687b      	ldr	r3, [r7, #4]
 8014fae:	462a      	mov	r2, r5
 8014fb0:	4621      	mov	r1, r4
 8014fb2:	f7ff ff67 	bl	8014e84 <tcp_output_alloc_header_common>
 8014fb6:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 8014fb8:	697b      	ldr	r3, [r7, #20]
 8014fba:	2b00      	cmp	r3, #0
 8014fbc:	d006      	beq.n	8014fcc <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8014fbe:	68fb      	ldr	r3, [r7, #12]
 8014fc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014fc2:	68fa      	ldr	r2, [r7, #12]
 8014fc4:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 8014fc6:	441a      	add	r2, r3
 8014fc8:	68fb      	ldr	r3, [r7, #12]
 8014fca:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 8014fcc:	697b      	ldr	r3, [r7, #20]
}
 8014fce:	4618      	mov	r0, r3
 8014fd0:	3718      	adds	r7, #24
 8014fd2:	46bd      	mov	sp, r7
 8014fd4:	bdb0      	pop	{r4, r5, r7, pc}
 8014fd6:	bf00      	nop
 8014fd8:	0801c4e8 	.word	0x0801c4e8
 8014fdc:	0801cbf0 	.word	0x0801cbf0
 8014fe0:	0801c53c 	.word	0x0801c53c

08014fe4 <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 8014fe4:	b580      	push	{r7, lr}
 8014fe6:	b088      	sub	sp, #32
 8014fe8:	af00      	add	r7, sp, #0
 8014fea:	60f8      	str	r0, [r7, #12]
 8014fec:	60b9      	str	r1, [r7, #8]
 8014fee:	4611      	mov	r1, r2
 8014ff0:	461a      	mov	r2, r3
 8014ff2:	460b      	mov	r3, r1
 8014ff4:	71fb      	strb	r3, [r7, #7]
 8014ff6:	4613      	mov	r3, r2
 8014ff8:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 8014ffa:	2300      	movs	r3, #0
 8014ffc:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 8014ffe:	68bb      	ldr	r3, [r7, #8]
 8015000:	2b00      	cmp	r3, #0
 8015002:	d106      	bne.n	8015012 <tcp_output_fill_options+0x2e>
 8015004:	4b12      	ldr	r3, [pc, #72]	; (8015050 <tcp_output_fill_options+0x6c>)
 8015006:	f240 7256 	movw	r2, #1878	; 0x756
 801500a:	4912      	ldr	r1, [pc, #72]	; (8015054 <tcp_output_fill_options+0x70>)
 801500c:	4812      	ldr	r0, [pc, #72]	; (8015058 <tcp_output_fill_options+0x74>)
 801500e:	f003 fd09 	bl	8018a24 <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 8015012:	68bb      	ldr	r3, [r7, #8]
 8015014:	685b      	ldr	r3, [r3, #4]
 8015016:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 8015018:	69bb      	ldr	r3, [r7, #24]
 801501a:	3314      	adds	r3, #20
 801501c:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 801501e:	8bfb      	ldrh	r3, [r7, #30]
 8015020:	009b      	lsls	r3, r3, #2
 8015022:	461a      	mov	r2, r3
 8015024:	79fb      	ldrb	r3, [r7, #7]
 8015026:	009b      	lsls	r3, r3, #2
 8015028:	f003 0304 	and.w	r3, r3, #4
 801502c:	4413      	add	r3, r2
 801502e:	3314      	adds	r3, #20
 8015030:	69ba      	ldr	r2, [r7, #24]
 8015032:	4413      	add	r3, r2
 8015034:	697a      	ldr	r2, [r7, #20]
 8015036:	429a      	cmp	r2, r3
 8015038:	d006      	beq.n	8015048 <tcp_output_fill_options+0x64>
 801503a:	4b05      	ldr	r3, [pc, #20]	; (8015050 <tcp_output_fill_options+0x6c>)
 801503c:	f240 7275 	movw	r2, #1909	; 0x775
 8015040:	4906      	ldr	r1, [pc, #24]	; (801505c <tcp_output_fill_options+0x78>)
 8015042:	4805      	ldr	r0, [pc, #20]	; (8015058 <tcp_output_fill_options+0x74>)
 8015044:	f003 fcee 	bl	8018a24 <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 8015048:	bf00      	nop
 801504a:	3720      	adds	r7, #32
 801504c:	46bd      	mov	sp, r7
 801504e:	bd80      	pop	{r7, pc}
 8015050:	0801c4e8 	.word	0x0801c4e8
 8015054:	0801cc18 	.word	0x0801cc18
 8015058:	0801c53c 	.word	0x0801c53c
 801505c:	0801cb10 	.word	0x0801cb10

08015060 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 8015060:	b580      	push	{r7, lr}
 8015062:	b08a      	sub	sp, #40	; 0x28
 8015064:	af04      	add	r7, sp, #16
 8015066:	60f8      	str	r0, [r7, #12]
 8015068:	60b9      	str	r1, [r7, #8]
 801506a:	607a      	str	r2, [r7, #4]
 801506c:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 801506e:	68bb      	ldr	r3, [r7, #8]
 8015070:	2b00      	cmp	r3, #0
 8015072:	d106      	bne.n	8015082 <tcp_output_control_segment+0x22>
 8015074:	4b1c      	ldr	r3, [pc, #112]	; (80150e8 <tcp_output_control_segment+0x88>)
 8015076:	f240 7287 	movw	r2, #1927	; 0x787
 801507a:	491c      	ldr	r1, [pc, #112]	; (80150ec <tcp_output_control_segment+0x8c>)
 801507c:	481c      	ldr	r0, [pc, #112]	; (80150f0 <tcp_output_control_segment+0x90>)
 801507e:	f003 fcd1 	bl	8018a24 <iprintf>

  netif = tcp_route(pcb, src, dst);
 8015082:	683a      	ldr	r2, [r7, #0]
 8015084:	6879      	ldr	r1, [r7, #4]
 8015086:	68f8      	ldr	r0, [r7, #12]
 8015088:	f7fe ff40 	bl	8013f0c <tcp_route>
 801508c:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 801508e:	693b      	ldr	r3, [r7, #16]
 8015090:	2b00      	cmp	r3, #0
 8015092:	d102      	bne.n	801509a <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 8015094:	23fc      	movs	r3, #252	; 0xfc
 8015096:	75fb      	strb	r3, [r7, #23]
 8015098:	e01c      	b.n	80150d4 <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 801509a:	68fb      	ldr	r3, [r7, #12]
 801509c:	2b00      	cmp	r3, #0
 801509e:	d006      	beq.n	80150ae <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 80150a0:	68fb      	ldr	r3, [r7, #12]
 80150a2:	7adb      	ldrb	r3, [r3, #11]
 80150a4:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 80150a6:	68fb      	ldr	r3, [r7, #12]
 80150a8:	7a9b      	ldrb	r3, [r3, #10]
 80150aa:	757b      	strb	r3, [r7, #21]
 80150ac:	e003      	b.n	80150b6 <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 80150ae:	23ff      	movs	r3, #255	; 0xff
 80150b0:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 80150b2:	2300      	movs	r3, #0
 80150b4:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 80150b6:	7dba      	ldrb	r2, [r7, #22]
 80150b8:	693b      	ldr	r3, [r7, #16]
 80150ba:	9302      	str	r3, [sp, #8]
 80150bc:	2306      	movs	r3, #6
 80150be:	9301      	str	r3, [sp, #4]
 80150c0:	7d7b      	ldrb	r3, [r7, #21]
 80150c2:	9300      	str	r3, [sp, #0]
 80150c4:	4613      	mov	r3, r2
 80150c6:	683a      	ldr	r2, [r7, #0]
 80150c8:	6879      	ldr	r1, [r7, #4]
 80150ca:	68b8      	ldr	r0, [r7, #8]
 80150cc:	f001 ff54 	bl	8016f78 <ip4_output_if>
 80150d0:	4603      	mov	r3, r0
 80150d2:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 80150d4:	68b8      	ldr	r0, [r7, #8]
 80150d6:	f7fa fde5 	bl	800fca4 <pbuf_free>
  return err;
 80150da:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80150de:	4618      	mov	r0, r3
 80150e0:	3718      	adds	r7, #24
 80150e2:	46bd      	mov	sp, r7
 80150e4:	bd80      	pop	{r7, pc}
 80150e6:	bf00      	nop
 80150e8:	0801c4e8 	.word	0x0801c4e8
 80150ec:	0801cc40 	.word	0x0801cc40
 80150f0:	0801c53c 	.word	0x0801c53c

080150f4 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 80150f4:	b590      	push	{r4, r7, lr}
 80150f6:	b08b      	sub	sp, #44	; 0x2c
 80150f8:	af04      	add	r7, sp, #16
 80150fa:	60f8      	str	r0, [r7, #12]
 80150fc:	60b9      	str	r1, [r7, #8]
 80150fe:	607a      	str	r2, [r7, #4]
 8015100:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 8015102:	683b      	ldr	r3, [r7, #0]
 8015104:	2b00      	cmp	r3, #0
 8015106:	d106      	bne.n	8015116 <tcp_rst+0x22>
 8015108:	4b1f      	ldr	r3, [pc, #124]	; (8015188 <tcp_rst+0x94>)
 801510a:	f240 72c4 	movw	r2, #1988	; 0x7c4
 801510e:	491f      	ldr	r1, [pc, #124]	; (801518c <tcp_rst+0x98>)
 8015110:	481f      	ldr	r0, [pc, #124]	; (8015190 <tcp_rst+0x9c>)
 8015112:	f003 fc87 	bl	8018a24 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 8015116:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015118:	2b00      	cmp	r3, #0
 801511a:	d106      	bne.n	801512a <tcp_rst+0x36>
 801511c:	4b1a      	ldr	r3, [pc, #104]	; (8015188 <tcp_rst+0x94>)
 801511e:	f240 72c5 	movw	r2, #1989	; 0x7c5
 8015122:	491c      	ldr	r1, [pc, #112]	; (8015194 <tcp_rst+0xa0>)
 8015124:	481a      	ldr	r0, [pc, #104]	; (8015190 <tcp_rst+0x9c>)
 8015126:	f003 fc7d 	bl	8018a24 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 801512a:	2300      	movs	r3, #0
 801512c:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 801512e:	f246 0308 	movw	r3, #24584	; 0x6008
 8015132:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 8015134:	7dfb      	ldrb	r3, [r7, #23]
 8015136:	b29c      	uxth	r4, r3
 8015138:	68b8      	ldr	r0, [r7, #8]
 801513a:	f7f9 f9d2 	bl	800e4e2 <lwip_htonl>
 801513e:	4602      	mov	r2, r0
 8015140:	8abb      	ldrh	r3, [r7, #20]
 8015142:	9303      	str	r3, [sp, #12]
 8015144:	2314      	movs	r3, #20
 8015146:	9302      	str	r3, [sp, #8]
 8015148:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 801514a:	9301      	str	r3, [sp, #4]
 801514c:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 801514e:	9300      	str	r3, [sp, #0]
 8015150:	4613      	mov	r3, r2
 8015152:	2200      	movs	r2, #0
 8015154:	4621      	mov	r1, r4
 8015156:	6878      	ldr	r0, [r7, #4]
 8015158:	f7ff fe94 	bl	8014e84 <tcp_output_alloc_header_common>
 801515c:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 801515e:	693b      	ldr	r3, [r7, #16]
 8015160:	2b00      	cmp	r3, #0
 8015162:	d00c      	beq.n	801517e <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8015164:	7dfb      	ldrb	r3, [r7, #23]
 8015166:	2200      	movs	r2, #0
 8015168:	6939      	ldr	r1, [r7, #16]
 801516a:	68f8      	ldr	r0, [r7, #12]
 801516c:	f7ff ff3a 	bl	8014fe4 <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 8015170:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015172:	683a      	ldr	r2, [r7, #0]
 8015174:	6939      	ldr	r1, [r7, #16]
 8015176:	68f8      	ldr	r0, [r7, #12]
 8015178:	f7ff ff72 	bl	8015060 <tcp_output_control_segment>
 801517c:	e000      	b.n	8015180 <tcp_rst+0x8c>
    return;
 801517e:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 8015180:	371c      	adds	r7, #28
 8015182:	46bd      	mov	sp, r7
 8015184:	bd90      	pop	{r4, r7, pc}
 8015186:	bf00      	nop
 8015188:	0801c4e8 	.word	0x0801c4e8
 801518c:	0801cc6c 	.word	0x0801cc6c
 8015190:	0801c53c 	.word	0x0801c53c
 8015194:	0801cc88 	.word	0x0801cc88

08015198 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 8015198:	b590      	push	{r4, r7, lr}
 801519a:	b087      	sub	sp, #28
 801519c:	af00      	add	r7, sp, #0
 801519e:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 80151a0:	2300      	movs	r3, #0
 80151a2:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 80151a4:	2300      	movs	r3, #0
 80151a6:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 80151a8:	687b      	ldr	r3, [r7, #4]
 80151aa:	2b00      	cmp	r3, #0
 80151ac:	d106      	bne.n	80151bc <tcp_send_empty_ack+0x24>
 80151ae:	4b28      	ldr	r3, [pc, #160]	; (8015250 <tcp_send_empty_ack+0xb8>)
 80151b0:	f240 72ea 	movw	r2, #2026	; 0x7ea
 80151b4:	4927      	ldr	r1, [pc, #156]	; (8015254 <tcp_send_empty_ack+0xbc>)
 80151b6:	4828      	ldr	r0, [pc, #160]	; (8015258 <tcp_send_empty_ack+0xc0>)
 80151b8:	f003 fc34 	bl	8018a24 <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 80151bc:	7dfb      	ldrb	r3, [r7, #23]
 80151be:	009b      	lsls	r3, r3, #2
 80151c0:	b2db      	uxtb	r3, r3
 80151c2:	f003 0304 	and.w	r3, r3, #4
 80151c6:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 80151c8:	7d7b      	ldrb	r3, [r7, #21]
 80151ca:	b29c      	uxth	r4, r3
 80151cc:	687b      	ldr	r3, [r7, #4]
 80151ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80151d0:	4618      	mov	r0, r3
 80151d2:	f7f9 f986 	bl	800e4e2 <lwip_htonl>
 80151d6:	4603      	mov	r3, r0
 80151d8:	2200      	movs	r2, #0
 80151da:	4621      	mov	r1, r4
 80151dc:	6878      	ldr	r0, [r7, #4]
 80151de:	f7ff fec3 	bl	8014f68 <tcp_output_alloc_header>
 80151e2:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 80151e4:	693b      	ldr	r3, [r7, #16]
 80151e6:	2b00      	cmp	r3, #0
 80151e8:	d109      	bne.n	80151fe <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 80151ea:	687b      	ldr	r3, [r7, #4]
 80151ec:	8b5b      	ldrh	r3, [r3, #26]
 80151ee:	f043 0303 	orr.w	r3, r3, #3
 80151f2:	b29a      	uxth	r2, r3
 80151f4:	687b      	ldr	r3, [r7, #4]
 80151f6:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 80151f8:	f06f 0301 	mvn.w	r3, #1
 80151fc:	e023      	b.n	8015246 <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 80151fe:	7dbb      	ldrb	r3, [r7, #22]
 8015200:	7dfa      	ldrb	r2, [r7, #23]
 8015202:	6939      	ldr	r1, [r7, #16]
 8015204:	6878      	ldr	r0, [r7, #4]
 8015206:	f7ff feed 	bl	8014fe4 <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 801520a:	687a      	ldr	r2, [r7, #4]
 801520c:	687b      	ldr	r3, [r7, #4]
 801520e:	3304      	adds	r3, #4
 8015210:	6939      	ldr	r1, [r7, #16]
 8015212:	6878      	ldr	r0, [r7, #4]
 8015214:	f7ff ff24 	bl	8015060 <tcp_output_control_segment>
 8015218:	4603      	mov	r3, r0
 801521a:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 801521c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8015220:	2b00      	cmp	r3, #0
 8015222:	d007      	beq.n	8015234 <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8015224:	687b      	ldr	r3, [r7, #4]
 8015226:	8b5b      	ldrh	r3, [r3, #26]
 8015228:	f043 0303 	orr.w	r3, r3, #3
 801522c:	b29a      	uxth	r2, r3
 801522e:	687b      	ldr	r3, [r7, #4]
 8015230:	835a      	strh	r2, [r3, #26]
 8015232:	e006      	b.n	8015242 <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8015234:	687b      	ldr	r3, [r7, #4]
 8015236:	8b5b      	ldrh	r3, [r3, #26]
 8015238:	f023 0303 	bic.w	r3, r3, #3
 801523c:	b29a      	uxth	r2, r3
 801523e:	687b      	ldr	r3, [r7, #4]
 8015240:	835a      	strh	r2, [r3, #26]
  }

  return err;
 8015242:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8015246:	4618      	mov	r0, r3
 8015248:	371c      	adds	r7, #28
 801524a:	46bd      	mov	sp, r7
 801524c:	bd90      	pop	{r4, r7, pc}
 801524e:	bf00      	nop
 8015250:	0801c4e8 	.word	0x0801c4e8
 8015254:	0801cca4 	.word	0x0801cca4
 8015258:	0801c53c 	.word	0x0801c53c

0801525c <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 801525c:	b590      	push	{r4, r7, lr}
 801525e:	b087      	sub	sp, #28
 8015260:	af00      	add	r7, sp, #0
 8015262:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8015264:	2300      	movs	r3, #0
 8015266:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 8015268:	687b      	ldr	r3, [r7, #4]
 801526a:	2b00      	cmp	r3, #0
 801526c:	d106      	bne.n	801527c <tcp_keepalive+0x20>
 801526e:	4b18      	ldr	r3, [pc, #96]	; (80152d0 <tcp_keepalive+0x74>)
 8015270:	f640 0224 	movw	r2, #2084	; 0x824
 8015274:	4917      	ldr	r1, [pc, #92]	; (80152d4 <tcp_keepalive+0x78>)
 8015276:	4818      	ldr	r0, [pc, #96]	; (80152d8 <tcp_keepalive+0x7c>)
 8015278:	f003 fbd4 	bl	8018a24 <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 801527c:	7dfb      	ldrb	r3, [r7, #23]
 801527e:	b29c      	uxth	r4, r3
 8015280:	687b      	ldr	r3, [r7, #4]
 8015282:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8015284:	3b01      	subs	r3, #1
 8015286:	4618      	mov	r0, r3
 8015288:	f7f9 f92b 	bl	800e4e2 <lwip_htonl>
 801528c:	4603      	mov	r3, r0
 801528e:	2200      	movs	r2, #0
 8015290:	4621      	mov	r1, r4
 8015292:	6878      	ldr	r0, [r7, #4]
 8015294:	f7ff fe68 	bl	8014f68 <tcp_output_alloc_header>
 8015298:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 801529a:	693b      	ldr	r3, [r7, #16]
 801529c:	2b00      	cmp	r3, #0
 801529e:	d102      	bne.n	80152a6 <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 80152a0:	f04f 33ff 	mov.w	r3, #4294967295
 80152a4:	e010      	b.n	80152c8 <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 80152a6:	7dfb      	ldrb	r3, [r7, #23]
 80152a8:	2200      	movs	r2, #0
 80152aa:	6939      	ldr	r1, [r7, #16]
 80152ac:	6878      	ldr	r0, [r7, #4]
 80152ae:	f7ff fe99 	bl	8014fe4 <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 80152b2:	687a      	ldr	r2, [r7, #4]
 80152b4:	687b      	ldr	r3, [r7, #4]
 80152b6:	3304      	adds	r3, #4
 80152b8:	6939      	ldr	r1, [r7, #16]
 80152ba:	6878      	ldr	r0, [r7, #4]
 80152bc:	f7ff fed0 	bl	8015060 <tcp_output_control_segment>
 80152c0:	4603      	mov	r3, r0
 80152c2:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 80152c4:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80152c8:	4618      	mov	r0, r3
 80152ca:	371c      	adds	r7, #28
 80152cc:	46bd      	mov	sp, r7
 80152ce:	bd90      	pop	{r4, r7, pc}
 80152d0:	0801c4e8 	.word	0x0801c4e8
 80152d4:	0801ccc4 	.word	0x0801ccc4
 80152d8:	0801c53c 	.word	0x0801c53c

080152dc <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 80152dc:	b590      	push	{r4, r7, lr}
 80152de:	b08b      	sub	sp, #44	; 0x2c
 80152e0:	af00      	add	r7, sp, #0
 80152e2:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 80152e4:	2300      	movs	r3, #0
 80152e6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 80152ea:	687b      	ldr	r3, [r7, #4]
 80152ec:	2b00      	cmp	r3, #0
 80152ee:	d106      	bne.n	80152fe <tcp_zero_window_probe+0x22>
 80152f0:	4b4c      	ldr	r3, [pc, #304]	; (8015424 <tcp_zero_window_probe+0x148>)
 80152f2:	f640 024f 	movw	r2, #2127	; 0x84f
 80152f6:	494c      	ldr	r1, [pc, #304]	; (8015428 <tcp_zero_window_probe+0x14c>)
 80152f8:	484c      	ldr	r0, [pc, #304]	; (801542c <tcp_zero_window_probe+0x150>)
 80152fa:	f003 fb93 	bl	8018a24 <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 80152fe:	687b      	ldr	r3, [r7, #4]
 8015300:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8015302:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 8015304:	6a3b      	ldr	r3, [r7, #32]
 8015306:	2b00      	cmp	r3, #0
 8015308:	d101      	bne.n	801530e <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 801530a:	2300      	movs	r3, #0
 801530c:	e086      	b.n	801541c <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 801530e:	687b      	ldr	r3, [r7, #4]
 8015310:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 8015314:	2bff      	cmp	r3, #255	; 0xff
 8015316:	d007      	beq.n	8015328 <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 8015318:	687b      	ldr	r3, [r7, #4]
 801531a:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 801531e:	3301      	adds	r3, #1
 8015320:	b2da      	uxtb	r2, r3
 8015322:	687b      	ldr	r3, [r7, #4]
 8015324:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 8015328:	6a3b      	ldr	r3, [r7, #32]
 801532a:	68db      	ldr	r3, [r3, #12]
 801532c:	899b      	ldrh	r3, [r3, #12]
 801532e:	b29b      	uxth	r3, r3
 8015330:	4618      	mov	r0, r3
 8015332:	f7f9 f8c1 	bl	800e4b8 <lwip_htons>
 8015336:	4603      	mov	r3, r0
 8015338:	b2db      	uxtb	r3, r3
 801533a:	f003 0301 	and.w	r3, r3, #1
 801533e:	2b00      	cmp	r3, #0
 8015340:	d005      	beq.n	801534e <tcp_zero_window_probe+0x72>
 8015342:	6a3b      	ldr	r3, [r7, #32]
 8015344:	891b      	ldrh	r3, [r3, #8]
 8015346:	2b00      	cmp	r3, #0
 8015348:	d101      	bne.n	801534e <tcp_zero_window_probe+0x72>
 801534a:	2301      	movs	r3, #1
 801534c:	e000      	b.n	8015350 <tcp_zero_window_probe+0x74>
 801534e:	2300      	movs	r3, #0
 8015350:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 8015352:	7ffb      	ldrb	r3, [r7, #31]
 8015354:	2b00      	cmp	r3, #0
 8015356:	bf0c      	ite	eq
 8015358:	2301      	moveq	r3, #1
 801535a:	2300      	movne	r3, #0
 801535c:	b2db      	uxtb	r3, r3
 801535e:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 8015360:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8015364:	b299      	uxth	r1, r3
 8015366:	6a3b      	ldr	r3, [r7, #32]
 8015368:	68db      	ldr	r3, [r3, #12]
 801536a:	685b      	ldr	r3, [r3, #4]
 801536c:	8bba      	ldrh	r2, [r7, #28]
 801536e:	6878      	ldr	r0, [r7, #4]
 8015370:	f7ff fdfa 	bl	8014f68 <tcp_output_alloc_header>
 8015374:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 8015376:	69bb      	ldr	r3, [r7, #24]
 8015378:	2b00      	cmp	r3, #0
 801537a:	d102      	bne.n	8015382 <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 801537c:	f04f 33ff 	mov.w	r3, #4294967295
 8015380:	e04c      	b.n	801541c <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 8015382:	69bb      	ldr	r3, [r7, #24]
 8015384:	685b      	ldr	r3, [r3, #4]
 8015386:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 8015388:	7ffb      	ldrb	r3, [r7, #31]
 801538a:	2b00      	cmp	r3, #0
 801538c:	d011      	beq.n	80153b2 <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 801538e:	697b      	ldr	r3, [r7, #20]
 8015390:	899b      	ldrh	r3, [r3, #12]
 8015392:	b29b      	uxth	r3, r3
 8015394:	b21b      	sxth	r3, r3
 8015396:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 801539a:	b21c      	sxth	r4, r3
 801539c:	2011      	movs	r0, #17
 801539e:	f7f9 f88b 	bl	800e4b8 <lwip_htons>
 80153a2:	4603      	mov	r3, r0
 80153a4:	b21b      	sxth	r3, r3
 80153a6:	4323      	orrs	r3, r4
 80153a8:	b21b      	sxth	r3, r3
 80153aa:	b29a      	uxth	r2, r3
 80153ac:	697b      	ldr	r3, [r7, #20]
 80153ae:	819a      	strh	r2, [r3, #12]
 80153b0:	e010      	b.n	80153d4 <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 80153b2:	69bb      	ldr	r3, [r7, #24]
 80153b4:	685b      	ldr	r3, [r3, #4]
 80153b6:	3314      	adds	r3, #20
 80153b8:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 80153ba:	6a3b      	ldr	r3, [r7, #32]
 80153bc:	6858      	ldr	r0, [r3, #4]
 80153be:	6a3b      	ldr	r3, [r7, #32]
 80153c0:	685b      	ldr	r3, [r3, #4]
 80153c2:	891a      	ldrh	r2, [r3, #8]
 80153c4:	6a3b      	ldr	r3, [r7, #32]
 80153c6:	891b      	ldrh	r3, [r3, #8]
 80153c8:	1ad3      	subs	r3, r2, r3
 80153ca:	b29b      	uxth	r3, r3
 80153cc:	2201      	movs	r2, #1
 80153ce:	6939      	ldr	r1, [r7, #16]
 80153d0:	f7fa fe52 	bl	8010078 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 80153d4:	6a3b      	ldr	r3, [r7, #32]
 80153d6:	68db      	ldr	r3, [r3, #12]
 80153d8:	685b      	ldr	r3, [r3, #4]
 80153da:	4618      	mov	r0, r3
 80153dc:	f7f9 f881 	bl	800e4e2 <lwip_htonl>
 80153e0:	4603      	mov	r3, r0
 80153e2:	3301      	adds	r3, #1
 80153e4:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 80153e6:	687b      	ldr	r3, [r7, #4]
 80153e8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80153ea:	68fb      	ldr	r3, [r7, #12]
 80153ec:	1ad3      	subs	r3, r2, r3
 80153ee:	2b00      	cmp	r3, #0
 80153f0:	da02      	bge.n	80153f8 <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 80153f2:	687b      	ldr	r3, [r7, #4]
 80153f4:	68fa      	ldr	r2, [r7, #12]
 80153f6:	651a      	str	r2, [r3, #80]	; 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 80153f8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80153fc:	2200      	movs	r2, #0
 80153fe:	69b9      	ldr	r1, [r7, #24]
 8015400:	6878      	ldr	r0, [r7, #4]
 8015402:	f7ff fdef 	bl	8014fe4 <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8015406:	687a      	ldr	r2, [r7, #4]
 8015408:	687b      	ldr	r3, [r7, #4]
 801540a:	3304      	adds	r3, #4
 801540c:	69b9      	ldr	r1, [r7, #24]
 801540e:	6878      	ldr	r0, [r7, #4]
 8015410:	f7ff fe26 	bl	8015060 <tcp_output_control_segment>
 8015414:	4603      	mov	r3, r0
 8015416:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8015418:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 801541c:	4618      	mov	r0, r3
 801541e:	372c      	adds	r7, #44	; 0x2c
 8015420:	46bd      	mov	sp, r7
 8015422:	bd90      	pop	{r4, r7, pc}
 8015424:	0801c4e8 	.word	0x0801c4e8
 8015428:	0801cce0 	.word	0x0801cce0
 801542c:	0801c53c 	.word	0x0801c53c

08015430 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 8015430:	b580      	push	{r7, lr}
 8015432:	b082      	sub	sp, #8
 8015434:	af00      	add	r7, sp, #0
 8015436:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 8015438:	f7fa ff0c 	bl	8010254 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 801543c:	4b0a      	ldr	r3, [pc, #40]	; (8015468 <tcpip_tcp_timer+0x38>)
 801543e:	681b      	ldr	r3, [r3, #0]
 8015440:	2b00      	cmp	r3, #0
 8015442:	d103      	bne.n	801544c <tcpip_tcp_timer+0x1c>
 8015444:	4b09      	ldr	r3, [pc, #36]	; (801546c <tcpip_tcp_timer+0x3c>)
 8015446:	681b      	ldr	r3, [r3, #0]
 8015448:	2b00      	cmp	r3, #0
 801544a:	d005      	beq.n	8015458 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 801544c:	2200      	movs	r2, #0
 801544e:	4908      	ldr	r1, [pc, #32]	; (8015470 <tcpip_tcp_timer+0x40>)
 8015450:	20fa      	movs	r0, #250	; 0xfa
 8015452:	f000 f8f3 	bl	801563c <sys_timeout>
 8015456:	e003      	b.n	8015460 <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 8015458:	4b06      	ldr	r3, [pc, #24]	; (8015474 <tcpip_tcp_timer+0x44>)
 801545a:	2200      	movs	r2, #0
 801545c:	601a      	str	r2, [r3, #0]
  }
}
 801545e:	bf00      	nop
 8015460:	bf00      	nop
 8015462:	3708      	adds	r7, #8
 8015464:	46bd      	mov	sp, r7
 8015466:	bd80      	pop	{r7, pc}
 8015468:	20007fe4 	.word	0x20007fe4
 801546c:	20007fe8 	.word	0x20007fe8
 8015470:	08015431 	.word	0x08015431
 8015474:	20008030 	.word	0x20008030

08015478 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 8015478:	b580      	push	{r7, lr}
 801547a:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 801547c:	4b0a      	ldr	r3, [pc, #40]	; (80154a8 <tcp_timer_needed+0x30>)
 801547e:	681b      	ldr	r3, [r3, #0]
 8015480:	2b00      	cmp	r3, #0
 8015482:	d10f      	bne.n	80154a4 <tcp_timer_needed+0x2c>
 8015484:	4b09      	ldr	r3, [pc, #36]	; (80154ac <tcp_timer_needed+0x34>)
 8015486:	681b      	ldr	r3, [r3, #0]
 8015488:	2b00      	cmp	r3, #0
 801548a:	d103      	bne.n	8015494 <tcp_timer_needed+0x1c>
 801548c:	4b08      	ldr	r3, [pc, #32]	; (80154b0 <tcp_timer_needed+0x38>)
 801548e:	681b      	ldr	r3, [r3, #0]
 8015490:	2b00      	cmp	r3, #0
 8015492:	d007      	beq.n	80154a4 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 8015494:	4b04      	ldr	r3, [pc, #16]	; (80154a8 <tcp_timer_needed+0x30>)
 8015496:	2201      	movs	r2, #1
 8015498:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 801549a:	2200      	movs	r2, #0
 801549c:	4905      	ldr	r1, [pc, #20]	; (80154b4 <tcp_timer_needed+0x3c>)
 801549e:	20fa      	movs	r0, #250	; 0xfa
 80154a0:	f000 f8cc 	bl	801563c <sys_timeout>
  }
}
 80154a4:	bf00      	nop
 80154a6:	bd80      	pop	{r7, pc}
 80154a8:	20008030 	.word	0x20008030
 80154ac:	20007fe4 	.word	0x20007fe4
 80154b0:	20007fe8 	.word	0x20007fe8
 80154b4:	08015431 	.word	0x08015431

080154b8 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 80154b8:	b580      	push	{r7, lr}
 80154ba:	b086      	sub	sp, #24
 80154bc:	af00      	add	r7, sp, #0
 80154be:	60f8      	str	r0, [r7, #12]
 80154c0:	60b9      	str	r1, [r7, #8]
 80154c2:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 80154c4:	2006      	movs	r0, #6
 80154c6:	f7f9 fd27 	bl	800ef18 <memp_malloc>
 80154ca:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 80154cc:	693b      	ldr	r3, [r7, #16]
 80154ce:	2b00      	cmp	r3, #0
 80154d0:	d109      	bne.n	80154e6 <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 80154d2:	693b      	ldr	r3, [r7, #16]
 80154d4:	2b00      	cmp	r3, #0
 80154d6:	d151      	bne.n	801557c <sys_timeout_abs+0xc4>
 80154d8:	4b2a      	ldr	r3, [pc, #168]	; (8015584 <sys_timeout_abs+0xcc>)
 80154da:	22be      	movs	r2, #190	; 0xbe
 80154dc:	492a      	ldr	r1, [pc, #168]	; (8015588 <sys_timeout_abs+0xd0>)
 80154de:	482b      	ldr	r0, [pc, #172]	; (801558c <sys_timeout_abs+0xd4>)
 80154e0:	f003 faa0 	bl	8018a24 <iprintf>
    return;
 80154e4:	e04a      	b.n	801557c <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 80154e6:	693b      	ldr	r3, [r7, #16]
 80154e8:	2200      	movs	r2, #0
 80154ea:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 80154ec:	693b      	ldr	r3, [r7, #16]
 80154ee:	68ba      	ldr	r2, [r7, #8]
 80154f0:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 80154f2:	693b      	ldr	r3, [r7, #16]
 80154f4:	687a      	ldr	r2, [r7, #4]
 80154f6:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 80154f8:	693b      	ldr	r3, [r7, #16]
 80154fa:	68fa      	ldr	r2, [r7, #12]
 80154fc:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 80154fe:	4b24      	ldr	r3, [pc, #144]	; (8015590 <sys_timeout_abs+0xd8>)
 8015500:	681b      	ldr	r3, [r3, #0]
 8015502:	2b00      	cmp	r3, #0
 8015504:	d103      	bne.n	801550e <sys_timeout_abs+0x56>
    next_timeout = timeout;
 8015506:	4a22      	ldr	r2, [pc, #136]	; (8015590 <sys_timeout_abs+0xd8>)
 8015508:	693b      	ldr	r3, [r7, #16]
 801550a:	6013      	str	r3, [r2, #0]
    return;
 801550c:	e037      	b.n	801557e <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 801550e:	693b      	ldr	r3, [r7, #16]
 8015510:	685a      	ldr	r2, [r3, #4]
 8015512:	4b1f      	ldr	r3, [pc, #124]	; (8015590 <sys_timeout_abs+0xd8>)
 8015514:	681b      	ldr	r3, [r3, #0]
 8015516:	685b      	ldr	r3, [r3, #4]
 8015518:	1ad3      	subs	r3, r2, r3
 801551a:	0fdb      	lsrs	r3, r3, #31
 801551c:	f003 0301 	and.w	r3, r3, #1
 8015520:	b2db      	uxtb	r3, r3
 8015522:	2b00      	cmp	r3, #0
 8015524:	d007      	beq.n	8015536 <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 8015526:	4b1a      	ldr	r3, [pc, #104]	; (8015590 <sys_timeout_abs+0xd8>)
 8015528:	681a      	ldr	r2, [r3, #0]
 801552a:	693b      	ldr	r3, [r7, #16]
 801552c:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 801552e:	4a18      	ldr	r2, [pc, #96]	; (8015590 <sys_timeout_abs+0xd8>)
 8015530:	693b      	ldr	r3, [r7, #16]
 8015532:	6013      	str	r3, [r2, #0]
 8015534:	e023      	b.n	801557e <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 8015536:	4b16      	ldr	r3, [pc, #88]	; (8015590 <sys_timeout_abs+0xd8>)
 8015538:	681b      	ldr	r3, [r3, #0]
 801553a:	617b      	str	r3, [r7, #20]
 801553c:	e01a      	b.n	8015574 <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 801553e:	697b      	ldr	r3, [r7, #20]
 8015540:	681b      	ldr	r3, [r3, #0]
 8015542:	2b00      	cmp	r3, #0
 8015544:	d00b      	beq.n	801555e <sys_timeout_abs+0xa6>
 8015546:	693b      	ldr	r3, [r7, #16]
 8015548:	685a      	ldr	r2, [r3, #4]
 801554a:	697b      	ldr	r3, [r7, #20]
 801554c:	681b      	ldr	r3, [r3, #0]
 801554e:	685b      	ldr	r3, [r3, #4]
 8015550:	1ad3      	subs	r3, r2, r3
 8015552:	0fdb      	lsrs	r3, r3, #31
 8015554:	f003 0301 	and.w	r3, r3, #1
 8015558:	b2db      	uxtb	r3, r3
 801555a:	2b00      	cmp	r3, #0
 801555c:	d007      	beq.n	801556e <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 801555e:	697b      	ldr	r3, [r7, #20]
 8015560:	681a      	ldr	r2, [r3, #0]
 8015562:	693b      	ldr	r3, [r7, #16]
 8015564:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 8015566:	697b      	ldr	r3, [r7, #20]
 8015568:	693a      	ldr	r2, [r7, #16]
 801556a:	601a      	str	r2, [r3, #0]
        break;
 801556c:	e007      	b.n	801557e <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 801556e:	697b      	ldr	r3, [r7, #20]
 8015570:	681b      	ldr	r3, [r3, #0]
 8015572:	617b      	str	r3, [r7, #20]
 8015574:	697b      	ldr	r3, [r7, #20]
 8015576:	2b00      	cmp	r3, #0
 8015578:	d1e1      	bne.n	801553e <sys_timeout_abs+0x86>
 801557a:	e000      	b.n	801557e <sys_timeout_abs+0xc6>
    return;
 801557c:	bf00      	nop
      }
    }
  }
}
 801557e:	3718      	adds	r7, #24
 8015580:	46bd      	mov	sp, r7
 8015582:	bd80      	pop	{r7, pc}
 8015584:	0801cd04 	.word	0x0801cd04
 8015588:	0801cd38 	.word	0x0801cd38
 801558c:	0801cd78 	.word	0x0801cd78
 8015590:	20008028 	.word	0x20008028

08015594 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 8015594:	b580      	push	{r7, lr}
 8015596:	b086      	sub	sp, #24
 8015598:	af00      	add	r7, sp, #0
 801559a:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 801559c:	687b      	ldr	r3, [r7, #4]
 801559e:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 80155a0:	697b      	ldr	r3, [r7, #20]
 80155a2:	685b      	ldr	r3, [r3, #4]
 80155a4:	4798      	blx	r3

  now = sys_now();
 80155a6:	f7f8 fda7 	bl	800e0f8 <sys_now>
 80155aa:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 80155ac:	697b      	ldr	r3, [r7, #20]
 80155ae:	681a      	ldr	r2, [r3, #0]
 80155b0:	4b0f      	ldr	r3, [pc, #60]	; (80155f0 <lwip_cyclic_timer+0x5c>)
 80155b2:	681b      	ldr	r3, [r3, #0]
 80155b4:	4413      	add	r3, r2
 80155b6:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 80155b8:	68fa      	ldr	r2, [r7, #12]
 80155ba:	693b      	ldr	r3, [r7, #16]
 80155bc:	1ad3      	subs	r3, r2, r3
 80155be:	0fdb      	lsrs	r3, r3, #31
 80155c0:	f003 0301 	and.w	r3, r3, #1
 80155c4:	b2db      	uxtb	r3, r3
 80155c6:	2b00      	cmp	r3, #0
 80155c8:	d009      	beq.n	80155de <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 80155ca:	697b      	ldr	r3, [r7, #20]
 80155cc:	681a      	ldr	r2, [r3, #0]
 80155ce:	693b      	ldr	r3, [r7, #16]
 80155d0:	4413      	add	r3, r2
 80155d2:	687a      	ldr	r2, [r7, #4]
 80155d4:	4907      	ldr	r1, [pc, #28]	; (80155f4 <lwip_cyclic_timer+0x60>)
 80155d6:	4618      	mov	r0, r3
 80155d8:	f7ff ff6e 	bl	80154b8 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 80155dc:	e004      	b.n	80155e8 <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 80155de:	687a      	ldr	r2, [r7, #4]
 80155e0:	4904      	ldr	r1, [pc, #16]	; (80155f4 <lwip_cyclic_timer+0x60>)
 80155e2:	68f8      	ldr	r0, [r7, #12]
 80155e4:	f7ff ff68 	bl	80154b8 <sys_timeout_abs>
}
 80155e8:	bf00      	nop
 80155ea:	3718      	adds	r7, #24
 80155ec:	46bd      	mov	sp, r7
 80155ee:	bd80      	pop	{r7, pc}
 80155f0:	2000802c 	.word	0x2000802c
 80155f4:	08015595 	.word	0x08015595

080155f8 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 80155f8:	b580      	push	{r7, lr}
 80155fa:	b082      	sub	sp, #8
 80155fc:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 80155fe:	2301      	movs	r3, #1
 8015600:	607b      	str	r3, [r7, #4]
 8015602:	e00e      	b.n	8015622 <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 8015604:	4a0b      	ldr	r2, [pc, #44]	; (8015634 <sys_timeouts_init+0x3c>)
 8015606:	687b      	ldr	r3, [r7, #4]
 8015608:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 801560c:	687b      	ldr	r3, [r7, #4]
 801560e:	00db      	lsls	r3, r3, #3
 8015610:	4a08      	ldr	r2, [pc, #32]	; (8015634 <sys_timeouts_init+0x3c>)
 8015612:	4413      	add	r3, r2
 8015614:	461a      	mov	r2, r3
 8015616:	4908      	ldr	r1, [pc, #32]	; (8015638 <sys_timeouts_init+0x40>)
 8015618:	f000 f810 	bl	801563c <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 801561c:	687b      	ldr	r3, [r7, #4]
 801561e:	3301      	adds	r3, #1
 8015620:	607b      	str	r3, [r7, #4]
 8015622:	687b      	ldr	r3, [r7, #4]
 8015624:	2b02      	cmp	r3, #2
 8015626:	d9ed      	bls.n	8015604 <sys_timeouts_init+0xc>
  }
}
 8015628:	bf00      	nop
 801562a:	bf00      	nop
 801562c:	3708      	adds	r7, #8
 801562e:	46bd      	mov	sp, r7
 8015630:	bd80      	pop	{r7, pc}
 8015632:	bf00      	nop
 8015634:	0801d938 	.word	0x0801d938
 8015638:	08015595 	.word	0x08015595

0801563c <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 801563c:	b580      	push	{r7, lr}
 801563e:	b086      	sub	sp, #24
 8015640:	af00      	add	r7, sp, #0
 8015642:	60f8      	str	r0, [r7, #12]
 8015644:	60b9      	str	r1, [r7, #8]
 8015646:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 8015648:	68fb      	ldr	r3, [r7, #12]
 801564a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801564e:	d306      	bcc.n	801565e <sys_timeout+0x22>
 8015650:	4b0a      	ldr	r3, [pc, #40]	; (801567c <sys_timeout+0x40>)
 8015652:	f240 1229 	movw	r2, #297	; 0x129
 8015656:	490a      	ldr	r1, [pc, #40]	; (8015680 <sys_timeout+0x44>)
 8015658:	480a      	ldr	r0, [pc, #40]	; (8015684 <sys_timeout+0x48>)
 801565a:	f003 f9e3 	bl	8018a24 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 801565e:	f7f8 fd4b 	bl	800e0f8 <sys_now>
 8015662:	4602      	mov	r2, r0
 8015664:	68fb      	ldr	r3, [r7, #12]
 8015666:	4413      	add	r3, r2
 8015668:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 801566a:	687a      	ldr	r2, [r7, #4]
 801566c:	68b9      	ldr	r1, [r7, #8]
 801566e:	6978      	ldr	r0, [r7, #20]
 8015670:	f7ff ff22 	bl	80154b8 <sys_timeout_abs>
#endif
}
 8015674:	bf00      	nop
 8015676:	3718      	adds	r7, #24
 8015678:	46bd      	mov	sp, r7
 801567a:	bd80      	pop	{r7, pc}
 801567c:	0801cd04 	.word	0x0801cd04
 8015680:	0801cda0 	.word	0x0801cda0
 8015684:	0801cd78 	.word	0x0801cd78

08015688 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 8015688:	b580      	push	{r7, lr}
 801568a:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 801568c:	f002 fca2 	bl	8017fd4 <rand>
 8015690:	4603      	mov	r3, r0
 8015692:	b29b      	uxth	r3, r3
 8015694:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8015698:	b29b      	uxth	r3, r3
 801569a:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 801569e:	b29a      	uxth	r2, r3
 80156a0:	4b01      	ldr	r3, [pc, #4]	; (80156a8 <udp_init+0x20>)
 80156a2:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 80156a4:	bf00      	nop
 80156a6:	bd80      	pop	{r7, pc}
 80156a8:	2000005c 	.word	0x2000005c

080156ac <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 80156ac:	b580      	push	{r7, lr}
 80156ae:	b084      	sub	sp, #16
 80156b0:	af00      	add	r7, sp, #0
 80156b2:	60f8      	str	r0, [r7, #12]
 80156b4:	60b9      	str	r1, [r7, #8]
 80156b6:	4613      	mov	r3, r2
 80156b8:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 80156ba:	68fb      	ldr	r3, [r7, #12]
 80156bc:	2b00      	cmp	r3, #0
 80156be:	d105      	bne.n	80156cc <udp_input_local_match+0x20>
 80156c0:	4b27      	ldr	r3, [pc, #156]	; (8015760 <udp_input_local_match+0xb4>)
 80156c2:	2287      	movs	r2, #135	; 0x87
 80156c4:	4927      	ldr	r1, [pc, #156]	; (8015764 <udp_input_local_match+0xb8>)
 80156c6:	4828      	ldr	r0, [pc, #160]	; (8015768 <udp_input_local_match+0xbc>)
 80156c8:	f003 f9ac 	bl	8018a24 <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 80156cc:	68bb      	ldr	r3, [r7, #8]
 80156ce:	2b00      	cmp	r3, #0
 80156d0:	d105      	bne.n	80156de <udp_input_local_match+0x32>
 80156d2:	4b23      	ldr	r3, [pc, #140]	; (8015760 <udp_input_local_match+0xb4>)
 80156d4:	2288      	movs	r2, #136	; 0x88
 80156d6:	4925      	ldr	r1, [pc, #148]	; (801576c <udp_input_local_match+0xc0>)
 80156d8:	4823      	ldr	r0, [pc, #140]	; (8015768 <udp_input_local_match+0xbc>)
 80156da:	f003 f9a3 	bl	8018a24 <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80156de:	68fb      	ldr	r3, [r7, #12]
 80156e0:	7a1b      	ldrb	r3, [r3, #8]
 80156e2:	2b00      	cmp	r3, #0
 80156e4:	d00b      	beq.n	80156fe <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 80156e6:	68fb      	ldr	r3, [r7, #12]
 80156e8:	7a1a      	ldrb	r2, [r3, #8]
 80156ea:	4b21      	ldr	r3, [pc, #132]	; (8015770 <udp_input_local_match+0xc4>)
 80156ec:	685b      	ldr	r3, [r3, #4]
 80156ee:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80156f2:	3301      	adds	r3, #1
 80156f4:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80156f6:	429a      	cmp	r2, r3
 80156f8:	d001      	beq.n	80156fe <udp_input_local_match+0x52>
    return 0;
 80156fa:	2300      	movs	r3, #0
 80156fc:	e02b      	b.n	8015756 <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 80156fe:	79fb      	ldrb	r3, [r7, #7]
 8015700:	2b00      	cmp	r3, #0
 8015702:	d018      	beq.n	8015736 <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8015704:	68fb      	ldr	r3, [r7, #12]
 8015706:	2b00      	cmp	r3, #0
 8015708:	d013      	beq.n	8015732 <udp_input_local_match+0x86>
 801570a:	68fb      	ldr	r3, [r7, #12]
 801570c:	681b      	ldr	r3, [r3, #0]
 801570e:	2b00      	cmp	r3, #0
 8015710:	d00f      	beq.n	8015732 <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8015712:	4b17      	ldr	r3, [pc, #92]	; (8015770 <udp_input_local_match+0xc4>)
 8015714:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8015716:	f1b3 3fff 	cmp.w	r3, #4294967295
 801571a:	d00a      	beq.n	8015732 <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 801571c:	68fb      	ldr	r3, [r7, #12]
 801571e:	681a      	ldr	r2, [r3, #0]
 8015720:	4b13      	ldr	r3, [pc, #76]	; (8015770 <udp_input_local_match+0xc4>)
 8015722:	695b      	ldr	r3, [r3, #20]
 8015724:	405a      	eors	r2, r3
 8015726:	68bb      	ldr	r3, [r7, #8]
 8015728:	3308      	adds	r3, #8
 801572a:	681b      	ldr	r3, [r3, #0]
 801572c:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 801572e:	2b00      	cmp	r3, #0
 8015730:	d110      	bne.n	8015754 <udp_input_local_match+0xa8>
          return 1;
 8015732:	2301      	movs	r3, #1
 8015734:	e00f      	b.n	8015756 <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8015736:	68fb      	ldr	r3, [r7, #12]
 8015738:	2b00      	cmp	r3, #0
 801573a:	d009      	beq.n	8015750 <udp_input_local_match+0xa4>
 801573c:	68fb      	ldr	r3, [r7, #12]
 801573e:	681b      	ldr	r3, [r3, #0]
 8015740:	2b00      	cmp	r3, #0
 8015742:	d005      	beq.n	8015750 <udp_input_local_match+0xa4>
 8015744:	68fb      	ldr	r3, [r7, #12]
 8015746:	681a      	ldr	r2, [r3, #0]
 8015748:	4b09      	ldr	r3, [pc, #36]	; (8015770 <udp_input_local_match+0xc4>)
 801574a:	695b      	ldr	r3, [r3, #20]
 801574c:	429a      	cmp	r2, r3
 801574e:	d101      	bne.n	8015754 <udp_input_local_match+0xa8>
        return 1;
 8015750:	2301      	movs	r3, #1
 8015752:	e000      	b.n	8015756 <udp_input_local_match+0xaa>
      }
  }

  return 0;
 8015754:	2300      	movs	r3, #0
}
 8015756:	4618      	mov	r0, r3
 8015758:	3710      	adds	r7, #16
 801575a:	46bd      	mov	sp, r7
 801575c:	bd80      	pop	{r7, pc}
 801575e:	bf00      	nop
 8015760:	0801cdec 	.word	0x0801cdec
 8015764:	0801ce1c 	.word	0x0801ce1c
 8015768:	0801ce40 	.word	0x0801ce40
 801576c:	0801ce68 	.word	0x0801ce68
 8015770:	200050bc 	.word	0x200050bc

08015774 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 8015774:	b590      	push	{r4, r7, lr}
 8015776:	b08d      	sub	sp, #52	; 0x34
 8015778:	af02      	add	r7, sp, #8
 801577a:	6078      	str	r0, [r7, #4]
 801577c:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 801577e:	2300      	movs	r3, #0
 8015780:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 8015782:	687b      	ldr	r3, [r7, #4]
 8015784:	2b00      	cmp	r3, #0
 8015786:	d105      	bne.n	8015794 <udp_input+0x20>
 8015788:	4b7c      	ldr	r3, [pc, #496]	; (801597c <udp_input+0x208>)
 801578a:	22cf      	movs	r2, #207	; 0xcf
 801578c:	497c      	ldr	r1, [pc, #496]	; (8015980 <udp_input+0x20c>)
 801578e:	487d      	ldr	r0, [pc, #500]	; (8015984 <udp_input+0x210>)
 8015790:	f003 f948 	bl	8018a24 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 8015794:	683b      	ldr	r3, [r7, #0]
 8015796:	2b00      	cmp	r3, #0
 8015798:	d105      	bne.n	80157a6 <udp_input+0x32>
 801579a:	4b78      	ldr	r3, [pc, #480]	; (801597c <udp_input+0x208>)
 801579c:	22d0      	movs	r2, #208	; 0xd0
 801579e:	497a      	ldr	r1, [pc, #488]	; (8015988 <udp_input+0x214>)
 80157a0:	4878      	ldr	r0, [pc, #480]	; (8015984 <udp_input+0x210>)
 80157a2:	f003 f93f 	bl	8018a24 <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 80157a6:	687b      	ldr	r3, [r7, #4]
 80157a8:	895b      	ldrh	r3, [r3, #10]
 80157aa:	2b07      	cmp	r3, #7
 80157ac:	d803      	bhi.n	80157b6 <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 80157ae:	6878      	ldr	r0, [r7, #4]
 80157b0:	f7fa fa78 	bl	800fca4 <pbuf_free>
    goto end;
 80157b4:	e0de      	b.n	8015974 <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 80157b6:	687b      	ldr	r3, [r7, #4]
 80157b8:	685b      	ldr	r3, [r3, #4]
 80157ba:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 80157bc:	4b73      	ldr	r3, [pc, #460]	; (801598c <udp_input+0x218>)
 80157be:	695b      	ldr	r3, [r3, #20]
 80157c0:	4a72      	ldr	r2, [pc, #456]	; (801598c <udp_input+0x218>)
 80157c2:	6812      	ldr	r2, [r2, #0]
 80157c4:	4611      	mov	r1, r2
 80157c6:	4618      	mov	r0, r3
 80157c8:	f001 fcae 	bl	8017128 <ip4_addr_isbroadcast_u32>
 80157cc:	4603      	mov	r3, r0
 80157ce:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 80157d0:	697b      	ldr	r3, [r7, #20]
 80157d2:	881b      	ldrh	r3, [r3, #0]
 80157d4:	b29b      	uxth	r3, r3
 80157d6:	4618      	mov	r0, r3
 80157d8:	f7f8 fe6e 	bl	800e4b8 <lwip_htons>
 80157dc:	4603      	mov	r3, r0
 80157de:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 80157e0:	697b      	ldr	r3, [r7, #20]
 80157e2:	885b      	ldrh	r3, [r3, #2]
 80157e4:	b29b      	uxth	r3, r3
 80157e6:	4618      	mov	r0, r3
 80157e8:	f7f8 fe66 	bl	800e4b8 <lwip_htons>
 80157ec:	4603      	mov	r3, r0
 80157ee:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 80157f0:	2300      	movs	r3, #0
 80157f2:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 80157f4:	2300      	movs	r3, #0
 80157f6:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 80157f8:	2300      	movs	r3, #0
 80157fa:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 80157fc:	4b64      	ldr	r3, [pc, #400]	; (8015990 <udp_input+0x21c>)
 80157fe:	681b      	ldr	r3, [r3, #0]
 8015800:	627b      	str	r3, [r7, #36]	; 0x24
 8015802:	e054      	b.n	80158ae <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 8015804:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015806:	8a5b      	ldrh	r3, [r3, #18]
 8015808:	89fa      	ldrh	r2, [r7, #14]
 801580a:	429a      	cmp	r2, r3
 801580c:	d14a      	bne.n	80158a4 <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 801580e:	7cfb      	ldrb	r3, [r7, #19]
 8015810:	461a      	mov	r2, r3
 8015812:	6839      	ldr	r1, [r7, #0]
 8015814:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8015816:	f7ff ff49 	bl	80156ac <udp_input_local_match>
 801581a:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 801581c:	2b00      	cmp	r3, #0
 801581e:	d041      	beq.n	80158a4 <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 8015820:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015822:	7c1b      	ldrb	r3, [r3, #16]
 8015824:	f003 0304 	and.w	r3, r3, #4
 8015828:	2b00      	cmp	r3, #0
 801582a:	d11d      	bne.n	8015868 <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 801582c:	69fb      	ldr	r3, [r7, #28]
 801582e:	2b00      	cmp	r3, #0
 8015830:	d102      	bne.n	8015838 <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 8015832:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015834:	61fb      	str	r3, [r7, #28]
 8015836:	e017      	b.n	8015868 <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 8015838:	7cfb      	ldrb	r3, [r7, #19]
 801583a:	2b00      	cmp	r3, #0
 801583c:	d014      	beq.n	8015868 <udp_input+0xf4>
 801583e:	4b53      	ldr	r3, [pc, #332]	; (801598c <udp_input+0x218>)
 8015840:	695b      	ldr	r3, [r3, #20]
 8015842:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015846:	d10f      	bne.n	8015868 <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 8015848:	69fb      	ldr	r3, [r7, #28]
 801584a:	681a      	ldr	r2, [r3, #0]
 801584c:	683b      	ldr	r3, [r7, #0]
 801584e:	3304      	adds	r3, #4
 8015850:	681b      	ldr	r3, [r3, #0]
 8015852:	429a      	cmp	r2, r3
 8015854:	d008      	beq.n	8015868 <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 8015856:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015858:	681a      	ldr	r2, [r3, #0]
 801585a:	683b      	ldr	r3, [r7, #0]
 801585c:	3304      	adds	r3, #4
 801585e:	681b      	ldr	r3, [r3, #0]
 8015860:	429a      	cmp	r2, r3
 8015862:	d101      	bne.n	8015868 <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 8015864:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015866:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 8015868:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801586a:	8a9b      	ldrh	r3, [r3, #20]
 801586c:	8a3a      	ldrh	r2, [r7, #16]
 801586e:	429a      	cmp	r2, r3
 8015870:	d118      	bne.n	80158a4 <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 8015872:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015874:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 8015876:	2b00      	cmp	r3, #0
 8015878:	d005      	beq.n	8015886 <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 801587a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801587c:	685a      	ldr	r2, [r3, #4]
 801587e:	4b43      	ldr	r3, [pc, #268]	; (801598c <udp_input+0x218>)
 8015880:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 8015882:	429a      	cmp	r2, r3
 8015884:	d10e      	bne.n	80158a4 <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 8015886:	6a3b      	ldr	r3, [r7, #32]
 8015888:	2b00      	cmp	r3, #0
 801588a:	d014      	beq.n	80158b6 <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 801588c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801588e:	68da      	ldr	r2, [r3, #12]
 8015890:	6a3b      	ldr	r3, [r7, #32]
 8015892:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 8015894:	4b3e      	ldr	r3, [pc, #248]	; (8015990 <udp_input+0x21c>)
 8015896:	681a      	ldr	r2, [r3, #0]
 8015898:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801589a:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 801589c:	4a3c      	ldr	r2, [pc, #240]	; (8015990 <udp_input+0x21c>)
 801589e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80158a0:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 80158a2:	e008      	b.n	80158b6 <udp_input+0x142>
      }
    }

    prev = pcb;
 80158a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80158a6:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 80158a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80158aa:	68db      	ldr	r3, [r3, #12]
 80158ac:	627b      	str	r3, [r7, #36]	; 0x24
 80158ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80158b0:	2b00      	cmp	r3, #0
 80158b2:	d1a7      	bne.n	8015804 <udp_input+0x90>
 80158b4:	e000      	b.n	80158b8 <udp_input+0x144>
        break;
 80158b6:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 80158b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80158ba:	2b00      	cmp	r3, #0
 80158bc:	d101      	bne.n	80158c2 <udp_input+0x14e>
    pcb = uncon_pcb;
 80158be:	69fb      	ldr	r3, [r7, #28]
 80158c0:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 80158c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80158c4:	2b00      	cmp	r3, #0
 80158c6:	d002      	beq.n	80158ce <udp_input+0x15a>
    for_us = 1;
 80158c8:	2301      	movs	r3, #1
 80158ca:	76fb      	strb	r3, [r7, #27]
 80158cc:	e00a      	b.n	80158e4 <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 80158ce:	683b      	ldr	r3, [r7, #0]
 80158d0:	3304      	adds	r3, #4
 80158d2:	681a      	ldr	r2, [r3, #0]
 80158d4:	4b2d      	ldr	r3, [pc, #180]	; (801598c <udp_input+0x218>)
 80158d6:	695b      	ldr	r3, [r3, #20]
 80158d8:	429a      	cmp	r2, r3
 80158da:	bf0c      	ite	eq
 80158dc:	2301      	moveq	r3, #1
 80158de:	2300      	movne	r3, #0
 80158e0:	b2db      	uxtb	r3, r3
 80158e2:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 80158e4:	7efb      	ldrb	r3, [r7, #27]
 80158e6:	2b00      	cmp	r3, #0
 80158e8:	d041      	beq.n	801596e <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 80158ea:	2108      	movs	r1, #8
 80158ec:	6878      	ldr	r0, [r7, #4]
 80158ee:	f7fa f953 	bl	800fb98 <pbuf_remove_header>
 80158f2:	4603      	mov	r3, r0
 80158f4:	2b00      	cmp	r3, #0
 80158f6:	d00a      	beq.n	801590e <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 80158f8:	4b20      	ldr	r3, [pc, #128]	; (801597c <udp_input+0x208>)
 80158fa:	f44f 72b8 	mov.w	r2, #368	; 0x170
 80158fe:	4925      	ldr	r1, [pc, #148]	; (8015994 <udp_input+0x220>)
 8015900:	4820      	ldr	r0, [pc, #128]	; (8015984 <udp_input+0x210>)
 8015902:	f003 f88f 	bl	8018a24 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 8015906:	6878      	ldr	r0, [r7, #4]
 8015908:	f7fa f9cc 	bl	800fca4 <pbuf_free>
      goto end;
 801590c:	e032      	b.n	8015974 <udp_input+0x200>
    }

    if (pcb != NULL) {
 801590e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015910:	2b00      	cmp	r3, #0
 8015912:	d012      	beq.n	801593a <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 8015914:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015916:	699b      	ldr	r3, [r3, #24]
 8015918:	2b00      	cmp	r3, #0
 801591a:	d00a      	beq.n	8015932 <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 801591c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801591e:	699c      	ldr	r4, [r3, #24]
 8015920:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015922:	69d8      	ldr	r0, [r3, #28]
 8015924:	8a3b      	ldrh	r3, [r7, #16]
 8015926:	9300      	str	r3, [sp, #0]
 8015928:	4b1b      	ldr	r3, [pc, #108]	; (8015998 <udp_input+0x224>)
 801592a:	687a      	ldr	r2, [r7, #4]
 801592c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801592e:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 8015930:	e021      	b.n	8015976 <udp_input+0x202>
        pbuf_free(p);
 8015932:	6878      	ldr	r0, [r7, #4]
 8015934:	f7fa f9b6 	bl	800fca4 <pbuf_free>
        goto end;
 8015938:	e01c      	b.n	8015974 <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 801593a:	7cfb      	ldrb	r3, [r7, #19]
 801593c:	2b00      	cmp	r3, #0
 801593e:	d112      	bne.n	8015966 <udp_input+0x1f2>
 8015940:	4b12      	ldr	r3, [pc, #72]	; (801598c <udp_input+0x218>)
 8015942:	695b      	ldr	r3, [r3, #20]
 8015944:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8015948:	2be0      	cmp	r3, #224	; 0xe0
 801594a:	d00c      	beq.n	8015966 <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 801594c:	4b0f      	ldr	r3, [pc, #60]	; (801598c <udp_input+0x218>)
 801594e:	899b      	ldrh	r3, [r3, #12]
 8015950:	3308      	adds	r3, #8
 8015952:	b29b      	uxth	r3, r3
 8015954:	b21b      	sxth	r3, r3
 8015956:	4619      	mov	r1, r3
 8015958:	6878      	ldr	r0, [r7, #4]
 801595a:	f7fa f990 	bl	800fc7e <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 801595e:	2103      	movs	r1, #3
 8015960:	6878      	ldr	r0, [r7, #4]
 8015962:	f001 f8b7 	bl	8016ad4 <icmp_dest_unreach>
      pbuf_free(p);
 8015966:	6878      	ldr	r0, [r7, #4]
 8015968:	f7fa f99c 	bl	800fca4 <pbuf_free>
  return;
 801596c:	e003      	b.n	8015976 <udp_input+0x202>
    pbuf_free(p);
 801596e:	6878      	ldr	r0, [r7, #4]
 8015970:	f7fa f998 	bl	800fca4 <pbuf_free>
  return;
 8015974:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 8015976:	372c      	adds	r7, #44	; 0x2c
 8015978:	46bd      	mov	sp, r7
 801597a:	bd90      	pop	{r4, r7, pc}
 801597c:	0801cdec 	.word	0x0801cdec
 8015980:	0801ce90 	.word	0x0801ce90
 8015984:	0801ce40 	.word	0x0801ce40
 8015988:	0801cea8 	.word	0x0801cea8
 801598c:	200050bc 	.word	0x200050bc
 8015990:	20008034 	.word	0x20008034
 8015994:	0801cec4 	.word	0x0801cec4
 8015998:	200050cc 	.word	0x200050cc

0801599c <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 801599c:	b480      	push	{r7}
 801599e:	b085      	sub	sp, #20
 80159a0:	af00      	add	r7, sp, #0
 80159a2:	6078      	str	r0, [r7, #4]
 80159a4:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 80159a6:	687b      	ldr	r3, [r7, #4]
 80159a8:	2b00      	cmp	r3, #0
 80159aa:	d01e      	beq.n	80159ea <udp_netif_ip_addr_changed+0x4e>
 80159ac:	687b      	ldr	r3, [r7, #4]
 80159ae:	681b      	ldr	r3, [r3, #0]
 80159b0:	2b00      	cmp	r3, #0
 80159b2:	d01a      	beq.n	80159ea <udp_netif_ip_addr_changed+0x4e>
 80159b4:	683b      	ldr	r3, [r7, #0]
 80159b6:	2b00      	cmp	r3, #0
 80159b8:	d017      	beq.n	80159ea <udp_netif_ip_addr_changed+0x4e>
 80159ba:	683b      	ldr	r3, [r7, #0]
 80159bc:	681b      	ldr	r3, [r3, #0]
 80159be:	2b00      	cmp	r3, #0
 80159c0:	d013      	beq.n	80159ea <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 80159c2:	4b0d      	ldr	r3, [pc, #52]	; (80159f8 <udp_netif_ip_addr_changed+0x5c>)
 80159c4:	681b      	ldr	r3, [r3, #0]
 80159c6:	60fb      	str	r3, [r7, #12]
 80159c8:	e00c      	b.n	80159e4 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 80159ca:	68fb      	ldr	r3, [r7, #12]
 80159cc:	681a      	ldr	r2, [r3, #0]
 80159ce:	687b      	ldr	r3, [r7, #4]
 80159d0:	681b      	ldr	r3, [r3, #0]
 80159d2:	429a      	cmp	r2, r3
 80159d4:	d103      	bne.n	80159de <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 80159d6:	683b      	ldr	r3, [r7, #0]
 80159d8:	681a      	ldr	r2, [r3, #0]
 80159da:	68fb      	ldr	r3, [r7, #12]
 80159dc:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 80159de:	68fb      	ldr	r3, [r7, #12]
 80159e0:	68db      	ldr	r3, [r3, #12]
 80159e2:	60fb      	str	r3, [r7, #12]
 80159e4:	68fb      	ldr	r3, [r7, #12]
 80159e6:	2b00      	cmp	r3, #0
 80159e8:	d1ef      	bne.n	80159ca <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 80159ea:	bf00      	nop
 80159ec:	3714      	adds	r7, #20
 80159ee:	46bd      	mov	sp, r7
 80159f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80159f4:	4770      	bx	lr
 80159f6:	bf00      	nop
 80159f8:	20008034 	.word	0x20008034

080159fc <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 80159fc:	b580      	push	{r7, lr}
 80159fe:	b082      	sub	sp, #8
 8015a00:	af00      	add	r7, sp, #0
 8015a02:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 8015a04:	4915      	ldr	r1, [pc, #84]	; (8015a5c <etharp_free_entry+0x60>)
 8015a06:	687a      	ldr	r2, [r7, #4]
 8015a08:	4613      	mov	r3, r2
 8015a0a:	005b      	lsls	r3, r3, #1
 8015a0c:	4413      	add	r3, r2
 8015a0e:	00db      	lsls	r3, r3, #3
 8015a10:	440b      	add	r3, r1
 8015a12:	681b      	ldr	r3, [r3, #0]
 8015a14:	2b00      	cmp	r3, #0
 8015a16:	d013      	beq.n	8015a40 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 8015a18:	4910      	ldr	r1, [pc, #64]	; (8015a5c <etharp_free_entry+0x60>)
 8015a1a:	687a      	ldr	r2, [r7, #4]
 8015a1c:	4613      	mov	r3, r2
 8015a1e:	005b      	lsls	r3, r3, #1
 8015a20:	4413      	add	r3, r2
 8015a22:	00db      	lsls	r3, r3, #3
 8015a24:	440b      	add	r3, r1
 8015a26:	681b      	ldr	r3, [r3, #0]
 8015a28:	4618      	mov	r0, r3
 8015a2a:	f7fa f93b 	bl	800fca4 <pbuf_free>
    arp_table[i].q = NULL;
 8015a2e:	490b      	ldr	r1, [pc, #44]	; (8015a5c <etharp_free_entry+0x60>)
 8015a30:	687a      	ldr	r2, [r7, #4]
 8015a32:	4613      	mov	r3, r2
 8015a34:	005b      	lsls	r3, r3, #1
 8015a36:	4413      	add	r3, r2
 8015a38:	00db      	lsls	r3, r3, #3
 8015a3a:	440b      	add	r3, r1
 8015a3c:	2200      	movs	r2, #0
 8015a3e:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 8015a40:	4906      	ldr	r1, [pc, #24]	; (8015a5c <etharp_free_entry+0x60>)
 8015a42:	687a      	ldr	r2, [r7, #4]
 8015a44:	4613      	mov	r3, r2
 8015a46:	005b      	lsls	r3, r3, #1
 8015a48:	4413      	add	r3, r2
 8015a4a:	00db      	lsls	r3, r3, #3
 8015a4c:	440b      	add	r3, r1
 8015a4e:	3314      	adds	r3, #20
 8015a50:	2200      	movs	r2, #0
 8015a52:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 8015a54:	bf00      	nop
 8015a56:	3708      	adds	r7, #8
 8015a58:	46bd      	mov	sp, r7
 8015a5a:	bd80      	pop	{r7, pc}
 8015a5c:	20008038 	.word	0x20008038

08015a60 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 8015a60:	b580      	push	{r7, lr}
 8015a62:	b082      	sub	sp, #8
 8015a64:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8015a66:	2300      	movs	r3, #0
 8015a68:	607b      	str	r3, [r7, #4]
 8015a6a:	e096      	b.n	8015b9a <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 8015a6c:	494f      	ldr	r1, [pc, #316]	; (8015bac <etharp_tmr+0x14c>)
 8015a6e:	687a      	ldr	r2, [r7, #4]
 8015a70:	4613      	mov	r3, r2
 8015a72:	005b      	lsls	r3, r3, #1
 8015a74:	4413      	add	r3, r2
 8015a76:	00db      	lsls	r3, r3, #3
 8015a78:	440b      	add	r3, r1
 8015a7a:	3314      	adds	r3, #20
 8015a7c:	781b      	ldrb	r3, [r3, #0]
 8015a7e:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 8015a80:	78fb      	ldrb	r3, [r7, #3]
 8015a82:	2b00      	cmp	r3, #0
 8015a84:	f000 8086 	beq.w	8015b94 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 8015a88:	4948      	ldr	r1, [pc, #288]	; (8015bac <etharp_tmr+0x14c>)
 8015a8a:	687a      	ldr	r2, [r7, #4]
 8015a8c:	4613      	mov	r3, r2
 8015a8e:	005b      	lsls	r3, r3, #1
 8015a90:	4413      	add	r3, r2
 8015a92:	00db      	lsls	r3, r3, #3
 8015a94:	440b      	add	r3, r1
 8015a96:	3312      	adds	r3, #18
 8015a98:	881b      	ldrh	r3, [r3, #0]
 8015a9a:	3301      	adds	r3, #1
 8015a9c:	b298      	uxth	r0, r3
 8015a9e:	4943      	ldr	r1, [pc, #268]	; (8015bac <etharp_tmr+0x14c>)
 8015aa0:	687a      	ldr	r2, [r7, #4]
 8015aa2:	4613      	mov	r3, r2
 8015aa4:	005b      	lsls	r3, r3, #1
 8015aa6:	4413      	add	r3, r2
 8015aa8:	00db      	lsls	r3, r3, #3
 8015aaa:	440b      	add	r3, r1
 8015aac:	3312      	adds	r3, #18
 8015aae:	4602      	mov	r2, r0
 8015ab0:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8015ab2:	493e      	ldr	r1, [pc, #248]	; (8015bac <etharp_tmr+0x14c>)
 8015ab4:	687a      	ldr	r2, [r7, #4]
 8015ab6:	4613      	mov	r3, r2
 8015ab8:	005b      	lsls	r3, r3, #1
 8015aba:	4413      	add	r3, r2
 8015abc:	00db      	lsls	r3, r3, #3
 8015abe:	440b      	add	r3, r1
 8015ac0:	3312      	adds	r3, #18
 8015ac2:	881b      	ldrh	r3, [r3, #0]
 8015ac4:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8015ac8:	d215      	bcs.n	8015af6 <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8015aca:	4938      	ldr	r1, [pc, #224]	; (8015bac <etharp_tmr+0x14c>)
 8015acc:	687a      	ldr	r2, [r7, #4]
 8015ace:	4613      	mov	r3, r2
 8015ad0:	005b      	lsls	r3, r3, #1
 8015ad2:	4413      	add	r3, r2
 8015ad4:	00db      	lsls	r3, r3, #3
 8015ad6:	440b      	add	r3, r1
 8015ad8:	3314      	adds	r3, #20
 8015ada:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8015adc:	2b01      	cmp	r3, #1
 8015ade:	d10e      	bne.n	8015afe <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 8015ae0:	4932      	ldr	r1, [pc, #200]	; (8015bac <etharp_tmr+0x14c>)
 8015ae2:	687a      	ldr	r2, [r7, #4]
 8015ae4:	4613      	mov	r3, r2
 8015ae6:	005b      	lsls	r3, r3, #1
 8015ae8:	4413      	add	r3, r2
 8015aea:	00db      	lsls	r3, r3, #3
 8015aec:	440b      	add	r3, r1
 8015aee:	3312      	adds	r3, #18
 8015af0:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8015af2:	2b04      	cmp	r3, #4
 8015af4:	d903      	bls.n	8015afe <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 8015af6:	6878      	ldr	r0, [r7, #4]
 8015af8:	f7ff ff80 	bl	80159fc <etharp_free_entry>
 8015afc:	e04a      	b.n	8015b94 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 8015afe:	492b      	ldr	r1, [pc, #172]	; (8015bac <etharp_tmr+0x14c>)
 8015b00:	687a      	ldr	r2, [r7, #4]
 8015b02:	4613      	mov	r3, r2
 8015b04:	005b      	lsls	r3, r3, #1
 8015b06:	4413      	add	r3, r2
 8015b08:	00db      	lsls	r3, r3, #3
 8015b0a:	440b      	add	r3, r1
 8015b0c:	3314      	adds	r3, #20
 8015b0e:	781b      	ldrb	r3, [r3, #0]
 8015b10:	2b03      	cmp	r3, #3
 8015b12:	d10a      	bne.n	8015b2a <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 8015b14:	4925      	ldr	r1, [pc, #148]	; (8015bac <etharp_tmr+0x14c>)
 8015b16:	687a      	ldr	r2, [r7, #4]
 8015b18:	4613      	mov	r3, r2
 8015b1a:	005b      	lsls	r3, r3, #1
 8015b1c:	4413      	add	r3, r2
 8015b1e:	00db      	lsls	r3, r3, #3
 8015b20:	440b      	add	r3, r1
 8015b22:	3314      	adds	r3, #20
 8015b24:	2204      	movs	r2, #4
 8015b26:	701a      	strb	r2, [r3, #0]
 8015b28:	e034      	b.n	8015b94 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 8015b2a:	4920      	ldr	r1, [pc, #128]	; (8015bac <etharp_tmr+0x14c>)
 8015b2c:	687a      	ldr	r2, [r7, #4]
 8015b2e:	4613      	mov	r3, r2
 8015b30:	005b      	lsls	r3, r3, #1
 8015b32:	4413      	add	r3, r2
 8015b34:	00db      	lsls	r3, r3, #3
 8015b36:	440b      	add	r3, r1
 8015b38:	3314      	adds	r3, #20
 8015b3a:	781b      	ldrb	r3, [r3, #0]
 8015b3c:	2b04      	cmp	r3, #4
 8015b3e:	d10a      	bne.n	8015b56 <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 8015b40:	491a      	ldr	r1, [pc, #104]	; (8015bac <etharp_tmr+0x14c>)
 8015b42:	687a      	ldr	r2, [r7, #4]
 8015b44:	4613      	mov	r3, r2
 8015b46:	005b      	lsls	r3, r3, #1
 8015b48:	4413      	add	r3, r2
 8015b4a:	00db      	lsls	r3, r3, #3
 8015b4c:	440b      	add	r3, r1
 8015b4e:	3314      	adds	r3, #20
 8015b50:	2202      	movs	r2, #2
 8015b52:	701a      	strb	r2, [r3, #0]
 8015b54:	e01e      	b.n	8015b94 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8015b56:	4915      	ldr	r1, [pc, #84]	; (8015bac <etharp_tmr+0x14c>)
 8015b58:	687a      	ldr	r2, [r7, #4]
 8015b5a:	4613      	mov	r3, r2
 8015b5c:	005b      	lsls	r3, r3, #1
 8015b5e:	4413      	add	r3, r2
 8015b60:	00db      	lsls	r3, r3, #3
 8015b62:	440b      	add	r3, r1
 8015b64:	3314      	adds	r3, #20
 8015b66:	781b      	ldrb	r3, [r3, #0]
 8015b68:	2b01      	cmp	r3, #1
 8015b6a:	d113      	bne.n	8015b94 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 8015b6c:	490f      	ldr	r1, [pc, #60]	; (8015bac <etharp_tmr+0x14c>)
 8015b6e:	687a      	ldr	r2, [r7, #4]
 8015b70:	4613      	mov	r3, r2
 8015b72:	005b      	lsls	r3, r3, #1
 8015b74:	4413      	add	r3, r2
 8015b76:	00db      	lsls	r3, r3, #3
 8015b78:	440b      	add	r3, r1
 8015b7a:	3308      	adds	r3, #8
 8015b7c:	6818      	ldr	r0, [r3, #0]
 8015b7e:	687a      	ldr	r2, [r7, #4]
 8015b80:	4613      	mov	r3, r2
 8015b82:	005b      	lsls	r3, r3, #1
 8015b84:	4413      	add	r3, r2
 8015b86:	00db      	lsls	r3, r3, #3
 8015b88:	4a08      	ldr	r2, [pc, #32]	; (8015bac <etharp_tmr+0x14c>)
 8015b8a:	4413      	add	r3, r2
 8015b8c:	3304      	adds	r3, #4
 8015b8e:	4619      	mov	r1, r3
 8015b90:	f000 fe6e 	bl	8016870 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8015b94:	687b      	ldr	r3, [r7, #4]
 8015b96:	3301      	adds	r3, #1
 8015b98:	607b      	str	r3, [r7, #4]
 8015b9a:	687b      	ldr	r3, [r7, #4]
 8015b9c:	2b09      	cmp	r3, #9
 8015b9e:	f77f af65 	ble.w	8015a6c <etharp_tmr+0xc>
      }
    }
  }
}
 8015ba2:	bf00      	nop
 8015ba4:	bf00      	nop
 8015ba6:	3708      	adds	r7, #8
 8015ba8:	46bd      	mov	sp, r7
 8015baa:	bd80      	pop	{r7, pc}
 8015bac:	20008038 	.word	0x20008038

08015bb0 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 8015bb0:	b580      	push	{r7, lr}
 8015bb2:	b08a      	sub	sp, #40	; 0x28
 8015bb4:	af00      	add	r7, sp, #0
 8015bb6:	60f8      	str	r0, [r7, #12]
 8015bb8:	460b      	mov	r3, r1
 8015bba:	607a      	str	r2, [r7, #4]
 8015bbc:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 8015bbe:	230a      	movs	r3, #10
 8015bc0:	84fb      	strh	r3, [r7, #38]	; 0x26
 8015bc2:	230a      	movs	r3, #10
 8015bc4:	84bb      	strh	r3, [r7, #36]	; 0x24
  s16_t empty = ARP_TABLE_SIZE;
 8015bc6:	230a      	movs	r3, #10
 8015bc8:	847b      	strh	r3, [r7, #34]	; 0x22
  s16_t i = 0;
 8015bca:	2300      	movs	r3, #0
 8015bcc:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 8015bce:	230a      	movs	r3, #10
 8015bd0:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 8015bd2:	2300      	movs	r3, #0
 8015bd4:	83bb      	strh	r3, [r7, #28]
 8015bd6:	2300      	movs	r3, #0
 8015bd8:	837b      	strh	r3, [r7, #26]
 8015bda:	2300      	movs	r3, #0
 8015bdc:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8015bde:	2300      	movs	r3, #0
 8015be0:	843b      	strh	r3, [r7, #32]
 8015be2:	e0ae      	b.n	8015d42 <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 8015be4:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8015be8:	49a6      	ldr	r1, [pc, #664]	; (8015e84 <etharp_find_entry+0x2d4>)
 8015bea:	4613      	mov	r3, r2
 8015bec:	005b      	lsls	r3, r3, #1
 8015bee:	4413      	add	r3, r2
 8015bf0:	00db      	lsls	r3, r3, #3
 8015bf2:	440b      	add	r3, r1
 8015bf4:	3314      	adds	r3, #20
 8015bf6:	781b      	ldrb	r3, [r3, #0]
 8015bf8:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 8015bfa:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8015bfe:	2b0a      	cmp	r3, #10
 8015c00:	d105      	bne.n	8015c0e <etharp_find_entry+0x5e>
 8015c02:	7dfb      	ldrb	r3, [r7, #23]
 8015c04:	2b00      	cmp	r3, #0
 8015c06:	d102      	bne.n	8015c0e <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 8015c08:	8c3b      	ldrh	r3, [r7, #32]
 8015c0a:	847b      	strh	r3, [r7, #34]	; 0x22
 8015c0c:	e095      	b.n	8015d3a <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 8015c0e:	7dfb      	ldrb	r3, [r7, #23]
 8015c10:	2b00      	cmp	r3, #0
 8015c12:	f000 8092 	beq.w	8015d3a <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 8015c16:	7dfb      	ldrb	r3, [r7, #23]
 8015c18:	2b01      	cmp	r3, #1
 8015c1a:	d009      	beq.n	8015c30 <etharp_find_entry+0x80>
 8015c1c:	7dfb      	ldrb	r3, [r7, #23]
 8015c1e:	2b01      	cmp	r3, #1
 8015c20:	d806      	bhi.n	8015c30 <etharp_find_entry+0x80>
 8015c22:	4b99      	ldr	r3, [pc, #612]	; (8015e88 <etharp_find_entry+0x2d8>)
 8015c24:	f240 1223 	movw	r2, #291	; 0x123
 8015c28:	4998      	ldr	r1, [pc, #608]	; (8015e8c <etharp_find_entry+0x2dc>)
 8015c2a:	4899      	ldr	r0, [pc, #612]	; (8015e90 <etharp_find_entry+0x2e0>)
 8015c2c:	f002 fefa 	bl	8018a24 <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 8015c30:	68fb      	ldr	r3, [r7, #12]
 8015c32:	2b00      	cmp	r3, #0
 8015c34:	d020      	beq.n	8015c78 <etharp_find_entry+0xc8>
 8015c36:	68fb      	ldr	r3, [r7, #12]
 8015c38:	6819      	ldr	r1, [r3, #0]
 8015c3a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8015c3e:	4891      	ldr	r0, [pc, #580]	; (8015e84 <etharp_find_entry+0x2d4>)
 8015c40:	4613      	mov	r3, r2
 8015c42:	005b      	lsls	r3, r3, #1
 8015c44:	4413      	add	r3, r2
 8015c46:	00db      	lsls	r3, r3, #3
 8015c48:	4403      	add	r3, r0
 8015c4a:	3304      	adds	r3, #4
 8015c4c:	681b      	ldr	r3, [r3, #0]
 8015c4e:	4299      	cmp	r1, r3
 8015c50:	d112      	bne.n	8015c78 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 8015c52:	687b      	ldr	r3, [r7, #4]
 8015c54:	2b00      	cmp	r3, #0
 8015c56:	d00c      	beq.n	8015c72 <etharp_find_entry+0xc2>
 8015c58:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8015c5c:	4989      	ldr	r1, [pc, #548]	; (8015e84 <etharp_find_entry+0x2d4>)
 8015c5e:	4613      	mov	r3, r2
 8015c60:	005b      	lsls	r3, r3, #1
 8015c62:	4413      	add	r3, r2
 8015c64:	00db      	lsls	r3, r3, #3
 8015c66:	440b      	add	r3, r1
 8015c68:	3308      	adds	r3, #8
 8015c6a:	681b      	ldr	r3, [r3, #0]
 8015c6c:	687a      	ldr	r2, [r7, #4]
 8015c6e:	429a      	cmp	r2, r3
 8015c70:	d102      	bne.n	8015c78 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 8015c72:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8015c76:	e100      	b.n	8015e7a <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 8015c78:	7dfb      	ldrb	r3, [r7, #23]
 8015c7a:	2b01      	cmp	r3, #1
 8015c7c:	d140      	bne.n	8015d00 <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 8015c7e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8015c82:	4980      	ldr	r1, [pc, #512]	; (8015e84 <etharp_find_entry+0x2d4>)
 8015c84:	4613      	mov	r3, r2
 8015c86:	005b      	lsls	r3, r3, #1
 8015c88:	4413      	add	r3, r2
 8015c8a:	00db      	lsls	r3, r3, #3
 8015c8c:	440b      	add	r3, r1
 8015c8e:	681b      	ldr	r3, [r3, #0]
 8015c90:	2b00      	cmp	r3, #0
 8015c92:	d01a      	beq.n	8015cca <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 8015c94:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8015c98:	497a      	ldr	r1, [pc, #488]	; (8015e84 <etharp_find_entry+0x2d4>)
 8015c9a:	4613      	mov	r3, r2
 8015c9c:	005b      	lsls	r3, r3, #1
 8015c9e:	4413      	add	r3, r2
 8015ca0:	00db      	lsls	r3, r3, #3
 8015ca2:	440b      	add	r3, r1
 8015ca4:	3312      	adds	r3, #18
 8015ca6:	881b      	ldrh	r3, [r3, #0]
 8015ca8:	8bba      	ldrh	r2, [r7, #28]
 8015caa:	429a      	cmp	r2, r3
 8015cac:	d845      	bhi.n	8015d3a <etharp_find_entry+0x18a>
            old_queue = i;
 8015cae:	8c3b      	ldrh	r3, [r7, #32]
 8015cb0:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 8015cb2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8015cb6:	4973      	ldr	r1, [pc, #460]	; (8015e84 <etharp_find_entry+0x2d4>)
 8015cb8:	4613      	mov	r3, r2
 8015cba:	005b      	lsls	r3, r3, #1
 8015cbc:	4413      	add	r3, r2
 8015cbe:	00db      	lsls	r3, r3, #3
 8015cc0:	440b      	add	r3, r1
 8015cc2:	3312      	adds	r3, #18
 8015cc4:	881b      	ldrh	r3, [r3, #0]
 8015cc6:	83bb      	strh	r3, [r7, #28]
 8015cc8:	e037      	b.n	8015d3a <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 8015cca:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8015cce:	496d      	ldr	r1, [pc, #436]	; (8015e84 <etharp_find_entry+0x2d4>)
 8015cd0:	4613      	mov	r3, r2
 8015cd2:	005b      	lsls	r3, r3, #1
 8015cd4:	4413      	add	r3, r2
 8015cd6:	00db      	lsls	r3, r3, #3
 8015cd8:	440b      	add	r3, r1
 8015cda:	3312      	adds	r3, #18
 8015cdc:	881b      	ldrh	r3, [r3, #0]
 8015cde:	8b7a      	ldrh	r2, [r7, #26]
 8015ce0:	429a      	cmp	r2, r3
 8015ce2:	d82a      	bhi.n	8015d3a <etharp_find_entry+0x18a>
            old_pending = i;
 8015ce4:	8c3b      	ldrh	r3, [r7, #32]
 8015ce6:	84fb      	strh	r3, [r7, #38]	; 0x26
            age_pending = arp_table[i].ctime;
 8015ce8:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8015cec:	4965      	ldr	r1, [pc, #404]	; (8015e84 <etharp_find_entry+0x2d4>)
 8015cee:	4613      	mov	r3, r2
 8015cf0:	005b      	lsls	r3, r3, #1
 8015cf2:	4413      	add	r3, r2
 8015cf4:	00db      	lsls	r3, r3, #3
 8015cf6:	440b      	add	r3, r1
 8015cf8:	3312      	adds	r3, #18
 8015cfa:	881b      	ldrh	r3, [r3, #0]
 8015cfc:	837b      	strh	r3, [r7, #26]
 8015cfe:	e01c      	b.n	8015d3a <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 8015d00:	7dfb      	ldrb	r3, [r7, #23]
 8015d02:	2b01      	cmp	r3, #1
 8015d04:	d919      	bls.n	8015d3a <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 8015d06:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8015d0a:	495e      	ldr	r1, [pc, #376]	; (8015e84 <etharp_find_entry+0x2d4>)
 8015d0c:	4613      	mov	r3, r2
 8015d0e:	005b      	lsls	r3, r3, #1
 8015d10:	4413      	add	r3, r2
 8015d12:	00db      	lsls	r3, r3, #3
 8015d14:	440b      	add	r3, r1
 8015d16:	3312      	adds	r3, #18
 8015d18:	881b      	ldrh	r3, [r3, #0]
 8015d1a:	8b3a      	ldrh	r2, [r7, #24]
 8015d1c:	429a      	cmp	r2, r3
 8015d1e:	d80c      	bhi.n	8015d3a <etharp_find_entry+0x18a>
            old_stable = i;
 8015d20:	8c3b      	ldrh	r3, [r7, #32]
 8015d22:	84bb      	strh	r3, [r7, #36]	; 0x24
            age_stable = arp_table[i].ctime;
 8015d24:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8015d28:	4956      	ldr	r1, [pc, #344]	; (8015e84 <etharp_find_entry+0x2d4>)
 8015d2a:	4613      	mov	r3, r2
 8015d2c:	005b      	lsls	r3, r3, #1
 8015d2e:	4413      	add	r3, r2
 8015d30:	00db      	lsls	r3, r3, #3
 8015d32:	440b      	add	r3, r1
 8015d34:	3312      	adds	r3, #18
 8015d36:	881b      	ldrh	r3, [r3, #0]
 8015d38:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8015d3a:	8c3b      	ldrh	r3, [r7, #32]
 8015d3c:	3301      	adds	r3, #1
 8015d3e:	b29b      	uxth	r3, r3
 8015d40:	843b      	strh	r3, [r7, #32]
 8015d42:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8015d46:	2b09      	cmp	r3, #9
 8015d48:	f77f af4c 	ble.w	8015be4 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 8015d4c:	7afb      	ldrb	r3, [r7, #11]
 8015d4e:	f003 0302 	and.w	r3, r3, #2
 8015d52:	2b00      	cmp	r3, #0
 8015d54:	d108      	bne.n	8015d68 <etharp_find_entry+0x1b8>
 8015d56:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8015d5a:	2b0a      	cmp	r3, #10
 8015d5c:	d107      	bne.n	8015d6e <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 8015d5e:	7afb      	ldrb	r3, [r7, #11]
 8015d60:	f003 0301 	and.w	r3, r3, #1
 8015d64:	2b00      	cmp	r3, #0
 8015d66:	d102      	bne.n	8015d6e <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 8015d68:	f04f 33ff 	mov.w	r3, #4294967295
 8015d6c:	e085      	b.n	8015e7a <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 8015d6e:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8015d72:	2b09      	cmp	r3, #9
 8015d74:	dc02      	bgt.n	8015d7c <etharp_find_entry+0x1cc>
    i = empty;
 8015d76:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8015d78:	843b      	strh	r3, [r7, #32]
 8015d7a:	e039      	b.n	8015df0 <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 8015d7c:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8015d80:	2b09      	cmp	r3, #9
 8015d82:	dc14      	bgt.n	8015dae <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 8015d84:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8015d86:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 8015d88:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8015d8c:	493d      	ldr	r1, [pc, #244]	; (8015e84 <etharp_find_entry+0x2d4>)
 8015d8e:	4613      	mov	r3, r2
 8015d90:	005b      	lsls	r3, r3, #1
 8015d92:	4413      	add	r3, r2
 8015d94:	00db      	lsls	r3, r3, #3
 8015d96:	440b      	add	r3, r1
 8015d98:	681b      	ldr	r3, [r3, #0]
 8015d9a:	2b00      	cmp	r3, #0
 8015d9c:	d018      	beq.n	8015dd0 <etharp_find_entry+0x220>
 8015d9e:	4b3a      	ldr	r3, [pc, #232]	; (8015e88 <etharp_find_entry+0x2d8>)
 8015da0:	f240 126d 	movw	r2, #365	; 0x16d
 8015da4:	493b      	ldr	r1, [pc, #236]	; (8015e94 <etharp_find_entry+0x2e4>)
 8015da6:	483a      	ldr	r0, [pc, #232]	; (8015e90 <etharp_find_entry+0x2e0>)
 8015da8:	f002 fe3c 	bl	8018a24 <iprintf>
 8015dac:	e010      	b.n	8015dd0 <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 8015dae:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8015db2:	2b09      	cmp	r3, #9
 8015db4:	dc02      	bgt.n	8015dbc <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 8015db6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8015db8:	843b      	strh	r3, [r7, #32]
 8015dba:	e009      	b.n	8015dd0 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 8015dbc:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8015dc0:	2b09      	cmp	r3, #9
 8015dc2:	dc02      	bgt.n	8015dca <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 8015dc4:	8bfb      	ldrh	r3, [r7, #30]
 8015dc6:	843b      	strh	r3, [r7, #32]
 8015dc8:	e002      	b.n	8015dd0 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 8015dca:	f04f 33ff 	mov.w	r3, #4294967295
 8015dce:	e054      	b.n	8015e7a <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8015dd0:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8015dd4:	2b09      	cmp	r3, #9
 8015dd6:	dd06      	ble.n	8015de6 <etharp_find_entry+0x236>
 8015dd8:	4b2b      	ldr	r3, [pc, #172]	; (8015e88 <etharp_find_entry+0x2d8>)
 8015dda:	f240 127f 	movw	r2, #383	; 0x17f
 8015dde:	492e      	ldr	r1, [pc, #184]	; (8015e98 <etharp_find_entry+0x2e8>)
 8015de0:	482b      	ldr	r0, [pc, #172]	; (8015e90 <etharp_find_entry+0x2e0>)
 8015de2:	f002 fe1f 	bl	8018a24 <iprintf>
    etharp_free_entry(i);
 8015de6:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8015dea:	4618      	mov	r0, r3
 8015dec:	f7ff fe06 	bl	80159fc <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8015df0:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8015df4:	2b09      	cmp	r3, #9
 8015df6:	dd06      	ble.n	8015e06 <etharp_find_entry+0x256>
 8015df8:	4b23      	ldr	r3, [pc, #140]	; (8015e88 <etharp_find_entry+0x2d8>)
 8015dfa:	f240 1283 	movw	r2, #387	; 0x183
 8015dfe:	4926      	ldr	r1, [pc, #152]	; (8015e98 <etharp_find_entry+0x2e8>)
 8015e00:	4823      	ldr	r0, [pc, #140]	; (8015e90 <etharp_find_entry+0x2e0>)
 8015e02:	f002 fe0f 	bl	8018a24 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 8015e06:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8015e0a:	491e      	ldr	r1, [pc, #120]	; (8015e84 <etharp_find_entry+0x2d4>)
 8015e0c:	4613      	mov	r3, r2
 8015e0e:	005b      	lsls	r3, r3, #1
 8015e10:	4413      	add	r3, r2
 8015e12:	00db      	lsls	r3, r3, #3
 8015e14:	440b      	add	r3, r1
 8015e16:	3314      	adds	r3, #20
 8015e18:	781b      	ldrb	r3, [r3, #0]
 8015e1a:	2b00      	cmp	r3, #0
 8015e1c:	d006      	beq.n	8015e2c <etharp_find_entry+0x27c>
 8015e1e:	4b1a      	ldr	r3, [pc, #104]	; (8015e88 <etharp_find_entry+0x2d8>)
 8015e20:	f44f 72c2 	mov.w	r2, #388	; 0x184
 8015e24:	491d      	ldr	r1, [pc, #116]	; (8015e9c <etharp_find_entry+0x2ec>)
 8015e26:	481a      	ldr	r0, [pc, #104]	; (8015e90 <etharp_find_entry+0x2e0>)
 8015e28:	f002 fdfc 	bl	8018a24 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 8015e2c:	68fb      	ldr	r3, [r7, #12]
 8015e2e:	2b00      	cmp	r3, #0
 8015e30:	d00b      	beq.n	8015e4a <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 8015e32:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8015e36:	68fb      	ldr	r3, [r7, #12]
 8015e38:	6819      	ldr	r1, [r3, #0]
 8015e3a:	4812      	ldr	r0, [pc, #72]	; (8015e84 <etharp_find_entry+0x2d4>)
 8015e3c:	4613      	mov	r3, r2
 8015e3e:	005b      	lsls	r3, r3, #1
 8015e40:	4413      	add	r3, r2
 8015e42:	00db      	lsls	r3, r3, #3
 8015e44:	4403      	add	r3, r0
 8015e46:	3304      	adds	r3, #4
 8015e48:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 8015e4a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8015e4e:	490d      	ldr	r1, [pc, #52]	; (8015e84 <etharp_find_entry+0x2d4>)
 8015e50:	4613      	mov	r3, r2
 8015e52:	005b      	lsls	r3, r3, #1
 8015e54:	4413      	add	r3, r2
 8015e56:	00db      	lsls	r3, r3, #3
 8015e58:	440b      	add	r3, r1
 8015e5a:	3312      	adds	r3, #18
 8015e5c:	2200      	movs	r2, #0
 8015e5e:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 8015e60:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8015e64:	4907      	ldr	r1, [pc, #28]	; (8015e84 <etharp_find_entry+0x2d4>)
 8015e66:	4613      	mov	r3, r2
 8015e68:	005b      	lsls	r3, r3, #1
 8015e6a:	4413      	add	r3, r2
 8015e6c:	00db      	lsls	r3, r3, #3
 8015e6e:	440b      	add	r3, r1
 8015e70:	3308      	adds	r3, #8
 8015e72:	687a      	ldr	r2, [r7, #4]
 8015e74:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 8015e76:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 8015e7a:	4618      	mov	r0, r3
 8015e7c:	3728      	adds	r7, #40	; 0x28
 8015e7e:	46bd      	mov	sp, r7
 8015e80:	bd80      	pop	{r7, pc}
 8015e82:	bf00      	nop
 8015e84:	20008038 	.word	0x20008038
 8015e88:	0801d150 	.word	0x0801d150
 8015e8c:	0801d188 	.word	0x0801d188
 8015e90:	0801d1c8 	.word	0x0801d1c8
 8015e94:	0801d1f0 	.word	0x0801d1f0
 8015e98:	0801d208 	.word	0x0801d208
 8015e9c:	0801d21c 	.word	0x0801d21c

08015ea0 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 8015ea0:	b580      	push	{r7, lr}
 8015ea2:	b088      	sub	sp, #32
 8015ea4:	af02      	add	r7, sp, #8
 8015ea6:	60f8      	str	r0, [r7, #12]
 8015ea8:	60b9      	str	r1, [r7, #8]
 8015eaa:	607a      	str	r2, [r7, #4]
 8015eac:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 8015eae:	68fb      	ldr	r3, [r7, #12]
 8015eb0:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8015eb4:	2b06      	cmp	r3, #6
 8015eb6:	d006      	beq.n	8015ec6 <etharp_update_arp_entry+0x26>
 8015eb8:	4b48      	ldr	r3, [pc, #288]	; (8015fdc <etharp_update_arp_entry+0x13c>)
 8015eba:	f240 12a9 	movw	r2, #425	; 0x1a9
 8015ebe:	4948      	ldr	r1, [pc, #288]	; (8015fe0 <etharp_update_arp_entry+0x140>)
 8015ec0:	4848      	ldr	r0, [pc, #288]	; (8015fe4 <etharp_update_arp_entry+0x144>)
 8015ec2:	f002 fdaf 	bl	8018a24 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 8015ec6:	68bb      	ldr	r3, [r7, #8]
 8015ec8:	2b00      	cmp	r3, #0
 8015eca:	d012      	beq.n	8015ef2 <etharp_update_arp_entry+0x52>
 8015ecc:	68bb      	ldr	r3, [r7, #8]
 8015ece:	681b      	ldr	r3, [r3, #0]
 8015ed0:	2b00      	cmp	r3, #0
 8015ed2:	d00e      	beq.n	8015ef2 <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8015ed4:	68bb      	ldr	r3, [r7, #8]
 8015ed6:	681b      	ldr	r3, [r3, #0]
 8015ed8:	68f9      	ldr	r1, [r7, #12]
 8015eda:	4618      	mov	r0, r3
 8015edc:	f001 f924 	bl	8017128 <ip4_addr_isbroadcast_u32>
 8015ee0:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 8015ee2:	2b00      	cmp	r3, #0
 8015ee4:	d105      	bne.n	8015ef2 <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 8015ee6:	68bb      	ldr	r3, [r7, #8]
 8015ee8:	681b      	ldr	r3, [r3, #0]
 8015eea:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8015eee:	2be0      	cmp	r3, #224	; 0xe0
 8015ef0:	d102      	bne.n	8015ef8 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8015ef2:	f06f 030f 	mvn.w	r3, #15
 8015ef6:	e06c      	b.n	8015fd2 <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 8015ef8:	78fb      	ldrb	r3, [r7, #3]
 8015efa:	68fa      	ldr	r2, [r7, #12]
 8015efc:	4619      	mov	r1, r3
 8015efe:	68b8      	ldr	r0, [r7, #8]
 8015f00:	f7ff fe56 	bl	8015bb0 <etharp_find_entry>
 8015f04:	4603      	mov	r3, r0
 8015f06:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 8015f08:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8015f0c:	2b00      	cmp	r3, #0
 8015f0e:	da02      	bge.n	8015f16 <etharp_update_arp_entry+0x76>
    return (err_t)i;
 8015f10:	8afb      	ldrh	r3, [r7, #22]
 8015f12:	b25b      	sxtb	r3, r3
 8015f14:	e05d      	b.n	8015fd2 <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 8015f16:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8015f1a:	4933      	ldr	r1, [pc, #204]	; (8015fe8 <etharp_update_arp_entry+0x148>)
 8015f1c:	4613      	mov	r3, r2
 8015f1e:	005b      	lsls	r3, r3, #1
 8015f20:	4413      	add	r3, r2
 8015f22:	00db      	lsls	r3, r3, #3
 8015f24:	440b      	add	r3, r1
 8015f26:	3314      	adds	r3, #20
 8015f28:	2202      	movs	r2, #2
 8015f2a:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 8015f2c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8015f30:	492d      	ldr	r1, [pc, #180]	; (8015fe8 <etharp_update_arp_entry+0x148>)
 8015f32:	4613      	mov	r3, r2
 8015f34:	005b      	lsls	r3, r3, #1
 8015f36:	4413      	add	r3, r2
 8015f38:	00db      	lsls	r3, r3, #3
 8015f3a:	440b      	add	r3, r1
 8015f3c:	3308      	adds	r3, #8
 8015f3e:	68fa      	ldr	r2, [r7, #12]
 8015f40:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 8015f42:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8015f46:	4613      	mov	r3, r2
 8015f48:	005b      	lsls	r3, r3, #1
 8015f4a:	4413      	add	r3, r2
 8015f4c:	00db      	lsls	r3, r3, #3
 8015f4e:	3308      	adds	r3, #8
 8015f50:	4a25      	ldr	r2, [pc, #148]	; (8015fe8 <etharp_update_arp_entry+0x148>)
 8015f52:	4413      	add	r3, r2
 8015f54:	3304      	adds	r3, #4
 8015f56:	2206      	movs	r2, #6
 8015f58:	6879      	ldr	r1, [r7, #4]
 8015f5a:	4618      	mov	r0, r3
 8015f5c:	f002 ff30 	bl	8018dc0 <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 8015f60:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8015f64:	4920      	ldr	r1, [pc, #128]	; (8015fe8 <etharp_update_arp_entry+0x148>)
 8015f66:	4613      	mov	r3, r2
 8015f68:	005b      	lsls	r3, r3, #1
 8015f6a:	4413      	add	r3, r2
 8015f6c:	00db      	lsls	r3, r3, #3
 8015f6e:	440b      	add	r3, r1
 8015f70:	3312      	adds	r3, #18
 8015f72:	2200      	movs	r2, #0
 8015f74:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 8015f76:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8015f7a:	491b      	ldr	r1, [pc, #108]	; (8015fe8 <etharp_update_arp_entry+0x148>)
 8015f7c:	4613      	mov	r3, r2
 8015f7e:	005b      	lsls	r3, r3, #1
 8015f80:	4413      	add	r3, r2
 8015f82:	00db      	lsls	r3, r3, #3
 8015f84:	440b      	add	r3, r1
 8015f86:	681b      	ldr	r3, [r3, #0]
 8015f88:	2b00      	cmp	r3, #0
 8015f8a:	d021      	beq.n	8015fd0 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 8015f8c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8015f90:	4915      	ldr	r1, [pc, #84]	; (8015fe8 <etharp_update_arp_entry+0x148>)
 8015f92:	4613      	mov	r3, r2
 8015f94:	005b      	lsls	r3, r3, #1
 8015f96:	4413      	add	r3, r2
 8015f98:	00db      	lsls	r3, r3, #3
 8015f9a:	440b      	add	r3, r1
 8015f9c:	681b      	ldr	r3, [r3, #0]
 8015f9e:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 8015fa0:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8015fa4:	4910      	ldr	r1, [pc, #64]	; (8015fe8 <etharp_update_arp_entry+0x148>)
 8015fa6:	4613      	mov	r3, r2
 8015fa8:	005b      	lsls	r3, r3, #1
 8015faa:	4413      	add	r3, r2
 8015fac:	00db      	lsls	r3, r3, #3
 8015fae:	440b      	add	r3, r1
 8015fb0:	2200      	movs	r2, #0
 8015fb2:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 8015fb4:	68fb      	ldr	r3, [r7, #12]
 8015fb6:	f103 0226 	add.w	r2, r3, #38	; 0x26
 8015fba:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8015fbe:	9300      	str	r3, [sp, #0]
 8015fc0:	687b      	ldr	r3, [r7, #4]
 8015fc2:	6939      	ldr	r1, [r7, #16]
 8015fc4:	68f8      	ldr	r0, [r7, #12]
 8015fc6:	f001 ffbd 	bl	8017f44 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 8015fca:	6938      	ldr	r0, [r7, #16]
 8015fcc:	f7f9 fe6a 	bl	800fca4 <pbuf_free>
  }
  return ERR_OK;
 8015fd0:	2300      	movs	r3, #0
}
 8015fd2:	4618      	mov	r0, r3
 8015fd4:	3718      	adds	r7, #24
 8015fd6:	46bd      	mov	sp, r7
 8015fd8:	bd80      	pop	{r7, pc}
 8015fda:	bf00      	nop
 8015fdc:	0801d150 	.word	0x0801d150
 8015fe0:	0801d248 	.word	0x0801d248
 8015fe4:	0801d1c8 	.word	0x0801d1c8
 8015fe8:	20008038 	.word	0x20008038

08015fec <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 8015fec:	b580      	push	{r7, lr}
 8015fee:	b084      	sub	sp, #16
 8015ff0:	af00      	add	r7, sp, #0
 8015ff2:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8015ff4:	2300      	movs	r3, #0
 8015ff6:	60fb      	str	r3, [r7, #12]
 8015ff8:	e01e      	b.n	8016038 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 8015ffa:	4913      	ldr	r1, [pc, #76]	; (8016048 <etharp_cleanup_netif+0x5c>)
 8015ffc:	68fa      	ldr	r2, [r7, #12]
 8015ffe:	4613      	mov	r3, r2
 8016000:	005b      	lsls	r3, r3, #1
 8016002:	4413      	add	r3, r2
 8016004:	00db      	lsls	r3, r3, #3
 8016006:	440b      	add	r3, r1
 8016008:	3314      	adds	r3, #20
 801600a:	781b      	ldrb	r3, [r3, #0]
 801600c:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 801600e:	7afb      	ldrb	r3, [r7, #11]
 8016010:	2b00      	cmp	r3, #0
 8016012:	d00e      	beq.n	8016032 <etharp_cleanup_netif+0x46>
 8016014:	490c      	ldr	r1, [pc, #48]	; (8016048 <etharp_cleanup_netif+0x5c>)
 8016016:	68fa      	ldr	r2, [r7, #12]
 8016018:	4613      	mov	r3, r2
 801601a:	005b      	lsls	r3, r3, #1
 801601c:	4413      	add	r3, r2
 801601e:	00db      	lsls	r3, r3, #3
 8016020:	440b      	add	r3, r1
 8016022:	3308      	adds	r3, #8
 8016024:	681b      	ldr	r3, [r3, #0]
 8016026:	687a      	ldr	r2, [r7, #4]
 8016028:	429a      	cmp	r2, r3
 801602a:	d102      	bne.n	8016032 <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 801602c:	68f8      	ldr	r0, [r7, #12]
 801602e:	f7ff fce5 	bl	80159fc <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8016032:	68fb      	ldr	r3, [r7, #12]
 8016034:	3301      	adds	r3, #1
 8016036:	60fb      	str	r3, [r7, #12]
 8016038:	68fb      	ldr	r3, [r7, #12]
 801603a:	2b09      	cmp	r3, #9
 801603c:	dddd      	ble.n	8015ffa <etharp_cleanup_netif+0xe>
    }
  }
}
 801603e:	bf00      	nop
 8016040:	bf00      	nop
 8016042:	3710      	adds	r7, #16
 8016044:	46bd      	mov	sp, r7
 8016046:	bd80      	pop	{r7, pc}
 8016048:	20008038 	.word	0x20008038

0801604c <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 801604c:	b5b0      	push	{r4, r5, r7, lr}
 801604e:	b08a      	sub	sp, #40	; 0x28
 8016050:	af04      	add	r7, sp, #16
 8016052:	6078      	str	r0, [r7, #4]
 8016054:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 8016056:	683b      	ldr	r3, [r7, #0]
 8016058:	2b00      	cmp	r3, #0
 801605a:	d107      	bne.n	801606c <etharp_input+0x20>
 801605c:	4b3d      	ldr	r3, [pc, #244]	; (8016154 <etharp_input+0x108>)
 801605e:	f240 228a 	movw	r2, #650	; 0x28a
 8016062:	493d      	ldr	r1, [pc, #244]	; (8016158 <etharp_input+0x10c>)
 8016064:	483d      	ldr	r0, [pc, #244]	; (801615c <etharp_input+0x110>)
 8016066:	f002 fcdd 	bl	8018a24 <iprintf>
 801606a:	e06f      	b.n	801614c <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 801606c:	687b      	ldr	r3, [r7, #4]
 801606e:	685b      	ldr	r3, [r3, #4]
 8016070:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 8016072:	693b      	ldr	r3, [r7, #16]
 8016074:	881b      	ldrh	r3, [r3, #0]
 8016076:	b29b      	uxth	r3, r3
 8016078:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801607c:	d10c      	bne.n	8016098 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 801607e:	693b      	ldr	r3, [r7, #16]
 8016080:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 8016082:	2b06      	cmp	r3, #6
 8016084:	d108      	bne.n	8016098 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8016086:	693b      	ldr	r3, [r7, #16]
 8016088:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 801608a:	2b04      	cmp	r3, #4
 801608c:	d104      	bne.n	8016098 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 801608e:	693b      	ldr	r3, [r7, #16]
 8016090:	885b      	ldrh	r3, [r3, #2]
 8016092:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8016094:	2b08      	cmp	r3, #8
 8016096:	d003      	beq.n	80160a0 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 8016098:	6878      	ldr	r0, [r7, #4]
 801609a:	f7f9 fe03 	bl	800fca4 <pbuf_free>
    return;
 801609e:	e055      	b.n	801614c <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 80160a0:	693b      	ldr	r3, [r7, #16]
 80160a2:	330e      	adds	r3, #14
 80160a4:	681b      	ldr	r3, [r3, #0]
 80160a6:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 80160a8:	693b      	ldr	r3, [r7, #16]
 80160aa:	3318      	adds	r3, #24
 80160ac:	681b      	ldr	r3, [r3, #0]
 80160ae:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 80160b0:	683b      	ldr	r3, [r7, #0]
 80160b2:	3304      	adds	r3, #4
 80160b4:	681b      	ldr	r3, [r3, #0]
 80160b6:	2b00      	cmp	r3, #0
 80160b8:	d102      	bne.n	80160c0 <etharp_input+0x74>
    for_us = 0;
 80160ba:	2300      	movs	r3, #0
 80160bc:	75fb      	strb	r3, [r7, #23]
 80160be:	e009      	b.n	80160d4 <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 80160c0:	68ba      	ldr	r2, [r7, #8]
 80160c2:	683b      	ldr	r3, [r7, #0]
 80160c4:	3304      	adds	r3, #4
 80160c6:	681b      	ldr	r3, [r3, #0]
 80160c8:	429a      	cmp	r2, r3
 80160ca:	bf0c      	ite	eq
 80160cc:	2301      	moveq	r3, #1
 80160ce:	2300      	movne	r3, #0
 80160d0:	b2db      	uxtb	r3, r3
 80160d2:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 80160d4:	693b      	ldr	r3, [r7, #16]
 80160d6:	f103 0208 	add.w	r2, r3, #8
 80160da:	7dfb      	ldrb	r3, [r7, #23]
 80160dc:	2b00      	cmp	r3, #0
 80160de:	d001      	beq.n	80160e4 <etharp_input+0x98>
 80160e0:	2301      	movs	r3, #1
 80160e2:	e000      	b.n	80160e6 <etharp_input+0x9a>
 80160e4:	2302      	movs	r3, #2
 80160e6:	f107 010c 	add.w	r1, r7, #12
 80160ea:	6838      	ldr	r0, [r7, #0]
 80160ec:	f7ff fed8 	bl	8015ea0 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 80160f0:	693b      	ldr	r3, [r7, #16]
 80160f2:	88db      	ldrh	r3, [r3, #6]
 80160f4:	b29b      	uxth	r3, r3
 80160f6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80160fa:	d003      	beq.n	8016104 <etharp_input+0xb8>
 80160fc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8016100:	d01e      	beq.n	8016140 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 8016102:	e020      	b.n	8016146 <etharp_input+0xfa>
      if (for_us) {
 8016104:	7dfb      	ldrb	r3, [r7, #23]
 8016106:	2b00      	cmp	r3, #0
 8016108:	d01c      	beq.n	8016144 <etharp_input+0xf8>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 801610a:	683b      	ldr	r3, [r7, #0]
 801610c:	f103 0026 	add.w	r0, r3, #38	; 0x26
 8016110:	693b      	ldr	r3, [r7, #16]
 8016112:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 8016116:	683b      	ldr	r3, [r7, #0]
 8016118:	f103 0526 	add.w	r5, r3, #38	; 0x26
 801611c:	683b      	ldr	r3, [r7, #0]
 801611e:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 8016120:	693a      	ldr	r2, [r7, #16]
 8016122:	3208      	adds	r2, #8
        etharp_raw(netif,
 8016124:	2102      	movs	r1, #2
 8016126:	9103      	str	r1, [sp, #12]
 8016128:	f107 010c 	add.w	r1, r7, #12
 801612c:	9102      	str	r1, [sp, #8]
 801612e:	9201      	str	r2, [sp, #4]
 8016130:	9300      	str	r3, [sp, #0]
 8016132:	462b      	mov	r3, r5
 8016134:	4622      	mov	r2, r4
 8016136:	4601      	mov	r1, r0
 8016138:	6838      	ldr	r0, [r7, #0]
 801613a:	f000 faeb 	bl	8016714 <etharp_raw>
      break;
 801613e:	e001      	b.n	8016144 <etharp_input+0xf8>
      break;
 8016140:	bf00      	nop
 8016142:	e000      	b.n	8016146 <etharp_input+0xfa>
      break;
 8016144:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 8016146:	6878      	ldr	r0, [r7, #4]
 8016148:	f7f9 fdac 	bl	800fca4 <pbuf_free>
}
 801614c:	3718      	adds	r7, #24
 801614e:	46bd      	mov	sp, r7
 8016150:	bdb0      	pop	{r4, r5, r7, pc}
 8016152:	bf00      	nop
 8016154:	0801d150 	.word	0x0801d150
 8016158:	0801d2a0 	.word	0x0801d2a0
 801615c:	0801d1c8 	.word	0x0801d1c8

08016160 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 8016160:	b580      	push	{r7, lr}
 8016162:	b086      	sub	sp, #24
 8016164:	af02      	add	r7, sp, #8
 8016166:	60f8      	str	r0, [r7, #12]
 8016168:	60b9      	str	r1, [r7, #8]
 801616a:	4613      	mov	r3, r2
 801616c:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 801616e:	79fa      	ldrb	r2, [r7, #7]
 8016170:	4944      	ldr	r1, [pc, #272]	; (8016284 <etharp_output_to_arp_index+0x124>)
 8016172:	4613      	mov	r3, r2
 8016174:	005b      	lsls	r3, r3, #1
 8016176:	4413      	add	r3, r2
 8016178:	00db      	lsls	r3, r3, #3
 801617a:	440b      	add	r3, r1
 801617c:	3314      	adds	r3, #20
 801617e:	781b      	ldrb	r3, [r3, #0]
 8016180:	2b01      	cmp	r3, #1
 8016182:	d806      	bhi.n	8016192 <etharp_output_to_arp_index+0x32>
 8016184:	4b40      	ldr	r3, [pc, #256]	; (8016288 <etharp_output_to_arp_index+0x128>)
 8016186:	f240 22ee 	movw	r2, #750	; 0x2ee
 801618a:	4940      	ldr	r1, [pc, #256]	; (801628c <etharp_output_to_arp_index+0x12c>)
 801618c:	4840      	ldr	r0, [pc, #256]	; (8016290 <etharp_output_to_arp_index+0x130>)
 801618e:	f002 fc49 	bl	8018a24 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 8016192:	79fa      	ldrb	r2, [r7, #7]
 8016194:	493b      	ldr	r1, [pc, #236]	; (8016284 <etharp_output_to_arp_index+0x124>)
 8016196:	4613      	mov	r3, r2
 8016198:	005b      	lsls	r3, r3, #1
 801619a:	4413      	add	r3, r2
 801619c:	00db      	lsls	r3, r3, #3
 801619e:	440b      	add	r3, r1
 80161a0:	3314      	adds	r3, #20
 80161a2:	781b      	ldrb	r3, [r3, #0]
 80161a4:	2b02      	cmp	r3, #2
 80161a6:	d153      	bne.n	8016250 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 80161a8:	79fa      	ldrb	r2, [r7, #7]
 80161aa:	4936      	ldr	r1, [pc, #216]	; (8016284 <etharp_output_to_arp_index+0x124>)
 80161ac:	4613      	mov	r3, r2
 80161ae:	005b      	lsls	r3, r3, #1
 80161b0:	4413      	add	r3, r2
 80161b2:	00db      	lsls	r3, r3, #3
 80161b4:	440b      	add	r3, r1
 80161b6:	3312      	adds	r3, #18
 80161b8:	881b      	ldrh	r3, [r3, #0]
 80161ba:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 80161be:	d919      	bls.n	80161f4 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 80161c0:	79fa      	ldrb	r2, [r7, #7]
 80161c2:	4613      	mov	r3, r2
 80161c4:	005b      	lsls	r3, r3, #1
 80161c6:	4413      	add	r3, r2
 80161c8:	00db      	lsls	r3, r3, #3
 80161ca:	4a2e      	ldr	r2, [pc, #184]	; (8016284 <etharp_output_to_arp_index+0x124>)
 80161cc:	4413      	add	r3, r2
 80161ce:	3304      	adds	r3, #4
 80161d0:	4619      	mov	r1, r3
 80161d2:	68f8      	ldr	r0, [r7, #12]
 80161d4:	f000 fb4c 	bl	8016870 <etharp_request>
 80161d8:	4603      	mov	r3, r0
 80161da:	2b00      	cmp	r3, #0
 80161dc:	d138      	bne.n	8016250 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 80161de:	79fa      	ldrb	r2, [r7, #7]
 80161e0:	4928      	ldr	r1, [pc, #160]	; (8016284 <etharp_output_to_arp_index+0x124>)
 80161e2:	4613      	mov	r3, r2
 80161e4:	005b      	lsls	r3, r3, #1
 80161e6:	4413      	add	r3, r2
 80161e8:	00db      	lsls	r3, r3, #3
 80161ea:	440b      	add	r3, r1
 80161ec:	3314      	adds	r3, #20
 80161ee:	2203      	movs	r2, #3
 80161f0:	701a      	strb	r2, [r3, #0]
 80161f2:	e02d      	b.n	8016250 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 80161f4:	79fa      	ldrb	r2, [r7, #7]
 80161f6:	4923      	ldr	r1, [pc, #140]	; (8016284 <etharp_output_to_arp_index+0x124>)
 80161f8:	4613      	mov	r3, r2
 80161fa:	005b      	lsls	r3, r3, #1
 80161fc:	4413      	add	r3, r2
 80161fe:	00db      	lsls	r3, r3, #3
 8016200:	440b      	add	r3, r1
 8016202:	3312      	adds	r3, #18
 8016204:	881b      	ldrh	r3, [r3, #0]
 8016206:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 801620a:	d321      	bcc.n	8016250 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 801620c:	79fa      	ldrb	r2, [r7, #7]
 801620e:	4613      	mov	r3, r2
 8016210:	005b      	lsls	r3, r3, #1
 8016212:	4413      	add	r3, r2
 8016214:	00db      	lsls	r3, r3, #3
 8016216:	4a1b      	ldr	r2, [pc, #108]	; (8016284 <etharp_output_to_arp_index+0x124>)
 8016218:	4413      	add	r3, r2
 801621a:	1d19      	adds	r1, r3, #4
 801621c:	79fa      	ldrb	r2, [r7, #7]
 801621e:	4613      	mov	r3, r2
 8016220:	005b      	lsls	r3, r3, #1
 8016222:	4413      	add	r3, r2
 8016224:	00db      	lsls	r3, r3, #3
 8016226:	3308      	adds	r3, #8
 8016228:	4a16      	ldr	r2, [pc, #88]	; (8016284 <etharp_output_to_arp_index+0x124>)
 801622a:	4413      	add	r3, r2
 801622c:	3304      	adds	r3, #4
 801622e:	461a      	mov	r2, r3
 8016230:	68f8      	ldr	r0, [r7, #12]
 8016232:	f000 fafb 	bl	801682c <etharp_request_dst>
 8016236:	4603      	mov	r3, r0
 8016238:	2b00      	cmp	r3, #0
 801623a:	d109      	bne.n	8016250 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 801623c:	79fa      	ldrb	r2, [r7, #7]
 801623e:	4911      	ldr	r1, [pc, #68]	; (8016284 <etharp_output_to_arp_index+0x124>)
 8016240:	4613      	mov	r3, r2
 8016242:	005b      	lsls	r3, r3, #1
 8016244:	4413      	add	r3, r2
 8016246:	00db      	lsls	r3, r3, #3
 8016248:	440b      	add	r3, r1
 801624a:	3314      	adds	r3, #20
 801624c:	2203      	movs	r2, #3
 801624e:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 8016250:	68fb      	ldr	r3, [r7, #12]
 8016252:	f103 0126 	add.w	r1, r3, #38	; 0x26
 8016256:	79fa      	ldrb	r2, [r7, #7]
 8016258:	4613      	mov	r3, r2
 801625a:	005b      	lsls	r3, r3, #1
 801625c:	4413      	add	r3, r2
 801625e:	00db      	lsls	r3, r3, #3
 8016260:	3308      	adds	r3, #8
 8016262:	4a08      	ldr	r2, [pc, #32]	; (8016284 <etharp_output_to_arp_index+0x124>)
 8016264:	4413      	add	r3, r2
 8016266:	3304      	adds	r3, #4
 8016268:	f44f 6200 	mov.w	r2, #2048	; 0x800
 801626c:	9200      	str	r2, [sp, #0]
 801626e:	460a      	mov	r2, r1
 8016270:	68b9      	ldr	r1, [r7, #8]
 8016272:	68f8      	ldr	r0, [r7, #12]
 8016274:	f001 fe66 	bl	8017f44 <ethernet_output>
 8016278:	4603      	mov	r3, r0
}
 801627a:	4618      	mov	r0, r3
 801627c:	3710      	adds	r7, #16
 801627e:	46bd      	mov	sp, r7
 8016280:	bd80      	pop	{r7, pc}
 8016282:	bf00      	nop
 8016284:	20008038 	.word	0x20008038
 8016288:	0801d150 	.word	0x0801d150
 801628c:	0801d2c0 	.word	0x0801d2c0
 8016290:	0801d1c8 	.word	0x0801d1c8

08016294 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 8016294:	b580      	push	{r7, lr}
 8016296:	b08a      	sub	sp, #40	; 0x28
 8016298:	af02      	add	r7, sp, #8
 801629a:	60f8      	str	r0, [r7, #12]
 801629c:	60b9      	str	r1, [r7, #8]
 801629e:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 80162a0:	687b      	ldr	r3, [r7, #4]
 80162a2:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 80162a4:	68fb      	ldr	r3, [r7, #12]
 80162a6:	2b00      	cmp	r3, #0
 80162a8:	d106      	bne.n	80162b8 <etharp_output+0x24>
 80162aa:	4b73      	ldr	r3, [pc, #460]	; (8016478 <etharp_output+0x1e4>)
 80162ac:	f240 321e 	movw	r2, #798	; 0x31e
 80162b0:	4972      	ldr	r1, [pc, #456]	; (801647c <etharp_output+0x1e8>)
 80162b2:	4873      	ldr	r0, [pc, #460]	; (8016480 <etharp_output+0x1ec>)
 80162b4:	f002 fbb6 	bl	8018a24 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 80162b8:	68bb      	ldr	r3, [r7, #8]
 80162ba:	2b00      	cmp	r3, #0
 80162bc:	d106      	bne.n	80162cc <etharp_output+0x38>
 80162be:	4b6e      	ldr	r3, [pc, #440]	; (8016478 <etharp_output+0x1e4>)
 80162c0:	f240 321f 	movw	r2, #799	; 0x31f
 80162c4:	496f      	ldr	r1, [pc, #444]	; (8016484 <etharp_output+0x1f0>)
 80162c6:	486e      	ldr	r0, [pc, #440]	; (8016480 <etharp_output+0x1ec>)
 80162c8:	f002 fbac 	bl	8018a24 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 80162cc:	687b      	ldr	r3, [r7, #4]
 80162ce:	2b00      	cmp	r3, #0
 80162d0:	d106      	bne.n	80162e0 <etharp_output+0x4c>
 80162d2:	4b69      	ldr	r3, [pc, #420]	; (8016478 <etharp_output+0x1e4>)
 80162d4:	f44f 7248 	mov.w	r2, #800	; 0x320
 80162d8:	496b      	ldr	r1, [pc, #428]	; (8016488 <etharp_output+0x1f4>)
 80162da:	4869      	ldr	r0, [pc, #420]	; (8016480 <etharp_output+0x1ec>)
 80162dc:	f002 fba2 	bl	8018a24 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 80162e0:	687b      	ldr	r3, [r7, #4]
 80162e2:	681b      	ldr	r3, [r3, #0]
 80162e4:	68f9      	ldr	r1, [r7, #12]
 80162e6:	4618      	mov	r0, r3
 80162e8:	f000 ff1e 	bl	8017128 <ip4_addr_isbroadcast_u32>
 80162ec:	4603      	mov	r3, r0
 80162ee:	2b00      	cmp	r3, #0
 80162f0:	d002      	beq.n	80162f8 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 80162f2:	4b66      	ldr	r3, [pc, #408]	; (801648c <etharp_output+0x1f8>)
 80162f4:	61fb      	str	r3, [r7, #28]
 80162f6:	e0af      	b.n	8016458 <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 80162f8:	687b      	ldr	r3, [r7, #4]
 80162fa:	681b      	ldr	r3, [r3, #0]
 80162fc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8016300:	2be0      	cmp	r3, #224	; 0xe0
 8016302:	d118      	bne.n	8016336 <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 8016304:	2301      	movs	r3, #1
 8016306:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 8016308:	2300      	movs	r3, #0
 801630a:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 801630c:	235e      	movs	r3, #94	; 0x5e
 801630e:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 8016310:	687b      	ldr	r3, [r7, #4]
 8016312:	3301      	adds	r3, #1
 8016314:	781b      	ldrb	r3, [r3, #0]
 8016316:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801631a:	b2db      	uxtb	r3, r3
 801631c:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 801631e:	687b      	ldr	r3, [r7, #4]
 8016320:	3302      	adds	r3, #2
 8016322:	781b      	ldrb	r3, [r3, #0]
 8016324:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 8016326:	687b      	ldr	r3, [r7, #4]
 8016328:	3303      	adds	r3, #3
 801632a:	781b      	ldrb	r3, [r3, #0]
 801632c:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 801632e:	f107 0310 	add.w	r3, r7, #16
 8016332:	61fb      	str	r3, [r7, #28]
 8016334:	e090      	b.n	8016458 <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8016336:	687b      	ldr	r3, [r7, #4]
 8016338:	681a      	ldr	r2, [r3, #0]
 801633a:	68fb      	ldr	r3, [r7, #12]
 801633c:	3304      	adds	r3, #4
 801633e:	681b      	ldr	r3, [r3, #0]
 8016340:	405a      	eors	r2, r3
 8016342:	68fb      	ldr	r3, [r7, #12]
 8016344:	3308      	adds	r3, #8
 8016346:	681b      	ldr	r3, [r3, #0]
 8016348:	4013      	ands	r3, r2
 801634a:	2b00      	cmp	r3, #0
 801634c:	d012      	beq.n	8016374 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 801634e:	687b      	ldr	r3, [r7, #4]
 8016350:	681b      	ldr	r3, [r3, #0]
 8016352:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8016354:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 8016358:	4293      	cmp	r3, r2
 801635a:	d00b      	beq.n	8016374 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 801635c:	68fb      	ldr	r3, [r7, #12]
 801635e:	330c      	adds	r3, #12
 8016360:	681b      	ldr	r3, [r3, #0]
 8016362:	2b00      	cmp	r3, #0
 8016364:	d003      	beq.n	801636e <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 8016366:	68fb      	ldr	r3, [r7, #12]
 8016368:	330c      	adds	r3, #12
 801636a:	61bb      	str	r3, [r7, #24]
 801636c:	e002      	b.n	8016374 <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 801636e:	f06f 0303 	mvn.w	r3, #3
 8016372:	e07d      	b.n	8016470 <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8016374:	4b46      	ldr	r3, [pc, #280]	; (8016490 <etharp_output+0x1fc>)
 8016376:	781b      	ldrb	r3, [r3, #0]
 8016378:	4619      	mov	r1, r3
 801637a:	4a46      	ldr	r2, [pc, #280]	; (8016494 <etharp_output+0x200>)
 801637c:	460b      	mov	r3, r1
 801637e:	005b      	lsls	r3, r3, #1
 8016380:	440b      	add	r3, r1
 8016382:	00db      	lsls	r3, r3, #3
 8016384:	4413      	add	r3, r2
 8016386:	3314      	adds	r3, #20
 8016388:	781b      	ldrb	r3, [r3, #0]
 801638a:	2b01      	cmp	r3, #1
 801638c:	d925      	bls.n	80163da <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 801638e:	4b40      	ldr	r3, [pc, #256]	; (8016490 <etharp_output+0x1fc>)
 8016390:	781b      	ldrb	r3, [r3, #0]
 8016392:	4619      	mov	r1, r3
 8016394:	4a3f      	ldr	r2, [pc, #252]	; (8016494 <etharp_output+0x200>)
 8016396:	460b      	mov	r3, r1
 8016398:	005b      	lsls	r3, r3, #1
 801639a:	440b      	add	r3, r1
 801639c:	00db      	lsls	r3, r3, #3
 801639e:	4413      	add	r3, r2
 80163a0:	3308      	adds	r3, #8
 80163a2:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 80163a4:	68fa      	ldr	r2, [r7, #12]
 80163a6:	429a      	cmp	r2, r3
 80163a8:	d117      	bne.n	80163da <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 80163aa:	69bb      	ldr	r3, [r7, #24]
 80163ac:	681a      	ldr	r2, [r3, #0]
 80163ae:	4b38      	ldr	r3, [pc, #224]	; (8016490 <etharp_output+0x1fc>)
 80163b0:	781b      	ldrb	r3, [r3, #0]
 80163b2:	4618      	mov	r0, r3
 80163b4:	4937      	ldr	r1, [pc, #220]	; (8016494 <etharp_output+0x200>)
 80163b6:	4603      	mov	r3, r0
 80163b8:	005b      	lsls	r3, r3, #1
 80163ba:	4403      	add	r3, r0
 80163bc:	00db      	lsls	r3, r3, #3
 80163be:	440b      	add	r3, r1
 80163c0:	3304      	adds	r3, #4
 80163c2:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 80163c4:	429a      	cmp	r2, r3
 80163c6:	d108      	bne.n	80163da <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 80163c8:	4b31      	ldr	r3, [pc, #196]	; (8016490 <etharp_output+0x1fc>)
 80163ca:	781b      	ldrb	r3, [r3, #0]
 80163cc:	461a      	mov	r2, r3
 80163ce:	68b9      	ldr	r1, [r7, #8]
 80163d0:	68f8      	ldr	r0, [r7, #12]
 80163d2:	f7ff fec5 	bl	8016160 <etharp_output_to_arp_index>
 80163d6:	4603      	mov	r3, r0
 80163d8:	e04a      	b.n	8016470 <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 80163da:	2300      	movs	r3, #0
 80163dc:	75fb      	strb	r3, [r7, #23]
 80163de:	e031      	b.n	8016444 <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 80163e0:	7dfa      	ldrb	r2, [r7, #23]
 80163e2:	492c      	ldr	r1, [pc, #176]	; (8016494 <etharp_output+0x200>)
 80163e4:	4613      	mov	r3, r2
 80163e6:	005b      	lsls	r3, r3, #1
 80163e8:	4413      	add	r3, r2
 80163ea:	00db      	lsls	r3, r3, #3
 80163ec:	440b      	add	r3, r1
 80163ee:	3314      	adds	r3, #20
 80163f0:	781b      	ldrb	r3, [r3, #0]
 80163f2:	2b01      	cmp	r3, #1
 80163f4:	d923      	bls.n	801643e <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 80163f6:	7dfa      	ldrb	r2, [r7, #23]
 80163f8:	4926      	ldr	r1, [pc, #152]	; (8016494 <etharp_output+0x200>)
 80163fa:	4613      	mov	r3, r2
 80163fc:	005b      	lsls	r3, r3, #1
 80163fe:	4413      	add	r3, r2
 8016400:	00db      	lsls	r3, r3, #3
 8016402:	440b      	add	r3, r1
 8016404:	3308      	adds	r3, #8
 8016406:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8016408:	68fa      	ldr	r2, [r7, #12]
 801640a:	429a      	cmp	r2, r3
 801640c:	d117      	bne.n	801643e <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 801640e:	69bb      	ldr	r3, [r7, #24]
 8016410:	6819      	ldr	r1, [r3, #0]
 8016412:	7dfa      	ldrb	r2, [r7, #23]
 8016414:	481f      	ldr	r0, [pc, #124]	; (8016494 <etharp_output+0x200>)
 8016416:	4613      	mov	r3, r2
 8016418:	005b      	lsls	r3, r3, #1
 801641a:	4413      	add	r3, r2
 801641c:	00db      	lsls	r3, r3, #3
 801641e:	4403      	add	r3, r0
 8016420:	3304      	adds	r3, #4
 8016422:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 8016424:	4299      	cmp	r1, r3
 8016426:	d10a      	bne.n	801643e <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 8016428:	4a19      	ldr	r2, [pc, #100]	; (8016490 <etharp_output+0x1fc>)
 801642a:	7dfb      	ldrb	r3, [r7, #23]
 801642c:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 801642e:	7dfb      	ldrb	r3, [r7, #23]
 8016430:	461a      	mov	r2, r3
 8016432:	68b9      	ldr	r1, [r7, #8]
 8016434:	68f8      	ldr	r0, [r7, #12]
 8016436:	f7ff fe93 	bl	8016160 <etharp_output_to_arp_index>
 801643a:	4603      	mov	r3, r0
 801643c:	e018      	b.n	8016470 <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 801643e:	7dfb      	ldrb	r3, [r7, #23]
 8016440:	3301      	adds	r3, #1
 8016442:	75fb      	strb	r3, [r7, #23]
 8016444:	7dfb      	ldrb	r3, [r7, #23]
 8016446:	2b09      	cmp	r3, #9
 8016448:	d9ca      	bls.n	80163e0 <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 801644a:	68ba      	ldr	r2, [r7, #8]
 801644c:	69b9      	ldr	r1, [r7, #24]
 801644e:	68f8      	ldr	r0, [r7, #12]
 8016450:	f000 f822 	bl	8016498 <etharp_query>
 8016454:	4603      	mov	r3, r0
 8016456:	e00b      	b.n	8016470 <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 8016458:	68fb      	ldr	r3, [r7, #12]
 801645a:	f103 0226 	add.w	r2, r3, #38	; 0x26
 801645e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8016462:	9300      	str	r3, [sp, #0]
 8016464:	69fb      	ldr	r3, [r7, #28]
 8016466:	68b9      	ldr	r1, [r7, #8]
 8016468:	68f8      	ldr	r0, [r7, #12]
 801646a:	f001 fd6b 	bl	8017f44 <ethernet_output>
 801646e:	4603      	mov	r3, r0
}
 8016470:	4618      	mov	r0, r3
 8016472:	3720      	adds	r7, #32
 8016474:	46bd      	mov	sp, r7
 8016476:	bd80      	pop	{r7, pc}
 8016478:	0801d150 	.word	0x0801d150
 801647c:	0801d2a0 	.word	0x0801d2a0
 8016480:	0801d1c8 	.word	0x0801d1c8
 8016484:	0801d2f0 	.word	0x0801d2f0
 8016488:	0801d290 	.word	0x0801d290
 801648c:	0801d954 	.word	0x0801d954
 8016490:	20008128 	.word	0x20008128
 8016494:	20008038 	.word	0x20008038

08016498 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 8016498:	b580      	push	{r7, lr}
 801649a:	b08c      	sub	sp, #48	; 0x30
 801649c:	af02      	add	r7, sp, #8
 801649e:	60f8      	str	r0, [r7, #12]
 80164a0:	60b9      	str	r1, [r7, #8]
 80164a2:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 80164a4:	68fb      	ldr	r3, [r7, #12]
 80164a6:	3326      	adds	r3, #38	; 0x26
 80164a8:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 80164aa:	23ff      	movs	r3, #255	; 0xff
 80164ac:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 80164b0:	2300      	movs	r3, #0
 80164b2:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 80164b4:	68bb      	ldr	r3, [r7, #8]
 80164b6:	681b      	ldr	r3, [r3, #0]
 80164b8:	68f9      	ldr	r1, [r7, #12]
 80164ba:	4618      	mov	r0, r3
 80164bc:	f000 fe34 	bl	8017128 <ip4_addr_isbroadcast_u32>
 80164c0:	4603      	mov	r3, r0
 80164c2:	2b00      	cmp	r3, #0
 80164c4:	d10c      	bne.n	80164e0 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 80164c6:	68bb      	ldr	r3, [r7, #8]
 80164c8:	681b      	ldr	r3, [r3, #0]
 80164ca:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 80164ce:	2be0      	cmp	r3, #224	; 0xe0
 80164d0:	d006      	beq.n	80164e0 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 80164d2:	68bb      	ldr	r3, [r7, #8]
 80164d4:	2b00      	cmp	r3, #0
 80164d6:	d003      	beq.n	80164e0 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 80164d8:	68bb      	ldr	r3, [r7, #8]
 80164da:	681b      	ldr	r3, [r3, #0]
 80164dc:	2b00      	cmp	r3, #0
 80164de:	d102      	bne.n	80164e6 <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 80164e0:	f06f 030f 	mvn.w	r3, #15
 80164e4:	e101      	b.n	80166ea <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 80164e6:	68fa      	ldr	r2, [r7, #12]
 80164e8:	2101      	movs	r1, #1
 80164ea:	68b8      	ldr	r0, [r7, #8]
 80164ec:	f7ff fb60 	bl	8015bb0 <etharp_find_entry>
 80164f0:	4603      	mov	r3, r0
 80164f2:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 80164f4:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80164f8:	2b00      	cmp	r3, #0
 80164fa:	da02      	bge.n	8016502 <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 80164fc:	8a7b      	ldrh	r3, [r7, #18]
 80164fe:	b25b      	sxtb	r3, r3
 8016500:	e0f3      	b.n	80166ea <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 8016502:	8a7b      	ldrh	r3, [r7, #18]
 8016504:	2b7e      	cmp	r3, #126	; 0x7e
 8016506:	d906      	bls.n	8016516 <etharp_query+0x7e>
 8016508:	4b7a      	ldr	r3, [pc, #488]	; (80166f4 <etharp_query+0x25c>)
 801650a:	f240 32c1 	movw	r2, #961	; 0x3c1
 801650e:	497a      	ldr	r1, [pc, #488]	; (80166f8 <etharp_query+0x260>)
 8016510:	487a      	ldr	r0, [pc, #488]	; (80166fc <etharp_query+0x264>)
 8016512:	f002 fa87 	bl	8018a24 <iprintf>
  i = (netif_addr_idx_t)i_err;
 8016516:	8a7b      	ldrh	r3, [r7, #18]
 8016518:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 801651a:	7c7a      	ldrb	r2, [r7, #17]
 801651c:	4978      	ldr	r1, [pc, #480]	; (8016700 <etharp_query+0x268>)
 801651e:	4613      	mov	r3, r2
 8016520:	005b      	lsls	r3, r3, #1
 8016522:	4413      	add	r3, r2
 8016524:	00db      	lsls	r3, r3, #3
 8016526:	440b      	add	r3, r1
 8016528:	3314      	adds	r3, #20
 801652a:	781b      	ldrb	r3, [r3, #0]
 801652c:	2b00      	cmp	r3, #0
 801652e:	d115      	bne.n	801655c <etharp_query+0xc4>
    is_new_entry = 1;
 8016530:	2301      	movs	r3, #1
 8016532:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 8016534:	7c7a      	ldrb	r2, [r7, #17]
 8016536:	4972      	ldr	r1, [pc, #456]	; (8016700 <etharp_query+0x268>)
 8016538:	4613      	mov	r3, r2
 801653a:	005b      	lsls	r3, r3, #1
 801653c:	4413      	add	r3, r2
 801653e:	00db      	lsls	r3, r3, #3
 8016540:	440b      	add	r3, r1
 8016542:	3314      	adds	r3, #20
 8016544:	2201      	movs	r2, #1
 8016546:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 8016548:	7c7a      	ldrb	r2, [r7, #17]
 801654a:	496d      	ldr	r1, [pc, #436]	; (8016700 <etharp_query+0x268>)
 801654c:	4613      	mov	r3, r2
 801654e:	005b      	lsls	r3, r3, #1
 8016550:	4413      	add	r3, r2
 8016552:	00db      	lsls	r3, r3, #3
 8016554:	440b      	add	r3, r1
 8016556:	3308      	adds	r3, #8
 8016558:	68fa      	ldr	r2, [r7, #12]
 801655a:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 801655c:	7c7a      	ldrb	r2, [r7, #17]
 801655e:	4968      	ldr	r1, [pc, #416]	; (8016700 <etharp_query+0x268>)
 8016560:	4613      	mov	r3, r2
 8016562:	005b      	lsls	r3, r3, #1
 8016564:	4413      	add	r3, r2
 8016566:	00db      	lsls	r3, r3, #3
 8016568:	440b      	add	r3, r1
 801656a:	3314      	adds	r3, #20
 801656c:	781b      	ldrb	r3, [r3, #0]
 801656e:	2b01      	cmp	r3, #1
 8016570:	d011      	beq.n	8016596 <etharp_query+0xfe>
 8016572:	7c7a      	ldrb	r2, [r7, #17]
 8016574:	4962      	ldr	r1, [pc, #392]	; (8016700 <etharp_query+0x268>)
 8016576:	4613      	mov	r3, r2
 8016578:	005b      	lsls	r3, r3, #1
 801657a:	4413      	add	r3, r2
 801657c:	00db      	lsls	r3, r3, #3
 801657e:	440b      	add	r3, r1
 8016580:	3314      	adds	r3, #20
 8016582:	781b      	ldrb	r3, [r3, #0]
 8016584:	2b01      	cmp	r3, #1
 8016586:	d806      	bhi.n	8016596 <etharp_query+0xfe>
 8016588:	4b5a      	ldr	r3, [pc, #360]	; (80166f4 <etharp_query+0x25c>)
 801658a:	f240 32cd 	movw	r2, #973	; 0x3cd
 801658e:	495d      	ldr	r1, [pc, #372]	; (8016704 <etharp_query+0x26c>)
 8016590:	485a      	ldr	r0, [pc, #360]	; (80166fc <etharp_query+0x264>)
 8016592:	f002 fa47 	bl	8018a24 <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 8016596:	6a3b      	ldr	r3, [r7, #32]
 8016598:	2b00      	cmp	r3, #0
 801659a:	d102      	bne.n	80165a2 <etharp_query+0x10a>
 801659c:	687b      	ldr	r3, [r7, #4]
 801659e:	2b00      	cmp	r3, #0
 80165a0:	d10c      	bne.n	80165bc <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 80165a2:	68b9      	ldr	r1, [r7, #8]
 80165a4:	68f8      	ldr	r0, [r7, #12]
 80165a6:	f000 f963 	bl	8016870 <etharp_request>
 80165aa:	4603      	mov	r3, r0
 80165ac:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 80165b0:	687b      	ldr	r3, [r7, #4]
 80165b2:	2b00      	cmp	r3, #0
 80165b4:	d102      	bne.n	80165bc <etharp_query+0x124>
      return result;
 80165b6:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80165ba:	e096      	b.n	80166ea <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 80165bc:	687b      	ldr	r3, [r7, #4]
 80165be:	2b00      	cmp	r3, #0
 80165c0:	d106      	bne.n	80165d0 <etharp_query+0x138>
 80165c2:	4b4c      	ldr	r3, [pc, #304]	; (80166f4 <etharp_query+0x25c>)
 80165c4:	f240 32e1 	movw	r2, #993	; 0x3e1
 80165c8:	494f      	ldr	r1, [pc, #316]	; (8016708 <etharp_query+0x270>)
 80165ca:	484c      	ldr	r0, [pc, #304]	; (80166fc <etharp_query+0x264>)
 80165cc:	f002 fa2a 	bl	8018a24 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 80165d0:	7c7a      	ldrb	r2, [r7, #17]
 80165d2:	494b      	ldr	r1, [pc, #300]	; (8016700 <etharp_query+0x268>)
 80165d4:	4613      	mov	r3, r2
 80165d6:	005b      	lsls	r3, r3, #1
 80165d8:	4413      	add	r3, r2
 80165da:	00db      	lsls	r3, r3, #3
 80165dc:	440b      	add	r3, r1
 80165de:	3314      	adds	r3, #20
 80165e0:	781b      	ldrb	r3, [r3, #0]
 80165e2:	2b01      	cmp	r3, #1
 80165e4:	d917      	bls.n	8016616 <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 80165e6:	4a49      	ldr	r2, [pc, #292]	; (801670c <etharp_query+0x274>)
 80165e8:	7c7b      	ldrb	r3, [r7, #17]
 80165ea:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 80165ec:	7c7a      	ldrb	r2, [r7, #17]
 80165ee:	4613      	mov	r3, r2
 80165f0:	005b      	lsls	r3, r3, #1
 80165f2:	4413      	add	r3, r2
 80165f4:	00db      	lsls	r3, r3, #3
 80165f6:	3308      	adds	r3, #8
 80165f8:	4a41      	ldr	r2, [pc, #260]	; (8016700 <etharp_query+0x268>)
 80165fa:	4413      	add	r3, r2
 80165fc:	3304      	adds	r3, #4
 80165fe:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8016602:	9200      	str	r2, [sp, #0]
 8016604:	697a      	ldr	r2, [r7, #20]
 8016606:	6879      	ldr	r1, [r7, #4]
 8016608:	68f8      	ldr	r0, [r7, #12]
 801660a:	f001 fc9b 	bl	8017f44 <ethernet_output>
 801660e:	4603      	mov	r3, r0
 8016610:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8016614:	e067      	b.n	80166e6 <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8016616:	7c7a      	ldrb	r2, [r7, #17]
 8016618:	4939      	ldr	r1, [pc, #228]	; (8016700 <etharp_query+0x268>)
 801661a:	4613      	mov	r3, r2
 801661c:	005b      	lsls	r3, r3, #1
 801661e:	4413      	add	r3, r2
 8016620:	00db      	lsls	r3, r3, #3
 8016622:	440b      	add	r3, r1
 8016624:	3314      	adds	r3, #20
 8016626:	781b      	ldrb	r3, [r3, #0]
 8016628:	2b01      	cmp	r3, #1
 801662a:	d15c      	bne.n	80166e6 <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 801662c:	2300      	movs	r3, #0
 801662e:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 8016630:	687b      	ldr	r3, [r7, #4]
 8016632:	61fb      	str	r3, [r7, #28]
    while (p) {
 8016634:	e01c      	b.n	8016670 <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 8016636:	69fb      	ldr	r3, [r7, #28]
 8016638:	895a      	ldrh	r2, [r3, #10]
 801663a:	69fb      	ldr	r3, [r7, #28]
 801663c:	891b      	ldrh	r3, [r3, #8]
 801663e:	429a      	cmp	r2, r3
 8016640:	d10a      	bne.n	8016658 <etharp_query+0x1c0>
 8016642:	69fb      	ldr	r3, [r7, #28]
 8016644:	681b      	ldr	r3, [r3, #0]
 8016646:	2b00      	cmp	r3, #0
 8016648:	d006      	beq.n	8016658 <etharp_query+0x1c0>
 801664a:	4b2a      	ldr	r3, [pc, #168]	; (80166f4 <etharp_query+0x25c>)
 801664c:	f240 32f1 	movw	r2, #1009	; 0x3f1
 8016650:	492f      	ldr	r1, [pc, #188]	; (8016710 <etharp_query+0x278>)
 8016652:	482a      	ldr	r0, [pc, #168]	; (80166fc <etharp_query+0x264>)
 8016654:	f002 f9e6 	bl	8018a24 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 8016658:	69fb      	ldr	r3, [r7, #28]
 801665a:	7b1b      	ldrb	r3, [r3, #12]
 801665c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8016660:	2b00      	cmp	r3, #0
 8016662:	d002      	beq.n	801666a <etharp_query+0x1d2>
        copy_needed = 1;
 8016664:	2301      	movs	r3, #1
 8016666:	61bb      	str	r3, [r7, #24]
        break;
 8016668:	e005      	b.n	8016676 <etharp_query+0x1de>
      }
      p = p->next;
 801666a:	69fb      	ldr	r3, [r7, #28]
 801666c:	681b      	ldr	r3, [r3, #0]
 801666e:	61fb      	str	r3, [r7, #28]
    while (p) {
 8016670:	69fb      	ldr	r3, [r7, #28]
 8016672:	2b00      	cmp	r3, #0
 8016674:	d1df      	bne.n	8016636 <etharp_query+0x19e>
    }
    if (copy_needed) {
 8016676:	69bb      	ldr	r3, [r7, #24]
 8016678:	2b00      	cmp	r3, #0
 801667a:	d007      	beq.n	801668c <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 801667c:	687a      	ldr	r2, [r7, #4]
 801667e:	f44f 7120 	mov.w	r1, #640	; 0x280
 8016682:	200e      	movs	r0, #14
 8016684:	f7f9 fd6a 	bl	801015c <pbuf_clone>
 8016688:	61f8      	str	r0, [r7, #28]
 801668a:	e004      	b.n	8016696 <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 801668c:	687b      	ldr	r3, [r7, #4]
 801668e:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 8016690:	69f8      	ldr	r0, [r7, #28]
 8016692:	f7f9 fba7 	bl	800fde4 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 8016696:	69fb      	ldr	r3, [r7, #28]
 8016698:	2b00      	cmp	r3, #0
 801669a:	d021      	beq.n	80166e0 <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 801669c:	7c7a      	ldrb	r2, [r7, #17]
 801669e:	4918      	ldr	r1, [pc, #96]	; (8016700 <etharp_query+0x268>)
 80166a0:	4613      	mov	r3, r2
 80166a2:	005b      	lsls	r3, r3, #1
 80166a4:	4413      	add	r3, r2
 80166a6:	00db      	lsls	r3, r3, #3
 80166a8:	440b      	add	r3, r1
 80166aa:	681b      	ldr	r3, [r3, #0]
 80166ac:	2b00      	cmp	r3, #0
 80166ae:	d00a      	beq.n	80166c6 <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 80166b0:	7c7a      	ldrb	r2, [r7, #17]
 80166b2:	4913      	ldr	r1, [pc, #76]	; (8016700 <etharp_query+0x268>)
 80166b4:	4613      	mov	r3, r2
 80166b6:	005b      	lsls	r3, r3, #1
 80166b8:	4413      	add	r3, r2
 80166ba:	00db      	lsls	r3, r3, #3
 80166bc:	440b      	add	r3, r1
 80166be:	681b      	ldr	r3, [r3, #0]
 80166c0:	4618      	mov	r0, r3
 80166c2:	f7f9 faef 	bl	800fca4 <pbuf_free>
      }
      arp_table[i].q = p;
 80166c6:	7c7a      	ldrb	r2, [r7, #17]
 80166c8:	490d      	ldr	r1, [pc, #52]	; (8016700 <etharp_query+0x268>)
 80166ca:	4613      	mov	r3, r2
 80166cc:	005b      	lsls	r3, r3, #1
 80166ce:	4413      	add	r3, r2
 80166d0:	00db      	lsls	r3, r3, #3
 80166d2:	440b      	add	r3, r1
 80166d4:	69fa      	ldr	r2, [r7, #28]
 80166d6:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 80166d8:	2300      	movs	r3, #0
 80166da:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80166de:	e002      	b.n	80166e6 <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 80166e0:	23ff      	movs	r3, #255	; 0xff
 80166e2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 80166e6:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 80166ea:	4618      	mov	r0, r3
 80166ec:	3728      	adds	r7, #40	; 0x28
 80166ee:	46bd      	mov	sp, r7
 80166f0:	bd80      	pop	{r7, pc}
 80166f2:	bf00      	nop
 80166f4:	0801d150 	.word	0x0801d150
 80166f8:	0801d2fc 	.word	0x0801d2fc
 80166fc:	0801d1c8 	.word	0x0801d1c8
 8016700:	20008038 	.word	0x20008038
 8016704:	0801d30c 	.word	0x0801d30c
 8016708:	0801d2f0 	.word	0x0801d2f0
 801670c:	20008128 	.word	0x20008128
 8016710:	0801d334 	.word	0x0801d334

08016714 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 8016714:	b580      	push	{r7, lr}
 8016716:	b08a      	sub	sp, #40	; 0x28
 8016718:	af02      	add	r7, sp, #8
 801671a:	60f8      	str	r0, [r7, #12]
 801671c:	60b9      	str	r1, [r7, #8]
 801671e:	607a      	str	r2, [r7, #4]
 8016720:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 8016722:	2300      	movs	r3, #0
 8016724:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 8016726:	68fb      	ldr	r3, [r7, #12]
 8016728:	2b00      	cmp	r3, #0
 801672a:	d106      	bne.n	801673a <etharp_raw+0x26>
 801672c:	4b3a      	ldr	r3, [pc, #232]	; (8016818 <etharp_raw+0x104>)
 801672e:	f240 4257 	movw	r2, #1111	; 0x457
 8016732:	493a      	ldr	r1, [pc, #232]	; (801681c <etharp_raw+0x108>)
 8016734:	483a      	ldr	r0, [pc, #232]	; (8016820 <etharp_raw+0x10c>)
 8016736:	f002 f975 	bl	8018a24 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 801673a:	f44f 7220 	mov.w	r2, #640	; 0x280
 801673e:	211c      	movs	r1, #28
 8016740:	200e      	movs	r0, #14
 8016742:	f7f8 ffcb 	bl	800f6dc <pbuf_alloc>
 8016746:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 8016748:	69bb      	ldr	r3, [r7, #24]
 801674a:	2b00      	cmp	r3, #0
 801674c:	d102      	bne.n	8016754 <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 801674e:	f04f 33ff 	mov.w	r3, #4294967295
 8016752:	e05d      	b.n	8016810 <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 8016754:	69bb      	ldr	r3, [r7, #24]
 8016756:	895b      	ldrh	r3, [r3, #10]
 8016758:	2b1b      	cmp	r3, #27
 801675a:	d806      	bhi.n	801676a <etharp_raw+0x56>
 801675c:	4b2e      	ldr	r3, [pc, #184]	; (8016818 <etharp_raw+0x104>)
 801675e:	f240 4262 	movw	r2, #1122	; 0x462
 8016762:	4930      	ldr	r1, [pc, #192]	; (8016824 <etharp_raw+0x110>)
 8016764:	482e      	ldr	r0, [pc, #184]	; (8016820 <etharp_raw+0x10c>)
 8016766:	f002 f95d 	bl	8018a24 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 801676a:	69bb      	ldr	r3, [r7, #24]
 801676c:	685b      	ldr	r3, [r3, #4]
 801676e:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 8016770:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8016772:	4618      	mov	r0, r3
 8016774:	f7f7 fea0 	bl	800e4b8 <lwip_htons>
 8016778:	4603      	mov	r3, r0
 801677a:	461a      	mov	r2, r3
 801677c:	697b      	ldr	r3, [r7, #20]
 801677e:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 8016780:	68fb      	ldr	r3, [r7, #12]
 8016782:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8016786:	2b06      	cmp	r3, #6
 8016788:	d006      	beq.n	8016798 <etharp_raw+0x84>
 801678a:	4b23      	ldr	r3, [pc, #140]	; (8016818 <etharp_raw+0x104>)
 801678c:	f240 4269 	movw	r2, #1129	; 0x469
 8016790:	4925      	ldr	r1, [pc, #148]	; (8016828 <etharp_raw+0x114>)
 8016792:	4823      	ldr	r0, [pc, #140]	; (8016820 <etharp_raw+0x10c>)
 8016794:	f002 f946 	bl	8018a24 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 8016798:	697b      	ldr	r3, [r7, #20]
 801679a:	3308      	adds	r3, #8
 801679c:	2206      	movs	r2, #6
 801679e:	6839      	ldr	r1, [r7, #0]
 80167a0:	4618      	mov	r0, r3
 80167a2:	f002 fb0d 	bl	8018dc0 <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 80167a6:	697b      	ldr	r3, [r7, #20]
 80167a8:	3312      	adds	r3, #18
 80167aa:	2206      	movs	r2, #6
 80167ac:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80167ae:	4618      	mov	r0, r3
 80167b0:	f002 fb06 	bl	8018dc0 <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 80167b4:	697b      	ldr	r3, [r7, #20]
 80167b6:	330e      	adds	r3, #14
 80167b8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80167ba:	6812      	ldr	r2, [r2, #0]
 80167bc:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 80167be:	697b      	ldr	r3, [r7, #20]
 80167c0:	3318      	adds	r3, #24
 80167c2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80167c4:	6812      	ldr	r2, [r2, #0]
 80167c6:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 80167c8:	697b      	ldr	r3, [r7, #20]
 80167ca:	2200      	movs	r2, #0
 80167cc:	701a      	strb	r2, [r3, #0]
 80167ce:	2200      	movs	r2, #0
 80167d0:	f042 0201 	orr.w	r2, r2, #1
 80167d4:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 80167d6:	697b      	ldr	r3, [r7, #20]
 80167d8:	2200      	movs	r2, #0
 80167da:	f042 0208 	orr.w	r2, r2, #8
 80167de:	709a      	strb	r2, [r3, #2]
 80167e0:	2200      	movs	r2, #0
 80167e2:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 80167e4:	697b      	ldr	r3, [r7, #20]
 80167e6:	2206      	movs	r2, #6
 80167e8:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 80167ea:	697b      	ldr	r3, [r7, #20]
 80167ec:	2204      	movs	r2, #4
 80167ee:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 80167f0:	f640 0306 	movw	r3, #2054	; 0x806
 80167f4:	9300      	str	r3, [sp, #0]
 80167f6:	687b      	ldr	r3, [r7, #4]
 80167f8:	68ba      	ldr	r2, [r7, #8]
 80167fa:	69b9      	ldr	r1, [r7, #24]
 80167fc:	68f8      	ldr	r0, [r7, #12]
 80167fe:	f001 fba1 	bl	8017f44 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 8016802:	69b8      	ldr	r0, [r7, #24]
 8016804:	f7f9 fa4e 	bl	800fca4 <pbuf_free>
  p = NULL;
 8016808:	2300      	movs	r3, #0
 801680a:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 801680c:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8016810:	4618      	mov	r0, r3
 8016812:	3720      	adds	r7, #32
 8016814:	46bd      	mov	sp, r7
 8016816:	bd80      	pop	{r7, pc}
 8016818:	0801d150 	.word	0x0801d150
 801681c:	0801d2a0 	.word	0x0801d2a0
 8016820:	0801d1c8 	.word	0x0801d1c8
 8016824:	0801d350 	.word	0x0801d350
 8016828:	0801d384 	.word	0x0801d384

0801682c <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 801682c:	b580      	push	{r7, lr}
 801682e:	b088      	sub	sp, #32
 8016830:	af04      	add	r7, sp, #16
 8016832:	60f8      	str	r0, [r7, #12]
 8016834:	60b9      	str	r1, [r7, #8]
 8016836:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8016838:	68fb      	ldr	r3, [r7, #12]
 801683a:	f103 0126 	add.w	r1, r3, #38	; 0x26
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 801683e:	68fb      	ldr	r3, [r7, #12]
 8016840:	f103 0026 	add.w	r0, r3, #38	; 0x26
 8016844:	68fb      	ldr	r3, [r7, #12]
 8016846:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8016848:	2201      	movs	r2, #1
 801684a:	9203      	str	r2, [sp, #12]
 801684c:	68ba      	ldr	r2, [r7, #8]
 801684e:	9202      	str	r2, [sp, #8]
 8016850:	4a06      	ldr	r2, [pc, #24]	; (801686c <etharp_request_dst+0x40>)
 8016852:	9201      	str	r2, [sp, #4]
 8016854:	9300      	str	r3, [sp, #0]
 8016856:	4603      	mov	r3, r0
 8016858:	687a      	ldr	r2, [r7, #4]
 801685a:	68f8      	ldr	r0, [r7, #12]
 801685c:	f7ff ff5a 	bl	8016714 <etharp_raw>
 8016860:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 8016862:	4618      	mov	r0, r3
 8016864:	3710      	adds	r7, #16
 8016866:	46bd      	mov	sp, r7
 8016868:	bd80      	pop	{r7, pc}
 801686a:	bf00      	nop
 801686c:	0801d95c 	.word	0x0801d95c

08016870 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 8016870:	b580      	push	{r7, lr}
 8016872:	b082      	sub	sp, #8
 8016874:	af00      	add	r7, sp, #0
 8016876:	6078      	str	r0, [r7, #4]
 8016878:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 801687a:	4a05      	ldr	r2, [pc, #20]	; (8016890 <etharp_request+0x20>)
 801687c:	6839      	ldr	r1, [r7, #0]
 801687e:	6878      	ldr	r0, [r7, #4]
 8016880:	f7ff ffd4 	bl	801682c <etharp_request_dst>
 8016884:	4603      	mov	r3, r0
}
 8016886:	4618      	mov	r0, r3
 8016888:	3708      	adds	r7, #8
 801688a:	46bd      	mov	sp, r7
 801688c:	bd80      	pop	{r7, pc}
 801688e:	bf00      	nop
 8016890:	0801d954 	.word	0x0801d954

08016894 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 8016894:	b580      	push	{r7, lr}
 8016896:	b08e      	sub	sp, #56	; 0x38
 8016898:	af04      	add	r7, sp, #16
 801689a:	6078      	str	r0, [r7, #4]
 801689c:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 801689e:	4b87      	ldr	r3, [pc, #540]	; (8016abc <icmp_input+0x228>)
 80168a0:	689b      	ldr	r3, [r3, #8]
 80168a2:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 80168a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80168a6:	781b      	ldrb	r3, [r3, #0]
 80168a8:	f003 030f 	and.w	r3, r3, #15
 80168ac:	b2db      	uxtb	r3, r3
 80168ae:	009b      	lsls	r3, r3, #2
 80168b0:	b2db      	uxtb	r3, r3
 80168b2:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 80168b4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80168b6:	2b13      	cmp	r3, #19
 80168b8:	f240 80e8 	bls.w	8016a8c <icmp_input+0x1f8>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 80168bc:	687b      	ldr	r3, [r7, #4]
 80168be:	895b      	ldrh	r3, [r3, #10]
 80168c0:	2b03      	cmp	r3, #3
 80168c2:	f240 80e5 	bls.w	8016a90 <icmp_input+0x1fc>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 80168c6:	687b      	ldr	r3, [r7, #4]
 80168c8:	685b      	ldr	r3, [r3, #4]
 80168ca:	781b      	ldrb	r3, [r3, #0]
 80168cc:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 80168d0:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 80168d4:	2b00      	cmp	r3, #0
 80168d6:	f000 80d2 	beq.w	8016a7e <icmp_input+0x1ea>
 80168da:	2b08      	cmp	r3, #8
 80168dc:	f040 80d2 	bne.w	8016a84 <icmp_input+0x1f0>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 80168e0:	4b77      	ldr	r3, [pc, #476]	; (8016ac0 <icmp_input+0x22c>)
 80168e2:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 80168e4:	4b75      	ldr	r3, [pc, #468]	; (8016abc <icmp_input+0x228>)
 80168e6:	695b      	ldr	r3, [r3, #20]
 80168e8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80168ec:	2be0      	cmp	r3, #224	; 0xe0
 80168ee:	f000 80d6 	beq.w	8016a9e <icmp_input+0x20a>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 80168f2:	4b72      	ldr	r3, [pc, #456]	; (8016abc <icmp_input+0x228>)
 80168f4:	695b      	ldr	r3, [r3, #20]
 80168f6:	4a71      	ldr	r2, [pc, #452]	; (8016abc <icmp_input+0x228>)
 80168f8:	6812      	ldr	r2, [r2, #0]
 80168fa:	4611      	mov	r1, r2
 80168fc:	4618      	mov	r0, r3
 80168fe:	f000 fc13 	bl	8017128 <ip4_addr_isbroadcast_u32>
 8016902:	4603      	mov	r3, r0
 8016904:	2b00      	cmp	r3, #0
 8016906:	f040 80cc 	bne.w	8016aa2 <icmp_input+0x20e>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 801690a:	687b      	ldr	r3, [r7, #4]
 801690c:	891b      	ldrh	r3, [r3, #8]
 801690e:	2b07      	cmp	r3, #7
 8016910:	f240 80c0 	bls.w	8016a94 <icmp_input+0x200>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: bad ICMP echo received\n"));
        goto lenerr;
      }
#if CHECKSUM_CHECK_ICMP
      IF__NETIF_CHECKSUM_ENABLED(inp, NETIF_CHECKSUM_CHECK_ICMP) {
        if (inet_chksum_pbuf(p) != 0) {
 8016914:	6878      	ldr	r0, [r7, #4]
 8016916:	f7f7 fe6c 	bl	800e5f2 <inet_chksum_pbuf>
 801691a:	4603      	mov	r3, r0
 801691c:	2b00      	cmp	r3, #0
 801691e:	d003      	beq.n	8016928 <icmp_input+0x94>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: checksum failed for received ICMP echo\n"));
          pbuf_free(p);
 8016920:	6878      	ldr	r0, [r7, #4]
 8016922:	f7f9 f9bf 	bl	800fca4 <pbuf_free>
          ICMP_STATS_INC(icmp.chkerr);
          MIB2_STATS_INC(mib2.icmpinerrors);
          return;
 8016926:	e0c5      	b.n	8016ab4 <icmp_input+0x220>
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8016928:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801692a:	330e      	adds	r3, #14
 801692c:	4619      	mov	r1, r3
 801692e:	6878      	ldr	r0, [r7, #4]
 8016930:	f7f9 f922 	bl	800fb78 <pbuf_add_header>
 8016934:	4603      	mov	r3, r0
 8016936:	2b00      	cmp	r3, #0
 8016938:	d04b      	beq.n	80169d2 <icmp_input+0x13e>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 801693a:	687b      	ldr	r3, [r7, #4]
 801693c:	891a      	ldrh	r2, [r3, #8]
 801693e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8016940:	4413      	add	r3, r2
 8016942:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 8016944:	687b      	ldr	r3, [r7, #4]
 8016946:	891b      	ldrh	r3, [r3, #8]
 8016948:	8b7a      	ldrh	r2, [r7, #26]
 801694a:	429a      	cmp	r2, r3
 801694c:	f0c0 80ab 	bcc.w	8016aa6 <icmp_input+0x212>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 8016950:	8b7b      	ldrh	r3, [r7, #26]
 8016952:	f44f 7220 	mov.w	r2, #640	; 0x280
 8016956:	4619      	mov	r1, r3
 8016958:	200e      	movs	r0, #14
 801695a:	f7f8 febf 	bl	800f6dc <pbuf_alloc>
 801695e:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 8016960:	697b      	ldr	r3, [r7, #20]
 8016962:	2b00      	cmp	r3, #0
 8016964:	f000 80a1 	beq.w	8016aaa <icmp_input+0x216>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 8016968:	697b      	ldr	r3, [r7, #20]
 801696a:	895b      	ldrh	r3, [r3, #10]
 801696c:	461a      	mov	r2, r3
 801696e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8016970:	3308      	adds	r3, #8
 8016972:	429a      	cmp	r2, r3
 8016974:	d203      	bcs.n	801697e <icmp_input+0xea>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 8016976:	6978      	ldr	r0, [r7, #20]
 8016978:	f7f9 f994 	bl	800fca4 <pbuf_free>
          goto icmperr;
 801697c:	e096      	b.n	8016aac <icmp_input+0x218>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 801697e:	697b      	ldr	r3, [r7, #20]
 8016980:	685b      	ldr	r3, [r3, #4]
 8016982:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8016984:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8016986:	4618      	mov	r0, r3
 8016988:	f002 fa1a 	bl	8018dc0 <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 801698c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801698e:	4619      	mov	r1, r3
 8016990:	6978      	ldr	r0, [r7, #20]
 8016992:	f7f9 f901 	bl	800fb98 <pbuf_remove_header>
 8016996:	4603      	mov	r3, r0
 8016998:	2b00      	cmp	r3, #0
 801699a:	d009      	beq.n	80169b0 <icmp_input+0x11c>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 801699c:	4b49      	ldr	r3, [pc, #292]	; (8016ac4 <icmp_input+0x230>)
 801699e:	22b6      	movs	r2, #182	; 0xb6
 80169a0:	4949      	ldr	r1, [pc, #292]	; (8016ac8 <icmp_input+0x234>)
 80169a2:	484a      	ldr	r0, [pc, #296]	; (8016acc <icmp_input+0x238>)
 80169a4:	f002 f83e 	bl	8018a24 <iprintf>
          pbuf_free(r);
 80169a8:	6978      	ldr	r0, [r7, #20]
 80169aa:	f7f9 f97b 	bl	800fca4 <pbuf_free>
          goto icmperr;
 80169ae:	e07d      	b.n	8016aac <icmp_input+0x218>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 80169b0:	6879      	ldr	r1, [r7, #4]
 80169b2:	6978      	ldr	r0, [r7, #20]
 80169b4:	f7f9 fa8e 	bl	800fed4 <pbuf_copy>
 80169b8:	4603      	mov	r3, r0
 80169ba:	2b00      	cmp	r3, #0
 80169bc:	d003      	beq.n	80169c6 <icmp_input+0x132>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 80169be:	6978      	ldr	r0, [r7, #20]
 80169c0:	f7f9 f970 	bl	800fca4 <pbuf_free>
          goto icmperr;
 80169c4:	e072      	b.n	8016aac <icmp_input+0x218>
        }
        /* free the original p */
        pbuf_free(p);
 80169c6:	6878      	ldr	r0, [r7, #4]
 80169c8:	f7f9 f96c 	bl	800fca4 <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 80169cc:	697b      	ldr	r3, [r7, #20]
 80169ce:	607b      	str	r3, [r7, #4]
 80169d0:	e00f      	b.n	80169f2 <icmp_input+0x15e>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 80169d2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80169d4:	330e      	adds	r3, #14
 80169d6:	4619      	mov	r1, r3
 80169d8:	6878      	ldr	r0, [r7, #4]
 80169da:	f7f9 f8dd 	bl	800fb98 <pbuf_remove_header>
 80169de:	4603      	mov	r3, r0
 80169e0:	2b00      	cmp	r3, #0
 80169e2:	d006      	beq.n	80169f2 <icmp_input+0x15e>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 80169e4:	4b37      	ldr	r3, [pc, #220]	; (8016ac4 <icmp_input+0x230>)
 80169e6:	22c7      	movs	r2, #199	; 0xc7
 80169e8:	4939      	ldr	r1, [pc, #228]	; (8016ad0 <icmp_input+0x23c>)
 80169ea:	4838      	ldr	r0, [pc, #224]	; (8016acc <icmp_input+0x238>)
 80169ec:	f002 f81a 	bl	8018a24 <iprintf>
          goto icmperr;
 80169f0:	e05c      	b.n	8016aac <icmp_input+0x218>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 80169f2:	687b      	ldr	r3, [r7, #4]
 80169f4:	685b      	ldr	r3, [r3, #4]
 80169f6:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 80169f8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80169fa:	4619      	mov	r1, r3
 80169fc:	6878      	ldr	r0, [r7, #4]
 80169fe:	f7f9 f8bb 	bl	800fb78 <pbuf_add_header>
 8016a02:	4603      	mov	r3, r0
 8016a04:	2b00      	cmp	r3, #0
 8016a06:	d13c      	bne.n	8016a82 <icmp_input+0x1ee>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 8016a08:	687b      	ldr	r3, [r7, #4]
 8016a0a:	685b      	ldr	r3, [r3, #4]
 8016a0c:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 8016a0e:	69fb      	ldr	r3, [r7, #28]
 8016a10:	681a      	ldr	r2, [r3, #0]
 8016a12:	68fb      	ldr	r3, [r7, #12]
 8016a14:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 8016a16:	4b29      	ldr	r3, [pc, #164]	; (8016abc <icmp_input+0x228>)
 8016a18:	691a      	ldr	r2, [r3, #16]
 8016a1a:	68fb      	ldr	r3, [r7, #12]
 8016a1c:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 8016a1e:	693b      	ldr	r3, [r7, #16]
 8016a20:	2200      	movs	r2, #0
 8016a22:	701a      	strb	r2, [r3, #0]
#if CHECKSUM_GEN_ICMP
        IF__NETIF_CHECKSUM_ENABLED(inp, NETIF_CHECKSUM_GEN_ICMP) {
          /* adjust the checksum */
          if (iecho->chksum > PP_HTONS(0xffffU - (ICMP_ECHO << 8))) {
 8016a24:	693b      	ldr	r3, [r7, #16]
 8016a26:	885b      	ldrh	r3, [r3, #2]
 8016a28:	b29b      	uxth	r3, r3
 8016a2a:	f64f 72f7 	movw	r2, #65527	; 0xfff7
 8016a2e:	4293      	cmp	r3, r2
 8016a30:	d907      	bls.n	8016a42 <icmp_input+0x1ae>
            iecho->chksum = (u16_t)(iecho->chksum + PP_HTONS((u16_t)(ICMP_ECHO << 8)) + 1);
 8016a32:	693b      	ldr	r3, [r7, #16]
 8016a34:	885b      	ldrh	r3, [r3, #2]
 8016a36:	b29b      	uxth	r3, r3
 8016a38:	3309      	adds	r3, #9
 8016a3a:	b29a      	uxth	r2, r3
 8016a3c:	693b      	ldr	r3, [r7, #16]
 8016a3e:	805a      	strh	r2, [r3, #2]
 8016a40:	e006      	b.n	8016a50 <icmp_input+0x1bc>
          } else {
            iecho->chksum = (u16_t)(iecho->chksum + PP_HTONS(ICMP_ECHO << 8));
 8016a42:	693b      	ldr	r3, [r7, #16]
 8016a44:	885b      	ldrh	r3, [r3, #2]
 8016a46:	b29b      	uxth	r3, r3
 8016a48:	3308      	adds	r3, #8
 8016a4a:	b29a      	uxth	r2, r3
 8016a4c:	693b      	ldr	r3, [r7, #16]
 8016a4e:	805a      	strh	r2, [r3, #2]
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 8016a50:	68fb      	ldr	r3, [r7, #12]
 8016a52:	22ff      	movs	r2, #255	; 0xff
 8016a54:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 8016a56:	68fb      	ldr	r3, [r7, #12]
 8016a58:	2200      	movs	r2, #0
 8016a5a:	729a      	strb	r2, [r3, #10]
 8016a5c:	2200      	movs	r2, #0
 8016a5e:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 8016a60:	683b      	ldr	r3, [r7, #0]
 8016a62:	9302      	str	r3, [sp, #8]
 8016a64:	2301      	movs	r3, #1
 8016a66:	9301      	str	r3, [sp, #4]
 8016a68:	2300      	movs	r3, #0
 8016a6a:	9300      	str	r3, [sp, #0]
 8016a6c:	23ff      	movs	r3, #255	; 0xff
 8016a6e:	2200      	movs	r2, #0
 8016a70:	69f9      	ldr	r1, [r7, #28]
 8016a72:	6878      	ldr	r0, [r7, #4]
 8016a74:	f000 fa80 	bl	8016f78 <ip4_output_if>
 8016a78:	4603      	mov	r3, r0
 8016a7a:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 8016a7c:	e001      	b.n	8016a82 <icmp_input+0x1ee>
      break;
 8016a7e:	bf00      	nop
 8016a80:	e000      	b.n	8016a84 <icmp_input+0x1f0>
      break;
 8016a82:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 8016a84:	6878      	ldr	r0, [r7, #4]
 8016a86:	f7f9 f90d 	bl	800fca4 <pbuf_free>
  return;
 8016a8a:	e013      	b.n	8016ab4 <icmp_input+0x220>
    goto lenerr;
 8016a8c:	bf00      	nop
 8016a8e:	e002      	b.n	8016a96 <icmp_input+0x202>
    goto lenerr;
 8016a90:	bf00      	nop
 8016a92:	e000      	b.n	8016a96 <icmp_input+0x202>
        goto lenerr;
 8016a94:	bf00      	nop
lenerr:
  pbuf_free(p);
 8016a96:	6878      	ldr	r0, [r7, #4]
 8016a98:	f7f9 f904 	bl	800fca4 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8016a9c:	e00a      	b.n	8016ab4 <icmp_input+0x220>
        goto icmperr;
 8016a9e:	bf00      	nop
 8016aa0:	e004      	b.n	8016aac <icmp_input+0x218>
        goto icmperr;
 8016aa2:	bf00      	nop
 8016aa4:	e002      	b.n	8016aac <icmp_input+0x218>
          goto icmperr;
 8016aa6:	bf00      	nop
 8016aa8:	e000      	b.n	8016aac <icmp_input+0x218>
          goto icmperr;
 8016aaa:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 8016aac:	6878      	ldr	r0, [r7, #4]
 8016aae:	f7f9 f8f9 	bl	800fca4 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8016ab2:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 8016ab4:	3728      	adds	r7, #40	; 0x28
 8016ab6:	46bd      	mov	sp, r7
 8016ab8:	bd80      	pop	{r7, pc}
 8016aba:	bf00      	nop
 8016abc:	200050bc 	.word	0x200050bc
 8016ac0:	200050d0 	.word	0x200050d0
 8016ac4:	0801d3c8 	.word	0x0801d3c8
 8016ac8:	0801d400 	.word	0x0801d400
 8016acc:	0801d438 	.word	0x0801d438
 8016ad0:	0801d460 	.word	0x0801d460

08016ad4 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 8016ad4:	b580      	push	{r7, lr}
 8016ad6:	b082      	sub	sp, #8
 8016ad8:	af00      	add	r7, sp, #0
 8016ada:	6078      	str	r0, [r7, #4]
 8016adc:	460b      	mov	r3, r1
 8016ade:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 8016ae0:	78fb      	ldrb	r3, [r7, #3]
 8016ae2:	461a      	mov	r2, r3
 8016ae4:	2103      	movs	r1, #3
 8016ae6:	6878      	ldr	r0, [r7, #4]
 8016ae8:	f000 f814 	bl	8016b14 <icmp_send_response>
}
 8016aec:	bf00      	nop
 8016aee:	3708      	adds	r7, #8
 8016af0:	46bd      	mov	sp, r7
 8016af2:	bd80      	pop	{r7, pc}

08016af4 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 8016af4:	b580      	push	{r7, lr}
 8016af6:	b082      	sub	sp, #8
 8016af8:	af00      	add	r7, sp, #0
 8016afa:	6078      	str	r0, [r7, #4]
 8016afc:	460b      	mov	r3, r1
 8016afe:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 8016b00:	78fb      	ldrb	r3, [r7, #3]
 8016b02:	461a      	mov	r2, r3
 8016b04:	210b      	movs	r1, #11
 8016b06:	6878      	ldr	r0, [r7, #4]
 8016b08:	f000 f804 	bl	8016b14 <icmp_send_response>
}
 8016b0c:	bf00      	nop
 8016b0e:	3708      	adds	r7, #8
 8016b10:	46bd      	mov	sp, r7
 8016b12:	bd80      	pop	{r7, pc}

08016b14 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 8016b14:	b580      	push	{r7, lr}
 8016b16:	b08c      	sub	sp, #48	; 0x30
 8016b18:	af04      	add	r7, sp, #16
 8016b1a:	6078      	str	r0, [r7, #4]
 8016b1c:	460b      	mov	r3, r1
 8016b1e:	70fb      	strb	r3, [r7, #3]
 8016b20:	4613      	mov	r3, r2
 8016b22:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 8016b24:	f44f 7220 	mov.w	r2, #640	; 0x280
 8016b28:	2124      	movs	r1, #36	; 0x24
 8016b2a:	2022      	movs	r0, #34	; 0x22
 8016b2c:	f7f8 fdd6 	bl	800f6dc <pbuf_alloc>
 8016b30:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 8016b32:	69fb      	ldr	r3, [r7, #28]
 8016b34:	2b00      	cmp	r3, #0
 8016b36:	d056      	beq.n	8016be6 <icmp_send_response+0xd2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 8016b38:	69fb      	ldr	r3, [r7, #28]
 8016b3a:	895b      	ldrh	r3, [r3, #10]
 8016b3c:	2b23      	cmp	r3, #35	; 0x23
 8016b3e:	d806      	bhi.n	8016b4e <icmp_send_response+0x3a>
 8016b40:	4b2b      	ldr	r3, [pc, #172]	; (8016bf0 <icmp_send_response+0xdc>)
 8016b42:	f44f 72b4 	mov.w	r2, #360	; 0x168
 8016b46:	492b      	ldr	r1, [pc, #172]	; (8016bf4 <icmp_send_response+0xe0>)
 8016b48:	482b      	ldr	r0, [pc, #172]	; (8016bf8 <icmp_send_response+0xe4>)
 8016b4a:	f001 ff6b 	bl	8018a24 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 8016b4e:	687b      	ldr	r3, [r7, #4]
 8016b50:	685b      	ldr	r3, [r3, #4]
 8016b52:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 8016b54:	69fb      	ldr	r3, [r7, #28]
 8016b56:	685b      	ldr	r3, [r3, #4]
 8016b58:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 8016b5a:	697b      	ldr	r3, [r7, #20]
 8016b5c:	78fa      	ldrb	r2, [r7, #3]
 8016b5e:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 8016b60:	697b      	ldr	r3, [r7, #20]
 8016b62:	78ba      	ldrb	r2, [r7, #2]
 8016b64:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 8016b66:	697b      	ldr	r3, [r7, #20]
 8016b68:	2200      	movs	r2, #0
 8016b6a:	711a      	strb	r2, [r3, #4]
 8016b6c:	2200      	movs	r2, #0
 8016b6e:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 8016b70:	697b      	ldr	r3, [r7, #20]
 8016b72:	2200      	movs	r2, #0
 8016b74:	719a      	strb	r2, [r3, #6]
 8016b76:	2200      	movs	r2, #0
 8016b78:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 8016b7a:	69fb      	ldr	r3, [r7, #28]
 8016b7c:	685b      	ldr	r3, [r3, #4]
 8016b7e:	f103 0008 	add.w	r0, r3, #8
 8016b82:	687b      	ldr	r3, [r7, #4]
 8016b84:	685b      	ldr	r3, [r3, #4]
 8016b86:	221c      	movs	r2, #28
 8016b88:	4619      	mov	r1, r3
 8016b8a:	f002 f919 	bl	8018dc0 <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 8016b8e:	69bb      	ldr	r3, [r7, #24]
 8016b90:	68db      	ldr	r3, [r3, #12]
 8016b92:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 8016b94:	f107 030c 	add.w	r3, r7, #12
 8016b98:	4618      	mov	r0, r3
 8016b9a:	f000 f82f 	bl	8016bfc <ip4_route>
 8016b9e:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 8016ba0:	693b      	ldr	r3, [r7, #16]
 8016ba2:	2b00      	cmp	r3, #0
 8016ba4:	d01b      	beq.n	8016bde <icmp_send_response+0xca>
    /* calculate checksum */
    icmphdr->chksum = 0;
 8016ba6:	697b      	ldr	r3, [r7, #20]
 8016ba8:	2200      	movs	r2, #0
 8016baa:	709a      	strb	r2, [r3, #2]
 8016bac:	2200      	movs	r2, #0
 8016bae:	70da      	strb	r2, [r3, #3]
#if CHECKSUM_GEN_ICMP
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
 8016bb0:	69fb      	ldr	r3, [r7, #28]
 8016bb2:	895b      	ldrh	r3, [r3, #10]
 8016bb4:	4619      	mov	r1, r3
 8016bb6:	6978      	ldr	r0, [r7, #20]
 8016bb8:	f7f7 fd09 	bl	800e5ce <inet_chksum>
 8016bbc:	4603      	mov	r3, r0
 8016bbe:	461a      	mov	r2, r3
 8016bc0:	697b      	ldr	r3, [r7, #20]
 8016bc2:	805a      	strh	r2, [r3, #2]
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 8016bc4:	f107 020c 	add.w	r2, r7, #12
 8016bc8:	693b      	ldr	r3, [r7, #16]
 8016bca:	9302      	str	r3, [sp, #8]
 8016bcc:	2301      	movs	r3, #1
 8016bce:	9301      	str	r3, [sp, #4]
 8016bd0:	2300      	movs	r3, #0
 8016bd2:	9300      	str	r3, [sp, #0]
 8016bd4:	23ff      	movs	r3, #255	; 0xff
 8016bd6:	2100      	movs	r1, #0
 8016bd8:	69f8      	ldr	r0, [r7, #28]
 8016bda:	f000 f9cd 	bl	8016f78 <ip4_output_if>
  }
  pbuf_free(q);
 8016bde:	69f8      	ldr	r0, [r7, #28]
 8016be0:	f7f9 f860 	bl	800fca4 <pbuf_free>
 8016be4:	e000      	b.n	8016be8 <icmp_send_response+0xd4>
    return;
 8016be6:	bf00      	nop
}
 8016be8:	3720      	adds	r7, #32
 8016bea:	46bd      	mov	sp, r7
 8016bec:	bd80      	pop	{r7, pc}
 8016bee:	bf00      	nop
 8016bf0:	0801d3c8 	.word	0x0801d3c8
 8016bf4:	0801d494 	.word	0x0801d494
 8016bf8:	0801d438 	.word	0x0801d438

08016bfc <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 8016bfc:	b480      	push	{r7}
 8016bfe:	b085      	sub	sp, #20
 8016c00:	af00      	add	r7, sp, #0
 8016c02:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 8016c04:	4b33      	ldr	r3, [pc, #204]	; (8016cd4 <ip4_route+0xd8>)
 8016c06:	681b      	ldr	r3, [r3, #0]
 8016c08:	60fb      	str	r3, [r7, #12]
 8016c0a:	e036      	b.n	8016c7a <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8016c0c:	68fb      	ldr	r3, [r7, #12]
 8016c0e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8016c12:	f003 0301 	and.w	r3, r3, #1
 8016c16:	b2db      	uxtb	r3, r3
 8016c18:	2b00      	cmp	r3, #0
 8016c1a:	d02b      	beq.n	8016c74 <ip4_route+0x78>
 8016c1c:	68fb      	ldr	r3, [r7, #12]
 8016c1e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8016c22:	089b      	lsrs	r3, r3, #2
 8016c24:	f003 0301 	and.w	r3, r3, #1
 8016c28:	b2db      	uxtb	r3, r3
 8016c2a:	2b00      	cmp	r3, #0
 8016c2c:	d022      	beq.n	8016c74 <ip4_route+0x78>
 8016c2e:	68fb      	ldr	r3, [r7, #12]
 8016c30:	3304      	adds	r3, #4
 8016c32:	681b      	ldr	r3, [r3, #0]
 8016c34:	2b00      	cmp	r3, #0
 8016c36:	d01d      	beq.n	8016c74 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 8016c38:	687b      	ldr	r3, [r7, #4]
 8016c3a:	681a      	ldr	r2, [r3, #0]
 8016c3c:	68fb      	ldr	r3, [r7, #12]
 8016c3e:	3304      	adds	r3, #4
 8016c40:	681b      	ldr	r3, [r3, #0]
 8016c42:	405a      	eors	r2, r3
 8016c44:	68fb      	ldr	r3, [r7, #12]
 8016c46:	3308      	adds	r3, #8
 8016c48:	681b      	ldr	r3, [r3, #0]
 8016c4a:	4013      	ands	r3, r2
 8016c4c:	2b00      	cmp	r3, #0
 8016c4e:	d101      	bne.n	8016c54 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 8016c50:	68fb      	ldr	r3, [r7, #12]
 8016c52:	e038      	b.n	8016cc6 <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 8016c54:	68fb      	ldr	r3, [r7, #12]
 8016c56:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8016c5a:	f003 0302 	and.w	r3, r3, #2
 8016c5e:	2b00      	cmp	r3, #0
 8016c60:	d108      	bne.n	8016c74 <ip4_route+0x78>
 8016c62:	687b      	ldr	r3, [r7, #4]
 8016c64:	681a      	ldr	r2, [r3, #0]
 8016c66:	68fb      	ldr	r3, [r7, #12]
 8016c68:	330c      	adds	r3, #12
 8016c6a:	681b      	ldr	r3, [r3, #0]
 8016c6c:	429a      	cmp	r2, r3
 8016c6e:	d101      	bne.n	8016c74 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 8016c70:	68fb      	ldr	r3, [r7, #12]
 8016c72:	e028      	b.n	8016cc6 <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 8016c74:	68fb      	ldr	r3, [r7, #12]
 8016c76:	681b      	ldr	r3, [r3, #0]
 8016c78:	60fb      	str	r3, [r7, #12]
 8016c7a:	68fb      	ldr	r3, [r7, #12]
 8016c7c:	2b00      	cmp	r3, #0
 8016c7e:	d1c5      	bne.n	8016c0c <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8016c80:	4b15      	ldr	r3, [pc, #84]	; (8016cd8 <ip4_route+0xdc>)
 8016c82:	681b      	ldr	r3, [r3, #0]
 8016c84:	2b00      	cmp	r3, #0
 8016c86:	d01a      	beq.n	8016cbe <ip4_route+0xc2>
 8016c88:	4b13      	ldr	r3, [pc, #76]	; (8016cd8 <ip4_route+0xdc>)
 8016c8a:	681b      	ldr	r3, [r3, #0]
 8016c8c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8016c90:	f003 0301 	and.w	r3, r3, #1
 8016c94:	2b00      	cmp	r3, #0
 8016c96:	d012      	beq.n	8016cbe <ip4_route+0xc2>
 8016c98:	4b0f      	ldr	r3, [pc, #60]	; (8016cd8 <ip4_route+0xdc>)
 8016c9a:	681b      	ldr	r3, [r3, #0]
 8016c9c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8016ca0:	f003 0304 	and.w	r3, r3, #4
 8016ca4:	2b00      	cmp	r3, #0
 8016ca6:	d00a      	beq.n	8016cbe <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8016ca8:	4b0b      	ldr	r3, [pc, #44]	; (8016cd8 <ip4_route+0xdc>)
 8016caa:	681b      	ldr	r3, [r3, #0]
 8016cac:	3304      	adds	r3, #4
 8016cae:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8016cb0:	2b00      	cmp	r3, #0
 8016cb2:	d004      	beq.n	8016cbe <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8016cb4:	687b      	ldr	r3, [r7, #4]
 8016cb6:	681b      	ldr	r3, [r3, #0]
 8016cb8:	b2db      	uxtb	r3, r3
 8016cba:	2b7f      	cmp	r3, #127	; 0x7f
 8016cbc:	d101      	bne.n	8016cc2 <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 8016cbe:	2300      	movs	r3, #0
 8016cc0:	e001      	b.n	8016cc6 <ip4_route+0xca>
  }

  return netif_default;
 8016cc2:	4b05      	ldr	r3, [pc, #20]	; (8016cd8 <ip4_route+0xdc>)
 8016cc4:	681b      	ldr	r3, [r3, #0]
}
 8016cc6:	4618      	mov	r0, r3
 8016cc8:	3714      	adds	r7, #20
 8016cca:	46bd      	mov	sp, r7
 8016ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016cd0:	4770      	bx	lr
 8016cd2:	bf00      	nop
 8016cd4:	20007fcc 	.word	0x20007fcc
 8016cd8:	20007fd0 	.word	0x20007fd0

08016cdc <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 8016cdc:	b580      	push	{r7, lr}
 8016cde:	b082      	sub	sp, #8
 8016ce0:	af00      	add	r7, sp, #0
 8016ce2:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 8016ce4:	687b      	ldr	r3, [r7, #4]
 8016ce6:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8016cea:	f003 0301 	and.w	r3, r3, #1
 8016cee:	b2db      	uxtb	r3, r3
 8016cf0:	2b00      	cmp	r3, #0
 8016cf2:	d016      	beq.n	8016d22 <ip4_input_accept+0x46>
 8016cf4:	687b      	ldr	r3, [r7, #4]
 8016cf6:	3304      	adds	r3, #4
 8016cf8:	681b      	ldr	r3, [r3, #0]
 8016cfa:	2b00      	cmp	r3, #0
 8016cfc:	d011      	beq.n	8016d22 <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8016cfe:	4b0b      	ldr	r3, [pc, #44]	; (8016d2c <ip4_input_accept+0x50>)
 8016d00:	695a      	ldr	r2, [r3, #20]
 8016d02:	687b      	ldr	r3, [r7, #4]
 8016d04:	3304      	adds	r3, #4
 8016d06:	681b      	ldr	r3, [r3, #0]
 8016d08:	429a      	cmp	r2, r3
 8016d0a:	d008      	beq.n	8016d1e <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 8016d0c:	4b07      	ldr	r3, [pc, #28]	; (8016d2c <ip4_input_accept+0x50>)
 8016d0e:	695b      	ldr	r3, [r3, #20]
 8016d10:	6879      	ldr	r1, [r7, #4]
 8016d12:	4618      	mov	r0, r3
 8016d14:	f000 fa08 	bl	8017128 <ip4_addr_isbroadcast_u32>
 8016d18:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8016d1a:	2b00      	cmp	r3, #0
 8016d1c:	d001      	beq.n	8016d22 <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 8016d1e:	2301      	movs	r3, #1
 8016d20:	e000      	b.n	8016d24 <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 8016d22:	2300      	movs	r3, #0
}
 8016d24:	4618      	mov	r0, r3
 8016d26:	3708      	adds	r7, #8
 8016d28:	46bd      	mov	sp, r7
 8016d2a:	bd80      	pop	{r7, pc}
 8016d2c:	200050bc 	.word	0x200050bc

08016d30 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 8016d30:	b580      	push	{r7, lr}
 8016d32:	b086      	sub	sp, #24
 8016d34:	af00      	add	r7, sp, #0
 8016d36:	6078      	str	r0, [r7, #4]
 8016d38:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 8016d3a:	687b      	ldr	r3, [r7, #4]
 8016d3c:	685b      	ldr	r3, [r3, #4]
 8016d3e:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 8016d40:	697b      	ldr	r3, [r7, #20]
 8016d42:	781b      	ldrb	r3, [r3, #0]
 8016d44:	091b      	lsrs	r3, r3, #4
 8016d46:	b2db      	uxtb	r3, r3
 8016d48:	2b04      	cmp	r3, #4
 8016d4a:	d004      	beq.n	8016d56 <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 8016d4c:	6878      	ldr	r0, [r7, #4]
 8016d4e:	f7f8 ffa9 	bl	800fca4 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 8016d52:	2300      	movs	r3, #0
 8016d54:	e107      	b.n	8016f66 <ip4_input+0x236>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 8016d56:	697b      	ldr	r3, [r7, #20]
 8016d58:	781b      	ldrb	r3, [r3, #0]
 8016d5a:	f003 030f 	and.w	r3, r3, #15
 8016d5e:	b2db      	uxtb	r3, r3
 8016d60:	009b      	lsls	r3, r3, #2
 8016d62:	b2db      	uxtb	r3, r3
 8016d64:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 8016d66:	697b      	ldr	r3, [r7, #20]
 8016d68:	885b      	ldrh	r3, [r3, #2]
 8016d6a:	b29b      	uxth	r3, r3
 8016d6c:	4618      	mov	r0, r3
 8016d6e:	f7f7 fba3 	bl	800e4b8 <lwip_htons>
 8016d72:	4603      	mov	r3, r0
 8016d74:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 8016d76:	687b      	ldr	r3, [r7, #4]
 8016d78:	891b      	ldrh	r3, [r3, #8]
 8016d7a:	89ba      	ldrh	r2, [r7, #12]
 8016d7c:	429a      	cmp	r2, r3
 8016d7e:	d204      	bcs.n	8016d8a <ip4_input+0x5a>
    pbuf_realloc(p, iphdr_len);
 8016d80:	89bb      	ldrh	r3, [r7, #12]
 8016d82:	4619      	mov	r1, r3
 8016d84:	6878      	ldr	r0, [r7, #4]
 8016d86:	f7f8 fe07 	bl	800f998 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 8016d8a:	687b      	ldr	r3, [r7, #4]
 8016d8c:	895b      	ldrh	r3, [r3, #10]
 8016d8e:	89fa      	ldrh	r2, [r7, #14]
 8016d90:	429a      	cmp	r2, r3
 8016d92:	d807      	bhi.n	8016da4 <ip4_input+0x74>
 8016d94:	687b      	ldr	r3, [r7, #4]
 8016d96:	891b      	ldrh	r3, [r3, #8]
 8016d98:	89ba      	ldrh	r2, [r7, #12]
 8016d9a:	429a      	cmp	r2, r3
 8016d9c:	d802      	bhi.n	8016da4 <ip4_input+0x74>
 8016d9e:	89fb      	ldrh	r3, [r7, #14]
 8016da0:	2b13      	cmp	r3, #19
 8016da2:	d804      	bhi.n	8016dae <ip4_input+0x7e>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 8016da4:	6878      	ldr	r0, [r7, #4]
 8016da6:	f7f8 ff7d 	bl	800fca4 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 8016daa:	2300      	movs	r3, #0
 8016dac:	e0db      	b.n	8016f66 <ip4_input+0x236>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 8016dae:	697b      	ldr	r3, [r7, #20]
 8016db0:	691b      	ldr	r3, [r3, #16]
 8016db2:	4a6f      	ldr	r2, [pc, #444]	; (8016f70 <ip4_input+0x240>)
 8016db4:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 8016db6:	697b      	ldr	r3, [r7, #20]
 8016db8:	68db      	ldr	r3, [r3, #12]
 8016dba:	4a6d      	ldr	r2, [pc, #436]	; (8016f70 <ip4_input+0x240>)
 8016dbc:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8016dbe:	4b6c      	ldr	r3, [pc, #432]	; (8016f70 <ip4_input+0x240>)
 8016dc0:	695b      	ldr	r3, [r3, #20]
 8016dc2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8016dc6:	2be0      	cmp	r3, #224	; 0xe0
 8016dc8:	d112      	bne.n	8016df0 <ip4_input+0xc0>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 8016dca:	683b      	ldr	r3, [r7, #0]
 8016dcc:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8016dd0:	f003 0301 	and.w	r3, r3, #1
 8016dd4:	b2db      	uxtb	r3, r3
 8016dd6:	2b00      	cmp	r3, #0
 8016dd8:	d007      	beq.n	8016dea <ip4_input+0xba>
 8016dda:	683b      	ldr	r3, [r7, #0]
 8016ddc:	3304      	adds	r3, #4
 8016dde:	681b      	ldr	r3, [r3, #0]
 8016de0:	2b00      	cmp	r3, #0
 8016de2:	d002      	beq.n	8016dea <ip4_input+0xba>
      netif = inp;
 8016de4:	683b      	ldr	r3, [r7, #0]
 8016de6:	613b      	str	r3, [r7, #16]
 8016de8:	e02a      	b.n	8016e40 <ip4_input+0x110>
    } else {
      netif = NULL;
 8016dea:	2300      	movs	r3, #0
 8016dec:	613b      	str	r3, [r7, #16]
 8016dee:	e027      	b.n	8016e40 <ip4_input+0x110>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 8016df0:	6838      	ldr	r0, [r7, #0]
 8016df2:	f7ff ff73 	bl	8016cdc <ip4_input_accept>
 8016df6:	4603      	mov	r3, r0
 8016df8:	2b00      	cmp	r3, #0
 8016dfa:	d002      	beq.n	8016e02 <ip4_input+0xd2>
      netif = inp;
 8016dfc:	683b      	ldr	r3, [r7, #0]
 8016dfe:	613b      	str	r3, [r7, #16]
 8016e00:	e01e      	b.n	8016e40 <ip4_input+0x110>
    } else {
      netif = NULL;
 8016e02:	2300      	movs	r3, #0
 8016e04:	613b      	str	r3, [r7, #16]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 8016e06:	4b5a      	ldr	r3, [pc, #360]	; (8016f70 <ip4_input+0x240>)
 8016e08:	695b      	ldr	r3, [r3, #20]
 8016e0a:	b2db      	uxtb	r3, r3
 8016e0c:	2b7f      	cmp	r3, #127	; 0x7f
 8016e0e:	d017      	beq.n	8016e40 <ip4_input+0x110>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 8016e10:	4b58      	ldr	r3, [pc, #352]	; (8016f74 <ip4_input+0x244>)
 8016e12:	681b      	ldr	r3, [r3, #0]
 8016e14:	613b      	str	r3, [r7, #16]
 8016e16:	e00e      	b.n	8016e36 <ip4_input+0x106>
          if (netif == inp) {
 8016e18:	693a      	ldr	r2, [r7, #16]
 8016e1a:	683b      	ldr	r3, [r7, #0]
 8016e1c:	429a      	cmp	r2, r3
 8016e1e:	d006      	beq.n	8016e2e <ip4_input+0xfe>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 8016e20:	6938      	ldr	r0, [r7, #16]
 8016e22:	f7ff ff5b 	bl	8016cdc <ip4_input_accept>
 8016e26:	4603      	mov	r3, r0
 8016e28:	2b00      	cmp	r3, #0
 8016e2a:	d108      	bne.n	8016e3e <ip4_input+0x10e>
 8016e2c:	e000      	b.n	8016e30 <ip4_input+0x100>
            continue;
 8016e2e:	bf00      	nop
        NETIF_FOREACH(netif) {
 8016e30:	693b      	ldr	r3, [r7, #16]
 8016e32:	681b      	ldr	r3, [r3, #0]
 8016e34:	613b      	str	r3, [r7, #16]
 8016e36:	693b      	ldr	r3, [r7, #16]
 8016e38:	2b00      	cmp	r3, #0
 8016e3a:	d1ed      	bne.n	8016e18 <ip4_input+0xe8>
 8016e3c:	e000      	b.n	8016e40 <ip4_input+0x110>
            break;
 8016e3e:	bf00      	nop
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8016e40:	4b4b      	ldr	r3, [pc, #300]	; (8016f70 <ip4_input+0x240>)
 8016e42:	691b      	ldr	r3, [r3, #16]
 8016e44:	6839      	ldr	r1, [r7, #0]
 8016e46:	4618      	mov	r0, r3
 8016e48:	f000 f96e 	bl	8017128 <ip4_addr_isbroadcast_u32>
 8016e4c:	4603      	mov	r3, r0
 8016e4e:	2b00      	cmp	r3, #0
 8016e50:	d105      	bne.n	8016e5e <ip4_input+0x12e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 8016e52:	4b47      	ldr	r3, [pc, #284]	; (8016f70 <ip4_input+0x240>)
 8016e54:	691b      	ldr	r3, [r3, #16]
 8016e56:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8016e5a:	2be0      	cmp	r3, #224	; 0xe0
 8016e5c:	d104      	bne.n	8016e68 <ip4_input+0x138>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 8016e5e:	6878      	ldr	r0, [r7, #4]
 8016e60:	f7f8 ff20 	bl	800fca4 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 8016e64:	2300      	movs	r3, #0
 8016e66:	e07e      	b.n	8016f66 <ip4_input+0x236>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 8016e68:	693b      	ldr	r3, [r7, #16]
 8016e6a:	2b00      	cmp	r3, #0
 8016e6c:	d104      	bne.n	8016e78 <ip4_input+0x148>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 8016e6e:	6878      	ldr	r0, [r7, #4]
 8016e70:	f7f8 ff18 	bl	800fca4 <pbuf_free>
    return ERR_OK;
 8016e74:	2300      	movs	r3, #0
 8016e76:	e076      	b.n	8016f66 <ip4_input+0x236>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 8016e78:	697b      	ldr	r3, [r7, #20]
 8016e7a:	88db      	ldrh	r3, [r3, #6]
 8016e7c:	b29b      	uxth	r3, r3
 8016e7e:	461a      	mov	r2, r3
 8016e80:	f64f 733f 	movw	r3, #65343	; 0xff3f
 8016e84:	4013      	ands	r3, r2
 8016e86:	2b00      	cmp	r3, #0
 8016e88:	d00b      	beq.n	8016ea2 <ip4_input+0x172>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 8016e8a:	6878      	ldr	r0, [r7, #4]
 8016e8c:	f000 fc92 	bl	80177b4 <ip4_reass>
 8016e90:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 8016e92:	687b      	ldr	r3, [r7, #4]
 8016e94:	2b00      	cmp	r3, #0
 8016e96:	d101      	bne.n	8016e9c <ip4_input+0x16c>
      return ERR_OK;
 8016e98:	2300      	movs	r3, #0
 8016e9a:	e064      	b.n	8016f66 <ip4_input+0x236>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 8016e9c:	687b      	ldr	r3, [r7, #4]
 8016e9e:	685b      	ldr	r3, [r3, #4]
 8016ea0:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 8016ea2:	4a33      	ldr	r2, [pc, #204]	; (8016f70 <ip4_input+0x240>)
 8016ea4:	693b      	ldr	r3, [r7, #16]
 8016ea6:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 8016ea8:	4a31      	ldr	r2, [pc, #196]	; (8016f70 <ip4_input+0x240>)
 8016eaa:	683b      	ldr	r3, [r7, #0]
 8016eac:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 8016eae:	4a30      	ldr	r2, [pc, #192]	; (8016f70 <ip4_input+0x240>)
 8016eb0:	697b      	ldr	r3, [r7, #20]
 8016eb2:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 8016eb4:	697b      	ldr	r3, [r7, #20]
 8016eb6:	781b      	ldrb	r3, [r3, #0]
 8016eb8:	f003 030f 	and.w	r3, r3, #15
 8016ebc:	b2db      	uxtb	r3, r3
 8016ebe:	009b      	lsls	r3, r3, #2
 8016ec0:	b2db      	uxtb	r3, r3
 8016ec2:	b29a      	uxth	r2, r3
 8016ec4:	4b2a      	ldr	r3, [pc, #168]	; (8016f70 <ip4_input+0x240>)
 8016ec6:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 8016ec8:	89fb      	ldrh	r3, [r7, #14]
 8016eca:	4619      	mov	r1, r3
 8016ecc:	6878      	ldr	r0, [r7, #4]
 8016ece:	f7f8 fe63 	bl	800fb98 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 8016ed2:	697b      	ldr	r3, [r7, #20]
 8016ed4:	7a5b      	ldrb	r3, [r3, #9]
 8016ed6:	2b11      	cmp	r3, #17
 8016ed8:	d006      	beq.n	8016ee8 <ip4_input+0x1b8>
 8016eda:	2b11      	cmp	r3, #17
 8016edc:	dc13      	bgt.n	8016f06 <ip4_input+0x1d6>
 8016ede:	2b01      	cmp	r3, #1
 8016ee0:	d00c      	beq.n	8016efc <ip4_input+0x1cc>
 8016ee2:	2b06      	cmp	r3, #6
 8016ee4:	d005      	beq.n	8016ef2 <ip4_input+0x1c2>
 8016ee6:	e00e      	b.n	8016f06 <ip4_input+0x1d6>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 8016ee8:	6839      	ldr	r1, [r7, #0]
 8016eea:	6878      	ldr	r0, [r7, #4]
 8016eec:	f7fe fc42 	bl	8015774 <udp_input>
        break;
 8016ef0:	e026      	b.n	8016f40 <ip4_input+0x210>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 8016ef2:	6839      	ldr	r1, [r7, #0]
 8016ef4:	6878      	ldr	r0, [r7, #4]
 8016ef6:	f7fa fcfd 	bl	80118f4 <tcp_input>
        break;
 8016efa:	e021      	b.n	8016f40 <ip4_input+0x210>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 8016efc:	6839      	ldr	r1, [r7, #0]
 8016efe:	6878      	ldr	r0, [r7, #4]
 8016f00:	f7ff fcc8 	bl	8016894 <icmp_input>
        break;
 8016f04:	e01c      	b.n	8016f40 <ip4_input+0x210>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8016f06:	4b1a      	ldr	r3, [pc, #104]	; (8016f70 <ip4_input+0x240>)
 8016f08:	695b      	ldr	r3, [r3, #20]
 8016f0a:	6939      	ldr	r1, [r7, #16]
 8016f0c:	4618      	mov	r0, r3
 8016f0e:	f000 f90b 	bl	8017128 <ip4_addr_isbroadcast_u32>
 8016f12:	4603      	mov	r3, r0
 8016f14:	2b00      	cmp	r3, #0
 8016f16:	d10f      	bne.n	8016f38 <ip4_input+0x208>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8016f18:	4b15      	ldr	r3, [pc, #84]	; (8016f70 <ip4_input+0x240>)
 8016f1a:	695b      	ldr	r3, [r3, #20]
 8016f1c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8016f20:	2be0      	cmp	r3, #224	; 0xe0
 8016f22:	d009      	beq.n	8016f38 <ip4_input+0x208>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 8016f24:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8016f28:	4619      	mov	r1, r3
 8016f2a:	6878      	ldr	r0, [r7, #4]
 8016f2c:	f7f8 fea7 	bl	800fc7e <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 8016f30:	2102      	movs	r1, #2
 8016f32:	6878      	ldr	r0, [r7, #4]
 8016f34:	f7ff fdce 	bl	8016ad4 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 8016f38:	6878      	ldr	r0, [r7, #4]
 8016f3a:	f7f8 feb3 	bl	800fca4 <pbuf_free>
        break;
 8016f3e:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 8016f40:	4b0b      	ldr	r3, [pc, #44]	; (8016f70 <ip4_input+0x240>)
 8016f42:	2200      	movs	r2, #0
 8016f44:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 8016f46:	4b0a      	ldr	r3, [pc, #40]	; (8016f70 <ip4_input+0x240>)
 8016f48:	2200      	movs	r2, #0
 8016f4a:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 8016f4c:	4b08      	ldr	r3, [pc, #32]	; (8016f70 <ip4_input+0x240>)
 8016f4e:	2200      	movs	r2, #0
 8016f50:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 8016f52:	4b07      	ldr	r3, [pc, #28]	; (8016f70 <ip4_input+0x240>)
 8016f54:	2200      	movs	r2, #0
 8016f56:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 8016f58:	4b05      	ldr	r3, [pc, #20]	; (8016f70 <ip4_input+0x240>)
 8016f5a:	2200      	movs	r2, #0
 8016f5c:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 8016f5e:	4b04      	ldr	r3, [pc, #16]	; (8016f70 <ip4_input+0x240>)
 8016f60:	2200      	movs	r2, #0
 8016f62:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 8016f64:	2300      	movs	r3, #0
}
 8016f66:	4618      	mov	r0, r3
 8016f68:	3718      	adds	r7, #24
 8016f6a:	46bd      	mov	sp, r7
 8016f6c:	bd80      	pop	{r7, pc}
 8016f6e:	bf00      	nop
 8016f70:	200050bc 	.word	0x200050bc
 8016f74:	20007fcc 	.word	0x20007fcc

08016f78 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 8016f78:	b580      	push	{r7, lr}
 8016f7a:	b08a      	sub	sp, #40	; 0x28
 8016f7c:	af04      	add	r7, sp, #16
 8016f7e:	60f8      	str	r0, [r7, #12]
 8016f80:	60b9      	str	r1, [r7, #8]
 8016f82:	607a      	str	r2, [r7, #4]
 8016f84:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 8016f86:	68bb      	ldr	r3, [r7, #8]
 8016f88:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 8016f8a:	687b      	ldr	r3, [r7, #4]
 8016f8c:	2b00      	cmp	r3, #0
 8016f8e:	d009      	beq.n	8016fa4 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 8016f90:	68bb      	ldr	r3, [r7, #8]
 8016f92:	2b00      	cmp	r3, #0
 8016f94:	d003      	beq.n	8016f9e <ip4_output_if+0x26>
 8016f96:	68bb      	ldr	r3, [r7, #8]
 8016f98:	681b      	ldr	r3, [r3, #0]
 8016f9a:	2b00      	cmp	r3, #0
 8016f9c:	d102      	bne.n	8016fa4 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 8016f9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016fa0:	3304      	adds	r3, #4
 8016fa2:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 8016fa4:	78fa      	ldrb	r2, [r7, #3]
 8016fa6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016fa8:	9302      	str	r3, [sp, #8]
 8016faa:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8016fae:	9301      	str	r3, [sp, #4]
 8016fb0:	f897 3020 	ldrb.w	r3, [r7, #32]
 8016fb4:	9300      	str	r3, [sp, #0]
 8016fb6:	4613      	mov	r3, r2
 8016fb8:	687a      	ldr	r2, [r7, #4]
 8016fba:	6979      	ldr	r1, [r7, #20]
 8016fbc:	68f8      	ldr	r0, [r7, #12]
 8016fbe:	f000 f805 	bl	8016fcc <ip4_output_if_src>
 8016fc2:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 8016fc4:	4618      	mov	r0, r3
 8016fc6:	3718      	adds	r7, #24
 8016fc8:	46bd      	mov	sp, r7
 8016fca:	bd80      	pop	{r7, pc}

08016fcc <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 8016fcc:	b580      	push	{r7, lr}
 8016fce:	b088      	sub	sp, #32
 8016fd0:	af00      	add	r7, sp, #0
 8016fd2:	60f8      	str	r0, [r7, #12]
 8016fd4:	60b9      	str	r1, [r7, #8]
 8016fd6:	607a      	str	r2, [r7, #4]
 8016fd8:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 8016fda:	68fb      	ldr	r3, [r7, #12]
 8016fdc:	7b9b      	ldrb	r3, [r3, #14]
 8016fde:	2b01      	cmp	r3, #1
 8016fe0:	d006      	beq.n	8016ff0 <ip4_output_if_src+0x24>
 8016fe2:	4b4b      	ldr	r3, [pc, #300]	; (8017110 <ip4_output_if_src+0x144>)
 8016fe4:	f44f 7255 	mov.w	r2, #852	; 0x354
 8016fe8:	494a      	ldr	r1, [pc, #296]	; (8017114 <ip4_output_if_src+0x148>)
 8016fea:	484b      	ldr	r0, [pc, #300]	; (8017118 <ip4_output_if_src+0x14c>)
 8016fec:	f001 fd1a 	bl	8018a24 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 8016ff0:	687b      	ldr	r3, [r7, #4]
 8016ff2:	2b00      	cmp	r3, #0
 8016ff4:	d060      	beq.n	80170b8 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 8016ff6:	2314      	movs	r3, #20
 8016ff8:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 8016ffa:	2114      	movs	r1, #20
 8016ffc:	68f8      	ldr	r0, [r7, #12]
 8016ffe:	f7f8 fdbb 	bl	800fb78 <pbuf_add_header>
 8017002:	4603      	mov	r3, r0
 8017004:	2b00      	cmp	r3, #0
 8017006:	d002      	beq.n	801700e <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8017008:	f06f 0301 	mvn.w	r3, #1
 801700c:	e07c      	b.n	8017108 <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 801700e:	68fb      	ldr	r3, [r7, #12]
 8017010:	685b      	ldr	r3, [r3, #4]
 8017012:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 8017014:	68fb      	ldr	r3, [r7, #12]
 8017016:	895b      	ldrh	r3, [r3, #10]
 8017018:	2b13      	cmp	r3, #19
 801701a:	d806      	bhi.n	801702a <ip4_output_if_src+0x5e>
 801701c:	4b3c      	ldr	r3, [pc, #240]	; (8017110 <ip4_output_if_src+0x144>)
 801701e:	f44f 7262 	mov.w	r2, #904	; 0x388
 8017022:	493e      	ldr	r1, [pc, #248]	; (801711c <ip4_output_if_src+0x150>)
 8017024:	483c      	ldr	r0, [pc, #240]	; (8017118 <ip4_output_if_src+0x14c>)
 8017026:	f001 fcfd 	bl	8018a24 <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 801702a:	69fb      	ldr	r3, [r7, #28]
 801702c:	78fa      	ldrb	r2, [r7, #3]
 801702e:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 8017030:	69fb      	ldr	r3, [r7, #28]
 8017032:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8017036:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 8017038:	687b      	ldr	r3, [r7, #4]
 801703a:	681a      	ldr	r2, [r3, #0]
 801703c:	69fb      	ldr	r3, [r7, #28]
 801703e:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 8017040:	8b7b      	ldrh	r3, [r7, #26]
 8017042:	089b      	lsrs	r3, r3, #2
 8017044:	b29b      	uxth	r3, r3
 8017046:	b2db      	uxtb	r3, r3
 8017048:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801704c:	b2da      	uxtb	r2, r3
 801704e:	69fb      	ldr	r3, [r7, #28]
 8017050:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 8017052:	69fb      	ldr	r3, [r7, #28]
 8017054:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8017058:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 801705a:	68fb      	ldr	r3, [r7, #12]
 801705c:	891b      	ldrh	r3, [r3, #8]
 801705e:	4618      	mov	r0, r3
 8017060:	f7f7 fa2a 	bl	800e4b8 <lwip_htons>
 8017064:	4603      	mov	r3, r0
 8017066:	461a      	mov	r2, r3
 8017068:	69fb      	ldr	r3, [r7, #28]
 801706a:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 801706c:	69fb      	ldr	r3, [r7, #28]
 801706e:	2200      	movs	r2, #0
 8017070:	719a      	strb	r2, [r3, #6]
 8017072:	2200      	movs	r2, #0
 8017074:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 8017076:	4b2a      	ldr	r3, [pc, #168]	; (8017120 <ip4_output_if_src+0x154>)
 8017078:	881b      	ldrh	r3, [r3, #0]
 801707a:	4618      	mov	r0, r3
 801707c:	f7f7 fa1c 	bl	800e4b8 <lwip_htons>
 8017080:	4603      	mov	r3, r0
 8017082:	461a      	mov	r2, r3
 8017084:	69fb      	ldr	r3, [r7, #28]
 8017086:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 8017088:	4b25      	ldr	r3, [pc, #148]	; (8017120 <ip4_output_if_src+0x154>)
 801708a:	881b      	ldrh	r3, [r3, #0]
 801708c:	3301      	adds	r3, #1
 801708e:	b29a      	uxth	r2, r3
 8017090:	4b23      	ldr	r3, [pc, #140]	; (8017120 <ip4_output_if_src+0x154>)
 8017092:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 8017094:	68bb      	ldr	r3, [r7, #8]
 8017096:	2b00      	cmp	r3, #0
 8017098:	d104      	bne.n	80170a4 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 801709a:	4b22      	ldr	r3, [pc, #136]	; (8017124 <ip4_output_if_src+0x158>)
 801709c:	681a      	ldr	r2, [r3, #0]
 801709e:	69fb      	ldr	r3, [r7, #28]
 80170a0:	60da      	str	r2, [r3, #12]
 80170a2:	e003      	b.n	80170ac <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 80170a4:	68bb      	ldr	r3, [r7, #8]
 80170a6:	681a      	ldr	r2, [r3, #0]
 80170a8:	69fb      	ldr	r3, [r7, #28]
 80170aa:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 80170ac:	69fb      	ldr	r3, [r7, #28]
 80170ae:	2200      	movs	r2, #0
 80170b0:	729a      	strb	r2, [r3, #10]
 80170b2:	2200      	movs	r2, #0
 80170b4:	72da      	strb	r2, [r3, #11]
 80170b6:	e00f      	b.n	80170d8 <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 80170b8:	68fb      	ldr	r3, [r7, #12]
 80170ba:	895b      	ldrh	r3, [r3, #10]
 80170bc:	2b13      	cmp	r3, #19
 80170be:	d802      	bhi.n	80170c6 <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 80170c0:	f06f 0301 	mvn.w	r3, #1
 80170c4:	e020      	b.n	8017108 <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 80170c6:	68fb      	ldr	r3, [r7, #12]
 80170c8:	685b      	ldr	r3, [r3, #4]
 80170ca:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 80170cc:	69fb      	ldr	r3, [r7, #28]
 80170ce:	691b      	ldr	r3, [r3, #16]
 80170d0:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 80170d2:	f107 0314 	add.w	r3, r7, #20
 80170d6:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 80170d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80170da:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80170dc:	2b00      	cmp	r3, #0
 80170de:	d00c      	beq.n	80170fa <ip4_output_if_src+0x12e>
 80170e0:	68fb      	ldr	r3, [r7, #12]
 80170e2:	891a      	ldrh	r2, [r3, #8]
 80170e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80170e6:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80170e8:	429a      	cmp	r2, r3
 80170ea:	d906      	bls.n	80170fa <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 80170ec:	687a      	ldr	r2, [r7, #4]
 80170ee:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80170f0:	68f8      	ldr	r0, [r7, #12]
 80170f2:	f000 fd53 	bl	8017b9c <ip4_frag>
 80170f6:	4603      	mov	r3, r0
 80170f8:	e006      	b.n	8017108 <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 80170fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80170fc:	695b      	ldr	r3, [r3, #20]
 80170fe:	687a      	ldr	r2, [r7, #4]
 8017100:	68f9      	ldr	r1, [r7, #12]
 8017102:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8017104:	4798      	blx	r3
 8017106:	4603      	mov	r3, r0
}
 8017108:	4618      	mov	r0, r3
 801710a:	3720      	adds	r7, #32
 801710c:	46bd      	mov	sp, r7
 801710e:	bd80      	pop	{r7, pc}
 8017110:	0801d4c0 	.word	0x0801d4c0
 8017114:	0801d4f4 	.word	0x0801d4f4
 8017118:	0801d500 	.word	0x0801d500
 801711c:	0801d528 	.word	0x0801d528
 8017120:	2000812a 	.word	0x2000812a
 8017124:	0801d950 	.word	0x0801d950

08017128 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 8017128:	b480      	push	{r7}
 801712a:	b085      	sub	sp, #20
 801712c:	af00      	add	r7, sp, #0
 801712e:	6078      	str	r0, [r7, #4]
 8017130:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 8017132:	687b      	ldr	r3, [r7, #4]
 8017134:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 8017136:	687b      	ldr	r3, [r7, #4]
 8017138:	f1b3 3fff 	cmp.w	r3, #4294967295
 801713c:	d002      	beq.n	8017144 <ip4_addr_isbroadcast_u32+0x1c>
 801713e:	687b      	ldr	r3, [r7, #4]
 8017140:	2b00      	cmp	r3, #0
 8017142:	d101      	bne.n	8017148 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 8017144:	2301      	movs	r3, #1
 8017146:	e02a      	b.n	801719e <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 8017148:	683b      	ldr	r3, [r7, #0]
 801714a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801714e:	f003 0302 	and.w	r3, r3, #2
 8017152:	2b00      	cmp	r3, #0
 8017154:	d101      	bne.n	801715a <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 8017156:	2300      	movs	r3, #0
 8017158:	e021      	b.n	801719e <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 801715a:	683b      	ldr	r3, [r7, #0]
 801715c:	3304      	adds	r3, #4
 801715e:	681b      	ldr	r3, [r3, #0]
 8017160:	687a      	ldr	r2, [r7, #4]
 8017162:	429a      	cmp	r2, r3
 8017164:	d101      	bne.n	801716a <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 8017166:	2300      	movs	r3, #0
 8017168:	e019      	b.n	801719e <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 801716a:	68fa      	ldr	r2, [r7, #12]
 801716c:	683b      	ldr	r3, [r7, #0]
 801716e:	3304      	adds	r3, #4
 8017170:	681b      	ldr	r3, [r3, #0]
 8017172:	405a      	eors	r2, r3
 8017174:	683b      	ldr	r3, [r7, #0]
 8017176:	3308      	adds	r3, #8
 8017178:	681b      	ldr	r3, [r3, #0]
 801717a:	4013      	ands	r3, r2
 801717c:	2b00      	cmp	r3, #0
 801717e:	d10d      	bne.n	801719c <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8017180:	683b      	ldr	r3, [r7, #0]
 8017182:	3308      	adds	r3, #8
 8017184:	681b      	ldr	r3, [r3, #0]
 8017186:	43da      	mvns	r2, r3
 8017188:	687b      	ldr	r3, [r7, #4]
 801718a:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 801718c:	683b      	ldr	r3, [r7, #0]
 801718e:	3308      	adds	r3, #8
 8017190:	681b      	ldr	r3, [r3, #0]
 8017192:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8017194:	429a      	cmp	r2, r3
 8017196:	d101      	bne.n	801719c <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 8017198:	2301      	movs	r3, #1
 801719a:	e000      	b.n	801719e <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 801719c:	2300      	movs	r3, #0
  }
}
 801719e:	4618      	mov	r0, r3
 80171a0:	3714      	adds	r7, #20
 80171a2:	46bd      	mov	sp, r7
 80171a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80171a8:	4770      	bx	lr
	...

080171ac <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 80171ac:	b580      	push	{r7, lr}
 80171ae:	b084      	sub	sp, #16
 80171b0:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 80171b2:	2300      	movs	r3, #0
 80171b4:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 80171b6:	4b12      	ldr	r3, [pc, #72]	; (8017200 <ip_reass_tmr+0x54>)
 80171b8:	681b      	ldr	r3, [r3, #0]
 80171ba:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 80171bc:	e018      	b.n	80171f0 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 80171be:	68fb      	ldr	r3, [r7, #12]
 80171c0:	7fdb      	ldrb	r3, [r3, #31]
 80171c2:	2b00      	cmp	r3, #0
 80171c4:	d00b      	beq.n	80171de <ip_reass_tmr+0x32>
      r->timer--;
 80171c6:	68fb      	ldr	r3, [r7, #12]
 80171c8:	7fdb      	ldrb	r3, [r3, #31]
 80171ca:	3b01      	subs	r3, #1
 80171cc:	b2da      	uxtb	r2, r3
 80171ce:	68fb      	ldr	r3, [r7, #12]
 80171d0:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 80171d2:	68fb      	ldr	r3, [r7, #12]
 80171d4:	60bb      	str	r3, [r7, #8]
      r = r->next;
 80171d6:	68fb      	ldr	r3, [r7, #12]
 80171d8:	681b      	ldr	r3, [r3, #0]
 80171da:	60fb      	str	r3, [r7, #12]
 80171dc:	e008      	b.n	80171f0 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 80171de:	68fb      	ldr	r3, [r7, #12]
 80171e0:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 80171e2:	68fb      	ldr	r3, [r7, #12]
 80171e4:	681b      	ldr	r3, [r3, #0]
 80171e6:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 80171e8:	68b9      	ldr	r1, [r7, #8]
 80171ea:	6878      	ldr	r0, [r7, #4]
 80171ec:	f000 f80a 	bl	8017204 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 80171f0:	68fb      	ldr	r3, [r7, #12]
 80171f2:	2b00      	cmp	r3, #0
 80171f4:	d1e3      	bne.n	80171be <ip_reass_tmr+0x12>
    }
  }
}
 80171f6:	bf00      	nop
 80171f8:	bf00      	nop
 80171fa:	3710      	adds	r7, #16
 80171fc:	46bd      	mov	sp, r7
 80171fe:	bd80      	pop	{r7, pc}
 8017200:	2000812c 	.word	0x2000812c

08017204 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8017204:	b580      	push	{r7, lr}
 8017206:	b088      	sub	sp, #32
 8017208:	af00      	add	r7, sp, #0
 801720a:	6078      	str	r0, [r7, #4]
 801720c:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 801720e:	2300      	movs	r3, #0
 8017210:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 8017212:	683a      	ldr	r2, [r7, #0]
 8017214:	687b      	ldr	r3, [r7, #4]
 8017216:	429a      	cmp	r2, r3
 8017218:	d105      	bne.n	8017226 <ip_reass_free_complete_datagram+0x22>
 801721a:	4b45      	ldr	r3, [pc, #276]	; (8017330 <ip_reass_free_complete_datagram+0x12c>)
 801721c:	22ab      	movs	r2, #171	; 0xab
 801721e:	4945      	ldr	r1, [pc, #276]	; (8017334 <ip_reass_free_complete_datagram+0x130>)
 8017220:	4845      	ldr	r0, [pc, #276]	; (8017338 <ip_reass_free_complete_datagram+0x134>)
 8017222:	f001 fbff 	bl	8018a24 <iprintf>
  if (prev != NULL) {
 8017226:	683b      	ldr	r3, [r7, #0]
 8017228:	2b00      	cmp	r3, #0
 801722a:	d00a      	beq.n	8017242 <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 801722c:	683b      	ldr	r3, [r7, #0]
 801722e:	681b      	ldr	r3, [r3, #0]
 8017230:	687a      	ldr	r2, [r7, #4]
 8017232:	429a      	cmp	r2, r3
 8017234:	d005      	beq.n	8017242 <ip_reass_free_complete_datagram+0x3e>
 8017236:	4b3e      	ldr	r3, [pc, #248]	; (8017330 <ip_reass_free_complete_datagram+0x12c>)
 8017238:	22ad      	movs	r2, #173	; 0xad
 801723a:	4940      	ldr	r1, [pc, #256]	; (801733c <ip_reass_free_complete_datagram+0x138>)
 801723c:	483e      	ldr	r0, [pc, #248]	; (8017338 <ip_reass_free_complete_datagram+0x134>)
 801723e:	f001 fbf1 	bl	8018a24 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 8017242:	687b      	ldr	r3, [r7, #4]
 8017244:	685b      	ldr	r3, [r3, #4]
 8017246:	685b      	ldr	r3, [r3, #4]
 8017248:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 801724a:	697b      	ldr	r3, [r7, #20]
 801724c:	889b      	ldrh	r3, [r3, #4]
 801724e:	b29b      	uxth	r3, r3
 8017250:	2b00      	cmp	r3, #0
 8017252:	d12a      	bne.n	80172aa <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 8017254:	687b      	ldr	r3, [r7, #4]
 8017256:	685b      	ldr	r3, [r3, #4]
 8017258:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 801725a:	697b      	ldr	r3, [r7, #20]
 801725c:	681a      	ldr	r2, [r3, #0]
 801725e:	687b      	ldr	r3, [r7, #4]
 8017260:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 8017262:	69bb      	ldr	r3, [r7, #24]
 8017264:	6858      	ldr	r0, [r3, #4]
 8017266:	687b      	ldr	r3, [r7, #4]
 8017268:	3308      	adds	r3, #8
 801726a:	2214      	movs	r2, #20
 801726c:	4619      	mov	r1, r3
 801726e:	f001 fda7 	bl	8018dc0 <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 8017272:	2101      	movs	r1, #1
 8017274:	69b8      	ldr	r0, [r7, #24]
 8017276:	f7ff fc3d 	bl	8016af4 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 801727a:	69b8      	ldr	r0, [r7, #24]
 801727c:	f7f8 fd9a 	bl	800fdb4 <pbuf_clen>
 8017280:	4603      	mov	r3, r0
 8017282:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8017284:	8bfa      	ldrh	r2, [r7, #30]
 8017286:	8a7b      	ldrh	r3, [r7, #18]
 8017288:	4413      	add	r3, r2
 801728a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801728e:	db05      	blt.n	801729c <ip_reass_free_complete_datagram+0x98>
 8017290:	4b27      	ldr	r3, [pc, #156]	; (8017330 <ip_reass_free_complete_datagram+0x12c>)
 8017292:	22bc      	movs	r2, #188	; 0xbc
 8017294:	492a      	ldr	r1, [pc, #168]	; (8017340 <ip_reass_free_complete_datagram+0x13c>)
 8017296:	4828      	ldr	r0, [pc, #160]	; (8017338 <ip_reass_free_complete_datagram+0x134>)
 8017298:	f001 fbc4 	bl	8018a24 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 801729c:	8bfa      	ldrh	r2, [r7, #30]
 801729e:	8a7b      	ldrh	r3, [r7, #18]
 80172a0:	4413      	add	r3, r2
 80172a2:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 80172a4:	69b8      	ldr	r0, [r7, #24]
 80172a6:	f7f8 fcfd 	bl	800fca4 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 80172aa:	687b      	ldr	r3, [r7, #4]
 80172ac:	685b      	ldr	r3, [r3, #4]
 80172ae:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 80172b0:	e01f      	b.n	80172f2 <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 80172b2:	69bb      	ldr	r3, [r7, #24]
 80172b4:	685b      	ldr	r3, [r3, #4]
 80172b6:	617b      	str	r3, [r7, #20]
    pcur = p;
 80172b8:	69bb      	ldr	r3, [r7, #24]
 80172ba:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 80172bc:	697b      	ldr	r3, [r7, #20]
 80172be:	681b      	ldr	r3, [r3, #0]
 80172c0:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 80172c2:	68f8      	ldr	r0, [r7, #12]
 80172c4:	f7f8 fd76 	bl	800fdb4 <pbuf_clen>
 80172c8:	4603      	mov	r3, r0
 80172ca:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 80172cc:	8bfa      	ldrh	r2, [r7, #30]
 80172ce:	8a7b      	ldrh	r3, [r7, #18]
 80172d0:	4413      	add	r3, r2
 80172d2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80172d6:	db05      	blt.n	80172e4 <ip_reass_free_complete_datagram+0xe0>
 80172d8:	4b15      	ldr	r3, [pc, #84]	; (8017330 <ip_reass_free_complete_datagram+0x12c>)
 80172da:	22cc      	movs	r2, #204	; 0xcc
 80172dc:	4918      	ldr	r1, [pc, #96]	; (8017340 <ip_reass_free_complete_datagram+0x13c>)
 80172de:	4816      	ldr	r0, [pc, #88]	; (8017338 <ip_reass_free_complete_datagram+0x134>)
 80172e0:	f001 fba0 	bl	8018a24 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 80172e4:	8bfa      	ldrh	r2, [r7, #30]
 80172e6:	8a7b      	ldrh	r3, [r7, #18]
 80172e8:	4413      	add	r3, r2
 80172ea:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 80172ec:	68f8      	ldr	r0, [r7, #12]
 80172ee:	f7f8 fcd9 	bl	800fca4 <pbuf_free>
  while (p != NULL) {
 80172f2:	69bb      	ldr	r3, [r7, #24]
 80172f4:	2b00      	cmp	r3, #0
 80172f6:	d1dc      	bne.n	80172b2 <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 80172f8:	6839      	ldr	r1, [r7, #0]
 80172fa:	6878      	ldr	r0, [r7, #4]
 80172fc:	f000 f8c2 	bl	8017484 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 8017300:	4b10      	ldr	r3, [pc, #64]	; (8017344 <ip_reass_free_complete_datagram+0x140>)
 8017302:	881b      	ldrh	r3, [r3, #0]
 8017304:	8bfa      	ldrh	r2, [r7, #30]
 8017306:	429a      	cmp	r2, r3
 8017308:	d905      	bls.n	8017316 <ip_reass_free_complete_datagram+0x112>
 801730a:	4b09      	ldr	r3, [pc, #36]	; (8017330 <ip_reass_free_complete_datagram+0x12c>)
 801730c:	22d2      	movs	r2, #210	; 0xd2
 801730e:	490e      	ldr	r1, [pc, #56]	; (8017348 <ip_reass_free_complete_datagram+0x144>)
 8017310:	4809      	ldr	r0, [pc, #36]	; (8017338 <ip_reass_free_complete_datagram+0x134>)
 8017312:	f001 fb87 	bl	8018a24 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 8017316:	4b0b      	ldr	r3, [pc, #44]	; (8017344 <ip_reass_free_complete_datagram+0x140>)
 8017318:	881a      	ldrh	r2, [r3, #0]
 801731a:	8bfb      	ldrh	r3, [r7, #30]
 801731c:	1ad3      	subs	r3, r2, r3
 801731e:	b29a      	uxth	r2, r3
 8017320:	4b08      	ldr	r3, [pc, #32]	; (8017344 <ip_reass_free_complete_datagram+0x140>)
 8017322:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 8017324:	8bfb      	ldrh	r3, [r7, #30]
}
 8017326:	4618      	mov	r0, r3
 8017328:	3720      	adds	r7, #32
 801732a:	46bd      	mov	sp, r7
 801732c:	bd80      	pop	{r7, pc}
 801732e:	bf00      	nop
 8017330:	0801d558 	.word	0x0801d558
 8017334:	0801d594 	.word	0x0801d594
 8017338:	0801d5a0 	.word	0x0801d5a0
 801733c:	0801d5c8 	.word	0x0801d5c8
 8017340:	0801d5dc 	.word	0x0801d5dc
 8017344:	20008130 	.word	0x20008130
 8017348:	0801d5fc 	.word	0x0801d5fc

0801734c <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 801734c:	b580      	push	{r7, lr}
 801734e:	b08a      	sub	sp, #40	; 0x28
 8017350:	af00      	add	r7, sp, #0
 8017352:	6078      	str	r0, [r7, #4]
 8017354:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 8017356:	2300      	movs	r3, #0
 8017358:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 801735a:	2300      	movs	r3, #0
 801735c:	623b      	str	r3, [r7, #32]
    prev = NULL;
 801735e:	2300      	movs	r3, #0
 8017360:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 8017362:	2300      	movs	r3, #0
 8017364:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 8017366:	2300      	movs	r3, #0
 8017368:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 801736a:	4b28      	ldr	r3, [pc, #160]	; (801740c <ip_reass_remove_oldest_datagram+0xc0>)
 801736c:	681b      	ldr	r3, [r3, #0]
 801736e:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 8017370:	e030      	b.n	80173d4 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 8017372:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017374:	695a      	ldr	r2, [r3, #20]
 8017376:	687b      	ldr	r3, [r7, #4]
 8017378:	68db      	ldr	r3, [r3, #12]
 801737a:	429a      	cmp	r2, r3
 801737c:	d10c      	bne.n	8017398 <ip_reass_remove_oldest_datagram+0x4c>
 801737e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017380:	699a      	ldr	r2, [r3, #24]
 8017382:	687b      	ldr	r3, [r7, #4]
 8017384:	691b      	ldr	r3, [r3, #16]
 8017386:	429a      	cmp	r2, r3
 8017388:	d106      	bne.n	8017398 <ip_reass_remove_oldest_datagram+0x4c>
 801738a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801738c:	899a      	ldrh	r2, [r3, #12]
 801738e:	687b      	ldr	r3, [r7, #4]
 8017390:	889b      	ldrh	r3, [r3, #4]
 8017392:	b29b      	uxth	r3, r3
 8017394:	429a      	cmp	r2, r3
 8017396:	d014      	beq.n	80173c2 <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 8017398:	693b      	ldr	r3, [r7, #16]
 801739a:	3301      	adds	r3, #1
 801739c:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 801739e:	6a3b      	ldr	r3, [r7, #32]
 80173a0:	2b00      	cmp	r3, #0
 80173a2:	d104      	bne.n	80173ae <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 80173a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80173a6:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 80173a8:	69fb      	ldr	r3, [r7, #28]
 80173aa:	61bb      	str	r3, [r7, #24]
 80173ac:	e009      	b.n	80173c2 <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 80173ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80173b0:	7fda      	ldrb	r2, [r3, #31]
 80173b2:	6a3b      	ldr	r3, [r7, #32]
 80173b4:	7fdb      	ldrb	r3, [r3, #31]
 80173b6:	429a      	cmp	r2, r3
 80173b8:	d803      	bhi.n	80173c2 <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 80173ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80173bc:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 80173be:	69fb      	ldr	r3, [r7, #28]
 80173c0:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 80173c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80173c4:	681b      	ldr	r3, [r3, #0]
 80173c6:	2b00      	cmp	r3, #0
 80173c8:	d001      	beq.n	80173ce <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 80173ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80173cc:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 80173ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80173d0:	681b      	ldr	r3, [r3, #0]
 80173d2:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 80173d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80173d6:	2b00      	cmp	r3, #0
 80173d8:	d1cb      	bne.n	8017372 <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 80173da:	6a3b      	ldr	r3, [r7, #32]
 80173dc:	2b00      	cmp	r3, #0
 80173de:	d008      	beq.n	80173f2 <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 80173e0:	69b9      	ldr	r1, [r7, #24]
 80173e2:	6a38      	ldr	r0, [r7, #32]
 80173e4:	f7ff ff0e 	bl	8017204 <ip_reass_free_complete_datagram>
 80173e8:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 80173ea:	697a      	ldr	r2, [r7, #20]
 80173ec:	68fb      	ldr	r3, [r7, #12]
 80173ee:	4413      	add	r3, r2
 80173f0:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 80173f2:	697a      	ldr	r2, [r7, #20]
 80173f4:	683b      	ldr	r3, [r7, #0]
 80173f6:	429a      	cmp	r2, r3
 80173f8:	da02      	bge.n	8017400 <ip_reass_remove_oldest_datagram+0xb4>
 80173fa:	693b      	ldr	r3, [r7, #16]
 80173fc:	2b01      	cmp	r3, #1
 80173fe:	dcac      	bgt.n	801735a <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 8017400:	697b      	ldr	r3, [r7, #20]
}
 8017402:	4618      	mov	r0, r3
 8017404:	3728      	adds	r7, #40	; 0x28
 8017406:	46bd      	mov	sp, r7
 8017408:	bd80      	pop	{r7, pc}
 801740a:	bf00      	nop
 801740c:	2000812c 	.word	0x2000812c

08017410 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 8017410:	b580      	push	{r7, lr}
 8017412:	b084      	sub	sp, #16
 8017414:	af00      	add	r7, sp, #0
 8017416:	6078      	str	r0, [r7, #4]
 8017418:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 801741a:	2004      	movs	r0, #4
 801741c:	f7f7 fd7c 	bl	800ef18 <memp_malloc>
 8017420:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 8017422:	68fb      	ldr	r3, [r7, #12]
 8017424:	2b00      	cmp	r3, #0
 8017426:	d110      	bne.n	801744a <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 8017428:	6839      	ldr	r1, [r7, #0]
 801742a:	6878      	ldr	r0, [r7, #4]
 801742c:	f7ff ff8e 	bl	801734c <ip_reass_remove_oldest_datagram>
 8017430:	4602      	mov	r2, r0
 8017432:	683b      	ldr	r3, [r7, #0]
 8017434:	4293      	cmp	r3, r2
 8017436:	dc03      	bgt.n	8017440 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8017438:	2004      	movs	r0, #4
 801743a:	f7f7 fd6d 	bl	800ef18 <memp_malloc>
 801743e:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 8017440:	68fb      	ldr	r3, [r7, #12]
 8017442:	2b00      	cmp	r3, #0
 8017444:	d101      	bne.n	801744a <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 8017446:	2300      	movs	r3, #0
 8017448:	e016      	b.n	8017478 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 801744a:	2220      	movs	r2, #32
 801744c:	2100      	movs	r1, #0
 801744e:	68f8      	ldr	r0, [r7, #12]
 8017450:	f001 fc3e 	bl	8018cd0 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 8017454:	68fb      	ldr	r3, [r7, #12]
 8017456:	220f      	movs	r2, #15
 8017458:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 801745a:	4b09      	ldr	r3, [pc, #36]	; (8017480 <ip_reass_enqueue_new_datagram+0x70>)
 801745c:	681a      	ldr	r2, [r3, #0]
 801745e:	68fb      	ldr	r3, [r7, #12]
 8017460:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 8017462:	4a07      	ldr	r2, [pc, #28]	; (8017480 <ip_reass_enqueue_new_datagram+0x70>)
 8017464:	68fb      	ldr	r3, [r7, #12]
 8017466:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 8017468:	68fb      	ldr	r3, [r7, #12]
 801746a:	3308      	adds	r3, #8
 801746c:	2214      	movs	r2, #20
 801746e:	6879      	ldr	r1, [r7, #4]
 8017470:	4618      	mov	r0, r3
 8017472:	f001 fca5 	bl	8018dc0 <memcpy>
  return ipr;
 8017476:	68fb      	ldr	r3, [r7, #12]
}
 8017478:	4618      	mov	r0, r3
 801747a:	3710      	adds	r7, #16
 801747c:	46bd      	mov	sp, r7
 801747e:	bd80      	pop	{r7, pc}
 8017480:	2000812c 	.word	0x2000812c

08017484 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8017484:	b580      	push	{r7, lr}
 8017486:	b082      	sub	sp, #8
 8017488:	af00      	add	r7, sp, #0
 801748a:	6078      	str	r0, [r7, #4]
 801748c:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 801748e:	4b10      	ldr	r3, [pc, #64]	; (80174d0 <ip_reass_dequeue_datagram+0x4c>)
 8017490:	681b      	ldr	r3, [r3, #0]
 8017492:	687a      	ldr	r2, [r7, #4]
 8017494:	429a      	cmp	r2, r3
 8017496:	d104      	bne.n	80174a2 <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 8017498:	687b      	ldr	r3, [r7, #4]
 801749a:	681b      	ldr	r3, [r3, #0]
 801749c:	4a0c      	ldr	r2, [pc, #48]	; (80174d0 <ip_reass_dequeue_datagram+0x4c>)
 801749e:	6013      	str	r3, [r2, #0]
 80174a0:	e00d      	b.n	80174be <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 80174a2:	683b      	ldr	r3, [r7, #0]
 80174a4:	2b00      	cmp	r3, #0
 80174a6:	d106      	bne.n	80174b6 <ip_reass_dequeue_datagram+0x32>
 80174a8:	4b0a      	ldr	r3, [pc, #40]	; (80174d4 <ip_reass_dequeue_datagram+0x50>)
 80174aa:	f240 1245 	movw	r2, #325	; 0x145
 80174ae:	490a      	ldr	r1, [pc, #40]	; (80174d8 <ip_reass_dequeue_datagram+0x54>)
 80174b0:	480a      	ldr	r0, [pc, #40]	; (80174dc <ip_reass_dequeue_datagram+0x58>)
 80174b2:	f001 fab7 	bl	8018a24 <iprintf>
    prev->next = ipr->next;
 80174b6:	687b      	ldr	r3, [r7, #4]
 80174b8:	681a      	ldr	r2, [r3, #0]
 80174ba:	683b      	ldr	r3, [r7, #0]
 80174bc:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 80174be:	6879      	ldr	r1, [r7, #4]
 80174c0:	2004      	movs	r0, #4
 80174c2:	f7f7 fd99 	bl	800eff8 <memp_free>
}
 80174c6:	bf00      	nop
 80174c8:	3708      	adds	r7, #8
 80174ca:	46bd      	mov	sp, r7
 80174cc:	bd80      	pop	{r7, pc}
 80174ce:	bf00      	nop
 80174d0:	2000812c 	.word	0x2000812c
 80174d4:	0801d558 	.word	0x0801d558
 80174d8:	0801d620 	.word	0x0801d620
 80174dc:	0801d5a0 	.word	0x0801d5a0

080174e0 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 80174e0:	b580      	push	{r7, lr}
 80174e2:	b08c      	sub	sp, #48	; 0x30
 80174e4:	af00      	add	r7, sp, #0
 80174e6:	60f8      	str	r0, [r7, #12]
 80174e8:	60b9      	str	r1, [r7, #8]
 80174ea:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 80174ec:	2300      	movs	r3, #0
 80174ee:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 80174f0:	2301      	movs	r3, #1
 80174f2:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 80174f4:	68bb      	ldr	r3, [r7, #8]
 80174f6:	685b      	ldr	r3, [r3, #4]
 80174f8:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 80174fa:	69fb      	ldr	r3, [r7, #28]
 80174fc:	885b      	ldrh	r3, [r3, #2]
 80174fe:	b29b      	uxth	r3, r3
 8017500:	4618      	mov	r0, r3
 8017502:	f7f6 ffd9 	bl	800e4b8 <lwip_htons>
 8017506:	4603      	mov	r3, r0
 8017508:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 801750a:	69fb      	ldr	r3, [r7, #28]
 801750c:	781b      	ldrb	r3, [r3, #0]
 801750e:	f003 030f 	and.w	r3, r3, #15
 8017512:	b2db      	uxtb	r3, r3
 8017514:	009b      	lsls	r3, r3, #2
 8017516:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 8017518:	7e7b      	ldrb	r3, [r7, #25]
 801751a:	b29b      	uxth	r3, r3
 801751c:	8b7a      	ldrh	r2, [r7, #26]
 801751e:	429a      	cmp	r2, r3
 8017520:	d202      	bcs.n	8017528 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8017522:	f04f 33ff 	mov.w	r3, #4294967295
 8017526:	e135      	b.n	8017794 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 8017528:	7e7b      	ldrb	r3, [r7, #25]
 801752a:	b29b      	uxth	r3, r3
 801752c:	8b7a      	ldrh	r2, [r7, #26]
 801752e:	1ad3      	subs	r3, r2, r3
 8017530:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 8017532:	69fb      	ldr	r3, [r7, #28]
 8017534:	88db      	ldrh	r3, [r3, #6]
 8017536:	b29b      	uxth	r3, r3
 8017538:	4618      	mov	r0, r3
 801753a:	f7f6 ffbd 	bl	800e4b8 <lwip_htons>
 801753e:	4603      	mov	r3, r0
 8017540:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8017544:	b29b      	uxth	r3, r3
 8017546:	00db      	lsls	r3, r3, #3
 8017548:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 801754a:	68bb      	ldr	r3, [r7, #8]
 801754c:	685b      	ldr	r3, [r3, #4]
 801754e:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 8017550:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017552:	2200      	movs	r2, #0
 8017554:	701a      	strb	r2, [r3, #0]
 8017556:	2200      	movs	r2, #0
 8017558:	705a      	strb	r2, [r3, #1]
 801755a:	2200      	movs	r2, #0
 801755c:	709a      	strb	r2, [r3, #2]
 801755e:	2200      	movs	r2, #0
 8017560:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 8017562:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017564:	8afa      	ldrh	r2, [r7, #22]
 8017566:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 8017568:	8afa      	ldrh	r2, [r7, #22]
 801756a:	8b7b      	ldrh	r3, [r7, #26]
 801756c:	4413      	add	r3, r2
 801756e:	b29a      	uxth	r2, r3
 8017570:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017572:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 8017574:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017576:	88db      	ldrh	r3, [r3, #6]
 8017578:	b29b      	uxth	r3, r3
 801757a:	8afa      	ldrh	r2, [r7, #22]
 801757c:	429a      	cmp	r2, r3
 801757e:	d902      	bls.n	8017586 <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8017580:	f04f 33ff 	mov.w	r3, #4294967295
 8017584:	e106      	b.n	8017794 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 8017586:	68fb      	ldr	r3, [r7, #12]
 8017588:	685b      	ldr	r3, [r3, #4]
 801758a:	627b      	str	r3, [r7, #36]	; 0x24
 801758c:	e068      	b.n	8017660 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 801758e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017590:	685b      	ldr	r3, [r3, #4]
 8017592:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 8017594:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017596:	889b      	ldrh	r3, [r3, #4]
 8017598:	b29a      	uxth	r2, r3
 801759a:	693b      	ldr	r3, [r7, #16]
 801759c:	889b      	ldrh	r3, [r3, #4]
 801759e:	b29b      	uxth	r3, r3
 80175a0:	429a      	cmp	r2, r3
 80175a2:	d235      	bcs.n	8017610 <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 80175a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80175a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80175a8:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 80175aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80175ac:	2b00      	cmp	r3, #0
 80175ae:	d020      	beq.n	80175f2 <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 80175b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80175b2:	889b      	ldrh	r3, [r3, #4]
 80175b4:	b29a      	uxth	r2, r3
 80175b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80175b8:	88db      	ldrh	r3, [r3, #6]
 80175ba:	b29b      	uxth	r3, r3
 80175bc:	429a      	cmp	r2, r3
 80175be:	d307      	bcc.n	80175d0 <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 80175c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80175c2:	88db      	ldrh	r3, [r3, #6]
 80175c4:	b29a      	uxth	r2, r3
 80175c6:	693b      	ldr	r3, [r7, #16]
 80175c8:	889b      	ldrh	r3, [r3, #4]
 80175ca:	b29b      	uxth	r3, r3
 80175cc:	429a      	cmp	r2, r3
 80175ce:	d902      	bls.n	80175d6 <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 80175d0:	f04f 33ff 	mov.w	r3, #4294967295
 80175d4:	e0de      	b.n	8017794 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 80175d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80175d8:	68ba      	ldr	r2, [r7, #8]
 80175da:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 80175dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80175de:	88db      	ldrh	r3, [r3, #6]
 80175e0:	b29a      	uxth	r2, r3
 80175e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80175e4:	889b      	ldrh	r3, [r3, #4]
 80175e6:	b29b      	uxth	r3, r3
 80175e8:	429a      	cmp	r2, r3
 80175ea:	d03d      	beq.n	8017668 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 80175ec:	2300      	movs	r3, #0
 80175ee:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 80175f0:	e03a      	b.n	8017668 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 80175f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80175f4:	88db      	ldrh	r3, [r3, #6]
 80175f6:	b29a      	uxth	r2, r3
 80175f8:	693b      	ldr	r3, [r7, #16]
 80175fa:	889b      	ldrh	r3, [r3, #4]
 80175fc:	b29b      	uxth	r3, r3
 80175fe:	429a      	cmp	r2, r3
 8017600:	d902      	bls.n	8017608 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8017602:	f04f 33ff 	mov.w	r3, #4294967295
 8017606:	e0c5      	b.n	8017794 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 8017608:	68fb      	ldr	r3, [r7, #12]
 801760a:	68ba      	ldr	r2, [r7, #8]
 801760c:	605a      	str	r2, [r3, #4]
      break;
 801760e:	e02b      	b.n	8017668 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 8017610:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017612:	889b      	ldrh	r3, [r3, #4]
 8017614:	b29a      	uxth	r2, r3
 8017616:	693b      	ldr	r3, [r7, #16]
 8017618:	889b      	ldrh	r3, [r3, #4]
 801761a:	b29b      	uxth	r3, r3
 801761c:	429a      	cmp	r2, r3
 801761e:	d102      	bne.n	8017626 <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8017620:	f04f 33ff 	mov.w	r3, #4294967295
 8017624:	e0b6      	b.n	8017794 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 8017626:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017628:	889b      	ldrh	r3, [r3, #4]
 801762a:	b29a      	uxth	r2, r3
 801762c:	693b      	ldr	r3, [r7, #16]
 801762e:	88db      	ldrh	r3, [r3, #6]
 8017630:	b29b      	uxth	r3, r3
 8017632:	429a      	cmp	r2, r3
 8017634:	d202      	bcs.n	801763c <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8017636:	f04f 33ff 	mov.w	r3, #4294967295
 801763a:	e0ab      	b.n	8017794 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 801763c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801763e:	2b00      	cmp	r3, #0
 8017640:	d009      	beq.n	8017656 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 8017642:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017644:	88db      	ldrh	r3, [r3, #6]
 8017646:	b29a      	uxth	r2, r3
 8017648:	693b      	ldr	r3, [r7, #16]
 801764a:	889b      	ldrh	r3, [r3, #4]
 801764c:	b29b      	uxth	r3, r3
 801764e:	429a      	cmp	r2, r3
 8017650:	d001      	beq.n	8017656 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8017652:	2300      	movs	r3, #0
 8017654:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 8017656:	693b      	ldr	r3, [r7, #16]
 8017658:	681b      	ldr	r3, [r3, #0]
 801765a:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 801765c:	693b      	ldr	r3, [r7, #16]
 801765e:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 8017660:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017662:	2b00      	cmp	r3, #0
 8017664:	d193      	bne.n	801758e <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 8017666:	e000      	b.n	801766a <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 8017668:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 801766a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801766c:	2b00      	cmp	r3, #0
 801766e:	d12d      	bne.n	80176cc <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 8017670:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017672:	2b00      	cmp	r3, #0
 8017674:	d01c      	beq.n	80176b0 <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 8017676:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017678:	88db      	ldrh	r3, [r3, #6]
 801767a:	b29a      	uxth	r2, r3
 801767c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801767e:	889b      	ldrh	r3, [r3, #4]
 8017680:	b29b      	uxth	r3, r3
 8017682:	429a      	cmp	r2, r3
 8017684:	d906      	bls.n	8017694 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 8017686:	4b45      	ldr	r3, [pc, #276]	; (801779c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8017688:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 801768c:	4944      	ldr	r1, [pc, #272]	; (80177a0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 801768e:	4845      	ldr	r0, [pc, #276]	; (80177a4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8017690:	f001 f9c8 	bl	8018a24 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 8017694:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017696:	68ba      	ldr	r2, [r7, #8]
 8017698:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 801769a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801769c:	88db      	ldrh	r3, [r3, #6]
 801769e:	b29a      	uxth	r2, r3
 80176a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80176a2:	889b      	ldrh	r3, [r3, #4]
 80176a4:	b29b      	uxth	r3, r3
 80176a6:	429a      	cmp	r2, r3
 80176a8:	d010      	beq.n	80176cc <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 80176aa:	2300      	movs	r3, #0
 80176ac:	623b      	str	r3, [r7, #32]
 80176ae:	e00d      	b.n	80176cc <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 80176b0:	68fb      	ldr	r3, [r7, #12]
 80176b2:	685b      	ldr	r3, [r3, #4]
 80176b4:	2b00      	cmp	r3, #0
 80176b6:	d006      	beq.n	80176c6 <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 80176b8:	4b38      	ldr	r3, [pc, #224]	; (801779c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 80176ba:	f44f 72df 	mov.w	r2, #446	; 0x1be
 80176be:	493a      	ldr	r1, [pc, #232]	; (80177a8 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 80176c0:	4838      	ldr	r0, [pc, #224]	; (80177a4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80176c2:	f001 f9af 	bl	8018a24 <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 80176c6:	68fb      	ldr	r3, [r7, #12]
 80176c8:	68ba      	ldr	r2, [r7, #8]
 80176ca:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 80176cc:	687b      	ldr	r3, [r7, #4]
 80176ce:	2b00      	cmp	r3, #0
 80176d0:	d105      	bne.n	80176de <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 80176d2:	68fb      	ldr	r3, [r7, #12]
 80176d4:	7f9b      	ldrb	r3, [r3, #30]
 80176d6:	f003 0301 	and.w	r3, r3, #1
 80176da:	2b00      	cmp	r3, #0
 80176dc:	d059      	beq.n	8017792 <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 80176de:	6a3b      	ldr	r3, [r7, #32]
 80176e0:	2b00      	cmp	r3, #0
 80176e2:	d04f      	beq.n	8017784 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 80176e4:	68fb      	ldr	r3, [r7, #12]
 80176e6:	685b      	ldr	r3, [r3, #4]
 80176e8:	2b00      	cmp	r3, #0
 80176ea:	d006      	beq.n	80176fa <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 80176ec:	68fb      	ldr	r3, [r7, #12]
 80176ee:	685b      	ldr	r3, [r3, #4]
 80176f0:	685b      	ldr	r3, [r3, #4]
 80176f2:	889b      	ldrh	r3, [r3, #4]
 80176f4:	b29b      	uxth	r3, r3
 80176f6:	2b00      	cmp	r3, #0
 80176f8:	d002      	beq.n	8017700 <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 80176fa:	2300      	movs	r3, #0
 80176fc:	623b      	str	r3, [r7, #32]
 80176fe:	e041      	b.n	8017784 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 8017700:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017702:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 8017704:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017706:	681b      	ldr	r3, [r3, #0]
 8017708:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 801770a:	e012      	b.n	8017732 <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 801770c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801770e:	685b      	ldr	r3, [r3, #4]
 8017710:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 8017712:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017714:	88db      	ldrh	r3, [r3, #6]
 8017716:	b29a      	uxth	r2, r3
 8017718:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801771a:	889b      	ldrh	r3, [r3, #4]
 801771c:	b29b      	uxth	r3, r3
 801771e:	429a      	cmp	r2, r3
 8017720:	d002      	beq.n	8017728 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 8017722:	2300      	movs	r3, #0
 8017724:	623b      	str	r3, [r7, #32]
            break;
 8017726:	e007      	b.n	8017738 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 8017728:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801772a:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 801772c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801772e:	681b      	ldr	r3, [r3, #0]
 8017730:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 8017732:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017734:	2b00      	cmp	r3, #0
 8017736:	d1e9      	bne.n	801770c <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 8017738:	6a3b      	ldr	r3, [r7, #32]
 801773a:	2b00      	cmp	r3, #0
 801773c:	d022      	beq.n	8017784 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 801773e:	68fb      	ldr	r3, [r7, #12]
 8017740:	685b      	ldr	r3, [r3, #4]
 8017742:	2b00      	cmp	r3, #0
 8017744:	d106      	bne.n	8017754 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 8017746:	4b15      	ldr	r3, [pc, #84]	; (801779c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8017748:	f240 12df 	movw	r2, #479	; 0x1df
 801774c:	4917      	ldr	r1, [pc, #92]	; (80177ac <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 801774e:	4815      	ldr	r0, [pc, #84]	; (80177a4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8017750:	f001 f968 	bl	8018a24 <iprintf>
          LWIP_ASSERT("sanity check",
 8017754:	68fb      	ldr	r3, [r7, #12]
 8017756:	685b      	ldr	r3, [r3, #4]
 8017758:	685b      	ldr	r3, [r3, #4]
 801775a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801775c:	429a      	cmp	r2, r3
 801775e:	d106      	bne.n	801776e <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 8017760:	4b0e      	ldr	r3, [pc, #56]	; (801779c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8017762:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8017766:	4911      	ldr	r1, [pc, #68]	; (80177ac <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8017768:	480e      	ldr	r0, [pc, #56]	; (80177a4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801776a:	f001 f95b 	bl	8018a24 <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 801776e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017770:	681b      	ldr	r3, [r3, #0]
 8017772:	2b00      	cmp	r3, #0
 8017774:	d006      	beq.n	8017784 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 8017776:	4b09      	ldr	r3, [pc, #36]	; (801779c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8017778:	f44f 72f1 	mov.w	r2, #482	; 0x1e2
 801777c:	490c      	ldr	r1, [pc, #48]	; (80177b0 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 801777e:	4809      	ldr	r0, [pc, #36]	; (80177a4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8017780:	f001 f950 	bl	8018a24 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 8017784:	6a3b      	ldr	r3, [r7, #32]
 8017786:	2b00      	cmp	r3, #0
 8017788:	bf14      	ite	ne
 801778a:	2301      	movne	r3, #1
 801778c:	2300      	moveq	r3, #0
 801778e:	b2db      	uxtb	r3, r3
 8017790:	e000      	b.n	8017794 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 8017792:	2300      	movs	r3, #0
}
 8017794:	4618      	mov	r0, r3
 8017796:	3730      	adds	r7, #48	; 0x30
 8017798:	46bd      	mov	sp, r7
 801779a:	bd80      	pop	{r7, pc}
 801779c:	0801d558 	.word	0x0801d558
 80177a0:	0801d63c 	.word	0x0801d63c
 80177a4:	0801d5a0 	.word	0x0801d5a0
 80177a8:	0801d65c 	.word	0x0801d65c
 80177ac:	0801d694 	.word	0x0801d694
 80177b0:	0801d6a4 	.word	0x0801d6a4

080177b4 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 80177b4:	b580      	push	{r7, lr}
 80177b6:	b08e      	sub	sp, #56	; 0x38
 80177b8:	af00      	add	r7, sp, #0
 80177ba:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 80177bc:	687b      	ldr	r3, [r7, #4]
 80177be:	685b      	ldr	r3, [r3, #4]
 80177c0:	62bb      	str	r3, [r7, #40]	; 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 80177c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80177c4:	781b      	ldrb	r3, [r3, #0]
 80177c6:	f003 030f 	and.w	r3, r3, #15
 80177ca:	b2db      	uxtb	r3, r3
 80177cc:	009b      	lsls	r3, r3, #2
 80177ce:	b2db      	uxtb	r3, r3
 80177d0:	2b14      	cmp	r3, #20
 80177d2:	f040 8171 	bne.w	8017ab8 <ip4_reass+0x304>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 80177d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80177d8:	88db      	ldrh	r3, [r3, #6]
 80177da:	b29b      	uxth	r3, r3
 80177dc:	4618      	mov	r0, r3
 80177de:	f7f6 fe6b 	bl	800e4b8 <lwip_htons>
 80177e2:	4603      	mov	r3, r0
 80177e4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80177e8:	b29b      	uxth	r3, r3
 80177ea:	00db      	lsls	r3, r3, #3
 80177ec:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 80177ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80177f0:	885b      	ldrh	r3, [r3, #2]
 80177f2:	b29b      	uxth	r3, r3
 80177f4:	4618      	mov	r0, r3
 80177f6:	f7f6 fe5f 	bl	800e4b8 <lwip_htons>
 80177fa:	4603      	mov	r3, r0
 80177fc:	84bb      	strh	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 80177fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017800:	781b      	ldrb	r3, [r3, #0]
 8017802:	f003 030f 	and.w	r3, r3, #15
 8017806:	b2db      	uxtb	r3, r3
 8017808:	009b      	lsls	r3, r3, #2
 801780a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (hlen > len) {
 801780e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8017812:	b29b      	uxth	r3, r3
 8017814:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8017816:	429a      	cmp	r2, r3
 8017818:	f0c0 8150 	bcc.w	8017abc <ip4_reass+0x308>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 801781c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8017820:	b29b      	uxth	r3, r3
 8017822:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8017824:	1ad3      	subs	r3, r2, r3
 8017826:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 8017828:	6878      	ldr	r0, [r7, #4]
 801782a:	f7f8 fac3 	bl	800fdb4 <pbuf_clen>
 801782e:	4603      	mov	r3, r0
 8017830:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 8017832:	4b8c      	ldr	r3, [pc, #560]	; (8017a64 <ip4_reass+0x2b0>)
 8017834:	881b      	ldrh	r3, [r3, #0]
 8017836:	461a      	mov	r2, r3
 8017838:	8c3b      	ldrh	r3, [r7, #32]
 801783a:	4413      	add	r3, r2
 801783c:	2b0a      	cmp	r3, #10
 801783e:	dd10      	ble.n	8017862 <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8017840:	8c3b      	ldrh	r3, [r7, #32]
 8017842:	4619      	mov	r1, r3
 8017844:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8017846:	f7ff fd81 	bl	801734c <ip_reass_remove_oldest_datagram>
 801784a:	4603      	mov	r3, r0
 801784c:	2b00      	cmp	r3, #0
 801784e:	f000 8137 	beq.w	8017ac0 <ip4_reass+0x30c>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 8017852:	4b84      	ldr	r3, [pc, #528]	; (8017a64 <ip4_reass+0x2b0>)
 8017854:	881b      	ldrh	r3, [r3, #0]
 8017856:	461a      	mov	r2, r3
 8017858:	8c3b      	ldrh	r3, [r7, #32]
 801785a:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 801785c:	2b0a      	cmp	r3, #10
 801785e:	f300 812f 	bgt.w	8017ac0 <ip4_reass+0x30c>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8017862:	4b81      	ldr	r3, [pc, #516]	; (8017a68 <ip4_reass+0x2b4>)
 8017864:	681b      	ldr	r3, [r3, #0]
 8017866:	633b      	str	r3, [r7, #48]	; 0x30
 8017868:	e015      	b.n	8017896 <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 801786a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801786c:	695a      	ldr	r2, [r3, #20]
 801786e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017870:	68db      	ldr	r3, [r3, #12]
 8017872:	429a      	cmp	r2, r3
 8017874:	d10c      	bne.n	8017890 <ip4_reass+0xdc>
 8017876:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017878:	699a      	ldr	r2, [r3, #24]
 801787a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801787c:	691b      	ldr	r3, [r3, #16]
 801787e:	429a      	cmp	r2, r3
 8017880:	d106      	bne.n	8017890 <ip4_reass+0xdc>
 8017882:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017884:	899a      	ldrh	r2, [r3, #12]
 8017886:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8017888:	889b      	ldrh	r3, [r3, #4]
 801788a:	b29b      	uxth	r3, r3
 801788c:	429a      	cmp	r2, r3
 801788e:	d006      	beq.n	801789e <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8017890:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017892:	681b      	ldr	r3, [r3, #0]
 8017894:	633b      	str	r3, [r7, #48]	; 0x30
 8017896:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017898:	2b00      	cmp	r3, #0
 801789a:	d1e6      	bne.n	801786a <ip4_reass+0xb6>
 801789c:	e000      	b.n	80178a0 <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 801789e:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 80178a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80178a2:	2b00      	cmp	r3, #0
 80178a4:	d109      	bne.n	80178ba <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 80178a6:	8c3b      	ldrh	r3, [r7, #32]
 80178a8:	4619      	mov	r1, r3
 80178aa:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80178ac:	f7ff fdb0 	bl	8017410 <ip_reass_enqueue_new_datagram>
 80178b0:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 80178b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80178b4:	2b00      	cmp	r3, #0
 80178b6:	d11c      	bne.n	80178f2 <ip4_reass+0x13e>
      goto nullreturn;
 80178b8:	e105      	b.n	8017ac6 <ip4_reass+0x312>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 80178ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80178bc:	88db      	ldrh	r3, [r3, #6]
 80178be:	b29b      	uxth	r3, r3
 80178c0:	4618      	mov	r0, r3
 80178c2:	f7f6 fdf9 	bl	800e4b8 <lwip_htons>
 80178c6:	4603      	mov	r3, r0
 80178c8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80178cc:	2b00      	cmp	r3, #0
 80178ce:	d110      	bne.n	80178f2 <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 80178d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80178d2:	89db      	ldrh	r3, [r3, #14]
 80178d4:	4618      	mov	r0, r3
 80178d6:	f7f6 fdef 	bl	800e4b8 <lwip_htons>
 80178da:	4603      	mov	r3, r0
 80178dc:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 80178e0:	2b00      	cmp	r3, #0
 80178e2:	d006      	beq.n	80178f2 <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 80178e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80178e6:	3308      	adds	r3, #8
 80178e8:	2214      	movs	r2, #20
 80178ea:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80178ec:	4618      	mov	r0, r3
 80178ee:	f001 fa67 	bl	8018dc0 <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 80178f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80178f4:	88db      	ldrh	r3, [r3, #6]
 80178f6:	b29b      	uxth	r3, r3
 80178f8:	f003 0320 	and.w	r3, r3, #32
 80178fc:	2b00      	cmp	r3, #0
 80178fe:	bf0c      	ite	eq
 8017900:	2301      	moveq	r3, #1
 8017902:	2300      	movne	r3, #0
 8017904:	b2db      	uxtb	r3, r3
 8017906:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 8017908:	69fb      	ldr	r3, [r7, #28]
 801790a:	2b00      	cmp	r3, #0
 801790c:	d00e      	beq.n	801792c <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 801790e:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8017910:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8017912:	4413      	add	r3, r2
 8017914:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 8017916:	8b7a      	ldrh	r2, [r7, #26]
 8017918:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 801791a:	429a      	cmp	r2, r3
 801791c:	f0c0 80a0 	bcc.w	8017a60 <ip4_reass+0x2ac>
 8017920:	8b7b      	ldrh	r3, [r7, #26]
 8017922:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 8017926:	4293      	cmp	r3, r2
 8017928:	f200 809a 	bhi.w	8017a60 <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 801792c:	69fa      	ldr	r2, [r7, #28]
 801792e:	6879      	ldr	r1, [r7, #4]
 8017930:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8017932:	f7ff fdd5 	bl	80174e0 <ip_reass_chain_frag_into_datagram_and_validate>
 8017936:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 8017938:	697b      	ldr	r3, [r7, #20]
 801793a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801793e:	f000 809b 	beq.w	8017a78 <ip4_reass+0x2c4>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 8017942:	4b48      	ldr	r3, [pc, #288]	; (8017a64 <ip4_reass+0x2b0>)
 8017944:	881a      	ldrh	r2, [r3, #0]
 8017946:	8c3b      	ldrh	r3, [r7, #32]
 8017948:	4413      	add	r3, r2
 801794a:	b29a      	uxth	r2, r3
 801794c:	4b45      	ldr	r3, [pc, #276]	; (8017a64 <ip4_reass+0x2b0>)
 801794e:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 8017950:	69fb      	ldr	r3, [r7, #28]
 8017952:	2b00      	cmp	r3, #0
 8017954:	d00d      	beq.n	8017972 <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 8017956:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8017958:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801795a:	4413      	add	r3, r2
 801795c:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 801795e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017960:	8a7a      	ldrh	r2, [r7, #18]
 8017962:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 8017964:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017966:	7f9b      	ldrb	r3, [r3, #30]
 8017968:	f043 0301 	orr.w	r3, r3, #1
 801796c:	b2da      	uxtb	r2, r3
 801796e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017970:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 8017972:	697b      	ldr	r3, [r7, #20]
 8017974:	2b01      	cmp	r3, #1
 8017976:	d171      	bne.n	8017a5c <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 8017978:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801797a:	8b9b      	ldrh	r3, [r3, #28]
 801797c:	3314      	adds	r3, #20
 801797e:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 8017980:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017982:	685b      	ldr	r3, [r3, #4]
 8017984:	685b      	ldr	r3, [r3, #4]
 8017986:	681b      	ldr	r3, [r3, #0]
 8017988:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 801798a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801798c:	685b      	ldr	r3, [r3, #4]
 801798e:	685b      	ldr	r3, [r3, #4]
 8017990:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 8017992:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017994:	3308      	adds	r3, #8
 8017996:	2214      	movs	r2, #20
 8017998:	4619      	mov	r1, r3
 801799a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801799c:	f001 fa10 	bl	8018dc0 <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 80179a0:	8a3b      	ldrh	r3, [r7, #16]
 80179a2:	4618      	mov	r0, r3
 80179a4:	f7f6 fd88 	bl	800e4b8 <lwip_htons>
 80179a8:	4603      	mov	r3, r0
 80179aa:	461a      	mov	r2, r3
 80179ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80179ae:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 80179b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80179b2:	2200      	movs	r2, #0
 80179b4:	719a      	strb	r2, [r3, #6]
 80179b6:	2200      	movs	r2, #0
 80179b8:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 80179ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80179bc:	2200      	movs	r2, #0
 80179be:	729a      	strb	r2, [r3, #10]
 80179c0:	2200      	movs	r2, #0
 80179c2:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 80179c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80179c6:	685b      	ldr	r3, [r3, #4]
 80179c8:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 80179ca:	e00d      	b.n	80179e8 <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 80179cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80179ce:	685b      	ldr	r3, [r3, #4]
 80179d0:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 80179d2:	2114      	movs	r1, #20
 80179d4:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80179d6:	f7f8 f8df 	bl	800fb98 <pbuf_remove_header>
      pbuf_cat(p, r);
 80179da:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80179dc:	6878      	ldr	r0, [r7, #4]
 80179de:	f7f8 fa23 	bl	800fe28 <pbuf_cat>
      r = iprh->next_pbuf;
 80179e2:	68fb      	ldr	r3, [r7, #12]
 80179e4:	681b      	ldr	r3, [r3, #0]
 80179e6:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 80179e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80179ea:	2b00      	cmp	r3, #0
 80179ec:	d1ee      	bne.n	80179cc <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 80179ee:	4b1e      	ldr	r3, [pc, #120]	; (8017a68 <ip4_reass+0x2b4>)
 80179f0:	681b      	ldr	r3, [r3, #0]
 80179f2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80179f4:	429a      	cmp	r2, r3
 80179f6:	d102      	bne.n	80179fe <ip4_reass+0x24a>
      ipr_prev = NULL;
 80179f8:	2300      	movs	r3, #0
 80179fa:	62fb      	str	r3, [r7, #44]	; 0x2c
 80179fc:	e010      	b.n	8017a20 <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 80179fe:	4b1a      	ldr	r3, [pc, #104]	; (8017a68 <ip4_reass+0x2b4>)
 8017a00:	681b      	ldr	r3, [r3, #0]
 8017a02:	62fb      	str	r3, [r7, #44]	; 0x2c
 8017a04:	e007      	b.n	8017a16 <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 8017a06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017a08:	681b      	ldr	r3, [r3, #0]
 8017a0a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8017a0c:	429a      	cmp	r2, r3
 8017a0e:	d006      	beq.n	8017a1e <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 8017a10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017a12:	681b      	ldr	r3, [r3, #0]
 8017a14:	62fb      	str	r3, [r7, #44]	; 0x2c
 8017a16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017a18:	2b00      	cmp	r3, #0
 8017a1a:	d1f4      	bne.n	8017a06 <ip4_reass+0x252>
 8017a1c:	e000      	b.n	8017a20 <ip4_reass+0x26c>
          break;
 8017a1e:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 8017a20:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8017a22:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8017a24:	f7ff fd2e 	bl	8017484 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 8017a28:	6878      	ldr	r0, [r7, #4]
 8017a2a:	f7f8 f9c3 	bl	800fdb4 <pbuf_clen>
 8017a2e:	4603      	mov	r3, r0
 8017a30:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 8017a32:	4b0c      	ldr	r3, [pc, #48]	; (8017a64 <ip4_reass+0x2b0>)
 8017a34:	881b      	ldrh	r3, [r3, #0]
 8017a36:	8c3a      	ldrh	r2, [r7, #32]
 8017a38:	429a      	cmp	r2, r3
 8017a3a:	d906      	bls.n	8017a4a <ip4_reass+0x296>
 8017a3c:	4b0b      	ldr	r3, [pc, #44]	; (8017a6c <ip4_reass+0x2b8>)
 8017a3e:	f240 229b 	movw	r2, #667	; 0x29b
 8017a42:	490b      	ldr	r1, [pc, #44]	; (8017a70 <ip4_reass+0x2bc>)
 8017a44:	480b      	ldr	r0, [pc, #44]	; (8017a74 <ip4_reass+0x2c0>)
 8017a46:	f000 ffed 	bl	8018a24 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 8017a4a:	4b06      	ldr	r3, [pc, #24]	; (8017a64 <ip4_reass+0x2b0>)
 8017a4c:	881a      	ldrh	r2, [r3, #0]
 8017a4e:	8c3b      	ldrh	r3, [r7, #32]
 8017a50:	1ad3      	subs	r3, r2, r3
 8017a52:	b29a      	uxth	r2, r3
 8017a54:	4b03      	ldr	r3, [pc, #12]	; (8017a64 <ip4_reass+0x2b0>)
 8017a56:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 8017a58:	687b      	ldr	r3, [r7, #4]
 8017a5a:	e038      	b.n	8017ace <ip4_reass+0x31a>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 8017a5c:	2300      	movs	r3, #0
 8017a5e:	e036      	b.n	8017ace <ip4_reass+0x31a>
      goto nullreturn_ipr;
 8017a60:	bf00      	nop
 8017a62:	e00a      	b.n	8017a7a <ip4_reass+0x2c6>
 8017a64:	20008130 	.word	0x20008130
 8017a68:	2000812c 	.word	0x2000812c
 8017a6c:	0801d558 	.word	0x0801d558
 8017a70:	0801d6c8 	.word	0x0801d6c8
 8017a74:	0801d5a0 	.word	0x0801d5a0
    goto nullreturn_ipr;
 8017a78:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 8017a7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017a7c:	2b00      	cmp	r3, #0
 8017a7e:	d106      	bne.n	8017a8e <ip4_reass+0x2da>
 8017a80:	4b15      	ldr	r3, [pc, #84]	; (8017ad8 <ip4_reass+0x324>)
 8017a82:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 8017a86:	4915      	ldr	r1, [pc, #84]	; (8017adc <ip4_reass+0x328>)
 8017a88:	4815      	ldr	r0, [pc, #84]	; (8017ae0 <ip4_reass+0x32c>)
 8017a8a:	f000 ffcb 	bl	8018a24 <iprintf>
  if (ipr->p == NULL) {
 8017a8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017a90:	685b      	ldr	r3, [r3, #4]
 8017a92:	2b00      	cmp	r3, #0
 8017a94:	d116      	bne.n	8017ac4 <ip4_reass+0x310>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 8017a96:	4b13      	ldr	r3, [pc, #76]	; (8017ae4 <ip4_reass+0x330>)
 8017a98:	681b      	ldr	r3, [r3, #0]
 8017a9a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8017a9c:	429a      	cmp	r2, r3
 8017a9e:	d006      	beq.n	8017aae <ip4_reass+0x2fa>
 8017aa0:	4b0d      	ldr	r3, [pc, #52]	; (8017ad8 <ip4_reass+0x324>)
 8017aa2:	f240 22ab 	movw	r2, #683	; 0x2ab
 8017aa6:	4910      	ldr	r1, [pc, #64]	; (8017ae8 <ip4_reass+0x334>)
 8017aa8:	480d      	ldr	r0, [pc, #52]	; (8017ae0 <ip4_reass+0x32c>)
 8017aaa:	f000 ffbb 	bl	8018a24 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 8017aae:	2100      	movs	r1, #0
 8017ab0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8017ab2:	f7ff fce7 	bl	8017484 <ip_reass_dequeue_datagram>
 8017ab6:	e006      	b.n	8017ac6 <ip4_reass+0x312>
    goto nullreturn;
 8017ab8:	bf00      	nop
 8017aba:	e004      	b.n	8017ac6 <ip4_reass+0x312>
    goto nullreturn;
 8017abc:	bf00      	nop
 8017abe:	e002      	b.n	8017ac6 <ip4_reass+0x312>
      goto nullreturn;
 8017ac0:	bf00      	nop
 8017ac2:	e000      	b.n	8017ac6 <ip4_reass+0x312>
  }

nullreturn:
 8017ac4:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 8017ac6:	6878      	ldr	r0, [r7, #4]
 8017ac8:	f7f8 f8ec 	bl	800fca4 <pbuf_free>
  return NULL;
 8017acc:	2300      	movs	r3, #0
}
 8017ace:	4618      	mov	r0, r3
 8017ad0:	3738      	adds	r7, #56	; 0x38
 8017ad2:	46bd      	mov	sp, r7
 8017ad4:	bd80      	pop	{r7, pc}
 8017ad6:	bf00      	nop
 8017ad8:	0801d558 	.word	0x0801d558
 8017adc:	0801d6e4 	.word	0x0801d6e4
 8017ae0:	0801d5a0 	.word	0x0801d5a0
 8017ae4:	2000812c 	.word	0x2000812c
 8017ae8:	0801d6f0 	.word	0x0801d6f0

08017aec <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 8017aec:	b580      	push	{r7, lr}
 8017aee:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 8017af0:	2005      	movs	r0, #5
 8017af2:	f7f7 fa11 	bl	800ef18 <memp_malloc>
 8017af6:	4603      	mov	r3, r0
}
 8017af8:	4618      	mov	r0, r3
 8017afa:	bd80      	pop	{r7, pc}

08017afc <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 8017afc:	b580      	push	{r7, lr}
 8017afe:	b082      	sub	sp, #8
 8017b00:	af00      	add	r7, sp, #0
 8017b02:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 8017b04:	687b      	ldr	r3, [r7, #4]
 8017b06:	2b00      	cmp	r3, #0
 8017b08:	d106      	bne.n	8017b18 <ip_frag_free_pbuf_custom_ref+0x1c>
 8017b0a:	4b07      	ldr	r3, [pc, #28]	; (8017b28 <ip_frag_free_pbuf_custom_ref+0x2c>)
 8017b0c:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 8017b10:	4906      	ldr	r1, [pc, #24]	; (8017b2c <ip_frag_free_pbuf_custom_ref+0x30>)
 8017b12:	4807      	ldr	r0, [pc, #28]	; (8017b30 <ip_frag_free_pbuf_custom_ref+0x34>)
 8017b14:	f000 ff86 	bl	8018a24 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 8017b18:	6879      	ldr	r1, [r7, #4]
 8017b1a:	2005      	movs	r0, #5
 8017b1c:	f7f7 fa6c 	bl	800eff8 <memp_free>
}
 8017b20:	bf00      	nop
 8017b22:	3708      	adds	r7, #8
 8017b24:	46bd      	mov	sp, r7
 8017b26:	bd80      	pop	{r7, pc}
 8017b28:	0801d558 	.word	0x0801d558
 8017b2c:	0801d710 	.word	0x0801d710
 8017b30:	0801d5a0 	.word	0x0801d5a0

08017b34 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 8017b34:	b580      	push	{r7, lr}
 8017b36:	b084      	sub	sp, #16
 8017b38:	af00      	add	r7, sp, #0
 8017b3a:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 8017b3c:	687b      	ldr	r3, [r7, #4]
 8017b3e:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 8017b40:	68fb      	ldr	r3, [r7, #12]
 8017b42:	2b00      	cmp	r3, #0
 8017b44:	d106      	bne.n	8017b54 <ipfrag_free_pbuf_custom+0x20>
 8017b46:	4b11      	ldr	r3, [pc, #68]	; (8017b8c <ipfrag_free_pbuf_custom+0x58>)
 8017b48:	f240 22ce 	movw	r2, #718	; 0x2ce
 8017b4c:	4910      	ldr	r1, [pc, #64]	; (8017b90 <ipfrag_free_pbuf_custom+0x5c>)
 8017b4e:	4811      	ldr	r0, [pc, #68]	; (8017b94 <ipfrag_free_pbuf_custom+0x60>)
 8017b50:	f000 ff68 	bl	8018a24 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 8017b54:	68fa      	ldr	r2, [r7, #12]
 8017b56:	687b      	ldr	r3, [r7, #4]
 8017b58:	429a      	cmp	r2, r3
 8017b5a:	d006      	beq.n	8017b6a <ipfrag_free_pbuf_custom+0x36>
 8017b5c:	4b0b      	ldr	r3, [pc, #44]	; (8017b8c <ipfrag_free_pbuf_custom+0x58>)
 8017b5e:	f240 22cf 	movw	r2, #719	; 0x2cf
 8017b62:	490d      	ldr	r1, [pc, #52]	; (8017b98 <ipfrag_free_pbuf_custom+0x64>)
 8017b64:	480b      	ldr	r0, [pc, #44]	; (8017b94 <ipfrag_free_pbuf_custom+0x60>)
 8017b66:	f000 ff5d 	bl	8018a24 <iprintf>
  if (pcr->original != NULL) {
 8017b6a:	68fb      	ldr	r3, [r7, #12]
 8017b6c:	695b      	ldr	r3, [r3, #20]
 8017b6e:	2b00      	cmp	r3, #0
 8017b70:	d004      	beq.n	8017b7c <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 8017b72:	68fb      	ldr	r3, [r7, #12]
 8017b74:	695b      	ldr	r3, [r3, #20]
 8017b76:	4618      	mov	r0, r3
 8017b78:	f7f8 f894 	bl	800fca4 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 8017b7c:	68f8      	ldr	r0, [r7, #12]
 8017b7e:	f7ff ffbd 	bl	8017afc <ip_frag_free_pbuf_custom_ref>
}
 8017b82:	bf00      	nop
 8017b84:	3710      	adds	r7, #16
 8017b86:	46bd      	mov	sp, r7
 8017b88:	bd80      	pop	{r7, pc}
 8017b8a:	bf00      	nop
 8017b8c:	0801d558 	.word	0x0801d558
 8017b90:	0801d71c 	.word	0x0801d71c
 8017b94:	0801d5a0 	.word	0x0801d5a0
 8017b98:	0801d728 	.word	0x0801d728

08017b9c <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 8017b9c:	b580      	push	{r7, lr}
 8017b9e:	b094      	sub	sp, #80	; 0x50
 8017ba0:	af02      	add	r7, sp, #8
 8017ba2:	60f8      	str	r0, [r7, #12]
 8017ba4:	60b9      	str	r1, [r7, #8]
 8017ba6:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 8017ba8:	2300      	movs	r3, #0
 8017baa:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 8017bae:	68bb      	ldr	r3, [r7, #8]
 8017bb0:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8017bb2:	3b14      	subs	r3, #20
 8017bb4:	2b00      	cmp	r3, #0
 8017bb6:	da00      	bge.n	8017bba <ip4_frag+0x1e>
 8017bb8:	3307      	adds	r3, #7
 8017bba:	10db      	asrs	r3, r3, #3
 8017bbc:	877b      	strh	r3, [r7, #58]	; 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 8017bbe:	2314      	movs	r3, #20
 8017bc0:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 8017bc2:	68fb      	ldr	r3, [r7, #12]
 8017bc4:	685b      	ldr	r3, [r3, #4]
 8017bc6:	637b      	str	r3, [r7, #52]	; 0x34
  iphdr = original_iphdr;
 8017bc8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017bca:	633b      	str	r3, [r7, #48]	; 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 8017bcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017bce:	781b      	ldrb	r3, [r3, #0]
 8017bd0:	f003 030f 	and.w	r3, r3, #15
 8017bd4:	b2db      	uxtb	r3, r3
 8017bd6:	009b      	lsls	r3, r3, #2
 8017bd8:	b2db      	uxtb	r3, r3
 8017bda:	2b14      	cmp	r3, #20
 8017bdc:	d002      	beq.n	8017be4 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 8017bde:	f06f 0305 	mvn.w	r3, #5
 8017be2:	e110      	b.n	8017e06 <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 8017be4:	68fb      	ldr	r3, [r7, #12]
 8017be6:	895b      	ldrh	r3, [r3, #10]
 8017be8:	2b13      	cmp	r3, #19
 8017bea:	d809      	bhi.n	8017c00 <ip4_frag+0x64>
 8017bec:	4b88      	ldr	r3, [pc, #544]	; (8017e10 <ip4_frag+0x274>)
 8017bee:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 8017bf2:	4988      	ldr	r1, [pc, #544]	; (8017e14 <ip4_frag+0x278>)
 8017bf4:	4888      	ldr	r0, [pc, #544]	; (8017e18 <ip4_frag+0x27c>)
 8017bf6:	f000 ff15 	bl	8018a24 <iprintf>
 8017bfa:	f06f 0305 	mvn.w	r3, #5
 8017bfe:	e102      	b.n	8017e06 <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 8017c00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017c02:	88db      	ldrh	r3, [r3, #6]
 8017c04:	b29b      	uxth	r3, r3
 8017c06:	4618      	mov	r0, r3
 8017c08:	f7f6 fc56 	bl	800e4b8 <lwip_htons>
 8017c0c:	4603      	mov	r3, r0
 8017c0e:	87bb      	strh	r3, [r7, #60]	; 0x3c
  ofo = tmp & IP_OFFMASK;
 8017c10:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8017c12:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8017c16:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 8017c1a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8017c1c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8017c20:	62fb      	str	r3, [r7, #44]	; 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 8017c22:	68fb      	ldr	r3, [r7, #12]
 8017c24:	891b      	ldrh	r3, [r3, #8]
 8017c26:	3b14      	subs	r3, #20
 8017c28:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

  while (left) {
 8017c2c:	e0e1      	b.n	8017df2 <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 8017c2e:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8017c30:	00db      	lsls	r3, r3, #3
 8017c32:	b29b      	uxth	r3, r3
 8017c34:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8017c38:	4293      	cmp	r3, r2
 8017c3a:	bf28      	it	cs
 8017c3c:	4613      	movcs	r3, r2
 8017c3e:	857b      	strh	r3, [r7, #42]	; 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 8017c40:	f44f 7220 	mov.w	r2, #640	; 0x280
 8017c44:	2114      	movs	r1, #20
 8017c46:	200e      	movs	r0, #14
 8017c48:	f7f7 fd48 	bl	800f6dc <pbuf_alloc>
 8017c4c:	6278      	str	r0, [r7, #36]	; 0x24
    if (rambuf == NULL) {
 8017c4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017c50:	2b00      	cmp	r3, #0
 8017c52:	f000 80d5 	beq.w	8017e00 <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 8017c56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017c58:	895b      	ldrh	r3, [r3, #10]
 8017c5a:	2b13      	cmp	r3, #19
 8017c5c:	d806      	bhi.n	8017c6c <ip4_frag+0xd0>
 8017c5e:	4b6c      	ldr	r3, [pc, #432]	; (8017e10 <ip4_frag+0x274>)
 8017c60:	f44f 7249 	mov.w	r2, #804	; 0x324
 8017c64:	496d      	ldr	r1, [pc, #436]	; (8017e1c <ip4_frag+0x280>)
 8017c66:	486c      	ldr	r0, [pc, #432]	; (8017e18 <ip4_frag+0x27c>)
 8017c68:	f000 fedc 	bl	8018a24 <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 8017c6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017c6e:	685b      	ldr	r3, [r3, #4]
 8017c70:	2214      	movs	r2, #20
 8017c72:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8017c74:	4618      	mov	r0, r3
 8017c76:	f001 f8a3 	bl	8018dc0 <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 8017c7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017c7c:	685b      	ldr	r3, [r3, #4]
 8017c7e:	633b      	str	r3, [r7, #48]	; 0x30

    left_to_copy = fragsize;
 8017c80:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8017c82:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    while (left_to_copy) {
 8017c86:	e064      	b.n	8017d52 <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 8017c88:	68fb      	ldr	r3, [r7, #12]
 8017c8a:	895a      	ldrh	r2, [r3, #10]
 8017c8c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8017c8e:	1ad3      	subs	r3, r2, r3
 8017c90:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 8017c92:	68fb      	ldr	r3, [r7, #12]
 8017c94:	895b      	ldrh	r3, [r3, #10]
 8017c96:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8017c98:	429a      	cmp	r2, r3
 8017c9a:	d906      	bls.n	8017caa <ip4_frag+0x10e>
 8017c9c:	4b5c      	ldr	r3, [pc, #368]	; (8017e10 <ip4_frag+0x274>)
 8017c9e:	f240 322d 	movw	r2, #813	; 0x32d
 8017ca2:	495f      	ldr	r1, [pc, #380]	; (8017e20 <ip4_frag+0x284>)
 8017ca4:	485c      	ldr	r0, [pc, #368]	; (8017e18 <ip4_frag+0x27c>)
 8017ca6:	f000 febd 	bl	8018a24 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 8017caa:	8bfa      	ldrh	r2, [r7, #30]
 8017cac:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8017cb0:	4293      	cmp	r3, r2
 8017cb2:	bf28      	it	cs
 8017cb4:	4613      	movcs	r3, r2
 8017cb6:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 8017cba:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8017cbe:	2b00      	cmp	r3, #0
 8017cc0:	d105      	bne.n	8017cce <ip4_frag+0x132>
        poff = 0;
 8017cc2:	2300      	movs	r3, #0
 8017cc4:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 8017cc6:	68fb      	ldr	r3, [r7, #12]
 8017cc8:	681b      	ldr	r3, [r3, #0]
 8017cca:	60fb      	str	r3, [r7, #12]
        continue;
 8017ccc:	e041      	b.n	8017d52 <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 8017cce:	f7ff ff0d 	bl	8017aec <ip_frag_alloc_pbuf_custom_ref>
 8017cd2:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 8017cd4:	69bb      	ldr	r3, [r7, #24]
 8017cd6:	2b00      	cmp	r3, #0
 8017cd8:	d103      	bne.n	8017ce2 <ip4_frag+0x146>
        pbuf_free(rambuf);
 8017cda:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8017cdc:	f7f7 ffe2 	bl	800fca4 <pbuf_free>
        goto memerr;
 8017ce0:	e08f      	b.n	8017e02 <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8017ce2:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 8017ce4:	68fb      	ldr	r3, [r7, #12]
 8017ce6:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8017ce8:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8017cea:	4413      	add	r3, r2
 8017cec:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 8017cf0:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 8017cf4:	9201      	str	r2, [sp, #4]
 8017cf6:	9300      	str	r3, [sp, #0]
 8017cf8:	4603      	mov	r3, r0
 8017cfa:	2241      	movs	r2, #65	; 0x41
 8017cfc:	2000      	movs	r0, #0
 8017cfe:	f7f7 fe17 	bl	800f930 <pbuf_alloced_custom>
 8017d02:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 8017d04:	697b      	ldr	r3, [r7, #20]
 8017d06:	2b00      	cmp	r3, #0
 8017d08:	d106      	bne.n	8017d18 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 8017d0a:	69b8      	ldr	r0, [r7, #24]
 8017d0c:	f7ff fef6 	bl	8017afc <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 8017d10:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8017d12:	f7f7 ffc7 	bl	800fca4 <pbuf_free>
        goto memerr;
 8017d16:	e074      	b.n	8017e02 <ip4_frag+0x266>
      }
      pbuf_ref(p);
 8017d18:	68f8      	ldr	r0, [r7, #12]
 8017d1a:	f7f8 f863 	bl	800fde4 <pbuf_ref>
      pcr->original = p;
 8017d1e:	69bb      	ldr	r3, [r7, #24]
 8017d20:	68fa      	ldr	r2, [r7, #12]
 8017d22:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 8017d24:	69bb      	ldr	r3, [r7, #24]
 8017d26:	4a3f      	ldr	r2, [pc, #252]	; (8017e24 <ip4_frag+0x288>)
 8017d28:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 8017d2a:	6979      	ldr	r1, [r7, #20]
 8017d2c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8017d2e:	f7f8 f87b 	bl	800fe28 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 8017d32:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 8017d36:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8017d3a:	1ad3      	subs	r3, r2, r3
 8017d3c:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
      if (left_to_copy) {
 8017d40:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8017d44:	2b00      	cmp	r3, #0
 8017d46:	d004      	beq.n	8017d52 <ip4_frag+0x1b6>
        poff = 0;
 8017d48:	2300      	movs	r3, #0
 8017d4a:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 8017d4c:	68fb      	ldr	r3, [r7, #12]
 8017d4e:	681b      	ldr	r3, [r3, #0]
 8017d50:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 8017d52:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8017d56:	2b00      	cmp	r3, #0
 8017d58:	d196      	bne.n	8017c88 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 8017d5a:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8017d5c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8017d60:	4413      	add	r3, r2
 8017d62:	87fb      	strh	r3, [r7, #62]	; 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 8017d64:	68bb      	ldr	r3, [r7, #8]
 8017d66:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8017d68:	f1a3 0213 	sub.w	r2, r3, #19
 8017d6c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8017d70:	429a      	cmp	r2, r3
 8017d72:	bfcc      	ite	gt
 8017d74:	2301      	movgt	r3, #1
 8017d76:	2300      	movle	r3, #0
 8017d78:	b2db      	uxtb	r3, r3
 8017d7a:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 8017d7c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8017d80:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8017d84:	87bb      	strh	r3, [r7, #60]	; 0x3c
    if (!last || mf_set) {
 8017d86:	6a3b      	ldr	r3, [r7, #32]
 8017d88:	2b00      	cmp	r3, #0
 8017d8a:	d002      	beq.n	8017d92 <ip4_frag+0x1f6>
 8017d8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8017d8e:	2b00      	cmp	r3, #0
 8017d90:	d003      	beq.n	8017d9a <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 8017d92:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8017d94:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8017d98:	87bb      	strh	r3, [r7, #60]	; 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 8017d9a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8017d9c:	4618      	mov	r0, r3
 8017d9e:	f7f6 fb8b 	bl	800e4b8 <lwip_htons>
 8017da2:	4603      	mov	r3, r0
 8017da4:	461a      	mov	r2, r3
 8017da6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017da8:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 8017daa:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8017dac:	3314      	adds	r3, #20
 8017dae:	b29b      	uxth	r3, r3
 8017db0:	4618      	mov	r0, r3
 8017db2:	f7f6 fb81 	bl	800e4b8 <lwip_htons>
 8017db6:	4603      	mov	r3, r0
 8017db8:	461a      	mov	r2, r3
 8017dba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017dbc:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 8017dbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8017dc0:	2200      	movs	r2, #0
 8017dc2:	729a      	strb	r2, [r3, #10]
 8017dc4:	2200      	movs	r2, #0
 8017dc6:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 8017dc8:	68bb      	ldr	r3, [r7, #8]
 8017dca:	695b      	ldr	r3, [r3, #20]
 8017dcc:	687a      	ldr	r2, [r7, #4]
 8017dce:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8017dd0:	68b8      	ldr	r0, [r7, #8]
 8017dd2:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 8017dd4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8017dd6:	f7f7 ff65 	bl	800fca4 <pbuf_free>
    left = (u16_t)(left - fragsize);
 8017dda:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8017dde:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8017de0:	1ad3      	subs	r3, r2, r3
 8017de2:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    ofo = (u16_t)(ofo + nfb);
 8017de6:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8017dea:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8017dec:	4413      	add	r3, r2
 8017dee:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  while (left) {
 8017df2:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8017df6:	2b00      	cmp	r3, #0
 8017df8:	f47f af19 	bne.w	8017c2e <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 8017dfc:	2300      	movs	r3, #0
 8017dfe:	e002      	b.n	8017e06 <ip4_frag+0x26a>
      goto memerr;
 8017e00:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 8017e02:	f04f 33ff 	mov.w	r3, #4294967295
}
 8017e06:	4618      	mov	r0, r3
 8017e08:	3748      	adds	r7, #72	; 0x48
 8017e0a:	46bd      	mov	sp, r7
 8017e0c:	bd80      	pop	{r7, pc}
 8017e0e:	bf00      	nop
 8017e10:	0801d558 	.word	0x0801d558
 8017e14:	0801d734 	.word	0x0801d734
 8017e18:	0801d5a0 	.word	0x0801d5a0
 8017e1c:	0801d750 	.word	0x0801d750
 8017e20:	0801d770 	.word	0x0801d770
 8017e24:	08017b35 	.word	0x08017b35

08017e28 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 8017e28:	b580      	push	{r7, lr}
 8017e2a:	b086      	sub	sp, #24
 8017e2c:	af00      	add	r7, sp, #0
 8017e2e:	6078      	str	r0, [r7, #4]
 8017e30:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 8017e32:	230e      	movs	r3, #14
 8017e34:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 8017e36:	687b      	ldr	r3, [r7, #4]
 8017e38:	895b      	ldrh	r3, [r3, #10]
 8017e3a:	2b0e      	cmp	r3, #14
 8017e3c:	d96e      	bls.n	8017f1c <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 8017e3e:	687b      	ldr	r3, [r7, #4]
 8017e40:	7bdb      	ldrb	r3, [r3, #15]
 8017e42:	2b00      	cmp	r3, #0
 8017e44:	d106      	bne.n	8017e54 <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 8017e46:	683b      	ldr	r3, [r7, #0]
 8017e48:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8017e4c:	3301      	adds	r3, #1
 8017e4e:	b2da      	uxtb	r2, r3
 8017e50:	687b      	ldr	r3, [r7, #4]
 8017e52:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 8017e54:	687b      	ldr	r3, [r7, #4]
 8017e56:	685b      	ldr	r3, [r3, #4]
 8017e58:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 8017e5a:	693b      	ldr	r3, [r7, #16]
 8017e5c:	7b1a      	ldrb	r2, [r3, #12]
 8017e5e:	7b5b      	ldrb	r3, [r3, #13]
 8017e60:	021b      	lsls	r3, r3, #8
 8017e62:	4313      	orrs	r3, r2
 8017e64:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 8017e66:	693b      	ldr	r3, [r7, #16]
 8017e68:	781b      	ldrb	r3, [r3, #0]
 8017e6a:	f003 0301 	and.w	r3, r3, #1
 8017e6e:	2b00      	cmp	r3, #0
 8017e70:	d023      	beq.n	8017eba <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 8017e72:	693b      	ldr	r3, [r7, #16]
 8017e74:	781b      	ldrb	r3, [r3, #0]
 8017e76:	2b01      	cmp	r3, #1
 8017e78:	d10f      	bne.n	8017e9a <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8017e7a:	693b      	ldr	r3, [r7, #16]
 8017e7c:	785b      	ldrb	r3, [r3, #1]
 8017e7e:	2b00      	cmp	r3, #0
 8017e80:	d11b      	bne.n	8017eba <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 8017e82:	693b      	ldr	r3, [r7, #16]
 8017e84:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8017e86:	2b5e      	cmp	r3, #94	; 0x5e
 8017e88:	d117      	bne.n	8017eba <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 8017e8a:	687b      	ldr	r3, [r7, #4]
 8017e8c:	7b5b      	ldrb	r3, [r3, #13]
 8017e8e:	f043 0310 	orr.w	r3, r3, #16
 8017e92:	b2da      	uxtb	r2, r3
 8017e94:	687b      	ldr	r3, [r7, #4]
 8017e96:	735a      	strb	r2, [r3, #13]
 8017e98:	e00f      	b.n	8017eba <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 8017e9a:	693b      	ldr	r3, [r7, #16]
 8017e9c:	2206      	movs	r2, #6
 8017e9e:	4928      	ldr	r1, [pc, #160]	; (8017f40 <ethernet_input+0x118>)
 8017ea0:	4618      	mov	r0, r3
 8017ea2:	f000 ff05 	bl	8018cb0 <memcmp>
 8017ea6:	4603      	mov	r3, r0
 8017ea8:	2b00      	cmp	r3, #0
 8017eaa:	d106      	bne.n	8017eba <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 8017eac:	687b      	ldr	r3, [r7, #4]
 8017eae:	7b5b      	ldrb	r3, [r3, #13]
 8017eb0:	f043 0308 	orr.w	r3, r3, #8
 8017eb4:	b2da      	uxtb	r2, r3
 8017eb6:	687b      	ldr	r3, [r7, #4]
 8017eb8:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 8017eba:	89fb      	ldrh	r3, [r7, #14]
 8017ebc:	2b08      	cmp	r3, #8
 8017ebe:	d003      	beq.n	8017ec8 <ethernet_input+0xa0>
 8017ec0:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 8017ec4:	d014      	beq.n	8017ef0 <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 8017ec6:	e032      	b.n	8017f2e <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8017ec8:	683b      	ldr	r3, [r7, #0]
 8017eca:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8017ece:	f003 0308 	and.w	r3, r3, #8
 8017ed2:	2b00      	cmp	r3, #0
 8017ed4:	d024      	beq.n	8017f20 <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8017ed6:	8afb      	ldrh	r3, [r7, #22]
 8017ed8:	4619      	mov	r1, r3
 8017eda:	6878      	ldr	r0, [r7, #4]
 8017edc:	f7f7 fe5c 	bl	800fb98 <pbuf_remove_header>
 8017ee0:	4603      	mov	r3, r0
 8017ee2:	2b00      	cmp	r3, #0
 8017ee4:	d11e      	bne.n	8017f24 <ethernet_input+0xfc>
        ip4_input(p, netif);
 8017ee6:	6839      	ldr	r1, [r7, #0]
 8017ee8:	6878      	ldr	r0, [r7, #4]
 8017eea:	f7fe ff21 	bl	8016d30 <ip4_input>
      break;
 8017eee:	e013      	b.n	8017f18 <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8017ef0:	683b      	ldr	r3, [r7, #0]
 8017ef2:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8017ef6:	f003 0308 	and.w	r3, r3, #8
 8017efa:	2b00      	cmp	r3, #0
 8017efc:	d014      	beq.n	8017f28 <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8017efe:	8afb      	ldrh	r3, [r7, #22]
 8017f00:	4619      	mov	r1, r3
 8017f02:	6878      	ldr	r0, [r7, #4]
 8017f04:	f7f7 fe48 	bl	800fb98 <pbuf_remove_header>
 8017f08:	4603      	mov	r3, r0
 8017f0a:	2b00      	cmp	r3, #0
 8017f0c:	d10e      	bne.n	8017f2c <ethernet_input+0x104>
        etharp_input(p, netif);
 8017f0e:	6839      	ldr	r1, [r7, #0]
 8017f10:	6878      	ldr	r0, [r7, #4]
 8017f12:	f7fe f89b 	bl	801604c <etharp_input>
      break;
 8017f16:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 8017f18:	2300      	movs	r3, #0
 8017f1a:	e00c      	b.n	8017f36 <ethernet_input+0x10e>
    goto free_and_return;
 8017f1c:	bf00      	nop
 8017f1e:	e006      	b.n	8017f2e <ethernet_input+0x106>
        goto free_and_return;
 8017f20:	bf00      	nop
 8017f22:	e004      	b.n	8017f2e <ethernet_input+0x106>
        goto free_and_return;
 8017f24:	bf00      	nop
 8017f26:	e002      	b.n	8017f2e <ethernet_input+0x106>
        goto free_and_return;
 8017f28:	bf00      	nop
 8017f2a:	e000      	b.n	8017f2e <ethernet_input+0x106>
        goto free_and_return;
 8017f2c:	bf00      	nop

free_and_return:
  pbuf_free(p);
 8017f2e:	6878      	ldr	r0, [r7, #4]
 8017f30:	f7f7 feb8 	bl	800fca4 <pbuf_free>
  return ERR_OK;
 8017f34:	2300      	movs	r3, #0
}
 8017f36:	4618      	mov	r0, r3
 8017f38:	3718      	adds	r7, #24
 8017f3a:	46bd      	mov	sp, r7
 8017f3c:	bd80      	pop	{r7, pc}
 8017f3e:	bf00      	nop
 8017f40:	0801d954 	.word	0x0801d954

08017f44 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 8017f44:	b580      	push	{r7, lr}
 8017f46:	b086      	sub	sp, #24
 8017f48:	af00      	add	r7, sp, #0
 8017f4a:	60f8      	str	r0, [r7, #12]
 8017f4c:	60b9      	str	r1, [r7, #8]
 8017f4e:	607a      	str	r2, [r7, #4]
 8017f50:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 8017f52:	8c3b      	ldrh	r3, [r7, #32]
 8017f54:	4618      	mov	r0, r3
 8017f56:	f7f6 faaf 	bl	800e4b8 <lwip_htons>
 8017f5a:	4603      	mov	r3, r0
 8017f5c:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 8017f5e:	210e      	movs	r1, #14
 8017f60:	68b8      	ldr	r0, [r7, #8]
 8017f62:	f7f7 fe09 	bl	800fb78 <pbuf_add_header>
 8017f66:	4603      	mov	r3, r0
 8017f68:	2b00      	cmp	r3, #0
 8017f6a:	d125      	bne.n	8017fb8 <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 8017f6c:	68bb      	ldr	r3, [r7, #8]
 8017f6e:	685b      	ldr	r3, [r3, #4]
 8017f70:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 8017f72:	693b      	ldr	r3, [r7, #16]
 8017f74:	8afa      	ldrh	r2, [r7, #22]
 8017f76:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 8017f78:	693b      	ldr	r3, [r7, #16]
 8017f7a:	2206      	movs	r2, #6
 8017f7c:	6839      	ldr	r1, [r7, #0]
 8017f7e:	4618      	mov	r0, r3
 8017f80:	f000 ff1e 	bl	8018dc0 <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 8017f84:	693b      	ldr	r3, [r7, #16]
 8017f86:	3306      	adds	r3, #6
 8017f88:	2206      	movs	r2, #6
 8017f8a:	6879      	ldr	r1, [r7, #4]
 8017f8c:	4618      	mov	r0, r3
 8017f8e:	f000 ff17 	bl	8018dc0 <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 8017f92:	68fb      	ldr	r3, [r7, #12]
 8017f94:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8017f98:	2b06      	cmp	r3, #6
 8017f9a:	d006      	beq.n	8017faa <ethernet_output+0x66>
 8017f9c:	4b0a      	ldr	r3, [pc, #40]	; (8017fc8 <ethernet_output+0x84>)
 8017f9e:	f44f 7299 	mov.w	r2, #306	; 0x132
 8017fa2:	490a      	ldr	r1, [pc, #40]	; (8017fcc <ethernet_output+0x88>)
 8017fa4:	480a      	ldr	r0, [pc, #40]	; (8017fd0 <ethernet_output+0x8c>)
 8017fa6:	f000 fd3d 	bl	8018a24 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 8017faa:	68fb      	ldr	r3, [r7, #12]
 8017fac:	699b      	ldr	r3, [r3, #24]
 8017fae:	68b9      	ldr	r1, [r7, #8]
 8017fb0:	68f8      	ldr	r0, [r7, #12]
 8017fb2:	4798      	blx	r3
 8017fb4:	4603      	mov	r3, r0
 8017fb6:	e002      	b.n	8017fbe <ethernet_output+0x7a>
      goto pbuf_header_failed;
 8017fb8:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 8017fba:	f06f 0301 	mvn.w	r3, #1
}
 8017fbe:	4618      	mov	r0, r3
 8017fc0:	3718      	adds	r7, #24
 8017fc2:	46bd      	mov	sp, r7
 8017fc4:	bd80      	pop	{r7, pc}
 8017fc6:	bf00      	nop
 8017fc8:	0801d780 	.word	0x0801d780
 8017fcc:	0801d7b8 	.word	0x0801d7b8
 8017fd0:	0801d7ec 	.word	0x0801d7ec

08017fd4 <rand>:
 8017fd4:	4b16      	ldr	r3, [pc, #88]	; (8018030 <rand+0x5c>)
 8017fd6:	b510      	push	{r4, lr}
 8017fd8:	681c      	ldr	r4, [r3, #0]
 8017fda:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8017fdc:	b9b3      	cbnz	r3, 801800c <rand+0x38>
 8017fde:	2018      	movs	r0, #24
 8017fe0:	f001 fd5a 	bl	8019a98 <malloc>
 8017fe4:	4602      	mov	r2, r0
 8017fe6:	6320      	str	r0, [r4, #48]	; 0x30
 8017fe8:	b920      	cbnz	r0, 8017ff4 <rand+0x20>
 8017fea:	4b12      	ldr	r3, [pc, #72]	; (8018034 <rand+0x60>)
 8017fec:	4812      	ldr	r0, [pc, #72]	; (8018038 <rand+0x64>)
 8017fee:	2152      	movs	r1, #82	; 0x52
 8017ff0:	f000 fef4 	bl	8018ddc <__assert_func>
 8017ff4:	4911      	ldr	r1, [pc, #68]	; (801803c <rand+0x68>)
 8017ff6:	4b12      	ldr	r3, [pc, #72]	; (8018040 <rand+0x6c>)
 8017ff8:	e9c0 1300 	strd	r1, r3, [r0]
 8017ffc:	4b11      	ldr	r3, [pc, #68]	; (8018044 <rand+0x70>)
 8017ffe:	6083      	str	r3, [r0, #8]
 8018000:	230b      	movs	r3, #11
 8018002:	8183      	strh	r3, [r0, #12]
 8018004:	2100      	movs	r1, #0
 8018006:	2001      	movs	r0, #1
 8018008:	e9c2 0104 	strd	r0, r1, [r2, #16]
 801800c:	6b21      	ldr	r1, [r4, #48]	; 0x30
 801800e:	480e      	ldr	r0, [pc, #56]	; (8018048 <rand+0x74>)
 8018010:	690b      	ldr	r3, [r1, #16]
 8018012:	694c      	ldr	r4, [r1, #20]
 8018014:	4a0d      	ldr	r2, [pc, #52]	; (801804c <rand+0x78>)
 8018016:	4358      	muls	r0, r3
 8018018:	fb02 0004 	mla	r0, r2, r4, r0
 801801c:	fba3 3202 	umull	r3, r2, r3, r2
 8018020:	3301      	adds	r3, #1
 8018022:	eb40 0002 	adc.w	r0, r0, r2
 8018026:	e9c1 3004 	strd	r3, r0, [r1, #16]
 801802a:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 801802e:	bd10      	pop	{r4, pc}
 8018030:	200000b8 	.word	0x200000b8
 8018034:	0801d962 	.word	0x0801d962
 8018038:	0801d979 	.word	0x0801d979
 801803c:	abcd330e 	.word	0xabcd330e
 8018040:	e66d1234 	.word	0xe66d1234
 8018044:	0005deec 	.word	0x0005deec
 8018048:	5851f42d 	.word	0x5851f42d
 801804c:	4c957f2d 	.word	0x4c957f2d

08018050 <__cvt>:
 8018050:	b5f0      	push	{r4, r5, r6, r7, lr}
 8018052:	ed2d 8b02 	vpush	{d8}
 8018056:	eeb0 8b40 	vmov.f64	d8, d0
 801805a:	b085      	sub	sp, #20
 801805c:	4617      	mov	r7, r2
 801805e:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8018060:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8018062:	ee18 2a90 	vmov	r2, s17
 8018066:	f025 0520 	bic.w	r5, r5, #32
 801806a:	2a00      	cmp	r2, #0
 801806c:	bfb6      	itet	lt
 801806e:	222d      	movlt	r2, #45	; 0x2d
 8018070:	2200      	movge	r2, #0
 8018072:	eeb1 8b40 	vneglt.f64	d8, d0
 8018076:	2d46      	cmp	r5, #70	; 0x46
 8018078:	460c      	mov	r4, r1
 801807a:	701a      	strb	r2, [r3, #0]
 801807c:	d004      	beq.n	8018088 <__cvt+0x38>
 801807e:	2d45      	cmp	r5, #69	; 0x45
 8018080:	d100      	bne.n	8018084 <__cvt+0x34>
 8018082:	3401      	adds	r4, #1
 8018084:	2102      	movs	r1, #2
 8018086:	e000      	b.n	801808a <__cvt+0x3a>
 8018088:	2103      	movs	r1, #3
 801808a:	ab03      	add	r3, sp, #12
 801808c:	9301      	str	r3, [sp, #4]
 801808e:	ab02      	add	r3, sp, #8
 8018090:	9300      	str	r3, [sp, #0]
 8018092:	4622      	mov	r2, r4
 8018094:	4633      	mov	r3, r6
 8018096:	eeb0 0b48 	vmov.f64	d0, d8
 801809a:	f000 ff45 	bl	8018f28 <_dtoa_r>
 801809e:	2d47      	cmp	r5, #71	; 0x47
 80180a0:	d101      	bne.n	80180a6 <__cvt+0x56>
 80180a2:	07fb      	lsls	r3, r7, #31
 80180a4:	d51a      	bpl.n	80180dc <__cvt+0x8c>
 80180a6:	2d46      	cmp	r5, #70	; 0x46
 80180a8:	eb00 0204 	add.w	r2, r0, r4
 80180ac:	d10c      	bne.n	80180c8 <__cvt+0x78>
 80180ae:	7803      	ldrb	r3, [r0, #0]
 80180b0:	2b30      	cmp	r3, #48	; 0x30
 80180b2:	d107      	bne.n	80180c4 <__cvt+0x74>
 80180b4:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80180b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80180bc:	bf1c      	itt	ne
 80180be:	f1c4 0401 	rsbne	r4, r4, #1
 80180c2:	6034      	strne	r4, [r6, #0]
 80180c4:	6833      	ldr	r3, [r6, #0]
 80180c6:	441a      	add	r2, r3
 80180c8:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80180cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80180d0:	bf08      	it	eq
 80180d2:	9203      	streq	r2, [sp, #12]
 80180d4:	2130      	movs	r1, #48	; 0x30
 80180d6:	9b03      	ldr	r3, [sp, #12]
 80180d8:	4293      	cmp	r3, r2
 80180da:	d307      	bcc.n	80180ec <__cvt+0x9c>
 80180dc:	9b03      	ldr	r3, [sp, #12]
 80180de:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80180e0:	1a1b      	subs	r3, r3, r0
 80180e2:	6013      	str	r3, [r2, #0]
 80180e4:	b005      	add	sp, #20
 80180e6:	ecbd 8b02 	vpop	{d8}
 80180ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80180ec:	1c5c      	adds	r4, r3, #1
 80180ee:	9403      	str	r4, [sp, #12]
 80180f0:	7019      	strb	r1, [r3, #0]
 80180f2:	e7f0      	b.n	80180d6 <__cvt+0x86>

080180f4 <__exponent>:
 80180f4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80180f6:	4603      	mov	r3, r0
 80180f8:	2900      	cmp	r1, #0
 80180fa:	bfb8      	it	lt
 80180fc:	4249      	neglt	r1, r1
 80180fe:	f803 2b02 	strb.w	r2, [r3], #2
 8018102:	bfb4      	ite	lt
 8018104:	222d      	movlt	r2, #45	; 0x2d
 8018106:	222b      	movge	r2, #43	; 0x2b
 8018108:	2909      	cmp	r1, #9
 801810a:	7042      	strb	r2, [r0, #1]
 801810c:	dd2a      	ble.n	8018164 <__exponent+0x70>
 801810e:	f10d 0207 	add.w	r2, sp, #7
 8018112:	4617      	mov	r7, r2
 8018114:	260a      	movs	r6, #10
 8018116:	4694      	mov	ip, r2
 8018118:	fb91 f5f6 	sdiv	r5, r1, r6
 801811c:	fb06 1415 	mls	r4, r6, r5, r1
 8018120:	3430      	adds	r4, #48	; 0x30
 8018122:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8018126:	460c      	mov	r4, r1
 8018128:	2c63      	cmp	r4, #99	; 0x63
 801812a:	f102 32ff 	add.w	r2, r2, #4294967295
 801812e:	4629      	mov	r1, r5
 8018130:	dcf1      	bgt.n	8018116 <__exponent+0x22>
 8018132:	3130      	adds	r1, #48	; 0x30
 8018134:	f1ac 0402 	sub.w	r4, ip, #2
 8018138:	f802 1c01 	strb.w	r1, [r2, #-1]
 801813c:	1c41      	adds	r1, r0, #1
 801813e:	4622      	mov	r2, r4
 8018140:	42ba      	cmp	r2, r7
 8018142:	d30a      	bcc.n	801815a <__exponent+0x66>
 8018144:	f10d 0209 	add.w	r2, sp, #9
 8018148:	eba2 020c 	sub.w	r2, r2, ip
 801814c:	42bc      	cmp	r4, r7
 801814e:	bf88      	it	hi
 8018150:	2200      	movhi	r2, #0
 8018152:	4413      	add	r3, r2
 8018154:	1a18      	subs	r0, r3, r0
 8018156:	b003      	add	sp, #12
 8018158:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801815a:	f812 5b01 	ldrb.w	r5, [r2], #1
 801815e:	f801 5f01 	strb.w	r5, [r1, #1]!
 8018162:	e7ed      	b.n	8018140 <__exponent+0x4c>
 8018164:	2330      	movs	r3, #48	; 0x30
 8018166:	3130      	adds	r1, #48	; 0x30
 8018168:	7083      	strb	r3, [r0, #2]
 801816a:	70c1      	strb	r1, [r0, #3]
 801816c:	1d03      	adds	r3, r0, #4
 801816e:	e7f1      	b.n	8018154 <__exponent+0x60>

08018170 <_printf_float>:
 8018170:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018174:	b08b      	sub	sp, #44	; 0x2c
 8018176:	460c      	mov	r4, r1
 8018178:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 801817c:	4616      	mov	r6, r2
 801817e:	461f      	mov	r7, r3
 8018180:	4605      	mov	r5, r0
 8018182:	f000 fdad 	bl	8018ce0 <_localeconv_r>
 8018186:	f8d0 b000 	ldr.w	fp, [r0]
 801818a:	4658      	mov	r0, fp
 801818c:	f7e8 fe80 	bl	8000e90 <strlen>
 8018190:	2300      	movs	r3, #0
 8018192:	9308      	str	r3, [sp, #32]
 8018194:	f8d8 3000 	ldr.w	r3, [r8]
 8018198:	f894 9018 	ldrb.w	r9, [r4, #24]
 801819c:	6822      	ldr	r2, [r4, #0]
 801819e:	3307      	adds	r3, #7
 80181a0:	f023 0307 	bic.w	r3, r3, #7
 80181a4:	f103 0108 	add.w	r1, r3, #8
 80181a8:	f8c8 1000 	str.w	r1, [r8]
 80181ac:	ed93 0b00 	vldr	d0, [r3]
 80181b0:	ed9f 6b97 	vldr	d6, [pc, #604]	; 8018410 <_printf_float+0x2a0>
 80181b4:	eeb0 7bc0 	vabs.f64	d7, d0
 80181b8:	eeb4 7b46 	vcmp.f64	d7, d6
 80181bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80181c0:	ed84 0b12 	vstr	d0, [r4, #72]	; 0x48
 80181c4:	4682      	mov	sl, r0
 80181c6:	dd24      	ble.n	8018212 <_printf_float+0xa2>
 80181c8:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 80181cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80181d0:	d502      	bpl.n	80181d8 <_printf_float+0x68>
 80181d2:	232d      	movs	r3, #45	; 0x2d
 80181d4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80181d8:	498f      	ldr	r1, [pc, #572]	; (8018418 <_printf_float+0x2a8>)
 80181da:	4b90      	ldr	r3, [pc, #576]	; (801841c <_printf_float+0x2ac>)
 80181dc:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 80181e0:	bf94      	ite	ls
 80181e2:	4688      	movls	r8, r1
 80181e4:	4698      	movhi	r8, r3
 80181e6:	2303      	movs	r3, #3
 80181e8:	6123      	str	r3, [r4, #16]
 80181ea:	f022 0204 	bic.w	r2, r2, #4
 80181ee:	2300      	movs	r3, #0
 80181f0:	6022      	str	r2, [r4, #0]
 80181f2:	9304      	str	r3, [sp, #16]
 80181f4:	9700      	str	r7, [sp, #0]
 80181f6:	4633      	mov	r3, r6
 80181f8:	aa09      	add	r2, sp, #36	; 0x24
 80181fa:	4621      	mov	r1, r4
 80181fc:	4628      	mov	r0, r5
 80181fe:	f000 f9d1 	bl	80185a4 <_printf_common>
 8018202:	3001      	adds	r0, #1
 8018204:	f040 808a 	bne.w	801831c <_printf_float+0x1ac>
 8018208:	f04f 30ff 	mov.w	r0, #4294967295
 801820c:	b00b      	add	sp, #44	; 0x2c
 801820e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018212:	eeb4 0b40 	vcmp.f64	d0, d0
 8018216:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801821a:	d709      	bvc.n	8018230 <_printf_float+0xc0>
 801821c:	ee10 3a90 	vmov	r3, s1
 8018220:	2b00      	cmp	r3, #0
 8018222:	bfbc      	itt	lt
 8018224:	232d      	movlt	r3, #45	; 0x2d
 8018226:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 801822a:	497d      	ldr	r1, [pc, #500]	; (8018420 <_printf_float+0x2b0>)
 801822c:	4b7d      	ldr	r3, [pc, #500]	; (8018424 <_printf_float+0x2b4>)
 801822e:	e7d5      	b.n	80181dc <_printf_float+0x6c>
 8018230:	6863      	ldr	r3, [r4, #4]
 8018232:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8018236:	9104      	str	r1, [sp, #16]
 8018238:	1c59      	adds	r1, r3, #1
 801823a:	d13c      	bne.n	80182b6 <_printf_float+0x146>
 801823c:	2306      	movs	r3, #6
 801823e:	6063      	str	r3, [r4, #4]
 8018240:	2300      	movs	r3, #0
 8018242:	9303      	str	r3, [sp, #12]
 8018244:	ab08      	add	r3, sp, #32
 8018246:	e9cd 9301 	strd	r9, r3, [sp, #4]
 801824a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 801824e:	ab07      	add	r3, sp, #28
 8018250:	6861      	ldr	r1, [r4, #4]
 8018252:	9300      	str	r3, [sp, #0]
 8018254:	6022      	str	r2, [r4, #0]
 8018256:	f10d 031b 	add.w	r3, sp, #27
 801825a:	4628      	mov	r0, r5
 801825c:	f7ff fef8 	bl	8018050 <__cvt>
 8018260:	9b04      	ldr	r3, [sp, #16]
 8018262:	9907      	ldr	r1, [sp, #28]
 8018264:	2b47      	cmp	r3, #71	; 0x47
 8018266:	4680      	mov	r8, r0
 8018268:	d108      	bne.n	801827c <_printf_float+0x10c>
 801826a:	1cc8      	adds	r0, r1, #3
 801826c:	db02      	blt.n	8018274 <_printf_float+0x104>
 801826e:	6863      	ldr	r3, [r4, #4]
 8018270:	4299      	cmp	r1, r3
 8018272:	dd41      	ble.n	80182f8 <_printf_float+0x188>
 8018274:	f1a9 0902 	sub.w	r9, r9, #2
 8018278:	fa5f f989 	uxtb.w	r9, r9
 801827c:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8018280:	d820      	bhi.n	80182c4 <_printf_float+0x154>
 8018282:	3901      	subs	r1, #1
 8018284:	464a      	mov	r2, r9
 8018286:	f104 0050 	add.w	r0, r4, #80	; 0x50
 801828a:	9107      	str	r1, [sp, #28]
 801828c:	f7ff ff32 	bl	80180f4 <__exponent>
 8018290:	9a08      	ldr	r2, [sp, #32]
 8018292:	9004      	str	r0, [sp, #16]
 8018294:	1813      	adds	r3, r2, r0
 8018296:	2a01      	cmp	r2, #1
 8018298:	6123      	str	r3, [r4, #16]
 801829a:	dc02      	bgt.n	80182a2 <_printf_float+0x132>
 801829c:	6822      	ldr	r2, [r4, #0]
 801829e:	07d2      	lsls	r2, r2, #31
 80182a0:	d501      	bpl.n	80182a6 <_printf_float+0x136>
 80182a2:	3301      	adds	r3, #1
 80182a4:	6123      	str	r3, [r4, #16]
 80182a6:	f89d 301b 	ldrb.w	r3, [sp, #27]
 80182aa:	2b00      	cmp	r3, #0
 80182ac:	d0a2      	beq.n	80181f4 <_printf_float+0x84>
 80182ae:	232d      	movs	r3, #45	; 0x2d
 80182b0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80182b4:	e79e      	b.n	80181f4 <_printf_float+0x84>
 80182b6:	9904      	ldr	r1, [sp, #16]
 80182b8:	2947      	cmp	r1, #71	; 0x47
 80182ba:	d1c1      	bne.n	8018240 <_printf_float+0xd0>
 80182bc:	2b00      	cmp	r3, #0
 80182be:	d1bf      	bne.n	8018240 <_printf_float+0xd0>
 80182c0:	2301      	movs	r3, #1
 80182c2:	e7bc      	b.n	801823e <_printf_float+0xce>
 80182c4:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 80182c8:	d118      	bne.n	80182fc <_printf_float+0x18c>
 80182ca:	2900      	cmp	r1, #0
 80182cc:	6863      	ldr	r3, [r4, #4]
 80182ce:	dd0b      	ble.n	80182e8 <_printf_float+0x178>
 80182d0:	6121      	str	r1, [r4, #16]
 80182d2:	b913      	cbnz	r3, 80182da <_printf_float+0x16a>
 80182d4:	6822      	ldr	r2, [r4, #0]
 80182d6:	07d0      	lsls	r0, r2, #31
 80182d8:	d502      	bpl.n	80182e0 <_printf_float+0x170>
 80182da:	3301      	adds	r3, #1
 80182dc:	440b      	add	r3, r1
 80182de:	6123      	str	r3, [r4, #16]
 80182e0:	2300      	movs	r3, #0
 80182e2:	65a1      	str	r1, [r4, #88]	; 0x58
 80182e4:	9304      	str	r3, [sp, #16]
 80182e6:	e7de      	b.n	80182a6 <_printf_float+0x136>
 80182e8:	b913      	cbnz	r3, 80182f0 <_printf_float+0x180>
 80182ea:	6822      	ldr	r2, [r4, #0]
 80182ec:	07d2      	lsls	r2, r2, #31
 80182ee:	d501      	bpl.n	80182f4 <_printf_float+0x184>
 80182f0:	3302      	adds	r3, #2
 80182f2:	e7f4      	b.n	80182de <_printf_float+0x16e>
 80182f4:	2301      	movs	r3, #1
 80182f6:	e7f2      	b.n	80182de <_printf_float+0x16e>
 80182f8:	f04f 0967 	mov.w	r9, #103	; 0x67
 80182fc:	9b08      	ldr	r3, [sp, #32]
 80182fe:	4299      	cmp	r1, r3
 8018300:	db05      	blt.n	801830e <_printf_float+0x19e>
 8018302:	6823      	ldr	r3, [r4, #0]
 8018304:	6121      	str	r1, [r4, #16]
 8018306:	07d8      	lsls	r0, r3, #31
 8018308:	d5ea      	bpl.n	80182e0 <_printf_float+0x170>
 801830a:	1c4b      	adds	r3, r1, #1
 801830c:	e7e7      	b.n	80182de <_printf_float+0x16e>
 801830e:	2900      	cmp	r1, #0
 8018310:	bfd4      	ite	le
 8018312:	f1c1 0202 	rsble	r2, r1, #2
 8018316:	2201      	movgt	r2, #1
 8018318:	4413      	add	r3, r2
 801831a:	e7e0      	b.n	80182de <_printf_float+0x16e>
 801831c:	6823      	ldr	r3, [r4, #0]
 801831e:	055a      	lsls	r2, r3, #21
 8018320:	d407      	bmi.n	8018332 <_printf_float+0x1c2>
 8018322:	6923      	ldr	r3, [r4, #16]
 8018324:	4642      	mov	r2, r8
 8018326:	4631      	mov	r1, r6
 8018328:	4628      	mov	r0, r5
 801832a:	47b8      	blx	r7
 801832c:	3001      	adds	r0, #1
 801832e:	d12a      	bne.n	8018386 <_printf_float+0x216>
 8018330:	e76a      	b.n	8018208 <_printf_float+0x98>
 8018332:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8018336:	f240 80e0 	bls.w	80184fa <_printf_float+0x38a>
 801833a:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 801833e:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8018342:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018346:	d133      	bne.n	80183b0 <_printf_float+0x240>
 8018348:	4a37      	ldr	r2, [pc, #220]	; (8018428 <_printf_float+0x2b8>)
 801834a:	2301      	movs	r3, #1
 801834c:	4631      	mov	r1, r6
 801834e:	4628      	mov	r0, r5
 8018350:	47b8      	blx	r7
 8018352:	3001      	adds	r0, #1
 8018354:	f43f af58 	beq.w	8018208 <_printf_float+0x98>
 8018358:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 801835c:	429a      	cmp	r2, r3
 801835e:	db02      	blt.n	8018366 <_printf_float+0x1f6>
 8018360:	6823      	ldr	r3, [r4, #0]
 8018362:	07d8      	lsls	r0, r3, #31
 8018364:	d50f      	bpl.n	8018386 <_printf_float+0x216>
 8018366:	4653      	mov	r3, sl
 8018368:	465a      	mov	r2, fp
 801836a:	4631      	mov	r1, r6
 801836c:	4628      	mov	r0, r5
 801836e:	47b8      	blx	r7
 8018370:	3001      	adds	r0, #1
 8018372:	f43f af49 	beq.w	8018208 <_printf_float+0x98>
 8018376:	f04f 0800 	mov.w	r8, #0
 801837a:	f104 091a 	add.w	r9, r4, #26
 801837e:	9b08      	ldr	r3, [sp, #32]
 8018380:	3b01      	subs	r3, #1
 8018382:	4543      	cmp	r3, r8
 8018384:	dc09      	bgt.n	801839a <_printf_float+0x22a>
 8018386:	6823      	ldr	r3, [r4, #0]
 8018388:	079b      	lsls	r3, r3, #30
 801838a:	f100 8106 	bmi.w	801859a <_printf_float+0x42a>
 801838e:	68e0      	ldr	r0, [r4, #12]
 8018390:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018392:	4298      	cmp	r0, r3
 8018394:	bfb8      	it	lt
 8018396:	4618      	movlt	r0, r3
 8018398:	e738      	b.n	801820c <_printf_float+0x9c>
 801839a:	2301      	movs	r3, #1
 801839c:	464a      	mov	r2, r9
 801839e:	4631      	mov	r1, r6
 80183a0:	4628      	mov	r0, r5
 80183a2:	47b8      	blx	r7
 80183a4:	3001      	adds	r0, #1
 80183a6:	f43f af2f 	beq.w	8018208 <_printf_float+0x98>
 80183aa:	f108 0801 	add.w	r8, r8, #1
 80183ae:	e7e6      	b.n	801837e <_printf_float+0x20e>
 80183b0:	9b07      	ldr	r3, [sp, #28]
 80183b2:	2b00      	cmp	r3, #0
 80183b4:	dc3a      	bgt.n	801842c <_printf_float+0x2bc>
 80183b6:	4a1c      	ldr	r2, [pc, #112]	; (8018428 <_printf_float+0x2b8>)
 80183b8:	2301      	movs	r3, #1
 80183ba:	4631      	mov	r1, r6
 80183bc:	4628      	mov	r0, r5
 80183be:	47b8      	blx	r7
 80183c0:	3001      	adds	r0, #1
 80183c2:	f43f af21 	beq.w	8018208 <_printf_float+0x98>
 80183c6:	e9dd 3207 	ldrd	r3, r2, [sp, #28]
 80183ca:	4313      	orrs	r3, r2
 80183cc:	d102      	bne.n	80183d4 <_printf_float+0x264>
 80183ce:	6823      	ldr	r3, [r4, #0]
 80183d0:	07d9      	lsls	r1, r3, #31
 80183d2:	d5d8      	bpl.n	8018386 <_printf_float+0x216>
 80183d4:	4653      	mov	r3, sl
 80183d6:	465a      	mov	r2, fp
 80183d8:	4631      	mov	r1, r6
 80183da:	4628      	mov	r0, r5
 80183dc:	47b8      	blx	r7
 80183de:	3001      	adds	r0, #1
 80183e0:	f43f af12 	beq.w	8018208 <_printf_float+0x98>
 80183e4:	f04f 0900 	mov.w	r9, #0
 80183e8:	f104 0a1a 	add.w	sl, r4, #26
 80183ec:	9b07      	ldr	r3, [sp, #28]
 80183ee:	425b      	negs	r3, r3
 80183f0:	454b      	cmp	r3, r9
 80183f2:	dc01      	bgt.n	80183f8 <_printf_float+0x288>
 80183f4:	9b08      	ldr	r3, [sp, #32]
 80183f6:	e795      	b.n	8018324 <_printf_float+0x1b4>
 80183f8:	2301      	movs	r3, #1
 80183fa:	4652      	mov	r2, sl
 80183fc:	4631      	mov	r1, r6
 80183fe:	4628      	mov	r0, r5
 8018400:	47b8      	blx	r7
 8018402:	3001      	adds	r0, #1
 8018404:	f43f af00 	beq.w	8018208 <_printf_float+0x98>
 8018408:	f109 0901 	add.w	r9, r9, #1
 801840c:	e7ee      	b.n	80183ec <_printf_float+0x27c>
 801840e:	bf00      	nop
 8018410:	ffffffff 	.word	0xffffffff
 8018414:	7fefffff 	.word	0x7fefffff
 8018418:	0801dad2 	.word	0x0801dad2
 801841c:	0801dad6 	.word	0x0801dad6
 8018420:	0801dada 	.word	0x0801dada
 8018424:	0801dade 	.word	0x0801dade
 8018428:	0801dae2 	.word	0x0801dae2
 801842c:	9a08      	ldr	r2, [sp, #32]
 801842e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8018430:	429a      	cmp	r2, r3
 8018432:	bfa8      	it	ge
 8018434:	461a      	movge	r2, r3
 8018436:	2a00      	cmp	r2, #0
 8018438:	4691      	mov	r9, r2
 801843a:	dc38      	bgt.n	80184ae <_printf_float+0x33e>
 801843c:	2300      	movs	r3, #0
 801843e:	9305      	str	r3, [sp, #20]
 8018440:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8018444:	f104 021a 	add.w	r2, r4, #26
 8018448:	6da3      	ldr	r3, [r4, #88]	; 0x58
 801844a:	9905      	ldr	r1, [sp, #20]
 801844c:	9304      	str	r3, [sp, #16]
 801844e:	eba3 0309 	sub.w	r3, r3, r9
 8018452:	428b      	cmp	r3, r1
 8018454:	dc33      	bgt.n	80184be <_printf_float+0x34e>
 8018456:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 801845a:	429a      	cmp	r2, r3
 801845c:	db3c      	blt.n	80184d8 <_printf_float+0x368>
 801845e:	6823      	ldr	r3, [r4, #0]
 8018460:	07da      	lsls	r2, r3, #31
 8018462:	d439      	bmi.n	80184d8 <_printf_float+0x368>
 8018464:	e9dd 3207 	ldrd	r3, r2, [sp, #28]
 8018468:	eba2 0903 	sub.w	r9, r2, r3
 801846c:	9b04      	ldr	r3, [sp, #16]
 801846e:	1ad2      	subs	r2, r2, r3
 8018470:	4591      	cmp	r9, r2
 8018472:	bfa8      	it	ge
 8018474:	4691      	movge	r9, r2
 8018476:	f1b9 0f00 	cmp.w	r9, #0
 801847a:	dc35      	bgt.n	80184e8 <_printf_float+0x378>
 801847c:	f04f 0800 	mov.w	r8, #0
 8018480:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8018484:	f104 0a1a 	add.w	sl, r4, #26
 8018488:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 801848c:	1a9b      	subs	r3, r3, r2
 801848e:	eba3 0309 	sub.w	r3, r3, r9
 8018492:	4543      	cmp	r3, r8
 8018494:	f77f af77 	ble.w	8018386 <_printf_float+0x216>
 8018498:	2301      	movs	r3, #1
 801849a:	4652      	mov	r2, sl
 801849c:	4631      	mov	r1, r6
 801849e:	4628      	mov	r0, r5
 80184a0:	47b8      	blx	r7
 80184a2:	3001      	adds	r0, #1
 80184a4:	f43f aeb0 	beq.w	8018208 <_printf_float+0x98>
 80184a8:	f108 0801 	add.w	r8, r8, #1
 80184ac:	e7ec      	b.n	8018488 <_printf_float+0x318>
 80184ae:	4613      	mov	r3, r2
 80184b0:	4631      	mov	r1, r6
 80184b2:	4642      	mov	r2, r8
 80184b4:	4628      	mov	r0, r5
 80184b6:	47b8      	blx	r7
 80184b8:	3001      	adds	r0, #1
 80184ba:	d1bf      	bne.n	801843c <_printf_float+0x2cc>
 80184bc:	e6a4      	b.n	8018208 <_printf_float+0x98>
 80184be:	2301      	movs	r3, #1
 80184c0:	4631      	mov	r1, r6
 80184c2:	4628      	mov	r0, r5
 80184c4:	9204      	str	r2, [sp, #16]
 80184c6:	47b8      	blx	r7
 80184c8:	3001      	adds	r0, #1
 80184ca:	f43f ae9d 	beq.w	8018208 <_printf_float+0x98>
 80184ce:	9b05      	ldr	r3, [sp, #20]
 80184d0:	9a04      	ldr	r2, [sp, #16]
 80184d2:	3301      	adds	r3, #1
 80184d4:	9305      	str	r3, [sp, #20]
 80184d6:	e7b7      	b.n	8018448 <_printf_float+0x2d8>
 80184d8:	4653      	mov	r3, sl
 80184da:	465a      	mov	r2, fp
 80184dc:	4631      	mov	r1, r6
 80184de:	4628      	mov	r0, r5
 80184e0:	47b8      	blx	r7
 80184e2:	3001      	adds	r0, #1
 80184e4:	d1be      	bne.n	8018464 <_printf_float+0x2f4>
 80184e6:	e68f      	b.n	8018208 <_printf_float+0x98>
 80184e8:	9a04      	ldr	r2, [sp, #16]
 80184ea:	464b      	mov	r3, r9
 80184ec:	4442      	add	r2, r8
 80184ee:	4631      	mov	r1, r6
 80184f0:	4628      	mov	r0, r5
 80184f2:	47b8      	blx	r7
 80184f4:	3001      	adds	r0, #1
 80184f6:	d1c1      	bne.n	801847c <_printf_float+0x30c>
 80184f8:	e686      	b.n	8018208 <_printf_float+0x98>
 80184fa:	9a08      	ldr	r2, [sp, #32]
 80184fc:	2a01      	cmp	r2, #1
 80184fe:	dc01      	bgt.n	8018504 <_printf_float+0x394>
 8018500:	07db      	lsls	r3, r3, #31
 8018502:	d537      	bpl.n	8018574 <_printf_float+0x404>
 8018504:	2301      	movs	r3, #1
 8018506:	4642      	mov	r2, r8
 8018508:	4631      	mov	r1, r6
 801850a:	4628      	mov	r0, r5
 801850c:	47b8      	blx	r7
 801850e:	3001      	adds	r0, #1
 8018510:	f43f ae7a 	beq.w	8018208 <_printf_float+0x98>
 8018514:	4653      	mov	r3, sl
 8018516:	465a      	mov	r2, fp
 8018518:	4631      	mov	r1, r6
 801851a:	4628      	mov	r0, r5
 801851c:	47b8      	blx	r7
 801851e:	3001      	adds	r0, #1
 8018520:	f43f ae72 	beq.w	8018208 <_printf_float+0x98>
 8018524:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8018528:	eeb5 7b40 	vcmp.f64	d7, #0.0
 801852c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018530:	9b08      	ldr	r3, [sp, #32]
 8018532:	d01a      	beq.n	801856a <_printf_float+0x3fa>
 8018534:	3b01      	subs	r3, #1
 8018536:	f108 0201 	add.w	r2, r8, #1
 801853a:	4631      	mov	r1, r6
 801853c:	4628      	mov	r0, r5
 801853e:	47b8      	blx	r7
 8018540:	3001      	adds	r0, #1
 8018542:	d10e      	bne.n	8018562 <_printf_float+0x3f2>
 8018544:	e660      	b.n	8018208 <_printf_float+0x98>
 8018546:	2301      	movs	r3, #1
 8018548:	464a      	mov	r2, r9
 801854a:	4631      	mov	r1, r6
 801854c:	4628      	mov	r0, r5
 801854e:	47b8      	blx	r7
 8018550:	3001      	adds	r0, #1
 8018552:	f43f ae59 	beq.w	8018208 <_printf_float+0x98>
 8018556:	f108 0801 	add.w	r8, r8, #1
 801855a:	9b08      	ldr	r3, [sp, #32]
 801855c:	3b01      	subs	r3, #1
 801855e:	4543      	cmp	r3, r8
 8018560:	dcf1      	bgt.n	8018546 <_printf_float+0x3d6>
 8018562:	9b04      	ldr	r3, [sp, #16]
 8018564:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8018568:	e6dd      	b.n	8018326 <_printf_float+0x1b6>
 801856a:	f04f 0800 	mov.w	r8, #0
 801856e:	f104 091a 	add.w	r9, r4, #26
 8018572:	e7f2      	b.n	801855a <_printf_float+0x3ea>
 8018574:	2301      	movs	r3, #1
 8018576:	4642      	mov	r2, r8
 8018578:	e7df      	b.n	801853a <_printf_float+0x3ca>
 801857a:	2301      	movs	r3, #1
 801857c:	464a      	mov	r2, r9
 801857e:	4631      	mov	r1, r6
 8018580:	4628      	mov	r0, r5
 8018582:	47b8      	blx	r7
 8018584:	3001      	adds	r0, #1
 8018586:	f43f ae3f 	beq.w	8018208 <_printf_float+0x98>
 801858a:	f108 0801 	add.w	r8, r8, #1
 801858e:	68e3      	ldr	r3, [r4, #12]
 8018590:	9909      	ldr	r1, [sp, #36]	; 0x24
 8018592:	1a5b      	subs	r3, r3, r1
 8018594:	4543      	cmp	r3, r8
 8018596:	dcf0      	bgt.n	801857a <_printf_float+0x40a>
 8018598:	e6f9      	b.n	801838e <_printf_float+0x21e>
 801859a:	f04f 0800 	mov.w	r8, #0
 801859e:	f104 0919 	add.w	r9, r4, #25
 80185a2:	e7f4      	b.n	801858e <_printf_float+0x41e>

080185a4 <_printf_common>:
 80185a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80185a8:	4616      	mov	r6, r2
 80185aa:	4699      	mov	r9, r3
 80185ac:	688a      	ldr	r2, [r1, #8]
 80185ae:	690b      	ldr	r3, [r1, #16]
 80185b0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80185b4:	4293      	cmp	r3, r2
 80185b6:	bfb8      	it	lt
 80185b8:	4613      	movlt	r3, r2
 80185ba:	6033      	str	r3, [r6, #0]
 80185bc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80185c0:	4607      	mov	r7, r0
 80185c2:	460c      	mov	r4, r1
 80185c4:	b10a      	cbz	r2, 80185ca <_printf_common+0x26>
 80185c6:	3301      	adds	r3, #1
 80185c8:	6033      	str	r3, [r6, #0]
 80185ca:	6823      	ldr	r3, [r4, #0]
 80185cc:	0699      	lsls	r1, r3, #26
 80185ce:	bf42      	ittt	mi
 80185d0:	6833      	ldrmi	r3, [r6, #0]
 80185d2:	3302      	addmi	r3, #2
 80185d4:	6033      	strmi	r3, [r6, #0]
 80185d6:	6825      	ldr	r5, [r4, #0]
 80185d8:	f015 0506 	ands.w	r5, r5, #6
 80185dc:	d106      	bne.n	80185ec <_printf_common+0x48>
 80185de:	f104 0a19 	add.w	sl, r4, #25
 80185e2:	68e3      	ldr	r3, [r4, #12]
 80185e4:	6832      	ldr	r2, [r6, #0]
 80185e6:	1a9b      	subs	r3, r3, r2
 80185e8:	42ab      	cmp	r3, r5
 80185ea:	dc26      	bgt.n	801863a <_printf_common+0x96>
 80185ec:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80185f0:	1e13      	subs	r3, r2, #0
 80185f2:	6822      	ldr	r2, [r4, #0]
 80185f4:	bf18      	it	ne
 80185f6:	2301      	movne	r3, #1
 80185f8:	0692      	lsls	r2, r2, #26
 80185fa:	d42b      	bmi.n	8018654 <_printf_common+0xb0>
 80185fc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8018600:	4649      	mov	r1, r9
 8018602:	4638      	mov	r0, r7
 8018604:	47c0      	blx	r8
 8018606:	3001      	adds	r0, #1
 8018608:	d01e      	beq.n	8018648 <_printf_common+0xa4>
 801860a:	6823      	ldr	r3, [r4, #0]
 801860c:	6922      	ldr	r2, [r4, #16]
 801860e:	f003 0306 	and.w	r3, r3, #6
 8018612:	2b04      	cmp	r3, #4
 8018614:	bf02      	ittt	eq
 8018616:	68e5      	ldreq	r5, [r4, #12]
 8018618:	6833      	ldreq	r3, [r6, #0]
 801861a:	1aed      	subeq	r5, r5, r3
 801861c:	68a3      	ldr	r3, [r4, #8]
 801861e:	bf0c      	ite	eq
 8018620:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8018624:	2500      	movne	r5, #0
 8018626:	4293      	cmp	r3, r2
 8018628:	bfc4      	itt	gt
 801862a:	1a9b      	subgt	r3, r3, r2
 801862c:	18ed      	addgt	r5, r5, r3
 801862e:	2600      	movs	r6, #0
 8018630:	341a      	adds	r4, #26
 8018632:	42b5      	cmp	r5, r6
 8018634:	d11a      	bne.n	801866c <_printf_common+0xc8>
 8018636:	2000      	movs	r0, #0
 8018638:	e008      	b.n	801864c <_printf_common+0xa8>
 801863a:	2301      	movs	r3, #1
 801863c:	4652      	mov	r2, sl
 801863e:	4649      	mov	r1, r9
 8018640:	4638      	mov	r0, r7
 8018642:	47c0      	blx	r8
 8018644:	3001      	adds	r0, #1
 8018646:	d103      	bne.n	8018650 <_printf_common+0xac>
 8018648:	f04f 30ff 	mov.w	r0, #4294967295
 801864c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018650:	3501      	adds	r5, #1
 8018652:	e7c6      	b.n	80185e2 <_printf_common+0x3e>
 8018654:	18e1      	adds	r1, r4, r3
 8018656:	1c5a      	adds	r2, r3, #1
 8018658:	2030      	movs	r0, #48	; 0x30
 801865a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801865e:	4422      	add	r2, r4
 8018660:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8018664:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8018668:	3302      	adds	r3, #2
 801866a:	e7c7      	b.n	80185fc <_printf_common+0x58>
 801866c:	2301      	movs	r3, #1
 801866e:	4622      	mov	r2, r4
 8018670:	4649      	mov	r1, r9
 8018672:	4638      	mov	r0, r7
 8018674:	47c0      	blx	r8
 8018676:	3001      	adds	r0, #1
 8018678:	d0e6      	beq.n	8018648 <_printf_common+0xa4>
 801867a:	3601      	adds	r6, #1
 801867c:	e7d9      	b.n	8018632 <_printf_common+0x8e>
	...

08018680 <_printf_i>:
 8018680:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8018684:	7e0f      	ldrb	r7, [r1, #24]
 8018686:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8018688:	2f78      	cmp	r7, #120	; 0x78
 801868a:	4691      	mov	r9, r2
 801868c:	4680      	mov	r8, r0
 801868e:	460c      	mov	r4, r1
 8018690:	469a      	mov	sl, r3
 8018692:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8018696:	d807      	bhi.n	80186a8 <_printf_i+0x28>
 8018698:	2f62      	cmp	r7, #98	; 0x62
 801869a:	d80a      	bhi.n	80186b2 <_printf_i+0x32>
 801869c:	2f00      	cmp	r7, #0
 801869e:	f000 80d4 	beq.w	801884a <_printf_i+0x1ca>
 80186a2:	2f58      	cmp	r7, #88	; 0x58
 80186a4:	f000 80c0 	beq.w	8018828 <_printf_i+0x1a8>
 80186a8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80186ac:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80186b0:	e03a      	b.n	8018728 <_printf_i+0xa8>
 80186b2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80186b6:	2b15      	cmp	r3, #21
 80186b8:	d8f6      	bhi.n	80186a8 <_printf_i+0x28>
 80186ba:	a101      	add	r1, pc, #4	; (adr r1, 80186c0 <_printf_i+0x40>)
 80186bc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80186c0:	08018719 	.word	0x08018719
 80186c4:	0801872d 	.word	0x0801872d
 80186c8:	080186a9 	.word	0x080186a9
 80186cc:	080186a9 	.word	0x080186a9
 80186d0:	080186a9 	.word	0x080186a9
 80186d4:	080186a9 	.word	0x080186a9
 80186d8:	0801872d 	.word	0x0801872d
 80186dc:	080186a9 	.word	0x080186a9
 80186e0:	080186a9 	.word	0x080186a9
 80186e4:	080186a9 	.word	0x080186a9
 80186e8:	080186a9 	.word	0x080186a9
 80186ec:	08018831 	.word	0x08018831
 80186f0:	08018759 	.word	0x08018759
 80186f4:	080187eb 	.word	0x080187eb
 80186f8:	080186a9 	.word	0x080186a9
 80186fc:	080186a9 	.word	0x080186a9
 8018700:	08018853 	.word	0x08018853
 8018704:	080186a9 	.word	0x080186a9
 8018708:	08018759 	.word	0x08018759
 801870c:	080186a9 	.word	0x080186a9
 8018710:	080186a9 	.word	0x080186a9
 8018714:	080187f3 	.word	0x080187f3
 8018718:	682b      	ldr	r3, [r5, #0]
 801871a:	1d1a      	adds	r2, r3, #4
 801871c:	681b      	ldr	r3, [r3, #0]
 801871e:	602a      	str	r2, [r5, #0]
 8018720:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8018724:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8018728:	2301      	movs	r3, #1
 801872a:	e09f      	b.n	801886c <_printf_i+0x1ec>
 801872c:	6820      	ldr	r0, [r4, #0]
 801872e:	682b      	ldr	r3, [r5, #0]
 8018730:	0607      	lsls	r7, r0, #24
 8018732:	f103 0104 	add.w	r1, r3, #4
 8018736:	6029      	str	r1, [r5, #0]
 8018738:	d501      	bpl.n	801873e <_printf_i+0xbe>
 801873a:	681e      	ldr	r6, [r3, #0]
 801873c:	e003      	b.n	8018746 <_printf_i+0xc6>
 801873e:	0646      	lsls	r6, r0, #25
 8018740:	d5fb      	bpl.n	801873a <_printf_i+0xba>
 8018742:	f9b3 6000 	ldrsh.w	r6, [r3]
 8018746:	2e00      	cmp	r6, #0
 8018748:	da03      	bge.n	8018752 <_printf_i+0xd2>
 801874a:	232d      	movs	r3, #45	; 0x2d
 801874c:	4276      	negs	r6, r6
 801874e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8018752:	485a      	ldr	r0, [pc, #360]	; (80188bc <_printf_i+0x23c>)
 8018754:	230a      	movs	r3, #10
 8018756:	e012      	b.n	801877e <_printf_i+0xfe>
 8018758:	682b      	ldr	r3, [r5, #0]
 801875a:	6820      	ldr	r0, [r4, #0]
 801875c:	1d19      	adds	r1, r3, #4
 801875e:	6029      	str	r1, [r5, #0]
 8018760:	0605      	lsls	r5, r0, #24
 8018762:	d501      	bpl.n	8018768 <_printf_i+0xe8>
 8018764:	681e      	ldr	r6, [r3, #0]
 8018766:	e002      	b.n	801876e <_printf_i+0xee>
 8018768:	0641      	lsls	r1, r0, #25
 801876a:	d5fb      	bpl.n	8018764 <_printf_i+0xe4>
 801876c:	881e      	ldrh	r6, [r3, #0]
 801876e:	4853      	ldr	r0, [pc, #332]	; (80188bc <_printf_i+0x23c>)
 8018770:	2f6f      	cmp	r7, #111	; 0x6f
 8018772:	bf0c      	ite	eq
 8018774:	2308      	moveq	r3, #8
 8018776:	230a      	movne	r3, #10
 8018778:	2100      	movs	r1, #0
 801877a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801877e:	6865      	ldr	r5, [r4, #4]
 8018780:	60a5      	str	r5, [r4, #8]
 8018782:	2d00      	cmp	r5, #0
 8018784:	bfa2      	ittt	ge
 8018786:	6821      	ldrge	r1, [r4, #0]
 8018788:	f021 0104 	bicge.w	r1, r1, #4
 801878c:	6021      	strge	r1, [r4, #0]
 801878e:	b90e      	cbnz	r6, 8018794 <_printf_i+0x114>
 8018790:	2d00      	cmp	r5, #0
 8018792:	d04b      	beq.n	801882c <_printf_i+0x1ac>
 8018794:	4615      	mov	r5, r2
 8018796:	fbb6 f1f3 	udiv	r1, r6, r3
 801879a:	fb03 6711 	mls	r7, r3, r1, r6
 801879e:	5dc7      	ldrb	r7, [r0, r7]
 80187a0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80187a4:	4637      	mov	r7, r6
 80187a6:	42bb      	cmp	r3, r7
 80187a8:	460e      	mov	r6, r1
 80187aa:	d9f4      	bls.n	8018796 <_printf_i+0x116>
 80187ac:	2b08      	cmp	r3, #8
 80187ae:	d10b      	bne.n	80187c8 <_printf_i+0x148>
 80187b0:	6823      	ldr	r3, [r4, #0]
 80187b2:	07de      	lsls	r6, r3, #31
 80187b4:	d508      	bpl.n	80187c8 <_printf_i+0x148>
 80187b6:	6923      	ldr	r3, [r4, #16]
 80187b8:	6861      	ldr	r1, [r4, #4]
 80187ba:	4299      	cmp	r1, r3
 80187bc:	bfde      	ittt	le
 80187be:	2330      	movle	r3, #48	; 0x30
 80187c0:	f805 3c01 	strble.w	r3, [r5, #-1]
 80187c4:	f105 35ff 	addle.w	r5, r5, #4294967295
 80187c8:	1b52      	subs	r2, r2, r5
 80187ca:	6122      	str	r2, [r4, #16]
 80187cc:	f8cd a000 	str.w	sl, [sp]
 80187d0:	464b      	mov	r3, r9
 80187d2:	aa03      	add	r2, sp, #12
 80187d4:	4621      	mov	r1, r4
 80187d6:	4640      	mov	r0, r8
 80187d8:	f7ff fee4 	bl	80185a4 <_printf_common>
 80187dc:	3001      	adds	r0, #1
 80187de:	d14a      	bne.n	8018876 <_printf_i+0x1f6>
 80187e0:	f04f 30ff 	mov.w	r0, #4294967295
 80187e4:	b004      	add	sp, #16
 80187e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80187ea:	6823      	ldr	r3, [r4, #0]
 80187ec:	f043 0320 	orr.w	r3, r3, #32
 80187f0:	6023      	str	r3, [r4, #0]
 80187f2:	4833      	ldr	r0, [pc, #204]	; (80188c0 <_printf_i+0x240>)
 80187f4:	2778      	movs	r7, #120	; 0x78
 80187f6:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80187fa:	6823      	ldr	r3, [r4, #0]
 80187fc:	6829      	ldr	r1, [r5, #0]
 80187fe:	061f      	lsls	r7, r3, #24
 8018800:	f851 6b04 	ldr.w	r6, [r1], #4
 8018804:	d402      	bmi.n	801880c <_printf_i+0x18c>
 8018806:	065f      	lsls	r7, r3, #25
 8018808:	bf48      	it	mi
 801880a:	b2b6      	uxthmi	r6, r6
 801880c:	07df      	lsls	r7, r3, #31
 801880e:	bf48      	it	mi
 8018810:	f043 0320 	orrmi.w	r3, r3, #32
 8018814:	6029      	str	r1, [r5, #0]
 8018816:	bf48      	it	mi
 8018818:	6023      	strmi	r3, [r4, #0]
 801881a:	b91e      	cbnz	r6, 8018824 <_printf_i+0x1a4>
 801881c:	6823      	ldr	r3, [r4, #0]
 801881e:	f023 0320 	bic.w	r3, r3, #32
 8018822:	6023      	str	r3, [r4, #0]
 8018824:	2310      	movs	r3, #16
 8018826:	e7a7      	b.n	8018778 <_printf_i+0xf8>
 8018828:	4824      	ldr	r0, [pc, #144]	; (80188bc <_printf_i+0x23c>)
 801882a:	e7e4      	b.n	80187f6 <_printf_i+0x176>
 801882c:	4615      	mov	r5, r2
 801882e:	e7bd      	b.n	80187ac <_printf_i+0x12c>
 8018830:	682b      	ldr	r3, [r5, #0]
 8018832:	6826      	ldr	r6, [r4, #0]
 8018834:	6961      	ldr	r1, [r4, #20]
 8018836:	1d18      	adds	r0, r3, #4
 8018838:	6028      	str	r0, [r5, #0]
 801883a:	0635      	lsls	r5, r6, #24
 801883c:	681b      	ldr	r3, [r3, #0]
 801883e:	d501      	bpl.n	8018844 <_printf_i+0x1c4>
 8018840:	6019      	str	r1, [r3, #0]
 8018842:	e002      	b.n	801884a <_printf_i+0x1ca>
 8018844:	0670      	lsls	r0, r6, #25
 8018846:	d5fb      	bpl.n	8018840 <_printf_i+0x1c0>
 8018848:	8019      	strh	r1, [r3, #0]
 801884a:	2300      	movs	r3, #0
 801884c:	6123      	str	r3, [r4, #16]
 801884e:	4615      	mov	r5, r2
 8018850:	e7bc      	b.n	80187cc <_printf_i+0x14c>
 8018852:	682b      	ldr	r3, [r5, #0]
 8018854:	1d1a      	adds	r2, r3, #4
 8018856:	602a      	str	r2, [r5, #0]
 8018858:	681d      	ldr	r5, [r3, #0]
 801885a:	6862      	ldr	r2, [r4, #4]
 801885c:	2100      	movs	r1, #0
 801885e:	4628      	mov	r0, r5
 8018860:	f7e8 fac6 	bl	8000df0 <memchr>
 8018864:	b108      	cbz	r0, 801886a <_printf_i+0x1ea>
 8018866:	1b40      	subs	r0, r0, r5
 8018868:	6060      	str	r0, [r4, #4]
 801886a:	6863      	ldr	r3, [r4, #4]
 801886c:	6123      	str	r3, [r4, #16]
 801886e:	2300      	movs	r3, #0
 8018870:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8018874:	e7aa      	b.n	80187cc <_printf_i+0x14c>
 8018876:	6923      	ldr	r3, [r4, #16]
 8018878:	462a      	mov	r2, r5
 801887a:	4649      	mov	r1, r9
 801887c:	4640      	mov	r0, r8
 801887e:	47d0      	blx	sl
 8018880:	3001      	adds	r0, #1
 8018882:	d0ad      	beq.n	80187e0 <_printf_i+0x160>
 8018884:	6823      	ldr	r3, [r4, #0]
 8018886:	079b      	lsls	r3, r3, #30
 8018888:	d413      	bmi.n	80188b2 <_printf_i+0x232>
 801888a:	68e0      	ldr	r0, [r4, #12]
 801888c:	9b03      	ldr	r3, [sp, #12]
 801888e:	4298      	cmp	r0, r3
 8018890:	bfb8      	it	lt
 8018892:	4618      	movlt	r0, r3
 8018894:	e7a6      	b.n	80187e4 <_printf_i+0x164>
 8018896:	2301      	movs	r3, #1
 8018898:	4632      	mov	r2, r6
 801889a:	4649      	mov	r1, r9
 801889c:	4640      	mov	r0, r8
 801889e:	47d0      	blx	sl
 80188a0:	3001      	adds	r0, #1
 80188a2:	d09d      	beq.n	80187e0 <_printf_i+0x160>
 80188a4:	3501      	adds	r5, #1
 80188a6:	68e3      	ldr	r3, [r4, #12]
 80188a8:	9903      	ldr	r1, [sp, #12]
 80188aa:	1a5b      	subs	r3, r3, r1
 80188ac:	42ab      	cmp	r3, r5
 80188ae:	dcf2      	bgt.n	8018896 <_printf_i+0x216>
 80188b0:	e7eb      	b.n	801888a <_printf_i+0x20a>
 80188b2:	2500      	movs	r5, #0
 80188b4:	f104 0619 	add.w	r6, r4, #25
 80188b8:	e7f5      	b.n	80188a6 <_printf_i+0x226>
 80188ba:	bf00      	nop
 80188bc:	0801dae4 	.word	0x0801dae4
 80188c0:	0801daf5 	.word	0x0801daf5

080188c4 <std>:
 80188c4:	2300      	movs	r3, #0
 80188c6:	b510      	push	{r4, lr}
 80188c8:	4604      	mov	r4, r0
 80188ca:	e9c0 3300 	strd	r3, r3, [r0]
 80188ce:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80188d2:	6083      	str	r3, [r0, #8]
 80188d4:	8181      	strh	r1, [r0, #12]
 80188d6:	6643      	str	r3, [r0, #100]	; 0x64
 80188d8:	81c2      	strh	r2, [r0, #14]
 80188da:	6183      	str	r3, [r0, #24]
 80188dc:	4619      	mov	r1, r3
 80188de:	2208      	movs	r2, #8
 80188e0:	305c      	adds	r0, #92	; 0x5c
 80188e2:	f000 f9f5 	bl	8018cd0 <memset>
 80188e6:	4b05      	ldr	r3, [pc, #20]	; (80188fc <std+0x38>)
 80188e8:	6263      	str	r3, [r4, #36]	; 0x24
 80188ea:	4b05      	ldr	r3, [pc, #20]	; (8018900 <std+0x3c>)
 80188ec:	62a3      	str	r3, [r4, #40]	; 0x28
 80188ee:	4b05      	ldr	r3, [pc, #20]	; (8018904 <std+0x40>)
 80188f0:	62e3      	str	r3, [r4, #44]	; 0x2c
 80188f2:	4b05      	ldr	r3, [pc, #20]	; (8018908 <std+0x44>)
 80188f4:	6224      	str	r4, [r4, #32]
 80188f6:	6323      	str	r3, [r4, #48]	; 0x30
 80188f8:	bd10      	pop	{r4, pc}
 80188fa:	bf00      	nop
 80188fc:	08018b01 	.word	0x08018b01
 8018900:	08018b23 	.word	0x08018b23
 8018904:	08018b5b 	.word	0x08018b5b
 8018908:	08018b7f 	.word	0x08018b7f

0801890c <stdio_exit_handler>:
 801890c:	4a02      	ldr	r2, [pc, #8]	; (8018918 <stdio_exit_handler+0xc>)
 801890e:	4903      	ldr	r1, [pc, #12]	; (801891c <stdio_exit_handler+0x10>)
 8018910:	4803      	ldr	r0, [pc, #12]	; (8018920 <stdio_exit_handler+0x14>)
 8018912:	f000 b869 	b.w	80189e8 <_fwalk_sglue>
 8018916:	bf00      	nop
 8018918:	20000060 	.word	0x20000060
 801891c:	0801a68d 	.word	0x0801a68d
 8018920:	2000006c 	.word	0x2000006c

08018924 <cleanup_stdio>:
 8018924:	6841      	ldr	r1, [r0, #4]
 8018926:	4b0c      	ldr	r3, [pc, #48]	; (8018958 <cleanup_stdio+0x34>)
 8018928:	4299      	cmp	r1, r3
 801892a:	b510      	push	{r4, lr}
 801892c:	4604      	mov	r4, r0
 801892e:	d001      	beq.n	8018934 <cleanup_stdio+0x10>
 8018930:	f001 feac 	bl	801a68c <_fflush_r>
 8018934:	68a1      	ldr	r1, [r4, #8]
 8018936:	4b09      	ldr	r3, [pc, #36]	; (801895c <cleanup_stdio+0x38>)
 8018938:	4299      	cmp	r1, r3
 801893a:	d002      	beq.n	8018942 <cleanup_stdio+0x1e>
 801893c:	4620      	mov	r0, r4
 801893e:	f001 fea5 	bl	801a68c <_fflush_r>
 8018942:	68e1      	ldr	r1, [r4, #12]
 8018944:	4b06      	ldr	r3, [pc, #24]	; (8018960 <cleanup_stdio+0x3c>)
 8018946:	4299      	cmp	r1, r3
 8018948:	d004      	beq.n	8018954 <cleanup_stdio+0x30>
 801894a:	4620      	mov	r0, r4
 801894c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8018950:	f001 be9c 	b.w	801a68c <_fflush_r>
 8018954:	bd10      	pop	{r4, pc}
 8018956:	bf00      	nop
 8018958:	20008134 	.word	0x20008134
 801895c:	2000819c 	.word	0x2000819c
 8018960:	20008204 	.word	0x20008204

08018964 <global_stdio_init.part.0>:
 8018964:	b510      	push	{r4, lr}
 8018966:	4b0b      	ldr	r3, [pc, #44]	; (8018994 <global_stdio_init.part.0+0x30>)
 8018968:	4c0b      	ldr	r4, [pc, #44]	; (8018998 <global_stdio_init.part.0+0x34>)
 801896a:	4a0c      	ldr	r2, [pc, #48]	; (801899c <global_stdio_init.part.0+0x38>)
 801896c:	601a      	str	r2, [r3, #0]
 801896e:	4620      	mov	r0, r4
 8018970:	2200      	movs	r2, #0
 8018972:	2104      	movs	r1, #4
 8018974:	f7ff ffa6 	bl	80188c4 <std>
 8018978:	f104 0068 	add.w	r0, r4, #104	; 0x68
 801897c:	2201      	movs	r2, #1
 801897e:	2109      	movs	r1, #9
 8018980:	f7ff ffa0 	bl	80188c4 <std>
 8018984:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8018988:	2202      	movs	r2, #2
 801898a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801898e:	2112      	movs	r1, #18
 8018990:	f7ff bf98 	b.w	80188c4 <std>
 8018994:	2000826c 	.word	0x2000826c
 8018998:	20008134 	.word	0x20008134
 801899c:	0801890d 	.word	0x0801890d

080189a0 <__sfp_lock_acquire>:
 80189a0:	4801      	ldr	r0, [pc, #4]	; (80189a8 <__sfp_lock_acquire+0x8>)
 80189a2:	f000 ba0b 	b.w	8018dbc <__retarget_lock_acquire_recursive>
 80189a6:	bf00      	nop
 80189a8:	20008275 	.word	0x20008275

080189ac <__sfp_lock_release>:
 80189ac:	4801      	ldr	r0, [pc, #4]	; (80189b4 <__sfp_lock_release+0x8>)
 80189ae:	f000 ba06 	b.w	8018dbe <__retarget_lock_release_recursive>
 80189b2:	bf00      	nop
 80189b4:	20008275 	.word	0x20008275

080189b8 <__sinit>:
 80189b8:	b510      	push	{r4, lr}
 80189ba:	4604      	mov	r4, r0
 80189bc:	f7ff fff0 	bl	80189a0 <__sfp_lock_acquire>
 80189c0:	6a23      	ldr	r3, [r4, #32]
 80189c2:	b11b      	cbz	r3, 80189cc <__sinit+0x14>
 80189c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80189c8:	f7ff bff0 	b.w	80189ac <__sfp_lock_release>
 80189cc:	4b04      	ldr	r3, [pc, #16]	; (80189e0 <__sinit+0x28>)
 80189ce:	6223      	str	r3, [r4, #32]
 80189d0:	4b04      	ldr	r3, [pc, #16]	; (80189e4 <__sinit+0x2c>)
 80189d2:	681b      	ldr	r3, [r3, #0]
 80189d4:	2b00      	cmp	r3, #0
 80189d6:	d1f5      	bne.n	80189c4 <__sinit+0xc>
 80189d8:	f7ff ffc4 	bl	8018964 <global_stdio_init.part.0>
 80189dc:	e7f2      	b.n	80189c4 <__sinit+0xc>
 80189de:	bf00      	nop
 80189e0:	08018925 	.word	0x08018925
 80189e4:	2000826c 	.word	0x2000826c

080189e8 <_fwalk_sglue>:
 80189e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80189ec:	4607      	mov	r7, r0
 80189ee:	4688      	mov	r8, r1
 80189f0:	4614      	mov	r4, r2
 80189f2:	2600      	movs	r6, #0
 80189f4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80189f8:	f1b9 0901 	subs.w	r9, r9, #1
 80189fc:	d505      	bpl.n	8018a0a <_fwalk_sglue+0x22>
 80189fe:	6824      	ldr	r4, [r4, #0]
 8018a00:	2c00      	cmp	r4, #0
 8018a02:	d1f7      	bne.n	80189f4 <_fwalk_sglue+0xc>
 8018a04:	4630      	mov	r0, r6
 8018a06:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8018a0a:	89ab      	ldrh	r3, [r5, #12]
 8018a0c:	2b01      	cmp	r3, #1
 8018a0e:	d907      	bls.n	8018a20 <_fwalk_sglue+0x38>
 8018a10:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8018a14:	3301      	adds	r3, #1
 8018a16:	d003      	beq.n	8018a20 <_fwalk_sglue+0x38>
 8018a18:	4629      	mov	r1, r5
 8018a1a:	4638      	mov	r0, r7
 8018a1c:	47c0      	blx	r8
 8018a1e:	4306      	orrs	r6, r0
 8018a20:	3568      	adds	r5, #104	; 0x68
 8018a22:	e7e9      	b.n	80189f8 <_fwalk_sglue+0x10>

08018a24 <iprintf>:
 8018a24:	b40f      	push	{r0, r1, r2, r3}
 8018a26:	b507      	push	{r0, r1, r2, lr}
 8018a28:	4906      	ldr	r1, [pc, #24]	; (8018a44 <iprintf+0x20>)
 8018a2a:	ab04      	add	r3, sp, #16
 8018a2c:	6808      	ldr	r0, [r1, #0]
 8018a2e:	f853 2b04 	ldr.w	r2, [r3], #4
 8018a32:	6881      	ldr	r1, [r0, #8]
 8018a34:	9301      	str	r3, [sp, #4]
 8018a36:	f001 fc89 	bl	801a34c <_vfiprintf_r>
 8018a3a:	b003      	add	sp, #12
 8018a3c:	f85d eb04 	ldr.w	lr, [sp], #4
 8018a40:	b004      	add	sp, #16
 8018a42:	4770      	bx	lr
 8018a44:	200000b8 	.word	0x200000b8

08018a48 <_puts_r>:
 8018a48:	6a03      	ldr	r3, [r0, #32]
 8018a4a:	b570      	push	{r4, r5, r6, lr}
 8018a4c:	6884      	ldr	r4, [r0, #8]
 8018a4e:	4605      	mov	r5, r0
 8018a50:	460e      	mov	r6, r1
 8018a52:	b90b      	cbnz	r3, 8018a58 <_puts_r+0x10>
 8018a54:	f7ff ffb0 	bl	80189b8 <__sinit>
 8018a58:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8018a5a:	07db      	lsls	r3, r3, #31
 8018a5c:	d405      	bmi.n	8018a6a <_puts_r+0x22>
 8018a5e:	89a3      	ldrh	r3, [r4, #12]
 8018a60:	0598      	lsls	r0, r3, #22
 8018a62:	d402      	bmi.n	8018a6a <_puts_r+0x22>
 8018a64:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8018a66:	f000 f9a9 	bl	8018dbc <__retarget_lock_acquire_recursive>
 8018a6a:	89a3      	ldrh	r3, [r4, #12]
 8018a6c:	0719      	lsls	r1, r3, #28
 8018a6e:	d513      	bpl.n	8018a98 <_puts_r+0x50>
 8018a70:	6923      	ldr	r3, [r4, #16]
 8018a72:	b18b      	cbz	r3, 8018a98 <_puts_r+0x50>
 8018a74:	3e01      	subs	r6, #1
 8018a76:	68a3      	ldr	r3, [r4, #8]
 8018a78:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8018a7c:	3b01      	subs	r3, #1
 8018a7e:	60a3      	str	r3, [r4, #8]
 8018a80:	b9e9      	cbnz	r1, 8018abe <_puts_r+0x76>
 8018a82:	2b00      	cmp	r3, #0
 8018a84:	da2e      	bge.n	8018ae4 <_puts_r+0x9c>
 8018a86:	4622      	mov	r2, r4
 8018a88:	210a      	movs	r1, #10
 8018a8a:	4628      	mov	r0, r5
 8018a8c:	f000 f87b 	bl	8018b86 <__swbuf_r>
 8018a90:	3001      	adds	r0, #1
 8018a92:	d007      	beq.n	8018aa4 <_puts_r+0x5c>
 8018a94:	250a      	movs	r5, #10
 8018a96:	e007      	b.n	8018aa8 <_puts_r+0x60>
 8018a98:	4621      	mov	r1, r4
 8018a9a:	4628      	mov	r0, r5
 8018a9c:	f000 f8b0 	bl	8018c00 <__swsetup_r>
 8018aa0:	2800      	cmp	r0, #0
 8018aa2:	d0e7      	beq.n	8018a74 <_puts_r+0x2c>
 8018aa4:	f04f 35ff 	mov.w	r5, #4294967295
 8018aa8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8018aaa:	07da      	lsls	r2, r3, #31
 8018aac:	d405      	bmi.n	8018aba <_puts_r+0x72>
 8018aae:	89a3      	ldrh	r3, [r4, #12]
 8018ab0:	059b      	lsls	r3, r3, #22
 8018ab2:	d402      	bmi.n	8018aba <_puts_r+0x72>
 8018ab4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8018ab6:	f000 f982 	bl	8018dbe <__retarget_lock_release_recursive>
 8018aba:	4628      	mov	r0, r5
 8018abc:	bd70      	pop	{r4, r5, r6, pc}
 8018abe:	2b00      	cmp	r3, #0
 8018ac0:	da04      	bge.n	8018acc <_puts_r+0x84>
 8018ac2:	69a2      	ldr	r2, [r4, #24]
 8018ac4:	429a      	cmp	r2, r3
 8018ac6:	dc06      	bgt.n	8018ad6 <_puts_r+0x8e>
 8018ac8:	290a      	cmp	r1, #10
 8018aca:	d004      	beq.n	8018ad6 <_puts_r+0x8e>
 8018acc:	6823      	ldr	r3, [r4, #0]
 8018ace:	1c5a      	adds	r2, r3, #1
 8018ad0:	6022      	str	r2, [r4, #0]
 8018ad2:	7019      	strb	r1, [r3, #0]
 8018ad4:	e7cf      	b.n	8018a76 <_puts_r+0x2e>
 8018ad6:	4622      	mov	r2, r4
 8018ad8:	4628      	mov	r0, r5
 8018ada:	f000 f854 	bl	8018b86 <__swbuf_r>
 8018ade:	3001      	adds	r0, #1
 8018ae0:	d1c9      	bne.n	8018a76 <_puts_r+0x2e>
 8018ae2:	e7df      	b.n	8018aa4 <_puts_r+0x5c>
 8018ae4:	6823      	ldr	r3, [r4, #0]
 8018ae6:	250a      	movs	r5, #10
 8018ae8:	1c5a      	adds	r2, r3, #1
 8018aea:	6022      	str	r2, [r4, #0]
 8018aec:	701d      	strb	r5, [r3, #0]
 8018aee:	e7db      	b.n	8018aa8 <_puts_r+0x60>

08018af0 <puts>:
 8018af0:	4b02      	ldr	r3, [pc, #8]	; (8018afc <puts+0xc>)
 8018af2:	4601      	mov	r1, r0
 8018af4:	6818      	ldr	r0, [r3, #0]
 8018af6:	f7ff bfa7 	b.w	8018a48 <_puts_r>
 8018afa:	bf00      	nop
 8018afc:	200000b8 	.word	0x200000b8

08018b00 <__sread>:
 8018b00:	b510      	push	{r4, lr}
 8018b02:	460c      	mov	r4, r1
 8018b04:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8018b08:	f000 f910 	bl	8018d2c <_read_r>
 8018b0c:	2800      	cmp	r0, #0
 8018b0e:	bfab      	itete	ge
 8018b10:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8018b12:	89a3      	ldrhlt	r3, [r4, #12]
 8018b14:	181b      	addge	r3, r3, r0
 8018b16:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8018b1a:	bfac      	ite	ge
 8018b1c:	6563      	strge	r3, [r4, #84]	; 0x54
 8018b1e:	81a3      	strhlt	r3, [r4, #12]
 8018b20:	bd10      	pop	{r4, pc}

08018b22 <__swrite>:
 8018b22:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018b26:	461f      	mov	r7, r3
 8018b28:	898b      	ldrh	r3, [r1, #12]
 8018b2a:	05db      	lsls	r3, r3, #23
 8018b2c:	4605      	mov	r5, r0
 8018b2e:	460c      	mov	r4, r1
 8018b30:	4616      	mov	r6, r2
 8018b32:	d505      	bpl.n	8018b40 <__swrite+0x1e>
 8018b34:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8018b38:	2302      	movs	r3, #2
 8018b3a:	2200      	movs	r2, #0
 8018b3c:	f000 f8e4 	bl	8018d08 <_lseek_r>
 8018b40:	89a3      	ldrh	r3, [r4, #12]
 8018b42:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8018b46:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8018b4a:	81a3      	strh	r3, [r4, #12]
 8018b4c:	4632      	mov	r2, r6
 8018b4e:	463b      	mov	r3, r7
 8018b50:	4628      	mov	r0, r5
 8018b52:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8018b56:	f000 b8fb 	b.w	8018d50 <_write_r>

08018b5a <__sseek>:
 8018b5a:	b510      	push	{r4, lr}
 8018b5c:	460c      	mov	r4, r1
 8018b5e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8018b62:	f000 f8d1 	bl	8018d08 <_lseek_r>
 8018b66:	1c43      	adds	r3, r0, #1
 8018b68:	89a3      	ldrh	r3, [r4, #12]
 8018b6a:	bf15      	itete	ne
 8018b6c:	6560      	strne	r0, [r4, #84]	; 0x54
 8018b6e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8018b72:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8018b76:	81a3      	strheq	r3, [r4, #12]
 8018b78:	bf18      	it	ne
 8018b7a:	81a3      	strhne	r3, [r4, #12]
 8018b7c:	bd10      	pop	{r4, pc}

08018b7e <__sclose>:
 8018b7e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8018b82:	f000 b8b1 	b.w	8018ce8 <_close_r>

08018b86 <__swbuf_r>:
 8018b86:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018b88:	460e      	mov	r6, r1
 8018b8a:	4614      	mov	r4, r2
 8018b8c:	4605      	mov	r5, r0
 8018b8e:	b118      	cbz	r0, 8018b98 <__swbuf_r+0x12>
 8018b90:	6a03      	ldr	r3, [r0, #32]
 8018b92:	b90b      	cbnz	r3, 8018b98 <__swbuf_r+0x12>
 8018b94:	f7ff ff10 	bl	80189b8 <__sinit>
 8018b98:	69a3      	ldr	r3, [r4, #24]
 8018b9a:	60a3      	str	r3, [r4, #8]
 8018b9c:	89a3      	ldrh	r3, [r4, #12]
 8018b9e:	071a      	lsls	r2, r3, #28
 8018ba0:	d525      	bpl.n	8018bee <__swbuf_r+0x68>
 8018ba2:	6923      	ldr	r3, [r4, #16]
 8018ba4:	b31b      	cbz	r3, 8018bee <__swbuf_r+0x68>
 8018ba6:	6823      	ldr	r3, [r4, #0]
 8018ba8:	6922      	ldr	r2, [r4, #16]
 8018baa:	1a98      	subs	r0, r3, r2
 8018bac:	6963      	ldr	r3, [r4, #20]
 8018bae:	b2f6      	uxtb	r6, r6
 8018bb0:	4283      	cmp	r3, r0
 8018bb2:	4637      	mov	r7, r6
 8018bb4:	dc04      	bgt.n	8018bc0 <__swbuf_r+0x3a>
 8018bb6:	4621      	mov	r1, r4
 8018bb8:	4628      	mov	r0, r5
 8018bba:	f001 fd67 	bl	801a68c <_fflush_r>
 8018bbe:	b9e0      	cbnz	r0, 8018bfa <__swbuf_r+0x74>
 8018bc0:	68a3      	ldr	r3, [r4, #8]
 8018bc2:	3b01      	subs	r3, #1
 8018bc4:	60a3      	str	r3, [r4, #8]
 8018bc6:	6823      	ldr	r3, [r4, #0]
 8018bc8:	1c5a      	adds	r2, r3, #1
 8018bca:	6022      	str	r2, [r4, #0]
 8018bcc:	701e      	strb	r6, [r3, #0]
 8018bce:	6962      	ldr	r2, [r4, #20]
 8018bd0:	1c43      	adds	r3, r0, #1
 8018bd2:	429a      	cmp	r2, r3
 8018bd4:	d004      	beq.n	8018be0 <__swbuf_r+0x5a>
 8018bd6:	89a3      	ldrh	r3, [r4, #12]
 8018bd8:	07db      	lsls	r3, r3, #31
 8018bda:	d506      	bpl.n	8018bea <__swbuf_r+0x64>
 8018bdc:	2e0a      	cmp	r6, #10
 8018bde:	d104      	bne.n	8018bea <__swbuf_r+0x64>
 8018be0:	4621      	mov	r1, r4
 8018be2:	4628      	mov	r0, r5
 8018be4:	f001 fd52 	bl	801a68c <_fflush_r>
 8018be8:	b938      	cbnz	r0, 8018bfa <__swbuf_r+0x74>
 8018bea:	4638      	mov	r0, r7
 8018bec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8018bee:	4621      	mov	r1, r4
 8018bf0:	4628      	mov	r0, r5
 8018bf2:	f000 f805 	bl	8018c00 <__swsetup_r>
 8018bf6:	2800      	cmp	r0, #0
 8018bf8:	d0d5      	beq.n	8018ba6 <__swbuf_r+0x20>
 8018bfa:	f04f 37ff 	mov.w	r7, #4294967295
 8018bfe:	e7f4      	b.n	8018bea <__swbuf_r+0x64>

08018c00 <__swsetup_r>:
 8018c00:	b538      	push	{r3, r4, r5, lr}
 8018c02:	4b2a      	ldr	r3, [pc, #168]	; (8018cac <__swsetup_r+0xac>)
 8018c04:	4605      	mov	r5, r0
 8018c06:	6818      	ldr	r0, [r3, #0]
 8018c08:	460c      	mov	r4, r1
 8018c0a:	b118      	cbz	r0, 8018c14 <__swsetup_r+0x14>
 8018c0c:	6a03      	ldr	r3, [r0, #32]
 8018c0e:	b90b      	cbnz	r3, 8018c14 <__swsetup_r+0x14>
 8018c10:	f7ff fed2 	bl	80189b8 <__sinit>
 8018c14:	89a3      	ldrh	r3, [r4, #12]
 8018c16:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8018c1a:	0718      	lsls	r0, r3, #28
 8018c1c:	d422      	bmi.n	8018c64 <__swsetup_r+0x64>
 8018c1e:	06d9      	lsls	r1, r3, #27
 8018c20:	d407      	bmi.n	8018c32 <__swsetup_r+0x32>
 8018c22:	2309      	movs	r3, #9
 8018c24:	602b      	str	r3, [r5, #0]
 8018c26:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8018c2a:	81a3      	strh	r3, [r4, #12]
 8018c2c:	f04f 30ff 	mov.w	r0, #4294967295
 8018c30:	e034      	b.n	8018c9c <__swsetup_r+0x9c>
 8018c32:	0758      	lsls	r0, r3, #29
 8018c34:	d512      	bpl.n	8018c5c <__swsetup_r+0x5c>
 8018c36:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8018c38:	b141      	cbz	r1, 8018c4c <__swsetup_r+0x4c>
 8018c3a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8018c3e:	4299      	cmp	r1, r3
 8018c40:	d002      	beq.n	8018c48 <__swsetup_r+0x48>
 8018c42:	4628      	mov	r0, r5
 8018c44:	f000 fedc 	bl	8019a00 <_free_r>
 8018c48:	2300      	movs	r3, #0
 8018c4a:	6363      	str	r3, [r4, #52]	; 0x34
 8018c4c:	89a3      	ldrh	r3, [r4, #12]
 8018c4e:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8018c52:	81a3      	strh	r3, [r4, #12]
 8018c54:	2300      	movs	r3, #0
 8018c56:	6063      	str	r3, [r4, #4]
 8018c58:	6923      	ldr	r3, [r4, #16]
 8018c5a:	6023      	str	r3, [r4, #0]
 8018c5c:	89a3      	ldrh	r3, [r4, #12]
 8018c5e:	f043 0308 	orr.w	r3, r3, #8
 8018c62:	81a3      	strh	r3, [r4, #12]
 8018c64:	6923      	ldr	r3, [r4, #16]
 8018c66:	b94b      	cbnz	r3, 8018c7c <__swsetup_r+0x7c>
 8018c68:	89a3      	ldrh	r3, [r4, #12]
 8018c6a:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8018c6e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8018c72:	d003      	beq.n	8018c7c <__swsetup_r+0x7c>
 8018c74:	4621      	mov	r1, r4
 8018c76:	4628      	mov	r0, r5
 8018c78:	f001 fd68 	bl	801a74c <__smakebuf_r>
 8018c7c:	89a0      	ldrh	r0, [r4, #12]
 8018c7e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8018c82:	f010 0301 	ands.w	r3, r0, #1
 8018c86:	d00a      	beq.n	8018c9e <__swsetup_r+0x9e>
 8018c88:	2300      	movs	r3, #0
 8018c8a:	60a3      	str	r3, [r4, #8]
 8018c8c:	6963      	ldr	r3, [r4, #20]
 8018c8e:	425b      	negs	r3, r3
 8018c90:	61a3      	str	r3, [r4, #24]
 8018c92:	6923      	ldr	r3, [r4, #16]
 8018c94:	b943      	cbnz	r3, 8018ca8 <__swsetup_r+0xa8>
 8018c96:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8018c9a:	d1c4      	bne.n	8018c26 <__swsetup_r+0x26>
 8018c9c:	bd38      	pop	{r3, r4, r5, pc}
 8018c9e:	0781      	lsls	r1, r0, #30
 8018ca0:	bf58      	it	pl
 8018ca2:	6963      	ldrpl	r3, [r4, #20]
 8018ca4:	60a3      	str	r3, [r4, #8]
 8018ca6:	e7f4      	b.n	8018c92 <__swsetup_r+0x92>
 8018ca8:	2000      	movs	r0, #0
 8018caa:	e7f7      	b.n	8018c9c <__swsetup_r+0x9c>
 8018cac:	200000b8 	.word	0x200000b8

08018cb0 <memcmp>:
 8018cb0:	b510      	push	{r4, lr}
 8018cb2:	3901      	subs	r1, #1
 8018cb4:	4402      	add	r2, r0
 8018cb6:	4290      	cmp	r0, r2
 8018cb8:	d101      	bne.n	8018cbe <memcmp+0xe>
 8018cba:	2000      	movs	r0, #0
 8018cbc:	e005      	b.n	8018cca <memcmp+0x1a>
 8018cbe:	7803      	ldrb	r3, [r0, #0]
 8018cc0:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8018cc4:	42a3      	cmp	r3, r4
 8018cc6:	d001      	beq.n	8018ccc <memcmp+0x1c>
 8018cc8:	1b18      	subs	r0, r3, r4
 8018cca:	bd10      	pop	{r4, pc}
 8018ccc:	3001      	adds	r0, #1
 8018cce:	e7f2      	b.n	8018cb6 <memcmp+0x6>

08018cd0 <memset>:
 8018cd0:	4402      	add	r2, r0
 8018cd2:	4603      	mov	r3, r0
 8018cd4:	4293      	cmp	r3, r2
 8018cd6:	d100      	bne.n	8018cda <memset+0xa>
 8018cd8:	4770      	bx	lr
 8018cda:	f803 1b01 	strb.w	r1, [r3], #1
 8018cde:	e7f9      	b.n	8018cd4 <memset+0x4>

08018ce0 <_localeconv_r>:
 8018ce0:	4800      	ldr	r0, [pc, #0]	; (8018ce4 <_localeconv_r+0x4>)
 8018ce2:	4770      	bx	lr
 8018ce4:	200001ac 	.word	0x200001ac

08018ce8 <_close_r>:
 8018ce8:	b538      	push	{r3, r4, r5, lr}
 8018cea:	4d06      	ldr	r5, [pc, #24]	; (8018d04 <_close_r+0x1c>)
 8018cec:	2300      	movs	r3, #0
 8018cee:	4604      	mov	r4, r0
 8018cf0:	4608      	mov	r0, r1
 8018cf2:	602b      	str	r3, [r5, #0]
 8018cf4:	f7e9 fca1 	bl	800263a <_close>
 8018cf8:	1c43      	adds	r3, r0, #1
 8018cfa:	d102      	bne.n	8018d02 <_close_r+0x1a>
 8018cfc:	682b      	ldr	r3, [r5, #0]
 8018cfe:	b103      	cbz	r3, 8018d02 <_close_r+0x1a>
 8018d00:	6023      	str	r3, [r4, #0]
 8018d02:	bd38      	pop	{r3, r4, r5, pc}
 8018d04:	20008270 	.word	0x20008270

08018d08 <_lseek_r>:
 8018d08:	b538      	push	{r3, r4, r5, lr}
 8018d0a:	4d07      	ldr	r5, [pc, #28]	; (8018d28 <_lseek_r+0x20>)
 8018d0c:	4604      	mov	r4, r0
 8018d0e:	4608      	mov	r0, r1
 8018d10:	4611      	mov	r1, r2
 8018d12:	2200      	movs	r2, #0
 8018d14:	602a      	str	r2, [r5, #0]
 8018d16:	461a      	mov	r2, r3
 8018d18:	f7e9 fcb6 	bl	8002688 <_lseek>
 8018d1c:	1c43      	adds	r3, r0, #1
 8018d1e:	d102      	bne.n	8018d26 <_lseek_r+0x1e>
 8018d20:	682b      	ldr	r3, [r5, #0]
 8018d22:	b103      	cbz	r3, 8018d26 <_lseek_r+0x1e>
 8018d24:	6023      	str	r3, [r4, #0]
 8018d26:	bd38      	pop	{r3, r4, r5, pc}
 8018d28:	20008270 	.word	0x20008270

08018d2c <_read_r>:
 8018d2c:	b538      	push	{r3, r4, r5, lr}
 8018d2e:	4d07      	ldr	r5, [pc, #28]	; (8018d4c <_read_r+0x20>)
 8018d30:	4604      	mov	r4, r0
 8018d32:	4608      	mov	r0, r1
 8018d34:	4611      	mov	r1, r2
 8018d36:	2200      	movs	r2, #0
 8018d38:	602a      	str	r2, [r5, #0]
 8018d3a:	461a      	mov	r2, r3
 8018d3c:	f7e9 fc44 	bl	80025c8 <_read>
 8018d40:	1c43      	adds	r3, r0, #1
 8018d42:	d102      	bne.n	8018d4a <_read_r+0x1e>
 8018d44:	682b      	ldr	r3, [r5, #0]
 8018d46:	b103      	cbz	r3, 8018d4a <_read_r+0x1e>
 8018d48:	6023      	str	r3, [r4, #0]
 8018d4a:	bd38      	pop	{r3, r4, r5, pc}
 8018d4c:	20008270 	.word	0x20008270

08018d50 <_write_r>:
 8018d50:	b538      	push	{r3, r4, r5, lr}
 8018d52:	4d07      	ldr	r5, [pc, #28]	; (8018d70 <_write_r+0x20>)
 8018d54:	4604      	mov	r4, r0
 8018d56:	4608      	mov	r0, r1
 8018d58:	4611      	mov	r1, r2
 8018d5a:	2200      	movs	r2, #0
 8018d5c:	602a      	str	r2, [r5, #0]
 8018d5e:	461a      	mov	r2, r3
 8018d60:	f7e9 fc4f 	bl	8002602 <_write>
 8018d64:	1c43      	adds	r3, r0, #1
 8018d66:	d102      	bne.n	8018d6e <_write_r+0x1e>
 8018d68:	682b      	ldr	r3, [r5, #0]
 8018d6a:	b103      	cbz	r3, 8018d6e <_write_r+0x1e>
 8018d6c:	6023      	str	r3, [r4, #0]
 8018d6e:	bd38      	pop	{r3, r4, r5, pc}
 8018d70:	20008270 	.word	0x20008270

08018d74 <__libc_init_array>:
 8018d74:	b570      	push	{r4, r5, r6, lr}
 8018d76:	4d0d      	ldr	r5, [pc, #52]	; (8018dac <__libc_init_array+0x38>)
 8018d78:	4c0d      	ldr	r4, [pc, #52]	; (8018db0 <__libc_init_array+0x3c>)
 8018d7a:	1b64      	subs	r4, r4, r5
 8018d7c:	10a4      	asrs	r4, r4, #2
 8018d7e:	2600      	movs	r6, #0
 8018d80:	42a6      	cmp	r6, r4
 8018d82:	d109      	bne.n	8018d98 <__libc_init_array+0x24>
 8018d84:	4d0b      	ldr	r5, [pc, #44]	; (8018db4 <__libc_init_array+0x40>)
 8018d86:	4c0c      	ldr	r4, [pc, #48]	; (8018db8 <__libc_init_array+0x44>)
 8018d88:	f001 fdce 	bl	801a928 <_init>
 8018d8c:	1b64      	subs	r4, r4, r5
 8018d8e:	10a4      	asrs	r4, r4, #2
 8018d90:	2600      	movs	r6, #0
 8018d92:	42a6      	cmp	r6, r4
 8018d94:	d105      	bne.n	8018da2 <__libc_init_array+0x2e>
 8018d96:	bd70      	pop	{r4, r5, r6, pc}
 8018d98:	f855 3b04 	ldr.w	r3, [r5], #4
 8018d9c:	4798      	blx	r3
 8018d9e:	3601      	adds	r6, #1
 8018da0:	e7ee      	b.n	8018d80 <__libc_init_array+0xc>
 8018da2:	f855 3b04 	ldr.w	r3, [r5], #4
 8018da6:	4798      	blx	r3
 8018da8:	3601      	adds	r6, #1
 8018daa:	e7f2      	b.n	8018d92 <__libc_init_array+0x1e>
 8018dac:	0801dd38 	.word	0x0801dd38
 8018db0:	0801dd38 	.word	0x0801dd38
 8018db4:	0801dd38 	.word	0x0801dd38
 8018db8:	0801dd3c 	.word	0x0801dd3c

08018dbc <__retarget_lock_acquire_recursive>:
 8018dbc:	4770      	bx	lr

08018dbe <__retarget_lock_release_recursive>:
 8018dbe:	4770      	bx	lr

08018dc0 <memcpy>:
 8018dc0:	440a      	add	r2, r1
 8018dc2:	4291      	cmp	r1, r2
 8018dc4:	f100 33ff 	add.w	r3, r0, #4294967295
 8018dc8:	d100      	bne.n	8018dcc <memcpy+0xc>
 8018dca:	4770      	bx	lr
 8018dcc:	b510      	push	{r4, lr}
 8018dce:	f811 4b01 	ldrb.w	r4, [r1], #1
 8018dd2:	f803 4f01 	strb.w	r4, [r3, #1]!
 8018dd6:	4291      	cmp	r1, r2
 8018dd8:	d1f9      	bne.n	8018dce <memcpy+0xe>
 8018dda:	bd10      	pop	{r4, pc}

08018ddc <__assert_func>:
 8018ddc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8018dde:	4614      	mov	r4, r2
 8018de0:	461a      	mov	r2, r3
 8018de2:	4b09      	ldr	r3, [pc, #36]	; (8018e08 <__assert_func+0x2c>)
 8018de4:	681b      	ldr	r3, [r3, #0]
 8018de6:	4605      	mov	r5, r0
 8018de8:	68d8      	ldr	r0, [r3, #12]
 8018dea:	b14c      	cbz	r4, 8018e00 <__assert_func+0x24>
 8018dec:	4b07      	ldr	r3, [pc, #28]	; (8018e0c <__assert_func+0x30>)
 8018dee:	9100      	str	r1, [sp, #0]
 8018df0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8018df4:	4906      	ldr	r1, [pc, #24]	; (8018e10 <__assert_func+0x34>)
 8018df6:	462b      	mov	r3, r5
 8018df8:	f001 fc70 	bl	801a6dc <fiprintf>
 8018dfc:	f001 fd14 	bl	801a828 <abort>
 8018e00:	4b04      	ldr	r3, [pc, #16]	; (8018e14 <__assert_func+0x38>)
 8018e02:	461c      	mov	r4, r3
 8018e04:	e7f3      	b.n	8018dee <__assert_func+0x12>
 8018e06:	bf00      	nop
 8018e08:	200000b8 	.word	0x200000b8
 8018e0c:	0801db06 	.word	0x0801db06
 8018e10:	0801db13 	.word	0x0801db13
 8018e14:	0801db41 	.word	0x0801db41

08018e18 <quorem>:
 8018e18:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018e1c:	6903      	ldr	r3, [r0, #16]
 8018e1e:	690c      	ldr	r4, [r1, #16]
 8018e20:	42a3      	cmp	r3, r4
 8018e22:	4607      	mov	r7, r0
 8018e24:	db7e      	blt.n	8018f24 <quorem+0x10c>
 8018e26:	3c01      	subs	r4, #1
 8018e28:	f101 0814 	add.w	r8, r1, #20
 8018e2c:	f100 0514 	add.w	r5, r0, #20
 8018e30:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8018e34:	9301      	str	r3, [sp, #4]
 8018e36:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8018e3a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8018e3e:	3301      	adds	r3, #1
 8018e40:	429a      	cmp	r2, r3
 8018e42:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8018e46:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8018e4a:	fbb2 f6f3 	udiv	r6, r2, r3
 8018e4e:	d331      	bcc.n	8018eb4 <quorem+0x9c>
 8018e50:	f04f 0e00 	mov.w	lr, #0
 8018e54:	4640      	mov	r0, r8
 8018e56:	46ac      	mov	ip, r5
 8018e58:	46f2      	mov	sl, lr
 8018e5a:	f850 2b04 	ldr.w	r2, [r0], #4
 8018e5e:	b293      	uxth	r3, r2
 8018e60:	fb06 e303 	mla	r3, r6, r3, lr
 8018e64:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8018e68:	0c1a      	lsrs	r2, r3, #16
 8018e6a:	b29b      	uxth	r3, r3
 8018e6c:	ebaa 0303 	sub.w	r3, sl, r3
 8018e70:	f8dc a000 	ldr.w	sl, [ip]
 8018e74:	fa13 f38a 	uxtah	r3, r3, sl
 8018e78:	fb06 220e 	mla	r2, r6, lr, r2
 8018e7c:	9300      	str	r3, [sp, #0]
 8018e7e:	9b00      	ldr	r3, [sp, #0]
 8018e80:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8018e84:	b292      	uxth	r2, r2
 8018e86:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8018e8a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8018e8e:	f8bd 3000 	ldrh.w	r3, [sp]
 8018e92:	4581      	cmp	r9, r0
 8018e94:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8018e98:	f84c 3b04 	str.w	r3, [ip], #4
 8018e9c:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8018ea0:	d2db      	bcs.n	8018e5a <quorem+0x42>
 8018ea2:	f855 300b 	ldr.w	r3, [r5, fp]
 8018ea6:	b92b      	cbnz	r3, 8018eb4 <quorem+0x9c>
 8018ea8:	9b01      	ldr	r3, [sp, #4]
 8018eaa:	3b04      	subs	r3, #4
 8018eac:	429d      	cmp	r5, r3
 8018eae:	461a      	mov	r2, r3
 8018eb0:	d32c      	bcc.n	8018f0c <quorem+0xf4>
 8018eb2:	613c      	str	r4, [r7, #16]
 8018eb4:	4638      	mov	r0, r7
 8018eb6:	f001 f91f 	bl	801a0f8 <__mcmp>
 8018eba:	2800      	cmp	r0, #0
 8018ebc:	db22      	blt.n	8018f04 <quorem+0xec>
 8018ebe:	3601      	adds	r6, #1
 8018ec0:	4629      	mov	r1, r5
 8018ec2:	2000      	movs	r0, #0
 8018ec4:	f858 2b04 	ldr.w	r2, [r8], #4
 8018ec8:	f8d1 c000 	ldr.w	ip, [r1]
 8018ecc:	b293      	uxth	r3, r2
 8018ece:	1ac3      	subs	r3, r0, r3
 8018ed0:	0c12      	lsrs	r2, r2, #16
 8018ed2:	fa13 f38c 	uxtah	r3, r3, ip
 8018ed6:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8018eda:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8018ede:	b29b      	uxth	r3, r3
 8018ee0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8018ee4:	45c1      	cmp	r9, r8
 8018ee6:	f841 3b04 	str.w	r3, [r1], #4
 8018eea:	ea4f 4022 	mov.w	r0, r2, asr #16
 8018eee:	d2e9      	bcs.n	8018ec4 <quorem+0xac>
 8018ef0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8018ef4:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8018ef8:	b922      	cbnz	r2, 8018f04 <quorem+0xec>
 8018efa:	3b04      	subs	r3, #4
 8018efc:	429d      	cmp	r5, r3
 8018efe:	461a      	mov	r2, r3
 8018f00:	d30a      	bcc.n	8018f18 <quorem+0x100>
 8018f02:	613c      	str	r4, [r7, #16]
 8018f04:	4630      	mov	r0, r6
 8018f06:	b003      	add	sp, #12
 8018f08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018f0c:	6812      	ldr	r2, [r2, #0]
 8018f0e:	3b04      	subs	r3, #4
 8018f10:	2a00      	cmp	r2, #0
 8018f12:	d1ce      	bne.n	8018eb2 <quorem+0x9a>
 8018f14:	3c01      	subs	r4, #1
 8018f16:	e7c9      	b.n	8018eac <quorem+0x94>
 8018f18:	6812      	ldr	r2, [r2, #0]
 8018f1a:	3b04      	subs	r3, #4
 8018f1c:	2a00      	cmp	r2, #0
 8018f1e:	d1f0      	bne.n	8018f02 <quorem+0xea>
 8018f20:	3c01      	subs	r4, #1
 8018f22:	e7eb      	b.n	8018efc <quorem+0xe4>
 8018f24:	2000      	movs	r0, #0
 8018f26:	e7ee      	b.n	8018f06 <quorem+0xee>

08018f28 <_dtoa_r>:
 8018f28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018f2c:	ed2d 8b02 	vpush	{d8}
 8018f30:	69c5      	ldr	r5, [r0, #28]
 8018f32:	b091      	sub	sp, #68	; 0x44
 8018f34:	ed8d 0b02 	vstr	d0, [sp, #8]
 8018f38:	ec59 8b10 	vmov	r8, r9, d0
 8018f3c:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 8018f3e:	9106      	str	r1, [sp, #24]
 8018f40:	4606      	mov	r6, r0
 8018f42:	9208      	str	r2, [sp, #32]
 8018f44:	930c      	str	r3, [sp, #48]	; 0x30
 8018f46:	b975      	cbnz	r5, 8018f66 <_dtoa_r+0x3e>
 8018f48:	2010      	movs	r0, #16
 8018f4a:	f000 fda5 	bl	8019a98 <malloc>
 8018f4e:	4602      	mov	r2, r0
 8018f50:	61f0      	str	r0, [r6, #28]
 8018f52:	b920      	cbnz	r0, 8018f5e <_dtoa_r+0x36>
 8018f54:	4ba6      	ldr	r3, [pc, #664]	; (80191f0 <_dtoa_r+0x2c8>)
 8018f56:	21ef      	movs	r1, #239	; 0xef
 8018f58:	48a6      	ldr	r0, [pc, #664]	; (80191f4 <_dtoa_r+0x2cc>)
 8018f5a:	f7ff ff3f 	bl	8018ddc <__assert_func>
 8018f5e:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8018f62:	6005      	str	r5, [r0, #0]
 8018f64:	60c5      	str	r5, [r0, #12]
 8018f66:	69f3      	ldr	r3, [r6, #28]
 8018f68:	6819      	ldr	r1, [r3, #0]
 8018f6a:	b151      	cbz	r1, 8018f82 <_dtoa_r+0x5a>
 8018f6c:	685a      	ldr	r2, [r3, #4]
 8018f6e:	604a      	str	r2, [r1, #4]
 8018f70:	2301      	movs	r3, #1
 8018f72:	4093      	lsls	r3, r2
 8018f74:	608b      	str	r3, [r1, #8]
 8018f76:	4630      	mov	r0, r6
 8018f78:	f000 fe82 	bl	8019c80 <_Bfree>
 8018f7c:	69f3      	ldr	r3, [r6, #28]
 8018f7e:	2200      	movs	r2, #0
 8018f80:	601a      	str	r2, [r3, #0]
 8018f82:	f1b9 0300 	subs.w	r3, r9, #0
 8018f86:	bfbb      	ittet	lt
 8018f88:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8018f8c:	9303      	strlt	r3, [sp, #12]
 8018f8e:	2300      	movge	r3, #0
 8018f90:	2201      	movlt	r2, #1
 8018f92:	bfac      	ite	ge
 8018f94:	6023      	strge	r3, [r4, #0]
 8018f96:	6022      	strlt	r2, [r4, #0]
 8018f98:	4b97      	ldr	r3, [pc, #604]	; (80191f8 <_dtoa_r+0x2d0>)
 8018f9a:	9c03      	ldr	r4, [sp, #12]
 8018f9c:	43a3      	bics	r3, r4
 8018f9e:	d11c      	bne.n	8018fda <_dtoa_r+0xb2>
 8018fa0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8018fa2:	f242 730f 	movw	r3, #9999	; 0x270f
 8018fa6:	6013      	str	r3, [r2, #0]
 8018fa8:	f3c4 0313 	ubfx	r3, r4, #0, #20
 8018fac:	ea53 0308 	orrs.w	r3, r3, r8
 8018fb0:	f000 84fb 	beq.w	80199aa <_dtoa_r+0xa82>
 8018fb4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8018fb6:	b963      	cbnz	r3, 8018fd2 <_dtoa_r+0xaa>
 8018fb8:	4b90      	ldr	r3, [pc, #576]	; (80191fc <_dtoa_r+0x2d4>)
 8018fba:	e020      	b.n	8018ffe <_dtoa_r+0xd6>
 8018fbc:	4b90      	ldr	r3, [pc, #576]	; (8019200 <_dtoa_r+0x2d8>)
 8018fbe:	9301      	str	r3, [sp, #4]
 8018fc0:	3308      	adds	r3, #8
 8018fc2:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8018fc4:	6013      	str	r3, [r2, #0]
 8018fc6:	9801      	ldr	r0, [sp, #4]
 8018fc8:	b011      	add	sp, #68	; 0x44
 8018fca:	ecbd 8b02 	vpop	{d8}
 8018fce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018fd2:	4b8a      	ldr	r3, [pc, #552]	; (80191fc <_dtoa_r+0x2d4>)
 8018fd4:	9301      	str	r3, [sp, #4]
 8018fd6:	3303      	adds	r3, #3
 8018fd8:	e7f3      	b.n	8018fc2 <_dtoa_r+0x9a>
 8018fda:	ed9d 8b02 	vldr	d8, [sp, #8]
 8018fde:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8018fe2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018fe6:	d10c      	bne.n	8019002 <_dtoa_r+0xda>
 8018fe8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8018fea:	2301      	movs	r3, #1
 8018fec:	6013      	str	r3, [r2, #0]
 8018fee:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8018ff0:	2b00      	cmp	r3, #0
 8018ff2:	f000 84d7 	beq.w	80199a4 <_dtoa_r+0xa7c>
 8018ff6:	4b83      	ldr	r3, [pc, #524]	; (8019204 <_dtoa_r+0x2dc>)
 8018ff8:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8018ffa:	6013      	str	r3, [r2, #0]
 8018ffc:	3b01      	subs	r3, #1
 8018ffe:	9301      	str	r3, [sp, #4]
 8019000:	e7e1      	b.n	8018fc6 <_dtoa_r+0x9e>
 8019002:	aa0e      	add	r2, sp, #56	; 0x38
 8019004:	a90f      	add	r1, sp, #60	; 0x3c
 8019006:	4630      	mov	r0, r6
 8019008:	eeb0 0b48 	vmov.f64	d0, d8
 801900c:	f001 f91a 	bl	801a244 <__d2b>
 8019010:	f3c4 530a 	ubfx	r3, r4, #20, #11
 8019014:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8019016:	4605      	mov	r5, r0
 8019018:	2b00      	cmp	r3, #0
 801901a:	d046      	beq.n	80190aa <_dtoa_r+0x182>
 801901c:	eeb0 7b48 	vmov.f64	d7, d8
 8019020:	ee18 1a90 	vmov	r1, s17
 8019024:	f3c1 0113 	ubfx	r1, r1, #0, #20
 8019028:	f041 517f 	orr.w	r1, r1, #1069547520	; 0x3fc00000
 801902c:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8019030:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8019034:	2000      	movs	r0, #0
 8019036:	ee07 1a90 	vmov	s15, r1
 801903a:	eeb7 6b08 	vmov.f64	d6, #120	; 0x3fc00000  1.5
 801903e:	ed9f 5b66 	vldr	d5, [pc, #408]	; 80191d8 <_dtoa_r+0x2b0>
 8019042:	ee37 7b46 	vsub.f64	d7, d7, d6
 8019046:	ed9f 6b66 	vldr	d6, [pc, #408]	; 80191e0 <_dtoa_r+0x2b8>
 801904a:	eea7 6b05 	vfma.f64	d6, d7, d5
 801904e:	ed9f 5b66 	vldr	d5, [pc, #408]	; 80191e8 <_dtoa_r+0x2c0>
 8019052:	ee07 3a90 	vmov	s15, r3
 8019056:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 801905a:	eeb0 7b46 	vmov.f64	d7, d6
 801905e:	eea4 7b05 	vfma.f64	d7, d4, d5
 8019062:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 8019066:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 801906a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801906e:	ee16 ba90 	vmov	fp, s13
 8019072:	9009      	str	r0, [sp, #36]	; 0x24
 8019074:	d508      	bpl.n	8019088 <_dtoa_r+0x160>
 8019076:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 801907a:	eeb4 6b47 	vcmp.f64	d6, d7
 801907e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019082:	bf18      	it	ne
 8019084:	f10b 3bff 	addne.w	fp, fp, #4294967295
 8019088:	f1bb 0f16 	cmp.w	fp, #22
 801908c:	d82b      	bhi.n	80190e6 <_dtoa_r+0x1be>
 801908e:	495e      	ldr	r1, [pc, #376]	; (8019208 <_dtoa_r+0x2e0>)
 8019090:	eb01 01cb 	add.w	r1, r1, fp, lsl #3
 8019094:	ed91 7b00 	vldr	d7, [r1]
 8019098:	eeb4 8bc7 	vcmpe.f64	d8, d7
 801909c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80190a0:	d501      	bpl.n	80190a6 <_dtoa_r+0x17e>
 80190a2:	f10b 3bff 	add.w	fp, fp, #4294967295
 80190a6:	2100      	movs	r1, #0
 80190a8:	e01e      	b.n	80190e8 <_dtoa_r+0x1c0>
 80190aa:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80190ac:	4413      	add	r3, r2
 80190ae:	f203 4132 	addw	r1, r3, #1074	; 0x432
 80190b2:	2920      	cmp	r1, #32
 80190b4:	bfc1      	itttt	gt
 80190b6:	f1c1 0140 	rsbgt	r1, r1, #64	; 0x40
 80190ba:	408c      	lslgt	r4, r1
 80190bc:	f203 4112 	addwgt	r1, r3, #1042	; 0x412
 80190c0:	fa28 f101 	lsrgt.w	r1, r8, r1
 80190c4:	bfd6      	itet	le
 80190c6:	f1c1 0120 	rsble	r1, r1, #32
 80190ca:	4321      	orrgt	r1, r4
 80190cc:	fa08 f101 	lslle.w	r1, r8, r1
 80190d0:	ee07 1a90 	vmov	s15, r1
 80190d4:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 80190d8:	3b01      	subs	r3, #1
 80190da:	ee17 1a90 	vmov	r1, s15
 80190de:	2001      	movs	r0, #1
 80190e0:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 80190e4:	e7a7      	b.n	8019036 <_dtoa_r+0x10e>
 80190e6:	2101      	movs	r1, #1
 80190e8:	1ad2      	subs	r2, r2, r3
 80190ea:	1e53      	subs	r3, r2, #1
 80190ec:	9305      	str	r3, [sp, #20]
 80190ee:	bf45      	ittet	mi
 80190f0:	f1c2 0301 	rsbmi	r3, r2, #1
 80190f4:	9304      	strmi	r3, [sp, #16]
 80190f6:	2300      	movpl	r3, #0
 80190f8:	2300      	movmi	r3, #0
 80190fa:	bf4c      	ite	mi
 80190fc:	9305      	strmi	r3, [sp, #20]
 80190fe:	9304      	strpl	r3, [sp, #16]
 8019100:	f1bb 0f00 	cmp.w	fp, #0
 8019104:	910b      	str	r1, [sp, #44]	; 0x2c
 8019106:	db18      	blt.n	801913a <_dtoa_r+0x212>
 8019108:	9b05      	ldr	r3, [sp, #20]
 801910a:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 801910e:	445b      	add	r3, fp
 8019110:	9305      	str	r3, [sp, #20]
 8019112:	2300      	movs	r3, #0
 8019114:	9a06      	ldr	r2, [sp, #24]
 8019116:	2a09      	cmp	r2, #9
 8019118:	d848      	bhi.n	80191ac <_dtoa_r+0x284>
 801911a:	2a05      	cmp	r2, #5
 801911c:	bfc4      	itt	gt
 801911e:	3a04      	subgt	r2, #4
 8019120:	9206      	strgt	r2, [sp, #24]
 8019122:	9a06      	ldr	r2, [sp, #24]
 8019124:	f1a2 0202 	sub.w	r2, r2, #2
 8019128:	bfcc      	ite	gt
 801912a:	2400      	movgt	r4, #0
 801912c:	2401      	movle	r4, #1
 801912e:	2a03      	cmp	r2, #3
 8019130:	d847      	bhi.n	80191c2 <_dtoa_r+0x29a>
 8019132:	e8df f002 	tbb	[pc, r2]
 8019136:	2d0b      	.short	0x2d0b
 8019138:	392b      	.short	0x392b
 801913a:	9b04      	ldr	r3, [sp, #16]
 801913c:	2200      	movs	r2, #0
 801913e:	eba3 030b 	sub.w	r3, r3, fp
 8019142:	9304      	str	r3, [sp, #16]
 8019144:	920a      	str	r2, [sp, #40]	; 0x28
 8019146:	f1cb 0300 	rsb	r3, fp, #0
 801914a:	e7e3      	b.n	8019114 <_dtoa_r+0x1ec>
 801914c:	2200      	movs	r2, #0
 801914e:	9207      	str	r2, [sp, #28]
 8019150:	9a08      	ldr	r2, [sp, #32]
 8019152:	2a00      	cmp	r2, #0
 8019154:	dc38      	bgt.n	80191c8 <_dtoa_r+0x2a0>
 8019156:	f04f 0a01 	mov.w	sl, #1
 801915a:	46d1      	mov	r9, sl
 801915c:	4652      	mov	r2, sl
 801915e:	f8cd a020 	str.w	sl, [sp, #32]
 8019162:	69f7      	ldr	r7, [r6, #28]
 8019164:	2100      	movs	r1, #0
 8019166:	2004      	movs	r0, #4
 8019168:	f100 0c14 	add.w	ip, r0, #20
 801916c:	4594      	cmp	ip, r2
 801916e:	d930      	bls.n	80191d2 <_dtoa_r+0x2aa>
 8019170:	6079      	str	r1, [r7, #4]
 8019172:	4630      	mov	r0, r6
 8019174:	930d      	str	r3, [sp, #52]	; 0x34
 8019176:	f000 fd43 	bl	8019c00 <_Balloc>
 801917a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 801917c:	9001      	str	r0, [sp, #4]
 801917e:	4602      	mov	r2, r0
 8019180:	2800      	cmp	r0, #0
 8019182:	d145      	bne.n	8019210 <_dtoa_r+0x2e8>
 8019184:	4b21      	ldr	r3, [pc, #132]	; (801920c <_dtoa_r+0x2e4>)
 8019186:	f240 11af 	movw	r1, #431	; 0x1af
 801918a:	e6e5      	b.n	8018f58 <_dtoa_r+0x30>
 801918c:	2201      	movs	r2, #1
 801918e:	e7de      	b.n	801914e <_dtoa_r+0x226>
 8019190:	2200      	movs	r2, #0
 8019192:	9207      	str	r2, [sp, #28]
 8019194:	9a08      	ldr	r2, [sp, #32]
 8019196:	eb0b 0a02 	add.w	sl, fp, r2
 801919a:	f10a 0901 	add.w	r9, sl, #1
 801919e:	464a      	mov	r2, r9
 80191a0:	2a01      	cmp	r2, #1
 80191a2:	bfb8      	it	lt
 80191a4:	2201      	movlt	r2, #1
 80191a6:	e7dc      	b.n	8019162 <_dtoa_r+0x23a>
 80191a8:	2201      	movs	r2, #1
 80191aa:	e7f2      	b.n	8019192 <_dtoa_r+0x26a>
 80191ac:	2401      	movs	r4, #1
 80191ae:	2200      	movs	r2, #0
 80191b0:	e9cd 2406 	strd	r2, r4, [sp, #24]
 80191b4:	f04f 3aff 	mov.w	sl, #4294967295
 80191b8:	2100      	movs	r1, #0
 80191ba:	46d1      	mov	r9, sl
 80191bc:	2212      	movs	r2, #18
 80191be:	9108      	str	r1, [sp, #32]
 80191c0:	e7cf      	b.n	8019162 <_dtoa_r+0x23a>
 80191c2:	2201      	movs	r2, #1
 80191c4:	9207      	str	r2, [sp, #28]
 80191c6:	e7f5      	b.n	80191b4 <_dtoa_r+0x28c>
 80191c8:	f8dd a020 	ldr.w	sl, [sp, #32]
 80191cc:	46d1      	mov	r9, sl
 80191ce:	4652      	mov	r2, sl
 80191d0:	e7c7      	b.n	8019162 <_dtoa_r+0x23a>
 80191d2:	3101      	adds	r1, #1
 80191d4:	0040      	lsls	r0, r0, #1
 80191d6:	e7c7      	b.n	8019168 <_dtoa_r+0x240>
 80191d8:	636f4361 	.word	0x636f4361
 80191dc:	3fd287a7 	.word	0x3fd287a7
 80191e0:	8b60c8b3 	.word	0x8b60c8b3
 80191e4:	3fc68a28 	.word	0x3fc68a28
 80191e8:	509f79fb 	.word	0x509f79fb
 80191ec:	3fd34413 	.word	0x3fd34413
 80191f0:	0801d962 	.word	0x0801d962
 80191f4:	0801db4f 	.word	0x0801db4f
 80191f8:	7ff00000 	.word	0x7ff00000
 80191fc:	0801db4b 	.word	0x0801db4b
 8019200:	0801db42 	.word	0x0801db42
 8019204:	0801dae3 	.word	0x0801dae3
 8019208:	0801dc40 	.word	0x0801dc40
 801920c:	0801dba7 	.word	0x0801dba7
 8019210:	69f2      	ldr	r2, [r6, #28]
 8019212:	9901      	ldr	r1, [sp, #4]
 8019214:	6011      	str	r1, [r2, #0]
 8019216:	f1b9 0f0e 	cmp.w	r9, #14
 801921a:	d86c      	bhi.n	80192f6 <_dtoa_r+0x3ce>
 801921c:	2c00      	cmp	r4, #0
 801921e:	d06a      	beq.n	80192f6 <_dtoa_r+0x3ce>
 8019220:	f1bb 0f00 	cmp.w	fp, #0
 8019224:	f340 80a0 	ble.w	8019368 <_dtoa_r+0x440>
 8019228:	4ac1      	ldr	r2, [pc, #772]	; (8019530 <_dtoa_r+0x608>)
 801922a:	f00b 010f 	and.w	r1, fp, #15
 801922e:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 8019232:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8019236:	ed92 7b00 	vldr	d7, [r2]
 801923a:	ea4f 122b 	mov.w	r2, fp, asr #4
 801923e:	f000 8087 	beq.w	8019350 <_dtoa_r+0x428>
 8019242:	49bc      	ldr	r1, [pc, #752]	; (8019534 <_dtoa_r+0x60c>)
 8019244:	ed91 6b08 	vldr	d6, [r1, #32]
 8019248:	ee88 6b06 	vdiv.f64	d6, d8, d6
 801924c:	ed8d 6b02 	vstr	d6, [sp, #8]
 8019250:	f002 020f 	and.w	r2, r2, #15
 8019254:	2103      	movs	r1, #3
 8019256:	48b7      	ldr	r0, [pc, #732]	; (8019534 <_dtoa_r+0x60c>)
 8019258:	2a00      	cmp	r2, #0
 801925a:	d17b      	bne.n	8019354 <_dtoa_r+0x42c>
 801925c:	ed9d 6b02 	vldr	d6, [sp, #8]
 8019260:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8019264:	ed8d 7b02 	vstr	d7, [sp, #8]
 8019268:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801926a:	ed9d 7b02 	vldr	d7, [sp, #8]
 801926e:	2a00      	cmp	r2, #0
 8019270:	f000 80a0 	beq.w	80193b4 <_dtoa_r+0x48c>
 8019274:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8019278:	eeb4 7bc6 	vcmpe.f64	d7, d6
 801927c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019280:	f140 8098 	bpl.w	80193b4 <_dtoa_r+0x48c>
 8019284:	f1b9 0f00 	cmp.w	r9, #0
 8019288:	f000 8094 	beq.w	80193b4 <_dtoa_r+0x48c>
 801928c:	f1ba 0f00 	cmp.w	sl, #0
 8019290:	dd2f      	ble.n	80192f2 <_dtoa_r+0x3ca>
 8019292:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 8019296:	ee27 7b06 	vmul.f64	d7, d7, d6
 801929a:	ed8d 7b02 	vstr	d7, [sp, #8]
 801929e:	f10b 32ff 	add.w	r2, fp, #4294967295
 80192a2:	3101      	adds	r1, #1
 80192a4:	4654      	mov	r4, sl
 80192a6:	ed9d 6b02 	vldr	d6, [sp, #8]
 80192aa:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 80192ae:	ee07 1a90 	vmov	s15, r1
 80192b2:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80192b6:	eea7 5b06 	vfma.f64	d5, d7, d6
 80192ba:	ee15 7a90 	vmov	r7, s11
 80192be:	ec51 0b15 	vmov	r0, r1, d5
 80192c2:	f1a7 7150 	sub.w	r1, r7, #54525952	; 0x3400000
 80192c6:	2c00      	cmp	r4, #0
 80192c8:	d177      	bne.n	80193ba <_dtoa_r+0x492>
 80192ca:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 80192ce:	ee36 6b47 	vsub.f64	d6, d6, d7
 80192d2:	ec41 0b17 	vmov	d7, r0, r1
 80192d6:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80192da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80192de:	f300 826a 	bgt.w	80197b6 <_dtoa_r+0x88e>
 80192e2:	eeb1 7b47 	vneg.f64	d7, d7
 80192e6:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80192ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80192ee:	f100 8260 	bmi.w	80197b2 <_dtoa_r+0x88a>
 80192f2:	ed8d 8b02 	vstr	d8, [sp, #8]
 80192f6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80192f8:	2a00      	cmp	r2, #0
 80192fa:	f2c0 811d 	blt.w	8019538 <_dtoa_r+0x610>
 80192fe:	f1bb 0f0e 	cmp.w	fp, #14
 8019302:	f300 8119 	bgt.w	8019538 <_dtoa_r+0x610>
 8019306:	4b8a      	ldr	r3, [pc, #552]	; (8019530 <_dtoa_r+0x608>)
 8019308:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 801930c:	ed93 6b00 	vldr	d6, [r3]
 8019310:	9b08      	ldr	r3, [sp, #32]
 8019312:	2b00      	cmp	r3, #0
 8019314:	f280 80b7 	bge.w	8019486 <_dtoa_r+0x55e>
 8019318:	f1b9 0f00 	cmp.w	r9, #0
 801931c:	f300 80b3 	bgt.w	8019486 <_dtoa_r+0x55e>
 8019320:	f040 8246 	bne.w	80197b0 <_dtoa_r+0x888>
 8019324:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8019328:	ee26 6b07 	vmul.f64	d6, d6, d7
 801932c:	ed9d 7b02 	vldr	d7, [sp, #8]
 8019330:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8019334:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019338:	464c      	mov	r4, r9
 801933a:	464f      	mov	r7, r9
 801933c:	f280 821c 	bge.w	8019778 <_dtoa_r+0x850>
 8019340:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8019344:	2331      	movs	r3, #49	; 0x31
 8019346:	f808 3b01 	strb.w	r3, [r8], #1
 801934a:	f10b 0b01 	add.w	fp, fp, #1
 801934e:	e218      	b.n	8019782 <_dtoa_r+0x85a>
 8019350:	2102      	movs	r1, #2
 8019352:	e780      	b.n	8019256 <_dtoa_r+0x32e>
 8019354:	07d4      	lsls	r4, r2, #31
 8019356:	d504      	bpl.n	8019362 <_dtoa_r+0x43a>
 8019358:	ed90 6b00 	vldr	d6, [r0]
 801935c:	3101      	adds	r1, #1
 801935e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8019362:	1052      	asrs	r2, r2, #1
 8019364:	3008      	adds	r0, #8
 8019366:	e777      	b.n	8019258 <_dtoa_r+0x330>
 8019368:	d022      	beq.n	80193b0 <_dtoa_r+0x488>
 801936a:	f1cb 0200 	rsb	r2, fp, #0
 801936e:	4970      	ldr	r1, [pc, #448]	; (8019530 <_dtoa_r+0x608>)
 8019370:	f002 000f 	and.w	r0, r2, #15
 8019374:	eb01 01c0 	add.w	r1, r1, r0, lsl #3
 8019378:	ed91 7b00 	vldr	d7, [r1]
 801937c:	ee28 7b07 	vmul.f64	d7, d8, d7
 8019380:	ed8d 7b02 	vstr	d7, [sp, #8]
 8019384:	486b      	ldr	r0, [pc, #428]	; (8019534 <_dtoa_r+0x60c>)
 8019386:	1112      	asrs	r2, r2, #4
 8019388:	2400      	movs	r4, #0
 801938a:	2102      	movs	r1, #2
 801938c:	b92a      	cbnz	r2, 801939a <_dtoa_r+0x472>
 801938e:	2c00      	cmp	r4, #0
 8019390:	f43f af6a 	beq.w	8019268 <_dtoa_r+0x340>
 8019394:	ed8d 7b02 	vstr	d7, [sp, #8]
 8019398:	e766      	b.n	8019268 <_dtoa_r+0x340>
 801939a:	07d7      	lsls	r7, r2, #31
 801939c:	d505      	bpl.n	80193aa <_dtoa_r+0x482>
 801939e:	ed90 6b00 	vldr	d6, [r0]
 80193a2:	3101      	adds	r1, #1
 80193a4:	2401      	movs	r4, #1
 80193a6:	ee27 7b06 	vmul.f64	d7, d7, d6
 80193aa:	1052      	asrs	r2, r2, #1
 80193ac:	3008      	adds	r0, #8
 80193ae:	e7ed      	b.n	801938c <_dtoa_r+0x464>
 80193b0:	2102      	movs	r1, #2
 80193b2:	e759      	b.n	8019268 <_dtoa_r+0x340>
 80193b4:	465a      	mov	r2, fp
 80193b6:	464c      	mov	r4, r9
 80193b8:	e775      	b.n	80192a6 <_dtoa_r+0x37e>
 80193ba:	ec41 0b17 	vmov	d7, r0, r1
 80193be:	495c      	ldr	r1, [pc, #368]	; (8019530 <_dtoa_r+0x608>)
 80193c0:	eb01 01c4 	add.w	r1, r1, r4, lsl #3
 80193c4:	ed11 4b02 	vldr	d4, [r1, #-8]
 80193c8:	9901      	ldr	r1, [sp, #4]
 80193ca:	440c      	add	r4, r1
 80193cc:	9907      	ldr	r1, [sp, #28]
 80193ce:	b351      	cbz	r1, 8019426 <_dtoa_r+0x4fe>
 80193d0:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 80193d4:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 80193d8:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80193dc:	ee83 5b04 	vdiv.f64	d5, d3, d4
 80193e0:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 80193e4:	ee35 7b47 	vsub.f64	d7, d5, d7
 80193e8:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 80193ec:	ee14 1a90 	vmov	r1, s9
 80193f0:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 80193f4:	3130      	adds	r1, #48	; 0x30
 80193f6:	ee36 6b45 	vsub.f64	d6, d6, d5
 80193fa:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80193fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019402:	f808 1b01 	strb.w	r1, [r8], #1
 8019406:	d439      	bmi.n	801947c <_dtoa_r+0x554>
 8019408:	ee32 5b46 	vsub.f64	d5, d2, d6
 801940c:	eeb4 5bc7 	vcmpe.f64	d5, d7
 8019410:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019414:	d472      	bmi.n	80194fc <_dtoa_r+0x5d4>
 8019416:	45a0      	cmp	r8, r4
 8019418:	f43f af6b 	beq.w	80192f2 <_dtoa_r+0x3ca>
 801941c:	ee27 7b03 	vmul.f64	d7, d7, d3
 8019420:	ee26 6b03 	vmul.f64	d6, d6, d3
 8019424:	e7e0      	b.n	80193e8 <_dtoa_r+0x4c0>
 8019426:	f8dd 8004 	ldr.w	r8, [sp, #4]
 801942a:	ee27 7b04 	vmul.f64	d7, d7, d4
 801942e:	4620      	mov	r0, r4
 8019430:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8019434:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8019438:	ee14 1a90 	vmov	r1, s9
 801943c:	3130      	adds	r1, #48	; 0x30
 801943e:	f808 1b01 	strb.w	r1, [r8], #1
 8019442:	45a0      	cmp	r8, r4
 8019444:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8019448:	ee36 6b45 	vsub.f64	d6, d6, d5
 801944c:	d118      	bne.n	8019480 <_dtoa_r+0x558>
 801944e:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 8019452:	ee37 4b05 	vadd.f64	d4, d7, d5
 8019456:	eeb4 6bc4 	vcmpe.f64	d6, d4
 801945a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801945e:	dc4d      	bgt.n	80194fc <_dtoa_r+0x5d4>
 8019460:	ee35 5b47 	vsub.f64	d5, d5, d7
 8019464:	eeb4 6bc5 	vcmpe.f64	d6, d5
 8019468:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801946c:	f57f af41 	bpl.w	80192f2 <_dtoa_r+0x3ca>
 8019470:	4680      	mov	r8, r0
 8019472:	3801      	subs	r0, #1
 8019474:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 8019478:	2b30      	cmp	r3, #48	; 0x30
 801947a:	d0f9      	beq.n	8019470 <_dtoa_r+0x548>
 801947c:	4693      	mov	fp, r2
 801947e:	e02a      	b.n	80194d6 <_dtoa_r+0x5ae>
 8019480:	ee26 6b03 	vmul.f64	d6, d6, d3
 8019484:	e7d6      	b.n	8019434 <_dtoa_r+0x50c>
 8019486:	ed9d 7b02 	vldr	d7, [sp, #8]
 801948a:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 801948e:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8019492:	ee87 5b06 	vdiv.f64	d5, d7, d6
 8019496:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 801949a:	ee15 3a10 	vmov	r3, s10
 801949e:	3330      	adds	r3, #48	; 0x30
 80194a0:	f808 3b01 	strb.w	r3, [r8], #1
 80194a4:	9b01      	ldr	r3, [sp, #4]
 80194a6:	eba8 0303 	sub.w	r3, r8, r3
 80194aa:	4599      	cmp	r9, r3
 80194ac:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 80194b0:	eea3 7b46 	vfms.f64	d7, d3, d6
 80194b4:	d133      	bne.n	801951e <_dtoa_r+0x5f6>
 80194b6:	ee37 7b07 	vadd.f64	d7, d7, d7
 80194ba:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80194be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80194c2:	dc1a      	bgt.n	80194fa <_dtoa_r+0x5d2>
 80194c4:	eeb4 7b46 	vcmp.f64	d7, d6
 80194c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80194cc:	d103      	bne.n	80194d6 <_dtoa_r+0x5ae>
 80194ce:	ee15 3a10 	vmov	r3, s10
 80194d2:	07d9      	lsls	r1, r3, #31
 80194d4:	d411      	bmi.n	80194fa <_dtoa_r+0x5d2>
 80194d6:	4629      	mov	r1, r5
 80194d8:	4630      	mov	r0, r6
 80194da:	f000 fbd1 	bl	8019c80 <_Bfree>
 80194de:	2300      	movs	r3, #0
 80194e0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80194e2:	f888 3000 	strb.w	r3, [r8]
 80194e6:	f10b 0301 	add.w	r3, fp, #1
 80194ea:	6013      	str	r3, [r2, #0]
 80194ec:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80194ee:	2b00      	cmp	r3, #0
 80194f0:	f43f ad69 	beq.w	8018fc6 <_dtoa_r+0x9e>
 80194f4:	f8c3 8000 	str.w	r8, [r3]
 80194f8:	e565      	b.n	8018fc6 <_dtoa_r+0x9e>
 80194fa:	465a      	mov	r2, fp
 80194fc:	4643      	mov	r3, r8
 80194fe:	4698      	mov	r8, r3
 8019500:	f813 1d01 	ldrb.w	r1, [r3, #-1]!
 8019504:	2939      	cmp	r1, #57	; 0x39
 8019506:	d106      	bne.n	8019516 <_dtoa_r+0x5ee>
 8019508:	9901      	ldr	r1, [sp, #4]
 801950a:	4299      	cmp	r1, r3
 801950c:	d1f7      	bne.n	80194fe <_dtoa_r+0x5d6>
 801950e:	9801      	ldr	r0, [sp, #4]
 8019510:	2130      	movs	r1, #48	; 0x30
 8019512:	3201      	adds	r2, #1
 8019514:	7001      	strb	r1, [r0, #0]
 8019516:	7819      	ldrb	r1, [r3, #0]
 8019518:	3101      	adds	r1, #1
 801951a:	7019      	strb	r1, [r3, #0]
 801951c:	e7ae      	b.n	801947c <_dtoa_r+0x554>
 801951e:	ee27 7b04 	vmul.f64	d7, d7, d4
 8019522:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8019526:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801952a:	d1b2      	bne.n	8019492 <_dtoa_r+0x56a>
 801952c:	e7d3      	b.n	80194d6 <_dtoa_r+0x5ae>
 801952e:	bf00      	nop
 8019530:	0801dc40 	.word	0x0801dc40
 8019534:	0801dc18 	.word	0x0801dc18
 8019538:	9907      	ldr	r1, [sp, #28]
 801953a:	2900      	cmp	r1, #0
 801953c:	f000 80d0 	beq.w	80196e0 <_dtoa_r+0x7b8>
 8019540:	9906      	ldr	r1, [sp, #24]
 8019542:	2901      	cmp	r1, #1
 8019544:	f300 80b4 	bgt.w	80196b0 <_dtoa_r+0x788>
 8019548:	9909      	ldr	r1, [sp, #36]	; 0x24
 801954a:	2900      	cmp	r1, #0
 801954c:	f000 80ac 	beq.w	80196a8 <_dtoa_r+0x780>
 8019550:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8019554:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8019558:	461c      	mov	r4, r3
 801955a:	9309      	str	r3, [sp, #36]	; 0x24
 801955c:	9b04      	ldr	r3, [sp, #16]
 801955e:	4413      	add	r3, r2
 8019560:	9304      	str	r3, [sp, #16]
 8019562:	9b05      	ldr	r3, [sp, #20]
 8019564:	2101      	movs	r1, #1
 8019566:	4413      	add	r3, r2
 8019568:	4630      	mov	r0, r6
 801956a:	9305      	str	r3, [sp, #20]
 801956c:	f000 fc3e 	bl	8019dec <__i2b>
 8019570:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8019572:	4607      	mov	r7, r0
 8019574:	f1b8 0f00 	cmp.w	r8, #0
 8019578:	d00d      	beq.n	8019596 <_dtoa_r+0x66e>
 801957a:	9a05      	ldr	r2, [sp, #20]
 801957c:	2a00      	cmp	r2, #0
 801957e:	dd0a      	ble.n	8019596 <_dtoa_r+0x66e>
 8019580:	4542      	cmp	r2, r8
 8019582:	9904      	ldr	r1, [sp, #16]
 8019584:	bfa8      	it	ge
 8019586:	4642      	movge	r2, r8
 8019588:	1a89      	subs	r1, r1, r2
 801958a:	9104      	str	r1, [sp, #16]
 801958c:	9905      	ldr	r1, [sp, #20]
 801958e:	eba8 0802 	sub.w	r8, r8, r2
 8019592:	1a8a      	subs	r2, r1, r2
 8019594:	9205      	str	r2, [sp, #20]
 8019596:	b303      	cbz	r3, 80195da <_dtoa_r+0x6b2>
 8019598:	9a07      	ldr	r2, [sp, #28]
 801959a:	2a00      	cmp	r2, #0
 801959c:	f000 80a5 	beq.w	80196ea <_dtoa_r+0x7c2>
 80195a0:	2c00      	cmp	r4, #0
 80195a2:	dd13      	ble.n	80195cc <_dtoa_r+0x6a4>
 80195a4:	4639      	mov	r1, r7
 80195a6:	4622      	mov	r2, r4
 80195a8:	4630      	mov	r0, r6
 80195aa:	930d      	str	r3, [sp, #52]	; 0x34
 80195ac:	f000 fcde 	bl	8019f6c <__pow5mult>
 80195b0:	462a      	mov	r2, r5
 80195b2:	4601      	mov	r1, r0
 80195b4:	4607      	mov	r7, r0
 80195b6:	4630      	mov	r0, r6
 80195b8:	f000 fc2e 	bl	8019e18 <__multiply>
 80195bc:	4629      	mov	r1, r5
 80195be:	9009      	str	r0, [sp, #36]	; 0x24
 80195c0:	4630      	mov	r0, r6
 80195c2:	f000 fb5d 	bl	8019c80 <_Bfree>
 80195c6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80195c8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80195ca:	4615      	mov	r5, r2
 80195cc:	1b1a      	subs	r2, r3, r4
 80195ce:	d004      	beq.n	80195da <_dtoa_r+0x6b2>
 80195d0:	4629      	mov	r1, r5
 80195d2:	4630      	mov	r0, r6
 80195d4:	f000 fcca 	bl	8019f6c <__pow5mult>
 80195d8:	4605      	mov	r5, r0
 80195da:	2101      	movs	r1, #1
 80195dc:	4630      	mov	r0, r6
 80195de:	f000 fc05 	bl	8019dec <__i2b>
 80195e2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80195e4:	2b00      	cmp	r3, #0
 80195e6:	4604      	mov	r4, r0
 80195e8:	f340 8081 	ble.w	80196ee <_dtoa_r+0x7c6>
 80195ec:	461a      	mov	r2, r3
 80195ee:	4601      	mov	r1, r0
 80195f0:	4630      	mov	r0, r6
 80195f2:	f000 fcbb 	bl	8019f6c <__pow5mult>
 80195f6:	9b06      	ldr	r3, [sp, #24]
 80195f8:	2b01      	cmp	r3, #1
 80195fa:	4604      	mov	r4, r0
 80195fc:	dd7a      	ble.n	80196f4 <_dtoa_r+0x7cc>
 80195fe:	2300      	movs	r3, #0
 8019600:	9309      	str	r3, [sp, #36]	; 0x24
 8019602:	6922      	ldr	r2, [r4, #16]
 8019604:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8019608:	6910      	ldr	r0, [r2, #16]
 801960a:	f000 fba1 	bl	8019d50 <__hi0bits>
 801960e:	f1c0 0020 	rsb	r0, r0, #32
 8019612:	9b05      	ldr	r3, [sp, #20]
 8019614:	4418      	add	r0, r3
 8019616:	f010 001f 	ands.w	r0, r0, #31
 801961a:	f000 8093 	beq.w	8019744 <_dtoa_r+0x81c>
 801961e:	f1c0 0220 	rsb	r2, r0, #32
 8019622:	2a04      	cmp	r2, #4
 8019624:	f340 8085 	ble.w	8019732 <_dtoa_r+0x80a>
 8019628:	9b04      	ldr	r3, [sp, #16]
 801962a:	f1c0 001c 	rsb	r0, r0, #28
 801962e:	4403      	add	r3, r0
 8019630:	9304      	str	r3, [sp, #16]
 8019632:	9b05      	ldr	r3, [sp, #20]
 8019634:	4480      	add	r8, r0
 8019636:	4403      	add	r3, r0
 8019638:	9305      	str	r3, [sp, #20]
 801963a:	9b04      	ldr	r3, [sp, #16]
 801963c:	2b00      	cmp	r3, #0
 801963e:	dd05      	ble.n	801964c <_dtoa_r+0x724>
 8019640:	4629      	mov	r1, r5
 8019642:	461a      	mov	r2, r3
 8019644:	4630      	mov	r0, r6
 8019646:	f000 fceb 	bl	801a020 <__lshift>
 801964a:	4605      	mov	r5, r0
 801964c:	9b05      	ldr	r3, [sp, #20]
 801964e:	2b00      	cmp	r3, #0
 8019650:	dd05      	ble.n	801965e <_dtoa_r+0x736>
 8019652:	4621      	mov	r1, r4
 8019654:	461a      	mov	r2, r3
 8019656:	4630      	mov	r0, r6
 8019658:	f000 fce2 	bl	801a020 <__lshift>
 801965c:	4604      	mov	r4, r0
 801965e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8019660:	2b00      	cmp	r3, #0
 8019662:	d071      	beq.n	8019748 <_dtoa_r+0x820>
 8019664:	4621      	mov	r1, r4
 8019666:	4628      	mov	r0, r5
 8019668:	f000 fd46 	bl	801a0f8 <__mcmp>
 801966c:	2800      	cmp	r0, #0
 801966e:	da6b      	bge.n	8019748 <_dtoa_r+0x820>
 8019670:	2300      	movs	r3, #0
 8019672:	4629      	mov	r1, r5
 8019674:	220a      	movs	r2, #10
 8019676:	4630      	mov	r0, r6
 8019678:	f000 fb24 	bl	8019cc4 <__multadd>
 801967c:	9b07      	ldr	r3, [sp, #28]
 801967e:	f10b 3bff 	add.w	fp, fp, #4294967295
 8019682:	4605      	mov	r5, r0
 8019684:	2b00      	cmp	r3, #0
 8019686:	f000 8197 	beq.w	80199b8 <_dtoa_r+0xa90>
 801968a:	4639      	mov	r1, r7
 801968c:	2300      	movs	r3, #0
 801968e:	220a      	movs	r2, #10
 8019690:	4630      	mov	r0, r6
 8019692:	f000 fb17 	bl	8019cc4 <__multadd>
 8019696:	f1ba 0f00 	cmp.w	sl, #0
 801969a:	4607      	mov	r7, r0
 801969c:	f300 8093 	bgt.w	80197c6 <_dtoa_r+0x89e>
 80196a0:	9b06      	ldr	r3, [sp, #24]
 80196a2:	2b02      	cmp	r3, #2
 80196a4:	dc57      	bgt.n	8019756 <_dtoa_r+0x82e>
 80196a6:	e08e      	b.n	80197c6 <_dtoa_r+0x89e>
 80196a8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80196aa:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 80196ae:	e751      	b.n	8019554 <_dtoa_r+0x62c>
 80196b0:	f109 34ff 	add.w	r4, r9, #4294967295
 80196b4:	42a3      	cmp	r3, r4
 80196b6:	bfbf      	itttt	lt
 80196b8:	1ae2      	sublt	r2, r4, r3
 80196ba:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 80196bc:	189b      	addlt	r3, r3, r2
 80196be:	930a      	strlt	r3, [sp, #40]	; 0x28
 80196c0:	bfae      	itee	ge
 80196c2:	1b1c      	subge	r4, r3, r4
 80196c4:	4623      	movlt	r3, r4
 80196c6:	2400      	movlt	r4, #0
 80196c8:	f1b9 0f00 	cmp.w	r9, #0
 80196cc:	bfb5      	itete	lt
 80196ce:	9a04      	ldrlt	r2, [sp, #16]
 80196d0:	f8dd 8010 	ldrge.w	r8, [sp, #16]
 80196d4:	eba2 0809 	sublt.w	r8, r2, r9
 80196d8:	464a      	movge	r2, r9
 80196da:	bfb8      	it	lt
 80196dc:	2200      	movlt	r2, #0
 80196de:	e73c      	b.n	801955a <_dtoa_r+0x632>
 80196e0:	f8dd 8010 	ldr.w	r8, [sp, #16]
 80196e4:	9f07      	ldr	r7, [sp, #28]
 80196e6:	461c      	mov	r4, r3
 80196e8:	e744      	b.n	8019574 <_dtoa_r+0x64c>
 80196ea:	461a      	mov	r2, r3
 80196ec:	e770      	b.n	80195d0 <_dtoa_r+0x6a8>
 80196ee:	9b06      	ldr	r3, [sp, #24]
 80196f0:	2b01      	cmp	r3, #1
 80196f2:	dc18      	bgt.n	8019726 <_dtoa_r+0x7fe>
 80196f4:	9b02      	ldr	r3, [sp, #8]
 80196f6:	b9b3      	cbnz	r3, 8019726 <_dtoa_r+0x7fe>
 80196f8:	9b03      	ldr	r3, [sp, #12]
 80196fa:	f3c3 0213 	ubfx	r2, r3, #0, #20
 80196fe:	b9a2      	cbnz	r2, 801972a <_dtoa_r+0x802>
 8019700:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8019704:	0d12      	lsrs	r2, r2, #20
 8019706:	0512      	lsls	r2, r2, #20
 8019708:	b18a      	cbz	r2, 801972e <_dtoa_r+0x806>
 801970a:	9b04      	ldr	r3, [sp, #16]
 801970c:	3301      	adds	r3, #1
 801970e:	9304      	str	r3, [sp, #16]
 8019710:	9b05      	ldr	r3, [sp, #20]
 8019712:	3301      	adds	r3, #1
 8019714:	9305      	str	r3, [sp, #20]
 8019716:	2301      	movs	r3, #1
 8019718:	9309      	str	r3, [sp, #36]	; 0x24
 801971a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801971c:	2b00      	cmp	r3, #0
 801971e:	f47f af70 	bne.w	8019602 <_dtoa_r+0x6da>
 8019722:	2001      	movs	r0, #1
 8019724:	e775      	b.n	8019612 <_dtoa_r+0x6ea>
 8019726:	2300      	movs	r3, #0
 8019728:	e7f6      	b.n	8019718 <_dtoa_r+0x7f0>
 801972a:	9b02      	ldr	r3, [sp, #8]
 801972c:	e7f4      	b.n	8019718 <_dtoa_r+0x7f0>
 801972e:	9209      	str	r2, [sp, #36]	; 0x24
 8019730:	e7f3      	b.n	801971a <_dtoa_r+0x7f2>
 8019732:	d082      	beq.n	801963a <_dtoa_r+0x712>
 8019734:	9b04      	ldr	r3, [sp, #16]
 8019736:	321c      	adds	r2, #28
 8019738:	4413      	add	r3, r2
 801973a:	9304      	str	r3, [sp, #16]
 801973c:	9b05      	ldr	r3, [sp, #20]
 801973e:	4490      	add	r8, r2
 8019740:	4413      	add	r3, r2
 8019742:	e779      	b.n	8019638 <_dtoa_r+0x710>
 8019744:	4602      	mov	r2, r0
 8019746:	e7f5      	b.n	8019734 <_dtoa_r+0x80c>
 8019748:	f1b9 0f00 	cmp.w	r9, #0
 801974c:	dc36      	bgt.n	80197bc <_dtoa_r+0x894>
 801974e:	9b06      	ldr	r3, [sp, #24]
 8019750:	2b02      	cmp	r3, #2
 8019752:	dd33      	ble.n	80197bc <_dtoa_r+0x894>
 8019754:	46ca      	mov	sl, r9
 8019756:	f1ba 0f00 	cmp.w	sl, #0
 801975a:	d10d      	bne.n	8019778 <_dtoa_r+0x850>
 801975c:	4621      	mov	r1, r4
 801975e:	4653      	mov	r3, sl
 8019760:	2205      	movs	r2, #5
 8019762:	4630      	mov	r0, r6
 8019764:	f000 faae 	bl	8019cc4 <__multadd>
 8019768:	4601      	mov	r1, r0
 801976a:	4604      	mov	r4, r0
 801976c:	4628      	mov	r0, r5
 801976e:	f000 fcc3 	bl	801a0f8 <__mcmp>
 8019772:	2800      	cmp	r0, #0
 8019774:	f73f ade4 	bgt.w	8019340 <_dtoa_r+0x418>
 8019778:	9b08      	ldr	r3, [sp, #32]
 801977a:	f8dd 8004 	ldr.w	r8, [sp, #4]
 801977e:	ea6f 0b03 	mvn.w	fp, r3
 8019782:	f04f 0900 	mov.w	r9, #0
 8019786:	4621      	mov	r1, r4
 8019788:	4630      	mov	r0, r6
 801978a:	f000 fa79 	bl	8019c80 <_Bfree>
 801978e:	2f00      	cmp	r7, #0
 8019790:	f43f aea1 	beq.w	80194d6 <_dtoa_r+0x5ae>
 8019794:	f1b9 0f00 	cmp.w	r9, #0
 8019798:	d005      	beq.n	80197a6 <_dtoa_r+0x87e>
 801979a:	45b9      	cmp	r9, r7
 801979c:	d003      	beq.n	80197a6 <_dtoa_r+0x87e>
 801979e:	4649      	mov	r1, r9
 80197a0:	4630      	mov	r0, r6
 80197a2:	f000 fa6d 	bl	8019c80 <_Bfree>
 80197a6:	4639      	mov	r1, r7
 80197a8:	4630      	mov	r0, r6
 80197aa:	f000 fa69 	bl	8019c80 <_Bfree>
 80197ae:	e692      	b.n	80194d6 <_dtoa_r+0x5ae>
 80197b0:	2400      	movs	r4, #0
 80197b2:	4627      	mov	r7, r4
 80197b4:	e7e0      	b.n	8019778 <_dtoa_r+0x850>
 80197b6:	4693      	mov	fp, r2
 80197b8:	4627      	mov	r7, r4
 80197ba:	e5c1      	b.n	8019340 <_dtoa_r+0x418>
 80197bc:	9b07      	ldr	r3, [sp, #28]
 80197be:	46ca      	mov	sl, r9
 80197c0:	2b00      	cmp	r3, #0
 80197c2:	f000 8100 	beq.w	80199c6 <_dtoa_r+0xa9e>
 80197c6:	f1b8 0f00 	cmp.w	r8, #0
 80197ca:	dd05      	ble.n	80197d8 <_dtoa_r+0x8b0>
 80197cc:	4639      	mov	r1, r7
 80197ce:	4642      	mov	r2, r8
 80197d0:	4630      	mov	r0, r6
 80197d2:	f000 fc25 	bl	801a020 <__lshift>
 80197d6:	4607      	mov	r7, r0
 80197d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80197da:	2b00      	cmp	r3, #0
 80197dc:	d05d      	beq.n	801989a <_dtoa_r+0x972>
 80197de:	6879      	ldr	r1, [r7, #4]
 80197e0:	4630      	mov	r0, r6
 80197e2:	f000 fa0d 	bl	8019c00 <_Balloc>
 80197e6:	4680      	mov	r8, r0
 80197e8:	b928      	cbnz	r0, 80197f6 <_dtoa_r+0x8ce>
 80197ea:	4b82      	ldr	r3, [pc, #520]	; (80199f4 <_dtoa_r+0xacc>)
 80197ec:	4602      	mov	r2, r0
 80197ee:	f240 21ef 	movw	r1, #751	; 0x2ef
 80197f2:	f7ff bbb1 	b.w	8018f58 <_dtoa_r+0x30>
 80197f6:	693a      	ldr	r2, [r7, #16]
 80197f8:	3202      	adds	r2, #2
 80197fa:	0092      	lsls	r2, r2, #2
 80197fc:	f107 010c 	add.w	r1, r7, #12
 8019800:	300c      	adds	r0, #12
 8019802:	f7ff fadd 	bl	8018dc0 <memcpy>
 8019806:	2201      	movs	r2, #1
 8019808:	4641      	mov	r1, r8
 801980a:	4630      	mov	r0, r6
 801980c:	f000 fc08 	bl	801a020 <__lshift>
 8019810:	9b01      	ldr	r3, [sp, #4]
 8019812:	3301      	adds	r3, #1
 8019814:	9304      	str	r3, [sp, #16]
 8019816:	9b01      	ldr	r3, [sp, #4]
 8019818:	4453      	add	r3, sl
 801981a:	9308      	str	r3, [sp, #32]
 801981c:	9b02      	ldr	r3, [sp, #8]
 801981e:	f003 0301 	and.w	r3, r3, #1
 8019822:	46b9      	mov	r9, r7
 8019824:	9307      	str	r3, [sp, #28]
 8019826:	4607      	mov	r7, r0
 8019828:	9b04      	ldr	r3, [sp, #16]
 801982a:	4621      	mov	r1, r4
 801982c:	3b01      	subs	r3, #1
 801982e:	4628      	mov	r0, r5
 8019830:	9302      	str	r3, [sp, #8]
 8019832:	f7ff faf1 	bl	8018e18 <quorem>
 8019836:	4603      	mov	r3, r0
 8019838:	3330      	adds	r3, #48	; 0x30
 801983a:	9005      	str	r0, [sp, #20]
 801983c:	4649      	mov	r1, r9
 801983e:	4628      	mov	r0, r5
 8019840:	9309      	str	r3, [sp, #36]	; 0x24
 8019842:	f000 fc59 	bl	801a0f8 <__mcmp>
 8019846:	463a      	mov	r2, r7
 8019848:	4682      	mov	sl, r0
 801984a:	4621      	mov	r1, r4
 801984c:	4630      	mov	r0, r6
 801984e:	f000 fc6f 	bl	801a130 <__mdiff>
 8019852:	68c2      	ldr	r2, [r0, #12]
 8019854:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8019856:	4680      	mov	r8, r0
 8019858:	bb0a      	cbnz	r2, 801989e <_dtoa_r+0x976>
 801985a:	4601      	mov	r1, r0
 801985c:	4628      	mov	r0, r5
 801985e:	f000 fc4b 	bl	801a0f8 <__mcmp>
 8019862:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8019864:	4602      	mov	r2, r0
 8019866:	4641      	mov	r1, r8
 8019868:	4630      	mov	r0, r6
 801986a:	e9cd 3209 	strd	r3, r2, [sp, #36]	; 0x24
 801986e:	f000 fa07 	bl	8019c80 <_Bfree>
 8019872:	9b06      	ldr	r3, [sp, #24]
 8019874:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8019876:	f8dd 8010 	ldr.w	r8, [sp, #16]
 801987a:	ea43 0102 	orr.w	r1, r3, r2
 801987e:	9b07      	ldr	r3, [sp, #28]
 8019880:	4319      	orrs	r1, r3
 8019882:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8019884:	d10d      	bne.n	80198a2 <_dtoa_r+0x97a>
 8019886:	2b39      	cmp	r3, #57	; 0x39
 8019888:	d029      	beq.n	80198de <_dtoa_r+0x9b6>
 801988a:	f1ba 0f00 	cmp.w	sl, #0
 801988e:	dd01      	ble.n	8019894 <_dtoa_r+0x96c>
 8019890:	9b05      	ldr	r3, [sp, #20]
 8019892:	3331      	adds	r3, #49	; 0x31
 8019894:	9a02      	ldr	r2, [sp, #8]
 8019896:	7013      	strb	r3, [r2, #0]
 8019898:	e775      	b.n	8019786 <_dtoa_r+0x85e>
 801989a:	4638      	mov	r0, r7
 801989c:	e7b8      	b.n	8019810 <_dtoa_r+0x8e8>
 801989e:	2201      	movs	r2, #1
 80198a0:	e7e1      	b.n	8019866 <_dtoa_r+0x93e>
 80198a2:	f1ba 0f00 	cmp.w	sl, #0
 80198a6:	db06      	blt.n	80198b6 <_dtoa_r+0x98e>
 80198a8:	9906      	ldr	r1, [sp, #24]
 80198aa:	ea41 0a0a 	orr.w	sl, r1, sl
 80198ae:	9907      	ldr	r1, [sp, #28]
 80198b0:	ea5a 0a01 	orrs.w	sl, sl, r1
 80198b4:	d120      	bne.n	80198f8 <_dtoa_r+0x9d0>
 80198b6:	2a00      	cmp	r2, #0
 80198b8:	ddec      	ble.n	8019894 <_dtoa_r+0x96c>
 80198ba:	4629      	mov	r1, r5
 80198bc:	2201      	movs	r2, #1
 80198be:	4630      	mov	r0, r6
 80198c0:	9304      	str	r3, [sp, #16]
 80198c2:	f000 fbad 	bl	801a020 <__lshift>
 80198c6:	4621      	mov	r1, r4
 80198c8:	4605      	mov	r5, r0
 80198ca:	f000 fc15 	bl	801a0f8 <__mcmp>
 80198ce:	2800      	cmp	r0, #0
 80198d0:	9b04      	ldr	r3, [sp, #16]
 80198d2:	dc02      	bgt.n	80198da <_dtoa_r+0x9b2>
 80198d4:	d1de      	bne.n	8019894 <_dtoa_r+0x96c>
 80198d6:	07da      	lsls	r2, r3, #31
 80198d8:	d5dc      	bpl.n	8019894 <_dtoa_r+0x96c>
 80198da:	2b39      	cmp	r3, #57	; 0x39
 80198dc:	d1d8      	bne.n	8019890 <_dtoa_r+0x968>
 80198de:	9a02      	ldr	r2, [sp, #8]
 80198e0:	2339      	movs	r3, #57	; 0x39
 80198e2:	7013      	strb	r3, [r2, #0]
 80198e4:	4643      	mov	r3, r8
 80198e6:	4698      	mov	r8, r3
 80198e8:	3b01      	subs	r3, #1
 80198ea:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 80198ee:	2a39      	cmp	r2, #57	; 0x39
 80198f0:	d051      	beq.n	8019996 <_dtoa_r+0xa6e>
 80198f2:	3201      	adds	r2, #1
 80198f4:	701a      	strb	r2, [r3, #0]
 80198f6:	e746      	b.n	8019786 <_dtoa_r+0x85e>
 80198f8:	2a00      	cmp	r2, #0
 80198fa:	dd03      	ble.n	8019904 <_dtoa_r+0x9dc>
 80198fc:	2b39      	cmp	r3, #57	; 0x39
 80198fe:	d0ee      	beq.n	80198de <_dtoa_r+0x9b6>
 8019900:	3301      	adds	r3, #1
 8019902:	e7c7      	b.n	8019894 <_dtoa_r+0x96c>
 8019904:	9a04      	ldr	r2, [sp, #16]
 8019906:	9908      	ldr	r1, [sp, #32]
 8019908:	f802 3c01 	strb.w	r3, [r2, #-1]
 801990c:	428a      	cmp	r2, r1
 801990e:	d02b      	beq.n	8019968 <_dtoa_r+0xa40>
 8019910:	4629      	mov	r1, r5
 8019912:	2300      	movs	r3, #0
 8019914:	220a      	movs	r2, #10
 8019916:	4630      	mov	r0, r6
 8019918:	f000 f9d4 	bl	8019cc4 <__multadd>
 801991c:	45b9      	cmp	r9, r7
 801991e:	4605      	mov	r5, r0
 8019920:	f04f 0300 	mov.w	r3, #0
 8019924:	f04f 020a 	mov.w	r2, #10
 8019928:	4649      	mov	r1, r9
 801992a:	4630      	mov	r0, r6
 801992c:	d107      	bne.n	801993e <_dtoa_r+0xa16>
 801992e:	f000 f9c9 	bl	8019cc4 <__multadd>
 8019932:	4681      	mov	r9, r0
 8019934:	4607      	mov	r7, r0
 8019936:	9b04      	ldr	r3, [sp, #16]
 8019938:	3301      	adds	r3, #1
 801993a:	9304      	str	r3, [sp, #16]
 801993c:	e774      	b.n	8019828 <_dtoa_r+0x900>
 801993e:	f000 f9c1 	bl	8019cc4 <__multadd>
 8019942:	4639      	mov	r1, r7
 8019944:	4681      	mov	r9, r0
 8019946:	2300      	movs	r3, #0
 8019948:	220a      	movs	r2, #10
 801994a:	4630      	mov	r0, r6
 801994c:	f000 f9ba 	bl	8019cc4 <__multadd>
 8019950:	4607      	mov	r7, r0
 8019952:	e7f0      	b.n	8019936 <_dtoa_r+0xa0e>
 8019954:	f1ba 0f00 	cmp.w	sl, #0
 8019958:	9a01      	ldr	r2, [sp, #4]
 801995a:	bfcc      	ite	gt
 801995c:	46d0      	movgt	r8, sl
 801995e:	f04f 0801 	movle.w	r8, #1
 8019962:	4490      	add	r8, r2
 8019964:	f04f 0900 	mov.w	r9, #0
 8019968:	4629      	mov	r1, r5
 801996a:	2201      	movs	r2, #1
 801996c:	4630      	mov	r0, r6
 801996e:	9302      	str	r3, [sp, #8]
 8019970:	f000 fb56 	bl	801a020 <__lshift>
 8019974:	4621      	mov	r1, r4
 8019976:	4605      	mov	r5, r0
 8019978:	f000 fbbe 	bl	801a0f8 <__mcmp>
 801997c:	2800      	cmp	r0, #0
 801997e:	dcb1      	bgt.n	80198e4 <_dtoa_r+0x9bc>
 8019980:	d102      	bne.n	8019988 <_dtoa_r+0xa60>
 8019982:	9b02      	ldr	r3, [sp, #8]
 8019984:	07db      	lsls	r3, r3, #31
 8019986:	d4ad      	bmi.n	80198e4 <_dtoa_r+0x9bc>
 8019988:	4643      	mov	r3, r8
 801998a:	4698      	mov	r8, r3
 801998c:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8019990:	2a30      	cmp	r2, #48	; 0x30
 8019992:	d0fa      	beq.n	801998a <_dtoa_r+0xa62>
 8019994:	e6f7      	b.n	8019786 <_dtoa_r+0x85e>
 8019996:	9a01      	ldr	r2, [sp, #4]
 8019998:	429a      	cmp	r2, r3
 801999a:	d1a4      	bne.n	80198e6 <_dtoa_r+0x9be>
 801999c:	f10b 0b01 	add.w	fp, fp, #1
 80199a0:	2331      	movs	r3, #49	; 0x31
 80199a2:	e778      	b.n	8019896 <_dtoa_r+0x96e>
 80199a4:	4b14      	ldr	r3, [pc, #80]	; (80199f8 <_dtoa_r+0xad0>)
 80199a6:	f7ff bb2a 	b.w	8018ffe <_dtoa_r+0xd6>
 80199aa:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80199ac:	2b00      	cmp	r3, #0
 80199ae:	f47f ab05 	bne.w	8018fbc <_dtoa_r+0x94>
 80199b2:	4b12      	ldr	r3, [pc, #72]	; (80199fc <_dtoa_r+0xad4>)
 80199b4:	f7ff bb23 	b.w	8018ffe <_dtoa_r+0xd6>
 80199b8:	f1ba 0f00 	cmp.w	sl, #0
 80199bc:	dc03      	bgt.n	80199c6 <_dtoa_r+0xa9e>
 80199be:	9b06      	ldr	r3, [sp, #24]
 80199c0:	2b02      	cmp	r3, #2
 80199c2:	f73f aec8 	bgt.w	8019756 <_dtoa_r+0x82e>
 80199c6:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80199ca:	4621      	mov	r1, r4
 80199cc:	4628      	mov	r0, r5
 80199ce:	f7ff fa23 	bl	8018e18 <quorem>
 80199d2:	f100 0330 	add.w	r3, r0, #48	; 0x30
 80199d6:	f808 3b01 	strb.w	r3, [r8], #1
 80199da:	9a01      	ldr	r2, [sp, #4]
 80199dc:	eba8 0202 	sub.w	r2, r8, r2
 80199e0:	4592      	cmp	sl, r2
 80199e2:	ddb7      	ble.n	8019954 <_dtoa_r+0xa2c>
 80199e4:	4629      	mov	r1, r5
 80199e6:	2300      	movs	r3, #0
 80199e8:	220a      	movs	r2, #10
 80199ea:	4630      	mov	r0, r6
 80199ec:	f000 f96a 	bl	8019cc4 <__multadd>
 80199f0:	4605      	mov	r5, r0
 80199f2:	e7ea      	b.n	80199ca <_dtoa_r+0xaa2>
 80199f4:	0801dba7 	.word	0x0801dba7
 80199f8:	0801dae2 	.word	0x0801dae2
 80199fc:	0801db42 	.word	0x0801db42

08019a00 <_free_r>:
 8019a00:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8019a02:	2900      	cmp	r1, #0
 8019a04:	d044      	beq.n	8019a90 <_free_r+0x90>
 8019a06:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8019a0a:	9001      	str	r0, [sp, #4]
 8019a0c:	2b00      	cmp	r3, #0
 8019a0e:	f1a1 0404 	sub.w	r4, r1, #4
 8019a12:	bfb8      	it	lt
 8019a14:	18e4      	addlt	r4, r4, r3
 8019a16:	f000 f8e7 	bl	8019be8 <__malloc_lock>
 8019a1a:	4a1e      	ldr	r2, [pc, #120]	; (8019a94 <_free_r+0x94>)
 8019a1c:	9801      	ldr	r0, [sp, #4]
 8019a1e:	6813      	ldr	r3, [r2, #0]
 8019a20:	b933      	cbnz	r3, 8019a30 <_free_r+0x30>
 8019a22:	6063      	str	r3, [r4, #4]
 8019a24:	6014      	str	r4, [r2, #0]
 8019a26:	b003      	add	sp, #12
 8019a28:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8019a2c:	f000 b8e2 	b.w	8019bf4 <__malloc_unlock>
 8019a30:	42a3      	cmp	r3, r4
 8019a32:	d908      	bls.n	8019a46 <_free_r+0x46>
 8019a34:	6825      	ldr	r5, [r4, #0]
 8019a36:	1961      	adds	r1, r4, r5
 8019a38:	428b      	cmp	r3, r1
 8019a3a:	bf01      	itttt	eq
 8019a3c:	6819      	ldreq	r1, [r3, #0]
 8019a3e:	685b      	ldreq	r3, [r3, #4]
 8019a40:	1949      	addeq	r1, r1, r5
 8019a42:	6021      	streq	r1, [r4, #0]
 8019a44:	e7ed      	b.n	8019a22 <_free_r+0x22>
 8019a46:	461a      	mov	r2, r3
 8019a48:	685b      	ldr	r3, [r3, #4]
 8019a4a:	b10b      	cbz	r3, 8019a50 <_free_r+0x50>
 8019a4c:	42a3      	cmp	r3, r4
 8019a4e:	d9fa      	bls.n	8019a46 <_free_r+0x46>
 8019a50:	6811      	ldr	r1, [r2, #0]
 8019a52:	1855      	adds	r5, r2, r1
 8019a54:	42a5      	cmp	r5, r4
 8019a56:	d10b      	bne.n	8019a70 <_free_r+0x70>
 8019a58:	6824      	ldr	r4, [r4, #0]
 8019a5a:	4421      	add	r1, r4
 8019a5c:	1854      	adds	r4, r2, r1
 8019a5e:	42a3      	cmp	r3, r4
 8019a60:	6011      	str	r1, [r2, #0]
 8019a62:	d1e0      	bne.n	8019a26 <_free_r+0x26>
 8019a64:	681c      	ldr	r4, [r3, #0]
 8019a66:	685b      	ldr	r3, [r3, #4]
 8019a68:	6053      	str	r3, [r2, #4]
 8019a6a:	440c      	add	r4, r1
 8019a6c:	6014      	str	r4, [r2, #0]
 8019a6e:	e7da      	b.n	8019a26 <_free_r+0x26>
 8019a70:	d902      	bls.n	8019a78 <_free_r+0x78>
 8019a72:	230c      	movs	r3, #12
 8019a74:	6003      	str	r3, [r0, #0]
 8019a76:	e7d6      	b.n	8019a26 <_free_r+0x26>
 8019a78:	6825      	ldr	r5, [r4, #0]
 8019a7a:	1961      	adds	r1, r4, r5
 8019a7c:	428b      	cmp	r3, r1
 8019a7e:	bf04      	itt	eq
 8019a80:	6819      	ldreq	r1, [r3, #0]
 8019a82:	685b      	ldreq	r3, [r3, #4]
 8019a84:	6063      	str	r3, [r4, #4]
 8019a86:	bf04      	itt	eq
 8019a88:	1949      	addeq	r1, r1, r5
 8019a8a:	6021      	streq	r1, [r4, #0]
 8019a8c:	6054      	str	r4, [r2, #4]
 8019a8e:	e7ca      	b.n	8019a26 <_free_r+0x26>
 8019a90:	b003      	add	sp, #12
 8019a92:	bd30      	pop	{r4, r5, pc}
 8019a94:	20008278 	.word	0x20008278

08019a98 <malloc>:
 8019a98:	4b02      	ldr	r3, [pc, #8]	; (8019aa4 <malloc+0xc>)
 8019a9a:	4601      	mov	r1, r0
 8019a9c:	6818      	ldr	r0, [r3, #0]
 8019a9e:	f000 b823 	b.w	8019ae8 <_malloc_r>
 8019aa2:	bf00      	nop
 8019aa4:	200000b8 	.word	0x200000b8

08019aa8 <sbrk_aligned>:
 8019aa8:	b570      	push	{r4, r5, r6, lr}
 8019aaa:	4e0e      	ldr	r6, [pc, #56]	; (8019ae4 <sbrk_aligned+0x3c>)
 8019aac:	460c      	mov	r4, r1
 8019aae:	6831      	ldr	r1, [r6, #0]
 8019ab0:	4605      	mov	r5, r0
 8019ab2:	b911      	cbnz	r1, 8019aba <sbrk_aligned+0x12>
 8019ab4:	f000 fea8 	bl	801a808 <_sbrk_r>
 8019ab8:	6030      	str	r0, [r6, #0]
 8019aba:	4621      	mov	r1, r4
 8019abc:	4628      	mov	r0, r5
 8019abe:	f000 fea3 	bl	801a808 <_sbrk_r>
 8019ac2:	1c43      	adds	r3, r0, #1
 8019ac4:	d00a      	beq.n	8019adc <sbrk_aligned+0x34>
 8019ac6:	1cc4      	adds	r4, r0, #3
 8019ac8:	f024 0403 	bic.w	r4, r4, #3
 8019acc:	42a0      	cmp	r0, r4
 8019ace:	d007      	beq.n	8019ae0 <sbrk_aligned+0x38>
 8019ad0:	1a21      	subs	r1, r4, r0
 8019ad2:	4628      	mov	r0, r5
 8019ad4:	f000 fe98 	bl	801a808 <_sbrk_r>
 8019ad8:	3001      	adds	r0, #1
 8019ada:	d101      	bne.n	8019ae0 <sbrk_aligned+0x38>
 8019adc:	f04f 34ff 	mov.w	r4, #4294967295
 8019ae0:	4620      	mov	r0, r4
 8019ae2:	bd70      	pop	{r4, r5, r6, pc}
 8019ae4:	2000827c 	.word	0x2000827c

08019ae8 <_malloc_r>:
 8019ae8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8019aec:	1ccd      	adds	r5, r1, #3
 8019aee:	f025 0503 	bic.w	r5, r5, #3
 8019af2:	3508      	adds	r5, #8
 8019af4:	2d0c      	cmp	r5, #12
 8019af6:	bf38      	it	cc
 8019af8:	250c      	movcc	r5, #12
 8019afa:	2d00      	cmp	r5, #0
 8019afc:	4607      	mov	r7, r0
 8019afe:	db01      	blt.n	8019b04 <_malloc_r+0x1c>
 8019b00:	42a9      	cmp	r1, r5
 8019b02:	d905      	bls.n	8019b10 <_malloc_r+0x28>
 8019b04:	230c      	movs	r3, #12
 8019b06:	603b      	str	r3, [r7, #0]
 8019b08:	2600      	movs	r6, #0
 8019b0a:	4630      	mov	r0, r6
 8019b0c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8019b10:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8019be4 <_malloc_r+0xfc>
 8019b14:	f000 f868 	bl	8019be8 <__malloc_lock>
 8019b18:	f8d8 3000 	ldr.w	r3, [r8]
 8019b1c:	461c      	mov	r4, r3
 8019b1e:	bb5c      	cbnz	r4, 8019b78 <_malloc_r+0x90>
 8019b20:	4629      	mov	r1, r5
 8019b22:	4638      	mov	r0, r7
 8019b24:	f7ff ffc0 	bl	8019aa8 <sbrk_aligned>
 8019b28:	1c43      	adds	r3, r0, #1
 8019b2a:	4604      	mov	r4, r0
 8019b2c:	d155      	bne.n	8019bda <_malloc_r+0xf2>
 8019b2e:	f8d8 4000 	ldr.w	r4, [r8]
 8019b32:	4626      	mov	r6, r4
 8019b34:	2e00      	cmp	r6, #0
 8019b36:	d145      	bne.n	8019bc4 <_malloc_r+0xdc>
 8019b38:	2c00      	cmp	r4, #0
 8019b3a:	d048      	beq.n	8019bce <_malloc_r+0xe6>
 8019b3c:	6823      	ldr	r3, [r4, #0]
 8019b3e:	4631      	mov	r1, r6
 8019b40:	4638      	mov	r0, r7
 8019b42:	eb04 0903 	add.w	r9, r4, r3
 8019b46:	f000 fe5f 	bl	801a808 <_sbrk_r>
 8019b4a:	4581      	cmp	r9, r0
 8019b4c:	d13f      	bne.n	8019bce <_malloc_r+0xe6>
 8019b4e:	6821      	ldr	r1, [r4, #0]
 8019b50:	1a6d      	subs	r5, r5, r1
 8019b52:	4629      	mov	r1, r5
 8019b54:	4638      	mov	r0, r7
 8019b56:	f7ff ffa7 	bl	8019aa8 <sbrk_aligned>
 8019b5a:	3001      	adds	r0, #1
 8019b5c:	d037      	beq.n	8019bce <_malloc_r+0xe6>
 8019b5e:	6823      	ldr	r3, [r4, #0]
 8019b60:	442b      	add	r3, r5
 8019b62:	6023      	str	r3, [r4, #0]
 8019b64:	f8d8 3000 	ldr.w	r3, [r8]
 8019b68:	2b00      	cmp	r3, #0
 8019b6a:	d038      	beq.n	8019bde <_malloc_r+0xf6>
 8019b6c:	685a      	ldr	r2, [r3, #4]
 8019b6e:	42a2      	cmp	r2, r4
 8019b70:	d12b      	bne.n	8019bca <_malloc_r+0xe2>
 8019b72:	2200      	movs	r2, #0
 8019b74:	605a      	str	r2, [r3, #4]
 8019b76:	e00f      	b.n	8019b98 <_malloc_r+0xb0>
 8019b78:	6822      	ldr	r2, [r4, #0]
 8019b7a:	1b52      	subs	r2, r2, r5
 8019b7c:	d41f      	bmi.n	8019bbe <_malloc_r+0xd6>
 8019b7e:	2a0b      	cmp	r2, #11
 8019b80:	d917      	bls.n	8019bb2 <_malloc_r+0xca>
 8019b82:	1961      	adds	r1, r4, r5
 8019b84:	42a3      	cmp	r3, r4
 8019b86:	6025      	str	r5, [r4, #0]
 8019b88:	bf18      	it	ne
 8019b8a:	6059      	strne	r1, [r3, #4]
 8019b8c:	6863      	ldr	r3, [r4, #4]
 8019b8e:	bf08      	it	eq
 8019b90:	f8c8 1000 	streq.w	r1, [r8]
 8019b94:	5162      	str	r2, [r4, r5]
 8019b96:	604b      	str	r3, [r1, #4]
 8019b98:	4638      	mov	r0, r7
 8019b9a:	f104 060b 	add.w	r6, r4, #11
 8019b9e:	f000 f829 	bl	8019bf4 <__malloc_unlock>
 8019ba2:	f026 0607 	bic.w	r6, r6, #7
 8019ba6:	1d23      	adds	r3, r4, #4
 8019ba8:	1af2      	subs	r2, r6, r3
 8019baa:	d0ae      	beq.n	8019b0a <_malloc_r+0x22>
 8019bac:	1b9b      	subs	r3, r3, r6
 8019bae:	50a3      	str	r3, [r4, r2]
 8019bb0:	e7ab      	b.n	8019b0a <_malloc_r+0x22>
 8019bb2:	42a3      	cmp	r3, r4
 8019bb4:	6862      	ldr	r2, [r4, #4]
 8019bb6:	d1dd      	bne.n	8019b74 <_malloc_r+0x8c>
 8019bb8:	f8c8 2000 	str.w	r2, [r8]
 8019bbc:	e7ec      	b.n	8019b98 <_malloc_r+0xb0>
 8019bbe:	4623      	mov	r3, r4
 8019bc0:	6864      	ldr	r4, [r4, #4]
 8019bc2:	e7ac      	b.n	8019b1e <_malloc_r+0x36>
 8019bc4:	4634      	mov	r4, r6
 8019bc6:	6876      	ldr	r6, [r6, #4]
 8019bc8:	e7b4      	b.n	8019b34 <_malloc_r+0x4c>
 8019bca:	4613      	mov	r3, r2
 8019bcc:	e7cc      	b.n	8019b68 <_malloc_r+0x80>
 8019bce:	230c      	movs	r3, #12
 8019bd0:	603b      	str	r3, [r7, #0]
 8019bd2:	4638      	mov	r0, r7
 8019bd4:	f000 f80e 	bl	8019bf4 <__malloc_unlock>
 8019bd8:	e797      	b.n	8019b0a <_malloc_r+0x22>
 8019bda:	6025      	str	r5, [r4, #0]
 8019bdc:	e7dc      	b.n	8019b98 <_malloc_r+0xb0>
 8019bde:	605b      	str	r3, [r3, #4]
 8019be0:	deff      	udf	#255	; 0xff
 8019be2:	bf00      	nop
 8019be4:	20008278 	.word	0x20008278

08019be8 <__malloc_lock>:
 8019be8:	4801      	ldr	r0, [pc, #4]	; (8019bf0 <__malloc_lock+0x8>)
 8019bea:	f7ff b8e7 	b.w	8018dbc <__retarget_lock_acquire_recursive>
 8019bee:	bf00      	nop
 8019bf0:	20008274 	.word	0x20008274

08019bf4 <__malloc_unlock>:
 8019bf4:	4801      	ldr	r0, [pc, #4]	; (8019bfc <__malloc_unlock+0x8>)
 8019bf6:	f7ff b8e2 	b.w	8018dbe <__retarget_lock_release_recursive>
 8019bfa:	bf00      	nop
 8019bfc:	20008274 	.word	0x20008274

08019c00 <_Balloc>:
 8019c00:	b570      	push	{r4, r5, r6, lr}
 8019c02:	69c6      	ldr	r6, [r0, #28]
 8019c04:	4604      	mov	r4, r0
 8019c06:	460d      	mov	r5, r1
 8019c08:	b976      	cbnz	r6, 8019c28 <_Balloc+0x28>
 8019c0a:	2010      	movs	r0, #16
 8019c0c:	f7ff ff44 	bl	8019a98 <malloc>
 8019c10:	4602      	mov	r2, r0
 8019c12:	61e0      	str	r0, [r4, #28]
 8019c14:	b920      	cbnz	r0, 8019c20 <_Balloc+0x20>
 8019c16:	4b18      	ldr	r3, [pc, #96]	; (8019c78 <_Balloc+0x78>)
 8019c18:	4818      	ldr	r0, [pc, #96]	; (8019c7c <_Balloc+0x7c>)
 8019c1a:	216b      	movs	r1, #107	; 0x6b
 8019c1c:	f7ff f8de 	bl	8018ddc <__assert_func>
 8019c20:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8019c24:	6006      	str	r6, [r0, #0]
 8019c26:	60c6      	str	r6, [r0, #12]
 8019c28:	69e6      	ldr	r6, [r4, #28]
 8019c2a:	68f3      	ldr	r3, [r6, #12]
 8019c2c:	b183      	cbz	r3, 8019c50 <_Balloc+0x50>
 8019c2e:	69e3      	ldr	r3, [r4, #28]
 8019c30:	68db      	ldr	r3, [r3, #12]
 8019c32:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8019c36:	b9b8      	cbnz	r0, 8019c68 <_Balloc+0x68>
 8019c38:	2101      	movs	r1, #1
 8019c3a:	fa01 f605 	lsl.w	r6, r1, r5
 8019c3e:	1d72      	adds	r2, r6, #5
 8019c40:	0092      	lsls	r2, r2, #2
 8019c42:	4620      	mov	r0, r4
 8019c44:	f000 fdf7 	bl	801a836 <_calloc_r>
 8019c48:	b160      	cbz	r0, 8019c64 <_Balloc+0x64>
 8019c4a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8019c4e:	e00e      	b.n	8019c6e <_Balloc+0x6e>
 8019c50:	2221      	movs	r2, #33	; 0x21
 8019c52:	2104      	movs	r1, #4
 8019c54:	4620      	mov	r0, r4
 8019c56:	f000 fdee 	bl	801a836 <_calloc_r>
 8019c5a:	69e3      	ldr	r3, [r4, #28]
 8019c5c:	60f0      	str	r0, [r6, #12]
 8019c5e:	68db      	ldr	r3, [r3, #12]
 8019c60:	2b00      	cmp	r3, #0
 8019c62:	d1e4      	bne.n	8019c2e <_Balloc+0x2e>
 8019c64:	2000      	movs	r0, #0
 8019c66:	bd70      	pop	{r4, r5, r6, pc}
 8019c68:	6802      	ldr	r2, [r0, #0]
 8019c6a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8019c6e:	2300      	movs	r3, #0
 8019c70:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8019c74:	e7f7      	b.n	8019c66 <_Balloc+0x66>
 8019c76:	bf00      	nop
 8019c78:	0801d962 	.word	0x0801d962
 8019c7c:	0801dbb8 	.word	0x0801dbb8

08019c80 <_Bfree>:
 8019c80:	b570      	push	{r4, r5, r6, lr}
 8019c82:	69c6      	ldr	r6, [r0, #28]
 8019c84:	4605      	mov	r5, r0
 8019c86:	460c      	mov	r4, r1
 8019c88:	b976      	cbnz	r6, 8019ca8 <_Bfree+0x28>
 8019c8a:	2010      	movs	r0, #16
 8019c8c:	f7ff ff04 	bl	8019a98 <malloc>
 8019c90:	4602      	mov	r2, r0
 8019c92:	61e8      	str	r0, [r5, #28]
 8019c94:	b920      	cbnz	r0, 8019ca0 <_Bfree+0x20>
 8019c96:	4b09      	ldr	r3, [pc, #36]	; (8019cbc <_Bfree+0x3c>)
 8019c98:	4809      	ldr	r0, [pc, #36]	; (8019cc0 <_Bfree+0x40>)
 8019c9a:	218f      	movs	r1, #143	; 0x8f
 8019c9c:	f7ff f89e 	bl	8018ddc <__assert_func>
 8019ca0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8019ca4:	6006      	str	r6, [r0, #0]
 8019ca6:	60c6      	str	r6, [r0, #12]
 8019ca8:	b13c      	cbz	r4, 8019cba <_Bfree+0x3a>
 8019caa:	69eb      	ldr	r3, [r5, #28]
 8019cac:	6862      	ldr	r2, [r4, #4]
 8019cae:	68db      	ldr	r3, [r3, #12]
 8019cb0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8019cb4:	6021      	str	r1, [r4, #0]
 8019cb6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8019cba:	bd70      	pop	{r4, r5, r6, pc}
 8019cbc:	0801d962 	.word	0x0801d962
 8019cc0:	0801dbb8 	.word	0x0801dbb8

08019cc4 <__multadd>:
 8019cc4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019cc8:	690d      	ldr	r5, [r1, #16]
 8019cca:	4607      	mov	r7, r0
 8019ccc:	460c      	mov	r4, r1
 8019cce:	461e      	mov	r6, r3
 8019cd0:	f101 0c14 	add.w	ip, r1, #20
 8019cd4:	2000      	movs	r0, #0
 8019cd6:	f8dc 3000 	ldr.w	r3, [ip]
 8019cda:	b299      	uxth	r1, r3
 8019cdc:	fb02 6101 	mla	r1, r2, r1, r6
 8019ce0:	0c1e      	lsrs	r6, r3, #16
 8019ce2:	0c0b      	lsrs	r3, r1, #16
 8019ce4:	fb02 3306 	mla	r3, r2, r6, r3
 8019ce8:	b289      	uxth	r1, r1
 8019cea:	3001      	adds	r0, #1
 8019cec:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8019cf0:	4285      	cmp	r5, r0
 8019cf2:	f84c 1b04 	str.w	r1, [ip], #4
 8019cf6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8019cfa:	dcec      	bgt.n	8019cd6 <__multadd+0x12>
 8019cfc:	b30e      	cbz	r6, 8019d42 <__multadd+0x7e>
 8019cfe:	68a3      	ldr	r3, [r4, #8]
 8019d00:	42ab      	cmp	r3, r5
 8019d02:	dc19      	bgt.n	8019d38 <__multadd+0x74>
 8019d04:	6861      	ldr	r1, [r4, #4]
 8019d06:	4638      	mov	r0, r7
 8019d08:	3101      	adds	r1, #1
 8019d0a:	f7ff ff79 	bl	8019c00 <_Balloc>
 8019d0e:	4680      	mov	r8, r0
 8019d10:	b928      	cbnz	r0, 8019d1e <__multadd+0x5a>
 8019d12:	4602      	mov	r2, r0
 8019d14:	4b0c      	ldr	r3, [pc, #48]	; (8019d48 <__multadd+0x84>)
 8019d16:	480d      	ldr	r0, [pc, #52]	; (8019d4c <__multadd+0x88>)
 8019d18:	21ba      	movs	r1, #186	; 0xba
 8019d1a:	f7ff f85f 	bl	8018ddc <__assert_func>
 8019d1e:	6922      	ldr	r2, [r4, #16]
 8019d20:	3202      	adds	r2, #2
 8019d22:	f104 010c 	add.w	r1, r4, #12
 8019d26:	0092      	lsls	r2, r2, #2
 8019d28:	300c      	adds	r0, #12
 8019d2a:	f7ff f849 	bl	8018dc0 <memcpy>
 8019d2e:	4621      	mov	r1, r4
 8019d30:	4638      	mov	r0, r7
 8019d32:	f7ff ffa5 	bl	8019c80 <_Bfree>
 8019d36:	4644      	mov	r4, r8
 8019d38:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8019d3c:	3501      	adds	r5, #1
 8019d3e:	615e      	str	r6, [r3, #20]
 8019d40:	6125      	str	r5, [r4, #16]
 8019d42:	4620      	mov	r0, r4
 8019d44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019d48:	0801dba7 	.word	0x0801dba7
 8019d4c:	0801dbb8 	.word	0x0801dbb8

08019d50 <__hi0bits>:
 8019d50:	0c03      	lsrs	r3, r0, #16
 8019d52:	041b      	lsls	r3, r3, #16
 8019d54:	b9d3      	cbnz	r3, 8019d8c <__hi0bits+0x3c>
 8019d56:	0400      	lsls	r0, r0, #16
 8019d58:	2310      	movs	r3, #16
 8019d5a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8019d5e:	bf04      	itt	eq
 8019d60:	0200      	lsleq	r0, r0, #8
 8019d62:	3308      	addeq	r3, #8
 8019d64:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8019d68:	bf04      	itt	eq
 8019d6a:	0100      	lsleq	r0, r0, #4
 8019d6c:	3304      	addeq	r3, #4
 8019d6e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8019d72:	bf04      	itt	eq
 8019d74:	0080      	lsleq	r0, r0, #2
 8019d76:	3302      	addeq	r3, #2
 8019d78:	2800      	cmp	r0, #0
 8019d7a:	db05      	blt.n	8019d88 <__hi0bits+0x38>
 8019d7c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8019d80:	f103 0301 	add.w	r3, r3, #1
 8019d84:	bf08      	it	eq
 8019d86:	2320      	moveq	r3, #32
 8019d88:	4618      	mov	r0, r3
 8019d8a:	4770      	bx	lr
 8019d8c:	2300      	movs	r3, #0
 8019d8e:	e7e4      	b.n	8019d5a <__hi0bits+0xa>

08019d90 <__lo0bits>:
 8019d90:	6803      	ldr	r3, [r0, #0]
 8019d92:	f013 0207 	ands.w	r2, r3, #7
 8019d96:	d00c      	beq.n	8019db2 <__lo0bits+0x22>
 8019d98:	07d9      	lsls	r1, r3, #31
 8019d9a:	d422      	bmi.n	8019de2 <__lo0bits+0x52>
 8019d9c:	079a      	lsls	r2, r3, #30
 8019d9e:	bf49      	itett	mi
 8019da0:	085b      	lsrmi	r3, r3, #1
 8019da2:	089b      	lsrpl	r3, r3, #2
 8019da4:	6003      	strmi	r3, [r0, #0]
 8019da6:	2201      	movmi	r2, #1
 8019da8:	bf5c      	itt	pl
 8019daa:	6003      	strpl	r3, [r0, #0]
 8019dac:	2202      	movpl	r2, #2
 8019dae:	4610      	mov	r0, r2
 8019db0:	4770      	bx	lr
 8019db2:	b299      	uxth	r1, r3
 8019db4:	b909      	cbnz	r1, 8019dba <__lo0bits+0x2a>
 8019db6:	0c1b      	lsrs	r3, r3, #16
 8019db8:	2210      	movs	r2, #16
 8019dba:	b2d9      	uxtb	r1, r3
 8019dbc:	b909      	cbnz	r1, 8019dc2 <__lo0bits+0x32>
 8019dbe:	3208      	adds	r2, #8
 8019dc0:	0a1b      	lsrs	r3, r3, #8
 8019dc2:	0719      	lsls	r1, r3, #28
 8019dc4:	bf04      	itt	eq
 8019dc6:	091b      	lsreq	r3, r3, #4
 8019dc8:	3204      	addeq	r2, #4
 8019dca:	0799      	lsls	r1, r3, #30
 8019dcc:	bf04      	itt	eq
 8019dce:	089b      	lsreq	r3, r3, #2
 8019dd0:	3202      	addeq	r2, #2
 8019dd2:	07d9      	lsls	r1, r3, #31
 8019dd4:	d403      	bmi.n	8019dde <__lo0bits+0x4e>
 8019dd6:	085b      	lsrs	r3, r3, #1
 8019dd8:	f102 0201 	add.w	r2, r2, #1
 8019ddc:	d003      	beq.n	8019de6 <__lo0bits+0x56>
 8019dde:	6003      	str	r3, [r0, #0]
 8019de0:	e7e5      	b.n	8019dae <__lo0bits+0x1e>
 8019de2:	2200      	movs	r2, #0
 8019de4:	e7e3      	b.n	8019dae <__lo0bits+0x1e>
 8019de6:	2220      	movs	r2, #32
 8019de8:	e7e1      	b.n	8019dae <__lo0bits+0x1e>
	...

08019dec <__i2b>:
 8019dec:	b510      	push	{r4, lr}
 8019dee:	460c      	mov	r4, r1
 8019df0:	2101      	movs	r1, #1
 8019df2:	f7ff ff05 	bl	8019c00 <_Balloc>
 8019df6:	4602      	mov	r2, r0
 8019df8:	b928      	cbnz	r0, 8019e06 <__i2b+0x1a>
 8019dfa:	4b05      	ldr	r3, [pc, #20]	; (8019e10 <__i2b+0x24>)
 8019dfc:	4805      	ldr	r0, [pc, #20]	; (8019e14 <__i2b+0x28>)
 8019dfe:	f240 1145 	movw	r1, #325	; 0x145
 8019e02:	f7fe ffeb 	bl	8018ddc <__assert_func>
 8019e06:	2301      	movs	r3, #1
 8019e08:	6144      	str	r4, [r0, #20]
 8019e0a:	6103      	str	r3, [r0, #16]
 8019e0c:	bd10      	pop	{r4, pc}
 8019e0e:	bf00      	nop
 8019e10:	0801dba7 	.word	0x0801dba7
 8019e14:	0801dbb8 	.word	0x0801dbb8

08019e18 <__multiply>:
 8019e18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019e1c:	4691      	mov	r9, r2
 8019e1e:	690a      	ldr	r2, [r1, #16]
 8019e20:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8019e24:	429a      	cmp	r2, r3
 8019e26:	bfb8      	it	lt
 8019e28:	460b      	movlt	r3, r1
 8019e2a:	460c      	mov	r4, r1
 8019e2c:	bfbc      	itt	lt
 8019e2e:	464c      	movlt	r4, r9
 8019e30:	4699      	movlt	r9, r3
 8019e32:	6927      	ldr	r7, [r4, #16]
 8019e34:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8019e38:	68a3      	ldr	r3, [r4, #8]
 8019e3a:	6861      	ldr	r1, [r4, #4]
 8019e3c:	eb07 060a 	add.w	r6, r7, sl
 8019e40:	42b3      	cmp	r3, r6
 8019e42:	b085      	sub	sp, #20
 8019e44:	bfb8      	it	lt
 8019e46:	3101      	addlt	r1, #1
 8019e48:	f7ff feda 	bl	8019c00 <_Balloc>
 8019e4c:	b930      	cbnz	r0, 8019e5c <__multiply+0x44>
 8019e4e:	4602      	mov	r2, r0
 8019e50:	4b44      	ldr	r3, [pc, #272]	; (8019f64 <__multiply+0x14c>)
 8019e52:	4845      	ldr	r0, [pc, #276]	; (8019f68 <__multiply+0x150>)
 8019e54:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8019e58:	f7fe ffc0 	bl	8018ddc <__assert_func>
 8019e5c:	f100 0514 	add.w	r5, r0, #20
 8019e60:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8019e64:	462b      	mov	r3, r5
 8019e66:	2200      	movs	r2, #0
 8019e68:	4543      	cmp	r3, r8
 8019e6a:	d321      	bcc.n	8019eb0 <__multiply+0x98>
 8019e6c:	f104 0314 	add.w	r3, r4, #20
 8019e70:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8019e74:	f109 0314 	add.w	r3, r9, #20
 8019e78:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8019e7c:	9202      	str	r2, [sp, #8]
 8019e7e:	1b3a      	subs	r2, r7, r4
 8019e80:	3a15      	subs	r2, #21
 8019e82:	f022 0203 	bic.w	r2, r2, #3
 8019e86:	3204      	adds	r2, #4
 8019e88:	f104 0115 	add.w	r1, r4, #21
 8019e8c:	428f      	cmp	r7, r1
 8019e8e:	bf38      	it	cc
 8019e90:	2204      	movcc	r2, #4
 8019e92:	9201      	str	r2, [sp, #4]
 8019e94:	9a02      	ldr	r2, [sp, #8]
 8019e96:	9303      	str	r3, [sp, #12]
 8019e98:	429a      	cmp	r2, r3
 8019e9a:	d80c      	bhi.n	8019eb6 <__multiply+0x9e>
 8019e9c:	2e00      	cmp	r6, #0
 8019e9e:	dd03      	ble.n	8019ea8 <__multiply+0x90>
 8019ea0:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8019ea4:	2b00      	cmp	r3, #0
 8019ea6:	d05b      	beq.n	8019f60 <__multiply+0x148>
 8019ea8:	6106      	str	r6, [r0, #16]
 8019eaa:	b005      	add	sp, #20
 8019eac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019eb0:	f843 2b04 	str.w	r2, [r3], #4
 8019eb4:	e7d8      	b.n	8019e68 <__multiply+0x50>
 8019eb6:	f8b3 a000 	ldrh.w	sl, [r3]
 8019eba:	f1ba 0f00 	cmp.w	sl, #0
 8019ebe:	d024      	beq.n	8019f0a <__multiply+0xf2>
 8019ec0:	f104 0e14 	add.w	lr, r4, #20
 8019ec4:	46a9      	mov	r9, r5
 8019ec6:	f04f 0c00 	mov.w	ip, #0
 8019eca:	f85e 2b04 	ldr.w	r2, [lr], #4
 8019ece:	f8d9 1000 	ldr.w	r1, [r9]
 8019ed2:	fa1f fb82 	uxth.w	fp, r2
 8019ed6:	b289      	uxth	r1, r1
 8019ed8:	fb0a 110b 	mla	r1, sl, fp, r1
 8019edc:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8019ee0:	f8d9 2000 	ldr.w	r2, [r9]
 8019ee4:	4461      	add	r1, ip
 8019ee6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8019eea:	fb0a c20b 	mla	r2, sl, fp, ip
 8019eee:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8019ef2:	b289      	uxth	r1, r1
 8019ef4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8019ef8:	4577      	cmp	r7, lr
 8019efa:	f849 1b04 	str.w	r1, [r9], #4
 8019efe:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8019f02:	d8e2      	bhi.n	8019eca <__multiply+0xb2>
 8019f04:	9a01      	ldr	r2, [sp, #4]
 8019f06:	f845 c002 	str.w	ip, [r5, r2]
 8019f0a:	9a03      	ldr	r2, [sp, #12]
 8019f0c:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8019f10:	3304      	adds	r3, #4
 8019f12:	f1b9 0f00 	cmp.w	r9, #0
 8019f16:	d021      	beq.n	8019f5c <__multiply+0x144>
 8019f18:	6829      	ldr	r1, [r5, #0]
 8019f1a:	f104 0c14 	add.w	ip, r4, #20
 8019f1e:	46ae      	mov	lr, r5
 8019f20:	f04f 0a00 	mov.w	sl, #0
 8019f24:	f8bc b000 	ldrh.w	fp, [ip]
 8019f28:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8019f2c:	fb09 220b 	mla	r2, r9, fp, r2
 8019f30:	4452      	add	r2, sl
 8019f32:	b289      	uxth	r1, r1
 8019f34:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8019f38:	f84e 1b04 	str.w	r1, [lr], #4
 8019f3c:	f85c 1b04 	ldr.w	r1, [ip], #4
 8019f40:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8019f44:	f8be 1000 	ldrh.w	r1, [lr]
 8019f48:	fb09 110a 	mla	r1, r9, sl, r1
 8019f4c:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 8019f50:	4567      	cmp	r7, ip
 8019f52:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8019f56:	d8e5      	bhi.n	8019f24 <__multiply+0x10c>
 8019f58:	9a01      	ldr	r2, [sp, #4]
 8019f5a:	50a9      	str	r1, [r5, r2]
 8019f5c:	3504      	adds	r5, #4
 8019f5e:	e799      	b.n	8019e94 <__multiply+0x7c>
 8019f60:	3e01      	subs	r6, #1
 8019f62:	e79b      	b.n	8019e9c <__multiply+0x84>
 8019f64:	0801dba7 	.word	0x0801dba7
 8019f68:	0801dbb8 	.word	0x0801dbb8

08019f6c <__pow5mult>:
 8019f6c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8019f70:	4615      	mov	r5, r2
 8019f72:	f012 0203 	ands.w	r2, r2, #3
 8019f76:	4606      	mov	r6, r0
 8019f78:	460f      	mov	r7, r1
 8019f7a:	d007      	beq.n	8019f8c <__pow5mult+0x20>
 8019f7c:	4c25      	ldr	r4, [pc, #148]	; (801a014 <__pow5mult+0xa8>)
 8019f7e:	3a01      	subs	r2, #1
 8019f80:	2300      	movs	r3, #0
 8019f82:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8019f86:	f7ff fe9d 	bl	8019cc4 <__multadd>
 8019f8a:	4607      	mov	r7, r0
 8019f8c:	10ad      	asrs	r5, r5, #2
 8019f8e:	d03d      	beq.n	801a00c <__pow5mult+0xa0>
 8019f90:	69f4      	ldr	r4, [r6, #28]
 8019f92:	b97c      	cbnz	r4, 8019fb4 <__pow5mult+0x48>
 8019f94:	2010      	movs	r0, #16
 8019f96:	f7ff fd7f 	bl	8019a98 <malloc>
 8019f9a:	4602      	mov	r2, r0
 8019f9c:	61f0      	str	r0, [r6, #28]
 8019f9e:	b928      	cbnz	r0, 8019fac <__pow5mult+0x40>
 8019fa0:	4b1d      	ldr	r3, [pc, #116]	; (801a018 <__pow5mult+0xac>)
 8019fa2:	481e      	ldr	r0, [pc, #120]	; (801a01c <__pow5mult+0xb0>)
 8019fa4:	f240 11b3 	movw	r1, #435	; 0x1b3
 8019fa8:	f7fe ff18 	bl	8018ddc <__assert_func>
 8019fac:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8019fb0:	6004      	str	r4, [r0, #0]
 8019fb2:	60c4      	str	r4, [r0, #12]
 8019fb4:	f8d6 801c 	ldr.w	r8, [r6, #28]
 8019fb8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8019fbc:	b94c      	cbnz	r4, 8019fd2 <__pow5mult+0x66>
 8019fbe:	f240 2171 	movw	r1, #625	; 0x271
 8019fc2:	4630      	mov	r0, r6
 8019fc4:	f7ff ff12 	bl	8019dec <__i2b>
 8019fc8:	2300      	movs	r3, #0
 8019fca:	f8c8 0008 	str.w	r0, [r8, #8]
 8019fce:	4604      	mov	r4, r0
 8019fd0:	6003      	str	r3, [r0, #0]
 8019fd2:	f04f 0900 	mov.w	r9, #0
 8019fd6:	07eb      	lsls	r3, r5, #31
 8019fd8:	d50a      	bpl.n	8019ff0 <__pow5mult+0x84>
 8019fda:	4639      	mov	r1, r7
 8019fdc:	4622      	mov	r2, r4
 8019fde:	4630      	mov	r0, r6
 8019fe0:	f7ff ff1a 	bl	8019e18 <__multiply>
 8019fe4:	4639      	mov	r1, r7
 8019fe6:	4680      	mov	r8, r0
 8019fe8:	4630      	mov	r0, r6
 8019fea:	f7ff fe49 	bl	8019c80 <_Bfree>
 8019fee:	4647      	mov	r7, r8
 8019ff0:	106d      	asrs	r5, r5, #1
 8019ff2:	d00b      	beq.n	801a00c <__pow5mult+0xa0>
 8019ff4:	6820      	ldr	r0, [r4, #0]
 8019ff6:	b938      	cbnz	r0, 801a008 <__pow5mult+0x9c>
 8019ff8:	4622      	mov	r2, r4
 8019ffa:	4621      	mov	r1, r4
 8019ffc:	4630      	mov	r0, r6
 8019ffe:	f7ff ff0b 	bl	8019e18 <__multiply>
 801a002:	6020      	str	r0, [r4, #0]
 801a004:	f8c0 9000 	str.w	r9, [r0]
 801a008:	4604      	mov	r4, r0
 801a00a:	e7e4      	b.n	8019fd6 <__pow5mult+0x6a>
 801a00c:	4638      	mov	r0, r7
 801a00e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801a012:	bf00      	nop
 801a014:	0801dd08 	.word	0x0801dd08
 801a018:	0801d962 	.word	0x0801d962
 801a01c:	0801dbb8 	.word	0x0801dbb8

0801a020 <__lshift>:
 801a020:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801a024:	460c      	mov	r4, r1
 801a026:	6849      	ldr	r1, [r1, #4]
 801a028:	6923      	ldr	r3, [r4, #16]
 801a02a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801a02e:	68a3      	ldr	r3, [r4, #8]
 801a030:	4607      	mov	r7, r0
 801a032:	4691      	mov	r9, r2
 801a034:	ea4f 1a62 	mov.w	sl, r2, asr #5
 801a038:	f108 0601 	add.w	r6, r8, #1
 801a03c:	42b3      	cmp	r3, r6
 801a03e:	db0b      	blt.n	801a058 <__lshift+0x38>
 801a040:	4638      	mov	r0, r7
 801a042:	f7ff fddd 	bl	8019c00 <_Balloc>
 801a046:	4605      	mov	r5, r0
 801a048:	b948      	cbnz	r0, 801a05e <__lshift+0x3e>
 801a04a:	4602      	mov	r2, r0
 801a04c:	4b28      	ldr	r3, [pc, #160]	; (801a0f0 <__lshift+0xd0>)
 801a04e:	4829      	ldr	r0, [pc, #164]	; (801a0f4 <__lshift+0xd4>)
 801a050:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 801a054:	f7fe fec2 	bl	8018ddc <__assert_func>
 801a058:	3101      	adds	r1, #1
 801a05a:	005b      	lsls	r3, r3, #1
 801a05c:	e7ee      	b.n	801a03c <__lshift+0x1c>
 801a05e:	2300      	movs	r3, #0
 801a060:	f100 0114 	add.w	r1, r0, #20
 801a064:	f100 0210 	add.w	r2, r0, #16
 801a068:	4618      	mov	r0, r3
 801a06a:	4553      	cmp	r3, sl
 801a06c:	db33      	blt.n	801a0d6 <__lshift+0xb6>
 801a06e:	6920      	ldr	r0, [r4, #16]
 801a070:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 801a074:	f104 0314 	add.w	r3, r4, #20
 801a078:	f019 091f 	ands.w	r9, r9, #31
 801a07c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 801a080:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 801a084:	d02b      	beq.n	801a0de <__lshift+0xbe>
 801a086:	f1c9 0e20 	rsb	lr, r9, #32
 801a08a:	468a      	mov	sl, r1
 801a08c:	2200      	movs	r2, #0
 801a08e:	6818      	ldr	r0, [r3, #0]
 801a090:	fa00 f009 	lsl.w	r0, r0, r9
 801a094:	4310      	orrs	r0, r2
 801a096:	f84a 0b04 	str.w	r0, [sl], #4
 801a09a:	f853 2b04 	ldr.w	r2, [r3], #4
 801a09e:	459c      	cmp	ip, r3
 801a0a0:	fa22 f20e 	lsr.w	r2, r2, lr
 801a0a4:	d8f3      	bhi.n	801a08e <__lshift+0x6e>
 801a0a6:	ebac 0304 	sub.w	r3, ip, r4
 801a0aa:	3b15      	subs	r3, #21
 801a0ac:	f023 0303 	bic.w	r3, r3, #3
 801a0b0:	3304      	adds	r3, #4
 801a0b2:	f104 0015 	add.w	r0, r4, #21
 801a0b6:	4584      	cmp	ip, r0
 801a0b8:	bf38      	it	cc
 801a0ba:	2304      	movcc	r3, #4
 801a0bc:	50ca      	str	r2, [r1, r3]
 801a0be:	b10a      	cbz	r2, 801a0c4 <__lshift+0xa4>
 801a0c0:	f108 0602 	add.w	r6, r8, #2
 801a0c4:	3e01      	subs	r6, #1
 801a0c6:	4638      	mov	r0, r7
 801a0c8:	612e      	str	r6, [r5, #16]
 801a0ca:	4621      	mov	r1, r4
 801a0cc:	f7ff fdd8 	bl	8019c80 <_Bfree>
 801a0d0:	4628      	mov	r0, r5
 801a0d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801a0d6:	f842 0f04 	str.w	r0, [r2, #4]!
 801a0da:	3301      	adds	r3, #1
 801a0dc:	e7c5      	b.n	801a06a <__lshift+0x4a>
 801a0de:	3904      	subs	r1, #4
 801a0e0:	f853 2b04 	ldr.w	r2, [r3], #4
 801a0e4:	f841 2f04 	str.w	r2, [r1, #4]!
 801a0e8:	459c      	cmp	ip, r3
 801a0ea:	d8f9      	bhi.n	801a0e0 <__lshift+0xc0>
 801a0ec:	e7ea      	b.n	801a0c4 <__lshift+0xa4>
 801a0ee:	bf00      	nop
 801a0f0:	0801dba7 	.word	0x0801dba7
 801a0f4:	0801dbb8 	.word	0x0801dbb8

0801a0f8 <__mcmp>:
 801a0f8:	b530      	push	{r4, r5, lr}
 801a0fa:	6902      	ldr	r2, [r0, #16]
 801a0fc:	690c      	ldr	r4, [r1, #16]
 801a0fe:	1b12      	subs	r2, r2, r4
 801a100:	d10e      	bne.n	801a120 <__mcmp+0x28>
 801a102:	f100 0314 	add.w	r3, r0, #20
 801a106:	3114      	adds	r1, #20
 801a108:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 801a10c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 801a110:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 801a114:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 801a118:	42a5      	cmp	r5, r4
 801a11a:	d003      	beq.n	801a124 <__mcmp+0x2c>
 801a11c:	d305      	bcc.n	801a12a <__mcmp+0x32>
 801a11e:	2201      	movs	r2, #1
 801a120:	4610      	mov	r0, r2
 801a122:	bd30      	pop	{r4, r5, pc}
 801a124:	4283      	cmp	r3, r0
 801a126:	d3f3      	bcc.n	801a110 <__mcmp+0x18>
 801a128:	e7fa      	b.n	801a120 <__mcmp+0x28>
 801a12a:	f04f 32ff 	mov.w	r2, #4294967295
 801a12e:	e7f7      	b.n	801a120 <__mcmp+0x28>

0801a130 <__mdiff>:
 801a130:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a134:	460c      	mov	r4, r1
 801a136:	4606      	mov	r6, r0
 801a138:	4611      	mov	r1, r2
 801a13a:	4620      	mov	r0, r4
 801a13c:	4690      	mov	r8, r2
 801a13e:	f7ff ffdb 	bl	801a0f8 <__mcmp>
 801a142:	1e05      	subs	r5, r0, #0
 801a144:	d110      	bne.n	801a168 <__mdiff+0x38>
 801a146:	4629      	mov	r1, r5
 801a148:	4630      	mov	r0, r6
 801a14a:	f7ff fd59 	bl	8019c00 <_Balloc>
 801a14e:	b930      	cbnz	r0, 801a15e <__mdiff+0x2e>
 801a150:	4b3a      	ldr	r3, [pc, #232]	; (801a23c <__mdiff+0x10c>)
 801a152:	4602      	mov	r2, r0
 801a154:	f240 2137 	movw	r1, #567	; 0x237
 801a158:	4839      	ldr	r0, [pc, #228]	; (801a240 <__mdiff+0x110>)
 801a15a:	f7fe fe3f 	bl	8018ddc <__assert_func>
 801a15e:	2301      	movs	r3, #1
 801a160:	e9c0 3504 	strd	r3, r5, [r0, #16]
 801a164:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a168:	bfa4      	itt	ge
 801a16a:	4643      	movge	r3, r8
 801a16c:	46a0      	movge	r8, r4
 801a16e:	4630      	mov	r0, r6
 801a170:	f8d8 1004 	ldr.w	r1, [r8, #4]
 801a174:	bfa6      	itte	ge
 801a176:	461c      	movge	r4, r3
 801a178:	2500      	movge	r5, #0
 801a17a:	2501      	movlt	r5, #1
 801a17c:	f7ff fd40 	bl	8019c00 <_Balloc>
 801a180:	b920      	cbnz	r0, 801a18c <__mdiff+0x5c>
 801a182:	4b2e      	ldr	r3, [pc, #184]	; (801a23c <__mdiff+0x10c>)
 801a184:	4602      	mov	r2, r0
 801a186:	f240 2145 	movw	r1, #581	; 0x245
 801a18a:	e7e5      	b.n	801a158 <__mdiff+0x28>
 801a18c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 801a190:	6926      	ldr	r6, [r4, #16]
 801a192:	60c5      	str	r5, [r0, #12]
 801a194:	f104 0914 	add.w	r9, r4, #20
 801a198:	f108 0514 	add.w	r5, r8, #20
 801a19c:	f100 0e14 	add.w	lr, r0, #20
 801a1a0:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 801a1a4:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 801a1a8:	f108 0210 	add.w	r2, r8, #16
 801a1ac:	46f2      	mov	sl, lr
 801a1ae:	2100      	movs	r1, #0
 801a1b0:	f859 3b04 	ldr.w	r3, [r9], #4
 801a1b4:	f852 bf04 	ldr.w	fp, [r2, #4]!
 801a1b8:	fa11 f88b 	uxtah	r8, r1, fp
 801a1bc:	b299      	uxth	r1, r3
 801a1be:	0c1b      	lsrs	r3, r3, #16
 801a1c0:	eba8 0801 	sub.w	r8, r8, r1
 801a1c4:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 801a1c8:	eb03 4328 	add.w	r3, r3, r8, asr #16
 801a1cc:	fa1f f888 	uxth.w	r8, r8
 801a1d0:	1419      	asrs	r1, r3, #16
 801a1d2:	454e      	cmp	r6, r9
 801a1d4:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 801a1d8:	f84a 3b04 	str.w	r3, [sl], #4
 801a1dc:	d8e8      	bhi.n	801a1b0 <__mdiff+0x80>
 801a1de:	1b33      	subs	r3, r6, r4
 801a1e0:	3b15      	subs	r3, #21
 801a1e2:	f023 0303 	bic.w	r3, r3, #3
 801a1e6:	3304      	adds	r3, #4
 801a1e8:	3415      	adds	r4, #21
 801a1ea:	42a6      	cmp	r6, r4
 801a1ec:	bf38      	it	cc
 801a1ee:	2304      	movcc	r3, #4
 801a1f0:	441d      	add	r5, r3
 801a1f2:	4473      	add	r3, lr
 801a1f4:	469e      	mov	lr, r3
 801a1f6:	462e      	mov	r6, r5
 801a1f8:	4566      	cmp	r6, ip
 801a1fa:	d30e      	bcc.n	801a21a <__mdiff+0xea>
 801a1fc:	f10c 0203 	add.w	r2, ip, #3
 801a200:	1b52      	subs	r2, r2, r5
 801a202:	f022 0203 	bic.w	r2, r2, #3
 801a206:	3d03      	subs	r5, #3
 801a208:	45ac      	cmp	ip, r5
 801a20a:	bf38      	it	cc
 801a20c:	2200      	movcc	r2, #0
 801a20e:	4413      	add	r3, r2
 801a210:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 801a214:	b17a      	cbz	r2, 801a236 <__mdiff+0x106>
 801a216:	6107      	str	r7, [r0, #16]
 801a218:	e7a4      	b.n	801a164 <__mdiff+0x34>
 801a21a:	f856 8b04 	ldr.w	r8, [r6], #4
 801a21e:	fa11 f288 	uxtah	r2, r1, r8
 801a222:	1414      	asrs	r4, r2, #16
 801a224:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 801a228:	b292      	uxth	r2, r2
 801a22a:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 801a22e:	f84e 2b04 	str.w	r2, [lr], #4
 801a232:	1421      	asrs	r1, r4, #16
 801a234:	e7e0      	b.n	801a1f8 <__mdiff+0xc8>
 801a236:	3f01      	subs	r7, #1
 801a238:	e7ea      	b.n	801a210 <__mdiff+0xe0>
 801a23a:	bf00      	nop
 801a23c:	0801dba7 	.word	0x0801dba7
 801a240:	0801dbb8 	.word	0x0801dbb8

0801a244 <__d2b>:
 801a244:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801a248:	460f      	mov	r7, r1
 801a24a:	2101      	movs	r1, #1
 801a24c:	ec59 8b10 	vmov	r8, r9, d0
 801a250:	4616      	mov	r6, r2
 801a252:	f7ff fcd5 	bl	8019c00 <_Balloc>
 801a256:	4604      	mov	r4, r0
 801a258:	b930      	cbnz	r0, 801a268 <__d2b+0x24>
 801a25a:	4602      	mov	r2, r0
 801a25c:	4b24      	ldr	r3, [pc, #144]	; (801a2f0 <__d2b+0xac>)
 801a25e:	4825      	ldr	r0, [pc, #148]	; (801a2f4 <__d2b+0xb0>)
 801a260:	f240 310f 	movw	r1, #783	; 0x30f
 801a264:	f7fe fdba 	bl	8018ddc <__assert_func>
 801a268:	f3c9 550a 	ubfx	r5, r9, #20, #11
 801a26c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801a270:	bb2d      	cbnz	r5, 801a2be <__d2b+0x7a>
 801a272:	9301      	str	r3, [sp, #4]
 801a274:	f1b8 0300 	subs.w	r3, r8, #0
 801a278:	d026      	beq.n	801a2c8 <__d2b+0x84>
 801a27a:	4668      	mov	r0, sp
 801a27c:	9300      	str	r3, [sp, #0]
 801a27e:	f7ff fd87 	bl	8019d90 <__lo0bits>
 801a282:	e9dd 1200 	ldrd	r1, r2, [sp]
 801a286:	b1e8      	cbz	r0, 801a2c4 <__d2b+0x80>
 801a288:	f1c0 0320 	rsb	r3, r0, #32
 801a28c:	fa02 f303 	lsl.w	r3, r2, r3
 801a290:	430b      	orrs	r3, r1
 801a292:	40c2      	lsrs	r2, r0
 801a294:	6163      	str	r3, [r4, #20]
 801a296:	9201      	str	r2, [sp, #4]
 801a298:	9b01      	ldr	r3, [sp, #4]
 801a29a:	61a3      	str	r3, [r4, #24]
 801a29c:	2b00      	cmp	r3, #0
 801a29e:	bf14      	ite	ne
 801a2a0:	2202      	movne	r2, #2
 801a2a2:	2201      	moveq	r2, #1
 801a2a4:	6122      	str	r2, [r4, #16]
 801a2a6:	b1bd      	cbz	r5, 801a2d8 <__d2b+0x94>
 801a2a8:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 801a2ac:	4405      	add	r5, r0
 801a2ae:	603d      	str	r5, [r7, #0]
 801a2b0:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 801a2b4:	6030      	str	r0, [r6, #0]
 801a2b6:	4620      	mov	r0, r4
 801a2b8:	b003      	add	sp, #12
 801a2ba:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801a2be:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 801a2c2:	e7d6      	b.n	801a272 <__d2b+0x2e>
 801a2c4:	6161      	str	r1, [r4, #20]
 801a2c6:	e7e7      	b.n	801a298 <__d2b+0x54>
 801a2c8:	a801      	add	r0, sp, #4
 801a2ca:	f7ff fd61 	bl	8019d90 <__lo0bits>
 801a2ce:	9b01      	ldr	r3, [sp, #4]
 801a2d0:	6163      	str	r3, [r4, #20]
 801a2d2:	3020      	adds	r0, #32
 801a2d4:	2201      	movs	r2, #1
 801a2d6:	e7e5      	b.n	801a2a4 <__d2b+0x60>
 801a2d8:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 801a2dc:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 801a2e0:	6038      	str	r0, [r7, #0]
 801a2e2:	6918      	ldr	r0, [r3, #16]
 801a2e4:	f7ff fd34 	bl	8019d50 <__hi0bits>
 801a2e8:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 801a2ec:	e7e2      	b.n	801a2b4 <__d2b+0x70>
 801a2ee:	bf00      	nop
 801a2f0:	0801dba7 	.word	0x0801dba7
 801a2f4:	0801dbb8 	.word	0x0801dbb8

0801a2f8 <__sfputc_r>:
 801a2f8:	6893      	ldr	r3, [r2, #8]
 801a2fa:	3b01      	subs	r3, #1
 801a2fc:	2b00      	cmp	r3, #0
 801a2fe:	b410      	push	{r4}
 801a300:	6093      	str	r3, [r2, #8]
 801a302:	da08      	bge.n	801a316 <__sfputc_r+0x1e>
 801a304:	6994      	ldr	r4, [r2, #24]
 801a306:	42a3      	cmp	r3, r4
 801a308:	db01      	blt.n	801a30e <__sfputc_r+0x16>
 801a30a:	290a      	cmp	r1, #10
 801a30c:	d103      	bne.n	801a316 <__sfputc_r+0x1e>
 801a30e:	f85d 4b04 	ldr.w	r4, [sp], #4
 801a312:	f7fe bc38 	b.w	8018b86 <__swbuf_r>
 801a316:	6813      	ldr	r3, [r2, #0]
 801a318:	1c58      	adds	r0, r3, #1
 801a31a:	6010      	str	r0, [r2, #0]
 801a31c:	7019      	strb	r1, [r3, #0]
 801a31e:	4608      	mov	r0, r1
 801a320:	f85d 4b04 	ldr.w	r4, [sp], #4
 801a324:	4770      	bx	lr

0801a326 <__sfputs_r>:
 801a326:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a328:	4606      	mov	r6, r0
 801a32a:	460f      	mov	r7, r1
 801a32c:	4614      	mov	r4, r2
 801a32e:	18d5      	adds	r5, r2, r3
 801a330:	42ac      	cmp	r4, r5
 801a332:	d101      	bne.n	801a338 <__sfputs_r+0x12>
 801a334:	2000      	movs	r0, #0
 801a336:	e007      	b.n	801a348 <__sfputs_r+0x22>
 801a338:	f814 1b01 	ldrb.w	r1, [r4], #1
 801a33c:	463a      	mov	r2, r7
 801a33e:	4630      	mov	r0, r6
 801a340:	f7ff ffda 	bl	801a2f8 <__sfputc_r>
 801a344:	1c43      	adds	r3, r0, #1
 801a346:	d1f3      	bne.n	801a330 <__sfputs_r+0xa>
 801a348:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801a34c <_vfiprintf_r>:
 801a34c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a350:	460d      	mov	r5, r1
 801a352:	b09d      	sub	sp, #116	; 0x74
 801a354:	4614      	mov	r4, r2
 801a356:	4698      	mov	r8, r3
 801a358:	4606      	mov	r6, r0
 801a35a:	b118      	cbz	r0, 801a364 <_vfiprintf_r+0x18>
 801a35c:	6a03      	ldr	r3, [r0, #32]
 801a35e:	b90b      	cbnz	r3, 801a364 <_vfiprintf_r+0x18>
 801a360:	f7fe fb2a 	bl	80189b8 <__sinit>
 801a364:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801a366:	07d9      	lsls	r1, r3, #31
 801a368:	d405      	bmi.n	801a376 <_vfiprintf_r+0x2a>
 801a36a:	89ab      	ldrh	r3, [r5, #12]
 801a36c:	059a      	lsls	r2, r3, #22
 801a36e:	d402      	bmi.n	801a376 <_vfiprintf_r+0x2a>
 801a370:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801a372:	f7fe fd23 	bl	8018dbc <__retarget_lock_acquire_recursive>
 801a376:	89ab      	ldrh	r3, [r5, #12]
 801a378:	071b      	lsls	r3, r3, #28
 801a37a:	d501      	bpl.n	801a380 <_vfiprintf_r+0x34>
 801a37c:	692b      	ldr	r3, [r5, #16]
 801a37e:	b99b      	cbnz	r3, 801a3a8 <_vfiprintf_r+0x5c>
 801a380:	4629      	mov	r1, r5
 801a382:	4630      	mov	r0, r6
 801a384:	f7fe fc3c 	bl	8018c00 <__swsetup_r>
 801a388:	b170      	cbz	r0, 801a3a8 <_vfiprintf_r+0x5c>
 801a38a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801a38c:	07dc      	lsls	r4, r3, #31
 801a38e:	d504      	bpl.n	801a39a <_vfiprintf_r+0x4e>
 801a390:	f04f 30ff 	mov.w	r0, #4294967295
 801a394:	b01d      	add	sp, #116	; 0x74
 801a396:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a39a:	89ab      	ldrh	r3, [r5, #12]
 801a39c:	0598      	lsls	r0, r3, #22
 801a39e:	d4f7      	bmi.n	801a390 <_vfiprintf_r+0x44>
 801a3a0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801a3a2:	f7fe fd0c 	bl	8018dbe <__retarget_lock_release_recursive>
 801a3a6:	e7f3      	b.n	801a390 <_vfiprintf_r+0x44>
 801a3a8:	2300      	movs	r3, #0
 801a3aa:	9309      	str	r3, [sp, #36]	; 0x24
 801a3ac:	2320      	movs	r3, #32
 801a3ae:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801a3b2:	f8cd 800c 	str.w	r8, [sp, #12]
 801a3b6:	2330      	movs	r3, #48	; 0x30
 801a3b8:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 801a56c <_vfiprintf_r+0x220>
 801a3bc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801a3c0:	f04f 0901 	mov.w	r9, #1
 801a3c4:	4623      	mov	r3, r4
 801a3c6:	469a      	mov	sl, r3
 801a3c8:	f813 2b01 	ldrb.w	r2, [r3], #1
 801a3cc:	b10a      	cbz	r2, 801a3d2 <_vfiprintf_r+0x86>
 801a3ce:	2a25      	cmp	r2, #37	; 0x25
 801a3d0:	d1f9      	bne.n	801a3c6 <_vfiprintf_r+0x7a>
 801a3d2:	ebba 0b04 	subs.w	fp, sl, r4
 801a3d6:	d00b      	beq.n	801a3f0 <_vfiprintf_r+0xa4>
 801a3d8:	465b      	mov	r3, fp
 801a3da:	4622      	mov	r2, r4
 801a3dc:	4629      	mov	r1, r5
 801a3de:	4630      	mov	r0, r6
 801a3e0:	f7ff ffa1 	bl	801a326 <__sfputs_r>
 801a3e4:	3001      	adds	r0, #1
 801a3e6:	f000 80a9 	beq.w	801a53c <_vfiprintf_r+0x1f0>
 801a3ea:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801a3ec:	445a      	add	r2, fp
 801a3ee:	9209      	str	r2, [sp, #36]	; 0x24
 801a3f0:	f89a 3000 	ldrb.w	r3, [sl]
 801a3f4:	2b00      	cmp	r3, #0
 801a3f6:	f000 80a1 	beq.w	801a53c <_vfiprintf_r+0x1f0>
 801a3fa:	2300      	movs	r3, #0
 801a3fc:	f04f 32ff 	mov.w	r2, #4294967295
 801a400:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801a404:	f10a 0a01 	add.w	sl, sl, #1
 801a408:	9304      	str	r3, [sp, #16]
 801a40a:	9307      	str	r3, [sp, #28]
 801a40c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801a410:	931a      	str	r3, [sp, #104]	; 0x68
 801a412:	4654      	mov	r4, sl
 801a414:	2205      	movs	r2, #5
 801a416:	f814 1b01 	ldrb.w	r1, [r4], #1
 801a41a:	4854      	ldr	r0, [pc, #336]	; (801a56c <_vfiprintf_r+0x220>)
 801a41c:	f7e6 fce8 	bl	8000df0 <memchr>
 801a420:	9a04      	ldr	r2, [sp, #16]
 801a422:	b9d8      	cbnz	r0, 801a45c <_vfiprintf_r+0x110>
 801a424:	06d1      	lsls	r1, r2, #27
 801a426:	bf44      	itt	mi
 801a428:	2320      	movmi	r3, #32
 801a42a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801a42e:	0713      	lsls	r3, r2, #28
 801a430:	bf44      	itt	mi
 801a432:	232b      	movmi	r3, #43	; 0x2b
 801a434:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801a438:	f89a 3000 	ldrb.w	r3, [sl]
 801a43c:	2b2a      	cmp	r3, #42	; 0x2a
 801a43e:	d015      	beq.n	801a46c <_vfiprintf_r+0x120>
 801a440:	9a07      	ldr	r2, [sp, #28]
 801a442:	4654      	mov	r4, sl
 801a444:	2000      	movs	r0, #0
 801a446:	f04f 0c0a 	mov.w	ip, #10
 801a44a:	4621      	mov	r1, r4
 801a44c:	f811 3b01 	ldrb.w	r3, [r1], #1
 801a450:	3b30      	subs	r3, #48	; 0x30
 801a452:	2b09      	cmp	r3, #9
 801a454:	d94d      	bls.n	801a4f2 <_vfiprintf_r+0x1a6>
 801a456:	b1b0      	cbz	r0, 801a486 <_vfiprintf_r+0x13a>
 801a458:	9207      	str	r2, [sp, #28]
 801a45a:	e014      	b.n	801a486 <_vfiprintf_r+0x13a>
 801a45c:	eba0 0308 	sub.w	r3, r0, r8
 801a460:	fa09 f303 	lsl.w	r3, r9, r3
 801a464:	4313      	orrs	r3, r2
 801a466:	9304      	str	r3, [sp, #16]
 801a468:	46a2      	mov	sl, r4
 801a46a:	e7d2      	b.n	801a412 <_vfiprintf_r+0xc6>
 801a46c:	9b03      	ldr	r3, [sp, #12]
 801a46e:	1d19      	adds	r1, r3, #4
 801a470:	681b      	ldr	r3, [r3, #0]
 801a472:	9103      	str	r1, [sp, #12]
 801a474:	2b00      	cmp	r3, #0
 801a476:	bfbb      	ittet	lt
 801a478:	425b      	neglt	r3, r3
 801a47a:	f042 0202 	orrlt.w	r2, r2, #2
 801a47e:	9307      	strge	r3, [sp, #28]
 801a480:	9307      	strlt	r3, [sp, #28]
 801a482:	bfb8      	it	lt
 801a484:	9204      	strlt	r2, [sp, #16]
 801a486:	7823      	ldrb	r3, [r4, #0]
 801a488:	2b2e      	cmp	r3, #46	; 0x2e
 801a48a:	d10c      	bne.n	801a4a6 <_vfiprintf_r+0x15a>
 801a48c:	7863      	ldrb	r3, [r4, #1]
 801a48e:	2b2a      	cmp	r3, #42	; 0x2a
 801a490:	d134      	bne.n	801a4fc <_vfiprintf_r+0x1b0>
 801a492:	9b03      	ldr	r3, [sp, #12]
 801a494:	1d1a      	adds	r2, r3, #4
 801a496:	681b      	ldr	r3, [r3, #0]
 801a498:	9203      	str	r2, [sp, #12]
 801a49a:	2b00      	cmp	r3, #0
 801a49c:	bfb8      	it	lt
 801a49e:	f04f 33ff 	movlt.w	r3, #4294967295
 801a4a2:	3402      	adds	r4, #2
 801a4a4:	9305      	str	r3, [sp, #20]
 801a4a6:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 801a57c <_vfiprintf_r+0x230>
 801a4aa:	7821      	ldrb	r1, [r4, #0]
 801a4ac:	2203      	movs	r2, #3
 801a4ae:	4650      	mov	r0, sl
 801a4b0:	f7e6 fc9e 	bl	8000df0 <memchr>
 801a4b4:	b138      	cbz	r0, 801a4c6 <_vfiprintf_r+0x17a>
 801a4b6:	9b04      	ldr	r3, [sp, #16]
 801a4b8:	eba0 000a 	sub.w	r0, r0, sl
 801a4bc:	2240      	movs	r2, #64	; 0x40
 801a4be:	4082      	lsls	r2, r0
 801a4c0:	4313      	orrs	r3, r2
 801a4c2:	3401      	adds	r4, #1
 801a4c4:	9304      	str	r3, [sp, #16]
 801a4c6:	f814 1b01 	ldrb.w	r1, [r4], #1
 801a4ca:	4829      	ldr	r0, [pc, #164]	; (801a570 <_vfiprintf_r+0x224>)
 801a4cc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801a4d0:	2206      	movs	r2, #6
 801a4d2:	f7e6 fc8d 	bl	8000df0 <memchr>
 801a4d6:	2800      	cmp	r0, #0
 801a4d8:	d03f      	beq.n	801a55a <_vfiprintf_r+0x20e>
 801a4da:	4b26      	ldr	r3, [pc, #152]	; (801a574 <_vfiprintf_r+0x228>)
 801a4dc:	bb1b      	cbnz	r3, 801a526 <_vfiprintf_r+0x1da>
 801a4de:	9b03      	ldr	r3, [sp, #12]
 801a4e0:	3307      	adds	r3, #7
 801a4e2:	f023 0307 	bic.w	r3, r3, #7
 801a4e6:	3308      	adds	r3, #8
 801a4e8:	9303      	str	r3, [sp, #12]
 801a4ea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801a4ec:	443b      	add	r3, r7
 801a4ee:	9309      	str	r3, [sp, #36]	; 0x24
 801a4f0:	e768      	b.n	801a3c4 <_vfiprintf_r+0x78>
 801a4f2:	fb0c 3202 	mla	r2, ip, r2, r3
 801a4f6:	460c      	mov	r4, r1
 801a4f8:	2001      	movs	r0, #1
 801a4fa:	e7a6      	b.n	801a44a <_vfiprintf_r+0xfe>
 801a4fc:	2300      	movs	r3, #0
 801a4fe:	3401      	adds	r4, #1
 801a500:	9305      	str	r3, [sp, #20]
 801a502:	4619      	mov	r1, r3
 801a504:	f04f 0c0a 	mov.w	ip, #10
 801a508:	4620      	mov	r0, r4
 801a50a:	f810 2b01 	ldrb.w	r2, [r0], #1
 801a50e:	3a30      	subs	r2, #48	; 0x30
 801a510:	2a09      	cmp	r2, #9
 801a512:	d903      	bls.n	801a51c <_vfiprintf_r+0x1d0>
 801a514:	2b00      	cmp	r3, #0
 801a516:	d0c6      	beq.n	801a4a6 <_vfiprintf_r+0x15a>
 801a518:	9105      	str	r1, [sp, #20]
 801a51a:	e7c4      	b.n	801a4a6 <_vfiprintf_r+0x15a>
 801a51c:	fb0c 2101 	mla	r1, ip, r1, r2
 801a520:	4604      	mov	r4, r0
 801a522:	2301      	movs	r3, #1
 801a524:	e7f0      	b.n	801a508 <_vfiprintf_r+0x1bc>
 801a526:	ab03      	add	r3, sp, #12
 801a528:	9300      	str	r3, [sp, #0]
 801a52a:	462a      	mov	r2, r5
 801a52c:	4b12      	ldr	r3, [pc, #72]	; (801a578 <_vfiprintf_r+0x22c>)
 801a52e:	a904      	add	r1, sp, #16
 801a530:	4630      	mov	r0, r6
 801a532:	f7fd fe1d 	bl	8018170 <_printf_float>
 801a536:	4607      	mov	r7, r0
 801a538:	1c78      	adds	r0, r7, #1
 801a53a:	d1d6      	bne.n	801a4ea <_vfiprintf_r+0x19e>
 801a53c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801a53e:	07d9      	lsls	r1, r3, #31
 801a540:	d405      	bmi.n	801a54e <_vfiprintf_r+0x202>
 801a542:	89ab      	ldrh	r3, [r5, #12]
 801a544:	059a      	lsls	r2, r3, #22
 801a546:	d402      	bmi.n	801a54e <_vfiprintf_r+0x202>
 801a548:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801a54a:	f7fe fc38 	bl	8018dbe <__retarget_lock_release_recursive>
 801a54e:	89ab      	ldrh	r3, [r5, #12]
 801a550:	065b      	lsls	r3, r3, #25
 801a552:	f53f af1d 	bmi.w	801a390 <_vfiprintf_r+0x44>
 801a556:	9809      	ldr	r0, [sp, #36]	; 0x24
 801a558:	e71c      	b.n	801a394 <_vfiprintf_r+0x48>
 801a55a:	ab03      	add	r3, sp, #12
 801a55c:	9300      	str	r3, [sp, #0]
 801a55e:	462a      	mov	r2, r5
 801a560:	4b05      	ldr	r3, [pc, #20]	; (801a578 <_vfiprintf_r+0x22c>)
 801a562:	a904      	add	r1, sp, #16
 801a564:	4630      	mov	r0, r6
 801a566:	f7fe f88b 	bl	8018680 <_printf_i>
 801a56a:	e7e4      	b.n	801a536 <_vfiprintf_r+0x1ea>
 801a56c:	0801dd14 	.word	0x0801dd14
 801a570:	0801dd1e 	.word	0x0801dd1e
 801a574:	08018171 	.word	0x08018171
 801a578:	0801a327 	.word	0x0801a327
 801a57c:	0801dd1a 	.word	0x0801dd1a

0801a580 <__sflush_r>:
 801a580:	898a      	ldrh	r2, [r1, #12]
 801a582:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a586:	4605      	mov	r5, r0
 801a588:	0710      	lsls	r0, r2, #28
 801a58a:	460c      	mov	r4, r1
 801a58c:	d458      	bmi.n	801a640 <__sflush_r+0xc0>
 801a58e:	684b      	ldr	r3, [r1, #4]
 801a590:	2b00      	cmp	r3, #0
 801a592:	dc05      	bgt.n	801a5a0 <__sflush_r+0x20>
 801a594:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801a596:	2b00      	cmp	r3, #0
 801a598:	dc02      	bgt.n	801a5a0 <__sflush_r+0x20>
 801a59a:	2000      	movs	r0, #0
 801a59c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a5a0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801a5a2:	2e00      	cmp	r6, #0
 801a5a4:	d0f9      	beq.n	801a59a <__sflush_r+0x1a>
 801a5a6:	2300      	movs	r3, #0
 801a5a8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801a5ac:	682f      	ldr	r7, [r5, #0]
 801a5ae:	6a21      	ldr	r1, [r4, #32]
 801a5b0:	602b      	str	r3, [r5, #0]
 801a5b2:	d032      	beq.n	801a61a <__sflush_r+0x9a>
 801a5b4:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801a5b6:	89a3      	ldrh	r3, [r4, #12]
 801a5b8:	075a      	lsls	r2, r3, #29
 801a5ba:	d505      	bpl.n	801a5c8 <__sflush_r+0x48>
 801a5bc:	6863      	ldr	r3, [r4, #4]
 801a5be:	1ac0      	subs	r0, r0, r3
 801a5c0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801a5c2:	b10b      	cbz	r3, 801a5c8 <__sflush_r+0x48>
 801a5c4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801a5c6:	1ac0      	subs	r0, r0, r3
 801a5c8:	2300      	movs	r3, #0
 801a5ca:	4602      	mov	r2, r0
 801a5cc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801a5ce:	6a21      	ldr	r1, [r4, #32]
 801a5d0:	4628      	mov	r0, r5
 801a5d2:	47b0      	blx	r6
 801a5d4:	1c43      	adds	r3, r0, #1
 801a5d6:	89a3      	ldrh	r3, [r4, #12]
 801a5d8:	d106      	bne.n	801a5e8 <__sflush_r+0x68>
 801a5da:	6829      	ldr	r1, [r5, #0]
 801a5dc:	291d      	cmp	r1, #29
 801a5de:	d82b      	bhi.n	801a638 <__sflush_r+0xb8>
 801a5e0:	4a29      	ldr	r2, [pc, #164]	; (801a688 <__sflush_r+0x108>)
 801a5e2:	410a      	asrs	r2, r1
 801a5e4:	07d6      	lsls	r6, r2, #31
 801a5e6:	d427      	bmi.n	801a638 <__sflush_r+0xb8>
 801a5e8:	2200      	movs	r2, #0
 801a5ea:	6062      	str	r2, [r4, #4]
 801a5ec:	04d9      	lsls	r1, r3, #19
 801a5ee:	6922      	ldr	r2, [r4, #16]
 801a5f0:	6022      	str	r2, [r4, #0]
 801a5f2:	d504      	bpl.n	801a5fe <__sflush_r+0x7e>
 801a5f4:	1c42      	adds	r2, r0, #1
 801a5f6:	d101      	bne.n	801a5fc <__sflush_r+0x7c>
 801a5f8:	682b      	ldr	r3, [r5, #0]
 801a5fa:	b903      	cbnz	r3, 801a5fe <__sflush_r+0x7e>
 801a5fc:	6560      	str	r0, [r4, #84]	; 0x54
 801a5fe:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801a600:	602f      	str	r7, [r5, #0]
 801a602:	2900      	cmp	r1, #0
 801a604:	d0c9      	beq.n	801a59a <__sflush_r+0x1a>
 801a606:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801a60a:	4299      	cmp	r1, r3
 801a60c:	d002      	beq.n	801a614 <__sflush_r+0x94>
 801a60e:	4628      	mov	r0, r5
 801a610:	f7ff f9f6 	bl	8019a00 <_free_r>
 801a614:	2000      	movs	r0, #0
 801a616:	6360      	str	r0, [r4, #52]	; 0x34
 801a618:	e7c0      	b.n	801a59c <__sflush_r+0x1c>
 801a61a:	2301      	movs	r3, #1
 801a61c:	4628      	mov	r0, r5
 801a61e:	47b0      	blx	r6
 801a620:	1c41      	adds	r1, r0, #1
 801a622:	d1c8      	bne.n	801a5b6 <__sflush_r+0x36>
 801a624:	682b      	ldr	r3, [r5, #0]
 801a626:	2b00      	cmp	r3, #0
 801a628:	d0c5      	beq.n	801a5b6 <__sflush_r+0x36>
 801a62a:	2b1d      	cmp	r3, #29
 801a62c:	d001      	beq.n	801a632 <__sflush_r+0xb2>
 801a62e:	2b16      	cmp	r3, #22
 801a630:	d101      	bne.n	801a636 <__sflush_r+0xb6>
 801a632:	602f      	str	r7, [r5, #0]
 801a634:	e7b1      	b.n	801a59a <__sflush_r+0x1a>
 801a636:	89a3      	ldrh	r3, [r4, #12]
 801a638:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801a63c:	81a3      	strh	r3, [r4, #12]
 801a63e:	e7ad      	b.n	801a59c <__sflush_r+0x1c>
 801a640:	690f      	ldr	r7, [r1, #16]
 801a642:	2f00      	cmp	r7, #0
 801a644:	d0a9      	beq.n	801a59a <__sflush_r+0x1a>
 801a646:	0793      	lsls	r3, r2, #30
 801a648:	680e      	ldr	r6, [r1, #0]
 801a64a:	bf08      	it	eq
 801a64c:	694b      	ldreq	r3, [r1, #20]
 801a64e:	600f      	str	r7, [r1, #0]
 801a650:	bf18      	it	ne
 801a652:	2300      	movne	r3, #0
 801a654:	eba6 0807 	sub.w	r8, r6, r7
 801a658:	608b      	str	r3, [r1, #8]
 801a65a:	f1b8 0f00 	cmp.w	r8, #0
 801a65e:	dd9c      	ble.n	801a59a <__sflush_r+0x1a>
 801a660:	6a21      	ldr	r1, [r4, #32]
 801a662:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801a664:	4643      	mov	r3, r8
 801a666:	463a      	mov	r2, r7
 801a668:	4628      	mov	r0, r5
 801a66a:	47b0      	blx	r6
 801a66c:	2800      	cmp	r0, #0
 801a66e:	dc06      	bgt.n	801a67e <__sflush_r+0xfe>
 801a670:	89a3      	ldrh	r3, [r4, #12]
 801a672:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801a676:	81a3      	strh	r3, [r4, #12]
 801a678:	f04f 30ff 	mov.w	r0, #4294967295
 801a67c:	e78e      	b.n	801a59c <__sflush_r+0x1c>
 801a67e:	4407      	add	r7, r0
 801a680:	eba8 0800 	sub.w	r8, r8, r0
 801a684:	e7e9      	b.n	801a65a <__sflush_r+0xda>
 801a686:	bf00      	nop
 801a688:	dfbffffe 	.word	0xdfbffffe

0801a68c <_fflush_r>:
 801a68c:	b538      	push	{r3, r4, r5, lr}
 801a68e:	690b      	ldr	r3, [r1, #16]
 801a690:	4605      	mov	r5, r0
 801a692:	460c      	mov	r4, r1
 801a694:	b913      	cbnz	r3, 801a69c <_fflush_r+0x10>
 801a696:	2500      	movs	r5, #0
 801a698:	4628      	mov	r0, r5
 801a69a:	bd38      	pop	{r3, r4, r5, pc}
 801a69c:	b118      	cbz	r0, 801a6a6 <_fflush_r+0x1a>
 801a69e:	6a03      	ldr	r3, [r0, #32]
 801a6a0:	b90b      	cbnz	r3, 801a6a6 <_fflush_r+0x1a>
 801a6a2:	f7fe f989 	bl	80189b8 <__sinit>
 801a6a6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801a6aa:	2b00      	cmp	r3, #0
 801a6ac:	d0f3      	beq.n	801a696 <_fflush_r+0xa>
 801a6ae:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801a6b0:	07d0      	lsls	r0, r2, #31
 801a6b2:	d404      	bmi.n	801a6be <_fflush_r+0x32>
 801a6b4:	0599      	lsls	r1, r3, #22
 801a6b6:	d402      	bmi.n	801a6be <_fflush_r+0x32>
 801a6b8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801a6ba:	f7fe fb7f 	bl	8018dbc <__retarget_lock_acquire_recursive>
 801a6be:	4628      	mov	r0, r5
 801a6c0:	4621      	mov	r1, r4
 801a6c2:	f7ff ff5d 	bl	801a580 <__sflush_r>
 801a6c6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801a6c8:	07da      	lsls	r2, r3, #31
 801a6ca:	4605      	mov	r5, r0
 801a6cc:	d4e4      	bmi.n	801a698 <_fflush_r+0xc>
 801a6ce:	89a3      	ldrh	r3, [r4, #12]
 801a6d0:	059b      	lsls	r3, r3, #22
 801a6d2:	d4e1      	bmi.n	801a698 <_fflush_r+0xc>
 801a6d4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801a6d6:	f7fe fb72 	bl	8018dbe <__retarget_lock_release_recursive>
 801a6da:	e7dd      	b.n	801a698 <_fflush_r+0xc>

0801a6dc <fiprintf>:
 801a6dc:	b40e      	push	{r1, r2, r3}
 801a6de:	b503      	push	{r0, r1, lr}
 801a6e0:	4601      	mov	r1, r0
 801a6e2:	ab03      	add	r3, sp, #12
 801a6e4:	4805      	ldr	r0, [pc, #20]	; (801a6fc <fiprintf+0x20>)
 801a6e6:	f853 2b04 	ldr.w	r2, [r3], #4
 801a6ea:	6800      	ldr	r0, [r0, #0]
 801a6ec:	9301      	str	r3, [sp, #4]
 801a6ee:	f7ff fe2d 	bl	801a34c <_vfiprintf_r>
 801a6f2:	b002      	add	sp, #8
 801a6f4:	f85d eb04 	ldr.w	lr, [sp], #4
 801a6f8:	b003      	add	sp, #12
 801a6fa:	4770      	bx	lr
 801a6fc:	200000b8 	.word	0x200000b8

0801a700 <__swhatbuf_r>:
 801a700:	b570      	push	{r4, r5, r6, lr}
 801a702:	460c      	mov	r4, r1
 801a704:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801a708:	2900      	cmp	r1, #0
 801a70a:	b096      	sub	sp, #88	; 0x58
 801a70c:	4615      	mov	r5, r2
 801a70e:	461e      	mov	r6, r3
 801a710:	da0d      	bge.n	801a72e <__swhatbuf_r+0x2e>
 801a712:	89a3      	ldrh	r3, [r4, #12]
 801a714:	f013 0f80 	tst.w	r3, #128	; 0x80
 801a718:	f04f 0100 	mov.w	r1, #0
 801a71c:	bf0c      	ite	eq
 801a71e:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 801a722:	2340      	movne	r3, #64	; 0x40
 801a724:	2000      	movs	r0, #0
 801a726:	6031      	str	r1, [r6, #0]
 801a728:	602b      	str	r3, [r5, #0]
 801a72a:	b016      	add	sp, #88	; 0x58
 801a72c:	bd70      	pop	{r4, r5, r6, pc}
 801a72e:	466a      	mov	r2, sp
 801a730:	f000 f848 	bl	801a7c4 <_fstat_r>
 801a734:	2800      	cmp	r0, #0
 801a736:	dbec      	blt.n	801a712 <__swhatbuf_r+0x12>
 801a738:	9901      	ldr	r1, [sp, #4]
 801a73a:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 801a73e:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 801a742:	4259      	negs	r1, r3
 801a744:	4159      	adcs	r1, r3
 801a746:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801a74a:	e7eb      	b.n	801a724 <__swhatbuf_r+0x24>

0801a74c <__smakebuf_r>:
 801a74c:	898b      	ldrh	r3, [r1, #12]
 801a74e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801a750:	079d      	lsls	r5, r3, #30
 801a752:	4606      	mov	r6, r0
 801a754:	460c      	mov	r4, r1
 801a756:	d507      	bpl.n	801a768 <__smakebuf_r+0x1c>
 801a758:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801a75c:	6023      	str	r3, [r4, #0]
 801a75e:	6123      	str	r3, [r4, #16]
 801a760:	2301      	movs	r3, #1
 801a762:	6163      	str	r3, [r4, #20]
 801a764:	b002      	add	sp, #8
 801a766:	bd70      	pop	{r4, r5, r6, pc}
 801a768:	ab01      	add	r3, sp, #4
 801a76a:	466a      	mov	r2, sp
 801a76c:	f7ff ffc8 	bl	801a700 <__swhatbuf_r>
 801a770:	9900      	ldr	r1, [sp, #0]
 801a772:	4605      	mov	r5, r0
 801a774:	4630      	mov	r0, r6
 801a776:	f7ff f9b7 	bl	8019ae8 <_malloc_r>
 801a77a:	b948      	cbnz	r0, 801a790 <__smakebuf_r+0x44>
 801a77c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801a780:	059a      	lsls	r2, r3, #22
 801a782:	d4ef      	bmi.n	801a764 <__smakebuf_r+0x18>
 801a784:	f023 0303 	bic.w	r3, r3, #3
 801a788:	f043 0302 	orr.w	r3, r3, #2
 801a78c:	81a3      	strh	r3, [r4, #12]
 801a78e:	e7e3      	b.n	801a758 <__smakebuf_r+0xc>
 801a790:	89a3      	ldrh	r3, [r4, #12]
 801a792:	6020      	str	r0, [r4, #0]
 801a794:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801a798:	81a3      	strh	r3, [r4, #12]
 801a79a:	9b00      	ldr	r3, [sp, #0]
 801a79c:	6163      	str	r3, [r4, #20]
 801a79e:	9b01      	ldr	r3, [sp, #4]
 801a7a0:	6120      	str	r0, [r4, #16]
 801a7a2:	b15b      	cbz	r3, 801a7bc <__smakebuf_r+0x70>
 801a7a4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801a7a8:	4630      	mov	r0, r6
 801a7aa:	f000 f81d 	bl	801a7e8 <_isatty_r>
 801a7ae:	b128      	cbz	r0, 801a7bc <__smakebuf_r+0x70>
 801a7b0:	89a3      	ldrh	r3, [r4, #12]
 801a7b2:	f023 0303 	bic.w	r3, r3, #3
 801a7b6:	f043 0301 	orr.w	r3, r3, #1
 801a7ba:	81a3      	strh	r3, [r4, #12]
 801a7bc:	89a3      	ldrh	r3, [r4, #12]
 801a7be:	431d      	orrs	r5, r3
 801a7c0:	81a5      	strh	r5, [r4, #12]
 801a7c2:	e7cf      	b.n	801a764 <__smakebuf_r+0x18>

0801a7c4 <_fstat_r>:
 801a7c4:	b538      	push	{r3, r4, r5, lr}
 801a7c6:	4d07      	ldr	r5, [pc, #28]	; (801a7e4 <_fstat_r+0x20>)
 801a7c8:	2300      	movs	r3, #0
 801a7ca:	4604      	mov	r4, r0
 801a7cc:	4608      	mov	r0, r1
 801a7ce:	4611      	mov	r1, r2
 801a7d0:	602b      	str	r3, [r5, #0]
 801a7d2:	f7e7 ff3e 	bl	8002652 <_fstat>
 801a7d6:	1c43      	adds	r3, r0, #1
 801a7d8:	d102      	bne.n	801a7e0 <_fstat_r+0x1c>
 801a7da:	682b      	ldr	r3, [r5, #0]
 801a7dc:	b103      	cbz	r3, 801a7e0 <_fstat_r+0x1c>
 801a7de:	6023      	str	r3, [r4, #0]
 801a7e0:	bd38      	pop	{r3, r4, r5, pc}
 801a7e2:	bf00      	nop
 801a7e4:	20008270 	.word	0x20008270

0801a7e8 <_isatty_r>:
 801a7e8:	b538      	push	{r3, r4, r5, lr}
 801a7ea:	4d06      	ldr	r5, [pc, #24]	; (801a804 <_isatty_r+0x1c>)
 801a7ec:	2300      	movs	r3, #0
 801a7ee:	4604      	mov	r4, r0
 801a7f0:	4608      	mov	r0, r1
 801a7f2:	602b      	str	r3, [r5, #0]
 801a7f4:	f7e7 ff3d 	bl	8002672 <_isatty>
 801a7f8:	1c43      	adds	r3, r0, #1
 801a7fa:	d102      	bne.n	801a802 <_isatty_r+0x1a>
 801a7fc:	682b      	ldr	r3, [r5, #0]
 801a7fe:	b103      	cbz	r3, 801a802 <_isatty_r+0x1a>
 801a800:	6023      	str	r3, [r4, #0]
 801a802:	bd38      	pop	{r3, r4, r5, pc}
 801a804:	20008270 	.word	0x20008270

0801a808 <_sbrk_r>:
 801a808:	b538      	push	{r3, r4, r5, lr}
 801a80a:	4d06      	ldr	r5, [pc, #24]	; (801a824 <_sbrk_r+0x1c>)
 801a80c:	2300      	movs	r3, #0
 801a80e:	4604      	mov	r4, r0
 801a810:	4608      	mov	r0, r1
 801a812:	602b      	str	r3, [r5, #0]
 801a814:	f7e7 ff46 	bl	80026a4 <_sbrk>
 801a818:	1c43      	adds	r3, r0, #1
 801a81a:	d102      	bne.n	801a822 <_sbrk_r+0x1a>
 801a81c:	682b      	ldr	r3, [r5, #0]
 801a81e:	b103      	cbz	r3, 801a822 <_sbrk_r+0x1a>
 801a820:	6023      	str	r3, [r4, #0]
 801a822:	bd38      	pop	{r3, r4, r5, pc}
 801a824:	20008270 	.word	0x20008270

0801a828 <abort>:
 801a828:	b508      	push	{r3, lr}
 801a82a:	2006      	movs	r0, #6
 801a82c:	f000 f860 	bl	801a8f0 <raise>
 801a830:	2001      	movs	r0, #1
 801a832:	f7e7 febf 	bl	80025b4 <_exit>

0801a836 <_calloc_r>:
 801a836:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801a838:	fba1 2402 	umull	r2, r4, r1, r2
 801a83c:	b94c      	cbnz	r4, 801a852 <_calloc_r+0x1c>
 801a83e:	4611      	mov	r1, r2
 801a840:	9201      	str	r2, [sp, #4]
 801a842:	f7ff f951 	bl	8019ae8 <_malloc_r>
 801a846:	9a01      	ldr	r2, [sp, #4]
 801a848:	4605      	mov	r5, r0
 801a84a:	b930      	cbnz	r0, 801a85a <_calloc_r+0x24>
 801a84c:	4628      	mov	r0, r5
 801a84e:	b003      	add	sp, #12
 801a850:	bd30      	pop	{r4, r5, pc}
 801a852:	220c      	movs	r2, #12
 801a854:	6002      	str	r2, [r0, #0]
 801a856:	2500      	movs	r5, #0
 801a858:	e7f8      	b.n	801a84c <_calloc_r+0x16>
 801a85a:	4621      	mov	r1, r4
 801a85c:	f7fe fa38 	bl	8018cd0 <memset>
 801a860:	e7f4      	b.n	801a84c <_calloc_r+0x16>

0801a862 <__ascii_mbtowc>:
 801a862:	b082      	sub	sp, #8
 801a864:	b901      	cbnz	r1, 801a868 <__ascii_mbtowc+0x6>
 801a866:	a901      	add	r1, sp, #4
 801a868:	b142      	cbz	r2, 801a87c <__ascii_mbtowc+0x1a>
 801a86a:	b14b      	cbz	r3, 801a880 <__ascii_mbtowc+0x1e>
 801a86c:	7813      	ldrb	r3, [r2, #0]
 801a86e:	600b      	str	r3, [r1, #0]
 801a870:	7812      	ldrb	r2, [r2, #0]
 801a872:	1e10      	subs	r0, r2, #0
 801a874:	bf18      	it	ne
 801a876:	2001      	movne	r0, #1
 801a878:	b002      	add	sp, #8
 801a87a:	4770      	bx	lr
 801a87c:	4610      	mov	r0, r2
 801a87e:	e7fb      	b.n	801a878 <__ascii_mbtowc+0x16>
 801a880:	f06f 0001 	mvn.w	r0, #1
 801a884:	e7f8      	b.n	801a878 <__ascii_mbtowc+0x16>

0801a886 <__ascii_wctomb>:
 801a886:	b149      	cbz	r1, 801a89c <__ascii_wctomb+0x16>
 801a888:	2aff      	cmp	r2, #255	; 0xff
 801a88a:	bf85      	ittet	hi
 801a88c:	238a      	movhi	r3, #138	; 0x8a
 801a88e:	6003      	strhi	r3, [r0, #0]
 801a890:	700a      	strbls	r2, [r1, #0]
 801a892:	f04f 30ff 	movhi.w	r0, #4294967295
 801a896:	bf98      	it	ls
 801a898:	2001      	movls	r0, #1
 801a89a:	4770      	bx	lr
 801a89c:	4608      	mov	r0, r1
 801a89e:	4770      	bx	lr

0801a8a0 <_raise_r>:
 801a8a0:	291f      	cmp	r1, #31
 801a8a2:	b538      	push	{r3, r4, r5, lr}
 801a8a4:	4604      	mov	r4, r0
 801a8a6:	460d      	mov	r5, r1
 801a8a8:	d904      	bls.n	801a8b4 <_raise_r+0x14>
 801a8aa:	2316      	movs	r3, #22
 801a8ac:	6003      	str	r3, [r0, #0]
 801a8ae:	f04f 30ff 	mov.w	r0, #4294967295
 801a8b2:	bd38      	pop	{r3, r4, r5, pc}
 801a8b4:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 801a8b6:	b112      	cbz	r2, 801a8be <_raise_r+0x1e>
 801a8b8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801a8bc:	b94b      	cbnz	r3, 801a8d2 <_raise_r+0x32>
 801a8be:	4620      	mov	r0, r4
 801a8c0:	f000 f830 	bl	801a924 <_getpid_r>
 801a8c4:	462a      	mov	r2, r5
 801a8c6:	4601      	mov	r1, r0
 801a8c8:	4620      	mov	r0, r4
 801a8ca:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801a8ce:	f000 b817 	b.w	801a900 <_kill_r>
 801a8d2:	2b01      	cmp	r3, #1
 801a8d4:	d00a      	beq.n	801a8ec <_raise_r+0x4c>
 801a8d6:	1c59      	adds	r1, r3, #1
 801a8d8:	d103      	bne.n	801a8e2 <_raise_r+0x42>
 801a8da:	2316      	movs	r3, #22
 801a8dc:	6003      	str	r3, [r0, #0]
 801a8de:	2001      	movs	r0, #1
 801a8e0:	e7e7      	b.n	801a8b2 <_raise_r+0x12>
 801a8e2:	2400      	movs	r4, #0
 801a8e4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 801a8e8:	4628      	mov	r0, r5
 801a8ea:	4798      	blx	r3
 801a8ec:	2000      	movs	r0, #0
 801a8ee:	e7e0      	b.n	801a8b2 <_raise_r+0x12>

0801a8f0 <raise>:
 801a8f0:	4b02      	ldr	r3, [pc, #8]	; (801a8fc <raise+0xc>)
 801a8f2:	4601      	mov	r1, r0
 801a8f4:	6818      	ldr	r0, [r3, #0]
 801a8f6:	f7ff bfd3 	b.w	801a8a0 <_raise_r>
 801a8fa:	bf00      	nop
 801a8fc:	200000b8 	.word	0x200000b8

0801a900 <_kill_r>:
 801a900:	b538      	push	{r3, r4, r5, lr}
 801a902:	4d07      	ldr	r5, [pc, #28]	; (801a920 <_kill_r+0x20>)
 801a904:	2300      	movs	r3, #0
 801a906:	4604      	mov	r4, r0
 801a908:	4608      	mov	r0, r1
 801a90a:	4611      	mov	r1, r2
 801a90c:	602b      	str	r3, [r5, #0]
 801a90e:	f7e7 fe3f 	bl	8002590 <_kill>
 801a912:	1c43      	adds	r3, r0, #1
 801a914:	d102      	bne.n	801a91c <_kill_r+0x1c>
 801a916:	682b      	ldr	r3, [r5, #0]
 801a918:	b103      	cbz	r3, 801a91c <_kill_r+0x1c>
 801a91a:	6023      	str	r3, [r4, #0]
 801a91c:	bd38      	pop	{r3, r4, r5, pc}
 801a91e:	bf00      	nop
 801a920:	20008270 	.word	0x20008270

0801a924 <_getpid_r>:
 801a924:	f7e7 be2c 	b.w	8002580 <_getpid>

0801a928 <_init>:
 801a928:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a92a:	bf00      	nop
 801a92c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801a92e:	bc08      	pop	{r3}
 801a930:	469e      	mov	lr, r3
 801a932:	4770      	bx	lr

0801a934 <_fini>:
 801a934:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a936:	bf00      	nop
 801a938:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801a93a:	bc08      	pop	{r3}
 801a93c:	469e      	mov	lr, r3
 801a93e:	4770      	bx	lr

0801a940 <__timer_delay_veneer>:
 801a940:	f85f f000 	ldr.w	pc, [pc]	; 801a944 <__timer_delay_veneer+0x4>
 801a944:	000008f5 	.word	0x000008f5

0801a948 <__start_pop_veneer>:
 801a948:	f85f f000 	ldr.w	pc, [pc]	; 801a94c <__start_pop_veneer+0x4>
 801a94c:	00000951 	.word	0x00000951

0801a950 <__run_sweep_veneer>:
 801a950:	f85f f000 	ldr.w	pc, [pc]	; 801a954 <__run_sweep_veneer+0x4>
 801a954:	000005a9 	.word	0x000005a9

0801a958 <__init_synthesiser_veneer>:
 801a958:	f85f f000 	ldr.w	pc, [pc]	; 801a95c <__init_synthesiser_veneer+0x4>
 801a95c:	00000181 	.word	0x00000181

0801a960 <__set_MW_power_veneer>:
 801a960:	f85f f000 	ldr.w	pc, [pc]	; 801a964 <__set_MW_power_veneer+0x4>
 801a964:	00000123 	.word	0x00000123

0801a968 <__set_aom_atten_veneer>:
 801a968:	f85f f000 	ldr.w	pc, [pc]	; 801a96c <__set_aom_atten_veneer+0x4>
 801a96c:	00000a21 	.word	0x00000a21

0801a970 <__stop_pop_veneer>:
 801a970:	f85f f000 	ldr.w	pc, [pc]	; 801a974 <__stop_pop_veneer+0x4>
 801a974:	000009ad 	.word	0x000009ad
